

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Feb 10 17:57:08 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    87                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    88                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    89  0000                     
    90                           ; Version 1.40
    91                           ; Generated 01/12/2016 GMT
    92                           ; 
    93                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    94                           ; All rights reserved.
    95                           ; 
    96                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    97                           ; 
    98                           ; Redistribution and use in source and binary forms, with or without modification, are
    99                           ; permitted provided that the following conditions are met:
   100                           ; 
   101                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   102                           ;        conditions and the following disclaimer.
   103                           ; 
   104                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   105                           ;        of conditions and the following disclaimer in the documentation and/or other
   106                           ;        materials provided with the distribution.
   107                           ; 
   108                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   109                           ;        software without specific prior written permission.
   110                           ; 
   111                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   112                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   113                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   114                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   115                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   116                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   117                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   118                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   119                           ; 
   120                           ; 
   121                           ; Code-generator required, PIC18F4620 Definitions
   122                           ; 
   123                           ; SFR Addresses
   124  0000                     
   125                           	psect	idataBANK0
   126  0027F8                     __pidataBANK0:
   127                           	opt stack 0
   128                           
   129                           ;initializer for printRTC@F3177
   130  0027F8  4D                 	db	77
   131  0027F9  4D                 	db	77
   132  0027FA  4D                 	db	77
   133  0027FB  00                 	db	0
   134                           
   135                           ;initializer for _f_ID_receive
   136  0027FC  0001               	dw	1
   137                           
   138                           ;initializer for _first
   139  0027FE  0001               	dw	1
   140                           
   141                           	psect	mediumconst
   142  00FDB8                     __pmediumconst:
   143                           	opt stack 0
   144  00FDB8  00                 	db	0
   145  00FDB9                     _keys:
   146                           	opt stack 0
   147  00FDB9  31                 	db	49
   148  00FDBA  32                 	db	50
   149  00FDBB  33                 	db	51
   150  00FDBC  41                 	db	65
   151  00FDBD  34                 	db	52
   152  00FDBE  35                 	db	53
   153  00FDBF  36                 	db	54
   154  00FDC0  42                 	db	66
   155  00FDC1  37                 	db	55
   156  00FDC2  38                 	db	56
   157  00FDC3  39                 	db	57
   158  00FDC4  43                 	db	67
   159  00FDC5  2A                 	db	42
   160  00FDC6  30                 	db	48
   161  00FDC7  23                 	db	35
   162  00FDC8  44                 	db	68
   163  00FDC9  00                 	db	0
   164  00FDCA                     __end_of_keys:
   165                           	opt stack 0
   166  00FDCA                     _dpowers:
   167                           	opt stack 0
   168  00FDCA  0001               	dw	1
   169  00FDCC  000A               	dw	10
   170  00FDCE  0064               	dw	100
   171  00FDD0  03E8               	dw	1000
   172  00FDD2  2710               	dw	10000
   173  00FDD4                     __end_of_dpowers:
   174                           	opt stack 0
   175  0000                     _ADCON0	set	4034
   176  0000                     _ADCON0bits	set	4034
   177  0000                     _ADCON1	set	4033
   178  0000                     _CMCONbits	set	4020
   179  0000                     _CVRCON	set	4021
   180  0000                     _INTCONbits	set	4082
   181  0000                     _LATA	set	3977
   182  0000                     _LATAbits	set	3977
   183  0000                     _LATB	set	3978
   184  0000                     _LATC	set	3979
   185  0000                     _LATD	set	3980
   186  0000                     _LATDbits	set	3980
   187  0000                     _LATE	set	3981
   188  0000                     _OSCCON	set	4051
   189  0000                     _OSCTUNEbits	set	3995
   190  0000                     _PORTAbits	set	3968
   191  0000                     _PORTB	set	3969
   192  0000                     _PORTBbits	set	3969
   193  0000                     _SSPADD	set	4040
   194  0000                     _SSPBUF	set	4041
   195  0000                     _SSPCON1	set	4038
   196  0000                     _SSPCON2	set	4037
   197  0000                     _SSPSTAT	set	4039
   198  0000                     _T0CON	set	4053
   199  0000                     _TRISA	set	3986
   200  0000                     _TRISB	set	3987
   201  0000                     _TRISC	set	3988
   202  0000                     _TRISD	set	3989
   203  0000                     _TRISE	set	3990
   204  0000                     _ACKDT	set	32301
   205  0000                     _ACKEN	set	32300
   206  0000                     _ADFM	set	32263
   207  0000                     _ADON	set	32272
   208  0000                     _INT1IE	set	32643
   209  0000                     _INT1IF	set	32640
   210  0000                     _PEN	set	32298
   211  0000                     _RCEN	set	32299
   212  0000                     _RSEN	set	32297
   213  0000                     _SEN	set	32296
   214  0000                     _TMR0IE	set	32661
   215  0000                     _TMR0IF	set	32658
   216  0000                     _TRISC3	set	31907
   217  0000                     _TRISC4	set	31908
   218  00FDD4                     STR_48:
   219  00FDD4  25                 	db	37
   220  00FDD5  30                 	db	48	;'0'
   221  00FDD6  32                 	db	50	;'2'
   222  00FDD7  64                 	db	100	;'d'
   223  00FDD8  25                 	db	37
   224  00FDD9  73                 	db	115	;'s'
   225  00FDDA  20                 	db	32
   226  00FDDB  7C                 	db	124
   227  00FDDC  20                 	db	32
   228  00FDDD  25                 	db	37
   229  00FDDE  30                 	db	48	;'0'
   230  00FDDF  32                 	db	50	;'2'
   231  00FDE0  64                 	db	100	;'d'
   232  00FDE1  3A                 	db	58	;':'
   233  00FDE2  25                 	db	37
   234  00FDE3  30                 	db	48	;'0'
   235  00FDE4  32                 	db	50	;'2'
   236  00FDE5  64                 	db	100	;'d'
   237  00FDE6  3A                 	db	58	;':'
   238  00FDE7  25                 	db	37
   239  00FDE8  30                 	db	48	;'0'
   240  00FDE9  32                 	db	50	;'2'
   241  00FDEA  64                 	db	100	;'d'
   242  00FDEB  00                 	db	0
   243  00FDEC                     STR_2:
   244  00FDEC  54                 	db	84	;'T'
   245  00FDED  69                 	db	105	;'i'
   246  00FDEE  6D                 	db	109	;'m'
   247  00FDEF  65                 	db	101	;'e'
   248  00FDF0  3A                 	db	58	;':'
   249  00FDF1  20                 	db	32
   250  00FDF2  25                 	db	37
   251  00FDF3  30                 	db	48	;'0'
   252  00FDF4  32                 	db	50	;'2'
   253  00FDF5  64                 	db	100	;'d'
   254  00FDF6  3A                 	db	58	;':'
   255  00FDF7  25                 	db	37
   256  00FDF8  30                 	db	48	;'0'
   257  00FDF9  32                 	db	50	;'2'
   258  00FDFA  64                 	db	100	;'d'
   259  00FDFB  3A                 	db	58	;':'
   260  00FDFC  25                 	db	37
   261  00FDFD  30                 	db	48	;'0'
   262  00FDFE  32                 	db	50	;'2'
   263  00FDFF  64                 	db	100	;'d'
   264  00FE00  00                 	db	0
   265  00FE01                     STR_3:
   266  00FE01  2D                 	db	45
   267  00FE02  2D                 	db	45
   268  00FE03  20                 	db	32
   269  00FE04  4C                 	db	76	;'L'
   270  00FE05  6F                 	db	111	;'o'
   271  00FE06  67                 	db	103	;'g'
   272  00FE07  20                 	db	32
   273  00FE08  25                 	db	37
   274  00FE09  32                 	db	50	;'2'
   275  00FE0A  64                 	db	100	;'d'
   276  00FE0B  20                 	db	32
   277  00FE0C  68                 	db	104	;'h'
   278  00FE0D  65                 	db	101	;'e'
   279  00FE0E  72                 	db	114	;'r'
   280  00FE0F  65                 	db	101	;'e'
   281  00FE10  2D                 	db	45
   282  00FE11  2D                 	db	45
   283  00FE12  00                 	db	0
   284  00FE13                     STR_8:
   285  00FE13  25                 	db	37
   286  00FE14  64                 	db	100	;'d'
   287  00FE15  20                 	db	32
   288  00FE16  6D                 	db	109	;'m'
   289  00FE17  69                 	db	105	;'i'
   290  00FE18  6E                 	db	110	;'n'
   291  00FE19  28                 	db	40
   292  00FE1A  73                 	db	115	;'s'
   293  00FE1B  29                 	db	41
   294  00FE1C  20                 	db	32
   295  00FE1D  25                 	db	37
   296  00FE1E  64                 	db	100	;'d'
   297  00FE1F  20                 	db	32
   298  00FE20  73                 	db	115	;'s'
   299  00FE21  65                 	db	101	;'e'
   300  00FE22  63                 	db	99	;'c'
   301  00FE23  73                 	db	115	;'s'
   302  00FE24  00                 	db	0
   303  00FE25                     STR_26:
   304  00FE25  4C                 	db	76	;'L'
   305  00FE26  4F                 	db	79	;'O'
   306  00FE27  47                 	db	71	;'G'
   307  00FE28  20                 	db	32
   308  00FE29  31                 	db	49	;'1'
   309  00FE2A  20                 	db	32
   310  00FE2B  20                 	db	32
   311  00FE2C  20                 	db	32
   312  00FE2D  20                 	db	32
   313  00FE2E  20                 	db	32
   314  00FE2F  20                 	db	32
   315  00FE30  20                 	db	32
   316  00FE31  20                 	db	32
   317  00FE32  20                 	db	32
   318  00FE33  20                 	db	32
   319  00FE34  20                 	db	32
   320  00FE35  00                 	db	0
   321  00FE36                     STR_25:
   322  00FE36  4C                 	db	76	;'L'
   323  00FE37  4F                 	db	79	;'O'
   324  00FE38  47                 	db	71	;'G'
   325  00FE39  20                 	db	32
   326  00FE3A  32                 	db	50	;'2'
   327  00FE3B  20                 	db	32
   328  00FE3C  20                 	db	32
   329  00FE3D  20                 	db	32
   330  00FE3E  20                 	db	32
   331  00FE3F  20                 	db	32
   332  00FE40  20                 	db	32
   333  00FE41  20                 	db	32
   334  00FE42  20                 	db	32
   335  00FE43  20                 	db	32
   336  00FE44  20                 	db	32
   337  00FE45  20                 	db	32
   338  00FE46  00                 	db	0
   339  00FE47                     STR_29:
   340  00FE47  4C                 	db	76	;'L'
   341  00FE48  4F                 	db	79	;'O'
   342  00FE49  47                 	db	71	;'G'
   343  00FE4A  20                 	db	32
   344  00FE4B  33                 	db	51	;'3'
   345  00FE4C  20                 	db	32
   346  00FE4D  20                 	db	32
   347  00FE4E  20                 	db	32
   348  00FE4F  20                 	db	32
   349  00FE50  20                 	db	32
   350  00FE51  20                 	db	32
   351  00FE52  20                 	db	32
   352  00FE53  20                 	db	32
   353  00FE54  20                 	db	32
   354  00FE55  20                 	db	32
   355  00FE56  20                 	db	32
   356  00FE57  00                 	db	0
   357  00FE58                     STR_33:
   358  00FE58  4C                 	db	76	;'L'
   359  00FE59  4F                 	db	79	;'O'
   360  00FE5A  47                 	db	71	;'G'
   361  00FE5B  20                 	db	32
   362  00FE5C  34                 	db	52	;'4'
   363  00FE5D  20                 	db	32
   364  00FE5E  20                 	db	32
   365  00FE5F  20                 	db	32
   366  00FE60  20                 	db	32
   367  00FE61  20                 	db	32
   368  00FE62  20                 	db	32
   369  00FE63  20                 	db	32
   370  00FE64  20                 	db	32
   371  00FE65  20                 	db	32
   372  00FE66  20                 	db	32
   373  00FE67  20                 	db	32
   374  00FE68  00                 	db	0
   375  00FE69                     STR_21:
   376  00FE69  33                 	db	51	;'3'
   377  00FE6A  2E                 	db	46
   378  00FE6B  20                 	db	32
   379  00FE6C  4C                 	db	76	;'L'
   380  00FE6D  4F                 	db	79	;'O'
   381  00FE6E  47                 	db	71	;'G'
   382  00FE6F  53                 	db	83	;'S'
   383  00FE70  20                 	db	32
   384  00FE71  20                 	db	32
   385  00FE72  20                 	db	32
   386  00FE73  20                 	db	32
   387  00FE74  20                 	db	32
   388  00FE75  20                 	db	32
   389  00FE76  20                 	db	32
   390  00FE77  20                 	db	32
   391  00FE78  20                 	db	32
   392  00FE79  00                 	db	0
   393  00FE7A                     STR_17:
   394  00FE7A  32                 	db	50	;'2'
   395  00FE7B  2E                 	db	46
   396  00FE7C  20                 	db	32
   397  00FE7D  53                 	db	83	;'S'
   398  00FE7E  4F                 	db	79	;'O'
   399  00FE7F  52                 	db	82	;'R'
   400  00FE80  54                 	db	84	;'T'
   401  00FE81  20                 	db	32
   402  00FE82  20                 	db	32
   403  00FE83  20                 	db	32
   404  00FE84  20                 	db	32
   405  00FE85  20                 	db	32
   406  00FE86  20                 	db	32
   407  00FE87  20                 	db	32
   408  00FE88  20                 	db	32
   409  00FE89  20                 	db	32
   410  00FE8A  00                 	db	0
   411  00FE8B                     STR_18:
   412  00FE8B  31                 	db	49	;'1'
   413  00FE8C  2E                 	db	46
   414  00FE8D  20                 	db	32
   415  00FE8E  44                 	db	68	;'D'
   416  00FE8F  41                 	db	65	;'A'
   417  00FE90  54                 	db	84	;'T'
   418  00FE91  45                 	db	69	;'E'
   419  00FE92  2F                 	db	47
   420  00FE93  54                 	db	84	;'T'
   421  00FE94  49                 	db	73	;'I'
   422  00FE95  4D                 	db	77	;'M'
   423  00FE96  45                 	db	69	;'E'
   424  00FE97  20                 	db	32
   425  00FE98  20                 	db	32
   426  00FE99  20                 	db	32
   427  00FE9A  20                 	db	32
   428  00FE9B  00                 	db	0
   429  00FE9C                     STR_9:
   430  00FE9C  20                 	db	32
   431  00FE9D  2D                 	db	45
   432  00FE9E  2D                 	db	45
   433  00FE9F  20                 	db	32
   434  00FEA0  50                 	db	80	;'P'
   435  00FEA1  6F                 	db	111	;'o'
   436  00FEA2  70                 	db	112	;'p'
   437  00FEA3  20                 	db	32
   438  00FEA4  20                 	db	32
   439  00FEA5  63                 	db	99	;'c'
   440  00FEA6  61                 	db	97	;'a'
   441  00FEA7  6E                 	db	110	;'n'
   442  00FEA8  20                 	db	32
   443  00FEA9  2D                 	db	45
   444  00FEAA  2D                 	db	45
   445  00FEAB  20                 	db	32
   446  00FEAC  00                 	db	0
   447  00FEAD                     STR_11:
   448  00FEAD  20                 	db	32
   449  00FEAE  2D                 	db	45
   450  00FEAF  2D                 	db	45
   451  00FEB0  20                 	db	32
   452  00FEB1  53                 	db	83	;'S'
   453  00FEB2  6F                 	db	111	;'o'
   454  00FEB3  75                 	db	117	;'u'
   455  00FEB4  70                 	db	112	;'p'
   456  00FEB5  20                 	db	32
   457  00FEB6  63                 	db	99	;'c'
   458  00FEB7  61                 	db	97	;'a'
   459  00FEB8  6E                 	db	110	;'n'
   460  00FEB9  20                 	db	32
   461  00FEBA  2D                 	db	45
   462  00FEBB  2D                 	db	45
   463  00FEBC  20                 	db	32
   464  00FEBD  00                 	db	0
   465  00FEBE                     STR_13:
   466  00FEBE  2D                 	db	45
   467  00FEBF  2D                 	db	45
   468  00FEC0  20                 	db	32
   469  00FEC1  54                 	db	84	;'T'
   470  00FEC2  6F                 	db	111	;'o'
   471  00FEC3  74                 	db	116	;'t'
   472  00FEC4  61                 	db	97	;'a'
   473  00FEC5  6C                 	db	108	;'l'
   474  00FEC6  20                 	db	32
   475  00FEC7  63                 	db	99	;'c'
   476  00FEC8  61                 	db	97	;'a'
   477  00FEC9  6E                 	db	110	;'n'
   478  00FECA  73                 	db	115	;'s'
   479  00FECB  20                 	db	32
   480  00FECC  2D                 	db	45
   481  00FECD  2D                 	db	45
   482  00FECE  00                 	db	0
   483  00FECF                     STR_10:
   484  00FECF  4E                 	db	78	;'N'
   485  00FED0  6F                 	db	111	;'o'
   486  00FED1  20                 	db	32
   487  00FED2  74                 	db	116	;'t'
   488  00FED3  61                 	db	97	;'a'
   489  00FED4  62                 	db	98	;'b'
   490  00FED5  3A                 	db	58	;':'
   491  00FED6  20                 	db	32
   492  00FED7  39                 	db	57	;'9'
   493  00FED8  7C                 	db	124
   494  00FED9  54                 	db	84	;'T'
   495  00FEDA  61                 	db	97	;'a'
   496  00FEDB  62                 	db	98	;'b'
   497  00FEDC  3A                 	db	58	;':'
   498  00FEDD  20                 	db	32
   499  00FEDE  31                 	db	49	;'1'
   500  00FEDF  00                 	db	0
   501  00FEE0                     STR_12:
   502  00FEE0  4E                 	db	78	;'N'
   503  00FEE1  6F                 	db	111	;'o'
   504  00FEE2  20                 	db	32
   505  00FEE3  6C                 	db	108	;'l'
   506  00FEE4  62                 	db	98	;'b'
   507  00FEE5  6C                 	db	108	;'l'
   508  00FEE6  3A                 	db	58	;':'
   509  00FEE7  20                 	db	32
   510  00FEE8  31                 	db	49	;'1'
   511  00FEE9  7C                 	db	124
   512  00FEEA  6C                 	db	108	;'l'
   513  00FEEB  62                 	db	98	;'b'
   514  00FEEC  6C                 	db	108	;'l'
   515  00FEED  3A                 	db	58	;':'
   516  00FEEE  20                 	db	32
   517  00FEEF  31                 	db	49	;'1'
   518  00FEF0  00                 	db	0
   519  00FEF1                     STR_6:
   520  00FEF1  30                 	db	48	;'0'
   521  00FEF2  36                 	db	54	;'6'
   522  00FEF3  46                 	db	70	;'F'
   523  00FEF4  65                 	db	101	;'e'
   524  00FEF5  62                 	db	98	;'b'
   525  00FEF6  20                 	db	32
   526  00FEF7  7C                 	db	124
   527  00FEF8  20                 	db	32
   528  00FEF9  30                 	db	48	;'0'
   529  00FEFA  31                 	db	49	;'1'
   530  00FEFB  3A                 	db	58	;':'
   531  00FEFC  30                 	db	48	;'0'
   532  00FEFD  38                 	db	56	;'8'
   533  00FEFE  3A                 	db	58	;':'
   534  00FEFF  35                 	db	53	;'5'
   535  00FF00  36                 	db	54	;'6'
   536  00FF01  00                 	db	0
   537  00FF02                     STR_24:
   538  00FF02  4C                 	db	76	;'L'
   539  00FF03  4F                 	db	79	;'O'
   540  00FF04  47                 	db	71	;'G'
   541  00FF05  20                 	db	32
   542  00FF06  31                 	db	49	;'1'
   543  00FF07  20                 	db	32
   544  00FF08  20                 	db	32
   545  00FF09  20                 	db	32
   546  00FF0A  20                 	db	32
   547  00FF0B  20                 	db	32
   548  00FF0C  20                 	db	32
   549  00FF0D  20                 	db	32
   550  00FF0E  20                 	db	32
   551  00FF0F  20                 	db	32
   552  00FF10  20                 	db	32
   553  00FF11  3C                 	db	60	;'<'
   554  00FF12  00                 	db	0
   555  00FF13                     STR_27:
   556  00FF13  4C                 	db	76	;'L'
   557  00FF14  4F                 	db	79	;'O'
   558  00FF15  47                 	db	71	;'G'
   559  00FF16  20                 	db	32
   560  00FF17  32                 	db	50	;'2'
   561  00FF18  20                 	db	32
   562  00FF19  20                 	db	32
   563  00FF1A  20                 	db	32
   564  00FF1B  20                 	db	32
   565  00FF1C  20                 	db	32
   566  00FF1D  20                 	db	32
   567  00FF1E  20                 	db	32
   568  00FF1F  20                 	db	32
   569  00FF20  20                 	db	32
   570  00FF21  20                 	db	32
   571  00FF22  3C                 	db	60	;'<'
   572  00FF23  00                 	db	0
   573  00FF24                     STR_31:
   574  00FF24  4C                 	db	76	;'L'
   575  00FF25  4F                 	db	79	;'O'
   576  00FF26  47                 	db	71	;'G'
   577  00FF27  20                 	db	32
   578  00FF28  33                 	db	51	;'3'
   579  00FF29  20                 	db	32
   580  00FF2A  20                 	db	32
   581  00FF2B  20                 	db	32
   582  00FF2C  20                 	db	32
   583  00FF2D  20                 	db	32
   584  00FF2E  20                 	db	32
   585  00FF2F  20                 	db	32
   586  00FF30  20                 	db	32
   587  00FF31  20                 	db	32
   588  00FF32  20                 	db	32
   589  00FF33  3C                 	db	60	;'<'
   590  00FF34  00                 	db	0
   591  00FF35                     STR_35:
   592  00FF35  4C                 	db	76	;'L'
   593  00FF36  4F                 	db	79	;'O'
   594  00FF37  47                 	db	71	;'G'
   595  00FF38  20                 	db	32
   596  00FF39  34                 	db	52	;'4'
   597  00FF3A  20                 	db	32
   598  00FF3B  20                 	db	32
   599  00FF3C  20                 	db	32
   600  00FF3D  20                 	db	32
   601  00FF3E  20                 	db	32
   602  00FF3F  20                 	db	32
   603  00FF40  20                 	db	32
   604  00FF41  20                 	db	32
   605  00FF42  20                 	db	32
   606  00FF43  20                 	db	32
   607  00FF44  3C                 	db	60	;'<'
   608  00FF45  00                 	db	0
   609  00FF46                     STR_23:
   610  00FF46  33                 	db	51	;'3'
   611  00FF47  2E                 	db	46
   612  00FF48  20                 	db	32
   613  00FF49  4C                 	db	76	;'L'
   614  00FF4A  4F                 	db	79	;'O'
   615  00FF4B  47                 	db	71	;'G'
   616  00FF4C  53                 	db	83	;'S'
   617  00FF4D  20                 	db	32
   618  00FF4E  20                 	db	32
   619  00FF4F  20                 	db	32
   620  00FF50  20                 	db	32
   621  00FF51  20                 	db	32
   622  00FF52  20                 	db	32
   623  00FF53  20                 	db	32
   624  00FF54  20                 	db	32
   625  00FF55  3C                 	db	60	;'<'
   626  00FF56  00                 	db	0
   627  00FF57                     STR_19:
   628  00FF57  32                 	db	50	;'2'
   629  00FF58  2E                 	db	46
   630  00FF59  20                 	db	32
   631  00FF5A  53                 	db	83	;'S'
   632  00FF5B  4F                 	db	79	;'O'
   633  00FF5C  52                 	db	82	;'R'
   634  00FF5D  54                 	db	84	;'T'
   635  00FF5E  20                 	db	32
   636  00FF5F  20                 	db	32
   637  00FF60  20                 	db	32
   638  00FF61  20                 	db	32
   639  00FF62  20                 	db	32
   640  00FF63  20                 	db	32
   641  00FF64  20                 	db	32
   642  00FF65  20                 	db	32
   643  00FF66  3C                 	db	60	;'<'
   644  00FF67  00                 	db	0
   645  00FF68                     STR_16:
   646  00FF68  31                 	db	49	;'1'
   647  00FF69  2E                 	db	46
   648  00FF6A  20                 	db	32
   649  00FF6B  44                 	db	68	;'D'
   650  00FF6C  41                 	db	65	;'A'
   651  00FF6D  54                 	db	84	;'T'
   652  00FF6E  45                 	db	69	;'E'
   653  00FF6F  2F                 	db	47
   654  00FF70  54                 	db	84	;'T'
   655  00FF71  49                 	db	73	;'I'
   656  00FF72  4D                 	db	77	;'M'
   657  00FF73  45                 	db	69	;'E'
   658  00FF74  20                 	db	32
   659  00FF75  20                 	db	32
   660  00FF76  20                 	db	32
   661  00FF77  3C                 	db	60	;'<'
   662  00FF78  00                 	db	0
   663  00FF79                     STR_4:
   664  00FF79  50                 	db	80	;'P'
   665  00FF7A  61                 	db	97	;'a'
   666  00FF7B  75                 	db	117	;'u'
   667  00FF7C  73                 	db	115	;'s'
   668  00FF7D  65                 	db	101	;'e'
   669  00FF7E  3A                 	db	58	;':'
   670  00FF7F  3C                 	db	60	;'<'
   671  00FF80  20                 	db	32
   672  00FF81  7C                 	db	124
   673  00FF82  20                 	db	32
   674  00FF83  42                 	db	66	;'B'
   675  00FF84  61                 	db	97	;'a'
   676  00FF85  63                 	db	99	;'c'
   677  00FF86  6B                 	db	107	;'k'
   678  00FF87  3A                 	db	58	;':'
   679  00FF88  3E                 	db	62	;'>'
   680  00FF89  00                 	db	0
   681  00FF8A                     STR_15:
   682  00FF8A  50                 	db	80	;'P'
   683  00FF8B  55                 	db	85	;'U'
   684  00FF8C  53                 	db	83	;'S'
   685  00FF8D  48                 	db	72	;'H'
   686  00FF8E  20                 	db	32
   687  00FF8F  54                 	db	84	;'T'
   688  00FF90  4F                 	db	79	;'O'
   689  00FF91  20                 	db	32
   690  00FF92  43                 	db	67	;'C'
   691  00FF93  4F                 	db	79	;'O'
   692  00FF94  4E                 	db	78	;'N'
   693  00FF95  54                 	db	84	;'T'
   694  00FF96  49                 	db	73	;'I'
   695  00FF97  4E                 	db	78	;'N'
   696  00FF98  55                 	db	85	;'U'
   697  00FF99  45                 	db	69	;'E'
   698  00FF9A  00                 	db	0
   699  00FF9B                     STR_1:
   700  00FF9B  53                 	db	83	;'S'
   701  00FF9C  6F                 	db	111	;'o'
   702  00FF9D  72                 	db	114	;'r'
   703  00FF9E  74                 	db	116	;'t'
   704  00FF9F  20                 	db	32
   705  00FFA0  63                 	db	99	;'c'
   706  00FFA1  6F                 	db	111	;'o'
   707  00FFA2  6D                 	db	109	;'m'
   708  00FFA3  70                 	db	112	;'p'
   709  00FFA4  6C                 	db	108	;'l'
   710  00FFA5  65                 	db	101	;'e'
   711  00FFA6  74                 	db	116	;'t'
   712  00FFA7  65                 	db	101	;'e'
   713  00FFA8  00                 	db	0
   714  00FFA9                     STR_49:
   715  00FFA9  53                 	db	83	;'S'
   716  00FFAA  6F                 	db	111	;'o'
   717  00FFAB  72                 	db	114	;'r'
   718  00FFAC  74                 	db	116	;'t'
   719  00FFAD  69                 	db	105	;'i'
   720  00FFAE  6E                 	db	110	;'n'
   721  00FFAF  67                 	db	103	;'g'
   722  00FFB0  2E                 	db	46
   723  00FFB1  2E                 	db	46
   724  00FFB2  2E                 	db	46
   725  00FFB3  00                 	db	0
   726  00FFB4                     STR_7:
   727  00FFB4  44                 	db	68	;'D'
   728  00FFB5  75                 	db	117	;'u'
   729  00FFB6  72                 	db	114	;'r'
   730  00FFB7  61                 	db	97	;'a'
   731  00FFB8  74                 	db	116	;'t'
   732  00FFB9  69                 	db	105	;'i'
   733  00FFBA  6F                 	db	111	;'o'
   734  00FFBB  6E                 	db	110	;'n'
   735  00FFBC  3A                 	db	58	;':'
   736  00FFBD  00                 	db	0
   737  00FFBE                     STR_51:
   738  00FFBE  28                 	db	40
   739  00FFBF  6E                 	db	110	;'n'
   740  00FFC0  75                 	db	117	;'u'
   741  00FFC1  6C                 	db	108	;'l'
   742  00FFC2  6C                 	db	108	;'l'
   743  00FFC3  29                 	db	41
   744  00FFC4  00                 	db	0
   745  00FFC5                     STR_5:
   746  00FFC5  53                 	db	83	;'S'
   747  00FFC6  74                 	db	116	;'t'
   748  00FFC7  61                 	db	97	;'a'
   749  00FFC8  72                 	db	114	;'r'
   750  00FFC9  74                 	db	116	;'t'
   751  00FFCA  3A                 	db	58	;':'
   752  00FFCB  00                 	db	0
   753  00FFCC                     STR_37:
   754  00FFCC  46                 	db	70	;'F'
   755  00FFCD  65                 	db	101	;'e'
   756  00FFCE  62                 	db	98	;'b'
   757  00FFCF  00                 	db	0
   758  00FFD0                     STR_47:
   759  00FFD0  44                 	db	68	;'D'
   760  00FFD1  65                 	db	101	;'e'
   761  00FFD2  63                 	db	99	;'c'
   762  00FFD3  00                 	db	0
   763  00FFD4                     STR_43:
   764  00FFD4  41                 	db	65	;'A'
   765  00FFD5  75                 	db	117	;'u'
   766  00FFD6  67                 	db	103	;'g'
   767  00FFD7  00                 	db	0
   768  00FFD8                     STR_42:
   769  00FFD8  4A                 	db	74	;'J'
   770  00FFD9  75                 	db	117	;'u'
   771  00FFDA  6C                 	db	108	;'l'
   772  00FFDB  00                 	db	0
   773  00FFDC                     STR_36:
   774  00FFDC  4A                 	db	74	;'J'
   775  00FFDD  61                 	db	97	;'a'
   776  00FFDE  6E                 	db	110	;'n'
   777  00FFDF  00                 	db	0
   778  00FFE0                     STR_41:
   779  00FFE0  4A                 	db	74	;'J'
   780  00FFE1  75                 	db	117	;'u'
   781  00FFE2  6E                 	db	110	;'n'
   782  00FFE3  00                 	db	0
   783  00FFE4                     STR_44:
   784  00FFE4  53                 	db	83	;'S'
   785  00FFE5  65                 	db	101	;'e'
   786  00FFE6  70                 	db	112	;'p'
   787  00FFE7  00                 	db	0
   788  00FFE8                     STR_38:
   789  00FFE8  4D                 	db	77	;'M'
   790  00FFE9  61                 	db	97	;'a'
   791  00FFEA  72                 	db	114	;'r'
   792  00FFEB  00                 	db	0
   793  00FFEC                     STR_39:
   794  00FFEC  41                 	db	65	;'A'
   795  00FFED  70                 	db	112	;'p'
   796  00FFEE  72                 	db	114	;'r'
   797  00FFEF  00                 	db	0
   798  00FFF0                     STR_45:
   799  00FFF0  4F                 	db	79	;'O'
   800  00FFF1  63                 	db	99	;'c'
   801  00FFF2  74                 	db	116	;'t'
   802  00FFF3  00                 	db	0
   803  00FFF4                     STR_46:
   804  00FFF4  4E                 	db	78	;'N'
   805  00FFF5  6F                 	db	111	;'o'
   806  00FFF6  76                 	db	118	;'v'
   807  00FFF7  00                 	db	0
   808  00FFF8                     STR_40:
   809  00FFF8  4D                 	db	77	;'M'
   810  00FFF9  61                 	db	97	;'a'
   811  00FFFA  79                 	db	121	;'y'
   812  00FFFB  00                 	db	0
   813  00FFFC                     STR_14:
   814  00FFFC  31                 	db	49	;'1'
   815  00FFFD  32                 	db	50	;'2'
   816  00FFFE  00                 	db	0
   817  0000                     
   818                           ; #config settings
   819  00FFFF  00                 	db	0	; dummy byte at the end
   820  0000                     
   821                           	psect	cinit
   822  002224                     __pcinit:
   823                           	opt stack 0
   824  002224                     start_initialization:
   825                           	opt stack 0
   826  002224                     __initialization:
   827                           	opt stack 0
   828                           
   829                           ; Initialize objects allocated to BANK0 (8 bytes)
   830                           ; load TBLPTR registers with __pidataBANK0
   831  002224  0EF8               	movlw	low __pidataBANK0
   832  002226  6EF6               	movwf	tblptrl,c
   833  002228  0E27               	movlw	high __pidataBANK0
   834  00222A  6EF7               	movwf	tblptrh,c
   835  00222C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   836  00222E  6EF8               	movwf	tblptru,c
   837  002230  EE00  F0F0         	lfsr	0,__pdataBANK0
   838  002234  EE10 F008          	lfsr	1,8
   839  002238                     copy_data0:
   840  002238  0009               	tblrd		*+
   841  00223A  CFF5 FFEE          	movff	tablat,postinc0
   842  00223E  50E5               	movf	postdec1,w,c
   843  002240  50E1               	movf	fsr1l,w,c
   844  002242  E1FA               	bnz	copy_data0
   845                           
   846                           ; Clear objects allocated to BANK1 (14 bytes)
   847  002244  EE01  F000         	lfsr	0,__pbssBANK1
   848  002248  0E0E               	movlw	14
   849  00224A                     clear_0:
   850  00224A  6AEE               	clrf	postinc0,c
   851  00224C  06E8               	decf	wreg,f,c
   852  00224E  E1FD               	bnz	clear_0
   853                           
   854                           ; Clear objects allocated to BANK0 (28 bytes)
   855  002250  EE00  F0D4         	lfsr	0,__pbssBANK0
   856  002254  0E1C               	movlw	28
   857  002256                     clear_1:
   858  002256  6AEE               	clrf	postinc0,c
   859  002258  06E8               	decf	wreg,f,c
   860  00225A  E1FD               	bnz	clear_1
   861                           
   862                           ; Clear objects allocated to COMRAM (35 bytes)
   863  00225C  EE00  F05B         	lfsr	0,__pbssCOMRAM
   864  002260  0E23               	movlw	35
   865  002262                     clear_2:
   866  002262  6AEE               	clrf	postinc0,c
   867  002264  06E8               	decf	wreg,f,c
   868  002266  E1FD               	bnz	clear_2
   869  002268                     end_of_initialization:
   870                           	opt stack 0
   871  002268                     __end_of__initialization:
   872                           	opt stack 0
   873  002268  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   874  00226A  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   875  00226C  0100               	movlb	0
   876  00226E  EF77  F00F         	goto	_main	;jump to C main() function
   877                           tblptru	equ	0xFF8
   878                           tblptrh	equ	0xFF7
   879                           tblptrl	equ	0xFF6
   880                           tablat	equ	0xFF5
   881                           postinc0	equ	0xFEE
   882                           wreg	equ	0xFE8
   883                           postdec1	equ	0xFE5
   884                           fsr1l	equ	0xFE1
   885                           
   886                           	psect	bssCOMRAM
   887  00005B                     __pbssCOMRAM:
   888                           	opt stack 0
   889  00005B                     _PWMTimerCounter:
   890                           	opt stack 0
   891  00005B                     	ds	2
   892  00005D                     _UIenabled:
   893                           	opt stack 0
   894  00005D                     	ds	2
   895  00005F                     _back:
   896                           	opt stack 0
   897  00005F                     	ds	2
   898  000061                     _count_can_no_lab:
   899                           	opt stack 0
   900  000061                     	ds	2
   901  000063                     _count_can_w_lab:
   902                           	opt stack 0
   903  000063                     	ds	2
   904  000065                     _count_pop_no_tab:
   905                           	opt stack 0
   906  000065                     	ds	2
   907  000067                     _count_pop_w_tab:
   908                           	opt stack 0
   909  000067                     	ds	2
   910  000069                     _down:
   911                           	opt stack 0
   912  000069                     	ds	2
   913  00006B                     _enter:
   914                           	opt stack 0
   915  00006B                     	ds	2
   916  00006D                     _f_can_coming_to_distribution:
   917                           	opt stack 0
   918  00006D                     	ds	2
   919  00006F                     _f_can_distributed:
   920                           	opt stack 0
   921  00006F                     	ds	2
   922  000071                     _firstboot:
   923                           	opt stack 0
   924  000071                     	ds	2
   925  000073                     _servoSelectFlag:
   926                           	opt stack 0
   927  000073                     	ds	2
   928  000075                     _servoSwitch:
   929                           	opt stack 0
   930  000075                     	ds	2
   931  000077                     _sortTimerCounter:
   932                           	opt stack 0
   933  000077                     	ds	2
   934  000079                     _up:
   935                           	opt stack 0
   936  000079                     	ds	2
   937  00007B                     _block:
   938                           	opt stack 0
   939  00007B                     	ds	1
   940  00007C                     _canType:
   941                           	opt stack 0
   942  00007C                     	ds	1
   943  00007D                     _input:
   944                           	opt stack 0
   945  00007D                     	ds	1
   946                           tblptru	equ	0xFF8
   947                           tblptrh	equ	0xFF7
   948                           tblptrl	equ	0xFF6
   949                           tablat	equ	0xFF5
   950                           postinc0	equ	0xFEE
   951                           wreg	equ	0xFE8
   952                           postdec1	equ	0xFE5
   953                           fsr1l	equ	0xFE1
   954                           
   955                           	psect	bssBANK0
   956  0000D4                     __pbssBANK0:
   957                           	opt stack 0
   958  0000D4                     _time:
   959                           	opt stack 0
   960  0000D4                     	ds	7
   961  0000DB                     _IR_in:
   962                           	opt stack 0
   963  0000DB                     	ds	2
   964  0000DD                     _beamTimerCounter:
   965                           	opt stack 0
   966  0000DD                     	ds	2
   967  0000DF                     _count_total:
   968                           	opt stack 0
   969  0000DF                     	ds	2
   970  0000E1                     _cur_state:
   971                           	opt stack 0
   972  0000E1                     	ds	2
   973  0000E3                     _f_can_coming_to_ID:
   974                           	opt stack 0
   975  0000E3                     	ds	2
   976  0000E5                     _f_lastCan:
   977                           	opt stack 0
   978  0000E5                     	ds	2
   979  0000E7                     _f_loadingNewCan:
   980                           	opt stack 0
   981  0000E7                     	ds	2
   982  0000E9                     _log:
   983                           	opt stack 0
   984  0000E9                     	ds	2
   985  0000EB                     _logstate:
   986                           	opt stack 0
   987  0000EB                     	ds	2
   988  0000ED                     _total_time:
   989                           	opt stack 0
   990  0000ED                     	ds	2
   991  0000EF                     _machine_state:
   992                           	opt stack 0
   993  0000EF                     	ds	1
   994                           tblptru	equ	0xFF8
   995                           tblptrh	equ	0xFF7
   996                           tblptrl	equ	0xFF6
   997                           tablat	equ	0xFF5
   998                           postinc0	equ	0xFEE
   999                           wreg	equ	0xFE8
  1000                           postdec1	equ	0xFE5
  1001                           fsr1l	equ	0xFE1
  1002                           
  1003                           	psect	dataBANK0
  1004  0000F0                     __pdataBANK0:
  1005                           	opt stack 0
  1006  0000F0                     printRTC@F3177:
  1007                           	opt stack 0
  1008  0000F0                     	ds	4
  1009  0000F4                     _f_ID_receive:
  1010                           	opt stack 0
  1011  0000F4                     	ds	2
  1012  0000F6                     _first:
  1013                           	opt stack 0
  1014  0000F6                     	ds	2
  1015                           tblptru	equ	0xFF8
  1016                           tblptrh	equ	0xFF7
  1017                           tblptrl	equ	0xFF6
  1018                           tablat	equ	0xFF5
  1019                           postinc0	equ	0xFEE
  1020                           wreg	equ	0xFE8
  1021                           postdec1	equ	0xFE5
  1022                           fsr1l	equ	0xFE1
  1023                           
  1024                           	psect	bssBANK1
  1025  000100                     __pbssBANK1:
  1026                           	opt stack 0
  1027  000100                     _startTime:
  1028                           	opt stack 0
  1029  000100                     	ds	14
  1030                           tblptru	equ	0xFF8
  1031                           tblptrh	equ	0xFF7
  1032                           tblptrl	equ	0xFF6
  1033                           tablat	equ	0xFF5
  1034                           postinc0	equ	0xFEE
  1035                           wreg	equ	0xFE8
  1036                           postdec1	equ	0xFE5
  1037                           fsr1l	equ	0xFE1
  1038                           
  1039                           	psect	cstackBANK0
  1040  000080                     __pcstackBANK0:
  1041                           	opt stack 0
  1042  000080                     ??_isdigit:
  1043  000080                     ??_I2C_Master_Wait:
  1044  000080                     ?_MAGNETISM_in:
  1045  000080                     ?___wmul:
  1046                           	opt stack 0
  1047  000080                     ?___awmod:
  1048                           	opt stack 0
  1049  000080                     ?___lwdiv:
  1050                           	opt stack 0
  1051  000080                     ?___lldiv:
  1052                           	opt stack 0
  1053  000080                     lcdNibble@temp:
  1054                           	opt stack 0
  1055  000080                     initTime@m:
  1056                           	opt stack 0
  1057  000080                     ___wmul@multiplier:
  1058                           	opt stack 0
  1059  000080                     ___awmod@dividend:
  1060                           	opt stack 0
  1061  000080                     ___lwdiv@dividend:
  1062                           	opt stack 0
  1063  000080                     strcpy@to:
  1064                           	opt stack 0
  1065  000080                     ___lldiv@dividend:
  1066                           	opt stack 0
  1067                           
  1068                           ; 4 bytes @ 0x0
  1069  000080                     	ds	1
  1070  000081                     I2C_Master_Read@a:
  1071                           	opt stack 0
  1072  000081                     lcdNibble@data:
  1073                           	opt stack 0
  1074  000081                     initTime@h:
  1075                           	opt stack 0
  1076  000081                     _isdigit$1557:
  1077                           	opt stack 0
  1078  000081                     I2C_Master_Write@d:
  1079                           	opt stack 0
  1080                           
  1081                           ; 2 bytes @ 0x1
  1082  000081                     	ds	1
  1083  000082                     ??_ID:
  1084  000082                     I2C_Master_Read@temp:
  1085                           	opt stack 0
  1086  000082                     lcdInst@data:
  1087                           	opt stack 0
  1088  000082                     putch@data:
  1089                           	opt stack 0
  1090  000082                     initTime@w:
  1091                           	opt stack 0
  1092  000082                     isdigit@c:
  1093                           	opt stack 0
  1094  000082                     ___wmul@multiplicand:
  1095                           	opt stack 0
  1096  000082                     ___awmod@divisor:
  1097                           	opt stack 0
  1098  000082                     ___lwdiv@divisor:
  1099                           	opt stack 0
  1100  000082                     strcpy@from:
  1101                           	opt stack 0
  1102                           
  1103                           ; 2 bytes @ 0x2
  1104  000082                     	ds	1
  1105  000083                     ??_initLCD:
  1106  000083                     initTime@DD:
  1107                           	opt stack 0
  1108  000083                     getRTC@i:
  1109                           	opt stack 0
  1110  000083                     ID@top_bottom_conductivity:
  1111                           	opt stack 0
  1112                           
  1113                           ; 2 bytes @ 0x3
  1114  000083                     	ds	1
  1115  000084                     initTime@MM:
  1116                           	opt stack 0
  1117  000084                     ___awmod@counter:
  1118                           	opt stack 0
  1119  000084                     ___wmul@product:
  1120                           	opt stack 0
  1121  000084                     ___lwdiv@quotient:
  1122                           	opt stack 0
  1123  000084                     strcpy@cp:
  1124                           	opt stack 0
  1125  000084                     ___lldiv@divisor:
  1126                           	opt stack 0
  1127                           
  1128                           ; 4 bytes @ 0x4
  1129  000084                     	ds	1
  1130  000085                     ??_initSortTimer:
  1131  000085                     ??_getIR:
  1132  000085                     initTime@YY:
  1133                           	opt stack 0
  1134  000085                     ___awmod@sign:
  1135                           	opt stack 0
  1136  000085                     ID@side_conductivity:
  1137                           	opt stack 0
  1138                           
  1139                           ; 2 bytes @ 0x5
  1140  000085                     	ds	1
  1141  000086                     ?___awdiv:
  1142                           	opt stack 0
  1143  000086                     initTime@s:
  1144                           	opt stack 0
  1145  000086                     ___lwdiv@counter:
  1146                           	opt stack 0
  1147  000086                     ___awdiv@dividend:
  1148                           	opt stack 0
  1149                           
  1150                           ; 2 bytes @ 0x6
  1151  000086                     	ds	1
  1152  000087                     ?___lwmod:
  1153                           	opt stack 0
  1154  000087                     ID@magnetic:
  1155                           	opt stack 0
  1156  000087                     ___lwmod@dividend:
  1157                           	opt stack 0
  1158                           
  1159                           ; 2 bytes @ 0x7
  1160  000087                     	ds	1
  1161  000088                     initSortTimer@i:
  1162                           	opt stack 0
  1163  000088                     ___awdiv@divisor:
  1164                           	opt stack 0
  1165  000088                     ___lldiv@quotient:
  1166                           	opt stack 0
  1167  000088                     getIR@timeBroken:
  1168                           	opt stack 0
  1169                           
  1170                           ; 14 bytes @ 0x8
  1171  000088                     	ds	1
  1172  000089                     ___lwmod@divisor:
  1173                           	opt stack 0
  1174                           
  1175                           ; 2 bytes @ 0x9
  1176  000089                     	ds	1
  1177  00008A                     ___awdiv@counter:
  1178                           	opt stack 0
  1179                           
  1180                           ; 1 bytes @ 0xA
  1181  00008A                     	ds	1
  1182  00008B                     ___awdiv@sign:
  1183                           	opt stack 0
  1184  00008B                     ___lwmod@counter:
  1185                           	opt stack 0
  1186                           
  1187                           ; 1 bytes @ 0xB
  1188  00008B                     	ds	1
  1189  00008C                     ___lldiv@counter:
  1190                           	opt stack 0
  1191  00008C                     ___awdiv@quotient:
  1192                           	opt stack 0
  1193                           
  1194                           ; 2 bytes @ 0xC
  1195  00008C                     	ds	1
  1196  00008D                     I2C_Master_Init@c:
  1197                           	opt stack 0
  1198                           
  1199                           ; 4 bytes @ 0xD
  1200  00008D                     	ds	1
  1201  00008E                     ?_printf:
  1202                           	opt stack 0
  1203  00008E                     printf@f:
  1204                           	opt stack 0
  1205                           
  1206                           ; 2 bytes @ 0xE
  1207  00008E                     	ds	3
  1208  000091                     ??_I2C_Master_Init:
  1209                           
  1210                           ; 1 bytes @ 0x11
  1211  000091                     	ds	4
  1212  000095                     ??_loadRTC:
  1213                           
  1214                           ; 1 bytes @ 0x15
  1215  000095                     	ds	1
  1216  000096                     loadRTC@i:
  1217                           	opt stack 0
  1218  000096                     getIR@i:
  1219                           	opt stack 0
  1220                           
  1221                           ; 2 bytes @ 0x16
  1222  000096                     	ds	2
  1223  000098                     ??_Loading:
  1224                           
  1225                           ; 1 bytes @ 0x18
  1226  000098                     	ds	1
  1227  000099                     
  1228                           ; 1 bytes @ 0x19
  1229  000099                     	ds	1
  1230  00009A                     ??_printf:
  1231                           
  1232                           ; 1 bytes @ 0x1A
  1233  00009A                     	ds	4
  1234  00009E                     printf@prec:
  1235                           	opt stack 0
  1236                           
  1237                           ; 1 bytes @ 0x1E
  1238  00009E                     	ds	1
  1239  00009F                     printf@ap:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x1F
  1243  00009F                     	ds	2
  1244  0000A1                     printf@cp:
  1245                           	opt stack 0
  1246                           
  1247                           ; 2 bytes @ 0x21
  1248  0000A1                     	ds	2
  1249  0000A3                     printf@val:
  1250                           	opt stack 0
  1251                           
  1252                           ; 2 bytes @ 0x23
  1253  0000A3                     	ds	2
  1254  0000A5                     printf@len:
  1255                           	opt stack 0
  1256                           
  1257                           ; 2 bytes @ 0x25
  1258  0000A5                     	ds	2
  1259  0000A7                     printf@flag:
  1260                           	opt stack 0
  1261                           
  1262                           ; 1 bytes @ 0x27
  1263  0000A7                     	ds	1
  1264  0000A8                     printf@c:
  1265                           	opt stack 0
  1266                           
  1267                           ; 1 bytes @ 0x28
  1268  0000A8                     	ds	1
  1269  0000A9                     printf@width:
  1270                           	opt stack 0
  1271                           
  1272                           ; 2 bytes @ 0x29
  1273  0000A9                     	ds	2
  1274  0000AB                     ??_printRTC:
  1275                           
  1276                           ; 1 bytes @ 0x2B
  1277  0000AB                     	ds	3
  1278  0000AE                     printRTC@INT_time:
  1279                           	opt stack 0
  1280                           
  1281                           ; 14 bytes @ 0x2E
  1282  0000AE                     	ds	14
  1283  0000BC                     printRTC@RTC_month:
  1284                           	opt stack 0
  1285                           
  1286                           ; 2 bytes @ 0x3C
  1287  0000BC                     	ds	2
  1288  0000BE                     printRTC@month:
  1289                           	opt stack 0
  1290                           
  1291                           ; 4 bytes @ 0x3E
  1292  0000BE                     	ds	4
  1293  0000C2                     printRTC@i:
  1294                           	opt stack 0
  1295                           
  1296                           ; 2 bytes @ 0x42
  1297  0000C2                     	ds	2
  1298  0000C4                     ??_UI:
  1299                           
  1300                           ; 1 bytes @ 0x44
  1301  0000C4                     	ds	1
  1302  0000C5                     _UI$1913:
  1303                           	opt stack 0
  1304                           
  1305                           ; 2 bytes @ 0x45
  1306  0000C5                     	ds	2
  1307  0000C7                     UI@i:
  1308                           	opt stack 0
  1309                           
  1310                           ; 1 bytes @ 0x47
  1311  0000C7                     	ds	1
  1312  0000C8                     UI@i_634:
  1313                           	opt stack 0
  1314                           
  1315                           ; 1 bytes @ 0x48
  1316  0000C8                     	ds	1
  1317  0000C9                     UI@i_635:
  1318                           	opt stack 0
  1319                           
  1320                           ; 1 bytes @ 0x49
  1321  0000C9                     	ds	1
  1322  0000CA                     UI@i_638:
  1323                           	opt stack 0
  1324                           
  1325                           ; 1 bytes @ 0x4A
  1326  0000CA                     	ds	1
  1327  0000CB                     UI@i_639:
  1328                           	opt stack 0
  1329                           
  1330                           ; 1 bytes @ 0x4B
  1331  0000CB                     	ds	1
  1332  0000CC                     UI@i_642:
  1333                           	opt stack 0
  1334                           
  1335                           ; 1 bytes @ 0x4C
  1336  0000CC                     	ds	1
  1337  0000CD                     UI@i_643:
  1338                           	opt stack 0
  1339                           
  1340                           ; 1 bytes @ 0x4D
  1341  0000CD                     	ds	1
  1342  0000CE                     UI@i_646:
  1343                           	opt stack 0
  1344                           
  1345                           ; 1 bytes @ 0x4E
  1346  0000CE                     	ds	1
  1347  0000CF                     UI@i_647:
  1348                           	opt stack 0
  1349                           
  1350                           ; 1 bytes @ 0x4F
  1351  0000CF                     	ds	1
  1352  0000D0                     UI@i_650:
  1353                           	opt stack 0
  1354                           
  1355                           ; 1 bytes @ 0x50
  1356  0000D0                     	ds	1
  1357  0000D1                     UI@i_651:
  1358                           	opt stack 0
  1359                           
  1360                           ; 1 bytes @ 0x51
  1361  0000D1                     	ds	1
  1362  0000D2                     UI@i_654:
  1363                           	opt stack 0
  1364                           
  1365                           ; 1 bytes @ 0x52
  1366  0000D2                     	ds	1
  1367  0000D3                     UI@i_655:
  1368                           	opt stack 0
  1369                           
  1370                           ; 1 bytes @ 0x53
  1371  0000D3                     	ds	1
  1372  0000D4                     tblptru	equ	0xFF8
  1373                           tblptrh	equ	0xFF7
  1374                           tblptrl	equ	0xFF6
  1375                           tablat	equ	0xFF5
  1376                           postinc0	equ	0xFEE
  1377                           wreg	equ	0xFE8
  1378                           postdec1	equ	0xFE5
  1379                           fsr1l	equ	0xFE1
  1380                           
  1381                           ; 1 bytes @ 0x54
  1382                           
  1383                           	psect	cstackCOMRAM
  1384  000001                     __pcstackCOMRAM:
  1385                           	opt stack 0
  1386  000001                     ??i2_I2C_Master_Wait:
  1387  000001                     ??i2_isdigit:
  1388  000001                     ?i2___wmul:
  1389                           	opt stack 0
  1390  000001                     ?i2___lwmod:
  1391                           	opt stack 0
  1392  000001                     i2lcdNibble@temp:
  1393                           	opt stack 0
  1394  000001                     dispLogs@myLog:
  1395                           	opt stack 0
  1396  000001                     i2___wmul@multiplier:
  1397                           	opt stack 0
  1398  000001                     i2___lwmod@dividend:
  1399                           	opt stack 0
  1400  000001                     i2strcpy@to:
  1401                           	opt stack 0
  1402                           
  1403                           ; 2 bytes @ 0x0
  1404  000001                     	ds	1
  1405  000002                     i2I2C_Master_Read@a:
  1406                           	opt stack 0
  1407  000002                     i2lcdNibble@data:
  1408                           	opt stack 0
  1409  000002                     i2_isdigit$1557:
  1410                           	opt stack 0
  1411  000002                     i2I2C_Master_Write@d:
  1412                           	opt stack 0
  1413                           
  1414                           ; 2 bytes @ 0x1
  1415  000002                     	ds	1
  1416  000003                     i2I2C_Master_Read@temp:
  1417                           	opt stack 0
  1418  000003                     i2lcdInst@data:
  1419                           	opt stack 0
  1420  000003                     i2putch@data:
  1421                           	opt stack 0
  1422  000003                     i2isdigit@c:
  1423                           	opt stack 0
  1424  000003                     i2___wmul@multiplicand:
  1425                           	opt stack 0
  1426  000003                     i2___lwmod@divisor:
  1427                           	opt stack 0
  1428  000003                     i2strcpy@from:
  1429                           	opt stack 0
  1430                           
  1431                           ; 2 bytes @ 0x2
  1432  000003                     	ds	1
  1433  000004                     i2getRTC@i:
  1434                           	opt stack 0
  1435                           
  1436                           ; 2 bytes @ 0x3
  1437  000004                     	ds	1
  1438  000005                     i2___lwmod@counter:
  1439                           	opt stack 0
  1440  000005                     i2___wmul@product:
  1441                           	opt stack 0
  1442  000005                     i2strcpy@cp:
  1443                           	opt stack 0
  1444                           
  1445                           ; 2 bytes @ 0x4
  1446  000005                     	ds	1
  1447  000006                     ?i2___lwdiv:
  1448                           	opt stack 0
  1449  000006                     i2___lwdiv@dividend:
  1450                           	opt stack 0
  1451                           
  1452                           ; 2 bytes @ 0x5
  1453  000006                     	ds	2
  1454  000008                     i2___lwdiv@divisor:
  1455                           	opt stack 0
  1456                           
  1457                           ; 2 bytes @ 0x7
  1458  000008                     	ds	2
  1459  00000A                     i2___lwdiv@quotient:
  1460                           	opt stack 0
  1461                           
  1462                           ; 2 bytes @ 0x9
  1463  00000A                     	ds	2
  1464  00000C                     i2___lwdiv@counter:
  1465                           	opt stack 0
  1466                           
  1467                           ; 1 bytes @ 0xB
  1468  00000C                     	ds	1
  1469  00000D                     ?i2_printf:
  1470                           	opt stack 0
  1471  00000D                     i2printf@f:
  1472                           	opt stack 0
  1473                           
  1474                           ; 2 bytes @ 0xC
  1475  00000D                     	ds	12
  1476  000019                     ??i2_printf:
  1477                           
  1478                           ; 1 bytes @ 0x18
  1479  000019                     	ds	4
  1480  00001D                     i2printf@prec:
  1481                           	opt stack 0
  1482                           
  1483                           ; 1 bytes @ 0x1C
  1484  00001D                     	ds	1
  1485  00001E                     i2printf@ap:
  1486                           	opt stack 0
  1487                           
  1488                           ; 2 bytes @ 0x1D
  1489  00001E                     	ds	2
  1490  000020                     i2printf@cp:
  1491                           	opt stack 0
  1492                           
  1493                           ; 2 bytes @ 0x1F
  1494  000020                     	ds	2
  1495  000022                     i2printf@val:
  1496                           	opt stack 0
  1497                           
  1498                           ; 2 bytes @ 0x21
  1499  000022                     	ds	2
  1500  000024                     i2printf@len:
  1501                           	opt stack 0
  1502                           
  1503                           ; 2 bytes @ 0x23
  1504  000024                     	ds	2
  1505  000026                     i2printf@flag:
  1506                           	opt stack 0
  1507                           
  1508                           ; 1 bytes @ 0x25
  1509  000026                     	ds	1
  1510  000027                     i2printf@c:
  1511                           	opt stack 0
  1512                           
  1513                           ; 1 bytes @ 0x26
  1514  000027                     	ds	1
  1515  000028                     i2printf@width:
  1516                           	opt stack 0
  1517                           
  1518                           ; 2 bytes @ 0x27
  1519  000028                     	ds	2
  1520  00002A                     ??_printSortTimer:
  1521  00002A                     ??i2_printRTC:
  1522  00002A                     ?_inputHandler:
  1523                           	opt stack 0
  1524                           
  1525                           ; 2 bytes @ 0x29
  1526  00002A                     	ds	2
  1527  00002C                     ??_inputHandler:
  1528                           
  1529                           ; 1 bytes @ 0x2B
  1530  00002C                     	ds	1
  1531  00002D                     printSortTimer@curTime:
  1532                           	opt stack 0
  1533  00002D                     i2printRTC@INT_time:
  1534                           	opt stack 0
  1535                           
  1536                           ; 14 bytes @ 0x2C
  1537  00002D                     	ds	14
  1538  00003B                     printSortTimer@start_sec:
  1539                           	opt stack 0
  1540  00003B                     i2printRTC@RTC_month:
  1541                           	opt stack 0
  1542                           
  1543                           ; 2 bytes @ 0x3A
  1544  00003B                     	ds	2
  1545  00003D                     printSortTimer@cur_sec:
  1546                           	opt stack 0
  1547  00003D                     i2printRTC@month:
  1548                           	opt stack 0
  1549                           
  1550                           ; 4 bytes @ 0x3C
  1551  00003D                     	ds	2
  1552  00003F                     printSortTimer@hour:
  1553                           	opt stack 0
  1554                           
  1555                           ; 2 bytes @ 0x3E
  1556  00003F                     	ds	2
  1557  000041                     printSortTimer@min:
  1558                           	opt stack 0
  1559  000041                     i2printRTC@i:
  1560                           	opt stack 0
  1561                           
  1562                           ; 2 bytes @ 0x40
  1563  000041                     	ds	2
  1564  000043                     ??_updateMenu:
  1565  000043                     printSortTimer@sec:
  1566                           	opt stack 0
  1567                           
  1568                           ; 2 bytes @ 0x42
  1569  000043                     	ds	2
  1570  000045                     _printSortTimer$2020:
  1571                           	opt stack 0
  1572                           
  1573                           ; 2 bytes @ 0x44
  1574  000045                     	ds	2
  1575  000047                     printSortTimer@timeDiff:
  1576                           	opt stack 0
  1577                           
  1578                           ; 2 bytes @ 0x46
  1579  000047                     	ds	2
  1580  000049                     printSortTimer@i:
  1581                           	opt stack 0
  1582                           
  1583                           ; 2 bytes @ 0x48
  1584  000049                     	ds	2
  1585  00004B                     ??_handler:
  1586                           
  1587                           ; 1 bytes @ 0x4A
  1588  00004B                     	ds	16
  1589                           tblptru	equ	0xFF8
  1590                           tblptrh	equ	0xFF7
  1591                           tblptrl	equ	0xFF6
  1592                           tablat	equ	0xFF5
  1593                           postinc0	equ	0xFEE
  1594                           wreg	equ	0xFE8
  1595                           postdec1	equ	0xFE5
  1596                           fsr1l	equ	0xFE1
  1597                           
  1598 ;;
  1599 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1600 ;;
  1601 ;; *************** function _main *****************
  1602 ;; Defined at:
  1603 ;;		line 13 in file "main.c"
  1604 ;; Parameters:    Size  Location     Type
  1605 ;;		None
  1606 ;; Auto vars:     Size  Location     Type
  1607 ;;		None
  1608 ;; Return value:  Size  Location     Type
  1609 ;;                  1    wreg      void 
  1610 ;; Registers used:
  1611 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1612 ;; Tracked objects:
  1613 ;;		On entry : 0/0
  1614 ;;		On exit  : 0/0
  1615 ;;		Unchanged: 0/0
  1616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1620 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1621 ;;Total ram usage:        0 bytes
  1622 ;; Hardware stack levels required when called:   13
  1623 ;; This function calls:
  1624 ;;		_PortTestA5
  1625 ;;		_UI
  1626 ;;		_initLCD
  1627 ;;		_initTime
  1628 ;;		_initUI
  1629 ;;		_machineConfig
  1630 ;;		_sort
  1631 ;;		_stopSignals
  1632 ;; This function is called by:
  1633 ;;		Startup code after reset
  1634 ;; This function uses a non-reentrant model
  1635 ;;
  1636                           
  1637                           	psect	text0
  1638  001EEE                     __ptext0:
  1639                           	opt stack 0
  1640  001EEE                     _main:
  1641                           	opt stack 18
  1642                           
  1643                           ;main.c: 14: machineConfig();
  1644                           
  1645                           ;incstack = 0
  1646  001EEE  EC39  F011         	call	_machineConfig	;wreg free
  1647                           
  1648                           ;main.c: 15: initLCD();
  1649  001EF2  EC5C  F011         	call	_initLCD	;wreg free
  1650                           
  1651                           ;main.c: 16: initTime(0x42, 0x32, 0x13, 0x04, 0x09, 0x02, 0x17);
  1652  001EF6  0E32               	movlw	50
  1653  001EF8  0100               	movlb	0	; () banked
  1654  001EFA  6F80               	movwf	initTime@m& (0+255),b
  1655  001EFC  0E13               	movlw	19
  1656  001EFE  0100               	movlb	0	; () banked
  1657  001F00  6F81               	movwf	initTime@h& (0+255),b
  1658  001F02  0E04               	movlw	4
  1659  001F04  0100               	movlb	0	; () banked
  1660  001F06  6F82               	movwf	initTime@w& (0+255),b
  1661  001F08  0E09               	movlw	9
  1662  001F0A  0100               	movlb	0	; () banked
  1663  001F0C  6F83               	movwf	initTime@DD& (0+255),b
  1664  001F0E  0E02               	movlw	2
  1665  001F10  0100               	movlb	0	; () banked
  1666  001F12  6F84               	movwf	initTime@MM& (0+255),b
  1667  001F14  0E17               	movlw	23
  1668  001F16  0100               	movlb	0	; () banked
  1669  001F18  6F85               	movwf	initTime@YY& (0+255),b
  1670  001F1A  0E42               	movlw	66
  1671  001F1C  EC6D  F013         	call	_initTime
  1672                           
  1673                           ;main.c: 17: initUI();
  1674  001F20  EC8D  F013         	call	_initUI	;wreg free
  1675                           
  1676                           ;main.c: 22: switch(machine_state){
  1677                           
  1678                           ;main.c: 21: while(1){
  1679  001F24  D00F               	goto	l5262
  1680  001F26                     l5250:
  1681                           
  1682                           ;main.c: 24: UI();
  1683  001F26  EC09  F000         	call	_UI	;wreg free
  1684                           
  1685                           ;main.c: 25: break;
  1686  001F2A  D00C               	goto	l5262
  1687  001F2C                     l5252:
  1688                           
  1689                           ;main.c: 27: sort();
  1690  001F2C  ECA5  F013         	call	_sort	;wreg free
  1691                           
  1692                           ;main.c: 28: break;
  1693  001F30  D009               	goto	l5262
  1694  001F32                     l5254:
  1695                           
  1696                           ;main.c: 30: stopSignals();
  1697  001F32  EC9A  F013         	call	_stopSignals	;wreg free
  1698                           
  1699                           ;main.c: 31: UI();
  1700  001F36  EC09  F000         	call	_UI	;wreg free
  1701                           
  1702                           ;main.c: 32: break;
  1703  001F3A  D004               	goto	l5262
  1704  001F3C                     l5258:
  1705                           
  1706                           ;main.c: 34: PortTestA5();
  1707  001F3C  ECC4  F013         	call	_PortTestA5	;wreg free
  1708                           
  1709                           ;main.c: 35: break;
  1710  001F40  D001               	goto	l5262
  1711  001F42                     l655:
  1712  001F42  D7FF               	goto	l655
  1713  001F44                     l5262:
  1714  001F44  0100               	movlb	0	; () banked
  1715  001F46  51EF               	movf	_machine_state& (0+255),w,b
  1716                           
  1717                           ; Switch size 1, requested type "space"
  1718                           ; Number of cases is 5, Range of values is 0 to 4
  1719                           ; switch strategies available:
  1720                           ; Name         Instructions Cycles
  1721                           ; simple_byte           16     9 (average)
  1722                           ;	Chosen strategy is simple_byte
  1723  001F48  0A00               	xorlw	0	; case 0
  1724  001F4A  B4D8               	btfsc	status,2,c
  1725  001F4C  D7EC               	goto	l5250
  1726  001F4E  0A01               	xorlw	1	; case 1
  1727  001F50  B4D8               	btfsc	status,2,c
  1728  001F52  D7EC               	goto	l5252
  1729  001F54  0A03               	xorlw	3	; case 2
  1730  001F56  B4D8               	btfsc	status,2,c
  1731  001F58  D7EC               	goto	l5254
  1732  001F5A  0A01               	xorlw	1	; case 3
  1733  001F5C  B4D8               	btfsc	status,2,c
  1734  001F5E  D7EE               	goto	l5258
  1735  001F60  0A07               	xorlw	7	; case 4
  1736  001F62  B4D8               	btfsc	status,2,c
  1737  001F64  D7EE               	goto	l655
  1738                           
  1739                           ; BSR set to: 0
  1740                           
  1741                           ; BSR set to: 0
  1742  001F66  D7EE               	goto	l5262
  1743  001F68                     __end_of_main:
  1744                           	opt stack 0
  1745                           tblptru	equ	0xFF8
  1746                           tblptrh	equ	0xFF7
  1747                           tblptrl	equ	0xFF6
  1748                           tablat	equ	0xFF5
  1749                           postinc0	equ	0xFEE
  1750                           wreg	equ	0xFE8
  1751                           postdec1	equ	0xFE5
  1752                           fsr1l	equ	0xFE1
  1753                           status	equ	0xFD8
  1754                           
  1755 ;; *************** function _stopSignals *****************
  1756 ;; Defined at:
  1757 ;;		line 46 in file "main.c"
  1758 ;; Parameters:    Size  Location     Type
  1759 ;;		None
  1760 ;; Auto vars:     Size  Location     Type
  1761 ;;		None
  1762 ;; Return value:  Size  Location     Type
  1763 ;;                  1    wreg      void 
  1764 ;; Registers used:
  1765 ;;		wreg, status,2
  1766 ;; Tracked objects:
  1767 ;;		On entry : 0/0
  1768 ;;		On exit  : 0/0
  1769 ;;		Unchanged: 0/0
  1770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1775 ;;Total ram usage:        0 bytes
  1776 ;; Hardware stack levels used:    1
  1777 ;; Hardware stack levels required when called:    7
  1778 ;; This function calls:
  1779 ;;		Nothing
  1780 ;; This function is called by:
  1781 ;;		_main
  1782 ;; This function uses a non-reentrant model
  1783 ;;
  1784                           
  1785                           	psect	text1
  1786  002734                     __ptext1:
  1787                           	opt stack 0
  1788  002734                     _stopSignals:
  1789                           	opt stack 23
  1790                           
  1791                           ;main.c: 47: LATA = 0x00;
  1792                           
  1793                           ; BSR set to: 0
  1794                           ;incstack = 0
  1795  002734  0E00               	movlw	0
  1796  002736  6E89               	movwf	3977,c	;volatile
  1797                           
  1798                           ;main.c: 48: LATB = 0x00;
  1799  002738  0E00               	movlw	0
  1800  00273A  6E8A               	movwf	3978,c	;volatile
  1801                           
  1802                           ;main.c: 49: LATC = 0x00;
  1803  00273C  0E00               	movlw	0
  1804  00273E  6E8B               	movwf	3979,c	;volatile
  1805                           
  1806                           ;main.c: 50: LATD = 0x00;
  1807  002740  0E00               	movlw	0
  1808  002742  6E8C               	movwf	3980,c	;volatile
  1809                           
  1810                           ;main.c: 51: LATE = 0x00;
  1811  002744  0E00               	movlw	0
  1812  002746  6E8D               	movwf	3981,c	;volatile
  1813  002748  0012               	return		;funcret
  1814  00274A                     __end_of_stopSignals:
  1815                           	opt stack 0
  1816                           tblptru	equ	0xFF8
  1817                           tblptrh	equ	0xFF7
  1818                           tblptrl	equ	0xFF6
  1819                           tablat	equ	0xFF5
  1820                           postinc0	equ	0xFEE
  1821                           wreg	equ	0xFE8
  1822                           postdec1	equ	0xFE5
  1823                           fsr1l	equ	0xFE1
  1824                           status	equ	0xFD8
  1825                           
  1826 ;; *************** function _sort *****************
  1827 ;; Defined at:
  1828 ;;		line 30 in file "sort.c"
  1829 ;; Parameters:    Size  Location     Type
  1830 ;;		None
  1831 ;; Auto vars:     Size  Location     Type
  1832 ;;		None
  1833 ;; Return value:  Size  Location     Type
  1834 ;;                  1    wreg      void 
  1835 ;; Registers used:
  1836 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1837 ;; Tracked objects:
  1838 ;;		On entry : 0/0
  1839 ;;		On exit  : 0/0
  1840 ;;		Unchanged: 0/0
  1841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1845 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1846 ;;Total ram usage:        0 bytes
  1847 ;; Hardware stack levels used:    1
  1848 ;; Hardware stack levels required when called:   12
  1849 ;; This function calls:
  1850 ;;		_Distribution
  1851 ;;		_ID
  1852 ;;		_Loading
  1853 ;; This function is called by:
  1854 ;;		_main
  1855 ;; This function uses a non-reentrant model
  1856 ;;
  1857                           
  1858                           	psect	text2
  1859  00274A                     __ptext2:
  1860                           	opt stack 0
  1861  00274A                     _sort:
  1862                           	opt stack 18
  1863                           
  1864                           ;sort.c: 31: if(machine_state == Sorting_state){
  1865                           
  1866                           ;incstack = 0
  1867  00274A  0100               	movlb	0	; () banked
  1868  00274C  05EF               	decf	_machine_state& (0+255),w,b
  1869  00274E  A4D8               	btfss	status,2,c
  1870  002750  0012               	return	
  1871                           
  1872                           ; BSR set to: 0
  1873                           ;sort.c: 32: Loading();
  1874  002752  ECA2  F00E         	call	_Loading	;wreg free
  1875                           
  1876                           ;sort.c: 33: ID();
  1877  002756  EC53  F00E         	call	_ID	;wreg free
  1878                           
  1879                           ;sort.c: 34: Distribution();
  1880  00275A  EC34  F013         	call	_Distribution	;wreg free
  1881  00275E  0012               	return	
  1882  002760                     __end_of_sort:
  1883                           	opt stack 0
  1884                           tblptru	equ	0xFF8
  1885                           tblptrh	equ	0xFF7
  1886                           tblptrl	equ	0xFF6
  1887                           tablat	equ	0xFF5
  1888                           postinc0	equ	0xFEE
  1889                           wreg	equ	0xFE8
  1890                           postdec1	equ	0xFE5
  1891                           fsr1l	equ	0xFE1
  1892                           status	equ	0xFD8
  1893                           
  1894 ;; *************** function _Loading *****************
  1895 ;; Defined at:
  1896 ;;		line 37 in file "sort.c"
  1897 ;; Parameters:    Size  Location     Type
  1898 ;;		None
  1899 ;; Auto vars:     Size  Location     Type
  1900 ;;		None
  1901 ;; Return value:  Size  Location     Type
  1902 ;;                  1    wreg      void 
  1903 ;; Registers used:
  1904 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1905 ;; Tracked objects:
  1906 ;;		On entry : 0/0
  1907 ;;		On exit  : 0/0
  1908 ;;		Unchanged: 0/0
  1909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1912 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1913 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1914 ;;Total ram usage:        1 bytes
  1915 ;; Hardware stack levels used:    1
  1916 ;; Hardware stack levels required when called:   11
  1917 ;; This function calls:
  1918 ;;		_getIR
  1919 ;;		_initSortTimer
  1920 ;;		_lcdInst
  1921 ;; This function is called by:
  1922 ;;		_sort
  1923 ;; This function uses a non-reentrant model
  1924 ;;
  1925                           
  1926                           	psect	text3
  1927  001D44                     __ptext3:
  1928                           	opt stack 0
  1929  001D44                     _Loading:
  1930                           	opt stack 18
  1931                           
  1932                           ;sort.c: 38: if(first){
  1933                           
  1934                           ;incstack = 0
  1935  001D44  0100               	movlb	0	; () banked
  1936  001D46  51F6               	movf	_first& (0+255),w,b
  1937  001D48  0100               	movlb	0	; () banked
  1938  001D4A  11F7               	iorwf	(_first+1)& (0+255),w,b
  1939  001D4C  B4D8               	btfsc	status,2,c
  1940  001D4E  D015               	goto	l4520
  1941                           
  1942                           ; BSR set to: 0
  1943                           ;sort.c: 39: first = 0;
  1944  001D50  0E00               	movlw	0
  1945  001D52  0100               	movlb	0	; () banked
  1946  001D54  6FF7               	movwf	(_first+1)& (0+255),b
  1947  001D56  0E00               	movlw	0
  1948  001D58  6FF6               	movwf	_first& (0+255),b
  1949                           
  1950                           ; BSR set to: 0
  1951                           ;sort.c: 40: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  1952  001D5A  0E01               	movlw	1
  1953  001D5C  ECDE  F013         	call	_lcdInst
  1954  001D60  0E68               	movlw	104
  1955  001D62  0100               	movlb	0	; () banked
  1956  001D64  6F98               	movwf	??_Loading& (0+255),b
  1957  001D66  0EE4               	movlw	228
  1958  001D68                     u4497:
  1959  001D68  2EE8               	decfsz	wreg,f,c
  1960  001D6A  D7FE               	bra	u4497
  1961  001D6C  2F98               	decfsz	??_Loading& (0+255),f,b
  1962  001D6E  D7FC               	bra	u4497
  1963  001D70  F000               	nop	
  1964                           
  1965                           ;sort.c: 41: initSortTimer();
  1966  001D72  EC03  F00E         	call	_initSortTimer	;wreg free
  1967                           
  1968                           ;sort.c: 42: LATAbits.LATA5 = 1;
  1969  001D76  8A89               	bsf	3977,5,c	;volatile
  1970                           
  1971                           ;sort.c: 43: }
  1972  001D78  0012               	return	
  1973  001D7A                     l4520:
  1974                           
  1975                           ;sort.c: 44: else{
  1976                           ;sort.c: 45: if(!f_loadingNewCan){
  1977  001D7A  0100               	movlb	0	; () banked
  1978  001D7C  51E7               	movf	_f_loadingNewCan& (0+255),w,b
  1979  001D7E  0100               	movlb	0	; () banked
  1980  001D80  11E8               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  1981  001D82  A4D8               	btfss	status,2,c
  1982  001D84  D018               	goto	l4536
  1983                           
  1984                           ; BSR set to: 0
  1985                           ;sort.c: 48: getIR();
  1986  001D86  EC90  F00C         	call	_getIR	;wreg free
  1987                           
  1988                           ;sort.c: 49: if(!f_loadingNewCan){
  1989  001D8A  0100               	movlb	0	; () banked
  1990  001D8C  51E7               	movf	_f_loadingNewCan& (0+255),w,b
  1991  001D8E  0100               	movlb	0	; () banked
  1992  001D90  11E8               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  1993  001D92  B4D8               	btfsc	status,2,c
  1994  001D94  0012               	return	
  1995                           
  1996                           ; BSR set to: 0
  1997                           ;sort.c: 52: else{
  1998                           ;sort.c: 53: count_total++;
  1999                           
  2000                           ; BSR set to: 0
  2001                           
  2002                           ; BSR set to: 0
  2003                           ;sort.c: 51: }
  2004                           
  2005                           ; BSR set to: 0
  2006                           ;sort.c: 50: return;
  2007  001D96  0100               	movlb	0	; () banked
  2008  001D98  4BDF               	infsnz	_count_total& (0+255),f,b
  2009  001D9A  2BE0               	incf	(_count_total+1)& (0+255),f,b
  2010                           
  2011                           ; BSR set to: 0
  2012                           ;sort.c: 54: if(count_total == 12){
  2013  001D9C  0E0C               	movlw	12
  2014  001D9E  0100               	movlb	0	; () banked
  2015  001DA0  19DF               	xorwf	_count_total& (0+255),w,b
  2016  001DA2  0100               	movlb	0	; () banked
  2017  001DA4  11E0               	iorwf	(_count_total+1)& (0+255),w,b
  2018  001DA6  A4D8               	btfss	status,2,c
  2019  001DA8  D017               	goto	l4542
  2020                           
  2021                           ; BSR set to: 0
  2022                           ;sort.c: 55: f_lastCan = 1;
  2023  001DAA  0E00               	movlw	0
  2024  001DAC  0100               	movlb	0	; () banked
  2025  001DAE  6FE6               	movwf	(_f_lastCan+1)& (0+255),b
  2026  001DB0  0E01               	movlw	1
  2027  001DB2  6FE5               	movwf	_f_lastCan& (0+255),b
  2028                           
  2029                           ; BSR set to: 0
  2030                           ;sort.c: 56: }
  2031                           ;sort.c: 57: }
  2032                           ;sort.c: 58: }
  2033                           
  2034                           ; BSR set to: 0
  2035  001DB4  D011               	goto	l4542
  2036  001DB6                     l4536:
  2037                           
  2038                           ; BSR set to: 0
  2039                           ;sort.c: 63: else if(f_ID_receive){
  2040  001DB6  0100               	movlb	0	; () banked
  2041  001DB8  51F4               	movf	_f_ID_receive& (0+255),w,b
  2042  001DBA  0100               	movlb	0	; () banked
  2043  001DBC  11F5               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  2044  001DBE  B4D8               	btfsc	status,2,c
  2045  001DC0  D00B               	goto	l4542
  2046                           
  2047                           ; BSR set to: 0
  2048                           ;sort.c: 64: f_loadingNewCan = 0;
  2049  001DC2  0E00               	movlw	0
  2050  001DC4  0100               	movlb	0	; () banked
  2051  001DC6  6FE8               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2052  001DC8  0E00               	movlw	0
  2053  001DCA  6FE7               	movwf	_f_loadingNewCan& (0+255),b
  2054                           
  2055                           ; BSR set to: 0
  2056                           ;sort.c: 65: LATAbits.LATA4 = 1;
  2057  001DCC  8889               	bsf	3977,4,c	;volatile
  2058                           
  2059                           ;sort.c: 66: f_can_coming_to_ID = 1;
  2060  001DCE  0E00               	movlw	0
  2061  001DD0  0100               	movlb	0	; () banked
  2062  001DD2  6FE4               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2063  001DD4  0E01               	movlw	1
  2064  001DD6  6FE3               	movwf	_f_can_coming_to_ID& (0+255),b
  2065  001DD8                     l4542:
  2066                           
  2067                           ; BSR set to: 0
  2068                           ;sort.c: 67: }
  2069                           ;sort.c: 69: LATAbits.LATA4 = 0;
  2070  001DD8  9889               	bcf	3977,4,c	;volatile
  2071  001DDA  0012               	return	
  2072  001DDC                     __end_of_Loading:
  2073                           	opt stack 0
  2074                           tblptru	equ	0xFF8
  2075                           tblptrh	equ	0xFF7
  2076                           tblptrl	equ	0xFF6
  2077                           tablat	equ	0xFF5
  2078                           postinc0	equ	0xFEE
  2079                           wreg	equ	0xFE8
  2080                           postdec1	equ	0xFE5
  2081                           fsr1l	equ	0xFE1
  2082                           status	equ	0xFD8
  2083                           
  2084 ;; *************** function _initSortTimer *****************
  2085 ;; Defined at:
  2086 ;;		line 112 in file "sort.c"
  2087 ;; Parameters:    Size  Location     Type
  2088 ;;		None
  2089 ;; Auto vars:     Size  Location     Type
  2090 ;;  i               2    8[BANK0 ] int 
  2091 ;; Return value:  Size  Location     Type
  2092 ;;                  1    wreg      void 
  2093 ;; Registers used:
  2094 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2095 ;; Tracked objects:
  2096 ;;		On entry : 0/0
  2097 ;;		On exit  : 0/0
  2098 ;;		Unchanged: 0/0
  2099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2101 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2102 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2103 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2104 ;;Total ram usage:        5 bytes
  2105 ;; Hardware stack levels used:    1
  2106 ;; Hardware stack levels required when called:   10
  2107 ;; This function calls:
  2108 ;;		_getRTC
  2109 ;; This function is called by:
  2110 ;;		_Loading
  2111 ;; This function uses a non-reentrant model
  2112 ;;
  2113                           
  2114                           	psect	text4
  2115  001C06                     __ptext4:
  2116                           	opt stack 0
  2117  001C06                     _initSortTimer:
  2118                           	opt stack 18
  2119                           
  2120                           ;sort.c: 115: getRTC();
  2121                           
  2122                           ;incstack = 0
  2123  001C06  EC34  F00F         	call	_getRTC	;wreg free
  2124                           
  2125                           ;sort.c: 116: for(int i = 0; i < 7; i++){
  2126  001C0A  0E00               	movlw	0
  2127  001C0C  0100               	movlb	0	; () banked
  2128  001C0E  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  2129  001C10  0E00               	movlw	0
  2130  001C12  6F88               	movwf	initSortTimer@i& (0+255),b
  2131  001C14                     l4250:
  2132                           
  2133                           ; BSR set to: 0
  2134  001C14  0100               	movlb	0	; () banked
  2135  001C16  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  2136  001C18  D008               	goto	l4254
  2137  001C1A  0100               	movlb	0	; () banked
  2138  001C1C  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  2139  001C1E  E140               	bnz	l4260
  2140  001C20  0E07               	movlw	7
  2141  001C22  0100               	movlb	0	; () banked
  2142  001C24  5D88               	subwf	initSortTimer@i& (0+255),w,b
  2143  001C26  B0D8               	btfsc	status,0,c
  2144  001C28  D03B               	goto	l4260
  2145  001C2A                     l4254:
  2146                           
  2147                           ; BSR set to: 0
  2148                           ;sort.c: 117: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  2149  001C2A  0ED4               	movlw	low _time
  2150  001C2C  0100               	movlb	0	; () banked
  2151  001C2E  2588               	addwf	initSortTimer@i& (0+255),w,b
  2152  001C30  6ED9               	movwf	fsr2l,c
  2153  001C32  0E00               	movlw	high _time
  2154  001C34  0100               	movlb	0	; () banked
  2155  001C36  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2156  001C38  6EDA               	movwf	fsr2h,c
  2157  001C3A  50DF               	movf	indf2,w,c
  2158  001C3C  0100               	movlb	0	; () banked
  2159  001C3E  6F85               	movwf	??_initSortTimer& (0+255),b
  2160  001C40  0100               	movlb	0	; () banked
  2161  001C42  3B85               	swapf	??_initSortTimer& (0+255),f,b
  2162  001C44  0E0F               	movlw	15
  2163  001C46  1785               	andwf	??_initSortTimer& (0+255),f,b
  2164  001C48  0E0F               	movlw	15
  2165  001C4A  0100               	movlb	0	; () banked
  2166  001C4C  1785               	andwf	??_initSortTimer& (0+255),f,b
  2167  001C4E  0100               	movlb	0	; () banked
  2168  001C50  5185               	movf	??_initSortTimer& (0+255),w,b
  2169  001C52  0D0A               	mullw	10
  2170  001C54  0ED4               	movlw	low _time
  2171  001C56  0100               	movlb	0	; () banked
  2172  001C58  2588               	addwf	initSortTimer@i& (0+255),w,b
  2173  001C5A  6ED9               	movwf	fsr2l,c
  2174  001C5C  0E00               	movlw	high _time
  2175  001C5E  0100               	movlb	0	; () banked
  2176  001C60  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2177  001C62  6EDA               	movwf	fsr2h,c
  2178  001C64  50DF               	movf	indf2,w,c
  2179  001C66  0B0F               	andlw	15
  2180  001C68  0100               	movlb	0	; () banked
  2181  001C6A  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  2182  001C6C  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  2183  001C6E  50F3               	movf	prodl,w,c
  2184  001C70  0100               	movlb	0	; () banked
  2185  001C72  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  2186  001C74  50F4               	movf	prodh,w,c
  2187  001C76  0100               	movlb	0	; () banked
  2188  001C78  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  2189  001C7A  90D8               	bcf	status,0,c
  2190  001C7C  0100               	movlb	0	; () banked
  2191  001C7E  3588               	rlcf	initSortTimer@i& (0+255),w,b
  2192  001C80  6ED9               	movwf	fsr2l,c
  2193  001C82  0100               	movlb	0	; () banked
  2194  001C84  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  2195  001C86  6EDA               	movwf	fsr2h,c
  2196  001C88  0E00               	movlw	low _startTime
  2197  001C8A  26D9               	addwf	fsr2l,f,c
  2198  001C8C  0E01               	movlw	high _startTime
  2199  001C8E  22DA               	addwfc	fsr2h,f,c
  2200  001C90  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  2201  001C94  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  2202                           
  2203                           ; BSR set to: 0
  2204  001C98  0100               	movlb	0	; () banked
  2205  001C9A  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  2206  001C9C  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  2207  001C9E  D7BA               	goto	l4250
  2208  001CA0                     l4260:
  2209                           
  2210                           ; BSR set to: 0
  2211                           ;sort.c: 118: }
  2212                           ;sort.c: 119: T0CON = 0b11011000;
  2213  001CA0  0ED8               	movlw	216
  2214  001CA2  6ED5               	movwf	4053,c	;volatile
  2215                           
  2216                           ; BSR set to: 0
  2217  001CA4  0012               	return		;funcret
  2218  001CA6                     __end_of_initSortTimer:
  2219                           	opt stack 0
  2220                           tblptru	equ	0xFF8
  2221                           tblptrh	equ	0xFF7
  2222                           tblptrl	equ	0xFF6
  2223                           tablat	equ	0xFF5
  2224                           prodh	equ	0xFF4
  2225                           prodl	equ	0xFF3
  2226                           postinc0	equ	0xFEE
  2227                           wreg	equ	0xFE8
  2228                           postdec1	equ	0xFE5
  2229                           fsr1l	equ	0xFE1
  2230                           indf2	equ	0xFDF
  2231                           postinc2	equ	0xFDE
  2232                           postdec2	equ	0xFDD
  2233                           fsr2h	equ	0xFDA
  2234                           fsr2l	equ	0xFD9
  2235                           status	equ	0xFD8
  2236                           
  2237 ;; *************** function _getIR *****************
  2238 ;; Defined at:
  2239 ;;		line 150 in file "sort.c"
  2240 ;; Parameters:    Size  Location     Type
  2241 ;;		None
  2242 ;; Auto vars:     Size  Location     Type
  2243 ;;  i               2   22[BANK0 ] int 
  2244 ;;  timeBroken     14    8[BANK0 ] int [7]
  2245 ;; Return value:  Size  Location     Type
  2246 ;;                  1    wreg      void 
  2247 ;; Registers used:
  2248 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2249 ;; Tracked objects:
  2250 ;;		On entry : 0/0
  2251 ;;		On exit  : 0/0
  2252 ;;		Unchanged: 0/0
  2253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2255 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2256 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2257 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2258 ;;Total ram usage:       19 bytes
  2259 ;; Hardware stack levels used:    1
  2260 ;; Hardware stack levels required when called:   10
  2261 ;; This function calls:
  2262 ;;		_getRTC
  2263 ;; This function is called by:
  2264 ;;		_Loading
  2265 ;; This function uses a non-reentrant model
  2266 ;;
  2267                           
  2268                           	psect	text5
  2269  001920                     __ptext5:
  2270                           	opt stack 0
  2271  001920                     _getIR:
  2272                           	opt stack 18
  2273                           
  2274                           ;sort.c: 152: getRTC();
  2275                           
  2276                           ; BSR set to: 0
  2277                           ;incstack = 0
  2278  001920  EC34  F00F         	call	_getRTC	;wreg free
  2279                           
  2280                           ;sort.c: 153: int timeBroken[7];
  2281                           ;sort.c: 154: for(int i = 0; i < 7; i++){
  2282  001924  0E00               	movlw	0
  2283  001926  0100               	movlb	0	; () banked
  2284  001928  6F97               	movwf	(getIR@i+1)& (0+255),b
  2285  00192A  0E00               	movlw	0
  2286  00192C  6F96               	movwf	getIR@i& (0+255),b
  2287  00192E                     l4266:
  2288                           
  2289                           ; BSR set to: 0
  2290  00192E  0100               	movlb	0	; () banked
  2291  001930  BF97               	btfsc	(getIR@i+1)& (0+255),7,b
  2292  001932  D008               	goto	l4270
  2293  001934  0100               	movlb	0	; () banked
  2294  001936  5197               	movf	(getIR@i+1)& (0+255),w,b
  2295  001938  E151               	bnz	l4282
  2296  00193A  0E07               	movlw	7
  2297  00193C  0100               	movlb	0	; () banked
  2298  00193E  5D96               	subwf	getIR@i& (0+255),w,b
  2299  001940  B0D8               	btfsc	status,0,c
  2300  001942  D04C               	goto	l4282
  2301  001944                     l4270:
  2302                           
  2303                           ; BSR set to: 0
  2304                           ;sort.c: 155: timeBroken[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  2305  001944  0ED4               	movlw	low _time
  2306  001946  0100               	movlb	0	; () banked
  2307  001948  2596               	addwf	getIR@i& (0+255),w,b
  2308  00194A  6ED9               	movwf	fsr2l,c
  2309  00194C  0E00               	movlw	high _time
  2310  00194E  0100               	movlb	0	; () banked
  2311  001950  2197               	addwfc	(getIR@i+1)& (0+255),w,b
  2312  001952  6EDA               	movwf	fsr2h,c
  2313  001954  50DF               	movf	indf2,w,c
  2314  001956  0100               	movlb	0	; () banked
  2315  001958  6F85               	movwf	??_getIR& (0+255),b
  2316  00195A  0100               	movlb	0	; () banked
  2317  00195C  3B85               	swapf	??_getIR& (0+255),f,b
  2318  00195E  0E0F               	movlw	15
  2319  001960  1785               	andwf	??_getIR& (0+255),f,b
  2320  001962  0E0F               	movlw	15
  2321  001964  0100               	movlb	0	; () banked
  2322  001966  1785               	andwf	??_getIR& (0+255),f,b
  2323  001968  0100               	movlb	0	; () banked
  2324  00196A  5185               	movf	??_getIR& (0+255),w,b
  2325  00196C  0D0A               	mullw	10
  2326  00196E  0ED4               	movlw	low _time
  2327  001970  0100               	movlb	0	; () banked
  2328  001972  2596               	addwf	getIR@i& (0+255),w,b
  2329  001974  6ED9               	movwf	fsr2l,c
  2330  001976  0E00               	movlw	high _time
  2331  001978  0100               	movlb	0	; () banked
  2332  00197A  2197               	addwfc	(getIR@i+1)& (0+255),w,b
  2333  00197C  6EDA               	movwf	fsr2h,c
  2334  00197E  50DF               	movf	indf2,w,c
  2335  001980  0B0F               	andlw	15
  2336  001982  0100               	movlb	0	; () banked
  2337  001984  6F86               	movwf	(??_getIR+1)& (0+255),b
  2338  001986  6B87               	clrf	(??_getIR+2)& (0+255),b
  2339  001988  50F3               	movf	prodl,w,c
  2340  00198A  0100               	movlb	0	; () banked
  2341  00198C  2786               	addwf	(??_getIR+1)& (0+255),f,b
  2342  00198E  50F4               	movf	prodh,w,c
  2343  001990  0100               	movlb	0	; () banked
  2344  001992  2387               	addwfc	(??_getIR+2)& (0+255),f,b
  2345  001994  90D8               	bcf	status,0,c
  2346  001996  0100               	movlb	0	; () banked
  2347  001998  3596               	rlcf	getIR@i& (0+255),w,b
  2348  00199A  6ED9               	movwf	fsr2l,c
  2349  00199C  0100               	movlb	0	; () banked
  2350  00199E  3597               	rlcf	(getIR@i+1)& (0+255),w,b
  2351  0019A0  6EDA               	movwf	fsr2h,c
  2352  0019A2  0E88               	movlw	low getIR@timeBroken
  2353  0019A4  26D9               	addwf	fsr2l,f,c
  2354  0019A6  0E00               	movlw	high getIR@timeBroken
  2355  0019A8  22DA               	addwfc	fsr2h,f,c
  2356  0019AA  C086  FFDE         	movff	??_getIR+1,postinc2
  2357  0019AE  C087  FFDD         	movff	??_getIR+2,postdec2
  2358                           
  2359                           ; BSR set to: 0
  2360  0019B2  0100               	movlb	0	; () banked
  2361  0019B4  4B96               	infsnz	getIR@i& (0+255),f,b
  2362  0019B6  2B97               	incf	(getIR@i+1)& (0+255),f,b
  2363  0019B8  D7BA               	goto	l4266
  2364  0019BA                     l4276:
  2365                           
  2366                           ; BSR set to: 0
  2367                           ;sort.c: 160: if (beamTimerCounter > 3125){
  2368  0019BA  0100               	movlb	0	; () banked
  2369  0019BC  BFDE               	btfsc	(_beamTimerCounter+1)& (0+255),7,b
  2370  0019BE  D00E               	goto	l4282
  2371  0019C0  0E36               	movlw	54
  2372  0019C2  0100               	movlb	0	; () banked
  2373  0019C4  5DDD               	subwf	_beamTimerCounter& (0+255),w,b
  2374  0019C6  0E0C               	movlw	12
  2375  0019C8  0100               	movlb	0	; () banked
  2376  0019CA  59DE               	subwfb	(_beamTimerCounter+1)& (0+255),w,b
  2377  0019CC  A0D8               	btfss	status,0,c
  2378  0019CE  D006               	goto	l4282
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;sort.c: 161: f_loadingNewCan = 1;
  2382  0019D0  0E00               	movlw	0
  2383  0019D2  0100               	movlb	0	; () banked
  2384  0019D4  6FE8               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2385  0019D6  0E01               	movlw	1
  2386  0019D8  6FE7               	movwf	_f_loadingNewCan& (0+255),b
  2387                           
  2388                           ; BSR set to: 0
  2389                           ;sort.c: 162: return;
  2390  0019DA  0012               	return	
  2391  0019DC                     l4282:
  2392                           
  2393                           ; BSR set to: 0
  2394  0019DC  0100               	movlb	0	; () banked
  2395  0019DE  51DB               	movf	_IR_in& (0+255),w,b
  2396  0019E0  0100               	movlb	0	; () banked
  2397  0019E2  11DC               	iorwf	(_IR_in+1)& (0+255),w,b
  2398  0019E4  A4D8               	btfss	status,2,c
  2399  0019E6  0012               	return	
  2400  0019E8  D7E8               	goto	l4276
  2401  0019EA                     __end_of_getIR:
  2402                           	opt stack 0
  2403                           tblptru	equ	0xFF8
  2404                           tblptrh	equ	0xFF7
  2405                           tblptrl	equ	0xFF6
  2406                           tablat	equ	0xFF5
  2407                           prodh	equ	0xFF4
  2408                           prodl	equ	0xFF3
  2409                           postinc0	equ	0xFEE
  2410                           wreg	equ	0xFE8
  2411                           postdec1	equ	0xFE5
  2412                           fsr1l	equ	0xFE1
  2413                           indf2	equ	0xFDF
  2414                           postinc2	equ	0xFDE
  2415                           postdec2	equ	0xFDD
  2416                           fsr2h	equ	0xFDA
  2417                           fsr2l	equ	0xFD9
  2418                           status	equ	0xFD8
  2419                           
  2420 ;; *************** function _ID *****************
  2421 ;; Defined at:
  2422 ;;		line 72 in file "sort.c"
  2423 ;; Parameters:    Size  Location     Type
  2424 ;;		None
  2425 ;; Auto vars:     Size  Location     Type
  2426 ;;  magnetic        2    7[BANK0 ] int 
  2427 ;;  side_conduct    2    5[BANK0 ] int 
  2428 ;;  top_bottom_c    2    3[BANK0 ] int 
  2429 ;; Return value:  Size  Location     Type
  2430 ;;                  1    wreg      void 
  2431 ;; Registers used:
  2432 ;;		wreg, status,2, status,0, cstack
  2433 ;; Tracked objects:
  2434 ;;		On entry : 0/0
  2435 ;;		On exit  : 0/0
  2436 ;;		Unchanged: 0/0
  2437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2439 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2440 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2441 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2442 ;;Total ram usage:        7 bytes
  2443 ;; Hardware stack levels used:    1
  2444 ;; Hardware stack levels required when called:    8
  2445 ;; This function calls:
  2446 ;;		_MAGNETISM_in
  2447 ;;		_moveServoBlock
  2448 ;; This function is called by:
  2449 ;;		_sort
  2450 ;; This function uses a non-reentrant model
  2451 ;;
  2452                           
  2453                           	psect	text6
  2454  001CA6                     __ptext6:
  2455                           	opt stack 0
  2456  001CA6                     _ID:
  2457                           	opt stack 21
  2458                           
  2459                           ;sort.c: 73: if(f_can_coming_to_ID){
  2460                           
  2461                           ; BSR set to: 0
  2462                           ;incstack = 0
  2463  001CA6  0100               	movlb	0	; () banked
  2464  001CA8  51E3               	movf	_f_can_coming_to_ID& (0+255),w,b
  2465  001CAA  0100               	movlb	0	; () banked
  2466  001CAC  11E4               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  2467  001CAE  B4D8               	btfsc	status,2,c
  2468  001CB0  0012               	return	
  2469                           
  2470                           ; BSR set to: 0
  2471                           ;sort.c: 78: int side_conductivity = 0;
  2472  001CB2  0E00               	movlw	0
  2473  001CB4  0100               	movlb	0	; () banked
  2474  001CB6  6F86               	movwf	(ID@side_conductivity+1)& (0+255),b
  2475  001CB8  0E00               	movlw	0
  2476  001CBA  6F85               	movwf	ID@side_conductivity& (0+255),b
  2477                           
  2478                           ;sort.c: 79: int magnetic = 0;
  2479  001CBC  0E00               	movlw	0
  2480  001CBE  0100               	movlb	0	; () banked
  2481  001CC0  6F88               	movwf	(ID@magnetic+1)& (0+255),b
  2482  001CC2  0E00               	movlw	0
  2483  001CC4  6F87               	movwf	ID@magnetic& (0+255),b
  2484                           
  2485                           ;sort.c: 80: int top_bottom_conductivity = 0;
  2486  001CC6  0E00               	movlw	0
  2487  001CC8  0100               	movlb	0	; () banked
  2488  001CCA  6F84               	movwf	(ID@top_bottom_conductivity+1)& (0+255),b
  2489  001CCC  0E00               	movlw	0
  2490  001CCE  6F83               	movwf	ID@top_bottom_conductivity& (0+255),b
  2491                           
  2492                           ;sort.c: 82: side_conductivity = PORTAbits.RA2;
  2493  001CD0  A480               	btfss	3968,2,c	;volatile
  2494  001CD2  D004               	goto	u3420
  2495  001CD4  0100               	movlb	0	; () banked
  2496  001CD6  6B82               	clrf	??_ID& (0+255),b
  2497  001CD8  2B82               	incf	??_ID& (0+255),f,b
  2498  001CDA  D002               	goto	u3428
  2499  001CDC                     u3420:
  2500  001CDC  0100               	movlb	0	; () banked
  2501  001CDE  6B82               	clrf	??_ID& (0+255),b
  2502  001CE0                     u3428:
  2503  001CE0  0100               	movlb	0	; () banked
  2504  001CE2  5182               	movf	??_ID& (0+255),w,b
  2505  001CE4  0100               	movlb	0	; () banked
  2506  001CE6  6F85               	movwf	ID@side_conductivity& (0+255),b
  2507  001CE8  6B86               	clrf	(ID@side_conductivity+1)& (0+255),b
  2508                           
  2509                           ; BSR set to: 0
  2510                           ;sort.c: 83: if(!side_conductivity){
  2511  001CEA  0100               	movlb	0	; () banked
  2512  001CEC  5185               	movf	ID@side_conductivity& (0+255),w,b
  2513  001CEE  0100               	movlb	0	; () banked
  2514  001CF0  1186               	iorwf	(ID@side_conductivity+1)& (0+255),w,b
  2515  001CF2  A4D8               	btfss	status,2,c
  2516  001CF4  D01B               	goto	l4560
  2517                           
  2518                           ; BSR set to: 0
  2519                           ;sort.c: 84: magnetic = MAGNETISM_in();
  2520  001CF6  EC11  F014         	call	_MAGNETISM_in	;wreg free
  2521  001CFA  C080  F087         	movff	?_MAGNETISM_in,ID@magnetic
  2522  001CFE  C081  F088         	movff	?_MAGNETISM_in+1,ID@magnetic+1
  2523                           
  2524                           ;sort.c: 85: if(!magnetic){
  2525  001D02  0100               	movlb	0	; () banked
  2526  001D04  5187               	movf	ID@magnetic& (0+255),w,b
  2527  001D06  0100               	movlb	0	; () banked
  2528  001D08  1188               	iorwf	(ID@magnetic+1)& (0+255),w,b
  2529  001D0A  A4D8               	btfss	status,2,c
  2530  001D0C  D00F               	goto	l4560
  2531                           
  2532                           ; BSR set to: 0
  2533                           ;sort.c: 86: LATAbits.LATA3 = 1;
  2534  001D0E  8689               	bsf	3977,3,c	;volatile
  2535                           
  2536                           ; BSR set to: 0
  2537                           ;sort.c: 88: top_bottom_conductivity = PORTAbits.RA2;
  2538  001D10  A480               	btfss	3968,2,c	;volatile
  2539  001D12  D004               	goto	u3450
  2540  001D14  0100               	movlb	0	; () banked
  2541  001D16  6B82               	clrf	??_ID& (0+255),b
  2542  001D18  2B82               	incf	??_ID& (0+255),f,b
  2543  001D1A  D002               	goto	u3458
  2544  001D1C                     u3450:
  2545  001D1C  0100               	movlb	0	; () banked
  2546  001D1E  6B82               	clrf	??_ID& (0+255),b
  2547  001D20                     u3458:
  2548  001D20  0100               	movlb	0	; () banked
  2549  001D22  5182               	movf	??_ID& (0+255),w,b
  2550  001D24  0100               	movlb	0	; () banked
  2551  001D26  6F83               	movwf	ID@top_bottom_conductivity& (0+255),b
  2552  001D28  6B84               	clrf	(ID@top_bottom_conductivity+1)& (0+255),b
  2553                           
  2554                           ; BSR set to: 0
  2555                           ;sort.c: 89: LATAbits.LATA3 = 0;
  2556  001D2A  9689               	bcf	3977,3,c	;volatile
  2557  001D2C                     l4560:
  2558                           
  2559                           ; BSR set to: 0
  2560                           ;sort.c: 90: }
  2561                           ;sort.c: 91: }
  2562                           ;sort.c: 94: moveServoBlock(Lower);
  2563  001D2C  0E01               	movlw	1
  2564  001D2E  EC10  F014         	call	_moveServoBlock
  2565                           
  2566                           ;sort.c: 97: moveServoBlock(Raise);
  2567  001D32  0E00               	movlw	0
  2568  001D34  EC10  F014         	call	_moveServoBlock
  2569                           
  2570                           ;sort.c: 98: f_can_coming_to_ID = 0;
  2571  001D38  0E00               	movlw	0
  2572  001D3A  0100               	movlb	0	; () banked
  2573  001D3C  6FE4               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2574  001D3E  0E00               	movlw	0
  2575  001D40  6FE3               	movwf	_f_can_coming_to_ID& (0+255),b
  2576  001D42  0012               	return	
  2577  001D44                     __end_of_ID:
  2578                           	opt stack 0
  2579                           tblptru	equ	0xFF8
  2580                           tblptrh	equ	0xFF7
  2581                           tblptrl	equ	0xFF6
  2582                           tablat	equ	0xFF5
  2583                           prodh	equ	0xFF4
  2584                           prodl	equ	0xFF3
  2585                           postinc0	equ	0xFEE
  2586                           wreg	equ	0xFE8
  2587                           postdec1	equ	0xFE5
  2588                           fsr1l	equ	0xFE1
  2589                           indf2	equ	0xFDF
  2590                           postinc2	equ	0xFDE
  2591                           postdec2	equ	0xFDD
  2592                           fsr2h	equ	0xFDA
  2593                           fsr2l	equ	0xFD9
  2594                           status	equ	0xFD8
  2595                           
  2596 ;; *************** function _moveServoBlock *****************
  2597 ;; Defined at:
  2598 ;;		line 171 in file "sort.c"
  2599 ;; Parameters:    Size  Location     Type
  2600 ;;  myPosition      1    wreg     enum E3130
  2601 ;; Auto vars:     Size  Location     Type
  2602 ;;  myPosition      1    0[COMRAM] enum E3130
  2603 ;; Return value:  Size  Location     Type
  2604 ;;                  1    wreg      void 
  2605 ;; Registers used:
  2606 ;;		wreg
  2607 ;; Tracked objects:
  2608 ;;		On entry : 0/0
  2609 ;;		On exit  : 0/0
  2610 ;;		Unchanged: 0/0
  2611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2615 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2616 ;;Total ram usage:        0 bytes
  2617 ;; Hardware stack levels used:    1
  2618 ;; Hardware stack levels required when called:    7
  2619 ;; This function calls:
  2620 ;;		Nothing
  2621 ;; This function is called by:
  2622 ;;		_ID
  2623 ;; This function uses a non-reentrant model
  2624 ;;
  2625                           
  2626                           	psect	text7
  2627  002820                     __ptext7:
  2628                           	opt stack 0
  2629  002820                     _moveServoBlock:
  2630                           	opt stack 21
  2631                           
  2632                           ; BSR set to: 0
  2633                           ;incstack = 0
  2634  002820  0012               	return		;funcret
  2635  002822                     __end_of_moveServoBlock:
  2636                           	opt stack 0
  2637                           tblptru	equ	0xFF8
  2638                           tblptrh	equ	0xFF7
  2639                           tblptrl	equ	0xFF6
  2640                           tablat	equ	0xFF5
  2641                           prodh	equ	0xFF4
  2642                           prodl	equ	0xFF3
  2643                           postinc0	equ	0xFEE
  2644                           wreg	equ	0xFE8
  2645                           postdec1	equ	0xFE5
  2646                           fsr1l	equ	0xFE1
  2647                           indf2	equ	0xFDF
  2648                           postinc2	equ	0xFDE
  2649                           postdec2	equ	0xFDD
  2650                           fsr2h	equ	0xFDA
  2651                           fsr2l	equ	0xFD9
  2652                           status	equ	0xFD8
  2653                           
  2654 ;; *************** function _MAGNETISM_in *****************
  2655 ;; Defined at:
  2656 ;;		line 167 in file "sort.c"
  2657 ;; Parameters:    Size  Location     Type
  2658 ;;		None
  2659 ;; Auto vars:     Size  Location     Type
  2660 ;;		None
  2661 ;; Return value:  Size  Location     Type
  2662 ;;                  2    0[BANK0 ] int 
  2663 ;; Registers used:
  2664 ;;		None
  2665 ;; Tracked objects:
  2666 ;;		On entry : 0/0
  2667 ;;		On exit  : 0/0
  2668 ;;		Unchanged: 0/0
  2669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2670 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2673 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2674 ;;Total ram usage:        2 bytes
  2675 ;; Hardware stack levels used:    1
  2676 ;; Hardware stack levels required when called:    7
  2677 ;; This function calls:
  2678 ;;		Nothing
  2679 ;; This function is called by:
  2680 ;;		_ID
  2681 ;; This function uses a non-reentrant model
  2682 ;;
  2683                           
  2684                           	psect	text8
  2685  002822                     __ptext8:
  2686                           	opt stack 0
  2687  002822                     _MAGNETISM_in:
  2688                           	opt stack 21
  2689                           
  2690                           ;incstack = 0
  2691  002822  0012               	return		;funcret
  2692  002824                     __end_of_MAGNETISM_in:
  2693                           	opt stack 0
  2694                           tblptru	equ	0xFF8
  2695                           tblptrh	equ	0xFF7
  2696                           tblptrl	equ	0xFF6
  2697                           tablat	equ	0xFF5
  2698                           prodh	equ	0xFF4
  2699                           prodl	equ	0xFF3
  2700                           postinc0	equ	0xFEE
  2701                           wreg	equ	0xFE8
  2702                           postdec1	equ	0xFE5
  2703                           fsr1l	equ	0xFE1
  2704                           indf2	equ	0xFDF
  2705                           postinc2	equ	0xFDE
  2706                           postdec2	equ	0xFDD
  2707                           fsr2h	equ	0xFDA
  2708                           fsr2l	equ	0xFD9
  2709                           status	equ	0xFD8
  2710                           
  2711 ;; *************** function _Distribution *****************
  2712 ;; Defined at:
  2713 ;;		line 101 in file "sort.c"
  2714 ;; Parameters:    Size  Location     Type
  2715 ;;		None
  2716 ;; Auto vars:     Size  Location     Type
  2717 ;;		None
  2718 ;; Return value:  Size  Location     Type
  2719 ;;                  1    wreg      void 
  2720 ;; Registers used:
  2721 ;;		wreg, status,2, status,0, cstack
  2722 ;; Tracked objects:
  2723 ;;		On entry : 0/0
  2724 ;;		On exit  : 0/0
  2725 ;;		Unchanged: 0/0
  2726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2731 ;;Total ram usage:        0 bytes
  2732 ;; Hardware stack levels used:    1
  2733 ;; Hardware stack levels required when called:    8
  2734 ;; This function calls:
  2735 ;;		_moveServoCup
  2736 ;; This function is called by:
  2737 ;;		_sort
  2738 ;; This function uses a non-reentrant model
  2739 ;;
  2740                           
  2741                           	psect	text9
  2742  002668                     __ptext9:
  2743                           	opt stack 0
  2744  002668                     _Distribution:
  2745                           	opt stack 21
  2746                           
  2747                           ;sort.c: 102: if(f_can_coming_to_distribution){
  2748                           
  2749                           ;incstack = 0
  2750  002668  506D               	movf	_f_can_coming_to_distribution,w,c
  2751  00266A  106E               	iorwf	_f_can_coming_to_distribution+1,w,c
  2752  00266C  B4D8               	btfsc	status,2,c
  2753  00266E  0012               	return	
  2754                           
  2755                           ;sort.c: 104: moveServoCup(canType);
  2756  002670  507C               	movf	_canType,w,c
  2757  002672  EC12  F014         	call	_moveServoCup
  2758                           
  2759                           ;sort.c: 106: moveServoCup(Home);
  2760  002676  0E00               	movlw	0
  2761  002678  EC12  F014         	call	_moveServoCup
  2762                           
  2763                           ;sort.c: 107: f_can_coming_to_distribution = 0;
  2764  00267C  0E00               	movlw	0
  2765  00267E  6E6E               	movwf	_f_can_coming_to_distribution+1,c
  2766  002680  0E00               	movlw	0
  2767  002682  6E6D               	movwf	_f_can_coming_to_distribution,c
  2768                           
  2769                           ;sort.c: 108: f_can_distributed = 1;
  2770  002684  0E00               	movlw	0
  2771  002686  6E70               	movwf	_f_can_distributed+1,c
  2772  002688  0E01               	movlw	1
  2773  00268A  6E6F               	movwf	_f_can_distributed,c
  2774  00268C  0012               	return	
  2775  00268E                     __end_of_Distribution:
  2776                           	opt stack 0
  2777                           tblptru	equ	0xFF8
  2778                           tblptrh	equ	0xFF7
  2779                           tblptrl	equ	0xFF6
  2780                           tablat	equ	0xFF5
  2781                           prodh	equ	0xFF4
  2782                           prodl	equ	0xFF3
  2783                           postinc0	equ	0xFEE
  2784                           wreg	equ	0xFE8
  2785                           postdec1	equ	0xFE5
  2786                           fsr1l	equ	0xFE1
  2787                           indf2	equ	0xFDF
  2788                           postinc2	equ	0xFDE
  2789                           postdec2	equ	0xFDD
  2790                           fsr2h	equ	0xFDA
  2791                           fsr2l	equ	0xFD9
  2792                           status	equ	0xFD8
  2793                           
  2794 ;; *************** function _moveServoCup *****************
  2795 ;; Defined at:
  2796 ;;		line 175 in file "sort.c"
  2797 ;; Parameters:    Size  Location     Type
  2798 ;;  myPosition      1    wreg     enum E3123
  2799 ;; Auto vars:     Size  Location     Type
  2800 ;;  myPosition      1    0[COMRAM] enum E3123
  2801 ;; Return value:  Size  Location     Type
  2802 ;;                  1    wreg      void 
  2803 ;; Registers used:
  2804 ;;		wreg
  2805 ;; Tracked objects:
  2806 ;;		On entry : 0/0
  2807 ;;		On exit  : 0/0
  2808 ;;		Unchanged: 0/0
  2809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2813 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2814 ;;Total ram usage:        0 bytes
  2815 ;; Hardware stack levels used:    1
  2816 ;; Hardware stack levels required when called:    7
  2817 ;; This function calls:
  2818 ;;		Nothing
  2819 ;; This function is called by:
  2820 ;;		_Distribution
  2821 ;; This function uses a non-reentrant model
  2822 ;;
  2823                           
  2824                           	psect	text10
  2825  002824                     __ptext10:
  2826                           	opt stack 0
  2827  002824                     _moveServoCup:
  2828                           	opt stack 21
  2829                           
  2830                           ;incstack = 0
  2831  002824  0012               	return		;funcret
  2832  002826                     __end_of_moveServoCup:
  2833                           	opt stack 0
  2834                           tblptru	equ	0xFF8
  2835                           tblptrh	equ	0xFF7
  2836                           tblptrl	equ	0xFF6
  2837                           tablat	equ	0xFF5
  2838                           prodh	equ	0xFF4
  2839                           prodl	equ	0xFF3
  2840                           postinc0	equ	0xFEE
  2841                           wreg	equ	0xFE8
  2842                           postdec1	equ	0xFE5
  2843                           fsr1l	equ	0xFE1
  2844                           indf2	equ	0xFDF
  2845                           postinc2	equ	0xFDE
  2846                           postdec2	equ	0xFDD
  2847                           fsr2h	equ	0xFDA
  2848                           fsr2l	equ	0xFD9
  2849                           status	equ	0xFD8
  2850                           
  2851 ;; *************** function _machineConfig *****************
  2852 ;; Defined at:
  2853 ;;		line 13 in file "MachineConfig.c"
  2854 ;; Parameters:    Size  Location     Type
  2855 ;;		None
  2856 ;; Auto vars:     Size  Location     Type
  2857 ;;		None
  2858 ;; Return value:  Size  Location     Type
  2859 ;;                  2  584[None  ] int 
  2860 ;; Registers used:
  2861 ;;		wreg, status,2
  2862 ;; Tracked objects:
  2863 ;;		On entry : 0/0
  2864 ;;		On exit  : 0/0
  2865 ;;		Unchanged: 0/0
  2866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2870 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2871 ;;Total ram usage:        0 bytes
  2872 ;; Hardware stack levels used:    1
  2873 ;; Hardware stack levels required when called:    7
  2874 ;; This function calls:
  2875 ;;		Nothing
  2876 ;; This function is called by:
  2877 ;;		_main
  2878 ;; This function uses a non-reentrant model
  2879 ;;
  2880                           
  2881                           	psect	text11
  2882  002272                     __ptext11:
  2883                           	opt stack 0
  2884  002272                     _machineConfig:
  2885                           	opt stack 23
  2886                           
  2887                           ;MachineConfig.c: 15: OSCCON = 0b11110000;
  2888                           
  2889                           ;incstack = 0
  2890  002272  0EF0               	movlw	240
  2891  002274  6ED3               	movwf	4051,c	;volatile
  2892                           
  2893                           ;MachineConfig.c: 16: OSCTUNEbits.PLLEN = 1;
  2894  002276  8C9B               	bsf	3995,6,c	;volatile
  2895                           
  2896                           ;MachineConfig.c: 20: TRISA = 0b01000111;
  2897  002278  0E47               	movlw	71
  2898  00227A  6E92               	movwf	3986,c	;volatile
  2899                           
  2900                           ;MachineConfig.c: 22: TRISB = 0b11110010;
  2901  00227C  0EF2               	movlw	242
  2902  00227E  6E93               	movwf	3987,c	;volatile
  2903                           
  2904                           ;MachineConfig.c: 25: TRISC = 0x00;
  2905  002280  0E00               	movlw	0
  2906  002282  6E94               	movwf	3988,c	;volatile
  2907                           
  2908                           ;MachineConfig.c: 29: TRISD = 0x00;
  2909  002284  0E00               	movlw	0
  2910  002286  6E95               	movwf	3989,c	;volatile
  2911                           
  2912                           ;MachineConfig.c: 32: TRISE = 0x00;
  2913  002288  0E00               	movlw	0
  2914  00228A  6E96               	movwf	3990,c	;volatile
  2915                           
  2916                           ;MachineConfig.c: 35: LATA = 0x00;
  2917  00228C  0E00               	movlw	0
  2918  00228E  6E89               	movwf	3977,c	;volatile
  2919                           
  2920                           ;MachineConfig.c: 36: LATB = 0x00;
  2921  002290  0E00               	movlw	0
  2922  002292  6E8A               	movwf	3978,c	;volatile
  2923                           
  2924                           ;MachineConfig.c: 37: LATC = 0x00;
  2925  002294  0E00               	movlw	0
  2926  002296  6E8B               	movwf	3979,c	;volatile
  2927                           
  2928                           ;MachineConfig.c: 38: LATD = 0x00;
  2929  002298  0E00               	movlw	0
  2930  00229A  6E8C               	movwf	3980,c	;volatile
  2931                           
  2932                           ;MachineConfig.c: 39: LATE = 0x00;
  2933  00229C  0E00               	movlw	0
  2934  00229E  6E8D               	movwf	3981,c	;volatile
  2935                           
  2936                           ;MachineConfig.c: 42: ADCON0 = 0x00;
  2937  0022A0  0E00               	movlw	0
  2938  0022A2  6EC2               	movwf	4034,c	;volatile
  2939                           
  2940                           ;MachineConfig.c: 43: ADCON1 = 0x0D;
  2941  0022A4  0E0D               	movlw	13
  2942  0022A6  6EC1               	movwf	4033,c	;volatile
  2943                           
  2944                           ;MachineConfig.c: 46: CVRCON = 0x00;
  2945  0022A8  0E00               	movlw	0
  2946  0022AA  6EB5               	movwf	4021,c	;volatile
  2947                           
  2948                           ;MachineConfig.c: 47: CMCONbits.CIS = 0;
  2949  0022AC  96B4               	bcf	4020,3,c	;volatile
  2950                           
  2951                           ;MachineConfig.c: 48: ADFM = 1;
  2952  0022AE  8EC0               	bsf	4032,7,c	;volatile
  2953                           
  2954                           ;MachineConfig.c: 51: INT1IE = 1;
  2955  0022B0  86F0               	bsf	intcon3,3,c	;volatile
  2956                           
  2957                           ;MachineConfig.c: 52: TMR0IE = 1;
  2958  0022B2  8AF2               	bsf	intcon,5,c	;volatile
  2959                           
  2960                           ;MachineConfig.c: 53: (INTCONbits.GIE = 0);
  2961  0022B4  9EF2               	bcf	intcon,7,c	;volatile
  2962  0022B6  0012               	return		;funcret
  2963  0022B8                     __end_of_machineConfig:
  2964                           	opt stack 0
  2965                           tblptru	equ	0xFF8
  2966                           tblptrh	equ	0xFF7
  2967                           tblptrl	equ	0xFF6
  2968                           tablat	equ	0xFF5
  2969                           prodh	equ	0xFF4
  2970                           prodl	equ	0xFF3
  2971                           intcon	equ	0xFF2
  2972                           intcon3	equ	0xFF0
  2973                           postinc0	equ	0xFEE
  2974                           wreg	equ	0xFE8
  2975                           postdec1	equ	0xFE5
  2976                           fsr1l	equ	0xFE1
  2977                           indf2	equ	0xFDF
  2978                           postinc2	equ	0xFDE
  2979                           postdec2	equ	0xFDD
  2980                           fsr2h	equ	0xFDA
  2981                           fsr2l	equ	0xFD9
  2982                           status	equ	0xFD8
  2983                           
  2984 ;; *************** function _initUI *****************
  2985 ;; Defined at:
  2986 ;;		line 63 in file "UI.c"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;		None
  2989 ;; Auto vars:     Size  Location     Type
  2990 ;;		None
  2991 ;; Return value:  Size  Location     Type
  2992 ;;                  1    wreg      void 
  2993 ;; Registers used:
  2994 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2995 ;; Tracked objects:
  2996 ;;		On entry : 0/0
  2997 ;;		On exit  : 0/0
  2998 ;;		Unchanged: 0/0
  2999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3004 ;;Total ram usage:        0 bytes
  3005 ;; Hardware stack levels used:    1
  3006 ;; Hardware stack levels required when called:   12
  3007 ;; This function calls:
  3008 ;;		_change_state_to_menu_start
  3009 ;;		_loadRTC
  3010 ;; This function is called by:
  3011 ;;		_main
  3012 ;; This function uses a non-reentrant model
  3013 ;;
  3014                           
  3015                           	psect	text12
  3016  00271A                     __ptext12:
  3017                           	opt stack 0
  3018  00271A                     _initUI:
  3019                           	opt stack 18
  3020                           
  3021                           ;UI.c: 64: (INTCONbits.GIE = 1);
  3022                           
  3023                           ;incstack = 0
  3024  00271A  8EF2               	bsf	intcon,7,c	;volatile
  3025                           
  3026                           ;UI.c: 65: machine_state = UI_state;
  3027  00271C  0E00               	movlw	0
  3028  00271E  0100               	movlb	0	; () banked
  3029  002720  6FEF               	movwf	_machine_state& (0+255),b
  3030                           
  3031                           ; BSR set to: 0
  3032                           ;UI.c: 67: loadRTC();
  3033  002722  ECEE  F00E         	call	_loadRTC	;wreg free
  3034                           
  3035                           ;UI.c: 69: change_state_to_menu_start();
  3036  002726  ECF5  F012         	call	_change_state_to_menu_start	;wreg free
  3037                           
  3038                           ;UI.c: 70: firstboot = 1;
  3039  00272A  0E00               	movlw	0
  3040  00272C  6E72               	movwf	_firstboot+1,c
  3041  00272E  0E01               	movlw	1
  3042  002730  6E71               	movwf	_firstboot,c
  3043  002732  0012               	return		;funcret
  3044  002734                     __end_of_initUI:
  3045                           	opt stack 0
  3046                           tblptru	equ	0xFF8
  3047                           tblptrh	equ	0xFF7
  3048                           tblptrl	equ	0xFF6
  3049                           tablat	equ	0xFF5
  3050                           prodh	equ	0xFF4
  3051                           prodl	equ	0xFF3
  3052                           intcon	equ	0xFF2
  3053                           intcon3	equ	0xFF0
  3054                           postinc0	equ	0xFEE
  3055                           wreg	equ	0xFE8
  3056                           postdec1	equ	0xFE5
  3057                           fsr1l	equ	0xFE1
  3058                           indf2	equ	0xFDF
  3059                           postinc2	equ	0xFDE
  3060                           postdec2	equ	0xFDD
  3061                           fsr2h	equ	0xFDA
  3062                           fsr2l	equ	0xFD9
  3063                           status	equ	0xFD8
  3064                           
  3065 ;; *************** function _loadRTC *****************
  3066 ;; Defined at:
  3067 ;;		line 26 in file "RTC.c"
  3068 ;; Parameters:    Size  Location     Type
  3069 ;;		None
  3070 ;; Auto vars:     Size  Location     Type
  3071 ;;  i               2   22[BANK0 ] int 
  3072 ;; Return value:  Size  Location     Type
  3073 ;;                  1    wreg      void 
  3074 ;; Registers used:
  3075 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3076 ;; Tracked objects:
  3077 ;;		On entry : 0/0
  3078 ;;		On exit  : 0/0
  3079 ;;		Unchanged: 0/0
  3080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3082 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3083 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3084 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3085 ;;Total ram usage:        3 bytes
  3086 ;; Hardware stack levels used:    1
  3087 ;; Hardware stack levels required when called:    9
  3088 ;; This function calls:
  3089 ;;		_I2C_Master_Init
  3090 ;;		_I2C_Master_Start
  3091 ;;		_I2C_Master_Stop
  3092 ;;		_I2C_Master_Write
  3093 ;; This function is called by:
  3094 ;;		_initUI
  3095 ;; This function uses a non-reentrant model
  3096 ;;
  3097                           
  3098                           	psect	text13
  3099  001DDC                     __ptext13:
  3100                           	opt stack 0
  3101  001DDC                     _loadRTC:
  3102                           	opt stack 20
  3103                           
  3104                           ;RTC.c: 28: I2C_Master_Init(10000);
  3105                           
  3106                           ;incstack = 0
  3107  001DDC  0E10               	movlw	16
  3108  001DDE  0100               	movlb	0	; () banked
  3109  001DE0  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3110  001DE2  0E27               	movlw	39
  3111  001DE4  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3112  001DE6  0E00               	movlw	0
  3113  001DE8  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3114  001DEA  0E00               	movlw	0
  3115  001DEC  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3116  001DEE  EC8E  F010         	call	_I2C_Master_Init	;wreg free
  3117                           
  3118                           ;RTC.c: 30: (INTCONbits.GIE = 0);
  3119  001DF2  9EF2               	bcf	intcon,7,c	;volatile
  3120                           
  3121                           ;RTC.c: 32: I2C_Master_Start();
  3122  001DF4  EC04  F014         	call	_I2C_Master_Start	;wreg free
  3123                           
  3124                           ;RTC.c: 33: I2C_Master_Write(0b11010000);
  3125  001DF8  0E00               	movlw	0
  3126  001DFA  0100               	movlb	0	; () banked
  3127  001DFC  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3128  001DFE  0ED0               	movlw	208
  3129  001E00  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3130  001E02  ECF2  F013         	call	_I2C_Master_Write	;wreg free
  3131                           
  3132                           ;RTC.c: 34: I2C_Master_Write(0x00);
  3133  001E06  0E00               	movlw	0
  3134  001E08  0100               	movlb	0	; () banked
  3135  001E0A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3136  001E0C  0E00               	movlw	0
  3137  001E0E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3138  001E10  ECF2  F013         	call	_I2C_Master_Write	;wreg free
  3139                           
  3140                           ;RTC.c: 35: for(int i = 0; i<7; i++){
  3141  001E14  0E00               	movlw	0
  3142  001E16  0100               	movlb	0	; () banked
  3143  001E18  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  3144  001E1A  0E00               	movlw	0
  3145  001E1C  6F96               	movwf	loadRTC@i& (0+255),b
  3146  001E1E                     l4342:
  3147                           
  3148                           ; BSR set to: 0
  3149  001E1E  0100               	movlb	0	; () banked
  3150  001E20  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  3151  001E22  D008               	goto	l4346
  3152  001E24  0100               	movlb	0	; () banked
  3153  001E26  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  3154  001E28  E11B               	bnz	l4352
  3155  001E2A  0E07               	movlw	7
  3156  001E2C  0100               	movlb	0	; () banked
  3157  001E2E  5D96               	subwf	loadRTC@i& (0+255),w,b
  3158  001E30  B0D8               	btfsc	status,0,c
  3159  001E32  D016               	goto	l4352
  3160  001E34                     l4346:
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;RTC.c: 36: I2C_Master_Write(time[i]);
  3164  001E34  0ED4               	movlw	low _time
  3165  001E36  0100               	movlb	0	; () banked
  3166  001E38  2596               	addwf	loadRTC@i& (0+255),w,b
  3167  001E3A  6ED9               	movwf	fsr2l,c
  3168  001E3C  0E00               	movlw	high _time
  3169  001E3E  0100               	movlb	0	; () banked
  3170  001E40  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  3171  001E42  6EDA               	movwf	fsr2h,c
  3172  001E44  50DF               	movf	indf2,w,c
  3173  001E46  0100               	movlb	0	; () banked
  3174  001E48  6F95               	movwf	??_loadRTC& (0+255),b
  3175  001E4A  0100               	movlb	0	; () banked
  3176  001E4C  5195               	movf	??_loadRTC& (0+255),w,b
  3177  001E4E  0100               	movlb	0	; () banked
  3178  001E50  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3179  001E52  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  3180  001E54  ECF2  F013         	call	_I2C_Master_Write	;wreg free
  3181  001E58  0100               	movlb	0	; () banked
  3182  001E5A  4B96               	infsnz	loadRTC@i& (0+255),f,b
  3183  001E5C  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  3184  001E5E  D7DF               	goto	l4342
  3185  001E60                     l4352:
  3186                           
  3187                           ; BSR set to: 0
  3188                           ;RTC.c: 37: }
  3189                           ;RTC.c: 38: I2C_Master_Stop();
  3190  001E60  EC00  F014         	call	_I2C_Master_Stop	;wreg free
  3191                           
  3192                           ;RTC.c: 39: (INTCONbits.GIE = 1);
  3193  001E64  8EF2               	bsf	intcon,7,c	;volatile
  3194  001E66  0012               	return		;funcret
  3195  001E68                     __end_of_loadRTC:
  3196                           	opt stack 0
  3197                           tblptru	equ	0xFF8
  3198                           tblptrh	equ	0xFF7
  3199                           tblptrl	equ	0xFF6
  3200                           tablat	equ	0xFF5
  3201                           prodh	equ	0xFF4
  3202                           prodl	equ	0xFF3
  3203                           intcon	equ	0xFF2
  3204                           intcon3	equ	0xFF0
  3205                           postinc0	equ	0xFEE
  3206                           wreg	equ	0xFE8
  3207                           postdec1	equ	0xFE5
  3208                           fsr1l	equ	0xFE1
  3209                           indf2	equ	0xFDF
  3210                           postinc2	equ	0xFDE
  3211                           postdec2	equ	0xFDD
  3212                           fsr2h	equ	0xFDA
  3213                           fsr2l	equ	0xFD9
  3214                           status	equ	0xFD8
  3215                           
  3216 ;; *************** function _I2C_Master_Init *****************
  3217 ;; Defined at:
  3218 ;;		line 13 in file "I2C.c"
  3219 ;; Parameters:    Size  Location     Type
  3220 ;;  c               4   13[BANK0 ] const unsigned long 
  3221 ;; Auto vars:     Size  Location     Type
  3222 ;;		None
  3223 ;; Return value:  Size  Location     Type
  3224 ;;                  1    wreg      void 
  3225 ;; Registers used:
  3226 ;;		wreg, status,2, status,0, cstack
  3227 ;; Tracked objects:
  3228 ;;		On entry : 0/0
  3229 ;;		On exit  : 0/0
  3230 ;;		Unchanged: 0/0
  3231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3232 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3234 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3235 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3236 ;;Total ram usage:        8 bytes
  3237 ;; Hardware stack levels used:    1
  3238 ;; Hardware stack levels required when called:    8
  3239 ;; This function calls:
  3240 ;;		___lldiv
  3241 ;; This function is called by:
  3242 ;;		_loadRTC
  3243 ;; This function uses a non-reentrant model
  3244 ;;
  3245                           
  3246                           	psect	text14
  3247  00211C                     __ptext14:
  3248                           	opt stack 0
  3249  00211C                     _I2C_Master_Init:
  3250                           	opt stack 20
  3251                           
  3252                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  3253                           
  3254                           ;incstack = 0
  3255  00211C  0E00               	movlw	0
  3256  00211E  6EC7               	movwf	4039,c	;volatile
  3257                           
  3258                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  3259  002120  0E28               	movlw	40
  3260  002122  6EC6               	movwf	4038,c	;volatile
  3261                           
  3262                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  3263  002124  0E00               	movlw	0
  3264  002126  6EC5               	movwf	4037,c	;volatile
  3265                           
  3266                           ;I2C.c: 19: SSPADD = (32000000/(4*c))-1;
  3267  002128  0E00               	movlw	0
  3268  00212A  0100               	movlb	0	; () banked
  3269  00212C  6F80               	movwf	___lldiv@dividend& (0+255),b
  3270  00212E  0E48               	movlw	72
  3271  002130  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  3272  002132  0EE8               	movlw	232
  3273  002134  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  3274  002136  0E01               	movlw	1
  3275  002138  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  3276  00213A  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  3277  00213E  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  3278  002142  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  3279  002146  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  3280  00214A  0E02               	movlw	2
  3281  00214C                     u3125:
  3282  00214C  90D8               	bcf	status,0,c
  3283  00214E  0100               	movlb	0	; () banked
  3284  002150  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  3285  002152  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  3286  002154  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  3287  002156  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  3288  002158  2EE8               	decfsz	wreg,f,c
  3289  00215A  D7F8               	goto	u3125
  3290  00215C  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  3291  002160  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3292  002164  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3293  002168  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3294  00216C  EC54  F00D         	call	___lldiv	;wreg free
  3295  002170  0100               	movlb	0	; () banked
  3296  002172  0580               	decf	?___lldiv& (0+255),w,b
  3297  002174  6EC8               	movwf	4040,c	;volatile
  3298                           
  3299                           ; BSR set to: 0
  3300                           ;I2C.c: 20: TRISC3 = 1;
  3301  002176  8694               	bsf	3988,3,c	;volatile
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;I2C.c: 21: TRISC4 = 1;
  3305  002178  8894               	bsf	3988,4,c	;volatile
  3306                           
  3307                           ; BSR set to: 0
  3308  00217A  0012               	return		;funcret
  3309  00217C                     __end_of_I2C_Master_Init:
  3310                           	opt stack 0
  3311                           tblptru	equ	0xFF8
  3312                           tblptrh	equ	0xFF7
  3313                           tblptrl	equ	0xFF6
  3314                           tablat	equ	0xFF5
  3315                           prodh	equ	0xFF4
  3316                           prodl	equ	0xFF3
  3317                           intcon	equ	0xFF2
  3318                           intcon3	equ	0xFF0
  3319                           postinc0	equ	0xFEE
  3320                           wreg	equ	0xFE8
  3321                           postdec1	equ	0xFE5
  3322                           fsr1l	equ	0xFE1
  3323                           indf2	equ	0xFDF
  3324                           postinc2	equ	0xFDE
  3325                           postdec2	equ	0xFDD
  3326                           fsr2h	equ	0xFDA
  3327                           fsr2l	equ	0xFD9
  3328                           status	equ	0xFD8
  3329                           
  3330 ;; *************** function ___lldiv *****************
  3331 ;; Defined at:
  3332 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3333 ;; Parameters:    Size  Location     Type
  3334 ;;  dividend        4    0[BANK0 ] unsigned long 
  3335 ;;  divisor         4    4[BANK0 ] unsigned long 
  3336 ;; Auto vars:     Size  Location     Type
  3337 ;;  quotient        4    8[BANK0 ] unsigned long 
  3338 ;;  counter         1   12[BANK0 ] unsigned char 
  3339 ;; Return value:  Size  Location     Type
  3340 ;;                  4    0[BANK0 ] unsigned long 
  3341 ;; Registers used:
  3342 ;;		wreg, status,2, status,0
  3343 ;; Tracked objects:
  3344 ;;		On entry : 0/0
  3345 ;;		On exit  : 0/0
  3346 ;;		Unchanged: 0/0
  3347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3348 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3349 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3351 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3352 ;;Total ram usage:       13 bytes
  3353 ;; Hardware stack levels used:    1
  3354 ;; Hardware stack levels required when called:    7
  3355 ;; This function calls:
  3356 ;;		Nothing
  3357 ;; This function is called by:
  3358 ;;		_I2C_Master_Init
  3359 ;; This function uses a non-reentrant model
  3360 ;;
  3361                           
  3362                           	psect	text15
  3363  001AA8                     __ptext15:
  3364                           	opt stack 0
  3365  001AA8                     ___lldiv:
  3366                           	opt stack 20
  3367                           
  3368                           ; BSR set to: 0
  3369                           ;incstack = 0
  3370  001AA8  0E00               	movlw	0
  3371  001AAA  0100               	movlb	0	; () banked
  3372  001AAC  6F88               	movwf	___lldiv@quotient& (0+255),b
  3373  001AAE  0E00               	movlw	0
  3374  001AB0  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  3375  001AB2  0E00               	movlw	0
  3376  001AB4  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  3377  001AB6  0E00               	movlw	0
  3378  001AB8  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  3379                           
  3380                           ; BSR set to: 0
  3381  001ABA  0100               	movlb	0	; () banked
  3382  001ABC  5184               	movf	___lldiv@divisor& (0+255),w,b
  3383  001ABE  0100               	movlb	0	; () banked
  3384  001AC0  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  3385  001AC2  0100               	movlb	0	; () banked
  3386  001AC4  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  3387  001AC6  0100               	movlb	0	; () banked
  3388  001AC8  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  3389  001ACA  B4D8               	btfsc	status,2,c
  3390  001ACC  D042               	goto	l1388
  3391                           
  3392                           ; BSR set to: 0
  3393  001ACE  0E01               	movlw	1
  3394  001AD0  0100               	movlb	0	; () banked
  3395  001AD2  6F8C               	movwf	___lldiv@counter& (0+255),b
  3396  001AD4  D008               	goto	l3918
  3397  001AD6                     l3916:
  3398                           
  3399                           ; BSR set to: 0
  3400  001AD6  0100               	movlb	0	; () banked
  3401  001AD8  90D8               	bcf	status,0,c
  3402  001ADA  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  3403  001ADC  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  3404  001ADE  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  3405  001AE0  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  3406  001AE2  0100               	movlb	0	; () banked
  3407  001AE4  2B8C               	incf	___lldiv@counter& (0+255),f,b
  3408  001AE6                     l3918:
  3409                           
  3410                           ; BSR set to: 0
  3411  001AE6  0100               	movlb	0	; () banked
  3412  001AE8  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  3413  001AEA  D7F5               	goto	l3916
  3414  001AEC                     l3920:
  3415                           
  3416                           ; BSR set to: 0
  3417  001AEC  0100               	movlb	0	; () banked
  3418  001AEE  90D8               	bcf	status,0,c
  3419  001AF0  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  3420  001AF2  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  3421  001AF4  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  3422  001AF6  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  3423                           
  3424                           ; BSR set to: 0
  3425  001AF8  0100               	movlb	0	; () banked
  3426  001AFA  5184               	movf	___lldiv@divisor& (0+255),w,b
  3427  001AFC  0100               	movlb	0	; () banked
  3428  001AFE  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  3429  001B00  0100               	movlb	0	; () banked
  3430  001B02  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3431  001B04  0100               	movlb	0	; () banked
  3432  001B06  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  3433  001B08  0100               	movlb	0	; () banked
  3434  001B0A  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3435  001B0C  0100               	movlb	0	; () banked
  3436  001B0E  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  3437  001B10  0100               	movlb	0	; () banked
  3438  001B12  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3439  001B14  0100               	movlb	0	; () banked
  3440  001B16  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  3441  001B18  A0D8               	btfss	status,0,c
  3442  001B1A  D012               	goto	l3928
  3443                           
  3444                           ; BSR set to: 0
  3445  001B1C  0100               	movlb	0	; () banked
  3446  001B1E  5184               	movf	___lldiv@divisor& (0+255),w,b
  3447  001B20  0100               	movlb	0	; () banked
  3448  001B22  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  3449  001B24  0100               	movlb	0	; () banked
  3450  001B26  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3451  001B28  0100               	movlb	0	; () banked
  3452  001B2A  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  3453  001B2C  0100               	movlb	0	; () banked
  3454  001B2E  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3455  001B30  0100               	movlb	0	; () banked
  3456  001B32  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  3457  001B34  0100               	movlb	0	; () banked
  3458  001B36  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3459  001B38  0100               	movlb	0	; () banked
  3460  001B3A  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  3461                           
  3462                           ; BSR set to: 0
  3463  001B3C  0100               	movlb	0	; () banked
  3464  001B3E  8188               	bsf	___lldiv@quotient& (0+255),0,b
  3465  001B40                     l3928:
  3466                           
  3467                           ; BSR set to: 0
  3468  001B40  0100               	movlb	0	; () banked
  3469  001B42  90D8               	bcf	status,0,c
  3470  001B44  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  3471  001B46  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  3472  001B48  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  3473  001B4A  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  3474                           
  3475                           ; BSR set to: 0
  3476  001B4C  0100               	movlb	0	; () banked
  3477  001B4E  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  3478  001B50  D7CD               	goto	l3920
  3479  001B52                     l1388:
  3480                           
  3481                           ; BSR set to: 0
  3482  001B52  C088  F080         	movff	___lldiv@quotient,?___lldiv
  3483  001B56  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  3484  001B5A  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  3485  001B5E  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  3486                           
  3487                           ; BSR set to: 0
  3488  001B62  0012               	return		;funcret
  3489  001B64                     __end_of___lldiv:
  3490                           	opt stack 0
  3491                           tblptru	equ	0xFF8
  3492                           tblptrh	equ	0xFF7
  3493                           tblptrl	equ	0xFF6
  3494                           tablat	equ	0xFF5
  3495                           prodh	equ	0xFF4
  3496                           prodl	equ	0xFF3
  3497                           intcon	equ	0xFF2
  3498                           intcon3	equ	0xFF0
  3499                           postinc0	equ	0xFEE
  3500                           wreg	equ	0xFE8
  3501                           postdec1	equ	0xFE5
  3502                           fsr1l	equ	0xFE1
  3503                           indf2	equ	0xFDF
  3504                           postinc2	equ	0xFDE
  3505                           postdec2	equ	0xFDD
  3506                           fsr2h	equ	0xFDA
  3507                           fsr2l	equ	0xFD9
  3508                           status	equ	0xFD8
  3509                           
  3510 ;; *************** function _change_state_to_menu_start *****************
  3511 ;; Defined at:
  3512 ;;		line 408 in file "UI.c"
  3513 ;; Parameters:    Size  Location     Type
  3514 ;;		None
  3515 ;; Auto vars:     Size  Location     Type
  3516 ;;		None
  3517 ;; Return value:  Size  Location     Type
  3518 ;;                  1    wreg      void 
  3519 ;; Registers used:
  3520 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3521 ;; Tracked objects:
  3522 ;;		On entry : 0/0
  3523 ;;		On exit  : 0/0
  3524 ;;		Unchanged: 0/0
  3525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3529 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3530 ;;Total ram usage:        0 bytes
  3531 ;; Hardware stack levels used:    1
  3532 ;; Hardware stack levels required when called:   11
  3533 ;; This function calls:
  3534 ;;		_lcdInst
  3535 ;;		_printRTC
  3536 ;;		_printf
  3537 ;; This function is called by:
  3538 ;;		_initUI
  3539 ;; This function uses a non-reentrant model
  3540 ;;
  3541                           
  3542                           	psect	text16
  3543  0025EA                     __ptext16:
  3544                           	opt stack 0
  3545  0025EA                     _change_state_to_menu_start:
  3546                           	opt stack 18
  3547                           
  3548                           ;UI.c: 409: cur_state = 0;
  3549                           
  3550                           ; BSR set to: 0
  3551                           ;incstack = 0
  3552  0025EA  0E00               	movlw	0
  3553  0025EC  0100               	movlb	0	; () banked
  3554  0025EE  6FE2               	movwf	(_cur_state+1)& (0+255),b
  3555  0025F0  0E00               	movlw	0
  3556  0025F2  6FE1               	movwf	_cur_state& (0+255),b
  3557                           
  3558                           ; BSR set to: 0
  3559                           ;UI.c: 411: lcdInst(0b10000000);;
  3560  0025F4  0E80               	movlw	128
  3561  0025F6  ECDE  F013         	call	_lcdInst
  3562                           
  3563                           ;UI.c: 412: printRTC();
  3564  0025FA  EC52  F006         	call	_printRTC	;wreg free
  3565                           
  3566                           ;UI.c: 413: lcdInst(0b11000000);;
  3567  0025FE  0EC0               	movlw	192
  3568  002600  ECDE  F013         	call	_lcdInst
  3569                           
  3570                           ;UI.c: 414: printf("PUSH TO CONTINUE");
  3571  002604  0E8A               	movlw	low STR_15
  3572  002606  0100               	movlb	0	; () banked
  3573  002608  6F8E               	movwf	printf@f& (0+255),b
  3574  00260A  0EFF               	movlw	high STR_15
  3575  00260C  0100               	movlb	0	; () banked
  3576  00260E  6F8F               	movwf	(printf@f+1)& (0+255),b
  3577  002610  ECAA  F002         	call	_printf	;wreg free
  3578  002614  0012               	return		;funcret
  3579  002616                     __end_of_change_state_to_menu_start:
  3580                           	opt stack 0
  3581                           tblptru	equ	0xFF8
  3582                           tblptrh	equ	0xFF7
  3583                           tblptrl	equ	0xFF6
  3584                           tablat	equ	0xFF5
  3585                           prodh	equ	0xFF4
  3586                           prodl	equ	0xFF3
  3587                           intcon	equ	0xFF2
  3588                           intcon3	equ	0xFF0
  3589                           postinc0	equ	0xFEE
  3590                           wreg	equ	0xFE8
  3591                           postdec1	equ	0xFE5
  3592                           fsr1l	equ	0xFE1
  3593                           indf2	equ	0xFDF
  3594                           postinc2	equ	0xFDE
  3595                           postdec2	equ	0xFDD
  3596                           fsr2h	equ	0xFDA
  3597                           fsr2l	equ	0xFD9
  3598                           status	equ	0xFD8
  3599                           
  3600 ;; *************** function _initTime *****************
  3601 ;; Defined at:
  3602 ;;		line 15 in file "RTC.c"
  3603 ;; Parameters:    Size  Location     Type
  3604 ;;  s               1    wreg     unsigned char 
  3605 ;;  m               1    0[BANK0 ] unsigned char 
  3606 ;;  h               1    1[BANK0 ] unsigned char 
  3607 ;;  w               1    2[BANK0 ] unsigned char 
  3608 ;;  DD              1    3[BANK0 ] unsigned char 
  3609 ;;  MM              1    4[BANK0 ] unsigned char 
  3610 ;;  YY              1    5[BANK0 ] unsigned char 
  3611 ;; Auto vars:     Size  Location     Type
  3612 ;;  s               1    6[BANK0 ] unsigned char 
  3613 ;; Return value:  Size  Location     Type
  3614 ;;                  1    wreg      void 
  3615 ;; Registers used:
  3616 ;;		wreg
  3617 ;; Tracked objects:
  3618 ;;		On entry : 0/0
  3619 ;;		On exit  : 0/0
  3620 ;;		Unchanged: 0/0
  3621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3622 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3623 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3625 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3626 ;;Total ram usage:        7 bytes
  3627 ;; Hardware stack levels used:    1
  3628 ;; Hardware stack levels required when called:    7
  3629 ;; This function calls:
  3630 ;;		Nothing
  3631 ;; This function is called by:
  3632 ;;		_main
  3633 ;; This function uses a non-reentrant model
  3634 ;;
  3635                           
  3636                           	psect	text17
  3637  0026DA                     __ptext17:
  3638                           	opt stack 0
  3639  0026DA                     _initTime:
  3640                           	opt stack 23
  3641                           
  3642                           ;incstack = 0
  3643                           ;initTime@s stored from wreg
  3644  0026DA  0100               	movlb	0	; () banked
  3645  0026DC  6F86               	movwf	initTime@s& (0+255),b
  3646                           
  3647                           ;RTC.c: 17: time[0] = s;
  3648  0026DE  C086  F0D4         	movff	initTime@s,_time
  3649                           
  3650                           ;RTC.c: 18: time[1] = m;
  3651  0026E2  C080  F0D5         	movff	initTime@m,_time+1
  3652                           
  3653                           ;RTC.c: 19: time[2] = h;
  3654  0026E6  C081  F0D6         	movff	initTime@h,_time+2
  3655                           
  3656                           ;RTC.c: 20: time[3] = w;
  3657  0026EA  C082  F0D7         	movff	initTime@w,_time+3
  3658                           
  3659                           ;RTC.c: 21: time[4] = DD;
  3660  0026EE  C083  F0D8         	movff	initTime@DD,_time+4
  3661                           
  3662                           ;RTC.c: 22: time[5] = MM;
  3663  0026F2  C084  F0D9         	movff	initTime@MM,_time+5
  3664                           
  3665                           ;RTC.c: 23: time[6] = YY;
  3666  0026F6  C085  F0DA         	movff	initTime@YY,_time+6
  3667  0026FA  0012               	return		;funcret
  3668  0026FC                     __end_of_initTime:
  3669                           	opt stack 0
  3670                           tblptru	equ	0xFF8
  3671                           tblptrh	equ	0xFF7
  3672                           tblptrl	equ	0xFF6
  3673                           tablat	equ	0xFF5
  3674                           prodh	equ	0xFF4
  3675                           prodl	equ	0xFF3
  3676                           intcon	equ	0xFF2
  3677                           intcon3	equ	0xFF0
  3678                           postinc0	equ	0xFEE
  3679                           wreg	equ	0xFE8
  3680                           postdec1	equ	0xFE5
  3681                           fsr1l	equ	0xFE1
  3682                           indf2	equ	0xFDF
  3683                           postinc2	equ	0xFDE
  3684                           postdec2	equ	0xFDD
  3685                           fsr2h	equ	0xFDA
  3686                           fsr2l	equ	0xFD9
  3687                           status	equ	0xFD8
  3688                           
  3689 ;; *************** function _initLCD *****************
  3690 ;; Defined at:
  3691 ;;		line 46 in file "lcd.c"
  3692 ;; Parameters:    Size  Location     Type
  3693 ;;		None
  3694 ;; Auto vars:     Size  Location     Type
  3695 ;;		None
  3696 ;; Return value:  Size  Location     Type
  3697 ;;                  1    wreg      void 
  3698 ;; Registers used:
  3699 ;;		wreg, status,2, status,0, cstack
  3700 ;; Tracked objects:
  3701 ;;		On entry : 0/0
  3702 ;;		On exit  : 0/0
  3703 ;;		Unchanged: 0/0
  3704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3707 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3708 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3709 ;;Total ram usage:        1 bytes
  3710 ;; Hardware stack levels used:    1
  3711 ;; Hardware stack levels required when called:    9
  3712 ;; This function calls:
  3713 ;;		_lcdInst
  3714 ;; This function is called by:
  3715 ;;		_main
  3716 ;; This function uses a non-reentrant model
  3717 ;;
  3718                           
  3719                           	psect	text18
  3720  0022B8                     __ptext18:
  3721                           	opt stack 0
  3722  0022B8                     _initLCD:
  3723                           	opt stack 21
  3724                           
  3725                           ;lcd.c: 47: _delay((unsigned long)((15)*(32000000/4000.0)));
  3726                           
  3727                           ;incstack = 0
  3728  0022B8  0E9C               	movlw	156
  3729  0022BA  0100               	movlb	0	; () banked
  3730  0022BC  6F83               	movwf	??_initLCD& (0+255),b
  3731  0022BE  0ED7               	movlw	215
  3732  0022C0                     u4507:
  3733  0022C0  2EE8               	decfsz	wreg,f,c
  3734  0022C2  D7FE               	bra	u4507
  3735  0022C4  2F83               	decfsz	??_initLCD& (0+255),f,b
  3736  0022C6  D7FC               	bra	u4507
  3737                           
  3738                           ;lcd.c: 48: lcdInst(0b00110011);
  3739  0022C8  0E33               	movlw	51
  3740  0022CA  ECDE  F013         	call	_lcdInst
  3741                           
  3742                           ;lcd.c: 49: lcdInst(0b00110010);
  3743  0022CE  0E32               	movlw	50
  3744  0022D0  ECDE  F013         	call	_lcdInst
  3745                           
  3746                           ;lcd.c: 51: lcdInst(0b00101000);
  3747  0022D4  0E28               	movlw	40
  3748  0022D6  ECDE  F013         	call	_lcdInst
  3749                           
  3750                           ;lcd.c: 52: lcdInst(0b00001100);
  3751  0022DA  0E0C               	movlw	12
  3752  0022DC  ECDE  F013         	call	_lcdInst
  3753                           
  3754                           ;lcd.c: 53: lcdInst(0b00000110);
  3755  0022E0  0E06               	movlw	6
  3756  0022E2  ECDE  F013         	call	_lcdInst
  3757                           
  3758                           ;lcd.c: 54: lcdInst(0b00000001);
  3759  0022E6  0E01               	movlw	1
  3760  0022E8  ECDE  F013         	call	_lcdInst
  3761                           
  3762                           ;lcd.c: 55: _delay((unsigned long)((15)*(32000000/4000.0)));
  3763  0022EC  0E9C               	movlw	156
  3764  0022EE  0100               	movlb	0	; () banked
  3765  0022F0  6F83               	movwf	??_initLCD& (0+255),b
  3766  0022F2  0ED7               	movlw	215
  3767  0022F4                     u4517:
  3768  0022F4  2EE8               	decfsz	wreg,f,c
  3769  0022F6  D7FE               	bra	u4517
  3770  0022F8  2F83               	decfsz	??_initLCD& (0+255),f,b
  3771  0022FA  D7FC               	bra	u4517
  3772  0022FC  0012               	return		;funcret
  3773  0022FE                     __end_of_initLCD:
  3774                           	opt stack 0
  3775                           tblptru	equ	0xFF8
  3776                           tblptrh	equ	0xFF7
  3777                           tblptrl	equ	0xFF6
  3778                           tablat	equ	0xFF5
  3779                           prodh	equ	0xFF4
  3780                           prodl	equ	0xFF3
  3781                           intcon	equ	0xFF2
  3782                           intcon3	equ	0xFF0
  3783                           postinc0	equ	0xFEE
  3784                           wreg	equ	0xFE8
  3785                           postdec1	equ	0xFE5
  3786                           fsr1l	equ	0xFE1
  3787                           indf2	equ	0xFDF
  3788                           postinc2	equ	0xFDE
  3789                           postdec2	equ	0xFDD
  3790                           fsr2h	equ	0xFDA
  3791                           fsr2l	equ	0xFD9
  3792                           status	equ	0xFD8
  3793                           
  3794 ;; *************** function _UI *****************
  3795 ;; Defined at:
  3796 ;;		line 74 in file "UI.c"
  3797 ;; Parameters:    Size  Location     Type
  3798 ;;		None
  3799 ;; Auto vars:     Size  Location     Type
  3800 ;;  i               1   83[BANK0 ] unsigned char 
  3801 ;;  i               1   82[BANK0 ] unsigned char 
  3802 ;;  i               1   81[BANK0 ] unsigned char 
  3803 ;;  i               1   80[BANK0 ] unsigned char 
  3804 ;;  i               1   79[BANK0 ] unsigned char 
  3805 ;;  i               1   78[BANK0 ] unsigned char 
  3806 ;;  i               1   77[BANK0 ] unsigned char 
  3807 ;;  i               1   76[BANK0 ] unsigned char 
  3808 ;;  i               1   75[BANK0 ] unsigned char 
  3809 ;;  i               1   74[BANK0 ] unsigned char 
  3810 ;;  i               1   73[BANK0 ] unsigned char 
  3811 ;;  i               1   72[BANK0 ] unsigned char 
  3812 ;;  i               1   71[BANK0 ] unsigned char 
  3813 ;; Return value:  Size  Location     Type
  3814 ;;                  1    wreg      void 
  3815 ;; Registers used:
  3816 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3817 ;; Tracked objects:
  3818 ;;		On entry : 0/0
  3819 ;;		On exit  : 0/0
  3820 ;;		Unchanged: 0/0
  3821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3823 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3824 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3825 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3826 ;;Total ram usage:       16 bytes
  3827 ;; Hardware stack levels used:    1
  3828 ;; Hardware stack levels required when called:   11
  3829 ;; This function calls:
  3830 ;;		___awdiv
  3831 ;;		___awmod
  3832 ;;		_lcdInst
  3833 ;;		_printRTC
  3834 ;;		_printf
  3835 ;; This function is called by:
  3836 ;;		_main
  3837 ;; This function uses a non-reentrant model
  3838 ;;
  3839                           
  3840                           	psect	text19
  3841  000012                     __ptext19:
  3842                           	opt stack 0
  3843  000012                     _UI:
  3844                           	opt stack 19
  3845                           
  3846                           ;UI.c: 75: if(machine_state == DoneSorting_state){
  3847                           
  3848                           ;incstack = 0
  3849  000012  0E02               	movlw	2
  3850  000014  0100               	movlb	0	; () banked
  3851  000016  19EF               	xorwf	_machine_state& (0+255),w,b
  3852  000018  A4D8               	btfss	status,2,c
  3853  00001A  D060               	goto	l4692
  3854                           
  3855                           ; BSR set to: 0
  3856                           ;UI.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3857  00001C  0E01               	movlw	1
  3858  00001E  ECDE  F013         	call	_lcdInst
  3859  000022  0E68               	movlw	104
  3860  000024  0100               	movlb	0	; () banked
  3861  000026  6FC4               	movwf	??_UI& (0+255),b
  3862  000028  0EE4               	movlw	228
  3863  00002A                     u4527:
  3864  00002A  2EE8               	decfsz	wreg,f,c
  3865  00002C  D7FE               	bra	u4527
  3866  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  3867  000030  D7FC               	bra	u4527
  3868  000032  F000               	nop	
  3869                           
  3870                           ;UI.c: 77: lcdInst(0b10000000);;
  3871  000034  0E80               	movlw	128
  3872  000036  ECDE  F013         	call	_lcdInst
  3873                           
  3874                           ;UI.c: 78: printf("Sort complete");
  3875  00003A  0E9B               	movlw	low STR_1
  3876  00003C  0100               	movlb	0	; () banked
  3877  00003E  6F8E               	movwf	printf@f& (0+255),b
  3878  000040  0EFF               	movlw	high STR_1
  3879  000042  0100               	movlb	0	; () banked
  3880  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  3881  000046  ECAA  F002         	call	_printf	;wreg free
  3882                           
  3883                           ;UI.c: 79: lcdInst(0b11000000);;
  3884  00004A  0EC0               	movlw	192
  3885  00004C  ECDE  F013         	call	_lcdInst
  3886                           
  3887                           ;UI.c: 80: printf("Time: %02d:%02d:%02d", 0, (total_time % 3600) / 60, (total_time % 360
      +                          0) % 60);
  3888  000050  0E0E               	movlw	14
  3889  000052  0100               	movlb	0	; () banked
  3890  000054  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  3891  000056  0E10               	movlw	16
  3892  000058  6F82               	movwf	___awmod@divisor& (0+255),b
  3893  00005A  C0ED  F080         	movff	_total_time,___awmod@dividend
  3894  00005E  C0EE  F081         	movff	_total_time+1,___awmod@dividend+1
  3895  000062  ECB2  F00D         	call	___awmod	;wreg free
  3896  000066  C080  F0C5         	movff	?___awmod,_UI$1913
  3897  00006A  C081  F0C6         	movff	?___awmod+1,_UI$1913+1
  3898                           
  3899                           ;UI.c: 80: printf("Time: %02d:%02d:%02d", 0, (total_time % 3600) / 60, (total_time % 360
      +                          0) % 60);
  3900  00006E  0EEC               	movlw	low STR_2
  3901  000070  0100               	movlb	0	; () banked
  3902  000072  6F8E               	movwf	printf@f& (0+255),b
  3903  000074  0EFD               	movlw	high STR_2
  3904  000076  0100               	movlb	0	; () banked
  3905  000078  6F8F               	movwf	(printf@f+1)& (0+255),b
  3906  00007A  0E00               	movlw	0
  3907  00007C  0100               	movlb	0	; () banked
  3908  00007E  6F91               	movwf	(?_printf+3)& (0+255),b
  3909  000080  0E00               	movlw	0
  3910  000082  6F90               	movwf	(?_printf+2)& (0+255),b
  3911  000084  0E0E               	movlw	14
  3912  000086  0100               	movlb	0	; () banked
  3913  000088  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  3914  00008A  0E10               	movlw	16
  3915  00008C  6F82               	movwf	___awmod@divisor& (0+255),b
  3916  00008E  C0ED  F080         	movff	_total_time,___awmod@dividend
  3917  000092  C0EE  F081         	movff	_total_time+1,___awmod@dividend+1
  3918  000096  ECB2  F00D         	call	___awmod	;wreg free
  3919  00009A  C080  F086         	movff	?___awmod,___awdiv@dividend
  3920  00009E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  3921  0000A2  0E00               	movlw	0
  3922  0000A4  0100               	movlb	0	; () banked
  3923  0000A6  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  3924  0000A8  0E3C               	movlw	60
  3925  0000AA  6F88               	movwf	___awdiv@divisor& (0+255),b
  3926  0000AC  ECF5  F00C         	call	___awdiv	;wreg free
  3927  0000B0  C086  F092         	movff	?___awdiv,?_printf+4
  3928  0000B4  C087  F093         	movff	?___awdiv+1,?_printf+5
  3929  0000B8  C0C5  F080         	movff	_UI$1913,___awmod@dividend
  3930  0000BC  C0C6  F081         	movff	_UI$1913+1,___awmod@dividend+1
  3931  0000C0  0E00               	movlw	0
  3932  0000C2  0100               	movlb	0	; () banked
  3933  0000C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  3934  0000C6  0E3C               	movlw	60
  3935  0000C8  6F82               	movwf	___awmod@divisor& (0+255),b
  3936  0000CA  ECB2  F00D         	call	___awmod	;wreg free
  3937  0000CE  C080  F094         	movff	?___awmod,?_printf+6
  3938  0000D2  C081  F095         	movff	?___awmod+1,?_printf+7
  3939  0000D6  ECAA  F002         	call	_printf	;wreg free
  3940                           
  3941                           ;UI.c: 81: }
  3942  0000DA  D235               	goto	l4948
  3943  0000DC                     l4692:
  3944                           
  3945                           ;UI.c: 82: else if(cur_state == 0){
  3946  0000DC  0100               	movlb	0	; () banked
  3947  0000DE  51E1               	movf	_cur_state& (0+255),w,b
  3948  0000E0  0100               	movlb	0	; () banked
  3949  0000E2  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
  3950  0000E4  A4D8               	btfss	status,2,c
  3951  0000E6  D22F               	goto	l4948
  3952                           
  3953                           ; BSR set to: 0
  3954                           ;UI.c: 83: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  3955  0000E8  0E00               	movlw	0
  3956  0000EA  0100               	movlb	0	; () banked
  3957  0000EC  6FC7               	movwf	UI@i& (0+255),b
  3958  0000EE                     l4696:
  3959                           
  3960                           ; BSR set to: 0
  3961  0000EE  0E63               	movlw	99
  3962  0000F0  0100               	movlb	0	; () banked
  3963  0000F2  65C7               	cpfsgt	UI@i& (0+255),b
  3964  0000F4  D001               	goto	l4700
  3965  0000F6  D00C               	goto	l4704
  3966  0000F8                     l4700:
  3967                           
  3968                           ; BSR set to: 0
  3969  0000F8  0E68               	movlw	104
  3970  0000FA  0100               	movlb	0	; () banked
  3971  0000FC  6FC4               	movwf	??_UI& (0+255),b
  3972  0000FE  0EE4               	movlw	228
  3973  000100                     u4537:
  3974  000100  2EE8               	decfsz	wreg,f,c
  3975  000102  D7FE               	bra	u4537
  3976  000104  2FC4               	decfsz	??_UI& (0+255),f,b
  3977  000106  D7FC               	bra	u4537
  3978  000108  F000               	nop	
  3979  00010A  0100               	movlb	0	; () banked
  3980  00010C  2BC7               	incf	UI@i& (0+255),f,b
  3981  00010E  D7EF               	goto	l4696
  3982  000110                     l4704:
  3983                           
  3984                           ; BSR set to: 0
  3985                           ;UI.c: 84: if(cur_state == 0){
  3986  000110  0100               	movlb	0	; () banked
  3987  000112  51E1               	movf	_cur_state& (0+255),w,b
  3988  000114  0100               	movlb	0	; () banked
  3989  000116  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
  3990  000118  A4D8               	btfss	status,2,c
  3991  00011A  D215               	goto	l4948
  3992                           
  3993                           ; BSR set to: 0
  3994                           ;UI.c: 85: printRTC();
  3995  00011C  EC52  F006         	call	_printRTC	;wreg free
  3996                           
  3997                           ;UI.c: 86: }
  3998                           ;UI.c: 87: }
  3999                           ;UI.c: 88: while(logstate){
  4000  000120  D212               	goto	l4948
  4001  000122                     l4708:
  4002                           
  4003                           ;UI.c: 90: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4004  000122  0E01               	movlw	1
  4005  000124  ECDE  F013         	call	_lcdInst
  4006  000128  0E68               	movlw	104
  4007  00012A  0100               	movlb	0	; () banked
  4008  00012C  6FC4               	movwf	??_UI& (0+255),b
  4009  00012E  0EE4               	movlw	228
  4010  000130                     u4547:
  4011  000130  2EE8               	decfsz	wreg,f,c
  4012  000132  D7FE               	bra	u4547
  4013  000134  2FC4               	decfsz	??_UI& (0+255),f,b
  4014  000136  D7FC               	bra	u4547
  4015  000138  F000               	nop	
  4016                           
  4017                           ;UI.c: 91: lcdInst(0b10000000);;
  4018  00013A  0E80               	movlw	128
  4019  00013C  ECDE  F013         	call	_lcdInst
  4020                           
  4021                           ;UI.c: 92: printf("-- Log %2d here--", log);
  4022  000140  0E01               	movlw	low STR_3
  4023  000142  0100               	movlb	0	; () banked
  4024  000144  6F8E               	movwf	printf@f& (0+255),b
  4025  000146  0EFE               	movlw	high STR_3
  4026  000148  0100               	movlb	0	; () banked
  4027  00014A  6F8F               	movwf	(printf@f+1)& (0+255),b
  4028  00014C  C0E9  F090         	movff	_log,?_printf+2
  4029  000150  C0EA  F091         	movff	_log+1,?_printf+3
  4030  000154  ECAA  F002         	call	_printf	;wreg free
  4031                           
  4032                           ;UI.c: 93: lcdInst(0b11000000);;
  4033  000158  0EC0               	movlw	192
  4034  00015A  ECDE  F013         	call	_lcdInst
  4035                           
  4036                           ;UI.c: 94: printf("Pause:< | Back:>");
  4037  00015E  0E79               	movlw	low STR_4
  4038  000160  0100               	movlb	0	; () banked
  4039  000162  6F8E               	movwf	printf@f& (0+255),b
  4040  000164  0EFF               	movlw	high STR_4
  4041  000166  0100               	movlb	0	; () banked
  4042  000168  6F8F               	movwf	(printf@f+1)& (0+255),b
  4043  00016A  ECAA  F002         	call	_printf	;wreg free
  4044                           
  4045                           ;UI.c: 96: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if(
      +                          !logstate){break;}
  4046  00016E  0E00               	movlw	0
  4047  000170  0100               	movlb	0	; () banked
  4048  000172  6FC8               	movwf	UI@i_634& (0+255),b
  4049  000174                     l4722:
  4050                           
  4051                           ; BSR set to: 0
  4052  000174  0E63               	movlw	99
  4053  000176  0100               	movlb	0	; () banked
  4054  000178  65C8               	cpfsgt	UI@i_634& (0+255),b
  4055  00017A  D001               	goto	l4726
  4056  00017C  D00C               	goto	l4730
  4057  00017E                     l4726:
  4058                           
  4059                           ; BSR set to: 0
  4060  00017E  0E68               	movlw	104
  4061  000180  0100               	movlb	0	; () banked
  4062  000182  6FC4               	movwf	??_UI& (0+255),b
  4063  000184  0EE4               	movlw	228
  4064  000186                     u4557:
  4065  000186  2EE8               	decfsz	wreg,f,c
  4066  000188  D7FE               	bra	u4557
  4067  00018A  2FC4               	decfsz	??_UI& (0+255),f,b
  4068  00018C  D7FC               	bra	u4557
  4069  00018E  F000               	nop	
  4070  000190  0100               	movlb	0	; () banked
  4071  000192  2BC8               	incf	UI@i_634& (0+255),f,b
  4072  000194  D7EF               	goto	l4722
  4073  000196                     l4730:
  4074                           
  4075                           ; BSR set to: 0
  4076  000196  0100               	movlb	0	; () banked
  4077  000198  51EB               	movf	_logstate& (0+255),w,b
  4078  00019A  0100               	movlb	0	; () banked
  4079  00019C  11EC               	iorwf	(_logstate+1)& (0+255),w,b
  4080  00019E  B4D8               	btfsc	status,2,c
  4081  0001A0  0012               	return	
  4082                           
  4083                           ; BSR set to: 0
  4084                           ;UI.c: 97: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if(
      +                          !logstate){break;}
  4085                           
  4086                           ; BSR set to: 0
  4087                           
  4088                           ; BSR set to: 0
  4089  0001A2  0E00               	movlw	0
  4090  0001A4  0100               	movlb	0	; () banked
  4091  0001A6  6FC9               	movwf	UI@i_635& (0+255),b
  4092  0001A8                     l4736:
  4093                           
  4094                           ; BSR set to: 0
  4095  0001A8  0E63               	movlw	99
  4096  0001AA  0100               	movlb	0	; () banked
  4097  0001AC  65C9               	cpfsgt	UI@i_635& (0+255),b
  4098  0001AE  D001               	goto	l4740
  4099  0001B0  D00C               	goto	l4744
  4100  0001B2                     l4740:
  4101                           
  4102                           ; BSR set to: 0
  4103  0001B2  0E68               	movlw	104
  4104  0001B4  0100               	movlb	0	; () banked
  4105  0001B6  6FC4               	movwf	??_UI& (0+255),b
  4106  0001B8  0EE4               	movlw	228
  4107  0001BA                     u4567:
  4108  0001BA  2EE8               	decfsz	wreg,f,c
  4109  0001BC  D7FE               	bra	u4567
  4110  0001BE  2FC4               	decfsz	??_UI& (0+255),f,b
  4111  0001C0  D7FC               	bra	u4567
  4112  0001C2  F000               	nop	
  4113  0001C4  0100               	movlb	0	; () banked
  4114  0001C6  2BC9               	incf	UI@i_635& (0+255),f,b
  4115  0001C8  D7EF               	goto	l4736
  4116  0001CA                     l4744:
  4117                           
  4118                           ; BSR set to: 0
  4119  0001CA  0100               	movlb	0	; () banked
  4120  0001CC  51EB               	movf	_logstate& (0+255),w,b
  4121  0001CE  0100               	movlb	0	; () banked
  4122  0001D0  11EC               	iorwf	(_logstate+1)& (0+255),w,b
  4123  0001D2  B4D8               	btfsc	status,2,c
  4124  0001D4  0012               	return	
  4125                           
  4126                           ; BSR set to: 0
  4127                           ;UI.c: 99: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4128                           
  4129                           ; BSR set to: 0
  4130                           
  4131                           ; BSR set to: 0
  4132  0001D6  0E01               	movlw	1
  4133  0001D8  ECDE  F013         	call	_lcdInst
  4134  0001DC  0E68               	movlw	104
  4135  0001DE  0100               	movlb	0	; () banked
  4136  0001E0  6FC4               	movwf	??_UI& (0+255),b
  4137  0001E2  0EE4               	movlw	228
  4138  0001E4                     u4577:
  4139  0001E4  2EE8               	decfsz	wreg,f,c
  4140  0001E6  D7FE               	bra	u4577
  4141  0001E8  2FC4               	decfsz	??_UI& (0+255),f,b
  4142  0001EA  D7FC               	bra	u4577
  4143  0001EC  F000               	nop	
  4144                           
  4145                           ;UI.c: 100: lcdInst(0b10000000);;
  4146  0001EE  0E80               	movlw	128
  4147  0001F0  ECDE  F013         	call	_lcdInst
  4148                           
  4149                           ;UI.c: 101: printf("Start:");
  4150  0001F4  0EC5               	movlw	low STR_5
  4151  0001F6  0100               	movlb	0	; () banked
  4152  0001F8  6F8E               	movwf	printf@f& (0+255),b
  4153  0001FA  0EFF               	movlw	high STR_5
  4154  0001FC  0100               	movlb	0	; () banked
  4155  0001FE  6F8F               	movwf	(printf@f+1)& (0+255),b
  4156  000200  ECAA  F002         	call	_printf	;wreg free
  4157                           
  4158                           ;UI.c: 102: lcdInst(0b11000000);;
  4159  000204  0EC0               	movlw	192
  4160  000206  ECDE  F013         	call	_lcdInst
  4161                           
  4162                           ;UI.c: 103: printf("06Feb | 01:08:56");
  4163  00020A  0EF1               	movlw	low STR_6
  4164  00020C  0100               	movlb	0	; () banked
  4165  00020E  6F8E               	movwf	printf@f& (0+255),b
  4166  000210  0EFE               	movlw	high STR_6
  4167  000212  0100               	movlb	0	; () banked
  4168  000214  6F8F               	movwf	(printf@f+1)& (0+255),b
  4169  000216  ECAA  F002         	call	_printf	;wreg free
  4170                           
  4171                           ;UI.c: 105: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4172  00021A  0E00               	movlw	0
  4173  00021C  0100               	movlb	0	; () banked
  4174  00021E  6FCA               	movwf	UI@i_638& (0+255),b
  4175  000220                     l4762:
  4176                           
  4177                           ; BSR set to: 0
  4178  000220  0E63               	movlw	99
  4179  000222  0100               	movlb	0	; () banked
  4180  000224  65CA               	cpfsgt	UI@i_638& (0+255),b
  4181  000226  D001               	goto	l4766
  4182  000228  D00C               	goto	l4770
  4183  00022A                     l4766:
  4184                           
  4185                           ; BSR set to: 0
  4186  00022A  0E68               	movlw	104
  4187  00022C  0100               	movlb	0	; () banked
  4188  00022E  6FC4               	movwf	??_UI& (0+255),b
  4189  000230  0EE4               	movlw	228
  4190  000232                     u4587:
  4191  000232  2EE8               	decfsz	wreg,f,c
  4192  000234  D7FE               	bra	u4587
  4193  000236  2FC4               	decfsz	??_UI& (0+255),f,b
  4194  000238  D7FC               	bra	u4587
  4195  00023A  F000               	nop	
  4196  00023C  0100               	movlb	0	; () banked
  4197  00023E  2BCA               	incf	UI@i_638& (0+255),f,b
  4198  000240  D7EF               	goto	l4762
  4199  000242                     l4770:
  4200                           
  4201                           ; BSR set to: 0
  4202  000242  0100               	movlb	0	; () banked
  4203  000244  51EB               	movf	_logstate& (0+255),w,b
  4204  000246  0100               	movlb	0	; () banked
  4205  000248  11EC               	iorwf	(_logstate+1)& (0+255),w,b
  4206  00024A  B4D8               	btfsc	status,2,c
  4207  00024C  0012               	return	
  4208                           
  4209                           ; BSR set to: 0
  4210                           ;UI.c: 106: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4211                           
  4212                           ; BSR set to: 0
  4213                           
  4214                           ; BSR set to: 0
  4215  00024E  0E00               	movlw	0
  4216  000250  0100               	movlb	0	; () banked
  4217  000252  6FCB               	movwf	UI@i_639& (0+255),b
  4218  000254                     l4776:
  4219                           
  4220                           ; BSR set to: 0
  4221  000254  0E63               	movlw	99
  4222  000256  0100               	movlb	0	; () banked
  4223  000258  65CB               	cpfsgt	UI@i_639& (0+255),b
  4224  00025A  D001               	goto	l4780
  4225  00025C  D00C               	goto	l4784
  4226  00025E                     l4780:
  4227                           
  4228                           ; BSR set to: 0
  4229  00025E  0E68               	movlw	104
  4230  000260  0100               	movlb	0	; () banked
  4231  000262  6FC4               	movwf	??_UI& (0+255),b
  4232  000264  0EE4               	movlw	228
  4233  000266                     u4597:
  4234  000266  2EE8               	decfsz	wreg,f,c
  4235  000268  D7FE               	bra	u4597
  4236  00026A  2FC4               	decfsz	??_UI& (0+255),f,b
  4237  00026C  D7FC               	bra	u4597
  4238  00026E  F000               	nop	
  4239  000270  0100               	movlb	0	; () banked
  4240  000272  2BCB               	incf	UI@i_639& (0+255),f,b
  4241  000274  D7EF               	goto	l4776
  4242  000276                     l4784:
  4243                           
  4244                           ; BSR set to: 0
  4245  000276  0100               	movlb	0	; () banked
  4246  000278  51EB               	movf	_logstate& (0+255),w,b
  4247  00027A  0100               	movlb	0	; () banked
  4248  00027C  11EC               	iorwf	(_logstate+1)& (0+255),w,b
  4249  00027E  B4D8               	btfsc	status,2,c
  4250  000280  0012               	return	
  4251                           
  4252                           ; BSR set to: 0
  4253                           ;UI.c: 108: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4254                           
  4255                           ; BSR set to: 0
  4256                           
  4257                           ; BSR set to: 0
  4258  000282  0E01               	movlw	1
  4259  000284  ECDE  F013         	call	_lcdInst
  4260  000288  0E68               	movlw	104
  4261  00028A  0100               	movlb	0	; () banked
  4262  00028C  6FC4               	movwf	??_UI& (0+255),b
  4263  00028E  0EE4               	movlw	228
  4264  000290                     u4607:
  4265  000290  2EE8               	decfsz	wreg,f,c
  4266  000292  D7FE               	bra	u4607
  4267  000294  2FC4               	decfsz	??_UI& (0+255),f,b
  4268  000296  D7FC               	bra	u4607
  4269  000298  F000               	nop	
  4270                           
  4271                           ;UI.c: 109: lcdInst(0b10000000);;
  4272  00029A  0E80               	movlw	128
  4273  00029C  ECDE  F013         	call	_lcdInst
  4274                           
  4275                           ;UI.c: 110: printf("Duration:");
  4276  0002A0  0EB4               	movlw	low STR_7
  4277  0002A2  0100               	movlb	0	; () banked
  4278  0002A4  6F8E               	movwf	printf@f& (0+255),b
  4279  0002A6  0EFF               	movlw	high STR_7
  4280  0002A8  0100               	movlb	0	; () banked
  4281  0002AA  6F8F               	movwf	(printf@f+1)& (0+255),b
  4282  0002AC  ECAA  F002         	call	_printf	;wreg free
  4283                           
  4284                           ;UI.c: 111: lcdInst(0b11000000);;
  4285  0002B0  0EC0               	movlw	192
  4286  0002B2  ECDE  F013         	call	_lcdInst
  4287                           
  4288                           ;UI.c: 112: printf("%d min(s) %d secs", 2, 42);
  4289  0002B6  0E13               	movlw	low STR_8
  4290  0002B8  0100               	movlb	0	; () banked
  4291  0002BA  6F8E               	movwf	printf@f& (0+255),b
  4292  0002BC  0EFE               	movlw	high STR_8
  4293  0002BE  0100               	movlb	0	; () banked
  4294  0002C0  6F8F               	movwf	(printf@f+1)& (0+255),b
  4295  0002C2  0E00               	movlw	0
  4296  0002C4  0100               	movlb	0	; () banked
  4297  0002C6  6F91               	movwf	(?_printf+3)& (0+255),b
  4298  0002C8  0E02               	movlw	2
  4299  0002CA  6F90               	movwf	(?_printf+2)& (0+255),b
  4300  0002CC  0E00               	movlw	0
  4301  0002CE  0100               	movlb	0	; () banked
  4302  0002D0  6F93               	movwf	(?_printf+5)& (0+255),b
  4303  0002D2  0E2A               	movlw	42
  4304  0002D4  6F92               	movwf	(?_printf+4)& (0+255),b
  4305  0002D6  ECAA  F002         	call	_printf	;wreg free
  4306                           
  4307                           ;UI.c: 114: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4308  0002DA  0E00               	movlw	0
  4309  0002DC  0100               	movlb	0	; () banked
  4310  0002DE  6FCC               	movwf	UI@i_642& (0+255),b
  4311  0002E0                     l4802:
  4312                           
  4313                           ; BSR set to: 0
  4314  0002E0  0E63               	movlw	99
  4315  0002E2  0100               	movlb	0	; () banked
  4316  0002E4  65CC               	cpfsgt	UI@i_642& (0+255),b
  4317  0002E6  D001               	goto	l4806
  4318  0002E8  D00C               	goto	l4810
  4319  0002EA                     l4806:
  4320                           
  4321                           ; BSR set to: 0
  4322  0002EA  0E68               	movlw	104
  4323  0002EC  0100               	movlb	0	; () banked
  4324  0002EE  6FC4               	movwf	??_UI& (0+255),b
  4325  0002F0  0EE4               	movlw	228
  4326  0002F2                     u4617:
  4327  0002F2  2EE8               	decfsz	wreg,f,c
  4328  0002F4  D7FE               	bra	u4617
  4329  0002F6  2FC4               	decfsz	??_UI& (0+255),f,b
  4330  0002F8  D7FC               	bra	u4617
  4331  0002FA  F000               	nop	
  4332  0002FC  0100               	movlb	0	; () banked
  4333  0002FE  2BCC               	incf	UI@i_642& (0+255),f,b
  4334  000300  D7EF               	goto	l4802
  4335  000302                     l4810:
  4336                           
  4337                           ; BSR set to: 0
  4338  000302  0100               	movlb	0	; () banked
  4339  000304  51EB               	movf	_logstate& (0+255),w,b
  4340  000306  0100               	movlb	0	; () banked
  4341  000308  11EC               	iorwf	(_logstate+1)& (0+255),w,b
  4342  00030A  B4D8               	btfsc	status,2,c
  4343  00030C  0012               	return	
  4344                           
  4345                           ; BSR set to: 0
  4346                           ;UI.c: 115: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4347                           
  4348                           ; BSR set to: 0
  4349                           
  4350                           ; BSR set to: 0
  4351  00030E  0E00               	movlw	0
  4352  000310  0100               	movlb	0	; () banked
  4353  000312  6FCD               	movwf	UI@i_643& (0+255),b
  4354  000314                     l4816:
  4355                           
  4356                           ; BSR set to: 0
  4357  000314  0E63               	movlw	99
  4358  000316  0100               	movlb	0	; () banked
  4359  000318  65CD               	cpfsgt	UI@i_643& (0+255),b
  4360  00031A  D001               	goto	l4820
  4361  00031C  D00C               	goto	l4824
  4362  00031E                     l4820:
  4363                           
  4364                           ; BSR set to: 0
  4365  00031E  0E68               	movlw	104
  4366  000320  0100               	movlb	0	; () banked
  4367  000322  6FC4               	movwf	??_UI& (0+255),b
  4368  000324  0EE4               	movlw	228
  4369  000326                     u4627:
  4370  000326  2EE8               	decfsz	wreg,f,c
  4371  000328  D7FE               	bra	u4627
  4372  00032A  2FC4               	decfsz	??_UI& (0+255),f,b
  4373  00032C  D7FC               	bra	u4627
  4374  00032E  F000               	nop	
  4375  000330  0100               	movlb	0	; () banked
  4376  000332  2BCD               	incf	UI@i_643& (0+255),f,b
  4377  000334  D7EF               	goto	l4816
  4378  000336                     l4824:
  4379                           
  4380                           ; BSR set to: 0
  4381  000336  0100               	movlb	0	; () banked
  4382  000338  51EB               	movf	_logstate& (0+255),w,b
  4383  00033A  0100               	movlb	0	; () banked
  4384  00033C  11EC               	iorwf	(_logstate+1)& (0+255),w,b
  4385  00033E  B4D8               	btfsc	status,2,c
  4386  000340  0012               	return	
  4387                           
  4388                           ; BSR set to: 0
  4389                           ;UI.c: 117: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4390                           
  4391                           ; BSR set to: 0
  4392                           
  4393                           ; BSR set to: 0
  4394  000342  0E01               	movlw	1
  4395  000344  ECDE  F013         	call	_lcdInst
  4396  000348  0E68               	movlw	104
  4397  00034A  0100               	movlb	0	; () banked
  4398  00034C  6FC4               	movwf	??_UI& (0+255),b
  4399  00034E  0EE4               	movlw	228
  4400  000350                     u4637:
  4401  000350  2EE8               	decfsz	wreg,f,c
  4402  000352  D7FE               	bra	u4637
  4403  000354  2FC4               	decfsz	??_UI& (0+255),f,b
  4404  000356  D7FC               	bra	u4637
  4405  000358  F000               	nop	
  4406                           
  4407                           ;UI.c: 118: lcdInst(0b10000000);;
  4408  00035A  0E80               	movlw	128
  4409  00035C  ECDE  F013         	call	_lcdInst
  4410                           
  4411                           ;UI.c: 119: printf(" -- Pop  can -- ");
  4412  000360  0E9C               	movlw	low STR_9
  4413  000362  0100               	movlb	0	; () banked
  4414  000364  6F8E               	movwf	printf@f& (0+255),b
  4415  000366  0EFE               	movlw	high STR_9
  4416  000368  0100               	movlb	0	; () banked
  4417  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
  4418  00036C  ECAA  F002         	call	_printf	;wreg free
  4419                           
  4420                           ;UI.c: 120: lcdInst(0b11000000);;
  4421  000370  0EC0               	movlw	192
  4422  000372  ECDE  F013         	call	_lcdInst
  4423                           
  4424                           ;UI.c: 121: printf("No tab: 9|Tab: 1");
  4425  000376  0ECF               	movlw	low STR_10
  4426  000378  0100               	movlb	0	; () banked
  4427  00037A  6F8E               	movwf	printf@f& (0+255),b
  4428  00037C  0EFE               	movlw	high STR_10
  4429  00037E  0100               	movlb	0	; () banked
  4430  000380  6F8F               	movwf	(printf@f+1)& (0+255),b
  4431  000382  ECAA  F002         	call	_printf	;wreg free
  4432                           
  4433                           ;UI.c: 123: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4434  000386  0E00               	movlw	0
  4435  000388  0100               	movlb	0	; () banked
  4436  00038A  6FCE               	movwf	UI@i_646& (0+255),b
  4437  00038C                     l4842:
  4438                           
  4439                           ; BSR set to: 0
  4440  00038C  0E63               	movlw	99
  4441  00038E  0100               	movlb	0	; () banked
  4442  000390  65CE               	cpfsgt	UI@i_646& (0+255),b
  4443  000392  D001               	goto	l4846
  4444  000394  D00C               	goto	l4850
  4445  000396                     l4846:
  4446                           
  4447                           ; BSR set to: 0
  4448  000396  0E68               	movlw	104
  4449  000398  0100               	movlb	0	; () banked
  4450  00039A  6FC4               	movwf	??_UI& (0+255),b
  4451  00039C  0EE4               	movlw	228
  4452  00039E                     u4647:
  4453  00039E  2EE8               	decfsz	wreg,f,c
  4454  0003A0  D7FE               	bra	u4647
  4455  0003A2  2FC4               	decfsz	??_UI& (0+255),f,b
  4456  0003A4  D7FC               	bra	u4647
  4457  0003A6  F000               	nop	
  4458  0003A8  0100               	movlb	0	; () banked
  4459  0003AA  2BCE               	incf	UI@i_646& (0+255),f,b
  4460  0003AC  D7EF               	goto	l4842
  4461  0003AE                     l4850:
  4462                           
  4463                           ; BSR set to: 0
  4464  0003AE  0100               	movlb	0	; () banked
  4465  0003B0  51EB               	movf	_logstate& (0+255),w,b
  4466  0003B2  0100               	movlb	0	; () banked
  4467  0003B4  11EC               	iorwf	(_logstate+1)& (0+255),w,b
  4468  0003B6  B4D8               	btfsc	status,2,c
  4469  0003B8  0012               	return	
  4470                           
  4471                           ; BSR set to: 0
  4472                           ;UI.c: 124: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4473                           
  4474                           ; BSR set to: 0
  4475                           
  4476                           ; BSR set to: 0
  4477  0003BA  0E00               	movlw	0
  4478  0003BC  0100               	movlb	0	; () banked
  4479  0003BE  6FCF               	movwf	UI@i_647& (0+255),b
  4480  0003C0                     l4856:
  4481                           
  4482                           ; BSR set to: 0
  4483  0003C0  0E63               	movlw	99
  4484  0003C2  0100               	movlb	0	; () banked
  4485  0003C4  65CF               	cpfsgt	UI@i_647& (0+255),b
  4486  0003C6  D001               	goto	l4860
  4487  0003C8  D00C               	goto	l4864
  4488  0003CA                     l4860:
  4489                           
  4490                           ; BSR set to: 0
  4491  0003CA  0E68               	movlw	104
  4492  0003CC  0100               	movlb	0	; () banked
  4493  0003CE  6FC4               	movwf	??_UI& (0+255),b
  4494  0003D0  0EE4               	movlw	228
  4495  0003D2                     u4657:
  4496  0003D2  2EE8               	decfsz	wreg,f,c
  4497  0003D4  D7FE               	bra	u4657
  4498  0003D6  2FC4               	decfsz	??_UI& (0+255),f,b
  4499  0003D8  D7FC               	bra	u4657
  4500  0003DA  F000               	nop	
  4501  0003DC  0100               	movlb	0	; () banked
  4502  0003DE  2BCF               	incf	UI@i_647& (0+255),f,b
  4503  0003E0  D7EF               	goto	l4856
  4504  0003E2                     l4864:
  4505                           
  4506                           ; BSR set to: 0
  4507  0003E2  0100               	movlb	0	; () banked
  4508  0003E4  51EB               	movf	_logstate& (0+255),w,b
  4509  0003E6  0100               	movlb	0	; () banked
  4510  0003E8  11EC               	iorwf	(_logstate+1)& (0+255),w,b
  4511  0003EA  B4D8               	btfsc	status,2,c
  4512  0003EC  0012               	return	
  4513                           
  4514                           ; BSR set to: 0
  4515                           ;UI.c: 126: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4516                           
  4517                           ; BSR set to: 0
  4518                           
  4519                           ; BSR set to: 0
  4520  0003EE  0E01               	movlw	1
  4521  0003F0  ECDE  F013         	call	_lcdInst
  4522  0003F4  0E68               	movlw	104
  4523  0003F6  0100               	movlb	0	; () banked
  4524  0003F8  6FC4               	movwf	??_UI& (0+255),b
  4525  0003FA  0EE4               	movlw	228
  4526  0003FC                     u4667:
  4527  0003FC  2EE8               	decfsz	wreg,f,c
  4528  0003FE  D7FE               	bra	u4667
  4529  000400  2FC4               	decfsz	??_UI& (0+255),f,b
  4530  000402  D7FC               	bra	u4667
  4531  000404  F000               	nop	
  4532                           
  4533                           ;UI.c: 127: lcdInst(0b10000000);;
  4534  000406  0E80               	movlw	128
  4535  000408  ECDE  F013         	call	_lcdInst
  4536                           
  4537                           ;UI.c: 128: printf(" -- Soup can -- ");
  4538  00040C  0EAD               	movlw	low STR_11
  4539  00040E  0100               	movlb	0	; () banked
  4540  000410  6F8E               	movwf	printf@f& (0+255),b
  4541  000412  0EFE               	movlw	high STR_11
  4542  000414  0100               	movlb	0	; () banked
  4543  000416  6F8F               	movwf	(printf@f+1)& (0+255),b
  4544  000418  ECAA  F002         	call	_printf	;wreg free
  4545                           
  4546                           ;UI.c: 129: lcdInst(0b11000000);;
  4547  00041C  0EC0               	movlw	192
  4548  00041E  ECDE  F013         	call	_lcdInst
  4549                           
  4550                           ;UI.c: 130: printf("No lbl: 1|lbl: 1");
  4551  000422  0EE0               	movlw	low STR_12
  4552  000424  0100               	movlb	0	; () banked
  4553  000426  6F8E               	movwf	printf@f& (0+255),b
  4554  000428  0EFE               	movlw	high STR_12
  4555  00042A  0100               	movlb	0	; () banked
  4556  00042C  6F8F               	movwf	(printf@f+1)& (0+255),b
  4557  00042E  ECAA  F002         	call	_printf	;wreg free
  4558                           
  4559                           ;UI.c: 132: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4560  000432  0E00               	movlw	0
  4561  000434  0100               	movlb	0	; () banked
  4562  000436  6FD0               	movwf	UI@i_650& (0+255),b
  4563  000438                     l4882:
  4564                           
  4565                           ; BSR set to: 0
  4566  000438  0E63               	movlw	99
  4567  00043A  0100               	movlb	0	; () banked
  4568  00043C  65D0               	cpfsgt	UI@i_650& (0+255),b
  4569  00043E  D001               	goto	l4886
  4570  000440  D00C               	goto	l4890
  4571  000442                     l4886:
  4572                           
  4573                           ; BSR set to: 0
  4574  000442  0E68               	movlw	104
  4575  000444  0100               	movlb	0	; () banked
  4576  000446  6FC4               	movwf	??_UI& (0+255),b
  4577  000448  0EE4               	movlw	228
  4578  00044A                     u4677:
  4579  00044A  2EE8               	decfsz	wreg,f,c
  4580  00044C  D7FE               	bra	u4677
  4581  00044E  2FC4               	decfsz	??_UI& (0+255),f,b
  4582  000450  D7FC               	bra	u4677
  4583  000452  F000               	nop	
  4584  000454  0100               	movlb	0	; () banked
  4585  000456  2BD0               	incf	UI@i_650& (0+255),f,b
  4586  000458  D7EF               	goto	l4882
  4587  00045A                     l4890:
  4588                           
  4589                           ; BSR set to: 0
  4590  00045A  0100               	movlb	0	; () banked
  4591  00045C  51EB               	movf	_logstate& (0+255),w,b
  4592  00045E  0100               	movlb	0	; () banked
  4593  000460  11EC               	iorwf	(_logstate+1)& (0+255),w,b
  4594  000462  B4D8               	btfsc	status,2,c
  4595  000464  0012               	return	
  4596                           
  4597                           ; BSR set to: 0
  4598                           ;UI.c: 133: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4599                           
  4600                           ; BSR set to: 0
  4601                           
  4602                           ; BSR set to: 0
  4603  000466  0E00               	movlw	0
  4604  000468  0100               	movlb	0	; () banked
  4605  00046A  6FD1               	movwf	UI@i_651& (0+255),b
  4606  00046C                     l4896:
  4607                           
  4608                           ; BSR set to: 0
  4609  00046C  0E63               	movlw	99
  4610  00046E  0100               	movlb	0	; () banked
  4611  000470  65D1               	cpfsgt	UI@i_651& (0+255),b
  4612  000472  D001               	goto	l4900
  4613  000474  D00C               	goto	l4904
  4614  000476                     l4900:
  4615                           
  4616                           ; BSR set to: 0
  4617  000476  0E68               	movlw	104
  4618  000478  0100               	movlb	0	; () banked
  4619  00047A  6FC4               	movwf	??_UI& (0+255),b
  4620  00047C  0EE4               	movlw	228
  4621  00047E                     u4687:
  4622  00047E  2EE8               	decfsz	wreg,f,c
  4623  000480  D7FE               	bra	u4687
  4624  000482  2FC4               	decfsz	??_UI& (0+255),f,b
  4625  000484  D7FC               	bra	u4687
  4626  000486  F000               	nop	
  4627  000488  0100               	movlb	0	; () banked
  4628  00048A  2BD1               	incf	UI@i_651& (0+255),f,b
  4629  00048C  D7EF               	goto	l4896
  4630  00048E                     l4904:
  4631                           
  4632                           ; BSR set to: 0
  4633  00048E  0100               	movlb	0	; () banked
  4634  000490  51EB               	movf	_logstate& (0+255),w,b
  4635  000492  0100               	movlb	0	; () banked
  4636  000494  11EC               	iorwf	(_logstate+1)& (0+255),w,b
  4637  000496  B4D8               	btfsc	status,2,c
  4638  000498  0012               	return	
  4639                           
  4640                           ; BSR set to: 0
  4641                           ;UI.c: 135: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4642                           
  4643                           ; BSR set to: 0
  4644                           
  4645                           ; BSR set to: 0
  4646  00049A  0E01               	movlw	1
  4647  00049C  ECDE  F013         	call	_lcdInst
  4648  0004A0  0E68               	movlw	104
  4649  0004A2  0100               	movlb	0	; () banked
  4650  0004A4  6FC4               	movwf	??_UI& (0+255),b
  4651  0004A6  0EE4               	movlw	228
  4652  0004A8                     u4697:
  4653  0004A8  2EE8               	decfsz	wreg,f,c
  4654  0004AA  D7FE               	bra	u4697
  4655  0004AC  2FC4               	decfsz	??_UI& (0+255),f,b
  4656  0004AE  D7FC               	bra	u4697
  4657  0004B0  F000               	nop	
  4658                           
  4659                           ;UI.c: 136: lcdInst(0b10000000);;
  4660  0004B2  0E80               	movlw	128
  4661  0004B4  ECDE  F013         	call	_lcdInst
  4662                           
  4663                           ;UI.c: 137: printf("-- Total cans --");
  4664  0004B8  0EBE               	movlw	low STR_13
  4665  0004BA  0100               	movlb	0	; () banked
  4666  0004BC  6F8E               	movwf	printf@f& (0+255),b
  4667  0004BE  0EFE               	movlw	high STR_13
  4668  0004C0  0100               	movlb	0	; () banked
  4669  0004C2  6F8F               	movwf	(printf@f+1)& (0+255),b
  4670  0004C4  ECAA  F002         	call	_printf	;wreg free
  4671                           
  4672                           ;UI.c: 138: lcdInst(0b11000000);;
  4673  0004C8  0EC0               	movlw	192
  4674  0004CA  ECDE  F013         	call	_lcdInst
  4675                           
  4676                           ;UI.c: 139: printf("12");
  4677  0004CE  0EFC               	movlw	low STR_14
  4678  0004D0  0100               	movlb	0	; () banked
  4679  0004D2  6F8E               	movwf	printf@f& (0+255),b
  4680  0004D4  0EFF               	movlw	high STR_14
  4681  0004D6  0100               	movlb	0	; () banked
  4682  0004D8  6F8F               	movwf	(printf@f+1)& (0+255),b
  4683  0004DA  ECAA  F002         	call	_printf	;wreg free
  4684                           
  4685                           ;UI.c: 141: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4686  0004DE  0E00               	movlw	0
  4687  0004E0  0100               	movlb	0	; () banked
  4688  0004E2  6FD2               	movwf	UI@i_654& (0+255),b
  4689  0004E4                     l4922:
  4690                           
  4691                           ; BSR set to: 0
  4692  0004E4  0E63               	movlw	99
  4693  0004E6  0100               	movlb	0	; () banked
  4694  0004E8  65D2               	cpfsgt	UI@i_654& (0+255),b
  4695  0004EA  D001               	goto	l4926
  4696  0004EC  D00C               	goto	l4930
  4697  0004EE                     l4926:
  4698                           
  4699                           ; BSR set to: 0
  4700  0004EE  0E68               	movlw	104
  4701  0004F0  0100               	movlb	0	; () banked
  4702  0004F2  6FC4               	movwf	??_UI& (0+255),b
  4703  0004F4  0EE4               	movlw	228
  4704  0004F6                     u4707:
  4705  0004F6  2EE8               	decfsz	wreg,f,c
  4706  0004F8  D7FE               	bra	u4707
  4707  0004FA  2FC4               	decfsz	??_UI& (0+255),f,b
  4708  0004FC  D7FC               	bra	u4707
  4709  0004FE  F000               	nop	
  4710  000500  0100               	movlb	0	; () banked
  4711  000502  2BD2               	incf	UI@i_654& (0+255),f,b
  4712  000504  D7EF               	goto	l4922
  4713  000506                     l4930:
  4714                           
  4715                           ; BSR set to: 0
  4716  000506  0100               	movlb	0	; () banked
  4717  000508  51EB               	movf	_logstate& (0+255),w,b
  4718  00050A  0100               	movlb	0	; () banked
  4719  00050C  11EC               	iorwf	(_logstate+1)& (0+255),w,b
  4720  00050E  B4D8               	btfsc	status,2,c
  4721  000510  0012               	return	
  4722                           
  4723                           ; BSR set to: 0
  4724                           ;UI.c: 142: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4725                           
  4726                           ; BSR set to: 0
  4727                           
  4728                           ; BSR set to: 0
  4729  000512  0E00               	movlw	0
  4730  000514  0100               	movlb	0	; () banked
  4731  000516  6FD3               	movwf	UI@i_655& (0+255),b
  4732  000518                     l4936:
  4733                           
  4734                           ; BSR set to: 0
  4735  000518  0E63               	movlw	99
  4736  00051A  0100               	movlb	0	; () banked
  4737  00051C  65D3               	cpfsgt	UI@i_655& (0+255),b
  4738  00051E  D001               	goto	l4940
  4739  000520  D00C               	goto	l4944
  4740  000522                     l4940:
  4741                           
  4742                           ; BSR set to: 0
  4743  000522  0E68               	movlw	104
  4744  000524  0100               	movlb	0	; () banked
  4745  000526  6FC4               	movwf	??_UI& (0+255),b
  4746  000528  0EE4               	movlw	228
  4747  00052A                     u4717:
  4748  00052A  2EE8               	decfsz	wreg,f,c
  4749  00052C  D7FE               	bra	u4717
  4750  00052E  2FC4               	decfsz	??_UI& (0+255),f,b
  4751  000530  D7FC               	bra	u4717
  4752  000532  F000               	nop	
  4753  000534  0100               	movlb	0	; () banked
  4754  000536  2BD3               	incf	UI@i_655& (0+255),f,b
  4755  000538  D7EF               	goto	l4936
  4756  00053A                     l4944:
  4757                           
  4758                           ; BSR set to: 0
  4759  00053A  0100               	movlb	0	; () banked
  4760  00053C  51EB               	movf	_logstate& (0+255),w,b
  4761  00053E  0100               	movlb	0	; () banked
  4762  000540  11EC               	iorwf	(_logstate+1)& (0+255),w,b
  4763  000542  B4D8               	btfsc	status,2,c
  4764  000544  0012               	return	
  4765  000546                     l4948:
  4766  000546  0100               	movlb	0	; () banked
  4767  000548  51EB               	movf	_logstate& (0+255),w,b
  4768  00054A  0100               	movlb	0	; () banked
  4769  00054C  11EC               	iorwf	(_logstate+1)& (0+255),w,b
  4770  00054E  B4D8               	btfsc	status,2,c
  4771  000550  0012               	return	
  4772  000552  D5E7               	goto	l4708
  4773  000554                     __end_of_UI:
  4774                           	opt stack 0
  4775                           tblptru	equ	0xFF8
  4776                           tblptrh	equ	0xFF7
  4777                           tblptrl	equ	0xFF6
  4778                           tablat	equ	0xFF5
  4779                           prodh	equ	0xFF4
  4780                           prodl	equ	0xFF3
  4781                           intcon	equ	0xFF2
  4782                           intcon3	equ	0xFF0
  4783                           postinc0	equ	0xFEE
  4784                           wreg	equ	0xFE8
  4785                           postdec1	equ	0xFE5
  4786                           fsr1l	equ	0xFE1
  4787                           indf2	equ	0xFDF
  4788                           postinc2	equ	0xFDE
  4789                           postdec2	equ	0xFDD
  4790                           fsr2h	equ	0xFDA
  4791                           fsr2l	equ	0xFD9
  4792                           status	equ	0xFD8
  4793                           
  4794 ;; *************** function _printRTC *****************
  4795 ;; Defined at:
  4796 ;;		line 61 in file "RTC.c"
  4797 ;; Parameters:    Size  Location     Type
  4798 ;;		None
  4799 ;; Auto vars:     Size  Location     Type
  4800 ;;  i               2   66[BANK0 ] int 
  4801 ;;  INT_time       14   46[BANK0 ] int [7]
  4802 ;;  month           4   62[BANK0 ] unsigned char [4]
  4803 ;;  RTC_month       2   60[BANK0 ] int 
  4804 ;; Return value:  Size  Location     Type
  4805 ;;                  1    wreg      void 
  4806 ;; Registers used:
  4807 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4808 ;; Tracked objects:
  4809 ;;		On entry : 0/0
  4810 ;;		On exit  : 0/0
  4811 ;;		Unchanged: 0/0
  4812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4814 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4815 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4816 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4817 ;;Total ram usage:       25 bytes
  4818 ;; Hardware stack levels used:    1
  4819 ;; Hardware stack levels required when called:   10
  4820 ;; This function calls:
  4821 ;;		_getRTC
  4822 ;;		_lcdInst
  4823 ;;		_printf
  4824 ;;		_strcpy
  4825 ;; This function is called by:
  4826 ;;		_UI
  4827 ;;		_change_state_to_menu_start
  4828 ;; This function uses a non-reentrant model
  4829 ;;
  4830                           
  4831                           	psect	text20
  4832  000CA4                     __ptext20:
  4833                           	opt stack 0
  4834  000CA4                     _printRTC:
  4835                           	opt stack 18
  4836                           
  4837                           ;RTC.c: 62: getRTC();
  4838                           
  4839                           ; BSR set to: 0
  4840                           ;incstack = 0
  4841  000CA4  EC34  F00F         	call	_getRTC	;wreg free
  4842                           
  4843                           ;RTC.c: 63: char month[] = "MMM";
  4844  000CA8  C0F0  F0BE         	movff	printRTC@F3177,printRTC@month
  4845  000CAC  C0F1  F0BF         	movff	printRTC@F3177+1,printRTC@month+1
  4846  000CB0  C0F2  F0C0         	movff	printRTC@F3177+2,printRTC@month+2
  4847  000CB4  C0F3  F0C1         	movff	printRTC@F3177+3,printRTC@month+3
  4848                           
  4849                           ;RTC.c: 64: int INT_time[7];
  4850                           ;RTC.c: 65: for(int i = 0; i < 7; i++){
  4851  000CB8  0E00               	movlw	0
  4852  000CBA  0100               	movlb	0	; () banked
  4853  000CBC  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  4854  000CBE  0E00               	movlw	0
  4855  000CC0  6FC2               	movwf	printRTC@i& (0+255),b
  4856                           
  4857                           ; BSR set to: 0
  4858  000CC2  0100               	movlb	0	; () banked
  4859  000CC4  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  4860  000CC6  D008               	goto	l4104
  4861  000CC8  0100               	movlb	0	; () banked
  4862  000CCA  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  4863  000CCC  E146               	bnz	l816
  4864  000CCE  0E07               	movlw	7
  4865  000CD0  0100               	movlb	0	; () banked
  4866  000CD2  5DC2               	subwf	printRTC@i& (0+255),w,b
  4867  000CD4  B0D8               	btfsc	status,0,c
  4868  000CD6  D041               	goto	l816
  4869  000CD8                     l4104:
  4870                           
  4871                           ; BSR set to: 0
  4872                           ;RTC.c: 66: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4873  000CD8  0ED4               	movlw	low _time
  4874  000CDA  0100               	movlb	0	; () banked
  4875  000CDC  25C2               	addwf	printRTC@i& (0+255),w,b
  4876  000CDE  6ED9               	movwf	fsr2l,c
  4877  000CE0  0E00               	movlw	high _time
  4878  000CE2  0100               	movlb	0	; () banked
  4879  000CE4  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  4880  000CE6  6EDA               	movwf	fsr2h,c
  4881  000CE8  50DF               	movf	indf2,w,c
  4882  000CEA  0100               	movlb	0	; () banked
  4883  000CEC  6FAB               	movwf	??_printRTC& (0+255),b
  4884  000CEE  0100               	movlb	0	; () banked
  4885  000CF0  3BAB               	swapf	??_printRTC& (0+255),f,b
  4886  000CF2  0E0F               	movlw	15
  4887  000CF4  17AB               	andwf	??_printRTC& (0+255),f,b
  4888  000CF6  0E0F               	movlw	15
  4889  000CF8  0100               	movlb	0	; () banked
  4890  000CFA  17AB               	andwf	??_printRTC& (0+255),f,b
  4891  000CFC  0100               	movlb	0	; () banked
  4892  000CFE  51AB               	movf	??_printRTC& (0+255),w,b
  4893  000D00  0D0A               	mullw	10
  4894  000D02  0ED4               	movlw	low _time
  4895  000D04  0100               	movlb	0	; () banked
  4896  000D06  25C2               	addwf	printRTC@i& (0+255),w,b
  4897  000D08  6ED9               	movwf	fsr2l,c
  4898  000D0A  0E00               	movlw	high _time
  4899  000D0C  0100               	movlb	0	; () banked
  4900  000D0E  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  4901  000D10  6EDA               	movwf	fsr2h,c
  4902  000D12  50DF               	movf	indf2,w,c
  4903  000D14  0B0F               	andlw	15
  4904  000D16  0100               	movlb	0	; () banked
  4905  000D18  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  4906  000D1A  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  4907  000D1C  50F3               	movf	prodl,w,c
  4908  000D1E  0100               	movlb	0	; () banked
  4909  000D20  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  4910  000D22  50F4               	movf	prodh,w,c
  4911  000D24  0100               	movlb	0	; () banked
  4912  000D26  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  4913  000D28  90D8               	bcf	status,0,c
  4914  000D2A  0100               	movlb	0	; () banked
  4915  000D2C  35C2               	rlcf	printRTC@i& (0+255),w,b
  4916  000D2E  6ED9               	movwf	fsr2l,c
  4917  000D30  0100               	movlb	0	; () banked
  4918  000D32  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  4919  000D34  6EDA               	movwf	fsr2h,c
  4920  000D36  0EAE               	movlw	low printRTC@INT_time
  4921  000D38  26D9               	addwf	fsr2l,f,c
  4922  000D3A  0E00               	movlw	high printRTC@INT_time
  4923  000D3C  22DA               	addwfc	fsr2h,f,c
  4924  000D3E  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  4925  000D42  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  4926                           
  4927                           ; BSR set to: 0
  4928  000D46  0100               	movlb	0	; () banked
  4929  000D48  4BC2               	infsnz	printRTC@i& (0+255),f,b
  4930  000D4A  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  4931                           
  4932                           ; BSR set to: 0
  4933  000D4C  0100               	movlb	0	; () banked
  4934  000D4E  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  4935  000D50  D7C3               	goto	l4104
  4936  000D52  0100               	movlb	0	; () banked
  4937  000D54  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  4938  000D56  E101               	bnz	u3140
  4939  000D58  D7BA               	goto	L1
  4940  000D5A                     u3140:
  4941  000D5A                     l816:
  4942                           
  4943                           ; BSR set to: 0
  4944                           ;RTC.c: 67: }
  4945                           ;RTC.c: 68: int RTC_month = INT_time[5];
  4946  000D5A  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  4947  000D5E  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  4948                           
  4949                           ;RTC.c: 69: switch(RTC_month){
  4950  000D62  D0B4               	goto	l4136
  4951  000D64                     l4110:
  4952                           
  4953                           ; BSR set to: 0
  4954                           ;RTC.c: 71: strcpy(month, "Jan");
  4955  000D64  0EBE               	movlw	low printRTC@month
  4956  000D66  0100               	movlb	0	; () banked
  4957  000D68  6F80               	movwf	strcpy@to& (0+255),b
  4958  000D6A  0E00               	movlw	high printRTC@month
  4959  000D6C  0100               	movlb	0	; () banked
  4960  000D6E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  4961  000D70  0EDC               	movlw	low STR_36
  4962  000D72  0100               	movlb	0	; () banked
  4963  000D74  6F82               	movwf	strcpy@from& (0+255),b
  4964  000D76  0EFF               	movlw	high STR_36
  4965  000D78  0100               	movlb	0	; () banked
  4966  000D7A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  4967  000D7C  ECA0  F011         	call	_strcpy	;wreg free
  4968                           
  4969                           ;RTC.c: 72: break;
  4970  000D80  D0D4               	goto	l4138
  4971  000D82                     l4112:
  4972                           
  4973                           ;RTC.c: 74: strcpy(month, "Feb");
  4974  000D82  0EBE               	movlw	low printRTC@month
  4975  000D84  0100               	movlb	0	; () banked
  4976  000D86  6F80               	movwf	strcpy@to& (0+255),b
  4977  000D88  0E00               	movlw	high printRTC@month
  4978  000D8A  0100               	movlb	0	; () banked
  4979  000D8C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  4980  000D8E  0ECC               	movlw	low STR_37
  4981  000D90  0100               	movlb	0	; () banked
  4982  000D92  6F82               	movwf	strcpy@from& (0+255),b
  4983  000D94  0EFF               	movlw	high STR_37
  4984  000D96  0100               	movlb	0	; () banked
  4985  000D98  6F83               	movwf	(strcpy@from+1)& (0+255),b
  4986  000D9A  ECA0  F011         	call	_strcpy	;wreg free
  4987                           
  4988                           ;RTC.c: 75: break;
  4989  000D9E  D0C5               	goto	l4138
  4990  000DA0                     l4114:
  4991                           
  4992                           ;RTC.c: 77: strcpy(month, "Mar");
  4993  000DA0  0EBE               	movlw	low printRTC@month
  4994  000DA2  0100               	movlb	0	; () banked
  4995  000DA4  6F80               	movwf	strcpy@to& (0+255),b
  4996  000DA6  0E00               	movlw	high printRTC@month
  4997  000DA8  0100               	movlb	0	; () banked
  4998  000DAA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  4999  000DAC  0EE8               	movlw	low STR_38
  5000  000DAE  0100               	movlb	0	; () banked
  5001  000DB0  6F82               	movwf	strcpy@from& (0+255),b
  5002  000DB2  0EFF               	movlw	high STR_38
  5003  000DB4  0100               	movlb	0	; () banked
  5004  000DB6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5005  000DB8  ECA0  F011         	call	_strcpy	;wreg free
  5006                           
  5007                           ;RTC.c: 78: break;
  5008  000DBC  D0B6               	goto	l4138
  5009  000DBE                     l4116:
  5010                           
  5011                           ;RTC.c: 80: strcpy(month, "Apr");
  5012  000DBE  0EBE               	movlw	low printRTC@month
  5013  000DC0  0100               	movlb	0	; () banked
  5014  000DC2  6F80               	movwf	strcpy@to& (0+255),b
  5015  000DC4  0E00               	movlw	high printRTC@month
  5016  000DC6  0100               	movlb	0	; () banked
  5017  000DC8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5018  000DCA  0EEC               	movlw	low STR_39
  5019  000DCC  0100               	movlb	0	; () banked
  5020  000DCE  6F82               	movwf	strcpy@from& (0+255),b
  5021  000DD0  0EFF               	movlw	high STR_39
  5022  000DD2  0100               	movlb	0	; () banked
  5023  000DD4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5024  000DD6  ECA0  F011         	call	_strcpy	;wreg free
  5025                           
  5026                           ;RTC.c: 81: break;
  5027  000DDA  D0A7               	goto	l4138
  5028  000DDC                     l4118:
  5029                           
  5030                           ;RTC.c: 83: strcpy(month, "May");
  5031  000DDC  0EBE               	movlw	low printRTC@month
  5032  000DDE  0100               	movlb	0	; () banked
  5033  000DE0  6F80               	movwf	strcpy@to& (0+255),b
  5034  000DE2  0E00               	movlw	high printRTC@month
  5035  000DE4  0100               	movlb	0	; () banked
  5036  000DE6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5037  000DE8  0EF8               	movlw	low STR_40
  5038  000DEA  0100               	movlb	0	; () banked
  5039  000DEC  6F82               	movwf	strcpy@from& (0+255),b
  5040  000DEE  0EFF               	movlw	high STR_40
  5041  000DF0  0100               	movlb	0	; () banked
  5042  000DF2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5043  000DF4  ECA0  F011         	call	_strcpy	;wreg free
  5044                           
  5045                           ;RTC.c: 84: break;
  5046  000DF8  D098               	goto	l4138
  5047  000DFA                     l4120:
  5048                           
  5049                           ;RTC.c: 86: strcpy(month, "Jun");
  5050  000DFA  0EBE               	movlw	low printRTC@month
  5051  000DFC  0100               	movlb	0	; () banked
  5052  000DFE  6F80               	movwf	strcpy@to& (0+255),b
  5053  000E00  0E00               	movlw	high printRTC@month
  5054  000E02  0100               	movlb	0	; () banked
  5055  000E04  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5056  000E06  0EE0               	movlw	low STR_41
  5057  000E08  0100               	movlb	0	; () banked
  5058  000E0A  6F82               	movwf	strcpy@from& (0+255),b
  5059  000E0C  0EFF               	movlw	high STR_41
  5060  000E0E  0100               	movlb	0	; () banked
  5061  000E10  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5062  000E12  ECA0  F011         	call	_strcpy	;wreg free
  5063                           
  5064                           ;RTC.c: 87: break;
  5065  000E16  D089               	goto	l4138
  5066  000E18                     l4122:
  5067                           
  5068                           ;RTC.c: 89: strcpy(month, "Jul");
  5069  000E18  0EBE               	movlw	low printRTC@month
  5070  000E1A  0100               	movlb	0	; () banked
  5071  000E1C  6F80               	movwf	strcpy@to& (0+255),b
  5072  000E1E  0E00               	movlw	high printRTC@month
  5073  000E20  0100               	movlb	0	; () banked
  5074  000E22  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5075  000E24  0ED8               	movlw	low STR_42
  5076  000E26  0100               	movlb	0	; () banked
  5077  000E28  6F82               	movwf	strcpy@from& (0+255),b
  5078  000E2A  0EFF               	movlw	high STR_42
  5079  000E2C  0100               	movlb	0	; () banked
  5080  000E2E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5081  000E30  ECA0  F011         	call	_strcpy	;wreg free
  5082                           
  5083                           ;RTC.c: 90: break;
  5084  000E34  D07A               	goto	l4138
  5085  000E36                     l4124:
  5086                           
  5087                           ;RTC.c: 92: strcpy(month, "Aug");
  5088  000E36  0EBE               	movlw	low printRTC@month
  5089  000E38  0100               	movlb	0	; () banked
  5090  000E3A  6F80               	movwf	strcpy@to& (0+255),b
  5091  000E3C  0E00               	movlw	high printRTC@month
  5092  000E3E  0100               	movlb	0	; () banked
  5093  000E40  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5094  000E42  0ED4               	movlw	low STR_43
  5095  000E44  0100               	movlb	0	; () banked
  5096  000E46  6F82               	movwf	strcpy@from& (0+255),b
  5097  000E48  0EFF               	movlw	high STR_43
  5098  000E4A  0100               	movlb	0	; () banked
  5099  000E4C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5100  000E4E  ECA0  F011         	call	_strcpy	;wreg free
  5101                           
  5102                           ;RTC.c: 93: break;
  5103  000E52  D06B               	goto	l4138
  5104  000E54                     l4126:
  5105                           
  5106                           ;RTC.c: 95: strcpy(month, "Sep");
  5107  000E54  0EBE               	movlw	low printRTC@month
  5108  000E56  0100               	movlb	0	; () banked
  5109  000E58  6F80               	movwf	strcpy@to& (0+255),b
  5110  000E5A  0E00               	movlw	high printRTC@month
  5111  000E5C  0100               	movlb	0	; () banked
  5112  000E5E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5113  000E60  0EE4               	movlw	low STR_44
  5114  000E62  0100               	movlb	0	; () banked
  5115  000E64  6F82               	movwf	strcpy@from& (0+255),b
  5116  000E66  0EFF               	movlw	high STR_44
  5117  000E68  0100               	movlb	0	; () banked
  5118  000E6A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5119  000E6C  ECA0  F011         	call	_strcpy	;wreg free
  5120                           
  5121                           ;RTC.c: 96: break;
  5122  000E70  D05C               	goto	l4138
  5123  000E72                     l4128:
  5124                           
  5125                           ;RTC.c: 98: strcpy(month, "Oct");
  5126  000E72  0EBE               	movlw	low printRTC@month
  5127  000E74  0100               	movlb	0	; () banked
  5128  000E76  6F80               	movwf	strcpy@to& (0+255),b
  5129  000E78  0E00               	movlw	high printRTC@month
  5130  000E7A  0100               	movlb	0	; () banked
  5131  000E7C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5132  000E7E  0EF0               	movlw	low STR_45
  5133  000E80  0100               	movlb	0	; () banked
  5134  000E82  6F82               	movwf	strcpy@from& (0+255),b
  5135  000E84  0EFF               	movlw	high STR_45
  5136  000E86  0100               	movlb	0	; () banked
  5137  000E88  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5138  000E8A  ECA0  F011         	call	_strcpy	;wreg free
  5139                           
  5140                           ;RTC.c: 99: break;
  5141  000E8E  D04D               	goto	l4138
  5142  000E90                     l4130:
  5143                           
  5144                           ;RTC.c: 101: strcpy(month, "Nov");
  5145  000E90  0EBE               	movlw	low printRTC@month
  5146  000E92  0100               	movlb	0	; () banked
  5147  000E94  6F80               	movwf	strcpy@to& (0+255),b
  5148  000E96  0E00               	movlw	high printRTC@month
  5149  000E98  0100               	movlb	0	; () banked
  5150  000E9A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5151  000E9C  0EF4               	movlw	low STR_46
  5152  000E9E  0100               	movlb	0	; () banked
  5153  000EA0  6F82               	movwf	strcpy@from& (0+255),b
  5154  000EA2  0EFF               	movlw	high STR_46
  5155  000EA4  0100               	movlb	0	; () banked
  5156  000EA6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5157  000EA8  ECA0  F011         	call	_strcpy	;wreg free
  5158                           
  5159                           ;RTC.c: 102: break;
  5160  000EAC  D03E               	goto	l4138
  5161  000EAE                     l4132:
  5162                           
  5163                           ;RTC.c: 104: strcpy(month, "Dec");
  5164  000EAE  0EBE               	movlw	low printRTC@month
  5165  000EB0  0100               	movlb	0	; () banked
  5166  000EB2  6F80               	movwf	strcpy@to& (0+255),b
  5167  000EB4  0E00               	movlw	high printRTC@month
  5168  000EB6  0100               	movlb	0	; () banked
  5169  000EB8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5170  000EBA  0ED0               	movlw	low STR_47
  5171  000EBC  0100               	movlb	0	; () banked
  5172  000EBE  6F82               	movwf	strcpy@from& (0+255),b
  5173  000EC0  0EFF               	movlw	high STR_47
  5174  000EC2  0100               	movlb	0	; () banked
  5175  000EC4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5176  000EC6  ECA0  F011         	call	_strcpy	;wreg free
  5177                           
  5178                           ;RTC.c: 106: }
  5179                           
  5180                           ;RTC.c: 105: break;
  5181  000ECA  D02F               	goto	l4138
  5182  000ECC                     l4136:
  5183  000ECC  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  5184  000ED0  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  5185                           
  5186                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5187                           ; Switch size 1, requested type "space"
  5188                           ; Number of cases is 1, Range of values is 0 to 0
  5189                           ; switch strategies available:
  5190                           ; Name         Instructions Cycles
  5191                           ; simple_byte            4     3 (average)
  5192                           ;	Chosen strategy is simple_byte
  5193  000ED4  0100               	movlb	0	; () banked
  5194  000ED6  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  5195  000ED8  0A00               	xorlw	0	; case 0
  5196  000EDA  A4D8               	btfss	status,2,c
  5197  000EDC  D026               	goto	l4138
  5198                           
  5199                           ; BSR set to: 0
  5200                           ; Switch size 1, requested type "space"
  5201                           ; Number of cases is 12, Range of values is 1 to 12
  5202                           ; switch strategies available:
  5203                           ; Name         Instructions Cycles
  5204                           ; simple_byte           37    19 (average)
  5205                           ;	Chosen strategy is simple_byte
  5206  000EDE  0100               	movlb	0	; () banked
  5207  000EE0  51AB               	movf	??_printRTC& (0+255),w,b
  5208  000EE2  0A01               	xorlw	1	; case 1
  5209  000EE4  B4D8               	btfsc	status,2,c
  5210  000EE6  D73E               	goto	l4110
  5211  000EE8  0A03               	xorlw	3	; case 2
  5212  000EEA  B4D8               	btfsc	status,2,c
  5213  000EEC  D74A               	goto	l4112
  5214  000EEE  0A01               	xorlw	1	; case 3
  5215  000EF0  B4D8               	btfsc	status,2,c
  5216  000EF2  D756               	goto	l4114
  5217  000EF4  0A07               	xorlw	7	; case 4
  5218  000EF6  B4D8               	btfsc	status,2,c
  5219  000EF8  D762               	goto	l4116
  5220  000EFA  0A01               	xorlw	1	; case 5
  5221  000EFC  B4D8               	btfsc	status,2,c
  5222  000EFE  D76E               	goto	l4118
  5223  000F00  0A03               	xorlw	3	; case 6
  5224  000F02  B4D8               	btfsc	status,2,c
  5225  000F04  D77A               	goto	l4120
  5226  000F06  0A01               	xorlw	1	; case 7
  5227  000F08  B4D8               	btfsc	status,2,c
  5228  000F0A  D786               	goto	l4122
  5229  000F0C  0A0F               	xorlw	15	; case 8
  5230  000F0E  B4D8               	btfsc	status,2,c
  5231  000F10  D792               	goto	l4124
  5232  000F12  0A01               	xorlw	1	; case 9
  5233  000F14  B4D8               	btfsc	status,2,c
  5234  000F16  D79E               	goto	l4126
  5235  000F18  0A03               	xorlw	3	; case 10
  5236  000F1A  B4D8               	btfsc	status,2,c
  5237  000F1C  D7AA               	goto	l4128
  5238  000F1E  0A01               	xorlw	1	; case 11
  5239  000F20  B4D8               	btfsc	status,2,c
  5240  000F22  D7B6               	goto	l4130
  5241  000F24  0A07               	xorlw	7	; case 12
  5242  000F26  B4D8               	btfsc	status,2,c
  5243  000F28  D7C2               	goto	l4132
  5244  000F2A                     l4138:
  5245                           
  5246                           ;RTC.c: 107: lcdInst(0b10000000);;
  5247  000F2A  0E80               	movlw	128
  5248  000F2C  ECDE  F013         	call	_lcdInst
  5249                           
  5250                           ;RTC.c: 108: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  5251  000F30  0ED4               	movlw	low STR_48
  5252  000F32  0100               	movlb	0	; () banked
  5253  000F34  6F8E               	movwf	printf@f& (0+255),b
  5254  000F36  0EFD               	movlw	high STR_48
  5255  000F38  0100               	movlb	0	; () banked
  5256  000F3A  6F8F               	movwf	(printf@f+1)& (0+255),b
  5257  000F3C  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  5258  000F40  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  5259  000F44  0EBE               	movlw	low printRTC@month
  5260  000F46  0100               	movlb	0	; () banked
  5261  000F48  6F92               	movwf	(?_printf+4)& (0+255),b
  5262  000F4A  0E00               	movlw	high printRTC@month
  5263  000F4C  0100               	movlb	0	; () banked
  5264  000F4E  6F93               	movwf	(?_printf+5)& (0+255),b
  5265  000F50  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  5266  000F54  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  5267  000F58  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  5268  000F5C  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  5269  000F60  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  5270  000F64  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  5271  000F68  ECAA  F002         	call	_printf	;wreg free
  5272  000F6C  0012               	return		;funcret
  5273  000F6E                     __end_of_printRTC:
  5274                           	opt stack 0
  5275                           tblptru	equ	0xFF8
  5276                           tblptrh	equ	0xFF7
  5277                           tblptrl	equ	0xFF6
  5278                           tablat	equ	0xFF5
  5279                           prodh	equ	0xFF4
  5280                           prodl	equ	0xFF3
  5281                           intcon	equ	0xFF2
  5282                           intcon3	equ	0xFF0
  5283                           postinc0	equ	0xFEE
  5284                           wreg	equ	0xFE8
  5285                           postdec1	equ	0xFE5
  5286                           fsr1l	equ	0xFE1
  5287                           indf2	equ	0xFDF
  5288                           postinc2	equ	0xFDE
  5289                           postdec2	equ	0xFDD
  5290                           fsr2h	equ	0xFDA
  5291                           fsr2l	equ	0xFD9
  5292                           status	equ	0xFD8
  5293                           
  5294 ;; *************** function _strcpy *****************
  5295 ;; Defined at:
  5296 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  5297 ;; Parameters:    Size  Location     Type
  5298 ;;  to              2    0[BANK0 ] PTR unsigned char 
  5299 ;;		 -> printRTC@month(4), 
  5300 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  5301 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
  5302 ;;		 -> STR_43(4), STR_42(4), STR_41(4), STR_40(4), 
  5303 ;;		 -> STR_39(4), STR_38(4), STR_37(4), STR_36(4), 
  5304 ;; Auto vars:     Size  Location     Type
  5305 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  5306 ;;		 -> printRTC@month(4), 
  5307 ;; Return value:  Size  Location     Type
  5308 ;;                  2    0[BANK0 ] PTR unsigned char 
  5309 ;; Registers used:
  5310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5311 ;; Tracked objects:
  5312 ;;		On entry : 0/0
  5313 ;;		On exit  : 0/0
  5314 ;;		Unchanged: 0/0
  5315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5316 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5317 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5319 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5320 ;;Total ram usage:        6 bytes
  5321 ;; Hardware stack levels used:    1
  5322 ;; Hardware stack levels required when called:    7
  5323 ;; This function calls:
  5324 ;;		Nothing
  5325 ;; This function is called by:
  5326 ;;		_printRTC
  5327 ;; This function uses a non-reentrant model
  5328 ;;
  5329                           
  5330                           	psect	text21
  5331  002340                     __ptext21:
  5332                           	opt stack 0
  5333  002340                     _strcpy:
  5334                           	opt stack 20
  5335                           
  5336                           ;incstack = 0
  5337  002340  C080  F084         	movff	strcpy@to,strcpy@cp
  5338  002344  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  5339  002348  D006               	goto	l3908
  5340  00234A                     l3906:
  5341  00234A  0100               	movlb	0	; () banked
  5342  00234C  4B84               	infsnz	strcpy@cp& (0+255),f,b
  5343  00234E  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  5344  002350  0100               	movlb	0	; () banked
  5345  002352  4B82               	infsnz	strcpy@from& (0+255),f,b
  5346  002354  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  5347  002356                     l3908:
  5348  002356  C082  FFF6         	movff	strcpy@from,tblptrl
  5349  00235A  C083  FFF7         	movff	strcpy@from+1,tblptrh
  5350  00235E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5351  00235E  6AF8               	clrf	tblptru,c
  5352  002360                     	endif
  5353  002360                     	if	0	;tblptru may be non-zero
  5354  002360                     	endif
  5355  002360  C084  FFD9         	movff	strcpy@cp,fsr2l
  5356  002364  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  5357  002368  0008               	tblrd		*
  5358  00236A  CFF5 FFDF          	movff	tablat,indf2
  5359  00236E  50DF               	movf	indf2,w,c
  5360  002370  B4D8               	btfsc	status,2,c
  5361  002372  0012               	return	
  5362  002374  D7EA               	goto	l3906
  5363  002376                     __end_of_strcpy:
  5364                           	opt stack 0
  5365                           tblptru	equ	0xFF8
  5366                           tblptrh	equ	0xFF7
  5367                           tblptrl	equ	0xFF6
  5368                           tablat	equ	0xFF5
  5369                           prodh	equ	0xFF4
  5370                           prodl	equ	0xFF3
  5371                           intcon	equ	0xFF2
  5372                           intcon3	equ	0xFF0
  5373                           postinc0	equ	0xFEE
  5374                           wreg	equ	0xFE8
  5375                           postdec1	equ	0xFE5
  5376                           fsr1l	equ	0xFE1
  5377                           indf2	equ	0xFDF
  5378                           postinc2	equ	0xFDE
  5379                           postdec2	equ	0xFDD
  5380                           fsr2h	equ	0xFDA
  5381                           fsr2l	equ	0xFD9
  5382                           status	equ	0xFD8
  5383                           
  5384 ;; *************** function _printf *****************
  5385 ;; Defined at:
  5386 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  5387 ;; Parameters:    Size  Location     Type
  5388 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  5389 ;;		 -> STR_50(21), STR_49(11), STR_48(24), STR_35(17), 
  5390 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
  5391 ;;		 -> STR_30(17), STR_29(17), STR_28(17), STR_27(17), 
  5392 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(17), 
  5393 ;;		 -> STR_22(17), STR_21(17), STR_20(17), STR_19(17), 
  5394 ;;		 -> STR_18(17), STR_17(17), STR_16(17), STR_15(17), 
  5395 ;;		 -> STR_14(3), STR_13(17), STR_12(17), STR_11(17), 
  5396 ;;		 -> STR_10(17), STR_9(17), STR_8(18), STR_7(10), 
  5397 ;;		 -> STR_6(17), STR_5(7), STR_4(17), STR_3(18), 
  5398 ;;		 -> STR_2(21), STR_1(14), 
  5399 ;; Auto vars:     Size  Location     Type
  5400 ;;  tmpval          4    0        struct .
  5401 ;;  width           2   41[BANK0 ] int 
  5402 ;;  len             2   37[BANK0 ] unsigned int 
  5403 ;;  val             2   35[BANK0 ] unsigned int 
  5404 ;;  cp              2   33[BANK0 ] PTR const unsigned char 
  5405 ;;		 -> STR_51(7), printRTC@month(4), 
  5406 ;;  ap              2   31[BANK0 ] PTR void [1]
  5407 ;;		 -> ?i2_printf(2), ?_printf(2), 
  5408 ;;  c               1   40[BANK0 ] char 
  5409 ;;  flag            1   39[BANK0 ] unsigned char 
  5410 ;;  prec            1   30[BANK0 ] char 
  5411 ;; Return value:  Size  Location     Type
  5412 ;;                  2   14[BANK0 ] int 
  5413 ;; Registers used:
  5414 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5415 ;; Tracked objects:
  5416 ;;		On entry : 0/0
  5417 ;;		On exit  : 0/0
  5418 ;;		Unchanged: 0/0
  5419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5420 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5421 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5422 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5423 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5424 ;;Total ram usage:       29 bytes
  5425 ;; Hardware stack levels used:    1
  5426 ;; Hardware stack levels required when called:    9
  5427 ;; This function calls:
  5428 ;;		___lwdiv
  5429 ;;		___lwmod
  5430 ;;		___wmul
  5431 ;;		_isdigit
  5432 ;;		_putch
  5433 ;; This function is called by:
  5434 ;;		_UI
  5435 ;;		_change_state_to_menu_start
  5436 ;;		_printRTC
  5437 ;; This function uses a non-reentrant model
  5438 ;;
  5439                           
  5440                           	psect	text22
  5441  000554                     __ptext22:
  5442                           	opt stack 0
  5443  000554                     _printf:
  5444                           	opt stack 19
  5445                           
  5446                           ;doprnt.c: 466: va_list ap;
  5447                           ;doprnt.c: 499: signed char c;
  5448                           ;doprnt.c: 501: int width;
  5449                           ;doprnt.c: 506: signed char prec;
  5450                           ;doprnt.c: 508: unsigned char flag;
  5451                           ;doprnt.c: 523: union {
  5452                           ;doprnt.c: 524: unsigned long vd;
  5453                           ;doprnt.c: 525: double integ;
  5454                           ;doprnt.c: 526: } tmpval;
  5455                           ;doprnt.c: 528: unsigned int val;
  5456                           ;doprnt.c: 529: unsigned len;
  5457                           ;doprnt.c: 530: const char * cp;
  5458                           ;doprnt.c: 533: *ap = __va_start();
  5459                           
  5460                           ;incstack = 0
  5461  000554  0E90               	movlw	low (?_printf+2)
  5462  000556  0100               	movlb	0	; () banked
  5463  000558  6F9F               	movwf	printf@ap& (0+255),b
  5464  00055A  0E00               	movlw	high (?_printf+2)
  5465  00055C  0100               	movlb	0	; () banked
  5466  00055E  6FA0               	movwf	(printf@ap+1)& (0+255),b
  5467                           
  5468                           ;doprnt.c: 536: while(c = *f++) {
  5469  000560  D1EE               	goto	l3886
  5470  000562                     l3762:
  5471                           
  5472                           ; BSR set to: 0
  5473                           ;doprnt.c: 538: if(c != '%')
  5474  000562  0E25               	movlw	37
  5475  000564  0100               	movlb	0	; () banked
  5476  000566  19A8               	xorwf	printf@c& (0+255),w,b
  5477  000568  B4D8               	btfsc	status,2,c
  5478  00056A  D005               	goto	l3766
  5479                           
  5480                           ; BSR set to: 0
  5481                           ;doprnt.c: 540: {
  5482                           ;doprnt.c: 541: (putch(c) );
  5483  00056C  0100               	movlb	0	; () banked
  5484  00056E  51A8               	movf	printf@c& (0+255),w,b
  5485  000570  ECD6  F013         	call	_putch
  5486                           
  5487                           ;doprnt.c: 542: continue;
  5488  000574  D1E4               	goto	l3886
  5489  000576                     l3766:
  5490                           
  5491                           ;doprnt.c: 543: }
  5492                           ;doprnt.c: 546: width = 0;
  5493  000576  0E00               	movlw	0
  5494  000578  0100               	movlb	0	; () banked
  5495  00057A  6FAA               	movwf	(printf@width+1)& (0+255),b
  5496  00057C  0E00               	movlw	0
  5497  00057E  6FA9               	movwf	printf@width& (0+255),b
  5498                           
  5499                           ;doprnt.c: 548: flag = 0;
  5500  000580  0E00               	movlw	0
  5501  000582  0100               	movlb	0	; () banked
  5502  000584  6FA7               	movwf	printf@flag& (0+255),b
  5503                           
  5504                           ; BSR set to: 0
  5505                           ;doprnt.c: 551: switch(*f) {
  5506                           
  5507                           ;doprnt.c: 550: for(;;) {
  5508  000586  D005               	goto	l3772
  5509  000588                     l3768:
  5510                           
  5511                           ;doprnt.c: 580: flag |= 0x04;
  5512  000588  0100               	movlb	0	; () banked
  5513  00058A  85A7               	bsf	printf@flag& (0+255),2,b
  5514                           
  5515                           ;doprnt.c: 581: f++;
  5516  00058C  0100               	movlb	0	; () banked
  5517  00058E  4B8E               	infsnz	printf@f& (0+255),f,b
  5518  000590  2B8F               	incf	(printf@f+1)& (0+255),f,b
  5519  000592                     l3772:
  5520  000592  C08E  FFF6         	movff	printf@f,tblptrl
  5521  000596  C08F  FFF7         	movff	printf@f+1,tblptrh
  5522  00059A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5523  00059A  6AF8               	clrf	tblptru,c
  5524  00059C                     	endif
  5525  00059C                     	if	0	;tblptru may be non-zero
  5526  00059C                     	endif
  5527  00059C  0008               	tblrd		*
  5528  00059E  50F5               	movf	tablat,w,c
  5529                           
  5530                           ; Switch size 1, requested type "space"
  5531                           ; Number of cases is 1, Range of values is 48 to 48
  5532                           ; switch strategies available:
  5533                           ; Name         Instructions Cycles
  5534                           ; simple_byte            4     3 (average)
  5535                           ;	Chosen strategy is simple_byte
  5536  0005A0  0A30               	xorlw	48	; case 48
  5537  0005A2  B4D8               	btfsc	status,2,c
  5538  0005A4  D7F1               	goto	l3768
  5539                           
  5540                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5541                           
  5542                           ;doprnt.c: 586: }
  5543                           
  5544                           ;doprnt.c: 585: break;
  5545  0005A6  C08E  FFF6         	movff	printf@f,tblptrl
  5546  0005AA  C08F  FFF7         	movff	printf@f+1,tblptrh
  5547  0005AE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5548  0005AE  6AF8               	clrf	tblptru,c
  5549  0005B0                     	endif
  5550  0005B0                     	if	0	;tblptru may be non-zero
  5551  0005B0                     	endif
  5552  0005B0  0008               	tblrd		*
  5553  0005B2  50F5               	movf	tablat,w,c
  5554  0005B4  EC0B  F013         	call	_isdigit
  5555  0005B8  A0D8               	btfss	status,0,c
  5556  0005BA  D0CF               	goto	l3818
  5557                           
  5558                           ;doprnt.c: 598: width = 0;
  5559  0005BC  0E00               	movlw	0
  5560  0005BE  0100               	movlb	0	; () banked
  5561  0005C0  6FAA               	movwf	(printf@width+1)& (0+255),b
  5562  0005C2  0E00               	movlw	0
  5563  0005C4  6FA9               	movwf	printf@width& (0+255),b
  5564  0005C6                     l3778:
  5565                           
  5566                           ;doprnt.c: 600: width *= 10;
  5567  0005C6  C0A9  F080         	movff	printf@width,___wmul@multiplier
  5568  0005CA  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
  5569  0005CE  0E00               	movlw	0
  5570  0005D0  0100               	movlb	0	; () banked
  5571  0005D2  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5572  0005D4  0E0A               	movlw	10
  5573  0005D6  6F82               	movwf	___wmul@multiplicand& (0+255),b
  5574  0005D8  ECBB  F011         	call	___wmul	;wreg free
  5575  0005DC  C080  F0A9         	movff	?___wmul,printf@width
  5576  0005E0  C081  F0AA         	movff	?___wmul+1,printf@width+1
  5577                           
  5578                           ;doprnt.c: 601: width += *f++ - '0';
  5579  0005E4  0ED0               	movlw	208
  5580  0005E6  0100               	movlb	0	; () banked
  5581  0005E8  6F9A               	movwf	??_printf& (0+255),b
  5582  0005EA  0EFF               	movlw	255
  5583  0005EC  0100               	movlb	0	; () banked
  5584  0005EE  6F9B               	movwf	(??_printf+1)& (0+255),b
  5585  0005F0  C08E  FFF6         	movff	printf@f,tblptrl
  5586  0005F4  C08F  FFF7         	movff	printf@f+1,tblptrh
  5587  0005F8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5588  0005F8  6AF8               	clrf	tblptru,c
  5589  0005FA                     	endif
  5590  0005FA                     	if	0	;tblptru may be non-zero
  5591  0005FA                     	endif
  5592  0005FA  0008               	tblrd		*
  5593  0005FC  50F5               	movf	tablat,w,c
  5594  0005FE  0100               	movlb	0	; () banked
  5595  000600  6F9C               	movwf	(??_printf+2)& (0+255),b
  5596  000602  6B9D               	clrf	(??_printf+3)& (0+255),b
  5597  000604  0100               	movlb	0	; () banked
  5598  000606  519A               	movf	??_printf& (0+255),w,b
  5599  000608  0100               	movlb	0	; () banked
  5600  00060A  279C               	addwf	(??_printf+2)& (0+255),f,b
  5601  00060C  0100               	movlb	0	; () banked
  5602  00060E  519B               	movf	(??_printf+1)& (0+255),w,b
  5603  000610  0100               	movlb	0	; () banked
  5604  000612  239D               	addwfc	(??_printf+3)& (0+255),f,b
  5605  000614  0100               	movlb	0	; () banked
  5606  000616  519C               	movf	(??_printf+2)& (0+255),w,b
  5607  000618  0100               	movlb	0	; () banked
  5608  00061A  27A9               	addwf	printf@width& (0+255),f,b
  5609  00061C  0100               	movlb	0	; () banked
  5610  00061E  519D               	movf	(??_printf+3)& (0+255),w,b
  5611  000620  0100               	movlb	0	; () banked
  5612  000622  23AA               	addwfc	(printf@width+1)& (0+255),f,b
  5613                           
  5614                           ; BSR set to: 0
  5615  000624  0100               	movlb	0	; () banked
  5616  000626  4B8E               	infsnz	printf@f& (0+255),f,b
  5617  000628  2B8F               	incf	(printf@f+1)& (0+255),f,b
  5618                           
  5619                           ; BSR set to: 0
  5620                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5621  00062A  C08E  FFF6         	movff	printf@f,tblptrl
  5622  00062E  C08F  FFF7         	movff	printf@f+1,tblptrh
  5623  000632                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5624  000632  6AF8               	clrf	tblptru,c
  5625  000634                     	endif
  5626  000634                     	if	0	;tblptru may be non-zero
  5627  000634                     	endif
  5628  000634  0008               	tblrd		*
  5629  000636  50F5               	movf	tablat,w,c
  5630  000638  EC0B  F013         	call	_isdigit
  5631  00063C  A0D8               	btfss	status,0,c
  5632  00063E  D08D               	goto	l3818
  5633  000640  D7C2               	goto	l3778
  5634  000642                     l3786:
  5635                           
  5636                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  5637  000642  C09F  FFD9         	movff	printf@ap,fsr2l
  5638  000646  C0A0  FFDA         	movff	printf@ap+1,fsr2h
  5639  00064A  CFDE F0A1          	movff	postinc2,printf@cp
  5640  00064E  CFDD F0A2          	movff	postdec2,printf@cp+1
  5641  000652  0E02               	movlw	2
  5642  000654  0100               	movlb	0	; () banked
  5643  000656  279F               	addwf	printf@ap& (0+255),f,b
  5644  000658  0E00               	movlw	0
  5645  00065A  23A0               	addwfc	(printf@ap+1)& (0+255),f,b
  5646                           
  5647                           ; BSR set to: 0
  5648                           ;doprnt.c: 740: if(!cp)
  5649  00065C  0100               	movlb	0	; () banked
  5650  00065E  51A1               	movf	printf@cp& (0+255),w,b
  5651  000660  0100               	movlb	0	; () banked
  5652  000662  11A2               	iorwf	(printf@cp+1)& (0+255),w,b
  5653  000664  A4D8               	btfss	status,2,c
  5654  000666  D006               	goto	l3794
  5655                           
  5656                           ; BSR set to: 0
  5657                           ;doprnt.c: 741: cp = "(null)";
  5658  000668  0EBE               	movlw	low STR_51
  5659  00066A  0100               	movlb	0	; () banked
  5660  00066C  6FA1               	movwf	printf@cp& (0+255),b
  5661  00066E  0EFF               	movlw	high STR_51
  5662  000670  0100               	movlb	0	; () banked
  5663  000672  6FA2               	movwf	(printf@cp+1)& (0+255),b
  5664  000674                     l3794:
  5665                           
  5666                           ; BSR set to: 0
  5667                           ;doprnt.c: 745: len = 0;
  5668  000674  0E00               	movlw	0
  5669  000676  0100               	movlb	0	; () banked
  5670  000678  6FA6               	movwf	(printf@len+1)& (0+255),b
  5671  00067A  0E00               	movlw	0
  5672  00067C  6FA5               	movwf	printf@len& (0+255),b
  5673                           
  5674                           ;doprnt.c: 746: while(cp[len])
  5675  00067E  D003               	goto	l3798
  5676  000680                     l3796:
  5677                           
  5678                           ;doprnt.c: 747: len++;
  5679  000680  0100               	movlb	0	; () banked
  5680  000682  4BA5               	infsnz	printf@len& (0+255),f,b
  5681  000684  2BA6               	incf	(printf@len+1)& (0+255),f,b
  5682  000686                     l3798:
  5683                           
  5684                           ; BSR set to: 0
  5685  000686  0100               	movlb	0	; () banked
  5686  000688  51A5               	movf	printf@len& (0+255),w,b
  5687  00068A  0100               	movlb	0	; () banked
  5688  00068C  25A1               	addwf	printf@cp& (0+255),w,b
  5689  00068E  0100               	movlb	0	; () banked
  5690  000690  6F9A               	movwf	??_printf& (0+255),b
  5691  000692  0100               	movlb	0	; () banked
  5692  000694  51A6               	movf	(printf@len+1)& (0+255),w,b
  5693  000696  0100               	movlb	0	; () banked
  5694  000698  21A2               	addwfc	(printf@cp+1)& (0+255),w,b
  5695  00069A  0100               	movlb	0	; () banked
  5696  00069C  6F9B               	movwf	(??_printf+1)& (0+255),b
  5697  00069E  C09A  FFF6         	movff	??_printf,tblptrl
  5698  0006A2  C09B  FFF7         	movff	??_printf+1,tblptrh
  5699  0006A6  0E00               	movlw	low (__mediumconst shr (0+16))
  5700  0006A8  6EF8               	movwf	tblptru,c
  5701  0006AA  0E0F               	movlw	(high __ramtop+-1)
  5702  0006AC  64F7               	cpfsgt	tblptrh,c
  5703  0006AE  D003               	bra	u2557
  5704  0006B0  0008               	tblrd		*
  5705  0006B2  50F5               	movf	tablat,w,c
  5706  0006B4  D005               	bra	u2550
  5707  0006B6                     u2557:
  5708  0006B6  CFF6 FFE9          	movff	tblptrl,fsr0l
  5709  0006BA  CFF7 FFEA          	movff	tblptrh,fsr0h
  5710  0006BE  50EF               	movf	indf0,w,c
  5711  0006C0                     u2550:
  5712  0006C0  0900               	iorlw	0
  5713  0006C2  A4D8               	btfss	status,2,c
  5714  0006C4  D7DD               	goto	l3796
  5715                           
  5716                           ;doprnt.c: 757: if(width > len)
  5717  0006C6  0100               	movlb	0	; () banked
  5718  0006C8  51A9               	movf	printf@width& (0+255),w,b
  5719  0006CA  0100               	movlb	0	; () banked
  5720  0006CC  5DA5               	subwf	printf@len& (0+255),w,b
  5721  0006CE  0100               	movlb	0	; () banked
  5722  0006D0  51AA               	movf	(printf@width+1)& (0+255),w,b
  5723  0006D2  0100               	movlb	0	; () banked
  5724  0006D4  59A6               	subwfb	(printf@len+1)& (0+255),w,b
  5725  0006D6  B0D8               	btfsc	status,0,c
  5726  0006D8  D009               	goto	l3804
  5727                           
  5728                           ; BSR set to: 0
  5729                           ;doprnt.c: 758: width -= len;
  5730  0006DA  0100               	movlb	0	; () banked
  5731  0006DC  51A5               	movf	printf@len& (0+255),w,b
  5732  0006DE  0100               	movlb	0	; () banked
  5733  0006E0  5FA9               	subwf	printf@width& (0+255),f,b
  5734  0006E2  0100               	movlb	0	; () banked
  5735  0006E4  51A6               	movf	(printf@len+1)& (0+255),w,b
  5736  0006E6  0100               	movlb	0	; () banked
  5737  0006E8  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  5738  0006EA  D009               	goto	l3808
  5739  0006EC                     l3804:
  5740                           
  5741                           ; BSR set to: 0
  5742                           ;doprnt.c: 759: else
  5743                           ;doprnt.c: 760: width = 0;
  5744  0006EC  0E00               	movlw	0
  5745  0006EE  0100               	movlb	0	; () banked
  5746  0006F0  6FAA               	movwf	(printf@width+1)& (0+255),b
  5747  0006F2  0E00               	movlw	0
  5748  0006F4  6FA9               	movwf	printf@width& (0+255),b
  5749                           
  5750                           ; BSR set to: 0
  5751                           ;doprnt.c: 764: while(width--)
  5752  0006F6  D003               	goto	l3808
  5753  0006F8                     l3806:
  5754                           
  5755                           ; BSR set to: 0
  5756                           ;doprnt.c: 765: (putch(' ') );
  5757  0006F8  0E20               	movlw	32
  5758  0006FA  ECD6  F013         	call	_putch
  5759  0006FE                     l3808:
  5760  0006FE  0100               	movlb	0	; () banked
  5761  000700  07A9               	decf	printf@width& (0+255),f,b
  5762  000702  A0D8               	btfss	status,0,c
  5763  000704  07AA               	decf	(printf@width+1)& (0+255),f,b
  5764  000706  0100               	movlb	0	; () banked
  5765  000708  29A9               	incf	printf@width& (0+255),w,b
  5766  00070A  E1F6               	bnz	l3806
  5767  00070C  0100               	movlb	0	; () banked
  5768  00070E  29AA               	incf	(printf@width+1)& (0+255),w,b
  5769  000710  B4D8               	btfsc	status,2,c
  5770  000712  D017               	goto	l3814
  5771  000714  D7F1               	goto	l3806
  5772  000716                     l3810:
  5773                           
  5774                           ; BSR set to: 0
  5775                           ;doprnt.c: 768: (putch(*cp++) );
  5776  000716  C0A1  FFF6         	movff	printf@cp,tblptrl
  5777  00071A  C0A2  FFF7         	movff	printf@cp+1,tblptrh
  5778  00071E  0E00               	movlw	low (__mediumconst shr (0+16))
  5779  000720  6EF8               	movwf	tblptru,c
  5780  000722  0E0F               	movlw	(high __ramtop+-1)
  5781  000724  64F7               	cpfsgt	tblptrh,c
  5782  000726  D003               	bra	u2597
  5783  000728  0008               	tblrd		*
  5784  00072A  50F5               	movf	tablat,w,c
  5785  00072C  D005               	bra	u2590
  5786  00072E                     u2597:
  5787  00072E  CFF6 FFE9          	movff	tblptrl,fsr0l
  5788  000732  CFF7 FFEA          	movff	tblptrh,fsr0h
  5789  000736  50EF               	movf	indf0,w,c
  5790  000738                     u2590:
  5791  000738  ECD6  F013         	call	_putch
  5792  00073C  0100               	movlb	0	; () banked
  5793  00073E  4BA1               	infsnz	printf@cp& (0+255),f,b
  5794  000740  2BA2               	incf	(printf@cp+1)& (0+255),f,b
  5795  000742                     l3814:
  5796                           
  5797                           ; BSR set to: 0
  5798  000742  0100               	movlb	0	; () banked
  5799  000744  07A5               	decf	printf@len& (0+255),f,b
  5800  000746  A0D8               	btfss	status,0,c
  5801  000748  07A6               	decf	(printf@len+1)& (0+255),f,b
  5802  00074A  0100               	movlb	0	; () banked
  5803  00074C  29A5               	incf	printf@len& (0+255),w,b
  5804  00074E  E1E3               	bnz	l3810
  5805  000750  0100               	movlb	0	; () banked
  5806  000752  29A6               	incf	(printf@len+1)& (0+255),w,b
  5807  000754  B4D8               	btfsc	status,2,c
  5808  000756  D0F3               	goto	l3886
  5809  000758  D7DE               	goto	l3810
  5810  00075A                     l3818:
  5811  00075A  C08E  FFF6         	movff	printf@f,tblptrl
  5812  00075E  C08F  FFF7         	movff	printf@f+1,tblptrh
  5813  000762  0100               	movlb	0	; () banked
  5814  000764  4B8E               	infsnz	printf@f& (0+255),f,b
  5815  000766  2B8F               	incf	(printf@f+1)& (0+255),f,b
  5816  000768                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5817  000768  6AF8               	clrf	tblptru,c
  5818  00076A                     	endif
  5819  00076A                     	if	0	;tblptru may be non-zero
  5820  00076A                     	endif
  5821  00076A  0008               	tblrd		*
  5822  00076C  CFF5 F0A8          	movff	tablat,printf@c
  5823  000770  0100               	movlb	0	; () banked
  5824  000772  51A8               	movf	printf@c& (0+255),w,b
  5825                           
  5826                           ; Switch size 1, requested type "space"
  5827                           ; Number of cases is 4, Range of values is 0 to 115
  5828                           ; switch strategies available:
  5829                           ; Name         Instructions Cycles
  5830                           ; simple_byte           13     7 (average)
  5831                           ;	Chosen strategy is simple_byte
  5832  000774  0A00               	xorlw	0	; case 0
  5833  000776  B4D8               	btfsc	status,2,c
  5834  000778  0012               	return	
  5835  00077A  0A64               	xorlw	100	; case 100
  5836  00077C  B4D8               	btfsc	status,2,c
  5837  00077E  D007               	goto	l3820
  5838  000780  0A0D               	xorlw	13	; case 105
  5839  000782  B4D8               	btfsc	status,2,c
  5840  000784  D004               	goto	l3820
  5841  000786  0A1A               	xorlw	26	; case 115
  5842  000788  B4D8               	btfsc	status,2,c
  5843  00078A  D75B               	goto	l3786
  5844  00078C  D0D8               	goto	l3886
  5845  00078E                     l3820:
  5846                           
  5847                           ;doprnt.c: 1253: {
  5848                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5849  00078E  C09F  FFD9         	movff	printf@ap,fsr2l
  5850  000792  C0A0  FFDA         	movff	printf@ap+1,fsr2h
  5851  000796  CFDE F0A3          	movff	postinc2,printf@val
  5852  00079A  CFDD F0A4          	movff	postdec2,printf@val+1
  5853  00079E  0E02               	movlw	2
  5854  0007A0  0100               	movlb	0	; () banked
  5855  0007A2  279F               	addwf	printf@ap& (0+255),f,b
  5856  0007A4  0E00               	movlw	0
  5857  0007A6  23A0               	addwfc	(printf@ap+1)& (0+255),f,b
  5858                           
  5859                           ; BSR set to: 0
  5860                           ;doprnt.c: 1261: if((int)val < 0) {
  5861  0007A8  0100               	movlb	0	; () banked
  5862  0007AA  AFA4               	btfss	(printf@val+1)& (0+255),7,b
  5863  0007AC  D008               	goto	l3830
  5864                           
  5865                           ; BSR set to: 0
  5866                           ;doprnt.c: 1262: flag |= 0x03;
  5867  0007AE  0E03               	movlw	3
  5868  0007B0  0100               	movlb	0	; () banked
  5869  0007B2  13A7               	iorwf	printf@flag& (0+255),f,b
  5870                           
  5871                           ; BSR set to: 0
  5872                           ;doprnt.c: 1263: val = -val;
  5873  0007B4  0100               	movlb	0	; () banked
  5874  0007B6  6DA3               	negf	printf@val& (0+255),b
  5875  0007B8  1FA4               	comf	(printf@val+1)& (0+255),f,b
  5876  0007BA  B0D8               	btfsc	status,0,c
  5877  0007BC  2BA4               	incf	(printf@val+1)& (0+255),f,b
  5878  0007BE                     l3830:
  5879                           
  5880                           ; BSR set to: 0
  5881                           ;doprnt.c: 1264: }
  5882                           ;doprnt.c: 1266: }
  5883                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5884  0007BE  0E01               	movlw	1
  5885  0007C0  0100               	movlb	0	; () banked
  5886  0007C2  6FA8               	movwf	printf@c& (0+255),b
  5887  0007C4                     l3832:
  5888                           
  5889                           ; BSR set to: 0
  5890  0007C4  0E05               	movlw	5
  5891  0007C6  0100               	movlb	0	; () banked
  5892  0007C8  19A8               	xorwf	printf@c& (0+255),w,b
  5893  0007CA  B4D8               	btfsc	status,2,c
  5894  0007CC  D019               	goto	l3844
  5895                           
  5896                           ; BSR set to: 0
  5897                           ;doprnt.c: 1306: if(val < dpowers[c])
  5898                           
  5899                           ; BSR set to: 0
  5900                           
  5901                           ; BSR set to: 0
  5902  0007CE  0100               	movlb	0	; () banked
  5903  0007D0  51A8               	movf	printf@c& (0+255),w,b
  5904  0007D2  0D02               	mullw	2
  5905  0007D4  0ECA               	movlw	low _dpowers
  5906  0007D6  24F3               	addwf	prodl,w,c
  5907  0007D8  6EF6               	movwf	tblptrl,c
  5908  0007DA  0EFD               	movlw	high _dpowers
  5909  0007DC  20F4               	addwfc	prodh,w,c
  5910  0007DE  6EF7               	movwf	tblptrh,c
  5911  0007E0                     	if	1	;There are 3 active tblptr bytes
  5912  0007E0  6AF8               	clrf	tblptru,c
  5913  0007E2  0E00               	movlw	low (__mediumconst shr (0+16))
  5914  0007E4  22F8               	addwfc	tblptru,f,c
  5915  0007E6                     	endif
  5916  0007E6  0009               	tblrd		*+
  5917  0007E8  50F5               	movf	tablat,w,c
  5918  0007EA  0100               	movlb	0	; () banked
  5919  0007EC  5DA3               	subwf	printf@val& (0+255),w,b
  5920  0007EE  0009               	tblrd		*+
  5921  0007F0  50F5               	movf	tablat,w,c
  5922  0007F2  0100               	movlb	0	; () banked
  5923  0007F4  59A4               	subwfb	(printf@val+1)& (0+255),w,b
  5924  0007F6  A0D8               	btfss	status,0,c
  5925  0007F8  D003               	goto	l3844
  5926                           
  5927                           ; BSR set to: 0
  5928                           
  5929                           ; BSR set to: 0
  5930                           
  5931                           ; BSR set to: 0
  5932                           ;doprnt.c: 1307: break;
  5933  0007FA  0100               	movlb	0	; () banked
  5934  0007FC  2BA8               	incf	printf@c& (0+255),f,b
  5935  0007FE  D7E2               	goto	l3832
  5936  000800                     l3844:
  5937                           
  5938                           ; BSR set to: 0
  5939                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5940  000800  0100               	movlb	0	; () banked
  5941  000802  51A9               	movf	printf@width& (0+255),w,b
  5942  000804  0100               	movlb	0	; () banked
  5943  000806  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  5944  000808  B4D8               	btfsc	status,2,c
  5945  00080A  D00B               	goto	l3850
  5946                           
  5947                           ; BSR set to: 0
  5948  00080C  C0A7  F09A         	movff	printf@flag,??_printf
  5949  000810  0E03               	movlw	3
  5950  000812  0100               	movlb	0	; () banked
  5951  000814  179A               	andwf	??_printf& (0+255),f,b
  5952  000816  B4D8               	btfsc	status,2,c
  5953  000818  D004               	goto	l3850
  5954                           
  5955                           ; BSR set to: 0
  5956                           ;doprnt.c: 1346: width--;
  5957  00081A  0100               	movlb	0	; () banked
  5958  00081C  07A9               	decf	printf@width& (0+255),f,b
  5959  00081E  A0D8               	btfss	status,0,c
  5960  000820  07AA               	decf	(printf@width+1)& (0+255),f,b
  5961  000822                     l3850:
  5962                           
  5963                           ; BSR set to: 0
  5964                           ;doprnt.c: 1381: if(width > c)
  5965  000822  0E80               	movlw	128
  5966  000824  0100               	movlb	0	; () banked
  5967  000826  BFA8               	btfsc	printf@c& (0+255),7,b
  5968  000828  0E7F               	movlw	127
  5969  00082A  0100               	movlb	0	; () banked
  5970  00082C  6F9A               	movwf	??_printf& (0+255),b
  5971  00082E  0100               	movlb	0	; () banked
  5972  000830  51A9               	movf	printf@width& (0+255),w,b
  5973  000832  0100               	movlb	0	; () banked
  5974  000834  5DA8               	subwf	printf@c& (0+255),w,b
  5975  000836  0100               	movlb	0	; () banked
  5976  000838  51AA               	movf	(printf@width+1)& (0+255),w,b
  5977  00083A  0A80               	xorlw	128
  5978  00083C  0100               	movlb	0	; () banked
  5979  00083E  599A               	subwfb	??_printf& (0+255),w,b
  5980  000840  B0D8               	btfsc	status,0,c
  5981  000842  D00B               	goto	l3854
  5982                           
  5983                           ; BSR set to: 0
  5984                           ;doprnt.c: 1382: width -= c;
  5985  000844  0100               	movlb	0	; () banked
  5986  000846  51A8               	movf	printf@c& (0+255),w,b
  5987  000848  0100               	movlb	0	; () banked
  5988  00084A  5FA9               	subwf	printf@width& (0+255),f,b
  5989  00084C  0E00               	movlw	0
  5990  00084E  0100               	movlb	0	; () banked
  5991  000850  BFA8               	btfsc	printf@c& (0+255),7,b
  5992  000852  0EFF               	movlw	255
  5993  000854  0100               	movlb	0	; () banked
  5994  000856  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  5995  000858  D005               	goto	l3856
  5996  00085A                     l3854:
  5997                           
  5998                           ; BSR set to: 0
  5999                           ;doprnt.c: 1383: else
  6000                           ;doprnt.c: 1384: width = 0;
  6001  00085A  0E00               	movlw	0
  6002  00085C  0100               	movlb	0	; () banked
  6003  00085E  6FAA               	movwf	(printf@width+1)& (0+255),b
  6004  000860  0E00               	movlw	0
  6005  000862  6FA9               	movwf	printf@width& (0+255),b
  6006  000864                     l3856:
  6007                           
  6008                           ; BSR set to: 0
  6009                           ;doprnt.c: 1387: if(flag & 0x04) {
  6010  000864  0100               	movlb	0	; () banked
  6011  000866  A5A7               	btfss	printf@flag& (0+255),2,b
  6012  000868  D018               	goto	l3868
  6013                           
  6014                           ; BSR set to: 0
  6015                           ;doprnt.c: 1392: if(flag & 0x03)
  6016  00086A  C0A7  F09A         	movff	printf@flag,??_printf
  6017  00086E  0E03               	movlw	3
  6018  000870  0100               	movlb	0	; () banked
  6019  000872  179A               	andwf	??_printf& (0+255),f,b
  6020  000874  B4D8               	btfsc	status,2,c
  6021  000876  D003               	goto	l3862
  6022                           
  6023                           ; BSR set to: 0
  6024                           ;doprnt.c: 1393: (putch('-') );
  6025  000878  0E2D               	movlw	45
  6026  00087A  ECD6  F013         	call	_putch
  6027  00087E                     l3862:
  6028                           
  6029                           ;doprnt.c: 1415: if(width)
  6030  00087E  0100               	movlb	0	; () banked
  6031  000880  51A9               	movf	printf@width& (0+255),w,b
  6032  000882  0100               	movlb	0	; () banked
  6033  000884  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  6034  000886  B4D8               	btfsc	status,2,c
  6035  000888  D025               	goto	l3878
  6036                           
  6037                           ; BSR set to: 0
  6038                           ;doprnt.c: 1417: (putch('0') );
  6039                           
  6040                           ; BSR set to: 0
  6041                           
  6042                           ;doprnt.c: 1416: do
  6043  00088A  0E30               	movlw	48
  6044  00088C  ECD6  F013         	call	_putch
  6045                           
  6046                           ;doprnt.c: 1418: while(--width);
  6047  000890  0100               	movlb	0	; () banked
  6048  000892  07A9               	decf	printf@width& (0+255),f,b
  6049  000894  A0D8               	btfss	status,0,c
  6050  000896  07AA               	decf	(printf@width+1)& (0+255),f,b
  6051  000898  D7F2               	goto	l3862
  6052  00089A                     l3868:
  6053                           
  6054                           ; BSR set to: 0
  6055                           ;doprnt.c: 1422: {
  6056                           ;doprnt.c: 1424: if(width
  6057                           ;doprnt.c: 1428: )
  6058  00089A  0100               	movlb	0	; () banked
  6059  00089C  51A9               	movf	printf@width& (0+255),w,b
  6060  00089E  0100               	movlb	0	; () banked
  6061  0008A0  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  6062  0008A2  B4D8               	btfsc	status,2,c
  6063  0008A4  D00D               	goto	l3874
  6064  0008A6                     l3870:
  6065                           
  6066                           ; BSR set to: 0
  6067                           ;doprnt.c: 1430: (putch(' ') );
  6068  0008A6  0E20               	movlw	32
  6069  0008A8  ECD6  F013         	call	_putch
  6070                           
  6071                           ;doprnt.c: 1431: while(--width);
  6072  0008AC  0100               	movlb	0	; () banked
  6073  0008AE  07A9               	decf	printf@width& (0+255),f,b
  6074  0008B0  A0D8               	btfss	status,0,c
  6075  0008B2  07AA               	decf	(printf@width+1)& (0+255),f,b
  6076  0008B4  0100               	movlb	0	; () banked
  6077  0008B6  51A9               	movf	printf@width& (0+255),w,b
  6078  0008B8  0100               	movlb	0	; () banked
  6079  0008BA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  6080  0008BC  A4D8               	btfss	status,2,c
  6081  0008BE  D7F3               	goto	l3870
  6082  0008C0                     l3874:
  6083                           
  6084                           ; BSR set to: 0
  6085                           ;doprnt.c: 1438: if(flag & 0x03)
  6086  0008C0  C0A7  F09A         	movff	printf@flag,??_printf
  6087  0008C4  0E03               	movlw	3
  6088  0008C6  0100               	movlb	0	; () banked
  6089  0008C8  179A               	andwf	??_printf& (0+255),f,b
  6090  0008CA  B4D8               	btfsc	status,2,c
  6091  0008CC  D003               	goto	l3878
  6092                           
  6093                           ; BSR set to: 0
  6094                           ;doprnt.c: 1439: (putch('-') );
  6095  0008CE  0E2D               	movlw	45
  6096  0008D0  ECD6  F013         	call	_putch
  6097  0008D4                     l3878:
  6098                           
  6099                           ;doprnt.c: 1469: }
  6100                           ;doprnt.c: 1472: prec = c;
  6101  0008D4  C0A8  F09E         	movff	printf@c,printf@prec
  6102                           
  6103                           ;doprnt.c: 1474: while(prec--) {
  6104  0008D8  D02C               	goto	l3884
  6105  0008DA                     l3880:
  6106                           
  6107                           ;doprnt.c: 1478: {
  6108                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6109  0008DA  0100               	movlb	0	; () banked
  6110  0008DC  519E               	movf	printf@prec& (0+255),w,b
  6111  0008DE  0D02               	mullw	2
  6112  0008E0  0ECA               	movlw	low _dpowers
  6113  0008E2  24F3               	addwf	prodl,w,c
  6114  0008E4  6EF6               	movwf	tblptrl,c
  6115  0008E6  0EFD               	movlw	high _dpowers
  6116  0008E8  20F4               	addwfc	prodh,w,c
  6117  0008EA  6EF7               	movwf	tblptrh,c
  6118  0008EC                     	if	1	;There are 3 active tblptr bytes
  6119  0008EC  6AF8               	clrf	tblptru,c
  6120  0008EE  0E00               	movlw	low (__mediumconst shr (0+16))
  6121  0008F0  22F8               	addwfc	tblptru,f,c
  6122  0008F2                     	endif
  6123  0008F2  0009               	tblrd		*+
  6124  0008F4  CFF5 F082          	movff	tablat,___lwdiv@divisor
  6125  0008F8  000A               	tblrd		*-
  6126  0008FA  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  6127  0008FE  C0A3  F080         	movff	printf@val,___lwdiv@dividend
  6128  000902  C0A4  F081         	movff	printf@val+1,___lwdiv@dividend+1
  6129  000906  ECB4  F00F         	call	___lwdiv	;wreg free
  6130  00090A  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  6131  00090E  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  6132  000912  0E00               	movlw	0
  6133  000914  0100               	movlb	0	; () banked
  6134  000916  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  6135  000918  0E0A               	movlw	10
  6136  00091A  6F89               	movwf	___lwmod@divisor& (0+255),b
  6137  00091C  EC5D  F010         	call	___lwmod	;wreg free
  6138  000920  0100               	movlb	0	; () banked
  6139  000922  5187               	movf	?___lwmod& (0+255),w,b
  6140  000924  0F30               	addlw	48
  6141  000926  0100               	movlb	0	; () banked
  6142  000928  6FA8               	movwf	printf@c& (0+255),b
  6143                           
  6144                           ; BSR set to: 0
  6145                           ;doprnt.c: 1523: }
  6146                           ;doprnt.c: 1524: (putch(c) );
  6147  00092A  0100               	movlb	0	; () banked
  6148  00092C  51A8               	movf	printf@c& (0+255),w,b
  6149  00092E  ECD6  F013         	call	_putch
  6150  000932                     l3884:
  6151  000932  0100               	movlb	0	; () banked
  6152  000934  079E               	decf	printf@prec& (0+255),f,b
  6153  000936  0100               	movlb	0	; () banked
  6154  000938  299E               	incf	printf@prec& (0+255),w,b
  6155  00093A  A4D8               	btfss	status,2,c
  6156  00093C  D7CE               	goto	l3880
  6157  00093E                     l3886:
  6158  00093E  C08E  FFF6         	movff	printf@f,tblptrl
  6159  000942  C08F  FFF7         	movff	printf@f+1,tblptrh
  6160  000946  0100               	movlb	0	; () banked
  6161  000948  4B8E               	infsnz	printf@f& (0+255),f,b
  6162  00094A  2B8F               	incf	(printf@f+1)& (0+255),f,b
  6163  00094C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6164  00094C  6AF8               	clrf	tblptru,c
  6165  00094E                     	endif
  6166  00094E                     	if	0	;tblptru may be non-zero
  6167  00094E                     	endif
  6168  00094E  0008               	tblrd		*
  6169  000950  CFF5 F0A8          	movff	tablat,printf@c
  6170  000954  0100               	movlb	0	; () banked
  6171  000956  51A8               	movf	printf@c& (0+255),w,b
  6172  000958  B4D8               	btfsc	status,2,c
  6173  00095A  0012               	return	
  6174  00095C  D602               	goto	l3762
  6175  00095E                     __end_of_printf:
  6176                           	opt stack 0
  6177                           tblptru	equ	0xFF8
  6178                           tblptrh	equ	0xFF7
  6179                           tblptrl	equ	0xFF6
  6180                           tablat	equ	0xFF5
  6181                           prodh	equ	0xFF4
  6182                           prodl	equ	0xFF3
  6183                           intcon	equ	0xFF2
  6184                           intcon3	equ	0xFF0
  6185                           indf0	equ	0xFEF
  6186                           postinc0	equ	0xFEE
  6187                           fsr0h	equ	0xFEA
  6188                           fsr0l	equ	0xFE9
  6189                           wreg	equ	0xFE8
  6190                           postdec1	equ	0xFE5
  6191                           fsr1l	equ	0xFE1
  6192                           indf2	equ	0xFDF
  6193                           postinc2	equ	0xFDE
  6194                           postdec2	equ	0xFDD
  6195                           fsr2h	equ	0xFDA
  6196                           fsr2l	equ	0xFD9
  6197                           status	equ	0xFD8
  6198                           
  6199 ;; *************** function _putch *****************
  6200 ;; Defined at:
  6201 ;;		line 18 in file "lcd.c"
  6202 ;; Parameters:    Size  Location     Type
  6203 ;;  data            1    wreg     unsigned char 
  6204 ;; Auto vars:     Size  Location     Type
  6205 ;;  data            1    2[BANK0 ] unsigned char 
  6206 ;; Return value:  Size  Location     Type
  6207 ;;                  1    wreg      void 
  6208 ;; Registers used:
  6209 ;;		wreg, status,2, status,0, cstack
  6210 ;; Tracked objects:
  6211 ;;		On entry : 0/0
  6212 ;;		On exit  : 0/0
  6213 ;;		Unchanged: 0/0
  6214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6216 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6218 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6219 ;;Total ram usage:        1 bytes
  6220 ;; Hardware stack levels used:    1
  6221 ;; Hardware stack levels required when called:    8
  6222 ;; This function calls:
  6223 ;;		_lcdNibble
  6224 ;; This function is called by:
  6225 ;;		_printf
  6226 ;; This function uses a non-reentrant model
  6227 ;;
  6228                           
  6229                           	psect	text23
  6230  0027AC                     __ptext23:
  6231                           	opt stack 0
  6232  0027AC                     _putch:
  6233                           	opt stack 19
  6234                           
  6235                           ;incstack = 0
  6236                           ;putch@data stored from wreg
  6237  0027AC  0100               	movlb	0	; () banked
  6238  0027AE  6F82               	movwf	putch@data& (0+255),b
  6239                           
  6240                           ;lcd.c: 19: LATDbits.LATD2 = 1;
  6241  0027B0  848C               	bsf	3980,2,c	;volatile
  6242                           
  6243                           ;lcd.c: 20: lcdNibble(data);
  6244  0027B2  0100               	movlb	0	; () banked
  6245  0027B4  5182               	movf	putch@data& (0+255),w,b
  6246  0027B6  EC29  F010         	call	_lcdNibble
  6247  0027BA  0012               	return		;funcret
  6248  0027BC                     __end_of_putch:
  6249                           	opt stack 0
  6250                           tblptru	equ	0xFF8
  6251                           tblptrh	equ	0xFF7
  6252                           tblptrl	equ	0xFF6
  6253                           tablat	equ	0xFF5
  6254                           prodh	equ	0xFF4
  6255                           prodl	equ	0xFF3
  6256                           intcon	equ	0xFF2
  6257                           intcon3	equ	0xFF0
  6258                           indf0	equ	0xFEF
  6259                           postinc0	equ	0xFEE
  6260                           fsr0h	equ	0xFEA
  6261                           fsr0l	equ	0xFE9
  6262                           wreg	equ	0xFE8
  6263                           postdec1	equ	0xFE5
  6264                           fsr1l	equ	0xFE1
  6265                           indf2	equ	0xFDF
  6266                           postinc2	equ	0xFDE
  6267                           postdec2	equ	0xFDD
  6268                           fsr2h	equ	0xFDA
  6269                           fsr2l	equ	0xFD9
  6270                           status	equ	0xFD8
  6271                           
  6272 ;; *************** function _isdigit *****************
  6273 ;; Defined at:
  6274 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  6275 ;; Parameters:    Size  Location     Type
  6276 ;;  c               1    wreg     unsigned char 
  6277 ;; Auto vars:     Size  Location     Type
  6278 ;;  c               1    2[BANK0 ] unsigned char 
  6279 ;; Return value:  Size  Location     Type
  6280 ;;		None               void
  6281 ;; Registers used:
  6282 ;;		wreg, status,2, status,0
  6283 ;; Tracked objects:
  6284 ;;		On entry : 0/0
  6285 ;;		On exit  : 0/0
  6286 ;;		Unchanged: 0/0
  6287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6289 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6290 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6291 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6292 ;;Total ram usage:        3 bytes
  6293 ;; Hardware stack levels used:    1
  6294 ;; Hardware stack levels required when called:    7
  6295 ;; This function calls:
  6296 ;;		Nothing
  6297 ;; This function is called by:
  6298 ;;		_printf
  6299 ;; This function uses a non-reentrant model
  6300 ;;
  6301                           
  6302                           	psect	text24
  6303  002616                     __ptext24:
  6304                           	opt stack 0
  6305  002616                     _isdigit:
  6306                           	opt stack 20
  6307                           
  6308                           ;incstack = 0
  6309                           ;isdigit@c stored from wreg
  6310  002616  0100               	movlb	0	; () banked
  6311  002618  6F82               	movwf	isdigit@c& (0+255),b
  6312  00261A  0E00               	movlw	0
  6313  00261C  0100               	movlb	0	; () banked
  6314  00261E  6F81               	movwf	_isdigit$1557& (0+255),b
  6315                           
  6316                           ; BSR set to: 0
  6317  002620  0E3A               	movlw	58
  6318  002622  0100               	movlb	0	; () banked
  6319  002624  6182               	cpfslt	isdigit@c& (0+255),b
  6320  002626  D007               	goto	l3622
  6321                           
  6322                           ; BSR set to: 0
  6323  002628  0E2F               	movlw	47
  6324  00262A  0100               	movlb	0	; () banked
  6325  00262C  6582               	cpfsgt	isdigit@c& (0+255),b
  6326  00262E  D003               	goto	l3622
  6327                           
  6328                           ; BSR set to: 0
  6329  002630  0E01               	movlw	1
  6330  002632  0100               	movlb	0	; () banked
  6331  002634  6F81               	movwf	_isdigit$1557& (0+255),b
  6332  002636                     l3622:
  6333                           
  6334                           ; BSR set to: 0
  6335  002636  C081  F080         	movff	_isdigit$1557,??_isdigit
  6336  00263A  0100               	movlb	0	; () banked
  6337  00263C  3180               	rrcf	??_isdigit& (0+255),w,b
  6338  00263E  0012               	return	
  6339  002640                     __end_of_isdigit:
  6340                           	opt stack 0
  6341                           tblptru	equ	0xFF8
  6342                           tblptrh	equ	0xFF7
  6343                           tblptrl	equ	0xFF6
  6344                           tablat	equ	0xFF5
  6345                           prodh	equ	0xFF4
  6346                           prodl	equ	0xFF3
  6347                           intcon	equ	0xFF2
  6348                           intcon3	equ	0xFF0
  6349                           indf0	equ	0xFEF
  6350                           postinc0	equ	0xFEE
  6351                           fsr0h	equ	0xFEA
  6352                           fsr0l	equ	0xFE9
  6353                           wreg	equ	0xFE8
  6354                           postdec1	equ	0xFE5
  6355                           fsr1l	equ	0xFE1
  6356                           indf2	equ	0xFDF
  6357                           postinc2	equ	0xFDE
  6358                           postdec2	equ	0xFDD
  6359                           fsr2h	equ	0xFDA
  6360                           fsr2l	equ	0xFD9
  6361                           status	equ	0xFD8
  6362                           
  6363 ;; *************** function ___wmul *****************
  6364 ;; Defined at:
  6365 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  6366 ;; Parameters:    Size  Location     Type
  6367 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6368 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6369 ;; Auto vars:     Size  Location     Type
  6370 ;;  product         2    4[BANK0 ] unsigned int 
  6371 ;; Return value:  Size  Location     Type
  6372 ;;                  2    0[BANK0 ] unsigned int 
  6373 ;; Registers used:
  6374 ;;		wreg, status,2, status,0, prodl, prodh
  6375 ;; Tracked objects:
  6376 ;;		On entry : 0/0
  6377 ;;		On exit  : 0/0
  6378 ;;		Unchanged: 0/0
  6379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6380 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6381 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6383 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6384 ;;Total ram usage:        6 bytes
  6385 ;; Hardware stack levels used:    1
  6386 ;; Hardware stack levels required when called:    7
  6387 ;; This function calls:
  6388 ;;		Nothing
  6389 ;; This function is called by:
  6390 ;;		_printf
  6391 ;; This function uses a non-reentrant model
  6392 ;;
  6393                           
  6394                           	psect	text25
  6395  002376                     __ptext25:
  6396                           	opt stack 0
  6397  002376                     ___wmul:
  6398                           	opt stack 20
  6399                           
  6400                           ; BSR set to: 0
  6401                           ;incstack = 0
  6402  002376  0100               	movlb	0	; () banked
  6403  002378  5180               	movf	___wmul@multiplier& (0+255),w,b
  6404  00237A  0100               	movlb	0	; () banked
  6405  00237C  0382               	mulwf	___wmul@multiplicand& (0+255),b
  6406  00237E  CFF3 F084          	movff	prodl,___wmul@product
  6407  002382  CFF4 F085          	movff	prodh,___wmul@product+1
  6408  002386  0100               	movlb	0	; () banked
  6409  002388  5180               	movf	___wmul@multiplier& (0+255),w,b
  6410  00238A  0100               	movlb	0	; () banked
  6411  00238C  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  6412  00238E  50F3               	movf	prodl,w,c
  6413  002390  0100               	movlb	0	; () banked
  6414  002392  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  6415  002394  0100               	movlb	0	; () banked
  6416  002396  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  6417  002398  0100               	movlb	0	; () banked
  6418  00239A  0382               	mulwf	___wmul@multiplicand& (0+255),b
  6419  00239C  50F3               	movf	prodl,w,c
  6420  00239E  0100               	movlb	0	; () banked
  6421  0023A0  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  6422                           
  6423                           ; BSR set to: 0
  6424  0023A2  C084  F080         	movff	___wmul@product,?___wmul
  6425  0023A6  C085  F081         	movff	___wmul@product+1,?___wmul+1
  6426  0023AA  0012               	return	
  6427  0023AC                     __end_of___wmul:
  6428                           	opt stack 0
  6429                           tblptru	equ	0xFF8
  6430                           tblptrh	equ	0xFF7
  6431                           tblptrl	equ	0xFF6
  6432                           tablat	equ	0xFF5
  6433                           prodh	equ	0xFF4
  6434                           prodl	equ	0xFF3
  6435                           intcon	equ	0xFF2
  6436                           intcon3	equ	0xFF0
  6437                           indf0	equ	0xFEF
  6438                           postinc0	equ	0xFEE
  6439                           fsr0h	equ	0xFEA
  6440                           fsr0l	equ	0xFE9
  6441                           wreg	equ	0xFE8
  6442                           postdec1	equ	0xFE5
  6443                           fsr1l	equ	0xFE1
  6444                           indf2	equ	0xFDF
  6445                           postinc2	equ	0xFDE
  6446                           postdec2	equ	0xFDD
  6447                           fsr2h	equ	0xFDA
  6448                           fsr2l	equ	0xFD9
  6449                           status	equ	0xFD8
  6450                           
  6451 ;; *************** function ___lwmod *****************
  6452 ;; Defined at:
  6453 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  6454 ;; Parameters:    Size  Location     Type
  6455 ;;  dividend        2    7[BANK0 ] unsigned int 
  6456 ;;  divisor         2    9[BANK0 ] unsigned int 
  6457 ;; Auto vars:     Size  Location     Type
  6458 ;;  counter         1   11[BANK0 ] unsigned char 
  6459 ;; Return value:  Size  Location     Type
  6460 ;;                  2    7[BANK0 ] unsigned int 
  6461 ;; Registers used:
  6462 ;;		wreg, status,2, status,0
  6463 ;; Tracked objects:
  6464 ;;		On entry : 0/0
  6465 ;;		On exit  : 0/0
  6466 ;;		Unchanged: 0/0
  6467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6468 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6469 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6471 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6472 ;;Total ram usage:        5 bytes
  6473 ;; Hardware stack levels used:    1
  6474 ;; Hardware stack levels required when called:    7
  6475 ;; This function calls:
  6476 ;;		Nothing
  6477 ;; This function is called by:
  6478 ;;		_printf
  6479 ;; This function uses a non-reentrant model
  6480 ;;
  6481                           
  6482                           	psect	text26
  6483  0020BA                     __ptext26:
  6484                           	opt stack 0
  6485  0020BA                     ___lwmod:
  6486                           	opt stack 20
  6487                           
  6488                           ; BSR set to: 0
  6489                           ;incstack = 0
  6490  0020BA  0100               	movlb	0	; () banked
  6491  0020BC  5189               	movf	___lwmod@divisor& (0+255),w,b
  6492  0020BE  0100               	movlb	0	; () banked
  6493  0020C0  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  6494  0020C2  B4D8               	btfsc	status,2,c
  6495  0020C4  D026               	goto	l1451
  6496                           
  6497                           ; BSR set to: 0
  6498  0020C6  0E01               	movlw	1
  6499  0020C8  0100               	movlb	0	; () banked
  6500  0020CA  6F8B               	movwf	___lwmod@counter& (0+255),b
  6501  0020CC  D006               	goto	l3660
  6502  0020CE                     l3658:
  6503                           
  6504                           ; BSR set to: 0
  6505  0020CE  0100               	movlb	0	; () banked
  6506  0020D0  90D8               	bcf	status,0,c
  6507  0020D2  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  6508  0020D4  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  6509  0020D6  0100               	movlb	0	; () banked
  6510  0020D8  2B8B               	incf	___lwmod@counter& (0+255),f,b
  6511  0020DA                     l3660:
  6512                           
  6513                           ; BSR set to: 0
  6514  0020DA  0100               	movlb	0	; () banked
  6515  0020DC  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  6516  0020DE  D7F7               	goto	l3658
  6517  0020E0                     l3662:
  6518                           
  6519                           ; BSR set to: 0
  6520  0020E0  0100               	movlb	0	; () banked
  6521  0020E2  5189               	movf	___lwmod@divisor& (0+255),w,b
  6522  0020E4  0100               	movlb	0	; () banked
  6523  0020E6  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  6524  0020E8  0100               	movlb	0	; () banked
  6525  0020EA  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6526  0020EC  0100               	movlb	0	; () banked
  6527  0020EE  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  6528  0020F0  A0D8               	btfss	status,0,c
  6529  0020F2  D008               	goto	l3666
  6530                           
  6531                           ; BSR set to: 0
  6532  0020F4  0100               	movlb	0	; () banked
  6533  0020F6  5189               	movf	___lwmod@divisor& (0+255),w,b
  6534  0020F8  0100               	movlb	0	; () banked
  6535  0020FA  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  6536  0020FC  0100               	movlb	0	; () banked
  6537  0020FE  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6538  002100  0100               	movlb	0	; () banked
  6539  002102  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  6540  002104                     l3666:
  6541                           
  6542                           ; BSR set to: 0
  6543  002104  0100               	movlb	0	; () banked
  6544  002106  90D8               	bcf	status,0,c
  6545  002108  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  6546  00210A  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  6547                           
  6548                           ; BSR set to: 0
  6549  00210C  0100               	movlb	0	; () banked
  6550  00210E  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  6551  002110  D7E7               	goto	l3662
  6552  002112                     l1451:
  6553                           
  6554                           ; BSR set to: 0
  6555  002112  C087  F087         	movff	___lwmod@dividend,?___lwmod
  6556  002116  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  6557                           
  6558                           ; BSR set to: 0
  6559  00211A  0012               	return		;funcret
  6560  00211C                     __end_of___lwmod:
  6561                           	opt stack 0
  6562                           tblptru	equ	0xFF8
  6563                           tblptrh	equ	0xFF7
  6564                           tblptrl	equ	0xFF6
  6565                           tablat	equ	0xFF5
  6566                           prodh	equ	0xFF4
  6567                           prodl	equ	0xFF3
  6568                           intcon	equ	0xFF2
  6569                           intcon3	equ	0xFF0
  6570                           indf0	equ	0xFEF
  6571                           postinc0	equ	0xFEE
  6572                           fsr0h	equ	0xFEA
  6573                           fsr0l	equ	0xFE9
  6574                           wreg	equ	0xFE8
  6575                           postdec1	equ	0xFE5
  6576                           fsr1l	equ	0xFE1
  6577                           indf2	equ	0xFDF
  6578                           postinc2	equ	0xFDE
  6579                           postdec2	equ	0xFDD
  6580                           fsr2h	equ	0xFDA
  6581                           fsr2l	equ	0xFD9
  6582                           status	equ	0xFD8
  6583                           
  6584 ;; *************** function ___lwdiv *****************
  6585 ;; Defined at:
  6586 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  6587 ;; Parameters:    Size  Location     Type
  6588 ;;  dividend        2    0[BANK0 ] unsigned int 
  6589 ;;  divisor         2    2[BANK0 ] unsigned int 
  6590 ;; Auto vars:     Size  Location     Type
  6591 ;;  quotient        2    4[BANK0 ] unsigned int 
  6592 ;;  counter         1    6[BANK0 ] unsigned char 
  6593 ;; Return value:  Size  Location     Type
  6594 ;;                  2    0[BANK0 ] unsigned int 
  6595 ;; Registers used:
  6596 ;;		wreg, status,2, status,0
  6597 ;; Tracked objects:
  6598 ;;		On entry : 0/0
  6599 ;;		On exit  : 0/0
  6600 ;;		Unchanged: 0/0
  6601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6602 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6603 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6605 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6606 ;;Total ram usage:        7 bytes
  6607 ;; Hardware stack levels used:    1
  6608 ;; Hardware stack levels required when called:    7
  6609 ;; This function calls:
  6610 ;;		Nothing
  6611 ;; This function is called by:
  6612 ;;		_printf
  6613 ;; This function uses a non-reentrant model
  6614 ;;
  6615                           
  6616                           	psect	text27
  6617  001F68                     __ptext27:
  6618                           	opt stack 0
  6619  001F68                     ___lwdiv:
  6620                           	opt stack 20
  6621                           
  6622                           ; BSR set to: 0
  6623                           ;incstack = 0
  6624  001F68  0E00               	movlw	0
  6625  001F6A  0100               	movlb	0	; () banked
  6626  001F6C  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
  6627  001F6E  0E00               	movlw	0
  6628  001F70  6F84               	movwf	___lwdiv@quotient& (0+255),b
  6629                           
  6630                           ; BSR set to: 0
  6631  001F72  0100               	movlb	0	; () banked
  6632  001F74  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6633  001F76  0100               	movlb	0	; () banked
  6634  001F78  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  6635  001F7A  B4D8               	btfsc	status,2,c
  6636  001F7C  D02C               	goto	l1441
  6637                           
  6638                           ; BSR set to: 0
  6639  001F7E  0E01               	movlw	1
  6640  001F80  0100               	movlb	0	; () banked
  6641  001F82  6F86               	movwf	___lwdiv@counter& (0+255),b
  6642  001F84  D006               	goto	l3640
  6643  001F86                     l3638:
  6644                           
  6645                           ; BSR set to: 0
  6646  001F86  0100               	movlb	0	; () banked
  6647  001F88  90D8               	bcf	status,0,c
  6648  001F8A  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  6649  001F8C  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  6650  001F8E  0100               	movlb	0	; () banked
  6651  001F90  2B86               	incf	___lwdiv@counter& (0+255),f,b
  6652  001F92                     l3640:
  6653                           
  6654                           ; BSR set to: 0
  6655  001F92  0100               	movlb	0	; () banked
  6656  001F94  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  6657  001F96  D7F7               	goto	l3638
  6658  001F98                     l3642:
  6659                           
  6660                           ; BSR set to: 0
  6661  001F98  0100               	movlb	0	; () banked
  6662  001F9A  90D8               	bcf	status,0,c
  6663  001F9C  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
  6664  001F9E  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  6665                           
  6666                           ; BSR set to: 0
  6667  001FA0  0100               	movlb	0	; () banked
  6668  001FA2  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6669  001FA4  0100               	movlb	0	; () banked
  6670  001FA6  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  6671  001FA8  0100               	movlb	0	; () banked
  6672  001FAA  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6673  001FAC  0100               	movlb	0	; () banked
  6674  001FAE  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  6675  001FB0  A0D8               	btfss	status,0,c
  6676  001FB2  D00A               	goto	l3650
  6677                           
  6678                           ; BSR set to: 0
  6679  001FB4  0100               	movlb	0	; () banked
  6680  001FB6  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6681  001FB8  0100               	movlb	0	; () banked
  6682  001FBA  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  6683  001FBC  0100               	movlb	0	; () banked
  6684  001FBE  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6685  001FC0  0100               	movlb	0	; () banked
  6686  001FC2  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  6687                           
  6688                           ; BSR set to: 0
  6689  001FC4  0100               	movlb	0	; () banked
  6690  001FC6  8184               	bsf	___lwdiv@quotient& (0+255),0,b
  6691  001FC8                     l3650:
  6692                           
  6693                           ; BSR set to: 0
  6694  001FC8  0100               	movlb	0	; () banked
  6695  001FCA  90D8               	bcf	status,0,c
  6696  001FCC  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  6697  001FCE  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  6698                           
  6699                           ; BSR set to: 0
  6700  001FD0  0100               	movlb	0	; () banked
  6701  001FD2  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
  6702  001FD4  D7E1               	goto	l3642
  6703  001FD6                     l1441:
  6704                           
  6705                           ; BSR set to: 0
  6706  001FD6  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
  6707  001FDA  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6708                           
  6709                           ; BSR set to: 0
  6710  001FDE  0012               	return		;funcret
  6711  001FE0                     __end_of___lwdiv:
  6712                           	opt stack 0
  6713                           tblptru	equ	0xFF8
  6714                           tblptrh	equ	0xFF7
  6715                           tblptrl	equ	0xFF6
  6716                           tablat	equ	0xFF5
  6717                           prodh	equ	0xFF4
  6718                           prodl	equ	0xFF3
  6719                           intcon	equ	0xFF2
  6720                           intcon3	equ	0xFF0
  6721                           indf0	equ	0xFEF
  6722                           postinc0	equ	0xFEE
  6723                           fsr0h	equ	0xFEA
  6724                           fsr0l	equ	0xFE9
  6725                           wreg	equ	0xFE8
  6726                           postdec1	equ	0xFE5
  6727                           fsr1l	equ	0xFE1
  6728                           indf2	equ	0xFDF
  6729                           postinc2	equ	0xFDE
  6730                           postdec2	equ	0xFDD
  6731                           fsr2h	equ	0xFDA
  6732                           fsr2l	equ	0xFD9
  6733                           status	equ	0xFD8
  6734                           
  6735 ;; *************** function _lcdInst *****************
  6736 ;; Defined at:
  6737 ;;		line 13 in file "lcd.c"
  6738 ;; Parameters:    Size  Location     Type
  6739 ;;  data            1    wreg     unsigned char 
  6740 ;; Auto vars:     Size  Location     Type
  6741 ;;  data            1    2[BANK0 ] unsigned char 
  6742 ;; Return value:  Size  Location     Type
  6743 ;;                  1    wreg      void 
  6744 ;; Registers used:
  6745 ;;		wreg, status,2, status,0, cstack
  6746 ;; Tracked objects:
  6747 ;;		On entry : 0/0
  6748 ;;		On exit  : 0/0
  6749 ;;		Unchanged: 0/0
  6750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6752 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6754 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6755 ;;Total ram usage:        1 bytes
  6756 ;; Hardware stack levels used:    1
  6757 ;; Hardware stack levels required when called:    8
  6758 ;; This function calls:
  6759 ;;		_lcdNibble
  6760 ;; This function is called by:
  6761 ;;		_UI
  6762 ;;		_change_state_to_menu_start
  6763 ;;		_initLCD
  6764 ;;		_printRTC
  6765 ;;		_Loading
  6766 ;; This function uses a non-reentrant model
  6767 ;;
  6768                           
  6769                           	psect	text28
  6770  0027BC                     __ptext28:
  6771                           	opt stack 0
  6772  0027BC                     _lcdInst:
  6773                           	opt stack 20
  6774                           
  6775                           ; BSR set to: 0
  6776                           ;incstack = 0
  6777                           ;lcdInst@data stored from wreg
  6778  0027BC  0100               	movlb	0	; () banked
  6779  0027BE  6F82               	movwf	lcdInst@data& (0+255),b
  6780                           
  6781                           ;lcd.c: 14: LATDbits.LATD2 = 0;
  6782  0027C0  948C               	bcf	3980,2,c	;volatile
  6783                           
  6784                           ;lcd.c: 15: lcdNibble(data);
  6785  0027C2  0100               	movlb	0	; () banked
  6786  0027C4  5182               	movf	lcdInst@data& (0+255),w,b
  6787  0027C6  EC29  F010         	call	_lcdNibble
  6788  0027CA  0012               	return		;funcret
  6789  0027CC                     __end_of_lcdInst:
  6790                           	opt stack 0
  6791                           tblptru	equ	0xFF8
  6792                           tblptrh	equ	0xFF7
  6793                           tblptrl	equ	0xFF6
  6794                           tablat	equ	0xFF5
  6795                           prodh	equ	0xFF4
  6796                           prodl	equ	0xFF3
  6797                           intcon	equ	0xFF2
  6798                           intcon3	equ	0xFF0
  6799                           indf0	equ	0xFEF
  6800                           postinc0	equ	0xFEE
  6801                           fsr0h	equ	0xFEA
  6802                           fsr0l	equ	0xFE9
  6803                           wreg	equ	0xFE8
  6804                           postdec1	equ	0xFE5
  6805                           fsr1l	equ	0xFE1
  6806                           indf2	equ	0xFDF
  6807                           postinc2	equ	0xFDE
  6808                           postdec2	equ	0xFDD
  6809                           fsr2h	equ	0xFDA
  6810                           fsr2l	equ	0xFD9
  6811                           status	equ	0xFD8
  6812                           
  6813 ;; *************** function _lcdNibble *****************
  6814 ;; Defined at:
  6815 ;;		line 23 in file "lcd.c"
  6816 ;; Parameters:    Size  Location     Type
  6817 ;;  data            1    wreg     unsigned char 
  6818 ;; Auto vars:     Size  Location     Type
  6819 ;;  data            1    1[BANK0 ] unsigned char 
  6820 ;;  temp            1    0[BANK0 ] unsigned char 
  6821 ;; Return value:  Size  Location     Type
  6822 ;;                  1    wreg      void 
  6823 ;; Registers used:
  6824 ;;		wreg, status,2, status,0
  6825 ;; Tracked objects:
  6826 ;;		On entry : 0/0
  6827 ;;		On exit  : 0/0
  6828 ;;		Unchanged: 0/0
  6829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6831 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6833 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6834 ;;Total ram usage:        2 bytes
  6835 ;; Hardware stack levels used:    1
  6836 ;; Hardware stack levels required when called:    7
  6837 ;; This function calls:
  6838 ;;		Nothing
  6839 ;; This function is called by:
  6840 ;;		_lcdInst
  6841 ;;		_putch
  6842 ;; This function uses a non-reentrant model
  6843 ;;
  6844                           
  6845                           	psect	text29
  6846  002052                     __ptext29:
  6847                           	opt stack 0
  6848  002052                     _lcdNibble:
  6849                           	opt stack 20
  6850                           
  6851                           ;incstack = 0
  6852                           ;lcdNibble@data stored from wreg
  6853  002052  0100               	movlb	0	; () banked
  6854  002054  6F81               	movwf	lcdNibble@data& (0+255),b
  6855                           
  6856                           ;lcd.c: 25: char temp = data & 0xF0;
  6857  002056  0100               	movlb	0	; () banked
  6858  002058  5181               	movf	lcdNibble@data& (0+255),w,b
  6859  00205A  0BF0               	andlw	240
  6860  00205C  0100               	movlb	0	; () banked
  6861  00205E  6F80               	movwf	lcdNibble@temp& (0+255),b
  6862                           
  6863                           ;lcd.c: 26: LATD = LATD & 0x0F;
  6864  002060  508C               	movf	3980,w,c	;volatile
  6865  002062  0B0F               	andlw	15
  6866  002064  6E8C               	movwf	3980,c	;volatile
  6867                           
  6868                           ;lcd.c: 27: LATD = temp | LATD;
  6869  002066  0100               	movlb	0	; () banked
  6870  002068  5180               	movf	lcdNibble@temp& (0+255),w,b
  6871  00206A  108C               	iorwf	3980,w,c	;volatile
  6872  00206C  6E8C               	movwf	3980,c	;volatile
  6873                           
  6874                           ; BSR set to: 0
  6875                           ;lcd.c: 29: LATDbits.LATD3 = 1;
  6876  00206E  868C               	bsf	3980,3,c	;volatile
  6877                           
  6878                           ; BSR set to: 0
  6879                           ;lcd.c: 30: _delay((unsigned long)((25)*(32000000/4000000.0)));
  6880  002070  0E42               	movlw	66
  6881  002072                     u4727:
  6882  002072  2EE8               	decfsz	wreg,f,c
  6883  002074  D7FE               	bra	u4727
  6884  002076  D000               	nop2	
  6885                           
  6886                           ;lcd.c: 31: LATDbits.LATD3 = 0;
  6887  002078  968C               	bcf	3980,3,c	;volatile
  6888                           
  6889                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
  6890  00207A  0E42               	movlw	66
  6891  00207C                     u4737:
  6892  00207C  2EE8               	decfsz	wreg,f,c
  6893  00207E  D7FE               	bra	u4737
  6894  002080  D000               	nop2	
  6895                           
  6896                           ;lcd.c: 34: data = data << 4;
  6897  002082  0100               	movlb	0	; () banked
  6898  002084  3981               	swapf	lcdNibble@data& (0+255),w,b
  6899  002086  0BF0               	andlw	240
  6900  002088  0100               	movlb	0	; () banked
  6901  00208A  6F81               	movwf	lcdNibble@data& (0+255),b
  6902                           
  6903                           ;lcd.c: 36: temp = data & 0xF0;
  6904  00208C  0100               	movlb	0	; () banked
  6905  00208E  5181               	movf	lcdNibble@data& (0+255),w,b
  6906  002090  0BF0               	andlw	240
  6907  002092  0100               	movlb	0	; () banked
  6908  002094  6F80               	movwf	lcdNibble@temp& (0+255),b
  6909                           
  6910                           ;lcd.c: 37: LATD = LATD & 0x0F;
  6911  002096  508C               	movf	3980,w,c	;volatile
  6912  002098  0B0F               	andlw	15
  6913  00209A  6E8C               	movwf	3980,c	;volatile
  6914                           
  6915                           ;lcd.c: 38: LATD = temp | LATD;
  6916  00209C  0100               	movlb	0	; () banked
  6917  00209E  5180               	movf	lcdNibble@temp& (0+255),w,b
  6918  0020A0  108C               	iorwf	3980,w,c	;volatile
  6919  0020A2  6E8C               	movwf	3980,c	;volatile
  6920                           
  6921                           ; BSR set to: 0
  6922                           ;lcd.c: 40: LATDbits.LATD3 = 1;
  6923  0020A4  868C               	bsf	3980,3,c	;volatile
  6924                           
  6925                           ; BSR set to: 0
  6926                           ;lcd.c: 41: _delay((unsigned long)((25)*(32000000/4000000.0)));
  6927  0020A6  0E42               	movlw	66
  6928  0020A8                     u4747:
  6929  0020A8  2EE8               	decfsz	wreg,f,c
  6930  0020AA  D7FE               	bra	u4747
  6931  0020AC  D000               	nop2	
  6932                           
  6933                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  6934  0020AE  968C               	bcf	3980,3,c	;volatile
  6935                           
  6936                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
  6937  0020B0  0E42               	movlw	66
  6938  0020B2                     u4757:
  6939  0020B2  2EE8               	decfsz	wreg,f,c
  6940  0020B4  D7FE               	bra	u4757
  6941  0020B6  D000               	nop2	
  6942  0020B8  0012               	return		;funcret
  6943  0020BA                     __end_of_lcdNibble:
  6944                           	opt stack 0
  6945                           tblptru	equ	0xFF8
  6946                           tblptrh	equ	0xFF7
  6947                           tblptrl	equ	0xFF6
  6948                           tablat	equ	0xFF5
  6949                           prodh	equ	0xFF4
  6950                           prodl	equ	0xFF3
  6951                           intcon	equ	0xFF2
  6952                           intcon3	equ	0xFF0
  6953                           indf0	equ	0xFEF
  6954                           postinc0	equ	0xFEE
  6955                           fsr0h	equ	0xFEA
  6956                           fsr0l	equ	0xFE9
  6957                           wreg	equ	0xFE8
  6958                           postdec1	equ	0xFE5
  6959                           fsr1l	equ	0xFE1
  6960                           indf2	equ	0xFDF
  6961                           postinc2	equ	0xFDE
  6962                           postdec2	equ	0xFDD
  6963                           fsr2h	equ	0xFDA
  6964                           fsr2l	equ	0xFD9
  6965                           status	equ	0xFD8
  6966                           
  6967 ;; *************** function _getRTC *****************
  6968 ;; Defined at:
  6969 ;;		line 42 in file "RTC.c"
  6970 ;; Parameters:    Size  Location     Type
  6971 ;;		None
  6972 ;; Auto vars:     Size  Location     Type
  6973 ;;  i               2    3[BANK0 ] int 
  6974 ;; Return value:  Size  Location     Type
  6975 ;;                  1    wreg      void 
  6976 ;; Registers used:
  6977 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6978 ;; Tracked objects:
  6979 ;;		On entry : 0/0
  6980 ;;		On exit  : 0/0
  6981 ;;		Unchanged: 0/0
  6982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6984 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6986 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6987 ;;Total ram usage:        2 bytes
  6988 ;; Hardware stack levels used:    1
  6989 ;; Hardware stack levels required when called:    9
  6990 ;; This function calls:
  6991 ;;		_I2C_Master_Read
  6992 ;;		_I2C_Master_Start
  6993 ;;		_I2C_Master_Stop
  6994 ;;		_I2C_Master_Write
  6995 ;; This function is called by:
  6996 ;;		_printRTC
  6997 ;;		_initSortTimer
  6998 ;;		_getIR
  6999 ;; This function uses a non-reentrant model
  7000 ;;
  7001                           
  7002                           	psect	text30
  7003  001E68                     __ptext30:
  7004                           	opt stack 0
  7005  001E68                     _getRTC:
  7006                           	opt stack 18
  7007                           
  7008                           ;RTC.c: 46: I2C_Master_Start();
  7009                           
  7010                           ;incstack = 0
  7011  001E68  EC04  F014         	call	_I2C_Master_Start	;wreg free
  7012                           
  7013                           ;RTC.c: 47: I2C_Master_Write(0b11010000);
  7014  001E6C  0E00               	movlw	0
  7015  001E6E  0100               	movlb	0	; () banked
  7016  001E70  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7017  001E72  0ED0               	movlw	208
  7018  001E74  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7019  001E76  ECF2  F013         	call	_I2C_Master_Write	;wreg free
  7020                           
  7021                           ;RTC.c: 48: I2C_Master_Write(0x00);
  7022  001E7A  0E00               	movlw	0
  7023  001E7C  0100               	movlb	0	; () banked
  7024  001E7E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7025  001E80  0E00               	movlw	0
  7026  001E82  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7027  001E84  ECF2  F013         	call	_I2C_Master_Write	;wreg free
  7028                           
  7029                           ;RTC.c: 49: I2C_Master_Stop();
  7030  001E88  EC00  F014         	call	_I2C_Master_Stop	;wreg free
  7031                           
  7032                           ;RTC.c: 52: I2C_Master_Start();
  7033  001E8C  EC04  F014         	call	_I2C_Master_Start	;wreg free
  7034                           
  7035                           ;RTC.c: 53: I2C_Master_Write(0b11010001);
  7036  001E90  0E00               	movlw	0
  7037  001E92  0100               	movlb	0	; () banked
  7038  001E94  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7039  001E96  0ED1               	movlw	209
  7040  001E98  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7041  001E9A  ECF2  F013         	call	_I2C_Master_Write	;wreg free
  7042                           
  7043                           ;RTC.c: 54: for(int i = 0; i < 6; i++){
  7044  001E9E  0E00               	movlw	0
  7045  001EA0  0100               	movlb	0	; () banked
  7046  001EA2  6F84               	movwf	(getRTC@i+1)& (0+255),b
  7047  001EA4  0E00               	movlw	0
  7048  001EA6  6F83               	movwf	getRTC@i& (0+255),b
  7049  001EA8                     l3892:
  7050                           
  7051                           ; BSR set to: 0
  7052  001EA8  0100               	movlb	0	; () banked
  7053  001EAA  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  7054  001EAC  D008               	goto	l3896
  7055  001EAE  0100               	movlb	0	; () banked
  7056  001EB0  5184               	movf	(getRTC@i+1)& (0+255),w,b
  7057  001EB2  E115               	bnz	l3902
  7058  001EB4  0E06               	movlw	6
  7059  001EB6  0100               	movlb	0	; () banked
  7060  001EB8  5D83               	subwf	getRTC@i& (0+255),w,b
  7061  001EBA  B0D8               	btfsc	status,0,c
  7062  001EBC  D010               	goto	l3902
  7063  001EBE                     l3896:
  7064                           
  7065                           ; BSR set to: 0
  7066                           ;RTC.c: 55: time[i] = I2C_Master_Read(1);
  7067  001EBE  0ED4               	movlw	low _time
  7068  001EC0  0100               	movlb	0	; () banked
  7069  001EC2  2583               	addwf	getRTC@i& (0+255),w,b
  7070  001EC4  6ED9               	movwf	fsr2l,c
  7071  001EC6  0E00               	movlw	high _time
  7072  001EC8  0100               	movlb	0	; () banked
  7073  001ECA  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  7074  001ECC  6EDA               	movwf	fsr2h,c
  7075  001ECE  0E01               	movlw	1
  7076  001ED0  ECC7  F012         	call	_I2C_Master_Read
  7077  001ED4  6EDF               	movwf	indf2,c
  7078  001ED6  0100               	movlb	0	; () banked
  7079  001ED8  4B83               	infsnz	getRTC@i& (0+255),f,b
  7080  001EDA  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  7081  001EDC  D7E5               	goto	l3892
  7082  001EDE                     l3902:
  7083                           
  7084                           ; BSR set to: 0
  7085                           ;RTC.c: 56: }
  7086                           ;RTC.c: 57: time[6] = I2C_Master_Read(0);
  7087  001EDE  0E00               	movlw	0
  7088  001EE0  ECC7  F012         	call	_I2C_Master_Read
  7089  001EE4  0100               	movlb	0	; () banked
  7090  001EE6  6FDA               	movwf	(_time+6)& (0+255),b
  7091                           
  7092                           ;RTC.c: 58: I2C_Master_Stop();
  7093  001EE8  EC00  F014         	call	_I2C_Master_Stop	;wreg free
  7094  001EEC  0012               	return		;funcret
  7095  001EEE                     __end_of_getRTC:
  7096                           	opt stack 0
  7097                           tblptru	equ	0xFF8
  7098                           tblptrh	equ	0xFF7
  7099                           tblptrl	equ	0xFF6
  7100                           tablat	equ	0xFF5
  7101                           prodh	equ	0xFF4
  7102                           prodl	equ	0xFF3
  7103                           intcon	equ	0xFF2
  7104                           intcon3	equ	0xFF0
  7105                           indf0	equ	0xFEF
  7106                           postinc0	equ	0xFEE
  7107                           fsr0h	equ	0xFEA
  7108                           fsr0l	equ	0xFE9
  7109                           wreg	equ	0xFE8
  7110                           postdec1	equ	0xFE5
  7111                           fsr1l	equ	0xFE1
  7112                           indf2	equ	0xFDF
  7113                           postinc2	equ	0xFDE
  7114                           postdec2	equ	0xFDD
  7115                           fsr2h	equ	0xFDA
  7116                           fsr2l	equ	0xFD9
  7117                           status	equ	0xFD8
  7118                           
  7119 ;; *************** function _I2C_Master_Write *****************
  7120 ;; Defined at:
  7121 ;;		line 47 in file "I2C.c"
  7122 ;; Parameters:    Size  Location     Type
  7123 ;;  d               2    1[BANK0 ] unsigned int 
  7124 ;; Auto vars:     Size  Location     Type
  7125 ;;		None
  7126 ;; Return value:  Size  Location     Type
  7127 ;;                  1    wreg      void 
  7128 ;; Registers used:
  7129 ;;		wreg, status,2, status,0, cstack
  7130 ;; Tracked objects:
  7131 ;;		On entry : 0/0
  7132 ;;		On exit  : 0/0
  7133 ;;		Unchanged: 0/0
  7134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7135 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7138 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7139 ;;Total ram usage:        2 bytes
  7140 ;; Hardware stack levels used:    1
  7141 ;; Hardware stack levels required when called:    8
  7142 ;; This function calls:
  7143 ;;		_I2C_Master_Wait
  7144 ;; This function is called by:
  7145 ;;		_loadRTC
  7146 ;;		_getRTC
  7147 ;; This function uses a non-reentrant model
  7148 ;;
  7149                           
  7150                           	psect	text31
  7151  0027E4                     __ptext31:
  7152                           	opt stack 0
  7153  0027E4                     _I2C_Master_Write:
  7154                           	opt stack 18
  7155                           
  7156                           ;I2C.c: 49: I2C_Master_Wait();
  7157                           
  7158                           ;incstack = 0
  7159  0027E4  ECB0  F013         	call	_I2C_Master_Wait	;wreg free
  7160                           
  7161                           ;I2C.c: 50: SSPBUF = d;
  7162  0027E8  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  7163  0027EC  0012               	return		;funcret
  7164  0027EE                     __end_of_I2C_Master_Write:
  7165                           	opt stack 0
  7166                           tblptru	equ	0xFF8
  7167                           tblptrh	equ	0xFF7
  7168                           tblptrl	equ	0xFF6
  7169                           tablat	equ	0xFF5
  7170                           prodh	equ	0xFF4
  7171                           prodl	equ	0xFF3
  7172                           intcon	equ	0xFF2
  7173                           intcon3	equ	0xFF0
  7174                           indf0	equ	0xFEF
  7175                           postinc0	equ	0xFEE
  7176                           fsr0h	equ	0xFEA
  7177                           fsr0l	equ	0xFE9
  7178                           wreg	equ	0xFE8
  7179                           postdec1	equ	0xFE5
  7180                           fsr1l	equ	0xFE1
  7181                           indf2	equ	0xFDF
  7182                           postinc2	equ	0xFDE
  7183                           postdec2	equ	0xFDD
  7184                           fsr2h	equ	0xFDA
  7185                           fsr2l	equ	0xFD9
  7186                           status	equ	0xFD8
  7187                           
  7188 ;; *************** function _I2C_Master_Stop *****************
  7189 ;; Defined at:
  7190 ;;		line 41 in file "I2C.c"
  7191 ;; Parameters:    Size  Location     Type
  7192 ;;		None
  7193 ;; Auto vars:     Size  Location     Type
  7194 ;;		None
  7195 ;; Return value:  Size  Location     Type
  7196 ;;                  1    wreg      void 
  7197 ;; Registers used:
  7198 ;;		wreg, status,2, status,0, cstack
  7199 ;; Tracked objects:
  7200 ;;		On entry : 0/0
  7201 ;;		On exit  : 0/0
  7202 ;;		Unchanged: 0/0
  7203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7208 ;;Total ram usage:        0 bytes
  7209 ;; Hardware stack levels used:    1
  7210 ;; Hardware stack levels required when called:    8
  7211 ;; This function calls:
  7212 ;;		_I2C_Master_Wait
  7213 ;; This function is called by:
  7214 ;;		_loadRTC
  7215 ;;		_getRTC
  7216 ;; This function uses a non-reentrant model
  7217 ;;
  7218                           
  7219                           	psect	text32
  7220  002800                     __ptext32:
  7221                           	opt stack 0
  7222  002800                     _I2C_Master_Stop:
  7223                           	opt stack 18
  7224                           
  7225                           ;I2C.c: 43: I2C_Master_Wait();
  7226                           
  7227                           ;incstack = 0
  7228  002800  ECB0  F013         	call	_I2C_Master_Wait	;wreg free
  7229                           
  7230                           ;I2C.c: 44: PEN = 1;
  7231  002804  84C5               	bsf	4037,2,c	;volatile
  7232  002806  0012               	return		;funcret
  7233  002808                     __end_of_I2C_Master_Stop:
  7234                           	opt stack 0
  7235                           tblptru	equ	0xFF8
  7236                           tblptrh	equ	0xFF7
  7237                           tblptrl	equ	0xFF6
  7238                           tablat	equ	0xFF5
  7239                           prodh	equ	0xFF4
  7240                           prodl	equ	0xFF3
  7241                           intcon	equ	0xFF2
  7242                           intcon3	equ	0xFF0
  7243                           indf0	equ	0xFEF
  7244                           postinc0	equ	0xFEE
  7245                           fsr0h	equ	0xFEA
  7246                           fsr0l	equ	0xFE9
  7247                           wreg	equ	0xFE8
  7248                           postdec1	equ	0xFE5
  7249                           fsr1l	equ	0xFE1
  7250                           indf2	equ	0xFDF
  7251                           postinc2	equ	0xFDE
  7252                           postdec2	equ	0xFDD
  7253                           fsr2h	equ	0xFDA
  7254                           fsr2l	equ	0xFD9
  7255                           status	equ	0xFD8
  7256                           
  7257 ;; *************** function _I2C_Master_Start *****************
  7258 ;; Defined at:
  7259 ;;		line 29 in file "I2C.c"
  7260 ;; Parameters:    Size  Location     Type
  7261 ;;		None
  7262 ;; Auto vars:     Size  Location     Type
  7263 ;;		None
  7264 ;; Return value:  Size  Location     Type
  7265 ;;                  1    wreg      void 
  7266 ;; Registers used:
  7267 ;;		wreg, status,2, status,0, cstack
  7268 ;; Tracked objects:
  7269 ;;		On entry : 0/0
  7270 ;;		On exit  : 0/0
  7271 ;;		Unchanged: 0/0
  7272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7276 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7277 ;;Total ram usage:        0 bytes
  7278 ;; Hardware stack levels used:    1
  7279 ;; Hardware stack levels required when called:    8
  7280 ;; This function calls:
  7281 ;;		_I2C_Master_Wait
  7282 ;; This function is called by:
  7283 ;;		_loadRTC
  7284 ;;		_getRTC
  7285 ;; This function uses a non-reentrant model
  7286 ;;
  7287                           
  7288                           	psect	text33
  7289  002808                     __ptext33:
  7290                           	opt stack 0
  7291  002808                     _I2C_Master_Start:
  7292                           	opt stack 18
  7293                           
  7294                           ;I2C.c: 31: I2C_Master_Wait();
  7295                           
  7296                           ;incstack = 0
  7297  002808  ECB0  F013         	call	_I2C_Master_Wait	;wreg free
  7298                           
  7299                           ;I2C.c: 32: SEN = 1;
  7300  00280C  80C5               	bsf	4037,0,c	;volatile
  7301  00280E  0012               	return		;funcret
  7302  002810                     __end_of_I2C_Master_Start:
  7303                           	opt stack 0
  7304                           tblptru	equ	0xFF8
  7305                           tblptrh	equ	0xFF7
  7306                           tblptrl	equ	0xFF6
  7307                           tablat	equ	0xFF5
  7308                           prodh	equ	0xFF4
  7309                           prodl	equ	0xFF3
  7310                           intcon	equ	0xFF2
  7311                           intcon3	equ	0xFF0
  7312                           indf0	equ	0xFEF
  7313                           postinc0	equ	0xFEE
  7314                           fsr0h	equ	0xFEA
  7315                           fsr0l	equ	0xFE9
  7316                           wreg	equ	0xFE8
  7317                           postdec1	equ	0xFE5
  7318                           fsr1l	equ	0xFE1
  7319                           indf2	equ	0xFDF
  7320                           postinc2	equ	0xFDE
  7321                           postdec2	equ	0xFDD
  7322                           fsr2h	equ	0xFDA
  7323                           fsr2l	equ	0xFD9
  7324                           status	equ	0xFD8
  7325                           
  7326 ;; *************** function _I2C_Master_Read *****************
  7327 ;; Defined at:
  7328 ;;		line 53 in file "I2C.c"
  7329 ;; Parameters:    Size  Location     Type
  7330 ;;  a               1    wreg     unsigned char 
  7331 ;; Auto vars:     Size  Location     Type
  7332 ;;  a               1    1[BANK0 ] unsigned char 
  7333 ;;  temp            1    2[BANK0 ] unsigned char 
  7334 ;; Return value:  Size  Location     Type
  7335 ;;                  1    wreg      unsigned char 
  7336 ;; Registers used:
  7337 ;;		wreg, status,2, status,0, cstack
  7338 ;; Tracked objects:
  7339 ;;		On entry : 0/0
  7340 ;;		On exit  : 0/0
  7341 ;;		Unchanged: 0/0
  7342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7344 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7346 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7347 ;;Total ram usage:        2 bytes
  7348 ;; Hardware stack levels used:    1
  7349 ;; Hardware stack levels required when called:    8
  7350 ;; This function calls:
  7351 ;;		_I2C_Master_Wait
  7352 ;; This function is called by:
  7353 ;;		_getRTC
  7354 ;; This function uses a non-reentrant model
  7355 ;;
  7356                           
  7357                           	psect	text34
  7358  00258E                     __ptext34:
  7359                           	opt stack 0
  7360  00258E                     _I2C_Master_Read:
  7361                           	opt stack 18
  7362                           
  7363                           ;incstack = 0
  7364                           ;I2C_Master_Read@a stored from wreg
  7365  00258E  0100               	movlb	0	; () banked
  7366  002590  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  7367                           
  7368                           ;I2C.c: 55: unsigned char temp;
  7369                           ;I2C.c: 56: I2C_Master_Wait();
  7370  002592  ECB0  F013         	call	_I2C_Master_Wait	;wreg free
  7371                           
  7372                           ;I2C.c: 57: RCEN = 1;
  7373  002596  86C5               	bsf	4037,3,c	;volatile
  7374                           
  7375                           ;I2C.c: 58: I2C_Master_Wait();
  7376  002598  ECB0  F013         	call	_I2C_Master_Wait	;wreg free
  7377                           
  7378                           ;I2C.c: 59: temp = SSPBUF;
  7379  00259C  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  7380                           
  7381                           ;I2C.c: 60: I2C_Master_Wait();
  7382  0025A0  ECB0  F013         	call	_I2C_Master_Wait	;wreg free
  7383                           
  7384                           ;I2C.c: 61: ACKDT = (a)?0:1;
  7385  0025A4  0100               	movlb	0	; () banked
  7386  0025A6  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  7387  0025A8  0100               	movlb	0	; () banked
  7388  0025AA  A4D8               	btfss	status,2,c
  7389  0025AC  D002               	goto	u2310
  7390  0025AE  8AC5               	bsf	4037,5,c	;volatile
  7391  0025B0  D001               	goto	l3604
  7392  0025B2                     u2310:
  7393  0025B2  9AC5               	bcf	4037,5,c	;volatile
  7394  0025B4                     l3604:
  7395                           
  7396                           ;I2C.c: 62: ACKEN = 1;
  7397  0025B4  88C5               	bsf	4037,4,c	;volatile
  7398                           
  7399                           ;I2C.c: 63: return temp;
  7400  0025B6  0100               	movlb	0	; () banked
  7401  0025B8  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  7402  0025BA  0012               	return	
  7403  0025BC                     __end_of_I2C_Master_Read:
  7404                           	opt stack 0
  7405                           tblptru	equ	0xFF8
  7406                           tblptrh	equ	0xFF7
  7407                           tblptrl	equ	0xFF6
  7408                           tablat	equ	0xFF5
  7409                           prodh	equ	0xFF4
  7410                           prodl	equ	0xFF3
  7411                           intcon	equ	0xFF2
  7412                           intcon3	equ	0xFF0
  7413                           indf0	equ	0xFEF
  7414                           postinc0	equ	0xFEE
  7415                           fsr0h	equ	0xFEA
  7416                           fsr0l	equ	0xFE9
  7417                           wreg	equ	0xFE8
  7418                           postdec1	equ	0xFE5
  7419                           fsr1l	equ	0xFE1
  7420                           indf2	equ	0xFDF
  7421                           postinc2	equ	0xFDE
  7422                           postdec2	equ	0xFDD
  7423                           fsr2h	equ	0xFDA
  7424                           fsr2l	equ	0xFD9
  7425                           status	equ	0xFD8
  7426                           
  7427 ;; *************** function _I2C_Master_Wait *****************
  7428 ;; Defined at:
  7429 ;;		line 24 in file "I2C.c"
  7430 ;; Parameters:    Size  Location     Type
  7431 ;;		None
  7432 ;; Auto vars:     Size  Location     Type
  7433 ;;		None
  7434 ;; Return value:  Size  Location     Type
  7435 ;;                  1    wreg      void 
  7436 ;; Registers used:
  7437 ;;		wreg, status,2, status,0
  7438 ;; Tracked objects:
  7439 ;;		On entry : 0/0
  7440 ;;		On exit  : 0/0
  7441 ;;		Unchanged: 0/0
  7442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7445 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7446 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7447 ;;Total ram usage:        1 bytes
  7448 ;; Hardware stack levels used:    1
  7449 ;; Hardware stack levels required when called:    7
  7450 ;; This function calls:
  7451 ;;		Nothing
  7452 ;; This function is called by:
  7453 ;;		_I2C_Master_Start
  7454 ;;		_I2C_Master_Stop
  7455 ;;		_I2C_Master_Write
  7456 ;;		_I2C_Master_Read
  7457 ;;		_I2C_Master_RepeatedStart
  7458 ;; This function uses a non-reentrant model
  7459 ;;
  7460                           
  7461                           	psect	text35
  7462  002760                     __ptext35:
  7463                           	opt stack 0
  7464  002760                     _I2C_Master_Wait:
  7465                           	opt stack 18
  7466  002760                     l120:
  7467  002760  B4C7               	btfsc	4039,2,c	;volatile
  7468  002762  D7FE               	goto	l120
  7469  002764  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  7470  002768  0E1F               	movlw	31
  7471  00276A  0100               	movlb	0	; () banked
  7472  00276C  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  7473  00276E  B4D8               	btfsc	status,2,c
  7474  002770  0012               	return	
  7475  002772  D7F6               	goto	l120
  7476  002774                     __end_of_I2C_Master_Wait:
  7477                           	opt stack 0
  7478                           tblptru	equ	0xFF8
  7479                           tblptrh	equ	0xFF7
  7480                           tblptrl	equ	0xFF6
  7481                           tablat	equ	0xFF5
  7482                           prodh	equ	0xFF4
  7483                           prodl	equ	0xFF3
  7484                           intcon	equ	0xFF2
  7485                           intcon3	equ	0xFF0
  7486                           indf0	equ	0xFEF
  7487                           postinc0	equ	0xFEE
  7488                           fsr0h	equ	0xFEA
  7489                           fsr0l	equ	0xFE9
  7490                           wreg	equ	0xFE8
  7491                           postdec1	equ	0xFE5
  7492                           fsr1l	equ	0xFE1
  7493                           indf2	equ	0xFDF
  7494                           postinc2	equ	0xFDE
  7495                           postdec2	equ	0xFDD
  7496                           fsr2h	equ	0xFDA
  7497                           fsr2l	equ	0xFD9
  7498                           status	equ	0xFD8
  7499                           
  7500 ;; *************** function ___awmod *****************
  7501 ;; Defined at:
  7502 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  7503 ;; Parameters:    Size  Location     Type
  7504 ;;  dividend        2    0[BANK0 ] int 
  7505 ;;  divisor         2    2[BANK0 ] int 
  7506 ;; Auto vars:     Size  Location     Type
  7507 ;;  sign            1    5[BANK0 ] unsigned char 
  7508 ;;  counter         1    4[BANK0 ] unsigned char 
  7509 ;; Return value:  Size  Location     Type
  7510 ;;                  2    0[BANK0 ] int 
  7511 ;; Registers used:
  7512 ;;		wreg, status,2, status,0
  7513 ;; Tracked objects:
  7514 ;;		On entry : 0/0
  7515 ;;		On exit  : 0/0
  7516 ;;		Unchanged: 0/0
  7517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7518 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7519 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7521 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7522 ;;Total ram usage:        6 bytes
  7523 ;; Hardware stack levels used:    1
  7524 ;; Hardware stack levels required when called:    7
  7525 ;; This function calls:
  7526 ;;		Nothing
  7527 ;; This function is called by:
  7528 ;;		_UI
  7529 ;; This function uses a non-reentrant model
  7530 ;;
  7531                           
  7532                           	psect	text36
  7533  001B64                     __ptext36:
  7534                           	opt stack 0
  7535  001B64                     ___awmod:
  7536                           	opt stack 22
  7537                           
  7538                           ; BSR set to: 0
  7539                           ;incstack = 0
  7540  001B64  0E00               	movlw	0
  7541  001B66  0100               	movlb	0	; () banked
  7542  001B68  6F85               	movwf	___awmod@sign& (0+255),b
  7543                           
  7544                           ; BSR set to: 0
  7545  001B6A  0100               	movlb	0	; () banked
  7546  001B6C  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  7547  001B6E  D008               	goto	l4626
  7548                           
  7549                           ; BSR set to: 0
  7550  001B70  0100               	movlb	0	; () banked
  7551  001B72  6D80               	negf	___awmod@dividend& (0+255),b
  7552  001B74  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  7553  001B76  B0D8               	btfsc	status,0,c
  7554  001B78  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  7555                           
  7556                           ; BSR set to: 0
  7557  001B7A  0E01               	movlw	1
  7558  001B7C  0100               	movlb	0	; () banked
  7559  001B7E  6F85               	movwf	___awmod@sign& (0+255),b
  7560  001B80                     l4626:
  7561                           
  7562                           ; BSR set to: 0
  7563  001B80  0100               	movlb	0	; () banked
  7564  001B82  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  7565  001B84  D005               	goto	l4630
  7566                           
  7567                           ; BSR set to: 0
  7568  001B86  0100               	movlb	0	; () banked
  7569  001B88  6D82               	negf	___awmod@divisor& (0+255),b
  7570  001B8A  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  7571  001B8C  B0D8               	btfsc	status,0,c
  7572  001B8E  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  7573  001B90                     l4630:
  7574                           
  7575                           ; BSR set to: 0
  7576  001B90  0100               	movlb	0	; () banked
  7577  001B92  5182               	movf	___awmod@divisor& (0+255),w,b
  7578  001B94  0100               	movlb	0	; () banked
  7579  001B96  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  7580  001B98  B4D8               	btfsc	status,2,c
  7581  001B9A  D026               	goto	l4646
  7582                           
  7583                           ; BSR set to: 0
  7584  001B9C  0E01               	movlw	1
  7585  001B9E  0100               	movlb	0	; () banked
  7586  001BA0  6F84               	movwf	___awmod@counter& (0+255),b
  7587  001BA2  D006               	goto	l4636
  7588  001BA4                     l4634:
  7589                           
  7590                           ; BSR set to: 0
  7591  001BA4  0100               	movlb	0	; () banked
  7592  001BA6  90D8               	bcf	status,0,c
  7593  001BA8  3782               	rlcf	___awmod@divisor& (0+255),f,b
  7594  001BAA  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  7595  001BAC  0100               	movlb	0	; () banked
  7596  001BAE  2B84               	incf	___awmod@counter& (0+255),f,b
  7597  001BB0                     l4636:
  7598                           
  7599                           ; BSR set to: 0
  7600  001BB0  0100               	movlb	0	; () banked
  7601  001BB2  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  7602  001BB4  D7F7               	goto	l4634
  7603  001BB6                     l4638:
  7604                           
  7605                           ; BSR set to: 0
  7606  001BB6  0100               	movlb	0	; () banked
  7607  001BB8  5182               	movf	___awmod@divisor& (0+255),w,b
  7608  001BBA  0100               	movlb	0	; () banked
  7609  001BBC  5D80               	subwf	___awmod@dividend& (0+255),w,b
  7610  001BBE  0100               	movlb	0	; () banked
  7611  001BC0  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  7612  001BC2  0100               	movlb	0	; () banked
  7613  001BC4  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  7614  001BC6  A0D8               	btfss	status,0,c
  7615  001BC8  D008               	goto	l4642
  7616                           
  7617                           ; BSR set to: 0
  7618  001BCA  0100               	movlb	0	; () banked
  7619  001BCC  5182               	movf	___awmod@divisor& (0+255),w,b
  7620  001BCE  0100               	movlb	0	; () banked
  7621  001BD0  5F80               	subwf	___awmod@dividend& (0+255),f,b
  7622  001BD2  0100               	movlb	0	; () banked
  7623  001BD4  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  7624  001BD6  0100               	movlb	0	; () banked
  7625  001BD8  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  7626  001BDA                     l4642:
  7627                           
  7628                           ; BSR set to: 0
  7629  001BDA  0100               	movlb	0	; () banked
  7630  001BDC  90D8               	bcf	status,0,c
  7631  001BDE  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  7632  001BE0  3382               	rrcf	___awmod@divisor& (0+255),f,b
  7633                           
  7634                           ; BSR set to: 0
  7635  001BE2  0100               	movlb	0	; () banked
  7636  001BE4  2F84               	decfsz	___awmod@counter& (0+255),f,b
  7637  001BE6  D7E7               	goto	l4638
  7638  001BE8                     l4646:
  7639                           
  7640                           ; BSR set to: 0
  7641  001BE8  0100               	movlb	0	; () banked
  7642  001BEA  5185               	movf	___awmod@sign& (0+255),w,b
  7643  001BEC  0100               	movlb	0	; () banked
  7644  001BEE  B4D8               	btfsc	status,2,c
  7645  001BF0  D005               	goto	l4650
  7646                           
  7647                           ; BSR set to: 0
  7648  001BF2  0100               	movlb	0	; () banked
  7649  001BF4  6D80               	negf	___awmod@dividend& (0+255),b
  7650  001BF6  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  7651  001BF8  B0D8               	btfsc	status,0,c
  7652  001BFA  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  7653  001BFC                     l4650:
  7654                           
  7655                           ; BSR set to: 0
  7656  001BFC  C080  F080         	movff	___awmod@dividend,?___awmod
  7657  001C00  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  7658  001C04  0012               	return	
  7659  001C06                     __end_of___awmod:
  7660                           	opt stack 0
  7661                           tblptru	equ	0xFF8
  7662                           tblptrh	equ	0xFF7
  7663                           tblptrl	equ	0xFF6
  7664                           tablat	equ	0xFF5
  7665                           prodh	equ	0xFF4
  7666                           prodl	equ	0xFF3
  7667                           intcon	equ	0xFF2
  7668                           intcon3	equ	0xFF0
  7669                           indf0	equ	0xFEF
  7670                           postinc0	equ	0xFEE
  7671                           fsr0h	equ	0xFEA
  7672                           fsr0l	equ	0xFE9
  7673                           wreg	equ	0xFE8
  7674                           postdec1	equ	0xFE5
  7675                           fsr1l	equ	0xFE1
  7676                           indf2	equ	0xFDF
  7677                           postinc2	equ	0xFDE
  7678                           postdec2	equ	0xFDD
  7679                           fsr2h	equ	0xFDA
  7680                           fsr2l	equ	0xFD9
  7681                           status	equ	0xFD8
  7682                           
  7683 ;; *************** function ___awdiv *****************
  7684 ;; Defined at:
  7685 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  7686 ;; Parameters:    Size  Location     Type
  7687 ;;  dividend        2    6[BANK0 ] int 
  7688 ;;  divisor         2    8[BANK0 ] int 
  7689 ;; Auto vars:     Size  Location     Type
  7690 ;;  quotient        2   12[BANK0 ] int 
  7691 ;;  sign            1   11[BANK0 ] unsigned char 
  7692 ;;  counter         1   10[BANK0 ] unsigned char 
  7693 ;; Return value:  Size  Location     Type
  7694 ;;                  2    6[BANK0 ] int 
  7695 ;; Registers used:
  7696 ;;		wreg, status,2, status,0
  7697 ;; Tracked objects:
  7698 ;;		On entry : 0/0
  7699 ;;		On exit  : 0/0
  7700 ;;		Unchanged: 0/0
  7701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7702 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7703 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7705 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7706 ;;Total ram usage:        8 bytes
  7707 ;; Hardware stack levels used:    1
  7708 ;; Hardware stack levels required when called:    7
  7709 ;; This function calls:
  7710 ;;		Nothing
  7711 ;; This function is called by:
  7712 ;;		_UI
  7713 ;; This function uses a non-reentrant model
  7714 ;;
  7715                           
  7716                           	psect	text37
  7717  0019EA                     __ptext37:
  7718                           	opt stack 0
  7719  0019EA                     ___awdiv:
  7720                           	opt stack 22
  7721                           
  7722                           ; BSR set to: 0
  7723                           ;incstack = 0
  7724  0019EA  0E00               	movlw	0
  7725  0019EC  0100               	movlb	0	; () banked
  7726  0019EE  6F8B               	movwf	___awdiv@sign& (0+255),b
  7727                           
  7728                           ; BSR set to: 0
  7729  0019F0  0100               	movlb	0	; () banked
  7730  0019F2  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7731  0019F4  D008               	goto	l4582
  7732                           
  7733                           ; BSR set to: 0
  7734  0019F6  0100               	movlb	0	; () banked
  7735  0019F8  6D88               	negf	___awdiv@divisor& (0+255),b
  7736  0019FA  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  7737  0019FC  B0D8               	btfsc	status,0,c
  7738  0019FE  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  7739                           
  7740                           ; BSR set to: 0
  7741  001A00  0E01               	movlw	1
  7742  001A02  0100               	movlb	0	; () banked
  7743  001A04  6F8B               	movwf	___awdiv@sign& (0+255),b
  7744  001A06                     l4582:
  7745                           
  7746                           ; BSR set to: 0
  7747  001A06  0100               	movlb	0	; () banked
  7748  001A08  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  7749  001A0A  D008               	goto	l4588
  7750                           
  7751                           ; BSR set to: 0
  7752  001A0C  0100               	movlb	0	; () banked
  7753  001A0E  6D86               	negf	___awdiv@dividend& (0+255),b
  7754  001A10  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  7755  001A12  B0D8               	btfsc	status,0,c
  7756  001A14  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  7757                           
  7758                           ; BSR set to: 0
  7759  001A16  0E01               	movlw	1
  7760  001A18  0100               	movlb	0	; () banked
  7761  001A1A  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  7762  001A1C                     l4588:
  7763                           
  7764                           ; BSR set to: 0
  7765  001A1C  0E00               	movlw	0
  7766  001A1E  0100               	movlb	0	; () banked
  7767  001A20  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  7768  001A22  0E00               	movlw	0
  7769  001A24  6F8C               	movwf	___awdiv@quotient& (0+255),b
  7770                           
  7771                           ; BSR set to: 0
  7772  001A26  0100               	movlb	0	; () banked
  7773  001A28  5188               	movf	___awdiv@divisor& (0+255),w,b
  7774  001A2A  0100               	movlb	0	; () banked
  7775  001A2C  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  7776  001A2E  B4D8               	btfsc	status,2,c
  7777  001A30  D02C               	goto	l4610
  7778                           
  7779                           ; BSR set to: 0
  7780  001A32  0E01               	movlw	1
  7781  001A34  0100               	movlb	0	; () banked
  7782  001A36  6F8A               	movwf	___awdiv@counter& (0+255),b
  7783  001A38  D006               	goto	l4596
  7784  001A3A                     l4594:
  7785                           
  7786                           ; BSR set to: 0
  7787  001A3A  0100               	movlb	0	; () banked
  7788  001A3C  90D8               	bcf	status,0,c
  7789  001A3E  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  7790  001A40  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  7791  001A42  0100               	movlb	0	; () banked
  7792  001A44  2B8A               	incf	___awdiv@counter& (0+255),f,b
  7793  001A46                     l4596:
  7794                           
  7795                           ; BSR set to: 0
  7796  001A46  0100               	movlb	0	; () banked
  7797  001A48  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7798  001A4A  D7F7               	goto	l4594
  7799  001A4C                     l4598:
  7800                           
  7801                           ; BSR set to: 0
  7802  001A4C  0100               	movlb	0	; () banked
  7803  001A4E  90D8               	bcf	status,0,c
  7804  001A50  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  7805  001A52  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  7806                           
  7807                           ; BSR set to: 0
  7808  001A54  0100               	movlb	0	; () banked
  7809  001A56  5188               	movf	___awdiv@divisor& (0+255),w,b
  7810  001A58  0100               	movlb	0	; () banked
  7811  001A5A  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  7812  001A5C  0100               	movlb	0	; () banked
  7813  001A5E  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7814  001A60  0100               	movlb	0	; () banked
  7815  001A62  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  7816  001A64  A0D8               	btfss	status,0,c
  7817  001A66  D00A               	goto	l4606
  7818                           
  7819                           ; BSR set to: 0
  7820  001A68  0100               	movlb	0	; () banked
  7821  001A6A  5188               	movf	___awdiv@divisor& (0+255),w,b
  7822  001A6C  0100               	movlb	0	; () banked
  7823  001A6E  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  7824  001A70  0100               	movlb	0	; () banked
  7825  001A72  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7826  001A74  0100               	movlb	0	; () banked
  7827  001A76  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  7828                           
  7829                           ; BSR set to: 0
  7830  001A78  0100               	movlb	0	; () banked
  7831  001A7A  818C               	bsf	___awdiv@quotient& (0+255),0,b
  7832  001A7C                     l4606:
  7833                           
  7834                           ; BSR set to: 0
  7835  001A7C  0100               	movlb	0	; () banked
  7836  001A7E  90D8               	bcf	status,0,c
  7837  001A80  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  7838  001A82  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  7839                           
  7840                           ; BSR set to: 0
  7841  001A84  0100               	movlb	0	; () banked
  7842  001A86  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  7843  001A88  D7E1               	goto	l4598
  7844  001A8A                     l4610:
  7845                           
  7846                           ; BSR set to: 0
  7847  001A8A  0100               	movlb	0	; () banked
  7848  001A8C  518B               	movf	___awdiv@sign& (0+255),w,b
  7849  001A8E  0100               	movlb	0	; () banked
  7850  001A90  B4D8               	btfsc	status,2,c
  7851  001A92  D005               	goto	l4614
  7852                           
  7853                           ; BSR set to: 0
  7854  001A94  0100               	movlb	0	; () banked
  7855  001A96  6D8C               	negf	___awdiv@quotient& (0+255),b
  7856  001A98  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  7857  001A9A  B0D8               	btfsc	status,0,c
  7858  001A9C  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  7859  001A9E                     l4614:
  7860                           
  7861                           ; BSR set to: 0
  7862  001A9E  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  7863  001AA2  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  7864  001AA6  0012               	return	
  7865  001AA8                     __end_of___awdiv:
  7866                           	opt stack 0
  7867                           tblptru	equ	0xFF8
  7868                           tblptrh	equ	0xFF7
  7869                           tblptrl	equ	0xFF6
  7870                           tablat	equ	0xFF5
  7871                           prodh	equ	0xFF4
  7872                           prodl	equ	0xFF3
  7873                           intcon	equ	0xFF2
  7874                           intcon3	equ	0xFF0
  7875                           indf0	equ	0xFEF
  7876                           postinc0	equ	0xFEE
  7877                           fsr0h	equ	0xFEA
  7878                           fsr0l	equ	0xFE9
  7879                           wreg	equ	0xFE8
  7880                           postdec1	equ	0xFE5
  7881                           fsr1l	equ	0xFE1
  7882                           indf2	equ	0xFDF
  7883                           postinc2	equ	0xFDE
  7884                           postdec2	equ	0xFDD
  7885                           fsr2h	equ	0xFDA
  7886                           fsr2l	equ	0xFD9
  7887                           status	equ	0xFD8
  7888                           
  7889 ;; *************** function _PortTestA5 *****************
  7890 ;; Defined at:
  7891 ;;		line 27 in file "PortHigh.c"
  7892 ;; Parameters:    Size  Location     Type
  7893 ;;		None
  7894 ;; Auto vars:     Size  Location     Type
  7895 ;;		None
  7896 ;; Return value:  Size  Location     Type
  7897 ;;                  1    wreg      void 
  7898 ;; Registers used:
  7899 ;;		None
  7900 ;; Tracked objects:
  7901 ;;		On entry : 0/0
  7902 ;;		On exit  : 0/0
  7903 ;;		Unchanged: 0/0
  7904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7909 ;;Total ram usage:        0 bytes
  7910 ;; Hardware stack levels used:    1
  7911 ;; Hardware stack levels required when called:    7
  7912 ;; This function calls:
  7913 ;;		Nothing
  7914 ;; This function is called by:
  7915 ;;		_main
  7916 ;; This function uses a non-reentrant model
  7917 ;;
  7918                           
  7919                           	psect	text38
  7920  002788                     __ptext38:
  7921                           	opt stack 0
  7922  002788                     _PortTestA5:
  7923                           	opt stack 23
  7924  002788                     l200:
  7925  002788  A281               	btfss	3969,1,c	;volatile
  7926  00278A  D7FE               	goto	l200
  7927                           
  7928                           ;PortHigh.c: 31: }
  7929                           ;PortHigh.c: 32: LATAbits.LATA5 = 1;
  7930  00278C  8A89               	bsf	3977,5,c	;volatile
  7931  00278E                     l203:
  7932  00278E  B281               	btfsc	3969,1,c	;volatile
  7933  002790  D7FE               	goto	l203
  7934                           
  7935                           ;PortHigh.c: 35: }
  7936                           ;PortHigh.c: 36: __nop();
  7937  002792  F000               	nop	
  7938                           
  7939                           ;PortHigh.c: 37: __nop();
  7940  002794  F000               	nop	
  7941                           
  7942                           ;PortHigh.c: 38: LATAbits.LATA5 = 0;
  7943  002796  9A89               	bcf	3977,5,c	;volatile
  7944  002798  0012               	return		;funcret
  7945  00279A                     __end_of_PortTestA5:
  7946                           	opt stack 0
  7947                           tblptru	equ	0xFF8
  7948                           tblptrh	equ	0xFF7
  7949                           tblptrl	equ	0xFF6
  7950                           tablat	equ	0xFF5
  7951                           prodh	equ	0xFF4
  7952                           prodl	equ	0xFF3
  7953                           intcon	equ	0xFF2
  7954                           intcon3	equ	0xFF0
  7955                           indf0	equ	0xFEF
  7956                           postinc0	equ	0xFEE
  7957                           fsr0h	equ	0xFEA
  7958                           fsr0l	equ	0xFE9
  7959                           wreg	equ	0xFE8
  7960                           postdec1	equ	0xFE5
  7961                           fsr1l	equ	0xFE1
  7962                           indf2	equ	0xFDF
  7963                           postinc2	equ	0xFDE
  7964                           postdec2	equ	0xFDD
  7965                           fsr2h	equ	0xFDA
  7966                           fsr2l	equ	0xFD9
  7967                           status	equ	0xFD8
  7968                           
  7969 ;; *************** function _handler *****************
  7970 ;; Defined at:
  7971 ;;		line 492 in file "UI.c"
  7972 ;; Parameters:    Size  Location     Type
  7973 ;;		None
  7974 ;; Auto vars:     Size  Location     Type
  7975 ;;		None
  7976 ;; Return value:  Size  Location     Type
  7977 ;;                  1    wreg      void 
  7978 ;; Registers used:
  7979 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7980 ;; Tracked objects:
  7981 ;;		On entry : 0/0
  7982 ;;		On exit  : 0/0
  7983 ;;		Unchanged: 0/0
  7984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7987 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7988 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7989 ;;Total ram usage:       16 bytes
  7990 ;; Hardware stack levels used:    1
  7991 ;; Hardware stack levels required when called:    6
  7992 ;; This function calls:
  7993 ;;		_printSortTimer
  7994 ;;		_updateMenu
  7995 ;; This function is called by:
  7996 ;;		Interrupt level 2
  7997 ;; This function uses a non-reentrant model
  7998 ;;
  7999                           
  8000                           	psect	intcode
  8001  000008                     __pintcode:
  8002                           	opt stack 0
  8003  000008                     _handler:
  8004                           	opt stack 18
  8005                           
  8006                           ;incstack = 0
  8007  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8008  00000A  ED22  F00C         	call	int_func,f	;refresh shadow registers
  8009                           tblptru	equ	0xFF8
  8010                           tblptrh	equ	0xFF7
  8011                           tblptrl	equ	0xFF6
  8012                           tablat	equ	0xFF5
  8013                           prodh	equ	0xFF4
  8014                           prodl	equ	0xFF3
  8015                           intcon	equ	0xFF2
  8016                           intcon3	equ	0xFF0
  8017                           indf0	equ	0xFEF
  8018                           postinc0	equ	0xFEE
  8019                           fsr0h	equ	0xFEA
  8020                           fsr0l	equ	0xFE9
  8021                           wreg	equ	0xFE8
  8022                           postdec1	equ	0xFE5
  8023                           fsr1l	equ	0xFE1
  8024                           indf2	equ	0xFDF
  8025                           postinc2	equ	0xFDE
  8026                           postdec2	equ	0xFDD
  8027                           fsr2h	equ	0xFDA
  8028                           fsr2l	equ	0xFD9
  8029                           status	equ	0xFD8
  8030                           
  8031                           	psect	intcode_body
  8032  001844                     __pintcode_body:
  8033                           	opt stack 18
  8034  001844                     int_func:
  8035                           	opt stack 18
  8036  001844  0006               	pop		; remove dummy address from shadow register refresh
  8037  001846  CFFA F04D          	movff	pclath,??_handler+2
  8038  00184A  CFFB F04E          	movff	pclatu,??_handler+3
  8039  00184E  CFE9 F04F          	movff	fsr0l,??_handler+4
  8040  001852  CFEA F050          	movff	fsr0h,??_handler+5
  8041  001856  CFE1 F051          	movff	fsr1l,??_handler+6
  8042  00185A  CFE2 F052          	movff	fsr1h,??_handler+7
  8043  00185E  CFD9 F053          	movff	fsr2l,??_handler+8
  8044  001862  CFDA F054          	movff	fsr2h,??_handler+9
  8045  001866  CFF3 F055          	movff	prodl,??_handler+10
  8046  00186A  CFF4 F056          	movff	prodh,??_handler+11
  8047  00186E  CFF6 F057          	movff	tblptrl,??_handler+12
  8048  001872  CFF7 F058          	movff	tblptrh,??_handler+13
  8049  001876  CFF8 F059          	movff	tblptru,??_handler+14
  8050  00187A  CFF5 F05A          	movff	tablat,??_handler+15
  8051                           
  8052                           ;UI.c: 494: if(INT1IF){
  8053  00187E  A0F0               	btfss	intcon3,0,c	;volatile
  8054  001880  D018               	goto	i2l5226
  8055                           
  8056                           ;UI.c: 495: INT1IF = 0;
  8057  001882  90F0               	bcf	intcon3,0,c	;volatile
  8058                           
  8059                           ;UI.c: 496: if(machine_state == UI_state) {
  8060  001884  0100               	movlb	0	; () banked
  8061  001886  51EF               	movf	_machine_state& (0+255),w,b
  8062  001888  A4D8               	btfss	status,2,c
  8063  00188A  D013               	goto	i2l5226
  8064                           
  8065                           ; BSR set to: 0
  8066                           ;UI.c: 497: input = keys[(PORTB & 0xF0) >> 4];
  8067  00188C  3881               	swapf	3969,w,c	;volatile
  8068  00188E  0B0F               	andlw	15
  8069  001890  0B0F               	andlw	15
  8070  001892  6E4B               	movwf	??_handler& (0+255),c
  8071  001894  6A4C               	clrf	(??_handler+1)& (0+255),c
  8072  001896  0EB9               	movlw	low _keys
  8073  001898  244B               	addwf	??_handler,w,c
  8074  00189A  6EF6               	movwf	tblptrl,c
  8075  00189C  0EFD               	movlw	high _keys
  8076  00189E  204C               	addwfc	??_handler+1,w,c
  8077  0018A0  6EF7               	movwf	tblptrh,c
  8078  0018A2                     	if	1	;There are 3 active tblptr bytes
  8079  0018A2  6AF8               	clrf	tblptru,c
  8080  0018A4  0E00               	movlw	low (__mediumconst shr (0+16))
  8081  0018A6  22F8               	addwfc	tblptru,f,c
  8082  0018A8                     	endif
  8083  0018A8  0008               	tblrd		*
  8084  0018AA  CFF5 F07D          	movff	tablat,_input
  8085                           
  8086                           ; BSR set to: 0
  8087                           ;UI.c: 498: updateMenu();
  8088  0018AE  ECB7  F007         	call	_updateMenu	;wreg free
  8089  0018B2                     i2l5226:
  8090                           
  8091                           ;UI.c: 499: }
  8092                           ;UI.c: 500: }
  8093                           ;UI.c: 503: if(TMR0IF){
  8094  0018B2  A4F2               	btfss	intcon,2,c	;volatile
  8095  0018B4  D017               	goto	i2l526
  8096                           
  8097                           ;UI.c: 504: TMR0IF = 0;
  8098  0018B6  94F2               	bcf	intcon,2,c	;volatile
  8099                           
  8100                           ;UI.c: 505: if(machine_state == Sorting_state){
  8101  0018B8  0100               	movlb	0	; () banked
  8102  0018BA  05EF               	decf	_machine_state& (0+255),w,b
  8103  0018BC  A4D8               	btfss	status,2,c
  8104  0018BE  D012               	goto	i2l526
  8105                           
  8106                           ; BSR set to: 0
  8107                           ;UI.c: 506: if(sortTimerCounter == 31250){
  8108  0018C0  0E12               	movlw	18
  8109  0018C2  1877               	xorwf	_sortTimerCounter,w,c
  8110  0018C4  E10B               	bnz	i2l5238
  8111  0018C6  0E7A               	movlw	122
  8112  0018C8  1878               	xorwf	_sortTimerCounter+1,w,c
  8113  0018CA  A4D8               	btfss	status,2,c
  8114  0018CC  D007               	goto	i2l5238
  8115                           
  8116                           ; BSR set to: 0
  8117                           ;UI.c: 507: sortTimerCounter = 0;
  8118  0018CE  0E00               	movlw	0
  8119  0018D0  6E78               	movwf	_sortTimerCounter+1,c
  8120  0018D2  0E00               	movlw	0
  8121  0018D4  6E77               	movwf	_sortTimerCounter,c
  8122                           
  8123                           ; BSR set to: 0
  8124                           ;UI.c: 508: printSortTimer();
  8125  0018D6  EC32  F00A         	call	_printSortTimer	;wreg free
  8126                           
  8127                           ;UI.c: 509: }
  8128  0018DA  D002               	goto	i2l5240
  8129  0018DC                     i2l5238:
  8130                           
  8131                           ;UI.c: 510: else{
  8132                           ;UI.c: 511: sortTimerCounter++;
  8133  0018DC  4A77               	infsnz	_sortTimerCounter,f,c
  8134  0018DE  2A78               	incf	_sortTimerCounter+1,f,c
  8135  0018E0                     i2l5240:
  8136                           
  8137                           ;UI.c: 512: }
  8138                           ;UI.c: 513: T0CON = 0b11011000;
  8139  0018E0  0ED8               	movlw	216
  8140  0018E2  6ED5               	movwf	4053,c	;volatile
  8141  0018E4                     i2l526:
  8142  0018E4  C05A  FFF5         	movff	??_handler+15,tablat
  8143  0018E8  C059  FFF8         	movff	??_handler+14,tblptru
  8144  0018EC  C058  FFF7         	movff	??_handler+13,tblptrh
  8145  0018F0  C057  FFF6         	movff	??_handler+12,tblptrl
  8146  0018F4  C056  FFF4         	movff	??_handler+11,prodh
  8147  0018F8  C055  FFF3         	movff	??_handler+10,prodl
  8148  0018FC  C054  FFDA         	movff	??_handler+9,fsr2h
  8149  001900  C053  FFD9         	movff	??_handler+8,fsr2l
  8150  001904  C052  FFE2         	movff	??_handler+7,fsr1h
  8151  001908  C051  FFE1         	movff	??_handler+6,fsr1l
  8152  00190C  C050  FFEA         	movff	??_handler+5,fsr0h
  8153  001910  C04F  FFE9         	movff	??_handler+4,fsr0l
  8154  001914  C04E  FFFB         	movff	??_handler+3,pclatu
  8155  001918  C04D  FFFA         	movff	??_handler+2,pclath
  8156  00191C  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8157  00191E  0011               	retfie		f
  8158  001920                     __end_of_handler:
  8159                           	opt stack 0
  8160                           pclatu	equ	0xFFB
  8161                           pclath	equ	0xFFA
  8162                           tblptru	equ	0xFF8
  8163                           tblptrh	equ	0xFF7
  8164                           tblptrl	equ	0xFF6
  8165                           tablat	equ	0xFF5
  8166                           prodh	equ	0xFF4
  8167                           prodl	equ	0xFF3
  8168                           intcon	equ	0xFF2
  8169                           intcon3	equ	0xFF0
  8170                           indf0	equ	0xFEF
  8171                           postinc0	equ	0xFEE
  8172                           fsr0h	equ	0xFEA
  8173                           fsr0l	equ	0xFE9
  8174                           wreg	equ	0xFE8
  8175                           postdec1	equ	0xFE5
  8176                           fsr1h	equ	0xFE2
  8177                           fsr1l	equ	0xFE1
  8178                           indf2	equ	0xFDF
  8179                           postinc2	equ	0xFDE
  8180                           postdec2	equ	0xFDD
  8181                           fsr2h	equ	0xFDA
  8182                           fsr2l	equ	0xFD9
  8183                           status	equ	0xFD8
  8184                           
  8185 ;; *************** function _updateMenu *****************
  8186 ;; Defined at:
  8187 ;;		line 148 in file "UI.c"
  8188 ;; Parameters:    Size  Location     Type
  8189 ;;		None
  8190 ;; Auto vars:     Size  Location     Type
  8191 ;;		None
  8192 ;; Return value:  Size  Location     Type
  8193 ;;                  1    wreg      void 
  8194 ;; Registers used:
  8195 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8196 ;; Tracked objects:
  8197 ;;		On entry : 0/0
  8198 ;;		On exit  : 0/0
  8199 ;;		Unchanged: 0/0
  8200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8203 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8204 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8205 ;;Total ram usage:        2 bytes
  8206 ;; Hardware stack levels used:    1
  8207 ;; Hardware stack levels required when called:    5
  8208 ;; This function calls:
  8209 ;;		_change_state_to_logs_11
  8210 ;;		_change_state_to_logs_12
  8211 ;;		_change_state_to_logs_22
  8212 ;;		_change_state_to_logs_23
  8213 ;;		_change_state_to_logs_33
  8214 ;;		_change_state_to_logs_34
  8215 ;;		_change_state_to_menu_11
  8216 ;;		_change_state_to_menu_12
  8217 ;;		_change_state_to_menu_22
  8218 ;;		_change_state_to_menu_23
  8219 ;;		_dispLogs
  8220 ;;		_inputHandler
  8221 ;;		i2_change_state_to_menu_start
  8222 ;; This function is called by:
  8223 ;;		_handler
  8224 ;; This function uses a non-reentrant model
  8225 ;;
  8226                           
  8227                           	psect	text40
  8228  000F6E                     __ptext40:
  8229                           	opt stack 0
  8230  000F6E                     _updateMenu:
  8231                           	opt stack 18
  8232                           
  8233                           ;UI.c: 149: up = 0; down = 0; enter = 0; back = 0;
  8234                           
  8235                           ;incstack = 0
  8236  000F6E  0E00               	movlw	0
  8237  000F70  6E7A               	movwf	_up+1,c
  8238  000F72  0E00               	movlw	0
  8239  000F74  6E79               	movwf	_up,c
  8240  000F76  0E00               	movlw	0
  8241  000F78  6E6A               	movwf	_down+1,c
  8242  000F7A  0E00               	movlw	0
  8243  000F7C  6E69               	movwf	_down,c
  8244  000F7E  0E00               	movlw	0
  8245  000F80  6E6C               	movwf	_enter+1,c
  8246  000F82  0E00               	movlw	0
  8247  000F84  6E6B               	movwf	_enter,c
  8248  000F86  0E00               	movlw	0
  8249  000F88  6E60               	movwf	_back+1,c
  8250  000F8A  0E00               	movlw	0
  8251  000F8C  6E5F               	movwf	_back,c
  8252                           
  8253                           ;UI.c: 150: (INTCONbits.GIE = 0);
  8254  000F8E  9EF2               	bcf	intcon,7,c	;volatile
  8255                           
  8256                           ;UI.c: 152: if (inputHandler()
  8257                           ;UI.c: 155: ){
  8258  000F90  EC2F  F00B         	call	_inputHandler	;wreg free
  8259  000F94  502A               	movf	?_inputHandler,w,c
  8260  000F96  102B               	iorwf	?_inputHandler+1,w,c
  8261  000F98  A4D8               	btfss	status,2,c
  8262  000F9A  D112               	goto	i2l5106
  8263  000F9C  D146               	goto	i2l364
  8264  000F9E                     i2l4958:
  8265                           
  8266                           ;UI.c: 159: change_state_to_menu_11();
  8267  000F9E  EC37  F012         	call	_change_state_to_menu_11	;wreg free
  8268                           
  8269                           ;UI.c: 160: break;
  8270  000FA2  D143               	goto	i2l364
  8271  000FA4                     i2l4960:
  8272                           
  8273                           ;UI.c: 163: if(up){
  8274  000FA4  5079               	movf	_up,w,c
  8275  000FA6  107A               	iorwf	_up+1,w,c
  8276  000FA8  B4D8               	btfsc	status,2,c
  8277  000FAA  D003               	goto	i2l4964
  8278                           
  8279                           ;UI.c: 164: change_state_to_menu_23();
  8280  000FAC  ECEF  F011         	call	_change_state_to_menu_23	;wreg free
  8281                           
  8282                           ;UI.c: 165: }
  8283  000FB0  D13C               	goto	i2l364
  8284  000FB2                     i2l4964:
  8285                           
  8286                           ;UI.c: 166: else if(down){
  8287  000FB2  5069               	movf	_down,w,c
  8288  000FB4  106A               	iorwf	_down+1,w,c
  8289  000FB6  B4D8               	btfsc	status,2,c
  8290  000FB8  D003               	goto	i2l4968
  8291                           
  8292                           ;UI.c: 167: change_state_to_menu_12();
  8293  000FBA  EC1F  F012         	call	_change_state_to_menu_12	;wreg free
  8294                           
  8295                           ;UI.c: 168: }
  8296  000FBE  D135               	goto	i2l364
  8297  000FC0                     i2l4968:
  8298                           
  8299                           ;UI.c: 169: else if(enter){
  8300  000FC0  506B               	movf	_enter,w,c
  8301  000FC2  106C               	iorwf	_enter+1,w,c
  8302  000FC4  B4D8               	btfsc	status,2,c
  8303  000FC6  D131               	goto	i2l364
  8304                           
  8305                           ;UI.c: 170: change_state_to_menu_start();
  8306  000FC8  EC20  F013         	call	i2_change_state_to_menu_start	;wreg free
  8307                           
  8308                           ;UI.c: 171: }
  8309                           ;UI.c: 172: break;
  8310  000FCC  D12E               	goto	i2l364
  8311  000FCE                     i2l4972:
  8312                           
  8313                           ;UI.c: 175: if(up){
  8314  000FCE  5079               	movf	_up,w,c
  8315  000FD0  107A               	iorwf	_up+1,w,c
  8316  000FD2  B4D8               	btfsc	status,2,c
  8317  000FD4  D003               	goto	i2l4976
  8318                           
  8319                           ;UI.c: 176: change_state_to_menu_11();
  8320  000FD6  EC37  F012         	call	_change_state_to_menu_11	;wreg free
  8321                           
  8322                           ;UI.c: 177: }
  8323  000FDA  D127               	goto	i2l364
  8324  000FDC                     i2l4976:
  8325                           
  8326                           ;UI.c: 178: else if(down){
  8327  000FDC  5069               	movf	_down,w,c
  8328  000FDE  106A               	iorwf	_down+1,w,c
  8329  000FE0  B4D8               	btfsc	status,2,c
  8330  000FE2  D011               	goto	i2l4992
  8331                           
  8332                           ;UI.c: 179: change_state_to_menu_23();
  8333  000FE4  ECEF  F011         	call	_change_state_to_menu_23	;wreg free
  8334                           
  8335                           ;UI.c: 180: }
  8336  000FE8  D120               	goto	i2l364
  8337  000FEA                     i2l4984:
  8338                           
  8339                           ;UI.c: 187: if(up){
  8340  000FEA  5079               	movf	_up,w,c
  8341  000FEC  107A               	iorwf	_up+1,w,c
  8342  000FEE  B4D8               	btfsc	status,2,c
  8343  000FF0  D003               	goto	i2l4988
  8344                           
  8345                           ;UI.c: 188: change_state_to_menu_11();
  8346  000FF2  EC37  F012         	call	_change_state_to_menu_11	;wreg free
  8347                           
  8348                           ;UI.c: 189: }
  8349  000FF6  D119               	goto	i2l364
  8350  000FF8                     i2l4988:
  8351                           
  8352                           ;UI.c: 190: else if(down){
  8353  000FF8  5069               	movf	_down,w,c
  8354  000FFA  106A               	iorwf	_down+1,w,c
  8355  000FFC  B4D8               	btfsc	status,2,c
  8356  000FFE  D003               	goto	i2l4992
  8357                           
  8358                           ;UI.c: 191: change_state_to_menu_23();
  8359  001000  ECEF  F011         	call	_change_state_to_menu_23	;wreg free
  8360                           
  8361                           ;UI.c: 192: }
  8362  001004  D112               	goto	i2l364
  8363  001006                     i2l4992:
  8364                           
  8365                           ;UI.c: 193: else if(enter){
  8366  001006  506B               	movf	_enter,w,c
  8367  001008  106C               	iorwf	_enter+1,w,c
  8368  00100A  B4D8               	btfsc	status,2,c
  8369  00100C  D10E               	goto	i2l364
  8370                           
  8371                           ;UI.c: 194: machine_state = Sorting_state;
  8372  00100E  0E01               	movlw	1
  8373  001010  0100               	movlb	0	; () banked
  8374  001012  6FEF               	movwf	_machine_state& (0+255),b
  8375                           
  8376                           ; BSR set to: 0
  8377                           ;UI.c: 195: }
  8378                           ;UI.c: 196: break;
  8379                           
  8380                           ; BSR set to: 0
  8381                           
  8382                           ; BSR set to: 0
  8383  001014  D10A               	goto	i2l364
  8384  001016                     i2l4996:
  8385                           
  8386                           ;UI.c: 199: if(up){
  8387  001016  5079               	movf	_up,w,c
  8388  001018  107A               	iorwf	_up+1,w,c
  8389  00101A  B4D8               	btfsc	status,2,c
  8390  00101C  D003               	goto	i2l5000
  8391                           
  8392                           ;UI.c: 200: change_state_to_menu_22();
  8393  00101E  EC07  F012         	call	_change_state_to_menu_22	;wreg free
  8394                           
  8395                           ;UI.c: 201: }
  8396  001022  D103               	goto	i2l364
  8397  001024                     i2l5000:
  8398                           
  8399                           ;UI.c: 202: else if(down){
  8400  001024  5069               	movf	_down,w,c
  8401  001026  106A               	iorwf	_down+1,w,c
  8402  001028  B4D8               	btfsc	status,2,c
  8403  00102A  D003               	goto	i2l5004
  8404                           
  8405                           ;UI.c: 203: change_state_to_menu_11();
  8406  00102C  EC37  F012         	call	_change_state_to_menu_11	;wreg free
  8407                           
  8408                           ;UI.c: 204: }
  8409  001030  D0FC               	goto	i2l364
  8410  001032                     i2l5004:
  8411                           
  8412                           ;UI.c: 205: else if(enter){
  8413  001032  506B               	movf	_enter,w,c
  8414  001034  106C               	iorwf	_enter+1,w,c
  8415  001036  B4D8               	btfsc	status,2,c
  8416  001038  D0F8               	goto	i2l364
  8417                           
  8418                           ;UI.c: 206: change_state_to_logs_11();
  8419  00103A  ECAF  F012         	call	_change_state_to_logs_11	;wreg free
  8420                           
  8421                           ;UI.c: 207: }
  8422                           ;UI.c: 208: break;
  8423  00103E  D0F5               	goto	i2l364
  8424  001040                     i2l5008:
  8425                           
  8426                           ;UI.c: 211: if(up){
  8427  001040  5079               	movf	_up,w,c
  8428  001042  107A               	iorwf	_up+1,w,c
  8429  001044  B4D8               	btfsc	status,2,c
  8430  001046  D003               	goto	i2l5012
  8431                           
  8432                           ;UI.c: 212: change_state_to_logs_34();
  8433  001048  EC4F  F012         	call	_change_state_to_logs_34	;wreg free
  8434                           
  8435                           ;UI.c: 213: }
  8436  00104C  D0EE               	goto	i2l364
  8437  00104E                     i2l5012:
  8438                           
  8439                           ;UI.c: 214: else if(down){
  8440  00104E  5069               	movf	_down,w,c
  8441  001050  106A               	iorwf	_down+1,w,c
  8442  001052  B4D8               	btfsc	status,2,c
  8443  001054  D003               	goto	i2l5016
  8444                           
  8445                           ;UI.c: 215: change_state_to_logs_12();
  8446  001056  EC97  F012         	call	_change_state_to_logs_12	;wreg free
  8447                           
  8448                           ;UI.c: 216: }
  8449  00105A  D0E7               	goto	i2l364
  8450  00105C                     i2l5016:
  8451                           
  8452                           ;UI.c: 217: else if(enter){
  8453  00105C  506B               	movf	_enter,w,c
  8454  00105E  106C               	iorwf	_enter+1,w,c
  8455  001060  B4D8               	btfsc	status,2,c
  8456  001062  D007               	goto	i2l5020
  8457                           
  8458                           ;UI.c: 218: dispLogs(1);
  8459  001064  0E00               	movlw	0
  8460  001066  6E02               	movwf	dispLogs@myLog+1,c
  8461  001068  0E01               	movlw	1
  8462  00106A  6E01               	movwf	dispLogs@myLog,c
  8463  00106C  ECBA  F013         	call	_dispLogs	;wreg free
  8464                           
  8465                           ;UI.c: 219: }
  8466  001070  D0DC               	goto	i2l364
  8467  001072                     i2l5020:
  8468                           
  8469                           ;UI.c: 220: else if(back){
  8470  001072  505F               	movf	_back,w,c
  8471  001074  1060               	iorwf	_back+1,w,c
  8472  001076  B4D8               	btfsc	status,2,c
  8473  001078  D0D8               	goto	i2l364
  8474                           
  8475                           ;UI.c: 221: change_state_to_menu_23();
  8476  00107A  ECEF  F011         	call	_change_state_to_menu_23	;wreg free
  8477                           
  8478                           ;UI.c: 222: }
  8479                           ;UI.c: 223: break;
  8480  00107E  D0D5               	goto	i2l364
  8481  001080                     i2l5024:
  8482                           
  8483                           ;UI.c: 226: if(up){
  8484  001080  5079               	movf	_up,w,c
  8485  001082  107A               	iorwf	_up+1,w,c
  8486  001084  B4D8               	btfsc	status,2,c
  8487  001086  D003               	goto	i2l5028
  8488                           
  8489                           ;UI.c: 227: change_state_to_logs_11();
  8490  001088  ECAF  F012         	call	_change_state_to_logs_11	;wreg free
  8491                           
  8492                           ;UI.c: 228: }
  8493  00108C  D0CE               	goto	i2l364
  8494  00108E                     i2l5028:
  8495                           
  8496                           ;UI.c: 229: else if(down){
  8497  00108E  5069               	movf	_down,w,c
  8498  001090  106A               	iorwf	_down+1,w,c
  8499  001092  B4D8               	btfsc	status,2,c
  8500  001094  D003               	goto	i2l5032
  8501                           
  8502                           ;UI.c: 230: change_state_to_logs_23();
  8503  001096  ECDE  F012         	call	_change_state_to_logs_23	;wreg free
  8504                           
  8505                           ;UI.c: 231: }
  8506  00109A  D0C7               	goto	i2l364
  8507  00109C                     i2l5032:
  8508                           
  8509                           ;UI.c: 232: else if(enter){
  8510  00109C  506B               	movf	_enter,w,c
  8511  00109E  106C               	iorwf	_enter+1,w,c
  8512  0010A0  B4D8               	btfsc	status,2,c
  8513  0010A2  D007               	goto	i2l5036
  8514                           
  8515                           ;UI.c: 233: dispLogs(2);
  8516  0010A4  0E00               	movlw	0
  8517  0010A6  6E02               	movwf	dispLogs@myLog+1,c
  8518  0010A8  0E02               	movlw	2
  8519  0010AA  6E01               	movwf	dispLogs@myLog,c
  8520  0010AC  ECBA  F013         	call	_dispLogs	;wreg free
  8521                           
  8522                           ;UI.c: 234: }
  8523  0010B0  D0BC               	goto	i2l364
  8524  0010B2                     i2l5036:
  8525                           
  8526                           ;UI.c: 235: else if(back){
  8527  0010B2  505F               	movf	_back,w,c
  8528  0010B4  1060               	iorwf	_back+1,w,c
  8529  0010B6  B4D8               	btfsc	status,2,c
  8530  0010B8  D0B8               	goto	i2l364
  8531                           
  8532                           ;UI.c: 236: change_state_to_menu_23();
  8533  0010BA  ECEF  F011         	call	_change_state_to_menu_23	;wreg free
  8534                           
  8535                           ;UI.c: 237: }
  8536                           ;UI.c: 238: break;
  8537  0010BE  D0B5               	goto	i2l364
  8538  0010C0                     i2l5040:
  8539                           
  8540                           ;UI.c: 241: if(up){
  8541  0010C0  5079               	movf	_up,w,c
  8542  0010C2  107A               	iorwf	_up+1,w,c
  8543  0010C4  B4D8               	btfsc	status,2,c
  8544  0010C6  D003               	goto	i2l5044
  8545                           
  8546                           ;UI.c: 242: change_state_to_logs_11();
  8547  0010C8  ECAF  F012         	call	_change_state_to_logs_11	;wreg free
  8548                           
  8549                           ;UI.c: 243: }
  8550  0010CC  D0AE               	goto	i2l364
  8551  0010CE                     i2l5044:
  8552                           
  8553                           ;UI.c: 244: else if(down){
  8554  0010CE  5069               	movf	_down,w,c
  8555  0010D0  106A               	iorwf	_down+1,w,c
  8556  0010D2  B4D8               	btfsc	status,2,c
  8557  0010D4  D003               	goto	i2l5048
  8558                           
  8559                           ;UI.c: 245: change_state_to_logs_23();
  8560  0010D6  ECDE  F012         	call	_change_state_to_logs_23	;wreg free
  8561                           
  8562                           ;UI.c: 246: }
  8563  0010DA  D0A7               	goto	i2l364
  8564  0010DC                     i2l5048:
  8565                           
  8566                           ;UI.c: 247: else if(enter){
  8567  0010DC  506B               	movf	_enter,w,c
  8568  0010DE  106C               	iorwf	_enter+1,w,c
  8569  0010E0  B4D8               	btfsc	status,2,c
  8570  0010E2  D007               	goto	i2l5052
  8571                           
  8572                           ;UI.c: 248: dispLogs(2);
  8573  0010E4  0E00               	movlw	0
  8574  0010E6  6E02               	movwf	dispLogs@myLog+1,c
  8575  0010E8  0E02               	movlw	2
  8576  0010EA  6E01               	movwf	dispLogs@myLog,c
  8577  0010EC  ECBA  F013         	call	_dispLogs	;wreg free
  8578                           
  8579                           ;UI.c: 249: }
  8580  0010F0  D09C               	goto	i2l364
  8581  0010F2                     i2l5052:
  8582                           
  8583                           ;UI.c: 250: else if(back){
  8584  0010F2  505F               	movf	_back,w,c
  8585  0010F4  1060               	iorwf	_back+1,w,c
  8586  0010F6  B4D8               	btfsc	status,2,c
  8587  0010F8  D098               	goto	i2l364
  8588                           
  8589                           ;UI.c: 251: change_state_to_menu_23();
  8590  0010FA  ECEF  F011         	call	_change_state_to_menu_23	;wreg free
  8591                           
  8592                           ;UI.c: 252: }
  8593                           ;UI.c: 253: break;
  8594  0010FE  D095               	goto	i2l364
  8595  001100                     i2l5056:
  8596                           
  8597                           ;UI.c: 256: if(up){
  8598  001100  5079               	movf	_up,w,c
  8599  001102  107A               	iorwf	_up+1,w,c
  8600  001104  B4D8               	btfsc	status,2,c
  8601  001106  D003               	goto	i2l5060
  8602                           
  8603                           ;UI.c: 257: change_state_to_logs_22();
  8604  001108  EC7F  F012         	call	_change_state_to_logs_22	;wreg free
  8605                           
  8606                           ;UI.c: 258: }
  8607  00110C  D08E               	goto	i2l364
  8608  00110E                     i2l5060:
  8609                           
  8610                           ;UI.c: 259: else if(down){
  8611  00110E  5069               	movf	_down,w,c
  8612  001110  106A               	iorwf	_down+1,w,c
  8613  001112  B4D8               	btfsc	status,2,c
  8614  001114  D003               	goto	i2l5064
  8615                           
  8616                           ;UI.c: 260: change_state_to_logs_34();
  8617  001116  EC4F  F012         	call	_change_state_to_logs_34	;wreg free
  8618                           
  8619                           ;UI.c: 261: }
  8620  00111A  D087               	goto	i2l364
  8621  00111C                     i2l5064:
  8622                           
  8623                           ;UI.c: 262: else if(enter){
  8624  00111C  506B               	movf	_enter,w,c
  8625  00111E  106C               	iorwf	_enter+1,w,c
  8626  001120  B4D8               	btfsc	status,2,c
  8627  001122  D007               	goto	i2l5068
  8628                           
  8629                           ;UI.c: 263: dispLogs(3);
  8630  001124  0E00               	movlw	0
  8631  001126  6E02               	movwf	dispLogs@myLog+1,c
  8632  001128  0E03               	movlw	3
  8633  00112A  6E01               	movwf	dispLogs@myLog,c
  8634  00112C  ECBA  F013         	call	_dispLogs	;wreg free
  8635                           
  8636                           ;UI.c: 264: }
  8637  001130  D07C               	goto	i2l364
  8638  001132                     i2l5068:
  8639                           
  8640                           ;UI.c: 265: else if(back){
  8641  001132  505F               	movf	_back,w,c
  8642  001134  1060               	iorwf	_back+1,w,c
  8643  001136  B4D8               	btfsc	status,2,c
  8644  001138  D078               	goto	i2l364
  8645                           
  8646                           ;UI.c: 266: change_state_to_menu_23();
  8647  00113A  ECEF  F011         	call	_change_state_to_menu_23	;wreg free
  8648                           
  8649                           ;UI.c: 267: }
  8650                           ;UI.c: 268: break;
  8651  00113E  D075               	goto	i2l364
  8652  001140                     i2l5072:
  8653                           
  8654                           ;UI.c: 271: if(up){
  8655  001140  5079               	movf	_up,w,c
  8656  001142  107A               	iorwf	_up+1,w,c
  8657  001144  B4D8               	btfsc	status,2,c
  8658  001146  D003               	goto	i2l5076
  8659                           
  8660                           ;UI.c: 272: change_state_to_logs_22();
  8661  001148  EC7F  F012         	call	_change_state_to_logs_22	;wreg free
  8662                           
  8663                           ;UI.c: 273: }
  8664  00114C  D06E               	goto	i2l364
  8665  00114E                     i2l5076:
  8666                           
  8667                           ;UI.c: 274: else if(down){
  8668  00114E  5069               	movf	_down,w,c
  8669  001150  106A               	iorwf	_down+1,w,c
  8670  001152  B4D8               	btfsc	status,2,c
  8671  001154  D003               	goto	i2l5080
  8672                           
  8673                           ;UI.c: 275: change_state_to_logs_34();
  8674  001156  EC4F  F012         	call	_change_state_to_logs_34	;wreg free
  8675                           
  8676                           ;UI.c: 276: }
  8677  00115A  D067               	goto	i2l364
  8678  00115C                     i2l5080:
  8679                           
  8680                           ;UI.c: 277: else if(enter){
  8681  00115C  506B               	movf	_enter,w,c
  8682  00115E  106C               	iorwf	_enter+1,w,c
  8683  001160  B4D8               	btfsc	status,2,c
  8684  001162  D007               	goto	i2l5084
  8685                           
  8686                           ;UI.c: 278: dispLogs(3);
  8687  001164  0E00               	movlw	0
  8688  001166  6E02               	movwf	dispLogs@myLog+1,c
  8689  001168  0E03               	movlw	3
  8690  00116A  6E01               	movwf	dispLogs@myLog,c
  8691  00116C  ECBA  F013         	call	_dispLogs	;wreg free
  8692                           
  8693                           ;UI.c: 279: }
  8694  001170  D05C               	goto	i2l364
  8695  001172                     i2l5084:
  8696                           
  8697                           ;UI.c: 280: else if(back){
  8698  001172  505F               	movf	_back,w,c
  8699  001174  1060               	iorwf	_back+1,w,c
  8700  001176  B4D8               	btfsc	status,2,c
  8701  001178  D058               	goto	i2l364
  8702                           
  8703                           ;UI.c: 281: change_state_to_menu_23();
  8704  00117A  ECEF  F011         	call	_change_state_to_menu_23	;wreg free
  8705                           
  8706                           ;UI.c: 282: }
  8707                           ;UI.c: 283: break;
  8708  00117E  D055               	goto	i2l364
  8709  001180                     i2l5088:
  8710                           
  8711                           ;UI.c: 286: if(up){
  8712  001180  5079               	movf	_up,w,c
  8713  001182  107A               	iorwf	_up+1,w,c
  8714  001184  B4D8               	btfsc	status,2,c
  8715  001186  D003               	goto	i2l5092
  8716                           
  8717                           ;UI.c: 287: change_state_to_logs_33();
  8718  001188  EC67  F012         	call	_change_state_to_logs_33	;wreg free
  8719                           
  8720                           ;UI.c: 288: }
  8721  00118C  D04E               	goto	i2l364
  8722  00118E                     i2l5092:
  8723                           
  8724                           ;UI.c: 289: else if(down){
  8725  00118E  5069               	movf	_down,w,c
  8726  001190  106A               	iorwf	_down+1,w,c
  8727  001192  B4D8               	btfsc	status,2,c
  8728  001194  D003               	goto	i2l5096
  8729                           
  8730                           ;UI.c: 290: change_state_to_logs_11();
  8731  001196  ECAF  F012         	call	_change_state_to_logs_11	;wreg free
  8732                           
  8733                           ;UI.c: 291: }
  8734  00119A  D047               	goto	i2l364
  8735  00119C                     i2l5096:
  8736                           
  8737                           ;UI.c: 292: else if(enter){
  8738  00119C  506B               	movf	_enter,w,c
  8739  00119E  106C               	iorwf	_enter+1,w,c
  8740  0011A0  B4D8               	btfsc	status,2,c
  8741  0011A2  D007               	goto	i2l5100
  8742                           
  8743                           ;UI.c: 293: dispLogs(4);
  8744  0011A4  0E00               	movlw	0
  8745  0011A6  6E02               	movwf	dispLogs@myLog+1,c
  8746  0011A8  0E04               	movlw	4
  8747  0011AA  6E01               	movwf	dispLogs@myLog,c
  8748  0011AC  ECBA  F013         	call	_dispLogs	;wreg free
  8749                           
  8750                           ;UI.c: 294: }
  8751  0011B0  D03C               	goto	i2l364
  8752  0011B2                     i2l5100:
  8753                           
  8754                           ;UI.c: 295: else if(back){
  8755  0011B2  505F               	movf	_back,w,c
  8756  0011B4  1060               	iorwf	_back+1,w,c
  8757  0011B6  B4D8               	btfsc	status,2,c
  8758  0011B8  D038               	goto	i2l364
  8759                           
  8760                           ;UI.c: 296: change_state_to_menu_23();
  8761  0011BA  ECEF  F011         	call	_change_state_to_menu_23	;wreg free
  8762                           
  8763                           ;UI.c: 302: }
  8764                           
  8765                           ;UI.c: 301: break;
  8766                           
  8767                           ;UI.c: 300: default:
  8768                           
  8769                           ;UI.c: 297: }
  8770                           ;UI.c: 298: break;
  8771  0011BE  D035               	goto	i2l364
  8772  0011C0                     i2l5106:
  8773  0011C0  C0E1  F043         	movff	_cur_state,??_updateMenu
  8774  0011C4  C0E2  F044         	movff	_cur_state+1,??_updateMenu+1
  8775                           
  8776                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
  8777                           ; Switch size 1, requested type "space"
  8778                           ; Number of cases is 3, Range of values is 0 to 4
  8779                           ; switch strategies available:
  8780                           ; Name         Instructions Cycles
  8781                           ; simple_byte           10     6 (average)
  8782                           ;	Chosen strategy is simple_byte
  8783  0011C8  5044               	movf	??_updateMenu+1,w,c
  8784  0011CA  0A00               	xorlw	0	; case 0
  8785  0011CC  B4D8               	btfsc	status,2,c
  8786  0011CE  D007               	goto	i2l5406
  8787  0011D0  0A03               	xorlw	3	; case 3
  8788  0011D2  B4D8               	btfsc	status,2,c
  8789  0011D4  D015               	goto	i2l5408
  8790  0011D6  0A07               	xorlw	7	; case 4
  8791  0011D8  B4D8               	btfsc	status,2,c
  8792  0011DA  D020               	goto	i2l5410
  8793  0011DC  D026               	goto	i2l364
  8794  0011DE                     i2l5406:
  8795                           
  8796                           ; Switch size 1, requested type "space"
  8797                           ; Number of cases is 5, Range of values is 0 to 23
  8798                           ; switch strategies available:
  8799                           ; Name         Instructions Cycles
  8800                           ; simple_byte           16     9 (average)
  8801                           ;	Chosen strategy is simple_byte
  8802  0011DE  5043               	movf	??_updateMenu,w,c
  8803  0011E0  0A00               	xorlw	0	; case 0
  8804  0011E2  B4D8               	btfsc	status,2,c
  8805  0011E4  D6DC               	goto	i2l4958
  8806  0011E6  0A0B               	xorlw	11	; case 11
  8807  0011E8  B4D8               	btfsc	status,2,c
  8808  0011EA  D6DC               	goto	i2l4960
  8809  0011EC  0A07               	xorlw	7	; case 12
  8810  0011EE  B4D8               	btfsc	status,2,c
  8811  0011F0  D6EE               	goto	i2l4972
  8812  0011F2  0A1A               	xorlw	26	; case 22
  8813  0011F4  B4D8               	btfsc	status,2,c
  8814  0011F6  D6F9               	goto	i2l4984
  8815  0011F8  0A01               	xorlw	1	; case 23
  8816  0011FA  B4D8               	btfsc	status,2,c
  8817  0011FC  D70C               	goto	i2l4996
  8818  0011FE  D015               	goto	i2l364
  8819  001200                     i2l5408:
  8820                           
  8821                           ; Switch size 1, requested type "space"
  8822                           ; Number of cases is 4, Range of values is 243 to 255
  8823                           ; switch strategies available:
  8824                           ; Name         Instructions Cycles
  8825                           ; simple_byte           13     7 (average)
  8826                           ;	Chosen strategy is simple_byte
  8827  001200  5043               	movf	??_updateMenu,w,c
  8828  001202  0AF3               	xorlw	243	; case 243
  8829  001204  B4D8               	btfsc	status,2,c
  8830  001206  D71C               	goto	i2l5008
  8831  001208  0A07               	xorlw	7	; case 244
  8832  00120A  B4D8               	btfsc	status,2,c
  8833  00120C  D739               	goto	i2l5024
  8834  00120E  0A0A               	xorlw	10	; case 254
  8835  001210  B4D8               	btfsc	status,2,c
  8836  001212  D756               	goto	i2l5040
  8837  001214  0A01               	xorlw	1	; case 255
  8838  001216  B4D8               	btfsc	status,2,c
  8839  001218  D773               	goto	i2l5056
  8840  00121A  D007               	goto	i2l364
  8841  00121C                     i2l5410:
  8842                           
  8843                           ; Switch size 1, requested type "space"
  8844                           ; Number of cases is 2, Range of values is 9 to 10
  8845                           ; switch strategies available:
  8846                           ; Name         Instructions Cycles
  8847                           ; simple_byte            7     4 (average)
  8848                           ;	Chosen strategy is simple_byte
  8849  00121C  5043               	movf	??_updateMenu,w,c
  8850  00121E  0A09               	xorlw	9	; case 9
  8851  001220  B4D8               	btfsc	status,2,c
  8852  001222  D78E               	goto	i2l5072
  8853  001224  0A03               	xorlw	3	; case 10
  8854  001226  B4D8               	btfsc	status,2,c
  8855  001228  D7AB               	goto	i2l5088
  8856  00122A                     i2l364:
  8857                           
  8858                           ;UI.c: 303: }
  8859                           ;UI.c: 304: (INTCONbits.GIE = 1);
  8860  00122A  8EF2               	bsf	intcon,7,c	;volatile
  8861  00122C  0012               	return		;funcret
  8862  00122E                     __end_of_updateMenu:
  8863                           	opt stack 0
  8864                           pclatu	equ	0xFFB
  8865                           pclath	equ	0xFFA
  8866                           tblptru	equ	0xFF8
  8867                           tblptrh	equ	0xFF7
  8868                           tblptrl	equ	0xFF6
  8869                           tablat	equ	0xFF5
  8870                           prodh	equ	0xFF4
  8871                           prodl	equ	0xFF3
  8872                           intcon	equ	0xFF2
  8873                           intcon3	equ	0xFF0
  8874                           indf0	equ	0xFEF
  8875                           postinc0	equ	0xFEE
  8876                           fsr0h	equ	0xFEA
  8877                           fsr0l	equ	0xFE9
  8878                           wreg	equ	0xFE8
  8879                           postdec1	equ	0xFE5
  8880                           fsr1h	equ	0xFE2
  8881                           fsr1l	equ	0xFE1
  8882                           indf2	equ	0xFDF
  8883                           postinc2	equ	0xFDE
  8884                           postdec2	equ	0xFDD
  8885                           fsr2h	equ	0xFDA
  8886                           fsr2l	equ	0xFD9
  8887                           status	equ	0xFD8
  8888                           
  8889 ;; *************** function i2_change_state_to_menu_start *****************
  8890 ;; Defined at:
  8891 ;;		line 408 in file "UI.c"
  8892 ;; Parameters:    Size  Location     Type
  8893 ;;		None
  8894 ;; Auto vars:     Size  Location     Type
  8895 ;;		None
  8896 ;; Return value:  Size  Location     Type
  8897 ;;                  1    wreg      void 
  8898 ;; Registers used:
  8899 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8900 ;; Tracked objects:
  8901 ;;		On entry : 0/0
  8902 ;;		On exit  : 0/0
  8903 ;;		Unchanged: 0/0
  8904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8909 ;;Total ram usage:        0 bytes
  8910 ;; Hardware stack levels used:    1
  8911 ;; Hardware stack levels required when called:    4
  8912 ;; This function calls:
  8913 ;;		i2_lcdInst
  8914 ;;		i2_printRTC
  8915 ;;		i2_printf
  8916 ;; This function is called by:
  8917 ;;		_updateMenu
  8918 ;; This function uses a non-reentrant model
  8919 ;;
  8920                           
  8921                           	psect	text41
  8922  002640                     __ptext41:
  8923                           	opt stack 0
  8924  002640                     i2_change_state_to_menu_start:
  8925                           	opt stack 18
  8926                           
  8927                           ;UI.c: 409: cur_state = 0;
  8928                           
  8929                           ;incstack = 0
  8930  002640  0E00               	movlw	0
  8931  002642  0100               	movlb	0	; () banked
  8932  002644  6FE2               	movwf	(_cur_state+1)& (0+255),b
  8933  002646  0E00               	movlw	0
  8934  002648  6FE1               	movwf	_cur_state& (0+255),b
  8935                           
  8936                           ; BSR set to: 0
  8937                           ;UI.c: 411: lcdInst(0b10000000);;
  8938  00264A  0E80               	movlw	128
  8939  00264C  ECEC  F013         	call	i2_lcdInst
  8940                           
  8941                           ;UI.c: 412: printRTC();
  8942  002650  EC17  F009         	call	i2_printRTC	;wreg free
  8943                           
  8944                           ;UI.c: 413: lcdInst(0b11000000);;
  8945  002654  0EC0               	movlw	192
  8946  002656  ECEC  F013         	call	i2_lcdInst
  8947                           
  8948                           ;UI.c: 414: printf("PUSH TO CONTINUE");
  8949  00265A  0E8A               	movlw	low STR_15
  8950  00265C  6E0D               	movwf	i2printf@f,c
  8951  00265E  0EFF               	movlw	high STR_15
  8952  002660  6E0E               	movwf	i2printf@f+1,c
  8953  002662  ECAF  F004         	call	i2_printf	;wreg free
  8954  002666  0012               	return		;funcret
  8955  002668                     __end_ofi2_change_state_to_menu_start:
  8956                           	opt stack 0
  8957                           pclatu	equ	0xFFB
  8958                           pclath	equ	0xFFA
  8959                           tblptru	equ	0xFF8
  8960                           tblptrh	equ	0xFF7
  8961                           tblptrl	equ	0xFF6
  8962                           tablat	equ	0xFF5
  8963                           prodh	equ	0xFF4
  8964                           prodl	equ	0xFF3
  8965                           intcon	equ	0xFF2
  8966                           intcon3	equ	0xFF0
  8967                           indf0	equ	0xFEF
  8968                           postinc0	equ	0xFEE
  8969                           fsr0h	equ	0xFEA
  8970                           fsr0l	equ	0xFE9
  8971                           wreg	equ	0xFE8
  8972                           postdec1	equ	0xFE5
  8973                           fsr1h	equ	0xFE2
  8974                           fsr1l	equ	0xFE1
  8975                           indf2	equ	0xFDF
  8976                           postinc2	equ	0xFDE
  8977                           postdec2	equ	0xFDD
  8978                           fsr2h	equ	0xFDA
  8979                           fsr2l	equ	0xFD9
  8980                           status	equ	0xFD8
  8981                           
  8982 ;; *************** function i2_printRTC *****************
  8983 ;; Defined at:
  8984 ;;		line 61 in file "RTC.c"
  8985 ;; Parameters:    Size  Location     Type
  8986 ;;		None
  8987 ;; Auto vars:     Size  Location     Type
  8988 ;;  printRTC       14   44[COMRAM] int [7]
  8989 ;;  printRTC        4   60[COMRAM] unsigned char [4]
  8990 ;;  printRTC        2   64[COMRAM] int 
  8991 ;;  printRTC        2   58[COMRAM] int 
  8992 ;; Return value:  Size  Location     Type
  8993 ;;                  1    wreg      void 
  8994 ;; Registers used:
  8995 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8996 ;; Tracked objects:
  8997 ;;		On entry : 0/0
  8998 ;;		On exit  : 0/0
  8999 ;;		Unchanged: 0/0
  9000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9002 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9003 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9004 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9005 ;;Total ram usage:       25 bytes
  9006 ;; Hardware stack levels used:    1
  9007 ;; Hardware stack levels required when called:    3
  9008 ;; This function calls:
  9009 ;;		i2_getRTC
  9010 ;;		i2_lcdInst
  9011 ;;		i2_printf
  9012 ;;		i2_strcpy
  9013 ;; This function is called by:
  9014 ;;		i2_change_state_to_menu_start
  9015 ;; This function uses a non-reentrant model
  9016 ;;
  9017                           
  9018                           	psect	text42
  9019  00122E                     __ptext42:
  9020                           	opt stack 0
  9021  00122E                     i2_printRTC:
  9022                           	opt stack 18
  9023                           
  9024                           ;RTC.c: 62: getRTC();
  9025                           
  9026                           ;incstack = 0
  9027  00122E  ECF0  F00F         	call	i2_getRTC	;wreg free
  9028                           
  9029                           ;RTC.c: 63: char month[] = "MMM";
  9030  001232  C0F0  F03D         	movff	printRTC@F3177,i2printRTC@month
  9031  001236  C0F1  F03E         	movff	printRTC@F3177+1,i2printRTC@month+1
  9032  00123A  C0F2  F03F         	movff	printRTC@F3177+2,i2printRTC@month+2
  9033  00123E  C0F3  F040         	movff	printRTC@F3177+3,i2printRTC@month+3
  9034                           
  9035                           ;RTC.c: 64: int INT_time[7];
  9036                           ;RTC.c: 65: for(int i = 0; i < 7; i++){
  9037  001242  0E00               	movlw	0
  9038  001244  6E42               	movwf	i2printRTC@i+1,c
  9039  001246  0E00               	movlw	0
  9040  001248  6E41               	movwf	i2printRTC@i,c
  9041  00124A  BE42               	btfsc	i2printRTC@i+1,7,c
  9042  00124C  D006               	goto	i2l4294
  9043  00124E  5042               	movf	i2printRTC@i+1,w,c
  9044  001250  E135               	bnz	i2l816
  9045  001252  0E07               	movlw	7
  9046  001254  5C41               	subwf	i2printRTC@i,w,c
  9047  001256  B0D8               	btfsc	status,0,c
  9048  001258  D031               	goto	i2l816
  9049  00125A                     i2l4294:
  9050                           
  9051                           ;RTC.c: 66: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  9052  00125A  0ED4               	movlw	low _time
  9053  00125C  2441               	addwf	i2printRTC@i,w,c
  9054  00125E  6ED9               	movwf	fsr2l,c
  9055  001260  0E00               	movlw	high _time
  9056  001262  2042               	addwfc	i2printRTC@i+1,w,c
  9057  001264  6EDA               	movwf	fsr2h,c
  9058  001266  50DF               	movf	indf2,w,c
  9059  001268  6E2A               	movwf	??i2_printRTC& (0+255),c
  9060  00126A  3A2A               	swapf	??i2_printRTC,f,c
  9061  00126C  0E0F               	movlw	15
  9062  00126E  162A               	andwf	??i2_printRTC,f,c
  9063  001270  0E0F               	movlw	15
  9064  001272  162A               	andwf	??i2_printRTC,f,c
  9065  001274  502A               	movf	??i2_printRTC,w,c
  9066  001276  0D0A               	mullw	10
  9067  001278  0ED4               	movlw	low _time
  9068  00127A  2441               	addwf	i2printRTC@i,w,c
  9069  00127C  6ED9               	movwf	fsr2l,c
  9070  00127E  0E00               	movlw	high _time
  9071  001280  2042               	addwfc	i2printRTC@i+1,w,c
  9072  001282  6EDA               	movwf	fsr2h,c
  9073  001284  50DF               	movf	indf2,w,c
  9074  001286  0B0F               	andlw	15
  9075  001288  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
  9076  00128A  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
  9077  00128C  50F3               	movf	prodl,w,c
  9078  00128E  262B               	addwf	??i2_printRTC+1,f,c
  9079  001290  50F4               	movf	prodh,w,c
  9080  001292  222C               	addwfc	??i2_printRTC+2,f,c
  9081  001294  90D8               	bcf	status,0,c
  9082  001296  3441               	rlcf	i2printRTC@i,w,c
  9083  001298  6ED9               	movwf	fsr2l,c
  9084  00129A  3442               	rlcf	i2printRTC@i+1,w,c
  9085  00129C  6EDA               	movwf	fsr2h,c
  9086  00129E  0E2D               	movlw	low i2printRTC@INT_time
  9087  0012A0  26D9               	addwf	fsr2l,f,c
  9088  0012A2  0E00               	movlw	high i2printRTC@INT_time
  9089  0012A4  22DA               	addwfc	fsr2h,f,c
  9090  0012A6  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
  9091  0012AA  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
  9092  0012AE  4A41               	infsnz	i2printRTC@i,f,c
  9093  0012B0  2A42               	incf	i2printRTC@i+1,f,c
  9094  0012B2  BE42               	btfsc	i2printRTC@i+1,7,c
  9095  0012B4  D7D2               	goto	i2l4294
  9096  0012B6  5042               	movf	i2printRTC@i+1,w,c
  9097  0012B8  E101               	bnz	i2u322_40
  9098  0012BA  D7CB               	goto	L2
  9099  0012BC                     i2u322_40:
  9100  0012BC                     i2l816:
  9101                           
  9102                           ;RTC.c: 67: }
  9103                           ;RTC.c: 68: int RTC_month = INT_time[5];
  9104  0012BC  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
  9105  0012C0  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
  9106                           
  9107                           ;RTC.c: 69: switch(RTC_month){
  9108  0012C4  D084               	goto	i2l4326
  9109  0012C6                     i2l4300:
  9110                           
  9111                           ;RTC.c: 71: strcpy(month, "Jan");
  9112  0012C6  0E3D               	movlw	low i2printRTC@month
  9113  0012C8  6E01               	movwf	i2strcpy@to,c
  9114  0012CA  0E00               	movlw	high i2printRTC@month
  9115  0012CC  6E02               	movwf	i2strcpy@to+1,c
  9116  0012CE  0EDC               	movlw	low STR_36
  9117  0012D0  6E03               	movwf	i2strcpy@from,c
  9118  0012D2  0EFF               	movlw	high STR_36
  9119  0012D4  6E04               	movwf	i2strcpy@from+1,c
  9120  0012D6  ECD6  F011         	call	i2_strcpy	;wreg free
  9121                           
  9122                           ;RTC.c: 72: break;
  9123  0012DA  D0A6               	goto	i2l4328
  9124  0012DC                     i2l4302:
  9125                           
  9126                           ;RTC.c: 74: strcpy(month, "Feb");
  9127  0012DC  0E3D               	movlw	low i2printRTC@month
  9128  0012DE  6E01               	movwf	i2strcpy@to,c
  9129  0012E0  0E00               	movlw	high i2printRTC@month
  9130  0012E2  6E02               	movwf	i2strcpy@to+1,c
  9131  0012E4  0ECC               	movlw	low STR_37
  9132  0012E6  6E03               	movwf	i2strcpy@from,c
  9133  0012E8  0EFF               	movlw	high STR_37
  9134  0012EA  6E04               	movwf	i2strcpy@from+1,c
  9135  0012EC  ECD6  F011         	call	i2_strcpy	;wreg free
  9136                           
  9137                           ;RTC.c: 75: break;
  9138  0012F0  D09B               	goto	i2l4328
  9139  0012F2                     i2l4304:
  9140                           
  9141                           ;RTC.c: 77: strcpy(month, "Mar");
  9142  0012F2  0E3D               	movlw	low i2printRTC@month
  9143  0012F4  6E01               	movwf	i2strcpy@to,c
  9144  0012F6  0E00               	movlw	high i2printRTC@month
  9145  0012F8  6E02               	movwf	i2strcpy@to+1,c
  9146  0012FA  0EE8               	movlw	low STR_38
  9147  0012FC  6E03               	movwf	i2strcpy@from,c
  9148  0012FE  0EFF               	movlw	high STR_38
  9149  001300  6E04               	movwf	i2strcpy@from+1,c
  9150  001302  ECD6  F011         	call	i2_strcpy	;wreg free
  9151                           
  9152                           ;RTC.c: 78: break;
  9153  001306  D090               	goto	i2l4328
  9154  001308                     i2l4306:
  9155                           
  9156                           ;RTC.c: 80: strcpy(month, "Apr");
  9157  001308  0E3D               	movlw	low i2printRTC@month
  9158  00130A  6E01               	movwf	i2strcpy@to,c
  9159  00130C  0E00               	movlw	high i2printRTC@month
  9160  00130E  6E02               	movwf	i2strcpy@to+1,c
  9161  001310  0EEC               	movlw	low STR_39
  9162  001312  6E03               	movwf	i2strcpy@from,c
  9163  001314  0EFF               	movlw	high STR_39
  9164  001316  6E04               	movwf	i2strcpy@from+1,c
  9165  001318  ECD6  F011         	call	i2_strcpy	;wreg free
  9166                           
  9167                           ;RTC.c: 81: break;
  9168  00131C  D085               	goto	i2l4328
  9169  00131E                     i2l4308:
  9170                           
  9171                           ;RTC.c: 83: strcpy(month, "May");
  9172  00131E  0E3D               	movlw	low i2printRTC@month
  9173  001320  6E01               	movwf	i2strcpy@to,c
  9174  001322  0E00               	movlw	high i2printRTC@month
  9175  001324  6E02               	movwf	i2strcpy@to+1,c
  9176  001326  0EF8               	movlw	low STR_40
  9177  001328  6E03               	movwf	i2strcpy@from,c
  9178  00132A  0EFF               	movlw	high STR_40
  9179  00132C  6E04               	movwf	i2strcpy@from+1,c
  9180  00132E  ECD6  F011         	call	i2_strcpy	;wreg free
  9181                           
  9182                           ;RTC.c: 84: break;
  9183  001332  D07A               	goto	i2l4328
  9184  001334                     i2l4310:
  9185                           
  9186                           ;RTC.c: 86: strcpy(month, "Jun");
  9187  001334  0E3D               	movlw	low i2printRTC@month
  9188  001336  6E01               	movwf	i2strcpy@to,c
  9189  001338  0E00               	movlw	high i2printRTC@month
  9190  00133A  6E02               	movwf	i2strcpy@to+1,c
  9191  00133C  0EE0               	movlw	low STR_41
  9192  00133E  6E03               	movwf	i2strcpy@from,c
  9193  001340  0EFF               	movlw	high STR_41
  9194  001342  6E04               	movwf	i2strcpy@from+1,c
  9195  001344  ECD6  F011         	call	i2_strcpy	;wreg free
  9196                           
  9197                           ;RTC.c: 87: break;
  9198  001348  D06F               	goto	i2l4328
  9199  00134A                     i2l4312:
  9200                           
  9201                           ;RTC.c: 89: strcpy(month, "Jul");
  9202  00134A  0E3D               	movlw	low i2printRTC@month
  9203  00134C  6E01               	movwf	i2strcpy@to,c
  9204  00134E  0E00               	movlw	high i2printRTC@month
  9205  001350  6E02               	movwf	i2strcpy@to+1,c
  9206  001352  0ED8               	movlw	low STR_42
  9207  001354  6E03               	movwf	i2strcpy@from,c
  9208  001356  0EFF               	movlw	high STR_42
  9209  001358  6E04               	movwf	i2strcpy@from+1,c
  9210  00135A  ECD6  F011         	call	i2_strcpy	;wreg free
  9211                           
  9212                           ;RTC.c: 90: break;
  9213  00135E  D064               	goto	i2l4328
  9214  001360                     i2l4314:
  9215                           
  9216                           ;RTC.c: 92: strcpy(month, "Aug");
  9217  001360  0E3D               	movlw	low i2printRTC@month
  9218  001362  6E01               	movwf	i2strcpy@to,c
  9219  001364  0E00               	movlw	high i2printRTC@month
  9220  001366  6E02               	movwf	i2strcpy@to+1,c
  9221  001368  0ED4               	movlw	low STR_43
  9222  00136A  6E03               	movwf	i2strcpy@from,c
  9223  00136C  0EFF               	movlw	high STR_43
  9224  00136E  6E04               	movwf	i2strcpy@from+1,c
  9225  001370  ECD6  F011         	call	i2_strcpy	;wreg free
  9226                           
  9227                           ;RTC.c: 93: break;
  9228  001374  D059               	goto	i2l4328
  9229  001376                     i2l4316:
  9230                           
  9231                           ;RTC.c: 95: strcpy(month, "Sep");
  9232  001376  0E3D               	movlw	low i2printRTC@month
  9233  001378  6E01               	movwf	i2strcpy@to,c
  9234  00137A  0E00               	movlw	high i2printRTC@month
  9235  00137C  6E02               	movwf	i2strcpy@to+1,c
  9236  00137E  0EE4               	movlw	low STR_44
  9237  001380  6E03               	movwf	i2strcpy@from,c
  9238  001382  0EFF               	movlw	high STR_44
  9239  001384  6E04               	movwf	i2strcpy@from+1,c
  9240  001386  ECD6  F011         	call	i2_strcpy	;wreg free
  9241                           
  9242                           ;RTC.c: 96: break;
  9243  00138A  D04E               	goto	i2l4328
  9244  00138C                     i2l4318:
  9245                           
  9246                           ;RTC.c: 98: strcpy(month, "Oct");
  9247  00138C  0E3D               	movlw	low i2printRTC@month
  9248  00138E  6E01               	movwf	i2strcpy@to,c
  9249  001390  0E00               	movlw	high i2printRTC@month
  9250  001392  6E02               	movwf	i2strcpy@to+1,c
  9251  001394  0EF0               	movlw	low STR_45
  9252  001396  6E03               	movwf	i2strcpy@from,c
  9253  001398  0EFF               	movlw	high STR_45
  9254  00139A  6E04               	movwf	i2strcpy@from+1,c
  9255  00139C  ECD6  F011         	call	i2_strcpy	;wreg free
  9256                           
  9257                           ;RTC.c: 99: break;
  9258  0013A0  D043               	goto	i2l4328
  9259  0013A2                     i2l4320:
  9260                           
  9261                           ;RTC.c: 101: strcpy(month, "Nov");
  9262  0013A2  0E3D               	movlw	low i2printRTC@month
  9263  0013A4  6E01               	movwf	i2strcpy@to,c
  9264  0013A6  0E00               	movlw	high i2printRTC@month
  9265  0013A8  6E02               	movwf	i2strcpy@to+1,c
  9266  0013AA  0EF4               	movlw	low STR_46
  9267  0013AC  6E03               	movwf	i2strcpy@from,c
  9268  0013AE  0EFF               	movlw	high STR_46
  9269  0013B0  6E04               	movwf	i2strcpy@from+1,c
  9270  0013B2  ECD6  F011         	call	i2_strcpy	;wreg free
  9271                           
  9272                           ;RTC.c: 102: break;
  9273  0013B6  D038               	goto	i2l4328
  9274  0013B8                     i2l4322:
  9275                           
  9276                           ;RTC.c: 104: strcpy(month, "Dec");
  9277  0013B8  0E3D               	movlw	low i2printRTC@month
  9278  0013BA  6E01               	movwf	i2strcpy@to,c
  9279  0013BC  0E00               	movlw	high i2printRTC@month
  9280  0013BE  6E02               	movwf	i2strcpy@to+1,c
  9281  0013C0  0ED0               	movlw	low STR_47
  9282  0013C2  6E03               	movwf	i2strcpy@from,c
  9283  0013C4  0EFF               	movlw	high STR_47
  9284  0013C6  6E04               	movwf	i2strcpy@from+1,c
  9285  0013C8  ECD6  F011         	call	i2_strcpy	;wreg free
  9286                           
  9287                           ;RTC.c: 106: }
  9288                           
  9289                           ;RTC.c: 105: break;
  9290  0013CC  D02D               	goto	i2l4328
  9291  0013CE                     i2l4326:
  9292  0013CE  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
  9293  0013D2  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
  9294                           
  9295                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9296                           ; Switch size 1, requested type "space"
  9297                           ; Number of cases is 1, Range of values is 0 to 0
  9298                           ; switch strategies available:
  9299                           ; Name         Instructions Cycles
  9300                           ; simple_byte            4     3 (average)
  9301                           ;	Chosen strategy is simple_byte
  9302  0013D6  502B               	movf	??i2_printRTC+1,w,c
  9303  0013D8  0A00               	xorlw	0	; case 0
  9304  0013DA  A4D8               	btfss	status,2,c
  9305  0013DC  D025               	goto	i2l4328
  9306                           
  9307                           ; Switch size 1, requested type "space"
  9308                           ; Number of cases is 12, Range of values is 1 to 12
  9309                           ; switch strategies available:
  9310                           ; Name         Instructions Cycles
  9311                           ; simple_byte           37    19 (average)
  9312                           ;	Chosen strategy is simple_byte
  9313  0013DE  502A               	movf	??i2_printRTC,w,c
  9314  0013E0  0A01               	xorlw	1	; case 1
  9315  0013E2  B4D8               	btfsc	status,2,c
  9316  0013E4  D770               	goto	i2l4300
  9317  0013E6  0A03               	xorlw	3	; case 2
  9318  0013E8  B4D8               	btfsc	status,2,c
  9319  0013EA  D778               	goto	i2l4302
  9320  0013EC  0A01               	xorlw	1	; case 3
  9321  0013EE  B4D8               	btfsc	status,2,c
  9322  0013F0  D780               	goto	i2l4304
  9323  0013F2  0A07               	xorlw	7	; case 4
  9324  0013F4  B4D8               	btfsc	status,2,c
  9325  0013F6  D788               	goto	i2l4306
  9326  0013F8  0A01               	xorlw	1	; case 5
  9327  0013FA  B4D8               	btfsc	status,2,c
  9328  0013FC  D790               	goto	i2l4308
  9329  0013FE  0A03               	xorlw	3	; case 6
  9330  001400  B4D8               	btfsc	status,2,c
  9331  001402  D798               	goto	i2l4310
  9332  001404  0A01               	xorlw	1	; case 7
  9333  001406  B4D8               	btfsc	status,2,c
  9334  001408  D7A0               	goto	i2l4312
  9335  00140A  0A0F               	xorlw	15	; case 8
  9336  00140C  B4D8               	btfsc	status,2,c
  9337  00140E  D7A8               	goto	i2l4314
  9338  001410  0A01               	xorlw	1	; case 9
  9339  001412  B4D8               	btfsc	status,2,c
  9340  001414  D7B0               	goto	i2l4316
  9341  001416  0A03               	xorlw	3	; case 10
  9342  001418  B4D8               	btfsc	status,2,c
  9343  00141A  D7B8               	goto	i2l4318
  9344  00141C  0A01               	xorlw	1	; case 11
  9345  00141E  B4D8               	btfsc	status,2,c
  9346  001420  D7C0               	goto	i2l4320
  9347  001422  0A07               	xorlw	7	; case 12
  9348  001424  B4D8               	btfsc	status,2,c
  9349  001426  D7C8               	goto	i2l4322
  9350  001428                     i2l4328:
  9351                           
  9352                           ;RTC.c: 107: lcdInst(0b10000000);;
  9353  001428  0E80               	movlw	128
  9354  00142A  ECEC  F013         	call	i2_lcdInst
  9355                           
  9356                           ;RTC.c: 108: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  9357  00142E  0ED4               	movlw	low STR_48
  9358  001430  6E0D               	movwf	i2printf@f,c
  9359  001432  0EFD               	movlw	high STR_48
  9360  001434  6E0E               	movwf	i2printf@f+1,c
  9361  001436  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
  9362  00143A  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
  9363  00143E  0E3D               	movlw	low i2printRTC@month
  9364  001440  6E11               	movwf	?i2_printf+4,c
  9365  001442  0E00               	movlw	high i2printRTC@month
  9366  001444  6E12               	movwf	?i2_printf+5,c
  9367  001446  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
  9368  00144A  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
  9369  00144E  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
  9370  001452  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
  9371  001456  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
  9372  00145A  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
  9373  00145E  ECAF  F004         	call	i2_printf	;wreg free
  9374  001462  0012               	return		;funcret
  9375  001464                     __end_ofi2_printRTC:
  9376                           	opt stack 0
  9377                           pclatu	equ	0xFFB
  9378                           pclath	equ	0xFFA
  9379                           tblptru	equ	0xFF8
  9380                           tblptrh	equ	0xFF7
  9381                           tblptrl	equ	0xFF6
  9382                           tablat	equ	0xFF5
  9383                           prodh	equ	0xFF4
  9384                           prodl	equ	0xFF3
  9385                           intcon	equ	0xFF2
  9386                           intcon3	equ	0xFF0
  9387                           indf0	equ	0xFEF
  9388                           postinc0	equ	0xFEE
  9389                           fsr0h	equ	0xFEA
  9390                           fsr0l	equ	0xFE9
  9391                           wreg	equ	0xFE8
  9392                           postdec1	equ	0xFE5
  9393                           fsr1h	equ	0xFE2
  9394                           fsr1l	equ	0xFE1
  9395                           indf2	equ	0xFDF
  9396                           postinc2	equ	0xFDE
  9397                           postdec2	equ	0xFDD
  9398                           fsr2h	equ	0xFDA
  9399                           fsr2l	equ	0xFD9
  9400                           status	equ	0xFD8
  9401                           
  9402 ;; *************** function i2_strcpy *****************
  9403 ;; Defined at:
  9404 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  9405 ;; Parameters:    Size  Location     Type
  9406 ;;  to              2    0[COMRAM] PTR unsigned char 
  9407 ;;		 -> printRTC@month(4), 
  9408 ;;  from            2    2[COMRAM] PTR const unsigned char 
  9409 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
  9410 ;;		 -> STR_43(4), STR_42(4), STR_41(4), STR_40(4), 
  9411 ;;		 -> STR_39(4), STR_38(4), STR_37(4), STR_36(4), 
  9412 ;; Auto vars:     Size  Location     Type
  9413 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
  9414 ;;		 -> printRTC@month(4), 
  9415 ;; Return value:  Size  Location     Type
  9416 ;;                  2    0[COMRAM] PTR unsigned char 
  9417 ;; Registers used:
  9418 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9419 ;; Tracked objects:
  9420 ;;		On entry : 0/0
  9421 ;;		On exit  : 0/0
  9422 ;;		Unchanged: 0/0
  9423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9424 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9425 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9427 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9428 ;;Total ram usage:        6 bytes
  9429 ;; Hardware stack levels used:    1
  9430 ;; This function calls:
  9431 ;;		Nothing
  9432 ;; This function is called by:
  9433 ;;		i2_printRTC
  9434 ;; This function uses a non-reentrant model
  9435 ;;
  9436                           
  9437                           	psect	text43
  9438  0023AC                     __ptext43:
  9439                           	opt stack 0
  9440  0023AC                     i2_strcpy:
  9441                           	opt stack 20
  9442                           
  9443                           ;incstack = 0
  9444  0023AC  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
  9445  0023B0  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
  9446  0023B4  D004               	goto	i2l4084
  9447  0023B6                     i2l4082:
  9448  0023B6  4A05               	infsnz	i2strcpy@cp,f,c
  9449  0023B8  2A06               	incf	i2strcpy@cp+1,f,c
  9450  0023BA  4A03               	infsnz	i2strcpy@from,f,c
  9451  0023BC  2A04               	incf	i2strcpy@from+1,f,c
  9452  0023BE                     i2l4084:
  9453  0023BE  C003  FFF6         	movff	i2strcpy@from,tblptrl
  9454  0023C2  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
  9455  0023C6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9456  0023C6  6AF8               	clrf	tblptru,c
  9457  0023C8                     	endif
  9458  0023C8                     	if	0	;tblptru may be non-zero
  9459  0023C8                     	endif
  9460  0023C8  C005  FFD9         	movff	i2strcpy@cp,fsr2l
  9461  0023CC  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
  9462  0023D0  0008               	tblrd		*
  9463  0023D2  CFF5 FFDF          	movff	tablat,indf2
  9464  0023D6  50DF               	movf	indf2,w,c
  9465  0023D8  B4D8               	btfsc	status,2,c
  9466  0023DA  0012               	return	
  9467  0023DC  D7EC               	goto	i2l4082
  9468  0023DE                     __end_ofi2_strcpy:
  9469                           	opt stack 0
  9470                           pclatu	equ	0xFFB
  9471                           pclath	equ	0xFFA
  9472                           tblptru	equ	0xFF8
  9473                           tblptrh	equ	0xFF7
  9474                           tblptrl	equ	0xFF6
  9475                           tablat	equ	0xFF5
  9476                           prodh	equ	0xFF4
  9477                           prodl	equ	0xFF3
  9478                           intcon	equ	0xFF2
  9479                           intcon3	equ	0xFF0
  9480                           indf0	equ	0xFEF
  9481                           postinc0	equ	0xFEE
  9482                           fsr0h	equ	0xFEA
  9483                           fsr0l	equ	0xFE9
  9484                           wreg	equ	0xFE8
  9485                           postdec1	equ	0xFE5
  9486                           fsr1h	equ	0xFE2
  9487                           fsr1l	equ	0xFE1
  9488                           indf2	equ	0xFDF
  9489                           postinc2	equ	0xFDE
  9490                           postdec2	equ	0xFDD
  9491                           fsr2h	equ	0xFDA
  9492                           fsr2l	equ	0xFD9
  9493                           status	equ	0xFD8
  9494                           
  9495 ;; *************** function _inputHandler *****************
  9496 ;; Defined at:
  9497 ;;		line 307 in file "UI.c"
  9498 ;; Parameters:    Size  Location     Type
  9499 ;;		None
  9500 ;; Auto vars:     Size  Location     Type
  9501 ;;		None
  9502 ;; Return value:  Size  Location     Type
  9503 ;;                  2   41[COMRAM] int 
  9504 ;; Registers used:
  9505 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9506 ;; Tracked objects:
  9507 ;;		On entry : 0/0
  9508 ;;		On exit  : 0/0
  9509 ;;		Unchanged: 0/0
  9510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9511 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9513 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9514 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9515 ;;Total ram usage:        4 bytes
  9516 ;; Hardware stack levels used:    1
  9517 ;; Hardware stack levels required when called:    4
  9518 ;; This function calls:
  9519 ;;		_change_state_to_logs_11
  9520 ;;		_change_state_to_logs_12
  9521 ;;		_change_state_to_logs_22
  9522 ;;		_change_state_to_logs_23
  9523 ;;		_change_state_to_logs_33
  9524 ;;		_change_state_to_logs_34
  9525 ;;		_change_state_to_menu_11
  9526 ;;		_change_state_to_menu_12
  9527 ;;		_change_state_to_menu_22
  9528 ;;		_change_state_to_menu_23
  9529 ;; This function is called by:
  9530 ;;		_updateMenu
  9531 ;; This function uses a non-reentrant model
  9532 ;;
  9533                           
  9534                           	psect	text44
  9535  00165E                     __ptext44:
  9536                           	opt stack 0
  9537  00165E                     _inputHandler:
  9538                           	opt stack 18
  9539                           
  9540                           ;UI.c: 312: if(firstboot){
  9541                           
  9542                           ;incstack = 0
  9543  00165E  5071               	movf	_firstboot,w,c
  9544  001660  1072               	iorwf	_firstboot+1,w,c
  9545  001662  B4D8               	btfsc	status,2,c
  9546  001664  D00B               	goto	i2l4376
  9547                           
  9548                           ;UI.c: 313: change_state_to_menu_11();
  9549  001666  EC37  F012         	call	_change_state_to_menu_11	;wreg free
  9550                           
  9551                           ;UI.c: 314: firstboot = 0;
  9552  00166A  0E00               	movlw	0
  9553  00166C  6E72               	movwf	_firstboot+1,c
  9554  00166E  0E00               	movlw	0
  9555  001670  6E71               	movwf	_firstboot,c
  9556                           
  9557                           ;UI.c: 315: return 0;
  9558  001672  0E00               	movlw	0
  9559  001674  6E2B               	movwf	?_inputHandler+1,c
  9560  001676  0E00               	movlw	0
  9561  001678  6E2A               	movwf	?_inputHandler,c
  9562  00167A  0012               	return	
  9563  00167C                     i2l4376:
  9564                           
  9565                           ;UI.c: 316: }
  9566                           ;UI.c: 317: if (logstate){
  9567  00167C  0100               	movlb	0	; () banked
  9568  00167E  51EB               	movf	_logstate& (0+255),w,b
  9569  001680  0100               	movlb	0	; () banked
  9570  001682  11EC               	iorwf	(_logstate+1)& (0+255),w,b
  9571  001684  B4D8               	btfsc	status,2,c
  9572  001686  D0C7               	goto	i2l4494
  9573                           
  9574                           ; BSR set to: 0
  9575                           ;UI.c: 318: if(input == 'C' && PORTBbits.RB1 == 1){
  9576  001688  0E43               	movlw	67
  9577  00168A  187D               	xorwf	_input,w,c
  9578  00168C  A4D8               	btfss	status,2,c
  9579  00168E  D012               	goto	i2l4394
  9580                           
  9581                           ; BSR set to: 0
  9582  001690  B281               	btfsc	3969,1,c	;volatile
  9583  001692  D009               	goto	i2l4386
  9584  001694  D00F               	goto	i2l4394
  9585  001696                     i2l4384:
  9586                           
  9587                           ;UI.c: 321: _delay((unsigned long)((10)*(32000000/4000.0)));
  9588  001696  0E68               	movlw	104
  9589  001698  6E2C               	movwf	??_inputHandler& (0+255),c
  9590  00169A  0EE4               	movlw	228
  9591  00169C                     i2u476_47:
  9592  00169C  2EE8               	decfsz	wreg,f,c
  9593  00169E  D7FE               	bra	i2u476_47
  9594  0016A0  2E2C               	decfsz	??_inputHandler& (0+255),f,c
  9595  0016A2  D7FC               	bra	i2u476_47
  9596  0016A4  D000               	nop2	
  9597  0016A6                     i2l4386:
  9598  0016A6  B281               	btfsc	3969,1,c	;volatile
  9599  0016A8  D7F6               	goto	i2l4384
  9600  0016AA                     i2l4388:
  9601                           
  9602                           ;UI.c: 322: }
  9603                           ;UI.c: 323: return 0;
  9604  0016AA  0E00               	movlw	0
  9605  0016AC  6E2B               	movwf	?_inputHandler+1,c
  9606  0016AE  0E00               	movlw	0
  9607  0016B0  6E2A               	movwf	?_inputHandler,c
  9608  0016B2  0012               	return	
  9609  0016B4                     i2l4394:
  9610                           
  9611                           ;UI.c: 325: else if (input == 'D'){
  9612  0016B4  0E44               	movlw	68
  9613  0016B6  187D               	xorwf	_input,w,c
  9614  0016B8  A4D8               	btfss	status,2,c
  9615  0016BA  D7F7               	goto	i2l4388
  9616                           
  9617                           ;UI.c: 327: logstate = 0;
  9618  0016BC  0E00               	movlw	0
  9619  0016BE  0100               	movlb	0	; () banked
  9620  0016C0  6FEC               	movwf	(_logstate+1)& (0+255),b
  9621  0016C2  0E00               	movlw	0
  9622  0016C4  6FEB               	movwf	_logstate& (0+255),b
  9623                           
  9624                           ;UI.c: 328: switch(cur_state){
  9625  0016C6  D012               	goto	i2l4412
  9626  0016C8                     i2l4398:
  9627                           
  9628                           ;UI.c: 330: change_state_to_logs_11();
  9629  0016C8  ECAF  F012         	call	_change_state_to_logs_11	;wreg free
  9630                           
  9631                           ;UI.c: 331: break;
  9632  0016CC  D7EE               	goto	i2l4388
  9633  0016CE                     i2l4400:
  9634                           
  9635                           ;UI.c: 333: change_state_to_logs_12();
  9636  0016CE  EC97  F012         	call	_change_state_to_logs_12	;wreg free
  9637                           
  9638                           ;UI.c: 334: break;
  9639  0016D2  D7EB               	goto	i2l4388
  9640  0016D4                     i2l4402:
  9641                           
  9642                           ;UI.c: 336: change_state_to_logs_22();
  9643  0016D4  EC7F  F012         	call	_change_state_to_logs_22	;wreg free
  9644                           
  9645                           ;UI.c: 337: break;
  9646  0016D8  D7E8               	goto	i2l4388
  9647  0016DA                     i2l4404:
  9648                           
  9649                           ;UI.c: 339: change_state_to_logs_23();
  9650  0016DA  ECDE  F012         	call	_change_state_to_logs_23	;wreg free
  9651                           
  9652                           ;UI.c: 340: break;
  9653  0016DE  D7E5               	goto	i2l4388
  9654  0016E0                     i2l4406:
  9655                           
  9656                           ;UI.c: 342: change_state_to_logs_33();
  9657  0016E0  EC67  F012         	call	_change_state_to_logs_33	;wreg free
  9658                           
  9659                           ;UI.c: 343: break;
  9660  0016E4  D7E2               	goto	i2l4388
  9661  0016E6                     i2l4408:
  9662                           
  9663                           ;UI.c: 345: change_state_to_logs_34();
  9664  0016E6  EC4F  F012         	call	_change_state_to_logs_34	;wreg free
  9665                           
  9666                           ;UI.c: 347: }
  9667                           
  9668                           ;UI.c: 346: break;
  9669  0016EA  D7DF               	goto	i2l4388
  9670  0016EC                     i2l4412:
  9671  0016EC  C0E1  F02C         	movff	_cur_state,??_inputHandler
  9672  0016F0  C0E2  F02D         	movff	_cur_state+1,??_inputHandler+1
  9673                           
  9674                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  9675                           ; Switch size 1, requested type "space"
  9676                           ; Number of cases is 2, Range of values is 3 to 4
  9677                           ; switch strategies available:
  9678                           ; Name         Instructions Cycles
  9679                           ; simple_byte            7     4 (average)
  9680                           ;	Chosen strategy is simple_byte
  9681  0016F4  502D               	movf	??_inputHandler+1,w,c
  9682  0016F6  0A03               	xorlw	3	; case 3
  9683  0016F8  B4D8               	btfsc	status,2,c
  9684  0016FA  D004               	goto	i2l5414
  9685  0016FC  0A07               	xorlw	7	; case 4
  9686  0016FE  B4D8               	btfsc	status,2,c
  9687  001700  D00F               	goto	i2l5416
  9688  001702  D7D3               	goto	i2l4388
  9689  001704                     i2l5414:
  9690                           
  9691                           ; Switch size 1, requested type "space"
  9692                           ; Number of cases is 4, Range of values is 243 to 255
  9693                           ; switch strategies available:
  9694                           ; Name         Instructions Cycles
  9695                           ; simple_byte           13     7 (average)
  9696                           ;	Chosen strategy is simple_byte
  9697  001704  502C               	movf	??_inputHandler,w,c
  9698  001706  0AF3               	xorlw	243	; case 243
  9699  001708  B4D8               	btfsc	status,2,c
  9700  00170A  D7DE               	goto	i2l4398
  9701  00170C  0A07               	xorlw	7	; case 244
  9702  00170E  B4D8               	btfsc	status,2,c
  9703  001710  D7DE               	goto	i2l4400
  9704  001712  0A0A               	xorlw	10	; case 254
  9705  001714  B4D8               	btfsc	status,2,c
  9706  001716  D7DE               	goto	i2l4402
  9707  001718  0A01               	xorlw	1	; case 255
  9708  00171A  B4D8               	btfsc	status,2,c
  9709  00171C  D7DE               	goto	i2l4404
  9710  00171E  D7C5               	goto	i2l4388
  9711  001720                     i2l5416:
  9712                           
  9713                           ; Switch size 1, requested type "space"
  9714                           ; Number of cases is 2, Range of values is 9 to 10
  9715                           ; switch strategies available:
  9716                           ; Name         Instructions Cycles
  9717                           ; simple_byte            7     4 (average)
  9718                           ;	Chosen strategy is simple_byte
  9719  001720  502C               	movf	??_inputHandler,w,c
  9720  001722  0A09               	xorlw	9	; case 9
  9721  001724  B4D8               	btfsc	status,2,c
  9722  001726  D7DC               	goto	i2l4406
  9723  001728  0A03               	xorlw	3	; case 10
  9724  00172A  B4D8               	btfsc	status,2,c
  9725  00172C  D7DC               	goto	i2l4408
  9726  00172E  D7BD               	goto	i2l4388
  9727  001730                     i2l4424:
  9728                           
  9729                           ;UI.c: 357: if(cur_state == 11){
  9730  001730  0E0B               	movlw	11
  9731  001732  0100               	movlb	0	; () banked
  9732  001734  19E1               	xorwf	_cur_state& (0+255),w,b
  9733  001736  0100               	movlb	0	; () banked
  9734  001738  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
  9735  00173A  A4D8               	btfss	status,2,c
  9736  00173C  D005               	goto	i2l4432
  9737                           
  9738                           ; BSR set to: 0
  9739                           ;UI.c: 358: return 0;
  9740  00173E  0E00               	movlw	0
  9741  001740  6E2B               	movwf	?_inputHandler+1,c
  9742  001742  0E00               	movlw	0
  9743  001744  6E2A               	movwf	?_inputHandler,c
  9744                           
  9745                           ; BSR set to: 0
  9746  001746  0012               	return	
  9747  001748                     i2l4432:
  9748                           
  9749                           ; BSR set to: 0
  9750                           ;UI.c: 360: else{
  9751                           ;UI.c: 361: change_state_to_menu_11();
  9752  001748  EC37  F012         	call	_change_state_to_menu_11	;wreg free
  9753                           
  9754                           ;UI.c: 362: }
  9755                           ;UI.c: 363: return 0;
  9756  00174C  0E00               	movlw	0
  9757  00174E  6E2B               	movwf	?_inputHandler+1,c
  9758  001750  0E00               	movlw	0
  9759  001752  6E2A               	movwf	?_inputHandler,c
  9760  001754  0012               	return	
  9761  001756                     i2l4438:
  9762                           
  9763                           ;UI.c: 365: if(cur_state == 22 | cur_state == 12){
  9764  001756  0E16               	movlw	22
  9765  001758  0100               	movlb	0	; () banked
  9766  00175A  19E1               	xorwf	_cur_state& (0+255),w,b
  9767  00175C  0100               	movlb	0	; () banked
  9768  00175E  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
  9769  001760  B4D8               	btfsc	status,2,c
  9770  001762  D007               	goto	i2l4442
  9771                           
  9772                           ; BSR set to: 0
  9773  001764  0E0C               	movlw	12
  9774  001766  0100               	movlb	0	; () banked
  9775  001768  19E1               	xorwf	_cur_state& (0+255),w,b
  9776  00176A  0100               	movlb	0	; () banked
  9777  00176C  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
  9778  00176E  A4D8               	btfss	status,2,c
  9779  001770  D005               	goto	i2l4448
  9780  001772                     i2l4442:
  9781                           
  9782                           ; BSR set to: 0
  9783                           ;UI.c: 366: return 0;
  9784  001772  0E00               	movlw	0
  9785  001774  6E2B               	movwf	?_inputHandler+1,c
  9786  001776  0E00               	movlw	0
  9787  001778  6E2A               	movwf	?_inputHandler,c
  9788                           
  9789                           ; BSR set to: 0
  9790  00177A  0012               	return	
  9791  00177C                     i2l4448:
  9792                           
  9793                           ; BSR set to: 0
  9794                           ;UI.c: 368: else if(cur_state == 23){
  9795  00177C  0E17               	movlw	23
  9796  00177E  0100               	movlb	0	; () banked
  9797  001780  19E1               	xorwf	_cur_state& (0+255),w,b
  9798  001782  0100               	movlb	0	; () banked
  9799  001784  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
  9800  001786  A4D8               	btfss	status,2,c
  9801  001788  D003               	goto	i2l4452
  9802                           
  9803                           ; BSR set to: 0
  9804                           ;UI.c: 369: change_state_to_menu_22();
  9805  00178A  EC07  F012         	call	_change_state_to_menu_22	;wreg free
  9806                           
  9807                           ;UI.c: 370: }
  9808  00178E  D002               	goto	i2l4454
  9809  001790                     i2l4452:
  9810                           
  9811                           ;UI.c: 371: else{
  9812                           ;UI.c: 372: change_state_to_menu_12();
  9813  001790  EC1F  F012         	call	_change_state_to_menu_12	;wreg free
  9814  001794                     i2l4454:
  9815                           
  9816                           ;UI.c: 373: }
  9817                           ;UI.c: 374: return 0;
  9818  001794  0E00               	movlw	0
  9819  001796  6E2B               	movwf	?_inputHandler+1,c
  9820  001798  0E00               	movlw	0
  9821  00179A  6E2A               	movwf	?_inputHandler,c
  9822  00179C  0012               	return	
  9823  00179E                     i2l4458:
  9824                           
  9825                           ;UI.c: 376: if(cur_state == 23){
  9826  00179E  0E17               	movlw	23
  9827  0017A0  0100               	movlb	0	; () banked
  9828  0017A2  19E1               	xorwf	_cur_state& (0+255),w,b
  9829  0017A4  0100               	movlb	0	; () banked
  9830  0017A6  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
  9831  0017A8  A4D8               	btfss	status,2,c
  9832  0017AA  D005               	goto	i2l4466
  9833                           
  9834                           ; BSR set to: 0
  9835                           ;UI.c: 377: return 0;
  9836  0017AC  0E00               	movlw	0
  9837  0017AE  6E2B               	movwf	?_inputHandler+1,c
  9838  0017B0  0E00               	movlw	0
  9839  0017B2  6E2A               	movwf	?_inputHandler,c
  9840                           
  9841                           ; BSR set to: 0
  9842  0017B4  0012               	return	
  9843  0017B6                     i2l4466:
  9844                           
  9845                           ; BSR set to: 0
  9846                           ;UI.c: 379: else{
  9847                           ;UI.c: 380: change_state_to_menu_23();
  9848  0017B6  ECEF  F011         	call	_change_state_to_menu_23	;wreg free
  9849                           
  9850                           ;UI.c: 381: }
  9851                           ;UI.c: 382: return 0;
  9852  0017BA  0E00               	movlw	0
  9853  0017BC  6E2B               	movwf	?_inputHandler+1,c
  9854  0017BE  0E00               	movlw	0
  9855  0017C0  6E2A               	movwf	?_inputHandler,c
  9856  0017C2  0012               	return	
  9857  0017C4                     i2l4472:
  9858                           
  9859                           ;UI.c: 385: up = 1;
  9860  0017C4  0E00               	movlw	0
  9861  0017C6  6E7A               	movwf	_up+1,c
  9862  0017C8  0E01               	movlw	1
  9863  0017CA  6E79               	movwf	_up,c
  9864                           
  9865                           ;UI.c: 386: return 1;
  9866  0017CC  0E00               	movlw	0
  9867  0017CE  6E2B               	movwf	?_inputHandler+1,c
  9868  0017D0  0E01               	movlw	1
  9869  0017D2  6E2A               	movwf	?_inputHandler,c
  9870  0017D4  0012               	return	
  9871  0017D6                     i2l4476:
  9872                           
  9873                           ;UI.c: 388: down = 1;
  9874  0017D6  0E00               	movlw	0
  9875  0017D8  6E6A               	movwf	_down+1,c
  9876  0017DA  0E01               	movlw	1
  9877  0017DC  6E69               	movwf	_down,c
  9878                           
  9879                           ;UI.c: 389: return 1;
  9880  0017DE  0E00               	movlw	0
  9881  0017E0  6E2B               	movwf	?_inputHandler+1,c
  9882  0017E2  0E01               	movlw	1
  9883  0017E4  6E2A               	movwf	?_inputHandler,c
  9884  0017E6  0012               	return	
  9885  0017E8                     i2l4480:
  9886                           
  9887                           ;UI.c: 391: enter = 1;
  9888  0017E8  0E00               	movlw	0
  9889  0017EA  6E6C               	movwf	_enter+1,c
  9890  0017EC  0E01               	movlw	1
  9891  0017EE  6E6B               	movwf	_enter,c
  9892                           
  9893                           ;UI.c: 392: return 1;
  9894  0017F0  0E00               	movlw	0
  9895  0017F2  6E2B               	movwf	?_inputHandler+1,c
  9896  0017F4  0E01               	movlw	1
  9897  0017F6  6E2A               	movwf	?_inputHandler,c
  9898  0017F8  0012               	return	
  9899  0017FA                     i2l4484:
  9900                           
  9901                           ;UI.c: 394: back = 1;
  9902  0017FA  0E00               	movlw	0
  9903  0017FC  6E60               	movwf	_back+1,c
  9904  0017FE  0E01               	movlw	1
  9905  001800  6E5F               	movwf	_back,c
  9906                           
  9907                           ;UI.c: 395: return 1;
  9908  001802  0E00               	movlw	0
  9909  001804  6E2B               	movwf	?_inputHandler+1,c
  9910  001806  0E01               	movlw	1
  9911  001808  6E2A               	movwf	?_inputHandler,c
  9912  00180A  0012               	return	
  9913  00180C                     i2l4488:
  9914                           
  9915                           ;UI.c: 398: return 1;
  9916  00180C  0E00               	movlw	0
  9917  00180E  6E2B               	movwf	?_inputHandler+1,c
  9918  001810  0E01               	movlw	1
  9919  001812  6E2A               	movwf	?_inputHandler,c
  9920                           
  9921                           ;UI.c: 399: }
  9922  001814  0012               	return	
  9923  001816                     i2l4494:
  9924  001816  507D               	movf	_input,w,c
  9925                           
  9926                           ; Switch size 1, requested type "space"
  9927                           ; Number of cases is 7, Range of values is 49 to 68
  9928                           ; switch strategies available:
  9929                           ; Name         Instructions Cycles
  9930                           ; simple_byte           22    12 (average)
  9931                           ;	Chosen strategy is simple_byte
  9932  001818  0A31               	xorlw	49	; case 49
  9933  00181A  B4D8               	btfsc	status,2,c
  9934  00181C  D789               	goto	i2l4424
  9935  00181E  0A03               	xorlw	3	; case 50
  9936  001820  B4D8               	btfsc	status,2,c
  9937  001822  D799               	goto	i2l4438
  9938  001824  0A01               	xorlw	1	; case 51
  9939  001826  B4D8               	btfsc	status,2,c
  9940  001828  D7BA               	goto	i2l4458
  9941  00182A  0A72               	xorlw	114	; case 65
  9942  00182C  B4D8               	btfsc	status,2,c
  9943  00182E  D7CA               	goto	i2l4472
  9944  001830  0A03               	xorlw	3	; case 66
  9945  001832  B4D8               	btfsc	status,2,c
  9946  001834  D7D0               	goto	i2l4476
  9947  001836  0A01               	xorlw	1	; case 67
  9948  001838  B4D8               	btfsc	status,2,c
  9949  00183A  D7D6               	goto	i2l4480
  9950  00183C  0A07               	xorlw	7	; case 68
  9951  00183E  B4D8               	btfsc	status,2,c
  9952  001840  D7DC               	goto	i2l4484
  9953  001842  D7E4               	goto	i2l4488
  9954  001844                     __end_of_inputHandler:
  9955                           	opt stack 0
  9956                           pclatu	equ	0xFFB
  9957                           pclath	equ	0xFFA
  9958                           tblptru	equ	0xFF8
  9959                           tblptrh	equ	0xFF7
  9960                           tblptrl	equ	0xFF6
  9961                           tablat	equ	0xFF5
  9962                           prodh	equ	0xFF4
  9963                           prodl	equ	0xFF3
  9964                           intcon	equ	0xFF2
  9965                           intcon3	equ	0xFF0
  9966                           indf0	equ	0xFEF
  9967                           postinc0	equ	0xFEE
  9968                           fsr0h	equ	0xFEA
  9969                           fsr0l	equ	0xFE9
  9970                           wreg	equ	0xFE8
  9971                           postdec1	equ	0xFE5
  9972                           fsr1h	equ	0xFE2
  9973                           fsr1l	equ	0xFE1
  9974                           indf2	equ	0xFDF
  9975                           postinc2	equ	0xFDE
  9976                           postdec2	equ	0xFDD
  9977                           fsr2h	equ	0xFDA
  9978                           fsr2l	equ	0xFD9
  9979                           status	equ	0xFD8
  9980                           
  9981 ;; *************** function _change_state_to_menu_23 *****************
  9982 ;; Defined at:
  9983 ;;		line 440 in file "UI.c"
  9984 ;; Parameters:    Size  Location     Type
  9985 ;;		None
  9986 ;; Auto vars:     Size  Location     Type
  9987 ;;		None
  9988 ;; Return value:  Size  Location     Type
  9989 ;;                  1    wreg      void 
  9990 ;; Registers used:
  9991 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9992 ;; Tracked objects:
  9993 ;;		On entry : 0/0
  9994 ;;		On exit  : 0/0
  9995 ;;		Unchanged: 0/0
  9996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10001 ;;Total ram usage:        0 bytes
 10002 ;; Hardware stack levels used:    1
 10003 ;; Hardware stack levels required when called:    3
 10004 ;; This function calls:
 10005 ;;		i2_lcdInst
 10006 ;;		i2_printf
 10007 ;; This function is called by:
 10008 ;;		_updateMenu
 10009 ;;		_inputHandler
 10010 ;; This function uses a non-reentrant model
 10011 ;;
 10012                           
 10013                           	psect	text45
 10014  0023DE                     __ptext45:
 10015                           	opt stack 0
 10016  0023DE                     _change_state_to_menu_23:
 10017                           	opt stack 18
 10018                           
 10019                           ;UI.c: 441: cur_state = 23;
 10020                           
 10021                           ;incstack = 0
 10022  0023DE  0E00               	movlw	0
 10023  0023E0  0100               	movlb	0	; () banked
 10024  0023E2  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10025  0023E4  0E17               	movlw	23
 10026  0023E6  6FE1               	movwf	_cur_state& (0+255),b
 10027                           
 10028                           ; BSR set to: 0
 10029                           ;UI.c: 443: lcdInst(0b10000000);;
 10030  0023E8  0E80               	movlw	128
 10031  0023EA  ECEC  F013         	call	i2_lcdInst
 10032                           
 10033                           ;UI.c: 444: printf("2. SORT         ");
 10034  0023EE  0E7A               	movlw	low STR_17
 10035  0023F0  6E0D               	movwf	i2printf@f,c
 10036  0023F2  0EFE               	movlw	high STR_17
 10037  0023F4  6E0E               	movwf	i2printf@f+1,c
 10038  0023F6  ECAF  F004         	call	i2_printf	;wreg free
 10039                           
 10040                           ;UI.c: 445: lcdInst(0b11000000);;
 10041  0023FA  0EC0               	movlw	192
 10042  0023FC  ECEC  F013         	call	i2_lcdInst
 10043                           
 10044                           ;UI.c: 446: printf("3. LOGS        <");
 10045  002400  0E46               	movlw	low STR_23
 10046  002402  6E0D               	movwf	i2printf@f,c
 10047  002404  0EFF               	movlw	high STR_23
 10048  002406  6E0E               	movwf	i2printf@f+1,c
 10049  002408  ECAF  F004         	call	i2_printf	;wreg free
 10050  00240C  0012               	return		;funcret
 10051  00240E                     __end_of_change_state_to_menu_23:
 10052                           	opt stack 0
 10053                           pclatu	equ	0xFFB
 10054                           pclath	equ	0xFFA
 10055                           tblptru	equ	0xFF8
 10056                           tblptrh	equ	0xFF7
 10057                           tblptrl	equ	0xFF6
 10058                           tablat	equ	0xFF5
 10059                           prodh	equ	0xFF4
 10060                           prodl	equ	0xFF3
 10061                           intcon	equ	0xFF2
 10062                           intcon3	equ	0xFF0
 10063                           indf0	equ	0xFEF
 10064                           postinc0	equ	0xFEE
 10065                           fsr0h	equ	0xFEA
 10066                           fsr0l	equ	0xFE9
 10067                           wreg	equ	0xFE8
 10068                           postdec1	equ	0xFE5
 10069                           fsr1h	equ	0xFE2
 10070                           fsr1l	equ	0xFE1
 10071                           indf2	equ	0xFDF
 10072                           postinc2	equ	0xFDE
 10073                           postdec2	equ	0xFDD
 10074                           fsr2h	equ	0xFDA
 10075                           fsr2l	equ	0xFD9
 10076                           status	equ	0xFD8
 10077                           
 10078 ;; *************** function _change_state_to_menu_22 *****************
 10079 ;; Defined at:
 10080 ;;		line 432 in file "UI.c"
 10081 ;; Parameters:    Size  Location     Type
 10082 ;;		None
 10083 ;; Auto vars:     Size  Location     Type
 10084 ;;		None
 10085 ;; Return value:  Size  Location     Type
 10086 ;;                  1    wreg      void 
 10087 ;; Registers used:
 10088 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10089 ;; Tracked objects:
 10090 ;;		On entry : 0/0
 10091 ;;		On exit  : 0/0
 10092 ;;		Unchanged: 0/0
 10093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10098 ;;Total ram usage:        0 bytes
 10099 ;; Hardware stack levels used:    1
 10100 ;; Hardware stack levels required when called:    3
 10101 ;; This function calls:
 10102 ;;		i2_lcdInst
 10103 ;;		i2_printf
 10104 ;; This function is called by:
 10105 ;;		_updateMenu
 10106 ;;		_inputHandler
 10107 ;; This function uses a non-reentrant model
 10108 ;;
 10109                           
 10110                           	psect	text46
 10111  00240E                     __ptext46:
 10112                           	opt stack 0
 10113  00240E                     _change_state_to_menu_22:
 10114                           	opt stack 18
 10115                           
 10116                           ;UI.c: 433: cur_state = 22;
 10117                           
 10118                           ;incstack = 0
 10119  00240E  0E00               	movlw	0
 10120  002410  0100               	movlb	0	; () banked
 10121  002412  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10122  002414  0E16               	movlw	22
 10123  002416  6FE1               	movwf	_cur_state& (0+255),b
 10124                           
 10125                           ; BSR set to: 0
 10126                           ;UI.c: 435: lcdInst(0b10000000);;
 10127  002418  0E80               	movlw	128
 10128  00241A  ECEC  F013         	call	i2_lcdInst
 10129                           
 10130                           ;UI.c: 436: printf("2. SORT        <");
 10131  00241E  0E57               	movlw	low STR_19
 10132  002420  6E0D               	movwf	i2printf@f,c
 10133  002422  0EFF               	movlw	high STR_19
 10134  002424  6E0E               	movwf	i2printf@f+1,c
 10135  002426  ECAF  F004         	call	i2_printf	;wreg free
 10136                           
 10137                           ;UI.c: 437: lcdInst(0b11000000);;
 10138  00242A  0EC0               	movlw	192
 10139  00242C  ECEC  F013         	call	i2_lcdInst
 10140                           
 10141                           ;UI.c: 438: printf("3. LOGS         ");
 10142  002430  0E69               	movlw	low STR_21
 10143  002432  6E0D               	movwf	i2printf@f,c
 10144  002434  0EFE               	movlw	high STR_21
 10145  002436  6E0E               	movwf	i2printf@f+1,c
 10146  002438  ECAF  F004         	call	i2_printf	;wreg free
 10147  00243C  0012               	return		;funcret
 10148  00243E                     __end_of_change_state_to_menu_22:
 10149                           	opt stack 0
 10150                           pclatu	equ	0xFFB
 10151                           pclath	equ	0xFFA
 10152                           tblptru	equ	0xFF8
 10153                           tblptrh	equ	0xFF7
 10154                           tblptrl	equ	0xFF6
 10155                           tablat	equ	0xFF5
 10156                           prodh	equ	0xFF4
 10157                           prodl	equ	0xFF3
 10158                           intcon	equ	0xFF2
 10159                           intcon3	equ	0xFF0
 10160                           indf0	equ	0xFEF
 10161                           postinc0	equ	0xFEE
 10162                           fsr0h	equ	0xFEA
 10163                           fsr0l	equ	0xFE9
 10164                           wreg	equ	0xFE8
 10165                           postdec1	equ	0xFE5
 10166                           fsr1h	equ	0xFE2
 10167                           fsr1l	equ	0xFE1
 10168                           indf2	equ	0xFDF
 10169                           postinc2	equ	0xFDE
 10170                           postdec2	equ	0xFDD
 10171                           fsr2h	equ	0xFDA
 10172                           fsr2l	equ	0xFD9
 10173                           status	equ	0xFD8
 10174                           
 10175 ;; *************** function _change_state_to_menu_12 *****************
 10176 ;; Defined at:
 10177 ;;		line 424 in file "UI.c"
 10178 ;; Parameters:    Size  Location     Type
 10179 ;;		None
 10180 ;; Auto vars:     Size  Location     Type
 10181 ;;		None
 10182 ;; Return value:  Size  Location     Type
 10183 ;;                  1    wreg      void 
 10184 ;; Registers used:
 10185 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10186 ;; Tracked objects:
 10187 ;;		On entry : 0/0
 10188 ;;		On exit  : 0/0
 10189 ;;		Unchanged: 0/0
 10190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10195 ;;Total ram usage:        0 bytes
 10196 ;; Hardware stack levels used:    1
 10197 ;; Hardware stack levels required when called:    3
 10198 ;; This function calls:
 10199 ;;		i2_lcdInst
 10200 ;;		i2_printf
 10201 ;; This function is called by:
 10202 ;;		_updateMenu
 10203 ;;		_inputHandler
 10204 ;; This function uses a non-reentrant model
 10205 ;;
 10206                           
 10207                           	psect	text47
 10208  00243E                     __ptext47:
 10209                           	opt stack 0
 10210  00243E                     _change_state_to_menu_12:
 10211                           	opt stack 18
 10212                           
 10213                           ;UI.c: 425: cur_state = 12;
 10214                           
 10215                           ;incstack = 0
 10216  00243E  0E00               	movlw	0
 10217  002440  0100               	movlb	0	; () banked
 10218  002442  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10219  002444  0E0C               	movlw	12
 10220  002446  6FE1               	movwf	_cur_state& (0+255),b
 10221                           
 10222                           ; BSR set to: 0
 10223                           ;UI.c: 427: lcdInst(0b10000000);;
 10224  002448  0E80               	movlw	128
 10225  00244A  ECEC  F013         	call	i2_lcdInst
 10226                           
 10227                           ;UI.c: 428: printf("1. DATE/TIME    ");
 10228  00244E  0E8B               	movlw	low STR_18
 10229  002450  6E0D               	movwf	i2printf@f,c
 10230  002452  0EFE               	movlw	high STR_18
 10231  002454  6E0E               	movwf	i2printf@f+1,c
 10232  002456  ECAF  F004         	call	i2_printf	;wreg free
 10233                           
 10234                           ;UI.c: 429: lcdInst(0b11000000);;
 10235  00245A  0EC0               	movlw	192
 10236  00245C  ECEC  F013         	call	i2_lcdInst
 10237                           
 10238                           ;UI.c: 430: printf("2. SORT        <");
 10239  002460  0E57               	movlw	low STR_19
 10240  002462  6E0D               	movwf	i2printf@f,c
 10241  002464  0EFF               	movlw	high STR_19
 10242  002466  6E0E               	movwf	i2printf@f+1,c
 10243  002468  ECAF  F004         	call	i2_printf	;wreg free
 10244  00246C  0012               	return		;funcret
 10245  00246E                     __end_of_change_state_to_menu_12:
 10246                           	opt stack 0
 10247                           pclatu	equ	0xFFB
 10248                           pclath	equ	0xFFA
 10249                           tblptru	equ	0xFF8
 10250                           tblptrh	equ	0xFF7
 10251                           tblptrl	equ	0xFF6
 10252                           tablat	equ	0xFF5
 10253                           prodh	equ	0xFF4
 10254                           prodl	equ	0xFF3
 10255                           intcon	equ	0xFF2
 10256                           intcon3	equ	0xFF0
 10257                           indf0	equ	0xFEF
 10258                           postinc0	equ	0xFEE
 10259                           fsr0h	equ	0xFEA
 10260                           fsr0l	equ	0xFE9
 10261                           wreg	equ	0xFE8
 10262                           postdec1	equ	0xFE5
 10263                           fsr1h	equ	0xFE2
 10264                           fsr1l	equ	0xFE1
 10265                           indf2	equ	0xFDF
 10266                           postinc2	equ	0xFDE
 10267                           postdec2	equ	0xFDD
 10268                           fsr2h	equ	0xFDA
 10269                           fsr2l	equ	0xFD9
 10270                           status	equ	0xFD8
 10271                           
 10272 ;; *************** function _change_state_to_menu_11 *****************
 10273 ;; Defined at:
 10274 ;;		line 416 in file "UI.c"
 10275 ;; Parameters:    Size  Location     Type
 10276 ;;		None
 10277 ;; Auto vars:     Size  Location     Type
 10278 ;;		None
 10279 ;; Return value:  Size  Location     Type
 10280 ;;                  1    wreg      void 
 10281 ;; Registers used:
 10282 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10283 ;; Tracked objects:
 10284 ;;		On entry : 0/0
 10285 ;;		On exit  : 0/0
 10286 ;;		Unchanged: 0/0
 10287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10292 ;;Total ram usage:        0 bytes
 10293 ;; Hardware stack levels used:    1
 10294 ;; Hardware stack levels required when called:    3
 10295 ;; This function calls:
 10296 ;;		i2_lcdInst
 10297 ;;		i2_printf
 10298 ;; This function is called by:
 10299 ;;		_updateMenu
 10300 ;;		_inputHandler
 10301 ;; This function uses a non-reentrant model
 10302 ;;
 10303                           
 10304                           	psect	text48
 10305  00246E                     __ptext48:
 10306                           	opt stack 0
 10307  00246E                     _change_state_to_menu_11:
 10308                           	opt stack 18
 10309                           
 10310                           ;UI.c: 417: cur_state = 11;
 10311                           
 10312                           ;incstack = 0
 10313  00246E  0E00               	movlw	0
 10314  002470  0100               	movlb	0	; () banked
 10315  002472  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10316  002474  0E0B               	movlw	11
 10317  002476  6FE1               	movwf	_cur_state& (0+255),b
 10318                           
 10319                           ; BSR set to: 0
 10320                           ;UI.c: 419: lcdInst(0b10000000);;
 10321  002478  0E80               	movlw	128
 10322  00247A  ECEC  F013         	call	i2_lcdInst
 10323                           
 10324                           ;UI.c: 420: printf("1. DATE/TIME   <");
 10325  00247E  0E68               	movlw	low STR_16
 10326  002480  6E0D               	movwf	i2printf@f,c
 10327  002482  0EFF               	movlw	high STR_16
 10328  002484  6E0E               	movwf	i2printf@f+1,c
 10329  002486  ECAF  F004         	call	i2_printf	;wreg free
 10330                           
 10331                           ;UI.c: 421: lcdInst(0b11000000);;
 10332  00248A  0EC0               	movlw	192
 10333  00248C  ECEC  F013         	call	i2_lcdInst
 10334                           
 10335                           ;UI.c: 422: printf("2. SORT         ");
 10336  002490  0E7A               	movlw	low STR_17
 10337  002492  6E0D               	movwf	i2printf@f,c
 10338  002494  0EFE               	movlw	high STR_17
 10339  002496  6E0E               	movwf	i2printf@f+1,c
 10340  002498  ECAF  F004         	call	i2_printf	;wreg free
 10341  00249C  0012               	return		;funcret
 10342  00249E                     __end_of_change_state_to_menu_11:
 10343                           	opt stack 0
 10344                           pclatu	equ	0xFFB
 10345                           pclath	equ	0xFFA
 10346                           tblptru	equ	0xFF8
 10347                           tblptrh	equ	0xFF7
 10348                           tblptrl	equ	0xFF6
 10349                           tablat	equ	0xFF5
 10350                           prodh	equ	0xFF4
 10351                           prodl	equ	0xFF3
 10352                           intcon	equ	0xFF2
 10353                           intcon3	equ	0xFF0
 10354                           indf0	equ	0xFEF
 10355                           postinc0	equ	0xFEE
 10356                           fsr0h	equ	0xFEA
 10357                           fsr0l	equ	0xFE9
 10358                           wreg	equ	0xFE8
 10359                           postdec1	equ	0xFE5
 10360                           fsr1h	equ	0xFE2
 10361                           fsr1l	equ	0xFE1
 10362                           indf2	equ	0xFDF
 10363                           postinc2	equ	0xFDE
 10364                           postdec2	equ	0xFDD
 10365                           fsr2h	equ	0xFDA
 10366                           fsr2l	equ	0xFD9
 10367                           status	equ	0xFD8
 10368                           
 10369 ;; *************** function _change_state_to_logs_34 *****************
 10370 ;; Defined at:
 10371 ;;		line 483 in file "UI.c"
 10372 ;; Parameters:    Size  Location     Type
 10373 ;;		None
 10374 ;; Auto vars:     Size  Location     Type
 10375 ;;		None
 10376 ;; Return value:  Size  Location     Type
 10377 ;;                  1    wreg      void 
 10378 ;; Registers used:
 10379 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10380 ;; Tracked objects:
 10381 ;;		On entry : 0/0
 10382 ;;		On exit  : 0/0
 10383 ;;		Unchanged: 0/0
 10384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10388 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10389 ;;Total ram usage:        0 bytes
 10390 ;; Hardware stack levels used:    1
 10391 ;; Hardware stack levels required when called:    3
 10392 ;; This function calls:
 10393 ;;		i2_lcdInst
 10394 ;;		i2_printf
 10395 ;; This function is called by:
 10396 ;;		_updateMenu
 10397 ;;		_inputHandler
 10398 ;; This function uses a non-reentrant model
 10399 ;;
 10400                           
 10401                           	psect	text49
 10402  00249E                     __ptext49:
 10403                           	opt stack 0
 10404  00249E                     _change_state_to_logs_34:
 10405                           	opt stack 18
 10406                           
 10407                           ;UI.c: 484: cur_state = 1034;
 10408                           
 10409                           ;incstack = 0
 10410  00249E  0E04               	movlw	4
 10411  0024A0  0100               	movlb	0	; () banked
 10412  0024A2  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10413  0024A4  0E0A               	movlw	10
 10414  0024A6  6FE1               	movwf	_cur_state& (0+255),b
 10415                           
 10416                           ; BSR set to: 0
 10417                           ;UI.c: 485: lcdInst(0b10000000);;
 10418  0024A8  0E80               	movlw	128
 10419  0024AA  ECEC  F013         	call	i2_lcdInst
 10420                           
 10421                           ;UI.c: 486: printf("LOG 3           ");
 10422  0024AE  0E47               	movlw	low STR_29
 10423  0024B0  6E0D               	movwf	i2printf@f,c
 10424  0024B2  0EFE               	movlw	high STR_29
 10425  0024B4  6E0E               	movwf	i2printf@f+1,c
 10426  0024B6  ECAF  F004         	call	i2_printf	;wreg free
 10427                           
 10428                           ;UI.c: 487: lcdInst(0b11000000);;
 10429  0024BA  0EC0               	movlw	192
 10430  0024BC  ECEC  F013         	call	i2_lcdInst
 10431                           
 10432                           ;UI.c: 488: printf("LOG 4          <");
 10433  0024C0  0E35               	movlw	low STR_35
 10434  0024C2  6E0D               	movwf	i2printf@f,c
 10435  0024C4  0EFF               	movlw	high STR_35
 10436  0024C6  6E0E               	movwf	i2printf@f+1,c
 10437  0024C8  ECAF  F004         	call	i2_printf	;wreg free
 10438  0024CC  0012               	return		;funcret
 10439  0024CE                     __end_of_change_state_to_logs_34:
 10440                           	opt stack 0
 10441                           pclatu	equ	0xFFB
 10442                           pclath	equ	0xFFA
 10443                           tblptru	equ	0xFF8
 10444                           tblptrh	equ	0xFF7
 10445                           tblptrl	equ	0xFF6
 10446                           tablat	equ	0xFF5
 10447                           prodh	equ	0xFF4
 10448                           prodl	equ	0xFF3
 10449                           intcon	equ	0xFF2
 10450                           intcon3	equ	0xFF0
 10451                           indf0	equ	0xFEF
 10452                           postinc0	equ	0xFEE
 10453                           fsr0h	equ	0xFEA
 10454                           fsr0l	equ	0xFE9
 10455                           wreg	equ	0xFE8
 10456                           postdec1	equ	0xFE5
 10457                           fsr1h	equ	0xFE2
 10458                           fsr1l	equ	0xFE1
 10459                           indf2	equ	0xFDF
 10460                           postinc2	equ	0xFDE
 10461                           postdec2	equ	0xFDD
 10462                           fsr2h	equ	0xFDA
 10463                           fsr2l	equ	0xFD9
 10464                           status	equ	0xFD8
 10465                           
 10466 ;; *************** function _change_state_to_logs_33 *****************
 10467 ;; Defined at:
 10468 ;;		line 476 in file "UI.c"
 10469 ;; Parameters:    Size  Location     Type
 10470 ;;		None
 10471 ;; Auto vars:     Size  Location     Type
 10472 ;;		None
 10473 ;; Return value:  Size  Location     Type
 10474 ;;                  1    wreg      void 
 10475 ;; Registers used:
 10476 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10477 ;; Tracked objects:
 10478 ;;		On entry : 0/0
 10479 ;;		On exit  : 0/0
 10480 ;;		Unchanged: 0/0
 10481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10485 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10486 ;;Total ram usage:        0 bytes
 10487 ;; Hardware stack levels used:    1
 10488 ;; Hardware stack levels required when called:    3
 10489 ;; This function calls:
 10490 ;;		i2_lcdInst
 10491 ;;		i2_printf
 10492 ;; This function is called by:
 10493 ;;		_updateMenu
 10494 ;;		_inputHandler
 10495 ;; This function uses a non-reentrant model
 10496 ;;
 10497                           
 10498                           	psect	text50
 10499  0024CE                     __ptext50:
 10500                           	opt stack 0
 10501  0024CE                     _change_state_to_logs_33:
 10502                           	opt stack 18
 10503                           
 10504                           ;UI.c: 477: cur_state = 1033;
 10505                           
 10506                           ;incstack = 0
 10507  0024CE  0E04               	movlw	4
 10508  0024D0  0100               	movlb	0	; () banked
 10509  0024D2  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10510  0024D4  0E09               	movlw	9
 10511  0024D6  6FE1               	movwf	_cur_state& (0+255),b
 10512                           
 10513                           ; BSR set to: 0
 10514                           ;UI.c: 478: lcdInst(0b10000000);;
 10515  0024D8  0E80               	movlw	128
 10516  0024DA  ECEC  F013         	call	i2_lcdInst
 10517                           
 10518                           ;UI.c: 479: printf("LOG 3          <");
 10519  0024DE  0E24               	movlw	low STR_31
 10520  0024E0  6E0D               	movwf	i2printf@f,c
 10521  0024E2  0EFF               	movlw	high STR_31
 10522  0024E4  6E0E               	movwf	i2printf@f+1,c
 10523  0024E6  ECAF  F004         	call	i2_printf	;wreg free
 10524                           
 10525                           ;UI.c: 480: lcdInst(0b11000000);;
 10526  0024EA  0EC0               	movlw	192
 10527  0024EC  ECEC  F013         	call	i2_lcdInst
 10528                           
 10529                           ;UI.c: 481: printf("LOG 4           ");
 10530  0024F0  0E58               	movlw	low STR_33
 10531  0024F2  6E0D               	movwf	i2printf@f,c
 10532  0024F4  0EFE               	movlw	high STR_33
 10533  0024F6  6E0E               	movwf	i2printf@f+1,c
 10534  0024F8  ECAF  F004         	call	i2_printf	;wreg free
 10535  0024FC  0012               	return		;funcret
 10536  0024FE                     __end_of_change_state_to_logs_33:
 10537                           	opt stack 0
 10538                           pclatu	equ	0xFFB
 10539                           pclath	equ	0xFFA
 10540                           tblptru	equ	0xFF8
 10541                           tblptrh	equ	0xFF7
 10542                           tblptrl	equ	0xFF6
 10543                           tablat	equ	0xFF5
 10544                           prodh	equ	0xFF4
 10545                           prodl	equ	0xFF3
 10546                           intcon	equ	0xFF2
 10547                           intcon3	equ	0xFF0
 10548                           indf0	equ	0xFEF
 10549                           postinc0	equ	0xFEE
 10550                           fsr0h	equ	0xFEA
 10551                           fsr0l	equ	0xFE9
 10552                           wreg	equ	0xFE8
 10553                           postdec1	equ	0xFE5
 10554                           fsr1h	equ	0xFE2
 10555                           fsr1l	equ	0xFE1
 10556                           indf2	equ	0xFDF
 10557                           postinc2	equ	0xFDE
 10558                           postdec2	equ	0xFDD
 10559                           fsr2h	equ	0xFDA
 10560                           fsr2l	equ	0xFD9
 10561                           status	equ	0xFD8
 10562                           
 10563 ;; *************** function _change_state_to_logs_23 *****************
 10564 ;; Defined at:
 10565 ;;		line 469 in file "UI.c"
 10566 ;; Parameters:    Size  Location     Type
 10567 ;;		None
 10568 ;; Auto vars:     Size  Location     Type
 10569 ;;		None
 10570 ;; Return value:  Size  Location     Type
 10571 ;;                  1    wreg      void 
 10572 ;; Registers used:
 10573 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10574 ;; Tracked objects:
 10575 ;;		On entry : 0/0
 10576 ;;		On exit  : 0/0
 10577 ;;		Unchanged: 0/0
 10578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10582 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10583 ;;Total ram usage:        0 bytes
 10584 ;; Hardware stack levels used:    1
 10585 ;; Hardware stack levels required when called:    3
 10586 ;; This function calls:
 10587 ;;		i2_lcdInst
 10588 ;;		i2_printf
 10589 ;; This function is called by:
 10590 ;;		_updateMenu
 10591 ;;		_inputHandler
 10592 ;; This function uses a non-reentrant model
 10593 ;;
 10594                           
 10595                           	psect	text51
 10596  0025BC                     __ptext51:
 10597                           	opt stack 0
 10598  0025BC                     _change_state_to_logs_23:
 10599                           	opt stack 18
 10600                           
 10601                           ;UI.c: 470: cur_state = 1023;
 10602                           
 10603                           ;incstack = 0
 10604  0025BC  0E03               	movlw	3
 10605  0025BE  0100               	movlb	0	; () banked
 10606  0025C0  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10607  0025C2  69E1               	setf	_cur_state& (0+255),b
 10608                           
 10609                           ; BSR set to: 0
 10610                           ;UI.c: 471: lcdInst(0b10000000);;
 10611  0025C4  0E80               	movlw	128
 10612  0025C6  ECEC  F013         	call	i2_lcdInst
 10613                           
 10614                           ;UI.c: 472: printf("LOG 2           ");
 10615  0025CA  0E36               	movlw	low STR_25
 10616  0025CC  6E0D               	movwf	i2printf@f,c
 10617  0025CE  0EFE               	movlw	high STR_25
 10618  0025D0  6E0E               	movwf	i2printf@f+1,c
 10619  0025D2  ECAF  F004         	call	i2_printf	;wreg free
 10620                           
 10621                           ;UI.c: 473: lcdInst(0b11000000);;
 10622  0025D6  0EC0               	movlw	192
 10623  0025D8  ECEC  F013         	call	i2_lcdInst
 10624                           
 10625                           ;UI.c: 474: printf("LOG 3          <");
 10626  0025DC  0E24               	movlw	low STR_31
 10627  0025DE  6E0D               	movwf	i2printf@f,c
 10628  0025E0  0EFF               	movlw	high STR_31
 10629  0025E2  6E0E               	movwf	i2printf@f+1,c
 10630  0025E4  ECAF  F004         	call	i2_printf	;wreg free
 10631  0025E8  0012               	return		;funcret
 10632  0025EA                     __end_of_change_state_to_logs_23:
 10633                           	opt stack 0
 10634                           pclatu	equ	0xFFB
 10635                           pclath	equ	0xFFA
 10636                           tblptru	equ	0xFF8
 10637                           tblptrh	equ	0xFF7
 10638                           tblptrl	equ	0xFF6
 10639                           tablat	equ	0xFF5
 10640                           prodh	equ	0xFF4
 10641                           prodl	equ	0xFF3
 10642                           intcon	equ	0xFF2
 10643                           intcon3	equ	0xFF0
 10644                           indf0	equ	0xFEF
 10645                           postinc0	equ	0xFEE
 10646                           fsr0h	equ	0xFEA
 10647                           fsr0l	equ	0xFE9
 10648                           wreg	equ	0xFE8
 10649                           postdec1	equ	0xFE5
 10650                           fsr1h	equ	0xFE2
 10651                           fsr1l	equ	0xFE1
 10652                           indf2	equ	0xFDF
 10653                           postinc2	equ	0xFDE
 10654                           postdec2	equ	0xFDD
 10655                           fsr2h	equ	0xFDA
 10656                           fsr2l	equ	0xFD9
 10657                           status	equ	0xFD8
 10658                           
 10659 ;; *************** function _change_state_to_logs_22 *****************
 10660 ;; Defined at:
 10661 ;;		line 462 in file "UI.c"
 10662 ;; Parameters:    Size  Location     Type
 10663 ;;		None
 10664 ;; Auto vars:     Size  Location     Type
 10665 ;;		None
 10666 ;; Return value:  Size  Location     Type
 10667 ;;                  1    wreg      void 
 10668 ;; Registers used:
 10669 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10670 ;; Tracked objects:
 10671 ;;		On entry : 0/0
 10672 ;;		On exit  : 0/0
 10673 ;;		Unchanged: 0/0
 10674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10678 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10679 ;;Total ram usage:        0 bytes
 10680 ;; Hardware stack levels used:    1
 10681 ;; Hardware stack levels required when called:    3
 10682 ;; This function calls:
 10683 ;;		i2_lcdInst
 10684 ;;		i2_printf
 10685 ;; This function is called by:
 10686 ;;		_updateMenu
 10687 ;;		_inputHandler
 10688 ;; This function uses a non-reentrant model
 10689 ;;
 10690                           
 10691                           	psect	text52
 10692  0024FE                     __ptext52:
 10693                           	opt stack 0
 10694  0024FE                     _change_state_to_logs_22:
 10695                           	opt stack 18
 10696                           
 10697                           ;UI.c: 463: cur_state = 1022;
 10698                           
 10699                           ;incstack = 0
 10700  0024FE  0E03               	movlw	3
 10701  002500  0100               	movlb	0	; () banked
 10702  002502  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10703  002504  0EFE               	movlw	254
 10704  002506  6FE1               	movwf	_cur_state& (0+255),b
 10705                           
 10706                           ; BSR set to: 0
 10707                           ;UI.c: 464: lcdInst(0b10000000);;
 10708  002508  0E80               	movlw	128
 10709  00250A  ECEC  F013         	call	i2_lcdInst
 10710                           
 10711                           ;UI.c: 465: printf("LOG 2          <");
 10712  00250E  0E13               	movlw	low STR_27
 10713  002510  6E0D               	movwf	i2printf@f,c
 10714  002512  0EFF               	movlw	high STR_27
 10715  002514  6E0E               	movwf	i2printf@f+1,c
 10716  002516  ECAF  F004         	call	i2_printf	;wreg free
 10717                           
 10718                           ;UI.c: 466: lcdInst(0b11000000);;
 10719  00251A  0EC0               	movlw	192
 10720  00251C  ECEC  F013         	call	i2_lcdInst
 10721                           
 10722                           ;UI.c: 467: printf("LOG 3           ");
 10723  002520  0E47               	movlw	low STR_29
 10724  002522  6E0D               	movwf	i2printf@f,c
 10725  002524  0EFE               	movlw	high STR_29
 10726  002526  6E0E               	movwf	i2printf@f+1,c
 10727  002528  ECAF  F004         	call	i2_printf	;wreg free
 10728  00252C  0012               	return		;funcret
 10729  00252E                     __end_of_change_state_to_logs_22:
 10730                           	opt stack 0
 10731                           pclatu	equ	0xFFB
 10732                           pclath	equ	0xFFA
 10733                           tblptru	equ	0xFF8
 10734                           tblptrh	equ	0xFF7
 10735                           tblptrl	equ	0xFF6
 10736                           tablat	equ	0xFF5
 10737                           prodh	equ	0xFF4
 10738                           prodl	equ	0xFF3
 10739                           intcon	equ	0xFF2
 10740                           intcon3	equ	0xFF0
 10741                           indf0	equ	0xFEF
 10742                           postinc0	equ	0xFEE
 10743                           fsr0h	equ	0xFEA
 10744                           fsr0l	equ	0xFE9
 10745                           wreg	equ	0xFE8
 10746                           postdec1	equ	0xFE5
 10747                           fsr1h	equ	0xFE2
 10748                           fsr1l	equ	0xFE1
 10749                           indf2	equ	0xFDF
 10750                           postinc2	equ	0xFDE
 10751                           postdec2	equ	0xFDD
 10752                           fsr2h	equ	0xFDA
 10753                           fsr2l	equ	0xFD9
 10754                           status	equ	0xFD8
 10755                           
 10756 ;; *************** function _change_state_to_logs_12 *****************
 10757 ;; Defined at:
 10758 ;;		line 455 in file "UI.c"
 10759 ;; Parameters:    Size  Location     Type
 10760 ;;		None
 10761 ;; Auto vars:     Size  Location     Type
 10762 ;;		None
 10763 ;; Return value:  Size  Location     Type
 10764 ;;                  1    wreg      void 
 10765 ;; Registers used:
 10766 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10767 ;; Tracked objects:
 10768 ;;		On entry : 0/0
 10769 ;;		On exit  : 0/0
 10770 ;;		Unchanged: 0/0
 10771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10775 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10776 ;;Total ram usage:        0 bytes
 10777 ;; Hardware stack levels used:    1
 10778 ;; Hardware stack levels required when called:    3
 10779 ;; This function calls:
 10780 ;;		i2_lcdInst
 10781 ;;		i2_printf
 10782 ;; This function is called by:
 10783 ;;		_updateMenu
 10784 ;;		_inputHandler
 10785 ;; This function uses a non-reentrant model
 10786 ;;
 10787                           
 10788                           	psect	text53
 10789  00252E                     __ptext53:
 10790                           	opt stack 0
 10791  00252E                     _change_state_to_logs_12:
 10792                           	opt stack 18
 10793                           
 10794                           ;UI.c: 456: cur_state = 1012;
 10795                           
 10796                           ;incstack = 0
 10797  00252E  0E03               	movlw	3
 10798  002530  0100               	movlb	0	; () banked
 10799  002532  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10800  002534  0EF4               	movlw	244
 10801  002536  6FE1               	movwf	_cur_state& (0+255),b
 10802                           
 10803                           ; BSR set to: 0
 10804                           ;UI.c: 457: lcdInst(0b10000000);;
 10805  002538  0E80               	movlw	128
 10806  00253A  ECEC  F013         	call	i2_lcdInst
 10807                           
 10808                           ;UI.c: 458: printf("LOG 1           ");
 10809  00253E  0E25               	movlw	low STR_26
 10810  002540  6E0D               	movwf	i2printf@f,c
 10811  002542  0EFE               	movlw	high STR_26
 10812  002544  6E0E               	movwf	i2printf@f+1,c
 10813  002546  ECAF  F004         	call	i2_printf	;wreg free
 10814                           
 10815                           ;UI.c: 459: lcdInst(0b11000000);;
 10816  00254A  0EC0               	movlw	192
 10817  00254C  ECEC  F013         	call	i2_lcdInst
 10818                           
 10819                           ;UI.c: 460: printf("LOG 2          <");
 10820  002550  0E13               	movlw	low STR_27
 10821  002552  6E0D               	movwf	i2printf@f,c
 10822  002554  0EFF               	movlw	high STR_27
 10823  002556  6E0E               	movwf	i2printf@f+1,c
 10824  002558  ECAF  F004         	call	i2_printf	;wreg free
 10825  00255C  0012               	return		;funcret
 10826  00255E                     __end_of_change_state_to_logs_12:
 10827                           	opt stack 0
 10828                           pclatu	equ	0xFFB
 10829                           pclath	equ	0xFFA
 10830                           tblptru	equ	0xFF8
 10831                           tblptrh	equ	0xFF7
 10832                           tblptrl	equ	0xFF6
 10833                           tablat	equ	0xFF5
 10834                           prodh	equ	0xFF4
 10835                           prodl	equ	0xFF3
 10836                           intcon	equ	0xFF2
 10837                           intcon3	equ	0xFF0
 10838                           indf0	equ	0xFEF
 10839                           postinc0	equ	0xFEE
 10840                           fsr0h	equ	0xFEA
 10841                           fsr0l	equ	0xFE9
 10842                           wreg	equ	0xFE8
 10843                           postdec1	equ	0xFE5
 10844                           fsr1h	equ	0xFE2
 10845                           fsr1l	equ	0xFE1
 10846                           indf2	equ	0xFDF
 10847                           postinc2	equ	0xFDE
 10848                           postdec2	equ	0xFDD
 10849                           fsr2h	equ	0xFDA
 10850                           fsr2l	equ	0xFD9
 10851                           status	equ	0xFD8
 10852                           
 10853 ;; *************** function _change_state_to_logs_11 *****************
 10854 ;; Defined at:
 10855 ;;		line 448 in file "UI.c"
 10856 ;; Parameters:    Size  Location     Type
 10857 ;;		None
 10858 ;; Auto vars:     Size  Location     Type
 10859 ;;		None
 10860 ;; Return value:  Size  Location     Type
 10861 ;;                  1    wreg      void 
 10862 ;; Registers used:
 10863 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10864 ;; Tracked objects:
 10865 ;;		On entry : 0/0
 10866 ;;		On exit  : 0/0
 10867 ;;		Unchanged: 0/0
 10868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10872 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10873 ;;Total ram usage:        0 bytes
 10874 ;; Hardware stack levels used:    1
 10875 ;; Hardware stack levels required when called:    3
 10876 ;; This function calls:
 10877 ;;		i2_lcdInst
 10878 ;;		i2_printf
 10879 ;; This function is called by:
 10880 ;;		_updateMenu
 10881 ;;		_inputHandler
 10882 ;; This function uses a non-reentrant model
 10883 ;;
 10884                           
 10885                           	psect	text54
 10886  00255E                     __ptext54:
 10887                           	opt stack 0
 10888  00255E                     _change_state_to_logs_11:
 10889                           	opt stack 18
 10890                           
 10891                           ;UI.c: 449: cur_state = 1011;
 10892                           
 10893                           ;incstack = 0
 10894  00255E  0E03               	movlw	3
 10895  002560  0100               	movlb	0	; () banked
 10896  002562  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10897  002564  0EF3               	movlw	243
 10898  002566  6FE1               	movwf	_cur_state& (0+255),b
 10899                           
 10900                           ; BSR set to: 0
 10901                           ;UI.c: 450: lcdInst(0b10000000);;
 10902  002568  0E80               	movlw	128
 10903  00256A  ECEC  F013         	call	i2_lcdInst
 10904                           
 10905                           ;UI.c: 451: printf("LOG 1          <");
 10906  00256E  0E02               	movlw	low STR_24
 10907  002570  6E0D               	movwf	i2printf@f,c
 10908  002572  0EFF               	movlw	high STR_24
 10909  002574  6E0E               	movwf	i2printf@f+1,c
 10910  002576  ECAF  F004         	call	i2_printf	;wreg free
 10911                           
 10912                           ;UI.c: 452: lcdInst(0b11000000);;
 10913  00257A  0EC0               	movlw	192
 10914  00257C  ECEC  F013         	call	i2_lcdInst
 10915                           
 10916                           ;UI.c: 453: printf("LOG 2           ");
 10917  002580  0E36               	movlw	low STR_25
 10918  002582  6E0D               	movwf	i2printf@f,c
 10919  002584  0EFE               	movlw	high STR_25
 10920  002586  6E0E               	movwf	i2printf@f+1,c
 10921  002588  ECAF  F004         	call	i2_printf	;wreg free
 10922  00258C  0012               	return		;funcret
 10923  00258E                     __end_of_change_state_to_logs_11:
 10924                           	opt stack 0
 10925                           pclatu	equ	0xFFB
 10926                           pclath	equ	0xFFA
 10927                           tblptru	equ	0xFF8
 10928                           tblptrh	equ	0xFF7
 10929                           tblptrl	equ	0xFF6
 10930                           tablat	equ	0xFF5
 10931                           prodh	equ	0xFF4
 10932                           prodl	equ	0xFF3
 10933                           intcon	equ	0xFF2
 10934                           intcon3	equ	0xFF0
 10935                           indf0	equ	0xFEF
 10936                           postinc0	equ	0xFEE
 10937                           fsr0h	equ	0xFEA
 10938                           fsr0l	equ	0xFE9
 10939                           wreg	equ	0xFE8
 10940                           postdec1	equ	0xFE5
 10941                           fsr1h	equ	0xFE2
 10942                           fsr1l	equ	0xFE1
 10943                           indf2	equ	0xFDF
 10944                           postinc2	equ	0xFDE
 10945                           postdec2	equ	0xFDD
 10946                           fsr2h	equ	0xFDA
 10947                           fsr2l	equ	0xFD9
 10948                           status	equ	0xFD8
 10949                           
 10950 ;; *************** function _dispLogs *****************
 10951 ;; Defined at:
 10952 ;;		line 402 in file "UI.c"
 10953 ;; Parameters:    Size  Location     Type
 10954 ;;  myLog           2    0[COMRAM] int 
 10955 ;; Auto vars:     Size  Location     Type
 10956 ;;		None
 10957 ;; Return value:  Size  Location     Type
 10958 ;;                  1    wreg      void 
 10959 ;; Registers used:
 10960 ;;		wreg, status,2
 10961 ;; Tracked objects:
 10962 ;;		On entry : 0/0
 10963 ;;		On exit  : 0/0
 10964 ;;		Unchanged: 0/0
 10965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10966 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10969 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10970 ;;Total ram usage:        2 bytes
 10971 ;; Hardware stack levels used:    1
 10972 ;; This function calls:
 10973 ;;		Nothing
 10974 ;; This function is called by:
 10975 ;;		_updateMenu
 10976 ;; This function uses a non-reentrant model
 10977 ;;
 10978                           
 10979                           	psect	text55
 10980  002774                     __ptext55:
 10981                           	opt stack 0
 10982  002774                     _dispLogs:
 10983                           	opt stack 22
 10984                           
 10985                           ;UI.c: 403: logstate = 1;
 10986                           
 10987                           ;incstack = 0
 10988  002774  0E00               	movlw	0
 10989  002776  0100               	movlb	0	; () banked
 10990  002778  6FEC               	movwf	(_logstate+1)& (0+255),b
 10991  00277A  0E01               	movlw	1
 10992  00277C  6FEB               	movwf	_logstate& (0+255),b
 10993                           
 10994                           ; BSR set to: 0
 10995                           ;UI.c: 404: log = myLog;
 10996  00277E  C001  F0E9         	movff	dispLogs@myLog,_log
 10997  002782  C002  F0EA         	movff	dispLogs@myLog+1,_log+1
 10998                           
 10999                           ; BSR set to: 0
 11000  002786  0012               	return		;funcret
 11001  002788                     __end_of_dispLogs:
 11002                           	opt stack 0
 11003                           pclatu	equ	0xFFB
 11004                           pclath	equ	0xFFA
 11005                           tblptru	equ	0xFF8
 11006                           tblptrh	equ	0xFF7
 11007                           tblptrl	equ	0xFF6
 11008                           tablat	equ	0xFF5
 11009                           prodh	equ	0xFF4
 11010                           prodl	equ	0xFF3
 11011                           intcon	equ	0xFF2
 11012                           intcon3	equ	0xFF0
 11013                           indf0	equ	0xFEF
 11014                           postinc0	equ	0xFEE
 11015                           fsr0h	equ	0xFEA
 11016                           fsr0l	equ	0xFE9
 11017                           wreg	equ	0xFE8
 11018                           postdec1	equ	0xFE5
 11019                           fsr1h	equ	0xFE2
 11020                           fsr1l	equ	0xFE1
 11021                           indf2	equ	0xFDF
 11022                           postinc2	equ	0xFDE
 11023                           postdec2	equ	0xFDD
 11024                           fsr2h	equ	0xFDA
 11025                           fsr2l	equ	0xFD9
 11026                           status	equ	0xFD8
 11027                           
 11028 ;; *************** function _printSortTimer *****************
 11029 ;; Defined at:
 11030 ;;		line 123 in file "sort.c"
 11031 ;; Parameters:    Size  Location     Type
 11032 ;;		None
 11033 ;; Auto vars:     Size  Location     Type
 11034 ;;  i               2   72[COMRAM] int 
 11035 ;;  curTime        14   44[COMRAM] int [7]
 11036 ;;  timeDiff        2   70[COMRAM] unsigned int 
 11037 ;;  sec             2   66[COMRAM] int 
 11038 ;;  min             2   64[COMRAM] int 
 11039 ;;  hour            2   62[COMRAM] int 
 11040 ;;  cur_sec         2   60[COMRAM] unsigned int 
 11041 ;;  start_sec       2   58[COMRAM] unsigned int 
 11042 ;; Return value:  Size  Location     Type
 11043 ;;                  1    wreg      void 
 11044 ;; Registers used:
 11045 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11046 ;; Tracked objects:
 11047 ;;		On entry : 0/0
 11048 ;;		On exit  : 0/0
 11049 ;;		Unchanged: 0/0
 11050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11052 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11053 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11054 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11055 ;;Total ram usage:       33 bytes
 11056 ;; Hardware stack levels used:    1
 11057 ;; Hardware stack levels required when called:    3
 11058 ;; This function calls:
 11059 ;;		i2___lwdiv
 11060 ;;		i2___lwmod
 11061 ;;		i2___wmul
 11062 ;;		i2_getRTC
 11063 ;;		i2_lcdInst
 11064 ;;		i2_printf
 11065 ;; This function is called by:
 11066 ;;		_handler
 11067 ;; This function uses a non-reentrant model
 11068 ;;
 11069                           
 11070                           	psect	text56
 11071  001464                     __ptext56:
 11072                           	opt stack 0
 11073  001464                     _printSortTimer:
 11074                           	opt stack 20
 11075                           
 11076                           ;sort.c: 124: getRTC();
 11077                           
 11078                           ; BSR set to: 0
 11079                           ;incstack = 0
 11080  001464  ECF0  F00F         	call	i2_getRTC	;wreg free
 11081                           
 11082                           ;sort.c: 125: int curTime[7];
 11083                           ;sort.c: 126: for(int i = 0; i < 7; i++){
 11084  001468  0E00               	movlw	0
 11085  00146A  6E4A               	movwf	printSortTimer@i+1,c
 11086  00146C  0E00               	movlw	0
 11087  00146E  6E49               	movwf	printSortTimer@i,c
 11088  001470                     i2l5124:
 11089  001470  BE4A               	btfsc	printSortTimer@i+1,7,c
 11090  001472  D006               	goto	i2l5128
 11091  001474  504A               	movf	printSortTimer@i+1,w,c
 11092  001476  E131               	bnz	i2l5134
 11093  001478  0E07               	movlw	7
 11094  00147A  5C49               	subwf	printSortTimer@i,w,c
 11095  00147C  B0D8               	btfsc	status,0,c
 11096  00147E  D02D               	goto	i2l5134
 11097  001480                     i2l5128:
 11098                           
 11099                           ;sort.c: 127: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 11100  001480  0ED4               	movlw	low _time
 11101  001482  2449               	addwf	printSortTimer@i,w,c
 11102  001484  6ED9               	movwf	fsr2l,c
 11103  001486  0E00               	movlw	high _time
 11104  001488  204A               	addwfc	printSortTimer@i+1,w,c
 11105  00148A  6EDA               	movwf	fsr2h,c
 11106  00148C  50DF               	movf	indf2,w,c
 11107  00148E  6E2A               	movwf	??_printSortTimer& (0+255),c
 11108  001490  3A2A               	swapf	??_printSortTimer,f,c
 11109  001492  0E0F               	movlw	15
 11110  001494  162A               	andwf	??_printSortTimer,f,c
 11111  001496  0E0F               	movlw	15
 11112  001498  162A               	andwf	??_printSortTimer,f,c
 11113  00149A  502A               	movf	??_printSortTimer,w,c
 11114  00149C  0D0A               	mullw	10
 11115  00149E  0ED4               	movlw	low _time
 11116  0014A0  2449               	addwf	printSortTimer@i,w,c
 11117  0014A2  6ED9               	movwf	fsr2l,c
 11118  0014A4  0E00               	movlw	high _time
 11119  0014A6  204A               	addwfc	printSortTimer@i+1,w,c
 11120  0014A8  6EDA               	movwf	fsr2h,c
 11121  0014AA  50DF               	movf	indf2,w,c
 11122  0014AC  0B0F               	andlw	15
 11123  0014AE  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 11124  0014B0  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 11125  0014B2  50F3               	movf	prodl,w,c
 11126  0014B4  262B               	addwf	??_printSortTimer+1,f,c
 11127  0014B6  50F4               	movf	prodh,w,c
 11128  0014B8  222C               	addwfc	??_printSortTimer+2,f,c
 11129  0014BA  90D8               	bcf	status,0,c
 11130  0014BC  3449               	rlcf	printSortTimer@i,w,c
 11131  0014BE  6ED9               	movwf	fsr2l,c
 11132  0014C0  344A               	rlcf	printSortTimer@i+1,w,c
 11133  0014C2  6EDA               	movwf	fsr2h,c
 11134  0014C4  0E2D               	movlw	low printSortTimer@curTime
 11135  0014C6  26D9               	addwf	fsr2l,f,c
 11136  0014C8  0E00               	movlw	high printSortTimer@curTime
 11137  0014CA  22DA               	addwfc	fsr2h,f,c
 11138  0014CC  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 11139  0014D0  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 11140  0014D4  4A49               	infsnz	printSortTimer@i,f,c
 11141  0014D6  2A4A               	incf	printSortTimer@i+1,f,c
 11142  0014D8  D7CB               	goto	i2l5124
 11143  0014DA                     i2l5134:
 11144                           
 11145                           ;sort.c: 128: }
 11146                           ;sort.c: 129: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 11147  0014DA  C102  F001         	movff	_startTime+2,i2___wmul@multiplier
 11148  0014DE  C103  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 11149  0014E2  0E00               	movlw	0
 11150  0014E4  6E04               	movwf	i2___wmul@multiplicand+1,c
 11151  0014E6  0E3C               	movlw	60
 11152  0014E8  6E03               	movwf	i2___wmul@multiplicand,c
 11153  0014EA  EC47  F013         	call	i2___wmul	;wreg free
 11154  0014EE  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 11155  0014F2  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 11156  0014F6  C104  F001         	movff	_startTime+4,i2___wmul@multiplier
 11157  0014FA  C105  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 11158  0014FE  0E0E               	movlw	14
 11159  001500  6E04               	movwf	i2___wmul@multiplicand+1,c
 11160  001502  0E10               	movlw	16
 11161  001504  6E03               	movwf	i2___wmul@multiplicand,c
 11162  001506  EC47  F013         	call	i2___wmul	;wreg free
 11163  00150A  5001               	movf	?i2___wmul,w,c
 11164  00150C  262A               	addwf	??_printSortTimer,f,c
 11165  00150E  5002               	movf	?i2___wmul+1,w,c
 11166  001510  222B               	addwfc	??_printSortTimer+1,f,c
 11167  001512  0101               	movlb	1	; () banked
 11168  001514  5100               	movf	_startTime& (0+255),w,b
 11169  001516  242A               	addwf	??_printSortTimer,w,c
 11170  001518  6E3B               	movwf	printSortTimer@start_sec,c
 11171  00151A  0101               	movlb	1	; () banked
 11172  00151C  5101               	movf	(_startTime+1)& (0+255),w,b
 11173  00151E  202B               	addwfc	??_printSortTimer+1,w,c
 11174  001520  6E3C               	movwf	printSortTimer@start_sec+1,c
 11175                           
 11176                           ;sort.c: 130: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 11177  001522  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 11178  001526  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 11179  00152A  0E00               	movlw	0
 11180  00152C  6E04               	movwf	i2___wmul@multiplicand+1,c
 11181  00152E  0E3C               	movlw	60
 11182  001530  6E03               	movwf	i2___wmul@multiplicand,c
 11183  001532  EC47  F013         	call	i2___wmul	;wreg free
 11184  001536  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 11185  00153A  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 11186  00153E  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 11187  001542  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 11188  001546  0E0E               	movlw	14
 11189  001548  6E04               	movwf	i2___wmul@multiplicand+1,c
 11190  00154A  0E10               	movlw	16
 11191  00154C  6E03               	movwf	i2___wmul@multiplicand,c
 11192  00154E  EC47  F013         	call	i2___wmul	;wreg free
 11193  001552  5001               	movf	?i2___wmul,w,c
 11194  001554  262A               	addwf	??_printSortTimer,f,c
 11195  001556  5002               	movf	?i2___wmul+1,w,c
 11196  001558  222B               	addwfc	??_printSortTimer+1,f,c
 11197  00155A  502D               	movf	printSortTimer@curTime,w,c
 11198  00155C  242A               	addwf	??_printSortTimer,w,c
 11199  00155E  6E3D               	movwf	printSortTimer@cur_sec,c
 11200  001560  502E               	movf	printSortTimer@curTime+1,w,c
 11201  001562  202B               	addwfc	??_printSortTimer+1,w,c
 11202  001564  6E3E               	movwf	printSortTimer@cur_sec+1,c
 11203                           
 11204                           ;sort.c: 131: unsigned int timeDiff = cur_sec - start_sec;
 11205  001566  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 11206  00156A  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 11207  00156E  1E2A               	comf	??_printSortTimer,f,c
 11208  001570  1E2B               	comf	??_printSortTimer+1,f,c
 11209  001572  4A2A               	infsnz	??_printSortTimer,f,c
 11210  001574  2A2B               	incf	??_printSortTimer+1,f,c
 11211  001576  503D               	movf	printSortTimer@cur_sec,w,c
 11212  001578  242A               	addwf	??_printSortTimer,w,c
 11213  00157A  6E47               	movwf	printSortTimer@timeDiff,c
 11214  00157C  503E               	movf	printSortTimer@cur_sec+1,w,c
 11215  00157E  202B               	addwfc	??_printSortTimer+1,w,c
 11216  001580  6E48               	movwf	printSortTimer@timeDiff+1,c
 11217                           
 11218                           ;sort.c: 133: total_time = timeDiff;
 11219  001582  C047  F0ED         	movff	printSortTimer@timeDiff,_total_time
 11220  001586  C048  F0EE         	movff	printSortTimer@timeDiff+1,_total_time+1
 11221                           
 11222                           ;sort.c: 135: if(timeDiff >= 179){
 11223  00158A  5048               	movf	printSortTimer@timeDiff+1,w,c
 11224  00158C  E104               	bnz	i2u442_40
 11225  00158E  0EB3               	movlw	179
 11226  001590  5C47               	subwf	printSortTimer@timeDiff,w,c
 11227  001592  A0D8               	btfss	status,0,c
 11228  001594  D003               	goto	i2l5144
 11229  001596                     i2u442_40:
 11230                           
 11231                           ;sort.c: 136: machine_state = DoneSorting_state;
 11232  001596  0E02               	movlw	2
 11233  001598  0100               	movlb	0	; () banked
 11234  00159A  6FEF               	movwf	_machine_state& (0+255),b
 11235  00159C                     i2l5144:
 11236                           
 11237                           ;sort.c: 138: }
 11238                           ;sort.c: 140: int hour = timeDiff / 3600;
 11239  00159C  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 11240  0015A0  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 11241  0015A4  0E0E               	movlw	14
 11242  0015A6  6E09               	movwf	i2___lwdiv@divisor+1,c
 11243  0015A8  0E10               	movlw	16
 11244  0015AA  6E08               	movwf	i2___lwdiv@divisor,c
 11245  0015AC  ECE9  F010         	call	i2___lwdiv	;wreg free
 11246  0015B0  C006  F03F         	movff	?i2___lwdiv,printSortTimer@hour
 11247  0015B4  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 11248                           
 11249                           ;sort.c: 141: int min = (timeDiff % 3600) / 60;
 11250  0015B8  0E0E               	movlw	14
 11251  0015BA  6E04               	movwf	i2___lwmod@divisor+1,c
 11252  0015BC  0E10               	movlw	16
 11253  0015BE  6E03               	movwf	i2___lwmod@divisor,c
 11254  0015C0  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 11255  0015C4  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 11256  0015C8  EC7F  F011         	call	i2___lwmod	;wreg free
 11257  0015CC  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 11258  0015D0  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 11259  0015D4  0E00               	movlw	0
 11260  0015D6  6E09               	movwf	i2___lwdiv@divisor+1,c
 11261  0015D8  0E3C               	movlw	60
 11262  0015DA  6E08               	movwf	i2___lwdiv@divisor,c
 11263  0015DC  ECE9  F010         	call	i2___lwdiv	;wreg free
 11264  0015E0  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 11265  0015E4  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 11266                           
 11267                           ;sort.c: 142: int sec = (timeDiff % 3600) % 60;
 11268  0015E8  0E0E               	movlw	14
 11269  0015EA  6E04               	movwf	i2___lwmod@divisor+1,c
 11270  0015EC  0E10               	movlw	16
 11271  0015EE  6E03               	movwf	i2___lwmod@divisor,c
 11272  0015F0  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 11273  0015F4  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 11274  0015F8  EC7F  F011         	call	i2___lwmod	;wreg free
 11275  0015FC  C001  F045         	movff	?i2___lwmod,_printSortTimer$2020
 11276  001600  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2020+1
 11277                           
 11278                           ;sort.c: 142: int sec = (timeDiff % 3600) % 60;
 11279  001604  C045  F001         	movff	_printSortTimer$2020,i2___lwmod@dividend
 11280  001608  C046  F002         	movff	_printSortTimer$2020+1,i2___lwmod@dividend+1
 11281  00160C  0E00               	movlw	0
 11282  00160E  6E04               	movwf	i2___lwmod@divisor+1,c
 11283  001610  0E3C               	movlw	60
 11284  001612  6E03               	movwf	i2___lwmod@divisor,c
 11285  001614  EC7F  F011         	call	i2___lwmod	;wreg free
 11286  001618  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 11287  00161C  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 11288                           
 11289                           ;sort.c: 144: lcdInst(0b10000000);;
 11290  001620  0E80               	movlw	128
 11291  001622  ECEC  F013         	call	i2_lcdInst
 11292                           
 11293                           ;sort.c: 145: printf("Sorting...");
 11294  001626  0EA9               	movlw	low STR_49
 11295  001628  6E0D               	movwf	i2printf@f,c
 11296  00162A  0EFF               	movlw	high STR_49
 11297  00162C  6E0E               	movwf	i2printf@f+1,c
 11298  00162E  ECAF  F004         	call	i2_printf	;wreg free
 11299                           
 11300                           ;sort.c: 146: lcdInst(0b11000000);;
 11301  001632  0EC0               	movlw	192
 11302  001634  ECEC  F013         	call	i2_lcdInst
 11303                           
 11304                           ;sort.c: 147: printf("Time: %02d:%02d:%02d", hour, min, sec);
 11305  001638  0EEC               	movlw	low STR_2
 11306  00163A  6E0D               	movwf	i2printf@f,c
 11307  00163C  0EFD               	movlw	high STR_2
 11308  00163E  6E0E               	movwf	i2printf@f+1,c
 11309  001640  C03F  F00F         	movff	printSortTimer@hour,?i2_printf+2
 11310  001644  C040  F010         	movff	printSortTimer@hour+1,?i2_printf+3
 11311  001648  C041  F011         	movff	printSortTimer@min,?i2_printf+4
 11312  00164C  C042  F012         	movff	printSortTimer@min+1,?i2_printf+5
 11313  001650  C043  F013         	movff	printSortTimer@sec,?i2_printf+6
 11314  001654  C044  F014         	movff	printSortTimer@sec+1,?i2_printf+7
 11315  001658  ECAF  F004         	call	i2_printf	;wreg free
 11316  00165C  0012               	return		;funcret
 11317  00165E                     __end_of_printSortTimer:
 11318                           	opt stack 0
 11319                           pclatu	equ	0xFFB
 11320                           pclath	equ	0xFFA
 11321                           tblptru	equ	0xFF8
 11322                           tblptrh	equ	0xFF7
 11323                           tblptrl	equ	0xFF6
 11324                           tablat	equ	0xFF5
 11325                           prodh	equ	0xFF4
 11326                           prodl	equ	0xFF3
 11327                           intcon	equ	0xFF2
 11328                           intcon3	equ	0xFF0
 11329                           indf0	equ	0xFEF
 11330                           postinc0	equ	0xFEE
 11331                           fsr0h	equ	0xFEA
 11332                           fsr0l	equ	0xFE9
 11333                           wreg	equ	0xFE8
 11334                           postdec1	equ	0xFE5
 11335                           fsr1h	equ	0xFE2
 11336                           fsr1l	equ	0xFE1
 11337                           indf2	equ	0xFDF
 11338                           postinc2	equ	0xFDE
 11339                           postdec2	equ	0xFDD
 11340                           fsr2h	equ	0xFDA
 11341                           fsr2l	equ	0xFD9
 11342                           status	equ	0xFD8
 11343                           
 11344 ;; *************** function i2_printf *****************
 11345 ;; Defined at:
 11346 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 11347 ;; Parameters:    Size  Location     Type
 11348 ;;  f               2   12[COMRAM] PTR const unsigned char 
 11349 ;;		 -> STR_50(21), STR_49(11), STR_48(24), STR_35(17), 
 11350 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 11351 ;;		 -> STR_30(17), STR_29(17), STR_28(17), STR_27(17), 
 11352 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(17), 
 11353 ;;		 -> STR_22(17), STR_21(17), STR_20(17), STR_19(17), 
 11354 ;;		 -> STR_18(17), STR_17(17), STR_16(17), STR_15(17), 
 11355 ;;		 -> STR_14(3), STR_13(17), STR_12(17), STR_11(17), 
 11356 ;;		 -> STR_10(17), STR_9(17), STR_8(18), STR_7(10), 
 11357 ;;		 -> STR_6(17), STR_5(7), STR_4(17), STR_3(18), 
 11358 ;;		 -> STR_2(21), STR_1(14), 
 11359 ;; Auto vars:     Size  Location     Type
 11360 ;;  printf          4    0        struct .
 11361 ;;  printf          2   39[COMRAM] int 
 11362 ;;  printf          2   35[COMRAM] unsigned int 
 11363 ;;  printf          2   33[COMRAM] unsigned int 
 11364 ;;  printf          2   31[COMRAM] PTR const unsigned char 
 11365 ;;		 -> STR_51(7), printRTC@month(4), 
 11366 ;;  printf          2   29[COMRAM] PTR void [1]
 11367 ;;		 -> ?i2_printf(2), ?_printf(2), 
 11368 ;;  printf          1   38[COMRAM] char 
 11369 ;;  printf          1   37[COMRAM] unsigned char 
 11370 ;;  printf          1   28[COMRAM] char 
 11371 ;; Return value:  Size  Location     Type
 11372 ;;                  2   12[COMRAM] int 
 11373 ;; Registers used:
 11374 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11375 ;; Tracked objects:
 11376 ;;		On entry : 0/0
 11377 ;;		On exit  : 0/0
 11378 ;;		Unchanged: 0/0
 11379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11380 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11381 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11382 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11383 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11384 ;;Total ram usage:       29 bytes
 11385 ;; Hardware stack levels used:    1
 11386 ;; Hardware stack levels required when called:    2
 11387 ;; This function calls:
 11388 ;;		i2___lwdiv
 11389 ;;		i2___lwmod
 11390 ;;		i2___wmul
 11391 ;;		i2_isdigit
 11392 ;;		i2_putch
 11393 ;; This function is called by:
 11394 ;;		_change_state_to_menu_11
 11395 ;;		_change_state_to_menu_12
 11396 ;;		_change_state_to_menu_22
 11397 ;;		_change_state_to_menu_23
 11398 ;;		_change_state_to_logs_11
 11399 ;;		_change_state_to_logs_12
 11400 ;;		_change_state_to_logs_22
 11401 ;;		_change_state_to_logs_23
 11402 ;;		_change_state_to_logs_33
 11403 ;;		_change_state_to_logs_34
 11404 ;;		_printSortTimer
 11405 ;;		i2_change_state_to_menu_start
 11406 ;;		i2_printRTC
 11407 ;; This function uses a non-reentrant model
 11408 ;;
 11409                           
 11410                           	psect	text57
 11411  00095E                     __ptext57:
 11412                           	opt stack 0
 11413  00095E                     i2_printf:
 11414                           	opt stack 19
 11415                           
 11416                           ;doprnt.c: 466: va_list ap;
 11417                           ;doprnt.c: 499: signed char c;
 11418                           ;doprnt.c: 501: int width;
 11419                           ;doprnt.c: 506: signed char prec;
 11420                           ;doprnt.c: 508: unsigned char flag;
 11421                           ;doprnt.c: 523: union {
 11422                           ;doprnt.c: 524: unsigned long vd;
 11423                           ;doprnt.c: 525: double integ;
 11424                           ;doprnt.c: 526: } tmpval;
 11425                           ;doprnt.c: 528: unsigned int val;
 11426                           ;doprnt.c: 529: unsigned len;
 11427                           ;doprnt.c: 530: const char * cp;
 11428                           ;doprnt.c: 533: *ap = __va_start();
 11429                           
 11430                           ;incstack = 0
 11431  00095E  0E0F               	movlw	low (?i2_printf+2)
 11432  000960  6E1E               	movwf	i2printf@ap,c
 11433  000962  0E00               	movlw	high (?i2_printf+2)
 11434  000964  6E1F               	movwf	i2printf@ap+1,c
 11435                           
 11436                           ;doprnt.c: 536: while(c = *f++) {
 11437  000966  D190               	goto	i2l4078
 11438  000968                     i2l3954:
 11439                           
 11440                           ;doprnt.c: 538: if(c != '%')
 11441  000968  0E25               	movlw	37
 11442  00096A  1827               	xorwf	i2printf@c,w,c
 11443  00096C  B4D8               	btfsc	status,2,c
 11444  00096E  D004               	goto	i2l3958
 11445                           
 11446                           ;doprnt.c: 540: {
 11447                           ;doprnt.c: 541: (putch(c) );
 11448  000970  5027               	movf	i2printf@c,w,c
 11449  000972  ECE6  F013         	call	i2_putch
 11450                           
 11451                           ;doprnt.c: 542: continue;
 11452  000976  D188               	goto	i2l4078
 11453  000978                     i2l3958:
 11454                           
 11455                           ;doprnt.c: 543: }
 11456                           ;doprnt.c: 546: width = 0;
 11457  000978  0E00               	movlw	0
 11458  00097A  6E29               	movwf	i2printf@width+1,c
 11459  00097C  0E00               	movlw	0
 11460  00097E  6E28               	movwf	i2printf@width,c
 11461                           
 11462                           ;doprnt.c: 548: flag = 0;
 11463  000980  0E00               	movlw	0
 11464  000982  6E26               	movwf	i2printf@flag,c
 11465                           
 11466                           ;doprnt.c: 551: switch(*f) {
 11467                           
 11468                           ;doprnt.c: 550: for(;;) {
 11469  000984  D003               	goto	i2l3964
 11470  000986                     i2l3960:
 11471                           
 11472                           ;doprnt.c: 580: flag |= 0x04;
 11473  000986  8426               	bsf	i2printf@flag,2,c
 11474                           
 11475                           ;doprnt.c: 581: f++;
 11476  000988  4A0D               	infsnz	i2printf@f,f,c
 11477  00098A  2A0E               	incf	i2printf@f+1,f,c
 11478  00098C                     i2l3964:
 11479  00098C  C00D  FFF6         	movff	i2printf@f,tblptrl
 11480  000990  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11481  000994                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11482  000994  6AF8               	clrf	tblptru,c
 11483  000996                     	endif
 11484  000996                     	if	0	;tblptru may be non-zero
 11485  000996                     	endif
 11486  000996  0008               	tblrd		*
 11487  000998  50F5               	movf	tablat,w,c
 11488                           
 11489                           ; Switch size 1, requested type "space"
 11490                           ; Number of cases is 1, Range of values is 48 to 48
 11491                           ; switch strategies available:
 11492                           ; Name         Instructions Cycles
 11493                           ; simple_byte            4     3 (average)
 11494                           ;	Chosen strategy is simple_byte
 11495  00099A  0A30               	xorlw	48	; case 48
 11496  00099C  B4D8               	btfsc	status,2,c
 11497  00099E  D7F3               	goto	i2l3960
 11498                           
 11499                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 11500                           
 11501                           ;doprnt.c: 586: }
 11502                           
 11503                           ;doprnt.c: 585: break;
 11504  0009A0  C00D  FFF6         	movff	i2printf@f,tblptrl
 11505  0009A4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11506  0009A8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11507  0009A8  6AF8               	clrf	tblptru,c
 11508  0009AA                     	endif
 11509  0009AA                     	if	0	;tblptru may be non-zero
 11510  0009AA                     	endif
 11511  0009AA  0008               	tblrd		*
 11512  0009AC  50F5               	movf	tablat,w,c
 11513  0009AE  EC7E  F013         	call	i2_isdigit
 11514  0009B2  A0D8               	btfss	status,0,c
 11515  0009B4  D0A4               	goto	i2l4010
 11516                           
 11517                           ;doprnt.c: 598: width = 0;
 11518  0009B6  0E00               	movlw	0
 11519  0009B8  6E29               	movwf	i2printf@width+1,c
 11520  0009BA  0E00               	movlw	0
 11521  0009BC  6E28               	movwf	i2printf@width,c
 11522  0009BE                     i2l3970:
 11523                           
 11524                           ;doprnt.c: 600: width *= 10;
 11525  0009BE  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 11526  0009C2  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 11527  0009C6  0E00               	movlw	0
 11528  0009C8  6E04               	movwf	i2___wmul@multiplicand+1,c
 11529  0009CA  0E0A               	movlw	10
 11530  0009CC  6E03               	movwf	i2___wmul@multiplicand,c
 11531  0009CE  EC47  F013         	call	i2___wmul	;wreg free
 11532  0009D2  C001  F028         	movff	?i2___wmul,i2printf@width
 11533  0009D6  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 11534                           
 11535                           ;doprnt.c: 601: width += *f++ - '0';
 11536  0009DA  0ED0               	movlw	208
 11537  0009DC  6E19               	movwf	??i2_printf& (0+255),c
 11538  0009DE  0EFF               	movlw	255
 11539  0009E0  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 11540  0009E2  C00D  FFF6         	movff	i2printf@f,tblptrl
 11541  0009E6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11542  0009EA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11543  0009EA  6AF8               	clrf	tblptru,c
 11544  0009EC                     	endif
 11545  0009EC                     	if	0	;tblptru may be non-zero
 11546  0009EC                     	endif
 11547  0009EC  0008               	tblrd		*
 11548  0009EE  50F5               	movf	tablat,w,c
 11549  0009F0  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 11550  0009F2  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 11551  0009F4  5019               	movf	??i2_printf,w,c
 11552  0009F6  261B               	addwf	??i2_printf+2,f,c
 11553  0009F8  501A               	movf	??i2_printf+1,w,c
 11554  0009FA  221C               	addwfc	??i2_printf+3,f,c
 11555  0009FC  501B               	movf	??i2_printf+2,w,c
 11556  0009FE  2628               	addwf	i2printf@width,f,c
 11557  000A00  501C               	movf	??i2_printf+3,w,c
 11558  000A02  2229               	addwfc	i2printf@width+1,f,c
 11559  000A04  4A0D               	infsnz	i2printf@f,f,c
 11560  000A06  2A0E               	incf	i2printf@f+1,f,c
 11561                           
 11562                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 11563  000A08  C00D  FFF6         	movff	i2printf@f,tblptrl
 11564  000A0C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11565  000A10                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11566  000A10  6AF8               	clrf	tblptru,c
 11567  000A12                     	endif
 11568  000A12                     	if	0	;tblptru may be non-zero
 11569  000A12                     	endif
 11570  000A12  0008               	tblrd		*
 11571  000A14  50F5               	movf	tablat,w,c
 11572  000A16  EC7E  F013         	call	i2_isdigit
 11573  000A1A  A0D8               	btfss	status,0,c
 11574  000A1C  D070               	goto	i2l4010
 11575  000A1E  D7CF               	goto	i2l3970
 11576  000A20                     i2l3978:
 11577                           
 11578                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 11579  000A20  C01E  FFD9         	movff	i2printf@ap,fsr2l
 11580  000A24  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
 11581  000A28  CFDE F020          	movff	postinc2,i2printf@cp
 11582  000A2C  CFDD F021          	movff	postdec2,i2printf@cp+1
 11583  000A30  0E02               	movlw	2
 11584  000A32  261E               	addwf	i2printf@ap,f,c
 11585  000A34  0E00               	movlw	0
 11586  000A36  221F               	addwfc	i2printf@ap+1,f,c
 11587                           
 11588                           ;doprnt.c: 740: if(!cp)
 11589  000A38  5020               	movf	i2printf@cp,w,c
 11590  000A3A  1021               	iorwf	i2printf@cp+1,w,c
 11591  000A3C  A4D8               	btfss	status,2,c
 11592  000A3E  D004               	goto	i2l3986
 11593                           
 11594                           ;doprnt.c: 741: cp = "(null)";
 11595  000A40  0EBE               	movlw	low STR_51
 11596  000A42  6E20               	movwf	i2printf@cp,c
 11597  000A44  0EFF               	movlw	high STR_51
 11598  000A46  6E21               	movwf	i2printf@cp+1,c
 11599  000A48                     i2l3986:
 11600                           
 11601                           ;doprnt.c: 745: len = 0;
 11602  000A48  0E00               	movlw	0
 11603  000A4A  6E25               	movwf	i2printf@len+1,c
 11604  000A4C  0E00               	movlw	0
 11605  000A4E  6E24               	movwf	i2printf@len,c
 11606                           
 11607                           ;doprnt.c: 746: while(cp[len])
 11608  000A50  D002               	goto	i2l3990
 11609  000A52                     i2l3988:
 11610                           
 11611                           ;doprnt.c: 747: len++;
 11612  000A52  4A24               	infsnz	i2printf@len,f,c
 11613  000A54  2A25               	incf	i2printf@len+1,f,c
 11614  000A56                     i2l3990:
 11615  000A56  5024               	movf	i2printf@len,w,c
 11616  000A58  2420               	addwf	i2printf@cp,w,c
 11617  000A5A  6E19               	movwf	??i2_printf& (0+255),c
 11618  000A5C  5025               	movf	i2printf@len+1,w,c
 11619  000A5E  2021               	addwfc	i2printf@cp+1,w,c
 11620  000A60  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 11621  000A62  C019  FFF6         	movff	??i2_printf,tblptrl
 11622  000A66  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 11623  000A6A  0E00               	movlw	low (__mediumconst shr (0+16))
 11624  000A6C  6EF8               	movwf	tblptru,c
 11625  000A6E  0E0F               	movlw	(high __ramtop+-1)
 11626  000A70  64F7               	cpfsgt	tblptrh,c
 11627  000A72  D003               	bra	i2u289_47
 11628  000A74  0008               	tblrd		*
 11629  000A76  50F5               	movf	tablat,w,c
 11630  000A78  D005               	bra	i2u289_40
 11631  000A7A                     i2u289_47:
 11632  000A7A  CFF6 FFE9          	movff	tblptrl,fsr0l
 11633  000A7E  CFF7 FFEA          	movff	tblptrh,fsr0h
 11634  000A82  50EF               	movf	indf0,w,c
 11635  000A84                     i2u289_40:
 11636  000A84  0900               	iorlw	0
 11637  000A86  A4D8               	btfss	status,2,c
 11638  000A88  D7E4               	goto	i2l3988
 11639                           
 11640                           ;doprnt.c: 757: if(width > len)
 11641  000A8A  5028               	movf	i2printf@width,w,c
 11642  000A8C  5C24               	subwf	i2printf@len,w,c
 11643  000A8E  5029               	movf	i2printf@width+1,w,c
 11644  000A90  5825               	subwfb	i2printf@len+1,w,c
 11645  000A92  B0D8               	btfsc	status,0,c
 11646  000A94  D005               	goto	i2l3996
 11647                           
 11648                           ;doprnt.c: 758: width -= len;
 11649  000A96  5024               	movf	i2printf@len,w,c
 11650  000A98  5E28               	subwf	i2printf@width,f,c
 11651  000A9A  5025               	movf	i2printf@len+1,w,c
 11652  000A9C  5A29               	subwfb	i2printf@width+1,f,c
 11653  000A9E  D008               	goto	i2l4000
 11654  000AA0                     i2l3996:
 11655                           
 11656                           ;doprnt.c: 759: else
 11657                           ;doprnt.c: 760: width = 0;
 11658  000AA0  0E00               	movlw	0
 11659  000AA2  6E29               	movwf	i2printf@width+1,c
 11660  000AA4  0E00               	movlw	0
 11661  000AA6  6E28               	movwf	i2printf@width,c
 11662                           
 11663                           ;doprnt.c: 764: while(width--)
 11664  000AA8  D003               	goto	i2l4000
 11665  000AAA                     i2l3998:
 11666                           
 11667                           ;doprnt.c: 765: (putch(' ') );
 11668  000AAA  0E20               	movlw	32
 11669  000AAC  ECE6  F013         	call	i2_putch
 11670  000AB0                     i2l4000:
 11671  000AB0  0628               	decf	i2printf@width,f,c
 11672  000AB2  A0D8               	btfss	status,0,c
 11673  000AB4  0629               	decf	i2printf@width+1,f,c
 11674  000AB6  2828               	incf	i2printf@width,w,c
 11675  000AB8  E1F8               	bnz	i2l3998
 11676  000ABA  2829               	incf	i2printf@width+1,w,c
 11677  000ABC  B4D8               	btfsc	status,2,c
 11678  000ABE  D016               	goto	i2l4006
 11679  000AC0  D7F4               	goto	i2l3998
 11680  000AC2                     i2l4002:
 11681                           
 11682                           ;doprnt.c: 768: (putch(*cp++) );
 11683  000AC2  C020  FFF6         	movff	i2printf@cp,tblptrl
 11684  000AC6  C021  FFF7         	movff	i2printf@cp+1,tblptrh
 11685  000ACA  0E00               	movlw	low (__mediumconst shr (0+16))
 11686  000ACC  6EF8               	movwf	tblptru,c
 11687  000ACE  0E0F               	movlw	(high __ramtop+-1)
 11688  000AD0  64F7               	cpfsgt	tblptrh,c
 11689  000AD2  D003               	bra	i2u293_47
 11690  000AD4  0008               	tblrd		*
 11691  000AD6  50F5               	movf	tablat,w,c
 11692  000AD8  D005               	bra	i2u293_40
 11693  000ADA                     i2u293_47:
 11694  000ADA  CFF6 FFE9          	movff	tblptrl,fsr0l
 11695  000ADE  CFF7 FFEA          	movff	tblptrh,fsr0h
 11696  000AE2  50EF               	movf	indf0,w,c
 11697  000AE4                     i2u293_40:
 11698  000AE4  ECE6  F013         	call	i2_putch
 11699  000AE8  4A20               	infsnz	i2printf@cp,f,c
 11700  000AEA  2A21               	incf	i2printf@cp+1,f,c
 11701  000AEC                     i2l4006:
 11702  000AEC  0624               	decf	i2printf@len,f,c
 11703  000AEE  A0D8               	btfss	status,0,c
 11704  000AF0  0625               	decf	i2printf@len+1,f,c
 11705  000AF2  2824               	incf	i2printf@len,w,c
 11706  000AF4  E1E6               	bnz	i2l4002
 11707  000AF6  2825               	incf	i2printf@len+1,w,c
 11708  000AF8  B4D8               	btfsc	status,2,c
 11709  000AFA  D0C6               	goto	i2l4078
 11710  000AFC  D7E2               	goto	i2l4002
 11711  000AFE                     i2l4010:
 11712  000AFE  C00D  FFF6         	movff	i2printf@f,tblptrl
 11713  000B02  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11714  000B06  4A0D               	infsnz	i2printf@f,f,c
 11715  000B08  2A0E               	incf	i2printf@f+1,f,c
 11716  000B0A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11717  000B0A  6AF8               	clrf	tblptru,c
 11718  000B0C                     	endif
 11719  000B0C                     	if	0	;tblptru may be non-zero
 11720  000B0C                     	endif
 11721  000B0C  0008               	tblrd		*
 11722  000B0E  CFF5 F027          	movff	tablat,i2printf@c
 11723  000B12  5027               	movf	i2printf@c,w,c
 11724                           
 11725                           ; Switch size 1, requested type "space"
 11726                           ; Number of cases is 4, Range of values is 0 to 115
 11727                           ; switch strategies available:
 11728                           ; Name         Instructions Cycles
 11729                           ; simple_byte           13     7 (average)
 11730                           ;	Chosen strategy is simple_byte
 11731  000B14  0A00               	xorlw	0	; case 0
 11732  000B16  B4D8               	btfsc	status,2,c
 11733  000B18  0012               	return	
 11734  000B1A  0A64               	xorlw	100	; case 100
 11735  000B1C  B4D8               	btfsc	status,2,c
 11736  000B1E  D007               	goto	i2l4012
 11737  000B20  0A0D               	xorlw	13	; case 105
 11738  000B22  B4D8               	btfsc	status,2,c
 11739  000B24  D004               	goto	i2l4012
 11740  000B26  0A1A               	xorlw	26	; case 115
 11741  000B28  B4D8               	btfsc	status,2,c
 11742  000B2A  D77A               	goto	i2l3978
 11743  000B2C  D0AD               	goto	i2l4078
 11744  000B2E                     i2l4012:
 11745                           
 11746                           ;doprnt.c: 1253: {
 11747                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 11748  000B2E  C01E  FFD9         	movff	i2printf@ap,fsr2l
 11749  000B32  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
 11750  000B36  CFDE F022          	movff	postinc2,i2printf@val
 11751  000B3A  CFDD F023          	movff	postdec2,i2printf@val+1
 11752  000B3E  0E02               	movlw	2
 11753  000B40  261E               	addwf	i2printf@ap,f,c
 11754  000B42  0E00               	movlw	0
 11755  000B44  221F               	addwfc	i2printf@ap+1,f,c
 11756                           
 11757                           ;doprnt.c: 1261: if((int)val < 0) {
 11758  000B46  AE23               	btfss	i2printf@val+1,7,c
 11759  000B48  D006               	goto	i2l4022
 11760                           
 11761                           ;doprnt.c: 1262: flag |= 0x03;
 11762  000B4A  0E03               	movlw	3
 11763  000B4C  1226               	iorwf	i2printf@flag,f,c
 11764                           
 11765                           ;doprnt.c: 1263: val = -val;
 11766  000B4E  6C22               	negf	i2printf@val,c
 11767  000B50  1E23               	comf	i2printf@val+1,f,c
 11768  000B52  B0D8               	btfsc	status,0,c
 11769  000B54  2A23               	incf	i2printf@val+1,f,c
 11770  000B56                     i2l4022:
 11771                           
 11772                           ;doprnt.c: 1264: }
 11773                           ;doprnt.c: 1266: }
 11774                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 11775  000B56  0E01               	movlw	1
 11776  000B58  6E27               	movwf	i2printf@c,c
 11777  000B5A                     i2l4024:
 11778  000B5A  0E05               	movlw	5
 11779  000B5C  1827               	xorwf	i2printf@c,w,c
 11780  000B5E  B4D8               	btfsc	status,2,c
 11781  000B60  D015               	goto	i2l4036
 11782                           
 11783                           ;doprnt.c: 1306: if(val < dpowers[c])
 11784  000B62  5027               	movf	i2printf@c,w,c
 11785  000B64  0D02               	mullw	2
 11786  000B66  0ECA               	movlw	low _dpowers
 11787  000B68  24F3               	addwf	prodl,w,c
 11788  000B6A  6EF6               	movwf	tblptrl,c
 11789  000B6C  0EFD               	movlw	high _dpowers
 11790  000B6E  20F4               	addwfc	prodh,w,c
 11791  000B70  6EF7               	movwf	tblptrh,c
 11792  000B72                     	if	1	;There are 3 active tblptr bytes
 11793  000B72  6AF8               	clrf	tblptru,c
 11794  000B74  0E00               	movlw	low (__mediumconst shr (0+16))
 11795  000B76  22F8               	addwfc	tblptru,f,c
 11796  000B78                     	endif
 11797  000B78  0009               	tblrd		*+
 11798  000B7A  50F5               	movf	tablat,w,c
 11799  000B7C  5C22               	subwf	i2printf@val,w,c
 11800  000B7E  0009               	tblrd		*+
 11801  000B80  50F5               	movf	tablat,w,c
 11802  000B82  5823               	subwfb	i2printf@val+1,w,c
 11803  000B84  A0D8               	btfss	status,0,c
 11804  000B86  D002               	goto	i2l4036
 11805                           
 11806                           ;doprnt.c: 1307: break;
 11807  000B88  2A27               	incf	i2printf@c,f,c
 11808  000B8A  D7E7               	goto	i2l4024
 11809  000B8C                     i2l4036:
 11810                           
 11811                           ;doprnt.c: 1345: if(width && flag & 0x03)
 11812  000B8C  5028               	movf	i2printf@width,w,c
 11813  000B8E  1029               	iorwf	i2printf@width+1,w,c
 11814  000B90  B4D8               	btfsc	status,2,c
 11815  000B92  D009               	goto	i2l4042
 11816  000B94  C026  F019         	movff	i2printf@flag,??i2_printf
 11817  000B98  0E03               	movlw	3
 11818  000B9A  1619               	andwf	??i2_printf,f,c
 11819  000B9C  B4D8               	btfsc	status,2,c
 11820  000B9E  D003               	goto	i2l4042
 11821                           
 11822                           ;doprnt.c: 1346: width--;
 11823  000BA0  0628               	decf	i2printf@width,f,c
 11824  000BA2  A0D8               	btfss	status,0,c
 11825  000BA4  0629               	decf	i2printf@width+1,f,c
 11826  000BA6                     i2l4042:
 11827                           
 11828                           ;doprnt.c: 1381: if(width > c)
 11829  000BA6  0E80               	movlw	128
 11830  000BA8  BE27               	btfsc	i2printf@c,7,c
 11831  000BAA  0E7F               	movlw	127
 11832  000BAC  6E19               	movwf	??i2_printf& (0+255),c
 11833  000BAE  5028               	movf	i2printf@width,w,c
 11834  000BB0  5C27               	subwf	i2printf@c,w,c
 11835  000BB2  5029               	movf	i2printf@width+1,w,c
 11836  000BB4  0A80               	xorlw	128
 11837  000BB6  5819               	subwfb	??i2_printf& (0+255),w,c
 11838  000BB8  B0D8               	btfsc	status,0,c
 11839  000BBA  D007               	goto	i2l4046
 11840                           
 11841                           ;doprnt.c: 1382: width -= c;
 11842  000BBC  5027               	movf	i2printf@c,w,c
 11843  000BBE  5E28               	subwf	i2printf@width,f,c
 11844  000BC0  0E00               	movlw	0
 11845  000BC2  BE27               	btfsc	i2printf@c,7,c
 11846  000BC4  0EFF               	movlw	255
 11847  000BC6  5A29               	subwfb	i2printf@width+1,f,c
 11848  000BC8  D004               	goto	i2l4048
 11849  000BCA                     i2l4046:
 11850                           
 11851                           ;doprnt.c: 1383: else
 11852                           ;doprnt.c: 1384: width = 0;
 11853  000BCA  0E00               	movlw	0
 11854  000BCC  6E29               	movwf	i2printf@width+1,c
 11855  000BCE  0E00               	movlw	0
 11856  000BD0  6E28               	movwf	i2printf@width,c
 11857  000BD2                     i2l4048:
 11858                           
 11859                           ;doprnt.c: 1387: if(flag & 0x04) {
 11860  000BD2  A426               	btfss	i2printf@flag,2,c
 11861  000BD4  D014               	goto	i2l4060
 11862                           
 11863                           ;doprnt.c: 1392: if(flag & 0x03)
 11864  000BD6  C026  F019         	movff	i2printf@flag,??i2_printf
 11865  000BDA  0E03               	movlw	3
 11866  000BDC  1619               	andwf	??i2_printf,f,c
 11867  000BDE  B4D8               	btfsc	status,2,c
 11868  000BE0  D003               	goto	i2l4054
 11869                           
 11870                           ;doprnt.c: 1393: (putch('-') );
 11871  000BE2  0E2D               	movlw	45
 11872  000BE4  ECE6  F013         	call	i2_putch
 11873  000BE8                     i2l4054:
 11874                           
 11875                           ;doprnt.c: 1415: if(width)
 11876  000BE8  5028               	movf	i2printf@width,w,c
 11877  000BEA  1029               	iorwf	i2printf@width+1,w,c
 11878  000BEC  B4D8               	btfsc	status,2,c
 11879  000BEE  D01E               	goto	i2l4070
 11880                           
 11881                           ;doprnt.c: 1417: (putch('0') );
 11882                           
 11883                           ;doprnt.c: 1416: do
 11884  000BF0  0E30               	movlw	48
 11885  000BF2  ECE6  F013         	call	i2_putch
 11886                           
 11887                           ;doprnt.c: 1418: while(--width);
 11888  000BF6  0628               	decf	i2printf@width,f,c
 11889  000BF8  A0D8               	btfss	status,0,c
 11890  000BFA  0629               	decf	i2printf@width+1,f,c
 11891  000BFC  D7F5               	goto	i2l4054
 11892  000BFE                     i2l4060:
 11893                           
 11894                           ;doprnt.c: 1422: {
 11895                           ;doprnt.c: 1424: if(width
 11896                           ;doprnt.c: 1428: )
 11897  000BFE  5028               	movf	i2printf@width,w,c
 11898  000C00  1029               	iorwf	i2printf@width+1,w,c
 11899  000C02  B4D8               	btfsc	status,2,c
 11900  000C04  D00A               	goto	i2l4066
 11901  000C06                     i2l4062:
 11902                           
 11903                           ;doprnt.c: 1430: (putch(' ') );
 11904  000C06  0E20               	movlw	32
 11905  000C08  ECE6  F013         	call	i2_putch
 11906                           
 11907                           ;doprnt.c: 1431: while(--width);
 11908  000C0C  0628               	decf	i2printf@width,f,c
 11909  000C0E  A0D8               	btfss	status,0,c
 11910  000C10  0629               	decf	i2printf@width+1,f,c
 11911  000C12  5028               	movf	i2printf@width,w,c
 11912  000C14  1029               	iorwf	i2printf@width+1,w,c
 11913  000C16  A4D8               	btfss	status,2,c
 11914  000C18  D7F6               	goto	i2l4062
 11915  000C1A                     i2l4066:
 11916                           
 11917                           ;doprnt.c: 1438: if(flag & 0x03)
 11918  000C1A  C026  F019         	movff	i2printf@flag,??i2_printf
 11919  000C1E  0E03               	movlw	3
 11920  000C20  1619               	andwf	??i2_printf,f,c
 11921  000C22  B4D8               	btfsc	status,2,c
 11922  000C24  D003               	goto	i2l4070
 11923                           
 11924                           ;doprnt.c: 1439: (putch('-') );
 11925  000C26  0E2D               	movlw	45
 11926  000C28  ECE6  F013         	call	i2_putch
 11927  000C2C                     i2l4070:
 11928                           
 11929                           ;doprnt.c: 1469: }
 11930                           ;doprnt.c: 1472: prec = c;
 11931  000C2C  C027  F01D         	movff	i2printf@c,i2printf@prec
 11932                           
 11933                           ;doprnt.c: 1474: while(prec--) {
 11934  000C30  D027               	goto	i2l4076
 11935  000C32                     i2l4072:
 11936                           
 11937                           ;doprnt.c: 1478: {
 11938                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 11939  000C32  501D               	movf	i2printf@prec,w,c
 11940  000C34  0D02               	mullw	2
 11941  000C36  0ECA               	movlw	low _dpowers
 11942  000C38  24F3               	addwf	prodl,w,c
 11943  000C3A  6EF6               	movwf	tblptrl,c
 11944  000C3C  0EFD               	movlw	high _dpowers
 11945  000C3E  20F4               	addwfc	prodh,w,c
 11946  000C40  6EF7               	movwf	tblptrh,c
 11947  000C42                     	if	1	;There are 3 active tblptr bytes
 11948  000C42  6AF8               	clrf	tblptru,c
 11949  000C44  0E00               	movlw	low (__mediumconst shr (0+16))
 11950  000C46  22F8               	addwfc	tblptru,f,c
 11951  000C48                     	endif
 11952  000C48  0009               	tblrd		*+
 11953  000C4A  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 11954  000C4E  000A               	tblrd		*-
 11955  000C50  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 11956  000C54  C022  F006         	movff	i2printf@val,i2___lwdiv@dividend
 11957  000C58  C023  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 11958  000C5C  ECE9  F010         	call	i2___lwdiv	;wreg free
 11959  000C60  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 11960  000C64  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 11961  000C68  0E00               	movlw	0
 11962  000C6A  6E04               	movwf	i2___lwmod@divisor+1,c
 11963  000C6C  0E0A               	movlw	10
 11964  000C6E  6E03               	movwf	i2___lwmod@divisor,c
 11965  000C70  EC7F  F011         	call	i2___lwmod	;wreg free
 11966  000C74  5001               	movf	?i2___lwmod,w,c
 11967  000C76  0F30               	addlw	48
 11968  000C78  6E27               	movwf	i2printf@c,c
 11969                           
 11970                           ;doprnt.c: 1523: }
 11971                           ;doprnt.c: 1524: (putch(c) );
 11972  000C7A  5027               	movf	i2printf@c,w,c
 11973  000C7C  ECE6  F013         	call	i2_putch
 11974  000C80                     i2l4076:
 11975  000C80  061D               	decf	i2printf@prec,f,c
 11976  000C82  281D               	incf	i2printf@prec,w,c
 11977  000C84  A4D8               	btfss	status,2,c
 11978  000C86  D7D5               	goto	i2l4072
 11979  000C88                     i2l4078:
 11980  000C88  C00D  FFF6         	movff	i2printf@f,tblptrl
 11981  000C8C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11982  000C90  4A0D               	infsnz	i2printf@f,f,c
 11983  000C92  2A0E               	incf	i2printf@f+1,f,c
 11984  000C94                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11985  000C94  6AF8               	clrf	tblptru,c
 11986  000C96                     	endif
 11987  000C96                     	if	0	;tblptru may be non-zero
 11988  000C96                     	endif
 11989  000C96  0008               	tblrd		*
 11990  000C98  CFF5 F027          	movff	tablat,i2printf@c
 11991  000C9C  5027               	movf	i2printf@c,w,c
 11992  000C9E  B4D8               	btfsc	status,2,c
 11993  000CA0  0012               	return	
 11994  000CA2  D662               	goto	i2l3954
 11995  000CA4                     __end_ofi2_printf:
 11996                           	opt stack 0
 11997                           pclatu	equ	0xFFB
 11998                           pclath	equ	0xFFA
 11999                           tblptru	equ	0xFF8
 12000                           tblptrh	equ	0xFF7
 12001                           tblptrl	equ	0xFF6
 12002                           tablat	equ	0xFF5
 12003                           prodh	equ	0xFF4
 12004                           prodl	equ	0xFF3
 12005                           intcon	equ	0xFF2
 12006                           intcon3	equ	0xFF0
 12007                           indf0	equ	0xFEF
 12008                           postinc0	equ	0xFEE
 12009                           fsr0h	equ	0xFEA
 12010                           fsr0l	equ	0xFE9
 12011                           wreg	equ	0xFE8
 12012                           postdec1	equ	0xFE5
 12013                           fsr1h	equ	0xFE2
 12014                           fsr1l	equ	0xFE1
 12015                           indf2	equ	0xFDF
 12016                           postinc2	equ	0xFDE
 12017                           postdec2	equ	0xFDD
 12018                           fsr2h	equ	0xFDA
 12019                           fsr2l	equ	0xFD9
 12020                           status	equ	0xFD8
 12021                           
 12022 ;; *************** function i2_putch *****************
 12023 ;; Defined at:
 12024 ;;		line 18 in file "lcd.c"
 12025 ;; Parameters:    Size  Location     Type
 12026 ;;  data            1    wreg     unsigned char 
 12027 ;; Auto vars:     Size  Location     Type
 12028 ;;  data            1    2[COMRAM] unsigned char 
 12029 ;; Return value:  Size  Location     Type
 12030 ;;                  1    wreg      void 
 12031 ;; Registers used:
 12032 ;;		wreg, status,2, status,0, cstack
 12033 ;; Tracked objects:
 12034 ;;		On entry : 0/0
 12035 ;;		On exit  : 0/0
 12036 ;;		Unchanged: 0/0
 12037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12039 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12041 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12042 ;;Total ram usage:        1 bytes
 12043 ;; Hardware stack levels used:    1
 12044 ;; Hardware stack levels required when called:    1
 12045 ;; This function calls:
 12046 ;;		i2_lcdNibble
 12047 ;; This function is called by:
 12048 ;;		i2_printf
 12049 ;; This function uses a non-reentrant model
 12050 ;;
 12051                           
 12052                           	psect	text58
 12053  0027CC                     __ptext58:
 12054                           	opt stack 0
 12055  0027CC                     i2_putch:
 12056                           	opt stack 19
 12057                           
 12058                           ;incstack = 0
 12059                           ;i2putch@data stored from wreg
 12060  0027CC  6E03               	movwf	i2putch@data,c
 12061                           
 12062                           ;lcd.c: 19: LATDbits.LATD2 = 1;
 12063  0027CE  848C               	bsf	3980,2,c	;volatile
 12064                           
 12065                           ;lcd.c: 20: lcdNibble(data);
 12066  0027D0  5003               	movf	i2putch@data,w,c
 12067  0027D2  ECBE  F010         	call	i2_lcdNibble
 12068  0027D6  0012               	return		;funcret
 12069  0027D8                     __end_ofi2_putch:
 12070                           	opt stack 0
 12071                           pclatu	equ	0xFFB
 12072                           pclath	equ	0xFFA
 12073                           tblptru	equ	0xFF8
 12074                           tblptrh	equ	0xFF7
 12075                           tblptrl	equ	0xFF6
 12076                           tablat	equ	0xFF5
 12077                           prodh	equ	0xFF4
 12078                           prodl	equ	0xFF3
 12079                           intcon	equ	0xFF2
 12080                           intcon3	equ	0xFF0
 12081                           indf0	equ	0xFEF
 12082                           postinc0	equ	0xFEE
 12083                           fsr0h	equ	0xFEA
 12084                           fsr0l	equ	0xFE9
 12085                           wreg	equ	0xFE8
 12086                           postdec1	equ	0xFE5
 12087                           fsr1h	equ	0xFE2
 12088                           fsr1l	equ	0xFE1
 12089                           indf2	equ	0xFDF
 12090                           postinc2	equ	0xFDE
 12091                           postdec2	equ	0xFDD
 12092                           fsr2h	equ	0xFDA
 12093                           fsr2l	equ	0xFD9
 12094                           status	equ	0xFD8
 12095                           
 12096 ;; *************** function i2_isdigit *****************
 12097 ;; Defined at:
 12098 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 12099 ;; Parameters:    Size  Location     Type
 12100 ;;  c               1    wreg     unsigned char 
 12101 ;; Auto vars:     Size  Location     Type
 12102 ;;  c               1    2[COMRAM] unsigned char 
 12103 ;; Return value:  Size  Location     Type
 12104 ;;		None               void
 12105 ;; Registers used:
 12106 ;;		wreg, status,2, status,0
 12107 ;; Tracked objects:
 12108 ;;		On entry : 0/0
 12109 ;;		On exit  : 0/0
 12110 ;;		Unchanged: 0/0
 12111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12113 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12114 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12115 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12116 ;;Total ram usage:        3 bytes
 12117 ;; Hardware stack levels used:    1
 12118 ;; This function calls:
 12119 ;;		Nothing
 12120 ;; This function is called by:
 12121 ;;		i2_printf
 12122 ;; This function uses a non-reentrant model
 12123 ;;
 12124                           
 12125                           	psect	text59
 12126  0026FC                     __ptext59:
 12127                           	opt stack 0
 12128  0026FC                     i2_isdigit:
 12129                           	opt stack 20
 12130                           
 12131                           ;incstack = 0
 12132                           ;i2isdigit@c stored from wreg
 12133  0026FC  6E03               	movwf	i2isdigit@c,c
 12134  0026FE  0E00               	movlw	0
 12135  002700  6E02               	movwf	i2_isdigit$1557,c
 12136  002702  0E3A               	movlw	58
 12137  002704  6003               	cpfslt	i2isdigit@c,c
 12138  002706  D005               	goto	i2l3714
 12139  002708  0E2F               	movlw	47
 12140  00270A  6403               	cpfsgt	i2isdigit@c,c
 12141  00270C  D002               	goto	i2l3714
 12142  00270E  0E01               	movlw	1
 12143  002710  6E02               	movwf	i2_isdigit$1557,c
 12144  002712                     i2l3714:
 12145  002712  C002  F001         	movff	i2_isdigit$1557,??i2_isdigit
 12146  002716  3001               	rrcf	??i2_isdigit,w,c
 12147  002718  0012               	return	
 12148  00271A                     __end_ofi2_isdigit:
 12149                           	opt stack 0
 12150                           pclatu	equ	0xFFB
 12151                           pclath	equ	0xFFA
 12152                           tblptru	equ	0xFF8
 12153                           tblptrh	equ	0xFF7
 12154                           tblptrl	equ	0xFF6
 12155                           tablat	equ	0xFF5
 12156                           prodh	equ	0xFF4
 12157                           prodl	equ	0xFF3
 12158                           intcon	equ	0xFF2
 12159                           intcon3	equ	0xFF0
 12160                           indf0	equ	0xFEF
 12161                           postinc0	equ	0xFEE
 12162                           fsr0h	equ	0xFEA
 12163                           fsr0l	equ	0xFE9
 12164                           wreg	equ	0xFE8
 12165                           postdec1	equ	0xFE5
 12166                           fsr1h	equ	0xFE2
 12167                           fsr1l	equ	0xFE1
 12168                           indf2	equ	0xFDF
 12169                           postinc2	equ	0xFDE
 12170                           postdec2	equ	0xFDD
 12171                           fsr2h	equ	0xFDA
 12172                           fsr2l	equ	0xFD9
 12173                           status	equ	0xFD8
 12174                           
 12175 ;; *************** function i2___wmul *****************
 12176 ;; Defined at:
 12177 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 12178 ;; Parameters:    Size  Location     Type
 12179 ;;  multiplier      2    0[COMRAM] unsigned int 
 12180 ;;  multiplicand    2    2[COMRAM] unsigned int 
 12181 ;; Auto vars:     Size  Location     Type
 12182 ;;  __wmul          2    4[COMRAM] unsigned int 
 12183 ;; Return value:  Size  Location     Type
 12184 ;;                  2    0[COMRAM] unsigned int 
 12185 ;; Registers used:
 12186 ;;		wreg, status,2, status,0, prodl, prodh
 12187 ;; Tracked objects:
 12188 ;;		On entry : 0/0
 12189 ;;		On exit  : 0/0
 12190 ;;		Unchanged: 0/0
 12191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12192 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12193 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12195 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12196 ;;Total ram usage:        6 bytes
 12197 ;; Hardware stack levels used:    1
 12198 ;; This function calls:
 12199 ;;		Nothing
 12200 ;; This function is called by:
 12201 ;;		_printSortTimer
 12202 ;;		i2_printf
 12203 ;; This function uses a non-reentrant model
 12204 ;;
 12205                           
 12206                           	psect	text60
 12207  00268E                     __ptext60:
 12208                           	opt stack 0
 12209  00268E                     i2___wmul:
 12210                           	opt stack 20
 12211                           
 12212                           ;incstack = 0
 12213  00268E  5001               	movf	i2___wmul@multiplier,w,c
 12214  002690  0203               	mulwf	i2___wmul@multiplicand,c
 12215  002692  CFF3 F005          	movff	prodl,i2___wmul@product
 12216  002696  CFF4 F006          	movff	prodh,i2___wmul@product+1
 12217  00269A  5001               	movf	i2___wmul@multiplier,w,c
 12218  00269C  0204               	mulwf	i2___wmul@multiplicand+1,c
 12219  00269E  50F3               	movf	prodl,w,c
 12220  0026A0  2606               	addwf	i2___wmul@product+1,f,c
 12221  0026A2  5002               	movf	i2___wmul@multiplier+1,w,c
 12222  0026A4  0203               	mulwf	i2___wmul@multiplicand,c
 12223  0026A6  50F3               	movf	prodl,w,c
 12224  0026A8  2606               	addwf	i2___wmul@product+1,f,c
 12225  0026AA  C005  F001         	movff	i2___wmul@product,?i2___wmul
 12226  0026AE  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 12227  0026B2  0012               	return	
 12228  0026B4                     __end_ofi2___wmul:
 12229                           	opt stack 0
 12230                           pclatu	equ	0xFFB
 12231                           pclath	equ	0xFFA
 12232                           tblptru	equ	0xFF8
 12233                           tblptrh	equ	0xFF7
 12234                           tblptrl	equ	0xFF6
 12235                           tablat	equ	0xFF5
 12236                           prodh	equ	0xFF4
 12237                           prodl	equ	0xFF3
 12238                           intcon	equ	0xFF2
 12239                           intcon3	equ	0xFF0
 12240                           indf0	equ	0xFEF
 12241                           postinc0	equ	0xFEE
 12242                           fsr0h	equ	0xFEA
 12243                           fsr0l	equ	0xFE9
 12244                           wreg	equ	0xFE8
 12245                           postdec1	equ	0xFE5
 12246                           fsr1h	equ	0xFE2
 12247                           fsr1l	equ	0xFE1
 12248                           indf2	equ	0xFDF
 12249                           postinc2	equ	0xFDE
 12250                           postdec2	equ	0xFDD
 12251                           fsr2h	equ	0xFDA
 12252                           fsr2l	equ	0xFD9
 12253                           status	equ	0xFD8
 12254                           
 12255 ;; *************** function i2___lwmod *****************
 12256 ;; Defined at:
 12257 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 12258 ;; Parameters:    Size  Location     Type
 12259 ;;  dividend        2    0[COMRAM] unsigned int 
 12260 ;;  divisor         2    2[COMRAM] unsigned int 
 12261 ;; Auto vars:     Size  Location     Type
 12262 ;;  __lwmod         1    4[COMRAM] unsigned char 
 12263 ;; Return value:  Size  Location     Type
 12264 ;;                  2    0[COMRAM] unsigned int 
 12265 ;; Registers used:
 12266 ;;		wreg, status,2, status,0
 12267 ;; Tracked objects:
 12268 ;;		On entry : 0/0
 12269 ;;		On exit  : 0/0
 12270 ;;		Unchanged: 0/0
 12271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12272 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12273 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12275 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12276 ;;Total ram usage:        5 bytes
 12277 ;; Hardware stack levels used:    1
 12278 ;; This function calls:
 12279 ;;		Nothing
 12280 ;; This function is called by:
 12281 ;;		_printSortTimer
 12282 ;;		i2_printf
 12283 ;; This function uses a non-reentrant model
 12284 ;;
 12285                           
 12286                           	psect	text61
 12287  0022FE                     __ptext61:
 12288                           	opt stack 0
 12289  0022FE                     i2___lwmod:
 12290                           	opt stack 20
 12291                           
 12292                           ;incstack = 0
 12293  0022FE  5003               	movf	i2___lwmod@divisor,w,c
 12294  002300  1004               	iorwf	i2___lwmod@divisor+1,w,c
 12295  002302  B4D8               	btfsc	status,2,c
 12296  002304  D018               	goto	i2l1451
 12297  002306  0E01               	movlw	1
 12298  002308  6E05               	movwf	i2___lwmod@counter,c
 12299  00230A  D004               	goto	i2l3746
 12300  00230C                     i2l3744:
 12301  00230C  90D8               	bcf	status,0,c
 12302  00230E  3603               	rlcf	i2___lwmod@divisor,f,c
 12303  002310  3604               	rlcf	i2___lwmod@divisor+1,f,c
 12304  002312  2A05               	incf	i2___lwmod@counter,f,c
 12305  002314                     i2l3746:
 12306  002314  AE04               	btfss	i2___lwmod@divisor+1,7,c
 12307  002316  D7FA               	goto	i2l3744
 12308  002318                     i2l3748:
 12309  002318  5003               	movf	i2___lwmod@divisor,w,c
 12310  00231A  5C01               	subwf	i2___lwmod@dividend,w,c
 12311  00231C  5004               	movf	i2___lwmod@divisor+1,w,c
 12312  00231E  5802               	subwfb	i2___lwmod@dividend+1,w,c
 12313  002320  A0D8               	btfss	status,0,c
 12314  002322  D004               	goto	i2l3752
 12315  002324  5003               	movf	i2___lwmod@divisor,w,c
 12316  002326  5E01               	subwf	i2___lwmod@dividend,f,c
 12317  002328  5004               	movf	i2___lwmod@divisor+1,w,c
 12318  00232A  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 12319  00232C                     i2l3752:
 12320  00232C  90D8               	bcf	status,0,c
 12321  00232E  3204               	rrcf	i2___lwmod@divisor+1,f,c
 12322  002330  3203               	rrcf	i2___lwmod@divisor,f,c
 12323  002332  2E05               	decfsz	i2___lwmod@counter,f,c
 12324  002334  D7F1               	goto	i2l3748
 12325  002336                     i2l1451:
 12326  002336  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 12327  00233A  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 12328  00233E  0012               	return		;funcret
 12329  002340                     __end_ofi2___lwmod:
 12330                           	opt stack 0
 12331                           pclatu	equ	0xFFB
 12332                           pclath	equ	0xFFA
 12333                           tblptru	equ	0xFF8
 12334                           tblptrh	equ	0xFF7
 12335                           tblptrl	equ	0xFF6
 12336                           tablat	equ	0xFF5
 12337                           prodh	equ	0xFF4
 12338                           prodl	equ	0xFF3
 12339                           intcon	equ	0xFF2
 12340                           intcon3	equ	0xFF0
 12341                           indf0	equ	0xFEF
 12342                           postinc0	equ	0xFEE
 12343                           fsr0h	equ	0xFEA
 12344                           fsr0l	equ	0xFE9
 12345                           wreg	equ	0xFE8
 12346                           postdec1	equ	0xFE5
 12347                           fsr1h	equ	0xFE2
 12348                           fsr1l	equ	0xFE1
 12349                           indf2	equ	0xFDF
 12350                           postinc2	equ	0xFDE
 12351                           postdec2	equ	0xFDD
 12352                           fsr2h	equ	0xFDA
 12353                           fsr2l	equ	0xFD9
 12354                           status	equ	0xFD8
 12355                           
 12356 ;; *************** function i2___lwdiv *****************
 12357 ;; Defined at:
 12358 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 12359 ;; Parameters:    Size  Location     Type
 12360 ;;  dividend        2    5[COMRAM] unsigned int 
 12361 ;;  divisor         2    7[COMRAM] unsigned int 
 12362 ;; Auto vars:     Size  Location     Type
 12363 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 12364 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 12365 ;; Return value:  Size  Location     Type
 12366 ;;                  2    5[COMRAM] unsigned int 
 12367 ;; Registers used:
 12368 ;;		wreg, status,2, status,0
 12369 ;; Tracked objects:
 12370 ;;		On entry : 0/0
 12371 ;;		On exit  : 0/0
 12372 ;;		Unchanged: 0/0
 12373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12374 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12375 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12377 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12378 ;;Total ram usage:        7 bytes
 12379 ;; Hardware stack levels used:    1
 12380 ;; This function calls:
 12381 ;;		Nothing
 12382 ;; This function is called by:
 12383 ;;		_printSortTimer
 12384 ;;		i2_printf
 12385 ;; This function uses a non-reentrant model
 12386 ;;
 12387                           
 12388                           	psect	text62
 12389  0021D2                     __ptext62:
 12390                           	opt stack 0
 12391  0021D2                     i2___lwdiv:
 12392                           	opt stack 20
 12393                           
 12394                           ;incstack = 0
 12395  0021D2  0E00               	movlw	0
 12396  0021D4  6E0B               	movwf	i2___lwdiv@quotient+1,c
 12397  0021D6  0E00               	movlw	0
 12398  0021D8  6E0A               	movwf	i2___lwdiv@quotient,c
 12399  0021DA  5008               	movf	i2___lwdiv@divisor,w,c
 12400  0021DC  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 12401  0021DE  B4D8               	btfsc	status,2,c
 12402  0021E0  D01C               	goto	i2l1441
 12403  0021E2  0E01               	movlw	1
 12404  0021E4  6E0C               	movwf	i2___lwdiv@counter,c
 12405  0021E6  D004               	goto	i2l3726
 12406  0021E8                     i2l3724:
 12407  0021E8  90D8               	bcf	status,0,c
 12408  0021EA  3608               	rlcf	i2___lwdiv@divisor,f,c
 12409  0021EC  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 12410  0021EE  2A0C               	incf	i2___lwdiv@counter,f,c
 12411  0021F0                     i2l3726:
 12412  0021F0  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 12413  0021F2  D7FA               	goto	i2l3724
 12414  0021F4                     i2l3728:
 12415  0021F4  90D8               	bcf	status,0,c
 12416  0021F6  360A               	rlcf	i2___lwdiv@quotient,f,c
 12417  0021F8  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 12418  0021FA  5008               	movf	i2___lwdiv@divisor,w,c
 12419  0021FC  5C06               	subwf	i2___lwdiv@dividend,w,c
 12420  0021FE  5009               	movf	i2___lwdiv@divisor+1,w,c
 12421  002200  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 12422  002202  A0D8               	btfss	status,0,c
 12423  002204  D005               	goto	i2l3736
 12424  002206  5008               	movf	i2___lwdiv@divisor,w,c
 12425  002208  5E06               	subwf	i2___lwdiv@dividend,f,c
 12426  00220A  5009               	movf	i2___lwdiv@divisor+1,w,c
 12427  00220C  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 12428  00220E  800A               	bsf	i2___lwdiv@quotient,0,c
 12429  002210                     i2l3736:
 12430  002210  90D8               	bcf	status,0,c
 12431  002212  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 12432  002214  3208               	rrcf	i2___lwdiv@divisor,f,c
 12433  002216  2E0C               	decfsz	i2___lwdiv@counter,f,c
 12434  002218  D7ED               	goto	i2l3728
 12435  00221A                     i2l1441:
 12436  00221A  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 12437  00221E  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 12438  002222  0012               	return		;funcret
 12439  002224                     __end_ofi2___lwdiv:
 12440                           	opt stack 0
 12441                           pclatu	equ	0xFFB
 12442                           pclath	equ	0xFFA
 12443                           tblptru	equ	0xFF8
 12444                           tblptrh	equ	0xFF7
 12445                           tblptrl	equ	0xFF6
 12446                           tablat	equ	0xFF5
 12447                           prodh	equ	0xFF4
 12448                           prodl	equ	0xFF3
 12449                           intcon	equ	0xFF2
 12450                           intcon3	equ	0xFF0
 12451                           indf0	equ	0xFEF
 12452                           postinc0	equ	0xFEE
 12453                           fsr0h	equ	0xFEA
 12454                           fsr0l	equ	0xFE9
 12455                           wreg	equ	0xFE8
 12456                           postdec1	equ	0xFE5
 12457                           fsr1h	equ	0xFE2
 12458                           fsr1l	equ	0xFE1
 12459                           indf2	equ	0xFDF
 12460                           postinc2	equ	0xFDE
 12461                           postdec2	equ	0xFDD
 12462                           fsr2h	equ	0xFDA
 12463                           fsr2l	equ	0xFD9
 12464                           status	equ	0xFD8
 12465                           
 12466 ;; *************** function i2_lcdInst *****************
 12467 ;; Defined at:
 12468 ;;		line 13 in file "lcd.c"
 12469 ;; Parameters:    Size  Location     Type
 12470 ;;  data            1    wreg     unsigned char 
 12471 ;; Auto vars:     Size  Location     Type
 12472 ;;  data            1    2[COMRAM] unsigned char 
 12473 ;; Return value:  Size  Location     Type
 12474 ;;                  1    wreg      void 
 12475 ;; Registers used:
 12476 ;;		wreg, status,2, status,0, cstack
 12477 ;; Tracked objects:
 12478 ;;		On entry : 0/0
 12479 ;;		On exit  : 0/0
 12480 ;;		Unchanged: 0/0
 12481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12483 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12485 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12486 ;;Total ram usage:        1 bytes
 12487 ;; Hardware stack levels used:    1
 12488 ;; Hardware stack levels required when called:    1
 12489 ;; This function calls:
 12490 ;;		i2_lcdNibble
 12491 ;; This function is called by:
 12492 ;;		_change_state_to_menu_11
 12493 ;;		_change_state_to_menu_12
 12494 ;;		_change_state_to_menu_22
 12495 ;;		_change_state_to_menu_23
 12496 ;;		_change_state_to_logs_11
 12497 ;;		_change_state_to_logs_12
 12498 ;;		_change_state_to_logs_22
 12499 ;;		_change_state_to_logs_23
 12500 ;;		_change_state_to_logs_33
 12501 ;;		_change_state_to_logs_34
 12502 ;;		_printSortTimer
 12503 ;;		i2_change_state_to_menu_start
 12504 ;;		i2_printRTC
 12505 ;; This function uses a non-reentrant model
 12506 ;;
 12507                           
 12508                           	psect	text63
 12509  0027D8                     __ptext63:
 12510                           	opt stack 0
 12511  0027D8                     i2_lcdInst:
 12512                           	opt stack 19
 12513                           
 12514                           ;incstack = 0
 12515                           ;i2lcdInst@data stored from wreg
 12516  0027D8  6E03               	movwf	i2lcdInst@data,c
 12517                           
 12518                           ;lcd.c: 14: LATDbits.LATD2 = 0;
 12519  0027DA  948C               	bcf	3980,2,c	;volatile
 12520                           
 12521                           ;lcd.c: 15: lcdNibble(data);
 12522  0027DC  5003               	movf	i2lcdInst@data,w,c
 12523  0027DE  ECBE  F010         	call	i2_lcdNibble
 12524  0027E2  0012               	return		;funcret
 12525  0027E4                     __end_ofi2_lcdInst:
 12526                           	opt stack 0
 12527                           pclatu	equ	0xFFB
 12528                           pclath	equ	0xFFA
 12529                           tblptru	equ	0xFF8
 12530                           tblptrh	equ	0xFF7
 12531                           tblptrl	equ	0xFF6
 12532                           tablat	equ	0xFF5
 12533                           prodh	equ	0xFF4
 12534                           prodl	equ	0xFF3
 12535                           intcon	equ	0xFF2
 12536                           intcon3	equ	0xFF0
 12537                           indf0	equ	0xFEF
 12538                           postinc0	equ	0xFEE
 12539                           fsr0h	equ	0xFEA
 12540                           fsr0l	equ	0xFE9
 12541                           wreg	equ	0xFE8
 12542                           postdec1	equ	0xFE5
 12543                           fsr1h	equ	0xFE2
 12544                           fsr1l	equ	0xFE1
 12545                           indf2	equ	0xFDF
 12546                           postinc2	equ	0xFDE
 12547                           postdec2	equ	0xFDD
 12548                           fsr2h	equ	0xFDA
 12549                           fsr2l	equ	0xFD9
 12550                           status	equ	0xFD8
 12551                           
 12552 ;; *************** function i2_lcdNibble *****************
 12553 ;; Defined at:
 12554 ;;		line 23 in file "lcd.c"
 12555 ;; Parameters:    Size  Location     Type
 12556 ;;  data            1    wreg     unsigned char 
 12557 ;; Auto vars:     Size  Location     Type
 12558 ;;  data            1    1[COMRAM] unsigned char 
 12559 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 12560 ;; Return value:  Size  Location     Type
 12561 ;;                  1    wreg      void 
 12562 ;; Registers used:
 12563 ;;		wreg, status,2, status,0
 12564 ;; Tracked objects:
 12565 ;;		On entry : 0/0
 12566 ;;		On exit  : 0/0
 12567 ;;		Unchanged: 0/0
 12568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12570 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12572 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12573 ;;Total ram usage:        2 bytes
 12574 ;; Hardware stack levels used:    1
 12575 ;; This function calls:
 12576 ;;		Nothing
 12577 ;; This function is called by:
 12578 ;;		i2_lcdInst
 12579 ;;		i2_putch
 12580 ;; This function uses a non-reentrant model
 12581 ;;
 12582                           
 12583                           	psect	text64
 12584  00217C                     __ptext64:
 12585                           	opt stack 0
 12586  00217C                     i2_lcdNibble:
 12587                           	opt stack 19
 12588                           
 12589                           ;incstack = 0
 12590                           ;i2lcdNibble@data stored from wreg
 12591  00217C  6E02               	movwf	i2lcdNibble@data,c
 12592                           
 12593                           ;lcd.c: 25: char temp = data & 0xF0;
 12594  00217E  5002               	movf	i2lcdNibble@data,w,c
 12595  002180  0BF0               	andlw	240
 12596  002182  6E01               	movwf	i2lcdNibble@temp,c
 12597                           
 12598                           ;lcd.c: 26: LATD = LATD & 0x0F;
 12599  002184  508C               	movf	3980,w,c	;volatile
 12600  002186  0B0F               	andlw	15
 12601  002188  6E8C               	movwf	3980,c	;volatile
 12602                           
 12603                           ;lcd.c: 27: LATD = temp | LATD;
 12604  00218A  5001               	movf	i2lcdNibble@temp,w,c
 12605  00218C  108C               	iorwf	3980,w,c	;volatile
 12606  00218E  6E8C               	movwf	3980,c	;volatile
 12607                           
 12608                           ;lcd.c: 29: LATDbits.LATD3 = 1;
 12609  002190  868C               	bsf	3980,3,c	;volatile
 12610                           
 12611                           ;lcd.c: 30: _delay((unsigned long)((25)*(32000000/4000000.0)));
 12612  002192  0E42               	movlw	66
 12613  002194                     i2u477_47:
 12614  002194  2EE8               	decfsz	wreg,f,c
 12615  002196  D7FE               	bra	i2u477_47
 12616  002198  D000               	nop2	
 12617                           
 12618                           ;lcd.c: 31: LATDbits.LATD3 = 0;
 12619  00219A  968C               	bcf	3980,3,c	;volatile
 12620                           
 12621                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 12622  00219C  0E42               	movlw	66
 12623  00219E                     i2u478_47:
 12624  00219E  2EE8               	decfsz	wreg,f,c
 12625  0021A0  D7FE               	bra	i2u478_47
 12626  0021A2  D000               	nop2	
 12627                           
 12628                           ;lcd.c: 34: data = data << 4;
 12629  0021A4  3802               	swapf	i2lcdNibble@data,w,c
 12630  0021A6  0BF0               	andlw	240
 12631  0021A8  6E02               	movwf	i2lcdNibble@data,c
 12632                           
 12633                           ;lcd.c: 36: temp = data & 0xF0;
 12634  0021AA  5002               	movf	i2lcdNibble@data,w,c
 12635  0021AC  0BF0               	andlw	240
 12636  0021AE  6E01               	movwf	i2lcdNibble@temp,c
 12637                           
 12638                           ;lcd.c: 37: LATD = LATD & 0x0F;
 12639  0021B0  508C               	movf	3980,w,c	;volatile
 12640  0021B2  0B0F               	andlw	15
 12641  0021B4  6E8C               	movwf	3980,c	;volatile
 12642                           
 12643                           ;lcd.c: 38: LATD = temp | LATD;
 12644  0021B6  5001               	movf	i2lcdNibble@temp,w,c
 12645  0021B8  108C               	iorwf	3980,w,c	;volatile
 12646  0021BA  6E8C               	movwf	3980,c	;volatile
 12647                           
 12648                           ;lcd.c: 40: LATDbits.LATD3 = 1;
 12649  0021BC  868C               	bsf	3980,3,c	;volatile
 12650                           
 12651                           ;lcd.c: 41: _delay((unsigned long)((25)*(32000000/4000000.0)));
 12652  0021BE  0E42               	movlw	66
 12653  0021C0                     i2u479_47:
 12654  0021C0  2EE8               	decfsz	wreg,f,c
 12655  0021C2  D7FE               	bra	i2u479_47
 12656  0021C4  D000               	nop2	
 12657                           
 12658                           ;lcd.c: 42: LATDbits.LATD3 = 0;
 12659  0021C6  968C               	bcf	3980,3,c	;volatile
 12660                           
 12661                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 12662  0021C8  0E42               	movlw	66
 12663  0021CA                     i2u480_47:
 12664  0021CA  2EE8               	decfsz	wreg,f,c
 12665  0021CC  D7FE               	bra	i2u480_47
 12666  0021CE  D000               	nop2	
 12667  0021D0  0012               	return		;funcret
 12668  0021D2                     __end_ofi2_lcdNibble:
 12669                           	opt stack 0
 12670                           pclatu	equ	0xFFB
 12671                           pclath	equ	0xFFA
 12672                           tblptru	equ	0xFF8
 12673                           tblptrh	equ	0xFF7
 12674                           tblptrl	equ	0xFF6
 12675                           tablat	equ	0xFF5
 12676                           prodh	equ	0xFF4
 12677                           prodl	equ	0xFF3
 12678                           intcon	equ	0xFF2
 12679                           intcon3	equ	0xFF0
 12680                           indf0	equ	0xFEF
 12681                           postinc0	equ	0xFEE
 12682                           fsr0h	equ	0xFEA
 12683                           fsr0l	equ	0xFE9
 12684                           wreg	equ	0xFE8
 12685                           postdec1	equ	0xFE5
 12686                           fsr1h	equ	0xFE2
 12687                           fsr1l	equ	0xFE1
 12688                           indf2	equ	0xFDF
 12689                           postinc2	equ	0xFDE
 12690                           postdec2	equ	0xFDD
 12691                           fsr2h	equ	0xFDA
 12692                           fsr2l	equ	0xFD9
 12693                           status	equ	0xFD8
 12694                           
 12695 ;; *************** function i2_getRTC *****************
 12696 ;; Defined at:
 12697 ;;		line 42 in file "RTC.c"
 12698 ;; Parameters:    Size  Location     Type
 12699 ;;		None
 12700 ;; Auto vars:     Size  Location     Type
 12701 ;;  getRTC          2    3[COMRAM] int 
 12702 ;; Return value:  Size  Location     Type
 12703 ;;                  1    wreg      void 
 12704 ;; Registers used:
 12705 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12706 ;; Tracked objects:
 12707 ;;		On entry : 0/0
 12708 ;;		On exit  : 0/0
 12709 ;;		Unchanged: 0/0
 12710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12712 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12714 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12715 ;;Total ram usage:        2 bytes
 12716 ;; Hardware stack levels used:    1
 12717 ;; Hardware stack levels required when called:    2
 12718 ;; This function calls:
 12719 ;;		i2_I2C_Master_Read
 12720 ;;		i2_I2C_Master_Start
 12721 ;;		i2_I2C_Master_Stop
 12722 ;;		i2_I2C_Master_Write
 12723 ;; This function is called by:
 12724 ;;		_printSortTimer
 12725 ;;		i2_printRTC
 12726 ;; This function uses a non-reentrant model
 12727 ;;
 12728                           
 12729                           	psect	text65
 12730  001FE0                     __ptext65:
 12731                           	opt stack 0
 12732  001FE0                     i2_getRTC:
 12733                           	opt stack 18
 12734                           
 12735                           ;RTC.c: 46: I2C_Master_Start();
 12736                           
 12737                           ;incstack = 0
 12738  001FE0  EC0C  F014         	call	i2_I2C_Master_Start	;wreg free
 12739                           
 12740                           ;RTC.c: 47: I2C_Master_Write(0b11010000);
 12741  001FE4  0E00               	movlw	0
 12742  001FE6  6E03               	movwf	i2I2C_Master_Write@d+1,c
 12743  001FE8  0ED0               	movlw	208
 12744  001FEA  6E02               	movwf	i2I2C_Master_Write@d,c
 12745  001FEC  ECF7  F013         	call	i2_I2C_Master_Write	;wreg free
 12746                           
 12747                           ;RTC.c: 48: I2C_Master_Write(0x00);
 12748  001FF0  0E00               	movlw	0
 12749  001FF2  6E03               	movwf	i2I2C_Master_Write@d+1,c
 12750  001FF4  0E00               	movlw	0
 12751  001FF6  6E02               	movwf	i2I2C_Master_Write@d,c
 12752  001FF8  ECF7  F013         	call	i2_I2C_Master_Write	;wreg free
 12753                           
 12754                           ;RTC.c: 49: I2C_Master_Stop();
 12755  001FFC  EC08  F014         	call	i2_I2C_Master_Stop	;wreg free
 12756                           
 12757                           ;RTC.c: 52: I2C_Master_Start();
 12758  002000  EC0C  F014         	call	i2_I2C_Master_Start	;wreg free
 12759                           
 12760                           ;RTC.c: 53: I2C_Master_Write(0b11010001);
 12761  002004  0E00               	movlw	0
 12762  002006  6E03               	movwf	i2I2C_Master_Write@d+1,c
 12763  002008  0ED1               	movlw	209
 12764  00200A  6E02               	movwf	i2I2C_Master_Write@d,c
 12765  00200C  ECF7  F013         	call	i2_I2C_Master_Write	;wreg free
 12766                           
 12767                           ;RTC.c: 54: for(int i = 0; i < 6; i++){
 12768  002010  0E00               	movlw	0
 12769  002012  6E05               	movwf	i2getRTC@i+1,c
 12770  002014  0E00               	movlw	0
 12771  002016  6E04               	movwf	i2getRTC@i,c
 12772  002018                     i2l3940:
 12773  002018  BE05               	btfsc	i2getRTC@i+1,7,c
 12774  00201A  D006               	goto	i2l3944
 12775  00201C  5005               	movf	i2getRTC@i+1,w,c
 12776  00201E  E111               	bnz	i2l3950
 12777  002020  0E06               	movlw	6
 12778  002022  5C04               	subwf	i2getRTC@i,w,c
 12779  002024  B0D8               	btfsc	status,0,c
 12780  002026  D00D               	goto	i2l3950
 12781  002028                     i2l3944:
 12782                           
 12783                           ;RTC.c: 55: time[i] = I2C_Master_Read(1);
 12784  002028  0ED4               	movlw	low _time
 12785  00202A  2404               	addwf	i2getRTC@i,w,c
 12786  00202C  6ED9               	movwf	fsr2l,c
 12787  00202E  0E00               	movlw	high _time
 12788  002030  2005               	addwfc	i2getRTC@i+1,w,c
 12789  002032  6EDA               	movwf	fsr2h,c
 12790  002034  0E01               	movlw	1
 12791  002036  EC5A  F013         	call	i2_I2C_Master_Read
 12792  00203A  6EDF               	movwf	indf2,c
 12793  00203C  4A04               	infsnz	i2getRTC@i,f,c
 12794  00203E  2A05               	incf	i2getRTC@i+1,f,c
 12795  002040  D7EB               	goto	i2l3940
 12796  002042                     i2l3950:
 12797                           
 12798                           ;RTC.c: 56: }
 12799                           ;RTC.c: 57: time[6] = I2C_Master_Read(0);
 12800  002042  0E00               	movlw	0
 12801  002044  EC5A  F013         	call	i2_I2C_Master_Read
 12802  002048  0100               	movlb	0	; () banked
 12803  00204A  6FDA               	movwf	(_time+6)& (0+255),b
 12804                           
 12805                           ;RTC.c: 58: I2C_Master_Stop();
 12806  00204C  EC08  F014         	call	i2_I2C_Master_Stop	;wreg free
 12807  002050  0012               	return		;funcret
 12808  002052                     __end_ofi2_getRTC:
 12809                           	opt stack 0
 12810                           pclatu	equ	0xFFB
 12811                           pclath	equ	0xFFA
 12812                           tblptru	equ	0xFF8
 12813                           tblptrh	equ	0xFF7
 12814                           tblptrl	equ	0xFF6
 12815                           tablat	equ	0xFF5
 12816                           prodh	equ	0xFF4
 12817                           prodl	equ	0xFF3
 12818                           intcon	equ	0xFF2
 12819                           intcon3	equ	0xFF0
 12820                           indf0	equ	0xFEF
 12821                           postinc0	equ	0xFEE
 12822                           fsr0h	equ	0xFEA
 12823                           fsr0l	equ	0xFE9
 12824                           wreg	equ	0xFE8
 12825                           postdec1	equ	0xFE5
 12826                           fsr1h	equ	0xFE2
 12827                           fsr1l	equ	0xFE1
 12828                           indf2	equ	0xFDF
 12829                           postinc2	equ	0xFDE
 12830                           postdec2	equ	0xFDD
 12831                           fsr2h	equ	0xFDA
 12832                           fsr2l	equ	0xFD9
 12833                           status	equ	0xFD8
 12834                           
 12835 ;; *************** function i2_I2C_Master_Write *****************
 12836 ;; Defined at:
 12837 ;;		line 47 in file "I2C.c"
 12838 ;; Parameters:    Size  Location     Type
 12839 ;;  d               2    1[COMRAM] unsigned int 
 12840 ;; Auto vars:     Size  Location     Type
 12841 ;;		None
 12842 ;; Return value:  Size  Location     Type
 12843 ;;                  1    wreg      void 
 12844 ;; Registers used:
 12845 ;;		wreg, status,2, status,0, cstack
 12846 ;; Tracked objects:
 12847 ;;		On entry : 0/0
 12848 ;;		On exit  : 0/0
 12849 ;;		Unchanged: 0/0
 12850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12851 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12854 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12855 ;;Total ram usage:        2 bytes
 12856 ;; Hardware stack levels used:    1
 12857 ;; Hardware stack levels required when called:    1
 12858 ;; This function calls:
 12859 ;;		i2_I2C_Master_Wait
 12860 ;; This function is called by:
 12861 ;;		i2_getRTC
 12862 ;; This function uses a non-reentrant model
 12863 ;;
 12864                           
 12865                           	psect	text66
 12866  0027EE                     __ptext66:
 12867                           	opt stack 0
 12868  0027EE                     i2_I2C_Master_Write:
 12869                           	opt stack 18
 12870                           
 12871                           ;I2C.c: 49: I2C_Master_Wait();
 12872                           
 12873                           ;incstack = 0
 12874  0027EE  ECCD  F013         	call	i2_I2C_Master_Wait	;wreg free
 12875                           
 12876                           ;I2C.c: 50: SSPBUF = d;
 12877  0027F2  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 12878  0027F6  0012               	return		;funcret
 12879  0027F8                     __end_ofi2_I2C_Master_Write:
 12880                           	opt stack 0
 12881                           pclatu	equ	0xFFB
 12882                           pclath	equ	0xFFA
 12883                           tblptru	equ	0xFF8
 12884                           tblptrh	equ	0xFF7
 12885                           tblptrl	equ	0xFF6
 12886                           tablat	equ	0xFF5
 12887                           prodh	equ	0xFF4
 12888                           prodl	equ	0xFF3
 12889                           intcon	equ	0xFF2
 12890                           intcon3	equ	0xFF0
 12891                           indf0	equ	0xFEF
 12892                           postinc0	equ	0xFEE
 12893                           fsr0h	equ	0xFEA
 12894                           fsr0l	equ	0xFE9
 12895                           wreg	equ	0xFE8
 12896                           postdec1	equ	0xFE5
 12897                           fsr1h	equ	0xFE2
 12898                           fsr1l	equ	0xFE1
 12899                           indf2	equ	0xFDF
 12900                           postinc2	equ	0xFDE
 12901                           postdec2	equ	0xFDD
 12902                           fsr2h	equ	0xFDA
 12903                           fsr2l	equ	0xFD9
 12904                           status	equ	0xFD8
 12905                           
 12906 ;; *************** function i2_I2C_Master_Stop *****************
 12907 ;; Defined at:
 12908 ;;		line 41 in file "I2C.c"
 12909 ;; Parameters:    Size  Location     Type
 12910 ;;		None
 12911 ;; Auto vars:     Size  Location     Type
 12912 ;;		None
 12913 ;; Return value:  Size  Location     Type
 12914 ;;                  1    wreg      void 
 12915 ;; Registers used:
 12916 ;;		wreg, status,2, status,0, cstack
 12917 ;; Tracked objects:
 12918 ;;		On entry : 0/0
 12919 ;;		On exit  : 0/0
 12920 ;;		Unchanged: 0/0
 12921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12926 ;;Total ram usage:        0 bytes
 12927 ;; Hardware stack levels used:    1
 12928 ;; Hardware stack levels required when called:    1
 12929 ;; This function calls:
 12930 ;;		i2_I2C_Master_Wait
 12931 ;; This function is called by:
 12932 ;;		i2_getRTC
 12933 ;; This function uses a non-reentrant model
 12934 ;;
 12935                           
 12936                           	psect	text67
 12937  002810                     __ptext67:
 12938                           	opt stack 0
 12939  002810                     i2_I2C_Master_Stop:
 12940                           	opt stack 18
 12941                           
 12942                           ;I2C.c: 43: I2C_Master_Wait();
 12943                           
 12944                           ;incstack = 0
 12945  002810  ECCD  F013         	call	i2_I2C_Master_Wait	;wreg free
 12946                           
 12947                           ;I2C.c: 44: PEN = 1;
 12948  002814  84C5               	bsf	4037,2,c	;volatile
 12949  002816  0012               	return		;funcret
 12950  002818                     __end_ofi2_I2C_Master_Stop:
 12951                           	opt stack 0
 12952                           pclatu	equ	0xFFB
 12953                           pclath	equ	0xFFA
 12954                           tblptru	equ	0xFF8
 12955                           tblptrh	equ	0xFF7
 12956                           tblptrl	equ	0xFF6
 12957                           tablat	equ	0xFF5
 12958                           prodh	equ	0xFF4
 12959                           prodl	equ	0xFF3
 12960                           intcon	equ	0xFF2
 12961                           intcon3	equ	0xFF0
 12962                           indf0	equ	0xFEF
 12963                           postinc0	equ	0xFEE
 12964                           fsr0h	equ	0xFEA
 12965                           fsr0l	equ	0xFE9
 12966                           wreg	equ	0xFE8
 12967                           postdec1	equ	0xFE5
 12968                           fsr1h	equ	0xFE2
 12969                           fsr1l	equ	0xFE1
 12970                           indf2	equ	0xFDF
 12971                           postinc2	equ	0xFDE
 12972                           postdec2	equ	0xFDD
 12973                           fsr2h	equ	0xFDA
 12974                           fsr2l	equ	0xFD9
 12975                           status	equ	0xFD8
 12976                           
 12977 ;; *************** function i2_I2C_Master_Start *****************
 12978 ;; Defined at:
 12979 ;;		line 29 in file "I2C.c"
 12980 ;; Parameters:    Size  Location     Type
 12981 ;;		None
 12982 ;; Auto vars:     Size  Location     Type
 12983 ;;		None
 12984 ;; Return value:  Size  Location     Type
 12985 ;;                  1    wreg      void 
 12986 ;; Registers used:
 12987 ;;		wreg, status,2, status,0, cstack
 12988 ;; Tracked objects:
 12989 ;;		On entry : 0/0
 12990 ;;		On exit  : 0/0
 12991 ;;		Unchanged: 0/0
 12992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12997 ;;Total ram usage:        0 bytes
 12998 ;; Hardware stack levels used:    1
 12999 ;; Hardware stack levels required when called:    1
 13000 ;; This function calls:
 13001 ;;		i2_I2C_Master_Wait
 13002 ;; This function is called by:
 13003 ;;		i2_getRTC
 13004 ;; This function uses a non-reentrant model
 13005 ;;
 13006                           
 13007                           	psect	text68
 13008  002818                     __ptext68:
 13009                           	opt stack 0
 13010  002818                     i2_I2C_Master_Start:
 13011                           	opt stack 18
 13012                           
 13013                           ;I2C.c: 31: I2C_Master_Wait();
 13014                           
 13015                           ;incstack = 0
 13016  002818  ECCD  F013         	call	i2_I2C_Master_Wait	;wreg free
 13017                           
 13018                           ;I2C.c: 32: SEN = 1;
 13019  00281C  80C5               	bsf	4037,0,c	;volatile
 13020  00281E  0012               	return		;funcret
 13021  002820                     __end_ofi2_I2C_Master_Start:
 13022                           	opt stack 0
 13023                           pclatu	equ	0xFFB
 13024                           pclath	equ	0xFFA
 13025                           tblptru	equ	0xFF8
 13026                           tblptrh	equ	0xFF7
 13027                           tblptrl	equ	0xFF6
 13028                           tablat	equ	0xFF5
 13029                           prodh	equ	0xFF4
 13030                           prodl	equ	0xFF3
 13031                           intcon	equ	0xFF2
 13032                           intcon3	equ	0xFF0
 13033                           indf0	equ	0xFEF
 13034                           postinc0	equ	0xFEE
 13035                           fsr0h	equ	0xFEA
 13036                           fsr0l	equ	0xFE9
 13037                           wreg	equ	0xFE8
 13038                           postdec1	equ	0xFE5
 13039                           fsr1h	equ	0xFE2
 13040                           fsr1l	equ	0xFE1
 13041                           indf2	equ	0xFDF
 13042                           postinc2	equ	0xFDE
 13043                           postdec2	equ	0xFDD
 13044                           fsr2h	equ	0xFDA
 13045                           fsr2l	equ	0xFD9
 13046                           status	equ	0xFD8
 13047                           
 13048 ;; *************** function i2_I2C_Master_Read *****************
 13049 ;; Defined at:
 13050 ;;		line 53 in file "I2C.c"
 13051 ;; Parameters:    Size  Location     Type
 13052 ;;  a               1    wreg     unsigned char 
 13053 ;; Auto vars:     Size  Location     Type
 13054 ;;  a               1    1[COMRAM] unsigned char 
 13055 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 13056 ;; Return value:  Size  Location     Type
 13057 ;;                  1    wreg      unsigned char 
 13058 ;; Registers used:
 13059 ;;		wreg, status,2, status,0, cstack
 13060 ;; Tracked objects:
 13061 ;;		On entry : 0/0
 13062 ;;		On exit  : 0/0
 13063 ;;		Unchanged: 0/0
 13064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13066 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13068 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13069 ;;Total ram usage:        2 bytes
 13070 ;; Hardware stack levels used:    1
 13071 ;; Hardware stack levels required when called:    1
 13072 ;; This function calls:
 13073 ;;		i2_I2C_Master_Wait
 13074 ;; This function is called by:
 13075 ;;		i2_getRTC
 13076 ;; This function uses a non-reentrant model
 13077 ;;
 13078                           
 13079                           	psect	text69
 13080  0026B4                     __ptext69:
 13081                           	opt stack 0
 13082  0026B4                     i2_I2C_Master_Read:
 13083                           	opt stack 18
 13084                           
 13085                           ;incstack = 0
 13086                           ;i2I2C_Master_Read@a stored from wreg
 13087  0026B4  6E02               	movwf	i2I2C_Master_Read@a,c
 13088                           
 13089                           ;I2C.c: 55: unsigned char temp;
 13090                           ;I2C.c: 56: I2C_Master_Wait();
 13091  0026B6  ECCD  F013         	call	i2_I2C_Master_Wait	;wreg free
 13092                           
 13093                           ;I2C.c: 57: RCEN = 1;
 13094  0026BA  86C5               	bsf	4037,3,c	;volatile
 13095                           
 13096                           ;I2C.c: 58: I2C_Master_Wait();
 13097  0026BC  ECCD  F013         	call	i2_I2C_Master_Wait	;wreg free
 13098                           
 13099                           ;I2C.c: 59: temp = SSPBUF;
 13100  0026C0  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 13101                           
 13102                           ;I2C.c: 60: I2C_Master_Wait();
 13103  0026C4  ECCD  F013         	call	i2_I2C_Master_Wait	;wreg free
 13104                           
 13105                           ;I2C.c: 61: ACKDT = (a)?0:1;
 13106  0026C8  5002               	movf	i2I2C_Master_Read@a,w,c
 13107  0026CA  A4D8               	btfss	status,2,c
 13108  0026CC  D002               	goto	i2u241_40
 13109  0026CE  8AC5               	bsf	4037,5,c	;volatile
 13110  0026D0  D001               	goto	i2l3690
 13111  0026D2                     i2u241_40:
 13112  0026D2  9AC5               	bcf	4037,5,c	;volatile
 13113  0026D4                     i2l3690:
 13114                           
 13115                           ;I2C.c: 62: ACKEN = 1;
 13116  0026D4  88C5               	bsf	4037,4,c	;volatile
 13117                           
 13118                           ;I2C.c: 63: return temp;
 13119  0026D6  5003               	movf	i2I2C_Master_Read@temp,w,c
 13120  0026D8  0012               	return	
 13121  0026DA                     __end_ofi2_I2C_Master_Read:
 13122                           	opt stack 0
 13123                           pclatu	equ	0xFFB
 13124                           pclath	equ	0xFFA
 13125                           tblptru	equ	0xFF8
 13126                           tblptrh	equ	0xFF7
 13127                           tblptrl	equ	0xFF6
 13128                           tablat	equ	0xFF5
 13129                           prodh	equ	0xFF4
 13130                           prodl	equ	0xFF3
 13131                           intcon	equ	0xFF2
 13132                           intcon3	equ	0xFF0
 13133                           indf0	equ	0xFEF
 13134                           postinc0	equ	0xFEE
 13135                           fsr0h	equ	0xFEA
 13136                           fsr0l	equ	0xFE9
 13137                           wreg	equ	0xFE8
 13138                           postdec1	equ	0xFE5
 13139                           fsr1h	equ	0xFE2
 13140                           fsr1l	equ	0xFE1
 13141                           indf2	equ	0xFDF
 13142                           postinc2	equ	0xFDE
 13143                           postdec2	equ	0xFDD
 13144                           fsr2h	equ	0xFDA
 13145                           fsr2l	equ	0xFD9
 13146                           status	equ	0xFD8
 13147                           
 13148 ;; *************** function i2_I2C_Master_Wait *****************
 13149 ;; Defined at:
 13150 ;;		line 24 in file "I2C.c"
 13151 ;; Parameters:    Size  Location     Type
 13152 ;;		None
 13153 ;; Auto vars:     Size  Location     Type
 13154 ;;		None
 13155 ;; Return value:  Size  Location     Type
 13156 ;;                  1    wreg      void 
 13157 ;; Registers used:
 13158 ;;		wreg, status,2, status,0
 13159 ;; Tracked objects:
 13160 ;;		On entry : 0/0
 13161 ;;		On exit  : 0/0
 13162 ;;		Unchanged: 0/0
 13163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13166 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13167 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13168 ;;Total ram usage:        1 bytes
 13169 ;; Hardware stack levels used:    1
 13170 ;; This function calls:
 13171 ;;		Nothing
 13172 ;; This function is called by:
 13173 ;;		i2_I2C_Master_Start
 13174 ;;		i2_I2C_Master_Stop
 13175 ;;		i2_I2C_Master_Write
 13176 ;;		i2_I2C_Master_Read
 13177 ;; This function uses a non-reentrant model
 13178 ;;
 13179                           
 13180                           	psect	text70
 13181  00279A                     __ptext70:
 13182                           	opt stack 0
 13183  00279A                     i2_I2C_Master_Wait:
 13184                           	opt stack 18
 13185  00279A                     i2l120:
 13186  00279A  B4C7               	btfsc	4039,2,c	;volatile
 13187  00279C  D7FE               	goto	i2l120
 13188  00279E  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 13189  0027A2  0E1F               	movlw	31
 13190  0027A4  1601               	andwf	??i2_I2C_Master_Wait,f,c
 13191  0027A6  B4D8               	btfsc	status,2,c
 13192  0027A8  0012               	return	
 13193  0027AA  D7F7               	goto	i2l120
 13194  0027AC                     __end_ofi2_I2C_Master_Wait:
 13195                           	opt stack 0
 13196                           pclatu	equ	0xFFB
 13197                           pclath	equ	0xFFA
 13198                           tblptru	equ	0xFF8
 13199                           tblptrh	equ	0xFF7
 13200                           tblptrl	equ	0xFF6
 13201                           tablat	equ	0xFF5
 13202                           prodh	equ	0xFF4
 13203                           prodl	equ	0xFF3
 13204                           intcon	equ	0xFF2
 13205                           intcon3	equ	0xFF0
 13206                           indf0	equ	0xFEF
 13207                           postinc0	equ	0xFEE
 13208                           fsr0h	equ	0xFEA
 13209                           fsr0l	equ	0xFE9
 13210                           wreg	equ	0xFE8
 13211                           postdec1	equ	0xFE5
 13212                           fsr1h	equ	0xFE2
 13213                           fsr1l	equ	0xFE1
 13214                           indf2	equ	0xFDF
 13215                           postinc2	equ	0xFDE
 13216                           postdec2	equ	0xFDD
 13217                           fsr2h	equ	0xFDA
 13218                           fsr2l	equ	0xFD9
 13219                           status	equ	0xFD8
 13220                           pclatu	equ	0xFFB
 13221                           pclath	equ	0xFFA
 13222                           tblptru	equ	0xFF8
 13223                           tblptrh	equ	0xFF7
 13224                           tblptrl	equ	0xFF6
 13225                           tablat	equ	0xFF5
 13226                           prodh	equ	0xFF4
 13227                           prodl	equ	0xFF3
 13228                           intcon	equ	0xFF2
 13229                           intcon3	equ	0xFF0
 13230                           indf0	equ	0xFEF
 13231                           postinc0	equ	0xFEE
 13232                           fsr0h	equ	0xFEA
 13233                           fsr0l	equ	0xFE9
 13234                           wreg	equ	0xFE8
 13235                           postdec1	equ	0xFE5
 13236                           fsr1h	equ	0xFE2
 13237                           fsr1l	equ	0xFE1
 13238                           indf2	equ	0xFDF
 13239                           postinc2	equ	0xFDE
 13240                           postdec2	equ	0xFDD
 13241                           fsr2h	equ	0xFDA
 13242                           fsr2l	equ	0xFD9
 13243                           status	equ	0xFD8
 13244                           
 13245                           	psect	rparam
 13246  0000                     pclatu	equ	0xFFB
 13247                           pclath	equ	0xFFA
 13248                           tblptru	equ	0xFF8
 13249                           tblptrh	equ	0xFF7
 13250                           tblptrl	equ	0xFF6
 13251                           tablat	equ	0xFF5
 13252                           prodh	equ	0xFF4
 13253                           prodl	equ	0xFF3
 13254                           intcon	equ	0xFF2
 13255                           intcon3	equ	0xFF0
 13256                           indf0	equ	0xFEF
 13257                           postinc0	equ	0xFEE
 13258                           fsr0h	equ	0xFEA
 13259                           fsr0l	equ	0xFE9
 13260                           wreg	equ	0xFE8
 13261                           postdec1	equ	0xFE5
 13262                           fsr1h	equ	0xFE2
 13263                           fsr1l	equ	0xFE1
 13264                           indf2	equ	0xFDF
 13265                           postinc2	equ	0xFDE
 13266                           postdec2	equ	0xFDD
 13267                           fsr2h	equ	0xFDA
 13268                           fsr2l	equ	0xFD9
 13269                           status	equ	0xFD8
 13270                           
 13271                           	psect	temp
 13272  00007E                     btemp:
 13273                           	opt stack 0
 13274  00007E                     	ds	1
 13275  0000                     int$flags	set	btemp
 13276                           pclatu	equ	0xFFB
 13277                           pclath	equ	0xFFA
 13278                           tblptru	equ	0xFF8
 13279                           tblptrh	equ	0xFF7
 13280                           tblptrl	equ	0xFF6
 13281                           tablat	equ	0xFF5
 13282                           prodh	equ	0xFF4
 13283                           prodl	equ	0xFF3
 13284                           intcon	equ	0xFF2
 13285                           intcon3	equ	0xFF0
 13286                           indf0	equ	0xFEF
 13287                           postinc0	equ	0xFEE
 13288                           fsr0h	equ	0xFEA
 13289                           fsr0l	equ	0xFE9
 13290                           wreg	equ	0xFE8
 13291                           postdec1	equ	0xFE5
 13292                           fsr1h	equ	0xFE2
 13293                           fsr1l	equ	0xFE1
 13294                           indf2	equ	0xFDF
 13295                           postinc2	equ	0xFDE
 13296                           postdec2	equ	0xFDD
 13297                           fsr2h	equ	0xFDA
 13298                           fsr2l	equ	0xFD9
 13299                           status	equ	0xFD8


Data Sizes:
    Strings     555
    Constant    27
    Data        8
    BSS         77
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     84     120
    BANK1           256      0      14
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_47(CODE[4]), STR_46(CODE[4]), STR_45(CODE[4]), STR_44(CODE[4]), 
		 -> STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), STR_40(CODE[4]), 
		 -> STR_39(CODE[4]), STR_38(CODE[4]), STR_37(CODE[4]), STR_36(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_51(CODE[7]), printRTC@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_50(CODE[21]), STR_49(CODE[11]), STR_48(CODE[24]), STR_35(CODE[17]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[17]), STR_28(CODE[17]), STR_27(CODE[17]), 
		 -> STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[17]), 
		 -> STR_22(CODE[17]), STR_21(CODE[17]), STR_20(CODE[17]), STR_19(CODE[17]), 
		 -> STR_18(CODE[17]), STR_17(CODE[17]), STR_16(CODE[17]), STR_15(CODE[17]), 
		 -> STR_14(CODE[3]), STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[17]), 
		 -> STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[18]), STR_7(CODE[10]), 
		 -> STR_6(CODE[17]), STR_5(CODE[7]), STR_4(CODE[17]), STR_3(CODE[18]), 
		 -> STR_2(CODE[21]), STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_22->i2_printf
    _change_state_to_menu_12->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_getIR
    _initSortTimer->_getRTC
    _getIR->_getRTC
    _ID->_MAGNETISM_in
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    ___awdiv->___awmod

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   29027
                         _PortTestA5
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0    1471
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              1     1      0    1421
                                             24 BANK0      1     1      0
                              _getIR
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _getIR                                               19    19      0     655
                                              5 BANK0     19    19      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   7     7      0      50
                                              2 BANK0      7     7      0
                       _MAGNETISM_in
                     _moveServoBlock
 ---------------------------------------------------------------------------------
 (3) _moveServoBlock                                       1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _MAGNETISM_in                                         2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         0     0      0       0
                       _moveServoCup
 ---------------------------------------------------------------------------------
 (3) _moveServoCup                                         1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   13002
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   12152
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  16    16      0   13881
                                             68 BANK0     16    16      0
                            ___awdiv
                            ___awmod
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0    7428
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    1611
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _printf                                              33    21     12    4589
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     593
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     680
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _PortTestA5                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   73560
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   68752
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_12
            _change_state_to_menu_22
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7546
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4506
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30400
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_12
            _change_state_to_menu_22
            _change_state_to_menu_23
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_22                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_12                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2     406
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4808
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    2905
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     417
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PortTestA5
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _machineConfig
   _sort
     _Distribution
       _moveServoCup
     _ID
       _MAGNETISM_in
       _moveServoBlock
     _Loading
       _getIR
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       E       7        5.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     54      78       5       93.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     103      34        0.0%
DATA                 0      0     103       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Feb 10 17:57:08 2017

                   i2_I2C_Master_Start 2818                     i2_I2C_Master_Write 27EE  
                                   _ID 1CA6                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0079  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C7  
                                  l200 2788                                    l120 2760  
                                  l203 278E                                    l655 1F42  
                                  l816 0D5A                           __CFG_CPB$OFF 000000  
                                  _PEN 007E2A                           __CFG_CPD$OFF 000000  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00E9                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
      __end_of_change_state_to_menu_11 249E        __end_of_change_state_to_menu_12 246E  
      __end_of_change_state_to_menu_22 243E        __end_of_change_state_to_menu_23 240E  
         _f_can_coming_to_distribution 006D                         ??_Distribution 0080  
      __end_of_change_state_to_logs_11 258E        __end_of_change_state_to_logs_12 255E  
      __end_of_change_state_to_logs_22 252E        __end_of_change_state_to_logs_23 25EA  
      __end_of_change_state_to_logs_33 24FE        __end_of_change_state_to_logs_34 24CE  
                                 ??_ID 0082                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1441 1FD6                                   l1451 2112  
                                 l4110 0D64                                   l4120 0DFA  
                                 l4112 0D82                                   l4104 0CD8  
                                 l4130 0E90                                   l4122 0E18  
                                 l4114 0DA0                                   l4132 0EAE  
                                 l4124 0E36                                   l4116 0DBE  
                                 l1388 1B52                                   l4126 0E54  
                                 l4118 0DDC                                   l4128 0E72  
                                 l4136 0ECC                                   l4138 0F2A  
                                 l4250 1C14                                   l3604 25B4  
                                 l4260 1CA0                                   l3622 2636  
                                 l4342 1E1E                                   l4270 1944  
                                 l4254 1C2A                                   l3640 1F92  
                                 l4352 1E60                                   l4520 1D7A  
                                 l4610 1A8A                                   l3650 1FC8  
                                 l3642 1F98                                   l3810 0716  
                                 l4346 1E34                                   l4282 19DC  
                                 l4266 192E                                   l5250 1F26  
                                 l3660 20DA                                   l3804 06EC  
                                 l3820 078E                                   l4700 00F8  
                                 l4276 19BA                                   l5252 1F2C  
                                 l4614 1A9E                                   l4606 1A7C  
                                 l4630 1B90                                   l3902 1EDE  
                                 l3638 1F86                                   l3662 20E0  
                                 l3830 07BE                                   l3814 0742  
                                 l3806 06F8                                   l4542 1DD8  
                                 l5254 1F32                                   l5262 1F44  
                                 l3832 07C4                                   l3808 06FE  
                                 l4704 0110                                   l3920 1AEC  
                                 l4560 1D2C                                   l4536 1DB6  
                                 l4650 1BFC                                   l4642 1BDA  
                                 l4634 1BA4                                   l4626 1B80  
                                 l3666 2104                                   l3658 20CE  
                                 l3850 0822                                   l3818 075A  
                                 l3762 0562                                   l3906 234A  
                                 l4810 0302                                   l4802 02E0  
                                 l4730 0196                                   l4722 0174  
                                 l5258 1F3C                                   l4636 1BB0  
                                 l3844 0800                                   l3772 0592  
                                 l3908 2356                                   l4900 0476  
                                 l4820 031E                                   l4740 01B2  
                                 l4708 0122                                   l3916 1AD6  
                                 l4582 1A06                                   l4638 1BB6  
                                 l4646 1BE8                                   l3870 08A6  
                                 l3862 087E                                   l3854 085A  
                                 l3766 0576                                   l4806 02EA  
                                 l4726 017E                                   l3918 1AE6  
                                 l3880 08DA                                   l3856 0864  
                                 l3768 0588                                   l4904 048E  
                                 l4824 0336                                   l4816 0314  
                                 l4744 01CA                                   l4736 01A8  
                                 l3928 1B40                                   l4594 1A3A  
                                 l3874 08C0                                   l3794 0674  
                                 l3786 0642                                   l3778 05C6  
                                 l4930 0506                                   l4922 04E4  
                                 l4850 03AE                                   l4842 038C  
                                 l4770 0242                                   l4762 0220  
                                 l4596 1A46                                   l4588 1A1C  
                                 l3892 1EA8                                   l3884 0932  
                                 l3868 089A                                   l3796 0680  
                                 l4940 0522                                   l4860 03CA  
                                 l4780 025E                                   l4692 00DC  
                                 l4598 1A4C                                   l3878 08D4  
                                 l3798 0686                                   l3886 093E  
                                 l4926 04EE                                   l4846 0396  
                                 l4766 022A                                   l3896 1EBE  
                                 l4944 053A                                   l4936 0518  
                                 l4864 03E2                                   l4856 03C0  
                                 l4784 0276                                   l4776 0254  
                                 l4696 00EE                                   _ADFM 007E07  
                                 l4890 045A                                   l4882 0438  
                                 l4948 0546                                   l4886 0442  
                                 l4896 046C                                   _ADON 007E10  
                                 STR_1 FF9B                                   STR_2 FDEC  
                                 STR_3 FE01                                   STR_4 FF79  
                                 STR_5 FFC5                                   STR_6 FEF1  
                                 STR_7 FFB4                                   STR_8 FE13  
                                 STR_9 FE9C                                   _LATA 000F89  
                                 u2310 25B2                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u3140 0D5A  
                                 u3125 214C                                   u3420 1CDC  
                                 u2550 06C0                                   u3450 1D1C  
                                 u3428 1CE0                                   u2557 06B6  
                                 u2590 0738                                   u3458 1D20  
                                 u4507 22C0                                   u2597 072E  
                                 u4517 22F4                                   u4607 0290  
                                 u4527 002A                                   u4617 02F2  
                                 u4537 0100                                   u4707 04F6  
                                 u4627 0326                                   u4547 0130  
                                 _RCEN 007E2B                                   u4717 052A  
                                 u4637 0350                                   u4557 0186  
                                 u4727 2072                                   u4647 039E  
                                 u4567 01BA                                   u4737 207C  
                                 u4657 03D2                                   u4577 01E4  
                                 u4497 1D68                                   u4747 20A8  
                                 u4667 03FC                                   u4587 0232  
                                 u4757 20B2                                   u4677 044A  
                                 u4597 0266                                   u4687 047E  
                                 u4697 04A8                                   _RSEN 007E29  
                          _stopSignals 2734                                   _back 005F  
                                 _main 1EEE                                   _down 0069  
                                 _keys FDB9                                   _time 00D4  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 274A  
                                 btemp 007E                   ??i2_I2C_Master_Start 0002  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                        __end_ofi2_putch 27D8  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 122E                            i2_lcdNibble 217C  
                      __end_of_Loading 1DDC                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
                     ?_I2C_Master_Stop 0001                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 1AA8                                  STR_10 FECF  
                                STR_11 FEAD                                  STR_20 FF57  
                                STR_12 FEE0                                  STR_13 FEBE  
                                STR_21 FE69                                  STR_30 FE36  
                                STR_22 FE7A                                  STR_14 FFFC  
                                STR_15 FF8A                                  STR_23 FF46  
                                STR_31 FF24                                  STR_32 FF24  
                                STR_40 FFF8                                  STR_16 FF68  
                                STR_24 FF02                                  STR_41 FFE0  
                                STR_17 FE7A                                  STR_33 FE58  
                                STR_25 FE36                                  STR_34 FE47  
                                STR_50 FDEC                                  STR_42 FFD8  
                                STR_18 FE8B                                  STR_26 FE25  
                                STR_43 FFD4                                  STR_51 FFBE  
                                STR_19 FF57                                  STR_35 FF35  
                                STR_27 FF13                                  STR_28 FF13  
                                STR_44 FFE4                                  STR_36 FFDC  
                      __end_of___awmod 1C06                                  STR_45 FFF0  
                                STR_37 FFCC                                  STR_29 FE47  
                                STR_46 FFF4                                  STR_38 FFE8  
                                STR_39 FFEC                                  STR_47 FFD0  
                                STR_48 FDD4                                  STR_49 FFA9  
                                ?_sort 0001                        __end_of___lldiv 1B64  
                                _T0CON 000FD5                        ___awdiv@divisor 0088  
                      __end_of___lwdiv 1FE0                                  i2l120 279A  
                      __end_of___lwmod 211C                                  i2l364 122A  
                                i2l526 18E4                                  i2l816 12BC  
                      ___awdiv@counter 008A                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _IR_in 00DB                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 27CC  
                      __end_of_handler 1920                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_initLCD 22FE  
                       __CFG_EBTRB$OFF 000000                             i2isdigit@c 0003  
                                _getIR 1920                        __end_of_loadRTC 1E68  
                                _block 007B                        __end_of_dpowers FDD4  
                                _first 00F6                                  _enter 006B  
                      __end_of_isdigit 2640                                  _input 007D  
                                _putch 27AC                                  pclath 000FFA  
                                tablat 000FF5                __size_of_moveServoBlock 0002  
                     __end_ofi2___wmul 26B4                       __end_ofi2_getRTC 2052  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 0CA4  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
               moveServoCup@myPosition 0001                       __end_ofi2_strcpy 23DE  
                     _count_can_no_lab 0061                        __initialization 2224  
                   __size_ofi2_lcdInst 000C                           __end_of_main 1F68  
                         __end_of_keys FDCA                           __end_of_sort 2760  
                           i2printf@ap 001E                             i2printf@cp 0020  
                   __size_ofi2_isdigit 001E    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00D4  
                 __end_of_MAGNETISM_in 2824                                 ??_sort 0099  
                        __activetblptr 000003                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                    ?_I2C_Master_Write 0081                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00A0  
                      i2lcdNibble@temp 0001                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l4000 0AB0                                 i2l1441 221A  
                               i2l4002 0AC2                                 i2l4010 0AFE  
                               i2l1451 2336                                 i2l4012 0B2E  
                               i2l4022 0B56                                 i2l4006 0AEC  
                               i2l4024 0B5A                                 i2l5000 1024  
                               i2l4042 0BA6                                 i2l4060 0BFE  
                               i2l4036 0B8C                                 i2l4300 12C6  
                               i2l5100 11B2                                 i2l5020 1072  
                               i2l5012 104E                                 i2l5004 1032  
                               i2l4062 0C06                                 i2l4070 0C2C  
                               i2l4054 0BE8                                 i2l4046 0BCA  
                               i2l4310 1334                                 i2l4302 12DC  
                               i2l4072 0C32                                 i2l4048 0BD2  
                               i2l4400 16CE                                 i2l4320 13A2  
                               i2l4312 134A                                 i2l4304 12F2  
                               i2l5040 10C0                                 i2l5032 109C  
                               i2l5024 1080                                 i2l5016 105C  
                               i2l5008 1040                                 i2l4066 0C1A  
                               i2l4402 16D4                                 i2l4082 23B6  
                               i2l4322 13B8                                 i2l4314 1360  
                               i2l4306 1308                                 i2l5106 11C0  
                               i2l4076 0C80                                 i2l5124 1470  
                               i2l4404 16DA                                 i2l4412 16EC  
                               i2l4084 23BE                                 i2l4316 1376  
                               i2l4308 131E                                 i2l5060 110E  
                               i2l5052 10F2                                 i2l5044 10CE  
                               i2l5036 10B2                                 i2l5028 108E  
                               i2l4078 0C88                                 i2l5134 14DA  
                               i2l4406 16E0                                 i2l4318 138C  
                               i2l4326 13CE                                 i2l5144 159C  
                               i2l5128 1480                                 i2l4432 1748  
                               i2l4424 1730                                 i2l4408 16E6  
                               i2l4328 1428                                 i2l5080 115C  
                               i2l5072 1140                                 i2l5064 111C  
                               i2l5056 1100                                 i2l5048 10DC  
                               i2l5240 18E0                                 i2l3714 2712  
                               i2l4442 1772                                 i2l5410 121C  
                               i2l5226 18B2                                 i2l3724 21E8  
                               i2l4452 1790                                 i2l5092 118E  
                               i2l5084 1172                                 i2l5076 114E  
                               i2l5068 1132                                 i2l3726 21F0  
                               i2l4454 1794                                 i2l4438 1756  
                               i2l5414 1704                                 i2l4294 125A  
                               i2l5406 11DE                                 i2l5238 18DC  
                               i2l3736 2210                                 i2l3728 21F4  
                               i2l3752 232C                                 i2l3744 230C  
                               i2l4480 17E8                                 i2l4472 17C4  
                               i2l4448 177C                                 i2l5416 1720  
                               i2l4384 1696                                 i2l4376 167C  
                               i2l5408 1200                                 i2l5096 119C  
                               i2l5088 1180                                 i2l3690 26D4  
                               i2l3746 2314                                 i2l4466 17B6  
                               i2l4458 179E                                 i2l4386 16A6  
                               i2l4394 16B4                                 i2l3940 2018  
                               i2l3748 2318                                 i2l4484 17FA  
                               i2l4476 17D6                                 i2l4388 16AA  
                               i2l3950 2042                                 i2l4398 16C8  
                               i2l4494 1816                                 i2l3944 2028  
                               i2l3960 0986                                 i2l4488 180C  
                               i2l3970 09BE                                 i2l3954 0968  
                               i2l3964 098C                                 i2l3990 0A56  
                               i2l3958 0978                                 i2l4960 0FA4  
                               i2l3986 0A48                                 i2l3978 0A20  
                               i2l3996 0AA0                                 i2l3988 0A52  
                               i2l4972 0FCE                                 i2l4964 0FB2  
                               i2l3998 0AAA                                 i2l4958 0F9E  
                               i2l4992 1006                                 i2l4984 0FEA  
                               i2l4976 0FDC                                 i2l4968 0FC0  
                               i2l4996 1016                                 i2l4988 0FF8  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 0098                         __CFG_XINST$OFF 000000  
                     __end_of_dispLogs 2788                            ?i2_printRTC 0001  
                 __end_of_Distribution 268E                                 ___wmul 2376  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                            ??___awmod 0084                                 _getRTC 1E68  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 26FC                                 _initUI 271A  
                               getIR@i 0096                                 clear_0 224A  
                               clear_1 2256                                 clear_2 2262  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 2788                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 0554  
                            ??_handler 004B                                 _strcpy 2340  
                            ??_initLCD 0083                              ??_loadRTC 0095  
 __end_ofi2_change_state_to_menu_start 2668  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 2640                              ??_isdigit 0080  
                    __end_ofi2___lwdiv 2224                       __end_of_printRTC 0F6E  
                         __mediumconst FDB8                      __end_ofi2___lwmod 2340  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                      __end_ofi2_lcdInst 27E4  
                    __end_ofi2_isdigit 271A                             __accesstop 0080  
              __end_of__initialization 2268                          ?_inputHandler 002A  
                        ___rparam_used 000001                printSortTimer@start_sec 003B  
                   i2___lwmod@dividend 0001                         __pcstackCOMRAM 0001  
                         __pidataBANK0 27F8                          __end_of_getIR 19EA  
                          i2printRTC@i 0041                          _initSortTimer 1C06  
                     _beamTimerCounter 00DD                          __end_of_putch 27BC  
                          i2printf@len 0024                            i2printf@val 0022  
                           __end_of_ID 1D44                             __end_of_UI 0554  
                   printSortTimer@hour 003F                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002D  
   __end_of_change_state_to_menu_start 2616          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 25EA                  printSortTimer@cur_sec 003D  
                            ?i2_printf 000D                                ??_getIR 0085  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0065  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                       _moveServoBlock 2820                             __pbssBANK0 00D4  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                      printRTC@RTC_month 00BC  
                         ?i2_lcdNibble 0001                                UI@i_650 00D0  
                              UI@i_642 00CC                                UI@i_634 00C8  
                              UI@i_651 00D1                                UI@i_643 00CD  
                              UI@i_635 00C9                         ?_initSortTimer 0001  
                              UI@i_654 00D2                                UI@i_646 00CE  
                              UI@i_638 00CA                                UI@i_655 00D3  
                              UI@i_647 00CF                                UI@i_639 00CB  
                              ?___wmul 0080                  __size_of_MAGNETISM_in 0002  
                              ?_getRTC 0001                                ?_initUI 0001  
                          ?_PortTestA5 0001                                ?_printf 008E  
            ID@top_bottom_conductivity 0083                                _UI$1913 00C5  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                          ?_moveServoCup 0001  
                           ??i2_printf 0019                 __end_of_moveServoBlock 2822  
                           ??i2_strcpy 0005                              ?_dispLogs 0001  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                i2_putch 27CC  
                            ?_initTime 0080                           _MAGNETISM_in 2822  
                      _f_loadingNewCan 00E7                        i2printRTC@month 003D  
                __size_of_Distribution 0026            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 20BA                                _Loading 1D44  
          __size_ofi2_I2C_Master_Write 000A                                __Hparam 0000  
                              __Lparam 0000                              ?_printRTC 0001  
                              ___awdiv 19EA                                ___awmod 1B64  
                              ___lldiv 1AA8                        __size_of___wmul 0036  
                              ___lwdiv 1F68                                ___lwmod 20BA  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                                _canType 007C  
                      __size_of_initUI 001A                                __pcinit 2224  
                              __ramtop 1000                                _lcdInst 27BC  
                              _handler 0008                                __ptext0 1EEE  
                              __ptext1 2734                                __ptext2 274A  
                              __ptext3 1D44                                __ptext4 1C06  
                              __ptext5 1920                                __ptext6 1CA6  
                              __ptext7 2820                                __ptext8 2822  
                              __ptext9 2668                        __size_of_printf 040A  
                       ??_moveServoCup 0080                        __size_of_strcpy 0036  
                              _initLCD 22B8                                _loadRTC 1DDC  
                              _dpowers FDCA                                _isdigit 2616  
                     ___awmod@dividend 0080                                getRTC@i 0083  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                      ?_moveServoBlock 0001                             ??_dispLogs 0003  
                         _Distribution 2668                         __pintcode_body 1844  
                 end_of_initialization 2268                        _servoSelectFlag 0073  
                           ??_initTime 0086                                int_func 1844  
                  i2___wmul@multiplier 0001                    __size_of_PortTestA5 0012  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 1844  
                __end_of_machineConfig 22B8                             _updateMenu 0F6E  
                    i2_I2C_Master_Read 26B4                      i2_I2C_Master_Wait 279A  
                    i2_I2C_Master_Stop 2810                      i2___lwdiv@divisor 0008  
                            i2___lwdiv 21D2                              i2___lwmod 22FE  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 1464  
                   ?i2_I2C_Master_Stop 0001           ??_change_state_to_menu_start 00C4  
                      getIR@timeBroken 0088                              i2_lcdInst 27D8  
                           _total_time 00ED                            printf@width 00A9  
                      _PWMTimerCounter 005B                   __size_of_stopSignals 0016  
                           ID@magnetic 0087                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 26FC                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                            _UIenabled 005D                         __end_of___wmul 23AC  
                       __end_of_getRTC 1EEE                   __size_ofi2_lcdNibble 0056  
                        i2lcdInst@data 0003                         __end_of_initUI 2734  
                     i2___wmul@product 0005                         __end_of_printf 095E  
                         i2printf@flag 0026                         __end_of_strcpy 2376  
            __end_ofi2_I2C_Master_Read 26DA              __end_ofi2_I2C_Master_Wait 27AC  
                         i2printf@prec 001D                    start_initialization 2224  
            __end_ofi2_I2C_Master_Stop 2818                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 0063            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                              i2printf@c 0027  
                            i2printf@f 000D                  i2I2C_Master_Read@temp 0003  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 0346                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                 __end_of_moveServoCup 2826                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                               ??___wmul 0084  
                             ??_getRTC 0083                            __pdataBANK0 00F0  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                         ??_PortTestA5 0080                 printSortTimer@timeDiff 0047  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0030  
     __size_of_change_state_to_menu_22 0030       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2020 0045                            __pbssCOMRAM 005B  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
              __size_of_printSortTimer 01FA                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$1557 0081  
                       initSortTimer@i 0088                      printSortTimer@min 0041  
                    printSortTimer@sec 0043                      __size_of_dispLogs 0014  
                     printRTC@INT_time 00AE                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 0067  
                   __end_of_PortTestA5 279A                       _I2C_Master_Start 2808  
                            _f_lastCan 00E5                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 27E4  
                    __size_of_initTime 0022                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                        __pmediumconst FDB8                              _lcdNibble 2052  
                __size_of_inputHandler 01E6                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                             ?___lwdiv 0080                               ?___lwmod 0087  
                    __size_of_printRTC 02CA                               ?_lcdInst 0001  
                             ?_handler 0001                       ??_moveServoBlock 0080  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 0071                              _cur_state 00E1  
                     ___lwdiv@quotient 0084                         __size_of_getIR 00CA  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 009E  
                          __size_of_UI 0542             __end_ofi2_I2C_Master_Start 2820  
           __end_ofi2_I2C_Master_Write 27F8                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATDbits 000F8C                           _inputHandler 165E  
                          ??i2_isdigit 0001                               i2u241_40 26D2  
                             i2u322_40 12BC                               i2u442_40 1596  
                             i2u293_40 0AE4                               i2u293_47 0ADA  
                             i2u480_47 21CA                               i2u289_40 0A84  
                             i2u289_47 0A7A                               i2u476_47 169C  
                             i2u477_47 2194                               i2u478_47 219E  
                             i2u479_47 21C0                    __size_of_updateMenu 02C0  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                  ID@side_conductivity 0085                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 0100  
                             i2___wmul 268E                          lcdNibble@data 0081  
                             i2_getRTC 1FE0                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                             i2_printf 095E                               i2_strcpy 23AC  
                  I2C_Master_Read@temp 0082                              copy_data0 2238  
                __size_of_moveServoCup 0002                       __size_ofi2_putch 000C  
                          _count_total 00DF                               __Hrparam 0000  
                     __size_of_Loading 0098                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                  __end_of_initSortTimer 1CA6  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 246E                _change_state_to_menu_12 243E  
              _change_state_to_menu_22 240E                _change_state_to_menu_23 23DE  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 255E  
              _change_state_to_logs_12 252E                _change_state_to_logs_22 24FE  
              _change_state_to_logs_23 25BC                _change_state_to_logs_33 24CE  
              _change_state_to_logs_34 249E                       __size_of___lwmod 0062  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 1918                        _I2C_Master_Init 211C  
                      _I2C_Master_Read 258E                       __size_of_initLCD 0046  
                         _f_ID_receive 00F4                           _moveServoCup 2824  
                     __size_of_loadRTC 008C                        _I2C_Master_Wait 2760  
                      _I2C_Master_Stop 2800                       __size_of_isdigit 002A  
                       _printSortTimer 1464                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                               __ptext10 2824  
                             __ptext11 2272                               __ptext20 0CA4  
                             __ptext12 271A                               __ptext21 2340  
                             __ptext13 1DDC                               __ptext30 1E68  
                             __ptext22 0554                               __ptext14 211C  
                             __ptext31 27E4                               __ptext23 27AC  
                             __ptext15 1AA8                               __ptext40 0F6E  
                             __ptext32 2800                               __ptext24 2616  
                             __ptext16 25EA                               __ptext41 2640  
                             __ptext33 2808                               __ptext25 2376  
                             __ptext17 26DA                               __ptext50 24CE  
                             __ptext42 122E                               __ptext34 258E  
                             __ptext26 20BA                               __ptext18 22B8  
                             __ptext51 25BC                               __ptext43 23AC  
                             __ptext35 2760                               __ptext27 1F68  
                             __ptext19 0012                               __ptext60 268E  
                             __ptext52 24FE                               __ptext44 165E  
                             __ptext36 1B64                               __ptext28 27BC  
                             __ptext61 22FE                               __ptext53 252E  
                             __ptext45 23DE                               __ptext37 19EA  
                             __ptext29 2052                               __ptext70 279A  
                             __ptext62 21D2                               __ptext54 255E  
                             __ptext46 240E                               __ptext38 2788  
                             __ptext63 27D8                               __ptext55 2774  
                             __ptext47 243E                               __ptext64 217C  
                             __ptext56 1464                               __ptext48 246E  
                             __ptext65 1FE0                               __ptext57 095E  
                             __ptext49 249E                               __ptext66 27EE  
                             __ptext58 27CC                               __ptext67 2810  
                             __ptext59 26FC                               __ptext68 2818  
                             __ptext69 26B4                               _dispLogs 2774  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$1557 0002                               _initTime 26DA  
                        __size_of_main 007A                          __size_of_sort 0016  
       ??i2_change_state_to_menu_start 0043                               _logstate 00EB  
               __size_of_machineConfig 0046                          ??i2_lcdNibble 0001  
                             _printRTC 0CA4                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                   _f_can_coming_to_ID 00E3                              printf@len 00A5  
                            printf@val 00A3                               loadRTC@i 0096  
               __end_of_printSortTimer 165E                              putch@data 0082  
             __end_of_I2C_Master_Start 2810                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 27EE                             _INTCONbits 000FF2  
                         ??_updateMenu 0043                               isdigit@c 0082  
                             intlevel2 0000                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                          ?_MAGNETISM_in 0080  
                  __end_of_stopSignals 274A              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 002A              ??_change_state_to_menu_22 002A  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 009F  
                             printf@cp 00A1                     __end_of_updateMenu 122E  
              __end_of_I2C_Master_Init 217C                __end_of_I2C_Master_Read 25BC  
              __end_of_I2C_Master_Wait 2774                __end_of_I2C_Master_Stop 2808  
                          lcdInst@data 0082                          printRTC@F3177 00F0  
                  __end_ofi2_lcdNibble 21D2                        ?_printSortTimer 0001  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                      ___lwmod@divisor 0089                      _f_can_distributed 006F  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 2272                        ___lwmod@counter 008B  
             moveServoBlock@myPosition 0001                            _servoSwitch 0075  
                     _sortTimerCounter 0077                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00EF  
                       ??_MAGNETISM_in 0082                          dispLogs@myLog 0001  
                   i2printRTC@INT_time 002D  
