

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Feb 17 16:45:40 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    87                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    88                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    89  0000                     
    90                           ; Version 1.40
    91                           ; Generated 01/12/2016 GMT
    92                           ; 
    93                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    94                           ; All rights reserved.
    95                           ; 
    96                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    97                           ; 
    98                           ; Redistribution and use in source and binary forms, with or without modification, are
    99                           ; permitted provided that the following conditions are met:
   100                           ; 
   101                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   102                           ;        conditions and the following disclaimer.
   103                           ; 
   104                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   105                           ;        of conditions and the following disclaimer in the documentation and/or other
   106                           ;        materials provided with the distribution.
   107                           ; 
   108                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   109                           ;        software without specific prior written permission.
   110                           ; 
   111                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   112                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   113                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   114                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   115                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   116                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   117                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   118                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   119                           ; 
   120                           ; 
   121                           ; Code-generator required, PIC18F4620 Definitions
   122                           ; 
   123                           ; SFR Addresses
   124  0000                     
   125                           	psect	idataBANK0
   126  0028C2                     __pidataBANK0:
   127                           	opt stack 0
   128                           
   129                           ;initializer for printRTC@F3177
   130  0028C2  4D                 	db	77
   131  0028C3  4D                 	db	77
   132  0028C4  4D                 	db	77
   133  0028C5  00                 	db	0
   134                           
   135                           ;initializer for _f_ID_receive
   136  0028C6  0001               	dw	1
   137                           
   138                           ;initializer for _first
   139  0028C8  0001               	dw	1
   140                           
   141                           	psect	mediumconst
   142  00FDB8                     __pmediumconst:
   143                           	opt stack 0
   144  00FDB8  00                 	db	0
   145  00FDB9                     _keys:
   146                           	opt stack 0
   147  00FDB9  31                 	db	49
   148  00FDBA  32                 	db	50
   149  00FDBB  33                 	db	51
   150  00FDBC  41                 	db	65
   151  00FDBD  34                 	db	52
   152  00FDBE  35                 	db	53
   153  00FDBF  36                 	db	54
   154  00FDC0  42                 	db	66
   155  00FDC1  37                 	db	55
   156  00FDC2  38                 	db	56
   157  00FDC3  39                 	db	57
   158  00FDC4  43                 	db	67
   159  00FDC5  2A                 	db	42
   160  00FDC6  30                 	db	48
   161  00FDC7  23                 	db	35
   162  00FDC8  44                 	db	68
   163  00FDC9  00                 	db	0
   164  00FDCA                     __end_of_keys:
   165                           	opt stack 0
   166  00FDCA                     _dpowers:
   167                           	opt stack 0
   168  00FDCA  0001               	dw	1
   169  00FDCC  000A               	dw	10
   170  00FDCE  0064               	dw	100
   171  00FDD0  03E8               	dw	1000
   172  00FDD2  2710               	dw	10000
   173  00FDD4                     __end_of_dpowers:
   174                           	opt stack 0
   175  0000                     _ADCON0	set	4034
   176  0000                     _ADCON0bits	set	4034
   177  0000                     _ADCON1	set	4033
   178  0000                     _CMCONbits	set	4020
   179  0000                     _CVRCON	set	4021
   180  0000                     _INTCONbits	set	4082
   181  0000                     _LATA	set	3977
   182  0000                     _LATAbits	set	3977
   183  0000                     _LATB	set	3978
   184  0000                     _LATC	set	3979
   185  0000                     _LATD	set	3980
   186  0000                     _LATDbits	set	3980
   187  0000                     _LATE	set	3981
   188  0000                     _OSCCON	set	4051
   189  0000                     _OSCTUNEbits	set	3995
   190  0000                     _PORTAbits	set	3968
   191  0000                     _PORTB	set	3969
   192  0000                     _PORTBbits	set	3969
   193  0000                     _SSPADD	set	4040
   194  0000                     _SSPBUF	set	4041
   195  0000                     _SSPCON1	set	4038
   196  0000                     _SSPCON2	set	4037
   197  0000                     _SSPSTAT	set	4039
   198  0000                     _T0CON	set	4053
   199  0000                     _T1CON	set	4045
   200  0000                     _TMR0H	set	4055
   201  0000                     _TMR0L	set	4054
   202  0000                     _TRISA	set	3986
   203  0000                     _TRISB	set	3987
   204  0000                     _TRISC	set	3988
   205  0000                     _TRISD	set	3989
   206  0000                     _TRISE	set	3990
   207  0000                     _ACKDT	set	32301
   208  0000                     _ACKEN	set	32300
   209  0000                     _ADFM	set	32263
   210  0000                     _ADON	set	32272
   211  0000                     _INT1IE	set	32643
   212  0000                     _INT1IF	set	32640
   213  0000                     _PEN	set	32298
   214  0000                     _RCEN	set	32299
   215  0000                     _RSEN	set	32297
   216  0000                     _SEN	set	32296
   217  0000                     _TMR0IE	set	32661
   218  0000                     _TMR0IF	set	32658
   219  0000                     _TMR1IE	set	31976
   220  0000                     _TRISC3	set	31907
   221  0000                     _TRISC4	set	31908
   222  00FDD4                     STR_48:
   223  00FDD4  25                 	db	37
   224  00FDD5  30                 	db	48	;'0'
   225  00FDD6  32                 	db	50	;'2'
   226  00FDD7  64                 	db	100	;'d'
   227  00FDD8  25                 	db	37
   228  00FDD9  73                 	db	115	;'s'
   229  00FDDA  20                 	db	32
   230  00FDDB  7C                 	db	124
   231  00FDDC  20                 	db	32
   232  00FDDD  25                 	db	37
   233  00FDDE  30                 	db	48	;'0'
   234  00FDDF  32                 	db	50	;'2'
   235  00FDE0  64                 	db	100	;'d'
   236  00FDE1  3A                 	db	58	;':'
   237  00FDE2  25                 	db	37
   238  00FDE3  30                 	db	48	;'0'
   239  00FDE4  32                 	db	50	;'2'
   240  00FDE5  64                 	db	100	;'d'
   241  00FDE6  3A                 	db	58	;':'
   242  00FDE7  25                 	db	37
   243  00FDE8  30                 	db	48	;'0'
   244  00FDE9  32                 	db	50	;'2'
   245  00FDEA  64                 	db	100	;'d'
   246  00FDEB  00                 	db	0
   247  00FDEC                     STR_2:
   248  00FDEC  54                 	db	84	;'T'
   249  00FDED  69                 	db	105	;'i'
   250  00FDEE  6D                 	db	109	;'m'
   251  00FDEF  65                 	db	101	;'e'
   252  00FDF0  3A                 	db	58	;':'
   253  00FDF1  20                 	db	32
   254  00FDF2  25                 	db	37
   255  00FDF3  30                 	db	48	;'0'
   256  00FDF4  32                 	db	50	;'2'
   257  00FDF5  64                 	db	100	;'d'
   258  00FDF6  3A                 	db	58	;':'
   259  00FDF7  25                 	db	37
   260  00FDF8  30                 	db	48	;'0'
   261  00FDF9  32                 	db	50	;'2'
   262  00FDFA  64                 	db	100	;'d'
   263  00FDFB  3A                 	db	58	;':'
   264  00FDFC  25                 	db	37
   265  00FDFD  30                 	db	48	;'0'
   266  00FDFE  32                 	db	50	;'2'
   267  00FDFF  64                 	db	100	;'d'
   268  00FE00  00                 	db	0
   269  00FE01                     STR_3:
   270  00FE01  2D                 	db	45
   271  00FE02  2D                 	db	45
   272  00FE03  20                 	db	32
   273  00FE04  4C                 	db	76	;'L'
   274  00FE05  6F                 	db	111	;'o'
   275  00FE06  67                 	db	103	;'g'
   276  00FE07  20                 	db	32
   277  00FE08  25                 	db	37
   278  00FE09  32                 	db	50	;'2'
   279  00FE0A  64                 	db	100	;'d'
   280  00FE0B  20                 	db	32
   281  00FE0C  68                 	db	104	;'h'
   282  00FE0D  65                 	db	101	;'e'
   283  00FE0E  72                 	db	114	;'r'
   284  00FE0F  65                 	db	101	;'e'
   285  00FE10  2D                 	db	45
   286  00FE11  2D                 	db	45
   287  00FE12  00                 	db	0
   288  00FE13                     STR_8:
   289  00FE13  25                 	db	37
   290  00FE14  64                 	db	100	;'d'
   291  00FE15  20                 	db	32
   292  00FE16  6D                 	db	109	;'m'
   293  00FE17  69                 	db	105	;'i'
   294  00FE18  6E                 	db	110	;'n'
   295  00FE19  28                 	db	40
   296  00FE1A  73                 	db	115	;'s'
   297  00FE1B  29                 	db	41
   298  00FE1C  20                 	db	32
   299  00FE1D  25                 	db	37
   300  00FE1E  64                 	db	100	;'d'
   301  00FE1F  20                 	db	32
   302  00FE20  73                 	db	115	;'s'
   303  00FE21  65                 	db	101	;'e'
   304  00FE22  63                 	db	99	;'c'
   305  00FE23  73                 	db	115	;'s'
   306  00FE24  00                 	db	0
   307  00FE25                     STR_26:
   308  00FE25  4C                 	db	76	;'L'
   309  00FE26  4F                 	db	79	;'O'
   310  00FE27  47                 	db	71	;'G'
   311  00FE28  20                 	db	32
   312  00FE29  31                 	db	49	;'1'
   313  00FE2A  20                 	db	32
   314  00FE2B  20                 	db	32
   315  00FE2C  20                 	db	32
   316  00FE2D  20                 	db	32
   317  00FE2E  20                 	db	32
   318  00FE2F  20                 	db	32
   319  00FE30  20                 	db	32
   320  00FE31  20                 	db	32
   321  00FE32  20                 	db	32
   322  00FE33  20                 	db	32
   323  00FE34  20                 	db	32
   324  00FE35  00                 	db	0
   325  00FE36                     STR_25:
   326  00FE36  4C                 	db	76	;'L'
   327  00FE37  4F                 	db	79	;'O'
   328  00FE38  47                 	db	71	;'G'
   329  00FE39  20                 	db	32
   330  00FE3A  32                 	db	50	;'2'
   331  00FE3B  20                 	db	32
   332  00FE3C  20                 	db	32
   333  00FE3D  20                 	db	32
   334  00FE3E  20                 	db	32
   335  00FE3F  20                 	db	32
   336  00FE40  20                 	db	32
   337  00FE41  20                 	db	32
   338  00FE42  20                 	db	32
   339  00FE43  20                 	db	32
   340  00FE44  20                 	db	32
   341  00FE45  20                 	db	32
   342  00FE46  00                 	db	0
   343  00FE47                     STR_29:
   344  00FE47  4C                 	db	76	;'L'
   345  00FE48  4F                 	db	79	;'O'
   346  00FE49  47                 	db	71	;'G'
   347  00FE4A  20                 	db	32
   348  00FE4B  33                 	db	51	;'3'
   349  00FE4C  20                 	db	32
   350  00FE4D  20                 	db	32
   351  00FE4E  20                 	db	32
   352  00FE4F  20                 	db	32
   353  00FE50  20                 	db	32
   354  00FE51  20                 	db	32
   355  00FE52  20                 	db	32
   356  00FE53  20                 	db	32
   357  00FE54  20                 	db	32
   358  00FE55  20                 	db	32
   359  00FE56  20                 	db	32
   360  00FE57  00                 	db	0
   361  00FE58                     STR_33:
   362  00FE58  4C                 	db	76	;'L'
   363  00FE59  4F                 	db	79	;'O'
   364  00FE5A  47                 	db	71	;'G'
   365  00FE5B  20                 	db	32
   366  00FE5C  34                 	db	52	;'4'
   367  00FE5D  20                 	db	32
   368  00FE5E  20                 	db	32
   369  00FE5F  20                 	db	32
   370  00FE60  20                 	db	32
   371  00FE61  20                 	db	32
   372  00FE62  20                 	db	32
   373  00FE63  20                 	db	32
   374  00FE64  20                 	db	32
   375  00FE65  20                 	db	32
   376  00FE66  20                 	db	32
   377  00FE67  20                 	db	32
   378  00FE68  00                 	db	0
   379  00FE69                     STR_21:
   380  00FE69  33                 	db	51	;'3'
   381  00FE6A  2E                 	db	46
   382  00FE6B  20                 	db	32
   383  00FE6C  4C                 	db	76	;'L'
   384  00FE6D  4F                 	db	79	;'O'
   385  00FE6E  47                 	db	71	;'G'
   386  00FE6F  53                 	db	83	;'S'
   387  00FE70  20                 	db	32
   388  00FE71  20                 	db	32
   389  00FE72  20                 	db	32
   390  00FE73  20                 	db	32
   391  00FE74  20                 	db	32
   392  00FE75  20                 	db	32
   393  00FE76  20                 	db	32
   394  00FE77  20                 	db	32
   395  00FE78  20                 	db	32
   396  00FE79  00                 	db	0
   397  00FE7A                     STR_17:
   398  00FE7A  32                 	db	50	;'2'
   399  00FE7B  2E                 	db	46
   400  00FE7C  20                 	db	32
   401  00FE7D  53                 	db	83	;'S'
   402  00FE7E  4F                 	db	79	;'O'
   403  00FE7F  52                 	db	82	;'R'
   404  00FE80  54                 	db	84	;'T'
   405  00FE81  20                 	db	32
   406  00FE82  20                 	db	32
   407  00FE83  20                 	db	32
   408  00FE84  20                 	db	32
   409  00FE85  20                 	db	32
   410  00FE86  20                 	db	32
   411  00FE87  20                 	db	32
   412  00FE88  20                 	db	32
   413  00FE89  20                 	db	32
   414  00FE8A  00                 	db	0
   415  00FE8B                     STR_18:
   416  00FE8B  31                 	db	49	;'1'
   417  00FE8C  2E                 	db	46
   418  00FE8D  20                 	db	32
   419  00FE8E  44                 	db	68	;'D'
   420  00FE8F  41                 	db	65	;'A'
   421  00FE90  54                 	db	84	;'T'
   422  00FE91  45                 	db	69	;'E'
   423  00FE92  2F                 	db	47
   424  00FE93  54                 	db	84	;'T'
   425  00FE94  49                 	db	73	;'I'
   426  00FE95  4D                 	db	77	;'M'
   427  00FE96  45                 	db	69	;'E'
   428  00FE97  20                 	db	32
   429  00FE98  20                 	db	32
   430  00FE99  20                 	db	32
   431  00FE9A  20                 	db	32
   432  00FE9B  00                 	db	0
   433  00FE9C                     STR_9:
   434  00FE9C  20                 	db	32
   435  00FE9D  2D                 	db	45
   436  00FE9E  2D                 	db	45
   437  00FE9F  20                 	db	32
   438  00FEA0  50                 	db	80	;'P'
   439  00FEA1  6F                 	db	111	;'o'
   440  00FEA2  70                 	db	112	;'p'
   441  00FEA3  20                 	db	32
   442  00FEA4  20                 	db	32
   443  00FEA5  63                 	db	99	;'c'
   444  00FEA6  61                 	db	97	;'a'
   445  00FEA7  6E                 	db	110	;'n'
   446  00FEA8  20                 	db	32
   447  00FEA9  2D                 	db	45
   448  00FEAA  2D                 	db	45
   449  00FEAB  20                 	db	32
   450  00FEAC  00                 	db	0
   451  00FEAD                     STR_11:
   452  00FEAD  20                 	db	32
   453  00FEAE  2D                 	db	45
   454  00FEAF  2D                 	db	45
   455  00FEB0  20                 	db	32
   456  00FEB1  53                 	db	83	;'S'
   457  00FEB2  6F                 	db	111	;'o'
   458  00FEB3  75                 	db	117	;'u'
   459  00FEB4  70                 	db	112	;'p'
   460  00FEB5  20                 	db	32
   461  00FEB6  63                 	db	99	;'c'
   462  00FEB7  61                 	db	97	;'a'
   463  00FEB8  6E                 	db	110	;'n'
   464  00FEB9  20                 	db	32
   465  00FEBA  2D                 	db	45
   466  00FEBB  2D                 	db	45
   467  00FEBC  20                 	db	32
   468  00FEBD  00                 	db	0
   469  00FEBE                     STR_13:
   470  00FEBE  2D                 	db	45
   471  00FEBF  2D                 	db	45
   472  00FEC0  20                 	db	32
   473  00FEC1  54                 	db	84	;'T'
   474  00FEC2  6F                 	db	111	;'o'
   475  00FEC3  74                 	db	116	;'t'
   476  00FEC4  61                 	db	97	;'a'
   477  00FEC5  6C                 	db	108	;'l'
   478  00FEC6  20                 	db	32
   479  00FEC7  63                 	db	99	;'c'
   480  00FEC8  61                 	db	97	;'a'
   481  00FEC9  6E                 	db	110	;'n'
   482  00FECA  73                 	db	115	;'s'
   483  00FECB  20                 	db	32
   484  00FECC  2D                 	db	45
   485  00FECD  2D                 	db	45
   486  00FECE  00                 	db	0
   487  00FECF                     STR_10:
   488  00FECF  4E                 	db	78	;'N'
   489  00FED0  6F                 	db	111	;'o'
   490  00FED1  20                 	db	32
   491  00FED2  74                 	db	116	;'t'
   492  00FED3  61                 	db	97	;'a'
   493  00FED4  62                 	db	98	;'b'
   494  00FED5  3A                 	db	58	;':'
   495  00FED6  20                 	db	32
   496  00FED7  39                 	db	57	;'9'
   497  00FED8  7C                 	db	124
   498  00FED9  54                 	db	84	;'T'
   499  00FEDA  61                 	db	97	;'a'
   500  00FEDB  62                 	db	98	;'b'
   501  00FEDC  3A                 	db	58	;':'
   502  00FEDD  20                 	db	32
   503  00FEDE  31                 	db	49	;'1'
   504  00FEDF  00                 	db	0
   505  00FEE0                     STR_12:
   506  00FEE0  4E                 	db	78	;'N'
   507  00FEE1  6F                 	db	111	;'o'
   508  00FEE2  20                 	db	32
   509  00FEE3  6C                 	db	108	;'l'
   510  00FEE4  62                 	db	98	;'b'
   511  00FEE5  6C                 	db	108	;'l'
   512  00FEE6  3A                 	db	58	;':'
   513  00FEE7  20                 	db	32
   514  00FEE8  31                 	db	49	;'1'
   515  00FEE9  7C                 	db	124
   516  00FEEA  6C                 	db	108	;'l'
   517  00FEEB  62                 	db	98	;'b'
   518  00FEEC  6C                 	db	108	;'l'
   519  00FEED  3A                 	db	58	;':'
   520  00FEEE  20                 	db	32
   521  00FEEF  31                 	db	49	;'1'
   522  00FEF0  00                 	db	0
   523  00FEF1                     STR_6:
   524  00FEF1  30                 	db	48	;'0'
   525  00FEF2  36                 	db	54	;'6'
   526  00FEF3  46                 	db	70	;'F'
   527  00FEF4  65                 	db	101	;'e'
   528  00FEF5  62                 	db	98	;'b'
   529  00FEF6  20                 	db	32
   530  00FEF7  7C                 	db	124
   531  00FEF8  20                 	db	32
   532  00FEF9  30                 	db	48	;'0'
   533  00FEFA  31                 	db	49	;'1'
   534  00FEFB  3A                 	db	58	;':'
   535  00FEFC  30                 	db	48	;'0'
   536  00FEFD  38                 	db	56	;'8'
   537  00FEFE  3A                 	db	58	;':'
   538  00FEFF  35                 	db	53	;'5'
   539  00FF00  36                 	db	54	;'6'
   540  00FF01  00                 	db	0
   541  00FF02                     STR_24:
   542  00FF02  4C                 	db	76	;'L'
   543  00FF03  4F                 	db	79	;'O'
   544  00FF04  47                 	db	71	;'G'
   545  00FF05  20                 	db	32
   546  00FF06  31                 	db	49	;'1'
   547  00FF07  20                 	db	32
   548  00FF08  20                 	db	32
   549  00FF09  20                 	db	32
   550  00FF0A  20                 	db	32
   551  00FF0B  20                 	db	32
   552  00FF0C  20                 	db	32
   553  00FF0D  20                 	db	32
   554  00FF0E  20                 	db	32
   555  00FF0F  20                 	db	32
   556  00FF10  20                 	db	32
   557  00FF11  3C                 	db	60	;'<'
   558  00FF12  00                 	db	0
   559  00FF13                     STR_27:
   560  00FF13  4C                 	db	76	;'L'
   561  00FF14  4F                 	db	79	;'O'
   562  00FF15  47                 	db	71	;'G'
   563  00FF16  20                 	db	32
   564  00FF17  32                 	db	50	;'2'
   565  00FF18  20                 	db	32
   566  00FF19  20                 	db	32
   567  00FF1A  20                 	db	32
   568  00FF1B  20                 	db	32
   569  00FF1C  20                 	db	32
   570  00FF1D  20                 	db	32
   571  00FF1E  20                 	db	32
   572  00FF1F  20                 	db	32
   573  00FF20  20                 	db	32
   574  00FF21  20                 	db	32
   575  00FF22  3C                 	db	60	;'<'
   576  00FF23  00                 	db	0
   577  00FF24                     STR_31:
   578  00FF24  4C                 	db	76	;'L'
   579  00FF25  4F                 	db	79	;'O'
   580  00FF26  47                 	db	71	;'G'
   581  00FF27  20                 	db	32
   582  00FF28  33                 	db	51	;'3'
   583  00FF29  20                 	db	32
   584  00FF2A  20                 	db	32
   585  00FF2B  20                 	db	32
   586  00FF2C  20                 	db	32
   587  00FF2D  20                 	db	32
   588  00FF2E  20                 	db	32
   589  00FF2F  20                 	db	32
   590  00FF30  20                 	db	32
   591  00FF31  20                 	db	32
   592  00FF32  20                 	db	32
   593  00FF33  3C                 	db	60	;'<'
   594  00FF34  00                 	db	0
   595  00FF35                     STR_35:
   596  00FF35  4C                 	db	76	;'L'
   597  00FF36  4F                 	db	79	;'O'
   598  00FF37  47                 	db	71	;'G'
   599  00FF38  20                 	db	32
   600  00FF39  34                 	db	52	;'4'
   601  00FF3A  20                 	db	32
   602  00FF3B  20                 	db	32
   603  00FF3C  20                 	db	32
   604  00FF3D  20                 	db	32
   605  00FF3E  20                 	db	32
   606  00FF3F  20                 	db	32
   607  00FF40  20                 	db	32
   608  00FF41  20                 	db	32
   609  00FF42  20                 	db	32
   610  00FF43  20                 	db	32
   611  00FF44  3C                 	db	60	;'<'
   612  00FF45  00                 	db	0
   613  00FF46                     STR_23:
   614  00FF46  33                 	db	51	;'3'
   615  00FF47  2E                 	db	46
   616  00FF48  20                 	db	32
   617  00FF49  4C                 	db	76	;'L'
   618  00FF4A  4F                 	db	79	;'O'
   619  00FF4B  47                 	db	71	;'G'
   620  00FF4C  53                 	db	83	;'S'
   621  00FF4D  20                 	db	32
   622  00FF4E  20                 	db	32
   623  00FF4F  20                 	db	32
   624  00FF50  20                 	db	32
   625  00FF51  20                 	db	32
   626  00FF52  20                 	db	32
   627  00FF53  20                 	db	32
   628  00FF54  20                 	db	32
   629  00FF55  3C                 	db	60	;'<'
   630  00FF56  00                 	db	0
   631  00FF57                     STR_19:
   632  00FF57  32                 	db	50	;'2'
   633  00FF58  2E                 	db	46
   634  00FF59  20                 	db	32
   635  00FF5A  53                 	db	83	;'S'
   636  00FF5B  4F                 	db	79	;'O'
   637  00FF5C  52                 	db	82	;'R'
   638  00FF5D  54                 	db	84	;'T'
   639  00FF5E  20                 	db	32
   640  00FF5F  20                 	db	32
   641  00FF60  20                 	db	32
   642  00FF61  20                 	db	32
   643  00FF62  20                 	db	32
   644  00FF63  20                 	db	32
   645  00FF64  20                 	db	32
   646  00FF65  20                 	db	32
   647  00FF66  3C                 	db	60	;'<'
   648  00FF67  00                 	db	0
   649  00FF68                     STR_16:
   650  00FF68  31                 	db	49	;'1'
   651  00FF69  2E                 	db	46
   652  00FF6A  20                 	db	32
   653  00FF6B  44                 	db	68	;'D'
   654  00FF6C  41                 	db	65	;'A'
   655  00FF6D  54                 	db	84	;'T'
   656  00FF6E  45                 	db	69	;'E'
   657  00FF6F  2F                 	db	47
   658  00FF70  54                 	db	84	;'T'
   659  00FF71  49                 	db	73	;'I'
   660  00FF72  4D                 	db	77	;'M'
   661  00FF73  45                 	db	69	;'E'
   662  00FF74  20                 	db	32
   663  00FF75  20                 	db	32
   664  00FF76  20                 	db	32
   665  00FF77  3C                 	db	60	;'<'
   666  00FF78  00                 	db	0
   667  00FF79                     STR_4:
   668  00FF79  50                 	db	80	;'P'
   669  00FF7A  61                 	db	97	;'a'
   670  00FF7B  75                 	db	117	;'u'
   671  00FF7C  73                 	db	115	;'s'
   672  00FF7D  65                 	db	101	;'e'
   673  00FF7E  3A                 	db	58	;':'
   674  00FF7F  3C                 	db	60	;'<'
   675  00FF80  20                 	db	32
   676  00FF81  7C                 	db	124
   677  00FF82  20                 	db	32
   678  00FF83  42                 	db	66	;'B'
   679  00FF84  61                 	db	97	;'a'
   680  00FF85  63                 	db	99	;'c'
   681  00FF86  6B                 	db	107	;'k'
   682  00FF87  3A                 	db	58	;':'
   683  00FF88  3E                 	db	62	;'>'
   684  00FF89  00                 	db	0
   685  00FF8A                     STR_15:
   686  00FF8A  50                 	db	80	;'P'
   687  00FF8B  55                 	db	85	;'U'
   688  00FF8C  53                 	db	83	;'S'
   689  00FF8D  48                 	db	72	;'H'
   690  00FF8E  20                 	db	32
   691  00FF8F  54                 	db	84	;'T'
   692  00FF90  4F                 	db	79	;'O'
   693  00FF91  20                 	db	32
   694  00FF92  43                 	db	67	;'C'
   695  00FF93  4F                 	db	79	;'O'
   696  00FF94  4E                 	db	78	;'N'
   697  00FF95  54                 	db	84	;'T'
   698  00FF96  49                 	db	73	;'I'
   699  00FF97  4E                 	db	78	;'N'
   700  00FF98  55                 	db	85	;'U'
   701  00FF99  45                 	db	69	;'E'
   702  00FF9A  00                 	db	0
   703  00FF9B                     STR_1:
   704  00FF9B  53                 	db	83	;'S'
   705  00FF9C  6F                 	db	111	;'o'
   706  00FF9D  72                 	db	114	;'r'
   707  00FF9E  74                 	db	116	;'t'
   708  00FF9F  20                 	db	32
   709  00FFA0  63                 	db	99	;'c'
   710  00FFA1  6F                 	db	111	;'o'
   711  00FFA2  6D                 	db	109	;'m'
   712  00FFA3  70                 	db	112	;'p'
   713  00FFA4  6C                 	db	108	;'l'
   714  00FFA5  65                 	db	101	;'e'
   715  00FFA6  74                 	db	116	;'t'
   716  00FFA7  65                 	db	101	;'e'
   717  00FFA8  00                 	db	0
   718  00FFA9                     STR_49:
   719  00FFA9  53                 	db	83	;'S'
   720  00FFAA  6F                 	db	111	;'o'
   721  00FFAB  72                 	db	114	;'r'
   722  00FFAC  74                 	db	116	;'t'
   723  00FFAD  69                 	db	105	;'i'
   724  00FFAE  6E                 	db	110	;'n'
   725  00FFAF  67                 	db	103	;'g'
   726  00FFB0  2E                 	db	46
   727  00FFB1  2E                 	db	46
   728  00FFB2  2E                 	db	46
   729  00FFB3  00                 	db	0
   730  00FFB4                     STR_7:
   731  00FFB4  44                 	db	68	;'D'
   732  00FFB5  75                 	db	117	;'u'
   733  00FFB6  72                 	db	114	;'r'
   734  00FFB7  61                 	db	97	;'a'
   735  00FFB8  74                 	db	116	;'t'
   736  00FFB9  69                 	db	105	;'i'
   737  00FFBA  6F                 	db	111	;'o'
   738  00FFBB  6E                 	db	110	;'n'
   739  00FFBC  3A                 	db	58	;':'
   740  00FFBD  00                 	db	0
   741  00FFBE                     STR_51:
   742  00FFBE  28                 	db	40
   743  00FFBF  6E                 	db	110	;'n'
   744  00FFC0  75                 	db	117	;'u'
   745  00FFC1  6C                 	db	108	;'l'
   746  00FFC2  6C                 	db	108	;'l'
   747  00FFC3  29                 	db	41
   748  00FFC4  00                 	db	0
   749  00FFC5                     STR_5:
   750  00FFC5  53                 	db	83	;'S'
   751  00FFC6  74                 	db	116	;'t'
   752  00FFC7  61                 	db	97	;'a'
   753  00FFC8  72                 	db	114	;'r'
   754  00FFC9  74                 	db	116	;'t'
   755  00FFCA  3A                 	db	58	;':'
   756  00FFCB  00                 	db	0
   757  00FFCC                     STR_37:
   758  00FFCC  46                 	db	70	;'F'
   759  00FFCD  65                 	db	101	;'e'
   760  00FFCE  62                 	db	98	;'b'
   761  00FFCF  00                 	db	0
   762  00FFD0                     STR_47:
   763  00FFD0  44                 	db	68	;'D'
   764  00FFD1  65                 	db	101	;'e'
   765  00FFD2  63                 	db	99	;'c'
   766  00FFD3  00                 	db	0
   767  00FFD4                     STR_43:
   768  00FFD4  41                 	db	65	;'A'
   769  00FFD5  75                 	db	117	;'u'
   770  00FFD6  67                 	db	103	;'g'
   771  00FFD7  00                 	db	0
   772  00FFD8                     STR_42:
   773  00FFD8  4A                 	db	74	;'J'
   774  00FFD9  75                 	db	117	;'u'
   775  00FFDA  6C                 	db	108	;'l'
   776  00FFDB  00                 	db	0
   777  00FFDC                     STR_36:
   778  00FFDC  4A                 	db	74	;'J'
   779  00FFDD  61                 	db	97	;'a'
   780  00FFDE  6E                 	db	110	;'n'
   781  00FFDF  00                 	db	0
   782  00FFE0                     STR_41:
   783  00FFE0  4A                 	db	74	;'J'
   784  00FFE1  75                 	db	117	;'u'
   785  00FFE2  6E                 	db	110	;'n'
   786  00FFE3  00                 	db	0
   787  00FFE4                     STR_44:
   788  00FFE4  53                 	db	83	;'S'
   789  00FFE5  65                 	db	101	;'e'
   790  00FFE6  70                 	db	112	;'p'
   791  00FFE7  00                 	db	0
   792  00FFE8                     STR_38:
   793  00FFE8  4D                 	db	77	;'M'
   794  00FFE9  61                 	db	97	;'a'
   795  00FFEA  72                 	db	114	;'r'
   796  00FFEB  00                 	db	0
   797  00FFEC                     STR_39:
   798  00FFEC  41                 	db	65	;'A'
   799  00FFED  70                 	db	112	;'p'
   800  00FFEE  72                 	db	114	;'r'
   801  00FFEF  00                 	db	0
   802  00FFF0                     STR_45:
   803  00FFF0  4F                 	db	79	;'O'
   804  00FFF1  63                 	db	99	;'c'
   805  00FFF2  74                 	db	116	;'t'
   806  00FFF3  00                 	db	0
   807  00FFF4                     STR_46:
   808  00FFF4  4E                 	db	78	;'N'
   809  00FFF5  6F                 	db	111	;'o'
   810  00FFF6  76                 	db	118	;'v'
   811  00FFF7  00                 	db	0
   812  00FFF8                     STR_40:
   813  00FFF8  4D                 	db	77	;'M'
   814  00FFF9  61                 	db	97	;'a'
   815  00FFFA  79                 	db	121	;'y'
   816  00FFFB  00                 	db	0
   817  00FFFC                     STR_14:
   818  00FFFC  31                 	db	49	;'1'
   819  00FFFD  32                 	db	50	;'2'
   820  00FFFE  00                 	db	0
   821  0000                     
   822                           ; #config settings
   823  00FFFF  00                 	db	0	; dummy byte at the end
   824  0000                     
   825                           	psect	cinit
   826  0022A8                     __pcinit:
   827                           	opt stack 0
   828  0022A8                     start_initialization:
   829                           	opt stack 0
   830  0022A8                     __initialization:
   831                           	opt stack 0
   832                           
   833                           ; Initialize objects allocated to BANK0 (8 bytes)
   834                           ; load TBLPTR registers with __pidataBANK0
   835  0022A8  0EC2               	movlw	low __pidataBANK0
   836  0022AA  6EF6               	movwf	tblptrl,c
   837  0022AC  0E28               	movlw	high __pidataBANK0
   838  0022AE  6EF7               	movwf	tblptrh,c
   839  0022B0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   840  0022B2  6EF8               	movwf	tblptru,c
   841  0022B4  EE00  F0F5         	lfsr	0,__pdataBANK0
   842  0022B8  EE10 F008          	lfsr	1,8
   843  0022BC                     copy_data0:
   844  0022BC  0009               	tblrd		*+
   845  0022BE  CFF5 FFEE          	movff	tablat,postinc0
   846  0022C2  50E5               	movf	postdec1,w,c
   847  0022C4  50E1               	movf	fsr1l,w,c
   848  0022C6  E1FA               	bnz	copy_data0
   849                           
   850                           ; Clear objects allocated to BANK1 (14 bytes)
   851  0022C8  EE01  F000         	lfsr	0,__pbssBANK1
   852  0022CC  0E0E               	movlw	14
   853  0022CE                     clear_0:
   854  0022CE  6AEE               	clrf	postinc0,c
   855  0022D0  06E8               	decf	wreg,f,c
   856  0022D2  E1FD               	bnz	clear_0
   857                           
   858                           ; Clear objects allocated to BANK0 (33 bytes)
   859  0022D4  EE00  F0D4         	lfsr	0,__pbssBANK0
   860  0022D8  0E21               	movlw	33
   861  0022DA                     clear_1:
   862  0022DA  6AEE               	clrf	postinc0,c
   863  0022DC  06E8               	decf	wreg,f,c
   864  0022DE  E1FD               	bnz	clear_1
   865                           
   866                           ; Clear objects allocated to COMRAM (30 bytes)
   867  0022E0  EE00  F05B         	lfsr	0,__pbssCOMRAM
   868  0022E4  0E1E               	movlw	30
   869  0022E6                     clear_2:
   870  0022E6  6AEE               	clrf	postinc0,c
   871  0022E8  06E8               	decf	wreg,f,c
   872  0022EA  E1FD               	bnz	clear_2
   873  0022EC                     end_of_initialization:
   874                           	opt stack 0
   875  0022EC                     __end_of__initialization:
   876                           	opt stack 0
   877  0022EC  9079               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   878  0022EE  9279               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   879  0022F0  0100               	movlb	0
   880  0022F2  EF7C  F00F         	goto	_main	;jump to C main() function
   881                           tblptru	equ	0xFF8
   882                           tblptrh	equ	0xFF7
   883                           tblptrl	equ	0xFF6
   884                           tablat	equ	0xFF5
   885                           postinc0	equ	0xFEE
   886                           wreg	equ	0xFE8
   887                           postdec1	equ	0xFE5
   888                           fsr1l	equ	0xFE1
   889                           
   890                           	psect	bssCOMRAM
   891  00005B                     __pbssCOMRAM:
   892                           	opt stack 0
   893  00005B                     _PWMTimerCounter:
   894                           	opt stack 0
   895  00005B                     	ds	2
   896  00005D                     _UIenabled:
   897                           	opt stack 0
   898  00005D                     	ds	2
   899  00005F                     _back:
   900                           	opt stack 0
   901  00005F                     	ds	2
   902  000061                     _count_can_no_lab:
   903                           	opt stack 0
   904  000061                     	ds	2
   905  000063                     _count_can_w_lab:
   906                           	opt stack 0
   907  000063                     	ds	2
   908  000065                     _count_pop_no_tab:
   909                           	opt stack 0
   910  000065                     	ds	2
   911  000067                     _count_pop_w_tab:
   912                           	opt stack 0
   913  000067                     	ds	2
   914  000069                     _down:
   915                           	opt stack 0
   916  000069                     	ds	2
   917  00006B                     _enter:
   918                           	opt stack 0
   919  00006B                     	ds	2
   920  00006D                     _firstboot:
   921                           	opt stack 0
   922  00006D                     	ds	2
   923  00006F                     _servoSelectFlag:
   924                           	opt stack 0
   925  00006F                     	ds	2
   926  000071                     _sortTimerCounter:
   927                           	opt stack 0
   928  000071                     	ds	2
   929  000073                     _up:
   930                           	opt stack 0
   931  000073                     	ds	2
   932  000075                     _was_low:
   933                           	opt stack 0
   934  000075                     	ds	2
   935  000077                     _block:
   936                           	opt stack 0
   937  000077                     	ds	1
   938  000078                     _input:
   939                           	opt stack 0
   940  000078                     	ds	1
   941                           tblptru	equ	0xFF8
   942                           tblptrh	equ	0xFF7
   943                           tblptrl	equ	0xFF6
   944                           tablat	equ	0xFF5
   945                           postinc0	equ	0xFEE
   946                           wreg	equ	0xFE8
   947                           postdec1	equ	0xFE5
   948                           fsr1l	equ	0xFE1
   949                           
   950                           	psect	bssBANK0
   951  0000D4                     __pbssBANK0:
   952                           	opt stack 0
   953  0000D4                     _time:
   954                           	opt stack 0
   955  0000D4                     	ds	7
   956  0000DB                     _IR_in:
   957                           	opt stack 0
   958  0000DB                     	ds	2
   959  0000DD                     _beamTimerCounter:
   960                           	opt stack 0
   961  0000DD                     	ds	2
   962  0000DF                     _count_total:
   963                           	opt stack 0
   964  0000DF                     	ds	2
   965  0000E1                     _cur_state:
   966                           	opt stack 0
   967  0000E1                     	ds	2
   968  0000E3                     _f_can_coming_to_ID:
   969                           	opt stack 0
   970  0000E3                     	ds	2
   971  0000E5                     _f_can_coming_to_distribution:
   972                           	opt stack 0
   973  0000E5                     	ds	2
   974  0000E7                     _f_can_distributed:
   975                           	opt stack 0
   976  0000E7                     	ds	2
   977  0000E9                     _f_lastCan:
   978                           	opt stack 0
   979  0000E9                     	ds	2
   980  0000EB                     _f_loadingNewCan:
   981                           	opt stack 0
   982  0000EB                     	ds	2
   983  0000ED                     _log:
   984                           	opt stack 0
   985  0000ED                     	ds	2
   986  0000EF                     _logstate:
   987                           	opt stack 0
   988  0000EF                     	ds	2
   989  0000F1                     _total_time:
   990                           	opt stack 0
   991  0000F1                     	ds	2
   992  0000F3                     _canType:
   993                           	opt stack 0
   994  0000F3                     	ds	1
   995  0000F4                     _machine_state:
   996                           	opt stack 0
   997  0000F4                     	ds	1
   998                           tblptru	equ	0xFF8
   999                           tblptrh	equ	0xFF7
  1000                           tblptrl	equ	0xFF6
  1001                           tablat	equ	0xFF5
  1002                           postinc0	equ	0xFEE
  1003                           wreg	equ	0xFE8
  1004                           postdec1	equ	0xFE5
  1005                           fsr1l	equ	0xFE1
  1006                           
  1007                           	psect	dataBANK0
  1008  0000F5                     __pdataBANK0:
  1009                           	opt stack 0
  1010  0000F5                     printRTC@F3177:
  1011                           	opt stack 0
  1012  0000F5                     	ds	4
  1013  0000F9                     _f_ID_receive:
  1014                           	opt stack 0
  1015  0000F9                     	ds	2
  1016  0000FB                     _first:
  1017                           	opt stack 0
  1018  0000FB                     	ds	2
  1019                           tblptru	equ	0xFF8
  1020                           tblptrh	equ	0xFF7
  1021                           tblptrl	equ	0xFF6
  1022                           tablat	equ	0xFF5
  1023                           postinc0	equ	0xFEE
  1024                           wreg	equ	0xFE8
  1025                           postdec1	equ	0xFE5
  1026                           fsr1l	equ	0xFE1
  1027                           
  1028                           	psect	bssBANK1
  1029  000100                     __pbssBANK1:
  1030                           	opt stack 0
  1031  000100                     _startTime:
  1032                           	opt stack 0
  1033  000100                     	ds	14
  1034                           tblptru	equ	0xFF8
  1035                           tblptrh	equ	0xFF7
  1036                           tblptrl	equ	0xFF6
  1037                           tablat	equ	0xFF5
  1038                           postinc0	equ	0xFEE
  1039                           wreg	equ	0xFE8
  1040                           postdec1	equ	0xFE5
  1041                           fsr1l	equ	0xFE1
  1042                           
  1043                           	psect	cstackBANK0
  1044  000080                     __pcstackBANK0:
  1045                           	opt stack 0
  1046  000080                     ??_isdigit:
  1047  000080                     ??_I2C_Master_Wait:
  1048  000080                     ?_MAGNETISM_in:
  1049  000080                     ?___wmul:
  1050                           	opt stack 0
  1051  000080                     ?___awmod:
  1052                           	opt stack 0
  1053  000080                     ?___lwdiv:
  1054                           	opt stack 0
  1055  000080                     ?___lldiv:
  1056                           	opt stack 0
  1057  000080                     lcdNibble@temp:
  1058                           	opt stack 0
  1059  000080                     initTime@m:
  1060                           	opt stack 0
  1061  000080                     moveServoCup@myPosition:
  1062                           	opt stack 0
  1063  000080                     moveServoBlock@pwmTimer:
  1064                           	opt stack 0
  1065  000080                     ___wmul@multiplier:
  1066                           	opt stack 0
  1067  000080                     ___awmod@dividend:
  1068                           	opt stack 0
  1069  000080                     ___lwdiv@dividend:
  1070                           	opt stack 0
  1071  000080                     strcpy@to:
  1072                           	opt stack 0
  1073  000080                     ___lldiv@dividend:
  1074                           	opt stack 0
  1075                           
  1076                           ; 4 bytes @ 0x0
  1077  000080                     	ds	1
  1078  000081                     I2C_Master_Read@a:
  1079                           	opt stack 0
  1080  000081                     lcdNibble@data:
  1081                           	opt stack 0
  1082  000081                     initTime@h:
  1083                           	opt stack 0
  1084  000081                     _isdigit$1565:
  1085                           	opt stack 0
  1086  000081                     I2C_Master_Write@d:
  1087                           	opt stack 0
  1088  000081                     moveServoCup@pwmTimer:
  1089                           	opt stack 0
  1090                           
  1091                           ; 2 bytes @ 0x1
  1092  000081                     	ds	1
  1093  000082                     I2C_Master_Read@temp:
  1094                           	opt stack 0
  1095  000082                     lcdInst@data:
  1096                           	opt stack 0
  1097  000082                     putch@data:
  1098                           	opt stack 0
  1099  000082                     initTime@w:
  1100                           	opt stack 0
  1101  000082                     moveServoBlock@myPosition:
  1102                           	opt stack 0
  1103  000082                     isdigit@c:
  1104                           	opt stack 0
  1105  000082                     ___wmul@multiplicand:
  1106                           	opt stack 0
  1107  000082                     ___awmod@divisor:
  1108                           	opt stack 0
  1109  000082                     ___lwdiv@divisor:
  1110                           	opt stack 0
  1111  000082                     strcpy@from:
  1112                           	opt stack 0
  1113                           
  1114                           ; 2 bytes @ 0x2
  1115  000082                     	ds	1
  1116  000083                     ??_ID:
  1117  000083                     ??_initLCD:
  1118  000083                     initTime@DD:
  1119                           	opt stack 0
  1120  000083                     getRTC@i:
  1121                           	opt stack 0
  1122                           
  1123                           ; 2 bytes @ 0x3
  1124  000083                     	ds	1
  1125  000084                     initTime@MM:
  1126                           	opt stack 0
  1127  000084                     ___awmod@counter:
  1128                           	opt stack 0
  1129  000084                     ID@top_bottom_conductivity:
  1130                           	opt stack 0
  1131  000084                     ___wmul@product:
  1132                           	opt stack 0
  1133  000084                     ___lwdiv@quotient:
  1134                           	opt stack 0
  1135  000084                     strcpy@cp:
  1136                           	opt stack 0
  1137  000084                     ___lldiv@divisor:
  1138                           	opt stack 0
  1139                           
  1140                           ; 4 bytes @ 0x4
  1141  000084                     	ds	1
  1142  000085                     ??_initSortTimer:
  1143  000085                     ??_getIR:
  1144  000085                     initTime@YY:
  1145                           	opt stack 0
  1146  000085                     ___awmod@sign:
  1147                           	opt stack 0
  1148                           
  1149                           ; 1 bytes @ 0x5
  1150  000085                     	ds	1
  1151  000086                     ?___awdiv:
  1152                           	opt stack 0
  1153  000086                     initTime@s:
  1154                           	opt stack 0
  1155  000086                     ___lwdiv@counter:
  1156                           	opt stack 0
  1157  000086                     ID@side_conductivity:
  1158                           	opt stack 0
  1159  000086                     ___awdiv@dividend:
  1160                           	opt stack 0
  1161                           
  1162                           ; 2 bytes @ 0x6
  1163  000086                     	ds	1
  1164  000087                     ?___lwmod:
  1165                           	opt stack 0
  1166  000087                     ___lwmod@dividend:
  1167                           	opt stack 0
  1168                           
  1169                           ; 2 bytes @ 0x7
  1170  000087                     	ds	1
  1171  000088                     ID@magnetic:
  1172                           	opt stack 0
  1173  000088                     initSortTimer@i:
  1174                           	opt stack 0
  1175  000088                     ___awdiv@divisor:
  1176                           	opt stack 0
  1177  000088                     ___lldiv@quotient:
  1178                           	opt stack 0
  1179  000088                     getIR@timeBroken:
  1180                           	opt stack 0
  1181                           
  1182                           ; 14 bytes @ 0x8
  1183  000088                     	ds	1
  1184  000089                     ___lwmod@divisor:
  1185                           	opt stack 0
  1186                           
  1187                           ; 2 bytes @ 0x9
  1188  000089                     	ds	1
  1189  00008A                     ___awdiv@counter:
  1190                           	opt stack 0
  1191                           
  1192                           ; 1 bytes @ 0xA
  1193  00008A                     	ds	1
  1194  00008B                     ___awdiv@sign:
  1195                           	opt stack 0
  1196  00008B                     ___lwmod@counter:
  1197                           	opt stack 0
  1198                           
  1199                           ; 1 bytes @ 0xB
  1200  00008B                     	ds	1
  1201  00008C                     ___lldiv@counter:
  1202                           	opt stack 0
  1203  00008C                     ___awdiv@quotient:
  1204                           	opt stack 0
  1205                           
  1206                           ; 2 bytes @ 0xC
  1207  00008C                     	ds	1
  1208  00008D                     I2C_Master_Init@c:
  1209                           	opt stack 0
  1210                           
  1211                           ; 4 bytes @ 0xD
  1212  00008D                     	ds	1
  1213  00008E                     ?_printf:
  1214                           	opt stack 0
  1215  00008E                     printf@f:
  1216                           	opt stack 0
  1217                           
  1218                           ; 2 bytes @ 0xE
  1219  00008E                     	ds	3
  1220  000091                     ??_I2C_Master_Init:
  1221                           
  1222                           ; 1 bytes @ 0x11
  1223  000091                     	ds	4
  1224  000095                     ??_loadRTC:
  1225                           
  1226                           ; 1 bytes @ 0x15
  1227  000095                     	ds	1
  1228  000096                     loadRTC@i:
  1229                           	opt stack 0
  1230  000096                     getIR@i:
  1231                           	opt stack 0
  1232                           
  1233                           ; 2 bytes @ 0x16
  1234  000096                     	ds	2
  1235  000098                     ??_Loading:
  1236                           
  1237                           ; 1 bytes @ 0x18
  1238  000098                     	ds	1
  1239  000099                     
  1240                           ; 1 bytes @ 0x19
  1241  000099                     	ds	1
  1242  00009A                     ??_printf:
  1243                           
  1244                           ; 1 bytes @ 0x1A
  1245  00009A                     	ds	4
  1246  00009E                     printf@prec:
  1247                           	opt stack 0
  1248                           
  1249                           ; 1 bytes @ 0x1E
  1250  00009E                     	ds	1
  1251  00009F                     printf@ap:
  1252                           	opt stack 0
  1253                           
  1254                           ; 2 bytes @ 0x1F
  1255  00009F                     	ds	2
  1256  0000A1                     printf@cp:
  1257                           	opt stack 0
  1258                           
  1259                           ; 2 bytes @ 0x21
  1260  0000A1                     	ds	2
  1261  0000A3                     printf@val:
  1262                           	opt stack 0
  1263                           
  1264                           ; 2 bytes @ 0x23
  1265  0000A3                     	ds	2
  1266  0000A5                     printf@len:
  1267                           	opt stack 0
  1268                           
  1269                           ; 2 bytes @ 0x25
  1270  0000A5                     	ds	2
  1271  0000A7                     printf@flag:
  1272                           	opt stack 0
  1273                           
  1274                           ; 1 bytes @ 0x27
  1275  0000A7                     	ds	1
  1276  0000A8                     printf@c:
  1277                           	opt stack 0
  1278                           
  1279                           ; 1 bytes @ 0x28
  1280  0000A8                     	ds	1
  1281  0000A9                     printf@width:
  1282                           	opt stack 0
  1283                           
  1284                           ; 2 bytes @ 0x29
  1285  0000A9                     	ds	2
  1286  0000AB                     ??_printRTC:
  1287                           
  1288                           ; 1 bytes @ 0x2B
  1289  0000AB                     	ds	3
  1290  0000AE                     printRTC@INT_time:
  1291                           	opt stack 0
  1292                           
  1293                           ; 14 bytes @ 0x2E
  1294  0000AE                     	ds	14
  1295  0000BC                     printRTC@RTC_month:
  1296                           	opt stack 0
  1297                           
  1298                           ; 2 bytes @ 0x3C
  1299  0000BC                     	ds	2
  1300  0000BE                     printRTC@month:
  1301                           	opt stack 0
  1302                           
  1303                           ; 4 bytes @ 0x3E
  1304  0000BE                     	ds	4
  1305  0000C2                     printRTC@i:
  1306                           	opt stack 0
  1307                           
  1308                           ; 2 bytes @ 0x42
  1309  0000C2                     	ds	2
  1310  0000C4                     ??_UI:
  1311                           
  1312                           ; 1 bytes @ 0x44
  1313  0000C4                     	ds	1
  1314  0000C5                     _UI$1921:
  1315                           	opt stack 0
  1316                           
  1317                           ; 2 bytes @ 0x45
  1318  0000C5                     	ds	2
  1319  0000C7                     UI@i:
  1320                           	opt stack 0
  1321                           
  1322                           ; 1 bytes @ 0x47
  1323  0000C7                     	ds	1
  1324  0000C8                     UI@i_636:
  1325                           	opt stack 0
  1326                           
  1327                           ; 1 bytes @ 0x48
  1328  0000C8                     	ds	1
  1329  0000C9                     UI@i_637:
  1330                           	opt stack 0
  1331                           
  1332                           ; 1 bytes @ 0x49
  1333  0000C9                     	ds	1
  1334  0000CA                     UI@i_640:
  1335                           	opt stack 0
  1336                           
  1337                           ; 1 bytes @ 0x4A
  1338  0000CA                     	ds	1
  1339  0000CB                     UI@i_641:
  1340                           	opt stack 0
  1341                           
  1342                           ; 1 bytes @ 0x4B
  1343  0000CB                     	ds	1
  1344  0000CC                     UI@i_644:
  1345                           	opt stack 0
  1346                           
  1347                           ; 1 bytes @ 0x4C
  1348  0000CC                     	ds	1
  1349  0000CD                     UI@i_645:
  1350                           	opt stack 0
  1351                           
  1352                           ; 1 bytes @ 0x4D
  1353  0000CD                     	ds	1
  1354  0000CE                     UI@i_648:
  1355                           	opt stack 0
  1356                           
  1357                           ; 1 bytes @ 0x4E
  1358  0000CE                     	ds	1
  1359  0000CF                     UI@i_649:
  1360                           	opt stack 0
  1361                           
  1362                           ; 1 bytes @ 0x4F
  1363  0000CF                     	ds	1
  1364  0000D0                     UI@i_652:
  1365                           	opt stack 0
  1366                           
  1367                           ; 1 bytes @ 0x50
  1368  0000D0                     	ds	1
  1369  0000D1                     UI@i_653:
  1370                           	opt stack 0
  1371                           
  1372                           ; 1 bytes @ 0x51
  1373  0000D1                     	ds	1
  1374  0000D2                     UI@i_656:
  1375                           	opt stack 0
  1376                           
  1377                           ; 1 bytes @ 0x52
  1378  0000D2                     	ds	1
  1379  0000D3                     UI@i_657:
  1380                           	opt stack 0
  1381                           
  1382                           ; 1 bytes @ 0x53
  1383  0000D3                     	ds	1
  1384  0000D4                     tblptru	equ	0xFF8
  1385                           tblptrh	equ	0xFF7
  1386                           tblptrl	equ	0xFF6
  1387                           tablat	equ	0xFF5
  1388                           postinc0	equ	0xFEE
  1389                           wreg	equ	0xFE8
  1390                           postdec1	equ	0xFE5
  1391                           fsr1l	equ	0xFE1
  1392                           
  1393                           ; 1 bytes @ 0x54
  1394                           
  1395                           	psect	cstackCOMRAM
  1396  000001                     __pcstackCOMRAM:
  1397                           	opt stack 0
  1398  000001                     ??i2_I2C_Master_Wait:
  1399  000001                     ??i2_isdigit:
  1400  000001                     ?i2___wmul:
  1401                           	opt stack 0
  1402  000001                     ?i2___lwmod:
  1403                           	opt stack 0
  1404  000001                     i2lcdNibble@temp:
  1405                           	opt stack 0
  1406  000001                     dispLogs@myLog:
  1407                           	opt stack 0
  1408  000001                     i2___wmul@multiplier:
  1409                           	opt stack 0
  1410  000001                     i2___lwmod@dividend:
  1411                           	opt stack 0
  1412  000001                     i2strcpy@to:
  1413                           	opt stack 0
  1414                           
  1415                           ; 2 bytes @ 0x0
  1416  000001                     	ds	1
  1417  000002                     i2I2C_Master_Read@a:
  1418                           	opt stack 0
  1419  000002                     i2lcdNibble@data:
  1420                           	opt stack 0
  1421  000002                     i2_isdigit$1565:
  1422                           	opt stack 0
  1423  000002                     i2I2C_Master_Write@d:
  1424                           	opt stack 0
  1425                           
  1426                           ; 2 bytes @ 0x1
  1427  000002                     	ds	1
  1428  000003                     i2I2C_Master_Read@temp:
  1429                           	opt stack 0
  1430  000003                     i2lcdInst@data:
  1431                           	opt stack 0
  1432  000003                     i2putch@data:
  1433                           	opt stack 0
  1434  000003                     i2isdigit@c:
  1435                           	opt stack 0
  1436  000003                     i2___wmul@multiplicand:
  1437                           	opt stack 0
  1438  000003                     i2___lwmod@divisor:
  1439                           	opt stack 0
  1440  000003                     i2strcpy@from:
  1441                           	opt stack 0
  1442                           
  1443                           ; 2 bytes @ 0x2
  1444  000003                     	ds	1
  1445  000004                     i2getRTC@i:
  1446                           	opt stack 0
  1447                           
  1448                           ; 2 bytes @ 0x3
  1449  000004                     	ds	1
  1450  000005                     i2___lwmod@counter:
  1451                           	opt stack 0
  1452  000005                     i2___wmul@product:
  1453                           	opt stack 0
  1454  000005                     i2strcpy@cp:
  1455                           	opt stack 0
  1456                           
  1457                           ; 2 bytes @ 0x4
  1458  000005                     	ds	1
  1459  000006                     ?i2___lwdiv:
  1460                           	opt stack 0
  1461  000006                     i2___lwdiv@dividend:
  1462                           	opt stack 0
  1463                           
  1464                           ; 2 bytes @ 0x5
  1465  000006                     	ds	2
  1466  000008                     i2___lwdiv@divisor:
  1467                           	opt stack 0
  1468                           
  1469                           ; 2 bytes @ 0x7
  1470  000008                     	ds	2
  1471  00000A                     i2___lwdiv@quotient:
  1472                           	opt stack 0
  1473                           
  1474                           ; 2 bytes @ 0x9
  1475  00000A                     	ds	2
  1476  00000C                     i2___lwdiv@counter:
  1477                           	opt stack 0
  1478                           
  1479                           ; 1 bytes @ 0xB
  1480  00000C                     	ds	1
  1481  00000D                     ?i2_printf:
  1482                           	opt stack 0
  1483  00000D                     i2printf@f:
  1484                           	opt stack 0
  1485                           
  1486                           ; 2 bytes @ 0xC
  1487  00000D                     	ds	12
  1488  000019                     ??i2_printf:
  1489                           
  1490                           ; 1 bytes @ 0x18
  1491  000019                     	ds	4
  1492  00001D                     i2printf@prec:
  1493                           	opt stack 0
  1494                           
  1495                           ; 1 bytes @ 0x1C
  1496  00001D                     	ds	1
  1497  00001E                     i2printf@ap:
  1498                           	opt stack 0
  1499                           
  1500                           ; 2 bytes @ 0x1D
  1501  00001E                     	ds	2
  1502  000020                     i2printf@cp:
  1503                           	opt stack 0
  1504                           
  1505                           ; 2 bytes @ 0x1F
  1506  000020                     	ds	2
  1507  000022                     i2printf@val:
  1508                           	opt stack 0
  1509                           
  1510                           ; 2 bytes @ 0x21
  1511  000022                     	ds	2
  1512  000024                     i2printf@len:
  1513                           	opt stack 0
  1514                           
  1515                           ; 2 bytes @ 0x23
  1516  000024                     	ds	2
  1517  000026                     i2printf@flag:
  1518                           	opt stack 0
  1519                           
  1520                           ; 1 bytes @ 0x25
  1521  000026                     	ds	1
  1522  000027                     i2printf@c:
  1523                           	opt stack 0
  1524                           
  1525                           ; 1 bytes @ 0x26
  1526  000027                     	ds	1
  1527  000028                     i2printf@width:
  1528                           	opt stack 0
  1529                           
  1530                           ; 2 bytes @ 0x27
  1531  000028                     	ds	2
  1532  00002A                     ??_printSortTimer:
  1533  00002A                     ??i2_printRTC:
  1534  00002A                     ?_inputHandler:
  1535                           	opt stack 0
  1536                           
  1537                           ; 2 bytes @ 0x29
  1538  00002A                     	ds	2
  1539  00002C                     ??_inputHandler:
  1540                           
  1541                           ; 1 bytes @ 0x2B
  1542  00002C                     	ds	1
  1543  00002D                     printSortTimer@curTime:
  1544                           	opt stack 0
  1545  00002D                     i2printRTC@INT_time:
  1546                           	opt stack 0
  1547                           
  1548                           ; 14 bytes @ 0x2C
  1549  00002D                     	ds	14
  1550  00003B                     printSortTimer@start_sec:
  1551                           	opt stack 0
  1552  00003B                     i2printRTC@RTC_month:
  1553                           	opt stack 0
  1554                           
  1555                           ; 2 bytes @ 0x3A
  1556  00003B                     	ds	2
  1557  00003D                     printSortTimer@cur_sec:
  1558                           	opt stack 0
  1559  00003D                     i2printRTC@month:
  1560                           	opt stack 0
  1561                           
  1562                           ; 4 bytes @ 0x3C
  1563  00003D                     	ds	2
  1564  00003F                     printSortTimer@hour:
  1565                           	opt stack 0
  1566                           
  1567                           ; 2 bytes @ 0x3E
  1568  00003F                     	ds	2
  1569  000041                     printSortTimer@min:
  1570                           	opt stack 0
  1571  000041                     i2printRTC@i:
  1572                           	opt stack 0
  1573                           
  1574                           ; 2 bytes @ 0x40
  1575  000041                     	ds	2
  1576  000043                     ??_updateMenu:
  1577  000043                     printSortTimer@sec:
  1578                           	opt stack 0
  1579                           
  1580                           ; 2 bytes @ 0x42
  1581  000043                     	ds	2
  1582  000045                     _printSortTimer$2028:
  1583                           	opt stack 0
  1584                           
  1585                           ; 2 bytes @ 0x44
  1586  000045                     	ds	2
  1587  000047                     printSortTimer@timeDiff:
  1588                           	opt stack 0
  1589                           
  1590                           ; 2 bytes @ 0x46
  1591  000047                     	ds	2
  1592  000049                     printSortTimer@i:
  1593                           	opt stack 0
  1594                           
  1595                           ; 2 bytes @ 0x48
  1596  000049                     	ds	2
  1597  00004B                     ??_handler:
  1598                           
  1599                           ; 1 bytes @ 0x4A
  1600  00004B                     	ds	16
  1601                           tblptru	equ	0xFF8
  1602                           tblptrh	equ	0xFF7
  1603                           tblptrl	equ	0xFF6
  1604                           tablat	equ	0xFF5
  1605                           postinc0	equ	0xFEE
  1606                           wreg	equ	0xFE8
  1607                           postdec1	equ	0xFE5
  1608                           fsr1l	equ	0xFE1
  1609                           
  1610 ;;
  1611 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1612 ;;
  1613 ;; *************** function _main *****************
  1614 ;; Defined at:
  1615 ;;		line 13 in file "main.c"
  1616 ;; Parameters:    Size  Location     Type
  1617 ;;		None
  1618 ;; Auto vars:     Size  Location     Type
  1619 ;;		None
  1620 ;; Return value:  Size  Location     Type
  1621 ;;                  1    wreg      void 
  1622 ;; Registers used:
  1623 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1624 ;; Tracked objects:
  1625 ;;		On entry : 0/0
  1626 ;;		On exit  : 0/0
  1627 ;;		Unchanged: 0/0
  1628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1633 ;;Total ram usage:        0 bytes
  1634 ;; Hardware stack levels required when called:   13
  1635 ;; This function calls:
  1636 ;;		_PortTestA5
  1637 ;;		_UI
  1638 ;;		_initLCD
  1639 ;;		_initTime
  1640 ;;		_initUI
  1641 ;;		_machineConfig
  1642 ;;		_sort
  1643 ;;		_stopSignals
  1644 ;; This function is called by:
  1645 ;;		Startup code after reset
  1646 ;; This function uses a non-reentrant model
  1647 ;;
  1648                           
  1649                           	psect	text0
  1650  001EF8                     __ptext0:
  1651                           	opt stack 0
  1652  001EF8                     _main:
  1653                           	opt stack 18
  1654                           
  1655                           ;main.c: 14: machineConfig();
  1656                           
  1657                           ;incstack = 0
  1658  001EF8  EC7B  F011         	call	_machineConfig	;wreg free
  1659                           
  1660                           ;main.c: 15: initLCD();
  1661  001EFC  EC9F  F011         	call	_initLCD	;wreg free
  1662                           
  1663                           ;main.c: 16: initTime(0x42, 0x32, 0x13, 0x04, 0x09, 0x02, 0x17);
  1664  001F00  0E32               	movlw	50
  1665  001F02  0100               	movlb	0	; () banked
  1666  001F04  6F80               	movwf	initTime@m& (0+255),b
  1667  001F06  0E13               	movlw	19
  1668  001F08  0100               	movlb	0	; () banked
  1669  001F0A  6F81               	movwf	initTime@h& (0+255),b
  1670  001F0C  0E04               	movlw	4
  1671  001F0E  0100               	movlb	0	; () banked
  1672  001F10  6F82               	movwf	initTime@w& (0+255),b
  1673  001F12  0E09               	movlw	9
  1674  001F14  0100               	movlb	0	; () banked
  1675  001F16  6F83               	movwf	initTime@DD& (0+255),b
  1676  001F18  0E02               	movlw	2
  1677  001F1A  0100               	movlb	0	; () banked
  1678  001F1C  6F84               	movwf	initTime@MM& (0+255),b
  1679  001F1E  0E17               	movlw	23
  1680  001F20  0100               	movlb	0	; () banked
  1681  001F22  6F85               	movwf	initTime@YY& (0+255),b
  1682  001F24  0E42               	movlw	66
  1683  001F26  ECD2  F013         	call	_initTime
  1684                           
  1685                           ;main.c: 17: initUI();
  1686  001F2A  ECF2  F013         	call	_initUI	;wreg free
  1687                           
  1688                           ;main.c: 19: machine_state = Testing_state;
  1689  001F2E  0E03               	movlw	3
  1690  001F30  0100               	movlb	0	; () banked
  1691  001F32  6FF4               	movwf	_machine_state& (0+255),b
  1692                           
  1693                           ; BSR set to: 0
  1694                           ;main.c: 22: switch(machine_state){
  1695                           
  1696                           ;main.c: 21: while(1){
  1697  001F34  D00F               	goto	l5349
  1698  001F36                     l5337:
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;main.c: 24: UI();
  1702  001F36  EC09  F000         	call	_UI	;wreg free
  1703                           
  1704                           ;main.c: 25: break;
  1705  001F3A  D00C               	goto	l5349
  1706  001F3C                     l5339:
  1707                           
  1708                           ;main.c: 27: sort();
  1709  001F3C  EC0A  F014         	call	_sort	;wreg free
  1710                           
  1711                           ;main.c: 28: break;
  1712  001F40  D009               	goto	l5349
  1713  001F42                     l5341:
  1714                           
  1715                           ;main.c: 30: stopSignals();
  1716  001F42  ECFF  F013         	call	_stopSignals	;wreg free
  1717                           
  1718                           ;main.c: 31: UI();
  1719  001F46  EC09  F000         	call	_UI	;wreg free
  1720                           
  1721                           ;main.c: 32: break;
  1722  001F4A  D004               	goto	l5349
  1723  001F4C                     l5345:
  1724                           
  1725                           ;main.c: 34: PortTestA5();
  1726  001F4C  EC29  F014         	call	_PortTestA5	;wreg free
  1727                           
  1728                           ;main.c: 35: break;
  1729  001F50  D001               	goto	l5349
  1730  001F52                     l657:
  1731  001F52  D7FF               	goto	l657
  1732  001F54                     l5349:
  1733  001F54  0100               	movlb	0	; () banked
  1734  001F56  51F4               	movf	_machine_state& (0+255),w,b
  1735                           
  1736                           ; Switch size 1, requested type "space"
  1737                           ; Number of cases is 5, Range of values is 0 to 4
  1738                           ; switch strategies available:
  1739                           ; Name         Instructions Cycles
  1740                           ; simple_byte           16     9 (average)
  1741                           ;	Chosen strategy is simple_byte
  1742  001F58  0A00               	xorlw	0	; case 0
  1743  001F5A  B4D8               	btfsc	status,2,c
  1744  001F5C  D7EC               	goto	l5337
  1745  001F5E  0A01               	xorlw	1	; case 1
  1746  001F60  B4D8               	btfsc	status,2,c
  1747  001F62  D7EC               	goto	l5339
  1748  001F64  0A03               	xorlw	3	; case 2
  1749  001F66  B4D8               	btfsc	status,2,c
  1750  001F68  D7EC               	goto	l5341
  1751  001F6A  0A01               	xorlw	1	; case 3
  1752  001F6C  B4D8               	btfsc	status,2,c
  1753  001F6E  D7EE               	goto	l5345
  1754  001F70  0A07               	xorlw	7	; case 4
  1755  001F72  B4D8               	btfsc	status,2,c
  1756  001F74  D7EE               	goto	l657
  1757                           
  1758                           ; BSR set to: 0
  1759                           
  1760                           ; BSR set to: 0
  1761  001F76  D7EE               	goto	l5349
  1762  001F78                     __end_of_main:
  1763                           	opt stack 0
  1764                           tblptru	equ	0xFF8
  1765                           tblptrh	equ	0xFF7
  1766                           tblptrl	equ	0xFF6
  1767                           tablat	equ	0xFF5
  1768                           postinc0	equ	0xFEE
  1769                           wreg	equ	0xFE8
  1770                           postdec1	equ	0xFE5
  1771                           fsr1l	equ	0xFE1
  1772                           status	equ	0xFD8
  1773                           
  1774 ;; *************** function _stopSignals *****************
  1775 ;; Defined at:
  1776 ;;		line 46 in file "main.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;		None
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;		None
  1781 ;; Return value:  Size  Location     Type
  1782 ;;                  1    wreg      void 
  1783 ;; Registers used:
  1784 ;;		wreg, status,2
  1785 ;; Tracked objects:
  1786 ;;		On entry : 0/0
  1787 ;;		On exit  : 0/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1794 ;;Total ram usage:        0 bytes
  1795 ;; Hardware stack levels used:    1
  1796 ;; Hardware stack levels required when called:    7
  1797 ;; This function calls:
  1798 ;;		Nothing
  1799 ;; This function is called by:
  1800 ;;		_main
  1801 ;; This function uses a non-reentrant model
  1802 ;;
  1803                           
  1804                           	psect	text1
  1805  0027FE                     __ptext1:
  1806                           	opt stack 0
  1807  0027FE                     _stopSignals:
  1808                           	opt stack 23
  1809                           
  1810                           ;main.c: 47: LATA = 0x00;
  1811                           
  1812                           ; BSR set to: 0
  1813                           ;incstack = 0
  1814  0027FE  0E00               	movlw	0
  1815  002800  6E89               	movwf	3977,c	;volatile
  1816                           
  1817                           ;main.c: 48: LATB = 0x00;
  1818  002802  0E00               	movlw	0
  1819  002804  6E8A               	movwf	3978,c	;volatile
  1820                           
  1821                           ;main.c: 49: LATC = 0x00;
  1822  002806  0E00               	movlw	0
  1823  002808  6E8B               	movwf	3979,c	;volatile
  1824                           
  1825                           ;main.c: 50: LATD = 0x00;
  1826  00280A  0E00               	movlw	0
  1827  00280C  6E8C               	movwf	3980,c	;volatile
  1828                           
  1829                           ;main.c: 51: LATE = 0x00;
  1830  00280E  0E00               	movlw	0
  1831  002810  6E8D               	movwf	3981,c	;volatile
  1832  002812  0012               	return		;funcret
  1833  002814                     __end_of_stopSignals:
  1834                           	opt stack 0
  1835                           tblptru	equ	0xFF8
  1836                           tblptrh	equ	0xFF7
  1837                           tblptrl	equ	0xFF6
  1838                           tablat	equ	0xFF5
  1839                           postinc0	equ	0xFEE
  1840                           wreg	equ	0xFE8
  1841                           postdec1	equ	0xFE5
  1842                           fsr1l	equ	0xFE1
  1843                           status	equ	0xFD8
  1844                           
  1845 ;; *************** function _sort *****************
  1846 ;; Defined at:
  1847 ;;		line 30 in file "sort.c"
  1848 ;; Parameters:    Size  Location     Type
  1849 ;;		None
  1850 ;; Auto vars:     Size  Location     Type
  1851 ;;		None
  1852 ;; Return value:  Size  Location     Type
  1853 ;;                  1    wreg      void 
  1854 ;; Registers used:
  1855 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1856 ;; Tracked objects:
  1857 ;;		On entry : 0/0
  1858 ;;		On exit  : 0/0
  1859 ;;		Unchanged: 0/0
  1860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1865 ;;Total ram usage:        0 bytes
  1866 ;; Hardware stack levels used:    1
  1867 ;; Hardware stack levels required when called:   12
  1868 ;; This function calls:
  1869 ;;		_Distribution
  1870 ;;		_ID
  1871 ;;		_Loading
  1872 ;; This function is called by:
  1873 ;;		_main
  1874 ;; This function uses a non-reentrant model
  1875 ;;
  1876                           
  1877                           	psect	text2
  1878  002814                     __ptext2:
  1879                           	opt stack 0
  1880  002814                     _sort:
  1881                           	opt stack 18
  1882                           
  1883                           ;sort.c: 31: if(machine_state == Sorting_state){
  1884                           
  1885                           ;incstack = 0
  1886  002814  0100               	movlb	0	; () banked
  1887  002816  05F4               	decf	_machine_state& (0+255),w,b
  1888  002818  A4D8               	btfss	status,2,c
  1889  00281A  0012               	return	
  1890                           
  1891                           ; BSR set to: 0
  1892                           ;sort.c: 32: Loading();
  1893  00281C  ECA7  F00E         	call	_Loading	;wreg free
  1894                           
  1895                           ;sort.c: 33: ID();
  1896  002820  EC02  F00E         	call	_ID	;wreg free
  1897                           
  1898                           ;sort.c: 34: Distribution();
  1899  002824  EC4F  F012         	call	_Distribution	;wreg free
  1900  002828  0012               	return	
  1901  00282A                     __end_of_sort:
  1902                           	opt stack 0
  1903                           tblptru	equ	0xFF8
  1904                           tblptrh	equ	0xFF7
  1905                           tblptrl	equ	0xFF6
  1906                           tablat	equ	0xFF5
  1907                           postinc0	equ	0xFEE
  1908                           wreg	equ	0xFE8
  1909                           postdec1	equ	0xFE5
  1910                           fsr1l	equ	0xFE1
  1911                           status	equ	0xFD8
  1912                           
  1913 ;; *************** function _Loading *****************
  1914 ;; Defined at:
  1915 ;;		line 37 in file "sort.c"
  1916 ;; Parameters:    Size  Location     Type
  1917 ;;		None
  1918 ;; Auto vars:     Size  Location     Type
  1919 ;;		None
  1920 ;; Return value:  Size  Location     Type
  1921 ;;                  1    wreg      void 
  1922 ;; Registers used:
  1923 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1924 ;; Tracked objects:
  1925 ;;		On entry : 0/0
  1926 ;;		On exit  : 0/0
  1927 ;;		Unchanged: 0/0
  1928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1931 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1932 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1933 ;;Total ram usage:        1 bytes
  1934 ;; Hardware stack levels used:    1
  1935 ;; Hardware stack levels required when called:   11
  1936 ;; This function calls:
  1937 ;;		_getIR
  1938 ;;		_initSortTimer
  1939 ;;		_lcdInst
  1940 ;; This function is called by:
  1941 ;;		_sort
  1942 ;; This function uses a non-reentrant model
  1943 ;;
  1944                           
  1945                           	psect	text3
  1946  001D4E                     __ptext3:
  1947                           	opt stack 0
  1948  001D4E                     _Loading:
  1949                           	opt stack 18
  1950                           
  1951                           ;sort.c: 38: if(first){
  1952                           
  1953                           ;incstack = 0
  1954  001D4E  0100               	movlb	0	; () banked
  1955  001D50  51FB               	movf	_first& (0+255),w,b
  1956  001D52  0100               	movlb	0	; () banked
  1957  001D54  11FC               	iorwf	(_first+1)& (0+255),w,b
  1958  001D56  B4D8               	btfsc	status,2,c
  1959  001D58  D015               	goto	l4603
  1960                           
  1961                           ; BSR set to: 0
  1962                           ;sort.c: 39: first = 0;
  1963  001D5A  0E00               	movlw	0
  1964  001D5C  0100               	movlb	0	; () banked
  1965  001D5E  6FFC               	movwf	(_first+1)& (0+255),b
  1966  001D60  0E00               	movlw	0
  1967  001D62  6FFB               	movwf	_first& (0+255),b
  1968                           
  1969                           ; BSR set to: 0
  1970                           ;sort.c: 40: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  1971  001D64  0E01               	movlw	1
  1972  001D66  EC43  F014         	call	_lcdInst
  1973  001D6A  0E68               	movlw	104
  1974  001D6C  0100               	movlb	0	; () banked
  1975  001D6E  6F98               	movwf	??_Loading& (0+255),b
  1976  001D70  0EE4               	movlw	228
  1977  001D72                     u4477:
  1978  001D72  2EE8               	decfsz	wreg,f,c
  1979  001D74  D7FE               	bra	u4477
  1980  001D76  2F98               	decfsz	??_Loading& (0+255),f,b
  1981  001D78  D7FC               	bra	u4477
  1982  001D7A  F000               	nop	
  1983                           
  1984                           ;sort.c: 41: initSortTimer();
  1985  001D7C  ECAB  F00D         	call	_initSortTimer	;wreg free
  1986                           
  1987                           ;sort.c: 42: LATAbits.LATA5 = 1;
  1988  001D80  8A89               	bsf	3977,5,c	;volatile
  1989                           
  1990                           ;sort.c: 43: }
  1991  001D82  0012               	return	
  1992  001D84                     l4603:
  1993                           
  1994                           ;sort.c: 44: else{
  1995                           ;sort.c: 45: if(!f_loadingNewCan){
  1996  001D84  0100               	movlb	0	; () banked
  1997  001D86  51EB               	movf	_f_loadingNewCan& (0+255),w,b
  1998  001D88  0100               	movlb	0	; () banked
  1999  001D8A  11EC               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2000  001D8C  A4D8               	btfss	status,2,c
  2001  001D8E  D018               	goto	l4619
  2002                           
  2003                           ; BSR set to: 0
  2004                           ;sort.c: 48: getIR();
  2005  001D90  EC89  F00C         	call	_getIR	;wreg free
  2006                           
  2007                           ;sort.c: 49: if(!f_loadingNewCan){
  2008  001D94  0100               	movlb	0	; () banked
  2009  001D96  51EB               	movf	_f_loadingNewCan& (0+255),w,b
  2010  001D98  0100               	movlb	0	; () banked
  2011  001D9A  11EC               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2012  001D9C  B4D8               	btfsc	status,2,c
  2013  001D9E  0012               	return	
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;sort.c: 52: else{
  2017                           ;sort.c: 53: count_total++;
  2018                           
  2019                           ; BSR set to: 0
  2020                           
  2021                           ; BSR set to: 0
  2022                           ;sort.c: 51: }
  2023                           
  2024                           ; BSR set to: 0
  2025                           ;sort.c: 50: return;
  2026  001DA0  0100               	movlb	0	; () banked
  2027  001DA2  4BDF               	infsnz	_count_total& (0+255),f,b
  2028  001DA4  2BE0               	incf	(_count_total+1)& (0+255),f,b
  2029                           
  2030                           ; BSR set to: 0
  2031                           ;sort.c: 54: if(count_total == 12){
  2032  001DA6  0E0C               	movlw	12
  2033  001DA8  0100               	movlb	0	; () banked
  2034  001DAA  19DF               	xorwf	_count_total& (0+255),w,b
  2035  001DAC  0100               	movlb	0	; () banked
  2036  001DAE  11E0               	iorwf	(_count_total+1)& (0+255),w,b
  2037  001DB0  A4D8               	btfss	status,2,c
  2038  001DB2  D017               	goto	l4625
  2039                           
  2040                           ; BSR set to: 0
  2041                           ;sort.c: 55: f_lastCan = 1;
  2042  001DB4  0E00               	movlw	0
  2043  001DB6  0100               	movlb	0	; () banked
  2044  001DB8  6FEA               	movwf	(_f_lastCan+1)& (0+255),b
  2045  001DBA  0E01               	movlw	1
  2046  001DBC  6FE9               	movwf	_f_lastCan& (0+255),b
  2047                           
  2048                           ; BSR set to: 0
  2049                           ;sort.c: 56: }
  2050                           ;sort.c: 57: }
  2051                           ;sort.c: 58: }
  2052                           
  2053                           ; BSR set to: 0
  2054  001DBE  D011               	goto	l4625
  2055  001DC0                     l4619:
  2056                           
  2057                           ; BSR set to: 0
  2058                           ;sort.c: 63: else if(f_ID_receive){
  2059  001DC0  0100               	movlb	0	; () banked
  2060  001DC2  51F9               	movf	_f_ID_receive& (0+255),w,b
  2061  001DC4  0100               	movlb	0	; () banked
  2062  001DC6  11FA               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  2063  001DC8  B4D8               	btfsc	status,2,c
  2064  001DCA  D00B               	goto	l4625
  2065                           
  2066                           ; BSR set to: 0
  2067                           ;sort.c: 64: f_loadingNewCan = 0;
  2068  001DCC  0E00               	movlw	0
  2069  001DCE  0100               	movlb	0	; () banked
  2070  001DD0  6FEC               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2071  001DD2  0E00               	movlw	0
  2072  001DD4  6FEB               	movwf	_f_loadingNewCan& (0+255),b
  2073                           
  2074                           ; BSR set to: 0
  2075                           ;sort.c: 65: LATAbits.LATA4 = 1;
  2076  001DD6  8889               	bsf	3977,4,c	;volatile
  2077                           
  2078                           ;sort.c: 66: f_can_coming_to_ID = 1;
  2079  001DD8  0E00               	movlw	0
  2080  001DDA  0100               	movlb	0	; () banked
  2081  001DDC  6FE4               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2082  001DDE  0E01               	movlw	1
  2083  001DE0  6FE3               	movwf	_f_can_coming_to_ID& (0+255),b
  2084  001DE2                     l4625:
  2085                           
  2086                           ; BSR set to: 0
  2087                           ;sort.c: 67: }
  2088                           ;sort.c: 69: LATAbits.LATA4 = 0;
  2089  001DE2  9889               	bcf	3977,4,c	;volatile
  2090  001DE4  0012               	return	
  2091  001DE6                     __end_of_Loading:
  2092                           	opt stack 0
  2093                           tblptru	equ	0xFF8
  2094                           tblptrh	equ	0xFF7
  2095                           tblptrl	equ	0xFF6
  2096                           tablat	equ	0xFF5
  2097                           postinc0	equ	0xFEE
  2098                           wreg	equ	0xFE8
  2099                           postdec1	equ	0xFE5
  2100                           fsr1l	equ	0xFE1
  2101                           status	equ	0xFD8
  2102                           
  2103 ;; *************** function _initSortTimer *****************
  2104 ;; Defined at:
  2105 ;;		line 112 in file "sort.c"
  2106 ;; Parameters:    Size  Location     Type
  2107 ;;		None
  2108 ;; Auto vars:     Size  Location     Type
  2109 ;;  i               2    8[BANK0 ] int 
  2110 ;; Return value:  Size  Location     Type
  2111 ;;                  1    wreg      void 
  2112 ;; Registers used:
  2113 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2114 ;; Tracked objects:
  2115 ;;		On entry : 0/0
  2116 ;;		On exit  : 0/0
  2117 ;;		Unchanged: 0/0
  2118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2120 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2121 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2122 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2123 ;;Total ram usage:        5 bytes
  2124 ;; Hardware stack levels used:    1
  2125 ;; Hardware stack levels required when called:   10
  2126 ;; This function calls:
  2127 ;;		_getRTC
  2128 ;; This function is called by:
  2129 ;;		_Loading
  2130 ;; This function uses a non-reentrant model
  2131 ;;
  2132                           
  2133                           	psect	text4
  2134  001B56                     __ptext4:
  2135                           	opt stack 0
  2136  001B56                     _initSortTimer:
  2137                           	opt stack 18
  2138                           
  2139                           ;sort.c: 115: getRTC();
  2140                           
  2141                           ;incstack = 0
  2142  001B56  EC39  F00F         	call	_getRTC	;wreg free
  2143                           
  2144                           ;sort.c: 116: for(int i = 0; i < 7; i++){
  2145  001B5A  0E00               	movlw	0
  2146  001B5C  0100               	movlb	0	; () banked
  2147  001B5E  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  2148  001B60  0E00               	movlw	0
  2149  001B62  6F88               	movwf	initSortTimer@i& (0+255),b
  2150  001B64                     l4305:
  2151                           
  2152                           ; BSR set to: 0
  2153  001B64  0100               	movlb	0	; () banked
  2154  001B66  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  2155  001B68  D008               	goto	l4309
  2156  001B6A  0100               	movlb	0	; () banked
  2157  001B6C  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  2158  001B6E  E140               	bnz	l4315
  2159  001B70  0E07               	movlw	7
  2160  001B72  0100               	movlb	0	; () banked
  2161  001B74  5D88               	subwf	initSortTimer@i& (0+255),w,b
  2162  001B76  B0D8               	btfsc	status,0,c
  2163  001B78  D03B               	goto	l4315
  2164  001B7A                     l4309:
  2165                           
  2166                           ; BSR set to: 0
  2167                           ;sort.c: 117: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  2168  001B7A  0ED4               	movlw	low _time
  2169  001B7C  0100               	movlb	0	; () banked
  2170  001B7E  2588               	addwf	initSortTimer@i& (0+255),w,b
  2171  001B80  6ED9               	movwf	fsr2l,c
  2172  001B82  0E00               	movlw	high _time
  2173  001B84  0100               	movlb	0	; () banked
  2174  001B86  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2175  001B88  6EDA               	movwf	fsr2h,c
  2176  001B8A  50DF               	movf	indf2,w,c
  2177  001B8C  0100               	movlb	0	; () banked
  2178  001B8E  6F85               	movwf	??_initSortTimer& (0+255),b
  2179  001B90  0100               	movlb	0	; () banked
  2180  001B92  3B85               	swapf	??_initSortTimer& (0+255),f,b
  2181  001B94  0E0F               	movlw	15
  2182  001B96  1785               	andwf	??_initSortTimer& (0+255),f,b
  2183  001B98  0E0F               	movlw	15
  2184  001B9A  0100               	movlb	0	; () banked
  2185  001B9C  1785               	andwf	??_initSortTimer& (0+255),f,b
  2186  001B9E  0100               	movlb	0	; () banked
  2187  001BA0  5185               	movf	??_initSortTimer& (0+255),w,b
  2188  001BA2  0D0A               	mullw	10
  2189  001BA4  0ED4               	movlw	low _time
  2190  001BA6  0100               	movlb	0	; () banked
  2191  001BA8  2588               	addwf	initSortTimer@i& (0+255),w,b
  2192  001BAA  6ED9               	movwf	fsr2l,c
  2193  001BAC  0E00               	movlw	high _time
  2194  001BAE  0100               	movlb	0	; () banked
  2195  001BB0  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2196  001BB2  6EDA               	movwf	fsr2h,c
  2197  001BB4  50DF               	movf	indf2,w,c
  2198  001BB6  0B0F               	andlw	15
  2199  001BB8  0100               	movlb	0	; () banked
  2200  001BBA  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  2201  001BBC  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  2202  001BBE  50F3               	movf	prodl,w,c
  2203  001BC0  0100               	movlb	0	; () banked
  2204  001BC2  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  2205  001BC4  50F4               	movf	prodh,w,c
  2206  001BC6  0100               	movlb	0	; () banked
  2207  001BC8  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  2208  001BCA  90D8               	bcf	status,0,c
  2209  001BCC  0100               	movlb	0	; () banked
  2210  001BCE  3588               	rlcf	initSortTimer@i& (0+255),w,b
  2211  001BD0  6ED9               	movwf	fsr2l,c
  2212  001BD2  0100               	movlb	0	; () banked
  2213  001BD4  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  2214  001BD6  6EDA               	movwf	fsr2h,c
  2215  001BD8  0E00               	movlw	low _startTime
  2216  001BDA  26D9               	addwf	fsr2l,f,c
  2217  001BDC  0E01               	movlw	high _startTime
  2218  001BDE  22DA               	addwfc	fsr2h,f,c
  2219  001BE0  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  2220  001BE4  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  2221                           
  2222                           ; BSR set to: 0
  2223  001BE8  0100               	movlb	0	; () banked
  2224  001BEA  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  2225  001BEC  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  2226  001BEE  D7BA               	goto	l4305
  2227  001BF0                     l4315:
  2228                           
  2229                           ; BSR set to: 0
  2230                           ;sort.c: 118: }
  2231                           ;sort.c: 121: T0CON = 0b00010111;
  2232  001BF0  0E17               	movlw	23
  2233  001BF2  6ED5               	movwf	4053,c	;volatile
  2234                           
  2235                           ;sort.c: 131: TMR0H = 0b10000101;
  2236  001BF4  0E85               	movlw	133
  2237  001BF6  6ED7               	movwf	4055,c	;volatile
  2238                           
  2239                           ;sort.c: 132: TMR0L = 0b11101110;
  2240  001BF8  0EEE               	movlw	238
  2241  001BFA  6ED6               	movwf	4054,c	;volatile
  2242                           
  2243                           ; BSR set to: 0
  2244                           ;sort.c: 134: T0CON = T0CON | 0b10000000;
  2245  001BFC  50D5               	movf	4053,w,c	;volatile
  2246  001BFE  0980               	iorlw	128
  2247  001C00  6ED5               	movwf	4053,c	;volatile
  2248                           
  2249                           ; BSR set to: 0
  2250  001C02  0012               	return		;funcret
  2251  001C04                     __end_of_initSortTimer:
  2252                           	opt stack 0
  2253                           tblptru	equ	0xFF8
  2254                           tblptrh	equ	0xFF7
  2255                           tblptrl	equ	0xFF6
  2256                           tablat	equ	0xFF5
  2257                           prodh	equ	0xFF4
  2258                           prodl	equ	0xFF3
  2259                           postinc0	equ	0xFEE
  2260                           wreg	equ	0xFE8
  2261                           postdec1	equ	0xFE5
  2262                           fsr1l	equ	0xFE1
  2263                           indf2	equ	0xFDF
  2264                           postinc2	equ	0xFDE
  2265                           postdec2	equ	0xFDD
  2266                           fsr2h	equ	0xFDA
  2267                           fsr2l	equ	0xFD9
  2268                           status	equ	0xFD8
  2269                           
  2270 ;; *************** function _getIR *****************
  2271 ;; Defined at:
  2272 ;;		line 165 in file "sort.c"
  2273 ;; Parameters:    Size  Location     Type
  2274 ;;		None
  2275 ;; Auto vars:     Size  Location     Type
  2276 ;;  i               2   22[BANK0 ] int 
  2277 ;;  timeBroken     14    8[BANK0 ] int [7]
  2278 ;; Return value:  Size  Location     Type
  2279 ;;                  1    wreg      void 
  2280 ;; Registers used:
  2281 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2282 ;; Tracked objects:
  2283 ;;		On entry : 0/0
  2284 ;;		On exit  : 0/0
  2285 ;;		Unchanged: 0/0
  2286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2288 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2289 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2290 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2291 ;;Total ram usage:       19 bytes
  2292 ;; Hardware stack levels used:    1
  2293 ;; Hardware stack levels required when called:   10
  2294 ;; This function calls:
  2295 ;;		_getRTC
  2296 ;; This function is called by:
  2297 ;;		_Loading
  2298 ;; This function uses a non-reentrant model
  2299 ;;
  2300                           
  2301                           	psect	text5
  2302  001912                     __ptext5:
  2303                           	opt stack 0
  2304  001912                     _getIR:
  2305                           	opt stack 18
  2306                           
  2307                           ;sort.c: 167: getRTC();
  2308                           
  2309                           ; BSR set to: 0
  2310                           ;incstack = 0
  2311  001912  EC39  F00F         	call	_getRTC	;wreg free
  2312                           
  2313                           ;sort.c: 168: int timeBroken[7];
  2314                           ;sort.c: 169: for(int i = 0; i < 7; i++){
  2315  001916  0E00               	movlw	0
  2316  001918  0100               	movlb	0	; () banked
  2317  00191A  6F97               	movwf	(getIR@i+1)& (0+255),b
  2318  00191C  0E00               	movlw	0
  2319  00191E  6F96               	movwf	getIR@i& (0+255),b
  2320  001920                     l4323:
  2321                           
  2322                           ; BSR set to: 0
  2323  001920  0100               	movlb	0	; () banked
  2324  001922  BF97               	btfsc	(getIR@i+1)& (0+255),7,b
  2325  001924  D008               	goto	l4327
  2326  001926  0100               	movlb	0	; () banked
  2327  001928  5197               	movf	(getIR@i+1)& (0+255),w,b
  2328  00192A  E151               	bnz	l4339
  2329  00192C  0E07               	movlw	7
  2330  00192E  0100               	movlb	0	; () banked
  2331  001930  5D96               	subwf	getIR@i& (0+255),w,b
  2332  001932  B0D8               	btfsc	status,0,c
  2333  001934  D04C               	goto	l4339
  2334  001936                     l4327:
  2335                           
  2336                           ; BSR set to: 0
  2337                           ;sort.c: 170: timeBroken[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  2338  001936  0ED4               	movlw	low _time
  2339  001938  0100               	movlb	0	; () banked
  2340  00193A  2596               	addwf	getIR@i& (0+255),w,b
  2341  00193C  6ED9               	movwf	fsr2l,c
  2342  00193E  0E00               	movlw	high _time
  2343  001940  0100               	movlb	0	; () banked
  2344  001942  2197               	addwfc	(getIR@i+1)& (0+255),w,b
  2345  001944  6EDA               	movwf	fsr2h,c
  2346  001946  50DF               	movf	indf2,w,c
  2347  001948  0100               	movlb	0	; () banked
  2348  00194A  6F85               	movwf	??_getIR& (0+255),b
  2349  00194C  0100               	movlb	0	; () banked
  2350  00194E  3B85               	swapf	??_getIR& (0+255),f,b
  2351  001950  0E0F               	movlw	15
  2352  001952  1785               	andwf	??_getIR& (0+255),f,b
  2353  001954  0E0F               	movlw	15
  2354  001956  0100               	movlb	0	; () banked
  2355  001958  1785               	andwf	??_getIR& (0+255),f,b
  2356  00195A  0100               	movlb	0	; () banked
  2357  00195C  5185               	movf	??_getIR& (0+255),w,b
  2358  00195E  0D0A               	mullw	10
  2359  001960  0ED4               	movlw	low _time
  2360  001962  0100               	movlb	0	; () banked
  2361  001964  2596               	addwf	getIR@i& (0+255),w,b
  2362  001966  6ED9               	movwf	fsr2l,c
  2363  001968  0E00               	movlw	high _time
  2364  00196A  0100               	movlb	0	; () banked
  2365  00196C  2197               	addwfc	(getIR@i+1)& (0+255),w,b
  2366  00196E  6EDA               	movwf	fsr2h,c
  2367  001970  50DF               	movf	indf2,w,c
  2368  001972  0B0F               	andlw	15
  2369  001974  0100               	movlb	0	; () banked
  2370  001976  6F86               	movwf	(??_getIR+1)& (0+255),b
  2371  001978  6B87               	clrf	(??_getIR+2)& (0+255),b
  2372  00197A  50F3               	movf	prodl,w,c
  2373  00197C  0100               	movlb	0	; () banked
  2374  00197E  2786               	addwf	(??_getIR+1)& (0+255),f,b
  2375  001980  50F4               	movf	prodh,w,c
  2376  001982  0100               	movlb	0	; () banked
  2377  001984  2387               	addwfc	(??_getIR+2)& (0+255),f,b
  2378  001986  90D8               	bcf	status,0,c
  2379  001988  0100               	movlb	0	; () banked
  2380  00198A  3596               	rlcf	getIR@i& (0+255),w,b
  2381  00198C  6ED9               	movwf	fsr2l,c
  2382  00198E  0100               	movlb	0	; () banked
  2383  001990  3597               	rlcf	(getIR@i+1)& (0+255),w,b
  2384  001992  6EDA               	movwf	fsr2h,c
  2385  001994  0E88               	movlw	low getIR@timeBroken
  2386  001996  26D9               	addwf	fsr2l,f,c
  2387  001998  0E00               	movlw	high getIR@timeBroken
  2388  00199A  22DA               	addwfc	fsr2h,f,c
  2389  00199C  C086  FFDE         	movff	??_getIR+1,postinc2
  2390  0019A0  C087  FFDD         	movff	??_getIR+2,postdec2
  2391                           
  2392                           ; BSR set to: 0
  2393  0019A4  0100               	movlb	0	; () banked
  2394  0019A6  4B96               	infsnz	getIR@i& (0+255),f,b
  2395  0019A8  2B97               	incf	(getIR@i+1)& (0+255),f,b
  2396  0019AA  D7BA               	goto	l4323
  2397  0019AC                     l4333:
  2398                           
  2399                           ; BSR set to: 0
  2400                           ;sort.c: 175: if (beamTimerCounter > 3125){
  2401  0019AC  0100               	movlb	0	; () banked
  2402  0019AE  BFDE               	btfsc	(_beamTimerCounter+1)& (0+255),7,b
  2403  0019B0  D00E               	goto	l4339
  2404  0019B2  0E36               	movlw	54
  2405  0019B4  0100               	movlb	0	; () banked
  2406  0019B6  5DDD               	subwf	_beamTimerCounter& (0+255),w,b
  2407  0019B8  0E0C               	movlw	12
  2408  0019BA  0100               	movlb	0	; () banked
  2409  0019BC  59DE               	subwfb	(_beamTimerCounter+1)& (0+255),w,b
  2410  0019BE  A0D8               	btfss	status,0,c
  2411  0019C0  D006               	goto	l4339
  2412                           
  2413                           ; BSR set to: 0
  2414                           ;sort.c: 176: f_loadingNewCan = 1;
  2415  0019C2  0E00               	movlw	0
  2416  0019C4  0100               	movlb	0	; () banked
  2417  0019C6  6FEC               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2418  0019C8  0E01               	movlw	1
  2419  0019CA  6FEB               	movwf	_f_loadingNewCan& (0+255),b
  2420                           
  2421                           ; BSR set to: 0
  2422                           ;sort.c: 177: return;
  2423  0019CC  0012               	return	
  2424  0019CE                     l4339:
  2425                           
  2426                           ; BSR set to: 0
  2427  0019CE  0100               	movlb	0	; () banked
  2428  0019D0  51DB               	movf	_IR_in& (0+255),w,b
  2429  0019D2  0100               	movlb	0	; () banked
  2430  0019D4  11DC               	iorwf	(_IR_in+1)& (0+255),w,b
  2431  0019D6  A4D8               	btfss	status,2,c
  2432  0019D8  0012               	return	
  2433  0019DA  D7E8               	goto	l4333
  2434  0019DC                     __end_of_getIR:
  2435                           	opt stack 0
  2436                           tblptru	equ	0xFF8
  2437                           tblptrh	equ	0xFF7
  2438                           tblptrl	equ	0xFF6
  2439                           tablat	equ	0xFF5
  2440                           prodh	equ	0xFF4
  2441                           prodl	equ	0xFF3
  2442                           postinc0	equ	0xFEE
  2443                           wreg	equ	0xFE8
  2444                           postdec1	equ	0xFE5
  2445                           fsr1l	equ	0xFE1
  2446                           indf2	equ	0xFDF
  2447                           postinc2	equ	0xFDE
  2448                           postdec2	equ	0xFDD
  2449                           fsr2h	equ	0xFDA
  2450                           fsr2l	equ	0xFD9
  2451                           status	equ	0xFD8
  2452                           
  2453 ;; *************** function _ID *****************
  2454 ;; Defined at:
  2455 ;;		line 72 in file "sort.c"
  2456 ;; Parameters:    Size  Location     Type
  2457 ;;		None
  2458 ;; Auto vars:     Size  Location     Type
  2459 ;;  magnetic        2    8[BANK0 ] int 
  2460 ;;  side_conduct    2    6[BANK0 ] int 
  2461 ;;  top_bottom_c    2    4[BANK0 ] int 
  2462 ;; Return value:  Size  Location     Type
  2463 ;;                  1    wreg      void 
  2464 ;; Registers used:
  2465 ;;		wreg, status,2, status,0, cstack
  2466 ;; Tracked objects:
  2467 ;;		On entry : 0/0
  2468 ;;		On exit  : 0/0
  2469 ;;		Unchanged: 0/0
  2470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2472 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2473 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2474 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2475 ;;Total ram usage:        7 bytes
  2476 ;; Hardware stack levels used:    1
  2477 ;; Hardware stack levels required when called:    8
  2478 ;; This function calls:
  2479 ;;		_MAGNETISM_in
  2480 ;;		_moveServoBlock
  2481 ;; This function is called by:
  2482 ;;		_sort
  2483 ;; This function uses a non-reentrant model
  2484 ;;
  2485                           
  2486                           	psect	text6
  2487  001C04                     __ptext6:
  2488                           	opt stack 0
  2489  001C04                     _ID:
  2490                           	opt stack 21
  2491                           
  2492                           ;sort.c: 73: if(f_can_coming_to_ID){
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;incstack = 0
  2496  001C04  0100               	movlb	0	; () banked
  2497  001C06  51E3               	movf	_f_can_coming_to_ID& (0+255),w,b
  2498  001C08  0100               	movlb	0	; () banked
  2499  001C0A  11E4               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  2500  001C0C  B4D8               	btfsc	status,2,c
  2501  001C0E  0012               	return	
  2502                           
  2503                           ; BSR set to: 0
  2504                           ;sort.c: 78: int side_conductivity = 0;
  2505  001C10  0E00               	movlw	0
  2506  001C12  0100               	movlb	0	; () banked
  2507  001C14  6F87               	movwf	(ID@side_conductivity+1)& (0+255),b
  2508  001C16  0E00               	movlw	0
  2509  001C18  6F86               	movwf	ID@side_conductivity& (0+255),b
  2510                           
  2511                           ;sort.c: 79: int magnetic = 0;
  2512  001C1A  0E00               	movlw	0
  2513  001C1C  0100               	movlb	0	; () banked
  2514  001C1E  6F89               	movwf	(ID@magnetic+1)& (0+255),b
  2515  001C20  0E00               	movlw	0
  2516  001C22  6F88               	movwf	ID@magnetic& (0+255),b
  2517                           
  2518                           ;sort.c: 80: int top_bottom_conductivity = 0;
  2519  001C24  0E00               	movlw	0
  2520  001C26  0100               	movlb	0	; () banked
  2521  001C28  6F85               	movwf	(ID@top_bottom_conductivity+1)& (0+255),b
  2522  001C2A  0E00               	movlw	0
  2523  001C2C  6F84               	movwf	ID@top_bottom_conductivity& (0+255),b
  2524                           
  2525                           ;sort.c: 82: side_conductivity = PORTAbits.RA2;
  2526  001C2E  A480               	btfss	3968,2,c	;volatile
  2527  001C30  D004               	goto	u3410
  2528  001C32  0100               	movlb	0	; () banked
  2529  001C34  6B83               	clrf	??_ID& (0+255),b
  2530  001C36  2B83               	incf	??_ID& (0+255),f,b
  2531  001C38  D002               	goto	u3418
  2532  001C3A                     u3410:
  2533  001C3A  0100               	movlb	0	; () banked
  2534  001C3C  6B83               	clrf	??_ID& (0+255),b
  2535  001C3E                     u3418:
  2536  001C3E  0100               	movlb	0	; () banked
  2537  001C40  5183               	movf	??_ID& (0+255),w,b
  2538  001C42  0100               	movlb	0	; () banked
  2539  001C44  6F86               	movwf	ID@side_conductivity& (0+255),b
  2540  001C46  6B87               	clrf	(ID@side_conductivity+1)& (0+255),b
  2541                           
  2542                           ; BSR set to: 0
  2543                           ;sort.c: 83: if(!side_conductivity){
  2544  001C48  0100               	movlb	0	; () banked
  2545  001C4A  5186               	movf	ID@side_conductivity& (0+255),w,b
  2546  001C4C  0100               	movlb	0	; () banked
  2547  001C4E  1187               	iorwf	(ID@side_conductivity+1)& (0+255),w,b
  2548  001C50  A4D8               	btfss	status,2,c
  2549  001C52  D01B               	goto	l4643
  2550                           
  2551                           ; BSR set to: 0
  2552                           ;sort.c: 84: magnetic = MAGNETISM_in();
  2553  001C54  EC75  F014         	call	_MAGNETISM_in	;wreg free
  2554  001C58  C080  F088         	movff	?_MAGNETISM_in,ID@magnetic
  2555  001C5C  C081  F089         	movff	?_MAGNETISM_in+1,ID@magnetic+1
  2556                           
  2557                           ;sort.c: 85: if(!magnetic){
  2558  001C60  0100               	movlb	0	; () banked
  2559  001C62  5188               	movf	ID@magnetic& (0+255),w,b
  2560  001C64  0100               	movlb	0	; () banked
  2561  001C66  1189               	iorwf	(ID@magnetic+1)& (0+255),w,b
  2562  001C68  A4D8               	btfss	status,2,c
  2563  001C6A  D00F               	goto	l4643
  2564                           
  2565                           ; BSR set to: 0
  2566                           ;sort.c: 86: LATAbits.LATA3 = 1;
  2567  001C6C  8689               	bsf	3977,3,c	;volatile
  2568                           
  2569                           ; BSR set to: 0
  2570                           ;sort.c: 88: top_bottom_conductivity = PORTAbits.RA2;
  2571  001C6E  A480               	btfss	3968,2,c	;volatile
  2572  001C70  D004               	goto	u3440
  2573  001C72  0100               	movlb	0	; () banked
  2574  001C74  6B83               	clrf	??_ID& (0+255),b
  2575  001C76  2B83               	incf	??_ID& (0+255),f,b
  2576  001C78  D002               	goto	u3448
  2577  001C7A                     u3440:
  2578  001C7A  0100               	movlb	0	; () banked
  2579  001C7C  6B83               	clrf	??_ID& (0+255),b
  2580  001C7E                     u3448:
  2581  001C7E  0100               	movlb	0	; () banked
  2582  001C80  5183               	movf	??_ID& (0+255),w,b
  2583  001C82  0100               	movlb	0	; () banked
  2584  001C84  6F84               	movwf	ID@top_bottom_conductivity& (0+255),b
  2585  001C86  6B85               	clrf	(ID@top_bottom_conductivity+1)& (0+255),b
  2586                           
  2587                           ; BSR set to: 0
  2588                           ;sort.c: 89: LATAbits.LATA3 = 0;
  2589  001C88  9689               	bcf	3977,3,c	;volatile
  2590  001C8A                     l4643:
  2591                           
  2592                           ; BSR set to: 0
  2593                           ;sort.c: 90: }
  2594                           ;sort.c: 91: }
  2595                           ;sort.c: 94: moveServoBlock(Lower);
  2596  001C8A  0E01               	movlw	1
  2597  001C8C  ECE3  F011         	call	_moveServoBlock
  2598                           
  2599                           ;sort.c: 96: f_can_coming_to_distribution = 1;
  2600  001C90  0E00               	movlw	0
  2601  001C92  0100               	movlb	0	; () banked
  2602  001C94  6FE6               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  2603  001C96  0E01               	movlw	1
  2604  001C98  6FE5               	movwf	_f_can_coming_to_distribution& (0+255),b
  2605                           
  2606                           ;sort.c: 97: moveServoBlock(Raise);
  2607  001C9A  0E00               	movlw	0
  2608  001C9C  ECE3  F011         	call	_moveServoBlock
  2609                           
  2610                           ;sort.c: 98: f_can_coming_to_ID = 0;
  2611  001CA0  0E00               	movlw	0
  2612  001CA2  0100               	movlb	0	; () banked
  2613  001CA4  6FE4               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2614  001CA6  0E00               	movlw	0
  2615  001CA8  6FE3               	movwf	_f_can_coming_to_ID& (0+255),b
  2616  001CAA  0012               	return	
  2617  001CAC                     __end_of_ID:
  2618                           	opt stack 0
  2619                           tblptru	equ	0xFF8
  2620                           tblptrh	equ	0xFF7
  2621                           tblptrl	equ	0xFF6
  2622                           tablat	equ	0xFF5
  2623                           prodh	equ	0xFF4
  2624                           prodl	equ	0xFF3
  2625                           postinc0	equ	0xFEE
  2626                           wreg	equ	0xFE8
  2627                           postdec1	equ	0xFE5
  2628                           fsr1l	equ	0xFE1
  2629                           indf2	equ	0xFDF
  2630                           postinc2	equ	0xFDE
  2631                           postdec2	equ	0xFDD
  2632                           fsr2h	equ	0xFDA
  2633                           fsr2l	equ	0xFD9
  2634                           status	equ	0xFD8
  2635                           
  2636 ;; *************** function _moveServoBlock *****************
  2637 ;; Defined at:
  2638 ;;		line 187 in file "sort.c"
  2639 ;; Parameters:    Size  Location     Type
  2640 ;;  myPosition      1    wreg     enum E3130
  2641 ;; Auto vars:     Size  Location     Type
  2642 ;;  myPosition      1    2[BANK0 ] enum E3130
  2643 ;;  pwmTimer        2    0[BANK0 ] int 
  2644 ;; Return value:  Size  Location     Type
  2645 ;;                  1    wreg      void 
  2646 ;; Registers used:
  2647 ;;		wreg, status,2, status,0
  2648 ;; Tracked objects:
  2649 ;;		On entry : 0/0
  2650 ;;		On exit  : 0/0
  2651 ;;		Unchanged: 0/0
  2652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2654 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2656 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2657 ;;Total ram usage:        3 bytes
  2658 ;; Hardware stack levels used:    1
  2659 ;; Hardware stack levels required when called:    7
  2660 ;; This function calls:
  2661 ;;		Nothing
  2662 ;; This function is called by:
  2663 ;;		_ID
  2664 ;; This function uses a non-reentrant model
  2665 ;;
  2666                           
  2667                           	psect	text7
  2668  0023C6                     __ptext7:
  2669                           	opt stack 0
  2670  0023C6                     _moveServoBlock:
  2671                           	opt stack 21
  2672                           
  2673                           ; BSR set to: 0
  2674                           ;incstack = 0
  2675                           ;moveServoBlock@myPosition stored from wreg
  2676  0023C6  0100               	movlb	0	; () banked
  2677  0023C8  6F82               	movwf	moveServoBlock@myPosition& (0+255),b
  2678                           
  2679                           ;sort.c: 190: int pwmTimer = 0b0;
  2680  0023CA  0E00               	movlw	0
  2681  0023CC  0100               	movlb	0	; () banked
  2682  0023CE  6F81               	movwf	(moveServoBlock@pwmTimer+1)& (0+255),b
  2683  0023D0  0E00               	movlw	0
  2684  0023D2  6F80               	movwf	moveServoBlock@pwmTimer& (0+255),b
  2685                           
  2686                           ;sort.c: 192: switch(myPosition){
  2687  0023D4  D00C               	goto	l4349
  2688  0023D6                     l4343:
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;sort.c: 194: pwmTimer = 2;
  2692  0023D6  0E00               	movlw	0
  2693  0023D8  0100               	movlb	0	; () banked
  2694  0023DA  6F81               	movwf	(moveServoBlock@pwmTimer+1)& (0+255),b
  2695  0023DC  0E02               	movlw	2
  2696  0023DE  6F80               	movwf	moveServoBlock@pwmTimer& (0+255),b
  2697                           
  2698                           ;sort.c: 195: break;
  2699  0023E0  0012               	return	
  2700  0023E2                     l4345:
  2701                           
  2702                           ; BSR set to: 0
  2703                           ;sort.c: 197: pwmTimer = 1;
  2704  0023E2  0E00               	movlw	0
  2705  0023E4  0100               	movlb	0	; () banked
  2706  0023E6  6F81               	movwf	(moveServoBlock@pwmTimer+1)& (0+255),b
  2707  0023E8  0E01               	movlw	1
  2708  0023EA  6F80               	movwf	moveServoBlock@pwmTimer& (0+255),b
  2709                           
  2710                           ; BSR set to: 0
  2711                           ;sort.c: 201: }
  2712                           
  2713                           ; BSR set to: 0
  2714                           ;sort.c: 200: break;
  2715                           
  2716                           ;sort.c: 199: default:
  2717                           
  2718                           ;sort.c: 198: break;
  2719  0023EC  0012               	return	
  2720  0023EE                     l4349:
  2721                           
  2722                           ; BSR set to: 0
  2723  0023EE  0100               	movlb	0	; () banked
  2724  0023F0  5182               	movf	moveServoBlock@myPosition& (0+255),w,b
  2725                           
  2726                           ; Switch size 1, requested type "space"
  2727                           ; Number of cases is 2, Range of values is 0 to 1
  2728                           ; switch strategies available:
  2729                           ; Name         Instructions Cycles
  2730                           ; simple_byte            7     4 (average)
  2731                           ;	Chosen strategy is simple_byte
  2732  0023F2  0A00               	xorlw	0	; case 0
  2733  0023F4  B4D8               	btfsc	status,2,c
  2734  0023F6  D7EF               	goto	l4343
  2735  0023F8  0A01               	xorlw	1	; case 1
  2736  0023FA  A4D8               	btfss	status,2,c
  2737  0023FC  0012               	return	
  2738  0023FE  D7F1               	goto	l4345
  2739  002400                     __end_of_moveServoBlock:
  2740                           	opt stack 0
  2741                           tblptru	equ	0xFF8
  2742                           tblptrh	equ	0xFF7
  2743                           tblptrl	equ	0xFF6
  2744                           tablat	equ	0xFF5
  2745                           prodh	equ	0xFF4
  2746                           prodl	equ	0xFF3
  2747                           postinc0	equ	0xFEE
  2748                           wreg	equ	0xFE8
  2749                           postdec1	equ	0xFE5
  2750                           fsr1l	equ	0xFE1
  2751                           indf2	equ	0xFDF
  2752                           postinc2	equ	0xFDE
  2753                           postdec2	equ	0xFDD
  2754                           fsr2h	equ	0xFDA
  2755                           fsr2l	equ	0xFD9
  2756                           status	equ	0xFD8
  2757                           
  2758 ;; *************** function _MAGNETISM_in *****************
  2759 ;; Defined at:
  2760 ;;		line 182 in file "sort.c"
  2761 ;; Parameters:    Size  Location     Type
  2762 ;;		None
  2763 ;; Auto vars:     Size  Location     Type
  2764 ;;		None
  2765 ;; Return value:  Size  Location     Type
  2766 ;;                  2    0[BANK0 ] int 
  2767 ;; Registers used:
  2768 ;;		None
  2769 ;; Tracked objects:
  2770 ;;		On entry : 0/0
  2771 ;;		On exit  : 0/0
  2772 ;;		Unchanged: 0/0
  2773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2774 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2777 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2778 ;;Total ram usage:        2 bytes
  2779 ;; Hardware stack levels used:    1
  2780 ;; Hardware stack levels required when called:    7
  2781 ;; This function calls:
  2782 ;;		Nothing
  2783 ;; This function is called by:
  2784 ;;		_ID
  2785 ;; This function uses a non-reentrant model
  2786 ;;
  2787                           
  2788                           	psect	text8
  2789  0028EA                     __ptext8:
  2790                           	opt stack 0
  2791  0028EA                     _MAGNETISM_in:
  2792                           	opt stack 21
  2793                           
  2794                           ; BSR set to: 0
  2795                           ;incstack = 0
  2796  0028EA  0012               	return		;funcret
  2797  0028EC                     __end_of_MAGNETISM_in:
  2798                           	opt stack 0
  2799                           tblptru	equ	0xFF8
  2800                           tblptrh	equ	0xFF7
  2801                           tblptrl	equ	0xFF6
  2802                           tablat	equ	0xFF5
  2803                           prodh	equ	0xFF4
  2804                           prodl	equ	0xFF3
  2805                           postinc0	equ	0xFEE
  2806                           wreg	equ	0xFE8
  2807                           postdec1	equ	0xFE5
  2808                           fsr1l	equ	0xFE1
  2809                           indf2	equ	0xFDF
  2810                           postinc2	equ	0xFDE
  2811                           postdec2	equ	0xFDD
  2812                           fsr2h	equ	0xFDA
  2813                           fsr2l	equ	0xFD9
  2814                           status	equ	0xFD8
  2815                           
  2816 ;; *************** function _Distribution *****************
  2817 ;; Defined at:
  2818 ;;		line 101 in file "sort.c"
  2819 ;; Parameters:    Size  Location     Type
  2820 ;;		None
  2821 ;; Auto vars:     Size  Location     Type
  2822 ;;		None
  2823 ;; Return value:  Size  Location     Type
  2824 ;;                  1    wreg      void 
  2825 ;; Registers used:
  2826 ;;		wreg, status,2, status,0, cstack
  2827 ;; Tracked objects:
  2828 ;;		On entry : 0/0
  2829 ;;		On exit  : 0/0
  2830 ;;		Unchanged: 0/0
  2831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2836 ;;Total ram usage:        0 bytes
  2837 ;; Hardware stack levels used:    1
  2838 ;; Hardware stack levels required when called:    8
  2839 ;; This function calls:
  2840 ;;		_moveServoCup
  2841 ;; This function is called by:
  2842 ;;		_sort
  2843 ;; This function uses a non-reentrant model
  2844 ;;
  2845                           
  2846                           	psect	text9
  2847  00249E                     __ptext9:
  2848                           	opt stack 0
  2849  00249E                     _Distribution:
  2850                           	opt stack 21
  2851                           
  2852                           ;sort.c: 102: if(f_can_coming_to_distribution){
  2853                           
  2854                           ;incstack = 0
  2855  00249E  0100               	movlb	0	; () banked
  2856  0024A0  51E5               	movf	_f_can_coming_to_distribution& (0+255),w,b
  2857  0024A2  0100               	movlb	0	; () banked
  2858  0024A4  11E6               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  2859  0024A6  B4D8               	btfsc	status,2,c
  2860  0024A8  0012               	return	
  2861                           
  2862                           ; BSR set to: 0
  2863                           ;sort.c: 104: moveServoCup(canType);
  2864  0024AA  0100               	movlb	0	; () banked
  2865  0024AC  51F3               	movf	_canType& (0+255),w,b
  2866  0024AE  ECF8  F00F         	call	_moveServoCup
  2867                           
  2868                           ;sort.c: 106: moveServoCup(Home);
  2869  0024B2  0E00               	movlw	0
  2870  0024B4  ECF8  F00F         	call	_moveServoCup
  2871                           
  2872                           ;sort.c: 107: f_can_coming_to_distribution = 0;
  2873  0024B8  0E00               	movlw	0
  2874  0024BA  0100               	movlb	0	; () banked
  2875  0024BC  6FE6               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  2876  0024BE  0E00               	movlw	0
  2877  0024C0  6FE5               	movwf	_f_can_coming_to_distribution& (0+255),b
  2878                           
  2879                           ; BSR set to: 0
  2880                           ;sort.c: 108: f_can_distributed = 1;
  2881  0024C2  0E00               	movlw	0
  2882  0024C4  0100               	movlb	0	; () banked
  2883  0024C6  6FE8               	movwf	(_f_can_distributed+1)& (0+255),b
  2884  0024C8  0E01               	movlw	1
  2885  0024CA  6FE7               	movwf	_f_can_distributed& (0+255),b
  2886  0024CC  0012               	return	
  2887  0024CE                     __end_of_Distribution:
  2888                           	opt stack 0
  2889                           tblptru	equ	0xFF8
  2890                           tblptrh	equ	0xFF7
  2891                           tblptrl	equ	0xFF6
  2892                           tablat	equ	0xFF5
  2893                           prodh	equ	0xFF4
  2894                           prodl	equ	0xFF3
  2895                           postinc0	equ	0xFEE
  2896                           wreg	equ	0xFE8
  2897                           postdec1	equ	0xFE5
  2898                           fsr1l	equ	0xFE1
  2899                           indf2	equ	0xFDF
  2900                           postinc2	equ	0xFDE
  2901                           postdec2	equ	0xFDD
  2902                           fsr2h	equ	0xFDA
  2903                           fsr2l	equ	0xFD9
  2904                           status	equ	0xFD8
  2905                           
  2906 ;; *************** function _moveServoCup *****************
  2907 ;; Defined at:
  2908 ;;		line 204 in file "sort.c"
  2909 ;; Parameters:    Size  Location     Type
  2910 ;;  myPosition      1    wreg     enum E3123
  2911 ;; Auto vars:     Size  Location     Type
  2912 ;;  myPosition      1    0[BANK0 ] enum E3123
  2913 ;;  pwmTimer        2    1[BANK0 ] int 
  2914 ;; Return value:  Size  Location     Type
  2915 ;;                  1    wreg      void 
  2916 ;; Registers used:
  2917 ;;		wreg, status,2, status,0
  2918 ;; Tracked objects:
  2919 ;;		On entry : 0/0
  2920 ;;		On exit  : 0/0
  2921 ;;		Unchanged: 0/0
  2922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2924 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2926 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2927 ;;Total ram usage:        3 bytes
  2928 ;; Hardware stack levels used:    1
  2929 ;; Hardware stack levels required when called:    7
  2930 ;; This function calls:
  2931 ;;		Nothing
  2932 ;; This function is called by:
  2933 ;;		_Distribution
  2934 ;; This function uses a non-reentrant model
  2935 ;;
  2936                           
  2937                           	psect	text10
  2938  001FF0                     __ptext10:
  2939                           	opt stack 0
  2940  001FF0                     _moveServoCup:
  2941                           	opt stack 21
  2942                           
  2943                           ; BSR set to: 0
  2944                           ;incstack = 0
  2945                           ;moveServoCup@myPosition stored from wreg
  2946  001FF0  0100               	movlb	0	; () banked
  2947  001FF2  6F80               	movwf	moveServoCup@myPosition& (0+255),b
  2948                           
  2949                           ;sort.c: 209: int pwmTimer = 0;
  2950  001FF4  0E00               	movlw	0
  2951  001FF6  0100               	movlb	0	; () banked
  2952  001FF8  6F82               	movwf	(moveServoCup@pwmTimer+1)& (0+255),b
  2953  001FFA  0E00               	movlw	0
  2954  001FFC  6F81               	movwf	moveServoCup@pwmTimer& (0+255),b
  2955                           
  2956                           ;sort.c: 210: T1CON = 0;
  2957  001FFE  0E00               	movlw	0
  2958  002000  6ECD               	movwf	4045,c	;volatile
  2959                           
  2960                           ;sort.c: 212: switch(myPosition){
  2961  002002  D01E               	goto	l4365
  2962  002004                     l4353:
  2963                           
  2964                           ; BSR set to: 0
  2965                           ;sort.c: 214: pwmTimer = 1.5;
  2966  002004  0E00               	movlw	0
  2967  002006  0100               	movlb	0	; () banked
  2968  002008  6F82               	movwf	(moveServoCup@pwmTimer+1)& (0+255),b
  2969  00200A  0E01               	movlw	1
  2970  00200C  6F81               	movwf	moveServoCup@pwmTimer& (0+255),b
  2971                           
  2972                           ;sort.c: 215: break;
  2973  00200E  0012               	return	
  2974  002010                     l4355:
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;sort.c: 217: pwmTimer = 1;
  2978  002010  0E00               	movlw	0
  2979  002012  0100               	movlb	0	; () banked
  2980  002014  6F82               	movwf	(moveServoCup@pwmTimer+1)& (0+255),b
  2981  002016  0E01               	movlw	1
  2982  002018  6F81               	movwf	moveServoCup@pwmTimer& (0+255),b
  2983                           
  2984                           ;sort.c: 218: break;
  2985  00201A  0012               	return	
  2986  00201C                     l4357:
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;sort.c: 220: pwmTimer = 1.25;
  2990  00201C  0E00               	movlw	0
  2991  00201E  0100               	movlb	0	; () banked
  2992  002020  6F82               	movwf	(moveServoCup@pwmTimer+1)& (0+255),b
  2993  002022  0E01               	movlw	1
  2994  002024  6F81               	movwf	moveServoCup@pwmTimer& (0+255),b
  2995                           
  2996                           ;sort.c: 221: break;
  2997  002026  0012               	return	
  2998  002028                     l4359:
  2999                           
  3000                           ; BSR set to: 0
  3001                           ;sort.c: 223: pwmTimer = 1.75;
  3002  002028  0E00               	movlw	0
  3003  00202A  0100               	movlb	0	; () banked
  3004  00202C  6F82               	movwf	(moveServoCup@pwmTimer+1)& (0+255),b
  3005  00202E  0E01               	movlw	1
  3006  002030  6F81               	movwf	moveServoCup@pwmTimer& (0+255),b
  3007                           
  3008                           ;sort.c: 224: break;
  3009  002032  0012               	return	
  3010  002034                     l4361:
  3011                           
  3012                           ; BSR set to: 0
  3013                           ;sort.c: 226: pwmTimer = 2;
  3014  002034  0E00               	movlw	0
  3015  002036  0100               	movlb	0	; () banked
  3016  002038  6F82               	movwf	(moveServoCup@pwmTimer+1)& (0+255),b
  3017  00203A  0E02               	movlw	2
  3018  00203C  6F81               	movwf	moveServoCup@pwmTimer& (0+255),b
  3019                           
  3020                           ; BSR set to: 0
  3021                           ;sort.c: 230: }
  3022                           
  3023                           ; BSR set to: 0
  3024                           ;sort.c: 229: break;
  3025                           
  3026                           ;sort.c: 228: default:
  3027                           
  3028                           ;sort.c: 227: break;
  3029  00203E  0012               	return	
  3030  002040                     l4365:
  3031                           
  3032                           ; BSR set to: 0
  3033  002040  0100               	movlb	0	; () banked
  3034  002042  5180               	movf	moveServoCup@myPosition& (0+255),w,b
  3035                           
  3036                           ; Switch size 1, requested type "space"
  3037                           ; Number of cases is 5, Range of values is 0 to 4
  3038                           ; switch strategies available:
  3039                           ; Name         Instructions Cycles
  3040                           ; simple_byte           16     9 (average)
  3041                           ;	Chosen strategy is simple_byte
  3042  002044  0A00               	xorlw	0	; case 0
  3043  002046  B4D8               	btfsc	status,2,c
  3044  002048  D7DD               	goto	l4353
  3045  00204A  0A01               	xorlw	1	; case 1
  3046  00204C  B4D8               	btfsc	status,2,c
  3047  00204E  D7E0               	goto	l4355
  3048  002050  0A03               	xorlw	3	; case 2
  3049  002052  B4D8               	btfsc	status,2,c
  3050  002054  D7E3               	goto	l4357
  3051  002056  0A01               	xorlw	1	; case 3
  3052  002058  B4D8               	btfsc	status,2,c
  3053  00205A  D7E6               	goto	l4359
  3054  00205C  0A07               	xorlw	7	; case 4
  3055  00205E  A4D8               	btfss	status,2,c
  3056  002060  0012               	return	
  3057  002062  D7E8               	goto	l4361
  3058  002064                     __end_of_moveServoCup:
  3059                           	opt stack 0
  3060                           tblptru	equ	0xFF8
  3061                           tblptrh	equ	0xFF7
  3062                           tblptrl	equ	0xFF6
  3063                           tablat	equ	0xFF5
  3064                           prodh	equ	0xFF4
  3065                           prodl	equ	0xFF3
  3066                           postinc0	equ	0xFEE
  3067                           wreg	equ	0xFE8
  3068                           postdec1	equ	0xFE5
  3069                           fsr1l	equ	0xFE1
  3070                           indf2	equ	0xFDF
  3071                           postinc2	equ	0xFDE
  3072                           postdec2	equ	0xFDD
  3073                           fsr2h	equ	0xFDA
  3074                           fsr2l	equ	0xFD9
  3075                           status	equ	0xFD8
  3076                           
  3077 ;; *************** function _machineConfig *****************
  3078 ;; Defined at:
  3079 ;;		line 13 in file "MachineConfig.c"
  3080 ;; Parameters:    Size  Location     Type
  3081 ;;		None
  3082 ;; Auto vars:     Size  Location     Type
  3083 ;;		None
  3084 ;; Return value:  Size  Location     Type
  3085 ;;                  2  586[None  ] int 
  3086 ;; Registers used:
  3087 ;;		wreg, status,2
  3088 ;; Tracked objects:
  3089 ;;		On entry : 0/0
  3090 ;;		On exit  : 0/0
  3091 ;;		Unchanged: 0/0
  3092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3097 ;;Total ram usage:        0 bytes
  3098 ;; Hardware stack levels used:    1
  3099 ;; Hardware stack levels required when called:    7
  3100 ;; This function calls:
  3101 ;;		Nothing
  3102 ;; This function is called by:
  3103 ;;		_main
  3104 ;; This function uses a non-reentrant model
  3105 ;;
  3106                           
  3107                           	psect	text11
  3108  0022F6                     __ptext11:
  3109                           	opt stack 0
  3110  0022F6                     _machineConfig:
  3111                           	opt stack 23
  3112                           
  3113                           ;MachineConfig.c: 15: OSCCON = 0b11110000;
  3114                           
  3115                           ; BSR set to: 0
  3116                           ;incstack = 0
  3117  0022F6  0EF0               	movlw	240
  3118  0022F8  6ED3               	movwf	4051,c	;volatile
  3119                           
  3120                           ;MachineConfig.c: 16: OSCTUNEbits.PLLEN = 1;
  3121  0022FA  8C9B               	bsf	3995,6,c	;volatile
  3122                           
  3123                           ;MachineConfig.c: 20: TRISA = 0b01000111;
  3124  0022FC  0E47               	movlw	71
  3125  0022FE  6E92               	movwf	3986,c	;volatile
  3126                           
  3127                           ;MachineConfig.c: 22: TRISB = 0b11110010;
  3128  002300  0EF2               	movlw	242
  3129  002302  6E93               	movwf	3987,c	;volatile
  3130                           
  3131                           ;MachineConfig.c: 25: TRISC = 0x00;
  3132  002304  0E00               	movlw	0
  3133  002306  6E94               	movwf	3988,c	;volatile
  3134                           
  3135                           ;MachineConfig.c: 29: TRISD = 0x00;
  3136  002308  0E00               	movlw	0
  3137  00230A  6E95               	movwf	3989,c	;volatile
  3138                           
  3139                           ;MachineConfig.c: 32: TRISE = 0x00;
  3140  00230C  0E00               	movlw	0
  3141  00230E  6E96               	movwf	3990,c	;volatile
  3142                           
  3143                           ;MachineConfig.c: 35: LATA = 0x00;
  3144  002310  0E00               	movlw	0
  3145  002312  6E89               	movwf	3977,c	;volatile
  3146                           
  3147                           ;MachineConfig.c: 36: LATB = 0x00;
  3148  002314  0E00               	movlw	0
  3149  002316  6E8A               	movwf	3978,c	;volatile
  3150                           
  3151                           ;MachineConfig.c: 37: LATC = 0x00;
  3152  002318  0E00               	movlw	0
  3153  00231A  6E8B               	movwf	3979,c	;volatile
  3154                           
  3155                           ;MachineConfig.c: 38: LATD = 0x00;
  3156  00231C  0E00               	movlw	0
  3157  00231E  6E8C               	movwf	3980,c	;volatile
  3158                           
  3159                           ;MachineConfig.c: 39: LATE = 0x00;
  3160  002320  0E00               	movlw	0
  3161  002322  6E8D               	movwf	3981,c	;volatile
  3162                           
  3163                           ;MachineConfig.c: 42: ADCON0 = 0x00;
  3164  002324  0E00               	movlw	0
  3165  002326  6EC2               	movwf	4034,c	;volatile
  3166                           
  3167                           ;MachineConfig.c: 43: ADCON1 = 0x0D;
  3168  002328  0E0D               	movlw	13
  3169  00232A  6EC1               	movwf	4033,c	;volatile
  3170                           
  3171                           ;MachineConfig.c: 46: CVRCON = 0x00;
  3172  00232C  0E00               	movlw	0
  3173  00232E  6EB5               	movwf	4021,c	;volatile
  3174                           
  3175                           ;MachineConfig.c: 47: CMCONbits.CIS = 0;
  3176  002330  96B4               	bcf	4020,3,c	;volatile
  3177                           
  3178                           ;MachineConfig.c: 48: ADFM = 1;
  3179  002332  8EC0               	bsf	4032,7,c	;volatile
  3180                           
  3181                           ;MachineConfig.c: 51: INT1IE = 1;
  3182  002334  86F0               	bsf	intcon3,3,c	;volatile
  3183                           
  3184                           ;MachineConfig.c: 52: TMR0IE = 1;
  3185  002336  8AF2               	bsf	intcon,5,c	;volatile
  3186                           
  3187                           ;MachineConfig.c: 53: TMR1IE = 1;
  3188  002338  809D               	bsf	3997,0,c	;volatile
  3189                           
  3190                           ;MachineConfig.c: 54: (INTCONbits.GIE = 0);
  3191  00233A  9EF2               	bcf	intcon,7,c	;volatile
  3192  00233C  0012               	return		;funcret
  3193  00233E                     __end_of_machineConfig:
  3194                           	opt stack 0
  3195                           tblptru	equ	0xFF8
  3196                           tblptrh	equ	0xFF7
  3197                           tblptrl	equ	0xFF6
  3198                           tablat	equ	0xFF5
  3199                           prodh	equ	0xFF4
  3200                           prodl	equ	0xFF3
  3201                           intcon	equ	0xFF2
  3202                           intcon3	equ	0xFF0
  3203                           postinc0	equ	0xFEE
  3204                           wreg	equ	0xFE8
  3205                           postdec1	equ	0xFE5
  3206                           fsr1l	equ	0xFE1
  3207                           indf2	equ	0xFDF
  3208                           postinc2	equ	0xFDE
  3209                           postdec2	equ	0xFDD
  3210                           fsr2h	equ	0xFDA
  3211                           fsr2l	equ	0xFD9
  3212                           status	equ	0xFD8
  3213                           
  3214 ;; *************** function _initUI *****************
  3215 ;; Defined at:
  3216 ;;		line 63 in file "UI.c"
  3217 ;; Parameters:    Size  Location     Type
  3218 ;;		None
  3219 ;; Auto vars:     Size  Location     Type
  3220 ;;		None
  3221 ;; Return value:  Size  Location     Type
  3222 ;;                  1    wreg      void 
  3223 ;; Registers used:
  3224 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3225 ;; Tracked objects:
  3226 ;;		On entry : 0/0
  3227 ;;		On exit  : 0/0
  3228 ;;		Unchanged: 0/0
  3229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3234 ;;Total ram usage:        0 bytes
  3235 ;; Hardware stack levels used:    1
  3236 ;; Hardware stack levels required when called:   12
  3237 ;; This function calls:
  3238 ;;		_change_state_to_menu_start
  3239 ;;		_loadRTC
  3240 ;; This function is called by:
  3241 ;;		_main
  3242 ;; This function uses a non-reentrant model
  3243 ;;
  3244                           
  3245                           	psect	text12
  3246  0027E4                     __ptext12:
  3247                           	opt stack 0
  3248  0027E4                     _initUI:
  3249                           	opt stack 18
  3250                           
  3251                           ;UI.c: 64: (INTCONbits.GIE = 1);
  3252                           
  3253                           ;incstack = 0
  3254  0027E4  8EF2               	bsf	intcon,7,c	;volatile
  3255                           
  3256                           ;UI.c: 65: machine_state = UI_state;
  3257  0027E6  0E00               	movlw	0
  3258  0027E8  0100               	movlb	0	; () banked
  3259  0027EA  6FF4               	movwf	_machine_state& (0+255),b
  3260                           
  3261                           ; BSR set to: 0
  3262                           ;UI.c: 67: loadRTC();
  3263  0027EC  ECF3  F00E         	call	_loadRTC	;wreg free
  3264                           
  3265                           ;UI.c: 69: change_state_to_menu_start();
  3266  0027F0  EC6D  F013         	call	_change_state_to_menu_start	;wreg free
  3267                           
  3268                           ;UI.c: 70: firstboot = 1;
  3269  0027F4  0E00               	movlw	0
  3270  0027F6  6E6E               	movwf	_firstboot+1,c
  3271  0027F8  0E01               	movlw	1
  3272  0027FA  6E6D               	movwf	_firstboot,c
  3273  0027FC  0012               	return		;funcret
  3274  0027FE                     __end_of_initUI:
  3275                           	opt stack 0
  3276                           tblptru	equ	0xFF8
  3277                           tblptrh	equ	0xFF7
  3278                           tblptrl	equ	0xFF6
  3279                           tablat	equ	0xFF5
  3280                           prodh	equ	0xFF4
  3281                           prodl	equ	0xFF3
  3282                           intcon	equ	0xFF2
  3283                           intcon3	equ	0xFF0
  3284                           postinc0	equ	0xFEE
  3285                           wreg	equ	0xFE8
  3286                           postdec1	equ	0xFE5
  3287                           fsr1l	equ	0xFE1
  3288                           indf2	equ	0xFDF
  3289                           postinc2	equ	0xFDE
  3290                           postdec2	equ	0xFDD
  3291                           fsr2h	equ	0xFDA
  3292                           fsr2l	equ	0xFD9
  3293                           status	equ	0xFD8
  3294                           
  3295 ;; *************** function _loadRTC *****************
  3296 ;; Defined at:
  3297 ;;		line 26 in file "RTC.c"
  3298 ;; Parameters:    Size  Location     Type
  3299 ;;		None
  3300 ;; Auto vars:     Size  Location     Type
  3301 ;;  i               2   22[BANK0 ] int 
  3302 ;; Return value:  Size  Location     Type
  3303 ;;                  1    wreg      void 
  3304 ;; Registers used:
  3305 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3306 ;; Tracked objects:
  3307 ;;		On entry : 0/0
  3308 ;;		On exit  : 0/0
  3309 ;;		Unchanged: 0/0
  3310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3312 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3313 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3314 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3315 ;;Total ram usage:        3 bytes
  3316 ;; Hardware stack levels used:    1
  3317 ;; Hardware stack levels required when called:    9
  3318 ;; This function calls:
  3319 ;;		_I2C_Master_Init
  3320 ;;		_I2C_Master_Start
  3321 ;;		_I2C_Master_Stop
  3322 ;;		_I2C_Master_Write
  3323 ;; This function is called by:
  3324 ;;		_initUI
  3325 ;; This function uses a non-reentrant model
  3326 ;;
  3327                           
  3328                           	psect	text13
  3329  001DE6                     __ptext13:
  3330                           	opt stack 0
  3331  001DE6                     _loadRTC:
  3332                           	opt stack 20
  3333                           
  3334                           ;RTC.c: 28: I2C_Master_Init(10000);
  3335                           
  3336                           ;incstack = 0
  3337  001DE6  0E10               	movlw	16
  3338  001DE8  0100               	movlb	0	; () banked
  3339  001DEA  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3340  001DEC  0E27               	movlw	39
  3341  001DEE  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3342  001DF0  0E00               	movlw	0
  3343  001DF2  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3344  001DF4  0E00               	movlw	0
  3345  001DF6  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3346  001DF8  ECD0  F010         	call	_I2C_Master_Init	;wreg free
  3347                           
  3348                           ;RTC.c: 30: (INTCONbits.GIE = 0);
  3349  001DFC  9EF2               	bcf	intcon,7,c	;volatile
  3350                           
  3351                           ;RTC.c: 32: I2C_Master_Start();
  3352  001DFE  EC69  F014         	call	_I2C_Master_Start	;wreg free
  3353                           
  3354                           ;RTC.c: 33: I2C_Master_Write(0b11010000);
  3355  001E02  0E00               	movlw	0
  3356  001E04  0100               	movlb	0	; () banked
  3357  001E06  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3358  001E08  0ED0               	movlw	208
  3359  001E0A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3360  001E0C  EC57  F014         	call	_I2C_Master_Write	;wreg free
  3361                           
  3362                           ;RTC.c: 34: I2C_Master_Write(0x00);
  3363  001E10  0E00               	movlw	0
  3364  001E12  0100               	movlb	0	; () banked
  3365  001E14  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3366  001E16  0E00               	movlw	0
  3367  001E18  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3368  001E1A  EC57  F014         	call	_I2C_Master_Write	;wreg free
  3369                           
  3370                           ;RTC.c: 35: for(int i = 0; i<7; i++){
  3371  001E1E  0E00               	movlw	0
  3372  001E20  0100               	movlb	0	; () banked
  3373  001E22  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  3374  001E24  0E00               	movlw	0
  3375  001E26  6F96               	movwf	loadRTC@i& (0+255),b
  3376  001E28                     l4425:
  3377                           
  3378                           ; BSR set to: 0
  3379  001E28  0100               	movlb	0	; () banked
  3380  001E2A  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  3381  001E2C  D008               	goto	l4429
  3382  001E2E  0100               	movlb	0	; () banked
  3383  001E30  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  3384  001E32  E11B               	bnz	l4435
  3385  001E34  0E07               	movlw	7
  3386  001E36  0100               	movlb	0	; () banked
  3387  001E38  5D96               	subwf	loadRTC@i& (0+255),w,b
  3388  001E3A  B0D8               	btfsc	status,0,c
  3389  001E3C  D016               	goto	l4435
  3390  001E3E                     l4429:
  3391                           
  3392                           ; BSR set to: 0
  3393                           ;RTC.c: 36: I2C_Master_Write(time[i]);
  3394  001E3E  0ED4               	movlw	low _time
  3395  001E40  0100               	movlb	0	; () banked
  3396  001E42  2596               	addwf	loadRTC@i& (0+255),w,b
  3397  001E44  6ED9               	movwf	fsr2l,c
  3398  001E46  0E00               	movlw	high _time
  3399  001E48  0100               	movlb	0	; () banked
  3400  001E4A  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  3401  001E4C  6EDA               	movwf	fsr2h,c
  3402  001E4E  50DF               	movf	indf2,w,c
  3403  001E50  0100               	movlb	0	; () banked
  3404  001E52  6F95               	movwf	??_loadRTC& (0+255),b
  3405  001E54  0100               	movlb	0	; () banked
  3406  001E56  5195               	movf	??_loadRTC& (0+255),w,b
  3407  001E58  0100               	movlb	0	; () banked
  3408  001E5A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3409  001E5C  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  3410  001E5E  EC57  F014         	call	_I2C_Master_Write	;wreg free
  3411  001E62  0100               	movlb	0	; () banked
  3412  001E64  4B96               	infsnz	loadRTC@i& (0+255),f,b
  3413  001E66  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  3414  001E68  D7DF               	goto	l4425
  3415  001E6A                     l4435:
  3416                           
  3417                           ; BSR set to: 0
  3418                           ;RTC.c: 37: }
  3419                           ;RTC.c: 38: I2C_Master_Stop();
  3420  001E6A  EC65  F014         	call	_I2C_Master_Stop	;wreg free
  3421                           
  3422                           ;RTC.c: 39: (INTCONbits.GIE = 1);
  3423  001E6E  8EF2               	bsf	intcon,7,c	;volatile
  3424  001E70  0012               	return		;funcret
  3425  001E72                     __end_of_loadRTC:
  3426                           	opt stack 0
  3427                           tblptru	equ	0xFF8
  3428                           tblptrh	equ	0xFF7
  3429                           tblptrl	equ	0xFF6
  3430                           tablat	equ	0xFF5
  3431                           prodh	equ	0xFF4
  3432                           prodl	equ	0xFF3
  3433                           intcon	equ	0xFF2
  3434                           intcon3	equ	0xFF0
  3435                           postinc0	equ	0xFEE
  3436                           wreg	equ	0xFE8
  3437                           postdec1	equ	0xFE5
  3438                           fsr1l	equ	0xFE1
  3439                           indf2	equ	0xFDF
  3440                           postinc2	equ	0xFDE
  3441                           postdec2	equ	0xFDD
  3442                           fsr2h	equ	0xFDA
  3443                           fsr2l	equ	0xFD9
  3444                           status	equ	0xFD8
  3445                           
  3446 ;; *************** function _I2C_Master_Init *****************
  3447 ;; Defined at:
  3448 ;;		line 13 in file "I2C.c"
  3449 ;; Parameters:    Size  Location     Type
  3450 ;;  c               4   13[BANK0 ] const unsigned long 
  3451 ;; Auto vars:     Size  Location     Type
  3452 ;;		None
  3453 ;; Return value:  Size  Location     Type
  3454 ;;                  1    wreg      void 
  3455 ;; Registers used:
  3456 ;;		wreg, status,2, status,0, cstack
  3457 ;; Tracked objects:
  3458 ;;		On entry : 0/0
  3459 ;;		On exit  : 0/0
  3460 ;;		Unchanged: 0/0
  3461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3462 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3464 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3465 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3466 ;;Total ram usage:        8 bytes
  3467 ;; Hardware stack levels used:    1
  3468 ;; Hardware stack levels required when called:    8
  3469 ;; This function calls:
  3470 ;;		___lldiv
  3471 ;; This function is called by:
  3472 ;;		_loadRTC
  3473 ;; This function uses a non-reentrant model
  3474 ;;
  3475                           
  3476                           	psect	text14
  3477  0021A0                     __ptext14:
  3478                           	opt stack 0
  3479  0021A0                     _I2C_Master_Init:
  3480                           	opt stack 20
  3481                           
  3482                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  3483                           
  3484                           ;incstack = 0
  3485  0021A0  0E00               	movlw	0
  3486  0021A2  6EC7               	movwf	4039,c	;volatile
  3487                           
  3488                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  3489  0021A4  0E28               	movlw	40
  3490  0021A6  6EC6               	movwf	4038,c	;volatile
  3491                           
  3492                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  3493  0021A8  0E00               	movlw	0
  3494  0021AA  6EC5               	movwf	4037,c	;volatile
  3495                           
  3496                           ;I2C.c: 19: SSPADD = (32000000/(4*c))-1;
  3497  0021AC  0E00               	movlw	0
  3498  0021AE  0100               	movlb	0	; () banked
  3499  0021B0  6F80               	movwf	___lldiv@dividend& (0+255),b
  3500  0021B2  0E48               	movlw	72
  3501  0021B4  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  3502  0021B6  0EE8               	movlw	232
  3503  0021B8  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  3504  0021BA  0E01               	movlw	1
  3505  0021BC  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  3506  0021BE  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  3507  0021C2  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  3508  0021C6  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  3509  0021CA  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  3510  0021CE  0E02               	movlw	2
  3511  0021D0                     u3115:
  3512  0021D0  90D8               	bcf	status,0,c
  3513  0021D2  0100               	movlb	0	; () banked
  3514  0021D4  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  3515  0021D6  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  3516  0021D8  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  3517  0021DA  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  3518  0021DC  2EE8               	decfsz	wreg,f,c
  3519  0021DE  D7F8               	goto	u3115
  3520  0021E0  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  3521  0021E4  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3522  0021E8  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3523  0021EC  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3524  0021F0  EC4D  F00D         	call	___lldiv	;wreg free
  3525  0021F4  0100               	movlb	0	; () banked
  3526  0021F6  0580               	decf	?___lldiv& (0+255),w,b
  3527  0021F8  6EC8               	movwf	4040,c	;volatile
  3528                           
  3529                           ; BSR set to: 0
  3530                           ;I2C.c: 20: TRISC3 = 1;
  3531  0021FA  8694               	bsf	3988,3,c	;volatile
  3532                           
  3533                           ; BSR set to: 0
  3534                           ;I2C.c: 21: TRISC4 = 1;
  3535  0021FC  8894               	bsf	3988,4,c	;volatile
  3536                           
  3537                           ; BSR set to: 0
  3538  0021FE  0012               	return		;funcret
  3539  002200                     __end_of_I2C_Master_Init:
  3540                           	opt stack 0
  3541                           tblptru	equ	0xFF8
  3542                           tblptrh	equ	0xFF7
  3543                           tblptrl	equ	0xFF6
  3544                           tablat	equ	0xFF5
  3545                           prodh	equ	0xFF4
  3546                           prodl	equ	0xFF3
  3547                           intcon	equ	0xFF2
  3548                           intcon3	equ	0xFF0
  3549                           postinc0	equ	0xFEE
  3550                           wreg	equ	0xFE8
  3551                           postdec1	equ	0xFE5
  3552                           fsr1l	equ	0xFE1
  3553                           indf2	equ	0xFDF
  3554                           postinc2	equ	0xFDE
  3555                           postdec2	equ	0xFDD
  3556                           fsr2h	equ	0xFDA
  3557                           fsr2l	equ	0xFD9
  3558                           status	equ	0xFD8
  3559                           
  3560 ;; *************** function ___lldiv *****************
  3561 ;; Defined at:
  3562 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3563 ;; Parameters:    Size  Location     Type
  3564 ;;  dividend        4    0[BANK0 ] unsigned long 
  3565 ;;  divisor         4    4[BANK0 ] unsigned long 
  3566 ;; Auto vars:     Size  Location     Type
  3567 ;;  quotient        4    8[BANK0 ] unsigned long 
  3568 ;;  counter         1   12[BANK0 ] unsigned char 
  3569 ;; Return value:  Size  Location     Type
  3570 ;;                  4    0[BANK0 ] unsigned long 
  3571 ;; Registers used:
  3572 ;;		wreg, status,2, status,0
  3573 ;; Tracked objects:
  3574 ;;		On entry : 0/0
  3575 ;;		On exit  : 0/0
  3576 ;;		Unchanged: 0/0
  3577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3578 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3579 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3581 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3582 ;;Total ram usage:       13 bytes
  3583 ;; Hardware stack levels used:    1
  3584 ;; Hardware stack levels required when called:    7
  3585 ;; This function calls:
  3586 ;;		Nothing
  3587 ;; This function is called by:
  3588 ;;		_I2C_Master_Init
  3589 ;; This function uses a non-reentrant model
  3590 ;;
  3591                           
  3592                           	psect	text15
  3593  001A9A                     __ptext15:
  3594                           	opt stack 0
  3595  001A9A                     ___lldiv:
  3596                           	opt stack 20
  3597                           
  3598                           ; BSR set to: 0
  3599                           ;incstack = 0
  3600  001A9A  0E00               	movlw	0
  3601  001A9C  0100               	movlb	0	; () banked
  3602  001A9E  6F88               	movwf	___lldiv@quotient& (0+255),b
  3603  001AA0  0E00               	movlw	0
  3604  001AA2  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  3605  001AA4  0E00               	movlw	0
  3606  001AA6  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  3607  001AA8  0E00               	movlw	0
  3608  001AAA  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  3609                           
  3610                           ; BSR set to: 0
  3611  001AAC  0100               	movlb	0	; () banked
  3612  001AAE  5184               	movf	___lldiv@divisor& (0+255),w,b
  3613  001AB0  0100               	movlb	0	; () banked
  3614  001AB2  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  3615  001AB4  0100               	movlb	0	; () banked
  3616  001AB6  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  3617  001AB8  0100               	movlb	0	; () banked
  3618  001ABA  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  3619  001ABC  B4D8               	btfsc	status,2,c
  3620  001ABE  D042               	goto	l1411
  3621                           
  3622                           ; BSR set to: 0
  3623  001AC0  0E01               	movlw	1
  3624  001AC2  0100               	movlb	0	; () banked
  3625  001AC4  6F8C               	movwf	___lldiv@counter& (0+255),b
  3626  001AC6  D008               	goto	l3973
  3627  001AC8                     l3971:
  3628                           
  3629                           ; BSR set to: 0
  3630  001AC8  0100               	movlb	0	; () banked
  3631  001ACA  90D8               	bcf	status,0,c
  3632  001ACC  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  3633  001ACE  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  3634  001AD0  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  3635  001AD2  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  3636  001AD4  0100               	movlb	0	; () banked
  3637  001AD6  2B8C               	incf	___lldiv@counter& (0+255),f,b
  3638  001AD8                     l3973:
  3639                           
  3640                           ; BSR set to: 0
  3641  001AD8  0100               	movlb	0	; () banked
  3642  001ADA  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  3643  001ADC  D7F5               	goto	l3971
  3644  001ADE                     l3975:
  3645                           
  3646                           ; BSR set to: 0
  3647  001ADE  0100               	movlb	0	; () banked
  3648  001AE0  90D8               	bcf	status,0,c
  3649  001AE2  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  3650  001AE4  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  3651  001AE6  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  3652  001AE8  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  3653                           
  3654                           ; BSR set to: 0
  3655  001AEA  0100               	movlb	0	; () banked
  3656  001AEC  5184               	movf	___lldiv@divisor& (0+255),w,b
  3657  001AEE  0100               	movlb	0	; () banked
  3658  001AF0  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  3659  001AF2  0100               	movlb	0	; () banked
  3660  001AF4  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3661  001AF6  0100               	movlb	0	; () banked
  3662  001AF8  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  3663  001AFA  0100               	movlb	0	; () banked
  3664  001AFC  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3665  001AFE  0100               	movlb	0	; () banked
  3666  001B00  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  3667  001B02  0100               	movlb	0	; () banked
  3668  001B04  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3669  001B06  0100               	movlb	0	; () banked
  3670  001B08  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  3671  001B0A  A0D8               	btfss	status,0,c
  3672  001B0C  D012               	goto	l3983
  3673                           
  3674                           ; BSR set to: 0
  3675  001B0E  0100               	movlb	0	; () banked
  3676  001B10  5184               	movf	___lldiv@divisor& (0+255),w,b
  3677  001B12  0100               	movlb	0	; () banked
  3678  001B14  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  3679  001B16  0100               	movlb	0	; () banked
  3680  001B18  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3681  001B1A  0100               	movlb	0	; () banked
  3682  001B1C  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  3683  001B1E  0100               	movlb	0	; () banked
  3684  001B20  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3685  001B22  0100               	movlb	0	; () banked
  3686  001B24  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  3687  001B26  0100               	movlb	0	; () banked
  3688  001B28  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3689  001B2A  0100               	movlb	0	; () banked
  3690  001B2C  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  3691                           
  3692                           ; BSR set to: 0
  3693  001B2E  0100               	movlb	0	; () banked
  3694  001B30  8188               	bsf	___lldiv@quotient& (0+255),0,b
  3695  001B32                     l3983:
  3696                           
  3697                           ; BSR set to: 0
  3698  001B32  0100               	movlb	0	; () banked
  3699  001B34  90D8               	bcf	status,0,c
  3700  001B36  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  3701  001B38  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  3702  001B3A  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  3703  001B3C  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  3704                           
  3705                           ; BSR set to: 0
  3706  001B3E  0100               	movlb	0	; () banked
  3707  001B40  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  3708  001B42  D7CD               	goto	l3975
  3709  001B44                     l1411:
  3710                           
  3711                           ; BSR set to: 0
  3712  001B44  C088  F080         	movff	___lldiv@quotient,?___lldiv
  3713  001B48  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  3714  001B4C  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  3715  001B50  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  3716                           
  3717                           ; BSR set to: 0
  3718  001B54  0012               	return		;funcret
  3719  001B56                     __end_of___lldiv:
  3720                           	opt stack 0
  3721                           tblptru	equ	0xFF8
  3722                           tblptrh	equ	0xFF7
  3723                           tblptrl	equ	0xFF6
  3724                           tablat	equ	0xFF5
  3725                           prodh	equ	0xFF4
  3726                           prodl	equ	0xFF3
  3727                           intcon	equ	0xFF2
  3728                           intcon3	equ	0xFF0
  3729                           postinc0	equ	0xFEE
  3730                           wreg	equ	0xFE8
  3731                           postdec1	equ	0xFE5
  3732                           fsr1l	equ	0xFE1
  3733                           indf2	equ	0xFDF
  3734                           postinc2	equ	0xFDE
  3735                           postdec2	equ	0xFDD
  3736                           fsr2h	equ	0xFDA
  3737                           fsr2l	equ	0xFD9
  3738                           status	equ	0xFD8
  3739                           
  3740 ;; *************** function _change_state_to_menu_start *****************
  3741 ;; Defined at:
  3742 ;;		line 408 in file "UI.c"
  3743 ;; Parameters:    Size  Location     Type
  3744 ;;		None
  3745 ;; Auto vars:     Size  Location     Type
  3746 ;;		None
  3747 ;; Return value:  Size  Location     Type
  3748 ;;                  1    wreg      void 
  3749 ;; Registers used:
  3750 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3751 ;; Tracked objects:
  3752 ;;		On entry : 0/0
  3753 ;;		On exit  : 0/0
  3754 ;;		Unchanged: 0/0
  3755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3759 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3760 ;;Total ram usage:        0 bytes
  3761 ;; Hardware stack levels used:    1
  3762 ;; Hardware stack levels required when called:   11
  3763 ;; This function calls:
  3764 ;;		_lcdInst
  3765 ;;		_printRTC
  3766 ;;		_printf
  3767 ;; This function is called by:
  3768 ;;		_initUI
  3769 ;; This function uses a non-reentrant model
  3770 ;;
  3771                           
  3772                           	psect	text16
  3773  0026DA                     __ptext16:
  3774                           	opt stack 0
  3775  0026DA                     _change_state_to_menu_start:
  3776                           	opt stack 18
  3777                           
  3778                           ;UI.c: 409: cur_state = 0;
  3779                           
  3780                           ; BSR set to: 0
  3781                           ;incstack = 0
  3782  0026DA  0E00               	movlw	0
  3783  0026DC  0100               	movlb	0	; () banked
  3784  0026DE  6FE2               	movwf	(_cur_state+1)& (0+255),b
  3785  0026E0  0E00               	movlw	0
  3786  0026E2  6FE1               	movwf	_cur_state& (0+255),b
  3787                           
  3788                           ; BSR set to: 0
  3789                           ;UI.c: 411: lcdInst(0b10000000);;
  3790  0026E4  0E80               	movlw	128
  3791  0026E6  EC43  F014         	call	_lcdInst
  3792                           
  3793                           ;UI.c: 412: printRTC();
  3794  0026EA  EC52  F006         	call	_printRTC	;wreg free
  3795                           
  3796                           ;UI.c: 413: lcdInst(0b11000000);;
  3797  0026EE  0EC0               	movlw	192
  3798  0026F0  EC43  F014         	call	_lcdInst
  3799                           
  3800                           ;UI.c: 414: printf("PUSH TO CONTINUE");
  3801  0026F4  0E8A               	movlw	low STR_15
  3802  0026F6  0100               	movlb	0	; () banked
  3803  0026F8  6F8E               	movwf	printf@f& (0+255),b
  3804  0026FA  0EFF               	movlw	high STR_15
  3805  0026FC  0100               	movlb	0	; () banked
  3806  0026FE  6F8F               	movwf	(printf@f+1)& (0+255),b
  3807  002700  ECAA  F002         	call	_printf	;wreg free
  3808  002704  0012               	return		;funcret
  3809  002706                     __end_of_change_state_to_menu_start:
  3810                           	opt stack 0
  3811                           tblptru	equ	0xFF8
  3812                           tblptrh	equ	0xFF7
  3813                           tblptrl	equ	0xFF6
  3814                           tablat	equ	0xFF5
  3815                           prodh	equ	0xFF4
  3816                           prodl	equ	0xFF3
  3817                           intcon	equ	0xFF2
  3818                           intcon3	equ	0xFF0
  3819                           postinc0	equ	0xFEE
  3820                           wreg	equ	0xFE8
  3821                           postdec1	equ	0xFE5
  3822                           fsr1l	equ	0xFE1
  3823                           indf2	equ	0xFDF
  3824                           postinc2	equ	0xFDE
  3825                           postdec2	equ	0xFDD
  3826                           fsr2h	equ	0xFDA
  3827                           fsr2l	equ	0xFD9
  3828                           status	equ	0xFD8
  3829                           
  3830 ;; *************** function _initTime *****************
  3831 ;; Defined at:
  3832 ;;		line 15 in file "RTC.c"
  3833 ;; Parameters:    Size  Location     Type
  3834 ;;  s               1    wreg     unsigned char 
  3835 ;;  m               1    0[BANK0 ] unsigned char 
  3836 ;;  h               1    1[BANK0 ] unsigned char 
  3837 ;;  w               1    2[BANK0 ] unsigned char 
  3838 ;;  DD              1    3[BANK0 ] unsigned char 
  3839 ;;  MM              1    4[BANK0 ] unsigned char 
  3840 ;;  YY              1    5[BANK0 ] unsigned char 
  3841 ;; Auto vars:     Size  Location     Type
  3842 ;;  s               1    6[BANK0 ] unsigned char 
  3843 ;; Return value:  Size  Location     Type
  3844 ;;                  1    wreg      void 
  3845 ;; Registers used:
  3846 ;;		wreg
  3847 ;; Tracked objects:
  3848 ;;		On entry : 0/0
  3849 ;;		On exit  : 0/0
  3850 ;;		Unchanged: 0/0
  3851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3852 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3853 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3855 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3856 ;;Total ram usage:        7 bytes
  3857 ;; Hardware stack levels used:    1
  3858 ;; Hardware stack levels required when called:    7
  3859 ;; This function calls:
  3860 ;;		Nothing
  3861 ;; This function is called by:
  3862 ;;		_main
  3863 ;; This function uses a non-reentrant model
  3864 ;;
  3865                           
  3866                           	psect	text17
  3867  0027A4                     __ptext17:
  3868                           	opt stack 0
  3869  0027A4                     _initTime:
  3870                           	opt stack 23
  3871                           
  3872                           ;incstack = 0
  3873                           ;initTime@s stored from wreg
  3874  0027A4  0100               	movlb	0	; () banked
  3875  0027A6  6F86               	movwf	initTime@s& (0+255),b
  3876                           
  3877                           ;RTC.c: 17: time[0] = s;
  3878  0027A8  C086  F0D4         	movff	initTime@s,_time
  3879                           
  3880                           ;RTC.c: 18: time[1] = m;
  3881  0027AC  C080  F0D5         	movff	initTime@m,_time+1
  3882                           
  3883                           ;RTC.c: 19: time[2] = h;
  3884  0027B0  C081  F0D6         	movff	initTime@h,_time+2
  3885                           
  3886                           ;RTC.c: 20: time[3] = w;
  3887  0027B4  C082  F0D7         	movff	initTime@w,_time+3
  3888                           
  3889                           ;RTC.c: 21: time[4] = DD;
  3890  0027B8  C083  F0D8         	movff	initTime@DD,_time+4
  3891                           
  3892                           ;RTC.c: 22: time[5] = MM;
  3893  0027BC  C084  F0D9         	movff	initTime@MM,_time+5
  3894                           
  3895                           ;RTC.c: 23: time[6] = YY;
  3896  0027C0  C085  F0DA         	movff	initTime@YY,_time+6
  3897  0027C4  0012               	return		;funcret
  3898  0027C6                     __end_of_initTime:
  3899                           	opt stack 0
  3900                           tblptru	equ	0xFF8
  3901                           tblptrh	equ	0xFF7
  3902                           tblptrl	equ	0xFF6
  3903                           tablat	equ	0xFF5
  3904                           prodh	equ	0xFF4
  3905                           prodl	equ	0xFF3
  3906                           intcon	equ	0xFF2
  3907                           intcon3	equ	0xFF0
  3908                           postinc0	equ	0xFEE
  3909                           wreg	equ	0xFE8
  3910                           postdec1	equ	0xFE5
  3911                           fsr1l	equ	0xFE1
  3912                           indf2	equ	0xFDF
  3913                           postinc2	equ	0xFDE
  3914                           postdec2	equ	0xFDD
  3915                           fsr2h	equ	0xFDA
  3916                           fsr2l	equ	0xFD9
  3917                           status	equ	0xFD8
  3918                           
  3919 ;; *************** function _initLCD *****************
  3920 ;; Defined at:
  3921 ;;		line 46 in file "lcd.c"
  3922 ;; Parameters:    Size  Location     Type
  3923 ;;		None
  3924 ;; Auto vars:     Size  Location     Type
  3925 ;;		None
  3926 ;; Return value:  Size  Location     Type
  3927 ;;                  1    wreg      void 
  3928 ;; Registers used:
  3929 ;;		wreg, status,2, status,0, cstack
  3930 ;; Tracked objects:
  3931 ;;		On entry : 0/0
  3932 ;;		On exit  : 0/0
  3933 ;;		Unchanged: 0/0
  3934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3937 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3938 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3939 ;;Total ram usage:        1 bytes
  3940 ;; Hardware stack levels used:    1
  3941 ;; Hardware stack levels required when called:    9
  3942 ;; This function calls:
  3943 ;;		_lcdInst
  3944 ;; This function is called by:
  3945 ;;		_main
  3946 ;; This function uses a non-reentrant model
  3947 ;;
  3948                           
  3949                           	psect	text18
  3950  00233E                     __ptext18:
  3951                           	opt stack 0
  3952  00233E                     _initLCD:
  3953                           	opt stack 21
  3954                           
  3955                           ;lcd.c: 47: _delay((unsigned long)((15)*(32000000/4000.0)));
  3956                           
  3957                           ;incstack = 0
  3958  00233E  0E9C               	movlw	156
  3959  002340  0100               	movlb	0	; () banked
  3960  002342  6F83               	movwf	??_initLCD& (0+255),b
  3961  002344  0ED7               	movlw	215
  3962  002346                     u4487:
  3963  002346  2EE8               	decfsz	wreg,f,c
  3964  002348  D7FE               	bra	u4487
  3965  00234A  2F83               	decfsz	??_initLCD& (0+255),f,b
  3966  00234C  D7FC               	bra	u4487
  3967                           
  3968                           ;lcd.c: 48: lcdInst(0b00110011);
  3969  00234E  0E33               	movlw	51
  3970  002350  EC43  F014         	call	_lcdInst
  3971                           
  3972                           ;lcd.c: 49: lcdInst(0b00110010);
  3973  002354  0E32               	movlw	50
  3974  002356  EC43  F014         	call	_lcdInst
  3975                           
  3976                           ;lcd.c: 51: lcdInst(0b00101000);
  3977  00235A  0E28               	movlw	40
  3978  00235C  EC43  F014         	call	_lcdInst
  3979                           
  3980                           ;lcd.c: 52: lcdInst(0b00001100);
  3981  002360  0E0C               	movlw	12
  3982  002362  EC43  F014         	call	_lcdInst
  3983                           
  3984                           ;lcd.c: 53: lcdInst(0b00000110);
  3985  002366  0E06               	movlw	6
  3986  002368  EC43  F014         	call	_lcdInst
  3987                           
  3988                           ;lcd.c: 54: lcdInst(0b00000001);
  3989  00236C  0E01               	movlw	1
  3990  00236E  EC43  F014         	call	_lcdInst
  3991                           
  3992                           ;lcd.c: 55: _delay((unsigned long)((15)*(32000000/4000.0)));
  3993  002372  0E9C               	movlw	156
  3994  002374  0100               	movlb	0	; () banked
  3995  002376  6F83               	movwf	??_initLCD& (0+255),b
  3996  002378  0ED7               	movlw	215
  3997  00237A                     u4497:
  3998  00237A  2EE8               	decfsz	wreg,f,c
  3999  00237C  D7FE               	bra	u4497
  4000  00237E  2F83               	decfsz	??_initLCD& (0+255),f,b
  4001  002380  D7FC               	bra	u4497
  4002  002382  0012               	return		;funcret
  4003  002384                     __end_of_initLCD:
  4004                           	opt stack 0
  4005                           tblptru	equ	0xFF8
  4006                           tblptrh	equ	0xFF7
  4007                           tblptrl	equ	0xFF6
  4008                           tablat	equ	0xFF5
  4009                           prodh	equ	0xFF4
  4010                           prodl	equ	0xFF3
  4011                           intcon	equ	0xFF2
  4012                           intcon3	equ	0xFF0
  4013                           postinc0	equ	0xFEE
  4014                           wreg	equ	0xFE8
  4015                           postdec1	equ	0xFE5
  4016                           fsr1l	equ	0xFE1
  4017                           indf2	equ	0xFDF
  4018                           postinc2	equ	0xFDE
  4019                           postdec2	equ	0xFDD
  4020                           fsr2h	equ	0xFDA
  4021                           fsr2l	equ	0xFD9
  4022                           status	equ	0xFD8
  4023                           
  4024 ;; *************** function _UI *****************
  4025 ;; Defined at:
  4026 ;;		line 74 in file "UI.c"
  4027 ;; Parameters:    Size  Location     Type
  4028 ;;		None
  4029 ;; Auto vars:     Size  Location     Type
  4030 ;;  i               1   83[BANK0 ] unsigned char 
  4031 ;;  i               1   82[BANK0 ] unsigned char 
  4032 ;;  i               1   81[BANK0 ] unsigned char 
  4033 ;;  i               1   80[BANK0 ] unsigned char 
  4034 ;;  i               1   79[BANK0 ] unsigned char 
  4035 ;;  i               1   78[BANK0 ] unsigned char 
  4036 ;;  i               1   77[BANK0 ] unsigned char 
  4037 ;;  i               1   76[BANK0 ] unsigned char 
  4038 ;;  i               1   75[BANK0 ] unsigned char 
  4039 ;;  i               1   74[BANK0 ] unsigned char 
  4040 ;;  i               1   73[BANK0 ] unsigned char 
  4041 ;;  i               1   72[BANK0 ] unsigned char 
  4042 ;;  i               1   71[BANK0 ] unsigned char 
  4043 ;; Return value:  Size  Location     Type
  4044 ;;                  1    wreg      void 
  4045 ;; Registers used:
  4046 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4047 ;; Tracked objects:
  4048 ;;		On entry : 0/0
  4049 ;;		On exit  : 0/0
  4050 ;;		Unchanged: 0/0
  4051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4053 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4054 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4055 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4056 ;;Total ram usage:       16 bytes
  4057 ;; Hardware stack levels used:    1
  4058 ;; Hardware stack levels required when called:   11
  4059 ;; This function calls:
  4060 ;;		___awdiv
  4061 ;;		___awmod
  4062 ;;		_lcdInst
  4063 ;;		_printRTC
  4064 ;;		_printf
  4065 ;; This function is called by:
  4066 ;;		_main
  4067 ;; This function uses a non-reentrant model
  4068 ;;
  4069                           
  4070                           	psect	text19
  4071  000012                     __ptext19:
  4072                           	opt stack 0
  4073  000012                     _UI:
  4074                           	opt stack 19
  4075                           
  4076                           ;UI.c: 75: if(machine_state == DoneSorting_state){
  4077                           
  4078                           ;incstack = 0
  4079  000012  0E02               	movlw	2
  4080  000014  0100               	movlb	0	; () banked
  4081  000016  19F4               	xorwf	_machine_state& (0+255),w,b
  4082  000018  A4D8               	btfss	status,2,c
  4083  00001A  D060               	goto	l4775
  4084                           
  4085                           ; BSR set to: 0
  4086                           ;UI.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4087  00001C  0E01               	movlw	1
  4088  00001E  EC43  F014         	call	_lcdInst
  4089  000022  0E68               	movlw	104
  4090  000024  0100               	movlb	0	; () banked
  4091  000026  6FC4               	movwf	??_UI& (0+255),b
  4092  000028  0EE4               	movlw	228
  4093  00002A                     u4507:
  4094  00002A  2EE8               	decfsz	wreg,f,c
  4095  00002C  D7FE               	bra	u4507
  4096  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  4097  000030  D7FC               	bra	u4507
  4098  000032  F000               	nop	
  4099                           
  4100                           ;UI.c: 77: lcdInst(0b10000000);;
  4101  000034  0E80               	movlw	128
  4102  000036  EC43  F014         	call	_lcdInst
  4103                           
  4104                           ;UI.c: 78: printf("Sort complete");
  4105  00003A  0E9B               	movlw	low STR_1
  4106  00003C  0100               	movlb	0	; () banked
  4107  00003E  6F8E               	movwf	printf@f& (0+255),b
  4108  000040  0EFF               	movlw	high STR_1
  4109  000042  0100               	movlb	0	; () banked
  4110  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  4111  000046  ECAA  F002         	call	_printf	;wreg free
  4112                           
  4113                           ;UI.c: 79: lcdInst(0b11000000);;
  4114  00004A  0EC0               	movlw	192
  4115  00004C  EC43  F014         	call	_lcdInst
  4116                           
  4117                           ;UI.c: 80: printf("Time: %02d:%02d:%02d", 0, (total_time % 3600) / 60, (total_time % 360
      +                          0) % 60);
  4118  000050  0E0E               	movlw	14
  4119  000052  0100               	movlb	0	; () banked
  4120  000054  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4121  000056  0E10               	movlw	16
  4122  000058  6F82               	movwf	___awmod@divisor& (0+255),b
  4123  00005A  C0F1  F080         	movff	_total_time,___awmod@dividend
  4124  00005E  C0F2  F081         	movff	_total_time+1,___awmod@dividend+1
  4125  000062  EC56  F00E         	call	___awmod	;wreg free
  4126  000066  C080  F0C5         	movff	?___awmod,_UI$1921
  4127  00006A  C081  F0C6         	movff	?___awmod+1,_UI$1921+1
  4128                           
  4129                           ;UI.c: 80: printf("Time: %02d:%02d:%02d", 0, (total_time % 3600) / 60, (total_time % 360
      +                          0) % 60);
  4130  00006E  0EEC               	movlw	low STR_2
  4131  000070  0100               	movlb	0	; () banked
  4132  000072  6F8E               	movwf	printf@f& (0+255),b
  4133  000074  0EFD               	movlw	high STR_2
  4134  000076  0100               	movlb	0	; () banked
  4135  000078  6F8F               	movwf	(printf@f+1)& (0+255),b
  4136  00007A  0E00               	movlw	0
  4137  00007C  0100               	movlb	0	; () banked
  4138  00007E  6F91               	movwf	(?_printf+3)& (0+255),b
  4139  000080  0E00               	movlw	0
  4140  000082  6F90               	movwf	(?_printf+2)& (0+255),b
  4141  000084  0E0E               	movlw	14
  4142  000086  0100               	movlb	0	; () banked
  4143  000088  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4144  00008A  0E10               	movlw	16
  4145  00008C  6F82               	movwf	___awmod@divisor& (0+255),b
  4146  00008E  C0F1  F080         	movff	_total_time,___awmod@dividend
  4147  000092  C0F2  F081         	movff	_total_time+1,___awmod@dividend+1
  4148  000096  EC56  F00E         	call	___awmod	;wreg free
  4149  00009A  C080  F086         	movff	?___awmod,___awdiv@dividend
  4150  00009E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  4151  0000A2  0E00               	movlw	0
  4152  0000A4  0100               	movlb	0	; () banked
  4153  0000A6  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  4154  0000A8  0E3C               	movlw	60
  4155  0000AA  6F88               	movwf	___awdiv@divisor& (0+255),b
  4156  0000AC  ECEE  F00C         	call	___awdiv	;wreg free
  4157  0000B0  C086  F092         	movff	?___awdiv,?_printf+4
  4158  0000B4  C087  F093         	movff	?___awdiv+1,?_printf+5
  4159  0000B8  C0C5  F080         	movff	_UI$1921,___awmod@dividend
  4160  0000BC  C0C6  F081         	movff	_UI$1921+1,___awmod@dividend+1
  4161  0000C0  0E00               	movlw	0
  4162  0000C2  0100               	movlb	0	; () banked
  4163  0000C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4164  0000C6  0E3C               	movlw	60
  4165  0000C8  6F82               	movwf	___awmod@divisor& (0+255),b
  4166  0000CA  EC56  F00E         	call	___awmod	;wreg free
  4167  0000CE  C080  F094         	movff	?___awmod,?_printf+6
  4168  0000D2  C081  F095         	movff	?___awmod+1,?_printf+7
  4169  0000D6  ECAA  F002         	call	_printf	;wreg free
  4170                           
  4171                           ;UI.c: 81: }
  4172  0000DA  D235               	goto	l5031
  4173  0000DC                     l4775:
  4174                           
  4175                           ;UI.c: 82: else if(cur_state == 0){
  4176  0000DC  0100               	movlb	0	; () banked
  4177  0000DE  51E1               	movf	_cur_state& (0+255),w,b
  4178  0000E0  0100               	movlb	0	; () banked
  4179  0000E2  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
  4180  0000E4  A4D8               	btfss	status,2,c
  4181  0000E6  D22F               	goto	l5031
  4182                           
  4183                           ; BSR set to: 0
  4184                           ;UI.c: 83: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  4185  0000E8  0E00               	movlw	0
  4186  0000EA  0100               	movlb	0	; () banked
  4187  0000EC  6FC7               	movwf	UI@i& (0+255),b
  4188  0000EE                     l4779:
  4189                           
  4190                           ; BSR set to: 0
  4191  0000EE  0E63               	movlw	99
  4192  0000F0  0100               	movlb	0	; () banked
  4193  0000F2  65C7               	cpfsgt	UI@i& (0+255),b
  4194  0000F4  D001               	goto	l4783
  4195  0000F6  D00C               	goto	l4787
  4196  0000F8                     l4783:
  4197                           
  4198                           ; BSR set to: 0
  4199  0000F8  0E68               	movlw	104
  4200  0000FA  0100               	movlb	0	; () banked
  4201  0000FC  6FC4               	movwf	??_UI& (0+255),b
  4202  0000FE  0EE4               	movlw	228
  4203  000100                     u4517:
  4204  000100  2EE8               	decfsz	wreg,f,c
  4205  000102  D7FE               	bra	u4517
  4206  000104  2FC4               	decfsz	??_UI& (0+255),f,b
  4207  000106  D7FC               	bra	u4517
  4208  000108  F000               	nop	
  4209  00010A  0100               	movlb	0	; () banked
  4210  00010C  2BC7               	incf	UI@i& (0+255),f,b
  4211  00010E  D7EF               	goto	l4779
  4212  000110                     l4787:
  4213                           
  4214                           ; BSR set to: 0
  4215                           ;UI.c: 84: if(cur_state == 0){
  4216  000110  0100               	movlb	0	; () banked
  4217  000112  51E1               	movf	_cur_state& (0+255),w,b
  4218  000114  0100               	movlb	0	; () banked
  4219  000116  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
  4220  000118  A4D8               	btfss	status,2,c
  4221  00011A  D215               	goto	l5031
  4222                           
  4223                           ; BSR set to: 0
  4224                           ;UI.c: 85: printRTC();
  4225  00011C  EC52  F006         	call	_printRTC	;wreg free
  4226                           
  4227                           ;UI.c: 86: }
  4228                           ;UI.c: 87: }
  4229                           ;UI.c: 88: while(logstate){
  4230  000120  D212               	goto	l5031
  4231  000122                     l4791:
  4232                           
  4233                           ;UI.c: 90: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4234  000122  0E01               	movlw	1
  4235  000124  EC43  F014         	call	_lcdInst
  4236  000128  0E68               	movlw	104
  4237  00012A  0100               	movlb	0	; () banked
  4238  00012C  6FC4               	movwf	??_UI& (0+255),b
  4239  00012E  0EE4               	movlw	228
  4240  000130                     u4527:
  4241  000130  2EE8               	decfsz	wreg,f,c
  4242  000132  D7FE               	bra	u4527
  4243  000134  2FC4               	decfsz	??_UI& (0+255),f,b
  4244  000136  D7FC               	bra	u4527
  4245  000138  F000               	nop	
  4246                           
  4247                           ;UI.c: 91: lcdInst(0b10000000);;
  4248  00013A  0E80               	movlw	128
  4249  00013C  EC43  F014         	call	_lcdInst
  4250                           
  4251                           ;UI.c: 92: printf("-- Log %2d here--", log);
  4252  000140  0E01               	movlw	low STR_3
  4253  000142  0100               	movlb	0	; () banked
  4254  000144  6F8E               	movwf	printf@f& (0+255),b
  4255  000146  0EFE               	movlw	high STR_3
  4256  000148  0100               	movlb	0	; () banked
  4257  00014A  6F8F               	movwf	(printf@f+1)& (0+255),b
  4258  00014C  C0ED  F090         	movff	_log,?_printf+2
  4259  000150  C0EE  F091         	movff	_log+1,?_printf+3
  4260  000154  ECAA  F002         	call	_printf	;wreg free
  4261                           
  4262                           ;UI.c: 93: lcdInst(0b11000000);;
  4263  000158  0EC0               	movlw	192
  4264  00015A  EC43  F014         	call	_lcdInst
  4265                           
  4266                           ;UI.c: 94: printf("Pause:< | Back:>");
  4267  00015E  0E79               	movlw	low STR_4
  4268  000160  0100               	movlb	0	; () banked
  4269  000162  6F8E               	movwf	printf@f& (0+255),b
  4270  000164  0EFF               	movlw	high STR_4
  4271  000166  0100               	movlb	0	; () banked
  4272  000168  6F8F               	movwf	(printf@f+1)& (0+255),b
  4273  00016A  ECAA  F002         	call	_printf	;wreg free
  4274                           
  4275                           ;UI.c: 96: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if(
      +                          !logstate){break;}
  4276  00016E  0E00               	movlw	0
  4277  000170  0100               	movlb	0	; () banked
  4278  000172  6FC8               	movwf	UI@i_636& (0+255),b
  4279  000174                     l4805:
  4280                           
  4281                           ; BSR set to: 0
  4282  000174  0E63               	movlw	99
  4283  000176  0100               	movlb	0	; () banked
  4284  000178  65C8               	cpfsgt	UI@i_636& (0+255),b
  4285  00017A  D001               	goto	l4809
  4286  00017C  D00C               	goto	l4813
  4287  00017E                     l4809:
  4288                           
  4289                           ; BSR set to: 0
  4290  00017E  0E68               	movlw	104
  4291  000180  0100               	movlb	0	; () banked
  4292  000182  6FC4               	movwf	??_UI& (0+255),b
  4293  000184  0EE4               	movlw	228
  4294  000186                     u4537:
  4295  000186  2EE8               	decfsz	wreg,f,c
  4296  000188  D7FE               	bra	u4537
  4297  00018A  2FC4               	decfsz	??_UI& (0+255),f,b
  4298  00018C  D7FC               	bra	u4537
  4299  00018E  F000               	nop	
  4300  000190  0100               	movlb	0	; () banked
  4301  000192  2BC8               	incf	UI@i_636& (0+255),f,b
  4302  000194  D7EF               	goto	l4805
  4303  000196                     l4813:
  4304                           
  4305                           ; BSR set to: 0
  4306  000196  0100               	movlb	0	; () banked
  4307  000198  51EF               	movf	_logstate& (0+255),w,b
  4308  00019A  0100               	movlb	0	; () banked
  4309  00019C  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4310  00019E  B4D8               	btfsc	status,2,c
  4311  0001A0  0012               	return	
  4312                           
  4313                           ; BSR set to: 0
  4314                           ;UI.c: 97: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if(
      +                          !logstate){break;}
  4315                           
  4316                           ; BSR set to: 0
  4317                           
  4318                           ; BSR set to: 0
  4319  0001A2  0E00               	movlw	0
  4320  0001A4  0100               	movlb	0	; () banked
  4321  0001A6  6FC9               	movwf	UI@i_637& (0+255),b
  4322  0001A8                     l4819:
  4323                           
  4324                           ; BSR set to: 0
  4325  0001A8  0E63               	movlw	99
  4326  0001AA  0100               	movlb	0	; () banked
  4327  0001AC  65C9               	cpfsgt	UI@i_637& (0+255),b
  4328  0001AE  D001               	goto	l4823
  4329  0001B0  D00C               	goto	l4827
  4330  0001B2                     l4823:
  4331                           
  4332                           ; BSR set to: 0
  4333  0001B2  0E68               	movlw	104
  4334  0001B4  0100               	movlb	0	; () banked
  4335  0001B6  6FC4               	movwf	??_UI& (0+255),b
  4336  0001B8  0EE4               	movlw	228
  4337  0001BA                     u4547:
  4338  0001BA  2EE8               	decfsz	wreg,f,c
  4339  0001BC  D7FE               	bra	u4547
  4340  0001BE  2FC4               	decfsz	??_UI& (0+255),f,b
  4341  0001C0  D7FC               	bra	u4547
  4342  0001C2  F000               	nop	
  4343  0001C4  0100               	movlb	0	; () banked
  4344  0001C6  2BC9               	incf	UI@i_637& (0+255),f,b
  4345  0001C8  D7EF               	goto	l4819
  4346  0001CA                     l4827:
  4347                           
  4348                           ; BSR set to: 0
  4349  0001CA  0100               	movlb	0	; () banked
  4350  0001CC  51EF               	movf	_logstate& (0+255),w,b
  4351  0001CE  0100               	movlb	0	; () banked
  4352  0001D0  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4353  0001D2  B4D8               	btfsc	status,2,c
  4354  0001D4  0012               	return	
  4355                           
  4356                           ; BSR set to: 0
  4357                           ;UI.c: 99: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4358                           
  4359                           ; BSR set to: 0
  4360                           
  4361                           ; BSR set to: 0
  4362  0001D6  0E01               	movlw	1
  4363  0001D8  EC43  F014         	call	_lcdInst
  4364  0001DC  0E68               	movlw	104
  4365  0001DE  0100               	movlb	0	; () banked
  4366  0001E0  6FC4               	movwf	??_UI& (0+255),b
  4367  0001E2  0EE4               	movlw	228
  4368  0001E4                     u4557:
  4369  0001E4  2EE8               	decfsz	wreg,f,c
  4370  0001E6  D7FE               	bra	u4557
  4371  0001E8  2FC4               	decfsz	??_UI& (0+255),f,b
  4372  0001EA  D7FC               	bra	u4557
  4373  0001EC  F000               	nop	
  4374                           
  4375                           ;UI.c: 100: lcdInst(0b10000000);;
  4376  0001EE  0E80               	movlw	128
  4377  0001F0  EC43  F014         	call	_lcdInst
  4378                           
  4379                           ;UI.c: 101: printf("Start:");
  4380  0001F4  0EC5               	movlw	low STR_5
  4381  0001F6  0100               	movlb	0	; () banked
  4382  0001F8  6F8E               	movwf	printf@f& (0+255),b
  4383  0001FA  0EFF               	movlw	high STR_5
  4384  0001FC  0100               	movlb	0	; () banked
  4385  0001FE  6F8F               	movwf	(printf@f+1)& (0+255),b
  4386  000200  ECAA  F002         	call	_printf	;wreg free
  4387                           
  4388                           ;UI.c: 102: lcdInst(0b11000000);;
  4389  000204  0EC0               	movlw	192
  4390  000206  EC43  F014         	call	_lcdInst
  4391                           
  4392                           ;UI.c: 103: printf("06Feb | 01:08:56");
  4393  00020A  0EF1               	movlw	low STR_6
  4394  00020C  0100               	movlb	0	; () banked
  4395  00020E  6F8E               	movwf	printf@f& (0+255),b
  4396  000210  0EFE               	movlw	high STR_6
  4397  000212  0100               	movlb	0	; () banked
  4398  000214  6F8F               	movwf	(printf@f+1)& (0+255),b
  4399  000216  ECAA  F002         	call	_printf	;wreg free
  4400                           
  4401                           ;UI.c: 105: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4402  00021A  0E00               	movlw	0
  4403  00021C  0100               	movlb	0	; () banked
  4404  00021E  6FCA               	movwf	UI@i_640& (0+255),b
  4405  000220                     l4845:
  4406                           
  4407                           ; BSR set to: 0
  4408  000220  0E63               	movlw	99
  4409  000222  0100               	movlb	0	; () banked
  4410  000224  65CA               	cpfsgt	UI@i_640& (0+255),b
  4411  000226  D001               	goto	l4849
  4412  000228  D00C               	goto	l4853
  4413  00022A                     l4849:
  4414                           
  4415                           ; BSR set to: 0
  4416  00022A  0E68               	movlw	104
  4417  00022C  0100               	movlb	0	; () banked
  4418  00022E  6FC4               	movwf	??_UI& (0+255),b
  4419  000230  0EE4               	movlw	228
  4420  000232                     u4567:
  4421  000232  2EE8               	decfsz	wreg,f,c
  4422  000234  D7FE               	bra	u4567
  4423  000236  2FC4               	decfsz	??_UI& (0+255),f,b
  4424  000238  D7FC               	bra	u4567
  4425  00023A  F000               	nop	
  4426  00023C  0100               	movlb	0	; () banked
  4427  00023E  2BCA               	incf	UI@i_640& (0+255),f,b
  4428  000240  D7EF               	goto	l4845
  4429  000242                     l4853:
  4430                           
  4431                           ; BSR set to: 0
  4432  000242  0100               	movlb	0	; () banked
  4433  000244  51EF               	movf	_logstate& (0+255),w,b
  4434  000246  0100               	movlb	0	; () banked
  4435  000248  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4436  00024A  B4D8               	btfsc	status,2,c
  4437  00024C  0012               	return	
  4438                           
  4439                           ; BSR set to: 0
  4440                           ;UI.c: 106: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4441                           
  4442                           ; BSR set to: 0
  4443                           
  4444                           ; BSR set to: 0
  4445  00024E  0E00               	movlw	0
  4446  000250  0100               	movlb	0	; () banked
  4447  000252  6FCB               	movwf	UI@i_641& (0+255),b
  4448  000254                     l4859:
  4449                           
  4450                           ; BSR set to: 0
  4451  000254  0E63               	movlw	99
  4452  000256  0100               	movlb	0	; () banked
  4453  000258  65CB               	cpfsgt	UI@i_641& (0+255),b
  4454  00025A  D001               	goto	l4863
  4455  00025C  D00C               	goto	l4867
  4456  00025E                     l4863:
  4457                           
  4458                           ; BSR set to: 0
  4459  00025E  0E68               	movlw	104
  4460  000260  0100               	movlb	0	; () banked
  4461  000262  6FC4               	movwf	??_UI& (0+255),b
  4462  000264  0EE4               	movlw	228
  4463  000266                     u4577:
  4464  000266  2EE8               	decfsz	wreg,f,c
  4465  000268  D7FE               	bra	u4577
  4466  00026A  2FC4               	decfsz	??_UI& (0+255),f,b
  4467  00026C  D7FC               	bra	u4577
  4468  00026E  F000               	nop	
  4469  000270  0100               	movlb	0	; () banked
  4470  000272  2BCB               	incf	UI@i_641& (0+255),f,b
  4471  000274  D7EF               	goto	l4859
  4472  000276                     l4867:
  4473                           
  4474                           ; BSR set to: 0
  4475  000276  0100               	movlb	0	; () banked
  4476  000278  51EF               	movf	_logstate& (0+255),w,b
  4477  00027A  0100               	movlb	0	; () banked
  4478  00027C  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4479  00027E  B4D8               	btfsc	status,2,c
  4480  000280  0012               	return	
  4481                           
  4482                           ; BSR set to: 0
  4483                           ;UI.c: 108: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4484                           
  4485                           ; BSR set to: 0
  4486                           
  4487                           ; BSR set to: 0
  4488  000282  0E01               	movlw	1
  4489  000284  EC43  F014         	call	_lcdInst
  4490  000288  0E68               	movlw	104
  4491  00028A  0100               	movlb	0	; () banked
  4492  00028C  6FC4               	movwf	??_UI& (0+255),b
  4493  00028E  0EE4               	movlw	228
  4494  000290                     u4587:
  4495  000290  2EE8               	decfsz	wreg,f,c
  4496  000292  D7FE               	bra	u4587
  4497  000294  2FC4               	decfsz	??_UI& (0+255),f,b
  4498  000296  D7FC               	bra	u4587
  4499  000298  F000               	nop	
  4500                           
  4501                           ;UI.c: 109: lcdInst(0b10000000);;
  4502  00029A  0E80               	movlw	128
  4503  00029C  EC43  F014         	call	_lcdInst
  4504                           
  4505                           ;UI.c: 110: printf("Duration:");
  4506  0002A0  0EB4               	movlw	low STR_7
  4507  0002A2  0100               	movlb	0	; () banked
  4508  0002A4  6F8E               	movwf	printf@f& (0+255),b
  4509  0002A6  0EFF               	movlw	high STR_7
  4510  0002A8  0100               	movlb	0	; () banked
  4511  0002AA  6F8F               	movwf	(printf@f+1)& (0+255),b
  4512  0002AC  ECAA  F002         	call	_printf	;wreg free
  4513                           
  4514                           ;UI.c: 111: lcdInst(0b11000000);;
  4515  0002B0  0EC0               	movlw	192
  4516  0002B2  EC43  F014         	call	_lcdInst
  4517                           
  4518                           ;UI.c: 112: printf("%d min(s) %d secs", 2, 42);
  4519  0002B6  0E13               	movlw	low STR_8
  4520  0002B8  0100               	movlb	0	; () banked
  4521  0002BA  6F8E               	movwf	printf@f& (0+255),b
  4522  0002BC  0EFE               	movlw	high STR_8
  4523  0002BE  0100               	movlb	0	; () banked
  4524  0002C0  6F8F               	movwf	(printf@f+1)& (0+255),b
  4525  0002C2  0E00               	movlw	0
  4526  0002C4  0100               	movlb	0	; () banked
  4527  0002C6  6F91               	movwf	(?_printf+3)& (0+255),b
  4528  0002C8  0E02               	movlw	2
  4529  0002CA  6F90               	movwf	(?_printf+2)& (0+255),b
  4530  0002CC  0E00               	movlw	0
  4531  0002CE  0100               	movlb	0	; () banked
  4532  0002D0  6F93               	movwf	(?_printf+5)& (0+255),b
  4533  0002D2  0E2A               	movlw	42
  4534  0002D4  6F92               	movwf	(?_printf+4)& (0+255),b
  4535  0002D6  ECAA  F002         	call	_printf	;wreg free
  4536                           
  4537                           ;UI.c: 114: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4538  0002DA  0E00               	movlw	0
  4539  0002DC  0100               	movlb	0	; () banked
  4540  0002DE  6FCC               	movwf	UI@i_644& (0+255),b
  4541  0002E0                     l4885:
  4542                           
  4543                           ; BSR set to: 0
  4544  0002E0  0E63               	movlw	99
  4545  0002E2  0100               	movlb	0	; () banked
  4546  0002E4  65CC               	cpfsgt	UI@i_644& (0+255),b
  4547  0002E6  D001               	goto	l4889
  4548  0002E8  D00C               	goto	l4893
  4549  0002EA                     l4889:
  4550                           
  4551                           ; BSR set to: 0
  4552  0002EA  0E68               	movlw	104
  4553  0002EC  0100               	movlb	0	; () banked
  4554  0002EE  6FC4               	movwf	??_UI& (0+255),b
  4555  0002F0  0EE4               	movlw	228
  4556  0002F2                     u4597:
  4557  0002F2  2EE8               	decfsz	wreg,f,c
  4558  0002F4  D7FE               	bra	u4597
  4559  0002F6  2FC4               	decfsz	??_UI& (0+255),f,b
  4560  0002F8  D7FC               	bra	u4597
  4561  0002FA  F000               	nop	
  4562  0002FC  0100               	movlb	0	; () banked
  4563  0002FE  2BCC               	incf	UI@i_644& (0+255),f,b
  4564  000300  D7EF               	goto	l4885
  4565  000302                     l4893:
  4566                           
  4567                           ; BSR set to: 0
  4568  000302  0100               	movlb	0	; () banked
  4569  000304  51EF               	movf	_logstate& (0+255),w,b
  4570  000306  0100               	movlb	0	; () banked
  4571  000308  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4572  00030A  B4D8               	btfsc	status,2,c
  4573  00030C  0012               	return	
  4574                           
  4575                           ; BSR set to: 0
  4576                           ;UI.c: 115: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4577                           
  4578                           ; BSR set to: 0
  4579                           
  4580                           ; BSR set to: 0
  4581  00030E  0E00               	movlw	0
  4582  000310  0100               	movlb	0	; () banked
  4583  000312  6FCD               	movwf	UI@i_645& (0+255),b
  4584  000314                     l4899:
  4585                           
  4586                           ; BSR set to: 0
  4587  000314  0E63               	movlw	99
  4588  000316  0100               	movlb	0	; () banked
  4589  000318  65CD               	cpfsgt	UI@i_645& (0+255),b
  4590  00031A  D001               	goto	l4903
  4591  00031C  D00C               	goto	l4907
  4592  00031E                     l4903:
  4593                           
  4594                           ; BSR set to: 0
  4595  00031E  0E68               	movlw	104
  4596  000320  0100               	movlb	0	; () banked
  4597  000322  6FC4               	movwf	??_UI& (0+255),b
  4598  000324  0EE4               	movlw	228
  4599  000326                     u4607:
  4600  000326  2EE8               	decfsz	wreg,f,c
  4601  000328  D7FE               	bra	u4607
  4602  00032A  2FC4               	decfsz	??_UI& (0+255),f,b
  4603  00032C  D7FC               	bra	u4607
  4604  00032E  F000               	nop	
  4605  000330  0100               	movlb	0	; () banked
  4606  000332  2BCD               	incf	UI@i_645& (0+255),f,b
  4607  000334  D7EF               	goto	l4899
  4608  000336                     l4907:
  4609                           
  4610                           ; BSR set to: 0
  4611  000336  0100               	movlb	0	; () banked
  4612  000338  51EF               	movf	_logstate& (0+255),w,b
  4613  00033A  0100               	movlb	0	; () banked
  4614  00033C  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4615  00033E  B4D8               	btfsc	status,2,c
  4616  000340  0012               	return	
  4617                           
  4618                           ; BSR set to: 0
  4619                           ;UI.c: 117: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4620                           
  4621                           ; BSR set to: 0
  4622                           
  4623                           ; BSR set to: 0
  4624  000342  0E01               	movlw	1
  4625  000344  EC43  F014         	call	_lcdInst
  4626  000348  0E68               	movlw	104
  4627  00034A  0100               	movlb	0	; () banked
  4628  00034C  6FC4               	movwf	??_UI& (0+255),b
  4629  00034E  0EE4               	movlw	228
  4630  000350                     u4617:
  4631  000350  2EE8               	decfsz	wreg,f,c
  4632  000352  D7FE               	bra	u4617
  4633  000354  2FC4               	decfsz	??_UI& (0+255),f,b
  4634  000356  D7FC               	bra	u4617
  4635  000358  F000               	nop	
  4636                           
  4637                           ;UI.c: 118: lcdInst(0b10000000);;
  4638  00035A  0E80               	movlw	128
  4639  00035C  EC43  F014         	call	_lcdInst
  4640                           
  4641                           ;UI.c: 119: printf(" -- Pop  can -- ");
  4642  000360  0E9C               	movlw	low STR_9
  4643  000362  0100               	movlb	0	; () banked
  4644  000364  6F8E               	movwf	printf@f& (0+255),b
  4645  000366  0EFE               	movlw	high STR_9
  4646  000368  0100               	movlb	0	; () banked
  4647  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
  4648  00036C  ECAA  F002         	call	_printf	;wreg free
  4649                           
  4650                           ;UI.c: 120: lcdInst(0b11000000);;
  4651  000370  0EC0               	movlw	192
  4652  000372  EC43  F014         	call	_lcdInst
  4653                           
  4654                           ;UI.c: 121: printf("No tab: 9|Tab: 1");
  4655  000376  0ECF               	movlw	low STR_10
  4656  000378  0100               	movlb	0	; () banked
  4657  00037A  6F8E               	movwf	printf@f& (0+255),b
  4658  00037C  0EFE               	movlw	high STR_10
  4659  00037E  0100               	movlb	0	; () banked
  4660  000380  6F8F               	movwf	(printf@f+1)& (0+255),b
  4661  000382  ECAA  F002         	call	_printf	;wreg free
  4662                           
  4663                           ;UI.c: 123: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4664  000386  0E00               	movlw	0
  4665  000388  0100               	movlb	0	; () banked
  4666  00038A  6FCE               	movwf	UI@i_648& (0+255),b
  4667  00038C                     l4925:
  4668                           
  4669                           ; BSR set to: 0
  4670  00038C  0E63               	movlw	99
  4671  00038E  0100               	movlb	0	; () banked
  4672  000390  65CE               	cpfsgt	UI@i_648& (0+255),b
  4673  000392  D001               	goto	l4929
  4674  000394  D00C               	goto	l4933
  4675  000396                     l4929:
  4676                           
  4677                           ; BSR set to: 0
  4678  000396  0E68               	movlw	104
  4679  000398  0100               	movlb	0	; () banked
  4680  00039A  6FC4               	movwf	??_UI& (0+255),b
  4681  00039C  0EE4               	movlw	228
  4682  00039E                     u4627:
  4683  00039E  2EE8               	decfsz	wreg,f,c
  4684  0003A0  D7FE               	bra	u4627
  4685  0003A2  2FC4               	decfsz	??_UI& (0+255),f,b
  4686  0003A4  D7FC               	bra	u4627
  4687  0003A6  F000               	nop	
  4688  0003A8  0100               	movlb	0	; () banked
  4689  0003AA  2BCE               	incf	UI@i_648& (0+255),f,b
  4690  0003AC  D7EF               	goto	l4925
  4691  0003AE                     l4933:
  4692                           
  4693                           ; BSR set to: 0
  4694  0003AE  0100               	movlb	0	; () banked
  4695  0003B0  51EF               	movf	_logstate& (0+255),w,b
  4696  0003B2  0100               	movlb	0	; () banked
  4697  0003B4  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4698  0003B6  B4D8               	btfsc	status,2,c
  4699  0003B8  0012               	return	
  4700                           
  4701                           ; BSR set to: 0
  4702                           ;UI.c: 124: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4703                           
  4704                           ; BSR set to: 0
  4705                           
  4706                           ; BSR set to: 0
  4707  0003BA  0E00               	movlw	0
  4708  0003BC  0100               	movlb	0	; () banked
  4709  0003BE  6FCF               	movwf	UI@i_649& (0+255),b
  4710  0003C0                     l4939:
  4711                           
  4712                           ; BSR set to: 0
  4713  0003C0  0E63               	movlw	99
  4714  0003C2  0100               	movlb	0	; () banked
  4715  0003C4  65CF               	cpfsgt	UI@i_649& (0+255),b
  4716  0003C6  D001               	goto	l4943
  4717  0003C8  D00C               	goto	l4947
  4718  0003CA                     l4943:
  4719                           
  4720                           ; BSR set to: 0
  4721  0003CA  0E68               	movlw	104
  4722  0003CC  0100               	movlb	0	; () banked
  4723  0003CE  6FC4               	movwf	??_UI& (0+255),b
  4724  0003D0  0EE4               	movlw	228
  4725  0003D2                     u4637:
  4726  0003D2  2EE8               	decfsz	wreg,f,c
  4727  0003D4  D7FE               	bra	u4637
  4728  0003D6  2FC4               	decfsz	??_UI& (0+255),f,b
  4729  0003D8  D7FC               	bra	u4637
  4730  0003DA  F000               	nop	
  4731  0003DC  0100               	movlb	0	; () banked
  4732  0003DE  2BCF               	incf	UI@i_649& (0+255),f,b
  4733  0003E0  D7EF               	goto	l4939
  4734  0003E2                     l4947:
  4735                           
  4736                           ; BSR set to: 0
  4737  0003E2  0100               	movlb	0	; () banked
  4738  0003E4  51EF               	movf	_logstate& (0+255),w,b
  4739  0003E6  0100               	movlb	0	; () banked
  4740  0003E8  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4741  0003EA  B4D8               	btfsc	status,2,c
  4742  0003EC  0012               	return	
  4743                           
  4744                           ; BSR set to: 0
  4745                           ;UI.c: 126: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4746                           
  4747                           ; BSR set to: 0
  4748                           
  4749                           ; BSR set to: 0
  4750  0003EE  0E01               	movlw	1
  4751  0003F0  EC43  F014         	call	_lcdInst
  4752  0003F4  0E68               	movlw	104
  4753  0003F6  0100               	movlb	0	; () banked
  4754  0003F8  6FC4               	movwf	??_UI& (0+255),b
  4755  0003FA  0EE4               	movlw	228
  4756  0003FC                     u4647:
  4757  0003FC  2EE8               	decfsz	wreg,f,c
  4758  0003FE  D7FE               	bra	u4647
  4759  000400  2FC4               	decfsz	??_UI& (0+255),f,b
  4760  000402  D7FC               	bra	u4647
  4761  000404  F000               	nop	
  4762                           
  4763                           ;UI.c: 127: lcdInst(0b10000000);;
  4764  000406  0E80               	movlw	128
  4765  000408  EC43  F014         	call	_lcdInst
  4766                           
  4767                           ;UI.c: 128: printf(" -- Soup can -- ");
  4768  00040C  0EAD               	movlw	low STR_11
  4769  00040E  0100               	movlb	0	; () banked
  4770  000410  6F8E               	movwf	printf@f& (0+255),b
  4771  000412  0EFE               	movlw	high STR_11
  4772  000414  0100               	movlb	0	; () banked
  4773  000416  6F8F               	movwf	(printf@f+1)& (0+255),b
  4774  000418  ECAA  F002         	call	_printf	;wreg free
  4775                           
  4776                           ;UI.c: 129: lcdInst(0b11000000);;
  4777  00041C  0EC0               	movlw	192
  4778  00041E  EC43  F014         	call	_lcdInst
  4779                           
  4780                           ;UI.c: 130: printf("No lbl: 1|lbl: 1");
  4781  000422  0EE0               	movlw	low STR_12
  4782  000424  0100               	movlb	0	; () banked
  4783  000426  6F8E               	movwf	printf@f& (0+255),b
  4784  000428  0EFE               	movlw	high STR_12
  4785  00042A  0100               	movlb	0	; () banked
  4786  00042C  6F8F               	movwf	(printf@f+1)& (0+255),b
  4787  00042E  ECAA  F002         	call	_printf	;wreg free
  4788                           
  4789                           ;UI.c: 132: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4790  000432  0E00               	movlw	0
  4791  000434  0100               	movlb	0	; () banked
  4792  000436  6FD0               	movwf	UI@i_652& (0+255),b
  4793  000438                     l4965:
  4794                           
  4795                           ; BSR set to: 0
  4796  000438  0E63               	movlw	99
  4797  00043A  0100               	movlb	0	; () banked
  4798  00043C  65D0               	cpfsgt	UI@i_652& (0+255),b
  4799  00043E  D001               	goto	l4969
  4800  000440  D00C               	goto	l4973
  4801  000442                     l4969:
  4802                           
  4803                           ; BSR set to: 0
  4804  000442  0E68               	movlw	104
  4805  000444  0100               	movlb	0	; () banked
  4806  000446  6FC4               	movwf	??_UI& (0+255),b
  4807  000448  0EE4               	movlw	228
  4808  00044A                     u4657:
  4809  00044A  2EE8               	decfsz	wreg,f,c
  4810  00044C  D7FE               	bra	u4657
  4811  00044E  2FC4               	decfsz	??_UI& (0+255),f,b
  4812  000450  D7FC               	bra	u4657
  4813  000452  F000               	nop	
  4814  000454  0100               	movlb	0	; () banked
  4815  000456  2BD0               	incf	UI@i_652& (0+255),f,b
  4816  000458  D7EF               	goto	l4965
  4817  00045A                     l4973:
  4818                           
  4819                           ; BSR set to: 0
  4820  00045A  0100               	movlb	0	; () banked
  4821  00045C  51EF               	movf	_logstate& (0+255),w,b
  4822  00045E  0100               	movlb	0	; () banked
  4823  000460  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4824  000462  B4D8               	btfsc	status,2,c
  4825  000464  0012               	return	
  4826                           
  4827                           ; BSR set to: 0
  4828                           ;UI.c: 133: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4829                           
  4830                           ; BSR set to: 0
  4831                           
  4832                           ; BSR set to: 0
  4833  000466  0E00               	movlw	0
  4834  000468  0100               	movlb	0	; () banked
  4835  00046A  6FD1               	movwf	UI@i_653& (0+255),b
  4836  00046C                     l4979:
  4837                           
  4838                           ; BSR set to: 0
  4839  00046C  0E63               	movlw	99
  4840  00046E  0100               	movlb	0	; () banked
  4841  000470  65D1               	cpfsgt	UI@i_653& (0+255),b
  4842  000472  D001               	goto	l4983
  4843  000474  D00C               	goto	l4987
  4844  000476                     l4983:
  4845                           
  4846                           ; BSR set to: 0
  4847  000476  0E68               	movlw	104
  4848  000478  0100               	movlb	0	; () banked
  4849  00047A  6FC4               	movwf	??_UI& (0+255),b
  4850  00047C  0EE4               	movlw	228
  4851  00047E                     u4667:
  4852  00047E  2EE8               	decfsz	wreg,f,c
  4853  000480  D7FE               	bra	u4667
  4854  000482  2FC4               	decfsz	??_UI& (0+255),f,b
  4855  000484  D7FC               	bra	u4667
  4856  000486  F000               	nop	
  4857  000488  0100               	movlb	0	; () banked
  4858  00048A  2BD1               	incf	UI@i_653& (0+255),f,b
  4859  00048C  D7EF               	goto	l4979
  4860  00048E                     l4987:
  4861                           
  4862                           ; BSR set to: 0
  4863  00048E  0100               	movlb	0	; () banked
  4864  000490  51EF               	movf	_logstate& (0+255),w,b
  4865  000492  0100               	movlb	0	; () banked
  4866  000494  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4867  000496  B4D8               	btfsc	status,2,c
  4868  000498  0012               	return	
  4869                           
  4870                           ; BSR set to: 0
  4871                           ;UI.c: 135: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4872                           
  4873                           ; BSR set to: 0
  4874                           
  4875                           ; BSR set to: 0
  4876  00049A  0E01               	movlw	1
  4877  00049C  EC43  F014         	call	_lcdInst
  4878  0004A0  0E68               	movlw	104
  4879  0004A2  0100               	movlb	0	; () banked
  4880  0004A4  6FC4               	movwf	??_UI& (0+255),b
  4881  0004A6  0EE4               	movlw	228
  4882  0004A8                     u4677:
  4883  0004A8  2EE8               	decfsz	wreg,f,c
  4884  0004AA  D7FE               	bra	u4677
  4885  0004AC  2FC4               	decfsz	??_UI& (0+255),f,b
  4886  0004AE  D7FC               	bra	u4677
  4887  0004B0  F000               	nop	
  4888                           
  4889                           ;UI.c: 136: lcdInst(0b10000000);;
  4890  0004B2  0E80               	movlw	128
  4891  0004B4  EC43  F014         	call	_lcdInst
  4892                           
  4893                           ;UI.c: 137: printf("-- Total cans --");
  4894  0004B8  0EBE               	movlw	low STR_13
  4895  0004BA  0100               	movlb	0	; () banked
  4896  0004BC  6F8E               	movwf	printf@f& (0+255),b
  4897  0004BE  0EFE               	movlw	high STR_13
  4898  0004C0  0100               	movlb	0	; () banked
  4899  0004C2  6F8F               	movwf	(printf@f+1)& (0+255),b
  4900  0004C4  ECAA  F002         	call	_printf	;wreg free
  4901                           
  4902                           ;UI.c: 138: lcdInst(0b11000000);;
  4903  0004C8  0EC0               	movlw	192
  4904  0004CA  EC43  F014         	call	_lcdInst
  4905                           
  4906                           ;UI.c: 139: printf("12");
  4907  0004CE  0EFC               	movlw	low STR_14
  4908  0004D0  0100               	movlb	0	; () banked
  4909  0004D2  6F8E               	movwf	printf@f& (0+255),b
  4910  0004D4  0EFF               	movlw	high STR_14
  4911  0004D6  0100               	movlb	0	; () banked
  4912  0004D8  6F8F               	movwf	(printf@f+1)& (0+255),b
  4913  0004DA  ECAA  F002         	call	_printf	;wreg free
  4914                           
  4915                           ;UI.c: 141: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4916  0004DE  0E00               	movlw	0
  4917  0004E0  0100               	movlb	0	; () banked
  4918  0004E2  6FD2               	movwf	UI@i_656& (0+255),b
  4919  0004E4                     l5005:
  4920                           
  4921                           ; BSR set to: 0
  4922  0004E4  0E63               	movlw	99
  4923  0004E6  0100               	movlb	0	; () banked
  4924  0004E8  65D2               	cpfsgt	UI@i_656& (0+255),b
  4925  0004EA  D001               	goto	l5009
  4926  0004EC  D00C               	goto	l5013
  4927  0004EE                     l5009:
  4928                           
  4929                           ; BSR set to: 0
  4930  0004EE  0E68               	movlw	104
  4931  0004F0  0100               	movlb	0	; () banked
  4932  0004F2  6FC4               	movwf	??_UI& (0+255),b
  4933  0004F4  0EE4               	movlw	228
  4934  0004F6                     u4687:
  4935  0004F6  2EE8               	decfsz	wreg,f,c
  4936  0004F8  D7FE               	bra	u4687
  4937  0004FA  2FC4               	decfsz	??_UI& (0+255),f,b
  4938  0004FC  D7FC               	bra	u4687
  4939  0004FE  F000               	nop	
  4940  000500  0100               	movlb	0	; () banked
  4941  000502  2BD2               	incf	UI@i_656& (0+255),f,b
  4942  000504  D7EF               	goto	l5005
  4943  000506                     l5013:
  4944                           
  4945                           ; BSR set to: 0
  4946  000506  0100               	movlb	0	; () banked
  4947  000508  51EF               	movf	_logstate& (0+255),w,b
  4948  00050A  0100               	movlb	0	; () banked
  4949  00050C  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4950  00050E  B4D8               	btfsc	status,2,c
  4951  000510  0012               	return	
  4952                           
  4953                           ; BSR set to: 0
  4954                           ;UI.c: 142: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4955                           
  4956                           ; BSR set to: 0
  4957                           
  4958                           ; BSR set to: 0
  4959  000512  0E00               	movlw	0
  4960  000514  0100               	movlb	0	; () banked
  4961  000516  6FD3               	movwf	UI@i_657& (0+255),b
  4962  000518                     l5019:
  4963                           
  4964                           ; BSR set to: 0
  4965  000518  0E63               	movlw	99
  4966  00051A  0100               	movlb	0	; () banked
  4967  00051C  65D3               	cpfsgt	UI@i_657& (0+255),b
  4968  00051E  D001               	goto	l5023
  4969  000520  D00C               	goto	l5027
  4970  000522                     l5023:
  4971                           
  4972                           ; BSR set to: 0
  4973  000522  0E68               	movlw	104
  4974  000524  0100               	movlb	0	; () banked
  4975  000526  6FC4               	movwf	??_UI& (0+255),b
  4976  000528  0EE4               	movlw	228
  4977  00052A                     u4697:
  4978  00052A  2EE8               	decfsz	wreg,f,c
  4979  00052C  D7FE               	bra	u4697
  4980  00052E  2FC4               	decfsz	??_UI& (0+255),f,b
  4981  000530  D7FC               	bra	u4697
  4982  000532  F000               	nop	
  4983  000534  0100               	movlb	0	; () banked
  4984  000536  2BD3               	incf	UI@i_657& (0+255),f,b
  4985  000538  D7EF               	goto	l5019
  4986  00053A                     l5027:
  4987                           
  4988                           ; BSR set to: 0
  4989  00053A  0100               	movlb	0	; () banked
  4990  00053C  51EF               	movf	_logstate& (0+255),w,b
  4991  00053E  0100               	movlb	0	; () banked
  4992  000540  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4993  000542  B4D8               	btfsc	status,2,c
  4994  000544  0012               	return	
  4995  000546                     l5031:
  4996  000546  0100               	movlb	0	; () banked
  4997  000548  51EF               	movf	_logstate& (0+255),w,b
  4998  00054A  0100               	movlb	0	; () banked
  4999  00054C  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  5000  00054E  B4D8               	btfsc	status,2,c
  5001  000550  0012               	return	
  5002  000552  D5E7               	goto	l4791
  5003  000554                     __end_of_UI:
  5004                           	opt stack 0
  5005                           tblptru	equ	0xFF8
  5006                           tblptrh	equ	0xFF7
  5007                           tblptrl	equ	0xFF6
  5008                           tablat	equ	0xFF5
  5009                           prodh	equ	0xFF4
  5010                           prodl	equ	0xFF3
  5011                           intcon	equ	0xFF2
  5012                           intcon3	equ	0xFF0
  5013                           postinc0	equ	0xFEE
  5014                           wreg	equ	0xFE8
  5015                           postdec1	equ	0xFE5
  5016                           fsr1l	equ	0xFE1
  5017                           indf2	equ	0xFDF
  5018                           postinc2	equ	0xFDE
  5019                           postdec2	equ	0xFDD
  5020                           fsr2h	equ	0xFDA
  5021                           fsr2l	equ	0xFD9
  5022                           status	equ	0xFD8
  5023                           
  5024 ;; *************** function _printRTC *****************
  5025 ;; Defined at:
  5026 ;;		line 61 in file "RTC.c"
  5027 ;; Parameters:    Size  Location     Type
  5028 ;;		None
  5029 ;; Auto vars:     Size  Location     Type
  5030 ;;  i               2   66[BANK0 ] int 
  5031 ;;  INT_time       14   46[BANK0 ] int [7]
  5032 ;;  month           4   62[BANK0 ] unsigned char [4]
  5033 ;;  RTC_month       2   60[BANK0 ] int 
  5034 ;; Return value:  Size  Location     Type
  5035 ;;                  1    wreg      void 
  5036 ;; Registers used:
  5037 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5038 ;; Tracked objects:
  5039 ;;		On entry : 0/0
  5040 ;;		On exit  : 0/0
  5041 ;;		Unchanged: 0/0
  5042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5044 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5045 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5046 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5047 ;;Total ram usage:       25 bytes
  5048 ;; Hardware stack levels used:    1
  5049 ;; Hardware stack levels required when called:   10
  5050 ;; This function calls:
  5051 ;;		_getRTC
  5052 ;;		_lcdInst
  5053 ;;		_printf
  5054 ;;		_strcpy
  5055 ;; This function is called by:
  5056 ;;		_UI
  5057 ;;		_change_state_to_menu_start
  5058 ;; This function uses a non-reentrant model
  5059 ;;
  5060                           
  5061                           	psect	text20
  5062  000CA4                     __ptext20:
  5063                           	opt stack 0
  5064  000CA4                     _printRTC:
  5065                           	opt stack 18
  5066                           
  5067                           ;RTC.c: 62: getRTC();
  5068                           
  5069                           ; BSR set to: 0
  5070                           ;incstack = 0
  5071  000CA4  EC39  F00F         	call	_getRTC	;wreg free
  5072                           
  5073                           ;RTC.c: 63: char month[] = "MMM";
  5074  000CA8  C0F5  F0BE         	movff	printRTC@F3177,printRTC@month
  5075  000CAC  C0F6  F0BF         	movff	printRTC@F3177+1,printRTC@month+1
  5076  000CB0  C0F7  F0C0         	movff	printRTC@F3177+2,printRTC@month+2
  5077  000CB4  C0F8  F0C1         	movff	printRTC@F3177+3,printRTC@month+3
  5078                           
  5079                           ;RTC.c: 64: int INT_time[7];
  5080                           ;RTC.c: 65: for(int i = 0; i < 7; i++){
  5081  000CB8  0E00               	movlw	0
  5082  000CBA  0100               	movlb	0	; () banked
  5083  000CBC  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  5084  000CBE  0E00               	movlw	0
  5085  000CC0  6FC2               	movwf	printRTC@i& (0+255),b
  5086                           
  5087                           ; BSR set to: 0
  5088  000CC2  0100               	movlb	0	; () banked
  5089  000CC4  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  5090  000CC6  D008               	goto	l4159
  5091  000CC8  0100               	movlb	0	; () banked
  5092  000CCA  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  5093  000CCC  E146               	bnz	l820
  5094  000CCE  0E07               	movlw	7
  5095  000CD0  0100               	movlb	0	; () banked
  5096  000CD2  5DC2               	subwf	printRTC@i& (0+255),w,b
  5097  000CD4  B0D8               	btfsc	status,0,c
  5098  000CD6  D041               	goto	l820
  5099  000CD8                     l4159:
  5100                           
  5101                           ; BSR set to: 0
  5102                           ;RTC.c: 66: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  5103  000CD8  0ED4               	movlw	low _time
  5104  000CDA  0100               	movlb	0	; () banked
  5105  000CDC  25C2               	addwf	printRTC@i& (0+255),w,b
  5106  000CDE  6ED9               	movwf	fsr2l,c
  5107  000CE0  0E00               	movlw	high _time
  5108  000CE2  0100               	movlb	0	; () banked
  5109  000CE4  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  5110  000CE6  6EDA               	movwf	fsr2h,c
  5111  000CE8  50DF               	movf	indf2,w,c
  5112  000CEA  0100               	movlb	0	; () banked
  5113  000CEC  6FAB               	movwf	??_printRTC& (0+255),b
  5114  000CEE  0100               	movlb	0	; () banked
  5115  000CF0  3BAB               	swapf	??_printRTC& (0+255),f,b
  5116  000CF2  0E0F               	movlw	15
  5117  000CF4  17AB               	andwf	??_printRTC& (0+255),f,b
  5118  000CF6  0E0F               	movlw	15
  5119  000CF8  0100               	movlb	0	; () banked
  5120  000CFA  17AB               	andwf	??_printRTC& (0+255),f,b
  5121  000CFC  0100               	movlb	0	; () banked
  5122  000CFE  51AB               	movf	??_printRTC& (0+255),w,b
  5123  000D00  0D0A               	mullw	10
  5124  000D02  0ED4               	movlw	low _time
  5125  000D04  0100               	movlb	0	; () banked
  5126  000D06  25C2               	addwf	printRTC@i& (0+255),w,b
  5127  000D08  6ED9               	movwf	fsr2l,c
  5128  000D0A  0E00               	movlw	high _time
  5129  000D0C  0100               	movlb	0	; () banked
  5130  000D0E  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  5131  000D10  6EDA               	movwf	fsr2h,c
  5132  000D12  50DF               	movf	indf2,w,c
  5133  000D14  0B0F               	andlw	15
  5134  000D16  0100               	movlb	0	; () banked
  5135  000D18  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  5136  000D1A  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  5137  000D1C  50F3               	movf	prodl,w,c
  5138  000D1E  0100               	movlb	0	; () banked
  5139  000D20  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  5140  000D22  50F4               	movf	prodh,w,c
  5141  000D24  0100               	movlb	0	; () banked
  5142  000D26  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  5143  000D28  90D8               	bcf	status,0,c
  5144  000D2A  0100               	movlb	0	; () banked
  5145  000D2C  35C2               	rlcf	printRTC@i& (0+255),w,b
  5146  000D2E  6ED9               	movwf	fsr2l,c
  5147  000D30  0100               	movlb	0	; () banked
  5148  000D32  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  5149  000D34  6EDA               	movwf	fsr2h,c
  5150  000D36  0EAE               	movlw	low printRTC@INT_time
  5151  000D38  26D9               	addwf	fsr2l,f,c
  5152  000D3A  0E00               	movlw	high printRTC@INT_time
  5153  000D3C  22DA               	addwfc	fsr2h,f,c
  5154  000D3E  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  5155  000D42  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  5156                           
  5157                           ; BSR set to: 0
  5158  000D46  0100               	movlb	0	; () banked
  5159  000D48  4BC2               	infsnz	printRTC@i& (0+255),f,b
  5160  000D4A  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  5161                           
  5162                           ; BSR set to: 0
  5163  000D4C  0100               	movlb	0	; () banked
  5164  000D4E  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  5165  000D50  D7C3               	goto	l4159
  5166  000D52  0100               	movlb	0	; () banked
  5167  000D54  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  5168  000D56  E101               	bnz	u3130
  5169  000D58  D7BA               	goto	L1
  5170  000D5A                     u3130:
  5171  000D5A                     l820:
  5172                           
  5173                           ; BSR set to: 0
  5174                           ;RTC.c: 67: }
  5175                           ;RTC.c: 68: int RTC_month = INT_time[5];
  5176  000D5A  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  5177  000D5E  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  5178                           
  5179                           ;RTC.c: 69: switch(RTC_month){
  5180  000D62  D0B4               	goto	l4191
  5181  000D64                     l4165:
  5182                           
  5183                           ; BSR set to: 0
  5184                           ;RTC.c: 71: strcpy(month, "Jan");
  5185  000D64  0EBE               	movlw	low printRTC@month
  5186  000D66  0100               	movlb	0	; () banked
  5187  000D68  6F80               	movwf	strcpy@to& (0+255),b
  5188  000D6A  0E00               	movlw	high printRTC@month
  5189  000D6C  0100               	movlb	0	; () banked
  5190  000D6E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5191  000D70  0EDC               	movlw	low STR_36
  5192  000D72  0100               	movlb	0	; () banked
  5193  000D74  6F82               	movwf	strcpy@from& (0+255),b
  5194  000D76  0EFF               	movlw	high STR_36
  5195  000D78  0100               	movlb	0	; () banked
  5196  000D7A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5197  000D7C  EC00  F012         	call	_strcpy	;wreg free
  5198                           
  5199                           ;RTC.c: 72: break;
  5200  000D80  D0D4               	goto	l4193
  5201  000D82                     l4167:
  5202                           
  5203                           ;RTC.c: 74: strcpy(month, "Feb");
  5204  000D82  0EBE               	movlw	low printRTC@month
  5205  000D84  0100               	movlb	0	; () banked
  5206  000D86  6F80               	movwf	strcpy@to& (0+255),b
  5207  000D88  0E00               	movlw	high printRTC@month
  5208  000D8A  0100               	movlb	0	; () banked
  5209  000D8C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5210  000D8E  0ECC               	movlw	low STR_37
  5211  000D90  0100               	movlb	0	; () banked
  5212  000D92  6F82               	movwf	strcpy@from& (0+255),b
  5213  000D94  0EFF               	movlw	high STR_37
  5214  000D96  0100               	movlb	0	; () banked
  5215  000D98  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5216  000D9A  EC00  F012         	call	_strcpy	;wreg free
  5217                           
  5218                           ;RTC.c: 75: break;
  5219  000D9E  D0C5               	goto	l4193
  5220  000DA0                     l4169:
  5221                           
  5222                           ;RTC.c: 77: strcpy(month, "Mar");
  5223  000DA0  0EBE               	movlw	low printRTC@month
  5224  000DA2  0100               	movlb	0	; () banked
  5225  000DA4  6F80               	movwf	strcpy@to& (0+255),b
  5226  000DA6  0E00               	movlw	high printRTC@month
  5227  000DA8  0100               	movlb	0	; () banked
  5228  000DAA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5229  000DAC  0EE8               	movlw	low STR_38
  5230  000DAE  0100               	movlb	0	; () banked
  5231  000DB0  6F82               	movwf	strcpy@from& (0+255),b
  5232  000DB2  0EFF               	movlw	high STR_38
  5233  000DB4  0100               	movlb	0	; () banked
  5234  000DB6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5235  000DB8  EC00  F012         	call	_strcpy	;wreg free
  5236                           
  5237                           ;RTC.c: 78: break;
  5238  000DBC  D0B6               	goto	l4193
  5239  000DBE                     l4171:
  5240                           
  5241                           ;RTC.c: 80: strcpy(month, "Apr");
  5242  000DBE  0EBE               	movlw	low printRTC@month
  5243  000DC0  0100               	movlb	0	; () banked
  5244  000DC2  6F80               	movwf	strcpy@to& (0+255),b
  5245  000DC4  0E00               	movlw	high printRTC@month
  5246  000DC6  0100               	movlb	0	; () banked
  5247  000DC8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5248  000DCA  0EEC               	movlw	low STR_39
  5249  000DCC  0100               	movlb	0	; () banked
  5250  000DCE  6F82               	movwf	strcpy@from& (0+255),b
  5251  000DD0  0EFF               	movlw	high STR_39
  5252  000DD2  0100               	movlb	0	; () banked
  5253  000DD4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5254  000DD6  EC00  F012         	call	_strcpy	;wreg free
  5255                           
  5256                           ;RTC.c: 81: break;
  5257  000DDA  D0A7               	goto	l4193
  5258  000DDC                     l4173:
  5259                           
  5260                           ;RTC.c: 83: strcpy(month, "May");
  5261  000DDC  0EBE               	movlw	low printRTC@month
  5262  000DDE  0100               	movlb	0	; () banked
  5263  000DE0  6F80               	movwf	strcpy@to& (0+255),b
  5264  000DE2  0E00               	movlw	high printRTC@month
  5265  000DE4  0100               	movlb	0	; () banked
  5266  000DE6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5267  000DE8  0EF8               	movlw	low STR_40
  5268  000DEA  0100               	movlb	0	; () banked
  5269  000DEC  6F82               	movwf	strcpy@from& (0+255),b
  5270  000DEE  0EFF               	movlw	high STR_40
  5271  000DF0  0100               	movlb	0	; () banked
  5272  000DF2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5273  000DF4  EC00  F012         	call	_strcpy	;wreg free
  5274                           
  5275                           ;RTC.c: 84: break;
  5276  000DF8  D098               	goto	l4193
  5277  000DFA                     l4175:
  5278                           
  5279                           ;RTC.c: 86: strcpy(month, "Jun");
  5280  000DFA  0EBE               	movlw	low printRTC@month
  5281  000DFC  0100               	movlb	0	; () banked
  5282  000DFE  6F80               	movwf	strcpy@to& (0+255),b
  5283  000E00  0E00               	movlw	high printRTC@month
  5284  000E02  0100               	movlb	0	; () banked
  5285  000E04  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5286  000E06  0EE0               	movlw	low STR_41
  5287  000E08  0100               	movlb	0	; () banked
  5288  000E0A  6F82               	movwf	strcpy@from& (0+255),b
  5289  000E0C  0EFF               	movlw	high STR_41
  5290  000E0E  0100               	movlb	0	; () banked
  5291  000E10  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5292  000E12  EC00  F012         	call	_strcpy	;wreg free
  5293                           
  5294                           ;RTC.c: 87: break;
  5295  000E16  D089               	goto	l4193
  5296  000E18                     l4177:
  5297                           
  5298                           ;RTC.c: 89: strcpy(month, "Jul");
  5299  000E18  0EBE               	movlw	low printRTC@month
  5300  000E1A  0100               	movlb	0	; () banked
  5301  000E1C  6F80               	movwf	strcpy@to& (0+255),b
  5302  000E1E  0E00               	movlw	high printRTC@month
  5303  000E20  0100               	movlb	0	; () banked
  5304  000E22  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5305  000E24  0ED8               	movlw	low STR_42
  5306  000E26  0100               	movlb	0	; () banked
  5307  000E28  6F82               	movwf	strcpy@from& (0+255),b
  5308  000E2A  0EFF               	movlw	high STR_42
  5309  000E2C  0100               	movlb	0	; () banked
  5310  000E2E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5311  000E30  EC00  F012         	call	_strcpy	;wreg free
  5312                           
  5313                           ;RTC.c: 90: break;
  5314  000E34  D07A               	goto	l4193
  5315  000E36                     l4179:
  5316                           
  5317                           ;RTC.c: 92: strcpy(month, "Aug");
  5318  000E36  0EBE               	movlw	low printRTC@month
  5319  000E38  0100               	movlb	0	; () banked
  5320  000E3A  6F80               	movwf	strcpy@to& (0+255),b
  5321  000E3C  0E00               	movlw	high printRTC@month
  5322  000E3E  0100               	movlb	0	; () banked
  5323  000E40  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5324  000E42  0ED4               	movlw	low STR_43
  5325  000E44  0100               	movlb	0	; () banked
  5326  000E46  6F82               	movwf	strcpy@from& (0+255),b
  5327  000E48  0EFF               	movlw	high STR_43
  5328  000E4A  0100               	movlb	0	; () banked
  5329  000E4C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5330  000E4E  EC00  F012         	call	_strcpy	;wreg free
  5331                           
  5332                           ;RTC.c: 93: break;
  5333  000E52  D06B               	goto	l4193
  5334  000E54                     l4181:
  5335                           
  5336                           ;RTC.c: 95: strcpy(month, "Sep");
  5337  000E54  0EBE               	movlw	low printRTC@month
  5338  000E56  0100               	movlb	0	; () banked
  5339  000E58  6F80               	movwf	strcpy@to& (0+255),b
  5340  000E5A  0E00               	movlw	high printRTC@month
  5341  000E5C  0100               	movlb	0	; () banked
  5342  000E5E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5343  000E60  0EE4               	movlw	low STR_44
  5344  000E62  0100               	movlb	0	; () banked
  5345  000E64  6F82               	movwf	strcpy@from& (0+255),b
  5346  000E66  0EFF               	movlw	high STR_44
  5347  000E68  0100               	movlb	0	; () banked
  5348  000E6A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5349  000E6C  EC00  F012         	call	_strcpy	;wreg free
  5350                           
  5351                           ;RTC.c: 96: break;
  5352  000E70  D05C               	goto	l4193
  5353  000E72                     l4183:
  5354                           
  5355                           ;RTC.c: 98: strcpy(month, "Oct");
  5356  000E72  0EBE               	movlw	low printRTC@month
  5357  000E74  0100               	movlb	0	; () banked
  5358  000E76  6F80               	movwf	strcpy@to& (0+255),b
  5359  000E78  0E00               	movlw	high printRTC@month
  5360  000E7A  0100               	movlb	0	; () banked
  5361  000E7C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5362  000E7E  0EF0               	movlw	low STR_45
  5363  000E80  0100               	movlb	0	; () banked
  5364  000E82  6F82               	movwf	strcpy@from& (0+255),b
  5365  000E84  0EFF               	movlw	high STR_45
  5366  000E86  0100               	movlb	0	; () banked
  5367  000E88  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5368  000E8A  EC00  F012         	call	_strcpy	;wreg free
  5369                           
  5370                           ;RTC.c: 99: break;
  5371  000E8E  D04D               	goto	l4193
  5372  000E90                     l4185:
  5373                           
  5374                           ;RTC.c: 101: strcpy(month, "Nov");
  5375  000E90  0EBE               	movlw	low printRTC@month
  5376  000E92  0100               	movlb	0	; () banked
  5377  000E94  6F80               	movwf	strcpy@to& (0+255),b
  5378  000E96  0E00               	movlw	high printRTC@month
  5379  000E98  0100               	movlb	0	; () banked
  5380  000E9A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5381  000E9C  0EF4               	movlw	low STR_46
  5382  000E9E  0100               	movlb	0	; () banked
  5383  000EA0  6F82               	movwf	strcpy@from& (0+255),b
  5384  000EA2  0EFF               	movlw	high STR_46
  5385  000EA4  0100               	movlb	0	; () banked
  5386  000EA6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5387  000EA8  EC00  F012         	call	_strcpy	;wreg free
  5388                           
  5389                           ;RTC.c: 102: break;
  5390  000EAC  D03E               	goto	l4193
  5391  000EAE                     l4187:
  5392                           
  5393                           ;RTC.c: 104: strcpy(month, "Dec");
  5394  000EAE  0EBE               	movlw	low printRTC@month
  5395  000EB0  0100               	movlb	0	; () banked
  5396  000EB2  6F80               	movwf	strcpy@to& (0+255),b
  5397  000EB4  0E00               	movlw	high printRTC@month
  5398  000EB6  0100               	movlb	0	; () banked
  5399  000EB8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5400  000EBA  0ED0               	movlw	low STR_47
  5401  000EBC  0100               	movlb	0	; () banked
  5402  000EBE  6F82               	movwf	strcpy@from& (0+255),b
  5403  000EC0  0EFF               	movlw	high STR_47
  5404  000EC2  0100               	movlb	0	; () banked
  5405  000EC4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5406  000EC6  EC00  F012         	call	_strcpy	;wreg free
  5407                           
  5408                           ;RTC.c: 106: }
  5409                           
  5410                           ;RTC.c: 105: break;
  5411  000ECA  D02F               	goto	l4193
  5412  000ECC                     l4191:
  5413  000ECC  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  5414  000ED0  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  5415                           
  5416                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5417                           ; Switch size 1, requested type "space"
  5418                           ; Number of cases is 1, Range of values is 0 to 0
  5419                           ; switch strategies available:
  5420                           ; Name         Instructions Cycles
  5421                           ; simple_byte            4     3 (average)
  5422                           ;	Chosen strategy is simple_byte
  5423  000ED4  0100               	movlb	0	; () banked
  5424  000ED6  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  5425  000ED8  0A00               	xorlw	0	; case 0
  5426  000EDA  A4D8               	btfss	status,2,c
  5427  000EDC  D026               	goto	l4193
  5428                           
  5429                           ; BSR set to: 0
  5430                           ; Switch size 1, requested type "space"
  5431                           ; Number of cases is 12, Range of values is 1 to 12
  5432                           ; switch strategies available:
  5433                           ; Name         Instructions Cycles
  5434                           ; simple_byte           37    19 (average)
  5435                           ;	Chosen strategy is simple_byte
  5436  000EDE  0100               	movlb	0	; () banked
  5437  000EE0  51AB               	movf	??_printRTC& (0+255),w,b
  5438  000EE2  0A01               	xorlw	1	; case 1
  5439  000EE4  B4D8               	btfsc	status,2,c
  5440  000EE6  D73E               	goto	l4165
  5441  000EE8  0A03               	xorlw	3	; case 2
  5442  000EEA  B4D8               	btfsc	status,2,c
  5443  000EEC  D74A               	goto	l4167
  5444  000EEE  0A01               	xorlw	1	; case 3
  5445  000EF0  B4D8               	btfsc	status,2,c
  5446  000EF2  D756               	goto	l4169
  5447  000EF4  0A07               	xorlw	7	; case 4
  5448  000EF6  B4D8               	btfsc	status,2,c
  5449  000EF8  D762               	goto	l4171
  5450  000EFA  0A01               	xorlw	1	; case 5
  5451  000EFC  B4D8               	btfsc	status,2,c
  5452  000EFE  D76E               	goto	l4173
  5453  000F00  0A03               	xorlw	3	; case 6
  5454  000F02  B4D8               	btfsc	status,2,c
  5455  000F04  D77A               	goto	l4175
  5456  000F06  0A01               	xorlw	1	; case 7
  5457  000F08  B4D8               	btfsc	status,2,c
  5458  000F0A  D786               	goto	l4177
  5459  000F0C  0A0F               	xorlw	15	; case 8
  5460  000F0E  B4D8               	btfsc	status,2,c
  5461  000F10  D792               	goto	l4179
  5462  000F12  0A01               	xorlw	1	; case 9
  5463  000F14  B4D8               	btfsc	status,2,c
  5464  000F16  D79E               	goto	l4181
  5465  000F18  0A03               	xorlw	3	; case 10
  5466  000F1A  B4D8               	btfsc	status,2,c
  5467  000F1C  D7AA               	goto	l4183
  5468  000F1E  0A01               	xorlw	1	; case 11
  5469  000F20  B4D8               	btfsc	status,2,c
  5470  000F22  D7B6               	goto	l4185
  5471  000F24  0A07               	xorlw	7	; case 12
  5472  000F26  B4D8               	btfsc	status,2,c
  5473  000F28  D7C2               	goto	l4187
  5474  000F2A                     l4193:
  5475                           
  5476                           ;RTC.c: 107: lcdInst(0b10000000);;
  5477  000F2A  0E80               	movlw	128
  5478  000F2C  EC43  F014         	call	_lcdInst
  5479                           
  5480                           ;RTC.c: 108: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  5481  000F30  0ED4               	movlw	low STR_48
  5482  000F32  0100               	movlb	0	; () banked
  5483  000F34  6F8E               	movwf	printf@f& (0+255),b
  5484  000F36  0EFD               	movlw	high STR_48
  5485  000F38  0100               	movlb	0	; () banked
  5486  000F3A  6F8F               	movwf	(printf@f+1)& (0+255),b
  5487  000F3C  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  5488  000F40  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  5489  000F44  0EBE               	movlw	low printRTC@month
  5490  000F46  0100               	movlb	0	; () banked
  5491  000F48  6F92               	movwf	(?_printf+4)& (0+255),b
  5492  000F4A  0E00               	movlw	high printRTC@month
  5493  000F4C  0100               	movlb	0	; () banked
  5494  000F4E  6F93               	movwf	(?_printf+5)& (0+255),b
  5495  000F50  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  5496  000F54  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  5497  000F58  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  5498  000F5C  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  5499  000F60  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  5500  000F64  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  5501  000F68  ECAA  F002         	call	_printf	;wreg free
  5502  000F6C  0012               	return		;funcret
  5503  000F6E                     __end_of_printRTC:
  5504                           	opt stack 0
  5505                           tblptru	equ	0xFF8
  5506                           tblptrh	equ	0xFF7
  5507                           tblptrl	equ	0xFF6
  5508                           tablat	equ	0xFF5
  5509                           prodh	equ	0xFF4
  5510                           prodl	equ	0xFF3
  5511                           intcon	equ	0xFF2
  5512                           intcon3	equ	0xFF0
  5513                           postinc0	equ	0xFEE
  5514                           wreg	equ	0xFE8
  5515                           postdec1	equ	0xFE5
  5516                           fsr1l	equ	0xFE1
  5517                           indf2	equ	0xFDF
  5518                           postinc2	equ	0xFDE
  5519                           postdec2	equ	0xFDD
  5520                           fsr2h	equ	0xFDA
  5521                           fsr2l	equ	0xFD9
  5522                           status	equ	0xFD8
  5523                           
  5524 ;; *************** function _strcpy *****************
  5525 ;; Defined at:
  5526 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  5527 ;; Parameters:    Size  Location     Type
  5528 ;;  to              2    0[BANK0 ] PTR unsigned char 
  5529 ;;		 -> printRTC@month(4), 
  5530 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  5531 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
  5532 ;;		 -> STR_43(4), STR_42(4), STR_41(4), STR_40(4), 
  5533 ;;		 -> STR_39(4), STR_38(4), STR_37(4), STR_36(4), 
  5534 ;; Auto vars:     Size  Location     Type
  5535 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  5536 ;;		 -> printRTC@month(4), 
  5537 ;; Return value:  Size  Location     Type
  5538 ;;                  2    0[BANK0 ] PTR unsigned char 
  5539 ;; Registers used:
  5540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5541 ;; Tracked objects:
  5542 ;;		On entry : 0/0
  5543 ;;		On exit  : 0/0
  5544 ;;		Unchanged: 0/0
  5545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5546 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5547 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5549 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5550 ;;Total ram usage:        6 bytes
  5551 ;; Hardware stack levels used:    1
  5552 ;; Hardware stack levels required when called:    7
  5553 ;; This function calls:
  5554 ;;		Nothing
  5555 ;; This function is called by:
  5556 ;;		_printRTC
  5557 ;; This function uses a non-reentrant model
  5558 ;;
  5559                           
  5560                           	psect	text21
  5561  002400                     __ptext21:
  5562                           	opt stack 0
  5563  002400                     _strcpy:
  5564                           	opt stack 20
  5565                           
  5566                           ;incstack = 0
  5567  002400  C080  F084         	movff	strcpy@to,strcpy@cp
  5568  002404  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  5569  002408  D006               	goto	l3963
  5570  00240A                     l3961:
  5571  00240A  0100               	movlb	0	; () banked
  5572  00240C  4B84               	infsnz	strcpy@cp& (0+255),f,b
  5573  00240E  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  5574  002410  0100               	movlb	0	; () banked
  5575  002412  4B82               	infsnz	strcpy@from& (0+255),f,b
  5576  002414  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  5577  002416                     l3963:
  5578  002416  C082  FFF6         	movff	strcpy@from,tblptrl
  5579  00241A  C083  FFF7         	movff	strcpy@from+1,tblptrh
  5580  00241E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5581  00241E  6AF8               	clrf	tblptru,c
  5582  002420                     	endif
  5583  002420                     	if	0	;tblptru may be non-zero
  5584  002420                     	endif
  5585  002420  C084  FFD9         	movff	strcpy@cp,fsr2l
  5586  002424  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  5587  002428  0008               	tblrd		*
  5588  00242A  CFF5 FFDF          	movff	tablat,indf2
  5589  00242E  50DF               	movf	indf2,w,c
  5590  002430  B4D8               	btfsc	status,2,c
  5591  002432  0012               	return	
  5592  002434  D7EA               	goto	l3961
  5593  002436                     __end_of_strcpy:
  5594                           	opt stack 0
  5595                           tblptru	equ	0xFF8
  5596                           tblptrh	equ	0xFF7
  5597                           tblptrl	equ	0xFF6
  5598                           tablat	equ	0xFF5
  5599                           prodh	equ	0xFF4
  5600                           prodl	equ	0xFF3
  5601                           intcon	equ	0xFF2
  5602                           intcon3	equ	0xFF0
  5603                           postinc0	equ	0xFEE
  5604                           wreg	equ	0xFE8
  5605                           postdec1	equ	0xFE5
  5606                           fsr1l	equ	0xFE1
  5607                           indf2	equ	0xFDF
  5608                           postinc2	equ	0xFDE
  5609                           postdec2	equ	0xFDD
  5610                           fsr2h	equ	0xFDA
  5611                           fsr2l	equ	0xFD9
  5612                           status	equ	0xFD8
  5613                           
  5614 ;; *************** function _printf *****************
  5615 ;; Defined at:
  5616 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  5617 ;; Parameters:    Size  Location     Type
  5618 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  5619 ;;		 -> STR_50(21), STR_49(11), STR_48(24), STR_35(17), 
  5620 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
  5621 ;;		 -> STR_30(17), STR_29(17), STR_28(17), STR_27(17), 
  5622 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(17), 
  5623 ;;		 -> STR_22(17), STR_21(17), STR_20(17), STR_19(17), 
  5624 ;;		 -> STR_18(17), STR_17(17), STR_16(17), STR_15(17), 
  5625 ;;		 -> STR_14(3), STR_13(17), STR_12(17), STR_11(17), 
  5626 ;;		 -> STR_10(17), STR_9(17), STR_8(18), STR_7(10), 
  5627 ;;		 -> STR_6(17), STR_5(7), STR_4(17), STR_3(18), 
  5628 ;;		 -> STR_2(21), STR_1(14), 
  5629 ;; Auto vars:     Size  Location     Type
  5630 ;;  tmpval          4    0        struct .
  5631 ;;  width           2   41[BANK0 ] int 
  5632 ;;  len             2   37[BANK0 ] unsigned int 
  5633 ;;  val             2   35[BANK0 ] unsigned int 
  5634 ;;  cp              2   33[BANK0 ] PTR const unsigned char 
  5635 ;;		 -> STR_51(7), printRTC@month(4), 
  5636 ;;  ap              2   31[BANK0 ] PTR void [1]
  5637 ;;		 -> ?i2_printf(2), ?_printf(2), 
  5638 ;;  c               1   40[BANK0 ] char 
  5639 ;;  flag            1   39[BANK0 ] unsigned char 
  5640 ;;  prec            1   30[BANK0 ] char 
  5641 ;; Return value:  Size  Location     Type
  5642 ;;                  2   14[BANK0 ] int 
  5643 ;; Registers used:
  5644 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5645 ;; Tracked objects:
  5646 ;;		On entry : 0/0
  5647 ;;		On exit  : 0/0
  5648 ;;		Unchanged: 0/0
  5649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5650 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5651 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5652 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5653 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5654 ;;Total ram usage:       29 bytes
  5655 ;; Hardware stack levels used:    1
  5656 ;; Hardware stack levels required when called:    9
  5657 ;; This function calls:
  5658 ;;		___lwdiv
  5659 ;;		___lwmod
  5660 ;;		___wmul
  5661 ;;		_isdigit
  5662 ;;		_putch
  5663 ;; This function is called by:
  5664 ;;		_UI
  5665 ;;		_change_state_to_menu_start
  5666 ;;		_printRTC
  5667 ;; This function uses a non-reentrant model
  5668 ;;
  5669                           
  5670                           	psect	text22
  5671  000554                     __ptext22:
  5672                           	opt stack 0
  5673  000554                     _printf:
  5674                           	opt stack 19
  5675                           
  5676                           ;doprnt.c: 466: va_list ap;
  5677                           ;doprnt.c: 499: signed char c;
  5678                           ;doprnt.c: 501: int width;
  5679                           ;doprnt.c: 506: signed char prec;
  5680                           ;doprnt.c: 508: unsigned char flag;
  5681                           ;doprnt.c: 523: union {
  5682                           ;doprnt.c: 524: unsigned long vd;
  5683                           ;doprnt.c: 525: double integ;
  5684                           ;doprnt.c: 526: } tmpval;
  5685                           ;doprnt.c: 528: unsigned int val;
  5686                           ;doprnt.c: 529: unsigned len;
  5687                           ;doprnt.c: 530: const char * cp;
  5688                           ;doprnt.c: 533: *ap = __va_start();
  5689                           
  5690                           ;incstack = 0
  5691  000554  0E90               	movlw	low (?_printf+2)
  5692  000556  0100               	movlb	0	; () banked
  5693  000558  6F9F               	movwf	printf@ap& (0+255),b
  5694  00055A  0E00               	movlw	high (?_printf+2)
  5695  00055C  0100               	movlb	0	; () banked
  5696  00055E  6FA0               	movwf	(printf@ap+1)& (0+255),b
  5697                           
  5698                           ;doprnt.c: 536: while(c = *f++) {
  5699  000560  D1EE               	goto	l3941
  5700  000562                     l3817:
  5701                           
  5702                           ; BSR set to: 0
  5703                           ;doprnt.c: 538: if(c != '%')
  5704  000562  0E25               	movlw	37
  5705  000564  0100               	movlb	0	; () banked
  5706  000566  19A8               	xorwf	printf@c& (0+255),w,b
  5707  000568  B4D8               	btfsc	status,2,c
  5708  00056A  D005               	goto	l3821
  5709                           
  5710                           ; BSR set to: 0
  5711                           ;doprnt.c: 540: {
  5712                           ;doprnt.c: 541: (putch(c) );
  5713  00056C  0100               	movlb	0	; () banked
  5714  00056E  51A8               	movf	printf@c& (0+255),w,b
  5715  000570  EC3B  F014         	call	_putch
  5716                           
  5717                           ;doprnt.c: 542: continue;
  5718  000574  D1E4               	goto	l3941
  5719  000576                     l3821:
  5720                           
  5721                           ;doprnt.c: 543: }
  5722                           ;doprnt.c: 546: width = 0;
  5723  000576  0E00               	movlw	0
  5724  000578  0100               	movlb	0	; () banked
  5725  00057A  6FAA               	movwf	(printf@width+1)& (0+255),b
  5726  00057C  0E00               	movlw	0
  5727  00057E  6FA9               	movwf	printf@width& (0+255),b
  5728                           
  5729                           ;doprnt.c: 548: flag = 0;
  5730  000580  0E00               	movlw	0
  5731  000582  0100               	movlb	0	; () banked
  5732  000584  6FA7               	movwf	printf@flag& (0+255),b
  5733                           
  5734                           ; BSR set to: 0
  5735                           ;doprnt.c: 551: switch(*f) {
  5736                           
  5737                           ;doprnt.c: 550: for(;;) {
  5738  000586  D005               	goto	l3827
  5739  000588                     l3823:
  5740                           
  5741                           ;doprnt.c: 580: flag |= 0x04;
  5742  000588  0100               	movlb	0	; () banked
  5743  00058A  85A7               	bsf	printf@flag& (0+255),2,b
  5744                           
  5745                           ;doprnt.c: 581: f++;
  5746  00058C  0100               	movlb	0	; () banked
  5747  00058E  4B8E               	infsnz	printf@f& (0+255),f,b
  5748  000590  2B8F               	incf	(printf@f+1)& (0+255),f,b
  5749  000592                     l3827:
  5750  000592  C08E  FFF6         	movff	printf@f,tblptrl
  5751  000596  C08F  FFF7         	movff	printf@f+1,tblptrh
  5752  00059A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5753  00059A  6AF8               	clrf	tblptru,c
  5754  00059C                     	endif
  5755  00059C                     	if	0	;tblptru may be non-zero
  5756  00059C                     	endif
  5757  00059C  0008               	tblrd		*
  5758  00059E  50F5               	movf	tablat,w,c
  5759                           
  5760                           ; Switch size 1, requested type "space"
  5761                           ; Number of cases is 1, Range of values is 48 to 48
  5762                           ; switch strategies available:
  5763                           ; Name         Instructions Cycles
  5764                           ; simple_byte            4     3 (average)
  5765                           ;	Chosen strategy is simple_byte
  5766  0005A0  0A30               	xorlw	48	; case 48
  5767  0005A2  B4D8               	btfsc	status,2,c
  5768  0005A4  D7F1               	goto	l3823
  5769                           
  5770                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5771                           
  5772                           ;doprnt.c: 586: }
  5773                           
  5774                           ;doprnt.c: 585: break;
  5775  0005A6  C08E  FFF6         	movff	printf@f,tblptrl
  5776  0005AA  C08F  FFF7         	movff	printf@f+1,tblptrh
  5777  0005AE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5778  0005AE  6AF8               	clrf	tblptru,c
  5779  0005B0                     	endif
  5780  0005B0                     	if	0	;tblptru may be non-zero
  5781  0005B0                     	endif
  5782  0005B0  0008               	tblrd		*
  5783  0005B2  50F5               	movf	tablat,w,c
  5784  0005B4  EC83  F013         	call	_isdigit
  5785  0005B8  A0D8               	btfss	status,0,c
  5786  0005BA  D0CF               	goto	l3873
  5787                           
  5788                           ;doprnt.c: 598: width = 0;
  5789  0005BC  0E00               	movlw	0
  5790  0005BE  0100               	movlb	0	; () banked
  5791  0005C0  6FAA               	movwf	(printf@width+1)& (0+255),b
  5792  0005C2  0E00               	movlw	0
  5793  0005C4  6FA9               	movwf	printf@width& (0+255),b
  5794  0005C6                     l3833:
  5795                           
  5796                           ;doprnt.c: 600: width *= 10;
  5797  0005C6  C0A9  F080         	movff	printf@width,___wmul@multiplier
  5798  0005CA  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
  5799  0005CE  0E00               	movlw	0
  5800  0005D0  0100               	movlb	0	; () banked
  5801  0005D2  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5802  0005D4  0E0A               	movlw	10
  5803  0005D6  6F82               	movwf	___wmul@multiplicand& (0+255),b
  5804  0005D8  EC1B  F012         	call	___wmul	;wreg free
  5805  0005DC  C080  F0A9         	movff	?___wmul,printf@width
  5806  0005E0  C081  F0AA         	movff	?___wmul+1,printf@width+1
  5807                           
  5808                           ;doprnt.c: 601: width += *f++ - '0';
  5809  0005E4  0ED0               	movlw	208
  5810  0005E6  0100               	movlb	0	; () banked
  5811  0005E8  6F9A               	movwf	??_printf& (0+255),b
  5812  0005EA  0EFF               	movlw	255
  5813  0005EC  0100               	movlb	0	; () banked
  5814  0005EE  6F9B               	movwf	(??_printf+1)& (0+255),b
  5815  0005F0  C08E  FFF6         	movff	printf@f,tblptrl
  5816  0005F4  C08F  FFF7         	movff	printf@f+1,tblptrh
  5817  0005F8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5818  0005F8  6AF8               	clrf	tblptru,c
  5819  0005FA                     	endif
  5820  0005FA                     	if	0	;tblptru may be non-zero
  5821  0005FA                     	endif
  5822  0005FA  0008               	tblrd		*
  5823  0005FC  50F5               	movf	tablat,w,c
  5824  0005FE  0100               	movlb	0	; () banked
  5825  000600  6F9C               	movwf	(??_printf+2)& (0+255),b
  5826  000602  6B9D               	clrf	(??_printf+3)& (0+255),b
  5827  000604  0100               	movlb	0	; () banked
  5828  000606  519A               	movf	??_printf& (0+255),w,b
  5829  000608  0100               	movlb	0	; () banked
  5830  00060A  279C               	addwf	(??_printf+2)& (0+255),f,b
  5831  00060C  0100               	movlb	0	; () banked
  5832  00060E  519B               	movf	(??_printf+1)& (0+255),w,b
  5833  000610  0100               	movlb	0	; () banked
  5834  000612  239D               	addwfc	(??_printf+3)& (0+255),f,b
  5835  000614  0100               	movlb	0	; () banked
  5836  000616  519C               	movf	(??_printf+2)& (0+255),w,b
  5837  000618  0100               	movlb	0	; () banked
  5838  00061A  27A9               	addwf	printf@width& (0+255),f,b
  5839  00061C  0100               	movlb	0	; () banked
  5840  00061E  519D               	movf	(??_printf+3)& (0+255),w,b
  5841  000620  0100               	movlb	0	; () banked
  5842  000622  23AA               	addwfc	(printf@width+1)& (0+255),f,b
  5843                           
  5844                           ; BSR set to: 0
  5845  000624  0100               	movlb	0	; () banked
  5846  000626  4B8E               	infsnz	printf@f& (0+255),f,b
  5847  000628  2B8F               	incf	(printf@f+1)& (0+255),f,b
  5848                           
  5849                           ; BSR set to: 0
  5850                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5851  00062A  C08E  FFF6         	movff	printf@f,tblptrl
  5852  00062E  C08F  FFF7         	movff	printf@f+1,tblptrh
  5853  000632                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5854  000632  6AF8               	clrf	tblptru,c
  5855  000634                     	endif
  5856  000634                     	if	0	;tblptru may be non-zero
  5857  000634                     	endif
  5858  000634  0008               	tblrd		*
  5859  000636  50F5               	movf	tablat,w,c
  5860  000638  EC83  F013         	call	_isdigit
  5861  00063C  A0D8               	btfss	status,0,c
  5862  00063E  D08D               	goto	l3873
  5863  000640  D7C2               	goto	l3833
  5864  000642                     l3841:
  5865                           
  5866                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  5867  000642  C09F  FFD9         	movff	printf@ap,fsr2l
  5868  000646  C0A0  FFDA         	movff	printf@ap+1,fsr2h
  5869  00064A  CFDE F0A1          	movff	postinc2,printf@cp
  5870  00064E  CFDD F0A2          	movff	postdec2,printf@cp+1
  5871  000652  0E02               	movlw	2
  5872  000654  0100               	movlb	0	; () banked
  5873  000656  279F               	addwf	printf@ap& (0+255),f,b
  5874  000658  0E00               	movlw	0
  5875  00065A  23A0               	addwfc	(printf@ap+1)& (0+255),f,b
  5876                           
  5877                           ; BSR set to: 0
  5878                           ;doprnt.c: 740: if(!cp)
  5879  00065C  0100               	movlb	0	; () banked
  5880  00065E  51A1               	movf	printf@cp& (0+255),w,b
  5881  000660  0100               	movlb	0	; () banked
  5882  000662  11A2               	iorwf	(printf@cp+1)& (0+255),w,b
  5883  000664  A4D8               	btfss	status,2,c
  5884  000666  D006               	goto	l3849
  5885                           
  5886                           ; BSR set to: 0
  5887                           ;doprnt.c: 741: cp = "(null)";
  5888  000668  0EBE               	movlw	low STR_51
  5889  00066A  0100               	movlb	0	; () banked
  5890  00066C  6FA1               	movwf	printf@cp& (0+255),b
  5891  00066E  0EFF               	movlw	high STR_51
  5892  000670  0100               	movlb	0	; () banked
  5893  000672  6FA2               	movwf	(printf@cp+1)& (0+255),b
  5894  000674                     l3849:
  5895                           
  5896                           ; BSR set to: 0
  5897                           ;doprnt.c: 745: len = 0;
  5898  000674  0E00               	movlw	0
  5899  000676  0100               	movlb	0	; () banked
  5900  000678  6FA6               	movwf	(printf@len+1)& (0+255),b
  5901  00067A  0E00               	movlw	0
  5902  00067C  6FA5               	movwf	printf@len& (0+255),b
  5903                           
  5904                           ;doprnt.c: 746: while(cp[len])
  5905  00067E  D003               	goto	l3853
  5906  000680                     l3851:
  5907                           
  5908                           ;doprnt.c: 747: len++;
  5909  000680  0100               	movlb	0	; () banked
  5910  000682  4BA5               	infsnz	printf@len& (0+255),f,b
  5911  000684  2BA6               	incf	(printf@len+1)& (0+255),f,b
  5912  000686                     l3853:
  5913                           
  5914                           ; BSR set to: 0
  5915  000686  0100               	movlb	0	; () banked
  5916  000688  51A5               	movf	printf@len& (0+255),w,b
  5917  00068A  0100               	movlb	0	; () banked
  5918  00068C  25A1               	addwf	printf@cp& (0+255),w,b
  5919  00068E  0100               	movlb	0	; () banked
  5920  000690  6F9A               	movwf	??_printf& (0+255),b
  5921  000692  0100               	movlb	0	; () banked
  5922  000694  51A6               	movf	(printf@len+1)& (0+255),w,b
  5923  000696  0100               	movlb	0	; () banked
  5924  000698  21A2               	addwfc	(printf@cp+1)& (0+255),w,b
  5925  00069A  0100               	movlb	0	; () banked
  5926  00069C  6F9B               	movwf	(??_printf+1)& (0+255),b
  5927  00069E  C09A  FFF6         	movff	??_printf,tblptrl
  5928  0006A2  C09B  FFF7         	movff	??_printf+1,tblptrh
  5929  0006A6  0E00               	movlw	low (__mediumconst shr (0+16))
  5930  0006A8  6EF8               	movwf	tblptru,c
  5931  0006AA  0E0F               	movlw	(high __ramtop+-1)
  5932  0006AC  64F7               	cpfsgt	tblptrh,c
  5933  0006AE  D003               	bra	u2547
  5934  0006B0  0008               	tblrd		*
  5935  0006B2  50F5               	movf	tablat,w,c
  5936  0006B4  D005               	bra	u2540
  5937  0006B6                     u2547:
  5938  0006B6  CFF6 FFE9          	movff	tblptrl,fsr0l
  5939  0006BA  CFF7 FFEA          	movff	tblptrh,fsr0h
  5940  0006BE  50EF               	movf	indf0,w,c
  5941  0006C0                     u2540:
  5942  0006C0  0900               	iorlw	0
  5943  0006C2  A4D8               	btfss	status,2,c
  5944  0006C4  D7DD               	goto	l3851
  5945                           
  5946                           ;doprnt.c: 757: if(width > len)
  5947  0006C6  0100               	movlb	0	; () banked
  5948  0006C8  51A9               	movf	printf@width& (0+255),w,b
  5949  0006CA  0100               	movlb	0	; () banked
  5950  0006CC  5DA5               	subwf	printf@len& (0+255),w,b
  5951  0006CE  0100               	movlb	0	; () banked
  5952  0006D0  51AA               	movf	(printf@width+1)& (0+255),w,b
  5953  0006D2  0100               	movlb	0	; () banked
  5954  0006D4  59A6               	subwfb	(printf@len+1)& (0+255),w,b
  5955  0006D6  B0D8               	btfsc	status,0,c
  5956  0006D8  D009               	goto	l3859
  5957                           
  5958                           ; BSR set to: 0
  5959                           ;doprnt.c: 758: width -= len;
  5960  0006DA  0100               	movlb	0	; () banked
  5961  0006DC  51A5               	movf	printf@len& (0+255),w,b
  5962  0006DE  0100               	movlb	0	; () banked
  5963  0006E0  5FA9               	subwf	printf@width& (0+255),f,b
  5964  0006E2  0100               	movlb	0	; () banked
  5965  0006E4  51A6               	movf	(printf@len+1)& (0+255),w,b
  5966  0006E6  0100               	movlb	0	; () banked
  5967  0006E8  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  5968  0006EA  D009               	goto	l3863
  5969  0006EC                     l3859:
  5970                           
  5971                           ; BSR set to: 0
  5972                           ;doprnt.c: 759: else
  5973                           ;doprnt.c: 760: width = 0;
  5974  0006EC  0E00               	movlw	0
  5975  0006EE  0100               	movlb	0	; () banked
  5976  0006F0  6FAA               	movwf	(printf@width+1)& (0+255),b
  5977  0006F2  0E00               	movlw	0
  5978  0006F4  6FA9               	movwf	printf@width& (0+255),b
  5979                           
  5980                           ; BSR set to: 0
  5981                           ;doprnt.c: 764: while(width--)
  5982  0006F6  D003               	goto	l3863
  5983  0006F8                     l3861:
  5984                           
  5985                           ; BSR set to: 0
  5986                           ;doprnt.c: 765: (putch(' ') );
  5987  0006F8  0E20               	movlw	32
  5988  0006FA  EC3B  F014         	call	_putch
  5989  0006FE                     l3863:
  5990  0006FE  0100               	movlb	0	; () banked
  5991  000700  07A9               	decf	printf@width& (0+255),f,b
  5992  000702  A0D8               	btfss	status,0,c
  5993  000704  07AA               	decf	(printf@width+1)& (0+255),f,b
  5994  000706  0100               	movlb	0	; () banked
  5995  000708  29A9               	incf	printf@width& (0+255),w,b
  5996  00070A  E1F6               	bnz	l3861
  5997  00070C  0100               	movlb	0	; () banked
  5998  00070E  29AA               	incf	(printf@width+1)& (0+255),w,b
  5999  000710  B4D8               	btfsc	status,2,c
  6000  000712  D017               	goto	l3869
  6001  000714  D7F1               	goto	l3861
  6002  000716                     l3865:
  6003                           
  6004                           ; BSR set to: 0
  6005                           ;doprnt.c: 768: (putch(*cp++) );
  6006  000716  C0A1  FFF6         	movff	printf@cp,tblptrl
  6007  00071A  C0A2  FFF7         	movff	printf@cp+1,tblptrh
  6008  00071E  0E00               	movlw	low (__mediumconst shr (0+16))
  6009  000720  6EF8               	movwf	tblptru,c
  6010  000722  0E0F               	movlw	(high __ramtop+-1)
  6011  000724  64F7               	cpfsgt	tblptrh,c
  6012  000726  D003               	bra	u2587
  6013  000728  0008               	tblrd		*
  6014  00072A  50F5               	movf	tablat,w,c
  6015  00072C  D005               	bra	u2580
  6016  00072E                     u2587:
  6017  00072E  CFF6 FFE9          	movff	tblptrl,fsr0l
  6018  000732  CFF7 FFEA          	movff	tblptrh,fsr0h
  6019  000736  50EF               	movf	indf0,w,c
  6020  000738                     u2580:
  6021  000738  EC3B  F014         	call	_putch
  6022  00073C  0100               	movlb	0	; () banked
  6023  00073E  4BA1               	infsnz	printf@cp& (0+255),f,b
  6024  000740  2BA2               	incf	(printf@cp+1)& (0+255),f,b
  6025  000742                     l3869:
  6026                           
  6027                           ; BSR set to: 0
  6028  000742  0100               	movlb	0	; () banked
  6029  000744  07A5               	decf	printf@len& (0+255),f,b
  6030  000746  A0D8               	btfss	status,0,c
  6031  000748  07A6               	decf	(printf@len+1)& (0+255),f,b
  6032  00074A  0100               	movlb	0	; () banked
  6033  00074C  29A5               	incf	printf@len& (0+255),w,b
  6034  00074E  E1E3               	bnz	l3865
  6035  000750  0100               	movlb	0	; () banked
  6036  000752  29A6               	incf	(printf@len+1)& (0+255),w,b
  6037  000754  B4D8               	btfsc	status,2,c
  6038  000756  D0F3               	goto	l3941
  6039  000758  D7DE               	goto	l3865
  6040  00075A                     l3873:
  6041  00075A  C08E  FFF6         	movff	printf@f,tblptrl
  6042  00075E  C08F  FFF7         	movff	printf@f+1,tblptrh
  6043  000762  0100               	movlb	0	; () banked
  6044  000764  4B8E               	infsnz	printf@f& (0+255),f,b
  6045  000766  2B8F               	incf	(printf@f+1)& (0+255),f,b
  6046  000768                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6047  000768  6AF8               	clrf	tblptru,c
  6048  00076A                     	endif
  6049  00076A                     	if	0	;tblptru may be non-zero
  6050  00076A                     	endif
  6051  00076A  0008               	tblrd		*
  6052  00076C  CFF5 F0A8          	movff	tablat,printf@c
  6053  000770  0100               	movlb	0	; () banked
  6054  000772  51A8               	movf	printf@c& (0+255),w,b
  6055                           
  6056                           ; Switch size 1, requested type "space"
  6057                           ; Number of cases is 4, Range of values is 0 to 115
  6058                           ; switch strategies available:
  6059                           ; Name         Instructions Cycles
  6060                           ; simple_byte           13     7 (average)
  6061                           ;	Chosen strategy is simple_byte
  6062  000774  0A00               	xorlw	0	; case 0
  6063  000776  B4D8               	btfsc	status,2,c
  6064  000778  0012               	return	
  6065  00077A  0A64               	xorlw	100	; case 100
  6066  00077C  B4D8               	btfsc	status,2,c
  6067  00077E  D007               	goto	l3875
  6068  000780  0A0D               	xorlw	13	; case 105
  6069  000782  B4D8               	btfsc	status,2,c
  6070  000784  D004               	goto	l3875
  6071  000786  0A1A               	xorlw	26	; case 115
  6072  000788  B4D8               	btfsc	status,2,c
  6073  00078A  D75B               	goto	l3841
  6074  00078C  D0D8               	goto	l3941
  6075  00078E                     l3875:
  6076                           
  6077                           ;doprnt.c: 1253: {
  6078                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6079  00078E  C09F  FFD9         	movff	printf@ap,fsr2l
  6080  000792  C0A0  FFDA         	movff	printf@ap+1,fsr2h
  6081  000796  CFDE F0A3          	movff	postinc2,printf@val
  6082  00079A  CFDD F0A4          	movff	postdec2,printf@val+1
  6083  00079E  0E02               	movlw	2
  6084  0007A0  0100               	movlb	0	; () banked
  6085  0007A2  279F               	addwf	printf@ap& (0+255),f,b
  6086  0007A4  0E00               	movlw	0
  6087  0007A6  23A0               	addwfc	(printf@ap+1)& (0+255),f,b
  6088                           
  6089                           ; BSR set to: 0
  6090                           ;doprnt.c: 1261: if((int)val < 0) {
  6091  0007A8  0100               	movlb	0	; () banked
  6092  0007AA  AFA4               	btfss	(printf@val+1)& (0+255),7,b
  6093  0007AC  D008               	goto	l3885
  6094                           
  6095                           ; BSR set to: 0
  6096                           ;doprnt.c: 1262: flag |= 0x03;
  6097  0007AE  0E03               	movlw	3
  6098  0007B0  0100               	movlb	0	; () banked
  6099  0007B2  13A7               	iorwf	printf@flag& (0+255),f,b
  6100                           
  6101                           ; BSR set to: 0
  6102                           ;doprnt.c: 1263: val = -val;
  6103  0007B4  0100               	movlb	0	; () banked
  6104  0007B6  6DA3               	negf	printf@val& (0+255),b
  6105  0007B8  1FA4               	comf	(printf@val+1)& (0+255),f,b
  6106  0007BA  B0D8               	btfsc	status,0,c
  6107  0007BC  2BA4               	incf	(printf@val+1)& (0+255),f,b
  6108  0007BE                     l3885:
  6109                           
  6110                           ; BSR set to: 0
  6111                           ;doprnt.c: 1264: }
  6112                           ;doprnt.c: 1266: }
  6113                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6114  0007BE  0E01               	movlw	1
  6115  0007C0  0100               	movlb	0	; () banked
  6116  0007C2  6FA8               	movwf	printf@c& (0+255),b
  6117  0007C4                     l3887:
  6118                           
  6119                           ; BSR set to: 0
  6120  0007C4  0E05               	movlw	5
  6121  0007C6  0100               	movlb	0	; () banked
  6122  0007C8  19A8               	xorwf	printf@c& (0+255),w,b
  6123  0007CA  B4D8               	btfsc	status,2,c
  6124  0007CC  D019               	goto	l3899
  6125                           
  6126                           ; BSR set to: 0
  6127                           ;doprnt.c: 1306: if(val < dpowers[c])
  6128                           
  6129                           ; BSR set to: 0
  6130                           
  6131                           ; BSR set to: 0
  6132  0007CE  0100               	movlb	0	; () banked
  6133  0007D0  51A8               	movf	printf@c& (0+255),w,b
  6134  0007D2  0D02               	mullw	2
  6135  0007D4  0ECA               	movlw	low _dpowers
  6136  0007D6  24F3               	addwf	prodl,w,c
  6137  0007D8  6EF6               	movwf	tblptrl,c
  6138  0007DA  0EFD               	movlw	high _dpowers
  6139  0007DC  20F4               	addwfc	prodh,w,c
  6140  0007DE  6EF7               	movwf	tblptrh,c
  6141  0007E0                     	if	1	;There are 3 active tblptr bytes
  6142  0007E0  6AF8               	clrf	tblptru,c
  6143  0007E2  0E00               	movlw	low (__mediumconst shr (0+16))
  6144  0007E4  22F8               	addwfc	tblptru,f,c
  6145  0007E6                     	endif
  6146  0007E6  0009               	tblrd		*+
  6147  0007E8  50F5               	movf	tablat,w,c
  6148  0007EA  0100               	movlb	0	; () banked
  6149  0007EC  5DA3               	subwf	printf@val& (0+255),w,b
  6150  0007EE  0009               	tblrd		*+
  6151  0007F0  50F5               	movf	tablat,w,c
  6152  0007F2  0100               	movlb	0	; () banked
  6153  0007F4  59A4               	subwfb	(printf@val+1)& (0+255),w,b
  6154  0007F6  A0D8               	btfss	status,0,c
  6155  0007F8  D003               	goto	l3899
  6156                           
  6157                           ; BSR set to: 0
  6158                           
  6159                           ; BSR set to: 0
  6160                           
  6161                           ; BSR set to: 0
  6162                           ;doprnt.c: 1307: break;
  6163  0007FA  0100               	movlb	0	; () banked
  6164  0007FC  2BA8               	incf	printf@c& (0+255),f,b
  6165  0007FE  D7E2               	goto	l3887
  6166  000800                     l3899:
  6167                           
  6168                           ; BSR set to: 0
  6169                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6170  000800  0100               	movlb	0	; () banked
  6171  000802  51A9               	movf	printf@width& (0+255),w,b
  6172  000804  0100               	movlb	0	; () banked
  6173  000806  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  6174  000808  B4D8               	btfsc	status,2,c
  6175  00080A  D00B               	goto	l3905
  6176                           
  6177                           ; BSR set to: 0
  6178  00080C  C0A7  F09A         	movff	printf@flag,??_printf
  6179  000810  0E03               	movlw	3
  6180  000812  0100               	movlb	0	; () banked
  6181  000814  179A               	andwf	??_printf& (0+255),f,b
  6182  000816  B4D8               	btfsc	status,2,c
  6183  000818  D004               	goto	l3905
  6184                           
  6185                           ; BSR set to: 0
  6186                           ;doprnt.c: 1346: width--;
  6187  00081A  0100               	movlb	0	; () banked
  6188  00081C  07A9               	decf	printf@width& (0+255),f,b
  6189  00081E  A0D8               	btfss	status,0,c
  6190  000820  07AA               	decf	(printf@width+1)& (0+255),f,b
  6191  000822                     l3905:
  6192                           
  6193                           ; BSR set to: 0
  6194                           ;doprnt.c: 1381: if(width > c)
  6195  000822  0E80               	movlw	128
  6196  000824  0100               	movlb	0	; () banked
  6197  000826  BFA8               	btfsc	printf@c& (0+255),7,b
  6198  000828  0E7F               	movlw	127
  6199  00082A  0100               	movlb	0	; () banked
  6200  00082C  6F9A               	movwf	??_printf& (0+255),b
  6201  00082E  0100               	movlb	0	; () banked
  6202  000830  51A9               	movf	printf@width& (0+255),w,b
  6203  000832  0100               	movlb	0	; () banked
  6204  000834  5DA8               	subwf	printf@c& (0+255),w,b
  6205  000836  0100               	movlb	0	; () banked
  6206  000838  51AA               	movf	(printf@width+1)& (0+255),w,b
  6207  00083A  0A80               	xorlw	128
  6208  00083C  0100               	movlb	0	; () banked
  6209  00083E  599A               	subwfb	??_printf& (0+255),w,b
  6210  000840  B0D8               	btfsc	status,0,c
  6211  000842  D00B               	goto	l3909
  6212                           
  6213                           ; BSR set to: 0
  6214                           ;doprnt.c: 1382: width -= c;
  6215  000844  0100               	movlb	0	; () banked
  6216  000846  51A8               	movf	printf@c& (0+255),w,b
  6217  000848  0100               	movlb	0	; () banked
  6218  00084A  5FA9               	subwf	printf@width& (0+255),f,b
  6219  00084C  0E00               	movlw	0
  6220  00084E  0100               	movlb	0	; () banked
  6221  000850  BFA8               	btfsc	printf@c& (0+255),7,b
  6222  000852  0EFF               	movlw	255
  6223  000854  0100               	movlb	0	; () banked
  6224  000856  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  6225  000858  D005               	goto	l3911
  6226  00085A                     l3909:
  6227                           
  6228                           ; BSR set to: 0
  6229                           ;doprnt.c: 1383: else
  6230                           ;doprnt.c: 1384: width = 0;
  6231  00085A  0E00               	movlw	0
  6232  00085C  0100               	movlb	0	; () banked
  6233  00085E  6FAA               	movwf	(printf@width+1)& (0+255),b
  6234  000860  0E00               	movlw	0
  6235  000862  6FA9               	movwf	printf@width& (0+255),b
  6236  000864                     l3911:
  6237                           
  6238                           ; BSR set to: 0
  6239                           ;doprnt.c: 1387: if(flag & 0x04) {
  6240  000864  0100               	movlb	0	; () banked
  6241  000866  A5A7               	btfss	printf@flag& (0+255),2,b
  6242  000868  D018               	goto	l3923
  6243                           
  6244                           ; BSR set to: 0
  6245                           ;doprnt.c: 1392: if(flag & 0x03)
  6246  00086A  C0A7  F09A         	movff	printf@flag,??_printf
  6247  00086E  0E03               	movlw	3
  6248  000870  0100               	movlb	0	; () banked
  6249  000872  179A               	andwf	??_printf& (0+255),f,b
  6250  000874  B4D8               	btfsc	status,2,c
  6251  000876  D003               	goto	l3917
  6252                           
  6253                           ; BSR set to: 0
  6254                           ;doprnt.c: 1393: (putch('-') );
  6255  000878  0E2D               	movlw	45
  6256  00087A  EC3B  F014         	call	_putch
  6257  00087E                     l3917:
  6258                           
  6259                           ;doprnt.c: 1415: if(width)
  6260  00087E  0100               	movlb	0	; () banked
  6261  000880  51A9               	movf	printf@width& (0+255),w,b
  6262  000882  0100               	movlb	0	; () banked
  6263  000884  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  6264  000886  B4D8               	btfsc	status,2,c
  6265  000888  D025               	goto	l3933
  6266                           
  6267                           ; BSR set to: 0
  6268                           ;doprnt.c: 1417: (putch('0') );
  6269                           
  6270                           ; BSR set to: 0
  6271                           
  6272                           ;doprnt.c: 1416: do
  6273  00088A  0E30               	movlw	48
  6274  00088C  EC3B  F014         	call	_putch
  6275                           
  6276                           ;doprnt.c: 1418: while(--width);
  6277  000890  0100               	movlb	0	; () banked
  6278  000892  07A9               	decf	printf@width& (0+255),f,b
  6279  000894  A0D8               	btfss	status,0,c
  6280  000896  07AA               	decf	(printf@width+1)& (0+255),f,b
  6281  000898  D7F2               	goto	l3917
  6282  00089A                     l3923:
  6283                           
  6284                           ; BSR set to: 0
  6285                           ;doprnt.c: 1422: {
  6286                           ;doprnt.c: 1424: if(width
  6287                           ;doprnt.c: 1428: )
  6288  00089A  0100               	movlb	0	; () banked
  6289  00089C  51A9               	movf	printf@width& (0+255),w,b
  6290  00089E  0100               	movlb	0	; () banked
  6291  0008A0  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  6292  0008A2  B4D8               	btfsc	status,2,c
  6293  0008A4  D00D               	goto	l3929
  6294  0008A6                     l3925:
  6295                           
  6296                           ; BSR set to: 0
  6297                           ;doprnt.c: 1430: (putch(' ') );
  6298  0008A6  0E20               	movlw	32
  6299  0008A8  EC3B  F014         	call	_putch
  6300                           
  6301                           ;doprnt.c: 1431: while(--width);
  6302  0008AC  0100               	movlb	0	; () banked
  6303  0008AE  07A9               	decf	printf@width& (0+255),f,b
  6304  0008B0  A0D8               	btfss	status,0,c
  6305  0008B2  07AA               	decf	(printf@width+1)& (0+255),f,b
  6306  0008B4  0100               	movlb	0	; () banked
  6307  0008B6  51A9               	movf	printf@width& (0+255),w,b
  6308  0008B8  0100               	movlb	0	; () banked
  6309  0008BA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  6310  0008BC  A4D8               	btfss	status,2,c
  6311  0008BE  D7F3               	goto	l3925
  6312  0008C0                     l3929:
  6313                           
  6314                           ; BSR set to: 0
  6315                           ;doprnt.c: 1438: if(flag & 0x03)
  6316  0008C0  C0A7  F09A         	movff	printf@flag,??_printf
  6317  0008C4  0E03               	movlw	3
  6318  0008C6  0100               	movlb	0	; () banked
  6319  0008C8  179A               	andwf	??_printf& (0+255),f,b
  6320  0008CA  B4D8               	btfsc	status,2,c
  6321  0008CC  D003               	goto	l3933
  6322                           
  6323                           ; BSR set to: 0
  6324                           ;doprnt.c: 1439: (putch('-') );
  6325  0008CE  0E2D               	movlw	45
  6326  0008D0  EC3B  F014         	call	_putch
  6327  0008D4                     l3933:
  6328                           
  6329                           ;doprnt.c: 1469: }
  6330                           ;doprnt.c: 1472: prec = c;
  6331  0008D4  C0A8  F09E         	movff	printf@c,printf@prec
  6332                           
  6333                           ;doprnt.c: 1474: while(prec--) {
  6334  0008D8  D02C               	goto	l3939
  6335  0008DA                     l3935:
  6336                           
  6337                           ;doprnt.c: 1478: {
  6338                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6339  0008DA  0100               	movlb	0	; () banked
  6340  0008DC  519E               	movf	printf@prec& (0+255),w,b
  6341  0008DE  0D02               	mullw	2
  6342  0008E0  0ECA               	movlw	low _dpowers
  6343  0008E2  24F3               	addwf	prodl,w,c
  6344  0008E4  6EF6               	movwf	tblptrl,c
  6345  0008E6  0EFD               	movlw	high _dpowers
  6346  0008E8  20F4               	addwfc	prodh,w,c
  6347  0008EA  6EF7               	movwf	tblptrh,c
  6348  0008EC                     	if	1	;There are 3 active tblptr bytes
  6349  0008EC  6AF8               	clrf	tblptru,c
  6350  0008EE  0E00               	movlw	low (__mediumconst shr (0+16))
  6351  0008F0  22F8               	addwfc	tblptru,f,c
  6352  0008F2                     	endif
  6353  0008F2  0009               	tblrd		*+
  6354  0008F4  CFF5 F082          	movff	tablat,___lwdiv@divisor
  6355  0008F8  000A               	tblrd		*-
  6356  0008FA  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  6357  0008FE  C0A3  F080         	movff	printf@val,___lwdiv@dividend
  6358  000902  C0A4  F081         	movff	printf@val+1,___lwdiv@dividend+1
  6359  000906  ECBC  F00F         	call	___lwdiv	;wreg free
  6360  00090A  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  6361  00090E  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  6362  000912  0E00               	movlw	0
  6363  000914  0100               	movlb	0	; () banked
  6364  000916  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  6365  000918  0E0A               	movlw	10
  6366  00091A  6F89               	movwf	___lwmod@divisor& (0+255),b
  6367  00091C  EC9F  F010         	call	___lwmod	;wreg free
  6368  000920  0100               	movlb	0	; () banked
  6369  000922  5187               	movf	?___lwmod& (0+255),w,b
  6370  000924  0F30               	addlw	48
  6371  000926  0100               	movlb	0	; () banked
  6372  000928  6FA8               	movwf	printf@c& (0+255),b
  6373                           
  6374                           ; BSR set to: 0
  6375                           ;doprnt.c: 1523: }
  6376                           ;doprnt.c: 1524: (putch(c) );
  6377  00092A  0100               	movlb	0	; () banked
  6378  00092C  51A8               	movf	printf@c& (0+255),w,b
  6379  00092E  EC3B  F014         	call	_putch
  6380  000932                     l3939:
  6381  000932  0100               	movlb	0	; () banked
  6382  000934  079E               	decf	printf@prec& (0+255),f,b
  6383  000936  0100               	movlb	0	; () banked
  6384  000938  299E               	incf	printf@prec& (0+255),w,b
  6385  00093A  A4D8               	btfss	status,2,c
  6386  00093C  D7CE               	goto	l3935
  6387  00093E                     l3941:
  6388  00093E  C08E  FFF6         	movff	printf@f,tblptrl
  6389  000942  C08F  FFF7         	movff	printf@f+1,tblptrh
  6390  000946  0100               	movlb	0	; () banked
  6391  000948  4B8E               	infsnz	printf@f& (0+255),f,b
  6392  00094A  2B8F               	incf	(printf@f+1)& (0+255),f,b
  6393  00094C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6394  00094C  6AF8               	clrf	tblptru,c
  6395  00094E                     	endif
  6396  00094E                     	if	0	;tblptru may be non-zero
  6397  00094E                     	endif
  6398  00094E  0008               	tblrd		*
  6399  000950  CFF5 F0A8          	movff	tablat,printf@c
  6400  000954  0100               	movlb	0	; () banked
  6401  000956  51A8               	movf	printf@c& (0+255),w,b
  6402  000958  B4D8               	btfsc	status,2,c
  6403  00095A  0012               	return	
  6404  00095C  D602               	goto	l3817
  6405  00095E                     __end_of_printf:
  6406                           	opt stack 0
  6407                           tblptru	equ	0xFF8
  6408                           tblptrh	equ	0xFF7
  6409                           tblptrl	equ	0xFF6
  6410                           tablat	equ	0xFF5
  6411                           prodh	equ	0xFF4
  6412                           prodl	equ	0xFF3
  6413                           intcon	equ	0xFF2
  6414                           intcon3	equ	0xFF0
  6415                           indf0	equ	0xFEF
  6416                           postinc0	equ	0xFEE
  6417                           fsr0h	equ	0xFEA
  6418                           fsr0l	equ	0xFE9
  6419                           wreg	equ	0xFE8
  6420                           postdec1	equ	0xFE5
  6421                           fsr1l	equ	0xFE1
  6422                           indf2	equ	0xFDF
  6423                           postinc2	equ	0xFDE
  6424                           postdec2	equ	0xFDD
  6425                           fsr2h	equ	0xFDA
  6426                           fsr2l	equ	0xFD9
  6427                           status	equ	0xFD8
  6428                           
  6429 ;; *************** function _putch *****************
  6430 ;; Defined at:
  6431 ;;		line 18 in file "lcd.c"
  6432 ;; Parameters:    Size  Location     Type
  6433 ;;  data            1    wreg     unsigned char 
  6434 ;; Auto vars:     Size  Location     Type
  6435 ;;  data            1    2[BANK0 ] unsigned char 
  6436 ;; Return value:  Size  Location     Type
  6437 ;;                  1    wreg      void 
  6438 ;; Registers used:
  6439 ;;		wreg, status,2, status,0, cstack
  6440 ;; Tracked objects:
  6441 ;;		On entry : 0/0
  6442 ;;		On exit  : 0/0
  6443 ;;		Unchanged: 0/0
  6444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6446 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6448 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6449 ;;Total ram usage:        1 bytes
  6450 ;; Hardware stack levels used:    1
  6451 ;; Hardware stack levels required when called:    8
  6452 ;; This function calls:
  6453 ;;		_lcdNibble
  6454 ;; This function is called by:
  6455 ;;		_printf
  6456 ;; This function uses a non-reentrant model
  6457 ;;
  6458                           
  6459                           	psect	text23
  6460  002876                     __ptext23:
  6461                           	opt stack 0
  6462  002876                     _putch:
  6463                           	opt stack 19
  6464                           
  6465                           ;incstack = 0
  6466                           ;putch@data stored from wreg
  6467  002876  0100               	movlb	0	; () banked
  6468  002878  6F82               	movwf	putch@data& (0+255),b
  6469                           
  6470                           ;lcd.c: 19: LATDbits.LATD2 = 1;
  6471  00287A  848C               	bsf	3980,2,c	;volatile
  6472                           
  6473                           ;lcd.c: 20: lcdNibble(data);
  6474  00287C  0100               	movlb	0	; () banked
  6475  00287E  5182               	movf	putch@data& (0+255),w,b
  6476  002880  EC6B  F010         	call	_lcdNibble
  6477  002884  0012               	return		;funcret
  6478  002886                     __end_of_putch:
  6479                           	opt stack 0
  6480                           tblptru	equ	0xFF8
  6481                           tblptrh	equ	0xFF7
  6482                           tblptrl	equ	0xFF6
  6483                           tablat	equ	0xFF5
  6484                           prodh	equ	0xFF4
  6485                           prodl	equ	0xFF3
  6486                           intcon	equ	0xFF2
  6487                           intcon3	equ	0xFF0
  6488                           indf0	equ	0xFEF
  6489                           postinc0	equ	0xFEE
  6490                           fsr0h	equ	0xFEA
  6491                           fsr0l	equ	0xFE9
  6492                           wreg	equ	0xFE8
  6493                           postdec1	equ	0xFE5
  6494                           fsr1l	equ	0xFE1
  6495                           indf2	equ	0xFDF
  6496                           postinc2	equ	0xFDE
  6497                           postdec2	equ	0xFDD
  6498                           fsr2h	equ	0xFDA
  6499                           fsr2l	equ	0xFD9
  6500                           status	equ	0xFD8
  6501                           
  6502 ;; *************** function _isdigit *****************
  6503 ;; Defined at:
  6504 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  6505 ;; Parameters:    Size  Location     Type
  6506 ;;  c               1    wreg     unsigned char 
  6507 ;; Auto vars:     Size  Location     Type
  6508 ;;  c               1    2[BANK0 ] unsigned char 
  6509 ;; Return value:  Size  Location     Type
  6510 ;;		None               void
  6511 ;; Registers used:
  6512 ;;		wreg, status,2, status,0
  6513 ;; Tracked objects:
  6514 ;;		On entry : 0/0
  6515 ;;		On exit  : 0/0
  6516 ;;		Unchanged: 0/0
  6517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6519 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6520 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6521 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6522 ;;Total ram usage:        3 bytes
  6523 ;; Hardware stack levels used:    1
  6524 ;; Hardware stack levels required when called:    7
  6525 ;; This function calls:
  6526 ;;		Nothing
  6527 ;; This function is called by:
  6528 ;;		_printf
  6529 ;; This function uses a non-reentrant model
  6530 ;;
  6531                           
  6532                           	psect	text24
  6533  002706                     __ptext24:
  6534                           	opt stack 0
  6535  002706                     _isdigit:
  6536                           	opt stack 20
  6537                           
  6538                           ;incstack = 0
  6539                           ;isdigit@c stored from wreg
  6540  002706  0100               	movlb	0	; () banked
  6541  002708  6F82               	movwf	isdigit@c& (0+255),b
  6542  00270A  0E00               	movlw	0
  6543  00270C  0100               	movlb	0	; () banked
  6544  00270E  6F81               	movwf	_isdigit$1565& (0+255),b
  6545                           
  6546                           ; BSR set to: 0
  6547  002710  0E3A               	movlw	58
  6548  002712  0100               	movlb	0	; () banked
  6549  002714  6182               	cpfslt	isdigit@c& (0+255),b
  6550  002716  D007               	goto	l3677
  6551                           
  6552                           ; BSR set to: 0
  6553  002718  0E2F               	movlw	47
  6554  00271A  0100               	movlb	0	; () banked
  6555  00271C  6582               	cpfsgt	isdigit@c& (0+255),b
  6556  00271E  D003               	goto	l3677
  6557                           
  6558                           ; BSR set to: 0
  6559  002720  0E01               	movlw	1
  6560  002722  0100               	movlb	0	; () banked
  6561  002724  6F81               	movwf	_isdigit$1565& (0+255),b
  6562  002726                     l3677:
  6563                           
  6564                           ; BSR set to: 0
  6565  002726  C081  F080         	movff	_isdigit$1565,??_isdigit
  6566  00272A  0100               	movlb	0	; () banked
  6567  00272C  3180               	rrcf	??_isdigit& (0+255),w,b
  6568  00272E  0012               	return	
  6569  002730                     __end_of_isdigit:
  6570                           	opt stack 0
  6571                           tblptru	equ	0xFF8
  6572                           tblptrh	equ	0xFF7
  6573                           tblptrl	equ	0xFF6
  6574                           tablat	equ	0xFF5
  6575                           prodh	equ	0xFF4
  6576                           prodl	equ	0xFF3
  6577                           intcon	equ	0xFF2
  6578                           intcon3	equ	0xFF0
  6579                           indf0	equ	0xFEF
  6580                           postinc0	equ	0xFEE
  6581                           fsr0h	equ	0xFEA
  6582                           fsr0l	equ	0xFE9
  6583                           wreg	equ	0xFE8
  6584                           postdec1	equ	0xFE5
  6585                           fsr1l	equ	0xFE1
  6586                           indf2	equ	0xFDF
  6587                           postinc2	equ	0xFDE
  6588                           postdec2	equ	0xFDD
  6589                           fsr2h	equ	0xFDA
  6590                           fsr2l	equ	0xFD9
  6591                           status	equ	0xFD8
  6592                           
  6593 ;; *************** function ___wmul *****************
  6594 ;; Defined at:
  6595 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  6596 ;; Parameters:    Size  Location     Type
  6597 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6598 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6599 ;; Auto vars:     Size  Location     Type
  6600 ;;  product         2    4[BANK0 ] unsigned int 
  6601 ;; Return value:  Size  Location     Type
  6602 ;;                  2    0[BANK0 ] unsigned int 
  6603 ;; Registers used:
  6604 ;;		wreg, status,2, status,0, prodl, prodh
  6605 ;; Tracked objects:
  6606 ;;		On entry : 0/0
  6607 ;;		On exit  : 0/0
  6608 ;;		Unchanged: 0/0
  6609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6610 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6611 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6613 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6614 ;;Total ram usage:        6 bytes
  6615 ;; Hardware stack levels used:    1
  6616 ;; Hardware stack levels required when called:    7
  6617 ;; This function calls:
  6618 ;;		Nothing
  6619 ;; This function is called by:
  6620 ;;		_printf
  6621 ;; This function uses a non-reentrant model
  6622 ;;
  6623                           
  6624                           	psect	text25
  6625  002436                     __ptext25:
  6626                           	opt stack 0
  6627  002436                     ___wmul:
  6628                           	opt stack 20
  6629                           
  6630                           ; BSR set to: 0
  6631                           ;incstack = 0
  6632  002436  0100               	movlb	0	; () banked
  6633  002438  5180               	movf	___wmul@multiplier& (0+255),w,b
  6634  00243A  0100               	movlb	0	; () banked
  6635  00243C  0382               	mulwf	___wmul@multiplicand& (0+255),b
  6636  00243E  CFF3 F084          	movff	prodl,___wmul@product
  6637  002442  CFF4 F085          	movff	prodh,___wmul@product+1
  6638  002446  0100               	movlb	0	; () banked
  6639  002448  5180               	movf	___wmul@multiplier& (0+255),w,b
  6640  00244A  0100               	movlb	0	; () banked
  6641  00244C  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  6642  00244E  50F3               	movf	prodl,w,c
  6643  002450  0100               	movlb	0	; () banked
  6644  002452  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  6645  002454  0100               	movlb	0	; () banked
  6646  002456  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  6647  002458  0100               	movlb	0	; () banked
  6648  00245A  0382               	mulwf	___wmul@multiplicand& (0+255),b
  6649  00245C  50F3               	movf	prodl,w,c
  6650  00245E  0100               	movlb	0	; () banked
  6651  002460  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  6652                           
  6653                           ; BSR set to: 0
  6654  002462  C084  F080         	movff	___wmul@product,?___wmul
  6655  002466  C085  F081         	movff	___wmul@product+1,?___wmul+1
  6656  00246A  0012               	return	
  6657  00246C                     __end_of___wmul:
  6658                           	opt stack 0
  6659                           tblptru	equ	0xFF8
  6660                           tblptrh	equ	0xFF7
  6661                           tblptrl	equ	0xFF6
  6662                           tablat	equ	0xFF5
  6663                           prodh	equ	0xFF4
  6664                           prodl	equ	0xFF3
  6665                           intcon	equ	0xFF2
  6666                           intcon3	equ	0xFF0
  6667                           indf0	equ	0xFEF
  6668                           postinc0	equ	0xFEE
  6669                           fsr0h	equ	0xFEA
  6670                           fsr0l	equ	0xFE9
  6671                           wreg	equ	0xFE8
  6672                           postdec1	equ	0xFE5
  6673                           fsr1l	equ	0xFE1
  6674                           indf2	equ	0xFDF
  6675                           postinc2	equ	0xFDE
  6676                           postdec2	equ	0xFDD
  6677                           fsr2h	equ	0xFDA
  6678                           fsr2l	equ	0xFD9
  6679                           status	equ	0xFD8
  6680                           
  6681 ;; *************** function ___lwmod *****************
  6682 ;; Defined at:
  6683 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  6684 ;; Parameters:    Size  Location     Type
  6685 ;;  dividend        2    7[BANK0 ] unsigned int 
  6686 ;;  divisor         2    9[BANK0 ] unsigned int 
  6687 ;; Auto vars:     Size  Location     Type
  6688 ;;  counter         1   11[BANK0 ] unsigned char 
  6689 ;; Return value:  Size  Location     Type
  6690 ;;                  2    7[BANK0 ] unsigned int 
  6691 ;; Registers used:
  6692 ;;		wreg, status,2, status,0
  6693 ;; Tracked objects:
  6694 ;;		On entry : 0/0
  6695 ;;		On exit  : 0/0
  6696 ;;		Unchanged: 0/0
  6697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6698 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6699 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6701 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6702 ;;Total ram usage:        5 bytes
  6703 ;; Hardware stack levels used:    1
  6704 ;; Hardware stack levels required when called:    7
  6705 ;; This function calls:
  6706 ;;		Nothing
  6707 ;; This function is called by:
  6708 ;;		_printf
  6709 ;; This function uses a non-reentrant model
  6710 ;;
  6711                           
  6712                           	psect	text26
  6713  00213E                     __ptext26:
  6714                           	opt stack 0
  6715  00213E                     ___lwmod:
  6716                           	opt stack 20
  6717                           
  6718                           ; BSR set to: 0
  6719                           ;incstack = 0
  6720  00213E  0100               	movlb	0	; () banked
  6721  002140  5189               	movf	___lwmod@divisor& (0+255),w,b
  6722  002142  0100               	movlb	0	; () banked
  6723  002144  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  6724  002146  B4D8               	btfsc	status,2,c
  6725  002148  D026               	goto	l1474
  6726                           
  6727                           ; BSR set to: 0
  6728  00214A  0E01               	movlw	1
  6729  00214C  0100               	movlb	0	; () banked
  6730  00214E  6F8B               	movwf	___lwmod@counter& (0+255),b
  6731  002150  D006               	goto	l3715
  6732  002152                     l3713:
  6733                           
  6734                           ; BSR set to: 0
  6735  002152  0100               	movlb	0	; () banked
  6736  002154  90D8               	bcf	status,0,c
  6737  002156  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  6738  002158  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  6739  00215A  0100               	movlb	0	; () banked
  6740  00215C  2B8B               	incf	___lwmod@counter& (0+255),f,b
  6741  00215E                     l3715:
  6742                           
  6743                           ; BSR set to: 0
  6744  00215E  0100               	movlb	0	; () banked
  6745  002160  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  6746  002162  D7F7               	goto	l3713
  6747  002164                     l3717:
  6748                           
  6749                           ; BSR set to: 0
  6750  002164  0100               	movlb	0	; () banked
  6751  002166  5189               	movf	___lwmod@divisor& (0+255),w,b
  6752  002168  0100               	movlb	0	; () banked
  6753  00216A  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  6754  00216C  0100               	movlb	0	; () banked
  6755  00216E  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6756  002170  0100               	movlb	0	; () banked
  6757  002172  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  6758  002174  A0D8               	btfss	status,0,c
  6759  002176  D008               	goto	l3721
  6760                           
  6761                           ; BSR set to: 0
  6762  002178  0100               	movlb	0	; () banked
  6763  00217A  5189               	movf	___lwmod@divisor& (0+255),w,b
  6764  00217C  0100               	movlb	0	; () banked
  6765  00217E  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  6766  002180  0100               	movlb	0	; () banked
  6767  002182  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6768  002184  0100               	movlb	0	; () banked
  6769  002186  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  6770  002188                     l3721:
  6771                           
  6772                           ; BSR set to: 0
  6773  002188  0100               	movlb	0	; () banked
  6774  00218A  90D8               	bcf	status,0,c
  6775  00218C  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  6776  00218E  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  6777                           
  6778                           ; BSR set to: 0
  6779  002190  0100               	movlb	0	; () banked
  6780  002192  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  6781  002194  D7E7               	goto	l3717
  6782  002196                     l1474:
  6783                           
  6784                           ; BSR set to: 0
  6785  002196  C087  F087         	movff	___lwmod@dividend,?___lwmod
  6786  00219A  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  6787                           
  6788                           ; BSR set to: 0
  6789  00219E  0012               	return		;funcret
  6790  0021A0                     __end_of___lwmod:
  6791                           	opt stack 0
  6792                           tblptru	equ	0xFF8
  6793                           tblptrh	equ	0xFF7
  6794                           tblptrl	equ	0xFF6
  6795                           tablat	equ	0xFF5
  6796                           prodh	equ	0xFF4
  6797                           prodl	equ	0xFF3
  6798                           intcon	equ	0xFF2
  6799                           intcon3	equ	0xFF0
  6800                           indf0	equ	0xFEF
  6801                           postinc0	equ	0xFEE
  6802                           fsr0h	equ	0xFEA
  6803                           fsr0l	equ	0xFE9
  6804                           wreg	equ	0xFE8
  6805                           postdec1	equ	0xFE5
  6806                           fsr1l	equ	0xFE1
  6807                           indf2	equ	0xFDF
  6808                           postinc2	equ	0xFDE
  6809                           postdec2	equ	0xFDD
  6810                           fsr2h	equ	0xFDA
  6811                           fsr2l	equ	0xFD9
  6812                           status	equ	0xFD8
  6813                           
  6814 ;; *************** function ___lwdiv *****************
  6815 ;; Defined at:
  6816 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  6817 ;; Parameters:    Size  Location     Type
  6818 ;;  dividend        2    0[BANK0 ] unsigned int 
  6819 ;;  divisor         2    2[BANK0 ] unsigned int 
  6820 ;; Auto vars:     Size  Location     Type
  6821 ;;  quotient        2    4[BANK0 ] unsigned int 
  6822 ;;  counter         1    6[BANK0 ] unsigned char 
  6823 ;; Return value:  Size  Location     Type
  6824 ;;                  2    0[BANK0 ] unsigned int 
  6825 ;; Registers used:
  6826 ;;		wreg, status,2, status,0
  6827 ;; Tracked objects:
  6828 ;;		On entry : 0/0
  6829 ;;		On exit  : 0/0
  6830 ;;		Unchanged: 0/0
  6831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6832 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6833 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6835 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6836 ;;Total ram usage:        7 bytes
  6837 ;; Hardware stack levels used:    1
  6838 ;; Hardware stack levels required when called:    7
  6839 ;; This function calls:
  6840 ;;		Nothing
  6841 ;; This function is called by:
  6842 ;;		_printf
  6843 ;; This function uses a non-reentrant model
  6844 ;;
  6845                           
  6846                           	psect	text27
  6847  001F78                     __ptext27:
  6848                           	opt stack 0
  6849  001F78                     ___lwdiv:
  6850                           	opt stack 20
  6851                           
  6852                           ; BSR set to: 0
  6853                           ;incstack = 0
  6854  001F78  0E00               	movlw	0
  6855  001F7A  0100               	movlb	0	; () banked
  6856  001F7C  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
  6857  001F7E  0E00               	movlw	0
  6858  001F80  6F84               	movwf	___lwdiv@quotient& (0+255),b
  6859                           
  6860                           ; BSR set to: 0
  6861  001F82  0100               	movlb	0	; () banked
  6862  001F84  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6863  001F86  0100               	movlb	0	; () banked
  6864  001F88  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  6865  001F8A  B4D8               	btfsc	status,2,c
  6866  001F8C  D02C               	goto	l1464
  6867                           
  6868                           ; BSR set to: 0
  6869  001F8E  0E01               	movlw	1
  6870  001F90  0100               	movlb	0	; () banked
  6871  001F92  6F86               	movwf	___lwdiv@counter& (0+255),b
  6872  001F94  D006               	goto	l3695
  6873  001F96                     l3693:
  6874                           
  6875                           ; BSR set to: 0
  6876  001F96  0100               	movlb	0	; () banked
  6877  001F98  90D8               	bcf	status,0,c
  6878  001F9A  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  6879  001F9C  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  6880  001F9E  0100               	movlb	0	; () banked
  6881  001FA0  2B86               	incf	___lwdiv@counter& (0+255),f,b
  6882  001FA2                     l3695:
  6883                           
  6884                           ; BSR set to: 0
  6885  001FA2  0100               	movlb	0	; () banked
  6886  001FA4  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  6887  001FA6  D7F7               	goto	l3693
  6888  001FA8                     l3697:
  6889                           
  6890                           ; BSR set to: 0
  6891  001FA8  0100               	movlb	0	; () banked
  6892  001FAA  90D8               	bcf	status,0,c
  6893  001FAC  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
  6894  001FAE  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  6895                           
  6896                           ; BSR set to: 0
  6897  001FB0  0100               	movlb	0	; () banked
  6898  001FB2  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6899  001FB4  0100               	movlb	0	; () banked
  6900  001FB6  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  6901  001FB8  0100               	movlb	0	; () banked
  6902  001FBA  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6903  001FBC  0100               	movlb	0	; () banked
  6904  001FBE  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  6905  001FC0  A0D8               	btfss	status,0,c
  6906  001FC2  D00A               	goto	l3705
  6907                           
  6908                           ; BSR set to: 0
  6909  001FC4  0100               	movlb	0	; () banked
  6910  001FC6  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6911  001FC8  0100               	movlb	0	; () banked
  6912  001FCA  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  6913  001FCC  0100               	movlb	0	; () banked
  6914  001FCE  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6915  001FD0  0100               	movlb	0	; () banked
  6916  001FD2  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  6917                           
  6918                           ; BSR set to: 0
  6919  001FD4  0100               	movlb	0	; () banked
  6920  001FD6  8184               	bsf	___lwdiv@quotient& (0+255),0,b
  6921  001FD8                     l3705:
  6922                           
  6923                           ; BSR set to: 0
  6924  001FD8  0100               	movlb	0	; () banked
  6925  001FDA  90D8               	bcf	status,0,c
  6926  001FDC  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  6927  001FDE  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  6928                           
  6929                           ; BSR set to: 0
  6930  001FE0  0100               	movlb	0	; () banked
  6931  001FE2  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
  6932  001FE4  D7E1               	goto	l3697
  6933  001FE6                     l1464:
  6934                           
  6935                           ; BSR set to: 0
  6936  001FE6  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
  6937  001FEA  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6938                           
  6939                           ; BSR set to: 0
  6940  001FEE  0012               	return		;funcret
  6941  001FF0                     __end_of___lwdiv:
  6942                           	opt stack 0
  6943                           tblptru	equ	0xFF8
  6944                           tblptrh	equ	0xFF7
  6945                           tblptrl	equ	0xFF6
  6946                           tablat	equ	0xFF5
  6947                           prodh	equ	0xFF4
  6948                           prodl	equ	0xFF3
  6949                           intcon	equ	0xFF2
  6950                           intcon3	equ	0xFF0
  6951                           indf0	equ	0xFEF
  6952                           postinc0	equ	0xFEE
  6953                           fsr0h	equ	0xFEA
  6954                           fsr0l	equ	0xFE9
  6955                           wreg	equ	0xFE8
  6956                           postdec1	equ	0xFE5
  6957                           fsr1l	equ	0xFE1
  6958                           indf2	equ	0xFDF
  6959                           postinc2	equ	0xFDE
  6960                           postdec2	equ	0xFDD
  6961                           fsr2h	equ	0xFDA
  6962                           fsr2l	equ	0xFD9
  6963                           status	equ	0xFD8
  6964                           
  6965 ;; *************** function _lcdInst *****************
  6966 ;; Defined at:
  6967 ;;		line 13 in file "lcd.c"
  6968 ;; Parameters:    Size  Location     Type
  6969 ;;  data            1    wreg     unsigned char 
  6970 ;; Auto vars:     Size  Location     Type
  6971 ;;  data            1    2[BANK0 ] unsigned char 
  6972 ;; Return value:  Size  Location     Type
  6973 ;;                  1    wreg      void 
  6974 ;; Registers used:
  6975 ;;		wreg, status,2, status,0, cstack
  6976 ;; Tracked objects:
  6977 ;;		On entry : 0/0
  6978 ;;		On exit  : 0/0
  6979 ;;		Unchanged: 0/0
  6980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6982 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6984 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6985 ;;Total ram usage:        1 bytes
  6986 ;; Hardware stack levels used:    1
  6987 ;; Hardware stack levels required when called:    8
  6988 ;; This function calls:
  6989 ;;		_lcdNibble
  6990 ;; This function is called by:
  6991 ;;		_UI
  6992 ;;		_change_state_to_menu_start
  6993 ;;		_initLCD
  6994 ;;		_printRTC
  6995 ;;		_Loading
  6996 ;; This function uses a non-reentrant model
  6997 ;;
  6998                           
  6999                           	psect	text28
  7000  002886                     __ptext28:
  7001                           	opt stack 0
  7002  002886                     _lcdInst:
  7003                           	opt stack 20
  7004                           
  7005                           ; BSR set to: 0
  7006                           ;incstack = 0
  7007                           ;lcdInst@data stored from wreg
  7008  002886  0100               	movlb	0	; () banked
  7009  002888  6F82               	movwf	lcdInst@data& (0+255),b
  7010                           
  7011                           ;lcd.c: 14: LATDbits.LATD2 = 0;
  7012  00288A  948C               	bcf	3980,2,c	;volatile
  7013                           
  7014                           ;lcd.c: 15: lcdNibble(data);
  7015  00288C  0100               	movlb	0	; () banked
  7016  00288E  5182               	movf	lcdInst@data& (0+255),w,b
  7017  002890  EC6B  F010         	call	_lcdNibble
  7018  002894  0012               	return		;funcret
  7019  002896                     __end_of_lcdInst:
  7020                           	opt stack 0
  7021                           tblptru	equ	0xFF8
  7022                           tblptrh	equ	0xFF7
  7023                           tblptrl	equ	0xFF6
  7024                           tablat	equ	0xFF5
  7025                           prodh	equ	0xFF4
  7026                           prodl	equ	0xFF3
  7027                           intcon	equ	0xFF2
  7028                           intcon3	equ	0xFF0
  7029                           indf0	equ	0xFEF
  7030                           postinc0	equ	0xFEE
  7031                           fsr0h	equ	0xFEA
  7032                           fsr0l	equ	0xFE9
  7033                           wreg	equ	0xFE8
  7034                           postdec1	equ	0xFE5
  7035                           fsr1l	equ	0xFE1
  7036                           indf2	equ	0xFDF
  7037                           postinc2	equ	0xFDE
  7038                           postdec2	equ	0xFDD
  7039                           fsr2h	equ	0xFDA
  7040                           fsr2l	equ	0xFD9
  7041                           status	equ	0xFD8
  7042                           
  7043 ;; *************** function _lcdNibble *****************
  7044 ;; Defined at:
  7045 ;;		line 23 in file "lcd.c"
  7046 ;; Parameters:    Size  Location     Type
  7047 ;;  data            1    wreg     unsigned char 
  7048 ;; Auto vars:     Size  Location     Type
  7049 ;;  data            1    1[BANK0 ] unsigned char 
  7050 ;;  temp            1    0[BANK0 ] unsigned char 
  7051 ;; Return value:  Size  Location     Type
  7052 ;;                  1    wreg      void 
  7053 ;; Registers used:
  7054 ;;		wreg, status,2, status,0
  7055 ;; Tracked objects:
  7056 ;;		On entry : 0/0
  7057 ;;		On exit  : 0/0
  7058 ;;		Unchanged: 0/0
  7059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7061 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7063 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7064 ;;Total ram usage:        2 bytes
  7065 ;; Hardware stack levels used:    1
  7066 ;; Hardware stack levels required when called:    7
  7067 ;; This function calls:
  7068 ;;		Nothing
  7069 ;; This function is called by:
  7070 ;;		_lcdInst
  7071 ;;		_putch
  7072 ;; This function uses a non-reentrant model
  7073 ;;
  7074                           
  7075                           	psect	text29
  7076  0020D6                     __ptext29:
  7077                           	opt stack 0
  7078  0020D6                     _lcdNibble:
  7079                           	opt stack 20
  7080                           
  7081                           ;incstack = 0
  7082                           ;lcdNibble@data stored from wreg
  7083  0020D6  0100               	movlb	0	; () banked
  7084  0020D8  6F81               	movwf	lcdNibble@data& (0+255),b
  7085                           
  7086                           ;lcd.c: 25: char temp = data & 0xF0;
  7087  0020DA  0100               	movlb	0	; () banked
  7088  0020DC  5181               	movf	lcdNibble@data& (0+255),w,b
  7089  0020DE  0BF0               	andlw	240
  7090  0020E0  0100               	movlb	0	; () banked
  7091  0020E2  6F80               	movwf	lcdNibble@temp& (0+255),b
  7092                           
  7093                           ;lcd.c: 26: LATD = LATD & 0x0F;
  7094  0020E4  508C               	movf	3980,w,c	;volatile
  7095  0020E6  0B0F               	andlw	15
  7096  0020E8  6E8C               	movwf	3980,c	;volatile
  7097                           
  7098                           ;lcd.c: 27: LATD = temp | LATD;
  7099  0020EA  0100               	movlb	0	; () banked
  7100  0020EC  5180               	movf	lcdNibble@temp& (0+255),w,b
  7101  0020EE  108C               	iorwf	3980,w,c	;volatile
  7102  0020F0  6E8C               	movwf	3980,c	;volatile
  7103                           
  7104                           ; BSR set to: 0
  7105                           ;lcd.c: 29: LATDbits.LATD3 = 1;
  7106  0020F2  868C               	bsf	3980,3,c	;volatile
  7107                           
  7108                           ; BSR set to: 0
  7109                           ;lcd.c: 30: _delay((unsigned long)((25)*(32000000/4000000.0)));
  7110  0020F4  0E42               	movlw	66
  7111  0020F6                     u4707:
  7112  0020F6  2EE8               	decfsz	wreg,f,c
  7113  0020F8  D7FE               	bra	u4707
  7114  0020FA  D000               	nop2	
  7115                           
  7116                           ;lcd.c: 31: LATDbits.LATD3 = 0;
  7117  0020FC  968C               	bcf	3980,3,c	;volatile
  7118                           
  7119                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
  7120  0020FE  0E42               	movlw	66
  7121  002100                     u4717:
  7122  002100  2EE8               	decfsz	wreg,f,c
  7123  002102  D7FE               	bra	u4717
  7124  002104  D000               	nop2	
  7125                           
  7126                           ;lcd.c: 34: data = data << 4;
  7127  002106  0100               	movlb	0	; () banked
  7128  002108  3981               	swapf	lcdNibble@data& (0+255),w,b
  7129  00210A  0BF0               	andlw	240
  7130  00210C  0100               	movlb	0	; () banked
  7131  00210E  6F81               	movwf	lcdNibble@data& (0+255),b
  7132                           
  7133                           ;lcd.c: 36: temp = data & 0xF0;
  7134  002110  0100               	movlb	0	; () banked
  7135  002112  5181               	movf	lcdNibble@data& (0+255),w,b
  7136  002114  0BF0               	andlw	240
  7137  002116  0100               	movlb	0	; () banked
  7138  002118  6F80               	movwf	lcdNibble@temp& (0+255),b
  7139                           
  7140                           ;lcd.c: 37: LATD = LATD & 0x0F;
  7141  00211A  508C               	movf	3980,w,c	;volatile
  7142  00211C  0B0F               	andlw	15
  7143  00211E  6E8C               	movwf	3980,c	;volatile
  7144                           
  7145                           ;lcd.c: 38: LATD = temp | LATD;
  7146  002120  0100               	movlb	0	; () banked
  7147  002122  5180               	movf	lcdNibble@temp& (0+255),w,b
  7148  002124  108C               	iorwf	3980,w,c	;volatile
  7149  002126  6E8C               	movwf	3980,c	;volatile
  7150                           
  7151                           ; BSR set to: 0
  7152                           ;lcd.c: 40: LATDbits.LATD3 = 1;
  7153  002128  868C               	bsf	3980,3,c	;volatile
  7154                           
  7155                           ; BSR set to: 0
  7156                           ;lcd.c: 41: _delay((unsigned long)((25)*(32000000/4000000.0)));
  7157  00212A  0E42               	movlw	66
  7158  00212C                     u4727:
  7159  00212C  2EE8               	decfsz	wreg,f,c
  7160  00212E  D7FE               	bra	u4727
  7161  002130  D000               	nop2	
  7162                           
  7163                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  7164  002132  968C               	bcf	3980,3,c	;volatile
  7165                           
  7166                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
  7167  002134  0E42               	movlw	66
  7168  002136                     u4737:
  7169  002136  2EE8               	decfsz	wreg,f,c
  7170  002138  D7FE               	bra	u4737
  7171  00213A  D000               	nop2	
  7172  00213C  0012               	return		;funcret
  7173  00213E                     __end_of_lcdNibble:
  7174                           	opt stack 0
  7175                           tblptru	equ	0xFF8
  7176                           tblptrh	equ	0xFF7
  7177                           tblptrl	equ	0xFF6
  7178                           tablat	equ	0xFF5
  7179                           prodh	equ	0xFF4
  7180                           prodl	equ	0xFF3
  7181                           intcon	equ	0xFF2
  7182                           intcon3	equ	0xFF0
  7183                           indf0	equ	0xFEF
  7184                           postinc0	equ	0xFEE
  7185                           fsr0h	equ	0xFEA
  7186                           fsr0l	equ	0xFE9
  7187                           wreg	equ	0xFE8
  7188                           postdec1	equ	0xFE5
  7189                           fsr1l	equ	0xFE1
  7190                           indf2	equ	0xFDF
  7191                           postinc2	equ	0xFDE
  7192                           postdec2	equ	0xFDD
  7193                           fsr2h	equ	0xFDA
  7194                           fsr2l	equ	0xFD9
  7195                           status	equ	0xFD8
  7196                           
  7197 ;; *************** function _getRTC *****************
  7198 ;; Defined at:
  7199 ;;		line 42 in file "RTC.c"
  7200 ;; Parameters:    Size  Location     Type
  7201 ;;		None
  7202 ;; Auto vars:     Size  Location     Type
  7203 ;;  i               2    3[BANK0 ] int 
  7204 ;; Return value:  Size  Location     Type
  7205 ;;                  1    wreg      void 
  7206 ;; Registers used:
  7207 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7208 ;; Tracked objects:
  7209 ;;		On entry : 0/0
  7210 ;;		On exit  : 0/0
  7211 ;;		Unchanged: 0/0
  7212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7214 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7216 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7217 ;;Total ram usage:        2 bytes
  7218 ;; Hardware stack levels used:    1
  7219 ;; Hardware stack levels required when called:    9
  7220 ;; This function calls:
  7221 ;;		_I2C_Master_Read
  7222 ;;		_I2C_Master_Start
  7223 ;;		_I2C_Master_Stop
  7224 ;;		_I2C_Master_Write
  7225 ;; This function is called by:
  7226 ;;		_printRTC
  7227 ;;		_initSortTimer
  7228 ;;		_getIR
  7229 ;; This function uses a non-reentrant model
  7230 ;;
  7231                           
  7232                           	psect	text30
  7233  001E72                     __ptext30:
  7234                           	opt stack 0
  7235  001E72                     _getRTC:
  7236                           	opt stack 18
  7237                           
  7238                           ;RTC.c: 46: I2C_Master_Start();
  7239                           
  7240                           ;incstack = 0
  7241  001E72  EC69  F014         	call	_I2C_Master_Start	;wreg free
  7242                           
  7243                           ;RTC.c: 47: I2C_Master_Write(0b11010000);
  7244  001E76  0E00               	movlw	0
  7245  001E78  0100               	movlb	0	; () banked
  7246  001E7A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7247  001E7C  0ED0               	movlw	208
  7248  001E7E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7249  001E80  EC57  F014         	call	_I2C_Master_Write	;wreg free
  7250                           
  7251                           ;RTC.c: 48: I2C_Master_Write(0x00);
  7252  001E84  0E00               	movlw	0
  7253  001E86  0100               	movlb	0	; () banked
  7254  001E88  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7255  001E8A  0E00               	movlw	0
  7256  001E8C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7257  001E8E  EC57  F014         	call	_I2C_Master_Write	;wreg free
  7258                           
  7259                           ;RTC.c: 49: I2C_Master_Stop();
  7260  001E92  EC65  F014         	call	_I2C_Master_Stop	;wreg free
  7261                           
  7262                           ;RTC.c: 52: I2C_Master_Start();
  7263  001E96  EC69  F014         	call	_I2C_Master_Start	;wreg free
  7264                           
  7265                           ;RTC.c: 53: I2C_Master_Write(0b11010001);
  7266  001E9A  0E00               	movlw	0
  7267  001E9C  0100               	movlb	0	; () banked
  7268  001E9E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7269  001EA0  0ED1               	movlw	209
  7270  001EA2  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7271  001EA4  EC57  F014         	call	_I2C_Master_Write	;wreg free
  7272                           
  7273                           ;RTC.c: 54: for(int i = 0; i < 6; i++){
  7274  001EA8  0E00               	movlw	0
  7275  001EAA  0100               	movlb	0	; () banked
  7276  001EAC  6F84               	movwf	(getRTC@i+1)& (0+255),b
  7277  001EAE  0E00               	movlw	0
  7278  001EB0  6F83               	movwf	getRTC@i& (0+255),b
  7279  001EB2                     l3947:
  7280                           
  7281                           ; BSR set to: 0
  7282  001EB2  0100               	movlb	0	; () banked
  7283  001EB4  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  7284  001EB6  D008               	goto	l3951
  7285  001EB8  0100               	movlb	0	; () banked
  7286  001EBA  5184               	movf	(getRTC@i+1)& (0+255),w,b
  7287  001EBC  E115               	bnz	l3957
  7288  001EBE  0E06               	movlw	6
  7289  001EC0  0100               	movlb	0	; () banked
  7290  001EC2  5D83               	subwf	getRTC@i& (0+255),w,b
  7291  001EC4  B0D8               	btfsc	status,0,c
  7292  001EC6  D010               	goto	l3957
  7293  001EC8                     l3951:
  7294                           
  7295                           ; BSR set to: 0
  7296                           ;RTC.c: 55: time[i] = I2C_Master_Read(1);
  7297  001EC8  0ED4               	movlw	low _time
  7298  001ECA  0100               	movlb	0	; () banked
  7299  001ECC  2583               	addwf	getRTC@i& (0+255),w,b
  7300  001ECE  6ED9               	movwf	fsr2l,c
  7301  001ED0  0E00               	movlw	high _time
  7302  001ED2  0100               	movlb	0	; () banked
  7303  001ED4  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  7304  001ED6  6EDA               	movwf	fsr2h,c
  7305  001ED8  0E01               	movlw	1
  7306  001EDA  EC3F  F013         	call	_I2C_Master_Read
  7307  001EDE  6EDF               	movwf	indf2,c
  7308  001EE0  0100               	movlb	0	; () banked
  7309  001EE2  4B83               	infsnz	getRTC@i& (0+255),f,b
  7310  001EE4  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  7311  001EE6  D7E5               	goto	l3947
  7312  001EE8                     l3957:
  7313                           
  7314                           ; BSR set to: 0
  7315                           ;RTC.c: 56: }
  7316                           ;RTC.c: 57: time[6] = I2C_Master_Read(0);
  7317  001EE8  0E00               	movlw	0
  7318  001EEA  EC3F  F013         	call	_I2C_Master_Read
  7319  001EEE  0100               	movlb	0	; () banked
  7320  001EF0  6FDA               	movwf	(_time+6)& (0+255),b
  7321                           
  7322                           ;RTC.c: 58: I2C_Master_Stop();
  7323  001EF2  EC65  F014         	call	_I2C_Master_Stop	;wreg free
  7324  001EF6  0012               	return		;funcret
  7325  001EF8                     __end_of_getRTC:
  7326                           	opt stack 0
  7327                           tblptru	equ	0xFF8
  7328                           tblptrh	equ	0xFF7
  7329                           tblptrl	equ	0xFF6
  7330                           tablat	equ	0xFF5
  7331                           prodh	equ	0xFF4
  7332                           prodl	equ	0xFF3
  7333                           intcon	equ	0xFF2
  7334                           intcon3	equ	0xFF0
  7335                           indf0	equ	0xFEF
  7336                           postinc0	equ	0xFEE
  7337                           fsr0h	equ	0xFEA
  7338                           fsr0l	equ	0xFE9
  7339                           wreg	equ	0xFE8
  7340                           postdec1	equ	0xFE5
  7341                           fsr1l	equ	0xFE1
  7342                           indf2	equ	0xFDF
  7343                           postinc2	equ	0xFDE
  7344                           postdec2	equ	0xFDD
  7345                           fsr2h	equ	0xFDA
  7346                           fsr2l	equ	0xFD9
  7347                           status	equ	0xFD8
  7348                           
  7349 ;; *************** function _I2C_Master_Write *****************
  7350 ;; Defined at:
  7351 ;;		line 47 in file "I2C.c"
  7352 ;; Parameters:    Size  Location     Type
  7353 ;;  d               2    1[BANK0 ] unsigned int 
  7354 ;; Auto vars:     Size  Location     Type
  7355 ;;		None
  7356 ;; Return value:  Size  Location     Type
  7357 ;;                  1    wreg      void 
  7358 ;; Registers used:
  7359 ;;		wreg, status,2, status,0, cstack
  7360 ;; Tracked objects:
  7361 ;;		On entry : 0/0
  7362 ;;		On exit  : 0/0
  7363 ;;		Unchanged: 0/0
  7364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7365 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7368 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7369 ;;Total ram usage:        2 bytes
  7370 ;; Hardware stack levels used:    1
  7371 ;; Hardware stack levels required when called:    8
  7372 ;; This function calls:
  7373 ;;		_I2C_Master_Wait
  7374 ;; This function is called by:
  7375 ;;		_loadRTC
  7376 ;;		_getRTC
  7377 ;; This function uses a non-reentrant model
  7378 ;;
  7379                           
  7380                           	psect	text31
  7381  0028AE                     __ptext31:
  7382                           	opt stack 0
  7383  0028AE                     _I2C_Master_Write:
  7384                           	opt stack 18
  7385                           
  7386                           ;I2C.c: 49: I2C_Master_Wait();
  7387                           
  7388                           ;incstack = 0
  7389  0028AE  EC15  F014         	call	_I2C_Master_Wait	;wreg free
  7390                           
  7391                           ;I2C.c: 50: SSPBUF = d;
  7392  0028B2  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  7393  0028B6  0012               	return		;funcret
  7394  0028B8                     __end_of_I2C_Master_Write:
  7395                           	opt stack 0
  7396                           tblptru	equ	0xFF8
  7397                           tblptrh	equ	0xFF7
  7398                           tblptrl	equ	0xFF6
  7399                           tablat	equ	0xFF5
  7400                           prodh	equ	0xFF4
  7401                           prodl	equ	0xFF3
  7402                           intcon	equ	0xFF2
  7403                           intcon3	equ	0xFF0
  7404                           indf0	equ	0xFEF
  7405                           postinc0	equ	0xFEE
  7406                           fsr0h	equ	0xFEA
  7407                           fsr0l	equ	0xFE9
  7408                           wreg	equ	0xFE8
  7409                           postdec1	equ	0xFE5
  7410                           fsr1l	equ	0xFE1
  7411                           indf2	equ	0xFDF
  7412                           postinc2	equ	0xFDE
  7413                           postdec2	equ	0xFDD
  7414                           fsr2h	equ	0xFDA
  7415                           fsr2l	equ	0xFD9
  7416                           status	equ	0xFD8
  7417                           
  7418 ;; *************** function _I2C_Master_Stop *****************
  7419 ;; Defined at:
  7420 ;;		line 41 in file "I2C.c"
  7421 ;; Parameters:    Size  Location     Type
  7422 ;;		None
  7423 ;; Auto vars:     Size  Location     Type
  7424 ;;		None
  7425 ;; Return value:  Size  Location     Type
  7426 ;;                  1    wreg      void 
  7427 ;; Registers used:
  7428 ;;		wreg, status,2, status,0, cstack
  7429 ;; Tracked objects:
  7430 ;;		On entry : 0/0
  7431 ;;		On exit  : 0/0
  7432 ;;		Unchanged: 0/0
  7433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7438 ;;Total ram usage:        0 bytes
  7439 ;; Hardware stack levels used:    1
  7440 ;; Hardware stack levels required when called:    8
  7441 ;; This function calls:
  7442 ;;		_I2C_Master_Wait
  7443 ;; This function is called by:
  7444 ;;		_loadRTC
  7445 ;;		_getRTC
  7446 ;; This function uses a non-reentrant model
  7447 ;;
  7448                           
  7449                           	psect	text32
  7450  0028CA                     __ptext32:
  7451                           	opt stack 0
  7452  0028CA                     _I2C_Master_Stop:
  7453                           	opt stack 18
  7454                           
  7455                           ;I2C.c: 43: I2C_Master_Wait();
  7456                           
  7457                           ;incstack = 0
  7458  0028CA  EC15  F014         	call	_I2C_Master_Wait	;wreg free
  7459                           
  7460                           ;I2C.c: 44: PEN = 1;
  7461  0028CE  84C5               	bsf	4037,2,c	;volatile
  7462  0028D0  0012               	return		;funcret
  7463  0028D2                     __end_of_I2C_Master_Stop:
  7464                           	opt stack 0
  7465                           tblptru	equ	0xFF8
  7466                           tblptrh	equ	0xFF7
  7467                           tblptrl	equ	0xFF6
  7468                           tablat	equ	0xFF5
  7469                           prodh	equ	0xFF4
  7470                           prodl	equ	0xFF3
  7471                           intcon	equ	0xFF2
  7472                           intcon3	equ	0xFF0
  7473                           indf0	equ	0xFEF
  7474                           postinc0	equ	0xFEE
  7475                           fsr0h	equ	0xFEA
  7476                           fsr0l	equ	0xFE9
  7477                           wreg	equ	0xFE8
  7478                           postdec1	equ	0xFE5
  7479                           fsr1l	equ	0xFE1
  7480                           indf2	equ	0xFDF
  7481                           postinc2	equ	0xFDE
  7482                           postdec2	equ	0xFDD
  7483                           fsr2h	equ	0xFDA
  7484                           fsr2l	equ	0xFD9
  7485                           status	equ	0xFD8
  7486                           
  7487 ;; *************** function _I2C_Master_Start *****************
  7488 ;; Defined at:
  7489 ;;		line 29 in file "I2C.c"
  7490 ;; Parameters:    Size  Location     Type
  7491 ;;		None
  7492 ;; Auto vars:     Size  Location     Type
  7493 ;;		None
  7494 ;; Return value:  Size  Location     Type
  7495 ;;                  1    wreg      void 
  7496 ;; Registers used:
  7497 ;;		wreg, status,2, status,0, cstack
  7498 ;; Tracked objects:
  7499 ;;		On entry : 0/0
  7500 ;;		On exit  : 0/0
  7501 ;;		Unchanged: 0/0
  7502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7506 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7507 ;;Total ram usage:        0 bytes
  7508 ;; Hardware stack levels used:    1
  7509 ;; Hardware stack levels required when called:    8
  7510 ;; This function calls:
  7511 ;;		_I2C_Master_Wait
  7512 ;; This function is called by:
  7513 ;;		_loadRTC
  7514 ;;		_getRTC
  7515 ;; This function uses a non-reentrant model
  7516 ;;
  7517                           
  7518                           	psect	text33
  7519  0028D2                     __ptext33:
  7520                           	opt stack 0
  7521  0028D2                     _I2C_Master_Start:
  7522                           	opt stack 18
  7523                           
  7524                           ;I2C.c: 31: I2C_Master_Wait();
  7525                           
  7526                           ;incstack = 0
  7527  0028D2  EC15  F014         	call	_I2C_Master_Wait	;wreg free
  7528                           
  7529                           ;I2C.c: 32: SEN = 1;
  7530  0028D6  80C5               	bsf	4037,0,c	;volatile
  7531  0028D8  0012               	return		;funcret
  7532  0028DA                     __end_of_I2C_Master_Start:
  7533                           	opt stack 0
  7534                           tblptru	equ	0xFF8
  7535                           tblptrh	equ	0xFF7
  7536                           tblptrl	equ	0xFF6
  7537                           tablat	equ	0xFF5
  7538                           prodh	equ	0xFF4
  7539                           prodl	equ	0xFF3
  7540                           intcon	equ	0xFF2
  7541                           intcon3	equ	0xFF0
  7542                           indf0	equ	0xFEF
  7543                           postinc0	equ	0xFEE
  7544                           fsr0h	equ	0xFEA
  7545                           fsr0l	equ	0xFE9
  7546                           wreg	equ	0xFE8
  7547                           postdec1	equ	0xFE5
  7548                           fsr1l	equ	0xFE1
  7549                           indf2	equ	0xFDF
  7550                           postinc2	equ	0xFDE
  7551                           postdec2	equ	0xFDD
  7552                           fsr2h	equ	0xFDA
  7553                           fsr2l	equ	0xFD9
  7554                           status	equ	0xFD8
  7555                           
  7556 ;; *************** function _I2C_Master_Read *****************
  7557 ;; Defined at:
  7558 ;;		line 53 in file "I2C.c"
  7559 ;; Parameters:    Size  Location     Type
  7560 ;;  a               1    wreg     unsigned char 
  7561 ;; Auto vars:     Size  Location     Type
  7562 ;;  a               1    1[BANK0 ] unsigned char 
  7563 ;;  temp            1    2[BANK0 ] unsigned char 
  7564 ;; Return value:  Size  Location     Type
  7565 ;;                  1    wreg      unsigned char 
  7566 ;; Registers used:
  7567 ;;		wreg, status,2, status,0, cstack
  7568 ;; Tracked objects:
  7569 ;;		On entry : 0/0
  7570 ;;		On exit  : 0/0
  7571 ;;		Unchanged: 0/0
  7572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7574 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7576 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7577 ;;Total ram usage:        2 bytes
  7578 ;; Hardware stack levels used:    1
  7579 ;; Hardware stack levels required when called:    8
  7580 ;; This function calls:
  7581 ;;		_I2C_Master_Wait
  7582 ;; This function is called by:
  7583 ;;		_getRTC
  7584 ;; This function uses a non-reentrant model
  7585 ;;
  7586                           
  7587                           	psect	text34
  7588  00267E                     __ptext34:
  7589                           	opt stack 0
  7590  00267E                     _I2C_Master_Read:
  7591                           	opt stack 18
  7592                           
  7593                           ;incstack = 0
  7594                           ;I2C_Master_Read@a stored from wreg
  7595  00267E  0100               	movlb	0	; () banked
  7596  002680  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  7597                           
  7598                           ;I2C.c: 55: unsigned char temp;
  7599                           ;I2C.c: 56: I2C_Master_Wait();
  7600  002682  EC15  F014         	call	_I2C_Master_Wait	;wreg free
  7601                           
  7602                           ;I2C.c: 57: RCEN = 1;
  7603  002686  86C5               	bsf	4037,3,c	;volatile
  7604                           
  7605                           ;I2C.c: 58: I2C_Master_Wait();
  7606  002688  EC15  F014         	call	_I2C_Master_Wait	;wreg free
  7607                           
  7608                           ;I2C.c: 59: temp = SSPBUF;
  7609  00268C  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  7610                           
  7611                           ;I2C.c: 60: I2C_Master_Wait();
  7612  002690  EC15  F014         	call	_I2C_Master_Wait	;wreg free
  7613                           
  7614                           ;I2C.c: 61: ACKDT = (a)?0:1;
  7615  002694  0100               	movlb	0	; () banked
  7616  002696  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  7617  002698  0100               	movlb	0	; () banked
  7618  00269A  A4D8               	btfss	status,2,c
  7619  00269C  D002               	goto	u2300
  7620  00269E  8AC5               	bsf	4037,5,c	;volatile
  7621  0026A0  D001               	goto	l3659
  7622  0026A2                     u2300:
  7623  0026A2  9AC5               	bcf	4037,5,c	;volatile
  7624  0026A4                     l3659:
  7625                           
  7626                           ;I2C.c: 62: ACKEN = 1;
  7627  0026A4  88C5               	bsf	4037,4,c	;volatile
  7628                           
  7629                           ;I2C.c: 63: return temp;
  7630  0026A6  0100               	movlb	0	; () banked
  7631  0026A8  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  7632  0026AA  0012               	return	
  7633  0026AC                     __end_of_I2C_Master_Read:
  7634                           	opt stack 0
  7635                           tblptru	equ	0xFF8
  7636                           tblptrh	equ	0xFF7
  7637                           tblptrl	equ	0xFF6
  7638                           tablat	equ	0xFF5
  7639                           prodh	equ	0xFF4
  7640                           prodl	equ	0xFF3
  7641                           intcon	equ	0xFF2
  7642                           intcon3	equ	0xFF0
  7643                           indf0	equ	0xFEF
  7644                           postinc0	equ	0xFEE
  7645                           fsr0h	equ	0xFEA
  7646                           fsr0l	equ	0xFE9
  7647                           wreg	equ	0xFE8
  7648                           postdec1	equ	0xFE5
  7649                           fsr1l	equ	0xFE1
  7650                           indf2	equ	0xFDF
  7651                           postinc2	equ	0xFDE
  7652                           postdec2	equ	0xFDD
  7653                           fsr2h	equ	0xFDA
  7654                           fsr2l	equ	0xFD9
  7655                           status	equ	0xFD8
  7656                           
  7657 ;; *************** function _I2C_Master_Wait *****************
  7658 ;; Defined at:
  7659 ;;		line 24 in file "I2C.c"
  7660 ;; Parameters:    Size  Location     Type
  7661 ;;		None
  7662 ;; Auto vars:     Size  Location     Type
  7663 ;;		None
  7664 ;; Return value:  Size  Location     Type
  7665 ;;                  1    wreg      void 
  7666 ;; Registers used:
  7667 ;;		wreg, status,2, status,0
  7668 ;; Tracked objects:
  7669 ;;		On entry : 0/0
  7670 ;;		On exit  : 0/0
  7671 ;;		Unchanged: 0/0
  7672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7675 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7676 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7677 ;;Total ram usage:        1 bytes
  7678 ;; Hardware stack levels used:    1
  7679 ;; Hardware stack levels required when called:    7
  7680 ;; This function calls:
  7681 ;;		Nothing
  7682 ;; This function is called by:
  7683 ;;		_I2C_Master_Start
  7684 ;;		_I2C_Master_Stop
  7685 ;;		_I2C_Master_Write
  7686 ;;		_I2C_Master_Read
  7687 ;;		_I2C_Master_RepeatedStart
  7688 ;; This function uses a non-reentrant model
  7689 ;;
  7690                           
  7691                           	psect	text35
  7692  00282A                     __ptext35:
  7693                           	opt stack 0
  7694  00282A                     _I2C_Master_Wait:
  7695                           	opt stack 18
  7696  00282A                     l120:
  7697  00282A  B4C7               	btfsc	4039,2,c	;volatile
  7698  00282C  D7FE               	goto	l120
  7699  00282E  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  7700  002832  0E1F               	movlw	31
  7701  002834  0100               	movlb	0	; () banked
  7702  002836  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  7703  002838  B4D8               	btfsc	status,2,c
  7704  00283A  0012               	return	
  7705  00283C  D7F6               	goto	l120
  7706  00283E                     __end_of_I2C_Master_Wait:
  7707                           	opt stack 0
  7708                           tblptru	equ	0xFF8
  7709                           tblptrh	equ	0xFF7
  7710                           tblptrl	equ	0xFF6
  7711                           tablat	equ	0xFF5
  7712                           prodh	equ	0xFF4
  7713                           prodl	equ	0xFF3
  7714                           intcon	equ	0xFF2
  7715                           intcon3	equ	0xFF0
  7716                           indf0	equ	0xFEF
  7717                           postinc0	equ	0xFEE
  7718                           fsr0h	equ	0xFEA
  7719                           fsr0l	equ	0xFE9
  7720                           wreg	equ	0xFE8
  7721                           postdec1	equ	0xFE5
  7722                           fsr1l	equ	0xFE1
  7723                           indf2	equ	0xFDF
  7724                           postinc2	equ	0xFDE
  7725                           postdec2	equ	0xFDD
  7726                           fsr2h	equ	0xFDA
  7727                           fsr2l	equ	0xFD9
  7728                           status	equ	0xFD8
  7729                           
  7730 ;; *************** function ___awmod *****************
  7731 ;; Defined at:
  7732 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  7733 ;; Parameters:    Size  Location     Type
  7734 ;;  dividend        2    0[BANK0 ] int 
  7735 ;;  divisor         2    2[BANK0 ] int 
  7736 ;; Auto vars:     Size  Location     Type
  7737 ;;  sign            1    5[BANK0 ] unsigned char 
  7738 ;;  counter         1    4[BANK0 ] unsigned char 
  7739 ;; Return value:  Size  Location     Type
  7740 ;;                  2    0[BANK0 ] int 
  7741 ;; Registers used:
  7742 ;;		wreg, status,2, status,0
  7743 ;; Tracked objects:
  7744 ;;		On entry : 0/0
  7745 ;;		On exit  : 0/0
  7746 ;;		Unchanged: 0/0
  7747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7748 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7749 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7751 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7752 ;;Total ram usage:        6 bytes
  7753 ;; Hardware stack levels used:    1
  7754 ;; Hardware stack levels required when called:    7
  7755 ;; This function calls:
  7756 ;;		Nothing
  7757 ;; This function is called by:
  7758 ;;		_UI
  7759 ;; This function uses a non-reentrant model
  7760 ;;
  7761                           
  7762                           	psect	text36
  7763  001CAC                     __ptext36:
  7764                           	opt stack 0
  7765  001CAC                     ___awmod:
  7766                           	opt stack 22
  7767                           
  7768                           ; BSR set to: 0
  7769                           ;incstack = 0
  7770  001CAC  0E00               	movlw	0
  7771  001CAE  0100               	movlb	0	; () banked
  7772  001CB0  6F85               	movwf	___awmod@sign& (0+255),b
  7773                           
  7774                           ; BSR set to: 0
  7775  001CB2  0100               	movlb	0	; () banked
  7776  001CB4  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  7777  001CB6  D008               	goto	l4709
  7778                           
  7779                           ; BSR set to: 0
  7780  001CB8  0100               	movlb	0	; () banked
  7781  001CBA  6D80               	negf	___awmod@dividend& (0+255),b
  7782  001CBC  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  7783  001CBE  B0D8               	btfsc	status,0,c
  7784  001CC0  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  7785                           
  7786                           ; BSR set to: 0
  7787  001CC2  0E01               	movlw	1
  7788  001CC4  0100               	movlb	0	; () banked
  7789  001CC6  6F85               	movwf	___awmod@sign& (0+255),b
  7790  001CC8                     l4709:
  7791                           
  7792                           ; BSR set to: 0
  7793  001CC8  0100               	movlb	0	; () banked
  7794  001CCA  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  7795  001CCC  D005               	goto	l4713
  7796                           
  7797                           ; BSR set to: 0
  7798  001CCE  0100               	movlb	0	; () banked
  7799  001CD0  6D82               	negf	___awmod@divisor& (0+255),b
  7800  001CD2  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  7801  001CD4  B0D8               	btfsc	status,0,c
  7802  001CD6  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  7803  001CD8                     l4713:
  7804                           
  7805                           ; BSR set to: 0
  7806  001CD8  0100               	movlb	0	; () banked
  7807  001CDA  5182               	movf	___awmod@divisor& (0+255),w,b
  7808  001CDC  0100               	movlb	0	; () banked
  7809  001CDE  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  7810  001CE0  B4D8               	btfsc	status,2,c
  7811  001CE2  D026               	goto	l4729
  7812                           
  7813                           ; BSR set to: 0
  7814  001CE4  0E01               	movlw	1
  7815  001CE6  0100               	movlb	0	; () banked
  7816  001CE8  6F84               	movwf	___awmod@counter& (0+255),b
  7817  001CEA  D006               	goto	l4719
  7818  001CEC                     l4717:
  7819                           
  7820                           ; BSR set to: 0
  7821  001CEC  0100               	movlb	0	; () banked
  7822  001CEE  90D8               	bcf	status,0,c
  7823  001CF0  3782               	rlcf	___awmod@divisor& (0+255),f,b
  7824  001CF2  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  7825  001CF4  0100               	movlb	0	; () banked
  7826  001CF6  2B84               	incf	___awmod@counter& (0+255),f,b
  7827  001CF8                     l4719:
  7828                           
  7829                           ; BSR set to: 0
  7830  001CF8  0100               	movlb	0	; () banked
  7831  001CFA  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  7832  001CFC  D7F7               	goto	l4717
  7833  001CFE                     l4721:
  7834                           
  7835                           ; BSR set to: 0
  7836  001CFE  0100               	movlb	0	; () banked
  7837  001D00  5182               	movf	___awmod@divisor& (0+255),w,b
  7838  001D02  0100               	movlb	0	; () banked
  7839  001D04  5D80               	subwf	___awmod@dividend& (0+255),w,b
  7840  001D06  0100               	movlb	0	; () banked
  7841  001D08  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  7842  001D0A  0100               	movlb	0	; () banked
  7843  001D0C  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  7844  001D0E  A0D8               	btfss	status,0,c
  7845  001D10  D008               	goto	l4725
  7846                           
  7847                           ; BSR set to: 0
  7848  001D12  0100               	movlb	0	; () banked
  7849  001D14  5182               	movf	___awmod@divisor& (0+255),w,b
  7850  001D16  0100               	movlb	0	; () banked
  7851  001D18  5F80               	subwf	___awmod@dividend& (0+255),f,b
  7852  001D1A  0100               	movlb	0	; () banked
  7853  001D1C  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  7854  001D1E  0100               	movlb	0	; () banked
  7855  001D20  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  7856  001D22                     l4725:
  7857                           
  7858                           ; BSR set to: 0
  7859  001D22  0100               	movlb	0	; () banked
  7860  001D24  90D8               	bcf	status,0,c
  7861  001D26  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  7862  001D28  3382               	rrcf	___awmod@divisor& (0+255),f,b
  7863                           
  7864                           ; BSR set to: 0
  7865  001D2A  0100               	movlb	0	; () banked
  7866  001D2C  2F84               	decfsz	___awmod@counter& (0+255),f,b
  7867  001D2E  D7E7               	goto	l4721
  7868  001D30                     l4729:
  7869                           
  7870                           ; BSR set to: 0
  7871  001D30  0100               	movlb	0	; () banked
  7872  001D32  5185               	movf	___awmod@sign& (0+255),w,b
  7873  001D34  0100               	movlb	0	; () banked
  7874  001D36  B4D8               	btfsc	status,2,c
  7875  001D38  D005               	goto	l4733
  7876                           
  7877                           ; BSR set to: 0
  7878  001D3A  0100               	movlb	0	; () banked
  7879  001D3C  6D80               	negf	___awmod@dividend& (0+255),b
  7880  001D3E  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  7881  001D40  B0D8               	btfsc	status,0,c
  7882  001D42  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  7883  001D44                     l4733:
  7884                           
  7885                           ; BSR set to: 0
  7886  001D44  C080  F080         	movff	___awmod@dividend,?___awmod
  7887  001D48  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  7888  001D4C  0012               	return	
  7889  001D4E                     __end_of___awmod:
  7890                           	opt stack 0
  7891                           tblptru	equ	0xFF8
  7892                           tblptrh	equ	0xFF7
  7893                           tblptrl	equ	0xFF6
  7894                           tablat	equ	0xFF5
  7895                           prodh	equ	0xFF4
  7896                           prodl	equ	0xFF3
  7897                           intcon	equ	0xFF2
  7898                           intcon3	equ	0xFF0
  7899                           indf0	equ	0xFEF
  7900                           postinc0	equ	0xFEE
  7901                           fsr0h	equ	0xFEA
  7902                           fsr0l	equ	0xFE9
  7903                           wreg	equ	0xFE8
  7904                           postdec1	equ	0xFE5
  7905                           fsr1l	equ	0xFE1
  7906                           indf2	equ	0xFDF
  7907                           postinc2	equ	0xFDE
  7908                           postdec2	equ	0xFDD
  7909                           fsr2h	equ	0xFDA
  7910                           fsr2l	equ	0xFD9
  7911                           status	equ	0xFD8
  7912                           
  7913 ;; *************** function ___awdiv *****************
  7914 ;; Defined at:
  7915 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  7916 ;; Parameters:    Size  Location     Type
  7917 ;;  dividend        2    6[BANK0 ] int 
  7918 ;;  divisor         2    8[BANK0 ] int 
  7919 ;; Auto vars:     Size  Location     Type
  7920 ;;  quotient        2   12[BANK0 ] int 
  7921 ;;  sign            1   11[BANK0 ] unsigned char 
  7922 ;;  counter         1   10[BANK0 ] unsigned char 
  7923 ;; Return value:  Size  Location     Type
  7924 ;;                  2    6[BANK0 ] int 
  7925 ;; Registers used:
  7926 ;;		wreg, status,2, status,0
  7927 ;; Tracked objects:
  7928 ;;		On entry : 0/0
  7929 ;;		On exit  : 0/0
  7930 ;;		Unchanged: 0/0
  7931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7932 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7933 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7935 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7936 ;;Total ram usage:        8 bytes
  7937 ;; Hardware stack levels used:    1
  7938 ;; Hardware stack levels required when called:    7
  7939 ;; This function calls:
  7940 ;;		Nothing
  7941 ;; This function is called by:
  7942 ;;		_UI
  7943 ;; This function uses a non-reentrant model
  7944 ;;
  7945                           
  7946                           	psect	text37
  7947  0019DC                     __ptext37:
  7948                           	opt stack 0
  7949  0019DC                     ___awdiv:
  7950                           	opt stack 22
  7951                           
  7952                           ; BSR set to: 0
  7953                           ;incstack = 0
  7954  0019DC  0E00               	movlw	0
  7955  0019DE  0100               	movlb	0	; () banked
  7956  0019E0  6F8B               	movwf	___awdiv@sign& (0+255),b
  7957                           
  7958                           ; BSR set to: 0
  7959  0019E2  0100               	movlb	0	; () banked
  7960  0019E4  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7961  0019E6  D008               	goto	l4665
  7962                           
  7963                           ; BSR set to: 0
  7964  0019E8  0100               	movlb	0	; () banked
  7965  0019EA  6D88               	negf	___awdiv@divisor& (0+255),b
  7966  0019EC  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  7967  0019EE  B0D8               	btfsc	status,0,c
  7968  0019F0  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  7969                           
  7970                           ; BSR set to: 0
  7971  0019F2  0E01               	movlw	1
  7972  0019F4  0100               	movlb	0	; () banked
  7973  0019F6  6F8B               	movwf	___awdiv@sign& (0+255),b
  7974  0019F8                     l4665:
  7975                           
  7976                           ; BSR set to: 0
  7977  0019F8  0100               	movlb	0	; () banked
  7978  0019FA  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  7979  0019FC  D008               	goto	l4671
  7980                           
  7981                           ; BSR set to: 0
  7982  0019FE  0100               	movlb	0	; () banked
  7983  001A00  6D86               	negf	___awdiv@dividend& (0+255),b
  7984  001A02  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  7985  001A04  B0D8               	btfsc	status,0,c
  7986  001A06  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  7987                           
  7988                           ; BSR set to: 0
  7989  001A08  0E01               	movlw	1
  7990  001A0A  0100               	movlb	0	; () banked
  7991  001A0C  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  7992  001A0E                     l4671:
  7993                           
  7994                           ; BSR set to: 0
  7995  001A0E  0E00               	movlw	0
  7996  001A10  0100               	movlb	0	; () banked
  7997  001A12  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  7998  001A14  0E00               	movlw	0
  7999  001A16  6F8C               	movwf	___awdiv@quotient& (0+255),b
  8000                           
  8001                           ; BSR set to: 0
  8002  001A18  0100               	movlb	0	; () banked
  8003  001A1A  5188               	movf	___awdiv@divisor& (0+255),w,b
  8004  001A1C  0100               	movlb	0	; () banked
  8005  001A1E  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8006  001A20  B4D8               	btfsc	status,2,c
  8007  001A22  D02C               	goto	l4693
  8008                           
  8009                           ; BSR set to: 0
  8010  001A24  0E01               	movlw	1
  8011  001A26  0100               	movlb	0	; () banked
  8012  001A28  6F8A               	movwf	___awdiv@counter& (0+255),b
  8013  001A2A  D006               	goto	l4679
  8014  001A2C                     l4677:
  8015                           
  8016                           ; BSR set to: 0
  8017  001A2C  0100               	movlb	0	; () banked
  8018  001A2E  90D8               	bcf	status,0,c
  8019  001A30  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  8020  001A32  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8021  001A34  0100               	movlb	0	; () banked
  8022  001A36  2B8A               	incf	___awdiv@counter& (0+255),f,b
  8023  001A38                     l4679:
  8024                           
  8025                           ; BSR set to: 0
  8026  001A38  0100               	movlb	0	; () banked
  8027  001A3A  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8028  001A3C  D7F7               	goto	l4677
  8029  001A3E                     l4681:
  8030                           
  8031                           ; BSR set to: 0
  8032  001A3E  0100               	movlb	0	; () banked
  8033  001A40  90D8               	bcf	status,0,c
  8034  001A42  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  8035  001A44  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8036                           
  8037                           ; BSR set to: 0
  8038  001A46  0100               	movlb	0	; () banked
  8039  001A48  5188               	movf	___awdiv@divisor& (0+255),w,b
  8040  001A4A  0100               	movlb	0	; () banked
  8041  001A4C  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  8042  001A4E  0100               	movlb	0	; () banked
  8043  001A50  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8044  001A52  0100               	movlb	0	; () banked
  8045  001A54  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8046  001A56  A0D8               	btfss	status,0,c
  8047  001A58  D00A               	goto	l4689
  8048                           
  8049                           ; BSR set to: 0
  8050  001A5A  0100               	movlb	0	; () banked
  8051  001A5C  5188               	movf	___awdiv@divisor& (0+255),w,b
  8052  001A5E  0100               	movlb	0	; () banked
  8053  001A60  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  8054  001A62  0100               	movlb	0	; () banked
  8055  001A64  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8056  001A66  0100               	movlb	0	; () banked
  8057  001A68  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8058                           
  8059                           ; BSR set to: 0
  8060  001A6A  0100               	movlb	0	; () banked
  8061  001A6C  818C               	bsf	___awdiv@quotient& (0+255),0,b
  8062  001A6E                     l4689:
  8063                           
  8064                           ; BSR set to: 0
  8065  001A6E  0100               	movlb	0	; () banked
  8066  001A70  90D8               	bcf	status,0,c
  8067  001A72  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8068  001A74  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  8069                           
  8070                           ; BSR set to: 0
  8071  001A76  0100               	movlb	0	; () banked
  8072  001A78  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  8073  001A7A  D7E1               	goto	l4681
  8074  001A7C                     l4693:
  8075                           
  8076                           ; BSR set to: 0
  8077  001A7C  0100               	movlb	0	; () banked
  8078  001A7E  518B               	movf	___awdiv@sign& (0+255),w,b
  8079  001A80  0100               	movlb	0	; () banked
  8080  001A82  B4D8               	btfsc	status,2,c
  8081  001A84  D005               	goto	l4697
  8082                           
  8083                           ; BSR set to: 0
  8084  001A86  0100               	movlb	0	; () banked
  8085  001A88  6D8C               	negf	___awdiv@quotient& (0+255),b
  8086  001A8A  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8087  001A8C  B0D8               	btfsc	status,0,c
  8088  001A8E  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8089  001A90                     l4697:
  8090                           
  8091                           ; BSR set to: 0
  8092  001A90  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  8093  001A94  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  8094  001A98  0012               	return	
  8095  001A9A                     __end_of___awdiv:
  8096                           	opt stack 0
  8097                           tblptru	equ	0xFF8
  8098                           tblptrh	equ	0xFF7
  8099                           tblptrl	equ	0xFF6
  8100                           tablat	equ	0xFF5
  8101                           prodh	equ	0xFF4
  8102                           prodl	equ	0xFF3
  8103                           intcon	equ	0xFF2
  8104                           intcon3	equ	0xFF0
  8105                           indf0	equ	0xFEF
  8106                           postinc0	equ	0xFEE
  8107                           fsr0h	equ	0xFEA
  8108                           fsr0l	equ	0xFE9
  8109                           wreg	equ	0xFE8
  8110                           postdec1	equ	0xFE5
  8111                           fsr1l	equ	0xFE1
  8112                           indf2	equ	0xFDF
  8113                           postinc2	equ	0xFDE
  8114                           postdec2	equ	0xFDD
  8115                           fsr2h	equ	0xFDA
  8116                           fsr2l	equ	0xFD9
  8117                           status	equ	0xFD8
  8118                           
  8119 ;; *************** function _PortTestA5 *****************
  8120 ;; Defined at:
  8121 ;;		line 27 in file "PortHigh.c"
  8122 ;; Parameters:    Size  Location     Type
  8123 ;;		None
  8124 ;; Auto vars:     Size  Location     Type
  8125 ;;		None
  8126 ;; Return value:  Size  Location     Type
  8127 ;;                  1    wreg      void 
  8128 ;; Registers used:
  8129 ;;		None
  8130 ;; Tracked objects:
  8131 ;;		On entry : 0/0
  8132 ;;		On exit  : 0/0
  8133 ;;		Unchanged: 0/0
  8134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8139 ;;Total ram usage:        0 bytes
  8140 ;; Hardware stack levels used:    1
  8141 ;; Hardware stack levels required when called:    7
  8142 ;; This function calls:
  8143 ;;		Nothing
  8144 ;; This function is called by:
  8145 ;;		_main
  8146 ;; This function uses a non-reentrant model
  8147 ;;
  8148                           
  8149                           	psect	text38
  8150  002852                     __ptext38:
  8151                           	opt stack 0
  8152  002852                     _PortTestA5:
  8153                           	opt stack 23
  8154  002852                     l200:
  8155  002852  A281               	btfss	3969,1,c	;volatile
  8156  002854  D7FE               	goto	l200
  8157                           
  8158                           ;PortHigh.c: 31: }
  8159                           ;PortHigh.c: 32: LATAbits.LATA5 = 1;
  8160  002856  8A89               	bsf	3977,5,c	;volatile
  8161  002858                     l203:
  8162  002858  B281               	btfsc	3969,1,c	;volatile
  8163  00285A  D7FE               	goto	l203
  8164                           
  8165                           ;PortHigh.c: 35: }
  8166                           ;PortHigh.c: 36: __nop();
  8167  00285C  F000               	nop	
  8168                           
  8169                           ;PortHigh.c: 37: __nop();
  8170  00285E  F000               	nop	
  8171                           
  8172                           ;PortHigh.c: 38: LATAbits.LATA5 = 0;
  8173  002860  9A89               	bcf	3977,5,c	;volatile
  8174  002862  0012               	return		;funcret
  8175  002864                     __end_of_PortTestA5:
  8176                           	opt stack 0
  8177                           tblptru	equ	0xFF8
  8178                           tblptrh	equ	0xFF7
  8179                           tblptrl	equ	0xFF6
  8180                           tablat	equ	0xFF5
  8181                           prodh	equ	0xFF4
  8182                           prodl	equ	0xFF3
  8183                           intcon	equ	0xFF2
  8184                           intcon3	equ	0xFF0
  8185                           indf0	equ	0xFEF
  8186                           postinc0	equ	0xFEE
  8187                           fsr0h	equ	0xFEA
  8188                           fsr0l	equ	0xFE9
  8189                           wreg	equ	0xFE8
  8190                           postdec1	equ	0xFE5
  8191                           fsr1l	equ	0xFE1
  8192                           indf2	equ	0xFDF
  8193                           postinc2	equ	0xFDE
  8194                           postdec2	equ	0xFDD
  8195                           fsr2h	equ	0xFDA
  8196                           fsr2l	equ	0xFD9
  8197                           status	equ	0xFD8
  8198                           
  8199 ;; *************** function _handler *****************
  8200 ;; Defined at:
  8201 ;;		line 492 in file "UI.c"
  8202 ;; Parameters:    Size  Location     Type
  8203 ;;		None
  8204 ;; Auto vars:     Size  Location     Type
  8205 ;;		None
  8206 ;; Return value:  Size  Location     Type
  8207 ;;                  1    wreg      void 
  8208 ;; Registers used:
  8209 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8210 ;; Tracked objects:
  8211 ;;		On entry : 0/0
  8212 ;;		On exit  : 0/0
  8213 ;;		Unchanged: 0/0
  8214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8217 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8218 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8219 ;;Total ram usage:       16 bytes
  8220 ;; Hardware stack levels used:    1
  8221 ;; Hardware stack levels required when called:    6
  8222 ;; This function calls:
  8223 ;;		_printSortTimer
  8224 ;;		_updateMenu
  8225 ;; This function is called by:
  8226 ;;		Interrupt level 2
  8227 ;; This function uses a non-reentrant model
  8228 ;;
  8229                           
  8230                           	psect	intcode
  8231  000008                     __pintcode:
  8232                           	opt stack 0
  8233  000008                     _handler:
  8234                           	opt stack 18
  8235                           
  8236                           ;incstack = 0
  8237  000008  8279               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8238  00000A  ED22  F00C         	call	int_func,f	;refresh shadow registers
  8239                           tblptru	equ	0xFF8
  8240                           tblptrh	equ	0xFF7
  8241                           tblptrl	equ	0xFF6
  8242                           tablat	equ	0xFF5
  8243                           prodh	equ	0xFF4
  8244                           prodl	equ	0xFF3
  8245                           intcon	equ	0xFF2
  8246                           intcon3	equ	0xFF0
  8247                           indf0	equ	0xFEF
  8248                           postinc0	equ	0xFEE
  8249                           fsr0h	equ	0xFEA
  8250                           fsr0l	equ	0xFE9
  8251                           wreg	equ	0xFE8
  8252                           postdec1	equ	0xFE5
  8253                           fsr1l	equ	0xFE1
  8254                           indf2	equ	0xFDF
  8255                           postinc2	equ	0xFDE
  8256                           postdec2	equ	0xFDD
  8257                           fsr2h	equ	0xFDA
  8258                           fsr2l	equ	0xFD9
  8259                           status	equ	0xFD8
  8260                           
  8261                           	psect	intcode_body
  8262  001844                     __pintcode_body:
  8263                           	opt stack 18
  8264  001844                     int_func:
  8265                           	opt stack 18
  8266  001844  0006               	pop		; remove dummy address from shadow register refresh
  8267  001846  CFFA F04D          	movff	pclath,??_handler+2
  8268  00184A  CFFB F04E          	movff	pclatu,??_handler+3
  8269  00184E  CFE9 F04F          	movff	fsr0l,??_handler+4
  8270  001852  CFEA F050          	movff	fsr0h,??_handler+5
  8271  001856  CFE1 F051          	movff	fsr1l,??_handler+6
  8272  00185A  CFE2 F052          	movff	fsr1h,??_handler+7
  8273  00185E  CFD9 F053          	movff	fsr2l,??_handler+8
  8274  001862  CFDA F054          	movff	fsr2h,??_handler+9
  8275  001866  CFF3 F055          	movff	prodl,??_handler+10
  8276  00186A  CFF4 F056          	movff	prodh,??_handler+11
  8277  00186E  CFF6 F057          	movff	tblptrl,??_handler+12
  8278  001872  CFF7 F058          	movff	tblptrh,??_handler+13
  8279  001876  CFF8 F059          	movff	tblptru,??_handler+14
  8280  00187A  CFF5 F05A          	movff	tablat,??_handler+15
  8281                           
  8282                           ;UI.c: 494: if(INT1IF){
  8283  00187E  A0F0               	btfss	intcon3,0,c	;volatile
  8284  001880  D018               	goto	i2l5311
  8285                           
  8286                           ;UI.c: 495: INT1IF = 0;
  8287  001882  90F0               	bcf	intcon3,0,c	;volatile
  8288                           
  8289                           ;UI.c: 496: if(machine_state == UI_state) {
  8290  001884  0100               	movlb	0	; () banked
  8291  001886  51F4               	movf	_machine_state& (0+255),w,b
  8292  001888  A4D8               	btfss	status,2,c
  8293  00188A  D013               	goto	i2l5311
  8294                           
  8295                           ; BSR set to: 0
  8296                           ;UI.c: 497: input = keys[(PORTB & 0xF0) >> 4];
  8297  00188C  3881               	swapf	3969,w,c	;volatile
  8298  00188E  0B0F               	andlw	15
  8299  001890  0B0F               	andlw	15
  8300  001892  6E4B               	movwf	??_handler& (0+255),c
  8301  001894  6A4C               	clrf	(??_handler+1)& (0+255),c
  8302  001896  0EB9               	movlw	low _keys
  8303  001898  244B               	addwf	??_handler,w,c
  8304  00189A  6EF6               	movwf	tblptrl,c
  8305  00189C  0EFD               	movlw	high _keys
  8306  00189E  204C               	addwfc	??_handler+1,w,c
  8307  0018A0  6EF7               	movwf	tblptrh,c
  8308  0018A2                     	if	1	;There are 3 active tblptr bytes
  8309  0018A2  6AF8               	clrf	tblptru,c
  8310  0018A4  0E00               	movlw	low (__mediumconst shr (0+16))
  8311  0018A6  22F8               	addwfc	tblptru,f,c
  8312  0018A8                     	endif
  8313  0018A8  0008               	tblrd		*
  8314  0018AA  CFF5 F078          	movff	tablat,_input
  8315                           
  8316                           ; BSR set to: 0
  8317                           ;UI.c: 498: updateMenu();
  8318  0018AE  ECB7  F007         	call	_updateMenu	;wreg free
  8319  0018B2                     i2l5311:
  8320                           
  8321                           ;UI.c: 499: }
  8322                           ;UI.c: 500: }
  8323                           ;UI.c: 503: if(TMR0IF){
  8324  0018B2  A4F2               	btfss	intcon,2,c	;volatile
  8325  0018B4  D010               	goto	i2l528
  8326                           
  8327                           ;UI.c: 504: TMR0IF = 0;
  8328  0018B6  94F2               	bcf	intcon,2,c	;volatile
  8329                           
  8330                           ;UI.c: 505: if(machine_state == Sorting_state){
  8331  0018B8  0100               	movlb	0	; () banked
  8332  0018BA  05F4               	decf	_machine_state& (0+255),w,b
  8333  0018BC  A4D8               	btfss	status,2,c
  8334  0018BE  D00B               	goto	i2l528
  8335                           
  8336                           ; BSR set to: 0
  8337                           ;UI.c: 506: printSortTimer();
  8338  0018C0  EC32  F00A         	call	_printSortTimer	;wreg free
  8339                           
  8340                           ;UI.c: 509: T0CON = 0b00010111;
  8341  0018C4  0E17               	movlw	23
  8342  0018C6  6ED5               	movwf	4053,c	;volatile
  8343                           
  8344                           ;UI.c: 510: TMR0H = 0b10000101;
  8345  0018C8  0E85               	movlw	133
  8346  0018CA  6ED7               	movwf	4055,c	;volatile
  8347                           
  8348                           ;UI.c: 511: TMR0L = 0b11101110;
  8349  0018CC  0EEE               	movlw	238
  8350  0018CE  6ED6               	movwf	4054,c	;volatile
  8351                           
  8352                           ;UI.c: 512: T0CON = T0CON | 0b10000000;
  8353  0018D0  50D5               	movf	4053,w,c	;volatile
  8354  0018D2  0980               	iorlw	128
  8355  0018D4  6ED5               	movwf	4053,c	;volatile
  8356  0018D6                     i2l528:
  8357  0018D6  C05A  FFF5         	movff	??_handler+15,tablat
  8358  0018DA  C059  FFF8         	movff	??_handler+14,tblptru
  8359  0018DE  C058  FFF7         	movff	??_handler+13,tblptrh
  8360  0018E2  C057  FFF6         	movff	??_handler+12,tblptrl
  8361  0018E6  C056  FFF4         	movff	??_handler+11,prodh
  8362  0018EA  C055  FFF3         	movff	??_handler+10,prodl
  8363  0018EE  C054  FFDA         	movff	??_handler+9,fsr2h
  8364  0018F2  C053  FFD9         	movff	??_handler+8,fsr2l
  8365  0018F6  C052  FFE2         	movff	??_handler+7,fsr1h
  8366  0018FA  C051  FFE1         	movff	??_handler+6,fsr1l
  8367  0018FE  C050  FFEA         	movff	??_handler+5,fsr0h
  8368  001902  C04F  FFE9         	movff	??_handler+4,fsr0l
  8369  001906  C04E  FFFB         	movff	??_handler+3,pclatu
  8370  00190A  C04D  FFFA         	movff	??_handler+2,pclath
  8371  00190E  9279               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8372  001910  0011               	retfie		f
  8373  001912                     __end_of_handler:
  8374                           	opt stack 0
  8375                           pclatu	equ	0xFFB
  8376                           pclath	equ	0xFFA
  8377                           tblptru	equ	0xFF8
  8378                           tblptrh	equ	0xFF7
  8379                           tblptrl	equ	0xFF6
  8380                           tablat	equ	0xFF5
  8381                           prodh	equ	0xFF4
  8382                           prodl	equ	0xFF3
  8383                           intcon	equ	0xFF2
  8384                           intcon3	equ	0xFF0
  8385                           indf0	equ	0xFEF
  8386                           postinc0	equ	0xFEE
  8387                           fsr0h	equ	0xFEA
  8388                           fsr0l	equ	0xFE9
  8389                           wreg	equ	0xFE8
  8390                           postdec1	equ	0xFE5
  8391                           fsr1h	equ	0xFE2
  8392                           fsr1l	equ	0xFE1
  8393                           indf2	equ	0xFDF
  8394                           postinc2	equ	0xFDE
  8395                           postdec2	equ	0xFDD
  8396                           fsr2h	equ	0xFDA
  8397                           fsr2l	equ	0xFD9
  8398                           status	equ	0xFD8
  8399                           
  8400 ;; *************** function _updateMenu *****************
  8401 ;; Defined at:
  8402 ;;		line 148 in file "UI.c"
  8403 ;; Parameters:    Size  Location     Type
  8404 ;;		None
  8405 ;; Auto vars:     Size  Location     Type
  8406 ;;		None
  8407 ;; Return value:  Size  Location     Type
  8408 ;;                  1    wreg      void 
  8409 ;; Registers used:
  8410 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8411 ;; Tracked objects:
  8412 ;;		On entry : 0/0
  8413 ;;		On exit  : 0/0
  8414 ;;		Unchanged: 0/0
  8415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8418 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8419 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8420 ;;Total ram usage:        2 bytes
  8421 ;; Hardware stack levels used:    1
  8422 ;; Hardware stack levels required when called:    5
  8423 ;; This function calls:
  8424 ;;		_change_state_to_logs_11
  8425 ;;		_change_state_to_logs_12
  8426 ;;		_change_state_to_logs_22
  8427 ;;		_change_state_to_logs_23
  8428 ;;		_change_state_to_logs_33
  8429 ;;		_change_state_to_logs_34
  8430 ;;		_change_state_to_menu_11
  8431 ;;		_change_state_to_menu_12
  8432 ;;		_change_state_to_menu_22
  8433 ;;		_change_state_to_menu_23
  8434 ;;		_dispLogs
  8435 ;;		_inputHandler
  8436 ;;		i2_change_state_to_menu_start
  8437 ;; This function is called by:
  8438 ;;		_handler
  8439 ;; This function uses a non-reentrant model
  8440 ;;
  8441                           
  8442                           	psect	text40
  8443  000F6E                     __ptext40:
  8444                           	opt stack 0
  8445  000F6E                     _updateMenu:
  8446                           	opt stack 18
  8447                           
  8448                           ;UI.c: 149: up = 0; down = 0; enter = 0; back = 0;
  8449                           
  8450                           ;incstack = 0
  8451  000F6E  0E00               	movlw	0
  8452  000F70  6E74               	movwf	_up+1,c
  8453  000F72  0E00               	movlw	0
  8454  000F74  6E73               	movwf	_up,c
  8455  000F76  0E00               	movlw	0
  8456  000F78  6E6A               	movwf	_down+1,c
  8457  000F7A  0E00               	movlw	0
  8458  000F7C  6E69               	movwf	_down,c
  8459  000F7E  0E00               	movlw	0
  8460  000F80  6E6C               	movwf	_enter+1,c
  8461  000F82  0E00               	movlw	0
  8462  000F84  6E6B               	movwf	_enter,c
  8463  000F86  0E00               	movlw	0
  8464  000F88  6E60               	movwf	_back+1,c
  8465  000F8A  0E00               	movlw	0
  8466  000F8C  6E5F               	movwf	_back,c
  8467                           
  8468                           ;UI.c: 150: (INTCONbits.GIE = 0);
  8469  000F8E  9EF2               	bcf	intcon,7,c	;volatile
  8470                           
  8471                           ;UI.c: 152: if (inputHandler()
  8472                           ;UI.c: 155: ){
  8473  000F90  EC2F  F00B         	call	_inputHandler	;wreg free
  8474  000F94  502A               	movf	?_inputHandler,w,c
  8475  000F96  102B               	iorwf	?_inputHandler+1,w,c
  8476  000F98  A4D8               	btfss	status,2,c
  8477  000F9A  D112               	goto	i2l5189
  8478  000F9C  D146               	goto	i2l368
  8479  000F9E                     i2l5041:
  8480                           
  8481                           ;UI.c: 159: change_state_to_menu_11();
  8482  000F9E  ECAF  F012         	call	_change_state_to_menu_11	;wreg free
  8483                           
  8484                           ;UI.c: 160: break;
  8485  000FA2  D143               	goto	i2l368
  8486  000FA4                     i2l5043:
  8487                           
  8488                           ;UI.c: 163: if(up){
  8489  000FA4  5073               	movf	_up,w,c
  8490  000FA6  1074               	iorwf	_up+1,w,c
  8491  000FA8  B4D8               	btfsc	status,2,c
  8492  000FAA  D003               	goto	i2l5047
  8493                           
  8494                           ;UI.c: 164: change_state_to_menu_23();
  8495  000FAC  EC67  F012         	call	_change_state_to_menu_23	;wreg free
  8496                           
  8497                           ;UI.c: 165: }
  8498  000FB0  D13C               	goto	i2l368
  8499  000FB2                     i2l5047:
  8500                           
  8501                           ;UI.c: 166: else if(down){
  8502  000FB2  5069               	movf	_down,w,c
  8503  000FB4  106A               	iorwf	_down+1,w,c
  8504  000FB6  B4D8               	btfsc	status,2,c
  8505  000FB8  D003               	goto	i2l5051
  8506                           
  8507                           ;UI.c: 167: change_state_to_menu_12();
  8508  000FBA  EC97  F012         	call	_change_state_to_menu_12	;wreg free
  8509                           
  8510                           ;UI.c: 168: }
  8511  000FBE  D135               	goto	i2l368
  8512  000FC0                     i2l5051:
  8513                           
  8514                           ;UI.c: 169: else if(enter){
  8515  000FC0  506B               	movf	_enter,w,c
  8516  000FC2  106C               	iorwf	_enter+1,w,c
  8517  000FC4  B4D8               	btfsc	status,2,c
  8518  000FC6  D131               	goto	i2l368
  8519                           
  8520                           ;UI.c: 170: change_state_to_menu_start();
  8521  000FC8  EC98  F013         	call	i2_change_state_to_menu_start	;wreg free
  8522                           
  8523                           ;UI.c: 171: }
  8524                           ;UI.c: 172: break;
  8525  000FCC  D12E               	goto	i2l368
  8526  000FCE                     i2l5055:
  8527                           
  8528                           ;UI.c: 175: if(up){
  8529  000FCE  5073               	movf	_up,w,c
  8530  000FD0  1074               	iorwf	_up+1,w,c
  8531  000FD2  B4D8               	btfsc	status,2,c
  8532  000FD4  D003               	goto	i2l5059
  8533                           
  8534                           ;UI.c: 176: change_state_to_menu_11();
  8535  000FD6  ECAF  F012         	call	_change_state_to_menu_11	;wreg free
  8536                           
  8537                           ;UI.c: 177: }
  8538  000FDA  D127               	goto	i2l368
  8539  000FDC                     i2l5059:
  8540                           
  8541                           ;UI.c: 178: else if(down){
  8542  000FDC  5069               	movf	_down,w,c
  8543  000FDE  106A               	iorwf	_down+1,w,c
  8544  000FE0  B4D8               	btfsc	status,2,c
  8545  000FE2  D011               	goto	i2l5075
  8546                           
  8547                           ;UI.c: 179: change_state_to_menu_23();
  8548  000FE4  EC67  F012         	call	_change_state_to_menu_23	;wreg free
  8549                           
  8550                           ;UI.c: 180: }
  8551  000FE8  D120               	goto	i2l368
  8552  000FEA                     i2l5067:
  8553                           
  8554                           ;UI.c: 187: if(up){
  8555  000FEA  5073               	movf	_up,w,c
  8556  000FEC  1074               	iorwf	_up+1,w,c
  8557  000FEE  B4D8               	btfsc	status,2,c
  8558  000FF0  D003               	goto	i2l5071
  8559                           
  8560                           ;UI.c: 188: change_state_to_menu_11();
  8561  000FF2  ECAF  F012         	call	_change_state_to_menu_11	;wreg free
  8562                           
  8563                           ;UI.c: 189: }
  8564  000FF6  D119               	goto	i2l368
  8565  000FF8                     i2l5071:
  8566                           
  8567                           ;UI.c: 190: else if(down){
  8568  000FF8  5069               	movf	_down,w,c
  8569  000FFA  106A               	iorwf	_down+1,w,c
  8570  000FFC  B4D8               	btfsc	status,2,c
  8571  000FFE  D003               	goto	i2l5075
  8572                           
  8573                           ;UI.c: 191: change_state_to_menu_23();
  8574  001000  EC67  F012         	call	_change_state_to_menu_23	;wreg free
  8575                           
  8576                           ;UI.c: 192: }
  8577  001004  D112               	goto	i2l368
  8578  001006                     i2l5075:
  8579                           
  8580                           ;UI.c: 193: else if(enter){
  8581  001006  506B               	movf	_enter,w,c
  8582  001008  106C               	iorwf	_enter+1,w,c
  8583  00100A  B4D8               	btfsc	status,2,c
  8584  00100C  D10E               	goto	i2l368
  8585                           
  8586                           ;UI.c: 194: machine_state = Sorting_state;
  8587  00100E  0E01               	movlw	1
  8588  001010  0100               	movlb	0	; () banked
  8589  001012  6FF4               	movwf	_machine_state& (0+255),b
  8590                           
  8591                           ; BSR set to: 0
  8592                           ;UI.c: 195: }
  8593                           ;UI.c: 196: break;
  8594                           
  8595                           ; BSR set to: 0
  8596                           
  8597                           ; BSR set to: 0
  8598  001014  D10A               	goto	i2l368
  8599  001016                     i2l5079:
  8600                           
  8601                           ;UI.c: 199: if(up){
  8602  001016  5073               	movf	_up,w,c
  8603  001018  1074               	iorwf	_up+1,w,c
  8604  00101A  B4D8               	btfsc	status,2,c
  8605  00101C  D003               	goto	i2l5083
  8606                           
  8607                           ;UI.c: 200: change_state_to_menu_22();
  8608  00101E  EC7F  F012         	call	_change_state_to_menu_22	;wreg free
  8609                           
  8610                           ;UI.c: 201: }
  8611  001022  D103               	goto	i2l368
  8612  001024                     i2l5083:
  8613                           
  8614                           ;UI.c: 202: else if(down){
  8615  001024  5069               	movf	_down,w,c
  8616  001026  106A               	iorwf	_down+1,w,c
  8617  001028  B4D8               	btfsc	status,2,c
  8618  00102A  D003               	goto	i2l5087
  8619                           
  8620                           ;UI.c: 203: change_state_to_menu_11();
  8621  00102C  ECAF  F012         	call	_change_state_to_menu_11	;wreg free
  8622                           
  8623                           ;UI.c: 204: }
  8624  001030  D0FC               	goto	i2l368
  8625  001032                     i2l5087:
  8626                           
  8627                           ;UI.c: 205: else if(enter){
  8628  001032  506B               	movf	_enter,w,c
  8629  001034  106C               	iorwf	_enter+1,w,c
  8630  001036  B4D8               	btfsc	status,2,c
  8631  001038  D0F8               	goto	i2l368
  8632                           
  8633                           ;UI.c: 206: change_state_to_logs_11();
  8634  00103A  EC27  F013         	call	_change_state_to_logs_11	;wreg free
  8635                           
  8636                           ;UI.c: 207: }
  8637                           ;UI.c: 208: break;
  8638  00103E  D0F5               	goto	i2l368
  8639  001040                     i2l5091:
  8640                           
  8641                           ;UI.c: 211: if(up){
  8642  001040  5073               	movf	_up,w,c
  8643  001042  1074               	iorwf	_up+1,w,c
  8644  001044  B4D8               	btfsc	status,2,c
  8645  001046  D003               	goto	i2l5095
  8646                           
  8647                           ;UI.c: 212: change_state_to_logs_34();
  8648  001048  ECC7  F012         	call	_change_state_to_logs_34	;wreg free
  8649                           
  8650                           ;UI.c: 213: }
  8651  00104C  D0EE               	goto	i2l368
  8652  00104E                     i2l5095:
  8653                           
  8654                           ;UI.c: 214: else if(down){
  8655  00104E  5069               	movf	_down,w,c
  8656  001050  106A               	iorwf	_down+1,w,c
  8657  001052  B4D8               	btfsc	status,2,c
  8658  001054  D003               	goto	i2l5099
  8659                           
  8660                           ;UI.c: 215: change_state_to_logs_12();
  8661  001056  EC0F  F013         	call	_change_state_to_logs_12	;wreg free
  8662                           
  8663                           ;UI.c: 216: }
  8664  00105A  D0E7               	goto	i2l368
  8665  00105C                     i2l5099:
  8666                           
  8667                           ;UI.c: 217: else if(enter){
  8668  00105C  506B               	movf	_enter,w,c
  8669  00105E  106C               	iorwf	_enter+1,w,c
  8670  001060  B4D8               	btfsc	status,2,c
  8671  001062  D007               	goto	i2l5103
  8672                           
  8673                           ;UI.c: 218: dispLogs(1);
  8674  001064  0E00               	movlw	0
  8675  001066  6E02               	movwf	dispLogs@myLog+1,c
  8676  001068  0E01               	movlw	1
  8677  00106A  6E01               	movwf	dispLogs@myLog,c
  8678  00106C  EC1F  F014         	call	_dispLogs	;wreg free
  8679                           
  8680                           ;UI.c: 219: }
  8681  001070  D0DC               	goto	i2l368
  8682  001072                     i2l5103:
  8683                           
  8684                           ;UI.c: 220: else if(back){
  8685  001072  505F               	movf	_back,w,c
  8686  001074  1060               	iorwf	_back+1,w,c
  8687  001076  B4D8               	btfsc	status,2,c
  8688  001078  D0D8               	goto	i2l368
  8689                           
  8690                           ;UI.c: 221: change_state_to_menu_23();
  8691  00107A  EC67  F012         	call	_change_state_to_menu_23	;wreg free
  8692                           
  8693                           ;UI.c: 222: }
  8694                           ;UI.c: 223: break;
  8695  00107E  D0D5               	goto	i2l368
  8696  001080                     i2l5107:
  8697                           
  8698                           ;UI.c: 226: if(up){
  8699  001080  5073               	movf	_up,w,c
  8700  001082  1074               	iorwf	_up+1,w,c
  8701  001084  B4D8               	btfsc	status,2,c
  8702  001086  D003               	goto	i2l5111
  8703                           
  8704                           ;UI.c: 227: change_state_to_logs_11();
  8705  001088  EC27  F013         	call	_change_state_to_logs_11	;wreg free
  8706                           
  8707                           ;UI.c: 228: }
  8708  00108C  D0CE               	goto	i2l368
  8709  00108E                     i2l5111:
  8710                           
  8711                           ;UI.c: 229: else if(down){
  8712  00108E  5069               	movf	_down,w,c
  8713  001090  106A               	iorwf	_down+1,w,c
  8714  001092  B4D8               	btfsc	status,2,c
  8715  001094  D003               	goto	i2l5115
  8716                           
  8717                           ;UI.c: 230: change_state_to_logs_23();
  8718  001096  EC56  F013         	call	_change_state_to_logs_23	;wreg free
  8719                           
  8720                           ;UI.c: 231: }
  8721  00109A  D0C7               	goto	i2l368
  8722  00109C                     i2l5115:
  8723                           
  8724                           ;UI.c: 232: else if(enter){
  8725  00109C  506B               	movf	_enter,w,c
  8726  00109E  106C               	iorwf	_enter+1,w,c
  8727  0010A0  B4D8               	btfsc	status,2,c
  8728  0010A2  D007               	goto	i2l5119
  8729                           
  8730                           ;UI.c: 233: dispLogs(2);
  8731  0010A4  0E00               	movlw	0
  8732  0010A6  6E02               	movwf	dispLogs@myLog+1,c
  8733  0010A8  0E02               	movlw	2
  8734  0010AA  6E01               	movwf	dispLogs@myLog,c
  8735  0010AC  EC1F  F014         	call	_dispLogs	;wreg free
  8736                           
  8737                           ;UI.c: 234: }
  8738  0010B0  D0BC               	goto	i2l368
  8739  0010B2                     i2l5119:
  8740                           
  8741                           ;UI.c: 235: else if(back){
  8742  0010B2  505F               	movf	_back,w,c
  8743  0010B4  1060               	iorwf	_back+1,w,c
  8744  0010B6  B4D8               	btfsc	status,2,c
  8745  0010B8  D0B8               	goto	i2l368
  8746                           
  8747                           ;UI.c: 236: change_state_to_menu_23();
  8748  0010BA  EC67  F012         	call	_change_state_to_menu_23	;wreg free
  8749                           
  8750                           ;UI.c: 237: }
  8751                           ;UI.c: 238: break;
  8752  0010BE  D0B5               	goto	i2l368
  8753  0010C0                     i2l5123:
  8754                           
  8755                           ;UI.c: 241: if(up){
  8756  0010C0  5073               	movf	_up,w,c
  8757  0010C2  1074               	iorwf	_up+1,w,c
  8758  0010C4  B4D8               	btfsc	status,2,c
  8759  0010C6  D003               	goto	i2l5127
  8760                           
  8761                           ;UI.c: 242: change_state_to_logs_11();
  8762  0010C8  EC27  F013         	call	_change_state_to_logs_11	;wreg free
  8763                           
  8764                           ;UI.c: 243: }
  8765  0010CC  D0AE               	goto	i2l368
  8766  0010CE                     i2l5127:
  8767                           
  8768                           ;UI.c: 244: else if(down){
  8769  0010CE  5069               	movf	_down,w,c
  8770  0010D0  106A               	iorwf	_down+1,w,c
  8771  0010D2  B4D8               	btfsc	status,2,c
  8772  0010D4  D003               	goto	i2l5131
  8773                           
  8774                           ;UI.c: 245: change_state_to_logs_23();
  8775  0010D6  EC56  F013         	call	_change_state_to_logs_23	;wreg free
  8776                           
  8777                           ;UI.c: 246: }
  8778  0010DA  D0A7               	goto	i2l368
  8779  0010DC                     i2l5131:
  8780                           
  8781                           ;UI.c: 247: else if(enter){
  8782  0010DC  506B               	movf	_enter,w,c
  8783  0010DE  106C               	iorwf	_enter+1,w,c
  8784  0010E0  B4D8               	btfsc	status,2,c
  8785  0010E2  D007               	goto	i2l5135
  8786                           
  8787                           ;UI.c: 248: dispLogs(2);
  8788  0010E4  0E00               	movlw	0
  8789  0010E6  6E02               	movwf	dispLogs@myLog+1,c
  8790  0010E8  0E02               	movlw	2
  8791  0010EA  6E01               	movwf	dispLogs@myLog,c
  8792  0010EC  EC1F  F014         	call	_dispLogs	;wreg free
  8793                           
  8794                           ;UI.c: 249: }
  8795  0010F0  D09C               	goto	i2l368
  8796  0010F2                     i2l5135:
  8797                           
  8798                           ;UI.c: 250: else if(back){
  8799  0010F2  505F               	movf	_back,w,c
  8800  0010F4  1060               	iorwf	_back+1,w,c
  8801  0010F6  B4D8               	btfsc	status,2,c
  8802  0010F8  D098               	goto	i2l368
  8803                           
  8804                           ;UI.c: 251: change_state_to_menu_23();
  8805  0010FA  EC67  F012         	call	_change_state_to_menu_23	;wreg free
  8806                           
  8807                           ;UI.c: 252: }
  8808                           ;UI.c: 253: break;
  8809  0010FE  D095               	goto	i2l368
  8810  001100                     i2l5139:
  8811                           
  8812                           ;UI.c: 256: if(up){
  8813  001100  5073               	movf	_up,w,c
  8814  001102  1074               	iorwf	_up+1,w,c
  8815  001104  B4D8               	btfsc	status,2,c
  8816  001106  D003               	goto	i2l5143
  8817                           
  8818                           ;UI.c: 257: change_state_to_logs_22();
  8819  001108  ECF7  F012         	call	_change_state_to_logs_22	;wreg free
  8820                           
  8821                           ;UI.c: 258: }
  8822  00110C  D08E               	goto	i2l368
  8823  00110E                     i2l5143:
  8824                           
  8825                           ;UI.c: 259: else if(down){
  8826  00110E  5069               	movf	_down,w,c
  8827  001110  106A               	iorwf	_down+1,w,c
  8828  001112  B4D8               	btfsc	status,2,c
  8829  001114  D003               	goto	i2l5147
  8830                           
  8831                           ;UI.c: 260: change_state_to_logs_34();
  8832  001116  ECC7  F012         	call	_change_state_to_logs_34	;wreg free
  8833                           
  8834                           ;UI.c: 261: }
  8835  00111A  D087               	goto	i2l368
  8836  00111C                     i2l5147:
  8837                           
  8838                           ;UI.c: 262: else if(enter){
  8839  00111C  506B               	movf	_enter,w,c
  8840  00111E  106C               	iorwf	_enter+1,w,c
  8841  001120  B4D8               	btfsc	status,2,c
  8842  001122  D007               	goto	i2l5151
  8843                           
  8844                           ;UI.c: 263: dispLogs(3);
  8845  001124  0E00               	movlw	0
  8846  001126  6E02               	movwf	dispLogs@myLog+1,c
  8847  001128  0E03               	movlw	3
  8848  00112A  6E01               	movwf	dispLogs@myLog,c
  8849  00112C  EC1F  F014         	call	_dispLogs	;wreg free
  8850                           
  8851                           ;UI.c: 264: }
  8852  001130  D07C               	goto	i2l368
  8853  001132                     i2l5151:
  8854                           
  8855                           ;UI.c: 265: else if(back){
  8856  001132  505F               	movf	_back,w,c
  8857  001134  1060               	iorwf	_back+1,w,c
  8858  001136  B4D8               	btfsc	status,2,c
  8859  001138  D078               	goto	i2l368
  8860                           
  8861                           ;UI.c: 266: change_state_to_menu_23();
  8862  00113A  EC67  F012         	call	_change_state_to_menu_23	;wreg free
  8863                           
  8864                           ;UI.c: 267: }
  8865                           ;UI.c: 268: break;
  8866  00113E  D075               	goto	i2l368
  8867  001140                     i2l5155:
  8868                           
  8869                           ;UI.c: 271: if(up){
  8870  001140  5073               	movf	_up,w,c
  8871  001142  1074               	iorwf	_up+1,w,c
  8872  001144  B4D8               	btfsc	status,2,c
  8873  001146  D003               	goto	i2l5159
  8874                           
  8875                           ;UI.c: 272: change_state_to_logs_22();
  8876  001148  ECF7  F012         	call	_change_state_to_logs_22	;wreg free
  8877                           
  8878                           ;UI.c: 273: }
  8879  00114C  D06E               	goto	i2l368
  8880  00114E                     i2l5159:
  8881                           
  8882                           ;UI.c: 274: else if(down){
  8883  00114E  5069               	movf	_down,w,c
  8884  001150  106A               	iorwf	_down+1,w,c
  8885  001152  B4D8               	btfsc	status,2,c
  8886  001154  D003               	goto	i2l5163
  8887                           
  8888                           ;UI.c: 275: change_state_to_logs_34();
  8889  001156  ECC7  F012         	call	_change_state_to_logs_34	;wreg free
  8890                           
  8891                           ;UI.c: 276: }
  8892  00115A  D067               	goto	i2l368
  8893  00115C                     i2l5163:
  8894                           
  8895                           ;UI.c: 277: else if(enter){
  8896  00115C  506B               	movf	_enter,w,c
  8897  00115E  106C               	iorwf	_enter+1,w,c
  8898  001160  B4D8               	btfsc	status,2,c
  8899  001162  D007               	goto	i2l5167
  8900                           
  8901                           ;UI.c: 278: dispLogs(3);
  8902  001164  0E00               	movlw	0
  8903  001166  6E02               	movwf	dispLogs@myLog+1,c
  8904  001168  0E03               	movlw	3
  8905  00116A  6E01               	movwf	dispLogs@myLog,c
  8906  00116C  EC1F  F014         	call	_dispLogs	;wreg free
  8907                           
  8908                           ;UI.c: 279: }
  8909  001170  D05C               	goto	i2l368
  8910  001172                     i2l5167:
  8911                           
  8912                           ;UI.c: 280: else if(back){
  8913  001172  505F               	movf	_back,w,c
  8914  001174  1060               	iorwf	_back+1,w,c
  8915  001176  B4D8               	btfsc	status,2,c
  8916  001178  D058               	goto	i2l368
  8917                           
  8918                           ;UI.c: 281: change_state_to_menu_23();
  8919  00117A  EC67  F012         	call	_change_state_to_menu_23	;wreg free
  8920                           
  8921                           ;UI.c: 282: }
  8922                           ;UI.c: 283: break;
  8923  00117E  D055               	goto	i2l368
  8924  001180                     i2l5171:
  8925                           
  8926                           ;UI.c: 286: if(up){
  8927  001180  5073               	movf	_up,w,c
  8928  001182  1074               	iorwf	_up+1,w,c
  8929  001184  B4D8               	btfsc	status,2,c
  8930  001186  D003               	goto	i2l5175
  8931                           
  8932                           ;UI.c: 287: change_state_to_logs_33();
  8933  001188  ECDF  F012         	call	_change_state_to_logs_33	;wreg free
  8934                           
  8935                           ;UI.c: 288: }
  8936  00118C  D04E               	goto	i2l368
  8937  00118E                     i2l5175:
  8938                           
  8939                           ;UI.c: 289: else if(down){
  8940  00118E  5069               	movf	_down,w,c
  8941  001190  106A               	iorwf	_down+1,w,c
  8942  001192  B4D8               	btfsc	status,2,c
  8943  001194  D003               	goto	i2l5179
  8944                           
  8945                           ;UI.c: 290: change_state_to_logs_11();
  8946  001196  EC27  F013         	call	_change_state_to_logs_11	;wreg free
  8947                           
  8948                           ;UI.c: 291: }
  8949  00119A  D047               	goto	i2l368
  8950  00119C                     i2l5179:
  8951                           
  8952                           ;UI.c: 292: else if(enter){
  8953  00119C  506B               	movf	_enter,w,c
  8954  00119E  106C               	iorwf	_enter+1,w,c
  8955  0011A0  B4D8               	btfsc	status,2,c
  8956  0011A2  D007               	goto	i2l5183
  8957                           
  8958                           ;UI.c: 293: dispLogs(4);
  8959  0011A4  0E00               	movlw	0
  8960  0011A6  6E02               	movwf	dispLogs@myLog+1,c
  8961  0011A8  0E04               	movlw	4
  8962  0011AA  6E01               	movwf	dispLogs@myLog,c
  8963  0011AC  EC1F  F014         	call	_dispLogs	;wreg free
  8964                           
  8965                           ;UI.c: 294: }
  8966  0011B0  D03C               	goto	i2l368
  8967  0011B2                     i2l5183:
  8968                           
  8969                           ;UI.c: 295: else if(back){
  8970  0011B2  505F               	movf	_back,w,c
  8971  0011B4  1060               	iorwf	_back+1,w,c
  8972  0011B6  B4D8               	btfsc	status,2,c
  8973  0011B8  D038               	goto	i2l368
  8974                           
  8975                           ;UI.c: 296: change_state_to_menu_23();
  8976  0011BA  EC67  F012         	call	_change_state_to_menu_23	;wreg free
  8977                           
  8978                           ;UI.c: 302: }
  8979                           
  8980                           ;UI.c: 301: break;
  8981                           
  8982                           ;UI.c: 300: default:
  8983                           
  8984                           ;UI.c: 297: }
  8985                           ;UI.c: 298: break;
  8986  0011BE  D035               	goto	i2l368
  8987  0011C0                     i2l5189:
  8988  0011C0  C0E1  F043         	movff	_cur_state,??_updateMenu
  8989  0011C4  C0E2  F044         	movff	_cur_state+1,??_updateMenu+1
  8990                           
  8991                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
  8992                           ; Switch size 1, requested type "space"
  8993                           ; Number of cases is 3, Range of values is 0 to 4
  8994                           ; switch strategies available:
  8995                           ; Name         Instructions Cycles
  8996                           ; simple_byte           10     6 (average)
  8997                           ;	Chosen strategy is simple_byte
  8998  0011C8  5044               	movf	??_updateMenu+1,w,c
  8999  0011CA  0A00               	xorlw	0	; case 0
  9000  0011CC  B4D8               	btfsc	status,2,c
  9001  0011CE  D007               	goto	i2l5493
  9002  0011D0  0A03               	xorlw	3	; case 3
  9003  0011D2  B4D8               	btfsc	status,2,c
  9004  0011D4  D015               	goto	i2l5495
  9005  0011D6  0A07               	xorlw	7	; case 4
  9006  0011D8  B4D8               	btfsc	status,2,c
  9007  0011DA  D020               	goto	i2l5497
  9008  0011DC  D026               	goto	i2l368
  9009  0011DE                     i2l5493:
  9010                           
  9011                           ; Switch size 1, requested type "space"
  9012                           ; Number of cases is 5, Range of values is 0 to 23
  9013                           ; switch strategies available:
  9014                           ; Name         Instructions Cycles
  9015                           ; simple_byte           16     9 (average)
  9016                           ;	Chosen strategy is simple_byte
  9017  0011DE  5043               	movf	??_updateMenu,w,c
  9018  0011E0  0A00               	xorlw	0	; case 0
  9019  0011E2  B4D8               	btfsc	status,2,c
  9020  0011E4  D6DC               	goto	i2l5041
  9021  0011E6  0A0B               	xorlw	11	; case 11
  9022  0011E8  B4D8               	btfsc	status,2,c
  9023  0011EA  D6DC               	goto	i2l5043
  9024  0011EC  0A07               	xorlw	7	; case 12
  9025  0011EE  B4D8               	btfsc	status,2,c
  9026  0011F0  D6EE               	goto	i2l5055
  9027  0011F2  0A1A               	xorlw	26	; case 22
  9028  0011F4  B4D8               	btfsc	status,2,c
  9029  0011F6  D6F9               	goto	i2l5067
  9030  0011F8  0A01               	xorlw	1	; case 23
  9031  0011FA  B4D8               	btfsc	status,2,c
  9032  0011FC  D70C               	goto	i2l5079
  9033  0011FE  D015               	goto	i2l368
  9034  001200                     i2l5495:
  9035                           
  9036                           ; Switch size 1, requested type "space"
  9037                           ; Number of cases is 4, Range of values is 243 to 255
  9038                           ; switch strategies available:
  9039                           ; Name         Instructions Cycles
  9040                           ; simple_byte           13     7 (average)
  9041                           ;	Chosen strategy is simple_byte
  9042  001200  5043               	movf	??_updateMenu,w,c
  9043  001202  0AF3               	xorlw	243	; case 243
  9044  001204  B4D8               	btfsc	status,2,c
  9045  001206  D71C               	goto	i2l5091
  9046  001208  0A07               	xorlw	7	; case 244
  9047  00120A  B4D8               	btfsc	status,2,c
  9048  00120C  D739               	goto	i2l5107
  9049  00120E  0A0A               	xorlw	10	; case 254
  9050  001210  B4D8               	btfsc	status,2,c
  9051  001212  D756               	goto	i2l5123
  9052  001214  0A01               	xorlw	1	; case 255
  9053  001216  B4D8               	btfsc	status,2,c
  9054  001218  D773               	goto	i2l5139
  9055  00121A  D007               	goto	i2l368
  9056  00121C                     i2l5497:
  9057                           
  9058                           ; Switch size 1, requested type "space"
  9059                           ; Number of cases is 2, Range of values is 9 to 10
  9060                           ; switch strategies available:
  9061                           ; Name         Instructions Cycles
  9062                           ; simple_byte            7     4 (average)
  9063                           ;	Chosen strategy is simple_byte
  9064  00121C  5043               	movf	??_updateMenu,w,c
  9065  00121E  0A09               	xorlw	9	; case 9
  9066  001220  B4D8               	btfsc	status,2,c
  9067  001222  D78E               	goto	i2l5155
  9068  001224  0A03               	xorlw	3	; case 10
  9069  001226  B4D8               	btfsc	status,2,c
  9070  001228  D7AB               	goto	i2l5171
  9071  00122A                     i2l368:
  9072                           
  9073                           ;UI.c: 303: }
  9074                           ;UI.c: 304: (INTCONbits.GIE = 1);
  9075  00122A  8EF2               	bsf	intcon,7,c	;volatile
  9076  00122C  0012               	return		;funcret
  9077  00122E                     __end_of_updateMenu:
  9078                           	opt stack 0
  9079                           pclatu	equ	0xFFB
  9080                           pclath	equ	0xFFA
  9081                           tblptru	equ	0xFF8
  9082                           tblptrh	equ	0xFF7
  9083                           tblptrl	equ	0xFF6
  9084                           tablat	equ	0xFF5
  9085                           prodh	equ	0xFF4
  9086                           prodl	equ	0xFF3
  9087                           intcon	equ	0xFF2
  9088                           intcon3	equ	0xFF0
  9089                           indf0	equ	0xFEF
  9090                           postinc0	equ	0xFEE
  9091                           fsr0h	equ	0xFEA
  9092                           fsr0l	equ	0xFE9
  9093                           wreg	equ	0xFE8
  9094                           postdec1	equ	0xFE5
  9095                           fsr1h	equ	0xFE2
  9096                           fsr1l	equ	0xFE1
  9097                           indf2	equ	0xFDF
  9098                           postinc2	equ	0xFDE
  9099                           postdec2	equ	0xFDD
  9100                           fsr2h	equ	0xFDA
  9101                           fsr2l	equ	0xFD9
  9102                           status	equ	0xFD8
  9103                           
  9104 ;; *************** function i2_change_state_to_menu_start *****************
  9105 ;; Defined at:
  9106 ;;		line 408 in file "UI.c"
  9107 ;; Parameters:    Size  Location     Type
  9108 ;;		None
  9109 ;; Auto vars:     Size  Location     Type
  9110 ;;		None
  9111 ;; Return value:  Size  Location     Type
  9112 ;;                  1    wreg      void 
  9113 ;; Registers used:
  9114 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9115 ;; Tracked objects:
  9116 ;;		On entry : 0/0
  9117 ;;		On exit  : 0/0
  9118 ;;		Unchanged: 0/0
  9119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9124 ;;Total ram usage:        0 bytes
  9125 ;; Hardware stack levels used:    1
  9126 ;; Hardware stack levels required when called:    4
  9127 ;; This function calls:
  9128 ;;		i2_lcdInst
  9129 ;;		i2_printRTC
  9130 ;;		i2_printf
  9131 ;; This function is called by:
  9132 ;;		_updateMenu
  9133 ;; This function uses a non-reentrant model
  9134 ;;
  9135                           
  9136                           	psect	text41
  9137  002730                     __ptext41:
  9138                           	opt stack 0
  9139  002730                     i2_change_state_to_menu_start:
  9140                           	opt stack 18
  9141                           
  9142                           ;UI.c: 409: cur_state = 0;
  9143                           
  9144                           ;incstack = 0
  9145  002730  0E00               	movlw	0
  9146  002732  0100               	movlb	0	; () banked
  9147  002734  6FE2               	movwf	(_cur_state+1)& (0+255),b
  9148  002736  0E00               	movlw	0
  9149  002738  6FE1               	movwf	_cur_state& (0+255),b
  9150                           
  9151                           ; BSR set to: 0
  9152                           ;UI.c: 411: lcdInst(0b10000000);;
  9153  00273A  0E80               	movlw	128
  9154  00273C  EC51  F014         	call	i2_lcdInst
  9155                           
  9156                           ;UI.c: 412: printRTC();
  9157  002740  EC17  F009         	call	i2_printRTC	;wreg free
  9158                           
  9159                           ;UI.c: 413: lcdInst(0b11000000);;
  9160  002744  0EC0               	movlw	192
  9161  002746  EC51  F014         	call	i2_lcdInst
  9162                           
  9163                           ;UI.c: 414: printf("PUSH TO CONTINUE");
  9164  00274A  0E8A               	movlw	low STR_15
  9165  00274C  6E0D               	movwf	i2printf@f,c
  9166  00274E  0EFF               	movlw	high STR_15
  9167  002750  6E0E               	movwf	i2printf@f+1,c
  9168  002752  ECAF  F004         	call	i2_printf	;wreg free
  9169  002756  0012               	return		;funcret
  9170  002758                     __end_ofi2_change_state_to_menu_start:
  9171                           	opt stack 0
  9172                           pclatu	equ	0xFFB
  9173                           pclath	equ	0xFFA
  9174                           tblptru	equ	0xFF8
  9175                           tblptrh	equ	0xFF7
  9176                           tblptrl	equ	0xFF6
  9177                           tablat	equ	0xFF5
  9178                           prodh	equ	0xFF4
  9179                           prodl	equ	0xFF3
  9180                           intcon	equ	0xFF2
  9181                           intcon3	equ	0xFF0
  9182                           indf0	equ	0xFEF
  9183                           postinc0	equ	0xFEE
  9184                           fsr0h	equ	0xFEA
  9185                           fsr0l	equ	0xFE9
  9186                           wreg	equ	0xFE8
  9187                           postdec1	equ	0xFE5
  9188                           fsr1h	equ	0xFE2
  9189                           fsr1l	equ	0xFE1
  9190                           indf2	equ	0xFDF
  9191                           postinc2	equ	0xFDE
  9192                           postdec2	equ	0xFDD
  9193                           fsr2h	equ	0xFDA
  9194                           fsr2l	equ	0xFD9
  9195                           status	equ	0xFD8
  9196                           
  9197 ;; *************** function i2_printRTC *****************
  9198 ;; Defined at:
  9199 ;;		line 61 in file "RTC.c"
  9200 ;; Parameters:    Size  Location     Type
  9201 ;;		None
  9202 ;; Auto vars:     Size  Location     Type
  9203 ;;  printRTC       14   44[COMRAM] int [7]
  9204 ;;  printRTC        4   60[COMRAM] unsigned char [4]
  9205 ;;  printRTC        2   64[COMRAM] int 
  9206 ;;  printRTC        2   58[COMRAM] int 
  9207 ;; Return value:  Size  Location     Type
  9208 ;;                  1    wreg      void 
  9209 ;; Registers used:
  9210 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9211 ;; Tracked objects:
  9212 ;;		On entry : 0/0
  9213 ;;		On exit  : 0/0
  9214 ;;		Unchanged: 0/0
  9215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9217 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9218 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9219 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9220 ;;Total ram usage:       25 bytes
  9221 ;; Hardware stack levels used:    1
  9222 ;; Hardware stack levels required when called:    3
  9223 ;; This function calls:
  9224 ;;		i2_getRTC
  9225 ;;		i2_lcdInst
  9226 ;;		i2_printf
  9227 ;;		i2_strcpy
  9228 ;; This function is called by:
  9229 ;;		i2_change_state_to_menu_start
  9230 ;; This function uses a non-reentrant model
  9231 ;;
  9232                           
  9233                           	psect	text42
  9234  00122E                     __ptext42:
  9235                           	opt stack 0
  9236  00122E                     i2_printRTC:
  9237                           	opt stack 18
  9238                           
  9239                           ;RTC.c: 62: getRTC();
  9240                           
  9241                           ;incstack = 0
  9242  00122E  EC32  F010         	call	i2_getRTC	;wreg free
  9243                           
  9244                           ;RTC.c: 63: char month[] = "MMM";
  9245  001232  C0F5  F03D         	movff	printRTC@F3177,i2printRTC@month
  9246  001236  C0F6  F03E         	movff	printRTC@F3177+1,i2printRTC@month+1
  9247  00123A  C0F7  F03F         	movff	printRTC@F3177+2,i2printRTC@month+2
  9248  00123E  C0F8  F040         	movff	printRTC@F3177+3,i2printRTC@month+3
  9249                           
  9250                           ;RTC.c: 64: int INT_time[7];
  9251                           ;RTC.c: 65: for(int i = 0; i < 7; i++){
  9252  001242  0E00               	movlw	0
  9253  001244  6E42               	movwf	i2printRTC@i+1,c
  9254  001246  0E00               	movlw	0
  9255  001248  6E41               	movwf	i2printRTC@i,c
  9256  00124A  BE42               	btfsc	i2printRTC@i+1,7,c
  9257  00124C  D006               	goto	i2l4377
  9258  00124E  5042               	movf	i2printRTC@i+1,w,c
  9259  001250  E135               	bnz	i2l820
  9260  001252  0E07               	movlw	7
  9261  001254  5C41               	subwf	i2printRTC@i,w,c
  9262  001256  B0D8               	btfsc	status,0,c
  9263  001258  D031               	goto	i2l820
  9264  00125A                     i2l4377:
  9265                           
  9266                           ;RTC.c: 66: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  9267  00125A  0ED4               	movlw	low _time
  9268  00125C  2441               	addwf	i2printRTC@i,w,c
  9269  00125E  6ED9               	movwf	fsr2l,c
  9270  001260  0E00               	movlw	high _time
  9271  001262  2042               	addwfc	i2printRTC@i+1,w,c
  9272  001264  6EDA               	movwf	fsr2h,c
  9273  001266  50DF               	movf	indf2,w,c
  9274  001268  6E2A               	movwf	??i2_printRTC& (0+255),c
  9275  00126A  3A2A               	swapf	??i2_printRTC,f,c
  9276  00126C  0E0F               	movlw	15
  9277  00126E  162A               	andwf	??i2_printRTC,f,c
  9278  001270  0E0F               	movlw	15
  9279  001272  162A               	andwf	??i2_printRTC,f,c
  9280  001274  502A               	movf	??i2_printRTC,w,c
  9281  001276  0D0A               	mullw	10
  9282  001278  0ED4               	movlw	low _time
  9283  00127A  2441               	addwf	i2printRTC@i,w,c
  9284  00127C  6ED9               	movwf	fsr2l,c
  9285  00127E  0E00               	movlw	high _time
  9286  001280  2042               	addwfc	i2printRTC@i+1,w,c
  9287  001282  6EDA               	movwf	fsr2h,c
  9288  001284  50DF               	movf	indf2,w,c
  9289  001286  0B0F               	andlw	15
  9290  001288  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
  9291  00128A  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
  9292  00128C  50F3               	movf	prodl,w,c
  9293  00128E  262B               	addwf	??i2_printRTC+1,f,c
  9294  001290  50F4               	movf	prodh,w,c
  9295  001292  222C               	addwfc	??i2_printRTC+2,f,c
  9296  001294  90D8               	bcf	status,0,c
  9297  001296  3441               	rlcf	i2printRTC@i,w,c
  9298  001298  6ED9               	movwf	fsr2l,c
  9299  00129A  3442               	rlcf	i2printRTC@i+1,w,c
  9300  00129C  6EDA               	movwf	fsr2h,c
  9301  00129E  0E2D               	movlw	low i2printRTC@INT_time
  9302  0012A0  26D9               	addwf	fsr2l,f,c
  9303  0012A2  0E00               	movlw	high i2printRTC@INT_time
  9304  0012A4  22DA               	addwfc	fsr2h,f,c
  9305  0012A6  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
  9306  0012AA  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
  9307  0012AE  4A41               	infsnz	i2printRTC@i,f,c
  9308  0012B0  2A42               	incf	i2printRTC@i+1,f,c
  9309  0012B2  BE42               	btfsc	i2printRTC@i+1,7,c
  9310  0012B4  D7D2               	goto	i2l4377
  9311  0012B6  5042               	movf	i2printRTC@i+1,w,c
  9312  0012B8  E101               	bnz	i2u321_40
  9313  0012BA  D7CB               	goto	L2
  9314  0012BC                     i2u321_40:
  9315  0012BC                     i2l820:
  9316                           
  9317                           ;RTC.c: 67: }
  9318                           ;RTC.c: 68: int RTC_month = INT_time[5];
  9319  0012BC  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
  9320  0012C0  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
  9321                           
  9322                           ;RTC.c: 69: switch(RTC_month){
  9323  0012C4  D084               	goto	i2l4409
  9324  0012C6                     i2l4383:
  9325                           
  9326                           ;RTC.c: 71: strcpy(month, "Jan");
  9327  0012C6  0E3D               	movlw	low i2printRTC@month
  9328  0012C8  6E01               	movwf	i2strcpy@to,c
  9329  0012CA  0E00               	movlw	high i2printRTC@month
  9330  0012CC  6E02               	movwf	i2strcpy@to+1,c
  9331  0012CE  0EDC               	movlw	low STR_36
  9332  0012D0  6E03               	movwf	i2strcpy@from,c
  9333  0012D2  0EFF               	movlw	high STR_36
  9334  0012D4  6E04               	movwf	i2strcpy@from+1,c
  9335  0012D6  EC36  F012         	call	i2_strcpy	;wreg free
  9336                           
  9337                           ;RTC.c: 72: break;
  9338  0012DA  D0A6               	goto	i2l4411
  9339  0012DC                     i2l4385:
  9340                           
  9341                           ;RTC.c: 74: strcpy(month, "Feb");
  9342  0012DC  0E3D               	movlw	low i2printRTC@month
  9343  0012DE  6E01               	movwf	i2strcpy@to,c
  9344  0012E0  0E00               	movlw	high i2printRTC@month
  9345  0012E2  6E02               	movwf	i2strcpy@to+1,c
  9346  0012E4  0ECC               	movlw	low STR_37
  9347  0012E6  6E03               	movwf	i2strcpy@from,c
  9348  0012E8  0EFF               	movlw	high STR_37
  9349  0012EA  6E04               	movwf	i2strcpy@from+1,c
  9350  0012EC  EC36  F012         	call	i2_strcpy	;wreg free
  9351                           
  9352                           ;RTC.c: 75: break;
  9353  0012F0  D09B               	goto	i2l4411
  9354  0012F2                     i2l4387:
  9355                           
  9356                           ;RTC.c: 77: strcpy(month, "Mar");
  9357  0012F2  0E3D               	movlw	low i2printRTC@month
  9358  0012F4  6E01               	movwf	i2strcpy@to,c
  9359  0012F6  0E00               	movlw	high i2printRTC@month
  9360  0012F8  6E02               	movwf	i2strcpy@to+1,c
  9361  0012FA  0EE8               	movlw	low STR_38
  9362  0012FC  6E03               	movwf	i2strcpy@from,c
  9363  0012FE  0EFF               	movlw	high STR_38
  9364  001300  6E04               	movwf	i2strcpy@from+1,c
  9365  001302  EC36  F012         	call	i2_strcpy	;wreg free
  9366                           
  9367                           ;RTC.c: 78: break;
  9368  001306  D090               	goto	i2l4411
  9369  001308                     i2l4389:
  9370                           
  9371                           ;RTC.c: 80: strcpy(month, "Apr");
  9372  001308  0E3D               	movlw	low i2printRTC@month
  9373  00130A  6E01               	movwf	i2strcpy@to,c
  9374  00130C  0E00               	movlw	high i2printRTC@month
  9375  00130E  6E02               	movwf	i2strcpy@to+1,c
  9376  001310  0EEC               	movlw	low STR_39
  9377  001312  6E03               	movwf	i2strcpy@from,c
  9378  001314  0EFF               	movlw	high STR_39
  9379  001316  6E04               	movwf	i2strcpy@from+1,c
  9380  001318  EC36  F012         	call	i2_strcpy	;wreg free
  9381                           
  9382                           ;RTC.c: 81: break;
  9383  00131C  D085               	goto	i2l4411
  9384  00131E                     i2l4391:
  9385                           
  9386                           ;RTC.c: 83: strcpy(month, "May");
  9387  00131E  0E3D               	movlw	low i2printRTC@month
  9388  001320  6E01               	movwf	i2strcpy@to,c
  9389  001322  0E00               	movlw	high i2printRTC@month
  9390  001324  6E02               	movwf	i2strcpy@to+1,c
  9391  001326  0EF8               	movlw	low STR_40
  9392  001328  6E03               	movwf	i2strcpy@from,c
  9393  00132A  0EFF               	movlw	high STR_40
  9394  00132C  6E04               	movwf	i2strcpy@from+1,c
  9395  00132E  EC36  F012         	call	i2_strcpy	;wreg free
  9396                           
  9397                           ;RTC.c: 84: break;
  9398  001332  D07A               	goto	i2l4411
  9399  001334                     i2l4393:
  9400                           
  9401                           ;RTC.c: 86: strcpy(month, "Jun");
  9402  001334  0E3D               	movlw	low i2printRTC@month
  9403  001336  6E01               	movwf	i2strcpy@to,c
  9404  001338  0E00               	movlw	high i2printRTC@month
  9405  00133A  6E02               	movwf	i2strcpy@to+1,c
  9406  00133C  0EE0               	movlw	low STR_41
  9407  00133E  6E03               	movwf	i2strcpy@from,c
  9408  001340  0EFF               	movlw	high STR_41
  9409  001342  6E04               	movwf	i2strcpy@from+1,c
  9410  001344  EC36  F012         	call	i2_strcpy	;wreg free
  9411                           
  9412                           ;RTC.c: 87: break;
  9413  001348  D06F               	goto	i2l4411
  9414  00134A                     i2l4395:
  9415                           
  9416                           ;RTC.c: 89: strcpy(month, "Jul");
  9417  00134A  0E3D               	movlw	low i2printRTC@month
  9418  00134C  6E01               	movwf	i2strcpy@to,c
  9419  00134E  0E00               	movlw	high i2printRTC@month
  9420  001350  6E02               	movwf	i2strcpy@to+1,c
  9421  001352  0ED8               	movlw	low STR_42
  9422  001354  6E03               	movwf	i2strcpy@from,c
  9423  001356  0EFF               	movlw	high STR_42
  9424  001358  6E04               	movwf	i2strcpy@from+1,c
  9425  00135A  EC36  F012         	call	i2_strcpy	;wreg free
  9426                           
  9427                           ;RTC.c: 90: break;
  9428  00135E  D064               	goto	i2l4411
  9429  001360                     i2l4397:
  9430                           
  9431                           ;RTC.c: 92: strcpy(month, "Aug");
  9432  001360  0E3D               	movlw	low i2printRTC@month
  9433  001362  6E01               	movwf	i2strcpy@to,c
  9434  001364  0E00               	movlw	high i2printRTC@month
  9435  001366  6E02               	movwf	i2strcpy@to+1,c
  9436  001368  0ED4               	movlw	low STR_43
  9437  00136A  6E03               	movwf	i2strcpy@from,c
  9438  00136C  0EFF               	movlw	high STR_43
  9439  00136E  6E04               	movwf	i2strcpy@from+1,c
  9440  001370  EC36  F012         	call	i2_strcpy	;wreg free
  9441                           
  9442                           ;RTC.c: 93: break;
  9443  001374  D059               	goto	i2l4411
  9444  001376                     i2l4399:
  9445                           
  9446                           ;RTC.c: 95: strcpy(month, "Sep");
  9447  001376  0E3D               	movlw	low i2printRTC@month
  9448  001378  6E01               	movwf	i2strcpy@to,c
  9449  00137A  0E00               	movlw	high i2printRTC@month
  9450  00137C  6E02               	movwf	i2strcpy@to+1,c
  9451  00137E  0EE4               	movlw	low STR_44
  9452  001380  6E03               	movwf	i2strcpy@from,c
  9453  001382  0EFF               	movlw	high STR_44
  9454  001384  6E04               	movwf	i2strcpy@from+1,c
  9455  001386  EC36  F012         	call	i2_strcpy	;wreg free
  9456                           
  9457                           ;RTC.c: 96: break;
  9458  00138A  D04E               	goto	i2l4411
  9459  00138C                     i2l4401:
  9460                           
  9461                           ;RTC.c: 98: strcpy(month, "Oct");
  9462  00138C  0E3D               	movlw	low i2printRTC@month
  9463  00138E  6E01               	movwf	i2strcpy@to,c
  9464  001390  0E00               	movlw	high i2printRTC@month
  9465  001392  6E02               	movwf	i2strcpy@to+1,c
  9466  001394  0EF0               	movlw	low STR_45
  9467  001396  6E03               	movwf	i2strcpy@from,c
  9468  001398  0EFF               	movlw	high STR_45
  9469  00139A  6E04               	movwf	i2strcpy@from+1,c
  9470  00139C  EC36  F012         	call	i2_strcpy	;wreg free
  9471                           
  9472                           ;RTC.c: 99: break;
  9473  0013A0  D043               	goto	i2l4411
  9474  0013A2                     i2l4403:
  9475                           
  9476                           ;RTC.c: 101: strcpy(month, "Nov");
  9477  0013A2  0E3D               	movlw	low i2printRTC@month
  9478  0013A4  6E01               	movwf	i2strcpy@to,c
  9479  0013A6  0E00               	movlw	high i2printRTC@month
  9480  0013A8  6E02               	movwf	i2strcpy@to+1,c
  9481  0013AA  0EF4               	movlw	low STR_46
  9482  0013AC  6E03               	movwf	i2strcpy@from,c
  9483  0013AE  0EFF               	movlw	high STR_46
  9484  0013B0  6E04               	movwf	i2strcpy@from+1,c
  9485  0013B2  EC36  F012         	call	i2_strcpy	;wreg free
  9486                           
  9487                           ;RTC.c: 102: break;
  9488  0013B6  D038               	goto	i2l4411
  9489  0013B8                     i2l4405:
  9490                           
  9491                           ;RTC.c: 104: strcpy(month, "Dec");
  9492  0013B8  0E3D               	movlw	low i2printRTC@month
  9493  0013BA  6E01               	movwf	i2strcpy@to,c
  9494  0013BC  0E00               	movlw	high i2printRTC@month
  9495  0013BE  6E02               	movwf	i2strcpy@to+1,c
  9496  0013C0  0ED0               	movlw	low STR_47
  9497  0013C2  6E03               	movwf	i2strcpy@from,c
  9498  0013C4  0EFF               	movlw	high STR_47
  9499  0013C6  6E04               	movwf	i2strcpy@from+1,c
  9500  0013C8  EC36  F012         	call	i2_strcpy	;wreg free
  9501                           
  9502                           ;RTC.c: 106: }
  9503                           
  9504                           ;RTC.c: 105: break;
  9505  0013CC  D02D               	goto	i2l4411
  9506  0013CE                     i2l4409:
  9507  0013CE  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
  9508  0013D2  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
  9509                           
  9510                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9511                           ; Switch size 1, requested type "space"
  9512                           ; Number of cases is 1, Range of values is 0 to 0
  9513                           ; switch strategies available:
  9514                           ; Name         Instructions Cycles
  9515                           ; simple_byte            4     3 (average)
  9516                           ;	Chosen strategy is simple_byte
  9517  0013D6  502B               	movf	??i2_printRTC+1,w,c
  9518  0013D8  0A00               	xorlw	0	; case 0
  9519  0013DA  A4D8               	btfss	status,2,c
  9520  0013DC  D025               	goto	i2l4411
  9521                           
  9522                           ; Switch size 1, requested type "space"
  9523                           ; Number of cases is 12, Range of values is 1 to 12
  9524                           ; switch strategies available:
  9525                           ; Name         Instructions Cycles
  9526                           ; simple_byte           37    19 (average)
  9527                           ;	Chosen strategy is simple_byte
  9528  0013DE  502A               	movf	??i2_printRTC,w,c
  9529  0013E0  0A01               	xorlw	1	; case 1
  9530  0013E2  B4D8               	btfsc	status,2,c
  9531  0013E4  D770               	goto	i2l4383
  9532  0013E6  0A03               	xorlw	3	; case 2
  9533  0013E8  B4D8               	btfsc	status,2,c
  9534  0013EA  D778               	goto	i2l4385
  9535  0013EC  0A01               	xorlw	1	; case 3
  9536  0013EE  B4D8               	btfsc	status,2,c
  9537  0013F0  D780               	goto	i2l4387
  9538  0013F2  0A07               	xorlw	7	; case 4
  9539  0013F4  B4D8               	btfsc	status,2,c
  9540  0013F6  D788               	goto	i2l4389
  9541  0013F8  0A01               	xorlw	1	; case 5
  9542  0013FA  B4D8               	btfsc	status,2,c
  9543  0013FC  D790               	goto	i2l4391
  9544  0013FE  0A03               	xorlw	3	; case 6
  9545  001400  B4D8               	btfsc	status,2,c
  9546  001402  D798               	goto	i2l4393
  9547  001404  0A01               	xorlw	1	; case 7
  9548  001406  B4D8               	btfsc	status,2,c
  9549  001408  D7A0               	goto	i2l4395
  9550  00140A  0A0F               	xorlw	15	; case 8
  9551  00140C  B4D8               	btfsc	status,2,c
  9552  00140E  D7A8               	goto	i2l4397
  9553  001410  0A01               	xorlw	1	; case 9
  9554  001412  B4D8               	btfsc	status,2,c
  9555  001414  D7B0               	goto	i2l4399
  9556  001416  0A03               	xorlw	3	; case 10
  9557  001418  B4D8               	btfsc	status,2,c
  9558  00141A  D7B8               	goto	i2l4401
  9559  00141C  0A01               	xorlw	1	; case 11
  9560  00141E  B4D8               	btfsc	status,2,c
  9561  001420  D7C0               	goto	i2l4403
  9562  001422  0A07               	xorlw	7	; case 12
  9563  001424  B4D8               	btfsc	status,2,c
  9564  001426  D7C8               	goto	i2l4405
  9565  001428                     i2l4411:
  9566                           
  9567                           ;RTC.c: 107: lcdInst(0b10000000);;
  9568  001428  0E80               	movlw	128
  9569  00142A  EC51  F014         	call	i2_lcdInst
  9570                           
  9571                           ;RTC.c: 108: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  9572  00142E  0ED4               	movlw	low STR_48
  9573  001430  6E0D               	movwf	i2printf@f,c
  9574  001432  0EFD               	movlw	high STR_48
  9575  001434  6E0E               	movwf	i2printf@f+1,c
  9576  001436  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
  9577  00143A  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
  9578  00143E  0E3D               	movlw	low i2printRTC@month
  9579  001440  6E11               	movwf	?i2_printf+4,c
  9580  001442  0E00               	movlw	high i2printRTC@month
  9581  001444  6E12               	movwf	?i2_printf+5,c
  9582  001446  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
  9583  00144A  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
  9584  00144E  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
  9585  001452  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
  9586  001456  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
  9587  00145A  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
  9588  00145E  ECAF  F004         	call	i2_printf	;wreg free
  9589  001462  0012               	return		;funcret
  9590  001464                     __end_ofi2_printRTC:
  9591                           	opt stack 0
  9592                           pclatu	equ	0xFFB
  9593                           pclath	equ	0xFFA
  9594                           tblptru	equ	0xFF8
  9595                           tblptrh	equ	0xFF7
  9596                           tblptrl	equ	0xFF6
  9597                           tablat	equ	0xFF5
  9598                           prodh	equ	0xFF4
  9599                           prodl	equ	0xFF3
  9600                           intcon	equ	0xFF2
  9601                           intcon3	equ	0xFF0
  9602                           indf0	equ	0xFEF
  9603                           postinc0	equ	0xFEE
  9604                           fsr0h	equ	0xFEA
  9605                           fsr0l	equ	0xFE9
  9606                           wreg	equ	0xFE8
  9607                           postdec1	equ	0xFE5
  9608                           fsr1h	equ	0xFE2
  9609                           fsr1l	equ	0xFE1
  9610                           indf2	equ	0xFDF
  9611                           postinc2	equ	0xFDE
  9612                           postdec2	equ	0xFDD
  9613                           fsr2h	equ	0xFDA
  9614                           fsr2l	equ	0xFD9
  9615                           status	equ	0xFD8
  9616                           
  9617 ;; *************** function i2_strcpy *****************
  9618 ;; Defined at:
  9619 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  9620 ;; Parameters:    Size  Location     Type
  9621 ;;  to              2    0[COMRAM] PTR unsigned char 
  9622 ;;		 -> printRTC@month(4), 
  9623 ;;  from            2    2[COMRAM] PTR const unsigned char 
  9624 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
  9625 ;;		 -> STR_43(4), STR_42(4), STR_41(4), STR_40(4), 
  9626 ;;		 -> STR_39(4), STR_38(4), STR_37(4), STR_36(4), 
  9627 ;; Auto vars:     Size  Location     Type
  9628 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
  9629 ;;		 -> printRTC@month(4), 
  9630 ;; Return value:  Size  Location     Type
  9631 ;;                  2    0[COMRAM] PTR unsigned char 
  9632 ;; Registers used:
  9633 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9634 ;; Tracked objects:
  9635 ;;		On entry : 0/0
  9636 ;;		On exit  : 0/0
  9637 ;;		Unchanged: 0/0
  9638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9639 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9640 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9642 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9643 ;;Total ram usage:        6 bytes
  9644 ;; Hardware stack levels used:    1
  9645 ;; This function calls:
  9646 ;;		Nothing
  9647 ;; This function is called by:
  9648 ;;		i2_printRTC
  9649 ;; This function uses a non-reentrant model
  9650 ;;
  9651                           
  9652                           	psect	text43
  9653  00246C                     __ptext43:
  9654                           	opt stack 0
  9655  00246C                     i2_strcpy:
  9656                           	opt stack 20
  9657                           
  9658                           ;incstack = 0
  9659  00246C  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
  9660  002470  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
  9661  002474  D004               	goto	i2l4139
  9662  002476                     i2l4137:
  9663  002476  4A05               	infsnz	i2strcpy@cp,f,c
  9664  002478  2A06               	incf	i2strcpy@cp+1,f,c
  9665  00247A  4A03               	infsnz	i2strcpy@from,f,c
  9666  00247C  2A04               	incf	i2strcpy@from+1,f,c
  9667  00247E                     i2l4139:
  9668  00247E  C003  FFF6         	movff	i2strcpy@from,tblptrl
  9669  002482  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
  9670  002486                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9671  002486  6AF8               	clrf	tblptru,c
  9672  002488                     	endif
  9673  002488                     	if	0	;tblptru may be non-zero
  9674  002488                     	endif
  9675  002488  C005  FFD9         	movff	i2strcpy@cp,fsr2l
  9676  00248C  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
  9677  002490  0008               	tblrd		*
  9678  002492  CFF5 FFDF          	movff	tablat,indf2
  9679  002496  50DF               	movf	indf2,w,c
  9680  002498  B4D8               	btfsc	status,2,c
  9681  00249A  0012               	return	
  9682  00249C  D7EC               	goto	i2l4137
  9683  00249E                     __end_ofi2_strcpy:
  9684                           	opt stack 0
  9685                           pclatu	equ	0xFFB
  9686                           pclath	equ	0xFFA
  9687                           tblptru	equ	0xFF8
  9688                           tblptrh	equ	0xFF7
  9689                           tblptrl	equ	0xFF6
  9690                           tablat	equ	0xFF5
  9691                           prodh	equ	0xFF4
  9692                           prodl	equ	0xFF3
  9693                           intcon	equ	0xFF2
  9694                           intcon3	equ	0xFF0
  9695                           indf0	equ	0xFEF
  9696                           postinc0	equ	0xFEE
  9697                           fsr0h	equ	0xFEA
  9698                           fsr0l	equ	0xFE9
  9699                           wreg	equ	0xFE8
  9700                           postdec1	equ	0xFE5
  9701                           fsr1h	equ	0xFE2
  9702                           fsr1l	equ	0xFE1
  9703                           indf2	equ	0xFDF
  9704                           postinc2	equ	0xFDE
  9705                           postdec2	equ	0xFDD
  9706                           fsr2h	equ	0xFDA
  9707                           fsr2l	equ	0xFD9
  9708                           status	equ	0xFD8
  9709                           
  9710 ;; *************** function _inputHandler *****************
  9711 ;; Defined at:
  9712 ;;		line 307 in file "UI.c"
  9713 ;; Parameters:    Size  Location     Type
  9714 ;;		None
  9715 ;; Auto vars:     Size  Location     Type
  9716 ;;		None
  9717 ;; Return value:  Size  Location     Type
  9718 ;;                  2   41[COMRAM] int 
  9719 ;; Registers used:
  9720 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9721 ;; Tracked objects:
  9722 ;;		On entry : 0/0
  9723 ;;		On exit  : 0/0
  9724 ;;		Unchanged: 0/0
  9725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9726 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9728 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9729 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9730 ;;Total ram usage:        4 bytes
  9731 ;; Hardware stack levels used:    1
  9732 ;; Hardware stack levels required when called:    4
  9733 ;; This function calls:
  9734 ;;		_change_state_to_logs_11
  9735 ;;		_change_state_to_logs_12
  9736 ;;		_change_state_to_logs_22
  9737 ;;		_change_state_to_logs_23
  9738 ;;		_change_state_to_logs_33
  9739 ;;		_change_state_to_logs_34
  9740 ;;		_change_state_to_menu_11
  9741 ;;		_change_state_to_menu_12
  9742 ;;		_change_state_to_menu_22
  9743 ;;		_change_state_to_menu_23
  9744 ;; This function is called by:
  9745 ;;		_updateMenu
  9746 ;; This function uses a non-reentrant model
  9747 ;;
  9748                           
  9749                           	psect	text44
  9750  00165E                     __ptext44:
  9751                           	opt stack 0
  9752  00165E                     _inputHandler:
  9753                           	opt stack 18
  9754                           
  9755                           ;UI.c: 312: if(firstboot){
  9756                           
  9757                           ;incstack = 0
  9758  00165E  506D               	movf	_firstboot,w,c
  9759  001660  106E               	iorwf	_firstboot+1,w,c
  9760  001662  B4D8               	btfsc	status,2,c
  9761  001664  D00B               	goto	i2l4459
  9762                           
  9763                           ;UI.c: 313: change_state_to_menu_11();
  9764  001666  ECAF  F012         	call	_change_state_to_menu_11	;wreg free
  9765                           
  9766                           ;UI.c: 314: firstboot = 0;
  9767  00166A  0E00               	movlw	0
  9768  00166C  6E6E               	movwf	_firstboot+1,c
  9769  00166E  0E00               	movlw	0
  9770  001670  6E6D               	movwf	_firstboot,c
  9771                           
  9772                           ;UI.c: 315: return 0;
  9773  001672  0E00               	movlw	0
  9774  001674  6E2B               	movwf	?_inputHandler+1,c
  9775  001676  0E00               	movlw	0
  9776  001678  6E2A               	movwf	?_inputHandler,c
  9777  00167A  0012               	return	
  9778  00167C                     i2l4459:
  9779                           
  9780                           ;UI.c: 316: }
  9781                           ;UI.c: 317: if (logstate){
  9782  00167C  0100               	movlb	0	; () banked
  9783  00167E  51EF               	movf	_logstate& (0+255),w,b
  9784  001680  0100               	movlb	0	; () banked
  9785  001682  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  9786  001684  B4D8               	btfsc	status,2,c
  9787  001686  D0C7               	goto	i2l4577
  9788                           
  9789                           ; BSR set to: 0
  9790                           ;UI.c: 318: if(input == 'C' && PORTBbits.RB1 == 1){
  9791  001688  0E43               	movlw	67
  9792  00168A  1878               	xorwf	_input,w,c
  9793  00168C  A4D8               	btfss	status,2,c
  9794  00168E  D012               	goto	i2l4477
  9795                           
  9796                           ; BSR set to: 0
  9797  001690  B281               	btfsc	3969,1,c	;volatile
  9798  001692  D009               	goto	i2l4469
  9799  001694  D00F               	goto	i2l4477
  9800  001696                     i2l4467:
  9801                           
  9802                           ;UI.c: 321: _delay((unsigned long)((10)*(32000000/4000.0)));
  9803  001696  0E68               	movlw	104
  9804  001698  6E2C               	movwf	??_inputHandler& (0+255),c
  9805  00169A  0EE4               	movlw	228
  9806  00169C                     i2u474_47:
  9807  00169C  2EE8               	decfsz	wreg,f,c
  9808  00169E  D7FE               	bra	i2u474_47
  9809  0016A0  2E2C               	decfsz	??_inputHandler& (0+255),f,c
  9810  0016A2  D7FC               	bra	i2u474_47
  9811  0016A4  D000               	nop2	
  9812  0016A6                     i2l4469:
  9813  0016A6  B281               	btfsc	3969,1,c	;volatile
  9814  0016A8  D7F6               	goto	i2l4467
  9815  0016AA                     i2l4471:
  9816                           
  9817                           ;UI.c: 322: }
  9818                           ;UI.c: 323: return 0;
  9819  0016AA  0E00               	movlw	0
  9820  0016AC  6E2B               	movwf	?_inputHandler+1,c
  9821  0016AE  0E00               	movlw	0
  9822  0016B0  6E2A               	movwf	?_inputHandler,c
  9823  0016B2  0012               	return	
  9824  0016B4                     i2l4477:
  9825                           
  9826                           ;UI.c: 325: else if (input == 'D'){
  9827  0016B4  0E44               	movlw	68
  9828  0016B6  1878               	xorwf	_input,w,c
  9829  0016B8  A4D8               	btfss	status,2,c
  9830  0016BA  D7F7               	goto	i2l4471
  9831                           
  9832                           ;UI.c: 327: logstate = 0;
  9833  0016BC  0E00               	movlw	0
  9834  0016BE  0100               	movlb	0	; () banked
  9835  0016C0  6FF0               	movwf	(_logstate+1)& (0+255),b
  9836  0016C2  0E00               	movlw	0
  9837  0016C4  6FEF               	movwf	_logstate& (0+255),b
  9838                           
  9839                           ;UI.c: 328: switch(cur_state){
  9840  0016C6  D012               	goto	i2l4495
  9841  0016C8                     i2l4481:
  9842                           
  9843                           ;UI.c: 330: change_state_to_logs_11();
  9844  0016C8  EC27  F013         	call	_change_state_to_logs_11	;wreg free
  9845                           
  9846                           ;UI.c: 331: break;
  9847  0016CC  D7EE               	goto	i2l4471
  9848  0016CE                     i2l4483:
  9849                           
  9850                           ;UI.c: 333: change_state_to_logs_12();
  9851  0016CE  EC0F  F013         	call	_change_state_to_logs_12	;wreg free
  9852                           
  9853                           ;UI.c: 334: break;
  9854  0016D2  D7EB               	goto	i2l4471
  9855  0016D4                     i2l4485:
  9856                           
  9857                           ;UI.c: 336: change_state_to_logs_22();
  9858  0016D4  ECF7  F012         	call	_change_state_to_logs_22	;wreg free
  9859                           
  9860                           ;UI.c: 337: break;
  9861  0016D8  D7E8               	goto	i2l4471
  9862  0016DA                     i2l4487:
  9863                           
  9864                           ;UI.c: 339: change_state_to_logs_23();
  9865  0016DA  EC56  F013         	call	_change_state_to_logs_23	;wreg free
  9866                           
  9867                           ;UI.c: 340: break;
  9868  0016DE  D7E5               	goto	i2l4471
  9869  0016E0                     i2l4489:
  9870                           
  9871                           ;UI.c: 342: change_state_to_logs_33();
  9872  0016E0  ECDF  F012         	call	_change_state_to_logs_33	;wreg free
  9873                           
  9874                           ;UI.c: 343: break;
  9875  0016E4  D7E2               	goto	i2l4471
  9876  0016E6                     i2l4491:
  9877                           
  9878                           ;UI.c: 345: change_state_to_logs_34();
  9879  0016E6  ECC7  F012         	call	_change_state_to_logs_34	;wreg free
  9880                           
  9881                           ;UI.c: 347: }
  9882                           
  9883                           ;UI.c: 346: break;
  9884  0016EA  D7DF               	goto	i2l4471
  9885  0016EC                     i2l4495:
  9886  0016EC  C0E1  F02C         	movff	_cur_state,??_inputHandler
  9887  0016F0  C0E2  F02D         	movff	_cur_state+1,??_inputHandler+1
  9888                           
  9889                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  9890                           ; Switch size 1, requested type "space"
  9891                           ; Number of cases is 2, Range of values is 3 to 4
  9892                           ; switch strategies available:
  9893                           ; Name         Instructions Cycles
  9894                           ; simple_byte            7     4 (average)
  9895                           ;	Chosen strategy is simple_byte
  9896  0016F4  502D               	movf	??_inputHandler+1,w,c
  9897  0016F6  0A03               	xorlw	3	; case 3
  9898  0016F8  B4D8               	btfsc	status,2,c
  9899  0016FA  D004               	goto	i2l5501
  9900  0016FC  0A07               	xorlw	7	; case 4
  9901  0016FE  B4D8               	btfsc	status,2,c
  9902  001700  D00F               	goto	i2l5503
  9903  001702  D7D3               	goto	i2l4471
  9904  001704                     i2l5501:
  9905                           
  9906                           ; Switch size 1, requested type "space"
  9907                           ; Number of cases is 4, Range of values is 243 to 255
  9908                           ; switch strategies available:
  9909                           ; Name         Instructions Cycles
  9910                           ; simple_byte           13     7 (average)
  9911                           ;	Chosen strategy is simple_byte
  9912  001704  502C               	movf	??_inputHandler,w,c
  9913  001706  0AF3               	xorlw	243	; case 243
  9914  001708  B4D8               	btfsc	status,2,c
  9915  00170A  D7DE               	goto	i2l4481
  9916  00170C  0A07               	xorlw	7	; case 244
  9917  00170E  B4D8               	btfsc	status,2,c
  9918  001710  D7DE               	goto	i2l4483
  9919  001712  0A0A               	xorlw	10	; case 254
  9920  001714  B4D8               	btfsc	status,2,c
  9921  001716  D7DE               	goto	i2l4485
  9922  001718  0A01               	xorlw	1	; case 255
  9923  00171A  B4D8               	btfsc	status,2,c
  9924  00171C  D7DE               	goto	i2l4487
  9925  00171E  D7C5               	goto	i2l4471
  9926  001720                     i2l5503:
  9927                           
  9928                           ; Switch size 1, requested type "space"
  9929                           ; Number of cases is 2, Range of values is 9 to 10
  9930                           ; switch strategies available:
  9931                           ; Name         Instructions Cycles
  9932                           ; simple_byte            7     4 (average)
  9933                           ;	Chosen strategy is simple_byte
  9934  001720  502C               	movf	??_inputHandler,w,c
  9935  001722  0A09               	xorlw	9	; case 9
  9936  001724  B4D8               	btfsc	status,2,c
  9937  001726  D7DC               	goto	i2l4489
  9938  001728  0A03               	xorlw	3	; case 10
  9939  00172A  B4D8               	btfsc	status,2,c
  9940  00172C  D7DC               	goto	i2l4491
  9941  00172E  D7BD               	goto	i2l4471
  9942  001730                     i2l4507:
  9943                           
  9944                           ;UI.c: 357: if(cur_state == 11){
  9945  001730  0E0B               	movlw	11
  9946  001732  0100               	movlb	0	; () banked
  9947  001734  19E1               	xorwf	_cur_state& (0+255),w,b
  9948  001736  0100               	movlb	0	; () banked
  9949  001738  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
  9950  00173A  A4D8               	btfss	status,2,c
  9951  00173C  D005               	goto	i2l4515
  9952                           
  9953                           ; BSR set to: 0
  9954                           ;UI.c: 358: return 0;
  9955  00173E  0E00               	movlw	0
  9956  001740  6E2B               	movwf	?_inputHandler+1,c
  9957  001742  0E00               	movlw	0
  9958  001744  6E2A               	movwf	?_inputHandler,c
  9959                           
  9960                           ; BSR set to: 0
  9961  001746  0012               	return	
  9962  001748                     i2l4515:
  9963                           
  9964                           ; BSR set to: 0
  9965                           ;UI.c: 360: else{
  9966                           ;UI.c: 361: change_state_to_menu_11();
  9967  001748  ECAF  F012         	call	_change_state_to_menu_11	;wreg free
  9968                           
  9969                           ;UI.c: 362: }
  9970                           ;UI.c: 363: return 0;
  9971  00174C  0E00               	movlw	0
  9972  00174E  6E2B               	movwf	?_inputHandler+1,c
  9973  001750  0E00               	movlw	0
  9974  001752  6E2A               	movwf	?_inputHandler,c
  9975  001754  0012               	return	
  9976  001756                     i2l4521:
  9977                           
  9978                           ;UI.c: 365: if(cur_state == 22 | cur_state == 12){
  9979  001756  0E16               	movlw	22
  9980  001758  0100               	movlb	0	; () banked
  9981  00175A  19E1               	xorwf	_cur_state& (0+255),w,b
  9982  00175C  0100               	movlb	0	; () banked
  9983  00175E  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
  9984  001760  B4D8               	btfsc	status,2,c
  9985  001762  D007               	goto	i2l4525
  9986                           
  9987                           ; BSR set to: 0
  9988  001764  0E0C               	movlw	12
  9989  001766  0100               	movlb	0	; () banked
  9990  001768  19E1               	xorwf	_cur_state& (0+255),w,b
  9991  00176A  0100               	movlb	0	; () banked
  9992  00176C  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
  9993  00176E  A4D8               	btfss	status,2,c
  9994  001770  D005               	goto	i2l4531
  9995  001772                     i2l4525:
  9996                           
  9997                           ; BSR set to: 0
  9998                           ;UI.c: 366: return 0;
  9999  001772  0E00               	movlw	0
 10000  001774  6E2B               	movwf	?_inputHandler+1,c
 10001  001776  0E00               	movlw	0
 10002  001778  6E2A               	movwf	?_inputHandler,c
 10003                           
 10004                           ; BSR set to: 0
 10005  00177A  0012               	return	
 10006  00177C                     i2l4531:
 10007                           
 10008                           ; BSR set to: 0
 10009                           ;UI.c: 368: else if(cur_state == 23){
 10010  00177C  0E17               	movlw	23
 10011  00177E  0100               	movlb	0	; () banked
 10012  001780  19E1               	xorwf	_cur_state& (0+255),w,b
 10013  001782  0100               	movlb	0	; () banked
 10014  001784  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
 10015  001786  A4D8               	btfss	status,2,c
 10016  001788  D003               	goto	i2l4535
 10017                           
 10018                           ; BSR set to: 0
 10019                           ;UI.c: 369: change_state_to_menu_22();
 10020  00178A  EC7F  F012         	call	_change_state_to_menu_22	;wreg free
 10021                           
 10022                           ;UI.c: 370: }
 10023  00178E  D002               	goto	i2l4537
 10024  001790                     i2l4535:
 10025                           
 10026                           ;UI.c: 371: else{
 10027                           ;UI.c: 372: change_state_to_menu_12();
 10028  001790  EC97  F012         	call	_change_state_to_menu_12	;wreg free
 10029  001794                     i2l4537:
 10030                           
 10031                           ;UI.c: 373: }
 10032                           ;UI.c: 374: return 0;
 10033  001794  0E00               	movlw	0
 10034  001796  6E2B               	movwf	?_inputHandler+1,c
 10035  001798  0E00               	movlw	0
 10036  00179A  6E2A               	movwf	?_inputHandler,c
 10037  00179C  0012               	return	
 10038  00179E                     i2l4541:
 10039                           
 10040                           ;UI.c: 376: if(cur_state == 23){
 10041  00179E  0E17               	movlw	23
 10042  0017A0  0100               	movlb	0	; () banked
 10043  0017A2  19E1               	xorwf	_cur_state& (0+255),w,b
 10044  0017A4  0100               	movlb	0	; () banked
 10045  0017A6  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
 10046  0017A8  A4D8               	btfss	status,2,c
 10047  0017AA  D005               	goto	i2l4549
 10048                           
 10049                           ; BSR set to: 0
 10050                           ;UI.c: 377: return 0;
 10051  0017AC  0E00               	movlw	0
 10052  0017AE  6E2B               	movwf	?_inputHandler+1,c
 10053  0017B0  0E00               	movlw	0
 10054  0017B2  6E2A               	movwf	?_inputHandler,c
 10055                           
 10056                           ; BSR set to: 0
 10057  0017B4  0012               	return	
 10058  0017B6                     i2l4549:
 10059                           
 10060                           ; BSR set to: 0
 10061                           ;UI.c: 379: else{
 10062                           ;UI.c: 380: change_state_to_menu_23();
 10063  0017B6  EC67  F012         	call	_change_state_to_menu_23	;wreg free
 10064                           
 10065                           ;UI.c: 381: }
 10066                           ;UI.c: 382: return 0;
 10067  0017BA  0E00               	movlw	0
 10068  0017BC  6E2B               	movwf	?_inputHandler+1,c
 10069  0017BE  0E00               	movlw	0
 10070  0017C0  6E2A               	movwf	?_inputHandler,c
 10071  0017C2  0012               	return	
 10072  0017C4                     i2l4555:
 10073                           
 10074                           ;UI.c: 385: up = 1;
 10075  0017C4  0E00               	movlw	0
 10076  0017C6  6E74               	movwf	_up+1,c
 10077  0017C8  0E01               	movlw	1
 10078  0017CA  6E73               	movwf	_up,c
 10079                           
 10080                           ;UI.c: 386: return 1;
 10081  0017CC  0E00               	movlw	0
 10082  0017CE  6E2B               	movwf	?_inputHandler+1,c
 10083  0017D0  0E01               	movlw	1
 10084  0017D2  6E2A               	movwf	?_inputHandler,c
 10085  0017D4  0012               	return	
 10086  0017D6                     i2l4559:
 10087                           
 10088                           ;UI.c: 388: down = 1;
 10089  0017D6  0E00               	movlw	0
 10090  0017D8  6E6A               	movwf	_down+1,c
 10091  0017DA  0E01               	movlw	1
 10092  0017DC  6E69               	movwf	_down,c
 10093                           
 10094                           ;UI.c: 389: return 1;
 10095  0017DE  0E00               	movlw	0
 10096  0017E0  6E2B               	movwf	?_inputHandler+1,c
 10097  0017E2  0E01               	movlw	1
 10098  0017E4  6E2A               	movwf	?_inputHandler,c
 10099  0017E6  0012               	return	
 10100  0017E8                     i2l4563:
 10101                           
 10102                           ;UI.c: 391: enter = 1;
 10103  0017E8  0E00               	movlw	0
 10104  0017EA  6E6C               	movwf	_enter+1,c
 10105  0017EC  0E01               	movlw	1
 10106  0017EE  6E6B               	movwf	_enter,c
 10107                           
 10108                           ;UI.c: 392: return 1;
 10109  0017F0  0E00               	movlw	0
 10110  0017F2  6E2B               	movwf	?_inputHandler+1,c
 10111  0017F4  0E01               	movlw	1
 10112  0017F6  6E2A               	movwf	?_inputHandler,c
 10113  0017F8  0012               	return	
 10114  0017FA                     i2l4567:
 10115                           
 10116                           ;UI.c: 394: back = 1;
 10117  0017FA  0E00               	movlw	0
 10118  0017FC  6E60               	movwf	_back+1,c
 10119  0017FE  0E01               	movlw	1
 10120  001800  6E5F               	movwf	_back,c
 10121                           
 10122                           ;UI.c: 395: return 1;
 10123  001802  0E00               	movlw	0
 10124  001804  6E2B               	movwf	?_inputHandler+1,c
 10125  001806  0E01               	movlw	1
 10126  001808  6E2A               	movwf	?_inputHandler,c
 10127  00180A  0012               	return	
 10128  00180C                     i2l4571:
 10129                           
 10130                           ;UI.c: 398: return 1;
 10131  00180C  0E00               	movlw	0
 10132  00180E  6E2B               	movwf	?_inputHandler+1,c
 10133  001810  0E01               	movlw	1
 10134  001812  6E2A               	movwf	?_inputHandler,c
 10135                           
 10136                           ;UI.c: 399: }
 10137  001814  0012               	return	
 10138  001816                     i2l4577:
 10139  001816  5078               	movf	_input,w,c
 10140                           
 10141                           ; Switch size 1, requested type "space"
 10142                           ; Number of cases is 7, Range of values is 49 to 68
 10143                           ; switch strategies available:
 10144                           ; Name         Instructions Cycles
 10145                           ; simple_byte           22    12 (average)
 10146                           ;	Chosen strategy is simple_byte
 10147  001818  0A31               	xorlw	49	; case 49
 10148  00181A  B4D8               	btfsc	status,2,c
 10149  00181C  D789               	goto	i2l4507
 10150  00181E  0A03               	xorlw	3	; case 50
 10151  001820  B4D8               	btfsc	status,2,c
 10152  001822  D799               	goto	i2l4521
 10153  001824  0A01               	xorlw	1	; case 51
 10154  001826  B4D8               	btfsc	status,2,c
 10155  001828  D7BA               	goto	i2l4541
 10156  00182A  0A72               	xorlw	114	; case 65
 10157  00182C  B4D8               	btfsc	status,2,c
 10158  00182E  D7CA               	goto	i2l4555
 10159  001830  0A03               	xorlw	3	; case 66
 10160  001832  B4D8               	btfsc	status,2,c
 10161  001834  D7D0               	goto	i2l4559
 10162  001836  0A01               	xorlw	1	; case 67
 10163  001838  B4D8               	btfsc	status,2,c
 10164  00183A  D7D6               	goto	i2l4563
 10165  00183C  0A07               	xorlw	7	; case 68
 10166  00183E  B4D8               	btfsc	status,2,c
 10167  001840  D7DC               	goto	i2l4567
 10168  001842  D7E4               	goto	i2l4571
 10169  001844                     __end_of_inputHandler:
 10170                           	opt stack 0
 10171                           pclatu	equ	0xFFB
 10172                           pclath	equ	0xFFA
 10173                           tblptru	equ	0xFF8
 10174                           tblptrh	equ	0xFF7
 10175                           tblptrl	equ	0xFF6
 10176                           tablat	equ	0xFF5
 10177                           prodh	equ	0xFF4
 10178                           prodl	equ	0xFF3
 10179                           intcon	equ	0xFF2
 10180                           intcon3	equ	0xFF0
 10181                           indf0	equ	0xFEF
 10182                           postinc0	equ	0xFEE
 10183                           fsr0h	equ	0xFEA
 10184                           fsr0l	equ	0xFE9
 10185                           wreg	equ	0xFE8
 10186                           postdec1	equ	0xFE5
 10187                           fsr1h	equ	0xFE2
 10188                           fsr1l	equ	0xFE1
 10189                           indf2	equ	0xFDF
 10190                           postinc2	equ	0xFDE
 10191                           postdec2	equ	0xFDD
 10192                           fsr2h	equ	0xFDA
 10193                           fsr2l	equ	0xFD9
 10194                           status	equ	0xFD8
 10195                           
 10196 ;; *************** function _change_state_to_menu_23 *****************
 10197 ;; Defined at:
 10198 ;;		line 440 in file "UI.c"
 10199 ;; Parameters:    Size  Location     Type
 10200 ;;		None
 10201 ;; Auto vars:     Size  Location     Type
 10202 ;;		None
 10203 ;; Return value:  Size  Location     Type
 10204 ;;                  1    wreg      void 
 10205 ;; Registers used:
 10206 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10207 ;; Tracked objects:
 10208 ;;		On entry : 0/0
 10209 ;;		On exit  : 0/0
 10210 ;;		Unchanged: 0/0
 10211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10215 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10216 ;;Total ram usage:        0 bytes
 10217 ;; Hardware stack levels used:    1
 10218 ;; Hardware stack levels required when called:    3
 10219 ;; This function calls:
 10220 ;;		i2_lcdInst
 10221 ;;		i2_printf
 10222 ;; This function is called by:
 10223 ;;		_updateMenu
 10224 ;;		_inputHandler
 10225 ;; This function uses a non-reentrant model
 10226 ;;
 10227                           
 10228                           	psect	text45
 10229  0024CE                     __ptext45:
 10230                           	opt stack 0
 10231  0024CE                     _change_state_to_menu_23:
 10232                           	opt stack 18
 10233                           
 10234                           ;UI.c: 441: cur_state = 23;
 10235                           
 10236                           ;incstack = 0
 10237  0024CE  0E00               	movlw	0
 10238  0024D0  0100               	movlb	0	; () banked
 10239  0024D2  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10240  0024D4  0E17               	movlw	23
 10241  0024D6  6FE1               	movwf	_cur_state& (0+255),b
 10242                           
 10243                           ; BSR set to: 0
 10244                           ;UI.c: 443: lcdInst(0b10000000);;
 10245  0024D8  0E80               	movlw	128
 10246  0024DA  EC51  F014         	call	i2_lcdInst
 10247                           
 10248                           ;UI.c: 444: printf("2. SORT         ");
 10249  0024DE  0E7A               	movlw	low STR_17
 10250  0024E0  6E0D               	movwf	i2printf@f,c
 10251  0024E2  0EFE               	movlw	high STR_17
 10252  0024E4  6E0E               	movwf	i2printf@f+1,c
 10253  0024E6  ECAF  F004         	call	i2_printf	;wreg free
 10254                           
 10255                           ;UI.c: 445: lcdInst(0b11000000);;
 10256  0024EA  0EC0               	movlw	192
 10257  0024EC  EC51  F014         	call	i2_lcdInst
 10258                           
 10259                           ;UI.c: 446: printf("3. LOGS        <");
 10260  0024F0  0E46               	movlw	low STR_23
 10261  0024F2  6E0D               	movwf	i2printf@f,c
 10262  0024F4  0EFF               	movlw	high STR_23
 10263  0024F6  6E0E               	movwf	i2printf@f+1,c
 10264  0024F8  ECAF  F004         	call	i2_printf	;wreg free
 10265  0024FC  0012               	return		;funcret
 10266  0024FE                     __end_of_change_state_to_menu_23:
 10267                           	opt stack 0
 10268                           pclatu	equ	0xFFB
 10269                           pclath	equ	0xFFA
 10270                           tblptru	equ	0xFF8
 10271                           tblptrh	equ	0xFF7
 10272                           tblptrl	equ	0xFF6
 10273                           tablat	equ	0xFF5
 10274                           prodh	equ	0xFF4
 10275                           prodl	equ	0xFF3
 10276                           intcon	equ	0xFF2
 10277                           intcon3	equ	0xFF0
 10278                           indf0	equ	0xFEF
 10279                           postinc0	equ	0xFEE
 10280                           fsr0h	equ	0xFEA
 10281                           fsr0l	equ	0xFE9
 10282                           wreg	equ	0xFE8
 10283                           postdec1	equ	0xFE5
 10284                           fsr1h	equ	0xFE2
 10285                           fsr1l	equ	0xFE1
 10286                           indf2	equ	0xFDF
 10287                           postinc2	equ	0xFDE
 10288                           postdec2	equ	0xFDD
 10289                           fsr2h	equ	0xFDA
 10290                           fsr2l	equ	0xFD9
 10291                           status	equ	0xFD8
 10292                           
 10293 ;; *************** function _change_state_to_menu_22 *****************
 10294 ;; Defined at:
 10295 ;;		line 432 in file "UI.c"
 10296 ;; Parameters:    Size  Location     Type
 10297 ;;		None
 10298 ;; Auto vars:     Size  Location     Type
 10299 ;;		None
 10300 ;; Return value:  Size  Location     Type
 10301 ;;                  1    wreg      void 
 10302 ;; Registers used:
 10303 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10304 ;; Tracked objects:
 10305 ;;		On entry : 0/0
 10306 ;;		On exit  : 0/0
 10307 ;;		Unchanged: 0/0
 10308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10312 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10313 ;;Total ram usage:        0 bytes
 10314 ;; Hardware stack levels used:    1
 10315 ;; Hardware stack levels required when called:    3
 10316 ;; This function calls:
 10317 ;;		i2_lcdInst
 10318 ;;		i2_printf
 10319 ;; This function is called by:
 10320 ;;		_updateMenu
 10321 ;;		_inputHandler
 10322 ;; This function uses a non-reentrant model
 10323 ;;
 10324                           
 10325                           	psect	text46
 10326  0024FE                     __ptext46:
 10327                           	opt stack 0
 10328  0024FE                     _change_state_to_menu_22:
 10329                           	opt stack 18
 10330                           
 10331                           ;UI.c: 433: cur_state = 22;
 10332                           
 10333                           ;incstack = 0
 10334  0024FE  0E00               	movlw	0
 10335  002500  0100               	movlb	0	; () banked
 10336  002502  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10337  002504  0E16               	movlw	22
 10338  002506  6FE1               	movwf	_cur_state& (0+255),b
 10339                           
 10340                           ; BSR set to: 0
 10341                           ;UI.c: 435: lcdInst(0b10000000);;
 10342  002508  0E80               	movlw	128
 10343  00250A  EC51  F014         	call	i2_lcdInst
 10344                           
 10345                           ;UI.c: 436: printf("2. SORT        <");
 10346  00250E  0E57               	movlw	low STR_19
 10347  002510  6E0D               	movwf	i2printf@f,c
 10348  002512  0EFF               	movlw	high STR_19
 10349  002514  6E0E               	movwf	i2printf@f+1,c
 10350  002516  ECAF  F004         	call	i2_printf	;wreg free
 10351                           
 10352                           ;UI.c: 437: lcdInst(0b11000000);;
 10353  00251A  0EC0               	movlw	192
 10354  00251C  EC51  F014         	call	i2_lcdInst
 10355                           
 10356                           ;UI.c: 438: printf("3. LOGS         ");
 10357  002520  0E69               	movlw	low STR_21
 10358  002522  6E0D               	movwf	i2printf@f,c
 10359  002524  0EFE               	movlw	high STR_21
 10360  002526  6E0E               	movwf	i2printf@f+1,c
 10361  002528  ECAF  F004         	call	i2_printf	;wreg free
 10362  00252C  0012               	return		;funcret
 10363  00252E                     __end_of_change_state_to_menu_22:
 10364                           	opt stack 0
 10365                           pclatu	equ	0xFFB
 10366                           pclath	equ	0xFFA
 10367                           tblptru	equ	0xFF8
 10368                           tblptrh	equ	0xFF7
 10369                           tblptrl	equ	0xFF6
 10370                           tablat	equ	0xFF5
 10371                           prodh	equ	0xFF4
 10372                           prodl	equ	0xFF3
 10373                           intcon	equ	0xFF2
 10374                           intcon3	equ	0xFF0
 10375                           indf0	equ	0xFEF
 10376                           postinc0	equ	0xFEE
 10377                           fsr0h	equ	0xFEA
 10378                           fsr0l	equ	0xFE9
 10379                           wreg	equ	0xFE8
 10380                           postdec1	equ	0xFE5
 10381                           fsr1h	equ	0xFE2
 10382                           fsr1l	equ	0xFE1
 10383                           indf2	equ	0xFDF
 10384                           postinc2	equ	0xFDE
 10385                           postdec2	equ	0xFDD
 10386                           fsr2h	equ	0xFDA
 10387                           fsr2l	equ	0xFD9
 10388                           status	equ	0xFD8
 10389                           
 10390 ;; *************** function _change_state_to_menu_12 *****************
 10391 ;; Defined at:
 10392 ;;		line 424 in file "UI.c"
 10393 ;; Parameters:    Size  Location     Type
 10394 ;;		None
 10395 ;; Auto vars:     Size  Location     Type
 10396 ;;		None
 10397 ;; Return value:  Size  Location     Type
 10398 ;;                  1    wreg      void 
 10399 ;; Registers used:
 10400 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10401 ;; Tracked objects:
 10402 ;;		On entry : 0/0
 10403 ;;		On exit  : 0/0
 10404 ;;		Unchanged: 0/0
 10405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10409 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10410 ;;Total ram usage:        0 bytes
 10411 ;; Hardware stack levels used:    1
 10412 ;; Hardware stack levels required when called:    3
 10413 ;; This function calls:
 10414 ;;		i2_lcdInst
 10415 ;;		i2_printf
 10416 ;; This function is called by:
 10417 ;;		_updateMenu
 10418 ;;		_inputHandler
 10419 ;; This function uses a non-reentrant model
 10420 ;;
 10421                           
 10422                           	psect	text47
 10423  00252E                     __ptext47:
 10424                           	opt stack 0
 10425  00252E                     _change_state_to_menu_12:
 10426                           	opt stack 18
 10427                           
 10428                           ;UI.c: 425: cur_state = 12;
 10429                           
 10430                           ;incstack = 0
 10431  00252E  0E00               	movlw	0
 10432  002530  0100               	movlb	0	; () banked
 10433  002532  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10434  002534  0E0C               	movlw	12
 10435  002536  6FE1               	movwf	_cur_state& (0+255),b
 10436                           
 10437                           ; BSR set to: 0
 10438                           ;UI.c: 427: lcdInst(0b10000000);;
 10439  002538  0E80               	movlw	128
 10440  00253A  EC51  F014         	call	i2_lcdInst
 10441                           
 10442                           ;UI.c: 428: printf("1. DATE/TIME    ");
 10443  00253E  0E8B               	movlw	low STR_18
 10444  002540  6E0D               	movwf	i2printf@f,c
 10445  002542  0EFE               	movlw	high STR_18
 10446  002544  6E0E               	movwf	i2printf@f+1,c
 10447  002546  ECAF  F004         	call	i2_printf	;wreg free
 10448                           
 10449                           ;UI.c: 429: lcdInst(0b11000000);;
 10450  00254A  0EC0               	movlw	192
 10451  00254C  EC51  F014         	call	i2_lcdInst
 10452                           
 10453                           ;UI.c: 430: printf("2. SORT        <");
 10454  002550  0E57               	movlw	low STR_19
 10455  002552  6E0D               	movwf	i2printf@f,c
 10456  002554  0EFF               	movlw	high STR_19
 10457  002556  6E0E               	movwf	i2printf@f+1,c
 10458  002558  ECAF  F004         	call	i2_printf	;wreg free
 10459  00255C  0012               	return		;funcret
 10460  00255E                     __end_of_change_state_to_menu_12:
 10461                           	opt stack 0
 10462                           pclatu	equ	0xFFB
 10463                           pclath	equ	0xFFA
 10464                           tblptru	equ	0xFF8
 10465                           tblptrh	equ	0xFF7
 10466                           tblptrl	equ	0xFF6
 10467                           tablat	equ	0xFF5
 10468                           prodh	equ	0xFF4
 10469                           prodl	equ	0xFF3
 10470                           intcon	equ	0xFF2
 10471                           intcon3	equ	0xFF0
 10472                           indf0	equ	0xFEF
 10473                           postinc0	equ	0xFEE
 10474                           fsr0h	equ	0xFEA
 10475                           fsr0l	equ	0xFE9
 10476                           wreg	equ	0xFE8
 10477                           postdec1	equ	0xFE5
 10478                           fsr1h	equ	0xFE2
 10479                           fsr1l	equ	0xFE1
 10480                           indf2	equ	0xFDF
 10481                           postinc2	equ	0xFDE
 10482                           postdec2	equ	0xFDD
 10483                           fsr2h	equ	0xFDA
 10484                           fsr2l	equ	0xFD9
 10485                           status	equ	0xFD8
 10486                           
 10487 ;; *************** function _change_state_to_menu_11 *****************
 10488 ;; Defined at:
 10489 ;;		line 416 in file "UI.c"
 10490 ;; Parameters:    Size  Location     Type
 10491 ;;		None
 10492 ;; Auto vars:     Size  Location     Type
 10493 ;;		None
 10494 ;; Return value:  Size  Location     Type
 10495 ;;                  1    wreg      void 
 10496 ;; Registers used:
 10497 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10498 ;; Tracked objects:
 10499 ;;		On entry : 0/0
 10500 ;;		On exit  : 0/0
 10501 ;;		Unchanged: 0/0
 10502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10506 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10507 ;;Total ram usage:        0 bytes
 10508 ;; Hardware stack levels used:    1
 10509 ;; Hardware stack levels required when called:    3
 10510 ;; This function calls:
 10511 ;;		i2_lcdInst
 10512 ;;		i2_printf
 10513 ;; This function is called by:
 10514 ;;		_updateMenu
 10515 ;;		_inputHandler
 10516 ;; This function uses a non-reentrant model
 10517 ;;
 10518                           
 10519                           	psect	text48
 10520  00255E                     __ptext48:
 10521                           	opt stack 0
 10522  00255E                     _change_state_to_menu_11:
 10523                           	opt stack 18
 10524                           
 10525                           ;UI.c: 417: cur_state = 11;
 10526                           
 10527                           ;incstack = 0
 10528  00255E  0E00               	movlw	0
 10529  002560  0100               	movlb	0	; () banked
 10530  002562  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10531  002564  0E0B               	movlw	11
 10532  002566  6FE1               	movwf	_cur_state& (0+255),b
 10533                           
 10534                           ; BSR set to: 0
 10535                           ;UI.c: 419: lcdInst(0b10000000);;
 10536  002568  0E80               	movlw	128
 10537  00256A  EC51  F014         	call	i2_lcdInst
 10538                           
 10539                           ;UI.c: 420: printf("1. DATE/TIME   <");
 10540  00256E  0E68               	movlw	low STR_16
 10541  002570  6E0D               	movwf	i2printf@f,c
 10542  002572  0EFF               	movlw	high STR_16
 10543  002574  6E0E               	movwf	i2printf@f+1,c
 10544  002576  ECAF  F004         	call	i2_printf	;wreg free
 10545                           
 10546                           ;UI.c: 421: lcdInst(0b11000000);;
 10547  00257A  0EC0               	movlw	192
 10548  00257C  EC51  F014         	call	i2_lcdInst
 10549                           
 10550                           ;UI.c: 422: printf("2. SORT         ");
 10551  002580  0E7A               	movlw	low STR_17
 10552  002582  6E0D               	movwf	i2printf@f,c
 10553  002584  0EFE               	movlw	high STR_17
 10554  002586  6E0E               	movwf	i2printf@f+1,c
 10555  002588  ECAF  F004         	call	i2_printf	;wreg free
 10556  00258C  0012               	return		;funcret
 10557  00258E                     __end_of_change_state_to_menu_11:
 10558                           	opt stack 0
 10559                           pclatu	equ	0xFFB
 10560                           pclath	equ	0xFFA
 10561                           tblptru	equ	0xFF8
 10562                           tblptrh	equ	0xFF7
 10563                           tblptrl	equ	0xFF6
 10564                           tablat	equ	0xFF5
 10565                           prodh	equ	0xFF4
 10566                           prodl	equ	0xFF3
 10567                           intcon	equ	0xFF2
 10568                           intcon3	equ	0xFF0
 10569                           indf0	equ	0xFEF
 10570                           postinc0	equ	0xFEE
 10571                           fsr0h	equ	0xFEA
 10572                           fsr0l	equ	0xFE9
 10573                           wreg	equ	0xFE8
 10574                           postdec1	equ	0xFE5
 10575                           fsr1h	equ	0xFE2
 10576                           fsr1l	equ	0xFE1
 10577                           indf2	equ	0xFDF
 10578                           postinc2	equ	0xFDE
 10579                           postdec2	equ	0xFDD
 10580                           fsr2h	equ	0xFDA
 10581                           fsr2l	equ	0xFD9
 10582                           status	equ	0xFD8
 10583                           
 10584 ;; *************** function _change_state_to_logs_34 *****************
 10585 ;; Defined at:
 10586 ;;		line 483 in file "UI.c"
 10587 ;; Parameters:    Size  Location     Type
 10588 ;;		None
 10589 ;; Auto vars:     Size  Location     Type
 10590 ;;		None
 10591 ;; Return value:  Size  Location     Type
 10592 ;;                  1    wreg      void 
 10593 ;; Registers used:
 10594 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10595 ;; Tracked objects:
 10596 ;;		On entry : 0/0
 10597 ;;		On exit  : 0/0
 10598 ;;		Unchanged: 0/0
 10599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10604 ;;Total ram usage:        0 bytes
 10605 ;; Hardware stack levels used:    1
 10606 ;; Hardware stack levels required when called:    3
 10607 ;; This function calls:
 10608 ;;		i2_lcdInst
 10609 ;;		i2_printf
 10610 ;; This function is called by:
 10611 ;;		_updateMenu
 10612 ;;		_inputHandler
 10613 ;; This function uses a non-reentrant model
 10614 ;;
 10615                           
 10616                           	psect	text49
 10617  00258E                     __ptext49:
 10618                           	opt stack 0
 10619  00258E                     _change_state_to_logs_34:
 10620                           	opt stack 18
 10621                           
 10622                           ;UI.c: 484: cur_state = 1034;
 10623                           
 10624                           ;incstack = 0
 10625  00258E  0E04               	movlw	4
 10626  002590  0100               	movlb	0	; () banked
 10627  002592  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10628  002594  0E0A               	movlw	10
 10629  002596  6FE1               	movwf	_cur_state& (0+255),b
 10630                           
 10631                           ; BSR set to: 0
 10632                           ;UI.c: 485: lcdInst(0b10000000);;
 10633  002598  0E80               	movlw	128
 10634  00259A  EC51  F014         	call	i2_lcdInst
 10635                           
 10636                           ;UI.c: 486: printf("LOG 3           ");
 10637  00259E  0E47               	movlw	low STR_29
 10638  0025A0  6E0D               	movwf	i2printf@f,c
 10639  0025A2  0EFE               	movlw	high STR_29
 10640  0025A4  6E0E               	movwf	i2printf@f+1,c
 10641  0025A6  ECAF  F004         	call	i2_printf	;wreg free
 10642                           
 10643                           ;UI.c: 487: lcdInst(0b11000000);;
 10644  0025AA  0EC0               	movlw	192
 10645  0025AC  EC51  F014         	call	i2_lcdInst
 10646                           
 10647                           ;UI.c: 488: printf("LOG 4          <");
 10648  0025B0  0E35               	movlw	low STR_35
 10649  0025B2  6E0D               	movwf	i2printf@f,c
 10650  0025B4  0EFF               	movlw	high STR_35
 10651  0025B6  6E0E               	movwf	i2printf@f+1,c
 10652  0025B8  ECAF  F004         	call	i2_printf	;wreg free
 10653  0025BC  0012               	return		;funcret
 10654  0025BE                     __end_of_change_state_to_logs_34:
 10655                           	opt stack 0
 10656                           pclatu	equ	0xFFB
 10657                           pclath	equ	0xFFA
 10658                           tblptru	equ	0xFF8
 10659                           tblptrh	equ	0xFF7
 10660                           tblptrl	equ	0xFF6
 10661                           tablat	equ	0xFF5
 10662                           prodh	equ	0xFF4
 10663                           prodl	equ	0xFF3
 10664                           intcon	equ	0xFF2
 10665                           intcon3	equ	0xFF0
 10666                           indf0	equ	0xFEF
 10667                           postinc0	equ	0xFEE
 10668                           fsr0h	equ	0xFEA
 10669                           fsr0l	equ	0xFE9
 10670                           wreg	equ	0xFE8
 10671                           postdec1	equ	0xFE5
 10672                           fsr1h	equ	0xFE2
 10673                           fsr1l	equ	0xFE1
 10674                           indf2	equ	0xFDF
 10675                           postinc2	equ	0xFDE
 10676                           postdec2	equ	0xFDD
 10677                           fsr2h	equ	0xFDA
 10678                           fsr2l	equ	0xFD9
 10679                           status	equ	0xFD8
 10680                           
 10681 ;; *************** function _change_state_to_logs_33 *****************
 10682 ;; Defined at:
 10683 ;;		line 476 in file "UI.c"
 10684 ;; Parameters:    Size  Location     Type
 10685 ;;		None
 10686 ;; Auto vars:     Size  Location     Type
 10687 ;;		None
 10688 ;; Return value:  Size  Location     Type
 10689 ;;                  1    wreg      void 
 10690 ;; Registers used:
 10691 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10692 ;; Tracked objects:
 10693 ;;		On entry : 0/0
 10694 ;;		On exit  : 0/0
 10695 ;;		Unchanged: 0/0
 10696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10701 ;;Total ram usage:        0 bytes
 10702 ;; Hardware stack levels used:    1
 10703 ;; Hardware stack levels required when called:    3
 10704 ;; This function calls:
 10705 ;;		i2_lcdInst
 10706 ;;		i2_printf
 10707 ;; This function is called by:
 10708 ;;		_updateMenu
 10709 ;;		_inputHandler
 10710 ;; This function uses a non-reentrant model
 10711 ;;
 10712                           
 10713                           	psect	text50
 10714  0025BE                     __ptext50:
 10715                           	opt stack 0
 10716  0025BE                     _change_state_to_logs_33:
 10717                           	opt stack 18
 10718                           
 10719                           ;UI.c: 477: cur_state = 1033;
 10720                           
 10721                           ;incstack = 0
 10722  0025BE  0E04               	movlw	4
 10723  0025C0  0100               	movlb	0	; () banked
 10724  0025C2  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10725  0025C4  0E09               	movlw	9
 10726  0025C6  6FE1               	movwf	_cur_state& (0+255),b
 10727                           
 10728                           ; BSR set to: 0
 10729                           ;UI.c: 478: lcdInst(0b10000000);;
 10730  0025C8  0E80               	movlw	128
 10731  0025CA  EC51  F014         	call	i2_lcdInst
 10732                           
 10733                           ;UI.c: 479: printf("LOG 3          <");
 10734  0025CE  0E24               	movlw	low STR_31
 10735  0025D0  6E0D               	movwf	i2printf@f,c
 10736  0025D2  0EFF               	movlw	high STR_31
 10737  0025D4  6E0E               	movwf	i2printf@f+1,c
 10738  0025D6  ECAF  F004         	call	i2_printf	;wreg free
 10739                           
 10740                           ;UI.c: 480: lcdInst(0b11000000);;
 10741  0025DA  0EC0               	movlw	192
 10742  0025DC  EC51  F014         	call	i2_lcdInst
 10743                           
 10744                           ;UI.c: 481: printf("LOG 4           ");
 10745  0025E0  0E58               	movlw	low STR_33
 10746  0025E2  6E0D               	movwf	i2printf@f,c
 10747  0025E4  0EFE               	movlw	high STR_33
 10748  0025E6  6E0E               	movwf	i2printf@f+1,c
 10749  0025E8  ECAF  F004         	call	i2_printf	;wreg free
 10750  0025EC  0012               	return		;funcret
 10751  0025EE                     __end_of_change_state_to_logs_33:
 10752                           	opt stack 0
 10753                           pclatu	equ	0xFFB
 10754                           pclath	equ	0xFFA
 10755                           tblptru	equ	0xFF8
 10756                           tblptrh	equ	0xFF7
 10757                           tblptrl	equ	0xFF6
 10758                           tablat	equ	0xFF5
 10759                           prodh	equ	0xFF4
 10760                           prodl	equ	0xFF3
 10761                           intcon	equ	0xFF2
 10762                           intcon3	equ	0xFF0
 10763                           indf0	equ	0xFEF
 10764                           postinc0	equ	0xFEE
 10765                           fsr0h	equ	0xFEA
 10766                           fsr0l	equ	0xFE9
 10767                           wreg	equ	0xFE8
 10768                           postdec1	equ	0xFE5
 10769                           fsr1h	equ	0xFE2
 10770                           fsr1l	equ	0xFE1
 10771                           indf2	equ	0xFDF
 10772                           postinc2	equ	0xFDE
 10773                           postdec2	equ	0xFDD
 10774                           fsr2h	equ	0xFDA
 10775                           fsr2l	equ	0xFD9
 10776                           status	equ	0xFD8
 10777                           
 10778 ;; *************** function _change_state_to_logs_23 *****************
 10779 ;; Defined at:
 10780 ;;		line 469 in file "UI.c"
 10781 ;; Parameters:    Size  Location     Type
 10782 ;;		None
 10783 ;; Auto vars:     Size  Location     Type
 10784 ;;		None
 10785 ;; Return value:  Size  Location     Type
 10786 ;;                  1    wreg      void 
 10787 ;; Registers used:
 10788 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10789 ;; Tracked objects:
 10790 ;;		On entry : 0/0
 10791 ;;		On exit  : 0/0
 10792 ;;		Unchanged: 0/0
 10793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10798 ;;Total ram usage:        0 bytes
 10799 ;; Hardware stack levels used:    1
 10800 ;; Hardware stack levels required when called:    3
 10801 ;; This function calls:
 10802 ;;		i2_lcdInst
 10803 ;;		i2_printf
 10804 ;; This function is called by:
 10805 ;;		_updateMenu
 10806 ;;		_inputHandler
 10807 ;; This function uses a non-reentrant model
 10808 ;;
 10809                           
 10810                           	psect	text51
 10811  0026AC                     __ptext51:
 10812                           	opt stack 0
 10813  0026AC                     _change_state_to_logs_23:
 10814                           	opt stack 18
 10815                           
 10816                           ;UI.c: 470: cur_state = 1023;
 10817                           
 10818                           ;incstack = 0
 10819  0026AC  0E03               	movlw	3
 10820  0026AE  0100               	movlb	0	; () banked
 10821  0026B0  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10822  0026B2  69E1               	setf	_cur_state& (0+255),b
 10823                           
 10824                           ; BSR set to: 0
 10825                           ;UI.c: 471: lcdInst(0b10000000);;
 10826  0026B4  0E80               	movlw	128
 10827  0026B6  EC51  F014         	call	i2_lcdInst
 10828                           
 10829                           ;UI.c: 472: printf("LOG 2           ");
 10830  0026BA  0E36               	movlw	low STR_25
 10831  0026BC  6E0D               	movwf	i2printf@f,c
 10832  0026BE  0EFE               	movlw	high STR_25
 10833  0026C0  6E0E               	movwf	i2printf@f+1,c
 10834  0026C2  ECAF  F004         	call	i2_printf	;wreg free
 10835                           
 10836                           ;UI.c: 473: lcdInst(0b11000000);;
 10837  0026C6  0EC0               	movlw	192
 10838  0026C8  EC51  F014         	call	i2_lcdInst
 10839                           
 10840                           ;UI.c: 474: printf("LOG 3          <");
 10841  0026CC  0E24               	movlw	low STR_31
 10842  0026CE  6E0D               	movwf	i2printf@f,c
 10843  0026D0  0EFF               	movlw	high STR_31
 10844  0026D2  6E0E               	movwf	i2printf@f+1,c
 10845  0026D4  ECAF  F004         	call	i2_printf	;wreg free
 10846  0026D8  0012               	return		;funcret
 10847  0026DA                     __end_of_change_state_to_logs_23:
 10848                           	opt stack 0
 10849                           pclatu	equ	0xFFB
 10850                           pclath	equ	0xFFA
 10851                           tblptru	equ	0xFF8
 10852                           tblptrh	equ	0xFF7
 10853                           tblptrl	equ	0xFF6
 10854                           tablat	equ	0xFF5
 10855                           prodh	equ	0xFF4
 10856                           prodl	equ	0xFF3
 10857                           intcon	equ	0xFF2
 10858                           intcon3	equ	0xFF0
 10859                           indf0	equ	0xFEF
 10860                           postinc0	equ	0xFEE
 10861                           fsr0h	equ	0xFEA
 10862                           fsr0l	equ	0xFE9
 10863                           wreg	equ	0xFE8
 10864                           postdec1	equ	0xFE5
 10865                           fsr1h	equ	0xFE2
 10866                           fsr1l	equ	0xFE1
 10867                           indf2	equ	0xFDF
 10868                           postinc2	equ	0xFDE
 10869                           postdec2	equ	0xFDD
 10870                           fsr2h	equ	0xFDA
 10871                           fsr2l	equ	0xFD9
 10872                           status	equ	0xFD8
 10873                           
 10874 ;; *************** function _change_state_to_logs_22 *****************
 10875 ;; Defined at:
 10876 ;;		line 462 in file "UI.c"
 10877 ;; Parameters:    Size  Location     Type
 10878 ;;		None
 10879 ;; Auto vars:     Size  Location     Type
 10880 ;;		None
 10881 ;; Return value:  Size  Location     Type
 10882 ;;                  1    wreg      void 
 10883 ;; Registers used:
 10884 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10885 ;; Tracked objects:
 10886 ;;		On entry : 0/0
 10887 ;;		On exit  : 0/0
 10888 ;;		Unchanged: 0/0
 10889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10893 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10894 ;;Total ram usage:        0 bytes
 10895 ;; Hardware stack levels used:    1
 10896 ;; Hardware stack levels required when called:    3
 10897 ;; This function calls:
 10898 ;;		i2_lcdInst
 10899 ;;		i2_printf
 10900 ;; This function is called by:
 10901 ;;		_updateMenu
 10902 ;;		_inputHandler
 10903 ;; This function uses a non-reentrant model
 10904 ;;
 10905                           
 10906                           	psect	text52
 10907  0025EE                     __ptext52:
 10908                           	opt stack 0
 10909  0025EE                     _change_state_to_logs_22:
 10910                           	opt stack 18
 10911                           
 10912                           ;UI.c: 463: cur_state = 1022;
 10913                           
 10914                           ;incstack = 0
 10915  0025EE  0E03               	movlw	3
 10916  0025F0  0100               	movlb	0	; () banked
 10917  0025F2  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10918  0025F4  0EFE               	movlw	254
 10919  0025F6  6FE1               	movwf	_cur_state& (0+255),b
 10920                           
 10921                           ; BSR set to: 0
 10922                           ;UI.c: 464: lcdInst(0b10000000);;
 10923  0025F8  0E80               	movlw	128
 10924  0025FA  EC51  F014         	call	i2_lcdInst
 10925                           
 10926                           ;UI.c: 465: printf("LOG 2          <");
 10927  0025FE  0E13               	movlw	low STR_27
 10928  002600  6E0D               	movwf	i2printf@f,c
 10929  002602  0EFF               	movlw	high STR_27
 10930  002604  6E0E               	movwf	i2printf@f+1,c
 10931  002606  ECAF  F004         	call	i2_printf	;wreg free
 10932                           
 10933                           ;UI.c: 466: lcdInst(0b11000000);;
 10934  00260A  0EC0               	movlw	192
 10935  00260C  EC51  F014         	call	i2_lcdInst
 10936                           
 10937                           ;UI.c: 467: printf("LOG 3           ");
 10938  002610  0E47               	movlw	low STR_29
 10939  002612  6E0D               	movwf	i2printf@f,c
 10940  002614  0EFE               	movlw	high STR_29
 10941  002616  6E0E               	movwf	i2printf@f+1,c
 10942  002618  ECAF  F004         	call	i2_printf	;wreg free
 10943  00261C  0012               	return		;funcret
 10944  00261E                     __end_of_change_state_to_logs_22:
 10945                           	opt stack 0
 10946                           pclatu	equ	0xFFB
 10947                           pclath	equ	0xFFA
 10948                           tblptru	equ	0xFF8
 10949                           tblptrh	equ	0xFF7
 10950                           tblptrl	equ	0xFF6
 10951                           tablat	equ	0xFF5
 10952                           prodh	equ	0xFF4
 10953                           prodl	equ	0xFF3
 10954                           intcon	equ	0xFF2
 10955                           intcon3	equ	0xFF0
 10956                           indf0	equ	0xFEF
 10957                           postinc0	equ	0xFEE
 10958                           fsr0h	equ	0xFEA
 10959                           fsr0l	equ	0xFE9
 10960                           wreg	equ	0xFE8
 10961                           postdec1	equ	0xFE5
 10962                           fsr1h	equ	0xFE2
 10963                           fsr1l	equ	0xFE1
 10964                           indf2	equ	0xFDF
 10965                           postinc2	equ	0xFDE
 10966                           postdec2	equ	0xFDD
 10967                           fsr2h	equ	0xFDA
 10968                           fsr2l	equ	0xFD9
 10969                           status	equ	0xFD8
 10970                           
 10971 ;; *************** function _change_state_to_logs_12 *****************
 10972 ;; Defined at:
 10973 ;;		line 455 in file "UI.c"
 10974 ;; Parameters:    Size  Location     Type
 10975 ;;		None
 10976 ;; Auto vars:     Size  Location     Type
 10977 ;;		None
 10978 ;; Return value:  Size  Location     Type
 10979 ;;                  1    wreg      void 
 10980 ;; Registers used:
 10981 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10982 ;; Tracked objects:
 10983 ;;		On entry : 0/0
 10984 ;;		On exit  : 0/0
 10985 ;;		Unchanged: 0/0
 10986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10990 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10991 ;;Total ram usage:        0 bytes
 10992 ;; Hardware stack levels used:    1
 10993 ;; Hardware stack levels required when called:    3
 10994 ;; This function calls:
 10995 ;;		i2_lcdInst
 10996 ;;		i2_printf
 10997 ;; This function is called by:
 10998 ;;		_updateMenu
 10999 ;;		_inputHandler
 11000 ;; This function uses a non-reentrant model
 11001 ;;
 11002                           
 11003                           	psect	text53
 11004  00261E                     __ptext53:
 11005                           	opt stack 0
 11006  00261E                     _change_state_to_logs_12:
 11007                           	opt stack 18
 11008                           
 11009                           ;UI.c: 456: cur_state = 1012;
 11010                           
 11011                           ;incstack = 0
 11012  00261E  0E03               	movlw	3
 11013  002620  0100               	movlb	0	; () banked
 11014  002622  6FE2               	movwf	(_cur_state+1)& (0+255),b
 11015  002624  0EF4               	movlw	244
 11016  002626  6FE1               	movwf	_cur_state& (0+255),b
 11017                           
 11018                           ; BSR set to: 0
 11019                           ;UI.c: 457: lcdInst(0b10000000);;
 11020  002628  0E80               	movlw	128
 11021  00262A  EC51  F014         	call	i2_lcdInst
 11022                           
 11023                           ;UI.c: 458: printf("LOG 1           ");
 11024  00262E  0E25               	movlw	low STR_26
 11025  002630  6E0D               	movwf	i2printf@f,c
 11026  002632  0EFE               	movlw	high STR_26
 11027  002634  6E0E               	movwf	i2printf@f+1,c
 11028  002636  ECAF  F004         	call	i2_printf	;wreg free
 11029                           
 11030                           ;UI.c: 459: lcdInst(0b11000000);;
 11031  00263A  0EC0               	movlw	192
 11032  00263C  EC51  F014         	call	i2_lcdInst
 11033                           
 11034                           ;UI.c: 460: printf("LOG 2          <");
 11035  002640  0E13               	movlw	low STR_27
 11036  002642  6E0D               	movwf	i2printf@f,c
 11037  002644  0EFF               	movlw	high STR_27
 11038  002646  6E0E               	movwf	i2printf@f+1,c
 11039  002648  ECAF  F004         	call	i2_printf	;wreg free
 11040  00264C  0012               	return		;funcret
 11041  00264E                     __end_of_change_state_to_logs_12:
 11042                           	opt stack 0
 11043                           pclatu	equ	0xFFB
 11044                           pclath	equ	0xFFA
 11045                           tblptru	equ	0xFF8
 11046                           tblptrh	equ	0xFF7
 11047                           tblptrl	equ	0xFF6
 11048                           tablat	equ	0xFF5
 11049                           prodh	equ	0xFF4
 11050                           prodl	equ	0xFF3
 11051                           intcon	equ	0xFF2
 11052                           intcon3	equ	0xFF0
 11053                           indf0	equ	0xFEF
 11054                           postinc0	equ	0xFEE
 11055                           fsr0h	equ	0xFEA
 11056                           fsr0l	equ	0xFE9
 11057                           wreg	equ	0xFE8
 11058                           postdec1	equ	0xFE5
 11059                           fsr1h	equ	0xFE2
 11060                           fsr1l	equ	0xFE1
 11061                           indf2	equ	0xFDF
 11062                           postinc2	equ	0xFDE
 11063                           postdec2	equ	0xFDD
 11064                           fsr2h	equ	0xFDA
 11065                           fsr2l	equ	0xFD9
 11066                           status	equ	0xFD8
 11067                           
 11068 ;; *************** function _change_state_to_logs_11 *****************
 11069 ;; Defined at:
 11070 ;;		line 448 in file "UI.c"
 11071 ;; Parameters:    Size  Location     Type
 11072 ;;		None
 11073 ;; Auto vars:     Size  Location     Type
 11074 ;;		None
 11075 ;; Return value:  Size  Location     Type
 11076 ;;                  1    wreg      void 
 11077 ;; Registers used:
 11078 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11079 ;; Tracked objects:
 11080 ;;		On entry : 0/0
 11081 ;;		On exit  : 0/0
 11082 ;;		Unchanged: 0/0
 11083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11088 ;;Total ram usage:        0 bytes
 11089 ;; Hardware stack levels used:    1
 11090 ;; Hardware stack levels required when called:    3
 11091 ;; This function calls:
 11092 ;;		i2_lcdInst
 11093 ;;		i2_printf
 11094 ;; This function is called by:
 11095 ;;		_updateMenu
 11096 ;;		_inputHandler
 11097 ;; This function uses a non-reentrant model
 11098 ;;
 11099                           
 11100                           	psect	text54
 11101  00264E                     __ptext54:
 11102                           	opt stack 0
 11103  00264E                     _change_state_to_logs_11:
 11104                           	opt stack 18
 11105                           
 11106                           ;UI.c: 449: cur_state = 1011;
 11107                           
 11108                           ;incstack = 0
 11109  00264E  0E03               	movlw	3
 11110  002650  0100               	movlb	0	; () banked
 11111  002652  6FE2               	movwf	(_cur_state+1)& (0+255),b
 11112  002654  0EF3               	movlw	243
 11113  002656  6FE1               	movwf	_cur_state& (0+255),b
 11114                           
 11115                           ; BSR set to: 0
 11116                           ;UI.c: 450: lcdInst(0b10000000);;
 11117  002658  0E80               	movlw	128
 11118  00265A  EC51  F014         	call	i2_lcdInst
 11119                           
 11120                           ;UI.c: 451: printf("LOG 1          <");
 11121  00265E  0E02               	movlw	low STR_24
 11122  002660  6E0D               	movwf	i2printf@f,c
 11123  002662  0EFF               	movlw	high STR_24
 11124  002664  6E0E               	movwf	i2printf@f+1,c
 11125  002666  ECAF  F004         	call	i2_printf	;wreg free
 11126                           
 11127                           ;UI.c: 452: lcdInst(0b11000000);;
 11128  00266A  0EC0               	movlw	192
 11129  00266C  EC51  F014         	call	i2_lcdInst
 11130                           
 11131                           ;UI.c: 453: printf("LOG 2           ");
 11132  002670  0E36               	movlw	low STR_25
 11133  002672  6E0D               	movwf	i2printf@f,c
 11134  002674  0EFE               	movlw	high STR_25
 11135  002676  6E0E               	movwf	i2printf@f+1,c
 11136  002678  ECAF  F004         	call	i2_printf	;wreg free
 11137  00267C  0012               	return		;funcret
 11138  00267E                     __end_of_change_state_to_logs_11:
 11139                           	opt stack 0
 11140                           pclatu	equ	0xFFB
 11141                           pclath	equ	0xFFA
 11142                           tblptru	equ	0xFF8
 11143                           tblptrh	equ	0xFF7
 11144                           tblptrl	equ	0xFF6
 11145                           tablat	equ	0xFF5
 11146                           prodh	equ	0xFF4
 11147                           prodl	equ	0xFF3
 11148                           intcon	equ	0xFF2
 11149                           intcon3	equ	0xFF0
 11150                           indf0	equ	0xFEF
 11151                           postinc0	equ	0xFEE
 11152                           fsr0h	equ	0xFEA
 11153                           fsr0l	equ	0xFE9
 11154                           wreg	equ	0xFE8
 11155                           postdec1	equ	0xFE5
 11156                           fsr1h	equ	0xFE2
 11157                           fsr1l	equ	0xFE1
 11158                           indf2	equ	0xFDF
 11159                           postinc2	equ	0xFDE
 11160                           postdec2	equ	0xFDD
 11161                           fsr2h	equ	0xFDA
 11162                           fsr2l	equ	0xFD9
 11163                           status	equ	0xFD8
 11164                           
 11165 ;; *************** function _dispLogs *****************
 11166 ;; Defined at:
 11167 ;;		line 402 in file "UI.c"
 11168 ;; Parameters:    Size  Location     Type
 11169 ;;  myLog           2    0[COMRAM] int 
 11170 ;; Auto vars:     Size  Location     Type
 11171 ;;		None
 11172 ;; Return value:  Size  Location     Type
 11173 ;;                  1    wreg      void 
 11174 ;; Registers used:
 11175 ;;		wreg, status,2
 11176 ;; Tracked objects:
 11177 ;;		On entry : 0/0
 11178 ;;		On exit  : 0/0
 11179 ;;		Unchanged: 0/0
 11180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11181 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11184 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11185 ;;Total ram usage:        2 bytes
 11186 ;; Hardware stack levels used:    1
 11187 ;; This function calls:
 11188 ;;		Nothing
 11189 ;; This function is called by:
 11190 ;;		_updateMenu
 11191 ;; This function uses a non-reentrant model
 11192 ;;
 11193                           
 11194                           	psect	text55
 11195  00283E                     __ptext55:
 11196                           	opt stack 0
 11197  00283E                     _dispLogs:
 11198                           	opt stack 22
 11199                           
 11200                           ;UI.c: 403: logstate = 1;
 11201                           
 11202                           ;incstack = 0
 11203  00283E  0E00               	movlw	0
 11204  002840  0100               	movlb	0	; () banked
 11205  002842  6FF0               	movwf	(_logstate+1)& (0+255),b
 11206  002844  0E01               	movlw	1
 11207  002846  6FEF               	movwf	_logstate& (0+255),b
 11208                           
 11209                           ; BSR set to: 0
 11210                           ;UI.c: 404: log = myLog;
 11211  002848  C001  F0ED         	movff	dispLogs@myLog,_log
 11212  00284C  C002  F0EE         	movff	dispLogs@myLog+1,_log+1
 11213                           
 11214                           ; BSR set to: 0
 11215  002850  0012               	return		;funcret
 11216  002852                     __end_of_dispLogs:
 11217                           	opt stack 0
 11218                           pclatu	equ	0xFFB
 11219                           pclath	equ	0xFFA
 11220                           tblptru	equ	0xFF8
 11221                           tblptrh	equ	0xFF7
 11222                           tblptrl	equ	0xFF6
 11223                           tablat	equ	0xFF5
 11224                           prodh	equ	0xFF4
 11225                           prodl	equ	0xFF3
 11226                           intcon	equ	0xFF2
 11227                           intcon3	equ	0xFF0
 11228                           indf0	equ	0xFEF
 11229                           postinc0	equ	0xFEE
 11230                           fsr0h	equ	0xFEA
 11231                           fsr0l	equ	0xFE9
 11232                           wreg	equ	0xFE8
 11233                           postdec1	equ	0xFE5
 11234                           fsr1h	equ	0xFE2
 11235                           fsr1l	equ	0xFE1
 11236                           indf2	equ	0xFDF
 11237                           postinc2	equ	0xFDE
 11238                           postdec2	equ	0xFDD
 11239                           fsr2h	equ	0xFDA
 11240                           fsr2l	equ	0xFD9
 11241                           status	equ	0xFD8
 11242                           
 11243 ;; *************** function _printSortTimer *****************
 11244 ;; Defined at:
 11245 ;;		line 138 in file "sort.c"
 11246 ;; Parameters:    Size  Location     Type
 11247 ;;		None
 11248 ;; Auto vars:     Size  Location     Type
 11249 ;;  i               2   72[COMRAM] int 
 11250 ;;  curTime        14   44[COMRAM] int [7]
 11251 ;;  timeDiff        2   70[COMRAM] unsigned int 
 11252 ;;  sec             2   66[COMRAM] int 
 11253 ;;  min             2   64[COMRAM] int 
 11254 ;;  hour            2   62[COMRAM] int 
 11255 ;;  cur_sec         2   60[COMRAM] unsigned int 
 11256 ;;  start_sec       2   58[COMRAM] unsigned int 
 11257 ;; Return value:  Size  Location     Type
 11258 ;;                  1    wreg      void 
 11259 ;; Registers used:
 11260 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11261 ;; Tracked objects:
 11262 ;;		On entry : 0/0
 11263 ;;		On exit  : 0/0
 11264 ;;		Unchanged: 0/0
 11265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11267 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11268 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11269 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11270 ;;Total ram usage:       33 bytes
 11271 ;; Hardware stack levels used:    1
 11272 ;; Hardware stack levels required when called:    3
 11273 ;; This function calls:
 11274 ;;		i2___lwdiv
 11275 ;;		i2___lwmod
 11276 ;;		i2___wmul
 11277 ;;		i2_getRTC
 11278 ;;		i2_lcdInst
 11279 ;;		i2_printf
 11280 ;; This function is called by:
 11281 ;;		_handler
 11282 ;; This function uses a non-reentrant model
 11283 ;;
 11284                           
 11285                           	psect	text56
 11286  001464                     __ptext56:
 11287                           	opt stack 0
 11288  001464                     _printSortTimer:
 11289                           	opt stack 20
 11290                           
 11291                           ;sort.c: 139: getRTC();
 11292                           
 11293                           ; BSR set to: 0
 11294                           ;incstack = 0
 11295  001464  EC32  F010         	call	i2_getRTC	;wreg free
 11296                           
 11297                           ;sort.c: 140: int curTime[7];
 11298                           ;sort.c: 141: for(int i = 0; i < 7; i++){
 11299  001468  0E00               	movlw	0
 11300  00146A  6E4A               	movwf	printSortTimer@i+1,c
 11301  00146C  0E00               	movlw	0
 11302  00146E  6E49               	movwf	printSortTimer@i,c
 11303  001470                     i2l5207:
 11304  001470  BE4A               	btfsc	printSortTimer@i+1,7,c
 11305  001472  D006               	goto	i2l5211
 11306  001474  504A               	movf	printSortTimer@i+1,w,c
 11307  001476  E131               	bnz	i2l5217
 11308  001478  0E07               	movlw	7
 11309  00147A  5C49               	subwf	printSortTimer@i,w,c
 11310  00147C  B0D8               	btfsc	status,0,c
 11311  00147E  D02D               	goto	i2l5217
 11312  001480                     i2l5211:
 11313                           
 11314                           ;sort.c: 142: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 11315  001480  0ED4               	movlw	low _time
 11316  001482  2449               	addwf	printSortTimer@i,w,c
 11317  001484  6ED9               	movwf	fsr2l,c
 11318  001486  0E00               	movlw	high _time
 11319  001488  204A               	addwfc	printSortTimer@i+1,w,c
 11320  00148A  6EDA               	movwf	fsr2h,c
 11321  00148C  50DF               	movf	indf2,w,c
 11322  00148E  6E2A               	movwf	??_printSortTimer& (0+255),c
 11323  001490  3A2A               	swapf	??_printSortTimer,f,c
 11324  001492  0E0F               	movlw	15
 11325  001494  162A               	andwf	??_printSortTimer,f,c
 11326  001496  0E0F               	movlw	15
 11327  001498  162A               	andwf	??_printSortTimer,f,c
 11328  00149A  502A               	movf	??_printSortTimer,w,c
 11329  00149C  0D0A               	mullw	10
 11330  00149E  0ED4               	movlw	low _time
 11331  0014A0  2449               	addwf	printSortTimer@i,w,c
 11332  0014A2  6ED9               	movwf	fsr2l,c
 11333  0014A4  0E00               	movlw	high _time
 11334  0014A6  204A               	addwfc	printSortTimer@i+1,w,c
 11335  0014A8  6EDA               	movwf	fsr2h,c
 11336  0014AA  50DF               	movf	indf2,w,c
 11337  0014AC  0B0F               	andlw	15
 11338  0014AE  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 11339  0014B0  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 11340  0014B2  50F3               	movf	prodl,w,c
 11341  0014B4  262B               	addwf	??_printSortTimer+1,f,c
 11342  0014B6  50F4               	movf	prodh,w,c
 11343  0014B8  222C               	addwfc	??_printSortTimer+2,f,c
 11344  0014BA  90D8               	bcf	status,0,c
 11345  0014BC  3449               	rlcf	printSortTimer@i,w,c
 11346  0014BE  6ED9               	movwf	fsr2l,c
 11347  0014C0  344A               	rlcf	printSortTimer@i+1,w,c
 11348  0014C2  6EDA               	movwf	fsr2h,c
 11349  0014C4  0E2D               	movlw	low printSortTimer@curTime
 11350  0014C6  26D9               	addwf	fsr2l,f,c
 11351  0014C8  0E00               	movlw	high printSortTimer@curTime
 11352  0014CA  22DA               	addwfc	fsr2h,f,c
 11353  0014CC  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 11354  0014D0  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 11355  0014D4  4A49               	infsnz	printSortTimer@i,f,c
 11356  0014D6  2A4A               	incf	printSortTimer@i+1,f,c
 11357  0014D8  D7CB               	goto	i2l5207
 11358  0014DA                     i2l5217:
 11359                           
 11360                           ;sort.c: 143: }
 11361                           ;sort.c: 144: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 11362  0014DA  C102  F001         	movff	_startTime+2,i2___wmul@multiplier
 11363  0014DE  C103  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 11364  0014E2  0E00               	movlw	0
 11365  0014E4  6E04               	movwf	i2___wmul@multiplicand+1,c
 11366  0014E6  0E3C               	movlw	60
 11367  0014E8  6E03               	movwf	i2___wmul@multiplicand,c
 11368  0014EA  ECAC  F013         	call	i2___wmul	;wreg free
 11369  0014EE  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 11370  0014F2  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 11371  0014F6  C104  F001         	movff	_startTime+4,i2___wmul@multiplier
 11372  0014FA  C105  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 11373  0014FE  0E0E               	movlw	14
 11374  001500  6E04               	movwf	i2___wmul@multiplicand+1,c
 11375  001502  0E10               	movlw	16
 11376  001504  6E03               	movwf	i2___wmul@multiplicand,c
 11377  001506  ECAC  F013         	call	i2___wmul	;wreg free
 11378  00150A  5001               	movf	?i2___wmul,w,c
 11379  00150C  262A               	addwf	??_printSortTimer,f,c
 11380  00150E  5002               	movf	?i2___wmul+1,w,c
 11381  001510  222B               	addwfc	??_printSortTimer+1,f,c
 11382  001512  0101               	movlb	1	; () banked
 11383  001514  5100               	movf	_startTime& (0+255),w,b
 11384  001516  242A               	addwf	??_printSortTimer,w,c
 11385  001518  6E3B               	movwf	printSortTimer@start_sec,c
 11386  00151A  0101               	movlb	1	; () banked
 11387  00151C  5101               	movf	(_startTime+1)& (0+255),w,b
 11388  00151E  202B               	addwfc	??_printSortTimer+1,w,c
 11389  001520  6E3C               	movwf	printSortTimer@start_sec+1,c
 11390                           
 11391                           ;sort.c: 145: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 11392  001522  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 11393  001526  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 11394  00152A  0E00               	movlw	0
 11395  00152C  6E04               	movwf	i2___wmul@multiplicand+1,c
 11396  00152E  0E3C               	movlw	60
 11397  001530  6E03               	movwf	i2___wmul@multiplicand,c
 11398  001532  ECAC  F013         	call	i2___wmul	;wreg free
 11399  001536  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 11400  00153A  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 11401  00153E  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 11402  001542  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 11403  001546  0E0E               	movlw	14
 11404  001548  6E04               	movwf	i2___wmul@multiplicand+1,c
 11405  00154A  0E10               	movlw	16
 11406  00154C  6E03               	movwf	i2___wmul@multiplicand,c
 11407  00154E  ECAC  F013         	call	i2___wmul	;wreg free
 11408  001552  5001               	movf	?i2___wmul,w,c
 11409  001554  262A               	addwf	??_printSortTimer,f,c
 11410  001556  5002               	movf	?i2___wmul+1,w,c
 11411  001558  222B               	addwfc	??_printSortTimer+1,f,c
 11412  00155A  502D               	movf	printSortTimer@curTime,w,c
 11413  00155C  242A               	addwf	??_printSortTimer,w,c
 11414  00155E  6E3D               	movwf	printSortTimer@cur_sec,c
 11415  001560  502E               	movf	printSortTimer@curTime+1,w,c
 11416  001562  202B               	addwfc	??_printSortTimer+1,w,c
 11417  001564  6E3E               	movwf	printSortTimer@cur_sec+1,c
 11418                           
 11419                           ;sort.c: 146: unsigned int timeDiff = cur_sec - start_sec;
 11420  001566  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 11421  00156A  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 11422  00156E  1E2A               	comf	??_printSortTimer,f,c
 11423  001570  1E2B               	comf	??_printSortTimer+1,f,c
 11424  001572  4A2A               	infsnz	??_printSortTimer,f,c
 11425  001574  2A2B               	incf	??_printSortTimer+1,f,c
 11426  001576  503D               	movf	printSortTimer@cur_sec,w,c
 11427  001578  242A               	addwf	??_printSortTimer,w,c
 11428  00157A  6E47               	movwf	printSortTimer@timeDiff,c
 11429  00157C  503E               	movf	printSortTimer@cur_sec+1,w,c
 11430  00157E  202B               	addwfc	??_printSortTimer+1,w,c
 11431  001580  6E48               	movwf	printSortTimer@timeDiff+1,c
 11432                           
 11433                           ;sort.c: 148: total_time = timeDiff;
 11434  001582  C047  F0F1         	movff	printSortTimer@timeDiff,_total_time
 11435  001586  C048  F0F2         	movff	printSortTimer@timeDiff+1,_total_time+1
 11436                           
 11437                           ;sort.c: 150: if(timeDiff >= 179){
 11438  00158A  5048               	movf	printSortTimer@timeDiff+1,w,c
 11439  00158C  E104               	bnz	i2u441_40
 11440  00158E  0EB3               	movlw	179
 11441  001590  5C47               	subwf	printSortTimer@timeDiff,w,c
 11442  001592  A0D8               	btfss	status,0,c
 11443  001594  D003               	goto	i2l5227
 11444  001596                     i2u441_40:
 11445                           
 11446                           ;sort.c: 151: machine_state = DoneSorting_state;
 11447  001596  0E02               	movlw	2
 11448  001598  0100               	movlb	0	; () banked
 11449  00159A  6FF4               	movwf	_machine_state& (0+255),b
 11450  00159C                     i2l5227:
 11451                           
 11452                           ;sort.c: 153: }
 11453                           ;sort.c: 155: int hour = timeDiff / 3600;
 11454  00159C  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 11455  0015A0  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 11456  0015A4  0E0E               	movlw	14
 11457  0015A6  6E09               	movwf	i2___lwdiv@divisor+1,c
 11458  0015A8  0E10               	movlw	16
 11459  0015AA  6E08               	movwf	i2___lwdiv@divisor,c
 11460  0015AC  EC2B  F011         	call	i2___lwdiv	;wreg free
 11461  0015B0  C006  F03F         	movff	?i2___lwdiv,printSortTimer@hour
 11462  0015B4  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 11463                           
 11464                           ;sort.c: 156: int min = (timeDiff % 3600) / 60;
 11465  0015B8  0E0E               	movlw	14
 11466  0015BA  6E04               	movwf	i2___lwmod@divisor+1,c
 11467  0015BC  0E10               	movlw	16
 11468  0015BE  6E03               	movwf	i2___lwmod@divisor,c
 11469  0015C0  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 11470  0015C4  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 11471  0015C8  ECC2  F011         	call	i2___lwmod	;wreg free
 11472  0015CC  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 11473  0015D0  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 11474  0015D4  0E00               	movlw	0
 11475  0015D6  6E09               	movwf	i2___lwdiv@divisor+1,c
 11476  0015D8  0E3C               	movlw	60
 11477  0015DA  6E08               	movwf	i2___lwdiv@divisor,c
 11478  0015DC  EC2B  F011         	call	i2___lwdiv	;wreg free
 11479  0015E0  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 11480  0015E4  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 11481                           
 11482                           ;sort.c: 157: int sec = (timeDiff % 3600) % 60;
 11483  0015E8  0E0E               	movlw	14
 11484  0015EA  6E04               	movwf	i2___lwmod@divisor+1,c
 11485  0015EC  0E10               	movlw	16
 11486  0015EE  6E03               	movwf	i2___lwmod@divisor,c
 11487  0015F0  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 11488  0015F4  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 11489  0015F8  ECC2  F011         	call	i2___lwmod	;wreg free
 11490  0015FC  C001  F045         	movff	?i2___lwmod,_printSortTimer$2028
 11491  001600  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2028+1
 11492                           
 11493                           ;sort.c: 157: int sec = (timeDiff % 3600) % 60;
 11494  001604  C045  F001         	movff	_printSortTimer$2028,i2___lwmod@dividend
 11495  001608  C046  F002         	movff	_printSortTimer$2028+1,i2___lwmod@dividend+1
 11496  00160C  0E00               	movlw	0
 11497  00160E  6E04               	movwf	i2___lwmod@divisor+1,c
 11498  001610  0E3C               	movlw	60
 11499  001612  6E03               	movwf	i2___lwmod@divisor,c
 11500  001614  ECC2  F011         	call	i2___lwmod	;wreg free
 11501  001618  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 11502  00161C  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 11503                           
 11504                           ;sort.c: 159: lcdInst(0b10000000);;
 11505  001620  0E80               	movlw	128
 11506  001622  EC51  F014         	call	i2_lcdInst
 11507                           
 11508                           ;sort.c: 160: printf("Sorting...");
 11509  001626  0EA9               	movlw	low STR_49
 11510  001628  6E0D               	movwf	i2printf@f,c
 11511  00162A  0EFF               	movlw	high STR_49
 11512  00162C  6E0E               	movwf	i2printf@f+1,c
 11513  00162E  ECAF  F004         	call	i2_printf	;wreg free
 11514                           
 11515                           ;sort.c: 161: lcdInst(0b11000000);;
 11516  001632  0EC0               	movlw	192
 11517  001634  EC51  F014         	call	i2_lcdInst
 11518                           
 11519                           ;sort.c: 162: printf("Time: %02d:%02d:%02d", hour, min, sec);
 11520  001638  0EEC               	movlw	low STR_2
 11521  00163A  6E0D               	movwf	i2printf@f,c
 11522  00163C  0EFD               	movlw	high STR_2
 11523  00163E  6E0E               	movwf	i2printf@f+1,c
 11524  001640  C03F  F00F         	movff	printSortTimer@hour,?i2_printf+2
 11525  001644  C040  F010         	movff	printSortTimer@hour+1,?i2_printf+3
 11526  001648  C041  F011         	movff	printSortTimer@min,?i2_printf+4
 11527  00164C  C042  F012         	movff	printSortTimer@min+1,?i2_printf+5
 11528  001650  C043  F013         	movff	printSortTimer@sec,?i2_printf+6
 11529  001654  C044  F014         	movff	printSortTimer@sec+1,?i2_printf+7
 11530  001658  ECAF  F004         	call	i2_printf	;wreg free
 11531  00165C  0012               	return		;funcret
 11532  00165E                     __end_of_printSortTimer:
 11533                           	opt stack 0
 11534                           pclatu	equ	0xFFB
 11535                           pclath	equ	0xFFA
 11536                           tblptru	equ	0xFF8
 11537                           tblptrh	equ	0xFF7
 11538                           tblptrl	equ	0xFF6
 11539                           tablat	equ	0xFF5
 11540                           prodh	equ	0xFF4
 11541                           prodl	equ	0xFF3
 11542                           intcon	equ	0xFF2
 11543                           intcon3	equ	0xFF0
 11544                           indf0	equ	0xFEF
 11545                           postinc0	equ	0xFEE
 11546                           fsr0h	equ	0xFEA
 11547                           fsr0l	equ	0xFE9
 11548                           wreg	equ	0xFE8
 11549                           postdec1	equ	0xFE5
 11550                           fsr1h	equ	0xFE2
 11551                           fsr1l	equ	0xFE1
 11552                           indf2	equ	0xFDF
 11553                           postinc2	equ	0xFDE
 11554                           postdec2	equ	0xFDD
 11555                           fsr2h	equ	0xFDA
 11556                           fsr2l	equ	0xFD9
 11557                           status	equ	0xFD8
 11558                           
 11559 ;; *************** function i2_printf *****************
 11560 ;; Defined at:
 11561 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 11562 ;; Parameters:    Size  Location     Type
 11563 ;;  f               2   12[COMRAM] PTR const unsigned char 
 11564 ;;		 -> STR_50(21), STR_49(11), STR_48(24), STR_35(17), 
 11565 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 11566 ;;		 -> STR_30(17), STR_29(17), STR_28(17), STR_27(17), 
 11567 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(17), 
 11568 ;;		 -> STR_22(17), STR_21(17), STR_20(17), STR_19(17), 
 11569 ;;		 -> STR_18(17), STR_17(17), STR_16(17), STR_15(17), 
 11570 ;;		 -> STR_14(3), STR_13(17), STR_12(17), STR_11(17), 
 11571 ;;		 -> STR_10(17), STR_9(17), STR_8(18), STR_7(10), 
 11572 ;;		 -> STR_6(17), STR_5(7), STR_4(17), STR_3(18), 
 11573 ;;		 -> STR_2(21), STR_1(14), 
 11574 ;; Auto vars:     Size  Location     Type
 11575 ;;  printf          4    0        struct .
 11576 ;;  printf          2   39[COMRAM] int 
 11577 ;;  printf          2   35[COMRAM] unsigned int 
 11578 ;;  printf          2   33[COMRAM] unsigned int 
 11579 ;;  printf          2   31[COMRAM] PTR const unsigned char 
 11580 ;;		 -> STR_51(7), printRTC@month(4), 
 11581 ;;  printf          2   29[COMRAM] PTR void [1]
 11582 ;;		 -> ?i2_printf(2), ?_printf(2), 
 11583 ;;  printf          1   38[COMRAM] char 
 11584 ;;  printf          1   37[COMRAM] unsigned char 
 11585 ;;  printf          1   28[COMRAM] char 
 11586 ;; Return value:  Size  Location     Type
 11587 ;;                  2   12[COMRAM] int 
 11588 ;; Registers used:
 11589 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11590 ;; Tracked objects:
 11591 ;;		On entry : 0/0
 11592 ;;		On exit  : 0/0
 11593 ;;		Unchanged: 0/0
 11594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11595 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11596 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11597 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11598 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11599 ;;Total ram usage:       29 bytes
 11600 ;; Hardware stack levels used:    1
 11601 ;; Hardware stack levels required when called:    2
 11602 ;; This function calls:
 11603 ;;		i2___lwdiv
 11604 ;;		i2___lwmod
 11605 ;;		i2___wmul
 11606 ;;		i2_isdigit
 11607 ;;		i2_putch
 11608 ;; This function is called by:
 11609 ;;		_change_state_to_menu_11
 11610 ;;		_change_state_to_menu_12
 11611 ;;		_change_state_to_menu_22
 11612 ;;		_change_state_to_menu_23
 11613 ;;		_change_state_to_logs_11
 11614 ;;		_change_state_to_logs_12
 11615 ;;		_change_state_to_logs_22
 11616 ;;		_change_state_to_logs_23
 11617 ;;		_change_state_to_logs_33
 11618 ;;		_change_state_to_logs_34
 11619 ;;		_printSortTimer
 11620 ;;		i2_change_state_to_menu_start
 11621 ;;		i2_printRTC
 11622 ;; This function uses a non-reentrant model
 11623 ;;
 11624                           
 11625                           	psect	text57
 11626  00095E                     __ptext57:
 11627                           	opt stack 0
 11628  00095E                     i2_printf:
 11629                           	opt stack 19
 11630                           
 11631                           ;doprnt.c: 466: va_list ap;
 11632                           ;doprnt.c: 499: signed char c;
 11633                           ;doprnt.c: 501: int width;
 11634                           ;doprnt.c: 506: signed char prec;
 11635                           ;doprnt.c: 508: unsigned char flag;
 11636                           ;doprnt.c: 523: union {
 11637                           ;doprnt.c: 524: unsigned long vd;
 11638                           ;doprnt.c: 525: double integ;
 11639                           ;doprnt.c: 526: } tmpval;
 11640                           ;doprnt.c: 528: unsigned int val;
 11641                           ;doprnt.c: 529: unsigned len;
 11642                           ;doprnt.c: 530: const char * cp;
 11643                           ;doprnt.c: 533: *ap = __va_start();
 11644                           
 11645                           ;incstack = 0
 11646  00095E  0E0F               	movlw	low (?i2_printf+2)
 11647  000960  6E1E               	movwf	i2printf@ap,c
 11648  000962  0E00               	movlw	high (?i2_printf+2)
 11649  000964  6E1F               	movwf	i2printf@ap+1,c
 11650                           
 11651                           ;doprnt.c: 536: while(c = *f++) {
 11652  000966  D190               	goto	i2l4133
 11653  000968                     i2l4009:
 11654                           
 11655                           ;doprnt.c: 538: if(c != '%')
 11656  000968  0E25               	movlw	37
 11657  00096A  1827               	xorwf	i2printf@c,w,c
 11658  00096C  B4D8               	btfsc	status,2,c
 11659  00096E  D004               	goto	i2l4013
 11660                           
 11661                           ;doprnt.c: 540: {
 11662                           ;doprnt.c: 541: (putch(c) );
 11663  000970  5027               	movf	i2printf@c,w,c
 11664  000972  EC4B  F014         	call	i2_putch
 11665                           
 11666                           ;doprnt.c: 542: continue;
 11667  000976  D188               	goto	i2l4133
 11668  000978                     i2l4013:
 11669                           
 11670                           ;doprnt.c: 543: }
 11671                           ;doprnt.c: 546: width = 0;
 11672  000978  0E00               	movlw	0
 11673  00097A  6E29               	movwf	i2printf@width+1,c
 11674  00097C  0E00               	movlw	0
 11675  00097E  6E28               	movwf	i2printf@width,c
 11676                           
 11677                           ;doprnt.c: 548: flag = 0;
 11678  000980  0E00               	movlw	0
 11679  000982  6E26               	movwf	i2printf@flag,c
 11680                           
 11681                           ;doprnt.c: 551: switch(*f) {
 11682                           
 11683                           ;doprnt.c: 550: for(;;) {
 11684  000984  D003               	goto	i2l4019
 11685  000986                     i2l4015:
 11686                           
 11687                           ;doprnt.c: 580: flag |= 0x04;
 11688  000986  8426               	bsf	i2printf@flag,2,c
 11689                           
 11690                           ;doprnt.c: 581: f++;
 11691  000988  4A0D               	infsnz	i2printf@f,f,c
 11692  00098A  2A0E               	incf	i2printf@f+1,f,c
 11693  00098C                     i2l4019:
 11694  00098C  C00D  FFF6         	movff	i2printf@f,tblptrl
 11695  000990  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11696  000994                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11697  000994  6AF8               	clrf	tblptru,c
 11698  000996                     	endif
 11699  000996                     	if	0	;tblptru may be non-zero
 11700  000996                     	endif
 11701  000996  0008               	tblrd		*
 11702  000998  50F5               	movf	tablat,w,c
 11703                           
 11704                           ; Switch size 1, requested type "space"
 11705                           ; Number of cases is 1, Range of values is 48 to 48
 11706                           ; switch strategies available:
 11707                           ; Name         Instructions Cycles
 11708                           ; simple_byte            4     3 (average)
 11709                           ;	Chosen strategy is simple_byte
 11710  00099A  0A30               	xorlw	48	; case 48
 11711  00099C  B4D8               	btfsc	status,2,c
 11712  00099E  D7F3               	goto	i2l4015
 11713                           
 11714                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 11715                           
 11716                           ;doprnt.c: 586: }
 11717                           
 11718                           ;doprnt.c: 585: break;
 11719  0009A0  C00D  FFF6         	movff	i2printf@f,tblptrl
 11720  0009A4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11721  0009A8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11722  0009A8  6AF8               	clrf	tblptru,c
 11723  0009AA                     	endif
 11724  0009AA                     	if	0	;tblptru may be non-zero
 11725  0009AA                     	endif
 11726  0009AA  0008               	tblrd		*
 11727  0009AC  50F5               	movf	tablat,w,c
 11728  0009AE  ECE3  F013         	call	i2_isdigit
 11729  0009B2  A0D8               	btfss	status,0,c
 11730  0009B4  D0A4               	goto	i2l4065
 11731                           
 11732                           ;doprnt.c: 598: width = 0;
 11733  0009B6  0E00               	movlw	0
 11734  0009B8  6E29               	movwf	i2printf@width+1,c
 11735  0009BA  0E00               	movlw	0
 11736  0009BC  6E28               	movwf	i2printf@width,c
 11737  0009BE                     i2l4025:
 11738                           
 11739                           ;doprnt.c: 600: width *= 10;
 11740  0009BE  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 11741  0009C2  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 11742  0009C6  0E00               	movlw	0
 11743  0009C8  6E04               	movwf	i2___wmul@multiplicand+1,c
 11744  0009CA  0E0A               	movlw	10
 11745  0009CC  6E03               	movwf	i2___wmul@multiplicand,c
 11746  0009CE  ECAC  F013         	call	i2___wmul	;wreg free
 11747  0009D2  C001  F028         	movff	?i2___wmul,i2printf@width
 11748  0009D6  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 11749                           
 11750                           ;doprnt.c: 601: width += *f++ - '0';
 11751  0009DA  0ED0               	movlw	208
 11752  0009DC  6E19               	movwf	??i2_printf& (0+255),c
 11753  0009DE  0EFF               	movlw	255
 11754  0009E0  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 11755  0009E2  C00D  FFF6         	movff	i2printf@f,tblptrl
 11756  0009E6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11757  0009EA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11758  0009EA  6AF8               	clrf	tblptru,c
 11759  0009EC                     	endif
 11760  0009EC                     	if	0	;tblptru may be non-zero
 11761  0009EC                     	endif
 11762  0009EC  0008               	tblrd		*
 11763  0009EE  50F5               	movf	tablat,w,c
 11764  0009F0  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 11765  0009F2  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 11766  0009F4  5019               	movf	??i2_printf,w,c
 11767  0009F6  261B               	addwf	??i2_printf+2,f,c
 11768  0009F8  501A               	movf	??i2_printf+1,w,c
 11769  0009FA  221C               	addwfc	??i2_printf+3,f,c
 11770  0009FC  501B               	movf	??i2_printf+2,w,c
 11771  0009FE  2628               	addwf	i2printf@width,f,c
 11772  000A00  501C               	movf	??i2_printf+3,w,c
 11773  000A02  2229               	addwfc	i2printf@width+1,f,c
 11774  000A04  4A0D               	infsnz	i2printf@f,f,c
 11775  000A06  2A0E               	incf	i2printf@f+1,f,c
 11776                           
 11777                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 11778  000A08  C00D  FFF6         	movff	i2printf@f,tblptrl
 11779  000A0C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11780  000A10                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11781  000A10  6AF8               	clrf	tblptru,c
 11782  000A12                     	endif
 11783  000A12                     	if	0	;tblptru may be non-zero
 11784  000A12                     	endif
 11785  000A12  0008               	tblrd		*
 11786  000A14  50F5               	movf	tablat,w,c
 11787  000A16  ECE3  F013         	call	i2_isdigit
 11788  000A1A  A0D8               	btfss	status,0,c
 11789  000A1C  D070               	goto	i2l4065
 11790  000A1E  D7CF               	goto	i2l4025
 11791  000A20                     i2l4033:
 11792                           
 11793                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 11794  000A20  C01E  FFD9         	movff	i2printf@ap,fsr2l
 11795  000A24  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
 11796  000A28  CFDE F020          	movff	postinc2,i2printf@cp
 11797  000A2C  CFDD F021          	movff	postdec2,i2printf@cp+1
 11798  000A30  0E02               	movlw	2
 11799  000A32  261E               	addwf	i2printf@ap,f,c
 11800  000A34  0E00               	movlw	0
 11801  000A36  221F               	addwfc	i2printf@ap+1,f,c
 11802                           
 11803                           ;doprnt.c: 740: if(!cp)
 11804  000A38  5020               	movf	i2printf@cp,w,c
 11805  000A3A  1021               	iorwf	i2printf@cp+1,w,c
 11806  000A3C  A4D8               	btfss	status,2,c
 11807  000A3E  D004               	goto	i2l4041
 11808                           
 11809                           ;doprnt.c: 741: cp = "(null)";
 11810  000A40  0EBE               	movlw	low STR_51
 11811  000A42  6E20               	movwf	i2printf@cp,c
 11812  000A44  0EFF               	movlw	high STR_51
 11813  000A46  6E21               	movwf	i2printf@cp+1,c
 11814  000A48                     i2l4041:
 11815                           
 11816                           ;doprnt.c: 745: len = 0;
 11817  000A48  0E00               	movlw	0
 11818  000A4A  6E25               	movwf	i2printf@len+1,c
 11819  000A4C  0E00               	movlw	0
 11820  000A4E  6E24               	movwf	i2printf@len,c
 11821                           
 11822                           ;doprnt.c: 746: while(cp[len])
 11823  000A50  D002               	goto	i2l4045
 11824  000A52                     i2l4043:
 11825                           
 11826                           ;doprnt.c: 747: len++;
 11827  000A52  4A24               	infsnz	i2printf@len,f,c
 11828  000A54  2A25               	incf	i2printf@len+1,f,c
 11829  000A56                     i2l4045:
 11830  000A56  5024               	movf	i2printf@len,w,c
 11831  000A58  2420               	addwf	i2printf@cp,w,c
 11832  000A5A  6E19               	movwf	??i2_printf& (0+255),c
 11833  000A5C  5025               	movf	i2printf@len+1,w,c
 11834  000A5E  2021               	addwfc	i2printf@cp+1,w,c
 11835  000A60  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 11836  000A62  C019  FFF6         	movff	??i2_printf,tblptrl
 11837  000A66  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 11838  000A6A  0E00               	movlw	low (__mediumconst shr (0+16))
 11839  000A6C  6EF8               	movwf	tblptru,c
 11840  000A6E  0E0F               	movlw	(high __ramtop+-1)
 11841  000A70  64F7               	cpfsgt	tblptrh,c
 11842  000A72  D003               	bra	i2u288_47
 11843  000A74  0008               	tblrd		*
 11844  000A76  50F5               	movf	tablat,w,c
 11845  000A78  D005               	bra	i2u288_40
 11846  000A7A                     i2u288_47:
 11847  000A7A  CFF6 FFE9          	movff	tblptrl,fsr0l
 11848  000A7E  CFF7 FFEA          	movff	tblptrh,fsr0h
 11849  000A82  50EF               	movf	indf0,w,c
 11850  000A84                     i2u288_40:
 11851  000A84  0900               	iorlw	0
 11852  000A86  A4D8               	btfss	status,2,c
 11853  000A88  D7E4               	goto	i2l4043
 11854                           
 11855                           ;doprnt.c: 757: if(width > len)
 11856  000A8A  5028               	movf	i2printf@width,w,c
 11857  000A8C  5C24               	subwf	i2printf@len,w,c
 11858  000A8E  5029               	movf	i2printf@width+1,w,c
 11859  000A90  5825               	subwfb	i2printf@len+1,w,c
 11860  000A92  B0D8               	btfsc	status,0,c
 11861  000A94  D005               	goto	i2l4051
 11862                           
 11863                           ;doprnt.c: 758: width -= len;
 11864  000A96  5024               	movf	i2printf@len,w,c
 11865  000A98  5E28               	subwf	i2printf@width,f,c
 11866  000A9A  5025               	movf	i2printf@len+1,w,c
 11867  000A9C  5A29               	subwfb	i2printf@width+1,f,c
 11868  000A9E  D008               	goto	i2l4055
 11869  000AA0                     i2l4051:
 11870                           
 11871                           ;doprnt.c: 759: else
 11872                           ;doprnt.c: 760: width = 0;
 11873  000AA0  0E00               	movlw	0
 11874  000AA2  6E29               	movwf	i2printf@width+1,c
 11875  000AA4  0E00               	movlw	0
 11876  000AA6  6E28               	movwf	i2printf@width,c
 11877                           
 11878                           ;doprnt.c: 764: while(width--)
 11879  000AA8  D003               	goto	i2l4055
 11880  000AAA                     i2l4053:
 11881                           
 11882                           ;doprnt.c: 765: (putch(' ') );
 11883  000AAA  0E20               	movlw	32
 11884  000AAC  EC4B  F014         	call	i2_putch
 11885  000AB0                     i2l4055:
 11886  000AB0  0628               	decf	i2printf@width,f,c
 11887  000AB2  A0D8               	btfss	status,0,c
 11888  000AB4  0629               	decf	i2printf@width+1,f,c
 11889  000AB6  2828               	incf	i2printf@width,w,c
 11890  000AB8  E1F8               	bnz	i2l4053
 11891  000ABA  2829               	incf	i2printf@width+1,w,c
 11892  000ABC  B4D8               	btfsc	status,2,c
 11893  000ABE  D016               	goto	i2l4061
 11894  000AC0  D7F4               	goto	i2l4053
 11895  000AC2                     i2l4057:
 11896                           
 11897                           ;doprnt.c: 768: (putch(*cp++) );
 11898  000AC2  C020  FFF6         	movff	i2printf@cp,tblptrl
 11899  000AC6  C021  FFF7         	movff	i2printf@cp+1,tblptrh
 11900  000ACA  0E00               	movlw	low (__mediumconst shr (0+16))
 11901  000ACC  6EF8               	movwf	tblptru,c
 11902  000ACE  0E0F               	movlw	(high __ramtop+-1)
 11903  000AD0  64F7               	cpfsgt	tblptrh,c
 11904  000AD2  D003               	bra	i2u292_47
 11905  000AD4  0008               	tblrd		*
 11906  000AD6  50F5               	movf	tablat,w,c
 11907  000AD8  D005               	bra	i2u292_40
 11908  000ADA                     i2u292_47:
 11909  000ADA  CFF6 FFE9          	movff	tblptrl,fsr0l
 11910  000ADE  CFF7 FFEA          	movff	tblptrh,fsr0h
 11911  000AE2  50EF               	movf	indf0,w,c
 11912  000AE4                     i2u292_40:
 11913  000AE4  EC4B  F014         	call	i2_putch
 11914  000AE8  4A20               	infsnz	i2printf@cp,f,c
 11915  000AEA  2A21               	incf	i2printf@cp+1,f,c
 11916  000AEC                     i2l4061:
 11917  000AEC  0624               	decf	i2printf@len,f,c
 11918  000AEE  A0D8               	btfss	status,0,c
 11919  000AF0  0625               	decf	i2printf@len+1,f,c
 11920  000AF2  2824               	incf	i2printf@len,w,c
 11921  000AF4  E1E6               	bnz	i2l4057
 11922  000AF6  2825               	incf	i2printf@len+1,w,c
 11923  000AF8  B4D8               	btfsc	status,2,c
 11924  000AFA  D0C6               	goto	i2l4133
 11925  000AFC  D7E2               	goto	i2l4057
 11926  000AFE                     i2l4065:
 11927  000AFE  C00D  FFF6         	movff	i2printf@f,tblptrl
 11928  000B02  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11929  000B06  4A0D               	infsnz	i2printf@f,f,c
 11930  000B08  2A0E               	incf	i2printf@f+1,f,c
 11931  000B0A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11932  000B0A  6AF8               	clrf	tblptru,c
 11933  000B0C                     	endif
 11934  000B0C                     	if	0	;tblptru may be non-zero
 11935  000B0C                     	endif
 11936  000B0C  0008               	tblrd		*
 11937  000B0E  CFF5 F027          	movff	tablat,i2printf@c
 11938  000B12  5027               	movf	i2printf@c,w,c
 11939                           
 11940                           ; Switch size 1, requested type "space"
 11941                           ; Number of cases is 4, Range of values is 0 to 115
 11942                           ; switch strategies available:
 11943                           ; Name         Instructions Cycles
 11944                           ; simple_byte           13     7 (average)
 11945                           ;	Chosen strategy is simple_byte
 11946  000B14  0A00               	xorlw	0	; case 0
 11947  000B16  B4D8               	btfsc	status,2,c
 11948  000B18  0012               	return	
 11949  000B1A  0A64               	xorlw	100	; case 100
 11950  000B1C  B4D8               	btfsc	status,2,c
 11951  000B1E  D007               	goto	i2l4067
 11952  000B20  0A0D               	xorlw	13	; case 105
 11953  000B22  B4D8               	btfsc	status,2,c
 11954  000B24  D004               	goto	i2l4067
 11955  000B26  0A1A               	xorlw	26	; case 115
 11956  000B28  B4D8               	btfsc	status,2,c
 11957  000B2A  D77A               	goto	i2l4033
 11958  000B2C  D0AD               	goto	i2l4133
 11959  000B2E                     i2l4067:
 11960                           
 11961                           ;doprnt.c: 1253: {
 11962                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 11963  000B2E  C01E  FFD9         	movff	i2printf@ap,fsr2l
 11964  000B32  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
 11965  000B36  CFDE F022          	movff	postinc2,i2printf@val
 11966  000B3A  CFDD F023          	movff	postdec2,i2printf@val+1
 11967  000B3E  0E02               	movlw	2
 11968  000B40  261E               	addwf	i2printf@ap,f,c
 11969  000B42  0E00               	movlw	0
 11970  000B44  221F               	addwfc	i2printf@ap+1,f,c
 11971                           
 11972                           ;doprnt.c: 1261: if((int)val < 0) {
 11973  000B46  AE23               	btfss	i2printf@val+1,7,c
 11974  000B48  D006               	goto	i2l4077
 11975                           
 11976                           ;doprnt.c: 1262: flag |= 0x03;
 11977  000B4A  0E03               	movlw	3
 11978  000B4C  1226               	iorwf	i2printf@flag,f,c
 11979                           
 11980                           ;doprnt.c: 1263: val = -val;
 11981  000B4E  6C22               	negf	i2printf@val,c
 11982  000B50  1E23               	comf	i2printf@val+1,f,c
 11983  000B52  B0D8               	btfsc	status,0,c
 11984  000B54  2A23               	incf	i2printf@val+1,f,c
 11985  000B56                     i2l4077:
 11986                           
 11987                           ;doprnt.c: 1264: }
 11988                           ;doprnt.c: 1266: }
 11989                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 11990  000B56  0E01               	movlw	1
 11991  000B58  6E27               	movwf	i2printf@c,c
 11992  000B5A                     i2l4079:
 11993  000B5A  0E05               	movlw	5
 11994  000B5C  1827               	xorwf	i2printf@c,w,c
 11995  000B5E  B4D8               	btfsc	status,2,c
 11996  000B60  D015               	goto	i2l4091
 11997                           
 11998                           ;doprnt.c: 1306: if(val < dpowers[c])
 11999  000B62  5027               	movf	i2printf@c,w,c
 12000  000B64  0D02               	mullw	2
 12001  000B66  0ECA               	movlw	low _dpowers
 12002  000B68  24F3               	addwf	prodl,w,c
 12003  000B6A  6EF6               	movwf	tblptrl,c
 12004  000B6C  0EFD               	movlw	high _dpowers
 12005  000B6E  20F4               	addwfc	prodh,w,c
 12006  000B70  6EF7               	movwf	tblptrh,c
 12007  000B72                     	if	1	;There are 3 active tblptr bytes
 12008  000B72  6AF8               	clrf	tblptru,c
 12009  000B74  0E00               	movlw	low (__mediumconst shr (0+16))
 12010  000B76  22F8               	addwfc	tblptru,f,c
 12011  000B78                     	endif
 12012  000B78  0009               	tblrd		*+
 12013  000B7A  50F5               	movf	tablat,w,c
 12014  000B7C  5C22               	subwf	i2printf@val,w,c
 12015  000B7E  0009               	tblrd		*+
 12016  000B80  50F5               	movf	tablat,w,c
 12017  000B82  5823               	subwfb	i2printf@val+1,w,c
 12018  000B84  A0D8               	btfss	status,0,c
 12019  000B86  D002               	goto	i2l4091
 12020                           
 12021                           ;doprnt.c: 1307: break;
 12022  000B88  2A27               	incf	i2printf@c,f,c
 12023  000B8A  D7E7               	goto	i2l4079
 12024  000B8C                     i2l4091:
 12025                           
 12026                           ;doprnt.c: 1345: if(width && flag & 0x03)
 12027  000B8C  5028               	movf	i2printf@width,w,c
 12028  000B8E  1029               	iorwf	i2printf@width+1,w,c
 12029  000B90  B4D8               	btfsc	status,2,c
 12030  000B92  D009               	goto	i2l4097
 12031  000B94  C026  F019         	movff	i2printf@flag,??i2_printf
 12032  000B98  0E03               	movlw	3
 12033  000B9A  1619               	andwf	??i2_printf,f,c
 12034  000B9C  B4D8               	btfsc	status,2,c
 12035  000B9E  D003               	goto	i2l4097
 12036                           
 12037                           ;doprnt.c: 1346: width--;
 12038  000BA0  0628               	decf	i2printf@width,f,c
 12039  000BA2  A0D8               	btfss	status,0,c
 12040  000BA4  0629               	decf	i2printf@width+1,f,c
 12041  000BA6                     i2l4097:
 12042                           
 12043                           ;doprnt.c: 1381: if(width > c)
 12044  000BA6  0E80               	movlw	128
 12045  000BA8  BE27               	btfsc	i2printf@c,7,c
 12046  000BAA  0E7F               	movlw	127
 12047  000BAC  6E19               	movwf	??i2_printf& (0+255),c
 12048  000BAE  5028               	movf	i2printf@width,w,c
 12049  000BB0  5C27               	subwf	i2printf@c,w,c
 12050  000BB2  5029               	movf	i2printf@width+1,w,c
 12051  000BB4  0A80               	xorlw	128
 12052  000BB6  5819               	subwfb	??i2_printf& (0+255),w,c
 12053  000BB8  B0D8               	btfsc	status,0,c
 12054  000BBA  D007               	goto	i2l4101
 12055                           
 12056                           ;doprnt.c: 1382: width -= c;
 12057  000BBC  5027               	movf	i2printf@c,w,c
 12058  000BBE  5E28               	subwf	i2printf@width,f,c
 12059  000BC0  0E00               	movlw	0
 12060  000BC2  BE27               	btfsc	i2printf@c,7,c
 12061  000BC4  0EFF               	movlw	255
 12062  000BC6  5A29               	subwfb	i2printf@width+1,f,c
 12063  000BC8  D004               	goto	i2l4103
 12064  000BCA                     i2l4101:
 12065                           
 12066                           ;doprnt.c: 1383: else
 12067                           ;doprnt.c: 1384: width = 0;
 12068  000BCA  0E00               	movlw	0
 12069  000BCC  6E29               	movwf	i2printf@width+1,c
 12070  000BCE  0E00               	movlw	0
 12071  000BD0  6E28               	movwf	i2printf@width,c
 12072  000BD2                     i2l4103:
 12073                           
 12074                           ;doprnt.c: 1387: if(flag & 0x04) {
 12075  000BD2  A426               	btfss	i2printf@flag,2,c
 12076  000BD4  D014               	goto	i2l4115
 12077                           
 12078                           ;doprnt.c: 1392: if(flag & 0x03)
 12079  000BD6  C026  F019         	movff	i2printf@flag,??i2_printf
 12080  000BDA  0E03               	movlw	3
 12081  000BDC  1619               	andwf	??i2_printf,f,c
 12082  000BDE  B4D8               	btfsc	status,2,c
 12083  000BE0  D003               	goto	i2l4109
 12084                           
 12085                           ;doprnt.c: 1393: (putch('-') );
 12086  000BE2  0E2D               	movlw	45
 12087  000BE4  EC4B  F014         	call	i2_putch
 12088  000BE8                     i2l4109:
 12089                           
 12090                           ;doprnt.c: 1415: if(width)
 12091  000BE8  5028               	movf	i2printf@width,w,c
 12092  000BEA  1029               	iorwf	i2printf@width+1,w,c
 12093  000BEC  B4D8               	btfsc	status,2,c
 12094  000BEE  D01E               	goto	i2l4125
 12095                           
 12096                           ;doprnt.c: 1417: (putch('0') );
 12097                           
 12098                           ;doprnt.c: 1416: do
 12099  000BF0  0E30               	movlw	48
 12100  000BF2  EC4B  F014         	call	i2_putch
 12101                           
 12102                           ;doprnt.c: 1418: while(--width);
 12103  000BF6  0628               	decf	i2printf@width,f,c
 12104  000BF8  A0D8               	btfss	status,0,c
 12105  000BFA  0629               	decf	i2printf@width+1,f,c
 12106  000BFC  D7F5               	goto	i2l4109
 12107  000BFE                     i2l4115:
 12108                           
 12109                           ;doprnt.c: 1422: {
 12110                           ;doprnt.c: 1424: if(width
 12111                           ;doprnt.c: 1428: )
 12112  000BFE  5028               	movf	i2printf@width,w,c
 12113  000C00  1029               	iorwf	i2printf@width+1,w,c
 12114  000C02  B4D8               	btfsc	status,2,c
 12115  000C04  D00A               	goto	i2l4121
 12116  000C06                     i2l4117:
 12117                           
 12118                           ;doprnt.c: 1430: (putch(' ') );
 12119  000C06  0E20               	movlw	32
 12120  000C08  EC4B  F014         	call	i2_putch
 12121                           
 12122                           ;doprnt.c: 1431: while(--width);
 12123  000C0C  0628               	decf	i2printf@width,f,c
 12124  000C0E  A0D8               	btfss	status,0,c
 12125  000C10  0629               	decf	i2printf@width+1,f,c
 12126  000C12  5028               	movf	i2printf@width,w,c
 12127  000C14  1029               	iorwf	i2printf@width+1,w,c
 12128  000C16  A4D8               	btfss	status,2,c
 12129  000C18  D7F6               	goto	i2l4117
 12130  000C1A                     i2l4121:
 12131                           
 12132                           ;doprnt.c: 1438: if(flag & 0x03)
 12133  000C1A  C026  F019         	movff	i2printf@flag,??i2_printf
 12134  000C1E  0E03               	movlw	3
 12135  000C20  1619               	andwf	??i2_printf,f,c
 12136  000C22  B4D8               	btfsc	status,2,c
 12137  000C24  D003               	goto	i2l4125
 12138                           
 12139                           ;doprnt.c: 1439: (putch('-') );
 12140  000C26  0E2D               	movlw	45
 12141  000C28  EC4B  F014         	call	i2_putch
 12142  000C2C                     i2l4125:
 12143                           
 12144                           ;doprnt.c: 1469: }
 12145                           ;doprnt.c: 1472: prec = c;
 12146  000C2C  C027  F01D         	movff	i2printf@c,i2printf@prec
 12147                           
 12148                           ;doprnt.c: 1474: while(prec--) {
 12149  000C30  D027               	goto	i2l4131
 12150  000C32                     i2l4127:
 12151                           
 12152                           ;doprnt.c: 1478: {
 12153                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 12154  000C32  501D               	movf	i2printf@prec,w,c
 12155  000C34  0D02               	mullw	2
 12156  000C36  0ECA               	movlw	low _dpowers
 12157  000C38  24F3               	addwf	prodl,w,c
 12158  000C3A  6EF6               	movwf	tblptrl,c
 12159  000C3C  0EFD               	movlw	high _dpowers
 12160  000C3E  20F4               	addwfc	prodh,w,c
 12161  000C40  6EF7               	movwf	tblptrh,c
 12162  000C42                     	if	1	;There are 3 active tblptr bytes
 12163  000C42  6AF8               	clrf	tblptru,c
 12164  000C44  0E00               	movlw	low (__mediumconst shr (0+16))
 12165  000C46  22F8               	addwfc	tblptru,f,c
 12166  000C48                     	endif
 12167  000C48  0009               	tblrd		*+
 12168  000C4A  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 12169  000C4E  000A               	tblrd		*-
 12170  000C50  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 12171  000C54  C022  F006         	movff	i2printf@val,i2___lwdiv@dividend
 12172  000C58  C023  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 12173  000C5C  EC2B  F011         	call	i2___lwdiv	;wreg free
 12174  000C60  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 12175  000C64  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 12176  000C68  0E00               	movlw	0
 12177  000C6A  6E04               	movwf	i2___lwmod@divisor+1,c
 12178  000C6C  0E0A               	movlw	10
 12179  000C6E  6E03               	movwf	i2___lwmod@divisor,c
 12180  000C70  ECC2  F011         	call	i2___lwmod	;wreg free
 12181  000C74  5001               	movf	?i2___lwmod,w,c
 12182  000C76  0F30               	addlw	48
 12183  000C78  6E27               	movwf	i2printf@c,c
 12184                           
 12185                           ;doprnt.c: 1523: }
 12186                           ;doprnt.c: 1524: (putch(c) );
 12187  000C7A  5027               	movf	i2printf@c,w,c
 12188  000C7C  EC4B  F014         	call	i2_putch
 12189  000C80                     i2l4131:
 12190  000C80  061D               	decf	i2printf@prec,f,c
 12191  000C82  281D               	incf	i2printf@prec,w,c
 12192  000C84  A4D8               	btfss	status,2,c
 12193  000C86  D7D5               	goto	i2l4127
 12194  000C88                     i2l4133:
 12195  000C88  C00D  FFF6         	movff	i2printf@f,tblptrl
 12196  000C8C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12197  000C90  4A0D               	infsnz	i2printf@f,f,c
 12198  000C92  2A0E               	incf	i2printf@f+1,f,c
 12199  000C94                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12200  000C94  6AF8               	clrf	tblptru,c
 12201  000C96                     	endif
 12202  000C96                     	if	0	;tblptru may be non-zero
 12203  000C96                     	endif
 12204  000C96  0008               	tblrd		*
 12205  000C98  CFF5 F027          	movff	tablat,i2printf@c
 12206  000C9C  5027               	movf	i2printf@c,w,c
 12207  000C9E  B4D8               	btfsc	status,2,c
 12208  000CA0  0012               	return	
 12209  000CA2  D662               	goto	i2l4009
 12210  000CA4                     __end_ofi2_printf:
 12211                           	opt stack 0
 12212                           pclatu	equ	0xFFB
 12213                           pclath	equ	0xFFA
 12214                           tblptru	equ	0xFF8
 12215                           tblptrh	equ	0xFF7
 12216                           tblptrl	equ	0xFF6
 12217                           tablat	equ	0xFF5
 12218                           prodh	equ	0xFF4
 12219                           prodl	equ	0xFF3
 12220                           intcon	equ	0xFF2
 12221                           intcon3	equ	0xFF0
 12222                           indf0	equ	0xFEF
 12223                           postinc0	equ	0xFEE
 12224                           fsr0h	equ	0xFEA
 12225                           fsr0l	equ	0xFE9
 12226                           wreg	equ	0xFE8
 12227                           postdec1	equ	0xFE5
 12228                           fsr1h	equ	0xFE2
 12229                           fsr1l	equ	0xFE1
 12230                           indf2	equ	0xFDF
 12231                           postinc2	equ	0xFDE
 12232                           postdec2	equ	0xFDD
 12233                           fsr2h	equ	0xFDA
 12234                           fsr2l	equ	0xFD9
 12235                           status	equ	0xFD8
 12236                           
 12237 ;; *************** function i2_putch *****************
 12238 ;; Defined at:
 12239 ;;		line 18 in file "lcd.c"
 12240 ;; Parameters:    Size  Location     Type
 12241 ;;  data            1    wreg     unsigned char 
 12242 ;; Auto vars:     Size  Location     Type
 12243 ;;  data            1    2[COMRAM] unsigned char 
 12244 ;; Return value:  Size  Location     Type
 12245 ;;                  1    wreg      void 
 12246 ;; Registers used:
 12247 ;;		wreg, status,2, status,0, cstack
 12248 ;; Tracked objects:
 12249 ;;		On entry : 0/0
 12250 ;;		On exit  : 0/0
 12251 ;;		Unchanged: 0/0
 12252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12254 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12256 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12257 ;;Total ram usage:        1 bytes
 12258 ;; Hardware stack levels used:    1
 12259 ;; Hardware stack levels required when called:    1
 12260 ;; This function calls:
 12261 ;;		i2_lcdNibble
 12262 ;; This function is called by:
 12263 ;;		i2_printf
 12264 ;; This function uses a non-reentrant model
 12265 ;;
 12266                           
 12267                           	psect	text58
 12268  002896                     __ptext58:
 12269                           	opt stack 0
 12270  002896                     i2_putch:
 12271                           	opt stack 19
 12272                           
 12273                           ;incstack = 0
 12274                           ;i2putch@data stored from wreg
 12275  002896  6E03               	movwf	i2putch@data,c
 12276                           
 12277                           ;lcd.c: 19: LATDbits.LATD2 = 1;
 12278  002898  848C               	bsf	3980,2,c	;volatile
 12279                           
 12280                           ;lcd.c: 20: lcdNibble(data);
 12281  00289A  5003               	movf	i2putch@data,w,c
 12282  00289C  EC00  F011         	call	i2_lcdNibble
 12283  0028A0  0012               	return		;funcret
 12284  0028A2                     __end_ofi2_putch:
 12285                           	opt stack 0
 12286                           pclatu	equ	0xFFB
 12287                           pclath	equ	0xFFA
 12288                           tblptru	equ	0xFF8
 12289                           tblptrh	equ	0xFF7
 12290                           tblptrl	equ	0xFF6
 12291                           tablat	equ	0xFF5
 12292                           prodh	equ	0xFF4
 12293                           prodl	equ	0xFF3
 12294                           intcon	equ	0xFF2
 12295                           intcon3	equ	0xFF0
 12296                           indf0	equ	0xFEF
 12297                           postinc0	equ	0xFEE
 12298                           fsr0h	equ	0xFEA
 12299                           fsr0l	equ	0xFE9
 12300                           wreg	equ	0xFE8
 12301                           postdec1	equ	0xFE5
 12302                           fsr1h	equ	0xFE2
 12303                           fsr1l	equ	0xFE1
 12304                           indf2	equ	0xFDF
 12305                           postinc2	equ	0xFDE
 12306                           postdec2	equ	0xFDD
 12307                           fsr2h	equ	0xFDA
 12308                           fsr2l	equ	0xFD9
 12309                           status	equ	0xFD8
 12310                           
 12311 ;; *************** function i2_isdigit *****************
 12312 ;; Defined at:
 12313 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 12314 ;; Parameters:    Size  Location     Type
 12315 ;;  c               1    wreg     unsigned char 
 12316 ;; Auto vars:     Size  Location     Type
 12317 ;;  c               1    2[COMRAM] unsigned char 
 12318 ;; Return value:  Size  Location     Type
 12319 ;;		None               void
 12320 ;; Registers used:
 12321 ;;		wreg, status,2, status,0
 12322 ;; Tracked objects:
 12323 ;;		On entry : 0/0
 12324 ;;		On exit  : 0/0
 12325 ;;		Unchanged: 0/0
 12326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12328 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12329 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12330 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12331 ;;Total ram usage:        3 bytes
 12332 ;; Hardware stack levels used:    1
 12333 ;; This function calls:
 12334 ;;		Nothing
 12335 ;; This function is called by:
 12336 ;;		i2_printf
 12337 ;; This function uses a non-reentrant model
 12338 ;;
 12339                           
 12340                           	psect	text59
 12341  0027C6                     __ptext59:
 12342                           	opt stack 0
 12343  0027C6                     i2_isdigit:
 12344                           	opt stack 20
 12345                           
 12346                           ;incstack = 0
 12347                           ;i2isdigit@c stored from wreg
 12348  0027C6  6E03               	movwf	i2isdigit@c,c
 12349  0027C8  0E00               	movlw	0
 12350  0027CA  6E02               	movwf	i2_isdigit$1565,c
 12351  0027CC  0E3A               	movlw	58
 12352  0027CE  6003               	cpfslt	i2isdigit@c,c
 12353  0027D0  D005               	goto	i2l3769
 12354  0027D2  0E2F               	movlw	47
 12355  0027D4  6403               	cpfsgt	i2isdigit@c,c
 12356  0027D6  D002               	goto	i2l3769
 12357  0027D8  0E01               	movlw	1
 12358  0027DA  6E02               	movwf	i2_isdigit$1565,c
 12359  0027DC                     i2l3769:
 12360  0027DC  C002  F001         	movff	i2_isdigit$1565,??i2_isdigit
 12361  0027E0  3001               	rrcf	??i2_isdigit,w,c
 12362  0027E2  0012               	return	
 12363  0027E4                     __end_ofi2_isdigit:
 12364                           	opt stack 0
 12365                           pclatu	equ	0xFFB
 12366                           pclath	equ	0xFFA
 12367                           tblptru	equ	0xFF8
 12368                           tblptrh	equ	0xFF7
 12369                           tblptrl	equ	0xFF6
 12370                           tablat	equ	0xFF5
 12371                           prodh	equ	0xFF4
 12372                           prodl	equ	0xFF3
 12373                           intcon	equ	0xFF2
 12374                           intcon3	equ	0xFF0
 12375                           indf0	equ	0xFEF
 12376                           postinc0	equ	0xFEE
 12377                           fsr0h	equ	0xFEA
 12378                           fsr0l	equ	0xFE9
 12379                           wreg	equ	0xFE8
 12380                           postdec1	equ	0xFE5
 12381                           fsr1h	equ	0xFE2
 12382                           fsr1l	equ	0xFE1
 12383                           indf2	equ	0xFDF
 12384                           postinc2	equ	0xFDE
 12385                           postdec2	equ	0xFDD
 12386                           fsr2h	equ	0xFDA
 12387                           fsr2l	equ	0xFD9
 12388                           status	equ	0xFD8
 12389                           
 12390 ;; *************** function i2___wmul *****************
 12391 ;; Defined at:
 12392 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 12393 ;; Parameters:    Size  Location     Type
 12394 ;;  multiplier      2    0[COMRAM] unsigned int 
 12395 ;;  multiplicand    2    2[COMRAM] unsigned int 
 12396 ;; Auto vars:     Size  Location     Type
 12397 ;;  __wmul          2    4[COMRAM] unsigned int 
 12398 ;; Return value:  Size  Location     Type
 12399 ;;                  2    0[COMRAM] unsigned int 
 12400 ;; Registers used:
 12401 ;;		wreg, status,2, status,0, prodl, prodh
 12402 ;; Tracked objects:
 12403 ;;		On entry : 0/0
 12404 ;;		On exit  : 0/0
 12405 ;;		Unchanged: 0/0
 12406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12407 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12408 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12410 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12411 ;;Total ram usage:        6 bytes
 12412 ;; Hardware stack levels used:    1
 12413 ;; This function calls:
 12414 ;;		Nothing
 12415 ;; This function is called by:
 12416 ;;		_printSortTimer
 12417 ;;		i2_printf
 12418 ;; This function uses a non-reentrant model
 12419 ;;
 12420                           
 12421                           	psect	text60
 12422  002758                     __ptext60:
 12423                           	opt stack 0
 12424  002758                     i2___wmul:
 12425                           	opt stack 20
 12426                           
 12427                           ;incstack = 0
 12428  002758  5001               	movf	i2___wmul@multiplier,w,c
 12429  00275A  0203               	mulwf	i2___wmul@multiplicand,c
 12430  00275C  CFF3 F005          	movff	prodl,i2___wmul@product
 12431  002760  CFF4 F006          	movff	prodh,i2___wmul@product+1
 12432  002764  5001               	movf	i2___wmul@multiplier,w,c
 12433  002766  0204               	mulwf	i2___wmul@multiplicand+1,c
 12434  002768  50F3               	movf	prodl,w,c
 12435  00276A  2606               	addwf	i2___wmul@product+1,f,c
 12436  00276C  5002               	movf	i2___wmul@multiplier+1,w,c
 12437  00276E  0203               	mulwf	i2___wmul@multiplicand,c
 12438  002770  50F3               	movf	prodl,w,c
 12439  002772  2606               	addwf	i2___wmul@product+1,f,c
 12440  002774  C005  F001         	movff	i2___wmul@product,?i2___wmul
 12441  002778  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 12442  00277C  0012               	return	
 12443  00277E                     __end_ofi2___wmul:
 12444                           	opt stack 0
 12445                           pclatu	equ	0xFFB
 12446                           pclath	equ	0xFFA
 12447                           tblptru	equ	0xFF8
 12448                           tblptrh	equ	0xFF7
 12449                           tblptrl	equ	0xFF6
 12450                           tablat	equ	0xFF5
 12451                           prodh	equ	0xFF4
 12452                           prodl	equ	0xFF3
 12453                           intcon	equ	0xFF2
 12454                           intcon3	equ	0xFF0
 12455                           indf0	equ	0xFEF
 12456                           postinc0	equ	0xFEE
 12457                           fsr0h	equ	0xFEA
 12458                           fsr0l	equ	0xFE9
 12459                           wreg	equ	0xFE8
 12460                           postdec1	equ	0xFE5
 12461                           fsr1h	equ	0xFE2
 12462                           fsr1l	equ	0xFE1
 12463                           indf2	equ	0xFDF
 12464                           postinc2	equ	0xFDE
 12465                           postdec2	equ	0xFDD
 12466                           fsr2h	equ	0xFDA
 12467                           fsr2l	equ	0xFD9
 12468                           status	equ	0xFD8
 12469                           
 12470 ;; *************** function i2___lwmod *****************
 12471 ;; Defined at:
 12472 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 12473 ;; Parameters:    Size  Location     Type
 12474 ;;  dividend        2    0[COMRAM] unsigned int 
 12475 ;;  divisor         2    2[COMRAM] unsigned int 
 12476 ;; Auto vars:     Size  Location     Type
 12477 ;;  __lwmod         1    4[COMRAM] unsigned char 
 12478 ;; Return value:  Size  Location     Type
 12479 ;;                  2    0[COMRAM] unsigned int 
 12480 ;; Registers used:
 12481 ;;		wreg, status,2, status,0
 12482 ;; Tracked objects:
 12483 ;;		On entry : 0/0
 12484 ;;		On exit  : 0/0
 12485 ;;		Unchanged: 0/0
 12486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12487 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12488 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12490 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12491 ;;Total ram usage:        5 bytes
 12492 ;; Hardware stack levels used:    1
 12493 ;; This function calls:
 12494 ;;		Nothing
 12495 ;; This function is called by:
 12496 ;;		_printSortTimer
 12497 ;;		i2_printf
 12498 ;; This function uses a non-reentrant model
 12499 ;;
 12500                           
 12501                           	psect	text61
 12502  002384                     __ptext61:
 12503                           	opt stack 0
 12504  002384                     i2___lwmod:
 12505                           	opt stack 20
 12506                           
 12507                           ;incstack = 0
 12508  002384  5003               	movf	i2___lwmod@divisor,w,c
 12509  002386  1004               	iorwf	i2___lwmod@divisor+1,w,c
 12510  002388  B4D8               	btfsc	status,2,c
 12511  00238A  D018               	goto	i2l1474
 12512  00238C  0E01               	movlw	1
 12513  00238E  6E05               	movwf	i2___lwmod@counter,c
 12514  002390  D004               	goto	i2l3801
 12515  002392                     i2l3799:
 12516  002392  90D8               	bcf	status,0,c
 12517  002394  3603               	rlcf	i2___lwmod@divisor,f,c
 12518  002396  3604               	rlcf	i2___lwmod@divisor+1,f,c
 12519  002398  2A05               	incf	i2___lwmod@counter,f,c
 12520  00239A                     i2l3801:
 12521  00239A  AE04               	btfss	i2___lwmod@divisor+1,7,c
 12522  00239C  D7FA               	goto	i2l3799
 12523  00239E                     i2l3803:
 12524  00239E  5003               	movf	i2___lwmod@divisor,w,c
 12525  0023A0  5C01               	subwf	i2___lwmod@dividend,w,c
 12526  0023A2  5004               	movf	i2___lwmod@divisor+1,w,c
 12527  0023A4  5802               	subwfb	i2___lwmod@dividend+1,w,c
 12528  0023A6  A0D8               	btfss	status,0,c
 12529  0023A8  D004               	goto	i2l3807
 12530  0023AA  5003               	movf	i2___lwmod@divisor,w,c
 12531  0023AC  5E01               	subwf	i2___lwmod@dividend,f,c
 12532  0023AE  5004               	movf	i2___lwmod@divisor+1,w,c
 12533  0023B0  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 12534  0023B2                     i2l3807:
 12535  0023B2  90D8               	bcf	status,0,c
 12536  0023B4  3204               	rrcf	i2___lwmod@divisor+1,f,c
 12537  0023B6  3203               	rrcf	i2___lwmod@divisor,f,c
 12538  0023B8  2E05               	decfsz	i2___lwmod@counter,f,c
 12539  0023BA  D7F1               	goto	i2l3803
 12540  0023BC                     i2l1474:
 12541  0023BC  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 12542  0023C0  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 12543  0023C4  0012               	return		;funcret
 12544  0023C6                     __end_ofi2___lwmod:
 12545                           	opt stack 0
 12546                           pclatu	equ	0xFFB
 12547                           pclath	equ	0xFFA
 12548                           tblptru	equ	0xFF8
 12549                           tblptrh	equ	0xFF7
 12550                           tblptrl	equ	0xFF6
 12551                           tablat	equ	0xFF5
 12552                           prodh	equ	0xFF4
 12553                           prodl	equ	0xFF3
 12554                           intcon	equ	0xFF2
 12555                           intcon3	equ	0xFF0
 12556                           indf0	equ	0xFEF
 12557                           postinc0	equ	0xFEE
 12558                           fsr0h	equ	0xFEA
 12559                           fsr0l	equ	0xFE9
 12560                           wreg	equ	0xFE8
 12561                           postdec1	equ	0xFE5
 12562                           fsr1h	equ	0xFE2
 12563                           fsr1l	equ	0xFE1
 12564                           indf2	equ	0xFDF
 12565                           postinc2	equ	0xFDE
 12566                           postdec2	equ	0xFDD
 12567                           fsr2h	equ	0xFDA
 12568                           fsr2l	equ	0xFD9
 12569                           status	equ	0xFD8
 12570                           
 12571 ;; *************** function i2___lwdiv *****************
 12572 ;; Defined at:
 12573 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 12574 ;; Parameters:    Size  Location     Type
 12575 ;;  dividend        2    5[COMRAM] unsigned int 
 12576 ;;  divisor         2    7[COMRAM] unsigned int 
 12577 ;; Auto vars:     Size  Location     Type
 12578 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 12579 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 12580 ;; Return value:  Size  Location     Type
 12581 ;;                  2    5[COMRAM] unsigned int 
 12582 ;; Registers used:
 12583 ;;		wreg, status,2, status,0
 12584 ;; Tracked objects:
 12585 ;;		On entry : 0/0
 12586 ;;		On exit  : 0/0
 12587 ;;		Unchanged: 0/0
 12588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12589 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12590 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12592 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12593 ;;Total ram usage:        7 bytes
 12594 ;; Hardware stack levels used:    1
 12595 ;; This function calls:
 12596 ;;		Nothing
 12597 ;; This function is called by:
 12598 ;;		_printSortTimer
 12599 ;;		i2_printf
 12600 ;; This function uses a non-reentrant model
 12601 ;;
 12602                           
 12603                           	psect	text62
 12604  002256                     __ptext62:
 12605                           	opt stack 0
 12606  002256                     i2___lwdiv:
 12607                           	opt stack 20
 12608                           
 12609                           ;incstack = 0
 12610  002256  0E00               	movlw	0
 12611  002258  6E0B               	movwf	i2___lwdiv@quotient+1,c
 12612  00225A  0E00               	movlw	0
 12613  00225C  6E0A               	movwf	i2___lwdiv@quotient,c
 12614  00225E  5008               	movf	i2___lwdiv@divisor,w,c
 12615  002260  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 12616  002262  B4D8               	btfsc	status,2,c
 12617  002264  D01C               	goto	i2l1464
 12618  002266  0E01               	movlw	1
 12619  002268  6E0C               	movwf	i2___lwdiv@counter,c
 12620  00226A  D004               	goto	i2l3781
 12621  00226C                     i2l3779:
 12622  00226C  90D8               	bcf	status,0,c
 12623  00226E  3608               	rlcf	i2___lwdiv@divisor,f,c
 12624  002270  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 12625  002272  2A0C               	incf	i2___lwdiv@counter,f,c
 12626  002274                     i2l3781:
 12627  002274  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 12628  002276  D7FA               	goto	i2l3779
 12629  002278                     i2l3783:
 12630  002278  90D8               	bcf	status,0,c
 12631  00227A  360A               	rlcf	i2___lwdiv@quotient,f,c
 12632  00227C  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 12633  00227E  5008               	movf	i2___lwdiv@divisor,w,c
 12634  002280  5C06               	subwf	i2___lwdiv@dividend,w,c
 12635  002282  5009               	movf	i2___lwdiv@divisor+1,w,c
 12636  002284  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 12637  002286  A0D8               	btfss	status,0,c
 12638  002288  D005               	goto	i2l3791
 12639  00228A  5008               	movf	i2___lwdiv@divisor,w,c
 12640  00228C  5E06               	subwf	i2___lwdiv@dividend,f,c
 12641  00228E  5009               	movf	i2___lwdiv@divisor+1,w,c
 12642  002290  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 12643  002292  800A               	bsf	i2___lwdiv@quotient,0,c
 12644  002294                     i2l3791:
 12645  002294  90D8               	bcf	status,0,c
 12646  002296  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 12647  002298  3208               	rrcf	i2___lwdiv@divisor,f,c
 12648  00229A  2E0C               	decfsz	i2___lwdiv@counter,f,c
 12649  00229C  D7ED               	goto	i2l3783
 12650  00229E                     i2l1464:
 12651  00229E  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 12652  0022A2  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 12653  0022A6  0012               	return		;funcret
 12654  0022A8                     __end_ofi2___lwdiv:
 12655                           	opt stack 0
 12656                           pclatu	equ	0xFFB
 12657                           pclath	equ	0xFFA
 12658                           tblptru	equ	0xFF8
 12659                           tblptrh	equ	0xFF7
 12660                           tblptrl	equ	0xFF6
 12661                           tablat	equ	0xFF5
 12662                           prodh	equ	0xFF4
 12663                           prodl	equ	0xFF3
 12664                           intcon	equ	0xFF2
 12665                           intcon3	equ	0xFF0
 12666                           indf0	equ	0xFEF
 12667                           postinc0	equ	0xFEE
 12668                           fsr0h	equ	0xFEA
 12669                           fsr0l	equ	0xFE9
 12670                           wreg	equ	0xFE8
 12671                           postdec1	equ	0xFE5
 12672                           fsr1h	equ	0xFE2
 12673                           fsr1l	equ	0xFE1
 12674                           indf2	equ	0xFDF
 12675                           postinc2	equ	0xFDE
 12676                           postdec2	equ	0xFDD
 12677                           fsr2h	equ	0xFDA
 12678                           fsr2l	equ	0xFD9
 12679                           status	equ	0xFD8
 12680                           
 12681 ;; *************** function i2_lcdInst *****************
 12682 ;; Defined at:
 12683 ;;		line 13 in file "lcd.c"
 12684 ;; Parameters:    Size  Location     Type
 12685 ;;  data            1    wreg     unsigned char 
 12686 ;; Auto vars:     Size  Location     Type
 12687 ;;  data            1    2[COMRAM] unsigned char 
 12688 ;; Return value:  Size  Location     Type
 12689 ;;                  1    wreg      void 
 12690 ;; Registers used:
 12691 ;;		wreg, status,2, status,0, cstack
 12692 ;; Tracked objects:
 12693 ;;		On entry : 0/0
 12694 ;;		On exit  : 0/0
 12695 ;;		Unchanged: 0/0
 12696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12698 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12700 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12701 ;;Total ram usage:        1 bytes
 12702 ;; Hardware stack levels used:    1
 12703 ;; Hardware stack levels required when called:    1
 12704 ;; This function calls:
 12705 ;;		i2_lcdNibble
 12706 ;; This function is called by:
 12707 ;;		_change_state_to_menu_11
 12708 ;;		_change_state_to_menu_12
 12709 ;;		_change_state_to_menu_22
 12710 ;;		_change_state_to_menu_23
 12711 ;;		_change_state_to_logs_11
 12712 ;;		_change_state_to_logs_12
 12713 ;;		_change_state_to_logs_22
 12714 ;;		_change_state_to_logs_23
 12715 ;;		_change_state_to_logs_33
 12716 ;;		_change_state_to_logs_34
 12717 ;;		_printSortTimer
 12718 ;;		i2_change_state_to_menu_start
 12719 ;;		i2_printRTC
 12720 ;; This function uses a non-reentrant model
 12721 ;;
 12722                           
 12723                           	psect	text63
 12724  0028A2                     __ptext63:
 12725                           	opt stack 0
 12726  0028A2                     i2_lcdInst:
 12727                           	opt stack 19
 12728                           
 12729                           ;incstack = 0
 12730                           ;i2lcdInst@data stored from wreg
 12731  0028A2  6E03               	movwf	i2lcdInst@data,c
 12732                           
 12733                           ;lcd.c: 14: LATDbits.LATD2 = 0;
 12734  0028A4  948C               	bcf	3980,2,c	;volatile
 12735                           
 12736                           ;lcd.c: 15: lcdNibble(data);
 12737  0028A6  5003               	movf	i2lcdInst@data,w,c
 12738  0028A8  EC00  F011         	call	i2_lcdNibble
 12739  0028AC  0012               	return		;funcret
 12740  0028AE                     __end_ofi2_lcdInst:
 12741                           	opt stack 0
 12742                           pclatu	equ	0xFFB
 12743                           pclath	equ	0xFFA
 12744                           tblptru	equ	0xFF8
 12745                           tblptrh	equ	0xFF7
 12746                           tblptrl	equ	0xFF6
 12747                           tablat	equ	0xFF5
 12748                           prodh	equ	0xFF4
 12749                           prodl	equ	0xFF3
 12750                           intcon	equ	0xFF2
 12751                           intcon3	equ	0xFF0
 12752                           indf0	equ	0xFEF
 12753                           postinc0	equ	0xFEE
 12754                           fsr0h	equ	0xFEA
 12755                           fsr0l	equ	0xFE9
 12756                           wreg	equ	0xFE8
 12757                           postdec1	equ	0xFE5
 12758                           fsr1h	equ	0xFE2
 12759                           fsr1l	equ	0xFE1
 12760                           indf2	equ	0xFDF
 12761                           postinc2	equ	0xFDE
 12762                           postdec2	equ	0xFDD
 12763                           fsr2h	equ	0xFDA
 12764                           fsr2l	equ	0xFD9
 12765                           status	equ	0xFD8
 12766                           
 12767 ;; *************** function i2_lcdNibble *****************
 12768 ;; Defined at:
 12769 ;;		line 23 in file "lcd.c"
 12770 ;; Parameters:    Size  Location     Type
 12771 ;;  data            1    wreg     unsigned char 
 12772 ;; Auto vars:     Size  Location     Type
 12773 ;;  data            1    1[COMRAM] unsigned char 
 12774 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 12775 ;; Return value:  Size  Location     Type
 12776 ;;                  1    wreg      void 
 12777 ;; Registers used:
 12778 ;;		wreg, status,2, status,0
 12779 ;; Tracked objects:
 12780 ;;		On entry : 0/0
 12781 ;;		On exit  : 0/0
 12782 ;;		Unchanged: 0/0
 12783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12785 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12787 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12788 ;;Total ram usage:        2 bytes
 12789 ;; Hardware stack levels used:    1
 12790 ;; This function calls:
 12791 ;;		Nothing
 12792 ;; This function is called by:
 12793 ;;		i2_lcdInst
 12794 ;;		i2_putch
 12795 ;; This function uses a non-reentrant model
 12796 ;;
 12797                           
 12798                           	psect	text64
 12799  002200                     __ptext64:
 12800                           	opt stack 0
 12801  002200                     i2_lcdNibble:
 12802                           	opt stack 19
 12803                           
 12804                           ;incstack = 0
 12805                           ;i2lcdNibble@data stored from wreg
 12806  002200  6E02               	movwf	i2lcdNibble@data,c
 12807                           
 12808                           ;lcd.c: 25: char temp = data & 0xF0;
 12809  002202  5002               	movf	i2lcdNibble@data,w,c
 12810  002204  0BF0               	andlw	240
 12811  002206  6E01               	movwf	i2lcdNibble@temp,c
 12812                           
 12813                           ;lcd.c: 26: LATD = LATD & 0x0F;
 12814  002208  508C               	movf	3980,w,c	;volatile
 12815  00220A  0B0F               	andlw	15
 12816  00220C  6E8C               	movwf	3980,c	;volatile
 12817                           
 12818                           ;lcd.c: 27: LATD = temp | LATD;
 12819  00220E  5001               	movf	i2lcdNibble@temp,w,c
 12820  002210  108C               	iorwf	3980,w,c	;volatile
 12821  002212  6E8C               	movwf	3980,c	;volatile
 12822                           
 12823                           ;lcd.c: 29: LATDbits.LATD3 = 1;
 12824  002214  868C               	bsf	3980,3,c	;volatile
 12825                           
 12826                           ;lcd.c: 30: _delay((unsigned long)((25)*(32000000/4000000.0)));
 12827  002216  0E42               	movlw	66
 12828  002218                     i2u475_47:
 12829  002218  2EE8               	decfsz	wreg,f,c
 12830  00221A  D7FE               	bra	i2u475_47
 12831  00221C  D000               	nop2	
 12832                           
 12833                           ;lcd.c: 31: LATDbits.LATD3 = 0;
 12834  00221E  968C               	bcf	3980,3,c	;volatile
 12835                           
 12836                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 12837  002220  0E42               	movlw	66
 12838  002222                     i2u476_47:
 12839  002222  2EE8               	decfsz	wreg,f,c
 12840  002224  D7FE               	bra	i2u476_47
 12841  002226  D000               	nop2	
 12842                           
 12843                           ;lcd.c: 34: data = data << 4;
 12844  002228  3802               	swapf	i2lcdNibble@data,w,c
 12845  00222A  0BF0               	andlw	240
 12846  00222C  6E02               	movwf	i2lcdNibble@data,c
 12847                           
 12848                           ;lcd.c: 36: temp = data & 0xF0;
 12849  00222E  5002               	movf	i2lcdNibble@data,w,c
 12850  002230  0BF0               	andlw	240
 12851  002232  6E01               	movwf	i2lcdNibble@temp,c
 12852                           
 12853                           ;lcd.c: 37: LATD = LATD & 0x0F;
 12854  002234  508C               	movf	3980,w,c	;volatile
 12855  002236  0B0F               	andlw	15
 12856  002238  6E8C               	movwf	3980,c	;volatile
 12857                           
 12858                           ;lcd.c: 38: LATD = temp | LATD;
 12859  00223A  5001               	movf	i2lcdNibble@temp,w,c
 12860  00223C  108C               	iorwf	3980,w,c	;volatile
 12861  00223E  6E8C               	movwf	3980,c	;volatile
 12862                           
 12863                           ;lcd.c: 40: LATDbits.LATD3 = 1;
 12864  002240  868C               	bsf	3980,3,c	;volatile
 12865                           
 12866                           ;lcd.c: 41: _delay((unsigned long)((25)*(32000000/4000000.0)));
 12867  002242  0E42               	movlw	66
 12868  002244                     i2u477_47:
 12869  002244  2EE8               	decfsz	wreg,f,c
 12870  002246  D7FE               	bra	i2u477_47
 12871  002248  D000               	nop2	
 12872                           
 12873                           ;lcd.c: 42: LATDbits.LATD3 = 0;
 12874  00224A  968C               	bcf	3980,3,c	;volatile
 12875                           
 12876                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 12877  00224C  0E42               	movlw	66
 12878  00224E                     i2u478_47:
 12879  00224E  2EE8               	decfsz	wreg,f,c
 12880  002250  D7FE               	bra	i2u478_47
 12881  002252  D000               	nop2	
 12882  002254  0012               	return		;funcret
 12883  002256                     __end_ofi2_lcdNibble:
 12884                           	opt stack 0
 12885                           pclatu	equ	0xFFB
 12886                           pclath	equ	0xFFA
 12887                           tblptru	equ	0xFF8
 12888                           tblptrh	equ	0xFF7
 12889                           tblptrl	equ	0xFF6
 12890                           tablat	equ	0xFF5
 12891                           prodh	equ	0xFF4
 12892                           prodl	equ	0xFF3
 12893                           intcon	equ	0xFF2
 12894                           intcon3	equ	0xFF0
 12895                           indf0	equ	0xFEF
 12896                           postinc0	equ	0xFEE
 12897                           fsr0h	equ	0xFEA
 12898                           fsr0l	equ	0xFE9
 12899                           wreg	equ	0xFE8
 12900                           postdec1	equ	0xFE5
 12901                           fsr1h	equ	0xFE2
 12902                           fsr1l	equ	0xFE1
 12903                           indf2	equ	0xFDF
 12904                           postinc2	equ	0xFDE
 12905                           postdec2	equ	0xFDD
 12906                           fsr2h	equ	0xFDA
 12907                           fsr2l	equ	0xFD9
 12908                           status	equ	0xFD8
 12909                           
 12910 ;; *************** function i2_getRTC *****************
 12911 ;; Defined at:
 12912 ;;		line 42 in file "RTC.c"
 12913 ;; Parameters:    Size  Location     Type
 12914 ;;		None
 12915 ;; Auto vars:     Size  Location     Type
 12916 ;;  getRTC          2    3[COMRAM] int 
 12917 ;; Return value:  Size  Location     Type
 12918 ;;                  1    wreg      void 
 12919 ;; Registers used:
 12920 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12921 ;; Tracked objects:
 12922 ;;		On entry : 0/0
 12923 ;;		On exit  : 0/0
 12924 ;;		Unchanged: 0/0
 12925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12927 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12929 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12930 ;;Total ram usage:        2 bytes
 12931 ;; Hardware stack levels used:    1
 12932 ;; Hardware stack levels required when called:    2
 12933 ;; This function calls:
 12934 ;;		i2_I2C_Master_Read
 12935 ;;		i2_I2C_Master_Start
 12936 ;;		i2_I2C_Master_Stop
 12937 ;;		i2_I2C_Master_Write
 12938 ;; This function is called by:
 12939 ;;		_printSortTimer
 12940 ;;		i2_printRTC
 12941 ;; This function uses a non-reentrant model
 12942 ;;
 12943                           
 12944                           	psect	text65
 12945  002064                     __ptext65:
 12946                           	opt stack 0
 12947  002064                     i2_getRTC:
 12948                           	opt stack 18
 12949                           
 12950                           ;RTC.c: 46: I2C_Master_Start();
 12951                           
 12952                           ;incstack = 0
 12953  002064  EC71  F014         	call	i2_I2C_Master_Start	;wreg free
 12954                           
 12955                           ;RTC.c: 47: I2C_Master_Write(0b11010000);
 12956  002068  0E00               	movlw	0
 12957  00206A  6E03               	movwf	i2I2C_Master_Write@d+1,c
 12958  00206C  0ED0               	movlw	208
 12959  00206E  6E02               	movwf	i2I2C_Master_Write@d,c
 12960  002070  EC5C  F014         	call	i2_I2C_Master_Write	;wreg free
 12961                           
 12962                           ;RTC.c: 48: I2C_Master_Write(0x00);
 12963  002074  0E00               	movlw	0
 12964  002076  6E03               	movwf	i2I2C_Master_Write@d+1,c
 12965  002078  0E00               	movlw	0
 12966  00207A  6E02               	movwf	i2I2C_Master_Write@d,c
 12967  00207C  EC5C  F014         	call	i2_I2C_Master_Write	;wreg free
 12968                           
 12969                           ;RTC.c: 49: I2C_Master_Stop();
 12970  002080  EC6D  F014         	call	i2_I2C_Master_Stop	;wreg free
 12971                           
 12972                           ;RTC.c: 52: I2C_Master_Start();
 12973  002084  EC71  F014         	call	i2_I2C_Master_Start	;wreg free
 12974                           
 12975                           ;RTC.c: 53: I2C_Master_Write(0b11010001);
 12976  002088  0E00               	movlw	0
 12977  00208A  6E03               	movwf	i2I2C_Master_Write@d+1,c
 12978  00208C  0ED1               	movlw	209
 12979  00208E  6E02               	movwf	i2I2C_Master_Write@d,c
 12980  002090  EC5C  F014         	call	i2_I2C_Master_Write	;wreg free
 12981                           
 12982                           ;RTC.c: 54: for(int i = 0; i < 6; i++){
 12983  002094  0E00               	movlw	0
 12984  002096  6E05               	movwf	i2getRTC@i+1,c
 12985  002098  0E00               	movlw	0
 12986  00209A  6E04               	movwf	i2getRTC@i,c
 12987  00209C                     i2l3995:
 12988  00209C  BE05               	btfsc	i2getRTC@i+1,7,c
 12989  00209E  D006               	goto	i2l3999
 12990  0020A0  5005               	movf	i2getRTC@i+1,w,c
 12991  0020A2  E111               	bnz	i2l4005
 12992  0020A4  0E06               	movlw	6
 12993  0020A6  5C04               	subwf	i2getRTC@i,w,c
 12994  0020A8  B0D8               	btfsc	status,0,c
 12995  0020AA  D00D               	goto	i2l4005
 12996  0020AC                     i2l3999:
 12997                           
 12998                           ;RTC.c: 55: time[i] = I2C_Master_Read(1);
 12999  0020AC  0ED4               	movlw	low _time
 13000  0020AE  2404               	addwf	i2getRTC@i,w,c
 13001  0020B0  6ED9               	movwf	fsr2l,c
 13002  0020B2  0E00               	movlw	high _time
 13003  0020B4  2005               	addwfc	i2getRTC@i+1,w,c
 13004  0020B6  6EDA               	movwf	fsr2h,c
 13005  0020B8  0E01               	movlw	1
 13006  0020BA  ECBF  F013         	call	i2_I2C_Master_Read
 13007  0020BE  6EDF               	movwf	indf2,c
 13008  0020C0  4A04               	infsnz	i2getRTC@i,f,c
 13009  0020C2  2A05               	incf	i2getRTC@i+1,f,c
 13010  0020C4  D7EB               	goto	i2l3995
 13011  0020C6                     i2l4005:
 13012                           
 13013                           ;RTC.c: 56: }
 13014                           ;RTC.c: 57: time[6] = I2C_Master_Read(0);
 13015  0020C6  0E00               	movlw	0
 13016  0020C8  ECBF  F013         	call	i2_I2C_Master_Read
 13017  0020CC  0100               	movlb	0	; () banked
 13018  0020CE  6FDA               	movwf	(_time+6)& (0+255),b
 13019                           
 13020                           ;RTC.c: 58: I2C_Master_Stop();
 13021  0020D0  EC6D  F014         	call	i2_I2C_Master_Stop	;wreg free
 13022  0020D4  0012               	return		;funcret
 13023  0020D6                     __end_ofi2_getRTC:
 13024                           	opt stack 0
 13025                           pclatu	equ	0xFFB
 13026                           pclath	equ	0xFFA
 13027                           tblptru	equ	0xFF8
 13028                           tblptrh	equ	0xFF7
 13029                           tblptrl	equ	0xFF6
 13030                           tablat	equ	0xFF5
 13031                           prodh	equ	0xFF4
 13032                           prodl	equ	0xFF3
 13033                           intcon	equ	0xFF2
 13034                           intcon3	equ	0xFF0
 13035                           indf0	equ	0xFEF
 13036                           postinc0	equ	0xFEE
 13037                           fsr0h	equ	0xFEA
 13038                           fsr0l	equ	0xFE9
 13039                           wreg	equ	0xFE8
 13040                           postdec1	equ	0xFE5
 13041                           fsr1h	equ	0xFE2
 13042                           fsr1l	equ	0xFE1
 13043                           indf2	equ	0xFDF
 13044                           postinc2	equ	0xFDE
 13045                           postdec2	equ	0xFDD
 13046                           fsr2h	equ	0xFDA
 13047                           fsr2l	equ	0xFD9
 13048                           status	equ	0xFD8
 13049                           
 13050 ;; *************** function i2_I2C_Master_Write *****************
 13051 ;; Defined at:
 13052 ;;		line 47 in file "I2C.c"
 13053 ;; Parameters:    Size  Location     Type
 13054 ;;  d               2    1[COMRAM] unsigned int 
 13055 ;; Auto vars:     Size  Location     Type
 13056 ;;		None
 13057 ;; Return value:  Size  Location     Type
 13058 ;;                  1    wreg      void 
 13059 ;; Registers used:
 13060 ;;		wreg, status,2, status,0, cstack
 13061 ;; Tracked objects:
 13062 ;;		On entry : 0/0
 13063 ;;		On exit  : 0/0
 13064 ;;		Unchanged: 0/0
 13065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13066 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13069 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13070 ;;Total ram usage:        2 bytes
 13071 ;; Hardware stack levels used:    1
 13072 ;; Hardware stack levels required when called:    1
 13073 ;; This function calls:
 13074 ;;		i2_I2C_Master_Wait
 13075 ;; This function is called by:
 13076 ;;		i2_getRTC
 13077 ;; This function uses a non-reentrant model
 13078 ;;
 13079                           
 13080                           	psect	text66
 13081  0028B8                     __ptext66:
 13082                           	opt stack 0
 13083  0028B8                     i2_I2C_Master_Write:
 13084                           	opt stack 18
 13085                           
 13086                           ;I2C.c: 49: I2C_Master_Wait();
 13087                           
 13088                           ;incstack = 0
 13089  0028B8  EC32  F014         	call	i2_I2C_Master_Wait	;wreg free
 13090                           
 13091                           ;I2C.c: 50: SSPBUF = d;
 13092  0028BC  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 13093  0028C0  0012               	return		;funcret
 13094  0028C2                     __end_ofi2_I2C_Master_Write:
 13095                           	opt stack 0
 13096                           pclatu	equ	0xFFB
 13097                           pclath	equ	0xFFA
 13098                           tblptru	equ	0xFF8
 13099                           tblptrh	equ	0xFF7
 13100                           tblptrl	equ	0xFF6
 13101                           tablat	equ	0xFF5
 13102                           prodh	equ	0xFF4
 13103                           prodl	equ	0xFF3
 13104                           intcon	equ	0xFF2
 13105                           intcon3	equ	0xFF0
 13106                           indf0	equ	0xFEF
 13107                           postinc0	equ	0xFEE
 13108                           fsr0h	equ	0xFEA
 13109                           fsr0l	equ	0xFE9
 13110                           wreg	equ	0xFE8
 13111                           postdec1	equ	0xFE5
 13112                           fsr1h	equ	0xFE2
 13113                           fsr1l	equ	0xFE1
 13114                           indf2	equ	0xFDF
 13115                           postinc2	equ	0xFDE
 13116                           postdec2	equ	0xFDD
 13117                           fsr2h	equ	0xFDA
 13118                           fsr2l	equ	0xFD9
 13119                           status	equ	0xFD8
 13120                           
 13121 ;; *************** function i2_I2C_Master_Stop *****************
 13122 ;; Defined at:
 13123 ;;		line 41 in file "I2C.c"
 13124 ;; Parameters:    Size  Location     Type
 13125 ;;		None
 13126 ;; Auto vars:     Size  Location     Type
 13127 ;;		None
 13128 ;; Return value:  Size  Location     Type
 13129 ;;                  1    wreg      void 
 13130 ;; Registers used:
 13131 ;;		wreg, status,2, status,0, cstack
 13132 ;; Tracked objects:
 13133 ;;		On entry : 0/0
 13134 ;;		On exit  : 0/0
 13135 ;;		Unchanged: 0/0
 13136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13140 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13141 ;;Total ram usage:        0 bytes
 13142 ;; Hardware stack levels used:    1
 13143 ;; Hardware stack levels required when called:    1
 13144 ;; This function calls:
 13145 ;;		i2_I2C_Master_Wait
 13146 ;; This function is called by:
 13147 ;;		i2_getRTC
 13148 ;; This function uses a non-reentrant model
 13149 ;;
 13150                           
 13151                           	psect	text67
 13152  0028DA                     __ptext67:
 13153                           	opt stack 0
 13154  0028DA                     i2_I2C_Master_Stop:
 13155                           	opt stack 18
 13156                           
 13157                           ;I2C.c: 43: I2C_Master_Wait();
 13158                           
 13159                           ;incstack = 0
 13160  0028DA  EC32  F014         	call	i2_I2C_Master_Wait	;wreg free
 13161                           
 13162                           ;I2C.c: 44: PEN = 1;
 13163  0028DE  84C5               	bsf	4037,2,c	;volatile
 13164  0028E0  0012               	return		;funcret
 13165  0028E2                     __end_ofi2_I2C_Master_Stop:
 13166                           	opt stack 0
 13167                           pclatu	equ	0xFFB
 13168                           pclath	equ	0xFFA
 13169                           tblptru	equ	0xFF8
 13170                           tblptrh	equ	0xFF7
 13171                           tblptrl	equ	0xFF6
 13172                           tablat	equ	0xFF5
 13173                           prodh	equ	0xFF4
 13174                           prodl	equ	0xFF3
 13175                           intcon	equ	0xFF2
 13176                           intcon3	equ	0xFF0
 13177                           indf0	equ	0xFEF
 13178                           postinc0	equ	0xFEE
 13179                           fsr0h	equ	0xFEA
 13180                           fsr0l	equ	0xFE9
 13181                           wreg	equ	0xFE8
 13182                           postdec1	equ	0xFE5
 13183                           fsr1h	equ	0xFE2
 13184                           fsr1l	equ	0xFE1
 13185                           indf2	equ	0xFDF
 13186                           postinc2	equ	0xFDE
 13187                           postdec2	equ	0xFDD
 13188                           fsr2h	equ	0xFDA
 13189                           fsr2l	equ	0xFD9
 13190                           status	equ	0xFD8
 13191                           
 13192 ;; *************** function i2_I2C_Master_Start *****************
 13193 ;; Defined at:
 13194 ;;		line 29 in file "I2C.c"
 13195 ;; Parameters:    Size  Location     Type
 13196 ;;		None
 13197 ;; Auto vars:     Size  Location     Type
 13198 ;;		None
 13199 ;; Return value:  Size  Location     Type
 13200 ;;                  1    wreg      void 
 13201 ;; Registers used:
 13202 ;;		wreg, status,2, status,0, cstack
 13203 ;; Tracked objects:
 13204 ;;		On entry : 0/0
 13205 ;;		On exit  : 0/0
 13206 ;;		Unchanged: 0/0
 13207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13211 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13212 ;;Total ram usage:        0 bytes
 13213 ;; Hardware stack levels used:    1
 13214 ;; Hardware stack levels required when called:    1
 13215 ;; This function calls:
 13216 ;;		i2_I2C_Master_Wait
 13217 ;; This function is called by:
 13218 ;;		i2_getRTC
 13219 ;; This function uses a non-reentrant model
 13220 ;;
 13221                           
 13222                           	psect	text68
 13223  0028E2                     __ptext68:
 13224                           	opt stack 0
 13225  0028E2                     i2_I2C_Master_Start:
 13226                           	opt stack 18
 13227                           
 13228                           ;I2C.c: 31: I2C_Master_Wait();
 13229                           
 13230                           ;incstack = 0
 13231  0028E2  EC32  F014         	call	i2_I2C_Master_Wait	;wreg free
 13232                           
 13233                           ;I2C.c: 32: SEN = 1;
 13234  0028E6  80C5               	bsf	4037,0,c	;volatile
 13235  0028E8  0012               	return		;funcret
 13236  0028EA                     __end_ofi2_I2C_Master_Start:
 13237                           	opt stack 0
 13238                           pclatu	equ	0xFFB
 13239                           pclath	equ	0xFFA
 13240                           tblptru	equ	0xFF8
 13241                           tblptrh	equ	0xFF7
 13242                           tblptrl	equ	0xFF6
 13243                           tablat	equ	0xFF5
 13244                           prodh	equ	0xFF4
 13245                           prodl	equ	0xFF3
 13246                           intcon	equ	0xFF2
 13247                           intcon3	equ	0xFF0
 13248                           indf0	equ	0xFEF
 13249                           postinc0	equ	0xFEE
 13250                           fsr0h	equ	0xFEA
 13251                           fsr0l	equ	0xFE9
 13252                           wreg	equ	0xFE8
 13253                           postdec1	equ	0xFE5
 13254                           fsr1h	equ	0xFE2
 13255                           fsr1l	equ	0xFE1
 13256                           indf2	equ	0xFDF
 13257                           postinc2	equ	0xFDE
 13258                           postdec2	equ	0xFDD
 13259                           fsr2h	equ	0xFDA
 13260                           fsr2l	equ	0xFD9
 13261                           status	equ	0xFD8
 13262                           
 13263 ;; *************** function i2_I2C_Master_Read *****************
 13264 ;; Defined at:
 13265 ;;		line 53 in file "I2C.c"
 13266 ;; Parameters:    Size  Location     Type
 13267 ;;  a               1    wreg     unsigned char 
 13268 ;; Auto vars:     Size  Location     Type
 13269 ;;  a               1    1[COMRAM] unsigned char 
 13270 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 13271 ;; Return value:  Size  Location     Type
 13272 ;;                  1    wreg      unsigned char 
 13273 ;; Registers used:
 13274 ;;		wreg, status,2, status,0, cstack
 13275 ;; Tracked objects:
 13276 ;;		On entry : 0/0
 13277 ;;		On exit  : 0/0
 13278 ;;		Unchanged: 0/0
 13279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13281 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13283 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13284 ;;Total ram usage:        2 bytes
 13285 ;; Hardware stack levels used:    1
 13286 ;; Hardware stack levels required when called:    1
 13287 ;; This function calls:
 13288 ;;		i2_I2C_Master_Wait
 13289 ;; This function is called by:
 13290 ;;		i2_getRTC
 13291 ;; This function uses a non-reentrant model
 13292 ;;
 13293                           
 13294                           	psect	text69
 13295  00277E                     __ptext69:
 13296                           	opt stack 0
 13297  00277E                     i2_I2C_Master_Read:
 13298                           	opt stack 18
 13299                           
 13300                           ;incstack = 0
 13301                           ;i2I2C_Master_Read@a stored from wreg
 13302  00277E  6E02               	movwf	i2I2C_Master_Read@a,c
 13303                           
 13304                           ;I2C.c: 55: unsigned char temp;
 13305                           ;I2C.c: 56: I2C_Master_Wait();
 13306  002780  EC32  F014         	call	i2_I2C_Master_Wait	;wreg free
 13307                           
 13308                           ;I2C.c: 57: RCEN = 1;
 13309  002784  86C5               	bsf	4037,3,c	;volatile
 13310                           
 13311                           ;I2C.c: 58: I2C_Master_Wait();
 13312  002786  EC32  F014         	call	i2_I2C_Master_Wait	;wreg free
 13313                           
 13314                           ;I2C.c: 59: temp = SSPBUF;
 13315  00278A  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 13316                           
 13317                           ;I2C.c: 60: I2C_Master_Wait();
 13318  00278E  EC32  F014         	call	i2_I2C_Master_Wait	;wreg free
 13319                           
 13320                           ;I2C.c: 61: ACKDT = (a)?0:1;
 13321  002792  5002               	movf	i2I2C_Master_Read@a,w,c
 13322  002794  A4D8               	btfss	status,2,c
 13323  002796  D002               	goto	i2u240_40
 13324  002798  8AC5               	bsf	4037,5,c	;volatile
 13325  00279A  D001               	goto	i2l3745
 13326  00279C                     i2u240_40:
 13327  00279C  9AC5               	bcf	4037,5,c	;volatile
 13328  00279E                     i2l3745:
 13329                           
 13330                           ;I2C.c: 62: ACKEN = 1;
 13331  00279E  88C5               	bsf	4037,4,c	;volatile
 13332                           
 13333                           ;I2C.c: 63: return temp;
 13334  0027A0  5003               	movf	i2I2C_Master_Read@temp,w,c
 13335  0027A2  0012               	return	
 13336  0027A4                     __end_ofi2_I2C_Master_Read:
 13337                           	opt stack 0
 13338                           pclatu	equ	0xFFB
 13339                           pclath	equ	0xFFA
 13340                           tblptru	equ	0xFF8
 13341                           tblptrh	equ	0xFF7
 13342                           tblptrl	equ	0xFF6
 13343                           tablat	equ	0xFF5
 13344                           prodh	equ	0xFF4
 13345                           prodl	equ	0xFF3
 13346                           intcon	equ	0xFF2
 13347                           intcon3	equ	0xFF0
 13348                           indf0	equ	0xFEF
 13349                           postinc0	equ	0xFEE
 13350                           fsr0h	equ	0xFEA
 13351                           fsr0l	equ	0xFE9
 13352                           wreg	equ	0xFE8
 13353                           postdec1	equ	0xFE5
 13354                           fsr1h	equ	0xFE2
 13355                           fsr1l	equ	0xFE1
 13356                           indf2	equ	0xFDF
 13357                           postinc2	equ	0xFDE
 13358                           postdec2	equ	0xFDD
 13359                           fsr2h	equ	0xFDA
 13360                           fsr2l	equ	0xFD9
 13361                           status	equ	0xFD8
 13362                           
 13363 ;; *************** function i2_I2C_Master_Wait *****************
 13364 ;; Defined at:
 13365 ;;		line 24 in file "I2C.c"
 13366 ;; Parameters:    Size  Location     Type
 13367 ;;		None
 13368 ;; Auto vars:     Size  Location     Type
 13369 ;;		None
 13370 ;; Return value:  Size  Location     Type
 13371 ;;                  1    wreg      void 
 13372 ;; Registers used:
 13373 ;;		wreg, status,2, status,0
 13374 ;; Tracked objects:
 13375 ;;		On entry : 0/0
 13376 ;;		On exit  : 0/0
 13377 ;;		Unchanged: 0/0
 13378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13381 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13382 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13383 ;;Total ram usage:        1 bytes
 13384 ;; Hardware stack levels used:    1
 13385 ;; This function calls:
 13386 ;;		Nothing
 13387 ;; This function is called by:
 13388 ;;		i2_I2C_Master_Start
 13389 ;;		i2_I2C_Master_Stop
 13390 ;;		i2_I2C_Master_Write
 13391 ;;		i2_I2C_Master_Read
 13392 ;; This function uses a non-reentrant model
 13393 ;;
 13394                           
 13395                           	psect	text70
 13396  002864                     __ptext70:
 13397                           	opt stack 0
 13398  002864                     i2_I2C_Master_Wait:
 13399                           	opt stack 18
 13400  002864                     i2l120:
 13401  002864  B4C7               	btfsc	4039,2,c	;volatile
 13402  002866  D7FE               	goto	i2l120
 13403  002868  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 13404  00286C  0E1F               	movlw	31
 13405  00286E  1601               	andwf	??i2_I2C_Master_Wait,f,c
 13406  002870  B4D8               	btfsc	status,2,c
 13407  002872  0012               	return	
 13408  002874  D7F7               	goto	i2l120
 13409  002876                     __end_ofi2_I2C_Master_Wait:
 13410                           	opt stack 0
 13411                           pclatu	equ	0xFFB
 13412                           pclath	equ	0xFFA
 13413                           tblptru	equ	0xFF8
 13414                           tblptrh	equ	0xFF7
 13415                           tblptrl	equ	0xFF6
 13416                           tablat	equ	0xFF5
 13417                           prodh	equ	0xFF4
 13418                           prodl	equ	0xFF3
 13419                           intcon	equ	0xFF2
 13420                           intcon3	equ	0xFF0
 13421                           indf0	equ	0xFEF
 13422                           postinc0	equ	0xFEE
 13423                           fsr0h	equ	0xFEA
 13424                           fsr0l	equ	0xFE9
 13425                           wreg	equ	0xFE8
 13426                           postdec1	equ	0xFE5
 13427                           fsr1h	equ	0xFE2
 13428                           fsr1l	equ	0xFE1
 13429                           indf2	equ	0xFDF
 13430                           postinc2	equ	0xFDE
 13431                           postdec2	equ	0xFDD
 13432                           fsr2h	equ	0xFDA
 13433                           fsr2l	equ	0xFD9
 13434                           status	equ	0xFD8
 13435                           pclatu	equ	0xFFB
 13436                           pclath	equ	0xFFA
 13437                           tblptru	equ	0xFF8
 13438                           tblptrh	equ	0xFF7
 13439                           tblptrl	equ	0xFF6
 13440                           tablat	equ	0xFF5
 13441                           prodh	equ	0xFF4
 13442                           prodl	equ	0xFF3
 13443                           intcon	equ	0xFF2
 13444                           intcon3	equ	0xFF0
 13445                           indf0	equ	0xFEF
 13446                           postinc0	equ	0xFEE
 13447                           fsr0h	equ	0xFEA
 13448                           fsr0l	equ	0xFE9
 13449                           wreg	equ	0xFE8
 13450                           postdec1	equ	0xFE5
 13451                           fsr1h	equ	0xFE2
 13452                           fsr1l	equ	0xFE1
 13453                           indf2	equ	0xFDF
 13454                           postinc2	equ	0xFDE
 13455                           postdec2	equ	0xFDD
 13456                           fsr2h	equ	0xFDA
 13457                           fsr2l	equ	0xFD9
 13458                           status	equ	0xFD8
 13459                           
 13460                           	psect	rparam
 13461  0000                     pclatu	equ	0xFFB
 13462                           pclath	equ	0xFFA
 13463                           tblptru	equ	0xFF8
 13464                           tblptrh	equ	0xFF7
 13465                           tblptrl	equ	0xFF6
 13466                           tablat	equ	0xFF5
 13467                           prodh	equ	0xFF4
 13468                           prodl	equ	0xFF3
 13469                           intcon	equ	0xFF2
 13470                           intcon3	equ	0xFF0
 13471                           indf0	equ	0xFEF
 13472                           postinc0	equ	0xFEE
 13473                           fsr0h	equ	0xFEA
 13474                           fsr0l	equ	0xFE9
 13475                           wreg	equ	0xFE8
 13476                           postdec1	equ	0xFE5
 13477                           fsr1h	equ	0xFE2
 13478                           fsr1l	equ	0xFE1
 13479                           indf2	equ	0xFDF
 13480                           postinc2	equ	0xFDE
 13481                           postdec2	equ	0xFDD
 13482                           fsr2h	equ	0xFDA
 13483                           fsr2l	equ	0xFD9
 13484                           status	equ	0xFD8
 13485                           
 13486                           	psect	temp
 13487  000079                     btemp:
 13488                           	opt stack 0
 13489  000079                     	ds	1
 13490  0000                     int$flags	set	btemp
 13491                           pclatu	equ	0xFFB
 13492                           pclath	equ	0xFFA
 13493                           tblptru	equ	0xFF8
 13494                           tblptrh	equ	0xFF7
 13495                           tblptrl	equ	0xFF6
 13496                           tablat	equ	0xFF5
 13497                           prodh	equ	0xFF4
 13498                           prodl	equ	0xFF3
 13499                           intcon	equ	0xFF2
 13500                           intcon3	equ	0xFF0
 13501                           indf0	equ	0xFEF
 13502                           postinc0	equ	0xFEE
 13503                           fsr0h	equ	0xFEA
 13504                           fsr0l	equ	0xFE9
 13505                           wreg	equ	0xFE8
 13506                           postdec1	equ	0xFE5
 13507                           fsr1h	equ	0xFE2
 13508                           fsr1l	equ	0xFE1
 13509                           indf2	equ	0xFDF
 13510                           postinc2	equ	0xFDE
 13511                           postdec2	equ	0xFDD
 13512                           fsr2h	equ	0xFDA
 13513                           fsr2l	equ	0xFD9
 13514                           status	equ	0xFD8


Data Sizes:
    Strings     555
    Constant    27
    Data        8
    BSS         77
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     120
    BANK0           128     84     125
    BANK1           256      0      14
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_47(CODE[4]), STR_46(CODE[4]), STR_45(CODE[4]), STR_44(CODE[4]), 
		 -> STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), STR_40(CODE[4]), 
		 -> STR_39(CODE[4]), STR_38(CODE[4]), STR_37(CODE[4]), STR_36(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_51(CODE[7]), printRTC@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_50(CODE[21]), STR_49(CODE[11]), STR_48(CODE[24]), STR_35(CODE[17]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[17]), STR_28(CODE[17]), STR_27(CODE[17]), 
		 -> STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[17]), 
		 -> STR_22(CODE[17]), STR_21(CODE[17]), STR_20(CODE[17]), STR_19(CODE[17]), 
		 -> STR_18(CODE[17]), STR_17(CODE[17]), STR_16(CODE[17]), STR_15(CODE[17]), 
		 -> STR_14(CODE[3]), STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[17]), 
		 -> STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[18]), STR_7(CODE[10]), 
		 -> STR_6(CODE[17]), STR_5(CODE[7]), STR_4(CODE[17]), STR_3(CODE[18]), 
		 -> STR_2(CODE[21]), STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_22->i2_printf
    _change_state_to_menu_12->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_getIR
    _initSortTimer->_getRTC
    _getIR->_getRTC
    _ID->_moveServoBlock
    _Distribution->_moveServoCup
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    ___awdiv->___awmod

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   29080
                         _PortTestA5
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0    1524
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              1     1      0    1421
                                             24 BANK0      1     1      0
                              _getIR
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _getIR                                               19    19      0     655
                                              5 BANK0     19    19      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   7     7      0      75
                                              3 BANK0      7     7      0
                       _MAGNETISM_in
                     _moveServoBlock
 ---------------------------------------------------------------------------------
 (3) _moveServoBlock                                       3     3      0      25
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _MAGNETISM_in                                         2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         0     0      0      28
                       _moveServoCup
 ---------------------------------------------------------------------------------
 (3) _moveServoCup                                         3     3      0      28
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   13002
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   12152
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  16    16      0   13881
                                             68 BANK0     16    16      0
                            ___awdiv
                            ___awmod
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0    7428
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    1611
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _printf                                              33    21     12    4589
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     593
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     680
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _PortTestA5                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   73560
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   68752
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_12
            _change_state_to_menu_22
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7546
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4506
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30400
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_12
            _change_state_to_menu_22
            _change_state_to_menu_23
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_22                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_12                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2     406
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4808
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    2905
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     417
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PortTestA5
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _machineConfig
   _sort
     _Distribution
       _moveServoCup
     _ID
       _MAGNETISM_in
       _moveServoBlock
     _Loading
       _getIR
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       E       7        5.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     54      7D       5       97.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      78       1       95.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     103      34        0.0%
DATA                 0      0     103       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Feb 17 16:45:40 2017

                   i2_I2C_Master_Start 28E2                     i2_I2C_Master_Write 28B8  
                                   _ID 1C04                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0073  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C7  
                                  l200 2852                                    l120 282A  
                                  l203 2858                                    l820 0D5A  
                                  l657 1F52                           __CFG_CPB$OFF 000000  
                                  _PEN 007E2A                           __CFG_CPD$OFF 000000  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00ED                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
      __end_of_change_state_to_menu_11 258E        __end_of_change_state_to_menu_12 255E  
      __end_of_change_state_to_menu_22 252E        __end_of_change_state_to_menu_23 24FE  
         _f_can_coming_to_distribution 00E5                         ??_Distribution 0083  
      __end_of_change_state_to_logs_11 267E        __end_of_change_state_to_logs_12 264E  
      __end_of_change_state_to_logs_22 261E        __end_of_change_state_to_logs_23 26DA  
      __end_of_change_state_to_logs_33 25EE        __end_of_change_state_to_logs_34 25BE  
                                 ??_ID 0083                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1411 1B44                                   l1464 1FE6  
                                 l1474 2196                                   l5013 0506  
                                 l5005 04E4                                   l5023 0522  
                                 l5031 0546                                   l5009 04EE  
                                 l4305 1B64                                   l4171 0DBE  
                                 l5027 053A                                   l5019 0518  
                                 l4323 1920                                   l4315 1BF0  
                                 l4181 0E54                                   l4173 0DDC  
                                 l4165 0D64                                   l4333 19AC  
                                 l4309 1B7A                                   l4183 0E72  
                                 l4175 0DFA                                   l4167 0D82  
                                 l4191 0ECC                                   l4159 0CD8  
                                 l4343 23D6                                   l4327 1936  
                                 l3705 1FD8                                   l3721 2188  
                                 l3713 2152                                   l4185 0E90  
                                 l4177 0E18                                   l4169 0DA0  
                                 l4193 0F2A                                   l4425 1E28  
                                 l4361 2034                                   l4353 2004  
                                 l4345 23E2                                   l3715 215E  
                                 l4187 0EAE                                   l4179 0E36  
                                 l4435 1E6A                                   l4355 2010  
                                 l4339 19CE                                   l4603 1D84  
                                 l3717 2164                                   l3821 0576  
                                 l4429 1E3E                                   l4357 201C  
                                 l4365 2040                                   l4349 23EE  
                                 l5341 1F42                                   l3911 0864  
                                 l3823 0588                                   l4359 2028  
                                 l4721 1CFE                                   l4713 1CD8  
                                 l3905 0822                                   l3841 0642  
                                 l3833 05C6                                   l3817 0562  
                                 l4625 1DE2                                   l5345 1F4C  
                                 l5337 1F36                                   l3659 26A4  
                                 l3923 089A                                   l3851 0680  
                                 l3827 0592                                   l4643 1C8A  
                                 l4619 1DC0                                   l5339 1F3C  
                                 l4733 1D44                                   l4725 1D22  
                                 l4717 1CEC                                   l4709 1CC8  
                                 l3693 1F96                                   l3677 2726  
                                 l3925 08A6                                   l3933 08D4  
                                 l3917 087E                                   l3909 085A  
                                 l3861 06F8                                   l3853 0686  
                                 l3941 093E                                   l4813 0196  
                                 l4805 0174                                   l5349 1F54  
                                 l4671 1A0E                                   l4719 1CF8  
                                 l3951 1EC8                                   l3695 1FA2  
                                 l3935 08DA                                   l3863 06FE  
                                 l4903 031E                                   l4823 01B2  
                                 l4681 1A3E                                   l4665 19F8  
                                 l4729 1D30                                   l3697 1FA8  
                                 l3929 08C0                                   l3865 0716  
                                 l3849 0674                                   l3873 075A  
                                 l3961 240A                                   l4809 017E  
                                 l3947 1EB2                                   l3939 0932  
                                 l3859 06EC                                   l3875 078E  
                                 l3963 2416                                   l4907 0336  
                                 l4827 01CA                                   l4819 01A8  
                                 l3971 1AC8                                   l4677 1A2C  
                                 l4693 1A7C                                   l3957 1EE8  
                                 l3885 07BE                                   l3869 0742  
                                 l4933 03AE                                   l4925 038C  
                                 l4853 0242                                   l4845 0220  
                                 l3973 1AD8                                   l4679 1A38  
                                 l3887 07C4                                   l4943 03CA  
                                 l4863 025E                                   l4791 0122  
                                 l4783 00F8                                   l4775 00DC  
                                 l3983 1B32                                   l3975 1ADE  
                                 l4697 1A90                                   l4689 1A6E  
                                 l4929 0396                                   l4849 022A  
                                 _ADFM 007E07                                   l3899 0800  
                                 l4947 03E2                                   l4939 03C0  
                                 l4867 0276                                   l4859 0254  
                                 l4787 0110                                   l4779 00EE  
                                 l4973 045A                                   l4965 0438  
                                 l4893 0302                                   l4885 02E0  
                                 l4983 0476                                   l4969 0442  
                                 l4889 02EA                                   l4987 048E  
                                 l4979 046C                                   l4899 0314  
                                 _ADON 007E10                                   STR_1 FF9B  
                                 STR_2 FDEC                                   STR_3 FE01  
                                 STR_4 FF79                                   STR_5 FFC5  
                                 STR_6 FEF1                                   STR_7 FFB4  
                                 STR_8 FE13                                   STR_9 FE9C  
                                 u2300 26A2                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u3130 0D5A                                   u3115 21D0  
                                 u3410 1C3A                                   u2540 06C0  
                                 u3440 1C7A                                   u3418 1C3E  
                                 u2547 06B6                                   u2580 0738  
                                 u3448 1C7E                                   u2587 072E  
                                 u4507 002A                                   u4517 0100  
                                 u4607 0326                                   u4527 0130  
                                 u4617 0350                                   u4537 0186  
                                 u4707 20F6                                   u4627 039E  
                                 u4547 01BA                                   _RCEN 007E2B  
                                 u4717 2100                                   u4637 03D2  
                                 u4557 01E4                                   u4477 1D72  
                                 u4727 212C                                   u4647 03FC  
                                 u4567 0232                                   u4487 2346  
                                 u4737 2136                                   u4657 044A  
                                 u4577 0266                                   u4497 237A  
                                 u4667 047E                                   u4587 0290  
                                 u4677 04A8                                   u4597 02F2  
                                 u4687 04F6                                   u4697 052A  
                                 _RSEN 007E29                            _stopSignals 27FE  
                                 _back 005F                                   _main 1EF8  
                                 _down 0069                                   _keys FDB9  
                                 _time 00D4                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 2814                                   btemp 0079  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                      __end_ofi2_putch 28A2                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 122E  
                          i2_lcdNibble 2200                        __end_of_Loading 1DE6  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001                       ?_I2C_Master_Stop 0001  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 1A9A  
                                STR_10 FECF                                  STR_11 FEAD  
                                STR_20 FF57                                  STR_12 FEE0  
                                STR_13 FEBE                                  STR_21 FE69  
                                STR_30 FE36                                  STR_22 FE7A  
                                STR_14 FFFC                                  STR_15 FF8A  
                                STR_23 FF46                                  STR_31 FF24  
                                STR_32 FF24                                  STR_40 FFF8  
                                STR_16 FF68                                  STR_24 FF02  
                                STR_41 FFE0                                  STR_17 FE7A  
                                STR_33 FE58                                  STR_25 FE36  
                                STR_34 FE47                                  STR_50 FDEC  
                                STR_42 FFD8                                  STR_18 FE8B  
                                STR_26 FE25                                  STR_43 FFD4  
                                STR_51 FFBE                                  STR_19 FF57  
                                STR_35 FF35                                  STR_27 FF13  
                                STR_28 FF13                                  STR_44 FFE4  
                                STR_36 FFDC                        __end_of___awmod 1D4E  
                                STR_45 FFF0                                  STR_37 FFCC  
                                STR_29 FE47                                  STR_46 FFF4  
                                STR_38 FFE8                                  STR_39 FFEC  
                                STR_47 FFD0                                  STR_48 FDD4  
                                STR_49 FFA9                                  ?_sort 0001  
                      __end_of___lldiv 1B56                                  _T0CON 000FD5  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                      __end_of___lwdiv 1FF0                                  i2l120 2864  
                      __end_of___lwmod 21A0                                  i2l368 122A  
                                i2l528 18D6                                  i2l820 12BC  
                      ___awdiv@counter 008A                                  _TMR0H 000FD7  
                                _TMR0L 000FD6                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _IR_in 00DB                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 2896  
                      __end_of_handler 1912                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_initLCD 2384  
                       __CFG_EBTRB$OFF 000000                             i2isdigit@c 0003  
                                _getIR 1912                        __end_of_loadRTC 1E72  
                                _block 0077                        __end_of_dpowers FDD4  
                                _first 00FB                                  _enter 006B  
                      __end_of_isdigit 2730                                  _input 0078  
                                _putch 2876                                  pclath 000FFA  
                                tablat 000FF5                __size_of_moveServoBlock 003A  
                     __end_ofi2___wmul 277E                       __end_ofi2_getRTC 20D6  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 0CA4  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
               moveServoCup@myPosition 0080                       __end_ofi2_strcpy 249E  
                     _count_can_no_lab 0061                        __initialization 22A8  
                   __size_ofi2_lcdInst 000C                           __end_of_main 1F78  
                         __end_of_keys FDCA                           __end_of_sort 282A  
                           i2printf@ap 001E                             i2printf@cp 0020  
                   __size_ofi2_isdigit 001E    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00D4  
                 __end_of_MAGNETISM_in 28EC                                 ??_sort 0099  
                        __activetblptr 000003                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                    ?_I2C_Master_Write 0081                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AE  
                      i2lcdNibble@temp 0001                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l4005 20C6                                 i2l4101 0BCA  
                               i2l4013 0978                                 i2l4103 0BD2  
                               i2l4015 0986                                 i2l1464 229E  
                               i2l4121 0C1A                                 i2l4041 0A48  
                               i2l4033 0A20                                 i2l4025 09BE  
                               i2l4009 0968                                 i2l1474 23BC  
                               i2l4131 0C80                                 i2l4115 0BFE  
                               i2l4051 0AA0                                 i2l4043 0A52  
                               i2l4019 098C                                 i2l4117 0C06  
                               i2l4125 0C2C                                 i2l4109 0BE8  
                               i2l4061 0AEC                                 i2l4053 0AAA  
                               i2l4045 0A56                                 i2l4133 0C88  
                               i2l4127 0C32                                 i2l4055 0AB0  
                               i2l5111 108E                                 i2l5103 1072  
                               i2l4057 0AC2                                 i2l4065 0AFE  
                               i2l4137 2476                                 i2l4401 138C  
                               i2l5041 0F9E                                 i2l4091 0B8C  
                               i2l4067 0B2E                                 i2l5211 1480  
                               i2l4139 247E                                 i2l4403 13A2  
                               i2l4411 1428                                 i2l5131 10DC  
                               i2l5123 10C0                                 i2l5115 109C  
                               i2l5107 1080                                 i2l5051 0FC0  
                               i2l5043 0FA4                                 i2l4077 0B56  
                               i2l4405 13B8                                 i2l4079 0B5A  
                               i2l5207 1470                                 i2l5151 1132  
                               i2l5143 110E                                 i2l5135 10F2  
                               i2l5127 10CE                                 i2l5119 10B2  
                               i2l5071 0FF8                                 i2l5055 0FCE  
                               i2l5047 0FB2                                 i2l5311 18B2  
                               i2l3801 239A                                 i2l4097 0BA6  
                               i2l5217 14DA                                 i2l4521 1756  
                               i2l4409 13CE                                 i2l3803 239E  
                               i2l5227 159C                                 i2l4531 177C  
                               i2l4515 1748                                 i2l4507 1730  
                               i2l5171 1180                                 i2l5163 115C  
                               i2l5155 1140                                 i2l5147 111C  
                               i2l5139 1100                                 i2l5091 1040  
                               i2l5083 1024                                 i2l5075 1006  
                               i2l5067 0FEA                                 i2l5059 0FDC  
                               i2l4541 179E                                 i2l4525 1772  
                               i2l5501 1704                                 i2l3807 23B2  
                               i2l4535 1790                                 i2l5503 1720  
                               i2l4471 16AA                                 i2l4391 131E  
                               i2l4383 12C6                                 i2l5183 11B2  
                               i2l5175 118E                                 i2l5167 1172  
                               i2l5159 114E                                 i2l5095 104E  
                               i2l5087 1032                                 i2l5079 1016  
                               i2l3745 279E                                 i2l4537 1794  
                               i2l4481 16C8                                 i2l4393 1334  
                               i2l4385 12DC                                 i2l4377 125A  
                               i2l4571 180C                                 i2l4563 17E8  
                               i2l4555 17C4                                 i2l4491 16E6  
                               i2l4483 16CE                                 i2l4467 1696  
                               i2l4459 167C                                 i2l4395 134A  
                               i2l4387 12F2                                 i2l5179 119C  
                               i2l5099 105C                                 i2l3781 2274  
                               i2l4549 17B6                                 i2l4485 16D4  
                               i2l4469 16A6                                 i2l4477 16B4  
                               i2l4397 1360                                 i2l4389 1308  
                               i2l5189 11C0                                 i2l3791 2294  
                               i2l3783 2278                                 i2l4567 17FA  
                               i2l4559 17D6                                 i2l4487 16DA  
                               i2l4495 16EC                                 i2l4399 1376  
                               i2l3769 27DC                                 i2l4489 16E0  
                               i2l4577 1816                                 i2l3779 226C  
                               i2l5493 11DE                                 i2l3799 2392  
                               i2l5495 1200                                 i2l5497 121C  
                               i2l3995 209C                                 i2l3999 20AC  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 0098  
                       __CFG_XINST$OFF 000000                       __end_of_dispLogs 2852  
                          ?i2_printRTC 0001                   __end_of_Distribution 24CE  
                               ___wmul 2436                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                              ??___awmod 0084  
                               _getRTC 1E72                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 27C6  
                               _initUI 27E4                                 getIR@i 0096  
                               clear_0 22CE                                 clear_1 22DA  
                               clear_2 22E6                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestA5 2852  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 0554                              ??_handler 004B  
                               _strcpy 2400                              ??_initLCD 0083  
                            ??_loadRTC 0095   __end_ofi2_change_state_to_menu_start 2758  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 2730  
                            ??_isdigit 0080                      __end_ofi2___lwdiv 22A8  
                     __end_of_printRTC 0F6E                           __mediumconst FDB8  
                    __end_ofi2___lwmod 23C6                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                    __end_ofi2_lcdInst 28AE                      __end_ofi2_isdigit 27E4  
                           __accesstop 0080                __end_of__initialization 22EC  
                        ?_inputHandler 002A                          ___rparam_used 000001  
              printSortTimer@start_sec 003B                     i2___lwmod@dividend 0001  
                       __pcstackCOMRAM 0001                           __pidataBANK0 28C2  
                        __end_of_getIR 19DC                            i2printRTC@i 0041  
                        _initSortTimer 1B56                       _beamTimerCounter 00DD  
                        __end_of_putch 2886                            i2printf@len 0024  
                          i2printf@val 0022                             __end_of_ID 1CAC  
                           __end_of_UI 0554                     printSortTimer@hour 003F  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0068  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002D     __end_of_change_state_to_menu_start 2706  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 26DA  
                printSortTimer@cur_sec 003D                              ?i2_printf 000D  
                              ??_getIR 0085                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0065                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                         _moveServoBlock 23C6  
                           __pbssBANK0 00D4                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_640 00CA                                UI@i_641 00CB  
                       ?_initSortTimer 0001                                UI@i_652 00D0  
                              UI@i_644 00CC                                UI@i_636 00C8  
                              UI@i_653 00D1                                UI@i_645 00CD  
                              UI@i_637 00C9                                UI@i_656 00D2  
                              UI@i_648 00CE                                UI@i_657 00D3  
                              UI@i_649 00CF                                ?___wmul 0080  
                __size_of_MAGNETISM_in 0002                                ?_getRTC 0001  
                              ?_initUI 0001                            ?_PortTestA5 0001  
                              ?_printf 008E              ID@top_bottom_conductivity 0084  
                              _UI$1921 00C5                                ?_strcpy 0080  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                        ?_moveServoCup 0001                             ??i2_printf 0019  
               __end_of_moveServoBlock 2400                             ??i2_strcpy 0005  
                            ?_dispLogs 0001                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              i2_putch 2896                              ?_initTime 0080  
                         _MAGNETISM_in 28EA                        _f_loadingNewCan 00EB  
                      i2printRTC@month 003D                  __size_of_Distribution 0030  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 213E  
                              _Loading 1D4E            __size_ofi2_I2C_Master_Write 000A  
                              __Hparam 0000                                __Lparam 0000  
                            ?_printRTC 0001                                ___awdiv 19DC  
                              ___awmod 1CAC                                ___lldiv 1A9A  
                      __size_of___wmul 0036                                ___lwdiv 1F78  
                              ___lwmod 213E                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                              _canType 00F3                        __size_of_initUI 001A  
                              __pcinit 22A8                                __ramtop 1000  
                              _lcdInst 2886                                _handler 0008  
                              __ptext0 1EF8                                __ptext1 27FE  
                              __ptext2 2814                                __ptext3 1D4E  
                              __ptext4 1B56                                __ptext5 1912  
                              __ptext6 1C04                                __ptext7 23C6  
                              __ptext8 28EA                                __ptext9 249E  
                      __size_of_printf 040A                         ??_moveServoCup 0080  
                      __size_of_strcpy 0036                                _initLCD 233E  
                              _loadRTC 1DE6                                _dpowers FDCA  
                              _isdigit 2706                       ___awmod@dividend 0080  
                              getRTC@i 0083               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                                _was_low 0075  
                      ?_moveServoBlock 0001                             ??_dispLogs 0003  
                         _Distribution 249E                         __pintcode_body 1844  
                 end_of_initialization 22EC                        _servoSelectFlag 006F  
                           ??_initTime 0086                                int_func 1844  
                  i2___wmul@multiplier 0001                    __size_of_PortTestA5 0012  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 1844  
                __end_of_machineConfig 233E                             _updateMenu 0F6E  
                    i2_I2C_Master_Read 277E                      i2_I2C_Master_Wait 2864  
                    i2_I2C_Master_Stop 28DA                      i2___lwdiv@divisor 0008  
                            i2___lwdiv 2256                              i2___lwmod 2384  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 1464  
                   ?i2_I2C_Master_Stop 0001           ??_change_state_to_menu_start 00C4  
                      getIR@timeBroken 0088                              i2_lcdInst 28A2  
                           _total_time 00F1                            printf@width 00A9  
                      _PWMTimerCounter 005B                   __size_of_stopSignals 0016  
                           ID@magnetic 0088                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 27C6                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                            _UIenabled 005D                   moveServoCup@pwmTimer 0081  
                       __end_of___wmul 246C                         __end_of_getRTC 1EF8  
                 __size_ofi2_lcdNibble 0056                          i2lcdInst@data 0003  
                       __end_of_initUI 27FE                       i2___wmul@product 0005  
                       __end_of_printf 095E                           i2printf@flag 0026  
                       __end_of_strcpy 2436              __end_ofi2_I2C_Master_Read 27A4  
            __end_ofi2_I2C_Master_Wait 2876                           i2printf@prec 001D  
                  start_initialization 22A8              __end_ofi2_I2C_Master_Stop 28E2  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 0063  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                i2I2C_Master_Read@temp 0003                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 0346  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                   __end_of_moveServoCup 2064  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                             ??___wmul 0084                               ??_getRTC 0083  
                          __pdataBANK0 00F5                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                           ??_PortTestA5 0080  
               printSortTimer@timeDiff 0047       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0030       __size_of_change_state_to_menu_22 0030  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    _printSortTimer$2028 0045  
                          __pbssCOMRAM 005B                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 01FA  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1565 0081                         initSortTimer@i 0088  
                    printSortTimer@min 0041                      printSortTimer@sec 0043  
                    __size_of_dispLogs 0014                       printRTC@INT_time 00AE  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0067                     __end_of_PortTestA5 2864  
                     _I2C_Master_Start 28D2                              _f_lastCan 00E9  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 28AE                      __size_of_initTime 0022  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                          __pmediumconst FDB8  
                            _lcdNibble 20D6                  __size_of_inputHandler 01E6  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                               ?___lwdiv 0080  
                             ?___lwmod 0087                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                     ??_moveServoBlock 0080                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 006D  
                            _cur_state 00E1                       ___lwdiv@quotient 0084  
                       __size_of_getIR 00CA                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 00A8                            __size_of_UI 0542  
           __end_ofi2_I2C_Master_Start 28EA             __end_ofi2_I2C_Master_Write 28C2  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATDbits 000F8C  
                         _inputHandler 165E                            ??i2_isdigit 0001  
                             i2u240_40 279C                               i2u321_40 12BC  
                             i2u441_40 1596                               i2u292_40 0AE4  
                             i2u292_47 0ADA                               i2u288_40 0A84  
                             i2u288_47 0A7A                               i2u474_47 169C  
                             i2u475_47 2218                               i2u476_47 2222  
                             i2u477_47 2244                               i2u478_47 224E  
                  __size_of_updateMenu 02C0                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                    ID@side_conductivity 0086  
                           _ADCON0bits 000FC2                 moveServoBlock@pwmTimer 0080  
                    ___wmul@multiplier 0080                              _startTime 0100  
                             i2___wmul 2758                          lcdNibble@data 0081  
                             i2_getRTC 2064                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                             i2_printf 095E                               i2_strcpy 246C  
                  I2C_Master_Read@temp 0082                              copy_data0 22BC  
                __size_of_moveServoCup 0074                       __size_ofi2_putch 000C  
                          _count_total 00DF                               __Hrparam 0000  
                     __size_of_Loading 0098                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                  __end_of_initSortTimer 1C04  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 255E                _change_state_to_menu_12 252E  
              _change_state_to_menu_22 24FE                _change_state_to_menu_23 24CE  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 264E  
              _change_state_to_logs_12 261E                _change_state_to_logs_22 25EE  
              _change_state_to_logs_23 26AC                _change_state_to_logs_33 25BE  
              _change_state_to_logs_34 258E                       __size_of___lwmod 0062  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 190A                        _I2C_Master_Init 21A0  
                      _I2C_Master_Read 267E                       __size_of_initLCD 0046  
                         _f_ID_receive 00F9                           _moveServoCup 1FF0  
                     __size_of_loadRTC 008C                        _I2C_Master_Wait 282A  
                      _I2C_Master_Stop 28CA                       __size_of_isdigit 002A  
                       _printSortTimer 1464                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                               __ptext10 1FF0  
                             __ptext11 22F6                               __ptext20 0CA4  
                             __ptext12 27E4                               __ptext21 2400  
                             __ptext13 1DE6                               __ptext30 1E72  
                             __ptext22 0554                               __ptext14 21A0  
                             __ptext31 28AE                               __ptext23 2876  
                             __ptext15 1A9A                               __ptext40 0F6E  
                             __ptext32 28CA                               __ptext24 2706  
                             __ptext16 26DA                               __ptext41 2730  
                             __ptext33 28D2                               __ptext25 2436  
                             __ptext17 27A4                               __ptext50 25BE  
                             __ptext42 122E                               __ptext34 267E  
                             __ptext26 213E                               __ptext18 233E  
                             __ptext51 26AC                               __ptext43 246C  
                             __ptext35 282A                               __ptext27 1F78  
                             __ptext19 0012                               __ptext60 2758  
                             __ptext52 25EE                               __ptext44 165E  
                             __ptext36 1CAC                               __ptext28 2886  
                             __ptext61 2384                               __ptext53 261E  
                             __ptext45 24CE                               __ptext37 19DC  
                             __ptext29 20D6                               __ptext70 2864  
                             __ptext62 2256                               __ptext54 264E  
                             __ptext46 24FE                               __ptext38 2852  
                             __ptext63 28A2                               __ptext55 283E  
                             __ptext47 252E                               __ptext64 2200  
                             __ptext56 1464                               __ptext48 255E  
                             __ptext65 2064                               __ptext57 095E  
                             __ptext49 258E                               __ptext66 28B8  
                             __ptext58 2896                               __ptext67 28DA  
                             __ptext59 27C6                               __ptext68 28E2  
                             __ptext69 277E                               _dispLogs 283E  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$1565 0002                               _initTime 27A4  
                        __size_of_main 0080                          __size_of_sort 0016  
       ??i2_change_state_to_menu_start 0043                               _logstate 00EF  
               __size_of_machineConfig 0048                          ??i2_lcdNibble 0001  
                             _printRTC 0CA4                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 0079  
                   _f_can_coming_to_ID 00E3                              printf@len 00A5  
                            printf@val 00A3                               loadRTC@i 0096  
               __end_of_printSortTimer 165E                              putch@data 0082  
             __end_of_I2C_Master_Start 28DA                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 28B8                             _INTCONbits 000FF2  
                         ??_updateMenu 0043                               isdigit@c 0082  
                             intlevel2 0000                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                          ?_MAGNETISM_in 0080  
                  __end_of_stopSignals 2814              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 002A              ??_change_state_to_menu_22 002A  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 009F  
                             printf@cp 00A1                     __end_of_updateMenu 122E  
              __end_of_I2C_Master_Init 2200                __end_of_I2C_Master_Read 26AC  
              __end_of_I2C_Master_Wait 283E                __end_of_I2C_Master_Stop 28D2  
                          lcdInst@data 0082                          printRTC@F3177 00F5  
                  __end_ofi2_lcdNibble 2256                        ?_printSortTimer 0001  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                      ___lwmod@divisor 0089                      _f_can_distributed 00E7  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 22F6                        ___lwmod@counter 008B  
             moveServoBlock@myPosition 0082                       _sortTimerCounter 0071  
                        printRTC@month 00BE                          ?_Distribution 0001  
                        _machine_state 00F4                         ??_MAGNETISM_in 0082  
                        dispLogs@myLog 0001                     i2printRTC@INT_time 002D  
