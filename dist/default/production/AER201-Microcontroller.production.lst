

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Mar 01 15:01:41 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    68                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   103                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   104                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   105  0000                     
   106                           ; Version 1.40
   107                           ; Generated 01/12/2016 GMT
   108                           ; 
   109                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   110                           ; All rights reserved.
   111                           ; 
   112                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   113                           ; 
   114                           ; Redistribution and use in source and binary forms, with or without modification, are
   115                           ; permitted provided that the following conditions are met:
   116                           ; 
   117                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   118                           ;        conditions and the following disclaimer.
   119                           ; 
   120                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   121                           ;        of conditions and the following disclaimer in the documentation and/or other
   122                           ;        materials provided with the distribution.
   123                           ; 
   124                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   125                           ;        software without specific prior written permission.
   126                           ; 
   127                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   128                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   129                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   130                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   131                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   132                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   133                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   134                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   135                           ; 
   136                           ; 
   137                           ; Code-generator required, PIC18F4620 Definitions
   138                           ; 
   139                           ; SFR Addresses
   140  0000                     
   141                           	psect	idataBANK1
   142  004058                     __pidataBANK1:
   143                           	opt stack 0
   144                           
   145                           ;initializer for UI@F3220
   146  004058  4D                 	db	77
   147  004059  4D                 	db	77
   148  00405A  4D                 	db	77
   149  00405B  00                 	db	0
   150                           
   151                           ;initializer for printRTC@F3211
   152  00405C  4D                 	db	77
   153  00405D  4D                 	db	77
   154  00405E  4D                 	db	77
   155  00405F  00                 	db	0
   156                           
   157                           	psect	mediumconst
   158  00FB70                     __pmediumconst:
   159                           	opt stack 0
   160  00FB70  00                 	db	0
   161  00FB71                     _keys:
   162                           	opt stack 0
   163  00FB71  31                 	db	49
   164  00FB72  32                 	db	50
   165  00FB73  33                 	db	51
   166  00FB74  41                 	db	65
   167  00FB75  34                 	db	52
   168  00FB76  35                 	db	53
   169  00FB77  36                 	db	54
   170  00FB78  42                 	db	66
   171  00FB79  37                 	db	55
   172  00FB7A  38                 	db	56
   173  00FB7B  39                 	db	57
   174  00FB7C  43                 	db	67
   175  00FB7D  2A                 	db	42
   176  00FB7E  30                 	db	48
   177  00FB7F  23                 	db	35
   178  00FB80  44                 	db	68
   179  00FB81  00                 	db	0
   180  00FB82                     __end_of_keys:
   181                           	opt stack 0
   182  00FB82                     _dpowers:
   183                           	opt stack 0
   184  00FB82  0001               	dw	1
   185  00FB84  000A               	dw	10
   186  00FB86  0064               	dw	100
   187  00FB88  03E8               	dw	1000
   188  00FB8A  2710               	dw	10000
   189  00FB8C                     __end_of_dpowers:
   190                           	opt stack 0
   191  0000                     _ADCON0	set	4034
   192  0000                     _ADCON0bits	set	4034
   193  0000                     _ADCON1	set	4033
   194  0000                     _ADCON2	set	4032
   195  0000                     _ADRESH	set	4036
   196  0000                     _ADRESL	set	4035
   197  0000                     _CMCONbits	set	4020
   198  0000                     _CVRCON	set	4021
   199  0000                     _EEADR	set	4009
   200  0000                     _EEADRH	set	4010
   201  0000                     _EECON1bits	set	4006
   202  0000                     _EECON2	set	4007
   203  0000                     _EEDATA	set	4008
   204  0000                     _INTCONbits	set	4082
   205  0000                     _LATA	set	3977
   206  0000                     _LATAbits	set	3977
   207  0000                     _LATB	set	3978
   208  0000                     _LATC	set	3979
   209  0000                     _LATCbits	set	3979
   210  0000                     _LATD	set	3980
   211  0000                     _LATDbits	set	3980
   212  0000                     _LATE	set	3981
   213  0000                     _LATEbits	set	3981
   214  0000                     _OSCCON	set	4051
   215  0000                     _OSCTUNEbits	set	3995
   216  0000                     _PIR2bits	set	4001
   217  0000                     _PORTAbits	set	3968
   218  0000                     _PORTB	set	3969
   219  0000                     _PORTBbits	set	3969
   220  0000                     _SSPADD	set	4040
   221  0000                     _SSPBUF	set	4041
   222  0000                     _SSPCON1	set	4038
   223  0000                     _SSPCON2	set	4037
   224  0000                     _SSPSTAT	set	4039
   225  0000                     _T0CON	set	4053
   226  0000                     _T1CON	set	4045
   227  0000                     _TMR0H	set	4055
   228  0000                     _TMR0L	set	4054
   229  0000                     _TMR1H	set	4047
   230  0000                     _TMR1L	set	4046
   231  0000                     _TMR3H	set	4019
   232  0000                     _TMR3L	set	4018
   233  0000                     _TRISA	set	3986
   234  0000                     _TRISB	set	3987
   235  0000                     _TRISC	set	3988
   236  0000                     _TRISD	set	3989
   237  0000                     _TRISE	set	3990
   238  0000                     _ACKDT	set	32301
   239  0000                     _ACKEN	set	32300
   240  0000                     _ADIE	set	31982
   241  0000                     _INT1IE	set	32643
   242  0000                     _INT1IF	set	32640
   243  0000                     _PEIE	set	32662
   244  0000                     _PEN	set	32298
   245  0000                     _RCEN	set	32299
   246  0000                     _RSEN	set	32297
   247  0000                     _SEN	set	32296
   248  0000                     _TMR0IE	set	32661
   249  0000                     _TMR0IF	set	32658
   250  0000                     _TMR0ON	set	32431
   251  0000                     _TMR1IE	set	31976
   252  0000                     _TMR1IF	set	31984
   253  0000                     _TMR1ON	set	32360
   254  0000                     _TMR2IE	set	31977
   255  0000                     _TMR3IE	set	32001
   256  0000                     _TMR3IF	set	32009
   257  0000                     _TMR3ON	set	32136
   258  0000                     _TRISC3	set	31907
   259  0000                     _TRISC4	set	31908
   260  0000                     _nRBPU	set	32655
   261  00FB8C                     STR_21:
   262  00FB8C  25                 	db	37
   263  00FB8D  30                 	db	48	;'0'
   264  00FB8E  32                 	db	50	;'2'
   265  00FB8F  64                 	db	100	;'d'
   266  00FB90  25                 	db	37
   267  00FB91  73                 	db	115	;'s'
   268  00FB92  20                 	db	32
   269  00FB93  7C                 	db	124
   270  00FB94  20                 	db	32
   271  00FB95  25                 	db	37
   272  00FB96  30                 	db	48	;'0'
   273  00FB97  32                 	db	50	;'2'
   274  00FB98  64                 	db	100	;'d'
   275  00FB99  3A                 	db	58	;':'
   276  00FB9A  25                 	db	37
   277  00FB9B  30                 	db	48	;'0'
   278  00FB9C  32                 	db	50	;'2'
   279  00FB9D  64                 	db	100	;'d'
   280  00FB9E  3A                 	db	58	;':'
   281  00FB9F  25                 	db	37
   282  00FBA0  30                 	db	48	;'0'
   283  00FBA1  32                 	db	50	;'2'
   284  00FBA2  64                 	db	100	;'d'
   285  00FBA3  00                 	db	0
   286  00FBA4                     STR_66:
   287  00FBA4  28                 	db	40
   288  00FBA5  64                 	db	100	;'d'
   289  00FBA6  61                 	db	97	;'a'
   290  00FBA7  74                 	db	116	;'t'
   291  00FBA8  61                 	db	97	;'a'
   292  00FBA9  3A                 	db	58	;':'
   293  00FBAA  20                 	db	32
   294  00FBAB  25                 	db	37
   295  00FBAC  75                 	db	117	;'u'
   296  00FBAD  2C                 	db	44
   297  00FBAE  20                 	db	32
   298  00FBAF  61                 	db	97	;'a'
   299  00FBB0  64                 	db	100	;'d'
   300  00FBB1  64                 	db	100	;'d'
   301  00FBB2  72                 	db	114	;'r'
   302  00FBB3  3A                 	db	58	;':'
   303  00FBB4  20                 	db	32
   304  00FBB5  25                 	db	37
   305  00FBB6  75                 	db	117	;'u'
   306  00FBB7  29                 	db	41
   307  00FBB8  00                 	db	0
   308  00FBB9                     STR_27:
   309  00FBB9  4E                 	db	78	;'N'
   310  00FBBA  4F                 	db	79	;'O'
   311  00FBBB  20                 	db	32
   312  00FBBC  4C                 	db	76	;'L'
   313  00FBBD  41                 	db	65	;'A'
   314  00FBBE  42                 	db	66	;'B'
   315  00FBBF  3A                 	db	58	;':'
   316  00FBC0  20                 	db	32
   317  00FBC1  25                 	db	37
   318  00FBC2  64                 	db	100	;'d'
   319  00FBC3  7C                 	db	124
   320  00FBC4  4C                 	db	76	;'L'
   321  00FBC5  41                 	db	65	;'A'
   322  00FBC6  42                 	db	66	;'B'
   323  00FBC7  3A                 	db	58	;':'
   324  00FBC8  20                 	db	32
   325  00FBC9  25                 	db	37
   326  00FBCA  64                 	db	100	;'d'
   327  00FBCB  00                 	db	0
   328  00FBCC                     STR_25:
   329  00FBCC  4E                 	db	78	;'N'
   330  00FBCD  4F                 	db	79	;'O'
   331  00FBCE  20                 	db	32
   332  00FBCF  54                 	db	84	;'T'
   333  00FBD0  41                 	db	65	;'A'
   334  00FBD1  42                 	db	66	;'B'
   335  00FBD2  3A                 	db	58	;':'
   336  00FBD3  20                 	db	32
   337  00FBD4  25                 	db	37
   338  00FBD5  64                 	db	100	;'d'
   339  00FBD6  7C                 	db	124
   340  00FBD7  54                 	db	84	;'T'
   341  00FBD8  41                 	db	65	;'A'
   342  00FBD9  42                 	db	66	;'B'
   343  00FBDA  3A                 	db	58	;':'
   344  00FBDB  20                 	db	32
   345  00FBDC  25                 	db	37
   346  00FBDD  64                 	db	100	;'d'
   347  00FBDE  00                 	db	0
   348  00FBDF                     STR_105:
   349  00FBDF  44                 	db	68	;'D'
   350  00FBE0  20                 	db	32
   351  00FBE1  57                 	db	87	;'W'
   352  00FBE2  49                 	db	73	;'I'
   353  00FBE3  4C                 	db	76	;'L'
   354  00FBE4  4C                 	db	76	;'L'
   355  00FBE5  20                 	db	32
   356  00FBE6  52                 	db	82	;'R'
   357  00FBE7  45                 	db	69	;'E'
   358  00FBE8  54                 	db	84	;'T'
   359  00FBE9  55                 	db	85	;'U'
   360  00FBEA  52                 	db	82	;'R'
   361  00FBEB  4E                 	db	78	;'N'
   362  00FBEC  20                 	db	32
   363  00FBED  20                 	db	32
   364  00FBEE  20                 	db	32
   365  00FBEF  20                 	db	32
   366  00FBF0  00                 	db	0
   367  00FBF1                     STR_106:
   368  00FBF1  4F                 	db	79	;'O'
   369  00FBF2  54                 	db	84	;'T'
   370  00FBF3  48                 	db	72	;'H'
   371  00FBF4  45                 	db	69	;'E'
   372  00FBF5  52                 	db	82	;'R'
   373  00FBF6  20                 	db	32
   374  00FBF7  53                 	db	83	;'S'
   375  00FBF8  45                 	db	69	;'E'
   376  00FBF9  54                 	db	84	;'T'
   377  00FBFA  53                 	db	83	;'S'
   378  00FBFB  20                 	db	32
   379  00FBFC  52                 	db	82	;'R'
   380  00FBFD  41                 	db	65	;'A'
   381  00FBFE  35                 	db	53	;'5'
   382  00FBFF  20                 	db	32
   383  00FC00  20                 	db	32
   384  00FC01  20                 	db	32
   385  00FC02  00                 	db	0
   386  00FC03                     STR_3:
   387  00FC03  2D                 	db	45
   388  00FC04  2D                 	db	45
   389  00FC05  20                 	db	32
   390  00FC06  4C                 	db	76	;'L'
   391  00FC07  4F                 	db	79	;'O'
   392  00FC08  47                 	db	71	;'G'
   393  00FC09  20                 	db	32
   394  00FC0A  25                 	db	37
   395  00FC0B  32                 	db	50	;'2'
   396  00FC0C  64                 	db	100	;'d'
   397  00FC0D  20                 	db	32
   398  00FC0E  48                 	db	72	;'H'
   399  00FC0F  45                 	db	69	;'E'
   400  00FC10  52                 	db	82	;'R'
   401  00FC11  45                 	db	69	;'E'
   402  00FC12  2D                 	db	45
   403  00FC13  2D                 	db	45
   404  00FC14  00                 	db	0
   405  00FC15                     STR_1:
   406  00FC15  52                 	db	82	;'R'
   407  00FC16  45                 	db	69	;'E'
   408  00FC17  53                 	db	83	;'S'
   409  00FC18  55                 	db	85	;'U'
   410  00FC19  4C                 	db	76	;'L'
   411  00FC1A  54                 	db	84	;'T'
   412  00FC1B  53                 	db	83	;'S'
   413  00FC1C  20                 	db	32
   414  00FC1D  49                 	db	73	;'I'
   415  00FC1E  4E                 	db	78	;'N'
   416  00FC1F  20                 	db	32
   417  00FC20  4C                 	db	76	;'L'
   418  00FC21  4F                 	db	79	;'O'
   419  00FC22  47                 	db	71	;'G'
   420  00FC23  20                 	db	32
   421  00FC24  25                 	db	37
   422  00FC25  64                 	db	100	;'d'
   423  00FC26  00                 	db	0
   424  00FC27                     STR_97:
   425  00FC27  4D                 	db	77	;'M'
   426  00FC28  49                 	db	73	;'I'
   427  00FC29  44                 	db	68	;'D'
   428  00FC2A  20                 	db	32
   429  00FC2B  2D                 	db	45
   430  00FC2C  2D                 	db	45
   431  00FC2D  20                 	db	32
   432  00FC2E  32                 	db	50	;'2'
   433  00FC2F  73                 	db	115	;'s'
   434  00FC30  20                 	db	32
   435  00FC31  20                 	db	32
   436  00FC32  20                 	db	32
   437  00FC33  20                 	db	32
   438  00FC34  20                 	db	32
   439  00FC35  20                 	db	32
   440  00FC36  20                 	db	32
   441  00FC37  00                 	db	0
   442  00FC38                     STR_100:
   443  00FC38  44                 	db	68	;'D'
   444  00FC39  52                 	db	82	;'R'
   445  00FC3A  4F                 	db	79	;'O'
   446  00FC3B  50                 	db	80	;'P'
   447  00FC3C  20                 	db	32
   448  00FC3D  2D                 	db	45
   449  00FC3E  2D                 	db	45
   450  00FC3F  20                 	db	32
   451  00FC40  32                 	db	50	;'2'
   452  00FC41  73                 	db	115	;'s'
   453  00FC42  20                 	db	32
   454  00FC43  20                 	db	32
   455  00FC44  20                 	db	32
   456  00FC45  20                 	db	32
   457  00FC46  20                 	db	32
   458  00FC47  20                 	db	32
   459  00FC48  00                 	db	0
   460  00FC49                     STR_94:
   461  00FC49  4C                 	db	76	;'L'
   462  00FC4A  45                 	db	69	;'E'
   463  00FC4B  46                 	db	70	;'F'
   464  00FC4C  54                 	db	84	;'T'
   465  00FC4D  20                 	db	32
   466  00FC4E  2D                 	db	45
   467  00FC4F  2D                 	db	45
   468  00FC50  20                 	db	32
   469  00FC51  32                 	db	50	;'2'
   470  00FC52  73                 	db	115	;'s'
   471  00FC53  20                 	db	32
   472  00FC54  20                 	db	32
   473  00FC55  20                 	db	32
   474  00FC56  20                 	db	32
   475  00FC57  20                 	db	32
   476  00FC58  20                 	db	32
   477  00FC59  00                 	db	0
   478  00FC5A                     STR_99:
   479  00FC5A  4C                 	db	76	;'L'
   480  00FC5B  45                 	db	69	;'E'
   481  00FC5C  56                 	db	86	;'V'
   482  00FC5D  45                 	db	69	;'E'
   483  00FC5E  4C                 	db	76	;'L'
   484  00FC5F  20                 	db	32
   485  00FC60  2D                 	db	45
   486  00FC61  2D                 	db	45
   487  00FC62  20                 	db	32
   488  00FC63  32                 	db	50	;'2'
   489  00FC64  73                 	db	115	;'s'
   490  00FC65  20                 	db	32
   491  00FC66  20                 	db	32
   492  00FC67  20                 	db	32
   493  00FC68  20                 	db	32
   494  00FC69  20                 	db	32
   495  00FC6A  00                 	db	0
   496  00FC6B                     STR_93:
   497  00FC6B  52                 	db	82	;'R'
   498  00FC6C  49                 	db	73	;'I'
   499  00FC6D  47                 	db	71	;'G'
   500  00FC6E  48                 	db	72	;'H'
   501  00FC6F  54                 	db	84	;'T'
   502  00FC70  20                 	db	32
   503  00FC71  2D                 	db	45
   504  00FC72  2D                 	db	45
   505  00FC73  20                 	db	32
   506  00FC74  32                 	db	50	;'2'
   507  00FC75  73                 	db	115	;'s'
   508  00FC76  20                 	db	32
   509  00FC77  20                 	db	32
   510  00FC78  20                 	db	32
   511  00FC79  20                 	db	32
   512  00FC7A  20                 	db	32
   513  00FC7B  00                 	db	0
   514  00FC7C                     STR_92:
   515  00FC7C  4D                 	db	77	;'M'
   516  00FC7D  49                 	db	73	;'I'
   517  00FC7E  44                 	db	68	;'D'
   518  00FC7F  44                 	db	68	;'D'
   519  00FC80  4C                 	db	76	;'L'
   520  00FC81  45                 	db	69	;'E'
   521  00FC82  20                 	db	32
   522  00FC83  2D                 	db	45
   523  00FC84  2D                 	db	45
   524  00FC85  20                 	db	32
   525  00FC86  32                 	db	50	;'2'
   526  00FC87  73                 	db	115	;'s'
   527  00FC88  20                 	db	32
   528  00FC89  20                 	db	32
   529  00FC8A  20                 	db	32
   530  00FC8B  20                 	db	32
   531  00FC8C  00                 	db	0
   532  00FC8D                     STR_95:
   533  00FC8D  4D                 	db	77	;'M'
   534  00FC8E  49                 	db	73	;'I'
   535  00FC8F  44                 	db	68	;'D'
   536  00FC90  2D                 	db	45
   537  00FC91  4C                 	db	76	;'L'
   538  00FC92  45                 	db	69	;'E'
   539  00FC93  46                 	db	70	;'F'
   540  00FC94  54                 	db	84	;'T'
   541  00FC95  20                 	db	32
   542  00FC96  2D                 	db	45
   543  00FC97  2D                 	db	45
   544  00FC98  20                 	db	32
   545  00FC99  32                 	db	50	;'2'
   546  00FC9A  73                 	db	115	;'s'
   547  00FC9B  20                 	db	32
   548  00FC9C  20                 	db	32
   549  00FC9D  00                 	db	0
   550  00FC9E                     STR_96:
   551  00FC9E  4D                 	db	77	;'M'
   552  00FC9F  49                 	db	73	;'I'
   553  00FCA0  44                 	db	68	;'D'
   554  00FCA1  2D                 	db	45
   555  00FCA2  52                 	db	82	;'R'
   556  00FCA3  49                 	db	73	;'I'
   557  00FCA4  47                 	db	71	;'G'
   558  00FCA5  48                 	db	72	;'H'
   559  00FCA6  54                 	db	84	;'T'
   560  00FCA7  20                 	db	32
   561  00FCA8  2D                 	db	45
   562  00FCA9  2D                 	db	45
   563  00FCAA  20                 	db	32
   564  00FCAB  32                 	db	50	;'2'
   565  00FCAC  73                 	db	115	;'s'
   566  00FCAD  20                 	db	32
   567  00FCAE  00                 	db	0
   568  00FCAF                     STR_72:
   569  00FCAF  41                 	db	65	;'A'
   570  00FCB0  4C                 	db	76	;'L'
   571  00FCB1  47                 	db	71	;'G'
   572  00FCB2  31                 	db	49	;'1'
   573  00FCB3  3A                 	db	58	;':'
   574  00FCB4  20                 	db	32
   575  00FCB5  39                 	db	57	;'9'
   576  00FCB6  20                 	db	32
   577  00FCB7  50                 	db	80	;'P'
   578  00FCB8  4F                 	db	79	;'O'
   579  00FCB9  50                 	db	80	;'P'
   580  00FCBA  4E                 	db	78	;'N'
   581  00FCBB  4F                 	db	79	;'O'
   582  00FCBC  54                 	db	84	;'T'
   583  00FCBD  41                 	db	65	;'A'
   584  00FCBE  42                 	db	66	;'B'
   585  00FCBF  00                 	db	0
   586  00FCC0                     STR_68:
   587  00FCC0  31                 	db	49	;'1'
   588  00FCC1  2E                 	db	46
   589  00FCC2  41                 	db	65	;'A'
   590  00FCC3  4C                 	db	76	;'L'
   591  00FCC4  47                 	db	71	;'G'
   592  00FCC5  7C                 	db	124
   593  00FCC6  32                 	db	50	;'2'
   594  00FCC7  2E                 	db	46
   595  00FCC8  53                 	db	83	;'S'
   596  00FCC9  4E                 	db	78	;'N'
   597  00FCCA  52                 	db	82	;'R'
   598  00FCCB  7C                 	db	124
   599  00FCCC  33                 	db	51	;'3'
   600  00FCCD  2E                 	db	46
   601  00FCCE  41                 	db	65	;'A'
   602  00FCCF  43                 	db	67	;'C'
   603  00FCD0  00                 	db	0
   604  00FCD1                     STR_87:
   605  00FCD1  54                 	db	84	;'T'
   606  00FCD2  53                 	db	83	;'S'
   607  00FCD3  54                 	db	84	;'T'
   608  00FCD4  3A                 	db	58	;':'
   609  00FCD5  20                 	db	32
   610  00FCD6  43                 	db	67	;'C'
   611  00FCD7  4F                 	db	79	;'O'
   612  00FCD8  4E                 	db	78	;'N'
   613  00FCD9  44                 	db	68	;'D'
   614  00FCDA  20                 	db	32
   615  00FCDB  53                 	db	83	;'S'
   616  00FCDC  4F                 	db	79	;'O'
   617  00FCDD  4C                 	db	76	;'L'
   618  00FCDE  4E                 	db	78	;'N'
   619  00FCDF  27                 	db	39
   620  00FCE0  44                 	db	68	;'D'
   621  00FCE1  00                 	db	0
   622  00FCE2                     STR_89:
   623  00FCE2  54                 	db	84	;'T'
   624  00FCE3  53                 	db	83	;'S'
   625  00FCE4  54                 	db	84	;'T'
   626  00FCE5  3A                 	db	58	;':'
   627  00FCE6  20                 	db	32
   628  00FCE7  50                 	db	80	;'P'
   629  00FCE8  55                 	db	85	;'U'
   630  00FCE9  53                 	db	83	;'S'
   631  00FCEA  48                 	db	72	;'H'
   632  00FCEB  20                 	db	32
   633  00FCEC  53                 	db	83	;'S'
   634  00FCED  4F                 	db	79	;'O'
   635  00FCEE  4C                 	db	76	;'L'
   636  00FCEF  4E                 	db	78	;'N'
   637  00FCF0  27                 	db	39
   638  00FCF1  44                 	db	68	;'D'
   639  00FCF2  00                 	db	0
   640  00FCF3                     STR_69:
   641  00FCF3  34                 	db	52	;'4'
   642  00FCF4  2E                 	db	46
   643  00FCF5  48                 	db	72	;'H'
   644  00FCF6  49                 	db	73	;'I'
   645  00FCF7  7C                 	db	124
   646  00FCF8  35                 	db	53	;'5'
   647  00FCF9  2E                 	db	46
   648  00FCFA  54                 	db	84	;'T'
   649  00FCFB  4F                 	db	79	;'O'
   650  00FCFC  47                 	db	71	;'G'
   651  00FCFD  7C                 	db	124
   652  00FCFE  36                 	db	54	;'6'
   653  00FCFF  2E                 	db	46
   654  00FD00  45                 	db	69	;'E'
   655  00FD01  45                 	db	69	;'E'
   656  00FD02  50                 	db	80	;'P'
   657  00FD03  00                 	db	0
   658  00FD04                     STR_41:
   659  00FD04  4C                 	db	76	;'L'
   660  00FD05  4F                 	db	79	;'O'
   661  00FD06  47                 	db	71	;'G'
   662  00FD07  20                 	db	32
   663  00FD08  31                 	db	49	;'1'
   664  00FD09  20                 	db	32
   665  00FD0A  20                 	db	32
   666  00FD0B  20                 	db	32
   667  00FD0C  20                 	db	32
   668  00FD0D  20                 	db	32
   669  00FD0E  20                 	db	32
   670  00FD0F  20                 	db	32
   671  00FD10  20                 	db	32
   672  00FD11  20                 	db	32
   673  00FD12  20                 	db	32
   674  00FD13  20                 	db	32
   675  00FD14  00                 	db	0
   676  00FD15                     STR_40:
   677  00FD15  4C                 	db	76	;'L'
   678  00FD16  4F                 	db	79	;'O'
   679  00FD17  47                 	db	71	;'G'
   680  00FD18  20                 	db	32
   681  00FD19  32                 	db	50	;'2'
   682  00FD1A  20                 	db	32
   683  00FD1B  20                 	db	32
   684  00FD1C  20                 	db	32
   685  00FD1D  20                 	db	32
   686  00FD1E  20                 	db	32
   687  00FD1F  20                 	db	32
   688  00FD20  20                 	db	32
   689  00FD21  20                 	db	32
   690  00FD22  20                 	db	32
   691  00FD23  20                 	db	32
   692  00FD24  20                 	db	32
   693  00FD25  00                 	db	0
   694  00FD26                     STR_44:
   695  00FD26  4C                 	db	76	;'L'
   696  00FD27  4F                 	db	79	;'O'
   697  00FD28  47                 	db	71	;'G'
   698  00FD29  20                 	db	32
   699  00FD2A  33                 	db	51	;'3'
   700  00FD2B  20                 	db	32
   701  00FD2C  20                 	db	32
   702  00FD2D  20                 	db	32
   703  00FD2E  20                 	db	32
   704  00FD2F  20                 	db	32
   705  00FD30  20                 	db	32
   706  00FD31  20                 	db	32
   707  00FD32  20                 	db	32
   708  00FD33  20                 	db	32
   709  00FD34  20                 	db	32
   710  00FD35  20                 	db	32
   711  00FD36  00                 	db	0
   712  00FD37                     STR_48:
   713  00FD37  4C                 	db	76	;'L'
   714  00FD38  4F                 	db	79	;'O'
   715  00FD39  47                 	db	71	;'G'
   716  00FD3A  20                 	db	32
   717  00FD3B  34                 	db	52	;'4'
   718  00FD3C  20                 	db	32
   719  00FD3D  20                 	db	32
   720  00FD3E  20                 	db	32
   721  00FD3F  20                 	db	32
   722  00FD40  20                 	db	32
   723  00FD41  20                 	db	32
   724  00FD42  20                 	db	32
   725  00FD43  20                 	db	32
   726  00FD44  20                 	db	32
   727  00FD45  20                 	db	32
   728  00FD46  20                 	db	32
   729  00FD47  00                 	db	0
   730  00FD48                     STR_36:
   731  00FD48  33                 	db	51	;'3'
   732  00FD49  2E                 	db	46
   733  00FD4A  20                 	db	32
   734  00FD4B  4C                 	db	76	;'L'
   735  00FD4C  4F                 	db	79	;'O'
   736  00FD4D  47                 	db	71	;'G'
   737  00FD4E  53                 	db	83	;'S'
   738  00FD4F  20                 	db	32
   739  00FD50  20                 	db	32
   740  00FD51  20                 	db	32
   741  00FD52  20                 	db	32
   742  00FD53  20                 	db	32
   743  00FD54  20                 	db	32
   744  00FD55  20                 	db	32
   745  00FD56  20                 	db	32
   746  00FD57  20                 	db	32
   747  00FD58  00                 	db	0
   748  00FD59                     STR_32:
   749  00FD59  32                 	db	50	;'2'
   750  00FD5A  2E                 	db	46
   751  00FD5B  20                 	db	32
   752  00FD5C  53                 	db	83	;'S'
   753  00FD5D  4F                 	db	79	;'O'
   754  00FD5E  52                 	db	82	;'R'
   755  00FD5F  54                 	db	84	;'T'
   756  00FD60  20                 	db	32
   757  00FD61  20                 	db	32
   758  00FD62  20                 	db	32
   759  00FD63  20                 	db	32
   760  00FD64  20                 	db	32
   761  00FD65  20                 	db	32
   762  00FD66  20                 	db	32
   763  00FD67  20                 	db	32
   764  00FD68  20                 	db	32
   765  00FD69  00                 	db	0
   766  00FD6A                     STR_33:
   767  00FD6A  31                 	db	49	;'1'
   768  00FD6B  2E                 	db	46
   769  00FD6C  20                 	db	32
   770  00FD6D  44                 	db	68	;'D'
   771  00FD6E  41                 	db	65	;'A'
   772  00FD6F  54                 	db	84	;'T'
   773  00FD70  45                 	db	69	;'E'
   774  00FD71  2F                 	db	47
   775  00FD72  54                 	db	84	;'T'
   776  00FD73  49                 	db	73	;'I'
   777  00FD74  4D                 	db	77	;'M'
   778  00FD75  45                 	db	69	;'E'
   779  00FD76  20                 	db	32
   780  00FD77  20                 	db	32
   781  00FD78  20                 	db	32
   782  00FD79  20                 	db	32
   783  00FD7A  00                 	db	0
   784  00FD7B                     STR_24:
   785  00FD7B  20                 	db	32
   786  00FD7C  2D                 	db	45
   787  00FD7D  2D                 	db	45
   788  00FD7E  20                 	db	32
   789  00FD7F  50                 	db	80	;'P'
   790  00FD80  4F                 	db	79	;'O'
   791  00FD81  50                 	db	80	;'P'
   792  00FD82  20                 	db	32
   793  00FD83  20                 	db	32
   794  00FD84  43                 	db	67	;'C'
   795  00FD85  41                 	db	65	;'A'
   796  00FD86  4E                 	db	78	;'N'
   797  00FD87  20                 	db	32
   798  00FD88  2D                 	db	45
   799  00FD89  2D                 	db	45
   800  00FD8A  20                 	db	32
   801  00FD8B  00                 	db	0
   802  00FD8C                     STR_26:
   803  00FD8C  20                 	db	32
   804  00FD8D  2D                 	db	45
   805  00FD8E  2D                 	db	45
   806  00FD8F  20                 	db	32
   807  00FD90  53                 	db	83	;'S'
   808  00FD91  4F                 	db	79	;'O'
   809  00FD92  55                 	db	85	;'U'
   810  00FD93  50                 	db	80	;'P'
   811  00FD94  20                 	db	32
   812  00FD95  43                 	db	67	;'C'
   813  00FD96  41                 	db	65	;'A'
   814  00FD97  4E                 	db	78	;'N'
   815  00FD98  20                 	db	32
   816  00FD99  2D                 	db	45
   817  00FD9A  2D                 	db	45
   818  00FD9B  20                 	db	32
   819  00FD9C  00                 	db	0
   820  00FD9D                     STR_28:
   821  00FD9D  2D                 	db	45
   822  00FD9E  2D                 	db	45
   823  00FD9F  20                 	db	32
   824  00FDA0  54                 	db	84	;'T'
   825  00FDA1  4F                 	db	79	;'O'
   826  00FDA2  54                 	db	84	;'T'
   827  00FDA3  41                 	db	65	;'A'
   828  00FDA4  4C                 	db	76	;'L'
   829  00FDA5  20                 	db	32
   830  00FDA6  43                 	db	67	;'C'
   831  00FDA7  41                 	db	65	;'A'
   832  00FDA8  4E                 	db	78	;'N'
   833  00FDA9  53                 	db	83	;'S'
   834  00FDAA  20                 	db	32
   835  00FDAB  2D                 	db	45
   836  00FDAC  2D                 	db	45
   837  00FDAD  00                 	db	0
   838  00FDAE                     STR_39:
   839  00FDAE  4C                 	db	76	;'L'
   840  00FDAF  4F                 	db	79	;'O'
   841  00FDB0  47                 	db	71	;'G'
   842  00FDB1  20                 	db	32
   843  00FDB2  31                 	db	49	;'1'
   844  00FDB3  20                 	db	32
   845  00FDB4  20                 	db	32
   846  00FDB5  20                 	db	32
   847  00FDB6  20                 	db	32
   848  00FDB7  20                 	db	32
   849  00FDB8  20                 	db	32
   850  00FDB9  20                 	db	32
   851  00FDBA  20                 	db	32
   852  00FDBB  20                 	db	32
   853  00FDBC  20                 	db	32
   854  00FDBD  3C                 	db	60	;'<'
   855  00FDBE  00                 	db	0
   856  00FDBF                     STR_42:
   857  00FDBF  4C                 	db	76	;'L'
   858  00FDC0  4F                 	db	79	;'O'
   859  00FDC1  47                 	db	71	;'G'
   860  00FDC2  20                 	db	32
   861  00FDC3  32                 	db	50	;'2'
   862  00FDC4  20                 	db	32
   863  00FDC5  20                 	db	32
   864  00FDC6  20                 	db	32
   865  00FDC7  20                 	db	32
   866  00FDC8  20                 	db	32
   867  00FDC9  20                 	db	32
   868  00FDCA  20                 	db	32
   869  00FDCB  20                 	db	32
   870  00FDCC  20                 	db	32
   871  00FDCD  20                 	db	32
   872  00FDCE  3C                 	db	60	;'<'
   873  00FDCF  00                 	db	0
   874  00FDD0                     STR_46:
   875  00FDD0  4C                 	db	76	;'L'
   876  00FDD1  4F                 	db	79	;'O'
   877  00FDD2  47                 	db	71	;'G'
   878  00FDD3  20                 	db	32
   879  00FDD4  33                 	db	51	;'3'
   880  00FDD5  20                 	db	32
   881  00FDD6  20                 	db	32
   882  00FDD7  20                 	db	32
   883  00FDD8  20                 	db	32
   884  00FDD9  20                 	db	32
   885  00FDDA  20                 	db	32
   886  00FDDB  20                 	db	32
   887  00FDDC  20                 	db	32
   888  00FDDD  20                 	db	32
   889  00FDDE  20                 	db	32
   890  00FDDF  3C                 	db	60	;'<'
   891  00FDE0  00                 	db	0
   892  00FDE1                     STR_50:
   893  00FDE1  4C                 	db	76	;'L'
   894  00FDE2  4F                 	db	79	;'O'
   895  00FDE3  47                 	db	71	;'G'
   896  00FDE4  20                 	db	32
   897  00FDE5  34                 	db	52	;'4'
   898  00FDE6  20                 	db	32
   899  00FDE7  20                 	db	32
   900  00FDE8  20                 	db	32
   901  00FDE9  20                 	db	32
   902  00FDEA  20                 	db	32
   903  00FDEB  20                 	db	32
   904  00FDEC  20                 	db	32
   905  00FDED  20                 	db	32
   906  00FDEE  20                 	db	32
   907  00FDEF  20                 	db	32
   908  00FDF0  3C                 	db	60	;'<'
   909  00FDF1  00                 	db	0
   910  00FDF2                     STR_38:
   911  00FDF2  33                 	db	51	;'3'
   912  00FDF3  2E                 	db	46
   913  00FDF4  20                 	db	32
   914  00FDF5  4C                 	db	76	;'L'
   915  00FDF6  4F                 	db	79	;'O'
   916  00FDF7  47                 	db	71	;'G'
   917  00FDF8  53                 	db	83	;'S'
   918  00FDF9  20                 	db	32
   919  00FDFA  20                 	db	32
   920  00FDFB  20                 	db	32
   921  00FDFC  20                 	db	32
   922  00FDFD  20                 	db	32
   923  00FDFE  20                 	db	32
   924  00FDFF  20                 	db	32
   925  00FE00  20                 	db	32
   926  00FE01  3C                 	db	60	;'<'
   927  00FE02  00                 	db	0
   928  00FE03                     STR_34:
   929  00FE03  32                 	db	50	;'2'
   930  00FE04  2E                 	db	46
   931  00FE05  20                 	db	32
   932  00FE06  53                 	db	83	;'S'
   933  00FE07  4F                 	db	79	;'O'
   934  00FE08  52                 	db	82	;'R'
   935  00FE09  54                 	db	84	;'T'
   936  00FE0A  20                 	db	32
   937  00FE0B  20                 	db	32
   938  00FE0C  20                 	db	32
   939  00FE0D  20                 	db	32
   940  00FE0E  20                 	db	32
   941  00FE0F  20                 	db	32
   942  00FE10  20                 	db	32
   943  00FE11  20                 	db	32
   944  00FE12  3C                 	db	60	;'<'
   945  00FE13  00                 	db	0
   946  00FE14                     STR_31:
   947  00FE14  31                 	db	49	;'1'
   948  00FE15  2E                 	db	46
   949  00FE16  20                 	db	32
   950  00FE17  44                 	db	68	;'D'
   951  00FE18  41                 	db	65	;'A'
   952  00FE19  54                 	db	84	;'T'
   953  00FE1A  45                 	db	69	;'E'
   954  00FE1B  2F                 	db	47
   955  00FE1C  54                 	db	84	;'T'
   956  00FE1D  49                 	db	73	;'I'
   957  00FE1E  4D                 	db	77	;'M'
   958  00FE1F  45                 	db	69	;'E'
   959  00FE20  20                 	db	32
   960  00FE21  20                 	db	32
   961  00FE22  20                 	db	32
   962  00FE23  3C                 	db	60	;'<'
   963  00FE24  00                 	db	0
   964  00FE25                     STR_6:
   965  00FE25  50                 	db	80	;'P'
   966  00FE26  41                 	db	65	;'A'
   967  00FE27  55                 	db	85	;'U'
   968  00FE28  53                 	db	83	;'S'
   969  00FE29  45                 	db	69	;'E'
   970  00FE2A  20                 	db	32
   971  00FE2B  3C                 	db	60	;'<'
   972  00FE2C  20                 	db	32
   973  00FE2D  7C                 	db	124
   974  00FE2E  20                 	db	32
   975  00FE2F  42                 	db	66	;'B'
   976  00FE30  41                 	db	65	;'A'
   977  00FE31  43                 	db	67	;'C'
   978  00FE32  4B                 	db	75	;'K'
   979  00FE33  20                 	db	32
   980  00FE34  3E                 	db	62	;'>'
   981  00FE35  00                 	db	0
   982  00FE36                     STR_30:
   983  00FE36  50                 	db	80	;'P'
   984  00FE37  55                 	db	85	;'U'
   985  00FE38  53                 	db	83	;'S'
   986  00FE39  48                 	db	72	;'H'
   987  00FE3A  20                 	db	32
   988  00FE3B  54                 	db	84	;'T'
   989  00FE3C  4F                 	db	79	;'O'
   990  00FE3D  20                 	db	32
   991  00FE3E  43                 	db	67	;'C'
   992  00FE3F  4F                 	db	79	;'O'
   993  00FE40  4E                 	db	78	;'N'
   994  00FE41  54                 	db	84	;'T'
   995  00FE42  49                 	db	73	;'I'
   996  00FE43  4E                 	db	78	;'N'
   997  00FE44  55                 	db	85	;'U'
   998  00FE45  45                 	db	69	;'E'
   999  00FE46  00                 	db	0
  1000  00FE47                     STR_82:
  1001  00FE47  4D                 	db	77	;'M'
  1002  00FE48  41                 	db	65	;'A'
  1003  00FE49  47                 	db	71	;'G'
  1004  00FE4A  5F                 	db	95	;'_'
  1005  00FE4B  73                 	db	115	;'s'
  1006  00FE4C  69                 	db	105	;'i'
  1007  00FE4D  67                 	db	103	;'g'
  1008  00FE4E  6E                 	db	110	;'n'
  1009  00FE4F  61                 	db	97	;'a'
  1010  00FE50  6C                 	db	108	;'l'
  1011  00FE51  3A                 	db	58	;':'
  1012  00FE52  20                 	db	32
  1013  00FE53  25                 	db	37
  1014  00FE54  64                 	db	100	;'d'
  1015  00FE55  20                 	db	32
  1016  00FE56  00                 	db	0
  1017  00FE57                     STR_98:
  1018  00FE57  54                 	db	84	;'T'
  1019  00FE58  53                 	db	83	;'S'
  1020  00FE59  54                 	db	84	;'T'
  1021  00FE5A  3A                 	db	58	;':'
  1022  00FE5B  20                 	db	32
  1023  00FE5C  54                 	db	84	;'T'
  1024  00FE5D  49                 	db	73	;'I'
  1025  00FE5E  4C                 	db	76	;'L'
  1026  00FE5F  54                 	db	84	;'T'
  1027  00FE60  20                 	db	32
  1028  00FE61  53                 	db	83	;'S'
  1029  00FE62  45                 	db	69	;'E'
  1030  00FE63  52                 	db	82	;'R'
  1031  00FE64  56                 	db	86	;'V'
  1032  00FE65  4F                 	db	79	;'O'
  1033  00FE66  00                 	db	0
  1034  00FE67                     STR_4:
  1035  00FE67  44                 	db	68	;'D'
  1036  00FE68  49                 	db	73	;'I'
  1037  00FE69  44                 	db	68	;'D'
  1038  00FE6A  4E                 	db	78	;'N'
  1039  00FE6B  27                 	db	39
  1040  00FE6C  54                 	db	84	;'T'
  1041  00FE6D  20                 	db	32
  1042  00FE6E  43                 	db	67	;'C'
  1043  00FE6F  4F                 	db	79	;'O'
  1044  00FE70  4D                 	db	77	;'M'
  1045  00FE71  50                 	db	80	;'P'
  1046  00FE72  4C                 	db	76	;'L'
  1047  00FE73  45                 	db	69	;'E'
  1048  00FE74  54                 	db	84	;'T'
  1049  00FE75  45                 	db	69	;'E'
  1050  00FE76  00                 	db	0
  1051  00FE77                     STR_80:
  1052  00FE77  49                 	db	73	;'I'
  1053  00FE78  52                 	db	82	;'R'
  1054  00FE79  5F                 	db	95	;'_'
  1055  00FE7A  73                 	db	115	;'s'
  1056  00FE7B  69                 	db	105	;'i'
  1057  00FE7C  67                 	db	103	;'g'
  1058  00FE7D  6E                 	db	110	;'n'
  1059  00FE7E  61                 	db	97	;'a'
  1060  00FE7F  6C                 	db	108	;'l'
  1061  00FE80  3A                 	db	58	;':'
  1062  00FE81  20                 	db	32
  1063  00FE82  25                 	db	37
  1064  00FE83  64                 	db	100	;'d'
  1065  00FE84  20                 	db	32
  1066  00FE85  00                 	db	0
  1067  00FE86                     STR_104:
  1068  00FE86  43                 	db	67	;'C'
  1069  00FE87  41                 	db	65	;'A'
  1070  00FE88  4D                 	db	77	;'M'
  1071  00FE89  20                 	db	32
  1072  00FE8A  44                 	db	68	;'D'
  1073  00FE8B  57                 	db	87	;'W'
  1074  00FE8C  4E                 	db	78	;'N'
  1075  00FE8D  20                 	db	32
  1076  00FE8E  7C                 	db	124
  1077  00FE8F  52                 	db	82	;'R'
  1078  00FE90  43                 	db	67	;'C'
  1079  00FE91  30                 	db	48	;'0'
  1080  00FE92  3D                 	db	61	;'='
  1081  00FE93  30                 	db	48	;'0'
  1082  00FE94  00                 	db	0
  1083  00FE95                     STR_103:
  1084  00FE95  43                 	db	67	;'C'
  1085  00FE96  41                 	db	65	;'A'
  1086  00FE97  4D                 	db	77	;'M'
  1087  00FE98  20                 	db	32
  1088  00FE99  55                 	db	85	;'U'
  1089  00FE9A  50                 	db	80	;'P'
  1090  00FE9B  20                 	db	32
  1091  00FE9C  20                 	db	32
  1092  00FE9D  7C                 	db	124
  1093  00FE9E  52                 	db	82	;'R'
  1094  00FE9F  43                 	db	67	;'C'
  1095  00FEA0  30                 	db	48	;'0'
  1096  00FEA1  3D                 	db	61	;'='
  1097  00FEA2  31                 	db	49	;'1'
  1098  00FEA3  00                 	db	0
  1099  00FEA4                     STR_81:
  1100  00FEA4  54                 	db	84	;'T'
  1101  00FEA5  53                 	db	83	;'S'
  1102  00FEA6  54                 	db	84	;'T'
  1103  00FEA7  3A                 	db	58	;':'
  1104  00FEA8  20                 	db	32
  1105  00FEA9  4D                 	db	77	;'M'
  1106  00FEAA  41                 	db	65	;'A'
  1107  00FEAB  47                 	db	71	;'G'
  1108  00FEAC  4E                 	db	78	;'N'
  1109  00FEAD  45                 	db	69	;'E'
  1110  00FEAE  54                 	db	84	;'T'
  1111  00FEAF  49                 	db	73	;'I'
  1112  00FEB0  53                 	db	83	;'S'
  1113  00FEB1  4D                 	db	77	;'M'
  1114  00FEB2  00                 	db	0
  1115  00FEB3                     STR_102:
  1116  00FEB3  54                 	db	84	;'T'
  1117  00FEB4  53                 	db	83	;'S'
  1118  00FEB5  54                 	db	84	;'T'
  1119  00FEB6  3A                 	db	58	;':'
  1120  00FEB7  20                 	db	32
  1121  00FEB8  43                 	db	67	;'C'
  1122  00FEB9  41                 	db	65	;'A'
  1123  00FEBA  4D                 	db	77	;'M'
  1124  00FEBB  20                 	db	32
  1125  00FEBC  53                 	db	83	;'S'
  1126  00FEBD  45                 	db	69	;'E'
  1127  00FEBE  52                 	db	82	;'R'
  1128  00FEBF  56                 	db	86	;'V'
  1129  00FEC0  4F                 	db	79	;'O'
  1130  00FEC1  00                 	db	0
  1131  00FEC2                     STR_91:
  1132  00FEC2  54                 	db	84	;'T'
  1133  00FEC3  53                 	db	83	;'S'
  1134  00FEC4  54                 	db	84	;'T'
  1135  00FEC5  3A                 	db	58	;':'
  1136  00FEC6  20                 	db	32
  1137  00FEC7  50                 	db	80	;'P'
  1138  00FEC8  41                 	db	65	;'A'
  1139  00FEC9  4E                 	db	78	;'N'
  1140  00FECA  20                 	db	32
  1141  00FECB  53                 	db	83	;'S'
  1142  00FECC  45                 	db	69	;'E'
  1143  00FECD  52                 	db	82	;'R'
  1144  00FECE  56                 	db	86	;'V'
  1145  00FECF  4F                 	db	79	;'O'
  1146  00FED0  00                 	db	0
  1147  00FED1                     STR_75:
  1148  00FED1  41                 	db	65	;'A'
  1149  00FED2  4C                 	db	76	;'L'
  1150  00FED3  47                 	db	71	;'G'
  1151  00FED4  34                 	db	52	;'4'
  1152  00FED5  3A                 	db	58	;':'
  1153  00FED6  20                 	db	32
  1154  00FED7  41                 	db	65	;'A'
  1155  00FED8  4C                 	db	76	;'L'
  1156  00FED9  4C                 	db	76	;'L'
  1157  00FEDA  20                 	db	32
  1158  00FEDB  43                 	db	67	;'C'
  1159  00FEDC  41                 	db	65	;'A'
  1160  00FEDD  4E                 	db	78	;'N'
  1161  00FEDE  53                 	db	83	;'S'
  1162  00FEDF  00                 	db	0
  1163  00FEE0                     STR_85:
  1164  00FEE0  54                 	db	84	;'T'
  1165  00FEE1  53                 	db	83	;'S'
  1166  00FEE2  54                 	db	84	;'T'
  1167  00FEE3  3A                 	db	58	;':'
  1168  00FEE4  20                 	db	32
  1169  00FEE5  44                 	db	68	;'D'
  1170  00FEE6  43                 	db	67	;'C'
  1171  00FEE7  20                 	db	32
  1172  00FEE8  4D                 	db	77	;'M'
  1173  00FEE9  4F                 	db	79	;'O'
  1174  00FEEA  54                 	db	84	;'T'
  1175  00FEEB  4F                 	db	79	;'O'
  1176  00FEEC  52                 	db	82	;'R'
  1177  00FEED  53                 	db	83	;'S'
  1178  00FEEE  00                 	db	0
  1179  00FEEF                     STR_70:
  1180  00FEEF  41                 	db	65	;'A'
  1181  00FEF0  4C                 	db	76	;'L'
  1182  00FEF1  47                 	db	71	;'G'
  1183  00FEF2  4F                 	db	79	;'O'
  1184  00FEF3  52                 	db	82	;'R'
  1185  00FEF4  49                 	db	73	;'I'
  1186  00FEF5  54                 	db	84	;'T'
  1187  00FEF6  48                 	db	72	;'H'
  1188  00FEF7  4D                 	db	77	;'M'
  1189  00FEF8  20                 	db	32
  1190  00FEF9  54                 	db	84	;'T'
  1191  00FEFA  45                 	db	69	;'E'
  1192  00FEFB  53                 	db	83	;'S'
  1193  00FEFC  54                 	db	84	;'T'
  1194  00FEFD  00                 	db	0
  1195  00FEFE                     STR_86:
  1196  00FEFE  50                 	db	80	;'P'
  1197  00FEFF  49                 	db	73	;'I'
  1198  00FF00  4E                 	db	78	;'N'
  1199  00FF01  20                 	db	32
  1200  00FF02  52                 	db	82	;'R'
  1201  00FF03  41                 	db	65	;'A'
  1202  00FF04  35                 	db	53	;'5'
  1203  00FF05  20                 	db	32
  1204  00FF06  48                 	db	72	;'H'
  1205  00FF07  49                 	db	73	;'I'
  1206  00FF08  47                 	db	71	;'G'
  1207  00FF09  48                 	db	72	;'H'
  1208  00FF0A  2E                 	db	46
  1209  00FF0B  00                 	db	0
  1210  00FF0C                     STR_73:
  1211  00FF0C  41                 	db	65	;'A'
  1212  00FF0D  4C                 	db	76	;'L'
  1213  00FF0E  47                 	db	71	;'G'
  1214  00FF0F  32                 	db	50	;'2'
  1215  00FF10  3A                 	db	58	;':'
  1216  00FF11  20                 	db	32
  1217  00FF12  31                 	db	49	;'1'
  1218  00FF13  32                 	db	50	;'2'
  1219  00FF14  20                 	db	32
  1220  00FF15  43                 	db	67	;'C'
  1221  00FF16  41                 	db	65	;'A'
  1222  00FF17  4E                 	db	78	;'N'
  1223  00FF18  53                 	db	83	;'S'
  1224  00FF19  00                 	db	0
  1225  00FF1A                     STR_76:
  1226  00FF1A  41                 	db	65	;'A'
  1227  00FF1B  4C                 	db	76	;'L'
  1228  00FF1C  47                 	db	71	;'G'
  1229  00FF1D  35                 	db	53	;'5'
  1230  00FF1E  3A                 	db	58	;':'
  1231  00FF1F  20                 	db	32
  1232  00FF20  4E                 	db	78	;'N'
  1233  00FF21  4F                 	db	79	;'O'
  1234  00FF22  20                 	db	32
  1235  00FF23  43                 	db	67	;'C'
  1236  00FF24  41                 	db	65	;'A'
  1237  00FF25  4E                 	db	78	;'N'
  1238  00FF26  53                 	db	83	;'S'
  1239  00FF27  00                 	db	0
  1240  00FF28                     STR_71:
  1241  00FF28  50                 	db	80	;'P'
  1242  00FF29  55                 	db	85	;'U'
  1243  00FF2A  53                 	db	83	;'S'
  1244  00FF2B  48                 	db	72	;'H'
  1245  00FF2C  20                 	db	32
  1246  00FF2D  54                 	db	84	;'T'
  1247  00FF2E  4F                 	db	79	;'O'
  1248  00FF2F  20                 	db	32
  1249  00FF30  53                 	db	83	;'S'
  1250  00FF31  54                 	db	84	;'T'
  1251  00FF32  41                 	db	65	;'A'
  1252  00FF33  52                 	db	82	;'R'
  1253  00FF34  54                 	db	84	;'T'
  1254  00FF35  00                 	db	0
  1255  00FF36                     STR_23:
  1256  00FF36  25                 	db	37
  1257  00FF37  64                 	db	100	;'d'
  1258  00FF38  20                 	db	32
  1259  00FF39  4D                 	db	77	;'M'
  1260  00FF3A  49                 	db	73	;'I'
  1261  00FF3B  4E                 	db	78	;'N'
  1262  00FF3C  20                 	db	32
  1263  00FF3D  25                 	db	37
  1264  00FF3E  64                 	db	100	;'d'
  1265  00FF3F  20                 	db	32
  1266  00FF40  53                 	db	83	;'S'
  1267  00FF41  45                 	db	69	;'E'
  1268  00FF42  43                 	db	67	;'C'
  1269  00FF43  00                 	db	0
  1270  00FF44                     STR_2:
  1271  00FF44  54                 	db	84	;'T'
  1272  00FF45  49                 	db	73	;'I'
  1273  00FF46  4D                 	db	77	;'M'
  1274  00FF47  45                 	db	69	;'E'
  1275  00FF48  3A                 	db	58	;':'
  1276  00FF49  20                 	db	32
  1277  00FF4A  25                 	db	37
  1278  00FF4B  64                 	db	100	;'d'
  1279  00FF4C  3A                 	db	58	;':'
  1280  00FF4D  25                 	db	37
  1281  00FF4E  30                 	db	48	;'0'
  1282  00FF4F  32                 	db	50	;'2'
  1283  00FF50  64                 	db	100	;'d'
  1284  00FF51  00                 	db	0
  1285  00FF52                     STR_79:
  1286  00FF52  54                 	db	84	;'T'
  1287  00FF53  53                 	db	83	;'S'
  1288  00FF54  54                 	db	84	;'T'
  1289  00FF55  3A                 	db	58	;':'
  1290  00FF56  20                 	db	32
  1291  00FF57  49                 	db	73	;'I'
  1292  00FF58  52                 	db	82	;'R'
  1293  00FF59  20                 	db	32
  1294  00FF5A  53                 	db	83	;'S'
  1295  00FF5B  4E                 	db	78	;'N'
  1296  00FF5C  53                 	db	83	;'S'
  1297  00FF5D  52                 	db	82	;'R'
  1298  00FF5E  00                 	db	0
  1299  00FF5F                     STR_65:
  1300  00FF5F  54                 	db	84	;'T'
  1301  00FF60  49                 	db	73	;'I'
  1302  00FF61  4D                 	db	77	;'M'
  1303  00FF62  45                 	db	69	;'E'
  1304  00FF63  20                 	db	32
  1305  00FF64  25                 	db	37
  1306  00FF65  64                 	db	100	;'d'
  1307  00FF66  3A                 	db	58	;':'
  1308  00FF67  25                 	db	37
  1309  00FF68  30                 	db	48	;'0'
  1310  00FF69  32                 	db	50	;'2'
  1311  00FF6A  64                 	db	100	;'d'
  1312  00FF6B  00                 	db	0
  1313  00FF6C                     STR_74:
  1314  00FF6C  41                 	db	65	;'A'
  1315  00FF6D  4C                 	db	76	;'L'
  1316  00FF6E  47                 	db	71	;'G'
  1317  00FF6F  33                 	db	51	;'3'
  1318  00FF70  3A                 	db	58	;':'
  1319  00FF71  20                 	db	32
  1320  00FF72  31                 	db	49	;'1'
  1321  00FF73  20                 	db	32
  1322  00FF74  43                 	db	67	;'C'
  1323  00FF75  41                 	db	65	;'A'
  1324  00FF76  4E                 	db	78	;'N'
  1325  00FF77  00                 	db	0
  1326  00FF78                     STR_88:
  1327  00FF78  50                 	db	80	;'P'
  1328  00FF79  49                 	db	73	;'I'
  1329  00FF7A  4E                 	db	78	;'N'
  1330  00FF7B  20                 	db	32
  1331  00FF7C  52                 	db	82	;'R'
  1332  00FF7D  41                 	db	65	;'A'
  1333  00FF7E  33                 	db	51	;'3'
  1334  00FF7F  2E                 	db	46
  1335  00FF80  2E                 	db	46
  1336  00FF81  2E                 	db	46
  1337  00FF82  00                 	db	0
  1338  00FF83                     STR_90:
  1339  00FF83  50                 	db	80	;'P'
  1340  00FF84  49                 	db	73	;'I'
  1341  00FF85  4E                 	db	78	;'N'
  1342  00FF86  20                 	db	32
  1343  00FF87  52                 	db	82	;'R'
  1344  00FF88  41                 	db	65	;'A'
  1345  00FF89  34                 	db	52	;'4'
  1346  00FF8A  2E                 	db	46
  1347  00FF8B  2E                 	db	46
  1348  00FF8C  2E                 	db	46
  1349  00FF8D  00                 	db	0
  1350  00FF8E                     STR_64:
  1351  00FF8E  53                 	db	83	;'S'
  1352  00FF8F  4F                 	db	79	;'O'
  1353  00FF90  52                 	db	82	;'R'
  1354  00FF91  54                 	db	84	;'T'
  1355  00FF92  49                 	db	73	;'I'
  1356  00FF93  4E                 	db	78	;'N'
  1357  00FF94  47                 	db	71	;'G'
  1358  00FF95  2E                 	db	46
  1359  00FF96  2E                 	db	46
  1360  00FF97  2E                 	db	46
  1361  00FF98  00                 	db	0
  1362  00FF99                     STR_83:
  1363  00FF99  41                 	db	65	;'A'
  1364  00FF9A  43                 	db	67	;'C'
  1365  00FF9B  54                 	db	84	;'T'
  1366  00FF9C  55                 	db	85	;'U'
  1367  00FF9D  41                 	db	65	;'A'
  1368  00FF9E  54                 	db	84	;'T'
  1369  00FF9F  4F                 	db	79	;'O'
  1370  00FFA0  52                 	db	82	;'R'
  1371  00FFA1  53                 	db	83	;'S'
  1372  00FFA2  00                 	db	0
  1373  00FFA3                     STR_22:
  1374  00FFA3  44                 	db	68	;'D'
  1375  00FFA4  55                 	db	85	;'U'
  1376  00FFA5  52                 	db	82	;'R'
  1377  00FFA6  41                 	db	65	;'A'
  1378  00FFA7  54                 	db	84	;'T'
  1379  00FFA8  49                 	db	73	;'I'
  1380  00FFA9  4F                 	db	79	;'O'
  1381  00FFAA  4E                 	db	78	;'N'
  1382  00FFAB  3A                 	db	58	;':'
  1383  00FFAC  00                 	db	0
  1384  00FFAD                     STR_77:
  1385  00FFAD  53                 	db	83	;'S'
  1386  00FFAE  45                 	db	69	;'E'
  1387  00FFAF  4E                 	db	78	;'N'
  1388  00FFB0  53                 	db	83	;'S'
  1389  00FFB1  4F                 	db	79	;'O'
  1390  00FFB2  52                 	db	82	;'R'
  1391  00FFB3  53                 	db	83	;'S'
  1392  00FFB4  00                 	db	0
  1393  00FFB5                     STR_107:
  1394  00FFB5  28                 	db	40
  1395  00FFB6  6E                 	db	110	;'n'
  1396  00FFB7  75                 	db	117	;'u'
  1397  00FFB8  6C                 	db	108	;'l'
  1398  00FFB9  6C                 	db	108	;'l'
  1399  00FFBA  29                 	db	41
  1400  00FFBB  00                 	db	0
  1401  00FFBC                     STR_67:
  1402  00FFBC  46                 	db	70	;'F'
  1403  00FFBD  41                 	db	65	;'A'
  1404  00FFBE  49                 	db	73	;'I'
  1405  00FFBF  4C                 	db	76	;'L'
  1406  00FFC0  45                 	db	69	;'E'
  1407  00FFC1  44                 	db	68	;'D'
  1408  00FFC2  00                 	db	0
  1409  00FFC3                     STR_7:
  1410  00FFC3  53                 	db	83	;'S'
  1411  00FFC4  54                 	db	84	;'T'
  1412  00FFC5  41                 	db	65	;'A'
  1413  00FFC6  52                 	db	82	;'R'
  1414  00FFC7  54                 	db	84	;'T'
  1415  00FFC8  3A                 	db	58	;':'
  1416  00FFC9  00                 	db	0
  1417  00FFCA                     STR_9:
  1418  00FFCA  46                 	db	70	;'F'
  1419  00FFCB  45                 	db	69	;'E'
  1420  00FFCC  42                 	db	66	;'B'
  1421  00FFCD  00                 	db	0
  1422  00FFCE                     STR_19:
  1423  00FFCE  44                 	db	68	;'D'
  1424  00FFCF  45                 	db	69	;'E'
  1425  00FFD0  43                 	db	67	;'C'
  1426  00FFD1  00                 	db	0
  1427  00FFD2                     STR_15:
  1428  00FFD2  41                 	db	65	;'A'
  1429  00FFD3  55                 	db	85	;'U'
  1430  00FFD4  47                 	db	71	;'G'
  1431  00FFD5  00                 	db	0
  1432  00FFD6                     STR_14:
  1433  00FFD6  4A                 	db	74	;'J'
  1434  00FFD7  55                 	db	85	;'U'
  1435  00FFD8  4C                 	db	76	;'L'
  1436  00FFD9  00                 	db	0
  1437  00FFDA                     STR_8:
  1438  00FFDA  4A                 	db	74	;'J'
  1439  00FFDB  41                 	db	65	;'A'
  1440  00FFDC  4E                 	db	78	;'N'
  1441  00FFDD  00                 	db	0
  1442  00FFDE                     STR_13:
  1443  00FFDE  4A                 	db	74	;'J'
  1444  00FFDF  55                 	db	85	;'U'
  1445  00FFE0  4E                 	db	78	;'N'
  1446  00FFE1  00                 	db	0
  1447  00FFE2                     STR_16:
  1448  00FFE2  53                 	db	83	;'S'
  1449  00FFE3  45                 	db	69	;'E'
  1450  00FFE4  50                 	db	80	;'P'
  1451  00FFE5  00                 	db	0
  1452  00FFE6                     STR_10:
  1453  00FFE6  4D                 	db	77	;'M'
  1454  00FFE7  41                 	db	65	;'A'
  1455  00FFE8  52                 	db	82	;'R'
  1456  00FFE9  00                 	db	0
  1457  00FFEA                     STR_11:
  1458  00FFEA  41                 	db	65	;'A'
  1459  00FFEB  50                 	db	80	;'P'
  1460  00FFEC  52                 	db	82	;'R'
  1461  00FFED  00                 	db	0
  1462  00FFEE                     STR_20:
  1463  00FFEE  45                 	db	69	;'E'
  1464  00FFEF  52                 	db	82	;'R'
  1465  00FFF0  52                 	db	82	;'R'
  1466  00FFF1  00                 	db	0
  1467  00FFF2                     STR_17:
  1468  00FFF2  4F                 	db	79	;'O'
  1469  00FFF3  43                 	db	67	;'C'
  1470  00FFF4  54                 	db	84	;'T'
  1471  00FFF5  00                 	db	0
  1472  00FFF6                     STR_18:
  1473  00FFF6  4E                 	db	78	;'N'
  1474  00FFF7  4F                 	db	79	;'O'
  1475  00FFF8  56                 	db	86	;'V'
  1476  00FFF9  00                 	db	0
  1477  00FFFA                     STR_12:
  1478  00FFFA  4D                 	db	77	;'M'
  1479  00FFFB  41                 	db	65	;'A'
  1480  00FFFC  59                 	db	89	;'Y'
  1481  00FFFD  00                 	db	0
  1482  0000                     
  1483                           ; #config settings
  1484  00FFFE  00                 	db	0	; dummy byte at the end
  1485  0000                     
  1486                           	psect	cinit
  1487  00392C                     __pcinit:
  1488                           	opt stack 0
  1489  00392C                     start_initialization:
  1490                           	opt stack 0
  1491  00392C                     __initialization:
  1492                           	opt stack 0
  1493                           
  1494                           ; Initialize objects allocated to BANK1 (8 bytes)
  1495                           ; load TBLPTR registers with __pidataBANK1
  1496  00392C  0E58               	movlw	low __pidataBANK1
  1497  00392E  6EF6               	movwf	tblptrl,c
  1498  003930  0E40               	movlw	high __pidataBANK1
  1499  003932  6EF7               	movwf	tblptrh,c
  1500  003934  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1501  003936  6EF8               	movwf	tblptru,c
  1502  003938  EE01  F02D         	lfsr	0,__pdataBANK1
  1503  00393C  EE10 F008          	lfsr	1,8
  1504  003940                     copy_data0:
  1505  003940  0009               	tblrd		*+
  1506  003942  CFF5 FFEE          	movff	tablat,postinc0
  1507  003946  50E5               	movf	postdec1,w,c
  1508  003948  50E1               	movf	fsr1l,w,c
  1509  00394A  E1FA               	bnz	copy_data0
  1510                           
  1511                           ; Clear objects allocated to BANK1 (45 bytes)
  1512  00394C  EE01  F000         	lfsr	0,__pbssBANK1
  1513  003950  0E2D               	movlw	45
  1514  003952                     clear_0:
  1515  003952  6AEE               	clrf	postinc0,c
  1516  003954  06E8               	decf	wreg,f,c
  1517  003956  E1FD               	bnz	clear_0
  1518                           
  1519                           ; Clear objects allocated to BANK0 (38 bytes)
  1520  003958  EE00  F0DA         	lfsr	0,__pbssBANK0
  1521  00395C  0E26               	movlw	38
  1522  00395E                     clear_1:
  1523  00395E  6AEE               	clrf	postinc0,c
  1524  003960  06E8               	decf	wreg,f,c
  1525  003962  E1FD               	bnz	clear_1
  1526                           
  1527                           ; Clear objects allocated to COMRAM (35 bytes)
  1528  003964  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1529  003968  0E23               	movlw	35
  1530  00396A                     clear_2:
  1531  00396A  6AEE               	clrf	postinc0,c
  1532  00396C  06E8               	decf	wreg,f,c
  1533  00396E  E1FD               	bnz	clear_2
  1534  003970                     end_of_initialization:
  1535                           	opt stack 0
  1536  003970                     __end_of__initialization:
  1537                           	opt stack 0
  1538  003970  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1539  003972  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1540  003974  0100               	movlb	0
  1541  003976  EF26  F019         	goto	_main	;jump to C main() function
  1542                           tblptru	equ	0xFF8
  1543                           tblptrh	equ	0xFF7
  1544                           tblptrl	equ	0xFF6
  1545                           tablat	equ	0xFF5
  1546                           postinc0	equ	0xFEE
  1547                           wreg	equ	0xFE8
  1548                           postdec1	equ	0xFE5
  1549                           fsr1l	equ	0xFE1
  1550                           
  1551                           	psect	bssCOMRAM
  1552  00005B                     __pbssCOMRAM:
  1553                           	opt stack 0
  1554  00005B                     _back:
  1555                           	opt stack 0
  1556  00005B                     	ds	2
  1557  00005D                     _count_can_no_lab:
  1558                           	opt stack 0
  1559  00005D                     	ds	2
  1560  00005F                     _count_can_w_lab:
  1561                           	opt stack 0
  1562  00005F                     	ds	2
  1563  000061                     _count_pop_no_tab:
  1564                           	opt stack 0
  1565  000061                     	ds	2
  1566  000063                     _count_pop_w_tab:
  1567                           	opt stack 0
  1568  000063                     	ds	2
  1569  000065                     _cur_can:
  1570                           	opt stack 0
  1571  000065                     	ds	2
  1572  000067                     _debug:
  1573                           	opt stack 0
  1574  000067                     	ds	2
  1575  000069                     _down:
  1576                           	opt stack 0
  1577  000069                     	ds	2
  1578  00006B                     _enter:
  1579                           	opt stack 0
  1580  00006B                     	ds	2
  1581  00006D                     _f_ID_receive:
  1582                           	opt stack 0
  1583  00006D                     	ds	2
  1584  00006F                     _f_can_coming_to_ID:
  1585                           	opt stack 0
  1586  00006F                     	ds	2
  1587  000071                     _f_can_coming_to_distribution:
  1588                           	opt stack 0
  1589  000071                     	ds	2
  1590  000073                     _f_lastCan:
  1591                           	opt stack 0
  1592  000073                     	ds	2
  1593  000075                     _firstboot:
  1594                           	opt stack 0
  1595  000075                     	ds	2
  1596  000077                     _up:
  1597                           	opt stack 0
  1598  000077                     	ds	2
  1599  000079                     _was_low_1:
  1600                           	opt stack 0
  1601  000079                     	ds	2
  1602  00007B                     _was_low_3:
  1603                           	opt stack 0
  1604  00007B                     	ds	2
  1605  00007D                     _input:
  1606                           	opt stack 0
  1607  00007D                     	ds	1
  1608                           tblptru	equ	0xFF8
  1609                           tblptrh	equ	0xFF7
  1610                           tblptrl	equ	0xFF6
  1611                           tablat	equ	0xFF5
  1612                           postinc0	equ	0xFEE
  1613                           wreg	equ	0xFE8
  1614                           postdec1	equ	0xFE5
  1615                           fsr1l	equ	0xFE1
  1616                           
  1617                           	psect	bssBANK0
  1618  0000DA                     __pbssBANK0:
  1619                           	opt stack 0
  1620  0000DA                     _IR_signal:
  1621                           	opt stack 0
  1622  0000DA                     	ds	2
  1623  0000DC                     _MAG_signal:
  1624                           	opt stack 0
  1625  0000DC                     	ds	2
  1626  0000DE                     _cur_state:
  1627                           	opt stack 0
  1628  0000DE                     	ds	2
  1629  0000E0                     _f_loadingNewCan:
  1630                           	opt stack 0
  1631  0000E0                     	ds	2
  1632  0000E2                     _first:
  1633                           	opt stack 0
  1634  0000E2                     	ds	2
  1635  0000E4                     _i:
  1636                           	opt stack 0
  1637  0000E4                     	ds	2
  1638  0000E6                     _log:
  1639                           	opt stack 0
  1640  0000E6                     	ds	2
  1641  0000E8                     _log_completion:
  1642                           	opt stack 0
  1643  0000E8                     	ds	2
  1644  0000EA                     _log_count_can_no_lab:
  1645                           	opt stack 0
  1646  0000EA                     	ds	2
  1647  0000EC                     _log_count_can_w_lab:
  1648                           	opt stack 0
  1649  0000EC                     	ds	2
  1650  0000EE                     _log_count_pop_no_tab:
  1651                           	opt stack 0
  1652  0000EE                     	ds	2
  1653  0000F0                     _log_count_pop_w_tab:
  1654                           	opt stack 0
  1655  0000F0                     	ds	2
  1656  0000F2                     _log_count_total:
  1657                           	opt stack 0
  1658  0000F2                     	ds	2
  1659  0000F4                     _log_total_time:
  1660                           	opt stack 0
  1661  0000F4                     	ds	2
  1662  0000F6                     _logstate:
  1663                           	opt stack 0
  1664  0000F6                     	ds	2
  1665  0000F8                     _total_time:
  1666                           	opt stack 0
  1667  0000F8                     	ds	2
  1668  0000FA                     _var:
  1669                           	opt stack 0
  1670  0000FA                     	ds	2
  1671  0000FC                     _machine_state:
  1672                           	opt stack 0
  1673  0000FC                     	ds	1
  1674  0000FD                     _sel:
  1675                           	opt stack 0
  1676  0000FD                     	ds	1
  1677  0000FE                     _count_total:
  1678                           	opt stack 0
  1679  0000FE                     	ds	2
  1680                           tblptru	equ	0xFF8
  1681                           tblptrh	equ	0xFF7
  1682                           tblptrl	equ	0xFF6
  1683                           tablat	equ	0xFF5
  1684                           postinc0	equ	0xFEE
  1685                           wreg	equ	0xFE8
  1686                           postdec1	equ	0xFE5
  1687                           fsr1l	equ	0xFE1
  1688                           
  1689                           	psect	bssBANK1
  1690  000100                     __pbssBANK1:
  1691                           	opt stack 0
  1692  000100                     _log_startTime:
  1693                           	opt stack 0
  1694  000100                     	ds	14
  1695  00010E                     _startTime:
  1696                           	opt stack 0
  1697  00010E                     	ds	14
  1698  00011C                     _servoTimes:
  1699                           	opt stack 0
  1700  00011C                     	ds	8
  1701  000124                     _time:
  1702                           	opt stack 0
  1703  000124                     	ds	7
  1704  00012B                     _f_can_distributed:
  1705                           	opt stack 0
  1706  00012B                     	ds	2
  1707                           tblptru	equ	0xFF8
  1708                           tblptrh	equ	0xFF7
  1709                           tblptrl	equ	0xFF6
  1710                           tablat	equ	0xFF5
  1711                           postinc0	equ	0xFEE
  1712                           wreg	equ	0xFE8
  1713                           postdec1	equ	0xFE5
  1714                           fsr1l	equ	0xFE1
  1715                           
  1716                           	psect	dataBANK1
  1717  00012D                     __pdataBANK1:
  1718                           	opt stack 0
  1719  00012D                     UI@F3220:
  1720                           	opt stack 0
  1721  00012D                     	ds	4
  1722  000131                     printRTC@F3211:
  1723                           	opt stack 0
  1724  000131                     	ds	4
  1725                           tblptru	equ	0xFF8
  1726                           tblptrh	equ	0xFF7
  1727                           tblptrl	equ	0xFF6
  1728                           tablat	equ	0xFF5
  1729                           postinc0	equ	0xFEE
  1730                           wreg	equ	0xFE8
  1731                           postdec1	equ	0xFE5
  1732                           fsr1l	equ	0xFE1
  1733                           
  1734                           	psect	cstackBANK0
  1735  000080                     __pcstackBANK0:
  1736                           	opt stack 0
  1737  000080                     ??_PortTests:
  1738  000080                     ??_isdigit:
  1739  000080                     ??_readADC:
  1740  000080                     ??_I2C_Master_Wait:
  1741  000080                     ?___wmul:
  1742                           	opt stack 0
  1743  000080                     ?___awmod:
  1744                           	opt stack 0
  1745  000080                     ?___lwdiv:
  1746                           	opt stack 0
  1747  000080                     ?___lldiv:
  1748                           	opt stack 0
  1749  000080                     lcdNibble@temp:
  1750                           	opt stack 0
  1751  000080                     initTime@m:
  1752                           	opt stack 0
  1753  000080                     updateServoPosition@time_us:
  1754                           	opt stack 0
  1755  000080                     EEPROM_read@address:
  1756                           	opt stack 0
  1757  000080                     ___wmul@multiplier:
  1758                           	opt stack 0
  1759  000080                     ___awmod@dividend:
  1760                           	opt stack 0
  1761  000080                     ___lwdiv@dividend:
  1762                           	opt stack 0
  1763  000080                     strcpy@to:
  1764                           	opt stack 0
  1765  000080                     ___lldiv@dividend:
  1766                           	opt stack 0
  1767                           
  1768                           ; 4 bytes @ 0x0
  1769  000080                     	ds	1
  1770  000081                     readADC@channel:
  1771                           	opt stack 0
  1772  000081                     I2C_Master_Read@a:
  1773                           	opt stack 0
  1774  000081                     lcdNibble@data:
  1775                           	opt stack 0
  1776  000081                     initTime@h:
  1777                           	opt stack 0
  1778  000081                     _isdigit$1852:
  1779                           	opt stack 0
  1780  000081                     I2C_Master_Write@d:
  1781                           	opt stack 0
  1782                           
  1783                           ; 2 bytes @ 0x1
  1784  000081                     	ds	1
  1785  000082                     ??_readIR:
  1786  000082                     ??_readMAG:
  1787  000082                     I2C_Master_Read@temp:
  1788                           	opt stack 0
  1789  000082                     lcdInst@data:
  1790                           	opt stack 0
  1791  000082                     putch@data:
  1792                           	opt stack 0
  1793  000082                     initTime@w:
  1794                           	opt stack 0
  1795  000082                     isdigit@c:
  1796                           	opt stack 0
  1797  000082                     updateServoPosition@timer:
  1798                           	opt stack 0
  1799  000082                     ___wmul@multiplicand:
  1800                           	opt stack 0
  1801  000082                     ___awmod@divisor:
  1802                           	opt stack 0
  1803  000082                     ___lwdiv@divisor:
  1804                           	opt stack 0
  1805  000082                     strcpy@from:
  1806                           	opt stack 0
  1807                           
  1808                           ; 2 bytes @ 0x2
  1809  000082                     	ds	1
  1810  000083                     ??_initLCD:
  1811  000083                     initTime@DD:
  1812                           	opt stack 0
  1813  000083                     getRTC@i:
  1814                           	opt stack 0
  1815                           
  1816                           ; 2 bytes @ 0x3
  1817  000083                     	ds	1
  1818  000084                     ??_updateServoPosition:
  1819  000084                     initTime@MM:
  1820                           	opt stack 0
  1821  000084                     ___awmod@counter:
  1822                           	opt stack 0
  1823  000084                     readIR@res:
  1824                           	opt stack 0
  1825  000084                     readMAG@res:
  1826                           	opt stack 0
  1827  000084                     ___wmul@product:
  1828                           	opt stack 0
  1829  000084                     ___lwdiv@quotient:
  1830                           	opt stack 0
  1831  000084                     strcpy@cp:
  1832                           	opt stack 0
  1833  000084                     ___lldiv@divisor:
  1834                           	opt stack 0
  1835                           
  1836                           ; 4 bytes @ 0x4
  1837  000084                     	ds	1
  1838  000085                     ??_initSortTimer:
  1839  000085                     initTime@YY:
  1840                           	opt stack 0
  1841  000085                     ___awmod@sign:
  1842                           	opt stack 0
  1843                           
  1844                           ; 1 bytes @ 0x5
  1845  000085                     	ds	1
  1846  000086                     ??_ID:
  1847  000086                     ??_getIR:
  1848  000086                     ?___awdiv:
  1849                           	opt stack 0
  1850  000086                     initTime@s:
  1851                           	opt stack 0
  1852  000086                     ___lwdiv@counter:
  1853                           	opt stack 0
  1854  000086                     updateServoPosition@my_time:
  1855                           	opt stack 0
  1856  000086                     ___awdiv@dividend:
  1857                           	opt stack 0
  1858                           
  1859                           ; 2 bytes @ 0x6
  1860  000086                     	ds	1
  1861  000087                     ?___lwmod:
  1862                           	opt stack 0
  1863  000087                     ___lwmod@dividend:
  1864                           	opt stack 0
  1865                           
  1866                           ; 2 bytes @ 0x7
  1867  000087                     	ds	1
  1868  000088                     ??_Distribution:
  1869  000088                     ??_initServos:
  1870  000088                     initSortTimer@i:
  1871                           	opt stack 0
  1872  000088                     ___awdiv@divisor:
  1873                           	opt stack 0
  1874  000088                     ___lldiv@quotient:
  1875                           	opt stack 0
  1876  000088                     ID@sensor_outputs:
  1877                           	opt stack 0
  1878                           
  1879                           ; 6 bytes @ 0x8
  1880  000088                     	ds	1
  1881  000089                     ___lwmod@divisor:
  1882                           	opt stack 0
  1883                           
  1884                           ; 2 bytes @ 0x9
  1885  000089                     	ds	1
  1886  00008A                     ___awdiv@counter:
  1887                           	opt stack 0
  1888                           
  1889                           ; 1 bytes @ 0xA
  1890  00008A                     	ds	1
  1891  00008B                     ___awdiv@sign:
  1892                           	opt stack 0
  1893  00008B                     ___lwmod@counter:
  1894                           	opt stack 0
  1895                           
  1896                           ; 1 bytes @ 0xB
  1897  00008B                     	ds	1
  1898  00008C                     ___lldiv@counter:
  1899                           	opt stack 0
  1900  00008C                     ___awdiv@quotient:
  1901                           	opt stack 0
  1902                           
  1903                           ; 2 bytes @ 0xC
  1904  00008C                     	ds	1
  1905  00008D                     I2C_Master_Init@c:
  1906                           	opt stack 0
  1907                           
  1908                           ; 4 bytes @ 0xD
  1909  00008D                     	ds	1
  1910  00008E                     ?_printf:
  1911                           	opt stack 0
  1912  00008E                     printf@f:
  1913                           	opt stack 0
  1914                           
  1915                           ; 2 bytes @ 0xE
  1916  00008E                     	ds	3
  1917  000091                     ??_I2C_Master_Init:
  1918                           
  1919                           ; 1 bytes @ 0x11
  1920  000091                     	ds	4
  1921  000095                     ??_loadRTC:
  1922                           
  1923                           ; 1 bytes @ 0x15
  1924  000095                     	ds	1
  1925  000096                     loadRTC@i:
  1926                           	opt stack 0
  1927                           
  1928                           ; 2 bytes @ 0x16
  1929  000096                     	ds	4
  1930  00009A                     ??_printf:
  1931                           
  1932                           ; 1 bytes @ 0x1A
  1933  00009A                     	ds	4
  1934  00009E                     printf@prec:
  1935                           	opt stack 0
  1936                           
  1937                           ; 1 bytes @ 0x1E
  1938  00009E                     	ds	1
  1939  00009F                     printf@cp:
  1940                           	opt stack 0
  1941                           
  1942                           ; 2 bytes @ 0x1F
  1943  00009F                     	ds	2
  1944  0000A1                     printf@ap:
  1945                           	opt stack 0
  1946                           
  1947                           ; 2 bytes @ 0x21
  1948  0000A1                     	ds	2
  1949  0000A3                     printf@len:
  1950                           	opt stack 0
  1951                           
  1952                           ; 2 bytes @ 0x23
  1953  0000A3                     	ds	2
  1954  0000A5                     printf@val:
  1955                           	opt stack 0
  1956                           
  1957                           ; 2 bytes @ 0x25
  1958  0000A5                     	ds	2
  1959  0000A7                     printf@flag:
  1960                           	opt stack 0
  1961                           
  1962                           ; 1 bytes @ 0x27
  1963  0000A7                     	ds	1
  1964  0000A8                     printf@c:
  1965                           	opt stack 0
  1966                           
  1967                           ; 1 bytes @ 0x28
  1968  0000A8                     	ds	1
  1969  0000A9                     printf@width:
  1970                           	opt stack 0
  1971                           
  1972                           ; 2 bytes @ 0x29
  1973  0000A9                     	ds	2
  1974  0000AB                     ??_printRTC:
  1975  0000AB                     ??_algorithmTest:
  1976  0000AB                     ??_sensorTest:
  1977  0000AB                     ??_actuatorTest:
  1978  0000AB                     ??_PortTestA5:
  1979  0000AB                     EEPROM_write@address:
  1980                           	opt stack 0
  1981                           
  1982                           ; 2 bytes @ 0x2B
  1983  0000AB                     	ds	2
  1984  0000AD                     EEPROM_write@data:
  1985                           	opt stack 0
  1986  0000AD                     actuatorTest@i:
  1987                           	opt stack 0
  1988                           
  1989                           ; 1 bytes @ 0x2D
  1990  0000AD                     	ds	1
  1991  0000AE                     ??_EEPROM_write:
  1992  0000AE                     actuatorTest@i_1562:
  1993                           	opt stack 0
  1994  0000AE                     printRTC@INT_time:
  1995                           	opt stack 0
  1996                           
  1997                           ; 14 bytes @ 0x2E
  1998  0000AE                     	ds	1
  1999  0000AF                     EEPROM_write@i:
  2000                           	opt stack 0
  2001  0000AF                     actuatorTest@i_1563:
  2002                           	opt stack 0
  2003                           
  2004                           ; 1 bytes @ 0x2F
  2005  0000AF                     	ds	1
  2006  0000B0                     EEPROM_write@i_1310:
  2007                           	opt stack 0
  2008  0000B0                     actuatorTest@i_1565:
  2009                           	opt stack 0
  2010                           
  2011                           ; 1 bytes @ 0x30
  2012  0000B0                     	ds	1
  2013  0000B1                     ??_Loading:
  2014  0000B1                     logRun@num:
  2015                           	opt stack 0
  2016  0000B1                     actuatorTest@i_1566:
  2017                           	opt stack 0
  2018                           
  2019                           ; 1 bytes @ 0x31
  2020  0000B1                     	ds	1
  2021  0000B2                     logRun@byte1:
  2022                           	opt stack 0
  2023  0000B2                     actuatorTest@i_1568:
  2024                           	opt stack 0
  2025                           
  2026                           ; 1 bytes @ 0x32
  2027  0000B2                     	ds	1
  2028  0000B3                     logRun@byte2:
  2029                           	opt stack 0
  2030  0000B3                     actuatorTest@i_1569:
  2031                           	opt stack 0
  2032  0000B3                     Loading@addr:
  2033                           	opt stack 0
  2034                           
  2035                           ; 2 bytes @ 0x33
  2036  0000B3                     	ds	1
  2037  0000B4                     logRun@byte3:
  2038                           	opt stack 0
  2039  0000B4                     actuatorTest@i_1571:
  2040                           	opt stack 0
  2041                           
  2042                           ; 1 bytes @ 0x34
  2043  0000B4                     	ds	1
  2044  0000B5                     Loading@byte1:
  2045                           	opt stack 0
  2046  0000B5                     logRun@byte_i:
  2047                           	opt stack 0
  2048  0000B5                     actuatorTest@i_1572:
  2049                           	opt stack 0
  2050                           
  2051                           ; 1 bytes @ 0x35
  2052  0000B5                     	ds	1
  2053  0000B6                     logRun@byte11:
  2054                           	opt stack 0
  2055  0000B6                     actuatorTest@i_1574:
  2056                           	opt stack 0
  2057                           
  2058                           ; 1 bytes @ 0x36
  2059  0000B6                     	ds	1
  2060  0000B7                     actuatorTest@i_1575:
  2061                           	opt stack 0
  2062  0000B7                     logRun@i:
  2063                           	opt stack 0
  2064                           
  2065                           ; 2 bytes @ 0x37
  2066  0000B7                     	ds	1
  2067  0000B8                     actuatorTest@i_1577:
  2068                           	opt stack 0
  2069                           
  2070                           ; 1 bytes @ 0x38
  2071  0000B8                     	ds	1
  2072  0000B9                     actuatorTest@i_1578:
  2073                           	opt stack 0
  2074  0000B9                     logRun@addr:
  2075                           	opt stack 0
  2076                           
  2077                           ; 2 bytes @ 0x39
  2078  0000B9                     	ds	1
  2079  0000BA                     actuatorTest@i_1581:
  2080                           	opt stack 0
  2081                           
  2082                           ; 1 bytes @ 0x3A
  2083  0000BA                     	ds	1
  2084  0000BB                     actuatorTest@i_1582:
  2085                           	opt stack 0
  2086                           
  2087                           ; 1 bytes @ 0x3B
  2088  0000BB                     	ds	1
  2089  0000BC                     actuatorTest@i_1584:
  2090                           	opt stack 0
  2091  0000BC                     printRTC@RTC_month:
  2092                           	opt stack 0
  2093                           
  2094                           ; 2 bytes @ 0x3C
  2095  0000BC                     	ds	1
  2096  0000BD                     actuatorTest@i_1585:
  2097                           	opt stack 0
  2098                           
  2099                           ; 1 bytes @ 0x3D
  2100  0000BD                     	ds	1
  2101  0000BE                     actuatorTest@i_1587:
  2102                           	opt stack 0
  2103  0000BE                     printRTC@month:
  2104                           	opt stack 0
  2105                           
  2106                           ; 4 bytes @ 0x3E
  2107  0000BE                     	ds	1
  2108  0000BF                     actuatorTest@i_1588:
  2109                           	opt stack 0
  2110                           
  2111                           ; 1 bytes @ 0x3F
  2112  0000BF                     	ds	1
  2113  0000C0                     actuatorTest@i_1591:
  2114                           	opt stack 0
  2115                           
  2116                           ; 1 bytes @ 0x40
  2117  0000C0                     	ds	1
  2118  0000C1                     actuatorTest@i_1592:
  2119                           	opt stack 0
  2120                           
  2121                           ; 1 bytes @ 0x41
  2122  0000C1                     	ds	1
  2123  0000C2                     actuatorTest@i_1594:
  2124                           	opt stack 0
  2125  0000C2                     printRTC@i:
  2126                           	opt stack 0
  2127                           
  2128                           ; 2 bytes @ 0x42
  2129  0000C2                     	ds	1
  2130  0000C3                     actuatorTest@i_1595:
  2131                           	opt stack 0
  2132                           
  2133                           ; 1 bytes @ 0x43
  2134  0000C3                     	ds	1
  2135  0000C4                     ??_Test:
  2136  0000C4                     ??_UI:
  2137                           
  2138                           ; 1 bytes @ 0x44
  2139  0000C4                     	ds	2
  2140  0000C6                     _UI$2205:
  2141                           	opt stack 0
  2142                           
  2143                           ; 2 bytes @ 0x46
  2144  0000C6                     	ds	2
  2145  0000C8                     UI@i:
  2146                           	opt stack 0
  2147                           
  2148                           ; 1 bytes @ 0x48
  2149  0000C8                     	ds	1
  2150  0000C9                     UI@i_408:
  2151                           	opt stack 0
  2152                           
  2153                           ; 1 bytes @ 0x49
  2154  0000C9                     	ds	1
  2155  0000CA                     UI@i_411:
  2156                           	opt stack 0
  2157                           
  2158                           ; 1 bytes @ 0x4A
  2159  0000CA                     	ds	1
  2160  0000CB                     UI@i_412:
  2161                           	opt stack 0
  2162                           
  2163                           ; 1 bytes @ 0x4B
  2164  0000CB                     	ds	1
  2165  0000CC                     UI@i_430:
  2166                           	opt stack 0
  2167                           
  2168                           ; 1 bytes @ 0x4C
  2169  0000CC                     	ds	1
  2170  0000CD                     UI@i_431:
  2171                           	opt stack 0
  2172                           
  2173                           ; 1 bytes @ 0x4D
  2174  0000CD                     	ds	1
  2175  0000CE                     UI@i_434:
  2176                           	opt stack 0
  2177                           
  2178                           ; 1 bytes @ 0x4E
  2179  0000CE                     	ds	1
  2180  0000CF                     UI@i_435:
  2181                           	opt stack 0
  2182                           
  2183                           ; 1 bytes @ 0x4F
  2184  0000CF                     	ds	1
  2185  0000D0                     UI@i_438:
  2186                           	opt stack 0
  2187                           
  2188                           ; 1 bytes @ 0x50
  2189  0000D0                     	ds	1
  2190  0000D1                     UI@i_439:
  2191                           	opt stack 0
  2192                           
  2193                           ; 1 bytes @ 0x51
  2194  0000D1                     	ds	1
  2195  0000D2                     UI@i_442:
  2196                           	opt stack 0
  2197                           
  2198                           ; 1 bytes @ 0x52
  2199  0000D2                     	ds	1
  2200  0000D3                     UI@i_443:
  2201                           	opt stack 0
  2202                           
  2203                           ; 1 bytes @ 0x53
  2204  0000D3                     	ds	1
  2205  0000D4                     UI@i_446:
  2206                           	opt stack 0
  2207                           
  2208                           ; 1 bytes @ 0x54
  2209  0000D4                     	ds	1
  2210  0000D5                     UI@i_447:
  2211                           	opt stack 0
  2212                           
  2213                           ; 1 bytes @ 0x55
  2214  0000D5                     	ds	1
  2215  0000D6                     UI@month:
  2216                           	opt stack 0
  2217                           
  2218                           ; 4 bytes @ 0x56
  2219  0000D6                     	ds	4
  2220  0000DA                     tblptru	equ	0xFF8
  2221                           tblptrh	equ	0xFF7
  2222                           tblptrl	equ	0xFF6
  2223                           tablat	equ	0xFF5
  2224                           postinc0	equ	0xFEE
  2225                           wreg	equ	0xFE8
  2226                           postdec1	equ	0xFE5
  2227                           fsr1l	equ	0xFE1
  2228                           
  2229                           ; 1 bytes @ 0x5A
  2230                           
  2231                           	psect	cstackCOMRAM
  2232  000001                     __pcstackCOMRAM:
  2233                           	opt stack 0
  2234  000001                     ??i2_I2C_Master_Wait:
  2235  000001                     ??i2_isdigit:
  2236  000001                     ?i2___wmul:
  2237                           	opt stack 0
  2238  000001                     ?i2___lwmod:
  2239                           	opt stack 0
  2240  000001                     i2lcdNibble@temp:
  2241                           	opt stack 0
  2242  000001                     i2EEPROM_read@address:
  2243                           	opt stack 0
  2244  000001                     i2___wmul@multiplier:
  2245                           	opt stack 0
  2246  000001                     i2___lwmod@dividend:
  2247                           	opt stack 0
  2248  000001                     i2strcpy@to:
  2249                           	opt stack 0
  2250                           
  2251                           ; 2 bytes @ 0x0
  2252  000001                     	ds	1
  2253  000002                     i2I2C_Master_Read@a:
  2254                           	opt stack 0
  2255  000002                     i2lcdNibble@data:
  2256                           	opt stack 0
  2257  000002                     i2_isdigit$1852:
  2258                           	opt stack 0
  2259  000002                     i2I2C_Master_Write@d:
  2260                           	opt stack 0
  2261                           
  2262                           ; 2 bytes @ 0x1
  2263  000002                     	ds	1
  2264  000003                     i2I2C_Master_Read@temp:
  2265                           	opt stack 0
  2266  000003                     i2lcdInst@data:
  2267                           	opt stack 0
  2268  000003                     i2putch@data:
  2269                           	opt stack 0
  2270  000003                     i2isdigit@c:
  2271                           	opt stack 0
  2272  000003                     i2___wmul@multiplicand:
  2273                           	opt stack 0
  2274  000003                     i2___lwmod@divisor:
  2275                           	opt stack 0
  2276  000003                     i2strcpy@from:
  2277                           	opt stack 0
  2278                           
  2279                           ; 2 bytes @ 0x2
  2280  000003                     	ds	1
  2281  000004                     i2getRTC@i:
  2282                           	opt stack 0
  2283                           
  2284                           ; 2 bytes @ 0x3
  2285  000004                     	ds	1
  2286  000005                     i2___lwmod@counter:
  2287                           	opt stack 0
  2288  000005                     i2___wmul@product:
  2289                           	opt stack 0
  2290  000005                     i2strcpy@cp:
  2291                           	opt stack 0
  2292                           
  2293                           ; 2 bytes @ 0x4
  2294  000005                     	ds	1
  2295  000006                     ?i2___lwdiv:
  2296                           	opt stack 0
  2297  000006                     i2___lwdiv@dividend:
  2298                           	opt stack 0
  2299                           
  2300                           ; 2 bytes @ 0x5
  2301  000006                     	ds	1
  2302  000007                     retrieveLog@logNum:
  2303                           	opt stack 0
  2304                           
  2305                           ; 2 bytes @ 0x6
  2306  000007                     	ds	1
  2307  000008                     i2___lwdiv@divisor:
  2308                           	opt stack 0
  2309                           
  2310                           ; 2 bytes @ 0x7
  2311  000008                     	ds	1
  2312  000009                     ??_retrieveLog:
  2313                           
  2314                           ; 1 bytes @ 0x8
  2315  000009                     	ds	1
  2316  00000A                     i2___lwdiv@quotient:
  2317                           	opt stack 0
  2318                           
  2319                           ; 2 bytes @ 0x9
  2320  00000A                     	ds	1
  2321  00000B                     retrieveLog@byte1:
  2322                           	opt stack 0
  2323                           
  2324                           ; 1 bytes @ 0xA
  2325  00000B                     	ds	1
  2326  00000C                     retrieveLog@byte2:
  2327                           	opt stack 0
  2328  00000C                     i2___lwdiv@counter:
  2329                           	opt stack 0
  2330                           
  2331                           ; 1 bytes @ 0xB
  2332  00000C                     	ds	1
  2333  00000D                     ?i2_printf:
  2334                           	opt stack 0
  2335  00000D                     retrieveLog@byte3:
  2336                           	opt stack 0
  2337  00000D                     i2printf@f:
  2338                           	opt stack 0
  2339                           
  2340                           ; 2 bytes @ 0xC
  2341  00000D                     	ds	1
  2342  00000E                     retrieveLog@i:
  2343                           	opt stack 0
  2344                           
  2345                           ; 2 bytes @ 0xD
  2346  00000E                     	ds	2
  2347  000010                     retrieveLog@addr:
  2348                           	opt stack 0
  2349                           
  2350                           ; 2 bytes @ 0xF
  2351  000010                     	ds	2
  2352  000012                     dispLogs@myLog:
  2353                           	opt stack 0
  2354                           
  2355                           ; 2 bytes @ 0x11
  2356  000012                     	ds	2
  2357  000014                     
  2358                           ; 1 bytes @ 0x13
  2359  000014                     	ds	5
  2360  000019                     ??i2_printf:
  2361                           
  2362                           ; 1 bytes @ 0x18
  2363  000019                     	ds	4
  2364  00001D                     i2printf@prec:
  2365                           	opt stack 0
  2366                           
  2367                           ; 1 bytes @ 0x1C
  2368  00001D                     	ds	1
  2369  00001E                     i2printf@cp:
  2370                           	opt stack 0
  2371                           
  2372                           ; 2 bytes @ 0x1D
  2373  00001E                     	ds	2
  2374  000020                     i2printf@ap:
  2375                           	opt stack 0
  2376                           
  2377                           ; 2 bytes @ 0x1F
  2378  000020                     	ds	2
  2379  000022                     i2printf@len:
  2380                           	opt stack 0
  2381                           
  2382                           ; 2 bytes @ 0x21
  2383  000022                     	ds	2
  2384  000024                     i2printf@val:
  2385                           	opt stack 0
  2386                           
  2387                           ; 2 bytes @ 0x23
  2388  000024                     	ds	2
  2389  000026                     i2printf@flag:
  2390                           	opt stack 0
  2391                           
  2392                           ; 1 bytes @ 0x25
  2393  000026                     	ds	1
  2394  000027                     i2printf@c:
  2395                           	opt stack 0
  2396                           
  2397                           ; 1 bytes @ 0x26
  2398  000027                     	ds	1
  2399  000028                     i2printf@width:
  2400                           	opt stack 0
  2401                           
  2402                           ; 2 bytes @ 0x27
  2403  000028                     	ds	2
  2404  00002A                     ??_printSortTimer:
  2405  00002A                     ??i2_printRTC:
  2406  00002A                     ?_inputHandler:
  2407                           	opt stack 0
  2408                           
  2409                           ; 2 bytes @ 0x29
  2410  00002A                     	ds	2
  2411  00002C                     ??_inputHandler:
  2412                           
  2413                           ; 1 bytes @ 0x2B
  2414  00002C                     	ds	1
  2415  00002D                     printSortTimer@hour:
  2416                           	opt stack 0
  2417  00002D                     i2printRTC@INT_time:
  2418                           	opt stack 0
  2419                           
  2420                           ; 14 bytes @ 0x2C
  2421  00002D                     	ds	2
  2422  00002F                     printSortTimer@curTime:
  2423                           	opt stack 0
  2424                           
  2425                           ; 14 bytes @ 0x2E
  2426  00002F                     	ds	12
  2427  00003B                     i2printRTC@RTC_month:
  2428                           	opt stack 0
  2429                           
  2430                           ; 2 bytes @ 0x3A
  2431  00003B                     	ds	2
  2432  00003D                     printSortTimer@start_sec:
  2433                           	opt stack 0
  2434  00003D                     i2printRTC@month:
  2435                           	opt stack 0
  2436                           
  2437                           ; 4 bytes @ 0x3C
  2438  00003D                     	ds	2
  2439  00003F                     printSortTimer@cur_sec:
  2440                           	opt stack 0
  2441                           
  2442                           ; 2 bytes @ 0x3E
  2443  00003F                     	ds	2
  2444  000041                     printSortTimer@min:
  2445                           	opt stack 0
  2446  000041                     i2printRTC@i:
  2447                           	opt stack 0
  2448                           
  2449                           ; 2 bytes @ 0x40
  2450  000041                     	ds	2
  2451  000043                     ??_updateMenu:
  2452  000043                     printSortTimer@sec:
  2453                           	opt stack 0
  2454                           
  2455                           ; 2 bytes @ 0x42
  2456  000043                     	ds	2
  2457  000045                     _printSortTimer$2325:
  2458                           	opt stack 0
  2459                           
  2460                           ; 2 bytes @ 0x44
  2461  000045                     	ds	2
  2462  000047                     printSortTimer@timeDiff:
  2463                           	opt stack 0
  2464                           
  2465                           ; 2 bytes @ 0x46
  2466  000047                     	ds	2
  2467  000049                     printSortTimer@i:
  2468                           	opt stack 0
  2469                           
  2470                           ; 2 bytes @ 0x48
  2471  000049                     	ds	2
  2472  00004B                     ??_handler:
  2473                           
  2474                           ; 1 bytes @ 0x4A
  2475  00004B                     	ds	16
  2476                           tblptru	equ	0xFF8
  2477                           tblptrh	equ	0xFF7
  2478                           tblptrl	equ	0xFF6
  2479                           tablat	equ	0xFF5
  2480                           postinc0	equ	0xFEE
  2481                           wreg	equ	0xFE8
  2482                           postdec1	equ	0xFE5
  2483                           fsr1l	equ	0xFE1
  2484                           
  2485 ;;
  2486 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2487 ;;
  2488 ;; *************** function _main *****************
  2489 ;; Defined at:
  2490 ;;		line 17 in file "main.c"
  2491 ;; Parameters:    Size  Location     Type
  2492 ;;		None
  2493 ;; Auto vars:     Size  Location     Type
  2494 ;;		None
  2495 ;; Return value:  Size  Location     Type
  2496 ;;                  1    wreg      void 
  2497 ;; Registers used:
  2498 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2499 ;; Tracked objects:
  2500 ;;		On entry : 0/0
  2501 ;;		On exit  : 0/0
  2502 ;;		Unchanged: 0/0
  2503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2508 ;;Total ram usage:        0 bytes
  2509 ;; Hardware stack levels required when called:   13
  2510 ;; This function calls:
  2511 ;;		_Test
  2512 ;;		_UI
  2513 ;;		_initLCD
  2514 ;;		_initTime
  2515 ;;		_initUI
  2516 ;;		_logRun
  2517 ;;		_machineConfig
  2518 ;;		_sort
  2519 ;;		_stopSignals
  2520 ;; This function is called by:
  2521 ;;		Startup code after reset
  2522 ;; This function uses a non-reentrant model
  2523 ;;
  2524                           
  2525                           	psect	text0
  2526  00324C                     __ptext0:
  2527                           	opt stack 0
  2528  00324C                     _main:
  2529                           	opt stack 18
  2530                           
  2531                           ;main.c: 18: machineConfig();
  2532                           
  2533                           ;incstack = 0
  2534  00324C  EC16  F01C         	call	_machineConfig	;wreg free
  2535                           
  2536                           ;main.c: 19: initLCD();
  2537  003250  EC30  F01D         	call	_initLCD	;wreg free
  2538                           
  2539                           ;main.c: 20: initTime(0x42, 0x20, 0x13, 0x04, 0x01, 0x03, 0x17);
  2540  003254  0E20               	movlw	32
  2541  003256  0100               	movlb	0	; () banked
  2542  003258  6F80               	movwf	initTime@m& (0+255),b
  2543  00325A  0E13               	movlw	19
  2544  00325C  0100               	movlb	0	; () banked
  2545  00325E  6F81               	movwf	initTime@h& (0+255),b
  2546  003260  0E04               	movlw	4
  2547  003262  0100               	movlb	0	; () banked
  2548  003264  6F82               	movwf	initTime@w& (0+255),b
  2549  003266  0E01               	movlw	1
  2550  003268  0100               	movlb	0	; () banked
  2551  00326A  6F83               	movwf	initTime@DD& (0+255),b
  2552  00326C  0E03               	movlw	3
  2553  00326E  0100               	movlb	0	; () banked
  2554  003270  6F84               	movwf	initTime@MM& (0+255),b
  2555  003272  0E17               	movlw	23
  2556  003274  0100               	movlb	0	; () banked
  2557  003276  6F85               	movwf	initTime@YY& (0+255),b
  2558  003278  0E42               	movlw	66
  2559  00327A  ECB1  F01F         	call	_initTime
  2560                           
  2561                           ;main.c: 21: initUI();
  2562  00327E  EC7C  F01F         	call	_initUI	;wreg free
  2563                           
  2564                           ;main.c: 22: first = 1;
  2565  003282  0E00               	movlw	0
  2566  003284  0100               	movlb	0	; () banked
  2567  003286  6FE3               	movwf	(_first+1)& (0+255),b
  2568  003288  0E01               	movlw	1
  2569  00328A  6FE2               	movwf	_first& (0+255),b
  2570                           
  2571                           ; BSR set to: 0
  2572                           ;main.c: 24: machine_state = Testing_state;
  2573  00328C  0E03               	movlw	3
  2574  00328E  0100               	movlb	0	; () banked
  2575  003290  6FFC               	movwf	_machine_state& (0+255),b
  2576                           
  2577                           ; BSR set to: 0
  2578                           ;main.c: 33: switch(machine_state){
  2579                           
  2580                           ;main.c: 32: while(1){
  2581  003292  D018               	goto	l7483
  2582  003294                     l7465:
  2583                           
  2584                           ; BSR set to: 0
  2585                           ;main.c: 35: UI();
  2586  003294  EC09  F000         	call	_UI	;wreg free
  2587                           
  2588                           ;main.c: 36: break;
  2589  003298  D015               	goto	l7483
  2590  00329A                     l7467:
  2591                           
  2592                           ;main.c: 38: sort();
  2593  00329A  ECA0  F01F         	call	_sort	;wreg free
  2594                           
  2595                           ;main.c: 39: break;
  2596  00329E  D012               	goto	l7483
  2597  0032A0                     l7469:
  2598                           
  2599                           ;main.c: 41: stopSignals();
  2600  0032A0  ECDD  F01F         	call	_stopSignals	;wreg free
  2601                           
  2602                           ;main.c: 42: logRun();
  2603  0032A4  ECAB  F013         	call	_logRun	;wreg free
  2604                           
  2605                           ;main.c: 43: first = 1;
  2606  0032A8  0E00               	movlw	0
  2607  0032AA  0100               	movlb	0	; () banked
  2608  0032AC  6FE3               	movwf	(_first+1)& (0+255),b
  2609  0032AE  0E01               	movlw	1
  2610  0032B0  6FE2               	movwf	_first& (0+255),b
  2611                           
  2612                           ; BSR set to: 0
  2613                           ;main.c: 44: UI();
  2614  0032B2  EC09  F000         	call	_UI	;wreg free
  2615                           
  2616                           ;main.c: 45: break;
  2617  0032B6  D006               	goto	l7483
  2618  0032B8                     l7477:
  2619                           
  2620                           ;main.c: 47: Test();
  2621  0032B8  EC73  F016         	call	_Test	;wreg free
  2622                           
  2623                           ;main.c: 48: break;
  2624  0032BC  D003               	goto	l7483
  2625  0032BE                     l7479:
  2626                           
  2627                           ;main.c: 50: stopSignals();
  2628  0032BE  ECDD  F01F         	call	_stopSignals	;wreg free
  2629  0032C2                     l478:
  2630  0032C2  D7FF               	goto	l478
  2631  0032C4                     l7483:
  2632  0032C4  0100               	movlb	0	; () banked
  2633  0032C6  51FC               	movf	_machine_state& (0+255),w,b
  2634                           
  2635                           ; Switch size 1, requested type "space"
  2636                           ; Number of cases is 5, Range of values is 0 to 4
  2637                           ; switch strategies available:
  2638                           ; Name         Instructions Cycles
  2639                           ; simple_byte           16     9 (average)
  2640                           ;	Chosen strategy is simple_byte
  2641  0032C8  0A00               	xorlw	0	; case 0
  2642  0032CA  B4D8               	btfsc	status,2,c
  2643  0032CC  D7E3               	goto	l7465
  2644  0032CE  0A01               	xorlw	1	; case 1
  2645  0032D0  B4D8               	btfsc	status,2,c
  2646  0032D2  D7E3               	goto	l7467
  2647  0032D4  0A03               	xorlw	3	; case 2
  2648  0032D6  B4D8               	btfsc	status,2,c
  2649  0032D8  D7E3               	goto	l7469
  2650  0032DA  0A01               	xorlw	1	; case 3
  2651  0032DC  B4D8               	btfsc	status,2,c
  2652  0032DE  D7EC               	goto	l7477
  2653  0032E0  0A07               	xorlw	7	; case 4
  2654  0032E2  B4D8               	btfsc	status,2,c
  2655  0032E4  D7EC               	goto	l7479
  2656                           
  2657                           ; BSR set to: 0
  2658                           
  2659                           ; BSR set to: 0
  2660  0032E6  D7EE               	goto	l7483
  2661  0032E8                     __end_of_main:
  2662                           	opt stack 0
  2663                           tblptru	equ	0xFF8
  2664                           tblptrh	equ	0xFF7
  2665                           tblptrl	equ	0xFF6
  2666                           tablat	equ	0xFF5
  2667                           postinc0	equ	0xFEE
  2668                           wreg	equ	0xFE8
  2669                           postdec1	equ	0xFE5
  2670                           fsr1l	equ	0xFE1
  2671                           status	equ	0xFD8
  2672                           
  2673 ;; *************** function _stopSignals *****************
  2674 ;; Defined at:
  2675 ;;		line 59 in file "main.c"
  2676 ;; Parameters:    Size  Location     Type
  2677 ;;		None
  2678 ;; Auto vars:     Size  Location     Type
  2679 ;;		None
  2680 ;; Return value:  Size  Location     Type
  2681 ;;                  1    wreg      void 
  2682 ;; Registers used:
  2683 ;;		wreg, status,2
  2684 ;; Tracked objects:
  2685 ;;		On entry : 0/0
  2686 ;;		On exit  : 0/0
  2687 ;;		Unchanged: 0/0
  2688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2692 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2693 ;;Total ram usage:        0 bytes
  2694 ;; Hardware stack levels used:    1
  2695 ;; Hardware stack levels required when called:    7
  2696 ;; This function calls:
  2697 ;;		Nothing
  2698 ;; This function is called by:
  2699 ;;		_main
  2700 ;; This function uses a non-reentrant model
  2701 ;;
  2702                           
  2703                           	psect	text1
  2704  003FBA                     __ptext1:
  2705                           	opt stack 0
  2706  003FBA                     _stopSignals:
  2707                           	opt stack 23
  2708                           
  2709                           ;main.c: 60: LATA = 0x00;
  2710                           
  2711                           ; BSR set to: 0
  2712                           ;incstack = 0
  2713  003FBA  0E00               	movlw	0
  2714  003FBC  6E89               	movwf	3977,c	;volatile
  2715                           
  2716                           ;main.c: 61: LATB = 0x00;
  2717  003FBE  0E00               	movlw	0
  2718  003FC0  6E8A               	movwf	3978,c	;volatile
  2719                           
  2720                           ;main.c: 62: LATC = 0x00;
  2721  003FC2  0E00               	movlw	0
  2722  003FC4  6E8B               	movwf	3979,c	;volatile
  2723                           
  2724                           ;main.c: 63: LATD = 0x00;
  2725  003FC6  0E00               	movlw	0
  2726  003FC8  6E8C               	movwf	3980,c	;volatile
  2727                           
  2728                           ;main.c: 64: LATE = 0x00;
  2729  003FCA  0E00               	movlw	0
  2730  003FCC  6E8D               	movwf	3981,c	;volatile
  2731  003FCE  0012               	return		;funcret
  2732  003FD0                     __end_of_stopSignals:
  2733                           	opt stack 0
  2734                           tblptru	equ	0xFF8
  2735                           tblptrh	equ	0xFF7
  2736                           tblptrl	equ	0xFF6
  2737                           tablat	equ	0xFF5
  2738                           postinc0	equ	0xFEE
  2739                           wreg	equ	0xFE8
  2740                           postdec1	equ	0xFE5
  2741                           fsr1l	equ	0xFE1
  2742                           status	equ	0xFD8
  2743                           
  2744 ;; *************** function _sort *****************
  2745 ;; Defined at:
  2746 ;;		line 55 in file "sort.c"
  2747 ;; Parameters:    Size  Location     Type
  2748 ;;		None
  2749 ;; Auto vars:     Size  Location     Type
  2750 ;;		None
  2751 ;; Return value:  Size  Location     Type
  2752 ;;                  1    wreg      void 
  2753 ;; Registers used:
  2754 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2755 ;; Tracked objects:
  2756 ;;		On entry : 0/0
  2757 ;;		On exit  : 0/0
  2758 ;;		Unchanged: 0/0
  2759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2764 ;;Total ram usage:        0 bytes
  2765 ;; Hardware stack levels used:    1
  2766 ;; Hardware stack levels required when called:   12
  2767 ;; This function calls:
  2768 ;;		_Distribution
  2769 ;;		_ID
  2770 ;;		_Loading
  2771 ;; This function is called by:
  2772 ;;		_main
  2773 ;; This function uses a non-reentrant model
  2774 ;;
  2775                           
  2776                           	psect	text2
  2777  003F40                     __ptext2:
  2778                           	opt stack 0
  2779  003F40                     _sort:
  2780                           	opt stack 18
  2781                           
  2782                           ;sort.c: 56: if(machine_state == Sorting_state){
  2783                           
  2784                           ;incstack = 0
  2785  003F40  0100               	movlb	0	; () banked
  2786  003F42  05FC               	decf	_machine_state& (0+255),w,b
  2787  003F44  B4D8               	btfsc	status,2,c
  2788                           
  2789                           ; BSR set to: 0
  2790                           ;sort.c: 57: Loading();
  2791  003F46  EC00  F016         	call	_Loading	;wreg free
  2792                           
  2793                           ;sort.c: 58: }
  2794                           ;sort.c: 59: if(machine_state == Sorting_state){
  2795  003F4A  0100               	movlb	0	; () banked
  2796  003F4C  05FC               	decf	_machine_state& (0+255),w,b
  2797  003F4E  B4D8               	btfsc	status,2,c
  2798                           
  2799                           ; BSR set to: 0
  2800                           ;sort.c: 60: ID();
  2801  003F50  ECE3  F014         	call	_ID	;wreg free
  2802                           
  2803                           ;sort.c: 61: }
  2804                           ;sort.c: 62: if(machine_state == Sorting_state){
  2805  003F54  0100               	movlb	0	; () banked
  2806  003F56  05FC               	decf	_machine_state& (0+255),w,b
  2807  003F58  A4D8               	btfss	status,2,c
  2808  003F5A  0012               	return	
  2809                           
  2810                           ; BSR set to: 0
  2811                           ;sort.c: 63: Distribution();
  2812  003F5C  EC49  F014         	call	_Distribution	;wreg free
  2813  003F60  0012               	return	
  2814  003F62                     __end_of_sort:
  2815                           	opt stack 0
  2816                           tblptru	equ	0xFF8
  2817                           tblptrh	equ	0xFF7
  2818                           tblptrl	equ	0xFF6
  2819                           tablat	equ	0xFF5
  2820                           postinc0	equ	0xFEE
  2821                           wreg	equ	0xFE8
  2822                           postdec1	equ	0xFE5
  2823                           fsr1l	equ	0xFE1
  2824                           status	equ	0xFD8
  2825                           
  2826 ;; *************** function _Loading *****************
  2827 ;; Defined at:
  2828 ;;		line 67 in file "sort.c"
  2829 ;; Parameters:    Size  Location     Type
  2830 ;;		None
  2831 ;; Auto vars:     Size  Location     Type
  2832 ;;  addr            2   51[BANK0 ] unsigned short 
  2833 ;;  byte1           1   53[BANK0 ] unsigned char 
  2834 ;; Return value:  Size  Location     Type
  2835 ;;                  1    wreg      void 
  2836 ;; Registers used:
  2837 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2838 ;; Tracked objects:
  2839 ;;		On entry : 0/0
  2840 ;;		On exit  : 0/0
  2841 ;;		Unchanged: 0/0
  2842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2844 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2845 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2846 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2847 ;;Total ram usage:        5 bytes
  2848 ;; Hardware stack levels used:    1
  2849 ;; Hardware stack levels required when called:   11
  2850 ;; This function calls:
  2851 ;;		_EEPROM_read
  2852 ;;		_EEPROM_write
  2853 ;;		_getIR
  2854 ;;		_initGlobalVars
  2855 ;;		_initServos
  2856 ;;		_initSortTimer
  2857 ;;		_lcdInst
  2858 ;; This function is called by:
  2859 ;;		_sort
  2860 ;; This function uses a non-reentrant model
  2861 ;;
  2862                           
  2863                           	psect	text3
  2864  002C00                     __ptext3:
  2865                           	opt stack 0
  2866  002C00                     _Loading:
  2867                           	opt stack 18
  2868                           
  2869                           ;sort.c: 68: if(first){
  2870                           
  2871                           ;incstack = 0
  2872  002C00  0100               	movlb	0	; () banked
  2873  002C02  51E2               	movf	_first& (0+255),w,b
  2874  002C04  0100               	movlb	0	; () banked
  2875  002C06  11E3               	iorwf	(_first+1)& (0+255),w,b
  2876  002C08  B4D8               	btfsc	status,2,c
  2877  002C0A  D033               	goto	l6005
  2878                           
  2879                           ; BSR set to: 0
  2880                           ;sort.c: 69: initGlobalVars();
  2881  002C0C  ECEF  F01A         	call	_initGlobalVars	;wreg free
  2882                           
  2883                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  2884  002C10  0E01               	movlw	1
  2885  002C12  EC0E  F020         	call	_lcdInst
  2886  002C16  0E68               	movlw	104
  2887  002C18  0100               	movlb	0	; () banked
  2888  002C1A  6FB1               	movwf	??_Loading& (0+255),b
  2889  002C1C  0EE4               	movlw	228
  2890  002C1E                     u6497:
  2891  002C1E  2EE8               	decfsz	wreg,f,c
  2892  002C20  D7FE               	bra	u6497
  2893  002C22  2FB1               	decfsz	??_Loading& (0+255),f,b
  2894  002C24  D7FC               	bra	u6497
  2895  002C26  F000               	nop	
  2896                           
  2897                           ;sort.c: 71: initSortTimer();
  2898  002C28  EC80  F018         	call	_initSortTimer	;wreg free
  2899                           
  2900                           ;sort.c: 76: sel = EEPROM_read(0);
  2901  002C2C  0E00               	movlw	0
  2902  002C2E  0100               	movlb	0	; () banked
  2903  002C30  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  2904  002C32  0E00               	movlw	0
  2905  002C34  6F80               	movwf	EEPROM_read@address& (0+255),b
  2906  002C36  ECD1  F01F         	call	_EEPROM_read	;wreg free
  2907  002C3A  0100               	movlb	0	; () banked
  2908  002C3C  6FFD               	movwf	_sel& (0+255),b
  2909                           
  2910                           ; BSR set to: 0
  2911                           ;sort.c: 77: unsigned short addr = 1 + 11 * sel;
  2912  002C3E  0100               	movlb	0	; () banked
  2913  002C40  51FD               	movf	_sel& (0+255),w,b
  2914  002C42  0D0B               	mullw	11
  2915  002C44  0E01               	movlw	1
  2916  002C46  24F3               	addwf	prodl,w,c
  2917  002C48  0100               	movlb	0	; () banked
  2918  002C4A  6FB3               	movwf	Loading@addr& (0+255),b
  2919  002C4C  0E00               	movlw	0
  2920  002C4E  20F4               	addwfc	prodh,w,c
  2921  002C50  0100               	movlb	0	; () banked
  2922  002C52  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  2923                           
  2924                           ; BSR set to: 0
  2925                           ;sort.c: 78: unsigned char byte1 = 0b01111111;
  2926  002C54  0E7F               	movlw	127
  2927  002C56  0100               	movlb	0	; () banked
  2928  002C58  6FB5               	movwf	Loading@byte1& (0+255),b
  2929                           
  2930                           ; BSR set to: 0
  2931                           ;sort.c: 79: EEPROM_write(addr, byte1);
  2932  002C5A  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  2933  002C5E  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  2934  002C62  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  2935  002C66  ECE6  F016         	call	_EEPROM_write	;wreg free
  2936                           
  2937                           ;sort.c: 82: LATAbits.LATA5 = 1;
  2938  002C6A  8A89               	bsf	3977,5,c	;volatile
  2939                           
  2940                           ;sort.c: 85: initServos();
  2941  002C6C  ECE9  F01B         	call	_initServos	;wreg free
  2942                           
  2943                           ;sort.c: 86: }
  2944  002C70  0012               	return	
  2945  002C72                     l6005:
  2946                           
  2947                           ;sort.c: 87: else{
  2948                           ;sort.c: 90: if(!f_loadingNewCan){
  2949  002C72  0100               	movlb	0	; () banked
  2950  002C74  51E0               	movf	_f_loadingNewCan& (0+255),w,b
  2951  002C76  0100               	movlb	0	; () banked
  2952  002C78  11E1               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2953  002C7A  A4D8               	btfss	status,2,c
  2954  002C7C  D017               	goto	l6021
  2955                           
  2956                           ; BSR set to: 0
  2957                           ;sort.c: 92: getIR();
  2958  002C7E  ECBD  F01C         	call	_getIR	;wreg free
  2959                           
  2960                           ;sort.c: 94: if(!f_loadingNewCan){
  2961  002C82  0100               	movlb	0	; () banked
  2962  002C84  51E0               	movf	_f_loadingNewCan& (0+255),w,b
  2963  002C86  0100               	movlb	0	; () banked
  2964  002C88  11E1               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2965  002C8A  B4D8               	btfsc	status,2,c
  2966  002C8C  0012               	return	
  2967                           
  2968                           ; BSR set to: 0
  2969                           ;sort.c: 98: else{
  2970                           ;sort.c: 99: count_total++;
  2971                           
  2972                           ; BSR set to: 0
  2973                           
  2974                           ; BSR set to: 0
  2975                           ;sort.c: 96: }
  2976                           
  2977                           ; BSR set to: 0
  2978                           ;sort.c: 95: return;
  2979  002C8E  0100               	movlb	0	; () banked
  2980  002C90  4BFE               	infsnz	_count_total& (0+255),f,b
  2981  002C92  2BFF               	incf	(_count_total+1)& (0+255),f,b
  2982                           
  2983                           ; BSR set to: 0
  2984                           ;sort.c: 100: if(count_total == 12){
  2985  002C94  0E0C               	movlw	12
  2986  002C96  0100               	movlb	0	; () banked
  2987  002C98  19FE               	xorwf	_count_total& (0+255),w,b
  2988  002C9A  0100               	movlb	0	; () banked
  2989  002C9C  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  2990  002C9E  A4D8               	btfss	status,2,c
  2991  002CA0  0012               	return	
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;sort.c: 101: f_lastCan = 1;
  2995  002CA2  0E00               	movlw	0
  2996  002CA4  6E74               	movwf	_f_lastCan+1,c
  2997  002CA6  0E01               	movlw	1
  2998  002CA8  6E73               	movwf	_f_lastCan,c
  2999                           
  3000                           ; BSR set to: 0
  3001                           ;sort.c: 102: }
  3002                           ;sort.c: 103: }
  3003                           ;sort.c: 104: }
  3004                           
  3005                           ; BSR set to: 0
  3006  002CAA  0012               	return	
  3007  002CAC                     l6021:
  3008                           
  3009                           ; BSR set to: 0
  3010                           ;sort.c: 107: else if(f_ID_receive){
  3011  002CAC  506D               	movf	_f_ID_receive,w,c
  3012  002CAE  106E               	iorwf	_f_ID_receive+1,w,c
  3013  002CB0  B4D8               	btfsc	status,2,c
  3014  002CB2  0012               	return	
  3015                           
  3016                           ; BSR set to: 0
  3017                           ;sort.c: 108: f_loadingNewCan = 0;
  3018  002CB4  0E00               	movlw	0
  3019  002CB6  0100               	movlb	0	; () banked
  3020  002CB8  6FE1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3021  002CBA  0E00               	movlw	0
  3022  002CBC  6FE0               	movwf	_f_loadingNewCan& (0+255),b
  3023                           
  3024                           ; BSR set to: 0
  3025                           ;sort.c: 109: LATAbits.LATA4 = 1;
  3026  002CBE  8889               	bsf	3977,4,c	;volatile
  3027                           
  3028                           ;sort.c: 110: f_can_coming_to_ID = 1;
  3029  002CC0  0E00               	movlw	0
  3030  002CC2  6E70               	movwf	_f_can_coming_to_ID+1,c
  3031  002CC4  0E01               	movlw	1
  3032  002CC6  6E6F               	movwf	_f_can_coming_to_ID,c
  3033                           
  3034                           ; BSR set to: 0
  3035                           ;sort.c: 111: _delay((unsigned long)((100)*(32000000/4000.0)));
  3036  002CC8  0E05               	movlw	5
  3037  002CCA  0100               	movlb	0	; () banked
  3038  002CCC  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3039  002CCE  0E0F               	movlw	15
  3040  002CD0  0100               	movlb	0	; () banked
  3041  002CD2  6FB1               	movwf	??_Loading& (0+255),b
  3042  002CD4  0EF1               	movlw	241
  3043  002CD6                     u6507:
  3044  002CD6  2EE8               	decfsz	wreg,f,c
  3045  002CD8  D7FE               	bra	u6507
  3046  002CDA  2FB1               	decfsz	??_Loading& (0+255),f,b
  3047  002CDC  D7FC               	bra	u6507
  3048  002CDE  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3049  002CE0  D7FA               	bra	u6507
  3050                           
  3051                           ;sort.c: 112: LATAbits.LATA4 = 0;
  3052  002CE2  9889               	bcf	3977,4,c	;volatile
  3053  002CE4  0012               	return	
  3054  002CE6                     __end_of_Loading:
  3055                           	opt stack 0
  3056                           tblptru	equ	0xFF8
  3057                           tblptrh	equ	0xFF7
  3058                           tblptrl	equ	0xFF6
  3059                           tablat	equ	0xFF5
  3060                           prodh	equ	0xFF4
  3061                           prodl	equ	0xFF3
  3062                           postinc0	equ	0xFEE
  3063                           wreg	equ	0xFE8
  3064                           postdec1	equ	0xFE5
  3065                           fsr1l	equ	0xFE1
  3066                           status	equ	0xFD8
  3067                           
  3068 ;; *************** function _initSortTimer *****************
  3069 ;; Defined at:
  3070 ;;		line 225 in file "sort.c"
  3071 ;; Parameters:    Size  Location     Type
  3072 ;;		None
  3073 ;; Auto vars:     Size  Location     Type
  3074 ;;  i               2    8[BANK0 ] int 
  3075 ;; Return value:  Size  Location     Type
  3076 ;;                  1    wreg      void 
  3077 ;; Registers used:
  3078 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3079 ;; Tracked objects:
  3080 ;;		On entry : 0/0
  3081 ;;		On exit  : 0/0
  3082 ;;		Unchanged: 0/0
  3083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3085 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3086 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3087 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3088 ;;Total ram usage:        5 bytes
  3089 ;; Hardware stack levels used:    1
  3090 ;; Hardware stack levels required when called:   10
  3091 ;; This function calls:
  3092 ;;		_getRTC
  3093 ;; This function is called by:
  3094 ;;		_Loading
  3095 ;; This function uses a non-reentrant model
  3096 ;;
  3097                           
  3098                           	psect	text4
  3099  003100                     __ptext4:
  3100                           	opt stack 0
  3101  003100                     _initSortTimer:
  3102                           	opt stack 18
  3103                           
  3104                           ;sort.c: 227: getRTC();
  3105                           
  3106                           ;incstack = 0
  3107  003100  ECBA  F019         	call	_getRTC	;wreg free
  3108                           
  3109                           ;sort.c: 228: for(int i = 0; i < 7; i++){
  3110  003104  0E00               	movlw	0
  3111  003106  0100               	movlb	0	; () banked
  3112  003108  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3113  00310A  0E00               	movlw	0
  3114  00310C  6F88               	movwf	initSortTimer@i& (0+255),b
  3115  00310E                     l5625:
  3116                           
  3117                           ; BSR set to: 0
  3118  00310E  0100               	movlb	0	; () banked
  3119  003110  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3120  003112  D008               	goto	l5629
  3121  003114  0100               	movlb	0	; () banked
  3122  003116  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3123  003118  E140               	bnz	l5635
  3124  00311A  0E07               	movlw	7
  3125  00311C  0100               	movlb	0	; () banked
  3126  00311E  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3127  003120  B0D8               	btfsc	status,0,c
  3128  003122  D03B               	goto	l5635
  3129  003124                     l5629:
  3130                           
  3131                           ; BSR set to: 0
  3132                           ;sort.c: 229: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3133  003124  0E24               	movlw	low _time
  3134  003126  0100               	movlb	0	; () banked
  3135  003128  2588               	addwf	initSortTimer@i& (0+255),w,b
  3136  00312A  6ED9               	movwf	fsr2l,c
  3137  00312C  0E01               	movlw	high _time
  3138  00312E  0100               	movlb	0	; () banked
  3139  003130  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3140  003132  6EDA               	movwf	fsr2h,c
  3141  003134  50DF               	movf	indf2,w,c
  3142  003136  0100               	movlb	0	; () banked
  3143  003138  6F85               	movwf	??_initSortTimer& (0+255),b
  3144  00313A  0100               	movlb	0	; () banked
  3145  00313C  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3146  00313E  0E0F               	movlw	15
  3147  003140  1785               	andwf	??_initSortTimer& (0+255),f,b
  3148  003142  0E0F               	movlw	15
  3149  003144  0100               	movlb	0	; () banked
  3150  003146  1785               	andwf	??_initSortTimer& (0+255),f,b
  3151  003148  0100               	movlb	0	; () banked
  3152  00314A  5185               	movf	??_initSortTimer& (0+255),w,b
  3153  00314C  0D0A               	mullw	10
  3154  00314E  0E24               	movlw	low _time
  3155  003150  0100               	movlb	0	; () banked
  3156  003152  2588               	addwf	initSortTimer@i& (0+255),w,b
  3157  003154  6ED9               	movwf	fsr2l,c
  3158  003156  0E01               	movlw	high _time
  3159  003158  0100               	movlb	0	; () banked
  3160  00315A  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3161  00315C  6EDA               	movwf	fsr2h,c
  3162  00315E  50DF               	movf	indf2,w,c
  3163  003160  0B0F               	andlw	15
  3164  003162  0100               	movlb	0	; () banked
  3165  003164  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3166  003166  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3167  003168  50F3               	movf	prodl,w,c
  3168  00316A  0100               	movlb	0	; () banked
  3169  00316C  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3170  00316E  50F4               	movf	prodh,w,c
  3171  003170  0100               	movlb	0	; () banked
  3172  003172  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3173  003174  90D8               	bcf	status,0,c
  3174  003176  0100               	movlb	0	; () banked
  3175  003178  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3176  00317A  6ED9               	movwf	fsr2l,c
  3177  00317C  0100               	movlb	0	; () banked
  3178  00317E  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3179  003180  6EDA               	movwf	fsr2h,c
  3180  003182  0E0E               	movlw	low _startTime
  3181  003184  26D9               	addwf	fsr2l,f,c
  3182  003186  0E01               	movlw	high _startTime
  3183  003188  22DA               	addwfc	fsr2h,f,c
  3184  00318A  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3185  00318E  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3186                           
  3187                           ; BSR set to: 0
  3188  003192  0100               	movlb	0	; () banked
  3189  003194  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3190  003196  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3191  003198  D7BA               	goto	l5625
  3192  00319A                     l5635:
  3193                           
  3194                           ; BSR set to: 0
  3195                           ;sort.c: 230: }
  3196                           ;sort.c: 232: T0CON = 0b00010111;
  3197  00319A  0E17               	movlw	23
  3198  00319C  6ED5               	movwf	4053,c	;volatile
  3199                           
  3200                           ;sort.c: 241: TMR0H = 0b10000101;
  3201  00319E  0E85               	movlw	133
  3202  0031A0  6ED7               	movwf	4055,c	;volatile
  3203                           
  3204                           ;sort.c: 242: TMR0L = 0b11101110;
  3205  0031A2  0EEE               	movlw	238
  3206  0031A4  6ED6               	movwf	4054,c	;volatile
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;sort.c: 243: TMR0ON = 1;
  3210  0031A6  8ED5               	bsf	4053,7,c	;volatile
  3211                           
  3212                           ; BSR set to: 0
  3213  0031A8  0012               	return		;funcret
  3214  0031AA                     __end_of_initSortTimer:
  3215                           	opt stack 0
  3216                           tblptru	equ	0xFF8
  3217                           tblptrh	equ	0xFF7
  3218                           tblptrl	equ	0xFF6
  3219                           tablat	equ	0xFF5
  3220                           prodh	equ	0xFF4
  3221                           prodl	equ	0xFF3
  3222                           postinc0	equ	0xFEE
  3223                           wreg	equ	0xFE8
  3224                           postdec1	equ	0xFE5
  3225                           fsr1l	equ	0xFE1
  3226                           indf2	equ	0xFDF
  3227                           postinc2	equ	0xFDE
  3228                           postdec2	equ	0xFDD
  3229                           fsr2h	equ	0xFDA
  3230                           fsr2l	equ	0xFD9
  3231                           status	equ	0xFD8
  3232                           
  3233 ;; *************** function _initServos *****************
  3234 ;; Defined at:
  3235 ;;		line 245 in file "sort.c"
  3236 ;; Parameters:    Size  Location     Type
  3237 ;;		None
  3238 ;; Auto vars:     Size  Location     Type
  3239 ;;		None
  3240 ;; Return value:  Size  Location     Type
  3241 ;;                  1    wreg      void 
  3242 ;; Registers used:
  3243 ;;		wreg, status,2, status,0, cstack
  3244 ;; Tracked objects:
  3245 ;;		On entry : 0/0
  3246 ;;		On exit  : 0/0
  3247 ;;		Unchanged: 0/0
  3248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3251 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3252 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3253 ;;Total ram usage:        1 bytes
  3254 ;; Hardware stack levels used:    1
  3255 ;; Hardware stack levels required when called:    8
  3256 ;; This function calls:
  3257 ;;		_updateServoPosition
  3258 ;; This function is called by:
  3259 ;;		_Loading
  3260 ;; This function uses a non-reentrant model
  3261 ;;
  3262                           
  3263                           	psect	text5
  3264  0037D2                     __ptext5:
  3265                           	opt stack 0
  3266  0037D2                     _initServos:
  3267                           	opt stack 20
  3268                           
  3269                           ;sort.c: 246: updateServoPosition(1500, 1);
  3270                           
  3271                           ; BSR set to: 0
  3272                           ;incstack = 0
  3273  0037D2  0E05               	movlw	5
  3274  0037D4  0100               	movlb	0	; () banked
  3275  0037D6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3276  0037D8  0EDC               	movlw	220
  3277  0037DA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3278  0037DC  0E00               	movlw	0
  3279  0037DE  0100               	movlb	0	; () banked
  3280  0037E0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3281  0037E2  0E01               	movlw	1
  3282  0037E4  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3283  0037E6  EC7B  F01A         	call	_updateServoPosition	;wreg free
  3284                           
  3285                           ;sort.c: 247: updateServoPosition(1000, 3);
  3286  0037EA  0E03               	movlw	3
  3287  0037EC  0100               	movlb	0	; () banked
  3288  0037EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3289  0037F0  0EE8               	movlw	232
  3290  0037F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3291  0037F4  0E00               	movlw	0
  3292  0037F6  0100               	movlb	0	; () banked
  3293  0037F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3294  0037FA  0E03               	movlw	3
  3295  0037FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3296  0037FE  EC7B  F01A         	call	_updateServoPosition	;wreg free
  3297                           
  3298                           ;sort.c: 248: TMR1ON = 1;
  3299  003802  80CD               	bsf	4045,0,c	;volatile
  3300                           
  3301                           ;sort.c: 249: was_low_1 = 0;
  3302  003804  0E00               	movlw	0
  3303  003806  6E7A               	movwf	_was_low_1+1,c	;volatile
  3304  003808  0E00               	movlw	0
  3305  00380A  6E79               	movwf	_was_low_1,c	;volatile
  3306                           
  3307                           ;sort.c: 250: _delay((unsigned long)((5)*(32000000/4000.0)));
  3308  00380C  0E34               	movlw	52
  3309  00380E  0100               	movlb	0	; () banked
  3310  003810  6F88               	movwf	??_initServos& (0+255),b
  3311  003812  0EF1               	movlw	241
  3312  003814                     u6517:
  3313  003814  2EE8               	decfsz	wreg,f,c
  3314  003816  D7FE               	bra	u6517
  3315  003818  2F88               	decfsz	??_initServos& (0+255),f,b
  3316  00381A  D7FC               	bra	u6517
  3317  00381C  D000               	nop2	
  3318                           
  3319                           ;sort.c: 251: TMR3ON = 1;
  3320  00381E  80B1               	bsf	4017,0,c	;volatile
  3321                           
  3322                           ;sort.c: 252: was_low_3 = 0;
  3323  003820  0E00               	movlw	0
  3324  003822  6E7C               	movwf	_was_low_3+1,c	;volatile
  3325  003824  0E00               	movlw	0
  3326  003826  6E7B               	movwf	_was_low_3,c	;volatile
  3327                           
  3328                           ;sort.c: 253: LATCbits.LATC0 = 0;
  3329  003828  908B               	bcf	3979,0,c	;volatile
  3330  00382A  0012               	return		;funcret
  3331  00382C                     __end_of_initServos:
  3332                           	opt stack 0
  3333                           tblptru	equ	0xFF8
  3334                           tblptrh	equ	0xFF7
  3335                           tblptrl	equ	0xFF6
  3336                           tablat	equ	0xFF5
  3337                           prodh	equ	0xFF4
  3338                           prodl	equ	0xFF3
  3339                           postinc0	equ	0xFEE
  3340                           wreg	equ	0xFE8
  3341                           postdec1	equ	0xFE5
  3342                           fsr1l	equ	0xFE1
  3343                           indf2	equ	0xFDF
  3344                           postinc2	equ	0xFDE
  3345                           postdec2	equ	0xFDD
  3346                           fsr2h	equ	0xFDA
  3347                           fsr2l	equ	0xFD9
  3348                           status	equ	0xFD8
  3349                           
  3350 ;; *************** function _initGlobalVars *****************
  3351 ;; Defined at:
  3352 ;;		line 206 in file "sort.c"
  3353 ;; Parameters:    Size  Location     Type
  3354 ;;		None
  3355 ;; Auto vars:     Size  Location     Type
  3356 ;;		None
  3357 ;; Return value:  Size  Location     Type
  3358 ;;                  1    wreg      void 
  3359 ;; Registers used:
  3360 ;;		wreg, status,2
  3361 ;; Tracked objects:
  3362 ;;		On entry : 0/0
  3363 ;;		On exit  : 0/0
  3364 ;;		Unchanged: 0/0
  3365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3369 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3370 ;;Total ram usage:        0 bytes
  3371 ;; Hardware stack levels used:    1
  3372 ;; Hardware stack levels required when called:    7
  3373 ;; This function calls:
  3374 ;;		Nothing
  3375 ;; This function is called by:
  3376 ;;		_Loading
  3377 ;; This function uses a non-reentrant model
  3378 ;;
  3379                           
  3380                           	psect	text6
  3381  0035DE                     __ptext6:
  3382                           	opt stack 0
  3383  0035DE                     _initGlobalVars:
  3384                           	opt stack 21
  3385                           
  3386                           ;sort.c: 208: first = 0;
  3387                           
  3388                           ;incstack = 0
  3389  0035DE  0E00               	movlw	0
  3390  0035E0  0100               	movlb	0	; () banked
  3391  0035E2  6FE3               	movwf	(_first+1)& (0+255),b
  3392  0035E4  0E00               	movlw	0
  3393  0035E6  6FE2               	movwf	_first& (0+255),b
  3394                           
  3395                           ;sort.c: 211: f_loadingNewCan = 0;
  3396  0035E8  0E00               	movlw	0
  3397  0035EA  0100               	movlb	0	; () banked
  3398  0035EC  6FE1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3399  0035EE  0E00               	movlw	0
  3400  0035F0  6FE0               	movwf	_f_loadingNewCan& (0+255),b
  3401                           
  3402                           ;sort.c: 212: f_lastCan = 0;
  3403  0035F2  0E00               	movlw	0
  3404  0035F4  6E74               	movwf	_f_lastCan+1,c
  3405  0035F6  0E00               	movlw	0
  3406  0035F8  6E73               	movwf	_f_lastCan,c
  3407                           
  3408                           ;sort.c: 213: f_ID_receive = 1;
  3409  0035FA  0E00               	movlw	0
  3410  0035FC  6E6E               	movwf	_f_ID_receive+1,c
  3411  0035FE  0E01               	movlw	1
  3412  003600  6E6D               	movwf	_f_ID_receive,c
  3413                           
  3414                           ;sort.c: 214: f_can_coming_to_ID = 0;
  3415  003602  0E00               	movlw	0
  3416  003604  6E70               	movwf	_f_can_coming_to_ID+1,c
  3417  003606  0E00               	movlw	0
  3418  003608  6E6F               	movwf	_f_can_coming_to_ID,c
  3419                           
  3420                           ;sort.c: 215: f_can_coming_to_distribution = 0;
  3421  00360A  0E00               	movlw	0
  3422  00360C  6E72               	movwf	_f_can_coming_to_distribution+1,c
  3423  00360E  0E00               	movlw	0
  3424  003610  6E71               	movwf	_f_can_coming_to_distribution,c
  3425                           
  3426                           ;sort.c: 216: f_can_distributed = 0;
  3427  003612  0E00               	movlw	0
  3428  003614  0101               	movlb	1	; () banked
  3429  003616  6F2C               	movwf	(_f_can_distributed+1)& (0+255),b
  3430  003618  0E00               	movlw	0
  3431  00361A  6F2B               	movwf	_f_can_distributed& (0+255),b
  3432                           
  3433                           ;sort.c: 219: count_total = 0;
  3434  00361C  0E00               	movlw	0
  3435  00361E  0100               	movlb	0	; () banked
  3436  003620  6FFF               	movwf	(_count_total+1)& (0+255),b
  3437  003622  0E00               	movlw	0
  3438  003624  6FFE               	movwf	_count_total& (0+255),b
  3439                           
  3440                           ;sort.c: 220: count_pop_no_tab = 0;
  3441  003626  0E00               	movlw	0
  3442  003628  6E62               	movwf	_count_pop_no_tab+1,c
  3443  00362A  0E00               	movlw	0
  3444  00362C  6E61               	movwf	_count_pop_no_tab,c
  3445                           
  3446                           ;sort.c: 221: count_pop_w_tab = 0;
  3447  00362E  0E00               	movlw	0
  3448  003630  6E64               	movwf	_count_pop_w_tab+1,c
  3449  003632  0E00               	movlw	0
  3450  003634  6E63               	movwf	_count_pop_w_tab,c
  3451                           
  3452                           ;sort.c: 222: count_can_w_lab = 0;
  3453  003636  0E00               	movlw	0
  3454  003638  6E60               	movwf	_count_can_w_lab+1,c
  3455  00363A  0E00               	movlw	0
  3456  00363C  6E5F               	movwf	_count_can_w_lab,c
  3457                           
  3458                           ;sort.c: 223: count_can_no_lab = 0;
  3459  00363E  0E00               	movlw	0
  3460  003640  6E5E               	movwf	_count_can_no_lab+1,c
  3461  003642  0E00               	movlw	0
  3462  003644  6E5D               	movwf	_count_can_no_lab,c
  3463                           
  3464                           ; BSR set to: 0
  3465  003646  0012               	return		;funcret
  3466  003648                     __end_of_initGlobalVars:
  3467                           	opt stack 0
  3468                           tblptru	equ	0xFF8
  3469                           tblptrh	equ	0xFF7
  3470                           tblptrl	equ	0xFF6
  3471                           tablat	equ	0xFF5
  3472                           prodh	equ	0xFF4
  3473                           prodl	equ	0xFF3
  3474                           postinc0	equ	0xFEE
  3475                           wreg	equ	0xFE8
  3476                           postdec1	equ	0xFE5
  3477                           fsr1l	equ	0xFE1
  3478                           indf2	equ	0xFDF
  3479                           postinc2	equ	0xFDE
  3480                           postdec2	equ	0xFDD
  3481                           fsr2h	equ	0xFDA
  3482                           fsr2l	equ	0xFD9
  3483                           status	equ	0xFD8
  3484                           
  3485 ;; *************** function _getIR *****************
  3486 ;; Defined at:
  3487 ;;		line 282 in file "sort.c"
  3488 ;; Parameters:    Size  Location     Type
  3489 ;;		None
  3490 ;; Auto vars:     Size  Location     Type
  3491 ;;		None
  3492 ;; Return value:  Size  Location     Type
  3493 ;;                  1    wreg      void 
  3494 ;; Registers used:
  3495 ;;		wreg, status,2, status,0, cstack
  3496 ;; Tracked objects:
  3497 ;;		On entry : 0/0
  3498 ;;		On exit  : 0/0
  3499 ;;		Unchanged: 0/0
  3500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3503 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3504 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3505 ;;Total ram usage:        2 bytes
  3506 ;; Hardware stack levels used:    1
  3507 ;; Hardware stack levels required when called:    9
  3508 ;; This function calls:
  3509 ;;		_readIR
  3510 ;; This function is called by:
  3511 ;;		_Loading
  3512 ;; This function uses a non-reentrant model
  3513 ;;
  3514                           
  3515                           	psect	text7
  3516  00397A                     __ptext7:
  3517                           	opt stack 0
  3518  00397A                     _getIR:
  3519                           	opt stack 19
  3520                           
  3521                           ;sort.c: 283: readIR();
  3522                           
  3523                           ; BSR set to: 0
  3524                           ;incstack = 0
  3525  00397A  EC0A  F01D         	call	_readIR	;wreg free
  3526                           
  3527                           ;sort.c: 284: if(IR_signal==1){
  3528  00397E  0100               	movlb	0	; () banked
  3529  003980  05DA               	decf	_IR_signal& (0+255),w,b
  3530  003982  0100               	movlb	0	; () banked
  3531  003984  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3532  003986  A4D8               	btfss	status,2,c
  3533  003988  0012               	return	
  3534                           
  3535                           ; BSR set to: 0
  3536                           ;sort.c: 285: _delay((unsigned long)((100)*(32000000/4000.0)));
  3537  00398A  0E05               	movlw	5
  3538  00398C  0100               	movlb	0	; () banked
  3539  00398E  6F87               	movwf	(??_getIR+1)& (0+255),b
  3540  003990  0E0F               	movlw	15
  3541  003992  0100               	movlb	0	; () banked
  3542  003994  6F86               	movwf	??_getIR& (0+255),b
  3543  003996  0EF1               	movlw	241
  3544  003998                     u6527:
  3545  003998  2EE8               	decfsz	wreg,f,c
  3546  00399A  D7FE               	bra	u6527
  3547  00399C  2F86               	decfsz	??_getIR& (0+255),f,b
  3548  00399E  D7FC               	bra	u6527
  3549  0039A0  2F87               	decfsz	(??_getIR+1)& (0+255),f,b
  3550  0039A2  D7FA               	bra	u6527
  3551                           
  3552                           ;sort.c: 286: if(IR_signal==1){
  3553  0039A4  0100               	movlb	0	; () banked
  3554  0039A6  05DA               	decf	_IR_signal& (0+255),w,b
  3555  0039A8  0100               	movlb	0	; () banked
  3556  0039AA  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3557  0039AC  A4D8               	btfss	status,2,c
  3558  0039AE  D006               	goto	l5715
  3559                           
  3560                           ; BSR set to: 0
  3561                           ;sort.c: 287: f_loadingNewCan = 1;
  3562  0039B0  0E00               	movlw	0
  3563  0039B2  0100               	movlb	0	; () banked
  3564  0039B4  6FE1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3565  0039B6  0E01               	movlw	1
  3566  0039B8  6FE0               	movwf	_f_loadingNewCan& (0+255),b
  3567                           
  3568                           ;sort.c: 288: }
  3569  0039BA  0012               	return	
  3570  0039BC                     l5715:
  3571                           
  3572                           ; BSR set to: 0
  3573                           ;sort.c: 289: else{
  3574                           ;sort.c: 290: f_loadingNewCan = 0;
  3575  0039BC  0E00               	movlw	0
  3576  0039BE  0100               	movlb	0	; () banked
  3577  0039C0  6FE1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3578  0039C2  0E00               	movlw	0
  3579  0039C4  6FE0               	movwf	_f_loadingNewCan& (0+255),b
  3580                           
  3581                           ; BSR set to: 0
  3582  0039C6  0012               	return	
  3583  0039C8                     __end_of_getIR:
  3584                           	opt stack 0
  3585                           tblptru	equ	0xFF8
  3586                           tblptrh	equ	0xFF7
  3587                           tblptrl	equ	0xFF6
  3588                           tablat	equ	0xFF5
  3589                           prodh	equ	0xFF4
  3590                           prodl	equ	0xFF3
  3591                           postinc0	equ	0xFEE
  3592                           wreg	equ	0xFE8
  3593                           postdec1	equ	0xFE5
  3594                           fsr1l	equ	0xFE1
  3595                           indf2	equ	0xFDF
  3596                           postinc2	equ	0xFDE
  3597                           postdec2	equ	0xFDD
  3598                           fsr2h	equ	0xFDA
  3599                           fsr2l	equ	0xFD9
  3600                           status	equ	0xFD8
  3601                           
  3602 ;; *************** function _ID *****************
  3603 ;; Defined at:
  3604 ;;		line 116 in file "sort.c"
  3605 ;; Parameters:    Size  Location     Type
  3606 ;;		None
  3607 ;; Auto vars:     Size  Location     Type
  3608 ;;  sensor_outpu    6    8[BANK0 ] int [3]
  3609 ;; Return value:  Size  Location     Type
  3610 ;;                  1    wreg      void 
  3611 ;; Registers used:
  3612 ;;		wreg, status,2, status,0, cstack
  3613 ;; Tracked objects:
  3614 ;;		On entry : 0/0
  3615 ;;		On exit  : 0/0
  3616 ;;		Unchanged: 0/0
  3617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3619 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3620 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3621 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3622 ;;Total ram usage:        8 bytes
  3623 ;; Hardware stack levels used:    1
  3624 ;; Hardware stack levels required when called:    9
  3625 ;; This function calls:
  3626 ;;		_readMAG
  3627 ;; This function is called by:
  3628 ;;		_sort
  3629 ;; This function uses a non-reentrant model
  3630 ;;
  3631                           
  3632                           	psect	text8
  3633  0029C6                     __ptext8:
  3634                           	opt stack 0
  3635  0029C6                     _ID:
  3636                           	opt stack 20
  3637                           
  3638                           ;sort.c: 117: if(f_can_coming_to_ID){
  3639                           
  3640                           ; BSR set to: 0
  3641                           ;incstack = 0
  3642  0029C6  506F               	movf	_f_can_coming_to_ID,w,c
  3643  0029C8  1070               	iorwf	_f_can_coming_to_ID+1,w,c
  3644  0029CA  B4D8               	btfsc	status,2,c
  3645  0029CC  0012               	return	
  3646                           
  3647                           ;sort.c: 119: _delay((unsigned long)((500)*(32000000/4000.0)));
  3648  0029CE  0E15               	movlw	21
  3649  0029D0  0100               	movlb	0	; () banked
  3650  0029D2  6F87               	movwf	(??_ID+1)& (0+255),b
  3651  0029D4  0E4B               	movlw	75
  3652  0029D6  0100               	movlb	0	; () banked
  3653  0029D8  6F86               	movwf	??_ID& (0+255),b
  3654  0029DA  0EBE               	movlw	190
  3655  0029DC                     u6537:
  3656  0029DC  2EE8               	decfsz	wreg,f,c
  3657  0029DE  D7FE               	bra	u6537
  3658  0029E0  2F86               	decfsz	??_ID& (0+255),f,b
  3659  0029E2  D7FC               	bra	u6537
  3660  0029E4  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3661  0029E6  D7FA               	bra	u6537
  3662  0029E8  F000               	nop	
  3663                           
  3664                           ;sort.c: 124: int sensor_outputs[3];
  3665                           ;sort.c: 128: sensor_outputs[0] = PORTAbits.RA2;
  3666  0029EA  A480               	btfss	3968,2,c	;volatile
  3667  0029EC  D004               	goto	u4560
  3668  0029EE  0100               	movlb	0	; () banked
  3669  0029F0  6B86               	clrf	??_ID& (0+255),b
  3670  0029F2  2B86               	incf	??_ID& (0+255),f,b
  3671  0029F4  D002               	goto	u4568
  3672  0029F6                     u4560:
  3673  0029F6  0100               	movlb	0	; () banked
  3674  0029F8  6B86               	clrf	??_ID& (0+255),b
  3675  0029FA                     u4568:
  3676  0029FA  0100               	movlb	0	; () banked
  3677  0029FC  5186               	movf	??_ID& (0+255),w,b
  3678  0029FE  0100               	movlb	0	; () banked
  3679  002A00  6F88               	movwf	ID@sensor_outputs& (0+255),b
  3680  002A02  6B89               	clrf	(ID@sensor_outputs+1)& (0+255),b
  3681                           
  3682                           ; BSR set to: 0
  3683                           ;sort.c: 130: if(!sensor_outputs[0]){
  3684  002A04  0100               	movlb	0	; () banked
  3685  002A06  5188               	movf	ID@sensor_outputs& (0+255),w,b
  3686  002A08  0100               	movlb	0	; () banked
  3687  002A0A  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  3688  002A0C  A4D8               	btfss	status,2,c
  3689  002A0E  D028               	goto	l6053
  3690                           
  3691                           ; BSR set to: 0
  3692                           ;sort.c: 131: readMAG();
  3693  002A10  ECE4  F01C         	call	_readMAG	;wreg free
  3694                           
  3695                           ;sort.c: 132: sensor_outputs[1] = MAG_signal;
  3696  002A14  C0DC  F08A         	movff	_MAG_signal,ID@sensor_outputs+2
  3697  002A18  C0DD  F08B         	movff	_MAG_signal+1,ID@sensor_outputs+3
  3698                           
  3699                           ;sort.c: 133: if(!sensor_outputs[1]){
  3700  002A1C  0100               	movlb	0	; () banked
  3701  002A1E  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  3702  002A20  0100               	movlb	0	; () banked
  3703  002A22  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  3704  002A24  A4D8               	btfss	status,2,c
  3705  002A26  D01C               	goto	l6053
  3706                           
  3707                           ; BSR set to: 0
  3708                           ;sort.c: 134: LATAbits.LATA3 = 1;
  3709  002A28  8689               	bsf	3977,3,c	;volatile
  3710                           
  3711                           ; BSR set to: 0
  3712                           ;sort.c: 136: _delay((unsigned long)((100)*(32000000/4000.0)));
  3713  002A2A  0E05               	movlw	5
  3714  002A2C  0100               	movlb	0	; () banked
  3715  002A2E  6F87               	movwf	(??_ID+1)& (0+255),b
  3716  002A30  0E0F               	movlw	15
  3717  002A32  0100               	movlb	0	; () banked
  3718  002A34  6F86               	movwf	??_ID& (0+255),b
  3719  002A36  0EF1               	movlw	241
  3720  002A38                     u6547:
  3721  002A38  2EE8               	decfsz	wreg,f,c
  3722  002A3A  D7FE               	bra	u6547
  3723  002A3C  2F86               	decfsz	??_ID& (0+255),f,b
  3724  002A3E  D7FC               	bra	u6547
  3725  002A40  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3726  002A42  D7FA               	bra	u6547
  3727                           
  3728                           ;sort.c: 137: sensor_outputs[2] = PORTAbits.RA2;
  3729  002A44  A480               	btfss	3968,2,c	;volatile
  3730  002A46  D004               	goto	u4590
  3731  002A48  0100               	movlb	0	; () banked
  3732  002A4A  6B86               	clrf	??_ID& (0+255),b
  3733  002A4C  2B86               	incf	??_ID& (0+255),f,b
  3734  002A4E  D002               	goto	u4598
  3735  002A50                     u4590:
  3736  002A50  0100               	movlb	0	; () banked
  3737  002A52  6B86               	clrf	??_ID& (0+255),b
  3738  002A54                     u4598:
  3739  002A54  0100               	movlb	0	; () banked
  3740  002A56  5186               	movf	??_ID& (0+255),w,b
  3741  002A58  0100               	movlb	0	; () banked
  3742  002A5A  6F8C               	movwf	(ID@sensor_outputs+4)& (0+255),b
  3743  002A5C  6B8D               	clrf	(ID@sensor_outputs+5)& (0+255),b
  3744                           
  3745                           ; BSR set to: 0
  3746                           ;sort.c: 138: LATAbits.LATA3 = 0;
  3747  002A5E  9689               	bcf	3977,3,c	;volatile
  3748  002A60                     l6053:
  3749                           
  3750                           ; BSR set to: 0
  3751                           ;sort.c: 139: }
  3752                           ;sort.c: 140: }
  3753                           ;sort.c: 143: if(!sensor_outputs[0]){
  3754  002A60  0100               	movlb	0	; () banked
  3755  002A62  5188               	movf	ID@sensor_outputs& (0+255),w,b
  3756  002A64  0100               	movlb	0	; () banked
  3757  002A66  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  3758  002A68  A4D8               	btfss	status,2,c
  3759  002A6A  D01E               	goto	l6071
  3760                           
  3761                           ; BSR set to: 0
  3762                           ;sort.c: 144: if(!sensor_outputs[1]){
  3763  002A6C  0100               	movlb	0	; () banked
  3764  002A6E  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  3765  002A70  0100               	movlb	0	; () banked
  3766  002A72  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  3767  002A74  A4D8               	btfss	status,2,c
  3768  002A76  D012               	goto	l6067
  3769                           
  3770                           ; BSR set to: 0
  3771                           ;sort.c: 145: if(!sensor_outputs[2]){
  3772  002A78  0100               	movlb	0	; () banked
  3773  002A7A  518C               	movf	(ID@sensor_outputs+4)& (0+255),w,b
  3774  002A7C  0100               	movlb	0	; () banked
  3775  002A7E  118D               	iorwf	(ID@sensor_outputs+5)& (0+255),w,b
  3776  002A80  A4D8               	btfss	status,2,c
  3777  002A82  D006               	goto	l6063
  3778                           
  3779                           ; BSR set to: 0
  3780                           ;sort.c: 146: count_pop_no_tab++;
  3781  002A84  4A61               	infsnz	_count_pop_no_tab,f,c
  3782  002A86  2A62               	incf	_count_pop_no_tab+1,f,c
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;sort.c: 147: cur_can = 0;
  3786  002A88  0E00               	movlw	0
  3787  002A8A  6E66               	movwf	_cur_can+1,c
  3788  002A8C  0E00               	movlw	0
  3789  002A8E  D011               	goto	L3
  3790  002A90                     l6063:
  3791                           
  3792                           ; BSR set to: 0
  3793                           ;sort.c: 149: else{
  3794                           ;sort.c: 150: count_pop_w_tab++;
  3795  002A90  4A63               	infsnz	_count_pop_w_tab,f,c
  3796  002A92  2A64               	incf	_count_pop_w_tab+1,f,c
  3797                           
  3798                           ; BSR set to: 0
  3799                           ;sort.c: 151: cur_can = 1;
  3800  002A94  0E00               	movlw	0
  3801  002A96  6E66               	movwf	_cur_can+1,c
  3802  002A98  0E01               	movlw	1
  3803  002A9A  D00B               	goto	L3
  3804  002A9C                     l6067:
  3805                           
  3806                           ; BSR set to: 0
  3807                           ;sort.c: 154: else{
  3808                           ;sort.c: 155: count_can_w_lab++;
  3809  002A9C  4A5F               	infsnz	_count_can_w_lab,f,c
  3810  002A9E  2A60               	incf	_count_can_w_lab+1,f,c
  3811                           
  3812                           ; BSR set to: 0
  3813                           ;sort.c: 156: cur_can = 2;
  3814  002AA0  0E00               	movlw	0
  3815  002AA2  6E66               	movwf	_cur_can+1,c
  3816  002AA4  0E02               	movlw	2
  3817  002AA6  D005               	goto	L3
  3818  002AA8                     l6071:
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;sort.c: 159: else{
  3822                           ;sort.c: 160: count_can_no_lab++;
  3823  002AA8  4A5D               	infsnz	_count_can_no_lab,f,c
  3824  002AAA  2A5E               	incf	_count_can_no_lab+1,f,c
  3825                           
  3826                           ; BSR set to: 0
  3827                           ;sort.c: 161: cur_can = 3;
  3828  002AAC  0E00               	movlw	0
  3829  002AAE  6E66               	movwf	_cur_can+1,c
  3830  002AB0  0E03               	movlw	3
  3831  002AB2                     L3:
  3832  002AB2  6E65               	movwf	_cur_can,c
  3833                           
  3834                           ; BSR set to: 0
  3835                           ;sort.c: 162: }
  3836                           ;sort.c: 164: LATCbits.LATC0 = 1;
  3837                           
  3838                           ; BSR set to: 0
  3839  002AB4  808B               	bsf	3979,0,c	;volatile
  3840                           
  3841                           ; BSR set to: 0
  3842                           ;sort.c: 165: f_can_coming_to_distribution = 1;
  3843  002AB6  0E00               	movlw	0
  3844  002AB8  6E72               	movwf	_f_can_coming_to_distribution+1,c
  3845  002ABA  0E01               	movlw	1
  3846  002ABC  6E71               	movwf	_f_can_coming_to_distribution,c
  3847                           
  3848                           ; BSR set to: 0
  3849                           ;sort.c: 166: _delay((unsigned long)((500)*(32000000/4000.0)));
  3850  002ABE  0E15               	movlw	21
  3851  002AC0  0100               	movlb	0	; () banked
  3852  002AC2  6F87               	movwf	(??_ID+1)& (0+255),b
  3853  002AC4  0E4B               	movlw	75
  3854  002AC6  0100               	movlb	0	; () banked
  3855  002AC8  6F86               	movwf	??_ID& (0+255),b
  3856  002ACA  0EBE               	movlw	190
  3857  002ACC                     u6557:
  3858  002ACC  2EE8               	decfsz	wreg,f,c
  3859  002ACE  D7FE               	bra	u6557
  3860  002AD0  2F86               	decfsz	??_ID& (0+255),f,b
  3861  002AD2  D7FC               	bra	u6557
  3862  002AD4  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3863  002AD6  D7FA               	bra	u6557
  3864  002AD8  F000               	nop	
  3865                           
  3866                           ;sort.c: 167: LATCbits.LATC0 = 0;
  3867  002ADA  908B               	bcf	3979,0,c	;volatile
  3868                           
  3869                           ;sort.c: 169: f_can_coming_to_ID = 0;
  3870  002ADC  0E00               	movlw	0
  3871  002ADE  6E70               	movwf	_f_can_coming_to_ID+1,c
  3872  002AE0  0E00               	movlw	0
  3873  002AE2  6E6F               	movwf	_f_can_coming_to_ID,c
  3874  002AE4  0012               	return	
  3875  002AE6                     __end_of_ID:
  3876                           	opt stack 0
  3877                           tblptru	equ	0xFF8
  3878                           tblptrh	equ	0xFF7
  3879                           tblptrl	equ	0xFF6
  3880                           tablat	equ	0xFF5
  3881                           prodh	equ	0xFF4
  3882                           prodl	equ	0xFF3
  3883                           postinc0	equ	0xFEE
  3884                           wreg	equ	0xFE8
  3885                           postdec1	equ	0xFE5
  3886                           fsr1l	equ	0xFE1
  3887                           indf2	equ	0xFDF
  3888                           postinc2	equ	0xFDE
  3889                           postdec2	equ	0xFDD
  3890                           fsr2h	equ	0xFDA
  3891                           fsr2l	equ	0xFD9
  3892                           status	equ	0xFD8
  3893                           
  3894 ;; *************** function _Distribution *****************
  3895 ;; Defined at:
  3896 ;;		line 172 in file "sort.c"
  3897 ;; Parameters:    Size  Location     Type
  3898 ;;		None
  3899 ;; Auto vars:     Size  Location     Type
  3900 ;;		None
  3901 ;; Return value:  Size  Location     Type
  3902 ;;                  1    wreg      void 
  3903 ;; Registers used:
  3904 ;;		wreg, status,2, status,0, cstack
  3905 ;; Tracked objects:
  3906 ;;		On entry : 0/0
  3907 ;;		On exit  : 0/0
  3908 ;;		Unchanged: 0/0
  3909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3912 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3913 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3914 ;;Total ram usage:        2 bytes
  3915 ;; Hardware stack levels used:    1
  3916 ;; Hardware stack levels required when called:    8
  3917 ;; This function calls:
  3918 ;;		_updateServoPosition
  3919 ;; This function is called by:
  3920 ;;		_sort
  3921 ;; This function uses a non-reentrant model
  3922 ;;
  3923                           
  3924                           	psect	text9
  3925  002892                     __ptext9:
  3926                           	opt stack 0
  3927  002892                     _Distribution:
  3928                           	opt stack 21
  3929                           
  3930                           ;sort.c: 173: if(f_can_coming_to_distribution){
  3931                           
  3932                           ;incstack = 0
  3933  002892  5071               	movf	_f_can_coming_to_distribution,w,c
  3934  002894  1072               	iorwf	_f_can_coming_to_distribution+1,w,c
  3935  002896  B4D8               	btfsc	status,2,c
  3936  002898  0012               	return	
  3937  00289A  D034               	goto	l6099
  3938  00289C                     l6089:
  3939                           
  3940                           ;sort.c: 178: updateServoPosition(1000, 1);
  3941  00289C  0E03               	movlw	3
  3942  00289E  0100               	movlb	0	; () banked
  3943  0028A0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3944  0028A2  0EE8               	movlw	232
  3945  0028A4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3946  0028A6  0E00               	movlw	0
  3947  0028A8  0100               	movlb	0	; () banked
  3948  0028AA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3949  0028AC  0E01               	movlw	1
  3950  0028AE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3951  0028B0  EC7B  F01A         	call	_updateServoPosition	;wreg free
  3952                           
  3953                           ;sort.c: 179: break;
  3954  0028B4  D03E               	goto	l6101
  3955  0028B6                     l6091:
  3956                           
  3957                           ;sort.c: 181: updateServoPosition(1333, 1);
  3958  0028B6  0E05               	movlw	5
  3959  0028B8  0100               	movlb	0	; () banked
  3960  0028BA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3961  0028BC  0E35               	movlw	53
  3962  0028BE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3963  0028C0  0E00               	movlw	0
  3964  0028C2  0100               	movlb	0	; () banked
  3965  0028C4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3966  0028C6  0E01               	movlw	1
  3967  0028C8  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3968  0028CA  EC7B  F01A         	call	_updateServoPosition	;wreg free
  3969                           
  3970                           ;sort.c: 182: break;
  3971  0028CE  D031               	goto	l6101
  3972  0028D0                     l6093:
  3973                           
  3974                           ;sort.c: 184: updateServoPosition(1666, 1);
  3975  0028D0  0E06               	movlw	6
  3976  0028D2  0100               	movlb	0	; () banked
  3977  0028D4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3978  0028D6  0E82               	movlw	130
  3979  0028D8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3980  0028DA  0E00               	movlw	0
  3981  0028DC  0100               	movlb	0	; () banked
  3982  0028DE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3983  0028E0  0E01               	movlw	1
  3984  0028E2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3985  0028E4  EC7B  F01A         	call	_updateServoPosition	;wreg free
  3986                           
  3987                           ;sort.c: 185: break;
  3988  0028E8  D024               	goto	l6101
  3989  0028EA                     l6095:
  3990                           
  3991                           ;sort.c: 187: updateServoPosition(2000, 1);
  3992  0028EA  0E07               	movlw	7
  3993  0028EC  0100               	movlb	0	; () banked
  3994  0028EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3995  0028F0  0ED0               	movlw	208
  3996  0028F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3997  0028F4  0E00               	movlw	0
  3998  0028F6  0100               	movlb	0	; () banked
  3999  0028F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4000  0028FA  0E01               	movlw	1
  4001  0028FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4002  0028FE  EC7B  F01A         	call	_updateServoPosition	;wreg free
  4003                           
  4004                           ;sort.c: 191: }
  4005                           
  4006                           ;sort.c: 190: break;
  4007                           
  4008                           ;sort.c: 189: default:
  4009                           
  4010                           ;sort.c: 188: break;
  4011  002902  D017               	goto	l6101
  4012  002904                     l6099:
  4013  002904  C065  F088         	movff	_cur_can,??_Distribution
  4014  002908  C066  F089         	movff	_cur_can+1,??_Distribution+1
  4015                           
  4016                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4017                           ; Switch size 1, requested type "space"
  4018                           ; Number of cases is 1, Range of values is 0 to 0
  4019                           ; switch strategies available:
  4020                           ; Name         Instructions Cycles
  4021                           ; simple_byte            4     3 (average)
  4022                           ;	Chosen strategy is simple_byte
  4023  00290C  0100               	movlb	0	; () banked
  4024  00290E  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4025  002910  0A00               	xorlw	0	; case 0
  4026  002912  A4D8               	btfss	status,2,c
  4027  002914  D00E               	goto	l6101
  4028                           
  4029                           ; BSR set to: 0
  4030                           ; Switch size 1, requested type "space"
  4031                           ; Number of cases is 4, Range of values is 0 to 3
  4032                           ; switch strategies available:
  4033                           ; Name         Instructions Cycles
  4034                           ; simple_byte           13     7 (average)
  4035                           ;	Chosen strategy is simple_byte
  4036  002916  0100               	movlb	0	; () banked
  4037  002918  5188               	movf	??_Distribution& (0+255),w,b
  4038  00291A  0A00               	xorlw	0	; case 0
  4039  00291C  B4D8               	btfsc	status,2,c
  4040  00291E  D7BE               	goto	l6089
  4041  002920  0A01               	xorlw	1	; case 1
  4042  002922  B4D8               	btfsc	status,2,c
  4043  002924  D7C8               	goto	l6091
  4044  002926  0A03               	xorlw	3	; case 2
  4045  002928  B4D8               	btfsc	status,2,c
  4046  00292A  D7D2               	goto	l6093
  4047  00292C  0A01               	xorlw	1	; case 3
  4048  00292E  B4D8               	btfsc	status,2,c
  4049  002930  D7DC               	goto	l6095
  4050  002932                     l6101:
  4051                           
  4052                           ;sort.c: 192: _delay((unsigned long)((500)*(32000000/4000.0)));
  4053  002932  0E15               	movlw	21
  4054  002934  0100               	movlb	0	; () banked
  4055  002936  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4056  002938  0E4B               	movlw	75
  4057  00293A  0100               	movlb	0	; () banked
  4058  00293C  6F88               	movwf	??_Distribution& (0+255),b
  4059  00293E  0EBE               	movlw	190
  4060  002940                     u6567:
  4061  002940  2EE8               	decfsz	wreg,f,c
  4062  002942  D7FE               	bra	u6567
  4063  002944  2F88               	decfsz	??_Distribution& (0+255),f,b
  4064  002946  D7FC               	bra	u6567
  4065  002948  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4066  00294A  D7FA               	bra	u6567
  4067  00294C  F000               	nop	
  4068                           
  4069                           ;sort.c: 195: updateServoPosition(1500, 3);
  4070  00294E  0E05               	movlw	5
  4071  002950  0100               	movlb	0	; () banked
  4072  002952  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4073  002954  0EDC               	movlw	220
  4074  002956  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4075  002958  0E00               	movlw	0
  4076  00295A  0100               	movlb	0	; () banked
  4077  00295C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4078  00295E  0E03               	movlw	3
  4079  002960  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4080  002962  EC7B  F01A         	call	_updateServoPosition	;wreg free
  4081                           
  4082                           ;sort.c: 196: _delay((unsigned long)((500)*(32000000/4000.0)));
  4083  002966  0E15               	movlw	21
  4084  002968  0100               	movlb	0	; () banked
  4085  00296A  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4086  00296C  0E4B               	movlw	75
  4087  00296E  0100               	movlb	0	; () banked
  4088  002970  6F88               	movwf	??_Distribution& (0+255),b
  4089  002972  0EBE               	movlw	190
  4090  002974                     u6577:
  4091  002974  2EE8               	decfsz	wreg,f,c
  4092  002976  D7FE               	bra	u6577
  4093  002978  2F88               	decfsz	??_Distribution& (0+255),f,b
  4094  00297A  D7FC               	bra	u6577
  4095  00297C  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4096  00297E  D7FA               	bra	u6577
  4097  002980  F000               	nop	
  4098                           
  4099                           ;sort.c: 199: updateServoPosition(1500, 1);
  4100  002982  0E05               	movlw	5
  4101  002984  0100               	movlb	0	; () banked
  4102  002986  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4103  002988  0EDC               	movlw	220
  4104  00298A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4105  00298C  0E00               	movlw	0
  4106  00298E  0100               	movlb	0	; () banked
  4107  002990  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4108  002992  0E01               	movlw	1
  4109  002994  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4110  002996  EC7B  F01A         	call	_updateServoPosition	;wreg free
  4111                           
  4112                           ;sort.c: 200: updateServoPosition(1000, 3);
  4113  00299A  0E03               	movlw	3
  4114  00299C  0100               	movlb	0	; () banked
  4115  00299E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4116  0029A0  0EE8               	movlw	232
  4117  0029A2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4118  0029A4  0E00               	movlw	0
  4119  0029A6  0100               	movlb	0	; () banked
  4120  0029A8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4121  0029AA  0E03               	movlw	3
  4122  0029AC  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4123  0029AE  EC7B  F01A         	call	_updateServoPosition	;wreg free
  4124                           
  4125                           ;sort.c: 201: f_can_coming_to_distribution = 0;
  4126  0029B2  0E00               	movlw	0
  4127  0029B4  6E72               	movwf	_f_can_coming_to_distribution+1,c
  4128  0029B6  0E00               	movlw	0
  4129  0029B8  6E71               	movwf	_f_can_coming_to_distribution,c
  4130                           
  4131                           ;sort.c: 202: f_can_distributed = 1;
  4132  0029BA  0E00               	movlw	0
  4133  0029BC  0101               	movlb	1	; () banked
  4134  0029BE  6F2C               	movwf	(_f_can_distributed+1)& (0+255),b
  4135  0029C0  0E01               	movlw	1
  4136  0029C2  6F2B               	movwf	_f_can_distributed& (0+255),b
  4137  0029C4  0012               	return	
  4138  0029C6                     __end_of_Distribution:
  4139                           	opt stack 0
  4140                           tblptru	equ	0xFF8
  4141                           tblptrh	equ	0xFF7
  4142                           tblptrl	equ	0xFF6
  4143                           tablat	equ	0xFF5
  4144                           prodh	equ	0xFF4
  4145                           prodl	equ	0xFF3
  4146                           postinc0	equ	0xFEE
  4147                           wreg	equ	0xFE8
  4148                           postdec1	equ	0xFE5
  4149                           fsr1l	equ	0xFE1
  4150                           indf2	equ	0xFDF
  4151                           postinc2	equ	0xFDE
  4152                           postdec2	equ	0xFDD
  4153                           fsr2h	equ	0xFDA
  4154                           fsr2l	equ	0xFD9
  4155                           status	equ	0xFD8
  4156                           
  4157 ;; *************** function _machineConfig *****************
  4158 ;; Defined at:
  4159 ;;		line 15 in file "MachineConfig.c"
  4160 ;; Parameters:    Size  Location     Type
  4161 ;;		None
  4162 ;; Auto vars:     Size  Location     Type
  4163 ;;		None
  4164 ;; Return value:  Size  Location     Type
  4165 ;;                  1    wreg      void 
  4166 ;; Registers used:
  4167 ;;		wreg, status,2
  4168 ;; Tracked objects:
  4169 ;;		On entry : 0/0
  4170 ;;		On exit  : 0/0
  4171 ;;		Unchanged: 0/0
  4172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4176 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4177 ;;Total ram usage:        0 bytes
  4178 ;; Hardware stack levels used:    1
  4179 ;; Hardware stack levels required when called:    7
  4180 ;; This function calls:
  4181 ;;		Nothing
  4182 ;; This function is called by:
  4183 ;;		_main
  4184 ;; This function uses a non-reentrant model
  4185 ;;
  4186                           
  4187                           	psect	text10
  4188  00382C                     __ptext10:
  4189                           	opt stack 0
  4190  00382C                     _machineConfig:
  4191                           	opt stack 23
  4192                           
  4193                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  4194                           
  4195                           ;incstack = 0
  4196  00382C  0EF0               	movlw	240
  4197  00382E  6ED3               	movwf	4051,c	;volatile
  4198                           
  4199                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  4200  003830  8C9B               	bsf	3995,6,c	;volatile
  4201                           
  4202                           ;MachineConfig.c: 22: TRISA = 0b01000111;
  4203  003832  0E47               	movlw	71
  4204  003834  6E92               	movwf	3986,c	;volatile
  4205                           
  4206                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  4207  003836  0EF2               	movlw	242
  4208  003838  6E93               	movwf	3987,c	;volatile
  4209                           
  4210                           ;MachineConfig.c: 27: TRISC = 0x00;
  4211  00383A  0E00               	movlw	0
  4212  00383C  6E94               	movwf	3988,c	;volatile
  4213                           
  4214                           ;MachineConfig.c: 31: TRISD = 0x00;
  4215  00383E  0E00               	movlw	0
  4216  003840  6E95               	movwf	3989,c	;volatile
  4217                           
  4218                           ;MachineConfig.c: 34: TRISE = 0x00;
  4219  003842  0E00               	movlw	0
  4220  003844  6E96               	movwf	3990,c	;volatile
  4221                           
  4222                           ;MachineConfig.c: 37: LATA = 0x00;
  4223  003846  0E00               	movlw	0
  4224  003848  6E89               	movwf	3977,c	;volatile
  4225                           
  4226                           ;MachineConfig.c: 38: LATB = 0x00;
  4227  00384A  0E00               	movlw	0
  4228  00384C  6E8A               	movwf	3978,c	;volatile
  4229                           
  4230                           ;MachineConfig.c: 39: LATC = 0x00;
  4231  00384E  0E00               	movlw	0
  4232  003850  6E8B               	movwf	3979,c	;volatile
  4233                           
  4234                           ;MachineConfig.c: 40: LATD = 0x00;
  4235  003852  0E00               	movlw	0
  4236  003854  6E8C               	movwf	3980,c	;volatile
  4237                           
  4238                           ;MachineConfig.c: 41: LATE = 0x00;
  4239  003856  0E00               	movlw	0
  4240  003858  6E8D               	movwf	3981,c	;volatile
  4241                           
  4242                           ;MachineConfig.c: 43: nRBPU = 0;
  4243  00385A  9EF1               	bcf	intcon2,7,c	;volatile
  4244                           
  4245                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  4246  00385C  0E00               	movlw	0
  4247  00385E  6EC2               	movwf	4034,c	;volatile
  4248                           
  4249                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  4250  003860  0E0D               	movlw	13
  4251  003862  6EC1               	movwf	4033,c	;volatile
  4252                           
  4253                           ;MachineConfig.c: 50: CVRCON = 0x00;
  4254  003864  0E00               	movlw	0
  4255  003866  6EB5               	movwf	4021,c	;volatile
  4256                           
  4257                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  4258  003868  96B4               	bcf	4020,3,c	;volatile
  4259                           
  4260                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  4261  00386A  0EB1               	movlw	177
  4262  00386C  6EC0               	movwf	4032,c	;volatile
  4263                           
  4264                           ;MachineConfig.c: 55: INT1IE = 1;
  4265  00386E  86F0               	bsf	intcon3,3,c	;volatile
  4266                           
  4267                           ;MachineConfig.c: 57: TMR0IE = 1;
  4268  003870  8AF2               	bsf	intcon,5,c	;volatile
  4269                           
  4270                           ;MachineConfig.c: 58: TMR1IE = 1;
  4271  003872  809D               	bsf	3997,0,c	;volatile
  4272                           
  4273                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  4274  003874  0EB0               	movlw	176
  4275  003876  6ECD               	movwf	4045,c	;volatile
  4276                           
  4277                           ;MachineConfig.c: 60: TMR2IE = 1;
  4278  003878  829D               	bsf	3997,1,c	;volatile
  4279                           
  4280                           ;MachineConfig.c: 61: TMR3IE = 1;
  4281  00387A  82A0               	bsf	4000,1,c	;volatile
  4282                           
  4283                           ;MachineConfig.c: 62: PEIE = 1;
  4284  00387C  8CF2               	bsf	intcon,6,c	;volatile
  4285                           
  4286                           ;MachineConfig.c: 63: ADIE = 0;
  4287  00387E  9C9D               	bcf	3997,6,c	;volatile
  4288                           
  4289                           ;MachineConfig.c: 64: (INTCONbits.GIE = 0);
  4290  003880  9EF2               	bcf	intcon,7,c	;volatile
  4291  003882  0012               	return		;funcret
  4292  003884                     __end_of_machineConfig:
  4293                           	opt stack 0
  4294                           tblptru	equ	0xFF8
  4295                           tblptrh	equ	0xFF7
  4296                           tblptrl	equ	0xFF6
  4297                           tablat	equ	0xFF5
  4298                           prodh	equ	0xFF4
  4299                           prodl	equ	0xFF3
  4300                           intcon	equ	0xFF2
  4301                           intcon2	equ	0xFF1
  4302                           intcon3	equ	0xFF0
  4303                           postinc0	equ	0xFEE
  4304                           wreg	equ	0xFE8
  4305                           postdec1	equ	0xFE5
  4306                           fsr1l	equ	0xFE1
  4307                           indf2	equ	0xFDF
  4308                           postinc2	equ	0xFDE
  4309                           postdec2	equ	0xFDD
  4310                           fsr2h	equ	0xFDA
  4311                           fsr2l	equ	0xFD9
  4312                           status	equ	0xFD8
  4313                           
  4314 ;; *************** function _logRun *****************
  4315 ;; Defined at:
  4316 ;;		line 84 in file "EEPROM.c"
  4317 ;; Parameters:    Size  Location     Type
  4318 ;;		None
  4319 ;; Auto vars:     Size  Location     Type
  4320 ;;  byte_i          1   53[BANK0 ] unsigned char 
  4321 ;;  i               2   55[BANK0 ] int 
  4322 ;;  num             1   49[BANK0 ] unsigned char 
  4323 ;;  addr            2   57[BANK0 ] unsigned short 
  4324 ;;  byte11          1   54[BANK0 ] unsigned char 
  4325 ;;  byte3           1   52[BANK0 ] unsigned char 
  4326 ;;  byte2           1   51[BANK0 ] unsigned char 
  4327 ;;  byte1           1   50[BANK0 ] unsigned char 
  4328 ;; Return value:  Size  Location     Type
  4329 ;;                  1    wreg      void 
  4330 ;; Registers used:
  4331 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4332 ;; Tracked objects:
  4333 ;;		On entry : 0/0
  4334 ;;		On exit  : 0/0
  4335 ;;		Unchanged: 0/0
  4336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4338 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4340 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4341 ;;Total ram usage:       10 bytes
  4342 ;; Hardware stack levels used:    1
  4343 ;; Hardware stack levels required when called:   11
  4344 ;; This function calls:
  4345 ;;		_EEPROM_read
  4346 ;;		_EEPROM_write
  4347 ;; This function is called by:
  4348 ;;		_main
  4349 ;; This function uses a non-reentrant model
  4350 ;;
  4351                           
  4352                           	psect	text11
  4353  002756                     __ptext11:
  4354                           	opt stack 0
  4355  002756                     _logRun:
  4356                           	opt stack 19
  4357                           
  4358                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  4359                           
  4360                           ;incstack = 0
  4361  002756  0E00               	movlw	0
  4362  002758  0100               	movlb	0	; () banked
  4363  00275A  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4364  00275C  0E00               	movlw	0
  4365  00275E  6F80               	movwf	EEPROM_read@address& (0+255),b
  4366  002760  ECD1  F01F         	call	_EEPROM_read	;wreg free
  4367  002764  0100               	movlb	0	; () banked
  4368  002766  6FFD               	movwf	_sel& (0+255),b
  4369                           
  4370                           ; BSR set to: 0
  4371                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  4372  002768  0100               	movlb	0	; () banked
  4373  00276A  51FD               	movf	_sel& (0+255),w,b
  4374  00276C  0D0B               	mullw	11
  4375  00276E  0E01               	movlw	1
  4376  002770  24F3               	addwf	prodl,w,c
  4377  002772  0100               	movlb	0	; () banked
  4378  002774  6FB9               	movwf	logRun@addr& (0+255),b
  4379  002776  0E00               	movlw	0
  4380  002778  20F4               	addwfc	prodh,w,c
  4381  00277A  0100               	movlb	0	; () banked
  4382  00277C  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  4383                           
  4384                           ; BSR set to: 0
  4385                           ;EEPROM.c: 101: if (sel < 3){
  4386  00277E  0E03               	movlw	3
  4387  002780  0100               	movlb	0	; () banked
  4388  002782  61FD               	cpfslt	_sel& (0+255),b
  4389  002784  D00E               	goto	l7335
  4390                           
  4391                           ; BSR set to: 0
  4392                           ;EEPROM.c: 102: unsigned char num = sel+1;
  4393  002786  0100               	movlb	0	; () banked
  4394  002788  29FD               	incf	_sel& (0+255),w,b
  4395  00278A  0100               	movlb	0	; () banked
  4396  00278C  6FB1               	movwf	logRun@num& (0+255),b
  4397                           
  4398                           ; BSR set to: 0
  4399                           ;EEPROM.c: 103: EEPROM_write(0, num);
  4400  00278E  0E00               	movlw	0
  4401  002790  0100               	movlb	0	; () banked
  4402  002792  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4403  002794  0E00               	movlw	0
  4404  002796  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4405  002798  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  4406  00279C  ECE6  F016         	call	_EEPROM_write	;wreg free
  4407                           
  4408                           ;EEPROM.c: 104: }
  4409  0027A0  D00A               	goto	l7337
  4410  0027A2                     l7335:
  4411                           
  4412                           ;EEPROM.c: 105: else{
  4413                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  4414  0027A2  0E00               	movlw	0
  4415  0027A4  0100               	movlb	0	; () banked
  4416  0027A6  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4417  0027A8  0E00               	movlw	0
  4418  0027AA  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4419  0027AC  0E00               	movlw	0
  4420  0027AE  0100               	movlb	0	; () banked
  4421  0027B0  6FAD               	movwf	EEPROM_write@data& (0+255),b
  4422  0027B2  ECE6  F016         	call	_EEPROM_write	;wreg free
  4423  0027B6                     l7337:
  4424                           
  4425                           ;EEPROM.c: 107: }
  4426                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  4427  0027B6  0100               	movlb	0	; () banked
  4428  0027B8  51FE               	movf	_count_total& (0+255),w,b
  4429  0027BA  0980               	iorlw	128
  4430  0027BC  0100               	movlb	0	; () banked
  4431  0027BE  6FB2               	movwf	logRun@byte1& (0+255),b
  4432                           
  4433                           ; BSR set to: 0
  4434                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  4435  0027C0  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4436  0027C4  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4437  0027C8  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  4438  0027CC  ECE6  F016         	call	_EEPROM_write	;wreg free
  4439                           
  4440                           ;EEPROM.c: 112: addr++;
  4441  0027D0  0100               	movlb	0	; () banked
  4442  0027D2  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4443  0027D4  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4444                           
  4445                           ; BSR set to: 0
  4446                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  4447  0027D6  3861               	swapf	_count_pop_no_tab,w,c
  4448  0027D8  0BF0               	andlw	240
  4449  0027DA  1063               	iorwf	_count_pop_w_tab,w,c
  4450  0027DC  0100               	movlb	0	; () banked
  4451  0027DE  6FB3               	movwf	logRun@byte2& (0+255),b
  4452                           
  4453                           ; BSR set to: 0
  4454                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  4455  0027E0  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4456  0027E4  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4457  0027E8  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  4458  0027EC  ECE6  F016         	call	_EEPROM_write	;wreg free
  4459                           
  4460                           ;EEPROM.c: 117: addr++;
  4461  0027F0  0100               	movlb	0	; () banked
  4462  0027F2  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4463  0027F4  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4464                           
  4465                           ; BSR set to: 0
  4466                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  4467  0027F6  385F               	swapf	_count_can_w_lab,w,c
  4468  0027F8  0BF0               	andlw	240
  4469  0027FA  105D               	iorwf	_count_can_no_lab,w,c
  4470  0027FC  0100               	movlb	0	; () banked
  4471  0027FE  6FB4               	movwf	logRun@byte3& (0+255),b
  4472                           
  4473                           ; BSR set to: 0
  4474                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  4475  002800  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4476  002804  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4477  002808  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  4478  00280C  ECE6  F016         	call	_EEPROM_write	;wreg free
  4479                           
  4480                           ;EEPROM.c: 120: addr++;
  4481  002810  0100               	movlb	0	; () banked
  4482  002812  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4483  002814  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4484                           
  4485                           ; BSR set to: 0
  4486                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  4487  002816  0E00               	movlw	0
  4488  002818  0100               	movlb	0	; () banked
  4489  00281A  6FB8               	movwf	(logRun@i+1)& (0+255),b
  4490  00281C  0E00               	movlw	0
  4491  00281E  6FB7               	movwf	logRun@i& (0+255),b
  4492                           
  4493                           ; BSR set to: 0
  4494  002820  0100               	movlb	0	; () banked
  4495  002822  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4496  002824  D008               	goto	l7361
  4497  002826  0100               	movlb	0	; () banked
  4498  002828  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4499  00282A  E128               	bnz	l920
  4500  00282C  0E07               	movlw	7
  4501  00282E  0100               	movlb	0	; () banked
  4502  002830  5DB7               	subwf	logRun@i& (0+255),w,b
  4503  002832  B0D8               	btfsc	status,0,c
  4504  002834  D023               	goto	l920
  4505  002836                     l7361:
  4506                           
  4507                           ; BSR set to: 0
  4508                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  4509  002836  90D8               	bcf	status,0,c
  4510  002838  0100               	movlb	0	; () banked
  4511  00283A  35B7               	rlcf	logRun@i& (0+255),w,b
  4512  00283C  6ED9               	movwf	fsr2l,c
  4513  00283E  0100               	movlb	0	; () banked
  4514  002840  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  4515  002842  6EDA               	movwf	fsr2h,c
  4516  002844  0E0E               	movlw	low _startTime
  4517  002846  26D9               	addwf	fsr2l,f,c
  4518  002848  0E01               	movlw	high _startTime
  4519  00284A  22DA               	addwfc	fsr2h,f,c
  4520  00284C  50DF               	movf	indf2,w,c
  4521  00284E  0100               	movlb	0	; () banked
  4522  002850  6FB5               	movwf	logRun@byte_i& (0+255),b
  4523                           
  4524                           ; BSR set to: 0
  4525                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  4526  002852  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4527  002856  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4528  00285A  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  4529  00285E  ECE6  F016         	call	_EEPROM_write	;wreg free
  4530                           
  4531                           ;EEPROM.c: 126: addr++;
  4532  002862  0100               	movlb	0	; () banked
  4533  002864  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4534  002866  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4535                           
  4536                           ; BSR set to: 0
  4537  002868  0100               	movlb	0	; () banked
  4538  00286A  4BB7               	infsnz	logRun@i& (0+255),f,b
  4539  00286C  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  4540                           
  4541                           ; BSR set to: 0
  4542  00286E  0100               	movlb	0	; () banked
  4543  002870  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4544  002872  D7E1               	goto	l7361
  4545  002874  0100               	movlb	0	; () banked
  4546  002876  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4547  002878  E101               	bnz	u6320
  4548  00287A  D7D8               	goto	L4
  4549  00287C                     u6320:
  4550  00287C                     l920:
  4551                           
  4552                           ; BSR set to: 0
  4553                           ;EEPROM.c: 127: }
  4554                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  4555  00287C  C0F8  F0B6         	movff	_total_time,logRun@byte11
  4556                           
  4557                           ; BSR set to: 0
  4558                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  4559  002880  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4560  002884  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4561  002888  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  4562  00288C  ECE6  F016         	call	_EEPROM_write	;wreg free
  4563  002890  0012               	return		;funcret
  4564  002892                     __end_of_logRun:
  4565                           	opt stack 0
  4566                           tblptru	equ	0xFF8
  4567                           tblptrh	equ	0xFF7
  4568                           tblptrl	equ	0xFF6
  4569                           tablat	equ	0xFF5
  4570                           prodh	equ	0xFF4
  4571                           prodl	equ	0xFF3
  4572                           intcon	equ	0xFF2
  4573                           intcon2	equ	0xFF1
  4574                           intcon3	equ	0xFF0
  4575                           postinc0	equ	0xFEE
  4576                           wreg	equ	0xFE8
  4577                           postdec1	equ	0xFE5
  4578                           fsr1l	equ	0xFE1
  4579                           indf2	equ	0xFDF
  4580                           postinc2	equ	0xFDE
  4581                           postdec2	equ	0xFDD
  4582                           fsr2h	equ	0xFDA
  4583                           fsr2l	equ	0xFD9
  4584                           status	equ	0xFD8
  4585                           
  4586 ;; *************** function _EEPROM_write *****************
  4587 ;; Defined at:
  4588 ;;		line 32 in file "EEPROM.c"
  4589 ;; Parameters:    Size  Location     Type
  4590 ;;  address         2   43[BANK0 ] unsigned short 
  4591 ;;  data            1   45[BANK0 ] unsigned char 
  4592 ;; Auto vars:     Size  Location     Type
  4593 ;;  i               1   48[BANK0 ] unsigned char 
  4594 ;;  i               1   47[BANK0 ] unsigned char 
  4595 ;; Return value:  Size  Location     Type
  4596 ;;                  1    wreg      void 
  4597 ;; Registers used:
  4598 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4599 ;; Tracked objects:
  4600 ;;		On entry : 0/0
  4601 ;;		On exit  : 0/0
  4602 ;;		Unchanged: 0/0
  4603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4604 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4605 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4606 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4607 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4608 ;;Total ram usage:        6 bytes
  4609 ;; Hardware stack levels used:    1
  4610 ;; Hardware stack levels required when called:   10
  4611 ;; This function calls:
  4612 ;;		_EEPROM_read
  4613 ;;		_lcdInst
  4614 ;;		_printf
  4615 ;; This function is called by:
  4616 ;;		_Loading
  4617 ;;		_logRun
  4618 ;; This function uses a non-reentrant model
  4619 ;;
  4620                           
  4621                           	psect	text12
  4622  002DCC                     __ptext12:
  4623                           	opt stack 0
  4624  002DCC                     _EEPROM_write:
  4625                           	opt stack 18
  4626                           
  4627                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  4628                           
  4629                           ;incstack = 0
  4630  002DCC  84A6               	bsf	4006,2,c	;volatile
  4631                           
  4632                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  4633  002DCE  0100               	movlb	0	; () banked
  4634  002DD0  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  4635  002DD2  6EAA               	movwf	4010,c	;volatile
  4636                           
  4637                           ; BSR set to: 0
  4638                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  4639  002DD4  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  4640                           
  4641                           ; BSR set to: 0
  4642                           ;EEPROM.c: 39: EEDATA = data;
  4643  002DD8  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  4644                           
  4645                           ; BSR set to: 0
  4646                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  4647  002DDC  9EA6               	bcf	4006,7,c	;volatile
  4648                           
  4649                           ; BSR set to: 0
  4650                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  4651  002DDE  9CA6               	bcf	4006,6,c	;volatile
  4652                           
  4653                           ; BSR set to: 0
  4654                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  4655  002DE0  9EF2               	bcf	intcon,7,c	;volatile
  4656                           
  4657                           ;EEPROM.c: 45: EECON2 = 0x55;
  4658  002DE2  0E55               	movlw	85
  4659  002DE4  6EA7               	movwf	4007,c	;volatile
  4660                           
  4661                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  4662  002DE6  0EAA               	movlw	170
  4663  002DE8  6EA7               	movwf	4007,c	;volatile
  4664                           
  4665                           ; BSR set to: 0
  4666                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  4667  002DEA  82A6               	bsf	4006,1,c	;volatile
  4668                           
  4669                           ; BSR set to: 0
  4670                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  4671  002DEC  8EF2               	bsf	intcon,7,c	;volatile
  4672  002DEE                     l898:
  4673  002DEE  A8A1               	btfss	4001,4,c	;volatile
  4674  002DF0  D7FE               	goto	l898
  4675                           
  4676                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  4677  002DF2  98A1               	bcf	4001,4,c	;volatile
  4678                           
  4679                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  4680  002DF4  94A6               	bcf	4006,2,c	;volatile
  4681                           
  4682                           ;EEPROM.c: 57: if(debug){
  4683  002DF6  5067               	movf	_debug,w,c
  4684  002DF8  1068               	iorwf	_debug+1,w,c
  4685  002DFA  B4D8               	btfsc	status,2,c
  4686  002DFC  0012               	return	
  4687                           
  4688                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4689  002DFE  0E01               	movlw	1
  4690  002E00  EC0E  F020         	call	_lcdInst
  4691  002E04  0E68               	movlw	104
  4692  002E06  0100               	movlb	0	; () banked
  4693  002E08  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4694  002E0A  0EE4               	movlw	228
  4695  002E0C                     u6587:
  4696  002E0C  2EE8               	decfsz	wreg,f,c
  4697  002E0E  D7FE               	bra	u6587
  4698  002E10  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4699  002E12  D7FC               	bra	u6587
  4700  002E14  F000               	nop	
  4701                           
  4702                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  4703  002E16  0E80               	movlw	128
  4704  002E18  EC0E  F020         	call	_lcdInst
  4705                           
  4706                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  4707  002E1C  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  4708  002E20  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  4709  002E24  ECD1  F01F         	call	_EEPROM_read	;wreg free
  4710  002E28  0100               	movlb	0	; () banked
  4711  002E2A  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  4712  002E2C  A4D8               	btfss	status,2,c
  4713  002E2E  D024               	goto	l5679
  4714                           
  4715                           ; BSR set to: 0
  4716                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  4717  002E30  0EA4               	movlw	low STR_66
  4718  002E32  0100               	movlb	0	; () banked
  4719  002E34  6F8E               	movwf	printf@f& (0+255),b
  4720  002E36  0EFB               	movlw	high STR_66
  4721  002E38  0100               	movlb	0	; () banked
  4722  002E3A  6F8F               	movwf	(printf@f+1)& (0+255),b
  4723  002E3C  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  4724  002E40  0100               	movlb	0	; () banked
  4725  002E42  6B91               	clrf	(?_printf+3)& (0+255),b
  4726  002E44  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  4727  002E48  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  4728  002E4C  EC97  F008         	call	_printf	;wreg free
  4729                           
  4730                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  4731  002E50  0E00               	movlw	0
  4732  002E52  0100               	movlb	0	; () banked
  4733  002E54  6FAF               	movwf	EEPROM_write@i& (0+255),b
  4734  002E56                     l5671:
  4735                           
  4736                           ; BSR set to: 0
  4737  002E56  0E63               	movlw	99
  4738  002E58  0100               	movlb	0	; () banked
  4739  002E5A  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  4740  002E5C  D001               	goto	l5675
  4741  002E5E  0012               	return	
  4742  002E60                     l5675:
  4743                           
  4744                           ; BSR set to: 0
  4745  002E60  0E68               	movlw	104
  4746  002E62  0100               	movlb	0	; () banked
  4747  002E64  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4748  002E66  0EE4               	movlw	228
  4749  002E68                     u6597:
  4750  002E68  2EE8               	decfsz	wreg,f,c
  4751  002E6A  D7FE               	bra	u6597
  4752  002E6C  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4753  002E6E  D7FC               	bra	u6597
  4754  002E70  F000               	nop	
  4755  002E72  0100               	movlb	0	; () banked
  4756  002E74  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  4757  002E76  D7EF               	goto	l5671
  4758  002E78                     l5679:
  4759                           
  4760                           ; BSR set to: 0
  4761                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  4762  002E78  0EBC               	movlw	low STR_67
  4763  002E7A  0100               	movlb	0	; () banked
  4764  002E7C  6F8E               	movwf	printf@f& (0+255),b
  4765  002E7E  0EFF               	movlw	high STR_67
  4766  002E80  0100               	movlb	0	; () banked
  4767  002E82  6F8F               	movwf	(printf@f+1)& (0+255),b
  4768  002E84  EC97  F008         	call	_printf	;wreg free
  4769  002E88  0E00               	movlw	0
  4770  002E8A  0100               	movlb	0	; () banked
  4771  002E8C  6FB0               	movwf	EEPROM_write@i_1310& (0+255),b
  4772  002E8E                     l5683:
  4773                           
  4774                           ; BSR set to: 0
  4775  002E8E  0E63               	movlw	99
  4776  002E90  0100               	movlb	0	; () banked
  4777  002E92  65B0               	cpfsgt	EEPROM_write@i_1310& (0+255),b
  4778  002E94  D001               	goto	l5687
  4779  002E96  0012               	return	
  4780  002E98                     l5687:
  4781                           
  4782                           ; BSR set to: 0
  4783  002E98  0E68               	movlw	104
  4784  002E9A  0100               	movlb	0	; () banked
  4785  002E9C  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4786  002E9E  0EE4               	movlw	228
  4787  002EA0                     u6607:
  4788  002EA0  2EE8               	decfsz	wreg,f,c
  4789  002EA2  D7FE               	bra	u6607
  4790  002EA4  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4791  002EA6  D7FC               	bra	u6607
  4792  002EA8  F000               	nop	
  4793  002EAA  0100               	movlb	0	; () banked
  4794  002EAC  2BB0               	incf	EEPROM_write@i_1310& (0+255),f,b
  4795  002EAE  D7EF               	goto	l5683
  4796  002EB0                     __end_of_EEPROM_write:
  4797                           	opt stack 0
  4798                           tblptru	equ	0xFF8
  4799                           tblptrh	equ	0xFF7
  4800                           tblptrl	equ	0xFF6
  4801                           tablat	equ	0xFF5
  4802                           prodh	equ	0xFF4
  4803                           prodl	equ	0xFF3
  4804                           intcon	equ	0xFF2
  4805                           intcon2	equ	0xFF1
  4806                           intcon3	equ	0xFF0
  4807                           postinc0	equ	0xFEE
  4808                           wreg	equ	0xFE8
  4809                           postdec1	equ	0xFE5
  4810                           fsr1l	equ	0xFE1
  4811                           indf2	equ	0xFDF
  4812                           postinc2	equ	0xFDE
  4813                           postdec2	equ	0xFDD
  4814                           fsr2h	equ	0xFDA
  4815                           fsr2l	equ	0xFD9
  4816                           status	equ	0xFD8
  4817                           
  4818 ;; *************** function _EEPROM_read *****************
  4819 ;; Defined at:
  4820 ;;		line 68 in file "EEPROM.c"
  4821 ;; Parameters:    Size  Location     Type
  4822 ;;  address         2    0[BANK0 ] unsigned short 
  4823 ;; Auto vars:     Size  Location     Type
  4824 ;;		None
  4825 ;; Return value:  Size  Location     Type
  4826 ;;                  1    wreg      unsigned char 
  4827 ;; Registers used:
  4828 ;;		wreg, status,2
  4829 ;; Tracked objects:
  4830 ;;		On entry : 0/0
  4831 ;;		On exit  : 0/0
  4832 ;;		Unchanged: 0/0
  4833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4834 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4837 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4838 ;;Total ram usage:        2 bytes
  4839 ;; Hardware stack levels used:    1
  4840 ;; Hardware stack levels required when called:    7
  4841 ;; This function calls:
  4842 ;;		Nothing
  4843 ;; This function is called by:
  4844 ;;		_Loading
  4845 ;;		_EEPROM_write
  4846 ;;		_logRun
  4847 ;; This function uses a non-reentrant model
  4848 ;;
  4849                           
  4850                           	psect	text13
  4851  003FA2                     __ptext13:
  4852                           	opt stack 0
  4853  003FA2                     _EEPROM_read:
  4854                           	opt stack 20
  4855                           
  4856                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  4857                           
  4858                           ;incstack = 0
  4859  003FA2  0100               	movlb	0	; () banked
  4860  003FA4  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  4861  003FA6  6EAA               	movwf	4010,c	;volatile
  4862                           
  4863                           ; BSR set to: 0
  4864                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  4865  003FA8  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  4866                           
  4867                           ; BSR set to: 0
  4868                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  4869  003FAC  9EA6               	bcf	4006,7,c	;volatile
  4870                           
  4871                           ; BSR set to: 0
  4872                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  4873  003FAE  9CA6               	bcf	4006,6,c	;volatile
  4874                           
  4875                           ; BSR set to: 0
  4876                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  4877  003FB0  80A6               	bsf	4006,0,c	;volatile
  4878  003FB2                     l911:
  4879  003FB2  B0A6               	btfsc	4006,0,c	;volatile
  4880  003FB4  D7FE               	goto	l911
  4881                           
  4882                           ;EEPROM.c: 81: return EEDATA;
  4883  003FB6  50A8               	movf	4008,w,c	;volatile
  4884  003FB8  0012               	return	
  4885  003FBA                     __end_of_EEPROM_read:
  4886                           	opt stack 0
  4887                           tblptru	equ	0xFF8
  4888                           tblptrh	equ	0xFF7
  4889                           tblptrl	equ	0xFF6
  4890                           tablat	equ	0xFF5
  4891                           prodh	equ	0xFF4
  4892                           prodl	equ	0xFF3
  4893                           intcon	equ	0xFF2
  4894                           intcon2	equ	0xFF1
  4895                           intcon3	equ	0xFF0
  4896                           postinc0	equ	0xFEE
  4897                           wreg	equ	0xFE8
  4898                           postdec1	equ	0xFE5
  4899                           fsr1l	equ	0xFE1
  4900                           indf2	equ	0xFDF
  4901                           postinc2	equ	0xFDE
  4902                           postdec2	equ	0xFDD
  4903                           fsr2h	equ	0xFDA
  4904                           fsr2l	equ	0xFD9
  4905                           status	equ	0xFD8
  4906                           
  4907 ;; *************** function _initUI *****************
  4908 ;; Defined at:
  4909 ;;		line 62 in file "UI.c"
  4910 ;; Parameters:    Size  Location     Type
  4911 ;;		None
  4912 ;; Auto vars:     Size  Location     Type
  4913 ;;		None
  4914 ;; Return value:  Size  Location     Type
  4915 ;;                  1    wreg      void 
  4916 ;; Registers used:
  4917 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4918 ;; Tracked objects:
  4919 ;;		On entry : 0/0
  4920 ;;		On exit  : 0/0
  4921 ;;		Unchanged: 0/0
  4922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4926 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4927 ;;Total ram usage:        0 bytes
  4928 ;; Hardware stack levels used:    1
  4929 ;; Hardware stack levels required when called:   12
  4930 ;; This function calls:
  4931 ;;		_change_state_to_menu_start
  4932 ;;		_loadRTC
  4933 ;; This function is called by:
  4934 ;;		_main
  4935 ;; This function uses a non-reentrant model
  4936 ;;
  4937                           
  4938                           	psect	text14
  4939  003EF8                     __ptext14:
  4940                           	opt stack 0
  4941  003EF8                     _initUI:
  4942                           	opt stack 18
  4943                           
  4944                           ;UI.c: 63: (INTCONbits.GIE = 1);
  4945                           
  4946                           ;incstack = 0
  4947  003EF8  8EF2               	bsf	intcon,7,c	;volatile
  4948                           
  4949                           ;UI.c: 64: machine_state = UI_state;
  4950  003EFA  0E00               	movlw	0
  4951  003EFC  0100               	movlb	0	; () banked
  4952  003EFE  6FFC               	movwf	_machine_state& (0+255),b
  4953                           
  4954                           ;UI.c: 65: logstate = 0;
  4955  003F00  0E00               	movlw	0
  4956  003F02  0100               	movlb	0	; () banked
  4957  003F04  6FF7               	movwf	(_logstate+1)& (0+255),b
  4958  003F06  0E00               	movlw	0
  4959  003F08  6FF6               	movwf	_logstate& (0+255),b
  4960                           
  4961                           ; BSR set to: 0
  4962                           ;UI.c: 67: loadRTC();
  4963  003F0A  EC74  F019         	call	_loadRTC	;wreg free
  4964                           
  4965                           ;UI.c: 69: change_state_to_menu_start();
  4966  003F0E  EC01  F01F         	call	_change_state_to_menu_start	;wreg free
  4967                           
  4968                           ;UI.c: 70: firstboot = 1;
  4969  003F12  0E00               	movlw	0
  4970  003F14  6E76               	movwf	_firstboot+1,c
  4971  003F16  0E01               	movlw	1
  4972  003F18  6E75               	movwf	_firstboot,c
  4973  003F1A  0012               	return		;funcret
  4974  003F1C                     __end_of_initUI:
  4975                           	opt stack 0
  4976                           tblptru	equ	0xFF8
  4977                           tblptrh	equ	0xFF7
  4978                           tblptrl	equ	0xFF6
  4979                           tablat	equ	0xFF5
  4980                           prodh	equ	0xFF4
  4981                           prodl	equ	0xFF3
  4982                           intcon	equ	0xFF2
  4983                           intcon2	equ	0xFF1
  4984                           intcon3	equ	0xFF0
  4985                           postinc0	equ	0xFEE
  4986                           wreg	equ	0xFE8
  4987                           postdec1	equ	0xFE5
  4988                           fsr1l	equ	0xFE1
  4989                           indf2	equ	0xFDF
  4990                           postinc2	equ	0xFDE
  4991                           postdec2	equ	0xFDD
  4992                           fsr2h	equ	0xFDA
  4993                           fsr2l	equ	0xFD9
  4994                           status	equ	0xFD8
  4995                           
  4996 ;; *************** function _loadRTC *****************
  4997 ;; Defined at:
  4998 ;;		line 28 in file "RTC.c"
  4999 ;; Parameters:    Size  Location     Type
  5000 ;;		None
  5001 ;; Auto vars:     Size  Location     Type
  5002 ;;  i               2   22[BANK0 ] int 
  5003 ;; Return value:  Size  Location     Type
  5004 ;;                  1    wreg      void 
  5005 ;; Registers used:
  5006 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5007 ;; Tracked objects:
  5008 ;;		On entry : 0/0
  5009 ;;		On exit  : 0/0
  5010 ;;		Unchanged: 0/0
  5011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5013 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5014 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5015 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5016 ;;Total ram usage:        3 bytes
  5017 ;; Hardware stack levels used:    1
  5018 ;; Hardware stack levels required when called:    9
  5019 ;; This function calls:
  5020 ;;		_I2C_Master_Init
  5021 ;;		_I2C_Master_Start
  5022 ;;		_I2C_Master_Stop
  5023 ;;		_I2C_Master_Write
  5024 ;; This function is called by:
  5025 ;;		_initUI
  5026 ;; This function uses a non-reentrant model
  5027 ;;
  5028                           
  5029                           	psect	text15
  5030  0032E8                     __ptext15:
  5031                           	opt stack 0
  5032  0032E8                     _loadRTC:
  5033                           	opt stack 20
  5034                           
  5035                           ;RTC.c: 30: I2C_Master_Init(10000);
  5036                           
  5037                           ;incstack = 0
  5038  0032E8  0E10               	movlw	16
  5039  0032EA  0100               	movlb	0	; () banked
  5040  0032EC  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  5041  0032EE  0E27               	movlw	39
  5042  0032F0  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  5043  0032F2  0E00               	movlw	0
  5044  0032F4  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  5045  0032F6  0E00               	movlw	0
  5046  0032F8  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  5047  0032FA  EC89  F01B         	call	_I2C_Master_Init	;wreg free
  5048                           
  5049                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  5050  0032FE  9EF2               	bcf	intcon,7,c	;volatile
  5051                           
  5052                           ;RTC.c: 34: I2C_Master_Start();
  5053  003300  EC34  F020         	call	_I2C_Master_Start	;wreg free
  5054                           
  5055                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  5056  003304  0E00               	movlw	0
  5057  003306  0100               	movlb	0	; () banked
  5058  003308  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5059  00330A  0ED0               	movlw	208
  5060  00330C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5061  00330E  EC22  F020         	call	_I2C_Master_Write	;wreg free
  5062                           
  5063                           ;RTC.c: 36: I2C_Master_Write(0x00);
  5064  003312  0E00               	movlw	0
  5065  003314  0100               	movlb	0	; () banked
  5066  003316  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5067  003318  0E00               	movlw	0
  5068  00331A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5069  00331C  EC22  F020         	call	_I2C_Master_Write	;wreg free
  5070                           
  5071                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  5072  003320  0E00               	movlw	0
  5073  003322  0100               	movlb	0	; () banked
  5074  003324  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  5075  003326  0E00               	movlw	0
  5076  003328  6F96               	movwf	loadRTC@i& (0+255),b
  5077  00332A                     l5795:
  5078                           
  5079                           ; BSR set to: 0
  5080  00332A  0100               	movlb	0	; () banked
  5081  00332C  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  5082  00332E  D008               	goto	l5799
  5083  003330  0100               	movlb	0	; () banked
  5084  003332  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  5085  003334  E11B               	bnz	l5805
  5086  003336  0E07               	movlw	7
  5087  003338  0100               	movlb	0	; () banked
  5088  00333A  5D96               	subwf	loadRTC@i& (0+255),w,b
  5089  00333C  B0D8               	btfsc	status,0,c
  5090  00333E  D016               	goto	l5805
  5091  003340                     l5799:
  5092                           
  5093                           ; BSR set to: 0
  5094                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  5095  003340  0E24               	movlw	low _time
  5096  003342  0100               	movlb	0	; () banked
  5097  003344  2596               	addwf	loadRTC@i& (0+255),w,b
  5098  003346  6ED9               	movwf	fsr2l,c
  5099  003348  0E01               	movlw	high _time
  5100  00334A  0100               	movlb	0	; () banked
  5101  00334C  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  5102  00334E  6EDA               	movwf	fsr2h,c
  5103  003350  50DF               	movf	indf2,w,c
  5104  003352  0100               	movlb	0	; () banked
  5105  003354  6F95               	movwf	??_loadRTC& (0+255),b
  5106  003356  0100               	movlb	0	; () banked
  5107  003358  5195               	movf	??_loadRTC& (0+255),w,b
  5108  00335A  0100               	movlb	0	; () banked
  5109  00335C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5110  00335E  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  5111  003360  EC22  F020         	call	_I2C_Master_Write	;wreg free
  5112  003364  0100               	movlb	0	; () banked
  5113  003366  4B96               	infsnz	loadRTC@i& (0+255),f,b
  5114  003368  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  5115  00336A  D7DF               	goto	l5795
  5116  00336C                     l5805:
  5117                           
  5118                           ; BSR set to: 0
  5119                           ;RTC.c: 39: }
  5120                           ;RTC.c: 40: I2C_Master_Stop();
  5121  00336C  EC30  F020         	call	_I2C_Master_Stop	;wreg free
  5122                           
  5123                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  5124  003370  8EF2               	bsf	intcon,7,c	;volatile
  5125  003372  0012               	return		;funcret
  5126  003374                     __end_of_loadRTC:
  5127                           	opt stack 0
  5128                           tblptru	equ	0xFF8
  5129                           tblptrh	equ	0xFF7
  5130                           tblptrl	equ	0xFF6
  5131                           tablat	equ	0xFF5
  5132                           prodh	equ	0xFF4
  5133                           prodl	equ	0xFF3
  5134                           intcon	equ	0xFF2
  5135                           intcon2	equ	0xFF1
  5136                           intcon3	equ	0xFF0
  5137                           postinc0	equ	0xFEE
  5138                           wreg	equ	0xFE8
  5139                           postdec1	equ	0xFE5
  5140                           fsr1l	equ	0xFE1
  5141                           indf2	equ	0xFDF
  5142                           postinc2	equ	0xFDE
  5143                           postdec2	equ	0xFDD
  5144                           fsr2h	equ	0xFDA
  5145                           fsr2l	equ	0xFD9
  5146                           status	equ	0xFD8
  5147                           
  5148 ;; *************** function _I2C_Master_Init *****************
  5149 ;; Defined at:
  5150 ;;		line 15 in file "I2C.c"
  5151 ;; Parameters:    Size  Location     Type
  5152 ;;  c               4   13[BANK0 ] const unsigned long 
  5153 ;; Auto vars:     Size  Location     Type
  5154 ;;		None
  5155 ;; Return value:  Size  Location     Type
  5156 ;;                  1    wreg      void 
  5157 ;; Registers used:
  5158 ;;		wreg, status,2, status,0, cstack
  5159 ;; Tracked objects:
  5160 ;;		On entry : 0/0
  5161 ;;		On exit  : 0/0
  5162 ;;		Unchanged: 0/0
  5163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5164 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5166 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5167 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5168 ;;Total ram usage:        8 bytes
  5169 ;; Hardware stack levels used:    1
  5170 ;; Hardware stack levels required when called:    8
  5171 ;; This function calls:
  5172 ;;		___lldiv
  5173 ;; This function is called by:
  5174 ;;		_loadRTC
  5175 ;; This function uses a non-reentrant model
  5176 ;;
  5177                           
  5178                           	psect	text16
  5179  003712                     __ptext16:
  5180                           	opt stack 0
  5181  003712                     _I2C_Master_Init:
  5182                           	opt stack 20
  5183                           
  5184                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  5185                           
  5186                           ;incstack = 0
  5187  003712  0E00               	movlw	0
  5188  003714  6EC7               	movwf	4039,c	;volatile
  5189                           
  5190                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  5191  003716  0E28               	movlw	40
  5192  003718  6EC6               	movwf	4038,c	;volatile
  5193                           
  5194                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  5195  00371A  0E00               	movlw	0
  5196  00371C  6EC5               	movwf	4037,c	;volatile
  5197                           
  5198                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  5199  00371E  0E00               	movlw	0
  5200  003720  0100               	movlb	0	; () banked
  5201  003722  6F80               	movwf	___lldiv@dividend& (0+255),b
  5202  003724  0E48               	movlw	72
  5203  003726  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  5204  003728  0EE8               	movlw	232
  5205  00372A  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  5206  00372C  0E01               	movlw	1
  5207  00372E  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  5208  003730  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5209  003734  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5210  003738  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5211  00373C  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5212  003740  0E02               	movlw	2
  5213  003742                     u4195:
  5214  003742  90D8               	bcf	status,0,c
  5215  003744  0100               	movlb	0	; () banked
  5216  003746  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5217  003748  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5218  00374A  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5219  00374C  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5220  00374E  2EE8               	decfsz	wreg,f,c
  5221  003750  D7F8               	goto	u4195
  5222  003752  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  5223  003756  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5224  00375A  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5225  00375E  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5226  003762  EC22  F018         	call	___lldiv	;wreg free
  5227  003766  0100               	movlb	0	; () banked
  5228  003768  0580               	decf	?___lldiv& (0+255),w,b
  5229  00376A  6EC8               	movwf	4040,c	;volatile
  5230                           
  5231                           ; BSR set to: 0
  5232                           ;I2C.c: 22: TRISC3 = 1;
  5233  00376C  8694               	bsf	3988,3,c	;volatile
  5234                           
  5235                           ; BSR set to: 0
  5236                           ;I2C.c: 23: TRISC4 = 1;
  5237  00376E  8894               	bsf	3988,4,c	;volatile
  5238                           
  5239                           ; BSR set to: 0
  5240  003770  0012               	return		;funcret
  5241  003772                     __end_of_I2C_Master_Init:
  5242                           	opt stack 0
  5243                           tblptru	equ	0xFF8
  5244                           tblptrh	equ	0xFF7
  5245                           tblptrl	equ	0xFF6
  5246                           tablat	equ	0xFF5
  5247                           prodh	equ	0xFF4
  5248                           prodl	equ	0xFF3
  5249                           intcon	equ	0xFF2
  5250                           intcon2	equ	0xFF1
  5251                           intcon3	equ	0xFF0
  5252                           postinc0	equ	0xFEE
  5253                           wreg	equ	0xFE8
  5254                           postdec1	equ	0xFE5
  5255                           fsr1l	equ	0xFE1
  5256                           indf2	equ	0xFDF
  5257                           postinc2	equ	0xFDE
  5258                           postdec2	equ	0xFDD
  5259                           fsr2h	equ	0xFDA
  5260                           fsr2l	equ	0xFD9
  5261                           status	equ	0xFD8
  5262                           
  5263 ;; *************** function ___lldiv *****************
  5264 ;; Defined at:
  5265 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5266 ;; Parameters:    Size  Location     Type
  5267 ;;  dividend        4    0[BANK0 ] unsigned long 
  5268 ;;  divisor         4    4[BANK0 ] unsigned long 
  5269 ;; Auto vars:     Size  Location     Type
  5270 ;;  quotient        4    8[BANK0 ] unsigned long 
  5271 ;;  counter         1   12[BANK0 ] unsigned char 
  5272 ;; Return value:  Size  Location     Type
  5273 ;;                  4    0[BANK0 ] unsigned long 
  5274 ;; Registers used:
  5275 ;;		wreg, status,2, status,0
  5276 ;; Tracked objects:
  5277 ;;		On entry : 0/0
  5278 ;;		On exit  : 0/0
  5279 ;;		Unchanged: 0/0
  5280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5281 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5282 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5284 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5285 ;;Total ram usage:       13 bytes
  5286 ;; Hardware stack levels used:    1
  5287 ;; Hardware stack levels required when called:    7
  5288 ;; This function calls:
  5289 ;;		Nothing
  5290 ;; This function is called by:
  5291 ;;		_I2C_Master_Init
  5292 ;; This function uses a non-reentrant model
  5293 ;;
  5294                           
  5295                           	psect	text17
  5296  003044                     __ptext17:
  5297                           	opt stack 0
  5298  003044                     ___lldiv:
  5299                           	opt stack 20
  5300                           
  5301                           ; BSR set to: 0
  5302                           ;incstack = 0
  5303  003044  0E00               	movlw	0
  5304  003046  0100               	movlb	0	; () banked
  5305  003048  6F88               	movwf	___lldiv@quotient& (0+255),b
  5306  00304A  0E00               	movlw	0
  5307  00304C  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  5308  00304E  0E00               	movlw	0
  5309  003050  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5310  003052  0E00               	movlw	0
  5311  003054  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5312                           
  5313                           ; BSR set to: 0
  5314  003056  0100               	movlb	0	; () banked
  5315  003058  5184               	movf	___lldiv@divisor& (0+255),w,b
  5316  00305A  0100               	movlb	0	; () banked
  5317  00305C  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5318  00305E  0100               	movlb	0	; () banked
  5319  003060  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5320  003062  0100               	movlb	0	; () banked
  5321  003064  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5322  003066  B4D8               	btfsc	status,2,c
  5323  003068  D042               	goto	l1561
  5324                           
  5325                           ; BSR set to: 0
  5326  00306A  0E01               	movlw	1
  5327  00306C  0100               	movlb	0	; () banked
  5328  00306E  6F8C               	movwf	___lldiv@counter& (0+255),b
  5329  003070  D008               	goto	l5243
  5330  003072                     l5241:
  5331                           
  5332                           ; BSR set to: 0
  5333  003072  0100               	movlb	0	; () banked
  5334  003074  90D8               	bcf	status,0,c
  5335  003076  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  5336  003078  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5337  00307A  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5338  00307C  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5339  00307E  0100               	movlb	0	; () banked
  5340  003080  2B8C               	incf	___lldiv@counter& (0+255),f,b
  5341  003082                     l5243:
  5342                           
  5343                           ; BSR set to: 0
  5344  003082  0100               	movlb	0	; () banked
  5345  003084  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5346  003086  D7F5               	goto	l5241
  5347  003088                     l5245:
  5348                           
  5349                           ; BSR set to: 0
  5350  003088  0100               	movlb	0	; () banked
  5351  00308A  90D8               	bcf	status,0,c
  5352  00308C  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  5353  00308E  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5354  003090  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5355  003092  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5356                           
  5357                           ; BSR set to: 0
  5358  003094  0100               	movlb	0	; () banked
  5359  003096  5184               	movf	___lldiv@divisor& (0+255),w,b
  5360  003098  0100               	movlb	0	; () banked
  5361  00309A  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  5362  00309C  0100               	movlb	0	; () banked
  5363  00309E  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5364  0030A0  0100               	movlb	0	; () banked
  5365  0030A2  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5366  0030A4  0100               	movlb	0	; () banked
  5367  0030A6  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5368  0030A8  0100               	movlb	0	; () banked
  5369  0030AA  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5370  0030AC  0100               	movlb	0	; () banked
  5371  0030AE  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5372  0030B0  0100               	movlb	0	; () banked
  5373  0030B2  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5374  0030B4  A0D8               	btfss	status,0,c
  5375  0030B6  D012               	goto	l5253
  5376                           
  5377                           ; BSR set to: 0
  5378  0030B8  0100               	movlb	0	; () banked
  5379  0030BA  5184               	movf	___lldiv@divisor& (0+255),w,b
  5380  0030BC  0100               	movlb	0	; () banked
  5381  0030BE  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  5382  0030C0  0100               	movlb	0	; () banked
  5383  0030C2  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5384  0030C4  0100               	movlb	0	; () banked
  5385  0030C6  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5386  0030C8  0100               	movlb	0	; () banked
  5387  0030CA  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5388  0030CC  0100               	movlb	0	; () banked
  5389  0030CE  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5390  0030D0  0100               	movlb	0	; () banked
  5391  0030D2  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5392  0030D4  0100               	movlb	0	; () banked
  5393  0030D6  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5394                           
  5395                           ; BSR set to: 0
  5396  0030D8  0100               	movlb	0	; () banked
  5397  0030DA  8188               	bsf	___lldiv@quotient& (0+255),0,b
  5398  0030DC                     l5253:
  5399                           
  5400                           ; BSR set to: 0
  5401  0030DC  0100               	movlb	0	; () banked
  5402  0030DE  90D8               	bcf	status,0,c
  5403  0030E0  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5404  0030E2  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5405  0030E4  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5406  0030E6  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  5407                           
  5408                           ; BSR set to: 0
  5409  0030E8  0100               	movlb	0	; () banked
  5410  0030EA  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  5411  0030EC  D7CD               	goto	l5245
  5412  0030EE                     l1561:
  5413                           
  5414                           ; BSR set to: 0
  5415  0030EE  C088  F080         	movff	___lldiv@quotient,?___lldiv
  5416  0030F2  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  5417  0030F6  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  5418  0030FA  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  5419                           
  5420                           ; BSR set to: 0
  5421  0030FE  0012               	return		;funcret
  5422  003100                     __end_of___lldiv:
  5423                           	opt stack 0
  5424                           tblptru	equ	0xFF8
  5425                           tblptrh	equ	0xFF7
  5426                           tblptrl	equ	0xFF6
  5427                           tablat	equ	0xFF5
  5428                           prodh	equ	0xFF4
  5429                           prodl	equ	0xFF3
  5430                           intcon	equ	0xFF2
  5431                           intcon2	equ	0xFF1
  5432                           intcon3	equ	0xFF0
  5433                           postinc0	equ	0xFEE
  5434                           wreg	equ	0xFE8
  5435                           postdec1	equ	0xFE5
  5436                           fsr1l	equ	0xFE1
  5437                           indf2	equ	0xFDF
  5438                           postinc2	equ	0xFDE
  5439                           postdec2	equ	0xFDD
  5440                           fsr2h	equ	0xFDA
  5441                           fsr2l	equ	0xFD9
  5442                           status	equ	0xFD8
  5443                           
  5444 ;; *************** function _change_state_to_menu_start *****************
  5445 ;; Defined at:
  5446 ;;		line 472 in file "UI.c"
  5447 ;; Parameters:    Size  Location     Type
  5448 ;;		None
  5449 ;; Auto vars:     Size  Location     Type
  5450 ;;		None
  5451 ;; Return value:  Size  Location     Type
  5452 ;;                  1    wreg      void 
  5453 ;; Registers used:
  5454 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5455 ;; Tracked objects:
  5456 ;;		On entry : 0/0
  5457 ;;		On exit  : 0/0
  5458 ;;		Unchanged: 0/0
  5459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5463 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5464 ;;Total ram usage:        0 bytes
  5465 ;; Hardware stack levels used:    1
  5466 ;; Hardware stack levels required when called:   11
  5467 ;; This function calls:
  5468 ;;		_lcdInst
  5469 ;;		_printRTC
  5470 ;;		_printf
  5471 ;; This function is called by:
  5472 ;;		_initUI
  5473 ;; This function uses a non-reentrant model
  5474 ;;
  5475                           
  5476                           	psect	text18
  5477  003E02                     __ptext18:
  5478                           	opt stack 0
  5479  003E02                     _change_state_to_menu_start:
  5480                           	opt stack 18
  5481                           
  5482                           ;UI.c: 473: cur_state = 0;
  5483                           
  5484                           ; BSR set to: 0
  5485                           ;incstack = 0
  5486  003E02  0E00               	movlw	0
  5487  003E04  0100               	movlb	0	; () banked
  5488  003E06  6FDF               	movwf	(_cur_state+1)& (0+255),b
  5489  003E08  0E00               	movlw	0
  5490  003E0A  6FDE               	movwf	_cur_state& (0+255),b
  5491                           
  5492                           ; BSR set to: 0
  5493                           ;UI.c: 475: lcdInst(0b10000000);;
  5494  003E0C  0E80               	movlw	128
  5495  003E0E  EC0E  F020         	call	_lcdInst
  5496                           
  5497                           ;UI.c: 476: printRTC();
  5498  003E12  EC6A  F00C         	call	_printRTC	;wreg free
  5499                           
  5500                           ;UI.c: 477: lcdInst(0b11000000);;
  5501  003E16  0EC0               	movlw	192
  5502  003E18  EC0E  F020         	call	_lcdInst
  5503                           
  5504                           ;UI.c: 478: printf("PUSH TO CONTINUE");
  5505  003E1C  0E36               	movlw	low STR_30
  5506  003E1E  0100               	movlb	0	; () banked
  5507  003E20  6F8E               	movwf	printf@f& (0+255),b
  5508  003E22  0EFE               	movlw	high STR_30
  5509  003E24  0100               	movlb	0	; () banked
  5510  003E26  6F8F               	movwf	(printf@f+1)& (0+255),b
  5511  003E28  EC97  F008         	call	_printf	;wreg free
  5512  003E2C  0012               	return		;funcret
  5513  003E2E                     __end_of_change_state_to_menu_start:
  5514                           	opt stack 0
  5515                           tblptru	equ	0xFF8
  5516                           tblptrh	equ	0xFF7
  5517                           tblptrl	equ	0xFF6
  5518                           tablat	equ	0xFF5
  5519                           prodh	equ	0xFF4
  5520                           prodl	equ	0xFF3
  5521                           intcon	equ	0xFF2
  5522                           intcon2	equ	0xFF1
  5523                           intcon3	equ	0xFF0
  5524                           postinc0	equ	0xFEE
  5525                           wreg	equ	0xFE8
  5526                           postdec1	equ	0xFE5
  5527                           fsr1l	equ	0xFE1
  5528                           indf2	equ	0xFDF
  5529                           postinc2	equ	0xFDE
  5530                           postdec2	equ	0xFDD
  5531                           fsr2h	equ	0xFDA
  5532                           fsr2l	equ	0xFD9
  5533                           status	equ	0xFD8
  5534                           
  5535 ;; *************** function _initTime *****************
  5536 ;; Defined at:
  5537 ;;		line 17 in file "RTC.c"
  5538 ;; Parameters:    Size  Location     Type
  5539 ;;  s               1    wreg     unsigned char 
  5540 ;;  m               1    0[BANK0 ] unsigned char 
  5541 ;;  h               1    1[BANK0 ] unsigned char 
  5542 ;;  w               1    2[BANK0 ] unsigned char 
  5543 ;;  DD              1    3[BANK0 ] unsigned char 
  5544 ;;  MM              1    4[BANK0 ] unsigned char 
  5545 ;;  YY              1    5[BANK0 ] unsigned char 
  5546 ;; Auto vars:     Size  Location     Type
  5547 ;;  s               1    6[BANK0 ] unsigned char 
  5548 ;; Return value:  Size  Location     Type
  5549 ;;                  1    wreg      void 
  5550 ;; Registers used:
  5551 ;;		wreg
  5552 ;; Tracked objects:
  5553 ;;		On entry : 0/0
  5554 ;;		On exit  : 0/0
  5555 ;;		Unchanged: 0/0
  5556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5557 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5558 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5560 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5561 ;;Total ram usage:        7 bytes
  5562 ;; Hardware stack levels used:    1
  5563 ;; Hardware stack levels required when called:    7
  5564 ;; This function calls:
  5565 ;;		Nothing
  5566 ;; This function is called by:
  5567 ;;		_main
  5568 ;; This function uses a non-reentrant model
  5569 ;;
  5570                           
  5571                           	psect	text19
  5572  003F62                     __ptext19:
  5573                           	opt stack 0
  5574  003F62                     _initTime:
  5575                           	opt stack 23
  5576                           
  5577                           ;incstack = 0
  5578                           ;initTime@s stored from wreg
  5579  003F62  0100               	movlb	0	; () banked
  5580  003F64  6F86               	movwf	initTime@s& (0+255),b
  5581                           
  5582                           ;RTC.c: 19: time[0] = s;
  5583  003F66  C086  F124         	movff	initTime@s,_time
  5584                           
  5585                           ;RTC.c: 20: time[1] = m;
  5586  003F6A  C080  F125         	movff	initTime@m,_time+1
  5587                           
  5588                           ;RTC.c: 21: time[2] = h;
  5589  003F6E  C081  F126         	movff	initTime@h,_time+2
  5590                           
  5591                           ;RTC.c: 22: time[3] = w;
  5592  003F72  C082  F127         	movff	initTime@w,_time+3
  5593                           
  5594                           ;RTC.c: 23: time[4] = DD;
  5595  003F76  C083  F128         	movff	initTime@DD,_time+4
  5596                           
  5597                           ;RTC.c: 24: time[5] = MM;
  5598  003F7A  C084  F129         	movff	initTime@MM,_time+5
  5599                           
  5600                           ;RTC.c: 25: time[6] = YY;
  5601  003F7E  C085  F12A         	movff	initTime@YY,_time+6
  5602  003F82  0012               	return		;funcret
  5603  003F84                     __end_of_initTime:
  5604                           	opt stack 0
  5605                           tblptru	equ	0xFF8
  5606                           tblptrh	equ	0xFF7
  5607                           tblptrl	equ	0xFF6
  5608                           tablat	equ	0xFF5
  5609                           prodh	equ	0xFF4
  5610                           prodl	equ	0xFF3
  5611                           intcon	equ	0xFF2
  5612                           intcon2	equ	0xFF1
  5613                           intcon3	equ	0xFF0
  5614                           postinc0	equ	0xFEE
  5615                           wreg	equ	0xFE8
  5616                           postdec1	equ	0xFE5
  5617                           fsr1l	equ	0xFE1
  5618                           indf2	equ	0xFDF
  5619                           postinc2	equ	0xFDE
  5620                           postdec2	equ	0xFDD
  5621                           fsr2h	equ	0xFDA
  5622                           fsr2l	equ	0xFD9
  5623                           status	equ	0xFD8
  5624                           
  5625 ;; *************** function _initLCD *****************
  5626 ;; Defined at:
  5627 ;;		line 48 in file "lcd.c"
  5628 ;; Parameters:    Size  Location     Type
  5629 ;;		None
  5630 ;; Auto vars:     Size  Location     Type
  5631 ;;		None
  5632 ;; Return value:  Size  Location     Type
  5633 ;;                  1    wreg      void 
  5634 ;; Registers used:
  5635 ;;		wreg, status,2, status,0, cstack
  5636 ;; Tracked objects:
  5637 ;;		On entry : 0/0
  5638 ;;		On exit  : 0/0
  5639 ;;		Unchanged: 0/0
  5640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5643 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5644 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5645 ;;Total ram usage:        1 bytes
  5646 ;; Hardware stack levels used:    1
  5647 ;; Hardware stack levels required when called:    9
  5648 ;; This function calls:
  5649 ;;		_lcdInst
  5650 ;; This function is called by:
  5651 ;;		_main
  5652 ;; This function uses a non-reentrant model
  5653 ;;
  5654                           
  5655                           	psect	text20
  5656  003A60                     __ptext20:
  5657                           	opt stack 0
  5658  003A60                     _initLCD:
  5659                           	opt stack 21
  5660                           
  5661                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  5662                           
  5663                           ;incstack = 0
  5664  003A60  0E9C               	movlw	156
  5665  003A62  0100               	movlb	0	; () banked
  5666  003A64  6F83               	movwf	??_initLCD& (0+255),b
  5667  003A66  0ED7               	movlw	215
  5668  003A68                     u6617:
  5669  003A68  2EE8               	decfsz	wreg,f,c
  5670  003A6A  D7FE               	bra	u6617
  5671  003A6C  2F83               	decfsz	??_initLCD& (0+255),f,b
  5672  003A6E  D7FC               	bra	u6617
  5673                           
  5674                           ;lcd.c: 50: lcdInst(0b00110011);
  5675  003A70  0E33               	movlw	51
  5676  003A72  EC0E  F020         	call	_lcdInst
  5677                           
  5678                           ;lcd.c: 51: lcdInst(0b00110010);
  5679  003A76  0E32               	movlw	50
  5680  003A78  EC0E  F020         	call	_lcdInst
  5681                           
  5682                           ;lcd.c: 53: lcdInst(0b00101000);
  5683  003A7C  0E28               	movlw	40
  5684  003A7E  EC0E  F020         	call	_lcdInst
  5685                           
  5686                           ;lcd.c: 54: lcdInst(0b00001100);
  5687  003A82  0E0C               	movlw	12
  5688  003A84  EC0E  F020         	call	_lcdInst
  5689                           
  5690                           ;lcd.c: 55: lcdInst(0b00000110);
  5691  003A88  0E06               	movlw	6
  5692  003A8A  EC0E  F020         	call	_lcdInst
  5693                           
  5694                           ;lcd.c: 56: lcdInst(0b00000001);
  5695  003A8E  0E01               	movlw	1
  5696  003A90  EC0E  F020         	call	_lcdInst
  5697                           
  5698                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  5699  003A94  0E9C               	movlw	156
  5700  003A96  0100               	movlb	0	; () banked
  5701  003A98  6F83               	movwf	??_initLCD& (0+255),b
  5702  003A9A  0ED7               	movlw	215
  5703  003A9C                     u6627:
  5704  003A9C  2EE8               	decfsz	wreg,f,c
  5705  003A9E  D7FE               	bra	u6627
  5706  003AA0  2F83               	decfsz	??_initLCD& (0+255),f,b
  5707  003AA2  D7FC               	bra	u6627
  5708  003AA4  0012               	return		;funcret
  5709  003AA6                     __end_of_initLCD:
  5710                           	opt stack 0
  5711                           tblptru	equ	0xFF8
  5712                           tblptrh	equ	0xFF7
  5713                           tblptrl	equ	0xFF6
  5714                           tablat	equ	0xFF5
  5715                           prodh	equ	0xFF4
  5716                           prodl	equ	0xFF3
  5717                           intcon	equ	0xFF2
  5718                           intcon2	equ	0xFF1
  5719                           intcon3	equ	0xFF0
  5720                           postinc0	equ	0xFEE
  5721                           wreg	equ	0xFE8
  5722                           postdec1	equ	0xFE5
  5723                           fsr1l	equ	0xFE1
  5724                           indf2	equ	0xFDF
  5725                           postinc2	equ	0xFDE
  5726                           postdec2	equ	0xFDD
  5727                           fsr2h	equ	0xFDA
  5728                           fsr2l	equ	0xFD9
  5729                           status	equ	0xFD8
  5730                           
  5731 ;; *************** function _UI *****************
  5732 ;; Defined at:
  5733 ;;		line 74 in file "UI.c"
  5734 ;; Parameters:    Size  Location     Type
  5735 ;;		None
  5736 ;; Auto vars:     Size  Location     Type
  5737 ;;  i               1   73[BANK0 ] unsigned char 
  5738 ;;  i               1   85[BANK0 ] unsigned char 
  5739 ;;  i               1   84[BANK0 ] unsigned char 
  5740 ;;  i               1   83[BANK0 ] unsigned char 
  5741 ;;  i               1   82[BANK0 ] unsigned char 
  5742 ;;  i               1   81[BANK0 ] unsigned char 
  5743 ;;  i               1   80[BANK0 ] unsigned char 
  5744 ;;  i               1   79[BANK0 ] unsigned char 
  5745 ;;  i               1   78[BANK0 ] unsigned char 
  5746 ;;  i               1   77[BANK0 ] unsigned char 
  5747 ;;  i               1   76[BANK0 ] unsigned char 
  5748 ;;  i               1   75[BANK0 ] unsigned char 
  5749 ;;  i               1   74[BANK0 ] unsigned char 
  5750 ;;  month           4   86[BANK0 ] unsigned char [4]
  5751 ;;  i               1   72[BANK0 ] unsigned char 
  5752 ;; Return value:  Size  Location     Type
  5753 ;;                  1    wreg      void 
  5754 ;; Registers used:
  5755 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5756 ;; Tracked objects:
  5757 ;;		On entry : 0/0
  5758 ;;		On exit  : 0/0
  5759 ;;		Unchanged: 0/0
  5760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5762 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5763 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5764 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5765 ;;Total ram usage:       22 bytes
  5766 ;; Hardware stack levels used:    1
  5767 ;; Hardware stack levels required when called:   11
  5768 ;; This function calls:
  5769 ;;		___awdiv
  5770 ;;		___awmod
  5771 ;;		_change_state_to_menu_12
  5772 ;;		_change_state_to_menu_22
  5773 ;;		_lcdInst
  5774 ;;		_printRTC
  5775 ;;		_printf
  5776 ;;		_strcpy
  5777 ;; This function is called by:
  5778 ;;		_main
  5779 ;; This function uses a non-reentrant model
  5780 ;;
  5781                           
  5782                           	psect	text21
  5783  000012                     __ptext21:
  5784                           	opt stack 0
  5785  000012                     _UI:
  5786                           	opt stack 19
  5787                           
  5788                           ;UI.c: 75: if(machine_state == DoneSorting_state){
  5789                           
  5790                           ;incstack = 0
  5791  000012  0E02               	movlw	2
  5792  000014  0100               	movlb	0	; () banked
  5793  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  5794  000018  A4D8               	btfss	status,2,c
  5795  00001A  D075               	goto	l6763
  5796                           
  5797                           ; BSR set to: 0
  5798                           ;UI.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5799  00001C  0E01               	movlw	1
  5800  00001E  EC0E  F020         	call	_lcdInst
  5801  000022  0E68               	movlw	104
  5802  000024  0100               	movlb	0	; () banked
  5803  000026  6FC4               	movwf	??_UI& (0+255),b
  5804  000028  0EE4               	movlw	228
  5805  00002A                     u6637:
  5806  00002A  2EE8               	decfsz	wreg,f,c
  5807  00002C  D7FE               	bra	u6637
  5808  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  5809  000030  D7FC               	bra	u6637
  5810  000032  F000               	nop	
  5811                           
  5812                           ;UI.c: 77: lcdInst(0b10000000);;
  5813  000034  0E80               	movlw	128
  5814  000036  EC0E  F020         	call	_lcdInst
  5815                           
  5816                           ;UI.c: 78: printf("RESULTS IN LOG %d", sel+1);
  5817  00003A  0E15               	movlw	low STR_1
  5818  00003C  0100               	movlb	0	; () banked
  5819  00003E  6F8E               	movwf	printf@f& (0+255),b
  5820  000040  0EFC               	movlw	high STR_1
  5821  000042  0100               	movlb	0	; () banked
  5822  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  5823  000046  0E01               	movlw	1
  5824  000048  0100               	movlb	0	; () banked
  5825  00004A  25FD               	addwf	_sel& (0+255),w,b
  5826  00004C  0100               	movlb	0	; () banked
  5827  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  5828  000050  0100               	movlb	0	; () banked
  5829  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  5830  000054  0E00               	movlw	0
  5831  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  5832  000058  EC97  F008         	call	_printf	;wreg free
  5833                           
  5834                           ;UI.c: 79: lcdInst(0b11000000);;
  5835  00005C  0EC0               	movlw	192
  5836  00005E  EC0E  F020         	call	_lcdInst
  5837                           
  5838                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  5839  000062  0E0E               	movlw	14
  5840  000064  0100               	movlb	0	; () banked
  5841  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5842  000068  0E10               	movlw	16
  5843  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  5844  00006C  C0F8  F080         	movff	_total_time,___awmod@dividend
  5845  000070  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  5846  000074  ECD5  F018         	call	___awmod	;wreg free
  5847  000078  C080  F0C6         	movff	?___awmod,_UI$2205
  5848  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2205+1
  5849                           
  5850                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  5851  000080  0E44               	movlw	low STR_2
  5852  000082  0100               	movlb	0	; () banked
  5853  000084  6F8E               	movwf	printf@f& (0+255),b
  5854  000086  0EFF               	movlw	high STR_2
  5855  000088  0100               	movlb	0	; () banked
  5856  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  5857  00008C  0E0E               	movlw	14
  5858  00008E  0100               	movlb	0	; () banked
  5859  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5860  000092  0E10               	movlw	16
  5861  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  5862  000096  C0F8  F080         	movff	_total_time,___awmod@dividend
  5863  00009A  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  5864  00009E  ECD5  F018         	call	___awmod	;wreg free
  5865  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  5866  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  5867  0000AA  0E00               	movlw	0
  5868  0000AC  0100               	movlb	0	; () banked
  5869  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5870  0000B0  0E3C               	movlw	60
  5871  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  5872  0000B4  ECC3  F017         	call	___awdiv	;wreg free
  5873  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  5874  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  5875  0000C0  C0C6  F080         	movff	_UI$2205,___awmod@dividend
  5876  0000C4  C0C7  F081         	movff	_UI$2205+1,___awmod@dividend+1
  5877  0000C8  0E00               	movlw	0
  5878  0000CA  0100               	movlb	0	; () banked
  5879  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5880  0000CE  0E3C               	movlw	60
  5881  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  5882  0000D2  ECD5  F018         	call	___awmod	;wreg free
  5883  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  5884  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  5885  0000DE  EC97  F008         	call	_printf	;wreg free
  5886                           
  5887                           ;UI.c: 81: machine_state = UI_state;
  5888  0000E2  0E00               	movlw	0
  5889  0000E4  0100               	movlb	0	; () banked
  5890  0000E6  6FFC               	movwf	_machine_state& (0+255),b
  5891  0000E8                     l177:
  5892  0000E8  A281               	btfss	3969,1,c	;volatile
  5893  0000EA  D7FE               	goto	l177
  5894                           
  5895                           ;UI.c: 84: }
  5896                           ;UI.c: 85: if(cur_state==12){
  5897  0000EC  0E0C               	movlw	12
  5898  0000EE  0100               	movlb	0	; () banked
  5899  0000F0  19DE               	xorwf	_cur_state& (0+255),w,b
  5900  0000F2  0100               	movlb	0	; () banked
  5901  0000F4  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  5902  0000F6  A4D8               	btfss	status,2,c
  5903  0000F8  D003               	goto	l6761
  5904                           
  5905                           ; BSR set to: 0
  5906                           ;UI.c: 86: change_state_to_menu_12();
  5907  0000FA  EC90  F01D         	call	_change_state_to_menu_12	;wreg free
  5908                           
  5909                           ;UI.c: 87: }
  5910  0000FE  D3D5               	goto	l7083
  5911  000100                     l6761:
  5912                           
  5913                           ;UI.c: 88: else{
  5914                           ;UI.c: 89: change_state_to_menu_22();
  5915  000100  EC74  F01D         	call	_change_state_to_menu_22	;wreg free
  5916                           
  5917                           ;UI.c: 90: }
  5918                           ;UI.c: 91: }
  5919  000104  D3D2               	goto	l7083
  5920  000106                     l6763:
  5921                           
  5922                           ;UI.c: 92: else if(cur_state == 0){
  5923  000106  0100               	movlb	0	; () banked
  5924  000108  51DE               	movf	_cur_state& (0+255),w,b
  5925  00010A  0100               	movlb	0	; () banked
  5926  00010C  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  5927  00010E  A4D8               	btfss	status,2,c
  5928  000110  D3CC               	goto	l7083
  5929                           
  5930                           ; BSR set to: 0
  5931                           ;UI.c: 93: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  5932  000112  0E00               	movlw	0
  5933  000114  0100               	movlb	0	; () banked
  5934  000116  6FC8               	movwf	UI@i& (0+255),b
  5935  000118                     l6767:
  5936                           
  5937                           ; BSR set to: 0
  5938  000118  0E63               	movlw	99
  5939  00011A  0100               	movlb	0	; () banked
  5940  00011C  65C8               	cpfsgt	UI@i& (0+255),b
  5941  00011E  D001               	goto	l6771
  5942  000120  D00C               	goto	l6775
  5943  000122                     l6771:
  5944                           
  5945                           ; BSR set to: 0
  5946  000122  0E68               	movlw	104
  5947  000124  0100               	movlb	0	; () banked
  5948  000126  6FC4               	movwf	??_UI& (0+255),b
  5949  000128  0EE4               	movlw	228
  5950  00012A                     u6647:
  5951  00012A  2EE8               	decfsz	wreg,f,c
  5952  00012C  D7FE               	bra	u6647
  5953  00012E  2FC4               	decfsz	??_UI& (0+255),f,b
  5954  000130  D7FC               	bra	u6647
  5955  000132  F000               	nop	
  5956  000134  0100               	movlb	0	; () banked
  5957  000136  2BC8               	incf	UI@i& (0+255),f,b
  5958  000138  D7EF               	goto	l6767
  5959  00013A                     l6775:
  5960                           
  5961                           ; BSR set to: 0
  5962                           ;UI.c: 94: if(cur_state == 0){
  5963  00013A  0100               	movlb	0	; () banked
  5964  00013C  51DE               	movf	_cur_state& (0+255),w,b
  5965  00013E  0100               	movlb	0	; () banked
  5966  000140  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  5967  000142  A4D8               	btfss	status,2,c
  5968  000144  D3B2               	goto	l7083
  5969                           
  5970                           ; BSR set to: 0
  5971                           ;UI.c: 95: printRTC();
  5972  000146  EC6A  F00C         	call	_printRTC	;wreg free
  5973                           
  5974                           ;UI.c: 96: }
  5975                           ;UI.c: 97: }
  5976                           ;UI.c: 98: while(logstate){
  5977  00014A  D3AF               	goto	l7083
  5978  00014C                     l6779:
  5979                           
  5980                           ;UI.c: 100: if(!log_completion){
  5981  00014C  0100               	movlb	0	; () banked
  5982  00014E  51E8               	movf	_log_completion& (0+255),w,b
  5983  000150  0100               	movlb	0	; () banked
  5984  000152  11E9               	iorwf	(_log_completion+1)& (0+255),w,b
  5985  000154  A4D8               	btfss	status,2,c
  5986  000156  D041               	goto	l6809
  5987                           
  5988                           ; BSR set to: 0
  5989                           ;UI.c: 101: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5990  000158  0E01               	movlw	1
  5991  00015A  EC0E  F020         	call	_lcdInst
  5992  00015E  0E68               	movlw	104
  5993  000160  0100               	movlb	0	; () banked
  5994  000162  6FC4               	movwf	??_UI& (0+255),b
  5995  000164  0EE4               	movlw	228
  5996  000166                     u6657:
  5997  000166  2EE8               	decfsz	wreg,f,c
  5998  000168  D7FE               	bra	u6657
  5999  00016A  2FC4               	decfsz	??_UI& (0+255),f,b
  6000  00016C  D7FC               	bra	u6657
  6001  00016E  F000               	nop	
  6002                           
  6003                           ;UI.c: 102: lcdInst(0b10000000);;
  6004  000170  0E80               	movlw	128
  6005  000172  EC0E  F020         	call	_lcdInst
  6006                           
  6007                           ;UI.c: 103: printf("-- LOG %2d HERE--", log);
  6008  000176  0E03               	movlw	low STR_3
  6009  000178  0100               	movlb	0	; () banked
  6010  00017A  6F8E               	movwf	printf@f& (0+255),b
  6011  00017C  0EFC               	movlw	high STR_3
  6012  00017E  0100               	movlb	0	; () banked
  6013  000180  6F8F               	movwf	(printf@f+1)& (0+255),b
  6014  000182  C0E6  F090         	movff	_log,?_printf+2
  6015  000186  C0E7  F091         	movff	_log+1,?_printf+3
  6016  00018A  EC97  F008         	call	_printf	;wreg free
  6017                           
  6018                           ;UI.c: 104: lcdInst(0b11000000);;
  6019  00018E  0EC0               	movlw	192
  6020  000190  EC0E  F020         	call	_lcdInst
  6021                           
  6022                           ;UI.c: 105: printf("DIDN'T COMPLETE");
  6023  000194  0E67               	movlw	low STR_4
  6024  000196  0100               	movlb	0	; () banked
  6025  000198  6F8E               	movwf	printf@f& (0+255),b
  6026  00019A  0EFE               	movlw	high STR_4
  6027  00019C  0100               	movlb	0	; () banked
  6028  00019E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6029  0001A0  EC97  F008         	call	_printf	;wreg free
  6030  0001A4                     l6793:
  6031  0001A4  0E00               	movlw	0
  6032  0001A6  0100               	movlb	0	; () banked
  6033  0001A8  6FC9               	movwf	UI@i_408& (0+255),b
  6034  0001AA                     l6795:
  6035                           
  6036                           ; BSR set to: 0
  6037  0001AA  0E63               	movlw	99
  6038  0001AC  0100               	movlb	0	; () banked
  6039  0001AE  65C9               	cpfsgt	UI@i_408& (0+255),b
  6040  0001B0  D001               	goto	l6799
  6041  0001B2  D00C               	goto	l6803
  6042  0001B4                     l6799:
  6043                           
  6044                           ; BSR set to: 0
  6045  0001B4  0E68               	movlw	104
  6046  0001B6  0100               	movlb	0	; () banked
  6047  0001B8  6FC4               	movwf	??_UI& (0+255),b
  6048  0001BA  0EE4               	movlw	228
  6049  0001BC                     u6667:
  6050  0001BC  2EE8               	decfsz	wreg,f,c
  6051  0001BE  D7FE               	bra	u6667
  6052  0001C0  2FC4               	decfsz	??_UI& (0+255),f,b
  6053  0001C2  D7FC               	bra	u6667
  6054  0001C4  F000               	nop	
  6055  0001C6  0100               	movlb	0	; () banked
  6056  0001C8  2BC9               	incf	UI@i_408& (0+255),f,b
  6057  0001CA  D7EF               	goto	l6795
  6058  0001CC                     l6803:
  6059                           
  6060                           ; BSR set to: 0
  6061  0001CC  0100               	movlb	0	; () banked
  6062  0001CE  51F6               	movf	_logstate& (0+255),w,b
  6063  0001D0  0100               	movlb	0	; () banked
  6064  0001D2  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6065  0001D4  B4D8               	btfsc	status,2,c
  6066  0001D6  0012               	return	
  6067  0001D8  D7E5               	goto	l6793
  6068  0001DA                     l6809:
  6069                           
  6070                           ; BSR set to: 0
  6071                           ;UI.c: 109: else{
  6072                           ;UI.c: 110: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6073  0001DA  0E01               	movlw	1
  6074  0001DC  EC0E  F020         	call	_lcdInst
  6075  0001E0  0E68               	movlw	104
  6076  0001E2  0100               	movlb	0	; () banked
  6077  0001E4  6FC4               	movwf	??_UI& (0+255),b
  6078  0001E6  0EE4               	movlw	228
  6079  0001E8                     u6677:
  6080  0001E8  2EE8               	decfsz	wreg,f,c
  6081  0001EA  D7FE               	bra	u6677
  6082  0001EC  2FC4               	decfsz	??_UI& (0+255),f,b
  6083  0001EE  D7FC               	bra	u6677
  6084  0001F0  F000               	nop	
  6085                           
  6086                           ;UI.c: 111: lcdInst(0b10000000);;
  6087  0001F2  0E80               	movlw	128
  6088  0001F4  EC0E  F020         	call	_lcdInst
  6089                           
  6090                           ;UI.c: 112: printf("-- LOG %2d HERE--", log);
  6091  0001F8  0E03               	movlw	low STR_3
  6092  0001FA  0100               	movlb	0	; () banked
  6093  0001FC  6F8E               	movwf	printf@f& (0+255),b
  6094  0001FE  0EFC               	movlw	high STR_3
  6095  000200  0100               	movlb	0	; () banked
  6096  000202  6F8F               	movwf	(printf@f+1)& (0+255),b
  6097  000204  C0E6  F090         	movff	_log,?_printf+2
  6098  000208  C0E7  F091         	movff	_log+1,?_printf+3
  6099  00020C  EC97  F008         	call	_printf	;wreg free
  6100                           
  6101                           ;UI.c: 113: lcdInst(0b11000000);;
  6102  000210  0EC0               	movlw	192
  6103  000212  EC0E  F020         	call	_lcdInst
  6104                           
  6105                           ;UI.c: 114: printf("PAUSE < | BACK >");
  6106  000216  0E25               	movlw	low STR_6
  6107  000218  0100               	movlb	0	; () banked
  6108  00021A  6F8E               	movwf	printf@f& (0+255),b
  6109  00021C  0EFE               	movlw	high STR_6
  6110  00021E  0100               	movlb	0	; () banked
  6111  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  6112  000222  EC97  F008         	call	_printf	;wreg free
  6113                           
  6114                           ;UI.c: 116: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6115  000226  0E00               	movlw	0
  6116  000228  0100               	movlb	0	; () banked
  6117  00022A  6FCA               	movwf	UI@i_411& (0+255),b
  6118  00022C                     l6823:
  6119                           
  6120                           ; BSR set to: 0
  6121  00022C  0E63               	movlw	99
  6122  00022E  0100               	movlb	0	; () banked
  6123  000230  65CA               	cpfsgt	UI@i_411& (0+255),b
  6124  000232  D001               	goto	l6827
  6125  000234  D00C               	goto	l6831
  6126  000236                     l6827:
  6127                           
  6128                           ; BSR set to: 0
  6129  000236  0E68               	movlw	104
  6130  000238  0100               	movlb	0	; () banked
  6131  00023A  6FC4               	movwf	??_UI& (0+255),b
  6132  00023C  0EE4               	movlw	228
  6133  00023E                     u6687:
  6134  00023E  2EE8               	decfsz	wreg,f,c
  6135  000240  D7FE               	bra	u6687
  6136  000242  2FC4               	decfsz	??_UI& (0+255),f,b
  6137  000244  D7FC               	bra	u6687
  6138  000246  F000               	nop	
  6139  000248  0100               	movlb	0	; () banked
  6140  00024A  2BCA               	incf	UI@i_411& (0+255),f,b
  6141  00024C  D7EF               	goto	l6823
  6142  00024E                     l6831:
  6143                           
  6144                           ; BSR set to: 0
  6145  00024E  0100               	movlb	0	; () banked
  6146  000250  51F6               	movf	_logstate& (0+255),w,b
  6147  000252  0100               	movlb	0	; () banked
  6148  000254  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6149  000256  B4D8               	btfsc	status,2,c
  6150  000258  0012               	return	
  6151                           
  6152                           ; BSR set to: 0
  6153                           ;UI.c: 117: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6154                           
  6155                           ; BSR set to: 0
  6156                           
  6157                           ; BSR set to: 0
  6158  00025A  0E00               	movlw	0
  6159  00025C  0100               	movlb	0	; () banked
  6160  00025E  6FCB               	movwf	UI@i_412& (0+255),b
  6161  000260                     l6837:
  6162                           
  6163                           ; BSR set to: 0
  6164  000260  0E63               	movlw	99
  6165  000262  0100               	movlb	0	; () banked
  6166  000264  65CB               	cpfsgt	UI@i_412& (0+255),b
  6167  000266  D001               	goto	l6841
  6168  000268  D00C               	goto	l6845
  6169  00026A                     l6841:
  6170                           
  6171                           ; BSR set to: 0
  6172  00026A  0E68               	movlw	104
  6173  00026C  0100               	movlb	0	; () banked
  6174  00026E  6FC4               	movwf	??_UI& (0+255),b
  6175  000270  0EE4               	movlw	228
  6176  000272                     u6697:
  6177  000272  2EE8               	decfsz	wreg,f,c
  6178  000274  D7FE               	bra	u6697
  6179  000276  2FC4               	decfsz	??_UI& (0+255),f,b
  6180  000278  D7FC               	bra	u6697
  6181  00027A  F000               	nop	
  6182  00027C  0100               	movlb	0	; () banked
  6183  00027E  2BCB               	incf	UI@i_412& (0+255),f,b
  6184  000280  D7EF               	goto	l6837
  6185  000282                     l6845:
  6186                           
  6187                           ; BSR set to: 0
  6188  000282  0100               	movlb	0	; () banked
  6189  000284  51F6               	movf	_logstate& (0+255),w,b
  6190  000286  0100               	movlb	0	; () banked
  6191  000288  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6192  00028A  B4D8               	btfsc	status,2,c
  6193  00028C  0012               	return	
  6194                           
  6195                           ; BSR set to: 0
  6196                           ;UI.c: 119: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6197                           
  6198                           ; BSR set to: 0
  6199                           
  6200                           ; BSR set to: 0
  6201  00028E  0E01               	movlw	1
  6202  000290  EC0E  F020         	call	_lcdInst
  6203  000294  0E68               	movlw	104
  6204  000296  0100               	movlb	0	; () banked
  6205  000298  6FC4               	movwf	??_UI& (0+255),b
  6206  00029A  0EE4               	movlw	228
  6207  00029C                     u6707:
  6208  00029C  2EE8               	decfsz	wreg,f,c
  6209  00029E  D7FE               	bra	u6707
  6210  0002A0  2FC4               	decfsz	??_UI& (0+255),f,b
  6211  0002A2  D7FC               	bra	u6707
  6212  0002A4  F000               	nop	
  6213                           
  6214                           ;UI.c: 120: lcdInst(0b10000000);;
  6215  0002A6  0E80               	movlw	128
  6216  0002A8  EC0E  F020         	call	_lcdInst
  6217                           
  6218                           ;UI.c: 121: printf("START:");
  6219  0002AC  0EC3               	movlw	low STR_7
  6220  0002AE  0100               	movlb	0	; () banked
  6221  0002B0  6F8E               	movwf	printf@f& (0+255),b
  6222  0002B2  0EFF               	movlw	high STR_7
  6223  0002B4  0100               	movlb	0	; () banked
  6224  0002B6  6F8F               	movwf	(printf@f+1)& (0+255),b
  6225  0002B8  EC97  F008         	call	_printf	;wreg free
  6226                           
  6227                           ;UI.c: 122: lcdInst(0b11000000);;
  6228  0002BC  0EC0               	movlw	192
  6229  0002BE  EC0E  F020         	call	_lcdInst
  6230                           
  6231                           ;UI.c: 123: char month[] = "MMM";
  6232  0002C2  C12D  F0D6         	movff	UI@F3220,UI@month
  6233  0002C6  C12E  F0D7         	movff	UI@F3220+1,UI@month+1
  6234  0002CA  C12F  F0D8         	movff	UI@F3220+2,UI@month+2
  6235  0002CE  C130  F0D9         	movff	UI@F3220+3,UI@month+3
  6236                           
  6237                           ;UI.c: 124: switch(log_startTime[5]){
  6238  0002D2  D0C3               	goto	l6889
  6239  0002D4                     l6861:
  6240                           
  6241                           ;UI.c: 126: strcpy(month, "JAN");
  6242  0002D4  0ED6               	movlw	low UI@month
  6243  0002D6  0100               	movlb	0	; () banked
  6244  0002D8  6F80               	movwf	strcpy@to& (0+255),b
  6245  0002DA  0E00               	movlw	high UI@month
  6246  0002DC  0100               	movlb	0	; () banked
  6247  0002DE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6248  0002E0  0EDA               	movlw	low STR_8
  6249  0002E2  0100               	movlb	0	; () banked
  6250  0002E4  6F82               	movwf	strcpy@from& (0+255),b
  6251  0002E6  0EFF               	movlw	high STR_8
  6252  0002E8  0100               	movlb	0	; () banked
  6253  0002EA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6254  0002EC  ECAC  F01D         	call	_strcpy	;wreg free
  6255                           
  6256                           ;UI.c: 127: break;
  6257  0002F0  D0E6               	goto	l6891
  6258  0002F2                     l6863:
  6259                           
  6260                           ;UI.c: 129: strcpy(month, "FEB");
  6261  0002F2  0ED6               	movlw	low UI@month
  6262  0002F4  0100               	movlb	0	; () banked
  6263  0002F6  6F80               	movwf	strcpy@to& (0+255),b
  6264  0002F8  0E00               	movlw	high UI@month
  6265  0002FA  0100               	movlb	0	; () banked
  6266  0002FC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6267  0002FE  0ECA               	movlw	low STR_9
  6268  000300  0100               	movlb	0	; () banked
  6269  000302  6F82               	movwf	strcpy@from& (0+255),b
  6270  000304  0EFF               	movlw	high STR_9
  6271  000306  0100               	movlb	0	; () banked
  6272  000308  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6273  00030A  ECAC  F01D         	call	_strcpy	;wreg free
  6274                           
  6275                           ;UI.c: 130: break;
  6276  00030E  D0D7               	goto	l6891
  6277  000310                     l6865:
  6278                           
  6279                           ;UI.c: 132: strcpy(month, "MAR");
  6280  000310  0ED6               	movlw	low UI@month
  6281  000312  0100               	movlb	0	; () banked
  6282  000314  6F80               	movwf	strcpy@to& (0+255),b
  6283  000316  0E00               	movlw	high UI@month
  6284  000318  0100               	movlb	0	; () banked
  6285  00031A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6286  00031C  0EE6               	movlw	low STR_10
  6287  00031E  0100               	movlb	0	; () banked
  6288  000320  6F82               	movwf	strcpy@from& (0+255),b
  6289  000322  0EFF               	movlw	high STR_10
  6290  000324  0100               	movlb	0	; () banked
  6291  000326  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6292  000328  ECAC  F01D         	call	_strcpy	;wreg free
  6293                           
  6294                           ;UI.c: 133: break;
  6295  00032C  D0C8               	goto	l6891
  6296  00032E                     l6867:
  6297                           
  6298                           ;UI.c: 135: strcpy(month, "APR");
  6299  00032E  0ED6               	movlw	low UI@month
  6300  000330  0100               	movlb	0	; () banked
  6301  000332  6F80               	movwf	strcpy@to& (0+255),b
  6302  000334  0E00               	movlw	high UI@month
  6303  000336  0100               	movlb	0	; () banked
  6304  000338  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6305  00033A  0EEA               	movlw	low STR_11
  6306  00033C  0100               	movlb	0	; () banked
  6307  00033E  6F82               	movwf	strcpy@from& (0+255),b
  6308  000340  0EFF               	movlw	high STR_11
  6309  000342  0100               	movlb	0	; () banked
  6310  000344  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6311  000346  ECAC  F01D         	call	_strcpy	;wreg free
  6312                           
  6313                           ;UI.c: 136: break;
  6314  00034A  D0B9               	goto	l6891
  6315  00034C                     l6869:
  6316                           
  6317                           ;UI.c: 138: strcpy(month, "MAY");
  6318  00034C  0ED6               	movlw	low UI@month
  6319  00034E  0100               	movlb	0	; () banked
  6320  000350  6F80               	movwf	strcpy@to& (0+255),b
  6321  000352  0E00               	movlw	high UI@month
  6322  000354  0100               	movlb	0	; () banked
  6323  000356  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6324  000358  0EFA               	movlw	low STR_12
  6325  00035A  0100               	movlb	0	; () banked
  6326  00035C  6F82               	movwf	strcpy@from& (0+255),b
  6327  00035E  0EFF               	movlw	high STR_12
  6328  000360  0100               	movlb	0	; () banked
  6329  000362  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6330  000364  ECAC  F01D         	call	_strcpy	;wreg free
  6331                           
  6332                           ;UI.c: 139: break;
  6333  000368  D0AA               	goto	l6891
  6334  00036A                     l6871:
  6335                           
  6336                           ;UI.c: 141: strcpy(month, "JUN");
  6337  00036A  0ED6               	movlw	low UI@month
  6338  00036C  0100               	movlb	0	; () banked
  6339  00036E  6F80               	movwf	strcpy@to& (0+255),b
  6340  000370  0E00               	movlw	high UI@month
  6341  000372  0100               	movlb	0	; () banked
  6342  000374  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6343  000376  0EDE               	movlw	low STR_13
  6344  000378  0100               	movlb	0	; () banked
  6345  00037A  6F82               	movwf	strcpy@from& (0+255),b
  6346  00037C  0EFF               	movlw	high STR_13
  6347  00037E  0100               	movlb	0	; () banked
  6348  000380  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6349  000382  ECAC  F01D         	call	_strcpy	;wreg free
  6350                           
  6351                           ;UI.c: 142: break;
  6352  000386  D09B               	goto	l6891
  6353  000388                     l6873:
  6354                           
  6355                           ;UI.c: 144: strcpy(month, "JUL");
  6356  000388  0ED6               	movlw	low UI@month
  6357  00038A  0100               	movlb	0	; () banked
  6358  00038C  6F80               	movwf	strcpy@to& (0+255),b
  6359  00038E  0E00               	movlw	high UI@month
  6360  000390  0100               	movlb	0	; () banked
  6361  000392  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6362  000394  0ED6               	movlw	low STR_14
  6363  000396  0100               	movlb	0	; () banked
  6364  000398  6F82               	movwf	strcpy@from& (0+255),b
  6365  00039A  0EFF               	movlw	high STR_14
  6366  00039C  0100               	movlb	0	; () banked
  6367  00039E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6368  0003A0  ECAC  F01D         	call	_strcpy	;wreg free
  6369                           
  6370                           ;UI.c: 145: break;
  6371  0003A4  D08C               	goto	l6891
  6372  0003A6                     l6875:
  6373                           
  6374                           ;UI.c: 147: strcpy(month, "AUG");
  6375  0003A6  0ED6               	movlw	low UI@month
  6376  0003A8  0100               	movlb	0	; () banked
  6377  0003AA  6F80               	movwf	strcpy@to& (0+255),b
  6378  0003AC  0E00               	movlw	high UI@month
  6379  0003AE  0100               	movlb	0	; () banked
  6380  0003B0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6381  0003B2  0ED2               	movlw	low STR_15
  6382  0003B4  0100               	movlb	0	; () banked
  6383  0003B6  6F82               	movwf	strcpy@from& (0+255),b
  6384  0003B8  0EFF               	movlw	high STR_15
  6385  0003BA  0100               	movlb	0	; () banked
  6386  0003BC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6387  0003BE  ECAC  F01D         	call	_strcpy	;wreg free
  6388                           
  6389                           ;UI.c: 148: break;
  6390  0003C2  D07D               	goto	l6891
  6391  0003C4                     l6877:
  6392                           
  6393                           ;UI.c: 150: strcpy(month, "SEP");
  6394  0003C4  0ED6               	movlw	low UI@month
  6395  0003C6  0100               	movlb	0	; () banked
  6396  0003C8  6F80               	movwf	strcpy@to& (0+255),b
  6397  0003CA  0E00               	movlw	high UI@month
  6398  0003CC  0100               	movlb	0	; () banked
  6399  0003CE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6400  0003D0  0EE2               	movlw	low STR_16
  6401  0003D2  0100               	movlb	0	; () banked
  6402  0003D4  6F82               	movwf	strcpy@from& (0+255),b
  6403  0003D6  0EFF               	movlw	high STR_16
  6404  0003D8  0100               	movlb	0	; () banked
  6405  0003DA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6406  0003DC  ECAC  F01D         	call	_strcpy	;wreg free
  6407                           
  6408                           ;UI.c: 151: break;
  6409  0003E0  D06E               	goto	l6891
  6410  0003E2                     l6879:
  6411                           
  6412                           ;UI.c: 153: strcpy(month, "OCT");
  6413  0003E2  0ED6               	movlw	low UI@month
  6414  0003E4  0100               	movlb	0	; () banked
  6415  0003E6  6F80               	movwf	strcpy@to& (0+255),b
  6416  0003E8  0E00               	movlw	high UI@month
  6417  0003EA  0100               	movlb	0	; () banked
  6418  0003EC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6419  0003EE  0EF2               	movlw	low STR_17
  6420  0003F0  0100               	movlb	0	; () banked
  6421  0003F2  6F82               	movwf	strcpy@from& (0+255),b
  6422  0003F4  0EFF               	movlw	high STR_17
  6423  0003F6  0100               	movlb	0	; () banked
  6424  0003F8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6425  0003FA  ECAC  F01D         	call	_strcpy	;wreg free
  6426                           
  6427                           ;UI.c: 154: break;
  6428  0003FE  D05F               	goto	l6891
  6429  000400                     l6881:
  6430                           
  6431                           ;UI.c: 156: strcpy(month, "NOV");
  6432  000400  0ED6               	movlw	low UI@month
  6433  000402  0100               	movlb	0	; () banked
  6434  000404  6F80               	movwf	strcpy@to& (0+255),b
  6435  000406  0E00               	movlw	high UI@month
  6436  000408  0100               	movlb	0	; () banked
  6437  00040A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6438  00040C  0EF6               	movlw	low STR_18
  6439  00040E  0100               	movlb	0	; () banked
  6440  000410  6F82               	movwf	strcpy@from& (0+255),b
  6441  000412  0EFF               	movlw	high STR_18
  6442  000414  0100               	movlb	0	; () banked
  6443  000416  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6444  000418  ECAC  F01D         	call	_strcpy	;wreg free
  6445                           
  6446                           ;UI.c: 157: break;
  6447  00041C  D050               	goto	l6891
  6448  00041E                     l6883:
  6449                           
  6450                           ;UI.c: 159: strcpy(month, "DEC");
  6451  00041E  0ED6               	movlw	low UI@month
  6452  000420  0100               	movlb	0	; () banked
  6453  000422  6F80               	movwf	strcpy@to& (0+255),b
  6454  000424  0E00               	movlw	high UI@month
  6455  000426  0100               	movlb	0	; () banked
  6456  000428  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6457  00042A  0ECE               	movlw	low STR_19
  6458  00042C  0100               	movlb	0	; () banked
  6459  00042E  6F82               	movwf	strcpy@from& (0+255),b
  6460  000430  0EFF               	movlw	high STR_19
  6461  000432  0100               	movlb	0	; () banked
  6462  000434  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6463  000436  ECAC  F01D         	call	_strcpy	;wreg free
  6464                           
  6465                           ;UI.c: 160: break;
  6466  00043A  D041               	goto	l6891
  6467  00043C                     l6885:
  6468                           
  6469                           ;UI.c: 162: strcpy(month, "ERR");
  6470  00043C  0ED6               	movlw	low UI@month
  6471  00043E  0100               	movlb	0	; () banked
  6472  000440  6F80               	movwf	strcpy@to& (0+255),b
  6473  000442  0E00               	movlw	high UI@month
  6474  000444  0100               	movlb	0	; () banked
  6475  000446  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6476  000448  0EEE               	movlw	low STR_20
  6477  00044A  0100               	movlb	0	; () banked
  6478  00044C  6F82               	movwf	strcpy@from& (0+255),b
  6479  00044E  0EFF               	movlw	high STR_20
  6480  000450  0100               	movlb	0	; () banked
  6481  000452  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6482  000454  ECAC  F01D         	call	_strcpy	;wreg free
  6483                           
  6484                           ;UI.c: 164: }
  6485                           
  6486                           ;UI.c: 163: break;
  6487  000458  D032               	goto	l6891
  6488  00045A                     l6889:
  6489  00045A  EE21  F00A         	lfsr	2,_log_startTime+10
  6490  00045E  CFDE F0C4          	movff	postinc2,??_UI
  6491  000462  CFDD F0C5          	movff	postdec2,??_UI+1
  6492                           
  6493                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6494                           ; Switch size 1, requested type "space"
  6495                           ; Number of cases is 1, Range of values is 0 to 0
  6496                           ; switch strategies available:
  6497                           ; Name         Instructions Cycles
  6498                           ; simple_byte            4     3 (average)
  6499                           ;	Chosen strategy is simple_byte
  6500  000466  0100               	movlb	0	; () banked
  6501  000468  51C5               	movf	(??_UI+1)& (0+255),w,b
  6502  00046A  0A00               	xorlw	0	; case 0
  6503  00046C  A4D8               	btfss	status,2,c
  6504  00046E  D7E6               	goto	l6885
  6505                           
  6506                           ; BSR set to: 0
  6507                           ; Switch size 1, requested type "space"
  6508                           ; Number of cases is 12, Range of values is 1 to 12
  6509                           ; switch strategies available:
  6510                           ; Name         Instructions Cycles
  6511                           ; simple_byte           37    19 (average)
  6512                           ;	Chosen strategy is simple_byte
  6513  000470  0100               	movlb	0	; () banked
  6514  000472  51C4               	movf	??_UI& (0+255),w,b
  6515  000474  0A01               	xorlw	1	; case 1
  6516  000476  B4D8               	btfsc	status,2,c
  6517  000478  D72D               	goto	l6861
  6518  00047A  0A03               	xorlw	3	; case 2
  6519  00047C  B4D8               	btfsc	status,2,c
  6520  00047E  D739               	goto	l6863
  6521  000480  0A01               	xorlw	1	; case 3
  6522  000482  B4D8               	btfsc	status,2,c
  6523  000484  D745               	goto	l6865
  6524  000486  0A07               	xorlw	7	; case 4
  6525  000488  B4D8               	btfsc	status,2,c
  6526  00048A  D751               	goto	l6867
  6527  00048C  0A01               	xorlw	1	; case 5
  6528  00048E  B4D8               	btfsc	status,2,c
  6529  000490  D75D               	goto	l6869
  6530  000492  0A03               	xorlw	3	; case 6
  6531  000494  B4D8               	btfsc	status,2,c
  6532  000496  D769               	goto	l6871
  6533  000498  0A01               	xorlw	1	; case 7
  6534  00049A  B4D8               	btfsc	status,2,c
  6535  00049C  D775               	goto	l6873
  6536  00049E  0A0F               	xorlw	15	; case 8
  6537  0004A0  B4D8               	btfsc	status,2,c
  6538  0004A2  D781               	goto	l6875
  6539  0004A4  0A01               	xorlw	1	; case 9
  6540  0004A6  B4D8               	btfsc	status,2,c
  6541  0004A8  D78D               	goto	l6877
  6542  0004AA  0A03               	xorlw	3	; case 10
  6543  0004AC  B4D8               	btfsc	status,2,c
  6544  0004AE  D799               	goto	l6879
  6545  0004B0  0A01               	xorlw	1	; case 11
  6546  0004B2  B4D8               	btfsc	status,2,c
  6547  0004B4  D7A5               	goto	l6881
  6548  0004B6  0A07               	xorlw	7	; case 12
  6549  0004B8  B4D8               	btfsc	status,2,c
  6550  0004BA  D7B1               	goto	l6883
  6551  0004BC  D7BF               	goto	l6885
  6552  0004BE                     l6891:
  6553                           
  6554                           ;UI.c: 165: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  6555  0004BE  0E8C               	movlw	low STR_21
  6556  0004C0  0100               	movlb	0	; () banked
  6557  0004C2  6F8E               	movwf	printf@f& (0+255),b
  6558  0004C4  0EFB               	movlw	high STR_21
  6559  0004C6  0100               	movlb	0	; () banked
  6560  0004C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6561  0004CA  C108  F090         	movff	_log_startTime+8,?_printf+2
  6562  0004CE  C109  F091         	movff	_log_startTime+9,?_printf+3
  6563  0004D2  0ED6               	movlw	low UI@month
  6564  0004D4  0100               	movlb	0	; () banked
  6565  0004D6  6F92               	movwf	(?_printf+4)& (0+255),b
  6566  0004D8  0E00               	movlw	high UI@month
  6567  0004DA  0100               	movlb	0	; () banked
  6568  0004DC  6F93               	movwf	(?_printf+5)& (0+255),b
  6569  0004DE  C104  F094         	movff	_log_startTime+4,?_printf+6
  6570  0004E2  C105  F095         	movff	_log_startTime+5,?_printf+7
  6571  0004E6  C102  F096         	movff	_log_startTime+2,?_printf+8
  6572  0004EA  C103  F097         	movff	_log_startTime+3,?_printf+9
  6573  0004EE  C100  F098         	movff	_log_startTime,?_printf+10
  6574  0004F2  C101  F099         	movff	_log_startTime+1,?_printf+11
  6575  0004F6  EC97  F008         	call	_printf	;wreg free
  6576                           
  6577                           ;UI.c: 167: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6578  0004FA  0E00               	movlw	0
  6579  0004FC  0100               	movlb	0	; () banked
  6580  0004FE  6FCC               	movwf	UI@i_430& (0+255),b
  6581  000500                     l6895:
  6582                           
  6583                           ; BSR set to: 0
  6584  000500  0E63               	movlw	99
  6585  000502  0100               	movlb	0	; () banked
  6586  000504  65CC               	cpfsgt	UI@i_430& (0+255),b
  6587  000506  D001               	goto	l6899
  6588  000508  D00C               	goto	l6903
  6589  00050A                     l6899:
  6590                           
  6591                           ; BSR set to: 0
  6592  00050A  0E68               	movlw	104
  6593  00050C  0100               	movlb	0	; () banked
  6594  00050E  6FC4               	movwf	??_UI& (0+255),b
  6595  000510  0EE4               	movlw	228
  6596  000512                     u6717:
  6597  000512  2EE8               	decfsz	wreg,f,c
  6598  000514  D7FE               	bra	u6717
  6599  000516  2FC4               	decfsz	??_UI& (0+255),f,b
  6600  000518  D7FC               	bra	u6717
  6601  00051A  F000               	nop	
  6602  00051C  0100               	movlb	0	; () banked
  6603  00051E  2BCC               	incf	UI@i_430& (0+255),f,b
  6604  000520  D7EF               	goto	l6895
  6605  000522                     l6903:
  6606                           
  6607                           ; BSR set to: 0
  6608  000522  0100               	movlb	0	; () banked
  6609  000524  51F6               	movf	_logstate& (0+255),w,b
  6610  000526  0100               	movlb	0	; () banked
  6611  000528  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6612  00052A  B4D8               	btfsc	status,2,c
  6613  00052C  0012               	return	
  6614                           
  6615                           ; BSR set to: 0
  6616                           ;UI.c: 168: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6617                           
  6618                           ; BSR set to: 0
  6619                           
  6620                           ; BSR set to: 0
  6621  00052E  0E00               	movlw	0
  6622  000530  0100               	movlb	0	; () banked
  6623  000532  6FCD               	movwf	UI@i_431& (0+255),b
  6624  000534                     l6909:
  6625                           
  6626                           ; BSR set to: 0
  6627  000534  0E63               	movlw	99
  6628  000536  0100               	movlb	0	; () banked
  6629  000538  65CD               	cpfsgt	UI@i_431& (0+255),b
  6630  00053A  D001               	goto	l6913
  6631  00053C  D00C               	goto	l6917
  6632  00053E                     l6913:
  6633                           
  6634                           ; BSR set to: 0
  6635  00053E  0E68               	movlw	104
  6636  000540  0100               	movlb	0	; () banked
  6637  000542  6FC4               	movwf	??_UI& (0+255),b
  6638  000544  0EE4               	movlw	228
  6639  000546                     u6727:
  6640  000546  2EE8               	decfsz	wreg,f,c
  6641  000548  D7FE               	bra	u6727
  6642  00054A  2FC4               	decfsz	??_UI& (0+255),f,b
  6643  00054C  D7FC               	bra	u6727
  6644  00054E  F000               	nop	
  6645  000550  0100               	movlb	0	; () banked
  6646  000552  2BCD               	incf	UI@i_431& (0+255),f,b
  6647  000554  D7EF               	goto	l6909
  6648  000556                     l6917:
  6649                           
  6650                           ; BSR set to: 0
  6651  000556  0100               	movlb	0	; () banked
  6652  000558  51F6               	movf	_logstate& (0+255),w,b
  6653  00055A  0100               	movlb	0	; () banked
  6654  00055C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6655  00055E  B4D8               	btfsc	status,2,c
  6656  000560  0012               	return	
  6657                           
  6658                           ; BSR set to: 0
  6659                           ;UI.c: 170: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6660                           
  6661                           ; BSR set to: 0
  6662                           
  6663                           ; BSR set to: 0
  6664  000562  0E01               	movlw	1
  6665  000564  EC0E  F020         	call	_lcdInst
  6666  000568  0E68               	movlw	104
  6667  00056A  0100               	movlb	0	; () banked
  6668  00056C  6FC4               	movwf	??_UI& (0+255),b
  6669  00056E  0EE4               	movlw	228
  6670  000570                     u6737:
  6671  000570  2EE8               	decfsz	wreg,f,c
  6672  000572  D7FE               	bra	u6737
  6673  000574  2FC4               	decfsz	??_UI& (0+255),f,b
  6674  000576  D7FC               	bra	u6737
  6675  000578  F000               	nop	
  6676                           
  6677                           ;UI.c: 171: lcdInst(0b10000000);;
  6678  00057A  0E80               	movlw	128
  6679  00057C  EC0E  F020         	call	_lcdInst
  6680                           
  6681                           ;UI.c: 172: printf("DURATION:");
  6682  000580  0EA3               	movlw	low STR_22
  6683  000582  0100               	movlb	0	; () banked
  6684  000584  6F8E               	movwf	printf@f& (0+255),b
  6685  000586  0EFF               	movlw	high STR_22
  6686  000588  0100               	movlb	0	; () banked
  6687  00058A  6F8F               	movwf	(printf@f+1)& (0+255),b
  6688  00058C  EC97  F008         	call	_printf	;wreg free
  6689                           
  6690                           ;UI.c: 173: lcdInst(0b11000000);;
  6691  000590  0EC0               	movlw	192
  6692  000592  EC0E  F020         	call	_lcdInst
  6693                           
  6694                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  6695  000596  0E0E               	movlw	14
  6696  000598  0100               	movlb	0	; () banked
  6697  00059A  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6698  00059C  0E10               	movlw	16
  6699  00059E  6F82               	movwf	___awmod@divisor& (0+255),b
  6700  0005A0  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  6701  0005A4  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  6702  0005A8  ECD5  F018         	call	___awmod	;wreg free
  6703  0005AC  C080  F0C6         	movff	?___awmod,_UI$2205
  6704  0005B0  C081  F0C7         	movff	?___awmod+1,_UI$2205+1
  6705                           
  6706                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  6707  0005B4  0E36               	movlw	low STR_23
  6708  0005B6  0100               	movlb	0	; () banked
  6709  0005B8  6F8E               	movwf	printf@f& (0+255),b
  6710  0005BA  0EFF               	movlw	high STR_23
  6711  0005BC  0100               	movlb	0	; () banked
  6712  0005BE  6F8F               	movwf	(printf@f+1)& (0+255),b
  6713  0005C0  0E0E               	movlw	14
  6714  0005C2  0100               	movlb	0	; () banked
  6715  0005C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6716  0005C6  0E10               	movlw	16
  6717  0005C8  6F82               	movwf	___awmod@divisor& (0+255),b
  6718  0005CA  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  6719  0005CE  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  6720  0005D2  ECD5  F018         	call	___awmod	;wreg free
  6721  0005D6  C080  F086         	movff	?___awmod,___awdiv@dividend
  6722  0005DA  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6723  0005DE  0E00               	movlw	0
  6724  0005E0  0100               	movlb	0	; () banked
  6725  0005E2  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6726  0005E4  0E3C               	movlw	60
  6727  0005E6  6F88               	movwf	___awdiv@divisor& (0+255),b
  6728  0005E8  ECC3  F017         	call	___awdiv	;wreg free
  6729  0005EC  C086  F090         	movff	?___awdiv,?_printf+2
  6730  0005F0  C087  F091         	movff	?___awdiv+1,?_printf+3
  6731  0005F4  C0C6  F080         	movff	_UI$2205,___awmod@dividend
  6732  0005F8  C0C7  F081         	movff	_UI$2205+1,___awmod@dividend+1
  6733  0005FC  0E00               	movlw	0
  6734  0005FE  0100               	movlb	0	; () banked
  6735  000600  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6736  000602  0E3C               	movlw	60
  6737  000604  6F82               	movwf	___awmod@divisor& (0+255),b
  6738  000606  ECD5  F018         	call	___awmod	;wreg free
  6739  00060A  C080  F092         	movff	?___awmod,?_printf+4
  6740  00060E  C081  F093         	movff	?___awmod+1,?_printf+5
  6741  000612  EC97  F008         	call	_printf	;wreg free
  6742                           
  6743                           ;UI.c: 176: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6744  000616  0E00               	movlw	0
  6745  000618  0100               	movlb	0	; () banked
  6746  00061A  6FCE               	movwf	UI@i_434& (0+255),b
  6747  00061C                     l6937:
  6748                           
  6749                           ; BSR set to: 0
  6750  00061C  0E63               	movlw	99
  6751  00061E  0100               	movlb	0	; () banked
  6752  000620  65CE               	cpfsgt	UI@i_434& (0+255),b
  6753  000622  D001               	goto	l6941
  6754  000624  D00C               	goto	l6945
  6755  000626                     l6941:
  6756                           
  6757                           ; BSR set to: 0
  6758  000626  0E68               	movlw	104
  6759  000628  0100               	movlb	0	; () banked
  6760  00062A  6FC4               	movwf	??_UI& (0+255),b
  6761  00062C  0EE4               	movlw	228
  6762  00062E                     u6747:
  6763  00062E  2EE8               	decfsz	wreg,f,c
  6764  000630  D7FE               	bra	u6747
  6765  000632  2FC4               	decfsz	??_UI& (0+255),f,b
  6766  000634  D7FC               	bra	u6747
  6767  000636  F000               	nop	
  6768  000638  0100               	movlb	0	; () banked
  6769  00063A  2BCE               	incf	UI@i_434& (0+255),f,b
  6770  00063C  D7EF               	goto	l6937
  6771  00063E                     l6945:
  6772                           
  6773                           ; BSR set to: 0
  6774  00063E  0100               	movlb	0	; () banked
  6775  000640  51F6               	movf	_logstate& (0+255),w,b
  6776  000642  0100               	movlb	0	; () banked
  6777  000644  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6778  000646  B4D8               	btfsc	status,2,c
  6779  000648  0012               	return	
  6780                           
  6781                           ; BSR set to: 0
  6782                           ;UI.c: 177: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6783                           
  6784                           ; BSR set to: 0
  6785                           
  6786                           ; BSR set to: 0
  6787  00064A  0E00               	movlw	0
  6788  00064C  0100               	movlb	0	; () banked
  6789  00064E  6FCF               	movwf	UI@i_435& (0+255),b
  6790  000650                     l6951:
  6791                           
  6792                           ; BSR set to: 0
  6793  000650  0E63               	movlw	99
  6794  000652  0100               	movlb	0	; () banked
  6795  000654  65CF               	cpfsgt	UI@i_435& (0+255),b
  6796  000656  D001               	goto	l6955
  6797  000658  D00C               	goto	l6959
  6798  00065A                     l6955:
  6799                           
  6800                           ; BSR set to: 0
  6801  00065A  0E68               	movlw	104
  6802  00065C  0100               	movlb	0	; () banked
  6803  00065E  6FC4               	movwf	??_UI& (0+255),b
  6804  000660  0EE4               	movlw	228
  6805  000662                     u6757:
  6806  000662  2EE8               	decfsz	wreg,f,c
  6807  000664  D7FE               	bra	u6757
  6808  000666  2FC4               	decfsz	??_UI& (0+255),f,b
  6809  000668  D7FC               	bra	u6757
  6810  00066A  F000               	nop	
  6811  00066C  0100               	movlb	0	; () banked
  6812  00066E  2BCF               	incf	UI@i_435& (0+255),f,b
  6813  000670  D7EF               	goto	l6951
  6814  000672                     l6959:
  6815                           
  6816                           ; BSR set to: 0
  6817  000672  0100               	movlb	0	; () banked
  6818  000674  51F6               	movf	_logstate& (0+255),w,b
  6819  000676  0100               	movlb	0	; () banked
  6820  000678  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6821  00067A  B4D8               	btfsc	status,2,c
  6822  00067C  0012               	return	
  6823                           
  6824                           ; BSR set to: 0
  6825                           ;UI.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6826                           
  6827                           ; BSR set to: 0
  6828                           
  6829                           ; BSR set to: 0
  6830  00067E  0E01               	movlw	1
  6831  000680  EC0E  F020         	call	_lcdInst
  6832  000684  0E68               	movlw	104
  6833  000686  0100               	movlb	0	; () banked
  6834  000688  6FC4               	movwf	??_UI& (0+255),b
  6835  00068A  0EE4               	movlw	228
  6836  00068C                     u6767:
  6837  00068C  2EE8               	decfsz	wreg,f,c
  6838  00068E  D7FE               	bra	u6767
  6839  000690  2FC4               	decfsz	??_UI& (0+255),f,b
  6840  000692  D7FC               	bra	u6767
  6841  000694  F000               	nop	
  6842                           
  6843                           ;UI.c: 180: lcdInst(0b10000000);;
  6844  000696  0E80               	movlw	128
  6845  000698  EC0E  F020         	call	_lcdInst
  6846                           
  6847                           ;UI.c: 181: printf(" -- POP  CAN -- ");
  6848  00069C  0E7B               	movlw	low STR_24
  6849  00069E  0100               	movlb	0	; () banked
  6850  0006A0  6F8E               	movwf	printf@f& (0+255),b
  6851  0006A2  0EFD               	movlw	high STR_24
  6852  0006A4  0100               	movlb	0	; () banked
  6853  0006A6  6F8F               	movwf	(printf@f+1)& (0+255),b
  6854  0006A8  EC97  F008         	call	_printf	;wreg free
  6855                           
  6856                           ;UI.c: 182: lcdInst(0b11000000);;
  6857  0006AC  0EC0               	movlw	192
  6858  0006AE  EC0E  F020         	call	_lcdInst
  6859                           
  6860                           ;UI.c: 183: printf("NO TAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  6861  0006B2  0ECC               	movlw	low STR_25
  6862  0006B4  0100               	movlb	0	; () banked
  6863  0006B6  6F8E               	movwf	printf@f& (0+255),b
  6864  0006B8  0EFB               	movlw	high STR_25
  6865  0006BA  0100               	movlb	0	; () banked
  6866  0006BC  6F8F               	movwf	(printf@f+1)& (0+255),b
  6867  0006BE  C0EE  F090         	movff	_log_count_pop_no_tab,?_printf+2
  6868  0006C2  C0EF  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  6869  0006C6  C0F0  F092         	movff	_log_count_pop_w_tab,?_printf+4
  6870  0006CA  C0F1  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  6871  0006CE  EC97  F008         	call	_printf	;wreg free
  6872                           
  6873                           ;UI.c: 185: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6874  0006D2  0E00               	movlw	0
  6875  0006D4  0100               	movlb	0	; () banked
  6876  0006D6  6FD0               	movwf	UI@i_438& (0+255),b
  6877  0006D8                     l6977:
  6878                           
  6879                           ; BSR set to: 0
  6880  0006D8  0E63               	movlw	99
  6881  0006DA  0100               	movlb	0	; () banked
  6882  0006DC  65D0               	cpfsgt	UI@i_438& (0+255),b
  6883  0006DE  D001               	goto	l6981
  6884  0006E0  D00C               	goto	l6985
  6885  0006E2                     l6981:
  6886                           
  6887                           ; BSR set to: 0
  6888  0006E2  0E68               	movlw	104
  6889  0006E4  0100               	movlb	0	; () banked
  6890  0006E6  6FC4               	movwf	??_UI& (0+255),b
  6891  0006E8  0EE4               	movlw	228
  6892  0006EA                     u6777:
  6893  0006EA  2EE8               	decfsz	wreg,f,c
  6894  0006EC  D7FE               	bra	u6777
  6895  0006EE  2FC4               	decfsz	??_UI& (0+255),f,b
  6896  0006F0  D7FC               	bra	u6777
  6897  0006F2  F000               	nop	
  6898  0006F4  0100               	movlb	0	; () banked
  6899  0006F6  2BD0               	incf	UI@i_438& (0+255),f,b
  6900  0006F8  D7EF               	goto	l6977
  6901  0006FA                     l6985:
  6902                           
  6903                           ; BSR set to: 0
  6904  0006FA  0100               	movlb	0	; () banked
  6905  0006FC  51F6               	movf	_logstate& (0+255),w,b
  6906  0006FE  0100               	movlb	0	; () banked
  6907  000700  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6908  000702  B4D8               	btfsc	status,2,c
  6909  000704  0012               	return	
  6910                           
  6911                           ; BSR set to: 0
  6912                           ;UI.c: 186: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6913                           
  6914                           ; BSR set to: 0
  6915                           
  6916                           ; BSR set to: 0
  6917  000706  0E00               	movlw	0
  6918  000708  0100               	movlb	0	; () banked
  6919  00070A  6FD1               	movwf	UI@i_439& (0+255),b
  6920  00070C                     l6991:
  6921                           
  6922                           ; BSR set to: 0
  6923  00070C  0E63               	movlw	99
  6924  00070E  0100               	movlb	0	; () banked
  6925  000710  65D1               	cpfsgt	UI@i_439& (0+255),b
  6926  000712  D001               	goto	l6995
  6927  000714  D00C               	goto	l6999
  6928  000716                     l6995:
  6929                           
  6930                           ; BSR set to: 0
  6931  000716  0E68               	movlw	104
  6932  000718  0100               	movlb	0	; () banked
  6933  00071A  6FC4               	movwf	??_UI& (0+255),b
  6934  00071C  0EE4               	movlw	228
  6935  00071E                     u6787:
  6936  00071E  2EE8               	decfsz	wreg,f,c
  6937  000720  D7FE               	bra	u6787
  6938  000722  2FC4               	decfsz	??_UI& (0+255),f,b
  6939  000724  D7FC               	bra	u6787
  6940  000726  F000               	nop	
  6941  000728  0100               	movlb	0	; () banked
  6942  00072A  2BD1               	incf	UI@i_439& (0+255),f,b
  6943  00072C  D7EF               	goto	l6991
  6944  00072E                     l6999:
  6945                           
  6946                           ; BSR set to: 0
  6947  00072E  0100               	movlb	0	; () banked
  6948  000730  51F6               	movf	_logstate& (0+255),w,b
  6949  000732  0100               	movlb	0	; () banked
  6950  000734  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6951  000736  B4D8               	btfsc	status,2,c
  6952  000738  0012               	return	
  6953                           
  6954                           ; BSR set to: 0
  6955                           ;UI.c: 188: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6956                           
  6957                           ; BSR set to: 0
  6958                           
  6959                           ; BSR set to: 0
  6960  00073A  0E01               	movlw	1
  6961  00073C  EC0E  F020         	call	_lcdInst
  6962  000740  0E68               	movlw	104
  6963  000742  0100               	movlb	0	; () banked
  6964  000744  6FC4               	movwf	??_UI& (0+255),b
  6965  000746  0EE4               	movlw	228
  6966  000748                     u6797:
  6967  000748  2EE8               	decfsz	wreg,f,c
  6968  00074A  D7FE               	bra	u6797
  6969  00074C  2FC4               	decfsz	??_UI& (0+255),f,b
  6970  00074E  D7FC               	bra	u6797
  6971  000750  F000               	nop	
  6972                           
  6973                           ;UI.c: 189: lcdInst(0b10000000);;
  6974  000752  0E80               	movlw	128
  6975  000754  EC0E  F020         	call	_lcdInst
  6976                           
  6977                           ;UI.c: 190: printf(" -- SOUP CAN -- ");
  6978  000758  0E8C               	movlw	low STR_26
  6979  00075A  0100               	movlb	0	; () banked
  6980  00075C  6F8E               	movwf	printf@f& (0+255),b
  6981  00075E  0EFD               	movlw	high STR_26
  6982  000760  0100               	movlb	0	; () banked
  6983  000762  6F8F               	movwf	(printf@f+1)& (0+255),b
  6984  000764  EC97  F008         	call	_printf	;wreg free
  6985                           
  6986                           ;UI.c: 191: lcdInst(0b11000000);;
  6987  000768  0EC0               	movlw	192
  6988  00076A  EC0E  F020         	call	_lcdInst
  6989                           
  6990                           ;UI.c: 192: printf("NO LAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  6991  00076E  0EB9               	movlw	low STR_27
  6992  000770  0100               	movlb	0	; () banked
  6993  000772  6F8E               	movwf	printf@f& (0+255),b
  6994  000774  0EFB               	movlw	high STR_27
  6995  000776  0100               	movlb	0	; () banked
  6996  000778  6F8F               	movwf	(printf@f+1)& (0+255),b
  6997  00077A  C0EA  F090         	movff	_log_count_can_no_lab,?_printf+2
  6998  00077E  C0EB  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  6999  000782  C0EC  F092         	movff	_log_count_can_w_lab,?_printf+4
  7000  000786  C0ED  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  7001  00078A  EC97  F008         	call	_printf	;wreg free
  7002                           
  7003                           ;UI.c: 194: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7004  00078E  0E00               	movlw	0
  7005  000790  0100               	movlb	0	; () banked
  7006  000792  6FD2               	movwf	UI@i_442& (0+255),b
  7007  000794                     l7017:
  7008                           
  7009                           ; BSR set to: 0
  7010  000794  0E63               	movlw	99
  7011  000796  0100               	movlb	0	; () banked
  7012  000798  65D2               	cpfsgt	UI@i_442& (0+255),b
  7013  00079A  D001               	goto	l7021
  7014  00079C  D00C               	goto	l7025
  7015  00079E                     l7021:
  7016                           
  7017                           ; BSR set to: 0
  7018  00079E  0E68               	movlw	104
  7019  0007A0  0100               	movlb	0	; () banked
  7020  0007A2  6FC4               	movwf	??_UI& (0+255),b
  7021  0007A4  0EE4               	movlw	228
  7022  0007A6                     u6807:
  7023  0007A6  2EE8               	decfsz	wreg,f,c
  7024  0007A8  D7FE               	bra	u6807
  7025  0007AA  2FC4               	decfsz	??_UI& (0+255),f,b
  7026  0007AC  D7FC               	bra	u6807
  7027  0007AE  F000               	nop	
  7028  0007B0  0100               	movlb	0	; () banked
  7029  0007B2  2BD2               	incf	UI@i_442& (0+255),f,b
  7030  0007B4  D7EF               	goto	l7017
  7031  0007B6                     l7025:
  7032                           
  7033                           ; BSR set to: 0
  7034  0007B6  0100               	movlb	0	; () banked
  7035  0007B8  51F6               	movf	_logstate& (0+255),w,b
  7036  0007BA  0100               	movlb	0	; () banked
  7037  0007BC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7038  0007BE  B4D8               	btfsc	status,2,c
  7039  0007C0  0012               	return	
  7040                           
  7041                           ; BSR set to: 0
  7042                           ;UI.c: 195: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7043                           
  7044                           ; BSR set to: 0
  7045                           
  7046                           ; BSR set to: 0
  7047  0007C2  0E00               	movlw	0
  7048  0007C4  0100               	movlb	0	; () banked
  7049  0007C6  6FD3               	movwf	UI@i_443& (0+255),b
  7050  0007C8                     l7031:
  7051                           
  7052                           ; BSR set to: 0
  7053  0007C8  0E63               	movlw	99
  7054  0007CA  0100               	movlb	0	; () banked
  7055  0007CC  65D3               	cpfsgt	UI@i_443& (0+255),b
  7056  0007CE  D001               	goto	l7035
  7057  0007D0  D00C               	goto	l7039
  7058  0007D2                     l7035:
  7059                           
  7060                           ; BSR set to: 0
  7061  0007D2  0E68               	movlw	104
  7062  0007D4  0100               	movlb	0	; () banked
  7063  0007D6  6FC4               	movwf	??_UI& (0+255),b
  7064  0007D8  0EE4               	movlw	228
  7065  0007DA                     u6817:
  7066  0007DA  2EE8               	decfsz	wreg,f,c
  7067  0007DC  D7FE               	bra	u6817
  7068  0007DE  2FC4               	decfsz	??_UI& (0+255),f,b
  7069  0007E0  D7FC               	bra	u6817
  7070  0007E2  F000               	nop	
  7071  0007E4  0100               	movlb	0	; () banked
  7072  0007E6  2BD3               	incf	UI@i_443& (0+255),f,b
  7073  0007E8  D7EF               	goto	l7031
  7074  0007EA                     l7039:
  7075                           
  7076                           ; BSR set to: 0
  7077  0007EA  0100               	movlb	0	; () banked
  7078  0007EC  51F6               	movf	_logstate& (0+255),w,b
  7079  0007EE  0100               	movlb	0	; () banked
  7080  0007F0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7081  0007F2  B4D8               	btfsc	status,2,c
  7082  0007F4  0012               	return	
  7083                           
  7084                           ; BSR set to: 0
  7085                           ;UI.c: 197: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7086                           
  7087                           ; BSR set to: 0
  7088                           
  7089                           ; BSR set to: 0
  7090  0007F6  0E01               	movlw	1
  7091  0007F8  EC0E  F020         	call	_lcdInst
  7092  0007FC  0E68               	movlw	104
  7093  0007FE  0100               	movlb	0	; () banked
  7094  000800  6FC4               	movwf	??_UI& (0+255),b
  7095  000802  0EE4               	movlw	228
  7096  000804                     u6827:
  7097  000804  2EE8               	decfsz	wreg,f,c
  7098  000806  D7FE               	bra	u6827
  7099  000808  2FC4               	decfsz	??_UI& (0+255),f,b
  7100  00080A  D7FC               	bra	u6827
  7101  00080C  F000               	nop	
  7102                           
  7103                           ;UI.c: 198: lcdInst(0b10000000);;
  7104  00080E  0E80               	movlw	128
  7105  000810  EC0E  F020         	call	_lcdInst
  7106                           
  7107                           ;UI.c: 199: printf("-- TOTAL CANS --");
  7108  000814  0E9D               	movlw	low STR_28
  7109  000816  0100               	movlb	0	; () banked
  7110  000818  6F8E               	movwf	printf@f& (0+255),b
  7111  00081A  0EFD               	movlw	high STR_28
  7112  00081C  0100               	movlb	0	; () banked
  7113  00081E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7114  000820  EC97  F008         	call	_printf	;wreg free
  7115                           
  7116                           ;UI.c: 200: lcdInst(0b11000000);;
  7117  000824  0EC0               	movlw	192
  7118  000826  EC0E  F020         	call	_lcdInst
  7119                           
  7120                           ;UI.c: 201: printf("%d", log_count_total);
  7121  00082A  0EC9               	movlw	low (STR_27+16)
  7122  00082C  0100               	movlb	0	; () banked
  7123  00082E  6F8E               	movwf	printf@f& (0+255),b
  7124  000830  0EFB               	movlw	high (STR_27+16)
  7125  000832  0100               	movlb	0	; () banked
  7126  000834  6F8F               	movwf	(printf@f+1)& (0+255),b
  7127  000836  C0F2  F090         	movff	_log_count_total,?_printf+2
  7128  00083A  C0F3  F091         	movff	_log_count_total+1,?_printf+3
  7129  00083E  EC97  F008         	call	_printf	;wreg free
  7130                           
  7131                           ;UI.c: 203: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7132  000842  0E00               	movlw	0
  7133  000844  0100               	movlb	0	; () banked
  7134  000846  6FD4               	movwf	UI@i_446& (0+255),b
  7135  000848                     l7057:
  7136                           
  7137                           ; BSR set to: 0
  7138  000848  0E63               	movlw	99
  7139  00084A  0100               	movlb	0	; () banked
  7140  00084C  65D4               	cpfsgt	UI@i_446& (0+255),b
  7141  00084E  D001               	goto	l7061
  7142  000850  D00C               	goto	l7065
  7143  000852                     l7061:
  7144                           
  7145                           ; BSR set to: 0
  7146  000852  0E68               	movlw	104
  7147  000854  0100               	movlb	0	; () banked
  7148  000856  6FC4               	movwf	??_UI& (0+255),b
  7149  000858  0EE4               	movlw	228
  7150  00085A                     u6837:
  7151  00085A  2EE8               	decfsz	wreg,f,c
  7152  00085C  D7FE               	bra	u6837
  7153  00085E  2FC4               	decfsz	??_UI& (0+255),f,b
  7154  000860  D7FC               	bra	u6837
  7155  000862  F000               	nop	
  7156  000864  0100               	movlb	0	; () banked
  7157  000866  2BD4               	incf	UI@i_446& (0+255),f,b
  7158  000868  D7EF               	goto	l7057
  7159  00086A                     l7065:
  7160                           
  7161                           ; BSR set to: 0
  7162  00086A  0100               	movlb	0	; () banked
  7163  00086C  51F6               	movf	_logstate& (0+255),w,b
  7164  00086E  0100               	movlb	0	; () banked
  7165  000870  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7166  000872  B4D8               	btfsc	status,2,c
  7167  000874  0012               	return	
  7168                           
  7169                           ; BSR set to: 0
  7170                           ;UI.c: 204: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7171                           
  7172                           ; BSR set to: 0
  7173                           
  7174                           ; BSR set to: 0
  7175  000876  0E00               	movlw	0
  7176  000878  0100               	movlb	0	; () banked
  7177  00087A  6FD5               	movwf	UI@i_447& (0+255),b
  7178  00087C                     l7071:
  7179                           
  7180                           ; BSR set to: 0
  7181  00087C  0E63               	movlw	99
  7182  00087E  0100               	movlb	0	; () banked
  7183  000880  65D5               	cpfsgt	UI@i_447& (0+255),b
  7184  000882  D001               	goto	l7075
  7185  000884  D00C               	goto	l7079
  7186  000886                     l7075:
  7187                           
  7188                           ; BSR set to: 0
  7189  000886  0E68               	movlw	104
  7190  000888  0100               	movlb	0	; () banked
  7191  00088A  6FC4               	movwf	??_UI& (0+255),b
  7192  00088C  0EE4               	movlw	228
  7193  00088E                     u6847:
  7194  00088E  2EE8               	decfsz	wreg,f,c
  7195  000890  D7FE               	bra	u6847
  7196  000892  2FC4               	decfsz	??_UI& (0+255),f,b
  7197  000894  D7FC               	bra	u6847
  7198  000896  F000               	nop	
  7199  000898  0100               	movlb	0	; () banked
  7200  00089A  2BD5               	incf	UI@i_447& (0+255),f,b
  7201  00089C  D7EF               	goto	l7071
  7202  00089E                     l7079:
  7203                           
  7204                           ; BSR set to: 0
  7205  00089E  0100               	movlb	0	; () banked
  7206  0008A0  51F6               	movf	_logstate& (0+255),w,b
  7207  0008A2  0100               	movlb	0	; () banked
  7208  0008A4  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7209  0008A6  B4D8               	btfsc	status,2,c
  7210  0008A8  0012               	return	
  7211  0008AA                     l7083:
  7212  0008AA  0100               	movlb	0	; () banked
  7213  0008AC  51F6               	movf	_logstate& (0+255),w,b
  7214  0008AE  0100               	movlb	0	; () banked
  7215  0008B0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7216  0008B2  B4D8               	btfsc	status,2,c
  7217  0008B4  0012               	return	
  7218  0008B6  D44A               	goto	l6779
  7219  0008B8                     __end_of_UI:
  7220                           	opt stack 0
  7221                           tblptru	equ	0xFF8
  7222                           tblptrh	equ	0xFF7
  7223                           tblptrl	equ	0xFF6
  7224                           tablat	equ	0xFF5
  7225                           prodh	equ	0xFF4
  7226                           prodl	equ	0xFF3
  7227                           intcon	equ	0xFF2
  7228                           intcon2	equ	0xFF1
  7229                           intcon3	equ	0xFF0
  7230                           postinc0	equ	0xFEE
  7231                           wreg	equ	0xFE8
  7232                           postdec1	equ	0xFE5
  7233                           fsr1l	equ	0xFE1
  7234                           indf2	equ	0xFDF
  7235                           postinc2	equ	0xFDE
  7236                           postdec2	equ	0xFDD
  7237                           fsr2h	equ	0xFDA
  7238                           fsr2l	equ	0xFD9
  7239                           status	equ	0xFD8
  7240                           
  7241 ;; *************** function _printRTC *****************
  7242 ;; Defined at:
  7243 ;;		line 63 in file "RTC.c"
  7244 ;; Parameters:    Size  Location     Type
  7245 ;;		None
  7246 ;; Auto vars:     Size  Location     Type
  7247 ;;  i               2   66[BANK0 ] int 
  7248 ;;  INT_time       14   46[BANK0 ] int [7]
  7249 ;;  month           4   62[BANK0 ] unsigned char [4]
  7250 ;;  RTC_month       2   60[BANK0 ] int 
  7251 ;; Return value:  Size  Location     Type
  7252 ;;                  1    wreg      void 
  7253 ;; Registers used:
  7254 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7255 ;; Tracked objects:
  7256 ;;		On entry : 0/0
  7257 ;;		On exit  : 0/0
  7258 ;;		Unchanged: 0/0
  7259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7261 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7262 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7263 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7264 ;;Total ram usage:       25 bytes
  7265 ;; Hardware stack levels used:    1
  7266 ;; Hardware stack levels required when called:   10
  7267 ;; This function calls:
  7268 ;;		_getRTC
  7269 ;;		_lcdInst
  7270 ;;		_printf
  7271 ;;		_strcpy
  7272 ;; This function is called by:
  7273 ;;		_UI
  7274 ;;		_change_state_to_menu_start
  7275 ;; This function uses a non-reentrant model
  7276 ;;
  7277                           
  7278                           	psect	text22
  7279  0018D4                     __ptext22:
  7280                           	opt stack 0
  7281  0018D4                     _printRTC:
  7282                           	opt stack 18
  7283                           
  7284                           ;RTC.c: 64: getRTC();
  7285                           
  7286                           ; BSR set to: 0
  7287                           ;incstack = 0
  7288  0018D4  ECBA  F019         	call	_getRTC	;wreg free
  7289                           
  7290                           ;RTC.c: 65: char month[] = "MMM";
  7291  0018D8  C131  F0BE         	movff	printRTC@F3211,printRTC@month
  7292  0018DC  C132  F0BF         	movff	printRTC@F3211+1,printRTC@month+1
  7293  0018E0  C133  F0C0         	movff	printRTC@F3211+2,printRTC@month+2
  7294  0018E4  C134  F0C1         	movff	printRTC@F3211+3,printRTC@month+3
  7295                           
  7296                           ;RTC.c: 66: int INT_time[7];
  7297                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  7298  0018E8  0E00               	movlw	0
  7299  0018EA  0100               	movlb	0	; () banked
  7300  0018EC  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  7301  0018EE  0E00               	movlw	0
  7302  0018F0  6FC2               	movwf	printRTC@i& (0+255),b
  7303                           
  7304                           ; BSR set to: 0
  7305  0018F2  0100               	movlb	0	; () banked
  7306  0018F4  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7307  0018F6  D008               	goto	l5455
  7308  0018F8  0100               	movlb	0	; () banked
  7309  0018FA  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7310  0018FC  E146               	bnz	l591
  7311  0018FE  0E07               	movlw	7
  7312  001900  0100               	movlb	0	; () banked
  7313  001902  5DC2               	subwf	printRTC@i& (0+255),w,b
  7314  001904  B0D8               	btfsc	status,0,c
  7315  001906  D041               	goto	l591
  7316  001908                     l5455:
  7317                           
  7318                           ; BSR set to: 0
  7319                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  7320  001908  0E24               	movlw	low _time
  7321  00190A  0100               	movlb	0	; () banked
  7322  00190C  25C2               	addwf	printRTC@i& (0+255),w,b
  7323  00190E  6ED9               	movwf	fsr2l,c
  7324  001910  0E01               	movlw	high _time
  7325  001912  0100               	movlb	0	; () banked
  7326  001914  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7327  001916  6EDA               	movwf	fsr2h,c
  7328  001918  50DF               	movf	indf2,w,c
  7329  00191A  0100               	movlb	0	; () banked
  7330  00191C  6FAB               	movwf	??_printRTC& (0+255),b
  7331  00191E  0100               	movlb	0	; () banked
  7332  001920  3BAB               	swapf	??_printRTC& (0+255),f,b
  7333  001922  0E0F               	movlw	15
  7334  001924  17AB               	andwf	??_printRTC& (0+255),f,b
  7335  001926  0E0F               	movlw	15
  7336  001928  0100               	movlb	0	; () banked
  7337  00192A  17AB               	andwf	??_printRTC& (0+255),f,b
  7338  00192C  0100               	movlb	0	; () banked
  7339  00192E  51AB               	movf	??_printRTC& (0+255),w,b
  7340  001930  0D0A               	mullw	10
  7341  001932  0E24               	movlw	low _time
  7342  001934  0100               	movlb	0	; () banked
  7343  001936  25C2               	addwf	printRTC@i& (0+255),w,b
  7344  001938  6ED9               	movwf	fsr2l,c
  7345  00193A  0E01               	movlw	high _time
  7346  00193C  0100               	movlb	0	; () banked
  7347  00193E  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7348  001940  6EDA               	movwf	fsr2h,c
  7349  001942  50DF               	movf	indf2,w,c
  7350  001944  0B0F               	andlw	15
  7351  001946  0100               	movlb	0	; () banked
  7352  001948  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  7353  00194A  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  7354  00194C  50F3               	movf	prodl,w,c
  7355  00194E  0100               	movlb	0	; () banked
  7356  001950  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  7357  001952  50F4               	movf	prodh,w,c
  7358  001954  0100               	movlb	0	; () banked
  7359  001956  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  7360  001958  90D8               	bcf	status,0,c
  7361  00195A  0100               	movlb	0	; () banked
  7362  00195C  35C2               	rlcf	printRTC@i& (0+255),w,b
  7363  00195E  6ED9               	movwf	fsr2l,c
  7364  001960  0100               	movlb	0	; () banked
  7365  001962  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  7366  001964  6EDA               	movwf	fsr2h,c
  7367  001966  0EAE               	movlw	low printRTC@INT_time
  7368  001968  26D9               	addwf	fsr2l,f,c
  7369  00196A  0E00               	movlw	high printRTC@INT_time
  7370  00196C  22DA               	addwfc	fsr2h,f,c
  7371  00196E  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  7372  001972  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  7373                           
  7374                           ; BSR set to: 0
  7375  001976  0100               	movlb	0	; () banked
  7376  001978  4BC2               	infsnz	printRTC@i& (0+255),f,b
  7377  00197A  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  7378                           
  7379                           ; BSR set to: 0
  7380  00197C  0100               	movlb	0	; () banked
  7381  00197E  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7382  001980  D7C3               	goto	l5455
  7383  001982  0100               	movlb	0	; () banked
  7384  001984  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7385  001986  E101               	bnz	u4210
  7386  001988  D7BA               	goto	L5
  7387  00198A                     u4210:
  7388  00198A                     l591:
  7389                           
  7390                           ; BSR set to: 0
  7391                           ;RTC.c: 69: }
  7392                           ;RTC.c: 70: int RTC_month = INT_time[5];
  7393  00198A  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  7394  00198E  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  7395                           
  7396                           ;RTC.c: 71: switch(RTC_month){
  7397  001992  D0B4               	goto	l5487
  7398  001994                     l5461:
  7399                           
  7400                           ; BSR set to: 0
  7401                           ;RTC.c: 73: strcpy(month, "JAN");
  7402  001994  0EBE               	movlw	low printRTC@month
  7403  001996  0100               	movlb	0	; () banked
  7404  001998  6F80               	movwf	strcpy@to& (0+255),b
  7405  00199A  0E00               	movlw	high printRTC@month
  7406  00199C  0100               	movlb	0	; () banked
  7407  00199E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7408  0019A0  0EDA               	movlw	low STR_8
  7409  0019A2  0100               	movlb	0	; () banked
  7410  0019A4  6F82               	movwf	strcpy@from& (0+255),b
  7411  0019A6  0EFF               	movlw	high STR_8
  7412  0019A8  0100               	movlb	0	; () banked
  7413  0019AA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7414  0019AC  ECAC  F01D         	call	_strcpy	;wreg free
  7415                           
  7416                           ;RTC.c: 74: break;
  7417  0019B0  D0D4               	goto	l5489
  7418  0019B2                     l5463:
  7419                           
  7420                           ;RTC.c: 76: strcpy(month, "FEB");
  7421  0019B2  0EBE               	movlw	low printRTC@month
  7422  0019B4  0100               	movlb	0	; () banked
  7423  0019B6  6F80               	movwf	strcpy@to& (0+255),b
  7424  0019B8  0E00               	movlw	high printRTC@month
  7425  0019BA  0100               	movlb	0	; () banked
  7426  0019BC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7427  0019BE  0ECA               	movlw	low STR_9
  7428  0019C0  0100               	movlb	0	; () banked
  7429  0019C2  6F82               	movwf	strcpy@from& (0+255),b
  7430  0019C4  0EFF               	movlw	high STR_9
  7431  0019C6  0100               	movlb	0	; () banked
  7432  0019C8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7433  0019CA  ECAC  F01D         	call	_strcpy	;wreg free
  7434                           
  7435                           ;RTC.c: 77: break;
  7436  0019CE  D0C5               	goto	l5489
  7437  0019D0                     l5465:
  7438                           
  7439                           ;RTC.c: 79: strcpy(month, "MAR");
  7440  0019D0  0EBE               	movlw	low printRTC@month
  7441  0019D2  0100               	movlb	0	; () banked
  7442  0019D4  6F80               	movwf	strcpy@to& (0+255),b
  7443  0019D6  0E00               	movlw	high printRTC@month
  7444  0019D8  0100               	movlb	0	; () banked
  7445  0019DA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7446  0019DC  0EE6               	movlw	low STR_10
  7447  0019DE  0100               	movlb	0	; () banked
  7448  0019E0  6F82               	movwf	strcpy@from& (0+255),b
  7449  0019E2  0EFF               	movlw	high STR_10
  7450  0019E4  0100               	movlb	0	; () banked
  7451  0019E6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7452  0019E8  ECAC  F01D         	call	_strcpy	;wreg free
  7453                           
  7454                           ;RTC.c: 80: break;
  7455  0019EC  D0B6               	goto	l5489
  7456  0019EE                     l5467:
  7457                           
  7458                           ;RTC.c: 82: strcpy(month, "APR");
  7459  0019EE  0EBE               	movlw	low printRTC@month
  7460  0019F0  0100               	movlb	0	; () banked
  7461  0019F2  6F80               	movwf	strcpy@to& (0+255),b
  7462  0019F4  0E00               	movlw	high printRTC@month
  7463  0019F6  0100               	movlb	0	; () banked
  7464  0019F8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7465  0019FA  0EEA               	movlw	low STR_11
  7466  0019FC  0100               	movlb	0	; () banked
  7467  0019FE  6F82               	movwf	strcpy@from& (0+255),b
  7468  001A00  0EFF               	movlw	high STR_11
  7469  001A02  0100               	movlb	0	; () banked
  7470  001A04  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7471  001A06  ECAC  F01D         	call	_strcpy	;wreg free
  7472                           
  7473                           ;RTC.c: 83: break;
  7474  001A0A  D0A7               	goto	l5489
  7475  001A0C                     l5469:
  7476                           
  7477                           ;RTC.c: 85: strcpy(month, "MAY");
  7478  001A0C  0EBE               	movlw	low printRTC@month
  7479  001A0E  0100               	movlb	0	; () banked
  7480  001A10  6F80               	movwf	strcpy@to& (0+255),b
  7481  001A12  0E00               	movlw	high printRTC@month
  7482  001A14  0100               	movlb	0	; () banked
  7483  001A16  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7484  001A18  0EFA               	movlw	low STR_12
  7485  001A1A  0100               	movlb	0	; () banked
  7486  001A1C  6F82               	movwf	strcpy@from& (0+255),b
  7487  001A1E  0EFF               	movlw	high STR_12
  7488  001A20  0100               	movlb	0	; () banked
  7489  001A22  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7490  001A24  ECAC  F01D         	call	_strcpy	;wreg free
  7491                           
  7492                           ;RTC.c: 86: break;
  7493  001A28  D098               	goto	l5489
  7494  001A2A                     l5471:
  7495                           
  7496                           ;RTC.c: 88: strcpy(month, "JUN");
  7497  001A2A  0EBE               	movlw	low printRTC@month
  7498  001A2C  0100               	movlb	0	; () banked
  7499  001A2E  6F80               	movwf	strcpy@to& (0+255),b
  7500  001A30  0E00               	movlw	high printRTC@month
  7501  001A32  0100               	movlb	0	; () banked
  7502  001A34  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7503  001A36  0EDE               	movlw	low STR_13
  7504  001A38  0100               	movlb	0	; () banked
  7505  001A3A  6F82               	movwf	strcpy@from& (0+255),b
  7506  001A3C  0EFF               	movlw	high STR_13
  7507  001A3E  0100               	movlb	0	; () banked
  7508  001A40  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7509  001A42  ECAC  F01D         	call	_strcpy	;wreg free
  7510                           
  7511                           ;RTC.c: 89: break;
  7512  001A46  D089               	goto	l5489
  7513  001A48                     l5473:
  7514                           
  7515                           ;RTC.c: 91: strcpy(month, "JUL");
  7516  001A48  0EBE               	movlw	low printRTC@month
  7517  001A4A  0100               	movlb	0	; () banked
  7518  001A4C  6F80               	movwf	strcpy@to& (0+255),b
  7519  001A4E  0E00               	movlw	high printRTC@month
  7520  001A50  0100               	movlb	0	; () banked
  7521  001A52  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7522  001A54  0ED6               	movlw	low STR_14
  7523  001A56  0100               	movlb	0	; () banked
  7524  001A58  6F82               	movwf	strcpy@from& (0+255),b
  7525  001A5A  0EFF               	movlw	high STR_14
  7526  001A5C  0100               	movlb	0	; () banked
  7527  001A5E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7528  001A60  ECAC  F01D         	call	_strcpy	;wreg free
  7529                           
  7530                           ;RTC.c: 92: break;
  7531  001A64  D07A               	goto	l5489
  7532  001A66                     l5475:
  7533                           
  7534                           ;RTC.c: 94: strcpy(month, "AUG");
  7535  001A66  0EBE               	movlw	low printRTC@month
  7536  001A68  0100               	movlb	0	; () banked
  7537  001A6A  6F80               	movwf	strcpy@to& (0+255),b
  7538  001A6C  0E00               	movlw	high printRTC@month
  7539  001A6E  0100               	movlb	0	; () banked
  7540  001A70  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7541  001A72  0ED2               	movlw	low STR_15
  7542  001A74  0100               	movlb	0	; () banked
  7543  001A76  6F82               	movwf	strcpy@from& (0+255),b
  7544  001A78  0EFF               	movlw	high STR_15
  7545  001A7A  0100               	movlb	0	; () banked
  7546  001A7C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7547  001A7E  ECAC  F01D         	call	_strcpy	;wreg free
  7548                           
  7549                           ;RTC.c: 95: break;
  7550  001A82  D06B               	goto	l5489
  7551  001A84                     l5477:
  7552                           
  7553                           ;RTC.c: 97: strcpy(month, "SEP");
  7554  001A84  0EBE               	movlw	low printRTC@month
  7555  001A86  0100               	movlb	0	; () banked
  7556  001A88  6F80               	movwf	strcpy@to& (0+255),b
  7557  001A8A  0E00               	movlw	high printRTC@month
  7558  001A8C  0100               	movlb	0	; () banked
  7559  001A8E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7560  001A90  0EE2               	movlw	low STR_16
  7561  001A92  0100               	movlb	0	; () banked
  7562  001A94  6F82               	movwf	strcpy@from& (0+255),b
  7563  001A96  0EFF               	movlw	high STR_16
  7564  001A98  0100               	movlb	0	; () banked
  7565  001A9A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7566  001A9C  ECAC  F01D         	call	_strcpy	;wreg free
  7567                           
  7568                           ;RTC.c: 98: break;
  7569  001AA0  D05C               	goto	l5489
  7570  001AA2                     l5479:
  7571                           
  7572                           ;RTC.c: 100: strcpy(month, "OCT");
  7573  001AA2  0EBE               	movlw	low printRTC@month
  7574  001AA4  0100               	movlb	0	; () banked
  7575  001AA6  6F80               	movwf	strcpy@to& (0+255),b
  7576  001AA8  0E00               	movlw	high printRTC@month
  7577  001AAA  0100               	movlb	0	; () banked
  7578  001AAC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7579  001AAE  0EF2               	movlw	low STR_17
  7580  001AB0  0100               	movlb	0	; () banked
  7581  001AB2  6F82               	movwf	strcpy@from& (0+255),b
  7582  001AB4  0EFF               	movlw	high STR_17
  7583  001AB6  0100               	movlb	0	; () banked
  7584  001AB8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7585  001ABA  ECAC  F01D         	call	_strcpy	;wreg free
  7586                           
  7587                           ;RTC.c: 101: break;
  7588  001ABE  D04D               	goto	l5489
  7589  001AC0                     l5481:
  7590                           
  7591                           ;RTC.c: 103: strcpy(month, "NOV");
  7592  001AC0  0EBE               	movlw	low printRTC@month
  7593  001AC2  0100               	movlb	0	; () banked
  7594  001AC4  6F80               	movwf	strcpy@to& (0+255),b
  7595  001AC6  0E00               	movlw	high printRTC@month
  7596  001AC8  0100               	movlb	0	; () banked
  7597  001ACA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7598  001ACC  0EF6               	movlw	low STR_18
  7599  001ACE  0100               	movlb	0	; () banked
  7600  001AD0  6F82               	movwf	strcpy@from& (0+255),b
  7601  001AD2  0EFF               	movlw	high STR_18
  7602  001AD4  0100               	movlb	0	; () banked
  7603  001AD6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7604  001AD8  ECAC  F01D         	call	_strcpy	;wreg free
  7605                           
  7606                           ;RTC.c: 104: break;
  7607  001ADC  D03E               	goto	l5489
  7608  001ADE                     l5483:
  7609                           
  7610                           ;RTC.c: 106: strcpy(month, "DEC");
  7611  001ADE  0EBE               	movlw	low printRTC@month
  7612  001AE0  0100               	movlb	0	; () banked
  7613  001AE2  6F80               	movwf	strcpy@to& (0+255),b
  7614  001AE4  0E00               	movlw	high printRTC@month
  7615  001AE6  0100               	movlb	0	; () banked
  7616  001AE8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7617  001AEA  0ECE               	movlw	low STR_19
  7618  001AEC  0100               	movlb	0	; () banked
  7619  001AEE  6F82               	movwf	strcpy@from& (0+255),b
  7620  001AF0  0EFF               	movlw	high STR_19
  7621  001AF2  0100               	movlb	0	; () banked
  7622  001AF4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7623  001AF6  ECAC  F01D         	call	_strcpy	;wreg free
  7624                           
  7625                           ;RTC.c: 108: }
  7626                           
  7627                           ;RTC.c: 107: break;
  7628  001AFA  D02F               	goto	l5489
  7629  001AFC                     l5487:
  7630  001AFC  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  7631  001B00  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  7632                           
  7633                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7634                           ; Switch size 1, requested type "space"
  7635                           ; Number of cases is 1, Range of values is 0 to 0
  7636                           ; switch strategies available:
  7637                           ; Name         Instructions Cycles
  7638                           ; simple_byte            4     3 (average)
  7639                           ;	Chosen strategy is simple_byte
  7640  001B04  0100               	movlb	0	; () banked
  7641  001B06  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  7642  001B08  0A00               	xorlw	0	; case 0
  7643  001B0A  A4D8               	btfss	status,2,c
  7644  001B0C  D026               	goto	l5489
  7645                           
  7646                           ; BSR set to: 0
  7647                           ; Switch size 1, requested type "space"
  7648                           ; Number of cases is 12, Range of values is 1 to 12
  7649                           ; switch strategies available:
  7650                           ; Name         Instructions Cycles
  7651                           ; simple_byte           37    19 (average)
  7652                           ;	Chosen strategy is simple_byte
  7653  001B0E  0100               	movlb	0	; () banked
  7654  001B10  51AB               	movf	??_printRTC& (0+255),w,b
  7655  001B12  0A01               	xorlw	1	; case 1
  7656  001B14  B4D8               	btfsc	status,2,c
  7657  001B16  D73E               	goto	l5461
  7658  001B18  0A03               	xorlw	3	; case 2
  7659  001B1A  B4D8               	btfsc	status,2,c
  7660  001B1C  D74A               	goto	l5463
  7661  001B1E  0A01               	xorlw	1	; case 3
  7662  001B20  B4D8               	btfsc	status,2,c
  7663  001B22  D756               	goto	l5465
  7664  001B24  0A07               	xorlw	7	; case 4
  7665  001B26  B4D8               	btfsc	status,2,c
  7666  001B28  D762               	goto	l5467
  7667  001B2A  0A01               	xorlw	1	; case 5
  7668  001B2C  B4D8               	btfsc	status,2,c
  7669  001B2E  D76E               	goto	l5469
  7670  001B30  0A03               	xorlw	3	; case 6
  7671  001B32  B4D8               	btfsc	status,2,c
  7672  001B34  D77A               	goto	l5471
  7673  001B36  0A01               	xorlw	1	; case 7
  7674  001B38  B4D8               	btfsc	status,2,c
  7675  001B3A  D786               	goto	l5473
  7676  001B3C  0A0F               	xorlw	15	; case 8
  7677  001B3E  B4D8               	btfsc	status,2,c
  7678  001B40  D792               	goto	l5475
  7679  001B42  0A01               	xorlw	1	; case 9
  7680  001B44  B4D8               	btfsc	status,2,c
  7681  001B46  D79E               	goto	l5477
  7682  001B48  0A03               	xorlw	3	; case 10
  7683  001B4A  B4D8               	btfsc	status,2,c
  7684  001B4C  D7AA               	goto	l5479
  7685  001B4E  0A01               	xorlw	1	; case 11
  7686  001B50  B4D8               	btfsc	status,2,c
  7687  001B52  D7B6               	goto	l5481
  7688  001B54  0A07               	xorlw	7	; case 12
  7689  001B56  B4D8               	btfsc	status,2,c
  7690  001B58  D7C2               	goto	l5483
  7691  001B5A                     l5489:
  7692                           
  7693                           ;RTC.c: 109: lcdInst(0b10000000);;
  7694  001B5A  0E80               	movlw	128
  7695  001B5C  EC0E  F020         	call	_lcdInst
  7696                           
  7697                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  7698  001B60  0E8C               	movlw	low STR_21
  7699  001B62  0100               	movlb	0	; () banked
  7700  001B64  6F8E               	movwf	printf@f& (0+255),b
  7701  001B66  0EFB               	movlw	high STR_21
  7702  001B68  0100               	movlb	0	; () banked
  7703  001B6A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7704  001B6C  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  7705  001B70  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  7706  001B74  0EBE               	movlw	low printRTC@month
  7707  001B76  0100               	movlb	0	; () banked
  7708  001B78  6F92               	movwf	(?_printf+4)& (0+255),b
  7709  001B7A  0E00               	movlw	high printRTC@month
  7710  001B7C  0100               	movlb	0	; () banked
  7711  001B7E  6F93               	movwf	(?_printf+5)& (0+255),b
  7712  001B80  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  7713  001B84  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  7714  001B88  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  7715  001B8C  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  7716  001B90  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  7717  001B94  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  7718  001B98  EC97  F008         	call	_printf	;wreg free
  7719  001B9C  0012               	return		;funcret
  7720  001B9E                     __end_of_printRTC:
  7721                           	opt stack 0
  7722                           tblptru	equ	0xFF8
  7723                           tblptrh	equ	0xFF7
  7724                           tblptrl	equ	0xFF6
  7725                           tablat	equ	0xFF5
  7726                           prodh	equ	0xFF4
  7727                           prodl	equ	0xFF3
  7728                           intcon	equ	0xFF2
  7729                           intcon2	equ	0xFF1
  7730                           intcon3	equ	0xFF0
  7731                           postinc0	equ	0xFEE
  7732                           wreg	equ	0xFE8
  7733                           postdec1	equ	0xFE5
  7734                           fsr1l	equ	0xFE1
  7735                           indf2	equ	0xFDF
  7736                           postinc2	equ	0xFDE
  7737                           postdec2	equ	0xFDD
  7738                           fsr2h	equ	0xFDA
  7739                           fsr2l	equ	0xFD9
  7740                           status	equ	0xFD8
  7741                           
  7742 ;; *************** function _strcpy *****************
  7743 ;; Defined at:
  7744 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  7745 ;; Parameters:    Size  Location     Type
  7746 ;;  to              2    0[BANK0 ] PTR unsigned char 
  7747 ;;		 -> printRTC@month(4), UI@month(4), 
  7748 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  7749 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  7750 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  7751 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  7752 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  7753 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  7754 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  7755 ;;		 -> STR_8(4), 
  7756 ;; Auto vars:     Size  Location     Type
  7757 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  7758 ;;		 -> printRTC@month(4), UI@month(4), 
  7759 ;; Return value:  Size  Location     Type
  7760 ;;                  2    0[BANK0 ] PTR unsigned char 
  7761 ;; Registers used:
  7762 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7763 ;; Tracked objects:
  7764 ;;		On entry : 0/0
  7765 ;;		On exit  : 0/0
  7766 ;;		Unchanged: 0/0
  7767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7768 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7769 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7771 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7772 ;;Total ram usage:        6 bytes
  7773 ;; Hardware stack levels used:    1
  7774 ;; Hardware stack levels required when called:    7
  7775 ;; This function calls:
  7776 ;;		Nothing
  7777 ;; This function is called by:
  7778 ;;		_UI
  7779 ;;		_printRTC
  7780 ;; This function uses a non-reentrant model
  7781 ;;
  7782                           
  7783                           	psect	text23
  7784  003B58                     __ptext23:
  7785                           	opt stack 0
  7786  003B58                     _strcpy:
  7787                           	opt stack 20
  7788                           
  7789                           ;incstack = 0
  7790  003B58  C080  F084         	movff	strcpy@to,strcpy@cp
  7791  003B5C  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  7792  003B60  D006               	goto	l5193
  7793  003B62                     l5191:
  7794  003B62  0100               	movlb	0	; () banked
  7795  003B64  4B84               	infsnz	strcpy@cp& (0+255),f,b
  7796  003B66  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  7797  003B68  0100               	movlb	0	; () banked
  7798  003B6A  4B82               	infsnz	strcpy@from& (0+255),f,b
  7799  003B6C  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  7800  003B6E                     l5193:
  7801  003B6E  C082  FFF6         	movff	strcpy@from,tblptrl
  7802  003B72  C083  FFF7         	movff	strcpy@from+1,tblptrh
  7803  003B76                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7804  003B76  6AF8               	clrf	tblptru,c
  7805  003B78                     	endif
  7806  003B78                     	if	0	;tblptru may be non-zero
  7807  003B78                     	endif
  7808  003B78  C084  FFD9         	movff	strcpy@cp,fsr2l
  7809  003B7C  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  7810  003B80  0008               	tblrd		*
  7811  003B82  CFF5 FFDF          	movff	tablat,indf2
  7812  003B86  50DF               	movf	indf2,w,c
  7813  003B88  B4D8               	btfsc	status,2,c
  7814  003B8A  0012               	return	
  7815  003B8C  D7EA               	goto	l5191
  7816  003B8E                     __end_of_strcpy:
  7817                           	opt stack 0
  7818                           tblptru	equ	0xFF8
  7819                           tblptrh	equ	0xFF7
  7820                           tblptrl	equ	0xFF6
  7821                           tablat	equ	0xFF5
  7822                           prodh	equ	0xFF4
  7823                           prodl	equ	0xFF3
  7824                           intcon	equ	0xFF2
  7825                           intcon2	equ	0xFF1
  7826                           intcon3	equ	0xFF0
  7827                           postinc0	equ	0xFEE
  7828                           wreg	equ	0xFE8
  7829                           postdec1	equ	0xFE5
  7830                           fsr1l	equ	0xFE1
  7831                           indf2	equ	0xFDF
  7832                           postinc2	equ	0xFDE
  7833                           postdec2	equ	0xFDD
  7834                           fsr2h	equ	0xFDA
  7835                           fsr2l	equ	0xFD9
  7836                           status	equ	0xFD8
  7837                           
  7838 ;; *************** function _getRTC *****************
  7839 ;; Defined at:
  7840 ;;		line 44 in file "RTC.c"
  7841 ;; Parameters:    Size  Location     Type
  7842 ;;		None
  7843 ;; Auto vars:     Size  Location     Type
  7844 ;;  i               2    3[BANK0 ] int 
  7845 ;; Return value:  Size  Location     Type
  7846 ;;                  1    wreg      void 
  7847 ;; Registers used:
  7848 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7849 ;; Tracked objects:
  7850 ;;		On entry : 0/0
  7851 ;;		On exit  : 0/0
  7852 ;;		Unchanged: 0/0
  7853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7855 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7857 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7858 ;;Total ram usage:        2 bytes
  7859 ;; Hardware stack levels used:    1
  7860 ;; Hardware stack levels required when called:    9
  7861 ;; This function calls:
  7862 ;;		_I2C_Master_Read
  7863 ;;		_I2C_Master_Start
  7864 ;;		_I2C_Master_Stop
  7865 ;;		_I2C_Master_Write
  7866 ;; This function is called by:
  7867 ;;		_printRTC
  7868 ;;		_initSortTimer
  7869 ;; This function uses a non-reentrant model
  7870 ;;
  7871                           
  7872                           	psect	text24
  7873  003374                     __ptext24:
  7874                           	opt stack 0
  7875  003374                     _getRTC:
  7876                           	opt stack 18
  7877                           
  7878                           ;RTC.c: 48: I2C_Master_Start();
  7879                           
  7880                           ;incstack = 0
  7881  003374  EC34  F020         	call	_I2C_Master_Start	;wreg free
  7882                           
  7883                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  7884  003378  0E00               	movlw	0
  7885  00337A  0100               	movlb	0	; () banked
  7886  00337C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7887  00337E  0ED0               	movlw	208
  7888  003380  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7889  003382  EC22  F020         	call	_I2C_Master_Write	;wreg free
  7890                           
  7891                           ;RTC.c: 50: I2C_Master_Write(0x00);
  7892  003386  0E00               	movlw	0
  7893  003388  0100               	movlb	0	; () banked
  7894  00338A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7895  00338C  0E00               	movlw	0
  7896  00338E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7897  003390  EC22  F020         	call	_I2C_Master_Write	;wreg free
  7898                           
  7899                           ;RTC.c: 51: I2C_Master_Stop();
  7900  003394  EC30  F020         	call	_I2C_Master_Stop	;wreg free
  7901                           
  7902                           ;RTC.c: 54: I2C_Master_Start();
  7903  003398  EC34  F020         	call	_I2C_Master_Start	;wreg free
  7904                           
  7905                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  7906  00339C  0E00               	movlw	0
  7907  00339E  0100               	movlb	0	; () banked
  7908  0033A0  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7909  0033A2  0ED1               	movlw	209
  7910  0033A4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7911  0033A6  EC22  F020         	call	_I2C_Master_Write	;wreg free
  7912                           
  7913                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  7914  0033AA  0E00               	movlw	0
  7915  0033AC  0100               	movlb	0	; () banked
  7916  0033AE  6F84               	movwf	(getRTC@i+1)& (0+255),b
  7917  0033B0  0E00               	movlw	0
  7918  0033B2  6F83               	movwf	getRTC@i& (0+255),b
  7919  0033B4                     l5199:
  7920                           
  7921                           ; BSR set to: 0
  7922  0033B4  0100               	movlb	0	; () banked
  7923  0033B6  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  7924  0033B8  D008               	goto	l5203
  7925  0033BA  0100               	movlb	0	; () banked
  7926  0033BC  5184               	movf	(getRTC@i+1)& (0+255),w,b
  7927  0033BE  E115               	bnz	l5209
  7928  0033C0  0E06               	movlw	6
  7929  0033C2  0100               	movlb	0	; () banked
  7930  0033C4  5D83               	subwf	getRTC@i& (0+255),w,b
  7931  0033C6  B0D8               	btfsc	status,0,c
  7932  0033C8  D010               	goto	l5209
  7933  0033CA                     l5203:
  7934                           
  7935                           ; BSR set to: 0
  7936                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  7937  0033CA  0E24               	movlw	low _time
  7938  0033CC  0100               	movlb	0	; () banked
  7939  0033CE  2583               	addwf	getRTC@i& (0+255),w,b
  7940  0033D0  6ED9               	movwf	fsr2l,c
  7941  0033D2  0E01               	movlw	high _time
  7942  0033D4  0100               	movlb	0	; () banked
  7943  0033D6  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  7944  0033D8  6EDA               	movwf	fsr2h,c
  7945  0033DA  0E01               	movlw	1
  7946  0033DC  ECD3  F01E         	call	_I2C_Master_Read
  7947  0033E0  6EDF               	movwf	indf2,c
  7948  0033E2  0100               	movlb	0	; () banked
  7949  0033E4  4B83               	infsnz	getRTC@i& (0+255),f,b
  7950  0033E6  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  7951  0033E8  D7E5               	goto	l5199
  7952  0033EA                     l5209:
  7953                           
  7954                           ; BSR set to: 0
  7955                           ;RTC.c: 58: }
  7956                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  7957  0033EA  0E00               	movlw	0
  7958  0033EC  ECD3  F01E         	call	_I2C_Master_Read
  7959  0033F0  0101               	movlb	1	; () banked
  7960  0033F2  6F2A               	movwf	(_time+6)& (0+255),b
  7961                           
  7962                           ;RTC.c: 60: I2C_Master_Stop();
  7963  0033F4  EC30  F020         	call	_I2C_Master_Stop	;wreg free
  7964  0033F8  0012               	return		;funcret
  7965  0033FA                     __end_of_getRTC:
  7966                           	opt stack 0
  7967                           tblptru	equ	0xFF8
  7968                           tblptrh	equ	0xFF7
  7969                           tblptrl	equ	0xFF6
  7970                           tablat	equ	0xFF5
  7971                           prodh	equ	0xFF4
  7972                           prodl	equ	0xFF3
  7973                           intcon	equ	0xFF2
  7974                           intcon2	equ	0xFF1
  7975                           intcon3	equ	0xFF0
  7976                           postinc0	equ	0xFEE
  7977                           wreg	equ	0xFE8
  7978                           postdec1	equ	0xFE5
  7979                           fsr1l	equ	0xFE1
  7980                           indf2	equ	0xFDF
  7981                           postinc2	equ	0xFDE
  7982                           postdec2	equ	0xFDD
  7983                           fsr2h	equ	0xFDA
  7984                           fsr2l	equ	0xFD9
  7985                           status	equ	0xFD8
  7986                           
  7987 ;; *************** function _I2C_Master_Write *****************
  7988 ;; Defined at:
  7989 ;;		line 49 in file "I2C.c"
  7990 ;; Parameters:    Size  Location     Type
  7991 ;;  d               2    1[BANK0 ] unsigned int 
  7992 ;; Auto vars:     Size  Location     Type
  7993 ;;		None
  7994 ;; Return value:  Size  Location     Type
  7995 ;;                  1    wreg      void 
  7996 ;; Registers used:
  7997 ;;		wreg, status,2, status,0, cstack
  7998 ;; Tracked objects:
  7999 ;;		On entry : 0/0
  8000 ;;		On exit  : 0/0
  8001 ;;		Unchanged: 0/0
  8002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8003 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8006 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8007 ;;Total ram usage:        2 bytes
  8008 ;; Hardware stack levels used:    1
  8009 ;; Hardware stack levels required when called:    8
  8010 ;; This function calls:
  8011 ;;		_I2C_Master_Wait
  8012 ;; This function is called by:
  8013 ;;		_loadRTC
  8014 ;;		_getRTC
  8015 ;; This function uses a non-reentrant model
  8016 ;;
  8017                           
  8018                           	psect	text25
  8019  004044                     __ptext25:
  8020                           	opt stack 0
  8021  004044                     _I2C_Master_Write:
  8022                           	opt stack 18
  8023                           
  8024                           ;I2C.c: 51: I2C_Master_Wait();
  8025                           
  8026                           ;incstack = 0
  8027  004044  ECF3  F01F         	call	_I2C_Master_Wait	;wreg free
  8028                           
  8029                           ;I2C.c: 52: SSPBUF = d;
  8030  004048  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8031  00404C  0012               	return		;funcret
  8032  00404E                     __end_of_I2C_Master_Write:
  8033                           	opt stack 0
  8034                           tblptru	equ	0xFF8
  8035                           tblptrh	equ	0xFF7
  8036                           tblptrl	equ	0xFF6
  8037                           tablat	equ	0xFF5
  8038                           prodh	equ	0xFF4
  8039                           prodl	equ	0xFF3
  8040                           intcon	equ	0xFF2
  8041                           intcon2	equ	0xFF1
  8042                           intcon3	equ	0xFF0
  8043                           postinc0	equ	0xFEE
  8044                           wreg	equ	0xFE8
  8045                           postdec1	equ	0xFE5
  8046                           fsr1l	equ	0xFE1
  8047                           indf2	equ	0xFDF
  8048                           postinc2	equ	0xFDE
  8049                           postdec2	equ	0xFDD
  8050                           fsr2h	equ	0xFDA
  8051                           fsr2l	equ	0xFD9
  8052                           status	equ	0xFD8
  8053                           
  8054 ;; *************** function _I2C_Master_Stop *****************
  8055 ;; Defined at:
  8056 ;;		line 43 in file "I2C.c"
  8057 ;; Parameters:    Size  Location     Type
  8058 ;;		None
  8059 ;; Auto vars:     Size  Location     Type
  8060 ;;		None
  8061 ;; Return value:  Size  Location     Type
  8062 ;;                  1    wreg      void 
  8063 ;; Registers used:
  8064 ;;		wreg, status,2, status,0, cstack
  8065 ;; Tracked objects:
  8066 ;;		On entry : 0/0
  8067 ;;		On exit  : 0/0
  8068 ;;		Unchanged: 0/0
  8069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8073 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8074 ;;Total ram usage:        0 bytes
  8075 ;; Hardware stack levels used:    1
  8076 ;; Hardware stack levels required when called:    8
  8077 ;; This function calls:
  8078 ;;		_I2C_Master_Wait
  8079 ;; This function is called by:
  8080 ;;		_loadRTC
  8081 ;;		_getRTC
  8082 ;; This function uses a non-reentrant model
  8083 ;;
  8084                           
  8085                           	psect	text26
  8086  004060                     __ptext26:
  8087                           	opt stack 0
  8088  004060                     _I2C_Master_Stop:
  8089                           	opt stack 18
  8090                           
  8091                           ;I2C.c: 45: I2C_Master_Wait();
  8092                           
  8093                           ;incstack = 0
  8094  004060  ECF3  F01F         	call	_I2C_Master_Wait	;wreg free
  8095                           
  8096                           ;I2C.c: 46: PEN = 1;
  8097  004064  84C5               	bsf	4037,2,c	;volatile
  8098  004066  0012               	return		;funcret
  8099  004068                     __end_of_I2C_Master_Stop:
  8100                           	opt stack 0
  8101                           tblptru	equ	0xFF8
  8102                           tblptrh	equ	0xFF7
  8103                           tblptrl	equ	0xFF6
  8104                           tablat	equ	0xFF5
  8105                           prodh	equ	0xFF4
  8106                           prodl	equ	0xFF3
  8107                           intcon	equ	0xFF2
  8108                           intcon2	equ	0xFF1
  8109                           intcon3	equ	0xFF0
  8110                           postinc0	equ	0xFEE
  8111                           wreg	equ	0xFE8
  8112                           postdec1	equ	0xFE5
  8113                           fsr1l	equ	0xFE1
  8114                           indf2	equ	0xFDF
  8115                           postinc2	equ	0xFDE
  8116                           postdec2	equ	0xFDD
  8117                           fsr2h	equ	0xFDA
  8118                           fsr2l	equ	0xFD9
  8119                           status	equ	0xFD8
  8120                           
  8121 ;; *************** function _I2C_Master_Start *****************
  8122 ;; Defined at:
  8123 ;;		line 31 in file "I2C.c"
  8124 ;; Parameters:    Size  Location     Type
  8125 ;;		None
  8126 ;; Auto vars:     Size  Location     Type
  8127 ;;		None
  8128 ;; Return value:  Size  Location     Type
  8129 ;;                  1    wreg      void 
  8130 ;; Registers used:
  8131 ;;		wreg, status,2, status,0, cstack
  8132 ;; Tracked objects:
  8133 ;;		On entry : 0/0
  8134 ;;		On exit  : 0/0
  8135 ;;		Unchanged: 0/0
  8136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8140 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8141 ;;Total ram usage:        0 bytes
  8142 ;; Hardware stack levels used:    1
  8143 ;; Hardware stack levels required when called:    8
  8144 ;; This function calls:
  8145 ;;		_I2C_Master_Wait
  8146 ;; This function is called by:
  8147 ;;		_loadRTC
  8148 ;;		_getRTC
  8149 ;; This function uses a non-reentrant model
  8150 ;;
  8151                           
  8152                           	psect	text27
  8153  004068                     __ptext27:
  8154                           	opt stack 0
  8155  004068                     _I2C_Master_Start:
  8156                           	opt stack 18
  8157                           
  8158                           ;I2C.c: 33: I2C_Master_Wait();
  8159                           
  8160                           ;incstack = 0
  8161  004068  ECF3  F01F         	call	_I2C_Master_Wait	;wreg free
  8162                           
  8163                           ;I2C.c: 34: SEN = 1;
  8164  00406C  80C5               	bsf	4037,0,c	;volatile
  8165  00406E  0012               	return		;funcret
  8166  004070                     __end_of_I2C_Master_Start:
  8167                           	opt stack 0
  8168                           tblptru	equ	0xFF8
  8169                           tblptrh	equ	0xFF7
  8170                           tblptrl	equ	0xFF6
  8171                           tablat	equ	0xFF5
  8172                           prodh	equ	0xFF4
  8173                           prodl	equ	0xFF3
  8174                           intcon	equ	0xFF2
  8175                           intcon2	equ	0xFF1
  8176                           intcon3	equ	0xFF0
  8177                           postinc0	equ	0xFEE
  8178                           wreg	equ	0xFE8
  8179                           postdec1	equ	0xFE5
  8180                           fsr1l	equ	0xFE1
  8181                           indf2	equ	0xFDF
  8182                           postinc2	equ	0xFDE
  8183                           postdec2	equ	0xFDD
  8184                           fsr2h	equ	0xFDA
  8185                           fsr2l	equ	0xFD9
  8186                           status	equ	0xFD8
  8187                           
  8188 ;; *************** function _I2C_Master_Read *****************
  8189 ;; Defined at:
  8190 ;;		line 55 in file "I2C.c"
  8191 ;; Parameters:    Size  Location     Type
  8192 ;;  a               1    wreg     unsigned char 
  8193 ;; Auto vars:     Size  Location     Type
  8194 ;;  a               1    1[BANK0 ] unsigned char 
  8195 ;;  temp            1    2[BANK0 ] unsigned char 
  8196 ;; Return value:  Size  Location     Type
  8197 ;;                  1    wreg      unsigned char 
  8198 ;; Registers used:
  8199 ;;		wreg, status,2, status,0, cstack
  8200 ;; Tracked objects:
  8201 ;;		On entry : 0/0
  8202 ;;		On exit  : 0/0
  8203 ;;		Unchanged: 0/0
  8204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8206 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8208 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8209 ;;Total ram usage:        2 bytes
  8210 ;; Hardware stack levels used:    1
  8211 ;; Hardware stack levels required when called:    8
  8212 ;; This function calls:
  8213 ;;		_I2C_Master_Wait
  8214 ;; This function is called by:
  8215 ;;		_getRTC
  8216 ;; This function uses a non-reentrant model
  8217 ;;
  8218                           
  8219                           	psect	text28
  8220  003DA6                     __ptext28:
  8221                           	opt stack 0
  8222  003DA6                     _I2C_Master_Read:
  8223                           	opt stack 18
  8224                           
  8225                           ;incstack = 0
  8226                           ;I2C_Master_Read@a stored from wreg
  8227  003DA6  0100               	movlb	0	; () banked
  8228  003DA8  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  8229                           
  8230                           ;I2C.c: 57: unsigned char temp;
  8231                           ;I2C.c: 58: I2C_Master_Wait();
  8232  003DAA  ECF3  F01F         	call	_I2C_Master_Wait	;wreg free
  8233                           
  8234                           ;I2C.c: 59: RCEN = 1;
  8235  003DAE  86C5               	bsf	4037,3,c	;volatile
  8236                           
  8237                           ;I2C.c: 60: I2C_Master_Wait();
  8238  003DB0  ECF3  F01F         	call	_I2C_Master_Wait	;wreg free
  8239                           
  8240                           ;I2C.c: 61: temp = SSPBUF;
  8241  003DB4  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  8242                           
  8243                           ;I2C.c: 62: I2C_Master_Wait();
  8244  003DB8  ECF3  F01F         	call	_I2C_Master_Wait	;wreg free
  8245                           
  8246                           ;I2C.c: 63: ACKDT = (a)?0:1;
  8247  003DBC  0100               	movlb	0	; () banked
  8248  003DBE  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  8249  003DC0  0100               	movlb	0	; () banked
  8250  003DC2  A4D8               	btfss	status,2,c
  8251  003DC4  D002               	goto	u3300
  8252  003DC6  8AC5               	bsf	4037,5,c	;volatile
  8253  003DC8  D001               	goto	l4893
  8254  003DCA                     u3300:
  8255  003DCA  9AC5               	bcf	4037,5,c	;volatile
  8256  003DCC                     l4893:
  8257                           
  8258                           ;I2C.c: 64: ACKEN = 1;
  8259  003DCC  88C5               	bsf	4037,4,c	;volatile
  8260                           
  8261                           ;I2C.c: 65: return temp;
  8262  003DCE  0100               	movlb	0	; () banked
  8263  003DD0  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  8264  003DD2  0012               	return	
  8265  003DD4                     __end_of_I2C_Master_Read:
  8266                           	opt stack 0
  8267                           tblptru	equ	0xFF8
  8268                           tblptrh	equ	0xFF7
  8269                           tblptrl	equ	0xFF6
  8270                           tablat	equ	0xFF5
  8271                           prodh	equ	0xFF4
  8272                           prodl	equ	0xFF3
  8273                           intcon	equ	0xFF2
  8274                           intcon2	equ	0xFF1
  8275                           intcon3	equ	0xFF0
  8276                           postinc0	equ	0xFEE
  8277                           wreg	equ	0xFE8
  8278                           postdec1	equ	0xFE5
  8279                           fsr1l	equ	0xFE1
  8280                           indf2	equ	0xFDF
  8281                           postinc2	equ	0xFDE
  8282                           postdec2	equ	0xFDD
  8283                           fsr2h	equ	0xFDA
  8284                           fsr2l	equ	0xFD9
  8285                           status	equ	0xFD8
  8286                           
  8287 ;; *************** function _I2C_Master_Wait *****************
  8288 ;; Defined at:
  8289 ;;		line 26 in file "I2C.c"
  8290 ;; Parameters:    Size  Location     Type
  8291 ;;		None
  8292 ;; Auto vars:     Size  Location     Type
  8293 ;;		None
  8294 ;; Return value:  Size  Location     Type
  8295 ;;                  1    wreg      void 
  8296 ;; Registers used:
  8297 ;;		wreg, status,2, status,0
  8298 ;; Tracked objects:
  8299 ;;		On entry : 0/0
  8300 ;;		On exit  : 0/0
  8301 ;;		Unchanged: 0/0
  8302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8305 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8306 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8307 ;;Total ram usage:        1 bytes
  8308 ;; Hardware stack levels used:    1
  8309 ;; Hardware stack levels required when called:    7
  8310 ;; This function calls:
  8311 ;;		Nothing
  8312 ;; This function is called by:
  8313 ;;		_I2C_Master_Start
  8314 ;;		_I2C_Master_Stop
  8315 ;;		_I2C_Master_Write
  8316 ;;		_I2C_Master_Read
  8317 ;;		_I2C_Master_RepeatedStart
  8318 ;; This function uses a non-reentrant model
  8319 ;;
  8320                           
  8321                           	psect	text29
  8322  003FE6                     __ptext29:
  8323                           	opt stack 0
  8324  003FE6                     _I2C_Master_Wait:
  8325                           	opt stack 18
  8326  003FE6                     l66:
  8327  003FE6  B4C7               	btfsc	4039,2,c	;volatile
  8328  003FE8  D7FE               	goto	l66
  8329  003FEA  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  8330  003FEE  0E1F               	movlw	31
  8331  003FF0  0100               	movlb	0	; () banked
  8332  003FF2  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8333  003FF4  B4D8               	btfsc	status,2,c
  8334  003FF6  0012               	return	
  8335  003FF8  D7F6               	goto	l66
  8336  003FFA                     __end_of_I2C_Master_Wait:
  8337                           	opt stack 0
  8338                           tblptru	equ	0xFF8
  8339                           tblptrh	equ	0xFF7
  8340                           tblptrl	equ	0xFF6
  8341                           tablat	equ	0xFF5
  8342                           prodh	equ	0xFF4
  8343                           prodl	equ	0xFF3
  8344                           intcon	equ	0xFF2
  8345                           intcon2	equ	0xFF1
  8346                           intcon3	equ	0xFF0
  8347                           postinc0	equ	0xFEE
  8348                           wreg	equ	0xFE8
  8349                           postdec1	equ	0xFE5
  8350                           fsr1l	equ	0xFE1
  8351                           indf2	equ	0xFDF
  8352                           postinc2	equ	0xFDE
  8353                           postdec2	equ	0xFDD
  8354                           fsr2h	equ	0xFDA
  8355                           fsr2l	equ	0xFD9
  8356                           status	equ	0xFD8
  8357                           
  8358 ;; *************** function _change_state_to_menu_22 *****************
  8359 ;; Defined at:
  8360 ;;		line 496 in file "UI.c"
  8361 ;; Parameters:    Size  Location     Type
  8362 ;;		None
  8363 ;; Auto vars:     Size  Location     Type
  8364 ;;		None
  8365 ;; Return value:  Size  Location     Type
  8366 ;;                  1    wreg      void 
  8367 ;; Registers used:
  8368 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8369 ;; Tracked objects:
  8370 ;;		On entry : 0/0
  8371 ;;		On exit  : 0/0
  8372 ;;		Unchanged: 0/0
  8373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8377 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8378 ;;Total ram usage:        0 bytes
  8379 ;; Hardware stack levels used:    1
  8380 ;; Hardware stack levels required when called:   10
  8381 ;; This function calls:
  8382 ;;		_lcdInst
  8383 ;;		_printf
  8384 ;; This function is called by:
  8385 ;;		_UI
  8386 ;; This function uses a non-reentrant model
  8387 ;;
  8388                           
  8389                           	psect	text30
  8390  003AE8                     __ptext30:
  8391                           	opt stack 0
  8392  003AE8                     _change_state_to_menu_22:
  8393                           	opt stack 19
  8394                           
  8395                           ;UI.c: 497: cur_state = 22;
  8396                           
  8397                           ; BSR set to: 0
  8398                           ;incstack = 0
  8399  003AE8  0E00               	movlw	0
  8400  003AEA  0100               	movlb	0	; () banked
  8401  003AEC  6FDF               	movwf	(_cur_state+1)& (0+255),b
  8402  003AEE  0E16               	movlw	22
  8403  003AF0  6FDE               	movwf	_cur_state& (0+255),b
  8404                           
  8405                           ; BSR set to: 0
  8406                           ;UI.c: 499: lcdInst(0b10000000);;
  8407  003AF2  0E80               	movlw	128
  8408  003AF4  EC0E  F020         	call	_lcdInst
  8409                           
  8410                           ;UI.c: 500: printf("2. SORT        <");
  8411  003AF8  0E03               	movlw	low STR_34
  8412  003AFA  0100               	movlb	0	; () banked
  8413  003AFC  6F8E               	movwf	printf@f& (0+255),b
  8414  003AFE  0EFE               	movlw	high STR_34
  8415  003B00  0100               	movlb	0	; () banked
  8416  003B02  6F8F               	movwf	(printf@f+1)& (0+255),b
  8417  003B04  EC97  F008         	call	_printf	;wreg free
  8418                           
  8419                           ;UI.c: 501: lcdInst(0b11000000);;
  8420  003B08  0EC0               	movlw	192
  8421  003B0A  EC0E  F020         	call	_lcdInst
  8422                           
  8423                           ;UI.c: 502: printf("3. LOGS         ");
  8424  003B0E  0E48               	movlw	low STR_36
  8425  003B10  0100               	movlb	0	; () banked
  8426  003B12  6F8E               	movwf	printf@f& (0+255),b
  8427  003B14  0EFD               	movlw	high STR_36
  8428  003B16  0100               	movlb	0	; () banked
  8429  003B18  6F8F               	movwf	(printf@f+1)& (0+255),b
  8430  003B1A  EC97  F008         	call	_printf	;wreg free
  8431  003B1E  0012               	return		;funcret
  8432  003B20                     __end_of_change_state_to_menu_22:
  8433                           	opt stack 0
  8434                           tblptru	equ	0xFF8
  8435                           tblptrh	equ	0xFF7
  8436                           tblptrl	equ	0xFF6
  8437                           tablat	equ	0xFF5
  8438                           prodh	equ	0xFF4
  8439                           prodl	equ	0xFF3
  8440                           intcon	equ	0xFF2
  8441                           intcon2	equ	0xFF1
  8442                           intcon3	equ	0xFF0
  8443                           postinc0	equ	0xFEE
  8444                           wreg	equ	0xFE8
  8445                           postdec1	equ	0xFE5
  8446                           fsr1l	equ	0xFE1
  8447                           indf2	equ	0xFDF
  8448                           postinc2	equ	0xFDE
  8449                           postdec2	equ	0xFDD
  8450                           fsr2h	equ	0xFDA
  8451                           fsr2l	equ	0xFD9
  8452                           status	equ	0xFD8
  8453                           
  8454 ;; *************** function _change_state_to_menu_12 *****************
  8455 ;; Defined at:
  8456 ;;		line 488 in file "UI.c"
  8457 ;; Parameters:    Size  Location     Type
  8458 ;;		None
  8459 ;; Auto vars:     Size  Location     Type
  8460 ;;		None
  8461 ;; Return value:  Size  Location     Type
  8462 ;;                  1    wreg      void 
  8463 ;; Registers used:
  8464 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8465 ;; Tracked objects:
  8466 ;;		On entry : 0/0
  8467 ;;		On exit  : 0/0
  8468 ;;		Unchanged: 0/0
  8469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8473 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8474 ;;Total ram usage:        0 bytes
  8475 ;; Hardware stack levels used:    1
  8476 ;; Hardware stack levels required when called:   10
  8477 ;; This function calls:
  8478 ;;		_lcdInst
  8479 ;;		_printf
  8480 ;; This function is called by:
  8481 ;;		_UI
  8482 ;; This function uses a non-reentrant model
  8483 ;;
  8484                           
  8485                           	psect	text31
  8486  003B20                     __ptext31:
  8487                           	opt stack 0
  8488  003B20                     _change_state_to_menu_12:
  8489                           	opt stack 19
  8490                           
  8491                           ;UI.c: 489: cur_state = 12;
  8492                           
  8493                           ;incstack = 0
  8494  003B20  0E00               	movlw	0
  8495  003B22  0100               	movlb	0	; () banked
  8496  003B24  6FDF               	movwf	(_cur_state+1)& (0+255),b
  8497  003B26  0E0C               	movlw	12
  8498  003B28  6FDE               	movwf	_cur_state& (0+255),b
  8499                           
  8500                           ; BSR set to: 0
  8501                           ;UI.c: 491: lcdInst(0b10000000);;
  8502  003B2A  0E80               	movlw	128
  8503  003B2C  EC0E  F020         	call	_lcdInst
  8504                           
  8505                           ;UI.c: 492: printf("1. DATE/TIME    ");
  8506  003B30  0E6A               	movlw	low STR_33
  8507  003B32  0100               	movlb	0	; () banked
  8508  003B34  6F8E               	movwf	printf@f& (0+255),b
  8509  003B36  0EFD               	movlw	high STR_33
  8510  003B38  0100               	movlb	0	; () banked
  8511  003B3A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8512  003B3C  EC97  F008         	call	_printf	;wreg free
  8513                           
  8514                           ;UI.c: 493: lcdInst(0b11000000);;
  8515  003B40  0EC0               	movlw	192
  8516  003B42  EC0E  F020         	call	_lcdInst
  8517                           
  8518                           ;UI.c: 494: printf("2. SORT        <");
  8519  003B46  0E03               	movlw	low STR_34
  8520  003B48  0100               	movlb	0	; () banked
  8521  003B4A  6F8E               	movwf	printf@f& (0+255),b
  8522  003B4C  0EFE               	movlw	high STR_34
  8523  003B4E  0100               	movlb	0	; () banked
  8524  003B50  6F8F               	movwf	(printf@f+1)& (0+255),b
  8525  003B52  EC97  F008         	call	_printf	;wreg free
  8526  003B56  0012               	return		;funcret
  8527  003B58                     __end_of_change_state_to_menu_12:
  8528                           	opt stack 0
  8529                           tblptru	equ	0xFF8
  8530                           tblptrh	equ	0xFF7
  8531                           tblptrl	equ	0xFF6
  8532                           tablat	equ	0xFF5
  8533                           prodh	equ	0xFF4
  8534                           prodl	equ	0xFF3
  8535                           intcon	equ	0xFF2
  8536                           intcon2	equ	0xFF1
  8537                           intcon3	equ	0xFF0
  8538                           postinc0	equ	0xFEE
  8539                           wreg	equ	0xFE8
  8540                           postdec1	equ	0xFE5
  8541                           fsr1l	equ	0xFE1
  8542                           indf2	equ	0xFDF
  8543                           postinc2	equ	0xFDE
  8544                           postdec2	equ	0xFDD
  8545                           fsr2h	equ	0xFDA
  8546                           fsr2l	equ	0xFD9
  8547                           status	equ	0xFD8
  8548                           
  8549 ;; *************** function ___awmod *****************
  8550 ;; Defined at:
  8551 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8552 ;; Parameters:    Size  Location     Type
  8553 ;;  dividend        2    0[BANK0 ] int 
  8554 ;;  divisor         2    2[BANK0 ] int 
  8555 ;; Auto vars:     Size  Location     Type
  8556 ;;  sign            1    5[BANK0 ] unsigned char 
  8557 ;;  counter         1    4[BANK0 ] unsigned char 
  8558 ;; Return value:  Size  Location     Type
  8559 ;;                  2    0[BANK0 ] int 
  8560 ;; Registers used:
  8561 ;;		wreg, status,2, status,0
  8562 ;; Tracked objects:
  8563 ;;		On entry : 0/0
  8564 ;;		On exit  : 0/0
  8565 ;;		Unchanged: 0/0
  8566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8567 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8568 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8570 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8571 ;;Total ram usage:        6 bytes
  8572 ;; Hardware stack levels used:    1
  8573 ;; Hardware stack levels required when called:    7
  8574 ;; This function calls:
  8575 ;;		Nothing
  8576 ;; This function is called by:
  8577 ;;		_UI
  8578 ;; This function uses a non-reentrant model
  8579 ;;
  8580                           
  8581                           	psect	text32
  8582  0031AA                     __ptext32:
  8583                           	opt stack 0
  8584  0031AA                     ___awmod:
  8585                           	opt stack 22
  8586                           
  8587                           ;incstack = 0
  8588  0031AA  0E00               	movlw	0
  8589  0031AC  0100               	movlb	0	; () banked
  8590  0031AE  6F85               	movwf	___awmod@sign& (0+255),b
  8591                           
  8592                           ; BSR set to: 0
  8593  0031B0  0100               	movlb	0	; () banked
  8594  0031B2  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8595  0031B4  D008               	goto	l6691
  8596                           
  8597                           ; BSR set to: 0
  8598  0031B6  0100               	movlb	0	; () banked
  8599  0031B8  6D80               	negf	___awmod@dividend& (0+255),b
  8600  0031BA  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8601  0031BC  B0D8               	btfsc	status,0,c
  8602  0031BE  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8603                           
  8604                           ; BSR set to: 0
  8605  0031C0  0E01               	movlw	1
  8606  0031C2  0100               	movlb	0	; () banked
  8607  0031C4  6F85               	movwf	___awmod@sign& (0+255),b
  8608  0031C6                     l6691:
  8609                           
  8610                           ; BSR set to: 0
  8611  0031C6  0100               	movlb	0	; () banked
  8612  0031C8  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8613  0031CA  D005               	goto	l6695
  8614                           
  8615                           ; BSR set to: 0
  8616  0031CC  0100               	movlb	0	; () banked
  8617  0031CE  6D82               	negf	___awmod@divisor& (0+255),b
  8618  0031D0  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  8619  0031D2  B0D8               	btfsc	status,0,c
  8620  0031D4  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  8621  0031D6                     l6695:
  8622                           
  8623                           ; BSR set to: 0
  8624  0031D6  0100               	movlb	0	; () banked
  8625  0031D8  5182               	movf	___awmod@divisor& (0+255),w,b
  8626  0031DA  0100               	movlb	0	; () banked
  8627  0031DC  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8628  0031DE  B4D8               	btfsc	status,2,c
  8629  0031E0  D026               	goto	l6711
  8630                           
  8631                           ; BSR set to: 0
  8632  0031E2  0E01               	movlw	1
  8633  0031E4  0100               	movlb	0	; () banked
  8634  0031E6  6F84               	movwf	___awmod@counter& (0+255),b
  8635  0031E8  D006               	goto	l6701
  8636  0031EA                     l6699:
  8637                           
  8638                           ; BSR set to: 0
  8639  0031EA  0100               	movlb	0	; () banked
  8640  0031EC  90D8               	bcf	status,0,c
  8641  0031EE  3782               	rlcf	___awmod@divisor& (0+255),f,b
  8642  0031F0  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8643  0031F2  0100               	movlb	0	; () banked
  8644  0031F4  2B84               	incf	___awmod@counter& (0+255),f,b
  8645  0031F6                     l6701:
  8646                           
  8647                           ; BSR set to: 0
  8648  0031F6  0100               	movlb	0	; () banked
  8649  0031F8  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8650  0031FA  D7F7               	goto	l6699
  8651  0031FC                     l6703:
  8652                           
  8653                           ; BSR set to: 0
  8654  0031FC  0100               	movlb	0	; () banked
  8655  0031FE  5182               	movf	___awmod@divisor& (0+255),w,b
  8656  003200  0100               	movlb	0	; () banked
  8657  003202  5D80               	subwf	___awmod@dividend& (0+255),w,b
  8658  003204  0100               	movlb	0	; () banked
  8659  003206  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8660  003208  0100               	movlb	0	; () banked
  8661  00320A  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8662  00320C  A0D8               	btfss	status,0,c
  8663  00320E  D008               	goto	l6707
  8664                           
  8665                           ; BSR set to: 0
  8666  003210  0100               	movlb	0	; () banked
  8667  003212  5182               	movf	___awmod@divisor& (0+255),w,b
  8668  003214  0100               	movlb	0	; () banked
  8669  003216  5F80               	subwf	___awmod@dividend& (0+255),f,b
  8670  003218  0100               	movlb	0	; () banked
  8671  00321A  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8672  00321C  0100               	movlb	0	; () banked
  8673  00321E  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8674  003220                     l6707:
  8675                           
  8676                           ; BSR set to: 0
  8677  003220  0100               	movlb	0	; () banked
  8678  003222  90D8               	bcf	status,0,c
  8679  003224  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8680  003226  3382               	rrcf	___awmod@divisor& (0+255),f,b
  8681                           
  8682                           ; BSR set to: 0
  8683  003228  0100               	movlb	0	; () banked
  8684  00322A  2F84               	decfsz	___awmod@counter& (0+255),f,b
  8685  00322C  D7E7               	goto	l6703
  8686  00322E                     l6711:
  8687                           
  8688                           ; BSR set to: 0
  8689  00322E  0100               	movlb	0	; () banked
  8690  003230  5185               	movf	___awmod@sign& (0+255),w,b
  8691  003232  0100               	movlb	0	; () banked
  8692  003234  B4D8               	btfsc	status,2,c
  8693  003236  D005               	goto	l6715
  8694                           
  8695                           ; BSR set to: 0
  8696  003238  0100               	movlb	0	; () banked
  8697  00323A  6D80               	negf	___awmod@dividend& (0+255),b
  8698  00323C  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8699  00323E  B0D8               	btfsc	status,0,c
  8700  003240  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8701  003242                     l6715:
  8702                           
  8703                           ; BSR set to: 0
  8704  003242  C080  F080         	movff	___awmod@dividend,?___awmod
  8705  003246  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  8706  00324A  0012               	return	
  8707  00324C                     __end_of___awmod:
  8708                           	opt stack 0
  8709                           tblptru	equ	0xFF8
  8710                           tblptrh	equ	0xFF7
  8711                           tblptrl	equ	0xFF6
  8712                           tablat	equ	0xFF5
  8713                           prodh	equ	0xFF4
  8714                           prodl	equ	0xFF3
  8715                           intcon	equ	0xFF2
  8716                           intcon2	equ	0xFF1
  8717                           intcon3	equ	0xFF0
  8718                           postinc0	equ	0xFEE
  8719                           wreg	equ	0xFE8
  8720                           postdec1	equ	0xFE5
  8721                           fsr1l	equ	0xFE1
  8722                           indf2	equ	0xFDF
  8723                           postinc2	equ	0xFDE
  8724                           postdec2	equ	0xFDD
  8725                           fsr2h	equ	0xFDA
  8726                           fsr2l	equ	0xFD9
  8727                           status	equ	0xFD8
  8728                           
  8729 ;; *************** function ___awdiv *****************
  8730 ;; Defined at:
  8731 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8732 ;; Parameters:    Size  Location     Type
  8733 ;;  dividend        2    6[BANK0 ] int 
  8734 ;;  divisor         2    8[BANK0 ] int 
  8735 ;; Auto vars:     Size  Location     Type
  8736 ;;  quotient        2   12[BANK0 ] int 
  8737 ;;  sign            1   11[BANK0 ] unsigned char 
  8738 ;;  counter         1   10[BANK0 ] unsigned char 
  8739 ;; Return value:  Size  Location     Type
  8740 ;;                  2    6[BANK0 ] int 
  8741 ;; Registers used:
  8742 ;;		wreg, status,2, status,0
  8743 ;; Tracked objects:
  8744 ;;		On entry : 0/0
  8745 ;;		On exit  : 0/0
  8746 ;;		Unchanged: 0/0
  8747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8748 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8749 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8751 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8752 ;;Total ram usage:        8 bytes
  8753 ;; Hardware stack levels used:    1
  8754 ;; Hardware stack levels required when called:    7
  8755 ;; This function calls:
  8756 ;;		Nothing
  8757 ;; This function is called by:
  8758 ;;		_UI
  8759 ;; This function uses a non-reentrant model
  8760 ;;
  8761                           
  8762                           	psect	text33
  8763  002F86                     __ptext33:
  8764                           	opt stack 0
  8765  002F86                     ___awdiv:
  8766                           	opt stack 22
  8767                           
  8768                           ; BSR set to: 0
  8769                           ;incstack = 0
  8770  002F86  0E00               	movlw	0
  8771  002F88  0100               	movlb	0	; () banked
  8772  002F8A  6F8B               	movwf	___awdiv@sign& (0+255),b
  8773                           
  8774                           ; BSR set to: 0
  8775  002F8C  0100               	movlb	0	; () banked
  8776  002F8E  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8777  002F90  D008               	goto	l6647
  8778                           
  8779                           ; BSR set to: 0
  8780  002F92  0100               	movlb	0	; () banked
  8781  002F94  6D88               	negf	___awdiv@divisor& (0+255),b
  8782  002F96  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8783  002F98  B0D8               	btfsc	status,0,c
  8784  002F9A  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8785                           
  8786                           ; BSR set to: 0
  8787  002F9C  0E01               	movlw	1
  8788  002F9E  0100               	movlb	0	; () banked
  8789  002FA0  6F8B               	movwf	___awdiv@sign& (0+255),b
  8790  002FA2                     l6647:
  8791                           
  8792                           ; BSR set to: 0
  8793  002FA2  0100               	movlb	0	; () banked
  8794  002FA4  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8795  002FA6  D008               	goto	l6653
  8796                           
  8797                           ; BSR set to: 0
  8798  002FA8  0100               	movlb	0	; () banked
  8799  002FAA  6D86               	negf	___awdiv@dividend& (0+255),b
  8800  002FAC  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8801  002FAE  B0D8               	btfsc	status,0,c
  8802  002FB0  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8803                           
  8804                           ; BSR set to: 0
  8805  002FB2  0E01               	movlw	1
  8806  002FB4  0100               	movlb	0	; () banked
  8807  002FB6  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  8808  002FB8                     l6653:
  8809                           
  8810                           ; BSR set to: 0
  8811  002FB8  0E00               	movlw	0
  8812  002FBA  0100               	movlb	0	; () banked
  8813  002FBC  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  8814  002FBE  0E00               	movlw	0
  8815  002FC0  6F8C               	movwf	___awdiv@quotient& (0+255),b
  8816                           
  8817                           ; BSR set to: 0
  8818  002FC2  0100               	movlb	0	; () banked
  8819  002FC4  5188               	movf	___awdiv@divisor& (0+255),w,b
  8820  002FC6  0100               	movlb	0	; () banked
  8821  002FC8  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8822  002FCA  B4D8               	btfsc	status,2,c
  8823  002FCC  D02C               	goto	l6675
  8824                           
  8825                           ; BSR set to: 0
  8826  002FCE  0E01               	movlw	1
  8827  002FD0  0100               	movlb	0	; () banked
  8828  002FD2  6F8A               	movwf	___awdiv@counter& (0+255),b
  8829  002FD4  D006               	goto	l6661
  8830  002FD6                     l6659:
  8831                           
  8832                           ; BSR set to: 0
  8833  002FD6  0100               	movlb	0	; () banked
  8834  002FD8  90D8               	bcf	status,0,c
  8835  002FDA  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  8836  002FDC  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8837  002FDE  0100               	movlb	0	; () banked
  8838  002FE0  2B8A               	incf	___awdiv@counter& (0+255),f,b
  8839  002FE2                     l6661:
  8840                           
  8841                           ; BSR set to: 0
  8842  002FE2  0100               	movlb	0	; () banked
  8843  002FE4  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8844  002FE6  D7F7               	goto	l6659
  8845  002FE8                     l6663:
  8846                           
  8847                           ; BSR set to: 0
  8848  002FE8  0100               	movlb	0	; () banked
  8849  002FEA  90D8               	bcf	status,0,c
  8850  002FEC  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  8851  002FEE  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8852                           
  8853                           ; BSR set to: 0
  8854  002FF0  0100               	movlb	0	; () banked
  8855  002FF2  5188               	movf	___awdiv@divisor& (0+255),w,b
  8856  002FF4  0100               	movlb	0	; () banked
  8857  002FF6  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  8858  002FF8  0100               	movlb	0	; () banked
  8859  002FFA  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8860  002FFC  0100               	movlb	0	; () banked
  8861  002FFE  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8862  003000  A0D8               	btfss	status,0,c
  8863  003002  D00A               	goto	l6671
  8864                           
  8865                           ; BSR set to: 0
  8866  003004  0100               	movlb	0	; () banked
  8867  003006  5188               	movf	___awdiv@divisor& (0+255),w,b
  8868  003008  0100               	movlb	0	; () banked
  8869  00300A  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  8870  00300C  0100               	movlb	0	; () banked
  8871  00300E  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8872  003010  0100               	movlb	0	; () banked
  8873  003012  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8874                           
  8875                           ; BSR set to: 0
  8876  003014  0100               	movlb	0	; () banked
  8877  003016  818C               	bsf	___awdiv@quotient& (0+255),0,b
  8878  003018                     l6671:
  8879                           
  8880                           ; BSR set to: 0
  8881  003018  0100               	movlb	0	; () banked
  8882  00301A  90D8               	bcf	status,0,c
  8883  00301C  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8884  00301E  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  8885                           
  8886                           ; BSR set to: 0
  8887  003020  0100               	movlb	0	; () banked
  8888  003022  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  8889  003024  D7E1               	goto	l6663
  8890  003026                     l6675:
  8891                           
  8892                           ; BSR set to: 0
  8893  003026  0100               	movlb	0	; () banked
  8894  003028  518B               	movf	___awdiv@sign& (0+255),w,b
  8895  00302A  0100               	movlb	0	; () banked
  8896  00302C  B4D8               	btfsc	status,2,c
  8897  00302E  D005               	goto	l6679
  8898                           
  8899                           ; BSR set to: 0
  8900  003030  0100               	movlb	0	; () banked
  8901  003032  6D8C               	negf	___awdiv@quotient& (0+255),b
  8902  003034  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8903  003036  B0D8               	btfsc	status,0,c
  8904  003038  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8905  00303A                     l6679:
  8906                           
  8907                           ; BSR set to: 0
  8908  00303A  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  8909  00303E  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  8910  003042  0012               	return	
  8911  003044                     __end_of___awdiv:
  8912                           	opt stack 0
  8913                           tblptru	equ	0xFF8
  8914                           tblptrh	equ	0xFF7
  8915                           tblptrl	equ	0xFF6
  8916                           tablat	equ	0xFF5
  8917                           prodh	equ	0xFF4
  8918                           prodl	equ	0xFF3
  8919                           intcon	equ	0xFF2
  8920                           intcon2	equ	0xFF1
  8921                           intcon3	equ	0xFF0
  8922                           postinc0	equ	0xFEE
  8923                           wreg	equ	0xFE8
  8924                           postdec1	equ	0xFE5
  8925                           fsr1l	equ	0xFE1
  8926                           indf2	equ	0xFDF
  8927                           postinc2	equ	0xFDE
  8928                           postdec2	equ	0xFDD
  8929                           fsr2h	equ	0xFDA
  8930                           fsr2l	equ	0xFD9
  8931                           status	equ	0xFD8
  8932                           
  8933 ;; *************** function _Test *****************
  8934 ;; Defined at:
  8935 ;;		line 25 in file "Test.c"
  8936 ;; Parameters:    Size  Location     Type
  8937 ;;		None
  8938 ;; Auto vars:     Size  Location     Type
  8939 ;;		None
  8940 ;; Return value:  Size  Location     Type
  8941 ;;                  2  451[None  ] int 
  8942 ;; Registers used:
  8943 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8944 ;; Tracked objects:
  8945 ;;		On entry : 0/0
  8946 ;;		On exit  : 0/0
  8947 ;;		Unchanged: 0/0
  8948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8951 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8952 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8953 ;;Total ram usage:        2 bytes
  8954 ;; Hardware stack levels used:    1
  8955 ;; Hardware stack levels required when called:   11
  8956 ;; This function calls:
  8957 ;;		_EEPROMTest
  8958 ;;		_PortTestA5
  8959 ;;		_PortTests
  8960 ;;		_actuatorTest
  8961 ;;		_algorithmTest
  8962 ;;		_lcdInst
  8963 ;;		_printf
  8964 ;;		_sensorTest
  8965 ;; This function is called by:
  8966 ;;		_main
  8967 ;; This function uses a non-reentrant model
  8968 ;;
  8969                           
  8970                           	psect	text34
  8971  002CE6                     __ptext34:
  8972                           	opt stack 0
  8973  002CE6                     _Test:
  8974                           	opt stack 19
  8975  002CE6                     
  8976                           ;Test.c: 28: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  8977  002CE6  0E01               	movlw	1
  8978  002CE8  EC0E  F020         	call	_lcdInst
  8979  002CEC  0E68               	movlw	104
  8980  002CEE  0100               	movlb	0	; () banked
  8981  002CF0  6FC4               	movwf	??_Test& (0+255),b
  8982  002CF2  0EE4               	movlw	228
  8983  002CF4                     u6857:
  8984  002CF4  2EE8               	decfsz	wreg,f,c
  8985  002CF6  D7FE               	bra	u6857
  8986  002CF8  2FC4               	decfsz	??_Test& (0+255),f,b
  8987  002CFA  D7FC               	bra	u6857
  8988  002CFC  F000               	nop	
  8989  002CFE  0E80               	movlw	128
  8990  002D00  EC0E  F020         	call	_lcdInst
  8991                           
  8992                           ;Test.c: 29: printf("1.ALG|2.SNR|3.AC");
  8993  002D04  0EC0               	movlw	low STR_68
  8994  002D06  0100               	movlb	0	; () banked
  8995  002D08  6F8E               	movwf	printf@f& (0+255),b
  8996  002D0A  0EFC               	movlw	high STR_68
  8997  002D0C  0100               	movlb	0	; () banked
  8998  002D0E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8999  002D10  EC97  F008         	call	_printf	;wreg free
  9000                           
  9001                           ;Test.c: 30: lcdInst(0b11000000);;
  9002  002D14  0EC0               	movlw	192
  9003  002D16  EC0E  F020         	call	_lcdInst
  9004                           
  9005                           ;Test.c: 31: printf("4.HI|5.TOG|6.EEP");
  9006  002D1A  0EF3               	movlw	low STR_69
  9007  002D1C  0100               	movlb	0	; () banked
  9008  002D1E  6F8E               	movwf	printf@f& (0+255),b
  9009  002D20  0EFC               	movlw	high STR_69
  9010  002D22  0100               	movlb	0	; () banked
  9011  002D24  6F8F               	movwf	(printf@f+1)& (0+255),b
  9012  002D26  EC97  F008         	call	_printf	;wreg free
  9013                           
  9014                           ;Test.c: 32: _delay((unsigned long)((100)*(32000000/4000.0)));
  9015  002D2A  0E05               	movlw	5
  9016  002D2C  0100               	movlb	0	; () banked
  9017  002D2E  6FC5               	movwf	(??_Test+1)& (0+255),b
  9018  002D30  0E0F               	movlw	15
  9019  002D32  0100               	movlb	0	; () banked
  9020  002D34  6FC4               	movwf	??_Test& (0+255),b
  9021  002D36  0EF1               	movlw	241
  9022  002D38                     u6867:
  9023  002D38  2EE8               	decfsz	wreg,f,c
  9024  002D3A  D7FE               	bra	u6867
  9025  002D3C  2FC4               	decfsz	??_Test& (0+255),f,b
  9026  002D3E  D7FC               	bra	u6867
  9027  002D40  2FC5               	decfsz	(??_Test+1)& (0+255),f,b
  9028  002D42  D7FA               	bra	u6867
  9029  002D44                     l994:
  9030  002D44  A281               	btfss	3969,1,c	;volatile
  9031  002D46  D7FE               	goto	l994
  9032                           
  9033                           ;Test.c: 34: var = PORTB >> 4 + 1;
  9034  002D48  CF81 F0C4          	movff	3969,??_Test	;volatile
  9035  002D4C  0E05               	movlw	5
  9036  002D4E  0100               	movlb	0	; () banked
  9037  002D50  6FC5               	movwf	(??_Test+1)& (0+255),b
  9038  002D52                     u6345:
  9039  002D52  0100               	movlb	0	; () banked
  9040  002D54  90D8               	bcf	status,0,c
  9041  002D56  33C4               	rrcf	??_Test& (0+255),f,b
  9042  002D58  0100               	movlb	0	; () banked
  9043  002D5A  2FC5               	decfsz	(??_Test+1)& (0+255),f,b
  9044  002D5C  D7FA               	goto	u6345
  9045  002D5E  0100               	movlb	0	; () banked
  9046  002D60  51C4               	movf	??_Test& (0+255),w,b
  9047  002D62  0100               	movlb	0	; () banked
  9048  002D64  6FFA               	movwf	_var& (0+255),b
  9049  002D66  6BFB               	clrf	(_var+1)& (0+255),b
  9050  002D68                     l997:
  9051  002D68  A281               	btfss	3969,1,c	;volatile
  9052  002D6A  D012               	goto	l7403
  9053  002D6C  D7FD               	goto	l997
  9054  002D6E                     l7389:
  9055                           
  9056                           ;Test.c: 38: algorithmTest();
  9057  002D6E  EC58  F017         	call	_algorithmTest	;wreg free
  9058                           
  9059                           ;Test.c: 39: break;
  9060  002D72  D7B9               	goto	l7373
  9061  002D74                     l7391:
  9062                           
  9063                           ;Test.c: 41: sensorTest();
  9064  002D74  EC36  F012         	call	_sensorTest	;wreg free
  9065                           
  9066                           ;Test.c: 42: break;
  9067  002D78  D7B6               	goto	l7373
  9068  002D7A                     l7393:
  9069                           
  9070                           ;Test.c: 44: actuatorTest();
  9071  002D7A  EC5C  F004         	call	_actuatorTest	;wreg free
  9072                           
  9073                           ;Test.c: 45: break;
  9074  002D7E  D7B3               	goto	l7373
  9075  002D80                     l7395:
  9076                           
  9077                           ;Test.c: 47: PortTests();
  9078  002D80  ECFD  F019         	call	_PortTests	;wreg free
  9079                           
  9080                           ;Test.c: 48: break;
  9081  002D84  D7B0               	goto	l7373
  9082  002D86                     l7397:
  9083                           
  9084                           ;Test.c: 50: PortTestA5();
  9085  002D86  ECB9  F01B         	call	_PortTestA5	;wreg free
  9086  002D8A                     l7399:
  9087                           
  9088                           ;Test.c: 52: EEPROMTest();
  9089  002D8A  EC40  F020         	call	_EEPROMTest	;wreg free
  9090                           
  9091                           ;Test.c: 56: }
  9092                           
  9093                           ;Test.c: 55: break;
  9094                           
  9095                           ;Test.c: 54: default:
  9096                           
  9097                           ;Test.c: 53: break;
  9098  002D8E  D7AB               	goto	l7373
  9099  002D90                     l7403:
  9100  002D90  C0FA  F0C4         	movff	_var,??_Test
  9101  002D94  C0FB  F0C5         	movff	_var+1,??_Test+1
  9102                           
  9103                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9104                           ; Switch size 1, requested type "space"
  9105                           ; Number of cases is 1, Range of values is 0 to 0
  9106                           ; switch strategies available:
  9107                           ; Name         Instructions Cycles
  9108                           ; simple_byte            4     3 (average)
  9109                           ;	Chosen strategy is simple_byte
  9110  002D98  0100               	movlb	0	; () banked
  9111  002D9A  51C5               	movf	(??_Test+1)& (0+255),w,b
  9112  002D9C  0A00               	xorlw	0	; case 0
  9113  002D9E  A4D8               	btfss	status,2,c
  9114  002DA0  D7A2               	goto	l7373
  9115                           
  9116                           ; BSR set to: 0
  9117                           ; Switch size 1, requested type "space"
  9118                           ; Number of cases is 6, Range of values is 1 to 6
  9119                           ; switch strategies available:
  9120                           ; Name         Instructions Cycles
  9121                           ; simple_byte           19    10 (average)
  9122                           ;	Chosen strategy is simple_byte
  9123  002DA2  0100               	movlb	0	; () banked
  9124  002DA4  51C4               	movf	??_Test& (0+255),w,b
  9125  002DA6  0A01               	xorlw	1	; case 1
  9126  002DA8  B4D8               	btfsc	status,2,c
  9127  002DAA  D7E1               	goto	l7389
  9128  002DAC  0A03               	xorlw	3	; case 2
  9129  002DAE  B4D8               	btfsc	status,2,c
  9130  002DB0  D7E1               	goto	l7391
  9131  002DB2  0A01               	xorlw	1	; case 3
  9132  002DB4  B4D8               	btfsc	status,2,c
  9133  002DB6  D7E1               	goto	l7393
  9134  002DB8  0A07               	xorlw	7	; case 4
  9135  002DBA  B4D8               	btfsc	status,2,c
  9136  002DBC  D7E1               	goto	l7395
  9137  002DBE  0A01               	xorlw	1	; case 5
  9138  002DC0  B4D8               	btfsc	status,2,c
  9139  002DC2  D7E1               	goto	l7397
  9140  002DC4  0A03               	xorlw	3	; case 6
  9141  002DC6  B4D8               	btfsc	status,2,c
  9142  002DC8  D7E0               	goto	l7399
  9143                           
  9144                           ; BSR set to: 0
  9145                           
  9146                           ; BSR set to: 0
  9147  002DCA  D78D               	goto	l7373
  9148  002DCC                     __end_of_Test:
  9149                           	opt stack 0
  9150                           tblptru	equ	0xFF8
  9151                           tblptrh	equ	0xFF7
  9152                           tblptrl	equ	0xFF6
  9153                           tablat	equ	0xFF5
  9154                           prodh	equ	0xFF4
  9155                           prodl	equ	0xFF3
  9156                           intcon	equ	0xFF2
  9157                           intcon2	equ	0xFF1
  9158                           intcon3	equ	0xFF0
  9159                           postinc0	equ	0xFEE
  9160                           wreg	equ	0xFE8
  9161                           postdec1	equ	0xFE5
  9162                           fsr1l	equ	0xFE1
  9163                           indf2	equ	0xFDF
  9164                           postinc2	equ	0xFDE
  9165                           postdec2	equ	0xFDD
  9166                           fsr2h	equ	0xFDA
  9167                           fsr2l	equ	0xFD9
  9168                           status	equ	0xFD8
  9169                           
  9170 ;; *************** function _sensorTest *****************
  9171 ;; Defined at:
  9172 ;;		line 104 in file "Test.c"
  9173 ;; Parameters:    Size  Location     Type
  9174 ;;		None
  9175 ;; Auto vars:     Size  Location     Type
  9176 ;;		None
  9177 ;; Return value:  Size  Location     Type
  9178 ;;                  1    wreg      void 
  9179 ;; Registers used:
  9180 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9181 ;; Tracked objects:
  9182 ;;		On entry : 0/0
  9183 ;;		On exit  : 0/0
  9184 ;;		Unchanged: 0/0
  9185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9188 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9189 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9190 ;;Total ram usage:        2 bytes
  9191 ;; Hardware stack levels used:    1
  9192 ;; Hardware stack levels required when called:   10
  9193 ;; This function calls:
  9194 ;;		_lcdInst
  9195 ;;		_printf
  9196 ;;		_readIR
  9197 ;;		_readMAG
  9198 ;; This function is called by:
  9199 ;;		_Test
  9200 ;; This function uses a non-reentrant model
  9201 ;;
  9202                           
  9203                           	psect	text35
  9204  00246C                     __ptext35:
  9205                           	opt stack 0
  9206  00246C                     _sensorTest:
  9207                           	opt stack 19
  9208                           
  9209                           ;Test.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9210                           
  9211                           ; BSR set to: 0
  9212                           ;incstack = 0
  9213  00246C  0E01               	movlw	1
  9214  00246E  EC0E  F020         	call	_lcdInst
  9215  002472  0E68               	movlw	104
  9216  002474  0100               	movlb	0	; () banked
  9217  002476  6FAB               	movwf	??_sensorTest& (0+255),b
  9218  002478  0EE4               	movlw	228
  9219  00247A                     u6877:
  9220  00247A  2EE8               	decfsz	wreg,f,c
  9221  00247C  D7FE               	bra	u6877
  9222  00247E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9223  002480  D7FC               	bra	u6877
  9224  002482  F000               	nop	
  9225  002484  0E80               	movlw	128
  9226  002486  EC0E  F020         	call	_lcdInst
  9227                           
  9228                           ;Test.c: 107: printf("SENSORS");
  9229  00248A  0EAD               	movlw	low STR_77
  9230  00248C  0100               	movlb	0	; () banked
  9231  00248E  6F8E               	movwf	printf@f& (0+255),b
  9232  002490  0EFF               	movlw	high STR_77
  9233  002492  0100               	movlb	0	; () banked
  9234  002494  6F8F               	movwf	(printf@f+1)& (0+255),b
  9235  002496  EC97  F008         	call	_printf	;wreg free
  9236                           
  9237                           ;Test.c: 108: lcdInst(0b11000000);;
  9238  00249A  0EC0               	movlw	192
  9239  00249C  EC0E  F020         	call	_lcdInst
  9240                           
  9241                           ;Test.c: 109: printf("PUSH TO START");
  9242  0024A0  0E28               	movlw	low STR_71
  9243  0024A2  0100               	movlb	0	; () banked
  9244  0024A4  6F8E               	movwf	printf@f& (0+255),b
  9245  0024A6  0EFF               	movlw	high STR_71
  9246  0024A8  0100               	movlb	0	; () banked
  9247  0024AA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9248  0024AC  EC97  F008         	call	_printf	;wreg free
  9249                           
  9250                           ;Test.c: 110: _delay((unsigned long)((100)*(32000000/4000.0)));
  9251  0024B0  0E05               	movlw	5
  9252  0024B2  0100               	movlb	0	; () banked
  9253  0024B4  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9254  0024B6  0E0F               	movlw	15
  9255  0024B8  0100               	movlb	0	; () banked
  9256  0024BA  6FAB               	movwf	??_sensorTest& (0+255),b
  9257  0024BC  0EF1               	movlw	241
  9258  0024BE                     u6887:
  9259  0024BE  2EE8               	decfsz	wreg,f,c
  9260  0024C0  D7FE               	bra	u6887
  9261  0024C2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9262  0024C4  D7FC               	bra	u6887
  9263  0024C6  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9264  0024C8  D7FA               	bra	u6887
  9265  0024CA                     l1023:
  9266  0024CA  A281               	btfss	3969,1,c	;volatile
  9267  0024CC  D7FE               	goto	l1023
  9268  0024CE                     l1026:
  9269  0024CE  B281               	btfsc	3969,1,c	;volatile
  9270  0024D0  D7FE               	goto	l1026
  9271                           
  9272                           ;Test.c: 113: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9273  0024D2  0E01               	movlw	1
  9274  0024D4  EC0E  F020         	call	_lcdInst
  9275  0024D8  0E68               	movlw	104
  9276  0024DA  0100               	movlb	0	; () banked
  9277  0024DC  6FAB               	movwf	??_sensorTest& (0+255),b
  9278  0024DE  0EE4               	movlw	228
  9279  0024E0                     u6897:
  9280  0024E0  2EE8               	decfsz	wreg,f,c
  9281  0024E2  D7FE               	bra	u6897
  9282  0024E4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9283  0024E6  D7FC               	bra	u6897
  9284  0024E8  F000               	nop	
  9285  0024EA  0E80               	movlw	128
  9286  0024EC  EC0E  F020         	call	_lcdInst
  9287                           
  9288                           ;Test.c: 118: printf("TST: IR SNSR");
  9289  0024F0  0E52               	movlw	low STR_79
  9290  0024F2  0100               	movlb	0	; () banked
  9291  0024F4  6F8E               	movwf	printf@f& (0+255),b
  9292  0024F6  0EFF               	movlw	high STR_79
  9293  0024F8  0100               	movlb	0	; () banked
  9294  0024FA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9295  0024FC  EC97  F008         	call	_printf	;wreg free
  9296                           
  9297                           ;Test.c: 119: _delay((unsigned long)((100)*(32000000/4000.0)));
  9298  002500  0E05               	movlw	5
  9299  002502  0100               	movlb	0	; () banked
  9300  002504  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9301  002506  0E0F               	movlw	15
  9302  002508  0100               	movlb	0	; () banked
  9303  00250A  6FAB               	movwf	??_sensorTest& (0+255),b
  9304  00250C  0EF1               	movlw	241
  9305  00250E                     u6907:
  9306  00250E  2EE8               	decfsz	wreg,f,c
  9307  002510  D7FE               	bra	u6907
  9308  002512  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9309  002514  D7FC               	bra	u6907
  9310  002516  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9311  002518  D7FA               	bra	u6907
  9312                           
  9313                           ;Test.c: 120: while(PORTBbits.RB1 == 0){
  9314  00251A  D021               	goto	l6175
  9315  00251C                     l6169:
  9316                           
  9317                           ;Test.c: 121: readIR();
  9318  00251C  EC0A  F01D         	call	_readIR	;wreg free
  9319                           
  9320                           ;Test.c: 122: lcdInst(0b10000000);;
  9321  002520  0E80               	movlw	128
  9322  002522  EC0E  F020         	call	_lcdInst
  9323                           
  9324                           ;Test.c: 123: lcdInst(0b11000000);;
  9325  002526  0EC0               	movlw	192
  9326  002528  EC0E  F020         	call	_lcdInst
  9327                           
  9328                           ;Test.c: 124: printf("IR_signal: %d ", IR_signal);
  9329  00252C  0E77               	movlw	low STR_80
  9330  00252E  0100               	movlb	0	; () banked
  9331  002530  6F8E               	movwf	printf@f& (0+255),b
  9332  002532  0EFE               	movlw	high STR_80
  9333  002534  0100               	movlb	0	; () banked
  9334  002536  6F8F               	movwf	(printf@f+1)& (0+255),b
  9335  002538  C0DA  F090         	movff	_IR_signal,?_printf+2
  9336  00253C  C0DB  F091         	movff	_IR_signal+1,?_printf+3
  9337  002540  EC97  F008         	call	_printf	;wreg free
  9338                           
  9339                           ;Test.c: 125: _delay((unsigned long)((100)*(32000000/4000.0)));
  9340  002544  0E05               	movlw	5
  9341  002546  0100               	movlb	0	; () banked
  9342  002548  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9343  00254A  0E0F               	movlw	15
  9344  00254C  0100               	movlb	0	; () banked
  9345  00254E  6FAB               	movwf	??_sensorTest& (0+255),b
  9346  002550  0EF1               	movlw	241
  9347  002552                     u6917:
  9348  002552  2EE8               	decfsz	wreg,f,c
  9349  002554  D7FE               	bra	u6917
  9350  002556  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9351  002558  D7FC               	bra	u6917
  9352  00255A  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9353  00255C  D7FA               	bra	u6917
  9354  00255E                     l6175:
  9355  00255E  A281               	btfss	3969,1,c	;volatile
  9356  002560  D7DD               	goto	l6169
  9357                           
  9358                           ;Test.c: 126: }
  9359                           ;Test.c: 127: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9360  002562  0E01               	movlw	1
  9361  002564  EC0E  F020         	call	_lcdInst
  9362  002568  0E68               	movlw	104
  9363  00256A  0100               	movlb	0	; () banked
  9364  00256C  6FAB               	movwf	??_sensorTest& (0+255),b
  9365  00256E  0EE4               	movlw	228
  9366  002570                     u6927:
  9367  002570  2EE8               	decfsz	wreg,f,c
  9368  002572  D7FE               	bra	u6927
  9369  002574  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9370  002576  D7FC               	bra	u6927
  9371  002578  F000               	nop	
  9372  00257A  0E80               	movlw	128
  9373  00257C  EC0E  F020         	call	_lcdInst
  9374  002580                     l1032:
  9375  002580  B281               	btfsc	3969,1,c	;volatile
  9376  002582  D7FE               	goto	l1032
  9377                           
  9378                           ;Test.c: 135: printf("TST: MAGNETISM");
  9379  002584  0EA4               	movlw	low STR_81
  9380  002586  0100               	movlb	0	; () banked
  9381  002588  6F8E               	movwf	printf@f& (0+255),b
  9382  00258A  0EFE               	movlw	high STR_81
  9383  00258C  0100               	movlb	0	; () banked
  9384  00258E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9385  002590  EC97  F008         	call	_printf	;wreg free
  9386                           
  9387                           ;Test.c: 136: _delay((unsigned long)((100)*(32000000/4000.0)));
  9388  002594  0E05               	movlw	5
  9389  002596  0100               	movlb	0	; () banked
  9390  002598  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9391  00259A  0E0F               	movlw	15
  9392  00259C  0100               	movlb	0	; () banked
  9393  00259E  6FAB               	movwf	??_sensorTest& (0+255),b
  9394  0025A0  0EF1               	movlw	241
  9395  0025A2                     u6937:
  9396  0025A2  2EE8               	decfsz	wreg,f,c
  9397  0025A4  D7FE               	bra	u6937
  9398  0025A6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9399  0025A8  D7FC               	bra	u6937
  9400  0025AA  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9401  0025AC  D7FA               	bra	u6937
  9402                           
  9403                           ;Test.c: 137: while(PORTBbits.RB1 == 0){
  9404  0025AE  D021               	goto	l6193
  9405  0025B0                     l6187:
  9406                           
  9407                           ;Test.c: 138: readMAG();
  9408  0025B0  ECE4  F01C         	call	_readMAG	;wreg free
  9409                           
  9410                           ;Test.c: 139: lcdInst(0b10000000);;
  9411  0025B4  0E80               	movlw	128
  9412  0025B6  EC0E  F020         	call	_lcdInst
  9413                           
  9414                           ;Test.c: 140: lcdInst(0b11000000);;
  9415  0025BA  0EC0               	movlw	192
  9416  0025BC  EC0E  F020         	call	_lcdInst
  9417                           
  9418                           ;Test.c: 141: printf("MAG_signal: %d ", MAG_signal);
  9419  0025C0  0E47               	movlw	low STR_82
  9420  0025C2  0100               	movlb	0	; () banked
  9421  0025C4  6F8E               	movwf	printf@f& (0+255),b
  9422  0025C6  0EFE               	movlw	high STR_82
  9423  0025C8  0100               	movlb	0	; () banked
  9424  0025CA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9425  0025CC  C0DC  F090         	movff	_MAG_signal,?_printf+2
  9426  0025D0  C0DD  F091         	movff	_MAG_signal+1,?_printf+3
  9427  0025D4  EC97  F008         	call	_printf	;wreg free
  9428                           
  9429                           ;Test.c: 142: _delay((unsigned long)((100)*(32000000/4000.0)));
  9430  0025D8  0E05               	movlw	5
  9431  0025DA  0100               	movlb	0	; () banked
  9432  0025DC  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9433  0025DE  0E0F               	movlw	15
  9434  0025E0  0100               	movlb	0	; () banked
  9435  0025E2  6FAB               	movwf	??_sensorTest& (0+255),b
  9436  0025E4  0EF1               	movlw	241
  9437  0025E6                     u6947:
  9438  0025E6  2EE8               	decfsz	wreg,f,c
  9439  0025E8  D7FE               	bra	u6947
  9440  0025EA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9441  0025EC  D7FC               	bra	u6947
  9442  0025EE  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9443  0025F0  D7FA               	bra	u6947
  9444  0025F2                     l6193:
  9445  0025F2  B281               	btfsc	3969,1,c	;volatile
  9446  0025F4  0012               	return	
  9447  0025F6  D7DC               	goto	l6187
  9448  0025F8                     __end_of_sensorTest:
  9449                           	opt stack 0
  9450                           tblptru	equ	0xFF8
  9451                           tblptrh	equ	0xFF7
  9452                           tblptrl	equ	0xFF6
  9453                           tablat	equ	0xFF5
  9454                           prodh	equ	0xFF4
  9455                           prodl	equ	0xFF3
  9456                           intcon	equ	0xFF2
  9457                           intcon2	equ	0xFF1
  9458                           intcon3	equ	0xFF0
  9459                           postinc0	equ	0xFEE
  9460                           wreg	equ	0xFE8
  9461                           postdec1	equ	0xFE5
  9462                           fsr1l	equ	0xFE1
  9463                           indf2	equ	0xFDF
  9464                           postinc2	equ	0xFDE
  9465                           postdec2	equ	0xFDD
  9466                           fsr2h	equ	0xFDA
  9467                           fsr2l	equ	0xFD9
  9468                           status	equ	0xFD8
  9469                           
  9470 ;; *************** function _readMAG *****************
  9471 ;; Defined at:
  9472 ;;		line 29 in file "ADCFunctionality.c"
  9473 ;; Parameters:    Size  Location     Type
  9474 ;;		None
  9475 ;; Auto vars:     Size  Location     Type
  9476 ;;  res             2    4[BANK0 ] int 
  9477 ;; Return value:  Size  Location     Type
  9478 ;;                  1    wreg      void 
  9479 ;; Registers used:
  9480 ;;		wreg, status,2, status,0, cstack
  9481 ;; Tracked objects:
  9482 ;;		On entry : 0/0
  9483 ;;		On exit  : 0/0
  9484 ;;		Unchanged: 0/0
  9485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9487 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9488 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9489 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9490 ;;Total ram usage:        4 bytes
  9491 ;; Hardware stack levels used:    1
  9492 ;; Hardware stack levels required when called:    8
  9493 ;; This function calls:
  9494 ;;		_readADC
  9495 ;; This function is called by:
  9496 ;;		_ID
  9497 ;;		_sensorTest
  9498 ;; This function uses a non-reentrant model
  9499 ;;
  9500                           
  9501                           	psect	text36
  9502  0039C8                     __ptext36:
  9503                           	opt stack 0
  9504  0039C8                     _readMAG:
  9505                           	opt stack 20
  9506                           
  9507                           ;ADCFunctionality.c: 30: readADC(1);
  9508                           
  9509                           ;incstack = 0
  9510  0039C8  0E01               	movlw	1
  9511  0039CA  EC17  F01F         	call	_readADC
  9512                           
  9513                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
  9514  0039CE  50C3               	movf	4035,w,c	;volatile
  9515  0039D0  CFC4 F082          	movff	4036,??_readMAG	;volatile
  9516  0039D4  0100               	movlb	0	; () banked
  9517  0039D6  6B83               	clrf	(??_readMAG+1)& (0+255),b
  9518  0039D8  C082  F083         	movff	??_readMAG,??_readMAG+1
  9519  0039DC  0100               	movlb	0	; () banked
  9520  0039DE  6B82               	clrf	??_readMAG& (0+255),b
  9521  0039E0  0100               	movlb	0	; () banked
  9522  0039E2  1182               	iorwf	??_readMAG& (0+255),w,b
  9523  0039E4  0100               	movlb	0	; () banked
  9524  0039E6  6F84               	movwf	readMAG@res& (0+255),b
  9525  0039E8  0100               	movlb	0	; () banked
  9526  0039EA  5183               	movf	(??_readMAG+1)& (0+255),w,b
  9527  0039EC  0100               	movlb	0	; () banked
  9528  0039EE  6F85               	movwf	(readMAG@res+1)& (0+255),b
  9529                           
  9530                           ; BSR set to: 0
  9531                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
  9532  0039F0  0100               	movlb	0	; () banked
  9533  0039F2  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
  9534  0039F4  D008               	goto	u4171
  9535  0039F6  0100               	movlb	0	; () banked
  9536  0039F8  5185               	movf	(readMAG@res+1)& (0+255),w,b
  9537  0039FA  E107               	bnz	u4170
  9538  0039FC  0E96               	movlw	150
  9539  0039FE  0100               	movlb	0	; () banked
  9540  003A00  5D84               	subwf	readMAG@res& (0+255),w,b
  9541  003A02  B0D8               	btfsc	status,0,c
  9542  003A04  D002               	goto	u4170
  9543  003A06                     u4171:
  9544  003A06  0E01               	movlw	1
  9545  003A08  D001               	goto	u4180
  9546  003A0A                     u4170:
  9547  003A0A  0E00               	movlw	0
  9548  003A0C                     u4180:
  9549  003A0C  0100               	movlb	0	; () banked
  9550  003A0E  6FDC               	movwf	_MAG_signal& (0+255),b
  9551  003A10  6BDD               	clrf	(_MAG_signal+1)& (0+255),b
  9552                           
  9553                           ; BSR set to: 0
  9554  003A12  0012               	return		;funcret
  9555  003A14                     __end_of_readMAG:
  9556                           	opt stack 0
  9557                           tblptru	equ	0xFF8
  9558                           tblptrh	equ	0xFF7
  9559                           tblptrl	equ	0xFF6
  9560                           tablat	equ	0xFF5
  9561                           prodh	equ	0xFF4
  9562                           prodl	equ	0xFF3
  9563                           intcon	equ	0xFF2
  9564                           intcon2	equ	0xFF1
  9565                           intcon3	equ	0xFF0
  9566                           postinc0	equ	0xFEE
  9567                           wreg	equ	0xFE8
  9568                           postdec1	equ	0xFE5
  9569                           fsr1l	equ	0xFE1
  9570                           indf2	equ	0xFDF
  9571                           postinc2	equ	0xFDE
  9572                           postdec2	equ	0xFDD
  9573                           fsr2h	equ	0xFDA
  9574                           fsr2l	equ	0xFD9
  9575                           status	equ	0xFD8
  9576                           
  9577 ;; *************** function _readIR *****************
  9578 ;; Defined at:
  9579 ;;		line 23 in file "ADCFunctionality.c"
  9580 ;; Parameters:    Size  Location     Type
  9581 ;;		None
  9582 ;; Auto vars:     Size  Location     Type
  9583 ;;  res             2    4[BANK0 ] int 
  9584 ;; Return value:  Size  Location     Type
  9585 ;;                  1    wreg      void 
  9586 ;; Registers used:
  9587 ;;		wreg, status,2, status,0, cstack
  9588 ;; Tracked objects:
  9589 ;;		On entry : 0/0
  9590 ;;		On exit  : 0/0
  9591 ;;		Unchanged: 0/0
  9592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9594 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9595 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9596 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9597 ;;Total ram usage:        4 bytes
  9598 ;; Hardware stack levels used:    1
  9599 ;; Hardware stack levels required when called:    8
  9600 ;; This function calls:
  9601 ;;		_readADC
  9602 ;; This function is called by:
  9603 ;;		_getIR
  9604 ;;		_sensorTest
  9605 ;; This function uses a non-reentrant model
  9606 ;;
  9607                           
  9608                           	psect	text37
  9609  003A14                     __ptext37:
  9610                           	opt stack 0
  9611  003A14                     _readIR:
  9612                           	opt stack 19
  9613                           
  9614                           ;ADCFunctionality.c: 24: readADC(0);
  9615                           
  9616                           ; BSR set to: 0
  9617                           ;incstack = 0
  9618  003A14  0E00               	movlw	0
  9619  003A16  EC17  F01F         	call	_readADC
  9620                           
  9621                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  9622  003A1A  50C3               	movf	4035,w,c	;volatile
  9623  003A1C  CFC4 F082          	movff	4036,??_readIR	;volatile
  9624  003A20  0100               	movlb	0	; () banked
  9625  003A22  6B83               	clrf	(??_readIR+1)& (0+255),b
  9626  003A24  C082  F083         	movff	??_readIR,??_readIR+1
  9627  003A28  0100               	movlb	0	; () banked
  9628  003A2A  6B82               	clrf	??_readIR& (0+255),b
  9629  003A2C  0100               	movlb	0	; () banked
  9630  003A2E  1182               	iorwf	??_readIR& (0+255),w,b
  9631  003A30  0100               	movlb	0	; () banked
  9632  003A32  6F84               	movwf	readIR@res& (0+255),b
  9633  003A34  0100               	movlb	0	; () banked
  9634  003A36  5183               	movf	(??_readIR+1)& (0+255),w,b
  9635  003A38  0100               	movlb	0	; () banked
  9636  003A3A  6F85               	movwf	(readIR@res+1)& (0+255),b
  9637                           
  9638                           ; BSR set to: 0
  9639                           ;ADCFunctionality.c: 26: IR_signal = (res < 150) ? 1 : 0;
  9640  003A3C  0100               	movlb	0	; () banked
  9641  003A3E  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  9642  003A40  D008               	goto	u3501
  9643  003A42  0100               	movlb	0	; () banked
  9644  003A44  5185               	movf	(readIR@res+1)& (0+255),w,b
  9645  003A46  E107               	bnz	u3500
  9646  003A48  0E96               	movlw	150
  9647  003A4A  0100               	movlb	0	; () banked
  9648  003A4C  5D84               	subwf	readIR@res& (0+255),w,b
  9649  003A4E  B0D8               	btfsc	status,0,c
  9650  003A50  D002               	goto	u3500
  9651  003A52                     u3501:
  9652  003A52  0E01               	movlw	1
  9653  003A54  D001               	goto	u3510
  9654  003A56                     u3500:
  9655  003A56  0E00               	movlw	0
  9656  003A58                     u3510:
  9657  003A58  0100               	movlb	0	; () banked
  9658  003A5A  6FDA               	movwf	_IR_signal& (0+255),b
  9659  003A5C  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  9660                           
  9661                           ; BSR set to: 0
  9662  003A5E  0012               	return		;funcret
  9663  003A60                     __end_of_readIR:
  9664                           	opt stack 0
  9665                           tblptru	equ	0xFF8
  9666                           tblptrh	equ	0xFF7
  9667                           tblptrl	equ	0xFF6
  9668                           tablat	equ	0xFF5
  9669                           prodh	equ	0xFF4
  9670                           prodl	equ	0xFF3
  9671                           intcon	equ	0xFF2
  9672                           intcon2	equ	0xFF1
  9673                           intcon3	equ	0xFF0
  9674                           postinc0	equ	0xFEE
  9675                           wreg	equ	0xFE8
  9676                           postdec1	equ	0xFE5
  9677                           fsr1l	equ	0xFE1
  9678                           indf2	equ	0xFDF
  9679                           postinc2	equ	0xFDE
  9680                           postdec2	equ	0xFDD
  9681                           fsr2h	equ	0xFDA
  9682                           fsr2l	equ	0xFD9
  9683                           status	equ	0xFD8
  9684                           
  9685 ;; *************** function _readADC *****************
  9686 ;; Defined at:
  9687 ;;		line 15 in file "ADCFunctionality.c"
  9688 ;; Parameters:    Size  Location     Type
  9689 ;;  channel         1    wreg     unsigned char 
  9690 ;; Auto vars:     Size  Location     Type
  9691 ;;  channel         1    1[BANK0 ] unsigned char 
  9692 ;; Return value:  Size  Location     Type
  9693 ;;                  1    wreg      void 
  9694 ;; Registers used:
  9695 ;;		wreg, status,2, status,0, cstack
  9696 ;; Tracked objects:
  9697 ;;		On entry : 0/0
  9698 ;;		On exit  : 0/0
  9699 ;;		Unchanged: 0/0
  9700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9702 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9703 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9704 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9705 ;;Total ram usage:        2 bytes
  9706 ;; Hardware stack levels used:    1
  9707 ;; Hardware stack levels required when called:    7
  9708 ;; This function calls:
  9709 ;;		Nothing
  9710 ;; This function is called by:
  9711 ;;		_readIR
  9712 ;;		_readMAG
  9713 ;; This function uses a non-reentrant model
  9714 ;;
  9715                           
  9716                           	psect	text38
  9717  003E2E                     __ptext38:
  9718                           	opt stack 0
  9719  003E2E                     _readADC:
  9720                           	opt stack 19
  9721                           
  9722                           ; BSR set to: 0
  9723                           ;incstack = 0
  9724                           ;readADC@channel stored from wreg
  9725  003E2E  0100               	movlb	0	; () banked
  9726  003E30  6F81               	movwf	readADC@channel& (0+255),b
  9727                           
  9728                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
  9729  003E32  0100               	movlb	0	; () banked
  9730  003E34  4581               	rlncf	readADC@channel& (0+255),w,b
  9731  003E36  46E8               	rlncf	wreg,f,c
  9732  003E38  0BFC               	andlw	252
  9733  003E3A  6EC2               	movwf	4034,c	;volatile
  9734                           
  9735                           ; BSR set to: 0
  9736                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
  9737  003E3C  80C2               	bsf	4034,0,c	;volatile
  9738                           
  9739                           ; BSR set to: 0
  9740                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
  9741  003E3E  82C2               	bsf	4034,1,c	;volatile
  9742                           
  9743                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
  9744  003E40  D009               	goto	l4871
  9745  003E42                     l4869:
  9746  003E42  0E34               	movlw	52
  9747  003E44  0100               	movlb	0	; () banked
  9748  003E46  6F80               	movwf	??_readADC& (0+255),b
  9749  003E48  0EF1               	movlw	241
  9750  003E4A                     u6957:
  9751  003E4A  2EE8               	decfsz	wreg,f,c
  9752  003E4C  D7FE               	bra	u6957
  9753  003E4E  2F80               	decfsz	??_readADC& (0+255),f,b
  9754  003E50  D7FC               	bra	u6957
  9755  003E52  D000               	nop2	
  9756  003E54                     l4871:
  9757  003E54  A2C2               	btfss	4034,1,c	;volatile
  9758  003E56  0012               	return	
  9759  003E58  D7F4               	goto	l4869
  9760  003E5A                     __end_of_readADC:
  9761                           	opt stack 0
  9762                           tblptru	equ	0xFF8
  9763                           tblptrh	equ	0xFF7
  9764                           tblptrl	equ	0xFF6
  9765                           tablat	equ	0xFF5
  9766                           prodh	equ	0xFF4
  9767                           prodl	equ	0xFF3
  9768                           intcon	equ	0xFF2
  9769                           intcon2	equ	0xFF1
  9770                           intcon3	equ	0xFF0
  9771                           postinc0	equ	0xFEE
  9772                           wreg	equ	0xFE8
  9773                           postdec1	equ	0xFE5
  9774                           fsr1l	equ	0xFE1
  9775                           indf2	equ	0xFDF
  9776                           postinc2	equ	0xFDE
  9777                           postdec2	equ	0xFDD
  9778                           fsr2h	equ	0xFDA
  9779                           fsr2l	equ	0xFD9
  9780                           status	equ	0xFD8
  9781                           
  9782 ;; *************** function _algorithmTest *****************
  9783 ;; Defined at:
  9784 ;;		line 60 in file "Test.c"
  9785 ;; Parameters:    Size  Location     Type
  9786 ;;		None
  9787 ;; Auto vars:     Size  Location     Type
  9788 ;;		None
  9789 ;; Return value:  Size  Location     Type
  9790 ;;                  1    wreg      void 
  9791 ;; Registers used:
  9792 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9793 ;; Tracked objects:
  9794 ;;		On entry : 0/0
  9795 ;;		On exit  : 0/0
  9796 ;;		Unchanged: 0/0
  9797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9800 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9801 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9802 ;;Total ram usage:        2 bytes
  9803 ;; Hardware stack levels used:    1
  9804 ;; Hardware stack levels required when called:   10
  9805 ;; This function calls:
  9806 ;;		_lcdInst
  9807 ;;		_printf
  9808 ;; This function is called by:
  9809 ;;		_Test
  9810 ;; This function uses a non-reentrant model
  9811 ;;
  9812                           
  9813                           	psect	text39
  9814  002EB0                     __ptext39:
  9815                           	opt stack 0
  9816  002EB0                     _algorithmTest:
  9817                           	opt stack 19
  9818                           
  9819                           ;Test.c: 62: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9820                           
  9821                           ;incstack = 0
  9822  002EB0  0E01               	movlw	1
  9823  002EB2  EC0E  F020         	call	_lcdInst
  9824  002EB6  0E68               	movlw	104
  9825  002EB8  0100               	movlb	0	; () banked
  9826  002EBA  6FAB               	movwf	??_algorithmTest& (0+255),b
  9827  002EBC  0EE4               	movlw	228
  9828  002EBE                     u6967:
  9829  002EBE  2EE8               	decfsz	wreg,f,c
  9830  002EC0  D7FE               	bra	u6967
  9831  002EC2  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
  9832  002EC4  D7FC               	bra	u6967
  9833  002EC6  F000               	nop	
  9834  002EC8  0E80               	movlw	128
  9835  002ECA  EC0E  F020         	call	_lcdInst
  9836                           
  9837                           ;Test.c: 63: printf("ALGORITHM TEST");
  9838  002ECE  0EEF               	movlw	low STR_70
  9839  002ED0  0100               	movlb	0	; () banked
  9840  002ED2  6F8E               	movwf	printf@f& (0+255),b
  9841  002ED4  0EFE               	movlw	high STR_70
  9842  002ED6  0100               	movlb	0	; () banked
  9843  002ED8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9844  002EDA  EC97  F008         	call	_printf	;wreg free
  9845                           
  9846                           ;Test.c: 64: lcdInst(0b11000000);;
  9847  002EDE  0EC0               	movlw	192
  9848  002EE0  EC0E  F020         	call	_lcdInst
  9849                           
  9850                           ;Test.c: 65: printf("PUSH TO START");
  9851  002EE4  0E28               	movlw	low STR_71
  9852  002EE6  0100               	movlb	0	; () banked
  9853  002EE8  6F8E               	movwf	printf@f& (0+255),b
  9854  002EEA  0EFF               	movlw	high STR_71
  9855  002EEC  0100               	movlb	0	; () banked
  9856  002EEE  6F8F               	movwf	(printf@f+1)& (0+255),b
  9857  002EF0  EC97  F008         	call	_printf	;wreg free
  9858                           
  9859                           ;Test.c: 66: _delay((unsigned long)((100)*(32000000/4000.0)));
  9860  002EF4  0E05               	movlw	5
  9861  002EF6  0100               	movlb	0	; () banked
  9862  002EF8  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
  9863  002EFA  0E0F               	movlw	15
  9864  002EFC  0100               	movlb	0	; () banked
  9865  002EFE  6FAB               	movwf	??_algorithmTest& (0+255),b
  9866  002F00  0EF1               	movlw	241
  9867  002F02                     u6977:
  9868  002F02  2EE8               	decfsz	wreg,f,c
  9869  002F04  D7FE               	bra	u6977
  9870  002F06  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
  9871  002F08  D7FC               	bra	u6977
  9872  002F0A  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
  9873  002F0C  D7FA               	bra	u6977
  9874  002F0E                     l1014:
  9875  002F0E  A281               	btfss	3969,1,c	;volatile
  9876  002F10  D7FE               	goto	l1014
  9877  002F12                     l1017:
  9878  002F12  B281               	btfsc	3969,1,c	;volatile
  9879  002F14  D7FE               	goto	l1017
  9880                           
  9881                           ;Test.c: 69: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9882  002F16  0E01               	movlw	1
  9883  002F18  EC0E  F020         	call	_lcdInst
  9884  002F1C  0E68               	movlw	104
  9885  002F1E  0100               	movlb	0	; () banked
  9886  002F20  6FAB               	movwf	??_algorithmTest& (0+255),b
  9887  002F22  0EE4               	movlw	228
  9888  002F24                     u6987:
  9889  002F24  2EE8               	decfsz	wreg,f,c
  9890  002F26  D7FE               	bra	u6987
  9891  002F28  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
  9892  002F2A  D7FC               	bra	u6987
  9893  002F2C  F000               	nop	
  9894  002F2E  0E80               	movlw	128
  9895  002F30  EC0E  F020         	call	_lcdInst
  9896                           
  9897                           ;Test.c: 74: printf("ALG1: 9 POPNOTAB");
  9898  002F34  0EAF               	movlw	low STR_72
  9899  002F36  0100               	movlb	0	; () banked
  9900  002F38  6F8E               	movwf	printf@f& (0+255),b
  9901  002F3A  0EFC               	movlw	high STR_72
  9902  002F3C  0100               	movlb	0	; () banked
  9903  002F3E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9904  002F40  EC97  F008         	call	_printf	;wreg free
  9905                           
  9906                           ;Test.c: 81: printf("ALG2: 12 CANS");
  9907  002F44  0E0C               	movlw	low STR_73
  9908  002F46  0100               	movlb	0	; () banked
  9909  002F48  6F8E               	movwf	printf@f& (0+255),b
  9910  002F4A  0EFF               	movlw	high STR_73
  9911  002F4C  0100               	movlb	0	; () banked
  9912  002F4E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9913  002F50  EC97  F008         	call	_printf	;wreg free
  9914                           
  9915                           ;Test.c: 90: printf("ALG3: 1 CAN");
  9916  002F54  0E6C               	movlw	low STR_74
  9917  002F56  0100               	movlb	0	; () banked
  9918  002F58  6F8E               	movwf	printf@f& (0+255),b
  9919  002F5A  0EFF               	movlw	high STR_74
  9920  002F5C  0100               	movlb	0	; () banked
  9921  002F5E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9922  002F60  EC97  F008         	call	_printf	;wreg free
  9923                           
  9924                           ;Test.c: 96: printf("ALG4: ALL CANS");
  9925  002F64  0ED1               	movlw	low STR_75
  9926  002F66  0100               	movlb	0	; () banked
  9927  002F68  6F8E               	movwf	printf@f& (0+255),b
  9928  002F6A  0EFE               	movlw	high STR_75
  9929  002F6C  0100               	movlb	0	; () banked
  9930  002F6E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9931  002F70  EC97  F008         	call	_printf	;wreg free
  9932                           
  9933                           ;Test.c: 101: printf("ALG5: NO CANS");
  9934  002F74  0E1A               	movlw	low STR_76
  9935  002F76  0100               	movlb	0	; () banked
  9936  002F78  6F8E               	movwf	printf@f& (0+255),b
  9937  002F7A  0EFF               	movlw	high STR_76
  9938  002F7C  0100               	movlb	0	; () banked
  9939  002F7E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9940  002F80  EC97  F008         	call	_printf	;wreg free
  9941  002F84  0012               	return		;funcret
  9942  002F86                     __end_of_algorithmTest:
  9943                           	opt stack 0
  9944                           tblptru	equ	0xFF8
  9945                           tblptrh	equ	0xFF7
  9946                           tblptrl	equ	0xFF6
  9947                           tablat	equ	0xFF5
  9948                           prodh	equ	0xFF4
  9949                           prodl	equ	0xFF3
  9950                           intcon	equ	0xFF2
  9951                           intcon2	equ	0xFF1
  9952                           intcon3	equ	0xFF0
  9953                           postinc0	equ	0xFEE
  9954                           wreg	equ	0xFE8
  9955                           postdec1	equ	0xFE5
  9956                           fsr1l	equ	0xFE1
  9957                           indf2	equ	0xFDF
  9958                           postinc2	equ	0xFDE
  9959                           postdec2	equ	0xFDD
  9960                           fsr2h	equ	0xFDA
  9961                           fsr2l	equ	0xFD9
  9962                           status	equ	0xFD8
  9963                           
  9964 ;; *************** function _actuatorTest *****************
  9965 ;; Defined at:
  9966 ;;		line 146 in file "Test.c"
  9967 ;; Parameters:    Size  Location     Type
  9968 ;;		None
  9969 ;; Auto vars:     Size  Location     Type
  9970 ;;  i               1   45[BANK0 ] unsigned char 
  9971 ;;  i               1   67[BANK0 ] unsigned char 
  9972 ;;  i               1   66[BANK0 ] unsigned char 
  9973 ;;  i               1   65[BANK0 ] unsigned char 
  9974 ;;  i               1   64[BANK0 ] unsigned char 
  9975 ;;  i               1   63[BANK0 ] unsigned char 
  9976 ;;  i               1   62[BANK0 ] unsigned char 
  9977 ;;  i               1   61[BANK0 ] unsigned char 
  9978 ;;  i               1   60[BANK0 ] unsigned char 
  9979 ;;  i               1   59[BANK0 ] unsigned char 
  9980 ;;  i               1   58[BANK0 ] unsigned char 
  9981 ;;  i               1   57[BANK0 ] unsigned char 
  9982 ;;  i               1   56[BANK0 ] unsigned char 
  9983 ;;  i               1   55[BANK0 ] unsigned char 
  9984 ;;  i               1   54[BANK0 ] unsigned char 
  9985 ;;  i               1   53[BANK0 ] unsigned char 
  9986 ;;  i               1   52[BANK0 ] unsigned char 
  9987 ;;  i               1   51[BANK0 ] unsigned char 
  9988 ;;  i               1   50[BANK0 ] unsigned char 
  9989 ;;  i               1   49[BANK0 ] unsigned char 
  9990 ;;  i               1   48[BANK0 ] unsigned char 
  9991 ;;  i               1   47[BANK0 ] unsigned char 
  9992 ;;  i               1   46[BANK0 ] unsigned char 
  9993 ;; Return value:  Size  Location     Type
  9994 ;;                  1    wreg      void 
  9995 ;; Registers used:
  9996 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9997 ;; Tracked objects:
  9998 ;;		On entry : 0/0
  9999 ;;		On exit  : 0/0
 10000 ;;		Unchanged: 0/0
 10001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10003 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10004 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10005 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10006 ;;Total ram usage:       25 bytes
 10007 ;; Hardware stack levels used:    1
 10008 ;; Hardware stack levels required when called:   10
 10009 ;; This function calls:
 10010 ;;		_lcdInst
 10011 ;;		_printf
 10012 ;;		_updateServoPosition
 10013 ;; This function is called by:
 10014 ;;		_Test
 10015 ;; This function uses a non-reentrant model
 10016 ;;
 10017                           
 10018                           	psect	text40
 10019  0008B8                     __ptext40:
 10020                           	opt stack 0
 10021  0008B8                     _actuatorTest:
 10022                           	opt stack 19
 10023                           
 10024                           ;Test.c: 148: (INTCONbits.GIE = 1);
 10025                           
 10026                           ;incstack = 0
 10027  0008B8  8EF2               	bsf	intcon,7,c	;volatile
 10028                           
 10029                           ;Test.c: 149: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10030  0008BA  0E01               	movlw	1
 10031  0008BC  EC0E  F020         	call	_lcdInst
 10032  0008C0  0E68               	movlw	104
 10033  0008C2  0100               	movlb	0	; () banked
 10034  0008C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 10035  0008C6  0EE4               	movlw	228
 10036  0008C8                     u6997:
 10037  0008C8  2EE8               	decfsz	wreg,f,c
 10038  0008CA  D7FE               	bra	u6997
 10039  0008CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10040  0008CE  D7FC               	bra	u6997
 10041  0008D0  F000               	nop	
 10042  0008D2  0E80               	movlw	128
 10043  0008D4  EC0E  F020         	call	_lcdInst
 10044                           
 10045                           ;Test.c: 150: printf("ACTUATORS");
 10046  0008D8  0E99               	movlw	low STR_83
 10047  0008DA  0100               	movlb	0	; () banked
 10048  0008DC  6F8E               	movwf	printf@f& (0+255),b
 10049  0008DE  0EFF               	movlw	high STR_83
 10050  0008E0  0100               	movlb	0	; () banked
 10051  0008E2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10052  0008E4  EC97  F008         	call	_printf	;wreg free
 10053                           
 10054                           ;Test.c: 151: lcdInst(0b11000000);;
 10055  0008E8  0EC0               	movlw	192
 10056  0008EA  EC0E  F020         	call	_lcdInst
 10057                           
 10058                           ;Test.c: 152: printf("PUSH TO START");
 10059  0008EE  0E28               	movlw	low STR_71
 10060  0008F0  0100               	movlb	0	; () banked
 10061  0008F2  6F8E               	movwf	printf@f& (0+255),b
 10062  0008F4  0EFF               	movlw	high STR_71
 10063  0008F6  0100               	movlb	0	; () banked
 10064  0008F8  6F8F               	movwf	(printf@f+1)& (0+255),b
 10065  0008FA  EC97  F008         	call	_printf	;wreg free
 10066                           
 10067                           ;Test.c: 153: _delay((unsigned long)((100)*(32000000/4000.0)));
 10068  0008FE  0E05               	movlw	5
 10069  000900  0100               	movlb	0	; () banked
 10070  000902  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10071  000904  0E0F               	movlw	15
 10072  000906  0100               	movlb	0	; () banked
 10073  000908  6FAB               	movwf	??_actuatorTest& (0+255),b
 10074  00090A  0EF1               	movlw	241
 10075  00090C                     u7007:
 10076  00090C  2EE8               	decfsz	wreg,f,c
 10077  00090E  D7FE               	bra	u7007
 10078  000910  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10079  000912  D7FC               	bra	u7007
 10080  000914  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10081  000916  D7FA               	bra	u7007
 10082  000918                     l1041:
 10083  000918  A281               	btfss	3969,1,c	;volatile
 10084  00091A  D7FE               	goto	l1041
 10085  00091C                     l1044:
 10086  00091C  B281               	btfsc	3969,1,c	;volatile
 10087  00091E  D7FE               	goto	l1044
 10088                           
 10089                           ;Test.c: 156: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10090  000920  0E01               	movlw	1
 10091  000922  EC0E  F020         	call	_lcdInst
 10092  000926  0E68               	movlw	104
 10093  000928  0100               	movlb	0	; () banked
 10094  00092A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10095  00092C  0EE4               	movlw	228
 10096  00092E                     u7017:
 10097  00092E  2EE8               	decfsz	wreg,f,c
 10098  000930  D7FE               	bra	u7017
 10099  000932  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10100  000934  D7FC               	bra	u7017
 10101  000936  F000               	nop	
 10102  000938  0E80               	movlw	128
 10103  00093A  EC0E  F020         	call	_lcdInst
 10104                           
 10105                           ;Test.c: 161: printf("TST: DC MOTORS");
 10106  00093E  0EE0               	movlw	low STR_85
 10107  000940  0100               	movlb	0	; () banked
 10108  000942  6F8E               	movwf	printf@f& (0+255),b
 10109  000944  0EFE               	movlw	high STR_85
 10110  000946  0100               	movlb	0	; () banked
 10111  000948  6F8F               	movwf	(printf@f+1)& (0+255),b
 10112  00094A  EC97  F008         	call	_printf	;wreg free
 10113                           
 10114                           ;Test.c: 162: lcdInst(0b11000000);;
 10115  00094E  0EC0               	movlw	192
 10116  000950  EC0E  F020         	call	_lcdInst
 10117                           
 10118                           ;Test.c: 163: printf("PIN RA5 HIGH.");
 10119  000954  0EFE               	movlw	low STR_86
 10120  000956  0100               	movlb	0	; () banked
 10121  000958  6F8E               	movwf	printf@f& (0+255),b
 10122  00095A  0EFE               	movlw	high STR_86
 10123  00095C  0100               	movlb	0	; () banked
 10124  00095E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10125  000960  EC97  F008         	call	_printf	;wreg free
 10126                           
 10127                           ;Test.c: 164: LATAbits.LATA5 = 1;
 10128  000964  8A89               	bsf	3977,5,c	;volatile
 10129                           
 10130                           ;Test.c: 165: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 10131  000966  0E00               	movlw	0
 10132  000968  0100               	movlb	0	; () banked
 10133  00096A  6FE5               	movwf	(_i+1)& (0+255),b
 10134  00096C  0E00               	movlw	0
 10135  00096E  6FE4               	movwf	_i& (0+255),b
 10136                           
 10137                           ; BSR set to: 0
 10138  000970  0100               	movlb	0	; () banked
 10139  000972  BFE5               	btfsc	(_i+1)& (0+255),7,b
 10140  000974  D008               	goto	l6231
 10141  000976  0100               	movlb	0	; () banked
 10142  000978  51E5               	movf	(_i+1)& (0+255),w,b
 10143  00097A  E123               	bnz	l1048
 10144  00097C  0E05               	movlw	5
 10145  00097E  0100               	movlb	0	; () banked
 10146  000980  5DE4               	subwf	_i& (0+255),w,b
 10147  000982  B0D8               	btfsc	status,0,c
 10148  000984  D01E               	goto	l1048
 10149  000986                     l6231:
 10150                           
 10151                           ; BSR set to: 0
 10152  000986  0E00               	movlw	0
 10153  000988  0100               	movlb	0	; () banked
 10154  00098A  6FAD               	movwf	actuatorTest@i& (0+255),b
 10155  00098C                     l6233:
 10156                           
 10157                           ; BSR set to: 0
 10158  00098C  0E63               	movlw	99
 10159  00098E  0100               	movlb	0	; () banked
 10160  000990  65AD               	cpfsgt	actuatorTest@i& (0+255),b
 10161  000992  D001               	goto	l6237
 10162  000994  D00C               	goto	l6241
 10163  000996                     l6237:
 10164                           
 10165                           ; BSR set to: 0
 10166  000996  0E68               	movlw	104
 10167  000998  0100               	movlb	0	; () banked
 10168  00099A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10169  00099C  0EE4               	movlw	228
 10170  00099E                     u7027:
 10171  00099E  2EE8               	decfsz	wreg,f,c
 10172  0009A0  D7FE               	bra	u7027
 10173  0009A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10174  0009A4  D7FC               	bra	u7027
 10175  0009A6  F000               	nop	
 10176  0009A8  0100               	movlb	0	; () banked
 10177  0009AA  2BAD               	incf	actuatorTest@i& (0+255),f,b
 10178  0009AC  D7EF               	goto	l6233
 10179  0009AE                     l6241:
 10180                           
 10181                           ; BSR set to: 0
 10182  0009AE  0100               	movlb	0	; () banked
 10183  0009B0  4BE4               	infsnz	_i& (0+255),f,b
 10184  0009B2  2BE5               	incf	(_i+1)& (0+255),f,b
 10185                           
 10186                           ; BSR set to: 0
 10187  0009B4  0100               	movlb	0	; () banked
 10188  0009B6  BFE5               	btfsc	(_i+1)& (0+255),7,b
 10189  0009B8  D7E6               	goto	l6231
 10190  0009BA  0100               	movlb	0	; () banked
 10191  0009BC  51E5               	movf	(_i+1)& (0+255),w,b
 10192  0009BE  E101               	bnz	u4760
 10193  0009C0  D7DD               	goto	L6
 10194  0009C2                     u4760:
 10195  0009C2                     l1048:
 10196                           
 10197                           ; BSR set to: 0
 10198                           ;Test.c: 166: LATAbits.LATA5 = 0;
 10199  0009C2  9A89               	bcf	3977,5,c	;volatile
 10200                           
 10201                           ; BSR set to: 0
 10202                           ;Test.c: 167: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10203  0009C4  0E01               	movlw	1
 10204  0009C6  EC0E  F020         	call	_lcdInst
 10205  0009CA  0E68               	movlw	104
 10206  0009CC  0100               	movlb	0	; () banked
 10207  0009CE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10208  0009D0  0EE4               	movlw	228
 10209  0009D2                     u7037:
 10210  0009D2  2EE8               	decfsz	wreg,f,c
 10211  0009D4  D7FE               	bra	u7037
 10212  0009D6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10213  0009D8  D7FC               	bra	u7037
 10214  0009DA  F000               	nop	
 10215  0009DC  0E80               	movlw	128
 10216  0009DE  EC0E  F020         	call	_lcdInst
 10217                           
 10218                           ;Test.c: 173: printf("TST: COND SOLN'D");
 10219  0009E2  0ED1               	movlw	low STR_87
 10220  0009E4  0100               	movlb	0	; () banked
 10221  0009E6  6F8E               	movwf	printf@f& (0+255),b
 10222  0009E8  0EFC               	movlw	high STR_87
 10223  0009EA  0100               	movlb	0	; () banked
 10224  0009EC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10225  0009EE  EC97  F008         	call	_printf	;wreg free
 10226                           
 10227                           ;Test.c: 174: lcdInst(0b11000000);;
 10228  0009F2  0EC0               	movlw	192
 10229  0009F4  EC0E  F020         	call	_lcdInst
 10230                           
 10231                           ;Test.c: 175: printf("PIN RA3...");
 10232  0009F8  0E78               	movlw	low STR_88
 10233  0009FA  0100               	movlb	0	; () banked
 10234  0009FC  6F8E               	movwf	printf@f& (0+255),b
 10235  0009FE  0EFF               	movlw	high STR_88
 10236  000A00  0100               	movlb	0	; () banked
 10237  000A02  6F8F               	movwf	(printf@f+1)& (0+255),b
 10238  000A04  EC97  F008         	call	_printf	;wreg free
 10239                           
 10240                           ;Test.c: 176: for(i=0;i<5;i++){
 10241  000A08  0E00               	movlw	0
 10242  000A0A  0100               	movlb	0	; () banked
 10243  000A0C  6FE5               	movwf	(_i+1)& (0+255),b
 10244  000A0E  0E00               	movlw	0
 10245  000A10  6FE4               	movwf	_i& (0+255),b
 10246                           
 10247                           ; BSR set to: 0
 10248  000A12  0100               	movlb	0	; () banked
 10249  000A14  BFE5               	btfsc	(_i+1)& (0+255),7,b
 10250  000A16  D008               	goto	l1051
 10251  000A18  0100               	movlb	0	; () banked
 10252  000A1A  51E5               	movf	(_i+1)& (0+255),w,b
 10253  000A1C  E12C               	bnz	l1052
 10254  000A1E  0E05               	movlw	5
 10255  000A20  0100               	movlb	0	; () banked
 10256  000A22  5DE4               	subwf	_i& (0+255),w,b
 10257  000A24  B0D8               	btfsc	status,0,c
 10258  000A26  D027               	goto	l1052
 10259  000A28                     l1051:
 10260                           
 10261                           ; BSR set to: 0
 10262                           ;Test.c: 177: LATAbits.LATA3 = 1;
 10263  000A28  8689               	bsf	3977,3,c	;volatile
 10264                           
 10265                           ; BSR set to: 0
 10266                           ;Test.c: 178: _delay((unsigned long)((100)*(32000000/4000.0)));
 10267  000A2A  0E05               	movlw	5
 10268  000A2C  0100               	movlb	0	; () banked
 10269  000A2E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10270  000A30  0E0F               	movlw	15
 10271  000A32  0100               	movlb	0	; () banked
 10272  000A34  6FAB               	movwf	??_actuatorTest& (0+255),b
 10273  000A36  0EF1               	movlw	241
 10274  000A38                     u7047:
 10275  000A38  2EE8               	decfsz	wreg,f,c
 10276  000A3A  D7FE               	bra	u7047
 10277  000A3C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10278  000A3E  D7FC               	bra	u7047
 10279  000A40  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10280  000A42  D7FA               	bra	u7047
 10281                           
 10282                           ;Test.c: 179: LATAbits.LATA3 = ~1;
 10283  000A44  9689               	bcf	3977,3,c	;volatile
 10284                           
 10285                           ;Test.c: 180: _delay((unsigned long)((1000-100)*(32000000/4000.0)));
 10286  000A46  0E25               	movlw	37
 10287  000A48  0100               	movlb	0	; () banked
 10288  000A4A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10289  000A4C  0E87               	movlw	135
 10290  000A4E  0100               	movlb	0	; () banked
 10291  000A50  6FAB               	movwf	??_actuatorTest& (0+255),b
 10292  000A52  0E8B               	movlw	139
 10293  000A54                     u7057:
 10294  000A54  2EE8               	decfsz	wreg,f,c
 10295  000A56  D7FE               	bra	u7057
 10296  000A58  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10297  000A5A  D7FC               	bra	u7057
 10298  000A5C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10299  000A5E  D7FA               	bra	u7057
 10300  000A60  D000               	nop2	
 10301  000A62  0100               	movlb	0	; () banked
 10302  000A64  4BE4               	infsnz	_i& (0+255),f,b
 10303  000A66  2BE5               	incf	(_i+1)& (0+255),f,b
 10304  000A68  0100               	movlb	0	; () banked
 10305  000A6A  BFE5               	btfsc	(_i+1)& (0+255),7,b
 10306  000A6C  D7DD               	goto	l1051
 10307  000A6E  0100               	movlb	0	; () banked
 10308  000A70  51E5               	movf	(_i+1)& (0+255),w,b
 10309  000A72  E101               	bnz	u4780
 10310  000A74  D7D4               	goto	L7
 10311  000A76                     u4780:
 10312  000A76                     l1052:
 10313                           
 10314                           ; BSR set to: 0
 10315                           ;Test.c: 181: }
 10316                           ;Test.c: 182: LATAbits.LATA3 = ~1;
 10317  000A76  9689               	bcf	3977,3,c	;volatile
 10318                           
 10319                           ; BSR set to: 0
 10320                           ;Test.c: 183: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10321  000A78  0E01               	movlw	1
 10322  000A7A  EC0E  F020         	call	_lcdInst
 10323  000A7E  0E68               	movlw	104
 10324  000A80  0100               	movlb	0	; () banked
 10325  000A82  6FAB               	movwf	??_actuatorTest& (0+255),b
 10326  000A84  0EE4               	movlw	228
 10327  000A86                     u7067:
 10328  000A86  2EE8               	decfsz	wreg,f,c
 10329  000A88  D7FE               	bra	u7067
 10330  000A8A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10331  000A8C  D7FC               	bra	u7067
 10332  000A8E  F000               	nop	
 10333  000A90  0E80               	movlw	128
 10334  000A92  EC0E  F020         	call	_lcdInst
 10335                           
 10336                           ;Test.c: 189: printf("TST: PUSH SOLN'D");
 10337  000A96  0EE2               	movlw	low STR_89
 10338  000A98  0100               	movlb	0	; () banked
 10339  000A9A  6F8E               	movwf	printf@f& (0+255),b
 10340  000A9C  0EFC               	movlw	high STR_89
 10341  000A9E  0100               	movlb	0	; () banked
 10342  000AA0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10343  000AA2  EC97  F008         	call	_printf	;wreg free
 10344                           
 10345                           ;Test.c: 190: lcdInst(0b11000000);;
 10346  000AA6  0EC0               	movlw	192
 10347  000AA8  EC0E  F020         	call	_lcdInst
 10348                           
 10349                           ;Test.c: 191: printf("PIN RA4...");
 10350  000AAC  0E83               	movlw	low STR_90
 10351  000AAE  0100               	movlb	0	; () banked
 10352  000AB0  6F8E               	movwf	printf@f& (0+255),b
 10353  000AB2  0EFF               	movlw	high STR_90
 10354  000AB4  0100               	movlb	0	; () banked
 10355  000AB6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10356  000AB8  EC97  F008         	call	_printf	;wreg free
 10357                           
 10358                           ;Test.c: 192: for(i=0;i<5;i++){
 10359  000ABC  0E00               	movlw	0
 10360  000ABE  0100               	movlb	0	; () banked
 10361  000AC0  6FE5               	movwf	(_i+1)& (0+255),b
 10362  000AC2  0E00               	movlw	0
 10363  000AC4  6FE4               	movwf	_i& (0+255),b
 10364                           
 10365                           ; BSR set to: 0
 10366  000AC6  0100               	movlb	0	; () banked
 10367  000AC8  BFE5               	btfsc	(_i+1)& (0+255),7,b
 10368  000ACA  D008               	goto	l1053
 10369  000ACC  0100               	movlb	0	; () banked
 10370  000ACE  51E5               	movf	(_i+1)& (0+255),w,b
 10371  000AD0  E12C               	bnz	l1054
 10372  000AD2  0E05               	movlw	5
 10373  000AD4  0100               	movlb	0	; () banked
 10374  000AD6  5DE4               	subwf	_i& (0+255),w,b
 10375  000AD8  B0D8               	btfsc	status,0,c
 10376  000ADA  D027               	goto	l1054
 10377  000ADC                     l1053:
 10378                           
 10379                           ; BSR set to: 0
 10380                           ;Test.c: 193: LATAbits.LATA4 = 1;
 10381  000ADC  8889               	bsf	3977,4,c	;volatile
 10382                           
 10383                           ; BSR set to: 0
 10384                           ;Test.c: 194: _delay((unsigned long)((100)*(32000000/4000.0)));
 10385  000ADE  0E05               	movlw	5
 10386  000AE0  0100               	movlb	0	; () banked
 10387  000AE2  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10388  000AE4  0E0F               	movlw	15
 10389  000AE6  0100               	movlb	0	; () banked
 10390  000AE8  6FAB               	movwf	??_actuatorTest& (0+255),b
 10391  000AEA  0EF1               	movlw	241
 10392  000AEC                     u7077:
 10393  000AEC  2EE8               	decfsz	wreg,f,c
 10394  000AEE  D7FE               	bra	u7077
 10395  000AF0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10396  000AF2  D7FC               	bra	u7077
 10397  000AF4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10398  000AF6  D7FA               	bra	u7077
 10399                           
 10400                           ;Test.c: 195: LATAbits.LATA4 = ~1;
 10401  000AF8  9889               	bcf	3977,4,c	;volatile
 10402                           
 10403                           ;Test.c: 196: _delay((unsigned long)((1000-100)*(32000000/4000.0)));
 10404  000AFA  0E25               	movlw	37
 10405  000AFC  0100               	movlb	0	; () banked
 10406  000AFE  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10407  000B00  0E87               	movlw	135
 10408  000B02  0100               	movlb	0	; () banked
 10409  000B04  6FAB               	movwf	??_actuatorTest& (0+255),b
 10410  000B06  0E8B               	movlw	139
 10411  000B08                     u7087:
 10412  000B08  2EE8               	decfsz	wreg,f,c
 10413  000B0A  D7FE               	bra	u7087
 10414  000B0C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10415  000B0E  D7FC               	bra	u7087
 10416  000B10  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10417  000B12  D7FA               	bra	u7087
 10418  000B14  D000               	nop2	
 10419  000B16  0100               	movlb	0	; () banked
 10420  000B18  4BE4               	infsnz	_i& (0+255),f,b
 10421  000B1A  2BE5               	incf	(_i+1)& (0+255),f,b
 10422  000B1C  0100               	movlb	0	; () banked
 10423  000B1E  BFE5               	btfsc	(_i+1)& (0+255),7,b
 10424  000B20  D7DD               	goto	l1053
 10425  000B22  0100               	movlb	0	; () banked
 10426  000B24  51E5               	movf	(_i+1)& (0+255),w,b
 10427  000B26  E101               	bnz	u4800
 10428  000B28  D7D4               	goto	L8
 10429  000B2A                     u4800:
 10430  000B2A                     l1054:
 10431                           
 10432                           ; BSR set to: 0
 10433                           ;Test.c: 197: }
 10434                           ;Test.c: 198: LATAbits.LATA4 = ~1;
 10435  000B2A  9889               	bcf	3977,4,c	;volatile
 10436                           
 10437                           ; BSR set to: 0
 10438                           ;Test.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10439  000B2C  0E01               	movlw	1
 10440  000B2E  EC0E  F020         	call	_lcdInst
 10441  000B32  0E68               	movlw	104
 10442  000B34  0100               	movlb	0	; () banked
 10443  000B36  6FAB               	movwf	??_actuatorTest& (0+255),b
 10444  000B38  0EE4               	movlw	228
 10445  000B3A                     u7097:
 10446  000B3A  2EE8               	decfsz	wreg,f,c
 10447  000B3C  D7FE               	bra	u7097
 10448  000B3E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10449  000B40  D7FC               	bra	u7097
 10450  000B42  F000               	nop	
 10451  000B44  0E80               	movlw	128
 10452  000B46  EC0E  F020         	call	_lcdInst
 10453                           
 10454                           ;Test.c: 202: machine_state = Sorting_state;
 10455  000B4A  0E01               	movlw	1
 10456  000B4C  0100               	movlb	0	; () banked
 10457  000B4E  6FFC               	movwf	_machine_state& (0+255),b
 10458                           
 10459                           ; BSR set to: 0
 10460                           ;Test.c: 203: was_low_1 = 0;
 10461  000B50  0E00               	movlw	0
 10462  000B52  6E7A               	movwf	_was_low_1+1,c	;volatile
 10463  000B54  0E00               	movlw	0
 10464  000B56  6E79               	movwf	_was_low_1,c	;volatile
 10465                           
 10466                           ; BSR set to: 0
 10467                           ;Test.c: 204: was_low_1 = 0;
 10468  000B58  0E00               	movlw	0
 10469  000B5A  6E7A               	movwf	_was_low_1+1,c	;volatile
 10470  000B5C  0E00               	movlw	0
 10471  000B5E  6E79               	movwf	_was_low_1,c	;volatile
 10472                           
 10473                           ; BSR set to: 0
 10474                           ;Test.c: 211: printf("TST: PAN SERVO");
 10475  000B60  0EC2               	movlw	low STR_91
 10476  000B62  0100               	movlb	0	; () banked
 10477  000B64  6F8E               	movwf	printf@f& (0+255),b
 10478  000B66  0EFE               	movlw	high STR_91
 10479  000B68  0100               	movlb	0	; () banked
 10480  000B6A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10481  000B6C  EC97  F008         	call	_printf	;wreg free
 10482                           
 10483                           ;Test.c: 212: lcdInst(0b11000000);;
 10484  000B70  0EC0               	movlw	192
 10485  000B72  EC0E  F020         	call	_lcdInst
 10486                           
 10487                           ;Test.c: 213: printf("MIDDLE -- 2s    ");
 10488  000B76  0E7C               	movlw	low STR_92
 10489  000B78  0100               	movlb	0	; () banked
 10490  000B7A  6F8E               	movwf	printf@f& (0+255),b
 10491  000B7C  0EFC               	movlw	high STR_92
 10492  000B7E  0100               	movlb	0	; () banked
 10493  000B80  6F8F               	movwf	(printf@f+1)& (0+255),b
 10494  000B82  EC97  F008         	call	_printf	;wreg free
 10495                           
 10496                           ;Test.c: 214: updateServoPosition(1500, 1);
 10497  000B86  0E05               	movlw	5
 10498  000B88  0100               	movlb	0	; () banked
 10499  000B8A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10500  000B8C  0EDC               	movlw	220
 10501  000B8E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10502  000B90  0E00               	movlw	0
 10503  000B92  0100               	movlb	0	; () banked
 10504  000B94  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10505  000B96  0E01               	movlw	1
 10506  000B98  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10507  000B9A  EC7B  F01A         	call	_updateServoPosition	;wreg free
 10508                           
 10509                           ;Test.c: 215: TMR1ON = 1;
 10510  000B9E  80CD               	bsf	4045,0,c	;volatile
 10511                           
 10512                           ;Test.c: 216: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10513  000BA0  0E00               	movlw	0
 10514  000BA2  0100               	movlb	0	; () banked
 10515  000BA4  6FAE               	movwf	actuatorTest@i_1562& (0+255),b
 10516  000BA6                     l6317:
 10517                           
 10518                           ; BSR set to: 0
 10519  000BA6  0E63               	movlw	99
 10520  000BA8  0100               	movlb	0	; () banked
 10521  000BAA  65AE               	cpfsgt	actuatorTest@i_1562& (0+255),b
 10522  000BAC  D001               	goto	l6321
 10523  000BAE  D00C               	goto	l6325
 10524  000BB0                     l6321:
 10525                           
 10526                           ; BSR set to: 0
 10527  000BB0  0E68               	movlw	104
 10528  000BB2  0100               	movlb	0	; () banked
 10529  000BB4  6FAB               	movwf	??_actuatorTest& (0+255),b
 10530  000BB6  0EE4               	movlw	228
 10531  000BB8                     u7107:
 10532  000BB8  2EE8               	decfsz	wreg,f,c
 10533  000BBA  D7FE               	bra	u7107
 10534  000BBC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10535  000BBE  D7FC               	bra	u7107
 10536  000BC0  F000               	nop	
 10537  000BC2  0100               	movlb	0	; () banked
 10538  000BC4  2BAE               	incf	actuatorTest@i_1562& (0+255),f,b
 10539  000BC6  D7EF               	goto	l6317
 10540  000BC8                     l6325:
 10541                           
 10542                           ; BSR set to: 0
 10543  000BC8  0E00               	movlw	0
 10544  000BCA  0100               	movlb	0	; () banked
 10545  000BCC  6FAF               	movwf	actuatorTest@i_1563& (0+255),b
 10546  000BCE                     l6327:
 10547                           
 10548                           ; BSR set to: 0
 10549  000BCE  0E63               	movlw	99
 10550  000BD0  0100               	movlb	0	; () banked
 10551  000BD2  65AF               	cpfsgt	actuatorTest@i_1563& (0+255),b
 10552  000BD4  D001               	goto	l6331
 10553  000BD6  D00C               	goto	l6335
 10554  000BD8                     l6331:
 10555                           
 10556                           ; BSR set to: 0
 10557  000BD8  0E68               	movlw	104
 10558  000BDA  0100               	movlb	0	; () banked
 10559  000BDC  6FAB               	movwf	??_actuatorTest& (0+255),b
 10560  000BDE  0EE4               	movlw	228
 10561  000BE0                     u7117:
 10562  000BE0  2EE8               	decfsz	wreg,f,c
 10563  000BE2  D7FE               	bra	u7117
 10564  000BE4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10565  000BE6  D7FC               	bra	u7117
 10566  000BE8  F000               	nop	
 10567  000BEA  0100               	movlb	0	; () banked
 10568  000BEC  2BAF               	incf	actuatorTest@i_1563& (0+255),f,b
 10569  000BEE  D7EF               	goto	l6327
 10570  000BF0                     l6335:
 10571                           
 10572                           ; BSR set to: 0
 10573                           ;Test.c: 218: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10574  000BF0  0E80               	movlw	128
 10575  000BF2  EC0E  F020         	call	_lcdInst
 10576  000BF6  0EC0               	movlw	192
 10577  000BF8  EC0E  F020         	call	_lcdInst
 10578                           
 10579                           ;Test.c: 219: printf("RIGHT -- 2s     ");
 10580  000BFC  0E6B               	movlw	low STR_93
 10581  000BFE  0100               	movlb	0	; () banked
 10582  000C00  6F8E               	movwf	printf@f& (0+255),b
 10583  000C02  0EFC               	movlw	high STR_93
 10584  000C04  0100               	movlb	0	; () banked
 10585  000C06  6F8F               	movwf	(printf@f+1)& (0+255),b
 10586  000C08  EC97  F008         	call	_printf	;wreg free
 10587                           
 10588                           ;Test.c: 220: updateServoPosition(1000, 1);
 10589  000C0C  0E03               	movlw	3
 10590  000C0E  0100               	movlb	0	; () banked
 10591  000C10  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10592  000C12  0EE8               	movlw	232
 10593  000C14  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10594  000C16  0E00               	movlw	0
 10595  000C18  0100               	movlb	0	; () banked
 10596  000C1A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10597  000C1C  0E01               	movlw	1
 10598  000C1E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10599  000C20  EC7B  F01A         	call	_updateServoPosition	;wreg free
 10600                           
 10601                           ;Test.c: 221: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10602  000C24  0E00               	movlw	0
 10603  000C26  0100               	movlb	0	; () banked
 10604  000C28  6FB0               	movwf	actuatorTest@i_1565& (0+255),b
 10605  000C2A                     l6343:
 10606                           
 10607                           ; BSR set to: 0
 10608  000C2A  0E63               	movlw	99
 10609  000C2C  0100               	movlb	0	; () banked
 10610  000C2E  65B0               	cpfsgt	actuatorTest@i_1565& (0+255),b
 10611  000C30  D001               	goto	l6347
 10612  000C32  D00C               	goto	l6351
 10613  000C34                     l6347:
 10614                           
 10615                           ; BSR set to: 0
 10616  000C34  0E68               	movlw	104
 10617  000C36  0100               	movlb	0	; () banked
 10618  000C38  6FAB               	movwf	??_actuatorTest& (0+255),b
 10619  000C3A  0EE4               	movlw	228
 10620  000C3C                     u7127:
 10621  000C3C  2EE8               	decfsz	wreg,f,c
 10622  000C3E  D7FE               	bra	u7127
 10623  000C40  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10624  000C42  D7FC               	bra	u7127
 10625  000C44  F000               	nop	
 10626  000C46  0100               	movlb	0	; () banked
 10627  000C48  2BB0               	incf	actuatorTest@i_1565& (0+255),f,b
 10628  000C4A  D7EF               	goto	l6343
 10629  000C4C                     l6351:
 10630                           
 10631                           ; BSR set to: 0
 10632  000C4C  0E00               	movlw	0
 10633  000C4E  0100               	movlb	0	; () banked
 10634  000C50  6FB1               	movwf	actuatorTest@i_1566& (0+255),b
 10635  000C52                     l6353:
 10636                           
 10637                           ; BSR set to: 0
 10638  000C52  0E63               	movlw	99
 10639  000C54  0100               	movlb	0	; () banked
 10640  000C56  65B1               	cpfsgt	actuatorTest@i_1566& (0+255),b
 10641  000C58  D001               	goto	l6357
 10642  000C5A  D00C               	goto	l6361
 10643  000C5C                     l6357:
 10644                           
 10645                           ; BSR set to: 0
 10646  000C5C  0E68               	movlw	104
 10647  000C5E  0100               	movlb	0	; () banked
 10648  000C60  6FAB               	movwf	??_actuatorTest& (0+255),b
 10649  000C62  0EE4               	movlw	228
 10650  000C64                     u7137:
 10651  000C64  2EE8               	decfsz	wreg,f,c
 10652  000C66  D7FE               	bra	u7137
 10653  000C68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10654  000C6A  D7FC               	bra	u7137
 10655  000C6C  F000               	nop	
 10656  000C6E  0100               	movlb	0	; () banked
 10657  000C70  2BB1               	incf	actuatorTest@i_1566& (0+255),f,b
 10658  000C72  D7EF               	goto	l6353
 10659  000C74                     l6361:
 10660                           
 10661                           ; BSR set to: 0
 10662                           ;Test.c: 223: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10663  000C74  0E80               	movlw	128
 10664  000C76  EC0E  F020         	call	_lcdInst
 10665  000C7A  0EC0               	movlw	192
 10666  000C7C  EC0E  F020         	call	_lcdInst
 10667                           
 10668                           ;Test.c: 224: printf("LEFT -- 2s      ");
 10669  000C80  0E49               	movlw	low STR_94
 10670  000C82  0100               	movlb	0	; () banked
 10671  000C84  6F8E               	movwf	printf@f& (0+255),b
 10672  000C86  0EFC               	movlw	high STR_94
 10673  000C88  0100               	movlb	0	; () banked
 10674  000C8A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10675  000C8C  EC97  F008         	call	_printf	;wreg free
 10676                           
 10677                           ;Test.c: 225: updateServoPosition(2000, 1);
 10678  000C90  0E07               	movlw	7
 10679  000C92  0100               	movlb	0	; () banked
 10680  000C94  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10681  000C96  0ED0               	movlw	208
 10682  000C98  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10683  000C9A  0E00               	movlw	0
 10684  000C9C  0100               	movlb	0	; () banked
 10685  000C9E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10686  000CA0  0E01               	movlw	1
 10687  000CA2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10688  000CA4  EC7B  F01A         	call	_updateServoPosition	;wreg free
 10689                           
 10690                           ;Test.c: 226: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10691  000CA8  0E00               	movlw	0
 10692  000CAA  0100               	movlb	0	; () banked
 10693  000CAC  6FB2               	movwf	actuatorTest@i_1568& (0+255),b
 10694  000CAE                     l6369:
 10695                           
 10696                           ; BSR set to: 0
 10697  000CAE  0E63               	movlw	99
 10698  000CB0  0100               	movlb	0	; () banked
 10699  000CB2  65B2               	cpfsgt	actuatorTest@i_1568& (0+255),b
 10700  000CB4  D001               	goto	l6373
 10701  000CB6  D00C               	goto	l6377
 10702  000CB8                     l6373:
 10703                           
 10704                           ; BSR set to: 0
 10705  000CB8  0E68               	movlw	104
 10706  000CBA  0100               	movlb	0	; () banked
 10707  000CBC  6FAB               	movwf	??_actuatorTest& (0+255),b
 10708  000CBE  0EE4               	movlw	228
 10709  000CC0                     u7147:
 10710  000CC0  2EE8               	decfsz	wreg,f,c
 10711  000CC2  D7FE               	bra	u7147
 10712  000CC4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10713  000CC6  D7FC               	bra	u7147
 10714  000CC8  F000               	nop	
 10715  000CCA  0100               	movlb	0	; () banked
 10716  000CCC  2BB2               	incf	actuatorTest@i_1568& (0+255),f,b
 10717  000CCE  D7EF               	goto	l6369
 10718  000CD0                     l6377:
 10719                           
 10720                           ; BSR set to: 0
 10721  000CD0  0E00               	movlw	0
 10722  000CD2  0100               	movlb	0	; () banked
 10723  000CD4  6FB3               	movwf	actuatorTest@i_1569& (0+255),b
 10724  000CD6                     l6379:
 10725                           
 10726                           ; BSR set to: 0
 10727  000CD6  0E63               	movlw	99
 10728  000CD8  0100               	movlb	0	; () banked
 10729  000CDA  65B3               	cpfsgt	actuatorTest@i_1569& (0+255),b
 10730  000CDC  D001               	goto	l6383
 10731  000CDE  D00C               	goto	l6387
 10732  000CE0                     l6383:
 10733                           
 10734                           ; BSR set to: 0
 10735  000CE0  0E68               	movlw	104
 10736  000CE2  0100               	movlb	0	; () banked
 10737  000CE4  6FAB               	movwf	??_actuatorTest& (0+255),b
 10738  000CE6  0EE4               	movlw	228
 10739  000CE8                     u7157:
 10740  000CE8  2EE8               	decfsz	wreg,f,c
 10741  000CEA  D7FE               	bra	u7157
 10742  000CEC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10743  000CEE  D7FC               	bra	u7157
 10744  000CF0  F000               	nop	
 10745  000CF2  0100               	movlb	0	; () banked
 10746  000CF4  2BB3               	incf	actuatorTest@i_1569& (0+255),f,b
 10747  000CF6  D7EF               	goto	l6379
 10748  000CF8                     l6387:
 10749                           
 10750                           ; BSR set to: 0
 10751                           ;Test.c: 228: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10752  000CF8  0E80               	movlw	128
 10753  000CFA  EC0E  F020         	call	_lcdInst
 10754  000CFE  0EC0               	movlw	192
 10755  000D00  EC0E  F020         	call	_lcdInst
 10756                           
 10757                           ;Test.c: 229: printf("MID-LEFT -- 2s  ");
 10758  000D04  0E8D               	movlw	low STR_95
 10759  000D06  0100               	movlb	0	; () banked
 10760  000D08  6F8E               	movwf	printf@f& (0+255),b
 10761  000D0A  0EFC               	movlw	high STR_95
 10762  000D0C  0100               	movlb	0	; () banked
 10763  000D0E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10764  000D10  EC97  F008         	call	_printf	;wreg free
 10765                           
 10766                           ;Test.c: 230: updateServoPosition(1666, 1);
 10767  000D14  0E06               	movlw	6
 10768  000D16  0100               	movlb	0	; () banked
 10769  000D18  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10770  000D1A  0E82               	movlw	130
 10771  000D1C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10772  000D1E  0E00               	movlw	0
 10773  000D20  0100               	movlb	0	; () banked
 10774  000D22  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10775  000D24  0E01               	movlw	1
 10776  000D26  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10777  000D28  EC7B  F01A         	call	_updateServoPosition	;wreg free
 10778                           
 10779                           ;Test.c: 231: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10780  000D2C  0E00               	movlw	0
 10781  000D2E  0100               	movlb	0	; () banked
 10782  000D30  6FB4               	movwf	actuatorTest@i_1571& (0+255),b
 10783  000D32                     l6395:
 10784                           
 10785                           ; BSR set to: 0
 10786  000D32  0E63               	movlw	99
 10787  000D34  0100               	movlb	0	; () banked
 10788  000D36  65B4               	cpfsgt	actuatorTest@i_1571& (0+255),b
 10789  000D38  D001               	goto	l6399
 10790  000D3A  D00C               	goto	l6403
 10791  000D3C                     l6399:
 10792                           
 10793                           ; BSR set to: 0
 10794  000D3C  0E68               	movlw	104
 10795  000D3E  0100               	movlb	0	; () banked
 10796  000D40  6FAB               	movwf	??_actuatorTest& (0+255),b
 10797  000D42  0EE4               	movlw	228
 10798  000D44                     u7167:
 10799  000D44  2EE8               	decfsz	wreg,f,c
 10800  000D46  D7FE               	bra	u7167
 10801  000D48  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10802  000D4A  D7FC               	bra	u7167
 10803  000D4C  F000               	nop	
 10804  000D4E  0100               	movlb	0	; () banked
 10805  000D50  2BB4               	incf	actuatorTest@i_1571& (0+255),f,b
 10806  000D52  D7EF               	goto	l6395
 10807  000D54                     l6403:
 10808                           
 10809                           ; BSR set to: 0
 10810  000D54  0E00               	movlw	0
 10811  000D56  0100               	movlb	0	; () banked
 10812  000D58  6FB5               	movwf	actuatorTest@i_1572& (0+255),b
 10813  000D5A                     l6405:
 10814                           
 10815                           ; BSR set to: 0
 10816  000D5A  0E63               	movlw	99
 10817  000D5C  0100               	movlb	0	; () banked
 10818  000D5E  65B5               	cpfsgt	actuatorTest@i_1572& (0+255),b
 10819  000D60  D001               	goto	l6409
 10820  000D62  D00C               	goto	l6413
 10821  000D64                     l6409:
 10822                           
 10823                           ; BSR set to: 0
 10824  000D64  0E68               	movlw	104
 10825  000D66  0100               	movlb	0	; () banked
 10826  000D68  6FAB               	movwf	??_actuatorTest& (0+255),b
 10827  000D6A  0EE4               	movlw	228
 10828  000D6C                     u7177:
 10829  000D6C  2EE8               	decfsz	wreg,f,c
 10830  000D6E  D7FE               	bra	u7177
 10831  000D70  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10832  000D72  D7FC               	bra	u7177
 10833  000D74  F000               	nop	
 10834  000D76  0100               	movlb	0	; () banked
 10835  000D78  2BB5               	incf	actuatorTest@i_1572& (0+255),f,b
 10836  000D7A  D7EF               	goto	l6405
 10837  000D7C                     l6413:
 10838                           
 10839                           ; BSR set to: 0
 10840                           ;Test.c: 233: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10841  000D7C  0E80               	movlw	128
 10842  000D7E  EC0E  F020         	call	_lcdInst
 10843  000D82  0EC0               	movlw	192
 10844  000D84  EC0E  F020         	call	_lcdInst
 10845                           
 10846                           ;Test.c: 234: printf("MID-RIGHT -- 2s ");
 10847  000D88  0E9E               	movlw	low STR_96
 10848  000D8A  0100               	movlb	0	; () banked
 10849  000D8C  6F8E               	movwf	printf@f& (0+255),b
 10850  000D8E  0EFC               	movlw	high STR_96
 10851  000D90  0100               	movlb	0	; () banked
 10852  000D92  6F8F               	movwf	(printf@f+1)& (0+255),b
 10853  000D94  EC97  F008         	call	_printf	;wreg free
 10854                           
 10855                           ;Test.c: 235: updateServoPosition(1333, 1);
 10856  000D98  0E05               	movlw	5
 10857  000D9A  0100               	movlb	0	; () banked
 10858  000D9C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10859  000D9E  0E35               	movlw	53
 10860  000DA0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10861  000DA2  0E00               	movlw	0
 10862  000DA4  0100               	movlb	0	; () banked
 10863  000DA6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10864  000DA8  0E01               	movlw	1
 10865  000DAA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10866  000DAC  EC7B  F01A         	call	_updateServoPosition	;wreg free
 10867                           
 10868                           ;Test.c: 236: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10869  000DB0  0E00               	movlw	0
 10870  000DB2  0100               	movlb	0	; () banked
 10871  000DB4  6FB6               	movwf	actuatorTest@i_1574& (0+255),b
 10872  000DB6                     l6421:
 10873                           
 10874                           ; BSR set to: 0
 10875  000DB6  0E63               	movlw	99
 10876  000DB8  0100               	movlb	0	; () banked
 10877  000DBA  65B6               	cpfsgt	actuatorTest@i_1574& (0+255),b
 10878  000DBC  D001               	goto	l6425
 10879  000DBE  D00C               	goto	l6429
 10880  000DC0                     l6425:
 10881                           
 10882                           ; BSR set to: 0
 10883  000DC0  0E68               	movlw	104
 10884  000DC2  0100               	movlb	0	; () banked
 10885  000DC4  6FAB               	movwf	??_actuatorTest& (0+255),b
 10886  000DC6  0EE4               	movlw	228
 10887  000DC8                     u7187:
 10888  000DC8  2EE8               	decfsz	wreg,f,c
 10889  000DCA  D7FE               	bra	u7187
 10890  000DCC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10891  000DCE  D7FC               	bra	u7187
 10892  000DD0  F000               	nop	
 10893  000DD2  0100               	movlb	0	; () banked
 10894  000DD4  2BB6               	incf	actuatorTest@i_1574& (0+255),f,b
 10895  000DD6  D7EF               	goto	l6421
 10896  000DD8                     l6429:
 10897                           
 10898                           ; BSR set to: 0
 10899  000DD8  0E00               	movlw	0
 10900  000DDA  0100               	movlb	0	; () banked
 10901  000DDC  6FB7               	movwf	actuatorTest@i_1575& (0+255),b
 10902  000DDE                     l6431:
 10903                           
 10904                           ; BSR set to: 0
 10905  000DDE  0E63               	movlw	99
 10906  000DE0  0100               	movlb	0	; () banked
 10907  000DE2  65B7               	cpfsgt	actuatorTest@i_1575& (0+255),b
 10908  000DE4  D001               	goto	l6435
 10909  000DE6  D00C               	goto	l6439
 10910  000DE8                     l6435:
 10911                           
 10912                           ; BSR set to: 0
 10913  000DE8  0E68               	movlw	104
 10914  000DEA  0100               	movlb	0	; () banked
 10915  000DEC  6FAB               	movwf	??_actuatorTest& (0+255),b
 10916  000DEE  0EE4               	movlw	228
 10917  000DF0                     u7197:
 10918  000DF0  2EE8               	decfsz	wreg,f,c
 10919  000DF2  D7FE               	bra	u7197
 10920  000DF4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10921  000DF6  D7FC               	bra	u7197
 10922  000DF8  F000               	nop	
 10923  000DFA  0100               	movlb	0	; () banked
 10924  000DFC  2BB7               	incf	actuatorTest@i_1575& (0+255),f,b
 10925  000DFE  D7EF               	goto	l6431
 10926  000E00                     l6439:
 10927                           
 10928                           ; BSR set to: 0
 10929                           ;Test.c: 238: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10930  000E00  0E80               	movlw	128
 10931  000E02  EC0E  F020         	call	_lcdInst
 10932  000E06  0EC0               	movlw	192
 10933  000E08  EC0E  F020         	call	_lcdInst
 10934                           
 10935                           ;Test.c: 239: printf("MID -- 2s       ");
 10936  000E0C  0E27               	movlw	low STR_97
 10937  000E0E  0100               	movlb	0	; () banked
 10938  000E10  6F8E               	movwf	printf@f& (0+255),b
 10939  000E12  0EFC               	movlw	high STR_97
 10940  000E14  0100               	movlb	0	; () banked
 10941  000E16  6F8F               	movwf	(printf@f+1)& (0+255),b
 10942  000E18  EC97  F008         	call	_printf	;wreg free
 10943                           
 10944                           ;Test.c: 240: updateServoPosition(1500, 1);
 10945  000E1C  0E05               	movlw	5
 10946  000E1E  0100               	movlb	0	; () banked
 10947  000E20  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10948  000E22  0EDC               	movlw	220
 10949  000E24  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10950  000E26  0E00               	movlw	0
 10951  000E28  0100               	movlb	0	; () banked
 10952  000E2A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10953  000E2C  0E01               	movlw	1
 10954  000E2E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10955  000E30  EC7B  F01A         	call	_updateServoPosition	;wreg free
 10956                           
 10957                           ;Test.c: 241: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10958  000E34  0E00               	movlw	0
 10959  000E36  0100               	movlb	0	; () banked
 10960  000E38  6FB8               	movwf	actuatorTest@i_1577& (0+255),b
 10961  000E3A                     l6447:
 10962                           
 10963                           ; BSR set to: 0
 10964  000E3A  0E63               	movlw	99
 10965  000E3C  0100               	movlb	0	; () banked
 10966  000E3E  65B8               	cpfsgt	actuatorTest@i_1577& (0+255),b
 10967  000E40  D001               	goto	l6451
 10968  000E42  D00C               	goto	l6455
 10969  000E44                     l6451:
 10970                           
 10971                           ; BSR set to: 0
 10972  000E44  0E68               	movlw	104
 10973  000E46  0100               	movlb	0	; () banked
 10974  000E48  6FAB               	movwf	??_actuatorTest& (0+255),b
 10975  000E4A  0EE4               	movlw	228
 10976  000E4C                     u7207:
 10977  000E4C  2EE8               	decfsz	wreg,f,c
 10978  000E4E  D7FE               	bra	u7207
 10979  000E50  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10980  000E52  D7FC               	bra	u7207
 10981  000E54  F000               	nop	
 10982  000E56  0100               	movlb	0	; () banked
 10983  000E58  2BB8               	incf	actuatorTest@i_1577& (0+255),f,b
 10984  000E5A  D7EF               	goto	l6447
 10985  000E5C                     l6455:
 10986                           
 10987                           ; BSR set to: 0
 10988  000E5C  0E00               	movlw	0
 10989  000E5E  0100               	movlb	0	; () banked
 10990  000E60  6FB9               	movwf	actuatorTest@i_1578& (0+255),b
 10991  000E62                     l6457:
 10992                           
 10993                           ; BSR set to: 0
 10994  000E62  0E63               	movlw	99
 10995  000E64  0100               	movlb	0	; () banked
 10996  000E66  65B9               	cpfsgt	actuatorTest@i_1578& (0+255),b
 10997  000E68  D001               	goto	l6461
 10998  000E6A  D00C               	goto	l1078
 10999  000E6C                     l6461:
 11000                           
 11001                           ; BSR set to: 0
 11002  000E6C  0E68               	movlw	104
 11003  000E6E  0100               	movlb	0	; () banked
 11004  000E70  6FAB               	movwf	??_actuatorTest& (0+255),b
 11005  000E72  0EE4               	movlw	228
 11006  000E74                     u7217:
 11007  000E74  2EE8               	decfsz	wreg,f,c
 11008  000E76  D7FE               	bra	u7217
 11009  000E78  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11010  000E7A  D7FC               	bra	u7217
 11011  000E7C  F000               	nop	
 11012  000E7E  0100               	movlb	0	; () banked
 11013  000E80  2BB9               	incf	actuatorTest@i_1578& (0+255),f,b
 11014  000E82  D7EF               	goto	l6457
 11015  000E84                     l1078:
 11016                           
 11017                           ; BSR set to: 0
 11018                           ;Test.c: 242: TMR1ON = 0;
 11019  000E84  90CD               	bcf	4045,0,c	;volatile
 11020                           
 11021                           ; BSR set to: 0
 11022                           ;Test.c: 249: printf("TST: TILT SERVO");
 11023  000E86  0E57               	movlw	low STR_98
 11024  000E88  0100               	movlb	0	; () banked
 11025  000E8A  6F8E               	movwf	printf@f& (0+255),b
 11026  000E8C  0EFE               	movlw	high STR_98
 11027  000E8E  0100               	movlb	0	; () banked
 11028  000E90  6F8F               	movwf	(printf@f+1)& (0+255),b
 11029  000E92  EC97  F008         	call	_printf	;wreg free
 11030                           
 11031                           ;Test.c: 250: lcdInst(0b11000000);;
 11032  000E96  0EC0               	movlw	192
 11033  000E98  EC0E  F020         	call	_lcdInst
 11034                           
 11035                           ;Test.c: 251: printf("LEVEL -- 2s     ");
 11036  000E9C  0E5A               	movlw	low STR_99
 11037  000E9E  0100               	movlb	0	; () banked
 11038  000EA0  6F8E               	movwf	printf@f& (0+255),b
 11039  000EA2  0EFC               	movlw	high STR_99
 11040  000EA4  0100               	movlb	0	; () banked
 11041  000EA6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11042  000EA8  EC97  F008         	call	_printf	;wreg free
 11043                           
 11044                           ;Test.c: 252: updateServoPosition(1000, 3);
 11045  000EAC  0E03               	movlw	3
 11046  000EAE  0100               	movlb	0	; () banked
 11047  000EB0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11048  000EB2  0EE8               	movlw	232
 11049  000EB4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11050  000EB6  0E00               	movlw	0
 11051  000EB8  0100               	movlb	0	; () banked
 11052  000EBA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11053  000EBC  0E03               	movlw	3
 11054  000EBE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11055  000EC0  EC7B  F01A         	call	_updateServoPosition	;wreg free
 11056                           
 11057                           ;Test.c: 253: TMR3ON = 1;
 11058  000EC4  80B1               	bsf	4017,0,c	;volatile
 11059                           
 11060                           ;Test.c: 254: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11061  000EC6  0E00               	movlw	0
 11062  000EC8  0100               	movlb	0	; () banked
 11063  000ECA  6FBA               	movwf	actuatorTest@i_1581& (0+255),b
 11064  000ECC                     l6475:
 11065                           
 11066                           ; BSR set to: 0
 11067  000ECC  0E63               	movlw	99
 11068  000ECE  0100               	movlb	0	; () banked
 11069  000ED0  65BA               	cpfsgt	actuatorTest@i_1581& (0+255),b
 11070  000ED2  D001               	goto	l6479
 11071  000ED4  D00C               	goto	l6483
 11072  000ED6                     l6479:
 11073                           
 11074                           ; BSR set to: 0
 11075  000ED6  0E68               	movlw	104
 11076  000ED8  0100               	movlb	0	; () banked
 11077  000EDA  6FAB               	movwf	??_actuatorTest& (0+255),b
 11078  000EDC  0EE4               	movlw	228
 11079  000EDE                     u7227:
 11080  000EDE  2EE8               	decfsz	wreg,f,c
 11081  000EE0  D7FE               	bra	u7227
 11082  000EE2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11083  000EE4  D7FC               	bra	u7227
 11084  000EE6  F000               	nop	
 11085  000EE8  0100               	movlb	0	; () banked
 11086  000EEA  2BBA               	incf	actuatorTest@i_1581& (0+255),f,b
 11087  000EEC  D7EF               	goto	l6475
 11088  000EEE                     l6483:
 11089                           
 11090                           ; BSR set to: 0
 11091  000EEE  0E00               	movlw	0
 11092  000EF0  0100               	movlb	0	; () banked
 11093  000EF2  6FBB               	movwf	actuatorTest@i_1582& (0+255),b
 11094  000EF4                     l6485:
 11095                           
 11096                           ; BSR set to: 0
 11097  000EF4  0E63               	movlw	99
 11098  000EF6  0100               	movlb	0	; () banked
 11099  000EF8  65BB               	cpfsgt	actuatorTest@i_1582& (0+255),b
 11100  000EFA  D001               	goto	l6489
 11101  000EFC  D00C               	goto	l6493
 11102  000EFE                     l6489:
 11103                           
 11104                           ; BSR set to: 0
 11105  000EFE  0E68               	movlw	104
 11106  000F00  0100               	movlb	0	; () banked
 11107  000F02  6FAB               	movwf	??_actuatorTest& (0+255),b
 11108  000F04  0EE4               	movlw	228
 11109  000F06                     u7237:
 11110  000F06  2EE8               	decfsz	wreg,f,c
 11111  000F08  D7FE               	bra	u7237
 11112  000F0A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11113  000F0C  D7FC               	bra	u7237
 11114  000F0E  F000               	nop	
 11115  000F10  0100               	movlb	0	; () banked
 11116  000F12  2BBB               	incf	actuatorTest@i_1582& (0+255),f,b
 11117  000F14  D7EF               	goto	l6485
 11118  000F16                     l6493:
 11119                           
 11120                           ; BSR set to: 0
 11121                           ;Test.c: 256: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11122  000F16  0E80               	movlw	128
 11123  000F18  EC0E  F020         	call	_lcdInst
 11124  000F1C  0EC0               	movlw	192
 11125  000F1E  EC0E  F020         	call	_lcdInst
 11126                           
 11127                           ;Test.c: 257: printf("DROP -- 2s      ");
 11128  000F22  0E38               	movlw	low STR_100
 11129  000F24  0100               	movlb	0	; () banked
 11130  000F26  6F8E               	movwf	printf@f& (0+255),b
 11131  000F28  0EFC               	movlw	high STR_100
 11132  000F2A  0100               	movlb	0	; () banked
 11133  000F2C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11134  000F2E  EC97  F008         	call	_printf	;wreg free
 11135                           
 11136                           ;Test.c: 258: updateServoPosition(1500, 3);
 11137  000F32  0E05               	movlw	5
 11138  000F34  0100               	movlb	0	; () banked
 11139  000F36  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11140  000F38  0EDC               	movlw	220
 11141  000F3A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11142  000F3C  0E00               	movlw	0
 11143  000F3E  0100               	movlb	0	; () banked
 11144  000F40  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11145  000F42  0E03               	movlw	3
 11146  000F44  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11147  000F46  EC7B  F01A         	call	_updateServoPosition	;wreg free
 11148                           
 11149                           ;Test.c: 259: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11150  000F4A  0E00               	movlw	0
 11151  000F4C  0100               	movlb	0	; () banked
 11152  000F4E  6FBC               	movwf	actuatorTest@i_1584& (0+255),b
 11153  000F50                     l6501:
 11154                           
 11155                           ; BSR set to: 0
 11156  000F50  0E63               	movlw	99
 11157  000F52  0100               	movlb	0	; () banked
 11158  000F54  65BC               	cpfsgt	actuatorTest@i_1584& (0+255),b
 11159  000F56  D001               	goto	l6505
 11160  000F58  D00C               	goto	l6509
 11161  000F5A                     l6505:
 11162                           
 11163                           ; BSR set to: 0
 11164  000F5A  0E68               	movlw	104
 11165  000F5C  0100               	movlb	0	; () banked
 11166  000F5E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11167  000F60  0EE4               	movlw	228
 11168  000F62                     u7247:
 11169  000F62  2EE8               	decfsz	wreg,f,c
 11170  000F64  D7FE               	bra	u7247
 11171  000F66  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11172  000F68  D7FC               	bra	u7247
 11173  000F6A  F000               	nop	
 11174  000F6C  0100               	movlb	0	; () banked
 11175  000F6E  2BBC               	incf	actuatorTest@i_1584& (0+255),f,b
 11176  000F70  D7EF               	goto	l6501
 11177  000F72                     l6509:
 11178                           
 11179                           ; BSR set to: 0
 11180  000F72  0E00               	movlw	0
 11181  000F74  0100               	movlb	0	; () banked
 11182  000F76  6FBD               	movwf	actuatorTest@i_1585& (0+255),b
 11183  000F78                     l6511:
 11184                           
 11185                           ; BSR set to: 0
 11186  000F78  0E63               	movlw	99
 11187  000F7A  0100               	movlb	0	; () banked
 11188  000F7C  65BD               	cpfsgt	actuatorTest@i_1585& (0+255),b
 11189  000F7E  D001               	goto	l6515
 11190  000F80  D00C               	goto	l6519
 11191  000F82                     l6515:
 11192                           
 11193                           ; BSR set to: 0
 11194  000F82  0E68               	movlw	104
 11195  000F84  0100               	movlb	0	; () banked
 11196  000F86  6FAB               	movwf	??_actuatorTest& (0+255),b
 11197  000F88  0EE4               	movlw	228
 11198  000F8A                     u7257:
 11199  000F8A  2EE8               	decfsz	wreg,f,c
 11200  000F8C  D7FE               	bra	u7257
 11201  000F8E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11202  000F90  D7FC               	bra	u7257
 11203  000F92  F000               	nop	
 11204  000F94  0100               	movlb	0	; () banked
 11205  000F96  2BBD               	incf	actuatorTest@i_1585& (0+255),f,b
 11206  000F98  D7EF               	goto	l6511
 11207  000F9A                     l6519:
 11208                           
 11209                           ; BSR set to: 0
 11210                           ;Test.c: 261: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11211  000F9A  0E80               	movlw	128
 11212  000F9C  EC0E  F020         	call	_lcdInst
 11213  000FA0  0EC0               	movlw	192
 11214  000FA2  EC0E  F020         	call	_lcdInst
 11215                           
 11216                           ;Test.c: 262: printf("LEVEL -- 2s     ");
 11217  000FA6  0E5A               	movlw	low STR_99
 11218  000FA8  0100               	movlb	0	; () banked
 11219  000FAA  6F8E               	movwf	printf@f& (0+255),b
 11220  000FAC  0EFC               	movlw	high STR_99
 11221  000FAE  0100               	movlb	0	; () banked
 11222  000FB0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11223  000FB2  EC97  F008         	call	_printf	;wreg free
 11224                           
 11225                           ;Test.c: 263: updateServoPosition(1000, 3);
 11226  000FB6  0E03               	movlw	3
 11227  000FB8  0100               	movlb	0	; () banked
 11228  000FBA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11229  000FBC  0EE8               	movlw	232
 11230  000FBE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11231  000FC0  0E00               	movlw	0
 11232  000FC2  0100               	movlb	0	; () banked
 11233  000FC4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11234  000FC6  0E03               	movlw	3
 11235  000FC8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11236  000FCA  EC7B  F01A         	call	_updateServoPosition	;wreg free
 11237                           
 11238                           ;Test.c: 264: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11239  000FCE  0E00               	movlw	0
 11240  000FD0  0100               	movlb	0	; () banked
 11241  000FD2  6FBE               	movwf	actuatorTest@i_1587& (0+255),b
 11242  000FD4                     l6527:
 11243                           
 11244                           ; BSR set to: 0
 11245  000FD4  0E63               	movlw	99
 11246  000FD6  0100               	movlb	0	; () banked
 11247  000FD8  65BE               	cpfsgt	actuatorTest@i_1587& (0+255),b
 11248  000FDA  D001               	goto	l6531
 11249  000FDC  D00C               	goto	l6535
 11250  000FDE                     l6531:
 11251                           
 11252                           ; BSR set to: 0
 11253  000FDE  0E68               	movlw	104
 11254  000FE0  0100               	movlb	0	; () banked
 11255  000FE2  6FAB               	movwf	??_actuatorTest& (0+255),b
 11256  000FE4  0EE4               	movlw	228
 11257  000FE6                     u7267:
 11258  000FE6  2EE8               	decfsz	wreg,f,c
 11259  000FE8  D7FE               	bra	u7267
 11260  000FEA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11261  000FEC  D7FC               	bra	u7267
 11262  000FEE  F000               	nop	
 11263  000FF0  0100               	movlb	0	; () banked
 11264  000FF2  2BBE               	incf	actuatorTest@i_1587& (0+255),f,b
 11265  000FF4  D7EF               	goto	l6527
 11266  000FF6                     l6535:
 11267                           
 11268                           ; BSR set to: 0
 11269  000FF6  0E00               	movlw	0
 11270  000FF8  0100               	movlb	0	; () banked
 11271  000FFA  6FBF               	movwf	actuatorTest@i_1588& (0+255),b
 11272  000FFC                     l6537:
 11273                           
 11274                           ; BSR set to: 0
 11275  000FFC  0E63               	movlw	99
 11276  000FFE  0100               	movlb	0	; () banked
 11277  001000  65BF               	cpfsgt	actuatorTest@i_1588& (0+255),b
 11278  001002  D001               	goto	l6541
 11279  001004  D00C               	goto	l1090
 11280  001006                     l6541:
 11281                           
 11282                           ; BSR set to: 0
 11283  001006  0E68               	movlw	104
 11284  001008  0100               	movlb	0	; () banked
 11285  00100A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11286  00100C  0EE4               	movlw	228
 11287  00100E                     u7277:
 11288  00100E  2EE8               	decfsz	wreg,f,c
 11289  001010  D7FE               	bra	u7277
 11290  001012  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11291  001014  D7FC               	bra	u7277
 11292  001016  F000               	nop	
 11293  001018  0100               	movlb	0	; () banked
 11294  00101A  2BBF               	incf	actuatorTest@i_1588& (0+255),f,b
 11295  00101C  D7EF               	goto	l6537
 11296  00101E                     l1090:
 11297                           
 11298                           ; BSR set to: 0
 11299                           ;Test.c: 266: TMR3ON = 0;
 11300  00101E  90B1               	bcf	4017,0,c	;volatile
 11301                           
 11302                           ;Test.c: 267: (INTCONbits.GIE = 0);
 11303  001020  9EF2               	bcf	intcon,7,c	;volatile
 11304                           
 11305                           ; BSR set to: 0
 11306                           ;Test.c: 272: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11307  001022  0E01               	movlw	1
 11308  001024  EC0E  F020         	call	_lcdInst
 11309  001028  0E68               	movlw	104
 11310  00102A  0100               	movlb	0	; () banked
 11311  00102C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11312  00102E  0EE4               	movlw	228
 11313  001030                     u7287:
 11314  001030  2EE8               	decfsz	wreg,f,c
 11315  001032  D7FE               	bra	u7287
 11316  001034  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11317  001036  D7FC               	bra	u7287
 11318  001038  F000               	nop	
 11319  00103A  0E80               	movlw	128
 11320  00103C  EC0E  F020         	call	_lcdInst
 11321                           
 11322                           ;Test.c: 273: printf("TST: CAM SERVO");
 11323  001040  0EB3               	movlw	low STR_102
 11324  001042  0100               	movlb	0	; () banked
 11325  001044  6F8E               	movwf	printf@f& (0+255),b
 11326  001046  0EFE               	movlw	high STR_102
 11327  001048  0100               	movlb	0	; () banked
 11328  00104A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11329  00104C  EC97  F008         	call	_printf	;wreg free
 11330                           
 11331                           ;Test.c: 274: lcdInst(0b11000000);;
 11332  001050  0EC0               	movlw	192
 11333  001052  EC0E  F020         	call	_lcdInst
 11334                           
 11335                           ;Test.c: 275: printf("CAM UP  |RC0=1");
 11336  001056  0E95               	movlw	low STR_103
 11337  001058  0100               	movlb	0	; () banked
 11338  00105A  6F8E               	movwf	printf@f& (0+255),b
 11339  00105C  0EFE               	movlw	high STR_103
 11340  00105E  0100               	movlb	0	; () banked
 11341  001060  6F8F               	movwf	(printf@f+1)& (0+255),b
 11342  001062  EC97  F008         	call	_printf	;wreg free
 11343                           
 11344                           ;Test.c: 276: LATCbits.LATC0 = 0;
 11345  001066  908B               	bcf	3979,0,c	;volatile
 11346                           
 11347                           ;Test.c: 277: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11348  001068  0E00               	movlw	0
 11349  00106A  0100               	movlb	0	; () banked
 11350  00106C  6FC0               	movwf	actuatorTest@i_1591& (0+255),b
 11351  00106E                     l6561:
 11352                           
 11353                           ; BSR set to: 0
 11354  00106E  0E63               	movlw	99
 11355  001070  0100               	movlb	0	; () banked
 11356  001072  65C0               	cpfsgt	actuatorTest@i_1591& (0+255),b
 11357  001074  D001               	goto	l6565
 11358  001076  D00C               	goto	l6569
 11359  001078                     l6565:
 11360                           
 11361                           ; BSR set to: 0
 11362  001078  0E68               	movlw	104
 11363  00107A  0100               	movlb	0	; () banked
 11364  00107C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11365  00107E  0EE4               	movlw	228
 11366  001080                     u7297:
 11367  001080  2EE8               	decfsz	wreg,f,c
 11368  001082  D7FE               	bra	u7297
 11369  001084  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11370  001086  D7FC               	bra	u7297
 11371  001088  F000               	nop	
 11372  00108A  0100               	movlb	0	; () banked
 11373  00108C  2BC0               	incf	actuatorTest@i_1591& (0+255),f,b
 11374  00108E  D7EF               	goto	l6561
 11375  001090                     l6569:
 11376                           
 11377                           ; BSR set to: 0
 11378  001090  0E00               	movlw	0
 11379  001092  0100               	movlb	0	; () banked
 11380  001094  6FC1               	movwf	actuatorTest@i_1592& (0+255),b
 11381  001096                     l6571:
 11382                           
 11383                           ; BSR set to: 0
 11384  001096  0E63               	movlw	99
 11385  001098  0100               	movlb	0	; () banked
 11386  00109A  65C1               	cpfsgt	actuatorTest@i_1592& (0+255),b
 11387  00109C  D001               	goto	l6575
 11388  00109E  D00C               	goto	l6579
 11389  0010A0                     l6575:
 11390                           
 11391                           ; BSR set to: 0
 11392  0010A0  0E68               	movlw	104
 11393  0010A2  0100               	movlb	0	; () banked
 11394  0010A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11395  0010A6  0EE4               	movlw	228
 11396  0010A8                     u7307:
 11397  0010A8  2EE8               	decfsz	wreg,f,c
 11398  0010AA  D7FE               	bra	u7307
 11399  0010AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11400  0010AE  D7FC               	bra	u7307
 11401  0010B0  F000               	nop	
 11402  0010B2  0100               	movlb	0	; () banked
 11403  0010B4  2BC1               	incf	actuatorTest@i_1592& (0+255),f,b
 11404  0010B6  D7EF               	goto	l6571
 11405  0010B8                     l6579:
 11406                           
 11407                           ; BSR set to: 0
 11408                           ;Test.c: 278: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11409  0010B8  0E80               	movlw	128
 11410  0010BA  EC0E  F020         	call	_lcdInst
 11411  0010BE  0EC0               	movlw	192
 11412  0010C0  EC0E  F020         	call	_lcdInst
 11413                           
 11414                           ;Test.c: 279: LATCbits.LATC0 = 1;
 11415  0010C4  808B               	bsf	3979,0,c	;volatile
 11416                           
 11417                           ;Test.c: 280: printf("CAM DWN |RC0=0");
 11418  0010C6  0E86               	movlw	low STR_104
 11419  0010C8  0100               	movlb	0	; () banked
 11420  0010CA  6F8E               	movwf	printf@f& (0+255),b
 11421  0010CC  0EFE               	movlw	high STR_104
 11422  0010CE  0100               	movlb	0	; () banked
 11423  0010D0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11424  0010D2  EC97  F008         	call	_printf	;wreg free
 11425                           
 11426                           ;Test.c: 281: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11427  0010D6  0E00               	movlw	0
 11428  0010D8  0100               	movlb	0	; () banked
 11429  0010DA  6FC2               	movwf	actuatorTest@i_1594& (0+255),b
 11430  0010DC                     l6587:
 11431                           
 11432                           ; BSR set to: 0
 11433  0010DC  0E63               	movlw	99
 11434  0010DE  0100               	movlb	0	; () banked
 11435  0010E0  65C2               	cpfsgt	actuatorTest@i_1594& (0+255),b
 11436  0010E2  D001               	goto	l6591
 11437  0010E4  D00C               	goto	l6595
 11438  0010E6                     l6591:
 11439                           
 11440                           ; BSR set to: 0
 11441  0010E6  0E68               	movlw	104
 11442  0010E8  0100               	movlb	0	; () banked
 11443  0010EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 11444  0010EC  0EE4               	movlw	228
 11445  0010EE                     u7317:
 11446  0010EE  2EE8               	decfsz	wreg,f,c
 11447  0010F0  D7FE               	bra	u7317
 11448  0010F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11449  0010F4  D7FC               	bra	u7317
 11450  0010F6  F000               	nop	
 11451  0010F8  0100               	movlb	0	; () banked
 11452  0010FA  2BC2               	incf	actuatorTest@i_1594& (0+255),f,b
 11453  0010FC  D7EF               	goto	l6587
 11454  0010FE                     l6595:
 11455                           
 11456                           ; BSR set to: 0
 11457  0010FE  0E00               	movlw	0
 11458  001100  0100               	movlb	0	; () banked
 11459  001102  6FC3               	movwf	actuatorTest@i_1595& (0+255),b
 11460  001104                     l6597:
 11461                           
 11462                           ; BSR set to: 0
 11463  001104  0E63               	movlw	99
 11464  001106  0100               	movlb	0	; () banked
 11465  001108  65C3               	cpfsgt	actuatorTest@i_1595& (0+255),b
 11466  00110A  D001               	goto	l6601
 11467  00110C  D00C               	goto	l6605
 11468  00110E                     l6601:
 11469                           
 11470                           ; BSR set to: 0
 11471  00110E  0E68               	movlw	104
 11472  001110  0100               	movlb	0	; () banked
 11473  001112  6FAB               	movwf	??_actuatorTest& (0+255),b
 11474  001114  0EE4               	movlw	228
 11475  001116                     u7327:
 11476  001116  2EE8               	decfsz	wreg,f,c
 11477  001118  D7FE               	bra	u7327
 11478  00111A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11479  00111C  D7FC               	bra	u7327
 11480  00111E  F000               	nop	
 11481  001120  0100               	movlb	0	; () banked
 11482  001122  2BC3               	incf	actuatorTest@i_1595& (0+255),f,b
 11483  001124  D7EF               	goto	l6597
 11484  001126                     l6605:
 11485                           
 11486                           ; BSR set to: 0
 11487                           ;Test.c: 282: machine_state = Testing_state;
 11488  001126  0E03               	movlw	3
 11489  001128  0100               	movlb	0	; () banked
 11490  00112A  6FFC               	movwf	_machine_state& (0+255),b
 11491                           
 11492                           ; BSR set to: 0
 11493  00112C  0012               	return		;funcret
 11494  00112E                     __end_of_actuatorTest:
 11495                           	opt stack 0
 11496                           tblptru	equ	0xFF8
 11497                           tblptrh	equ	0xFF7
 11498                           tblptrl	equ	0xFF6
 11499                           tablat	equ	0xFF5
 11500                           prodh	equ	0xFF4
 11501                           prodl	equ	0xFF3
 11502                           intcon	equ	0xFF2
 11503                           intcon2	equ	0xFF1
 11504                           intcon3	equ	0xFF0
 11505                           postinc0	equ	0xFEE
 11506                           wreg	equ	0xFE8
 11507                           postdec1	equ	0xFE5
 11508                           fsr1l	equ	0xFE1
 11509                           indf2	equ	0xFDF
 11510                           postinc2	equ	0xFDE
 11511                           postdec2	equ	0xFDD
 11512                           fsr2h	equ	0xFDA
 11513                           fsr2l	equ	0xFD9
 11514                           status	equ	0xFD8
 11515                           
 11516 ;; *************** function _updateServoPosition *****************
 11517 ;; Defined at:
 11518 ;;		line 295 in file "sort.c"
 11519 ;; Parameters:    Size  Location     Type
 11520 ;;  time_us         2    0[BANK0 ] int 
 11521 ;;  timer           2    2[BANK0 ] int 
 11522 ;; Auto vars:     Size  Location     Type
 11523 ;;  my_time         2    6[BANK0 ] unsigned int 
 11524 ;; Return value:  Size  Location     Type
 11525 ;;                  1    wreg      void 
 11526 ;; Registers used:
 11527 ;;		wreg, status,2, status,0
 11528 ;; Tracked objects:
 11529 ;;		On entry : 0/0
 11530 ;;		On exit  : 0/0
 11531 ;;		Unchanged: 0/0
 11532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11533 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11534 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11535 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11536 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11537 ;;Total ram usage:        8 bytes
 11538 ;; Hardware stack levels used:    1
 11539 ;; Hardware stack levels required when called:    7
 11540 ;; This function calls:
 11541 ;;		Nothing
 11542 ;; This function is called by:
 11543 ;;		_Distribution
 11544 ;;		_initServos
 11545 ;;		_actuatorTest
 11546 ;; This function uses a non-reentrant model
 11547 ;;
 11548                           
 11549                           	psect	text41
 11550  0034F6                     __ptext41:
 11551                           	opt stack 0
 11552  0034F6                     _updateServoPosition:
 11553                           	opt stack 20
 11554                           
 11555                           ;sort.c: 296: unsigned int my_time = 65535 - time_us;
 11556                           
 11557                           ; BSR set to: 0
 11558                           ;incstack = 0
 11559  0034F6  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 11560  0034FA  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 11561  0034FE  0100               	movlb	0	; () banked
 11562  003500  1F84               	comf	??_updateServoPosition& (0+255),f,b
 11563  003502  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 11564  003504  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 11565  003506  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 11566  003508  0EFF               	movlw	255
 11567  00350A  0100               	movlb	0	; () banked
 11568  00350C  2584               	addwf	??_updateServoPosition& (0+255),w,b
 11569  00350E  0100               	movlb	0	; () banked
 11570  003510  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 11571  003512  0EFF               	movlw	255
 11572  003514  0100               	movlb	0	; () banked
 11573  003516  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 11574  003518  0100               	movlb	0	; () banked
 11575  00351A  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 11576                           
 11577                           ;sort.c: 297: switch(timer){
 11578  00351C  D015               	goto	l5229
 11579  00351E                     l5227:
 11580                           
 11581                           ; BSR set to: 0
 11582                           ;sort.c: 299: servoTimes[0] = my_time >> 8;
 11583  00351E  0100               	movlb	0	; () banked
 11584  003520  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 11585  003522  0101               	movlb	1	; () banked
 11586  003524  6F1C               	movwf	_servoTimes& (0+255),b
 11587  003526  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 11588                           
 11589                           ;sort.c: 300: servoTimes[1] = my_time & 0xFF;
 11590  003528  0100               	movlb	0	; () banked
 11591  00352A  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 11592  00352C  0101               	movlb	1	; () banked
 11593  00352E  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 11594  003530  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 11595  003532                     l772:
 11596                           
 11597                           ;sort.c: 302: servoTimes[2] = my_time >> 8;
 11598  003532  0100               	movlb	0	; () banked
 11599  003534  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 11600  003536  0101               	movlb	1	; () banked
 11601  003538  6F20               	movwf	(_servoTimes+4)& (0+255),b
 11602  00353A  6B21               	clrf	(_servoTimes+5)& (0+255),b
 11603                           
 11604                           ;sort.c: 303: servoTimes[3] = my_time & 0xFF;
 11605  00353C  0100               	movlb	0	; () banked
 11606  00353E  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 11607  003540  0101               	movlb	1	; () banked
 11608  003542  6F22               	movwf	(_servoTimes+6)& (0+255),b
 11609  003544  6B23               	clrf	(_servoTimes+7)& (0+255),b
 11610                           
 11611                           ;sort.c: 304: }
 11612  003546  0012               	return	
 11613  003548                     l5229:
 11614  003548  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 11615  00354C  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 11616                           
 11617                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11618                           ; Switch size 1, requested type "space"
 11619                           ; Number of cases is 1, Range of values is 0 to 0
 11620                           ; switch strategies available:
 11621                           ; Name         Instructions Cycles
 11622                           ; simple_byte            4     3 (average)
 11623                           ;	Chosen strategy is simple_byte
 11624  003550  0100               	movlb	0	; () banked
 11625  003552  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 11626  003554  0A00               	xorlw	0	; case 0
 11627  003556  A4D8               	btfss	status,2,c
 11628  003558  0012               	return	
 11629                           
 11630                           ; BSR set to: 0
 11631                           ; Switch size 1, requested type "space"
 11632                           ; Number of cases is 2, Range of values is 1 to 3
 11633                           ; switch strategies available:
 11634                           ; Name         Instructions Cycles
 11635                           ; simple_byte            7     4 (average)
 11636                           ;	Chosen strategy is simple_byte
 11637  00355A  0100               	movlb	0	; () banked
 11638  00355C  5184               	movf	??_updateServoPosition& (0+255),w,b
 11639  00355E  0A01               	xorlw	1	; case 1
 11640  003560  B4D8               	btfsc	status,2,c
 11641  003562  D7DD               	goto	l5227
 11642  003564  0A02               	xorlw	2	; case 3
 11643  003566  A4D8               	btfss	status,2,c
 11644  003568  0012               	return	
 11645  00356A  D7E3               	goto	l772
 11646  00356C                     __end_of_updateServoPosition:
 11647                           	opt stack 0
 11648                           tblptru	equ	0xFF8
 11649                           tblptrh	equ	0xFF7
 11650                           tblptrl	equ	0xFF6
 11651                           tablat	equ	0xFF5
 11652                           prodh	equ	0xFF4
 11653                           prodl	equ	0xFF3
 11654                           intcon	equ	0xFF2
 11655                           intcon2	equ	0xFF1
 11656                           intcon3	equ	0xFF0
 11657                           postinc0	equ	0xFEE
 11658                           wreg	equ	0xFE8
 11659                           postdec1	equ	0xFE5
 11660                           fsr1l	equ	0xFE1
 11661                           indf2	equ	0xFDF
 11662                           postinc2	equ	0xFDE
 11663                           postdec2	equ	0xFDD
 11664                           fsr2h	equ	0xFDA
 11665                           fsr2l	equ	0xFD9
 11666                           status	equ	0xFD8
 11667                           
 11668 ;; *************** function _PortTests *****************
 11669 ;; Defined at:
 11670 ;;		line 285 in file "Test.c"
 11671 ;; Parameters:    Size  Location     Type
 11672 ;;		None
 11673 ;; Auto vars:     Size  Location     Type
 11674 ;;		None
 11675 ;; Return value:  Size  Location     Type
 11676 ;;                  1    wreg      void 
 11677 ;; Registers used:
 11678 ;;		wreg, status,2, status,0
 11679 ;; Tracked objects:
 11680 ;;		On entry : 0/0
 11681 ;;		On exit  : 0/0
 11682 ;;		Unchanged: 0/0
 11683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11686 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11687 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11688 ;;Total ram usage:        2 bytes
 11689 ;; Hardware stack levels used:    1
 11690 ;; Hardware stack levels required when called:    7
 11691 ;; This function calls:
 11692 ;;		Nothing
 11693 ;; This function is called by:
 11694 ;;		_Test
 11695 ;; This function uses a non-reentrant model
 11696 ;;
 11697                           
 11698                           	psect	text42
 11699  0033FA                     __ptext42:
 11700                           	opt stack 0
 11701  0033FA                     _PortTests:
 11702                           	opt stack 22
 11703  0033FA                     l1103:
 11704  0033FA  A281               	btfss	3969,1,c	;volatile
 11705  0033FC  D7FE               	goto	l1103
 11706                           
 11707                           ;Test.c: 289: var = PORTB >> 4;
 11708  0033FE  CF81 F080          	movff	3969,??_PortTests	;volatile
 11709  003402  0100               	movlb	0	; () banked
 11710  003404  3B80               	swapf	??_PortTests& (0+255),f,b
 11711  003406  0E0F               	movlw	15
 11712  003408  1780               	andwf	??_PortTests& (0+255),f,b
 11713  00340A  0100               	movlb	0	; () banked
 11714  00340C  5180               	movf	??_PortTests& (0+255),w,b
 11715  00340E  0100               	movlb	0	; () banked
 11716  003410  6FFA               	movwf	_var& (0+255),b
 11717  003412  6BFB               	clrf	(_var+1)& (0+255),b
 11718                           
 11719                           ;Test.c: 290: switch(var){
 11720  003414  D00C               	goto	l6611
 11721  003416                     l1107:
 11722                           
 11723                           ; BSR set to: 0
 11724                           ;Test.c: 292: LATEbits.LATE0 = 1;
 11725  003416  808D               	bsf	3981,0,c	;volatile
 11726                           
 11727                           ;Test.c: 293: break;
 11728  003418  D027               	goto	l1115
 11729  00341A                     l1109:
 11730                           
 11731                           ; BSR set to: 0
 11732                           ;Test.c: 295: LATEbits.LATE1 = 1;
 11733  00341A  828D               	bsf	3981,1,c	;volatile
 11734                           
 11735                           ;Test.c: 296: break;
 11736  00341C  D025               	goto	l1115
 11737  00341E                     l1110:
 11738                           
 11739                           ; BSR set to: 0
 11740                           ;Test.c: 298: LATDbits.LATD0 = 1;
 11741  00341E  808C               	bsf	3980,0,c	;volatile
 11742                           
 11743                           ;Test.c: 299: break;
 11744  003420  D023               	goto	l1115
 11745  003422                     l1111:
 11746                           
 11747                           ; BSR set to: 0
 11748                           ;Test.c: 301: LATAbits.LATA3 = 1;
 11749  003422  8689               	bsf	3977,3,c	;volatile
 11750                           
 11751                           ;Test.c: 302: break;
 11752  003424  D021               	goto	l1115
 11753  003426                     l1112:
 11754                           
 11755                           ; BSR set to: 0
 11756                           ;Test.c: 304: LATAbits.LATA4 = 1;
 11757  003426  8889               	bsf	3977,4,c	;volatile
 11758                           
 11759                           ;Test.c: 305: break;
 11760  003428  D01F               	goto	l1115
 11761  00342A                     l1113:
 11762                           
 11763                           ; BSR set to: 0
 11764                           ;Test.c: 307: LATAbits.LATA5 = 1;
 11765  00342A  8A89               	bsf	3977,5,c	;volatile
 11766                           
 11767                           ; BSR set to: 0
 11768                           ;Test.c: 311: }
 11769                           
 11770                           ; BSR set to: 0
 11771                           ;Test.c: 310: break;
 11772                           
 11773                           ;Test.c: 309: default:
 11774                           
 11775                           ;Test.c: 308: break;
 11776  00342C  D01D               	goto	l1115
 11777  00342E                     l6611:
 11778                           
 11779                           ; BSR set to: 0
 11780  00342E  C0FA  F080         	movff	_var,??_PortTests
 11781  003432  C0FB  F081         	movff	_var+1,??_PortTests+1
 11782                           
 11783                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11784                           ; Switch size 1, requested type "space"
 11785                           ; Number of cases is 1, Range of values is 0 to 0
 11786                           ; switch strategies available:
 11787                           ; Name         Instructions Cycles
 11788                           ; simple_byte            4     3 (average)
 11789                           ;	Chosen strategy is simple_byte
 11790  003436  0100               	movlb	0	; () banked
 11791  003438  5181               	movf	(??_PortTests+1)& (0+255),w,b
 11792  00343A  0A00               	xorlw	0	; case 0
 11793  00343C  A4D8               	btfss	status,2,c
 11794  00343E  D014               	goto	l1115
 11795                           
 11796                           ; BSR set to: 0
 11797                           ; Switch size 1, requested type "space"
 11798                           ; Number of cases is 6, Range of values is 0 to 5
 11799                           ; switch strategies available:
 11800                           ; Name         Instructions Cycles
 11801                           ; simple_byte           19    10 (average)
 11802                           ;	Chosen strategy is simple_byte
 11803  003440  0100               	movlb	0	; () banked
 11804  003442  5180               	movf	??_PortTests& (0+255),w,b
 11805  003444  0A00               	xorlw	0	; case 0
 11806  003446  B4D8               	btfsc	status,2,c
 11807  003448  D7E6               	goto	l1107
 11808  00344A  0A01               	xorlw	1	; case 1
 11809  00344C  B4D8               	btfsc	status,2,c
 11810  00344E  D7E5               	goto	l1109
 11811  003450  0A03               	xorlw	3	; case 2
 11812  003452  B4D8               	btfsc	status,2,c
 11813  003454  D7E4               	goto	l1110
 11814  003456  0A01               	xorlw	1	; case 3
 11815  003458  B4D8               	btfsc	status,2,c
 11816  00345A  D7E3               	goto	l1111
 11817  00345C  0A07               	xorlw	7	; case 4
 11818  00345E  B4D8               	btfsc	status,2,c
 11819  003460  D7E2               	goto	l1112
 11820  003462  0A01               	xorlw	1	; case 5
 11821  003464  B4D8               	btfsc	status,2,c
 11822  003466  D7E1               	goto	l1113
 11823  003468                     l1115:
 11824  003468  B281               	btfsc	3969,1,c	;volatile
 11825  00346A  D7FE               	goto	l1115
 11826                           
 11827                           ;Test.c: 313: __nop();
 11828  00346C  F000               	nop	
 11829                           
 11830                           ;Test.c: 314: __nop();
 11831  00346E  F000               	nop	
 11832                           
 11833                           ;Test.c: 315: LATA = 0x00;
 11834  003470  0E00               	movlw	0
 11835  003472  6E89               	movwf	3977,c	;volatile
 11836                           
 11837                           ;Test.c: 316: LATE = 0x00;
 11838  003474  0E00               	movlw	0
 11839  003476  6E8D               	movwf	3981,c	;volatile
 11840                           
 11841                           ;Test.c: 317: LATD = 0x00; }
 11842  003478  0E00               	movlw	0
 11843  00347A  6E8C               	movwf	3980,c	;volatile
 11844  00347C  D7BE               	goto	l1103
 11845  00347E                     __end_of_PortTests:
 11846                           	opt stack 0
 11847                           tblptru	equ	0xFF8
 11848                           tblptrh	equ	0xFF7
 11849                           tblptrl	equ	0xFF6
 11850                           tablat	equ	0xFF5
 11851                           prodh	equ	0xFF4
 11852                           prodl	equ	0xFF3
 11853                           intcon	equ	0xFF2
 11854                           intcon2	equ	0xFF1
 11855                           intcon3	equ	0xFF0
 11856                           postinc0	equ	0xFEE
 11857                           wreg	equ	0xFE8
 11858                           postdec1	equ	0xFE5
 11859                           fsr1l	equ	0xFE1
 11860                           indf2	equ	0xFDF
 11861                           postinc2	equ	0xFDE
 11862                           postdec2	equ	0xFDD
 11863                           fsr2h	equ	0xFDA
 11864                           fsr2l	equ	0xFD9
 11865                           status	equ	0xFD8
 11866                           
 11867 ;; *************** function _PortTestA5 *****************
 11868 ;; Defined at:
 11869 ;;		line 320 in file "Test.c"
 11870 ;; Parameters:    Size  Location     Type
 11871 ;;		None
 11872 ;; Auto vars:     Size  Location     Type
 11873 ;;		None
 11874 ;; Return value:  Size  Location     Type
 11875 ;;                  1    wreg      void 
 11876 ;; Registers used:
 11877 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11878 ;; Tracked objects:
 11879 ;;		On entry : 0/0
 11880 ;;		On exit  : 0/0
 11881 ;;		Unchanged: 0/0
 11882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11885 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11886 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11887 ;;Total ram usage:        1 bytes
 11888 ;; Hardware stack levels used:    1
 11889 ;; Hardware stack levels required when called:   10
 11890 ;; This function calls:
 11891 ;;		_lcdInst
 11892 ;;		_printf
 11893 ;; This function is called by:
 11894 ;;		_Test
 11895 ;; This function uses a non-reentrant model
 11896 ;;
 11897                           
 11898                           	psect	text43
 11899  003772                     __ptext43:
 11900                           	opt stack 0
 11901  003772                     _PortTestA5:
 11902                           	opt stack 19
 11903                           
 11904                           ;Test.c: 321: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11905                           
 11906                           ;incstack = 0
 11907  003772  0E01               	movlw	1
 11908  003774  EC0E  F020         	call	_lcdInst
 11909  003778  0E68               	movlw	104
 11910  00377A  0100               	movlb	0	; () banked
 11911  00377C  6FAB               	movwf	??_PortTestA5& (0+255),b
 11912  00377E  0EE4               	movlw	228
 11913  003780                     u7337:
 11914  003780  2EE8               	decfsz	wreg,f,c
 11915  003782  D7FE               	bra	u7337
 11916  003784  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 11917  003786  D7FC               	bra	u7337
 11918  003788  F000               	nop	
 11919  00378A  0E80               	movlw	128
 11920  00378C  EC0E  F020         	call	_lcdInst
 11921                           
 11922                           ;Test.c: 322: printf("D WILL RETURN    ");
 11923  003790  0EDF               	movlw	low STR_105
 11924  003792  0100               	movlb	0	; () banked
 11925  003794  6F8E               	movwf	printf@f& (0+255),b
 11926  003796  0EFB               	movlw	high STR_105
 11927  003798  0100               	movlb	0	; () banked
 11928  00379A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11929  00379C  EC97  F008         	call	_printf	;wreg free
 11930                           
 11931                           ;Test.c: 323: lcdInst(0b11000000);;
 11932  0037A0  0EC0               	movlw	192
 11933  0037A2  EC0E  F020         	call	_lcdInst
 11934                           
 11935                           ;Test.c: 324: printf("OTHER SETS RA5   ");
 11936  0037A6  0EF1               	movlw	low STR_106
 11937  0037A8  0100               	movlb	0	; () banked
 11938  0037AA  6F8E               	movwf	printf@f& (0+255),b
 11939  0037AC  0EFB               	movlw	high STR_106
 11940  0037AE  0100               	movlb	0	; () banked
 11941  0037B0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11942  0037B2  EC97  F008         	call	_printf	;wreg free
 11943  0037B6                     l1124:
 11944  0037B6  A281               	btfss	3969,1,c	;volatile
 11945  0037B8  D7FE               	goto	l1124
 11946                           
 11947                           ;Test.c: 330: }
 11948                           ;Test.c: 331: if(PORTB >> 4 == 0b1111){
 11949  0037BA  3881               	swapf	3969,w,c	;volatile
 11950  0037BC  0B0F               	andlw	15
 11951  0037BE  0A0F               	xorlw	15
 11952  0037C0  B4D8               	btfsc	status,2,c
 11953  0037C2  0012               	return	
 11954                           
 11955                           ;Test.c: 334: else{
 11956                           ;Test.c: 335: LATAbits.LATA5 = 1;
 11957                           
 11958                           ;Test.c: 333: }
 11959                           
 11960                           ;Test.c: 332: break;
 11961  0037C4  8A89               	bsf	3977,5,c	;volatile
 11962  0037C6                     l1130:
 11963  0037C6  B281               	btfsc	3969,1,c	;volatile
 11964  0037C8  D7FE               	goto	l1130
 11965                           
 11966                           ;Test.c: 338: }
 11967                           ;Test.c: 339: __nop();
 11968  0037CA  F000               	nop	
 11969                           
 11970                           ;Test.c: 340: __nop();
 11971  0037CC  F000               	nop	
 11972                           
 11973                           ;Test.c: 341: LATAbits.LATA5 = 0;
 11974  0037CE  9A89               	bcf	3977,5,c	;volatile
 11975  0037D0  D7F2               	goto	l1124
 11976  0037D2                     __end_of_PortTestA5:
 11977                           	opt stack 0
 11978                           tblptru	equ	0xFF8
 11979                           tblptrh	equ	0xFF7
 11980                           tblptrl	equ	0xFF6
 11981                           tablat	equ	0xFF5
 11982                           prodh	equ	0xFF4
 11983                           prodl	equ	0xFF3
 11984                           intcon	equ	0xFF2
 11985                           intcon2	equ	0xFF1
 11986                           intcon3	equ	0xFF0
 11987                           postinc0	equ	0xFEE
 11988                           wreg	equ	0xFE8
 11989                           postdec1	equ	0xFE5
 11990                           fsr1l	equ	0xFE1
 11991                           indf2	equ	0xFDF
 11992                           postinc2	equ	0xFDE
 11993                           postdec2	equ	0xFDD
 11994                           fsr2h	equ	0xFDA
 11995                           fsr2l	equ	0xFD9
 11996                           status	equ	0xFD8
 11997                           
 11998 ;; *************** function _printf *****************
 11999 ;; Defined at:
 12000 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 12001 ;; Parameters:    Size  Location     Type
 12002 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 12003 ;;		 -> STR_106(18), STR_105(18), STR_104(15), STR_103(15), 
 12004 ;;		 -> STR_102(15), STR_101(17), STR_100(17), STR_99(17), 
 12005 ;;		 -> STR_98(16), STR_97(17), STR_96(17), STR_95(17), 
 12006 ;;		 -> STR_94(17), STR_93(17), STR_92(17), STR_91(15), 
 12007 ;;		 -> STR_90(11), STR_89(17), STR_88(11), STR_87(17), 
 12008 ;;		 -> STR_86(14), STR_85(15), STR_84(14), STR_83(10), 
 12009 ;;		 -> STR_82(16), STR_81(15), STR_80(15), STR_79(13), 
 12010 ;;		 -> STR_78(14), STR_77(8), STR_76(14), STR_75(15), 
 12011 ;;		 -> STR_74(12), STR_73(14), STR_72(17), STR_71(14), 
 12012 ;;		 -> STR_70(15), STR_69(17), STR_68(17), STR_67(7), 
 12013 ;;		 -> STR_66(21), STR_65(13), STR_64(11), STR_63(24), 
 12014 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 12015 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 12016 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 12017 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 12018 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 12019 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(19), 
 12020 ;;		 -> STR_26(17), STR_25(19), STR_24(17), STR_23(14), 
 12021 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 12022 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 12023 ;;		 -> STR_1(18), 
 12024 ;; Auto vars:     Size  Location     Type
 12025 ;;  tmpval          4    0        struct .
 12026 ;;  width           2   41[BANK0 ] int 
 12027 ;;  val             2   37[BANK0 ] unsigned int 
 12028 ;;  len             2   35[BANK0 ] unsigned int 
 12029 ;;  ap              2   33[BANK0 ] PTR void [1]
 12030 ;;		 -> ?i2_printf(2), ?_printf(2), 
 12031 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 12032 ;;		 -> STR_107(7), count_total(2), printRTC@month(4), UI@month(4), 
 12033 ;;  c               1   40[BANK0 ] char 
 12034 ;;  flag            1   39[BANK0 ] unsigned char 
 12035 ;;  prec            1   30[BANK0 ] char 
 12036 ;; Return value:  Size  Location     Type
 12037 ;;                  2   14[BANK0 ] int 
 12038 ;; Registers used:
 12039 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12040 ;; Tracked objects:
 12041 ;;		On entry : 0/0
 12042 ;;		On exit  : 0/0
 12043 ;;		Unchanged: 0/0
 12044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12045 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12046 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12047 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12048 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12049 ;;Total ram usage:       29 bytes
 12050 ;; Hardware stack levels used:    1
 12051 ;; Hardware stack levels required when called:    9
 12052 ;; This function calls:
 12053 ;;		___lwdiv
 12054 ;;		___lwmod
 12055 ;;		___wmul
 12056 ;;		_isdigit
 12057 ;;		_putch
 12058 ;; This function is called by:
 12059 ;;		_UI
 12060 ;;		_change_state_to_menu_start
 12061 ;;		_change_state_to_menu_12
 12062 ;;		_change_state_to_menu_22
 12063 ;;		_printRTC
 12064 ;;		_EEPROM_write
 12065 ;;		_Test
 12066 ;;		_algorithmTest
 12067 ;;		_sensorTest
 12068 ;;		_actuatorTest
 12069 ;;		_PortTestA5
 12070 ;; This function uses a non-reentrant model
 12071 ;;
 12072                           
 12073                           	psect	text44
 12074  00112E                     __ptext44:
 12075                           	opt stack 0
 12076  00112E                     _printf:
 12077                           	opt stack 18
 12078                           
 12079                           ;doprnt.c: 466: va_list ap;
 12080                           ;doprnt.c: 499: signed char c;
 12081                           ;doprnt.c: 501: int width;
 12082                           ;doprnt.c: 506: signed char prec;
 12083                           ;doprnt.c: 508: unsigned char flag;
 12084                           ;doprnt.c: 523: union {
 12085                           ;doprnt.c: 524: unsigned long vd;
 12086                           ;doprnt.c: 525: double integ;
 12087                           ;doprnt.c: 526: } tmpval;
 12088                           ;doprnt.c: 528: unsigned int val;
 12089                           ;doprnt.c: 529: unsigned len;
 12090                           ;doprnt.c: 530: const char * cp;
 12091                           ;doprnt.c: 533: *ap = __va_start();
 12092                           
 12093                           ;incstack = 0
 12094  00112E  0E90               	movlw	low (?_printf+2)
 12095  001130  0100               	movlb	0	; () banked
 12096  001132  6FA1               	movwf	printf@ap& (0+255),b
 12097  001134  0E00               	movlw	high (?_printf+2)
 12098  001136  0100               	movlb	0	; () banked
 12099  001138  6FA2               	movwf	(printf@ap+1)& (0+255),b
 12100                           
 12101                           ;doprnt.c: 536: while(c = *f++) {
 12102  00113A  D205               	goto	l5187
 12103  00113C                     l5057:
 12104                           
 12105                           ; BSR set to: 0
 12106                           ;doprnt.c: 538: if(c != '%')
 12107  00113C  0E25               	movlw	37
 12108  00113E  0100               	movlb	0	; () banked
 12109  001140  19A8               	xorwf	printf@c& (0+255),w,b
 12110  001142  B4D8               	btfsc	status,2,c
 12111  001144  D005               	goto	l5061
 12112                           
 12113                           ; BSR set to: 0
 12114                           ;doprnt.c: 540: {
 12115                           ;doprnt.c: 541: (putch(c) );
 12116  001146  0100               	movlb	0	; () banked
 12117  001148  51A8               	movf	printf@c& (0+255),w,b
 12118  00114A  EC06  F020         	call	_putch
 12119                           
 12120                           ;doprnt.c: 542: continue;
 12121  00114E  D1FB               	goto	l5187
 12122  001150                     l5061:
 12123                           
 12124                           ;doprnt.c: 543: }
 12125                           ;doprnt.c: 546: width = 0;
 12126  001150  0E00               	movlw	0
 12127  001152  0100               	movlb	0	; () banked
 12128  001154  6FAA               	movwf	(printf@width+1)& (0+255),b
 12129  001156  0E00               	movlw	0
 12130  001158  6FA9               	movwf	printf@width& (0+255),b
 12131                           
 12132                           ;doprnt.c: 548: flag = 0;
 12133  00115A  0E00               	movlw	0
 12134  00115C  0100               	movlb	0	; () banked
 12135  00115E  6FA7               	movwf	printf@flag& (0+255),b
 12136                           
 12137                           ; BSR set to: 0
 12138                           ;doprnt.c: 551: switch(*f) {
 12139                           
 12140                           ;doprnt.c: 550: for(;;) {
 12141  001160  D005               	goto	l5067
 12142  001162                     l5063:
 12143                           
 12144                           ;doprnt.c: 580: flag |= 0x04;
 12145  001162  0100               	movlb	0	; () banked
 12146  001164  85A7               	bsf	printf@flag& (0+255),2,b
 12147                           
 12148                           ;doprnt.c: 581: f++;
 12149  001166  0100               	movlb	0	; () banked
 12150  001168  4B8E               	infsnz	printf@f& (0+255),f,b
 12151  00116A  2B8F               	incf	(printf@f+1)& (0+255),f,b
 12152  00116C                     l5067:
 12153  00116C  C08E  FFF6         	movff	printf@f,tblptrl
 12154  001170  C08F  FFF7         	movff	printf@f+1,tblptrh
 12155  001174                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12156  001174  6AF8               	clrf	tblptru,c
 12157  001176                     	endif
 12158  001176                     	if	0	;tblptru may be non-zero
 12159  001176                     	endif
 12160  001176  0008               	tblrd		*
 12161  001178  50F5               	movf	tablat,w,c
 12162                           
 12163                           ; Switch size 1, requested type "space"
 12164                           ; Number of cases is 1, Range of values is 48 to 48
 12165                           ; switch strategies available:
 12166                           ; Name         Instructions Cycles
 12167                           ; simple_byte            4     3 (average)
 12168                           ;	Chosen strategy is simple_byte
 12169  00117A  0A30               	xorlw	48	; case 48
 12170  00117C  B4D8               	btfsc	status,2,c
 12171  00117E  D7F1               	goto	l5063
 12172                           
 12173                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 12174                           
 12175                           ;doprnt.c: 586: }
 12176                           
 12177                           ;doprnt.c: 585: break;
 12178  001180  C08E  FFF6         	movff	printf@f,tblptrl
 12179  001184  C08F  FFF7         	movff	printf@f+1,tblptrh
 12180  001188                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12181  001188  6AF8               	clrf	tblptru,c
 12182  00118A                     	endif
 12183  00118A                     	if	0	;tblptru may be non-zero
 12184  00118A                     	endif
 12185  00118A  0008               	tblrd		*
 12186  00118C  50F5               	movf	tablat,w,c
 12187  00118E  EC2D  F01F         	call	_isdigit
 12188  001192  A0D8               	btfss	status,0,c
 12189  001194  D0D2               	goto	l5115
 12190                           
 12191                           ;doprnt.c: 598: width = 0;
 12192  001196  0E00               	movlw	0
 12193  001198  0100               	movlb	0	; () banked
 12194  00119A  6FAA               	movwf	(printf@width+1)& (0+255),b
 12195  00119C  0E00               	movlw	0
 12196  00119E  6FA9               	movwf	printf@width& (0+255),b
 12197  0011A0                     l5073:
 12198                           
 12199                           ;doprnt.c: 600: width *= 10;
 12200  0011A0  C0A9  F080         	movff	printf@width,___wmul@multiplier
 12201  0011A4  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 12202  0011A8  0E00               	movlw	0
 12203  0011AA  0100               	movlb	0	; () banked
 12204  0011AC  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12205  0011AE  0E0A               	movlw	10
 12206  0011B0  6F82               	movwf	___wmul@multiplicand& (0+255),b
 12207  0011B2  ECC7  F01D         	call	___wmul	;wreg free
 12208  0011B6  C080  F0A9         	movff	?___wmul,printf@width
 12209  0011BA  C081  F0AA         	movff	?___wmul+1,printf@width+1
 12210                           
 12211                           ;doprnt.c: 601: width += *f++ - '0';
 12212  0011BE  0ED0               	movlw	208
 12213  0011C0  0100               	movlb	0	; () banked
 12214  0011C2  6F9A               	movwf	??_printf& (0+255),b
 12215  0011C4  0EFF               	movlw	255
 12216  0011C6  0100               	movlb	0	; () banked
 12217  0011C8  6F9B               	movwf	(??_printf+1)& (0+255),b
 12218  0011CA  C08E  FFF6         	movff	printf@f,tblptrl
 12219  0011CE  C08F  FFF7         	movff	printf@f+1,tblptrh
 12220  0011D2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12221  0011D2  6AF8               	clrf	tblptru,c
 12222  0011D4                     	endif
 12223  0011D4                     	if	0	;tblptru may be non-zero
 12224  0011D4                     	endif
 12225  0011D4  0008               	tblrd		*
 12226  0011D6  50F5               	movf	tablat,w,c
 12227  0011D8  0100               	movlb	0	; () banked
 12228  0011DA  6F9C               	movwf	(??_printf+2)& (0+255),b
 12229  0011DC  6B9D               	clrf	(??_printf+3)& (0+255),b
 12230  0011DE  0100               	movlb	0	; () banked
 12231  0011E0  519A               	movf	??_printf& (0+255),w,b
 12232  0011E2  0100               	movlb	0	; () banked
 12233  0011E4  279C               	addwf	(??_printf+2)& (0+255),f,b
 12234  0011E6  0100               	movlb	0	; () banked
 12235  0011E8  519B               	movf	(??_printf+1)& (0+255),w,b
 12236  0011EA  0100               	movlb	0	; () banked
 12237  0011EC  239D               	addwfc	(??_printf+3)& (0+255),f,b
 12238  0011EE  0100               	movlb	0	; () banked
 12239  0011F0  519C               	movf	(??_printf+2)& (0+255),w,b
 12240  0011F2  0100               	movlb	0	; () banked
 12241  0011F4  27A9               	addwf	printf@width& (0+255),f,b
 12242  0011F6  0100               	movlb	0	; () banked
 12243  0011F8  519D               	movf	(??_printf+3)& (0+255),w,b
 12244  0011FA  0100               	movlb	0	; () banked
 12245  0011FC  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 12246                           
 12247                           ; BSR set to: 0
 12248  0011FE  0100               	movlb	0	; () banked
 12249  001200  4B8E               	infsnz	printf@f& (0+255),f,b
 12250  001202  2B8F               	incf	(printf@f+1)& (0+255),f,b
 12251                           
 12252                           ; BSR set to: 0
 12253                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 12254  001204  C08E  FFF6         	movff	printf@f,tblptrl
 12255  001208  C08F  FFF7         	movff	printf@f+1,tblptrh
 12256  00120C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12257  00120C  6AF8               	clrf	tblptru,c
 12258  00120E                     	endif
 12259  00120E                     	if	0	;tblptru may be non-zero
 12260  00120E                     	endif
 12261  00120E  0008               	tblrd		*
 12262  001210  50F5               	movf	tablat,w,c
 12263  001212  EC2D  F01F         	call	_isdigit
 12264  001216  A0D8               	btfss	status,0,c
 12265  001218  D090               	goto	l5115
 12266  00121A  D7C2               	goto	l5073
 12267  00121C                     l5081:
 12268                           
 12269                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 12270  00121C  C0A1  FFD9         	movff	printf@ap,fsr2l
 12271  001220  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 12272  001224  CFDE F09F          	movff	postinc2,printf@cp
 12273  001228  CFDD F0A0          	movff	postdec2,printf@cp+1
 12274  00122C  0E02               	movlw	2
 12275  00122E  0100               	movlb	0	; () banked
 12276  001230  27A1               	addwf	printf@ap& (0+255),f,b
 12277  001232  0E00               	movlw	0
 12278  001234  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 12279                           
 12280                           ; BSR set to: 0
 12281                           ;doprnt.c: 740: if(!cp)
 12282  001236  0100               	movlb	0	; () banked
 12283  001238  519F               	movf	printf@cp& (0+255),w,b
 12284  00123A  0100               	movlb	0	; () banked
 12285  00123C  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 12286  00123E  A4D8               	btfss	status,2,c
 12287  001240  D006               	goto	l5089
 12288                           
 12289                           ; BSR set to: 0
 12290                           ;doprnt.c: 741: cp = "(null)";
 12291  001242  0EB5               	movlw	low STR_107
 12292  001244  0100               	movlb	0	; () banked
 12293  001246  6F9F               	movwf	printf@cp& (0+255),b
 12294  001248  0EFF               	movlw	high STR_107
 12295  00124A  0100               	movlb	0	; () banked
 12296  00124C  6FA0               	movwf	(printf@cp+1)& (0+255),b
 12297  00124E                     l5089:
 12298                           
 12299                           ; BSR set to: 0
 12300                           ;doprnt.c: 745: len = 0;
 12301  00124E  0E00               	movlw	0
 12302  001250  0100               	movlb	0	; () banked
 12303  001252  6FA4               	movwf	(printf@len+1)& (0+255),b
 12304  001254  0E00               	movlw	0
 12305  001256  6FA3               	movwf	printf@len& (0+255),b
 12306                           
 12307                           ;doprnt.c: 746: while(cp[len])
 12308  001258  D003               	goto	l5093
 12309  00125A                     l5091:
 12310                           
 12311                           ;doprnt.c: 747: len++;
 12312  00125A  0100               	movlb	0	; () banked
 12313  00125C  4BA3               	infsnz	printf@len& (0+255),f,b
 12314  00125E  2BA4               	incf	(printf@len+1)& (0+255),f,b
 12315  001260                     l5093:
 12316                           
 12317                           ; BSR set to: 0
 12318  001260  0100               	movlb	0	; () banked
 12319  001262  51A3               	movf	printf@len& (0+255),w,b
 12320  001264  0100               	movlb	0	; () banked
 12321  001266  259F               	addwf	printf@cp& (0+255),w,b
 12322  001268  0100               	movlb	0	; () banked
 12323  00126A  6F9A               	movwf	??_printf& (0+255),b
 12324  00126C  0100               	movlb	0	; () banked
 12325  00126E  51A4               	movf	(printf@len+1)& (0+255),w,b
 12326  001270  0100               	movlb	0	; () banked
 12327  001272  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 12328  001274  0100               	movlb	0	; () banked
 12329  001276  6F9B               	movwf	(??_printf+1)& (0+255),b
 12330  001278  C09A  FFF6         	movff	??_printf,tblptrl
 12331  00127C  C09B  FFF7         	movff	??_printf+1,tblptrh
 12332  001280  0E00               	movlw	low (__mediumconst shr (0+16))
 12333  001282  6EF8               	movwf	tblptru,c
 12334  001284  0E0F               	movlw	(high __ramtop+-1)
 12335  001286  64F7               	cpfsgt	tblptrh,c
 12336  001288  D003               	bra	u3567
 12337  00128A  0008               	tblrd		*
 12338  00128C  50F5               	movf	tablat,w,c
 12339  00128E  D005               	bra	u3560
 12340  001290                     u3567:
 12341  001290  CFF6 FFE9          	movff	tblptrl,fsr0l
 12342  001294  CFF7 FFEA          	movff	tblptrh,fsr0h
 12343  001298  50EF               	movf	indf0,w,c
 12344  00129A                     u3560:
 12345  00129A  0900               	iorlw	0
 12346  00129C  A4D8               	btfss	status,2,c
 12347  00129E  D7DD               	goto	l5091
 12348                           
 12349                           ;doprnt.c: 757: if(width > len)
 12350  0012A0  0100               	movlb	0	; () banked
 12351  0012A2  51A9               	movf	printf@width& (0+255),w,b
 12352  0012A4  0100               	movlb	0	; () banked
 12353  0012A6  5DA3               	subwf	printf@len& (0+255),w,b
 12354  0012A8  0100               	movlb	0	; () banked
 12355  0012AA  51AA               	movf	(printf@width+1)& (0+255),w,b
 12356  0012AC  0100               	movlb	0	; () banked
 12357  0012AE  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 12358  0012B0  B0D8               	btfsc	status,0,c
 12359  0012B2  D009               	goto	l5099
 12360                           
 12361                           ; BSR set to: 0
 12362                           ;doprnt.c: 758: width -= len;
 12363  0012B4  0100               	movlb	0	; () banked
 12364  0012B6  51A3               	movf	printf@len& (0+255),w,b
 12365  0012B8  0100               	movlb	0	; () banked
 12366  0012BA  5FA9               	subwf	printf@width& (0+255),f,b
 12367  0012BC  0100               	movlb	0	; () banked
 12368  0012BE  51A4               	movf	(printf@len+1)& (0+255),w,b
 12369  0012C0  0100               	movlb	0	; () banked
 12370  0012C2  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 12371  0012C4  D009               	goto	l5103
 12372  0012C6                     l5099:
 12373                           
 12374                           ; BSR set to: 0
 12375                           ;doprnt.c: 759: else
 12376                           ;doprnt.c: 760: width = 0;
 12377  0012C6  0E00               	movlw	0
 12378  0012C8  0100               	movlb	0	; () banked
 12379  0012CA  6FAA               	movwf	(printf@width+1)& (0+255),b
 12380  0012CC  0E00               	movlw	0
 12381  0012CE  6FA9               	movwf	printf@width& (0+255),b
 12382                           
 12383                           ; BSR set to: 0
 12384                           ;doprnt.c: 764: while(width--)
 12385  0012D0  D003               	goto	l5103
 12386  0012D2                     l5101:
 12387                           
 12388                           ; BSR set to: 0
 12389                           ;doprnt.c: 765: (putch(' ') );
 12390  0012D2  0E20               	movlw	32
 12391  0012D4  EC06  F020         	call	_putch
 12392  0012D8                     l5103:
 12393  0012D8  0100               	movlb	0	; () banked
 12394  0012DA  07A9               	decf	printf@width& (0+255),f,b
 12395  0012DC  A0D8               	btfss	status,0,c
 12396  0012DE  07AA               	decf	(printf@width+1)& (0+255),f,b
 12397  0012E0  0100               	movlb	0	; () banked
 12398  0012E2  29A9               	incf	printf@width& (0+255),w,b
 12399  0012E4  E1F6               	bnz	l5101
 12400  0012E6  0100               	movlb	0	; () banked
 12401  0012E8  29AA               	incf	(printf@width+1)& (0+255),w,b
 12402  0012EA  B4D8               	btfsc	status,2,c
 12403  0012EC  D017               	goto	l5109
 12404  0012EE  D7F1               	goto	l5101
 12405  0012F0                     l5105:
 12406                           
 12407                           ; BSR set to: 0
 12408                           ;doprnt.c: 768: (putch(*cp++) );
 12409  0012F0  C09F  FFF6         	movff	printf@cp,tblptrl
 12410  0012F4  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 12411  0012F8  0E00               	movlw	low (__mediumconst shr (0+16))
 12412  0012FA  6EF8               	movwf	tblptru,c
 12413  0012FC  0E0F               	movlw	(high __ramtop+-1)
 12414  0012FE  64F7               	cpfsgt	tblptrh,c
 12415  001300  D003               	bra	u3607
 12416  001302  0008               	tblrd		*
 12417  001304  50F5               	movf	tablat,w,c
 12418  001306  D005               	bra	u3600
 12419  001308                     u3607:
 12420  001308  CFF6 FFE9          	movff	tblptrl,fsr0l
 12421  00130C  CFF7 FFEA          	movff	tblptrh,fsr0h
 12422  001310  50EF               	movf	indf0,w,c
 12423  001312                     u3600:
 12424  001312  EC06  F020         	call	_putch
 12425  001316  0100               	movlb	0	; () banked
 12426  001318  4B9F               	infsnz	printf@cp& (0+255),f,b
 12427  00131A  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 12428  00131C                     l5109:
 12429                           
 12430                           ; BSR set to: 0
 12431  00131C  0100               	movlb	0	; () banked
 12432  00131E  07A3               	decf	printf@len& (0+255),f,b
 12433  001320  A0D8               	btfss	status,0,c
 12434  001322  07A4               	decf	(printf@len+1)& (0+255),f,b
 12435  001324  0100               	movlb	0	; () banked
 12436  001326  29A3               	incf	printf@len& (0+255),w,b
 12437  001328  E1E3               	bnz	l5105
 12438  00132A  0100               	movlb	0	; () banked
 12439  00132C  29A4               	incf	(printf@len+1)& (0+255),w,b
 12440  00132E  B4D8               	btfsc	status,2,c
 12441  001330  D10A               	goto	l5187
 12442  001332  D7DE               	goto	l5105
 12443  001334                     l5111:
 12444                           
 12445                           ; BSR set to: 0
 12446                           ;doprnt.c: 818: flag |= 0x40;
 12447  001334  0100               	movlb	0	; () banked
 12448  001336  8DA7               	bsf	printf@flag& (0+255),6,b
 12449                           
 12450                           ; BSR set to: 0
 12451                           ;doprnt.c: 822: }
 12452                           
 12453                           ;doprnt.c: 819: break;
 12454  001338  D01D               	goto	l1167
 12455  00133A                     l5115:
 12456  00133A  C08E  FFF6         	movff	printf@f,tblptrl
 12457  00133E  C08F  FFF7         	movff	printf@f+1,tblptrh
 12458  001342  0100               	movlb	0	; () banked
 12459  001344  4B8E               	infsnz	printf@f& (0+255),f,b
 12460  001346  2B8F               	incf	(printf@f+1)& (0+255),f,b
 12461  001348                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12462  001348  6AF8               	clrf	tblptru,c
 12463  00134A                     	endif
 12464  00134A                     	if	0	;tblptru may be non-zero
 12465  00134A                     	endif
 12466  00134A  0008               	tblrd		*
 12467  00134C  CFF5 F0A8          	movff	tablat,printf@c
 12468  001350  0100               	movlb	0	; () banked
 12469  001352  51A8               	movf	printf@c& (0+255),w,b
 12470                           
 12471                           ; Switch size 1, requested type "space"
 12472                           ; Number of cases is 5, Range of values is 0 to 117
 12473                           ; switch strategies available:
 12474                           ; Name         Instructions Cycles
 12475                           ; simple_byte           16     9 (average)
 12476                           ;	Chosen strategy is simple_byte
 12477  001354  0A00               	xorlw	0	; case 0
 12478  001356  B4D8               	btfsc	status,2,c
 12479  001358  0012               	return	
 12480  00135A  0A64               	xorlw	100	; case 100
 12481  00135C  B4D8               	btfsc	status,2,c
 12482  00135E  D00A               	goto	l1167
 12483  001360  0A0D               	xorlw	13	; case 105
 12484  001362  B4D8               	btfsc	status,2,c
 12485  001364  D007               	goto	l1167
 12486  001366  0A1A               	xorlw	26	; case 115
 12487  001368  B4D8               	btfsc	status,2,c
 12488  00136A  D758               	goto	l5081
 12489  00136C  0A06               	xorlw	6	; case 117
 12490  00136E  B4D8               	btfsc	status,2,c
 12491  001370  D7E1               	goto	l5111
 12492  001372  D0E9               	goto	l5187
 12493  001374                     l1167:
 12494                           
 12495                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 12496  001374  0100               	movlb	0	; () banked
 12497  001376  BDA7               	btfsc	printf@flag& (0+255),6,b
 12498  001378  D019               	goto	l5127
 12499                           
 12500                           ; BSR set to: 0
 12501                           ;doprnt.c: 1253: {
 12502                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12503  00137A  C0A1  FFD9         	movff	printf@ap,fsr2l
 12504  00137E  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 12505  001382  CFDE F0A5          	movff	postinc2,printf@val
 12506  001386  CFDD F0A6          	movff	postdec2,printf@val+1
 12507                           
 12508                           ; BSR set to: 0
 12509  00138A  0E02               	movlw	2
 12510  00138C  0100               	movlb	0	; () banked
 12511  00138E  27A1               	addwf	printf@ap& (0+255),f,b
 12512  001390  0E00               	movlw	0
 12513  001392  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 12514                           
 12515                           ; BSR set to: 0
 12516                           ;doprnt.c: 1261: if((int)val < 0) {
 12517  001394  0100               	movlb	0	; () banked
 12518  001396  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 12519  001398  D016               	goto	l5131
 12520                           
 12521                           ; BSR set to: 0
 12522                           ;doprnt.c: 1262: flag |= 0x03;
 12523  00139A  0E03               	movlw	3
 12524  00139C  0100               	movlb	0	; () banked
 12525  00139E  13A7               	iorwf	printf@flag& (0+255),f,b
 12526                           
 12527                           ; BSR set to: 0
 12528                           ;doprnt.c: 1263: val = -val;
 12529  0013A0  0100               	movlb	0	; () banked
 12530  0013A2  6DA5               	negf	printf@val& (0+255),b
 12531  0013A4  1FA6               	comf	(printf@val+1)& (0+255),f,b
 12532  0013A6  B0D8               	btfsc	status,0,c
 12533  0013A8  2BA6               	incf	(printf@val+1)& (0+255),f,b
 12534                           
 12535                           ; BSR set to: 0
 12536                           ;doprnt.c: 1264: }
 12537                           ;doprnt.c: 1266: }
 12538  0013AA  D00D               	goto	l5131
 12539  0013AC                     l5127:
 12540                           
 12541                           ; BSR set to: 0
 12542                           ;doprnt.c: 1268: else
 12543                           ;doprnt.c: 1273: {
 12544                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 12545  0013AC  C0A1  FFD9         	movff	printf@ap,fsr2l
 12546  0013B0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 12547  0013B4  CFDE F0A5          	movff	postinc2,printf@val
 12548  0013B8  CFDD F0A6          	movff	postdec2,printf@val+1
 12549                           
 12550                           ; BSR set to: 0
 12551  0013BC  0E02               	movlw	2
 12552  0013BE  0100               	movlb	0	; () banked
 12553  0013C0  27A1               	addwf	printf@ap& (0+255),f,b
 12554  0013C2  0E00               	movlw	0
 12555  0013C4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 12556  0013C6                     l5131:
 12557                           
 12558                           ; BSR set to: 0
 12559                           ;doprnt.c: 1287: }
 12560                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12561  0013C6  0E01               	movlw	1
 12562  0013C8  0100               	movlb	0	; () banked
 12563  0013CA  6FA8               	movwf	printf@c& (0+255),b
 12564  0013CC                     l5133:
 12565                           
 12566                           ; BSR set to: 0
 12567  0013CC  0E05               	movlw	5
 12568  0013CE  0100               	movlb	0	; () banked
 12569  0013D0  19A8               	xorwf	printf@c& (0+255),w,b
 12570  0013D2  B4D8               	btfsc	status,2,c
 12571  0013D4  D019               	goto	l5145
 12572                           
 12573                           ; BSR set to: 0
 12574                           ;doprnt.c: 1306: if(val < dpowers[c])
 12575                           
 12576                           ; BSR set to: 0
 12577                           
 12578                           ; BSR set to: 0
 12579  0013D6  0100               	movlb	0	; () banked
 12580  0013D8  51A8               	movf	printf@c& (0+255),w,b
 12581  0013DA  0D02               	mullw	2
 12582  0013DC  0E82               	movlw	low _dpowers
 12583  0013DE  24F3               	addwf	prodl,w,c
 12584  0013E0  6EF6               	movwf	tblptrl,c
 12585  0013E2  0EFB               	movlw	high _dpowers
 12586  0013E4  20F4               	addwfc	prodh,w,c
 12587  0013E6  6EF7               	movwf	tblptrh,c
 12588  0013E8                     	if	1	;There are 3 active tblptr bytes
 12589  0013E8  6AF8               	clrf	tblptru,c
 12590  0013EA  0E00               	movlw	low (__mediumconst shr (0+16))
 12591  0013EC  22F8               	addwfc	tblptru,f,c
 12592  0013EE                     	endif
 12593  0013EE  0009               	tblrd		*+
 12594  0013F0  50F5               	movf	tablat,w,c
 12595  0013F2  0100               	movlb	0	; () banked
 12596  0013F4  5DA5               	subwf	printf@val& (0+255),w,b
 12597  0013F6  0009               	tblrd		*+
 12598  0013F8  50F5               	movf	tablat,w,c
 12599  0013FA  0100               	movlb	0	; () banked
 12600  0013FC  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 12601  0013FE  A0D8               	btfss	status,0,c
 12602  001400  D003               	goto	l5145
 12603                           
 12604                           ; BSR set to: 0
 12605                           
 12606                           ; BSR set to: 0
 12607                           
 12608                           ; BSR set to: 0
 12609                           ;doprnt.c: 1307: break;
 12610  001402  0100               	movlb	0	; () banked
 12611  001404  2BA8               	incf	printf@c& (0+255),f,b
 12612  001406  D7E2               	goto	l5133
 12613  001408                     l5145:
 12614                           
 12615                           ; BSR set to: 0
 12616                           ;doprnt.c: 1345: if(width && flag & 0x03)
 12617  001408  0100               	movlb	0	; () banked
 12618  00140A  51A9               	movf	printf@width& (0+255),w,b
 12619  00140C  0100               	movlb	0	; () banked
 12620  00140E  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 12621  001410  B4D8               	btfsc	status,2,c
 12622  001412  D00B               	goto	l5151
 12623                           
 12624                           ; BSR set to: 0
 12625  001414  C0A7  F09A         	movff	printf@flag,??_printf
 12626  001418  0E03               	movlw	3
 12627  00141A  0100               	movlb	0	; () banked
 12628  00141C  179A               	andwf	??_printf& (0+255),f,b
 12629  00141E  B4D8               	btfsc	status,2,c
 12630  001420  D004               	goto	l5151
 12631                           
 12632                           ; BSR set to: 0
 12633                           ;doprnt.c: 1346: width--;
 12634  001422  0100               	movlb	0	; () banked
 12635  001424  07A9               	decf	printf@width& (0+255),f,b
 12636  001426  A0D8               	btfss	status,0,c
 12637  001428  07AA               	decf	(printf@width+1)& (0+255),f,b
 12638  00142A                     l5151:
 12639                           
 12640                           ; BSR set to: 0
 12641                           ;doprnt.c: 1381: if(width > c)
 12642  00142A  0E80               	movlw	128
 12643  00142C  0100               	movlb	0	; () banked
 12644  00142E  BFA8               	btfsc	printf@c& (0+255),7,b
 12645  001430  0E7F               	movlw	127
 12646  001432  0100               	movlb	0	; () banked
 12647  001434  6F9A               	movwf	??_printf& (0+255),b
 12648  001436  0100               	movlb	0	; () banked
 12649  001438  51A9               	movf	printf@width& (0+255),w,b
 12650  00143A  0100               	movlb	0	; () banked
 12651  00143C  5DA8               	subwf	printf@c& (0+255),w,b
 12652  00143E  0100               	movlb	0	; () banked
 12653  001440  51AA               	movf	(printf@width+1)& (0+255),w,b
 12654  001442  0A80               	xorlw	128
 12655  001444  0100               	movlb	0	; () banked
 12656  001446  599A               	subwfb	??_printf& (0+255),w,b
 12657  001448  B0D8               	btfsc	status,0,c
 12658  00144A  D00B               	goto	l5155
 12659                           
 12660                           ; BSR set to: 0
 12661                           ;doprnt.c: 1382: width -= c;
 12662  00144C  0100               	movlb	0	; () banked
 12663  00144E  51A8               	movf	printf@c& (0+255),w,b
 12664  001450  0100               	movlb	0	; () banked
 12665  001452  5FA9               	subwf	printf@width& (0+255),f,b
 12666  001454  0E00               	movlw	0
 12667  001456  0100               	movlb	0	; () banked
 12668  001458  BFA8               	btfsc	printf@c& (0+255),7,b
 12669  00145A  0EFF               	movlw	255
 12670  00145C  0100               	movlb	0	; () banked
 12671  00145E  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 12672  001460  D005               	goto	l5157
 12673  001462                     l5155:
 12674                           
 12675                           ; BSR set to: 0
 12676                           ;doprnt.c: 1383: else
 12677                           ;doprnt.c: 1384: width = 0;
 12678  001462  0E00               	movlw	0
 12679  001464  0100               	movlb	0	; () banked
 12680  001466  6FAA               	movwf	(printf@width+1)& (0+255),b
 12681  001468  0E00               	movlw	0
 12682  00146A  6FA9               	movwf	printf@width& (0+255),b
 12683  00146C                     l5157:
 12684                           
 12685                           ; BSR set to: 0
 12686                           ;doprnt.c: 1387: if(flag & 0x04) {
 12687  00146C  0100               	movlb	0	; () banked
 12688  00146E  A5A7               	btfss	printf@flag& (0+255),2,b
 12689  001470  D018               	goto	l5169
 12690                           
 12691                           ; BSR set to: 0
 12692                           ;doprnt.c: 1392: if(flag & 0x03)
 12693  001472  C0A7  F09A         	movff	printf@flag,??_printf
 12694  001476  0E03               	movlw	3
 12695  001478  0100               	movlb	0	; () banked
 12696  00147A  179A               	andwf	??_printf& (0+255),f,b
 12697  00147C  B4D8               	btfsc	status,2,c
 12698  00147E  D003               	goto	l5163
 12699                           
 12700                           ; BSR set to: 0
 12701                           ;doprnt.c: 1393: (putch('-') );
 12702  001480  0E2D               	movlw	45
 12703  001482  EC06  F020         	call	_putch
 12704  001486                     l5163:
 12705                           
 12706                           ;doprnt.c: 1415: if(width)
 12707  001486  0100               	movlb	0	; () banked
 12708  001488  51A9               	movf	printf@width& (0+255),w,b
 12709  00148A  0100               	movlb	0	; () banked
 12710  00148C  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 12711  00148E  B4D8               	btfsc	status,2,c
 12712  001490  D025               	goto	l5179
 12713                           
 12714                           ; BSR set to: 0
 12715                           ;doprnt.c: 1417: (putch('0') );
 12716                           
 12717                           ; BSR set to: 0
 12718                           
 12719                           ;doprnt.c: 1416: do
 12720  001492  0E30               	movlw	48
 12721  001494  EC06  F020         	call	_putch
 12722                           
 12723                           ;doprnt.c: 1418: while(--width);
 12724  001498  0100               	movlb	0	; () banked
 12725  00149A  07A9               	decf	printf@width& (0+255),f,b
 12726  00149C  A0D8               	btfss	status,0,c
 12727  00149E  07AA               	decf	(printf@width+1)& (0+255),f,b
 12728  0014A0  D7F2               	goto	l5163
 12729  0014A2                     l5169:
 12730                           
 12731                           ; BSR set to: 0
 12732                           ;doprnt.c: 1422: {
 12733                           ;doprnt.c: 1424: if(width
 12734                           ;doprnt.c: 1428: )
 12735  0014A2  0100               	movlb	0	; () banked
 12736  0014A4  51A9               	movf	printf@width& (0+255),w,b
 12737  0014A6  0100               	movlb	0	; () banked
 12738  0014A8  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 12739  0014AA  B4D8               	btfsc	status,2,c
 12740  0014AC  D00D               	goto	l5175
 12741  0014AE                     l5171:
 12742                           
 12743                           ; BSR set to: 0
 12744                           ;doprnt.c: 1430: (putch(' ') );
 12745  0014AE  0E20               	movlw	32
 12746  0014B0  EC06  F020         	call	_putch
 12747                           
 12748                           ;doprnt.c: 1431: while(--width);
 12749  0014B4  0100               	movlb	0	; () banked
 12750  0014B6  07A9               	decf	printf@width& (0+255),f,b
 12751  0014B8  A0D8               	btfss	status,0,c
 12752  0014BA  07AA               	decf	(printf@width+1)& (0+255),f,b
 12753  0014BC  0100               	movlb	0	; () banked
 12754  0014BE  51A9               	movf	printf@width& (0+255),w,b
 12755  0014C0  0100               	movlb	0	; () banked
 12756  0014C2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 12757  0014C4  A4D8               	btfss	status,2,c
 12758  0014C6  D7F3               	goto	l5171
 12759  0014C8                     l5175:
 12760                           
 12761                           ; BSR set to: 0
 12762                           ;doprnt.c: 1438: if(flag & 0x03)
 12763  0014C8  C0A7  F09A         	movff	printf@flag,??_printf
 12764  0014CC  0E03               	movlw	3
 12765  0014CE  0100               	movlb	0	; () banked
 12766  0014D0  179A               	andwf	??_printf& (0+255),f,b
 12767  0014D2  B4D8               	btfsc	status,2,c
 12768  0014D4  D003               	goto	l5179
 12769                           
 12770                           ; BSR set to: 0
 12771                           ;doprnt.c: 1439: (putch('-') );
 12772  0014D6  0E2D               	movlw	45
 12773  0014D8  EC06  F020         	call	_putch
 12774  0014DC                     l5179:
 12775                           
 12776                           ;doprnt.c: 1469: }
 12777                           ;doprnt.c: 1472: prec = c;
 12778  0014DC  C0A8  F09E         	movff	printf@c,printf@prec
 12779                           
 12780                           ;doprnt.c: 1474: while(prec--) {
 12781  0014E0  D02C               	goto	l5185
 12782  0014E2                     l5181:
 12783                           
 12784                           ;doprnt.c: 1478: {
 12785                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 12786  0014E2  0100               	movlb	0	; () banked
 12787  0014E4  519E               	movf	printf@prec& (0+255),w,b
 12788  0014E6  0D02               	mullw	2
 12789  0014E8  0E82               	movlw	low _dpowers
 12790  0014EA  24F3               	addwf	prodl,w,c
 12791  0014EC  6EF6               	movwf	tblptrl,c
 12792  0014EE  0EFB               	movlw	high _dpowers
 12793  0014F0  20F4               	addwfc	prodh,w,c
 12794  0014F2  6EF7               	movwf	tblptrh,c
 12795  0014F4                     	if	1	;There are 3 active tblptr bytes
 12796  0014F4  6AF8               	clrf	tblptru,c
 12797  0014F6  0E00               	movlw	low (__mediumconst shr (0+16))
 12798  0014F8  22F8               	addwfc	tblptru,f,c
 12799  0014FA                     	endif
 12800  0014FA  0009               	tblrd		*+
 12801  0014FC  CFF5 F082          	movff	tablat,___lwdiv@divisor
 12802  001500  000A               	tblrd		*-
 12803  001502  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 12804  001506  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 12805  00150A  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 12806  00150E  EC3F  F01A         	call	___lwdiv	;wreg free
 12807  001512  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 12808  001516  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 12809  00151A  0E00               	movlw	0
 12810  00151C  0100               	movlb	0	; () banked
 12811  00151E  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 12812  001520  0E0A               	movlw	10
 12813  001522  6F89               	movwf	___lwmod@divisor& (0+255),b
 12814  001524  EC58  F01B         	call	___lwmod	;wreg free
 12815  001528  0100               	movlb	0	; () banked
 12816  00152A  5187               	movf	?___lwmod& (0+255),w,b
 12817  00152C  0F30               	addlw	48
 12818  00152E  0100               	movlb	0	; () banked
 12819  001530  6FA8               	movwf	printf@c& (0+255),b
 12820                           
 12821                           ; BSR set to: 0
 12822                           ;doprnt.c: 1523: }
 12823                           ;doprnt.c: 1524: (putch(c) );
 12824  001532  0100               	movlb	0	; () banked
 12825  001534  51A8               	movf	printf@c& (0+255),w,b
 12826  001536  EC06  F020         	call	_putch
 12827  00153A                     l5185:
 12828  00153A  0100               	movlb	0	; () banked
 12829  00153C  079E               	decf	printf@prec& (0+255),f,b
 12830  00153E  0100               	movlb	0	; () banked
 12831  001540  299E               	incf	printf@prec& (0+255),w,b
 12832  001542  A4D8               	btfss	status,2,c
 12833  001544  D7CE               	goto	l5181
 12834  001546                     l5187:
 12835  001546  C08E  FFF6         	movff	printf@f,tblptrl
 12836  00154A  C08F  FFF7         	movff	printf@f+1,tblptrh
 12837  00154E  0100               	movlb	0	; () banked
 12838  001550  4B8E               	infsnz	printf@f& (0+255),f,b
 12839  001552  2B8F               	incf	(printf@f+1)& (0+255),f,b
 12840  001554                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12841  001554  6AF8               	clrf	tblptru,c
 12842  001556                     	endif
 12843  001556                     	if	0	;tblptru may be non-zero
 12844  001556                     	endif
 12845  001556  0008               	tblrd		*
 12846  001558  CFF5 F0A8          	movff	tablat,printf@c
 12847  00155C  0100               	movlb	0	; () banked
 12848  00155E  51A8               	movf	printf@c& (0+255),w,b
 12849  001560  B4D8               	btfsc	status,2,c
 12850  001562  0012               	return	
 12851  001564  D5EB               	goto	l5057
 12852  001566                     __end_of_printf:
 12853                           	opt stack 0
 12854                           tblptru	equ	0xFF8
 12855                           tblptrh	equ	0xFF7
 12856                           tblptrl	equ	0xFF6
 12857                           tablat	equ	0xFF5
 12858                           prodh	equ	0xFF4
 12859                           prodl	equ	0xFF3
 12860                           intcon	equ	0xFF2
 12861                           intcon2	equ	0xFF1
 12862                           intcon3	equ	0xFF0
 12863                           indf0	equ	0xFEF
 12864                           postinc0	equ	0xFEE
 12865                           fsr0h	equ	0xFEA
 12866                           fsr0l	equ	0xFE9
 12867                           wreg	equ	0xFE8
 12868                           postdec1	equ	0xFE5
 12869                           fsr1l	equ	0xFE1
 12870                           indf2	equ	0xFDF
 12871                           postinc2	equ	0xFDE
 12872                           postdec2	equ	0xFDD
 12873                           fsr2h	equ	0xFDA
 12874                           fsr2l	equ	0xFD9
 12875                           status	equ	0xFD8
 12876                           
 12877 ;; *************** function _putch *****************
 12878 ;; Defined at:
 12879 ;;		line 20 in file "lcd.c"
 12880 ;; Parameters:    Size  Location     Type
 12881 ;;  data            1    wreg     unsigned char 
 12882 ;; Auto vars:     Size  Location     Type
 12883 ;;  data            1    2[BANK0 ] unsigned char 
 12884 ;; Return value:  Size  Location     Type
 12885 ;;                  1    wreg      void 
 12886 ;; Registers used:
 12887 ;;		wreg, status,2, status,0, cstack
 12888 ;; Tracked objects:
 12889 ;;		On entry : 0/0
 12890 ;;		On exit  : 0/0
 12891 ;;		Unchanged: 0/0
 12892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12894 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12896 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12897 ;;Total ram usage:        1 bytes
 12898 ;; Hardware stack levels used:    1
 12899 ;; Hardware stack levels required when called:    8
 12900 ;; This function calls:
 12901 ;;		_lcdNibble
 12902 ;; This function is called by:
 12903 ;;		_printf
 12904 ;; This function uses a non-reentrant model
 12905 ;;
 12906                           
 12907                           	psect	text45
 12908  00400C                     __ptext45:
 12909                           	opt stack 0
 12910  00400C                     _putch:
 12911                           	opt stack 18
 12912                           
 12913                           ;incstack = 0
 12914                           ;putch@data stored from wreg
 12915  00400C  0100               	movlb	0	; () banked
 12916  00400E  6F82               	movwf	putch@data& (0+255),b
 12917                           
 12918                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 12919  004010  848C               	bsf	3980,2,c	;volatile
 12920                           
 12921                           ;lcd.c: 22: lcdNibble(data);
 12922  004012  0100               	movlb	0	; () banked
 12923  004014  5182               	movf	putch@data& (0+255),w,b
 12924  004016  EC24  F01B         	call	_lcdNibble
 12925  00401A  0012               	return		;funcret
 12926  00401C                     __end_of_putch:
 12927                           	opt stack 0
 12928                           tblptru	equ	0xFF8
 12929                           tblptrh	equ	0xFF7
 12930                           tblptrl	equ	0xFF6
 12931                           tablat	equ	0xFF5
 12932                           prodh	equ	0xFF4
 12933                           prodl	equ	0xFF3
 12934                           intcon	equ	0xFF2
 12935                           intcon2	equ	0xFF1
 12936                           intcon3	equ	0xFF0
 12937                           indf0	equ	0xFEF
 12938                           postinc0	equ	0xFEE
 12939                           fsr0h	equ	0xFEA
 12940                           fsr0l	equ	0xFE9
 12941                           wreg	equ	0xFE8
 12942                           postdec1	equ	0xFE5
 12943                           fsr1l	equ	0xFE1
 12944                           indf2	equ	0xFDF
 12945                           postinc2	equ	0xFDE
 12946                           postdec2	equ	0xFDD
 12947                           fsr2h	equ	0xFDA
 12948                           fsr2l	equ	0xFD9
 12949                           status	equ	0xFD8
 12950                           
 12951 ;; *************** function _isdigit *****************
 12952 ;; Defined at:
 12953 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 12954 ;; Parameters:    Size  Location     Type
 12955 ;;  c               1    wreg     unsigned char 
 12956 ;; Auto vars:     Size  Location     Type
 12957 ;;  c               1    2[BANK0 ] unsigned char 
 12958 ;; Return value:  Size  Location     Type
 12959 ;;		None               void
 12960 ;; Registers used:
 12961 ;;		wreg, status,2, status,0
 12962 ;; Tracked objects:
 12963 ;;		On entry : 0/0
 12964 ;;		On exit  : 0/0
 12965 ;;		Unchanged: 0/0
 12966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12968 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12969 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12970 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12971 ;;Total ram usage:        3 bytes
 12972 ;; Hardware stack levels used:    1
 12973 ;; Hardware stack levels required when called:    7
 12974 ;; This function calls:
 12975 ;;		Nothing
 12976 ;; This function is called by:
 12977 ;;		_printf
 12978 ;; This function uses a non-reentrant model
 12979 ;;
 12980                           
 12981                           	psect	text46
 12982  003E5A                     __ptext46:
 12983                           	opt stack 0
 12984  003E5A                     _isdigit:
 12985                           	opt stack 19
 12986                           
 12987                           ;incstack = 0
 12988                           ;isdigit@c stored from wreg
 12989  003E5A  0100               	movlb	0	; () banked
 12990  003E5C  6F82               	movwf	isdigit@c& (0+255),b
 12991  003E5E  0E00               	movlw	0
 12992  003E60  0100               	movlb	0	; () banked
 12993  003E62  6F81               	movwf	_isdigit$1852& (0+255),b
 12994                           
 12995                           ; BSR set to: 0
 12996  003E64  0E3A               	movlw	58
 12997  003E66  0100               	movlb	0	; () banked
 12998  003E68  6182               	cpfslt	isdigit@c& (0+255),b
 12999  003E6A  D007               	goto	l4911
 13000                           
 13001                           ; BSR set to: 0
 13002  003E6C  0E2F               	movlw	47
 13003  003E6E  0100               	movlb	0	; () banked
 13004  003E70  6582               	cpfsgt	isdigit@c& (0+255),b
 13005  003E72  D003               	goto	l4911
 13006                           
 13007                           ; BSR set to: 0
 13008  003E74  0E01               	movlw	1
 13009  003E76  0100               	movlb	0	; () banked
 13010  003E78  6F81               	movwf	_isdigit$1852& (0+255),b
 13011  003E7A                     l4911:
 13012                           
 13013                           ; BSR set to: 0
 13014  003E7A  C081  F080         	movff	_isdigit$1852,??_isdigit
 13015  003E7E  0100               	movlb	0	; () banked
 13016  003E80  3180               	rrcf	??_isdigit& (0+255),w,b
 13017  003E82  0012               	return	
 13018  003E84                     __end_of_isdigit:
 13019                           	opt stack 0
 13020                           tblptru	equ	0xFF8
 13021                           tblptrh	equ	0xFF7
 13022                           tblptrl	equ	0xFF6
 13023                           tablat	equ	0xFF5
 13024                           prodh	equ	0xFF4
 13025                           prodl	equ	0xFF3
 13026                           intcon	equ	0xFF2
 13027                           intcon2	equ	0xFF1
 13028                           intcon3	equ	0xFF0
 13029                           indf0	equ	0xFEF
 13030                           postinc0	equ	0xFEE
 13031                           fsr0h	equ	0xFEA
 13032                           fsr0l	equ	0xFE9
 13033                           wreg	equ	0xFE8
 13034                           postdec1	equ	0xFE5
 13035                           fsr1l	equ	0xFE1
 13036                           indf2	equ	0xFDF
 13037                           postinc2	equ	0xFDE
 13038                           postdec2	equ	0xFDD
 13039                           fsr2h	equ	0xFDA
 13040                           fsr2l	equ	0xFD9
 13041                           status	equ	0xFD8
 13042                           
 13043 ;; *************** function ___wmul *****************
 13044 ;; Defined at:
 13045 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 13046 ;; Parameters:    Size  Location     Type
 13047 ;;  multiplier      2    0[BANK0 ] unsigned int 
 13048 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 13049 ;; Auto vars:     Size  Location     Type
 13050 ;;  product         2    4[BANK0 ] unsigned int 
 13051 ;; Return value:  Size  Location     Type
 13052 ;;                  2    0[BANK0 ] unsigned int 
 13053 ;; Registers used:
 13054 ;;		wreg, status,2, status,0, prodl, prodh
 13055 ;; Tracked objects:
 13056 ;;		On entry : 0/0
 13057 ;;		On exit  : 0/0
 13058 ;;		Unchanged: 0/0
 13059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13060 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13061 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13063 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13064 ;;Total ram usage:        6 bytes
 13065 ;; Hardware stack levels used:    1
 13066 ;; Hardware stack levels required when called:    7
 13067 ;; This function calls:
 13068 ;;		Nothing
 13069 ;; This function is called by:
 13070 ;;		_printf
 13071 ;; This function uses a non-reentrant model
 13072 ;;
 13073                           
 13074                           	psect	text47
 13075  003B8E                     __ptext47:
 13076                           	opt stack 0
 13077  003B8E                     ___wmul:
 13078                           	opt stack 19
 13079                           
 13080                           ; BSR set to: 0
 13081                           ;incstack = 0
 13082  003B8E  0100               	movlb	0	; () banked
 13083  003B90  5180               	movf	___wmul@multiplier& (0+255),w,b
 13084  003B92  0100               	movlb	0	; () banked
 13085  003B94  0382               	mulwf	___wmul@multiplicand& (0+255),b
 13086  003B96  CFF3 F084          	movff	prodl,___wmul@product
 13087  003B9A  CFF4 F085          	movff	prodh,___wmul@product+1
 13088  003B9E  0100               	movlb	0	; () banked
 13089  003BA0  5180               	movf	___wmul@multiplier& (0+255),w,b
 13090  003BA2  0100               	movlb	0	; () banked
 13091  003BA4  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 13092  003BA6  50F3               	movf	prodl,w,c
 13093  003BA8  0100               	movlb	0	; () banked
 13094  003BAA  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 13095  003BAC  0100               	movlb	0	; () banked
 13096  003BAE  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 13097  003BB0  0100               	movlb	0	; () banked
 13098  003BB2  0382               	mulwf	___wmul@multiplicand& (0+255),b
 13099  003BB4  50F3               	movf	prodl,w,c
 13100  003BB6  0100               	movlb	0	; () banked
 13101  003BB8  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 13102                           
 13103                           ; BSR set to: 0
 13104  003BBA  C084  F080         	movff	___wmul@product,?___wmul
 13105  003BBE  C085  F081         	movff	___wmul@product+1,?___wmul+1
 13106  003BC2  0012               	return	
 13107  003BC4                     __end_of___wmul:
 13108                           	opt stack 0
 13109                           tblptru	equ	0xFF8
 13110                           tblptrh	equ	0xFF7
 13111                           tblptrl	equ	0xFF6
 13112                           tablat	equ	0xFF5
 13113                           prodh	equ	0xFF4
 13114                           prodl	equ	0xFF3
 13115                           intcon	equ	0xFF2
 13116                           intcon2	equ	0xFF1
 13117                           intcon3	equ	0xFF0
 13118                           indf0	equ	0xFEF
 13119                           postinc0	equ	0xFEE
 13120                           fsr0h	equ	0xFEA
 13121                           fsr0l	equ	0xFE9
 13122                           wreg	equ	0xFE8
 13123                           postdec1	equ	0xFE5
 13124                           fsr1l	equ	0xFE1
 13125                           indf2	equ	0xFDF
 13126                           postinc2	equ	0xFDE
 13127                           postdec2	equ	0xFDD
 13128                           fsr2h	equ	0xFDA
 13129                           fsr2l	equ	0xFD9
 13130                           status	equ	0xFD8
 13131                           
 13132 ;; *************** function ___lwmod *****************
 13133 ;; Defined at:
 13134 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 13135 ;; Parameters:    Size  Location     Type
 13136 ;;  dividend        2    7[BANK0 ] unsigned int 
 13137 ;;  divisor         2    9[BANK0 ] unsigned int 
 13138 ;; Auto vars:     Size  Location     Type
 13139 ;;  counter         1   11[BANK0 ] unsigned char 
 13140 ;; Return value:  Size  Location     Type
 13141 ;;                  2    7[BANK0 ] unsigned int 
 13142 ;; Registers used:
 13143 ;;		wreg, status,2, status,0
 13144 ;; Tracked objects:
 13145 ;;		On entry : 0/0
 13146 ;;		On exit  : 0/0
 13147 ;;		Unchanged: 0/0
 13148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13149 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13150 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13152 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13153 ;;Total ram usage:        5 bytes
 13154 ;; Hardware stack levels used:    1
 13155 ;; Hardware stack levels required when called:    7
 13156 ;; This function calls:
 13157 ;;		Nothing
 13158 ;; This function is called by:
 13159 ;;		_printf
 13160 ;; This function uses a non-reentrant model
 13161 ;;
 13162                           
 13163                           	psect	text48
 13164  0036B0                     __ptext48:
 13165                           	opt stack 0
 13166  0036B0                     ___lwmod:
 13167                           	opt stack 19
 13168                           
 13169                           ; BSR set to: 0
 13170                           ;incstack = 0
 13171  0036B0  0100               	movlb	0	; () banked
 13172  0036B2  5189               	movf	___lwmod@divisor& (0+255),w,b
 13173  0036B4  0100               	movlb	0	; () banked
 13174  0036B6  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 13175  0036B8  B4D8               	btfsc	status,2,c
 13176  0036BA  D026               	goto	l1624
 13177                           
 13178                           ; BSR set to: 0
 13179  0036BC  0E01               	movlw	1
 13180  0036BE  0100               	movlb	0	; () banked
 13181  0036C0  6F8B               	movwf	___lwmod@counter& (0+255),b
 13182  0036C2  D006               	goto	l4949
 13183  0036C4                     l4947:
 13184                           
 13185                           ; BSR set to: 0
 13186  0036C4  0100               	movlb	0	; () banked
 13187  0036C6  90D8               	bcf	status,0,c
 13188  0036C8  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 13189  0036CA  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 13190  0036CC  0100               	movlb	0	; () banked
 13191  0036CE  2B8B               	incf	___lwmod@counter& (0+255),f,b
 13192  0036D0                     l4949:
 13193                           
 13194                           ; BSR set to: 0
 13195  0036D0  0100               	movlb	0	; () banked
 13196  0036D2  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 13197  0036D4  D7F7               	goto	l4947
 13198  0036D6                     l4951:
 13199                           
 13200                           ; BSR set to: 0
 13201  0036D6  0100               	movlb	0	; () banked
 13202  0036D8  5189               	movf	___lwmod@divisor& (0+255),w,b
 13203  0036DA  0100               	movlb	0	; () banked
 13204  0036DC  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 13205  0036DE  0100               	movlb	0	; () banked
 13206  0036E0  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 13207  0036E2  0100               	movlb	0	; () banked
 13208  0036E4  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 13209  0036E6  A0D8               	btfss	status,0,c
 13210  0036E8  D008               	goto	l4955
 13211                           
 13212                           ; BSR set to: 0
 13213  0036EA  0100               	movlb	0	; () banked
 13214  0036EC  5189               	movf	___lwmod@divisor& (0+255),w,b
 13215  0036EE  0100               	movlb	0	; () banked
 13216  0036F0  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 13217  0036F2  0100               	movlb	0	; () banked
 13218  0036F4  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 13219  0036F6  0100               	movlb	0	; () banked
 13220  0036F8  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 13221  0036FA                     l4955:
 13222                           
 13223                           ; BSR set to: 0
 13224  0036FA  0100               	movlb	0	; () banked
 13225  0036FC  90D8               	bcf	status,0,c
 13226  0036FE  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 13227  003700  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 13228                           
 13229                           ; BSR set to: 0
 13230  003702  0100               	movlb	0	; () banked
 13231  003704  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 13232  003706  D7E7               	goto	l4951
 13233  003708                     l1624:
 13234                           
 13235                           ; BSR set to: 0
 13236  003708  C087  F087         	movff	___lwmod@dividend,?___lwmod
 13237  00370C  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 13238                           
 13239                           ; BSR set to: 0
 13240  003710  0012               	return		;funcret
 13241  003712                     __end_of___lwmod:
 13242                           	opt stack 0
 13243                           tblptru	equ	0xFF8
 13244                           tblptrh	equ	0xFF7
 13245                           tblptrl	equ	0xFF6
 13246                           tablat	equ	0xFF5
 13247                           prodh	equ	0xFF4
 13248                           prodl	equ	0xFF3
 13249                           intcon	equ	0xFF2
 13250                           intcon2	equ	0xFF1
 13251                           intcon3	equ	0xFF0
 13252                           indf0	equ	0xFEF
 13253                           postinc0	equ	0xFEE
 13254                           fsr0h	equ	0xFEA
 13255                           fsr0l	equ	0xFE9
 13256                           wreg	equ	0xFE8
 13257                           postdec1	equ	0xFE5
 13258                           fsr1l	equ	0xFE1
 13259                           indf2	equ	0xFDF
 13260                           postinc2	equ	0xFDE
 13261                           postdec2	equ	0xFDD
 13262                           fsr2h	equ	0xFDA
 13263                           fsr2l	equ	0xFD9
 13264                           status	equ	0xFD8
 13265                           
 13266 ;; *************** function ___lwdiv *****************
 13267 ;; Defined at:
 13268 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 13269 ;; Parameters:    Size  Location     Type
 13270 ;;  dividend        2    0[BANK0 ] unsigned int 
 13271 ;;  divisor         2    2[BANK0 ] unsigned int 
 13272 ;; Auto vars:     Size  Location     Type
 13273 ;;  quotient        2    4[BANK0 ] unsigned int 
 13274 ;;  counter         1    6[BANK0 ] unsigned char 
 13275 ;; Return value:  Size  Location     Type
 13276 ;;                  2    0[BANK0 ] unsigned int 
 13277 ;; Registers used:
 13278 ;;		wreg, status,2, status,0
 13279 ;; Tracked objects:
 13280 ;;		On entry : 0/0
 13281 ;;		On exit  : 0/0
 13282 ;;		Unchanged: 0/0
 13283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13284 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13285 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13287 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13288 ;;Total ram usage:        7 bytes
 13289 ;; Hardware stack levels used:    1
 13290 ;; Hardware stack levels required when called:    7
 13291 ;; This function calls:
 13292 ;;		Nothing
 13293 ;; This function is called by:
 13294 ;;		_printf
 13295 ;; This function uses a non-reentrant model
 13296 ;;
 13297                           
 13298                           	psect	text49
 13299  00347E                     __ptext49:
 13300                           	opt stack 0
 13301  00347E                     ___lwdiv:
 13302                           	opt stack 19
 13303                           
 13304                           ; BSR set to: 0
 13305                           ;incstack = 0
 13306  00347E  0E00               	movlw	0
 13307  003480  0100               	movlb	0	; () banked
 13308  003482  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 13309  003484  0E00               	movlw	0
 13310  003486  6F84               	movwf	___lwdiv@quotient& (0+255),b
 13311                           
 13312                           ; BSR set to: 0
 13313  003488  0100               	movlb	0	; () banked
 13314  00348A  5182               	movf	___lwdiv@divisor& (0+255),w,b
 13315  00348C  0100               	movlb	0	; () banked
 13316  00348E  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 13317  003490  B4D8               	btfsc	status,2,c
 13318  003492  D02C               	goto	l1614
 13319                           
 13320                           ; BSR set to: 0
 13321  003494  0E01               	movlw	1
 13322  003496  0100               	movlb	0	; () banked
 13323  003498  6F86               	movwf	___lwdiv@counter& (0+255),b
 13324  00349A  D006               	goto	l4929
 13325  00349C                     l4927:
 13326                           
 13327                           ; BSR set to: 0
 13328  00349C  0100               	movlb	0	; () banked
 13329  00349E  90D8               	bcf	status,0,c
 13330  0034A0  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 13331  0034A2  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 13332  0034A4  0100               	movlb	0	; () banked
 13333  0034A6  2B86               	incf	___lwdiv@counter& (0+255),f,b
 13334  0034A8                     l4929:
 13335                           
 13336                           ; BSR set to: 0
 13337  0034A8  0100               	movlb	0	; () banked
 13338  0034AA  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 13339  0034AC  D7F7               	goto	l4927
 13340  0034AE                     l4931:
 13341                           
 13342                           ; BSR set to: 0
 13343  0034AE  0100               	movlb	0	; () banked
 13344  0034B0  90D8               	bcf	status,0,c
 13345  0034B2  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 13346  0034B4  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 13347                           
 13348                           ; BSR set to: 0
 13349  0034B6  0100               	movlb	0	; () banked
 13350  0034B8  5182               	movf	___lwdiv@divisor& (0+255),w,b
 13351  0034BA  0100               	movlb	0	; () banked
 13352  0034BC  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 13353  0034BE  0100               	movlb	0	; () banked
 13354  0034C0  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 13355  0034C2  0100               	movlb	0	; () banked
 13356  0034C4  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 13357  0034C6  A0D8               	btfss	status,0,c
 13358  0034C8  D00A               	goto	l4939
 13359                           
 13360                           ; BSR set to: 0
 13361  0034CA  0100               	movlb	0	; () banked
 13362  0034CC  5182               	movf	___lwdiv@divisor& (0+255),w,b
 13363  0034CE  0100               	movlb	0	; () banked
 13364  0034D0  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 13365  0034D2  0100               	movlb	0	; () banked
 13366  0034D4  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 13367  0034D6  0100               	movlb	0	; () banked
 13368  0034D8  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 13369                           
 13370                           ; BSR set to: 0
 13371  0034DA  0100               	movlb	0	; () banked
 13372  0034DC  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 13373  0034DE                     l4939:
 13374                           
 13375                           ; BSR set to: 0
 13376  0034DE  0100               	movlb	0	; () banked
 13377  0034E0  90D8               	bcf	status,0,c
 13378  0034E2  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 13379  0034E4  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 13380                           
 13381                           ; BSR set to: 0
 13382  0034E6  0100               	movlb	0	; () banked
 13383  0034E8  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 13384  0034EA  D7E1               	goto	l4931
 13385  0034EC                     l1614:
 13386                           
 13387                           ; BSR set to: 0
 13388  0034EC  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 13389  0034F0  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 13390                           
 13391                           ; BSR set to: 0
 13392  0034F4  0012               	return		;funcret
 13393  0034F6                     __end_of___lwdiv:
 13394                           	opt stack 0
 13395                           tblptru	equ	0xFF8
 13396                           tblptrh	equ	0xFF7
 13397                           tblptrl	equ	0xFF6
 13398                           tablat	equ	0xFF5
 13399                           prodh	equ	0xFF4
 13400                           prodl	equ	0xFF3
 13401                           intcon	equ	0xFF2
 13402                           intcon2	equ	0xFF1
 13403                           intcon3	equ	0xFF0
 13404                           indf0	equ	0xFEF
 13405                           postinc0	equ	0xFEE
 13406                           fsr0h	equ	0xFEA
 13407                           fsr0l	equ	0xFE9
 13408                           wreg	equ	0xFE8
 13409                           postdec1	equ	0xFE5
 13410                           fsr1l	equ	0xFE1
 13411                           indf2	equ	0xFDF
 13412                           postinc2	equ	0xFDE
 13413                           postdec2	equ	0xFDD
 13414                           fsr2h	equ	0xFDA
 13415                           fsr2l	equ	0xFD9
 13416                           status	equ	0xFD8
 13417                           
 13418 ;; *************** function _lcdInst *****************
 13419 ;; Defined at:
 13420 ;;		line 15 in file "lcd.c"
 13421 ;; Parameters:    Size  Location     Type
 13422 ;;  data            1    wreg     unsigned char 
 13423 ;; Auto vars:     Size  Location     Type
 13424 ;;  data            1    2[BANK0 ] unsigned char 
 13425 ;; Return value:  Size  Location     Type
 13426 ;;                  1    wreg      void 
 13427 ;; Registers used:
 13428 ;;		wreg, status,2, status,0, cstack
 13429 ;; Tracked objects:
 13430 ;;		On entry : 0/0
 13431 ;;		On exit  : 0/0
 13432 ;;		Unchanged: 0/0
 13433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13435 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13437 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13438 ;;Total ram usage:        1 bytes
 13439 ;; Hardware stack levels used:    1
 13440 ;; Hardware stack levels required when called:    8
 13441 ;; This function calls:
 13442 ;;		_lcdNibble
 13443 ;; This function is called by:
 13444 ;;		_UI
 13445 ;;		_change_state_to_menu_start
 13446 ;;		_change_state_to_menu_12
 13447 ;;		_change_state_to_menu_22
 13448 ;;		_initLCD
 13449 ;;		_printRTC
 13450 ;;		_Loading
 13451 ;;		_EEPROM_write
 13452 ;;		_Test
 13453 ;;		_algorithmTest
 13454 ;;		_sensorTest
 13455 ;;		_actuatorTest
 13456 ;;		_PortTestA5
 13457 ;; This function uses a non-reentrant model
 13458 ;;
 13459                           
 13460                           	psect	text50
 13461  00401C                     __ptext50:
 13462                           	opt stack 0
 13463  00401C                     _lcdInst:
 13464                           	opt stack 20
 13465                           
 13466                           ; BSR set to: 0
 13467                           ;incstack = 0
 13468                           ;lcdInst@data stored from wreg
 13469  00401C  0100               	movlb	0	; () banked
 13470  00401E  6F82               	movwf	lcdInst@data& (0+255),b
 13471                           
 13472                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 13473  004020  948C               	bcf	3980,2,c	;volatile
 13474                           
 13475                           ;lcd.c: 17: lcdNibble(data);
 13476  004022  0100               	movlb	0	; () banked
 13477  004024  5182               	movf	lcdInst@data& (0+255),w,b
 13478  004026  EC24  F01B         	call	_lcdNibble
 13479  00402A  0012               	return		;funcret
 13480  00402C                     __end_of_lcdInst:
 13481                           	opt stack 0
 13482                           tblptru	equ	0xFF8
 13483                           tblptrh	equ	0xFF7
 13484                           tblptrl	equ	0xFF6
 13485                           tablat	equ	0xFF5
 13486                           prodh	equ	0xFF4
 13487                           prodl	equ	0xFF3
 13488                           intcon	equ	0xFF2
 13489                           intcon2	equ	0xFF1
 13490                           intcon3	equ	0xFF0
 13491                           indf0	equ	0xFEF
 13492                           postinc0	equ	0xFEE
 13493                           fsr0h	equ	0xFEA
 13494                           fsr0l	equ	0xFE9
 13495                           wreg	equ	0xFE8
 13496                           postdec1	equ	0xFE5
 13497                           fsr1l	equ	0xFE1
 13498                           indf2	equ	0xFDF
 13499                           postinc2	equ	0xFDE
 13500                           postdec2	equ	0xFDD
 13501                           fsr2h	equ	0xFDA
 13502                           fsr2l	equ	0xFD9
 13503                           status	equ	0xFD8
 13504                           
 13505 ;; *************** function _lcdNibble *****************
 13506 ;; Defined at:
 13507 ;;		line 25 in file "lcd.c"
 13508 ;; Parameters:    Size  Location     Type
 13509 ;;  data            1    wreg     unsigned char 
 13510 ;; Auto vars:     Size  Location     Type
 13511 ;;  data            1    1[BANK0 ] unsigned char 
 13512 ;;  temp            1    0[BANK0 ] unsigned char 
 13513 ;; Return value:  Size  Location     Type
 13514 ;;                  1    wreg      void 
 13515 ;; Registers used:
 13516 ;;		wreg, status,2, status,0
 13517 ;; Tracked objects:
 13518 ;;		On entry : 0/0
 13519 ;;		On exit  : 0/0
 13520 ;;		Unchanged: 0/0
 13521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13523 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13525 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13526 ;;Total ram usage:        2 bytes
 13527 ;; Hardware stack levels used:    1
 13528 ;; Hardware stack levels required when called:    7
 13529 ;; This function calls:
 13530 ;;		Nothing
 13531 ;; This function is called by:
 13532 ;;		_lcdInst
 13533 ;;		_putch
 13534 ;; This function uses a non-reentrant model
 13535 ;;
 13536                           
 13537                           	psect	text51
 13538  003648                     __ptext51:
 13539                           	opt stack 0
 13540  003648                     _lcdNibble:
 13541                           	opt stack 20
 13542                           
 13543                           ;incstack = 0
 13544                           ;lcdNibble@data stored from wreg
 13545  003648  0100               	movlb	0	; () banked
 13546  00364A  6F81               	movwf	lcdNibble@data& (0+255),b
 13547                           
 13548                           ;lcd.c: 27: char temp = data & 0xF0;
 13549  00364C  0100               	movlb	0	; () banked
 13550  00364E  5181               	movf	lcdNibble@data& (0+255),w,b
 13551  003650  0BF0               	andlw	240
 13552  003652  0100               	movlb	0	; () banked
 13553  003654  6F80               	movwf	lcdNibble@temp& (0+255),b
 13554                           
 13555                           ;lcd.c: 28: LATD = LATD & 0x0F;
 13556  003656  508C               	movf	3980,w,c	;volatile
 13557  003658  0B0F               	andlw	15
 13558  00365A  6E8C               	movwf	3980,c	;volatile
 13559                           
 13560                           ;lcd.c: 29: LATD = temp | LATD;
 13561  00365C  0100               	movlb	0	; () banked
 13562  00365E  5180               	movf	lcdNibble@temp& (0+255),w,b
 13563  003660  108C               	iorwf	3980,w,c	;volatile
 13564  003662  6E8C               	movwf	3980,c	;volatile
 13565                           
 13566                           ; BSR set to: 0
 13567                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 13568  003664  868C               	bsf	3980,3,c	;volatile
 13569                           
 13570                           ; BSR set to: 0
 13571                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13572  003666  0E42               	movlw	66
 13573  003668                     u7347:
 13574  003668  2EE8               	decfsz	wreg,f,c
 13575  00366A  D7FE               	bra	u7347
 13576  00366C  D000               	nop2	
 13577                           
 13578                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 13579  00366E  968C               	bcf	3980,3,c	;volatile
 13580                           
 13581                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13582  003670  0E42               	movlw	66
 13583  003672                     u7357:
 13584  003672  2EE8               	decfsz	wreg,f,c
 13585  003674  D7FE               	bra	u7357
 13586  003676  D000               	nop2	
 13587                           
 13588                           ;lcd.c: 36: data = data << 4;
 13589  003678  0100               	movlb	0	; () banked
 13590  00367A  3981               	swapf	lcdNibble@data& (0+255),w,b
 13591  00367C  0BF0               	andlw	240
 13592  00367E  0100               	movlb	0	; () banked
 13593  003680  6F81               	movwf	lcdNibble@data& (0+255),b
 13594                           
 13595                           ;lcd.c: 38: temp = data & 0xF0;
 13596  003682  0100               	movlb	0	; () banked
 13597  003684  5181               	movf	lcdNibble@data& (0+255),w,b
 13598  003686  0BF0               	andlw	240
 13599  003688  0100               	movlb	0	; () banked
 13600  00368A  6F80               	movwf	lcdNibble@temp& (0+255),b
 13601                           
 13602                           ;lcd.c: 39: LATD = LATD & 0x0F;
 13603  00368C  508C               	movf	3980,w,c	;volatile
 13604  00368E  0B0F               	andlw	15
 13605  003690  6E8C               	movwf	3980,c	;volatile
 13606                           
 13607                           ;lcd.c: 40: LATD = temp | LATD;
 13608  003692  0100               	movlb	0	; () banked
 13609  003694  5180               	movf	lcdNibble@temp& (0+255),w,b
 13610  003696  108C               	iorwf	3980,w,c	;volatile
 13611  003698  6E8C               	movwf	3980,c	;volatile
 13612                           
 13613                           ; BSR set to: 0
 13614                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 13615  00369A  868C               	bsf	3980,3,c	;volatile
 13616                           
 13617                           ; BSR set to: 0
 13618                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13619  00369C  0E42               	movlw	66
 13620  00369E                     u7367:
 13621  00369E  2EE8               	decfsz	wreg,f,c
 13622  0036A0  D7FE               	bra	u7367
 13623  0036A2  D000               	nop2	
 13624                           
 13625                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 13626  0036A4  968C               	bcf	3980,3,c	;volatile
 13627                           
 13628                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13629  0036A6  0E42               	movlw	66
 13630  0036A8                     u7377:
 13631  0036A8  2EE8               	decfsz	wreg,f,c
 13632  0036AA  D7FE               	bra	u7377
 13633  0036AC  D000               	nop2	
 13634  0036AE  0012               	return		;funcret
 13635  0036B0                     __end_of_lcdNibble:
 13636                           	opt stack 0
 13637                           tblptru	equ	0xFF8
 13638                           tblptrh	equ	0xFF7
 13639                           tblptrl	equ	0xFF6
 13640                           tablat	equ	0xFF5
 13641                           prodh	equ	0xFF4
 13642                           prodl	equ	0xFF3
 13643                           intcon	equ	0xFF2
 13644                           intcon2	equ	0xFF1
 13645                           intcon3	equ	0xFF0
 13646                           indf0	equ	0xFEF
 13647                           postinc0	equ	0xFEE
 13648                           fsr0h	equ	0xFEA
 13649                           fsr0l	equ	0xFE9
 13650                           wreg	equ	0xFE8
 13651                           postdec1	equ	0xFE5
 13652                           fsr1l	equ	0xFE1
 13653                           indf2	equ	0xFDF
 13654                           postinc2	equ	0xFDE
 13655                           postdec2	equ	0xFDD
 13656                           fsr2h	equ	0xFDA
 13657                           fsr2l	equ	0xFD9
 13658                           status	equ	0xFD8
 13659                           
 13660 ;; *************** function _EEPROMTest *****************
 13661 ;; Defined at:
 13662 ;;		line 346 in file "Test.c"
 13663 ;; Parameters:    Size  Location     Type
 13664 ;;		None
 13665 ;; Auto vars:     Size  Location     Type
 13666 ;;		None
 13667 ;; Return value:  Size  Location     Type
 13668 ;;                  1    wreg      void 
 13669 ;; Registers used:
 13670 ;;		None
 13671 ;; Tracked objects:
 13672 ;;		On entry : 0/0
 13673 ;;		On exit  : 0/0
 13674 ;;		Unchanged: 0/0
 13675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13679 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13680 ;;Total ram usage:        0 bytes
 13681 ;; Hardware stack levels used:    1
 13682 ;; Hardware stack levels required when called:    7
 13683 ;; This function calls:
 13684 ;;		Nothing
 13685 ;; This function is called by:
 13686 ;;		_Test
 13687 ;; This function uses a non-reentrant model
 13688 ;;
 13689                           
 13690                           	psect	text52
 13691  004080                     __ptext52:
 13692                           	opt stack 0
 13693  004080                     _EEPROMTest:
 13694                           	opt stack 22
 13695                           
 13696                           ;incstack = 0
 13697  004080  0012               	return		;funcret
 13698  004082                     __end_of_EEPROMTest:
 13699                           	opt stack 0
 13700                           tblptru	equ	0xFF8
 13701                           tblptrh	equ	0xFF7
 13702                           tblptrl	equ	0xFF6
 13703                           tablat	equ	0xFF5
 13704                           prodh	equ	0xFF4
 13705                           prodl	equ	0xFF3
 13706                           intcon	equ	0xFF2
 13707                           intcon2	equ	0xFF1
 13708                           intcon3	equ	0xFF0
 13709                           indf0	equ	0xFEF
 13710                           postinc0	equ	0xFEE
 13711                           fsr0h	equ	0xFEA
 13712                           fsr0l	equ	0xFE9
 13713                           wreg	equ	0xFE8
 13714                           postdec1	equ	0xFE5
 13715                           fsr1l	equ	0xFE1
 13716                           indf2	equ	0xFDF
 13717                           postinc2	equ	0xFDE
 13718                           postdec2	equ	0xFDD
 13719                           fsr2h	equ	0xFDA
 13720                           fsr2l	equ	0xFD9
 13721                           status	equ	0xFD8
 13722                           
 13723 ;; *************** function _handler *****************
 13724 ;; Defined at:
 13725 ;;		line 16 in file "interruptHandler.c"
 13726 ;; Parameters:    Size  Location     Type
 13727 ;;		None
 13728 ;; Auto vars:     Size  Location     Type
 13729 ;;		None
 13730 ;; Return value:  Size  Location     Type
 13731 ;;                  1    wreg      void 
 13732 ;; Registers used:
 13733 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13734 ;; Tracked objects:
 13735 ;;		On entry : 0/0
 13736 ;;		On exit  : 0/0
 13737 ;;		Unchanged: 0/0
 13738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13741 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13742 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13743 ;;Total ram usage:       16 bytes
 13744 ;; Hardware stack levels used:    1
 13745 ;; Hardware stack levels required when called:    6
 13746 ;; This function calls:
 13747 ;;		_printSortTimer
 13748 ;;		_updateMenu
 13749 ;; This function is called by:
 13750 ;;		Interrupt level 2
 13751 ;; This function uses a non-reentrant model
 13752 ;;
 13753                           
 13754                           	psect	intcode
 13755  000008                     __pintcode:
 13756                           	opt stack 0
 13757  000008                     _handler:
 13758                           	opt stack 18
 13759                           
 13760                           ;incstack = 0
 13761  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13762  00000A  EDFC  F012         	call	int_func,f	;refresh shadow registers
 13763                           tblptru	equ	0xFF8
 13764                           tblptrh	equ	0xFF7
 13765                           tblptrl	equ	0xFF6
 13766                           tablat	equ	0xFF5
 13767                           prodh	equ	0xFF4
 13768                           prodl	equ	0xFF3
 13769                           intcon	equ	0xFF2
 13770                           intcon2	equ	0xFF1
 13771                           intcon3	equ	0xFF0
 13772                           indf0	equ	0xFEF
 13773                           postinc0	equ	0xFEE
 13774                           fsr0h	equ	0xFEA
 13775                           fsr0l	equ	0xFE9
 13776                           wreg	equ	0xFE8
 13777                           postdec1	equ	0xFE5
 13778                           fsr1l	equ	0xFE1
 13779                           indf2	equ	0xFDF
 13780                           postinc2	equ	0xFDE
 13781                           postdec2	equ	0xFDD
 13782                           fsr2h	equ	0xFDA
 13783                           fsr2l	equ	0xFD9
 13784                           status	equ	0xFD8
 13785                           
 13786                           	psect	intcode_body
 13787  0025F8                     __pintcode_body:
 13788                           	opt stack 18
 13789  0025F8                     int_func:
 13790                           	opt stack 18
 13791  0025F8  0006               	pop		; remove dummy address from shadow register refresh
 13792  0025FA  CFFA F04D          	movff	pclath,??_handler+2
 13793  0025FE  CFFB F04E          	movff	pclatu,??_handler+3
 13794  002602  CFE9 F04F          	movff	fsr0l,??_handler+4
 13795  002606  CFEA F050          	movff	fsr0h,??_handler+5
 13796  00260A  CFE1 F051          	movff	fsr1l,??_handler+6
 13797  00260E  CFE2 F052          	movff	fsr1h,??_handler+7
 13798  002612  CFD9 F053          	movff	fsr2l,??_handler+8
 13799  002616  CFDA F054          	movff	fsr2h,??_handler+9
 13800  00261A  CFF3 F055          	movff	prodl,??_handler+10
 13801  00261E  CFF4 F056          	movff	prodh,??_handler+11
 13802  002622  CFF6 F057          	movff	tblptrl,??_handler+12
 13803  002626  CFF7 F058          	movff	tblptrh,??_handler+13
 13804  00262A  CFF8 F059          	movff	tblptru,??_handler+14
 13805  00262E  CFF5 F05A          	movff	tablat,??_handler+15
 13806                           
 13807                           ;interruptHandler.c: 18: if(INT1IF){
 13808  002632  A0F0               	btfss	intcon3,0,c	;volatile
 13809  002634  D018               	goto	i2l7495
 13810                           
 13811                           ;interruptHandler.c: 19: INT1IF = 0;
 13812  002636  90F0               	bcf	intcon3,0,c	;volatile
 13813                           
 13814                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 13815  002638  0100               	movlb	0	; () banked
 13816  00263A  51FC               	movf	_machine_state& (0+255),w,b
 13817  00263C  A4D8               	btfss	status,2,c
 13818  00263E  D013               	goto	i2l7495
 13819                           
 13820                           ; BSR set to: 0
 13821                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 13822  002640  3881               	swapf	3969,w,c	;volatile
 13823  002642  0B0F               	andlw	15
 13824  002644  0B0F               	andlw	15
 13825  002646  6E4B               	movwf	??_handler& (0+255),c
 13826  002648  6A4C               	clrf	(??_handler+1)& (0+255),c
 13827  00264A  0E71               	movlw	low _keys
 13828  00264C  244B               	addwf	??_handler,w,c
 13829  00264E  6EF6               	movwf	tblptrl,c
 13830  002650  0EFB               	movlw	high _keys
 13831  002652  204C               	addwfc	??_handler+1,w,c
 13832  002654  6EF7               	movwf	tblptrh,c
 13833  002656                     	if	1	;There are 3 active tblptr bytes
 13834  002656  6AF8               	clrf	tblptru,c
 13835  002658  0E00               	movlw	low (__mediumconst shr (0+16))
 13836  00265A  22F8               	addwfc	tblptru,f,c
 13837  00265C                     	endif
 13838  00265C  0008               	tblrd		*
 13839  00265E  CFF5 F07D          	movff	tablat,_input	;volatile
 13840                           
 13841                           ; BSR set to: 0
 13842                           ;interruptHandler.c: 22: updateMenu();
 13843  002662  ECCF  F00D         	call	_updateMenu	;wreg free
 13844  002666                     i2l7495:
 13845                           
 13846                           ;interruptHandler.c: 23: }
 13847                           ;interruptHandler.c: 24: }
 13848                           ;interruptHandler.c: 27: if(TMR0IF){
 13849  002666  A4F2               	btfss	intcon,2,c	;volatile
 13850  002668  D00C               	goto	i2l7509
 13851                           
 13852                           ;interruptHandler.c: 28: TMR0IF = 0;
 13853  00266A  94F2               	bcf	intcon,2,c	;volatile
 13854                           
 13855                           ;interruptHandler.c: 29: if(machine_state == Sorting_state){
 13856  00266C  0100               	movlb	0	; () banked
 13857  00266E  05FC               	decf	_machine_state& (0+255),w,b
 13858  002670  A4D8               	btfss	status,2,c
 13859  002672  D007               	goto	i2l7509
 13860                           
 13861                           ; BSR set to: 0
 13862                           ;interruptHandler.c: 30: printSortTimer();
 13863  002674  EC4A  F010         	call	_printSortTimer	;wreg free
 13864                           
 13865                           ;interruptHandler.c: 32: TMR0H = 0b10000101;
 13866  002678  0E85               	movlw	133
 13867  00267A  6ED7               	movwf	4055,c	;volatile
 13868                           
 13869                           ;interruptHandler.c: 33: TMR0L = 0b11101110;
 13870  00267C  0EEE               	movlw	238
 13871  00267E  6ED6               	movwf	4054,c	;volatile
 13872                           
 13873                           ;interruptHandler.c: 34: TMR0ON = 1;
 13874  002680  8ED5               	bsf	4053,7,c	;volatile
 13875  002682                     i2l7509:
 13876                           
 13877                           ;interruptHandler.c: 35: }
 13878                           ;interruptHandler.c: 36: }
 13879                           ;interruptHandler.c: 39: if(TMR1IF){
 13880  002682  A09E               	btfss	3998,0,c	;volatile
 13881  002684  D024               	goto	i2l7533
 13882                           
 13883                           ;interruptHandler.c: 40: TMR1IF = 0;
 13884  002686  909E               	bcf	3998,0,c	;volatile
 13885                           
 13886                           ;interruptHandler.c: 41: TMR1ON = 0;
 13887  002688  90CD               	bcf	4045,0,c	;volatile
 13888                           
 13889                           ;interruptHandler.c: 42: if(machine_state == Sorting_state){
 13890  00268A  0100               	movlb	0	; () banked
 13891  00268C  05FC               	decf	_machine_state& (0+255),w,b
 13892  00268E  A4D8               	btfss	status,2,c
 13893  002690  D01E               	goto	i2l7533
 13894                           
 13895                           ; BSR set to: 0
 13896                           ;interruptHandler.c: 43: if(was_low_1){
 13897  002692  5079               	movf	_was_low_1,w,c	;volatile
 13898  002694  107A               	iorwf	_was_low_1+1,w,c	;volatile
 13899  002696  B4D8               	btfsc	status,2,c
 13900  002698  D00A               	goto	i2l829
 13901                           
 13902                           ; BSR set to: 0
 13903                           ;interruptHandler.c: 44: LATCbits.LATC1 = 1;
 13904  00269A  828B               	bsf	3979,1,c	;volatile
 13905                           
 13906                           ; BSR set to: 0
 13907                           ;interruptHandler.c: 45: was_low_1 = 0;
 13908  00269C  0E00               	movlw	0
 13909  00269E  6E7A               	movwf	_was_low_1+1,c	;volatile
 13910  0026A0  0E00               	movlw	0
 13911  0026A2  6E79               	movwf	_was_low_1,c	;volatile
 13912                           
 13913                           ; BSR set to: 0
 13914                           ;interruptHandler.c: 46: TMR1H = servoTimes[0];
 13915  0026A4  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 13916                           
 13917                           ; BSR set to: 0
 13918                           ;interruptHandler.c: 47: TMR1L = servoTimes[1];
 13919  0026A8  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 13920                           
 13921                           ;interruptHandler.c: 48: }
 13922  0026AC  D00F               	goto	i2l7531
 13923  0026AE                     i2l829:
 13924                           
 13925                           ; BSR set to: 0
 13926                           ;interruptHandler.c: 49: else{
 13927                           ;interruptHandler.c: 50: LATCbits.LATC1 = 0;
 13928  0026AE  928B               	bcf	3979,1,c	;volatile
 13929                           
 13930                           ; BSR set to: 0
 13931                           ;interruptHandler.c: 51: was_low_1 = 1;
 13932  0026B0  0E00               	movlw	0
 13933  0026B2  6E7A               	movwf	_was_low_1+1,c	;volatile
 13934  0026B4  0E01               	movlw	1
 13935  0026B6  6E79               	movwf	_was_low_1,c	;volatile
 13936                           
 13937                           ; BSR set to: 0
 13938                           ;interruptHandler.c: 52: TMR1H = 20000 - servoTimes[0];
 13939  0026B8  0101               	movlb	1	; () banked
 13940  0026BA  511C               	movf	_servoTimes& (0+255),w,b
 13941  0026BC  0800               	sublw	0
 13942  0026BE  0F20               	addlw	32
 13943  0026C0  6ECF               	movwf	4047,c	;volatile
 13944                           
 13945                           ; BSR set to: 1
 13946                           ;interruptHandler.c: 53: TMR1L = 20000 - servoTimes[1];
 13947  0026C2  0101               	movlb	1	; () banked
 13948  0026C4  511E               	movf	(_servoTimes+2)& (0+255),w,b
 13949  0026C6  0800               	sublw	0
 13950  0026C8  0F20               	addlw	32
 13951  0026CA  6ECE               	movwf	4046,c	;volatile
 13952  0026CC                     i2l7531:
 13953                           
 13954                           ;interruptHandler.c: 54: }
 13955                           ;interruptHandler.c: 55: TMR1ON = 1;
 13956  0026CC  80CD               	bsf	4045,0,c	;volatile
 13957  0026CE                     i2l7533:
 13958                           
 13959                           ;interruptHandler.c: 56: }
 13960                           ;interruptHandler.c: 57: }
 13961                           ;interruptHandler.c: 59: if(TMR3IF){
 13962  0026CE  A2A1               	btfss	4001,1,c	;volatile
 13963  0026D0  D024               	goto	i2l835
 13964                           
 13965                           ;interruptHandler.c: 60: TMR3IF = 0;
 13966  0026D2  92A1               	bcf	4001,1,c	;volatile
 13967                           
 13968                           ;interruptHandler.c: 61: TMR3ON = 0;
 13969  0026D4  90B1               	bcf	4017,0,c	;volatile
 13970                           
 13971                           ;interruptHandler.c: 62: if(machine_state == Sorting_state){
 13972  0026D6  0100               	movlb	0	; () banked
 13973  0026D8  05FC               	decf	_machine_state& (0+255),w,b
 13974  0026DA  A4D8               	btfss	status,2,c
 13975  0026DC  D01E               	goto	i2l835
 13976                           
 13977                           ; BSR set to: 0
 13978                           ;interruptHandler.c: 63: if(was_low_3){
 13979  0026DE  507B               	movf	_was_low_3,w,c	;volatile
 13980  0026E0  107C               	iorwf	_was_low_3+1,w,c	;volatile
 13981  0026E2  B4D8               	btfsc	status,2,c
 13982  0026E4  D00A               	goto	i2l833
 13983                           
 13984                           ; BSR set to: 0
 13985                           ;interruptHandler.c: 64: LATCbits.LATC2 = 1;
 13986  0026E6  848B               	bsf	3979,2,c	;volatile
 13987                           
 13988                           ; BSR set to: 0
 13989                           ;interruptHandler.c: 65: was_low_3 = 0;
 13990  0026E8  0E00               	movlw	0
 13991  0026EA  6E7C               	movwf	_was_low_3+1,c	;volatile
 13992  0026EC  0E00               	movlw	0
 13993  0026EE  6E7B               	movwf	_was_low_3,c	;volatile
 13994                           
 13995                           ; BSR set to: 0
 13996                           ;interruptHandler.c: 66: TMR3H = servoTimes[2];
 13997  0026F0  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 13998                           
 13999                           ; BSR set to: 0
 14000                           ;interruptHandler.c: 67: TMR3L = servoTimes[3];
 14001  0026F4  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 14002                           
 14003                           ;interruptHandler.c: 68: }
 14004  0026F8  D00F               	goto	i2l7555
 14005  0026FA                     i2l833:
 14006                           
 14007                           ; BSR set to: 0
 14008                           ;interruptHandler.c: 69: else{
 14009                           ;interruptHandler.c: 70: LATCbits.LATC2 = 0;
 14010  0026FA  948B               	bcf	3979,2,c	;volatile
 14011                           
 14012                           ; BSR set to: 0
 14013                           ;interruptHandler.c: 71: was_low_3 = 1;
 14014  0026FC  0E00               	movlw	0
 14015  0026FE  6E7C               	movwf	_was_low_3+1,c	;volatile
 14016  002700  0E01               	movlw	1
 14017  002702  6E7B               	movwf	_was_low_3,c	;volatile
 14018                           
 14019                           ; BSR set to: 0
 14020                           ;interruptHandler.c: 72: TMR3H = 20000 - servoTimes[2];
 14021  002704  0101               	movlb	1	; () banked
 14022  002706  5120               	movf	(_servoTimes+4)& (0+255),w,b
 14023  002708  0800               	sublw	0
 14024  00270A  0F20               	addlw	32
 14025  00270C  6EB3               	movwf	4019,c	;volatile
 14026                           
 14027                           ; BSR set to: 1
 14028                           ;interruptHandler.c: 73: TMR3L = 20000 - servoTimes[3];
 14029  00270E  0101               	movlb	1	; () banked
 14030  002710  5122               	movf	(_servoTimes+6)& (0+255),w,b
 14031  002712  0800               	sublw	0
 14032  002714  0F20               	addlw	32
 14033  002716  6EB2               	movwf	4018,c	;volatile
 14034  002718                     i2l7555:
 14035                           
 14036                           ;interruptHandler.c: 74: }
 14037                           ;interruptHandler.c: 75: TMR3ON = 1;
 14038  002718  80B1               	bsf	4017,0,c	;volatile
 14039  00271A                     i2l835:
 14040  00271A  C05A  FFF5         	movff	??_handler+15,tablat
 14041  00271E  C059  FFF8         	movff	??_handler+14,tblptru
 14042  002722  C058  FFF7         	movff	??_handler+13,tblptrh
 14043  002726  C057  FFF6         	movff	??_handler+12,tblptrl
 14044  00272A  C056  FFF4         	movff	??_handler+11,prodh
 14045  00272E  C055  FFF3         	movff	??_handler+10,prodl
 14046  002732  C054  FFDA         	movff	??_handler+9,fsr2h
 14047  002736  C053  FFD9         	movff	??_handler+8,fsr2l
 14048  00273A  C052  FFE2         	movff	??_handler+7,fsr1h
 14049  00273E  C051  FFE1         	movff	??_handler+6,fsr1l
 14050  002742  C050  FFEA         	movff	??_handler+5,fsr0h
 14051  002746  C04F  FFE9         	movff	??_handler+4,fsr0l
 14052  00274A  C04E  FFFB         	movff	??_handler+3,pclatu
 14053  00274E  C04D  FFFA         	movff	??_handler+2,pclath
 14054  002752  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14055  002754  0011               	retfie		f
 14056  002756                     __end_of_handler:
 14057                           	opt stack 0
 14058                           pclatu	equ	0xFFB
 14059                           pclath	equ	0xFFA
 14060                           tblptru	equ	0xFF8
 14061                           tblptrh	equ	0xFF7
 14062                           tblptrl	equ	0xFF6
 14063                           tablat	equ	0xFF5
 14064                           prodh	equ	0xFF4
 14065                           prodl	equ	0xFF3
 14066                           intcon	equ	0xFF2
 14067                           intcon2	equ	0xFF1
 14068                           intcon3	equ	0xFF0
 14069                           indf0	equ	0xFEF
 14070                           postinc0	equ	0xFEE
 14071                           fsr0h	equ	0xFEA
 14072                           fsr0l	equ	0xFE9
 14073                           wreg	equ	0xFE8
 14074                           postdec1	equ	0xFE5
 14075                           fsr1h	equ	0xFE2
 14076                           fsr1l	equ	0xFE1
 14077                           indf2	equ	0xFDF
 14078                           postinc2	equ	0xFDE
 14079                           postdec2	equ	0xFDD
 14080                           fsr2h	equ	0xFDA
 14081                           fsr2l	equ	0xFD9
 14082                           status	equ	0xFD8
 14083                           
 14084 ;; *************** function _updateMenu *****************
 14085 ;; Defined at:
 14086 ;;		line 211 in file "UI.c"
 14087 ;; Parameters:    Size  Location     Type
 14088 ;;		None
 14089 ;; Auto vars:     Size  Location     Type
 14090 ;;		None
 14091 ;; Return value:  Size  Location     Type
 14092 ;;                  1    wreg      void 
 14093 ;; Registers used:
 14094 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14095 ;; Tracked objects:
 14096 ;;		On entry : 0/0
 14097 ;;		On exit  : 0/0
 14098 ;;		Unchanged: 0/0
 14099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14102 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14103 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14104 ;;Total ram usage:        2 bytes
 14105 ;; Hardware stack levels used:    1
 14106 ;; Hardware stack levels required when called:    5
 14107 ;; This function calls:
 14108 ;;		_change_state_to_logs_11
 14109 ;;		_change_state_to_logs_12
 14110 ;;		_change_state_to_logs_22
 14111 ;;		_change_state_to_logs_23
 14112 ;;		_change_state_to_logs_33
 14113 ;;		_change_state_to_logs_34
 14114 ;;		_change_state_to_menu_11
 14115 ;;		_change_state_to_menu_23
 14116 ;;		_dispLogs
 14117 ;;		_inputHandler
 14118 ;;		i2_change_state_to_menu_12
 14119 ;;		i2_change_state_to_menu_22
 14120 ;;		i2_change_state_to_menu_start
 14121 ;; This function is called by:
 14122 ;;		_handler
 14123 ;; This function uses a non-reentrant model
 14124 ;;
 14125                           
 14126                           	psect	text54
 14127  001B9E                     __ptext54:
 14128                           	opt stack 0
 14129  001B9E                     _updateMenu:
 14130                           	opt stack 18
 14131                           
 14132                           ;UI.c: 212: up = 0; down = 0; enter = 0; back = 0;
 14133                           
 14134                           ;incstack = 0
 14135  001B9E  0E00               	movlw	0
 14136  001BA0  6E78               	movwf	_up+1,c
 14137  001BA2  0E00               	movlw	0
 14138  001BA4  6E77               	movwf	_up,c
 14139  001BA6  0E00               	movlw	0
 14140  001BA8  6E6A               	movwf	_down+1,c
 14141  001BAA  0E00               	movlw	0
 14142  001BAC  6E69               	movwf	_down,c
 14143  001BAE  0E00               	movlw	0
 14144  001BB0  6E6C               	movwf	_enter+1,c
 14145  001BB2  0E00               	movlw	0
 14146  001BB4  6E6B               	movwf	_enter,c
 14147  001BB6  0E00               	movlw	0
 14148  001BB8  6E5C               	movwf	_back+1,c
 14149  001BBA  0E00               	movlw	0
 14150  001BBC  6E5B               	movwf	_back,c
 14151                           
 14152                           ;UI.c: 213: (INTCONbits.GIE = 0);
 14153  001BBE  9EF2               	bcf	intcon,7,c	;volatile
 14154                           
 14155                           ;UI.c: 215: if (inputHandler()
 14156                           ;UI.c: 218: ){
 14157  001BC0  EC43  F011         	call	_inputHandler	;wreg free
 14158  001BC4  502A               	movf	?_inputHandler,w,c
 14159  001BC6  102B               	iorwf	?_inputHandler+1,w,c
 14160  001BC8  A4D8               	btfss	status,2,c
 14161  001BCA  D112               	goto	i2l7245
 14162  001BCC  D146               	goto	i2l254
 14163  001BCE                     i2l7097:
 14164                           
 14165                           ;UI.c: 222: change_state_to_menu_11();
 14166  001BCE  EC43  F01E         	call	_change_state_to_menu_11	;wreg free
 14167                           
 14168                           ;UI.c: 223: break;
 14169  001BD2  D143               	goto	i2l254
 14170  001BD4                     i2l7099:
 14171                           
 14172                           ;UI.c: 226: if(up){
 14173  001BD4  5077               	movf	_up,w,c
 14174  001BD6  1078               	iorwf	_up+1,w,c
 14175  001BD8  B4D8               	btfsc	status,2,c
 14176  001BDA  D003               	goto	i2l7103
 14177                           
 14178                           ;UI.c: 227: change_state_to_menu_23();
 14179  001BDC  EC2B  F01E         	call	_change_state_to_menu_23	;wreg free
 14180                           
 14181                           ;UI.c: 228: }
 14182  001BE0  D13C               	goto	i2l254
 14183  001BE2                     i2l7103:
 14184                           
 14185                           ;UI.c: 229: else if(down){
 14186  001BE2  5069               	movf	_down,w,c
 14187  001BE4  106A               	iorwf	_down+1,w,c
 14188  001BE6  B4D8               	btfsc	status,2,c
 14189  001BE8  D003               	goto	i2l7107
 14190                           
 14191                           ;UI.c: 230: change_state_to_menu_12();
 14192  001BEA  EC13  F01E         	call	i2_change_state_to_menu_12	;wreg free
 14193                           
 14194                           ;UI.c: 231: }
 14195  001BEE  D135               	goto	i2l254
 14196  001BF0                     i2l7107:
 14197                           
 14198                           ;UI.c: 232: else if(enter){
 14199  001BF0  506B               	movf	_enter,w,c
 14200  001BF2  106C               	iorwf	_enter+1,w,c
 14201  001BF4  B4D8               	btfsc	status,2,c
 14202  001BF6  D131               	goto	i2l254
 14203                           
 14204                           ;UI.c: 233: change_state_to_menu_start();
 14205  001BF8  EC42  F01F         	call	i2_change_state_to_menu_start	;wreg free
 14206                           
 14207                           ;UI.c: 234: }
 14208                           ;UI.c: 235: break;
 14209  001BFC  D12E               	goto	i2l254
 14210  001BFE                     i2l7111:
 14211                           
 14212                           ;UI.c: 238: if(up){
 14213  001BFE  5077               	movf	_up,w,c
 14214  001C00  1078               	iorwf	_up+1,w,c
 14215  001C02  B4D8               	btfsc	status,2,c
 14216  001C04  D003               	goto	i2l7115
 14217                           
 14218                           ;UI.c: 239: change_state_to_menu_11();
 14219  001C06  EC43  F01E         	call	_change_state_to_menu_11	;wreg free
 14220                           
 14221                           ;UI.c: 240: }
 14222  001C0A  D127               	goto	i2l254
 14223  001C0C                     i2l7115:
 14224                           
 14225                           ;UI.c: 241: else if(down){
 14226  001C0C  5069               	movf	_down,w,c
 14227  001C0E  106A               	iorwf	_down+1,w,c
 14228  001C10  B4D8               	btfsc	status,2,c
 14229  001C12  D011               	goto	i2l7131
 14230                           
 14231                           ;UI.c: 242: change_state_to_menu_23();
 14232  001C14  EC2B  F01E         	call	_change_state_to_menu_23	;wreg free
 14233                           
 14234                           ;UI.c: 243: }
 14235  001C18  D120               	goto	i2l254
 14236  001C1A                     i2l7123:
 14237                           
 14238                           ;UI.c: 250: if(up){
 14239  001C1A  5077               	movf	_up,w,c
 14240  001C1C  1078               	iorwf	_up+1,w,c
 14241  001C1E  B4D8               	btfsc	status,2,c
 14242  001C20  D003               	goto	i2l7127
 14243                           
 14244                           ;UI.c: 251: change_state_to_menu_11();
 14245  001C22  EC43  F01E         	call	_change_state_to_menu_11	;wreg free
 14246                           
 14247                           ;UI.c: 252: }
 14248  001C26  D119               	goto	i2l254
 14249  001C28                     i2l7127:
 14250                           
 14251                           ;UI.c: 253: else if(down){
 14252  001C28  5069               	movf	_down,w,c
 14253  001C2A  106A               	iorwf	_down+1,w,c
 14254  001C2C  B4D8               	btfsc	status,2,c
 14255  001C2E  D003               	goto	i2l7131
 14256                           
 14257                           ;UI.c: 254: change_state_to_menu_23();
 14258  001C30  EC2B  F01E         	call	_change_state_to_menu_23	;wreg free
 14259                           
 14260                           ;UI.c: 255: }
 14261  001C34  D112               	goto	i2l254
 14262  001C36                     i2l7131:
 14263                           
 14264                           ;UI.c: 256: else if(enter){
 14265  001C36  506B               	movf	_enter,w,c
 14266  001C38  106C               	iorwf	_enter+1,w,c
 14267  001C3A  B4D8               	btfsc	status,2,c
 14268  001C3C  D10E               	goto	i2l254
 14269                           
 14270                           ;UI.c: 257: machine_state = Sorting_state;
 14271  001C3E  0E01               	movlw	1
 14272  001C40  0100               	movlb	0	; () banked
 14273  001C42  6FFC               	movwf	_machine_state& (0+255),b
 14274                           
 14275                           ; BSR set to: 0
 14276                           ;UI.c: 258: }
 14277                           ;UI.c: 259: break;
 14278                           
 14279                           ; BSR set to: 0
 14280                           
 14281                           ; BSR set to: 0
 14282  001C44  D10A               	goto	i2l254
 14283  001C46                     i2l7135:
 14284                           
 14285                           ;UI.c: 262: if(up){
 14286  001C46  5077               	movf	_up,w,c
 14287  001C48  1078               	iorwf	_up+1,w,c
 14288  001C4A  B4D8               	btfsc	status,2,c
 14289  001C4C  D003               	goto	i2l7139
 14290                           
 14291                           ;UI.c: 263: change_state_to_menu_22();
 14292  001C4E  ECFB  F01D         	call	i2_change_state_to_menu_22	;wreg free
 14293                           
 14294                           ;UI.c: 264: }
 14295  001C52  D103               	goto	i2l254
 14296  001C54                     i2l7139:
 14297                           
 14298                           ;UI.c: 265: else if(down){
 14299  001C54  5069               	movf	_down,w,c
 14300  001C56  106A               	iorwf	_down+1,w,c
 14301  001C58  B4D8               	btfsc	status,2,c
 14302  001C5A  D003               	goto	i2l7143
 14303                           
 14304                           ;UI.c: 266: change_state_to_menu_11();
 14305  001C5C  EC43  F01E         	call	_change_state_to_menu_11	;wreg free
 14306                           
 14307                           ;UI.c: 267: }
 14308  001C60  D0FC               	goto	i2l254
 14309  001C62                     i2l7143:
 14310                           
 14311                           ;UI.c: 268: else if(enter){
 14312  001C62  506B               	movf	_enter,w,c
 14313  001C64  106C               	iorwf	_enter+1,w,c
 14314  001C66  B4D8               	btfsc	status,2,c
 14315  001C68  D0F8               	goto	i2l254
 14316                           
 14317                           ;UI.c: 269: change_state_to_logs_11();
 14318  001C6A  ECBB  F01E         	call	_change_state_to_logs_11	;wreg free
 14319                           
 14320                           ;UI.c: 270: }
 14321                           ;UI.c: 271: break;
 14322  001C6E  D0F5               	goto	i2l254
 14323  001C70                     i2l7147:
 14324                           
 14325                           ;UI.c: 274: if(up){
 14326  001C70  5077               	movf	_up,w,c
 14327  001C72  1078               	iorwf	_up+1,w,c
 14328  001C74  B4D8               	btfsc	status,2,c
 14329  001C76  D003               	goto	i2l7151
 14330                           
 14331                           ;UI.c: 275: change_state_to_logs_34();
 14332  001C78  EC5B  F01E         	call	_change_state_to_logs_34	;wreg free
 14333                           
 14334                           ;UI.c: 276: }
 14335  001C7C  D0EE               	goto	i2l254
 14336  001C7E                     i2l7151:
 14337                           
 14338                           ;UI.c: 277: else if(down){
 14339  001C7E  5069               	movf	_down,w,c
 14340  001C80  106A               	iorwf	_down+1,w,c
 14341  001C82  B4D8               	btfsc	status,2,c
 14342  001C84  D003               	goto	i2l7155
 14343                           
 14344                           ;UI.c: 278: change_state_to_logs_12();
 14345  001C86  ECA3  F01E         	call	_change_state_to_logs_12	;wreg free
 14346                           
 14347                           ;UI.c: 279: }
 14348  001C8A  D0E7               	goto	i2l254
 14349  001C8C                     i2l7155:
 14350                           
 14351                           ;UI.c: 280: else if(enter){
 14352  001C8C  506B               	movf	_enter,w,c
 14353  001C8E  106C               	iorwf	_enter+1,w,c
 14354  001C90  B4D8               	btfsc	status,2,c
 14355  001C92  D007               	goto	i2l7159
 14356                           
 14357                           ;UI.c: 281: dispLogs(1);
 14358  001C94  0E00               	movlw	0
 14359  001C96  6E13               	movwf	dispLogs@myLog+1,c
 14360  001C98  0E01               	movlw	1
 14361  001C9A  6E12               	movwf	dispLogs@myLog,c
 14362  001C9C  EC8E  F01F         	call	_dispLogs	;wreg free
 14363                           
 14364                           ;UI.c: 282: }
 14365  001CA0  D0DC               	goto	i2l254
 14366  001CA2                     i2l7159:
 14367                           
 14368                           ;UI.c: 283: else if(back){
 14369  001CA2  505B               	movf	_back,w,c
 14370  001CA4  105C               	iorwf	_back+1,w,c
 14371  001CA6  B4D8               	btfsc	status,2,c
 14372  001CA8  D0D8               	goto	i2l254
 14373                           
 14374                           ;UI.c: 284: change_state_to_menu_23();
 14375  001CAA  EC2B  F01E         	call	_change_state_to_menu_23	;wreg free
 14376                           
 14377                           ;UI.c: 285: }
 14378                           ;UI.c: 286: break;
 14379  001CAE  D0D5               	goto	i2l254
 14380  001CB0                     i2l7163:
 14381                           
 14382                           ;UI.c: 289: if(up){
 14383  001CB0  5077               	movf	_up,w,c
 14384  001CB2  1078               	iorwf	_up+1,w,c
 14385  001CB4  B4D8               	btfsc	status,2,c
 14386  001CB6  D003               	goto	i2l7167
 14387                           
 14388                           ;UI.c: 290: change_state_to_logs_11();
 14389  001CB8  ECBB  F01E         	call	_change_state_to_logs_11	;wreg free
 14390                           
 14391                           ;UI.c: 291: }
 14392  001CBC  D0CE               	goto	i2l254
 14393  001CBE                     i2l7167:
 14394                           
 14395                           ;UI.c: 292: else if(down){
 14396  001CBE  5069               	movf	_down,w,c
 14397  001CC0  106A               	iorwf	_down+1,w,c
 14398  001CC2  B4D8               	btfsc	status,2,c
 14399  001CC4  D003               	goto	i2l7171
 14400                           
 14401                           ;UI.c: 293: change_state_to_logs_23();
 14402  001CC6  ECEA  F01E         	call	_change_state_to_logs_23	;wreg free
 14403                           
 14404                           ;UI.c: 294: }
 14405  001CCA  D0C7               	goto	i2l254
 14406  001CCC                     i2l7171:
 14407                           
 14408                           ;UI.c: 295: else if(enter){
 14409  001CCC  506B               	movf	_enter,w,c
 14410  001CCE  106C               	iorwf	_enter+1,w,c
 14411  001CD0  B4D8               	btfsc	status,2,c
 14412  001CD2  D007               	goto	i2l7175
 14413                           
 14414                           ;UI.c: 296: dispLogs(2);
 14415  001CD4  0E00               	movlw	0
 14416  001CD6  6E13               	movwf	dispLogs@myLog+1,c
 14417  001CD8  0E02               	movlw	2
 14418  001CDA  6E12               	movwf	dispLogs@myLog,c
 14419  001CDC  EC8E  F01F         	call	_dispLogs	;wreg free
 14420                           
 14421                           ;UI.c: 297: }
 14422  001CE0  D0BC               	goto	i2l254
 14423  001CE2                     i2l7175:
 14424                           
 14425                           ;UI.c: 298: else if(back){
 14426  001CE2  505B               	movf	_back,w,c
 14427  001CE4  105C               	iorwf	_back+1,w,c
 14428  001CE6  B4D8               	btfsc	status,2,c
 14429  001CE8  D0B8               	goto	i2l254
 14430                           
 14431                           ;UI.c: 299: change_state_to_menu_23();
 14432  001CEA  EC2B  F01E         	call	_change_state_to_menu_23	;wreg free
 14433                           
 14434                           ;UI.c: 300: }
 14435                           ;UI.c: 301: break;
 14436  001CEE  D0B5               	goto	i2l254
 14437  001CF0                     i2l7179:
 14438                           
 14439                           ;UI.c: 304: if(up){
 14440  001CF0  5077               	movf	_up,w,c
 14441  001CF2  1078               	iorwf	_up+1,w,c
 14442  001CF4  B4D8               	btfsc	status,2,c
 14443  001CF6  D003               	goto	i2l7183
 14444                           
 14445                           ;UI.c: 305: change_state_to_logs_11();
 14446  001CF8  ECBB  F01E         	call	_change_state_to_logs_11	;wreg free
 14447                           
 14448                           ;UI.c: 306: }
 14449  001CFC  D0AE               	goto	i2l254
 14450  001CFE                     i2l7183:
 14451                           
 14452                           ;UI.c: 307: else if(down){
 14453  001CFE  5069               	movf	_down,w,c
 14454  001D00  106A               	iorwf	_down+1,w,c
 14455  001D02  B4D8               	btfsc	status,2,c
 14456  001D04  D003               	goto	i2l7187
 14457                           
 14458                           ;UI.c: 308: change_state_to_logs_23();
 14459  001D06  ECEA  F01E         	call	_change_state_to_logs_23	;wreg free
 14460                           
 14461                           ;UI.c: 309: }
 14462  001D0A  D0A7               	goto	i2l254
 14463  001D0C                     i2l7187:
 14464                           
 14465                           ;UI.c: 310: else if(enter){
 14466  001D0C  506B               	movf	_enter,w,c
 14467  001D0E  106C               	iorwf	_enter+1,w,c
 14468  001D10  B4D8               	btfsc	status,2,c
 14469  001D12  D007               	goto	i2l7191
 14470                           
 14471                           ;UI.c: 311: dispLogs(2);
 14472  001D14  0E00               	movlw	0
 14473  001D16  6E13               	movwf	dispLogs@myLog+1,c
 14474  001D18  0E02               	movlw	2
 14475  001D1A  6E12               	movwf	dispLogs@myLog,c
 14476  001D1C  EC8E  F01F         	call	_dispLogs	;wreg free
 14477                           
 14478                           ;UI.c: 312: }
 14479  001D20  D09C               	goto	i2l254
 14480  001D22                     i2l7191:
 14481                           
 14482                           ;UI.c: 313: else if(back){
 14483  001D22  505B               	movf	_back,w,c
 14484  001D24  105C               	iorwf	_back+1,w,c
 14485  001D26  B4D8               	btfsc	status,2,c
 14486  001D28  D098               	goto	i2l254
 14487                           
 14488                           ;UI.c: 314: change_state_to_menu_23();
 14489  001D2A  EC2B  F01E         	call	_change_state_to_menu_23	;wreg free
 14490                           
 14491                           ;UI.c: 315: }
 14492                           ;UI.c: 316: break;
 14493  001D2E  D095               	goto	i2l254
 14494  001D30                     i2l7195:
 14495                           
 14496                           ;UI.c: 319: if(up){
 14497  001D30  5077               	movf	_up,w,c
 14498  001D32  1078               	iorwf	_up+1,w,c
 14499  001D34  B4D8               	btfsc	status,2,c
 14500  001D36  D003               	goto	i2l7199
 14501                           
 14502                           ;UI.c: 320: change_state_to_logs_22();
 14503  001D38  EC8B  F01E         	call	_change_state_to_logs_22	;wreg free
 14504                           
 14505                           ;UI.c: 321: }
 14506  001D3C  D08E               	goto	i2l254
 14507  001D3E                     i2l7199:
 14508                           
 14509                           ;UI.c: 322: else if(down){
 14510  001D3E  5069               	movf	_down,w,c
 14511  001D40  106A               	iorwf	_down+1,w,c
 14512  001D42  B4D8               	btfsc	status,2,c
 14513  001D44  D003               	goto	i2l7203
 14514                           
 14515                           ;UI.c: 323: change_state_to_logs_34();
 14516  001D46  EC5B  F01E         	call	_change_state_to_logs_34	;wreg free
 14517                           
 14518                           ;UI.c: 324: }
 14519  001D4A  D087               	goto	i2l254
 14520  001D4C                     i2l7203:
 14521                           
 14522                           ;UI.c: 325: else if(enter){
 14523  001D4C  506B               	movf	_enter,w,c
 14524  001D4E  106C               	iorwf	_enter+1,w,c
 14525  001D50  B4D8               	btfsc	status,2,c
 14526  001D52  D007               	goto	i2l7207
 14527                           
 14528                           ;UI.c: 326: dispLogs(3);
 14529  001D54  0E00               	movlw	0
 14530  001D56  6E13               	movwf	dispLogs@myLog+1,c
 14531  001D58  0E03               	movlw	3
 14532  001D5A  6E12               	movwf	dispLogs@myLog,c
 14533  001D5C  EC8E  F01F         	call	_dispLogs	;wreg free
 14534                           
 14535                           ;UI.c: 327: }
 14536  001D60  D07C               	goto	i2l254
 14537  001D62                     i2l7207:
 14538                           
 14539                           ;UI.c: 328: else if(back){
 14540  001D62  505B               	movf	_back,w,c
 14541  001D64  105C               	iorwf	_back+1,w,c
 14542  001D66  B4D8               	btfsc	status,2,c
 14543  001D68  D078               	goto	i2l254
 14544                           
 14545                           ;UI.c: 329: change_state_to_menu_23();
 14546  001D6A  EC2B  F01E         	call	_change_state_to_menu_23	;wreg free
 14547                           
 14548                           ;UI.c: 330: }
 14549                           ;UI.c: 331: break;
 14550  001D6E  D075               	goto	i2l254
 14551  001D70                     i2l7211:
 14552                           
 14553                           ;UI.c: 334: if(up){
 14554  001D70  5077               	movf	_up,w,c
 14555  001D72  1078               	iorwf	_up+1,w,c
 14556  001D74  B4D8               	btfsc	status,2,c
 14557  001D76  D003               	goto	i2l7215
 14558                           
 14559                           ;UI.c: 335: change_state_to_logs_22();
 14560  001D78  EC8B  F01E         	call	_change_state_to_logs_22	;wreg free
 14561                           
 14562                           ;UI.c: 336: }
 14563  001D7C  D06E               	goto	i2l254
 14564  001D7E                     i2l7215:
 14565                           
 14566                           ;UI.c: 337: else if(down){
 14567  001D7E  5069               	movf	_down,w,c
 14568  001D80  106A               	iorwf	_down+1,w,c
 14569  001D82  B4D8               	btfsc	status,2,c
 14570  001D84  D003               	goto	i2l7219
 14571                           
 14572                           ;UI.c: 338: change_state_to_logs_34();
 14573  001D86  EC5B  F01E         	call	_change_state_to_logs_34	;wreg free
 14574                           
 14575                           ;UI.c: 339: }
 14576  001D8A  D067               	goto	i2l254
 14577  001D8C                     i2l7219:
 14578                           
 14579                           ;UI.c: 340: else if(enter){
 14580  001D8C  506B               	movf	_enter,w,c
 14581  001D8E  106C               	iorwf	_enter+1,w,c
 14582  001D90  B4D8               	btfsc	status,2,c
 14583  001D92  D007               	goto	i2l7223
 14584                           
 14585                           ;UI.c: 341: dispLogs(3);
 14586  001D94  0E00               	movlw	0
 14587  001D96  6E13               	movwf	dispLogs@myLog+1,c
 14588  001D98  0E03               	movlw	3
 14589  001D9A  6E12               	movwf	dispLogs@myLog,c
 14590  001D9C  EC8E  F01F         	call	_dispLogs	;wreg free
 14591                           
 14592                           ;UI.c: 342: }
 14593  001DA0  D05C               	goto	i2l254
 14594  001DA2                     i2l7223:
 14595                           
 14596                           ;UI.c: 343: else if(back){
 14597  001DA2  505B               	movf	_back,w,c
 14598  001DA4  105C               	iorwf	_back+1,w,c
 14599  001DA6  B4D8               	btfsc	status,2,c
 14600  001DA8  D058               	goto	i2l254
 14601                           
 14602                           ;UI.c: 344: change_state_to_menu_23();
 14603  001DAA  EC2B  F01E         	call	_change_state_to_menu_23	;wreg free
 14604                           
 14605                           ;UI.c: 345: }
 14606                           ;UI.c: 346: break;
 14607  001DAE  D055               	goto	i2l254
 14608  001DB0                     i2l7227:
 14609                           
 14610                           ;UI.c: 349: if(up){
 14611  001DB0  5077               	movf	_up,w,c
 14612  001DB2  1078               	iorwf	_up+1,w,c
 14613  001DB4  B4D8               	btfsc	status,2,c
 14614  001DB6  D003               	goto	i2l7231
 14615                           
 14616                           ;UI.c: 350: change_state_to_logs_33();
 14617  001DB8  EC73  F01E         	call	_change_state_to_logs_33	;wreg free
 14618                           
 14619                           ;UI.c: 351: }
 14620  001DBC  D04E               	goto	i2l254
 14621  001DBE                     i2l7231:
 14622                           
 14623                           ;UI.c: 352: else if(down){
 14624  001DBE  5069               	movf	_down,w,c
 14625  001DC0  106A               	iorwf	_down+1,w,c
 14626  001DC2  B4D8               	btfsc	status,2,c
 14627  001DC4  D003               	goto	i2l7235
 14628                           
 14629                           ;UI.c: 353: change_state_to_logs_11();
 14630  001DC6  ECBB  F01E         	call	_change_state_to_logs_11	;wreg free
 14631                           
 14632                           ;UI.c: 354: }
 14633  001DCA  D047               	goto	i2l254
 14634  001DCC                     i2l7235:
 14635                           
 14636                           ;UI.c: 355: else if(enter){
 14637  001DCC  506B               	movf	_enter,w,c
 14638  001DCE  106C               	iorwf	_enter+1,w,c
 14639  001DD0  B4D8               	btfsc	status,2,c
 14640  001DD2  D007               	goto	i2l7239
 14641                           
 14642                           ;UI.c: 356: dispLogs(4);
 14643  001DD4  0E00               	movlw	0
 14644  001DD6  6E13               	movwf	dispLogs@myLog+1,c
 14645  001DD8  0E04               	movlw	4
 14646  001DDA  6E12               	movwf	dispLogs@myLog,c
 14647  001DDC  EC8E  F01F         	call	_dispLogs	;wreg free
 14648                           
 14649                           ;UI.c: 357: }
 14650  001DE0  D03C               	goto	i2l254
 14651  001DE2                     i2l7239:
 14652                           
 14653                           ;UI.c: 358: else if(back){
 14654  001DE2  505B               	movf	_back,w,c
 14655  001DE4  105C               	iorwf	_back+1,w,c
 14656  001DE6  B4D8               	btfsc	status,2,c
 14657  001DE8  D038               	goto	i2l254
 14658                           
 14659                           ;UI.c: 359: change_state_to_menu_23();
 14660  001DEA  EC2B  F01E         	call	_change_state_to_menu_23	;wreg free
 14661                           
 14662                           ;UI.c: 365: }
 14663                           
 14664                           ;UI.c: 364: break;
 14665                           
 14666                           ;UI.c: 363: default:
 14667                           
 14668                           ;UI.c: 360: }
 14669                           ;UI.c: 361: break;
 14670  001DEE  D035               	goto	i2l254
 14671  001DF0                     i2l7245:
 14672  001DF0  C0DE  F043         	movff	_cur_state,??_updateMenu
 14673  001DF4  C0DF  F044         	movff	_cur_state+1,??_updateMenu+1
 14674                           
 14675                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 14676                           ; Switch size 1, requested type "space"
 14677                           ; Number of cases is 3, Range of values is 0 to 4
 14678                           ; switch strategies available:
 14679                           ; Name         Instructions Cycles
 14680                           ; simple_byte           10     6 (average)
 14681                           ;	Chosen strategy is simple_byte
 14682  001DF8  5044               	movf	??_updateMenu+1,w,c
 14683  001DFA  0A00               	xorlw	0	; case 0
 14684  001DFC  B4D8               	btfsc	status,2,c
 14685  001DFE  D007               	goto	i2l7819
 14686  001E00  0A03               	xorlw	3	; case 3
 14687  001E02  B4D8               	btfsc	status,2,c
 14688  001E04  D015               	goto	i2l7821
 14689  001E06  0A07               	xorlw	7	; case 4
 14690  001E08  B4D8               	btfsc	status,2,c
 14691  001E0A  D020               	goto	i2l7823
 14692  001E0C  D026               	goto	i2l254
 14693  001E0E                     i2l7819:
 14694                           
 14695                           ; Switch size 1, requested type "space"
 14696                           ; Number of cases is 5, Range of values is 0 to 23
 14697                           ; switch strategies available:
 14698                           ; Name         Instructions Cycles
 14699                           ; simple_byte           16     9 (average)
 14700                           ;	Chosen strategy is simple_byte
 14701  001E0E  5043               	movf	??_updateMenu,w,c
 14702  001E10  0A00               	xorlw	0	; case 0
 14703  001E12  B4D8               	btfsc	status,2,c
 14704  001E14  D6DC               	goto	i2l7097
 14705  001E16  0A0B               	xorlw	11	; case 11
 14706  001E18  B4D8               	btfsc	status,2,c
 14707  001E1A  D6DC               	goto	i2l7099
 14708  001E1C  0A07               	xorlw	7	; case 12
 14709  001E1E  B4D8               	btfsc	status,2,c
 14710  001E20  D6EE               	goto	i2l7111
 14711  001E22  0A1A               	xorlw	26	; case 22
 14712  001E24  B4D8               	btfsc	status,2,c
 14713  001E26  D6F9               	goto	i2l7123
 14714  001E28  0A01               	xorlw	1	; case 23
 14715  001E2A  B4D8               	btfsc	status,2,c
 14716  001E2C  D70C               	goto	i2l7135
 14717  001E2E  D015               	goto	i2l254
 14718  001E30                     i2l7821:
 14719                           
 14720                           ; Switch size 1, requested type "space"
 14721                           ; Number of cases is 4, Range of values is 243 to 255
 14722                           ; switch strategies available:
 14723                           ; Name         Instructions Cycles
 14724                           ; simple_byte           13     7 (average)
 14725                           ;	Chosen strategy is simple_byte
 14726  001E30  5043               	movf	??_updateMenu,w,c
 14727  001E32  0AF3               	xorlw	243	; case 243
 14728  001E34  B4D8               	btfsc	status,2,c
 14729  001E36  D71C               	goto	i2l7147
 14730  001E38  0A07               	xorlw	7	; case 244
 14731  001E3A  B4D8               	btfsc	status,2,c
 14732  001E3C  D739               	goto	i2l7163
 14733  001E3E  0A0A               	xorlw	10	; case 254
 14734  001E40  B4D8               	btfsc	status,2,c
 14735  001E42  D756               	goto	i2l7179
 14736  001E44  0A01               	xorlw	1	; case 255
 14737  001E46  B4D8               	btfsc	status,2,c
 14738  001E48  D773               	goto	i2l7195
 14739  001E4A  D007               	goto	i2l254
 14740  001E4C                     i2l7823:
 14741                           
 14742                           ; Switch size 1, requested type "space"
 14743                           ; Number of cases is 2, Range of values is 9 to 10
 14744                           ; switch strategies available:
 14745                           ; Name         Instructions Cycles
 14746                           ; simple_byte            7     4 (average)
 14747                           ;	Chosen strategy is simple_byte
 14748  001E4C  5043               	movf	??_updateMenu,w,c
 14749  001E4E  0A09               	xorlw	9	; case 9
 14750  001E50  B4D8               	btfsc	status,2,c
 14751  001E52  D78E               	goto	i2l7211
 14752  001E54  0A03               	xorlw	3	; case 10
 14753  001E56  B4D8               	btfsc	status,2,c
 14754  001E58  D7AB               	goto	i2l7227
 14755  001E5A                     i2l254:
 14756                           
 14757                           ;UI.c: 366: }
 14758                           ;UI.c: 367: (INTCONbits.GIE = 1);
 14759  001E5A  8EF2               	bsf	intcon,7,c	;volatile
 14760  001E5C  0012               	return		;funcret
 14761  001E5E                     __end_of_updateMenu:
 14762                           	opt stack 0
 14763                           pclatu	equ	0xFFB
 14764                           pclath	equ	0xFFA
 14765                           tblptru	equ	0xFF8
 14766                           tblptrh	equ	0xFF7
 14767                           tblptrl	equ	0xFF6
 14768                           tablat	equ	0xFF5
 14769                           prodh	equ	0xFF4
 14770                           prodl	equ	0xFF3
 14771                           intcon	equ	0xFF2
 14772                           intcon2	equ	0xFF1
 14773                           intcon3	equ	0xFF0
 14774                           indf0	equ	0xFEF
 14775                           postinc0	equ	0xFEE
 14776                           fsr0h	equ	0xFEA
 14777                           fsr0l	equ	0xFE9
 14778                           wreg	equ	0xFE8
 14779                           postdec1	equ	0xFE5
 14780                           fsr1h	equ	0xFE2
 14781                           fsr1l	equ	0xFE1
 14782                           indf2	equ	0xFDF
 14783                           postinc2	equ	0xFDE
 14784                           postdec2	equ	0xFDD
 14785                           fsr2h	equ	0xFDA
 14786                           fsr2l	equ	0xFD9
 14787                           status	equ	0xFD8
 14788                           
 14789 ;; *************** function i2_change_state_to_menu_start *****************
 14790 ;; Defined at:
 14791 ;;		line 472 in file "UI.c"
 14792 ;; Parameters:    Size  Location     Type
 14793 ;;		None
 14794 ;; Auto vars:     Size  Location     Type
 14795 ;;		None
 14796 ;; Return value:  Size  Location     Type
 14797 ;;                  1    wreg      void 
 14798 ;; Registers used:
 14799 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14800 ;; Tracked objects:
 14801 ;;		On entry : 0/0
 14802 ;;		On exit  : 0/0
 14803 ;;		Unchanged: 0/0
 14804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14809 ;;Total ram usage:        0 bytes
 14810 ;; Hardware stack levels used:    1
 14811 ;; Hardware stack levels required when called:    4
 14812 ;; This function calls:
 14813 ;;		i2_lcdInst
 14814 ;;		i2_printRTC
 14815 ;;		i2_printf
 14816 ;; This function is called by:
 14817 ;;		_updateMenu
 14818 ;; This function uses a non-reentrant model
 14819 ;;
 14820                           
 14821                           	psect	text55
 14822  003E84                     __ptext55:
 14823                           	opt stack 0
 14824  003E84                     i2_change_state_to_menu_start:
 14825                           	opt stack 18
 14826                           
 14827                           ;UI.c: 473: cur_state = 0;
 14828                           
 14829                           ;incstack = 0
 14830  003E84  0E00               	movlw	0
 14831  003E86  0100               	movlb	0	; () banked
 14832  003E88  6FDF               	movwf	(_cur_state+1)& (0+255),b
 14833  003E8A  0E00               	movlw	0
 14834  003E8C  6FDE               	movwf	_cur_state& (0+255),b
 14835                           
 14836                           ; BSR set to: 0
 14837                           ;UI.c: 475: lcdInst(0b10000000);;
 14838  003E8E  0E80               	movlw	128
 14839  003E90  EC1C  F020         	call	i2_lcdInst
 14840                           
 14841                           ;UI.c: 476: printRTC();
 14842  003E94  EC2F  F00F         	call	i2_printRTC	;wreg free
 14843                           
 14844                           ;UI.c: 477: lcdInst(0b11000000);;
 14845  003E98  0EC0               	movlw	192
 14846  003E9A  EC1C  F020         	call	i2_lcdInst
 14847                           
 14848                           ;UI.c: 478: printf("PUSH TO CONTINUE");
 14849  003E9E  0E36               	movlw	low STR_30
 14850  003EA0  6E0D               	movwf	i2printf@f,c
 14851  003EA2  0EFE               	movlw	high STR_30
 14852  003EA4  6E0E               	movwf	i2printf@f+1,c
 14853  003EA6  ECB3  F00A         	call	i2_printf	;wreg free
 14854  003EAA  0012               	return		;funcret
 14855  003EAC                     __end_ofi2_change_state_to_menu_start:
 14856                           	opt stack 0
 14857                           pclatu	equ	0xFFB
 14858                           pclath	equ	0xFFA
 14859                           tblptru	equ	0xFF8
 14860                           tblptrh	equ	0xFF7
 14861                           tblptrl	equ	0xFF6
 14862                           tablat	equ	0xFF5
 14863                           prodh	equ	0xFF4
 14864                           prodl	equ	0xFF3
 14865                           intcon	equ	0xFF2
 14866                           intcon2	equ	0xFF1
 14867                           intcon3	equ	0xFF0
 14868                           indf0	equ	0xFEF
 14869                           postinc0	equ	0xFEE
 14870                           fsr0h	equ	0xFEA
 14871                           fsr0l	equ	0xFE9
 14872                           wreg	equ	0xFE8
 14873                           postdec1	equ	0xFE5
 14874                           fsr1h	equ	0xFE2
 14875                           fsr1l	equ	0xFE1
 14876                           indf2	equ	0xFDF
 14877                           postinc2	equ	0xFDE
 14878                           postdec2	equ	0xFDD
 14879                           fsr2h	equ	0xFDA
 14880                           fsr2l	equ	0xFD9
 14881                           status	equ	0xFD8
 14882                           
 14883 ;; *************** function i2_printRTC *****************
 14884 ;; Defined at:
 14885 ;;		line 63 in file "RTC.c"
 14886 ;; Parameters:    Size  Location     Type
 14887 ;;		None
 14888 ;; Auto vars:     Size  Location     Type
 14889 ;;  printRTC       14   44[COMRAM] int [7]
 14890 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 14891 ;;  printRTC        2   64[COMRAM] int 
 14892 ;;  printRTC        2   58[COMRAM] int 
 14893 ;; Return value:  Size  Location     Type
 14894 ;;                  1    wreg      void 
 14895 ;; Registers used:
 14896 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14897 ;; Tracked objects:
 14898 ;;		On entry : 0/0
 14899 ;;		On exit  : 0/0
 14900 ;;		Unchanged: 0/0
 14901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14903 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14904 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14905 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14906 ;;Total ram usage:       25 bytes
 14907 ;; Hardware stack levels used:    1
 14908 ;; Hardware stack levels required when called:    3
 14909 ;; This function calls:
 14910 ;;		i2_getRTC
 14911 ;;		i2_lcdInst
 14912 ;;		i2_printf
 14913 ;;		i2_strcpy
 14914 ;; This function is called by:
 14915 ;;		i2_change_state_to_menu_start
 14916 ;; This function uses a non-reentrant model
 14917 ;;
 14918                           
 14919                           	psect	text56
 14920  001E5E                     __ptext56:
 14921                           	opt stack 0
 14922  001E5E                     i2_printRTC:
 14923                           	opt stack 18
 14924                           
 14925                           ;RTC.c: 64: getRTC();
 14926                           
 14927                           ;incstack = 0
 14928  001E5E  ECB6  F01A         	call	i2_getRTC	;wreg free
 14929                           
 14930                           ;RTC.c: 65: char month[] = "MMM";
 14931  001E62  C131  F03D         	movff	printRTC@F3211,i2printRTC@month
 14932  001E66  C132  F03E         	movff	printRTC@F3211+1,i2printRTC@month+1
 14933  001E6A  C133  F03F         	movff	printRTC@F3211+2,i2printRTC@month+2
 14934  001E6E  C134  F040         	movff	printRTC@F3211+3,i2printRTC@month+3
 14935                           
 14936                           ;RTC.c: 66: int INT_time[7];
 14937                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 14938  001E72  0E00               	movlw	0
 14939  001E74  6E42               	movwf	i2printRTC@i+1,c
 14940  001E76  0E00               	movlw	0
 14941  001E78  6E41               	movwf	i2printRTC@i,c
 14942  001E7A  BE42               	btfsc	i2printRTC@i+1,7,c
 14943  001E7C  D006               	goto	i2l5747
 14944  001E7E  5042               	movf	i2printRTC@i+1,w,c
 14945  001E80  E135               	bnz	i2l591
 14946  001E82  0E07               	movlw	7
 14947  001E84  5C41               	subwf	i2printRTC@i,w,c
 14948  001E86  B0D8               	btfsc	status,0,c
 14949  001E88  D031               	goto	i2l591
 14950  001E8A                     i2l5747:
 14951                           
 14952                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 14953  001E8A  0E24               	movlw	low _time
 14954  001E8C  2441               	addwf	i2printRTC@i,w,c
 14955  001E8E  6ED9               	movwf	fsr2l,c
 14956  001E90  0E01               	movlw	high _time
 14957  001E92  2042               	addwfc	i2printRTC@i+1,w,c
 14958  001E94  6EDA               	movwf	fsr2h,c
 14959  001E96  50DF               	movf	indf2,w,c
 14960  001E98  6E2A               	movwf	??i2_printRTC& (0+255),c
 14961  001E9A  3A2A               	swapf	??i2_printRTC,f,c
 14962  001E9C  0E0F               	movlw	15
 14963  001E9E  162A               	andwf	??i2_printRTC,f,c
 14964  001EA0  0E0F               	movlw	15
 14965  001EA2  162A               	andwf	??i2_printRTC,f,c
 14966  001EA4  502A               	movf	??i2_printRTC,w,c
 14967  001EA6  0D0A               	mullw	10
 14968  001EA8  0E24               	movlw	low _time
 14969  001EAA  2441               	addwf	i2printRTC@i,w,c
 14970  001EAC  6ED9               	movwf	fsr2l,c
 14971  001EAE  0E01               	movlw	high _time
 14972  001EB0  2042               	addwfc	i2printRTC@i+1,w,c
 14973  001EB2  6EDA               	movwf	fsr2h,c
 14974  001EB4  50DF               	movf	indf2,w,c
 14975  001EB6  0B0F               	andlw	15
 14976  001EB8  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 14977  001EBA  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 14978  001EBC  50F3               	movf	prodl,w,c
 14979  001EBE  262B               	addwf	??i2_printRTC+1,f,c
 14980  001EC0  50F4               	movf	prodh,w,c
 14981  001EC2  222C               	addwfc	??i2_printRTC+2,f,c
 14982  001EC4  90D8               	bcf	status,0,c
 14983  001EC6  3441               	rlcf	i2printRTC@i,w,c
 14984  001EC8  6ED9               	movwf	fsr2l,c
 14985  001ECA  3442               	rlcf	i2printRTC@i+1,w,c
 14986  001ECC  6EDA               	movwf	fsr2h,c
 14987  001ECE  0E2D               	movlw	low i2printRTC@INT_time
 14988  001ED0  26D9               	addwf	fsr2l,f,c
 14989  001ED2  0E00               	movlw	high i2printRTC@INT_time
 14990  001ED4  22DA               	addwfc	fsr2h,f,c
 14991  001ED6  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 14992  001EDA  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 14993  001EDE  4A41               	infsnz	i2printRTC@i,f,c
 14994  001EE0  2A42               	incf	i2printRTC@i+1,f,c
 14995  001EE2  BE42               	btfsc	i2printRTC@i+1,7,c
 14996  001EE4  D7D2               	goto	i2l5747
 14997  001EE6  5042               	movf	i2printRTC@i+1,w,c
 14998  001EE8  E101               	bnz	i2u436_40
 14999  001EEA  D7CB               	goto	L9
 15000  001EEC                     i2u436_40:
 15001  001EEC                     i2l591:
 15002                           
 15003                           ;RTC.c: 69: }
 15004                           ;RTC.c: 70: int RTC_month = INT_time[5];
 15005  001EEC  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 15006  001EF0  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 15007                           
 15008                           ;RTC.c: 71: switch(RTC_month){
 15009  001EF4  D084               	goto	i2l5779
 15010  001EF6                     i2l5753:
 15011                           
 15012                           ;RTC.c: 73: strcpy(month, "JAN");
 15013  001EF6  0E3D               	movlw	low i2printRTC@month
 15014  001EF8  6E01               	movwf	i2strcpy@to,c
 15015  001EFA  0E00               	movlw	high i2printRTC@month
 15016  001EFC  6E02               	movwf	i2strcpy@to+1,c
 15017  001EFE  0EDA               	movlw	low STR_8
 15018  001F00  6E03               	movwf	i2strcpy@from,c
 15019  001F02  0EFF               	movlw	high STR_8
 15020  001F04  6E04               	movwf	i2strcpy@from+1,c
 15021  001F06  ECE2  F01D         	call	i2_strcpy	;wreg free
 15022                           
 15023                           ;RTC.c: 74: break;
 15024  001F0A  D0A6               	goto	i2l5781
 15025  001F0C                     i2l5755:
 15026                           
 15027                           ;RTC.c: 76: strcpy(month, "FEB");
 15028  001F0C  0E3D               	movlw	low i2printRTC@month
 15029  001F0E  6E01               	movwf	i2strcpy@to,c
 15030  001F10  0E00               	movlw	high i2printRTC@month
 15031  001F12  6E02               	movwf	i2strcpy@to+1,c
 15032  001F14  0ECA               	movlw	low STR_9
 15033  001F16  6E03               	movwf	i2strcpy@from,c
 15034  001F18  0EFF               	movlw	high STR_9
 15035  001F1A  6E04               	movwf	i2strcpy@from+1,c
 15036  001F1C  ECE2  F01D         	call	i2_strcpy	;wreg free
 15037                           
 15038                           ;RTC.c: 77: break;
 15039  001F20  D09B               	goto	i2l5781
 15040  001F22                     i2l5757:
 15041                           
 15042                           ;RTC.c: 79: strcpy(month, "MAR");
 15043  001F22  0E3D               	movlw	low i2printRTC@month
 15044  001F24  6E01               	movwf	i2strcpy@to,c
 15045  001F26  0E00               	movlw	high i2printRTC@month
 15046  001F28  6E02               	movwf	i2strcpy@to+1,c
 15047  001F2A  0EE6               	movlw	low STR_10
 15048  001F2C  6E03               	movwf	i2strcpy@from,c
 15049  001F2E  0EFF               	movlw	high STR_10
 15050  001F30  6E04               	movwf	i2strcpy@from+1,c
 15051  001F32  ECE2  F01D         	call	i2_strcpy	;wreg free
 15052                           
 15053                           ;RTC.c: 80: break;
 15054  001F36  D090               	goto	i2l5781
 15055  001F38                     i2l5759:
 15056                           
 15057                           ;RTC.c: 82: strcpy(month, "APR");
 15058  001F38  0E3D               	movlw	low i2printRTC@month
 15059  001F3A  6E01               	movwf	i2strcpy@to,c
 15060  001F3C  0E00               	movlw	high i2printRTC@month
 15061  001F3E  6E02               	movwf	i2strcpy@to+1,c
 15062  001F40  0EEA               	movlw	low STR_11
 15063  001F42  6E03               	movwf	i2strcpy@from,c
 15064  001F44  0EFF               	movlw	high STR_11
 15065  001F46  6E04               	movwf	i2strcpy@from+1,c
 15066  001F48  ECE2  F01D         	call	i2_strcpy	;wreg free
 15067                           
 15068                           ;RTC.c: 83: break;
 15069  001F4C  D085               	goto	i2l5781
 15070  001F4E                     i2l5761:
 15071                           
 15072                           ;RTC.c: 85: strcpy(month, "MAY");
 15073  001F4E  0E3D               	movlw	low i2printRTC@month
 15074  001F50  6E01               	movwf	i2strcpy@to,c
 15075  001F52  0E00               	movlw	high i2printRTC@month
 15076  001F54  6E02               	movwf	i2strcpy@to+1,c
 15077  001F56  0EFA               	movlw	low STR_12
 15078  001F58  6E03               	movwf	i2strcpy@from,c
 15079  001F5A  0EFF               	movlw	high STR_12
 15080  001F5C  6E04               	movwf	i2strcpy@from+1,c
 15081  001F5E  ECE2  F01D         	call	i2_strcpy	;wreg free
 15082                           
 15083                           ;RTC.c: 86: break;
 15084  001F62  D07A               	goto	i2l5781
 15085  001F64                     i2l5763:
 15086                           
 15087                           ;RTC.c: 88: strcpy(month, "JUN");
 15088  001F64  0E3D               	movlw	low i2printRTC@month
 15089  001F66  6E01               	movwf	i2strcpy@to,c
 15090  001F68  0E00               	movlw	high i2printRTC@month
 15091  001F6A  6E02               	movwf	i2strcpy@to+1,c
 15092  001F6C  0EDE               	movlw	low STR_13
 15093  001F6E  6E03               	movwf	i2strcpy@from,c
 15094  001F70  0EFF               	movlw	high STR_13
 15095  001F72  6E04               	movwf	i2strcpy@from+1,c
 15096  001F74  ECE2  F01D         	call	i2_strcpy	;wreg free
 15097                           
 15098                           ;RTC.c: 89: break;
 15099  001F78  D06F               	goto	i2l5781
 15100  001F7A                     i2l5765:
 15101                           
 15102                           ;RTC.c: 91: strcpy(month, "JUL");
 15103  001F7A  0E3D               	movlw	low i2printRTC@month
 15104  001F7C  6E01               	movwf	i2strcpy@to,c
 15105  001F7E  0E00               	movlw	high i2printRTC@month
 15106  001F80  6E02               	movwf	i2strcpy@to+1,c
 15107  001F82  0ED6               	movlw	low STR_14
 15108  001F84  6E03               	movwf	i2strcpy@from,c
 15109  001F86  0EFF               	movlw	high STR_14
 15110  001F88  6E04               	movwf	i2strcpy@from+1,c
 15111  001F8A  ECE2  F01D         	call	i2_strcpy	;wreg free
 15112                           
 15113                           ;RTC.c: 92: break;
 15114  001F8E  D064               	goto	i2l5781
 15115  001F90                     i2l5767:
 15116                           
 15117                           ;RTC.c: 94: strcpy(month, "AUG");
 15118  001F90  0E3D               	movlw	low i2printRTC@month
 15119  001F92  6E01               	movwf	i2strcpy@to,c
 15120  001F94  0E00               	movlw	high i2printRTC@month
 15121  001F96  6E02               	movwf	i2strcpy@to+1,c
 15122  001F98  0ED2               	movlw	low STR_15
 15123  001F9A  6E03               	movwf	i2strcpy@from,c
 15124  001F9C  0EFF               	movlw	high STR_15
 15125  001F9E  6E04               	movwf	i2strcpy@from+1,c
 15126  001FA0  ECE2  F01D         	call	i2_strcpy	;wreg free
 15127                           
 15128                           ;RTC.c: 95: break;
 15129  001FA4  D059               	goto	i2l5781
 15130  001FA6                     i2l5769:
 15131                           
 15132                           ;RTC.c: 97: strcpy(month, "SEP");
 15133  001FA6  0E3D               	movlw	low i2printRTC@month
 15134  001FA8  6E01               	movwf	i2strcpy@to,c
 15135  001FAA  0E00               	movlw	high i2printRTC@month
 15136  001FAC  6E02               	movwf	i2strcpy@to+1,c
 15137  001FAE  0EE2               	movlw	low STR_16
 15138  001FB0  6E03               	movwf	i2strcpy@from,c
 15139  001FB2  0EFF               	movlw	high STR_16
 15140  001FB4  6E04               	movwf	i2strcpy@from+1,c
 15141  001FB6  ECE2  F01D         	call	i2_strcpy	;wreg free
 15142                           
 15143                           ;RTC.c: 98: break;
 15144  001FBA  D04E               	goto	i2l5781
 15145  001FBC                     i2l5771:
 15146                           
 15147                           ;RTC.c: 100: strcpy(month, "OCT");
 15148  001FBC  0E3D               	movlw	low i2printRTC@month
 15149  001FBE  6E01               	movwf	i2strcpy@to,c
 15150  001FC0  0E00               	movlw	high i2printRTC@month
 15151  001FC2  6E02               	movwf	i2strcpy@to+1,c
 15152  001FC4  0EF2               	movlw	low STR_17
 15153  001FC6  6E03               	movwf	i2strcpy@from,c
 15154  001FC8  0EFF               	movlw	high STR_17
 15155  001FCA  6E04               	movwf	i2strcpy@from+1,c
 15156  001FCC  ECE2  F01D         	call	i2_strcpy	;wreg free
 15157                           
 15158                           ;RTC.c: 101: break;
 15159  001FD0  D043               	goto	i2l5781
 15160  001FD2                     i2l5773:
 15161                           
 15162                           ;RTC.c: 103: strcpy(month, "NOV");
 15163  001FD2  0E3D               	movlw	low i2printRTC@month
 15164  001FD4  6E01               	movwf	i2strcpy@to,c
 15165  001FD6  0E00               	movlw	high i2printRTC@month
 15166  001FD8  6E02               	movwf	i2strcpy@to+1,c
 15167  001FDA  0EF6               	movlw	low STR_18
 15168  001FDC  6E03               	movwf	i2strcpy@from,c
 15169  001FDE  0EFF               	movlw	high STR_18
 15170  001FE0  6E04               	movwf	i2strcpy@from+1,c
 15171  001FE2  ECE2  F01D         	call	i2_strcpy	;wreg free
 15172                           
 15173                           ;RTC.c: 104: break;
 15174  001FE6  D038               	goto	i2l5781
 15175  001FE8                     i2l5775:
 15176                           
 15177                           ;RTC.c: 106: strcpy(month, "DEC");
 15178  001FE8  0E3D               	movlw	low i2printRTC@month
 15179  001FEA  6E01               	movwf	i2strcpy@to,c
 15180  001FEC  0E00               	movlw	high i2printRTC@month
 15181  001FEE  6E02               	movwf	i2strcpy@to+1,c
 15182  001FF0  0ECE               	movlw	low STR_19
 15183  001FF2  6E03               	movwf	i2strcpy@from,c
 15184  001FF4  0EFF               	movlw	high STR_19
 15185  001FF6  6E04               	movwf	i2strcpy@from+1,c
 15186  001FF8  ECE2  F01D         	call	i2_strcpy	;wreg free
 15187                           
 15188                           ;RTC.c: 108: }
 15189                           
 15190                           ;RTC.c: 107: break;
 15191  001FFC  D02D               	goto	i2l5781
 15192  001FFE                     i2l5779:
 15193  001FFE  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 15194  002002  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 15195                           
 15196                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15197                           ; Switch size 1, requested type "space"
 15198                           ; Number of cases is 1, Range of values is 0 to 0
 15199                           ; switch strategies available:
 15200                           ; Name         Instructions Cycles
 15201                           ; simple_byte            4     3 (average)
 15202                           ;	Chosen strategy is simple_byte
 15203  002006  502B               	movf	??i2_printRTC+1,w,c
 15204  002008  0A00               	xorlw	0	; case 0
 15205  00200A  A4D8               	btfss	status,2,c
 15206  00200C  D025               	goto	i2l5781
 15207                           
 15208                           ; Switch size 1, requested type "space"
 15209                           ; Number of cases is 12, Range of values is 1 to 12
 15210                           ; switch strategies available:
 15211                           ; Name         Instructions Cycles
 15212                           ; simple_byte           37    19 (average)
 15213                           ;	Chosen strategy is simple_byte
 15214  00200E  502A               	movf	??i2_printRTC,w,c
 15215  002010  0A01               	xorlw	1	; case 1
 15216  002012  B4D8               	btfsc	status,2,c
 15217  002014  D770               	goto	i2l5753
 15218  002016  0A03               	xorlw	3	; case 2
 15219  002018  B4D8               	btfsc	status,2,c
 15220  00201A  D778               	goto	i2l5755
 15221  00201C  0A01               	xorlw	1	; case 3
 15222  00201E  B4D8               	btfsc	status,2,c
 15223  002020  D780               	goto	i2l5757
 15224  002022  0A07               	xorlw	7	; case 4
 15225  002024  B4D8               	btfsc	status,2,c
 15226  002026  D788               	goto	i2l5759
 15227  002028  0A01               	xorlw	1	; case 5
 15228  00202A  B4D8               	btfsc	status,2,c
 15229  00202C  D790               	goto	i2l5761
 15230  00202E  0A03               	xorlw	3	; case 6
 15231  002030  B4D8               	btfsc	status,2,c
 15232  002032  D798               	goto	i2l5763
 15233  002034  0A01               	xorlw	1	; case 7
 15234  002036  B4D8               	btfsc	status,2,c
 15235  002038  D7A0               	goto	i2l5765
 15236  00203A  0A0F               	xorlw	15	; case 8
 15237  00203C  B4D8               	btfsc	status,2,c
 15238  00203E  D7A8               	goto	i2l5767
 15239  002040  0A01               	xorlw	1	; case 9
 15240  002042  B4D8               	btfsc	status,2,c
 15241  002044  D7B0               	goto	i2l5769
 15242  002046  0A03               	xorlw	3	; case 10
 15243  002048  B4D8               	btfsc	status,2,c
 15244  00204A  D7B8               	goto	i2l5771
 15245  00204C  0A01               	xorlw	1	; case 11
 15246  00204E  B4D8               	btfsc	status,2,c
 15247  002050  D7C0               	goto	i2l5773
 15248  002052  0A07               	xorlw	7	; case 12
 15249  002054  B4D8               	btfsc	status,2,c
 15250  002056  D7C8               	goto	i2l5775
 15251  002058                     i2l5781:
 15252                           
 15253                           ;RTC.c: 109: lcdInst(0b10000000);;
 15254  002058  0E80               	movlw	128
 15255  00205A  EC1C  F020         	call	i2_lcdInst
 15256                           
 15257                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 15258  00205E  0E8C               	movlw	low STR_21
 15259  002060  6E0D               	movwf	i2printf@f,c
 15260  002062  0EFB               	movlw	high STR_21
 15261  002064  6E0E               	movwf	i2printf@f+1,c
 15262  002066  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 15263  00206A  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 15264  00206E  0E3D               	movlw	low i2printRTC@month
 15265  002070  6E11               	movwf	?i2_printf+4,c
 15266  002072  0E00               	movlw	high i2printRTC@month
 15267  002074  6E12               	movwf	?i2_printf+5,c
 15268  002076  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 15269  00207A  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 15270  00207E  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 15271  002082  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 15272  002086  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 15273  00208A  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 15274  00208E  ECB3  F00A         	call	i2_printf	;wreg free
 15275  002092  0012               	return		;funcret
 15276  002094                     __end_ofi2_printRTC:
 15277                           	opt stack 0
 15278                           pclatu	equ	0xFFB
 15279                           pclath	equ	0xFFA
 15280                           tblptru	equ	0xFF8
 15281                           tblptrh	equ	0xFF7
 15282                           tblptrl	equ	0xFF6
 15283                           tablat	equ	0xFF5
 15284                           prodh	equ	0xFF4
 15285                           prodl	equ	0xFF3
 15286                           intcon	equ	0xFF2
 15287                           intcon2	equ	0xFF1
 15288                           intcon3	equ	0xFF0
 15289                           indf0	equ	0xFEF
 15290                           postinc0	equ	0xFEE
 15291                           fsr0h	equ	0xFEA
 15292                           fsr0l	equ	0xFE9
 15293                           wreg	equ	0xFE8
 15294                           postdec1	equ	0xFE5
 15295                           fsr1h	equ	0xFE2
 15296                           fsr1l	equ	0xFE1
 15297                           indf2	equ	0xFDF
 15298                           postinc2	equ	0xFDE
 15299                           postdec2	equ	0xFDD
 15300                           fsr2h	equ	0xFDA
 15301                           fsr2l	equ	0xFD9
 15302                           status	equ	0xFD8
 15303                           
 15304 ;; *************** function i2_strcpy *****************
 15305 ;; Defined at:
 15306 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 15307 ;; Parameters:    Size  Location     Type
 15308 ;;  to              2    0[COMRAM] PTR unsigned char 
 15309 ;;		 -> printRTC@month(4), UI@month(4), 
 15310 ;;  from            2    2[COMRAM] PTR const unsigned char 
 15311 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 15312 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 15313 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 15314 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 15315 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 15316 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 15317 ;;		 -> STR_8(4), 
 15318 ;; Auto vars:     Size  Location     Type
 15319 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 15320 ;;		 -> printRTC@month(4), UI@month(4), 
 15321 ;; Return value:  Size  Location     Type
 15322 ;;                  2    0[COMRAM] PTR unsigned char 
 15323 ;; Registers used:
 15324 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 15325 ;; Tracked objects:
 15326 ;;		On entry : 0/0
 15327 ;;		On exit  : 0/0
 15328 ;;		Unchanged: 0/0
 15329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15330 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15331 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15333 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15334 ;;Total ram usage:        6 bytes
 15335 ;; Hardware stack levels used:    1
 15336 ;; This function calls:
 15337 ;;		Nothing
 15338 ;; This function is called by:
 15339 ;;		i2_printRTC
 15340 ;; This function uses a non-reentrant model
 15341 ;;
 15342                           
 15343                           	psect	text57
 15344  003BC4                     __ptext57:
 15345                           	opt stack 0
 15346  003BC4                     i2_strcpy:
 15347                           	opt stack 20
 15348                           
 15349                           ;incstack = 0
 15350  003BC4  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 15351  003BC8  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 15352  003BCC  D004               	goto	i2l5429
 15353  003BCE                     i2l5427:
 15354  003BCE  4A05               	infsnz	i2strcpy@cp,f,c
 15355  003BD0  2A06               	incf	i2strcpy@cp+1,f,c
 15356  003BD2  4A03               	infsnz	i2strcpy@from,f,c
 15357  003BD4  2A04               	incf	i2strcpy@from+1,f,c
 15358  003BD6                     i2l5429:
 15359  003BD6  C003  FFF6         	movff	i2strcpy@from,tblptrl
 15360  003BDA  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 15361  003BDE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15362  003BDE  6AF8               	clrf	tblptru,c
 15363  003BE0                     	endif
 15364  003BE0                     	if	0	;tblptru may be non-zero
 15365  003BE0                     	endif
 15366  003BE0  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 15367  003BE4  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 15368  003BE8  0008               	tblrd		*
 15369  003BEA  CFF5 FFDF          	movff	tablat,indf2
 15370  003BEE  50DF               	movf	indf2,w,c
 15371  003BF0  B4D8               	btfsc	status,2,c
 15372  003BF2  0012               	return	
 15373  003BF4  D7EC               	goto	i2l5427
 15374  003BF6                     __end_ofi2_strcpy:
 15375                           	opt stack 0
 15376                           pclatu	equ	0xFFB
 15377                           pclath	equ	0xFFA
 15378                           tblptru	equ	0xFF8
 15379                           tblptrh	equ	0xFF7
 15380                           tblptrl	equ	0xFF6
 15381                           tablat	equ	0xFF5
 15382                           prodh	equ	0xFF4
 15383                           prodl	equ	0xFF3
 15384                           intcon	equ	0xFF2
 15385                           intcon2	equ	0xFF1
 15386                           intcon3	equ	0xFF0
 15387                           indf0	equ	0xFEF
 15388                           postinc0	equ	0xFEE
 15389                           fsr0h	equ	0xFEA
 15390                           fsr0l	equ	0xFE9
 15391                           wreg	equ	0xFE8
 15392                           postdec1	equ	0xFE5
 15393                           fsr1h	equ	0xFE2
 15394                           fsr1l	equ	0xFE1
 15395                           indf2	equ	0xFDF
 15396                           postinc2	equ	0xFDE
 15397                           postdec2	equ	0xFDD
 15398                           fsr2h	equ	0xFDA
 15399                           fsr2l	equ	0xFD9
 15400                           status	equ	0xFD8
 15401                           
 15402 ;; *************** function _inputHandler *****************
 15403 ;; Defined at:
 15404 ;;		line 370 in file "UI.c"
 15405 ;; Parameters:    Size  Location     Type
 15406 ;;		None
 15407 ;; Auto vars:     Size  Location     Type
 15408 ;;		None
 15409 ;; Return value:  Size  Location     Type
 15410 ;;                  2   41[COMRAM] int 
 15411 ;; Registers used:
 15412 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15413 ;; Tracked objects:
 15414 ;;		On entry : 0/0
 15415 ;;		On exit  : 0/0
 15416 ;;		Unchanged: 0/0
 15417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15418 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15420 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15421 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15422 ;;Total ram usage:        4 bytes
 15423 ;; Hardware stack levels used:    1
 15424 ;; Hardware stack levels required when called:    4
 15425 ;; This function calls:
 15426 ;;		_change_state_to_logs_11
 15427 ;;		_change_state_to_logs_12
 15428 ;;		_change_state_to_logs_22
 15429 ;;		_change_state_to_logs_23
 15430 ;;		_change_state_to_logs_33
 15431 ;;		_change_state_to_logs_34
 15432 ;;		_change_state_to_menu_11
 15433 ;;		_change_state_to_menu_23
 15434 ;;		i2_change_state_to_menu_12
 15435 ;;		i2_change_state_to_menu_22
 15436 ;; This function is called by:
 15437 ;;		_updateMenu
 15438 ;; This function uses a non-reentrant model
 15439 ;;
 15440                           
 15441                           	psect	text58
 15442  002286                     __ptext58:
 15443                           	opt stack 0
 15444  002286                     _inputHandler:
 15445                           	opt stack 18
 15446                           
 15447                           ;UI.c: 375: if(firstboot){
 15448                           
 15449                           ;incstack = 0
 15450  002286  5075               	movf	_firstboot,w,c
 15451  002288  1076               	iorwf	_firstboot+1,w,c
 15452  00228A  B4D8               	btfsc	status,2,c
 15453  00228C  D00B               	goto	i2l5849
 15454                           
 15455                           ;UI.c: 376: change_state_to_menu_11();
 15456  00228E  EC43  F01E         	call	_change_state_to_menu_11	;wreg free
 15457                           
 15458                           ;UI.c: 377: firstboot = 0;
 15459  002292  0E00               	movlw	0
 15460  002294  6E76               	movwf	_firstboot+1,c
 15461  002296  0E00               	movlw	0
 15462  002298  6E75               	movwf	_firstboot,c
 15463                           
 15464                           ;UI.c: 378: return 0;
 15465  00229A  0E00               	movlw	0
 15466  00229C  6E2B               	movwf	?_inputHandler+1,c
 15467  00229E  0E00               	movlw	0
 15468  0022A0  6E2A               	movwf	?_inputHandler,c
 15469  0022A2  0012               	return	
 15470  0022A4                     i2l5849:
 15471                           
 15472                           ;UI.c: 379: }
 15473                           ;UI.c: 380: if (logstate){
 15474  0022A4  0100               	movlb	0	; () banked
 15475  0022A6  51F6               	movf	_logstate& (0+255),w,b
 15476  0022A8  0100               	movlb	0	; () banked
 15477  0022AA  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 15478  0022AC  B4D8               	btfsc	status,2,c
 15479  0022AE  D0C7               	goto	i2l5967
 15480                           
 15481                           ; BSR set to: 0
 15482                           ;UI.c: 381: if(input == 'C' && PORTBbits.RB1 == 1){
 15483  0022B0  0E43               	movlw	67
 15484  0022B2  187D               	xorwf	_input,w,c	;volatile
 15485  0022B4  A4D8               	btfss	status,2,c
 15486  0022B6  D012               	goto	i2l5867
 15487                           
 15488                           ; BSR set to: 0
 15489  0022B8  B281               	btfsc	3969,1,c	;volatile
 15490  0022BA  D009               	goto	i2l5859
 15491  0022BC  D00F               	goto	i2l5867
 15492  0022BE                     i2l5857:
 15493                           
 15494                           ;UI.c: 384: _delay((unsigned long)((10)*(32000000/4000.0)));
 15495  0022BE  0E68               	movlw	104
 15496  0022C0  6E2C               	movwf	??_inputHandler& (0+255),c
 15497  0022C2  0EE4               	movlw	228
 15498  0022C4                     i2u738_47:
 15499  0022C4  2EE8               	decfsz	wreg,f,c
 15500  0022C6  D7FE               	bra	i2u738_47
 15501  0022C8  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 15502  0022CA  D7FC               	bra	i2u738_47
 15503  0022CC  D000               	nop2	
 15504  0022CE                     i2l5859:
 15505  0022CE  B281               	btfsc	3969,1,c	;volatile
 15506  0022D0  D7F6               	goto	i2l5857
 15507  0022D2                     i2l5861:
 15508                           
 15509                           ;UI.c: 385: }
 15510                           ;UI.c: 386: return 0;
 15511  0022D2  0E00               	movlw	0
 15512  0022D4  6E2B               	movwf	?_inputHandler+1,c
 15513  0022D6  0E00               	movlw	0
 15514  0022D8  6E2A               	movwf	?_inputHandler,c
 15515  0022DA  0012               	return	
 15516  0022DC                     i2l5867:
 15517                           
 15518                           ;UI.c: 388: else if (input == 'D'){
 15519  0022DC  0E44               	movlw	68
 15520  0022DE  187D               	xorwf	_input,w,c	;volatile
 15521  0022E0  A4D8               	btfss	status,2,c
 15522  0022E2  D7F7               	goto	i2l5861
 15523                           
 15524                           ;UI.c: 390: logstate = 0;
 15525  0022E4  0E00               	movlw	0
 15526  0022E6  0100               	movlb	0	; () banked
 15527  0022E8  6FF7               	movwf	(_logstate+1)& (0+255),b
 15528  0022EA  0E00               	movlw	0
 15529  0022EC  6FF6               	movwf	_logstate& (0+255),b
 15530                           
 15531                           ;UI.c: 391: switch(cur_state){
 15532  0022EE  D012               	goto	i2l5885
 15533  0022F0                     i2l5871:
 15534                           
 15535                           ;UI.c: 393: change_state_to_logs_11();
 15536  0022F0  ECBB  F01E         	call	_change_state_to_logs_11	;wreg free
 15537                           
 15538                           ;UI.c: 394: break;
 15539  0022F4  D7EE               	goto	i2l5861
 15540  0022F6                     i2l5873:
 15541                           
 15542                           ;UI.c: 396: change_state_to_logs_12();
 15543  0022F6  ECA3  F01E         	call	_change_state_to_logs_12	;wreg free
 15544                           
 15545                           ;UI.c: 397: break;
 15546  0022FA  D7EB               	goto	i2l5861
 15547  0022FC                     i2l5875:
 15548                           
 15549                           ;UI.c: 399: change_state_to_logs_22();
 15550  0022FC  EC8B  F01E         	call	_change_state_to_logs_22	;wreg free
 15551                           
 15552                           ;UI.c: 400: break;
 15553  002300  D7E8               	goto	i2l5861
 15554  002302                     i2l5877:
 15555                           
 15556                           ;UI.c: 402: change_state_to_logs_23();
 15557  002302  ECEA  F01E         	call	_change_state_to_logs_23	;wreg free
 15558                           
 15559                           ;UI.c: 403: break;
 15560  002306  D7E5               	goto	i2l5861
 15561  002308                     i2l5879:
 15562                           
 15563                           ;UI.c: 405: change_state_to_logs_33();
 15564  002308  EC73  F01E         	call	_change_state_to_logs_33	;wreg free
 15565                           
 15566                           ;UI.c: 406: break;
 15567  00230C  D7E2               	goto	i2l5861
 15568  00230E                     i2l5881:
 15569                           
 15570                           ;UI.c: 408: change_state_to_logs_34();
 15571  00230E  EC5B  F01E         	call	_change_state_to_logs_34	;wreg free
 15572                           
 15573                           ;UI.c: 410: }
 15574                           
 15575                           ;UI.c: 409: break;
 15576  002312  D7DF               	goto	i2l5861
 15577  002314                     i2l5885:
 15578  002314  C0DE  F02C         	movff	_cur_state,??_inputHandler
 15579  002318  C0DF  F02D         	movff	_cur_state+1,??_inputHandler+1
 15580                           
 15581                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 15582                           ; Switch size 1, requested type "space"
 15583                           ; Number of cases is 2, Range of values is 3 to 4
 15584                           ; switch strategies available:
 15585                           ; Name         Instructions Cycles
 15586                           ; simple_byte            7     4 (average)
 15587                           ;	Chosen strategy is simple_byte
 15588  00231C  502D               	movf	??_inputHandler+1,w,c
 15589  00231E  0A03               	xorlw	3	; case 3
 15590  002320  B4D8               	btfsc	status,2,c
 15591  002322  D004               	goto	i2l7827
 15592  002324  0A07               	xorlw	7	; case 4
 15593  002326  B4D8               	btfsc	status,2,c
 15594  002328  D00F               	goto	i2l7829
 15595  00232A  D7D3               	goto	i2l5861
 15596  00232C                     i2l7827:
 15597                           
 15598                           ; Switch size 1, requested type "space"
 15599                           ; Number of cases is 4, Range of values is 243 to 255
 15600                           ; switch strategies available:
 15601                           ; Name         Instructions Cycles
 15602                           ; simple_byte           13     7 (average)
 15603                           ;	Chosen strategy is simple_byte
 15604  00232C  502C               	movf	??_inputHandler,w,c
 15605  00232E  0AF3               	xorlw	243	; case 243
 15606  002330  B4D8               	btfsc	status,2,c
 15607  002332  D7DE               	goto	i2l5871
 15608  002334  0A07               	xorlw	7	; case 244
 15609  002336  B4D8               	btfsc	status,2,c
 15610  002338  D7DE               	goto	i2l5873
 15611  00233A  0A0A               	xorlw	10	; case 254
 15612  00233C  B4D8               	btfsc	status,2,c
 15613  00233E  D7DE               	goto	i2l5875
 15614  002340  0A01               	xorlw	1	; case 255
 15615  002342  B4D8               	btfsc	status,2,c
 15616  002344  D7DE               	goto	i2l5877
 15617  002346  D7C5               	goto	i2l5861
 15618  002348                     i2l7829:
 15619                           
 15620                           ; Switch size 1, requested type "space"
 15621                           ; Number of cases is 2, Range of values is 9 to 10
 15622                           ; switch strategies available:
 15623                           ; Name         Instructions Cycles
 15624                           ; simple_byte            7     4 (average)
 15625                           ;	Chosen strategy is simple_byte
 15626  002348  502C               	movf	??_inputHandler,w,c
 15627  00234A  0A09               	xorlw	9	; case 9
 15628  00234C  B4D8               	btfsc	status,2,c
 15629  00234E  D7DC               	goto	i2l5879
 15630  002350  0A03               	xorlw	3	; case 10
 15631  002352  B4D8               	btfsc	status,2,c
 15632  002354  D7DC               	goto	i2l5881
 15633  002356  D7BD               	goto	i2l5861
 15634  002358                     i2l5897:
 15635                           
 15636                           ;UI.c: 420: if(cur_state == 11){
 15637  002358  0E0B               	movlw	11
 15638  00235A  0100               	movlb	0	; () banked
 15639  00235C  19DE               	xorwf	_cur_state& (0+255),w,b
 15640  00235E  0100               	movlb	0	; () banked
 15641  002360  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 15642  002362  A4D8               	btfss	status,2,c
 15643  002364  D005               	goto	i2l5905
 15644                           
 15645                           ; BSR set to: 0
 15646                           ;UI.c: 421: return 0;
 15647  002366  0E00               	movlw	0
 15648  002368  6E2B               	movwf	?_inputHandler+1,c
 15649  00236A  0E00               	movlw	0
 15650  00236C  6E2A               	movwf	?_inputHandler,c
 15651                           
 15652                           ; BSR set to: 0
 15653  00236E  0012               	return	
 15654  002370                     i2l5905:
 15655                           
 15656                           ; BSR set to: 0
 15657                           ;UI.c: 423: else{
 15658                           ;UI.c: 424: change_state_to_menu_11();
 15659  002370  EC43  F01E         	call	_change_state_to_menu_11	;wreg free
 15660                           
 15661                           ;UI.c: 425: }
 15662                           ;UI.c: 426: return 0;
 15663  002374  0E00               	movlw	0
 15664  002376  6E2B               	movwf	?_inputHandler+1,c
 15665  002378  0E00               	movlw	0
 15666  00237A  6E2A               	movwf	?_inputHandler,c
 15667  00237C  0012               	return	
 15668  00237E                     i2l5911:
 15669                           
 15670                           ;UI.c: 428: if(cur_state == 22 | cur_state == 12){
 15671  00237E  0E16               	movlw	22
 15672  002380  0100               	movlb	0	; () banked
 15673  002382  19DE               	xorwf	_cur_state& (0+255),w,b
 15674  002384  0100               	movlb	0	; () banked
 15675  002386  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 15676  002388  B4D8               	btfsc	status,2,c
 15677  00238A  D007               	goto	i2l5915
 15678                           
 15679                           ; BSR set to: 0
 15680  00238C  0E0C               	movlw	12
 15681  00238E  0100               	movlb	0	; () banked
 15682  002390  19DE               	xorwf	_cur_state& (0+255),w,b
 15683  002392  0100               	movlb	0	; () banked
 15684  002394  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 15685  002396  A4D8               	btfss	status,2,c
 15686  002398  D005               	goto	i2l5921
 15687  00239A                     i2l5915:
 15688                           
 15689                           ; BSR set to: 0
 15690                           ;UI.c: 429: return 0;
 15691  00239A  0E00               	movlw	0
 15692  00239C  6E2B               	movwf	?_inputHandler+1,c
 15693  00239E  0E00               	movlw	0
 15694  0023A0  6E2A               	movwf	?_inputHandler,c
 15695                           
 15696                           ; BSR set to: 0
 15697  0023A2  0012               	return	
 15698  0023A4                     i2l5921:
 15699                           
 15700                           ; BSR set to: 0
 15701                           ;UI.c: 431: else if(cur_state == 23){
 15702  0023A4  0E17               	movlw	23
 15703  0023A6  0100               	movlb	0	; () banked
 15704  0023A8  19DE               	xorwf	_cur_state& (0+255),w,b
 15705  0023AA  0100               	movlb	0	; () banked
 15706  0023AC  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 15707  0023AE  A4D8               	btfss	status,2,c
 15708  0023B0  D003               	goto	i2l5925
 15709                           
 15710                           ; BSR set to: 0
 15711                           ;UI.c: 432: change_state_to_menu_22();
 15712  0023B2  ECFB  F01D         	call	i2_change_state_to_menu_22	;wreg free
 15713                           
 15714                           ;UI.c: 433: }
 15715  0023B6  D002               	goto	i2l5927
 15716  0023B8                     i2l5925:
 15717                           
 15718                           ;UI.c: 434: else{
 15719                           ;UI.c: 435: change_state_to_menu_12();
 15720  0023B8  EC13  F01E         	call	i2_change_state_to_menu_12	;wreg free
 15721  0023BC                     i2l5927:
 15722                           
 15723                           ;UI.c: 436: }
 15724                           ;UI.c: 437: return 0;
 15725  0023BC  0E00               	movlw	0
 15726  0023BE  6E2B               	movwf	?_inputHandler+1,c
 15727  0023C0  0E00               	movlw	0
 15728  0023C2  6E2A               	movwf	?_inputHandler,c
 15729  0023C4  0012               	return	
 15730  0023C6                     i2l5931:
 15731                           
 15732                           ;UI.c: 439: if(cur_state == 23){
 15733  0023C6  0E17               	movlw	23
 15734  0023C8  0100               	movlb	0	; () banked
 15735  0023CA  19DE               	xorwf	_cur_state& (0+255),w,b
 15736  0023CC  0100               	movlb	0	; () banked
 15737  0023CE  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 15738  0023D0  A4D8               	btfss	status,2,c
 15739  0023D2  D005               	goto	i2l5939
 15740                           
 15741                           ; BSR set to: 0
 15742                           ;UI.c: 440: return 0;
 15743  0023D4  0E00               	movlw	0
 15744  0023D6  6E2B               	movwf	?_inputHandler+1,c
 15745  0023D8  0E00               	movlw	0
 15746  0023DA  6E2A               	movwf	?_inputHandler,c
 15747                           
 15748                           ; BSR set to: 0
 15749  0023DC  0012               	return	
 15750  0023DE                     i2l5939:
 15751                           
 15752                           ; BSR set to: 0
 15753                           ;UI.c: 442: else{
 15754                           ;UI.c: 443: change_state_to_menu_23();
 15755  0023DE  EC2B  F01E         	call	_change_state_to_menu_23	;wreg free
 15756                           
 15757                           ;UI.c: 444: }
 15758                           ;UI.c: 445: return 0;
 15759  0023E2  0E00               	movlw	0
 15760  0023E4  6E2B               	movwf	?_inputHandler+1,c
 15761  0023E6  0E00               	movlw	0
 15762  0023E8  6E2A               	movwf	?_inputHandler,c
 15763  0023EA  0012               	return	
 15764  0023EC                     i2l5945:
 15765                           
 15766                           ;UI.c: 448: up = 1;
 15767  0023EC  0E00               	movlw	0
 15768  0023EE  6E78               	movwf	_up+1,c
 15769  0023F0  0E01               	movlw	1
 15770  0023F2  6E77               	movwf	_up,c
 15771                           
 15772                           ;UI.c: 449: return 1;
 15773  0023F4  0E00               	movlw	0
 15774  0023F6  6E2B               	movwf	?_inputHandler+1,c
 15775  0023F8  0E01               	movlw	1
 15776  0023FA  6E2A               	movwf	?_inputHandler,c
 15777  0023FC  0012               	return	
 15778  0023FE                     i2l5949:
 15779                           
 15780                           ;UI.c: 451: down = 1;
 15781  0023FE  0E00               	movlw	0
 15782  002400  6E6A               	movwf	_down+1,c
 15783  002402  0E01               	movlw	1
 15784  002404  6E69               	movwf	_down,c
 15785                           
 15786                           ;UI.c: 452: return 1;
 15787  002406  0E00               	movlw	0
 15788  002408  6E2B               	movwf	?_inputHandler+1,c
 15789  00240A  0E01               	movlw	1
 15790  00240C  6E2A               	movwf	?_inputHandler,c
 15791  00240E  0012               	return	
 15792  002410                     i2l5953:
 15793                           
 15794                           ;UI.c: 454: enter = 1;
 15795  002410  0E00               	movlw	0
 15796  002412  6E6C               	movwf	_enter+1,c
 15797  002414  0E01               	movlw	1
 15798  002416  6E6B               	movwf	_enter,c
 15799                           
 15800                           ;UI.c: 455: return 1;
 15801  002418  0E00               	movlw	0
 15802  00241A  6E2B               	movwf	?_inputHandler+1,c
 15803  00241C  0E01               	movlw	1
 15804  00241E  6E2A               	movwf	?_inputHandler,c
 15805  002420  0012               	return	
 15806  002422                     i2l5957:
 15807                           
 15808                           ;UI.c: 457: back = 1;
 15809  002422  0E00               	movlw	0
 15810  002424  6E5C               	movwf	_back+1,c
 15811  002426  0E01               	movlw	1
 15812  002428  6E5B               	movwf	_back,c
 15813                           
 15814                           ;UI.c: 458: return 1;
 15815  00242A  0E00               	movlw	0
 15816  00242C  6E2B               	movwf	?_inputHandler+1,c
 15817  00242E  0E01               	movlw	1
 15818  002430  6E2A               	movwf	?_inputHandler,c
 15819  002432  0012               	return	
 15820  002434                     i2l5961:
 15821                           
 15822                           ;UI.c: 461: return 1;
 15823  002434  0E00               	movlw	0
 15824  002436  6E2B               	movwf	?_inputHandler+1,c
 15825  002438  0E01               	movlw	1
 15826  00243A  6E2A               	movwf	?_inputHandler,c
 15827                           
 15828                           ;UI.c: 462: }
 15829  00243C  0012               	return	
 15830  00243E                     i2l5967:
 15831  00243E  507D               	movf	_input,w,c	;volatile
 15832                           
 15833                           ; Switch size 1, requested type "space"
 15834                           ; Number of cases is 7, Range of values is 49 to 68
 15835                           ; switch strategies available:
 15836                           ; Name         Instructions Cycles
 15837                           ; simple_byte           22    12 (average)
 15838                           ;	Chosen strategy is simple_byte
 15839  002440  0A31               	xorlw	49	; case 49
 15840  002442  B4D8               	btfsc	status,2,c
 15841  002444  D789               	goto	i2l5897
 15842  002446  0A03               	xorlw	3	; case 50
 15843  002448  B4D8               	btfsc	status,2,c
 15844  00244A  D799               	goto	i2l5911
 15845  00244C  0A01               	xorlw	1	; case 51
 15846  00244E  B4D8               	btfsc	status,2,c
 15847  002450  D7BA               	goto	i2l5931
 15848  002452  0A72               	xorlw	114	; case 65
 15849  002454  B4D8               	btfsc	status,2,c
 15850  002456  D7CA               	goto	i2l5945
 15851  002458  0A03               	xorlw	3	; case 66
 15852  00245A  B4D8               	btfsc	status,2,c
 15853  00245C  D7D0               	goto	i2l5949
 15854  00245E  0A01               	xorlw	1	; case 67
 15855  002460  B4D8               	btfsc	status,2,c
 15856  002462  D7D6               	goto	i2l5953
 15857  002464  0A07               	xorlw	7	; case 68
 15858  002466  B4D8               	btfsc	status,2,c
 15859  002468  D7DC               	goto	i2l5957
 15860  00246A  D7E4               	goto	i2l5961
 15861  00246C                     __end_of_inputHandler:
 15862                           	opt stack 0
 15863                           pclatu	equ	0xFFB
 15864                           pclath	equ	0xFFA
 15865                           tblptru	equ	0xFF8
 15866                           tblptrh	equ	0xFF7
 15867                           tblptrl	equ	0xFF6
 15868                           tablat	equ	0xFF5
 15869                           prodh	equ	0xFF4
 15870                           prodl	equ	0xFF3
 15871                           intcon	equ	0xFF2
 15872                           intcon2	equ	0xFF1
 15873                           intcon3	equ	0xFF0
 15874                           indf0	equ	0xFEF
 15875                           postinc0	equ	0xFEE
 15876                           fsr0h	equ	0xFEA
 15877                           fsr0l	equ	0xFE9
 15878                           wreg	equ	0xFE8
 15879                           postdec1	equ	0xFE5
 15880                           fsr1h	equ	0xFE2
 15881                           fsr1l	equ	0xFE1
 15882                           indf2	equ	0xFDF
 15883                           postinc2	equ	0xFDE
 15884                           postdec2	equ	0xFDD
 15885                           fsr2h	equ	0xFDA
 15886                           fsr2l	equ	0xFD9
 15887                           status	equ	0xFD8
 15888                           
 15889 ;; *************** function i2_change_state_to_menu_22 *****************
 15890 ;; Defined at:
 15891 ;;		line 496 in file "UI.c"
 15892 ;; Parameters:    Size  Location     Type
 15893 ;;		None
 15894 ;; Auto vars:     Size  Location     Type
 15895 ;;		None
 15896 ;; Return value:  Size  Location     Type
 15897 ;;                  1    wreg      void 
 15898 ;; Registers used:
 15899 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15900 ;; Tracked objects:
 15901 ;;		On entry : 0/0
 15902 ;;		On exit  : 0/0
 15903 ;;		Unchanged: 0/0
 15904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15909 ;;Total ram usage:        0 bytes
 15910 ;; Hardware stack levels used:    1
 15911 ;; Hardware stack levels required when called:    3
 15912 ;; This function calls:
 15913 ;;		i2_lcdInst
 15914 ;;		i2_printf
 15915 ;; This function is called by:
 15916 ;;		_updateMenu
 15917 ;;		_inputHandler
 15918 ;; This function uses a non-reentrant model
 15919 ;;
 15920                           
 15921                           	psect	text59
 15922  003BF6                     __ptext59:
 15923                           	opt stack 0
 15924  003BF6                     i2_change_state_to_menu_22:
 15925                           	opt stack 19
 15926                           
 15927                           ;UI.c: 497: cur_state = 22;
 15928                           
 15929                           ;incstack = 0
 15930  003BF6  0E00               	movlw	0
 15931  003BF8  0100               	movlb	0	; () banked
 15932  003BFA  6FDF               	movwf	(_cur_state+1)& (0+255),b
 15933  003BFC  0E16               	movlw	22
 15934  003BFE  6FDE               	movwf	_cur_state& (0+255),b
 15935                           
 15936                           ; BSR set to: 0
 15937                           ;UI.c: 499: lcdInst(0b10000000);;
 15938  003C00  0E80               	movlw	128
 15939  003C02  EC1C  F020         	call	i2_lcdInst
 15940                           
 15941                           ;UI.c: 500: printf("2. SORT        <");
 15942  003C06  0E03               	movlw	low STR_34
 15943  003C08  6E0D               	movwf	i2printf@f,c
 15944  003C0A  0EFE               	movlw	high STR_34
 15945  003C0C  6E0E               	movwf	i2printf@f+1,c
 15946  003C0E  ECB3  F00A         	call	i2_printf	;wreg free
 15947                           
 15948                           ;UI.c: 501: lcdInst(0b11000000);;
 15949  003C12  0EC0               	movlw	192
 15950  003C14  EC1C  F020         	call	i2_lcdInst
 15951                           
 15952                           ;UI.c: 502: printf("3. LOGS         ");
 15953  003C18  0E48               	movlw	low STR_36
 15954  003C1A  6E0D               	movwf	i2printf@f,c
 15955  003C1C  0EFD               	movlw	high STR_36
 15956  003C1E  6E0E               	movwf	i2printf@f+1,c
 15957  003C20  ECB3  F00A         	call	i2_printf	;wreg free
 15958  003C24  0012               	return		;funcret
 15959  003C26                     __end_ofi2_change_state_to_menu_22:
 15960                           	opt stack 0
 15961                           pclatu	equ	0xFFB
 15962                           pclath	equ	0xFFA
 15963                           tblptru	equ	0xFF8
 15964                           tblptrh	equ	0xFF7
 15965                           tblptrl	equ	0xFF6
 15966                           tablat	equ	0xFF5
 15967                           prodh	equ	0xFF4
 15968                           prodl	equ	0xFF3
 15969                           intcon	equ	0xFF2
 15970                           intcon2	equ	0xFF1
 15971                           intcon3	equ	0xFF0
 15972                           indf0	equ	0xFEF
 15973                           postinc0	equ	0xFEE
 15974                           fsr0h	equ	0xFEA
 15975                           fsr0l	equ	0xFE9
 15976                           wreg	equ	0xFE8
 15977                           postdec1	equ	0xFE5
 15978                           fsr1h	equ	0xFE2
 15979                           fsr1l	equ	0xFE1
 15980                           indf2	equ	0xFDF
 15981                           postinc2	equ	0xFDE
 15982                           postdec2	equ	0xFDD
 15983                           fsr2h	equ	0xFDA
 15984                           fsr2l	equ	0xFD9
 15985                           status	equ	0xFD8
 15986                           
 15987 ;; *************** function i2_change_state_to_menu_12 *****************
 15988 ;; Defined at:
 15989 ;;		line 488 in file "UI.c"
 15990 ;; Parameters:    Size  Location     Type
 15991 ;;		None
 15992 ;; Auto vars:     Size  Location     Type
 15993 ;;		None
 15994 ;; Return value:  Size  Location     Type
 15995 ;;                  1    wreg      void 
 15996 ;; Registers used:
 15997 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15998 ;; Tracked objects:
 15999 ;;		On entry : 0/0
 16000 ;;		On exit  : 0/0
 16001 ;;		Unchanged: 0/0
 16002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16006 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16007 ;;Total ram usage:        0 bytes
 16008 ;; Hardware stack levels used:    1
 16009 ;; Hardware stack levels required when called:    3
 16010 ;; This function calls:
 16011 ;;		i2_lcdInst
 16012 ;;		i2_printf
 16013 ;; This function is called by:
 16014 ;;		_updateMenu
 16015 ;;		_inputHandler
 16016 ;; This function uses a non-reentrant model
 16017 ;;
 16018                           
 16019                           	psect	text60
 16020  003C26                     __ptext60:
 16021                           	opt stack 0
 16022  003C26                     i2_change_state_to_menu_12:
 16023                           	opt stack 19
 16024                           
 16025                           ;UI.c: 489: cur_state = 12;
 16026                           
 16027                           ;incstack = 0
 16028  003C26  0E00               	movlw	0
 16029  003C28  0100               	movlb	0	; () banked
 16030  003C2A  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16031  003C2C  0E0C               	movlw	12
 16032  003C2E  6FDE               	movwf	_cur_state& (0+255),b
 16033                           
 16034                           ; BSR set to: 0
 16035                           ;UI.c: 491: lcdInst(0b10000000);;
 16036  003C30  0E80               	movlw	128
 16037  003C32  EC1C  F020         	call	i2_lcdInst
 16038                           
 16039                           ;UI.c: 492: printf("1. DATE/TIME    ");
 16040  003C36  0E6A               	movlw	low STR_33
 16041  003C38  6E0D               	movwf	i2printf@f,c
 16042  003C3A  0EFD               	movlw	high STR_33
 16043  003C3C  6E0E               	movwf	i2printf@f+1,c
 16044  003C3E  ECB3  F00A         	call	i2_printf	;wreg free
 16045                           
 16046                           ;UI.c: 493: lcdInst(0b11000000);;
 16047  003C42  0EC0               	movlw	192
 16048  003C44  EC1C  F020         	call	i2_lcdInst
 16049                           
 16050                           ;UI.c: 494: printf("2. SORT        <");
 16051  003C48  0E03               	movlw	low STR_34
 16052  003C4A  6E0D               	movwf	i2printf@f,c
 16053  003C4C  0EFE               	movlw	high STR_34
 16054  003C4E  6E0E               	movwf	i2printf@f+1,c
 16055  003C50  ECB3  F00A         	call	i2_printf	;wreg free
 16056  003C54  0012               	return		;funcret
 16057  003C56                     __end_ofi2_change_state_to_menu_12:
 16058                           	opt stack 0
 16059                           pclatu	equ	0xFFB
 16060                           pclath	equ	0xFFA
 16061                           tblptru	equ	0xFF8
 16062                           tblptrh	equ	0xFF7
 16063                           tblptrl	equ	0xFF6
 16064                           tablat	equ	0xFF5
 16065                           prodh	equ	0xFF4
 16066                           prodl	equ	0xFF3
 16067                           intcon	equ	0xFF2
 16068                           intcon2	equ	0xFF1
 16069                           intcon3	equ	0xFF0
 16070                           indf0	equ	0xFEF
 16071                           postinc0	equ	0xFEE
 16072                           fsr0h	equ	0xFEA
 16073                           fsr0l	equ	0xFE9
 16074                           wreg	equ	0xFE8
 16075                           postdec1	equ	0xFE5
 16076                           fsr1h	equ	0xFE2
 16077                           fsr1l	equ	0xFE1
 16078                           indf2	equ	0xFDF
 16079                           postinc2	equ	0xFDE
 16080                           postdec2	equ	0xFDD
 16081                           fsr2h	equ	0xFDA
 16082                           fsr2l	equ	0xFD9
 16083                           status	equ	0xFD8
 16084                           
 16085 ;; *************** function _change_state_to_menu_23 *****************
 16086 ;; Defined at:
 16087 ;;		line 504 in file "UI.c"
 16088 ;; Parameters:    Size  Location     Type
 16089 ;;		None
 16090 ;; Auto vars:     Size  Location     Type
 16091 ;;		None
 16092 ;; Return value:  Size  Location     Type
 16093 ;;                  1    wreg      void 
 16094 ;; Registers used:
 16095 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16096 ;; Tracked objects:
 16097 ;;		On entry : 0/0
 16098 ;;		On exit  : 0/0
 16099 ;;		Unchanged: 0/0
 16100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16105 ;;Total ram usage:        0 bytes
 16106 ;; Hardware stack levels used:    1
 16107 ;; Hardware stack levels required when called:    3
 16108 ;; This function calls:
 16109 ;;		i2_lcdInst
 16110 ;;		i2_printf
 16111 ;; This function is called by:
 16112 ;;		_updateMenu
 16113 ;;		_inputHandler
 16114 ;; This function uses a non-reentrant model
 16115 ;;
 16116                           
 16117                           	psect	text61
 16118  003C56                     __ptext61:
 16119                           	opt stack 0
 16120  003C56                     _change_state_to_menu_23:
 16121                           	opt stack 18
 16122                           
 16123                           ;UI.c: 505: cur_state = 23;
 16124                           
 16125                           ;incstack = 0
 16126  003C56  0E00               	movlw	0
 16127  003C58  0100               	movlb	0	; () banked
 16128  003C5A  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16129  003C5C  0E17               	movlw	23
 16130  003C5E  6FDE               	movwf	_cur_state& (0+255),b
 16131                           
 16132                           ; BSR set to: 0
 16133                           ;UI.c: 507: lcdInst(0b10000000);;
 16134  003C60  0E80               	movlw	128
 16135  003C62  EC1C  F020         	call	i2_lcdInst
 16136                           
 16137                           ;UI.c: 508: printf("2. SORT         ");
 16138  003C66  0E59               	movlw	low STR_32
 16139  003C68  6E0D               	movwf	i2printf@f,c
 16140  003C6A  0EFD               	movlw	high STR_32
 16141  003C6C  6E0E               	movwf	i2printf@f+1,c
 16142  003C6E  ECB3  F00A         	call	i2_printf	;wreg free
 16143                           
 16144                           ;UI.c: 509: lcdInst(0b11000000);;
 16145  003C72  0EC0               	movlw	192
 16146  003C74  EC1C  F020         	call	i2_lcdInst
 16147                           
 16148                           ;UI.c: 510: printf("3. LOGS        <");
 16149  003C78  0EF2               	movlw	low STR_38
 16150  003C7A  6E0D               	movwf	i2printf@f,c
 16151  003C7C  0EFD               	movlw	high STR_38
 16152  003C7E  6E0E               	movwf	i2printf@f+1,c
 16153  003C80  ECB3  F00A         	call	i2_printf	;wreg free
 16154  003C84  0012               	return		;funcret
 16155  003C86                     __end_of_change_state_to_menu_23:
 16156                           	opt stack 0
 16157                           pclatu	equ	0xFFB
 16158                           pclath	equ	0xFFA
 16159                           tblptru	equ	0xFF8
 16160                           tblptrh	equ	0xFF7
 16161                           tblptrl	equ	0xFF6
 16162                           tablat	equ	0xFF5
 16163                           prodh	equ	0xFF4
 16164                           prodl	equ	0xFF3
 16165                           intcon	equ	0xFF2
 16166                           intcon2	equ	0xFF1
 16167                           intcon3	equ	0xFF0
 16168                           indf0	equ	0xFEF
 16169                           postinc0	equ	0xFEE
 16170                           fsr0h	equ	0xFEA
 16171                           fsr0l	equ	0xFE9
 16172                           wreg	equ	0xFE8
 16173                           postdec1	equ	0xFE5
 16174                           fsr1h	equ	0xFE2
 16175                           fsr1l	equ	0xFE1
 16176                           indf2	equ	0xFDF
 16177                           postinc2	equ	0xFDE
 16178                           postdec2	equ	0xFDD
 16179                           fsr2h	equ	0xFDA
 16180                           fsr2l	equ	0xFD9
 16181                           status	equ	0xFD8
 16182                           
 16183 ;; *************** function _change_state_to_menu_11 *****************
 16184 ;; Defined at:
 16185 ;;		line 480 in file "UI.c"
 16186 ;; Parameters:    Size  Location     Type
 16187 ;;		None
 16188 ;; Auto vars:     Size  Location     Type
 16189 ;;		None
 16190 ;; Return value:  Size  Location     Type
 16191 ;;                  1    wreg      void 
 16192 ;; Registers used:
 16193 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16194 ;; Tracked objects:
 16195 ;;		On entry : 0/0
 16196 ;;		On exit  : 0/0
 16197 ;;		Unchanged: 0/0
 16198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16203 ;;Total ram usage:        0 bytes
 16204 ;; Hardware stack levels used:    1
 16205 ;; Hardware stack levels required when called:    3
 16206 ;; This function calls:
 16207 ;;		i2_lcdInst
 16208 ;;		i2_printf
 16209 ;; This function is called by:
 16210 ;;		_updateMenu
 16211 ;;		_inputHandler
 16212 ;; This function uses a non-reentrant model
 16213 ;;
 16214                           
 16215                           	psect	text62
 16216  003C86                     __ptext62:
 16217                           	opt stack 0
 16218  003C86                     _change_state_to_menu_11:
 16219                           	opt stack 18
 16220                           
 16221                           ;UI.c: 481: cur_state = 11;
 16222                           
 16223                           ;incstack = 0
 16224  003C86  0E00               	movlw	0
 16225  003C88  0100               	movlb	0	; () banked
 16226  003C8A  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16227  003C8C  0E0B               	movlw	11
 16228  003C8E  6FDE               	movwf	_cur_state& (0+255),b
 16229                           
 16230                           ; BSR set to: 0
 16231                           ;UI.c: 483: lcdInst(0b10000000);;
 16232  003C90  0E80               	movlw	128
 16233  003C92  EC1C  F020         	call	i2_lcdInst
 16234                           
 16235                           ;UI.c: 484: printf("1. DATE/TIME   <");
 16236  003C96  0E14               	movlw	low STR_31
 16237  003C98  6E0D               	movwf	i2printf@f,c
 16238  003C9A  0EFE               	movlw	high STR_31
 16239  003C9C  6E0E               	movwf	i2printf@f+1,c
 16240  003C9E  ECB3  F00A         	call	i2_printf	;wreg free
 16241                           
 16242                           ;UI.c: 485: lcdInst(0b11000000);;
 16243  003CA2  0EC0               	movlw	192
 16244  003CA4  EC1C  F020         	call	i2_lcdInst
 16245                           
 16246                           ;UI.c: 486: printf("2. SORT         ");
 16247  003CA8  0E59               	movlw	low STR_32
 16248  003CAA  6E0D               	movwf	i2printf@f,c
 16249  003CAC  0EFD               	movlw	high STR_32
 16250  003CAE  6E0E               	movwf	i2printf@f+1,c
 16251  003CB0  ECB3  F00A         	call	i2_printf	;wreg free
 16252  003CB4  0012               	return		;funcret
 16253  003CB6                     __end_of_change_state_to_menu_11:
 16254                           	opt stack 0
 16255                           pclatu	equ	0xFFB
 16256                           pclath	equ	0xFFA
 16257                           tblptru	equ	0xFF8
 16258                           tblptrh	equ	0xFF7
 16259                           tblptrl	equ	0xFF6
 16260                           tablat	equ	0xFF5
 16261                           prodh	equ	0xFF4
 16262                           prodl	equ	0xFF3
 16263                           intcon	equ	0xFF2
 16264                           intcon2	equ	0xFF1
 16265                           intcon3	equ	0xFF0
 16266                           indf0	equ	0xFEF
 16267                           postinc0	equ	0xFEE
 16268                           fsr0h	equ	0xFEA
 16269                           fsr0l	equ	0xFE9
 16270                           wreg	equ	0xFE8
 16271                           postdec1	equ	0xFE5
 16272                           fsr1h	equ	0xFE2
 16273                           fsr1l	equ	0xFE1
 16274                           indf2	equ	0xFDF
 16275                           postinc2	equ	0xFDE
 16276                           postdec2	equ	0xFDD
 16277                           fsr2h	equ	0xFDA
 16278                           fsr2l	equ	0xFD9
 16279                           status	equ	0xFD8
 16280                           
 16281 ;; *************** function _change_state_to_logs_34 *****************
 16282 ;; Defined at:
 16283 ;;		line 547 in file "UI.c"
 16284 ;; Parameters:    Size  Location     Type
 16285 ;;		None
 16286 ;; Auto vars:     Size  Location     Type
 16287 ;;		None
 16288 ;; Return value:  Size  Location     Type
 16289 ;;                  1    wreg      void 
 16290 ;; Registers used:
 16291 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16292 ;; Tracked objects:
 16293 ;;		On entry : 0/0
 16294 ;;		On exit  : 0/0
 16295 ;;		Unchanged: 0/0
 16296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16300 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16301 ;;Total ram usage:        0 bytes
 16302 ;; Hardware stack levels used:    1
 16303 ;; Hardware stack levels required when called:    3
 16304 ;; This function calls:
 16305 ;;		i2_lcdInst
 16306 ;;		i2_printf
 16307 ;; This function is called by:
 16308 ;;		_updateMenu
 16309 ;;		_inputHandler
 16310 ;; This function uses a non-reentrant model
 16311 ;;
 16312                           
 16313                           	psect	text63
 16314  003CB6                     __ptext63:
 16315                           	opt stack 0
 16316  003CB6                     _change_state_to_logs_34:
 16317                           	opt stack 18
 16318                           
 16319                           ;UI.c: 548: cur_state = 1034;
 16320                           
 16321                           ;incstack = 0
 16322  003CB6  0E04               	movlw	4
 16323  003CB8  0100               	movlb	0	; () banked
 16324  003CBA  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16325  003CBC  0E0A               	movlw	10
 16326  003CBE  6FDE               	movwf	_cur_state& (0+255),b
 16327                           
 16328                           ; BSR set to: 0
 16329                           ;UI.c: 549: lcdInst(0b10000000);;
 16330  003CC0  0E80               	movlw	128
 16331  003CC2  EC1C  F020         	call	i2_lcdInst
 16332                           
 16333                           ;UI.c: 550: printf("LOG 3           ");
 16334  003CC6  0E26               	movlw	low STR_44
 16335  003CC8  6E0D               	movwf	i2printf@f,c
 16336  003CCA  0EFD               	movlw	high STR_44
 16337  003CCC  6E0E               	movwf	i2printf@f+1,c
 16338  003CCE  ECB3  F00A         	call	i2_printf	;wreg free
 16339                           
 16340                           ;UI.c: 551: lcdInst(0b11000000);;
 16341  003CD2  0EC0               	movlw	192
 16342  003CD4  EC1C  F020         	call	i2_lcdInst
 16343                           
 16344                           ;UI.c: 552: printf("LOG 4          <");
 16345  003CD8  0EE1               	movlw	low STR_50
 16346  003CDA  6E0D               	movwf	i2printf@f,c
 16347  003CDC  0EFD               	movlw	high STR_50
 16348  003CDE  6E0E               	movwf	i2printf@f+1,c
 16349  003CE0  ECB3  F00A         	call	i2_printf	;wreg free
 16350  003CE4  0012               	return		;funcret
 16351  003CE6                     __end_of_change_state_to_logs_34:
 16352                           	opt stack 0
 16353                           pclatu	equ	0xFFB
 16354                           pclath	equ	0xFFA
 16355                           tblptru	equ	0xFF8
 16356                           tblptrh	equ	0xFF7
 16357                           tblptrl	equ	0xFF6
 16358                           tablat	equ	0xFF5
 16359                           prodh	equ	0xFF4
 16360                           prodl	equ	0xFF3
 16361                           intcon	equ	0xFF2
 16362                           intcon2	equ	0xFF1
 16363                           intcon3	equ	0xFF0
 16364                           indf0	equ	0xFEF
 16365                           postinc0	equ	0xFEE
 16366                           fsr0h	equ	0xFEA
 16367                           fsr0l	equ	0xFE9
 16368                           wreg	equ	0xFE8
 16369                           postdec1	equ	0xFE5
 16370                           fsr1h	equ	0xFE2
 16371                           fsr1l	equ	0xFE1
 16372                           indf2	equ	0xFDF
 16373                           postinc2	equ	0xFDE
 16374                           postdec2	equ	0xFDD
 16375                           fsr2h	equ	0xFDA
 16376                           fsr2l	equ	0xFD9
 16377                           status	equ	0xFD8
 16378                           
 16379 ;; *************** function _change_state_to_logs_33 *****************
 16380 ;; Defined at:
 16381 ;;		line 540 in file "UI.c"
 16382 ;; Parameters:    Size  Location     Type
 16383 ;;		None
 16384 ;; Auto vars:     Size  Location     Type
 16385 ;;		None
 16386 ;; Return value:  Size  Location     Type
 16387 ;;                  1    wreg      void 
 16388 ;; Registers used:
 16389 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16390 ;; Tracked objects:
 16391 ;;		On entry : 0/0
 16392 ;;		On exit  : 0/0
 16393 ;;		Unchanged: 0/0
 16394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16399 ;;Total ram usage:        0 bytes
 16400 ;; Hardware stack levels used:    1
 16401 ;; Hardware stack levels required when called:    3
 16402 ;; This function calls:
 16403 ;;		i2_lcdInst
 16404 ;;		i2_printf
 16405 ;; This function is called by:
 16406 ;;		_updateMenu
 16407 ;;		_inputHandler
 16408 ;; This function uses a non-reentrant model
 16409 ;;
 16410                           
 16411                           	psect	text64
 16412  003CE6                     __ptext64:
 16413                           	opt stack 0
 16414  003CE6                     _change_state_to_logs_33:
 16415                           	opt stack 18
 16416                           
 16417                           ;UI.c: 541: cur_state = 1033;
 16418                           
 16419                           ;incstack = 0
 16420  003CE6  0E04               	movlw	4
 16421  003CE8  0100               	movlb	0	; () banked
 16422  003CEA  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16423  003CEC  0E09               	movlw	9
 16424  003CEE  6FDE               	movwf	_cur_state& (0+255),b
 16425                           
 16426                           ; BSR set to: 0
 16427                           ;UI.c: 542: lcdInst(0b10000000);;
 16428  003CF0  0E80               	movlw	128
 16429  003CF2  EC1C  F020         	call	i2_lcdInst
 16430                           
 16431                           ;UI.c: 543: printf("LOG 3          <");
 16432  003CF6  0ED0               	movlw	low STR_46
 16433  003CF8  6E0D               	movwf	i2printf@f,c
 16434  003CFA  0EFD               	movlw	high STR_46
 16435  003CFC  6E0E               	movwf	i2printf@f+1,c
 16436  003CFE  ECB3  F00A         	call	i2_printf	;wreg free
 16437                           
 16438                           ;UI.c: 544: lcdInst(0b11000000);;
 16439  003D02  0EC0               	movlw	192
 16440  003D04  EC1C  F020         	call	i2_lcdInst
 16441                           
 16442                           ;UI.c: 545: printf("LOG 4           ");
 16443  003D08  0E37               	movlw	low STR_48
 16444  003D0A  6E0D               	movwf	i2printf@f,c
 16445  003D0C  0EFD               	movlw	high STR_48
 16446  003D0E  6E0E               	movwf	i2printf@f+1,c
 16447  003D10  ECB3  F00A         	call	i2_printf	;wreg free
 16448  003D14  0012               	return		;funcret
 16449  003D16                     __end_of_change_state_to_logs_33:
 16450                           	opt stack 0
 16451                           pclatu	equ	0xFFB
 16452                           pclath	equ	0xFFA
 16453                           tblptru	equ	0xFF8
 16454                           tblptrh	equ	0xFF7
 16455                           tblptrl	equ	0xFF6
 16456                           tablat	equ	0xFF5
 16457                           prodh	equ	0xFF4
 16458                           prodl	equ	0xFF3
 16459                           intcon	equ	0xFF2
 16460                           intcon2	equ	0xFF1
 16461                           intcon3	equ	0xFF0
 16462                           indf0	equ	0xFEF
 16463                           postinc0	equ	0xFEE
 16464                           fsr0h	equ	0xFEA
 16465                           fsr0l	equ	0xFE9
 16466                           wreg	equ	0xFE8
 16467                           postdec1	equ	0xFE5
 16468                           fsr1h	equ	0xFE2
 16469                           fsr1l	equ	0xFE1
 16470                           indf2	equ	0xFDF
 16471                           postinc2	equ	0xFDE
 16472                           postdec2	equ	0xFDD
 16473                           fsr2h	equ	0xFDA
 16474                           fsr2l	equ	0xFD9
 16475                           status	equ	0xFD8
 16476                           
 16477 ;; *************** function _change_state_to_logs_23 *****************
 16478 ;; Defined at:
 16479 ;;		line 533 in file "UI.c"
 16480 ;; Parameters:    Size  Location     Type
 16481 ;;		None
 16482 ;; Auto vars:     Size  Location     Type
 16483 ;;		None
 16484 ;; Return value:  Size  Location     Type
 16485 ;;                  1    wreg      void 
 16486 ;; Registers used:
 16487 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16488 ;; Tracked objects:
 16489 ;;		On entry : 0/0
 16490 ;;		On exit  : 0/0
 16491 ;;		Unchanged: 0/0
 16492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16497 ;;Total ram usage:        0 bytes
 16498 ;; Hardware stack levels used:    1
 16499 ;; Hardware stack levels required when called:    3
 16500 ;; This function calls:
 16501 ;;		i2_lcdInst
 16502 ;;		i2_printf
 16503 ;; This function is called by:
 16504 ;;		_updateMenu
 16505 ;;		_inputHandler
 16506 ;; This function uses a non-reentrant model
 16507 ;;
 16508                           
 16509                           	psect	text65
 16510  003DD4                     __ptext65:
 16511                           	opt stack 0
 16512  003DD4                     _change_state_to_logs_23:
 16513                           	opt stack 18
 16514                           
 16515                           ;UI.c: 534: cur_state = 1023;
 16516                           
 16517                           ;incstack = 0
 16518  003DD4  0E03               	movlw	3
 16519  003DD6  0100               	movlb	0	; () banked
 16520  003DD8  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16521  003DDA  69DE               	setf	_cur_state& (0+255),b
 16522                           
 16523                           ; BSR set to: 0
 16524                           ;UI.c: 535: lcdInst(0b10000000);;
 16525  003DDC  0E80               	movlw	128
 16526  003DDE  EC1C  F020         	call	i2_lcdInst
 16527                           
 16528                           ;UI.c: 536: printf("LOG 2           ");
 16529  003DE2  0E15               	movlw	low STR_40
 16530  003DE4  6E0D               	movwf	i2printf@f,c
 16531  003DE6  0EFD               	movlw	high STR_40
 16532  003DE8  6E0E               	movwf	i2printf@f+1,c
 16533  003DEA  ECB3  F00A         	call	i2_printf	;wreg free
 16534                           
 16535                           ;UI.c: 537: lcdInst(0b11000000);;
 16536  003DEE  0EC0               	movlw	192
 16537  003DF0  EC1C  F020         	call	i2_lcdInst
 16538                           
 16539                           ;UI.c: 538: printf("LOG 3          <");
 16540  003DF4  0ED0               	movlw	low STR_46
 16541  003DF6  6E0D               	movwf	i2printf@f,c
 16542  003DF8  0EFD               	movlw	high STR_46
 16543  003DFA  6E0E               	movwf	i2printf@f+1,c
 16544  003DFC  ECB3  F00A         	call	i2_printf	;wreg free
 16545  003E00  0012               	return		;funcret
 16546  003E02                     __end_of_change_state_to_logs_23:
 16547                           	opt stack 0
 16548                           pclatu	equ	0xFFB
 16549                           pclath	equ	0xFFA
 16550                           tblptru	equ	0xFF8
 16551                           tblptrh	equ	0xFF7
 16552                           tblptrl	equ	0xFF6
 16553                           tablat	equ	0xFF5
 16554                           prodh	equ	0xFF4
 16555                           prodl	equ	0xFF3
 16556                           intcon	equ	0xFF2
 16557                           intcon2	equ	0xFF1
 16558                           intcon3	equ	0xFF0
 16559                           indf0	equ	0xFEF
 16560                           postinc0	equ	0xFEE
 16561                           fsr0h	equ	0xFEA
 16562                           fsr0l	equ	0xFE9
 16563                           wreg	equ	0xFE8
 16564                           postdec1	equ	0xFE5
 16565                           fsr1h	equ	0xFE2
 16566                           fsr1l	equ	0xFE1
 16567                           indf2	equ	0xFDF
 16568                           postinc2	equ	0xFDE
 16569                           postdec2	equ	0xFDD
 16570                           fsr2h	equ	0xFDA
 16571                           fsr2l	equ	0xFD9
 16572                           status	equ	0xFD8
 16573                           
 16574 ;; *************** function _change_state_to_logs_22 *****************
 16575 ;; Defined at:
 16576 ;;		line 526 in file "UI.c"
 16577 ;; Parameters:    Size  Location     Type
 16578 ;;		None
 16579 ;; Auto vars:     Size  Location     Type
 16580 ;;		None
 16581 ;; Return value:  Size  Location     Type
 16582 ;;                  1    wreg      void 
 16583 ;; Registers used:
 16584 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16585 ;; Tracked objects:
 16586 ;;		On entry : 0/0
 16587 ;;		On exit  : 0/0
 16588 ;;		Unchanged: 0/0
 16589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16593 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16594 ;;Total ram usage:        0 bytes
 16595 ;; Hardware stack levels used:    1
 16596 ;; Hardware stack levels required when called:    3
 16597 ;; This function calls:
 16598 ;;		i2_lcdInst
 16599 ;;		i2_printf
 16600 ;; This function is called by:
 16601 ;;		_updateMenu
 16602 ;;		_inputHandler
 16603 ;; This function uses a non-reentrant model
 16604 ;;
 16605                           
 16606                           	psect	text66
 16607  003D16                     __ptext66:
 16608                           	opt stack 0
 16609  003D16                     _change_state_to_logs_22:
 16610                           	opt stack 18
 16611                           
 16612                           ;UI.c: 527: cur_state = 1022;
 16613                           
 16614                           ;incstack = 0
 16615  003D16  0E03               	movlw	3
 16616  003D18  0100               	movlb	0	; () banked
 16617  003D1A  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16618  003D1C  0EFE               	movlw	254
 16619  003D1E  6FDE               	movwf	_cur_state& (0+255),b
 16620                           
 16621                           ; BSR set to: 0
 16622                           ;UI.c: 528: lcdInst(0b10000000);;
 16623  003D20  0E80               	movlw	128
 16624  003D22  EC1C  F020         	call	i2_lcdInst
 16625                           
 16626                           ;UI.c: 529: printf("LOG 2          <");
 16627  003D26  0EBF               	movlw	low STR_42
 16628  003D28  6E0D               	movwf	i2printf@f,c
 16629  003D2A  0EFD               	movlw	high STR_42
 16630  003D2C  6E0E               	movwf	i2printf@f+1,c
 16631  003D2E  ECB3  F00A         	call	i2_printf	;wreg free
 16632                           
 16633                           ;UI.c: 530: lcdInst(0b11000000);;
 16634  003D32  0EC0               	movlw	192
 16635  003D34  EC1C  F020         	call	i2_lcdInst
 16636                           
 16637                           ;UI.c: 531: printf("LOG 3           ");
 16638  003D38  0E26               	movlw	low STR_44
 16639  003D3A  6E0D               	movwf	i2printf@f,c
 16640  003D3C  0EFD               	movlw	high STR_44
 16641  003D3E  6E0E               	movwf	i2printf@f+1,c
 16642  003D40  ECB3  F00A         	call	i2_printf	;wreg free
 16643  003D44  0012               	return		;funcret
 16644  003D46                     __end_of_change_state_to_logs_22:
 16645                           	opt stack 0
 16646                           pclatu	equ	0xFFB
 16647                           pclath	equ	0xFFA
 16648                           tblptru	equ	0xFF8
 16649                           tblptrh	equ	0xFF7
 16650                           tblptrl	equ	0xFF6
 16651                           tablat	equ	0xFF5
 16652                           prodh	equ	0xFF4
 16653                           prodl	equ	0xFF3
 16654                           intcon	equ	0xFF2
 16655                           intcon2	equ	0xFF1
 16656                           intcon3	equ	0xFF0
 16657                           indf0	equ	0xFEF
 16658                           postinc0	equ	0xFEE
 16659                           fsr0h	equ	0xFEA
 16660                           fsr0l	equ	0xFE9
 16661                           wreg	equ	0xFE8
 16662                           postdec1	equ	0xFE5
 16663                           fsr1h	equ	0xFE2
 16664                           fsr1l	equ	0xFE1
 16665                           indf2	equ	0xFDF
 16666                           postinc2	equ	0xFDE
 16667                           postdec2	equ	0xFDD
 16668                           fsr2h	equ	0xFDA
 16669                           fsr2l	equ	0xFD9
 16670                           status	equ	0xFD8
 16671                           
 16672 ;; *************** function _change_state_to_logs_12 *****************
 16673 ;; Defined at:
 16674 ;;		line 519 in file "UI.c"
 16675 ;; Parameters:    Size  Location     Type
 16676 ;;		None
 16677 ;; Auto vars:     Size  Location     Type
 16678 ;;		None
 16679 ;; Return value:  Size  Location     Type
 16680 ;;                  1    wreg      void 
 16681 ;; Registers used:
 16682 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16683 ;; Tracked objects:
 16684 ;;		On entry : 0/0
 16685 ;;		On exit  : 0/0
 16686 ;;		Unchanged: 0/0
 16687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16692 ;;Total ram usage:        0 bytes
 16693 ;; Hardware stack levels used:    1
 16694 ;; Hardware stack levels required when called:    3
 16695 ;; This function calls:
 16696 ;;		i2_lcdInst
 16697 ;;		i2_printf
 16698 ;; This function is called by:
 16699 ;;		_updateMenu
 16700 ;;		_inputHandler
 16701 ;; This function uses a non-reentrant model
 16702 ;;
 16703                           
 16704                           	psect	text67
 16705  003D46                     __ptext67:
 16706                           	opt stack 0
 16707  003D46                     _change_state_to_logs_12:
 16708                           	opt stack 18
 16709                           
 16710                           ;UI.c: 520: cur_state = 1012;
 16711                           
 16712                           ;incstack = 0
 16713  003D46  0E03               	movlw	3
 16714  003D48  0100               	movlb	0	; () banked
 16715  003D4A  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16716  003D4C  0EF4               	movlw	244
 16717  003D4E  6FDE               	movwf	_cur_state& (0+255),b
 16718                           
 16719                           ; BSR set to: 0
 16720                           ;UI.c: 521: lcdInst(0b10000000);;
 16721  003D50  0E80               	movlw	128
 16722  003D52  EC1C  F020         	call	i2_lcdInst
 16723                           
 16724                           ;UI.c: 522: printf("LOG 1           ");
 16725  003D56  0E04               	movlw	low STR_41
 16726  003D58  6E0D               	movwf	i2printf@f,c
 16727  003D5A  0EFD               	movlw	high STR_41
 16728  003D5C  6E0E               	movwf	i2printf@f+1,c
 16729  003D5E  ECB3  F00A         	call	i2_printf	;wreg free
 16730                           
 16731                           ;UI.c: 523: lcdInst(0b11000000);;
 16732  003D62  0EC0               	movlw	192
 16733  003D64  EC1C  F020         	call	i2_lcdInst
 16734                           
 16735                           ;UI.c: 524: printf("LOG 2          <");
 16736  003D68  0EBF               	movlw	low STR_42
 16737  003D6A  6E0D               	movwf	i2printf@f,c
 16738  003D6C  0EFD               	movlw	high STR_42
 16739  003D6E  6E0E               	movwf	i2printf@f+1,c
 16740  003D70  ECB3  F00A         	call	i2_printf	;wreg free
 16741  003D74  0012               	return		;funcret
 16742  003D76                     __end_of_change_state_to_logs_12:
 16743                           	opt stack 0
 16744                           pclatu	equ	0xFFB
 16745                           pclath	equ	0xFFA
 16746                           tblptru	equ	0xFF8
 16747                           tblptrh	equ	0xFF7
 16748                           tblptrl	equ	0xFF6
 16749                           tablat	equ	0xFF5
 16750                           prodh	equ	0xFF4
 16751                           prodl	equ	0xFF3
 16752                           intcon	equ	0xFF2
 16753                           intcon2	equ	0xFF1
 16754                           intcon3	equ	0xFF0
 16755                           indf0	equ	0xFEF
 16756                           postinc0	equ	0xFEE
 16757                           fsr0h	equ	0xFEA
 16758                           fsr0l	equ	0xFE9
 16759                           wreg	equ	0xFE8
 16760                           postdec1	equ	0xFE5
 16761                           fsr1h	equ	0xFE2
 16762                           fsr1l	equ	0xFE1
 16763                           indf2	equ	0xFDF
 16764                           postinc2	equ	0xFDE
 16765                           postdec2	equ	0xFDD
 16766                           fsr2h	equ	0xFDA
 16767                           fsr2l	equ	0xFD9
 16768                           status	equ	0xFD8
 16769                           
 16770 ;; *************** function _change_state_to_logs_11 *****************
 16771 ;; Defined at:
 16772 ;;		line 512 in file "UI.c"
 16773 ;; Parameters:    Size  Location     Type
 16774 ;;		None
 16775 ;; Auto vars:     Size  Location     Type
 16776 ;;		None
 16777 ;; Return value:  Size  Location     Type
 16778 ;;                  1    wreg      void 
 16779 ;; Registers used:
 16780 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16781 ;; Tracked objects:
 16782 ;;		On entry : 0/0
 16783 ;;		On exit  : 0/0
 16784 ;;		Unchanged: 0/0
 16785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16790 ;;Total ram usage:        0 bytes
 16791 ;; Hardware stack levels used:    1
 16792 ;; Hardware stack levels required when called:    3
 16793 ;; This function calls:
 16794 ;;		i2_lcdInst
 16795 ;;		i2_printf
 16796 ;; This function is called by:
 16797 ;;		_updateMenu
 16798 ;;		_inputHandler
 16799 ;; This function uses a non-reentrant model
 16800 ;;
 16801                           
 16802                           	psect	text68
 16803  003D76                     __ptext68:
 16804                           	opt stack 0
 16805  003D76                     _change_state_to_logs_11:
 16806                           	opt stack 18
 16807                           
 16808                           ;UI.c: 513: cur_state = 1011;
 16809                           
 16810                           ;incstack = 0
 16811  003D76  0E03               	movlw	3
 16812  003D78  0100               	movlb	0	; () banked
 16813  003D7A  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16814  003D7C  0EF3               	movlw	243
 16815  003D7E  6FDE               	movwf	_cur_state& (0+255),b
 16816                           
 16817                           ; BSR set to: 0
 16818                           ;UI.c: 514: lcdInst(0b10000000);;
 16819  003D80  0E80               	movlw	128
 16820  003D82  EC1C  F020         	call	i2_lcdInst
 16821                           
 16822                           ;UI.c: 515: printf("LOG 1          <");
 16823  003D86  0EAE               	movlw	low STR_39
 16824  003D88  6E0D               	movwf	i2printf@f,c
 16825  003D8A  0EFD               	movlw	high STR_39
 16826  003D8C  6E0E               	movwf	i2printf@f+1,c
 16827  003D8E  ECB3  F00A         	call	i2_printf	;wreg free
 16828                           
 16829                           ;UI.c: 516: lcdInst(0b11000000);;
 16830  003D92  0EC0               	movlw	192
 16831  003D94  EC1C  F020         	call	i2_lcdInst
 16832                           
 16833                           ;UI.c: 517: printf("LOG 2           ");
 16834  003D98  0E15               	movlw	low STR_40
 16835  003D9A  6E0D               	movwf	i2printf@f,c
 16836  003D9C  0EFD               	movlw	high STR_40
 16837  003D9E  6E0E               	movwf	i2printf@f+1,c
 16838  003DA0  ECB3  F00A         	call	i2_printf	;wreg free
 16839  003DA4  0012               	return		;funcret
 16840  003DA6                     __end_of_change_state_to_logs_11:
 16841                           	opt stack 0
 16842                           pclatu	equ	0xFFB
 16843                           pclath	equ	0xFFA
 16844                           tblptru	equ	0xFF8
 16845                           tblptrh	equ	0xFF7
 16846                           tblptrl	equ	0xFF6
 16847                           tablat	equ	0xFF5
 16848                           prodh	equ	0xFF4
 16849                           prodl	equ	0xFF3
 16850                           intcon	equ	0xFF2
 16851                           intcon2	equ	0xFF1
 16852                           intcon3	equ	0xFF0
 16853                           indf0	equ	0xFEF
 16854                           postinc0	equ	0xFEE
 16855                           fsr0h	equ	0xFEA
 16856                           fsr0l	equ	0xFE9
 16857                           wreg	equ	0xFE8
 16858                           postdec1	equ	0xFE5
 16859                           fsr1h	equ	0xFE2
 16860                           fsr1l	equ	0xFE1
 16861                           indf2	equ	0xFDF
 16862                           postinc2	equ	0xFDE
 16863                           postdec2	equ	0xFDD
 16864                           fsr2h	equ	0xFDA
 16865                           fsr2l	equ	0xFD9
 16866                           status	equ	0xFD8
 16867                           
 16868 ;; *************** function _dispLogs *****************
 16869 ;; Defined at:
 16870 ;;		line 465 in file "UI.c"
 16871 ;; Parameters:    Size  Location     Type
 16872 ;;  myLog           2   17[COMRAM] int 
 16873 ;; Auto vars:     Size  Location     Type
 16874 ;;		None
 16875 ;; Return value:  Size  Location     Type
 16876 ;;                  1    wreg      void 
 16877 ;; Registers used:
 16878 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16879 ;; Tracked objects:
 16880 ;;		On entry : 0/0
 16881 ;;		On exit  : 0/0
 16882 ;;		Unchanged: 0/0
 16883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16884 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16887 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16888 ;;Total ram usage:        2 bytes
 16889 ;; Hardware stack levels used:    1
 16890 ;; Hardware stack levels required when called:    2
 16891 ;; This function calls:
 16892 ;;		_retrieveLog
 16893 ;; This function is called by:
 16894 ;;		_updateMenu
 16895 ;; This function uses a non-reentrant model
 16896 ;;
 16897                           
 16898                           	psect	text69
 16899  003F1C                     __ptext69:
 16900                           	opt stack 0
 16901  003F1C                     _dispLogs:
 16902                           	opt stack 20
 16903                           
 16904                           ;UI.c: 466: logstate = 1;
 16905                           
 16906                           ;incstack = 0
 16907  003F1C  0E00               	movlw	0
 16908  003F1E  0100               	movlb	0	; () banked
 16909  003F20  6FF7               	movwf	(_logstate+1)& (0+255),b
 16910  003F22  0E01               	movlw	1
 16911  003F24  6FF6               	movwf	_logstate& (0+255),b
 16912                           
 16913                           ; BSR set to: 0
 16914                           ;UI.c: 467: log = myLog;
 16915  003F26  C012  F0E6         	movff	dispLogs@myLog,_log
 16916  003F2A  C013  F0E7         	movff	dispLogs@myLog+1,_log+1
 16917                           
 16918                           ; BSR set to: 0
 16919                           ;UI.c: 468: retrieveLog(myLog - 1);
 16920  003F2E  0EFF               	movlw	255
 16921  003F30  2412               	addwf	dispLogs@myLog,w,c
 16922  003F32  6E07               	movwf	retrieveLog@logNum,c
 16923  003F34  0EFF               	movlw	255
 16924  003F36  2013               	addwfc	dispLogs@myLog+1,w,c
 16925  003F38  6E08               	movwf	retrieveLog@logNum+1,c
 16926  003F3A  EC73  F015         	call	_retrieveLog	;wreg free
 16927  003F3E  0012               	return		;funcret
 16928  003F40                     __end_of_dispLogs:
 16929                           	opt stack 0
 16930                           pclatu	equ	0xFFB
 16931                           pclath	equ	0xFFA
 16932                           tblptru	equ	0xFF8
 16933                           tblptrh	equ	0xFF7
 16934                           tblptrl	equ	0xFF6
 16935                           tablat	equ	0xFF5
 16936                           prodh	equ	0xFF4
 16937                           prodl	equ	0xFF3
 16938                           intcon	equ	0xFF2
 16939                           intcon2	equ	0xFF1
 16940                           intcon3	equ	0xFF0
 16941                           indf0	equ	0xFEF
 16942                           postinc0	equ	0xFEE
 16943                           fsr0h	equ	0xFEA
 16944                           fsr0l	equ	0xFE9
 16945                           wreg	equ	0xFE8
 16946                           postdec1	equ	0xFE5
 16947                           fsr1h	equ	0xFE2
 16948                           fsr1l	equ	0xFE1
 16949                           indf2	equ	0xFDF
 16950                           postinc2	equ	0xFDE
 16951                           postdec2	equ	0xFDD
 16952                           fsr2h	equ	0xFDA
 16953                           fsr2l	equ	0xFD9
 16954                           status	equ	0xFD8
 16955                           
 16956 ;; *************** function _retrieveLog *****************
 16957 ;; Defined at:
 16958 ;;		line 134 in file "EEPROM.c"
 16959 ;; Parameters:    Size  Location     Type
 16960 ;;  logNum          2    6[COMRAM] int 
 16961 ;; Auto vars:     Size  Location     Type
 16962 ;;  i               2   13[COMRAM] int 
 16963 ;;  addr            2   15[COMRAM] unsigned short 
 16964 ;;  byte3           1   12[COMRAM] unsigned char 
 16965 ;;  byte2           1   11[COMRAM] unsigned char 
 16966 ;;  byte1           1   10[COMRAM] unsigned char 
 16967 ;; Return value:  Size  Location     Type
 16968 ;;                  1    wreg      void 
 16969 ;; Registers used:
 16970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16971 ;; Tracked objects:
 16972 ;;		On entry : 0/0
 16973 ;;		On exit  : 0/0
 16974 ;;		Unchanged: 0/0
 16975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16976 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16977 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16978 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16979 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16980 ;;Total ram usage:       11 bytes
 16981 ;; Hardware stack levels used:    1
 16982 ;; Hardware stack levels required when called:    1
 16983 ;; This function calls:
 16984 ;;		i2_EEPROM_read
 16985 ;;		i2___wmul
 16986 ;; This function is called by:
 16987 ;;		_dispLogs
 16988 ;; This function uses a non-reentrant model
 16989 ;;
 16990                           
 16991                           	psect	text70
 16992  002AE6                     __ptext70:
 16993                           	opt stack 0
 16994  002AE6                     _retrieveLog:
 16995                           	opt stack 20
 16996                           
 16997                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 16998                           
 16999                           ;incstack = 0
 17000  002AE6  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 17001  002AEA  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 17002  002AEE  0E00               	movlw	0
 17003  002AF0  6E04               	movwf	i2___wmul@multiplicand+1,c
 17004  002AF2  0E0B               	movlw	11
 17005  002AF4  6E03               	movwf	i2___wmul@multiplicand,c
 17006  002AF6  EC56  F01F         	call	i2___wmul	;wreg free
 17007  002AFA  0E01               	movlw	1
 17008  002AFC  2401               	addwf	?i2___wmul,w,c
 17009  002AFE  6E10               	movwf	retrieveLog@addr,c
 17010  002B00  0E00               	movlw	0
 17011  002B02  2002               	addwfc	?i2___wmul+1,w,c
 17012  002B04  6E11               	movwf	retrieveLog@addr+1,c
 17013                           
 17014                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 17015  002B06  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 17016  002B0A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 17017  002B0E  ECE8  F01F         	call	i2_EEPROM_read	;wreg free
 17018  002B12  6E0B               	movwf	retrieveLog@byte1,c
 17019                           
 17020                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 17021  002B14  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 17022  002B18  0E80               	movlw	128
 17023  002B1A  1609               	andwf	??_retrieveLog,f,c
 17024  002B1C  5009               	movf	??_retrieveLog,w,c
 17025  002B1E  0100               	movlb	0	; () banked
 17026  002B20  6FE8               	movwf	_log_completion& (0+255),b
 17027  002B22  6BE9               	clrf	(_log_completion+1)& (0+255),b
 17028                           
 17029                           ; BSR set to: 0
 17030                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 17031  002B24  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 17032  002B28  0E0F               	movlw	15
 17033  002B2A  1609               	andwf	??_retrieveLog,f,c
 17034  002B2C  5009               	movf	??_retrieveLog,w,c
 17035  002B2E  0100               	movlb	0	; () banked
 17036  002B30  6FF2               	movwf	_log_count_total& (0+255),b
 17037  002B32  6BF3               	clrf	(_log_count_total+1)& (0+255),b
 17038                           
 17039                           ; BSR set to: 0
 17040                           ;EEPROM.c: 146: addr++;
 17041  002B34  4A10               	infsnz	retrieveLog@addr,f,c
 17042  002B36  2A11               	incf	retrieveLog@addr+1,f,c
 17043                           
 17044                           ; BSR set to: 0
 17045                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 17046  002B38  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 17047  002B3C  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 17048  002B40  ECE8  F01F         	call	i2_EEPROM_read	;wreg free
 17049  002B44  6E0C               	movwf	retrieveLog@byte2,c
 17050                           
 17051                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)(byte2 & 0b11110000);
 17052  002B46  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 17053  002B4A  0EF0               	movlw	240
 17054  002B4C  1609               	andwf	??_retrieveLog,f,c
 17055  002B4E  5009               	movf	??_retrieveLog,w,c
 17056  002B50  0100               	movlb	0	; () banked
 17057  002B52  6FEE               	movwf	_log_count_pop_no_tab& (0+255),b
 17058  002B54  6BEF               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 17059                           
 17060                           ; BSR set to: 0
 17061                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 17062  002B56  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 17063  002B5A  0E0F               	movlw	15
 17064  002B5C  1609               	andwf	??_retrieveLog,f,c
 17065  002B5E  5009               	movf	??_retrieveLog,w,c
 17066  002B60  0100               	movlb	0	; () banked
 17067  002B62  6FF0               	movwf	_log_count_pop_w_tab& (0+255),b
 17068  002B64  6BF1               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 17069                           
 17070                           ; BSR set to: 0
 17071                           ;EEPROM.c: 152: addr++;
 17072  002B66  4A10               	infsnz	retrieveLog@addr,f,c
 17073  002B68  2A11               	incf	retrieveLog@addr+1,f,c
 17074                           
 17075                           ; BSR set to: 0
 17076                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 17077  002B6A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 17078  002B6E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 17079  002B72  ECE8  F01F         	call	i2_EEPROM_read	;wreg free
 17080  002B76  6E0D               	movwf	retrieveLog@byte3,c
 17081                           
 17082                           ;EEPROM.c: 154: log_count_can_w_lab = (int)(byte3 & 0b11110000);
 17083  002B78  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 17084  002B7C  0EF0               	movlw	240
 17085  002B7E  1609               	andwf	??_retrieveLog,f,c
 17086  002B80  5009               	movf	??_retrieveLog,w,c
 17087  002B82  0100               	movlb	0	; () banked
 17088  002B84  6FEC               	movwf	_log_count_can_w_lab& (0+255),b
 17089  002B86  6BED               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 17090                           
 17091                           ; BSR set to: 0
 17092                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 17093  002B88  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 17094  002B8C  0E0F               	movlw	15
 17095  002B8E  1609               	andwf	??_retrieveLog,f,c
 17096  002B90  5009               	movf	??_retrieveLog,w,c
 17097  002B92  0100               	movlb	0	; () banked
 17098  002B94  6FEA               	movwf	_log_count_can_no_lab& (0+255),b
 17099  002B96  6BEB               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 17100                           
 17101                           ; BSR set to: 0
 17102                           ;EEPROM.c: 156: addr++;
 17103  002B98  4A10               	infsnz	retrieveLog@addr,f,c
 17104  002B9A  2A11               	incf	retrieveLog@addr+1,f,c
 17105                           
 17106                           ; BSR set to: 0
 17107                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 17108  002B9C  0E00               	movlw	0
 17109  002B9E  6E0F               	movwf	retrieveLog@i+1,c
 17110  002BA0  0E00               	movlw	0
 17111  002BA2  6E0E               	movwf	retrieveLog@i,c
 17112  002BA4                     i2l5605:
 17113                           
 17114                           ; BSR set to: 0
 17115  002BA4  BE0F               	btfsc	retrieveLog@i+1,7,c
 17116  002BA6  D006               	goto	i2l5609
 17117  002BA8  500F               	movf	retrieveLog@i+1,w,c
 17118  002BAA  E11E               	bnz	i2l5617
 17119  002BAC  0E07               	movlw	7
 17120  002BAE  5C0E               	subwf	retrieveLog@i,w,c
 17121  002BB0  B0D8               	btfsc	status,0,c
 17122  002BB2  D01A               	goto	i2l5617
 17123  002BB4                     i2l5609:
 17124                           
 17125                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 17126  002BB4  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 17127  002BB8  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 17128  002BBC  ECE8  F01F         	call	i2_EEPROM_read	;wreg free
 17129  002BC0  6E09               	movwf	??_retrieveLog& (0+255),c
 17130  002BC2  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 17131  002BC4  90D8               	bcf	status,0,c
 17132  002BC6  340E               	rlcf	retrieveLog@i,w,c
 17133  002BC8  6ED9               	movwf	fsr2l,c
 17134  002BCA  340F               	rlcf	retrieveLog@i+1,w,c
 17135  002BCC  6EDA               	movwf	fsr2h,c
 17136  002BCE  0E00               	movlw	low _log_startTime
 17137  002BD0  26D9               	addwf	fsr2l,f,c
 17138  002BD2  0E01               	movlw	high _log_startTime
 17139  002BD4  22DA               	addwfc	fsr2h,f,c
 17140  002BD6  C009  FFDE         	movff	??_retrieveLog,postinc2
 17141  002BDA  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 17142                           
 17143                           ;EEPROM.c: 161: addr++;
 17144  002BDE  4A10               	infsnz	retrieveLog@addr,f,c
 17145  002BE0  2A11               	incf	retrieveLog@addr+1,f,c
 17146  002BE2  4A0E               	infsnz	retrieveLog@i,f,c
 17147  002BE4  2A0F               	incf	retrieveLog@i+1,f,c
 17148  002BE6  D7DE               	goto	i2l5605
 17149  002BE8                     i2l5617:
 17150                           
 17151                           ;EEPROM.c: 162: }
 17152                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 17153  002BE8  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 17154  002BEC  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 17155  002BF0  ECE8  F01F         	call	i2_EEPROM_read	;wreg free
 17156  002BF4  6E09               	movwf	??_retrieveLog& (0+255),c
 17157  002BF6  5009               	movf	??_retrieveLog,w,c
 17158  002BF8  0100               	movlb	0	; () banked
 17159  002BFA  6FF4               	movwf	_log_total_time& (0+255),b
 17160  002BFC  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 17161                           
 17162                           ; BSR set to: 0
 17163  002BFE  0012               	return		;funcret
 17164  002C00                     __end_of_retrieveLog:
 17165                           	opt stack 0
 17166                           pclatu	equ	0xFFB
 17167                           pclath	equ	0xFFA
 17168                           tblptru	equ	0xFF8
 17169                           tblptrh	equ	0xFF7
 17170                           tblptrl	equ	0xFF6
 17171                           tablat	equ	0xFF5
 17172                           prodh	equ	0xFF4
 17173                           prodl	equ	0xFF3
 17174                           intcon	equ	0xFF2
 17175                           intcon2	equ	0xFF1
 17176                           intcon3	equ	0xFF0
 17177                           indf0	equ	0xFEF
 17178                           postinc0	equ	0xFEE
 17179                           fsr0h	equ	0xFEA
 17180                           fsr0l	equ	0xFE9
 17181                           wreg	equ	0xFE8
 17182                           postdec1	equ	0xFE5
 17183                           fsr1h	equ	0xFE2
 17184                           fsr1l	equ	0xFE1
 17185                           indf2	equ	0xFDF
 17186                           postinc2	equ	0xFDE
 17187                           postdec2	equ	0xFDD
 17188                           fsr2h	equ	0xFDA
 17189                           fsr2l	equ	0xFD9
 17190                           status	equ	0xFD8
 17191                           
 17192 ;; *************** function i2_EEPROM_read *****************
 17193 ;; Defined at:
 17194 ;;		line 68 in file "EEPROM.c"
 17195 ;; Parameters:    Size  Location     Type
 17196 ;;  address         2    0[COMRAM] unsigned short 
 17197 ;; Auto vars:     Size  Location     Type
 17198 ;;		None
 17199 ;; Return value:  Size  Location     Type
 17200 ;;                  1    wreg      unsigned char 
 17201 ;; Registers used:
 17202 ;;		wreg, status,2
 17203 ;; Tracked objects:
 17204 ;;		On entry : 0/0
 17205 ;;		On exit  : 0/0
 17206 ;;		Unchanged: 0/0
 17207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17208 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17211 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17212 ;;Total ram usage:        2 bytes
 17213 ;; Hardware stack levels used:    1
 17214 ;; This function calls:
 17215 ;;		Nothing
 17216 ;; This function is called by:
 17217 ;;		_retrieveLog
 17218 ;; This function uses a non-reentrant model
 17219 ;;
 17220                           
 17221                           	psect	text71
 17222  003FD0                     __ptext71:
 17223                           	opt stack 0
 17224  003FD0                     i2_EEPROM_read:
 17225                           	opt stack 20
 17226                           
 17227                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 17228                           
 17229                           ; BSR set to: 0
 17230                           ;incstack = 0
 17231  003FD0  5002               	movf	i2EEPROM_read@address+1,w,c
 17232  003FD2  6EAA               	movwf	4010,c	;volatile
 17233                           
 17234                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 17235  003FD4  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 17236                           
 17237                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 17238  003FD8  9EA6               	bcf	4006,7,c	;volatile
 17239                           
 17240                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 17241  003FDA  9CA6               	bcf	4006,6,c	;volatile
 17242                           
 17243                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 17244  003FDC  80A6               	bsf	4006,0,c	;volatile
 17245  003FDE                     i2l911:
 17246  003FDE  B0A6               	btfsc	4006,0,c	;volatile
 17247  003FE0  D7FE               	goto	i2l911
 17248                           
 17249                           ;EEPROM.c: 81: return EEDATA;
 17250  003FE2  50A8               	movf	4008,w,c	;volatile
 17251  003FE4  0012               	return	
 17252  003FE6                     __end_ofi2_EEPROM_read:
 17253                           	opt stack 0
 17254                           pclatu	equ	0xFFB
 17255                           pclath	equ	0xFFA
 17256                           tblptru	equ	0xFF8
 17257                           tblptrh	equ	0xFF7
 17258                           tblptrl	equ	0xFF6
 17259                           tablat	equ	0xFF5
 17260                           prodh	equ	0xFF4
 17261                           prodl	equ	0xFF3
 17262                           intcon	equ	0xFF2
 17263                           intcon2	equ	0xFF1
 17264                           intcon3	equ	0xFF0
 17265                           indf0	equ	0xFEF
 17266                           postinc0	equ	0xFEE
 17267                           fsr0h	equ	0xFEA
 17268                           fsr0l	equ	0xFE9
 17269                           wreg	equ	0xFE8
 17270                           postdec1	equ	0xFE5
 17271                           fsr1h	equ	0xFE2
 17272                           fsr1l	equ	0xFE1
 17273                           indf2	equ	0xFDF
 17274                           postinc2	equ	0xFDE
 17275                           postdec2	equ	0xFDD
 17276                           fsr2h	equ	0xFDA
 17277                           fsr2l	equ	0xFD9
 17278                           status	equ	0xFD8
 17279                           
 17280 ;; *************** function _printSortTimer *****************
 17281 ;; Defined at:
 17282 ;;		line 255 in file "sort.c"
 17283 ;; Parameters:    Size  Location     Type
 17284 ;;		None
 17285 ;; Auto vars:     Size  Location     Type
 17286 ;;  i               2   72[COMRAM] int 
 17287 ;;  curTime        14   46[COMRAM] int [7]
 17288 ;;  timeDiff        2   70[COMRAM] unsigned int 
 17289 ;;  sec             2   66[COMRAM] int 
 17290 ;;  min             2   64[COMRAM] int 
 17291 ;;  cur_sec         2   62[COMRAM] unsigned int 
 17292 ;;  start_sec       2   60[COMRAM] unsigned int 
 17293 ;;  hour            2   44[COMRAM] int 
 17294 ;; Return value:  Size  Location     Type
 17295 ;;                  1    wreg      void 
 17296 ;; Registers used:
 17297 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17298 ;; Tracked objects:
 17299 ;;		On entry : 0/0
 17300 ;;		On exit  : 0/0
 17301 ;;		Unchanged: 0/0
 17302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17304 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17305 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17306 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17307 ;;Total ram usage:       33 bytes
 17308 ;; Hardware stack levels used:    1
 17309 ;; Hardware stack levels required when called:    3
 17310 ;; This function calls:
 17311 ;;		i2___lwdiv
 17312 ;;		i2___lwmod
 17313 ;;		i2___wmul
 17314 ;;		i2_getRTC
 17315 ;;		i2_lcdInst
 17316 ;;		i2_printf
 17317 ;; This function is called by:
 17318 ;;		_handler
 17319 ;; This function uses a non-reentrant model
 17320 ;;
 17321                           
 17322                           	psect	text72
 17323  002094                     __ptext72:
 17324                           	opt stack 0
 17325  002094                     _printSortTimer:
 17326                           	opt stack 20
 17327                           
 17328                           ;sort.c: 256: getRTC();
 17329                           
 17330                           ;incstack = 0
 17331  002094  ECB6  F01A         	call	i2_getRTC	;wreg free
 17332                           
 17333                           ;sort.c: 257: int curTime[7];
 17334                           ;sort.c: 258: for(int i = 0; i < 7; i++){
 17335  002098  0E00               	movlw	0
 17336  00209A  6E4A               	movwf	printSortTimer@i+1,c
 17337  00209C  0E00               	movlw	0
 17338  00209E  6E49               	movwf	printSortTimer@i,c
 17339  0020A0                     i2l7413:
 17340  0020A0  BE4A               	btfsc	printSortTimer@i+1,7,c
 17341  0020A2  D006               	goto	i2l7417
 17342  0020A4  504A               	movf	printSortTimer@i+1,w,c
 17343  0020A6  E131               	bnz	i2l7423
 17344  0020A8  0E07               	movlw	7
 17345  0020AA  5C49               	subwf	printSortTimer@i,w,c
 17346  0020AC  B0D8               	btfsc	status,0,c
 17347  0020AE  D02D               	goto	i2l7423
 17348  0020B0                     i2l7417:
 17349                           
 17350                           ;sort.c: 259: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 17351  0020B0  0E24               	movlw	low _time
 17352  0020B2  2449               	addwf	printSortTimer@i,w,c
 17353  0020B4  6ED9               	movwf	fsr2l,c
 17354  0020B6  0E01               	movlw	high _time
 17355  0020B8  204A               	addwfc	printSortTimer@i+1,w,c
 17356  0020BA  6EDA               	movwf	fsr2h,c
 17357  0020BC  50DF               	movf	indf2,w,c
 17358  0020BE  6E2A               	movwf	??_printSortTimer& (0+255),c
 17359  0020C0  3A2A               	swapf	??_printSortTimer,f,c
 17360  0020C2  0E0F               	movlw	15
 17361  0020C4  162A               	andwf	??_printSortTimer,f,c
 17362  0020C6  0E0F               	movlw	15
 17363  0020C8  162A               	andwf	??_printSortTimer,f,c
 17364  0020CA  502A               	movf	??_printSortTimer,w,c
 17365  0020CC  0D0A               	mullw	10
 17366  0020CE  0E24               	movlw	low _time
 17367  0020D0  2449               	addwf	printSortTimer@i,w,c
 17368  0020D2  6ED9               	movwf	fsr2l,c
 17369  0020D4  0E01               	movlw	high _time
 17370  0020D6  204A               	addwfc	printSortTimer@i+1,w,c
 17371  0020D8  6EDA               	movwf	fsr2h,c
 17372  0020DA  50DF               	movf	indf2,w,c
 17373  0020DC  0B0F               	andlw	15
 17374  0020DE  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 17375  0020E0  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 17376  0020E2  50F3               	movf	prodl,w,c
 17377  0020E4  262B               	addwf	??_printSortTimer+1,f,c
 17378  0020E6  50F4               	movf	prodh,w,c
 17379  0020E8  222C               	addwfc	??_printSortTimer+2,f,c
 17380  0020EA  90D8               	bcf	status,0,c
 17381  0020EC  3449               	rlcf	printSortTimer@i,w,c
 17382  0020EE  6ED9               	movwf	fsr2l,c
 17383  0020F0  344A               	rlcf	printSortTimer@i+1,w,c
 17384  0020F2  6EDA               	movwf	fsr2h,c
 17385  0020F4  0E2F               	movlw	low printSortTimer@curTime
 17386  0020F6  26D9               	addwf	fsr2l,f,c
 17387  0020F8  0E00               	movlw	high printSortTimer@curTime
 17388  0020FA  22DA               	addwfc	fsr2h,f,c
 17389  0020FC  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 17390  002100  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 17391  002104  4A49               	infsnz	printSortTimer@i,f,c
 17392  002106  2A4A               	incf	printSortTimer@i+1,f,c
 17393  002108  D7CB               	goto	i2l7413
 17394  00210A                     i2l7423:
 17395                           
 17396                           ;sort.c: 260: }
 17397                           ;sort.c: 261: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 17398  00210A  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 17399  00210E  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 17400  002112  0E00               	movlw	0
 17401  002114  6E04               	movwf	i2___wmul@multiplicand+1,c
 17402  002116  0E3C               	movlw	60
 17403  002118  6E03               	movwf	i2___wmul@multiplicand,c
 17404  00211A  EC56  F01F         	call	i2___wmul	;wreg free
 17405  00211E  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 17406  002122  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 17407  002126  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 17408  00212A  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 17409  00212E  0E0E               	movlw	14
 17410  002130  6E04               	movwf	i2___wmul@multiplicand+1,c
 17411  002132  0E10               	movlw	16
 17412  002134  6E03               	movwf	i2___wmul@multiplicand,c
 17413  002136  EC56  F01F         	call	i2___wmul	;wreg free
 17414  00213A  5001               	movf	?i2___wmul,w,c
 17415  00213C  262A               	addwf	??_printSortTimer,f,c
 17416  00213E  5002               	movf	?i2___wmul+1,w,c
 17417  002140  222B               	addwfc	??_printSortTimer+1,f,c
 17418  002142  0101               	movlb	1	; () banked
 17419  002144  510E               	movf	_startTime& (0+255),w,b
 17420  002146  242A               	addwf	??_printSortTimer,w,c
 17421  002148  6E3D               	movwf	printSortTimer@start_sec,c
 17422  00214A  0101               	movlb	1	; () banked
 17423  00214C  510F               	movf	(_startTime+1)& (0+255),w,b
 17424  00214E  202B               	addwfc	??_printSortTimer+1,w,c
 17425  002150  6E3E               	movwf	printSortTimer@start_sec+1,c
 17426                           
 17427                           ;sort.c: 262: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 17428  002152  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 17429  002156  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 17430  00215A  0E00               	movlw	0
 17431  00215C  6E04               	movwf	i2___wmul@multiplicand+1,c
 17432  00215E  0E3C               	movlw	60
 17433  002160  6E03               	movwf	i2___wmul@multiplicand,c
 17434  002162  EC56  F01F         	call	i2___wmul	;wreg free
 17435  002166  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 17436  00216A  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 17437  00216E  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 17438  002172  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 17439  002176  0E0E               	movlw	14
 17440  002178  6E04               	movwf	i2___wmul@multiplicand+1,c
 17441  00217A  0E10               	movlw	16
 17442  00217C  6E03               	movwf	i2___wmul@multiplicand,c
 17443  00217E  EC56  F01F         	call	i2___wmul	;wreg free
 17444  002182  5001               	movf	?i2___wmul,w,c
 17445  002184  262A               	addwf	??_printSortTimer,f,c
 17446  002186  5002               	movf	?i2___wmul+1,w,c
 17447  002188  222B               	addwfc	??_printSortTimer+1,f,c
 17448  00218A  502F               	movf	printSortTimer@curTime,w,c
 17449  00218C  242A               	addwf	??_printSortTimer,w,c
 17450  00218E  6E3F               	movwf	printSortTimer@cur_sec,c
 17451  002190  5030               	movf	printSortTimer@curTime+1,w,c
 17452  002192  202B               	addwfc	??_printSortTimer+1,w,c
 17453  002194  6E40               	movwf	printSortTimer@cur_sec+1,c
 17454                           
 17455                           ;sort.c: 263: unsigned int timeDiff = cur_sec - start_sec;
 17456  002196  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 17457  00219A  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 17458  00219E  1E2A               	comf	??_printSortTimer,f,c
 17459  0021A0  1E2B               	comf	??_printSortTimer+1,f,c
 17460  0021A2  4A2A               	infsnz	??_printSortTimer,f,c
 17461  0021A4  2A2B               	incf	??_printSortTimer+1,f,c
 17462  0021A6  503F               	movf	printSortTimer@cur_sec,w,c
 17463  0021A8  242A               	addwf	??_printSortTimer,w,c
 17464  0021AA  6E47               	movwf	printSortTimer@timeDiff,c
 17465  0021AC  5040               	movf	printSortTimer@cur_sec+1,w,c
 17466  0021AE  202B               	addwfc	??_printSortTimer+1,w,c
 17467  0021B0  6E48               	movwf	printSortTimer@timeDiff+1,c
 17468                           
 17469                           ;sort.c: 265: total_time = timeDiff;
 17470  0021B2  C047  F0F8         	movff	printSortTimer@timeDiff,_total_time
 17471  0021B6  C048  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 17472                           
 17473                           ;sort.c: 267: if(timeDiff >= 10){
 17474  0021BA  5048               	movf	printSortTimer@timeDiff+1,w,c
 17475  0021BC  E104               	bnz	i2u638_40
 17476  0021BE  0E0A               	movlw	10
 17477  0021C0  5C47               	subwf	printSortTimer@timeDiff,w,c
 17478  0021C2  A0D8               	btfss	status,0,c
 17479  0021C4  D003               	goto	i2l7433
 17480  0021C6                     i2u638_40:
 17481                           
 17482                           ;sort.c: 268: machine_state = DoneSorting_state;
 17483  0021C6  0E02               	movlw	2
 17484  0021C8  0100               	movlb	0	; () banked
 17485  0021CA  6FFC               	movwf	_machine_state& (0+255),b
 17486  0021CC                     i2l7433:
 17487                           
 17488                           ;sort.c: 270: }
 17489                           ;sort.c: 272: int hour = timeDiff / 3600;
 17490  0021CC  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 17491  0021D0  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 17492  0021D4  0E0E               	movlw	14
 17493  0021D6  6E09               	movwf	i2___lwdiv@divisor+1,c
 17494  0021D8  0E10               	movlw	16
 17495  0021DA  6E08               	movwf	i2___lwdiv@divisor,c
 17496  0021DC  EC6D  F01C         	call	i2___lwdiv	;wreg free
 17497  0021E0  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 17498  0021E4  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 17499                           
 17500                           ;sort.c: 273: int min = (timeDiff % 3600) / 60;
 17501  0021E8  0E0E               	movlw	14
 17502  0021EA  6E04               	movwf	i2___lwmod@divisor+1,c
 17503  0021EC  0E10               	movlw	16
 17504  0021EE  6E03               	movwf	i2___lwmod@divisor,c
 17505  0021F0  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 17506  0021F4  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 17507  0021F8  EC53  F01D         	call	i2___lwmod	;wreg free
 17508  0021FC  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 17509  002200  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 17510  002204  0E00               	movlw	0
 17511  002206  6E09               	movwf	i2___lwdiv@divisor+1,c
 17512  002208  0E3C               	movlw	60
 17513  00220A  6E08               	movwf	i2___lwdiv@divisor,c
 17514  00220C  EC6D  F01C         	call	i2___lwdiv	;wreg free
 17515  002210  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 17516  002214  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 17517                           
 17518                           ;sort.c: 274: int sec = (timeDiff % 3600) % 60;
 17519  002218  0E0E               	movlw	14
 17520  00221A  6E04               	movwf	i2___lwmod@divisor+1,c
 17521  00221C  0E10               	movlw	16
 17522  00221E  6E03               	movwf	i2___lwmod@divisor,c
 17523  002220  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 17524  002224  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 17525  002228  EC53  F01D         	call	i2___lwmod	;wreg free
 17526  00222C  C001  F045         	movff	?i2___lwmod,_printSortTimer$2325
 17527  002230  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2325+1
 17528                           
 17529                           ;sort.c: 274: int sec = (timeDiff % 3600) % 60;
 17530  002234  C045  F001         	movff	_printSortTimer$2325,i2___lwmod@dividend
 17531  002238  C046  F002         	movff	_printSortTimer$2325+1,i2___lwmod@dividend+1
 17532  00223C  0E00               	movlw	0
 17533  00223E  6E04               	movwf	i2___lwmod@divisor+1,c
 17534  002240  0E3C               	movlw	60
 17535  002242  6E03               	movwf	i2___lwmod@divisor,c
 17536  002244  EC53  F01D         	call	i2___lwmod	;wreg free
 17537  002248  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 17538  00224C  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 17539                           
 17540                           ;sort.c: 276: lcdInst(0b10000000);;
 17541  002250  0E80               	movlw	128
 17542  002252  EC1C  F020         	call	i2_lcdInst
 17543                           
 17544                           ;sort.c: 277: printf("SORTING...");
 17545  002256  0E8E               	movlw	low STR_64
 17546  002258  6E0D               	movwf	i2printf@f,c
 17547  00225A  0EFF               	movlw	high STR_64
 17548  00225C  6E0E               	movwf	i2printf@f+1,c
 17549  00225E  ECB3  F00A         	call	i2_printf	;wreg free
 17550                           
 17551                           ;sort.c: 278: lcdInst(0b11000000);;
 17552  002262  0EC0               	movlw	192
 17553  002264  EC1C  F020         	call	i2_lcdInst
 17554                           
 17555                           ;sort.c: 279: printf("TIME %d:%02d", min, sec);
 17556  002268  0E5F               	movlw	low STR_65
 17557  00226A  6E0D               	movwf	i2printf@f,c
 17558  00226C  0EFF               	movlw	high STR_65
 17559  00226E  6E0E               	movwf	i2printf@f+1,c
 17560  002270  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 17561  002274  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 17562  002278  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 17563  00227C  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 17564  002280  ECB3  F00A         	call	i2_printf	;wreg free
 17565  002284  0012               	return		;funcret
 17566  002286                     __end_of_printSortTimer:
 17567                           	opt stack 0
 17568                           pclatu	equ	0xFFB
 17569                           pclath	equ	0xFFA
 17570                           tblptru	equ	0xFF8
 17571                           tblptrh	equ	0xFF7
 17572                           tblptrl	equ	0xFF6
 17573                           tablat	equ	0xFF5
 17574                           prodh	equ	0xFF4
 17575                           prodl	equ	0xFF3
 17576                           intcon	equ	0xFF2
 17577                           intcon2	equ	0xFF1
 17578                           intcon3	equ	0xFF0
 17579                           indf0	equ	0xFEF
 17580                           postinc0	equ	0xFEE
 17581                           fsr0h	equ	0xFEA
 17582                           fsr0l	equ	0xFE9
 17583                           wreg	equ	0xFE8
 17584                           postdec1	equ	0xFE5
 17585                           fsr1h	equ	0xFE2
 17586                           fsr1l	equ	0xFE1
 17587                           indf2	equ	0xFDF
 17588                           postinc2	equ	0xFDE
 17589                           postdec2	equ	0xFDD
 17590                           fsr2h	equ	0xFDA
 17591                           fsr2l	equ	0xFD9
 17592                           status	equ	0xFD8
 17593                           
 17594 ;; *************** function i2_printf *****************
 17595 ;; Defined at:
 17596 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 17597 ;; Parameters:    Size  Location     Type
 17598 ;;  f               2   12[COMRAM] PTR const unsigned char 
 17599 ;;		 -> STR_106(18), STR_105(18), STR_104(15), STR_103(15), 
 17600 ;;		 -> STR_102(15), STR_101(17), STR_100(17), STR_99(17), 
 17601 ;;		 -> STR_98(16), STR_97(17), STR_96(17), STR_95(17), 
 17602 ;;		 -> STR_94(17), STR_93(17), STR_92(17), STR_91(15), 
 17603 ;;		 -> STR_90(11), STR_89(17), STR_88(11), STR_87(17), 
 17604 ;;		 -> STR_86(14), STR_85(15), STR_84(14), STR_83(10), 
 17605 ;;		 -> STR_82(16), STR_81(15), STR_80(15), STR_79(13), 
 17606 ;;		 -> STR_78(14), STR_77(8), STR_76(14), STR_75(15), 
 17607 ;;		 -> STR_74(12), STR_73(14), STR_72(17), STR_71(14), 
 17608 ;;		 -> STR_70(15), STR_69(17), STR_68(17), STR_67(7), 
 17609 ;;		 -> STR_66(21), STR_65(13), STR_64(11), STR_63(24), 
 17610 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 17611 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 17612 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 17613 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 17614 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 17615 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(19), 
 17616 ;;		 -> STR_26(17), STR_25(19), STR_24(17), STR_23(14), 
 17617 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 17618 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 17619 ;;		 -> STR_1(18), 
 17620 ;; Auto vars:     Size  Location     Type
 17621 ;;  printf          4    0        struct .
 17622 ;;  printf          2   39[COMRAM] int 
 17623 ;;  printf          2   35[COMRAM] unsigned int 
 17624 ;;  printf          2   33[COMRAM] unsigned int 
 17625 ;;  printf          2   31[COMRAM] PTR void [1]
 17626 ;;		 -> ?i2_printf(2), ?_printf(2), 
 17627 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 17628 ;;		 -> STR_107(7), count_total(2), printRTC@month(4), UI@month(4), 
 17629 ;;  printf          1   38[COMRAM] char 
 17630 ;;  printf          1   37[COMRAM] unsigned char 
 17631 ;;  printf          1   28[COMRAM] char 
 17632 ;; Return value:  Size  Location     Type
 17633 ;;                  2   12[COMRAM] int 
 17634 ;; Registers used:
 17635 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17636 ;; Tracked objects:
 17637 ;;		On entry : 0/0
 17638 ;;		On exit  : 0/0
 17639 ;;		Unchanged: 0/0
 17640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17641 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17642 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17643 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17644 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17645 ;;Total ram usage:       29 bytes
 17646 ;; Hardware stack levels used:    1
 17647 ;; Hardware stack levels required when called:    2
 17648 ;; This function calls:
 17649 ;;		i2___lwdiv
 17650 ;;		i2___lwmod
 17651 ;;		i2___wmul
 17652 ;;		i2_isdigit
 17653 ;;		i2_putch
 17654 ;; This function is called by:
 17655 ;;		_change_state_to_menu_11
 17656 ;;		_change_state_to_menu_23
 17657 ;;		_change_state_to_logs_11
 17658 ;;		_change_state_to_logs_12
 17659 ;;		_change_state_to_logs_22
 17660 ;;		_change_state_to_logs_23
 17661 ;;		_change_state_to_logs_33
 17662 ;;		_change_state_to_logs_34
 17663 ;;		_printSortTimer
 17664 ;;		i2_change_state_to_menu_start
 17665 ;;		i2_change_state_to_menu_12
 17666 ;;		i2_change_state_to_menu_22
 17667 ;;		i2_printRTC
 17668 ;; This function uses a non-reentrant model
 17669 ;;
 17670                           
 17671                           	psect	text73
 17672  001566                     __ptext73:
 17673                           	opt stack 0
 17674  001566                     i2_printf:
 17675                           	opt stack 19
 17676                           
 17677                           ;doprnt.c: 466: va_list ap;
 17678                           ;doprnt.c: 499: signed char c;
 17679                           ;doprnt.c: 501: int width;
 17680                           ;doprnt.c: 506: signed char prec;
 17681                           ;doprnt.c: 508: unsigned char flag;
 17682                           ;doprnt.c: 523: union {
 17683                           ;doprnt.c: 524: unsigned long vd;
 17684                           ;doprnt.c: 525: double integ;
 17685                           ;doprnt.c: 526: } tmpval;
 17686                           ;doprnt.c: 528: unsigned int val;
 17687                           ;doprnt.c: 529: unsigned len;
 17688                           ;doprnt.c: 530: const char * cp;
 17689                           ;doprnt.c: 533: *ap = __va_start();
 17690                           
 17691                           ;incstack = 0
 17692  001566  0E0F               	movlw	low (?i2_printf+2)
 17693  001568  6E20               	movwf	i2printf@ap,c
 17694  00156A  0E00               	movlw	high (?i2_printf+2)
 17695  00156C  6E21               	movwf	i2printf@ap+1,c
 17696                           
 17697                           ;doprnt.c: 536: while(c = *f++) {
 17698  00156E  D1A4               	goto	i2l5423
 17699  001570                     i2l5293:
 17700                           
 17701                           ;doprnt.c: 538: if(c != '%')
 17702  001570  0E25               	movlw	37
 17703  001572  1827               	xorwf	i2printf@c,w,c
 17704  001574  B4D8               	btfsc	status,2,c
 17705  001576  D004               	goto	i2l5297
 17706                           
 17707                           ;doprnt.c: 540: {
 17708                           ;doprnt.c: 541: (putch(c) );
 17709  001578  5027               	movf	i2printf@c,w,c
 17710  00157A  EC16  F020         	call	i2_putch
 17711                           
 17712                           ;doprnt.c: 542: continue;
 17713  00157E  D19C               	goto	i2l5423
 17714  001580                     i2l5297:
 17715                           
 17716                           ;doprnt.c: 543: }
 17717                           ;doprnt.c: 546: width = 0;
 17718  001580  0E00               	movlw	0
 17719  001582  6E29               	movwf	i2printf@width+1,c
 17720  001584  0E00               	movlw	0
 17721  001586  6E28               	movwf	i2printf@width,c
 17722                           
 17723                           ;doprnt.c: 548: flag = 0;
 17724  001588  0E00               	movlw	0
 17725  00158A  6E26               	movwf	i2printf@flag,c
 17726                           
 17727                           ;doprnt.c: 551: switch(*f) {
 17728                           
 17729                           ;doprnt.c: 550: for(;;) {
 17730  00158C  D003               	goto	i2l5303
 17731  00158E                     i2l5299:
 17732                           
 17733                           ;doprnt.c: 580: flag |= 0x04;
 17734  00158E  8426               	bsf	i2printf@flag,2,c
 17735                           
 17736                           ;doprnt.c: 581: f++;
 17737  001590  4A0D               	infsnz	i2printf@f,f,c
 17738  001592  2A0E               	incf	i2printf@f+1,f,c
 17739  001594                     i2l5303:
 17740  001594  C00D  FFF6         	movff	i2printf@f,tblptrl
 17741  001598  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17742  00159C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17743  00159C  6AF8               	clrf	tblptru,c
 17744  00159E                     	endif
 17745  00159E                     	if	0	;tblptru may be non-zero
 17746  00159E                     	endif
 17747  00159E  0008               	tblrd		*
 17748  0015A0  50F5               	movf	tablat,w,c
 17749                           
 17750                           ; Switch size 1, requested type "space"
 17751                           ; Number of cases is 1, Range of values is 48 to 48
 17752                           ; switch strategies available:
 17753                           ; Name         Instructions Cycles
 17754                           ; simple_byte            4     3 (average)
 17755                           ;	Chosen strategy is simple_byte
 17756  0015A2  0A30               	xorlw	48	; case 48
 17757  0015A4  B4D8               	btfsc	status,2,c
 17758  0015A6  D7F3               	goto	i2l5299
 17759                           
 17760                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 17761                           
 17762                           ;doprnt.c: 586: }
 17763                           
 17764                           ;doprnt.c: 585: break;
 17765  0015A8  C00D  FFF6         	movff	i2printf@f,tblptrl
 17766  0015AC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17767  0015B0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17768  0015B0  6AF8               	clrf	tblptru,c
 17769  0015B2                     	endif
 17770  0015B2                     	if	0	;tblptru may be non-zero
 17771  0015B2                     	endif
 17772  0015B2  0008               	tblrd		*
 17773  0015B4  50F5               	movf	tablat,w,c
 17774  0015B6  ECC2  F01F         	call	i2_isdigit
 17775  0015BA  A0D8               	btfss	status,0,c
 17776  0015BC  D0A6               	goto	i2l5351
 17777                           
 17778                           ;doprnt.c: 598: width = 0;
 17779  0015BE  0E00               	movlw	0
 17780  0015C0  6E29               	movwf	i2printf@width+1,c
 17781  0015C2  0E00               	movlw	0
 17782  0015C4  6E28               	movwf	i2printf@width,c
 17783  0015C6                     i2l5309:
 17784                           
 17785                           ;doprnt.c: 600: width *= 10;
 17786  0015C6  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 17787  0015CA  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 17788  0015CE  0E00               	movlw	0
 17789  0015D0  6E04               	movwf	i2___wmul@multiplicand+1,c
 17790  0015D2  0E0A               	movlw	10
 17791  0015D4  6E03               	movwf	i2___wmul@multiplicand,c
 17792  0015D6  EC56  F01F         	call	i2___wmul	;wreg free
 17793  0015DA  C001  F028         	movff	?i2___wmul,i2printf@width
 17794  0015DE  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 17795                           
 17796                           ;doprnt.c: 601: width += *f++ - '0';
 17797  0015E2  0ED0               	movlw	208
 17798  0015E4  6E19               	movwf	??i2_printf& (0+255),c
 17799  0015E6  0EFF               	movlw	255
 17800  0015E8  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 17801  0015EA  C00D  FFF6         	movff	i2printf@f,tblptrl
 17802  0015EE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17803  0015F2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17804  0015F2  6AF8               	clrf	tblptru,c
 17805  0015F4                     	endif
 17806  0015F4                     	if	0	;tblptru may be non-zero
 17807  0015F4                     	endif
 17808  0015F4  0008               	tblrd		*
 17809  0015F6  50F5               	movf	tablat,w,c
 17810  0015F8  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 17811  0015FA  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 17812  0015FC  5019               	movf	??i2_printf,w,c
 17813  0015FE  261B               	addwf	??i2_printf+2,f,c
 17814  001600  501A               	movf	??i2_printf+1,w,c
 17815  001602  221C               	addwfc	??i2_printf+3,f,c
 17816  001604  501B               	movf	??i2_printf+2,w,c
 17817  001606  2628               	addwf	i2printf@width,f,c
 17818  001608  501C               	movf	??i2_printf+3,w,c
 17819  00160A  2229               	addwfc	i2printf@width+1,f,c
 17820  00160C  4A0D               	infsnz	i2printf@f,f,c
 17821  00160E  2A0E               	incf	i2printf@f+1,f,c
 17822                           
 17823                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 17824  001610  C00D  FFF6         	movff	i2printf@f,tblptrl
 17825  001614  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17826  001618                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17827  001618  6AF8               	clrf	tblptru,c
 17828  00161A                     	endif
 17829  00161A                     	if	0	;tblptru may be non-zero
 17830  00161A                     	endif
 17831  00161A  0008               	tblrd		*
 17832  00161C  50F5               	movf	tablat,w,c
 17833  00161E  ECC2  F01F         	call	i2_isdigit
 17834  001622  A0D8               	btfss	status,0,c
 17835  001624  D072               	goto	i2l5351
 17836  001626  D7CF               	goto	i2l5309
 17837  001628                     i2l5317:
 17838                           
 17839                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 17840  001628  C020  FFD9         	movff	i2printf@ap,fsr2l
 17841  00162C  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 17842  001630  CFDE F01E          	movff	postinc2,i2printf@cp
 17843  001634  CFDD F01F          	movff	postdec2,i2printf@cp+1
 17844  001638  0E02               	movlw	2
 17845  00163A  2620               	addwf	i2printf@ap,f,c
 17846  00163C  0E00               	movlw	0
 17847  00163E  2221               	addwfc	i2printf@ap+1,f,c
 17848                           
 17849                           ;doprnt.c: 740: if(!cp)
 17850  001640  501E               	movf	i2printf@cp,w,c
 17851  001642  101F               	iorwf	i2printf@cp+1,w,c
 17852  001644  A4D8               	btfss	status,2,c
 17853  001646  D004               	goto	i2l5325
 17854                           
 17855                           ;doprnt.c: 741: cp = "(null)";
 17856  001648  0EB5               	movlw	low STR_107
 17857  00164A  6E1E               	movwf	i2printf@cp,c
 17858  00164C  0EFF               	movlw	high STR_107
 17859  00164E  6E1F               	movwf	i2printf@cp+1,c
 17860  001650                     i2l5325:
 17861                           
 17862                           ;doprnt.c: 745: len = 0;
 17863  001650  0E00               	movlw	0
 17864  001652  6E23               	movwf	i2printf@len+1,c
 17865  001654  0E00               	movlw	0
 17866  001656  6E22               	movwf	i2printf@len,c
 17867                           
 17868                           ;doprnt.c: 746: while(cp[len])
 17869  001658  D002               	goto	i2l5329
 17870  00165A                     i2l5327:
 17871                           
 17872                           ;doprnt.c: 747: len++;
 17873  00165A  4A22               	infsnz	i2printf@len,f,c
 17874  00165C  2A23               	incf	i2printf@len+1,f,c
 17875  00165E                     i2l5329:
 17876  00165E  5022               	movf	i2printf@len,w,c
 17877  001660  241E               	addwf	i2printf@cp,w,c
 17878  001662  6E19               	movwf	??i2_printf& (0+255),c
 17879  001664  5023               	movf	i2printf@len+1,w,c
 17880  001666  201F               	addwfc	i2printf@cp+1,w,c
 17881  001668  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 17882  00166A  C019  FFF6         	movff	??i2_printf,tblptrl
 17883  00166E  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 17884  001672  0E00               	movlw	low (__mediumconst shr (0+16))
 17885  001674  6EF8               	movwf	tblptru,c
 17886  001676  0E0F               	movlw	(high __ramtop+-1)
 17887  001678  64F7               	cpfsgt	tblptrh,c
 17888  00167A  D003               	bra	i2u393_47
 17889  00167C  0008               	tblrd		*
 17890  00167E  50F5               	movf	tablat,w,c
 17891  001680  D005               	bra	i2u393_40
 17892  001682                     i2u393_47:
 17893  001682  CFF6 FFE9          	movff	tblptrl,fsr0l
 17894  001686  CFF7 FFEA          	movff	tblptrh,fsr0h
 17895  00168A  50EF               	movf	indf0,w,c
 17896  00168C                     i2u393_40:
 17897  00168C  0900               	iorlw	0
 17898  00168E  A4D8               	btfss	status,2,c
 17899  001690  D7E4               	goto	i2l5327
 17900                           
 17901                           ;doprnt.c: 757: if(width > len)
 17902  001692  5028               	movf	i2printf@width,w,c
 17903  001694  5C22               	subwf	i2printf@len,w,c
 17904  001696  5029               	movf	i2printf@width+1,w,c
 17905  001698  5823               	subwfb	i2printf@len+1,w,c
 17906  00169A  B0D8               	btfsc	status,0,c
 17907  00169C  D005               	goto	i2l5335
 17908                           
 17909                           ;doprnt.c: 758: width -= len;
 17910  00169E  5022               	movf	i2printf@len,w,c
 17911  0016A0  5E28               	subwf	i2printf@width,f,c
 17912  0016A2  5023               	movf	i2printf@len+1,w,c
 17913  0016A4  5A29               	subwfb	i2printf@width+1,f,c
 17914  0016A6  D008               	goto	i2l5339
 17915  0016A8                     i2l5335:
 17916                           
 17917                           ;doprnt.c: 759: else
 17918                           ;doprnt.c: 760: width = 0;
 17919  0016A8  0E00               	movlw	0
 17920  0016AA  6E29               	movwf	i2printf@width+1,c
 17921  0016AC  0E00               	movlw	0
 17922  0016AE  6E28               	movwf	i2printf@width,c
 17923                           
 17924                           ;doprnt.c: 764: while(width--)
 17925  0016B0  D003               	goto	i2l5339
 17926  0016B2                     i2l5337:
 17927                           
 17928                           ;doprnt.c: 765: (putch(' ') );
 17929  0016B2  0E20               	movlw	32
 17930  0016B4  EC16  F020         	call	i2_putch
 17931  0016B8                     i2l5339:
 17932  0016B8  0628               	decf	i2printf@width,f,c
 17933  0016BA  A0D8               	btfss	status,0,c
 17934  0016BC  0629               	decf	i2printf@width+1,f,c
 17935  0016BE  2828               	incf	i2printf@width,w,c
 17936  0016C0  E1F8               	bnz	i2l5337
 17937  0016C2  2829               	incf	i2printf@width+1,w,c
 17938  0016C4  B4D8               	btfsc	status,2,c
 17939  0016C6  D016               	goto	i2l5345
 17940  0016C8  D7F4               	goto	i2l5337
 17941  0016CA                     i2l5341:
 17942                           
 17943                           ;doprnt.c: 768: (putch(*cp++) );
 17944  0016CA  C01E  FFF6         	movff	i2printf@cp,tblptrl
 17945  0016CE  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 17946  0016D2  0E00               	movlw	low (__mediumconst shr (0+16))
 17947  0016D4  6EF8               	movwf	tblptru,c
 17948  0016D6  0E0F               	movlw	(high __ramtop+-1)
 17949  0016D8  64F7               	cpfsgt	tblptrh,c
 17950  0016DA  D003               	bra	i2u397_47
 17951  0016DC  0008               	tblrd		*
 17952  0016DE  50F5               	movf	tablat,w,c
 17953  0016E0  D005               	bra	i2u397_40
 17954  0016E2                     i2u397_47:
 17955  0016E2  CFF6 FFE9          	movff	tblptrl,fsr0l
 17956  0016E6  CFF7 FFEA          	movff	tblptrh,fsr0h
 17957  0016EA  50EF               	movf	indf0,w,c
 17958  0016EC                     i2u397_40:
 17959  0016EC  EC16  F020         	call	i2_putch
 17960  0016F0  4A1E               	infsnz	i2printf@cp,f,c
 17961  0016F2  2A1F               	incf	i2printf@cp+1,f,c
 17962  0016F4                     i2l5345:
 17963  0016F4  0622               	decf	i2printf@len,f,c
 17964  0016F6  A0D8               	btfss	status,0,c
 17965  0016F8  0623               	decf	i2printf@len+1,f,c
 17966  0016FA  2822               	incf	i2printf@len,w,c
 17967  0016FC  E1E6               	bnz	i2l5341
 17968  0016FE  2823               	incf	i2printf@len+1,w,c
 17969  001700  B4D8               	btfsc	status,2,c
 17970  001702  D0DA               	goto	i2l5423
 17971  001704  D7E2               	goto	i2l5341
 17972  001706                     i2l5347:
 17973                           
 17974                           ;doprnt.c: 818: flag |= 0x40;
 17975  001706  8C26               	bsf	i2printf@flag,6,c
 17976                           
 17977                           ;doprnt.c: 822: }
 17978                           
 17979                           ;doprnt.c: 819: break;
 17980  001708  D01B               	goto	i2l1167
 17981  00170A                     i2l5351:
 17982  00170A  C00D  FFF6         	movff	i2printf@f,tblptrl
 17983  00170E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17984  001712  4A0D               	infsnz	i2printf@f,f,c
 17985  001714  2A0E               	incf	i2printf@f+1,f,c
 17986  001716                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17987  001716  6AF8               	clrf	tblptru,c
 17988  001718                     	endif
 17989  001718                     	if	0	;tblptru may be non-zero
 17990  001718                     	endif
 17991  001718  0008               	tblrd		*
 17992  00171A  CFF5 F027          	movff	tablat,i2printf@c
 17993  00171E  5027               	movf	i2printf@c,w,c
 17994                           
 17995                           ; Switch size 1, requested type "space"
 17996                           ; Number of cases is 5, Range of values is 0 to 117
 17997                           ; switch strategies available:
 17998                           ; Name         Instructions Cycles
 17999                           ; simple_byte           16     9 (average)
 18000                           ;	Chosen strategy is simple_byte
 18001  001720  0A00               	xorlw	0	; case 0
 18002  001722  B4D8               	btfsc	status,2,c
 18003  001724  0012               	return	
 18004  001726  0A64               	xorlw	100	; case 100
 18005  001728  B4D8               	btfsc	status,2,c
 18006  00172A  D00A               	goto	i2l1167
 18007  00172C  0A0D               	xorlw	13	; case 105
 18008  00172E  B4D8               	btfsc	status,2,c
 18009  001730  D007               	goto	i2l1167
 18010  001732  0A1A               	xorlw	26	; case 115
 18011  001734  B4D8               	btfsc	status,2,c
 18012  001736  D778               	goto	i2l5317
 18013  001738  0A06               	xorlw	6	; case 117
 18014  00173A  B4D8               	btfsc	status,2,c
 18015  00173C  D7E4               	goto	i2l5347
 18016  00173E  D0BC               	goto	i2l5423
 18017  001740                     i2l1167:
 18018                           
 18019                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 18020  001740  BC26               	btfsc	i2printf@flag,6,c
 18021  001742  D015               	goto	i2l5363
 18022                           
 18023                           ;doprnt.c: 1253: {
 18024                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 18025  001744  C020  FFD9         	movff	i2printf@ap,fsr2l
 18026  001748  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 18027  00174C  CFDE F024          	movff	postinc2,i2printf@val
 18028  001750  CFDD F025          	movff	postdec2,i2printf@val+1
 18029  001754  0E02               	movlw	2
 18030  001756  2620               	addwf	i2printf@ap,f,c
 18031  001758  0E00               	movlw	0
 18032  00175A  2221               	addwfc	i2printf@ap+1,f,c
 18033                           
 18034                           ;doprnt.c: 1261: if((int)val < 0) {
 18035  00175C  AE25               	btfss	i2printf@val+1,7,c
 18036  00175E  D013               	goto	i2l5367
 18037                           
 18038                           ;doprnt.c: 1262: flag |= 0x03;
 18039  001760  0E03               	movlw	3
 18040  001762  1226               	iorwf	i2printf@flag,f,c
 18041                           
 18042                           ;doprnt.c: 1263: val = -val;
 18043  001764  6C24               	negf	i2printf@val,c
 18044  001766  1E25               	comf	i2printf@val+1,f,c
 18045  001768  B0D8               	btfsc	status,0,c
 18046  00176A  2A25               	incf	i2printf@val+1,f,c
 18047                           
 18048                           ;doprnt.c: 1264: }
 18049                           ;doprnt.c: 1266: }
 18050  00176C  D00C               	goto	i2l5367
 18051  00176E                     i2l5363:
 18052                           
 18053                           ;doprnt.c: 1268: else
 18054                           ;doprnt.c: 1273: {
 18055                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 18056  00176E  C020  FFD9         	movff	i2printf@ap,fsr2l
 18057  001772  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 18058  001776  CFDE F024          	movff	postinc2,i2printf@val
 18059  00177A  CFDD F025          	movff	postdec2,i2printf@val+1
 18060  00177E  0E02               	movlw	2
 18061  001780  2620               	addwf	i2printf@ap,f,c
 18062  001782  0E00               	movlw	0
 18063  001784  2221               	addwfc	i2printf@ap+1,f,c
 18064  001786                     i2l5367:
 18065                           
 18066                           ;doprnt.c: 1287: }
 18067                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 18068  001786  0E01               	movlw	1
 18069  001788  6E27               	movwf	i2printf@c,c
 18070  00178A                     i2l5369:
 18071  00178A  0E05               	movlw	5
 18072  00178C  1827               	xorwf	i2printf@c,w,c
 18073  00178E  B4D8               	btfsc	status,2,c
 18074  001790  D015               	goto	i2l5381
 18075                           
 18076                           ;doprnt.c: 1306: if(val < dpowers[c])
 18077  001792  5027               	movf	i2printf@c,w,c
 18078  001794  0D02               	mullw	2
 18079  001796  0E82               	movlw	low _dpowers
 18080  001798  24F3               	addwf	prodl,w,c
 18081  00179A  6EF6               	movwf	tblptrl,c
 18082  00179C  0EFB               	movlw	high _dpowers
 18083  00179E  20F4               	addwfc	prodh,w,c
 18084  0017A0  6EF7               	movwf	tblptrh,c
 18085  0017A2                     	if	1	;There are 3 active tblptr bytes
 18086  0017A2  6AF8               	clrf	tblptru,c
 18087  0017A4  0E00               	movlw	low (__mediumconst shr (0+16))
 18088  0017A6  22F8               	addwfc	tblptru,f,c
 18089  0017A8                     	endif
 18090  0017A8  0009               	tblrd		*+
 18091  0017AA  50F5               	movf	tablat,w,c
 18092  0017AC  5C24               	subwf	i2printf@val,w,c
 18093  0017AE  0009               	tblrd		*+
 18094  0017B0  50F5               	movf	tablat,w,c
 18095  0017B2  5825               	subwfb	i2printf@val+1,w,c
 18096  0017B4  A0D8               	btfss	status,0,c
 18097  0017B6  D002               	goto	i2l5381
 18098                           
 18099                           ;doprnt.c: 1307: break;
 18100  0017B8  2A27               	incf	i2printf@c,f,c
 18101  0017BA  D7E7               	goto	i2l5369
 18102  0017BC                     i2l5381:
 18103                           
 18104                           ;doprnt.c: 1345: if(width && flag & 0x03)
 18105  0017BC  5028               	movf	i2printf@width,w,c
 18106  0017BE  1029               	iorwf	i2printf@width+1,w,c
 18107  0017C0  B4D8               	btfsc	status,2,c
 18108  0017C2  D009               	goto	i2l5387
 18109  0017C4  C026  F019         	movff	i2printf@flag,??i2_printf
 18110  0017C8  0E03               	movlw	3
 18111  0017CA  1619               	andwf	??i2_printf,f,c
 18112  0017CC  B4D8               	btfsc	status,2,c
 18113  0017CE  D003               	goto	i2l5387
 18114                           
 18115                           ;doprnt.c: 1346: width--;
 18116  0017D0  0628               	decf	i2printf@width,f,c
 18117  0017D2  A0D8               	btfss	status,0,c
 18118  0017D4  0629               	decf	i2printf@width+1,f,c
 18119  0017D6                     i2l5387:
 18120                           
 18121                           ;doprnt.c: 1381: if(width > c)
 18122  0017D6  0E80               	movlw	128
 18123  0017D8  BE27               	btfsc	i2printf@c,7,c
 18124  0017DA  0E7F               	movlw	127
 18125  0017DC  6E19               	movwf	??i2_printf& (0+255),c
 18126  0017DE  5028               	movf	i2printf@width,w,c
 18127  0017E0  5C27               	subwf	i2printf@c,w,c
 18128  0017E2  5029               	movf	i2printf@width+1,w,c
 18129  0017E4  0A80               	xorlw	128
 18130  0017E6  5819               	subwfb	??i2_printf& (0+255),w,c
 18131  0017E8  B0D8               	btfsc	status,0,c
 18132  0017EA  D007               	goto	i2l5391
 18133                           
 18134                           ;doprnt.c: 1382: width -= c;
 18135  0017EC  5027               	movf	i2printf@c,w,c
 18136  0017EE  5E28               	subwf	i2printf@width,f,c
 18137  0017F0  0E00               	movlw	0
 18138  0017F2  BE27               	btfsc	i2printf@c,7,c
 18139  0017F4  0EFF               	movlw	255
 18140  0017F6  5A29               	subwfb	i2printf@width+1,f,c
 18141  0017F8  D004               	goto	i2l5393
 18142  0017FA                     i2l5391:
 18143                           
 18144                           ;doprnt.c: 1383: else
 18145                           ;doprnt.c: 1384: width = 0;
 18146  0017FA  0E00               	movlw	0
 18147  0017FC  6E29               	movwf	i2printf@width+1,c
 18148  0017FE  0E00               	movlw	0
 18149  001800  6E28               	movwf	i2printf@width,c
 18150  001802                     i2l5393:
 18151                           
 18152                           ;doprnt.c: 1387: if(flag & 0x04) {
 18153  001802  A426               	btfss	i2printf@flag,2,c
 18154  001804  D014               	goto	i2l5405
 18155                           
 18156                           ;doprnt.c: 1392: if(flag & 0x03)
 18157  001806  C026  F019         	movff	i2printf@flag,??i2_printf
 18158  00180A  0E03               	movlw	3
 18159  00180C  1619               	andwf	??i2_printf,f,c
 18160  00180E  B4D8               	btfsc	status,2,c
 18161  001810  D003               	goto	i2l5399
 18162                           
 18163                           ;doprnt.c: 1393: (putch('-') );
 18164  001812  0E2D               	movlw	45
 18165  001814  EC16  F020         	call	i2_putch
 18166  001818                     i2l5399:
 18167                           
 18168                           ;doprnt.c: 1415: if(width)
 18169  001818  5028               	movf	i2printf@width,w,c
 18170  00181A  1029               	iorwf	i2printf@width+1,w,c
 18171  00181C  B4D8               	btfsc	status,2,c
 18172  00181E  D01E               	goto	i2l5415
 18173                           
 18174                           ;doprnt.c: 1417: (putch('0') );
 18175                           
 18176                           ;doprnt.c: 1416: do
 18177  001820  0E30               	movlw	48
 18178  001822  EC16  F020         	call	i2_putch
 18179                           
 18180                           ;doprnt.c: 1418: while(--width);
 18181  001826  0628               	decf	i2printf@width,f,c
 18182  001828  A0D8               	btfss	status,0,c
 18183  00182A  0629               	decf	i2printf@width+1,f,c
 18184  00182C  D7F5               	goto	i2l5399
 18185  00182E                     i2l5405:
 18186                           
 18187                           ;doprnt.c: 1422: {
 18188                           ;doprnt.c: 1424: if(width
 18189                           ;doprnt.c: 1428: )
 18190  00182E  5028               	movf	i2printf@width,w,c
 18191  001830  1029               	iorwf	i2printf@width+1,w,c
 18192  001832  B4D8               	btfsc	status,2,c
 18193  001834  D00A               	goto	i2l5411
 18194  001836                     i2l5407:
 18195                           
 18196                           ;doprnt.c: 1430: (putch(' ') );
 18197  001836  0E20               	movlw	32
 18198  001838  EC16  F020         	call	i2_putch
 18199                           
 18200                           ;doprnt.c: 1431: while(--width);
 18201  00183C  0628               	decf	i2printf@width,f,c
 18202  00183E  A0D8               	btfss	status,0,c
 18203  001840  0629               	decf	i2printf@width+1,f,c
 18204  001842  5028               	movf	i2printf@width,w,c
 18205  001844  1029               	iorwf	i2printf@width+1,w,c
 18206  001846  A4D8               	btfss	status,2,c
 18207  001848  D7F6               	goto	i2l5407
 18208  00184A                     i2l5411:
 18209                           
 18210                           ;doprnt.c: 1438: if(flag & 0x03)
 18211  00184A  C026  F019         	movff	i2printf@flag,??i2_printf
 18212  00184E  0E03               	movlw	3
 18213  001850  1619               	andwf	??i2_printf,f,c
 18214  001852  B4D8               	btfsc	status,2,c
 18215  001854  D003               	goto	i2l5415
 18216                           
 18217                           ;doprnt.c: 1439: (putch('-') );
 18218  001856  0E2D               	movlw	45
 18219  001858  EC16  F020         	call	i2_putch
 18220  00185C                     i2l5415:
 18221                           
 18222                           ;doprnt.c: 1469: }
 18223                           ;doprnt.c: 1472: prec = c;
 18224  00185C  C027  F01D         	movff	i2printf@c,i2printf@prec
 18225                           
 18226                           ;doprnt.c: 1474: while(prec--) {
 18227  001860  D027               	goto	i2l5421
 18228  001862                     i2l5417:
 18229                           
 18230                           ;doprnt.c: 1478: {
 18231                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 18232  001862  501D               	movf	i2printf@prec,w,c
 18233  001864  0D02               	mullw	2
 18234  001866  0E82               	movlw	low _dpowers
 18235  001868  24F3               	addwf	prodl,w,c
 18236  00186A  6EF6               	movwf	tblptrl,c
 18237  00186C  0EFB               	movlw	high _dpowers
 18238  00186E  20F4               	addwfc	prodh,w,c
 18239  001870  6EF7               	movwf	tblptrh,c
 18240  001872                     	if	1	;There are 3 active tblptr bytes
 18241  001872  6AF8               	clrf	tblptru,c
 18242  001874  0E00               	movlw	low (__mediumconst shr (0+16))
 18243  001876  22F8               	addwfc	tblptru,f,c
 18244  001878                     	endif
 18245  001878  0009               	tblrd		*+
 18246  00187A  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 18247  00187E  000A               	tblrd		*-
 18248  001880  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 18249  001884  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 18250  001888  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 18251  00188C  EC6D  F01C         	call	i2___lwdiv	;wreg free
 18252  001890  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 18253  001894  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 18254  001898  0E00               	movlw	0
 18255  00189A  6E04               	movwf	i2___lwmod@divisor+1,c
 18256  00189C  0E0A               	movlw	10
 18257  00189E  6E03               	movwf	i2___lwmod@divisor,c
 18258  0018A0  EC53  F01D         	call	i2___lwmod	;wreg free
 18259  0018A4  5001               	movf	?i2___lwmod,w,c
 18260  0018A6  0F30               	addlw	48
 18261  0018A8  6E27               	movwf	i2printf@c,c
 18262                           
 18263                           ;doprnt.c: 1523: }
 18264                           ;doprnt.c: 1524: (putch(c) );
 18265  0018AA  5027               	movf	i2printf@c,w,c
 18266  0018AC  EC16  F020         	call	i2_putch
 18267  0018B0                     i2l5421:
 18268  0018B0  061D               	decf	i2printf@prec,f,c
 18269  0018B2  281D               	incf	i2printf@prec,w,c
 18270  0018B4  A4D8               	btfss	status,2,c
 18271  0018B6  D7D5               	goto	i2l5417
 18272  0018B8                     i2l5423:
 18273  0018B8  C00D  FFF6         	movff	i2printf@f,tblptrl
 18274  0018BC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18275  0018C0  4A0D               	infsnz	i2printf@f,f,c
 18276  0018C2  2A0E               	incf	i2printf@f+1,f,c
 18277  0018C4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18278  0018C4  6AF8               	clrf	tblptru,c
 18279  0018C6                     	endif
 18280  0018C6                     	if	0	;tblptru may be non-zero
 18281  0018C6                     	endif
 18282  0018C6  0008               	tblrd		*
 18283  0018C8  CFF5 F027          	movff	tablat,i2printf@c
 18284  0018CC  5027               	movf	i2printf@c,w,c
 18285  0018CE  B4D8               	btfsc	status,2,c
 18286  0018D0  0012               	return	
 18287  0018D2  D64E               	goto	i2l5293
 18288  0018D4                     __end_ofi2_printf:
 18289                           	opt stack 0
 18290                           pclatu	equ	0xFFB
 18291                           pclath	equ	0xFFA
 18292                           tblptru	equ	0xFF8
 18293                           tblptrh	equ	0xFF7
 18294                           tblptrl	equ	0xFF6
 18295                           tablat	equ	0xFF5
 18296                           prodh	equ	0xFF4
 18297                           prodl	equ	0xFF3
 18298                           intcon	equ	0xFF2
 18299                           intcon2	equ	0xFF1
 18300                           intcon3	equ	0xFF0
 18301                           indf0	equ	0xFEF
 18302                           postinc0	equ	0xFEE
 18303                           fsr0h	equ	0xFEA
 18304                           fsr0l	equ	0xFE9
 18305                           wreg	equ	0xFE8
 18306                           postdec1	equ	0xFE5
 18307                           fsr1h	equ	0xFE2
 18308                           fsr1l	equ	0xFE1
 18309                           indf2	equ	0xFDF
 18310                           postinc2	equ	0xFDE
 18311                           postdec2	equ	0xFDD
 18312                           fsr2h	equ	0xFDA
 18313                           fsr2l	equ	0xFD9
 18314                           status	equ	0xFD8
 18315                           
 18316 ;; *************** function i2_putch *****************
 18317 ;; Defined at:
 18318 ;;		line 20 in file "lcd.c"
 18319 ;; Parameters:    Size  Location     Type
 18320 ;;  data            1    wreg     unsigned char 
 18321 ;; Auto vars:     Size  Location     Type
 18322 ;;  data            1    2[COMRAM] unsigned char 
 18323 ;; Return value:  Size  Location     Type
 18324 ;;                  1    wreg      void 
 18325 ;; Registers used:
 18326 ;;		wreg, status,2, status,0, cstack
 18327 ;; Tracked objects:
 18328 ;;		On entry : 0/0
 18329 ;;		On exit  : 0/0
 18330 ;;		Unchanged: 0/0
 18331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18333 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18335 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18336 ;;Total ram usage:        1 bytes
 18337 ;; Hardware stack levels used:    1
 18338 ;; Hardware stack levels required when called:    1
 18339 ;; This function calls:
 18340 ;;		i2_lcdNibble
 18341 ;; This function is called by:
 18342 ;;		i2_printf
 18343 ;; This function uses a non-reentrant model
 18344 ;;
 18345                           
 18346                           	psect	text74
 18347  00402C                     __ptext74:
 18348                           	opt stack 0
 18349  00402C                     i2_putch:
 18350                           	opt stack 19
 18351                           
 18352                           ;incstack = 0
 18353                           ;i2putch@data stored from wreg
 18354  00402C  6E03               	movwf	i2putch@data,c
 18355                           
 18356                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 18357  00402E  848C               	bsf	3980,2,c	;volatile
 18358                           
 18359                           ;lcd.c: 22: lcdNibble(data);
 18360  004030  5003               	movf	i2putch@data,w,c
 18361  004032  EC42  F01C         	call	i2_lcdNibble
 18362  004036  0012               	return		;funcret
 18363  004038                     __end_ofi2_putch:
 18364                           	opt stack 0
 18365                           pclatu	equ	0xFFB
 18366                           pclath	equ	0xFFA
 18367                           tblptru	equ	0xFF8
 18368                           tblptrh	equ	0xFF7
 18369                           tblptrl	equ	0xFF6
 18370                           tablat	equ	0xFF5
 18371                           prodh	equ	0xFF4
 18372                           prodl	equ	0xFF3
 18373                           intcon	equ	0xFF2
 18374                           intcon2	equ	0xFF1
 18375                           intcon3	equ	0xFF0
 18376                           indf0	equ	0xFEF
 18377                           postinc0	equ	0xFEE
 18378                           fsr0h	equ	0xFEA
 18379                           fsr0l	equ	0xFE9
 18380                           wreg	equ	0xFE8
 18381                           postdec1	equ	0xFE5
 18382                           fsr1h	equ	0xFE2
 18383                           fsr1l	equ	0xFE1
 18384                           indf2	equ	0xFDF
 18385                           postinc2	equ	0xFDE
 18386                           postdec2	equ	0xFDD
 18387                           fsr2h	equ	0xFDA
 18388                           fsr2l	equ	0xFD9
 18389                           status	equ	0xFD8
 18390                           
 18391 ;; *************** function i2_isdigit *****************
 18392 ;; Defined at:
 18393 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 18394 ;; Parameters:    Size  Location     Type
 18395 ;;  c               1    wreg     unsigned char 
 18396 ;; Auto vars:     Size  Location     Type
 18397 ;;  c               1    2[COMRAM] unsigned char 
 18398 ;; Return value:  Size  Location     Type
 18399 ;;		None               void
 18400 ;; Registers used:
 18401 ;;		wreg, status,2, status,0
 18402 ;; Tracked objects:
 18403 ;;		On entry : 0/0
 18404 ;;		On exit  : 0/0
 18405 ;;		Unchanged: 0/0
 18406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18408 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18409 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18410 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18411 ;;Total ram usage:        3 bytes
 18412 ;; Hardware stack levels used:    1
 18413 ;; This function calls:
 18414 ;;		Nothing
 18415 ;; This function is called by:
 18416 ;;		i2_printf
 18417 ;; This function uses a non-reentrant model
 18418 ;;
 18419                           
 18420                           	psect	text75
 18421  003F84                     __ptext75:
 18422                           	opt stack 0
 18423  003F84                     i2_isdigit:
 18424                           	opt stack 20
 18425                           
 18426                           ;incstack = 0
 18427                           ;i2isdigit@c stored from wreg
 18428  003F84  6E03               	movwf	i2isdigit@c,c
 18429  003F86  0E00               	movlw	0
 18430  003F88  6E02               	movwf	i2_isdigit$1852,c
 18431  003F8A  0E3A               	movlw	58
 18432  003F8C  6003               	cpfslt	i2isdigit@c,c
 18433  003F8E  D005               	goto	i2l5003
 18434  003F90  0E2F               	movlw	47
 18435  003F92  6403               	cpfsgt	i2isdigit@c,c
 18436  003F94  D002               	goto	i2l5003
 18437  003F96  0E01               	movlw	1
 18438  003F98  6E02               	movwf	i2_isdigit$1852,c
 18439  003F9A                     i2l5003:
 18440  003F9A  C002  F001         	movff	i2_isdigit$1852,??i2_isdigit
 18441  003F9E  3001               	rrcf	??i2_isdigit,w,c
 18442  003FA0  0012               	return	
 18443  003FA2                     __end_ofi2_isdigit:
 18444                           	opt stack 0
 18445                           pclatu	equ	0xFFB
 18446                           pclath	equ	0xFFA
 18447                           tblptru	equ	0xFF8
 18448                           tblptrh	equ	0xFF7
 18449                           tblptrl	equ	0xFF6
 18450                           tablat	equ	0xFF5
 18451                           prodh	equ	0xFF4
 18452                           prodl	equ	0xFF3
 18453                           intcon	equ	0xFF2
 18454                           intcon2	equ	0xFF1
 18455                           intcon3	equ	0xFF0
 18456                           indf0	equ	0xFEF
 18457                           postinc0	equ	0xFEE
 18458                           fsr0h	equ	0xFEA
 18459                           fsr0l	equ	0xFE9
 18460                           wreg	equ	0xFE8
 18461                           postdec1	equ	0xFE5
 18462                           fsr1h	equ	0xFE2
 18463                           fsr1l	equ	0xFE1
 18464                           indf2	equ	0xFDF
 18465                           postinc2	equ	0xFDE
 18466                           postdec2	equ	0xFDD
 18467                           fsr2h	equ	0xFDA
 18468                           fsr2l	equ	0xFD9
 18469                           status	equ	0xFD8
 18470                           
 18471 ;; *************** function i2___wmul *****************
 18472 ;; Defined at:
 18473 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 18474 ;; Parameters:    Size  Location     Type
 18475 ;;  multiplier      2    0[COMRAM] unsigned int 
 18476 ;;  multiplicand    2    2[COMRAM] unsigned int 
 18477 ;; Auto vars:     Size  Location     Type
 18478 ;;  __wmul          2    4[COMRAM] unsigned int 
 18479 ;; Return value:  Size  Location     Type
 18480 ;;                  2    0[COMRAM] unsigned int 
 18481 ;; Registers used:
 18482 ;;		wreg, status,2, status,0, prodl, prodh
 18483 ;; Tracked objects:
 18484 ;;		On entry : 0/0
 18485 ;;		On exit  : 0/0
 18486 ;;		Unchanged: 0/0
 18487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18488 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18489 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18491 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18492 ;;Total ram usage:        6 bytes
 18493 ;; Hardware stack levels used:    1
 18494 ;; This function calls:
 18495 ;;		Nothing
 18496 ;; This function is called by:
 18497 ;;		_printSortTimer
 18498 ;;		_retrieveLog
 18499 ;;		i2_printf
 18500 ;; This function uses a non-reentrant model
 18501 ;;
 18502                           
 18503                           	psect	text76
 18504  003EAC                     __ptext76:
 18505                           	opt stack 0
 18506  003EAC                     i2___wmul:
 18507                           	opt stack 20
 18508                           
 18509                           ;incstack = 0
 18510  003EAC  5001               	movf	i2___wmul@multiplier,w,c
 18511  003EAE  0203               	mulwf	i2___wmul@multiplicand,c
 18512  003EB0  CFF3 F005          	movff	prodl,i2___wmul@product
 18513  003EB4  CFF4 F006          	movff	prodh,i2___wmul@product+1
 18514  003EB8  5001               	movf	i2___wmul@multiplier,w,c
 18515  003EBA  0204               	mulwf	i2___wmul@multiplicand+1,c
 18516  003EBC  50F3               	movf	prodl,w,c
 18517  003EBE  2606               	addwf	i2___wmul@product+1,f,c
 18518  003EC0  5002               	movf	i2___wmul@multiplier+1,w,c
 18519  003EC2  0203               	mulwf	i2___wmul@multiplicand,c
 18520  003EC4  50F3               	movf	prodl,w,c
 18521  003EC6  2606               	addwf	i2___wmul@product+1,f,c
 18522  003EC8  C005  F001         	movff	i2___wmul@product,?i2___wmul
 18523  003ECC  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 18524  003ED0  0012               	return	
 18525  003ED2                     __end_ofi2___wmul:
 18526                           	opt stack 0
 18527                           pclatu	equ	0xFFB
 18528                           pclath	equ	0xFFA
 18529                           tblptru	equ	0xFF8
 18530                           tblptrh	equ	0xFF7
 18531                           tblptrl	equ	0xFF6
 18532                           tablat	equ	0xFF5
 18533                           prodh	equ	0xFF4
 18534                           prodl	equ	0xFF3
 18535                           intcon	equ	0xFF2
 18536                           intcon2	equ	0xFF1
 18537                           intcon3	equ	0xFF0
 18538                           indf0	equ	0xFEF
 18539                           postinc0	equ	0xFEE
 18540                           fsr0h	equ	0xFEA
 18541                           fsr0l	equ	0xFE9
 18542                           wreg	equ	0xFE8
 18543                           postdec1	equ	0xFE5
 18544                           fsr1h	equ	0xFE2
 18545                           fsr1l	equ	0xFE1
 18546                           indf2	equ	0xFDF
 18547                           postinc2	equ	0xFDE
 18548                           postdec2	equ	0xFDD
 18549                           fsr2h	equ	0xFDA
 18550                           fsr2l	equ	0xFD9
 18551                           status	equ	0xFD8
 18552                           
 18553 ;; *************** function i2___lwmod *****************
 18554 ;; Defined at:
 18555 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 18556 ;; Parameters:    Size  Location     Type
 18557 ;;  dividend        2    0[COMRAM] unsigned int 
 18558 ;;  divisor         2    2[COMRAM] unsigned int 
 18559 ;; Auto vars:     Size  Location     Type
 18560 ;;  __lwmod         1    4[COMRAM] unsigned char 
 18561 ;; Return value:  Size  Location     Type
 18562 ;;                  2    0[COMRAM] unsigned int 
 18563 ;; Registers used:
 18564 ;;		wreg, status,2, status,0
 18565 ;; Tracked objects:
 18566 ;;		On entry : 0/0
 18567 ;;		On exit  : 0/0
 18568 ;;		Unchanged: 0/0
 18569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18570 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18571 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18573 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18574 ;;Total ram usage:        5 bytes
 18575 ;; Hardware stack levels used:    1
 18576 ;; This function calls:
 18577 ;;		Nothing
 18578 ;; This function is called by:
 18579 ;;		_printSortTimer
 18580 ;;		i2_printf
 18581 ;; This function uses a non-reentrant model
 18582 ;;
 18583                           
 18584                           	psect	text77
 18585  003AA6                     __ptext77:
 18586                           	opt stack 0
 18587  003AA6                     i2___lwmod:
 18588                           	opt stack 20
 18589                           
 18590                           ;incstack = 0
 18591  003AA6  5003               	movf	i2___lwmod@divisor,w,c
 18592  003AA8  1004               	iorwf	i2___lwmod@divisor+1,w,c
 18593  003AAA  B4D8               	btfsc	status,2,c
 18594  003AAC  D018               	goto	i2l1624
 18595  003AAE  0E01               	movlw	1
 18596  003AB0  6E05               	movwf	i2___lwmod@counter,c
 18597  003AB2  D004               	goto	i2l5035
 18598  003AB4                     i2l5033:
 18599  003AB4  90D8               	bcf	status,0,c
 18600  003AB6  3603               	rlcf	i2___lwmod@divisor,f,c
 18601  003AB8  3604               	rlcf	i2___lwmod@divisor+1,f,c
 18602  003ABA  2A05               	incf	i2___lwmod@counter,f,c
 18603  003ABC                     i2l5035:
 18604  003ABC  AE04               	btfss	i2___lwmod@divisor+1,7,c
 18605  003ABE  D7FA               	goto	i2l5033
 18606  003AC0                     i2l5037:
 18607  003AC0  5003               	movf	i2___lwmod@divisor,w,c
 18608  003AC2  5C01               	subwf	i2___lwmod@dividend,w,c
 18609  003AC4  5004               	movf	i2___lwmod@divisor+1,w,c
 18610  003AC6  5802               	subwfb	i2___lwmod@dividend+1,w,c
 18611  003AC8  A0D8               	btfss	status,0,c
 18612  003ACA  D004               	goto	i2l5041
 18613  003ACC  5003               	movf	i2___lwmod@divisor,w,c
 18614  003ACE  5E01               	subwf	i2___lwmod@dividend,f,c
 18615  003AD0  5004               	movf	i2___lwmod@divisor+1,w,c
 18616  003AD2  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 18617  003AD4                     i2l5041:
 18618  003AD4  90D8               	bcf	status,0,c
 18619  003AD6  3204               	rrcf	i2___lwmod@divisor+1,f,c
 18620  003AD8  3203               	rrcf	i2___lwmod@divisor,f,c
 18621  003ADA  2E05               	decfsz	i2___lwmod@counter,f,c
 18622  003ADC  D7F1               	goto	i2l5037
 18623  003ADE                     i2l1624:
 18624  003ADE  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 18625  003AE2  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 18626  003AE6  0012               	return		;funcret
 18627  003AE8                     __end_ofi2___lwmod:
 18628                           	opt stack 0
 18629                           pclatu	equ	0xFFB
 18630                           pclath	equ	0xFFA
 18631                           tblptru	equ	0xFF8
 18632                           tblptrh	equ	0xFF7
 18633                           tblptrl	equ	0xFF6
 18634                           tablat	equ	0xFF5
 18635                           prodh	equ	0xFF4
 18636                           prodl	equ	0xFF3
 18637                           intcon	equ	0xFF2
 18638                           intcon2	equ	0xFF1
 18639                           intcon3	equ	0xFF0
 18640                           indf0	equ	0xFEF
 18641                           postinc0	equ	0xFEE
 18642                           fsr0h	equ	0xFEA
 18643                           fsr0l	equ	0xFE9
 18644                           wreg	equ	0xFE8
 18645                           postdec1	equ	0xFE5
 18646                           fsr1h	equ	0xFE2
 18647                           fsr1l	equ	0xFE1
 18648                           indf2	equ	0xFDF
 18649                           postinc2	equ	0xFDE
 18650                           postdec2	equ	0xFDD
 18651                           fsr2h	equ	0xFDA
 18652                           fsr2l	equ	0xFD9
 18653                           status	equ	0xFD8
 18654                           
 18655 ;; *************** function i2___lwdiv *****************
 18656 ;; Defined at:
 18657 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 18658 ;; Parameters:    Size  Location     Type
 18659 ;;  dividend        2    5[COMRAM] unsigned int 
 18660 ;;  divisor         2    7[COMRAM] unsigned int 
 18661 ;; Auto vars:     Size  Location     Type
 18662 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 18663 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 18664 ;; Return value:  Size  Location     Type
 18665 ;;                  2    5[COMRAM] unsigned int 
 18666 ;; Registers used:
 18667 ;;		wreg, status,2, status,0
 18668 ;; Tracked objects:
 18669 ;;		On entry : 0/0
 18670 ;;		On exit  : 0/0
 18671 ;;		Unchanged: 0/0
 18672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18673 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18674 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18676 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18677 ;;Total ram usage:        7 bytes
 18678 ;; Hardware stack levels used:    1
 18679 ;; This function calls:
 18680 ;;		Nothing
 18681 ;; This function is called by:
 18682 ;;		_printSortTimer
 18683 ;;		i2_printf
 18684 ;; This function uses a non-reentrant model
 18685 ;;
 18686                           
 18687                           	psect	text78
 18688  0038DA                     __ptext78:
 18689                           	opt stack 0
 18690  0038DA                     i2___lwdiv:
 18691                           	opt stack 20
 18692                           
 18693                           ;incstack = 0
 18694  0038DA  0E00               	movlw	0
 18695  0038DC  6E0B               	movwf	i2___lwdiv@quotient+1,c
 18696  0038DE  0E00               	movlw	0
 18697  0038E0  6E0A               	movwf	i2___lwdiv@quotient,c
 18698  0038E2  5008               	movf	i2___lwdiv@divisor,w,c
 18699  0038E4  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 18700  0038E6  B4D8               	btfsc	status,2,c
 18701  0038E8  D01C               	goto	i2l1614
 18702  0038EA  0E01               	movlw	1
 18703  0038EC  6E0C               	movwf	i2___lwdiv@counter,c
 18704  0038EE  D004               	goto	i2l5015
 18705  0038F0                     i2l5013:
 18706  0038F0  90D8               	bcf	status,0,c
 18707  0038F2  3608               	rlcf	i2___lwdiv@divisor,f,c
 18708  0038F4  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 18709  0038F6  2A0C               	incf	i2___lwdiv@counter,f,c
 18710  0038F8                     i2l5015:
 18711  0038F8  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 18712  0038FA  D7FA               	goto	i2l5013
 18713  0038FC                     i2l5017:
 18714  0038FC  90D8               	bcf	status,0,c
 18715  0038FE  360A               	rlcf	i2___lwdiv@quotient,f,c
 18716  003900  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 18717  003902  5008               	movf	i2___lwdiv@divisor,w,c
 18718  003904  5C06               	subwf	i2___lwdiv@dividend,w,c
 18719  003906  5009               	movf	i2___lwdiv@divisor+1,w,c
 18720  003908  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 18721  00390A  A0D8               	btfss	status,0,c
 18722  00390C  D005               	goto	i2l5025
 18723  00390E  5008               	movf	i2___lwdiv@divisor,w,c
 18724  003910  5E06               	subwf	i2___lwdiv@dividend,f,c
 18725  003912  5009               	movf	i2___lwdiv@divisor+1,w,c
 18726  003914  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 18727  003916  800A               	bsf	i2___lwdiv@quotient,0,c
 18728  003918                     i2l5025:
 18729  003918  90D8               	bcf	status,0,c
 18730  00391A  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 18731  00391C  3208               	rrcf	i2___lwdiv@divisor,f,c
 18732  00391E  2E0C               	decfsz	i2___lwdiv@counter,f,c
 18733  003920  D7ED               	goto	i2l5017
 18734  003922                     i2l1614:
 18735  003922  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 18736  003926  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 18737  00392A  0012               	return		;funcret
 18738  00392C                     __end_ofi2___lwdiv:
 18739                           	opt stack 0
 18740                           pclatu	equ	0xFFB
 18741                           pclath	equ	0xFFA
 18742                           tblptru	equ	0xFF8
 18743                           tblptrh	equ	0xFF7
 18744                           tblptrl	equ	0xFF6
 18745                           tablat	equ	0xFF5
 18746                           prodh	equ	0xFF4
 18747                           prodl	equ	0xFF3
 18748                           intcon	equ	0xFF2
 18749                           intcon2	equ	0xFF1
 18750                           intcon3	equ	0xFF0
 18751                           indf0	equ	0xFEF
 18752                           postinc0	equ	0xFEE
 18753                           fsr0h	equ	0xFEA
 18754                           fsr0l	equ	0xFE9
 18755                           wreg	equ	0xFE8
 18756                           postdec1	equ	0xFE5
 18757                           fsr1h	equ	0xFE2
 18758                           fsr1l	equ	0xFE1
 18759                           indf2	equ	0xFDF
 18760                           postinc2	equ	0xFDE
 18761                           postdec2	equ	0xFDD
 18762                           fsr2h	equ	0xFDA
 18763                           fsr2l	equ	0xFD9
 18764                           status	equ	0xFD8
 18765                           
 18766 ;; *************** function i2_lcdInst *****************
 18767 ;; Defined at:
 18768 ;;		line 15 in file "lcd.c"
 18769 ;; Parameters:    Size  Location     Type
 18770 ;;  data            1    wreg     unsigned char 
 18771 ;; Auto vars:     Size  Location     Type
 18772 ;;  data            1    2[COMRAM] unsigned char 
 18773 ;; Return value:  Size  Location     Type
 18774 ;;                  1    wreg      void 
 18775 ;; Registers used:
 18776 ;;		wreg, status,2, status,0, cstack
 18777 ;; Tracked objects:
 18778 ;;		On entry : 0/0
 18779 ;;		On exit  : 0/0
 18780 ;;		Unchanged: 0/0
 18781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18783 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18785 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18786 ;;Total ram usage:        1 bytes
 18787 ;; Hardware stack levels used:    1
 18788 ;; Hardware stack levels required when called:    1
 18789 ;; This function calls:
 18790 ;;		i2_lcdNibble
 18791 ;; This function is called by:
 18792 ;;		_change_state_to_menu_11
 18793 ;;		_change_state_to_menu_23
 18794 ;;		_change_state_to_logs_11
 18795 ;;		_change_state_to_logs_12
 18796 ;;		_change_state_to_logs_22
 18797 ;;		_change_state_to_logs_23
 18798 ;;		_change_state_to_logs_33
 18799 ;;		_change_state_to_logs_34
 18800 ;;		_printSortTimer
 18801 ;;		i2_change_state_to_menu_start
 18802 ;;		i2_change_state_to_menu_12
 18803 ;;		i2_change_state_to_menu_22
 18804 ;;		i2_printRTC
 18805 ;; This function uses a non-reentrant model
 18806 ;;
 18807                           
 18808                           	psect	text79
 18809  004038                     __ptext79:
 18810                           	opt stack 0
 18811  004038                     i2_lcdInst:
 18812                           	opt stack 19
 18813                           
 18814                           ;incstack = 0
 18815                           ;i2lcdInst@data stored from wreg
 18816  004038  6E03               	movwf	i2lcdInst@data,c
 18817                           
 18818                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 18819  00403A  948C               	bcf	3980,2,c	;volatile
 18820                           
 18821                           ;lcd.c: 17: lcdNibble(data);
 18822  00403C  5003               	movf	i2lcdInst@data,w,c
 18823  00403E  EC42  F01C         	call	i2_lcdNibble
 18824  004042  0012               	return		;funcret
 18825  004044                     __end_ofi2_lcdInst:
 18826                           	opt stack 0
 18827                           pclatu	equ	0xFFB
 18828                           pclath	equ	0xFFA
 18829                           tblptru	equ	0xFF8
 18830                           tblptrh	equ	0xFF7
 18831                           tblptrl	equ	0xFF6
 18832                           tablat	equ	0xFF5
 18833                           prodh	equ	0xFF4
 18834                           prodl	equ	0xFF3
 18835                           intcon	equ	0xFF2
 18836                           intcon2	equ	0xFF1
 18837                           intcon3	equ	0xFF0
 18838                           indf0	equ	0xFEF
 18839                           postinc0	equ	0xFEE
 18840                           fsr0h	equ	0xFEA
 18841                           fsr0l	equ	0xFE9
 18842                           wreg	equ	0xFE8
 18843                           postdec1	equ	0xFE5
 18844                           fsr1h	equ	0xFE2
 18845                           fsr1l	equ	0xFE1
 18846                           indf2	equ	0xFDF
 18847                           postinc2	equ	0xFDE
 18848                           postdec2	equ	0xFDD
 18849                           fsr2h	equ	0xFDA
 18850                           fsr2l	equ	0xFD9
 18851                           status	equ	0xFD8
 18852                           
 18853 ;; *************** function i2_lcdNibble *****************
 18854 ;; Defined at:
 18855 ;;		line 25 in file "lcd.c"
 18856 ;; Parameters:    Size  Location     Type
 18857 ;;  data            1    wreg     unsigned char 
 18858 ;; Auto vars:     Size  Location     Type
 18859 ;;  data            1    1[COMRAM] unsigned char 
 18860 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 18861 ;; Return value:  Size  Location     Type
 18862 ;;                  1    wreg      void 
 18863 ;; Registers used:
 18864 ;;		wreg, status,2, status,0
 18865 ;; Tracked objects:
 18866 ;;		On entry : 0/0
 18867 ;;		On exit  : 0/0
 18868 ;;		Unchanged: 0/0
 18869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18871 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18873 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18874 ;;Total ram usage:        2 bytes
 18875 ;; Hardware stack levels used:    1
 18876 ;; This function calls:
 18877 ;;		Nothing
 18878 ;; This function is called by:
 18879 ;;		i2_lcdInst
 18880 ;;		i2_putch
 18881 ;; This function uses a non-reentrant model
 18882 ;;
 18883                           
 18884                           	psect	text80
 18885  003884                     __ptext80:
 18886                           	opt stack 0
 18887  003884                     i2_lcdNibble:
 18888                           	opt stack 19
 18889                           
 18890                           ;incstack = 0
 18891                           ;i2lcdNibble@data stored from wreg
 18892  003884  6E02               	movwf	i2lcdNibble@data,c
 18893                           
 18894                           ;lcd.c: 27: char temp = data & 0xF0;
 18895  003886  5002               	movf	i2lcdNibble@data,w,c
 18896  003888  0BF0               	andlw	240
 18897  00388A  6E01               	movwf	i2lcdNibble@temp,c
 18898                           
 18899                           ;lcd.c: 28: LATD = LATD & 0x0F;
 18900  00388C  508C               	movf	3980,w,c	;volatile
 18901  00388E  0B0F               	andlw	15
 18902  003890  6E8C               	movwf	3980,c	;volatile
 18903                           
 18904                           ;lcd.c: 29: LATD = temp | LATD;
 18905  003892  5001               	movf	i2lcdNibble@temp,w,c
 18906  003894  108C               	iorwf	3980,w,c	;volatile
 18907  003896  6E8C               	movwf	3980,c	;volatile
 18908                           
 18909                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 18910  003898  868C               	bsf	3980,3,c	;volatile
 18911                           
 18912                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18913  00389A  0E42               	movlw	66
 18914  00389C                     i2u739_47:
 18915  00389C  2EE8               	decfsz	wreg,f,c
 18916  00389E  D7FE               	bra	i2u739_47
 18917  0038A0  D000               	nop2	
 18918                           
 18919                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 18920  0038A2  968C               	bcf	3980,3,c	;volatile
 18921                           
 18922                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18923  0038A4  0E42               	movlw	66
 18924  0038A6                     i2u740_47:
 18925  0038A6  2EE8               	decfsz	wreg,f,c
 18926  0038A8  D7FE               	bra	i2u740_47
 18927  0038AA  D000               	nop2	
 18928                           
 18929                           ;lcd.c: 36: data = data << 4;
 18930  0038AC  3802               	swapf	i2lcdNibble@data,w,c
 18931  0038AE  0BF0               	andlw	240
 18932  0038B0  6E02               	movwf	i2lcdNibble@data,c
 18933                           
 18934                           ;lcd.c: 38: temp = data & 0xF0;
 18935  0038B2  5002               	movf	i2lcdNibble@data,w,c
 18936  0038B4  0BF0               	andlw	240
 18937  0038B6  6E01               	movwf	i2lcdNibble@temp,c
 18938                           
 18939                           ;lcd.c: 39: LATD = LATD & 0x0F;
 18940  0038B8  508C               	movf	3980,w,c	;volatile
 18941  0038BA  0B0F               	andlw	15
 18942  0038BC  6E8C               	movwf	3980,c	;volatile
 18943                           
 18944                           ;lcd.c: 40: LATD = temp | LATD;
 18945  0038BE  5001               	movf	i2lcdNibble@temp,w,c
 18946  0038C0  108C               	iorwf	3980,w,c	;volatile
 18947  0038C2  6E8C               	movwf	3980,c	;volatile
 18948                           
 18949                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 18950  0038C4  868C               	bsf	3980,3,c	;volatile
 18951                           
 18952                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18953  0038C6  0E42               	movlw	66
 18954  0038C8                     i2u741_47:
 18955  0038C8  2EE8               	decfsz	wreg,f,c
 18956  0038CA  D7FE               	bra	i2u741_47
 18957  0038CC  D000               	nop2	
 18958                           
 18959                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 18960  0038CE  968C               	bcf	3980,3,c	;volatile
 18961                           
 18962                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18963  0038D0  0E42               	movlw	66
 18964  0038D2                     i2u742_47:
 18965  0038D2  2EE8               	decfsz	wreg,f,c
 18966  0038D4  D7FE               	bra	i2u742_47
 18967  0038D6  D000               	nop2	
 18968  0038D8  0012               	return		;funcret
 18969  0038DA                     __end_ofi2_lcdNibble:
 18970                           	opt stack 0
 18971                           pclatu	equ	0xFFB
 18972                           pclath	equ	0xFFA
 18973                           tblptru	equ	0xFF8
 18974                           tblptrh	equ	0xFF7
 18975                           tblptrl	equ	0xFF6
 18976                           tablat	equ	0xFF5
 18977                           prodh	equ	0xFF4
 18978                           prodl	equ	0xFF3
 18979                           intcon	equ	0xFF2
 18980                           intcon2	equ	0xFF1
 18981                           intcon3	equ	0xFF0
 18982                           indf0	equ	0xFEF
 18983                           postinc0	equ	0xFEE
 18984                           fsr0h	equ	0xFEA
 18985                           fsr0l	equ	0xFE9
 18986                           wreg	equ	0xFE8
 18987                           postdec1	equ	0xFE5
 18988                           fsr1h	equ	0xFE2
 18989                           fsr1l	equ	0xFE1
 18990                           indf2	equ	0xFDF
 18991                           postinc2	equ	0xFDE
 18992                           postdec2	equ	0xFDD
 18993                           fsr2h	equ	0xFDA
 18994                           fsr2l	equ	0xFD9
 18995                           status	equ	0xFD8
 18996                           
 18997 ;; *************** function i2_getRTC *****************
 18998 ;; Defined at:
 18999 ;;		line 44 in file "RTC.c"
 19000 ;; Parameters:    Size  Location     Type
 19001 ;;		None
 19002 ;; Auto vars:     Size  Location     Type
 19003 ;;  getRTC          2    3[COMRAM] int 
 19004 ;; Return value:  Size  Location     Type
 19005 ;;                  1    wreg      void 
 19006 ;; Registers used:
 19007 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19008 ;; Tracked objects:
 19009 ;;		On entry : 0/0
 19010 ;;		On exit  : 0/0
 19011 ;;		Unchanged: 0/0
 19012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19014 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19016 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19017 ;;Total ram usage:        2 bytes
 19018 ;; Hardware stack levels used:    1
 19019 ;; Hardware stack levels required when called:    2
 19020 ;; This function calls:
 19021 ;;		i2_I2C_Master_Read
 19022 ;;		i2_I2C_Master_Start
 19023 ;;		i2_I2C_Master_Stop
 19024 ;;		i2_I2C_Master_Write
 19025 ;; This function is called by:
 19026 ;;		_printSortTimer
 19027 ;;		i2_printRTC
 19028 ;; This function uses a non-reentrant model
 19029 ;;
 19030                           
 19031                           	psect	text81
 19032  00356C                     __ptext81:
 19033                           	opt stack 0
 19034  00356C                     i2_getRTC:
 19035                           	opt stack 18
 19036                           
 19037                           ;RTC.c: 48: I2C_Master_Start();
 19038                           
 19039                           ;incstack = 0
 19040  00356C  EC3C  F020         	call	i2_I2C_Master_Start	;wreg free
 19041                           
 19042                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 19043  003570  0E00               	movlw	0
 19044  003572  6E03               	movwf	i2I2C_Master_Write@d+1,c
 19045  003574  0ED0               	movlw	208
 19046  003576  6E02               	movwf	i2I2C_Master_Write@d,c
 19047  003578  EC27  F020         	call	i2_I2C_Master_Write	;wreg free
 19048                           
 19049                           ;RTC.c: 50: I2C_Master_Write(0x00);
 19050  00357C  0E00               	movlw	0
 19051  00357E  6E03               	movwf	i2I2C_Master_Write@d+1,c
 19052  003580  0E00               	movlw	0
 19053  003582  6E02               	movwf	i2I2C_Master_Write@d,c
 19054  003584  EC27  F020         	call	i2_I2C_Master_Write	;wreg free
 19055                           
 19056                           ;RTC.c: 51: I2C_Master_Stop();
 19057  003588  EC38  F020         	call	i2_I2C_Master_Stop	;wreg free
 19058                           
 19059                           ;RTC.c: 54: I2C_Master_Start();
 19060  00358C  EC3C  F020         	call	i2_I2C_Master_Start	;wreg free
 19061                           
 19062                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 19063  003590  0E00               	movlw	0
 19064  003592  6E03               	movwf	i2I2C_Master_Write@d+1,c
 19065  003594  0ED1               	movlw	209
 19066  003596  6E02               	movwf	i2I2C_Master_Write@d,c
 19067  003598  EC27  F020         	call	i2_I2C_Master_Write	;wreg free
 19068                           
 19069                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 19070  00359C  0E00               	movlw	0
 19071  00359E  6E05               	movwf	i2getRTC@i+1,c
 19072  0035A0  0E00               	movlw	0
 19073  0035A2  6E04               	movwf	i2getRTC@i,c
 19074  0035A4                     i2l5265:
 19075  0035A4  BE05               	btfsc	i2getRTC@i+1,7,c
 19076  0035A6  D006               	goto	i2l5269
 19077  0035A8  5005               	movf	i2getRTC@i+1,w,c
 19078  0035AA  E111               	bnz	i2l5275
 19079  0035AC  0E06               	movlw	6
 19080  0035AE  5C04               	subwf	i2getRTC@i,w,c
 19081  0035B0  B0D8               	btfsc	status,0,c
 19082  0035B2  D00D               	goto	i2l5275
 19083  0035B4                     i2l5269:
 19084                           
 19085                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 19086  0035B4  0E24               	movlw	low _time
 19087  0035B6  2404               	addwf	i2getRTC@i,w,c
 19088  0035B8  6ED9               	movwf	fsr2l,c
 19089  0035BA  0E01               	movlw	high _time
 19090  0035BC  2005               	addwfc	i2getRTC@i+1,w,c
 19091  0035BE  6EDA               	movwf	fsr2h,c
 19092  0035C0  0E01               	movlw	1
 19093  0035C2  EC69  F01F         	call	i2_I2C_Master_Read
 19094  0035C6  6EDF               	movwf	indf2,c
 19095  0035C8  4A04               	infsnz	i2getRTC@i,f,c
 19096  0035CA  2A05               	incf	i2getRTC@i+1,f,c
 19097  0035CC  D7EB               	goto	i2l5265
 19098  0035CE                     i2l5275:
 19099                           
 19100                           ;RTC.c: 58: }
 19101                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 19102  0035CE  0E00               	movlw	0
 19103  0035D0  EC69  F01F         	call	i2_I2C_Master_Read
 19104  0035D4  0101               	movlb	1	; () banked
 19105  0035D6  6F2A               	movwf	(_time+6)& (0+255),b
 19106                           
 19107                           ;RTC.c: 60: I2C_Master_Stop();
 19108  0035D8  EC38  F020         	call	i2_I2C_Master_Stop	;wreg free
 19109  0035DC  0012               	return		;funcret
 19110  0035DE                     __end_ofi2_getRTC:
 19111                           	opt stack 0
 19112                           pclatu	equ	0xFFB
 19113                           pclath	equ	0xFFA
 19114                           tblptru	equ	0xFF8
 19115                           tblptrh	equ	0xFF7
 19116                           tblptrl	equ	0xFF6
 19117                           tablat	equ	0xFF5
 19118                           prodh	equ	0xFF4
 19119                           prodl	equ	0xFF3
 19120                           intcon	equ	0xFF2
 19121                           intcon2	equ	0xFF1
 19122                           intcon3	equ	0xFF0
 19123                           indf0	equ	0xFEF
 19124                           postinc0	equ	0xFEE
 19125                           fsr0h	equ	0xFEA
 19126                           fsr0l	equ	0xFE9
 19127                           wreg	equ	0xFE8
 19128                           postdec1	equ	0xFE5
 19129                           fsr1h	equ	0xFE2
 19130                           fsr1l	equ	0xFE1
 19131                           indf2	equ	0xFDF
 19132                           postinc2	equ	0xFDE
 19133                           postdec2	equ	0xFDD
 19134                           fsr2h	equ	0xFDA
 19135                           fsr2l	equ	0xFD9
 19136                           status	equ	0xFD8
 19137                           
 19138 ;; *************** function i2_I2C_Master_Write *****************
 19139 ;; Defined at:
 19140 ;;		line 49 in file "I2C.c"
 19141 ;; Parameters:    Size  Location     Type
 19142 ;;  d               2    1[COMRAM] unsigned int 
 19143 ;; Auto vars:     Size  Location     Type
 19144 ;;		None
 19145 ;; Return value:  Size  Location     Type
 19146 ;;                  1    wreg      void 
 19147 ;; Registers used:
 19148 ;;		wreg, status,2, status,0, cstack
 19149 ;; Tracked objects:
 19150 ;;		On entry : 0/0
 19151 ;;		On exit  : 0/0
 19152 ;;		Unchanged: 0/0
 19153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19154 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19157 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19158 ;;Total ram usage:        2 bytes
 19159 ;; Hardware stack levels used:    1
 19160 ;; Hardware stack levels required when called:    1
 19161 ;; This function calls:
 19162 ;;		i2_I2C_Master_Wait
 19163 ;; This function is called by:
 19164 ;;		i2_getRTC
 19165 ;; This function uses a non-reentrant model
 19166 ;;
 19167                           
 19168                           	psect	text82
 19169  00404E                     __ptext82:
 19170                           	opt stack 0
 19171  00404E                     i2_I2C_Master_Write:
 19172                           	opt stack 18
 19173                           
 19174                           ;I2C.c: 51: I2C_Master_Wait();
 19175                           
 19176                           ;incstack = 0
 19177  00404E  ECFD  F01F         	call	i2_I2C_Master_Wait	;wreg free
 19178                           
 19179                           ;I2C.c: 52: SSPBUF = d;
 19180  004052  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 19181  004056  0012               	return		;funcret
 19182  004058                     __end_ofi2_I2C_Master_Write:
 19183                           	opt stack 0
 19184                           pclatu	equ	0xFFB
 19185                           pclath	equ	0xFFA
 19186                           tblptru	equ	0xFF8
 19187                           tblptrh	equ	0xFF7
 19188                           tblptrl	equ	0xFF6
 19189                           tablat	equ	0xFF5
 19190                           prodh	equ	0xFF4
 19191                           prodl	equ	0xFF3
 19192                           intcon	equ	0xFF2
 19193                           intcon2	equ	0xFF1
 19194                           intcon3	equ	0xFF0
 19195                           indf0	equ	0xFEF
 19196                           postinc0	equ	0xFEE
 19197                           fsr0h	equ	0xFEA
 19198                           fsr0l	equ	0xFE9
 19199                           wreg	equ	0xFE8
 19200                           postdec1	equ	0xFE5
 19201                           fsr1h	equ	0xFE2
 19202                           fsr1l	equ	0xFE1
 19203                           indf2	equ	0xFDF
 19204                           postinc2	equ	0xFDE
 19205                           postdec2	equ	0xFDD
 19206                           fsr2h	equ	0xFDA
 19207                           fsr2l	equ	0xFD9
 19208                           status	equ	0xFD8
 19209                           
 19210 ;; *************** function i2_I2C_Master_Stop *****************
 19211 ;; Defined at:
 19212 ;;		line 43 in file "I2C.c"
 19213 ;; Parameters:    Size  Location     Type
 19214 ;;		None
 19215 ;; Auto vars:     Size  Location     Type
 19216 ;;		None
 19217 ;; Return value:  Size  Location     Type
 19218 ;;                  1    wreg      void 
 19219 ;; Registers used:
 19220 ;;		wreg, status,2, status,0, cstack
 19221 ;; Tracked objects:
 19222 ;;		On entry : 0/0
 19223 ;;		On exit  : 0/0
 19224 ;;		Unchanged: 0/0
 19225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19229 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19230 ;;Total ram usage:        0 bytes
 19231 ;; Hardware stack levels used:    1
 19232 ;; Hardware stack levels required when called:    1
 19233 ;; This function calls:
 19234 ;;		i2_I2C_Master_Wait
 19235 ;; This function is called by:
 19236 ;;		i2_getRTC
 19237 ;; This function uses a non-reentrant model
 19238 ;;
 19239                           
 19240                           	psect	text83
 19241  004070                     __ptext83:
 19242                           	opt stack 0
 19243  004070                     i2_I2C_Master_Stop:
 19244                           	opt stack 18
 19245                           
 19246                           ;I2C.c: 45: I2C_Master_Wait();
 19247                           
 19248                           ;incstack = 0
 19249  004070  ECFD  F01F         	call	i2_I2C_Master_Wait	;wreg free
 19250                           
 19251                           ;I2C.c: 46: PEN = 1;
 19252  004074  84C5               	bsf	4037,2,c	;volatile
 19253  004076  0012               	return		;funcret
 19254  004078                     __end_ofi2_I2C_Master_Stop:
 19255                           	opt stack 0
 19256                           pclatu	equ	0xFFB
 19257                           pclath	equ	0xFFA
 19258                           tblptru	equ	0xFF8
 19259                           tblptrh	equ	0xFF7
 19260                           tblptrl	equ	0xFF6
 19261                           tablat	equ	0xFF5
 19262                           prodh	equ	0xFF4
 19263                           prodl	equ	0xFF3
 19264                           intcon	equ	0xFF2
 19265                           intcon2	equ	0xFF1
 19266                           intcon3	equ	0xFF0
 19267                           indf0	equ	0xFEF
 19268                           postinc0	equ	0xFEE
 19269                           fsr0h	equ	0xFEA
 19270                           fsr0l	equ	0xFE9
 19271                           wreg	equ	0xFE8
 19272                           postdec1	equ	0xFE5
 19273                           fsr1h	equ	0xFE2
 19274                           fsr1l	equ	0xFE1
 19275                           indf2	equ	0xFDF
 19276                           postinc2	equ	0xFDE
 19277                           postdec2	equ	0xFDD
 19278                           fsr2h	equ	0xFDA
 19279                           fsr2l	equ	0xFD9
 19280                           status	equ	0xFD8
 19281                           
 19282 ;; *************** function i2_I2C_Master_Start *****************
 19283 ;; Defined at:
 19284 ;;		line 31 in file "I2C.c"
 19285 ;; Parameters:    Size  Location     Type
 19286 ;;		None
 19287 ;; Auto vars:     Size  Location     Type
 19288 ;;		None
 19289 ;; Return value:  Size  Location     Type
 19290 ;;                  1    wreg      void 
 19291 ;; Registers used:
 19292 ;;		wreg, status,2, status,0, cstack
 19293 ;; Tracked objects:
 19294 ;;		On entry : 0/0
 19295 ;;		On exit  : 0/0
 19296 ;;		Unchanged: 0/0
 19297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19302 ;;Total ram usage:        0 bytes
 19303 ;; Hardware stack levels used:    1
 19304 ;; Hardware stack levels required when called:    1
 19305 ;; This function calls:
 19306 ;;		i2_I2C_Master_Wait
 19307 ;; This function is called by:
 19308 ;;		i2_getRTC
 19309 ;; This function uses a non-reentrant model
 19310 ;;
 19311                           
 19312                           	psect	text84
 19313  004078                     __ptext84:
 19314                           	opt stack 0
 19315  004078                     i2_I2C_Master_Start:
 19316                           	opt stack 18
 19317                           
 19318                           ;I2C.c: 33: I2C_Master_Wait();
 19319                           
 19320                           ;incstack = 0
 19321  004078  ECFD  F01F         	call	i2_I2C_Master_Wait	;wreg free
 19322                           
 19323                           ;I2C.c: 34: SEN = 1;
 19324  00407C  80C5               	bsf	4037,0,c	;volatile
 19325  00407E  0012               	return		;funcret
 19326  004080                     __end_ofi2_I2C_Master_Start:
 19327                           	opt stack 0
 19328                           pclatu	equ	0xFFB
 19329                           pclath	equ	0xFFA
 19330                           tblptru	equ	0xFF8
 19331                           tblptrh	equ	0xFF7
 19332                           tblptrl	equ	0xFF6
 19333                           tablat	equ	0xFF5
 19334                           prodh	equ	0xFF4
 19335                           prodl	equ	0xFF3
 19336                           intcon	equ	0xFF2
 19337                           intcon2	equ	0xFF1
 19338                           intcon3	equ	0xFF0
 19339                           indf0	equ	0xFEF
 19340                           postinc0	equ	0xFEE
 19341                           fsr0h	equ	0xFEA
 19342                           fsr0l	equ	0xFE9
 19343                           wreg	equ	0xFE8
 19344                           postdec1	equ	0xFE5
 19345                           fsr1h	equ	0xFE2
 19346                           fsr1l	equ	0xFE1
 19347                           indf2	equ	0xFDF
 19348                           postinc2	equ	0xFDE
 19349                           postdec2	equ	0xFDD
 19350                           fsr2h	equ	0xFDA
 19351                           fsr2l	equ	0xFD9
 19352                           status	equ	0xFD8
 19353                           
 19354 ;; *************** function i2_I2C_Master_Read *****************
 19355 ;; Defined at:
 19356 ;;		line 55 in file "I2C.c"
 19357 ;; Parameters:    Size  Location     Type
 19358 ;;  a               1    wreg     unsigned char 
 19359 ;; Auto vars:     Size  Location     Type
 19360 ;;  a               1    1[COMRAM] unsigned char 
 19361 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 19362 ;; Return value:  Size  Location     Type
 19363 ;;                  1    wreg      unsigned char 
 19364 ;; Registers used:
 19365 ;;		wreg, status,2, status,0, cstack
 19366 ;; Tracked objects:
 19367 ;;		On entry : 0/0
 19368 ;;		On exit  : 0/0
 19369 ;;		Unchanged: 0/0
 19370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19372 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19374 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19375 ;;Total ram usage:        2 bytes
 19376 ;; Hardware stack levels used:    1
 19377 ;; Hardware stack levels required when called:    1
 19378 ;; This function calls:
 19379 ;;		i2_I2C_Master_Wait
 19380 ;; This function is called by:
 19381 ;;		i2_getRTC
 19382 ;; This function uses a non-reentrant model
 19383 ;;
 19384                           
 19385                           	psect	text85
 19386  003ED2                     __ptext85:
 19387                           	opt stack 0
 19388  003ED2                     i2_I2C_Master_Read:
 19389                           	opt stack 18
 19390                           
 19391                           ;incstack = 0
 19392                           ;i2I2C_Master_Read@a stored from wreg
 19393  003ED2  6E02               	movwf	i2I2C_Master_Read@a,c
 19394                           
 19395                           ;I2C.c: 57: unsigned char temp;
 19396                           ;I2C.c: 58: I2C_Master_Wait();
 19397  003ED4  ECFD  F01F         	call	i2_I2C_Master_Wait	;wreg free
 19398                           
 19399                           ;I2C.c: 59: RCEN = 1;
 19400  003ED8  86C5               	bsf	4037,3,c	;volatile
 19401                           
 19402                           ;I2C.c: 60: I2C_Master_Wait();
 19403  003EDA  ECFD  F01F         	call	i2_I2C_Master_Wait	;wreg free
 19404                           
 19405                           ;I2C.c: 61: temp = SSPBUF;
 19406  003EDE  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 19407                           
 19408                           ;I2C.c: 62: I2C_Master_Wait();
 19409  003EE2  ECFD  F01F         	call	i2_I2C_Master_Wait	;wreg free
 19410                           
 19411                           ;I2C.c: 63: ACKDT = (a)?0:1;
 19412  003EE6  5002               	movf	i2I2C_Master_Read@a,w,c
 19413  003EE8  A4D8               	btfss	status,2,c
 19414  003EEA  D002               	goto	i2u340_40
 19415  003EEC  8AC5               	bsf	4037,5,c	;volatile
 19416  003EEE  D001               	goto	i2l4979
 19417  003EF0                     i2u340_40:
 19418  003EF0  9AC5               	bcf	4037,5,c	;volatile
 19419  003EF2                     i2l4979:
 19420                           
 19421                           ;I2C.c: 64: ACKEN = 1;
 19422  003EF2  88C5               	bsf	4037,4,c	;volatile
 19423                           
 19424                           ;I2C.c: 65: return temp;
 19425  003EF4  5003               	movf	i2I2C_Master_Read@temp,w,c
 19426  003EF6  0012               	return	
 19427  003EF8                     __end_ofi2_I2C_Master_Read:
 19428                           	opt stack 0
 19429                           pclatu	equ	0xFFB
 19430                           pclath	equ	0xFFA
 19431                           tblptru	equ	0xFF8
 19432                           tblptrh	equ	0xFF7
 19433                           tblptrl	equ	0xFF6
 19434                           tablat	equ	0xFF5
 19435                           prodh	equ	0xFF4
 19436                           prodl	equ	0xFF3
 19437                           intcon	equ	0xFF2
 19438                           intcon2	equ	0xFF1
 19439                           intcon3	equ	0xFF0
 19440                           indf0	equ	0xFEF
 19441                           postinc0	equ	0xFEE
 19442                           fsr0h	equ	0xFEA
 19443                           fsr0l	equ	0xFE9
 19444                           wreg	equ	0xFE8
 19445                           postdec1	equ	0xFE5
 19446                           fsr1h	equ	0xFE2
 19447                           fsr1l	equ	0xFE1
 19448                           indf2	equ	0xFDF
 19449                           postinc2	equ	0xFDE
 19450                           postdec2	equ	0xFDD
 19451                           fsr2h	equ	0xFDA
 19452                           fsr2l	equ	0xFD9
 19453                           status	equ	0xFD8
 19454                           
 19455 ;; *************** function i2_I2C_Master_Wait *****************
 19456 ;; Defined at:
 19457 ;;		line 26 in file "I2C.c"
 19458 ;; Parameters:    Size  Location     Type
 19459 ;;		None
 19460 ;; Auto vars:     Size  Location     Type
 19461 ;;		None
 19462 ;; Return value:  Size  Location     Type
 19463 ;;                  1    wreg      void 
 19464 ;; Registers used:
 19465 ;;		wreg, status,2, status,0
 19466 ;; Tracked objects:
 19467 ;;		On entry : 0/0
 19468 ;;		On exit  : 0/0
 19469 ;;		Unchanged: 0/0
 19470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19473 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19474 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19475 ;;Total ram usage:        1 bytes
 19476 ;; Hardware stack levels used:    1
 19477 ;; This function calls:
 19478 ;;		Nothing
 19479 ;; This function is called by:
 19480 ;;		i2_I2C_Master_Start
 19481 ;;		i2_I2C_Master_Stop
 19482 ;;		i2_I2C_Master_Write
 19483 ;;		i2_I2C_Master_Read
 19484 ;; This function uses a non-reentrant model
 19485 ;;
 19486                           
 19487                           	psect	text86
 19488  003FFA                     __ptext86:
 19489                           	opt stack 0
 19490  003FFA                     i2_I2C_Master_Wait:
 19491                           	opt stack 18
 19492  003FFA                     i2l66:
 19493  003FFA  B4C7               	btfsc	4039,2,c	;volatile
 19494  003FFC  D7FE               	goto	i2l66
 19495  003FFE  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 19496  004002  0E1F               	movlw	31
 19497  004004  1601               	andwf	??i2_I2C_Master_Wait,f,c
 19498  004006  B4D8               	btfsc	status,2,c
 19499  004008  0012               	return	
 19500  00400A  D7F7               	goto	i2l66
 19501  00400C                     __end_ofi2_I2C_Master_Wait:
 19502                           	opt stack 0
 19503                           pclatu	equ	0xFFB
 19504                           pclath	equ	0xFFA
 19505                           tblptru	equ	0xFF8
 19506                           tblptrh	equ	0xFF7
 19507                           tblptrl	equ	0xFF6
 19508                           tablat	equ	0xFF5
 19509                           prodh	equ	0xFF4
 19510                           prodl	equ	0xFF3
 19511                           intcon	equ	0xFF2
 19512                           intcon2	equ	0xFF1
 19513                           intcon3	equ	0xFF0
 19514                           indf0	equ	0xFEF
 19515                           postinc0	equ	0xFEE
 19516                           fsr0h	equ	0xFEA
 19517                           fsr0l	equ	0xFE9
 19518                           wreg	equ	0xFE8
 19519                           postdec1	equ	0xFE5
 19520                           fsr1h	equ	0xFE2
 19521                           fsr1l	equ	0xFE1
 19522                           indf2	equ	0xFDF
 19523                           postinc2	equ	0xFDE
 19524                           postdec2	equ	0xFDD
 19525                           fsr2h	equ	0xFDA
 19526                           fsr2l	equ	0xFD9
 19527                           status	equ	0xFD8
 19528                           pclatu	equ	0xFFB
 19529                           pclath	equ	0xFFA
 19530                           tblptru	equ	0xFF8
 19531                           tblptrh	equ	0xFF7
 19532                           tblptrl	equ	0xFF6
 19533                           tablat	equ	0xFF5
 19534                           prodh	equ	0xFF4
 19535                           prodl	equ	0xFF3
 19536                           intcon	equ	0xFF2
 19537                           intcon2	equ	0xFF1
 19538                           intcon3	equ	0xFF0
 19539                           indf0	equ	0xFEF
 19540                           postinc0	equ	0xFEE
 19541                           fsr0h	equ	0xFEA
 19542                           fsr0l	equ	0xFE9
 19543                           wreg	equ	0xFE8
 19544                           postdec1	equ	0xFE5
 19545                           fsr1h	equ	0xFE2
 19546                           fsr1l	equ	0xFE1
 19547                           indf2	equ	0xFDF
 19548                           postinc2	equ	0xFDE
 19549                           postdec2	equ	0xFDD
 19550                           fsr2h	equ	0xFDA
 19551                           fsr2l	equ	0xFD9
 19552                           status	equ	0xFD8
 19553                           
 19554                           	psect	rparam
 19555  0000                     pclatu	equ	0xFFB
 19556                           pclath	equ	0xFFA
 19557                           tblptru	equ	0xFF8
 19558                           tblptrh	equ	0xFF7
 19559                           tblptrl	equ	0xFF6
 19560                           tablat	equ	0xFF5
 19561                           prodh	equ	0xFF4
 19562                           prodl	equ	0xFF3
 19563                           intcon	equ	0xFF2
 19564                           intcon2	equ	0xFF1
 19565                           intcon3	equ	0xFF0
 19566                           indf0	equ	0xFEF
 19567                           postinc0	equ	0xFEE
 19568                           fsr0h	equ	0xFEA
 19569                           fsr0l	equ	0xFE9
 19570                           wreg	equ	0xFE8
 19571                           postdec1	equ	0xFE5
 19572                           fsr1h	equ	0xFE2
 19573                           fsr1l	equ	0xFE1
 19574                           indf2	equ	0xFDF
 19575                           postinc2	equ	0xFDE
 19576                           postdec2	equ	0xFDD
 19577                           fsr2h	equ	0xFDA
 19578                           fsr2l	equ	0xFD9
 19579                           status	equ	0xFD8
 19580                           
 19581                           	psect	temp
 19582  00007E                     btemp:
 19583                           	opt stack 0
 19584  00007E                     	ds	1
 19585  0000                     int$flags	set	btemp
 19586                           pclatu	equ	0xFFB
 19587                           pclath	equ	0xFFA
 19588                           tblptru	equ	0xFF8
 19589                           tblptrh	equ	0xFF7
 19590                           tblptrl	equ	0xFF6
 19591                           tablat	equ	0xFF5
 19592                           prodh	equ	0xFF4
 19593                           prodl	equ	0xFF3
 19594                           intcon	equ	0xFF2
 19595                           intcon2	equ	0xFF1
 19596                           intcon3	equ	0xFF0
 19597                           indf0	equ	0xFEF
 19598                           postinc0	equ	0xFEE
 19599                           fsr0h	equ	0xFEA
 19600                           fsr0l	equ	0xFE9
 19601                           wreg	equ	0xFE8
 19602                           postdec1	equ	0xFE5
 19603                           fsr1h	equ	0xFE2
 19604                           fsr1l	equ	0xFE1
 19605                           indf2	equ	0xFDF
 19606                           postinc2	equ	0xFDE
 19607                           postdec2	equ	0xFDD
 19608                           fsr2h	equ	0xFDA
 19609                           fsr2l	equ	0xFD9
 19610                           status	equ	0xFD8


Data Sizes:
    Strings     1138
    Constant    27
    Data        8
    BSS         118
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      53
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_107(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_106(CODE[18]), STR_105(CODE[18]), STR_104(CODE[15]), STR_103(CODE[15]), 
		 -> STR_102(CODE[15]), STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), 
		 -> STR_98(CODE[16]), STR_97(CODE[17]), STR_96(CODE[17]), STR_95(CODE[17]), 
		 -> STR_94(CODE[17]), STR_93(CODE[17]), STR_92(CODE[17]), STR_91(CODE[15]), 
		 -> STR_90(CODE[11]), STR_89(CODE[17]), STR_88(CODE[11]), STR_87(CODE[17]), 
		 -> STR_86(CODE[14]), STR_85(CODE[15]), STR_84(CODE[14]), STR_83(CODE[10]), 
		 -> STR_82(CODE[16]), STR_81(CODE[15]), STR_80(CODE[15]), STR_79(CODE[13]), 
		 -> STR_78(CODE[14]), STR_77(CODE[8]), STR_76(CODE[14]), STR_75(CODE[15]), 
		 -> STR_74(CODE[12]), STR_73(CODE[14]), STR_72(CODE[17]), STR_71(CODE[14]), 
		 -> STR_70(CODE[15]), STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[7]), 
		 -> STR_66(CODE[21]), STR_65(CODE[13]), STR_64(CODE[11]), STR_63(CODE[24]), 
		 -> STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), 
		 -> STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), 
		 -> STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), 
		 -> STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[19]), 
		 -> STR_26(CODE[17]), STR_25(CODE[19]), STR_24(CODE[17]), STR_23(CODE[14]), 
		 -> STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), 
		 -> STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), 
		 -> STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _initServos->_updateServoPosition
    _getIR->_readIR
    _ID->_readMAG
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _readIR->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _PortTestA5->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  130434
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   15763
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              5     5      0   13119
                                             49 BANK0      5     5      0
                        _EEPROM_read
                       _EEPROM_write
                              _getIR
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    2437
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getIR                                                2     2      0      45
                                              6 BANK0      2     2      0
                             _readIR
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     207
                                              6 BANK0      8     8      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    2437
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   10146
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3    9399
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   20624
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   19774
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   41128
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   12071
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    7703
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    7703
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   42100
                                             68 BANK0      2     2      0
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           2     2      0    7793
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
                             _readIR
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (5) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    7703
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        25    25      0   11198
                                             43 BANK0     25    25      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    2437
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    7703
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    7568
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Test
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readIR
         _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _readMAG
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _getIR
         _readIR
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      35       7       20.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     132      34        0.0%
DATA                 0      0     132       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Mar 01 15:01:41 2017

                                    _i 00E4                     i2_I2C_Master_Start 4078  
                   i2_I2C_Master_Write 404E                                     l66 3FE6  
                                   _ID 29C6                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0077  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l177 00E8  
                                  l478 32C2                                    l591 198A  
                                  l911 3FB2                                    l920 287C  
                                  l772 3532                                    l994 2D44  
                                  l898 2DEE                                    l997 2D68  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                         __CFG_CPD$OFF 000000                                    _SEN 007E28  
                  ?i2_I2C_Master_Start 0001                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _log 00E6  
                                  _sel 00FD                                    _var 00FA  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B                    _log_count_can_w_lab 00EC  
      __end_of_change_state_to_menu_11 3CB6        __end_of_change_state_to_menu_12 3B58  
      __end_of_change_state_to_menu_22 3B20        __end_of_change_state_to_menu_23 3C86  
         _f_can_coming_to_distribution 0071                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 3DA6        __end_of_change_state_to_logs_12 3D76  
      __end_of_change_state_to_logs_22 3D46        __end_of_change_state_to_logs_23 3E02  
      __end_of_change_state_to_logs_33 3D16        __end_of_change_state_to_logs_34 3CE6  
                                 ??_ID 0086                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1110 341E                                   l1014 2F0E  
                                 l1111 3422                                   l1103 33FA  
                                 l1023 24CA                                   l1112 3426  
                                 l1032 2580                                   l1113 342A  
                                 l1041 0918                                   l1017 2F12  
                                 l1130 37C6                                   l1026 24CE  
                                 l1115 3468                                   l1107 3416  
                                 l1051 0A28                                   l1124 37B6  
                                 l1052 0A76                                   l1044 091C  
                                 l1109 341A                                   l1053 0ADC  
                                 l1054 0B2A                                   l1048 09C2  
                                 l1090 101E                                   l1078 0E84  
                                 l1167 1374                                   l1614 34EC  
                                 l1624 3708                                   l1561 30EE  
                                 l5101 12D2                                   l5111 1334  
                                 l5103 12D8                                   l5105 12F0  
                                 l5131 13C6                                   l5115 133A  
                                 l5203 33CA                                   l5133 13CC  
                                 l5109 131C                                   l5061 1150  
                                 l6101 2932                                   l6021 2CAC  
                                 l6005 2C72                                   l5151 142A  
                                 l5127 13AC                                   l5063 1162  
                                 l5145 1408                                   l5081 121C  
                                 l5073 11A0                                   l5057 113C  
                                 l5209 33EA                                   l5241 3072  
                                 l5171 14AE                                   l5163 1486  
                                 l5155 1462                                   l5091 125A  
                                 l5067 116C                                   l5227 351E  
                                 l5243 3082                                   l5181 14E2  
                                 l5157 146C                                   l5093 1260  
                                 l5229 3548                                   l7021 079E  
                                 l5253 30DC                                   l5245 3088  
                                 l6053 2A60                                   l5175 14C8  
                                 l6231 0986                                   l5191 3B62  
                                 l7031 07C8                                   l6063 2A90  
                                 l6071 2AA8                                   l5185 153A  
                                 l5169 14A2                                   l5089 124E  
                                 l6321 0BB0                                   l6241 09AE  
                                 l6233 098C                                   l5193 3B6E  
                                 l7025 07B6                                   l7017 0794  
                                 l5179 14DC                                   l5099 12C6  
                                 l5187 1546                                   l6403 0D54  
                                 l6331 0BD8                                   l7035 07D2  
                                 l6091 28B6                                   l6067 2A9C  
                                 l6501 0F50                                   l6421 0DB6  
                                 l6413 0D7C                                   l6405 0D5A  
                                 l6325 0BC8                                   l6317 0BA6  
                                 l6237 0996                                   l5461 1994  
                                 l7061 0852                                   l6093 28D0  
                                 l4911 3E7A                                   l6511 0F78  
                                 l6431 0DDE                                   l6351 0C4C  
                                 l6343 0C2A                                   l6335 0BF0  
                                 l6327 0BCE                                   l6175 255E  
                                 l5199 33B4                                   l5471 1A2A  
                                 l5463 19B2                                   l5455 1908  
                                 l7071 087C                                   l7039 07EA  
                                 l6095 28EA                                   l6601 110E  
                                 l6505 0F5A                                   l6425 0DC0  
                                 l6409 0D64                                   l6361 0C74  
                                 l6353 0C52                                   l6193 25F2  
                                 l6169 251C                                   l5481 1AC0  
                                 l5473 1A48                                   l5465 19D0  
                                 l7065 086A                                   l7057 0848  
                                 l6089 289C                                   l5625 310E  
                                 l4931 34AE                                   l6611 342E  
                                 l6531 0FDE                                   l6515 0F82  
                                 l6451 0E44                                   l6435 0DE8  
                                 l6347 0C34                                   l6187 25B0  
                                 l7403 2D90                                   l5483 1ADE  
                                 l5475 1A66                                   l5467 19EE  
                                 l7075 0886                                   l7083 08AA  
                                 l6099 2904                                   l5715 39BC  
                                 l5635 319A                                   l6605 1126  
                                 l6541 1006                                   l6509 0F72  
                                 l6461 0E6C                                   l6429 0DD8  
                                 l6373 0CB8                                   l6357 0C5C  
                                 l6701 31F6                                   l5477 1A84  
                                 l5469 1A0C                                   l5805 336C  
                                 l5629 3124                                   l4927 349C  
                                 l4951 36D6                                   l6535 0FF6  
                                 l6527 0FD4                                   l6519 0F9A  
                                 l6455 0E5C                                   l6447 0E3A  
                                 l6439 0E00                                   l6383 0CE0  
                                 l4871 3E54                                   l6703 31FC  
                                 l6711 322E                                   l5479 1AA2  
                                 l5487 1AFC                                   l7079 089E  
                                 l5671 2E56                                   l7335 27A2  
                                 _ADIE 007CEE                                   l4929 34A8  
                                 l6561 106E                                   l6537 0FFC  
                                 l6457 0E62                                   l6377 0CD0  
                                 l6369 0CAE                                   l5489 1B5A  
                                 l7361 2836                                   l7337 27B6  
                                 l4939 34DE                                   l4955 36FA  
                                 l4947 36C4                                   l6571 1096  
                                 l6483 0EEE                                   l6475 0ECC  
                                 l6395 0D32                                   l6387 0CF8  
                                 l6379 0CD6                                   l6715 3242  
                                 l6707 3220                                   l6803 01CC  
                                 l5683 2E8E                                   l5675 2E60  
                                 l4949 36D0                                   l6565 1078  
                                 l6493 0F16                                   l6485 0EF4  
                                 l4869 3E42                                   l7373 2CE6  
                                 l6661 2FE2                                   l6653 2FB8  
                                 l4893 3DCC                                   l6591 10E6  
                                 l6575 10A0                                   l6479 0ED6  
                                 l6399 0D3C                                   l7391 2D74  
                                 l6671 3018                                   l6663 2FE8  
                                 l6647 2FA2                                   l6903 0522  
                                 l6831 024E                                   l6823 022C  
                                 l5687 2E98                                   l5679 2E78  
                                 l6569 1090                                   l6489 0EFE  
                                 l7393 2D7A                                   l6913 053E  
                                 l6841 026A                                   l6809 01DA  
                                 l6761 0100                                   l7465 3294  
                                 l6595 10FE                                   l6587 10DC  
                                 l6579 10B8                                   l7395 2D80  
                                 l6659 2FD6                                   l6675 3026  
                                 l6691 31C6                                   l6827 0236  
                                 l6771 0122                                   l6763 0106  
                                 l5795 332A                                   l7467 329A  
                                 l7483 32C4                                   l6597 1104  
                                 l7397 2D86                                   l7389 2D6E  
                                 l6941 0626                                   l6917 0556  
                                 l6909 0534                                   l6861 02D4  
                                 l6845 0282                                   l6837 0260  
                                 l7477 32B8                                   l7469 32A0  
                                 l7399 2D8A                                   l6679 303A  
                                 l6695 31D6                                   l6951 0650  
                                 l6871 036A                                   l6863 02F2  
                                 l6775 013A                                   l6767 0118  
                                 l5799 3340                                   l7479 32BE  
                                 l6945 063E                                   l6937 061C  
                                 l6881 0400                                   l6873 0388  
                                 l6865 0310                                   l6793 01A4  
                                 l6699 31EA                                   l6955 065A  
                                 l6883 041E                                   l6875 03A6  
                                 l6867 032E                                   l6891 04BE  
                                 l6795 01AA                                   l6779 014C  
                                 l6981 06E2                                   l6885 043C  
                                 l6877 03C4                                   l6869 034C  
                                 l6991 070C                                   l6959 0672  
                                 l6895 0500                                   l6879 03E2  
                                 l6799 01B4                                   l6985 06FA  
                                 l6977 06D8                                   l6889 045A  
                                 l6995 0716                                   l6899 050A  
                                 l6999 072E                                   STR_1 FC15  
                                 STR_2 FF44                                   STR_3 FC03  
                                 STR_4 FE67                                   STR_5 FC03  
                                 STR_6 FE25                                   STR_7 FFC3  
                                 STR_8 FFDA                                   STR_9 FFCA  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u3300 3DCA  
                                 u4210 198A                                   u3500 3A56  
                                 u3501 3A52                                   u3510 3A58  
                                 u3600 1312                                   u4170 3A0A  
                                 u4171 3A06                                   u4180 3A0C  
                                 u3607 1308                                   u3560 129A  
                                 u4195 3742                                   _PEIE 007F96  
                                 u3567 1290                                   u7007 090C  
                                 u4800 0B2A                                   u6320 287C  
                                 u4560 29F6                                   u7017 092E  
                                 u7107 0BB8                                   u7027 099E  
                                 _RCEN 007E2B                                   u7117 0BE0  
                                 u7037 09D2                                   u4590 2A50  
                                 u7207 0E4C                                   u7127 0C3C  
                                 u7047 0A38                                   u4760 09C2  
                                 u4568 29FA                                   u7217 0E74  
                                 u7137 0C64                                   u7057 0A54  
                                 u6345 2D52                                   u7307 10A8  
                                 u7227 0EDE                                   u7147 0CC0  
                                 u7067 0A86                                   u6507 2CD6  
                                 u4780 0A76                                   u7317 10EE  
                                 u7237 0F06                                   u7157 0CE8  
                                 u7077 0AEC                                   u6517 3814  
                                 u4598 2A54                                   u7327 1116  
                                 u7247 0F62                                   u7167 0D44  
                                 u7087 0B08                                   u6607 2EA0  
                                 u6527 3998                                   u7337 3780  
                                 u7257 0F8A                                   u7177 0D6C  
                                 u7097 0B3A                                   u6617 3A68  
                                 u6537 29DC                                   i2l66 3FFA  
                                 u7347 3668                                   u7267 0FE6  
                                 u7187 0DC8                                   u6707 029C  
                                 u6627 3A9C                                   u6547 2A38  
                                 u7357 3672                                   u7277 100E  
                                 u7197 0DF0                                   u6717 0512  
                                 u6637 002A                                   u6557 2ACC  
                                 u7367 369E                                   u7287 1030  
                                 u6807 07A6                                   u6727 0546  
                                 u6647 012A                                   u6567 2940  
                                 u7377 36A8                                   u7297 1080  
                                 u6817 07DA                                   u6737 0570  
                                 u6657 0166                                   u6577 2974  
                                 u6497 2C1E                                   u6907 250E  
                                 u6827 0804                                   u6747 062E  
                                 u6667 01BC                                   u6587 2E0C  
                                 u6917 2552                                   u6837 085A  
                                 u6757 0662                                   u6677 01E8  
                                 u6597 2E68                                   u6927 2570  
                                 u6847 088E                                   u6767 068C  
                                 u6687 023E                                   u6937 25A2  
                                 u6857 2CF4                                   u6777 06EA  
                                 u6697 0272                                   u6947 25E6  
                                 u6867 2D38                                   u6787 071E  
                                 u6957 3E4A                                   u6877 247A  
                                 u6797 0748                                   u6967 2EBE  
                                 u6887 24BE                                   u6977 2F02  
                                 u6897 24E0                                   u6987 2F24  
                                 u6997 08C8                                   _RSEN 007E29  
                          _stopSignals 3FBA                                   _Test 2CE6  
                                 _back 005B                                   _main 324C  
                                 _down 0069                                   _keys FB71  
                                 _time 0124                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 3F40                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 00EA                        __end_ofi2_putch 4038  
                  __size_of_EEPROMTest 0002                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 1E5E  
                          i2_lcdNibble 3884                        __end_of_Loading 2CE6  
                 __end_of_actuatorTest 112E                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                 __end_of_EEPROM_write 2EB0                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 3044                                  _EEADR 000FA9  
                                STR_10 FFE6                                  STR_11 FFEA  
                                STR_12 FFFA                                  STR_20 FFEE  
                                STR_13 FFDE                                  STR_21 FB8C  
                                STR_14 FFD6                                  STR_22 FFA3  
                                STR_30 FE36                                  STR_15 FFD2  
                                STR_23 FF36                                  STR_31 FE14  
                                STR_16 FFE2                                  STR_24 FD7B  
                                STR_32 FD59                                  STR_40 FD15  
                                STR_17 FFF2                                  STR_33 FD6A  
                                STR_41 FD04                                  STR_25 FBCC  
                                STR_18 FFF6                                  STR_34 FE03  
                                STR_50 FDE1                                  STR_42 FDBF  
                                STR_26 FD8C                                  STR_43 FDBF  
                                STR_35 FE03                                  STR_51 FFDA  
                                STR_19 FFCE                                  STR_27 FBB9  
                                STR_52 FFCA                                  STR_60 FFF2  
                                STR_28 FD9D                                  STR_36 FD48  
                                STR_44 FD26                        __end_of___awmod 324C  
                                STR_45 FD15                                  STR_37 FD59  
                                STR_53 FFE6                                  STR_61 FFF6  
                                STR_29 FBC9                                  STR_62 FFCE  
                                STR_54 FFEA                                  STR_70 FEEF  
                                STR_38 FDF2                                  STR_46 FDD0  
                                STR_47 FDD0                                  STR_55 FFFA  
                                STR_63 FB8C                                  STR_71 FF28  
                                STR_39 FDAE                                  STR_56 FFDE  
                                STR_64 FF8E                                  STR_80 FE77  
                                STR_48 FD37                                  STR_72 FCAF  
                                STR_49 FD26                                  STR_57 FFD6  
                                STR_65 FF5F                                  STR_73 FF0C  
                                STR_81 FEA4                                  STR_58 FFD2  
                                STR_90 FF83                                  STR_74 FF6C  
                                STR_82 FE47                                  STR_66 FBA4  
                                STR_59 FFE2                                  STR_67 FFBC  
                                STR_83 FF99                                  STR_75 FED1  
                                STR_91 FEC2                                  STR_84 FF28  
                                STR_76 FF1A                                  STR_68 FCC0  
                                STR_92 FC7C                                  STR_77 FFAD  
                                STR_85 FEE0                                  STR_69 FCF3  
                                STR_93 FC6B                                  STR_78 FF28  
                                STR_86 FEFE                                  STR_94 FC49  
                                STR_79 FF52                                  STR_87 FCD1  
                                STR_95 FC8D                                  STR_88 FF78  
                                STR_96 FC9E                                  STR_89 FCE2  
                                STR_97 FC27                                  STR_98 FE57  
                                STR_99 FC5A                                  ?_sort 0001  
                      __end_of___lldiv 3100                                  _T0CON 000FD5  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                      __end_of___lwdiv 34F6                        __end_of___lwmod 3712  
                                i2l254 1E5A                                  i2l911 3FDE  
                                i2l591 1EEC                                  i2l833 26FA  
                                i2l835 271A                                  i2l829 26AE  
                      ___awdiv@counter 008A                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 402C                        __end_of_handler 2756  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 3E5A  
                      __end_of_initLCD 3AA6                         __CFG_EBTRB$OFF 000000  
                                _debug 0067                             i2isdigit@c 0003  
                                _getIR 397A                        __end_of_loadRTC 3374  
                      __end_of_readMAG 3A14                        __end_of_dpowers FB8C  
                                _first 00E2                                  _enter 006B  
                      __end_of_isdigit 3E84                                  _input 007D  
                                _putch 400C                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 3ED2  
                     __end_ofi2_getRTC 35DE                    _log_count_pop_w_tab 00F0  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 18D4  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 3BF6                            Loading@addr 00B3  
                     _count_can_no_lab 005D                   __size_of_EEPROM_read 0018  
                      __initialization 392C                           __end_of_Test 2DCC  
                   __size_ofi2_lcdInst 000C                           __end_of_main 32E8  
                         __end_of_keys FB82                           __end_of_sort 3F62  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                                 ??_Test 00C4  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00B6  
                        __activetblptr 000003             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FC38  
                               STR_101 FC5A                                 STR_102 FEB3  
                               STR_103 FE95                                 STR_104 FE86  
                               STR_105 FBDF                                 STR_106 FBF1  
                               _ADRESH 000FC4                                 STR_107 FFB5  
                               _EEADRH 000FAA                                 _ADRESL 000FC3  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 3C26  
            i2_change_state_to_menu_22 3BF6                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1167 1740                                 i2l1614 3922  
                               i2l1624 3ADE                                 i2l5003 3F9A  
                               i2l5013 38F0                                 i2l5015 38F8  
                               i2l5025 3918                                 i2l5017 38FC  
                               i2l5041 3AD4                                 i2l5033 3AB4  
                               i2l5035 3ABC                                 i2l5037 3AC0  
                               i2l5303 1594                                 i2l5411 184A  
                               i2l5421 18B0                                 i2l5405 182E  
                               i2l5341 16CA                                 i2l5325 1650  
                               i2l5317 1628                                 i2l5309 15C6  
                               i2l5407 1836                                 i2l5415 185C  
                               i2l5335 16A8                                 i2l5327 165A  
                               i2l5351 170A                                 i2l5423 18B8  
                               i2l7111 1BFE                                 i2l7103 1BE2  
                               i2l5265 35A4                                 i2l5417 1862  
                               i2l5345 16F4                                 i2l5337 16B2  
                               i2l5329 165E                                 i2l5275 35CE  
                               i2l5363 176E                                 i2l5347 1706  
                               i2l5339 16B8                                 i2l5427 3BCE  
                               i2l7211 1D70                                 i2l7203 1D4C  
                               i2l7131 1C36                                 i2l7123 1C1A  
                               i2l7115 1C0C                                 i2l7107 1BF0  
                               i2l5269 35B4                                 i2l5381 17BC  
                               i2l5293 1570                                 i2l5605 2BA4  
                               i2l5429 3BD6                                 i2l5391 17FA  
                               i2l5367 1786                                 i2l7231 1DBE  
                               i2l7223 1DA2                                 i2l7215 1D7E  
                               i2l7207 1D62                                 i2l7151 1C7E  
                               i2l7143 1C62                                 i2l7135 1C46  
                               i2l7127 1C28                                 i2l5393 1802  
                               i2l5369 178A                                 i2l5297 1580  
                               i2l5617 2BE8                                 i2l5609 2BB4  
                               i2l5387 17D6                                 i2l5299 158E  
                               i2l7235 1DCC                                 i2l7227 1DB0  
                               i2l7219 1D8C                                 i2l7171 1CCC  
                               i2l7163 1CB0                                 i2l7155 1C8C  
                               i2l7147 1C70                                 i2l7139 1C54  
                               i2l7413 20A0                                 i2l7245 1DF0  
                               i2l5399 1818                                 i2l7423 210A  
                               i2l5911 237E                                 i2l7239 1DE2  
                               i2l7191 1D22                                 i2l7183 1CFE  
                               i2l7175 1CE2                                 i2l7167 1CBE  
                               i2l7159 1CA2                                 i2l7433 21CC  
                               i2l7417 20B0                                 i2l5921 23A4  
                               i2l5905 2370                                 i2l5761 1F4E  
                               i2l5753 1EF6                                 i2l7097 1BCE  
                               i2l5931 23C6                                 i2l5915 239A  
                               i2l5771 1FBC                                 i2l5763 1F64  
                               i2l5755 1F0C                                 i2l5747 1E8A  
                               i2l7195 1D30                                 i2l7187 1D0C  
                               i2l7179 1CF0                                 i2l7099 1BD4  
                               i2l7531 26CC                                 i2l5925 23B8  
                               i2l5861 22D2                                 i2l5773 1FD2  
                               i2l5765 1F7A                                 i2l5757 1F22  
                               i2l5781 2058                                 i2l7533 26CE  
                               i2l7509 2682                                 i2l5927 23BC  
                               i2l5871 22F0                                 i2l5775 1FE8  
                               i2l5767 1F90                                 i2l5759 1F38  
                               i2l7199 1D3E                                 i2l5961 2434  
                               i2l5953 2410                                 i2l5945 23EC  
                               i2l5881 230E                                 i2l5873 22F6  
                               i2l5857 22BE                                 i2l5849 22A4  
                               i2l5769 1FA6                                 i2l4979 3EF2  
                               i2l5939 23DE                                 i2l5875 22FC  
                               i2l5859 22CE                                 i2l5867 22DC  
                               i2l5779 1FFE                                 i2l7555 2718  
                               i2l5957 2422                                 i2l5949 23FE  
                               i2l5877 2302                                 i2l5885 2314  
                               i2l7821 1E30                                 i2l5879 2308  
                               i2l5967 243E                                 i2l7823 1E4C  
                               i2l7495 2666                                 i2l5897 2358  
                               i2l7827 232C                                 i2l7819 1E0E  
                               i2l7829 2348                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 00B1  
                       __CFG_XINST$OFF 000000                       ID@sensor_outputs 0088  
                     __end_of_dispLogs 3F40                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 29C6  
                               ___wmul 3B8E                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                              ??___awmod 0084  
                          logRun@byte1 00B2                            logRun@byte2 00B3  
                          logRun@byte3 00B4                                 _getRTC 3374  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 3F84                                 _initUI 3EF8  
                               _readIR 3A14                                 _logRun 2756  
                               clear_0 3952                                 clear_1 395E  
                               clear_2 396A                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestA5 3772  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 112E                              ??_handler 004B  
              __size_of_initGlobalVars 006A                           ?_retrieveLog 0007  
                               _strcpy 3B58                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 3EAC  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 3E84  
                         ??_EEPROMTest 0080                              ??_isdigit 0080  
                   __size_of_PortTests 0084                      __end_ofi2___lwdiv 392C  
                     __end_of_printRTC 1B9E                           __mediumconst FB70  
                    __end_ofi2___lwmod 3AE8                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 00EE                  __end_of_algorithmTest 2F86  
                    __end_ofi2_lcdInst 4044                      __end_ofi2_isdigit 3FA2  
                           __accesstop 0080                __end_of__initialization 3970  
                        ?_inputHandler 002A                          ___rparam_used 000001  
              printSortTimer@start_sec 003D                  __size_of_actuatorTest 0876  
                        i2_EEPROM_read 3FD0                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                     __end_of_EEPROMTest 4082  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E4  
                         __pidataBANK1 4058                          __end_of_getIR 39C8  
                          i2printRTC@i 0041                          _initSortTimer 3100  
          __end_of_updateServoPosition 356C                          __end_of_putch 401C  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 2AE6                             __end_of_UI 08B8  
                   printSortTimer@hour 002D                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002F  
   __end_of_change_state_to_menu_start 3E2E          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 3E02                  printSortTimer@cur_sec 003F  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0061  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 08B8                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C                           _EEPROM_write 2DCC  
                              UI@F3220 012D               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                    __end_of_PortTests 347E                      printRTC@RTC_month 00BC  
                         ?i2_lcdNibble 0001                                UI@i_411 00CA  
                              UI@i_412 00CB                                UI@i_430 00CC  
                              UI@i_431 00CD                                UI@i_408 00C9  
                              UI@i_442 00D2                                UI@i_434 00CE  
                              UI@i_443 00D3                                UI@i_435 00CF  
                              UI@i_446 00D4                                UI@i_438 00D0  
                              UI@i_447 00D5                                UI@i_439 00D1  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0001                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                          ?_PortTestA5 0001                                ?_printf 008E  
                              _UI$2205 00C6                                ?_strcpy 0080  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              i2_putch 402C                              ?_initTime 0080  
                      _f_loadingNewCan 00E0                        i2printRTC@month 003D  
                __size_of_Distribution 0134            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 36B0                                _Loading 2C00  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 2F86  
                              ___awmod 31AA                             _initServos 37D2  
                              ___lldiv 3044                        __size_of___wmul 0036  
                              ___lwdiv 347E                                ___lwmod 36B0  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                        __size_of_initUI 0024  
                      __size_of_readIR 004C                                __pcinit 392C  
                 i2EEPROM_read@address 0001                        __size_of_logRun 013C  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 35DE                                _lcdInst 401C  
                              _handler 0008                                __ptext0 324C  
                              __ptext1 3FBA                                __ptext2 3F40  
                              __ptext3 2C00                                __ptext4 3100  
                              __ptext5 37D2                                __ptext6 35DE  
                              __ptext7 397A                                __ptext8 29C6  
                              __ptext9 2892                        __size_of_printf 0438  
                              _readADC 3E2E                        __size_of_strcpy 0036  
                              _initLCD 3A60                                _cur_can 0065  
                              _loadRTC 32E8                                _readMAG 39C8  
                              _dpowers FB82                     actuatorTest@i_1562 00AE  
                   actuatorTest@i_1571 00B4                     actuatorTest@i_1563 00AF  
                   actuatorTest@i_1572 00B5                     actuatorTest@i_1581 00BA  
                   actuatorTest@i_1565 00B0                     actuatorTest@i_1582 00BB  
                   actuatorTest@i_1574 00B6                     actuatorTest@i_1566 00B1  
                   actuatorTest@i_1591 00C0                     actuatorTest@i_1575 00B7  
                   actuatorTest@i_1592 00C1                     actuatorTest@i_1584 00BC  
                   actuatorTest@i_1568 00B2                     actuatorTest@i_1585 00BD  
                   actuatorTest@i_1577 00B8                     actuatorTest@i_1569 00B3  
                   actuatorTest@i_1594 00C2                     actuatorTest@i_1578 00B9  
                   actuatorTest@i_1595 00C3                     actuatorTest@i_1587 00BE  
                   actuatorTest@i_1588 00BF                                _isdigit 3E5A  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 011A               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 2892  
                       __pintcode_body 25F8                   end_of_initialization 3970  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                                int_func 25F8  
                  i2___wmul@multiplier 0001                          ??_EEPROM_read 0082  
                  __size_of_PortTestA5 0060              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
               __end_of_initGlobalVars 3648                             _sensorTest 246C  
                           _servoTimes 011C                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 246C  
                __end_of_machineConfig 3884                             _updateMenu 1B9E  
                    i2_I2C_Master_Read 3ED2                              _IR_signal 00DA  
                    i2_I2C_Master_Wait 3FFA                      i2_I2C_Master_Stop 4070  
                    i2___lwdiv@divisor 0008                        _log_count_total 00F2  
                            i2___lwdiv 38DA                              i2___lwmod 3AA6  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 2094  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00AD  
         ??_change_state_to_menu_start 00C4                              i2_lcdInst 4038  
                           _total_time 00F8                            printf@width 00A9  
                 __size_of_stopSignals 0016                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 3F84                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                  __end_of_EEPROM_read 3FBA                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 3BC4  
                       __end_of_getRTC 33FA                   __size_ofi2_lcdNibble 0056  
                        EEPROM_write@i 00AF                          i2lcdInst@data 0003  
                       __end_of_initUI 3F1C                         __end_of_readIR 3A60  
                       __end_of_logRun 2892                       i2___wmul@product 0005  
                       __end_of_printf 1566                           i2printf@flag 0026  
                       __end_of_strcpy 3B8E              __end_ofi2_I2C_Master_Read 3EF8  
            __end_ofi2_I2C_Master_Wait 400C                           i2printf@prec 001D  
                  start_initialization 392C              __end_ofi2_I2C_Master_Stop 4078  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 005F            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1310 00B0  
                i2I2C_Master_Read@temp 0003                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                               ??___wmul 0084  
                             ??_getRTC 0083                 __size_of_algorithmTest 00D6  
                            _PortTests 33FA                            ?_sensorTest 0001  
                          __pdataBANK1 012D                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                           ??_PortTestA5 00AB  
               printSortTimer@timeDiff 0047       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    _printSortTimer$2325 0045  
                          __pbssCOMRAM 005B           __size_of_updateServoPosition 0076  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
              __size_of_printSortTimer 01F2                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$1852 0081  
                       initSortTimer@i 0088                      printSortTimer@min 0041  
                    printSortTimer@sec 0043                    __size_of_initServos 005A  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0063                            _EEPROM_read 3FA2  
                   __end_of_PortTestA5 37D2                       _I2C_Master_Start 4068  
                            _f_lastCan 0073                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 4044  
                    __size_of_initTime 0022                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                        __pmediumconst FB70                              _lcdNibble 3648  
                __size_of_inputHandler 01E6                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                             ?___lwdiv 0080                             ?_PortTests 0001  
                             ?___lwmod 0087                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 0075                              _cur_state 00DE  
                     ___lwdiv@quotient 0084                         __size_of_getIR 004E  
                        _algorithmTest 2EB0                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 0120                            __size_of_UI 08A6  
                  __size_of_sensorTest 018C             __end_ofi2_I2C_Master_Start 4080  
           __end_ofi2_I2C_Master_Write 4058                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                             _LATEbits 000F8D                           _inputHandler 2286  
                          ??i2_isdigit 0001                               i2u340_40 3EF0  
                             _PIR2bits 000FA1                               i2u436_40 1EEC  
                             i2u393_40 168C                               i2u393_47 1682  
                             i2u740_47 38A6                               i2u397_40 16EC  
                             i2u741_47 38C8                               i2u397_47 16E2  
                             i2u638_40 21C6                               i2u742_47 38D2  
                             i2u738_47 22C4                               i2u739_47 389C  
                  __size_of_updateMenu 02C0                         _log_completion 00E8  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                            _was_low_1 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 3EAC                          lcdNibble@data 0081  
                             i2_getRTC 356C                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                             i2_printf 1566                               i2_strcpy 3BC4  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 3940                              readIR@res 0084  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 3FE6                            _count_total 00FE  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 00E6                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                __end_of_initSortTimer 31AA                           ??_initServos 0088  
                          ??_PortTests 0080                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 3C86  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 3B20  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 3AE8  
              _change_state_to_menu_23 3C56                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 3D76                _change_state_to_logs_12 3D46  
              _change_state_to_logs_22 3D16                _change_state_to_logs_23 3DD4  
              _change_state_to_logs_33 3CE6                _change_state_to_logs_34 3CB6  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 274E                             _EEPROMTest 4080  
                      _I2C_Master_Init 3712                       __size_of_readADC 002C  
                      _I2C_Master_Read 3DA6                       __size_of_initLCD 0046  
                         _f_ID_receive 006D                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 3FE6  
                      _I2C_Master_Stop 4060                       __size_of_isdigit 002A  
                       _printSortTimer 2094                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 2C00  
                             __ptext10 382C                               __ptext11 2756  
                             __ptext20 3A60                               __ptext12 2DCC  
                             __ptext21 0012                               __ptext13 3FA2  
                             __ptext30 3AE8                               __ptext22 18D4  
                             __ptext14 3EF8                               __ptext31 3B20  
                             __ptext23 3B58                               __ptext15 32E8  
                             __ptext40 08B8                               __ptext32 31AA  
                             __ptext24 3374                               __ptext16 3712  
                             __ptext41 34F6                               __ptext33 2F86  
                             __ptext25 4044                               __ptext17 3044  
                             __ptext50 401C                               __ptext42 33FA  
                             __ptext34 2CE6                               __ptext26 4060  
                             __ptext18 3E02                               __ptext51 3648  
                             __ptext43 3772                               __ptext35 246C  
                             __ptext27 4068                               __ptext19 3F62  
                             __ptext60 3C26                               __ptext52 4080  
                             __ptext44 112E                               __ptext36 39C8  
                             __ptext28 3DA6                               __ptext61 3C56  
                             __ptext45 400C                               __ptext37 3A14  
                             __ptext29 3FE6                               __ptext70 2AE6  
                             __ptext62 3C86                               __ptext54 1B9E  
                             __ptext46 3E5A                               __ptext38 3E2E  
                             __ptext71 3FD0                               __ptext63 3CB6  
                             __ptext55 3E84                               __ptext47 3B8E  
                             __ptext39 2EB0                               __ptext80 3884  
                             __ptext72 2094                               __ptext64 3CE6  
                             __ptext56 1E5E                               __ptext48 36B0  
                             __ptext81 356C                               __ptext73 1566  
                             __ptext65 3DD4                               __ptext57 3BC4  
                             __ptext49 347E                               __ptext82 404E  
                             __ptext74 402C                               __ptext66 3D16  
                             __ptext58 2286                               __ptext83 4070  
                             __ptext75 3F84                               __ptext67 3D46  
                             __ptext59 3BF6                               __ptext84 4078  
                             __ptext76 3EAC                               __ptext68 3D76  
                             __ptext85 3ED2                               __ptext77 3AA6  
                             __ptext69 3F1C                               __ptext86 3FFA  
                             __ptext78 38DA                               __ptext79 4038  
                             _dispLogs 3F1C                          ?_actuatorTest 0001  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$1852 0002                     __end_of_initServos 382C  
                        __size_of_Test 00E6                          ?_EEPROM_write 00AB  
                             _initTime 3F62                          __size_of_main 009C  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F6                    _updateServoPosition 34F6  
               __size_of_machineConfig 0058                          ??i2_lcdNibble 0001  
                             _printRTC 18D4                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F4  
                   _f_can_coming_to_ID 006F                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 3C56  
    __end_ofi2_change_state_to_menu_22 3C26                               loadRTC@i 0096  
               __end_of_printSortTimer 2286                              putch@data 0082  
             __end_of_I2C_Master_Start 4070                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 404E                             _INTCONbits 000FF2  
                 ?_updateServoPosition 0080                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00DC  
                             isdigit@c 0082                         ??_actuatorTest 00AB  
                             intlevel2 0000                         ??_EEPROM_write 00AE  
                   __end_of_sensorTest 25F8                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 3FD0              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 1E5E  
              __end_of_I2C_Master_Init 3772                __end_of_I2C_Master_Read 3DD4  
              __end_of_I2C_Master_Wait 3FFA                __end_of_I2C_Master_Stop 4068  
                        printRTC@F3211 0131                            lcdInst@data 0082  
                         retrieveLog@i 000E                            _retrieveLog 2AE6  
                  __end_ofi2_lcdNibble 38DA                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                            ?_EEPROMTest 0001  
                      ___lwmod@divisor 0089                      _f_can_distributed 012B  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 382C                        ___lwmod@counter 008B  
                        printRTC@month 00BE                          ?_Distribution 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                   i2printRTC@INT_time 002D  
