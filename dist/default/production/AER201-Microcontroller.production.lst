

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Apr 12 19:01:14 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	text97,global,reloc=2,class=CODE,delta=1
   113                           	psect	text98,global,reloc=2,class=CODE,delta=1
   114                           	psect	text99,global,reloc=2,class=CODE,delta=1
   115                           	psect	text100,global,reloc=2,class=CODE,delta=1
   116                           	psect	text101,global,reloc=2,class=CODE,delta=1
   117                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   118                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   119                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   120  0000                     
   121                           ; Version 1.40
   122                           ; Generated 01/12/2016 GMT
   123                           ; 
   124                           ; Copyright © 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   125                           ; All rights reserved.
   126                           ; 
   127                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   128                           ; 
   129                           ; Redistribution and use in source and binary forms, with or without modification, are
   130                           ; permitted provided that the following conditions are met:
   131                           ; 
   132                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   133                           ;        conditions and the following disclaimer.
   134                           ; 
   135                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   136                           ;        of conditions and the following disclaimer in the documentation and/or other
   137                           ;        materials provided with the distribution.
   138                           ; 
   139                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   140                           ;        software without specific prior written permission.
   141                           ; 
   142                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   143                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   144                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   145                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   146                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   147                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   148                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   149                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   150                           ; 
   151                           ; 
   152                           ; Code-generator required, PIC18F4620 Definitions
   153                           ; 
   154                           ; SFR Addresses
   155  0000                     
   156                           	psect	idataBANK1
   157  00610E                     __pidataBANK1:
   158                           	opt stack 0
   159                           
   160                           ;initializer for UI@F3252
   161  00610E  4D                 	db	77
   162  00610F  4D                 	db	77
   163  006110  4D                 	db	77
   164  006111  00                 	db	0
   165                           
   166                           ;initializer for printRTC@F3242
   167  006112  4D                 	db	77
   168  006113  4D                 	db	77
   169  006114  4D                 	db	77
   170  006115  00                 	db	0
   171                           
   172                           	psect	mediumconst
   173  00FAA6                     __pmediumconst:
   174                           	opt stack 0
   175  00FAA6  00                 	db	0
   176  00FAA7                     _keys:
   177                           	opt stack 0
   178  00FAA7  31                 	db	49
   179  00FAA8  32                 	db	50
   180  00FAA9  33                 	db	51
   181  00FAAA  41                 	db	65
   182  00FAAB  34                 	db	52
   183  00FAAC  35                 	db	53
   184  00FAAD  36                 	db	54
   185  00FAAE  42                 	db	66
   186  00FAAF  37                 	db	55
   187  00FAB0  38                 	db	56
   188  00FAB1  39                 	db	57
   189  00FAB2  43                 	db	67
   190  00FAB3  2A                 	db	42
   191  00FAB4  30                 	db	48
   192  00FAB5  23                 	db	35
   193  00FAB6  44                 	db	68
   194  00FAB7  00                 	db	0
   195  00FAB8                     __end_of_keys:
   196                           	opt stack 0
   197  00FAB8                     _dpowers:
   198                           	opt stack 0
   199  00FAB8  0001               	dw	1
   200  00FABA  000A               	dw	10
   201  00FABC  0064               	dw	100
   202  00FABE  03E8               	dw	1000
   203  00FAC0  2710               	dw	10000
   204  00FAC2                     __end_of_dpowers:
   205                           	opt stack 0
   206  0000                     _ADCON0	set	4034
   207  0000                     _ADCON0bits	set	4034
   208  0000                     _ADCON1	set	4033
   209  0000                     _ADCON2	set	4032
   210  0000                     _ADRESH	set	4036
   211  0000                     _ADRESL	set	4035
   212  0000                     _CMCONbits	set	4020
   213  0000                     _CVRCON	set	4021
   214  0000                     _EEADR	set	4009
   215  0000                     _EEADRH	set	4010
   216  0000                     _EECON1bits	set	4006
   217  0000                     _EECON2	set	4007
   218  0000                     _EEDATA	set	4008
   219  0000                     _INTCONbits	set	4082
   220  0000                     _LATA	set	3977
   221  0000                     _LATAbits	set	3977
   222  0000                     _LATB	set	3978
   223  0000                     _LATBbits	set	3978
   224  0000                     _LATC	set	3979
   225  0000                     _LATCbits	set	3979
   226  0000                     _LATD	set	3980
   227  0000                     _LATDbits	set	3980
   228  0000                     _LATE	set	3981
   229  0000                     _OSCCON	set	4051
   230  0000                     _OSCTUNEbits	set	3995
   231  0000                     _PIR2bits	set	4001
   232  0000                     _PORTAbits	set	3968
   233  0000                     _PORTB	set	3969
   234  0000                     _PORTBbits	set	3969
   235  0000                     _PR2	set	4043
   236  0000                     _SSPADD	set	4040
   237  0000                     _SSPBUF	set	4041
   238  0000                     _SSPCON1	set	4038
   239  0000                     _SSPCON2	set	4037
   240  0000                     _SSPSTAT	set	4039
   241  0000                     _T0CON	set	4053
   242  0000                     _T1CON	set	4045
   243  0000                     _T2CON	set	4042
   244  0000                     _T3CON	set	4017
   245  0000                     _TMR0H	set	4055
   246  0000                     _TMR0L	set	4054
   247  0000                     _TMR1H	set	4047
   248  0000                     _TMR1L	set	4046
   249  0000                     _TMR3H	set	4019
   250  0000                     _TMR3L	set	4018
   251  0000                     _TRISA	set	3986
   252  0000                     _TRISB	set	3987
   253  0000                     _TRISC	set	3988
   254  0000                     _TRISD	set	3989
   255  0000                     _TRISE	set	3990
   256  0000                     _ACKDT	set	32301
   257  0000                     _ACKEN	set	32300
   258  0000                     _ADIE	set	31982
   259  0000                     _INT1IE	set	32643
   260  0000                     _INT1IF	set	32640
   261  0000                     _PEIE	set	32662
   262  0000                     _PEN	set	32298
   263  0000                     _RCEN	set	32299
   264  0000                     _RSEN	set	32297
   265  0000                     _SEN	set	32296
   266  0000                     _TMR0IE	set	32661
   267  0000                     _TMR0IF	set	32658
   268  0000                     _TMR0ON	set	32431
   269  0000                     _TMR1IE	set	31976
   270  0000                     _TMR1IF	set	31984
   271  0000                     _TMR1ON	set	32360
   272  0000                     _TMR2IE	set	31977
   273  0000                     _TMR2IF	set	31985
   274  0000                     _TMR2ON	set	32338
   275  0000                     _TMR3IE	set	32001
   276  0000                     _TMR3IF	set	32009
   277  0000                     _TMR3ON	set	32136
   278  0000                     _TRISC3	set	31907
   279  0000                     _TRISC4	set	31908
   280  0000                     _nRBPU	set	32655
   281  00FAC2                     STR_21:
   282  00FAC2  25                 	db	37
   283  00FAC3  30                 	db	48	;'0'
   284  00FAC4  32                 	db	50	;'2'
   285  00FAC5  64                 	db	100	;'d'
   286  00FAC6  25                 	db	37
   287  00FAC7  73                 	db	115	;'s'
   288  00FAC8  20                 	db	32
   289  00FAC9  7C                 	db	124
   290  00FACA  20                 	db	32
   291  00FACB  25                 	db	37
   292  00FACC  30                 	db	48	;'0'
   293  00FACD  32                 	db	50	;'2'
   294  00FACE  64                 	db	100	;'d'
   295  00FACF  3A                 	db	58	;':'
   296  00FAD0  25                 	db	37
   297  00FAD1  30                 	db	48	;'0'
   298  00FAD2  32                 	db	50	;'2'
   299  00FAD3  64                 	db	100	;'d'
   300  00FAD4  3A                 	db	58	;':'
   301  00FAD5  25                 	db	37
   302  00FAD6  30                 	db	48	;'0'
   303  00FAD7  32                 	db	50	;'2'
   304  00FAD8  64                 	db	100	;'d'
   305  00FAD9  00                 	db	0
   306  00FADA                     STR_66:
   307  00FADA  28                 	db	40
   308  00FADB  64                 	db	100	;'d'
   309  00FADC  61                 	db	97	;'a'
   310  00FADD  74                 	db	116	;'t'
   311  00FADE  61                 	db	97	;'a'
   312  00FADF  3A                 	db	58	;':'
   313  00FAE0  20                 	db	32
   314  00FAE1  25                 	db	37
   315  00FAE2  75                 	db	117	;'u'
   316  00FAE3  2C                 	db	44
   317  00FAE4  20                 	db	32
   318  00FAE5  61                 	db	97	;'a'
   319  00FAE6  64                 	db	100	;'d'
   320  00FAE7  64                 	db	100	;'d'
   321  00FAE8  72                 	db	114	;'r'
   322  00FAE9  3A                 	db	58	;':'
   323  00FAEA  20                 	db	32
   324  00FAEB  25                 	db	37
   325  00FAEC  75                 	db	117	;'u'
   326  00FAED  29                 	db	41
   327  00FAEE  00                 	db	0
   328  00FAEF                     STR_112:
   329  00FAEF  44                 	db	68	;'D'
   330  00FAF0  20                 	db	32
   331  00FAF1  57                 	db	87	;'W'
   332  00FAF2  49                 	db	73	;'I'
   333  00FAF3  4C                 	db	76	;'L'
   334  00FAF4  4C                 	db	76	;'L'
   335  00FAF5  20                 	db	32
   336  00FAF6  52                 	db	82	;'R'
   337  00FAF7  45                 	db	69	;'E'
   338  00FAF8  54                 	db	84	;'T'
   339  00FAF9  55                 	db	85	;'U'
   340  00FAFA  52                 	db	82	;'R'
   341  00FAFB  4E                 	db	78	;'N'
   342  00FAFC  20                 	db	32
   343  00FAFD  20                 	db	32
   344  00FAFE  20                 	db	32
   345  00FAFF  20                 	db	32
   346  00FB00  00                 	db	0
   347  00FB01                     STR_120:
   348  00FB01  4F                 	db	79	;'O'
   349  00FB02  54                 	db	84	;'T'
   350  00FB03  48                 	db	72	;'H'
   351  00FB04  45                 	db	69	;'E'
   352  00FB05  52                 	db	82	;'R'
   353  00FB06  20                 	db	32
   354  00FB07  53                 	db	83	;'S'
   355  00FB08  45                 	db	69	;'E'
   356  00FB09  54                 	db	84	;'T'
   357  00FB0A  53                 	db	83	;'S'
   358  00FB0B  20                 	db	32
   359  00FB0C  52                 	db	82	;'R'
   360  00FB0D  41                 	db	65	;'A'
   361  00FB0E  35                 	db	53	;'5'
   362  00FB0F  20                 	db	32
   363  00FB10  20                 	db	32
   364  00FB11  20                 	db	32
   365  00FB12  00                 	db	0
   366  00FB13                     STR_81:
   367  00FB13  49                 	db	73	;'I'
   368  00FB14  52                 	db	82	;'R'
   369  00FB15  20                 	db	32
   370  00FB16  28                 	db	40
   371  00FB17  52                 	db	82	;'R'
   372  00FB18  45                 	db	69	;'E'
   373  00FB19  46                 	db	70	;'F'
   374  00FB1A  4C                 	db	76	;'L'
   375  00FB1B  45                 	db	69	;'E'
   376  00FB1C  43                 	db	67	;'C'
   377  00FB1D  29                 	db	41
   378  00FB1E  3A                 	db	58	;':'
   379  00FB1F  20                 	db	32
   380  00FB20  25                 	db	37
   381  00FB21  64                 	db	100	;'d'
   382  00FB22  20                 	db	32
   383  00FB23  20                 	db	32
   384  00FB24  00                 	db	0
   385  00FB25                     STR_79:
   386  00FB25  49                 	db	73	;'I'
   387  00FB26  52                 	db	82	;'R'
   388  00FB27  20                 	db	32
   389  00FB28  28                 	db	40
   390  00FB29  50                 	db	80	;'P'
   391  00FB2A  55                 	db	85	;'U'
   392  00FB2B  53                 	db	83	;'S'
   393  00FB2C  48                 	db	72	;'H'
   394  00FB2D  45                 	db	69	;'E'
   395  00FB2E  52                 	db	82	;'R'
   396  00FB2F  29                 	db	41
   397  00FB30  3A                 	db	58	;':'
   398  00FB31  20                 	db	32
   399  00FB32  25                 	db	37
   400  00FB33  64                 	db	100	;'d'
   401  00FB34  20                 	db	32
   402  00FB35  20                 	db	32
   403  00FB36  00                 	db	0
   404  00FB37                     STR_119:
   405  00FB37  53                 	db	83	;'S'
   406  00FB38  3A                 	db	58	;':'
   407  00FB39  20                 	db	32
   408  00FB3A  44                 	db	68	;'D'
   409  00FB3B  20                 	db	32
   410  00FB3C  57                 	db	87	;'W'
   411  00FB3D  49                 	db	73	;'I'
   412  00FB3E  4C                 	db	76	;'L'
   413  00FB3F  4C                 	db	76	;'L'
   414  00FB40  20                 	db	32
   415  00FB41  52                 	db	82	;'R'
   416  00FB42  45                 	db	69	;'E'
   417  00FB43  54                 	db	84	;'T'
   418  00FB44  55                 	db	85	;'U'
   419  00FB45  52                 	db	82	;'R'
   420  00FB46  4E                 	db	78	;'N'
   421  00FB47  20                 	db	32
   422  00FB48  00                 	db	0
   423  00FB49                     STR_122:
   424  00FB49  4F                 	db	79	;'O'
   425  00FB4A  54                 	db	84	;'T'
   426  00FB4B  48                 	db	72	;'H'
   427  00FB4C  45                 	db	69	;'E'
   428  00FB4D  52                 	db	82	;'R'
   429  00FB4E  3A                 	db	58	;':'
   430  00FB4F  20                 	db	32
   431  00FB50  43                 	db	67	;'C'
   432  00FB51  41                 	db	65	;'A'
   433  00FB52  4D                 	db	77	;'M'
   434  00FB53  20                 	db	32
   435  00FB54  54                 	db	84	;'T'
   436  00FB55  4F                 	db	79	;'O'
   437  00FB56  47                 	db	71	;'G'
   438  00FB57  47                 	db	71	;'G'
   439  00FB58  4C                 	db	76	;'L'
   440  00FB59  45                 	db	69	;'E'
   441  00FB5A  00                 	db	0
   442  00FB5B                     STR_128:
   443  00FB5B  4F                 	db	79	;'O'
   444  00FB5C  54                 	db	84	;'T'
   445  00FB5D  48                 	db	72	;'H'
   446  00FB5E  45                 	db	69	;'E'
   447  00FB5F  52                 	db	82	;'R'
   448  00FB60  20                 	db	32
   449  00FB61  53                 	db	83	;'S'
   450  00FB62  45                 	db	69	;'E'
   451  00FB63  54                 	db	84	;'T'
   452  00FB64  53                 	db	83	;'S'
   453  00FB65  20                 	db	32
   454  00FB66  50                 	db	80	;'P'
   455  00FB67  55                 	db	85	;'U'
   456  00FB68  53                 	db	83	;'S'
   457  00FB69  48                 	db	72	;'H'
   458  00FB6A  45                 	db	69	;'E'
   459  00FB6B  52                 	db	82	;'R'
   460  00FB6C  00                 	db	0
   461  00FB6D                     STR_3:
   462  00FB6D  2D                 	db	45
   463  00FB6E  2D                 	db	45
   464  00FB6F  20                 	db	32
   465  00FB70  4C                 	db	76	;'L'
   466  00FB71  4F                 	db	79	;'O'
   467  00FB72  47                 	db	71	;'G'
   468  00FB73  20                 	db	32
   469  00FB74  25                 	db	37
   470  00FB75  32                 	db	50	;'2'
   471  00FB76  64                 	db	100	;'d'
   472  00FB77  20                 	db	32
   473  00FB78  48                 	db	72	;'H'
   474  00FB79  45                 	db	69	;'E'
   475  00FB7A  52                 	db	82	;'R'
   476  00FB7B  45                 	db	69	;'E'
   477  00FB7C  2D                 	db	45
   478  00FB7D  2D                 	db	45
   479  00FB7E  00                 	db	0
   480  00FB7F                     STR_1:
   481  00FB7F  52                 	db	82	;'R'
   482  00FB80  45                 	db	69	;'E'
   483  00FB81  53                 	db	83	;'S'
   484  00FB82  55                 	db	85	;'U'
   485  00FB83  4C                 	db	76	;'L'
   486  00FB84  54                 	db	84	;'T'
   487  00FB85  53                 	db	83	;'S'
   488  00FB86  20                 	db	32
   489  00FB87  49                 	db	73	;'I'
   490  00FB88  4E                 	db	78	;'N'
   491  00FB89  20                 	db	32
   492  00FB8A  4C                 	db	76	;'L'
   493  00FB8B  4F                 	db	79	;'O'
   494  00FB8C  47                 	db	71	;'G'
   495  00FB8D  20                 	db	32
   496  00FB8E  25                 	db	37
   497  00FB8F  64                 	db	100	;'d'
   498  00FB90  00                 	db	0
   499  00FB91                     STR_103:
   500  00FB91  4D                 	db	77	;'M'
   501  00FB92  49                 	db	73	;'I'
   502  00FB93  44                 	db	68	;'D'
   503  00FB94  20                 	db	32
   504  00FB95  2D                 	db	45
   505  00FB96  2D                 	db	45
   506  00FB97  20                 	db	32
   507  00FB98  32                 	db	50	;'2'
   508  00FB99  73                 	db	115	;'s'
   509  00FB9A  20                 	db	32
   510  00FB9B  20                 	db	32
   511  00FB9C  20                 	db	32
   512  00FB9D  20                 	db	32
   513  00FB9E  20                 	db	32
   514  00FB9F  20                 	db	32
   515  00FBA0  20                 	db	32
   516  00FBA1  00                 	db	0
   517  00FBA2                     STR_106:
   518  00FBA2  44                 	db	68	;'D'
   519  00FBA3  52                 	db	82	;'R'
   520  00FBA4  4F                 	db	79	;'O'
   521  00FBA5  50                 	db	80	;'P'
   522  00FBA6  20                 	db	32
   523  00FBA7  2D                 	db	45
   524  00FBA8  2D                 	db	45
   525  00FBA9  20                 	db	32
   526  00FBAA  32                 	db	50	;'2'
   527  00FBAB  73                 	db	115	;'s'
   528  00FBAC  20                 	db	32
   529  00FBAD  20                 	db	32
   530  00FBAE  20                 	db	32
   531  00FBAF  20                 	db	32
   532  00FBB0  20                 	db	32
   533  00FBB1  20                 	db	32
   534  00FBB2  00                 	db	0
   535  00FBB3                     STR_100:
   536  00FBB3  4C                 	db	76	;'L'
   537  00FBB4  45                 	db	69	;'E'
   538  00FBB5  46                 	db	70	;'F'
   539  00FBB6  54                 	db	84	;'T'
   540  00FBB7  20                 	db	32
   541  00FBB8  2D                 	db	45
   542  00FBB9  2D                 	db	45
   543  00FBBA  20                 	db	32
   544  00FBBB  32                 	db	50	;'2'
   545  00FBBC  73                 	db	115	;'s'
   546  00FBBD  20                 	db	32
   547  00FBBE  20                 	db	32
   548  00FBBF  20                 	db	32
   549  00FBC0  20                 	db	32
   550  00FBC1  20                 	db	32
   551  00FBC2  20                 	db	32
   552  00FBC3  00                 	db	0
   553  00FBC4                     STR_105:
   554  00FBC4  4C                 	db	76	;'L'
   555  00FBC5  45                 	db	69	;'E'
   556  00FBC6  56                 	db	86	;'V'
   557  00FBC7  45                 	db	69	;'E'
   558  00FBC8  4C                 	db	76	;'L'
   559  00FBC9  20                 	db	32
   560  00FBCA  2D                 	db	45
   561  00FBCB  2D                 	db	45
   562  00FBCC  20                 	db	32
   563  00FBCD  32                 	db	50	;'2'
   564  00FBCE  73                 	db	115	;'s'
   565  00FBCF  20                 	db	32
   566  00FBD0  20                 	db	32
   567  00FBD1  20                 	db	32
   568  00FBD2  20                 	db	32
   569  00FBD3  20                 	db	32
   570  00FBD4  00                 	db	0
   571  00FBD5                     STR_99:
   572  00FBD5  52                 	db	82	;'R'
   573  00FBD6  49                 	db	73	;'I'
   574  00FBD7  47                 	db	71	;'G'
   575  00FBD8  48                 	db	72	;'H'
   576  00FBD9  54                 	db	84	;'T'
   577  00FBDA  20                 	db	32
   578  00FBDB  2D                 	db	45
   579  00FBDC  2D                 	db	45
   580  00FBDD  20                 	db	32
   581  00FBDE  32                 	db	50	;'2'
   582  00FBDF  73                 	db	115	;'s'
   583  00FBE0  20                 	db	32
   584  00FBE1  20                 	db	32
   585  00FBE2  20                 	db	32
   586  00FBE3  20                 	db	32
   587  00FBE4  20                 	db	32
   588  00FBE5  00                 	db	0
   589  00FBE6                     STR_98:
   590  00FBE6  4D                 	db	77	;'M'
   591  00FBE7  49                 	db	73	;'I'
   592  00FBE8  44                 	db	68	;'D'
   593  00FBE9  44                 	db	68	;'D'
   594  00FBEA  4C                 	db	76	;'L'
   595  00FBEB  45                 	db	69	;'E'
   596  00FBEC  20                 	db	32
   597  00FBED  2D                 	db	45
   598  00FBEE  2D                 	db	45
   599  00FBEF  20                 	db	32
   600  00FBF0  32                 	db	50	;'2'
   601  00FBF1  73                 	db	115	;'s'
   602  00FBF2  20                 	db	32
   603  00FBF3  20                 	db	32
   604  00FBF4  20                 	db	32
   605  00FBF5  20                 	db	32
   606  00FBF6  00                 	db	0
   607  00FBF7                     STR_113:
   608  00FBF7  4F                 	db	79	;'O'
   609  00FBF8  54                 	db	84	;'T'
   610  00FBF9  48                 	db	72	;'H'
   611  00FBFA  45                 	db	69	;'E'
   612  00FBFB  52                 	db	82	;'R'
   613  00FBFC  20                 	db	32
   614  00FBFD  53                 	db	83	;'S'
   615  00FBFE  45                 	db	69	;'E'
   616  00FBFF  54                 	db	84	;'T'
   617  00FC00  53                 	db	83	;'S'
   618  00FC01  20                 	db	32
   619  00FC02  44                 	db	68	;'D'
   620  00FC03  43                 	db	67	;'C'
   621  00FC04  20                 	db	32
   622  00FC05  20                 	db	32
   623  00FC06  20                 	db	32
   624  00FC07  00                 	db	0
   625  00FC08                     STR_125:
   626  00FC08  44                 	db	68	;'D'
   627  00FC09  20                 	db	32
   628  00FC0A  57                 	db	87	;'W'
   629  00FC0B  49                 	db	73	;'I'
   630  00FC0C  4C                 	db	76	;'L'
   631  00FC0D  4C                 	db	76	;'L'
   632  00FC0E  20                 	db	32
   633  00FC0F  52                 	db	82	;'R'
   634  00FC10  45                 	db	69	;'E'
   635  00FC11  54                 	db	84	;'T'
   636  00FC12  55                 	db	85	;'U'
   637  00FC13  52                 	db	82	;'R'
   638  00FC14  4E                 	db	78	;'N'
   639  00FC15  20                 	db	32
   640  00FC16  20                 	db	32
   641  00FC17  20                 	db	32
   642  00FC18  00                 	db	0
   643  00FC19                     STR_116:
   644  00FC19  35                 	db	53	;'5'
   645  00FC1A  3A                 	db	58	;':'
   646  00FC1B  48                 	db	72	;'H'
   647  00FC1C  7C                 	db	124
   648  00FC1D  36                 	db	54	;'6'
   649  00FC1E  3A                 	db	58	;':'
   650  00FC1F  4C                 	db	76	;'L'
   651  00FC20  7C                 	db	124
   652  00FC21  49                 	db	73	;'I'
   653  00FC22  52                 	db	82	;'R'
   654  00FC23  3A                 	db	58	;':'
   655  00FC24  25                 	db	37
   656  00FC25  64                 	db	100	;'d'
   657  00FC26  20                 	db	32
   658  00FC27  20                 	db	32
   659  00FC28  20                 	db	32
   660  00FC29  00                 	db	0
   661  00FC2A                     STR_114:
   662  00FC2A  31                 	db	49	;'1'
   663  00FC2B  3A                 	db	58	;':'
   664  00FC2C  20                 	db	32
   665  00FC2D  44                 	db	68	;'D'
   666  00FC2E  43                 	db	67	;'C'
   667  00FC2F  20                 	db	32
   668  00FC30  7C                 	db	124
   669  00FC31  20                 	db	32
   670  00FC32  41                 	db	65	;'A'
   671  00FC33  3A                 	db	58	;':'
   672  00FC34  20                 	db	32
   673  00FC35  41                 	db	65	;'A'
   674  00FC36  52                 	db	82	;'R'
   675  00FC37  4D                 	db	77	;'M'
   676  00FC38  20                 	db	32
   677  00FC39  20                 	db	32
   678  00FC3A  00                 	db	0
   679  00FC3B                     STR_101:
   680  00FC3B  4D                 	db	77	;'M'
   681  00FC3C  49                 	db	73	;'I'
   682  00FC3D  44                 	db	68	;'D'
   683  00FC3E  2D                 	db	45
   684  00FC3F  4C                 	db	76	;'L'
   685  00FC40  45                 	db	69	;'E'
   686  00FC41  46                 	db	70	;'F'
   687  00FC42  54                 	db	84	;'T'
   688  00FC43  20                 	db	32
   689  00FC44  2D                 	db	45
   690  00FC45  2D                 	db	45
   691  00FC46  20                 	db	32
   692  00FC47  32                 	db	50	;'2'
   693  00FC48  73                 	db	115	;'s'
   694  00FC49  20                 	db	32
   695  00FC4A  20                 	db	32
   696  00FC4B  00                 	db	0
   697  00FC4C                     STR_102:
   698  00FC4C  4D                 	db	77	;'M'
   699  00FC4D  49                 	db	73	;'I'
   700  00FC4E  44                 	db	68	;'D'
   701  00FC4F  2D                 	db	45
   702  00FC50  52                 	db	82	;'R'
   703  00FC51  49                 	db	73	;'I'
   704  00FC52  47                 	db	71	;'G'
   705  00FC53  48                 	db	72	;'H'
   706  00FC54  54                 	db	84	;'T'
   707  00FC55  20                 	db	32
   708  00FC56  2D                 	db	45
   709  00FC57  2D                 	db	45
   710  00FC58  20                 	db	32
   711  00FC59  32                 	db	50	;'2'
   712  00FC5A  73                 	db	115	;'s'
   713  00FC5B  20                 	db	32
   714  00FC5C  00                 	db	0
   715  00FC5D                     STR_72:
   716  00FC5D  41                 	db	65	;'A'
   717  00FC5E  4C                 	db	76	;'L'
   718  00FC5F  47                 	db	71	;'G'
   719  00FC60  31                 	db	49	;'1'
   720  00FC61  3A                 	db	58	;':'
   721  00FC62  20                 	db	32
   722  00FC63  39                 	db	57	;'9'
   723  00FC64  20                 	db	32
   724  00FC65  50                 	db	80	;'P'
   725  00FC66  4F                 	db	79	;'O'
   726  00FC67  50                 	db	80	;'P'
   727  00FC68  4E                 	db	78	;'N'
   728  00FC69  4F                 	db	79	;'O'
   729  00FC6A  54                 	db	84	;'T'
   730  00FC6B  41                 	db	65	;'A'
   731  00FC6C  42                 	db	66	;'B'
   732  00FC6D  00                 	db	0
   733  00FC6E                     STR_93:
   734  00FC6E  54                 	db	84	;'T'
   735  00FC6F  53                 	db	83	;'S'
   736  00FC70  54                 	db	84	;'T'
   737  00FC71  3A                 	db	58	;':'
   738  00FC72  20                 	db	32
   739  00FC73  43                 	db	67	;'C'
   740  00FC74  4F                 	db	79	;'O'
   741  00FC75  4E                 	db	78	;'N'
   742  00FC76  44                 	db	68	;'D'
   743  00FC77  20                 	db	32
   744  00FC78  53                 	db	83	;'S'
   745  00FC79  4F                 	db	79	;'O'
   746  00FC7A  4C                 	db	76	;'L'
   747  00FC7B  4E                 	db	78	;'N'
   748  00FC7C  27                 	db	39
   749  00FC7D  44                 	db	68	;'D'
   750  00FC7E  00                 	db	0
   751  00FC7F                     STR_95:
   752  00FC7F  54                 	db	84	;'T'
   753  00FC80  53                 	db	83	;'S'
   754  00FC81  54                 	db	84	;'T'
   755  00FC82  3A                 	db	58	;':'
   756  00FC83  20                 	db	32
   757  00FC84  50                 	db	80	;'P'
   758  00FC85  55                 	db	85	;'U'
   759  00FC86  53                 	db	83	;'S'
   760  00FC87  48                 	db	72	;'H'
   761  00FC88  20                 	db	32
   762  00FC89  53                 	db	83	;'S'
   763  00FC8A  4F                 	db	79	;'O'
   764  00FC8B  4C                 	db	76	;'L'
   765  00FC8C  4E                 	db	78	;'N'
   766  00FC8D  27                 	db	39
   767  00FC8E  44                 	db	68	;'D'
   768  00FC8F  00                 	db	0
   769  00FC90                     STR_68:
   770  00FC90  32                 	db	50	;'2'
   771  00FC91  2E                 	db	46
   772  00FC92  53                 	db	83	;'S'
   773  00FC93  4E                 	db	78	;'N'
   774  00FC94  52                 	db	82	;'R'
   775  00FC95  7C                 	db	124
   776  00FC96  34                 	db	52	;'4'
   777  00FC97  2E                 	db	46
   778  00FC98  48                 	db	72	;'H'
   779  00FC99  49                 	db	73	;'I'
   780  00FC9A  7C                 	db	124
   781  00FC9B  35                 	db	53	;'5'
   782  00FC9C  2E                 	db	46
   783  00FC9D  4D                 	db	77	;'M'
   784  00FC9E  45                 	db	69	;'E'
   785  00FC9F  44                 	db	68	;'D'
   786  00FCA0  00                 	db	0
   787  00FCA1                     STR_69:
   788  00FCA1  42                 	db	66	;'B'
   789  00FCA2  2E                 	db	46
   790  00FCA3  50                 	db	80	;'P'
   791  00FCA4  4C                 	db	76	;'L'
   792  00FCA5  41                 	db	65	;'A'
   793  00FCA6  7C                 	db	124
   794  00FCA7  38                 	db	56	;'8'
   795  00FCA8  2E                 	db	46
   796  00FCA9  53                 	db	83	;'S'
   797  00FCAA  56                 	db	86	;'V'
   798  00FCAB  7C                 	db	124
   799  00FCAC  39                 	db	57	;'9'
   800  00FCAD  2E                 	db	46
   801  00FCAE  42                 	db	66	;'B'
   802  00FCAF  4C                 	db	76	;'L'
   803  00FCB0  4B                 	db	75	;'K'
   804  00FCB1  00                 	db	0
   805  00FCB2                     STR_126:
   806  00FCB2  45                 	db	69	;'E'
   807  00FCB3  4C                 	db	76	;'L'
   808  00FCB4  53                 	db	83	;'S'
   809  00FCB5  45                 	db	69	;'E'
   810  00FCB6  20                 	db	32
   811  00FCB7  54                 	db	84	;'T'
   812  00FCB8  4F                 	db	79	;'O'
   813  00FCB9  47                 	db	71	;'G'
   814  00FCBA  47                 	db	71	;'G'
   815  00FCBB  4C                 	db	76	;'L'
   816  00FCBC  45                 	db	69	;'E'
   817  00FCBD  53                 	db	83	;'S'
   818  00FCBE  20                 	db	32
   819  00FCBF  41                 	db	65	;'A'
   820  00FCC0  52                 	db	82	;'R'
   821  00FCC1  4D                 	db	77	;'M'
   822  00FCC2  00                 	db	0
   823  00FCC3                     STR_111:
   824  00FCC3  54                 	db	84	;'T'
   825  00FCC4  53                 	db	83	;'S'
   826  00FCC5  54                 	db	84	;'T'
   827  00FCC6  3A                 	db	58	;':'
   828  00FCC7  20                 	db	32
   829  00FCC8  42                 	db	66	;'B'
   830  00FCC9  4F                 	db	79	;'O'
   831  00FCCA  54                 	db	84	;'T'
   832  00FCCB  48                 	db	72	;'H'
   833  00FCCC  20                 	db	32
   834  00FCCD  53                 	db	83	;'S'
   835  00FCCE  45                 	db	69	;'E'
   836  00FCCF  52                 	db	82	;'R'
   837  00FCD0  56                 	db	86	;'V'
   838  00FCD1  4F                 	db	79	;'O'
   839  00FCD2  53                 	db	83	;'S'
   840  00FCD3  00                 	db	0
   841  00FCD4                     STR_41:
   842  00FCD4  4C                 	db	76	;'L'
   843  00FCD5  4F                 	db	79	;'O'
   844  00FCD6  47                 	db	71	;'G'
   845  00FCD7  20                 	db	32
   846  00FCD8  31                 	db	49	;'1'
   847  00FCD9  20                 	db	32
   848  00FCDA  20                 	db	32
   849  00FCDB  20                 	db	32
   850  00FCDC  20                 	db	32
   851  00FCDD  20                 	db	32
   852  00FCDE  20                 	db	32
   853  00FCDF  20                 	db	32
   854  00FCE0  20                 	db	32
   855  00FCE1  20                 	db	32
   856  00FCE2  20                 	db	32
   857  00FCE3  20                 	db	32
   858  00FCE4  00                 	db	0
   859  00FCE5                     STR_40:
   860  00FCE5  4C                 	db	76	;'L'
   861  00FCE6  4F                 	db	79	;'O'
   862  00FCE7  47                 	db	71	;'G'
   863  00FCE8  20                 	db	32
   864  00FCE9  32                 	db	50	;'2'
   865  00FCEA  20                 	db	32
   866  00FCEB  20                 	db	32
   867  00FCEC  20                 	db	32
   868  00FCED  20                 	db	32
   869  00FCEE  20                 	db	32
   870  00FCEF  20                 	db	32
   871  00FCF0  20                 	db	32
   872  00FCF1  20                 	db	32
   873  00FCF2  20                 	db	32
   874  00FCF3  20                 	db	32
   875  00FCF4  20                 	db	32
   876  00FCF5  00                 	db	0
   877  00FCF6                     STR_44:
   878  00FCF6  4C                 	db	76	;'L'
   879  00FCF7  4F                 	db	79	;'O'
   880  00FCF8  47                 	db	71	;'G'
   881  00FCF9  20                 	db	32
   882  00FCFA  33                 	db	51	;'3'
   883  00FCFB  20                 	db	32
   884  00FCFC  20                 	db	32
   885  00FCFD  20                 	db	32
   886  00FCFE  20                 	db	32
   887  00FCFF  20                 	db	32
   888  00FD00  20                 	db	32
   889  00FD01  20                 	db	32
   890  00FD02  20                 	db	32
   891  00FD03  20                 	db	32
   892  00FD04  20                 	db	32
   893  00FD05  20                 	db	32
   894  00FD06  00                 	db	0
   895  00FD07                     STR_48:
   896  00FD07  4C                 	db	76	;'L'
   897  00FD08  4F                 	db	79	;'O'
   898  00FD09  47                 	db	71	;'G'
   899  00FD0A  20                 	db	32
   900  00FD0B  34                 	db	52	;'4'
   901  00FD0C  20                 	db	32
   902  00FD0D  20                 	db	32
   903  00FD0E  20                 	db	32
   904  00FD0F  20                 	db	32
   905  00FD10  20                 	db	32
   906  00FD11  20                 	db	32
   907  00FD12  20                 	db	32
   908  00FD13  20                 	db	32
   909  00FD14  20                 	db	32
   910  00FD15  20                 	db	32
   911  00FD16  20                 	db	32
   912  00FD17  00                 	db	0
   913  00FD18                     STR_36:
   914  00FD18  33                 	db	51	;'3'
   915  00FD19  2E                 	db	46
   916  00FD1A  20                 	db	32
   917  00FD1B  4C                 	db	76	;'L'
   918  00FD1C  4F                 	db	79	;'O'
   919  00FD1D  47                 	db	71	;'G'
   920  00FD1E  53                 	db	83	;'S'
   921  00FD1F  20                 	db	32
   922  00FD20  20                 	db	32
   923  00FD21  20                 	db	32
   924  00FD22  20                 	db	32
   925  00FD23  20                 	db	32
   926  00FD24  20                 	db	32
   927  00FD25  20                 	db	32
   928  00FD26  20                 	db	32
   929  00FD27  20                 	db	32
   930  00FD28  00                 	db	0
   931  00FD29                     STR_32:
   932  00FD29  32                 	db	50	;'2'
   933  00FD2A  2E                 	db	46
   934  00FD2B  20                 	db	32
   935  00FD2C  53                 	db	83	;'S'
   936  00FD2D  4F                 	db	79	;'O'
   937  00FD2E  52                 	db	82	;'R'
   938  00FD2F  54                 	db	84	;'T'
   939  00FD30  20                 	db	32
   940  00FD31  20                 	db	32
   941  00FD32  20                 	db	32
   942  00FD33  20                 	db	32
   943  00FD34  20                 	db	32
   944  00FD35  20                 	db	32
   945  00FD36  20                 	db	32
   946  00FD37  20                 	db	32
   947  00FD38  20                 	db	32
   948  00FD39  00                 	db	0
   949  00FD3A                     STR_33:
   950  00FD3A  31                 	db	49	;'1'
   951  00FD3B  2E                 	db	46
   952  00FD3C  20                 	db	32
   953  00FD3D  44                 	db	68	;'D'
   954  00FD3E  41                 	db	65	;'A'
   955  00FD3F  54                 	db	84	;'T'
   956  00FD40  45                 	db	69	;'E'
   957  00FD41  2F                 	db	47
   958  00FD42  54                 	db	84	;'T'
   959  00FD43  49                 	db	73	;'I'
   960  00FD44  4D                 	db	77	;'M'
   961  00FD45  45                 	db	69	;'E'
   962  00FD46  20                 	db	32
   963  00FD47  20                 	db	32
   964  00FD48  20                 	db	32
   965  00FD49  20                 	db	32
   966  00FD4A  00                 	db	0
   967  00FD4B                     STR_24:
   968  00FD4B  20                 	db	32
   969  00FD4C  2D                 	db	45
   970  00FD4D  2D                 	db	45
   971  00FD4E  20                 	db	32
   972  00FD4F  50                 	db	80	;'P'
   973  00FD50  4F                 	db	79	;'O'
   974  00FD51  50                 	db	80	;'P'
   975  00FD52  20                 	db	32
   976  00FD53  20                 	db	32
   977  00FD54  43                 	db	67	;'C'
   978  00FD55  41                 	db	65	;'A'
   979  00FD56  4E                 	db	78	;'N'
   980  00FD57  20                 	db	32
   981  00FD58  2D                 	db	45
   982  00FD59  2D                 	db	45
   983  00FD5A  20                 	db	32
   984  00FD5B  00                 	db	0
   985  00FD5C                     STR_26:
   986  00FD5C  20                 	db	32
   987  00FD5D  2D                 	db	45
   988  00FD5E  2D                 	db	45
   989  00FD5F  20                 	db	32
   990  00FD60  53                 	db	83	;'S'
   991  00FD61  4F                 	db	79	;'O'
   992  00FD62  55                 	db	85	;'U'
   993  00FD63  50                 	db	80	;'P'
   994  00FD64  20                 	db	32
   995  00FD65  43                 	db	67	;'C'
   996  00FD66  41                 	db	65	;'A'
   997  00FD67  4E                 	db	78	;'N'
   998  00FD68  20                 	db	32
   999  00FD69  2D                 	db	45
  1000  00FD6A  2D                 	db	45
  1001  00FD6B  20                 	db	32
  1002  00FD6C  00                 	db	0
  1003  00FD6D                     STR_28:
  1004  00FD6D  2D                 	db	45
  1005  00FD6E  2D                 	db	45
  1006  00FD6F  20                 	db	32
  1007  00FD70  54                 	db	84	;'T'
  1008  00FD71  4F                 	db	79	;'O'
  1009  00FD72  54                 	db	84	;'T'
  1010  00FD73  41                 	db	65	;'A'
  1011  00FD74  4C                 	db	76	;'L'
  1012  00FD75  20                 	db	32
  1013  00FD76  43                 	db	67	;'C'
  1014  00FD77  41                 	db	65	;'A'
  1015  00FD78  4E                 	db	78	;'N'
  1016  00FD79  53                 	db	83	;'S'
  1017  00FD7A  20                 	db	32
  1018  00FD7B  2D                 	db	45
  1019  00FD7C  2D                 	db	45
  1020  00FD7D  00                 	db	0
  1021  00FD7E                     STR_39:
  1022  00FD7E  4C                 	db	76	;'L'
  1023  00FD7F  4F                 	db	79	;'O'
  1024  00FD80  47                 	db	71	;'G'
  1025  00FD81  20                 	db	32
  1026  00FD82  31                 	db	49	;'1'
  1027  00FD83  20                 	db	32
  1028  00FD84  20                 	db	32
  1029  00FD85  20                 	db	32
  1030  00FD86  20                 	db	32
  1031  00FD87  20                 	db	32
  1032  00FD88  20                 	db	32
  1033  00FD89  20                 	db	32
  1034  00FD8A  20                 	db	32
  1035  00FD8B  20                 	db	32
  1036  00FD8C  20                 	db	32
  1037  00FD8D  3C                 	db	60	;'<'
  1038  00FD8E  00                 	db	0
  1039  00FD8F                     STR_42:
  1040  00FD8F  4C                 	db	76	;'L'
  1041  00FD90  4F                 	db	79	;'O'
  1042  00FD91  47                 	db	71	;'G'
  1043  00FD92  20                 	db	32
  1044  00FD93  32                 	db	50	;'2'
  1045  00FD94  20                 	db	32
  1046  00FD95  20                 	db	32
  1047  00FD96  20                 	db	32
  1048  00FD97  20                 	db	32
  1049  00FD98  20                 	db	32
  1050  00FD99  20                 	db	32
  1051  00FD9A  20                 	db	32
  1052  00FD9B  20                 	db	32
  1053  00FD9C  20                 	db	32
  1054  00FD9D  20                 	db	32
  1055  00FD9E  3C                 	db	60	;'<'
  1056  00FD9F  00                 	db	0
  1057  00FDA0                     STR_46:
  1058  00FDA0  4C                 	db	76	;'L'
  1059  00FDA1  4F                 	db	79	;'O'
  1060  00FDA2  47                 	db	71	;'G'
  1061  00FDA3  20                 	db	32
  1062  00FDA4  33                 	db	51	;'3'
  1063  00FDA5  20                 	db	32
  1064  00FDA6  20                 	db	32
  1065  00FDA7  20                 	db	32
  1066  00FDA8  20                 	db	32
  1067  00FDA9  20                 	db	32
  1068  00FDAA  20                 	db	32
  1069  00FDAB  20                 	db	32
  1070  00FDAC  20                 	db	32
  1071  00FDAD  20                 	db	32
  1072  00FDAE  20                 	db	32
  1073  00FDAF  3C                 	db	60	;'<'
  1074  00FDB0  00                 	db	0
  1075  00FDB1                     STR_50:
  1076  00FDB1  4C                 	db	76	;'L'
  1077  00FDB2  4F                 	db	79	;'O'
  1078  00FDB3  47                 	db	71	;'G'
  1079  00FDB4  20                 	db	32
  1080  00FDB5  34                 	db	52	;'4'
  1081  00FDB6  20                 	db	32
  1082  00FDB7  20                 	db	32
  1083  00FDB8  20                 	db	32
  1084  00FDB9  20                 	db	32
  1085  00FDBA  20                 	db	32
  1086  00FDBB  20                 	db	32
  1087  00FDBC  20                 	db	32
  1088  00FDBD  20                 	db	32
  1089  00FDBE  20                 	db	32
  1090  00FDBF  20                 	db	32
  1091  00FDC0  3C                 	db	60	;'<'
  1092  00FDC1  00                 	db	0
  1093  00FDC2                     STR_38:
  1094  00FDC2  33                 	db	51	;'3'
  1095  00FDC3  2E                 	db	46
  1096  00FDC4  20                 	db	32
  1097  00FDC5  4C                 	db	76	;'L'
  1098  00FDC6  4F                 	db	79	;'O'
  1099  00FDC7  47                 	db	71	;'G'
  1100  00FDC8  53                 	db	83	;'S'
  1101  00FDC9  20                 	db	32
  1102  00FDCA  20                 	db	32
  1103  00FDCB  20                 	db	32
  1104  00FDCC  20                 	db	32
  1105  00FDCD  20                 	db	32
  1106  00FDCE  20                 	db	32
  1107  00FDCF  20                 	db	32
  1108  00FDD0  20                 	db	32
  1109  00FDD1  3C                 	db	60	;'<'
  1110  00FDD2  00                 	db	0
  1111  00FDD3                     STR_34:
  1112  00FDD3  32                 	db	50	;'2'
  1113  00FDD4  2E                 	db	46
  1114  00FDD5  20                 	db	32
  1115  00FDD6  53                 	db	83	;'S'
  1116  00FDD7  4F                 	db	79	;'O'
  1117  00FDD8  52                 	db	82	;'R'
  1118  00FDD9  54                 	db	84	;'T'
  1119  00FDDA  20                 	db	32
  1120  00FDDB  20                 	db	32
  1121  00FDDC  20                 	db	32
  1122  00FDDD  20                 	db	32
  1123  00FDDE  20                 	db	32
  1124  00FDDF  20                 	db	32
  1125  00FDE0  20                 	db	32
  1126  00FDE1  20                 	db	32
  1127  00FDE2  3C                 	db	60	;'<'
  1128  00FDE3  00                 	db	0
  1129  00FDE4                     STR_31:
  1130  00FDE4  31                 	db	49	;'1'
  1131  00FDE5  2E                 	db	46
  1132  00FDE6  20                 	db	32
  1133  00FDE7  44                 	db	68	;'D'
  1134  00FDE8  41                 	db	65	;'A'
  1135  00FDE9  54                 	db	84	;'T'
  1136  00FDEA  45                 	db	69	;'E'
  1137  00FDEB  2F                 	db	47
  1138  00FDEC  54                 	db	84	;'T'
  1139  00FDED  49                 	db	73	;'I'
  1140  00FDEE  4D                 	db	77	;'M'
  1141  00FDEF  45                 	db	69	;'E'
  1142  00FDF0  20                 	db	32
  1143  00FDF1  20                 	db	32
  1144  00FDF2  20                 	db	32
  1145  00FDF3  3C                 	db	60	;'<'
  1146  00FDF4  00                 	db	0
  1147  00FDF5                     STR_6:
  1148  00FDF5  50                 	db	80	;'P'
  1149  00FDF6  41                 	db	65	;'A'
  1150  00FDF7  55                 	db	85	;'U'
  1151  00FDF8  53                 	db	83	;'S'
  1152  00FDF9  45                 	db	69	;'E'
  1153  00FDFA  20                 	db	32
  1154  00FDFB  3C                 	db	60	;'<'
  1155  00FDFC  20                 	db	32
  1156  00FDFD  7C                 	db	124
  1157  00FDFE  20                 	db	32
  1158  00FDFF  42                 	db	66	;'B'
  1159  00FE00  41                 	db	65	;'A'
  1160  00FE01  43                 	db	67	;'C'
  1161  00FE02  4B                 	db	75	;'K'
  1162  00FE03  20                 	db	32
  1163  00FE04  3E                 	db	62	;'>'
  1164  00FE05  00                 	db	0
  1165  00FE06                     STR_30:
  1166  00FE06  50                 	db	80	;'P'
  1167  00FE07  55                 	db	85	;'U'
  1168  00FE08  53                 	db	83	;'S'
  1169  00FE09  48                 	db	72	;'H'
  1170  00FE0A  20                 	db	32
  1171  00FE0B  54                 	db	84	;'T'
  1172  00FE0C  4F                 	db	79	;'O'
  1173  00FE0D  20                 	db	32
  1174  00FE0E  43                 	db	67	;'C'
  1175  00FE0F  4F                 	db	79	;'O'
  1176  00FE10  4E                 	db	78	;'N'
  1177  00FE11  54                 	db	84	;'T'
  1178  00FE12  49                 	db	73	;'I'
  1179  00FE13  4E                 	db	78	;'N'
  1180  00FE14  55                 	db	85	;'U'
  1181  00FE15  45                 	db	69	;'E'
  1182  00FE16  00                 	db	0
  1183  00FE17                     STR_27:
  1184  00FE17  4E                 	db	78	;'N'
  1185  00FE18  4C                 	db	76	;'L'
  1186  00FE19  41                 	db	65	;'A'
  1187  00FE1A  42                 	db	66	;'B'
  1188  00FE1B  3A                 	db	58	;':'
  1189  00FE1C  20                 	db	32
  1190  00FE1D  25                 	db	37
  1191  00FE1E  64                 	db	100	;'d'
  1192  00FE1F  7C                 	db	124
  1193  00FE20  4C                 	db	76	;'L'
  1194  00FE21  41                 	db	65	;'A'
  1195  00FE22  42                 	db	66	;'B'
  1196  00FE23  3A                 	db	58	;':'
  1197  00FE24  20                 	db	32
  1198  00FE25  25                 	db	37
  1199  00FE26  64                 	db	100	;'d'
  1200  00FE27  00                 	db	0
  1201  00FE28                     STR_25:
  1202  00FE28  4E                 	db	78	;'N'
  1203  00FE29  54                 	db	84	;'T'
  1204  00FE2A  41                 	db	65	;'A'
  1205  00FE2B  42                 	db	66	;'B'
  1206  00FE2C  3A                 	db	58	;':'
  1207  00FE2D  20                 	db	32
  1208  00FE2E  25                 	db	37
  1209  00FE2F  64                 	db	100	;'d'
  1210  00FE30  7C                 	db	124
  1211  00FE31  54                 	db	84	;'T'
  1212  00FE32  41                 	db	65	;'A'
  1213  00FE33  42                 	db	66	;'B'
  1214  00FE34  3A                 	db	58	;':'
  1215  00FE35  20                 	db	32
  1216  00FE36  25                 	db	37
  1217  00FE37  64                 	db	100	;'d'
  1218  00FE38  00                 	db	0
  1219  00FE39                     STR_84:
  1220  00FE39  4D                 	db	77	;'M'
  1221  00FE3A  41                 	db	65	;'A'
  1222  00FE3B  47                 	db	71	;'G'
  1223  00FE3C  5F                 	db	95	;'_'
  1224  00FE3D  73                 	db	115	;'s'
  1225  00FE3E  69                 	db	105	;'i'
  1226  00FE3F  67                 	db	103	;'g'
  1227  00FE40  6E                 	db	110	;'n'
  1228  00FE41  61                 	db	97	;'a'
  1229  00FE42  6C                 	db	108	;'l'
  1230  00FE43  3A                 	db	58	;':'
  1231  00FE44  20                 	db	32
  1232  00FE45  25                 	db	37
  1233  00FE46  64                 	db	100	;'d'
  1234  00FE47  20                 	db	32
  1235  00FE48  00                 	db	0
  1236  00FE49                     STR_104:
  1237  00FE49  54                 	db	84	;'T'
  1238  00FE4A  53                 	db	83	;'S'
  1239  00FE4B  54                 	db	84	;'T'
  1240  00FE4C  3A                 	db	58	;':'
  1241  00FE4D  20                 	db	32
  1242  00FE4E  54                 	db	84	;'T'
  1243  00FE4F  49                 	db	73	;'I'
  1244  00FE50  4C                 	db	76	;'L'
  1245  00FE51  54                 	db	84	;'T'
  1246  00FE52  20                 	db	32
  1247  00FE53  53                 	db	83	;'S'
  1248  00FE54  45                 	db	69	;'E'
  1249  00FE55  52                 	db	82	;'R'
  1250  00FE56  56                 	db	86	;'V'
  1251  00FE57  4F                 	db	79	;'O'
  1252  00FE58  00                 	db	0
  1253  00FE59                     STR_64:
  1254  00FE59  53                 	db	83	;'S'
  1255  00FE5A  4F                 	db	79	;'O'
  1256  00FE5B  52                 	db	82	;'R'
  1257  00FE5C  54                 	db	84	;'T'
  1258  00FE5D  49                 	db	73	;'I'
  1259  00FE5E  4E                 	db	78	;'N'
  1260  00FE5F  47                 	db	71	;'G'
  1261  00FE60  2E                 	db	46
  1262  00FE61  2E                 	db	46
  1263  00FE62  2E                 	db	46
  1264  00FE63  20                 	db	32
  1265  00FE64  20                 	db	32
  1266  00FE65  20                 	db	32
  1267  00FE66  20                 	db	32
  1268  00FE67  20                 	db	32
  1269  00FE68  00                 	db	0
  1270  00FE69                     STR_65:
  1271  00FE69  54                 	db	84	;'T'
  1272  00FE6A  49                 	db	73	;'I'
  1273  00FE6B  4D                 	db	77	;'M'
  1274  00FE6C  45                 	db	69	;'E'
  1275  00FE6D  20                 	db	32
  1276  00FE6E  25                 	db	37
  1277  00FE6F  64                 	db	100	;'d'
  1278  00FE70  3A                 	db	58	;':'
  1279  00FE71  25                 	db	37
  1280  00FE72  30                 	db	48	;'0'
  1281  00FE73  32                 	db	50	;'2'
  1282  00FE74  64                 	db	100	;'d'
  1283  00FE75  20                 	db	32
  1284  00FE76  20                 	db	32
  1285  00FE77  20                 	db	32
  1286  00FE78  00                 	db	0
  1287  00FE79                     STR_4:
  1288  00FE79  44                 	db	68	;'D'
  1289  00FE7A  49                 	db	73	;'I'
  1290  00FE7B  44                 	db	68	;'D'
  1291  00FE7C  4E                 	db	78	;'N'
  1292  00FE7D  27                 	db	39
  1293  00FE7E  54                 	db	84	;'T'
  1294  00FE7F  20                 	db	32
  1295  00FE80  43                 	db	67	;'C'
  1296  00FE81  4F                 	db	79	;'O'
  1297  00FE82  4D                 	db	77	;'M'
  1298  00FE83  50                 	db	80	;'P'
  1299  00FE84  4C                 	db	76	;'L'
  1300  00FE85  45                 	db	69	;'E'
  1301  00FE86  54                 	db	84	;'T'
  1302  00FE87  45                 	db	69	;'E'
  1303  00FE88  00                 	db	0
  1304  00FE89                     STR_121:
  1305  00FE89  44                 	db	68	;'D'
  1306  00FE8A  3A                 	db	58	;':'
  1307  00FE8B  52                 	db	82	;'R'
  1308  00FE8C  45                 	db	69	;'E'
  1309  00FE8D  54                 	db	84	;'T'
  1310  00FE8E  7C                 	db	124
  1311  00FE8F  32                 	db	50	;'2'
  1312  00FE90  3A                 	db	58	;':'
  1313  00FE91  43                 	db	67	;'C'
  1314  00FE92  20                 	db	32
  1315  00FE93  25                 	db	37
  1316  00FE94  64                 	db	100	;'d'
  1317  00FE95  20                 	db	32
  1318  00FE96  20                 	db	32
  1319  00FE97  00                 	db	0
  1320  00FE98                     STR_110:
  1321  00FE98  43                 	db	67	;'C'
  1322  00FE99  41                 	db	65	;'A'
  1323  00FE9A  4D                 	db	77	;'M'
  1324  00FE9B  20                 	db	32
  1325  00FE9C  44                 	db	68	;'D'
  1326  00FE9D  57                 	db	87	;'W'
  1327  00FE9E  4E                 	db	78	;'N'
  1328  00FE9F  20                 	db	32
  1329  00FEA0  7C                 	db	124
  1330  00FEA1  52                 	db	82	;'R'
  1331  00FEA2  43                 	db	67	;'C'
  1332  00FEA3  30                 	db	48	;'0'
  1333  00FEA4  3D                 	db	61	;'='
  1334  00FEA5  30                 	db	48	;'0'
  1335  00FEA6  00                 	db	0
  1336  00FEA7                     STR_109:
  1337  00FEA7  43                 	db	67	;'C'
  1338  00FEA8  41                 	db	65	;'A'
  1339  00FEA9  4D                 	db	77	;'M'
  1340  00FEAA  20                 	db	32
  1341  00FEAB  55                 	db	85	;'U'
  1342  00FEAC  50                 	db	80	;'P'
  1343  00FEAD  20                 	db	32
  1344  00FEAE  20                 	db	32
  1345  00FEAF  7C                 	db	124
  1346  00FEB0  52                 	db	82	;'R'
  1347  00FEB1  43                 	db	67	;'C'
  1348  00FEB2  30                 	db	48	;'0'
  1349  00FEB3  3D                 	db	61	;'='
  1350  00FEB4  31                 	db	49	;'1'
  1351  00FEB5  00                 	db	0
  1352  00FEB6                     STR_83:
  1353  00FEB6  54                 	db	84	;'T'
  1354  00FEB7  53                 	db	83	;'S'
  1355  00FEB8  54                 	db	84	;'T'
  1356  00FEB9  3A                 	db	58	;':'
  1357  00FEBA  20                 	db	32
  1358  00FEBB  4D                 	db	77	;'M'
  1359  00FEBC  41                 	db	65	;'A'
  1360  00FEBD  47                 	db	71	;'G'
  1361  00FEBE  4E                 	db	78	;'N'
  1362  00FEBF  45                 	db	69	;'E'
  1363  00FEC0  54                 	db	84	;'T'
  1364  00FEC1  49                 	db	73	;'I'
  1365  00FEC2  53                 	db	83	;'S'
  1366  00FEC3  4D                 	db	77	;'M'
  1367  00FEC4  00                 	db	0
  1368  00FEC5                     STR_108:
  1369  00FEC5  54                 	db	84	;'T'
  1370  00FEC6  53                 	db	83	;'S'
  1371  00FEC7  54                 	db	84	;'T'
  1372  00FEC8  3A                 	db	58	;':'
  1373  00FEC9  20                 	db	32
  1374  00FECA  43                 	db	67	;'C'
  1375  00FECB  41                 	db	65	;'A'
  1376  00FECC  4D                 	db	77	;'M'
  1377  00FECD  20                 	db	32
  1378  00FECE  53                 	db	83	;'S'
  1379  00FECF  45                 	db	69	;'E'
  1380  00FED0  52                 	db	82	;'R'
  1381  00FED1  56                 	db	86	;'V'
  1382  00FED2  4F                 	db	79	;'O'
  1383  00FED3  00                 	db	0
  1384  00FED4                     STR_97:
  1385  00FED4  54                 	db	84	;'T'
  1386  00FED5  53                 	db	83	;'S'
  1387  00FED6  54                 	db	84	;'T'
  1388  00FED7  3A                 	db	58	;':'
  1389  00FED8  20                 	db	32
  1390  00FED9  50                 	db	80	;'P'
  1391  00FEDA  41                 	db	65	;'A'
  1392  00FEDB  4E                 	db	78	;'N'
  1393  00FEDC  20                 	db	32
  1394  00FEDD  53                 	db	83	;'S'
  1395  00FEDE  45                 	db	69	;'E'
  1396  00FEDF  52                 	db	82	;'R'
  1397  00FEE0  56                 	db	86	;'V'
  1398  00FEE1  4F                 	db	79	;'O'
  1399  00FEE2  00                 	db	0
  1400  00FEE3                     STR_75:
  1401  00FEE3  41                 	db	65	;'A'
  1402  00FEE4  4C                 	db	76	;'L'
  1403  00FEE5  47                 	db	71	;'G'
  1404  00FEE6  34                 	db	52	;'4'
  1405  00FEE7  3A                 	db	58	;':'
  1406  00FEE8  20                 	db	32
  1407  00FEE9  41                 	db	65	;'A'
  1408  00FEEA  4C                 	db	76	;'L'
  1409  00FEEB  4C                 	db	76	;'L'
  1410  00FEEC  20                 	db	32
  1411  00FEED  43                 	db	67	;'C'
  1412  00FEEE  41                 	db	65	;'A'
  1413  00FEEF  4E                 	db	78	;'N'
  1414  00FEF0  53                 	db	83	;'S'
  1415  00FEF1  00                 	db	0
  1416  00FEF2                     STR_91:
  1417  00FEF2  54                 	db	84	;'T'
  1418  00FEF3  53                 	db	83	;'S'
  1419  00FEF4  54                 	db	84	;'T'
  1420  00FEF5  3A                 	db	58	;':'
  1421  00FEF6  20                 	db	32
  1422  00FEF7  44                 	db	68	;'D'
  1423  00FEF8  43                 	db	67	;'C'
  1424  00FEF9  20                 	db	32
  1425  00FEFA  4D                 	db	77	;'M'
  1426  00FEFB  4F                 	db	79	;'O'
  1427  00FEFC  54                 	db	84	;'T'
  1428  00FEFD  4F                 	db	79	;'O'
  1429  00FEFE  52                 	db	82	;'R'
  1430  00FEFF  53                 	db	83	;'S'
  1431  00FF00  00                 	db	0
  1432  00FF01                     STR_70:
  1433  00FF01  41                 	db	65	;'A'
  1434  00FF02  4C                 	db	76	;'L'
  1435  00FF03  47                 	db	71	;'G'
  1436  00FF04  4F                 	db	79	;'O'
  1437  00FF05  52                 	db	82	;'R'
  1438  00FF06  49                 	db	73	;'I'
  1439  00FF07  54                 	db	84	;'T'
  1440  00FF08  48                 	db	72	;'H'
  1441  00FF09  4D                 	db	77	;'M'
  1442  00FF0A  20                 	db	32
  1443  00FF0B  54                 	db	84	;'T'
  1444  00FF0C  45                 	db	69	;'E'
  1445  00FF0D  53                 	db	83	;'S'
  1446  00FF0E  54                 	db	84	;'T'
  1447  00FF0F  00                 	db	0
  1448  00FF10                     STR_92:
  1449  00FF10  50                 	db	80	;'P'
  1450  00FF11  49                 	db	73	;'I'
  1451  00FF12  4E                 	db	78	;'N'
  1452  00FF13  20                 	db	32
  1453  00FF14  52                 	db	82	;'R'
  1454  00FF15  41                 	db	65	;'A'
  1455  00FF16  35                 	db	53	;'5'
  1456  00FF17  20                 	db	32
  1457  00FF18  48                 	db	72	;'H'
  1458  00FF19  49                 	db	73	;'I'
  1459  00FF1A  47                 	db	71	;'G'
  1460  00FF1B  48                 	db	72	;'H'
  1461  00FF1C  2E                 	db	46
  1462  00FF1D  00                 	db	0
  1463  00FF1E                     STR_73:
  1464  00FF1E  41                 	db	65	;'A'
  1465  00FF1F  4C                 	db	76	;'L'
  1466  00FF20  47                 	db	71	;'G'
  1467  00FF21  32                 	db	50	;'2'
  1468  00FF22  3A                 	db	58	;':'
  1469  00FF23  20                 	db	32
  1470  00FF24  31                 	db	49	;'1'
  1471  00FF25  32                 	db	50	;'2'
  1472  00FF26  20                 	db	32
  1473  00FF27  43                 	db	67	;'C'
  1474  00FF28  41                 	db	65	;'A'
  1475  00FF29  4E                 	db	78	;'N'
  1476  00FF2A  53                 	db	83	;'S'
  1477  00FF2B  00                 	db	0
  1478  00FF2C                     STR_76:
  1479  00FF2C  41                 	db	65	;'A'
  1480  00FF2D  4C                 	db	76	;'L'
  1481  00FF2E  47                 	db	71	;'G'
  1482  00FF2F  35                 	db	53	;'5'
  1483  00FF30  3A                 	db	58	;':'
  1484  00FF31  20                 	db	32
  1485  00FF32  4E                 	db	78	;'N'
  1486  00FF33  4F                 	db	79	;'O'
  1487  00FF34  20                 	db	32
  1488  00FF35  43                 	db	67	;'C'
  1489  00FF36  41                 	db	65	;'A'
  1490  00FF37  4E                 	db	78	;'N'
  1491  00FF38  53                 	db	83	;'S'
  1492  00FF39  00                 	db	0
  1493  00FF3A                     STR_71:
  1494  00FF3A  50                 	db	80	;'P'
  1495  00FF3B  55                 	db	85	;'U'
  1496  00FF3C  53                 	db	83	;'S'
  1497  00FF3D  48                 	db	72	;'H'
  1498  00FF3E  20                 	db	32
  1499  00FF3F  54                 	db	84	;'T'
  1500  00FF40  4F                 	db	79	;'O'
  1501  00FF41  20                 	db	32
  1502  00FF42  53                 	db	83	;'S'
  1503  00FF43  54                 	db	84	;'T'
  1504  00FF44  41                 	db	65	;'A'
  1505  00FF45  52                 	db	82	;'R'
  1506  00FF46  54                 	db	84	;'T'
  1507  00FF47  00                 	db	0
  1508  00FF48                     STR_23:
  1509  00FF48  25                 	db	37
  1510  00FF49  64                 	db	100	;'d'
  1511  00FF4A  20                 	db	32
  1512  00FF4B  4D                 	db	77	;'M'
  1513  00FF4C  49                 	db	73	;'I'
  1514  00FF4D  4E                 	db	78	;'N'
  1515  00FF4E  20                 	db	32
  1516  00FF4F  25                 	db	37
  1517  00FF50  64                 	db	100	;'d'
  1518  00FF51  20                 	db	32
  1519  00FF52  53                 	db	83	;'S'
  1520  00FF53  45                 	db	69	;'E'
  1521  00FF54  43                 	db	67	;'C'
  1522  00FF55  00                 	db	0
  1523  00FF56                     STR_2:
  1524  00FF56  54                 	db	84	;'T'
  1525  00FF57  49                 	db	73	;'I'
  1526  00FF58  4D                 	db	77	;'M'
  1527  00FF59  45                 	db	69	;'E'
  1528  00FF5A  3A                 	db	58	;':'
  1529  00FF5B  20                 	db	32
  1530  00FF5C  25                 	db	37
  1531  00FF5D  64                 	db	100	;'d'
  1532  00FF5E  3A                 	db	58	;':'
  1533  00FF5F  25                 	db	37
  1534  00FF60  30                 	db	48	;'0'
  1535  00FF61  32                 	db	50	;'2'
  1536  00FF62  64                 	db	100	;'d'
  1537  00FF63  00                 	db	0
  1538  00FF64                     STR_74:
  1539  00FF64  41                 	db	65	;'A'
  1540  00FF65  4C                 	db	76	;'L'
  1541  00FF66  47                 	db	71	;'G'
  1542  00FF67  33                 	db	51	;'3'
  1543  00FF68  3A                 	db	58	;':'
  1544  00FF69  20                 	db	32
  1545  00FF6A  31                 	db	49	;'1'
  1546  00FF6B  20                 	db	32
  1547  00FF6C  43                 	db	67	;'C'
  1548  00FF6D  41                 	db	65	;'A'
  1549  00FF6E  4E                 	db	78	;'N'
  1550  00FF6F  00                 	db	0
  1551  00FF70                     STR_94:
  1552  00FF70  50                 	db	80	;'P'
  1553  00FF71  49                 	db	73	;'I'
  1554  00FF72  4E                 	db	78	;'N'
  1555  00FF73  20                 	db	32
  1556  00FF74  52                 	db	82	;'R'
  1557  00FF75  41                 	db	65	;'A'
  1558  00FF76  33                 	db	51	;'3'
  1559  00FF77  2E                 	db	46
  1560  00FF78  2E                 	db	46
  1561  00FF79  2E                 	db	46
  1562  00FF7A  00                 	db	0
  1563  00FF7B                     STR_96:
  1564  00FF7B  50                 	db	80	;'P'
  1565  00FF7C  49                 	db	73	;'I'
  1566  00FF7D  4E                 	db	78	;'N'
  1567  00FF7E  20                 	db	32
  1568  00FF7F  52                 	db	82	;'R'
  1569  00FF80  41                 	db	65	;'A'
  1570  00FF81  34                 	db	52	;'4'
  1571  00FF82  2E                 	db	46
  1572  00FF83  2E                 	db	46
  1573  00FF84  2E                 	db	46
  1574  00FF85  00                 	db	0
  1575  00FF86                     STR_85:
  1576  00FF86  54                 	db	84	;'T'
  1577  00FF87  53                 	db	83	;'S'
  1578  00FF88  54                 	db	84	;'T'
  1579  00FF89  3A                 	db	58	;':'
  1580  00FF8A  20                 	db	32
  1581  00FF8B  43                 	db	67	;'C'
  1582  00FF8C  4F                 	db	79	;'O'
  1583  00FF8D  4E                 	db	78	;'N'
  1584  00FF8E  44                 	db	68	;'D'
  1585  00FF8F  00                 	db	0
  1586  00FF90                     STR_89:
  1587  00FF90  41                 	db	65	;'A'
  1588  00FF91  43                 	db	67	;'C'
  1589  00FF92  54                 	db	84	;'T'
  1590  00FF93  55                 	db	85	;'U'
  1591  00FF94  41                 	db	65	;'A'
  1592  00FF95  54                 	db	84	;'T'
  1593  00FF96  4F                 	db	79	;'O'
  1594  00FF97  52                 	db	82	;'R'
  1595  00FF98  53                 	db	83	;'S'
  1596  00FF99  00                 	db	0
  1597  00FF9A                     STR_22:
  1598  00FF9A  44                 	db	68	;'D'
  1599  00FF9B  55                 	db	85	;'U'
  1600  00FF9C  52                 	db	82	;'R'
  1601  00FF9D  41                 	db	65	;'A'
  1602  00FF9E  54                 	db	84	;'T'
  1603  00FF9F  49                 	db	73	;'I'
  1604  00FFA0  4F                 	db	79	;'O'
  1605  00FFA1  4E                 	db	78	;'N'
  1606  00FFA2  3A                 	db	58	;':'
  1607  00FFA3  00                 	db	0
  1608  00FFA4                     STR_87:
  1609  00FFA4  43                 	db	67	;'C'
  1610  00FFA5  4F                 	db	79	;'O'
  1611  00FFA6  4E                 	db	78	;'N'
  1612  00FFA7  44                 	db	68	;'D'
  1613  00FFA8  3A                 	db	58	;':'
  1614  00FFA9  20                 	db	32
  1615  00FFAA  25                 	db	37
  1616  00FFAB  64                 	db	100	;'d'
  1617  00FFAC  00                 	db	0
  1618  00FFAD                     STR_77:
  1619  00FFAD  53                 	db	83	;'S'
  1620  00FFAE  45                 	db	69	;'E'
  1621  00FFAF  4E                 	db	78	;'N'
  1622  00FFB0  53                 	db	83	;'S'
  1623  00FFB1  4F                 	db	79	;'O'
  1624  00FFB2  52                 	db	82	;'R'
  1625  00FFB3  53                 	db	83	;'S'
  1626  00FFB4  00                 	db	0
  1627  00FFB5                     STR_129:
  1628  00FFB5  28                 	db	40
  1629  00FFB6  6E                 	db	110	;'n'
  1630  00FFB7  75                 	db	117	;'u'
  1631  00FFB8  6C                 	db	108	;'l'
  1632  00FFB9  6C                 	db	108	;'l'
  1633  00FFBA  29                 	db	41
  1634  00FFBB  00                 	db	0
  1635  00FFBC                     STR_67:
  1636  00FFBC  46                 	db	70	;'F'
  1637  00FFBD  41                 	db	65	;'A'
  1638  00FFBE  49                 	db	73	;'I'
  1639  00FFBF  4C                 	db	76	;'L'
  1640  00FFC0  45                 	db	69	;'E'
  1641  00FFC1  44                 	db	68	;'D'
  1642  00FFC2  00                 	db	0
  1643  00FFC3                     STR_7:
  1644  00FFC3  53                 	db	83	;'S'
  1645  00FFC4  54                 	db	84	;'T'
  1646  00FFC5  41                 	db	65	;'A'
  1647  00FFC6  52                 	db	82	;'R'
  1648  00FFC7  54                 	db	84	;'T'
  1649  00FFC8  3A                 	db	58	;':'
  1650  00FFC9  00                 	db	0
  1651  00FFCA                     STR_9:
  1652  00FFCA  46                 	db	70	;'F'
  1653  00FFCB  45                 	db	69	;'E'
  1654  00FFCC  42                 	db	66	;'B'
  1655  00FFCD  00                 	db	0
  1656  00FFCE                     STR_19:
  1657  00FFCE  44                 	db	68	;'D'
  1658  00FFCF  45                 	db	69	;'E'
  1659  00FFD0  43                 	db	67	;'C'
  1660  00FFD1  00                 	db	0
  1661  00FFD2                     STR_15:
  1662  00FFD2  41                 	db	65	;'A'
  1663  00FFD3  55                 	db	85	;'U'
  1664  00FFD4  47                 	db	71	;'G'
  1665  00FFD5  00                 	db	0
  1666  00FFD6                     STR_14:
  1667  00FFD6  4A                 	db	74	;'J'
  1668  00FFD7  55                 	db	85	;'U'
  1669  00FFD8  4C                 	db	76	;'L'
  1670  00FFD9  00                 	db	0
  1671  00FFDA                     STR_8:
  1672  00FFDA  4A                 	db	74	;'J'
  1673  00FFDB  41                 	db	65	;'A'
  1674  00FFDC  4E                 	db	78	;'N'
  1675  00FFDD  00                 	db	0
  1676  00FFDE                     STR_13:
  1677  00FFDE  4A                 	db	74	;'J'
  1678  00FFDF  55                 	db	85	;'U'
  1679  00FFE0  4E                 	db	78	;'N'
  1680  00FFE1  00                 	db	0
  1681  00FFE2                     STR_16:
  1682  00FFE2  53                 	db	83	;'S'
  1683  00FFE3  45                 	db	69	;'E'
  1684  00FFE4  50                 	db	80	;'P'
  1685  00FFE5  00                 	db	0
  1686  00FFE6                     STR_10:
  1687  00FFE6  4D                 	db	77	;'M'
  1688  00FFE7  41                 	db	65	;'A'
  1689  00FFE8  52                 	db	82	;'R'
  1690  00FFE9  00                 	db	0
  1691  00FFEA                     STR_11:
  1692  00FFEA  41                 	db	65	;'A'
  1693  00FFEB  50                 	db	80	;'P'
  1694  00FFEC  52                 	db	82	;'R'
  1695  00FFED  00                 	db	0
  1696  00FFEE                     STR_20:
  1697  00FFEE  45                 	db	69	;'E'
  1698  00FFEF  52                 	db	82	;'R'
  1699  00FFF0  52                 	db	82	;'R'
  1700  00FFF1  00                 	db	0
  1701  00FFF2                     STR_17:
  1702  00FFF2  4F                 	db	79	;'O'
  1703  00FFF3  43                 	db	67	;'C'
  1704  00FFF4  54                 	db	84	;'T'
  1705  00FFF5  00                 	db	0
  1706  00FFF6                     STR_18:
  1707  00FFF6  4E                 	db	78	;'N'
  1708  00FFF7  4F                 	db	79	;'O'
  1709  00FFF8  56                 	db	86	;'V'
  1710  00FFF9  00                 	db	0
  1711  00FFFA                     STR_12:
  1712  00FFFA  4D                 	db	77	;'M'
  1713  00FFFB  41                 	db	65	;'A'
  1714  00FFFC  59                 	db	89	;'Y'
  1715  00FFFD  00                 	db	0
  1716  0000                     
  1717                           ; #config settings
  1718  00FFFE  00                 	db	0	; dummy byte at the end
  1719  0000                     
  1720                           	psect	cinit
  1721  005932                     __pcinit:
  1722                           	opt stack 0
  1723  005932                     start_initialization:
  1724                           	opt stack 0
  1725  005932                     __initialization:
  1726                           	opt stack 0
  1727                           
  1728                           ; Initialize objects allocated to BANK1 (8 bytes)
  1729                           ; load TBLPTR registers with __pidataBANK1
  1730  005932  0E0E               	movlw	low __pidataBANK1
  1731  005934  6EF6               	movwf	tblptrl,c
  1732  005936  0E61               	movlw	high __pidataBANK1
  1733  005938  6EF7               	movwf	tblptrh,c
  1734  00593A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1735  00593C  6EF8               	movwf	tblptru,c
  1736  00593E  EE01  F04F         	lfsr	0,__pdataBANK1
  1737  005942  EE10 F008          	lfsr	1,8
  1738  005946                     copy_data0:
  1739  005946  0009               	tblrd		*+
  1740  005948  CFF5 FFEE          	movff	tablat,postinc0
  1741  00594C  50E5               	movf	postdec1,w,c
  1742  00594E  50E1               	movf	fsr1l,w,c
  1743  005950  E1FA               	bnz	copy_data0
  1744                           
  1745                           ; Clear objects allocated to BANK1 (79 bytes)
  1746  005952  EE01  F000         	lfsr	0,__pbssBANK1
  1747  005956  0E4F               	movlw	79
  1748  005958                     clear_0:
  1749  005958  6AEE               	clrf	postinc0,c
  1750  00595A  06E8               	decf	wreg,f,c
  1751  00595C  E1FD               	bnz	clear_0
  1752                           
  1753                           ; Clear objects allocated to BANK0 (38 bytes)
  1754  00595E  EE00  F0DA         	lfsr	0,__pbssBANK0
  1755  005962  0E26               	movlw	38
  1756  005964                     clear_1:
  1757  005964  6AEE               	clrf	postinc0,c
  1758  005966  06E8               	decf	wreg,f,c
  1759  005968  E1FD               	bnz	clear_1
  1760                           
  1761                           ; Clear objects allocated to COMRAM (37 bytes)
  1762  00596A  EE00  F059         	lfsr	0,__pbssCOMRAM
  1763  00596E  0E25               	movlw	37
  1764  005970                     clear_2:
  1765  005970  6AEE               	clrf	postinc0,c
  1766  005972  06E8               	decf	wreg,f,c
  1767  005974  E1FD               	bnz	clear_2
  1768  005976                     end_of_initialization:
  1769                           	opt stack 0
  1770  005976                     __end_of__initialization:
  1771                           	opt stack 0
  1772  005976  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1773  005978  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1774  00597A  0100               	movlb	0
  1775  00597C  EF65  F026         	goto	_main	;jump to C main() function
  1776                           tblptru	equ	0xFF8
  1777                           tblptrh	equ	0xFF7
  1778                           tblptrl	equ	0xFF6
  1779                           tablat	equ	0xFF5
  1780                           postinc0	equ	0xFEE
  1781                           wreg	equ	0xFE8
  1782                           postdec1	equ	0xFE5
  1783                           fsr1l	equ	0xFE1
  1784                           
  1785                           	psect	bssCOMRAM
  1786  000059                     __pbssCOMRAM:
  1787                           	opt stack 0
  1788  000059                     _back:
  1789                           	opt stack 0
  1790  000059                     	ds	2
  1791  00005B                     _count_can_no_lab:
  1792                           	opt stack 0
  1793  00005B                     	ds	2
  1794  00005D                     _count_can_w_lab:
  1795                           	opt stack 0
  1796  00005D                     	ds	2
  1797  00005F                     _count_pop_no_tab:
  1798                           	opt stack 0
  1799  00005F                     	ds	2
  1800  000061                     _count_pop_w_tab:
  1801                           	opt stack 0
  1802  000061                     	ds	2
  1803  000063                     _down:
  1804                           	opt stack 0
  1805  000063                     	ds	2
  1806  000065                     _enter:
  1807                           	opt stack 0
  1808  000065                     	ds	2
  1809  000067                     _f_panning_to_bin:
  1810                           	opt stack 0
  1811  000067                     	ds	2
  1812  000069                     _log_count_pop_w_tab:
  1813                           	opt stack 0
  1814  000069                     	ds	2
  1815  00006B                     _pan_servo_state:
  1816                           	opt stack 0
  1817  00006B                     	ds	2
  1818  00006D                     _servo_timer_counter:
  1819                           	opt stack 0
  1820  00006D                     	ds	2
  1821  00006F                     _servo_timer_target:
  1822                           	opt stack 0
  1823  00006F                     	ds	2
  1824  000071                     _tilt_servo_state:
  1825                           	opt stack 0
  1826  000071                     	ds	2
  1827  000073                     _timer2_counter:
  1828                           	opt stack 0
  1829  000073                     	ds	2
  1830  000075                     _up:
  1831                           	opt stack 0
  1832  000075                     	ds	2
  1833  000077                     _was_low_1:
  1834                           	opt stack 0
  1835  000077                     	ds	2
  1836  000079                     _was_low_2:
  1837                           	opt stack 0
  1838  000079                     	ds	2
  1839  00007B                     _was_low_3:
  1840                           	opt stack 0
  1841  00007B                     	ds	2
  1842  00007D                     _input:
  1843                           	opt stack 0
  1844  00007D                     	ds	1
  1845                           tblptru	equ	0xFF8
  1846                           tblptrh	equ	0xFF7
  1847                           tblptrl	equ	0xFF6
  1848                           tablat	equ	0xFF5
  1849                           postinc0	equ	0xFEE
  1850                           wreg	equ	0xFE8
  1851                           postdec1	equ	0xFE5
  1852                           fsr1l	equ	0xFE1
  1853                           
  1854                           	psect	bssBANK0
  1855  0000DA                     __pbssBANK0:
  1856                           	opt stack 0
  1857  0000DA                     _sensor_outputs:
  1858                           	opt stack 0
  1859  0000DA                     	ds	4
  1860  0000DE                     _COND_signal:
  1861                           	opt stack 0
  1862  0000DE                     	ds	2
  1863  0000E0                     _IR_res:
  1864                           	opt stack 0
  1865  0000E0                     	ds	2
  1866  0000E2                     _IR_signal:
  1867                           	opt stack 0
  1868  0000E2                     	ds	2
  1869  0000E4                     _MAG_signal:
  1870                           	opt stack 0
  1871  0000E4                     	ds	2
  1872  0000E6                     _RTCflag:
  1873                           	opt stack 0
  1874  0000E6                     	ds	2
  1875  0000E8                     _cur_state:
  1876                           	opt stack 0
  1877  0000E8                     	ds	2
  1878  0000EA                     _f_arm_position:
  1879                           	opt stack 0
  1880  0000EA                     	ds	2
  1881  0000EC                     _f_lastCan:
  1882                           	opt stack 0
  1883  0000EC                     	ds	2
  1884  0000EE                     _f_loadingNewCan:
  1885                           	opt stack 0
  1886  0000EE                     	ds	2
  1887  0000F0                     _log:
  1888                           	opt stack 0
  1889  0000F0                     	ds	2
  1890  0000F2                     _log_completion:
  1891                           	opt stack 0
  1892  0000F2                     	ds	2
  1893  0000F4                     _log_count_pop_no_tab:
  1894                           	opt stack 0
  1895  0000F4                     	ds	2
  1896  0000F6                     _log_total_time:
  1897                           	opt stack 0
  1898  0000F6                     	ds	2
  1899  0000F8                     _logstate:
  1900                           	opt stack 0
  1901  0000F8                     	ds	2
  1902  0000FA                     _total_time:
  1903                           	opt stack 0
  1904  0000FA                     	ds	2
  1905  0000FC                     _machine_state:
  1906                           	opt stack 0
  1907  0000FC                     	ds	1
  1908  0000FD                     _sel:
  1909                           	opt stack 0
  1910  0000FD                     	ds	1
  1911  0000FE                     _count_total:
  1912                           	opt stack 0
  1913  0000FE                     	ds	2
  1914                           tblptru	equ	0xFF8
  1915                           tblptrh	equ	0xFF7
  1916                           tblptrl	equ	0xFF6
  1917                           tablat	equ	0xFF5
  1918                           postinc0	equ	0xFEE
  1919                           wreg	equ	0xFE8
  1920                           postdec1	equ	0xFE5
  1921                           fsr1l	equ	0xFE1
  1922                           
  1923                           	psect	bssBANK1
  1924  000100                     __pbssBANK1:
  1925                           	opt stack 0
  1926  000100                     _log_startTime:
  1927                           	opt stack 0
  1928  000100                     	ds	14
  1929  00010E                     _startTime:
  1930                           	opt stack 0
  1931  00010E                     	ds	14
  1932  00011C                     _servoTimes:
  1933                           	opt stack 0
  1934  00011C                     	ds	8
  1935  000124                     _time:
  1936                           	opt stack 0
  1937  000124                     	ds	7
  1938  00012B                     _agitator_toggle_count:
  1939                           	opt stack 0
  1940  00012B                     	ds	2
  1941  00012D                     _cur_can:
  1942                           	opt stack 0
  1943  00012D                     	ds	2
  1944  00012F                     _debug:
  1945                           	opt stack 0
  1946  00012F                     	ds	2
  1947  000131                     _f_ID_receive:
  1948                           	opt stack 0
  1949  000131                     	ds	2
  1950  000133                     _f_can_coming_to_ID:
  1951                           	opt stack 0
  1952  000133                     	ds	2
  1953  000135                     _f_can_coming_to_distribution:
  1954                           	opt stack 0
  1955  000135                     	ds	2
  1956  000137                     _f_can_distributed:
  1957                           	opt stack 0
  1958  000137                     	ds	2
  1959  000139                     _f_most_recent_sort_time:
  1960                           	opt stack 0
  1961  000139                     	ds	2
  1962  00013B                     _first:
  1963                           	opt stack 0
  1964  00013B                     	ds	2
  1965  00013D                     _firstboot:
  1966                           	opt stack 0
  1967  00013D                     	ds	2
  1968  00013F                     _i:
  1969                           	opt stack 0
  1970  00013F                     	ds	2
  1971  000141                     _log_count_can_no_lab:
  1972                           	opt stack 0
  1973  000141                     	ds	2
  1974  000143                     _log_count_can_w_lab:
  1975                           	opt stack 0
  1976  000143                     	ds	2
  1977  000145                     _log_count_total:
  1978                           	opt stack 0
  1979  000145                     	ds	2
  1980  000147                     _most_recent_sort_time:
  1981                           	opt stack 0
  1982  000147                     	ds	2
  1983  000149                     _motor_toggle_count:
  1984                           	opt stack 0
  1985  000149                     	ds	2
  1986  00014B                     _time_recent_agitator:
  1987                           	opt stack 0
  1988  00014B                     	ds	2
  1989  00014D                     _var:
  1990                           	opt stack 0
  1991  00014D                     	ds	2
  1992                           tblptru	equ	0xFF8
  1993                           tblptrh	equ	0xFF7
  1994                           tblptrl	equ	0xFF6
  1995                           tablat	equ	0xFF5
  1996                           postinc0	equ	0xFEE
  1997                           wreg	equ	0xFE8
  1998                           postdec1	equ	0xFE5
  1999                           fsr1l	equ	0xFE1
  2000                           
  2001                           	psect	dataBANK1
  2002  00014F                     __pdataBANK1:
  2003                           	opt stack 0
  2004  00014F                     UI@F3252:
  2005                           	opt stack 0
  2006  00014F                     	ds	4
  2007  000153                     printRTC@F3242:
  2008                           	opt stack 0
  2009  000153                     	ds	4
  2010                           tblptru	equ	0xFF8
  2011                           tblptrh	equ	0xFF7
  2012                           tblptrl	equ	0xFF6
  2013                           tablat	equ	0xFF5
  2014                           postinc0	equ	0xFEE
  2015                           wreg	equ	0xFE8
  2016                           postdec1	equ	0xFE5
  2017                           fsr1l	equ	0xFE1
  2018                           
  2019                           	psect	cstackBANK0
  2020  000080                     __pcstackBANK0:
  2021                           	opt stack 0
  2022  000080                     ??_delay_ms:
  2023  000080                     ??_isdigit:
  2024  000080                     ??_readADC:
  2025  000080                     ??_I2C_Master_Wait:
  2026  000080                     ?___wmul:
  2027                           	opt stack 0
  2028  000080                     ?___awmod:
  2029                           	opt stack 0
  2030  000080                     ?___lwdiv:
  2031                           	opt stack 0
  2032  000080                     ?___ftpack:
  2033                           	opt stack 0
  2034  000080                     ?___lldiv:
  2035                           	opt stack 0
  2036  000080                     lcdNibble@temp:
  2037                           	opt stack 0
  2038  000080                     initTime@m:
  2039                           	opt stack 0
  2040  000080                     initGlobalVars@time_recent_agitator:
  2041                           	opt stack 0
  2042  000080                     updateServoPosition@time_us:
  2043                           	opt stack 0
  2044  000080                     EEPROM_read@address:
  2045                           	opt stack 0
  2046  000080                     ___wmul@multiplier:
  2047                           	opt stack 0
  2048  000080                     ___awmod@dividend:
  2049                           	opt stack 0
  2050  000080                     ___lwdiv@dividend:
  2051                           	opt stack 0
  2052  000080                     strcpy@to:
  2053                           	opt stack 0
  2054  000080                     ___ftpack@arg:
  2055                           	opt stack 0
  2056  000080                     ___lldiv@dividend:
  2057                           	opt stack 0
  2058                           
  2059                           ; 4 bytes @ 0x0
  2060  000080                     	ds	1
  2061  000081                     readADC@channel:
  2062                           	opt stack 0
  2063  000081                     I2C_Master_Read@a:
  2064                           	opt stack 0
  2065  000081                     lcdNibble@data:
  2066                           	opt stack 0
  2067  000081                     initTime@h:
  2068                           	opt stack 0
  2069  000081                     delay_ms@milliseconds:
  2070                           	opt stack 0
  2071  000081                     _isdigit$2081:
  2072                           	opt stack 0
  2073  000081                     I2C_Master_Write@d:
  2074                           	opt stack 0
  2075                           
  2076                           ; 2 bytes @ 0x1
  2077  000081                     	ds	1
  2078  000082                     ??_readMAG:
  2079  000082                     ??_readCOND:
  2080  000082                     I2C_Master_Read@temp:
  2081                           	opt stack 0
  2082  000082                     lcdInst@data:
  2083                           	opt stack 0
  2084  000082                     putch@data:
  2085                           	opt stack 0
  2086  000082                     initTime@w:
  2087                           	opt stack 0
  2088  000082                     isdigit@c:
  2089                           	opt stack 0
  2090  000082                     readIR@ana_port:
  2091                           	opt stack 0
  2092  000082                     updateServoPosition@timer:
  2093                           	opt stack 0
  2094  000082                     ___wmul@multiplicand:
  2095                           	opt stack 0
  2096  000082                     ___awmod@divisor:
  2097                           	opt stack 0
  2098  000082                     ___lwdiv@divisor:
  2099                           	opt stack 0
  2100  000082                     strcpy@from:
  2101                           	opt stack 0
  2102                           
  2103                           ; 2 bytes @ 0x2
  2104  000082                     	ds	1
  2105  000083                     ??_initLCD:
  2106  000083                     initTime@DD:
  2107                           	opt stack 0
  2108  000083                     ___ftpack@exp:
  2109                           	opt stack 0
  2110  000083                     getRTC@i:
  2111                           	opt stack 0
  2112                           
  2113                           ; 2 bytes @ 0x3
  2114  000083                     	ds	1
  2115  000084                     ??_updateServoPosition:
  2116  000084                     ??_readIR:
  2117  000084                     initTime@MM:
  2118                           	opt stack 0
  2119  000084                     ___awmod@counter:
  2120                           	opt stack 0
  2121  000084                     ___ftpack@sign:
  2122                           	opt stack 0
  2123  000084                     readMAG@res:
  2124                           	opt stack 0
  2125  000084                     readCOND@res:
  2126                           	opt stack 0
  2127  000084                     ___wmul@product:
  2128                           	opt stack 0
  2129  000084                     ___lwdiv@quotient:
  2130                           	opt stack 0
  2131  000084                     strcpy@cp:
  2132                           	opt stack 0
  2133  000084                     ___lldiv@divisor:
  2134                           	opt stack 0
  2135                           
  2136                           ; 4 bytes @ 0x4
  2137  000084                     	ds	1
  2138  000085                     ??_initSortTimer:
  2139  000085                     ??___ftpack:
  2140  000085                     initTime@YY:
  2141                           	opt stack 0
  2142  000085                     ___awmod@sign:
  2143                           	opt stack 0
  2144                           
  2145                           ; 1 bytes @ 0x5
  2146  000085                     	ds	1
  2147  000086                     ??_getMAG:
  2148  000086                     ?___awdiv:
  2149                           	opt stack 0
  2150  000086                     initTime@s:
  2151                           	opt stack 0
  2152  000086                     ___lwdiv@counter:
  2153                           	opt stack 0
  2154  000086                     getIR@port:
  2155                           	opt stack 0
  2156  000086                     updateServoPosition@my_time:
  2157                           	opt stack 0
  2158  000086                     ___awdiv@dividend:
  2159                           	opt stack 0
  2160                           
  2161                           ; 2 bytes @ 0x6
  2162  000086                     	ds	1
  2163  000087                     ?___lwmod:
  2164                           	opt stack 0
  2165  000087                     ___lwmod@dividend:
  2166                           	opt stack 0
  2167                           
  2168                           ; 2 bytes @ 0x7
  2169  000087                     	ds	1
  2170  000088                     ??_Distribution:
  2171  000088                     ??_initServos:
  2172  000088                     ??_getIR:
  2173  000088                     initSortTimer@i:
  2174                           	opt stack 0
  2175  000088                     ___awdiv@divisor:
  2176                           	opt stack 0
  2177  000088                     ___lldiv@quotient:
  2178                           	opt stack 0
  2179                           
  2180                           ; 4 bytes @ 0x8
  2181  000088                     	ds	1
  2182  000089                     getIR@i:
  2183                           	opt stack 0
  2184  000089                     ___lwmod@divisor:
  2185                           	opt stack 0
  2186                           
  2187                           ; 2 bytes @ 0x9
  2188  000089                     	ds	1
  2189  00008A                     ___awdiv@counter:
  2190                           	opt stack 0
  2191                           
  2192                           ; 1 bytes @ 0xA
  2193  00008A                     	ds	1
  2194  00008B                     ___awdiv@sign:
  2195                           	opt stack 0
  2196  00008B                     ___lwmod@counter:
  2197                           	opt stack 0
  2198                           
  2199                           ; 1 bytes @ 0xB
  2200  00008B                     	ds	1
  2201  00008C                     ___lldiv@counter:
  2202                           	opt stack 0
  2203  00008C                     ___awdiv@quotient:
  2204                           	opt stack 0
  2205                           
  2206                           ; 2 bytes @ 0xC
  2207  00008C                     	ds	1
  2208  00008D                     I2C_Master_Init@c:
  2209                           	opt stack 0
  2210                           
  2211                           ; 4 bytes @ 0xD
  2212  00008D                     	ds	1
  2213  00008E                     ?_printf:
  2214                           	opt stack 0
  2215  00008E                     ?___awtoft:
  2216                           	opt stack 0
  2217  00008E                     printf@f:
  2218                           	opt stack 0
  2219  00008E                     ___awtoft@c:
  2220                           	opt stack 0
  2221                           
  2222                           ; 2 bytes @ 0xE
  2223  00008E                     	ds	3
  2224  000091                     ??_I2C_Master_Init:
  2225  000091                     ___awtoft@sign:
  2226                           	opt stack 0
  2227                           
  2228                           ; 1 bytes @ 0x11
  2229  000091                     	ds	1
  2230  000092                     ___ftge@ff1:
  2231                           	opt stack 0
  2232                           
  2233                           ; 3 bytes @ 0x12
  2234  000092                     	ds	3
  2235  000095                     ??_loadRTC:
  2236  000095                     ___ftge@ff2:
  2237                           	opt stack 0
  2238                           
  2239                           ; 3 bytes @ 0x15
  2240  000095                     	ds	1
  2241  000096                     loadRTC@i:
  2242                           	opt stack 0
  2243                           
  2244                           ; 2 bytes @ 0x16
  2245  000096                     	ds	2
  2246  000098                     ??___ftge:
  2247                           
  2248                           ; 1 bytes @ 0x18
  2249  000098                     	ds	2
  2250  00009A                     ??_printf:
  2251                           
  2252                           ; 1 bytes @ 0x1A
  2253  00009A                     	ds	1
  2254  00009B                     ??_ID:
  2255                           
  2256                           ; 1 bytes @ 0x1B
  2257  00009B                     	ds	2
  2258  00009D                     ID@reflectivity1:
  2259                           	opt stack 0
  2260                           
  2261                           ; 2 bytes @ 0x1D
  2262  00009D                     	ds	1
  2263  00009E                     printf@prec:
  2264                           	opt stack 0
  2265                           
  2266                           ; 1 bytes @ 0x1E
  2267  00009E                     	ds	1
  2268  00009F                     ID@cond1:
  2269                           	opt stack 0
  2270  00009F                     printf@cp:
  2271                           	opt stack 0
  2272                           
  2273                           ; 2 bytes @ 0x1F
  2274  00009F                     	ds	2
  2275  0000A1                     ID@reflectivity2:
  2276                           	opt stack 0
  2277  0000A1                     printf@ap:
  2278                           	opt stack 0
  2279                           
  2280                           ; 2 bytes @ 0x21
  2281  0000A1                     	ds	2
  2282  0000A3                     ID@time_1154:
  2283                           	opt stack 0
  2284  0000A3                     printf@len:
  2285                           	opt stack 0
  2286                           
  2287                           ; 2 bytes @ 0x23
  2288  0000A3                     	ds	1
  2289  0000A4                     _ID$1144:
  2290                           	opt stack 0
  2291                           
  2292                           ; 1 bytes @ 0x24
  2293  0000A4                     	ds	1
  2294  0000A5                     _ID$1153:
  2295                           	opt stack 0
  2296  0000A5                     printf@val:
  2297                           	opt stack 0
  2298                           
  2299                           ; 2 bytes @ 0x25
  2300  0000A5                     	ds	1
  2301  0000A6                     _ID$1158:
  2302                           	opt stack 0
  2303                           
  2304                           ; 1 bytes @ 0x26
  2305  0000A6                     	ds	1
  2306  0000A7                     _ID$1160:
  2307                           	opt stack 0
  2308  0000A7                     printf@flag:
  2309                           	opt stack 0
  2310                           
  2311                           ; 1 bytes @ 0x27
  2312  0000A7                     	ds	1
  2313  0000A8                     _ID$1161:
  2314                           	opt stack 0
  2315  0000A8                     printf@c:
  2316                           	opt stack 0
  2317                           
  2318                           ; 1 bytes @ 0x28
  2319  0000A8                     	ds	1
  2320  0000A9                     ID@i:
  2321                           	opt stack 0
  2322  0000A9                     printf@width:
  2323                           	opt stack 0
  2324                           
  2325                           ; 2 bytes @ 0x29
  2326  0000A9                     	ds	2
  2327  0000AB                     ??_printRTC:
  2328  0000AB                     ??_algorithmTest:
  2329  0000AB                     ??_sensorTest:
  2330  0000AB                     ??_actuatorTest:
  2331  0000AB                     ??_arm:
  2332  0000AB                     ??_PortTestDC:
  2333  0000AB                     ??_SpeedTest:
  2334  0000AB                     ??_PortTestPusher:
  2335  0000AB                     ??_PlatformTest:
  2336  0000AB                     ??_BothServos:
  2337  0000AB                     ??_BlockerTest:
  2338  0000AB                     ID@i_1152:
  2339                           	opt stack 0
  2340  0000AB                     EEPROM_write@address:
  2341                           	opt stack 0
  2342                           
  2343                           ; 2 bytes @ 0x2B
  2344  0000AB                     	ds	1
  2345  0000AC                     arm@on:
  2346                           	opt stack 0
  2347                           
  2348                           ; 2 bytes @ 0x2C
  2349  0000AC                     	ds	1
  2350  0000AD                     EEPROM_write@data:
  2351                           	opt stack 0
  2352  0000AD                     actuatorTest@i_1756:
  2353                           	opt stack 0
  2354  0000AD                     ID@i_1157:
  2355                           	opt stack 0
  2356  0000AD                     sensorTest@res:
  2357                           	opt stack 0
  2358  0000AD                     PlatformTest@res:
  2359                           	opt stack 0
  2360  0000AD                     BlockerTest@i:
  2361                           	opt stack 0
  2362                           
  2363                           ; 2 bytes @ 0x2D
  2364  0000AD                     	ds	1
  2365  0000AE                     ??_EEPROM_write:
  2366  0000AE                     actuatorTest@i_1763:
  2367                           	opt stack 0
  2368  0000AE                     printRTC@INT_time:
  2369                           	opt stack 0
  2370                           
  2371                           ; 14 bytes @ 0x2E
  2372  0000AE                     	ds	1
  2373  0000AF                     EEPROM_write@i:
  2374                           	opt stack 0
  2375  0000AF                     actuatorTest@i_1764:
  2376                           	opt stack 0
  2377  0000AF                     ID@i_1163:
  2378                           	opt stack 0
  2379  0000AF                     sensorTest@res_1733:
  2380                           	opt stack 0
  2381  0000AF                     PlatformTest@res_1808:
  2382                           	opt stack 0
  2383  0000AF                     BlockerTest@res:
  2384                           	opt stack 0
  2385                           
  2386                           ; 2 bytes @ 0x2F
  2387  0000AF                     	ds	1
  2388  0000B0                     EEPROM_write@i_1421:
  2389                           	opt stack 0
  2390  0000B0                     actuatorTest@i_1766:
  2391                           	opt stack 0
  2392                           
  2393                           ; 1 bytes @ 0x30
  2394  0000B0                     	ds	1
  2395  0000B1                     ??_Loading:
  2396  0000B1                     ID@time:
  2397                           	opt stack 0
  2398  0000B1                     logRun@num:
  2399                           	opt stack 0
  2400  0000B1                     actuatorTest@i_1767:
  2401                           	opt stack 0
  2402  0000B1                     PlatformTest@i:
  2403                           	opt stack 0
  2404  0000B1                     BlockerTest@cam_flag:
  2405                           	opt stack 0
  2406                           
  2407                           ; 2 bytes @ 0x31
  2408  0000B1                     	ds	1
  2409  0000B2                     logRun@byte1:
  2410                           	opt stack 0
  2411  0000B2                     actuatorTest@i_1769:
  2412                           	opt stack 0
  2413  0000B2                     ID@res1:
  2414                           	opt stack 0
  2415                           
  2416                           ; 2 bytes @ 0x32
  2417  0000B2                     	ds	1
  2418  0000B3                     logRun@byte2:
  2419                           	opt stack 0
  2420  0000B3                     actuatorTest@i_1770:
  2421                           	opt stack 0
  2422  0000B3                     Loading@addr:
  2423                           	opt stack 0
  2424  0000B3                     PlatformTest@i_1812:
  2425                           	opt stack 0
  2426  0000B3                     BlockerTest@cond_flag:
  2427                           	opt stack 0
  2428                           
  2429                           ; 2 bytes @ 0x33
  2430  0000B3                     	ds	1
  2431  0000B4                     logRun@byte3:
  2432                           	opt stack 0
  2433  0000B4                     actuatorTest@i_1772:
  2434                           	opt stack 0
  2435  0000B4                     ID@res2:
  2436                           	opt stack 0
  2437                           
  2438                           ; 2 bytes @ 0x34
  2439  0000B4                     	ds	1
  2440  0000B5                     Loading@byte1:
  2441                           	opt stack 0
  2442  0000B5                     logRun@byte_i:
  2443                           	opt stack 0
  2444  0000B5                     actuatorTest@i_1773:
  2445                           	opt stack 0
  2446  0000B5                     PlatformTest@on:
  2447                           	opt stack 0
  2448                           
  2449                           ; 2 bytes @ 0x35
  2450  0000B5                     	ds	1
  2451  0000B6                     _Loading$1138:
  2452                           	opt stack 0
  2453  0000B6                     logRun@byte11:
  2454                           	opt stack 0
  2455  0000B6                     actuatorTest@i_1775:
  2456                           	opt stack 0
  2457  0000B6                     ID@res:
  2458                           	opt stack 0
  2459                           
  2460                           ; 4 bytes @ 0x36
  2461  0000B6                     	ds	1
  2462  0000B7                     actuatorTest@i_1776:
  2463                           	opt stack 0
  2464  0000B7                     Loading@i_1127:
  2465                           	opt stack 0
  2466  0000B7                     logRun@i:
  2467                           	opt stack 0
  2468                           
  2469                           ; 2 bytes @ 0x37
  2470  0000B7                     	ds	1
  2471  0000B8                     actuatorTest@i_1778:
  2472                           	opt stack 0
  2473                           
  2474                           ; 1 bytes @ 0x38
  2475  0000B8                     	ds	1
  2476  0000B9                     actuatorTest@i_1779:
  2477                           	opt stack 0
  2478  0000B9                     Loading@i_1136:
  2479                           	opt stack 0
  2480  0000B9                     logRun@addr:
  2481                           	opt stack 0
  2482                           
  2483                           ; 2 bytes @ 0x39
  2484  0000B9                     	ds	1
  2485  0000BA                     actuatorTest@i_1782:
  2486                           	opt stack 0
  2487  0000BA                     ID@i_1164:
  2488                           	opt stack 0
  2489                           
  2490                           ; 2 bytes @ 0x3A
  2491  0000BA                     	ds	1
  2492  0000BB                     actuatorTest@i_1783:
  2493                           	opt stack 0
  2494  0000BB                     Loading@i_1139:
  2495                           	opt stack 0
  2496                           
  2497                           ; 2 bytes @ 0x3B
  2498  0000BB                     	ds	1
  2499  0000BC                     actuatorTest@i_1785:
  2500                           	opt stack 0
  2501  0000BC                     printRTC@RTC_month:
  2502                           	opt stack 0
  2503  0000BC                     ID@j:
  2504                           	opt stack 0
  2505                           
  2506                           ; 2 bytes @ 0x3C
  2507  0000BC                     	ds	1
  2508  0000BD                     actuatorTest@i_1786:
  2509                           	opt stack 0
  2510  0000BD                     Loading@i_1140:
  2511                           	opt stack 0
  2512                           
  2513                           ; 2 bytes @ 0x3D
  2514  0000BD                     	ds	1
  2515  0000BE                     actuatorTest@i_1788:
  2516                           	opt stack 0
  2517  0000BE                     ID@n:
  2518                           	opt stack 0
  2519  0000BE                     printRTC@month:
  2520                           	opt stack 0
  2521                           
  2522                           ; 4 bytes @ 0x3E
  2523  0000BE                     	ds	1
  2524  0000BF                     actuatorTest@i_1789:
  2525                           	opt stack 0
  2526  0000BF                     Loading@i_1142:
  2527                           	opt stack 0
  2528                           
  2529                           ; 2 bytes @ 0x3F
  2530  0000BF                     	ds	1
  2531  0000C0                     actuatorTest@i_1792:
  2532                           	opt stack 0
  2533                           
  2534                           ; 1 bytes @ 0x40
  2535  0000C0                     	ds	1
  2536  0000C1                     actuatorTest@i_1793:
  2537                           	opt stack 0
  2538  0000C1                     Loading@i:
  2539                           	opt stack 0
  2540                           
  2541                           ; 2 bytes @ 0x41
  2542  0000C1                     	ds	1
  2543  0000C2                     actuatorTest@i_1795:
  2544                           	opt stack 0
  2545  0000C2                     printRTC@i:
  2546                           	opt stack 0
  2547                           
  2548                           ; 2 bytes @ 0x42
  2549  0000C2                     	ds	1
  2550  0000C3                     actuatorTest@i_1796:
  2551                           	opt stack 0
  2552  0000C3                     Loading@j:
  2553                           	opt stack 0
  2554                           
  2555                           ; 2 bytes @ 0x43
  2556  0000C3                     	ds	1
  2557  0000C4                     ??_UI:
  2558  0000C4                     actuatorTest@i:
  2559                           	opt stack 0
  2560                           
  2561                           ; 2 bytes @ 0x44
  2562  0000C4                     	ds	1
  2563  0000C5                     
  2564                           ; 1 bytes @ 0x45
  2565  0000C5                     	ds	1
  2566  0000C6                     ??_Test:
  2567  0000C6                     _UI$2443:
  2568                           	opt stack 0
  2569                           
  2570                           ; 2 bytes @ 0x46
  2571  0000C6                     	ds	2
  2572  0000C8                     UI@i:
  2573                           	opt stack 0
  2574                           
  2575                           ; 1 bytes @ 0x48
  2576  0000C8                     	ds	1
  2577  0000C9                     UI@i_413:
  2578                           	opt stack 0
  2579                           
  2580                           ; 1 bytes @ 0x49
  2581  0000C9                     	ds	1
  2582  0000CA                     UI@i_416:
  2583                           	opt stack 0
  2584                           
  2585                           ; 1 bytes @ 0x4A
  2586  0000CA                     	ds	1
  2587  0000CB                     UI@i_417:
  2588                           	opt stack 0
  2589                           
  2590                           ; 1 bytes @ 0x4B
  2591  0000CB                     	ds	1
  2592  0000CC                     UI@i_435:
  2593                           	opt stack 0
  2594                           
  2595                           ; 1 bytes @ 0x4C
  2596  0000CC                     	ds	1
  2597  0000CD                     UI@i_436:
  2598                           	opt stack 0
  2599                           
  2600                           ; 1 bytes @ 0x4D
  2601  0000CD                     	ds	1
  2602  0000CE                     UI@i_439:
  2603                           	opt stack 0
  2604                           
  2605                           ; 1 bytes @ 0x4E
  2606  0000CE                     	ds	1
  2607  0000CF                     UI@i_440:
  2608                           	opt stack 0
  2609                           
  2610                           ; 1 bytes @ 0x4F
  2611  0000CF                     	ds	1
  2612  0000D0                     UI@i_443:
  2613                           	opt stack 0
  2614                           
  2615                           ; 1 bytes @ 0x50
  2616  0000D0                     	ds	1
  2617  0000D1                     UI@i_444:
  2618                           	opt stack 0
  2619                           
  2620                           ; 1 bytes @ 0x51
  2621  0000D1                     	ds	1
  2622  0000D2                     UI@i_447:
  2623                           	opt stack 0
  2624                           
  2625                           ; 1 bytes @ 0x52
  2626  0000D2                     	ds	1
  2627  0000D3                     UI@i_448:
  2628                           	opt stack 0
  2629                           
  2630                           ; 1 bytes @ 0x53
  2631  0000D3                     	ds	1
  2632  0000D4                     UI@i_451:
  2633                           	opt stack 0
  2634                           
  2635                           ; 1 bytes @ 0x54
  2636  0000D4                     	ds	1
  2637  0000D5                     UI@i_452:
  2638                           	opt stack 0
  2639                           
  2640                           ; 1 bytes @ 0x55
  2641  0000D5                     	ds	1
  2642  0000D6                     UI@month:
  2643                           	opt stack 0
  2644                           
  2645                           ; 4 bytes @ 0x56
  2646  0000D6                     	ds	4
  2647  0000DA                     tblptru	equ	0xFF8
  2648                           tblptrh	equ	0xFF7
  2649                           tblptrl	equ	0xFF6
  2650                           tablat	equ	0xFF5
  2651                           postinc0	equ	0xFEE
  2652                           wreg	equ	0xFE8
  2653                           postdec1	equ	0xFE5
  2654                           fsr1l	equ	0xFE1
  2655                           
  2656                           ; 1 bytes @ 0x5A
  2657                           
  2658                           	psect	cstackCOMRAM
  2659  000001                     __pcstackCOMRAM:
  2660                           	opt stack 0
  2661  000001                     ??_updateArmState:
  2662  000001                     ??i2_I2C_Master_Wait:
  2663  000001                     ??i2_isdigit:
  2664  000001                     ?i2___wmul:
  2665                           	opt stack 0
  2666  000001                     ?i2___awmod:
  2667                           	opt stack 0
  2668  000001                     ?i2___lwmod:
  2669                           	opt stack 0
  2670  000001                     i2lcdNibble@temp:
  2671                           	opt stack 0
  2672  000001                     i2updateServoPosition@time_us:
  2673                           	opt stack 0
  2674  000001                     i2EEPROM_read@address:
  2675                           	opt stack 0
  2676  000001                     i2___wmul@multiplier:
  2677                           	opt stack 0
  2678  000001                     i2___awmod@dividend:
  2679                           	opt stack 0
  2680  000001                     i2___lwmod@dividend:
  2681                           	opt stack 0
  2682  000001                     i2strcpy@to:
  2683                           	opt stack 0
  2684                           
  2685                           ; 2 bytes @ 0x0
  2686  000001                     	ds	1
  2687  000002                     i2I2C_Master_Read@a:
  2688                           	opt stack 0
  2689  000002                     i2lcdNibble@data:
  2690                           	opt stack 0
  2691  000002                     i2_isdigit$2081:
  2692                           	opt stack 0
  2693  000002                     i2I2C_Master_Write@d:
  2694                           	opt stack 0
  2695                           
  2696                           ; 2 bytes @ 0x1
  2697  000002                     	ds	1
  2698  000003                     i2I2C_Master_Read@temp:
  2699                           	opt stack 0
  2700  000003                     i2lcdInst@data:
  2701                           	opt stack 0
  2702  000003                     i2putch@data:
  2703                           	opt stack 0
  2704  000003                     i2isdigit@c:
  2705                           	opt stack 0
  2706  000003                     i2updateServoPosition@timer:
  2707                           	opt stack 0
  2708  000003                     i2___wmul@multiplicand:
  2709                           	opt stack 0
  2710  000003                     i2___awmod@divisor:
  2711                           	opt stack 0
  2712  000003                     i2___lwmod@divisor:
  2713                           	opt stack 0
  2714  000003                     i2strcpy@from:
  2715                           	opt stack 0
  2716                           
  2717                           ; 2 bytes @ 0x2
  2718  000003                     	ds	1
  2719  000004                     i2getRTC@i:
  2720                           	opt stack 0
  2721                           
  2722                           ; 2 bytes @ 0x3
  2723  000004                     	ds	1
  2724  000005                     ??i2_updateServoPosition:
  2725  000005                     i2___awmod@counter:
  2726                           	opt stack 0
  2727  000005                     i2___lwmod@counter:
  2728                           	opt stack 0
  2729  000005                     i2___wmul@product:
  2730                           	opt stack 0
  2731  000005                     i2strcpy@cp:
  2732                           	opt stack 0
  2733                           
  2734                           ; 2 bytes @ 0x4
  2735  000005                     	ds	1
  2736  000006                     ?i2___lwdiv:
  2737                           	opt stack 0
  2738  000006                     i2___awmod@sign:
  2739                           	opt stack 0
  2740  000006                     i2___lwdiv@dividend:
  2741                           	opt stack 0
  2742                           
  2743                           ; 2 bytes @ 0x5
  2744  000006                     	ds	1
  2745  000007                     retrieveLog@logNum:
  2746                           	opt stack 0
  2747  000007                     i2updateServoPosition@my_time:
  2748                           	opt stack 0
  2749                           
  2750                           ; 2 bytes @ 0x6
  2751  000007                     	ds	1
  2752  000008                     i2___lwdiv@divisor:
  2753                           	opt stack 0
  2754                           
  2755                           ; 2 bytes @ 0x7
  2756  000008                     	ds	1
  2757  000009                     ??_retrieveLog:
  2758  000009                     ??_updateServoStates:
  2759                           
  2760                           ; 1 bytes @ 0x8
  2761  000009                     	ds	1
  2762  00000A                     i2___lwdiv@quotient:
  2763                           	opt stack 0
  2764                           
  2765                           ; 2 bytes @ 0x9
  2766  00000A                     	ds	1
  2767  00000B                     retrieveLog@byte1:
  2768                           	opt stack 0
  2769                           
  2770                           ; 1 bytes @ 0xA
  2771  00000B                     	ds	1
  2772  00000C                     retrieveLog@byte2:
  2773                           	opt stack 0
  2774  00000C                     i2___lwdiv@counter:
  2775                           	opt stack 0
  2776                           
  2777                           ; 1 bytes @ 0xB
  2778  00000C                     	ds	1
  2779  00000D                     ?i2_printf:
  2780                           	opt stack 0
  2781  00000D                     retrieveLog@byte3:
  2782                           	opt stack 0
  2783  00000D                     i2printf@f:
  2784                           	opt stack 0
  2785                           
  2786                           ; 2 bytes @ 0xC
  2787  00000D                     	ds	1
  2788  00000E                     retrieveLog@i:
  2789                           	opt stack 0
  2790                           
  2791                           ; 2 bytes @ 0xD
  2792  00000E                     	ds	2
  2793  000010                     retrieveLog@addr:
  2794                           	opt stack 0
  2795                           
  2796                           ; 2 bytes @ 0xF
  2797  000010                     	ds	2
  2798  000012                     dispLogs@myLog:
  2799                           	opt stack 0
  2800                           
  2801                           ; 2 bytes @ 0x11
  2802  000012                     	ds	2
  2803  000014                     
  2804                           ; 1 bytes @ 0x13
  2805  000014                     	ds	5
  2806  000019                     ??i2_printf:
  2807                           
  2808                           ; 1 bytes @ 0x18
  2809  000019                     	ds	4
  2810  00001D                     i2printf@prec:
  2811                           	opt stack 0
  2812                           
  2813                           ; 1 bytes @ 0x1C
  2814  00001D                     	ds	1
  2815  00001E                     i2printf@cp:
  2816                           	opt stack 0
  2817                           
  2818                           ; 2 bytes @ 0x1D
  2819  00001E                     	ds	2
  2820  000020                     i2printf@ap:
  2821                           	opt stack 0
  2822                           
  2823                           ; 2 bytes @ 0x1F
  2824  000020                     	ds	2
  2825  000022                     i2printf@len:
  2826                           	opt stack 0
  2827                           
  2828                           ; 2 bytes @ 0x21
  2829  000022                     	ds	2
  2830  000024                     i2printf@val:
  2831                           	opt stack 0
  2832                           
  2833                           ; 2 bytes @ 0x23
  2834  000024                     	ds	2
  2835  000026                     i2printf@flag:
  2836                           	opt stack 0
  2837                           
  2838                           ; 1 bytes @ 0x25
  2839  000026                     	ds	1
  2840  000027                     i2printf@c:
  2841                           	opt stack 0
  2842                           
  2843                           ; 1 bytes @ 0x26
  2844  000027                     	ds	1
  2845  000028                     i2printf@width:
  2846                           	opt stack 0
  2847                           
  2848                           ; 2 bytes @ 0x27
  2849  000028                     	ds	2
  2850  00002A                     ??_printSortTimer:
  2851  00002A                     ??i2_printRTC:
  2852  00002A                     ?_inputHandler:
  2853                           	opt stack 0
  2854                           
  2855                           ; 2 bytes @ 0x29
  2856  00002A                     	ds	2
  2857  00002C                     ??_inputHandler:
  2858                           
  2859                           ; 1 bytes @ 0x2B
  2860  00002C                     	ds	1
  2861  00002D                     printSortTimer@curTime:
  2862                           	opt stack 0
  2863  00002D                     i2printRTC@INT_time:
  2864                           	opt stack 0
  2865                           
  2866                           ; 14 bytes @ 0x2C
  2867  00002D                     	ds	14
  2868  00003B                     printSortTimer@start_sec:
  2869                           	opt stack 0
  2870  00003B                     i2printRTC@RTC_month:
  2871                           	opt stack 0
  2872                           
  2873                           ; 2 bytes @ 0x3A
  2874  00003B                     	ds	2
  2875  00003D                     printSortTimer@cur_sec:
  2876                           	opt stack 0
  2877  00003D                     i2printRTC@month:
  2878                           	opt stack 0
  2879                           
  2880                           ; 4 bytes @ 0x3C
  2881  00003D                     	ds	2
  2882  00003F                     printSortTimer@min:
  2883                           	opt stack 0
  2884                           
  2885                           ; 2 bytes @ 0x3E
  2886  00003F                     	ds	2
  2887  000041                     printSortTimer@sec:
  2888                           	opt stack 0
  2889  000041                     i2printRTC@i:
  2890                           	opt stack 0
  2891                           
  2892                           ; 2 bytes @ 0x40
  2893  000041                     	ds	2
  2894  000043                     ??_updateMenu:
  2895  000043                     _printSortTimer$2578:
  2896                           	opt stack 0
  2897                           
  2898                           ; 2 bytes @ 0x42
  2899  000043                     	ds	2
  2900  000045                     printSortTimer@timeDiff:
  2901                           	opt stack 0
  2902                           
  2903                           ; 2 bytes @ 0x44
  2904  000045                     	ds	2
  2905  000047                     printSortTimer@i:
  2906                           	opt stack 0
  2907                           
  2908                           ; 2 bytes @ 0x46
  2909  000047                     	ds	2
  2910  000049                     ??_handler:
  2911                           
  2912                           ; 1 bytes @ 0x48
  2913  000049                     	ds	16
  2914                           tblptru	equ	0xFF8
  2915                           tblptrh	equ	0xFF7
  2916                           tblptrl	equ	0xFF6
  2917                           tablat	equ	0xFF5
  2918                           postinc0	equ	0xFEE
  2919                           wreg	equ	0xFE8
  2920                           postdec1	equ	0xFE5
  2921                           fsr1l	equ	0xFE1
  2922                           
  2923 ;;
  2924 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2925 ;;
  2926 ;; *************** function _main *****************
  2927 ;; Defined at:
  2928 ;;		line 19 in file "main.c"
  2929 ;; Parameters:    Size  Location     Type
  2930 ;;		None
  2931 ;; Auto vars:     Size  Location     Type
  2932 ;;		None
  2933 ;; Return value:  Size  Location     Type
  2934 ;;                  1    wreg      void 
  2935 ;; Registers used:
  2936 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2937 ;; Tracked objects:
  2938 ;;		On entry : 0/0
  2939 ;;		On exit  : 0/0
  2940 ;;		Unchanged: 0/0
  2941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2946 ;;Total ram usage:        0 bytes
  2947 ;; Hardware stack levels required when called:   13
  2948 ;; This function calls:
  2949 ;;		_I2C_Master_Init
  2950 ;;		_Test
  2951 ;;		_UI
  2952 ;;		_initEEPROM
  2953 ;;		_initLCD
  2954 ;;		_initTime
  2955 ;;		_initUI
  2956 ;;		_logRun
  2957 ;;		_machineConfig
  2958 ;;		_sort
  2959 ;;		_stopSignals
  2960 ;; This function is called by:
  2961 ;;		Startup code after reset
  2962 ;; This function uses a non-reentrant model
  2963 ;;
  2964                           
  2965                           	psect	text0
  2966  004CCA                     __ptext0:
  2967                           	opt stack 0
  2968  004CCA                     _main:
  2969                           	opt stack 18
  2970                           
  2971                           ;main.c: 20: machineConfig();
  2972                           
  2973                           ;incstack = 0
  2974  004CCA  EC82  F02B         	call	_machineConfig	;wreg free
  2975                           
  2976                           ;main.c: 21: initLCD();
  2977  004CCE  EC0C  F02D         	call	_initLCD	;wreg free
  2978                           
  2979                           ;main.c: 24: RTCflag = 0;
  2980  004CD2  0E00               	movlw	0
  2981  004CD4  0100               	movlb	0	; () banked
  2982  004CD6  6FE7               	movwf	(_RTCflag+1)& (0+255),b
  2983  004CD8  0E00               	movlw	0
  2984  004CDA  6FE6               	movwf	_RTCflag& (0+255),b
  2985                           
  2986                           ;main.c: 25: if(RTCflag){
  2987  004CDC  0100               	movlb	0	; () banked
  2988  004CDE  51E6               	movf	_RTCflag& (0+255),w,b
  2989  004CE0  0100               	movlb	0	; () banked
  2990  004CE2  11E7               	iorwf	(_RTCflag+1)& (0+255),w,b
  2991  004CE4  B4D8               	btfsc	status,2,c
  2992  004CE6  D016               	goto	l10578
  2993                           
  2994                           ; BSR set to: 0
  2995                           ;main.c: 26: initTime(0x42, 0x47, 0x17, 0x07, 0x08, 0x04, 0x17);
  2996  004CE8  0E47               	movlw	71
  2997  004CEA  0100               	movlb	0	; () banked
  2998  004CEC  6F80               	movwf	initTime@m& (0+255),b
  2999  004CEE  0E17               	movlw	23
  3000  004CF0  0100               	movlb	0	; () banked
  3001  004CF2  6F81               	movwf	initTime@h& (0+255),b
  3002  004CF4  0E07               	movlw	7
  3003  004CF6  0100               	movlb	0	; () banked
  3004  004CF8  6F82               	movwf	initTime@w& (0+255),b
  3005  004CFA  0E08               	movlw	8
  3006  004CFC  0100               	movlb	0	; () banked
  3007  004CFE  6F83               	movwf	initTime@DD& (0+255),b
  3008  004D00  0E04               	movlw	4
  3009  004D02  0100               	movlb	0	; () banked
  3010  004D04  6F84               	movwf	initTime@MM& (0+255),b
  3011  004D06  0E17               	movlw	23
  3012  004D08  0100               	movlb	0	; () banked
  3013  004D0A  6F85               	movwf	initTime@YY& (0+255),b
  3014  004D0C  0E42               	movlw	66
  3015  004D0E  ECFE  F02F         	call	_initTime
  3016                           
  3017                           ;main.c: 27: }
  3018  004D12  D00B               	goto	l10580
  3019  004D14                     l10578:
  3020                           
  3021                           ;main.c: 28: else{
  3022                           ;main.c: 29: I2C_Master_Init(10000);
  3023  004D14  0E10               	movlw	16
  3024  004D16  0100               	movlb	0	; () banked
  3025  004D18  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3026  004D1A  0E27               	movlw	39
  3027  004D1C  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3028  004D1E  0E00               	movlw	0
  3029  004D20  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3030  004D22  0E00               	movlw	0
  3031  004D24  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3032  004D26  ECE5  F02B         	call	_I2C_Master_Init	;wreg free
  3033  004D2A                     l10580:
  3034                           
  3035                           ;main.c: 30: }
  3036                           ;main.c: 32: initUI();
  3037  004D2A  EC2E  F02E         	call	_initUI	;wreg free
  3038                           
  3039                           ;main.c: 33: first = 1;
  3040  004D2E  0E00               	movlw	0
  3041  004D30  0101               	movlb	1	; () banked
  3042  004D32  6F3C               	movwf	(_first+1)& (0+255),b
  3043  004D34  0E01               	movlw	1
  3044  004D36  6F3B               	movwf	_first& (0+255),b
  3045                           
  3046                           ; BSR set to: 1
  3047                           ;main.c: 34: initEEPROM();
  3048  004D38  EC38  F030         	call	_initEEPROM	;wreg free
  3049                           
  3050                           ;main.c: 45: switch(machine_state){
  3051                           
  3052                           ;main.c: 44: while(1){
  3053  004D3C  D018               	goto	l10604
  3054  004D3E                     l10586:
  3055                           
  3056                           ;main.c: 47: UI();
  3057  004D3E  EC09  F000         	call	_UI	;wreg free
  3058                           
  3059                           ;main.c: 48: break;
  3060  004D42  D015               	goto	l10604
  3061  004D44                     l10588:
  3062                           
  3063                           ;main.c: 50: sort();
  3064  004D44  ECED  F02F         	call	_sort	;wreg free
  3065                           
  3066                           ;main.c: 51: break;
  3067  004D48  D012               	goto	l10604
  3068  004D4A                     l10590:
  3069                           
  3070                           ;main.c: 53: stopSignals();
  3071  004D4A  EC1E  F030         	call	_stopSignals	;wreg free
  3072                           
  3073                           ;main.c: 54: logRun();
  3074  004D4E  EC87  F021         	call	_logRun	;wreg free
  3075                           
  3076                           ;main.c: 55: first = 1;
  3077  004D52  0E00               	movlw	0
  3078  004D54  0101               	movlb	1	; () banked
  3079  004D56  6F3C               	movwf	(_first+1)& (0+255),b
  3080  004D58  0E01               	movlw	1
  3081  004D5A  6F3B               	movwf	_first& (0+255),b
  3082                           
  3083                           ; BSR set to: 1
  3084                           ;main.c: 56: UI();
  3085  004D5C  EC09  F000         	call	_UI	;wreg free
  3086                           
  3087                           ;main.c: 57: break;
  3088  004D60  D006               	goto	l10604
  3089  004D62                     l10598:
  3090                           
  3091                           ;main.c: 59: Test();
  3092  004D62  EC3D  F023         	call	_Test	;wreg free
  3093                           
  3094                           ;main.c: 60: break;
  3095  004D66  D003               	goto	l10604
  3096  004D68                     l10600:
  3097                           
  3098                           ;main.c: 62: stopSignals();
  3099  004D68  EC1E  F030         	call	_stopSignals	;wreg free
  3100  004D6C                     l515:
  3101  004D6C  D7FF               	goto	l515
  3102  004D6E                     l10604:
  3103  004D6E  0100               	movlb	0	; () banked
  3104  004D70  51FC               	movf	_machine_state& (0+255),w,b
  3105                           
  3106                           ; Switch size 1, requested type "space"
  3107                           ; Number of cases is 5, Range of values is 0 to 4
  3108                           ; switch strategies available:
  3109                           ; Name         Instructions Cycles
  3110                           ; simple_byte           16     9 (average)
  3111                           ;	Chosen strategy is simple_byte
  3112  004D72  0A00               	xorlw	0	; case 0
  3113  004D74  B4D8               	btfsc	status,2,c
  3114  004D76  D7E3               	goto	l10586
  3115  004D78  0A01               	xorlw	1	; case 1
  3116  004D7A  B4D8               	btfsc	status,2,c
  3117  004D7C  D7E3               	goto	l10588
  3118  004D7E  0A03               	xorlw	3	; case 2
  3119  004D80  B4D8               	btfsc	status,2,c
  3120  004D82  D7E3               	goto	l10590
  3121  004D84  0A01               	xorlw	1	; case 3
  3122  004D86  B4D8               	btfsc	status,2,c
  3123  004D88  D7EC               	goto	l10598
  3124  004D8A  0A07               	xorlw	7	; case 4
  3125  004D8C  B4D8               	btfsc	status,2,c
  3126  004D8E  D7EC               	goto	l10600
  3127                           
  3128                           ; BSR set to: 0
  3129                           
  3130                           ; BSR set to: 0
  3131  004D90  D7EE               	goto	l10604
  3132  004D92                     __end_of_main:
  3133                           	opt stack 0
  3134                           tblptru	equ	0xFF8
  3135                           tblptrh	equ	0xFF7
  3136                           tblptrl	equ	0xFF6
  3137                           tablat	equ	0xFF5
  3138                           postinc0	equ	0xFEE
  3139                           wreg	equ	0xFE8
  3140                           postdec1	equ	0xFE5
  3141                           fsr1l	equ	0xFE1
  3142                           status	equ	0xFD8
  3143                           
  3144 ;; *************** function _sort *****************
  3145 ;; Defined at:
  3146 ;;		line 73 in file "sort.c"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;		None
  3149 ;; Auto vars:     Size  Location     Type
  3150 ;;		None
  3151 ;; Return value:  Size  Location     Type
  3152 ;;                  1    wreg      void 
  3153 ;; Registers used:
  3154 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3155 ;; Tracked objects:
  3156 ;;		On entry : 0/0
  3157 ;;		On exit  : 0/0
  3158 ;;		Unchanged: 0/0
  3159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3164 ;;Total ram usage:        0 bytes
  3165 ;; Hardware stack levels used:    1
  3166 ;; Hardware stack levels required when called:   12
  3167 ;; This function calls:
  3168 ;;		_Distribution
  3169 ;;		_ID
  3170 ;;		_Loading
  3171 ;; This function is called by:
  3172 ;;		_main
  3173 ;; This function uses a non-reentrant model
  3174 ;;
  3175                           
  3176                           	psect	text1
  3177  005FDA                     __ptext1:
  3178                           	opt stack 0
  3179  005FDA                     _sort:
  3180                           	opt stack 18
  3181                           
  3182                           ;sort.c: 74: if(machine_state == Sorting_state){
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;incstack = 0
  3186  005FDA  0100               	movlb	0	; () banked
  3187  005FDC  05FC               	decf	_machine_state& (0+255),w,b
  3188  005FDE  B4D8               	btfsc	status,2,c
  3189                           
  3190                           ; BSR set to: 0
  3191                           ;sort.c: 75: Loading();
  3192  005FE0  ECEA  F00B         	call	_Loading	;wreg free
  3193                           
  3194                           ;sort.c: 76: }
  3195                           ;sort.c: 77: if(machine_state == Sorting_state){
  3196  005FE4  0100               	movlb	0	; () banked
  3197  005FE6  05FC               	decf	_machine_state& (0+255),w,b
  3198  005FE8  B4D8               	btfsc	status,2,c
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;sort.c: 78: ID();
  3202  005FEA  ECC9  F008         	call	_ID	;wreg free
  3203                           
  3204                           ;sort.c: 79: }
  3205                           ;sort.c: 80: if(machine_state == Sorting_state){
  3206  005FEE  0100               	movlb	0	; () banked
  3207  005FF0  05FC               	decf	_machine_state& (0+255),w,b
  3208  005FF2  A4D8               	btfss	status,2,c
  3209  005FF4  0012               	return	
  3210                           
  3211                           ; BSR set to: 0
  3212                           ;sort.c: 81: Distribution();
  3213  005FF6  ECB3  F024         	call	_Distribution	;wreg free
  3214  005FFA  0012               	return	
  3215  005FFC                     __end_of_sort:
  3216                           	opt stack 0
  3217                           tblptru	equ	0xFF8
  3218                           tblptrh	equ	0xFF7
  3219                           tblptrl	equ	0xFF6
  3220                           tablat	equ	0xFF5
  3221                           postinc0	equ	0xFEE
  3222                           wreg	equ	0xFE8
  3223                           postdec1	equ	0xFE5
  3224                           fsr1l	equ	0xFE1
  3225                           status	equ	0xFD8
  3226                           
  3227 ;; *************** function _Loading *****************
  3228 ;; Defined at:
  3229 ;;		line 85 in file "sort.c"
  3230 ;; Parameters:    Size  Location     Type
  3231 ;;		None
  3232 ;; Auto vars:     Size  Location     Type
  3233 ;;  i               2   63[BANK0 ] int 
  3234 ;;  i               2   61[BANK0 ] int 
  3235 ;;  i               2   59[BANK0 ] int 
  3236 ;;  i               2   57[BANK0 ] int 
  3237 ;;  i               2   55[BANK0 ] int 
  3238 ;;  j               2   67[BANK0 ] int 
  3239 ;;  i               2   65[BANK0 ] int 
  3240 ;;  addr            2   51[BANK0 ] unsigned short 
  3241 ;;  byte1           1   53[BANK0 ] unsigned char 
  3242 ;; Return value:  Size  Location     Type
  3243 ;;                  1    wreg      void 
  3244 ;; Registers used:
  3245 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3246 ;; Tracked objects:
  3247 ;;		On entry : 0/0
  3248 ;;		On exit  : 0/0
  3249 ;;		Unchanged: 0/0
  3250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3252 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3253 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3254 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3255 ;;Total ram usage:       20 bytes
  3256 ;; Hardware stack levels used:    1
  3257 ;; Hardware stack levels required when called:   11
  3258 ;; This function calls:
  3259 ;;		_EEPROM_read
  3260 ;;		_EEPROM_write
  3261 ;;		_delay_ms
  3262 ;;		_getIR
  3263 ;;		_getMAG
  3264 ;;		_initGlobalVars
  3265 ;;		_initServos
  3266 ;;		_initSortTimer
  3267 ;;		_lcdInst
  3268 ;;		_readIR
  3269 ;; This function is called by:
  3270 ;;		_sort
  3271 ;; This function uses a non-reentrant model
  3272 ;;
  3273                           
  3274                           	psect	text2
  3275  0017D4                     __ptext2:
  3276                           	opt stack 0
  3277  0017D4                     _Loading:
  3278                           	opt stack 18
  3279                           
  3280                           ;sort.c: 86: if(first){
  3281                           
  3282                           ;incstack = 0
  3283  0017D4  0101               	movlb	1	; () banked
  3284  0017D6  513B               	movf	_first& (0+255),w,b
  3285  0017D8  0101               	movlb	1	; () banked
  3286  0017DA  113C               	iorwf	(_first+1)& (0+255),w,b
  3287  0017DC  B4D8               	btfsc	status,2,c
  3288  0017DE  D06A               	goto	l8108
  3289                           
  3290                           ; BSR set to: 1
  3291                           ;sort.c: 87: TMR1IE = 1;
  3292  0017E0  809D               	bsf	3997,0,c	;volatile
  3293                           
  3294                           ;sort.c: 88: TMR2IE = 1;
  3295  0017E2  829D               	bsf	3997,1,c	;volatile
  3296                           
  3297                           ;sort.c: 89: TMR3IE = 1;
  3298  0017E4  82A0               	bsf	4000,1,c	;volatile
  3299                           
  3300                           ; BSR set to: 1
  3301                           ;sort.c: 90: initGlobalVars();
  3302  0017E6  EC24  F025         	call	_initGlobalVars	;wreg free
  3303                           
  3304                           ;sort.c: 91: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3305  0017EA  0E01               	movlw	1
  3306  0017EC  EC69  F030         	call	_lcdInst
  3307  0017F0  0E68               	movlw	104
  3308  0017F2  0100               	movlb	0	; () banked
  3309  0017F4  6FB1               	movwf	??_Loading& (0+255),b
  3310  0017F6  0EE4               	movlw	228
  3311  0017F8                     u10777:
  3312  0017F8  2EE8               	decfsz	wreg,f,c
  3313  0017FA  D7FE               	bra	u10777
  3314  0017FC  2FB1               	decfsz	??_Loading& (0+255),f,b
  3315  0017FE  D7FC               	bra	u10777
  3316  001800  F000               	nop	
  3317                           
  3318                           ;sort.c: 92: initSortTimer();
  3319  001802  ECEA  F027         	call	_initSortTimer	;wreg free
  3320                           
  3321                           ;sort.c: 93: LATCbits.LATC5 = 1;
  3322  001806  8A8B               	bsf	3979,5,c	;volatile
  3323                           
  3324                           ;sort.c: 94: LATCbits.LATC6 = 1;
  3325  001808  8C8B               	bsf	3979,6,c	;volatile
  3326                           
  3327                           ;sort.c: 99: sel = EEPROM_read(0);
  3328  00180A  0E00               	movlw	0
  3329  00180C  0100               	movlb	0	; () banked
  3330  00180E  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3331  001810  0E00               	movlw	0
  3332  001812  6F80               	movwf	EEPROM_read@address& (0+255),b
  3333  001814  EC2C  F030         	call	_EEPROM_read	;wreg free
  3334  001818  0100               	movlb	0	; () banked
  3335  00181A  6FFD               	movwf	_sel& (0+255),b
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;sort.c: 100: unsigned short addr = 1 + 11 * sel;
  3339  00181C  0100               	movlb	0	; () banked
  3340  00181E  51FD               	movf	_sel& (0+255),w,b
  3341  001820  0D0B               	mullw	11
  3342  001822  0E01               	movlw	1
  3343  001824  24F3               	addwf	prodl,w,c
  3344  001826  0100               	movlb	0	; () banked
  3345  001828  6FB3               	movwf	Loading@addr& (0+255),b
  3346  00182A  0E00               	movlw	0
  3347  00182C  20F4               	addwfc	prodh,w,c
  3348  00182E  0100               	movlb	0	; () banked
  3349  001830  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3350                           
  3351                           ; BSR set to: 0
  3352                           ;sort.c: 101: unsigned char byte1 = 0b01111111;
  3353  001832  0E7F               	movlw	127
  3354  001834  0100               	movlb	0	; () banked
  3355  001836  6FB5               	movwf	Loading@byte1& (0+255),b
  3356                           
  3357                           ; BSR set to: 0
  3358                           ;sort.c: 102: EEPROM_write(addr, byte1);
  3359  001838  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3360  00183C  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3361  001840  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3362  001844  EC3F  F024         	call	_EEPROM_write	;wreg free
  3363                           
  3364                           ;sort.c: 105: LATBbits.LATB2 = 0;
  3365  001848  948A               	bcf	3978,2,c	;volatile
  3366                           
  3367                           ;sort.c: 107: for(int i=0; i<46; i++){
  3368  00184A  0E00               	movlw	0
  3369  00184C  0100               	movlb	0	; () banked
  3370  00184E  6FC2               	movwf	(Loading@i+1)& (0+255),b
  3371  001850  0E00               	movlw	0
  3372  001852  6FC1               	movwf	Loading@i& (0+255),b
  3373                           
  3374                           ; BSR set to: 0
  3375  001854  0100               	movlb	0	; () banked
  3376  001856  BFC2               	btfsc	(Loading@i+1)& (0+255),7,b
  3377  001858  D008               	goto	l8098
  3378  00185A  0100               	movlb	0	; () banked
  3379  00185C  51C2               	movf	(Loading@i+1)& (0+255),w,b
  3380  00185E  E126               	bnz	l806
  3381  001860  0E2E               	movlw	46
  3382  001862  0100               	movlb	0	; () banked
  3383  001864  5DC1               	subwf	Loading@i& (0+255),w,b
  3384  001866  B0D8               	btfsc	status,0,c
  3385  001868  D021               	goto	l806
  3386  00186A                     l8098:
  3387                           
  3388                           ; BSR set to: 0
  3389                           ;sort.c: 108: LATBbits.LATB2 = !LATBbits.LATB2;
  3390  00186A  B48A               	btfsc	3978,2,c	;volatile
  3391  00186C  D004               	goto	u6920
  3392  00186E  0100               	movlb	0	; () banked
  3393  001870  6BB1               	clrf	??_Loading& (0+255),b
  3394  001872  2BB1               	incf	??_Loading& (0+255),f,b
  3395  001874  D002               	goto	u6938
  3396  001876                     u6920:
  3397  001876  0100               	movlb	0	; () banked
  3398  001878  6BB1               	clrf	??_Loading& (0+255),b
  3399  00187A                     u6938:
  3400  00187A  0100               	movlb	0	; () banked
  3401  00187C  47B1               	rlncf	??_Loading& (0+255),f,b
  3402  00187E  47B1               	rlncf	??_Loading& (0+255),f,b
  3403  001880  508A               	movf	3978,w,c	;volatile
  3404  001882  0100               	movlb	0	; () banked
  3405  001884  19B1               	xorwf	??_Loading& (0+255),w,b
  3406  001886  0BFB               	andlw	-5
  3407  001888  19B1               	xorwf	??_Loading& (0+255),w,b
  3408  00188A  6E8A               	movwf	3978,c	;volatile
  3409                           
  3410                           ; BSR set to: 0
  3411                           ;sort.c: 109: delay_ms(45-i);
  3412  00188C  0100               	movlb	0	; () banked
  3413  00188E  51C1               	movf	Loading@i& (0+255),w,b
  3414  001890  0800               	sublw	0
  3415  001892  0F2D               	addlw	45
  3416  001894  EC8D  F02F         	call	_delay_ms
  3417  001898  0100               	movlb	0	; () banked
  3418  00189A  4BC1               	infsnz	Loading@i& (0+255),f,b
  3419  00189C  2BC2               	incf	(Loading@i+1)& (0+255),f,b
  3420                           
  3421                           ; BSR set to: 0
  3422  00189E  0100               	movlb	0	; () banked
  3423  0018A0  BFC2               	btfsc	(Loading@i+1)& (0+255),7,b
  3424  0018A2  D7E3               	goto	l8098
  3425  0018A4  0100               	movlb	0	; () banked
  3426  0018A6  51C2               	movf	(Loading@i+1)& (0+255),w,b
  3427  0018A8  E101               	bnz	u6940
  3428  0018AA  D7DA               	goto	L1
  3429  0018AC                     u6940:
  3430  0018AC                     l806:
  3431                           
  3432                           ; BSR set to: 0
  3433                           ;sort.c: 110: }
  3434                           ;sort.c: 111: LATBbits.LATB2 = 1;
  3435  0018AC  848A               	bsf	3978,2,c	;volatile
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;sort.c: 114: initServos();
  3439  0018AE  EC2B  F02A         	call	_initServos	;wreg free
  3440                           
  3441                           ;sort.c: 115: }
  3442  0018B2  0012               	return	
  3443  0018B4                     l8108:
  3444                           
  3445                           ;sort.c: 116: else{
  3446                           ;sort.c: 119: if(!f_loadingNewCan){
  3447  0018B4  0100               	movlb	0	; () banked
  3448  0018B6  51EE               	movf	_f_loadingNewCan& (0+255),w,b
  3449  0018B8  0100               	movlb	0	; () banked
  3450  0018BA  11EF               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3451  0018BC  A4D8               	btfss	status,2,c
  3452  0018BE  D01D               	goto	l8124
  3453                           
  3454                           ; BSR set to: 0
  3455                           ;sort.c: 121: getIR(0);
  3456  0018C0  0E00               	movlw	0
  3457  0018C2  0100               	movlb	0	; () banked
  3458  0018C4  6F87               	movwf	(getIR@port+1)& (0+255),b
  3459  0018C6  0E00               	movlw	0
  3460  0018C8  6F86               	movwf	getIR@port& (0+255),b
  3461  0018CA  ECEA  F029         	call	_getIR	;wreg free
  3462                           
  3463                           ;sort.c: 123: if(!f_loadingNewCan){
  3464  0018CE  0100               	movlb	0	; () banked
  3465  0018D0  51EE               	movf	_f_loadingNewCan& (0+255),w,b
  3466  0018D2  0100               	movlb	0	; () banked
  3467  0018D4  11EF               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3468  0018D6  B4D8               	btfsc	status,2,c
  3469  0018D8  0012               	return	
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;sort.c: 127: else{
  3473                           ;sort.c: 128: count_total++;
  3474                           
  3475                           ; BSR set to: 0
  3476                           
  3477                           ; BSR set to: 0
  3478                           ;sort.c: 125: }
  3479                           
  3480                           ; BSR set to: 0
  3481                           ;sort.c: 124: return;
  3482  0018DA  0100               	movlb	0	; () banked
  3483  0018DC  4BFE               	infsnz	_count_total& (0+255),f,b
  3484  0018DE  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3485                           
  3486                           ; BSR set to: 0
  3487                           ;sort.c: 129: if(count_total == 12){
  3488  0018E0  0E0C               	movlw	12
  3489  0018E2  0100               	movlb	0	; () banked
  3490  0018E4  19FE               	xorwf	_count_total& (0+255),w,b
  3491  0018E6  0100               	movlb	0	; () banked
  3492  0018E8  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3493  0018EA  A4D8               	btfss	status,2,c
  3494  0018EC  0012               	return	
  3495                           
  3496                           ; BSR set to: 0
  3497                           ;sort.c: 130: f_lastCan = 1;
  3498  0018EE  0E00               	movlw	0
  3499  0018F0  0100               	movlb	0	; () banked
  3500  0018F2  6FED               	movwf	(_f_lastCan+1)& (0+255),b
  3501  0018F4  0E01               	movlw	1
  3502  0018F6  6FEC               	movwf	_f_lastCan& (0+255),b
  3503                           
  3504                           ; BSR set to: 0
  3505                           ;sort.c: 131: }
  3506                           ;sort.c: 132: }
  3507                           ;sort.c: 133: }
  3508                           
  3509                           ; BSR set to: 0
  3510  0018F8  0012               	return	
  3511  0018FA                     l8124:
  3512                           
  3513                           ; BSR set to: 0
  3514                           ;sort.c: 136: else if(f_ID_receive){
  3515  0018FA  0101               	movlb	1	; () banked
  3516  0018FC  5131               	movf	_f_ID_receive& (0+255),w,b
  3517  0018FE  0101               	movlb	1	; () banked
  3518  001900  1132               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3519  001902  B4D8               	btfsc	status,2,c
  3520  001904  0012               	return	
  3521                           
  3522                           ; BSR set to: 1
  3523                           ;sort.c: 137: f_most_recent_sort_time = 1;
  3524  001906  0E00               	movlw	0
  3525  001908  0101               	movlb	1	; () banked
  3526  00190A  6F3A               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  3527  00190C  0E01               	movlw	1
  3528  00190E  6F39               	movwf	_f_most_recent_sort_time& (0+255),b
  3529                           
  3530                           ;sort.c: 138: f_loadingNewCan = 0;
  3531  001910  0E00               	movlw	0
  3532  001912  0100               	movlb	0	; () banked
  3533  001914  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3534  001916  0E00               	movlw	0
  3535  001918  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  3536                           
  3537                           ; BSR set to: 0
  3538                           ;sort.c: 139: _delay((unsigned long)((750)*(32000000/4000.0)));
  3539  00191A  0E1F               	movlw	31
  3540  00191C  0100               	movlb	0	; () banked
  3541  00191E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3542  001920  0E71               	movlw	113
  3543  001922  0100               	movlb	0	; () banked
  3544  001924  6FB1               	movwf	??_Loading& (0+255),b
  3545  001926  0E1E               	movlw	30
  3546  001928                     u10787:
  3547  001928  2EE8               	decfsz	wreg,f,c
  3548  00192A  D7FE               	bra	u10787
  3549  00192C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3550  00192E  D7FC               	bra	u10787
  3551  001930  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3552  001932  D7FA               	bra	u10787
  3553  001934  F000               	nop	
  3554                           
  3555                           ;sort.c: 142: f_arm_position = 1;
  3556  001936  0E00               	movlw	0
  3557  001938  0100               	movlb	0	; () banked
  3558  00193A  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3559  00193C  0E01               	movlw	1
  3560  00193E  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  3561                           
  3562                           ; BSR set to: 0
  3563                           ;sort.c: 144: delay_ms(750);
  3564  001940  0EEE               	movlw	238
  3565  001942  EC8D  F02F         	call	_delay_ms
  3566                           
  3567                           ;sort.c: 145: getMAG();
  3568  001946  EC16  F02E         	call	_getMAG	;wreg free
  3569                           
  3570                           ;sort.c: 146: sensor_outputs[0] = MAG_signal;
  3571  00194A  C0E4  F0DA         	movff	_MAG_signal,_sensor_outputs
  3572  00194E  C0E5  F0DB         	movff	_MAG_signal+1,_sensor_outputs+1
  3573                           
  3574                           ;sort.c: 148: LATBbits.LATB2 = 0;
  3575  001952  948A               	bcf	3978,2,c	;volatile
  3576                           
  3577                           ;sort.c: 151: TMR2IE = 0;
  3578  001954  929D               	bcf	3997,1,c	;volatile
  3579                           
  3580                           ;sort.c: 152: if(sensor_outputs[0]){
  3581  001956  0100               	movlb	0	; () banked
  3582  001958  51DA               	movf	_sensor_outputs& (0+255),w,b
  3583  00195A  0100               	movlb	0	; () banked
  3584  00195C  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3585  00195E  B4D8               	btfsc	status,2,c
  3586  001960  D01D               	goto	l8156
  3587                           
  3588                           ; BSR set to: 0
  3589                           ;sort.c: 153: for(int i = 0; i<3000; i++){
  3590  001962  0E00               	movlw	0
  3591  001964  0100               	movlb	0	; () banked
  3592  001966  6FB8               	movwf	(Loading@i_1127+1)& (0+255),b
  3593  001968  0E00               	movlw	0
  3594  00196A  6FB7               	movwf	Loading@i_1127& (0+255),b
  3595  00196C                     l8146:
  3596                           
  3597                           ; BSR set to: 0
  3598  00196C  0100               	movlb	0	; () banked
  3599  00196E  BFB8               	btfsc	(Loading@i_1127+1)& (0+255),7,b
  3600  001970  D008               	goto	l816
  3601  001972  0EB8               	movlw	184
  3602  001974  0100               	movlb	0	; () banked
  3603  001976  5DB7               	subwf	Loading@i_1127& (0+255),w,b
  3604  001978  0E0B               	movlw	11
  3605  00197A  0100               	movlb	0	; () banked
  3606  00197C  59B8               	subwfb	(Loading@i_1127+1)& (0+255),w,b
  3607  00197E  B0D8               	btfsc	status,0,c
  3608  001980  D02A               	goto	l818
  3609  001982                     l816:
  3610                           
  3611                           ; BSR set to: 0
  3612                           ;sort.c: 154: LATAbits.LATA4 = 1;
  3613  001982  8889               	bsf	3977,4,c	;volatile
  3614                           
  3615                           ; BSR set to: 0
  3616                           ;sort.c: 155: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3617  001984  0EC8               	movlw	200
  3618  001986                     u10797:
  3619  001986  2EE8               	decfsz	wreg,f,c
  3620  001988  D7FE               	bra	u10797
  3621                           
  3622                           ;sort.c: 156: LATAbits.LATA4 = 0;
  3623  00198A  9889               	bcf	3977,4,c	;volatile
  3624                           
  3625                           ;sort.c: 157: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3626  00198C  0E42               	movlw	66
  3627  00198E                     u10807:
  3628  00198E  2EE8               	decfsz	wreg,f,c
  3629  001990  D7FE               	bra	u10807
  3630  001992  D000               	nop2	
  3631  001994  0100               	movlb	0	; () banked
  3632  001996  4BB7               	infsnz	Loading@i_1127& (0+255),f,b
  3633  001998  2BB8               	incf	(Loading@i_1127+1)& (0+255),f,b
  3634  00199A  D7E8               	goto	l8146
  3635  00199C                     l8156:
  3636                           
  3637                           ; BSR set to: 0
  3638                           ;sort.c: 160: else{
  3639                           ;sort.c: 161: for(int i = 0; i<3000; i++){
  3640  00199C  0E00               	movlw	0
  3641  00199E  0100               	movlb	0	; () banked
  3642  0019A0  6FBA               	movwf	(Loading@i_1136+1)& (0+255),b
  3643  0019A2  0E00               	movlw	0
  3644  0019A4  6FB9               	movwf	Loading@i_1136& (0+255),b
  3645  0019A6                     l8158:
  3646                           
  3647                           ; BSR set to: 0
  3648  0019A6  0100               	movlb	0	; () banked
  3649  0019A8  BFBA               	btfsc	(Loading@i_1136+1)& (0+255),7,b
  3650  0019AA  D008               	goto	l819
  3651  0019AC  0EB8               	movlw	184
  3652  0019AE  0100               	movlb	0	; () banked
  3653  0019B0  5DB9               	subwf	Loading@i_1136& (0+255),w,b
  3654  0019B2  0E0B               	movlw	11
  3655  0019B4  0100               	movlb	0	; () banked
  3656  0019B6  59BA               	subwfb	(Loading@i_1136+1)& (0+255),w,b
  3657  0019B8  B0D8               	btfsc	status,0,c
  3658  0019BA  D00D               	goto	l818
  3659  0019BC                     l819:
  3660                           
  3661                           ; BSR set to: 0
  3662                           ;sort.c: 162: LATAbits.LATA4 = 1;
  3663  0019BC  8889               	bsf	3977,4,c	;volatile
  3664                           
  3665                           ; BSR set to: 0
  3666                           ;sort.c: 163: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3667  0019BE  0E9A               	movlw	154
  3668  0019C0                     u10817:
  3669  0019C0  2EE8               	decfsz	wreg,f,c
  3670  0019C2  D7FE               	bra	u10817
  3671  0019C4  D000               	nop2	
  3672                           
  3673                           ;sort.c: 164: LATAbits.LATA4 = 0;
  3674  0019C6  9889               	bcf	3977,4,c	;volatile
  3675                           
  3676                           ;sort.c: 165: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3677  0019C8  0E70               	movlw	112
  3678  0019CA                     u10827:
  3679  0019CA  2EE8               	decfsz	wreg,f,c
  3680  0019CC  D7FE               	bra	u10827
  3681  0019CE  0100               	movlb	0	; () banked
  3682  0019D0  4BB9               	infsnz	Loading@i_1136& (0+255),f,b
  3683  0019D2  2BBA               	incf	(Loading@i_1136+1)& (0+255),f,b
  3684  0019D4  D7E8               	goto	l8158
  3685  0019D6                     l818:
  3686                           
  3687                           ; BSR set to: 0
  3688                           ;sort.c: 166: }
  3689                           ;sort.c: 167: }
  3690                           ;sort.c: 168: TMR2IE = 1;
  3691  0019D6  829D               	bsf	3997,1,c	;volatile
  3692                           
  3693                           ; BSR set to: 0
  3694                           ;sort.c: 169: _delay((unsigned long)((500)*(32000000/4000.0)));
  3695  0019D8  0E15               	movlw	21
  3696  0019DA  0100               	movlb	0	; () banked
  3697  0019DC  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3698  0019DE  0E4B               	movlw	75
  3699  0019E0  0100               	movlb	0	; () banked
  3700  0019E2  6FB1               	movwf	??_Loading& (0+255),b
  3701  0019E4  0EBE               	movlw	190
  3702  0019E6                     u10837:
  3703  0019E6  2EE8               	decfsz	wreg,f,c
  3704  0019E8  D7FE               	bra	u10837
  3705  0019EA  2FB1               	decfsz	??_Loading& (0+255),f,b
  3706  0019EC  D7FC               	bra	u10837
  3707  0019EE  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3708  0019F0  D7FA               	bra	u10837
  3709  0019F2  F000               	nop	
  3710                           
  3711                           ;sort.c: 171: readIR(0);
  3712  0019F4  0E00               	movlw	0
  3713  0019F6  0100               	movlb	0	; () banked
  3714  0019F8  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  3715  0019FA  0E00               	movlw	0
  3716  0019FC  6F82               	movwf	readIR@ana_port& (0+255),b
  3717  0019FE  EC90  F028         	call	_readIR	;wreg free
  3718                           
  3719                           ;sort.c: 172: if(IR_signal==1){
  3720  001A02  0100               	movlb	0	; () banked
  3721  001A04  05E2               	decf	_IR_signal& (0+255),w,b
  3722  001A06  0100               	movlb	0	; () banked
  3723  001A08  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  3724  001A0A  A4D8               	btfss	status,2,c
  3725  001A0C  D1DA               	goto	l8318
  3726                           
  3727                           ; BSR set to: 0
  3728                           ;sort.c: 173: _delay((unsigned long)((100)*(32000000/4000.0)));
  3729  001A0E  0E05               	movlw	5
  3730  001A10  0100               	movlb	0	; () banked
  3731  001A12  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3732  001A14  0E0F               	movlw	15
  3733  001A16  0100               	movlb	0	; () banked
  3734  001A18  6FB1               	movwf	??_Loading& (0+255),b
  3735  001A1A  0EF1               	movlw	241
  3736  001A1C                     u10847:
  3737  001A1C  2EE8               	decfsz	wreg,f,c
  3738  001A1E  D7FE               	bra	u10847
  3739  001A20  2FB1               	decfsz	??_Loading& (0+255),f,b
  3740  001A22  D7FC               	bra	u10847
  3741  001A24  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3742  001A26  D7FA               	bra	u10847
  3743                           
  3744                           ;sort.c: 174: readIR(0);
  3745  001A28  0E00               	movlw	0
  3746  001A2A  0100               	movlb	0	; () banked
  3747  001A2C  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  3748  001A2E  0E00               	movlw	0
  3749  001A30  6F82               	movwf	readIR@ana_port& (0+255),b
  3750  001A32  EC90  F028         	call	_readIR	;wreg free
  3751                           
  3752                           ;sort.c: 175: if(IR_signal==1){
  3753  001A36  0100               	movlb	0	; () banked
  3754  001A38  05E2               	decf	_IR_signal& (0+255),w,b
  3755  001A3A  0100               	movlb	0	; () banked
  3756  001A3C  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  3757  001A3E  A4D8               	btfss	status,2,c
  3758  001A40  D058               	goto	l8218
  3759                           
  3760                           ; BSR set to: 0
  3761                           ;sort.c: 176: getMAG();
  3762  001A42  EC16  F02E         	call	_getMAG	;wreg free
  3763                           
  3764                           ;sort.c: 177: sensor_outputs[0] = sensor_outputs[0] || MAG_signal;
  3765  001A46  0E01               	movlw	1
  3766  001A48  0100               	movlb	0	; () banked
  3767  001A4A  6FB6               	movwf	_Loading$1138& (0+255),b
  3768                           
  3769                           ; BSR set to: 0
  3770  001A4C  0100               	movlb	0	; () banked
  3771  001A4E  51DA               	movf	_sensor_outputs& (0+255),w,b
  3772  001A50  0100               	movlb	0	; () banked
  3773  001A52  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3774  001A54  A4D8               	btfss	status,2,c
  3775  001A56  D009               	goto	l8190
  3776                           
  3777                           ; BSR set to: 0
  3778  001A58  0100               	movlb	0	; () banked
  3779  001A5A  51E4               	movf	_MAG_signal& (0+255),w,b
  3780  001A5C  0100               	movlb	0	; () banked
  3781  001A5E  11E5               	iorwf	(_MAG_signal+1)& (0+255),w,b
  3782  001A60  A4D8               	btfss	status,2,c
  3783  001A62  D003               	goto	l8190
  3784                           
  3785                           ; BSR set to: 0
  3786  001A64  0E00               	movlw	0
  3787  001A66  0100               	movlb	0	; () banked
  3788  001A68  6FB6               	movwf	_Loading$1138& (0+255),b
  3789  001A6A                     l8190:
  3790                           
  3791                           ; BSR set to: 0
  3792  001A6A  C0B6  F0DA         	movff	_Loading$1138,_sensor_outputs
  3793  001A6E  0100               	movlb	0	; () banked
  3794  001A70  6BDB               	clrf	(_sensor_outputs+1)& (0+255),b
  3795                           
  3796                           ; BSR set to: 0
  3797                           ;sort.c: 179: if(sensor_outputs[0]){
  3798  001A72  0100               	movlb	0	; () banked
  3799  001A74  51DA               	movf	_sensor_outputs& (0+255),w,b
  3800  001A76  0100               	movlb	0	; () banked
  3801  001A78  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3802  001A7A  B4D8               	btfsc	status,2,c
  3803  001A7C  D01D               	goto	l8206
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;sort.c: 180: for(int i = 0; i<3000; i++){
  3807  001A7E  0E00               	movlw	0
  3808  001A80  0100               	movlb	0	; () banked
  3809  001A82  6FBC               	movwf	(Loading@i_1139+1)& (0+255),b
  3810  001A84  0E00               	movlw	0
  3811  001A86  6FBB               	movwf	Loading@i_1139& (0+255),b
  3812  001A88                     l8196:
  3813                           
  3814                           ; BSR set to: 0
  3815  001A88  0100               	movlb	0	; () banked
  3816  001A8A  BFBC               	btfsc	(Loading@i_1139+1)& (0+255),7,b
  3817  001A8C  D008               	goto	l826
  3818  001A8E  0EB8               	movlw	184
  3819  001A90  0100               	movlb	0	; () banked
  3820  001A92  5DBB               	subwf	Loading@i_1139& (0+255),w,b
  3821  001A94  0E0B               	movlw	11
  3822  001A96  0100               	movlb	0	; () banked
  3823  001A98  59BC               	subwfb	(Loading@i_1139+1)& (0+255),w,b
  3824  001A9A  B0D8               	btfsc	status,0,c
  3825  001A9C  D02A               	goto	l8218
  3826  001A9E                     l826:
  3827                           
  3828                           ; BSR set to: 0
  3829                           ;sort.c: 181: LATAbits.LATA4 = 1;
  3830  001A9E  8889               	bsf	3977,4,c	;volatile
  3831                           
  3832                           ; BSR set to: 0
  3833                           ;sort.c: 182: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3834  001AA0  0EC8               	movlw	200
  3835  001AA2                     u10857:
  3836  001AA2  2EE8               	decfsz	wreg,f,c
  3837  001AA4  D7FE               	bra	u10857
  3838                           
  3839                           ;sort.c: 183: LATAbits.LATA4 = 0;
  3840  001AA6  9889               	bcf	3977,4,c	;volatile
  3841                           
  3842                           ;sort.c: 184: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3843  001AA8  0E42               	movlw	66
  3844  001AAA                     u10867:
  3845  001AAA  2EE8               	decfsz	wreg,f,c
  3846  001AAC  D7FE               	bra	u10867
  3847  001AAE  D000               	nop2	
  3848  001AB0  0100               	movlb	0	; () banked
  3849  001AB2  4BBB               	infsnz	Loading@i_1139& (0+255),f,b
  3850  001AB4  2BBC               	incf	(Loading@i_1139+1)& (0+255),f,b
  3851  001AB6  D7E8               	goto	l8196
  3852  001AB8                     l8206:
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;sort.c: 187: else{
  3856                           ;sort.c: 188: for(int i = 0; i<3000; i++){
  3857  001AB8  0E00               	movlw	0
  3858  001ABA  0100               	movlb	0	; () banked
  3859  001ABC  6FBE               	movwf	(Loading@i_1140+1)& (0+255),b
  3860  001ABE  0E00               	movlw	0
  3861  001AC0  6FBD               	movwf	Loading@i_1140& (0+255),b
  3862  001AC2                     l8208:
  3863                           
  3864                           ; BSR set to: 0
  3865  001AC2  0100               	movlb	0	; () banked
  3866  001AC4  BFBE               	btfsc	(Loading@i_1140+1)& (0+255),7,b
  3867  001AC6  D008               	goto	l829
  3868  001AC8  0EB8               	movlw	184
  3869  001ACA  0100               	movlb	0	; () banked
  3870  001ACC  5DBD               	subwf	Loading@i_1140& (0+255),w,b
  3871  001ACE  0E0B               	movlw	11
  3872  001AD0  0100               	movlb	0	; () banked
  3873  001AD2  59BE               	subwfb	(Loading@i_1140+1)& (0+255),w,b
  3874  001AD4  B0D8               	btfsc	status,0,c
  3875  001AD6  D00D               	goto	l8218
  3876  001AD8                     l829:
  3877                           
  3878                           ; BSR set to: 0
  3879                           ;sort.c: 189: LATAbits.LATA4 = 1;
  3880  001AD8  8889               	bsf	3977,4,c	;volatile
  3881                           
  3882                           ; BSR set to: 0
  3883                           ;sort.c: 190: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3884  001ADA  0E9A               	movlw	154
  3885  001ADC                     u10877:
  3886  001ADC  2EE8               	decfsz	wreg,f,c
  3887  001ADE  D7FE               	bra	u10877
  3888  001AE0  D000               	nop2	
  3889                           
  3890                           ;sort.c: 191: LATAbits.LATA4 = 0;
  3891  001AE2  9889               	bcf	3977,4,c	;volatile
  3892                           
  3893                           ;sort.c: 192: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3894  001AE4  0E70               	movlw	112
  3895  001AE6                     u10887:
  3896  001AE6  2EE8               	decfsz	wreg,f,c
  3897  001AE8  D7FE               	bra	u10887
  3898  001AEA  0100               	movlb	0	; () banked
  3899  001AEC  4BBD               	infsnz	Loading@i_1140& (0+255),f,b
  3900  001AEE  2BBE               	incf	(Loading@i_1140+1)& (0+255),f,b
  3901  001AF0  D7E8               	goto	l8208
  3902  001AF2                     l8218:
  3903                           
  3904                           ; BSR set to: 0
  3905                           ;sort.c: 193: }
  3906                           ;sort.c: 194: }
  3907                           ;sort.c: 195: }
  3908                           ;sort.c: 197: _delay((unsigned long)((400)*(32000000/4000.0)));
  3909  001AF2  0E11               	movlw	17
  3910  001AF4  0100               	movlb	0	; () banked
  3911  001AF6  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3912  001AF8  0E3C               	movlw	60
  3913  001AFA  0100               	movlb	0	; () banked
  3914  001AFC  6FB1               	movwf	??_Loading& (0+255),b
  3915  001AFE  0ECB               	movlw	203
  3916  001B00                     u10897:
  3917  001B00  2EE8               	decfsz	wreg,f,c
  3918  001B02  D7FE               	bra	u10897
  3919  001B04  2FB1               	decfsz	??_Loading& (0+255),f,b
  3920  001B06  D7FC               	bra	u10897
  3921  001B08  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3922  001B0A  D7FA               	bra	u10897
  3923                           
  3924                           ;sort.c: 199: int j = 0;
  3925  001B0C  0E00               	movlw	0
  3926  001B0E  0100               	movlb	0	; () banked
  3927  001B10  6FC4               	movwf	(Loading@j+1)& (0+255),b
  3928  001B12  0E00               	movlw	0
  3929  001B14  6FC3               	movwf	Loading@j& (0+255),b
  3930                           
  3931                           ;sort.c: 200: while(IR_signal == 1){
  3932  001B16  D14E               	goto	l8316
  3933  001B18                     l8222:
  3934                           
  3935                           ; BSR set to: 0
  3936                           ;sort.c: 201: readIR(0);
  3937  001B18  0E00               	movlw	0
  3938  001B1A  0100               	movlb	0	; () banked
  3939  001B1C  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  3940  001B1E  0E00               	movlw	0
  3941  001B20  6F82               	movwf	readIR@ana_port& (0+255),b
  3942  001B22  EC90  F028         	call	_readIR	;wreg free
  3943                           
  3944                           ;sort.c: 202: if(j == 3 || j == 4){
  3945  001B26  0E03               	movlw	3
  3946  001B28  0100               	movlb	0	; () banked
  3947  001B2A  19C3               	xorwf	Loading@j& (0+255),w,b
  3948  001B2C  0100               	movlb	0	; () banked
  3949  001B2E  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  3950  001B30  B4D8               	btfsc	status,2,c
  3951  001B32  D007               	goto	l8228
  3952                           
  3953                           ; BSR set to: 0
  3954  001B34  0E04               	movlw	4
  3955  001B36  0100               	movlb	0	; () banked
  3956  001B38  19C3               	xorwf	Loading@j& (0+255),w,b
  3957  001B3A  0100               	movlb	0	; () banked
  3958  001B3C  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  3959  001B3E  A4D8               	btfss	status,2,c
  3960  001B40  D006               	goto	l8230
  3961  001B42                     l8228:
  3962                           
  3963                           ; BSR set to: 0
  3964                           ;sort.c: 203: f_arm_position = 0;
  3965  001B42  0E00               	movlw	0
  3966  001B44  0100               	movlb	0	; () banked
  3967  001B46  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3968  001B48  0E00               	movlw	0
  3969  001B4A  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  3970                           
  3971                           ;sort.c: 204: }
  3972  001B4C  D06D               	goto	l8250
  3973  001B4E                     l8230:
  3974                           
  3975                           ; BSR set to: 0
  3976                           ;sort.c: 205: else if(j == 5 || j == 6){
  3977  001B4E  0E05               	movlw	5
  3978  001B50  0100               	movlb	0	; () banked
  3979  001B52  19C3               	xorwf	Loading@j& (0+255),w,b
  3980  001B54  0100               	movlb	0	; () banked
  3981  001B56  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  3982  001B58  B4D8               	btfsc	status,2,c
  3983  001B5A  D007               	goto	l839
  3984                           
  3985                           ; BSR set to: 0
  3986  001B5C  0E06               	movlw	6
  3987  001B5E  0100               	movlb	0	; () banked
  3988  001B60  19C3               	xorwf	Loading@j& (0+255),w,b
  3989  001B62  0100               	movlb	0	; () banked
  3990  001B64  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  3991  001B66  A4D8               	btfss	status,2,c
  3992  001B68  D002               	goto	l8234
  3993  001B6A                     l839:
  3994                           
  3995                           ; BSR set to: 0
  3996                           ;sort.c: 206: LATBbits.LATB2 = 1;
  3997  001B6A  848A               	bsf	3978,2,c	;volatile
  3998                           
  3999                           ;sort.c: 207: }
  4000  001B6C  D05D               	goto	l8250
  4001  001B6E                     l8234:
  4002                           
  4003                           ; BSR set to: 0
  4004                           ;sort.c: 208: else if(j == 7 || j == 8 || j == 9 || j == 10){
  4005  001B6E  0E07               	movlw	7
  4006  001B70  0100               	movlb	0	; () banked
  4007  001B72  19C3               	xorwf	Loading@j& (0+255),w,b
  4008  001B74  0100               	movlb	0	; () banked
  4009  001B76  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  4010  001B78  B4D8               	btfsc	status,2,c
  4011  001B7A  D015               	goto	l8242
  4012                           
  4013                           ; BSR set to: 0
  4014  001B7C  0E08               	movlw	8
  4015  001B7E  0100               	movlb	0	; () banked
  4016  001B80  19C3               	xorwf	Loading@j& (0+255),w,b
  4017  001B82  0100               	movlb	0	; () banked
  4018  001B84  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  4019  001B86  B4D8               	btfsc	status,2,c
  4020  001B88  D00E               	goto	l8242
  4021                           
  4022                           ; BSR set to: 0
  4023  001B8A  0E09               	movlw	9
  4024  001B8C  0100               	movlb	0	; () banked
  4025  001B8E  19C3               	xorwf	Loading@j& (0+255),w,b
  4026  001B90  0100               	movlb	0	; () banked
  4027  001B92  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  4028  001B94  B4D8               	btfsc	status,2,c
  4029  001B96  D007               	goto	l8242
  4030                           
  4031                           ; BSR set to: 0
  4032  001B98  0E0A               	movlw	10
  4033  001B9A  0100               	movlb	0	; () banked
  4034  001B9C  19C3               	xorwf	Loading@j& (0+255),w,b
  4035  001B9E  0100               	movlb	0	; () banked
  4036  001BA0  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  4037  001BA2  A4D8               	btfss	status,2,c
  4038  001BA4  D013               	goto	l841
  4039  001BA6                     l8242:
  4040                           
  4041                           ; BSR set to: 0
  4042                           ;sort.c: 209: f_arm_position = 1;
  4043  001BA6  0E00               	movlw	0
  4044  001BA8  0100               	movlb	0	; () banked
  4045  001BAA  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  4046  001BAC  0E01               	movlw	1
  4047  001BAE  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  4048                           
  4049                           ; BSR set to: 0
  4050                           ;sort.c: 210: _delay((unsigned long)((200)*(32000000/4000.0)));
  4051  001BB0  0E09               	movlw	9
  4052  001BB2  0100               	movlb	0	; () banked
  4053  001BB4  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4054  001BB6  0E1E               	movlw	30
  4055  001BB8  0100               	movlb	0	; () banked
  4056  001BBA  6FB1               	movwf	??_Loading& (0+255),b
  4057  001BBC  0EE4               	movlw	228
  4058  001BBE                     u10907:
  4059  001BBE  2EE8               	decfsz	wreg,f,c
  4060  001BC0  D7FE               	bra	u10907
  4061  001BC2  2FB1               	decfsz	??_Loading& (0+255),f,b
  4062  001BC4  D7FC               	bra	u10907
  4063  001BC6  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4064  001BC8  D7FA               	bra	u10907
  4065  001BCA  D02D               	goto	L2
  4066  001BCC                     l841:
  4067                           
  4068                           ; BSR set to: 0
  4069                           ;sort.c: 212: else if(j % 2 == 0){
  4070  001BCC  0100               	movlb	0	; () banked
  4071  001BCE  B1C3               	btfsc	Loading@j& (0+255),0,b
  4072  001BD0  D02B               	goto	l8250
  4073                           
  4074                           ; BSR set to: 0
  4075                           ;sort.c: 213: LATBbits.LATB2 = !LATBbits.LATB2;
  4076  001BD2  B48A               	btfsc	3978,2,c	;volatile
  4077  001BD4  D004               	goto	u7220
  4078  001BD6  0100               	movlb	0	; () banked
  4079  001BD8  6BB1               	clrf	??_Loading& (0+255),b
  4080  001BDA  2BB1               	incf	??_Loading& (0+255),f,b
  4081  001BDC  D002               	goto	u7238
  4082  001BDE                     u7220:
  4083  001BDE  0100               	movlb	0	; () banked
  4084  001BE0  6BB1               	clrf	??_Loading& (0+255),b
  4085  001BE2                     u7238:
  4086  001BE2  0100               	movlb	0	; () banked
  4087  001BE4  47B1               	rlncf	??_Loading& (0+255),f,b
  4088  001BE6  47B1               	rlncf	??_Loading& (0+255),f,b
  4089  001BE8  508A               	movf	3978,w,c	;volatile
  4090  001BEA  0100               	movlb	0	; () banked
  4091  001BEC  19B1               	xorwf	??_Loading& (0+255),w,b
  4092  001BEE  0BFB               	andlw	-5
  4093  001BF0  19B1               	xorwf	??_Loading& (0+255),w,b
  4094  001BF2  6E8A               	movwf	3978,c	;volatile
  4095                           
  4096                           ;sort.c: 214: f_arm_position = !f_arm_position;
  4097  001BF4  0100               	movlb	0	; () banked
  4098  001BF6  51EA               	movf	_f_arm_position& (0+255),w,b	;volatile
  4099  001BF8  0100               	movlb	0	; () banked
  4100  001BFA  11EB               	iorwf	(_f_arm_position+1)& (0+255),w,b	;volatile
  4101  001BFC  A4D8               	btfss	status,2,c
  4102  001BFE  D002               	goto	u7240
  4103  001C00  0E01               	movlw	1
  4104  001C02  D001               	goto	u7250
  4105  001C04                     u7240:
  4106  001C04  0E00               	movlw	0
  4107  001C06                     u7250:
  4108  001C06  0100               	movlb	0	; () banked
  4109  001C08  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  4110  001C0A  6BEB               	clrf	(_f_arm_position+1)& (0+255),b	;volatile
  4111                           
  4112                           ; BSR set to: 0
  4113                           ;sort.c: 215: _delay((unsigned long)((200)*(32000000/4000.0)));
  4114  001C0C  0E09               	movlw	9
  4115  001C0E  0100               	movlb	0	; () banked
  4116  001C10  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4117  001C12  0E1E               	movlw	30
  4118  001C14  0100               	movlb	0	; () banked
  4119  001C16  6FB1               	movwf	??_Loading& (0+255),b
  4120  001C18  0EE4               	movlw	228
  4121  001C1A                     u10917:
  4122  001C1A  2EE8               	decfsz	wreg,f,c
  4123  001C1C  D7FE               	bra	u10917
  4124  001C1E  2FB1               	decfsz	??_Loading& (0+255),f,b
  4125  001C20  D7FC               	bra	u10917
  4126  001C22  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4127  001C24  D7FA               	bra	u10917
  4128  001C26                     L2:
  4129  001C26  F000               	nop	
  4130  001C28                     l8250:
  4131                           
  4132                           ;sort.c: 216: }
  4133                           ;sort.c: 219: if(IR_signal==1){
  4134  001C28  0100               	movlb	0	; () banked
  4135  001C2A  05E2               	decf	_IR_signal& (0+255),w,b
  4136  001C2C  0100               	movlb	0	; () banked
  4137  001C2E  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  4138  001C30  A4D8               	btfss	status,2,c
  4139  001C32  D09F               	goto	l8304
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;sort.c: 220: _delay((unsigned long)((350)*(32000000/4000.0)));
  4143  001C34  0E0F               	movlw	15
  4144  001C36  0100               	movlb	0	; () banked
  4145  001C38  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4146  001C3A  0E35               	movlw	53
  4147  001C3C  0100               	movlb	0	; () banked
  4148  001C3E  6FB1               	movwf	??_Loading& (0+255),b
  4149  001C40  0E51               	movlw	81
  4150  001C42                     u10927:
  4151  001C42  2EE8               	decfsz	wreg,f,c
  4152  001C44  D7FE               	bra	u10927
  4153  001C46  2FB1               	decfsz	??_Loading& (0+255),f,b
  4154  001C48  D7FC               	bra	u10927
  4155  001C4A  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4156  001C4C  D7FA               	bra	u10927
  4157                           
  4158                           ;sort.c: 221: readIR(0);
  4159  001C4E  0E00               	movlw	0
  4160  001C50  0100               	movlb	0	; () banked
  4161  001C52  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  4162  001C54  0E00               	movlw	0
  4163  001C56  6F82               	movwf	readIR@ana_port& (0+255),b
  4164  001C58  EC90  F028         	call	_readIR	;wreg free
  4165                           
  4166                           ;sort.c: 222: if(IR_signal==1){
  4167  001C5C  0100               	movlb	0	; () banked
  4168  001C5E  05E2               	decf	_IR_signal& (0+255),w,b
  4169  001C60  0100               	movlb	0	; () banked
  4170  001C62  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  4171  001C64  A4D8               	btfss	status,2,c
  4172  001C66  D081               	goto	l847
  4173                           
  4174                           ; BSR set to: 0
  4175                           ;sort.c: 223: if(sensor_outputs[0]){
  4176  001C68  0100               	movlb	0	; () banked
  4177  001C6A  51DA               	movf	_sensor_outputs& (0+255),w,b
  4178  001C6C  0100               	movlb	0	; () banked
  4179  001C6E  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4180  001C70  B4D8               	btfsc	status,2,c
  4181  001C72  D011               	goto	l848
  4182                           
  4183                           ; BSR set to: 0
  4184                           ;sort.c: 224: LATAbits.LATA4 = 1;
  4185  001C74  8889               	bsf	3977,4,c	;volatile
  4186                           
  4187                           ; BSR set to: 0
  4188                           ;sort.c: 225: _delay((unsigned long)((300)*(32000000/4000.0)));
  4189  001C76  0E0D               	movlw	13
  4190  001C78  0100               	movlb	0	; () banked
  4191  001C7A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4192  001C7C  0E2D               	movlw	45
  4193  001C7E  0100               	movlb	0	; () banked
  4194  001C80  6FB1               	movwf	??_Loading& (0+255),b
  4195  001C82  0ED7               	movlw	215
  4196  001C84                     u10937:
  4197  001C84  2EE8               	decfsz	wreg,f,c
  4198  001C86  D7FE               	bra	u10937
  4199  001C88  2FB1               	decfsz	??_Loading& (0+255),f,b
  4200  001C8A  D7FC               	bra	u10937
  4201  001C8C  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4202  001C8E  D7FA               	bra	u10937
  4203  001C90  D000               	nop2	
  4204                           
  4205                           ;sort.c: 226: LATAbits.LATA4 = 0;
  4206  001C92  9889               	bcf	3977,4,c	;volatile
  4207                           
  4208                           ;sort.c: 227: }
  4209  001C94  D06A               	goto	l847
  4210  001C96                     l848:
  4211                           
  4212                           ; BSR set to: 0
  4213                           ;sort.c: 228: else{
  4214                           ;sort.c: 229: TMR2IE = 0;
  4215  001C96  929D               	bcf	3997,1,c	;volatile
  4216                           
  4217                           ; BSR set to: 0
  4218                           ;sort.c: 230: for(int i = 0; i<3000; i++){
  4219  001C98  0E00               	movlw	0
  4220  001C9A  0100               	movlb	0	; () banked
  4221  001C9C  6FC0               	movwf	(Loading@i_1142+1)& (0+255),b
  4222  001C9E  0E00               	movlw	0
  4223  001CA0  6FBF               	movwf	Loading@i_1142& (0+255),b
  4224  001CA2                     l8268:
  4225                           
  4226                           ; BSR set to: 0
  4227  001CA2  0100               	movlb	0	; () banked
  4228  001CA4  BFC0               	btfsc	(Loading@i_1142+1)& (0+255),7,b
  4229  001CA6  D041               	goto	l8296
  4230  001CA8  0EB8               	movlw	184
  4231  001CAA  0100               	movlb	0	; () banked
  4232  001CAC  5DBF               	subwf	Loading@i_1142& (0+255),w,b
  4233  001CAE  0E0B               	movlw	11
  4234  001CB0  0100               	movlb	0	; () banked
  4235  001CB2  59C0               	subwfb	(Loading@i_1142+1)& (0+255),w,b
  4236  001CB4  B0D8               	btfsc	status,0,c
  4237  001CB6  D058               	goto	l851
  4238  001CB8  D038               	goto	l8296
  4239  001CBA                     l853:
  4240                           
  4241                           ; BSR set to: 0
  4242                           ;sort.c: 233: LATAbits.LATA4 = 1;
  4243  001CBA  8889               	bsf	3977,4,c	;volatile
  4244                           
  4245                           ; BSR set to: 0
  4246                           ;sort.c: 234: _delay((unsigned long)((75)*(32000000/4000000.0)));
  4247  001CBC  0EC8               	movlw	200
  4248  001CBE                     u10947:
  4249  001CBE  2EE8               	decfsz	wreg,f,c
  4250  001CC0  D7FE               	bra	u10947
  4251                           
  4252                           ;sort.c: 235: LATAbits.LATA4 = 0;
  4253  001CC2  9889               	bcf	3977,4,c	;volatile
  4254                           
  4255                           ;sort.c: 236: _delay((unsigned long)((25)*(32000000/4000000.0)));
  4256  001CC4  0E42               	movlw	66
  4257  001CC6                     u10957:
  4258  001CC6  2EE8               	decfsz	wreg,f,c
  4259  001CC8  D7FE               	bra	u10957
  4260  001CCA  D01C               	goto	L3
  4261  001CCC                     l855:
  4262                           
  4263                           ; BSR set to: 0
  4264                           ;sort.c: 239: LATAbits.LATA4 = 1;
  4265  001CCC  8889               	bsf	3977,4,c	;volatile
  4266                           
  4267                           ; BSR set to: 0
  4268                           ;sort.c: 240: _delay((unsigned long)((80)*(32000000/4000000.0)));
  4269  001CCE  0ED5               	movlw	213
  4270  001CD0                     u10967:
  4271  001CD0  2EE8               	decfsz	wreg,f,c
  4272  001CD2  D7FE               	bra	u10967
  4273  001CD4  F000               	nop	
  4274                           
  4275                           ;sort.c: 241: LATAbits.LATA4 = 0;
  4276  001CD6  9889               	bcf	3977,4,c	;volatile
  4277                           
  4278                           ;sort.c: 242: _delay((unsigned long)((20)*(32000000/4000000.0)));
  4279  001CD8  0E35               	movlw	53
  4280  001CDA                     u10977:
  4281  001CDA  2EE8               	decfsz	wreg,f,c
  4282  001CDC  D7FE               	bra	u10977
  4283  001CDE  D01D               	goto	L4
  4284  001CE0                     l856:
  4285                           
  4286                           ; BSR set to: 0
  4287                           ;sort.c: 245: LATAbits.LATA4 = 1;
  4288  001CE0  8889               	bsf	3977,4,c	;volatile
  4289                           
  4290                           ; BSR set to: 0
  4291                           ;sort.c: 246: _delay((unsigned long)((85)*(32000000/4000000.0)));
  4292  001CE2  0EE2               	movlw	226
  4293  001CE4                     u10987:
  4294  001CE4  2EE8               	decfsz	wreg,f,c
  4295  001CE6  D7FE               	bra	u10987
  4296  001CE8  D000               	nop2	
  4297                           
  4298                           ;sort.c: 247: LATAbits.LATA4 = 0;
  4299  001CEA  9889               	bcf	3977,4,c	;volatile
  4300                           
  4301                           ;sort.c: 248: _delay((unsigned long)((15)*(32000000/4000000.0)));
  4302  001CEC  0E28               	movlw	40
  4303  001CEE                     u10997:
  4304  001CEE  2EE8               	decfsz	wreg,f,c
  4305  001CF0  D7FE               	bra	u10997
  4306                           
  4307                           ;sort.c: 249: break;
  4308  001CF2  D036               	goto	l8298
  4309  001CF4                     l857:
  4310                           
  4311                           ; BSR set to: 0
  4312                           ;sort.c: 251: LATAbits.LATA4 = 1;
  4313  001CF4  8889               	bsf	3977,4,c	;volatile
  4314                           
  4315                           ; BSR set to: 0
  4316                           ;sort.c: 252: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4317  001CF6  0EF0               	movlw	240
  4318  001CF8                     u11007:
  4319  001CF8  2EE8               	decfsz	wreg,f,c
  4320  001CFA  D7FE               	bra	u11007
  4321                           
  4322                           ;sort.c: 253: LATAbits.LATA4 = 0;
  4323  001CFC  9889               	bcf	3977,4,c	;volatile
  4324                           
  4325                           ;sort.c: 254: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4326  001CFE  0E1A               	movlw	26
  4327  001D00                     u11017:
  4328  001D00  2EE8               	decfsz	wreg,f,c
  4329  001D02  D7FE               	bra	u11017
  4330  001D04                     L3:
  4331  001D04  D000               	nop2	
  4332                           
  4333                           ;sort.c: 255: break;
  4334  001D06  D02C               	goto	l8298
  4335  001D08                     l858:
  4336                           
  4337                           ; BSR set to: 0
  4338                           ;sort.c: 257: LATAbits.LATA4 = 1;
  4339  001D08  8889               	bsf	3977,4,c	;volatile
  4340                           
  4341                           ; BSR set to: 0
  4342                           ;sort.c: 258: _delay((unsigned long)((95)*(32000000/4000000.0)));
  4343  001D0A  0EFD               	movlw	253
  4344  001D0C                     u11027:
  4345  001D0C  2EE8               	decfsz	wreg,f,c
  4346  001D0E  D7FE               	bra	u11027
  4347  001D10  F000               	nop	
  4348                           
  4349                           ;sort.c: 259: LATAbits.LATA4 = 0;
  4350  001D12  9889               	bcf	3977,4,c	;volatile
  4351                           
  4352                           ;sort.c: 260: _delay((unsigned long)((50)*(32000000/4000000.0)));
  4353  001D14  0E85               	movlw	133
  4354  001D16                     u11037:
  4355  001D16  2EE8               	decfsz	wreg,f,c
  4356  001D18  D7FE               	bra	u11037
  4357  001D1A                     L4:
  4358  001D1A  F000               	nop	
  4359                           
  4360                           ;sort.c: 261: break;
  4361  001D1C  D021               	goto	l8298
  4362  001D1E                     l859:
  4363                           
  4364                           ; BSR set to: 0
  4365                           ;sort.c: 263: LATAbits.LATA4 = 1;
  4366  001D1E  8889               	bsf	3977,4,c	;volatile
  4367                           
  4368                           ; BSR set to: 0
  4369                           ;sort.c: 264: _delay((unsigned long)((100)*(32000000/4000000.0)));
  4370  001D20  0EA0               	movlw	160
  4371  001D22                     u11047:
  4372  001D22  D000               	nop2	
  4373  001D24  2EE8               	decfsz	wreg,f,c
  4374  001D26  D7FD               	bra	u11047
  4375                           
  4376                           ;sort.c: 266: }
  4377                           
  4378                           ;sort.c: 265: break;
  4379  001D28  D01B               	goto	l8298
  4380  001D2A                     l8296:
  4381  001D2A  C0C3  F0B1         	movff	Loading@j,??_Loading
  4382  001D2E  C0C4  F0B2         	movff	Loading@j+1,??_Loading+1
  4383                           
  4384                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4385                           ; Switch size 1, requested type "space"
  4386                           ; Number of cases is 1, Range of values is 0 to 0
  4387                           ; switch strategies available:
  4388                           ; Name         Instructions Cycles
  4389                           ; simple_byte            4     3 (average)
  4390                           ;	Chosen strategy is simple_byte
  4391  001D32  0100               	movlb	0	; () banked
  4392  001D34  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4393  001D36  0A00               	xorlw	0	; case 0
  4394  001D38  A4D8               	btfss	status,2,c
  4395  001D3A  D7F1               	goto	l859
  4396                           
  4397                           ; BSR set to: 0
  4398                           ; Switch size 1, requested type "space"
  4399                           ; Number of cases is 5, Range of values is 0 to 4
  4400                           ; switch strategies available:
  4401                           ; Name         Instructions Cycles
  4402                           ; simple_byte           16     9 (average)
  4403                           ;	Chosen strategy is simple_byte
  4404  001D3C  0100               	movlb	0	; () banked
  4405  001D3E  51B1               	movf	??_Loading& (0+255),w,b
  4406  001D40  0A00               	xorlw	0	; case 0
  4407  001D42  B4D8               	btfsc	status,2,c
  4408  001D44  D7BA               	goto	l853
  4409  001D46  0A01               	xorlw	1	; case 1
  4410  001D48  B4D8               	btfsc	status,2,c
  4411  001D4A  D7C0               	goto	l855
  4412  001D4C  0A03               	xorlw	3	; case 2
  4413  001D4E  B4D8               	btfsc	status,2,c
  4414  001D50  D7C7               	goto	l856
  4415  001D52  0A01               	xorlw	1	; case 3
  4416  001D54  B4D8               	btfsc	status,2,c
  4417  001D56  D7CE               	goto	l857
  4418  001D58  0A07               	xorlw	7	; case 4
  4419  001D5A  B4D8               	btfsc	status,2,c
  4420  001D5C  D7D5               	goto	l858
  4421  001D5E  D7DF               	goto	l859
  4422  001D60                     l8298:
  4423  001D60  0100               	movlb	0	; () banked
  4424  001D62  4BBF               	infsnz	Loading@i_1142& (0+255),f,b
  4425  001D64  2BC0               	incf	(Loading@i_1142+1)& (0+255),f,b
  4426  001D66  D79D               	goto	l8268
  4427  001D68                     l851:
  4428                           
  4429                           ; BSR set to: 0
  4430                           ;sort.c: 267: }
  4431                           ;sort.c: 268: TMR2IE = 1;
  4432  001D68  829D               	bsf	3997,1,c	;volatile
  4433  001D6A                     l847:
  4434                           
  4435                           ;sort.c: 269: }
  4436                           ;sort.c: 270: }
  4437                           ;sort.c: 271: LATAbits.LATA4 = 0;
  4438  001D6A  9889               	bcf	3977,4,c	;volatile
  4439                           
  4440                           ;sort.c: 272: j++;
  4441  001D6C  0100               	movlb	0	; () banked
  4442  001D6E  4BC3               	infsnz	Loading@j& (0+255),f,b
  4443  001D70  2BC4               	incf	(Loading@j+1)& (0+255),f,b
  4444  001D72                     l8304:
  4445                           
  4446                           ; BSR set to: 0
  4447                           ;sort.c: 273: }
  4448                           ;sort.c: 275: if(!IR_signal){
  4449  001D72  0100               	movlb	0	; () banked
  4450  001D74  51E2               	movf	_IR_signal& (0+255),w,b
  4451  001D76  0100               	movlb	0	; () banked
  4452  001D78  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  4453  001D7A  A4D8               	btfss	status,2,c
  4454  001D7C  D01B               	goto	l8316
  4455                           
  4456                           ; BSR set to: 0
  4457                           ;sort.c: 276: _delay((unsigned long)((750)*(32000000/4000.0)));
  4458  001D7E  0E1F               	movlw	31
  4459  001D80  0100               	movlb	0	; () banked
  4460  001D82  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4461  001D84  0E71               	movlw	113
  4462  001D86  0100               	movlb	0	; () banked
  4463  001D88  6FB1               	movwf	??_Loading& (0+255),b
  4464  001D8A  0E1E               	movlw	30
  4465  001D8C                     u11057:
  4466  001D8C  2EE8               	decfsz	wreg,f,c
  4467  001D8E  D7FE               	bra	u11057
  4468  001D90  2FB1               	decfsz	??_Loading& (0+255),f,b
  4469  001D92  D7FC               	bra	u11057
  4470  001D94  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4471  001D96  D7FA               	bra	u11057
  4472  001D98  F000               	nop	
  4473                           
  4474                           ;sort.c: 277: readIR(0);
  4475  001D9A  0E00               	movlw	0
  4476  001D9C  0100               	movlb	0	; () banked
  4477  001D9E  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  4478  001DA0  0E00               	movlw	0
  4479  001DA2  6F82               	movwf	readIR@ana_port& (0+255),b
  4480  001DA4  EC90  F028         	call	_readIR	;wreg free
  4481                           
  4482                           ;sort.c: 278: if(IR_signal==1){
  4483  001DA8  0100               	movlb	0	; () banked
  4484  001DAA  05E2               	decf	_IR_signal& (0+255),w,b
  4485  001DAC  0100               	movlb	0	; () banked
  4486  001DAE  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  4487  001DB0  A4D8               	btfss	status,2,c
  4488  001DB2  D006               	goto	l863
  4489  001DB4                     l8316:
  4490                           
  4491                           ; BSR set to: 0
  4492  001DB4  0100               	movlb	0	; () banked
  4493  001DB6  05E2               	decf	_IR_signal& (0+255),w,b
  4494  001DB8  0100               	movlb	0	; () banked
  4495  001DBA  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  4496  001DBC  B4D8               	btfsc	status,2,c
  4497  001DBE  D6AC               	goto	l8222
  4498  001DC0                     l863:
  4499                           
  4500                           ; BSR set to: 0
  4501                           ;sort.c: 283: }
  4502                           ;sort.c: 284: }
  4503                           ;sort.c: 285: }
  4504                           ;sort.c: 286: LATBbits.LATB2 = 0;
  4505  001DC0  948A               	bcf	3978,2,c	;volatile
  4506  001DC2                     l8318:
  4507                           
  4508                           ; BSR set to: 0
  4509                           ;sort.c: 287: }
  4510                           ;sort.c: 288: f_can_coming_to_ID = 1;
  4511  001DC2  0E00               	movlw	0
  4512  001DC4  0101               	movlb	1	; () banked
  4513  001DC6  6F34               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4514  001DC8  0E01               	movlw	1
  4515  001DCA  6F33               	movwf	_f_can_coming_to_ID& (0+255),b
  4516                           
  4517                           ; BSR set to: 1
  4518                           
  4519                           ; BSR set to: 1
  4520  001DCC  0012               	return	
  4521  001DCE                     __end_of_Loading:
  4522                           	opt stack 0
  4523                           tblptru	equ	0xFF8
  4524                           tblptrh	equ	0xFF7
  4525                           tblptrl	equ	0xFF6
  4526                           tablat	equ	0xFF5
  4527                           prodh	equ	0xFF4
  4528                           prodl	equ	0xFF3
  4529                           postinc0	equ	0xFEE
  4530                           wreg	equ	0xFE8
  4531                           postdec1	equ	0xFE5
  4532                           fsr1l	equ	0xFE1
  4533                           status	equ	0xFD8
  4534                           
  4535 ;; *************** function _initSortTimer *****************
  4536 ;; Defined at:
  4537 ;;		line 505 in file "sort.c"
  4538 ;; Parameters:    Size  Location     Type
  4539 ;;		None
  4540 ;; Auto vars:     Size  Location     Type
  4541 ;;  i               2    8[BANK0 ] int 
  4542 ;; Return value:  Size  Location     Type
  4543 ;;                  1    wreg      void 
  4544 ;; Registers used:
  4545 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4546 ;; Tracked objects:
  4547 ;;		On entry : 0/0
  4548 ;;		On exit  : 0/0
  4549 ;;		Unchanged: 0/0
  4550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4552 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4553 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4554 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4555 ;;Total ram usage:        5 bytes
  4556 ;; Hardware stack levels used:    1
  4557 ;; Hardware stack levels required when called:   10
  4558 ;; This function calls:
  4559 ;;		_getRTC
  4560 ;; This function is called by:
  4561 ;;		_Loading
  4562 ;; This function uses a non-reentrant model
  4563 ;;
  4564                           
  4565                           	psect	text3
  4566  004FD4                     __ptext3:
  4567                           	opt stack 0
  4568  004FD4                     _initSortTimer:
  4569                           	opt stack 18
  4570                           
  4571                           ;sort.c: 507: getRTC();
  4572                           
  4573                           ;incstack = 0
  4574  004FD4  EC22  F029         	call	_getRTC	;wreg free
  4575                           
  4576                           ;sort.c: 508: for(int i = 0; i < 7; i++){
  4577  004FD8  0E00               	movlw	0
  4578  004FDA  0100               	movlb	0	; () banked
  4579  004FDC  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4580  004FDE  0E00               	movlw	0
  4581  004FE0  6F88               	movwf	initSortTimer@i& (0+255),b
  4582  004FE2                     l7596:
  4583                           
  4584                           ; BSR set to: 0
  4585  004FE2  0100               	movlb	0	; () banked
  4586  004FE4  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4587  004FE6  D008               	goto	l7600
  4588  004FE8  0100               	movlb	0	; () banked
  4589  004FEA  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4590  004FEC  E140               	bnz	l7606
  4591  004FEE  0E07               	movlw	7
  4592  004FF0  0100               	movlb	0	; () banked
  4593  004FF2  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4594  004FF4  B0D8               	btfsc	status,0,c
  4595  004FF6  D03B               	goto	l7606
  4596  004FF8                     l7600:
  4597                           
  4598                           ; BSR set to: 0
  4599                           ;sort.c: 509: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4600  004FF8  0E24               	movlw	low _time
  4601  004FFA  0100               	movlb	0	; () banked
  4602  004FFC  2588               	addwf	initSortTimer@i& (0+255),w,b
  4603  004FFE  6ED9               	movwf	fsr2l,c
  4604  005000  0E01               	movlw	high _time
  4605  005002  0100               	movlb	0	; () banked
  4606  005004  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4607  005006  6EDA               	movwf	fsr2h,c
  4608  005008  50DF               	movf	indf2,w,c
  4609  00500A  0100               	movlb	0	; () banked
  4610  00500C  6F85               	movwf	??_initSortTimer& (0+255),b
  4611  00500E  0100               	movlb	0	; () banked
  4612  005010  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4613  005012  0E0F               	movlw	15
  4614  005014  1785               	andwf	??_initSortTimer& (0+255),f,b
  4615  005016  0E0F               	movlw	15
  4616  005018  0100               	movlb	0	; () banked
  4617  00501A  1785               	andwf	??_initSortTimer& (0+255),f,b
  4618  00501C  0100               	movlb	0	; () banked
  4619  00501E  5185               	movf	??_initSortTimer& (0+255),w,b
  4620  005020  0D0A               	mullw	10
  4621  005022  0E24               	movlw	low _time
  4622  005024  0100               	movlb	0	; () banked
  4623  005026  2588               	addwf	initSortTimer@i& (0+255),w,b
  4624  005028  6ED9               	movwf	fsr2l,c
  4625  00502A  0E01               	movlw	high _time
  4626  00502C  0100               	movlb	0	; () banked
  4627  00502E  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4628  005030  6EDA               	movwf	fsr2h,c
  4629  005032  50DF               	movf	indf2,w,c
  4630  005034  0B0F               	andlw	15
  4631  005036  0100               	movlb	0	; () banked
  4632  005038  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4633  00503A  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4634  00503C  50F3               	movf	prodl,w,c
  4635  00503E  0100               	movlb	0	; () banked
  4636  005040  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4637  005042  50F4               	movf	prodh,w,c
  4638  005044  0100               	movlb	0	; () banked
  4639  005046  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4640  005048  90D8               	bcf	status,0,c
  4641  00504A  0100               	movlb	0	; () banked
  4642  00504C  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4643  00504E  6ED9               	movwf	fsr2l,c
  4644  005050  0100               	movlb	0	; () banked
  4645  005052  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4646  005054  6EDA               	movwf	fsr2h,c
  4647  005056  0E0E               	movlw	low _startTime
  4648  005058  26D9               	addwf	fsr2l,f,c
  4649  00505A  0E01               	movlw	high _startTime
  4650  00505C  22DA               	addwfc	fsr2h,f,c
  4651  00505E  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4652  005062  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4653                           
  4654                           ; BSR set to: 0
  4655  005066  0100               	movlb	0	; () banked
  4656  005068  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4657  00506A  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4658  00506C  D7BA               	goto	l7596
  4659  00506E                     l7606:
  4660                           
  4661                           ; BSR set to: 0
  4662                           ;sort.c: 510: }
  4663                           ;sort.c: 512: T0CON = 0b00010111;
  4664  00506E  0E17               	movlw	23
  4665  005070  6ED5               	movwf	4053,c	;volatile
  4666                           
  4667                           ;sort.c: 521: TMR0H = 0b10000101;
  4668  005072  0E85               	movlw	133
  4669  005074  6ED7               	movwf	4055,c	;volatile
  4670                           
  4671                           ;sort.c: 522: TMR0L = 0b11101110;
  4672  005076  0EEE               	movlw	238
  4673  005078  6ED6               	movwf	4054,c	;volatile
  4674                           
  4675                           ; BSR set to: 0
  4676                           ;sort.c: 523: TMR0ON = 1;
  4677  00507A  8ED5               	bsf	4053,7,c	;volatile
  4678                           
  4679                           ; BSR set to: 0
  4680  00507C  0012               	return		;funcret
  4681  00507E                     __end_of_initSortTimer:
  4682                           	opt stack 0
  4683                           tblptru	equ	0xFF8
  4684                           tblptrh	equ	0xFF7
  4685                           tblptrl	equ	0xFF6
  4686                           tablat	equ	0xFF5
  4687                           prodh	equ	0xFF4
  4688                           prodl	equ	0xFF3
  4689                           postinc0	equ	0xFEE
  4690                           wreg	equ	0xFE8
  4691                           postdec1	equ	0xFE5
  4692                           fsr1l	equ	0xFE1
  4693                           indf2	equ	0xFDF
  4694                           postinc2	equ	0xFDE
  4695                           postdec2	equ	0xFDD
  4696                           fsr2h	equ	0xFDA
  4697                           fsr2l	equ	0xFD9
  4698                           status	equ	0xFD8
  4699                           
  4700 ;; *************** function _initGlobalVars *****************
  4701 ;; Defined at:
  4702 ;;		line 468 in file "sort.c"
  4703 ;; Parameters:    Size  Location     Type
  4704 ;;		None
  4705 ;; Auto vars:     Size  Location     Type
  4706 ;;  time_recent_    2    0[BANK0 ] int 
  4707 ;; Return value:  Size  Location     Type
  4708 ;;                  1    wreg      void 
  4709 ;; Registers used:
  4710 ;;		wreg, status,2
  4711 ;; Tracked objects:
  4712 ;;		On entry : 0/0
  4713 ;;		On exit  : 0/0
  4714 ;;		Unchanged: 0/0
  4715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4717 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4719 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4720 ;;Total ram usage:        2 bytes
  4721 ;; Hardware stack levels used:    1
  4722 ;; Hardware stack levels required when called:    7
  4723 ;; This function calls:
  4724 ;;		Nothing
  4725 ;; This function is called by:
  4726 ;;		_Loading
  4727 ;; This function uses a non-reentrant model
  4728 ;;
  4729                           
  4730                           	psect	text4
  4731  004A48                     __ptext4:
  4732                           	opt stack 0
  4733  004A48                     _initGlobalVars:
  4734                           	opt stack 21
  4735                           
  4736                           ;sort.c: 470: first = 0;
  4737                           
  4738                           ; BSR set to: 0
  4739                           ;incstack = 0
  4740  004A48  0E00               	movlw	0
  4741  004A4A  0101               	movlb	1	; () banked
  4742  004A4C  6F3C               	movwf	(_first+1)& (0+255),b
  4743  004A4E  0E00               	movlw	0
  4744  004A50  6F3B               	movwf	_first& (0+255),b
  4745                           
  4746                           ;sort.c: 473: f_loadingNewCan = 0;
  4747  004A52  0E00               	movlw	0
  4748  004A54  0100               	movlb	0	; () banked
  4749  004A56  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4750  004A58  0E00               	movlw	0
  4751  004A5A  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  4752                           
  4753                           ;sort.c: 474: f_lastCan = 0;
  4754  004A5C  0E00               	movlw	0
  4755  004A5E  0100               	movlb	0	; () banked
  4756  004A60  6FED               	movwf	(_f_lastCan+1)& (0+255),b
  4757  004A62  0E00               	movlw	0
  4758  004A64  6FEC               	movwf	_f_lastCan& (0+255),b
  4759                           
  4760                           ;sort.c: 475: f_ID_receive = 1;
  4761  004A66  0E00               	movlw	0
  4762  004A68  0101               	movlb	1	; () banked
  4763  004A6A  6F32               	movwf	(_f_ID_receive+1)& (0+255),b
  4764  004A6C  0E01               	movlw	1
  4765  004A6E  6F31               	movwf	_f_ID_receive& (0+255),b
  4766                           
  4767                           ;sort.c: 476: f_can_coming_to_ID = 0;
  4768  004A70  0E00               	movlw	0
  4769  004A72  0101               	movlb	1	; () banked
  4770  004A74  6F34               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4771  004A76  0E00               	movlw	0
  4772  004A78  6F33               	movwf	_f_can_coming_to_ID& (0+255),b
  4773                           
  4774                           ;sort.c: 477: f_can_coming_to_distribution = 0;
  4775  004A7A  0E00               	movlw	0
  4776  004A7C  0101               	movlb	1	; () banked
  4777  004A7E  6F36               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4778  004A80  0E00               	movlw	0
  4779  004A82  6F35               	movwf	_f_can_coming_to_distribution& (0+255),b
  4780                           
  4781                           ;sort.c: 478: f_can_distributed = 1;
  4782  004A84  0E00               	movlw	0
  4783  004A86  0101               	movlb	1	; () banked
  4784  004A88  6F38               	movwf	(_f_can_distributed+1)& (0+255),b
  4785  004A8A  0E01               	movlw	1
  4786  004A8C  6F37               	movwf	_f_can_distributed& (0+255),b
  4787                           
  4788                           ;sort.c: 479: f_most_recent_sort_time = 0;
  4789  004A8E  0E00               	movlw	0
  4790  004A90  0101               	movlb	1	; () banked
  4791  004A92  6F3A               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4792  004A94  0E00               	movlw	0
  4793  004A96  6F39               	movwf	_f_most_recent_sort_time& (0+255),b
  4794                           
  4795                           ;sort.c: 482: count_total = 0;
  4796  004A98  0E00               	movlw	0
  4797  004A9A  0100               	movlb	0	; () banked
  4798  004A9C  6FFF               	movwf	(_count_total+1)& (0+255),b
  4799  004A9E  0E00               	movlw	0
  4800  004AA0  6FFE               	movwf	_count_total& (0+255),b
  4801                           
  4802                           ;sort.c: 483: count_pop_no_tab = 0;
  4803  004AA2  0E00               	movlw	0
  4804  004AA4  6E60               	movwf	_count_pop_no_tab+1,c
  4805  004AA6  0E00               	movlw	0
  4806  004AA8  6E5F               	movwf	_count_pop_no_tab,c
  4807                           
  4808                           ;sort.c: 484: count_pop_w_tab = 0;
  4809  004AAA  0E00               	movlw	0
  4810  004AAC  6E62               	movwf	_count_pop_w_tab+1,c
  4811  004AAE  0E00               	movlw	0
  4812  004AB0  6E61               	movwf	_count_pop_w_tab,c
  4813                           
  4814                           ;sort.c: 485: count_can_w_lab = 0;
  4815  004AB2  0E00               	movlw	0
  4816  004AB4  6E5E               	movwf	_count_can_w_lab+1,c
  4817  004AB6  0E00               	movlw	0
  4818  004AB8  6E5D               	movwf	_count_can_w_lab,c
  4819                           
  4820                           ;sort.c: 486: count_can_no_lab = 0;
  4821  004ABA  0E00               	movlw	0
  4822  004ABC  6E5C               	movwf	_count_can_no_lab+1,c
  4823  004ABE  0E00               	movlw	0
  4824  004AC0  6E5B               	movwf	_count_can_no_lab,c
  4825                           
  4826                           ;sort.c: 489: most_recent_sort_time = 999;
  4827  004AC2  0E03               	movlw	3
  4828  004AC4  0101               	movlb	1	; () banked
  4829  004AC6  6F48               	movwf	(_most_recent_sort_time+1)& (0+255),b
  4830  004AC8  0EE7               	movlw	231
  4831  004ACA  6F47               	movwf	_most_recent_sort_time& (0+255),b
  4832                           
  4833                           ;sort.c: 490: int time_recent_agitator = 0;
  4834  004ACC  0E00               	movlw	0
  4835  004ACE  0100               	movlb	0	; () banked
  4836  004AD0  6F81               	movwf	(initGlobalVars@time_recent_agitator+1)& (0+255),b
  4837  004AD2  0E00               	movlw	0
  4838  004AD4  6F80               	movwf	initGlobalVars@time_recent_agitator& (0+255),b
  4839                           
  4840                           ;sort.c: 493: motor_toggle_count = 0;
  4841  004AD6  0E00               	movlw	0
  4842  004AD8  0101               	movlb	1	; () banked
  4843  004ADA  6F4A               	movwf	(_motor_toggle_count+1)& (0+255),b
  4844  004ADC  0E00               	movlw	0
  4845  004ADE  6F49               	movwf	_motor_toggle_count& (0+255),b
  4846                           
  4847                           ;sort.c: 494: agitator_toggle_count = 0;
  4848  004AE0  0E00               	movlw	0
  4849  004AE2  0101               	movlb	1	; () banked
  4850  004AE4  6F2C               	movwf	(_agitator_toggle_count+1)& (0+255),b
  4851  004AE6  0E00               	movlw	0
  4852  004AE8  6F2B               	movwf	_agitator_toggle_count& (0+255),b
  4853                           
  4854                           ;sort.c: 497: servo_timer_counter = 0;
  4855  004AEA  0E00               	movlw	0
  4856  004AEC  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
  4857  004AEE  0E00               	movlw	0
  4858  004AF0  6E6D               	movwf	_servo_timer_counter,c	;volatile
  4859                           
  4860                           ;sort.c: 498: servo_timer_target = 9999;
  4861  004AF2  0E27               	movlw	39
  4862  004AF4  6E70               	movwf	_servo_timer_target+1,c	;volatile
  4863  004AF6  0E0F               	movlw	15
  4864  004AF8  6E6F               	movwf	_servo_timer_target,c	;volatile
  4865                           
  4866                           ;sort.c: 499: timer2_counter = 0;
  4867  004AFA  0E00               	movlw	0
  4868  004AFC  6E74               	movwf	_timer2_counter+1,c	;volatile
  4869  004AFE  0E00               	movlw	0
  4870  004B00  6E73               	movwf	_timer2_counter,c	;volatile
  4871                           
  4872                           ;sort.c: 500: f_arm_position = 0;
  4873  004B02  0E00               	movlw	0
  4874  004B04  0100               	movlb	0	; () banked
  4875  004B06  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  4876  004B08  0E00               	movlw	0
  4877  004B0A  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  4878                           
  4879                           ; BSR set to: 0
  4880                           ;sort.c: 501: pan_servo_state = -1;
  4881  004B0C  686B               	setf	_pan_servo_state,c	;volatile
  4882  004B0E  686C               	setf	_pan_servo_state+1,c	;volatile
  4883                           
  4884                           ; BSR set to: 0
  4885                           ;sort.c: 502: tilt_servo_state = -1;
  4886  004B10  6871               	setf	_tilt_servo_state,c	;volatile
  4887  004B12  6872               	setf	_tilt_servo_state+1,c	;volatile
  4888                           
  4889                           ;sort.c: 503: f_panning_to_bin = 0;
  4890  004B14  0E00               	movlw	0
  4891  004B16  6E68               	movwf	_f_panning_to_bin+1,c	;volatile
  4892  004B18  0E00               	movlw	0
  4893  004B1A  6E67               	movwf	_f_panning_to_bin,c	;volatile
  4894                           
  4895                           ; BSR set to: 0
  4896  004B1C  0012               	return		;funcret
  4897  004B1E                     __end_of_initGlobalVars:
  4898                           	opt stack 0
  4899                           tblptru	equ	0xFF8
  4900                           tblptrh	equ	0xFF7
  4901                           tblptrl	equ	0xFF6
  4902                           tablat	equ	0xFF5
  4903                           prodh	equ	0xFF4
  4904                           prodl	equ	0xFF3
  4905                           postinc0	equ	0xFEE
  4906                           wreg	equ	0xFE8
  4907                           postdec1	equ	0xFE5
  4908                           fsr1l	equ	0xFE1
  4909                           indf2	equ	0xFDF
  4910                           postinc2	equ	0xFDE
  4911                           postdec2	equ	0xFDD
  4912                           fsr2h	equ	0xFDA
  4913                           fsr2l	equ	0xFD9
  4914                           status	equ	0xFD8
  4915                           
  4916 ;; *************** function _getMAG *****************
  4917 ;; Defined at:
  4918 ;;		line 635 in file "sort.c"
  4919 ;; Parameters:    Size  Location     Type
  4920 ;;		None
  4921 ;; Auto vars:     Size  Location     Type
  4922 ;;		None
  4923 ;; Return value:  Size  Location     Type
  4924 ;;                  1    wreg      void 
  4925 ;; Registers used:
  4926 ;;		wreg, status,2, status,0, cstack
  4927 ;; Tracked objects:
  4928 ;;		On entry : 0/0
  4929 ;;		On exit  : 0/0
  4930 ;;		Unchanged: 0/0
  4931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4934 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4935 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4936 ;;Total ram usage:        2 bytes
  4937 ;; Hardware stack levels used:    1
  4938 ;; Hardware stack levels required when called:    9
  4939 ;; This function calls:
  4940 ;;		_readMAG
  4941 ;; This function is called by:
  4942 ;;		_Loading
  4943 ;; This function uses a non-reentrant model
  4944 ;;
  4945                           
  4946                           	psect	text5
  4947  005C2C                     __ptext5:
  4948                           	opt stack 0
  4949  005C2C                     _getMAG:
  4950                           	opt stack 19
  4951                           
  4952                           ;sort.c: 636: readMAG();
  4953                           
  4954                           ; BSR set to: 0
  4955                           ;incstack = 0
  4956  005C2C  ECE6  F02C         	call	_readMAG	;wreg free
  4957                           
  4958                           ;sort.c: 637: if(MAG_signal){
  4959  005C30  0100               	movlb	0	; () banked
  4960  005C32  51E4               	movf	_MAG_signal& (0+255),w,b
  4961  005C34  0100               	movlb	0	; () banked
  4962  005C36  11E5               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4963  005C38  B4D8               	btfsc	status,2,c
  4964  005C3A  0012               	return	
  4965                           
  4966                           ; BSR set to: 0
  4967                           ;sort.c: 638: _delay((unsigned long)((100)*(32000000/4000.0)));
  4968  005C3C  0E05               	movlw	5
  4969  005C3E  0100               	movlb	0	; () banked
  4970  005C40  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4971  005C42  0E0F               	movlw	15
  4972  005C44  0100               	movlb	0	; () banked
  4973  005C46  6F86               	movwf	??_getMAG& (0+255),b
  4974  005C48  0EF1               	movlw	241
  4975  005C4A                     u11067:
  4976  005C4A  2EE8               	decfsz	wreg,f,c
  4977  005C4C  D7FE               	bra	u11067
  4978  005C4E  2F86               	decfsz	??_getMAG& (0+255),f,b
  4979  005C50  D7FC               	bra	u11067
  4980  005C52  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4981  005C54  D7FA               	bra	u11067
  4982                           
  4983                           ;sort.c: 639: readMAG();
  4984  005C56  ECE6  F02C         	call	_readMAG	;wreg free
  4985  005C5A  0012               	return	
  4986  005C5C                     __end_of_getMAG:
  4987                           	opt stack 0
  4988                           tblptru	equ	0xFF8
  4989                           tblptrh	equ	0xFF7
  4990                           tblptrl	equ	0xFF6
  4991                           tablat	equ	0xFF5
  4992                           prodh	equ	0xFF4
  4993                           prodl	equ	0xFF3
  4994                           postinc0	equ	0xFEE
  4995                           wreg	equ	0xFE8
  4996                           postdec1	equ	0xFE5
  4997                           fsr1l	equ	0xFE1
  4998                           indf2	equ	0xFDF
  4999                           postinc2	equ	0xFDE
  5000                           postdec2	equ	0xFDD
  5001                           fsr2h	equ	0xFDA
  5002                           fsr2l	equ	0xFD9
  5003                           status	equ	0xFD8
  5004                           
  5005 ;; *************** function _getIR *****************
  5006 ;; Defined at:
  5007 ;;		line 619 in file "sort.c"
  5008 ;; Parameters:    Size  Location     Type
  5009 ;;  port            2    6[BANK0 ] int 
  5010 ;; Auto vars:     Size  Location     Type
  5011 ;;  i               2    9[BANK0 ] int 
  5012 ;; Return value:  Size  Location     Type
  5013 ;;                  1    wreg      void 
  5014 ;; Registers used:
  5015 ;;		wreg, status,2, status,0, cstack
  5016 ;; Tracked objects:
  5017 ;;		On entry : 0/0
  5018 ;;		On exit  : 0/0
  5019 ;;		Unchanged: 0/0
  5020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5021 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5022 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5023 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5024 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5025 ;;Total ram usage:        5 bytes
  5026 ;; Hardware stack levels used:    1
  5027 ;; Hardware stack levels required when called:    9
  5028 ;; This function calls:
  5029 ;;		_readIR
  5030 ;; This function is called by:
  5031 ;;		_Loading
  5032 ;; This function uses a non-reentrant model
  5033 ;;
  5034                           
  5035                           	psect	text6
  5036  0053D4                     __ptext6:
  5037                           	opt stack 0
  5038  0053D4                     _getIR:
  5039                           	opt stack 19
  5040                           
  5041                           ;sort.c: 620: readIR(port);
  5042                           
  5043                           ;incstack = 0
  5044  0053D4  C086  F082         	movff	getIR@port,readIR@ana_port
  5045  0053D8  C087  F083         	movff	getIR@port+1,readIR@ana_port+1
  5046  0053DC  EC90  F028         	call	_readIR	;wreg free
  5047                           
  5048                           ;sort.c: 621: for(int i = 0; i < 150; i++){
  5049  0053E0  0E00               	movlw	0
  5050  0053E2  0100               	movlb	0	; () banked
  5051  0053E4  6F8A               	movwf	(getIR@i+1)& (0+255),b
  5052  0053E6  0E00               	movlw	0
  5053  0053E8  6F89               	movwf	getIR@i& (0+255),b
  5054  0053EA                     l7696:
  5055                           
  5056                           ; BSR set to: 0
  5057  0053EA  0100               	movlb	0	; () banked
  5058  0053EC  BF8A               	btfsc	(getIR@i+1)& (0+255),7,b
  5059  0053EE  D008               	goto	l7700
  5060  0053F0  0100               	movlb	0	; () banked
  5061  0053F2  518A               	movf	(getIR@i+1)& (0+255),w,b
  5062  0053F4  E11E               	bnz	l7712
  5063  0053F6  0E96               	movlw	150
  5064  0053F8  0100               	movlb	0	; () banked
  5065  0053FA  5D89               	subwf	getIR@i& (0+255),w,b
  5066  0053FC  B0D8               	btfsc	status,0,c
  5067  0053FE  D019               	goto	l7712
  5068  005400                     l7700:
  5069                           
  5070                           ; BSR set to: 0
  5071                           ;sort.c: 622: _delay((unsigned long)((500)*(32000000/4000000.0)));
  5072  005400  0E06               	movlw	6
  5073  005402  0100               	movlb	0	; () banked
  5074  005404  6F88               	movwf	??_getIR& (0+255),b
  5075  005406  0E30               	movlw	48
  5076  005408                     u11077:
  5077  005408  2EE8               	decfsz	wreg,f,c
  5078  00540A  D7FE               	bra	u11077
  5079  00540C  2F88               	decfsz	??_getIR& (0+255),f,b
  5080  00540E  D7FC               	bra	u11077
  5081  005410  F000               	nop	
  5082                           
  5083                           ;sort.c: 623: readIR(port);
  5084  005412  C086  F082         	movff	getIR@port,readIR@ana_port
  5085  005416  C087  F083         	movff	getIR@port+1,readIR@ana_port+1
  5086  00541A  EC90  F028         	call	_readIR	;wreg free
  5087                           
  5088                           ;sort.c: 624: if(!IR_signal){
  5089  00541E  0100               	movlb	0	; () banked
  5090  005420  51E2               	movf	_IR_signal& (0+255),w,b
  5091  005422  0100               	movlb	0	; () banked
  5092  005424  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  5093  005426  B4D8               	btfsc	status,2,c
  5094  005428  D004               	goto	l7712
  5095                           
  5096                           ; BSR set to: 0
  5097                           
  5098                           ; BSR set to: 0
  5099                           
  5100                           ; BSR set to: 0
  5101                           ;sort.c: 625: break;
  5102  00542A  0100               	movlb	0	; () banked
  5103  00542C  4B89               	infsnz	getIR@i& (0+255),f,b
  5104  00542E  2B8A               	incf	(getIR@i+1)& (0+255),f,b
  5105  005430  D7DC               	goto	l7696
  5106  005432                     l7712:
  5107                           
  5108                           ; BSR set to: 0
  5109                           ;sort.c: 626: }
  5110                           ;sort.c: 627: }
  5111                           ;sort.c: 628: if(IR_signal==1){
  5112  005432  0100               	movlb	0	; () banked
  5113  005434  05E2               	decf	_IR_signal& (0+255),w,b
  5114  005436  0100               	movlb	0	; () banked
  5115  005438  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  5116  00543A  A4D8               	btfss	status,2,c
  5117  00543C  D006               	goto	l7716
  5118                           
  5119                           ; BSR set to: 0
  5120                           ;sort.c: 629: f_loadingNewCan = 1;
  5121  00543E  0E00               	movlw	0
  5122  005440  0100               	movlb	0	; () banked
  5123  005442  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  5124  005444  0E01               	movlw	1
  5125  005446  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  5126                           
  5127                           ;sort.c: 630: }
  5128  005448  0012               	return	
  5129  00544A                     l7716:
  5130                           
  5131                           ; BSR set to: 0
  5132                           ;sort.c: 631: else{
  5133                           ;sort.c: 632: f_loadingNewCan = 0;
  5134  00544A  0E00               	movlw	0
  5135  00544C  0100               	movlb	0	; () banked
  5136  00544E  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  5137  005450  0E00               	movlw	0
  5138  005452  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  5139  005454  0012               	return	
  5140  005456                     __end_of_getIR:
  5141                           	opt stack 0
  5142                           tblptru	equ	0xFF8
  5143                           tblptrh	equ	0xFF7
  5144                           tblptrl	equ	0xFF6
  5145                           tablat	equ	0xFF5
  5146                           prodh	equ	0xFF4
  5147                           prodl	equ	0xFF3
  5148                           postinc0	equ	0xFEE
  5149                           wreg	equ	0xFE8
  5150                           postdec1	equ	0xFE5
  5151                           fsr1l	equ	0xFE1
  5152                           indf2	equ	0xFDF
  5153                           postinc2	equ	0xFDE
  5154                           postdec2	equ	0xFDD
  5155                           fsr2h	equ	0xFDA
  5156                           fsr2l	equ	0xFD9
  5157                           status	equ	0xFD8
  5158                           
  5159 ;; *************** function _ID *****************
  5160 ;; Defined at:
  5161 ;;		line 292 in file "sort.c"
  5162 ;; Parameters:    Size  Location     Type
  5163 ;;		None
  5164 ;; Auto vars:     Size  Location     Type
  5165 ;;  i               2   45[BANK0 ] int 
  5166 ;;  i               2   58[BANK0 ] int 
  5167 ;;  j               2   60[BANK0 ] int 
  5168 ;;  i               2   43[BANK0 ] int 
  5169 ;;  i               2   41[BANK0 ] int 
  5170 ;;  i               2   47[BANK0 ] int 
  5171 ;;  res             4   54[BANK0 ] int [2]
  5172 ;;  time            1   35[BANK0 ] const unsigned char 
  5173 ;;  res2            2   52[BANK0 ] int 
  5174 ;;  res1            2   50[BANK0 ] int 
  5175 ;;  time            1   49[BANK0 ] const unsigned char 
  5176 ;;  n               2   62[BANK0 ] const int 
  5177 ;;  reflectivity    2   33[BANK0 ] int 
  5178 ;;  cond1           2   31[BANK0 ] int 
  5179 ;;  reflectivity    2   29[BANK0 ] int 
  5180 ;; Return value:  Size  Location     Type
  5181 ;;                  1    wreg      void 
  5182 ;; Registers used:
  5183 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5184 ;; Tracked objects:
  5185 ;;		On entry : 0/0
  5186 ;;		On exit  : 0/0
  5187 ;;		Unchanged: 0/0
  5188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5190 ;;      Locals:         0      35       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5191 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5192 ;;      Totals:         0      37       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5193 ;;Total ram usage:       37 bytes
  5194 ;; Hardware stack levels used:    1
  5195 ;; Hardware stack levels required when called:    9
  5196 ;; This function calls:
  5197 ;;		___awdiv
  5198 ;;		___awtoft
  5199 ;;		___ftge
  5200 ;;		_delay_ms
  5201 ;;		_readCOND
  5202 ;;		_readIR
  5203 ;; This function is called by:
  5204 ;;		_sort
  5205 ;; This function uses a non-reentrant model
  5206 ;;
  5207                           
  5208                           	psect	text7
  5209  001192                     __ptext7:
  5210                           	opt stack 0
  5211  001192                     _ID:
  5212                           	opt stack 20
  5213                           
  5214                           ;sort.c: 293: if(f_can_coming_to_ID){
  5215                           
  5216                           ; BSR set to: 0
  5217                           ;incstack = 0
  5218  001192  0101               	movlb	1	; () banked
  5219  001194  5133               	movf	_f_can_coming_to_ID& (0+255),w,b
  5220  001196  0101               	movlb	1	; () banked
  5221  001198  1134               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  5222  00119A  B4D8               	btfsc	status,2,c
  5223  00119C  0012               	return	
  5224                           
  5225                           ; BSR set to: 1
  5226                           ;sort.c: 295: _delay((unsigned long)((750)*(32000000/4000.0)));
  5227  00119E  0E1F               	movlw	31
  5228  0011A0  0100               	movlb	0	; () banked
  5229  0011A2  6F9C               	movwf	(??_ID+1)& (0+255),b
  5230  0011A4  0E71               	movlw	113
  5231  0011A6  0100               	movlb	0	; () banked
  5232  0011A8  6F9B               	movwf	??_ID& (0+255),b
  5233  0011AA  0E1E               	movlw	30
  5234  0011AC                     u11087:
  5235  0011AC  2EE8               	decfsz	wreg,f,c
  5236  0011AE  D7FE               	bra	u11087
  5237  0011B0  2F9B               	decfsz	??_ID& (0+255),f,b
  5238  0011B2  D7FC               	bra	u11087
  5239  0011B4  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5240  0011B6  D7FA               	bra	u11087
  5241  0011B8  F000               	nop	
  5242                           
  5243                           ;sort.c: 297: f_arm_position = 0;
  5244  0011BA  0E00               	movlw	0
  5245  0011BC  0100               	movlb	0	; () banked
  5246  0011BE  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  5247  0011C0  0E00               	movlw	0
  5248  0011C2  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  5249                           
  5250                           ; BSR set to: 0
  5251                           ;sort.c: 299: if(sensor_outputs[0]){
  5252  0011C4  0100               	movlb	0	; () banked
  5253  0011C6  51DA               	movf	_sensor_outputs& (0+255),w,b
  5254  0011C8  0100               	movlb	0	; () banked
  5255  0011CA  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5256  0011CC  B4D8               	btfsc	status,2,c
  5257  0011CE  D031               	goto	l8352
  5258                           
  5259                           ; BSR set to: 0
  5260                           ;sort.c: 301: readIR(3);
  5261  0011D0  0E00               	movlw	0
  5262  0011D2  0100               	movlb	0	; () banked
  5263  0011D4  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  5264  0011D6  0E03               	movlw	3
  5265  0011D8  6F82               	movwf	readIR@ana_port& (0+255),b
  5266  0011DA  EC90  F028         	call	_readIR	;wreg free
  5267                           
  5268                           ;sort.c: 302: sensor_outputs[1] = IR_signal;
  5269  0011DE  C0E2  F0DC         	movff	_IR_signal,_sensor_outputs+2
  5270  0011E2  C0E3  F0DD         	movff	_IR_signal+1,_sensor_outputs+3
  5271                           
  5272                           ;sort.c: 303: _delay((unsigned long)((10)*(32000000/4000.0)));
  5273  0011E6  0E68               	movlw	104
  5274  0011E8  0100               	movlb	0	; () banked
  5275  0011EA  6F9B               	movwf	??_ID& (0+255),b
  5276  0011EC  0EE4               	movlw	228
  5277  0011EE                     u11097:
  5278  0011EE  2EE8               	decfsz	wreg,f,c
  5279  0011F0  D7FE               	bra	u11097
  5280  0011F2  2F9B               	decfsz	??_ID& (0+255),f,b
  5281  0011F4  D7FC               	bra	u11097
  5282  0011F6  F000               	nop	
  5283                           
  5284                           ;sort.c: 304: readIR(3);
  5285  0011F8  0E00               	movlw	0
  5286  0011FA  0100               	movlb	0	; () banked
  5287  0011FC  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  5288  0011FE  0E03               	movlw	3
  5289  001200  6F82               	movwf	readIR@ana_port& (0+255),b
  5290  001202  EC90  F028         	call	_readIR	;wreg free
  5291                           
  5292                           ;sort.c: 305: sensor_outputs[1] = sensor_outputs[1] || IR_signal;
  5293  001206  0E01               	movlw	1
  5294  001208  0100               	movlb	0	; () banked
  5295  00120A  6FA4               	movwf	_ID$1144& (0+255),b
  5296                           
  5297                           ; BSR set to: 0
  5298  00120C  0100               	movlb	0	; () banked
  5299  00120E  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5300  001210  0100               	movlb	0	; () banked
  5301  001212  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5302  001214  A4D8               	btfss	status,2,c
  5303  001216  D009               	goto	l8350
  5304                           
  5305                           ; BSR set to: 0
  5306  001218  0100               	movlb	0	; () banked
  5307  00121A  51E2               	movf	_IR_signal& (0+255),w,b
  5308  00121C  0100               	movlb	0	; () banked
  5309  00121E  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  5310  001220  A4D8               	btfss	status,2,c
  5311  001222  D003               	goto	l8350
  5312                           
  5313                           ; BSR set to: 0
  5314  001224  0E00               	movlw	0
  5315  001226  0100               	movlb	0	; () banked
  5316  001228  6FA4               	movwf	_ID$1144& (0+255),b
  5317  00122A                     l8350:
  5318                           
  5319                           ; BSR set to: 0
  5320  00122A  C0A4  F0DC         	movff	_ID$1144,_sensor_outputs+2
  5321  00122E  0100               	movlb	0	; () banked
  5322  001230  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5323  001232                     l8352:
  5324                           
  5325                           ; BSR set to: 0
  5326                           ;sort.c: 306: }
  5327                           ;sort.c: 307: int reflectivity1 = IR_res;
  5328  001232  C0E0  F09D         	movff	_IR_res,ID@reflectivity1
  5329  001236  C0E1  F09E         	movff	_IR_res+1,ID@reflectivity1+1
  5330                           
  5331                           ; BSR set to: 0
  5332                           ;sort.c: 309: LATCbits.LATC7 = 1;
  5333  00123A  8E8B               	bsf	3979,7,c	;volatile
  5334                           
  5335                           ;sort.c: 312: const int n = 10;
  5336  00123C  0E00               	movlw	0
  5337  00123E  0100               	movlb	0	; () banked
  5338  001240  6FBF               	movwf	(ID@n+1)& (0+255),b
  5339  001242  0E0A               	movlw	10
  5340  001244  6FBE               	movwf	ID@n& (0+255),b
  5341                           
  5342                           ; BSR set to: 0
  5343                           ;sort.c: 314: if(!sensor_outputs[0]){
  5344  001246  0100               	movlb	0	; () banked
  5345  001248  51DA               	movf	_sensor_outputs& (0+255),w,b
  5346  00124A  0100               	movlb	0	; () banked
  5347  00124C  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5348  00124E  A4D8               	btfss	status,2,c
  5349  001250  D0E3               	goto	l8408
  5350                           
  5351                           ; BSR set to: 0
  5352                           ;sort.c: 315: const unsigned char time = (600 / n);
  5353  001252  0E02               	movlw	2
  5354  001254  0100               	movlb	0	; () banked
  5355  001256  6F87               	movwf	(___awdiv@dividend+1)& (0+255),b
  5356  001258  0E58               	movlw	88
  5357  00125A  6F86               	movwf	___awdiv@dividend& (0+255),b
  5358  00125C  C0BE  F088         	movff	ID@n,___awdiv@divisor
  5359  001260  C0BF  F089         	movff	ID@n+1,___awdiv@divisor+1
  5360  001264  EC2D  F027         	call	___awdiv	;wreg free
  5361  001268  0100               	movlb	0	; () banked
  5362  00126A  5186               	movf	?___awdiv& (0+255),w,b
  5363  00126C  0100               	movlb	0	; () banked
  5364  00126E  6FB1               	movwf	ID@time& (0+255),b
  5365                           
  5366                           ; BSR set to: 0
  5367                           ;sort.c: 316: int res1 = 0;
  5368  001270  0E00               	movlw	0
  5369  001272  0100               	movlb	0	; () banked
  5370  001274  6FB3               	movwf	(ID@res1+1)& (0+255),b
  5371  001276  0E00               	movlw	0
  5372  001278  6FB2               	movwf	ID@res1& (0+255),b
  5373                           
  5374                           ; BSR set to: 0
  5375                           ;sort.c: 317: int res2 = 0;
  5376  00127A  0E00               	movlw	0
  5377  00127C  0100               	movlb	0	; () banked
  5378  00127E  6FB5               	movwf	(ID@res2+1)& (0+255),b
  5379  001280  0E00               	movlw	0
  5380  001282  6FB4               	movwf	ID@res2& (0+255),b
  5381                           
  5382                           ; BSR set to: 0
  5383                           ;sort.c: 318: for(int i = 0; i<n; i++){
  5384  001284  0E00               	movlw	0
  5385  001286  0100               	movlb	0	; () banked
  5386  001288  6FAA               	movwf	(ID@i+1)& (0+255),b
  5387  00128A  0E00               	movlw	0
  5388  00128C  6FA9               	movwf	ID@i& (0+255),b
  5389  00128E                     l8366:
  5390                           
  5391                           ; BSR set to: 0
  5392  00128E  0100               	movlb	0	; () banked
  5393  001290  51BE               	movf	ID@n& (0+255),w,b
  5394  001292  0100               	movlb	0	; () banked
  5395  001294  5DA9               	subwf	ID@i& (0+255),w,b
  5396  001296  0100               	movlb	0	; () banked
  5397  001298  51AA               	movf	(ID@i+1)& (0+255),w,b
  5398  00129A  0A80               	xorlw	128
  5399  00129C  0100               	movlb	0	; () banked
  5400  00129E  6F9B               	movwf	??_ID& (0+255),b
  5401  0012A0  0100               	movlb	0	; () banked
  5402  0012A2  51BF               	movf	(ID@n+1)& (0+255),w,b
  5403  0012A4  0A80               	xorlw	128
  5404  0012A6  0100               	movlb	0	; () banked
  5405  0012A8  599B               	subwfb	??_ID& (0+255),w,b
  5406  0012AA  B0D8               	btfsc	status,0,c
  5407  0012AC  D012               	goto	l872
  5408                           
  5409                           ; BSR set to: 0
  5410                           ;sort.c: 319: delay_ms(time);
  5411                           
  5412                           ; BSR set to: 0
  5413                           
  5414                           ; BSR set to: 0
  5415  0012AE  0100               	movlb	0	; () banked
  5416  0012B0  51B1               	movf	ID@time& (0+255),w,b
  5417  0012B2  EC8D  F02F         	call	_delay_ms
  5418                           
  5419                           ;sort.c: 320: readCOND();
  5420  0012B6  ECC0  F02C         	call	_readCOND	;wreg free
  5421                           
  5422                           ;sort.c: 321: res1 += COND_signal;
  5423  0012BA  0100               	movlb	0	; () banked
  5424  0012BC  51DE               	movf	_COND_signal& (0+255),w,b
  5425  0012BE  0100               	movlb	0	; () banked
  5426  0012C0  27B2               	addwf	ID@res1& (0+255),f,b
  5427  0012C2  0100               	movlb	0	; () banked
  5428  0012C4  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5429  0012C6  0100               	movlb	0	; () banked
  5430  0012C8  23B3               	addwfc	(ID@res1+1)& (0+255),f,b
  5431                           
  5432                           ; BSR set to: 0
  5433  0012CA  0100               	movlb	0	; () banked
  5434  0012CC  4BA9               	infsnz	ID@i& (0+255),f,b
  5435  0012CE  2BAA               	incf	(ID@i+1)& (0+255),f,b
  5436  0012D0  D7DE               	goto	l8366
  5437  0012D2                     l872:
  5438                           
  5439                           ; BSR set to: 0
  5440                           ;sort.c: 322: }
  5441                           ;sort.c: 323: LATCbits.LATC7 = 0;
  5442  0012D2  9E8B               	bcf	3979,7,c	;volatile
  5443                           
  5444                           ; BSR set to: 0
  5445                           ;sort.c: 324: _delay((unsigned long)((200)*(32000000/4000.0)));
  5446  0012D4  0E09               	movlw	9
  5447  0012D6  0100               	movlb	0	; () banked
  5448  0012D8  6F9C               	movwf	(??_ID+1)& (0+255),b
  5449  0012DA  0E1E               	movlw	30
  5450  0012DC  0100               	movlb	0	; () banked
  5451  0012DE  6F9B               	movwf	??_ID& (0+255),b
  5452  0012E0  0EE4               	movlw	228
  5453  0012E2                     u11107:
  5454  0012E2  2EE8               	decfsz	wreg,f,c
  5455  0012E4  D7FE               	bra	u11107
  5456  0012E6  2F9B               	decfsz	??_ID& (0+255),f,b
  5457  0012E8  D7FC               	bra	u11107
  5458  0012EA  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5459  0012EC  D7FA               	bra	u11107
  5460  0012EE  F000               	nop	
  5461                           
  5462                           ;sort.c: 325: LATCbits.LATC7 = 1;
  5463  0012F0  8E8B               	bsf	3979,7,c	;volatile
  5464                           
  5465                           ;sort.c: 326: for(int i = 0; i<n; i++){
  5466  0012F2  0E00               	movlw	0
  5467  0012F4  0100               	movlb	0	; () banked
  5468  0012F6  6FAC               	movwf	(ID@i_1152+1)& (0+255),b
  5469  0012F8  0E00               	movlw	0
  5470  0012FA  6FAB               	movwf	ID@i_1152& (0+255),b
  5471  0012FC                     l8384:
  5472                           
  5473                           ; BSR set to: 0
  5474  0012FC  0100               	movlb	0	; () banked
  5475  0012FE  51BE               	movf	ID@n& (0+255),w,b
  5476  001300  0100               	movlb	0	; () banked
  5477  001302  5DAB               	subwf	ID@i_1152& (0+255),w,b
  5478  001304  0100               	movlb	0	; () banked
  5479  001306  51AC               	movf	(ID@i_1152+1)& (0+255),w,b
  5480  001308  0A80               	xorlw	128
  5481  00130A  0100               	movlb	0	; () banked
  5482  00130C  6F9B               	movwf	??_ID& (0+255),b
  5483  00130E  0100               	movlb	0	; () banked
  5484  001310  51BF               	movf	(ID@n+1)& (0+255),w,b
  5485  001312  0A80               	xorlw	128
  5486  001314  0100               	movlb	0	; () banked
  5487  001316  599B               	subwfb	??_ID& (0+255),w,b
  5488  001318  B0D8               	btfsc	status,0,c
  5489  00131A  D012               	goto	l874
  5490                           
  5491                           ; BSR set to: 0
  5492                           ;sort.c: 327: delay_ms(time);
  5493                           
  5494                           ; BSR set to: 0
  5495                           
  5496                           ; BSR set to: 0
  5497  00131C  0100               	movlb	0	; () banked
  5498  00131E  51B1               	movf	ID@time& (0+255),w,b
  5499  001320  EC8D  F02F         	call	_delay_ms
  5500                           
  5501                           ;sort.c: 328: readCOND();
  5502  001324  ECC0  F02C         	call	_readCOND	;wreg free
  5503                           
  5504                           ;sort.c: 329: res2 += COND_signal;
  5505  001328  0100               	movlb	0	; () banked
  5506  00132A  51DE               	movf	_COND_signal& (0+255),w,b
  5507  00132C  0100               	movlb	0	; () banked
  5508  00132E  27B4               	addwf	ID@res2& (0+255),f,b
  5509  001330  0100               	movlb	0	; () banked
  5510  001332  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5511  001334  0100               	movlb	0	; () banked
  5512  001336  23B5               	addwfc	(ID@res2+1)& (0+255),f,b
  5513                           
  5514                           ; BSR set to: 0
  5515  001338  0100               	movlb	0	; () banked
  5516  00133A  4BAB               	infsnz	ID@i_1152& (0+255),f,b
  5517  00133C  2BAC               	incf	(ID@i_1152+1)& (0+255),f,b
  5518  00133E  D7DE               	goto	l8384
  5519  001340                     l874:
  5520                           
  5521                           ; BSR set to: 0
  5522                           ;sort.c: 330: }
  5523                           ;sort.c: 331: LATCbits.LATC7 = 0;
  5524  001340  9E8B               	bcf	3979,7,c	;volatile
  5525                           
  5526                           ; BSR set to: 0
  5527                           ;sort.c: 332: res1 = ((res1 / n) > 0.3) ? 1 : 0;
  5528  001342  0E9A               	movlw	154
  5529  001344  0100               	movlb	0	; () banked
  5530  001346  6F92               	movwf	___ftge@ff1& (0+255),b
  5531  001348  0E99               	movlw	153
  5532  00134A  0100               	movlb	0	; () banked
  5533  00134C  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5534  00134E  0E3E               	movlw	62
  5535  001350  0100               	movlb	0	; () banked
  5536  001352  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5537  001354  C0BE  F088         	movff	ID@n,___awdiv@divisor
  5538  001358  C0BF  F089         	movff	ID@n+1,___awdiv@divisor+1
  5539  00135C  C0B2  F086         	movff	ID@res1,___awdiv@dividend
  5540  001360  C0B3  F087         	movff	ID@res1+1,___awdiv@dividend+1
  5541  001364  EC2D  F027         	call	___awdiv	;wreg free
  5542  001368  C086  F08E         	movff	?___awdiv,___awtoft@c
  5543  00136C  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5544  001370  EC2F  F02D         	call	___awtoft	;wreg free
  5545  001374  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5546  001378  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5547  00137C  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5548  001380  ECC9  F026         	call	___ftge	;wreg free
  5549  001384  0100               	movlb	0	; () banked
  5550  001386  B0D8               	btfsc	status,0,c
  5551  001388  D002               	goto	u7430
  5552  00138A  0E01               	movlw	1
  5553  00138C  D001               	goto	u7440
  5554  00138E                     u7430:
  5555  00138E  0E00               	movlw	0
  5556  001390                     u7440:
  5557  001390  0100               	movlb	0	; () banked
  5558  001392  6FB2               	movwf	ID@res1& (0+255),b
  5559  001394  6BB3               	clrf	(ID@res1+1)& (0+255),b
  5560                           
  5561                           ;sort.c: 333: res2 = ((res2 / n) > 0.3) ? 1 : 0;
  5562  001396  0E9A               	movlw	154
  5563  001398  0100               	movlb	0	; () banked
  5564  00139A  6F92               	movwf	___ftge@ff1& (0+255),b
  5565  00139C  0E99               	movlw	153
  5566  00139E  0100               	movlb	0	; () banked
  5567  0013A0  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5568  0013A2  0E3E               	movlw	62
  5569  0013A4  0100               	movlb	0	; () banked
  5570  0013A6  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5571  0013A8  C0BE  F088         	movff	ID@n,___awdiv@divisor
  5572  0013AC  C0BF  F089         	movff	ID@n+1,___awdiv@divisor+1
  5573  0013B0  C0B4  F086         	movff	ID@res2,___awdiv@dividend
  5574  0013B4  C0B5  F087         	movff	ID@res2+1,___awdiv@dividend+1
  5575  0013B8  EC2D  F027         	call	___awdiv	;wreg free
  5576  0013BC  C086  F08E         	movff	?___awdiv,___awtoft@c
  5577  0013C0  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5578  0013C4  EC2F  F02D         	call	___awtoft	;wreg free
  5579  0013C8  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5580  0013CC  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5581  0013D0  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5582  0013D4  ECC9  F026         	call	___ftge	;wreg free
  5583  0013D8  0100               	movlb	0	; () banked
  5584  0013DA  B0D8               	btfsc	status,0,c
  5585  0013DC  D002               	goto	u7450
  5586  0013DE  0E01               	movlw	1
  5587  0013E0  D001               	goto	u7460
  5588  0013E2                     u7450:
  5589  0013E2  0E00               	movlw	0
  5590  0013E4                     u7460:
  5591  0013E4  0100               	movlb	0	; () banked
  5592  0013E6  6FB4               	movwf	ID@res2& (0+255),b
  5593  0013E8  6BB5               	clrf	(ID@res2+1)& (0+255),b
  5594                           
  5595                           ; BSR set to: 0
  5596                           ;sort.c: 336: sensor_outputs[1] = (res1 || res2);
  5597  0013EA  0E01               	movlw	1
  5598  0013EC  0100               	movlb	0	; () banked
  5599  0013EE  6FA5               	movwf	_ID$1153& (0+255),b
  5600                           
  5601                           ; BSR set to: 0
  5602  0013F0  0100               	movlb	0	; () banked
  5603  0013F2  51B2               	movf	ID@res1& (0+255),w,b
  5604  0013F4  0100               	movlb	0	; () banked
  5605  0013F6  11B3               	iorwf	(ID@res1+1)& (0+255),w,b
  5606  0013F8  A4D8               	btfss	status,2,c
  5607  0013FA  D009               	goto	l8406
  5608                           
  5609                           ; BSR set to: 0
  5610  0013FC  0100               	movlb	0	; () banked
  5611  0013FE  51B4               	movf	ID@res2& (0+255),w,b
  5612  001400  0100               	movlb	0	; () banked
  5613  001402  11B5               	iorwf	(ID@res2+1)& (0+255),w,b
  5614  001404  A4D8               	btfss	status,2,c
  5615  001406  D003               	goto	l8406
  5616                           
  5617                           ; BSR set to: 0
  5618  001408  0E00               	movlw	0
  5619  00140A  0100               	movlb	0	; () banked
  5620  00140C  6FA5               	movwf	_ID$1153& (0+255),b
  5621  00140E                     l8406:
  5622                           
  5623                           ; BSR set to: 0
  5624  00140E  C0A5  F0DC         	movff	_ID$1153,_sensor_outputs+2
  5625  001412  0100               	movlb	0	; () banked
  5626  001414  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5627                           
  5628                           ;sort.c: 337: }
  5629  001416  D0E3               	goto	l877
  5630  001418                     l8408:
  5631                           
  5632                           ; BSR set to: 0
  5633                           ;sort.c: 338: else{
  5634                           ;sort.c: 339: const unsigned char time = (400 / n);
  5635  001418  0E01               	movlw	1
  5636  00141A  0100               	movlb	0	; () banked
  5637  00141C  6F87               	movwf	(___awdiv@dividend+1)& (0+255),b
  5638  00141E  0E90               	movlw	144
  5639  001420  6F86               	movwf	___awdiv@dividend& (0+255),b
  5640  001422  C0BE  F088         	movff	ID@n,___awdiv@divisor
  5641  001426  C0BF  F089         	movff	ID@n+1,___awdiv@divisor+1
  5642  00142A  EC2D  F027         	call	___awdiv	;wreg free
  5643  00142E  0100               	movlb	0	; () banked
  5644  001430  5186               	movf	?___awdiv& (0+255),w,b
  5645  001432  0100               	movlb	0	; () banked
  5646  001434  6FA3               	movwf	ID@time_1154& (0+255),b
  5647                           
  5648                           ; BSR set to: 0
  5649                           ;sort.c: 340: int res[2];
  5650                           ;sort.c: 342: for(int j = 0; j < 2; j++){
  5651  001436  0E00               	movlw	0
  5652  001438  0100               	movlb	0	; () banked
  5653  00143A  6FBD               	movwf	(ID@j+1)& (0+255),b
  5654  00143C  0E00               	movlw	0
  5655  00143E  6FBC               	movwf	ID@j& (0+255),b
  5656                           
  5657                           ; BSR set to: 0
  5658  001440  0100               	movlb	0	; () banked
  5659  001442  BFBD               	btfsc	(ID@j+1)& (0+255),7,b
  5660  001444  D00A               	goto	l878
  5661  001446  0100               	movlb	0	; () banked
  5662  001448  51BD               	movf	(ID@j+1)& (0+255),w,b
  5663  00144A  E106               	bnz	u7490
  5664  00144C  0E02               	movlw	2
  5665  00144E  0100               	movlb	0	; () banked
  5666  001450  5DBC               	subwf	ID@j& (0+255),w,b
  5667  001452  B0D8               	btfsc	status,0,c
  5668  001454  D0C4               	goto	l877
  5669  001456  D001               	goto	l878
  5670  001458                     u7490:
  5671                           
  5672                           ; BSR set to: 0
  5673  001458  D0C2               	goto	l877
  5674  00145A                     l878:
  5675                           
  5676                           ; BSR set to: 0
  5677                           ;sort.c: 343: LATCbits.LATC7 = 1;
  5678  00145A  8E8B               	bsf	3979,7,c	;volatile
  5679                           
  5680                           ; BSR set to: 0
  5681                           ;sort.c: 344: for(int i = 0; i < n; i++){
  5682  00145C  0E00               	movlw	0
  5683  00145E  0100               	movlb	0	; () banked
  5684  001460  6FAE               	movwf	(ID@i_1157+1)& (0+255),b
  5685  001462  0E00               	movlw	0
  5686  001464  6FAD               	movwf	ID@i_1157& (0+255),b
  5687  001466                     l8418:
  5688                           
  5689                           ; BSR set to: 0
  5690  001466  0100               	movlb	0	; () banked
  5691  001468  51BE               	movf	ID@n& (0+255),w,b
  5692  00146A  0100               	movlb	0	; () banked
  5693  00146C  5DAD               	subwf	ID@i_1157& (0+255),w,b
  5694  00146E  0100               	movlb	0	; () banked
  5695  001470  51AE               	movf	(ID@i_1157+1)& (0+255),w,b
  5696  001472  0A80               	xorlw	128
  5697  001474  0100               	movlb	0	; () banked
  5698  001476  6F9B               	movwf	??_ID& (0+255),b
  5699  001478  0100               	movlb	0	; () banked
  5700  00147A  51BF               	movf	(ID@n+1)& (0+255),w,b
  5701  00147C  0A80               	xorlw	128
  5702  00147E  0100               	movlb	0	; () banked
  5703  001480  599B               	subwfb	??_ID& (0+255),w,b
  5704  001482  B0D8               	btfsc	status,0,c
  5705  001484  D01A               	goto	l881
  5706                           
  5707                           ; BSR set to: 0
  5708                           ;sort.c: 345: delay_ms(time);
  5709                           
  5710                           ; BSR set to: 0
  5711                           
  5712                           ; BSR set to: 0
  5713  001486  0100               	movlb	0	; () banked
  5714  001488  51A3               	movf	ID@time_1154& (0+255),w,b
  5715  00148A  EC8D  F02F         	call	_delay_ms
  5716                           
  5717                           ;sort.c: 346: readCOND();
  5718  00148E  ECC0  F02C         	call	_readCOND	;wreg free
  5719                           
  5720                           ;sort.c: 347: res[j] += COND_signal;
  5721  001492  90D8               	bcf	status,0,c
  5722  001494  0100               	movlb	0	; () banked
  5723  001496  35BC               	rlcf	ID@j& (0+255),w,b
  5724  001498  6ED9               	movwf	fsr2l,c
  5725  00149A  0100               	movlb	0	; () banked
  5726  00149C  35BD               	rlcf	(ID@j+1)& (0+255),w,b
  5727  00149E  6EDA               	movwf	fsr2h,c
  5728  0014A0  0EB6               	movlw	low ID@res
  5729  0014A2  26D9               	addwf	fsr2l,f,c
  5730  0014A4  0E00               	movlw	high ID@res
  5731  0014A6  22DA               	addwfc	fsr2h,f,c
  5732  0014A8  0100               	movlb	0	; () banked
  5733  0014AA  51DE               	movf	_COND_signal& (0+255),w,b
  5734  0014AC  26DE               	addwf	postinc2,f,c
  5735  0014AE  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5736  0014B0  22DD               	addwfc	postdec2,f,c
  5737                           
  5738                           ; BSR set to: 0
  5739  0014B2  0100               	movlb	0	; () banked
  5740  0014B4  4BAD               	infsnz	ID@i_1157& (0+255),f,b
  5741  0014B6  2BAE               	incf	(ID@i_1157+1)& (0+255),f,b
  5742  0014B8  D7D6               	goto	l8418
  5743  0014BA                     l881:
  5744                           
  5745                           ; BSR set to: 0
  5746                           ;sort.c: 348: }
  5747                           ;sort.c: 349: LATCbits.LATC7 = 0;
  5748  0014BA  9E8B               	bcf	3979,7,c	;volatile
  5749                           
  5750                           ; BSR set to: 0
  5751                           ;sort.c: 351: _delay((unsigned long)((200)*(32000000/4000.0)));
  5752  0014BC  0E09               	movlw	9
  5753  0014BE  0100               	movlb	0	; () banked
  5754  0014C0  6F9C               	movwf	(??_ID+1)& (0+255),b
  5755  0014C2  0E1E               	movlw	30
  5756  0014C4  0100               	movlb	0	; () banked
  5757  0014C6  6F9B               	movwf	??_ID& (0+255),b
  5758  0014C8  0EE4               	movlw	228
  5759  0014CA                     u11117:
  5760  0014CA  2EE8               	decfsz	wreg,f,c
  5761  0014CC  D7FE               	bra	u11117
  5762  0014CE  2F9B               	decfsz	??_ID& (0+255),f,b
  5763  0014D0  D7FC               	bra	u11117
  5764  0014D2  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5765  0014D4  D7FA               	bra	u11117
  5766  0014D6  F000               	nop	
  5767                           
  5768                           ;sort.c: 354: res[j] = ((res[j] / n) > 0.3) ? 1 : 0;
  5769  0014D8  0E9A               	movlw	154
  5770  0014DA  0100               	movlb	0	; () banked
  5771  0014DC  6F92               	movwf	___ftge@ff1& (0+255),b
  5772  0014DE  0E99               	movlw	153
  5773  0014E0  0100               	movlb	0	; () banked
  5774  0014E2  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5775  0014E4  0E3E               	movlw	62
  5776  0014E6  0100               	movlb	0	; () banked
  5777  0014E8  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5778  0014EA  C0BE  F088         	movff	ID@n,___awdiv@divisor
  5779  0014EE  C0BF  F089         	movff	ID@n+1,___awdiv@divisor+1
  5780  0014F2  90D8               	bcf	status,0,c
  5781  0014F4  0100               	movlb	0	; () banked
  5782  0014F6  35BC               	rlcf	ID@j& (0+255),w,b
  5783  0014F8  6ED9               	movwf	fsr2l,c
  5784  0014FA  0100               	movlb	0	; () banked
  5785  0014FC  35BD               	rlcf	(ID@j+1)& (0+255),w,b
  5786  0014FE  6EDA               	movwf	fsr2h,c
  5787  001500  0EB6               	movlw	low ID@res
  5788  001502  26D9               	addwf	fsr2l,f,c
  5789  001504  0E00               	movlw	high ID@res
  5790  001506  22DA               	addwfc	fsr2h,f,c
  5791  001508  CFDE F086          	movff	postinc2,___awdiv@dividend
  5792  00150C  CFDD F087          	movff	postdec2,___awdiv@dividend+1
  5793  001510  EC2D  F027         	call	___awdiv	;wreg free
  5794  001514  C086  F08E         	movff	?___awdiv,___awtoft@c
  5795  001518  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5796  00151C  EC2F  F02D         	call	___awtoft	;wreg free
  5797  001520  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5798  001524  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5799  001528  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5800  00152C  ECC9  F026         	call	___ftge	;wreg free
  5801  001530  0100               	movlb	0	; () banked
  5802  001532  B0D8               	btfsc	status,0,c
  5803  001534  D002               	goto	u7520
  5804  001536  0E01               	movlw	1
  5805  001538  D001               	goto	u7530
  5806  00153A                     u7520:
  5807  00153A  0E00               	movlw	0
  5808  00153C                     u7530:
  5809  00153C  0100               	movlb	0	; () banked
  5810  00153E  6F9B               	movwf	??_ID& (0+255),b
  5811  001540  6B9C               	clrf	(??_ID+1)& (0+255),b
  5812  001542  90D8               	bcf	status,0,c
  5813  001544  0100               	movlb	0	; () banked
  5814  001546  35BC               	rlcf	ID@j& (0+255),w,b
  5815  001548  6ED9               	movwf	fsr2l,c
  5816  00154A  0100               	movlb	0	; () banked
  5817  00154C  35BD               	rlcf	(ID@j+1)& (0+255),w,b
  5818  00154E  6EDA               	movwf	fsr2h,c
  5819  001550  0EB6               	movlw	low ID@res
  5820  001552  26D9               	addwf	fsr2l,f,c
  5821  001554  0E00               	movlw	high ID@res
  5822  001556  22DA               	addwfc	fsr2h,f,c
  5823  001558  C09B  FFDE         	movff	??_ID,postinc2
  5824  00155C  C09C  FFDD         	movff	??_ID+1,postdec2
  5825                           
  5826                           ; BSR set to: 0
  5827                           ;sort.c: 355: if(j==0){
  5828  001560  0100               	movlb	0	; () banked
  5829  001562  51BC               	movf	ID@j& (0+255),w,b
  5830  001564  0100               	movlb	0	; () banked
  5831  001566  11BD               	iorwf	(ID@j+1)& (0+255),w,b
  5832  001568  A4D8               	btfss	status,2,c
  5833  00156A  D010               	goto	l8438
  5834                           
  5835                           ; BSR set to: 0
  5836                           ;sort.c: 356: sensor_outputs[1] = res[j];
  5837  00156C  90D8               	bcf	status,0,c
  5838  00156E  0100               	movlb	0	; () banked
  5839  001570  35BC               	rlcf	ID@j& (0+255),w,b
  5840  001572  6ED9               	movwf	fsr2l,c
  5841  001574  0100               	movlb	0	; () banked
  5842  001576  35BD               	rlcf	(ID@j+1)& (0+255),w,b
  5843  001578  6EDA               	movwf	fsr2h,c
  5844  00157A  0EB6               	movlw	low ID@res
  5845  00157C  26D9               	addwf	fsr2l,f,c
  5846  00157E  0E00               	movlw	high ID@res
  5847  001580  22DA               	addwfc	fsr2h,f,c
  5848  001582  CFDE F0DC          	movff	postinc2,_sensor_outputs+2
  5849  001586  CFDD F0DD          	movff	postdec2,_sensor_outputs+3
  5850                           
  5851                           ;sort.c: 357: }
  5852  00158A  D01F               	goto	l8448
  5853  00158C                     l8438:
  5854                           
  5855                           ; BSR set to: 0
  5856                           ;sort.c: 358: else{
  5857                           ;sort.c: 359: sensor_outputs[1] = sensor_outputs[1] || res[j];
  5858  00158C  0E01               	movlw	1
  5859  00158E  0100               	movlb	0	; () banked
  5860  001590  6FA6               	movwf	_ID$1158& (0+255),b
  5861                           
  5862                           ; BSR set to: 0
  5863  001592  0100               	movlb	0	; () banked
  5864  001594  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5865  001596  0100               	movlb	0	; () banked
  5866  001598  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5867  00159A  A4D8               	btfss	status,2,c
  5868  00159C  D012               	goto	l8446
  5869                           
  5870                           ; BSR set to: 0
  5871  00159E  90D8               	bcf	status,0,c
  5872  0015A0  0100               	movlb	0	; () banked
  5873  0015A2  35BC               	rlcf	ID@j& (0+255),w,b
  5874  0015A4  6ED9               	movwf	fsr2l,c
  5875  0015A6  0100               	movlb	0	; () banked
  5876  0015A8  35BD               	rlcf	(ID@j+1)& (0+255),w,b
  5877  0015AA  6EDA               	movwf	fsr2h,c
  5878  0015AC  0EB6               	movlw	low ID@res
  5879  0015AE  26D9               	addwf	fsr2l,f,c
  5880  0015B0  0E00               	movlw	high ID@res
  5881  0015B2  22DA               	addwfc	fsr2h,f,c
  5882  0015B4  50DE               	movf	postinc2,w,c
  5883  0015B6  10DE               	iorwf	postinc2,w,c
  5884  0015B8  A4D8               	btfss	status,2,c
  5885  0015BA  D003               	goto	l8446
  5886                           
  5887                           ; BSR set to: 0
  5888  0015BC  0E00               	movlw	0
  5889  0015BE  0100               	movlb	0	; () banked
  5890  0015C0  6FA6               	movwf	_ID$1158& (0+255),b
  5891  0015C2                     l8446:
  5892                           
  5893                           ; BSR set to: 0
  5894  0015C2  C0A6  F0DC         	movff	_ID$1158,_sensor_outputs+2
  5895  0015C6  0100               	movlb	0	; () banked
  5896  0015C8  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5897  0015CA                     l8448:
  5898                           
  5899                           ; BSR set to: 0
  5900  0015CA  0100               	movlb	0	; () banked
  5901  0015CC  4BBC               	infsnz	ID@j& (0+255),f,b
  5902  0015CE  2BBD               	incf	(ID@j+1)& (0+255),f,b
  5903                           
  5904                           ; BSR set to: 0
  5905  0015D0  0100               	movlb	0	; () banked
  5906  0015D2  BFBD               	btfsc	(ID@j+1)& (0+255),7,b
  5907  0015D4  D742               	goto	l878
  5908  0015D6  0100               	movlb	0	; () banked
  5909  0015D8  51BD               	movf	(ID@j+1)& (0+255),w,b
  5910  0015DA  E101               	bnz	l877
  5911  0015DC  D737               	goto	L5
  5912  0015DE                     l877:
  5913                           
  5914                           ; BSR set to: 0
  5915                           ;sort.c: 360: }
  5916                           ;sort.c: 361: }
  5917                           ;sort.c: 362: }
  5918                           ;sort.c: 363: int cond1 = sensor_outputs[1];
  5919  0015DE  C0DC  F09F         	movff	_sensor_outputs+2,ID@cond1
  5920  0015E2  C0DD  F0A0         	movff	_sensor_outputs+3,ID@cond1+1
  5921                           
  5922                           ; BSR set to: 0
  5923                           ;sort.c: 366: if(sensor_outputs[0]){
  5924  0015E6  0100               	movlb	0	; () banked
  5925  0015E8  51DA               	movf	_sensor_outputs& (0+255),w,b
  5926  0015EA  0100               	movlb	0	; () banked
  5927  0015EC  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5928  0015EE  B4D8               	btfsc	status,2,c
  5929  0015F0  D043               	goto	l8480
  5930                           
  5931                           ; BSR set to: 0
  5932                           ;sort.c: 368: readIR(3);
  5933  0015F2  0E00               	movlw	0
  5934  0015F4  0100               	movlb	0	; () banked
  5935  0015F6  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  5936  0015F8  0E03               	movlw	3
  5937  0015FA  6F82               	movwf	readIR@ana_port& (0+255),b
  5938  0015FC  EC90  F028         	call	_readIR	;wreg free
  5939                           
  5940                           ;sort.c: 369: sensor_outputs[1] = sensor_outputs[1] || IR_signal;
  5941  001600  0E01               	movlw	1
  5942  001602  0100               	movlb	0	; () banked
  5943  001604  6FA7               	movwf	_ID$1160& (0+255),b
  5944                           
  5945                           ; BSR set to: 0
  5946  001606  0100               	movlb	0	; () banked
  5947  001608  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5948  00160A  0100               	movlb	0	; () banked
  5949  00160C  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5950  00160E  A4D8               	btfss	status,2,c
  5951  001610  D009               	goto	l8464
  5952                           
  5953                           ; BSR set to: 0
  5954  001612  0100               	movlb	0	; () banked
  5955  001614  51E2               	movf	_IR_signal& (0+255),w,b
  5956  001616  0100               	movlb	0	; () banked
  5957  001618  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  5958  00161A  A4D8               	btfss	status,2,c
  5959  00161C  D003               	goto	l8464
  5960                           
  5961                           ; BSR set to: 0
  5962  00161E  0E00               	movlw	0
  5963  001620  0100               	movlb	0	; () banked
  5964  001622  6FA7               	movwf	_ID$1160& (0+255),b
  5965  001624                     l8464:
  5966                           
  5967                           ; BSR set to: 0
  5968  001624  C0A7  F0DC         	movff	_ID$1160,_sensor_outputs+2
  5969  001628  0100               	movlb	0	; () banked
  5970  00162A  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5971                           
  5972                           ; BSR set to: 0
  5973                           ;sort.c: 370: _delay((unsigned long)((10)*(32000000/4000.0)));
  5974  00162C  0E68               	movlw	104
  5975  00162E  0100               	movlb	0	; () banked
  5976  001630  6F9B               	movwf	??_ID& (0+255),b
  5977  001632  0EE4               	movlw	228
  5978  001634                     u11127:
  5979  001634  2EE8               	decfsz	wreg,f,c
  5980  001636  D7FE               	bra	u11127
  5981  001638  2F9B               	decfsz	??_ID& (0+255),f,b
  5982  00163A  D7FC               	bra	u11127
  5983  00163C  F000               	nop	
  5984                           
  5985                           ;sort.c: 371: readIR(3);
  5986  00163E  0E00               	movlw	0
  5987  001640  0100               	movlb	0	; () banked
  5988  001642  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  5989  001644  0E03               	movlw	3
  5990  001646  6F82               	movwf	readIR@ana_port& (0+255),b
  5991  001648  EC90  F028         	call	_readIR	;wreg free
  5992                           
  5993                           ;sort.c: 372: sensor_outputs[1] = sensor_outputs[1] || IR_signal;
  5994  00164C  0E01               	movlw	1
  5995  00164E  0100               	movlb	0	; () banked
  5996  001650  6FA8               	movwf	_ID$1161& (0+255),b
  5997                           
  5998                           ; BSR set to: 0
  5999  001652  0100               	movlb	0	; () banked
  6000  001654  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  6001  001656  0100               	movlb	0	; () banked
  6002  001658  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  6003  00165A  A4D8               	btfss	status,2,c
  6004  00165C  D009               	goto	l8478
  6005                           
  6006                           ; BSR set to: 0
  6007  00165E  0100               	movlb	0	; () banked
  6008  001660  51E2               	movf	_IR_signal& (0+255),w,b
  6009  001662  0100               	movlb	0	; () banked
  6010  001664  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  6011  001666  A4D8               	btfss	status,2,c
  6012  001668  D003               	goto	l8478
  6013                           
  6014                           ; BSR set to: 0
  6015  00166A  0E00               	movlw	0
  6016  00166C  0100               	movlb	0	; () banked
  6017  00166E  6FA8               	movwf	_ID$1161& (0+255),b
  6018  001670                     l8478:
  6019                           
  6020                           ; BSR set to: 0
  6021  001670  C0A8  F0DC         	movff	_ID$1161,_sensor_outputs+2
  6022  001674  0100               	movlb	0	; () banked
  6023  001676  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  6024  001678                     l8480:
  6025                           
  6026                           ; BSR set to: 0
  6027                           ;sort.c: 373: }
  6028                           ;sort.c: 374: int reflectivity2 = IR_res;
  6029  001678  C0E0  F0A1         	movff	_IR_res,ID@reflectivity2
  6030  00167C  C0E1  F0A2         	movff	_IR_res+1,ID@reflectivity2+1
  6031                           
  6032                           ; BSR set to: 0
  6033                           ;sort.c: 387: if(!sensor_outputs[0]){
  6034  001680  0100               	movlb	0	; () banked
  6035  001682  51DA               	movf	_sensor_outputs& (0+255),w,b
  6036  001684  0100               	movlb	0	; () banked
  6037  001686  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  6038  001688  A4D8               	btfss	status,2,c
  6039  00168A  D014               	goto	l8494
  6040                           
  6041                           ; BSR set to: 0
  6042                           ;sort.c: 388: if(!sensor_outputs[1]){
  6043  00168C  0100               	movlb	0	; () banked
  6044  00168E  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  6045  001690  0100               	movlb	0	; () banked
  6046  001692  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  6047  001694  A4D8               	btfss	status,2,c
  6048  001696  D007               	goto	l8490
  6049                           
  6050                           ; BSR set to: 0
  6051                           ;sort.c: 389: count_pop_no_tab++;
  6052  001698  4A5F               	infsnz	_count_pop_no_tab,f,c
  6053  00169A  2A60               	incf	_count_pop_no_tab+1,f,c
  6054                           
  6055                           ; BSR set to: 0
  6056                           ;sort.c: 390: cur_can = 0;
  6057  00169C  0E00               	movlw	0
  6058  00169E  0101               	movlb	1	; () banked
  6059  0016A0  6F2E               	movwf	(_cur_can+1)& (0+255),b
  6060  0016A2  0E00               	movlw	0
  6061  0016A4  D006               	goto	L6
  6062  0016A6                     l8490:
  6063                           
  6064                           ;sort.c: 392: else{
  6065                           ;sort.c: 393: count_pop_w_tab++;
  6066  0016A6  4A61               	infsnz	_count_pop_w_tab,f,c
  6067  0016A8  2A62               	incf	_count_pop_w_tab+1,f,c
  6068                           
  6069                           ;sort.c: 394: cur_can = 1;
  6070  0016AA  0E00               	movlw	0
  6071  0016AC  0101               	movlb	1	; () banked
  6072  0016AE  6F2E               	movwf	(_cur_can+1)& (0+255),b
  6073  0016B0  0E01               	movlw	1
  6074  0016B2                     L6:
  6075  0016B2  6F2D               	movwf	_cur_can& (0+255),b
  6076  0016B4                     l8494:
  6077                           
  6078                           ;sort.c: 395: }
  6079                           ;sort.c: 396: }
  6080                           ;sort.c: 397: if(sensor_outputs[0]){
  6081  0016B4  0100               	movlb	0	; () banked
  6082  0016B6  51DA               	movf	_sensor_outputs& (0+255),w,b
  6083  0016B8  0100               	movlb	0	; () banked
  6084  0016BA  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  6085  0016BC  B4D8               	btfsc	status,2,c
  6086  0016BE  D014               	goto	l8506
  6087                           
  6088                           ; BSR set to: 0
  6089                           ;sort.c: 398: if(!sensor_outputs[1]){
  6090  0016C0  0100               	movlb	0	; () banked
  6091  0016C2  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  6092  0016C4  0100               	movlb	0	; () banked
  6093  0016C6  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  6094  0016C8  A4D8               	btfss	status,2,c
  6095  0016CA  D007               	goto	l8502
  6096                           
  6097                           ; BSR set to: 0
  6098                           ;sort.c: 399: count_can_w_lab++;
  6099  0016CC  4A5D               	infsnz	_count_can_w_lab,f,c
  6100  0016CE  2A5E               	incf	_count_can_w_lab+1,f,c
  6101                           
  6102                           ; BSR set to: 0
  6103                           ;sort.c: 400: cur_can = 2;
  6104  0016D0  0E00               	movlw	0
  6105  0016D2  0101               	movlb	1	; () banked
  6106  0016D4  6F2E               	movwf	(_cur_can+1)& (0+255),b
  6107  0016D6  0E02               	movlw	2
  6108  0016D8  D006               	goto	L7
  6109  0016DA                     l8502:
  6110                           
  6111                           ;sort.c: 402: else{
  6112                           ;sort.c: 403: count_can_no_lab++;
  6113  0016DA  4A5B               	infsnz	_count_can_no_lab,f,c
  6114  0016DC  2A5C               	incf	_count_can_no_lab+1,f,c
  6115                           
  6116                           ;sort.c: 404: cur_can = 3;
  6117  0016DE  0E00               	movlw	0
  6118  0016E0  0101               	movlb	1	; () banked
  6119  0016E2  6F2E               	movwf	(_cur_can+1)& (0+255),b
  6120  0016E4  0E03               	movlw	3
  6121  0016E6                     L7:
  6122  0016E6  6F2D               	movwf	_cur_can& (0+255),b
  6123  0016E8                     l8506:
  6124  0016E8  0101               	movlb	1	; () banked
  6125  0016EA  5137               	movf	_f_can_distributed& (0+255),w,b
  6126  0016EC  0101               	movlb	1	; () banked
  6127  0016EE  1138               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  6128  0016F0  B4D8               	btfsc	status,2,c
  6129  0016F2  D7FA               	goto	l8506
  6130                           
  6131                           ; BSR set to: 1
  6132                           ;sort.c: 410: for(int i=0;i<10000;i++)
  6133                           
  6134                           ; BSR set to: 1
  6135  0016F4  0E00               	movlw	0
  6136  0016F6  0100               	movlb	0	; () banked
  6137  0016F8  6FB0               	movwf	(ID@i_1163+1)& (0+255),b
  6138  0016FA  0E00               	movlw	0
  6139  0016FC  6FAF               	movwf	ID@i_1163& (0+255),b
  6140  0016FE                     l8510:
  6141                           
  6142                           ; BSR set to: 0
  6143  0016FE  0100               	movlb	0	; () banked
  6144  001700  BFB0               	btfsc	(ID@i_1163+1)& (0+255),7,b
  6145  001702  D008               	goto	l900
  6146  001704  0E10               	movlw	16
  6147  001706  0100               	movlb	0	; () banked
  6148  001708  5DAF               	subwf	ID@i_1163& (0+255),w,b
  6149  00170A  0E27               	movlw	39
  6150  00170C  0100               	movlb	0	; () banked
  6151  00170E  59B0               	subwfb	(ID@i_1163+1)& (0+255),w,b
  6152  001710  B0D8               	btfsc	status,0,c
  6153  001712  D00D               	goto	l901
  6154  001714                     l900:
  6155                           
  6156                           ; BSR set to: 0
  6157                           ;sort.c: 411: {
  6158                           ;sort.c: 412: LATCbits.LATC0 = 1;
  6159  001714  808B               	bsf	3979,0,c	;volatile
  6160                           
  6161                           ; BSR set to: 0
  6162                           ;sort.c: 413: _delay((unsigned long)((10)*(32000000/4000000.0)));
  6163  001716  0E1A               	movlw	26
  6164  001718                     u11137:
  6165  001718  2EE8               	decfsz	wreg,f,c
  6166  00171A  D7FE               	bra	u11137
  6167  00171C  D000               	nop2	
  6168                           
  6169                           ;sort.c: 414: LATCbits.LATC0 = 0;
  6170  00171E  908B               	bcf	3979,0,c	;volatile
  6171                           
  6172                           ;sort.c: 415: _delay((unsigned long)((90)*(32000000/4000000.0)));
  6173  001720  0EF0               	movlw	240
  6174  001722                     u11147:
  6175  001722  2EE8               	decfsz	wreg,f,c
  6176  001724  D7FE               	bra	u11147
  6177  001726  0100               	movlb	0	; () banked
  6178  001728  4BAF               	infsnz	ID@i_1163& (0+255),f,b
  6179  00172A  2BB0               	incf	(ID@i_1163+1)& (0+255),f,b
  6180  00172C  D7E8               	goto	l8510
  6181  00172E                     l901:
  6182                           
  6183                           ; BSR set to: 0
  6184                           ;sort.c: 416: }
  6185                           ;sort.c: 418: LATCbits.LATC0 = 0;
  6186  00172E  908B               	bcf	3979,0,c	;volatile
  6187                           
  6188                           ; BSR set to: 0
  6189                           ;sort.c: 420: f_can_coming_to_distribution = 1;
  6190  001730  0E00               	movlw	0
  6191  001732  0101               	movlb	1	; () banked
  6192  001734  6F36               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  6193  001736  0E01               	movlw	1
  6194  001738  6F35               	movwf	_f_can_coming_to_distribution& (0+255),b
  6195                           
  6196                           ; BSR set to: 1
  6197                           ;sort.c: 421: _delay((unsigned long)((500)*(32000000/4000.0)));
  6198  00173A  0E15               	movlw	21
  6199  00173C  0100               	movlb	0	; () banked
  6200  00173E  6F9C               	movwf	(??_ID+1)& (0+255),b
  6201  001740  0E4B               	movlw	75
  6202  001742  0100               	movlb	0	; () banked
  6203  001744  6F9B               	movwf	??_ID& (0+255),b
  6204  001746  0EBE               	movlw	190
  6205  001748                     u11157:
  6206  001748  2EE8               	decfsz	wreg,f,c
  6207  00174A  D7FE               	bra	u11157
  6208  00174C  2F9B               	decfsz	??_ID& (0+255),f,b
  6209  00174E  D7FC               	bra	u11157
  6210  001750  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  6211  001752  D7FA               	bra	u11157
  6212  001754  F000               	nop	
  6213                           
  6214                           ;sort.c: 422: LATCbits.LATC0 = 1;
  6215  001756  808B               	bsf	3979,0,c	;volatile
  6216                           
  6217                           ;sort.c: 425: if(!f_lastCan){
  6218  001758  0100               	movlb	0	; () banked
  6219  00175A  51EC               	movf	_f_lastCan& (0+255),w,b
  6220  00175C  0100               	movlb	0	; () banked
  6221  00175E  11ED               	iorwf	(_f_lastCan+1)& (0+255),w,b
  6222  001760  A4D8               	btfss	status,2,c
  6223  001762  D032               	goto	l8542
  6224                           
  6225                           ; BSR set to: 0
  6226                           ;sort.c: 426: for(int i=0; i<46; i++){
  6227  001764  0E00               	movlw	0
  6228  001766  0100               	movlb	0	; () banked
  6229  001768  6FBB               	movwf	(ID@i_1164+1)& (0+255),b
  6230  00176A  0E00               	movlw	0
  6231  00176C  6FBA               	movwf	ID@i_1164& (0+255),b
  6232                           
  6233                           ; BSR set to: 0
  6234  00176E  0100               	movlb	0	; () banked
  6235  001770  BFBB               	btfsc	(ID@i_1164+1)& (0+255),7,b
  6236  001772  D008               	goto	l8534
  6237  001774  0100               	movlb	0	; () banked
  6238  001776  51BB               	movf	(ID@i_1164+1)& (0+255),w,b
  6239  001778  E126               	bnz	l904
  6240  00177A  0E2E               	movlw	46
  6241  00177C  0100               	movlb	0	; () banked
  6242  00177E  5DBA               	subwf	ID@i_1164& (0+255),w,b
  6243  001780  B0D8               	btfsc	status,0,c
  6244  001782  D021               	goto	l904
  6245  001784                     l8534:
  6246                           
  6247                           ; BSR set to: 0
  6248                           ;sort.c: 427: LATBbits.LATB2 = !LATBbits.LATB2;
  6249  001784  B48A               	btfsc	3978,2,c	;volatile
  6250  001786  D004               	goto	u7720
  6251  001788  0100               	movlb	0	; () banked
  6252  00178A  6B9B               	clrf	??_ID& (0+255),b
  6253  00178C  2B9B               	incf	??_ID& (0+255),f,b
  6254  00178E  D002               	goto	u7738
  6255  001790                     u7720:
  6256  001790  0100               	movlb	0	; () banked
  6257  001792  6B9B               	clrf	??_ID& (0+255),b
  6258  001794                     u7738:
  6259  001794  0100               	movlb	0	; () banked
  6260  001796  479B               	rlncf	??_ID& (0+255),f,b
  6261  001798  479B               	rlncf	??_ID& (0+255),f,b
  6262  00179A  508A               	movf	3978,w,c	;volatile
  6263  00179C  0100               	movlb	0	; () banked
  6264  00179E  199B               	xorwf	??_ID& (0+255),w,b
  6265  0017A0  0BFB               	andlw	-5
  6266  0017A2  199B               	xorwf	??_ID& (0+255),w,b
  6267  0017A4  6E8A               	movwf	3978,c	;volatile
  6268                           
  6269                           ; BSR set to: 0
  6270                           ;sort.c: 428: delay_ms(45-i);
  6271  0017A6  0100               	movlb	0	; () banked
  6272  0017A8  51BA               	movf	ID@i_1164& (0+255),w,b
  6273  0017AA  0800               	sublw	0
  6274  0017AC  0F2D               	addlw	45
  6275  0017AE  EC8D  F02F         	call	_delay_ms
  6276  0017B2  0100               	movlb	0	; () banked
  6277  0017B4  4BBA               	infsnz	ID@i_1164& (0+255),f,b
  6278  0017B6  2BBB               	incf	(ID@i_1164+1)& (0+255),f,b
  6279                           
  6280                           ; BSR set to: 0
  6281  0017B8  0100               	movlb	0	; () banked
  6282  0017BA  BFBB               	btfsc	(ID@i_1164+1)& (0+255),7,b
  6283  0017BC  D7E3               	goto	l8534
  6284  0017BE  0100               	movlb	0	; () banked
  6285  0017C0  51BB               	movf	(ID@i_1164+1)& (0+255),w,b
  6286  0017C2  E101               	bnz	u7740
  6287  0017C4  D7DA               	goto	L8
  6288  0017C6                     u7740:
  6289  0017C6                     l904:
  6290                           
  6291                           ; BSR set to: 0
  6292                           ;sort.c: 429: }
  6293                           ;sort.c: 430: LATBbits.LATB2 = 1;
  6294  0017C6  848A               	bsf	3978,2,c	;volatile
  6295  0017C8                     l8542:
  6296                           
  6297                           ; BSR set to: 0
  6298                           ;sort.c: 431: }
  6299                           ;sort.c: 433: f_can_coming_to_ID = 0;
  6300  0017C8  0E00               	movlw	0
  6301  0017CA  0101               	movlb	1	; () banked
  6302  0017CC  6F34               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  6303  0017CE  0E00               	movlw	0
  6304  0017D0  6F33               	movwf	_f_can_coming_to_ID& (0+255),b
  6305  0017D2  0012               	return	
  6306  0017D4                     __end_of_ID:
  6307                           	opt stack 0
  6308                           tblptru	equ	0xFF8
  6309                           tblptrh	equ	0xFF7
  6310                           tblptrl	equ	0xFF6
  6311                           tablat	equ	0xFF5
  6312                           prodh	equ	0xFF4
  6313                           prodl	equ	0xFF3
  6314                           postinc0	equ	0xFEE
  6315                           wreg	equ	0xFE8
  6316                           postdec1	equ	0xFE5
  6317                           fsr1l	equ	0xFE1
  6318                           indf2	equ	0xFDF
  6319                           postinc2	equ	0xFDE
  6320                           postdec2	equ	0xFDD
  6321                           fsr2h	equ	0xFDA
  6322                           fsr2l	equ	0xFD9
  6323                           status	equ	0xFD8
  6324                           
  6325 ;; *************** function _readIR *****************
  6326 ;; Defined at:
  6327 ;;		line 23 in file "ADCFunctionality.c"
  6328 ;; Parameters:    Size  Location     Type
  6329 ;;  ana_port        2    2[BANK0 ] int 
  6330 ;; Auto vars:     Size  Location     Type
  6331 ;;		None
  6332 ;; Return value:  Size  Location     Type
  6333 ;;                  1    wreg      void 
  6334 ;; Registers used:
  6335 ;;		wreg, status,2, status,0, cstack
  6336 ;; Tracked objects:
  6337 ;;		On entry : 0/0
  6338 ;;		On exit  : 0/0
  6339 ;;		Unchanged: 0/0
  6340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6341 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6343 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6344 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6345 ;;Total ram usage:        4 bytes
  6346 ;; Hardware stack levels used:    1
  6347 ;; Hardware stack levels required when called:    8
  6348 ;; This function calls:
  6349 ;;		_readADC
  6350 ;; This function is called by:
  6351 ;;		_Loading
  6352 ;;		_ID
  6353 ;;		_getIR
  6354 ;; This function uses a non-reentrant model
  6355 ;;
  6356                           
  6357                           	psect	text8
  6358  005120                     __ptext8:
  6359                           	opt stack 0
  6360  005120                     _readIR:
  6361                           	opt stack 20
  6362                           
  6363                           ;ADCFunctionality.c: 24: readADC(ana_port);
  6364                           
  6365                           ; BSR set to: 1
  6366                           ;incstack = 0
  6367  005120  0100               	movlb	0	; () banked
  6368  005122  5182               	movf	readIR@ana_port& (0+255),w,b
  6369  005124  EC62  F02F         	call	_readADC
  6370                           
  6371                           ;ADCFunctionality.c: 25: IR_res = ADRESH<<8 | ADRESL;
  6372  005128  50C3               	movf	4035,w,c	;volatile
  6373  00512A  CFC4 F084          	movff	4036,??_readIR	;volatile
  6374  00512E  0100               	movlb	0	; () banked
  6375  005130  6B85               	clrf	(??_readIR+1)& (0+255),b
  6376  005132  C084  F085         	movff	??_readIR,??_readIR+1
  6377  005136  0100               	movlb	0	; () banked
  6378  005138  6B84               	clrf	??_readIR& (0+255),b
  6379  00513A  0100               	movlb	0	; () banked
  6380  00513C  1184               	iorwf	??_readIR& (0+255),w,b
  6381  00513E  0100               	movlb	0	; () banked
  6382  005140  6FE0               	movwf	_IR_res& (0+255),b
  6383  005142  0100               	movlb	0	; () banked
  6384  005144  5185               	movf	(??_readIR+1)& (0+255),w,b
  6385  005146  0100               	movlb	0	; () banked
  6386  005148  6FE1               	movwf	(_IR_res+1)& (0+255),b
  6387                           
  6388                           ;ADCFunctionality.c: 26: switch(ana_port){
  6389  00514A  D024               	goto	l6958
  6390  00514C                     l6952:
  6391                           
  6392                           ; BSR set to: 0
  6393                           ;ADCFunctionality.c: 28: IR_signal = (IR_res > 700) ? 1 : 0;
  6394  00514C  0100               	movlb	0	; () banked
  6395  00514E  BFE1               	btfsc	(_IR_res+1)& (0+255),7,b
  6396  005150  D00A               	goto	u5640
  6397  005152  0EBD               	movlw	189
  6398  005154  0100               	movlb	0	; () banked
  6399  005156  5DE0               	subwf	_IR_res& (0+255),w,b
  6400  005158  0E02               	movlw	2
  6401  00515A  0100               	movlb	0	; () banked
  6402  00515C  59E1               	subwfb	(_IR_res+1)& (0+255),w,b
  6403  00515E  A0D8               	btfss	status,0,c
  6404  005160  D002               	goto	u5640
  6405  005162  0E01               	movlw	1
  6406  005164  D001               	goto	u5650
  6407  005166                     u5640:
  6408  005166  0E00               	movlw	0
  6409  005168                     u5650:
  6410  005168  0100               	movlb	0	; () banked
  6411  00516A  6FE2               	movwf	_IR_signal& (0+255),b
  6412  00516C  6BE3               	clrf	(_IR_signal+1)& (0+255),b
  6413                           
  6414                           ;ADCFunctionality.c: 29: break;
  6415  00516E  0012               	return	
  6416  005170                     l6954:
  6417                           
  6418                           ; BSR set to: 0
  6419                           ;ADCFunctionality.c: 31: IR_signal = (IR_res > 220) ? 1 : 0;
  6420  005170  0100               	movlb	0	; () banked
  6421  005172  BFE1               	btfsc	(_IR_res+1)& (0+255),7,b
  6422  005174  D00A               	goto	u5660
  6423  005176  0100               	movlb	0	; () banked
  6424  005178  51E1               	movf	(_IR_res+1)& (0+255),w,b
  6425  00517A  E105               	bnz	u5661
  6426  00517C  0EDD               	movlw	221
  6427  00517E  0100               	movlb	0	; () banked
  6428  005180  5DE0               	subwf	_IR_res& (0+255),w,b
  6429  005182  A0D8               	btfss	status,0,c
  6430  005184  D002               	goto	u5660
  6431  005186                     u5661:
  6432  005186  0E01               	movlw	1
  6433  005188  D001               	goto	u5670
  6434  00518A                     u5660:
  6435  00518A  0E00               	movlw	0
  6436  00518C                     u5670:
  6437  00518C  0100               	movlb	0	; () banked
  6438  00518E  6FE2               	movwf	_IR_signal& (0+255),b
  6439  005190  6BE3               	clrf	(_IR_signal+1)& (0+255),b
  6440                           
  6441                           ; BSR set to: 0
  6442                           ;ADCFunctionality.c: 35: }
  6443                           
  6444                           ; BSR set to: 0
  6445                           ;ADCFunctionality.c: 34: break;
  6446                           
  6447                           ;ADCFunctionality.c: 33: default:
  6448                           
  6449                           ;ADCFunctionality.c: 32: break;
  6450  005192  0012               	return	
  6451  005194                     l6958:
  6452                           
  6453                           ; BSR set to: 0
  6454  005194  C082  F084         	movff	readIR@ana_port,??_readIR
  6455  005198  C083  F085         	movff	readIR@ana_port+1,??_readIR+1
  6456                           
  6457                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6458                           ; Switch size 1, requested type "space"
  6459                           ; Number of cases is 1, Range of values is 0 to 0
  6460                           ; switch strategies available:
  6461                           ; Name         Instructions Cycles
  6462                           ; simple_byte            4     3 (average)
  6463                           ;	Chosen strategy is simple_byte
  6464  00519C  0100               	movlb	0	; () banked
  6465  00519E  5185               	movf	(??_readIR+1)& (0+255),w,b
  6466  0051A0  0A00               	xorlw	0	; case 0
  6467  0051A2  A4D8               	btfss	status,2,c
  6468  0051A4  0012               	return	
  6469                           
  6470                           ; BSR set to: 0
  6471                           ; Switch size 1, requested type "space"
  6472                           ; Number of cases is 2, Range of values is 0 to 3
  6473                           ; switch strategies available:
  6474                           ; Name         Instructions Cycles
  6475                           ; simple_byte            7     4 (average)
  6476                           ;	Chosen strategy is simple_byte
  6477  0051A6  0100               	movlb	0	; () banked
  6478  0051A8  5184               	movf	??_readIR& (0+255),w,b
  6479  0051AA  0A00               	xorlw	0	; case 0
  6480  0051AC  B4D8               	btfsc	status,2,c
  6481  0051AE  D7CE               	goto	l6952
  6482  0051B0  0A03               	xorlw	3	; case 3
  6483  0051B2  A4D8               	btfss	status,2,c
  6484  0051B4  0012               	return	
  6485  0051B6  D7DC               	goto	l6954
  6486  0051B8                     __end_of_readIR:
  6487                           	opt stack 0
  6488                           tblptru	equ	0xFF8
  6489                           tblptrh	equ	0xFF7
  6490                           tblptrl	equ	0xFF6
  6491                           tablat	equ	0xFF5
  6492                           prodh	equ	0xFF4
  6493                           prodl	equ	0xFF3
  6494                           postinc0	equ	0xFEE
  6495                           wreg	equ	0xFE8
  6496                           postdec1	equ	0xFE5
  6497                           fsr1l	equ	0xFE1
  6498                           indf2	equ	0xFDF
  6499                           postinc2	equ	0xFDE
  6500                           postdec2	equ	0xFDD
  6501                           fsr2h	equ	0xFDA
  6502                           fsr2l	equ	0xFD9
  6503                           status	equ	0xFD8
  6504                           
  6505 ;; *************** function _readCOND *****************
  6506 ;; Defined at:
  6507 ;;		line 44 in file "ADCFunctionality.c"
  6508 ;; Parameters:    Size  Location     Type
  6509 ;;		None
  6510 ;; Auto vars:     Size  Location     Type
  6511 ;;  res             2    4[BANK0 ] int 
  6512 ;; Return value:  Size  Location     Type
  6513 ;;                  1    wreg      void 
  6514 ;; Registers used:
  6515 ;;		wreg, status,2, status,0, cstack
  6516 ;; Tracked objects:
  6517 ;;		On entry : 0/0
  6518 ;;		On exit  : 0/0
  6519 ;;		Unchanged: 0/0
  6520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6522 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6523 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6524 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6525 ;;Total ram usage:        4 bytes
  6526 ;; Hardware stack levels used:    1
  6527 ;; Hardware stack levels required when called:    8
  6528 ;; This function calls:
  6529 ;;		_readADC
  6530 ;; This function is called by:
  6531 ;;		_ID
  6532 ;; This function uses a non-reentrant model
  6533 ;;
  6534                           
  6535                           	psect	text9
  6536  005980                     __ptext9:
  6537                           	opt stack 0
  6538  005980                     _readCOND:
  6539                           	opt stack 20
  6540                           
  6541                           ;ADCFunctionality.c: 45: readADC(2);
  6542                           
  6543                           ; BSR set to: 0
  6544                           ;incstack = 0
  6545  005980  0E02               	movlw	2
  6546  005982  EC62  F02F         	call	_readADC
  6547                           
  6548                           ;ADCFunctionality.c: 46: int res = ADRESH<<8 | ADRESL;
  6549  005986  50C3               	movf	4035,w,c	;volatile
  6550  005988  CFC4 F082          	movff	4036,??_readCOND	;volatile
  6551  00598C  0100               	movlb	0	; () banked
  6552  00598E  6B83               	clrf	(??_readCOND+1)& (0+255),b
  6553  005990  C082  F083         	movff	??_readCOND,??_readCOND+1
  6554  005994  0100               	movlb	0	; () banked
  6555  005996  6B82               	clrf	??_readCOND& (0+255),b
  6556  005998  0100               	movlb	0	; () banked
  6557  00599A  1182               	iorwf	??_readCOND& (0+255),w,b
  6558  00599C  0100               	movlb	0	; () banked
  6559  00599E  6F84               	movwf	readCOND@res& (0+255),b
  6560  0059A0  0100               	movlb	0	; () banked
  6561  0059A2  5183               	movf	(??_readCOND+1)& (0+255),w,b
  6562  0059A4  0100               	movlb	0	; () banked
  6563  0059A6  6F85               	movwf	(readCOND@res+1)& (0+255),b
  6564                           
  6565                           ; BSR set to: 0
  6566                           ;ADCFunctionality.c: 47: COND_signal = (res > 300) ? 1 : 0;
  6567  0059A8  0100               	movlb	0	; () banked
  6568  0059AA  BF85               	btfsc	(readCOND@res+1)& (0+255),7,b
  6569  0059AC  D00A               	goto	u6430
  6570  0059AE  0E2D               	movlw	45
  6571  0059B0  0100               	movlb	0	; () banked
  6572  0059B2  5D84               	subwf	readCOND@res& (0+255),w,b
  6573  0059B4  0E01               	movlw	1
  6574  0059B6  0100               	movlb	0	; () banked
  6575  0059B8  5985               	subwfb	(readCOND@res+1)& (0+255),w,b
  6576  0059BA  A0D8               	btfss	status,0,c
  6577  0059BC  D002               	goto	u6430
  6578  0059BE  0E01               	movlw	1
  6579  0059C0  D001               	goto	u6440
  6580  0059C2                     u6430:
  6581  0059C2  0E00               	movlw	0
  6582  0059C4                     u6440:
  6583  0059C4  0100               	movlb	0	; () banked
  6584  0059C6  6FDE               	movwf	_COND_signal& (0+255),b
  6585  0059C8  6BDF               	clrf	(_COND_signal+1)& (0+255),b
  6586                           
  6587                           ; BSR set to: 0
  6588  0059CA  0012               	return		;funcret
  6589  0059CC                     __end_of_readCOND:
  6590                           	opt stack 0
  6591                           tblptru	equ	0xFF8
  6592                           tblptrh	equ	0xFF7
  6593                           tblptrl	equ	0xFF6
  6594                           tablat	equ	0xFF5
  6595                           prodh	equ	0xFF4
  6596                           prodl	equ	0xFF3
  6597                           postinc0	equ	0xFEE
  6598                           wreg	equ	0xFE8
  6599                           postdec1	equ	0xFE5
  6600                           fsr1l	equ	0xFE1
  6601                           indf2	equ	0xFDF
  6602                           postinc2	equ	0xFDE
  6603                           postdec2	equ	0xFDD
  6604                           fsr2h	equ	0xFDA
  6605                           fsr2l	equ	0xFD9
  6606                           status	equ	0xFD8
  6607                           
  6608 ;; *************** function _delay_ms *****************
  6609 ;; Defined at:
  6610 ;;		line 753 in file "sort.c"
  6611 ;; Parameters:    Size  Location     Type
  6612 ;;  milliseconds    1    wreg     unsigned char 
  6613 ;; Auto vars:     Size  Location     Type
  6614 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  6615 ;; Return value:  Size  Location     Type
  6616 ;;                  1    wreg      void 
  6617 ;; Registers used:
  6618 ;;		wreg, status,2, status,0, cstack
  6619 ;; Tracked objects:
  6620 ;;		On entry : 0/0
  6621 ;;		On exit  : 0/0
  6622 ;;		Unchanged: 0/0
  6623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6625 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6626 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6627 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6628 ;;Total ram usage:        2 bytes
  6629 ;; Hardware stack levels used:    1
  6630 ;; Hardware stack levels required when called:    7
  6631 ;; This function calls:
  6632 ;;		Nothing
  6633 ;; This function is called by:
  6634 ;;		_Loading
  6635 ;;		_ID
  6636 ;; This function uses a non-reentrant model
  6637 ;;
  6638                           
  6639                           	psect	text10
  6640  005F1A                     __ptext10:
  6641                           	opt stack 0
  6642  005F1A                     _delay_ms:
  6643                           	opt stack 21
  6644                           
  6645                           ; BSR set to: 0
  6646                           ;incstack = 0
  6647                           ;delay_ms@milliseconds stored from wreg
  6648  005F1A  0100               	movlb	0	; () banked
  6649  005F1C  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  6650                           
  6651                           ;sort.c: 754: while(milliseconds > 0)
  6652  005F1E  D00B               	goto	l7668
  6653  005F20                     l7664:
  6654                           
  6655                           ;sort.c: 755: {
  6656                           ;sort.c: 756: milliseconds--;
  6657  005F20  0100               	movlb	0	; () banked
  6658  005F22  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  6659                           
  6660                           ; BSR set to: 0
  6661                           ;sort.c: 757: _delay((unsigned long)((990)*(32000000/4000000.0)));
  6662  005F24  0E0B               	movlw	11
  6663  005F26  0100               	movlb	0	; () banked
  6664  005F28  6F80               	movwf	??_delay_ms& (0+255),b
  6665  005F2A  0E47               	movlw	71
  6666  005F2C                     u11167:
  6667  005F2C  2EE8               	decfsz	wreg,f,c
  6668  005F2E  D7FE               	bra	u11167
  6669  005F30  2F80               	decfsz	??_delay_ms& (0+255),f,b
  6670  005F32  D7FC               	bra	u11167
  6671  005F34  D000               	nop2	
  6672  005F36                     l7668:
  6673  005F36  0100               	movlb	0	; () banked
  6674  005F38  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  6675  005F3A  0100               	movlb	0	; () banked
  6676  005F3C  B4D8               	btfsc	status,2,c
  6677  005F3E  0012               	return	
  6678  005F40  D7EF               	goto	l7664
  6679  005F42                     __end_of_delay_ms:
  6680                           	opt stack 0
  6681                           tblptru	equ	0xFF8
  6682                           tblptrh	equ	0xFF7
  6683                           tblptrl	equ	0xFF6
  6684                           tablat	equ	0xFF5
  6685                           prodh	equ	0xFF4
  6686                           prodl	equ	0xFF3
  6687                           postinc0	equ	0xFEE
  6688                           wreg	equ	0xFE8
  6689                           postdec1	equ	0xFE5
  6690                           fsr1l	equ	0xFE1
  6691                           indf2	equ	0xFDF
  6692                           postinc2	equ	0xFDE
  6693                           postdec2	equ	0xFDD
  6694                           fsr2h	equ	0xFDA
  6695                           fsr2l	equ	0xFD9
  6696                           status	equ	0xFD8
  6697                           
  6698 ;; *************** function ___ftge *****************
  6699 ;; Defined at:
  6700 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  6701 ;; Parameters:    Size  Location     Type
  6702 ;;  ff1             3   18[BANK0 ] float 
  6703 ;;  ff2             3   21[BANK0 ] float 
  6704 ;; Auto vars:     Size  Location     Type
  6705 ;;		None
  6706 ;; Return value:  Size  Location     Type
  6707 ;;		None               void
  6708 ;; Registers used:
  6709 ;;		wreg, status,2, status,0
  6710 ;; Tracked objects:
  6711 ;;		On entry : 0/0
  6712 ;;		On exit  : 0/0
  6713 ;;		Unchanged: 0/0
  6714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6715 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6717 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6718 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6719 ;;Total ram usage:        9 bytes
  6720 ;; Hardware stack levels used:    1
  6721 ;; Hardware stack levels required when called:    7
  6722 ;; This function calls:
  6723 ;;		Nothing
  6724 ;; This function is called by:
  6725 ;;		_ID
  6726 ;; This function uses a non-reentrant model
  6727 ;;
  6728                           
  6729                           	psect	text11
  6730  004D92                     __ptext11:
  6731                           	opt stack 0
  6732  004D92                     ___ftge:
  6733                           	opt stack 21
  6734                           
  6735                           ; BSR set to: 0
  6736                           ;incstack = 0
  6737  004D92  0100               	movlb	0	; () banked
  6738  004D94  AF94               	btfss	(___ftge@ff1+2)& (0+255),7,b
  6739  004D96  D01D               	goto	l7786
  6740                           
  6741                           ; BSR set to: 0
  6742  004D98  C092  F098         	movff	___ftge@ff1,??___ftge
  6743  004D9C  C093  F099         	movff	___ftge@ff1+1,??___ftge+1
  6744  004DA0  C094  F09A         	movff	___ftge@ff1+2,??___ftge+2
  6745  004DA4  0100               	movlb	0	; () banked
  6746  004DA6  1F98               	comf	??___ftge& (0+255),f,b
  6747  004DA8  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6748  004DAA  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6749  004DAC  2B98               	incf	??___ftge& (0+255),f,b
  6750  004DAE  0E00               	movlw	0
  6751  004DB0  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6752  004DB2  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6753  004DB4  0E00               	movlw	0
  6754  004DB6  0100               	movlb	0	; () banked
  6755  004DB8  2598               	addwf	??___ftge& (0+255),w,b
  6756  004DBA  0100               	movlb	0	; () banked
  6757  004DBC  6F92               	movwf	___ftge@ff1& (0+255),b
  6758  004DBE  0E00               	movlw	0
  6759  004DC0  0100               	movlb	0	; () banked
  6760  004DC2  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6761  004DC4  0100               	movlb	0	; () banked
  6762  004DC6  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  6763  004DC8  0E80               	movlw	128
  6764  004DCA  0100               	movlb	0	; () banked
  6765  004DCC  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6766  004DCE  0100               	movlb	0	; () banked
  6767  004DD0  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  6768  004DD2                     l7786:
  6769                           
  6770                           ; BSR set to: 0
  6771  004DD2  0100               	movlb	0	; () banked
  6772  004DD4  AF97               	btfss	(___ftge@ff2+2)& (0+255),7,b
  6773  004DD6  D01D               	goto	l7790
  6774                           
  6775                           ; BSR set to: 0
  6776  004DD8  C095  F098         	movff	___ftge@ff2,??___ftge
  6777  004DDC  C096  F099         	movff	___ftge@ff2+1,??___ftge+1
  6778  004DE0  C097  F09A         	movff	___ftge@ff2+2,??___ftge+2
  6779  004DE4  0100               	movlb	0	; () banked
  6780  004DE6  1F98               	comf	??___ftge& (0+255),f,b
  6781  004DE8  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6782  004DEA  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6783  004DEC  2B98               	incf	??___ftge& (0+255),f,b
  6784  004DEE  0E00               	movlw	0
  6785  004DF0  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6786  004DF2  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6787  004DF4  0E00               	movlw	0
  6788  004DF6  0100               	movlb	0	; () banked
  6789  004DF8  2598               	addwf	??___ftge& (0+255),w,b
  6790  004DFA  0100               	movlb	0	; () banked
  6791  004DFC  6F95               	movwf	___ftge@ff2& (0+255),b
  6792  004DFE  0E00               	movlw	0
  6793  004E00  0100               	movlb	0	; () banked
  6794  004E02  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6795  004E04  0100               	movlb	0	; () banked
  6796  004E06  6F96               	movwf	(___ftge@ff2+1)& (0+255),b
  6797  004E08  0E80               	movlw	128
  6798  004E0A  0100               	movlb	0	; () banked
  6799  004E0C  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6800  004E0E  0100               	movlb	0	; () banked
  6801  004E10  6F97               	movwf	(___ftge@ff2+2)& (0+255),b
  6802  004E12                     l7790:
  6803                           
  6804                           ; BSR set to: 0
  6805  004E12  0E00               	movlw	0
  6806  004E14  0100               	movlb	0	; () banked
  6807  004E16  1B92               	xorwf	___ftge@ff1& (0+255),f,b
  6808  004E18  0E00               	movlw	0
  6809  004E1A  0100               	movlb	0	; () banked
  6810  004E1C  1B93               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  6811  004E1E  0E80               	movlw	128
  6812  004E20  0100               	movlb	0	; () banked
  6813  004E22  1B94               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  6814                           
  6815                           ; BSR set to: 0
  6816  004E24  0E00               	movlw	0
  6817  004E26  0100               	movlb	0	; () banked
  6818  004E28  1B95               	xorwf	___ftge@ff2& (0+255),f,b
  6819  004E2A  0E00               	movlw	0
  6820  004E2C  0100               	movlb	0	; () banked
  6821  004E2E  1B96               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  6822  004E30  0E80               	movlw	128
  6823  004E32  0100               	movlb	0	; () banked
  6824  004E34  1B97               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  6825  004E36  0100               	movlb	0	; () banked
  6826  004E38  5195               	movf	___ftge@ff2& (0+255),w,b
  6827  004E3A  0100               	movlb	0	; () banked
  6828  004E3C  5D92               	subwf	___ftge@ff1& (0+255),w,b
  6829  004E3E  0100               	movlb	0	; () banked
  6830  004E40  5196               	movf	(___ftge@ff2+1)& (0+255),w,b
  6831  004E42  0100               	movlb	0	; () banked
  6832  004E44  5993               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  6833  004E46  0100               	movlb	0	; () banked
  6834  004E48  5197               	movf	(___ftge@ff2+2)& (0+255),w,b
  6835  004E4A  0100               	movlb	0	; () banked
  6836  004E4C  5994               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  6837  004E4E  B0D8               	btfsc	status,0,c
  6838  004E50  D002               	goto	l7796
  6839                           
  6840                           ; BSR set to: 0
  6841  004E52  90D8               	bcf	status,0,c
  6842  004E54  0012               	return	
  6843  004E56                     l7796:
  6844                           
  6845                           ; BSR set to: 0
  6846  004E56  80D8               	bsf	status,0,c
  6847                           
  6848                           ; BSR set to: 0
  6849  004E58  0012               	return	
  6850  004E5A                     __end_of___ftge:
  6851                           	opt stack 0
  6852                           tblptru	equ	0xFF8
  6853                           tblptrh	equ	0xFF7
  6854                           tblptrl	equ	0xFF6
  6855                           tablat	equ	0xFF5
  6856                           prodh	equ	0xFF4
  6857                           prodl	equ	0xFF3
  6858                           postinc0	equ	0xFEE
  6859                           wreg	equ	0xFE8
  6860                           postdec1	equ	0xFE5
  6861                           fsr1l	equ	0xFE1
  6862                           indf2	equ	0xFDF
  6863                           postinc2	equ	0xFDE
  6864                           postdec2	equ	0xFDD
  6865                           fsr2h	equ	0xFDA
  6866                           fsr2l	equ	0xFD9
  6867                           status	equ	0xFD8
  6868                           
  6869 ;; *************** function ___awtoft *****************
  6870 ;; Defined at:
  6871 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  6872 ;; Parameters:    Size  Location     Type
  6873 ;;  c               2   14[BANK0 ] int 
  6874 ;; Auto vars:     Size  Location     Type
  6875 ;;  sign            1   17[BANK0 ] unsigned char 
  6876 ;; Return value:  Size  Location     Type
  6877 ;;                  3   14[BANK0 ] float 
  6878 ;; Registers used:
  6879 ;;		wreg, status,2, status,0, cstack
  6880 ;; Tracked objects:
  6881 ;;		On entry : 0/0
  6882 ;;		On exit  : 0/0
  6883 ;;		Unchanged: 0/0
  6884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6885 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6886 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6888 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6889 ;;Total ram usage:        4 bytes
  6890 ;; Hardware stack levels used:    1
  6891 ;; Hardware stack levels required when called:    8
  6892 ;; This function calls:
  6893 ;;		___ftpack
  6894 ;; This function is called by:
  6895 ;;		_ID
  6896 ;; This function uses a non-reentrant model
  6897 ;;
  6898                           
  6899                           	psect	text12
  6900  005A5E                     __ptext12:
  6901                           	opt stack 0
  6902  005A5E                     ___awtoft:
  6903                           	opt stack 20
  6904                           
  6905                           ; BSR set to: 0
  6906                           ;incstack = 0
  6907  005A5E  0E00               	movlw	0
  6908  005A60  0100               	movlb	0	; () banked
  6909  005A62  6F91               	movwf	___awtoft@sign& (0+255),b
  6910                           
  6911                           ; BSR set to: 0
  6912  005A64  0100               	movlb	0	; () banked
  6913  005A66  AF8F               	btfss	(___awtoft@c+1)& (0+255),7,b
  6914  005A68  D008               	goto	l7778
  6915                           
  6916                           ; BSR set to: 0
  6917  005A6A  0100               	movlb	0	; () banked
  6918  005A6C  6D8E               	negf	___awtoft@c& (0+255),b
  6919  005A6E  1F8F               	comf	(___awtoft@c+1)& (0+255),f,b
  6920  005A70  B0D8               	btfsc	status,0,c
  6921  005A72  2B8F               	incf	(___awtoft@c+1)& (0+255),f,b
  6922                           
  6923                           ; BSR set to: 0
  6924  005A74  0E01               	movlw	1
  6925  005A76  0100               	movlb	0	; () banked
  6926  005A78  6F91               	movwf	___awtoft@sign& (0+255),b
  6927  005A7A                     l7778:
  6928                           
  6929                           ; BSR set to: 0
  6930  005A7A  C08E  F080         	movff	___awtoft@c,___ftpack@arg
  6931  005A7E  C08F  F081         	movff	___awtoft@c+1,___ftpack@arg+1
  6932  005A82  0100               	movlb	0	; () banked
  6933  005A84  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
  6934  005A86  0E8E               	movlw	142
  6935  005A88  0100               	movlb	0	; () banked
  6936  005A8A  6F83               	movwf	___ftpack@exp& (0+255),b
  6937  005A8C  C091  F084         	movff	___awtoft@sign,___ftpack@sign
  6938  005A90  ECB7  F022         	call	___ftpack	;wreg free
  6939  005A94  C080  F08E         	movff	?___ftpack,?___awtoft
  6940  005A98  C081  F08F         	movff	?___ftpack+1,?___awtoft+1
  6941  005A9C  C082  F090         	movff	?___ftpack+2,?___awtoft+2
  6942  005AA0  0012               	return	
  6943  005AA2                     __end_of___awtoft:
  6944                           	opt stack 0
  6945                           tblptru	equ	0xFF8
  6946                           tblptrh	equ	0xFF7
  6947                           tblptrl	equ	0xFF6
  6948                           tablat	equ	0xFF5
  6949                           prodh	equ	0xFF4
  6950                           prodl	equ	0xFF3
  6951                           postinc0	equ	0xFEE
  6952                           wreg	equ	0xFE8
  6953                           postdec1	equ	0xFE5
  6954                           fsr1l	equ	0xFE1
  6955                           indf2	equ	0xFDF
  6956                           postinc2	equ	0xFDE
  6957                           postdec2	equ	0xFDD
  6958                           fsr2h	equ	0xFDA
  6959                           fsr2l	equ	0xFD9
  6960                           status	equ	0xFD8
  6961                           
  6962 ;; *************** function ___ftpack *****************
  6963 ;; Defined at:
  6964 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  6965 ;; Parameters:    Size  Location     Type
  6966 ;;  arg             3    0[BANK0 ] unsigned um
  6967 ;;  exp             1    3[BANK0 ] unsigned char 
  6968 ;;  sign            1    4[BANK0 ] unsigned char 
  6969 ;; Auto vars:     Size  Location     Type
  6970 ;;		None
  6971 ;; Return value:  Size  Location     Type
  6972 ;;                  3    0[BANK0 ] float 
  6973 ;; Registers used:
  6974 ;;		wreg, status,2, status,0
  6975 ;; Tracked objects:
  6976 ;;		On entry : 0/0
  6977 ;;		On exit  : 0/0
  6978 ;;		Unchanged: 0/0
  6979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6980 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6982 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6983 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6984 ;;Total ram usage:        8 bytes
  6985 ;; Hardware stack levels used:    1
  6986 ;; Hardware stack levels required when called:    7
  6987 ;; This function calls:
  6988 ;;		Nothing
  6989 ;; This function is called by:
  6990 ;;		___awtoft
  6991 ;; This function uses a non-reentrant model
  6992 ;;
  6993                           
  6994                           	psect	text13
  6995  00456E                     __ptext13:
  6996                           	opt stack 0
  6997  00456E                     ___ftpack:
  6998                           	opt stack 20
  6999                           
  7000                           ;incstack = 0
  7001  00456E  0100               	movlb	0	; () banked
  7002  004570  5183               	movf	___ftpack@exp& (0+255),w,b
  7003  004572  0100               	movlb	0	; () banked
  7004  004574  B4D8               	btfsc	status,2,c
  7005  004576  D008               	goto	l7162
  7006                           
  7007                           ; BSR set to: 0
  7008  004578  0100               	movlb	0	; () banked
  7009  00457A  5180               	movf	___ftpack@arg& (0+255),w,b
  7010  00457C  0100               	movlb	0	; () banked
  7011  00457E  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  7012  004580  0100               	movlb	0	; () banked
  7013  004582  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  7014  004584  A4D8               	btfss	status,2,c
  7015  004586  D011               	goto	l7168
  7016  004588                     l7162:
  7017                           
  7018                           ; BSR set to: 0
  7019  004588  0E00               	movlw	0
  7020  00458A  0100               	movlb	0	; () banked
  7021  00458C  6F80               	movwf	?___ftpack& (0+255),b
  7022  00458E  0E00               	movlw	0
  7023  004590  0100               	movlb	0	; () banked
  7024  004592  6F81               	movwf	(?___ftpack+1)& (0+255),b
  7025  004594  0E00               	movlw	0
  7026  004596  0100               	movlb	0	; () banked
  7027  004598  6F82               	movwf	(?___ftpack+2)& (0+255),b
  7028                           
  7029                           ; BSR set to: 0
  7030  00459A  0012               	return	
  7031  00459C                     l7166:
  7032                           
  7033                           ; BSR set to: 0
  7034  00459C  0100               	movlb	0	; () banked
  7035  00459E  2B83               	incf	___ftpack@exp& (0+255),f,b
  7036  0045A0  0100               	movlb	0	; () banked
  7037  0045A2  90D8               	bcf	status,0,c
  7038  0045A4  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  7039  0045A6  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  7040  0045A8  3380               	rrcf	___ftpack@arg& (0+255),f,b
  7041  0045AA                     l7168:
  7042                           
  7043                           ; BSR set to: 0
  7044  0045AA  0E00               	movlw	0
  7045  0045AC  0100               	movlb	0	; () banked
  7046  0045AE  1580               	andwf	___ftpack@arg& (0+255),w,b
  7047  0045B0  0100               	movlb	0	; () banked
  7048  0045B2  6F85               	movwf	??___ftpack& (0+255),b
  7049  0045B4  0E00               	movlw	0
  7050  0045B6  0100               	movlb	0	; () banked
  7051  0045B8  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  7052  0045BA  0100               	movlb	0	; () banked
  7053  0045BC  6F86               	movwf	(??___ftpack+1)& (0+255),b
  7054  0045BE  0EFE               	movlw	254
  7055  0045C0  0100               	movlb	0	; () banked
  7056  0045C2  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  7057  0045C4  0100               	movlb	0	; () banked
  7058  0045C6  6F87               	movwf	(??___ftpack+2)& (0+255),b
  7059  0045C8  0100               	movlb	0	; () banked
  7060  0045CA  5185               	movf	??___ftpack& (0+255),w,b
  7061  0045CC  0100               	movlb	0	; () banked
  7062  0045CE  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  7063  0045D0  0100               	movlb	0	; () banked
  7064  0045D2  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  7065  0045D4  B4D8               	btfsc	status,2,c
  7066  0045D6  D011               	goto	l7174
  7067  0045D8  D7E1               	goto	l7166
  7068  0045DA                     l7170:
  7069                           
  7070                           ; BSR set to: 0
  7071  0045DA  0100               	movlb	0	; () banked
  7072  0045DC  2B83               	incf	___ftpack@exp& (0+255),f,b
  7073                           
  7074                           ; BSR set to: 0
  7075  0045DE  0E01               	movlw	1
  7076  0045E0  0100               	movlb	0	; () banked
  7077  0045E2  2780               	addwf	___ftpack@arg& (0+255),f,b
  7078  0045E4  0E00               	movlw	0
  7079  0045E6  0100               	movlb	0	; () banked
  7080  0045E8  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  7081  0045EA  0E00               	movlw	0
  7082  0045EC  0100               	movlb	0	; () banked
  7083  0045EE  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  7084  0045F0  0100               	movlb	0	; () banked
  7085  0045F2  90D8               	bcf	status,0,c
  7086  0045F4  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  7087  0045F6  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  7088  0045F8  3380               	rrcf	___ftpack@arg& (0+255),f,b
  7089  0045FA                     l7174:
  7090                           
  7091                           ; BSR set to: 0
  7092  0045FA  0E00               	movlw	0
  7093  0045FC  0100               	movlb	0	; () banked
  7094  0045FE  1580               	andwf	___ftpack@arg& (0+255),w,b
  7095  004600  0100               	movlb	0	; () banked
  7096  004602  6F85               	movwf	??___ftpack& (0+255),b
  7097  004604  0E00               	movlw	0
  7098  004606  0100               	movlb	0	; () banked
  7099  004608  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  7100  00460A  0100               	movlb	0	; () banked
  7101  00460C  6F86               	movwf	(??___ftpack+1)& (0+255),b
  7102  00460E  0EFF               	movlw	255
  7103  004610  0100               	movlb	0	; () banked
  7104  004612  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  7105  004614  0100               	movlb	0	; () banked
  7106  004616  6F87               	movwf	(??___ftpack+2)& (0+255),b
  7107  004618  0100               	movlb	0	; () banked
  7108  00461A  5185               	movf	??___ftpack& (0+255),w,b
  7109  00461C  0100               	movlb	0	; () banked
  7110  00461E  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  7111  004620  0100               	movlb	0	; () banked
  7112  004622  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  7113  004624  B4D8               	btfsc	status,2,c
  7114  004626  D008               	goto	l7178
  7115  004628  D7D8               	goto	l7170
  7116  00462A                     l7176:
  7117                           
  7118                           ; BSR set to: 0
  7119  00462A  0100               	movlb	0	; () banked
  7120  00462C  0783               	decf	___ftpack@exp& (0+255),f,b
  7121  00462E  0100               	movlb	0	; () banked
  7122  004630  90D8               	bcf	status,0,c
  7123  004632  3780               	rlcf	___ftpack@arg& (0+255),f,b
  7124  004634  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  7125  004636  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  7126  004638                     l7178:
  7127                           
  7128                           ; BSR set to: 0
  7129  004638  0100               	movlb	0	; () banked
  7130  00463A  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  7131  00463C  D004               	goto	l1846
  7132                           
  7133                           ; BSR set to: 0
  7134  00463E  0E02               	movlw	2
  7135  004640  0100               	movlb	0	; () banked
  7136  004642  6183               	cpfslt	___ftpack@exp& (0+255),b
  7137  004644  D7F2               	goto	l7176
  7138  004646                     l1846:
  7139                           
  7140                           ; BSR set to: 0
  7141  004646  0100               	movlb	0	; () banked
  7142  004648  B183               	btfsc	___ftpack@exp& (0+255),0,b
  7143  00464A  D002               	goto	l7184
  7144                           
  7145                           ; BSR set to: 0
  7146  00464C  0100               	movlb	0	; () banked
  7147  00464E  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  7148  004650                     l7184:
  7149                           
  7150                           ; BSR set to: 0
  7151  004650  0100               	movlb	0	; () banked
  7152  004652  90D8               	bcf	status,0,c
  7153  004654  3383               	rrcf	___ftpack@exp& (0+255),f,b
  7154  004656  0100               	movlb	0	; () banked
  7155  004658  5183               	movf	___ftpack@exp& (0+255),w,b
  7156  00465A  0100               	movlb	0	; () banked
  7157  00465C  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  7158                           
  7159                           ; BSR set to: 0
  7160  00465E  0100               	movlb	0	; () banked
  7161  004660  5184               	movf	___ftpack@sign& (0+255),w,b
  7162  004662  0100               	movlb	0	; () banked
  7163  004664  B4D8               	btfsc	status,2,c
  7164  004666  D002               	goto	l7190
  7165                           
  7166                           ; BSR set to: 0
  7167  004668  0100               	movlb	0	; () banked
  7168  00466A  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  7169  00466C                     l7190:
  7170                           
  7171                           ; BSR set to: 0
  7172  00466C  C080  F080         	movff	___ftpack@arg,?___ftpack
  7173  004670  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
  7174  004674  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
  7175  004678  0012               	return	
  7176  00467A                     __end_of___ftpack:
  7177                           	opt stack 0
  7178                           tblptru	equ	0xFF8
  7179                           tblptrh	equ	0xFF7
  7180                           tblptrl	equ	0xFF6
  7181                           tablat	equ	0xFF5
  7182                           prodh	equ	0xFF4
  7183                           prodl	equ	0xFF3
  7184                           postinc0	equ	0xFEE
  7185                           wreg	equ	0xFE8
  7186                           postdec1	equ	0xFE5
  7187                           fsr1l	equ	0xFE1
  7188                           indf2	equ	0xFDF
  7189                           postinc2	equ	0xFDE
  7190                           postdec2	equ	0xFDD
  7191                           fsr2h	equ	0xFDA
  7192                           fsr2l	equ	0xFD9
  7193                           status	equ	0xFD8
  7194                           
  7195 ;; *************** function _Distribution *****************
  7196 ;; Defined at:
  7197 ;;		line 436 in file "sort.c"
  7198 ;; Parameters:    Size  Location     Type
  7199 ;;		None
  7200 ;; Auto vars:     Size  Location     Type
  7201 ;;		None
  7202 ;; Return value:  Size  Location     Type
  7203 ;;                  1    wreg      void 
  7204 ;; Registers used:
  7205 ;;		wreg, status,2, status,0, cstack
  7206 ;; Tracked objects:
  7207 ;;		On entry : 0/0
  7208 ;;		On exit  : 0/0
  7209 ;;		Unchanged: 0/0
  7210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7213 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7214 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7215 ;;Total ram usage:        2 bytes
  7216 ;; Hardware stack levels used:    1
  7217 ;; Hardware stack levels required when called:    8
  7218 ;; This function calls:
  7219 ;;		_updateServoPosition
  7220 ;; This function is called by:
  7221 ;;		_sort
  7222 ;; This function uses a non-reentrant model
  7223 ;;
  7224                           
  7225                           	psect	text14
  7226  004966                     __ptext14:
  7227                           	opt stack 0
  7228  004966                     _Distribution:
  7229                           	opt stack 21
  7230                           
  7231                           ;sort.c: 437: if(f_can_coming_to_distribution){
  7232                           
  7233                           ; BSR set to: 0
  7234                           ;incstack = 0
  7235  004966  0101               	movlb	1	; () banked
  7236  004968  5135               	movf	_f_can_coming_to_distribution& (0+255),w,b
  7237  00496A  0101               	movlb	1	; () banked
  7238  00496C  1136               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  7239  00496E  B4D8               	btfsc	status,2,c
  7240  004970  0012               	return	
  7241                           
  7242                           ; BSR set to: 1
  7243                           ;sort.c: 438: f_can_distributed = 0;
  7244  004972  0E00               	movlw	0
  7245  004974  0101               	movlb	1	; () banked
  7246  004976  6F38               	movwf	(_f_can_distributed+1)& (0+255),b
  7247  004978  0E00               	movlw	0
  7248  00497A  6F37               	movwf	_f_can_distributed& (0+255),b
  7249                           
  7250                           ;sort.c: 445: switch(cur_can){
  7251  00497C  D034               	goto	l8558
  7252  00497E                     l8548:
  7253                           
  7254                           ;sort.c: 447: updateServoPosition(400, 1);
  7255  00497E  0E01               	movlw	1
  7256  004980  0100               	movlb	0	; () banked
  7257  004982  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7258  004984  0E90               	movlw	144
  7259  004986  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7260  004988  0E00               	movlw	0
  7261  00498A  0100               	movlb	0	; () banked
  7262  00498C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7263  00498E  0E01               	movlw	1
  7264  004990  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7265  004992  EC65  F029         	call	_updateServoPosition	;wreg free
  7266                           
  7267                           ;sort.c: 448: break;
  7268  004996  D03E               	goto	l8560
  7269  004998                     l8550:
  7270                           
  7271                           ;sort.c: 450: updateServoPosition(850, 1);
  7272  004998  0E03               	movlw	3
  7273  00499A  0100               	movlb	0	; () banked
  7274  00499C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7275  00499E  0E52               	movlw	82
  7276  0049A0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7277  0049A2  0E00               	movlw	0
  7278  0049A4  0100               	movlb	0	; () banked
  7279  0049A6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7280  0049A8  0E01               	movlw	1
  7281  0049AA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7282  0049AC  EC65  F029         	call	_updateServoPosition	;wreg free
  7283                           
  7284                           ;sort.c: 451: break;
  7285  0049B0  D031               	goto	l8560
  7286  0049B2                     l8552:
  7287                           
  7288                           ;sort.c: 453: updateServoPosition(1550, 1);
  7289  0049B2  0E06               	movlw	6
  7290  0049B4  0100               	movlb	0	; () banked
  7291  0049B6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7292  0049B8  0E0E               	movlw	14
  7293  0049BA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7294  0049BC  0E00               	movlw	0
  7295  0049BE  0100               	movlb	0	; () banked
  7296  0049C0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7297  0049C2  0E01               	movlw	1
  7298  0049C4  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7299  0049C6  EC65  F029         	call	_updateServoPosition	;wreg free
  7300                           
  7301                           ;sort.c: 454: break;
  7302  0049CA  D024               	goto	l8560
  7303  0049CC                     l8554:
  7304                           
  7305                           ;sort.c: 456: updateServoPosition(2500, 1);
  7306  0049CC  0E09               	movlw	9
  7307  0049CE  0100               	movlb	0	; () banked
  7308  0049D0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7309  0049D2  0EC4               	movlw	196
  7310  0049D4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7311  0049D6  0E00               	movlw	0
  7312  0049D8  0100               	movlb	0	; () banked
  7313  0049DA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7314  0049DC  0E01               	movlw	1
  7315  0049DE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7316  0049E0  EC65  F029         	call	_updateServoPosition	;wreg free
  7317                           
  7318                           ;sort.c: 460: }
  7319                           
  7320                           ;sort.c: 459: break;
  7321                           
  7322                           ;sort.c: 458: default:
  7323                           
  7324                           ;sort.c: 457: break;
  7325  0049E4  D017               	goto	l8560
  7326  0049E6                     l8558:
  7327  0049E6  C12D  F088         	movff	_cur_can,??_Distribution
  7328  0049EA  C12E  F089         	movff	_cur_can+1,??_Distribution+1
  7329                           
  7330                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7331                           ; Switch size 1, requested type "space"
  7332                           ; Number of cases is 1, Range of values is 0 to 0
  7333                           ; switch strategies available:
  7334                           ; Name         Instructions Cycles
  7335                           ; simple_byte            4     3 (average)
  7336                           ;	Chosen strategy is simple_byte
  7337  0049EE  0100               	movlb	0	; () banked
  7338  0049F0  5189               	movf	(??_Distribution+1)& (0+255),w,b
  7339  0049F2  0A00               	xorlw	0	; case 0
  7340  0049F4  A4D8               	btfss	status,2,c
  7341  0049F6  D00E               	goto	l8560
  7342                           
  7343                           ; BSR set to: 0
  7344                           ; Switch size 1, requested type "space"
  7345                           ; Number of cases is 4, Range of values is 0 to 3
  7346                           ; switch strategies available:
  7347                           ; Name         Instructions Cycles
  7348                           ; simple_byte           13     7 (average)
  7349                           ;	Chosen strategy is simple_byte
  7350  0049F8  0100               	movlb	0	; () banked
  7351  0049FA  5188               	movf	??_Distribution& (0+255),w,b
  7352  0049FC  0A00               	xorlw	0	; case 0
  7353  0049FE  B4D8               	btfsc	status,2,c
  7354  004A00  D7BE               	goto	l8548
  7355  004A02  0A01               	xorlw	1	; case 1
  7356  004A04  B4D8               	btfsc	status,2,c
  7357  004A06  D7C8               	goto	l8550
  7358  004A08  0A03               	xorlw	3	; case 2
  7359  004A0A  B4D8               	btfsc	status,2,c
  7360  004A0C  D7D2               	goto	l8552
  7361  004A0E  0A01               	xorlw	1	; case 3
  7362  004A10  B4D8               	btfsc	status,2,c
  7363  004A12  D7DC               	goto	l8554
  7364  004A14                     l8560:
  7365                           
  7366                           ;sort.c: 461: updateServoPosition(1050, 3);
  7367  004A14  0E04               	movlw	4
  7368  004A16  0100               	movlb	0	; () banked
  7369  004A18  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7370  004A1A  0E1A               	movlw	26
  7371  004A1C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7372  004A1E  0E00               	movlw	0
  7373  004A20  0100               	movlb	0	; () banked
  7374  004A22  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7375  004A24  0E03               	movlw	3
  7376  004A26  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7377  004A28  EC65  F029         	call	_updateServoPosition	;wreg free
  7378                           
  7379                           ;sort.c: 462: servo_timer_target = 750;
  7380  004A2C  0E02               	movlw	2
  7381  004A2E  6E70               	movwf	_servo_timer_target+1,c	;volatile
  7382  004A30  0EEE               	movlw	238
  7383  004A32  6E6F               	movwf	_servo_timer_target,c	;volatile
  7384                           
  7385                           ;sort.c: 463: f_panning_to_bin = 1;
  7386  004A34  0E00               	movlw	0
  7387  004A36  6E68               	movwf	_f_panning_to_bin+1,c	;volatile
  7388  004A38  0E01               	movlw	1
  7389  004A3A  6E67               	movwf	_f_panning_to_bin,c	;volatile
  7390                           
  7391                           ;sort.c: 464: f_can_coming_to_distribution = 0;
  7392  004A3C  0E00               	movlw	0
  7393  004A3E  0101               	movlb	1	; () banked
  7394  004A40  6F36               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  7395  004A42  0E00               	movlw	0
  7396  004A44  6F35               	movwf	_f_can_coming_to_distribution& (0+255),b
  7397  004A46  0012               	return	
  7398  004A48                     __end_of_Distribution:
  7399                           	opt stack 0
  7400                           tblptru	equ	0xFF8
  7401                           tblptrh	equ	0xFF7
  7402                           tblptrl	equ	0xFF6
  7403                           tablat	equ	0xFF5
  7404                           prodh	equ	0xFF4
  7405                           prodl	equ	0xFF3
  7406                           postinc0	equ	0xFEE
  7407                           wreg	equ	0xFE8
  7408                           postdec1	equ	0xFE5
  7409                           fsr1l	equ	0xFE1
  7410                           indf2	equ	0xFDF
  7411                           postinc2	equ	0xFDE
  7412                           postdec2	equ	0xFDD
  7413                           fsr2h	equ	0xFDA
  7414                           fsr2l	equ	0xFD9
  7415                           status	equ	0xFD8
  7416                           
  7417 ;; *************** function _machineConfig *****************
  7418 ;; Defined at:
  7419 ;;		line 15 in file "MachineConfig.c"
  7420 ;; Parameters:    Size  Location     Type
  7421 ;;		None
  7422 ;; Auto vars:     Size  Location     Type
  7423 ;;		None
  7424 ;; Return value:  Size  Location     Type
  7425 ;;                  1    wreg      void 
  7426 ;; Registers used:
  7427 ;;		wreg, status,2
  7428 ;; Tracked objects:
  7429 ;;		On entry : 0/0
  7430 ;;		On exit  : 0/0
  7431 ;;		Unchanged: 0/0
  7432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7437 ;;Total ram usage:        0 bytes
  7438 ;; Hardware stack levels used:    1
  7439 ;; Hardware stack levels required when called:    7
  7440 ;; This function calls:
  7441 ;;		Nothing
  7442 ;; This function is called by:
  7443 ;;		_main
  7444 ;; This function uses a non-reentrant model
  7445 ;;
  7446                           
  7447                           	psect	text15
  7448  005704                     __ptext15:
  7449                           	opt stack 0
  7450  005704                     _machineConfig:
  7451                           	opt stack 23
  7452                           
  7453                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  7454                           
  7455                           ; BSR set to: 1
  7456                           ;incstack = 0
  7457  005704  0EF0               	movlw	240
  7458  005706  6ED3               	movwf	4051,c	;volatile
  7459                           
  7460                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  7461  005708  8C9B               	bsf	3995,6,c	;volatile
  7462                           
  7463                           ;MachineConfig.c: 22: TRISA = 0b00001111;
  7464  00570A  0E0F               	movlw	15
  7465  00570C  6E92               	movwf	3986,c	;volatile
  7466                           
  7467                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  7468  00570E  0EF2               	movlw	242
  7469  005710  6E93               	movwf	3987,c	;volatile
  7470                           
  7471                           ;MachineConfig.c: 27: TRISC = 0x00;
  7472  005712  0E00               	movlw	0
  7473  005714  6E94               	movwf	3988,c	;volatile
  7474                           
  7475                           ;MachineConfig.c: 31: TRISD = 0x00;
  7476  005716  0E00               	movlw	0
  7477  005718  6E95               	movwf	3989,c	;volatile
  7478                           
  7479                           ;MachineConfig.c: 34: TRISE = 0x00;
  7480  00571A  0E00               	movlw	0
  7481  00571C  6E96               	movwf	3990,c	;volatile
  7482                           
  7483                           ;MachineConfig.c: 37: LATA = 0x00;
  7484  00571E  0E00               	movlw	0
  7485  005720  6E89               	movwf	3977,c	;volatile
  7486                           
  7487                           ;MachineConfig.c: 38: LATB = 0x00;
  7488  005722  0E00               	movlw	0
  7489  005724  6E8A               	movwf	3978,c	;volatile
  7490                           
  7491                           ;MachineConfig.c: 39: LATC = 0x00;
  7492  005726  0E00               	movlw	0
  7493  005728  6E8B               	movwf	3979,c	;volatile
  7494                           
  7495                           ;MachineConfig.c: 40: LATD = 0x00;
  7496  00572A  0E00               	movlw	0
  7497  00572C  6E8C               	movwf	3980,c	;volatile
  7498                           
  7499                           ;MachineConfig.c: 41: LATE = 0x00;
  7500  00572E  0E00               	movlw	0
  7501  005730  6E8D               	movwf	3981,c	;volatile
  7502                           
  7503                           ;MachineConfig.c: 43: nRBPU = 0;
  7504  005732  9EF1               	bcf	intcon2,7,c	;volatile
  7505                           
  7506                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  7507  005734  0E00               	movlw	0
  7508  005736  6EC2               	movwf	4034,c	;volatile
  7509                           
  7510                           ;MachineConfig.c: 47: ADCON1 = 0b00001011;
  7511  005738  0E0B               	movlw	11
  7512  00573A  6EC1               	movwf	4033,c	;volatile
  7513                           
  7514                           ;MachineConfig.c: 52: CVRCON = 0x00;
  7515  00573C  0E00               	movlw	0
  7516  00573E  6EB5               	movwf	4021,c	;volatile
  7517                           
  7518                           ;MachineConfig.c: 53: CMCONbits.CIS = 0;
  7519  005740  96B4               	bcf	4020,3,c	;volatile
  7520                           
  7521                           ;MachineConfig.c: 54: ADCON2 = 0b10110001;
  7522  005742  0EB1               	movlw	177
  7523  005744  6EC0               	movwf	4032,c	;volatile
  7524                           
  7525                           ;MachineConfig.c: 57: INT1IE = 1;
  7526  005746  86F0               	bsf	intcon3,3,c	;volatile
  7527                           
  7528                           ;MachineConfig.c: 59: TMR0IE = 1;
  7529  005748  8AF2               	bsf	intcon,5,c	;volatile
  7530                           
  7531                           ;MachineConfig.c: 60: TMR1IE = 1;
  7532  00574A  809D               	bsf	3997,0,c	;volatile
  7533                           
  7534                           ;MachineConfig.c: 61: TMR2IE = 1;
  7535  00574C  829D               	bsf	3997,1,c	;volatile
  7536                           
  7537                           ;MachineConfig.c: 62: TMR3IE = 1;
  7538  00574E  82A0               	bsf	4000,1,c	;volatile
  7539                           
  7540                           ;MachineConfig.c: 64: T1CON = 0b10110000;
  7541  005750  0EB0               	movlw	176
  7542  005752  6ECD               	movwf	4045,c	;volatile
  7543                           
  7544                           ;MachineConfig.c: 65: T2CON = 0b01111011;
  7545  005754  0E7B               	movlw	123
  7546  005756  6ECA               	movwf	4042,c	;volatile
  7547                           
  7548                           ;MachineConfig.c: 66: PR2 = 0x22;
  7549  005758  0E22               	movlw	34
  7550  00575A  6ECB               	movwf	4043,c	;volatile
  7551                           
  7552                           ;MachineConfig.c: 67: T3CON = 0b10110000;
  7553  00575C  0EB0               	movlw	176
  7554  00575E  6EB1               	movwf	4017,c	;volatile
  7555                           
  7556                           ;MachineConfig.c: 68: PEIE = 1;
  7557  005760  8CF2               	bsf	intcon,6,c	;volatile
  7558                           
  7559                           ;MachineConfig.c: 69: ADIE = 0;
  7560  005762  9C9D               	bcf	3997,6,c	;volatile
  7561                           
  7562                           ;MachineConfig.c: 70: (INTCONbits.GIE = 0);
  7563  005764  9EF2               	bcf	intcon,7,c	;volatile
  7564  005766  0012               	return		;funcret
  7565  005768                     __end_of_machineConfig:
  7566                           	opt stack 0
  7567                           tblptru	equ	0xFF8
  7568                           tblptrh	equ	0xFF7
  7569                           tblptrl	equ	0xFF6
  7570                           tablat	equ	0xFF5
  7571                           prodh	equ	0xFF4
  7572                           prodl	equ	0xFF3
  7573                           intcon	equ	0xFF2
  7574                           intcon2	equ	0xFF1
  7575                           intcon3	equ	0xFF0
  7576                           postinc0	equ	0xFEE
  7577                           wreg	equ	0xFE8
  7578                           postdec1	equ	0xFE5
  7579                           fsr1l	equ	0xFE1
  7580                           indf2	equ	0xFDF
  7581                           postinc2	equ	0xFDE
  7582                           postdec2	equ	0xFDD
  7583                           fsr2h	equ	0xFDA
  7584                           fsr2l	equ	0xFD9
  7585                           status	equ	0xFD8
  7586                           
  7587 ;; *************** function _logRun *****************
  7588 ;; Defined at:
  7589 ;;		line 88 in file "EEPROM.c"
  7590 ;; Parameters:    Size  Location     Type
  7591 ;;		None
  7592 ;; Auto vars:     Size  Location     Type
  7593 ;;  byte_i          1   53[BANK0 ] unsigned char 
  7594 ;;  i               2   55[BANK0 ] int 
  7595 ;;  num             1   49[BANK0 ] unsigned char 
  7596 ;;  addr            2   57[BANK0 ] unsigned short 
  7597 ;;  byte11          1   54[BANK0 ] unsigned char 
  7598 ;;  byte3           1   52[BANK0 ] unsigned char 
  7599 ;;  byte2           1   51[BANK0 ] unsigned char 
  7600 ;;  byte1           1   50[BANK0 ] unsigned char 
  7601 ;; Return value:  Size  Location     Type
  7602 ;;                  1    wreg      void 
  7603 ;; Registers used:
  7604 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7605 ;; Tracked objects:
  7606 ;;		On entry : 0/0
  7607 ;;		On exit  : 0/0
  7608 ;;		Unchanged: 0/0
  7609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7611 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7613 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7614 ;;Total ram usage:       10 bytes
  7615 ;; Hardware stack levels used:    1
  7616 ;; Hardware stack levels required when called:   11
  7617 ;; This function calls:
  7618 ;;		_EEPROM_read
  7619 ;;		_EEPROM_write
  7620 ;; This function is called by:
  7621 ;;		_main
  7622 ;; This function uses a non-reentrant model
  7623 ;;
  7624                           
  7625                           	psect	text16
  7626  00430E                     __ptext16:
  7627                           	opt stack 0
  7628  00430E                     _logRun:
  7629                           	opt stack 19
  7630                           
  7631                           ;EEPROM.c: 101: sel = EEPROM_read(0);
  7632                           
  7633                           ;incstack = 0
  7634  00430E  0E00               	movlw	0
  7635  004310  0100               	movlb	0	; () banked
  7636  004312  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  7637  004314  0E00               	movlw	0
  7638  004316  6F80               	movwf	EEPROM_read@address& (0+255),b
  7639  004318  EC2C  F030         	call	_EEPROM_read	;wreg free
  7640  00431C  0100               	movlb	0	; () banked
  7641  00431E  6FFD               	movwf	_sel& (0+255),b
  7642                           
  7643                           ; BSR set to: 0
  7644                           ;EEPROM.c: 102: unsigned short addr = 1 + 11 * sel;
  7645  004320  0100               	movlb	0	; () banked
  7646  004322  51FD               	movf	_sel& (0+255),w,b
  7647  004324  0D0B               	mullw	11
  7648  004326  0E01               	movlw	1
  7649  004328  24F3               	addwf	prodl,w,c
  7650  00432A  0100               	movlb	0	; () banked
  7651  00432C  6FB9               	movwf	logRun@addr& (0+255),b
  7652  00432E  0E00               	movlw	0
  7653  004330  20F4               	addwfc	prodh,w,c
  7654  004332  0100               	movlb	0	; () banked
  7655  004334  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  7656                           
  7657                           ; BSR set to: 0
  7658                           ;EEPROM.c: 105: if (sel < 3){
  7659  004336  0E03               	movlw	3
  7660  004338  0100               	movlb	0	; () banked
  7661  00433A  61FD               	cpfslt	_sel& (0+255),b
  7662  00433C  D00E               	goto	l10276
  7663                           
  7664                           ; BSR set to: 0
  7665                           ;EEPROM.c: 106: unsigned char num = sel+1;
  7666  00433E  0100               	movlb	0	; () banked
  7667  004340  29FD               	incf	_sel& (0+255),w,b
  7668  004342  0100               	movlb	0	; () banked
  7669  004344  6FB1               	movwf	logRun@num& (0+255),b
  7670                           
  7671                           ; BSR set to: 0
  7672                           ;EEPROM.c: 107: EEPROM_write(0, num);
  7673  004346  0E00               	movlw	0
  7674  004348  0100               	movlb	0	; () banked
  7675  00434A  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7676  00434C  0E00               	movlw	0
  7677  00434E  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7678  004350  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  7679  004354  EC3F  F024         	call	_EEPROM_write	;wreg free
  7680                           
  7681                           ;EEPROM.c: 108: }
  7682  004358  D00A               	goto	l10278
  7683  00435A                     l10276:
  7684                           
  7685                           ;EEPROM.c: 109: else{
  7686                           ;EEPROM.c: 110: EEPROM_write(0, 0);
  7687  00435A  0E00               	movlw	0
  7688  00435C  0100               	movlb	0	; () banked
  7689  00435E  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7690  004360  0E00               	movlw	0
  7691  004362  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7692  004364  0E00               	movlw	0
  7693  004366  0100               	movlb	0	; () banked
  7694  004368  6FAD               	movwf	EEPROM_write@data& (0+255),b
  7695  00436A  EC3F  F024         	call	_EEPROM_write	;wreg free
  7696  00436E                     l10278:
  7697                           
  7698                           ;EEPROM.c: 111: }
  7699                           ;EEPROM.c: 114: unsigned char byte1 = 0b10000000 | count_total;
  7700  00436E  0100               	movlb	0	; () banked
  7701  004370  51FE               	movf	_count_total& (0+255),w,b
  7702  004372  0980               	iorlw	128
  7703  004374  0100               	movlb	0	; () banked
  7704  004376  6FB2               	movwf	logRun@byte1& (0+255),b
  7705                           
  7706                           ; BSR set to: 0
  7707                           ;EEPROM.c: 115: EEPROM_write(addr, byte1);
  7708  004378  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7709  00437C  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7710  004380  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  7711  004384  EC3F  F024         	call	_EEPROM_write	;wreg free
  7712                           
  7713                           ;EEPROM.c: 116: addr++;
  7714  004388  0100               	movlb	0	; () banked
  7715  00438A  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7716  00438C  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7717                           
  7718                           ; BSR set to: 0
  7719                           ;EEPROM.c: 119: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  7720  00438E  385F               	swapf	_count_pop_no_tab,w,c
  7721  004390  0BF0               	andlw	240
  7722  004392  1061               	iorwf	_count_pop_w_tab,w,c
  7723  004394  0100               	movlb	0	; () banked
  7724  004396  6FB3               	movwf	logRun@byte2& (0+255),b
  7725                           
  7726                           ; BSR set to: 0
  7727                           ;EEPROM.c: 120: EEPROM_write(addr, byte2);
  7728  004398  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7729  00439C  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7730  0043A0  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  7731  0043A4  EC3F  F024         	call	_EEPROM_write	;wreg free
  7732                           
  7733                           ;EEPROM.c: 121: addr++;
  7734  0043A8  0100               	movlb	0	; () banked
  7735  0043AA  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7736  0043AC  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7737                           
  7738                           ; BSR set to: 0
  7739                           ;EEPROM.c: 122: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  7740  0043AE  385D               	swapf	_count_can_w_lab,w,c
  7741  0043B0  0BF0               	andlw	240
  7742  0043B2  105B               	iorwf	_count_can_no_lab,w,c
  7743  0043B4  0100               	movlb	0	; () banked
  7744  0043B6  6FB4               	movwf	logRun@byte3& (0+255),b
  7745                           
  7746                           ; BSR set to: 0
  7747                           ;EEPROM.c: 123: EEPROM_write(addr, byte3);
  7748  0043B8  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7749  0043BC  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7750  0043C0  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  7751  0043C4  EC3F  F024         	call	_EEPROM_write	;wreg free
  7752                           
  7753                           ;EEPROM.c: 124: addr++;
  7754  0043C8  0100               	movlb	0	; () banked
  7755  0043CA  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7756  0043CC  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7757                           
  7758                           ; BSR set to: 0
  7759                           ;EEPROM.c: 127: for(int i = 0; i < 7; i++){
  7760  0043CE  0E00               	movlw	0
  7761  0043D0  0100               	movlb	0	; () banked
  7762  0043D2  6FB8               	movwf	(logRun@i+1)& (0+255),b
  7763  0043D4  0E00               	movlw	0
  7764  0043D6  6FB7               	movwf	logRun@i& (0+255),b
  7765                           
  7766                           ; BSR set to: 0
  7767  0043D8  0100               	movlb	0	; () banked
  7768  0043DA  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7769  0043DC  D008               	goto	l10302
  7770  0043DE  0100               	movlb	0	; () banked
  7771  0043E0  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7772  0043E2  E128               	bnz	l1183
  7773  0043E4  0E07               	movlw	7
  7774  0043E6  0100               	movlb	0	; () banked
  7775  0043E8  5DB7               	subwf	logRun@i& (0+255),w,b
  7776  0043EA  B0D8               	btfsc	status,0,c
  7777  0043EC  D023               	goto	l1183
  7778  0043EE                     l10302:
  7779                           
  7780                           ; BSR set to: 0
  7781                           ;EEPROM.c: 128: unsigned char byte_i = startTime[i];
  7782  0043EE  90D8               	bcf	status,0,c
  7783  0043F0  0100               	movlb	0	; () banked
  7784  0043F2  35B7               	rlcf	logRun@i& (0+255),w,b
  7785  0043F4  6ED9               	movwf	fsr2l,c
  7786  0043F6  0100               	movlb	0	; () banked
  7787  0043F8  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  7788  0043FA  6EDA               	movwf	fsr2h,c
  7789  0043FC  0E0E               	movlw	low _startTime
  7790  0043FE  26D9               	addwf	fsr2l,f,c
  7791  004400  0E01               	movlw	high _startTime
  7792  004402  22DA               	addwfc	fsr2h,f,c
  7793  004404  50DF               	movf	indf2,w,c
  7794  004406  0100               	movlb	0	; () banked
  7795  004408  6FB5               	movwf	logRun@byte_i& (0+255),b
  7796                           
  7797                           ; BSR set to: 0
  7798                           ;EEPROM.c: 129: EEPROM_write(addr, byte_i);
  7799  00440A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7800  00440E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7801  004412  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  7802  004416  EC3F  F024         	call	_EEPROM_write	;wreg free
  7803                           
  7804                           ;EEPROM.c: 130: addr++;
  7805  00441A  0100               	movlb	0	; () banked
  7806  00441C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7807  00441E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7808                           
  7809                           ; BSR set to: 0
  7810  004420  0100               	movlb	0	; () banked
  7811  004422  4BB7               	infsnz	logRun@i& (0+255),f,b
  7812  004424  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  7813                           
  7814                           ; BSR set to: 0
  7815  004426  0100               	movlb	0	; () banked
  7816  004428  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7817  00442A  D7E1               	goto	l10302
  7818  00442C  0100               	movlb	0	; () banked
  7819  00442E  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7820  004430  E101               	bnz	u10300
  7821  004432  D7D8               	goto	L9
  7822  004434                     u10300:
  7823  004434                     l1183:
  7824                           
  7825                           ; BSR set to: 0
  7826                           ;EEPROM.c: 131: }
  7827                           ;EEPROM.c: 134: unsigned char byte11 = total_time;
  7828  004434  C0FA  F0B6         	movff	_total_time,logRun@byte11
  7829                           
  7830                           ; BSR set to: 0
  7831                           ;EEPROM.c: 135: EEPROM_write(addr, byte11);
  7832  004438  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7833  00443C  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7834  004440  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  7835  004444  EC3F  F024         	call	_EEPROM_write	;wreg free
  7836  004448  0012               	return		;funcret
  7837  00444A                     __end_of_logRun:
  7838                           	opt stack 0
  7839                           tblptru	equ	0xFF8
  7840                           tblptrh	equ	0xFF7
  7841                           tblptrl	equ	0xFF6
  7842                           tablat	equ	0xFF5
  7843                           prodh	equ	0xFF4
  7844                           prodl	equ	0xFF3
  7845                           intcon	equ	0xFF2
  7846                           intcon2	equ	0xFF1
  7847                           intcon3	equ	0xFF0
  7848                           postinc0	equ	0xFEE
  7849                           wreg	equ	0xFE8
  7850                           postdec1	equ	0xFE5
  7851                           fsr1l	equ	0xFE1
  7852                           indf2	equ	0xFDF
  7853                           postinc2	equ	0xFDE
  7854                           postdec2	equ	0xFDD
  7855                           fsr2h	equ	0xFDA
  7856                           fsr2l	equ	0xFD9
  7857                           status	equ	0xFD8
  7858                           
  7859 ;; *************** function _initUI *****************
  7860 ;; Defined at:
  7861 ;;		line 62 in file "UI.c"
  7862 ;; Parameters:    Size  Location     Type
  7863 ;;		None
  7864 ;; Auto vars:     Size  Location     Type
  7865 ;;		None
  7866 ;; Return value:  Size  Location     Type
  7867 ;;                  1    wreg      void 
  7868 ;; Registers used:
  7869 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7870 ;; Tracked objects:
  7871 ;;		On entry : 0/0
  7872 ;;		On exit  : 0/0
  7873 ;;		Unchanged: 0/0
  7874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7878 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7879 ;;Total ram usage:        0 bytes
  7880 ;; Hardware stack levels used:    1
  7881 ;; Hardware stack levels required when called:   12
  7882 ;; This function calls:
  7883 ;;		_change_state_to_menu_start
  7884 ;;		_loadRTC
  7885 ;; This function is called by:
  7886 ;;		_main
  7887 ;; This function uses a non-reentrant model
  7888 ;;
  7889                           
  7890                           	psect	text17
  7891  005C5C                     __ptext17:
  7892                           	opt stack 0
  7893  005C5C                     _initUI:
  7894                           	opt stack 18
  7895                           
  7896                           ;UI.c: 63: (INTCONbits.GIE = 1);
  7897                           
  7898                           ;incstack = 0
  7899  005C5C  8EF2               	bsf	intcon,7,c	;volatile
  7900                           
  7901                           ;UI.c: 64: machine_state = UI_state;
  7902  005C5E  0E00               	movlw	0
  7903  005C60  0100               	movlb	0	; () banked
  7904  005C62  6FFC               	movwf	_machine_state& (0+255),b
  7905                           
  7906                           ;UI.c: 65: logstate = 0;
  7907  005C64  0E00               	movlw	0
  7908  005C66  0100               	movlb	0	; () banked
  7909  005C68  6FF9               	movwf	(_logstate+1)& (0+255),b
  7910  005C6A  0E00               	movlw	0
  7911  005C6C  6FF8               	movwf	_logstate& (0+255),b
  7912                           
  7913                           ; BSR set to: 0
  7914                           ;UI.c: 67: if(RTCflag){
  7915  005C6E  0100               	movlb	0	; () banked
  7916  005C70  51E6               	movf	_RTCflag& (0+255),w,b
  7917  005C72  0100               	movlb	0	; () banked
  7918  005C74  11E7               	iorwf	(_RTCflag+1)& (0+255),w,b
  7919  005C76  A4D8               	btfss	status,2,c
  7920                           
  7921                           ; BSR set to: 0
  7922                           ;UI.c: 68: loadRTC();
  7923  005C78  ECDC  F028         	call	_loadRTC	;wreg free
  7924                           
  7925                           ;UI.c: 69: }
  7926                           ;UI.c: 71: change_state_to_menu_start();
  7927  005C7C  EC4C  F02F         	call	_change_state_to_menu_start	;wreg free
  7928                           
  7929                           ;UI.c: 72: firstboot = 1;
  7930  005C80  0E00               	movlw	0
  7931  005C82  0101               	movlb	1	; () banked
  7932  005C84  6F3E               	movwf	(_firstboot+1)& (0+255),b
  7933  005C86  0E01               	movlw	1
  7934  005C88  6F3D               	movwf	_firstboot& (0+255),b
  7935                           
  7936                           ; BSR set to: 1
  7937  005C8A  0012               	return		;funcret
  7938  005C8C                     __end_of_initUI:
  7939                           	opt stack 0
  7940                           tblptru	equ	0xFF8
  7941                           tblptrh	equ	0xFF7
  7942                           tblptrl	equ	0xFF6
  7943                           tablat	equ	0xFF5
  7944                           prodh	equ	0xFF4
  7945                           prodl	equ	0xFF3
  7946                           intcon	equ	0xFF2
  7947                           intcon2	equ	0xFF1
  7948                           intcon3	equ	0xFF0
  7949                           postinc0	equ	0xFEE
  7950                           wreg	equ	0xFE8
  7951                           postdec1	equ	0xFE5
  7952                           fsr1l	equ	0xFE1
  7953                           indf2	equ	0xFDF
  7954                           postinc2	equ	0xFDE
  7955                           postdec2	equ	0xFDD
  7956                           fsr2h	equ	0xFDA
  7957                           fsr2l	equ	0xFD9
  7958                           status	equ	0xFD8
  7959                           
  7960 ;; *************** function _loadRTC *****************
  7961 ;; Defined at:
  7962 ;;		line 28 in file "RTC.c"
  7963 ;; Parameters:    Size  Location     Type
  7964 ;;		None
  7965 ;; Auto vars:     Size  Location     Type
  7966 ;;  i               2   22[BANK0 ] int 
  7967 ;; Return value:  Size  Location     Type
  7968 ;;                  1    wreg      void 
  7969 ;; Registers used:
  7970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7971 ;; Tracked objects:
  7972 ;;		On entry : 0/0
  7973 ;;		On exit  : 0/0
  7974 ;;		Unchanged: 0/0
  7975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7977 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7978 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7979 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7980 ;;Total ram usage:        3 bytes
  7981 ;; Hardware stack levels used:    1
  7982 ;; Hardware stack levels required when called:    9
  7983 ;; This function calls:
  7984 ;;		_I2C_Master_Init
  7985 ;;		_I2C_Master_Start
  7986 ;;		_I2C_Master_Stop
  7987 ;;		_I2C_Master_Write
  7988 ;; This function is called by:
  7989 ;;		_initUI
  7990 ;; This function uses a non-reentrant model
  7991 ;;
  7992                           
  7993                           	psect	text18
  7994  0051B8                     __ptext18:
  7995                           	opt stack 0
  7996  0051B8                     _loadRTC:
  7997                           	opt stack 20
  7998                           
  7999                           ;RTC.c: 30: I2C_Master_Init(10000);
  8000                           
  8001                           ; BSR set to: 1
  8002                           ;incstack = 0
  8003  0051B8  0E10               	movlw	16
  8004  0051BA  0100               	movlb	0	; () banked
  8005  0051BC  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  8006  0051BE  0E27               	movlw	39
  8007  0051C0  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  8008  0051C2  0E00               	movlw	0
  8009  0051C4  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  8010  0051C6  0E00               	movlw	0
  8011  0051C8  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  8012  0051CA  ECE5  F02B         	call	_I2C_Master_Init	;wreg free
  8013                           
  8014                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  8015  0051CE  9EF2               	bcf	intcon,7,c	;volatile
  8016                           
  8017                           ;RTC.c: 34: I2C_Master_Start();
  8018  0051D0  EC8F  F030         	call	_I2C_Master_Start	;wreg free
  8019                           
  8020                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  8021  0051D4  0E00               	movlw	0
  8022  0051D6  0100               	movlb	0	; () banked
  8023  0051D8  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8024  0051DA  0ED0               	movlw	208
  8025  0051DC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8026  0051DE  EC7D  F030         	call	_I2C_Master_Write	;wreg free
  8027                           
  8028                           ;RTC.c: 36: I2C_Master_Write(0x00);
  8029  0051E2  0E00               	movlw	0
  8030  0051E4  0100               	movlb	0	; () banked
  8031  0051E6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8032  0051E8  0E00               	movlw	0
  8033  0051EA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8034  0051EC  EC7D  F030         	call	_I2C_Master_Write	;wreg free
  8035                           
  8036                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  8037  0051F0  0E00               	movlw	0
  8038  0051F2  0100               	movlb	0	; () banked
  8039  0051F4  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  8040  0051F6  0E00               	movlw	0
  8041  0051F8  6F96               	movwf	loadRTC@i& (0+255),b
  8042  0051FA                     l7878:
  8043                           
  8044                           ; BSR set to: 0
  8045  0051FA  0100               	movlb	0	; () banked
  8046  0051FC  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  8047  0051FE  D008               	goto	l7882
  8048  005200  0100               	movlb	0	; () banked
  8049  005202  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  8050  005204  E11B               	bnz	l7888
  8051  005206  0E07               	movlw	7
  8052  005208  0100               	movlb	0	; () banked
  8053  00520A  5D96               	subwf	loadRTC@i& (0+255),w,b
  8054  00520C  B0D8               	btfsc	status,0,c
  8055  00520E  D016               	goto	l7888
  8056  005210                     l7882:
  8057                           
  8058                           ; BSR set to: 0
  8059                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  8060  005210  0E24               	movlw	low _time
  8061  005212  0100               	movlb	0	; () banked
  8062  005214  2596               	addwf	loadRTC@i& (0+255),w,b
  8063  005216  6ED9               	movwf	fsr2l,c
  8064  005218  0E01               	movlw	high _time
  8065  00521A  0100               	movlb	0	; () banked
  8066  00521C  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  8067  00521E  6EDA               	movwf	fsr2h,c
  8068  005220  50DF               	movf	indf2,w,c
  8069  005222  0100               	movlb	0	; () banked
  8070  005224  6F95               	movwf	??_loadRTC& (0+255),b
  8071  005226  0100               	movlb	0	; () banked
  8072  005228  5195               	movf	??_loadRTC& (0+255),w,b
  8073  00522A  0100               	movlb	0	; () banked
  8074  00522C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8075  00522E  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  8076  005230  EC7D  F030         	call	_I2C_Master_Write	;wreg free
  8077  005234  0100               	movlb	0	; () banked
  8078  005236  4B96               	infsnz	loadRTC@i& (0+255),f,b
  8079  005238  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  8080  00523A  D7DF               	goto	l7878
  8081  00523C                     l7888:
  8082                           
  8083                           ; BSR set to: 0
  8084                           ;RTC.c: 39: }
  8085                           ;RTC.c: 40: I2C_Master_Stop();
  8086  00523C  EC8B  F030         	call	_I2C_Master_Stop	;wreg free
  8087                           
  8088                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  8089  005240  8EF2               	bsf	intcon,7,c	;volatile
  8090  005242  0012               	return		;funcret
  8091  005244                     __end_of_loadRTC:
  8092                           	opt stack 0
  8093                           tblptru	equ	0xFF8
  8094                           tblptrh	equ	0xFF7
  8095                           tblptrl	equ	0xFF6
  8096                           tablat	equ	0xFF5
  8097                           prodh	equ	0xFF4
  8098                           prodl	equ	0xFF3
  8099                           intcon	equ	0xFF2
  8100                           intcon2	equ	0xFF1
  8101                           intcon3	equ	0xFF0
  8102                           postinc0	equ	0xFEE
  8103                           wreg	equ	0xFE8
  8104                           postdec1	equ	0xFE5
  8105                           fsr1l	equ	0xFE1
  8106                           indf2	equ	0xFDF
  8107                           postinc2	equ	0xFDE
  8108                           postdec2	equ	0xFDD
  8109                           fsr2h	equ	0xFDA
  8110                           fsr2l	equ	0xFD9
  8111                           status	equ	0xFD8
  8112                           
  8113 ;; *************** function _I2C_Master_Init *****************
  8114 ;; Defined at:
  8115 ;;		line 15 in file "I2C.c"
  8116 ;; Parameters:    Size  Location     Type
  8117 ;;  c               4   13[BANK0 ] const unsigned long 
  8118 ;; Auto vars:     Size  Location     Type
  8119 ;;		None
  8120 ;; Return value:  Size  Location     Type
  8121 ;;                  1    wreg      void 
  8122 ;; Registers used:
  8123 ;;		wreg, status,2, status,0, cstack
  8124 ;; Tracked objects:
  8125 ;;		On entry : 0/0
  8126 ;;		On exit  : 0/0
  8127 ;;		Unchanged: 0/0
  8128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8129 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8131 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8132 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8133 ;;Total ram usage:        8 bytes
  8134 ;; Hardware stack levels used:    1
  8135 ;; Hardware stack levels required when called:    8
  8136 ;; This function calls:
  8137 ;;		___lldiv
  8138 ;; This function is called by:
  8139 ;;		_main
  8140 ;;		_loadRTC
  8141 ;; This function uses a non-reentrant model
  8142 ;;
  8143                           
  8144                           	psect	text19
  8145  0057CA                     __ptext19:
  8146                           	opt stack 0
  8147  0057CA                     _I2C_Master_Init:
  8148                           	opt stack 20
  8149                           
  8150                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  8151                           
  8152                           ;incstack = 0
  8153  0057CA  0E00               	movlw	0
  8154  0057CC  6EC7               	movwf	4039,c	;volatile
  8155                           
  8156                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  8157  0057CE  0E28               	movlw	40
  8158  0057D0  6EC6               	movwf	4038,c	;volatile
  8159                           
  8160                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  8161  0057D2  0E00               	movlw	0
  8162  0057D4  6EC5               	movwf	4037,c	;volatile
  8163                           
  8164                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  8165  0057D6  0E00               	movlw	0
  8166  0057D8  0100               	movlb	0	; () banked
  8167  0057DA  6F80               	movwf	___lldiv@dividend& (0+255),b
  8168  0057DC  0E48               	movlw	72
  8169  0057DE  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  8170  0057E0  0EE8               	movlw	232
  8171  0057E2  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  8172  0057E4  0E01               	movlw	1
  8173  0057E6  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  8174  0057E8  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  8175  0057EC  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  8176  0057F0  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  8177  0057F4  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  8178  0057F8  0E02               	movlw	2
  8179  0057FA                     u6455:
  8180  0057FA  90D8               	bcf	status,0,c
  8181  0057FC  0100               	movlb	0	; () banked
  8182  0057FE  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  8183  005800  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  8184  005802  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  8185  005804  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  8186  005806  2EE8               	decfsz	wreg,f,c
  8187  005808  D7F8               	goto	u6455
  8188  00580A  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  8189  00580E  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  8190  005812  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  8191  005816  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  8192  00581A  EC8C  F027         	call	___lldiv	;wreg free
  8193  00581E  0100               	movlb	0	; () banked
  8194  005820  0580               	decf	?___lldiv& (0+255),w,b
  8195  005822  6EC8               	movwf	4040,c	;volatile
  8196                           
  8197                           ; BSR set to: 0
  8198                           ;I2C.c: 22: TRISC3 = 1;
  8199  005824  8694               	bsf	3988,3,c	;volatile
  8200                           
  8201                           ; BSR set to: 0
  8202                           ;I2C.c: 23: TRISC4 = 1;
  8203  005826  8894               	bsf	3988,4,c	;volatile
  8204                           
  8205                           ; BSR set to: 0
  8206  005828  0012               	return		;funcret
  8207  00582A                     __end_of_I2C_Master_Init:
  8208                           	opt stack 0
  8209                           tblptru	equ	0xFF8
  8210                           tblptrh	equ	0xFF7
  8211                           tblptrl	equ	0xFF6
  8212                           tablat	equ	0xFF5
  8213                           prodh	equ	0xFF4
  8214                           prodl	equ	0xFF3
  8215                           intcon	equ	0xFF2
  8216                           intcon2	equ	0xFF1
  8217                           intcon3	equ	0xFF0
  8218                           postinc0	equ	0xFEE
  8219                           wreg	equ	0xFE8
  8220                           postdec1	equ	0xFE5
  8221                           fsr1l	equ	0xFE1
  8222                           indf2	equ	0xFDF
  8223                           postinc2	equ	0xFDE
  8224                           postdec2	equ	0xFDD
  8225                           fsr2h	equ	0xFDA
  8226                           fsr2l	equ	0xFD9
  8227                           status	equ	0xFD8
  8228                           
  8229 ;; *************** function ___lldiv *****************
  8230 ;; Defined at:
  8231 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  8232 ;; Parameters:    Size  Location     Type
  8233 ;;  dividend        4    0[BANK0 ] unsigned long 
  8234 ;;  divisor         4    4[BANK0 ] unsigned long 
  8235 ;; Auto vars:     Size  Location     Type
  8236 ;;  quotient        4    8[BANK0 ] unsigned long 
  8237 ;;  counter         1   12[BANK0 ] unsigned char 
  8238 ;; Return value:  Size  Location     Type
  8239 ;;                  4    0[BANK0 ] unsigned long 
  8240 ;; Registers used:
  8241 ;;		wreg, status,2, status,0
  8242 ;; Tracked objects:
  8243 ;;		On entry : 0/0
  8244 ;;		On exit  : 0/0
  8245 ;;		Unchanged: 0/0
  8246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8247 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8248 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8250 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8251 ;;Total ram usage:       13 bytes
  8252 ;; Hardware stack levels used:    1
  8253 ;; Hardware stack levels required when called:    7
  8254 ;; This function calls:
  8255 ;;		Nothing
  8256 ;; This function is called by:
  8257 ;;		_I2C_Master_Init
  8258 ;; This function uses a non-reentrant model
  8259 ;;
  8260                           
  8261                           	psect	text20
  8262  004F18                     __ptext20:
  8263                           	opt stack 0
  8264  004F18                     ___lldiv:
  8265                           	opt stack 20
  8266                           
  8267                           ; BSR set to: 0
  8268                           ;incstack = 0
  8269  004F18  0E00               	movlw	0
  8270  004F1A  0100               	movlb	0	; () banked
  8271  004F1C  6F88               	movwf	___lldiv@quotient& (0+255),b
  8272  004F1E  0E00               	movlw	0
  8273  004F20  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  8274  004F22  0E00               	movlw	0
  8275  004F24  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  8276  004F26  0E00               	movlw	0
  8277  004F28  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  8278                           
  8279                           ; BSR set to: 0
  8280  004F2A  0100               	movlb	0	; () banked
  8281  004F2C  5184               	movf	___lldiv@divisor& (0+255),w,b
  8282  004F2E  0100               	movlb	0	; () banked
  8283  004F30  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  8284  004F32  0100               	movlb	0	; () banked
  8285  004F34  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  8286  004F36  0100               	movlb	0	; () banked
  8287  004F38  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  8288  004F3A  B4D8               	btfsc	status,2,c
  8289  004F3C  D042               	goto	l1976
  8290                           
  8291                           ; BSR set to: 0
  8292  004F3E  0E01               	movlw	1
  8293  004F40  0100               	movlb	0	; () banked
  8294  004F42  6F8C               	movwf	___lldiv@counter& (0+255),b
  8295  004F44  D008               	goto	l7202
  8296  004F46                     l7200:
  8297                           
  8298                           ; BSR set to: 0
  8299  004F46  0100               	movlb	0	; () banked
  8300  004F48  90D8               	bcf	status,0,c
  8301  004F4A  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  8302  004F4C  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  8303  004F4E  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  8304  004F50  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  8305  004F52  0100               	movlb	0	; () banked
  8306  004F54  2B8C               	incf	___lldiv@counter& (0+255),f,b
  8307  004F56                     l7202:
  8308                           
  8309                           ; BSR set to: 0
  8310  004F56  0100               	movlb	0	; () banked
  8311  004F58  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  8312  004F5A  D7F5               	goto	l7200
  8313  004F5C                     l7204:
  8314                           
  8315                           ; BSR set to: 0
  8316  004F5C  0100               	movlb	0	; () banked
  8317  004F5E  90D8               	bcf	status,0,c
  8318  004F60  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  8319  004F62  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  8320  004F64  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  8321  004F66  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  8322                           
  8323                           ; BSR set to: 0
  8324  004F68  0100               	movlb	0	; () banked
  8325  004F6A  5184               	movf	___lldiv@divisor& (0+255),w,b
  8326  004F6C  0100               	movlb	0	; () banked
  8327  004F6E  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  8328  004F70  0100               	movlb	0	; () banked
  8329  004F72  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8330  004F74  0100               	movlb	0	; () banked
  8331  004F76  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  8332  004F78  0100               	movlb	0	; () banked
  8333  004F7A  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8334  004F7C  0100               	movlb	0	; () banked
  8335  004F7E  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  8336  004F80  0100               	movlb	0	; () banked
  8337  004F82  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8338  004F84  0100               	movlb	0	; () banked
  8339  004F86  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  8340  004F88  A0D8               	btfss	status,0,c
  8341  004F8A  D012               	goto	l7212
  8342                           
  8343                           ; BSR set to: 0
  8344  004F8C  0100               	movlb	0	; () banked
  8345  004F8E  5184               	movf	___lldiv@divisor& (0+255),w,b
  8346  004F90  0100               	movlb	0	; () banked
  8347  004F92  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  8348  004F94  0100               	movlb	0	; () banked
  8349  004F96  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8350  004F98  0100               	movlb	0	; () banked
  8351  004F9A  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  8352  004F9C  0100               	movlb	0	; () banked
  8353  004F9E  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8354  004FA0  0100               	movlb	0	; () banked
  8355  004FA2  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  8356  004FA4  0100               	movlb	0	; () banked
  8357  004FA6  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8358  004FA8  0100               	movlb	0	; () banked
  8359  004FAA  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  8360                           
  8361                           ; BSR set to: 0
  8362  004FAC  0100               	movlb	0	; () banked
  8363  004FAE  8188               	bsf	___lldiv@quotient& (0+255),0,b
  8364  004FB0                     l7212:
  8365                           
  8366                           ; BSR set to: 0
  8367  004FB0  0100               	movlb	0	; () banked
  8368  004FB2  90D8               	bcf	status,0,c
  8369  004FB4  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  8370  004FB6  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  8371  004FB8  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  8372  004FBA  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  8373                           
  8374                           ; BSR set to: 0
  8375  004FBC  0100               	movlb	0	; () banked
  8376  004FBE  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  8377  004FC0  D7CD               	goto	l7204
  8378  004FC2                     l1976:
  8379                           
  8380                           ; BSR set to: 0
  8381  004FC2  C088  F080         	movff	___lldiv@quotient,?___lldiv
  8382  004FC6  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  8383  004FCA  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  8384  004FCE  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  8385                           
  8386                           ; BSR set to: 0
  8387  004FD2  0012               	return		;funcret
  8388  004FD4                     __end_of___lldiv:
  8389                           	opt stack 0
  8390                           tblptru	equ	0xFF8
  8391                           tblptrh	equ	0xFF7
  8392                           tblptrl	equ	0xFF6
  8393                           tablat	equ	0xFF5
  8394                           prodh	equ	0xFF4
  8395                           prodl	equ	0xFF3
  8396                           intcon	equ	0xFF2
  8397                           intcon2	equ	0xFF1
  8398                           intcon3	equ	0xFF0
  8399                           postinc0	equ	0xFEE
  8400                           wreg	equ	0xFE8
  8401                           postdec1	equ	0xFE5
  8402                           fsr1l	equ	0xFE1
  8403                           indf2	equ	0xFDF
  8404                           postinc2	equ	0xFDE
  8405                           postdec2	equ	0xFDD
  8406                           fsr2h	equ	0xFDA
  8407                           fsr2l	equ	0xFD9
  8408                           status	equ	0xFD8
  8409                           
  8410 ;; *************** function _change_state_to_menu_start *****************
  8411 ;; Defined at:
  8412 ;;		line 477 in file "UI.c"
  8413 ;; Parameters:    Size  Location     Type
  8414 ;;		None
  8415 ;; Auto vars:     Size  Location     Type
  8416 ;;		None
  8417 ;; Return value:  Size  Location     Type
  8418 ;;                  1    wreg      void 
  8419 ;; Registers used:
  8420 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8421 ;; Tracked objects:
  8422 ;;		On entry : 0/0
  8423 ;;		On exit  : 0/0
  8424 ;;		Unchanged: 0/0
  8425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8430 ;;Total ram usage:        0 bytes
  8431 ;; Hardware stack levels used:    1
  8432 ;; Hardware stack levels required when called:   11
  8433 ;; This function calls:
  8434 ;;		_lcdInst
  8435 ;;		_printRTC
  8436 ;;		_printf
  8437 ;; This function is called by:
  8438 ;;		_initUI
  8439 ;; This function uses a non-reentrant model
  8440 ;;
  8441                           
  8442                           	psect	text21
  8443  005E98                     __ptext21:
  8444                           	opt stack 0
  8445  005E98                     _change_state_to_menu_start:
  8446                           	opt stack 18
  8447                           
  8448                           ;UI.c: 478: cur_state = 0;
  8449                           
  8450                           ; BSR set to: 0
  8451                           ;incstack = 0
  8452  005E98  0E00               	movlw	0
  8453  005E9A  0100               	movlb	0	; () banked
  8454  005E9C  6FE9               	movwf	(_cur_state+1)& (0+255),b
  8455  005E9E  0E00               	movlw	0
  8456  005EA0  6FE8               	movwf	_cur_state& (0+255),b
  8457                           
  8458                           ; BSR set to: 0
  8459                           ;UI.c: 480: lcdInst(0b10000000);;
  8460  005EA2  0E80               	movlw	128
  8461  005EA4  EC69  F030         	call	_lcdInst
  8462                           
  8463                           ;UI.c: 481: printRTC();
  8464  005EA8  ECF1  F019         	call	_printRTC	;wreg free
  8465                           
  8466                           ;UI.c: 482: lcdInst(0b11000000);;
  8467  005EAC  0EC0               	movlw	192
  8468  005EAE  EC69  F030         	call	_lcdInst
  8469                           
  8470                           ;UI.c: 483: printf("PUSH TO CONTINUE");
  8471  005EB2  0E06               	movlw	low STR_30
  8472  005EB4  0100               	movlb	0	; () banked
  8473  005EB6  6F8E               	movwf	printf@f& (0+255),b
  8474  005EB8  0EFE               	movlw	high STR_30
  8475  005EBA  0100               	movlb	0	; () banked
  8476  005EBC  6F8F               	movwf	(printf@f+1)& (0+255),b
  8477  005EBE  ECE7  F00E         	call	_printf	;wreg free
  8478  005EC2  0012               	return		;funcret
  8479  005EC4                     __end_of_change_state_to_menu_start:
  8480                           	opt stack 0
  8481                           tblptru	equ	0xFF8
  8482                           tblptrh	equ	0xFF7
  8483                           tblptrl	equ	0xFF6
  8484                           tablat	equ	0xFF5
  8485                           prodh	equ	0xFF4
  8486                           prodl	equ	0xFF3
  8487                           intcon	equ	0xFF2
  8488                           intcon2	equ	0xFF1
  8489                           intcon3	equ	0xFF0
  8490                           postinc0	equ	0xFEE
  8491                           wreg	equ	0xFE8
  8492                           postdec1	equ	0xFE5
  8493                           fsr1l	equ	0xFE1
  8494                           indf2	equ	0xFDF
  8495                           postinc2	equ	0xFDE
  8496                           postdec2	equ	0xFDD
  8497                           fsr2h	equ	0xFDA
  8498                           fsr2l	equ	0xFD9
  8499                           status	equ	0xFD8
  8500                           
  8501 ;; *************** function _initTime *****************
  8502 ;; Defined at:
  8503 ;;		line 17 in file "RTC.c"
  8504 ;; Parameters:    Size  Location     Type
  8505 ;;  s               1    wreg     unsigned char 
  8506 ;;  m               1    0[BANK0 ] unsigned char 
  8507 ;;  h               1    1[BANK0 ] unsigned char 
  8508 ;;  w               1    2[BANK0 ] unsigned char 
  8509 ;;  DD              1    3[BANK0 ] unsigned char 
  8510 ;;  MM              1    4[BANK0 ] unsigned char 
  8511 ;;  YY              1    5[BANK0 ] unsigned char 
  8512 ;; Auto vars:     Size  Location     Type
  8513 ;;  s               1    6[BANK0 ] unsigned char 
  8514 ;; Return value:  Size  Location     Type
  8515 ;;                  1    wreg      void 
  8516 ;; Registers used:
  8517 ;;		wreg
  8518 ;; Tracked objects:
  8519 ;;		On entry : 0/0
  8520 ;;		On exit  : 0/0
  8521 ;;		Unchanged: 0/0
  8522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8523 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8524 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8526 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8527 ;;Total ram usage:        7 bytes
  8528 ;; Hardware stack levels used:    1
  8529 ;; Hardware stack levels required when called:    7
  8530 ;; This function calls:
  8531 ;;		Nothing
  8532 ;; This function is called by:
  8533 ;;		_main
  8534 ;; This function uses a non-reentrant model
  8535 ;;
  8536                           
  8537                           	psect	text22
  8538  005FFC                     __ptext22:
  8539                           	opt stack 0
  8540  005FFC                     _initTime:
  8541                           	opt stack 23
  8542                           
  8543                           ;incstack = 0
  8544                           ;initTime@s stored from wreg
  8545  005FFC  0100               	movlb	0	; () banked
  8546  005FFE  6F86               	movwf	initTime@s& (0+255),b
  8547                           
  8548                           ;RTC.c: 19: time[0] = s;
  8549  006000  C086  F124         	movff	initTime@s,_time
  8550                           
  8551                           ;RTC.c: 20: time[1] = m;
  8552  006004  C080  F125         	movff	initTime@m,_time+1
  8553                           
  8554                           ;RTC.c: 21: time[2] = h;
  8555  006008  C081  F126         	movff	initTime@h,_time+2
  8556                           
  8557                           ;RTC.c: 22: time[3] = w;
  8558  00600C  C082  F127         	movff	initTime@w,_time+3
  8559                           
  8560                           ;RTC.c: 23: time[4] = DD;
  8561  006010  C083  F128         	movff	initTime@DD,_time+4
  8562                           
  8563                           ;RTC.c: 24: time[5] = MM;
  8564  006014  C084  F129         	movff	initTime@MM,_time+5
  8565                           
  8566                           ;RTC.c: 25: time[6] = YY;
  8567  006018  C085  F12A         	movff	initTime@YY,_time+6
  8568  00601C  0012               	return		;funcret
  8569  00601E                     __end_of_initTime:
  8570                           	opt stack 0
  8571                           tblptru	equ	0xFF8
  8572                           tblptrh	equ	0xFF7
  8573                           tblptrl	equ	0xFF6
  8574                           tablat	equ	0xFF5
  8575                           prodh	equ	0xFF4
  8576                           prodl	equ	0xFF3
  8577                           intcon	equ	0xFF2
  8578                           intcon2	equ	0xFF1
  8579                           intcon3	equ	0xFF0
  8580                           postinc0	equ	0xFEE
  8581                           wreg	equ	0xFE8
  8582                           postdec1	equ	0xFE5
  8583                           fsr1l	equ	0xFE1
  8584                           indf2	equ	0xFDF
  8585                           postinc2	equ	0xFDE
  8586                           postdec2	equ	0xFDD
  8587                           fsr2h	equ	0xFDA
  8588                           fsr2l	equ	0xFD9
  8589                           status	equ	0xFD8
  8590                           
  8591 ;; *************** function _initLCD *****************
  8592 ;; Defined at:
  8593 ;;		line 50 in file "lcd.c"
  8594 ;; Parameters:    Size  Location     Type
  8595 ;;		None
  8596 ;; Auto vars:     Size  Location     Type
  8597 ;;		None
  8598 ;; Return value:  Size  Location     Type
  8599 ;;                  1    wreg      void 
  8600 ;; Registers used:
  8601 ;;		wreg, status,2, status,0, cstack
  8602 ;; Tracked objects:
  8603 ;;		On entry : 0/0
  8604 ;;		On exit  : 0/0
  8605 ;;		Unchanged: 0/0
  8606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8609 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8610 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8611 ;;Total ram usage:        1 bytes
  8612 ;; Hardware stack levels used:    1
  8613 ;; Hardware stack levels required when called:    9
  8614 ;; This function calls:
  8615 ;;		_lcdInst
  8616 ;; This function is called by:
  8617 ;;		_main
  8618 ;; This function uses a non-reentrant model
  8619 ;;
  8620                           
  8621                           	psect	text23
  8622  005A18                     __ptext23:
  8623                           	opt stack 0
  8624  005A18                     _initLCD:
  8625                           	opt stack 21
  8626                           
  8627                           ;lcd.c: 51: _delay((unsigned long)((15)*(32000000/4000.0)));
  8628                           
  8629                           ;incstack = 0
  8630  005A18  0E9C               	movlw	156
  8631  005A1A  0100               	movlb	0	; () banked
  8632  005A1C  6F83               	movwf	??_initLCD& (0+255),b
  8633  005A1E  0ED7               	movlw	215
  8634  005A20                     u11177:
  8635  005A20  2EE8               	decfsz	wreg,f,c
  8636  005A22  D7FE               	bra	u11177
  8637  005A24  2F83               	decfsz	??_initLCD& (0+255),f,b
  8638  005A26  D7FC               	bra	u11177
  8639                           
  8640                           ;lcd.c: 52: lcdInst(0b00110011);
  8641  005A28  0E33               	movlw	51
  8642  005A2A  EC69  F030         	call	_lcdInst
  8643                           
  8644                           ;lcd.c: 53: lcdInst(0b00110010);
  8645  005A2E  0E32               	movlw	50
  8646  005A30  EC69  F030         	call	_lcdInst
  8647                           
  8648                           ;lcd.c: 55: lcdInst(0b00101000);
  8649  005A34  0E28               	movlw	40
  8650  005A36  EC69  F030         	call	_lcdInst
  8651                           
  8652                           ;lcd.c: 56: lcdInst(0b00001100);
  8653  005A3A  0E0C               	movlw	12
  8654  005A3C  EC69  F030         	call	_lcdInst
  8655                           
  8656                           ;lcd.c: 57: lcdInst(0b00000110);
  8657  005A40  0E06               	movlw	6
  8658  005A42  EC69  F030         	call	_lcdInst
  8659                           
  8660                           ;lcd.c: 58: lcdInst(0b00000001);
  8661  005A46  0E01               	movlw	1
  8662  005A48  EC69  F030         	call	_lcdInst
  8663                           
  8664                           ;lcd.c: 59: _delay((unsigned long)((15)*(32000000/4000.0)));
  8665  005A4C  0E9C               	movlw	156
  8666  005A4E  0100               	movlb	0	; () banked
  8667  005A50  6F83               	movwf	??_initLCD& (0+255),b
  8668  005A52  0ED7               	movlw	215
  8669  005A54                     u11187:
  8670  005A54  2EE8               	decfsz	wreg,f,c
  8671  005A56  D7FE               	bra	u11187
  8672  005A58  2F83               	decfsz	??_initLCD& (0+255),f,b
  8673  005A5A  D7FC               	bra	u11187
  8674  005A5C  0012               	return		;funcret
  8675  005A5E                     __end_of_initLCD:
  8676                           	opt stack 0
  8677                           tblptru	equ	0xFF8
  8678                           tblptrh	equ	0xFF7
  8679                           tblptrl	equ	0xFF6
  8680                           tablat	equ	0xFF5
  8681                           prodh	equ	0xFF4
  8682                           prodl	equ	0xFF3
  8683                           intcon	equ	0xFF2
  8684                           intcon2	equ	0xFF1
  8685                           intcon3	equ	0xFF0
  8686                           postinc0	equ	0xFEE
  8687                           wreg	equ	0xFE8
  8688                           postdec1	equ	0xFE5
  8689                           fsr1l	equ	0xFE1
  8690                           indf2	equ	0xFDF
  8691                           postinc2	equ	0xFDE
  8692                           postdec2	equ	0xFDD
  8693                           fsr2h	equ	0xFDA
  8694                           fsr2l	equ	0xFD9
  8695                           status	equ	0xFD8
  8696                           
  8697 ;; *************** function _initEEPROM *****************
  8698 ;; Defined at:
  8699 ;;		line 32 in file "EEPROM.c"
  8700 ;; Parameters:    Size  Location     Type
  8701 ;;		None
  8702 ;; Auto vars:     Size  Location     Type
  8703 ;;		None
  8704 ;; Return value:  Size  Location     Type
  8705 ;;                  1    wreg      void 
  8706 ;; Registers used:
  8707 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8708 ;; Tracked objects:
  8709 ;;		On entry : 0/0
  8710 ;;		On exit  : 0/0
  8711 ;;		Unchanged: 0/0
  8712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8716 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8717 ;;Total ram usage:        0 bytes
  8718 ;; Hardware stack levels used:    1
  8719 ;; Hardware stack levels required when called:   11
  8720 ;; This function calls:
  8721 ;;		_EEPROM_write
  8722 ;; This function is called by:
  8723 ;;		_main
  8724 ;; This function uses a non-reentrant model
  8725 ;;
  8726                           
  8727                           	psect	text24
  8728  006070                     __ptext24:
  8729                           	opt stack 0
  8730  006070                     _initEEPROM:
  8731                           	opt stack 19
  8732                           
  8733                           ;EEPROM.c: 33: EEPROM_write(0, 0x01);
  8734                           
  8735                           ;incstack = 0
  8736  006070  0E00               	movlw	0
  8737  006072  0100               	movlb	0	; () banked
  8738  006074  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  8739  006076  0E00               	movlw	0
  8740  006078  6FAB               	movwf	EEPROM_write@address& (0+255),b
  8741  00607A  0E01               	movlw	1
  8742  00607C  0100               	movlb	0	; () banked
  8743  00607E  6FAD               	movwf	EEPROM_write@data& (0+255),b
  8744  006080  EC3F  F024         	call	_EEPROM_write	;wreg free
  8745  006084  0012               	return		;funcret
  8746  006086                     __end_of_initEEPROM:
  8747                           	opt stack 0
  8748                           tblptru	equ	0xFF8
  8749                           tblptrh	equ	0xFF7
  8750                           tblptrl	equ	0xFF6
  8751                           tablat	equ	0xFF5
  8752                           prodh	equ	0xFF4
  8753                           prodl	equ	0xFF3
  8754                           intcon	equ	0xFF2
  8755                           intcon2	equ	0xFF1
  8756                           intcon3	equ	0xFF0
  8757                           postinc0	equ	0xFEE
  8758                           wreg	equ	0xFE8
  8759                           postdec1	equ	0xFE5
  8760                           fsr1l	equ	0xFE1
  8761                           indf2	equ	0xFDF
  8762                           postinc2	equ	0xFDE
  8763                           postdec2	equ	0xFDD
  8764                           fsr2h	equ	0xFDA
  8765                           fsr2l	equ	0xFD9
  8766                           status	equ	0xFD8
  8767                           
  8768 ;; *************** function _EEPROM_write *****************
  8769 ;; Defined at:
  8770 ;;		line 36 in file "EEPROM.c"
  8771 ;; Parameters:    Size  Location     Type
  8772 ;;  address         2   43[BANK0 ] unsigned short 
  8773 ;;  data            1   45[BANK0 ] unsigned char 
  8774 ;; Auto vars:     Size  Location     Type
  8775 ;;  i               1   48[BANK0 ] unsigned char 
  8776 ;;  i               1   47[BANK0 ] unsigned char 
  8777 ;; Return value:  Size  Location     Type
  8778 ;;                  1    wreg      void 
  8779 ;; Registers used:
  8780 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8781 ;; Tracked objects:
  8782 ;;		On entry : 0/0
  8783 ;;		On exit  : 0/0
  8784 ;;		Unchanged: 0/0
  8785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8786 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8787 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8788 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8789 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8790 ;;Total ram usage:        6 bytes
  8791 ;; Hardware stack levels used:    1
  8792 ;; Hardware stack levels required when called:   10
  8793 ;; This function calls:
  8794 ;;		_EEPROM_read
  8795 ;;		_lcdInst
  8796 ;;		_printf
  8797 ;; This function is called by:
  8798 ;;		_Loading
  8799 ;;		_initEEPROM
  8800 ;;		_logRun
  8801 ;; This function uses a non-reentrant model
  8802 ;;
  8803                           
  8804                           	psect	text25
  8805  00487E                     __ptext25:
  8806                           	opt stack 0
  8807  00487E                     _EEPROM_write:
  8808                           	opt stack 18
  8809                           
  8810                           ;EEPROM.c: 37: EECON1bits.WREN = 1;
  8811                           
  8812                           ;incstack = 0
  8813  00487E  84A6               	bsf	4006,2,c	;volatile
  8814                           
  8815                           ;EEPROM.c: 40: EEADRH = (unsigned char)(address >> 8);
  8816  004880  0100               	movlb	0	; () banked
  8817  004882  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  8818  004884  6EAA               	movwf	4010,c	;volatile
  8819                           
  8820                           ; BSR set to: 0
  8821                           ;EEPROM.c: 41: EEADR = (unsigned char)address;
  8822  004886  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  8823                           
  8824                           ; BSR set to: 0
  8825                           ;EEPROM.c: 43: EEDATA = data;
  8826  00488A  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  8827                           
  8828                           ; BSR set to: 0
  8829                           ;EEPROM.c: 44: EECON1bits.EEPGD = 0;
  8830  00488E  9EA6               	bcf	4006,7,c	;volatile
  8831                           
  8832                           ; BSR set to: 0
  8833                           ;EEPROM.c: 45: EECON1bits.CFGS = 0;
  8834  004890  9CA6               	bcf	4006,6,c	;volatile
  8835                           
  8836                           ; BSR set to: 0
  8837                           ;EEPROM.c: 47: (INTCONbits.GIE = 0);
  8838  004892  9EF2               	bcf	intcon,7,c	;volatile
  8839                           
  8840                           ;EEPROM.c: 49: EECON2 = 0x55;
  8841  004894  0E55               	movlw	85
  8842  004896  6EA7               	movwf	4007,c	;volatile
  8843                           
  8844                           ;EEPROM.c: 50: EECON2 = 0x0AA;
  8845  004898  0EAA               	movlw	170
  8846  00489A  6EA7               	movwf	4007,c	;volatile
  8847                           
  8848                           ; BSR set to: 0
  8849                           ;EEPROM.c: 51: EECON1bits.WR = 1;
  8850  00489C  82A6               	bsf	4006,1,c	;volatile
  8851                           
  8852                           ; BSR set to: 0
  8853                           ;EEPROM.c: 52: (INTCONbits.GIE = 1);
  8854  00489E  8EF2               	bsf	intcon,7,c	;volatile
  8855  0048A0                     l1161:
  8856  0048A0  A8A1               	btfss	4001,4,c	;volatile
  8857  0048A2  D7FE               	goto	l1161
  8858                           
  8859                           ;EEPROM.c: 57: PIR2bits.EEIF = 0;
  8860  0048A4  98A1               	bcf	4001,4,c	;volatile
  8861                           
  8862                           ;EEPROM.c: 58: EECON1bits.WREN = 0;
  8863  0048A6  94A6               	bcf	4006,2,c	;volatile
  8864                           
  8865                           ;EEPROM.c: 61: if(debug){
  8866  0048A8  0101               	movlb	1	; () banked
  8867  0048AA  512F               	movf	_debug& (0+255),w,b
  8868  0048AC  0101               	movlb	1	; () banked
  8869  0048AE  1130               	iorwf	(_debug+1)& (0+255),w,b
  8870  0048B0  B4D8               	btfsc	status,2,c
  8871  0048B2  0012               	return	
  8872                           
  8873                           ; BSR set to: 1
  8874                           ;EEPROM.c: 62: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8875  0048B4  0E01               	movlw	1
  8876  0048B6  EC69  F030         	call	_lcdInst
  8877  0048BA  0E68               	movlw	104
  8878  0048BC  0100               	movlb	0	; () banked
  8879  0048BE  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8880  0048C0  0EE4               	movlw	228
  8881  0048C2                     u11197:
  8882  0048C2  2EE8               	decfsz	wreg,f,c
  8883  0048C4  D7FE               	bra	u11197
  8884  0048C6  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8885  0048C8  D7FC               	bra	u11197
  8886  0048CA  F000               	nop	
  8887                           
  8888                           ;EEPROM.c: 63: lcdInst(0b10000000);;
  8889  0048CC  0E80               	movlw	128
  8890  0048CE  EC69  F030         	call	_lcdInst
  8891                           
  8892                           ;EEPROM.c: 64: if(EEPROM_read(address)==data){
  8893  0048D2  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  8894  0048D6  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  8895  0048DA  EC2C  F030         	call	_EEPROM_read	;wreg free
  8896  0048DE  0100               	movlb	0	; () banked
  8897  0048E0  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  8898  0048E2  A4D8               	btfss	status,2,c
  8899  0048E4  D024               	goto	l7650
  8900                           
  8901                           ; BSR set to: 0
  8902                           ;EEPROM.c: 65: printf("(data: %u, addr: %u)", data, address);
  8903  0048E6  0EDA               	movlw	low STR_66
  8904  0048E8  0100               	movlb	0	; () banked
  8905  0048EA  6F8E               	movwf	printf@f& (0+255),b
  8906  0048EC  0EFA               	movlw	high STR_66
  8907  0048EE  0100               	movlb	0	; () banked
  8908  0048F0  6F8F               	movwf	(printf@f+1)& (0+255),b
  8909  0048F2  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  8910  0048F6  0100               	movlb	0	; () banked
  8911  0048F8  6B91               	clrf	(?_printf+3)& (0+255),b
  8912  0048FA  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  8913  0048FE  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  8914  004902  ECE7  F00E         	call	_printf	;wreg free
  8915                           
  8916                           ;EEPROM.c: 66: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  8917  004906  0E00               	movlw	0
  8918  004908  0100               	movlb	0	; () banked
  8919  00490A  6FAF               	movwf	EEPROM_write@i& (0+255),b
  8920  00490C                     l7642:
  8921                           
  8922                           ; BSR set to: 0
  8923  00490C  0E63               	movlw	99
  8924  00490E  0100               	movlb	0	; () banked
  8925  004910  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  8926  004912  D001               	goto	l7646
  8927  004914  0012               	return	
  8928  004916                     l7646:
  8929                           
  8930                           ; BSR set to: 0
  8931  004916  0E68               	movlw	104
  8932  004918  0100               	movlb	0	; () banked
  8933  00491A  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8934  00491C  0EE4               	movlw	228
  8935  00491E                     u11207:
  8936  00491E  2EE8               	decfsz	wreg,f,c
  8937  004920  D7FE               	bra	u11207
  8938  004922  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8939  004924  D7FC               	bra	u11207
  8940  004926  F000               	nop	
  8941  004928  0100               	movlb	0	; () banked
  8942  00492A  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  8943  00492C  D7EF               	goto	l7642
  8944  00492E                     l7650:
  8945                           
  8946                           ; BSR set to: 0
  8947                           ;EEPROM.c: 68: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  8948  00492E  0EBC               	movlw	low STR_67
  8949  004930  0100               	movlb	0	; () banked
  8950  004932  6F8E               	movwf	printf@f& (0+255),b
  8951  004934  0EFF               	movlw	high STR_67
  8952  004936  0100               	movlb	0	; () banked
  8953  004938  6F8F               	movwf	(printf@f+1)& (0+255),b
  8954  00493A  ECE7  F00E         	call	_printf	;wreg free
  8955  00493E  0E00               	movlw	0
  8956  004940  0100               	movlb	0	; () banked
  8957  004942  6FB0               	movwf	EEPROM_write@i_1421& (0+255),b
  8958  004944                     l7654:
  8959                           
  8960                           ; BSR set to: 0
  8961  004944  0E63               	movlw	99
  8962  004946  0100               	movlb	0	; () banked
  8963  004948  65B0               	cpfsgt	EEPROM_write@i_1421& (0+255),b
  8964  00494A  D001               	goto	l7658
  8965  00494C  0012               	return	
  8966  00494E                     l7658:
  8967                           
  8968                           ; BSR set to: 0
  8969  00494E  0E68               	movlw	104
  8970  004950  0100               	movlb	0	; () banked
  8971  004952  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8972  004954  0EE4               	movlw	228
  8973  004956                     u11217:
  8974  004956  2EE8               	decfsz	wreg,f,c
  8975  004958  D7FE               	bra	u11217
  8976  00495A  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8977  00495C  D7FC               	bra	u11217
  8978  00495E  F000               	nop	
  8979  004960  0100               	movlb	0	; () banked
  8980  004962  2BB0               	incf	EEPROM_write@i_1421& (0+255),f,b
  8981  004964  D7EF               	goto	l7654
  8982  004966                     __end_of_EEPROM_write:
  8983                           	opt stack 0
  8984                           tblptru	equ	0xFF8
  8985                           tblptrh	equ	0xFF7
  8986                           tblptrl	equ	0xFF6
  8987                           tablat	equ	0xFF5
  8988                           prodh	equ	0xFF4
  8989                           prodl	equ	0xFF3
  8990                           intcon	equ	0xFF2
  8991                           intcon2	equ	0xFF1
  8992                           intcon3	equ	0xFF0
  8993                           postinc0	equ	0xFEE
  8994                           wreg	equ	0xFE8
  8995                           postdec1	equ	0xFE5
  8996                           fsr1l	equ	0xFE1
  8997                           indf2	equ	0xFDF
  8998                           postinc2	equ	0xFDE
  8999                           postdec2	equ	0xFDD
  9000                           fsr2h	equ	0xFDA
  9001                           fsr2l	equ	0xFD9
  9002                           status	equ	0xFD8
  9003                           
  9004 ;; *************** function _EEPROM_read *****************
  9005 ;; Defined at:
  9006 ;;		line 72 in file "EEPROM.c"
  9007 ;; Parameters:    Size  Location     Type
  9008 ;;  address         2    0[BANK0 ] unsigned short 
  9009 ;; Auto vars:     Size  Location     Type
  9010 ;;		None
  9011 ;; Return value:  Size  Location     Type
  9012 ;;                  1    wreg      unsigned char 
  9013 ;; Registers used:
  9014 ;;		wreg, status,2
  9015 ;; Tracked objects:
  9016 ;;		On entry : 0/0
  9017 ;;		On exit  : 0/0
  9018 ;;		Unchanged: 0/0
  9019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9020 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9023 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9024 ;;Total ram usage:        2 bytes
  9025 ;; Hardware stack levels used:    1
  9026 ;; Hardware stack levels required when called:    7
  9027 ;; This function calls:
  9028 ;;		Nothing
  9029 ;; This function is called by:
  9030 ;;		_Loading
  9031 ;;		_EEPROM_write
  9032 ;;		_logRun
  9033 ;; This function uses a non-reentrant model
  9034 ;;
  9035                           
  9036                           	psect	text26
  9037  006058                     __ptext26:
  9038                           	opt stack 0
  9039  006058                     _EEPROM_read:
  9040                           	opt stack 20
  9041                           
  9042                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
  9043                           
  9044                           ;incstack = 0
  9045  006058  0100               	movlb	0	; () banked
  9046  00605A  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  9047  00605C  6EAA               	movwf	4010,c	;volatile
  9048                           
  9049                           ; BSR set to: 0
  9050                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
  9051  00605E  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  9052                           
  9053                           ; BSR set to: 0
  9054                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
  9055  006062  9EA6               	bcf	4006,7,c	;volatile
  9056                           
  9057                           ; BSR set to: 0
  9058                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
  9059  006064  9CA6               	bcf	4006,6,c	;volatile
  9060                           
  9061                           ; BSR set to: 0
  9062                           ;EEPROM.c: 79: EECON1bits.RD = 1;
  9063  006066  80A6               	bsf	4006,0,c	;volatile
  9064  006068                     l1174:
  9065  006068  B0A6               	btfsc	4006,0,c	;volatile
  9066  00606A  D7FE               	goto	l1174
  9067                           
  9068                           ;EEPROM.c: 85: return EEDATA;
  9069  00606C  50A8               	movf	4008,w,c	;volatile
  9070  00606E  0012               	return	
  9071  006070                     __end_of_EEPROM_read:
  9072                           	opt stack 0
  9073                           tblptru	equ	0xFF8
  9074                           tblptrh	equ	0xFF7
  9075                           tblptrl	equ	0xFF6
  9076                           tablat	equ	0xFF5
  9077                           prodh	equ	0xFF4
  9078                           prodl	equ	0xFF3
  9079                           intcon	equ	0xFF2
  9080                           intcon2	equ	0xFF1
  9081                           intcon3	equ	0xFF0
  9082                           postinc0	equ	0xFEE
  9083                           wreg	equ	0xFE8
  9084                           postdec1	equ	0xFE5
  9085                           fsr1l	equ	0xFE1
  9086                           indf2	equ	0xFDF
  9087                           postinc2	equ	0xFDE
  9088                           postdec2	equ	0xFDD
  9089                           fsr2h	equ	0xFDA
  9090                           fsr2l	equ	0xFD9
  9091                           status	equ	0xFD8
  9092                           
  9093 ;; *************** function _UI *****************
  9094 ;; Defined at:
  9095 ;;		line 76 in file "UI.c"
  9096 ;; Parameters:    Size  Location     Type
  9097 ;;		None
  9098 ;; Auto vars:     Size  Location     Type
  9099 ;;  i               1   73[BANK0 ] unsigned char 
  9100 ;;  i               1   85[BANK0 ] unsigned char 
  9101 ;;  i               1   84[BANK0 ] unsigned char 
  9102 ;;  i               1   83[BANK0 ] unsigned char 
  9103 ;;  i               1   82[BANK0 ] unsigned char 
  9104 ;;  i               1   81[BANK0 ] unsigned char 
  9105 ;;  i               1   80[BANK0 ] unsigned char 
  9106 ;;  i               1   79[BANK0 ] unsigned char 
  9107 ;;  i               1   78[BANK0 ] unsigned char 
  9108 ;;  i               1   77[BANK0 ] unsigned char 
  9109 ;;  i               1   76[BANK0 ] unsigned char 
  9110 ;;  i               1   75[BANK0 ] unsigned char 
  9111 ;;  i               1   74[BANK0 ] unsigned char 
  9112 ;;  month           4   86[BANK0 ] unsigned char [4]
  9113 ;;  i               1   72[BANK0 ] unsigned char 
  9114 ;; Return value:  Size  Location     Type
  9115 ;;                  1    wreg      void 
  9116 ;; Registers used:
  9117 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9118 ;; Tracked objects:
  9119 ;;		On entry : 0/0
  9120 ;;		On exit  : 0/0
  9121 ;;		Unchanged: 0/0
  9122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9124 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9125 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9126 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9127 ;;Total ram usage:       22 bytes
  9128 ;; Hardware stack levels used:    1
  9129 ;; Hardware stack levels required when called:   11
  9130 ;; This function calls:
  9131 ;;		___awdiv
  9132 ;;		___awmod
  9133 ;;		_change_state_to_menu_12
  9134 ;;		_change_state_to_menu_22
  9135 ;;		_lcdInst
  9136 ;;		_printRTC
  9137 ;;		_printf
  9138 ;;		_strcpy
  9139 ;; This function is called by:
  9140 ;;		_main
  9141 ;; This function uses a non-reentrant model
  9142 ;;
  9143                           
  9144                           	psect	text27
  9145  000012                     __ptext27:
  9146                           	opt stack 0
  9147  000012                     _UI:
  9148                           	opt stack 19
  9149                           
  9150                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  9151                           
  9152                           ;incstack = 0
  9153  000012  0E02               	movlw	2
  9154  000014  0100               	movlb	0	; () banked
  9155  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  9156  000018  A4D8               	btfss	status,2,c
  9157  00001A  D086               	goto	l9704
  9158                           
  9159                           ; BSR set to: 0
  9160                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9161  00001C  0E01               	movlw	1
  9162  00001E  EC69  F030         	call	_lcdInst
  9163  000022  0E68               	movlw	104
  9164  000024  0100               	movlb	0	; () banked
  9165  000026  6FC4               	movwf	??_UI& (0+255),b
  9166  000028  0EE4               	movlw	228
  9167  00002A                     u11227:
  9168  00002A  2EE8               	decfsz	wreg,f,c
  9169  00002C  D7FE               	bra	u11227
  9170  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  9171  000030  D7FC               	bra	u11227
  9172  000032  F000               	nop	
  9173                           
  9174                           ;UI.c: 79: lcdInst(0b10000000);;
  9175  000034  0E80               	movlw	128
  9176  000036  EC69  F030         	call	_lcdInst
  9177                           
  9178                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  9179  00003A  0E7F               	movlw	low STR_1
  9180  00003C  0100               	movlb	0	; () banked
  9181  00003E  6F8E               	movwf	printf@f& (0+255),b
  9182  000040  0EFB               	movlw	high STR_1
  9183  000042  0100               	movlb	0	; () banked
  9184  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  9185  000046  0E01               	movlw	1
  9186  000048  0100               	movlb	0	; () banked
  9187  00004A  25FD               	addwf	_sel& (0+255),w,b
  9188  00004C  0100               	movlb	0	; () banked
  9189  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  9190  000050  0100               	movlb	0	; () banked
  9191  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  9192  000054  0E00               	movlw	0
  9193  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  9194  000058  ECE7  F00E         	call	_printf	;wreg free
  9195                           
  9196                           ;UI.c: 81: lcdInst(0b11000000);;
  9197  00005C  0EC0               	movlw	192
  9198  00005E  EC69  F030         	call	_lcdInst
  9199                           
  9200                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  9201  000062  0E0E               	movlw	14
  9202  000064  0100               	movlb	0	; () banked
  9203  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9204  000068  0E10               	movlw	16
  9205  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  9206  00006C  C0FA  F080         	movff	_total_time,___awmod@dividend
  9207  000070  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  9208  000074  EC3F  F028         	call	___awmod	;wreg free
  9209  000078  C080  F0C6         	movff	?___awmod,_UI$2443
  9210  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2443+1
  9211                           
  9212                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  9213  000080  0E56               	movlw	low STR_2
  9214  000082  0100               	movlb	0	; () banked
  9215  000084  6F8E               	movwf	printf@f& (0+255),b
  9216  000086  0EFF               	movlw	high STR_2
  9217  000088  0100               	movlb	0	; () banked
  9218  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9219  00008C  0E0E               	movlw	14
  9220  00008E  0100               	movlb	0	; () banked
  9221  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9222  000092  0E10               	movlw	16
  9223  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  9224  000096  C0FA  F080         	movff	_total_time,___awmod@dividend
  9225  00009A  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  9226  00009E  EC3F  F028         	call	___awmod	;wreg free
  9227  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  9228  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  9229  0000AA  0E00               	movlw	0
  9230  0000AC  0100               	movlb	0	; () banked
  9231  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  9232  0000B0  0E3C               	movlw	60
  9233  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  9234  0000B4  EC2D  F027         	call	___awdiv	;wreg free
  9235  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  9236  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  9237  0000C0  C0C6  F080         	movff	_UI$2443,___awmod@dividend
  9238  0000C4  C0C7  F081         	movff	_UI$2443+1,___awmod@dividend+1
  9239  0000C8  0E00               	movlw	0
  9240  0000CA  0100               	movlb	0	; () banked
  9241  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9242  0000CE  0E3C               	movlw	60
  9243  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  9244  0000D2  EC3F  F028         	call	___awmod	;wreg free
  9245  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  9246  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  9247  0000DE  ECE7  F00E         	call	_printf	;wreg free
  9248  0000E2                     l192:
  9249  0000E2  B281               	btfsc	3969,1,c	;volatile
  9250  0000E4  D7FE               	goto	l192
  9251  0000E6                     l195:
  9252  0000E6  A281               	btfss	3969,1,c	;volatile
  9253  0000E8  D7FE               	goto	l195
  9254                           
  9255                           ;UI.c: 86: }
  9256                           ;UI.c: 87: if(cur_state == 12){
  9257  0000EA  0E0C               	movlw	12
  9258  0000EC  0100               	movlb	0	; () banked
  9259  0000EE  19E8               	xorwf	_cur_state& (0+255),w,b
  9260  0000F0  0100               	movlb	0	; () banked
  9261  0000F2  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
  9262  0000F4  A4D8               	btfss	status,2,c
  9263  0000F6  D003               	goto	l9698
  9264                           
  9265                           ; BSR set to: 0
  9266                           ;UI.c: 88: change_state_to_menu_12();
  9267  0000F8  ECAB  F02D         	call	_change_state_to_menu_12	;wreg free
  9268                           
  9269                           ;UI.c: 89: }
  9270  0000FC  D002               	goto	l200
  9271  0000FE                     l9698:
  9272                           
  9273                           ;UI.c: 90: else{
  9274                           ;UI.c: 91: change_state_to_menu_22();
  9275  0000FE  EC8F  F02D         	call	_change_state_to_menu_22	;wreg free
  9276  000102                     l200:
  9277  000102  B281               	btfsc	3969,1,c	;volatile
  9278  000104  D7FE               	goto	l200
  9279                           
  9280                           ;UI.c: 94: _delay((unsigned long)((100)*(32000000/4000.0)));
  9281  000106  0E05               	movlw	5
  9282  000108  0100               	movlb	0	; () banked
  9283  00010A  6FC5               	movwf	(??_UI+1)& (0+255),b
  9284  00010C  0E0F               	movlw	15
  9285  00010E  0100               	movlb	0	; () banked
  9286  000110  6FC4               	movwf	??_UI& (0+255),b
  9287  000112  0EF1               	movlw	241
  9288  000114                     u11237:
  9289  000114  2EE8               	decfsz	wreg,f,c
  9290  000116  D7FE               	bra	u11237
  9291  000118  2FC4               	decfsz	??_UI& (0+255),f,b
  9292  00011A  D7FC               	bra	u11237
  9293  00011C  2FC5               	decfsz	(??_UI+1)& (0+255),f,b
  9294  00011E  D7FA               	bra	u11237
  9295                           
  9296                           ;UI.c: 95: machine_state = UI_state;
  9297  000120  0E00               	movlw	0
  9298  000122  0100               	movlb	0	; () banked
  9299  000124  6FFC               	movwf	_machine_state& (0+255),b
  9300                           
  9301                           ;UI.c: 96: }
  9302  000126  D3D2               	goto	l10024
  9303  000128                     l9704:
  9304                           
  9305                           ; BSR set to: 0
  9306                           ;UI.c: 97: else if(cur_state == 0){
  9307  000128  0100               	movlb	0	; () banked
  9308  00012A  51E8               	movf	_cur_state& (0+255),w,b
  9309  00012C  0100               	movlb	0	; () banked
  9310  00012E  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
  9311  000130  A4D8               	btfss	status,2,c
  9312  000132  D3CC               	goto	l10024
  9313                           
  9314                           ; BSR set to: 0
  9315                           ;UI.c: 98: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  9316  000134  0E00               	movlw	0
  9317  000136  0100               	movlb	0	; () banked
  9318  000138  6FC8               	movwf	UI@i& (0+255),b
  9319  00013A                     l9708:
  9320                           
  9321                           ; BSR set to: 0
  9322  00013A  0E63               	movlw	99
  9323  00013C  0100               	movlb	0	; () banked
  9324  00013E  65C8               	cpfsgt	UI@i& (0+255),b
  9325  000140  D001               	goto	l9712
  9326  000142  D00C               	goto	l9716
  9327  000144                     l9712:
  9328                           
  9329                           ; BSR set to: 0
  9330  000144  0E68               	movlw	104
  9331  000146  0100               	movlb	0	; () banked
  9332  000148  6FC4               	movwf	??_UI& (0+255),b
  9333  00014A  0EE4               	movlw	228
  9334  00014C                     u11247:
  9335  00014C  2EE8               	decfsz	wreg,f,c
  9336  00014E  D7FE               	bra	u11247
  9337  000150  2FC4               	decfsz	??_UI& (0+255),f,b
  9338  000152  D7FC               	bra	u11247
  9339  000154  F000               	nop	
  9340  000156  0100               	movlb	0	; () banked
  9341  000158  2BC8               	incf	UI@i& (0+255),f,b
  9342  00015A  D7EF               	goto	l9708
  9343  00015C                     l9716:
  9344                           
  9345                           ; BSR set to: 0
  9346                           ;UI.c: 99: if(cur_state == 0){
  9347  00015C  0100               	movlb	0	; () banked
  9348  00015E  51E8               	movf	_cur_state& (0+255),w,b
  9349  000160  0100               	movlb	0	; () banked
  9350  000162  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
  9351  000164  A4D8               	btfss	status,2,c
  9352  000166  D3B2               	goto	l10024
  9353                           
  9354                           ; BSR set to: 0
  9355                           ;UI.c: 100: printRTC();
  9356  000168  ECF1  F019         	call	_printRTC	;wreg free
  9357                           
  9358                           ;UI.c: 101: }
  9359                           ;UI.c: 102: }
  9360                           ;UI.c: 103: while(logstate){
  9361  00016C  D3AF               	goto	l10024
  9362  00016E                     l9720:
  9363                           
  9364                           ;UI.c: 105: if(!log_completion){
  9365  00016E  0100               	movlb	0	; () banked
  9366  000170  51F2               	movf	_log_completion& (0+255),w,b
  9367  000172  0100               	movlb	0	; () banked
  9368  000174  11F3               	iorwf	(_log_completion+1)& (0+255),w,b
  9369  000176  A4D8               	btfss	status,2,c
  9370  000178  D041               	goto	l9750
  9371                           
  9372                           ; BSR set to: 0
  9373                           ;UI.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9374  00017A  0E01               	movlw	1
  9375  00017C  EC69  F030         	call	_lcdInst
  9376  000180  0E68               	movlw	104
  9377  000182  0100               	movlb	0	; () banked
  9378  000184  6FC4               	movwf	??_UI& (0+255),b
  9379  000186  0EE4               	movlw	228
  9380  000188                     u11257:
  9381  000188  2EE8               	decfsz	wreg,f,c
  9382  00018A  D7FE               	bra	u11257
  9383  00018C  2FC4               	decfsz	??_UI& (0+255),f,b
  9384  00018E  D7FC               	bra	u11257
  9385  000190  F000               	nop	
  9386                           
  9387                           ;UI.c: 107: lcdInst(0b10000000);;
  9388  000192  0E80               	movlw	128
  9389  000194  EC69  F030         	call	_lcdInst
  9390                           
  9391                           ;UI.c: 108: printf("-- LOG %2d HERE--", log);
  9392  000198  0E6D               	movlw	low STR_3
  9393  00019A  0100               	movlb	0	; () banked
  9394  00019C  6F8E               	movwf	printf@f& (0+255),b
  9395  00019E  0EFB               	movlw	high STR_3
  9396  0001A0  0100               	movlb	0	; () banked
  9397  0001A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9398  0001A4  C0F0  F090         	movff	_log,?_printf+2
  9399  0001A8  C0F1  F091         	movff	_log+1,?_printf+3
  9400  0001AC  ECE7  F00E         	call	_printf	;wreg free
  9401                           
  9402                           ;UI.c: 109: lcdInst(0b11000000);;
  9403  0001B0  0EC0               	movlw	192
  9404  0001B2  EC69  F030         	call	_lcdInst
  9405                           
  9406                           ;UI.c: 110: printf("DIDN'T COMPLETE");
  9407  0001B6  0E79               	movlw	low STR_4
  9408  0001B8  0100               	movlb	0	; () banked
  9409  0001BA  6F8E               	movwf	printf@f& (0+255),b
  9410  0001BC  0EFE               	movlw	high STR_4
  9411  0001BE  0100               	movlb	0	; () banked
  9412  0001C0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9413  0001C2  ECE7  F00E         	call	_printf	;wreg free
  9414  0001C6                     l9734:
  9415  0001C6  0E00               	movlw	0
  9416  0001C8  0100               	movlb	0	; () banked
  9417  0001CA  6FC9               	movwf	UI@i_413& (0+255),b
  9418  0001CC                     l9736:
  9419                           
  9420                           ; BSR set to: 0
  9421  0001CC  0E63               	movlw	99
  9422  0001CE  0100               	movlb	0	; () banked
  9423  0001D0  65C9               	cpfsgt	UI@i_413& (0+255),b
  9424  0001D2  D001               	goto	l9740
  9425  0001D4  D00C               	goto	l9744
  9426  0001D6                     l9740:
  9427                           
  9428                           ; BSR set to: 0
  9429  0001D6  0E68               	movlw	104
  9430  0001D8  0100               	movlb	0	; () banked
  9431  0001DA  6FC4               	movwf	??_UI& (0+255),b
  9432  0001DC  0EE4               	movlw	228
  9433  0001DE                     u11267:
  9434  0001DE  2EE8               	decfsz	wreg,f,c
  9435  0001E0  D7FE               	bra	u11267
  9436  0001E2  2FC4               	decfsz	??_UI& (0+255),f,b
  9437  0001E4  D7FC               	bra	u11267
  9438  0001E6  F000               	nop	
  9439  0001E8  0100               	movlb	0	; () banked
  9440  0001EA  2BC9               	incf	UI@i_413& (0+255),f,b
  9441  0001EC  D7EF               	goto	l9736
  9442  0001EE                     l9744:
  9443                           
  9444                           ; BSR set to: 0
  9445  0001EE  0100               	movlb	0	; () banked
  9446  0001F0  51F8               	movf	_logstate& (0+255),w,b
  9447  0001F2  0100               	movlb	0	; () banked
  9448  0001F4  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9449  0001F6  B4D8               	btfsc	status,2,c
  9450  0001F8  0012               	return	
  9451  0001FA  D7E5               	goto	l9734
  9452  0001FC                     l9750:
  9453                           
  9454                           ; BSR set to: 0
  9455                           ;UI.c: 114: else{
  9456                           ;UI.c: 115: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9457  0001FC  0E01               	movlw	1
  9458  0001FE  EC69  F030         	call	_lcdInst
  9459  000202  0E68               	movlw	104
  9460  000204  0100               	movlb	0	; () banked
  9461  000206  6FC4               	movwf	??_UI& (0+255),b
  9462  000208  0EE4               	movlw	228
  9463  00020A                     u11277:
  9464  00020A  2EE8               	decfsz	wreg,f,c
  9465  00020C  D7FE               	bra	u11277
  9466  00020E  2FC4               	decfsz	??_UI& (0+255),f,b
  9467  000210  D7FC               	bra	u11277
  9468  000212  F000               	nop	
  9469                           
  9470                           ;UI.c: 116: lcdInst(0b10000000);;
  9471  000214  0E80               	movlw	128
  9472  000216  EC69  F030         	call	_lcdInst
  9473                           
  9474                           ;UI.c: 117: printf("-- LOG %2d HERE--", log);
  9475  00021A  0E6D               	movlw	low STR_3
  9476  00021C  0100               	movlb	0	; () banked
  9477  00021E  6F8E               	movwf	printf@f& (0+255),b
  9478  000220  0EFB               	movlw	high STR_3
  9479  000222  0100               	movlb	0	; () banked
  9480  000224  6F8F               	movwf	(printf@f+1)& (0+255),b
  9481  000226  C0F0  F090         	movff	_log,?_printf+2
  9482  00022A  C0F1  F091         	movff	_log+1,?_printf+3
  9483  00022E  ECE7  F00E         	call	_printf	;wreg free
  9484                           
  9485                           ;UI.c: 118: lcdInst(0b11000000);;
  9486  000232  0EC0               	movlw	192
  9487  000234  EC69  F030         	call	_lcdInst
  9488                           
  9489                           ;UI.c: 119: printf("PAUSE < | BACK >");
  9490  000238  0EF5               	movlw	low STR_6
  9491  00023A  0100               	movlb	0	; () banked
  9492  00023C  6F8E               	movwf	printf@f& (0+255),b
  9493  00023E  0EFD               	movlw	high STR_6
  9494  000240  0100               	movlb	0	; () banked
  9495  000242  6F8F               	movwf	(printf@f+1)& (0+255),b
  9496  000244  ECE7  F00E         	call	_printf	;wreg free
  9497                           
  9498                           ;UI.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9499  000248  0E00               	movlw	0
  9500  00024A  0100               	movlb	0	; () banked
  9501  00024C  6FCA               	movwf	UI@i_416& (0+255),b
  9502  00024E                     l9764:
  9503                           
  9504                           ; BSR set to: 0
  9505  00024E  0E63               	movlw	99
  9506  000250  0100               	movlb	0	; () banked
  9507  000252  65CA               	cpfsgt	UI@i_416& (0+255),b
  9508  000254  D001               	goto	l9768
  9509  000256  D00C               	goto	l9772
  9510  000258                     l9768:
  9511                           
  9512                           ; BSR set to: 0
  9513  000258  0E68               	movlw	104
  9514  00025A  0100               	movlb	0	; () banked
  9515  00025C  6FC4               	movwf	??_UI& (0+255),b
  9516  00025E  0EE4               	movlw	228
  9517  000260                     u11287:
  9518  000260  2EE8               	decfsz	wreg,f,c
  9519  000262  D7FE               	bra	u11287
  9520  000264  2FC4               	decfsz	??_UI& (0+255),f,b
  9521  000266  D7FC               	bra	u11287
  9522  000268  F000               	nop	
  9523  00026A  0100               	movlb	0	; () banked
  9524  00026C  2BCA               	incf	UI@i_416& (0+255),f,b
  9525  00026E  D7EF               	goto	l9764
  9526  000270                     l9772:
  9527                           
  9528                           ; BSR set to: 0
  9529  000270  0100               	movlb	0	; () banked
  9530  000272  51F8               	movf	_logstate& (0+255),w,b
  9531  000274  0100               	movlb	0	; () banked
  9532  000276  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9533  000278  B4D8               	btfsc	status,2,c
  9534  00027A  0012               	return	
  9535                           
  9536                           ; BSR set to: 0
  9537                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9538                           
  9539                           ; BSR set to: 0
  9540                           
  9541                           ; BSR set to: 0
  9542  00027C  0E00               	movlw	0
  9543  00027E  0100               	movlb	0	; () banked
  9544  000280  6FCB               	movwf	UI@i_417& (0+255),b
  9545  000282                     l9778:
  9546                           
  9547                           ; BSR set to: 0
  9548  000282  0E63               	movlw	99
  9549  000284  0100               	movlb	0	; () banked
  9550  000286  65CB               	cpfsgt	UI@i_417& (0+255),b
  9551  000288  D001               	goto	l9782
  9552  00028A  D00C               	goto	l9786
  9553  00028C                     l9782:
  9554                           
  9555                           ; BSR set to: 0
  9556  00028C  0E68               	movlw	104
  9557  00028E  0100               	movlb	0	; () banked
  9558  000290  6FC4               	movwf	??_UI& (0+255),b
  9559  000292  0EE4               	movlw	228
  9560  000294                     u11297:
  9561  000294  2EE8               	decfsz	wreg,f,c
  9562  000296  D7FE               	bra	u11297
  9563  000298  2FC4               	decfsz	??_UI& (0+255),f,b
  9564  00029A  D7FC               	bra	u11297
  9565  00029C  F000               	nop	
  9566  00029E  0100               	movlb	0	; () banked
  9567  0002A0  2BCB               	incf	UI@i_417& (0+255),f,b
  9568  0002A2  D7EF               	goto	l9778
  9569  0002A4                     l9786:
  9570                           
  9571                           ; BSR set to: 0
  9572  0002A4  0100               	movlb	0	; () banked
  9573  0002A6  51F8               	movf	_logstate& (0+255),w,b
  9574  0002A8  0100               	movlb	0	; () banked
  9575  0002AA  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9576  0002AC  B4D8               	btfsc	status,2,c
  9577  0002AE  0012               	return	
  9578                           
  9579                           ; BSR set to: 0
  9580                           ;UI.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9581                           
  9582                           ; BSR set to: 0
  9583                           
  9584                           ; BSR set to: 0
  9585  0002B0  0E01               	movlw	1
  9586  0002B2  EC69  F030         	call	_lcdInst
  9587  0002B6  0E68               	movlw	104
  9588  0002B8  0100               	movlb	0	; () banked
  9589  0002BA  6FC4               	movwf	??_UI& (0+255),b
  9590  0002BC  0EE4               	movlw	228
  9591  0002BE                     u11307:
  9592  0002BE  2EE8               	decfsz	wreg,f,c
  9593  0002C0  D7FE               	bra	u11307
  9594  0002C2  2FC4               	decfsz	??_UI& (0+255),f,b
  9595  0002C4  D7FC               	bra	u11307
  9596  0002C6  F000               	nop	
  9597                           
  9598                           ;UI.c: 125: lcdInst(0b10000000);;
  9599  0002C8  0E80               	movlw	128
  9600  0002CA  EC69  F030         	call	_lcdInst
  9601                           
  9602                           ;UI.c: 126: printf("START:");
  9603  0002CE  0EC3               	movlw	low STR_7
  9604  0002D0  0100               	movlb	0	; () banked
  9605  0002D2  6F8E               	movwf	printf@f& (0+255),b
  9606  0002D4  0EFF               	movlw	high STR_7
  9607  0002D6  0100               	movlb	0	; () banked
  9608  0002D8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9609  0002DA  ECE7  F00E         	call	_printf	;wreg free
  9610                           
  9611                           ;UI.c: 127: lcdInst(0b11000000);;
  9612  0002DE  0EC0               	movlw	192
  9613  0002E0  EC69  F030         	call	_lcdInst
  9614                           
  9615                           ;UI.c: 128: char month[] = "MMM";
  9616  0002E4  C14F  F0D6         	movff	UI@F3252,UI@month
  9617  0002E8  C150  F0D7         	movff	UI@F3252+1,UI@month+1
  9618  0002EC  C151  F0D8         	movff	UI@F3252+2,UI@month+2
  9619  0002F0  C152  F0D9         	movff	UI@F3252+3,UI@month+3
  9620                           
  9621                           ;UI.c: 129: switch(log_startTime[5]){
  9622  0002F4  D0C3               	goto	l9830
  9623  0002F6                     l9802:
  9624                           
  9625                           ;UI.c: 131: strcpy(month, "JAN");
  9626  0002F6  0ED6               	movlw	low UI@month
  9627  0002F8  0100               	movlb	0	; () banked
  9628  0002FA  6F80               	movwf	strcpy@to& (0+255),b
  9629  0002FC  0E00               	movlw	high UI@month
  9630  0002FE  0100               	movlb	0	; () banked
  9631  000300  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9632  000302  0EDA               	movlw	low STR_8
  9633  000304  0100               	movlb	0	; () banked
  9634  000306  6F82               	movwf	strcpy@from& (0+255),b
  9635  000308  0EFF               	movlw	high STR_8
  9636  00030A  0100               	movlb	0	; () banked
  9637  00030C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9638  00030E  ECC7  F02D         	call	_strcpy	;wreg free
  9639                           
  9640                           ;UI.c: 132: break;
  9641  000312  D0E6               	goto	l9832
  9642  000314                     l9804:
  9643                           
  9644                           ;UI.c: 134: strcpy(month, "FEB");
  9645  000314  0ED6               	movlw	low UI@month
  9646  000316  0100               	movlb	0	; () banked
  9647  000318  6F80               	movwf	strcpy@to& (0+255),b
  9648  00031A  0E00               	movlw	high UI@month
  9649  00031C  0100               	movlb	0	; () banked
  9650  00031E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9651  000320  0ECA               	movlw	low STR_9
  9652  000322  0100               	movlb	0	; () banked
  9653  000324  6F82               	movwf	strcpy@from& (0+255),b
  9654  000326  0EFF               	movlw	high STR_9
  9655  000328  0100               	movlb	0	; () banked
  9656  00032A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9657  00032C  ECC7  F02D         	call	_strcpy	;wreg free
  9658                           
  9659                           ;UI.c: 135: break;
  9660  000330  D0D7               	goto	l9832
  9661  000332                     l9806:
  9662                           
  9663                           ;UI.c: 137: strcpy(month, "MAR");
  9664  000332  0ED6               	movlw	low UI@month
  9665  000334  0100               	movlb	0	; () banked
  9666  000336  6F80               	movwf	strcpy@to& (0+255),b
  9667  000338  0E00               	movlw	high UI@month
  9668  00033A  0100               	movlb	0	; () banked
  9669  00033C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9670  00033E  0EE6               	movlw	low STR_10
  9671  000340  0100               	movlb	0	; () banked
  9672  000342  6F82               	movwf	strcpy@from& (0+255),b
  9673  000344  0EFF               	movlw	high STR_10
  9674  000346  0100               	movlb	0	; () banked
  9675  000348  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9676  00034A  ECC7  F02D         	call	_strcpy	;wreg free
  9677                           
  9678                           ;UI.c: 138: break;
  9679  00034E  D0C8               	goto	l9832
  9680  000350                     l9808:
  9681                           
  9682                           ;UI.c: 140: strcpy(month, "APR");
  9683  000350  0ED6               	movlw	low UI@month
  9684  000352  0100               	movlb	0	; () banked
  9685  000354  6F80               	movwf	strcpy@to& (0+255),b
  9686  000356  0E00               	movlw	high UI@month
  9687  000358  0100               	movlb	0	; () banked
  9688  00035A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9689  00035C  0EEA               	movlw	low STR_11
  9690  00035E  0100               	movlb	0	; () banked
  9691  000360  6F82               	movwf	strcpy@from& (0+255),b
  9692  000362  0EFF               	movlw	high STR_11
  9693  000364  0100               	movlb	0	; () banked
  9694  000366  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9695  000368  ECC7  F02D         	call	_strcpy	;wreg free
  9696                           
  9697                           ;UI.c: 141: break;
  9698  00036C  D0B9               	goto	l9832
  9699  00036E                     l9810:
  9700                           
  9701                           ;UI.c: 143: strcpy(month, "MAY");
  9702  00036E  0ED6               	movlw	low UI@month
  9703  000370  0100               	movlb	0	; () banked
  9704  000372  6F80               	movwf	strcpy@to& (0+255),b
  9705  000374  0E00               	movlw	high UI@month
  9706  000376  0100               	movlb	0	; () banked
  9707  000378  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9708  00037A  0EFA               	movlw	low STR_12
  9709  00037C  0100               	movlb	0	; () banked
  9710  00037E  6F82               	movwf	strcpy@from& (0+255),b
  9711  000380  0EFF               	movlw	high STR_12
  9712  000382  0100               	movlb	0	; () banked
  9713  000384  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9714  000386  ECC7  F02D         	call	_strcpy	;wreg free
  9715                           
  9716                           ;UI.c: 144: break;
  9717  00038A  D0AA               	goto	l9832
  9718  00038C                     l9812:
  9719                           
  9720                           ;UI.c: 146: strcpy(month, "JUN");
  9721  00038C  0ED6               	movlw	low UI@month
  9722  00038E  0100               	movlb	0	; () banked
  9723  000390  6F80               	movwf	strcpy@to& (0+255),b
  9724  000392  0E00               	movlw	high UI@month
  9725  000394  0100               	movlb	0	; () banked
  9726  000396  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9727  000398  0EDE               	movlw	low STR_13
  9728  00039A  0100               	movlb	0	; () banked
  9729  00039C  6F82               	movwf	strcpy@from& (0+255),b
  9730  00039E  0EFF               	movlw	high STR_13
  9731  0003A0  0100               	movlb	0	; () banked
  9732  0003A2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9733  0003A4  ECC7  F02D         	call	_strcpy	;wreg free
  9734                           
  9735                           ;UI.c: 147: break;
  9736  0003A8  D09B               	goto	l9832
  9737  0003AA                     l9814:
  9738                           
  9739                           ;UI.c: 149: strcpy(month, "JUL");
  9740  0003AA  0ED6               	movlw	low UI@month
  9741  0003AC  0100               	movlb	0	; () banked
  9742  0003AE  6F80               	movwf	strcpy@to& (0+255),b
  9743  0003B0  0E00               	movlw	high UI@month
  9744  0003B2  0100               	movlb	0	; () banked
  9745  0003B4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9746  0003B6  0ED6               	movlw	low STR_14
  9747  0003B8  0100               	movlb	0	; () banked
  9748  0003BA  6F82               	movwf	strcpy@from& (0+255),b
  9749  0003BC  0EFF               	movlw	high STR_14
  9750  0003BE  0100               	movlb	0	; () banked
  9751  0003C0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9752  0003C2  ECC7  F02D         	call	_strcpy	;wreg free
  9753                           
  9754                           ;UI.c: 150: break;
  9755  0003C6  D08C               	goto	l9832
  9756  0003C8                     l9816:
  9757                           
  9758                           ;UI.c: 152: strcpy(month, "AUG");
  9759  0003C8  0ED6               	movlw	low UI@month
  9760  0003CA  0100               	movlb	0	; () banked
  9761  0003CC  6F80               	movwf	strcpy@to& (0+255),b
  9762  0003CE  0E00               	movlw	high UI@month
  9763  0003D0  0100               	movlb	0	; () banked
  9764  0003D2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9765  0003D4  0ED2               	movlw	low STR_15
  9766  0003D6  0100               	movlb	0	; () banked
  9767  0003D8  6F82               	movwf	strcpy@from& (0+255),b
  9768  0003DA  0EFF               	movlw	high STR_15
  9769  0003DC  0100               	movlb	0	; () banked
  9770  0003DE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9771  0003E0  ECC7  F02D         	call	_strcpy	;wreg free
  9772                           
  9773                           ;UI.c: 153: break;
  9774  0003E4  D07D               	goto	l9832
  9775  0003E6                     l9818:
  9776                           
  9777                           ;UI.c: 155: strcpy(month, "SEP");
  9778  0003E6  0ED6               	movlw	low UI@month
  9779  0003E8  0100               	movlb	0	; () banked
  9780  0003EA  6F80               	movwf	strcpy@to& (0+255),b
  9781  0003EC  0E00               	movlw	high UI@month
  9782  0003EE  0100               	movlb	0	; () banked
  9783  0003F0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9784  0003F2  0EE2               	movlw	low STR_16
  9785  0003F4  0100               	movlb	0	; () banked
  9786  0003F6  6F82               	movwf	strcpy@from& (0+255),b
  9787  0003F8  0EFF               	movlw	high STR_16
  9788  0003FA  0100               	movlb	0	; () banked
  9789  0003FC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9790  0003FE  ECC7  F02D         	call	_strcpy	;wreg free
  9791                           
  9792                           ;UI.c: 156: break;
  9793  000402  D06E               	goto	l9832
  9794  000404                     l9820:
  9795                           
  9796                           ;UI.c: 158: strcpy(month, "OCT");
  9797  000404  0ED6               	movlw	low UI@month
  9798  000406  0100               	movlb	0	; () banked
  9799  000408  6F80               	movwf	strcpy@to& (0+255),b
  9800  00040A  0E00               	movlw	high UI@month
  9801  00040C  0100               	movlb	0	; () banked
  9802  00040E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9803  000410  0EF2               	movlw	low STR_17
  9804  000412  0100               	movlb	0	; () banked
  9805  000414  6F82               	movwf	strcpy@from& (0+255),b
  9806  000416  0EFF               	movlw	high STR_17
  9807  000418  0100               	movlb	0	; () banked
  9808  00041A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9809  00041C  ECC7  F02D         	call	_strcpy	;wreg free
  9810                           
  9811                           ;UI.c: 159: break;
  9812  000420  D05F               	goto	l9832
  9813  000422                     l9822:
  9814                           
  9815                           ;UI.c: 161: strcpy(month, "NOV");
  9816  000422  0ED6               	movlw	low UI@month
  9817  000424  0100               	movlb	0	; () banked
  9818  000426  6F80               	movwf	strcpy@to& (0+255),b
  9819  000428  0E00               	movlw	high UI@month
  9820  00042A  0100               	movlb	0	; () banked
  9821  00042C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9822  00042E  0EF6               	movlw	low STR_18
  9823  000430  0100               	movlb	0	; () banked
  9824  000432  6F82               	movwf	strcpy@from& (0+255),b
  9825  000434  0EFF               	movlw	high STR_18
  9826  000436  0100               	movlb	0	; () banked
  9827  000438  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9828  00043A  ECC7  F02D         	call	_strcpy	;wreg free
  9829                           
  9830                           ;UI.c: 162: break;
  9831  00043E  D050               	goto	l9832
  9832  000440                     l9824:
  9833                           
  9834                           ;UI.c: 164: strcpy(month, "DEC");
  9835  000440  0ED6               	movlw	low UI@month
  9836  000442  0100               	movlb	0	; () banked
  9837  000444  6F80               	movwf	strcpy@to& (0+255),b
  9838  000446  0E00               	movlw	high UI@month
  9839  000448  0100               	movlb	0	; () banked
  9840  00044A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9841  00044C  0ECE               	movlw	low STR_19
  9842  00044E  0100               	movlb	0	; () banked
  9843  000450  6F82               	movwf	strcpy@from& (0+255),b
  9844  000452  0EFF               	movlw	high STR_19
  9845  000454  0100               	movlb	0	; () banked
  9846  000456  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9847  000458  ECC7  F02D         	call	_strcpy	;wreg free
  9848                           
  9849                           ;UI.c: 165: break;
  9850  00045C  D041               	goto	l9832
  9851  00045E                     l9826:
  9852                           
  9853                           ;UI.c: 167: strcpy(month, "ERR");
  9854  00045E  0ED6               	movlw	low UI@month
  9855  000460  0100               	movlb	0	; () banked
  9856  000462  6F80               	movwf	strcpy@to& (0+255),b
  9857  000464  0E00               	movlw	high UI@month
  9858  000466  0100               	movlb	0	; () banked
  9859  000468  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9860  00046A  0EEE               	movlw	low STR_20
  9861  00046C  0100               	movlb	0	; () banked
  9862  00046E  6F82               	movwf	strcpy@from& (0+255),b
  9863  000470  0EFF               	movlw	high STR_20
  9864  000472  0100               	movlb	0	; () banked
  9865  000474  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9866  000476  ECC7  F02D         	call	_strcpy	;wreg free
  9867                           
  9868                           ;UI.c: 169: }
  9869                           
  9870                           ;UI.c: 168: break;
  9871  00047A  D032               	goto	l9832
  9872  00047C                     l9830:
  9873  00047C  EE21  F00A         	lfsr	2,_log_startTime+10
  9874  000480  CFDE F0C4          	movff	postinc2,??_UI
  9875  000484  CFDD F0C5          	movff	postdec2,??_UI+1
  9876                           
  9877                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9878                           ; Switch size 1, requested type "space"
  9879                           ; Number of cases is 1, Range of values is 0 to 0
  9880                           ; switch strategies available:
  9881                           ; Name         Instructions Cycles
  9882                           ; simple_byte            4     3 (average)
  9883                           ;	Chosen strategy is simple_byte
  9884  000488  0100               	movlb	0	; () banked
  9885  00048A  51C5               	movf	(??_UI+1)& (0+255),w,b
  9886  00048C  0A00               	xorlw	0	; case 0
  9887  00048E  A4D8               	btfss	status,2,c
  9888  000490  D7E6               	goto	l9826
  9889                           
  9890                           ; BSR set to: 0
  9891                           ; Switch size 1, requested type "space"
  9892                           ; Number of cases is 12, Range of values is 1 to 12
  9893                           ; switch strategies available:
  9894                           ; Name         Instructions Cycles
  9895                           ; simple_byte           37    19 (average)
  9896                           ;	Chosen strategy is simple_byte
  9897  000492  0100               	movlb	0	; () banked
  9898  000494  51C4               	movf	??_UI& (0+255),w,b
  9899  000496  0A01               	xorlw	1	; case 1
  9900  000498  B4D8               	btfsc	status,2,c
  9901  00049A  D72D               	goto	l9802
  9902  00049C  0A03               	xorlw	3	; case 2
  9903  00049E  B4D8               	btfsc	status,2,c
  9904  0004A0  D739               	goto	l9804
  9905  0004A2  0A01               	xorlw	1	; case 3
  9906  0004A4  B4D8               	btfsc	status,2,c
  9907  0004A6  D745               	goto	l9806
  9908  0004A8  0A07               	xorlw	7	; case 4
  9909  0004AA  B4D8               	btfsc	status,2,c
  9910  0004AC  D751               	goto	l9808
  9911  0004AE  0A01               	xorlw	1	; case 5
  9912  0004B0  B4D8               	btfsc	status,2,c
  9913  0004B2  D75D               	goto	l9810
  9914  0004B4  0A03               	xorlw	3	; case 6
  9915  0004B6  B4D8               	btfsc	status,2,c
  9916  0004B8  D769               	goto	l9812
  9917  0004BA  0A01               	xorlw	1	; case 7
  9918  0004BC  B4D8               	btfsc	status,2,c
  9919  0004BE  D775               	goto	l9814
  9920  0004C0  0A0F               	xorlw	15	; case 8
  9921  0004C2  B4D8               	btfsc	status,2,c
  9922  0004C4  D781               	goto	l9816
  9923  0004C6  0A01               	xorlw	1	; case 9
  9924  0004C8  B4D8               	btfsc	status,2,c
  9925  0004CA  D78D               	goto	l9818
  9926  0004CC  0A03               	xorlw	3	; case 10
  9927  0004CE  B4D8               	btfsc	status,2,c
  9928  0004D0  D799               	goto	l9820
  9929  0004D2  0A01               	xorlw	1	; case 11
  9930  0004D4  B4D8               	btfsc	status,2,c
  9931  0004D6  D7A5               	goto	l9822
  9932  0004D8  0A07               	xorlw	7	; case 12
  9933  0004DA  B4D8               	btfsc	status,2,c
  9934  0004DC  D7B1               	goto	l9824
  9935  0004DE  D7BF               	goto	l9826
  9936  0004E0                     l9832:
  9937                           
  9938                           ;UI.c: 170: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  9939  0004E0  0EC2               	movlw	low STR_21
  9940  0004E2  0100               	movlb	0	; () banked
  9941  0004E4  6F8E               	movwf	printf@f& (0+255),b
  9942  0004E6  0EFA               	movlw	high STR_21
  9943  0004E8  0100               	movlb	0	; () banked
  9944  0004EA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9945  0004EC  C108  F090         	movff	_log_startTime+8,?_printf+2
  9946  0004F0  C109  F091         	movff	_log_startTime+9,?_printf+3
  9947  0004F4  0ED6               	movlw	low UI@month
  9948  0004F6  0100               	movlb	0	; () banked
  9949  0004F8  6F92               	movwf	(?_printf+4)& (0+255),b
  9950  0004FA  0E00               	movlw	high UI@month
  9951  0004FC  0100               	movlb	0	; () banked
  9952  0004FE  6F93               	movwf	(?_printf+5)& (0+255),b
  9953  000500  C104  F094         	movff	_log_startTime+4,?_printf+6
  9954  000504  C105  F095         	movff	_log_startTime+5,?_printf+7
  9955  000508  C102  F096         	movff	_log_startTime+2,?_printf+8
  9956  00050C  C103  F097         	movff	_log_startTime+3,?_printf+9
  9957  000510  C100  F098         	movff	_log_startTime,?_printf+10
  9958  000514  C101  F099         	movff	_log_startTime+1,?_printf+11
  9959  000518  ECE7  F00E         	call	_printf	;wreg free
  9960                           
  9961                           ;UI.c: 172: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9962  00051C  0E00               	movlw	0
  9963  00051E  0100               	movlb	0	; () banked
  9964  000520  6FCC               	movwf	UI@i_435& (0+255),b
  9965  000522                     l9836:
  9966                           
  9967                           ; BSR set to: 0
  9968  000522  0E63               	movlw	99
  9969  000524  0100               	movlb	0	; () banked
  9970  000526  65CC               	cpfsgt	UI@i_435& (0+255),b
  9971  000528  D001               	goto	l9840
  9972  00052A  D00C               	goto	l9844
  9973  00052C                     l9840:
  9974                           
  9975                           ; BSR set to: 0
  9976  00052C  0E68               	movlw	104
  9977  00052E  0100               	movlb	0	; () banked
  9978  000530  6FC4               	movwf	??_UI& (0+255),b
  9979  000532  0EE4               	movlw	228
  9980  000534                     u11317:
  9981  000534  2EE8               	decfsz	wreg,f,c
  9982  000536  D7FE               	bra	u11317
  9983  000538  2FC4               	decfsz	??_UI& (0+255),f,b
  9984  00053A  D7FC               	bra	u11317
  9985  00053C  F000               	nop	
  9986  00053E  0100               	movlb	0	; () banked
  9987  000540  2BCC               	incf	UI@i_435& (0+255),f,b
  9988  000542  D7EF               	goto	l9836
  9989  000544                     l9844:
  9990                           
  9991                           ; BSR set to: 0
  9992  000544  0100               	movlb	0	; () banked
  9993  000546  51F8               	movf	_logstate& (0+255),w,b
  9994  000548  0100               	movlb	0	; () banked
  9995  00054A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9996  00054C  B4D8               	btfsc	status,2,c
  9997  00054E  0012               	return	
  9998                           
  9999                           ; BSR set to: 0
 10000                           ;UI.c: 173: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10001                           
 10002                           ; BSR set to: 0
 10003                           
 10004                           ; BSR set to: 0
 10005  000550  0E00               	movlw	0
 10006  000552  0100               	movlb	0	; () banked
 10007  000554  6FCD               	movwf	UI@i_436& (0+255),b
 10008  000556                     l9850:
 10009                           
 10010                           ; BSR set to: 0
 10011  000556  0E63               	movlw	99
 10012  000558  0100               	movlb	0	; () banked
 10013  00055A  65CD               	cpfsgt	UI@i_436& (0+255),b
 10014  00055C  D001               	goto	l9854
 10015  00055E  D00C               	goto	l9858
 10016  000560                     l9854:
 10017                           
 10018                           ; BSR set to: 0
 10019  000560  0E68               	movlw	104
 10020  000562  0100               	movlb	0	; () banked
 10021  000564  6FC4               	movwf	??_UI& (0+255),b
 10022  000566  0EE4               	movlw	228
 10023  000568                     u11327:
 10024  000568  2EE8               	decfsz	wreg,f,c
 10025  00056A  D7FE               	bra	u11327
 10026  00056C  2FC4               	decfsz	??_UI& (0+255),f,b
 10027  00056E  D7FC               	bra	u11327
 10028  000570  F000               	nop	
 10029  000572  0100               	movlb	0	; () banked
 10030  000574  2BCD               	incf	UI@i_436& (0+255),f,b
 10031  000576  D7EF               	goto	l9850
 10032  000578                     l9858:
 10033                           
 10034                           ; BSR set to: 0
 10035  000578  0100               	movlb	0	; () banked
 10036  00057A  51F8               	movf	_logstate& (0+255),w,b
 10037  00057C  0100               	movlb	0	; () banked
 10038  00057E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10039  000580  B4D8               	btfsc	status,2,c
 10040  000582  0012               	return	
 10041                           
 10042                           ; BSR set to: 0
 10043                           ;UI.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
 10044                           
 10045                           ; BSR set to: 0
 10046                           
 10047                           ; BSR set to: 0
 10048  000584  0E01               	movlw	1
 10049  000586  EC69  F030         	call	_lcdInst
 10050  00058A  0E68               	movlw	104
 10051  00058C  0100               	movlb	0	; () banked
 10052  00058E  6FC4               	movwf	??_UI& (0+255),b
 10053  000590  0EE4               	movlw	228
 10054  000592                     u11337:
 10055  000592  2EE8               	decfsz	wreg,f,c
 10056  000594  D7FE               	bra	u11337
 10057  000596  2FC4               	decfsz	??_UI& (0+255),f,b
 10058  000598  D7FC               	bra	u11337
 10059  00059A  F000               	nop	
 10060                           
 10061                           ;UI.c: 176: lcdInst(0b10000000);;
 10062  00059C  0E80               	movlw	128
 10063  00059E  EC69  F030         	call	_lcdInst
 10064                           
 10065                           ;UI.c: 177: printf("DURATION:");
 10066  0005A2  0E9A               	movlw	low STR_22
 10067  0005A4  0100               	movlb	0	; () banked
 10068  0005A6  6F8E               	movwf	printf@f& (0+255),b
 10069  0005A8  0EFF               	movlw	high STR_22
 10070  0005AA  0100               	movlb	0	; () banked
 10071  0005AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10072  0005AE  ECE7  F00E         	call	_printf	;wreg free
 10073                           
 10074                           ;UI.c: 178: lcdInst(0b11000000);;
 10075  0005B2  0EC0               	movlw	192
 10076  0005B4  EC69  F030         	call	_lcdInst
 10077                           
 10078                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
 10079  0005B8  0E0E               	movlw	14
 10080  0005BA  0100               	movlb	0	; () banked
 10081  0005BC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
 10082  0005BE  0E10               	movlw	16
 10083  0005C0  6F82               	movwf	___awmod@divisor& (0+255),b
 10084  0005C2  C0F6  F080         	movff	_log_total_time,___awmod@dividend
 10085  0005C6  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
 10086  0005CA  EC3F  F028         	call	___awmod	;wreg free
 10087  0005CE  C080  F0C6         	movff	?___awmod,_UI$2443
 10088  0005D2  C081  F0C7         	movff	?___awmod+1,_UI$2443+1
 10089                           
 10090                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
 10091  0005D6  0E48               	movlw	low STR_23
 10092  0005D8  0100               	movlb	0	; () banked
 10093  0005DA  6F8E               	movwf	printf@f& (0+255),b
 10094  0005DC  0EFF               	movlw	high STR_23
 10095  0005DE  0100               	movlb	0	; () banked
 10096  0005E0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10097  0005E2  0E0E               	movlw	14
 10098  0005E4  0100               	movlb	0	; () banked
 10099  0005E6  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
 10100  0005E8  0E10               	movlw	16
 10101  0005EA  6F82               	movwf	___awmod@divisor& (0+255),b
 10102  0005EC  C0F6  F080         	movff	_log_total_time,___awmod@dividend
 10103  0005F0  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
 10104  0005F4  EC3F  F028         	call	___awmod	;wreg free
 10105  0005F8  C080  F086         	movff	?___awmod,___awdiv@dividend
 10106  0005FC  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
 10107  000600  0E00               	movlw	0
 10108  000602  0100               	movlb	0	; () banked
 10109  000604  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
 10110  000606  0E3C               	movlw	60
 10111  000608  6F88               	movwf	___awdiv@divisor& (0+255),b
 10112  00060A  EC2D  F027         	call	___awdiv	;wreg free
 10113  00060E  C086  F090         	movff	?___awdiv,?_printf+2
 10114  000612  C087  F091         	movff	?___awdiv+1,?_printf+3
 10115  000616  C0C6  F080         	movff	_UI$2443,___awmod@dividend
 10116  00061A  C0C7  F081         	movff	_UI$2443+1,___awmod@dividend+1
 10117  00061E  0E00               	movlw	0
 10118  000620  0100               	movlb	0	; () banked
 10119  000622  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
 10120  000624  0E3C               	movlw	60
 10121  000626  6F82               	movwf	___awmod@divisor& (0+255),b
 10122  000628  EC3F  F028         	call	___awmod	;wreg free
 10123  00062C  C080  F092         	movff	?___awmod,?_printf+4
 10124  000630  C081  F093         	movff	?___awmod+1,?_printf+5
 10125  000634  ECE7  F00E         	call	_printf	;wreg free
 10126                           
 10127                           ;UI.c: 181: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10128  000638  0E00               	movlw	0
 10129  00063A  0100               	movlb	0	; () banked
 10130  00063C  6FCE               	movwf	UI@i_439& (0+255),b
 10131  00063E                     l9878:
 10132                           
 10133                           ; BSR set to: 0
 10134  00063E  0E63               	movlw	99
 10135  000640  0100               	movlb	0	; () banked
 10136  000642  65CE               	cpfsgt	UI@i_439& (0+255),b
 10137  000644  D001               	goto	l9882
 10138  000646  D00C               	goto	l9886
 10139  000648                     l9882:
 10140                           
 10141                           ; BSR set to: 0
 10142  000648  0E68               	movlw	104
 10143  00064A  0100               	movlb	0	; () banked
 10144  00064C  6FC4               	movwf	??_UI& (0+255),b
 10145  00064E  0EE4               	movlw	228
 10146  000650                     u11347:
 10147  000650  2EE8               	decfsz	wreg,f,c
 10148  000652  D7FE               	bra	u11347
 10149  000654  2FC4               	decfsz	??_UI& (0+255),f,b
 10150  000656  D7FC               	bra	u11347
 10151  000658  F000               	nop	
 10152  00065A  0100               	movlb	0	; () banked
 10153  00065C  2BCE               	incf	UI@i_439& (0+255),f,b
 10154  00065E  D7EF               	goto	l9878
 10155  000660                     l9886:
 10156                           
 10157                           ; BSR set to: 0
 10158  000660  0100               	movlb	0	; () banked
 10159  000662  51F8               	movf	_logstate& (0+255),w,b
 10160  000664  0100               	movlb	0	; () banked
 10161  000666  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10162  000668  B4D8               	btfsc	status,2,c
 10163  00066A  0012               	return	
 10164                           
 10165                           ; BSR set to: 0
 10166                           ;UI.c: 182: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10167                           
 10168                           ; BSR set to: 0
 10169                           
 10170                           ; BSR set to: 0
 10171  00066C  0E00               	movlw	0
 10172  00066E  0100               	movlb	0	; () banked
 10173  000670  6FCF               	movwf	UI@i_440& (0+255),b
 10174  000672                     l9892:
 10175                           
 10176                           ; BSR set to: 0
 10177  000672  0E63               	movlw	99
 10178  000674  0100               	movlb	0	; () banked
 10179  000676  65CF               	cpfsgt	UI@i_440& (0+255),b
 10180  000678  D001               	goto	l9896
 10181  00067A  D00C               	goto	l9900
 10182  00067C                     l9896:
 10183                           
 10184                           ; BSR set to: 0
 10185  00067C  0E68               	movlw	104
 10186  00067E  0100               	movlb	0	; () banked
 10187  000680  6FC4               	movwf	??_UI& (0+255),b
 10188  000682  0EE4               	movlw	228
 10189  000684                     u11357:
 10190  000684  2EE8               	decfsz	wreg,f,c
 10191  000686  D7FE               	bra	u11357
 10192  000688  2FC4               	decfsz	??_UI& (0+255),f,b
 10193  00068A  D7FC               	bra	u11357
 10194  00068C  F000               	nop	
 10195  00068E  0100               	movlb	0	; () banked
 10196  000690  2BCF               	incf	UI@i_440& (0+255),f,b
 10197  000692  D7EF               	goto	l9892
 10198  000694                     l9900:
 10199                           
 10200                           ; BSR set to: 0
 10201  000694  0100               	movlb	0	; () banked
 10202  000696  51F8               	movf	_logstate& (0+255),w,b
 10203  000698  0100               	movlb	0	; () banked
 10204  00069A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10205  00069C  B4D8               	btfsc	status,2,c
 10206  00069E  0012               	return	
 10207                           
 10208                           ; BSR set to: 0
 10209                           ;UI.c: 184: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
 10210                           
 10211                           ; BSR set to: 0
 10212                           
 10213                           ; BSR set to: 0
 10214  0006A0  0E01               	movlw	1
 10215  0006A2  EC69  F030         	call	_lcdInst
 10216  0006A6  0E68               	movlw	104
 10217  0006A8  0100               	movlb	0	; () banked
 10218  0006AA  6FC4               	movwf	??_UI& (0+255),b
 10219  0006AC  0EE4               	movlw	228
 10220  0006AE                     u11367:
 10221  0006AE  2EE8               	decfsz	wreg,f,c
 10222  0006B0  D7FE               	bra	u11367
 10223  0006B2  2FC4               	decfsz	??_UI& (0+255),f,b
 10224  0006B4  D7FC               	bra	u11367
 10225  0006B6  F000               	nop	
 10226                           
 10227                           ;UI.c: 185: lcdInst(0b10000000);;
 10228  0006B8  0E80               	movlw	128
 10229  0006BA  EC69  F030         	call	_lcdInst
 10230                           
 10231                           ;UI.c: 186: printf(" -- POP  CAN -- ");
 10232  0006BE  0E4B               	movlw	low STR_24
 10233  0006C0  0100               	movlb	0	; () banked
 10234  0006C2  6F8E               	movwf	printf@f& (0+255),b
 10235  0006C4  0EFD               	movlw	high STR_24
 10236  0006C6  0100               	movlb	0	; () banked
 10237  0006C8  6F8F               	movwf	(printf@f+1)& (0+255),b
 10238  0006CA  ECE7  F00E         	call	_printf	;wreg free
 10239                           
 10240                           ;UI.c: 187: lcdInst(0b11000000);;
 10241  0006CE  0EC0               	movlw	192
 10242  0006D0  EC69  F030         	call	_lcdInst
 10243                           
 10244                           ;UI.c: 188: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
 10245  0006D4  0E28               	movlw	low STR_25
 10246  0006D6  0100               	movlb	0	; () banked
 10247  0006D8  6F8E               	movwf	printf@f& (0+255),b
 10248  0006DA  0EFE               	movlw	high STR_25
 10249  0006DC  0100               	movlb	0	; () banked
 10250  0006DE  6F8F               	movwf	(printf@f+1)& (0+255),b
 10251  0006E0  C0F4  F090         	movff	_log_count_pop_no_tab,?_printf+2
 10252  0006E4  C0F5  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
 10253  0006E8  C069  F092         	movff	_log_count_pop_w_tab,?_printf+4
 10254  0006EC  C06A  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
 10255  0006F0  ECE7  F00E         	call	_printf	;wreg free
 10256                           
 10257                           ;UI.c: 190: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10258  0006F4  0E00               	movlw	0
 10259  0006F6  0100               	movlb	0	; () banked
 10260  0006F8  6FD0               	movwf	UI@i_443& (0+255),b
 10261  0006FA                     l9918:
 10262                           
 10263                           ; BSR set to: 0
 10264  0006FA  0E63               	movlw	99
 10265  0006FC  0100               	movlb	0	; () banked
 10266  0006FE  65D0               	cpfsgt	UI@i_443& (0+255),b
 10267  000700  D001               	goto	l9922
 10268  000702  D00C               	goto	l9926
 10269  000704                     l9922:
 10270                           
 10271                           ; BSR set to: 0
 10272  000704  0E68               	movlw	104
 10273  000706  0100               	movlb	0	; () banked
 10274  000708  6FC4               	movwf	??_UI& (0+255),b
 10275  00070A  0EE4               	movlw	228
 10276  00070C                     u11377:
 10277  00070C  2EE8               	decfsz	wreg,f,c
 10278  00070E  D7FE               	bra	u11377
 10279  000710  2FC4               	decfsz	??_UI& (0+255),f,b
 10280  000712  D7FC               	bra	u11377
 10281  000714  F000               	nop	
 10282  000716  0100               	movlb	0	; () banked
 10283  000718  2BD0               	incf	UI@i_443& (0+255),f,b
 10284  00071A  D7EF               	goto	l9918
 10285  00071C                     l9926:
 10286                           
 10287                           ; BSR set to: 0
 10288  00071C  0100               	movlb	0	; () banked
 10289  00071E  51F8               	movf	_logstate& (0+255),w,b
 10290  000720  0100               	movlb	0	; () banked
 10291  000722  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10292  000724  B4D8               	btfsc	status,2,c
 10293  000726  0012               	return	
 10294                           
 10295                           ; BSR set to: 0
 10296                           ;UI.c: 191: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10297                           
 10298                           ; BSR set to: 0
 10299                           
 10300                           ; BSR set to: 0
 10301  000728  0E00               	movlw	0
 10302  00072A  0100               	movlb	0	; () banked
 10303  00072C  6FD1               	movwf	UI@i_444& (0+255),b
 10304  00072E                     l9932:
 10305                           
 10306                           ; BSR set to: 0
 10307  00072E  0E63               	movlw	99
 10308  000730  0100               	movlb	0	; () banked
 10309  000732  65D1               	cpfsgt	UI@i_444& (0+255),b
 10310  000734  D001               	goto	l9936
 10311  000736  D00C               	goto	l9940
 10312  000738                     l9936:
 10313                           
 10314                           ; BSR set to: 0
 10315  000738  0E68               	movlw	104
 10316  00073A  0100               	movlb	0	; () banked
 10317  00073C  6FC4               	movwf	??_UI& (0+255),b
 10318  00073E  0EE4               	movlw	228
 10319  000740                     u11387:
 10320  000740  2EE8               	decfsz	wreg,f,c
 10321  000742  D7FE               	bra	u11387
 10322  000744  2FC4               	decfsz	??_UI& (0+255),f,b
 10323  000746  D7FC               	bra	u11387
 10324  000748  F000               	nop	
 10325  00074A  0100               	movlb	0	; () banked
 10326  00074C  2BD1               	incf	UI@i_444& (0+255),f,b
 10327  00074E  D7EF               	goto	l9932
 10328  000750                     l9940:
 10329                           
 10330                           ; BSR set to: 0
 10331  000750  0100               	movlb	0	; () banked
 10332  000752  51F8               	movf	_logstate& (0+255),w,b
 10333  000754  0100               	movlb	0	; () banked
 10334  000756  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10335  000758  B4D8               	btfsc	status,2,c
 10336  00075A  0012               	return	
 10337                           
 10338                           ; BSR set to: 0
 10339                           ;UI.c: 193: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
 10340                           
 10341                           ; BSR set to: 0
 10342                           
 10343                           ; BSR set to: 0
 10344  00075C  0E01               	movlw	1
 10345  00075E  EC69  F030         	call	_lcdInst
 10346  000762  0E68               	movlw	104
 10347  000764  0100               	movlb	0	; () banked
 10348  000766  6FC4               	movwf	??_UI& (0+255),b
 10349  000768  0EE4               	movlw	228
 10350  00076A                     u11397:
 10351  00076A  2EE8               	decfsz	wreg,f,c
 10352  00076C  D7FE               	bra	u11397
 10353  00076E  2FC4               	decfsz	??_UI& (0+255),f,b
 10354  000770  D7FC               	bra	u11397
 10355  000772  F000               	nop	
 10356                           
 10357                           ;UI.c: 194: lcdInst(0b10000000);;
 10358  000774  0E80               	movlw	128
 10359  000776  EC69  F030         	call	_lcdInst
 10360                           
 10361                           ;UI.c: 195: printf(" -- SOUP CAN -- ");
 10362  00077A  0E5C               	movlw	low STR_26
 10363  00077C  0100               	movlb	0	; () banked
 10364  00077E  6F8E               	movwf	printf@f& (0+255),b
 10365  000780  0EFD               	movlw	high STR_26
 10366  000782  0100               	movlb	0	; () banked
 10367  000784  6F8F               	movwf	(printf@f+1)& (0+255),b
 10368  000786  ECE7  F00E         	call	_printf	;wreg free
 10369                           
 10370                           ;UI.c: 196: lcdInst(0b11000000);;
 10371  00078A  0EC0               	movlw	192
 10372  00078C  EC69  F030         	call	_lcdInst
 10373                           
 10374                           ;UI.c: 197: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
 10375  000790  0E17               	movlw	low STR_27
 10376  000792  0100               	movlb	0	; () banked
 10377  000794  6F8E               	movwf	printf@f& (0+255),b
 10378  000796  0EFE               	movlw	high STR_27
 10379  000798  0100               	movlb	0	; () banked
 10380  00079A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10381  00079C  C141  F090         	movff	_log_count_can_no_lab,?_printf+2
 10382  0007A0  C142  F091         	movff	_log_count_can_no_lab+1,?_printf+3
 10383  0007A4  C143  F092         	movff	_log_count_can_w_lab,?_printf+4
 10384  0007A8  C144  F093         	movff	_log_count_can_w_lab+1,?_printf+5
 10385  0007AC  ECE7  F00E         	call	_printf	;wreg free
 10386                           
 10387                           ;UI.c: 199: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10388  0007B0  0E00               	movlw	0
 10389  0007B2  0100               	movlb	0	; () banked
 10390  0007B4  6FD2               	movwf	UI@i_447& (0+255),b
 10391  0007B6                     l9958:
 10392                           
 10393                           ; BSR set to: 0
 10394  0007B6  0E63               	movlw	99
 10395  0007B8  0100               	movlb	0	; () banked
 10396  0007BA  65D2               	cpfsgt	UI@i_447& (0+255),b
 10397  0007BC  D001               	goto	l9962
 10398  0007BE  D00C               	goto	l9966
 10399  0007C0                     l9962:
 10400                           
 10401                           ; BSR set to: 0
 10402  0007C0  0E68               	movlw	104
 10403  0007C2  0100               	movlb	0	; () banked
 10404  0007C4  6FC4               	movwf	??_UI& (0+255),b
 10405  0007C6  0EE4               	movlw	228
 10406  0007C8                     u11407:
 10407  0007C8  2EE8               	decfsz	wreg,f,c
 10408  0007CA  D7FE               	bra	u11407
 10409  0007CC  2FC4               	decfsz	??_UI& (0+255),f,b
 10410  0007CE  D7FC               	bra	u11407
 10411  0007D0  F000               	nop	
 10412  0007D2  0100               	movlb	0	; () banked
 10413  0007D4  2BD2               	incf	UI@i_447& (0+255),f,b
 10414  0007D6  D7EF               	goto	l9958
 10415  0007D8                     l9966:
 10416                           
 10417                           ; BSR set to: 0
 10418  0007D8  0100               	movlb	0	; () banked
 10419  0007DA  51F8               	movf	_logstate& (0+255),w,b
 10420  0007DC  0100               	movlb	0	; () banked
 10421  0007DE  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10422  0007E0  B4D8               	btfsc	status,2,c
 10423  0007E2  0012               	return	
 10424                           
 10425                           ; BSR set to: 0
 10426                           ;UI.c: 200: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10427                           
 10428                           ; BSR set to: 0
 10429                           
 10430                           ; BSR set to: 0
 10431  0007E4  0E00               	movlw	0
 10432  0007E6  0100               	movlb	0	; () banked
 10433  0007E8  6FD3               	movwf	UI@i_448& (0+255),b
 10434  0007EA                     l9972:
 10435                           
 10436                           ; BSR set to: 0
 10437  0007EA  0E63               	movlw	99
 10438  0007EC  0100               	movlb	0	; () banked
 10439  0007EE  65D3               	cpfsgt	UI@i_448& (0+255),b
 10440  0007F0  D001               	goto	l9976
 10441  0007F2  D00C               	goto	l9980
 10442  0007F4                     l9976:
 10443                           
 10444                           ; BSR set to: 0
 10445  0007F4  0E68               	movlw	104
 10446  0007F6  0100               	movlb	0	; () banked
 10447  0007F8  6FC4               	movwf	??_UI& (0+255),b
 10448  0007FA  0EE4               	movlw	228
 10449  0007FC                     u11417:
 10450  0007FC  2EE8               	decfsz	wreg,f,c
 10451  0007FE  D7FE               	bra	u11417
 10452  000800  2FC4               	decfsz	??_UI& (0+255),f,b
 10453  000802  D7FC               	bra	u11417
 10454  000804  F000               	nop	
 10455  000806  0100               	movlb	0	; () banked
 10456  000808  2BD3               	incf	UI@i_448& (0+255),f,b
 10457  00080A  D7EF               	goto	l9972
 10458  00080C                     l9980:
 10459                           
 10460                           ; BSR set to: 0
 10461  00080C  0100               	movlb	0	; () banked
 10462  00080E  51F8               	movf	_logstate& (0+255),w,b
 10463  000810  0100               	movlb	0	; () banked
 10464  000812  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10465  000814  B4D8               	btfsc	status,2,c
 10466  000816  0012               	return	
 10467                           
 10468                           ; BSR set to: 0
 10469                           ;UI.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
 10470                           
 10471                           ; BSR set to: 0
 10472                           
 10473                           ; BSR set to: 0
 10474  000818  0E01               	movlw	1
 10475  00081A  EC69  F030         	call	_lcdInst
 10476  00081E  0E68               	movlw	104
 10477  000820  0100               	movlb	0	; () banked
 10478  000822  6FC4               	movwf	??_UI& (0+255),b
 10479  000824  0EE4               	movlw	228
 10480  000826                     u11427:
 10481  000826  2EE8               	decfsz	wreg,f,c
 10482  000828  D7FE               	bra	u11427
 10483  00082A  2FC4               	decfsz	??_UI& (0+255),f,b
 10484  00082C  D7FC               	bra	u11427
 10485  00082E  F000               	nop	
 10486                           
 10487                           ;UI.c: 203: lcdInst(0b10000000);;
 10488  000830  0E80               	movlw	128
 10489  000832  EC69  F030         	call	_lcdInst
 10490                           
 10491                           ;UI.c: 204: printf("-- TOTAL CANS --");
 10492  000836  0E6D               	movlw	low STR_28
 10493  000838  0100               	movlb	0	; () banked
 10494  00083A  6F8E               	movwf	printf@f& (0+255),b
 10495  00083C  0EFD               	movlw	high STR_28
 10496  00083E  0100               	movlb	0	; () banked
 10497  000840  6F8F               	movwf	(printf@f+1)& (0+255),b
 10498  000842  ECE7  F00E         	call	_printf	;wreg free
 10499                           
 10500                           ;UI.c: 205: lcdInst(0b11000000);;
 10501  000846  0EC0               	movlw	192
 10502  000848  EC69  F030         	call	_lcdInst
 10503                           
 10504                           ;UI.c: 206: printf("%d", log_count_total);
 10505  00084C  0E25               	movlw	low (STR_27+14)
 10506  00084E  0100               	movlb	0	; () banked
 10507  000850  6F8E               	movwf	printf@f& (0+255),b
 10508  000852  0EFE               	movlw	high (STR_27+14)
 10509  000854  0100               	movlb	0	; () banked
 10510  000856  6F8F               	movwf	(printf@f+1)& (0+255),b
 10511  000858  C145  F090         	movff	_log_count_total,?_printf+2
 10512  00085C  C146  F091         	movff	_log_count_total+1,?_printf+3
 10513  000860  ECE7  F00E         	call	_printf	;wreg free
 10514                           
 10515                           ;UI.c: 208: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10516  000864  0E00               	movlw	0
 10517  000866  0100               	movlb	0	; () banked
 10518  000868  6FD4               	movwf	UI@i_451& (0+255),b
 10519  00086A                     l9998:
 10520                           
 10521                           ; BSR set to: 0
 10522  00086A  0E63               	movlw	99
 10523  00086C  0100               	movlb	0	; () banked
 10524  00086E  65D4               	cpfsgt	UI@i_451& (0+255),b
 10525  000870  D001               	goto	l10002
 10526  000872  D00C               	goto	l10006
 10527  000874                     l10002:
 10528                           
 10529                           ; BSR set to: 0
 10530  000874  0E68               	movlw	104
 10531  000876  0100               	movlb	0	; () banked
 10532  000878  6FC4               	movwf	??_UI& (0+255),b
 10533  00087A  0EE4               	movlw	228
 10534  00087C                     u11437:
 10535  00087C  2EE8               	decfsz	wreg,f,c
 10536  00087E  D7FE               	bra	u11437
 10537  000880  2FC4               	decfsz	??_UI& (0+255),f,b
 10538  000882  D7FC               	bra	u11437
 10539  000884  F000               	nop	
 10540  000886  0100               	movlb	0	; () banked
 10541  000888  2BD4               	incf	UI@i_451& (0+255),f,b
 10542  00088A  D7EF               	goto	l9998
 10543  00088C                     l10006:
 10544                           
 10545                           ; BSR set to: 0
 10546  00088C  0100               	movlb	0	; () banked
 10547  00088E  51F8               	movf	_logstate& (0+255),w,b
 10548  000890  0100               	movlb	0	; () banked
 10549  000892  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10550  000894  B4D8               	btfsc	status,2,c
 10551  000896  0012               	return	
 10552                           
 10553                           ; BSR set to: 0
 10554                           ;UI.c: 209: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10555                           
 10556                           ; BSR set to: 0
 10557                           
 10558                           ; BSR set to: 0
 10559  000898  0E00               	movlw	0
 10560  00089A  0100               	movlb	0	; () banked
 10561  00089C  6FD5               	movwf	UI@i_452& (0+255),b
 10562  00089E                     l10012:
 10563                           
 10564                           ; BSR set to: 0
 10565  00089E  0E63               	movlw	99
 10566  0008A0  0100               	movlb	0	; () banked
 10567  0008A2  65D5               	cpfsgt	UI@i_452& (0+255),b
 10568  0008A4  D001               	goto	l10016
 10569  0008A6  D00C               	goto	l10020
 10570  0008A8                     l10016:
 10571                           
 10572                           ; BSR set to: 0
 10573  0008A8  0E68               	movlw	104
 10574  0008AA  0100               	movlb	0	; () banked
 10575  0008AC  6FC4               	movwf	??_UI& (0+255),b
 10576  0008AE  0EE4               	movlw	228
 10577  0008B0                     u11447:
 10578  0008B0  2EE8               	decfsz	wreg,f,c
 10579  0008B2  D7FE               	bra	u11447
 10580  0008B4  2FC4               	decfsz	??_UI& (0+255),f,b
 10581  0008B6  D7FC               	bra	u11447
 10582  0008B8  F000               	nop	
 10583  0008BA  0100               	movlb	0	; () banked
 10584  0008BC  2BD5               	incf	UI@i_452& (0+255),f,b
 10585  0008BE  D7EF               	goto	l10012
 10586  0008C0                     l10020:
 10587                           
 10588                           ; BSR set to: 0
 10589  0008C0  0100               	movlb	0	; () banked
 10590  0008C2  51F8               	movf	_logstate& (0+255),w,b
 10591  0008C4  0100               	movlb	0	; () banked
 10592  0008C6  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10593  0008C8  B4D8               	btfsc	status,2,c
 10594  0008CA  0012               	return	
 10595  0008CC                     l10024:
 10596  0008CC  0100               	movlb	0	; () banked
 10597  0008CE  51F8               	movf	_logstate& (0+255),w,b
 10598  0008D0  0100               	movlb	0	; () banked
 10599  0008D2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10600  0008D4  B4D8               	btfsc	status,2,c
 10601  0008D6  0012               	return	
 10602  0008D8  D44A               	goto	l9720
 10603  0008DA                     __end_of_UI:
 10604                           	opt stack 0
 10605                           tblptru	equ	0xFF8
 10606                           tblptrh	equ	0xFF7
 10607                           tblptrl	equ	0xFF6
 10608                           tablat	equ	0xFF5
 10609                           prodh	equ	0xFF4
 10610                           prodl	equ	0xFF3
 10611                           intcon	equ	0xFF2
 10612                           intcon2	equ	0xFF1
 10613                           intcon3	equ	0xFF0
 10614                           postinc0	equ	0xFEE
 10615                           wreg	equ	0xFE8
 10616                           postdec1	equ	0xFE5
 10617                           fsr1l	equ	0xFE1
 10618                           indf2	equ	0xFDF
 10619                           postinc2	equ	0xFDE
 10620                           postdec2	equ	0xFDD
 10621                           fsr2h	equ	0xFDA
 10622                           fsr2l	equ	0xFD9
 10623                           status	equ	0xFD8
 10624                           
 10625 ;; *************** function _printRTC *****************
 10626 ;; Defined at:
 10627 ;;		line 63 in file "RTC.c"
 10628 ;; Parameters:    Size  Location     Type
 10629 ;;		None
 10630 ;; Auto vars:     Size  Location     Type
 10631 ;;  i               2   66[BANK0 ] int 
 10632 ;;  INT_time       14   46[BANK0 ] int [7]
 10633 ;;  month           4   62[BANK0 ] unsigned char [4]
 10634 ;;  RTC_month       2   60[BANK0 ] int 
 10635 ;; Return value:  Size  Location     Type
 10636 ;;                  1    wreg      void 
 10637 ;; Registers used:
 10638 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10639 ;; Tracked objects:
 10640 ;;		On entry : 0/0
 10641 ;;		On exit  : 0/0
 10642 ;;		Unchanged: 0/0
 10643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10645 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10646 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10647 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10648 ;;Total ram usage:       25 bytes
 10649 ;; Hardware stack levels used:    1
 10650 ;; Hardware stack levels required when called:   10
 10651 ;; This function calls:
 10652 ;;		_getRTC
 10653 ;;		_lcdInst
 10654 ;;		_printf
 10655 ;;		_strcpy
 10656 ;; This function is called by:
 10657 ;;		_UI
 10658 ;;		_change_state_to_menu_start
 10659 ;; This function uses a non-reentrant model
 10660 ;;
 10661                           
 10662                           	psect	text28
 10663  0033E2                     __ptext28:
 10664                           	opt stack 0
 10665  0033E2                     _printRTC:
 10666                           	opt stack 18
 10667                           
 10668                           ;RTC.c: 64: getRTC();
 10669                           
 10670                           ; BSR set to: 0
 10671                           ;incstack = 0
 10672  0033E2  EC22  F029         	call	_getRTC	;wreg free
 10673                           
 10674                           ;RTC.c: 65: char month[] = "MMM";
 10675  0033E6  C153  F0BE         	movff	printRTC@F3242,printRTC@month
 10676  0033EA  C154  F0BF         	movff	printRTC@F3242+1,printRTC@month+1
 10677  0033EE  C155  F0C0         	movff	printRTC@F3242+2,printRTC@month+2
 10678  0033F2  C156  F0C1         	movff	printRTC@F3242+3,printRTC@month+3
 10679                           
 10680                           ;RTC.c: 66: int INT_time[7];
 10681                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 10682  0033F6  0E00               	movlw	0
 10683  0033F8  0100               	movlb	0	; () banked
 10684  0033FA  6FC3               	movwf	(printRTC@i+1)& (0+255),b
 10685  0033FC  0E00               	movlw	0
 10686  0033FE  6FC2               	movwf	printRTC@i& (0+255),b
 10687                           
 10688                           ; BSR set to: 0
 10689  003400  0100               	movlb	0	; () banked
 10690  003402  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10691  003404  D008               	goto	l7414
 10692  003406  0100               	movlb	0	; () banked
 10693  003408  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10694  00340A  E146               	bnz	l634
 10695  00340C  0E07               	movlw	7
 10696  00340E  0100               	movlb	0	; () banked
 10697  003410  5DC2               	subwf	printRTC@i& (0+255),w,b
 10698  003412  B0D8               	btfsc	status,0,c
 10699  003414  D041               	goto	l634
 10700  003416                     l7414:
 10701                           
 10702                           ; BSR set to: 0
 10703                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 10704  003416  0E24               	movlw	low _time
 10705  003418  0100               	movlb	0	; () banked
 10706  00341A  25C2               	addwf	printRTC@i& (0+255),w,b
 10707  00341C  6ED9               	movwf	fsr2l,c
 10708  00341E  0E01               	movlw	high _time
 10709  003420  0100               	movlb	0	; () banked
 10710  003422  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10711  003424  6EDA               	movwf	fsr2h,c
 10712  003426  50DF               	movf	indf2,w,c
 10713  003428  0100               	movlb	0	; () banked
 10714  00342A  6FAB               	movwf	??_printRTC& (0+255),b
 10715  00342C  0100               	movlb	0	; () banked
 10716  00342E  3BAB               	swapf	??_printRTC& (0+255),f,b
 10717  003430  0E0F               	movlw	15
 10718  003432  17AB               	andwf	??_printRTC& (0+255),f,b
 10719  003434  0E0F               	movlw	15
 10720  003436  0100               	movlb	0	; () banked
 10721  003438  17AB               	andwf	??_printRTC& (0+255),f,b
 10722  00343A  0100               	movlb	0	; () banked
 10723  00343C  51AB               	movf	??_printRTC& (0+255),w,b
 10724  00343E  0D0A               	mullw	10
 10725  003440  0E24               	movlw	low _time
 10726  003442  0100               	movlb	0	; () banked
 10727  003444  25C2               	addwf	printRTC@i& (0+255),w,b
 10728  003446  6ED9               	movwf	fsr2l,c
 10729  003448  0E01               	movlw	high _time
 10730  00344A  0100               	movlb	0	; () banked
 10731  00344C  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10732  00344E  6EDA               	movwf	fsr2h,c
 10733  003450  50DF               	movf	indf2,w,c
 10734  003452  0B0F               	andlw	15
 10735  003454  0100               	movlb	0	; () banked
 10736  003456  6FAC               	movwf	(??_printRTC+1)& (0+255),b
 10737  003458  6BAD               	clrf	(??_printRTC+2)& (0+255),b
 10738  00345A  50F3               	movf	prodl,w,c
 10739  00345C  0100               	movlb	0	; () banked
 10740  00345E  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
 10741  003460  50F4               	movf	prodh,w,c
 10742  003462  0100               	movlb	0	; () banked
 10743  003464  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
 10744  003466  90D8               	bcf	status,0,c
 10745  003468  0100               	movlb	0	; () banked
 10746  00346A  35C2               	rlcf	printRTC@i& (0+255),w,b
 10747  00346C  6ED9               	movwf	fsr2l,c
 10748  00346E  0100               	movlb	0	; () banked
 10749  003470  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
 10750  003472  6EDA               	movwf	fsr2h,c
 10751  003474  0EAE               	movlw	low printRTC@INT_time
 10752  003476  26D9               	addwf	fsr2l,f,c
 10753  003478  0E00               	movlw	high printRTC@INT_time
 10754  00347A  22DA               	addwfc	fsr2h,f,c
 10755  00347C  C0AC  FFDE         	movff	??_printRTC+1,postinc2
 10756  003480  C0AD  FFDD         	movff	??_printRTC+2,postdec2
 10757                           
 10758                           ; BSR set to: 0
 10759  003484  0100               	movlb	0	; () banked
 10760  003486  4BC2               	infsnz	printRTC@i& (0+255),f,b
 10761  003488  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
 10762                           
 10763                           ; BSR set to: 0
 10764  00348A  0100               	movlb	0	; () banked
 10765  00348C  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10766  00348E  D7C3               	goto	l7414
 10767  003490  0100               	movlb	0	; () banked
 10768  003492  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10769  003494  E101               	bnz	u6470
 10770  003496  D7BA               	goto	L10
 10771  003498                     u6470:
 10772  003498                     l634:
 10773                           
 10774                           ; BSR set to: 0
 10775                           ;RTC.c: 69: }
 10776                           ;RTC.c: 70: int RTC_month = INT_time[5];
 10777  003498  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
 10778  00349C  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
 10779                           
 10780                           ;RTC.c: 72: switch(RTC_month){
 10781  0034A0  D0B4               	goto	l7446
 10782  0034A2                     l7420:
 10783                           
 10784                           ; BSR set to: 0
 10785                           ;RTC.c: 74: strcpy(month, "JAN");
 10786  0034A2  0EBE               	movlw	low printRTC@month
 10787  0034A4  0100               	movlb	0	; () banked
 10788  0034A6  6F80               	movwf	strcpy@to& (0+255),b
 10789  0034A8  0E00               	movlw	high printRTC@month
 10790  0034AA  0100               	movlb	0	; () banked
 10791  0034AC  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10792  0034AE  0EDA               	movlw	low STR_8
 10793  0034B0  0100               	movlb	0	; () banked
 10794  0034B2  6F82               	movwf	strcpy@from& (0+255),b
 10795  0034B4  0EFF               	movlw	high STR_8
 10796  0034B6  0100               	movlb	0	; () banked
 10797  0034B8  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10798  0034BA  ECC7  F02D         	call	_strcpy	;wreg free
 10799                           
 10800                           ;RTC.c: 75: break;
 10801  0034BE  D0D4               	goto	l7448
 10802  0034C0                     l7422:
 10803                           
 10804                           ;RTC.c: 77: strcpy(month, "FEB");
 10805  0034C0  0EBE               	movlw	low printRTC@month
 10806  0034C2  0100               	movlb	0	; () banked
 10807  0034C4  6F80               	movwf	strcpy@to& (0+255),b
 10808  0034C6  0E00               	movlw	high printRTC@month
 10809  0034C8  0100               	movlb	0	; () banked
 10810  0034CA  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10811  0034CC  0ECA               	movlw	low STR_9
 10812  0034CE  0100               	movlb	0	; () banked
 10813  0034D0  6F82               	movwf	strcpy@from& (0+255),b
 10814  0034D2  0EFF               	movlw	high STR_9
 10815  0034D4  0100               	movlb	0	; () banked
 10816  0034D6  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10817  0034D8  ECC7  F02D         	call	_strcpy	;wreg free
 10818                           
 10819                           ;RTC.c: 78: break;
 10820  0034DC  D0C5               	goto	l7448
 10821  0034DE                     l7424:
 10822                           
 10823                           ;RTC.c: 80: strcpy(month, "MAR");
 10824  0034DE  0EBE               	movlw	low printRTC@month
 10825  0034E0  0100               	movlb	0	; () banked
 10826  0034E2  6F80               	movwf	strcpy@to& (0+255),b
 10827  0034E4  0E00               	movlw	high printRTC@month
 10828  0034E6  0100               	movlb	0	; () banked
 10829  0034E8  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10830  0034EA  0EE6               	movlw	low STR_10
 10831  0034EC  0100               	movlb	0	; () banked
 10832  0034EE  6F82               	movwf	strcpy@from& (0+255),b
 10833  0034F0  0EFF               	movlw	high STR_10
 10834  0034F2  0100               	movlb	0	; () banked
 10835  0034F4  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10836  0034F6  ECC7  F02D         	call	_strcpy	;wreg free
 10837                           
 10838                           ;RTC.c: 81: break;
 10839  0034FA  D0B6               	goto	l7448
 10840  0034FC                     l7426:
 10841                           
 10842                           ;RTC.c: 83: strcpy(month, "APR");
 10843  0034FC  0EBE               	movlw	low printRTC@month
 10844  0034FE  0100               	movlb	0	; () banked
 10845  003500  6F80               	movwf	strcpy@to& (0+255),b
 10846  003502  0E00               	movlw	high printRTC@month
 10847  003504  0100               	movlb	0	; () banked
 10848  003506  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10849  003508  0EEA               	movlw	low STR_11
 10850  00350A  0100               	movlb	0	; () banked
 10851  00350C  6F82               	movwf	strcpy@from& (0+255),b
 10852  00350E  0EFF               	movlw	high STR_11
 10853  003510  0100               	movlb	0	; () banked
 10854  003512  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10855  003514  ECC7  F02D         	call	_strcpy	;wreg free
 10856                           
 10857                           ;RTC.c: 84: break;
 10858  003518  D0A7               	goto	l7448
 10859  00351A                     l7428:
 10860                           
 10861                           ;RTC.c: 86: strcpy(month, "MAY");
 10862  00351A  0EBE               	movlw	low printRTC@month
 10863  00351C  0100               	movlb	0	; () banked
 10864  00351E  6F80               	movwf	strcpy@to& (0+255),b
 10865  003520  0E00               	movlw	high printRTC@month
 10866  003522  0100               	movlb	0	; () banked
 10867  003524  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10868  003526  0EFA               	movlw	low STR_12
 10869  003528  0100               	movlb	0	; () banked
 10870  00352A  6F82               	movwf	strcpy@from& (0+255),b
 10871  00352C  0EFF               	movlw	high STR_12
 10872  00352E  0100               	movlb	0	; () banked
 10873  003530  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10874  003532  ECC7  F02D         	call	_strcpy	;wreg free
 10875                           
 10876                           ;RTC.c: 87: break;
 10877  003536  D098               	goto	l7448
 10878  003538                     l7430:
 10879                           
 10880                           ;RTC.c: 89: strcpy(month, "JUN");
 10881  003538  0EBE               	movlw	low printRTC@month
 10882  00353A  0100               	movlb	0	; () banked
 10883  00353C  6F80               	movwf	strcpy@to& (0+255),b
 10884  00353E  0E00               	movlw	high printRTC@month
 10885  003540  0100               	movlb	0	; () banked
 10886  003542  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10887  003544  0EDE               	movlw	low STR_13
 10888  003546  0100               	movlb	0	; () banked
 10889  003548  6F82               	movwf	strcpy@from& (0+255),b
 10890  00354A  0EFF               	movlw	high STR_13
 10891  00354C  0100               	movlb	0	; () banked
 10892  00354E  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10893  003550  ECC7  F02D         	call	_strcpy	;wreg free
 10894                           
 10895                           ;RTC.c: 90: break;
 10896  003554  D089               	goto	l7448
 10897  003556                     l7432:
 10898                           
 10899                           ;RTC.c: 92: strcpy(month, "JUL");
 10900  003556  0EBE               	movlw	low printRTC@month
 10901  003558  0100               	movlb	0	; () banked
 10902  00355A  6F80               	movwf	strcpy@to& (0+255),b
 10903  00355C  0E00               	movlw	high printRTC@month
 10904  00355E  0100               	movlb	0	; () banked
 10905  003560  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10906  003562  0ED6               	movlw	low STR_14
 10907  003564  0100               	movlb	0	; () banked
 10908  003566  6F82               	movwf	strcpy@from& (0+255),b
 10909  003568  0EFF               	movlw	high STR_14
 10910  00356A  0100               	movlb	0	; () banked
 10911  00356C  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10912  00356E  ECC7  F02D         	call	_strcpy	;wreg free
 10913                           
 10914                           ;RTC.c: 93: break;
 10915  003572  D07A               	goto	l7448
 10916  003574                     l7434:
 10917                           
 10918                           ;RTC.c: 95: strcpy(month, "AUG");
 10919  003574  0EBE               	movlw	low printRTC@month
 10920  003576  0100               	movlb	0	; () banked
 10921  003578  6F80               	movwf	strcpy@to& (0+255),b
 10922  00357A  0E00               	movlw	high printRTC@month
 10923  00357C  0100               	movlb	0	; () banked
 10924  00357E  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10925  003580  0ED2               	movlw	low STR_15
 10926  003582  0100               	movlb	0	; () banked
 10927  003584  6F82               	movwf	strcpy@from& (0+255),b
 10928  003586  0EFF               	movlw	high STR_15
 10929  003588  0100               	movlb	0	; () banked
 10930  00358A  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10931  00358C  ECC7  F02D         	call	_strcpy	;wreg free
 10932                           
 10933                           ;RTC.c: 96: break;
 10934  003590  D06B               	goto	l7448
 10935  003592                     l7436:
 10936                           
 10937                           ;RTC.c: 98: strcpy(month, "SEP");
 10938  003592  0EBE               	movlw	low printRTC@month
 10939  003594  0100               	movlb	0	; () banked
 10940  003596  6F80               	movwf	strcpy@to& (0+255),b
 10941  003598  0E00               	movlw	high printRTC@month
 10942  00359A  0100               	movlb	0	; () banked
 10943  00359C  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10944  00359E  0EE2               	movlw	low STR_16
 10945  0035A0  0100               	movlb	0	; () banked
 10946  0035A2  6F82               	movwf	strcpy@from& (0+255),b
 10947  0035A4  0EFF               	movlw	high STR_16
 10948  0035A6  0100               	movlb	0	; () banked
 10949  0035A8  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10950  0035AA  ECC7  F02D         	call	_strcpy	;wreg free
 10951                           
 10952                           ;RTC.c: 99: break;
 10953  0035AE  D05C               	goto	l7448
 10954  0035B0                     l7438:
 10955                           
 10956                           ;RTC.c: 101: strcpy(month, "OCT");
 10957  0035B0  0EBE               	movlw	low printRTC@month
 10958  0035B2  0100               	movlb	0	; () banked
 10959  0035B4  6F80               	movwf	strcpy@to& (0+255),b
 10960  0035B6  0E00               	movlw	high printRTC@month
 10961  0035B8  0100               	movlb	0	; () banked
 10962  0035BA  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10963  0035BC  0EF2               	movlw	low STR_17
 10964  0035BE  0100               	movlb	0	; () banked
 10965  0035C0  6F82               	movwf	strcpy@from& (0+255),b
 10966  0035C2  0EFF               	movlw	high STR_17
 10967  0035C4  0100               	movlb	0	; () banked
 10968  0035C6  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10969  0035C8  ECC7  F02D         	call	_strcpy	;wreg free
 10970                           
 10971                           ;RTC.c: 102: break;
 10972  0035CC  D04D               	goto	l7448
 10973  0035CE                     l7440:
 10974                           
 10975                           ;RTC.c: 104: strcpy(month, "NOV");
 10976  0035CE  0EBE               	movlw	low printRTC@month
 10977  0035D0  0100               	movlb	0	; () banked
 10978  0035D2  6F80               	movwf	strcpy@to& (0+255),b
 10979  0035D4  0E00               	movlw	high printRTC@month
 10980  0035D6  0100               	movlb	0	; () banked
 10981  0035D8  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10982  0035DA  0EF6               	movlw	low STR_18
 10983  0035DC  0100               	movlb	0	; () banked
 10984  0035DE  6F82               	movwf	strcpy@from& (0+255),b
 10985  0035E0  0EFF               	movlw	high STR_18
 10986  0035E2  0100               	movlb	0	; () banked
 10987  0035E4  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10988  0035E6  ECC7  F02D         	call	_strcpy	;wreg free
 10989                           
 10990                           ;RTC.c: 105: break;
 10991  0035EA  D03E               	goto	l7448
 10992  0035EC                     l7442:
 10993                           
 10994                           ;RTC.c: 107: strcpy(month, "DEC");
 10995  0035EC  0EBE               	movlw	low printRTC@month
 10996  0035EE  0100               	movlb	0	; () banked
 10997  0035F0  6F80               	movwf	strcpy@to& (0+255),b
 10998  0035F2  0E00               	movlw	high printRTC@month
 10999  0035F4  0100               	movlb	0	; () banked
 11000  0035F6  6F81               	movwf	(strcpy@to+1)& (0+255),b
 11001  0035F8  0ECE               	movlw	low STR_19
 11002  0035FA  0100               	movlb	0	; () banked
 11003  0035FC  6F82               	movwf	strcpy@from& (0+255),b
 11004  0035FE  0EFF               	movlw	high STR_19
 11005  003600  0100               	movlb	0	; () banked
 11006  003602  6F83               	movwf	(strcpy@from+1)& (0+255),b
 11007  003604  ECC7  F02D         	call	_strcpy	;wreg free
 11008                           
 11009                           ;RTC.c: 109: }
 11010                           
 11011                           ;RTC.c: 108: break;
 11012  003608  D02F               	goto	l7448
 11013  00360A                     l7446:
 11014  00360A  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
 11015  00360E  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
 11016                           
 11017                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11018                           ; Switch size 1, requested type "space"
 11019                           ; Number of cases is 1, Range of values is 0 to 0
 11020                           ; switch strategies available:
 11021                           ; Name         Instructions Cycles
 11022                           ; simple_byte            4     3 (average)
 11023                           ;	Chosen strategy is simple_byte
 11024  003612  0100               	movlb	0	; () banked
 11025  003614  51AC               	movf	(??_printRTC+1)& (0+255),w,b
 11026  003616  0A00               	xorlw	0	; case 0
 11027  003618  A4D8               	btfss	status,2,c
 11028  00361A  D026               	goto	l7448
 11029                           
 11030                           ; BSR set to: 0
 11031                           ; Switch size 1, requested type "space"
 11032                           ; Number of cases is 12, Range of values is 1 to 12
 11033                           ; switch strategies available:
 11034                           ; Name         Instructions Cycles
 11035                           ; simple_byte           37    19 (average)
 11036                           ;	Chosen strategy is simple_byte
 11037  00361C  0100               	movlb	0	; () banked
 11038  00361E  51AB               	movf	??_printRTC& (0+255),w,b
 11039  003620  0A01               	xorlw	1	; case 1
 11040  003622  B4D8               	btfsc	status,2,c
 11041  003624  D73E               	goto	l7420
 11042  003626  0A03               	xorlw	3	; case 2
 11043  003628  B4D8               	btfsc	status,2,c
 11044  00362A  D74A               	goto	l7422
 11045  00362C  0A01               	xorlw	1	; case 3
 11046  00362E  B4D8               	btfsc	status,2,c
 11047  003630  D756               	goto	l7424
 11048  003632  0A07               	xorlw	7	; case 4
 11049  003634  B4D8               	btfsc	status,2,c
 11050  003636  D762               	goto	l7426
 11051  003638  0A01               	xorlw	1	; case 5
 11052  00363A  B4D8               	btfsc	status,2,c
 11053  00363C  D76E               	goto	l7428
 11054  00363E  0A03               	xorlw	3	; case 6
 11055  003640  B4D8               	btfsc	status,2,c
 11056  003642  D77A               	goto	l7430
 11057  003644  0A01               	xorlw	1	; case 7
 11058  003646  B4D8               	btfsc	status,2,c
 11059  003648  D786               	goto	l7432
 11060  00364A  0A0F               	xorlw	15	; case 8
 11061  00364C  B4D8               	btfsc	status,2,c
 11062  00364E  D792               	goto	l7434
 11063  003650  0A01               	xorlw	1	; case 9
 11064  003652  B4D8               	btfsc	status,2,c
 11065  003654  D79E               	goto	l7436
 11066  003656  0A03               	xorlw	3	; case 10
 11067  003658  B4D8               	btfsc	status,2,c
 11068  00365A  D7AA               	goto	l7438
 11069  00365C  0A01               	xorlw	1	; case 11
 11070  00365E  B4D8               	btfsc	status,2,c
 11071  003660  D7B6               	goto	l7440
 11072  003662  0A07               	xorlw	7	; case 12
 11073  003664  B4D8               	btfsc	status,2,c
 11074  003666  D7C2               	goto	l7442
 11075  003668                     l7448:
 11076                           
 11077                           ;RTC.c: 110: lcdInst(0b10000000);;
 11078  003668  0E80               	movlw	128
 11079  00366A  EC69  F030         	call	_lcdInst
 11080                           
 11081                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 11082  00366E  0EC2               	movlw	low STR_21
 11083  003670  0100               	movlb	0	; () banked
 11084  003672  6F8E               	movwf	printf@f& (0+255),b
 11085  003674  0EFA               	movlw	high STR_21
 11086  003676  0100               	movlb	0	; () banked
 11087  003678  6F8F               	movwf	(printf@f+1)& (0+255),b
 11088  00367A  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
 11089  00367E  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
 11090  003682  0EBE               	movlw	low printRTC@month
 11091  003684  0100               	movlb	0	; () banked
 11092  003686  6F92               	movwf	(?_printf+4)& (0+255),b
 11093  003688  0E00               	movlw	high printRTC@month
 11094  00368A  0100               	movlb	0	; () banked
 11095  00368C  6F93               	movwf	(?_printf+5)& (0+255),b
 11096  00368E  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
 11097  003692  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
 11098  003696  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
 11099  00369A  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
 11100  00369E  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
 11101  0036A2  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
 11102  0036A6  ECE7  F00E         	call	_printf	;wreg free
 11103  0036AA  0012               	return		;funcret
 11104  0036AC                     __end_of_printRTC:
 11105                           	opt stack 0
 11106                           tblptru	equ	0xFF8
 11107                           tblptrh	equ	0xFF7
 11108                           tblptrl	equ	0xFF6
 11109                           tablat	equ	0xFF5
 11110                           prodh	equ	0xFF4
 11111                           prodl	equ	0xFF3
 11112                           intcon	equ	0xFF2
 11113                           intcon2	equ	0xFF1
 11114                           intcon3	equ	0xFF0
 11115                           postinc0	equ	0xFEE
 11116                           wreg	equ	0xFE8
 11117                           postdec1	equ	0xFE5
 11118                           fsr1l	equ	0xFE1
 11119                           indf2	equ	0xFDF
 11120                           postinc2	equ	0xFDE
 11121                           postdec2	equ	0xFDD
 11122                           fsr2h	equ	0xFDA
 11123                           fsr2l	equ	0xFD9
 11124                           status	equ	0xFD8
 11125                           
 11126 ;; *************** function _strcpy *****************
 11127 ;; Defined at:
 11128 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 11129 ;; Parameters:    Size  Location     Type
 11130 ;;  to              2    0[BANK0 ] PTR unsigned char 
 11131 ;;		 -> printRTC@month(4), UI@month(4), 
 11132 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 11133 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 11134 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 11135 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 11136 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 11137 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 11138 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 11139 ;;		 -> STR_8(4), 
 11140 ;; Auto vars:     Size  Location     Type
 11141 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 11142 ;;		 -> printRTC@month(4), UI@month(4), 
 11143 ;; Return value:  Size  Location     Type
 11144 ;;                  2    0[BANK0 ] PTR unsigned char 
 11145 ;; Registers used:
 11146 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 11147 ;; Tracked objects:
 11148 ;;		On entry : 0/0
 11149 ;;		On exit  : 0/0
 11150 ;;		Unchanged: 0/0
 11151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11152 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11153 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11155 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11156 ;;Total ram usage:        6 bytes
 11157 ;; Hardware stack levels used:    1
 11158 ;; Hardware stack levels required when called:    7
 11159 ;; This function calls:
 11160 ;;		Nothing
 11161 ;; This function is called by:
 11162 ;;		_UI
 11163 ;;		_printRTC
 11164 ;; This function uses a non-reentrant model
 11165 ;;
 11166                           
 11167                           	psect	text29
 11168  005B8E                     __ptext29:
 11169                           	opt stack 0
 11170  005B8E                     _strcpy:
 11171                           	opt stack 20
 11172                           
 11173                           ;incstack = 0
 11174  005B8E  C080  F084         	movff	strcpy@to,strcpy@cp
 11175  005B92  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
 11176  005B96  D006               	goto	l7112
 11177  005B98                     l7110:
 11178  005B98  0100               	movlb	0	; () banked
 11179  005B9A  4B84               	infsnz	strcpy@cp& (0+255),f,b
 11180  005B9C  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
 11181  005B9E  0100               	movlb	0	; () banked
 11182  005BA0  4B82               	infsnz	strcpy@from& (0+255),f,b
 11183  005BA2  2B83               	incf	(strcpy@from+1)& (0+255),f,b
 11184  005BA4                     l7112:
 11185  005BA4  C082  FFF6         	movff	strcpy@from,tblptrl
 11186  005BA8  C083  FFF7         	movff	strcpy@from+1,tblptrh
 11187  005BAC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11188  005BAC  6AF8               	clrf	tblptru,c
 11189  005BAE                     	endif
 11190  005BAE                     	if	0	;tblptru may be non-zero
 11191  005BAE                     	endif
 11192  005BAE  C084  FFD9         	movff	strcpy@cp,fsr2l
 11193  005BB2  C085  FFDA         	movff	strcpy@cp+1,fsr2h
 11194  005BB6  0008               	tblrd		*
 11195  005BB8  CFF5 FFDF          	movff	tablat,indf2
 11196  005BBC  50DF               	movf	indf2,w,c
 11197  005BBE  B4D8               	btfsc	status,2,c
 11198  005BC0  0012               	return	
 11199  005BC2  D7EA               	goto	l7110
 11200  005BC4                     __end_of_strcpy:
 11201                           	opt stack 0
 11202                           tblptru	equ	0xFF8
 11203                           tblptrh	equ	0xFF7
 11204                           tblptrl	equ	0xFF6
 11205                           tablat	equ	0xFF5
 11206                           prodh	equ	0xFF4
 11207                           prodl	equ	0xFF3
 11208                           intcon	equ	0xFF2
 11209                           intcon2	equ	0xFF1
 11210                           intcon3	equ	0xFF0
 11211                           postinc0	equ	0xFEE
 11212                           wreg	equ	0xFE8
 11213                           postdec1	equ	0xFE5
 11214                           fsr1l	equ	0xFE1
 11215                           indf2	equ	0xFDF
 11216                           postinc2	equ	0xFDE
 11217                           postdec2	equ	0xFDD
 11218                           fsr2h	equ	0xFDA
 11219                           fsr2l	equ	0xFD9
 11220                           status	equ	0xFD8
 11221                           
 11222 ;; *************** function _getRTC *****************
 11223 ;; Defined at:
 11224 ;;		line 44 in file "RTC.c"
 11225 ;; Parameters:    Size  Location     Type
 11226 ;;		None
 11227 ;; Auto vars:     Size  Location     Type
 11228 ;;  i               2    3[BANK0 ] int 
 11229 ;; Return value:  Size  Location     Type
 11230 ;;                  1    wreg      void 
 11231 ;; Registers used:
 11232 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11233 ;; Tracked objects:
 11234 ;;		On entry : 0/0
 11235 ;;		On exit  : 0/0
 11236 ;;		Unchanged: 0/0
 11237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11239 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11241 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11242 ;;Total ram usage:        2 bytes
 11243 ;; Hardware stack levels used:    1
 11244 ;; Hardware stack levels required when called:    9
 11245 ;; This function calls:
 11246 ;;		_I2C_Master_Read
 11247 ;;		_I2C_Master_Start
 11248 ;;		_I2C_Master_Stop
 11249 ;;		_I2C_Master_Write
 11250 ;; This function is called by:
 11251 ;;		_printRTC
 11252 ;;		_initSortTimer
 11253 ;; This function uses a non-reentrant model
 11254 ;;
 11255                           
 11256                           	psect	text30
 11257  005244                     __ptext30:
 11258                           	opt stack 0
 11259  005244                     _getRTC:
 11260                           	opt stack 18
 11261                           
 11262                           ;RTC.c: 48: I2C_Master_Start();
 11263                           
 11264                           ;incstack = 0
 11265  005244  EC8F  F030         	call	_I2C_Master_Start	;wreg free
 11266                           
 11267                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 11268  005248  0E00               	movlw	0
 11269  00524A  0100               	movlb	0	; () banked
 11270  00524C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11271  00524E  0ED0               	movlw	208
 11272  005250  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 11273  005252  EC7D  F030         	call	_I2C_Master_Write	;wreg free
 11274                           
 11275                           ;RTC.c: 50: I2C_Master_Write(0x00);
 11276  005256  0E00               	movlw	0
 11277  005258  0100               	movlb	0	; () banked
 11278  00525A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11279  00525C  0E00               	movlw	0
 11280  00525E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 11281  005260  EC7D  F030         	call	_I2C_Master_Write	;wreg free
 11282                           
 11283                           ;RTC.c: 51: I2C_Master_Stop();
 11284  005264  EC8B  F030         	call	_I2C_Master_Stop	;wreg free
 11285                           
 11286                           ;RTC.c: 54: I2C_Master_Start();
 11287  005268  EC8F  F030         	call	_I2C_Master_Start	;wreg free
 11288                           
 11289                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 11290  00526C  0E00               	movlw	0
 11291  00526E  0100               	movlb	0	; () banked
 11292  005270  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11293  005272  0ED1               	movlw	209
 11294  005274  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 11295  005276  EC7D  F030         	call	_I2C_Master_Write	;wreg free
 11296                           
 11297                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 11298  00527A  0E00               	movlw	0
 11299  00527C  0100               	movlb	0	; () banked
 11300  00527E  6F84               	movwf	(getRTC@i+1)& (0+255),b
 11301  005280  0E00               	movlw	0
 11302  005282  6F83               	movwf	getRTC@i& (0+255),b
 11303  005284                     l7118:
 11304                           
 11305                           ; BSR set to: 0
 11306  005284  0100               	movlb	0	; () banked
 11307  005286  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
 11308  005288  D008               	goto	l7122
 11309  00528A  0100               	movlb	0	; () banked
 11310  00528C  5184               	movf	(getRTC@i+1)& (0+255),w,b
 11311  00528E  E115               	bnz	l7128
 11312  005290  0E06               	movlw	6
 11313  005292  0100               	movlb	0	; () banked
 11314  005294  5D83               	subwf	getRTC@i& (0+255),w,b
 11315  005296  B0D8               	btfsc	status,0,c
 11316  005298  D010               	goto	l7128
 11317  00529A                     l7122:
 11318                           
 11319                           ; BSR set to: 0
 11320                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 11321  00529A  0E24               	movlw	low _time
 11322  00529C  0100               	movlb	0	; () banked
 11323  00529E  2583               	addwf	getRTC@i& (0+255),w,b
 11324  0052A0  6ED9               	movwf	fsr2l,c
 11325  0052A2  0E01               	movlw	high _time
 11326  0052A4  0100               	movlb	0	; () banked
 11327  0052A6  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
 11328  0052A8  6EDA               	movwf	fsr2h,c
 11329  0052AA  0E01               	movlw	1
 11330  0052AC  EC1E  F02F         	call	_I2C_Master_Read
 11331  0052B0  6EDF               	movwf	indf2,c
 11332  0052B2  0100               	movlb	0	; () banked
 11333  0052B4  4B83               	infsnz	getRTC@i& (0+255),f,b
 11334  0052B6  2B84               	incf	(getRTC@i+1)& (0+255),f,b
 11335  0052B8  D7E5               	goto	l7118
 11336  0052BA                     l7128:
 11337                           
 11338                           ; BSR set to: 0
 11339                           ;RTC.c: 58: }
 11340                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 11341  0052BA  0E00               	movlw	0
 11342  0052BC  EC1E  F02F         	call	_I2C_Master_Read
 11343  0052C0  0101               	movlb	1	; () banked
 11344  0052C2  6F2A               	movwf	(_time+6)& (0+255),b
 11345                           
 11346                           ;RTC.c: 60: I2C_Master_Stop();
 11347  0052C4  EC8B  F030         	call	_I2C_Master_Stop	;wreg free
 11348  0052C8  0012               	return		;funcret
 11349  0052CA                     __end_of_getRTC:
 11350                           	opt stack 0
 11351                           tblptru	equ	0xFF8
 11352                           tblptrh	equ	0xFF7
 11353                           tblptrl	equ	0xFF6
 11354                           tablat	equ	0xFF5
 11355                           prodh	equ	0xFF4
 11356                           prodl	equ	0xFF3
 11357                           intcon	equ	0xFF2
 11358                           intcon2	equ	0xFF1
 11359                           intcon3	equ	0xFF0
 11360                           postinc0	equ	0xFEE
 11361                           wreg	equ	0xFE8
 11362                           postdec1	equ	0xFE5
 11363                           fsr1l	equ	0xFE1
 11364                           indf2	equ	0xFDF
 11365                           postinc2	equ	0xFDE
 11366                           postdec2	equ	0xFDD
 11367                           fsr2h	equ	0xFDA
 11368                           fsr2l	equ	0xFD9
 11369                           status	equ	0xFD8
 11370                           
 11371 ;; *************** function _I2C_Master_Write *****************
 11372 ;; Defined at:
 11373 ;;		line 49 in file "I2C.c"
 11374 ;; Parameters:    Size  Location     Type
 11375 ;;  d               2    1[BANK0 ] unsigned int 
 11376 ;; Auto vars:     Size  Location     Type
 11377 ;;		None
 11378 ;; Return value:  Size  Location     Type
 11379 ;;                  1    wreg      void 
 11380 ;; Registers used:
 11381 ;;		wreg, status,2, status,0, cstack
 11382 ;; Tracked objects:
 11383 ;;		On entry : 0/0
 11384 ;;		On exit  : 0/0
 11385 ;;		Unchanged: 0/0
 11386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11387 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11390 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11391 ;;Total ram usage:        2 bytes
 11392 ;; Hardware stack levels used:    1
 11393 ;; Hardware stack levels required when called:    8
 11394 ;; This function calls:
 11395 ;;		_I2C_Master_Wait
 11396 ;; This function is called by:
 11397 ;;		_loadRTC
 11398 ;;		_getRTC
 11399 ;; This function uses a non-reentrant model
 11400 ;;
 11401                           
 11402                           	psect	text31
 11403  0060FA                     __ptext31:
 11404                           	opt stack 0
 11405  0060FA                     _I2C_Master_Write:
 11406                           	opt stack 18
 11407                           
 11408                           ;I2C.c: 51: I2C_Master_Wait();
 11409                           
 11410                           ;incstack = 0
 11411  0060FA  EC4E  F030         	call	_I2C_Master_Wait	;wreg free
 11412                           
 11413                           ;I2C.c: 52: SSPBUF = d;
 11414  0060FE  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 11415  006102  0012               	return		;funcret
 11416  006104                     __end_of_I2C_Master_Write:
 11417                           	opt stack 0
 11418                           tblptru	equ	0xFF8
 11419                           tblptrh	equ	0xFF7
 11420                           tblptrl	equ	0xFF6
 11421                           tablat	equ	0xFF5
 11422                           prodh	equ	0xFF4
 11423                           prodl	equ	0xFF3
 11424                           intcon	equ	0xFF2
 11425                           intcon2	equ	0xFF1
 11426                           intcon3	equ	0xFF0
 11427                           postinc0	equ	0xFEE
 11428                           wreg	equ	0xFE8
 11429                           postdec1	equ	0xFE5
 11430                           fsr1l	equ	0xFE1
 11431                           indf2	equ	0xFDF
 11432                           postinc2	equ	0xFDE
 11433                           postdec2	equ	0xFDD
 11434                           fsr2h	equ	0xFDA
 11435                           fsr2l	equ	0xFD9
 11436                           status	equ	0xFD8
 11437                           
 11438 ;; *************** function _I2C_Master_Stop *****************
 11439 ;; Defined at:
 11440 ;;		line 43 in file "I2C.c"
 11441 ;; Parameters:    Size  Location     Type
 11442 ;;		None
 11443 ;; Auto vars:     Size  Location     Type
 11444 ;;		None
 11445 ;; Return value:  Size  Location     Type
 11446 ;;                  1    wreg      void 
 11447 ;; Registers used:
 11448 ;;		wreg, status,2, status,0, cstack
 11449 ;; Tracked objects:
 11450 ;;		On entry : 0/0
 11451 ;;		On exit  : 0/0
 11452 ;;		Unchanged: 0/0
 11453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11458 ;;Total ram usage:        0 bytes
 11459 ;; Hardware stack levels used:    1
 11460 ;; Hardware stack levels required when called:    8
 11461 ;; This function calls:
 11462 ;;		_I2C_Master_Wait
 11463 ;; This function is called by:
 11464 ;;		_loadRTC
 11465 ;;		_getRTC
 11466 ;; This function uses a non-reentrant model
 11467 ;;
 11468                           
 11469                           	psect	text32
 11470  006116                     __ptext32:
 11471                           	opt stack 0
 11472  006116                     _I2C_Master_Stop:
 11473                           	opt stack 18
 11474                           
 11475                           ;I2C.c: 45: I2C_Master_Wait();
 11476                           
 11477                           ;incstack = 0
 11478  006116  EC4E  F030         	call	_I2C_Master_Wait	;wreg free
 11479                           
 11480                           ;I2C.c: 46: PEN = 1;
 11481  00611A  84C5               	bsf	4037,2,c	;volatile
 11482  00611C  0012               	return		;funcret
 11483  00611E                     __end_of_I2C_Master_Stop:
 11484                           	opt stack 0
 11485                           tblptru	equ	0xFF8
 11486                           tblptrh	equ	0xFF7
 11487                           tblptrl	equ	0xFF6
 11488                           tablat	equ	0xFF5
 11489                           prodh	equ	0xFF4
 11490                           prodl	equ	0xFF3
 11491                           intcon	equ	0xFF2
 11492                           intcon2	equ	0xFF1
 11493                           intcon3	equ	0xFF0
 11494                           postinc0	equ	0xFEE
 11495                           wreg	equ	0xFE8
 11496                           postdec1	equ	0xFE5
 11497                           fsr1l	equ	0xFE1
 11498                           indf2	equ	0xFDF
 11499                           postinc2	equ	0xFDE
 11500                           postdec2	equ	0xFDD
 11501                           fsr2h	equ	0xFDA
 11502                           fsr2l	equ	0xFD9
 11503                           status	equ	0xFD8
 11504                           
 11505 ;; *************** function _I2C_Master_Start *****************
 11506 ;; Defined at:
 11507 ;;		line 31 in file "I2C.c"
 11508 ;; Parameters:    Size  Location     Type
 11509 ;;		None
 11510 ;; Auto vars:     Size  Location     Type
 11511 ;;		None
 11512 ;; Return value:  Size  Location     Type
 11513 ;;                  1    wreg      void 
 11514 ;; Registers used:
 11515 ;;		wreg, status,2, status,0, cstack
 11516 ;; Tracked objects:
 11517 ;;		On entry : 0/0
 11518 ;;		On exit  : 0/0
 11519 ;;		Unchanged: 0/0
 11520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11524 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11525 ;;Total ram usage:        0 bytes
 11526 ;; Hardware stack levels used:    1
 11527 ;; Hardware stack levels required when called:    8
 11528 ;; This function calls:
 11529 ;;		_I2C_Master_Wait
 11530 ;; This function is called by:
 11531 ;;		_loadRTC
 11532 ;;		_getRTC
 11533 ;; This function uses a non-reentrant model
 11534 ;;
 11535                           
 11536                           	psect	text33
 11537  00611E                     __ptext33:
 11538                           	opt stack 0
 11539  00611E                     _I2C_Master_Start:
 11540                           	opt stack 18
 11541                           
 11542                           ;I2C.c: 33: I2C_Master_Wait();
 11543                           
 11544                           ;incstack = 0
 11545  00611E  EC4E  F030         	call	_I2C_Master_Wait	;wreg free
 11546                           
 11547                           ;I2C.c: 34: SEN = 1;
 11548  006122  80C5               	bsf	4037,0,c	;volatile
 11549  006124  0012               	return		;funcret
 11550  006126                     __end_of_I2C_Master_Start:
 11551                           	opt stack 0
 11552                           tblptru	equ	0xFF8
 11553                           tblptrh	equ	0xFF7
 11554                           tblptrl	equ	0xFF6
 11555                           tablat	equ	0xFF5
 11556                           prodh	equ	0xFF4
 11557                           prodl	equ	0xFF3
 11558                           intcon	equ	0xFF2
 11559                           intcon2	equ	0xFF1
 11560                           intcon3	equ	0xFF0
 11561                           postinc0	equ	0xFEE
 11562                           wreg	equ	0xFE8
 11563                           postdec1	equ	0xFE5
 11564                           fsr1l	equ	0xFE1
 11565                           indf2	equ	0xFDF
 11566                           postinc2	equ	0xFDE
 11567                           postdec2	equ	0xFDD
 11568                           fsr2h	equ	0xFDA
 11569                           fsr2l	equ	0xFD9
 11570                           status	equ	0xFD8
 11571                           
 11572 ;; *************** function _I2C_Master_Read *****************
 11573 ;; Defined at:
 11574 ;;		line 55 in file "I2C.c"
 11575 ;; Parameters:    Size  Location     Type
 11576 ;;  a               1    wreg     unsigned char 
 11577 ;; Auto vars:     Size  Location     Type
 11578 ;;  a               1    1[BANK0 ] unsigned char 
 11579 ;;  temp            1    2[BANK0 ] unsigned char 
 11580 ;; Return value:  Size  Location     Type
 11581 ;;                  1    wreg      unsigned char 
 11582 ;; Registers used:
 11583 ;;		wreg, status,2, status,0, cstack
 11584 ;; Tracked objects:
 11585 ;;		On entry : 0/0
 11586 ;;		On exit  : 0/0
 11587 ;;		Unchanged: 0/0
 11588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11590 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11592 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11593 ;;Total ram usage:        2 bytes
 11594 ;; Hardware stack levels used:    1
 11595 ;; Hardware stack levels required when called:    8
 11596 ;; This function calls:
 11597 ;;		_I2C_Master_Wait
 11598 ;; This function is called by:
 11599 ;;		_getRTC
 11600 ;; This function uses a non-reentrant model
 11601 ;;
 11602                           
 11603                           	psect	text34
 11604  005E3C                     __ptext34:
 11605                           	opt stack 0
 11606  005E3C                     _I2C_Master_Read:
 11607                           	opt stack 18
 11608                           
 11609                           ;incstack = 0
 11610                           ;I2C_Master_Read@a stored from wreg
 11611  005E3C  0100               	movlb	0	; () banked
 11612  005E3E  6F81               	movwf	I2C_Master_Read@a& (0+255),b
 11613                           
 11614                           ;I2C.c: 57: unsigned char temp;
 11615                           ;I2C.c: 58: I2C_Master_Wait();
 11616  005E40  EC4E  F030         	call	_I2C_Master_Wait	;wreg free
 11617                           
 11618                           ;I2C.c: 59: RCEN = 1;
 11619  005E44  86C5               	bsf	4037,3,c	;volatile
 11620                           
 11621                           ;I2C.c: 60: I2C_Master_Wait();
 11622  005E46  EC4E  F030         	call	_I2C_Master_Wait	;wreg free
 11623                           
 11624                           ;I2C.c: 61: temp = SSPBUF;
 11625  005E4A  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
 11626                           
 11627                           ;I2C.c: 62: I2C_Master_Wait();
 11628  005E4E  EC4E  F030         	call	_I2C_Master_Wait	;wreg free
 11629                           
 11630                           ;I2C.c: 63: ACKDT = (a)?0:1;
 11631  005E52  0100               	movlb	0	; () banked
 11632  005E54  5181               	movf	I2C_Master_Read@a& (0+255),w,b
 11633  005E56  0100               	movlb	0	; () banked
 11634  005E58  A4D8               	btfss	status,2,c
 11635  005E5A  D002               	goto	u5440
 11636  005E5C  8AC5               	bsf	4037,5,c	;volatile
 11637  005E5E  D001               	goto	l6796
 11638  005E60                     u5440:
 11639  005E60  9AC5               	bcf	4037,5,c	;volatile
 11640  005E62                     l6796:
 11641                           
 11642                           ;I2C.c: 64: ACKEN = 1;
 11643  005E62  88C5               	bsf	4037,4,c	;volatile
 11644                           
 11645                           ;I2C.c: 65: return temp;
 11646  005E64  0100               	movlb	0	; () banked
 11647  005E66  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
 11648  005E68  0012               	return	
 11649  005E6A                     __end_of_I2C_Master_Read:
 11650                           	opt stack 0
 11651                           tblptru	equ	0xFF8
 11652                           tblptrh	equ	0xFF7
 11653                           tblptrl	equ	0xFF6
 11654                           tablat	equ	0xFF5
 11655                           prodh	equ	0xFF4
 11656                           prodl	equ	0xFF3
 11657                           intcon	equ	0xFF2
 11658                           intcon2	equ	0xFF1
 11659                           intcon3	equ	0xFF0
 11660                           postinc0	equ	0xFEE
 11661                           wreg	equ	0xFE8
 11662                           postdec1	equ	0xFE5
 11663                           fsr1l	equ	0xFE1
 11664                           indf2	equ	0xFDF
 11665                           postinc2	equ	0xFDE
 11666                           postdec2	equ	0xFDD
 11667                           fsr2h	equ	0xFDA
 11668                           fsr2l	equ	0xFD9
 11669                           status	equ	0xFD8
 11670                           
 11671 ;; *************** function _I2C_Master_Wait *****************
 11672 ;; Defined at:
 11673 ;;		line 26 in file "I2C.c"
 11674 ;; Parameters:    Size  Location     Type
 11675 ;;		None
 11676 ;; Auto vars:     Size  Location     Type
 11677 ;;		None
 11678 ;; Return value:  Size  Location     Type
 11679 ;;                  1    wreg      void 
 11680 ;; Registers used:
 11681 ;;		wreg, status,2, status,0
 11682 ;; Tracked objects:
 11683 ;;		On entry : 0/0
 11684 ;;		On exit  : 0/0
 11685 ;;		Unchanged: 0/0
 11686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11689 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11690 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11691 ;;Total ram usage:        1 bytes
 11692 ;; Hardware stack levels used:    1
 11693 ;; Hardware stack levels required when called:    7
 11694 ;; This function calls:
 11695 ;;		Nothing
 11696 ;; This function is called by:
 11697 ;;		_I2C_Master_Start
 11698 ;;		_I2C_Master_Stop
 11699 ;;		_I2C_Master_Write
 11700 ;;		_I2C_Master_Read
 11701 ;;		_I2C_Master_RepeatedStart
 11702 ;; This function uses a non-reentrant model
 11703 ;;
 11704                           
 11705                           	psect	text35
 11706  00609C                     __ptext35:
 11707                           	opt stack 0
 11708  00609C                     _I2C_Master_Wait:
 11709                           	opt stack 18
 11710  00609C                     l78:
 11711  00609C  B4C7               	btfsc	4039,2,c	;volatile
 11712  00609E  D7FE               	goto	l78
 11713  0060A0  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
 11714  0060A4  0E1F               	movlw	31
 11715  0060A6  0100               	movlb	0	; () banked
 11716  0060A8  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
 11717  0060AA  B4D8               	btfsc	status,2,c
 11718  0060AC  0012               	return	
 11719  0060AE  D7F6               	goto	l78
 11720  0060B0                     __end_of_I2C_Master_Wait:
 11721                           	opt stack 0
 11722                           tblptru	equ	0xFF8
 11723                           tblptrh	equ	0xFF7
 11724                           tblptrl	equ	0xFF6
 11725                           tablat	equ	0xFF5
 11726                           prodh	equ	0xFF4
 11727                           prodl	equ	0xFF3
 11728                           intcon	equ	0xFF2
 11729                           intcon2	equ	0xFF1
 11730                           intcon3	equ	0xFF0
 11731                           postinc0	equ	0xFEE
 11732                           wreg	equ	0xFE8
 11733                           postdec1	equ	0xFE5
 11734                           fsr1l	equ	0xFE1
 11735                           indf2	equ	0xFDF
 11736                           postinc2	equ	0xFDE
 11737                           postdec2	equ	0xFDD
 11738                           fsr2h	equ	0xFDA
 11739                           fsr2l	equ	0xFD9
 11740                           status	equ	0xFD8
 11741                           
 11742 ;; *************** function _change_state_to_menu_22 *****************
 11743 ;; Defined at:
 11744 ;;		line 501 in file "UI.c"
 11745 ;; Parameters:    Size  Location     Type
 11746 ;;		None
 11747 ;; Auto vars:     Size  Location     Type
 11748 ;;		None
 11749 ;; Return value:  Size  Location     Type
 11750 ;;                  1    wreg      void 
 11751 ;; Registers used:
 11752 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11753 ;; Tracked objects:
 11754 ;;		On entry : 0/0
 11755 ;;		On exit  : 0/0
 11756 ;;		Unchanged: 0/0
 11757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11761 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11762 ;;Total ram usage:        0 bytes
 11763 ;; Hardware stack levels used:    1
 11764 ;; Hardware stack levels required when called:   10
 11765 ;; This function calls:
 11766 ;;		_lcdInst
 11767 ;;		_printf
 11768 ;; This function is called by:
 11769 ;;		_UI
 11770 ;; This function uses a non-reentrant model
 11771 ;;
 11772                           
 11773                           	psect	text36
 11774  005B1E                     __ptext36:
 11775                           	opt stack 0
 11776  005B1E                     _change_state_to_menu_22:
 11777                           	opt stack 19
 11778                           
 11779                           ;UI.c: 502: cur_state = 22;
 11780                           
 11781                           ; BSR set to: 0
 11782                           ;incstack = 0
 11783  005B1E  0E00               	movlw	0
 11784  005B20  0100               	movlb	0	; () banked
 11785  005B22  6FE9               	movwf	(_cur_state+1)& (0+255),b
 11786  005B24  0E16               	movlw	22
 11787  005B26  6FE8               	movwf	_cur_state& (0+255),b
 11788                           
 11789                           ; BSR set to: 0
 11790                           ;UI.c: 504: lcdInst(0b10000000);;
 11791  005B28  0E80               	movlw	128
 11792  005B2A  EC69  F030         	call	_lcdInst
 11793                           
 11794                           ;UI.c: 505: printf("2. SORT        <");
 11795  005B2E  0ED3               	movlw	low STR_34
 11796  005B30  0100               	movlb	0	; () banked
 11797  005B32  6F8E               	movwf	printf@f& (0+255),b
 11798  005B34  0EFD               	movlw	high STR_34
 11799  005B36  0100               	movlb	0	; () banked
 11800  005B38  6F8F               	movwf	(printf@f+1)& (0+255),b
 11801  005B3A  ECE7  F00E         	call	_printf	;wreg free
 11802                           
 11803                           ;UI.c: 506: lcdInst(0b11000000);;
 11804  005B3E  0EC0               	movlw	192
 11805  005B40  EC69  F030         	call	_lcdInst
 11806                           
 11807                           ;UI.c: 507: printf("3. LOGS         ");
 11808  005B44  0E18               	movlw	low STR_36
 11809  005B46  0100               	movlb	0	; () banked
 11810  005B48  6F8E               	movwf	printf@f& (0+255),b
 11811  005B4A  0EFD               	movlw	high STR_36
 11812  005B4C  0100               	movlb	0	; () banked
 11813  005B4E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11814  005B50  ECE7  F00E         	call	_printf	;wreg free
 11815  005B54  0012               	return		;funcret
 11816  005B56                     __end_of_change_state_to_menu_22:
 11817                           	opt stack 0
 11818                           tblptru	equ	0xFF8
 11819                           tblptrh	equ	0xFF7
 11820                           tblptrl	equ	0xFF6
 11821                           tablat	equ	0xFF5
 11822                           prodh	equ	0xFF4
 11823                           prodl	equ	0xFF3
 11824                           intcon	equ	0xFF2
 11825                           intcon2	equ	0xFF1
 11826                           intcon3	equ	0xFF0
 11827                           postinc0	equ	0xFEE
 11828                           wreg	equ	0xFE8
 11829                           postdec1	equ	0xFE5
 11830                           fsr1l	equ	0xFE1
 11831                           indf2	equ	0xFDF
 11832                           postinc2	equ	0xFDE
 11833                           postdec2	equ	0xFDD
 11834                           fsr2h	equ	0xFDA
 11835                           fsr2l	equ	0xFD9
 11836                           status	equ	0xFD8
 11837                           
 11838 ;; *************** function _change_state_to_menu_12 *****************
 11839 ;; Defined at:
 11840 ;;		line 493 in file "UI.c"
 11841 ;; Parameters:    Size  Location     Type
 11842 ;;		None
 11843 ;; Auto vars:     Size  Location     Type
 11844 ;;		None
 11845 ;; Return value:  Size  Location     Type
 11846 ;;                  1    wreg      void 
 11847 ;; Registers used:
 11848 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11849 ;; Tracked objects:
 11850 ;;		On entry : 0/0
 11851 ;;		On exit  : 0/0
 11852 ;;		Unchanged: 0/0
 11853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11857 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11858 ;;Total ram usage:        0 bytes
 11859 ;; Hardware stack levels used:    1
 11860 ;; Hardware stack levels required when called:   10
 11861 ;; This function calls:
 11862 ;;		_lcdInst
 11863 ;;		_printf
 11864 ;; This function is called by:
 11865 ;;		_UI
 11866 ;; This function uses a non-reentrant model
 11867 ;;
 11868                           
 11869                           	psect	text37
 11870  005B56                     __ptext37:
 11871                           	opt stack 0
 11872  005B56                     _change_state_to_menu_12:
 11873                           	opt stack 19
 11874                           
 11875                           ;UI.c: 494: cur_state = 12;
 11876                           
 11877                           ;incstack = 0
 11878  005B56  0E00               	movlw	0
 11879  005B58  0100               	movlb	0	; () banked
 11880  005B5A  6FE9               	movwf	(_cur_state+1)& (0+255),b
 11881  005B5C  0E0C               	movlw	12
 11882  005B5E  6FE8               	movwf	_cur_state& (0+255),b
 11883                           
 11884                           ; BSR set to: 0
 11885                           ;UI.c: 496: lcdInst(0b10000000);;
 11886  005B60  0E80               	movlw	128
 11887  005B62  EC69  F030         	call	_lcdInst
 11888                           
 11889                           ;UI.c: 497: printf("1. DATE/TIME    ");
 11890  005B66  0E3A               	movlw	low STR_33
 11891  005B68  0100               	movlb	0	; () banked
 11892  005B6A  6F8E               	movwf	printf@f& (0+255),b
 11893  005B6C  0EFD               	movlw	high STR_33
 11894  005B6E  0100               	movlb	0	; () banked
 11895  005B70  6F8F               	movwf	(printf@f+1)& (0+255),b
 11896  005B72  ECE7  F00E         	call	_printf	;wreg free
 11897                           
 11898                           ;UI.c: 498: lcdInst(0b11000000);;
 11899  005B76  0EC0               	movlw	192
 11900  005B78  EC69  F030         	call	_lcdInst
 11901                           
 11902                           ;UI.c: 499: printf("2. SORT        <");
 11903  005B7C  0ED3               	movlw	low STR_34
 11904  005B7E  0100               	movlb	0	; () banked
 11905  005B80  6F8E               	movwf	printf@f& (0+255),b
 11906  005B82  0EFD               	movlw	high STR_34
 11907  005B84  0100               	movlb	0	; () banked
 11908  005B86  6F8F               	movwf	(printf@f+1)& (0+255),b
 11909  005B88  ECE7  F00E         	call	_printf	;wreg free
 11910  005B8C  0012               	return		;funcret
 11911  005B8E                     __end_of_change_state_to_menu_12:
 11912                           	opt stack 0
 11913                           tblptru	equ	0xFF8
 11914                           tblptrh	equ	0xFF7
 11915                           tblptrl	equ	0xFF6
 11916                           tablat	equ	0xFF5
 11917                           prodh	equ	0xFF4
 11918                           prodl	equ	0xFF3
 11919                           intcon	equ	0xFF2
 11920                           intcon2	equ	0xFF1
 11921                           intcon3	equ	0xFF0
 11922                           postinc0	equ	0xFEE
 11923                           wreg	equ	0xFE8
 11924                           postdec1	equ	0xFE5
 11925                           fsr1l	equ	0xFE1
 11926                           indf2	equ	0xFDF
 11927                           postinc2	equ	0xFDE
 11928                           postdec2	equ	0xFDD
 11929                           fsr2h	equ	0xFDA
 11930                           fsr2l	equ	0xFD9
 11931                           status	equ	0xFD8
 11932                           
 11933 ;; *************** function ___awmod *****************
 11934 ;; Defined at:
 11935 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 11936 ;; Parameters:    Size  Location     Type
 11937 ;;  dividend        2    0[BANK0 ] int 
 11938 ;;  divisor         2    2[BANK0 ] int 
 11939 ;; Auto vars:     Size  Location     Type
 11940 ;;  sign            1    5[BANK0 ] unsigned char 
 11941 ;;  counter         1    4[BANK0 ] unsigned char 
 11942 ;; Return value:  Size  Location     Type
 11943 ;;                  2    0[BANK0 ] int 
 11944 ;; Registers used:
 11945 ;;		wreg, status,2, status,0
 11946 ;; Tracked objects:
 11947 ;;		On entry : 0/0
 11948 ;;		On exit  : 0/0
 11949 ;;		Unchanged: 0/0
 11950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11951 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11952 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11954 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11955 ;;Total ram usage:        6 bytes
 11956 ;; Hardware stack levels used:    1
 11957 ;; Hardware stack levels required when called:    7
 11958 ;; This function calls:
 11959 ;;		Nothing
 11960 ;; This function is called by:
 11961 ;;		_UI
 11962 ;; This function uses a non-reentrant model
 11963 ;;
 11964                           
 11965                           	psect	text38
 11966  00507E                     __ptext38:
 11967                           	opt stack 0
 11968  00507E                     ___awmod:
 11969                           	opt stack 22
 11970                           
 11971                           ;incstack = 0
 11972  00507E  0E00               	movlw	0
 11973  005080  0100               	movlb	0	; () banked
 11974  005082  6F85               	movwf	___awmod@sign& (0+255),b
 11975                           
 11976                           ; BSR set to: 0
 11977  005084  0100               	movlb	0	; () banked
 11978  005086  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 11979  005088  D008               	goto	l9578
 11980                           
 11981                           ; BSR set to: 0
 11982  00508A  0100               	movlb	0	; () banked
 11983  00508C  6D80               	negf	___awmod@dividend& (0+255),b
 11984  00508E  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11985  005090  B0D8               	btfsc	status,0,c
 11986  005092  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11987                           
 11988                           ; BSR set to: 0
 11989  005094  0E01               	movlw	1
 11990  005096  0100               	movlb	0	; () banked
 11991  005098  6F85               	movwf	___awmod@sign& (0+255),b
 11992  00509A                     l9578:
 11993                           
 11994                           ; BSR set to: 0
 11995  00509A  0100               	movlb	0	; () banked
 11996  00509C  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11997  00509E  D005               	goto	l9582
 11998                           
 11999                           ; BSR set to: 0
 12000  0050A0  0100               	movlb	0	; () banked
 12001  0050A2  6D82               	negf	___awmod@divisor& (0+255),b
 12002  0050A4  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 12003  0050A6  B0D8               	btfsc	status,0,c
 12004  0050A8  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 12005  0050AA                     l9582:
 12006                           
 12007                           ; BSR set to: 0
 12008  0050AA  0100               	movlb	0	; () banked
 12009  0050AC  5182               	movf	___awmod@divisor& (0+255),w,b
 12010  0050AE  0100               	movlb	0	; () banked
 12011  0050B0  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 12012  0050B2  B4D8               	btfsc	status,2,c
 12013  0050B4  D026               	goto	l9598
 12014                           
 12015                           ; BSR set to: 0
 12016  0050B6  0E01               	movlw	1
 12017  0050B8  0100               	movlb	0	; () banked
 12018  0050BA  6F84               	movwf	___awmod@counter& (0+255),b
 12019  0050BC  D006               	goto	l9588
 12020  0050BE                     l9586:
 12021                           
 12022                           ; BSR set to: 0
 12023  0050BE  0100               	movlb	0	; () banked
 12024  0050C0  90D8               	bcf	status,0,c
 12025  0050C2  3782               	rlcf	___awmod@divisor& (0+255),f,b
 12026  0050C4  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 12027  0050C6  0100               	movlb	0	; () banked
 12028  0050C8  2B84               	incf	___awmod@counter& (0+255),f,b
 12029  0050CA                     l9588:
 12030                           
 12031                           ; BSR set to: 0
 12032  0050CA  0100               	movlb	0	; () banked
 12033  0050CC  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 12034  0050CE  D7F7               	goto	l9586
 12035  0050D0                     l9590:
 12036                           
 12037                           ; BSR set to: 0
 12038  0050D0  0100               	movlb	0	; () banked
 12039  0050D2  5182               	movf	___awmod@divisor& (0+255),w,b
 12040  0050D4  0100               	movlb	0	; () banked
 12041  0050D6  5D80               	subwf	___awmod@dividend& (0+255),w,b
 12042  0050D8  0100               	movlb	0	; () banked
 12043  0050DA  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 12044  0050DC  0100               	movlb	0	; () banked
 12045  0050DE  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 12046  0050E0  A0D8               	btfss	status,0,c
 12047  0050E2  D008               	goto	l9594
 12048                           
 12049                           ; BSR set to: 0
 12050  0050E4  0100               	movlb	0	; () banked
 12051  0050E6  5182               	movf	___awmod@divisor& (0+255),w,b
 12052  0050E8  0100               	movlb	0	; () banked
 12053  0050EA  5F80               	subwf	___awmod@dividend& (0+255),f,b
 12054  0050EC  0100               	movlb	0	; () banked
 12055  0050EE  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 12056  0050F0  0100               	movlb	0	; () banked
 12057  0050F2  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 12058  0050F4                     l9594:
 12059                           
 12060                           ; BSR set to: 0
 12061  0050F4  0100               	movlb	0	; () banked
 12062  0050F6  90D8               	bcf	status,0,c
 12063  0050F8  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 12064  0050FA  3382               	rrcf	___awmod@divisor& (0+255),f,b
 12065                           
 12066                           ; BSR set to: 0
 12067  0050FC  0100               	movlb	0	; () banked
 12068  0050FE  2F84               	decfsz	___awmod@counter& (0+255),f,b
 12069  005100  D7E7               	goto	l9590
 12070  005102                     l9598:
 12071                           
 12072                           ; BSR set to: 0
 12073  005102  0100               	movlb	0	; () banked
 12074  005104  5185               	movf	___awmod@sign& (0+255),w,b
 12075  005106  0100               	movlb	0	; () banked
 12076  005108  B4D8               	btfsc	status,2,c
 12077  00510A  D005               	goto	l9602
 12078                           
 12079                           ; BSR set to: 0
 12080  00510C  0100               	movlb	0	; () banked
 12081  00510E  6D80               	negf	___awmod@dividend& (0+255),b
 12082  005110  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 12083  005112  B0D8               	btfsc	status,0,c
 12084  005114  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 12085  005116                     l9602:
 12086                           
 12087                           ; BSR set to: 0
 12088  005116  C080  F080         	movff	___awmod@dividend,?___awmod
 12089  00511A  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 12090  00511E  0012               	return	
 12091  005120                     __end_of___awmod:
 12092                           	opt stack 0
 12093                           tblptru	equ	0xFF8
 12094                           tblptrh	equ	0xFF7
 12095                           tblptrl	equ	0xFF6
 12096                           tablat	equ	0xFF5
 12097                           prodh	equ	0xFF4
 12098                           prodl	equ	0xFF3
 12099                           intcon	equ	0xFF2
 12100                           intcon2	equ	0xFF1
 12101                           intcon3	equ	0xFF0
 12102                           postinc0	equ	0xFEE
 12103                           wreg	equ	0xFE8
 12104                           postdec1	equ	0xFE5
 12105                           fsr1l	equ	0xFE1
 12106                           indf2	equ	0xFDF
 12107                           postinc2	equ	0xFDE
 12108                           postdec2	equ	0xFDD
 12109                           fsr2h	equ	0xFDA
 12110                           fsr2l	equ	0xFD9
 12111                           status	equ	0xFD8
 12112                           
 12113 ;; *************** function ___awdiv *****************
 12114 ;; Defined at:
 12115 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 12116 ;; Parameters:    Size  Location     Type
 12117 ;;  dividend        2    6[BANK0 ] int 
 12118 ;;  divisor         2    8[BANK0 ] int 
 12119 ;; Auto vars:     Size  Location     Type
 12120 ;;  quotient        2   12[BANK0 ] int 
 12121 ;;  sign            1   11[BANK0 ] unsigned char 
 12122 ;;  counter         1   10[BANK0 ] unsigned char 
 12123 ;; Return value:  Size  Location     Type
 12124 ;;                  2    6[BANK0 ] int 
 12125 ;; Registers used:
 12126 ;;		wreg, status,2, status,0
 12127 ;; Tracked objects:
 12128 ;;		On entry : 0/0
 12129 ;;		On exit  : 0/0
 12130 ;;		Unchanged: 0/0
 12131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12132 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12133 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12135 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12136 ;;Total ram usage:        8 bytes
 12137 ;; Hardware stack levels used:    1
 12138 ;; Hardware stack levels required when called:    7
 12139 ;; This function calls:
 12140 ;;		Nothing
 12141 ;; This function is called by:
 12142 ;;		_UI
 12143 ;;		_ID
 12144 ;; This function uses a non-reentrant model
 12145 ;;
 12146                           
 12147                           	psect	text39
 12148  004E5A                     __ptext39:
 12149                           	opt stack 0
 12150  004E5A                     ___awdiv:
 12151                           	opt stack 21
 12152                           
 12153                           ; BSR set to: 0
 12154                           ;incstack = 0
 12155  004E5A  0E00               	movlw	0
 12156  004E5C  0100               	movlb	0	; () banked
 12157  004E5E  6F8B               	movwf	___awdiv@sign& (0+255),b
 12158                           
 12159                           ; BSR set to: 0
 12160  004E60  0100               	movlb	0	; () banked
 12161  004E62  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 12162  004E64  D008               	goto	l7734
 12163                           
 12164                           ; BSR set to: 0
 12165  004E66  0100               	movlb	0	; () banked
 12166  004E68  6D88               	negf	___awdiv@divisor& (0+255),b
 12167  004E6A  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 12168  004E6C  B0D8               	btfsc	status,0,c
 12169  004E6E  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 12170                           
 12171                           ; BSR set to: 0
 12172  004E70  0E01               	movlw	1
 12173  004E72  0100               	movlb	0	; () banked
 12174  004E74  6F8B               	movwf	___awdiv@sign& (0+255),b
 12175  004E76                     l7734:
 12176                           
 12177                           ; BSR set to: 0
 12178  004E76  0100               	movlb	0	; () banked
 12179  004E78  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 12180  004E7A  D008               	goto	l7740
 12181                           
 12182                           ; BSR set to: 0
 12183  004E7C  0100               	movlb	0	; () banked
 12184  004E7E  6D86               	negf	___awdiv@dividend& (0+255),b
 12185  004E80  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 12186  004E82  B0D8               	btfsc	status,0,c
 12187  004E84  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 12188                           
 12189                           ; BSR set to: 0
 12190  004E86  0E01               	movlw	1
 12191  004E88  0100               	movlb	0	; () banked
 12192  004E8A  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 12193  004E8C                     l7740:
 12194                           
 12195                           ; BSR set to: 0
 12196  004E8C  0E00               	movlw	0
 12197  004E8E  0100               	movlb	0	; () banked
 12198  004E90  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 12199  004E92  0E00               	movlw	0
 12200  004E94  6F8C               	movwf	___awdiv@quotient& (0+255),b
 12201                           
 12202                           ; BSR set to: 0
 12203  004E96  0100               	movlb	0	; () banked
 12204  004E98  5188               	movf	___awdiv@divisor& (0+255),w,b
 12205  004E9A  0100               	movlb	0	; () banked
 12206  004E9C  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 12207  004E9E  B4D8               	btfsc	status,2,c
 12208  004EA0  D02C               	goto	l7762
 12209                           
 12210                           ; BSR set to: 0
 12211  004EA2  0E01               	movlw	1
 12212  004EA4  0100               	movlb	0	; () banked
 12213  004EA6  6F8A               	movwf	___awdiv@counter& (0+255),b
 12214  004EA8  D006               	goto	l7748
 12215  004EAA                     l7746:
 12216                           
 12217                           ; BSR set to: 0
 12218  004EAA  0100               	movlb	0	; () banked
 12219  004EAC  90D8               	bcf	status,0,c
 12220  004EAE  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 12221  004EB0  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 12222  004EB2  0100               	movlb	0	; () banked
 12223  004EB4  2B8A               	incf	___awdiv@counter& (0+255),f,b
 12224  004EB6                     l7748:
 12225                           
 12226                           ; BSR set to: 0
 12227  004EB6  0100               	movlb	0	; () banked
 12228  004EB8  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 12229  004EBA  D7F7               	goto	l7746
 12230  004EBC                     l7750:
 12231                           
 12232                           ; BSR set to: 0
 12233  004EBC  0100               	movlb	0	; () banked
 12234  004EBE  90D8               	bcf	status,0,c
 12235  004EC0  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 12236  004EC2  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 12237                           
 12238                           ; BSR set to: 0
 12239  004EC4  0100               	movlb	0	; () banked
 12240  004EC6  5188               	movf	___awdiv@divisor& (0+255),w,b
 12241  004EC8  0100               	movlb	0	; () banked
 12242  004ECA  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 12243  004ECC  0100               	movlb	0	; () banked
 12244  004ECE  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 12245  004ED0  0100               	movlb	0	; () banked
 12246  004ED2  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 12247  004ED4  A0D8               	btfss	status,0,c
 12248  004ED6  D00A               	goto	l7758
 12249                           
 12250                           ; BSR set to: 0
 12251  004ED8  0100               	movlb	0	; () banked
 12252  004EDA  5188               	movf	___awdiv@divisor& (0+255),w,b
 12253  004EDC  0100               	movlb	0	; () banked
 12254  004EDE  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 12255  004EE0  0100               	movlb	0	; () banked
 12256  004EE2  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 12257  004EE4  0100               	movlb	0	; () banked
 12258  004EE6  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 12259                           
 12260                           ; BSR set to: 0
 12261  004EE8  0100               	movlb	0	; () banked
 12262  004EEA  818C               	bsf	___awdiv@quotient& (0+255),0,b
 12263  004EEC                     l7758:
 12264                           
 12265                           ; BSR set to: 0
 12266  004EEC  0100               	movlb	0	; () banked
 12267  004EEE  90D8               	bcf	status,0,c
 12268  004EF0  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 12269  004EF2  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 12270                           
 12271                           ; BSR set to: 0
 12272  004EF4  0100               	movlb	0	; () banked
 12273  004EF6  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 12274  004EF8  D7E1               	goto	l7750
 12275  004EFA                     l7762:
 12276                           
 12277                           ; BSR set to: 0
 12278  004EFA  0100               	movlb	0	; () banked
 12279  004EFC  518B               	movf	___awdiv@sign& (0+255),w,b
 12280  004EFE  0100               	movlb	0	; () banked
 12281  004F00  B4D8               	btfsc	status,2,c
 12282  004F02  D005               	goto	l7766
 12283                           
 12284                           ; BSR set to: 0
 12285  004F04  0100               	movlb	0	; () banked
 12286  004F06  6D8C               	negf	___awdiv@quotient& (0+255),b
 12287  004F08  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 12288  004F0A  B0D8               	btfsc	status,0,c
 12289  004F0C  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 12290  004F0E                     l7766:
 12291                           
 12292                           ; BSR set to: 0
 12293  004F0E  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 12294  004F12  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 12295  004F16  0012               	return	
 12296  004F18                     __end_of___awdiv:
 12297                           	opt stack 0
 12298                           tblptru	equ	0xFF8
 12299                           tblptrh	equ	0xFF7
 12300                           tblptrl	equ	0xFF6
 12301                           tablat	equ	0xFF5
 12302                           prodh	equ	0xFF4
 12303                           prodl	equ	0xFF3
 12304                           intcon	equ	0xFF2
 12305                           intcon2	equ	0xFF1
 12306                           intcon3	equ	0xFF0
 12307                           postinc0	equ	0xFEE
 12308                           wreg	equ	0xFE8
 12309                           postdec1	equ	0xFE5
 12310                           fsr1l	equ	0xFE1
 12311                           indf2	equ	0xFDF
 12312                           postinc2	equ	0xFDE
 12313                           postdec2	equ	0xFDD
 12314                           fsr2h	equ	0xFDA
 12315                           fsr2l	equ	0xFD9
 12316                           status	equ	0xFD8
 12317                           
 12318 ;; *************** function _Test *****************
 12319 ;; Defined at:
 12320 ;;		line 30 in file "Test.c"
 12321 ;; Parameters:    Size  Location     Type
 12322 ;;		None
 12323 ;; Auto vars:     Size  Location     Type
 12324 ;;		None
 12325 ;; Return value:  Size  Location     Type
 12326 ;;                  1    wreg      void 
 12327 ;; Registers used:
 12328 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12329 ;; Tracked objects:
 12330 ;;		On entry : 0/0
 12331 ;;		On exit  : 0/0
 12332 ;;		Unchanged: 0/0
 12333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12336 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12337 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12338 ;;Total ram usage:        2 bytes
 12339 ;; Hardware stack levels used:    1
 12340 ;; Hardware stack levels required when called:   11
 12341 ;; This function calls:
 12342 ;;		_BlockerTest
 12343 ;;		_BothServos
 12344 ;;		_PlatformTest
 12345 ;;		_PortTestDC
 12346 ;;		_PortTestPusher
 12347 ;;		_SpeedTest
 12348 ;;		_actuatorTest
 12349 ;;		_algorithmTest
 12350 ;;		_arm
 12351 ;;		_lcdInst
 12352 ;;		_printf
 12353 ;;		_sensorTest
 12354 ;; This function is called by:
 12355 ;;		_main
 12356 ;; This function uses a non-reentrant model
 12357 ;;
 12358                           
 12359                           	psect	text40
 12360  00467A                     __ptext40:
 12361                           	opt stack 0
 12362  00467A                     _Test:
 12363                           	opt stack 19
 12364                           
 12365                           ;Test.c: 32: while(machine_state == Testing_state){
 12366                           
 12367                           ; BSR set to: 0
 12368                           ;incstack = 0
 12369  00467A  D07C               	goto	l10356
 12370  00467C                     l10316:
 12371                           
 12372                           ;Test.c: 33: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 12373  00467C  0E01               	movlw	1
 12374  00467E  EC69  F030         	call	_lcdInst
 12375  004682  0E68               	movlw	104
 12376  004684  0100               	movlb	0	; () banked
 12377  004686  6FC6               	movwf	??_Test& (0+255),b
 12378  004688  0EE4               	movlw	228
 12379  00468A                     u11457:
 12380  00468A  2EE8               	decfsz	wreg,f,c
 12381  00468C  D7FE               	bra	u11457
 12382  00468E  2FC6               	decfsz	??_Test& (0+255),f,b
 12383  004690  D7FC               	bra	u11457
 12384  004692  F000               	nop	
 12385  004694  0E80               	movlw	128
 12386  004696  EC69  F030         	call	_lcdInst
 12387                           
 12388                           ;Test.c: 34: printf("2.SNR|4.HI|5.MED");
 12389  00469A  0E90               	movlw	low STR_68
 12390  00469C  0100               	movlb	0	; () banked
 12391  00469E  6F8E               	movwf	printf@f& (0+255),b
 12392  0046A0  0EFC               	movlw	high STR_68
 12393  0046A2  0100               	movlb	0	; () banked
 12394  0046A4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12395  0046A6  ECE7  F00E         	call	_printf	;wreg free
 12396                           
 12397                           ;Test.c: 35: lcdInst(0b11000000);;
 12398  0046AA  0EC0               	movlw	192
 12399  0046AC  EC69  F030         	call	_lcdInst
 12400                           
 12401                           ;Test.c: 36: printf("B.PLA|8.SV|9.BLK");
 12402  0046B0  0EA1               	movlw	low STR_69
 12403  0046B2  0100               	movlb	0	; () banked
 12404  0046B4  6F8E               	movwf	printf@f& (0+255),b
 12405  0046B6  0EFC               	movlw	high STR_69
 12406  0046B8  0100               	movlb	0	; () banked
 12407  0046BA  6F8F               	movwf	(printf@f+1)& (0+255),b
 12408  0046BC  ECE7  F00E         	call	_printf	;wreg free
 12409  0046C0                     l1278:
 12410  0046C0  A281               	btfss	3969,1,c	;volatile
 12411  0046C2  D7FE               	goto	l1278
 12412                           
 12413                           ;Test.c: 38: var = PORTB >> 4;
 12414  0046C4  CF81 F0C6          	movff	3969,??_Test	;volatile
 12415  0046C8  0100               	movlb	0	; () banked
 12416  0046CA  3BC6               	swapf	??_Test& (0+255),f,b
 12417  0046CC  0E0F               	movlw	15
 12418  0046CE  17C6               	andwf	??_Test& (0+255),f,b
 12419  0046D0  0100               	movlb	0	; () banked
 12420  0046D2  51C6               	movf	??_Test& (0+255),w,b
 12421  0046D4  0101               	movlb	1	; () banked
 12422  0046D6  6F4D               	movwf	_var& (0+255),b
 12423  0046D8  6B4E               	clrf	(_var+1)& (0+255),b
 12424                           
 12425                           ; BSR set to: 1
 12426                           ;Test.c: 39: var++;
 12427  0046DA  0101               	movlb	1	; () banked
 12428  0046DC  4B4D               	infsnz	_var& (0+255),f,b
 12429  0046DE  2B4E               	incf	(_var+1)& (0+255),f,b
 12430  0046E0                     l1281:
 12431  0046E0  A281               	btfss	3969,1,c	;volatile
 12432  0046E2  D01F               	goto	l10354
 12433  0046E4  D7FD               	goto	l1281
 12434  0046E6                     l10332:
 12435                           
 12436                           ;Test.c: 43: algorithmTest();
 12437  0046E6  EC8F  F025         	call	_algorithmTest	;wreg free
 12438                           
 12439                           ;Test.c: 44: break;
 12440  0046EA  D044               	goto	l10356
 12441  0046EC                     l10334:
 12442                           
 12443                           ;Test.c: 46: sensorTest();
 12444  0046EC  ECFA  F012         	call	_sensorTest	;wreg free
 12445                           
 12446                           ;Test.c: 47: break;
 12447  0046F0  D041               	goto	l10356
 12448  0046F2                     l10336:
 12449                           
 12450                           ;Test.c: 49: actuatorTest();
 12451  0046F2  EC6D  F004         	call	_actuatorTest	;wreg free
 12452                           
 12453                           ;Test.c: 50: break;
 12454  0046F6  D03E               	goto	l10356
 12455  0046F8                     l10338:
 12456                           
 12457                           ;Test.c: 52: arm();
 12458  0046F8  ECC0  F023         	call	_arm	;wreg free
 12459                           
 12460                           ;Test.c: 53: break;
 12461  0046FC  D03B               	goto	l10356
 12462  0046FE                     l10340:
 12463                           
 12464                           ;Test.c: 55: PortTestDC();
 12465  0046FE  ECFA  F025         	call	_PortTestDC	;wreg free
 12466                           
 12467                           ;Test.c: 56: break;
 12468  004702  D038               	goto	l10356
 12469  004704                     l10342:
 12470                           
 12471                           ;Test.c: 58: SpeedTest();
 12472  004704  ECA8  F029         	call	_SpeedTest	;wreg free
 12473                           
 12474                           ;Test.c: 59: break;
 12475  004708  D035               	goto	l10356
 12476  00470A                     l10344:
 12477                           
 12478                           ;Test.c: 61: PortTestPusher();
 12479  00470A  EC15  F02C         	call	_PortTestPusher	;wreg free
 12480                           
 12481                           ;Test.c: 62: break;
 12482  00470E  D032               	goto	l10356
 12483  004710                     l10346:
 12484                           
 12485                           ;Test.c: 64: PlatformTest();
 12486  004710  EC6F  F018         	call	_PlatformTest	;wreg free
 12487                           
 12488                           ;Test.c: 65: break;
 12489  004714  D02F               	goto	l10356
 12490  004716                     l10348:
 12491                           
 12492                           ;Test.c: 67: BothServos();
 12493  004716  EC03  F011         	call	_BothServos	;wreg free
 12494                           
 12495                           ;Test.c: 68: break;
 12496  00471A  D02C               	goto	l10356
 12497  00471C                     l10350:
 12498                           
 12499                           ;Test.c: 70: BlockerTest();
 12500  00471C  ECA4  F020         	call	_BlockerTest	;wreg free
 12501                           
 12502                           ;Test.c: 74: }
 12503                           
 12504                           ;Test.c: 73: break;
 12505                           
 12506                           ;Test.c: 72: default:
 12507                           
 12508                           ;Test.c: 71: break;
 12509  004720  D029               	goto	l10356
 12510  004722                     l10354:
 12511  004722  C14D  F0C6         	movff	_var,??_Test
 12512  004726  C14E  F0C7         	movff	_var+1,??_Test+1
 12513                           
 12514                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12515                           ; Switch size 1, requested type "space"
 12516                           ; Number of cases is 1, Range of values is 0 to 0
 12517                           ; switch strategies available:
 12518                           ; Name         Instructions Cycles
 12519                           ; simple_byte            4     3 (average)
 12520                           ;	Chosen strategy is simple_byte
 12521  00472A  0100               	movlb	0	; () banked
 12522  00472C  51C7               	movf	(??_Test+1)& (0+255),w,b
 12523  00472E  0A00               	xorlw	0	; case 0
 12524  004730  A4D8               	btfss	status,2,c
 12525  004732  D020               	goto	l10356
 12526                           
 12527                           ; BSR set to: 0
 12528                           ; Switch size 1, requested type "space"
 12529                           ; Number of cases is 10, Range of values is 1 to 11
 12530                           ; switch strategies available:
 12531                           ; Name         Instructions Cycles
 12532                           ; simple_byte           31    16 (average)
 12533                           ;	Chosen strategy is simple_byte
 12534  004734  0100               	movlb	0	; () banked
 12535  004736  51C6               	movf	??_Test& (0+255),w,b
 12536  004738  0A01               	xorlw	1	; case 1
 12537  00473A  B4D8               	btfsc	status,2,c
 12538  00473C  D7D4               	goto	l10332
 12539  00473E  0A03               	xorlw	3	; case 2
 12540  004740  B4D8               	btfsc	status,2,c
 12541  004742  D7D4               	goto	l10334
 12542  004744  0A01               	xorlw	1	; case 3
 12543  004746  B4D8               	btfsc	status,2,c
 12544  004748  D7D4               	goto	l10336
 12545  00474A  0A07               	xorlw	7	; case 4
 12546  00474C  B4D8               	btfsc	status,2,c
 12547  00474E  D7D4               	goto	l10338
 12548  004750  0A01               	xorlw	1	; case 5
 12549  004752  B4D8               	btfsc	status,2,c
 12550  004754  D7D4               	goto	l10340
 12551  004756  0A03               	xorlw	3	; case 6
 12552  004758  B4D8               	btfsc	status,2,c
 12553  00475A  D7D4               	goto	l10342
 12554  00475C  0A01               	xorlw	1	; case 7
 12555  00475E  B4D8               	btfsc	status,2,c
 12556  004760  D7D4               	goto	l10344
 12557  004762  0A0F               	xorlw	15	; case 8
 12558  004764  B4D8               	btfsc	status,2,c
 12559  004766  D7D4               	goto	l10346
 12560  004768  0A02               	xorlw	2	; case 10
 12561  00476A  B4D8               	btfsc	status,2,c
 12562  00476C  D7D4               	goto	l10348
 12563  00476E  0A01               	xorlw	1	; case 11
 12564  004770  B4D8               	btfsc	status,2,c
 12565  004772  D7D4               	goto	l10350
 12566  004774                     l10356:
 12567  004774  0E03               	movlw	3
 12568  004776  0100               	movlb	0	; () banked
 12569  004778  19FC               	xorwf	_machine_state& (0+255),w,b
 12570  00477A  A4D8               	btfss	status,2,c
 12571  00477C  0012               	return	
 12572  00477E  D77E               	goto	l10316
 12573  004780                     __end_of_Test:
 12574                           	opt stack 0
 12575                           tblptru	equ	0xFF8
 12576                           tblptrh	equ	0xFF7
 12577                           tblptrl	equ	0xFF6
 12578                           tablat	equ	0xFF5
 12579                           prodh	equ	0xFF4
 12580                           prodl	equ	0xFF3
 12581                           intcon	equ	0xFF2
 12582                           intcon2	equ	0xFF1
 12583                           intcon3	equ	0xFF0
 12584                           postinc0	equ	0xFEE
 12585                           wreg	equ	0xFE8
 12586                           postdec1	equ	0xFE5
 12587                           fsr1l	equ	0xFE1
 12588                           indf2	equ	0xFDF
 12589                           postinc2	equ	0xFDE
 12590                           postdec2	equ	0xFDD
 12591                           fsr2h	equ	0xFDA
 12592                           fsr2l	equ	0xFD9
 12593                           status	equ	0xFD8
 12594                           
 12595 ;; *************** function _sensorTest *****************
 12596 ;; Defined at:
 12597 ;;		line 122 in file "Test.c"
 12598 ;; Parameters:    Size  Location     Type
 12599 ;;		None
 12600 ;; Auto vars:     Size  Location     Type
 12601 ;;  res             2   47[BANK0 ] int 
 12602 ;;  res             2   45[BANK0 ] int 
 12603 ;; Return value:  Size  Location     Type
 12604 ;;                  1    wreg      void 
 12605 ;; Registers used:
 12606 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12607 ;; Tracked objects:
 12608 ;;		On entry : 0/0
 12609 ;;		On exit  : 0/0
 12610 ;;		Unchanged: 0/0
 12611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12613 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12614 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12615 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12616 ;;Total ram usage:        6 bytes
 12617 ;; Hardware stack levels used:    1
 12618 ;; Hardware stack levels required when called:   10
 12619 ;; This function calls:
 12620 ;;		_lcdInst
 12621 ;;		_printf
 12622 ;;		_readADC
 12623 ;;		_readMAG
 12624 ;; This function is called by:
 12625 ;;		_Test
 12626 ;; This function uses a non-reentrant model
 12627 ;;
 12628                           
 12629                           	psect	text41
 12630  0025F4                     __ptext41:
 12631                           	opt stack 0
 12632  0025F4                     _sensorTest:
 12633                           	opt stack 19
 12634                           
 12635                           ;Test.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12636                           
 12637                           ; BSR set to: 0
 12638                           ;incstack = 0
 12639  0025F4  0E01               	movlw	1
 12640  0025F6  EC69  F030         	call	_lcdInst
 12641  0025FA  0E68               	movlw	104
 12642  0025FC  0100               	movlb	0	; () banked
 12643  0025FE  6FAB               	movwf	??_sensorTest& (0+255),b
 12644  002600  0EE4               	movlw	228
 12645  002602                     u11467:
 12646  002602  2EE8               	decfsz	wreg,f,c
 12647  002604  D7FE               	bra	u11467
 12648  002606  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12649  002608  D7FC               	bra	u11467
 12650  00260A  F000               	nop	
 12651  00260C  0E80               	movlw	128
 12652  00260E  EC69  F030         	call	_lcdInst
 12653                           
 12654                           ;Test.c: 125: printf("SENSORS");
 12655  002612  0EAD               	movlw	low STR_77
 12656  002614  0100               	movlb	0	; () banked
 12657  002616  6F8E               	movwf	printf@f& (0+255),b
 12658  002618  0EFF               	movlw	high STR_77
 12659  00261A  0100               	movlb	0	; () banked
 12660  00261C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12661  00261E  ECE7  F00E         	call	_printf	;wreg free
 12662                           
 12663                           ;Test.c: 126: lcdInst(0b11000000);;
 12664  002622  0EC0               	movlw	192
 12665  002624  EC69  F030         	call	_lcdInst
 12666                           
 12667                           ;Test.c: 127: printf("PUSH TO START");
 12668  002628  0E3A               	movlw	low STR_71
 12669  00262A  0100               	movlb	0	; () banked
 12670  00262C  6F8E               	movwf	printf@f& (0+255),b
 12671  00262E  0EFF               	movlw	high STR_71
 12672  002630  0100               	movlb	0	; () banked
 12673  002632  6F8F               	movwf	(printf@f+1)& (0+255),b
 12674  002634  ECE7  F00E         	call	_printf	;wreg free
 12675                           
 12676                           ;Test.c: 128: _delay((unsigned long)((100)*(32000000/4000.0)));
 12677  002638  0E05               	movlw	5
 12678  00263A  0100               	movlb	0	; () banked
 12679  00263C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12680  00263E  0E0F               	movlw	15
 12681  002640  0100               	movlb	0	; () banked
 12682  002642  6FAB               	movwf	??_sensorTest& (0+255),b
 12683  002644  0EF1               	movlw	241
 12684  002646                     u11477:
 12685  002646  2EE8               	decfsz	wreg,f,c
 12686  002648  D7FE               	bra	u11477
 12687  00264A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12688  00264C  D7FC               	bra	u11477
 12689  00264E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12690  002650  D7FA               	bra	u11477
 12691  002652                     l1310:
 12692  002652  A281               	btfss	3969,1,c	;volatile
 12693  002654  D7FE               	goto	l1310
 12694  002656                     l1313:
 12695  002656  B281               	btfsc	3969,1,c	;volatile
 12696  002658  D7FE               	goto	l1313
 12697                           
 12698                           ;Test.c: 131: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12699  00265A  0E01               	movlw	1
 12700  00265C  EC69  F030         	call	_lcdInst
 12701  002660  0E68               	movlw	104
 12702  002662  0100               	movlb	0	; () banked
 12703  002664  6FAB               	movwf	??_sensorTest& (0+255),b
 12704  002666  0EE4               	movlw	228
 12705  002668                     u11487:
 12706  002668  2EE8               	decfsz	wreg,f,c
 12707  00266A  D7FE               	bra	u11487
 12708  00266C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12709  00266E  D7FC               	bra	u11487
 12710  002670  F000               	nop	
 12711  002672  0E80               	movlw	128
 12712  002674  EC69  F030         	call	_lcdInst
 12713                           
 12714                           ;Test.c: 136: LATCbits.LATC5 = 1;
 12715  002678  8A8B               	bsf	3979,5,c	;volatile
 12716                           
 12717                           ;Test.c: 138: while(PORTBbits.RB1 == 0){
 12718  00267A  D05C               	goto	l8642
 12719  00267C                     l8624:
 12720                           
 12721                           ;Test.c: 139: readADC(0);
 12722  00267C  0E00               	movlw	0
 12723  00267E  EC62  F02F         	call	_readADC
 12724                           
 12725                           ;Test.c: 140: int res = ADRESH<<8 | ADRESL;
 12726  002682  50C3               	movf	4035,w,c	;volatile
 12727  002684  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 12728  002688  0100               	movlb	0	; () banked
 12729  00268A  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 12730  00268C  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 12731  002690  0100               	movlb	0	; () banked
 12732  002692  6BAB               	clrf	??_sensorTest& (0+255),b
 12733  002694  0100               	movlb	0	; () banked
 12734  002696  11AB               	iorwf	??_sensorTest& (0+255),w,b
 12735  002698  0100               	movlb	0	; () banked
 12736  00269A  6FAD               	movwf	sensorTest@res& (0+255),b
 12737  00269C  0100               	movlb	0	; () banked
 12738  00269E  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 12739  0026A0  0100               	movlb	0	; () banked
 12740  0026A2  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 12741                           
 12742                           ; BSR set to: 0
 12743                           ;Test.c: 141: IR_signal = (res > 700) ? 1 : 0;
 12744  0026A4  0100               	movlb	0	; () banked
 12745  0026A6  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 12746  0026A8  D00A               	goto	u7800
 12747  0026AA  0EBD               	movlw	189
 12748  0026AC  0100               	movlb	0	; () banked
 12749  0026AE  5DAD               	subwf	sensorTest@res& (0+255),w,b
 12750  0026B0  0E02               	movlw	2
 12751  0026B2  0100               	movlb	0	; () banked
 12752  0026B4  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 12753  0026B6  A0D8               	btfss	status,0,c
 12754  0026B8  D002               	goto	u7800
 12755  0026BA  0E01               	movlw	1
 12756  0026BC  D001               	goto	u7810
 12757  0026BE                     u7800:
 12758  0026BE  0E00               	movlw	0
 12759  0026C0                     u7810:
 12760  0026C0  0100               	movlb	0	; () banked
 12761  0026C2  6FE2               	movwf	_IR_signal& (0+255),b
 12762  0026C4  6BE3               	clrf	(_IR_signal+1)& (0+255),b
 12763                           
 12764                           ;Test.c: 143: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12765  0026C6  0E01               	movlw	1
 12766  0026C8  EC69  F030         	call	_lcdInst
 12767  0026CC  0E68               	movlw	104
 12768  0026CE  0100               	movlb	0	; () banked
 12769  0026D0  6FAB               	movwf	??_sensorTest& (0+255),b
 12770  0026D2  0EE4               	movlw	228
 12771  0026D4                     u11497:
 12772  0026D4  2EE8               	decfsz	wreg,f,c
 12773  0026D6  D7FE               	bra	u11497
 12774  0026D8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12775  0026DA  D7FC               	bra	u11497
 12776  0026DC  F000               	nop	
 12777  0026DE  0E80               	movlw	128
 12778  0026E0  EC69  F030         	call	_lcdInst
 12779                           
 12780                           ;Test.c: 144: printf("IR (PUSHER): %d  ", IR_signal);
 12781  0026E4  0E25               	movlw	low STR_79
 12782  0026E6  0100               	movlb	0	; () banked
 12783  0026E8  6F8E               	movwf	printf@f& (0+255),b
 12784  0026EA  0EFB               	movlw	high STR_79
 12785  0026EC  0100               	movlb	0	; () banked
 12786  0026EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12787  0026F0  C0E2  F090         	movff	_IR_signal,?_printf+2
 12788  0026F4  C0E3  F091         	movff	_IR_signal+1,?_printf+3
 12789  0026F8  ECE7  F00E         	call	_printf	;wreg free
 12790                           
 12791                           ;Test.c: 145: lcdInst(0b11000000);;
 12792  0026FC  0EC0               	movlw	192
 12793  0026FE  EC69  F030         	call	_lcdInst
 12794                           
 12795                           ;Test.c: 146: printf("%d", res);
 12796  002702  0E25               	movlw	low (STR_27+14)
 12797  002704  0100               	movlb	0	; () banked
 12798  002706  6F8E               	movwf	printf@f& (0+255),b
 12799  002708  0EFE               	movlw	high (STR_27+14)
 12800  00270A  0100               	movlb	0	; () banked
 12801  00270C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12802  00270E  C0AD  F090         	movff	sensorTest@res,?_printf+2
 12803  002712  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 12804  002716  ECE7  F00E         	call	_printf	;wreg free
 12805                           
 12806                           ;Test.c: 147: _delay((unsigned long)((100)*(32000000/4000.0)));
 12807  00271A  0E05               	movlw	5
 12808  00271C  0100               	movlb	0	; () banked
 12809  00271E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12810  002720  0E0F               	movlw	15
 12811  002722  0100               	movlb	0	; () banked
 12812  002724  6FAB               	movwf	??_sensorTest& (0+255),b
 12813  002726  0EF1               	movlw	241
 12814  002728                     u11507:
 12815  002728  2EE8               	decfsz	wreg,f,c
 12816  00272A  D7FE               	bra	u11507
 12817  00272C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12818  00272E  D7FC               	bra	u11507
 12819  002730  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12820  002732  D7FA               	bra	u11507
 12821  002734                     l8642:
 12822  002734  A281               	btfss	3969,1,c	;volatile
 12823  002736  D7A2               	goto	l8624
 12824                           
 12825                           ;Test.c: 148: }
 12826                           ;Test.c: 149: LATCbits.LATC5 = 0;
 12827  002738  9A8B               	bcf	3979,5,c	;volatile
 12828  00273A                     l1319:
 12829  00273A  B281               	btfsc	3969,1,c	;volatile
 12830  00273C  D7FE               	goto	l1319
 12831                           
 12832                           ;Test.c: 155: LATCbits.LATC6 = 1;
 12833  00273E  8C8B               	bsf	3979,6,c	;volatile
 12834                           
 12835                           ;Test.c: 158: while(PORTBbits.RB1 == 0){
 12836                           
 12837                           ;Test.c: 157: while(1){
 12838  002740  D05C               	goto	l8662
 12839  002742                     l8644:
 12840                           
 12841                           ;Test.c: 159: readADC(3);
 12842  002742  0E03               	movlw	3
 12843  002744  EC62  F02F         	call	_readADC
 12844                           
 12845                           ;Test.c: 160: int res = ADRESH<<8 | ADRESL;
 12846  002748  50C3               	movf	4035,w,c	;volatile
 12847  00274A  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 12848  00274E  0100               	movlb	0	; () banked
 12849  002750  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 12850  002752  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 12851  002756  0100               	movlb	0	; () banked
 12852  002758  6BAB               	clrf	??_sensorTest& (0+255),b
 12853  00275A  0100               	movlb	0	; () banked
 12854  00275C  11AB               	iorwf	??_sensorTest& (0+255),w,b
 12855  00275E  0100               	movlb	0	; () banked
 12856  002760  6FAF               	movwf	sensorTest@res_1733& (0+255),b
 12857  002762  0100               	movlb	0	; () banked
 12858  002764  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 12859  002766  0100               	movlb	0	; () banked
 12860  002768  6FB0               	movwf	(sensorTest@res_1733+1)& (0+255),b
 12861                           
 12862                           ; BSR set to: 0
 12863                           ;Test.c: 161: IR_signal = (res > 220) ? 1 : 0;
 12864  00276A  0100               	movlb	0	; () banked
 12865  00276C  BFB0               	btfsc	(sensorTest@res_1733+1)& (0+255),7,b
 12866  00276E  D00A               	goto	u7840
 12867  002770  0100               	movlb	0	; () banked
 12868  002772  51B0               	movf	(sensorTest@res_1733+1)& (0+255),w,b
 12869  002774  E105               	bnz	u7841
 12870  002776  0EDD               	movlw	221
 12871  002778  0100               	movlb	0	; () banked
 12872  00277A  5DAF               	subwf	sensorTest@res_1733& (0+255),w,b
 12873  00277C  A0D8               	btfss	status,0,c
 12874  00277E  D002               	goto	u7840
 12875  002780                     u7841:
 12876  002780  0E01               	movlw	1
 12877  002782  D001               	goto	u7850
 12878  002784                     u7840:
 12879  002784  0E00               	movlw	0
 12880  002786                     u7850:
 12881  002786  0100               	movlb	0	; () banked
 12882  002788  6FE2               	movwf	_IR_signal& (0+255),b
 12883  00278A  6BE3               	clrf	(_IR_signal+1)& (0+255),b
 12884                           
 12885                           ;Test.c: 163: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12886  00278C  0E01               	movlw	1
 12887  00278E  EC69  F030         	call	_lcdInst
 12888  002792  0E68               	movlw	104
 12889  002794  0100               	movlb	0	; () banked
 12890  002796  6FAB               	movwf	??_sensorTest& (0+255),b
 12891  002798  0EE4               	movlw	228
 12892  00279A                     u11517:
 12893  00279A  2EE8               	decfsz	wreg,f,c
 12894  00279C  D7FE               	bra	u11517
 12895  00279E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12896  0027A0  D7FC               	bra	u11517
 12897  0027A2  F000               	nop	
 12898  0027A4  0E80               	movlw	128
 12899  0027A6  EC69  F030         	call	_lcdInst
 12900                           
 12901                           ;Test.c: 164: printf("IR (REFLEC): %d  ", IR_signal);
 12902  0027AA  0E13               	movlw	low STR_81
 12903  0027AC  0100               	movlb	0	; () banked
 12904  0027AE  6F8E               	movwf	printf@f& (0+255),b
 12905  0027B0  0EFB               	movlw	high STR_81
 12906  0027B2  0100               	movlb	0	; () banked
 12907  0027B4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12908  0027B6  C0E2  F090         	movff	_IR_signal,?_printf+2
 12909  0027BA  C0E3  F091         	movff	_IR_signal+1,?_printf+3
 12910  0027BE  ECE7  F00E         	call	_printf	;wreg free
 12911                           
 12912                           ;Test.c: 165: lcdInst(0b11000000);;
 12913  0027C2  0EC0               	movlw	192
 12914  0027C4  EC69  F030         	call	_lcdInst
 12915                           
 12916                           ;Test.c: 166: printf("%d", res);
 12917  0027C8  0E25               	movlw	low (STR_27+14)
 12918  0027CA  0100               	movlb	0	; () banked
 12919  0027CC  6F8E               	movwf	printf@f& (0+255),b
 12920  0027CE  0EFE               	movlw	high (STR_27+14)
 12921  0027D0  0100               	movlb	0	; () banked
 12922  0027D2  6F8F               	movwf	(printf@f+1)& (0+255),b
 12923  0027D4  C0AF  F090         	movff	sensorTest@res_1733,?_printf+2
 12924  0027D8  C0B0  F091         	movff	sensorTest@res_1733+1,?_printf+3
 12925  0027DC  ECE7  F00E         	call	_printf	;wreg free
 12926                           
 12927                           ;Test.c: 167: _delay((unsigned long)((100)*(32000000/4000.0)));
 12928  0027E0  0E05               	movlw	5
 12929  0027E2  0100               	movlb	0	; () banked
 12930  0027E4  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12931  0027E6  0E0F               	movlw	15
 12932  0027E8  0100               	movlb	0	; () banked
 12933  0027EA  6FAB               	movwf	??_sensorTest& (0+255),b
 12934  0027EC  0EF1               	movlw	241
 12935  0027EE                     u11527:
 12936  0027EE  2EE8               	decfsz	wreg,f,c
 12937  0027F0  D7FE               	bra	u11527
 12938  0027F2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12939  0027F4  D7FC               	bra	u11527
 12940  0027F6  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12941  0027F8  D7FA               	bra	u11527
 12942  0027FA                     l8662:
 12943  0027FA  A281               	btfss	3969,1,c	;volatile
 12944  0027FC  D7A2               	goto	l8644
 12945                           
 12946                           ;Test.c: 168: }
 12947                           ;Test.c: 169: if(PORTB >> 4 == 0b1111){
 12948  0027FE  3881               	swapf	3969,w,c	;volatile
 12949  002800  0B0F               	andlw	15
 12950  002802  0A0F               	xorlw	15
 12951  002804  B4D8               	btfsc	status,2,c
 12952  002806  D01D               	goto	l1327
 12953                           
 12954                           ;Test.c: 172: else if(PORTB >> 4 == 0b0000){
 12955                           
 12956                           ;Test.c: 171: }
 12957                           
 12958                           ;Test.c: 170: break;
 12959  002808  CF81 F0AB          	movff	3969,??_sensorTest	;volatile
 12960  00280C  0100               	movlb	0	; () banked
 12961  00280E  3BAB               	swapf	??_sensorTest& (0+255),f,b
 12962  002810  0E0F               	movlw	15
 12963  002812  17AB               	andwf	??_sensorTest& (0+255),f,b
 12964  002814  A4D8               	btfss	status,2,c
 12965  002816  D012               	goto	l1330
 12966                           
 12967                           ; BSR set to: 0
 12968                           ;Test.c: 173: LATCbits.LATC6 = !LATCbits.LATC6;
 12969  002818  BC8B               	btfsc	3979,6,c	;volatile
 12970  00281A  D004               	goto	u7890
 12971  00281C  0100               	movlb	0	; () banked
 12972  00281E  6BAB               	clrf	??_sensorTest& (0+255),b
 12973  002820  2BAB               	incf	??_sensorTest& (0+255),f,b
 12974  002822  D002               	goto	u7908
 12975  002824                     u7890:
 12976  002824  0100               	movlb	0	; () banked
 12977  002826  6BAB               	clrf	??_sensorTest& (0+255),b
 12978  002828                     u7908:
 12979  002828  0100               	movlb	0	; () banked
 12980  00282A  3BAB               	swapf	??_sensorTest& (0+255),f,b
 12981  00282C  47AB               	rlncf	??_sensorTest& (0+255),f,b
 12982  00282E  47AB               	rlncf	??_sensorTest& (0+255),f,b
 12983  002830  508B               	movf	3979,w,c	;volatile
 12984  002832  0100               	movlb	0	; () banked
 12985  002834  19AB               	xorwf	??_sensorTest& (0+255),w,b
 12986  002836  0BBF               	andlw	-65
 12987  002838  19AB               	xorwf	??_sensorTest& (0+255),w,b
 12988  00283A  6E8B               	movwf	3979,c	;volatile
 12989  00283C                     l1330:
 12990  00283C  A281               	btfss	3969,1,c	;volatile
 12991  00283E  D7DD               	goto	l8662
 12992  002840  D7FD               	goto	l1330
 12993  002842                     l1327:
 12994                           
 12995                           ;Test.c: 176: }
 12996                           ;Test.c: 177: LATCbits.LATC6 = 0;
 12997  002842  9C8B               	bcf	3979,6,c	;volatile
 12998  002844                     l1334:
 12999  002844  B281               	btfsc	3969,1,c	;volatile
 13000  002846  D7FE               	goto	l1334
 13001                           
 13002                           ;Test.c: 187: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13003  002848  0E01               	movlw	1
 13004  00284A  EC69  F030         	call	_lcdInst
 13005  00284E  0E68               	movlw	104
 13006  002850  0100               	movlb	0	; () banked
 13007  002852  6FAB               	movwf	??_sensorTest& (0+255),b
 13008  002854  0EE4               	movlw	228
 13009  002856                     u11537:
 13010  002856  2EE8               	decfsz	wreg,f,c
 13011  002858  D7FE               	bra	u11537
 13012  00285A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 13013  00285C  D7FC               	bra	u11537
 13014  00285E  F000               	nop	
 13015  002860  0E80               	movlw	128
 13016  002862  EC69  F030         	call	_lcdInst
 13017                           
 13018                           ;Test.c: 188: printf("TST: MAGNETISM");
 13019  002866  0EB6               	movlw	low STR_83
 13020  002868  0100               	movlb	0	; () banked
 13021  00286A  6F8E               	movwf	printf@f& (0+255),b
 13022  00286C  0EFE               	movlw	high STR_83
 13023  00286E  0100               	movlb	0	; () banked
 13024  002870  6F8F               	movwf	(printf@f+1)& (0+255),b
 13025  002872  ECE7  F00E         	call	_printf	;wreg free
 13026                           
 13027                           ;Test.c: 189: _delay((unsigned long)((100)*(32000000/4000.0)));
 13028  002876  0E05               	movlw	5
 13029  002878  0100               	movlb	0	; () banked
 13030  00287A  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 13031  00287C  0E0F               	movlw	15
 13032  00287E  0100               	movlb	0	; () banked
 13033  002880  6FAB               	movwf	??_sensorTest& (0+255),b
 13034  002882  0EF1               	movlw	241
 13035  002884                     u11547:
 13036  002884  2EE8               	decfsz	wreg,f,c
 13037  002886  D7FE               	bra	u11547
 13038  002888  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 13039  00288A  D7FC               	bra	u11547
 13040  00288C  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 13041  00288E  D7FA               	bra	u11547
 13042                           
 13043                           ;Test.c: 190: while(PORTBbits.RB1 == 0){
 13044  002890  D021               	goto	l8690
 13045  002892                     l8684:
 13046                           
 13047                           ;Test.c: 191: readMAG();
 13048  002892  ECE6  F02C         	call	_readMAG	;wreg free
 13049                           
 13050                           ;Test.c: 192: lcdInst(0b10000000);;
 13051  002896  0E80               	movlw	128
 13052  002898  EC69  F030         	call	_lcdInst
 13053                           
 13054                           ;Test.c: 193: lcdInst(0b11000000);;
 13055  00289C  0EC0               	movlw	192
 13056  00289E  EC69  F030         	call	_lcdInst
 13057                           
 13058                           ;Test.c: 194: printf("MAG_signal: %d ", MAG_signal);
 13059  0028A2  0E39               	movlw	low STR_84
 13060  0028A4  0100               	movlb	0	; () banked
 13061  0028A6  6F8E               	movwf	printf@f& (0+255),b
 13062  0028A8  0EFE               	movlw	high STR_84
 13063  0028AA  0100               	movlb	0	; () banked
 13064  0028AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13065  0028AE  C0E4  F090         	movff	_MAG_signal,?_printf+2
 13066  0028B2  C0E5  F091         	movff	_MAG_signal+1,?_printf+3
 13067  0028B6  ECE7  F00E         	call	_printf	;wreg free
 13068                           
 13069                           ;Test.c: 195: _delay((unsigned long)((100)*(32000000/4000.0)));
 13070  0028BA  0E05               	movlw	5
 13071  0028BC  0100               	movlb	0	; () banked
 13072  0028BE  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 13073  0028C0  0E0F               	movlw	15
 13074  0028C2  0100               	movlb	0	; () banked
 13075  0028C4  6FAB               	movwf	??_sensorTest& (0+255),b
 13076  0028C6  0EF1               	movlw	241
 13077  0028C8                     u11557:
 13078  0028C8  2EE8               	decfsz	wreg,f,c
 13079  0028CA  D7FE               	bra	u11557
 13080  0028CC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 13081  0028CE  D7FC               	bra	u11557
 13082  0028D0  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 13083  0028D2  D7FA               	bra	u11557
 13084  0028D4                     l8690:
 13085  0028D4  A281               	btfss	3969,1,c	;volatile
 13086  0028D6  D7DD               	goto	l8684
 13087  0028D8                     l1340:
 13088  0028D8  B281               	btfsc	3969,1,c	;volatile
 13089  0028DA  D7FE               	goto	l1340
 13090                           
 13091                           ;Test.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13092  0028DC  0E01               	movlw	1
 13093  0028DE  EC69  F030         	call	_lcdInst
 13094  0028E2  0E68               	movlw	104
 13095  0028E4  0100               	movlb	0	; () banked
 13096  0028E6  6FAB               	movwf	??_sensorTest& (0+255),b
 13097  0028E8  0EE4               	movlw	228
 13098  0028EA                     u11567:
 13099  0028EA  2EE8               	decfsz	wreg,f,c
 13100  0028EC  D7FE               	bra	u11567
 13101  0028EE  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 13102  0028F0  D7FC               	bra	u11567
 13103  0028F2  F000               	nop	
 13104  0028F4  0E80               	movlw	128
 13105  0028F6  EC69  F030         	call	_lcdInst
 13106                           
 13107                           ;Test.c: 203: printf("TST: COND");
 13108  0028FA  0E86               	movlw	low STR_85
 13109  0028FC  0100               	movlb	0	; () banked
 13110  0028FE  6F8E               	movwf	printf@f& (0+255),b
 13111  002900  0EFF               	movlw	high STR_85
 13112  002902  0100               	movlb	0	; () banked
 13113  002904  6F8F               	movwf	(printf@f+1)& (0+255),b
 13114  002906  ECE7  F00E         	call	_printf	;wreg free
 13115                           
 13116                           ;Test.c: 204: _delay((unsigned long)((100)*(32000000/4000.0)));
 13117  00290A  0E05               	movlw	5
 13118  00290C  0100               	movlb	0	; () banked
 13119  00290E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 13120  002910  0E0F               	movlw	15
 13121  002912  0100               	movlb	0	; () banked
 13122  002914  6FAB               	movwf	??_sensorTest& (0+255),b
 13123  002916  0EF1               	movlw	241
 13124  002918                     u11577:
 13125  002918  2EE8               	decfsz	wreg,f,c
 13126  00291A  D7FE               	bra	u11577
 13127  00291C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 13128  00291E  D7FC               	bra	u11577
 13129  002920  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 13130  002922  D7FA               	bra	u11577
 13131  002924                     l8702:
 13132                           
 13133                           ;Test.c: 206: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13134  002924  0E01               	movlw	1
 13135  002926  EC69  F030         	call	_lcdInst
 13136  00292A  0E68               	movlw	104
 13137  00292C  0100               	movlb	0	; () banked
 13138  00292E  6FAB               	movwf	??_sensorTest& (0+255),b
 13139  002930  0EE4               	movlw	228
 13140  002932                     u11587:
 13141  002932  2EE8               	decfsz	wreg,f,c
 13142  002934  D7FE               	bra	u11587
 13143  002936  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 13144  002938  D7FC               	bra	u11587
 13145  00293A  F000               	nop	
 13146  00293C  0E80               	movlw	128
 13147  00293E  EC69  F030         	call	_lcdInst
 13148                           
 13149                           ;Test.c: 207: printf("TST: COND");
 13150  002942  0E86               	movlw	low STR_85
 13151  002944  0100               	movlb	0	; () banked
 13152  002946  6F8E               	movwf	printf@f& (0+255),b
 13153  002948  0EFF               	movlw	high STR_85
 13154  00294A  0100               	movlb	0	; () banked
 13155  00294C  6F8F               	movwf	(printf@f+1)& (0+255),b
 13156  00294E  ECE7  F00E         	call	_printf	;wreg free
 13157                           
 13158                           ;Test.c: 208: while(PORTBbits.RB1 == 0){
 13159  002952  D01B               	goto	l8714
 13160  002954                     l8710:
 13161                           
 13162                           ;Test.c: 212: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13163  002954  0E80               	movlw	128
 13164  002956  EC69  F030         	call	_lcdInst
 13165  00295A  0EC0               	movlw	192
 13166  00295C  EC69  F030         	call	_lcdInst
 13167                           
 13168                           ;Test.c: 213: printf("COND: %d", PORTAbits.RA2);
 13169  002960  0EA4               	movlw	low STR_87
 13170  002962  0100               	movlb	0	; () banked
 13171  002964  6F8E               	movwf	printf@f& (0+255),b
 13172  002966  0EFF               	movlw	high STR_87
 13173  002968  0100               	movlb	0	; () banked
 13174  00296A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13175  00296C  A480               	btfss	3968,2,c	;volatile
 13176  00296E  D004               	goto	u7950
 13177  002970  0100               	movlb	0	; () banked
 13178  002972  6BAB               	clrf	??_sensorTest& (0+255),b
 13179  002974  2BAB               	incf	??_sensorTest& (0+255),f,b
 13180  002976  D002               	goto	u7958
 13181  002978                     u7950:
 13182  002978  0100               	movlb	0	; () banked
 13183  00297A  6BAB               	clrf	??_sensorTest& (0+255),b
 13184  00297C                     u7958:
 13185  00297C  0100               	movlb	0	; () banked
 13186  00297E  51AB               	movf	??_sensorTest& (0+255),w,b
 13187  002980  0100               	movlb	0	; () banked
 13188  002982  6F90               	movwf	(?_printf+2)& (0+255),b
 13189  002984  6B91               	clrf	(?_printf+3)& (0+255),b
 13190  002986  ECE7  F00E         	call	_printf	;wreg free
 13191  00298A                     l8714:
 13192  00298A  A281               	btfss	3969,1,c	;volatile
 13193  00298C  D7E3               	goto	l8710
 13194                           
 13195                           ;Test.c: 214: }
 13196                           ;Test.c: 215: if(PORTB >> 4 == 0b1111){
 13197  00298E  3881               	swapf	3969,w,c	;volatile
 13198  002990  0B0F               	andlw	15
 13199  002992  0A0F               	xorlw	15
 13200  002994  B4D8               	btfsc	status,2,c
 13201  002996  0012               	return	
 13202                           
 13203                           ;Test.c: 218: else{
 13204                           ;Test.c: 219: LATCbits.LATC7 = 1;
 13205                           
 13206                           ;Test.c: 217: }
 13207                           
 13208                           ;Test.c: 216: break;
 13209  002998  8E8B               	bsf	3979,7,c	;volatile
 13210                           
 13211                           ;Test.c: 220: while(PORTBbits.RB1 == 1){
 13212  00299A  D01B               	goto	l8726
 13213  00299C                     l8722:
 13214                           
 13215                           ;Test.c: 222: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13216  00299C  0E80               	movlw	128
 13217  00299E  EC69  F030         	call	_lcdInst
 13218  0029A2  0EC0               	movlw	192
 13219  0029A4  EC69  F030         	call	_lcdInst
 13220                           
 13221                           ;Test.c: 223: printf("COND: %d", PORTAbits.RA2);
 13222  0029A8  0EA4               	movlw	low STR_87
 13223  0029AA  0100               	movlb	0	; () banked
 13224  0029AC  6F8E               	movwf	printf@f& (0+255),b
 13225  0029AE  0EFF               	movlw	high STR_87
 13226  0029B0  0100               	movlb	0	; () banked
 13227  0029B2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13228  0029B4  A480               	btfss	3968,2,c	;volatile
 13229  0029B6  D004               	goto	u7980
 13230  0029B8  0100               	movlb	0	; () banked
 13231  0029BA  6BAB               	clrf	??_sensorTest& (0+255),b
 13232  0029BC  2BAB               	incf	??_sensorTest& (0+255),f,b
 13233  0029BE  D002               	goto	u7988
 13234  0029C0                     u7980:
 13235  0029C0  0100               	movlb	0	; () banked
 13236  0029C2  6BAB               	clrf	??_sensorTest& (0+255),b
 13237  0029C4                     u7988:
 13238  0029C4  0100               	movlb	0	; () banked
 13239  0029C6  51AB               	movf	??_sensorTest& (0+255),w,b
 13240  0029C8  0100               	movlb	0	; () banked
 13241  0029CA  6F90               	movwf	(?_printf+2)& (0+255),b
 13242  0029CC  6B91               	clrf	(?_printf+3)& (0+255),b
 13243  0029CE  ECE7  F00E         	call	_printf	;wreg free
 13244  0029D2                     l8726:
 13245  0029D2  B281               	btfsc	3969,1,c	;volatile
 13246  0029D4  D7E3               	goto	l8722
 13247                           
 13248                           ;Test.c: 224: }
 13249                           ;Test.c: 225: LATCbits.LATC7 = !1;
 13250  0029D6  9E8B               	bcf	3979,7,c	;volatile
 13251  0029D8  D7A5               	goto	l8702
 13252  0029DA                     __end_of_sensorTest:
 13253                           	opt stack 0
 13254                           tblptru	equ	0xFF8
 13255                           tblptrh	equ	0xFF7
 13256                           tblptrl	equ	0xFF6
 13257                           tablat	equ	0xFF5
 13258                           prodh	equ	0xFF4
 13259                           prodl	equ	0xFF3
 13260                           intcon	equ	0xFF2
 13261                           intcon2	equ	0xFF1
 13262                           intcon3	equ	0xFF0
 13263                           postinc0	equ	0xFEE
 13264                           wreg	equ	0xFE8
 13265                           postdec1	equ	0xFE5
 13266                           fsr1l	equ	0xFE1
 13267                           indf2	equ	0xFDF
 13268                           postinc2	equ	0xFDE
 13269                           postdec2	equ	0xFDD
 13270                           fsr2h	equ	0xFDA
 13271                           fsr2l	equ	0xFD9
 13272                           status	equ	0xFD8
 13273                           
 13274 ;; *************** function _readMAG *****************
 13275 ;; Defined at:
 13276 ;;		line 38 in file "ADCFunctionality.c"
 13277 ;; Parameters:    Size  Location     Type
 13278 ;;		None
 13279 ;; Auto vars:     Size  Location     Type
 13280 ;;  res             2    4[BANK0 ] int 
 13281 ;; Return value:  Size  Location     Type
 13282 ;;                  1    wreg      void 
 13283 ;; Registers used:
 13284 ;;		wreg, status,2, status,0, cstack
 13285 ;; Tracked objects:
 13286 ;;		On entry : 0/0
 13287 ;;		On exit  : 0/0
 13288 ;;		Unchanged: 0/0
 13289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13291 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13292 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13293 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13294 ;;Total ram usage:        4 bytes
 13295 ;; Hardware stack levels used:    1
 13296 ;; Hardware stack levels required when called:    8
 13297 ;; This function calls:
 13298 ;;		_readADC
 13299 ;; This function is called by:
 13300 ;;		_getMAG
 13301 ;;		_sensorTest
 13302 ;; This function uses a non-reentrant model
 13303 ;;
 13304                           
 13305                           	psect	text42
 13306  0059CC                     __ptext42:
 13307                           	opt stack 0
 13308  0059CC                     _readMAG:
 13309                           	opt stack 19
 13310                           
 13311                           ;ADCFunctionality.c: 39: readADC(1);
 13312                           
 13313                           ;incstack = 0
 13314  0059CC  0E01               	movlw	1
 13315  0059CE  EC62  F02F         	call	_readADC
 13316                           
 13317                           ;ADCFunctionality.c: 40: int res = ADRESH<<8 | ADRESL;
 13318  0059D2  50C3               	movf	4035,w,c	;volatile
 13319  0059D4  CFC4 F082          	movff	4036,??_readMAG	;volatile
 13320  0059D8  0100               	movlb	0	; () banked
 13321  0059DA  6B83               	clrf	(??_readMAG+1)& (0+255),b
 13322  0059DC  C082  F083         	movff	??_readMAG,??_readMAG+1
 13323  0059E0  0100               	movlb	0	; () banked
 13324  0059E2  6B82               	clrf	??_readMAG& (0+255),b
 13325  0059E4  0100               	movlb	0	; () banked
 13326  0059E6  1182               	iorwf	??_readMAG& (0+255),w,b
 13327  0059E8  0100               	movlb	0	; () banked
 13328  0059EA  6F84               	movwf	readMAG@res& (0+255),b
 13329  0059EC  0100               	movlb	0	; () banked
 13330  0059EE  5183               	movf	(??_readMAG+1)& (0+255),w,b
 13331  0059F0  0100               	movlb	0	; () banked
 13332  0059F2  6F85               	movwf	(readMAG@res+1)& (0+255),b
 13333                           
 13334                           ; BSR set to: 0
 13335                           ;ADCFunctionality.c: 41: MAG_signal = (res < 150) ? 1 : 0;
 13336  0059F4  0100               	movlb	0	; () banked
 13337  0059F6  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 13338  0059F8  D008               	goto	u5681
 13339  0059FA  0100               	movlb	0	; () banked
 13340  0059FC  5185               	movf	(readMAG@res+1)& (0+255),w,b
 13341  0059FE  E107               	bnz	u5680
 13342  005A00  0E96               	movlw	150
 13343  005A02  0100               	movlb	0	; () banked
 13344  005A04  5D84               	subwf	readMAG@res& (0+255),w,b
 13345  005A06  B0D8               	btfsc	status,0,c
 13346  005A08  D002               	goto	u5680
 13347  005A0A                     u5681:
 13348  005A0A  0E01               	movlw	1
 13349  005A0C  D001               	goto	u5690
 13350  005A0E                     u5680:
 13351  005A0E  0E00               	movlw	0
 13352  005A10                     u5690:
 13353  005A10  0100               	movlb	0	; () banked
 13354  005A12  6FE4               	movwf	_MAG_signal& (0+255),b
 13355  005A14  6BE5               	clrf	(_MAG_signal+1)& (0+255),b
 13356                           
 13357                           ; BSR set to: 0
 13358  005A16  0012               	return		;funcret
 13359  005A18                     __end_of_readMAG:
 13360                           	opt stack 0
 13361                           tblptru	equ	0xFF8
 13362                           tblptrh	equ	0xFF7
 13363                           tblptrl	equ	0xFF6
 13364                           tablat	equ	0xFF5
 13365                           prodh	equ	0xFF4
 13366                           prodl	equ	0xFF3
 13367                           intcon	equ	0xFF2
 13368                           intcon2	equ	0xFF1
 13369                           intcon3	equ	0xFF0
 13370                           postinc0	equ	0xFEE
 13371                           wreg	equ	0xFE8
 13372                           postdec1	equ	0xFE5
 13373                           fsr1l	equ	0xFE1
 13374                           indf2	equ	0xFDF
 13375                           postinc2	equ	0xFDE
 13376                           postdec2	equ	0xFDD
 13377                           fsr2h	equ	0xFDA
 13378                           fsr2l	equ	0xFD9
 13379                           status	equ	0xFD8
 13380                           
 13381 ;; *************** function _arm *****************
 13382 ;; Defined at:
 13383 ;;		line 663 in file "Test.c"
 13384 ;; Parameters:    Size  Location     Type
 13385 ;;		None
 13386 ;; Auto vars:     Size  Location     Type
 13387 ;;  on              2   44[BANK0 ] int 
 13388 ;; Return value:  Size  Location     Type
 13389 ;;                  1    wreg      void 
 13390 ;; Registers used:
 13391 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13392 ;; Tracked objects:
 13393 ;;		On entry : 0/0
 13394 ;;		On exit  : 0/0
 13395 ;;		Unchanged: 0/0
 13396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13398 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13399 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13400 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13401 ;;Total ram usage:        3 bytes
 13402 ;; Hardware stack levels used:    1
 13403 ;; Hardware stack levels required when called:   10
 13404 ;; This function calls:
 13405 ;;		_lcdInst
 13406 ;;		_printf
 13407 ;;		_stopSignals
 13408 ;; This function is called by:
 13409 ;;		_Test
 13410 ;; This function uses a non-reentrant model
 13411 ;;
 13412                           
 13413                           	psect	text43
 13414  004780                     __ptext43:
 13415                           	opt stack 0
 13416  004780                     _arm:
 13417                           	opt stack 19
 13418                           
 13419                           ;Test.c: 664: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13420                           
 13421                           ; BSR set to: 0
 13422                           ;incstack = 0
 13423  004780  0E01               	movlw	1
 13424  004782  EC69  F030         	call	_lcdInst
 13425  004786  0E68               	movlw	104
 13426  004788  0100               	movlb	0	; () banked
 13427  00478A  6FAB               	movwf	??_arm& (0+255),b
 13428  00478C  0EE4               	movlw	228
 13429  00478E                     u11597:
 13430  00478E  2EE8               	decfsz	wreg,f,c
 13431  004790  D7FE               	bra	u11597
 13432  004792  2FAB               	decfsz	??_arm& (0+255),f,b
 13433  004794  D7FC               	bra	u11597
 13434  004796  F000               	nop	
 13435  004798  0E80               	movlw	128
 13436  00479A  EC69  F030         	call	_lcdInst
 13437                           
 13438                           ;Test.c: 665: printf("D WILL RETURN   ");
 13439  00479E  0E08               	movlw	low STR_125
 13440  0047A0  0100               	movlb	0	; () banked
 13441  0047A2  6F8E               	movwf	printf@f& (0+255),b
 13442  0047A4  0EFC               	movlw	high STR_125
 13443  0047A6  0100               	movlb	0	; () banked
 13444  0047A8  6F8F               	movwf	(printf@f+1)& (0+255),b
 13445  0047AA  ECE7  F00E         	call	_printf	;wreg free
 13446                           
 13447                           ;Test.c: 666: lcdInst(0b11000000);;
 13448  0047AE  0EC0               	movlw	192
 13449  0047B0  EC69  F030         	call	_lcdInst
 13450                           
 13451                           ;Test.c: 667: printf("ELSE TOGGLES ARM");
 13452  0047B4  0EB2               	movlw	low STR_126
 13453  0047B6  0100               	movlb	0	; () banked
 13454  0047B8  6F8E               	movwf	printf@f& (0+255),b
 13455  0047BA  0EFC               	movlw	high STR_126
 13456  0047BC  0100               	movlb	0	; () banked
 13457  0047BE  6F8F               	movwf	(printf@f+1)& (0+255),b
 13458  0047C0  ECE7  F00E         	call	_printf	;wreg free
 13459                           
 13460                           ;Test.c: 669: (INTCONbits.GIE = 1);
 13461  0047C4  8EF2               	bsf	intcon,7,c	;volatile
 13462                           
 13463                           ;Test.c: 670: machine_state = Sorting_state;
 13464  0047C6  0E01               	movlw	1
 13465  0047C8  0100               	movlb	0	; () banked
 13466  0047CA  6FFC               	movwf	_machine_state& (0+255),b
 13467                           
 13468                           ; BSR set to: 0
 13469                           ;Test.c: 671: f_arm_position = 1;
 13470  0047CC  0E00               	movlw	0
 13471  0047CE  0100               	movlb	0	; () banked
 13472  0047D0  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 13473  0047D2  0E01               	movlw	1
 13474  0047D4  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 13475                           
 13476                           ; BSR set to: 0
 13477                           ;Test.c: 672: timer2_counter = 0;
 13478  0047D6  0E00               	movlw	0
 13479  0047D8  6E74               	movwf	_timer2_counter+1,c	;volatile
 13480  0047DA  0E00               	movlw	0
 13481  0047DC  6E73               	movwf	_timer2_counter,c	;volatile
 13482                           
 13483                           ; BSR set to: 0
 13484                           ;Test.c: 673: LATBbits.LATB3 = 1;
 13485  0047DE  868A               	bsf	3978,3,c	;volatile
 13486                           
 13487                           ; BSR set to: 0
 13488                           ;Test.c: 674: TMR2ON = 1;
 13489  0047E0  84CA               	bsf	4042,2,c	;volatile
 13490                           
 13491                           ; BSR set to: 0
 13492                           ;Test.c: 675: was_low_2 = 0;
 13493  0047E2  0E00               	movlw	0
 13494  0047E4  6E7A               	movwf	_was_low_2+1,c	;volatile
 13495  0047E6  0E00               	movlw	0
 13496  0047E8  6E79               	movwf	_was_low_2,c	;volatile
 13497                           
 13498                           ; BSR set to: 0
 13499                           ;Test.c: 677: int on = 0;
 13500  0047EA  0E00               	movlw	0
 13501  0047EC  0100               	movlb	0	; () banked
 13502  0047EE  6FAD               	movwf	(arm@on+1)& (0+255),b
 13503  0047F0  0E00               	movlw	0
 13504  0047F2  6FAC               	movwf	arm@on& (0+255),b
 13505  0047F4                     l9180:
 13506                           
 13507                           ;Test.c: 679: if(on){
 13508  0047F4  0100               	movlb	0	; () banked
 13509  0047F6  51AC               	movf	arm@on& (0+255),w,b
 13510  0047F8  0100               	movlb	0	; () banked
 13511  0047FA  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 13512  0047FC  B4D8               	btfsc	status,2,c
 13513  0047FE  D01C               	goto	l9192
 13514                           
 13515                           ; BSR set to: 0
 13516                           ;Test.c: 680: on = !on;
 13517  004800  0100               	movlb	0	; () banked
 13518  004802  51AC               	movf	arm@on& (0+255),w,b
 13519  004804  0100               	movlb	0	; () banked
 13520  004806  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 13521  004808  A4D8               	btfss	status,2,c
 13522  00480A  D002               	goto	u8570
 13523  00480C  0E01               	movlw	1
 13524  00480E  D001               	goto	u8580
 13525  004810                     u8570:
 13526  004810  0E00               	movlw	0
 13527  004812                     u8580:
 13528  004812  0100               	movlb	0	; () banked
 13529  004814  6FAC               	movwf	arm@on& (0+255),b
 13530  004816  6BAD               	clrf	(arm@on+1)& (0+255),b
 13531                           
 13532                           ;Test.c: 681: while(PORTBbits.RB1 == 0){
 13533  004818  D005               	goto	l9186
 13534  00481A                     l9184:
 13535                           
 13536                           ; BSR set to: 0
 13537                           ;Test.c: 682: f_arm_position = 0;
 13538  00481A  0E00               	movlw	0
 13539  00481C  0100               	movlb	0	; () banked
 13540  00481E  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 13541  004820  0E00               	movlw	0
 13542  004822  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 13543  004824                     l9186:
 13544                           
 13545                           ; BSR set to: 0
 13546  004824  A281               	btfss	3969,1,c	;volatile
 13547  004826  D7F9               	goto	l9184
 13548                           
 13549                           ; BSR set to: 0
 13550                           ;Test.c: 683: }
 13551                           ;Test.c: 684: if(PORTB >> 4 == 0b1111){
 13552                           
 13553                           ; BSR set to: 0
 13554  004828  3881               	swapf	3969,w,c	;volatile
 13555  00482A  0B0F               	andlw	15
 13556  00482C  0A0F               	xorlw	15
 13557  00482E  B4D8               	btfsc	status,2,c
 13558  004830  D01F               	goto	l1525
 13559  004832                     l1526:
 13560  004832  A281               	btfss	3969,1,c	;volatile
 13561  004834  D7DF               	goto	l9180
 13562  004836  D7FD               	goto	l1526
 13563  004838                     l9192:
 13564                           
 13565                           ;Test.c: 689: else{
 13566                           ;Test.c: 690: on = !on;
 13567  004838  0100               	movlb	0	; () banked
 13568  00483A  51AC               	movf	arm@on& (0+255),w,b
 13569  00483C  0100               	movlb	0	; () banked
 13570  00483E  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 13571  004840  A4D8               	btfss	status,2,c
 13572  004842  D002               	goto	u8620
 13573  004844  0E01               	movlw	1
 13574  004846  D001               	goto	u8630
 13575  004848                     u8620:
 13576  004848  0E00               	movlw	0
 13577  00484A                     u8630:
 13578  00484A  0100               	movlb	0	; () banked
 13579  00484C  6FAC               	movwf	arm@on& (0+255),b
 13580  00484E  6BAD               	clrf	(arm@on+1)& (0+255),b
 13581                           
 13582                           ;Test.c: 691: while(PORTBbits.RB1 == 0){
 13583  004850  D005               	goto	l9196
 13584  004852                     l9194:
 13585                           
 13586                           ; BSR set to: 0
 13587                           ;Test.c: 692: f_arm_position = 1;
 13588  004852  0E00               	movlw	0
 13589  004854  0100               	movlb	0	; () banked
 13590  004856  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 13591  004858  0E01               	movlw	1
 13592  00485A  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 13593  00485C                     l9196:
 13594                           
 13595                           ; BSR set to: 0
 13596  00485C  A281               	btfss	3969,1,c	;volatile
 13597  00485E  D7F9               	goto	l9194
 13598                           
 13599                           ; BSR set to: 0
 13600                           ;Test.c: 693: }
 13601                           ;Test.c: 694: if(PORTB >> 4 == 0b1111){
 13602                           
 13603                           ; BSR set to: 0
 13604  004860  3881               	swapf	3969,w,c	;volatile
 13605  004862  0B0F               	andlw	15
 13606  004864  0A0F               	xorlw	15
 13607  004866  B4D8               	btfsc	status,2,c
 13608  004868  D003               	goto	l1525
 13609  00486A                     l1534:
 13610  00486A  A281               	btfss	3969,1,c	;volatile
 13611  00486C  D7C3               	goto	l9180
 13612  00486E  D7FD               	goto	l1534
 13613  004870                     l1525:
 13614                           
 13615                           ; BSR set to: 0
 13616                           ;Test.c: 698: }
 13617                           ;Test.c: 699: }
 13618                           ;Test.c: 701: (INTCONbits.GIE = 0);
 13619  004870  9EF2               	bcf	intcon,7,c	;volatile
 13620                           
 13621                           ; BSR set to: 0
 13622                           ;Test.c: 702: stopSignals();
 13623  004872  EC1E  F030         	call	_stopSignals	;wreg free
 13624                           
 13625                           ;Test.c: 703: machine_state = Testing_state;
 13626  004876  0E03               	movlw	3
 13627  004878  0100               	movlb	0	; () banked
 13628  00487A  6FFC               	movwf	_machine_state& (0+255),b
 13629                           
 13630                           ; BSR set to: 0
 13631  00487C  0012               	return		;funcret
 13632  00487E                     __end_of_arm:
 13633                           	opt stack 0
 13634                           tblptru	equ	0xFF8
 13635                           tblptrh	equ	0xFF7
 13636                           tblptrl	equ	0xFF6
 13637                           tablat	equ	0xFF5
 13638                           prodh	equ	0xFF4
 13639                           prodl	equ	0xFF3
 13640                           intcon	equ	0xFF2
 13641                           intcon2	equ	0xFF1
 13642                           intcon3	equ	0xFF0
 13643                           postinc0	equ	0xFEE
 13644                           wreg	equ	0xFE8
 13645                           postdec1	equ	0xFE5
 13646                           fsr1l	equ	0xFE1
 13647                           indf2	equ	0xFDF
 13648                           postinc2	equ	0xFDE
 13649                           postdec2	equ	0xFDD
 13650                           fsr2h	equ	0xFDA
 13651                           fsr2l	equ	0xFD9
 13652                           status	equ	0xFD8
 13653                           
 13654 ;; *************** function _algorithmTest *****************
 13655 ;; Defined at:
 13656 ;;		line 78 in file "Test.c"
 13657 ;; Parameters:    Size  Location     Type
 13658 ;;		None
 13659 ;; Auto vars:     Size  Location     Type
 13660 ;;		None
 13661 ;; Return value:  Size  Location     Type
 13662 ;;                  1    wreg      void 
 13663 ;; Registers used:
 13664 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13665 ;; Tracked objects:
 13666 ;;		On entry : 0/0
 13667 ;;		On exit  : 0/0
 13668 ;;		Unchanged: 0/0
 13669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13672 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13673 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13674 ;;Total ram usage:        2 bytes
 13675 ;; Hardware stack levels used:    1
 13676 ;; Hardware stack levels required when called:   10
 13677 ;; This function calls:
 13678 ;;		_lcdInst
 13679 ;;		_printf
 13680 ;; This function is called by:
 13681 ;;		_Test
 13682 ;; This function uses a non-reentrant model
 13683 ;;
 13684                           
 13685                           	psect	text44
 13686  004B1E                     __ptext44:
 13687                           	opt stack 0
 13688  004B1E                     _algorithmTest:
 13689                           	opt stack 19
 13690                           
 13691                           ;Test.c: 80: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 13692                           
 13693                           ; BSR set to: 0
 13694                           ;incstack = 0
 13695  004B1E  0E01               	movlw	1
 13696  004B20  EC69  F030         	call	_lcdInst
 13697  004B24  0E68               	movlw	104
 13698  004B26  0100               	movlb	0	; () banked
 13699  004B28  6FAB               	movwf	??_algorithmTest& (0+255),b
 13700  004B2A  0EE4               	movlw	228
 13701  004B2C                     u11607:
 13702  004B2C  2EE8               	decfsz	wreg,f,c
 13703  004B2E  D7FE               	bra	u11607
 13704  004B30  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13705  004B32  D7FC               	bra	u11607
 13706  004B34  F000               	nop	
 13707  004B36  0E80               	movlw	128
 13708  004B38  EC69  F030         	call	_lcdInst
 13709                           
 13710                           ;Test.c: 81: printf("ALGORITHM TEST");
 13711  004B3C  0E01               	movlw	low STR_70
 13712  004B3E  0100               	movlb	0	; () banked
 13713  004B40  6F8E               	movwf	printf@f& (0+255),b
 13714  004B42  0EFF               	movlw	high STR_70
 13715  004B44  0100               	movlb	0	; () banked
 13716  004B46  6F8F               	movwf	(printf@f+1)& (0+255),b
 13717  004B48  ECE7  F00E         	call	_printf	;wreg free
 13718                           
 13719                           ;Test.c: 82: lcdInst(0b11000000);;
 13720  004B4C  0EC0               	movlw	192
 13721  004B4E  EC69  F030         	call	_lcdInst
 13722                           
 13723                           ;Test.c: 83: printf("PUSH TO START");
 13724  004B52  0E3A               	movlw	low STR_71
 13725  004B54  0100               	movlb	0	; () banked
 13726  004B56  6F8E               	movwf	printf@f& (0+255),b
 13727  004B58  0EFF               	movlw	high STR_71
 13728  004B5A  0100               	movlb	0	; () banked
 13729  004B5C  6F8F               	movwf	(printf@f+1)& (0+255),b
 13730  004B5E  ECE7  F00E         	call	_printf	;wreg free
 13731                           
 13732                           ;Test.c: 84: _delay((unsigned long)((100)*(32000000/4000.0)));
 13733  004B62  0E05               	movlw	5
 13734  004B64  0100               	movlb	0	; () banked
 13735  004B66  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 13736  004B68  0E0F               	movlw	15
 13737  004B6A  0100               	movlb	0	; () banked
 13738  004B6C  6FAB               	movwf	??_algorithmTest& (0+255),b
 13739  004B6E  0EF1               	movlw	241
 13740  004B70                     u11617:
 13741  004B70  2EE8               	decfsz	wreg,f,c
 13742  004B72  D7FE               	bra	u11617
 13743  004B74  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13744  004B76  D7FC               	bra	u11617
 13745  004B78  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 13746  004B7A  D7FA               	bra	u11617
 13747  004B7C                     l1301:
 13748  004B7C  A281               	btfss	3969,1,c	;volatile
 13749  004B7E  D7FE               	goto	l1301
 13750  004B80                     l1304:
 13751  004B80  B281               	btfsc	3969,1,c	;volatile
 13752  004B82  D7FE               	goto	l1304
 13753                           
 13754                           ;Test.c: 87: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 13755  004B84  0E01               	movlw	1
 13756  004B86  EC69  F030         	call	_lcdInst
 13757  004B8A  0E68               	movlw	104
 13758  004B8C  0100               	movlb	0	; () banked
 13759  004B8E  6FAB               	movwf	??_algorithmTest& (0+255),b
 13760  004B90  0EE4               	movlw	228
 13761  004B92                     u11627:
 13762  004B92  2EE8               	decfsz	wreg,f,c
 13763  004B94  D7FE               	bra	u11627
 13764  004B96  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13765  004B98  D7FC               	bra	u11627
 13766  004B9A  F000               	nop	
 13767  004B9C  0E80               	movlw	128
 13768  004B9E  EC69  F030         	call	_lcdInst
 13769                           
 13770                           ;Test.c: 92: printf("ALG1: 9 POPNOTAB");
 13771  004BA2  0E5D               	movlw	low STR_72
 13772  004BA4  0100               	movlb	0	; () banked
 13773  004BA6  6F8E               	movwf	printf@f& (0+255),b
 13774  004BA8  0EFC               	movlw	high STR_72
 13775  004BAA  0100               	movlb	0	; () banked
 13776  004BAC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13777  004BAE  ECE7  F00E         	call	_printf	;wreg free
 13778                           
 13779                           ;Test.c: 99: printf("ALG2: 12 CANS");
 13780  004BB2  0E1E               	movlw	low STR_73
 13781  004BB4  0100               	movlb	0	; () banked
 13782  004BB6  6F8E               	movwf	printf@f& (0+255),b
 13783  004BB8  0EFF               	movlw	high STR_73
 13784  004BBA  0100               	movlb	0	; () banked
 13785  004BBC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13786  004BBE  ECE7  F00E         	call	_printf	;wreg free
 13787                           
 13788                           ;Test.c: 108: printf("ALG3: 1 CAN");
 13789  004BC2  0E64               	movlw	low STR_74
 13790  004BC4  0100               	movlb	0	; () banked
 13791  004BC6  6F8E               	movwf	printf@f& (0+255),b
 13792  004BC8  0EFF               	movlw	high STR_74
 13793  004BCA  0100               	movlb	0	; () banked
 13794  004BCC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13795  004BCE  ECE7  F00E         	call	_printf	;wreg free
 13796                           
 13797                           ;Test.c: 114: printf("ALG4: ALL CANS");
 13798  004BD2  0EE3               	movlw	low STR_75
 13799  004BD4  0100               	movlb	0	; () banked
 13800  004BD6  6F8E               	movwf	printf@f& (0+255),b
 13801  004BD8  0EFE               	movlw	high STR_75
 13802  004BDA  0100               	movlb	0	; () banked
 13803  004BDC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13804  004BDE  ECE7  F00E         	call	_printf	;wreg free
 13805                           
 13806                           ;Test.c: 119: printf("ALG5: NO CANS");
 13807  004BE2  0E2C               	movlw	low STR_76
 13808  004BE4  0100               	movlb	0	; () banked
 13809  004BE6  6F8E               	movwf	printf@f& (0+255),b
 13810  004BE8  0EFF               	movlw	high STR_76
 13811  004BEA  0100               	movlb	0	; () banked
 13812  004BEC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13813  004BEE  ECE7  F00E         	call	_printf	;wreg free
 13814  004BF2  0012               	return		;funcret
 13815  004BF4                     __end_of_algorithmTest:
 13816                           	opt stack 0
 13817                           tblptru	equ	0xFF8
 13818                           tblptrh	equ	0xFF7
 13819                           tblptrl	equ	0xFF6
 13820                           tablat	equ	0xFF5
 13821                           prodh	equ	0xFF4
 13822                           prodl	equ	0xFF3
 13823                           intcon	equ	0xFF2
 13824                           intcon2	equ	0xFF1
 13825                           intcon3	equ	0xFF0
 13826                           postinc0	equ	0xFEE
 13827                           wreg	equ	0xFE8
 13828                           postdec1	equ	0xFE5
 13829                           fsr1l	equ	0xFE1
 13830                           indf2	equ	0xFDF
 13831                           postinc2	equ	0xFDE
 13832                           postdec2	equ	0xFDD
 13833                           fsr2h	equ	0xFDA
 13834                           fsr2l	equ	0xFD9
 13835                           status	equ	0xFD8
 13836                           
 13837 ;; *************** function _actuatorTest *****************
 13838 ;; Defined at:
 13839 ;;		line 230 in file "Test.c"
 13840 ;; Parameters:    Size  Location     Type
 13841 ;;		None
 13842 ;; Auto vars:     Size  Location     Type
 13843 ;;  i               1   45[BANK0 ] unsigned char 
 13844 ;;  i               1   67[BANK0 ] unsigned char 
 13845 ;;  i               1   66[BANK0 ] unsigned char 
 13846 ;;  i               1   65[BANK0 ] unsigned char 
 13847 ;;  i               1   64[BANK0 ] unsigned char 
 13848 ;;  i               1   63[BANK0 ] unsigned char 
 13849 ;;  i               1   62[BANK0 ] unsigned char 
 13850 ;;  i               1   61[BANK0 ] unsigned char 
 13851 ;;  i               1   60[BANK0 ] unsigned char 
 13852 ;;  i               1   59[BANK0 ] unsigned char 
 13853 ;;  i               1   58[BANK0 ] unsigned char 
 13854 ;;  i               1   57[BANK0 ] unsigned char 
 13855 ;;  i               1   56[BANK0 ] unsigned char 
 13856 ;;  i               1   55[BANK0 ] unsigned char 
 13857 ;;  i               1   54[BANK0 ] unsigned char 
 13858 ;;  i               1   53[BANK0 ] unsigned char 
 13859 ;;  i               1   52[BANK0 ] unsigned char 
 13860 ;;  i               1   51[BANK0 ] unsigned char 
 13861 ;;  i               1   50[BANK0 ] unsigned char 
 13862 ;;  i               1   49[BANK0 ] unsigned char 
 13863 ;;  i               1   48[BANK0 ] unsigned char 
 13864 ;;  i               1   47[BANK0 ] unsigned char 
 13865 ;;  i               1   46[BANK0 ] unsigned char 
 13866 ;;  i               2   68[BANK0 ] int 
 13867 ;; Return value:  Size  Location     Type
 13868 ;;                  1    wreg      void 
 13869 ;; Registers used:
 13870 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13871 ;; Tracked objects:
 13872 ;;		On entry : 0/0
 13873 ;;		On exit  : 0/0
 13874 ;;		Unchanged: 0/0
 13875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13877 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13878 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13879 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13880 ;;Total ram usage:       27 bytes
 13881 ;; Hardware stack levels used:    1
 13882 ;; Hardware stack levels required when called:   10
 13883 ;; This function calls:
 13884 ;;		_lcdInst
 13885 ;;		_printf
 13886 ;;		_updateServoPosition
 13887 ;; This function is called by:
 13888 ;;		_Test
 13889 ;; This function uses a non-reentrant model
 13890 ;;
 13891                           
 13892                           	psect	text45
 13893  0008DA                     __ptext45:
 13894                           	opt stack 0
 13895  0008DA                     _actuatorTest:
 13896                           	opt stack 19
 13897                           
 13898                           ;Test.c: 232: int i = 0;
 13899                           
 13900                           ;incstack = 0
 13901  0008DA  0E00               	movlw	0
 13902  0008DC  0100               	movlb	0	; () banked
 13903  0008DE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13904  0008E0  0E00               	movlw	0
 13905  0008E2  6FC4               	movwf	actuatorTest@i& (0+255),b
 13906                           
 13907                           ; BSR set to: 0
 13908                           ;Test.c: 234: (INTCONbits.GIE = 1);
 13909  0008E4  8EF2               	bsf	intcon,7,c	;volatile
 13910                           
 13911                           ; BSR set to: 0
 13912                           ;Test.c: 235: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13913  0008E6  0E01               	movlw	1
 13914  0008E8  EC69  F030         	call	_lcdInst
 13915  0008EC  0E68               	movlw	104
 13916  0008EE  0100               	movlb	0	; () banked
 13917  0008F0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13918  0008F2  0EE4               	movlw	228
 13919  0008F4                     u11637:
 13920  0008F4  2EE8               	decfsz	wreg,f,c
 13921  0008F6  D7FE               	bra	u11637
 13922  0008F8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13923  0008FA  D7FC               	bra	u11637
 13924  0008FC  F000               	nop	
 13925  0008FE  0E80               	movlw	128
 13926  000900  EC69  F030         	call	_lcdInst
 13927                           
 13928                           ;Test.c: 236: printf("ACTUATORS");
 13929  000904  0E90               	movlw	low STR_89
 13930  000906  0100               	movlb	0	; () banked
 13931  000908  6F8E               	movwf	printf@f& (0+255),b
 13932  00090A  0EFF               	movlw	high STR_89
 13933  00090C  0100               	movlb	0	; () banked
 13934  00090E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13935  000910  ECE7  F00E         	call	_printf	;wreg free
 13936                           
 13937                           ;Test.c: 237: lcdInst(0b11000000);;
 13938  000914  0EC0               	movlw	192
 13939  000916  EC69  F030         	call	_lcdInst
 13940                           
 13941                           ;Test.c: 238: printf("PUSH TO START");
 13942  00091A  0E3A               	movlw	low STR_71
 13943  00091C  0100               	movlb	0	; () banked
 13944  00091E  6F8E               	movwf	printf@f& (0+255),b
 13945  000920  0EFF               	movlw	high STR_71
 13946  000922  0100               	movlb	0	; () banked
 13947  000924  6F8F               	movwf	(printf@f+1)& (0+255),b
 13948  000926  ECE7  F00E         	call	_printf	;wreg free
 13949                           
 13950                           ;Test.c: 239: _delay((unsigned long)((100)*(32000000/4000.0)));
 13951  00092A  0E05               	movlw	5
 13952  00092C  0100               	movlb	0	; () banked
 13953  00092E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13954  000930  0E0F               	movlw	15
 13955  000932  0100               	movlb	0	; () banked
 13956  000934  6FAB               	movwf	??_actuatorTest& (0+255),b
 13957  000936  0EF1               	movlw	241
 13958  000938                     u11647:
 13959  000938  2EE8               	decfsz	wreg,f,c
 13960  00093A  D7FE               	bra	u11647
 13961  00093C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13962  00093E  D7FC               	bra	u11647
 13963  000940  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13964  000942  D7FA               	bra	u11647
 13965  000944                     l1357:
 13966  000944  A281               	btfss	3969,1,c	;volatile
 13967  000946  D7FE               	goto	l1357
 13968  000948                     l1360:
 13969  000948  B281               	btfsc	3969,1,c	;volatile
 13970  00094A  D7FE               	goto	l1360
 13971                           
 13972                           ;Test.c: 242: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13973  00094C  0E01               	movlw	1
 13974  00094E  EC69  F030         	call	_lcdInst
 13975  000952  0E68               	movlw	104
 13976  000954  0100               	movlb	0	; () banked
 13977  000956  6FAB               	movwf	??_actuatorTest& (0+255),b
 13978  000958  0EE4               	movlw	228
 13979  00095A                     u11657:
 13980  00095A  2EE8               	decfsz	wreg,f,c
 13981  00095C  D7FE               	bra	u11657
 13982  00095E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13983  000960  D7FC               	bra	u11657
 13984  000962  F000               	nop	
 13985  000964  0E80               	movlw	128
 13986  000966  EC69  F030         	call	_lcdInst
 13987                           
 13988                           ;Test.c: 247: printf("TST: DC MOTORS");
 13989  00096A  0EF2               	movlw	low STR_91
 13990  00096C  0100               	movlb	0	; () banked
 13991  00096E  6F8E               	movwf	printf@f& (0+255),b
 13992  000970  0EFE               	movlw	high STR_91
 13993  000972  0100               	movlb	0	; () banked
 13994  000974  6F8F               	movwf	(printf@f+1)& (0+255),b
 13995  000976  ECE7  F00E         	call	_printf	;wreg free
 13996                           
 13997                           ;Test.c: 248: lcdInst(0b11000000);;
 13998  00097A  0EC0               	movlw	192
 13999  00097C  EC69  F030         	call	_lcdInst
 14000                           
 14001                           ;Test.c: 249: printf("PIN RA5 HIGH.");
 14002  000980  0E10               	movlw	low STR_92
 14003  000982  0100               	movlb	0	; () banked
 14004  000984  6F8E               	movwf	printf@f& (0+255),b
 14005  000986  0EFF               	movlw	high STR_92
 14006  000988  0100               	movlb	0	; () banked
 14007  00098A  6F8F               	movwf	(printf@f+1)& (0+255),b
 14008  00098C  ECE7  F00E         	call	_printf	;wreg free
 14009                           
 14010                           ;Test.c: 250: LATBbits.LATB2 = 1;
 14011  000990  848A               	bsf	3978,2,c	;volatile
 14012                           
 14013                           ;Test.c: 251: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 14014  000992  0E00               	movlw	0
 14015  000994  0100               	movlb	0	; () banked
 14016  000996  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 14017  000998  0E00               	movlw	0
 14018  00099A  6FC4               	movwf	actuatorTest@i& (0+255),b
 14019                           
 14020                           ; BSR set to: 0
 14021  00099C  0100               	movlb	0	; () banked
 14022  00099E  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14023  0009A0  D008               	goto	l8766
 14024  0009A2  0100               	movlb	0	; () banked
 14025  0009A4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 14026  0009A6  E123               	bnz	l1364
 14027  0009A8  0E05               	movlw	5
 14028  0009AA  0100               	movlb	0	; () banked
 14029  0009AC  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 14030  0009AE  B0D8               	btfsc	status,0,c
 14031  0009B0  D01E               	goto	l1364
 14032  0009B2                     l8766:
 14033                           
 14034                           ; BSR set to: 0
 14035  0009B2  0E00               	movlw	0
 14036  0009B4  0100               	movlb	0	; () banked
 14037  0009B6  6FAD               	movwf	actuatorTest@i_1756& (0+255),b
 14038  0009B8                     l8768:
 14039                           
 14040                           ; BSR set to: 0
 14041  0009B8  0E63               	movlw	99
 14042  0009BA  0100               	movlb	0	; () banked
 14043  0009BC  65AD               	cpfsgt	actuatorTest@i_1756& (0+255),b
 14044  0009BE  D001               	goto	l8772
 14045  0009C0  D00C               	goto	l8776
 14046  0009C2                     l8772:
 14047                           
 14048                           ; BSR set to: 0
 14049  0009C2  0E68               	movlw	104
 14050  0009C4  0100               	movlb	0	; () banked
 14051  0009C6  6FAB               	movwf	??_actuatorTest& (0+255),b
 14052  0009C8  0EE4               	movlw	228
 14053  0009CA                     u11667:
 14054  0009CA  2EE8               	decfsz	wreg,f,c
 14055  0009CC  D7FE               	bra	u11667
 14056  0009CE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14057  0009D0  D7FC               	bra	u11667
 14058  0009D2  F000               	nop	
 14059  0009D4  0100               	movlb	0	; () banked
 14060  0009D6  2BAD               	incf	actuatorTest@i_1756& (0+255),f,b
 14061  0009D8  D7EF               	goto	l8768
 14062  0009DA                     l8776:
 14063                           
 14064                           ; BSR set to: 0
 14065  0009DA  0100               	movlb	0	; () banked
 14066  0009DC  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 14067  0009DE  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 14068                           
 14069                           ; BSR set to: 0
 14070  0009E0  0100               	movlb	0	; () banked
 14071  0009E2  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14072  0009E4  D7E6               	goto	l8766
 14073  0009E6  0100               	movlb	0	; () banked
 14074  0009E8  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 14075  0009EA  E101               	bnz	u8050
 14076  0009EC  D7DD               	goto	L11
 14077  0009EE                     u8050:
 14078  0009EE                     l1364:
 14079                           
 14080                           ; BSR set to: 0
 14081                           ;Test.c: 252: LATBbits.LATB2 = 0;
 14082  0009EE  948A               	bcf	3978,2,c	;volatile
 14083                           
 14084                           ; BSR set to: 0
 14085                           ;Test.c: 253: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14086  0009F0  0E01               	movlw	1
 14087  0009F2  EC69  F030         	call	_lcdInst
 14088  0009F6  0E68               	movlw	104
 14089  0009F8  0100               	movlb	0	; () banked
 14090  0009FA  6FAB               	movwf	??_actuatorTest& (0+255),b
 14091  0009FC  0EE4               	movlw	228
 14092  0009FE                     u11677:
 14093  0009FE  2EE8               	decfsz	wreg,f,c
 14094  000A00  D7FE               	bra	u11677
 14095  000A02  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14096  000A04  D7FC               	bra	u11677
 14097  000A06  F000               	nop	
 14098  000A08  0E80               	movlw	128
 14099  000A0A  EC69  F030         	call	_lcdInst
 14100                           
 14101                           ;Test.c: 259: printf("TST: COND SOLN'D");
 14102  000A0E  0E6E               	movlw	low STR_93
 14103  000A10  0100               	movlb	0	; () banked
 14104  000A12  6F8E               	movwf	printf@f& (0+255),b
 14105  000A14  0EFC               	movlw	high STR_93
 14106  000A16  0100               	movlb	0	; () banked
 14107  000A18  6F8F               	movwf	(printf@f+1)& (0+255),b
 14108  000A1A  ECE7  F00E         	call	_printf	;wreg free
 14109                           
 14110                           ;Test.c: 260: lcdInst(0b11000000);;
 14111  000A1E  0EC0               	movlw	192
 14112  000A20  EC69  F030         	call	_lcdInst
 14113                           
 14114                           ;Test.c: 261: printf("PIN RA3...");
 14115  000A24  0E70               	movlw	low STR_94
 14116  000A26  0100               	movlb	0	; () banked
 14117  000A28  6F8E               	movwf	printf@f& (0+255),b
 14118  000A2A  0EFF               	movlw	high STR_94
 14119  000A2C  0100               	movlb	0	; () banked
 14120  000A2E  6F8F               	movwf	(printf@f+1)& (0+255),b
 14121  000A30  ECE7  F00E         	call	_printf	;wreg free
 14122                           
 14123                           ;Test.c: 262: for(i=0;i<5;i++){
 14124  000A34  0E00               	movlw	0
 14125  000A36  0100               	movlb	0	; () banked
 14126  000A38  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 14127  000A3A  0E00               	movlw	0
 14128  000A3C  6FC4               	movwf	actuatorTest@i& (0+255),b
 14129                           
 14130                           ; BSR set to: 0
 14131  000A3E  0100               	movlb	0	; () banked
 14132  000A40  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14133  000A42  D008               	goto	l1367
 14134  000A44  0100               	movlb	0	; () banked
 14135  000A46  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 14136  000A48  E12C               	bnz	l1368
 14137  000A4A  0E05               	movlw	5
 14138  000A4C  0100               	movlb	0	; () banked
 14139  000A4E  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 14140  000A50  B0D8               	btfsc	status,0,c
 14141  000A52  D027               	goto	l1368
 14142  000A54                     l1367:
 14143                           
 14144                           ; BSR set to: 0
 14145                           ;Test.c: 263: LATCbits.LATC7 = 1;
 14146  000A54  8E8B               	bsf	3979,7,c	;volatile
 14147                           
 14148                           ; BSR set to: 0
 14149                           ;Test.c: 264: _delay((unsigned long)((300)*(32000000/4000.0)));
 14150  000A56  0E0D               	movlw	13
 14151  000A58  0100               	movlb	0	; () banked
 14152  000A5A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 14153  000A5C  0E2D               	movlw	45
 14154  000A5E  0100               	movlb	0	; () banked
 14155  000A60  6FAB               	movwf	??_actuatorTest& (0+255),b
 14156  000A62  0ED7               	movlw	215
 14157  000A64                     u11687:
 14158  000A64  2EE8               	decfsz	wreg,f,c
 14159  000A66  D7FE               	bra	u11687
 14160  000A68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14161  000A6A  D7FC               	bra	u11687
 14162  000A6C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 14163  000A6E  D7FA               	bra	u11687
 14164  000A70  D000               	nop2	
 14165                           
 14166                           ;Test.c: 265: LATCbits.LATC7 = !1;
 14167  000A72  9E8B               	bcf	3979,7,c	;volatile
 14168                           
 14169                           ;Test.c: 266: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 14170  000A74  0E1D               	movlw	29
 14171  000A76  0100               	movlb	0	; () banked
 14172  000A78  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 14173  000A7A  0E69               	movlw	105
 14174  000A7C  0100               	movlb	0	; () banked
 14175  000A7E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14176  000A80  0EA5               	movlw	165
 14177  000A82                     u11697:
 14178  000A82  2EE8               	decfsz	wreg,f,c
 14179  000A84  D7FE               	bra	u11697
 14180  000A86  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14181  000A88  D7FC               	bra	u11697
 14182  000A8A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 14183  000A8C  D7FA               	bra	u11697
 14184  000A8E  0100               	movlb	0	; () banked
 14185  000A90  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 14186  000A92  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 14187  000A94  0100               	movlb	0	; () banked
 14188  000A96  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14189  000A98  D7DD               	goto	l1367
 14190  000A9A  0100               	movlb	0	; () banked
 14191  000A9C  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 14192  000A9E  E101               	bnz	u8070
 14193  000AA0  D7D4               	goto	L12
 14194  000AA2                     u8070:
 14195  000AA2                     l1368:
 14196                           
 14197                           ; BSR set to: 0
 14198                           ;Test.c: 267: }
 14199                           ;Test.c: 268: LATCbits.LATC7 = !1;
 14200  000AA2  9E8B               	bcf	3979,7,c	;volatile
 14201                           
 14202                           ; BSR set to: 0
 14203                           ;Test.c: 269: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14204  000AA4  0E01               	movlw	1
 14205  000AA6  EC69  F030         	call	_lcdInst
 14206  000AAA  0E68               	movlw	104
 14207  000AAC  0100               	movlb	0	; () banked
 14208  000AAE  6FAB               	movwf	??_actuatorTest& (0+255),b
 14209  000AB0  0EE4               	movlw	228
 14210  000AB2                     u11707:
 14211  000AB2  2EE8               	decfsz	wreg,f,c
 14212  000AB4  D7FE               	bra	u11707
 14213  000AB6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14214  000AB8  D7FC               	bra	u11707
 14215  000ABA  F000               	nop	
 14216  000ABC  0E80               	movlw	128
 14217  000ABE  EC69  F030         	call	_lcdInst
 14218                           
 14219                           ;Test.c: 275: printf("TST: PUSH SOLN'D");
 14220  000AC2  0E7F               	movlw	low STR_95
 14221  000AC4  0100               	movlb	0	; () banked
 14222  000AC6  6F8E               	movwf	printf@f& (0+255),b
 14223  000AC8  0EFC               	movlw	high STR_95
 14224  000ACA  0100               	movlb	0	; () banked
 14225  000ACC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14226  000ACE  ECE7  F00E         	call	_printf	;wreg free
 14227                           
 14228                           ;Test.c: 276: lcdInst(0b11000000);;
 14229  000AD2  0EC0               	movlw	192
 14230  000AD4  EC69  F030         	call	_lcdInst
 14231                           
 14232                           ;Test.c: 277: printf("PIN RA4...");
 14233  000AD8  0E7B               	movlw	low STR_96
 14234  000ADA  0100               	movlb	0	; () banked
 14235  000ADC  6F8E               	movwf	printf@f& (0+255),b
 14236  000ADE  0EFF               	movlw	high STR_96
 14237  000AE0  0100               	movlb	0	; () banked
 14238  000AE2  6F8F               	movwf	(printf@f+1)& (0+255),b
 14239  000AE4  ECE7  F00E         	call	_printf	;wreg free
 14240                           
 14241                           ;Test.c: 278: for(i=0;i<5;i++){
 14242  000AE8  0E00               	movlw	0
 14243  000AEA  0100               	movlb	0	; () banked
 14244  000AEC  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 14245  000AEE  0E00               	movlw	0
 14246  000AF0  6FC4               	movwf	actuatorTest@i& (0+255),b
 14247                           
 14248                           ; BSR set to: 0
 14249  000AF2  0100               	movlb	0	; () banked
 14250  000AF4  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14251  000AF6  D008               	goto	l1369
 14252  000AF8  0100               	movlb	0	; () banked
 14253  000AFA  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 14254  000AFC  E12C               	bnz	l1370
 14255  000AFE  0E05               	movlw	5
 14256  000B00  0100               	movlb	0	; () banked
 14257  000B02  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 14258  000B04  B0D8               	btfsc	status,0,c
 14259  000B06  D027               	goto	l1370
 14260  000B08                     l1369:
 14261                           
 14262                           ; BSR set to: 0
 14263                           ;Test.c: 279: LATAbits.LATA4 = 1;
 14264  000B08  8889               	bsf	3977,4,c	;volatile
 14265                           
 14266                           ; BSR set to: 0
 14267                           ;Test.c: 280: _delay((unsigned long)((300)*(32000000/4000.0)));
 14268  000B0A  0E0D               	movlw	13
 14269  000B0C  0100               	movlb	0	; () banked
 14270  000B0E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 14271  000B10  0E2D               	movlw	45
 14272  000B12  0100               	movlb	0	; () banked
 14273  000B14  6FAB               	movwf	??_actuatorTest& (0+255),b
 14274  000B16  0ED7               	movlw	215
 14275  000B18                     u11717:
 14276  000B18  2EE8               	decfsz	wreg,f,c
 14277  000B1A  D7FE               	bra	u11717
 14278  000B1C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14279  000B1E  D7FC               	bra	u11717
 14280  000B20  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 14281  000B22  D7FA               	bra	u11717
 14282  000B24  D000               	nop2	
 14283                           
 14284                           ;Test.c: 281: LATAbits.LATA4 = !1;
 14285  000B26  9889               	bcf	3977,4,c	;volatile
 14286                           
 14287                           ;Test.c: 282: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 14288  000B28  0E1D               	movlw	29
 14289  000B2A  0100               	movlb	0	; () banked
 14290  000B2C  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 14291  000B2E  0E69               	movlw	105
 14292  000B30  0100               	movlb	0	; () banked
 14293  000B32  6FAB               	movwf	??_actuatorTest& (0+255),b
 14294  000B34  0EA5               	movlw	165
 14295  000B36                     u11727:
 14296  000B36  2EE8               	decfsz	wreg,f,c
 14297  000B38  D7FE               	bra	u11727
 14298  000B3A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14299  000B3C  D7FC               	bra	u11727
 14300  000B3E  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 14301  000B40  D7FA               	bra	u11727
 14302  000B42  0100               	movlb	0	; () banked
 14303  000B44  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 14304  000B46  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 14305  000B48  0100               	movlb	0	; () banked
 14306  000B4A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14307  000B4C  D7DD               	goto	l1369
 14308  000B4E  0100               	movlb	0	; () banked
 14309  000B50  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 14310  000B52  E101               	bnz	u8090
 14311  000B54  D7D4               	goto	L13
 14312  000B56                     u8090:
 14313  000B56                     l1370:
 14314                           
 14315                           ; BSR set to: 0
 14316                           ;Test.c: 283: }
 14317                           ;Test.c: 284: LATAbits.LATA4 = !1;
 14318  000B56  9889               	bcf	3977,4,c	;volatile
 14319                           
 14320                           ; BSR set to: 0
 14321                           ;Test.c: 285: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14322  000B58  0E01               	movlw	1
 14323  000B5A  EC69  F030         	call	_lcdInst
 14324  000B5E  0E68               	movlw	104
 14325  000B60  0100               	movlb	0	; () banked
 14326  000B62  6FAB               	movwf	??_actuatorTest& (0+255),b
 14327  000B64  0EE4               	movlw	228
 14328  000B66                     u11737:
 14329  000B66  2EE8               	decfsz	wreg,f,c
 14330  000B68  D7FE               	bra	u11737
 14331  000B6A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14332  000B6C  D7FC               	bra	u11737
 14333  000B6E  F000               	nop	
 14334  000B70  0E80               	movlw	128
 14335  000B72  EC69  F030         	call	_lcdInst
 14336                           
 14337                           ;Test.c: 288: machine_state = Sorting_state;
 14338  000B76  0E01               	movlw	1
 14339  000B78  0100               	movlb	0	; () banked
 14340  000B7A  6FFC               	movwf	_machine_state& (0+255),b
 14341                           
 14342                           ; BSR set to: 0
 14343                           ;Test.c: 289: was_low_1 = 0;
 14344  000B7C  0E00               	movlw	0
 14345  000B7E  6E78               	movwf	_was_low_1+1,c	;volatile
 14346  000B80  0E00               	movlw	0
 14347  000B82  6E77               	movwf	_was_low_1,c	;volatile
 14348                           
 14349                           ; BSR set to: 0
 14350                           ;Test.c: 290: was_low_1 = 0;
 14351  000B84  0E00               	movlw	0
 14352  000B86  6E78               	movwf	_was_low_1+1,c	;volatile
 14353  000B88  0E00               	movlw	0
 14354  000B8A  6E77               	movwf	_was_low_1,c	;volatile
 14355                           
 14356                           ; BSR set to: 0
 14357                           ;Test.c: 297: printf("TST: PAN SERVO");
 14358  000B8C  0ED4               	movlw	low STR_97
 14359  000B8E  0100               	movlb	0	; () banked
 14360  000B90  6F8E               	movwf	printf@f& (0+255),b
 14361  000B92  0EFE               	movlw	high STR_97
 14362  000B94  0100               	movlb	0	; () banked
 14363  000B96  6F8F               	movwf	(printf@f+1)& (0+255),b
 14364  000B98  ECE7  F00E         	call	_printf	;wreg free
 14365                           
 14366                           ;Test.c: 298: lcdInst(0b11000000);;
 14367  000B9C  0EC0               	movlw	192
 14368  000B9E  EC69  F030         	call	_lcdInst
 14369                           
 14370                           ;Test.c: 299: printf("MIDDLE -- 2s    ");
 14371  000BA2  0EE6               	movlw	low STR_98
 14372  000BA4  0100               	movlb	0	; () banked
 14373  000BA6  6F8E               	movwf	printf@f& (0+255),b
 14374  000BA8  0EFB               	movlw	high STR_98
 14375  000BAA  0100               	movlb	0	; () banked
 14376  000BAC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14377  000BAE  ECE7  F00E         	call	_printf	;wreg free
 14378                           
 14379                           ;Test.c: 300: updateServoPosition(1200, 1);
 14380  000BB2  0E04               	movlw	4
 14381  000BB4  0100               	movlb	0	; () banked
 14382  000BB6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14383  000BB8  0EB0               	movlw	176
 14384  000BBA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14385  000BBC  0E00               	movlw	0
 14386  000BBE  0100               	movlb	0	; () banked
 14387  000BC0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14388  000BC2  0E01               	movlw	1
 14389  000BC4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14390  000BC6  EC65  F029         	call	_updateServoPosition	;wreg free
 14391                           
 14392                           ;Test.c: 301: TMR1ON = 1;
 14393  000BCA  80CD               	bsf	4045,0,c	;volatile
 14394                           
 14395                           ;Test.c: 302: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14396  000BCC  0E00               	movlw	0
 14397  000BCE  0100               	movlb	0	; () banked
 14398  000BD0  6FAE               	movwf	actuatorTest@i_1763& (0+255),b
 14399  000BD2                     l8852:
 14400                           
 14401                           ; BSR set to: 0
 14402  000BD2  0E63               	movlw	99
 14403  000BD4  0100               	movlb	0	; () banked
 14404  000BD6  65AE               	cpfsgt	actuatorTest@i_1763& (0+255),b
 14405  000BD8  D001               	goto	l8856
 14406  000BDA  D00C               	goto	l8860
 14407  000BDC                     l8856:
 14408                           
 14409                           ; BSR set to: 0
 14410  000BDC  0E68               	movlw	104
 14411  000BDE  0100               	movlb	0	; () banked
 14412  000BE0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14413  000BE2  0EE4               	movlw	228
 14414  000BE4                     u11747:
 14415  000BE4  2EE8               	decfsz	wreg,f,c
 14416  000BE6  D7FE               	bra	u11747
 14417  000BE8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14418  000BEA  D7FC               	bra	u11747
 14419  000BEC  F000               	nop	
 14420  000BEE  0100               	movlb	0	; () banked
 14421  000BF0  2BAE               	incf	actuatorTest@i_1763& (0+255),f,b
 14422  000BF2  D7EF               	goto	l8852
 14423  000BF4                     l8860:
 14424                           
 14425                           ; BSR set to: 0
 14426  000BF4  0E00               	movlw	0
 14427  000BF6  0100               	movlb	0	; () banked
 14428  000BF8  6FAF               	movwf	actuatorTest@i_1764& (0+255),b
 14429  000BFA                     l8862:
 14430                           
 14431                           ; BSR set to: 0
 14432  000BFA  0E63               	movlw	99
 14433  000BFC  0100               	movlb	0	; () banked
 14434  000BFE  65AF               	cpfsgt	actuatorTest@i_1764& (0+255),b
 14435  000C00  D001               	goto	l8866
 14436  000C02  D00C               	goto	l8870
 14437  000C04                     l8866:
 14438                           
 14439                           ; BSR set to: 0
 14440  000C04  0E68               	movlw	104
 14441  000C06  0100               	movlb	0	; () banked
 14442  000C08  6FAB               	movwf	??_actuatorTest& (0+255),b
 14443  000C0A  0EE4               	movlw	228
 14444  000C0C                     u11757:
 14445  000C0C  2EE8               	decfsz	wreg,f,c
 14446  000C0E  D7FE               	bra	u11757
 14447  000C10  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14448  000C12  D7FC               	bra	u11757
 14449  000C14  F000               	nop	
 14450  000C16  0100               	movlb	0	; () banked
 14451  000C18  2BAF               	incf	actuatorTest@i_1764& (0+255),f,b
 14452  000C1A  D7EF               	goto	l8862
 14453  000C1C                     l8870:
 14454                           
 14455                           ; BSR set to: 0
 14456                           ;Test.c: 304: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14457  000C1C  0E80               	movlw	128
 14458  000C1E  EC69  F030         	call	_lcdInst
 14459  000C22  0EC0               	movlw	192
 14460  000C24  EC69  F030         	call	_lcdInst
 14461                           
 14462                           ;Test.c: 305: printf("RIGHT -- 2s     ");
 14463  000C28  0ED5               	movlw	low STR_99
 14464  000C2A  0100               	movlb	0	; () banked
 14465  000C2C  6F8E               	movwf	printf@f& (0+255),b
 14466  000C2E  0EFB               	movlw	high STR_99
 14467  000C30  0100               	movlb	0	; () banked
 14468  000C32  6F8F               	movwf	(printf@f+1)& (0+255),b
 14469  000C34  ECE7  F00E         	call	_printf	;wreg free
 14470                           
 14471                           ;Test.c: 306: updateServoPosition(400, 1);
 14472  000C38  0E01               	movlw	1
 14473  000C3A  0100               	movlb	0	; () banked
 14474  000C3C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14475  000C3E  0E90               	movlw	144
 14476  000C40  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14477  000C42  0E00               	movlw	0
 14478  000C44  0100               	movlb	0	; () banked
 14479  000C46  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14480  000C48  0E01               	movlw	1
 14481  000C4A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14482  000C4C  EC65  F029         	call	_updateServoPosition	;wreg free
 14483                           
 14484                           ;Test.c: 307: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14485  000C50  0E00               	movlw	0
 14486  000C52  0100               	movlb	0	; () banked
 14487  000C54  6FB0               	movwf	actuatorTest@i_1766& (0+255),b
 14488  000C56                     l8878:
 14489                           
 14490                           ; BSR set to: 0
 14491  000C56  0E63               	movlw	99
 14492  000C58  0100               	movlb	0	; () banked
 14493  000C5A  65B0               	cpfsgt	actuatorTest@i_1766& (0+255),b
 14494  000C5C  D001               	goto	l8882
 14495  000C5E  D00C               	goto	l8886
 14496  000C60                     l8882:
 14497                           
 14498                           ; BSR set to: 0
 14499  000C60  0E68               	movlw	104
 14500  000C62  0100               	movlb	0	; () banked
 14501  000C64  6FAB               	movwf	??_actuatorTest& (0+255),b
 14502  000C66  0EE4               	movlw	228
 14503  000C68                     u11767:
 14504  000C68  2EE8               	decfsz	wreg,f,c
 14505  000C6A  D7FE               	bra	u11767
 14506  000C6C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14507  000C6E  D7FC               	bra	u11767
 14508  000C70  F000               	nop	
 14509  000C72  0100               	movlb	0	; () banked
 14510  000C74  2BB0               	incf	actuatorTest@i_1766& (0+255),f,b
 14511  000C76  D7EF               	goto	l8878
 14512  000C78                     l8886:
 14513                           
 14514                           ; BSR set to: 0
 14515  000C78  0E00               	movlw	0
 14516  000C7A  0100               	movlb	0	; () banked
 14517  000C7C  6FB1               	movwf	actuatorTest@i_1767& (0+255),b
 14518  000C7E                     l8888:
 14519                           
 14520                           ; BSR set to: 0
 14521  000C7E  0E63               	movlw	99
 14522  000C80  0100               	movlb	0	; () banked
 14523  000C82  65B1               	cpfsgt	actuatorTest@i_1767& (0+255),b
 14524  000C84  D001               	goto	l8892
 14525  000C86  D00C               	goto	l8896
 14526  000C88                     l8892:
 14527                           
 14528                           ; BSR set to: 0
 14529  000C88  0E68               	movlw	104
 14530  000C8A  0100               	movlb	0	; () banked
 14531  000C8C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14532  000C8E  0EE4               	movlw	228
 14533  000C90                     u11777:
 14534  000C90  2EE8               	decfsz	wreg,f,c
 14535  000C92  D7FE               	bra	u11777
 14536  000C94  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14537  000C96  D7FC               	bra	u11777
 14538  000C98  F000               	nop	
 14539  000C9A  0100               	movlb	0	; () banked
 14540  000C9C  2BB1               	incf	actuatorTest@i_1767& (0+255),f,b
 14541  000C9E  D7EF               	goto	l8888
 14542  000CA0                     l8896:
 14543                           
 14544                           ; BSR set to: 0
 14545                           ;Test.c: 309: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14546  000CA0  0E80               	movlw	128
 14547  000CA2  EC69  F030         	call	_lcdInst
 14548  000CA6  0EC0               	movlw	192
 14549  000CA8  EC69  F030         	call	_lcdInst
 14550                           
 14551                           ;Test.c: 310: printf("LEFT -- 2s      ");
 14552  000CAC  0EB3               	movlw	low STR_100
 14553  000CAE  0100               	movlb	0	; () banked
 14554  000CB0  6F8E               	movwf	printf@f& (0+255),b
 14555  000CB2  0EFB               	movlw	high STR_100
 14556  000CB4  0100               	movlb	0	; () banked
 14557  000CB6  6F8F               	movwf	(printf@f+1)& (0+255),b
 14558  000CB8  ECE7  F00E         	call	_printf	;wreg free
 14559                           
 14560                           ;Test.c: 311: updateServoPosition(2500, 1);
 14561  000CBC  0E09               	movlw	9
 14562  000CBE  0100               	movlb	0	; () banked
 14563  000CC0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14564  000CC2  0EC4               	movlw	196
 14565  000CC4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14566  000CC6  0E00               	movlw	0
 14567  000CC8  0100               	movlb	0	; () banked
 14568  000CCA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14569  000CCC  0E01               	movlw	1
 14570  000CCE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14571  000CD0  EC65  F029         	call	_updateServoPosition	;wreg free
 14572                           
 14573                           ;Test.c: 312: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14574  000CD4  0E00               	movlw	0
 14575  000CD6  0100               	movlb	0	; () banked
 14576  000CD8  6FB2               	movwf	actuatorTest@i_1769& (0+255),b
 14577  000CDA                     l8904:
 14578                           
 14579                           ; BSR set to: 0
 14580  000CDA  0E63               	movlw	99
 14581  000CDC  0100               	movlb	0	; () banked
 14582  000CDE  65B2               	cpfsgt	actuatorTest@i_1769& (0+255),b
 14583  000CE0  D001               	goto	l8908
 14584  000CE2  D00C               	goto	l8912
 14585  000CE4                     l8908:
 14586                           
 14587                           ; BSR set to: 0
 14588  000CE4  0E68               	movlw	104
 14589  000CE6  0100               	movlb	0	; () banked
 14590  000CE8  6FAB               	movwf	??_actuatorTest& (0+255),b
 14591  000CEA  0EE4               	movlw	228
 14592  000CEC                     u11787:
 14593  000CEC  2EE8               	decfsz	wreg,f,c
 14594  000CEE  D7FE               	bra	u11787
 14595  000CF0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14596  000CF2  D7FC               	bra	u11787
 14597  000CF4  F000               	nop	
 14598  000CF6  0100               	movlb	0	; () banked
 14599  000CF8  2BB2               	incf	actuatorTest@i_1769& (0+255),f,b
 14600  000CFA  D7EF               	goto	l8904
 14601  000CFC                     l8912:
 14602                           
 14603                           ; BSR set to: 0
 14604  000CFC  0E00               	movlw	0
 14605  000CFE  0100               	movlb	0	; () banked
 14606  000D00  6FB3               	movwf	actuatorTest@i_1770& (0+255),b
 14607  000D02                     l8914:
 14608                           
 14609                           ; BSR set to: 0
 14610  000D02  0E63               	movlw	99
 14611  000D04  0100               	movlb	0	; () banked
 14612  000D06  65B3               	cpfsgt	actuatorTest@i_1770& (0+255),b
 14613  000D08  D001               	goto	l8918
 14614  000D0A  D00C               	goto	l8922
 14615  000D0C                     l8918:
 14616                           
 14617                           ; BSR set to: 0
 14618  000D0C  0E68               	movlw	104
 14619  000D0E  0100               	movlb	0	; () banked
 14620  000D10  6FAB               	movwf	??_actuatorTest& (0+255),b
 14621  000D12  0EE4               	movlw	228
 14622  000D14                     u11797:
 14623  000D14  2EE8               	decfsz	wreg,f,c
 14624  000D16  D7FE               	bra	u11797
 14625  000D18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14626  000D1A  D7FC               	bra	u11797
 14627  000D1C  F000               	nop	
 14628  000D1E  0100               	movlb	0	; () banked
 14629  000D20  2BB3               	incf	actuatorTest@i_1770& (0+255),f,b
 14630  000D22  D7EF               	goto	l8914
 14631  000D24                     l8922:
 14632                           
 14633                           ; BSR set to: 0
 14634                           ;Test.c: 314: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14635  000D24  0E80               	movlw	128
 14636  000D26  EC69  F030         	call	_lcdInst
 14637  000D2A  0EC0               	movlw	192
 14638  000D2C  EC69  F030         	call	_lcdInst
 14639                           
 14640                           ;Test.c: 315: printf("MID-LEFT -- 2s  ");
 14641  000D30  0E3B               	movlw	low STR_101
 14642  000D32  0100               	movlb	0	; () banked
 14643  000D34  6F8E               	movwf	printf@f& (0+255),b
 14644  000D36  0EFC               	movlw	high STR_101
 14645  000D38  0100               	movlb	0	; () banked
 14646  000D3A  6F8F               	movwf	(printf@f+1)& (0+255),b
 14647  000D3C  ECE7  F00E         	call	_printf	;wreg free
 14648                           
 14649                           ;Test.c: 316: updateServoPosition(1550, 1);
 14650  000D40  0E06               	movlw	6
 14651  000D42  0100               	movlb	0	; () banked
 14652  000D44  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14653  000D46  0E0E               	movlw	14
 14654  000D48  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14655  000D4A  0E00               	movlw	0
 14656  000D4C  0100               	movlb	0	; () banked
 14657  000D4E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14658  000D50  0E01               	movlw	1
 14659  000D52  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14660  000D54  EC65  F029         	call	_updateServoPosition	;wreg free
 14661                           
 14662                           ;Test.c: 317: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14663  000D58  0E00               	movlw	0
 14664  000D5A  0100               	movlb	0	; () banked
 14665  000D5C  6FB4               	movwf	actuatorTest@i_1772& (0+255),b
 14666  000D5E                     l8930:
 14667                           
 14668                           ; BSR set to: 0
 14669  000D5E  0E63               	movlw	99
 14670  000D60  0100               	movlb	0	; () banked
 14671  000D62  65B4               	cpfsgt	actuatorTest@i_1772& (0+255),b
 14672  000D64  D001               	goto	l8934
 14673  000D66  D00C               	goto	l8938
 14674  000D68                     l8934:
 14675                           
 14676                           ; BSR set to: 0
 14677  000D68  0E68               	movlw	104
 14678  000D6A  0100               	movlb	0	; () banked
 14679  000D6C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14680  000D6E  0EE4               	movlw	228
 14681  000D70                     u11807:
 14682  000D70  2EE8               	decfsz	wreg,f,c
 14683  000D72  D7FE               	bra	u11807
 14684  000D74  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14685  000D76  D7FC               	bra	u11807
 14686  000D78  F000               	nop	
 14687  000D7A  0100               	movlb	0	; () banked
 14688  000D7C  2BB4               	incf	actuatorTest@i_1772& (0+255),f,b
 14689  000D7E  D7EF               	goto	l8930
 14690  000D80                     l8938:
 14691                           
 14692                           ; BSR set to: 0
 14693  000D80  0E00               	movlw	0
 14694  000D82  0100               	movlb	0	; () banked
 14695  000D84  6FB5               	movwf	actuatorTest@i_1773& (0+255),b
 14696  000D86                     l8940:
 14697                           
 14698                           ; BSR set to: 0
 14699  000D86  0E63               	movlw	99
 14700  000D88  0100               	movlb	0	; () banked
 14701  000D8A  65B5               	cpfsgt	actuatorTest@i_1773& (0+255),b
 14702  000D8C  D001               	goto	l8944
 14703  000D8E  D00C               	goto	l8948
 14704  000D90                     l8944:
 14705                           
 14706                           ; BSR set to: 0
 14707  000D90  0E68               	movlw	104
 14708  000D92  0100               	movlb	0	; () banked
 14709  000D94  6FAB               	movwf	??_actuatorTest& (0+255),b
 14710  000D96  0EE4               	movlw	228
 14711  000D98                     u11817:
 14712  000D98  2EE8               	decfsz	wreg,f,c
 14713  000D9A  D7FE               	bra	u11817
 14714  000D9C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14715  000D9E  D7FC               	bra	u11817
 14716  000DA0  F000               	nop	
 14717  000DA2  0100               	movlb	0	; () banked
 14718  000DA4  2BB5               	incf	actuatorTest@i_1773& (0+255),f,b
 14719  000DA6  D7EF               	goto	l8940
 14720  000DA8                     l8948:
 14721                           
 14722                           ; BSR set to: 0
 14723                           ;Test.c: 319: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14724  000DA8  0E80               	movlw	128
 14725  000DAA  EC69  F030         	call	_lcdInst
 14726  000DAE  0EC0               	movlw	192
 14727  000DB0  EC69  F030         	call	_lcdInst
 14728                           
 14729                           ;Test.c: 320: printf("MID-RIGHT -- 2s ");
 14730  000DB4  0E4C               	movlw	low STR_102
 14731  000DB6  0100               	movlb	0	; () banked
 14732  000DB8  6F8E               	movwf	printf@f& (0+255),b
 14733  000DBA  0EFC               	movlw	high STR_102
 14734  000DBC  0100               	movlb	0	; () banked
 14735  000DBE  6F8F               	movwf	(printf@f+1)& (0+255),b
 14736  000DC0  ECE7  F00E         	call	_printf	;wreg free
 14737                           
 14738                           ;Test.c: 321: updateServoPosition(850, 1);
 14739  000DC4  0E03               	movlw	3
 14740  000DC6  0100               	movlb	0	; () banked
 14741  000DC8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14742  000DCA  0E52               	movlw	82
 14743  000DCC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14744  000DCE  0E00               	movlw	0
 14745  000DD0  0100               	movlb	0	; () banked
 14746  000DD2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14747  000DD4  0E01               	movlw	1
 14748  000DD6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14749  000DD8  EC65  F029         	call	_updateServoPosition	;wreg free
 14750                           
 14751                           ;Test.c: 322: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14752  000DDC  0E00               	movlw	0
 14753  000DDE  0100               	movlb	0	; () banked
 14754  000DE0  6FB6               	movwf	actuatorTest@i_1775& (0+255),b
 14755  000DE2                     l8956:
 14756                           
 14757                           ; BSR set to: 0
 14758  000DE2  0E63               	movlw	99
 14759  000DE4  0100               	movlb	0	; () banked
 14760  000DE6  65B6               	cpfsgt	actuatorTest@i_1775& (0+255),b
 14761  000DE8  D001               	goto	l8960
 14762  000DEA  D00C               	goto	l8964
 14763  000DEC                     l8960:
 14764                           
 14765                           ; BSR set to: 0
 14766  000DEC  0E68               	movlw	104
 14767  000DEE  0100               	movlb	0	; () banked
 14768  000DF0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14769  000DF2  0EE4               	movlw	228
 14770  000DF4                     u11827:
 14771  000DF4  2EE8               	decfsz	wreg,f,c
 14772  000DF6  D7FE               	bra	u11827
 14773  000DF8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14774  000DFA  D7FC               	bra	u11827
 14775  000DFC  F000               	nop	
 14776  000DFE  0100               	movlb	0	; () banked
 14777  000E00  2BB6               	incf	actuatorTest@i_1775& (0+255),f,b
 14778  000E02  D7EF               	goto	l8956
 14779  000E04                     l8964:
 14780                           
 14781                           ; BSR set to: 0
 14782  000E04  0E00               	movlw	0
 14783  000E06  0100               	movlb	0	; () banked
 14784  000E08  6FB7               	movwf	actuatorTest@i_1776& (0+255),b
 14785  000E0A                     l8966:
 14786                           
 14787                           ; BSR set to: 0
 14788  000E0A  0E63               	movlw	99
 14789  000E0C  0100               	movlb	0	; () banked
 14790  000E0E  65B7               	cpfsgt	actuatorTest@i_1776& (0+255),b
 14791  000E10  D001               	goto	l8970
 14792  000E12  D00C               	goto	l8974
 14793  000E14                     l8970:
 14794                           
 14795                           ; BSR set to: 0
 14796  000E14  0E68               	movlw	104
 14797  000E16  0100               	movlb	0	; () banked
 14798  000E18  6FAB               	movwf	??_actuatorTest& (0+255),b
 14799  000E1A  0EE4               	movlw	228
 14800  000E1C                     u11837:
 14801  000E1C  2EE8               	decfsz	wreg,f,c
 14802  000E1E  D7FE               	bra	u11837
 14803  000E20  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14804  000E22  D7FC               	bra	u11837
 14805  000E24  F000               	nop	
 14806  000E26  0100               	movlb	0	; () banked
 14807  000E28  2BB7               	incf	actuatorTest@i_1776& (0+255),f,b
 14808  000E2A  D7EF               	goto	l8966
 14809  000E2C                     l8974:
 14810                           
 14811                           ; BSR set to: 0
 14812                           ;Test.c: 324: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14813  000E2C  0E80               	movlw	128
 14814  000E2E  EC69  F030         	call	_lcdInst
 14815  000E32  0EC0               	movlw	192
 14816  000E34  EC69  F030         	call	_lcdInst
 14817                           
 14818                           ;Test.c: 325: printf("MID -- 2s       ");
 14819  000E38  0E91               	movlw	low STR_103
 14820  000E3A  0100               	movlb	0	; () banked
 14821  000E3C  6F8E               	movwf	printf@f& (0+255),b
 14822  000E3E  0EFB               	movlw	high STR_103
 14823  000E40  0100               	movlb	0	; () banked
 14824  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
 14825  000E44  ECE7  F00E         	call	_printf	;wreg free
 14826                           
 14827                           ;Test.c: 326: updateServoPosition(1200, 1);
 14828  000E48  0E04               	movlw	4
 14829  000E4A  0100               	movlb	0	; () banked
 14830  000E4C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14831  000E4E  0EB0               	movlw	176
 14832  000E50  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14833  000E52  0E00               	movlw	0
 14834  000E54  0100               	movlb	0	; () banked
 14835  000E56  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14836  000E58  0E01               	movlw	1
 14837  000E5A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14838  000E5C  EC65  F029         	call	_updateServoPosition	;wreg free
 14839                           
 14840                           ;Test.c: 327: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14841  000E60  0E00               	movlw	0
 14842  000E62  0100               	movlb	0	; () banked
 14843  000E64  6FB8               	movwf	actuatorTest@i_1778& (0+255),b
 14844  000E66                     l8982:
 14845                           
 14846                           ; BSR set to: 0
 14847  000E66  0E63               	movlw	99
 14848  000E68  0100               	movlb	0	; () banked
 14849  000E6A  65B8               	cpfsgt	actuatorTest@i_1778& (0+255),b
 14850  000E6C  D001               	goto	l8986
 14851  000E6E  D00C               	goto	l8990
 14852  000E70                     l8986:
 14853                           
 14854                           ; BSR set to: 0
 14855  000E70  0E68               	movlw	104
 14856  000E72  0100               	movlb	0	; () banked
 14857  000E74  6FAB               	movwf	??_actuatorTest& (0+255),b
 14858  000E76  0EE4               	movlw	228
 14859  000E78                     u11847:
 14860  000E78  2EE8               	decfsz	wreg,f,c
 14861  000E7A  D7FE               	bra	u11847
 14862  000E7C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14863  000E7E  D7FC               	bra	u11847
 14864  000E80  F000               	nop	
 14865  000E82  0100               	movlb	0	; () banked
 14866  000E84  2BB8               	incf	actuatorTest@i_1778& (0+255),f,b
 14867  000E86  D7EF               	goto	l8982
 14868  000E88                     l8990:
 14869                           
 14870                           ; BSR set to: 0
 14871  000E88  0E00               	movlw	0
 14872  000E8A  0100               	movlb	0	; () banked
 14873  000E8C  6FB9               	movwf	actuatorTest@i_1779& (0+255),b
 14874  000E8E                     l8992:
 14875                           
 14876                           ; BSR set to: 0
 14877  000E8E  0E63               	movlw	99
 14878  000E90  0100               	movlb	0	; () banked
 14879  000E92  65B9               	cpfsgt	actuatorTest@i_1779& (0+255),b
 14880  000E94  D001               	goto	l8996
 14881  000E96  D00C               	goto	l1394
 14882  000E98                     l8996:
 14883                           
 14884                           ; BSR set to: 0
 14885  000E98  0E68               	movlw	104
 14886  000E9A  0100               	movlb	0	; () banked
 14887  000E9C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14888  000E9E  0EE4               	movlw	228
 14889  000EA0                     u11857:
 14890  000EA0  2EE8               	decfsz	wreg,f,c
 14891  000EA2  D7FE               	bra	u11857
 14892  000EA4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14893  000EA6  D7FC               	bra	u11857
 14894  000EA8  F000               	nop	
 14895  000EAA  0100               	movlb	0	; () banked
 14896  000EAC  2BB9               	incf	actuatorTest@i_1779& (0+255),f,b
 14897  000EAE  D7EF               	goto	l8992
 14898  000EB0                     l1394:
 14899                           
 14900                           ; BSR set to: 0
 14901                           ;Test.c: 328: TMR1ON = 0;
 14902  000EB0  90CD               	bcf	4045,0,c	;volatile
 14903                           
 14904                           ; BSR set to: 0
 14905                           ;Test.c: 335: printf("TST: TILT SERVO");
 14906  000EB2  0E49               	movlw	low STR_104
 14907  000EB4  0100               	movlb	0	; () banked
 14908  000EB6  6F8E               	movwf	printf@f& (0+255),b
 14909  000EB8  0EFE               	movlw	high STR_104
 14910  000EBA  0100               	movlb	0	; () banked
 14911  000EBC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14912  000EBE  ECE7  F00E         	call	_printf	;wreg free
 14913                           
 14914                           ;Test.c: 336: lcdInst(0b11000000);;
 14915  000EC2  0EC0               	movlw	192
 14916  000EC4  EC69  F030         	call	_lcdInst
 14917                           
 14918                           ;Test.c: 337: printf("LEVEL -- 2s     ");
 14919  000EC8  0EC4               	movlw	low STR_105
 14920  000ECA  0100               	movlb	0	; () banked
 14921  000ECC  6F8E               	movwf	printf@f& (0+255),b
 14922  000ECE  0EFB               	movlw	high STR_105
 14923  000ED0  0100               	movlb	0	; () banked
 14924  000ED2  6F8F               	movwf	(printf@f+1)& (0+255),b
 14925  000ED4  ECE7  F00E         	call	_printf	;wreg free
 14926                           
 14927                           ;Test.c: 338: updateServoPosition(1050, 3);
 14928  000ED8  0E04               	movlw	4
 14929  000EDA  0100               	movlb	0	; () banked
 14930  000EDC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14931  000EDE  0E1A               	movlw	26
 14932  000EE0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14933  000EE2  0E00               	movlw	0
 14934  000EE4  0100               	movlb	0	; () banked
 14935  000EE6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14936  000EE8  0E03               	movlw	3
 14937  000EEA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14938  000EEC  EC65  F029         	call	_updateServoPosition	;wreg free
 14939                           
 14940                           ;Test.c: 339: TMR3ON = 1;
 14941  000EF0  80B1               	bsf	4017,0,c	;volatile
 14942                           
 14943                           ;Test.c: 340: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14944  000EF2  0E00               	movlw	0
 14945  000EF4  0100               	movlb	0	; () banked
 14946  000EF6  6FBA               	movwf	actuatorTest@i_1782& (0+255),b
 14947  000EF8                     l9010:
 14948                           
 14949                           ; BSR set to: 0
 14950  000EF8  0E63               	movlw	99
 14951  000EFA  0100               	movlb	0	; () banked
 14952  000EFC  65BA               	cpfsgt	actuatorTest@i_1782& (0+255),b
 14953  000EFE  D001               	goto	l9014
 14954  000F00  D00C               	goto	l9018
 14955  000F02                     l9014:
 14956                           
 14957                           ; BSR set to: 0
 14958  000F02  0E68               	movlw	104
 14959  000F04  0100               	movlb	0	; () banked
 14960  000F06  6FAB               	movwf	??_actuatorTest& (0+255),b
 14961  000F08  0EE4               	movlw	228
 14962  000F0A                     u11867:
 14963  000F0A  2EE8               	decfsz	wreg,f,c
 14964  000F0C  D7FE               	bra	u11867
 14965  000F0E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14966  000F10  D7FC               	bra	u11867
 14967  000F12  F000               	nop	
 14968  000F14  0100               	movlb	0	; () banked
 14969  000F16  2BBA               	incf	actuatorTest@i_1782& (0+255),f,b
 14970  000F18  D7EF               	goto	l9010
 14971  000F1A                     l9018:
 14972                           
 14973                           ; BSR set to: 0
 14974  000F1A  0E00               	movlw	0
 14975  000F1C  0100               	movlb	0	; () banked
 14976  000F1E  6FBB               	movwf	actuatorTest@i_1783& (0+255),b
 14977  000F20                     l9020:
 14978                           
 14979                           ; BSR set to: 0
 14980  000F20  0E63               	movlw	99
 14981  000F22  0100               	movlb	0	; () banked
 14982  000F24  65BB               	cpfsgt	actuatorTest@i_1783& (0+255),b
 14983  000F26  D001               	goto	l9024
 14984  000F28  D00C               	goto	l9028
 14985  000F2A                     l9024:
 14986                           
 14987                           ; BSR set to: 0
 14988  000F2A  0E68               	movlw	104
 14989  000F2C  0100               	movlb	0	; () banked
 14990  000F2E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14991  000F30  0EE4               	movlw	228
 14992  000F32                     u11877:
 14993  000F32  2EE8               	decfsz	wreg,f,c
 14994  000F34  D7FE               	bra	u11877
 14995  000F36  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14996  000F38  D7FC               	bra	u11877
 14997  000F3A  F000               	nop	
 14998  000F3C  0100               	movlb	0	; () banked
 14999  000F3E  2BBB               	incf	actuatorTest@i_1783& (0+255),f,b
 15000  000F40  D7EF               	goto	l9020
 15001  000F42                     l9028:
 15002                           
 15003                           ; BSR set to: 0
 15004                           ;Test.c: 342: lcdInst(0b10000000);;lcdInst(0b11000000);;
 15005  000F42  0E80               	movlw	128
 15006  000F44  EC69  F030         	call	_lcdInst
 15007  000F48  0EC0               	movlw	192
 15008  000F4A  EC69  F030         	call	_lcdInst
 15009                           
 15010                           ;Test.c: 343: printf("DROP -- 2s      ");
 15011  000F4E  0EA2               	movlw	low STR_106
 15012  000F50  0100               	movlb	0	; () banked
 15013  000F52  6F8E               	movwf	printf@f& (0+255),b
 15014  000F54  0EFB               	movlw	high STR_106
 15015  000F56  0100               	movlb	0	; () banked
 15016  000F58  6F8F               	movwf	(printf@f+1)& (0+255),b
 15017  000F5A  ECE7  F00E         	call	_printf	;wreg free
 15018                           
 15019                           ;Test.c: 344: updateServoPosition(1260, 3);
 15020  000F5E  0E04               	movlw	4
 15021  000F60  0100               	movlb	0	; () banked
 15022  000F62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15023  000F64  0EEC               	movlw	236
 15024  000F66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15025  000F68  0E00               	movlw	0
 15026  000F6A  0100               	movlb	0	; () banked
 15027  000F6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15028  000F6E  0E03               	movlw	3
 15029  000F70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15030  000F72  EC65  F029         	call	_updateServoPosition	;wreg free
 15031                           
 15032                           ;Test.c: 345: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 15033  000F76  0E00               	movlw	0
 15034  000F78  0100               	movlb	0	; () banked
 15035  000F7A  6FBC               	movwf	actuatorTest@i_1785& (0+255),b
 15036  000F7C                     l9036:
 15037                           
 15038                           ; BSR set to: 0
 15039  000F7C  0E63               	movlw	99
 15040  000F7E  0100               	movlb	0	; () banked
 15041  000F80  65BC               	cpfsgt	actuatorTest@i_1785& (0+255),b
 15042  000F82  D001               	goto	l9040
 15043  000F84  D00C               	goto	l9044
 15044  000F86                     l9040:
 15045                           
 15046                           ; BSR set to: 0
 15047  000F86  0E68               	movlw	104
 15048  000F88  0100               	movlb	0	; () banked
 15049  000F8A  6FAB               	movwf	??_actuatorTest& (0+255),b
 15050  000F8C  0EE4               	movlw	228
 15051  000F8E                     u11887:
 15052  000F8E  2EE8               	decfsz	wreg,f,c
 15053  000F90  D7FE               	bra	u11887
 15054  000F92  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15055  000F94  D7FC               	bra	u11887
 15056  000F96  F000               	nop	
 15057  000F98  0100               	movlb	0	; () banked
 15058  000F9A  2BBC               	incf	actuatorTest@i_1785& (0+255),f,b
 15059  000F9C  D7EF               	goto	l9036
 15060  000F9E                     l9044:
 15061                           
 15062                           ; BSR set to: 0
 15063  000F9E  0E00               	movlw	0
 15064  000FA0  0100               	movlb	0	; () banked
 15065  000FA2  6FBD               	movwf	actuatorTest@i_1786& (0+255),b
 15066  000FA4                     l9046:
 15067                           
 15068                           ; BSR set to: 0
 15069  000FA4  0E63               	movlw	99
 15070  000FA6  0100               	movlb	0	; () banked
 15071  000FA8  65BD               	cpfsgt	actuatorTest@i_1786& (0+255),b
 15072  000FAA  D001               	goto	l9050
 15073  000FAC  D00C               	goto	l9054
 15074  000FAE                     l9050:
 15075                           
 15076                           ; BSR set to: 0
 15077  000FAE  0E68               	movlw	104
 15078  000FB0  0100               	movlb	0	; () banked
 15079  000FB2  6FAB               	movwf	??_actuatorTest& (0+255),b
 15080  000FB4  0EE4               	movlw	228
 15081  000FB6                     u11897:
 15082  000FB6  2EE8               	decfsz	wreg,f,c
 15083  000FB8  D7FE               	bra	u11897
 15084  000FBA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15085  000FBC  D7FC               	bra	u11897
 15086  000FBE  F000               	nop	
 15087  000FC0  0100               	movlb	0	; () banked
 15088  000FC2  2BBD               	incf	actuatorTest@i_1786& (0+255),f,b
 15089  000FC4  D7EF               	goto	l9046
 15090  000FC6                     l9054:
 15091                           
 15092                           ; BSR set to: 0
 15093                           ;Test.c: 347: lcdInst(0b10000000);;lcdInst(0b11000000);;
 15094  000FC6  0E80               	movlw	128
 15095  000FC8  EC69  F030         	call	_lcdInst
 15096  000FCC  0EC0               	movlw	192
 15097  000FCE  EC69  F030         	call	_lcdInst
 15098                           
 15099                           ;Test.c: 348: printf("LEVEL -- 2s     ");
 15100  000FD2  0EC4               	movlw	low STR_105
 15101  000FD4  0100               	movlb	0	; () banked
 15102  000FD6  6F8E               	movwf	printf@f& (0+255),b
 15103  000FD8  0EFB               	movlw	high STR_105
 15104  000FDA  0100               	movlb	0	; () banked
 15105  000FDC  6F8F               	movwf	(printf@f+1)& (0+255),b
 15106  000FDE  ECE7  F00E         	call	_printf	;wreg free
 15107                           
 15108                           ;Test.c: 349: updateServoPosition(1050, 3);
 15109  000FE2  0E04               	movlw	4
 15110  000FE4  0100               	movlb	0	; () banked
 15111  000FE6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15112  000FE8  0E1A               	movlw	26
 15113  000FEA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15114  000FEC  0E00               	movlw	0
 15115  000FEE  0100               	movlb	0	; () banked
 15116  000FF0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15117  000FF2  0E03               	movlw	3
 15118  000FF4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15119  000FF6  EC65  F029         	call	_updateServoPosition	;wreg free
 15120                           
 15121                           ;Test.c: 350: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 15122  000FFA  0E00               	movlw	0
 15123  000FFC  0100               	movlb	0	; () banked
 15124  000FFE  6FBE               	movwf	actuatorTest@i_1788& (0+255),b
 15125  001000                     l9062:
 15126                           
 15127                           ; BSR set to: 0
 15128  001000  0E63               	movlw	99
 15129  001002  0100               	movlb	0	; () banked
 15130  001004  65BE               	cpfsgt	actuatorTest@i_1788& (0+255),b
 15131  001006  D001               	goto	l9066
 15132  001008  D00C               	goto	l9070
 15133  00100A                     l9066:
 15134                           
 15135                           ; BSR set to: 0
 15136  00100A  0E68               	movlw	104
 15137  00100C  0100               	movlb	0	; () banked
 15138  00100E  6FAB               	movwf	??_actuatorTest& (0+255),b
 15139  001010  0EE4               	movlw	228
 15140  001012                     u11907:
 15141  001012  2EE8               	decfsz	wreg,f,c
 15142  001014  D7FE               	bra	u11907
 15143  001016  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15144  001018  D7FC               	bra	u11907
 15145  00101A  F000               	nop	
 15146  00101C  0100               	movlb	0	; () banked
 15147  00101E  2BBE               	incf	actuatorTest@i_1788& (0+255),f,b
 15148  001020  D7EF               	goto	l9062
 15149  001022                     l9070:
 15150                           
 15151                           ; BSR set to: 0
 15152  001022  0E00               	movlw	0
 15153  001024  0100               	movlb	0	; () banked
 15154  001026  6FBF               	movwf	actuatorTest@i_1789& (0+255),b
 15155  001028                     l9072:
 15156                           
 15157                           ; BSR set to: 0
 15158  001028  0E63               	movlw	99
 15159  00102A  0100               	movlb	0	; () banked
 15160  00102C  65BF               	cpfsgt	actuatorTest@i_1789& (0+255),b
 15161  00102E  D001               	goto	l9076
 15162  001030  D00C               	goto	l1406
 15163  001032                     l9076:
 15164                           
 15165                           ; BSR set to: 0
 15166  001032  0E68               	movlw	104
 15167  001034  0100               	movlb	0	; () banked
 15168  001036  6FAB               	movwf	??_actuatorTest& (0+255),b
 15169  001038  0EE4               	movlw	228
 15170  00103A                     u11917:
 15171  00103A  2EE8               	decfsz	wreg,f,c
 15172  00103C  D7FE               	bra	u11917
 15173  00103E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15174  001040  D7FC               	bra	u11917
 15175  001042  F000               	nop	
 15176  001044  0100               	movlb	0	; () banked
 15177  001046  2BBF               	incf	actuatorTest@i_1789& (0+255),f,b
 15178  001048  D7EF               	goto	l9072
 15179  00104A                     l1406:
 15180                           
 15181                           ; BSR set to: 0
 15182                           ;Test.c: 351: TMR3ON = 0;
 15183  00104A  90B1               	bcf	4017,0,c	;volatile
 15184                           
 15185                           ;Test.c: 352: (INTCONbits.GIE = 0);
 15186  00104C  9EF2               	bcf	intcon,7,c	;volatile
 15187                           
 15188                           ; BSR set to: 0
 15189                           ;Test.c: 357: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15190  00104E  0E01               	movlw	1
 15191  001050  EC69  F030         	call	_lcdInst
 15192  001054  0E68               	movlw	104
 15193  001056  0100               	movlb	0	; () banked
 15194  001058  6FAB               	movwf	??_actuatorTest& (0+255),b
 15195  00105A  0EE4               	movlw	228
 15196  00105C                     u11927:
 15197  00105C  2EE8               	decfsz	wreg,f,c
 15198  00105E  D7FE               	bra	u11927
 15199  001060  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15200  001062  D7FC               	bra	u11927
 15201  001064  F000               	nop	
 15202  001066  0E80               	movlw	128
 15203  001068  EC69  F030         	call	_lcdInst
 15204                           
 15205                           ;Test.c: 358: printf("TST: CAM SERVO");
 15206  00106C  0EC5               	movlw	low STR_108
 15207  00106E  0100               	movlb	0	; () banked
 15208  001070  6F8E               	movwf	printf@f& (0+255),b
 15209  001072  0EFE               	movlw	high STR_108
 15210  001074  0100               	movlb	0	; () banked
 15211  001076  6F8F               	movwf	(printf@f+1)& (0+255),b
 15212  001078  ECE7  F00E         	call	_printf	;wreg free
 15213                           
 15214                           ;Test.c: 359: lcdInst(0b11000000);;
 15215  00107C  0EC0               	movlw	192
 15216  00107E  EC69  F030         	call	_lcdInst
 15217                           
 15218                           ;Test.c: 360: printf("CAM UP  |RC0=1");
 15219  001082  0EA7               	movlw	low STR_109
 15220  001084  0100               	movlb	0	; () banked
 15221  001086  6F8E               	movwf	printf@f& (0+255),b
 15222  001088  0EFE               	movlw	high STR_109
 15223  00108A  0100               	movlb	0	; () banked
 15224  00108C  6F8F               	movwf	(printf@f+1)& (0+255),b
 15225  00108E  ECE7  F00E         	call	_printf	;wreg free
 15226                           
 15227                           ;Test.c: 361: LATCbits.LATC0 = 1;
 15228  001092  808B               	bsf	3979,0,c	;volatile
 15229                           
 15230                           ;Test.c: 362: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 15231  001094  0E00               	movlw	0
 15232  001096  0100               	movlb	0	; () banked
 15233  001098  6FC0               	movwf	actuatorTest@i_1792& (0+255),b
 15234  00109A                     l9096:
 15235                           
 15236                           ; BSR set to: 0
 15237  00109A  0E63               	movlw	99
 15238  00109C  0100               	movlb	0	; () banked
 15239  00109E  65C0               	cpfsgt	actuatorTest@i_1792& (0+255),b
 15240  0010A0  D001               	goto	l9100
 15241  0010A2  D00C               	goto	l9104
 15242  0010A4                     l9100:
 15243                           
 15244                           ; BSR set to: 0
 15245  0010A4  0E68               	movlw	104
 15246  0010A6  0100               	movlb	0	; () banked
 15247  0010A8  6FAB               	movwf	??_actuatorTest& (0+255),b
 15248  0010AA  0EE4               	movlw	228
 15249  0010AC                     u11937:
 15250  0010AC  2EE8               	decfsz	wreg,f,c
 15251  0010AE  D7FE               	bra	u11937
 15252  0010B0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15253  0010B2  D7FC               	bra	u11937
 15254  0010B4  F000               	nop	
 15255  0010B6  0100               	movlb	0	; () banked
 15256  0010B8  2BC0               	incf	actuatorTest@i_1792& (0+255),f,b
 15257  0010BA  D7EF               	goto	l9096
 15258  0010BC                     l9104:
 15259                           
 15260                           ; BSR set to: 0
 15261  0010BC  0E00               	movlw	0
 15262  0010BE  0100               	movlb	0	; () banked
 15263  0010C0  6FC1               	movwf	actuatorTest@i_1793& (0+255),b
 15264  0010C2                     l9106:
 15265                           
 15266                           ; BSR set to: 0
 15267  0010C2  0E63               	movlw	99
 15268  0010C4  0100               	movlb	0	; () banked
 15269  0010C6  65C1               	cpfsgt	actuatorTest@i_1793& (0+255),b
 15270  0010C8  D001               	goto	l9110
 15271  0010CA  D00C               	goto	l9114
 15272  0010CC                     l9110:
 15273                           
 15274                           ; BSR set to: 0
 15275  0010CC  0E68               	movlw	104
 15276  0010CE  0100               	movlb	0	; () banked
 15277  0010D0  6FAB               	movwf	??_actuatorTest& (0+255),b
 15278  0010D2  0EE4               	movlw	228
 15279  0010D4                     u11947:
 15280  0010D4  2EE8               	decfsz	wreg,f,c
 15281  0010D6  D7FE               	bra	u11947
 15282  0010D8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15283  0010DA  D7FC               	bra	u11947
 15284  0010DC  F000               	nop	
 15285  0010DE  0100               	movlb	0	; () banked
 15286  0010E0  2BC1               	incf	actuatorTest@i_1793& (0+255),f,b
 15287  0010E2  D7EF               	goto	l9106
 15288  0010E4                     l9114:
 15289                           
 15290                           ; BSR set to: 0
 15291                           ;Test.c: 363: lcdInst(0b10000000);;lcdInst(0b11000000);;
 15292  0010E4  0E80               	movlw	128
 15293  0010E6  EC69  F030         	call	_lcdInst
 15294  0010EA  0EC0               	movlw	192
 15295  0010EC  EC69  F030         	call	_lcdInst
 15296                           
 15297                           ;Test.c: 364: printf("CAM DWN |RC0=0");
 15298  0010F0  0E98               	movlw	low STR_110
 15299  0010F2  0100               	movlb	0	; () banked
 15300  0010F4  6F8E               	movwf	printf@f& (0+255),b
 15301  0010F6  0EFE               	movlw	high STR_110
 15302  0010F8  0100               	movlb	0	; () banked
 15303  0010FA  6F8F               	movwf	(printf@f+1)& (0+255),b
 15304  0010FC  ECE7  F00E         	call	_printf	;wreg free
 15305                           
 15306                           ;Test.c: 367: for(i=0;i<10000;i++)
 15307  001100  0E00               	movlw	0
 15308  001102  0100               	movlb	0	; () banked
 15309  001104  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 15310  001106  0E00               	movlw	0
 15311  001108  6FC4               	movwf	actuatorTest@i& (0+255),b
 15312  00110A                     l9120:
 15313                           
 15314                           ; BSR set to: 0
 15315  00110A  0100               	movlb	0	; () banked
 15316  00110C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 15317  00110E  D008               	goto	l1411
 15318  001110  0E10               	movlw	16
 15319  001112  0100               	movlb	0	; () banked
 15320  001114  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 15321  001116  0E27               	movlw	39
 15322  001118  0100               	movlb	0	; () banked
 15323  00111A  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 15324  00111C  B0D8               	btfsc	status,0,c
 15325  00111E  D00D               	goto	l9130
 15326  001120                     l1411:
 15327                           
 15328                           ; BSR set to: 0
 15329                           ;Test.c: 368: {
 15330                           ;Test.c: 369: LATCbits.LATC0 = 1;
 15331  001120  808B               	bsf	3979,0,c	;volatile
 15332                           
 15333                           ; BSR set to: 0
 15334                           ;Test.c: 370: _delay((unsigned long)((10)*(32000000/4000000.0)));
 15335  001122  0E1A               	movlw	26
 15336  001124                     u11957:
 15337  001124  2EE8               	decfsz	wreg,f,c
 15338  001126  D7FE               	bra	u11957
 15339  001128  D000               	nop2	
 15340                           
 15341                           ;Test.c: 371: LATCbits.LATC0 = 0;
 15342  00112A  908B               	bcf	3979,0,c	;volatile
 15343                           
 15344                           ;Test.c: 372: _delay((unsigned long)((90)*(32000000/4000000.0)));
 15345  00112C  0EF0               	movlw	240
 15346  00112E                     u11967:
 15347  00112E  2EE8               	decfsz	wreg,f,c
 15348  001130  D7FE               	bra	u11967
 15349  001132  0100               	movlb	0	; () banked
 15350  001134  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 15351  001136  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 15352  001138  D7E8               	goto	l9120
 15353  00113A                     l9130:
 15354                           
 15355                           ; BSR set to: 0
 15356                           ;Test.c: 373: }
 15357                           ;Test.c: 375: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 15358  00113A  0E00               	movlw	0
 15359  00113C  0100               	movlb	0	; () banked
 15360  00113E  6FC2               	movwf	actuatorTest@i_1795& (0+255),b
 15361  001140                     l9132:
 15362                           
 15363                           ; BSR set to: 0
 15364  001140  0E63               	movlw	99
 15365  001142  0100               	movlb	0	; () banked
 15366  001144  65C2               	cpfsgt	actuatorTest@i_1795& (0+255),b
 15367  001146  D001               	goto	l9136
 15368  001148  D00C               	goto	l9140
 15369  00114A                     l9136:
 15370                           
 15371                           ; BSR set to: 0
 15372  00114A  0E68               	movlw	104
 15373  00114C  0100               	movlb	0	; () banked
 15374  00114E  6FAB               	movwf	??_actuatorTest& (0+255),b
 15375  001150  0EE4               	movlw	228
 15376  001152                     u11977:
 15377  001152  2EE8               	decfsz	wreg,f,c
 15378  001154  D7FE               	bra	u11977
 15379  001156  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15380  001158  D7FC               	bra	u11977
 15381  00115A  F000               	nop	
 15382  00115C  0100               	movlb	0	; () banked
 15383  00115E  2BC2               	incf	actuatorTest@i_1795& (0+255),f,b
 15384  001160  D7EF               	goto	l9132
 15385  001162                     l9140:
 15386                           
 15387                           ; BSR set to: 0
 15388  001162  0E00               	movlw	0
 15389  001164  0100               	movlb	0	; () banked
 15390  001166  6FC3               	movwf	actuatorTest@i_1796& (0+255),b
 15391  001168                     l9142:
 15392                           
 15393                           ; BSR set to: 0
 15394  001168  0E63               	movlw	99
 15395  00116A  0100               	movlb	0	; () banked
 15396  00116C  65C3               	cpfsgt	actuatorTest@i_1796& (0+255),b
 15397  00116E  D001               	goto	l9146
 15398  001170  D00C               	goto	l9150
 15399  001172                     l9146:
 15400                           
 15401                           ; BSR set to: 0
 15402  001172  0E68               	movlw	104
 15403  001174  0100               	movlb	0	; () banked
 15404  001176  6FAB               	movwf	??_actuatorTest& (0+255),b
 15405  001178  0EE4               	movlw	228
 15406  00117A                     u11987:
 15407  00117A  2EE8               	decfsz	wreg,f,c
 15408  00117C  D7FE               	bra	u11987
 15409  00117E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15410  001180  D7FC               	bra	u11987
 15411  001182  F000               	nop	
 15412  001184  0100               	movlb	0	; () banked
 15413  001186  2BC3               	incf	actuatorTest@i_1796& (0+255),f,b
 15414  001188  D7EF               	goto	l9142
 15415  00118A                     l9150:
 15416                           
 15417                           ; BSR set to: 0
 15418                           ;Test.c: 376: machine_state = Testing_state;
 15419  00118A  0E03               	movlw	3
 15420  00118C  0100               	movlb	0	; () banked
 15421  00118E  6FFC               	movwf	_machine_state& (0+255),b
 15422                           
 15423                           ; BSR set to: 0
 15424  001190  0012               	return		;funcret
 15425  001192                     __end_of_actuatorTest:
 15426                           	opt stack 0
 15427                           tblptru	equ	0xFF8
 15428                           tblptrh	equ	0xFF7
 15429                           tblptrl	equ	0xFF6
 15430                           tablat	equ	0xFF5
 15431                           prodh	equ	0xFF4
 15432                           prodl	equ	0xFF3
 15433                           intcon	equ	0xFF2
 15434                           intcon2	equ	0xFF1
 15435                           intcon3	equ	0xFF0
 15436                           postinc0	equ	0xFEE
 15437                           wreg	equ	0xFE8
 15438                           postdec1	equ	0xFE5
 15439                           fsr1l	equ	0xFE1
 15440                           indf2	equ	0xFDF
 15441                           postinc2	equ	0xFDE
 15442                           postdec2	equ	0xFDD
 15443                           fsr2h	equ	0xFDA
 15444                           fsr2l	equ	0xFD9
 15445                           status	equ	0xFD8
 15446                           
 15447 ;; *************** function _SpeedTest *****************
 15448 ;; Defined at:
 15449 ;;		line 565 in file "Test.c"
 15450 ;; Parameters:    Size  Location     Type
 15451 ;;		None
 15452 ;; Auto vars:     Size  Location     Type
 15453 ;;		None
 15454 ;; Return value:  Size  Location     Type
 15455 ;;                  1    wreg      void 
 15456 ;; Registers used:
 15457 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15458 ;; Tracked objects:
 15459 ;;		On entry : 0/0
 15460 ;;		On exit  : 0/0
 15461 ;;		Unchanged: 0/0
 15462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15465 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15466 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15467 ;;Total ram usage:        1 bytes
 15468 ;; Hardware stack levels used:    1
 15469 ;; Hardware stack levels required when called:   10
 15470 ;; This function calls:
 15471 ;;		_lcdInst
 15472 ;;		_printf
 15473 ;; This function is called by:
 15474 ;;		_Test
 15475 ;; This function uses a non-reentrant model
 15476 ;;
 15477                           
 15478                           	psect	text46
 15479  005350                     __ptext46:
 15480                           	opt stack 0
 15481  005350                     _SpeedTest:
 15482                           	opt stack 19
 15483                           
 15484                           ;Test.c: 567: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15485                           
 15486                           ; BSR set to: 0
 15487                           ;incstack = 0
 15488  005350  0E01               	movlw	1
 15489  005352  EC69  F030         	call	_lcdInst
 15490  005356  0E68               	movlw	104
 15491  005358  0100               	movlb	0	; () banked
 15492  00535A  6FAB               	movwf	??_SpeedTest& (0+255),b
 15493  00535C  0EE4               	movlw	228
 15494  00535E                     u11997:
 15495  00535E  2EE8               	decfsz	wreg,f,c
 15496  005360  D7FE               	bra	u11997
 15497  005362  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 15498  005364  D7FC               	bra	u11997
 15499  005366  F000               	nop	
 15500  005368  0E80               	movlw	128
 15501  00536A  EC69  F030         	call	_lcdInst
 15502                           
 15503                           ;Test.c: 568: printf("S: D WILL RETURN ");
 15504  00536E  0E37               	movlw	low STR_119
 15505  005370  0100               	movlb	0	; () banked
 15506  005372  6F8E               	movwf	printf@f& (0+255),b
 15507  005374  0EFB               	movlw	high STR_119
 15508  005376  0100               	movlb	0	; () banked
 15509  005378  6F8F               	movwf	(printf@f+1)& (0+255),b
 15510  00537A  ECE7  F00E         	call	_printf	;wreg free
 15511                           
 15512                           ;Test.c: 569: lcdInst(0b11000000);;
 15513  00537E  0EC0               	movlw	192
 15514  005380  EC69  F030         	call	_lcdInst
 15515                           
 15516                           ;Test.c: 570: printf("OTHER SETS RA5   ");
 15517  005384  0E01               	movlw	low STR_120
 15518  005386  0100               	movlb	0	; () banked
 15519  005388  6F8E               	movwf	printf@f& (0+255),b
 15520  00538A  0EFB               	movlw	high STR_120
 15521  00538C  0100               	movlb	0	; () banked
 15522  00538E  6F8F               	movwf	(printf@f+1)& (0+255),b
 15523  005390  ECE7  F00E         	call	_printf	;wreg free
 15524  005394                     l1481:
 15525  005394  A281               	btfss	3969,1,c	;volatile
 15526  005396  D7FE               	goto	l1481
 15527                           
 15528                           ;Test.c: 575: }
 15529                           ;Test.c: 576: if(PORTB >> 4 == 0b1111){
 15530  005398  3881               	swapf	3969,w,c	;volatile
 15531  00539A  0B0F               	andlw	15
 15532  00539C  0A0F               	xorlw	15
 15533  00539E  B4D8               	btfsc	status,2,c
 15534  0053A0  0012               	return	
 15535  0053A2  D014               	goto	l9262
 15536  0053A4                     l1488:
 15537                           
 15538                           ;Test.c: 581: LATBbits.LATB2 = 1;
 15539  0053A4  848A               	bsf	3978,2,c	;volatile
 15540                           
 15541                           ;Test.c: 582: _delay((unsigned long)((5)*(32000000/4000.0)));
 15542  0053A6  0E34               	movlw	52
 15543  0053A8  0100               	movlb	0	; () banked
 15544  0053AA  6FAB               	movwf	??_SpeedTest& (0+255),b
 15545  0053AC  0EF1               	movlw	241
 15546  0053AE                     u12007:
 15547  0053AE  2EE8               	decfsz	wreg,f,c
 15548  0053B0  D7FE               	bra	u12007
 15549  0053B2  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 15550  0053B4  D7FC               	bra	u12007
 15551  0053B6  D000               	nop2	
 15552                           
 15553                           ;Test.c: 583: LATBbits.LATB2 = 0;
 15554  0053B8  948A               	bcf	3978,2,c	;volatile
 15555                           
 15556                           ;Test.c: 584: _delay((unsigned long)((5)*(32000000/4000.0)));
 15557  0053BA  0E34               	movlw	52
 15558  0053BC  0100               	movlb	0	; () banked
 15559  0053BE  6FAB               	movwf	??_SpeedTest& (0+255),b
 15560  0053C0  0EF1               	movlw	241
 15561  0053C2                     u12017:
 15562  0053C2  2EE8               	decfsz	wreg,f,c
 15563  0053C4  D7FE               	bra	u12017
 15564  0053C6  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 15565  0053C8  D7FC               	bra	u12017
 15566  0053CA  D000               	nop2	
 15567  0053CC                     l9262:
 15568  0053CC  B281               	btfsc	3969,1,c	;volatile
 15569  0053CE  D7EA               	goto	l1488
 15570                           
 15571                           ;Test.c: 587: }
 15572                           ;Test.c: 588: LATBbits.LATB2 = 0;
 15573  0053D0  948A               	bcf	3978,2,c	;volatile
 15574  0053D2  D7E0               	goto	l1481
 15575  0053D4                     __end_of_SpeedTest:
 15576                           	opt stack 0
 15577                           tblptru	equ	0xFF8
 15578                           tblptrh	equ	0xFF7
 15579                           tblptrl	equ	0xFF6
 15580                           tablat	equ	0xFF5
 15581                           prodh	equ	0xFF4
 15582                           prodl	equ	0xFF3
 15583                           intcon	equ	0xFF2
 15584                           intcon2	equ	0xFF1
 15585                           intcon3	equ	0xFF0
 15586                           postinc0	equ	0xFEE
 15587                           wreg	equ	0xFE8
 15588                           postdec1	equ	0xFE5
 15589                           fsr1l	equ	0xFE1
 15590                           indf2	equ	0xFDF
 15591                           postinc2	equ	0xFDE
 15592                           postdec2	equ	0xFDD
 15593                           fsr2h	equ	0xFDA
 15594                           fsr2l	equ	0xFD9
 15595                           status	equ	0xFD8
 15596                           
 15597 ;; *************** function _PortTestPusher *****************
 15598 ;; Defined at:
 15599 ;;		line 706 in file "Test.c"
 15600 ;; Parameters:    Size  Location     Type
 15601 ;;		None
 15602 ;; Auto vars:     Size  Location     Type
 15603 ;;		None
 15604 ;; Return value:  Size  Location     Type
 15605 ;;                  1    wreg      void 
 15606 ;; Registers used:
 15607 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15608 ;; Tracked objects:
 15609 ;;		On entry : 0/0
 15610 ;;		On exit  : 0/0
 15611 ;;		Unchanged: 0/0
 15612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15615 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15616 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15617 ;;Total ram usage:        1 bytes
 15618 ;; Hardware stack levels used:    1
 15619 ;; Hardware stack levels required when called:   10
 15620 ;; This function calls:
 15621 ;;		_lcdInst
 15622 ;;		_printf
 15623 ;; This function is called by:
 15624 ;;		_Test
 15625 ;; This function uses a non-reentrant model
 15626 ;;
 15627                           
 15628                           	psect	text47
 15629  00582A                     __ptext47:
 15630                           	opt stack 0
 15631  00582A                     _PortTestPusher:
 15632                           	opt stack 19
 15633                           
 15634                           ;Test.c: 707: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15635                           
 15636                           ;incstack = 0
 15637  00582A  0E01               	movlw	1
 15638  00582C  EC69  F030         	call	_lcdInst
 15639  005830  0E68               	movlw	104
 15640  005832  0100               	movlb	0	; () banked
 15641  005834  6FAB               	movwf	??_PortTestPusher& (0+255),b
 15642  005836  0EE4               	movlw	228
 15643  005838                     u12027:
 15644  005838  2EE8               	decfsz	wreg,f,c
 15645  00583A  D7FE               	bra	u12027
 15646  00583C  2FAB               	decfsz	??_PortTestPusher& (0+255),f,b
 15647  00583E  D7FC               	bra	u12027
 15648  005840  F000               	nop	
 15649  005842  0E80               	movlw	128
 15650  005844  EC69  F030         	call	_lcdInst
 15651                           
 15652                           ;Test.c: 708: printf("D WILL RETURN    ");
 15653  005848  0EEF               	movlw	low STR_112
 15654  00584A  0100               	movlb	0	; () banked
 15655  00584C  6F8E               	movwf	printf@f& (0+255),b
 15656  00584E  0EFA               	movlw	high STR_112
 15657  005850  0100               	movlb	0	; () banked
 15658  005852  6F8F               	movwf	(printf@f+1)& (0+255),b
 15659  005854  ECE7  F00E         	call	_printf	;wreg free
 15660                           
 15661                           ;Test.c: 709: lcdInst(0b11000000);;
 15662  005858  0EC0               	movlw	192
 15663  00585A  EC69  F030         	call	_lcdInst
 15664                           
 15665                           ;Test.c: 710: printf("OTHER SETS PUSHER");
 15666  00585E  0E5B               	movlw	low STR_128
 15667  005860  0100               	movlb	0	; () banked
 15668  005862  6F8E               	movwf	printf@f& (0+255),b
 15669  005864  0EFB               	movlw	high STR_128
 15670  005866  0100               	movlb	0	; () banked
 15671  005868  6F8F               	movwf	(printf@f+1)& (0+255),b
 15672  00586A  ECE7  F00E         	call	_printf	;wreg free
 15673  00586E                     l1542:
 15674  00586E  A281               	btfss	3969,1,c	;volatile
 15675  005870  D7FE               	goto	l1542
 15676                           
 15677                           ;Test.c: 715: }
 15678                           ;Test.c: 716: if(PORTB >> 4 == 0b1111){
 15679  005872  3881               	swapf	3969,w,c	;volatile
 15680  005874  0B0F               	andlw	15
 15681  005876  0A0F               	xorlw	15
 15682  005878  B4D8               	btfsc	status,2,c
 15683  00587A  0012               	return	
 15684                           
 15685                           ;Test.c: 719: else{
 15686                           ;Test.c: 720: LATAbits.LATA4 = 1;
 15687                           
 15688                           ;Test.c: 718: }
 15689                           
 15690                           ;Test.c: 717: break;
 15691  00587C  8889               	bsf	3977,4,c	;volatile
 15692  00587E                     l1548:
 15693  00587E  B281               	btfsc	3969,1,c	;volatile
 15694  005880  D7FE               	goto	l1548
 15695                           
 15696                           ;Test.c: 723: }
 15697                           ;Test.c: 724: LATAbits.LATA4 = 0;
 15698  005882  9889               	bcf	3977,4,c	;volatile
 15699  005884  D7F4               	goto	l1542
 15700  005886                     __end_of_PortTestPusher:
 15701                           	opt stack 0
 15702                           tblptru	equ	0xFF8
 15703                           tblptrh	equ	0xFF7
 15704                           tblptrl	equ	0xFF6
 15705                           tablat	equ	0xFF5
 15706                           prodh	equ	0xFF4
 15707                           prodl	equ	0xFF3
 15708                           intcon	equ	0xFF2
 15709                           intcon2	equ	0xFF1
 15710                           intcon3	equ	0xFF0
 15711                           postinc0	equ	0xFEE
 15712                           wreg	equ	0xFE8
 15713                           postdec1	equ	0xFE5
 15714                           fsr1l	equ	0xFE1
 15715                           indf2	equ	0xFDF
 15716                           postinc2	equ	0xFDE
 15717                           postdec2	equ	0xFDD
 15718                           fsr2h	equ	0xFDA
 15719                           fsr2l	equ	0xFD9
 15720                           status	equ	0xFD8
 15721                           
 15722 ;; *************** function _PortTestDC *****************
 15723 ;; Defined at:
 15724 ;;		line 439 in file "Test.c"
 15725 ;; Parameters:    Size  Location     Type
 15726 ;;		None
 15727 ;; Auto vars:     Size  Location     Type
 15728 ;;		None
 15729 ;; Return value:  Size  Location     Type
 15730 ;;                  1    wreg      void 
 15731 ;; Registers used:
 15732 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15733 ;; Tracked objects:
 15734 ;;		On entry : 0/0
 15735 ;;		On exit  : 0/0
 15736 ;;		Unchanged: 0/0
 15737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15740 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15741 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15742 ;;Total ram usage:        1 bytes
 15743 ;; Hardware stack levels used:    1
 15744 ;; Hardware stack levels required when called:   10
 15745 ;; This function calls:
 15746 ;;		_lcdInst
 15747 ;;		_printf
 15748 ;; This function is called by:
 15749 ;;		_Test
 15750 ;; This function uses a non-reentrant model
 15751 ;;
 15752                           
 15753                           	psect	text48
 15754  004BF4                     __ptext48:
 15755                           	opt stack 0
 15756  004BF4                     _PortTestDC:
 15757                           	opt stack 19
 15758                           
 15759                           ;Test.c: 440: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15760                           
 15761                           ;incstack = 0
 15762  004BF4  0E01               	movlw	1
 15763  004BF6  EC69  F030         	call	_lcdInst
 15764  004BFA  0E68               	movlw	104
 15765  004BFC  0100               	movlb	0	; () banked
 15766  004BFE  6FAB               	movwf	??_PortTestDC& (0+255),b
 15767  004C00  0EE4               	movlw	228
 15768  004C02                     u12037:
 15769  004C02  2EE8               	decfsz	wreg,f,c
 15770  004C04  D7FE               	bra	u12037
 15771  004C06  2FAB               	decfsz	??_PortTestDC& (0+255),f,b
 15772  004C08  D7FC               	bra	u12037
 15773  004C0A  F000               	nop	
 15774  004C0C  0E80               	movlw	128
 15775  004C0E  EC69  F030         	call	_lcdInst
 15776                           
 15777                           ;Test.c: 441: printf("D WILL RETURN    ");
 15778  004C12  0EEF               	movlw	low STR_112
 15779  004C14  0100               	movlb	0	; () banked
 15780  004C16  6F8E               	movwf	printf@f& (0+255),b
 15781  004C18  0EFA               	movlw	high STR_112
 15782  004C1A  0100               	movlb	0	; () banked
 15783  004C1C  6F8F               	movwf	(printf@f+1)& (0+255),b
 15784  004C1E  ECE7  F00E         	call	_printf	;wreg free
 15785                           
 15786                           ;Test.c: 442: lcdInst(0b11000000);;
 15787  004C22  0EC0               	movlw	192
 15788  004C24  EC69  F030         	call	_lcdInst
 15789                           
 15790                           ;Test.c: 443: printf("OTHER SETS DC   ");
 15791  004C28  0EF7               	movlw	low STR_113
 15792  004C2A  0100               	movlb	0	; () banked
 15793  004C2C  6F8E               	movwf	printf@f& (0+255),b
 15794  004C2E  0EFB               	movlw	high STR_113
 15795  004C30  0100               	movlb	0	; () banked
 15796  004C32  6F8F               	movwf	(printf@f+1)& (0+255),b
 15797  004C34  ECE7  F00E         	call	_printf	;wreg free
 15798  004C38                     l1424:
 15799  004C38  A281               	btfss	3969,1,c	;volatile
 15800  004C3A  D7FE               	goto	l1424
 15801                           
 15802                           ;Test.c: 448: }
 15803                           ;Test.c: 449: if(PORTB >> 4 == 0b1111){
 15804  004C3C  3881               	swapf	3969,w,c	;volatile
 15805  004C3E  0B0F               	andlw	15
 15806  004C40  0A0F               	xorlw	15
 15807  004C42  B4D8               	btfsc	status,2,c
 15808  004C44  0012               	return	
 15809                           
 15810                           ;Test.c: 452: else if(PORTB >> 4 == 0b0000){
 15811                           
 15812                           ;Test.c: 451: }
 15813                           
 15814                           ;Test.c: 450: break;
 15815  004C46  CF81 F0AB          	movff	3969,??_PortTestDC	;volatile
 15816  004C4A  0100               	movlb	0	; () banked
 15817  004C4C  3BAB               	swapf	??_PortTestDC& (0+255),f,b
 15818  004C4E  0E0F               	movlw	15
 15819  004C50  17AB               	andwf	??_PortTestDC& (0+255),f,b
 15820  004C52  A4D8               	btfss	status,2,c
 15821  004C54  D010               	goto	l9228
 15822                           
 15823                           ; BSR set to: 0
 15824                           ;Test.c: 454: LATBbits.LATB2 = !LATBbits.LATB2;
 15825  004C56  B48A               	btfsc	3978,2,c	;volatile
 15826  004C58  D004               	goto	u8700
 15827  004C5A  0100               	movlb	0	; () banked
 15828  004C5C  6BAB               	clrf	??_PortTestDC& (0+255),b
 15829  004C5E  2BAB               	incf	??_PortTestDC& (0+255),f,b
 15830  004C60  D002               	goto	u8718
 15831  004C62                     u8700:
 15832  004C62  0100               	movlb	0	; () banked
 15833  004C64  6BAB               	clrf	??_PortTestDC& (0+255),b
 15834  004C66                     u8718:
 15835  004C66  0100               	movlb	0	; () banked
 15836  004C68  47AB               	rlncf	??_PortTestDC& (0+255),f,b
 15837  004C6A  47AB               	rlncf	??_PortTestDC& (0+255),f,b
 15838  004C6C  508A               	movf	3978,w,c	;volatile
 15839  004C6E  0100               	movlb	0	; () banked
 15840  004C70  19AB               	xorwf	??_PortTestDC& (0+255),w,b
 15841  004C72  0BFB               	andlw	-5
 15842  004C74  D011               	goto	L14
 15843  004C76                     l9228:
 15844                           
 15845                           ; BSR set to: 0
 15846                           ;Test.c: 456: else if(PORTB >> 4 == 0b0001){
 15847  004C76  3881               	swapf	3969,w,c	;volatile
 15848  004C78  0B0F               	andlw	15
 15849  004C7A  06E8               	decf	wreg,f,c
 15850  004C7C  A4D8               	btfss	status,2,c
 15851  004C7E  D00F               	goto	l9232
 15852                           
 15853                           ; BSR set to: 0
 15854                           ;Test.c: 458: LATBbits.LATB0 = !LATBbits.LATB0;
 15855  004C80  B08A               	btfsc	3978,0,c	;volatile
 15856  004C82  D004               	goto	u8730
 15857  004C84  0100               	movlb	0	; () banked
 15858  004C86  6BAB               	clrf	??_PortTestDC& (0+255),b
 15859  004C88  2BAB               	incf	??_PortTestDC& (0+255),f,b
 15860  004C8A  D002               	goto	u8748
 15861  004C8C                     u8730:
 15862  004C8C  0100               	movlb	0	; () banked
 15863  004C8E  6BAB               	clrf	??_PortTestDC& (0+255),b
 15864  004C90                     u8748:
 15865  004C90  508A               	movf	3978,w,c	;volatile
 15866  004C92  0100               	movlb	0	; () banked
 15867  004C94  19AB               	xorwf	??_PortTestDC& (0+255),w,b
 15868  004C96  0BFE               	andlw	-2
 15869  004C98                     L14:
 15870  004C98  19AB               	xorwf	??_PortTestDC& (0+255),w,b
 15871  004C9A  6E8A               	movwf	3978,c	;volatile
 15872                           
 15873                           ;Test.c: 459: }
 15874  004C9C  D013               	goto	l1443
 15875  004C9E                     l9232:
 15876                           
 15877                           ; BSR set to: 0
 15878                           ;Test.c: 460: else if(PORTB >> 4 == 0b0100){
 15879  004C9E  3881               	swapf	3969,w,c	;volatile
 15880  004CA0  0B0F               	andlw	15
 15881  004CA2  0A04               	xorlw	4
 15882  004CA4  A4D8               	btfss	status,2,c
 15883  004CA6  D005               	goto	l9236
 15884                           
 15885                           ; BSR set to: 0
 15886                           ;Test.c: 461: LATBbits.LATB2 = 1;
 15887  004CA8  848A               	bsf	3978,2,c	;volatile
 15888  004CAA                     l1435:
 15889  004CAA  B281               	btfsc	3969,1,c	;volatile
 15890  004CAC  D7FE               	goto	l1435
 15891                           
 15892                           ;Test.c: 463: LATBbits.LATB2 = 0;
 15893  004CAE  948A               	bcf	3978,2,c	;volatile
 15894                           
 15895                           ;Test.c: 464: }
 15896  004CB0  D009               	goto	l1443
 15897  004CB2                     l9236:
 15898                           
 15899                           ;Test.c: 465: else if(PORTB >> 4 == 0b0101){
 15900  004CB2  3881               	swapf	3969,w,c	;volatile
 15901  004CB4  0B0F               	andlw	15
 15902  004CB6  0A05               	xorlw	5
 15903  004CB8  A4D8               	btfss	status,2,c
 15904  004CBA  D004               	goto	l1443
 15905                           
 15906                           ;Test.c: 466: LATBbits.LATB0 = 1;
 15907  004CBC  808A               	bsf	3978,0,c	;volatile
 15908  004CBE                     l1440:
 15909  004CBE  B281               	btfsc	3969,1,c	;volatile
 15910  004CC0  D7FE               	goto	l1440
 15911                           
 15912                           ;Test.c: 468: LATBbits.LATB0 = 0;
 15913  004CC2  908A               	bcf	3978,0,c	;volatile
 15914  004CC4                     l1443:
 15915  004CC4  A281               	btfss	3969,1,c	;volatile
 15916  004CC6  D7B8               	goto	l1424
 15917  004CC8  D7FD               	goto	l1443
 15918  004CCA                     __end_of_PortTestDC:
 15919                           	opt stack 0
 15920                           tblptru	equ	0xFF8
 15921                           tblptrh	equ	0xFF7
 15922                           tblptrl	equ	0xFF6
 15923                           tablat	equ	0xFF5
 15924                           prodh	equ	0xFF4
 15925                           prodl	equ	0xFF3
 15926                           intcon	equ	0xFF2
 15927                           intcon2	equ	0xFF1
 15928                           intcon3	equ	0xFF0
 15929                           postinc0	equ	0xFEE
 15930                           wreg	equ	0xFE8
 15931                           postdec1	equ	0xFE5
 15932                           fsr1l	equ	0xFE1
 15933                           indf2	equ	0xFDF
 15934                           postinc2	equ	0xFDE
 15935                           postdec2	equ	0xFDD
 15936                           fsr2h	equ	0xFDA
 15937                           fsr2l	equ	0xFD9
 15938                           status	equ	0xFD8
 15939                           
 15940 ;; *************** function _PlatformTest *****************
 15941 ;; Defined at:
 15942 ;;		line 474 in file "Test.c"
 15943 ;; Parameters:    Size  Location     Type
 15944 ;;		None
 15945 ;; Auto vars:     Size  Location     Type
 15946 ;;  i               2   51[BANK0 ] int 
 15947 ;;  i               2   49[BANK0 ] int 
 15948 ;;  res             2   47[BANK0 ] int 
 15949 ;;  res             2   45[BANK0 ] int 
 15950 ;;  on              2   53[BANK0 ] int 
 15951 ;; Return value:  Size  Location     Type
 15952 ;;                  1    wreg      void 
 15953 ;; Registers used:
 15954 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15955 ;; Tracked objects:
 15956 ;;		On entry : 0/0
 15957 ;;		On exit  : 0/0
 15958 ;;		Unchanged: 0/0
 15959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15961 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15962 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15963 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15964 ;;Total ram usage:       12 bytes
 15965 ;; Hardware stack levels used:    1
 15966 ;; Hardware stack levels required when called:   10
 15967 ;; This function calls:
 15968 ;;		_lcdInst
 15969 ;;		_printf
 15970 ;;		_readADC
 15971 ;;		_stopSignals
 15972 ;; This function is called by:
 15973 ;;		_Test
 15974 ;; This function uses a non-reentrant model
 15975 ;;
 15976                           
 15977                           	psect	text49
 15978  0030DE                     __ptext49:
 15979                           	opt stack 0
 15980  0030DE                     _PlatformTest:
 15981                           	opt stack 19
 15982                           
 15983                           ;Test.c: 475: LATCbits.LATC5 = 1;
 15984                           
 15985                           ;incstack = 0
 15986  0030DE  8A8B               	bsf	3979,5,c	;volatile
 15987                           
 15988                           ;Test.c: 477: (INTCONbits.GIE = 1);
 15989  0030E0  8EF2               	bsf	intcon,7,c	;volatile
 15990                           
 15991                           ;Test.c: 478: machine_state = Sorting_state;
 15992  0030E2  0E01               	movlw	1
 15993  0030E4  0100               	movlb	0	; () banked
 15994  0030E6  6FFC               	movwf	_machine_state& (0+255),b
 15995                           
 15996                           ;Test.c: 479: f_arm_position = 0;
 15997  0030E8  0E00               	movlw	0
 15998  0030EA  0100               	movlb	0	; () banked
 15999  0030EC  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 16000  0030EE  0E00               	movlw	0
 16001  0030F0  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 16002                           
 16003                           ;Test.c: 480: timer2_counter = 0;
 16004  0030F2  0E00               	movlw	0
 16005  0030F4  6E74               	movwf	_timer2_counter+1,c	;volatile
 16006  0030F6  0E00               	movlw	0
 16007  0030F8  6E73               	movwf	_timer2_counter,c	;volatile
 16008                           
 16009                           ; BSR set to: 0
 16010                           ;Test.c: 481: LATBbits.LATB3 = 0;
 16011  0030FA  968A               	bcf	3978,3,c	;volatile
 16012                           
 16013                           ; BSR set to: 0
 16014                           ;Test.c: 482: TMR2IE = 1;
 16015  0030FC  829D               	bsf	3997,1,c	;volatile
 16016                           
 16017                           ; BSR set to: 0
 16018                           ;Test.c: 483: TMR2ON = 1;
 16019  0030FE  84CA               	bsf	4042,2,c	;volatile
 16020                           
 16021                           ;Test.c: 484: was_low_2 = 0;
 16022  003100  0E00               	movlw	0
 16023  003102  6E7A               	movwf	_was_low_2+1,c	;volatile
 16024  003104  0E00               	movlw	0
 16025  003106  6E79               	movwf	_was_low_2,c	;volatile
 16026                           
 16027                           ;Test.c: 486: int on = 1;
 16028  003108  0E00               	movlw	0
 16029  00310A  0100               	movlb	0	; () banked
 16030  00310C  6FB6               	movwf	(PlatformTest@on+1)& (0+255),b
 16031  00310E  0E01               	movlw	1
 16032  003110  6FB5               	movwf	PlatformTest@on& (0+255),b
 16033                           
 16034                           ; BSR set to: 0
 16035                           ;Test.c: 487: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16036  003112  0E01               	movlw	1
 16037  003114  EC69  F030         	call	_lcdInst
 16038  003118  0E68               	movlw	104
 16039  00311A  0100               	movlb	0	; () banked
 16040  00311C  6FAB               	movwf	??_PlatformTest& (0+255),b
 16041  00311E  0EE4               	movlw	228
 16042  003120                     u12047:
 16043  003120  2EE8               	decfsz	wreg,f,c
 16044  003122  D7FE               	bra	u12047
 16045  003124  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16046  003126  D7FC               	bra	u12047
 16047  003128  F000               	nop	
 16048  00312A  0E80               	movlw	128
 16049  00312C  EC69  F030         	call	_lcdInst
 16050                           
 16051                           ;Test.c: 488: printf("1: DC | A: ARM  ");
 16052  003130  0E2A               	movlw	low STR_114
 16053  003132  0100               	movlb	0	; () banked
 16054  003134  6F8E               	movwf	printf@f& (0+255),b
 16055  003136  0EFC               	movlw	high STR_114
 16056  003138  0100               	movlb	0	; () banked
 16057  00313A  6F8F               	movwf	(printf@f+1)& (0+255),b
 16058  00313C  ECE7  F00E         	call	_printf	;wreg free
 16059                           
 16060                           ;Test.c: 490: while(PORTBbits.RB1 == 0){
 16061  003140  D058               	goto	l9318
 16062  003142                     l9300:
 16063                           
 16064                           ;Test.c: 491: readADC(0);
 16065  003142  0E00               	movlw	0
 16066  003144  EC62  F02F         	call	_readADC
 16067                           
 16068                           ;Test.c: 492: int res = ADRESH<<8 | ADRESL;
 16069  003148  50C3               	movf	4035,w,c	;volatile
 16070  00314A  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 16071  00314E  0100               	movlb	0	; () banked
 16072  003150  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 16073  003152  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 16074  003156  0100               	movlb	0	; () banked
 16075  003158  6BAB               	clrf	??_PlatformTest& (0+255),b
 16076  00315A  0100               	movlb	0	; () banked
 16077  00315C  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 16078  00315E  0100               	movlb	0	; () banked
 16079  003160  6FAD               	movwf	PlatformTest@res& (0+255),b
 16080  003162  0100               	movlb	0	; () banked
 16081  003164  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 16082  003166  0100               	movlb	0	; () banked
 16083  003168  6FAE               	movwf	(PlatformTest@res+1)& (0+255),b
 16084                           
 16085                           ; BSR set to: 0
 16086                           ;Test.c: 493: IR_signal = (res > 700) ? 1 : 0;
 16087  00316A  0100               	movlb	0	; () banked
 16088  00316C  BFAE               	btfsc	(PlatformTest@res+1)& (0+255),7,b
 16089  00316E  D00A               	goto	u8860
 16090  003170  0EBD               	movlw	189
 16091  003172  0100               	movlb	0	; () banked
 16092  003174  5DAD               	subwf	PlatformTest@res& (0+255),w,b
 16093  003176  0E02               	movlw	2
 16094  003178  0100               	movlb	0	; () banked
 16095  00317A  59AE               	subwfb	(PlatformTest@res+1)& (0+255),w,b
 16096  00317C  A0D8               	btfss	status,0,c
 16097  00317E  D002               	goto	u8860
 16098  003180  0E01               	movlw	1
 16099  003182  D001               	goto	u8870
 16100  003184                     u8860:
 16101  003184  0E00               	movlw	0
 16102  003186                     u8870:
 16103  003186  0100               	movlb	0	; () banked
 16104  003188  6FE2               	movwf	_IR_signal& (0+255),b
 16105  00318A  6BE3               	clrf	(_IR_signal+1)& (0+255),b
 16106                           
 16107                           ;Test.c: 495: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16108  00318C  0E01               	movlw	1
 16109  00318E  EC69  F030         	call	_lcdInst
 16110  003192  0E68               	movlw	104
 16111  003194  0100               	movlb	0	; () banked
 16112  003196  6FAB               	movwf	??_PlatformTest& (0+255),b
 16113  003198  0EE4               	movlw	228
 16114  00319A                     u12057:
 16115  00319A  2EE8               	decfsz	wreg,f,c
 16116  00319C  D7FE               	bra	u12057
 16117  00319E  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16118  0031A0  D7FC               	bra	u12057
 16119  0031A2  F000               	nop	
 16120  0031A4  0E80               	movlw	128
 16121  0031A6  EC69  F030         	call	_lcdInst
 16122                           
 16123                           ;Test.c: 496: printf("1: DC | A: ARM  ");
 16124  0031AA  0E2A               	movlw	low STR_114
 16125  0031AC  0100               	movlb	0	; () banked
 16126  0031AE  6F8E               	movwf	printf@f& (0+255),b
 16127  0031B0  0EFC               	movlw	high STR_114
 16128  0031B2  0100               	movlb	0	; () banked
 16129  0031B4  6F8F               	movwf	(printf@f+1)& (0+255),b
 16130  0031B6  ECE7  F00E         	call	_printf	;wreg free
 16131                           
 16132                           ;Test.c: 497: lcdInst(0b11000000);;
 16133  0031BA  0EC0               	movlw	192
 16134  0031BC  EC69  F030         	call	_lcdInst
 16135                           
 16136                           ;Test.c: 498: printf("5:H|6:L|IR:%d   ", res);
 16137  0031C0  0E19               	movlw	low STR_116
 16138  0031C2  0100               	movlb	0	; () banked
 16139  0031C4  6F8E               	movwf	printf@f& (0+255),b
 16140  0031C6  0EFC               	movlw	high STR_116
 16141  0031C8  0100               	movlb	0	; () banked
 16142  0031CA  6F8F               	movwf	(printf@f+1)& (0+255),b
 16143  0031CC  C0AD  F090         	movff	PlatformTest@res,?_printf+2
 16144  0031D0  C0AE  F091         	movff	PlatformTest@res+1,?_printf+3
 16145  0031D4  ECE7  F00E         	call	_printf	;wreg free
 16146                           
 16147                           ;Test.c: 499: _delay((unsigned long)((100)*(32000000/4000.0)));
 16148  0031D8  0E05               	movlw	5
 16149  0031DA  0100               	movlb	0	; () banked
 16150  0031DC  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 16151  0031DE  0E0F               	movlw	15
 16152  0031E0  0100               	movlb	0	; () banked
 16153  0031E2  6FAB               	movwf	??_PlatformTest& (0+255),b
 16154  0031E4  0EF1               	movlw	241
 16155  0031E6                     u12067:
 16156  0031E6  2EE8               	decfsz	wreg,f,c
 16157  0031E8  D7FE               	bra	u12067
 16158  0031EA  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16159  0031EC  D7FC               	bra	u12067
 16160  0031EE  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 16161  0031F0  D7FA               	bra	u12067
 16162  0031F2                     l9318:
 16163  0031F2  B281               	btfsc	3969,1,c	;volatile
 16164  0031F4  D059               	goto	l9338
 16165  0031F6  D7A5               	goto	l9300
 16166  0031F8                     l9320:
 16167                           
 16168                           ;Test.c: 504: readADC(0);
 16169  0031F8  0E00               	movlw	0
 16170  0031FA  EC62  F02F         	call	_readADC
 16171                           
 16172                           ;Test.c: 505: int res = ADRESH<<8 | ADRESL;
 16173  0031FE  50C3               	movf	4035,w,c	;volatile
 16174  003200  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 16175  003204  0100               	movlb	0	; () banked
 16176  003206  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 16177  003208  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 16178  00320C  0100               	movlb	0	; () banked
 16179  00320E  6BAB               	clrf	??_PlatformTest& (0+255),b
 16180  003210  0100               	movlb	0	; () banked
 16181  003212  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 16182  003214  0100               	movlb	0	; () banked
 16183  003216  6FAF               	movwf	PlatformTest@res_1808& (0+255),b
 16184  003218  0100               	movlb	0	; () banked
 16185  00321A  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 16186  00321C  0100               	movlb	0	; () banked
 16187  00321E  6FB0               	movwf	(PlatformTest@res_1808+1)& (0+255),b
 16188                           
 16189                           ; BSR set to: 0
 16190                           ;Test.c: 506: IR_signal = (res > 700) ? 1 : 0;
 16191  003220  0100               	movlb	0	; () banked
 16192  003222  BFB0               	btfsc	(PlatformTest@res_1808+1)& (0+255),7,b
 16193  003224  D00A               	goto	u8890
 16194  003226  0EBD               	movlw	189
 16195  003228  0100               	movlb	0	; () banked
 16196  00322A  5DAF               	subwf	PlatformTest@res_1808& (0+255),w,b
 16197  00322C  0E02               	movlw	2
 16198  00322E  0100               	movlb	0	; () banked
 16199  003230  59B0               	subwfb	(PlatformTest@res_1808+1)& (0+255),w,b
 16200  003232  A0D8               	btfss	status,0,c
 16201  003234  D002               	goto	u8890
 16202  003236  0E01               	movlw	1
 16203  003238  D001               	goto	u8900
 16204  00323A                     u8890:
 16205  00323A  0E00               	movlw	0
 16206  00323C                     u8900:
 16207  00323C  0100               	movlb	0	; () banked
 16208  00323E  6FE2               	movwf	_IR_signal& (0+255),b
 16209  003240  6BE3               	clrf	(_IR_signal+1)& (0+255),b
 16210                           
 16211                           ;Test.c: 508: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16212  003242  0E01               	movlw	1
 16213  003244  EC69  F030         	call	_lcdInst
 16214  003248  0E68               	movlw	104
 16215  00324A  0100               	movlb	0	; () banked
 16216  00324C  6FAB               	movwf	??_PlatformTest& (0+255),b
 16217  00324E  0EE4               	movlw	228
 16218  003250                     u12077:
 16219  003250  2EE8               	decfsz	wreg,f,c
 16220  003252  D7FE               	bra	u12077
 16221  003254  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16222  003256  D7FC               	bra	u12077
 16223  003258  F000               	nop	
 16224  00325A  0E80               	movlw	128
 16225  00325C  EC69  F030         	call	_lcdInst
 16226                           
 16227                           ;Test.c: 509: printf("1: DC | A: ARM  ");
 16228  003260  0E2A               	movlw	low STR_114
 16229  003262  0100               	movlb	0	; () banked
 16230  003264  6F8E               	movwf	printf@f& (0+255),b
 16231  003266  0EFC               	movlw	high STR_114
 16232  003268  0100               	movlb	0	; () banked
 16233  00326A  6F8F               	movwf	(printf@f+1)& (0+255),b
 16234  00326C  ECE7  F00E         	call	_printf	;wreg free
 16235                           
 16236                           ;Test.c: 510: lcdInst(0b11000000);;
 16237  003270  0EC0               	movlw	192
 16238  003272  EC69  F030         	call	_lcdInst
 16239                           
 16240                           ;Test.c: 511: printf("5:H|6:L|IR:%d   ", res);
 16241  003276  0E19               	movlw	low STR_116
 16242  003278  0100               	movlb	0	; () banked
 16243  00327A  6F8E               	movwf	printf@f& (0+255),b
 16244  00327C  0EFC               	movlw	high STR_116
 16245  00327E  0100               	movlb	0	; () banked
 16246  003280  6F8F               	movwf	(printf@f+1)& (0+255),b
 16247  003282  C0AF  F090         	movff	PlatformTest@res_1808,?_printf+2
 16248  003286  C0B0  F091         	movff	PlatformTest@res_1808+1,?_printf+3
 16249  00328A  ECE7  F00E         	call	_printf	;wreg free
 16250                           
 16251                           ;Test.c: 512: _delay((unsigned long)((100)*(32000000/4000.0)));
 16252  00328E  0E05               	movlw	5
 16253  003290  0100               	movlb	0	; () banked
 16254  003292  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 16255  003294  0E0F               	movlw	15
 16256  003296  0100               	movlb	0	; () banked
 16257  003298  6FAB               	movwf	??_PlatformTest& (0+255),b
 16258  00329A  0EF1               	movlw	241
 16259  00329C                     u12087:
 16260  00329C  2EE8               	decfsz	wreg,f,c
 16261  00329E  D7FE               	bra	u12087
 16262  0032A0  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16263  0032A2  D7FC               	bra	u12087
 16264  0032A4  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 16265  0032A6  D7FA               	bra	u12087
 16266  0032A8                     l9338:
 16267  0032A8  A281               	btfss	3969,1,c	;volatile
 16268  0032AA  D7A6               	goto	l9320
 16269                           
 16270                           ;Test.c: 513: }
 16271                           ;Test.c: 514: if(PORTB >> 4 == 0b1111){
 16272  0032AC  3881               	swapf	3969,w,c	;volatile
 16273  0032AE  0B0F               	andlw	15
 16274  0032B0  0A0F               	xorlw	15
 16275  0032B2  B4D8               	btfsc	status,2,c
 16276  0032B4  D08F               	goto	l1458
 16277                           
 16278                           ;Test.c: 517: else if(PORTB >> 4 == 0b0000){
 16279                           
 16280                           ;Test.c: 516: }
 16281                           
 16282                           ;Test.c: 515: break;
 16283  0032B6  CF81 F0AB          	movff	3969,??_PlatformTest	;volatile
 16284  0032BA  0100               	movlb	0	; () banked
 16285  0032BC  3BAB               	swapf	??_PlatformTest& (0+255),f,b
 16286  0032BE  0E0F               	movlw	15
 16287  0032C0  17AB               	andwf	??_PlatformTest& (0+255),f,b
 16288  0032C2  A4D8               	btfss	status,2,c
 16289  0032C4  D012               	goto	l9350
 16290                           
 16291                           ; BSR set to: 0
 16292                           ;Test.c: 518: LATBbits.LATB2 = !LATBbits.LATB2;
 16293  0032C6  B48A               	btfsc	3978,2,c	;volatile
 16294  0032C8  D004               	goto	u8940
 16295  0032CA  0100               	movlb	0	; () banked
 16296  0032CC  6BAB               	clrf	??_PlatformTest& (0+255),b
 16297  0032CE  2BAB               	incf	??_PlatformTest& (0+255),f,b
 16298  0032D0  D002               	goto	u8958
 16299  0032D2                     u8940:
 16300  0032D2  0100               	movlb	0	; () banked
 16301  0032D4  6BAB               	clrf	??_PlatformTest& (0+255),b
 16302  0032D6                     u8958:
 16303  0032D6  0100               	movlb	0	; () banked
 16304  0032D8  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 16305  0032DA  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 16306  0032DC  508A               	movf	3978,w,c	;volatile
 16307  0032DE  0100               	movlb	0	; () banked
 16308  0032E0  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 16309  0032E2  0BFB               	andlw	-5
 16310  0032E4  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 16311  0032E6  6E8A               	movwf	3978,c	;volatile
 16312                           
 16313                           ;Test.c: 519: }
 16314  0032E8  D072               	goto	l1473
 16315  0032EA                     l9350:
 16316                           
 16317                           ; BSR set to: 0
 16318                           ;Test.c: 520: else if(PORTB >> 4 == 0b0011){
 16319  0032EA  3881               	swapf	3969,w,c	;volatile
 16320  0032EC  0B0F               	andlw	15
 16321  0032EE  0A03               	xorlw	3
 16322  0032F0  A4D8               	btfss	status,2,c
 16323  0032F2  D020               	goto	l9362
 16324                           
 16325                           ; BSR set to: 0
 16326                           ;Test.c: 521: if(on){
 16327  0032F4  0100               	movlb	0	; () banked
 16328  0032F6  51B5               	movf	PlatformTest@on& (0+255),w,b
 16329  0032F8  0100               	movlb	0	; () banked
 16330  0032FA  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 16331  0032FC  B4D8               	btfsc	status,2,c
 16332  0032FE  D010               	goto	l9358
 16333                           
 16334                           ; BSR set to: 0
 16335                           ;Test.c: 522: f_arm_position = 1;
 16336  003300  0E00               	movlw	0
 16337  003302  0100               	movlb	0	; () banked
 16338  003304  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 16339  003306  0E01               	movlw	1
 16340  003308  D00F               	goto	L15
 16341  00330A                     l9356:
 16342                           
 16343                           ; BSR set to: 0
 16344                           ;Test.c: 523: on = !on;
 16345  00330A  0100               	movlb	0	; () banked
 16346  00330C  51B5               	movf	PlatformTest@on& (0+255),w,b
 16347  00330E  0100               	movlb	0	; () banked
 16348  003310  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 16349  003312  A4D8               	btfss	status,2,c
 16350  003314  D00D               	goto	u9000
 16351  003316  D00A               	goto	u9001
 16352  003318                     u8990:
 16353  003318  0100               	movlb	0	; () banked
 16354  00331A  6FB5               	movwf	PlatformTest@on& (0+255),b
 16355  00331C  6BB6               	clrf	(PlatformTest@on+1)& (0+255),b
 16356                           
 16357                           ;Test.c: 524: }
 16358  00331E  D057               	goto	l1473
 16359  003320                     l9358:
 16360                           
 16361                           ; BSR set to: 0
 16362                           ;Test.c: 525: else{
 16363                           ;Test.c: 526: f_arm_position = 0;
 16364  003320  0E00               	movlw	0
 16365  003322  0100               	movlb	0	; () banked
 16366  003324  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 16367  003326  0E00               	movlw	0
 16368  003328                     L15:
 16369  003328  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 16370  00332A  D7EF               	goto	l9356
 16371  00332C                     u9001:
 16372  00332C  0E01               	movlw	1
 16373  00332E  D7F4               	goto	u8990
 16374  003330                     u9000:
 16375  003330  0E00               	movlw	0
 16376  003332  D7F2               	goto	u8990
 16377  003334                     l9362:
 16378                           
 16379                           ; BSR set to: 0
 16380                           ;Test.c: 530: else if(PORTB >> 4 == 0b0101){
 16381  003334  3881               	swapf	3969,w,c	;volatile
 16382  003336  0B0F               	andlw	15
 16383  003338  0A05               	xorlw	5
 16384  00333A  A4D8               	btfss	status,2,c
 16385  00333C  D022               	goto	l9378
 16386                           
 16387                           ; BSR set to: 0
 16388                           ;Test.c: 532: (INTCONbits.GIE = 0);
 16389  00333E  9EF2               	bcf	intcon,7,c	;volatile
 16390                           
 16391                           ;Test.c: 533: TMR2IE = 0;
 16392  003340  929D               	bcf	3997,1,c	;volatile
 16393                           
 16394                           ; BSR set to: 0
 16395                           ;Test.c: 534: for(int i = 0; i<3000; i++){
 16396  003342  0E00               	movlw	0
 16397  003344  0100               	movlb	0	; () banked
 16398  003346  6FB2               	movwf	(PlatformTest@i+1)& (0+255),b
 16399  003348  0E00               	movlw	0
 16400  00334A  6FB1               	movwf	PlatformTest@i& (0+255),b
 16401  00334C                     l9368:
 16402                           
 16403                           ; BSR set to: 0
 16404  00334C  0100               	movlb	0	; () banked
 16405  00334E  BFB2               	btfsc	(PlatformTest@i+1)& (0+255),7,b
 16406  003350  D008               	goto	l1467
 16407  003352  0EB8               	movlw	184
 16408  003354  0100               	movlb	0	; () banked
 16409  003356  5DB1               	subwf	PlatformTest@i& (0+255),w,b
 16410  003358  0E0B               	movlw	11
 16411  00335A  0100               	movlb	0	; () banked
 16412  00335C  59B2               	subwfb	(PlatformTest@i+1)& (0+255),w,b
 16413  00335E  B0D8               	btfsc	status,0,c
 16414  003360  D00D               	goto	l1468
 16415  003362                     l1467:
 16416                           
 16417                           ; BSR set to: 0
 16418                           ;Test.c: 535: LATAbits.LATA4 = 1;
 16419  003362  8889               	bsf	3977,4,c	;volatile
 16420                           
 16421                           ; BSR set to: 0
 16422                           ;Test.c: 536: _delay((unsigned long)((75)*(32000000/4000000.0)));
 16423  003364  0EC8               	movlw	200
 16424  003366                     u12097:
 16425  003366  2EE8               	decfsz	wreg,f,c
 16426  003368  D7FE               	bra	u12097
 16427                           
 16428                           ;Test.c: 537: LATAbits.LATA4 = 0;
 16429  00336A  9889               	bcf	3977,4,c	;volatile
 16430                           
 16431                           ;Test.c: 538: _delay((unsigned long)((25)*(32000000/4000000.0)));
 16432  00336C  0E42               	movlw	66
 16433  00336E                     u12107:
 16434  00336E  2EE8               	decfsz	wreg,f,c
 16435  003370  D7FE               	bra	u12107
 16436  003372  D000               	nop2	
 16437  003374  0100               	movlb	0	; () banked
 16438  003376  4BB1               	infsnz	PlatformTest@i& (0+255),f,b
 16439  003378  2BB2               	incf	(PlatformTest@i+1)& (0+255),f,b
 16440  00337A  D7E8               	goto	l9368
 16441  00337C                     l1468:
 16442                           
 16443                           ; BSR set to: 0
 16444                           ;Test.c: 539: }
 16445                           ;Test.c: 540: TMR2IE = 1;
 16446  00337C  829D               	bsf	3997,1,c	;volatile
 16447                           
 16448                           ;Test.c: 541: (INTCONbits.GIE = 1);
 16449  00337E  8EF2               	bsf	intcon,7,c	;volatile
 16450                           
 16451                           ;Test.c: 542: }
 16452  003380  D026               	goto	l1473
 16453  003382                     l9378:
 16454                           
 16455                           ; BSR set to: 0
 16456                           ;Test.c: 543: else if (PORTB >> 4 == 0b0110){
 16457  003382  3881               	swapf	3969,w,c	;volatile
 16458  003384  0B0F               	andlw	15
 16459  003386  0A06               	xorlw	6
 16460  003388  A4D8               	btfss	status,2,c
 16461  00338A  D021               	goto	l1473
 16462                           
 16463                           ; BSR set to: 0
 16464                           ;Test.c: 545: (INTCONbits.GIE = 0);
 16465  00338C  9EF2               	bcf	intcon,7,c	;volatile
 16466                           
 16467                           ;Test.c: 546: TMR2IE = 0;
 16468  00338E  929D               	bcf	3997,1,c	;volatile
 16469                           
 16470                           ; BSR set to: 0
 16471                           ;Test.c: 547: for(int i = 0; i<3000; i++){
 16472  003390  0E00               	movlw	0
 16473  003392  0100               	movlb	0	; () banked
 16474  003394  6FB4               	movwf	(PlatformTest@i_1812+1)& (0+255),b
 16475  003396  0E00               	movlw	0
 16476  003398  6FB3               	movwf	PlatformTest@i_1812& (0+255),b
 16477  00339A                     l9384:
 16478                           
 16479                           ; BSR set to: 0
 16480  00339A  0100               	movlb	0	; () banked
 16481  00339C  BFB4               	btfsc	(PlatformTest@i_1812+1)& (0+255),7,b
 16482  00339E  D008               	goto	l1471
 16483  0033A0  0EB8               	movlw	184
 16484  0033A2  0100               	movlb	0	; () banked
 16485  0033A4  5DB3               	subwf	PlatformTest@i_1812& (0+255),w,b
 16486  0033A6  0E0B               	movlw	11
 16487  0033A8  0100               	movlb	0	; () banked
 16488  0033AA  59B4               	subwfb	(PlatformTest@i_1812+1)& (0+255),w,b
 16489  0033AC  B0D8               	btfsc	status,0,c
 16490  0033AE  D00D               	goto	l1472
 16491  0033B0                     l1471:
 16492                           
 16493                           ; BSR set to: 0
 16494                           ;Test.c: 548: LATAbits.LATA4 = 1;
 16495  0033B0  8889               	bsf	3977,4,c	;volatile
 16496                           
 16497                           ; BSR set to: 0
 16498                           ;Test.c: 549: _delay((unsigned long)((58)*(32000000/4000000.0)));
 16499  0033B2  0E9A               	movlw	154
 16500  0033B4                     u12117:
 16501  0033B4  2EE8               	decfsz	wreg,f,c
 16502  0033B6  D7FE               	bra	u12117
 16503  0033B8  D000               	nop2	
 16504                           
 16505                           ;Test.c: 550: LATAbits.LATA4 = 0;
 16506  0033BA  9889               	bcf	3977,4,c	;volatile
 16507                           
 16508                           ;Test.c: 551: _delay((unsigned long)((42)*(32000000/4000000.0)));
 16509  0033BC  0E70               	movlw	112
 16510  0033BE                     u12127:
 16511  0033BE  2EE8               	decfsz	wreg,f,c
 16512  0033C0  D7FE               	bra	u12127
 16513  0033C2  0100               	movlb	0	; () banked
 16514  0033C4  4BB3               	infsnz	PlatformTest@i_1812& (0+255),f,b
 16515  0033C6  2BB4               	incf	(PlatformTest@i_1812+1)& (0+255),f,b
 16516  0033C8  D7E8               	goto	l9384
 16517  0033CA                     l1472:
 16518                           
 16519                           ; BSR set to: 0
 16520                           ;Test.c: 552: }
 16521                           ;Test.c: 553: (INTCONbits.GIE = 1);
 16522  0033CA  8EF2               	bsf	intcon,7,c	;volatile
 16523                           
 16524                           ;Test.c: 554: TMR2IE = 1;
 16525  0033CC  829D               	bsf	3997,1,c	;volatile
 16526  0033CE                     l1473:
 16527  0033CE  A281               	btfss	3969,1,c	;volatile
 16528  0033D0  D76B               	goto	l9338
 16529  0033D2  D7FD               	goto	l1473
 16530  0033D4                     l1458:
 16531                           
 16532                           ;Test.c: 558: }
 16533                           ;Test.c: 560: LATCbits.LATC5 = 0;
 16534  0033D4  9A8B               	bcf	3979,5,c	;volatile
 16535                           
 16536                           ;Test.c: 561: stopSignals();
 16537  0033D6  EC1E  F030         	call	_stopSignals	;wreg free
 16538                           
 16539                           ;Test.c: 562: machine_state = Testing_state;
 16540  0033DA  0E03               	movlw	3
 16541  0033DC  0100               	movlb	0	; () banked
 16542  0033DE  6FFC               	movwf	_machine_state& (0+255),b
 16543                           
 16544                           ; BSR set to: 0
 16545  0033E0  0012               	return		;funcret
 16546  0033E2                     __end_of_PlatformTest:
 16547                           	opt stack 0
 16548                           tblptru	equ	0xFF8
 16549                           tblptrh	equ	0xFF7
 16550                           tblptrl	equ	0xFF6
 16551                           tablat	equ	0xFF5
 16552                           prodh	equ	0xFF4
 16553                           prodl	equ	0xFF3
 16554                           intcon	equ	0xFF2
 16555                           intcon2	equ	0xFF1
 16556                           intcon3	equ	0xFF0
 16557                           postinc0	equ	0xFEE
 16558                           wreg	equ	0xFE8
 16559                           postdec1	equ	0xFE5
 16560                           fsr1l	equ	0xFE1
 16561                           indf2	equ	0xFDF
 16562                           postinc2	equ	0xFDE
 16563                           postdec2	equ	0xFDD
 16564                           fsr2h	equ	0xFDA
 16565                           fsr2l	equ	0xFD9
 16566                           status	equ	0xFD8
 16567                           
 16568 ;; *************** function _BothServos *****************
 16569 ;; Defined at:
 16570 ;;		line 379 in file "Test.c"
 16571 ;; Parameters:    Size  Location     Type
 16572 ;;		None
 16573 ;; Auto vars:     Size  Location     Type
 16574 ;;		None
 16575 ;; Return value:  Size  Location     Type
 16576 ;;                  1    wreg      void 
 16577 ;; Registers used:
 16578 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16579 ;; Tracked objects:
 16580 ;;		On entry : 0/0
 16581 ;;		On exit  : 0/0
 16582 ;;		Unchanged: 0/0
 16583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16586 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16587 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16588 ;;Total ram usage:        2 bytes
 16589 ;; Hardware stack levels used:    1
 16590 ;; Hardware stack levels required when called:   10
 16591 ;; This function calls:
 16592 ;;		_initServos
 16593 ;;		_lcdInst
 16594 ;;		_printf
 16595 ;;		_stopSignals
 16596 ;;		_updateServoPosition
 16597 ;; This function is called by:
 16598 ;;		_Test
 16599 ;; This function uses a non-reentrant model
 16600 ;;
 16601                           
 16602                           	psect	text50
 16603  002206                     __ptext50:
 16604                           	opt stack 0
 16605  002206                     _BothServos:
 16606                           	opt stack 19
 16607                           
 16608                           ;Test.c: 380: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16609                           
 16610                           ; BSR set to: 0
 16611                           ;incstack = 0
 16612  002206  0E01               	movlw	1
 16613  002208  EC69  F030         	call	_lcdInst
 16614  00220C  0E68               	movlw	104
 16615  00220E  0100               	movlb	0	; () banked
 16616  002210  6FAB               	movwf	??_BothServos& (0+255),b
 16617  002212  0EE4               	movlw	228
 16618  002214                     u12137:
 16619  002214  2EE8               	decfsz	wreg,f,c
 16620  002216  D7FE               	bra	u12137
 16621  002218  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16622  00221A  D7FC               	bra	u12137
 16623  00221C  F000               	nop	
 16624  00221E  0E80               	movlw	128
 16625  002220  EC69  F030         	call	_lcdInst
 16626                           
 16627                           ;Test.c: 381: printf("TST: BOTH SERVOS");
 16628  002224  0EC3               	movlw	low STR_111
 16629  002226  0100               	movlb	0	; () banked
 16630  002228  6F8E               	movwf	printf@f& (0+255),b
 16631  00222A  0EFC               	movlw	high STR_111
 16632  00222C  0100               	movlb	0	; () banked
 16633  00222E  6F8F               	movwf	(printf@f+1)& (0+255),b
 16634  002230  ECE7  F00E         	call	_printf	;wreg free
 16635                           
 16636                           ;Test.c: 382: TMR1ON = 1;
 16637  002234  80CD               	bsf	4045,0,c	;volatile
 16638                           
 16639                           ;Test.c: 383: TMR3ON = 1;
 16640  002236  80B1               	bsf	4017,0,c	;volatile
 16641                           
 16642                           ;Test.c: 384: machine_state = Sorting_state;
 16643  002238  0E01               	movlw	1
 16644  00223A  0100               	movlb	0	; () banked
 16645  00223C  6FFC               	movwf	_machine_state& (0+255),b
 16646                           
 16647                           ; BSR set to: 0
 16648                           ;Test.c: 385: was_low_1 = 0;
 16649  00223E  0E00               	movlw	0
 16650  002240  6E78               	movwf	_was_low_1+1,c	;volatile
 16651  002242  0E00               	movlw	0
 16652  002244  6E77               	movwf	_was_low_1,c	;volatile
 16653                           
 16654                           ; BSR set to: 0
 16655                           ;Test.c: 386: was_low_3 = 0;
 16656  002246  0E00               	movlw	0
 16657  002248  6E7C               	movwf	_was_low_3+1,c	;volatile
 16658  00224A  0E00               	movlw	0
 16659  00224C  6E7B               	movwf	_was_low_3,c	;volatile
 16660                           
 16661                           ; BSR set to: 0
 16662                           ;Test.c: 392: initServos();
 16663  00224E  EC2B  F02A         	call	_initServos	;wreg free
 16664                           
 16665                           ;Test.c: 393: _delay((unsigned long)((1500)*(32000000/4000.0)));
 16666  002252  0E3D               	movlw	61
 16667  002254  0100               	movlb	0	; () banked
 16668  002256  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16669  002258  0EE1               	movlw	225
 16670  00225A  0100               	movlb	0	; () banked
 16671  00225C  6FAB               	movwf	??_BothServos& (0+255),b
 16672  00225E  0E3F               	movlw	63
 16673  002260                     u12147:
 16674  002260  2EE8               	decfsz	wreg,f,c
 16675  002262  D7FE               	bra	u12147
 16676  002264  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16677  002266  D7FC               	bra	u12147
 16678  002268  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16679  00226A  D7FA               	bra	u12147
 16680  00226C  D000               	nop2	
 16681                           
 16682                           ;Test.c: 395: updateServoPosition(400, 1);
 16683  00226E  0E01               	movlw	1
 16684  002270  0100               	movlb	0	; () banked
 16685  002272  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16686  002274  0E90               	movlw	144
 16687  002276  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16688  002278  0E00               	movlw	0
 16689  00227A  0100               	movlb	0	; () banked
 16690  00227C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16691  00227E  0E01               	movlw	1
 16692  002280  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16693  002282  EC65  F029         	call	_updateServoPosition	;wreg free
 16694                           
 16695                           ;Test.c: 396: updateServoPosition(1050, 3);
 16696  002286  0E04               	movlw	4
 16697  002288  0100               	movlb	0	; () banked
 16698  00228A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16699  00228C  0E1A               	movlw	26
 16700  00228E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16701  002290  0E00               	movlw	0
 16702  002292  0100               	movlb	0	; () banked
 16703  002294  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16704  002296  0E03               	movlw	3
 16705  002298  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16706  00229A  EC65  F029         	call	_updateServoPosition	;wreg free
 16707                           
 16708                           ;Test.c: 397: _delay((unsigned long)((750)*(32000000/4000.0)));
 16709  00229E  0E1F               	movlw	31
 16710  0022A0  0100               	movlb	0	; () banked
 16711  0022A2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16712  0022A4  0E71               	movlw	113
 16713  0022A6  0100               	movlb	0	; () banked
 16714  0022A8  6FAB               	movwf	??_BothServos& (0+255),b
 16715  0022AA  0E1E               	movlw	30
 16716  0022AC                     u12157:
 16717  0022AC  2EE8               	decfsz	wreg,f,c
 16718  0022AE  D7FE               	bra	u12157
 16719  0022B0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16720  0022B2  D7FC               	bra	u12157
 16721  0022B4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16722  0022B6  D7FA               	bra	u12157
 16723  0022B8  F000               	nop	
 16724                           
 16725                           ;Test.c: 398: updateServoPosition(1260, 3);
 16726  0022BA  0E04               	movlw	4
 16727  0022BC  0100               	movlb	0	; () banked
 16728  0022BE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16729  0022C0  0EEC               	movlw	236
 16730  0022C2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16731  0022C4  0E00               	movlw	0
 16732  0022C6  0100               	movlb	0	; () banked
 16733  0022C8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16734  0022CA  0E03               	movlw	3
 16735  0022CC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16736  0022CE  EC65  F029         	call	_updateServoPosition	;wreg free
 16737                           
 16738                           ;Test.c: 399: _delay((unsigned long)((700)*(32000000/4000.0)));
 16739  0022D2  0E1D               	movlw	29
 16740  0022D4  0100               	movlb	0	; () banked
 16741  0022D6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16742  0022D8  0E69               	movlw	105
 16743  0022DA  0100               	movlb	0	; () banked
 16744  0022DC  6FAB               	movwf	??_BothServos& (0+255),b
 16745  0022DE  0EA5               	movlw	165
 16746  0022E0                     u12167:
 16747  0022E0  2EE8               	decfsz	wreg,f,c
 16748  0022E2  D7FE               	bra	u12167
 16749  0022E4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16750  0022E6  D7FC               	bra	u12167
 16751  0022E8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16752  0022EA  D7FA               	bra	u12167
 16753                           
 16754                           ;Test.c: 400: updateServoPosition(1050, 3);
 16755  0022EC  0E04               	movlw	4
 16756  0022EE  0100               	movlb	0	; () banked
 16757  0022F0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16758  0022F2  0E1A               	movlw	26
 16759  0022F4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16760  0022F6  0E00               	movlw	0
 16761  0022F8  0100               	movlb	0	; () banked
 16762  0022FA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16763  0022FC  0E03               	movlw	3
 16764  0022FE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16765  002300  EC65  F029         	call	_updateServoPosition	;wreg free
 16766                           
 16767                           ;Test.c: 401: _delay((unsigned long)((750)*(32000000/4000.0)));
 16768  002304  0E1F               	movlw	31
 16769  002306  0100               	movlb	0	; () banked
 16770  002308  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16771  00230A  0E71               	movlw	113
 16772  00230C  0100               	movlb	0	; () banked
 16773  00230E  6FAB               	movwf	??_BothServos& (0+255),b
 16774  002310  0E1E               	movlw	30
 16775  002312                     u12177:
 16776  002312  2EE8               	decfsz	wreg,f,c
 16777  002314  D7FE               	bra	u12177
 16778  002316  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16779  002318  D7FC               	bra	u12177
 16780  00231A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16781  00231C  D7FA               	bra	u12177
 16782  00231E  F000               	nop	
 16783                           
 16784                           ;Test.c: 403: updateServoPosition(850, 1);
 16785  002320  0E03               	movlw	3
 16786  002322  0100               	movlb	0	; () banked
 16787  002324  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16788  002326  0E52               	movlw	82
 16789  002328  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16790  00232A  0E00               	movlw	0
 16791  00232C  0100               	movlb	0	; () banked
 16792  00232E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16793  002330  0E01               	movlw	1
 16794  002332  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16795  002334  EC65  F029         	call	_updateServoPosition	;wreg free
 16796                           
 16797                           ;Test.c: 404: updateServoPosition(1050, 3);
 16798  002338  0E04               	movlw	4
 16799  00233A  0100               	movlb	0	; () banked
 16800  00233C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16801  00233E  0E1A               	movlw	26
 16802  002340  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16803  002342  0E00               	movlw	0
 16804  002344  0100               	movlb	0	; () banked
 16805  002346  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16806  002348  0E03               	movlw	3
 16807  00234A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16808  00234C  EC65  F029         	call	_updateServoPosition	;wreg free
 16809                           
 16810                           ;Test.c: 405: _delay((unsigned long)((750)*(32000000/4000.0)));
 16811  002350  0E1F               	movlw	31
 16812  002352  0100               	movlb	0	; () banked
 16813  002354  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16814  002356  0E71               	movlw	113
 16815  002358  0100               	movlb	0	; () banked
 16816  00235A  6FAB               	movwf	??_BothServos& (0+255),b
 16817  00235C  0E1E               	movlw	30
 16818  00235E                     u12187:
 16819  00235E  2EE8               	decfsz	wreg,f,c
 16820  002360  D7FE               	bra	u12187
 16821  002362  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16822  002364  D7FC               	bra	u12187
 16823  002366  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16824  002368  D7FA               	bra	u12187
 16825  00236A  F000               	nop	
 16826                           
 16827                           ;Test.c: 406: updateServoPosition(1260, 3);
 16828  00236C  0E04               	movlw	4
 16829  00236E  0100               	movlb	0	; () banked
 16830  002370  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16831  002372  0EEC               	movlw	236
 16832  002374  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16833  002376  0E00               	movlw	0
 16834  002378  0100               	movlb	0	; () banked
 16835  00237A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16836  00237C  0E03               	movlw	3
 16837  00237E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16838  002380  EC65  F029         	call	_updateServoPosition	;wreg free
 16839                           
 16840                           ;Test.c: 407: _delay((unsigned long)((700)*(32000000/4000.0)));
 16841  002384  0E1D               	movlw	29
 16842  002386  0100               	movlb	0	; () banked
 16843  002388  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16844  00238A  0E69               	movlw	105
 16845  00238C  0100               	movlb	0	; () banked
 16846  00238E  6FAB               	movwf	??_BothServos& (0+255),b
 16847  002390  0EA5               	movlw	165
 16848  002392                     u12197:
 16849  002392  2EE8               	decfsz	wreg,f,c
 16850  002394  D7FE               	bra	u12197
 16851  002396  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16852  002398  D7FC               	bra	u12197
 16853  00239A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16854  00239C  D7FA               	bra	u12197
 16855                           
 16856                           ;Test.c: 408: updateServoPosition(1050, 3);
 16857  00239E  0E04               	movlw	4
 16858  0023A0  0100               	movlb	0	; () banked
 16859  0023A2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16860  0023A4  0E1A               	movlw	26
 16861  0023A6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16862  0023A8  0E00               	movlw	0
 16863  0023AA  0100               	movlb	0	; () banked
 16864  0023AC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16865  0023AE  0E03               	movlw	3
 16866  0023B0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16867  0023B2  EC65  F029         	call	_updateServoPosition	;wreg free
 16868                           
 16869                           ;Test.c: 409: _delay((unsigned long)((750)*(32000000/4000.0)));
 16870  0023B6  0E1F               	movlw	31
 16871  0023B8  0100               	movlb	0	; () banked
 16872  0023BA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16873  0023BC  0E71               	movlw	113
 16874  0023BE  0100               	movlb	0	; () banked
 16875  0023C0  6FAB               	movwf	??_BothServos& (0+255),b
 16876  0023C2  0E1E               	movlw	30
 16877  0023C4                     u12207:
 16878  0023C4  2EE8               	decfsz	wreg,f,c
 16879  0023C6  D7FE               	bra	u12207
 16880  0023C8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16881  0023CA  D7FC               	bra	u12207
 16882  0023CC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16883  0023CE  D7FA               	bra	u12207
 16884  0023D0  F000               	nop	
 16885                           
 16886                           ;Test.c: 411: updateServoPosition(400, 1);
 16887  0023D2  0E01               	movlw	1
 16888  0023D4  0100               	movlb	0	; () banked
 16889  0023D6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16890  0023D8  0E90               	movlw	144
 16891  0023DA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16892  0023DC  0E00               	movlw	0
 16893  0023DE  0100               	movlb	0	; () banked
 16894  0023E0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16895  0023E2  0E01               	movlw	1
 16896  0023E4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16897  0023E6  EC65  F029         	call	_updateServoPosition	;wreg free
 16898                           
 16899                           ;Test.c: 412: updateServoPosition(1050, 3);
 16900  0023EA  0E04               	movlw	4
 16901  0023EC  0100               	movlb	0	; () banked
 16902  0023EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16903  0023F0  0E1A               	movlw	26
 16904  0023F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16905  0023F4  0E00               	movlw	0
 16906  0023F6  0100               	movlb	0	; () banked
 16907  0023F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16908  0023FA  0E03               	movlw	3
 16909  0023FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16910  0023FE  EC65  F029         	call	_updateServoPosition	;wreg free
 16911                           
 16912                           ;Test.c: 413: _delay((unsigned long)((750)*(32000000/4000.0)));
 16913  002402  0E1F               	movlw	31
 16914  002404  0100               	movlb	0	; () banked
 16915  002406  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16916  002408  0E71               	movlw	113
 16917  00240A  0100               	movlb	0	; () banked
 16918  00240C  6FAB               	movwf	??_BothServos& (0+255),b
 16919  00240E  0E1E               	movlw	30
 16920  002410                     u12217:
 16921  002410  2EE8               	decfsz	wreg,f,c
 16922  002412  D7FE               	bra	u12217
 16923  002414  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16924  002416  D7FC               	bra	u12217
 16925  002418  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16926  00241A  D7FA               	bra	u12217
 16927  00241C  F000               	nop	
 16928                           
 16929                           ;Test.c: 414: updateServoPosition(1260, 3);
 16930  00241E  0E04               	movlw	4
 16931  002420  0100               	movlb	0	; () banked
 16932  002422  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16933  002424  0EEC               	movlw	236
 16934  002426  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16935  002428  0E00               	movlw	0
 16936  00242A  0100               	movlb	0	; () banked
 16937  00242C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16938  00242E  0E03               	movlw	3
 16939  002430  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16940  002432  EC65  F029         	call	_updateServoPosition	;wreg free
 16941                           
 16942                           ;Test.c: 415: _delay((unsigned long)((700)*(32000000/4000.0)));
 16943  002436  0E1D               	movlw	29
 16944  002438  0100               	movlb	0	; () banked
 16945  00243A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16946  00243C  0E69               	movlw	105
 16947  00243E  0100               	movlb	0	; () banked
 16948  002440  6FAB               	movwf	??_BothServos& (0+255),b
 16949  002442  0EA5               	movlw	165
 16950  002444                     u12227:
 16951  002444  2EE8               	decfsz	wreg,f,c
 16952  002446  D7FE               	bra	u12227
 16953  002448  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16954  00244A  D7FC               	bra	u12227
 16955  00244C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16956  00244E  D7FA               	bra	u12227
 16957                           
 16958                           ;Test.c: 416: updateServoPosition(1050, 3);
 16959  002450  0E04               	movlw	4
 16960  002452  0100               	movlb	0	; () banked
 16961  002454  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16962  002456  0E1A               	movlw	26
 16963  002458  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16964  00245A  0E00               	movlw	0
 16965  00245C  0100               	movlb	0	; () banked
 16966  00245E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16967  002460  0E03               	movlw	3
 16968  002462  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16969  002464  EC65  F029         	call	_updateServoPosition	;wreg free
 16970                           
 16971                           ;Test.c: 417: _delay((unsigned long)((1500)*(32000000/4000.0)));
 16972  002468  0E3D               	movlw	61
 16973  00246A  0100               	movlb	0	; () banked
 16974  00246C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16975  00246E  0EE1               	movlw	225
 16976  002470  0100               	movlb	0	; () banked
 16977  002472  6FAB               	movwf	??_BothServos& (0+255),b
 16978  002474  0E3F               	movlw	63
 16979  002476                     u12237:
 16980  002476  2EE8               	decfsz	wreg,f,c
 16981  002478  D7FE               	bra	u12237
 16982  00247A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16983  00247C  D7FC               	bra	u12237
 16984  00247E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16985  002480  D7FA               	bra	u12237
 16986  002482  D000               	nop2	
 16987                           
 16988                           ;Test.c: 419: updateServoPosition(1550, 1);
 16989  002484  0E06               	movlw	6
 16990  002486  0100               	movlb	0	; () banked
 16991  002488  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16992  00248A  0E0E               	movlw	14
 16993  00248C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16994  00248E  0E00               	movlw	0
 16995  002490  0100               	movlb	0	; () banked
 16996  002492  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16997  002494  0E01               	movlw	1
 16998  002496  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16999  002498  EC65  F029         	call	_updateServoPosition	;wreg free
 17000                           
 17001                           ;Test.c: 420: updateServoPosition(1050, 3);
 17002  00249C  0E04               	movlw	4
 17003  00249E  0100               	movlb	0	; () banked
 17004  0024A0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17005  0024A2  0E1A               	movlw	26
 17006  0024A4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17007  0024A6  0E00               	movlw	0
 17008  0024A8  0100               	movlb	0	; () banked
 17009  0024AA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17010  0024AC  0E03               	movlw	3
 17011  0024AE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17012  0024B0  EC65  F029         	call	_updateServoPosition	;wreg free
 17013                           
 17014                           ;Test.c: 421: _delay((unsigned long)((750)*(32000000/4000.0)));
 17015  0024B4  0E1F               	movlw	31
 17016  0024B6  0100               	movlb	0	; () banked
 17017  0024B8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 17018  0024BA  0E71               	movlw	113
 17019  0024BC  0100               	movlb	0	; () banked
 17020  0024BE  6FAB               	movwf	??_BothServos& (0+255),b
 17021  0024C0  0E1E               	movlw	30
 17022  0024C2                     u12247:
 17023  0024C2  2EE8               	decfsz	wreg,f,c
 17024  0024C4  D7FE               	bra	u12247
 17025  0024C6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 17026  0024C8  D7FC               	bra	u12247
 17027  0024CA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 17028  0024CC  D7FA               	bra	u12247
 17029  0024CE  F000               	nop	
 17030                           
 17031                           ;Test.c: 422: updateServoPosition(1390, 3);
 17032  0024D0  0E05               	movlw	5
 17033  0024D2  0100               	movlb	0	; () banked
 17034  0024D4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17035  0024D6  0E6E               	movlw	110
 17036  0024D8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17037  0024DA  0E00               	movlw	0
 17038  0024DC  0100               	movlb	0	; () banked
 17039  0024DE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17040  0024E0  0E03               	movlw	3
 17041  0024E2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17042  0024E4  EC65  F029         	call	_updateServoPosition	;wreg free
 17043                           
 17044                           ;Test.c: 423: _delay((unsigned long)((700)*(32000000/4000.0)));
 17045  0024E8  0E1D               	movlw	29
 17046  0024EA  0100               	movlb	0	; () banked
 17047  0024EC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 17048  0024EE  0E69               	movlw	105
 17049  0024F0  0100               	movlb	0	; () banked
 17050  0024F2  6FAB               	movwf	??_BothServos& (0+255),b
 17051  0024F4  0EA5               	movlw	165
 17052  0024F6                     u12257:
 17053  0024F6  2EE8               	decfsz	wreg,f,c
 17054  0024F8  D7FE               	bra	u12257
 17055  0024FA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 17056  0024FC  D7FC               	bra	u12257
 17057  0024FE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 17058  002500  D7FA               	bra	u12257
 17059                           
 17060                           ;Test.c: 424: updateServoPosition(1050, 3);
 17061  002502  0E04               	movlw	4
 17062  002504  0100               	movlb	0	; () banked
 17063  002506  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17064  002508  0E1A               	movlw	26
 17065  00250A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17066  00250C  0E00               	movlw	0
 17067  00250E  0100               	movlb	0	; () banked
 17068  002510  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17069  002512  0E03               	movlw	3
 17070  002514  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17071  002516  EC65  F029         	call	_updateServoPosition	;wreg free
 17072                           
 17073                           ;Test.c: 425: _delay((unsigned long)((750)*(32000000/4000.0)));
 17074  00251A  0E1F               	movlw	31
 17075  00251C  0100               	movlb	0	; () banked
 17076  00251E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 17077  002520  0E71               	movlw	113
 17078  002522  0100               	movlb	0	; () banked
 17079  002524  6FAB               	movwf	??_BothServos& (0+255),b
 17080  002526  0E1E               	movlw	30
 17081  002528                     u12267:
 17082  002528  2EE8               	decfsz	wreg,f,c
 17083  00252A  D7FE               	bra	u12267
 17084  00252C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 17085  00252E  D7FC               	bra	u12267
 17086  002530  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 17087  002532  D7FA               	bra	u12267
 17088  002534  F000               	nop	
 17089                           
 17090                           ;Test.c: 427: updateServoPosition(2500, 1);
 17091  002536  0E09               	movlw	9
 17092  002538  0100               	movlb	0	; () banked
 17093  00253A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17094  00253C  0EC4               	movlw	196
 17095  00253E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17096  002540  0E00               	movlw	0
 17097  002542  0100               	movlb	0	; () banked
 17098  002544  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17099  002546  0E01               	movlw	1
 17100  002548  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17101  00254A  EC65  F029         	call	_updateServoPosition	;wreg free
 17102                           
 17103                           ;Test.c: 428: updateServoPosition(1050, 3);
 17104  00254E  0E04               	movlw	4
 17105  002550  0100               	movlb	0	; () banked
 17106  002552  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17107  002554  0E1A               	movlw	26
 17108  002556  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17109  002558  0E00               	movlw	0
 17110  00255A  0100               	movlb	0	; () banked
 17111  00255C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17112  00255E  0E03               	movlw	3
 17113  002560  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17114  002562  EC65  F029         	call	_updateServoPosition	;wreg free
 17115                           
 17116                           ;Test.c: 429: _delay((unsigned long)((750)*(32000000/4000.0)));
 17117  002566  0E1F               	movlw	31
 17118  002568  0100               	movlb	0	; () banked
 17119  00256A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 17120  00256C  0E71               	movlw	113
 17121  00256E  0100               	movlb	0	; () banked
 17122  002570  6FAB               	movwf	??_BothServos& (0+255),b
 17123  002572  0E1E               	movlw	30
 17124  002574                     u12277:
 17125  002574  2EE8               	decfsz	wreg,f,c
 17126  002576  D7FE               	bra	u12277
 17127  002578  2FAB               	decfsz	??_BothServos& (0+255),f,b
 17128  00257A  D7FC               	bra	u12277
 17129  00257C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 17130  00257E  D7FA               	bra	u12277
 17131  002580  F000               	nop	
 17132                           
 17133                           ;Test.c: 430: updateServoPosition(1390, 3);
 17134  002582  0E05               	movlw	5
 17135  002584  0100               	movlb	0	; () banked
 17136  002586  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17137  002588  0E6E               	movlw	110
 17138  00258A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17139  00258C  0E00               	movlw	0
 17140  00258E  0100               	movlb	0	; () banked
 17141  002590  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17142  002592  0E03               	movlw	3
 17143  002594  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17144  002596  EC65  F029         	call	_updateServoPosition	;wreg free
 17145                           
 17146                           ;Test.c: 431: _delay((unsigned long)((700)*(32000000/4000.0)));
 17147  00259A  0E1D               	movlw	29
 17148  00259C  0100               	movlb	0	; () banked
 17149  00259E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 17150  0025A0  0E69               	movlw	105
 17151  0025A2  0100               	movlb	0	; () banked
 17152  0025A4  6FAB               	movwf	??_BothServos& (0+255),b
 17153  0025A6  0EA5               	movlw	165
 17154  0025A8                     u12287:
 17155  0025A8  2EE8               	decfsz	wreg,f,c
 17156  0025AA  D7FE               	bra	u12287
 17157  0025AC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 17158  0025AE  D7FC               	bra	u12287
 17159  0025B0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 17160  0025B2  D7FA               	bra	u12287
 17161                           
 17162                           ;Test.c: 432: updateServoPosition(1050, 3);
 17163  0025B4  0E04               	movlw	4
 17164  0025B6  0100               	movlb	0	; () banked
 17165  0025B8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17166  0025BA  0E1A               	movlw	26
 17167  0025BC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17168  0025BE  0E00               	movlw	0
 17169  0025C0  0100               	movlb	0	; () banked
 17170  0025C2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17171  0025C4  0E03               	movlw	3
 17172  0025C6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17173  0025C8  EC65  F029         	call	_updateServoPosition	;wreg free
 17174                           
 17175                           ;Test.c: 433: _delay((unsigned long)((750)*(32000000/4000.0)));
 17176  0025CC  0E1F               	movlw	31
 17177  0025CE  0100               	movlb	0	; () banked
 17178  0025D0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 17179  0025D2  0E71               	movlw	113
 17180  0025D4  0100               	movlb	0	; () banked
 17181  0025D6  6FAB               	movwf	??_BothServos& (0+255),b
 17182  0025D8  0E1E               	movlw	30
 17183  0025DA                     u12297:
 17184  0025DA  2EE8               	decfsz	wreg,f,c
 17185  0025DC  D7FE               	bra	u12297
 17186  0025DE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 17187  0025E0  D7FC               	bra	u12297
 17188  0025E2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 17189  0025E4  D7FA               	bra	u12297
 17190  0025E6  F000               	nop	
 17191                           
 17192                           ;Test.c: 435: stopSignals();
 17193  0025E8  EC1E  F030         	call	_stopSignals	;wreg free
 17194                           
 17195                           ;Test.c: 436: machine_state = Testing_state;
 17196  0025EC  0E03               	movlw	3
 17197  0025EE  0100               	movlb	0	; () banked
 17198  0025F0  6FFC               	movwf	_machine_state& (0+255),b
 17199                           
 17200                           ; BSR set to: 0
 17201  0025F2  0012               	return		;funcret
 17202  0025F4                     __end_of_BothServos:
 17203                           	opt stack 0
 17204                           tblptru	equ	0xFF8
 17205                           tblptrh	equ	0xFF7
 17206                           tblptrl	equ	0xFF6
 17207                           tablat	equ	0xFF5
 17208                           prodh	equ	0xFF4
 17209                           prodl	equ	0xFF3
 17210                           intcon	equ	0xFF2
 17211                           intcon2	equ	0xFF1
 17212                           intcon3	equ	0xFF0
 17213                           postinc0	equ	0xFEE
 17214                           wreg	equ	0xFE8
 17215                           postdec1	equ	0xFE5
 17216                           fsr1l	equ	0xFE1
 17217                           indf2	equ	0xFDF
 17218                           postinc2	equ	0xFDE
 17219                           postdec2	equ	0xFDD
 17220                           fsr2h	equ	0xFDA
 17221                           fsr2l	equ	0xFD9
 17222                           status	equ	0xFD8
 17223                           
 17224 ;; *************** function _stopSignals *****************
 17225 ;; Defined at:
 17226 ;;		line 71 in file "main.c"
 17227 ;; Parameters:    Size  Location     Type
 17228 ;;		None
 17229 ;; Auto vars:     Size  Location     Type
 17230 ;;		None
 17231 ;; Return value:  Size  Location     Type
 17232 ;;                  1    wreg      void 
 17233 ;; Registers used:
 17234 ;;		wreg, status,2
 17235 ;; Tracked objects:
 17236 ;;		On entry : 0/0
 17237 ;;		On exit  : 0/0
 17238 ;;		Unchanged: 0/0
 17239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17244 ;;Total ram usage:        0 bytes
 17245 ;; Hardware stack levels used:    1
 17246 ;; Hardware stack levels required when called:    7
 17247 ;; This function calls:
 17248 ;;		Nothing
 17249 ;; This function is called by:
 17250 ;;		_main
 17251 ;;		_BothServos
 17252 ;;		_PlatformTest
 17253 ;;		_arm
 17254 ;; This function uses a non-reentrant model
 17255 ;;
 17256                           
 17257                           	psect	text51
 17258  00603C                     __ptext51:
 17259                           	opt stack 0
 17260  00603C                     _stopSignals:
 17261                           	opt stack 23
 17262                           
 17263                           ;main.c: 72: LATA = 0x00;
 17264                           
 17265                           ; BSR set to: 0
 17266                           ;incstack = 0
 17267  00603C  0E00               	movlw	0
 17268  00603E  6E89               	movwf	3977,c	;volatile
 17269                           
 17270                           ;main.c: 73: LATB = 0x00;
 17271  006040  0E00               	movlw	0
 17272  006042  6E8A               	movwf	3978,c	;volatile
 17273                           
 17274                           ;main.c: 74: LATC = 0x00;
 17275  006044  0E00               	movlw	0
 17276  006046  6E8B               	movwf	3979,c	;volatile
 17277                           
 17278                           ;main.c: 75: LATD = 0x00;
 17279  006048  0E00               	movlw	0
 17280  00604A  6E8C               	movwf	3980,c	;volatile
 17281                           
 17282                           ;main.c: 76: LATE = 0x00;
 17283  00604C  0E00               	movlw	0
 17284  00604E  6E8D               	movwf	3981,c	;volatile
 17285                           
 17286                           ;main.c: 77: TMR1IE = 0;
 17287  006050  909D               	bcf	3997,0,c	;volatile
 17288                           
 17289                           ;main.c: 78: TMR2IE = 0;
 17290  006052  929D               	bcf	3997,1,c	;volatile
 17291                           
 17292                           ;main.c: 79: TMR3IE = 0;
 17293  006054  92A0               	bcf	4000,1,c	;volatile
 17294  006056  0012               	return		;funcret
 17295  006058                     __end_of_stopSignals:
 17296                           	opt stack 0
 17297                           tblptru	equ	0xFF8
 17298                           tblptrh	equ	0xFF7
 17299                           tblptrl	equ	0xFF6
 17300                           tablat	equ	0xFF5
 17301                           prodh	equ	0xFF4
 17302                           prodl	equ	0xFF3
 17303                           intcon	equ	0xFF2
 17304                           intcon2	equ	0xFF1
 17305                           intcon3	equ	0xFF0
 17306                           postinc0	equ	0xFEE
 17307                           wreg	equ	0xFE8
 17308                           postdec1	equ	0xFE5
 17309                           fsr1l	equ	0xFE1
 17310                           indf2	equ	0xFDF
 17311                           postinc2	equ	0xFDE
 17312                           postdec2	equ	0xFDD
 17313                           fsr2h	equ	0xFDA
 17314                           fsr2l	equ	0xFD9
 17315                           status	equ	0xFD8
 17316                           
 17317 ;; *************** function _initServos *****************
 17318 ;; Defined at:
 17319 ;;		line 525 in file "sort.c"
 17320 ;; Parameters:    Size  Location     Type
 17321 ;;		None
 17322 ;; Auto vars:     Size  Location     Type
 17323 ;;		None
 17324 ;; Return value:  Size  Location     Type
 17325 ;;                  1    wreg      void 
 17326 ;; Registers used:
 17327 ;;		wreg, status,2, status,0, cstack
 17328 ;; Tracked objects:
 17329 ;;		On entry : 0/0
 17330 ;;		On exit  : 0/0
 17331 ;;		Unchanged: 0/0
 17332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17335 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17336 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17337 ;;Total ram usage:        1 bytes
 17338 ;; Hardware stack levels used:    1
 17339 ;; Hardware stack levels required when called:    8
 17340 ;; This function calls:
 17341 ;;		_updateServoPosition
 17342 ;; This function is called by:
 17343 ;;		_Loading
 17344 ;;		_BothServos
 17345 ;; This function uses a non-reentrant model
 17346 ;;
 17347                           
 17348                           	psect	text52
 17349  005456                     __ptext52:
 17350                           	opt stack 0
 17351  005456                     _initServos:
 17352                           	opt stack 20
 17353                           
 17354                           ;sort.c: 527: updateServoPosition(1200, 1);
 17355                           
 17356                           ;incstack = 0
 17357  005456  0E04               	movlw	4
 17358  005458  0100               	movlb	0	; () banked
 17359  00545A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17360  00545C  0EB0               	movlw	176
 17361  00545E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17362  005460  0E00               	movlw	0
 17363  005462  0100               	movlb	0	; () banked
 17364  005464  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17365  005466  0E01               	movlw	1
 17366  005468  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17367  00546A  EC65  F029         	call	_updateServoPosition	;wreg free
 17368                           
 17369                           ;sort.c: 528: updateServoPosition(1050, 3);
 17370  00546E  0E04               	movlw	4
 17371  005470  0100               	movlb	0	; () banked
 17372  005472  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17373  005474  0E1A               	movlw	26
 17374  005476  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17375  005478  0E00               	movlw	0
 17376  00547A  0100               	movlb	0	; () banked
 17377  00547C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17378  00547E  0E03               	movlw	3
 17379  005480  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17380  005482  EC65  F029         	call	_updateServoPosition	;wreg free
 17381                           
 17382                           ;sort.c: 529: TMR1ON = 1;
 17383  005486  80CD               	bsf	4045,0,c	;volatile
 17384                           
 17385                           ;sort.c: 530: was_low_1 = 0;
 17386  005488  0E00               	movlw	0
 17387  00548A  6E78               	movwf	_was_low_1+1,c	;volatile
 17388  00548C  0E00               	movlw	0
 17389  00548E  6E77               	movwf	_was_low_1,c	;volatile
 17390                           
 17391                           ;sort.c: 532: _delay((unsigned long)((5)*(32000000/4000.0)));
 17392  005490  0E34               	movlw	52
 17393  005492  0100               	movlb	0	; () banked
 17394  005494  6F88               	movwf	??_initServos& (0+255),b
 17395  005496  0EF1               	movlw	241
 17396  005498                     u12307:
 17397  005498  2EE8               	decfsz	wreg,f,c
 17398  00549A  D7FE               	bra	u12307
 17399  00549C  2F88               	decfsz	??_initServos& (0+255),f,b
 17400  00549E  D7FC               	bra	u12307
 17401  0054A0  D000               	nop2	
 17402                           
 17403                           ;sort.c: 534: TMR3ON = 1;
 17404  0054A2  80B1               	bsf	4017,0,c	;volatile
 17405                           
 17406                           ;sort.c: 535: was_low_3 = 0;
 17407  0054A4  0E00               	movlw	0
 17408  0054A6  6E7C               	movwf	_was_low_3+1,c	;volatile
 17409  0054A8  0E00               	movlw	0
 17410  0054AA  6E7B               	movwf	_was_low_3,c	;volatile
 17411                           
 17412                           ;sort.c: 538: _delay((unsigned long)((1)*(32000000/4000.0)));
 17413  0054AC  0E0B               	movlw	11
 17414  0054AE  0100               	movlb	0	; () banked
 17415  0054B0  6F88               	movwf	??_initServos& (0+255),b
 17416  0054B2  0E62               	movlw	98
 17417  0054B4                     u12317:
 17418  0054B4  2EE8               	decfsz	wreg,f,c
 17419  0054B6  D7FE               	bra	u12317
 17420  0054B8  2F88               	decfsz	??_initServos& (0+255),f,b
 17421  0054BA  D7FC               	bra	u12317
 17422  0054BC  F000               	nop	
 17423                           
 17424                           ;sort.c: 539: LATBbits.LATB3 = 0;
 17425  0054BE  968A               	bcf	3978,3,c	;volatile
 17426                           
 17427                           ;sort.c: 540: TMR2ON = 1;
 17428  0054C0  84CA               	bsf	4042,2,c	;volatile
 17429                           
 17430                           ;sort.c: 541: was_low_2 = 0;
 17431  0054C2  0E00               	movlw	0
 17432  0054C4  6E7A               	movwf	_was_low_2+1,c	;volatile
 17433  0054C6  0E00               	movlw	0
 17434  0054C8  6E79               	movwf	_was_low_2,c	;volatile
 17435                           
 17436                           ;sort.c: 543: LATCbits.LATC0 = 1;
 17437  0054CA  808B               	bsf	3979,0,c	;volatile
 17438  0054CC  0012               	return		;funcret
 17439  0054CE                     __end_of_initServos:
 17440                           	opt stack 0
 17441                           tblptru	equ	0xFF8
 17442                           tblptrh	equ	0xFF7
 17443                           tblptrl	equ	0xFF6
 17444                           tablat	equ	0xFF5
 17445                           prodh	equ	0xFF4
 17446                           prodl	equ	0xFF3
 17447                           intcon	equ	0xFF2
 17448                           intcon2	equ	0xFF1
 17449                           intcon3	equ	0xFF0
 17450                           postinc0	equ	0xFEE
 17451                           wreg	equ	0xFE8
 17452                           postdec1	equ	0xFE5
 17453                           fsr1l	equ	0xFE1
 17454                           indf2	equ	0xFDF
 17455                           postinc2	equ	0xFDE
 17456                           postdec2	equ	0xFDD
 17457                           fsr2h	equ	0xFDA
 17458                           fsr2l	equ	0xFD9
 17459                           status	equ	0xFD8
 17460                           
 17461 ;; *************** function _updateServoPosition *****************
 17462 ;; Defined at:
 17463 ;;		line 643 in file "sort.c"
 17464 ;; Parameters:    Size  Location     Type
 17465 ;;  time_us         2    0[BANK0 ] int 
 17466 ;;  timer           2    2[BANK0 ] int 
 17467 ;; Auto vars:     Size  Location     Type
 17468 ;;  my_time         2    6[BANK0 ] unsigned int 
 17469 ;; Return value:  Size  Location     Type
 17470 ;;                  1    wreg      void 
 17471 ;; Registers used:
 17472 ;;		wreg, status,2, status,0
 17473 ;; Tracked objects:
 17474 ;;		On entry : 0/0
 17475 ;;		On exit  : 0/0
 17476 ;;		Unchanged: 0/0
 17477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17478 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17479 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17480 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17481 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17482 ;;Total ram usage:        8 bytes
 17483 ;; Hardware stack levels used:    1
 17484 ;; Hardware stack levels required when called:    7
 17485 ;; This function calls:
 17486 ;;		Nothing
 17487 ;; This function is called by:
 17488 ;;		_Distribution
 17489 ;;		_initServos
 17490 ;;		_actuatorTest
 17491 ;;		_BothServos
 17492 ;; This function uses a non-reentrant model
 17493 ;;
 17494                           
 17495                           	psect	text53
 17496  0052CA                     __ptext53:
 17497                           	opt stack 0
 17498  0052CA                     _updateServoPosition:
 17499                           	opt stack 20
 17500                           
 17501                           ;sort.c: 644: unsigned int my_time = 65535 - time_us;
 17502                           
 17503                           ;incstack = 0
 17504  0052CA  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 17505  0052CE  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 17506  0052D2  0100               	movlb	0	; () banked
 17507  0052D4  1F84               	comf	??_updateServoPosition& (0+255),f,b
 17508  0052D6  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 17509  0052D8  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 17510  0052DA  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 17511  0052DC  0EFF               	movlw	255
 17512  0052DE  0100               	movlb	0	; () banked
 17513  0052E0  2584               	addwf	??_updateServoPosition& (0+255),w,b
 17514  0052E2  0100               	movlb	0	; () banked
 17515  0052E4  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 17516  0052E6  0EFF               	movlw	255
 17517  0052E8  0100               	movlb	0	; () banked
 17518  0052EA  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 17519  0052EC  0100               	movlb	0	; () banked
 17520  0052EE  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 17521                           
 17522                           ;sort.c: 645: switch(timer){
 17523  0052F0  D01D               	goto	l7152
 17524  0052F2                     l7146:
 17525                           
 17526                           ; BSR set to: 0
 17527                           ;sort.c: 647: servoTimes[0] = my_time >> 8;
 17528  0052F2  0100               	movlb	0	; () banked
 17529  0052F4  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 17530  0052F6  0101               	movlb	1	; () banked
 17531  0052F8  6F1C               	movwf	_servoTimes& (0+255),b
 17532  0052FA  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 17533                           
 17534                           ;sort.c: 648: servoTimes[1] = my_time & 0xFF;
 17535  0052FC  0100               	movlb	0	; () banked
 17536  0052FE  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 17537  005300  0101               	movlb	1	; () banked
 17538  005302  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 17539  005304  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 17540                           
 17541                           ; BSR set to: 1
 17542                           ;sort.c: 650: pan_servo_state = time_us;
 17543  005306  C080  F06B         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 17544  00530A  C081  F06C         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 17545  00530E                     l963:
 17546                           
 17547                           ;sort.c: 652: servoTimes[2] = my_time >> 8;
 17548  00530E  0100               	movlb	0	; () banked
 17549  005310  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 17550  005312  0101               	movlb	1	; () banked
 17551  005314  6F20               	movwf	(_servoTimes+4)& (0+255),b
 17552  005316  6B21               	clrf	(_servoTimes+5)& (0+255),b
 17553                           
 17554                           ;sort.c: 653: servoTimes[3] = my_time & 0xFF;
 17555  005318  0100               	movlb	0	; () banked
 17556  00531A  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 17557  00531C  0101               	movlb	1	; () banked
 17558  00531E  6F22               	movwf	(_servoTimes+6)& (0+255),b
 17559  005320  6B23               	clrf	(_servoTimes+7)& (0+255),b
 17560                           
 17561                           ; BSR set to: 1
 17562                           ;sort.c: 655: tilt_servo_state = time_us;
 17563  005322  C080  F071         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 17564  005326  C081  F072         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 17565                           
 17566                           ;sort.c: 656: }
 17567  00532A  0012               	return	
 17568  00532C                     l7152:
 17569  00532C  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 17570  005330  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 17571                           
 17572                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17573                           ; Switch size 1, requested type "space"
 17574                           ; Number of cases is 1, Range of values is 0 to 0
 17575                           ; switch strategies available:
 17576                           ; Name         Instructions Cycles
 17577                           ; simple_byte            4     3 (average)
 17578                           ;	Chosen strategy is simple_byte
 17579  005334  0100               	movlb	0	; () banked
 17580  005336  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 17581  005338  0A00               	xorlw	0	; case 0
 17582  00533A  A4D8               	btfss	status,2,c
 17583  00533C  0012               	return	
 17584                           
 17585                           ; BSR set to: 0
 17586                           ; Switch size 1, requested type "space"
 17587                           ; Number of cases is 2, Range of values is 1 to 3
 17588                           ; switch strategies available:
 17589                           ; Name         Instructions Cycles
 17590                           ; simple_byte            7     4 (average)
 17591                           ;	Chosen strategy is simple_byte
 17592  00533E  0100               	movlb	0	; () banked
 17593  005340  5184               	movf	??_updateServoPosition& (0+255),w,b
 17594  005342  0A01               	xorlw	1	; case 1
 17595  005344  B4D8               	btfsc	status,2,c
 17596  005346  D7D5               	goto	l7146
 17597  005348  0A02               	xorlw	2	; case 3
 17598  00534A  A4D8               	btfss	status,2,c
 17599  00534C  0012               	return	
 17600  00534E  D7DF               	goto	l963
 17601  005350                     __end_of_updateServoPosition:
 17602                           	opt stack 0
 17603                           tblptru	equ	0xFF8
 17604                           tblptrh	equ	0xFF7
 17605                           tblptrl	equ	0xFF6
 17606                           tablat	equ	0xFF5
 17607                           prodh	equ	0xFF4
 17608                           prodl	equ	0xFF3
 17609                           intcon	equ	0xFF2
 17610                           intcon2	equ	0xFF1
 17611                           intcon3	equ	0xFF0
 17612                           postinc0	equ	0xFEE
 17613                           wreg	equ	0xFE8
 17614                           postdec1	equ	0xFE5
 17615                           fsr1l	equ	0xFE1
 17616                           indf2	equ	0xFDF
 17617                           postinc2	equ	0xFDE
 17618                           postdec2	equ	0xFDD
 17619                           fsr2h	equ	0xFDA
 17620                           fsr2l	equ	0xFD9
 17621                           status	equ	0xFD8
 17622                           
 17623 ;; *************** function _BlockerTest *****************
 17624 ;; Defined at:
 17625 ;;		line 605 in file "Test.c"
 17626 ;; Parameters:    Size  Location     Type
 17627 ;;		None
 17628 ;; Auto vars:     Size  Location     Type
 17629 ;;  i               2   45[BANK0 ] int 
 17630 ;;  cond_flag       2   51[BANK0 ] int 
 17631 ;;  cam_flag        2   49[BANK0 ] int 
 17632 ;;  res             2   47[BANK0 ] int 
 17633 ;; Return value:  Size  Location     Type
 17634 ;;                  1    wreg      void 
 17635 ;; Registers used:
 17636 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17637 ;; Tracked objects:
 17638 ;;		On entry : 0/0
 17639 ;;		On exit  : 0/0
 17640 ;;		Unchanged: 0/0
 17641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17643 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17644 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17645 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17646 ;;Total ram usage:       10 bytes
 17647 ;; Hardware stack levels used:    1
 17648 ;; Hardware stack levels required when called:   10
 17649 ;; This function calls:
 17650 ;;		_lcdInst
 17651 ;;		_printf
 17652 ;;		_readADC
 17653 ;; This function is called by:
 17654 ;;		_Test
 17655 ;; This function uses a non-reentrant model
 17656 ;;
 17657                           
 17658                           	psect	text54
 17659  004148                     __ptext54:
 17660                           	opt stack 0
 17661  004148                     _BlockerTest:
 17662                           	opt stack 19
 17663                           
 17664                           ;Test.c: 606: readADC(2);
 17665                           
 17666                           ;incstack = 0
 17667  004148  0E02               	movlw	2
 17668  00414A  EC62  F02F         	call	_readADC
 17669                           
 17670                           ;Test.c: 607: int res = ADRESH<<8 | ADRESL;
 17671  00414E  50C3               	movf	4035,w,c	;volatile
 17672  004150  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17673  004154  0100               	movlb	0	; () banked
 17674  004156  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17675  004158  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17676  00415C  0100               	movlb	0	; () banked
 17677  00415E  6BAB               	clrf	??_BlockerTest& (0+255),b
 17678  004160  0100               	movlb	0	; () banked
 17679  004162  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17680  004164  0100               	movlb	0	; () banked
 17681  004166  6FAF               	movwf	BlockerTest@res& (0+255),b
 17682  004168  0100               	movlb	0	; () banked
 17683  00416A  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17684  00416C  0100               	movlb	0	; () banked
 17685  00416E  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17686                           
 17687                           ; BSR set to: 0
 17688                           ;Test.c: 609: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 17689  004170  0E01               	movlw	1
 17690  004172  EC69  F030         	call	_lcdInst
 17691  004176  0E68               	movlw	104
 17692  004178  0100               	movlb	0	; () banked
 17693  00417A  6FAB               	movwf	??_BlockerTest& (0+255),b
 17694  00417C  0EE4               	movlw	228
 17695  00417E                     u12327:
 17696  00417E  2EE8               	decfsz	wreg,f,c
 17697  004180  D7FE               	bra	u12327
 17698  004182  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 17699  004184  D7FC               	bra	u12327
 17700  004186  F000               	nop	
 17701  004188  0E80               	movlw	128
 17702  00418A  EC69  F030         	call	_lcdInst
 17703                           
 17704                           ;Test.c: 610: printf("D:RET|2:C %d  ", res);
 17705  00418E  0E89               	movlw	low STR_121
 17706  004190  0100               	movlb	0	; () banked
 17707  004192  6F8E               	movwf	printf@f& (0+255),b
 17708  004194  0EFE               	movlw	high STR_121
 17709  004196  0100               	movlb	0	; () banked
 17710  004198  6F8F               	movwf	(printf@f+1)& (0+255),b
 17711  00419A  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17712  00419E  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17713  0041A2  ECE7  F00E         	call	_printf	;wreg free
 17714                           
 17715                           ;Test.c: 611: lcdInst(0b11000000);;
 17716  0041A6  0EC0               	movlw	192
 17717  0041A8  EC69  F030         	call	_lcdInst
 17718                           
 17719                           ;Test.c: 612: printf("OTHER: CAM TOGGLE");
 17720  0041AC  0E49               	movlw	low STR_122
 17721  0041AE  0100               	movlb	0	; () banked
 17722  0041B0  6F8E               	movwf	printf@f& (0+255),b
 17723  0041B2  0EFB               	movlw	high STR_122
 17724  0041B4  0100               	movlb	0	; () banked
 17725  0041B6  6F8F               	movwf	(printf@f+1)& (0+255),b
 17726  0041B8  ECE7  F00E         	call	_printf	;wreg free
 17727                           
 17728                           ;Test.c: 613: int cam_flag = 1;
 17729  0041BC  0E00               	movlw	0
 17730  0041BE  0100               	movlb	0	; () banked
 17731  0041C0  6FB2               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 17732  0041C2  0E01               	movlw	1
 17733  0041C4  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 17734                           
 17735                           ; BSR set to: 0
 17736                           ;Test.c: 614: int cond_flag = 0;
 17737  0041C6  0E00               	movlw	0
 17738  0041C8  0100               	movlb	0	; () banked
 17739  0041CA  6FB4               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 17740  0041CC  0E00               	movlw	0
 17741  0041CE  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 17742                           
 17743                           ; BSR set to: 0
 17744                           ;Test.c: 617: while(PORTBbits.RB1 == 0){
 17745                           
 17746                           ;Test.c: 616: while(1){
 17747  0041D0  D023               	goto	l9522
 17748  0041D2                     l9514:
 17749                           
 17750                           ;Test.c: 618: readADC(2);
 17751  0041D2  0E02               	movlw	2
 17752  0041D4  EC62  F02F         	call	_readADC
 17753                           
 17754                           ;Test.c: 619: res = ADRESH<<8 | ADRESL;
 17755  0041D8  50C3               	movf	4035,w,c	;volatile
 17756  0041DA  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17757  0041DE  0100               	movlb	0	; () banked
 17758  0041E0  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17759  0041E2  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17760  0041E6  0100               	movlb	0	; () banked
 17761  0041E8  6BAB               	clrf	??_BlockerTest& (0+255),b
 17762  0041EA  0100               	movlb	0	; () banked
 17763  0041EC  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17764  0041EE  0100               	movlb	0	; () banked
 17765  0041F0  6FAF               	movwf	BlockerTest@res& (0+255),b
 17766  0041F2  0100               	movlb	0	; () banked
 17767  0041F4  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17768  0041F6  0100               	movlb	0	; () banked
 17769  0041F8  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17770                           
 17771                           ; BSR set to: 0
 17772                           ;Test.c: 620: lcdInst(0b10000000);;
 17773  0041FA  0E80               	movlw	128
 17774  0041FC  EC69  F030         	call	_lcdInst
 17775                           
 17776                           ;Test.c: 621: printf("D:RET|2:C %d  ", res);
 17777  004200  0E89               	movlw	low STR_121
 17778  004202  0100               	movlb	0	; () banked
 17779  004204  6F8E               	movwf	printf@f& (0+255),b
 17780  004206  0EFE               	movlw	high STR_121
 17781  004208  0100               	movlb	0	; () banked
 17782  00420A  6F8F               	movwf	(printf@f+1)& (0+255),b
 17783  00420C  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17784  004210  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17785  004214  ECE7  F00E         	call	_printf	;wreg free
 17786  004218                     l9522:
 17787  004218  A281               	btfss	3969,1,c	;volatile
 17788  00421A  D7DB               	goto	l9514
 17789                           
 17790                           ;Test.c: 622: }
 17791                           ;Test.c: 623: if(PORTB >> 4 == 0b1111){
 17792  00421C  3881               	swapf	3969,w,c	;volatile
 17793  00421E  0B0F               	andlw	15
 17794  004220  0A0F               	xorlw	15
 17795  004222  B4D8               	btfsc	status,2,c
 17796  004224  0012               	return	
 17797                           
 17798                           ;Test.c: 626: else if(PORTB >> 4 == 0b0001){
 17799                           
 17800                           ;Test.c: 625: }
 17801                           
 17802                           ;Test.c: 624: break;
 17803  004226  3881               	swapf	3969,w,c	;volatile
 17804  004228  0B0F               	andlw	15
 17805  00422A  06E8               	decf	wreg,f,c
 17806  00422C  A4D8               	btfss	status,2,c
 17807  00422E  D016               	goto	l9540
 17808                           
 17809                           ;Test.c: 627: if(cond_flag){
 17810  004230  0100               	movlb	0	; () banked
 17811  004232  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 17812  004234  0100               	movlb	0	; () banked
 17813  004236  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17814  004238  B4D8               	btfsc	status,2,c
 17815  00423A  D007               	goto	l1505
 17816                           
 17817                           ; BSR set to: 0
 17818                           ;Test.c: 628: LATCbits.LATC7 = 1;
 17819  00423C  8E8B               	bsf	3979,7,c	;volatile
 17820  00423E  D006               	goto	l9538
 17821  004240                     u9131:
 17822  004240  0E01               	movlw	1
 17823  004242                     u9140:
 17824  004242  0100               	movlb	0	; () banked
 17825  004244  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 17826  004246  6BB4               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 17827                           
 17828                           ;Test.c: 630: }
 17829  004248  D05F               	goto	l9568
 17830  00424A                     l1505:
 17831                           
 17832                           ; BSR set to: 0
 17833                           ;Test.c: 631: else{
 17834                           ;Test.c: 632: LATCbits.LATC7 = 0;
 17835  00424A  9E8B               	bcf	3979,7,c	;volatile
 17836  00424C                     l9538:
 17837                           
 17838                           ; BSR set to: 0
 17839                           ;Test.c: 633: cond_flag = !cond_flag;
 17840  00424C  0100               	movlb	0	; () banked
 17841  00424E  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 17842  004250  0100               	movlb	0	; () banked
 17843  004252  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17844  004254  B4D8               	btfsc	status,2,c
 17845  004256  D7F4               	goto	u9131
 17846  004258  0E00               	movlw	0
 17847  00425A  D7F3               	goto	u9140
 17848  00425C                     l9540:
 17849                           
 17850                           ;Test.c: 636: else{
 17851                           ;Test.c: 637: if(cam_flag){
 17852  00425C  0100               	movlb	0	; () banked
 17853  00425E  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17854  004260  0100               	movlb	0	; () banked
 17855  004262  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17856  004264  B4D8               	btfsc	status,2,c
 17857  004266  D007               	goto	l9546
 17858                           
 17859                           ; BSR set to: 0
 17860                           ;Test.c: 638: LATCbits.LATC0 = 1;
 17861  004268  808B               	bsf	3979,0,c	;volatile
 17862  00426A  D023               	goto	l9558
 17863  00426C                     u9181:
 17864  00426C  0E01               	movlw	1
 17865  00426E                     u9190:
 17866  00426E  0100               	movlb	0	; () banked
 17867  004270  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 17868  004272  6BB2               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 17869                           
 17870                           ;Test.c: 640: }
 17871  004274  D049               	goto	l9568
 17872  004276                     l9546:
 17873                           
 17874                           ; BSR set to: 0
 17875                           ;Test.c: 641: else{
 17876                           ;Test.c: 642: for(int i=0;i<5000;i++)
 17877  004276  0E00               	movlw	0
 17878  004278  0100               	movlb	0	; () banked
 17879  00427A  6FAE               	movwf	(BlockerTest@i+1)& (0+255),b
 17880  00427C  0E00               	movlw	0
 17881  00427E  6FAD               	movwf	BlockerTest@i& (0+255),b
 17882  004280                     l9548:
 17883                           
 17884                           ; BSR set to: 0
 17885  004280  0100               	movlb	0	; () banked
 17886  004282  BFAE               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 17887  004284  D008               	goto	l1510
 17888  004286  0E88               	movlw	136
 17889  004288  0100               	movlb	0	; () banked
 17890  00428A  5DAD               	subwf	BlockerTest@i& (0+255),w,b
 17891  00428C  0E13               	movlw	19
 17892  00428E  0100               	movlb	0	; () banked
 17893  004290  59AE               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 17894  004292  B0D8               	btfsc	status,0,c
 17895  004294  D00D               	goto	l1511
 17896  004296                     l1510:
 17897                           
 17898                           ; BSR set to: 0
 17899                           ;Test.c: 643: {
 17900                           ;Test.c: 644: LATCbits.LATC0 = 1;
 17901  004296  808B               	bsf	3979,0,c	;volatile
 17902                           
 17903                           ; BSR set to: 0
 17904                           ;Test.c: 645: _delay((unsigned long)((10)*(32000000/4000000.0)));
 17905  004298  0E1A               	movlw	26
 17906  00429A                     u12337:
 17907  00429A  2EE8               	decfsz	wreg,f,c
 17908  00429C  D7FE               	bra	u12337
 17909  00429E  D000               	nop2	
 17910                           
 17911                           ;Test.c: 646: LATCbits.LATC0 = 0;
 17912  0042A0  908B               	bcf	3979,0,c	;volatile
 17913                           
 17914                           ;Test.c: 647: _delay((unsigned long)((90)*(32000000/4000000.0)));
 17915  0042A2  0EF0               	movlw	240
 17916  0042A4                     u12347:
 17917  0042A4  2EE8               	decfsz	wreg,f,c
 17918  0042A6  D7FE               	bra	u12347
 17919  0042A8  0100               	movlb	0	; () banked
 17920  0042AA  4BAD               	infsnz	BlockerTest@i& (0+255),f,b
 17921  0042AC  2BAE               	incf	(BlockerTest@i+1)& (0+255),f,b
 17922  0042AE  D7E8               	goto	l9548
 17923  0042B0                     l1511:
 17924                           
 17925                           ; BSR set to: 0
 17926                           ;Test.c: 648: }
 17927                           ;Test.c: 649: LATCbits.LATC0 = 0;
 17928  0042B0  908B               	bcf	3979,0,c	;volatile
 17929  0042B2                     l9558:
 17930                           
 17931                           ; BSR set to: 0
 17932                           ;Test.c: 650: cam_flag = !cam_flag;
 17933  0042B2  0100               	movlb	0	; () banked
 17934  0042B4  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17935  0042B6  0100               	movlb	0	; () banked
 17936  0042B8  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17937  0042BA  B4D8               	btfsc	status,2,c
 17938  0042BC  D7D7               	goto	u9181
 17939  0042BE  0E00               	movlw	0
 17940  0042C0  D7D6               	goto	u9190
 17941  0042C2                     l9560:
 17942                           
 17943                           ;Test.c: 655: readADC(2);
 17944  0042C2  0E02               	movlw	2
 17945  0042C4  EC62  F02F         	call	_readADC
 17946                           
 17947                           ;Test.c: 656: res = ADRESH<<8 | ADRESL;
 17948  0042C8  50C3               	movf	4035,w,c	;volatile
 17949  0042CA  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17950  0042CE  0100               	movlb	0	; () banked
 17951  0042D0  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17952  0042D2  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17953  0042D6  0100               	movlb	0	; () banked
 17954  0042D8  6BAB               	clrf	??_BlockerTest& (0+255),b
 17955  0042DA  0100               	movlb	0	; () banked
 17956  0042DC  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17957  0042DE  0100               	movlb	0	; () banked
 17958  0042E0  6FAF               	movwf	BlockerTest@res& (0+255),b
 17959  0042E2  0100               	movlb	0	; () banked
 17960  0042E4  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17961  0042E6  0100               	movlb	0	; () banked
 17962  0042E8  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17963                           
 17964                           ; BSR set to: 0
 17965                           ;Test.c: 657: lcdInst(0b10000000);;
 17966  0042EA  0E80               	movlw	128
 17967  0042EC  EC69  F030         	call	_lcdInst
 17968                           
 17969                           ;Test.c: 658: printf("D:RET|2:C %d  ", res);
 17970  0042F0  0E89               	movlw	low STR_121
 17971  0042F2  0100               	movlb	0	; () banked
 17972  0042F4  6F8E               	movwf	printf@f& (0+255),b
 17973  0042F6  0EFE               	movlw	high STR_121
 17974  0042F8  0100               	movlb	0	; () banked
 17975  0042FA  6F8F               	movwf	(printf@f+1)& (0+255),b
 17976  0042FC  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17977  004300  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17978  004304  ECE7  F00E         	call	_printf	;wreg free
 17979  004308                     l9568:
 17980  004308  A281               	btfss	3969,1,c	;volatile
 17981  00430A  D786               	goto	l9522
 17982  00430C  D7DA               	goto	l9560
 17983  00430E                     __end_of_BlockerTest:
 17984                           	opt stack 0
 17985                           tblptru	equ	0xFF8
 17986                           tblptrh	equ	0xFF7
 17987                           tblptrl	equ	0xFF6
 17988                           tablat	equ	0xFF5
 17989                           prodh	equ	0xFF4
 17990                           prodl	equ	0xFF3
 17991                           intcon	equ	0xFF2
 17992                           intcon2	equ	0xFF1
 17993                           intcon3	equ	0xFF0
 17994                           postinc0	equ	0xFEE
 17995                           wreg	equ	0xFE8
 17996                           postdec1	equ	0xFE5
 17997                           fsr1l	equ	0xFE1
 17998                           indf2	equ	0xFDF
 17999                           postinc2	equ	0xFDE
 18000                           postdec2	equ	0xFDD
 18001                           fsr2h	equ	0xFDA
 18002                           fsr2l	equ	0xFD9
 18003                           status	equ	0xFD8
 18004                           
 18005 ;; *************** function _readADC *****************
 18006 ;; Defined at:
 18007 ;;		line 15 in file "ADCFunctionality.c"
 18008 ;; Parameters:    Size  Location     Type
 18009 ;;  channel         1    wreg     unsigned char 
 18010 ;; Auto vars:     Size  Location     Type
 18011 ;;  channel         1    1[BANK0 ] unsigned char 
 18012 ;; Return value:  Size  Location     Type
 18013 ;;                  1    wreg      void 
 18014 ;; Registers used:
 18015 ;;		wreg, status,2, status,0, cstack
 18016 ;; Tracked objects:
 18017 ;;		On entry : 0/0
 18018 ;;		On exit  : 0/0
 18019 ;;		Unchanged: 0/0
 18020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18022 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18023 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18024 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18025 ;;Total ram usage:        2 bytes
 18026 ;; Hardware stack levels used:    1
 18027 ;; Hardware stack levels required when called:    7
 18028 ;; This function calls:
 18029 ;;		Nothing
 18030 ;; This function is called by:
 18031 ;;		_readIR
 18032 ;;		_readMAG
 18033 ;;		_readCOND
 18034 ;;		_sensorTest
 18035 ;;		_PlatformTest
 18036 ;;		_BlockerTest
 18037 ;; This function uses a non-reentrant model
 18038 ;;
 18039                           
 18040                           	psect	text55
 18041  005EC4                     __ptext55:
 18042                           	opt stack 0
 18043  005EC4                     _readADC:
 18044                           	opt stack 20
 18045                           
 18046                           ;incstack = 0
 18047                           ;readADC@channel stored from wreg
 18048  005EC4  0100               	movlb	0	; () banked
 18049  005EC6  6F81               	movwf	readADC@channel& (0+255),b
 18050                           
 18051                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 18052  005EC8  0100               	movlb	0	; () banked
 18053  005ECA  4581               	rlncf	readADC@channel& (0+255),w,b
 18054  005ECC  46E8               	rlncf	wreg,f,c
 18055  005ECE  0BFC               	andlw	252
 18056  005ED0  6EC2               	movwf	4034,c	;volatile
 18057                           
 18058                           ; BSR set to: 0
 18059                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 18060  005ED2  80C2               	bsf	4034,0,c	;volatile
 18061                           
 18062                           ; BSR set to: 0
 18063                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 18064  005ED4  82C2               	bsf	4034,1,c	;volatile
 18065                           
 18066                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 18067  005ED6  D009               	goto	l6774
 18068  005ED8                     l6772:
 18069  005ED8  0E34               	movlw	52
 18070  005EDA  0100               	movlb	0	; () banked
 18071  005EDC  6F80               	movwf	??_readADC& (0+255),b
 18072  005EDE  0EF1               	movlw	241
 18073  005EE0                     u12357:
 18074  005EE0  2EE8               	decfsz	wreg,f,c
 18075  005EE2  D7FE               	bra	u12357
 18076  005EE4  2F80               	decfsz	??_readADC& (0+255),f,b
 18077  005EE6  D7FC               	bra	u12357
 18078  005EE8  D000               	nop2	
 18079  005EEA                     l6774:
 18080  005EEA  A2C2               	btfss	4034,1,c	;volatile
 18081  005EEC  0012               	return	
 18082  005EEE  D7F4               	goto	l6772
 18083  005EF0                     __end_of_readADC:
 18084                           	opt stack 0
 18085                           tblptru	equ	0xFF8
 18086                           tblptrh	equ	0xFF7
 18087                           tblptrl	equ	0xFF6
 18088                           tablat	equ	0xFF5
 18089                           prodh	equ	0xFF4
 18090                           prodl	equ	0xFF3
 18091                           intcon	equ	0xFF2
 18092                           intcon2	equ	0xFF1
 18093                           intcon3	equ	0xFF0
 18094                           postinc0	equ	0xFEE
 18095                           wreg	equ	0xFE8
 18096                           postdec1	equ	0xFE5
 18097                           fsr1l	equ	0xFE1
 18098                           indf2	equ	0xFDF
 18099                           postinc2	equ	0xFDE
 18100                           postdec2	equ	0xFDD
 18101                           fsr2h	equ	0xFDA
 18102                           fsr2l	equ	0xFD9
 18103                           status	equ	0xFD8
 18104                           
 18105 ;; *************** function _printf *****************
 18106 ;; Defined at:
 18107 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 18108 ;; Parameters:    Size  Location     Type
 18109 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 18110 ;;		 -> STR_128(18), STR_127(18), STR_126(17), STR_125(17), 
 18111 ;;		 -> STR_124(15), STR_123(15), STR_122(18), STR_121(15), 
 18112 ;;		 -> STR_120(18), STR_119(18), STR_118(17), STR_117(17), 
 18113 ;;		 -> STR_116(17), STR_115(17), STR_114(17), STR_113(17), 
 18114 ;;		 -> STR_112(18), STR_111(17), STR_110(15), STR_109(15), 
 18115 ;;		 -> STR_108(15), STR_107(17), STR_106(17), STR_105(17), 
 18116 ;;		 -> STR_104(16), STR_103(17), STR_102(17), STR_101(17), 
 18117 ;;		 -> STR_100(17), STR_99(17), STR_98(17), STR_97(15), 
 18118 ;;		 -> STR_96(11), STR_95(17), STR_94(11), STR_93(17), 
 18119 ;;		 -> STR_92(14), STR_91(15), STR_90(14), STR_89(10), 
 18120 ;;		 -> STR_88(9), STR_87(9), STR_86(10), STR_85(10), 
 18121 ;;		 -> STR_84(16), STR_83(15), STR_82(3), STR_81(18), 
 18122 ;;		 -> STR_80(3), STR_79(18), STR_78(14), STR_77(8), 
 18123 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 18124 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(17), 
 18125 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(16), 
 18126 ;;		 -> STR_64(16), STR_63(24), STR_50(17), STR_49(17), 
 18127 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 18128 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 18129 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 18130 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 18131 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 18132 ;;		 -> STR_28(17), STR_27(17), STR_26(17), STR_25(17), 
 18133 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 18134 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 18135 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 18136 ;; Auto vars:     Size  Location     Type
 18137 ;;  tmpval          4    0        struct .
 18138 ;;  width           2   41[BANK0 ] int 
 18139 ;;  val             2   37[BANK0 ] unsigned int 
 18140 ;;  len             2   35[BANK0 ] unsigned int 
 18141 ;;  ap              2   33[BANK0 ] PTR void [1]
 18142 ;;		 -> ?i2_printf(2), ?_printf(2), 
 18143 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 18144 ;;		 -> STR_129(7), count_total(2), printRTC@month(4), UI@month(4), 
 18145 ;;  c               1   40[BANK0 ] char 
 18146 ;;  flag            1   39[BANK0 ] unsigned char 
 18147 ;;  prec            1   30[BANK0 ] char 
 18148 ;; Return value:  Size  Location     Type
 18149 ;;                  2   14[BANK0 ] int 
 18150 ;; Registers used:
 18151 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18152 ;; Tracked objects:
 18153 ;;		On entry : 0/0
 18154 ;;		On exit  : 0/0
 18155 ;;		Unchanged: 0/0
 18156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18157 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18158 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18159 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18160 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18161 ;;Total ram usage:       29 bytes
 18162 ;; Hardware stack levels used:    1
 18163 ;; Hardware stack levels required when called:    9
 18164 ;; This function calls:
 18165 ;;		___lwdiv
 18166 ;;		___lwmod
 18167 ;;		___wmul
 18168 ;;		_isdigit
 18169 ;;		_putch
 18170 ;; This function is called by:
 18171 ;;		_UI
 18172 ;;		_change_state_to_menu_start
 18173 ;;		_change_state_to_menu_12
 18174 ;;		_change_state_to_menu_22
 18175 ;;		_printRTC
 18176 ;;		_EEPROM_write
 18177 ;;		_Test
 18178 ;;		_algorithmTest
 18179 ;;		_sensorTest
 18180 ;;		_actuatorTest
 18181 ;;		_BothServos
 18182 ;;		_PortTestDC
 18183 ;;		_PlatformTest
 18184 ;;		_SpeedTest
 18185 ;;		_BlockerTest
 18186 ;;		_arm
 18187 ;;		_PortTestPusher
 18188 ;; This function uses a non-reentrant model
 18189 ;;
 18190                           
 18191                           	psect	text56
 18192  001DCE                     __ptext56:
 18193                           	opt stack 0
 18194  001DCE                     _printf:
 18195                           	opt stack 18
 18196                           
 18197                           ;doprnt.c: 466: va_list ap;
 18198                           ;doprnt.c: 499: signed char c;
 18199                           ;doprnt.c: 501: int width;
 18200                           ;doprnt.c: 506: signed char prec;
 18201                           ;doprnt.c: 508: unsigned char flag;
 18202                           ;doprnt.c: 523: union {
 18203                           ;doprnt.c: 524: unsigned long vd;
 18204                           ;doprnt.c: 525: double integ;
 18205                           ;doprnt.c: 526: } tmpval;
 18206                           ;doprnt.c: 528: unsigned int val;
 18207                           ;doprnt.c: 529: unsigned len;
 18208                           ;doprnt.c: 530: const char * cp;
 18209                           ;doprnt.c: 533: *ap = __va_start();
 18210                           
 18211                           ;incstack = 0
 18212  001DCE  0E90               	movlw	low (?_printf+2)
 18213  001DD0  0100               	movlb	0	; () banked
 18214  001DD2  6FA1               	movwf	printf@ap& (0+255),b
 18215  001DD4  0E00               	movlw	high (?_printf+2)
 18216  001DD6  0100               	movlb	0	; () banked
 18217  001DD8  6FA2               	movwf	(printf@ap+1)& (0+255),b
 18218                           
 18219                           ;doprnt.c: 536: while(c = *f++) {
 18220  001DDA  D205               	goto	l7106
 18221  001DDC                     l6976:
 18222                           
 18223                           ; BSR set to: 0
 18224                           ;doprnt.c: 538: if(c != '%')
 18225  001DDC  0E25               	movlw	37
 18226  001DDE  0100               	movlb	0	; () banked
 18227  001DE0  19A8               	xorwf	printf@c& (0+255),w,b
 18228  001DE2  B4D8               	btfsc	status,2,c
 18229  001DE4  D005               	goto	l6980
 18230                           
 18231                           ; BSR set to: 0
 18232                           ;doprnt.c: 540: {
 18233                           ;doprnt.c: 541: (putch(c) );
 18234  001DE6  0100               	movlb	0	; () banked
 18235  001DE8  51A8               	movf	printf@c& (0+255),w,b
 18236  001DEA  EC61  F030         	call	_putch
 18237                           
 18238                           ;doprnt.c: 542: continue;
 18239  001DEE  D1FB               	goto	l7106
 18240  001DF0                     l6980:
 18241                           
 18242                           ;doprnt.c: 543: }
 18243                           ;doprnt.c: 546: width = 0;
 18244  001DF0  0E00               	movlw	0
 18245  001DF2  0100               	movlb	0	; () banked
 18246  001DF4  6FAA               	movwf	(printf@width+1)& (0+255),b
 18247  001DF6  0E00               	movlw	0
 18248  001DF8  6FA9               	movwf	printf@width& (0+255),b
 18249                           
 18250                           ;doprnt.c: 548: flag = 0;
 18251  001DFA  0E00               	movlw	0
 18252  001DFC  0100               	movlb	0	; () banked
 18253  001DFE  6FA7               	movwf	printf@flag& (0+255),b
 18254                           
 18255                           ; BSR set to: 0
 18256                           ;doprnt.c: 551: switch(*f) {
 18257                           
 18258                           ;doprnt.c: 550: for(;;) {
 18259  001E00  D005               	goto	l6986
 18260  001E02                     l6982:
 18261                           
 18262                           ;doprnt.c: 580: flag |= 0x04;
 18263  001E02  0100               	movlb	0	; () banked
 18264  001E04  85A7               	bsf	printf@flag& (0+255),2,b
 18265                           
 18266                           ;doprnt.c: 581: f++;
 18267  001E06  0100               	movlb	0	; () banked
 18268  001E08  4B8E               	infsnz	printf@f& (0+255),f,b
 18269  001E0A  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18270  001E0C                     l6986:
 18271  001E0C  C08E  FFF6         	movff	printf@f,tblptrl
 18272  001E10  C08F  FFF7         	movff	printf@f+1,tblptrh
 18273  001E14                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18274  001E14  6AF8               	clrf	tblptru,c
 18275  001E16                     	endif
 18276  001E16                     	if	0	;tblptru may be non-zero
 18277  001E16                     	endif
 18278  001E16  0008               	tblrd		*
 18279  001E18  50F5               	movf	tablat,w,c
 18280                           
 18281                           ; Switch size 1, requested type "space"
 18282                           ; Number of cases is 1, Range of values is 48 to 48
 18283                           ; switch strategies available:
 18284                           ; Name         Instructions Cycles
 18285                           ; simple_byte            4     3 (average)
 18286                           ;	Chosen strategy is simple_byte
 18287  001E1A  0A30               	xorlw	48	; case 48
 18288  001E1C  B4D8               	btfsc	status,2,c
 18289  001E1E  D7F1               	goto	l6982
 18290                           
 18291                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 18292                           
 18293                           ;doprnt.c: 586: }
 18294                           
 18295                           ;doprnt.c: 585: break;
 18296  001E20  C08E  FFF6         	movff	printf@f,tblptrl
 18297  001E24  C08F  FFF7         	movff	printf@f+1,tblptrh
 18298  001E28                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18299  001E28  6AF8               	clrf	tblptru,c
 18300  001E2A                     	endif
 18301  001E2A                     	if	0	;tblptru may be non-zero
 18302  001E2A                     	endif
 18303  001E2A  0008               	tblrd		*
 18304  001E2C  50F5               	movf	tablat,w,c
 18305  001E2E  EC78  F02F         	call	_isdigit
 18306  001E32  A0D8               	btfss	status,0,c
 18307  001E34  D0D2               	goto	l7034
 18308                           
 18309                           ;doprnt.c: 598: width = 0;
 18310  001E36  0E00               	movlw	0
 18311  001E38  0100               	movlb	0	; () banked
 18312  001E3A  6FAA               	movwf	(printf@width+1)& (0+255),b
 18313  001E3C  0E00               	movlw	0
 18314  001E3E  6FA9               	movwf	printf@width& (0+255),b
 18315  001E40                     l6992:
 18316                           
 18317                           ;doprnt.c: 600: width *= 10;
 18318  001E40  C0A9  F080         	movff	printf@width,___wmul@multiplier
 18319  001E44  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 18320  001E48  0E00               	movlw	0
 18321  001E4A  0100               	movlb	0	; () banked
 18322  001E4C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18323  001E4E  0E0A               	movlw	10
 18324  001E50  6F82               	movwf	___wmul@multiplicand& (0+255),b
 18325  001E52  ECE2  F02D         	call	___wmul	;wreg free
 18326  001E56  C080  F0A9         	movff	?___wmul,printf@width
 18327  001E5A  C081  F0AA         	movff	?___wmul+1,printf@width+1
 18328                           
 18329                           ;doprnt.c: 601: width += *f++ - '0';
 18330  001E5E  0ED0               	movlw	208
 18331  001E60  0100               	movlb	0	; () banked
 18332  001E62  6F9A               	movwf	??_printf& (0+255),b
 18333  001E64  0EFF               	movlw	255
 18334  001E66  0100               	movlb	0	; () banked
 18335  001E68  6F9B               	movwf	(??_printf+1)& (0+255),b
 18336  001E6A  C08E  FFF6         	movff	printf@f,tblptrl
 18337  001E6E  C08F  FFF7         	movff	printf@f+1,tblptrh
 18338  001E72                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18339  001E72  6AF8               	clrf	tblptru,c
 18340  001E74                     	endif
 18341  001E74                     	if	0	;tblptru may be non-zero
 18342  001E74                     	endif
 18343  001E74  0008               	tblrd		*
 18344  001E76  50F5               	movf	tablat,w,c
 18345  001E78  0100               	movlb	0	; () banked
 18346  001E7A  6F9C               	movwf	(??_printf+2)& (0+255),b
 18347  001E7C  6B9D               	clrf	(??_printf+3)& (0+255),b
 18348  001E7E  0100               	movlb	0	; () banked
 18349  001E80  519A               	movf	??_printf& (0+255),w,b
 18350  001E82  0100               	movlb	0	; () banked
 18351  001E84  279C               	addwf	(??_printf+2)& (0+255),f,b
 18352  001E86  0100               	movlb	0	; () banked
 18353  001E88  519B               	movf	(??_printf+1)& (0+255),w,b
 18354  001E8A  0100               	movlb	0	; () banked
 18355  001E8C  239D               	addwfc	(??_printf+3)& (0+255),f,b
 18356  001E8E  0100               	movlb	0	; () banked
 18357  001E90  519C               	movf	(??_printf+2)& (0+255),w,b
 18358  001E92  0100               	movlb	0	; () banked
 18359  001E94  27A9               	addwf	printf@width& (0+255),f,b
 18360  001E96  0100               	movlb	0	; () banked
 18361  001E98  519D               	movf	(??_printf+3)& (0+255),w,b
 18362  001E9A  0100               	movlb	0	; () banked
 18363  001E9C  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 18364                           
 18365                           ; BSR set to: 0
 18366  001E9E  0100               	movlb	0	; () banked
 18367  001EA0  4B8E               	infsnz	printf@f& (0+255),f,b
 18368  001EA2  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18369                           
 18370                           ; BSR set to: 0
 18371                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 18372  001EA4  C08E  FFF6         	movff	printf@f,tblptrl
 18373  001EA8  C08F  FFF7         	movff	printf@f+1,tblptrh
 18374  001EAC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18375  001EAC  6AF8               	clrf	tblptru,c
 18376  001EAE                     	endif
 18377  001EAE                     	if	0	;tblptru may be non-zero
 18378  001EAE                     	endif
 18379  001EAE  0008               	tblrd		*
 18380  001EB0  50F5               	movf	tablat,w,c
 18381  001EB2  EC78  F02F         	call	_isdigit
 18382  001EB6  A0D8               	btfss	status,0,c
 18383  001EB8  D090               	goto	l7034
 18384  001EBA  D7C2               	goto	l6992
 18385  001EBC                     l7000:
 18386                           
 18387                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 18388  001EBC  C0A1  FFD9         	movff	printf@ap,fsr2l
 18389  001EC0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 18390  001EC4  CFDE F09F          	movff	postinc2,printf@cp
 18391  001EC8  CFDD F0A0          	movff	postdec2,printf@cp+1
 18392  001ECC  0E02               	movlw	2
 18393  001ECE  0100               	movlb	0	; () banked
 18394  001ED0  27A1               	addwf	printf@ap& (0+255),f,b
 18395  001ED2  0E00               	movlw	0
 18396  001ED4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 18397                           
 18398                           ; BSR set to: 0
 18399                           ;doprnt.c: 740: if(!cp)
 18400  001ED6  0100               	movlb	0	; () banked
 18401  001ED8  519F               	movf	printf@cp& (0+255),w,b
 18402  001EDA  0100               	movlb	0	; () banked
 18403  001EDC  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 18404  001EDE  A4D8               	btfss	status,2,c
 18405  001EE0  D006               	goto	l7008
 18406                           
 18407                           ; BSR set to: 0
 18408                           ;doprnt.c: 741: cp = "(null)";
 18409  001EE2  0EB5               	movlw	low STR_129
 18410  001EE4  0100               	movlb	0	; () banked
 18411  001EE6  6F9F               	movwf	printf@cp& (0+255),b
 18412  001EE8  0EFF               	movlw	high STR_129
 18413  001EEA  0100               	movlb	0	; () banked
 18414  001EEC  6FA0               	movwf	(printf@cp+1)& (0+255),b
 18415  001EEE                     l7008:
 18416                           
 18417                           ; BSR set to: 0
 18418                           ;doprnt.c: 745: len = 0;
 18419  001EEE  0E00               	movlw	0
 18420  001EF0  0100               	movlb	0	; () banked
 18421  001EF2  6FA4               	movwf	(printf@len+1)& (0+255),b
 18422  001EF4  0E00               	movlw	0
 18423  001EF6  6FA3               	movwf	printf@len& (0+255),b
 18424                           
 18425                           ;doprnt.c: 746: while(cp[len])
 18426  001EF8  D003               	goto	l7012
 18427  001EFA                     l7010:
 18428                           
 18429                           ;doprnt.c: 747: len++;
 18430  001EFA  0100               	movlb	0	; () banked
 18431  001EFC  4BA3               	infsnz	printf@len& (0+255),f,b
 18432  001EFE  2BA4               	incf	(printf@len+1)& (0+255),f,b
 18433  001F00                     l7012:
 18434                           
 18435                           ; BSR set to: 0
 18436  001F00  0100               	movlb	0	; () banked
 18437  001F02  51A3               	movf	printf@len& (0+255),w,b
 18438  001F04  0100               	movlb	0	; () banked
 18439  001F06  259F               	addwf	printf@cp& (0+255),w,b
 18440  001F08  0100               	movlb	0	; () banked
 18441  001F0A  6F9A               	movwf	??_printf& (0+255),b
 18442  001F0C  0100               	movlb	0	; () banked
 18443  001F0E  51A4               	movf	(printf@len+1)& (0+255),w,b
 18444  001F10  0100               	movlb	0	; () banked
 18445  001F12  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 18446  001F14  0100               	movlb	0	; () banked
 18447  001F16  6F9B               	movwf	(??_printf+1)& (0+255),b
 18448  001F18  C09A  FFF6         	movff	??_printf,tblptrl
 18449  001F1C  C09B  FFF7         	movff	??_printf+1,tblptrh
 18450  001F20  0E00               	movlw	low (__mediumconst shr (0+16))
 18451  001F22  6EF8               	movwf	tblptru,c
 18452  001F24  0E0F               	movlw	(high __ramtop+-1)
 18453  001F26  64F7               	cpfsgt	tblptrh,c
 18454  001F28  D003               	bra	u5747
 18455  001F2A  0008               	tblrd		*
 18456  001F2C  50F5               	movf	tablat,w,c
 18457  001F2E  D005               	bra	u5740
 18458  001F30                     u5747:
 18459  001F30  CFF6 FFE9          	movff	tblptrl,fsr0l
 18460  001F34  CFF7 FFEA          	movff	tblptrh,fsr0h
 18461  001F38  50EF               	movf	indf0,w,c
 18462  001F3A                     u5740:
 18463  001F3A  0900               	iorlw	0
 18464  001F3C  A4D8               	btfss	status,2,c
 18465  001F3E  D7DD               	goto	l7010
 18466                           
 18467                           ;doprnt.c: 757: if(width > len)
 18468  001F40  0100               	movlb	0	; () banked
 18469  001F42  51A9               	movf	printf@width& (0+255),w,b
 18470  001F44  0100               	movlb	0	; () banked
 18471  001F46  5DA3               	subwf	printf@len& (0+255),w,b
 18472  001F48  0100               	movlb	0	; () banked
 18473  001F4A  51AA               	movf	(printf@width+1)& (0+255),w,b
 18474  001F4C  0100               	movlb	0	; () banked
 18475  001F4E  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 18476  001F50  B0D8               	btfsc	status,0,c
 18477  001F52  D009               	goto	l7018
 18478                           
 18479                           ; BSR set to: 0
 18480                           ;doprnt.c: 758: width -= len;
 18481  001F54  0100               	movlb	0	; () banked
 18482  001F56  51A3               	movf	printf@len& (0+255),w,b
 18483  001F58  0100               	movlb	0	; () banked
 18484  001F5A  5FA9               	subwf	printf@width& (0+255),f,b
 18485  001F5C  0100               	movlb	0	; () banked
 18486  001F5E  51A4               	movf	(printf@len+1)& (0+255),w,b
 18487  001F60  0100               	movlb	0	; () banked
 18488  001F62  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 18489  001F64  D009               	goto	l7022
 18490  001F66                     l7018:
 18491                           
 18492                           ; BSR set to: 0
 18493                           ;doprnt.c: 759: else
 18494                           ;doprnt.c: 760: width = 0;
 18495  001F66  0E00               	movlw	0
 18496  001F68  0100               	movlb	0	; () banked
 18497  001F6A  6FAA               	movwf	(printf@width+1)& (0+255),b
 18498  001F6C  0E00               	movlw	0
 18499  001F6E  6FA9               	movwf	printf@width& (0+255),b
 18500                           
 18501                           ; BSR set to: 0
 18502                           ;doprnt.c: 764: while(width--)
 18503  001F70  D003               	goto	l7022
 18504  001F72                     l7020:
 18505                           
 18506                           ; BSR set to: 0
 18507                           ;doprnt.c: 765: (putch(' ') );
 18508  001F72  0E20               	movlw	32
 18509  001F74  EC61  F030         	call	_putch
 18510  001F78                     l7022:
 18511  001F78  0100               	movlb	0	; () banked
 18512  001F7A  07A9               	decf	printf@width& (0+255),f,b
 18513  001F7C  A0D8               	btfss	status,0,c
 18514  001F7E  07AA               	decf	(printf@width+1)& (0+255),f,b
 18515  001F80  0100               	movlb	0	; () banked
 18516  001F82  29A9               	incf	printf@width& (0+255),w,b
 18517  001F84  E1F6               	bnz	l7020
 18518  001F86  0100               	movlb	0	; () banked
 18519  001F88  29AA               	incf	(printf@width+1)& (0+255),w,b
 18520  001F8A  B4D8               	btfsc	status,2,c
 18521  001F8C  D017               	goto	l7028
 18522  001F8E  D7F1               	goto	l7020
 18523  001F90                     l7024:
 18524                           
 18525                           ; BSR set to: 0
 18526                           ;doprnt.c: 768: (putch(*cp++) );
 18527  001F90  C09F  FFF6         	movff	printf@cp,tblptrl
 18528  001F94  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 18529  001F98  0E00               	movlw	low (__mediumconst shr (0+16))
 18530  001F9A  6EF8               	movwf	tblptru,c
 18531  001F9C  0E0F               	movlw	(high __ramtop+-1)
 18532  001F9E  64F7               	cpfsgt	tblptrh,c
 18533  001FA0  D003               	bra	u5787
 18534  001FA2  0008               	tblrd		*
 18535  001FA4  50F5               	movf	tablat,w,c
 18536  001FA6  D005               	bra	u5780
 18537  001FA8                     u5787:
 18538  001FA8  CFF6 FFE9          	movff	tblptrl,fsr0l
 18539  001FAC  CFF7 FFEA          	movff	tblptrh,fsr0h
 18540  001FB0  50EF               	movf	indf0,w,c
 18541  001FB2                     u5780:
 18542  001FB2  EC61  F030         	call	_putch
 18543  001FB6  0100               	movlb	0	; () banked
 18544  001FB8  4B9F               	infsnz	printf@cp& (0+255),f,b
 18545  001FBA  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 18546  001FBC                     l7028:
 18547                           
 18548                           ; BSR set to: 0
 18549  001FBC  0100               	movlb	0	; () banked
 18550  001FBE  07A3               	decf	printf@len& (0+255),f,b
 18551  001FC0  A0D8               	btfss	status,0,c
 18552  001FC2  07A4               	decf	(printf@len+1)& (0+255),f,b
 18553  001FC4  0100               	movlb	0	; () banked
 18554  001FC6  29A3               	incf	printf@len& (0+255),w,b
 18555  001FC8  E1E3               	bnz	l7024
 18556  001FCA  0100               	movlb	0	; () banked
 18557  001FCC  29A4               	incf	(printf@len+1)& (0+255),w,b
 18558  001FCE  B4D8               	btfsc	status,2,c
 18559  001FD0  D10A               	goto	l7106
 18560  001FD2  D7DE               	goto	l7024
 18561  001FD4                     l7030:
 18562                           
 18563                           ; BSR set to: 0
 18564                           ;doprnt.c: 818: flag |= 0x40;
 18565  001FD4  0100               	movlb	0	; () banked
 18566  001FD6  8DA7               	bsf	printf@flag& (0+255),6,b
 18567                           
 18568                           ; BSR set to: 0
 18569                           ;doprnt.c: 822: }
 18570                           
 18571                           ;doprnt.c: 819: break;
 18572  001FD8  D01D               	goto	l1582
 18573  001FDA                     l7034:
 18574  001FDA  C08E  FFF6         	movff	printf@f,tblptrl
 18575  001FDE  C08F  FFF7         	movff	printf@f+1,tblptrh
 18576  001FE2  0100               	movlb	0	; () banked
 18577  001FE4  4B8E               	infsnz	printf@f& (0+255),f,b
 18578  001FE6  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18579  001FE8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18580  001FE8  6AF8               	clrf	tblptru,c
 18581  001FEA                     	endif
 18582  001FEA                     	if	0	;tblptru may be non-zero
 18583  001FEA                     	endif
 18584  001FEA  0008               	tblrd		*
 18585  001FEC  CFF5 F0A8          	movff	tablat,printf@c
 18586  001FF0  0100               	movlb	0	; () banked
 18587  001FF2  51A8               	movf	printf@c& (0+255),w,b
 18588                           
 18589                           ; Switch size 1, requested type "space"
 18590                           ; Number of cases is 5, Range of values is 0 to 117
 18591                           ; switch strategies available:
 18592                           ; Name         Instructions Cycles
 18593                           ; simple_byte           16     9 (average)
 18594                           ;	Chosen strategy is simple_byte
 18595  001FF4  0A00               	xorlw	0	; case 0
 18596  001FF6  B4D8               	btfsc	status,2,c
 18597  001FF8  0012               	return	
 18598  001FFA  0A64               	xorlw	100	; case 100
 18599  001FFC  B4D8               	btfsc	status,2,c
 18600  001FFE  D00A               	goto	l1582
 18601  002000  0A0D               	xorlw	13	; case 105
 18602  002002  B4D8               	btfsc	status,2,c
 18603  002004  D007               	goto	l1582
 18604  002006  0A1A               	xorlw	26	; case 115
 18605  002008  B4D8               	btfsc	status,2,c
 18606  00200A  D758               	goto	l7000
 18607  00200C  0A06               	xorlw	6	; case 117
 18608  00200E  B4D8               	btfsc	status,2,c
 18609  002010  D7E1               	goto	l7030
 18610  002012  D0E9               	goto	l7106
 18611  002014                     l1582:
 18612                           
 18613                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 18614  002014  0100               	movlb	0	; () banked
 18615  002016  BDA7               	btfsc	printf@flag& (0+255),6,b
 18616  002018  D019               	goto	l7046
 18617                           
 18618                           ; BSR set to: 0
 18619                           ;doprnt.c: 1253: {
 18620                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 18621  00201A  C0A1  FFD9         	movff	printf@ap,fsr2l
 18622  00201E  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 18623  002022  CFDE F0A5          	movff	postinc2,printf@val
 18624  002026  CFDD F0A6          	movff	postdec2,printf@val+1
 18625                           
 18626                           ; BSR set to: 0
 18627  00202A  0E02               	movlw	2
 18628  00202C  0100               	movlb	0	; () banked
 18629  00202E  27A1               	addwf	printf@ap& (0+255),f,b
 18630  002030  0E00               	movlw	0
 18631  002032  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 18632                           
 18633                           ; BSR set to: 0
 18634                           ;doprnt.c: 1261: if((int)val < 0) {
 18635  002034  0100               	movlb	0	; () banked
 18636  002036  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 18637  002038  D016               	goto	l7050
 18638                           
 18639                           ; BSR set to: 0
 18640                           ;doprnt.c: 1262: flag |= 0x03;
 18641  00203A  0E03               	movlw	3
 18642  00203C  0100               	movlb	0	; () banked
 18643  00203E  13A7               	iorwf	printf@flag& (0+255),f,b
 18644                           
 18645                           ; BSR set to: 0
 18646                           ;doprnt.c: 1263: val = -val;
 18647  002040  0100               	movlb	0	; () banked
 18648  002042  6DA5               	negf	printf@val& (0+255),b
 18649  002044  1FA6               	comf	(printf@val+1)& (0+255),f,b
 18650  002046  B0D8               	btfsc	status,0,c
 18651  002048  2BA6               	incf	(printf@val+1)& (0+255),f,b
 18652                           
 18653                           ; BSR set to: 0
 18654                           ;doprnt.c: 1264: }
 18655                           ;doprnt.c: 1266: }
 18656  00204A  D00D               	goto	l7050
 18657  00204C                     l7046:
 18658                           
 18659                           ; BSR set to: 0
 18660                           ;doprnt.c: 1268: else
 18661                           ;doprnt.c: 1273: {
 18662                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 18663  00204C  C0A1  FFD9         	movff	printf@ap,fsr2l
 18664  002050  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 18665  002054  CFDE F0A5          	movff	postinc2,printf@val
 18666  002058  CFDD F0A6          	movff	postdec2,printf@val+1
 18667                           
 18668                           ; BSR set to: 0
 18669  00205C  0E02               	movlw	2
 18670  00205E  0100               	movlb	0	; () banked
 18671  002060  27A1               	addwf	printf@ap& (0+255),f,b
 18672  002062  0E00               	movlw	0
 18673  002064  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 18674  002066                     l7050:
 18675                           
 18676                           ; BSR set to: 0
 18677                           ;doprnt.c: 1287: }
 18678                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 18679  002066  0E01               	movlw	1
 18680  002068  0100               	movlb	0	; () banked
 18681  00206A  6FA8               	movwf	printf@c& (0+255),b
 18682  00206C                     l7052:
 18683                           
 18684                           ; BSR set to: 0
 18685  00206C  0E05               	movlw	5
 18686  00206E  0100               	movlb	0	; () banked
 18687  002070  19A8               	xorwf	printf@c& (0+255),w,b
 18688  002072  B4D8               	btfsc	status,2,c
 18689  002074  D019               	goto	l7064
 18690                           
 18691                           ; BSR set to: 0
 18692                           ;doprnt.c: 1306: if(val < dpowers[c])
 18693                           
 18694                           ; BSR set to: 0
 18695                           
 18696                           ; BSR set to: 0
 18697  002076  0100               	movlb	0	; () banked
 18698  002078  51A8               	movf	printf@c& (0+255),w,b
 18699  00207A  0D02               	mullw	2
 18700  00207C  0EB8               	movlw	low _dpowers
 18701  00207E  24F3               	addwf	prodl,w,c
 18702  002080  6EF6               	movwf	tblptrl,c
 18703  002082  0EFA               	movlw	high _dpowers
 18704  002084  20F4               	addwfc	prodh,w,c
 18705  002086  6EF7               	movwf	tblptrh,c
 18706  002088                     	if	1	;There are 3 active tblptr bytes
 18707  002088  6AF8               	clrf	tblptru,c
 18708  00208A  0E00               	movlw	low (__mediumconst shr (0+16))
 18709  00208C  22F8               	addwfc	tblptru,f,c
 18710  00208E                     	endif
 18711  00208E  0009               	tblrd		*+
 18712  002090  50F5               	movf	tablat,w,c
 18713  002092  0100               	movlb	0	; () banked
 18714  002094  5DA5               	subwf	printf@val& (0+255),w,b
 18715  002096  0009               	tblrd		*+
 18716  002098  50F5               	movf	tablat,w,c
 18717  00209A  0100               	movlb	0	; () banked
 18718  00209C  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 18719  00209E  A0D8               	btfss	status,0,c
 18720  0020A0  D003               	goto	l7064
 18721                           
 18722                           ; BSR set to: 0
 18723                           
 18724                           ; BSR set to: 0
 18725                           
 18726                           ; BSR set to: 0
 18727                           ;doprnt.c: 1307: break;
 18728  0020A2  0100               	movlb	0	; () banked
 18729  0020A4  2BA8               	incf	printf@c& (0+255),f,b
 18730  0020A6  D7E2               	goto	l7052
 18731  0020A8                     l7064:
 18732                           
 18733                           ; BSR set to: 0
 18734                           ;doprnt.c: 1345: if(width && flag & 0x03)
 18735  0020A8  0100               	movlb	0	; () banked
 18736  0020AA  51A9               	movf	printf@width& (0+255),w,b
 18737  0020AC  0100               	movlb	0	; () banked
 18738  0020AE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18739  0020B0  B4D8               	btfsc	status,2,c
 18740  0020B2  D00B               	goto	l7070
 18741                           
 18742                           ; BSR set to: 0
 18743  0020B4  C0A7  F09A         	movff	printf@flag,??_printf
 18744  0020B8  0E03               	movlw	3
 18745  0020BA  0100               	movlb	0	; () banked
 18746  0020BC  179A               	andwf	??_printf& (0+255),f,b
 18747  0020BE  B4D8               	btfsc	status,2,c
 18748  0020C0  D004               	goto	l7070
 18749                           
 18750                           ; BSR set to: 0
 18751                           ;doprnt.c: 1346: width--;
 18752  0020C2  0100               	movlb	0	; () banked
 18753  0020C4  07A9               	decf	printf@width& (0+255),f,b
 18754  0020C6  A0D8               	btfss	status,0,c
 18755  0020C8  07AA               	decf	(printf@width+1)& (0+255),f,b
 18756  0020CA                     l7070:
 18757                           
 18758                           ; BSR set to: 0
 18759                           ;doprnt.c: 1381: if(width > c)
 18760  0020CA  0E80               	movlw	128
 18761  0020CC  0100               	movlb	0	; () banked
 18762  0020CE  BFA8               	btfsc	printf@c& (0+255),7,b
 18763  0020D0  0E7F               	movlw	127
 18764  0020D2  0100               	movlb	0	; () banked
 18765  0020D4  6F9A               	movwf	??_printf& (0+255),b
 18766  0020D6  0100               	movlb	0	; () banked
 18767  0020D8  51A9               	movf	printf@width& (0+255),w,b
 18768  0020DA  0100               	movlb	0	; () banked
 18769  0020DC  5DA8               	subwf	printf@c& (0+255),w,b
 18770  0020DE  0100               	movlb	0	; () banked
 18771  0020E0  51AA               	movf	(printf@width+1)& (0+255),w,b
 18772  0020E2  0A80               	xorlw	128
 18773  0020E4  0100               	movlb	0	; () banked
 18774  0020E6  599A               	subwfb	??_printf& (0+255),w,b
 18775  0020E8  B0D8               	btfsc	status,0,c
 18776  0020EA  D00B               	goto	l7074
 18777                           
 18778                           ; BSR set to: 0
 18779                           ;doprnt.c: 1382: width -= c;
 18780  0020EC  0100               	movlb	0	; () banked
 18781  0020EE  51A8               	movf	printf@c& (0+255),w,b
 18782  0020F0  0100               	movlb	0	; () banked
 18783  0020F2  5FA9               	subwf	printf@width& (0+255),f,b
 18784  0020F4  0E00               	movlw	0
 18785  0020F6  0100               	movlb	0	; () banked
 18786  0020F8  BFA8               	btfsc	printf@c& (0+255),7,b
 18787  0020FA  0EFF               	movlw	255
 18788  0020FC  0100               	movlb	0	; () banked
 18789  0020FE  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 18790  002100  D005               	goto	l7076
 18791  002102                     l7074:
 18792                           
 18793                           ; BSR set to: 0
 18794                           ;doprnt.c: 1383: else
 18795                           ;doprnt.c: 1384: width = 0;
 18796  002102  0E00               	movlw	0
 18797  002104  0100               	movlb	0	; () banked
 18798  002106  6FAA               	movwf	(printf@width+1)& (0+255),b
 18799  002108  0E00               	movlw	0
 18800  00210A  6FA9               	movwf	printf@width& (0+255),b
 18801  00210C                     l7076:
 18802                           
 18803                           ; BSR set to: 0
 18804                           ;doprnt.c: 1387: if(flag & 0x04) {
 18805  00210C  0100               	movlb	0	; () banked
 18806  00210E  A5A7               	btfss	printf@flag& (0+255),2,b
 18807  002110  D018               	goto	l7088
 18808                           
 18809                           ; BSR set to: 0
 18810                           ;doprnt.c: 1392: if(flag & 0x03)
 18811  002112  C0A7  F09A         	movff	printf@flag,??_printf
 18812  002116  0E03               	movlw	3
 18813  002118  0100               	movlb	0	; () banked
 18814  00211A  179A               	andwf	??_printf& (0+255),f,b
 18815  00211C  B4D8               	btfsc	status,2,c
 18816  00211E  D003               	goto	l7082
 18817                           
 18818                           ; BSR set to: 0
 18819                           ;doprnt.c: 1393: (putch('-') );
 18820  002120  0E2D               	movlw	45
 18821  002122  EC61  F030         	call	_putch
 18822  002126                     l7082:
 18823                           
 18824                           ;doprnt.c: 1415: if(width)
 18825  002126  0100               	movlb	0	; () banked
 18826  002128  51A9               	movf	printf@width& (0+255),w,b
 18827  00212A  0100               	movlb	0	; () banked
 18828  00212C  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18829  00212E  B4D8               	btfsc	status,2,c
 18830  002130  D025               	goto	l7098
 18831                           
 18832                           ; BSR set to: 0
 18833                           ;doprnt.c: 1417: (putch('0') );
 18834                           
 18835                           ; BSR set to: 0
 18836                           
 18837                           ;doprnt.c: 1416: do
 18838  002132  0E30               	movlw	48
 18839  002134  EC61  F030         	call	_putch
 18840                           
 18841                           ;doprnt.c: 1418: while(--width);
 18842  002138  0100               	movlb	0	; () banked
 18843  00213A  07A9               	decf	printf@width& (0+255),f,b
 18844  00213C  A0D8               	btfss	status,0,c
 18845  00213E  07AA               	decf	(printf@width+1)& (0+255),f,b
 18846  002140  D7F2               	goto	l7082
 18847  002142                     l7088:
 18848                           
 18849                           ; BSR set to: 0
 18850                           ;doprnt.c: 1422: {
 18851                           ;doprnt.c: 1424: if(width
 18852                           ;doprnt.c: 1428: )
 18853  002142  0100               	movlb	0	; () banked
 18854  002144  51A9               	movf	printf@width& (0+255),w,b
 18855  002146  0100               	movlb	0	; () banked
 18856  002148  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18857  00214A  B4D8               	btfsc	status,2,c
 18858  00214C  D00D               	goto	l7094
 18859  00214E                     l7090:
 18860                           
 18861                           ; BSR set to: 0
 18862                           ;doprnt.c: 1430: (putch(' ') );
 18863  00214E  0E20               	movlw	32
 18864  002150  EC61  F030         	call	_putch
 18865                           
 18866                           ;doprnt.c: 1431: while(--width);
 18867  002154  0100               	movlb	0	; () banked
 18868  002156  07A9               	decf	printf@width& (0+255),f,b
 18869  002158  A0D8               	btfss	status,0,c
 18870  00215A  07AA               	decf	(printf@width+1)& (0+255),f,b
 18871  00215C  0100               	movlb	0	; () banked
 18872  00215E  51A9               	movf	printf@width& (0+255),w,b
 18873  002160  0100               	movlb	0	; () banked
 18874  002162  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18875  002164  A4D8               	btfss	status,2,c
 18876  002166  D7F3               	goto	l7090
 18877  002168                     l7094:
 18878                           
 18879                           ; BSR set to: 0
 18880                           ;doprnt.c: 1438: if(flag & 0x03)
 18881  002168  C0A7  F09A         	movff	printf@flag,??_printf
 18882  00216C  0E03               	movlw	3
 18883  00216E  0100               	movlb	0	; () banked
 18884  002170  179A               	andwf	??_printf& (0+255),f,b
 18885  002172  B4D8               	btfsc	status,2,c
 18886  002174  D003               	goto	l7098
 18887                           
 18888                           ; BSR set to: 0
 18889                           ;doprnt.c: 1439: (putch('-') );
 18890  002176  0E2D               	movlw	45
 18891  002178  EC61  F030         	call	_putch
 18892  00217C                     l7098:
 18893                           
 18894                           ;doprnt.c: 1469: }
 18895                           ;doprnt.c: 1472: prec = c;
 18896  00217C  C0A8  F09E         	movff	printf@c,printf@prec
 18897                           
 18898                           ;doprnt.c: 1474: while(prec--) {
 18899  002180  D02C               	goto	l7104
 18900  002182                     l7100:
 18901                           
 18902                           ;doprnt.c: 1478: {
 18903                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 18904  002182  0100               	movlb	0	; () banked
 18905  002184  519E               	movf	printf@prec& (0+255),w,b
 18906  002186  0D02               	mullw	2
 18907  002188  0EB8               	movlw	low _dpowers
 18908  00218A  24F3               	addwf	prodl,w,c
 18909  00218C  6EF6               	movwf	tblptrl,c
 18910  00218E  0EFA               	movlw	high _dpowers
 18911  002190  20F4               	addwfc	prodh,w,c
 18912  002192  6EF7               	movwf	tblptrh,c
 18913  002194                     	if	1	;There are 3 active tblptr bytes
 18914  002194  6AF8               	clrf	tblptru,c
 18915  002196  0E00               	movlw	low (__mediumconst shr (0+16))
 18916  002198  22F8               	addwfc	tblptru,f,c
 18917  00219A                     	endif
 18918  00219A  0009               	tblrd		*+
 18919  00219C  CFF5 F082          	movff	tablat,___lwdiv@divisor
 18920  0021A0  000A               	tblrd		*-
 18921  0021A2  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 18922  0021A6  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 18923  0021AA  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 18924  0021AE  EC67  F02A         	call	___lwdiv	;wreg free
 18925  0021B2  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 18926  0021B6  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 18927  0021BA  0E00               	movlw	0
 18928  0021BC  0100               	movlb	0	; () banked
 18929  0021BE  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 18930  0021C0  0E0A               	movlw	10
 18931  0021C2  6F89               	movwf	___lwmod@divisor& (0+255),b
 18932  0021C4  ECB4  F02B         	call	___lwmod	;wreg free
 18933  0021C8  0100               	movlb	0	; () banked
 18934  0021CA  5187               	movf	?___lwmod& (0+255),w,b
 18935  0021CC  0F30               	addlw	48
 18936  0021CE  0100               	movlb	0	; () banked
 18937  0021D0  6FA8               	movwf	printf@c& (0+255),b
 18938                           
 18939                           ; BSR set to: 0
 18940                           ;doprnt.c: 1523: }
 18941                           ;doprnt.c: 1524: (putch(c) );
 18942  0021D2  0100               	movlb	0	; () banked
 18943  0021D4  51A8               	movf	printf@c& (0+255),w,b
 18944  0021D6  EC61  F030         	call	_putch
 18945  0021DA                     l7104:
 18946  0021DA  0100               	movlb	0	; () banked
 18947  0021DC  079E               	decf	printf@prec& (0+255),f,b
 18948  0021DE  0100               	movlb	0	; () banked
 18949  0021E0  299E               	incf	printf@prec& (0+255),w,b
 18950  0021E2  A4D8               	btfss	status,2,c
 18951  0021E4  D7CE               	goto	l7100
 18952  0021E6                     l7106:
 18953  0021E6  C08E  FFF6         	movff	printf@f,tblptrl
 18954  0021EA  C08F  FFF7         	movff	printf@f+1,tblptrh
 18955  0021EE  0100               	movlb	0	; () banked
 18956  0021F0  4B8E               	infsnz	printf@f& (0+255),f,b
 18957  0021F2  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18958  0021F4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18959  0021F4  6AF8               	clrf	tblptru,c
 18960  0021F6                     	endif
 18961  0021F6                     	if	0	;tblptru may be non-zero
 18962  0021F6                     	endif
 18963  0021F6  0008               	tblrd		*
 18964  0021F8  CFF5 F0A8          	movff	tablat,printf@c
 18965  0021FC  0100               	movlb	0	; () banked
 18966  0021FE  51A8               	movf	printf@c& (0+255),w,b
 18967  002200  B4D8               	btfsc	status,2,c
 18968  002202  0012               	return	
 18969  002204  D5EB               	goto	l6976
 18970  002206                     __end_of_printf:
 18971                           	opt stack 0
 18972                           tblptru	equ	0xFF8
 18973                           tblptrh	equ	0xFF7
 18974                           tblptrl	equ	0xFF6
 18975                           tablat	equ	0xFF5
 18976                           prodh	equ	0xFF4
 18977                           prodl	equ	0xFF3
 18978                           intcon	equ	0xFF2
 18979                           intcon2	equ	0xFF1
 18980                           intcon3	equ	0xFF0
 18981                           indf0	equ	0xFEF
 18982                           postinc0	equ	0xFEE
 18983                           fsr0h	equ	0xFEA
 18984                           fsr0l	equ	0xFE9
 18985                           wreg	equ	0xFE8
 18986                           postdec1	equ	0xFE5
 18987                           fsr1l	equ	0xFE1
 18988                           indf2	equ	0xFDF
 18989                           postinc2	equ	0xFDE
 18990                           postdec2	equ	0xFDD
 18991                           fsr2h	equ	0xFDA
 18992                           fsr2l	equ	0xFD9
 18993                           status	equ	0xFD8
 18994                           
 18995 ;; *************** function _putch *****************
 18996 ;; Defined at:
 18997 ;;		line 20 in file "lcd.c"
 18998 ;; Parameters:    Size  Location     Type
 18999 ;;  data            1    wreg     unsigned char 
 19000 ;; Auto vars:     Size  Location     Type
 19001 ;;  data            1    2[BANK0 ] unsigned char 
 19002 ;; Return value:  Size  Location     Type
 19003 ;;                  1    wreg      void 
 19004 ;; Registers used:
 19005 ;;		wreg, status,2, status,0, cstack
 19006 ;; Tracked objects:
 19007 ;;		On entry : 0/0
 19008 ;;		On exit  : 0/0
 19009 ;;		Unchanged: 0/0
 19010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19012 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19014 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19015 ;;Total ram usage:        1 bytes
 19016 ;; Hardware stack levels used:    1
 19017 ;; Hardware stack levels required when called:    8
 19018 ;; This function calls:
 19019 ;;		_lcdNibble
 19020 ;; This function is called by:
 19021 ;;		_printf
 19022 ;; This function uses a non-reentrant model
 19023 ;;
 19024                           
 19025                           	psect	text57
 19026  0060C2                     __ptext57:
 19027                           	opt stack 0
 19028  0060C2                     _putch:
 19029                           	opt stack 18
 19030                           
 19031                           ;incstack = 0
 19032                           ;putch@data stored from wreg
 19033  0060C2  0100               	movlb	0	; () banked
 19034  0060C4  6F82               	movwf	putch@data& (0+255),b
 19035                           
 19036                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 19037  0060C6  848C               	bsf	3980,2,c	;volatile
 19038                           
 19039                           ;lcd.c: 22: lcdNibble(data);
 19040  0060C8  0100               	movlb	0	; () banked
 19041  0060CA  5182               	movf	putch@data& (0+255),w,b
 19042  0060CC  EC4C  F02B         	call	_lcdNibble
 19043  0060D0  0012               	return		;funcret
 19044  0060D2                     __end_of_putch:
 19045                           	opt stack 0
 19046                           tblptru	equ	0xFF8
 19047                           tblptrh	equ	0xFF7
 19048                           tblptrl	equ	0xFF6
 19049                           tablat	equ	0xFF5
 19050                           prodh	equ	0xFF4
 19051                           prodl	equ	0xFF3
 19052                           intcon	equ	0xFF2
 19053                           intcon2	equ	0xFF1
 19054                           intcon3	equ	0xFF0
 19055                           indf0	equ	0xFEF
 19056                           postinc0	equ	0xFEE
 19057                           fsr0h	equ	0xFEA
 19058                           fsr0l	equ	0xFE9
 19059                           wreg	equ	0xFE8
 19060                           postdec1	equ	0xFE5
 19061                           fsr1l	equ	0xFE1
 19062                           indf2	equ	0xFDF
 19063                           postinc2	equ	0xFDE
 19064                           postdec2	equ	0xFDD
 19065                           fsr2h	equ	0xFDA
 19066                           fsr2l	equ	0xFD9
 19067                           status	equ	0xFD8
 19068                           
 19069 ;; *************** function _isdigit *****************
 19070 ;; Defined at:
 19071 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 19072 ;; Parameters:    Size  Location     Type
 19073 ;;  c               1    wreg     unsigned char 
 19074 ;; Auto vars:     Size  Location     Type
 19075 ;;  c               1    2[BANK0 ] unsigned char 
 19076 ;; Return value:  Size  Location     Type
 19077 ;;		None               void
 19078 ;; Registers used:
 19079 ;;		wreg, status,2, status,0
 19080 ;; Tracked objects:
 19081 ;;		On entry : 0/0
 19082 ;;		On exit  : 0/0
 19083 ;;		Unchanged: 0/0
 19084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19086 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19087 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19088 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19089 ;;Total ram usage:        3 bytes
 19090 ;; Hardware stack levels used:    1
 19091 ;; Hardware stack levels required when called:    7
 19092 ;; This function calls:
 19093 ;;		Nothing
 19094 ;; This function is called by:
 19095 ;;		_printf
 19096 ;; This function uses a non-reentrant model
 19097 ;;
 19098                           
 19099                           	psect	text58
 19100  005EF0                     __ptext58:
 19101                           	opt stack 0
 19102  005EF0                     _isdigit:
 19103                           	opt stack 19
 19104                           
 19105                           ;incstack = 0
 19106                           ;isdigit@c stored from wreg
 19107  005EF0  0100               	movlb	0	; () banked
 19108  005EF2  6F82               	movwf	isdigit@c& (0+255),b
 19109  005EF4  0E00               	movlw	0
 19110  005EF6  0100               	movlb	0	; () banked
 19111  005EF8  6F81               	movwf	_isdigit$2081& (0+255),b
 19112                           
 19113                           ; BSR set to: 0
 19114  005EFA  0E3A               	movlw	58
 19115  005EFC  0100               	movlb	0	; () banked
 19116  005EFE  6182               	cpfslt	isdigit@c& (0+255),b
 19117  005F00  D007               	goto	l6814
 19118                           
 19119                           ; BSR set to: 0
 19120  005F02  0E2F               	movlw	47
 19121  005F04  0100               	movlb	0	; () banked
 19122  005F06  6582               	cpfsgt	isdigit@c& (0+255),b
 19123  005F08  D003               	goto	l6814
 19124                           
 19125                           ; BSR set to: 0
 19126  005F0A  0E01               	movlw	1
 19127  005F0C  0100               	movlb	0	; () banked
 19128  005F0E  6F81               	movwf	_isdigit$2081& (0+255),b
 19129  005F10                     l6814:
 19130                           
 19131                           ; BSR set to: 0
 19132  005F10  C081  F080         	movff	_isdigit$2081,??_isdigit
 19133  005F14  0100               	movlb	0	; () banked
 19134  005F16  3180               	rrcf	??_isdigit& (0+255),w,b
 19135  005F18  0012               	return	
 19136  005F1A                     __end_of_isdigit:
 19137                           	opt stack 0
 19138                           tblptru	equ	0xFF8
 19139                           tblptrh	equ	0xFF7
 19140                           tblptrl	equ	0xFF6
 19141                           tablat	equ	0xFF5
 19142                           prodh	equ	0xFF4
 19143                           prodl	equ	0xFF3
 19144                           intcon	equ	0xFF2
 19145                           intcon2	equ	0xFF1
 19146                           intcon3	equ	0xFF0
 19147                           indf0	equ	0xFEF
 19148                           postinc0	equ	0xFEE
 19149                           fsr0h	equ	0xFEA
 19150                           fsr0l	equ	0xFE9
 19151                           wreg	equ	0xFE8
 19152                           postdec1	equ	0xFE5
 19153                           fsr1l	equ	0xFE1
 19154                           indf2	equ	0xFDF
 19155                           postinc2	equ	0xFDE
 19156                           postdec2	equ	0xFDD
 19157                           fsr2h	equ	0xFDA
 19158                           fsr2l	equ	0xFD9
 19159                           status	equ	0xFD8
 19160                           
 19161 ;; *************** function ___wmul *****************
 19162 ;; Defined at:
 19163 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 19164 ;; Parameters:    Size  Location     Type
 19165 ;;  multiplier      2    0[BANK0 ] unsigned int 
 19166 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 19167 ;; Auto vars:     Size  Location     Type
 19168 ;;  product         2    4[BANK0 ] unsigned int 
 19169 ;; Return value:  Size  Location     Type
 19170 ;;                  2    0[BANK0 ] unsigned int 
 19171 ;; Registers used:
 19172 ;;		wreg, status,2, status,0, prodl, prodh
 19173 ;; Tracked objects:
 19174 ;;		On entry : 0/0
 19175 ;;		On exit  : 0/0
 19176 ;;		Unchanged: 0/0
 19177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19178 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19179 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19181 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19182 ;;Total ram usage:        6 bytes
 19183 ;; Hardware stack levels used:    1
 19184 ;; Hardware stack levels required when called:    7
 19185 ;; This function calls:
 19186 ;;		Nothing
 19187 ;; This function is called by:
 19188 ;;		_printf
 19189 ;; This function uses a non-reentrant model
 19190 ;;
 19191                           
 19192                           	psect	text59
 19193  005BC4                     __ptext59:
 19194                           	opt stack 0
 19195  005BC4                     ___wmul:
 19196                           	opt stack 19
 19197                           
 19198                           ; BSR set to: 0
 19199                           ;incstack = 0
 19200  005BC4  0100               	movlb	0	; () banked
 19201  005BC6  5180               	movf	___wmul@multiplier& (0+255),w,b
 19202  005BC8  0100               	movlb	0	; () banked
 19203  005BCA  0382               	mulwf	___wmul@multiplicand& (0+255),b
 19204  005BCC  CFF3 F084          	movff	prodl,___wmul@product
 19205  005BD0  CFF4 F085          	movff	prodh,___wmul@product+1
 19206  005BD4  0100               	movlb	0	; () banked
 19207  005BD6  5180               	movf	___wmul@multiplier& (0+255),w,b
 19208  005BD8  0100               	movlb	0	; () banked
 19209  005BDA  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 19210  005BDC  50F3               	movf	prodl,w,c
 19211  005BDE  0100               	movlb	0	; () banked
 19212  005BE0  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 19213  005BE2  0100               	movlb	0	; () banked
 19214  005BE4  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 19215  005BE6  0100               	movlb	0	; () banked
 19216  005BE8  0382               	mulwf	___wmul@multiplicand& (0+255),b
 19217  005BEA  50F3               	movf	prodl,w,c
 19218  005BEC  0100               	movlb	0	; () banked
 19219  005BEE  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 19220                           
 19221                           ; BSR set to: 0
 19222  005BF0  C084  F080         	movff	___wmul@product,?___wmul
 19223  005BF4  C085  F081         	movff	___wmul@product+1,?___wmul+1
 19224  005BF8  0012               	return	
 19225  005BFA                     __end_of___wmul:
 19226                           	opt stack 0
 19227                           tblptru	equ	0xFF8
 19228                           tblptrh	equ	0xFF7
 19229                           tblptrl	equ	0xFF6
 19230                           tablat	equ	0xFF5
 19231                           prodh	equ	0xFF4
 19232                           prodl	equ	0xFF3
 19233                           intcon	equ	0xFF2
 19234                           intcon2	equ	0xFF1
 19235                           intcon3	equ	0xFF0
 19236                           indf0	equ	0xFEF
 19237                           postinc0	equ	0xFEE
 19238                           fsr0h	equ	0xFEA
 19239                           fsr0l	equ	0xFE9
 19240                           wreg	equ	0xFE8
 19241                           postdec1	equ	0xFE5
 19242                           fsr1l	equ	0xFE1
 19243                           indf2	equ	0xFDF
 19244                           postinc2	equ	0xFDE
 19245                           postdec2	equ	0xFDD
 19246                           fsr2h	equ	0xFDA
 19247                           fsr2l	equ	0xFD9
 19248                           status	equ	0xFD8
 19249                           
 19250 ;; *************** function ___lwmod *****************
 19251 ;; Defined at:
 19252 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 19253 ;; Parameters:    Size  Location     Type
 19254 ;;  dividend        2    7[BANK0 ] unsigned int 
 19255 ;;  divisor         2    9[BANK0 ] unsigned int 
 19256 ;; Auto vars:     Size  Location     Type
 19257 ;;  counter         1   11[BANK0 ] unsigned char 
 19258 ;; Return value:  Size  Location     Type
 19259 ;;                  2    7[BANK0 ] unsigned int 
 19260 ;; Registers used:
 19261 ;;		wreg, status,2, status,0
 19262 ;; Tracked objects:
 19263 ;;		On entry : 0/0
 19264 ;;		On exit  : 0/0
 19265 ;;		Unchanged: 0/0
 19266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19267 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19268 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19270 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19271 ;;Total ram usage:        5 bytes
 19272 ;; Hardware stack levels used:    1
 19273 ;; Hardware stack levels required when called:    7
 19274 ;; This function calls:
 19275 ;;		Nothing
 19276 ;; This function is called by:
 19277 ;;		_printf
 19278 ;; This function uses a non-reentrant model
 19279 ;;
 19280                           
 19281                           	psect	text60
 19282  005768                     __ptext60:
 19283                           	opt stack 0
 19284  005768                     ___lwmod:
 19285                           	opt stack 19
 19286                           
 19287                           ; BSR set to: 0
 19288                           ;incstack = 0
 19289  005768  0100               	movlb	0	; () banked
 19290  00576A  5189               	movf	___lwmod@divisor& (0+255),w,b
 19291  00576C  0100               	movlb	0	; () banked
 19292  00576E  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 19293  005770  B4D8               	btfsc	status,2,c
 19294  005772  D026               	goto	l2039
 19295                           
 19296                           ; BSR set to: 0
 19297  005774  0E01               	movlw	1
 19298  005776  0100               	movlb	0	; () banked
 19299  005778  6F8B               	movwf	___lwmod@counter& (0+255),b
 19300  00577A  D006               	goto	l6852
 19301  00577C                     l6850:
 19302                           
 19303                           ; BSR set to: 0
 19304  00577C  0100               	movlb	0	; () banked
 19305  00577E  90D8               	bcf	status,0,c
 19306  005780  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 19307  005782  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 19308  005784  0100               	movlb	0	; () banked
 19309  005786  2B8B               	incf	___lwmod@counter& (0+255),f,b
 19310  005788                     l6852:
 19311                           
 19312                           ; BSR set to: 0
 19313  005788  0100               	movlb	0	; () banked
 19314  00578A  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 19315  00578C  D7F7               	goto	l6850
 19316  00578E                     l6854:
 19317                           
 19318                           ; BSR set to: 0
 19319  00578E  0100               	movlb	0	; () banked
 19320  005790  5189               	movf	___lwmod@divisor& (0+255),w,b
 19321  005792  0100               	movlb	0	; () banked
 19322  005794  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 19323  005796  0100               	movlb	0	; () banked
 19324  005798  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 19325  00579A  0100               	movlb	0	; () banked
 19326  00579C  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 19327  00579E  A0D8               	btfss	status,0,c
 19328  0057A0  D008               	goto	l6858
 19329                           
 19330                           ; BSR set to: 0
 19331  0057A2  0100               	movlb	0	; () banked
 19332  0057A4  5189               	movf	___lwmod@divisor& (0+255),w,b
 19333  0057A6  0100               	movlb	0	; () banked
 19334  0057A8  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 19335  0057AA  0100               	movlb	0	; () banked
 19336  0057AC  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 19337  0057AE  0100               	movlb	0	; () banked
 19338  0057B0  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 19339  0057B2                     l6858:
 19340                           
 19341                           ; BSR set to: 0
 19342  0057B2  0100               	movlb	0	; () banked
 19343  0057B4  90D8               	bcf	status,0,c
 19344  0057B6  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 19345  0057B8  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 19346                           
 19347                           ; BSR set to: 0
 19348  0057BA  0100               	movlb	0	; () banked
 19349  0057BC  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 19350  0057BE  D7E7               	goto	l6854
 19351  0057C0                     l2039:
 19352                           
 19353                           ; BSR set to: 0
 19354  0057C0  C087  F087         	movff	___lwmod@dividend,?___lwmod
 19355  0057C4  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 19356                           
 19357                           ; BSR set to: 0
 19358  0057C8  0012               	return		;funcret
 19359  0057CA                     __end_of___lwmod:
 19360                           	opt stack 0
 19361                           tblptru	equ	0xFF8
 19362                           tblptrh	equ	0xFF7
 19363                           tblptrl	equ	0xFF6
 19364                           tablat	equ	0xFF5
 19365                           prodh	equ	0xFF4
 19366                           prodl	equ	0xFF3
 19367                           intcon	equ	0xFF2
 19368                           intcon2	equ	0xFF1
 19369                           intcon3	equ	0xFF0
 19370                           indf0	equ	0xFEF
 19371                           postinc0	equ	0xFEE
 19372                           fsr0h	equ	0xFEA
 19373                           fsr0l	equ	0xFE9
 19374                           wreg	equ	0xFE8
 19375                           postdec1	equ	0xFE5
 19376                           fsr1l	equ	0xFE1
 19377                           indf2	equ	0xFDF
 19378                           postinc2	equ	0xFDE
 19379                           postdec2	equ	0xFDD
 19380                           fsr2h	equ	0xFDA
 19381                           fsr2l	equ	0xFD9
 19382                           status	equ	0xFD8
 19383                           
 19384 ;; *************** function ___lwdiv *****************
 19385 ;; Defined at:
 19386 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 19387 ;; Parameters:    Size  Location     Type
 19388 ;;  dividend        2    0[BANK0 ] unsigned int 
 19389 ;;  divisor         2    2[BANK0 ] unsigned int 
 19390 ;; Auto vars:     Size  Location     Type
 19391 ;;  quotient        2    4[BANK0 ] unsigned int 
 19392 ;;  counter         1    6[BANK0 ] unsigned char 
 19393 ;; Return value:  Size  Location     Type
 19394 ;;                  2    0[BANK0 ] unsigned int 
 19395 ;; Registers used:
 19396 ;;		wreg, status,2, status,0
 19397 ;; Tracked objects:
 19398 ;;		On entry : 0/0
 19399 ;;		On exit  : 0/0
 19400 ;;		Unchanged: 0/0
 19401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19402 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19403 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19405 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19406 ;;Total ram usage:        7 bytes
 19407 ;; Hardware stack levels used:    1
 19408 ;; Hardware stack levels required when called:    7
 19409 ;; This function calls:
 19410 ;;		Nothing
 19411 ;; This function is called by:
 19412 ;;		_printf
 19413 ;; This function uses a non-reentrant model
 19414 ;;
 19415                           
 19416                           	psect	text61
 19417  0054CE                     __ptext61:
 19418                           	opt stack 0
 19419  0054CE                     ___lwdiv:
 19420                           	opt stack 19
 19421                           
 19422                           ; BSR set to: 0
 19423                           ;incstack = 0
 19424  0054CE  0E00               	movlw	0
 19425  0054D0  0100               	movlb	0	; () banked
 19426  0054D2  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 19427  0054D4  0E00               	movlw	0
 19428  0054D6  6F84               	movwf	___lwdiv@quotient& (0+255),b
 19429                           
 19430                           ; BSR set to: 0
 19431  0054D8  0100               	movlb	0	; () banked
 19432  0054DA  5182               	movf	___lwdiv@divisor& (0+255),w,b
 19433  0054DC  0100               	movlb	0	; () banked
 19434  0054DE  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 19435  0054E0  B4D8               	btfsc	status,2,c
 19436  0054E2  D02C               	goto	l2029
 19437                           
 19438                           ; BSR set to: 0
 19439  0054E4  0E01               	movlw	1
 19440  0054E6  0100               	movlb	0	; () banked
 19441  0054E8  6F86               	movwf	___lwdiv@counter& (0+255),b
 19442  0054EA  D006               	goto	l6832
 19443  0054EC                     l6830:
 19444                           
 19445                           ; BSR set to: 0
 19446  0054EC  0100               	movlb	0	; () banked
 19447  0054EE  90D8               	bcf	status,0,c
 19448  0054F0  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 19449  0054F2  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 19450  0054F4  0100               	movlb	0	; () banked
 19451  0054F6  2B86               	incf	___lwdiv@counter& (0+255),f,b
 19452  0054F8                     l6832:
 19453                           
 19454                           ; BSR set to: 0
 19455  0054F8  0100               	movlb	0	; () banked
 19456  0054FA  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 19457  0054FC  D7F7               	goto	l6830
 19458  0054FE                     l6834:
 19459                           
 19460                           ; BSR set to: 0
 19461  0054FE  0100               	movlb	0	; () banked
 19462  005500  90D8               	bcf	status,0,c
 19463  005502  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 19464  005504  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 19465                           
 19466                           ; BSR set to: 0
 19467  005506  0100               	movlb	0	; () banked
 19468  005508  5182               	movf	___lwdiv@divisor& (0+255),w,b
 19469  00550A  0100               	movlb	0	; () banked
 19470  00550C  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 19471  00550E  0100               	movlb	0	; () banked
 19472  005510  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 19473  005512  0100               	movlb	0	; () banked
 19474  005514  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 19475  005516  A0D8               	btfss	status,0,c
 19476  005518  D00A               	goto	l6842
 19477                           
 19478                           ; BSR set to: 0
 19479  00551A  0100               	movlb	0	; () banked
 19480  00551C  5182               	movf	___lwdiv@divisor& (0+255),w,b
 19481  00551E  0100               	movlb	0	; () banked
 19482  005520  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 19483  005522  0100               	movlb	0	; () banked
 19484  005524  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 19485  005526  0100               	movlb	0	; () banked
 19486  005528  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 19487                           
 19488                           ; BSR set to: 0
 19489  00552A  0100               	movlb	0	; () banked
 19490  00552C  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 19491  00552E                     l6842:
 19492                           
 19493                           ; BSR set to: 0
 19494  00552E  0100               	movlb	0	; () banked
 19495  005530  90D8               	bcf	status,0,c
 19496  005532  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 19497  005534  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 19498                           
 19499                           ; BSR set to: 0
 19500  005536  0100               	movlb	0	; () banked
 19501  005538  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 19502  00553A  D7E1               	goto	l6834
 19503  00553C                     l2029:
 19504                           
 19505                           ; BSR set to: 0
 19506  00553C  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 19507  005540  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 19508                           
 19509                           ; BSR set to: 0
 19510  005544  0012               	return		;funcret
 19511  005546                     __end_of___lwdiv:
 19512                           	opt stack 0
 19513                           tblptru	equ	0xFF8
 19514                           tblptrh	equ	0xFF7
 19515                           tblptrl	equ	0xFF6
 19516                           tablat	equ	0xFF5
 19517                           prodh	equ	0xFF4
 19518                           prodl	equ	0xFF3
 19519                           intcon	equ	0xFF2
 19520                           intcon2	equ	0xFF1
 19521                           intcon3	equ	0xFF0
 19522                           indf0	equ	0xFEF
 19523                           postinc0	equ	0xFEE
 19524                           fsr0h	equ	0xFEA
 19525                           fsr0l	equ	0xFE9
 19526                           wreg	equ	0xFE8
 19527                           postdec1	equ	0xFE5
 19528                           fsr1l	equ	0xFE1
 19529                           indf2	equ	0xFDF
 19530                           postinc2	equ	0xFDE
 19531                           postdec2	equ	0xFDD
 19532                           fsr2h	equ	0xFDA
 19533                           fsr2l	equ	0xFD9
 19534                           status	equ	0xFD8
 19535                           
 19536 ;; *************** function _lcdInst *****************
 19537 ;; Defined at:
 19538 ;;		line 15 in file "lcd.c"
 19539 ;; Parameters:    Size  Location     Type
 19540 ;;  data            1    wreg     unsigned char 
 19541 ;; Auto vars:     Size  Location     Type
 19542 ;;  data            1    2[BANK0 ] unsigned char 
 19543 ;; Return value:  Size  Location     Type
 19544 ;;                  1    wreg      void 
 19545 ;; Registers used:
 19546 ;;		wreg, status,2, status,0, cstack
 19547 ;; Tracked objects:
 19548 ;;		On entry : 0/0
 19549 ;;		On exit  : 0/0
 19550 ;;		Unchanged: 0/0
 19551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19553 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19555 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19556 ;;Total ram usage:        1 bytes
 19557 ;; Hardware stack levels used:    1
 19558 ;; Hardware stack levels required when called:    8
 19559 ;; This function calls:
 19560 ;;		_lcdNibble
 19561 ;; This function is called by:
 19562 ;;		_UI
 19563 ;;		_change_state_to_menu_start
 19564 ;;		_change_state_to_menu_12
 19565 ;;		_change_state_to_menu_22
 19566 ;;		_initLCD
 19567 ;;		_printRTC
 19568 ;;		_Loading
 19569 ;;		_EEPROM_write
 19570 ;;		_Test
 19571 ;;		_algorithmTest
 19572 ;;		_sensorTest
 19573 ;;		_actuatorTest
 19574 ;;		_BothServos
 19575 ;;		_PortTestDC
 19576 ;;		_PlatformTest
 19577 ;;		_SpeedTest
 19578 ;;		_BlockerTest
 19579 ;;		_arm
 19580 ;;		_PortTestPusher
 19581 ;; This function uses a non-reentrant model
 19582 ;;
 19583                           
 19584                           	psect	text62
 19585  0060D2                     __ptext62:
 19586                           	opt stack 0
 19587  0060D2                     _lcdInst:
 19588                           	opt stack 20
 19589                           
 19590                           ; BSR set to: 0
 19591                           ;incstack = 0
 19592                           ;lcdInst@data stored from wreg
 19593  0060D2  0100               	movlb	0	; () banked
 19594  0060D4  6F82               	movwf	lcdInst@data& (0+255),b
 19595                           
 19596                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 19597  0060D6  948C               	bcf	3980,2,c	;volatile
 19598                           
 19599                           ;lcd.c: 17: lcdNibble(data);
 19600  0060D8  0100               	movlb	0	; () banked
 19601  0060DA  5182               	movf	lcdInst@data& (0+255),w,b
 19602  0060DC  EC4C  F02B         	call	_lcdNibble
 19603  0060E0  0012               	return		;funcret
 19604  0060E2                     __end_of_lcdInst:
 19605                           	opt stack 0
 19606                           tblptru	equ	0xFF8
 19607                           tblptrh	equ	0xFF7
 19608                           tblptrl	equ	0xFF6
 19609                           tablat	equ	0xFF5
 19610                           prodh	equ	0xFF4
 19611                           prodl	equ	0xFF3
 19612                           intcon	equ	0xFF2
 19613                           intcon2	equ	0xFF1
 19614                           intcon3	equ	0xFF0
 19615                           indf0	equ	0xFEF
 19616                           postinc0	equ	0xFEE
 19617                           fsr0h	equ	0xFEA
 19618                           fsr0l	equ	0xFE9
 19619                           wreg	equ	0xFE8
 19620                           postdec1	equ	0xFE5
 19621                           fsr1l	equ	0xFE1
 19622                           indf2	equ	0xFDF
 19623                           postinc2	equ	0xFDE
 19624                           postdec2	equ	0xFDD
 19625                           fsr2h	equ	0xFDA
 19626                           fsr2l	equ	0xFD9
 19627                           status	equ	0xFD8
 19628                           
 19629 ;; *************** function _lcdNibble *****************
 19630 ;; Defined at:
 19631 ;;		line 25 in file "lcd.c"
 19632 ;; Parameters:    Size  Location     Type
 19633 ;;  data            1    wreg     unsigned char 
 19634 ;; Auto vars:     Size  Location     Type
 19635 ;;  data            1    1[BANK0 ] unsigned char 
 19636 ;;  temp            1    0[BANK0 ] unsigned char 
 19637 ;; Return value:  Size  Location     Type
 19638 ;;                  1    wreg      void 
 19639 ;; Registers used:
 19640 ;;		wreg, status,2, status,0
 19641 ;; Tracked objects:
 19642 ;;		On entry : 0/0
 19643 ;;		On exit  : 0/0
 19644 ;;		Unchanged: 0/0
 19645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19647 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19649 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19650 ;;Total ram usage:        2 bytes
 19651 ;; Hardware stack levels used:    1
 19652 ;; Hardware stack levels required when called:    7
 19653 ;; This function calls:
 19654 ;;		Nothing
 19655 ;; This function is called by:
 19656 ;;		_lcdInst
 19657 ;;		_putch
 19658 ;; This function uses a non-reentrant model
 19659 ;;
 19660                           
 19661                           	psect	text63
 19662  005698                     __ptext63:
 19663                           	opt stack 0
 19664  005698                     _lcdNibble:
 19665                           	opt stack 20
 19666                           
 19667                           ;incstack = 0
 19668                           ;lcdNibble@data stored from wreg
 19669  005698  0100               	movlb	0	; () banked
 19670  00569A  6F81               	movwf	lcdNibble@data& (0+255),b
 19671                           
 19672                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 19673  00569C  9EF2               	bcf	intcon,7,c	;volatile
 19674                           
 19675                           ;lcd.c: 28: char temp = data & 0xF0;
 19676  00569E  0100               	movlb	0	; () banked
 19677  0056A0  5181               	movf	lcdNibble@data& (0+255),w,b
 19678  0056A2  0BF0               	andlw	240
 19679  0056A4  0100               	movlb	0	; () banked
 19680  0056A6  6F80               	movwf	lcdNibble@temp& (0+255),b
 19681                           
 19682                           ;lcd.c: 29: LATD = LATD & 0x0F;
 19683  0056A8  508C               	movf	3980,w,c	;volatile
 19684  0056AA  0B0F               	andlw	15
 19685  0056AC  6E8C               	movwf	3980,c	;volatile
 19686                           
 19687                           ;lcd.c: 30: LATD = temp | LATD;
 19688  0056AE  0100               	movlb	0	; () banked
 19689  0056B0  5180               	movf	lcdNibble@temp& (0+255),w,b
 19690  0056B2  108C               	iorwf	3980,w,c	;volatile
 19691  0056B4  6E8C               	movwf	3980,c	;volatile
 19692                           
 19693                           ; BSR set to: 0
 19694                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 19695  0056B6  868C               	bsf	3980,3,c	;volatile
 19696                           
 19697                           ; BSR set to: 0
 19698                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19699  0056B8  0E42               	movlw	66
 19700  0056BA                     u12367:
 19701  0056BA  2EE8               	decfsz	wreg,f,c
 19702  0056BC  D7FE               	bra	u12367
 19703  0056BE  D000               	nop2	
 19704                           
 19705                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 19706  0056C0  968C               	bcf	3980,3,c	;volatile
 19707                           
 19708                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19709  0056C2  0E42               	movlw	66
 19710  0056C4                     u12377:
 19711  0056C4  2EE8               	decfsz	wreg,f,c
 19712  0056C6  D7FE               	bra	u12377
 19713  0056C8  D000               	nop2	
 19714                           
 19715                           ;lcd.c: 37: data = data << 4;
 19716  0056CA  0100               	movlb	0	; () banked
 19717  0056CC  3981               	swapf	lcdNibble@data& (0+255),w,b
 19718  0056CE  0BF0               	andlw	240
 19719  0056D0  0100               	movlb	0	; () banked
 19720  0056D2  6F81               	movwf	lcdNibble@data& (0+255),b
 19721                           
 19722                           ;lcd.c: 39: temp = data & 0xF0;
 19723  0056D4  0100               	movlb	0	; () banked
 19724  0056D6  5181               	movf	lcdNibble@data& (0+255),w,b
 19725  0056D8  0BF0               	andlw	240
 19726  0056DA  0100               	movlb	0	; () banked
 19727  0056DC  6F80               	movwf	lcdNibble@temp& (0+255),b
 19728                           
 19729                           ;lcd.c: 40: LATD = LATD & 0x0F;
 19730  0056DE  508C               	movf	3980,w,c	;volatile
 19731  0056E0  0B0F               	andlw	15
 19732  0056E2  6E8C               	movwf	3980,c	;volatile
 19733                           
 19734                           ;lcd.c: 41: LATD = temp | LATD;
 19735  0056E4  0100               	movlb	0	; () banked
 19736  0056E6  5180               	movf	lcdNibble@temp& (0+255),w,b
 19737  0056E8  108C               	iorwf	3980,w,c	;volatile
 19738  0056EA  6E8C               	movwf	3980,c	;volatile
 19739                           
 19740                           ; BSR set to: 0
 19741                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 19742  0056EC  868C               	bsf	3980,3,c	;volatile
 19743                           
 19744                           ; BSR set to: 0
 19745                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19746  0056EE  0E42               	movlw	66
 19747  0056F0                     u12387:
 19748  0056F0  2EE8               	decfsz	wreg,f,c
 19749  0056F2  D7FE               	bra	u12387
 19750  0056F4  D000               	nop2	
 19751                           
 19752                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 19753  0056F6  968C               	bcf	3980,3,c	;volatile
 19754                           
 19755                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19756  0056F8  0E42               	movlw	66
 19757  0056FA                     u12397:
 19758  0056FA  2EE8               	decfsz	wreg,f,c
 19759  0056FC  D7FE               	bra	u12397
 19760  0056FE  D000               	nop2	
 19761                           
 19762                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 19763  005700  8EF2               	bsf	intcon,7,c	;volatile
 19764  005702  0012               	return		;funcret
 19765  005704                     __end_of_lcdNibble:
 19766                           	opt stack 0
 19767                           tblptru	equ	0xFF8
 19768                           tblptrh	equ	0xFF7
 19769                           tblptrl	equ	0xFF6
 19770                           tablat	equ	0xFF5
 19771                           prodh	equ	0xFF4
 19772                           prodl	equ	0xFF3
 19773                           intcon	equ	0xFF2
 19774                           intcon2	equ	0xFF1
 19775                           intcon3	equ	0xFF0
 19776                           indf0	equ	0xFEF
 19777                           postinc0	equ	0xFEE
 19778                           fsr0h	equ	0xFEA
 19779                           fsr0l	equ	0xFE9
 19780                           wreg	equ	0xFE8
 19781                           postdec1	equ	0xFE5
 19782                           fsr1l	equ	0xFE1
 19783                           indf2	equ	0xFDF
 19784                           postinc2	equ	0xFDE
 19785                           postdec2	equ	0xFDD
 19786                           fsr2h	equ	0xFDA
 19787                           fsr2l	equ	0xFD9
 19788                           status	equ	0xFD8
 19789                           
 19790 ;; *************** function _handler *****************
 19791 ;; Defined at:
 19792 ;;		line 16 in file "interruptHandler.c"
 19793 ;; Parameters:    Size  Location     Type
 19794 ;;		None
 19795 ;; Auto vars:     Size  Location     Type
 19796 ;;		None
 19797 ;; Return value:  Size  Location     Type
 19798 ;;                  1    wreg      void 
 19799 ;; Registers used:
 19800 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19801 ;; Tracked objects:
 19802 ;;		On entry : 0/0
 19803 ;;		On exit  : 0/0
 19804 ;;		Unchanged: 0/0
 19805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19808 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19809 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19810 ;;Total ram usage:       16 bytes
 19811 ;; Hardware stack levels used:    1
 19812 ;; Hardware stack levels required when called:    6
 19813 ;; This function calls:
 19814 ;;		_printSortTimer
 19815 ;;		_updateArmState
 19816 ;;		_updateMenu
 19817 ;;		_updateServoStates
 19818 ;;		i2_change_state_to_menu_start
 19819 ;; This function is called by:
 19820 ;;		Interrupt level 2
 19821 ;; This function uses a non-reentrant model
 19822 ;;
 19823                           
 19824                           	psect	intcode
 19825  000008                     __pintcode:
 19826                           	opt stack 0
 19827  000008                     _handler:
 19828                           	opt stack 18
 19829                           
 19830                           ;incstack = 0
 19831  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19832  00000A  EDD1  F01D         	call	int_func,f	;refresh shadow registers
 19833                           tblptru	equ	0xFF8
 19834                           tblptrh	equ	0xFF7
 19835                           tblptrl	equ	0xFF6
 19836                           tablat	equ	0xFF5
 19837                           prodh	equ	0xFF4
 19838                           prodl	equ	0xFF3
 19839                           intcon	equ	0xFF2
 19840                           intcon2	equ	0xFF1
 19841                           intcon3	equ	0xFF0
 19842                           indf0	equ	0xFEF
 19843                           postinc0	equ	0xFEE
 19844                           fsr0h	equ	0xFEA
 19845                           fsr0l	equ	0xFE9
 19846                           wreg	equ	0xFE8
 19847                           postdec1	equ	0xFE5
 19848                           fsr1l	equ	0xFE1
 19849                           indf2	equ	0xFDF
 19850                           postinc2	equ	0xFDE
 19851                           postdec2	equ	0xFDD
 19852                           fsr2h	equ	0xFDA
 19853                           fsr2l	equ	0xFD9
 19854                           status	equ	0xFD8
 19855                           
 19856                           	psect	intcode_body
 19857  003BA2                     __pintcode_body:
 19858                           	opt stack 18
 19859  003BA2                     int_func:
 19860                           	opt stack 18
 19861  003BA2  0006               	pop		; remove dummy address from shadow register refresh
 19862  003BA4  CFFA F04B          	movff	pclath,??_handler+2
 19863  003BA8  CFFB F04C          	movff	pclatu,??_handler+3
 19864  003BAC  CFE9 F04D          	movff	fsr0l,??_handler+4
 19865  003BB0  CFEA F04E          	movff	fsr0h,??_handler+5
 19866  003BB4  CFE1 F04F          	movff	fsr1l,??_handler+6
 19867  003BB8  CFE2 F050          	movff	fsr1h,??_handler+7
 19868  003BBC  CFD9 F051          	movff	fsr2l,??_handler+8
 19869  003BC0  CFDA F052          	movff	fsr2h,??_handler+9
 19870  003BC4  CFF3 F053          	movff	prodl,??_handler+10
 19871  003BC8  CFF4 F054          	movff	prodh,??_handler+11
 19872  003BCC  CFF6 F055          	movff	tblptrl,??_handler+12
 19873  003BD0  CFF7 F056          	movff	tblptrh,??_handler+13
 19874  003BD4  CFF8 F057          	movff	tblptru,??_handler+14
 19875  003BD8  CFF5 F058          	movff	tablat,??_handler+15
 19876                           
 19877                           ;interruptHandler.c: 18: if(INT1IF){
 19878  003BDC  A0F0               	btfss	intcon3,0,c	;volatile
 19879  003BDE  D034               	goto	i2l10632
 19880                           
 19881                           ;interruptHandler.c: 19: INT1IF = 0;
 19882  003BE0  90F0               	bcf	intcon3,0,c	;volatile
 19883                           
 19884                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
 19885  003BE2  3881               	swapf	3969,w,c	;volatile
 19886  003BE4  0B0F               	andlw	15
 19887  003BE6  0B0F               	andlw	15
 19888  003BE8  6E49               	movwf	??_handler& (0+255),c
 19889  003BEA  6A4A               	clrf	(??_handler+1)& (0+255),c
 19890  003BEC  0EA7               	movlw	low _keys
 19891  003BEE  2449               	addwf	??_handler,w,c
 19892  003BF0  6EF6               	movwf	tblptrl,c
 19893  003BF2  0EFA               	movlw	high _keys
 19894  003BF4  204A               	addwfc	??_handler+1,w,c
 19895  003BF6  6EF7               	movwf	tblptrh,c
 19896  003BF8                     	if	1	;There are 3 active tblptr bytes
 19897  003BF8  6AF8               	clrf	tblptru,c
 19898  003BFA  0E00               	movlw	low (__mediumconst shr (0+16))
 19899  003BFC  22F8               	addwfc	tblptru,f,c
 19900  003BFE                     	endif
 19901  003BFE  0008               	tblrd		*
 19902  003C00  CFF5 F07D          	movff	tablat,_input	;volatile
 19903                           
 19904                           ;interruptHandler.c: 21: if(input == '*'){
 19905  003C04  0E2A               	movlw	42
 19906  003C06  187D               	xorwf	_input,w,c	;volatile
 19907  003C08  B4D8               	btfsc	status,2,c
 19908  003C0A  D00D               	goto	i2l10626
 19909  003C0C  D018               	goto	i2l10628
 19910  003C0E                     i2l10616:
 19911                           
 19912                           ;interruptHandler.c: 24: machine_state = Testing_state;
 19913  003C0E  0E03               	movlw	3
 19914  003C10  D007               	goto	L16
 19915  003C12                     i2l10618:
 19916                           
 19917                           ; BSR set to: 0
 19918                           ;interruptHandler.c: 27: machine_state = UI_state;
 19919  003C12  0E00               	movlw	0
 19920  003C14  0100               	movlb	0	; () banked
 19921  003C16  6FFC               	movwf	_machine_state& (0+255),b
 19922                           
 19923                           ; BSR set to: 0
 19924                           ;interruptHandler.c: 28: change_state_to_menu_start();
 19925  003C18  ECA1  F02F         	call	i2_change_state_to_menu_start	;wreg free
 19926                           
 19927                           ;interruptHandler.c: 29: break;
 19928  003C1C  D015               	goto	i2l10632
 19929  003C1E                     i2l10622:
 19930                           
 19931                           ;interruptHandler.c: 31: machine_state = DoneSorting_state;
 19932  003C1E  0E02               	movlw	2
 19933  003C20                     L16:
 19934  003C20  0100               	movlb	0	; () banked
 19935  003C22  6FFC               	movwf	_machine_state& (0+255),b
 19936                           
 19937                           ; BSR set to: 0
 19938                           ;interruptHandler.c: 33: }
 19939                           
 19940                           ;interruptHandler.c: 32: break;
 19941  003C24  D011               	goto	i2l10632
 19942  003C26                     i2l10626:
 19943  003C26  0100               	movlb	0	; () banked
 19944  003C28  51FC               	movf	_machine_state& (0+255),w,b
 19945                           
 19946                           ; Switch size 1, requested type "space"
 19947                           ; Number of cases is 3, Range of values is 0 to 3
 19948                           ; switch strategies available:
 19949                           ; Name         Instructions Cycles
 19950                           ; simple_byte           10     6 (average)
 19951                           ;	Chosen strategy is simple_byte
 19952  003C2A  0A00               	xorlw	0	; case 0
 19953  003C2C  B4D8               	btfsc	status,2,c
 19954  003C2E  D7EF               	goto	i2l10616
 19955  003C30  0A01               	xorlw	1	; case 1
 19956  003C32  B4D8               	btfsc	status,2,c
 19957  003C34  D7F4               	goto	i2l10622
 19958  003C36  0A02               	xorlw	2	; case 3
 19959  003C38  B4D8               	btfsc	status,2,c
 19960  003C3A  D7EB               	goto	i2l10618
 19961                           
 19962                           ; BSR set to: 0
 19963                           ;interruptHandler.c: 34: }
 19964  003C3C  D005               	goto	i2l10632
 19965  003C3E                     i2l10628:
 19966                           
 19967                           ;interruptHandler.c: 35: else if(machine_state == UI_state){
 19968  003C3E  0100               	movlb	0	; () banked
 19969  003C40  51FC               	movf	_machine_state& (0+255),w,b
 19970  003C42  B4D8               	btfsc	status,2,c
 19971                           
 19972                           ; BSR set to: 0
 19973                           ;interruptHandler.c: 36: updateMenu();
 19974  003C44  EC56  F01B         	call	_updateMenu	;wreg free
 19975  003C48                     i2l10632:
 19976                           
 19977                           ;interruptHandler.c: 37: }
 19978                           ;interruptHandler.c: 38: }
 19979                           ;interruptHandler.c: 41: if(TMR0IF){
 19980  003C48  A4F2               	btfss	intcon,2,c	;volatile
 19981  003C4A  D00C               	goto	i2l10646
 19982                           
 19983                           ;interruptHandler.c: 42: TMR0IF = 0;
 19984  003C4C  94F2               	bcf	intcon,2,c	;volatile
 19985                           
 19986                           ;interruptHandler.c: 43: if(machine_state == Sorting_state){
 19987  003C4E  0100               	movlb	0	; () banked
 19988  003C50  05FC               	decf	_machine_state& (0+255),w,b
 19989  003C52  A4D8               	btfss	status,2,c
 19990  003C54  D007               	goto	i2l10646
 19991                           
 19992                           ; BSR set to: 0
 19993                           ;interruptHandler.c: 44: printSortTimer();
 19994  003C56  ECED  F014         	call	_printSortTimer	;wreg free
 19995                           
 19996                           ;interruptHandler.c: 46: TMR0H = 0b10000101;
 19997  003C5A  0E85               	movlw	133
 19998  003C5C  6ED7               	movwf	4055,c	;volatile
 19999                           
 20000                           ;interruptHandler.c: 47: TMR0L = 0b11101110;
 20001  003C5E  0EEE               	movlw	238
 20002  003C60  6ED6               	movwf	4054,c	;volatile
 20003                           
 20004                           ;interruptHandler.c: 48: TMR0ON = 1;
 20005  003C62  8ED5               	bsf	4053,7,c	;volatile
 20006  003C64                     i2l10646:
 20007                           
 20008                           ;interruptHandler.c: 49: }
 20009                           ;interruptHandler.c: 50: }
 20010                           ;interruptHandler.c: 53: if(TMR1IF){
 20011  003C64  A09E               	btfss	3998,0,c	;volatile
 20012  003C66  D02A               	goto	i2l10674
 20013                           
 20014                           ;interruptHandler.c: 54: TMR1IF = 0;
 20015  003C68  909E               	bcf	3998,0,c	;volatile
 20016                           
 20017                           ;interruptHandler.c: 55: TMR1ON = 0;
 20018  003C6A  90CD               	bcf	4045,0,c	;volatile
 20019                           
 20020                           ;interruptHandler.c: 56: if(machine_state == Sorting_state){
 20021  003C6C  0100               	movlb	0	; () banked
 20022  003C6E  05FC               	decf	_machine_state& (0+255),w,b
 20023  003C70  A4D8               	btfss	status,2,c
 20024  003C72  D024               	goto	i2l10674
 20025                           
 20026                           ; BSR set to: 0
 20027                           ;interruptHandler.c: 57: if(was_low_1){
 20028  003C74  5077               	movf	_was_low_1,w,c	;volatile
 20029  003C76  1078               	iorwf	_was_low_1+1,w,c	;volatile
 20030  003C78  B4D8               	btfsc	status,2,c
 20031  003C7A  D00A               	goto	i2l1082
 20032                           
 20033                           ; BSR set to: 0
 20034                           ;interruptHandler.c: 58: LATCbits.LATC1 = 1;
 20035  003C7C  828B               	bsf	3979,1,c	;volatile
 20036                           
 20037                           ; BSR set to: 0
 20038                           ;interruptHandler.c: 59: was_low_1 = 0;
 20039  003C7E  0E00               	movlw	0
 20040  003C80  6E78               	movwf	_was_low_1+1,c	;volatile
 20041  003C82  0E00               	movlw	0
 20042  003C84  6E77               	movwf	_was_low_1,c	;volatile
 20043                           
 20044                           ; BSR set to: 0
 20045                           ;interruptHandler.c: 60: TMR1H = servoTimes[0];
 20046  003C86  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 20047                           
 20048                           ; BSR set to: 0
 20049                           ;interruptHandler.c: 61: TMR1L = servoTimes[1];
 20050  003C8A  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 20051                           
 20052                           ;interruptHandler.c: 62: }
 20053  003C8E  D00F               	goto	i2l10668
 20054  003C90                     i2l1082:
 20055                           
 20056                           ; BSR set to: 0
 20057                           ;interruptHandler.c: 63: else{
 20058                           ;interruptHandler.c: 64: LATCbits.LATC1 = 0;
 20059  003C90  928B               	bcf	3979,1,c	;volatile
 20060                           
 20061                           ; BSR set to: 0
 20062                           ;interruptHandler.c: 65: was_low_1 = 1;
 20063  003C92  0E00               	movlw	0
 20064  003C94  6E78               	movwf	_was_low_1+1,c	;volatile
 20065  003C96  0E01               	movlw	1
 20066  003C98  6E77               	movwf	_was_low_1,c	;volatile
 20067                           
 20068                           ; BSR set to: 0
 20069                           ;interruptHandler.c: 66: TMR1H = 20000 - servoTimes[0];
 20070  003C9A  0101               	movlb	1	; () banked
 20071  003C9C  511C               	movf	_servoTimes& (0+255),w,b
 20072  003C9E  0800               	sublw	0
 20073  003CA0  0F20               	addlw	32
 20074  003CA2  6ECF               	movwf	4047,c	;volatile
 20075                           
 20076                           ; BSR set to: 1
 20077                           ;interruptHandler.c: 67: TMR1L = 20000 - servoTimes[1];
 20078  003CA4  0101               	movlb	1	; () banked
 20079  003CA6  511E               	movf	(_servoTimes+2)& (0+255),w,b
 20080  003CA8  0800               	sublw	0
 20081  003CAA  0F20               	addlw	32
 20082  003CAC  6ECE               	movwf	4046,c	;volatile
 20083  003CAE                     i2l10668:
 20084                           
 20085                           ;interruptHandler.c: 68: }
 20086                           ;interruptHandler.c: 69: TMR1ON = 1;
 20087  003CAE  80CD               	bsf	4045,0,c	;volatile
 20088                           
 20089                           ;interruptHandler.c: 70: servo_timer_counter += 10;
 20090  003CB0  0E0A               	movlw	10
 20091  003CB2  266D               	addwf	_servo_timer_counter,f,c	;volatile
 20092  003CB4  0E00               	movlw	0
 20093  003CB6  226E               	addwfc	_servo_timer_counter+1,f,c	;volatile
 20094                           
 20095                           ;interruptHandler.c: 72: updateServoStates();
 20096  003CB8  ECC0  F01F         	call	_updateServoStates	;wreg free
 20097  003CBC                     i2l10674:
 20098                           
 20099                           ;interruptHandler.c: 73: }
 20100                           ;interruptHandler.c: 74: }
 20101                           ;interruptHandler.c: 77: if(TMR2IF){
 20102  003CBC  A29E               	btfss	3998,1,c	;volatile
 20103  003CBE  D026               	goto	i2l10700
 20104                           
 20105                           ;interruptHandler.c: 80: TMR2IF = 0;
 20106  003CC0  929E               	bcf	3998,1,c	;volatile
 20107                           
 20108                           ;interruptHandler.c: 81: TMR2ON = 0;
 20109  003CC2  94CA               	bcf	4042,2,c	;volatile
 20110                           
 20111                           ;interruptHandler.c: 82: timer2_counter++;
 20112  003CC4  4A73               	infsnz	_timer2_counter,f,c	;volatile
 20113  003CC6  2A74               	incf	_timer2_counter+1,f,c	;volatile
 20114                           
 20115                           ;interruptHandler.c: 83: if(machine_state == Sorting_state){
 20116  003CC8  0100               	movlb	0	; () banked
 20117  003CCA  05FC               	decf	_machine_state& (0+255),w,b
 20118  003CCC  A4D8               	btfss	status,2,c
 20119  003CCE  D01E               	goto	i2l10700
 20120                           
 20121                           ; BSR set to: 0
 20122                           ;interruptHandler.c: 84: if(was_low_2 && (timer2_counter == 2)){
 20123  003CD0  5079               	movf	_was_low_2,w,c	;volatile
 20124  003CD2  107A               	iorwf	_was_low_2+1,w,c	;volatile
 20125  003CD4  B4D8               	btfsc	status,2,c
 20126  003CD6  D00A               	goto	i2l10690
 20127                           
 20128                           ; BSR set to: 0
 20129  003CD8  0E02               	movlw	2
 20130  003CDA  1873               	xorwf	_timer2_counter,w,c	;volatile
 20131  003CDC  1074               	iorwf	_timer2_counter+1,w,c	;volatile
 20132  003CDE  A4D8               	btfss	status,2,c
 20133  003CE0  D005               	goto	i2l10690
 20134                           
 20135                           ; BSR set to: 0
 20136                           ;interruptHandler.c: 86: LATBbits.LATB3 = 1;
 20137  003CE2  868A               	bsf	3978,3,c	;volatile
 20138                           
 20139                           ; BSR set to: 0
 20140                           ;interruptHandler.c: 87: was_low_2 = 0;
 20141  003CE4  0E00               	movlw	0
 20142  003CE6  6E7A               	movwf	_was_low_2+1,c	;volatile
 20143  003CE8  0E00               	movlw	0
 20144  003CEA  D008               	goto	L17
 20145  003CEC                     i2l10690:
 20146                           
 20147                           ; BSR set to: 0
 20148                           ;interruptHandler.c: 90: else if(!was_low_2){
 20149  003CEC  5079               	movf	_was_low_2,w,c	;volatile
 20150  003CEE  107A               	iorwf	_was_low_2+1,w,c	;volatile
 20151  003CF0  A4D8               	btfss	status,2,c
 20152  003CF2  D009               	goto	i2l10696
 20153                           
 20154                           ; BSR set to: 0
 20155                           ;interruptHandler.c: 91: LATBbits.LATB3 = 0;
 20156  003CF4  968A               	bcf	3978,3,c	;volatile
 20157                           
 20158                           ; BSR set to: 0
 20159                           ;interruptHandler.c: 92: was_low_2 = 1;
 20160  003CF6  0E00               	movlw	0
 20161  003CF8  6E7A               	movwf	_was_low_2+1,c	;volatile
 20162  003CFA  0E01               	movlw	1
 20163  003CFC                     L17:
 20164  003CFC  6E79               	movwf	_was_low_2,c	;volatile
 20165                           
 20166                           ;interruptHandler.c: 93: timer2_counter = 0;
 20167  003CFE  0E00               	movlw	0
 20168  003D00  6E74               	movwf	_timer2_counter+1,c	;volatile
 20169  003D02  0E00               	movlw	0
 20170  003D04  6E73               	movwf	_timer2_counter,c	;volatile
 20171  003D06                     i2l10696:
 20172                           
 20173                           ; BSR set to: 0
 20174                           ;interruptHandler.c: 94: }
 20175                           ;interruptHandler.c: 95: updateArmState();
 20176  003D06  EC72  F02D         	call	_updateArmState	;wreg free
 20177                           
 20178                           ;interruptHandler.c: 96: TMR2ON = 1;
 20179  003D0A  84CA               	bsf	4042,2,c	;volatile
 20180  003D0C                     i2l10700:
 20181                           
 20182                           ;interruptHandler.c: 97: }
 20183                           ;interruptHandler.c: 98: }
 20184                           ;interruptHandler.c: 101: if(TMR3IF){
 20185  003D0C  A2A1               	btfss	4001,1,c	;volatile
 20186  003D0E  D024               	goto	i2l1093
 20187                           
 20188                           ;interruptHandler.c: 102: TMR3IF = 0;
 20189  003D10  92A1               	bcf	4001,1,c	;volatile
 20190                           
 20191                           ;interruptHandler.c: 103: TMR3ON = 0;
 20192  003D12  90B1               	bcf	4017,0,c	;volatile
 20193                           
 20194                           ;interruptHandler.c: 104: if(machine_state == Sorting_state){
 20195  003D14  0100               	movlb	0	; () banked
 20196  003D16  05FC               	decf	_machine_state& (0+255),w,b
 20197  003D18  A4D8               	btfss	status,2,c
 20198  003D1A  D01E               	goto	i2l1093
 20199                           
 20200                           ; BSR set to: 0
 20201                           ;interruptHandler.c: 105: if(was_low_3){
 20202  003D1C  507B               	movf	_was_low_3,w,c	;volatile
 20203  003D1E  107C               	iorwf	_was_low_3+1,w,c	;volatile
 20204  003D20  B4D8               	btfsc	status,2,c
 20205  003D22  D00A               	goto	i2l1091
 20206                           
 20207                           ; BSR set to: 0
 20208                           ;interruptHandler.c: 106: LATCbits.LATC2 = 1;
 20209  003D24  848B               	bsf	3979,2,c	;volatile
 20210                           
 20211                           ; BSR set to: 0
 20212                           ;interruptHandler.c: 107: was_low_3 = 0;
 20213  003D26  0E00               	movlw	0
 20214  003D28  6E7C               	movwf	_was_low_3+1,c	;volatile
 20215  003D2A  0E00               	movlw	0
 20216  003D2C  6E7B               	movwf	_was_low_3,c	;volatile
 20217                           
 20218                           ; BSR set to: 0
 20219                           ;interruptHandler.c: 108: TMR3H = servoTimes[2];
 20220  003D2E  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 20221                           
 20222                           ; BSR set to: 0
 20223                           ;interruptHandler.c: 109: TMR3L = servoTimes[3];
 20224  003D32  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 20225                           
 20226                           ;interruptHandler.c: 110: }
 20227  003D36  D00F               	goto	i2l10722
 20228  003D38                     i2l1091:
 20229                           
 20230                           ; BSR set to: 0
 20231                           ;interruptHandler.c: 111: else{
 20232                           ;interruptHandler.c: 112: LATCbits.LATC2 = 0;
 20233  003D38  948B               	bcf	3979,2,c	;volatile
 20234                           
 20235                           ; BSR set to: 0
 20236                           ;interruptHandler.c: 113: was_low_3 = 1;
 20237  003D3A  0E00               	movlw	0
 20238  003D3C  6E7C               	movwf	_was_low_3+1,c	;volatile
 20239  003D3E  0E01               	movlw	1
 20240  003D40  6E7B               	movwf	_was_low_3,c	;volatile
 20241                           
 20242                           ; BSR set to: 0
 20243                           ;interruptHandler.c: 114: TMR3H = 20000 - servoTimes[2];
 20244  003D42  0101               	movlb	1	; () banked
 20245  003D44  5120               	movf	(_servoTimes+4)& (0+255),w,b
 20246  003D46  0800               	sublw	0
 20247  003D48  0F20               	addlw	32
 20248  003D4A  6EB3               	movwf	4019,c	;volatile
 20249                           
 20250                           ; BSR set to: 1
 20251                           ;interruptHandler.c: 115: TMR3L = 20000 - servoTimes[3];
 20252  003D4C  0101               	movlb	1	; () banked
 20253  003D4E  5122               	movf	(_servoTimes+6)& (0+255),w,b
 20254  003D50  0800               	sublw	0
 20255  003D52  0F20               	addlw	32
 20256  003D54  6EB2               	movwf	4018,c	;volatile
 20257  003D56                     i2l10722:
 20258                           
 20259                           ;interruptHandler.c: 116: }
 20260                           ;interruptHandler.c: 117: TMR3ON = 1;
 20261  003D56  80B1               	bsf	4017,0,c	;volatile
 20262  003D58                     i2l1093:
 20263  003D58  C058  FFF5         	movff	??_handler+15,tablat
 20264  003D5C  C057  FFF8         	movff	??_handler+14,tblptru
 20265  003D60  C056  FFF7         	movff	??_handler+13,tblptrh
 20266  003D64  C055  FFF6         	movff	??_handler+12,tblptrl
 20267  003D68  C054  FFF4         	movff	??_handler+11,prodh
 20268  003D6C  C053  FFF3         	movff	??_handler+10,prodl
 20269  003D70  C052  FFDA         	movff	??_handler+9,fsr2h
 20270  003D74  C051  FFD9         	movff	??_handler+8,fsr2l
 20271  003D78  C050  FFE2         	movff	??_handler+7,fsr1h
 20272  003D7C  C04F  FFE1         	movff	??_handler+6,fsr1l
 20273  003D80  C04E  FFEA         	movff	??_handler+5,fsr0h
 20274  003D84  C04D  FFE9         	movff	??_handler+4,fsr0l
 20275  003D88  C04C  FFFB         	movff	??_handler+3,pclatu
 20276  003D8C  C04B  FFFA         	movff	??_handler+2,pclath
 20277  003D90  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 20278  003D92  0011               	retfie		f
 20279  003D94                     __end_of_handler:
 20280                           	opt stack 0
 20281                           pclatu	equ	0xFFB
 20282                           pclath	equ	0xFFA
 20283                           tblptru	equ	0xFF8
 20284                           tblptrh	equ	0xFF7
 20285                           tblptrl	equ	0xFF6
 20286                           tablat	equ	0xFF5
 20287                           prodh	equ	0xFF4
 20288                           prodl	equ	0xFF3
 20289                           intcon	equ	0xFF2
 20290                           intcon2	equ	0xFF1
 20291                           intcon3	equ	0xFF0
 20292                           indf0	equ	0xFEF
 20293                           postinc0	equ	0xFEE
 20294                           fsr0h	equ	0xFEA
 20295                           fsr0l	equ	0xFE9
 20296                           wreg	equ	0xFE8
 20297                           postdec1	equ	0xFE5
 20298                           fsr1h	equ	0xFE2
 20299                           fsr1l	equ	0xFE1
 20300                           indf2	equ	0xFDF
 20301                           postinc2	equ	0xFDE
 20302                           postdec2	equ	0xFDD
 20303                           fsr2h	equ	0xFDA
 20304                           fsr2l	equ	0xFD9
 20305                           status	equ	0xFD8
 20306                           
 20307 ;; *************** function _updateServoStates *****************
 20308 ;; Defined at:
 20309 ;;		line 658 in file "sort.c"
 20310 ;; Parameters:    Size  Location     Type
 20311 ;;		None
 20312 ;; Auto vars:     Size  Location     Type
 20313 ;;		None
 20314 ;; Return value:  Size  Location     Type
 20315 ;;                  1    wreg      void 
 20316 ;; Registers used:
 20317 ;;		wreg, status,2, status,0, cstack
 20318 ;; Tracked objects:
 20319 ;;		On entry : 0/0
 20320 ;;		On exit  : 0/0
 20321 ;;		Unchanged: 0/0
 20322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20325 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20326 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20327 ;;Total ram usage:        2 bytes
 20328 ;; Hardware stack levels used:    1
 20329 ;; Hardware stack levels required when called:    1
 20330 ;; This function calls:
 20331 ;;		i2_updateServoPosition
 20332 ;; This function is called by:
 20333 ;;		_handler
 20334 ;; This function uses a non-reentrant model
 20335 ;;
 20336                           
 20337                           	psect	text65
 20338  003F80                     __ptext65:
 20339                           	opt stack 0
 20340  003F80                     _updateServoStates:
 20341                           	opt stack 22
 20342                           
 20343                           ;sort.c: 660: if(servo_timer_counter >= servo_timer_target){
 20344                           
 20345                           ;incstack = 0
 20346  003F80  506F               	movf	_servo_timer_target,w,c	;volatile
 20347  003F82  5C6D               	subwf	_servo_timer_counter,w,c	;volatile
 20348  003F84  506E               	movf	_servo_timer_counter+1,w,c	;volatile
 20349  003F86  0A80               	xorlw	128
 20350  003F88  6E09               	movwf	??_updateServoStates& (0+255),c
 20351  003F8A  5070               	movf	_servo_timer_target+1,w,c	;volatile
 20352  003F8C  0A80               	xorlw	128
 20353  003F8E  5809               	subwfb	??_updateServoStates& (0+255),w,c
 20354  003F90  A0D8               	btfss	status,0,c
 20355  003F92  0012               	return	
 20356                           
 20357                           ;sort.c: 662: if(f_panning_to_bin){
 20358  003F94  5067               	movf	_f_panning_to_bin,w,c	;volatile
 20359  003F96  1068               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 20360  003F98  A4D8               	btfss	status,2,c
 20361  003F9A  D036               	goto	i2l10490
 20362  003F9C  D05F               	goto	i2l10494
 20363  003F9E                     i2l10464:
 20364                           
 20365                           ;sort.c: 666: updateServoPosition(1260, 3);
 20366  003F9E  0E04               	movlw	4
 20367  003FA0  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20368  003FA2  0EEC               	movlw	236
 20369  003FA4  6E01               	movwf	i2updateServoPosition@time_us,c
 20370  003FA6  0E00               	movlw	0
 20371  003FA8  6E04               	movwf	i2updateServoPosition@timer+1,c
 20372  003FAA  0E03               	movlw	3
 20373  003FAC  6E03               	movwf	i2updateServoPosition@timer,c
 20374  003FAE  ECDC  F02A         	call	i2_updateServoPosition	;wreg free
 20375  003FB2  D025               	goto	i2l10484
 20376  003FB4                     i2l10468:
 20377                           
 20378                           ;sort.c: 668: servo_timer_target = 700;
 20379  003FB4  0E02               	movlw	2
 20380  003FB6  6E70               	movwf	_servo_timer_target+1,c	;volatile
 20381  003FB8  0EBC               	movlw	188
 20382  003FBA  6E6F               	movwf	_servo_timer_target,c	;volatile
 20383                           
 20384                           ;sort.c: 669: break;
 20385  003FBC  D04A               	goto	i2l10492
 20386  003FBE                     i2l10470:
 20387                           
 20388                           ;sort.c: 671: updateServoPosition(1260, 3);
 20389  003FBE  0E04               	movlw	4
 20390  003FC0  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20391  003FC2  0EEC               	movlw	236
 20392  003FC4  6E01               	movwf	i2updateServoPosition@time_us,c
 20393  003FC6  0E00               	movlw	0
 20394  003FC8  6E04               	movwf	i2updateServoPosition@timer+1,c
 20395  003FCA  0E03               	movlw	3
 20396  003FCC  6E03               	movwf	i2updateServoPosition@timer,c
 20397  003FCE  ECDC  F02A         	call	i2_updateServoPosition	;wreg free
 20398  003FD2  D015               	goto	i2l10484
 20399  003FD4                     i2l10476:
 20400                           
 20401                           ;sort.c: 677: updateServoPosition(1390, 3);
 20402  003FD4  0E05               	movlw	5
 20403  003FD6  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20404  003FD8  0E6E               	movlw	110
 20405  003FDA  6E01               	movwf	i2updateServoPosition@time_us,c
 20406  003FDC  0E00               	movlw	0
 20407  003FDE  6E04               	movwf	i2updateServoPosition@timer+1,c
 20408  003FE0  0E03               	movlw	3
 20409  003FE2  6E03               	movwf	i2updateServoPosition@timer,c
 20410  003FE4  ECDC  F02A         	call	i2_updateServoPosition	;wreg free
 20411  003FE8  D00A               	goto	i2l10484
 20412  003FEA                     i2l10482:
 20413                           
 20414                           ;sort.c: 682: updateServoPosition(1390, 3);
 20415  003FEA  0E05               	movlw	5
 20416  003FEC  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20417  003FEE  0E6E               	movlw	110
 20418  003FF0  6E01               	movwf	i2updateServoPosition@time_us,c
 20419  003FF2  0E00               	movlw	0
 20420  003FF4  6E04               	movwf	i2updateServoPosition@timer+1,c
 20421  003FF6  0E03               	movlw	3
 20422  003FF8  6E03               	movwf	i2updateServoPosition@timer,c
 20423  003FFA  ECDC  F02A         	call	i2_updateServoPosition	;wreg free
 20424  003FFE                     i2l10484:
 20425                           
 20426                           ;sort.c: 683: servo_timer_counter = 0;
 20427  003FFE  0E00               	movlw	0
 20428  004000  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20429  004002  0E00               	movlw	0
 20430  004004  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20431  004006  D7D6               	goto	i2l10468
 20432  004008                     i2l10490:
 20433  004008  C06B  F009         	movff	_pan_servo_state,??_updateServoStates	;volatile
 20434  00400C  C06C  F00A         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 20435                           
 20436                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 20437                           ; Switch size 1, requested type "space"
 20438                           ; Number of cases is 4, Range of values is 1 to 9
 20439                           ; switch strategies available:
 20440                           ; Name         Instructions Cycles
 20441                           ; simple_byte           13     7 (average)
 20442                           ;	Chosen strategy is simple_byte
 20443  004010  500A               	movf	??_updateServoStates+1,w,c
 20444  004012  0A01               	xorlw	1	; case 1
 20445  004014  B4D8               	btfsc	status,2,c
 20446  004016  D00A               	goto	i2l11168
 20447  004018  0A02               	xorlw	2	; case 3
 20448  00401A  B4D8               	btfsc	status,2,c
 20449  00401C  D00C               	goto	i2l11170
 20450  00401E  0A05               	xorlw	5	; case 6
 20451  004020  B4D8               	btfsc	status,2,c
 20452  004022  D00E               	goto	i2l11172
 20453  004024  0A0F               	xorlw	15	; case 9
 20454  004026  B4D8               	btfsc	status,2,c
 20455  004028  D010               	goto	i2l11174
 20456  00402A  D013               	goto	i2l10492
 20457  00402C                     i2l11168:
 20458                           
 20459                           ; Switch size 1, requested type "space"
 20460                           ; Number of cases is 1, Range of values is 144 to 144
 20461                           ; switch strategies available:
 20462                           ; Name         Instructions Cycles
 20463                           ; simple_byte            4     3 (average)
 20464                           ;	Chosen strategy is simple_byte
 20465  00402C  5009               	movf	??_updateServoStates,w,c
 20466  00402E  0A90               	xorlw	144	; case 144
 20467  004030  B4D8               	btfsc	status,2,c
 20468  004032  D7B5               	goto	i2l10464
 20469  004034  D00E               	goto	i2l10492
 20470  004036                     i2l11170:
 20471                           
 20472                           ; Switch size 1, requested type "space"
 20473                           ; Number of cases is 1, Range of values is 82 to 82
 20474                           ; switch strategies available:
 20475                           ; Name         Instructions Cycles
 20476                           ; simple_byte            4     3 (average)
 20477                           ;	Chosen strategy is simple_byte
 20478  004036  5009               	movf	??_updateServoStates,w,c
 20479  004038  0A52               	xorlw	82	; case 82
 20480  00403A  B4D8               	btfsc	status,2,c
 20481  00403C  D7C0               	goto	i2l10470
 20482  00403E  D009               	goto	i2l10492
 20483  004040                     i2l11172:
 20484                           
 20485                           ; Switch size 1, requested type "space"
 20486                           ; Number of cases is 1, Range of values is 14 to 14
 20487                           ; switch strategies available:
 20488                           ; Name         Instructions Cycles
 20489                           ; simple_byte            4     3 (average)
 20490                           ;	Chosen strategy is simple_byte
 20491  004040  5009               	movf	??_updateServoStates,w,c
 20492  004042  0A0E               	xorlw	14	; case 14
 20493  004044  B4D8               	btfsc	status,2,c
 20494  004046  D7C6               	goto	i2l10476
 20495  004048  D004               	goto	i2l10492
 20496  00404A                     i2l11174:
 20497                           
 20498                           ; Switch size 1, requested type "space"
 20499                           ; Number of cases is 1, Range of values is 196 to 196
 20500                           ; switch strategies available:
 20501                           ; Name         Instructions Cycles
 20502                           ; simple_byte            4     3 (average)
 20503                           ;	Chosen strategy is simple_byte
 20504  00404A  5009               	movf	??_updateServoStates,w,c
 20505  00404C  0AC4               	xorlw	196	; case 196
 20506  00404E  B4D8               	btfsc	status,2,c
 20507  004050  D7CC               	goto	i2l10482
 20508  004052                     i2l10492:
 20509                           
 20510                           ;sort.c: 689: f_panning_to_bin = 0;
 20511  004052  0E00               	movlw	0
 20512  004054  6E68               	movwf	_f_panning_to_bin+1,c	;volatile
 20513  004056  0E00               	movlw	0
 20514  004058  6E67               	movwf	_f_panning_to_bin,c	;volatile
 20515                           
 20516                           ;sort.c: 690: }
 20517  00405A  0012               	return	
 20518  00405C                     i2l10494:
 20519                           
 20520                           ;sort.c: 691: else if(pan_servo_state == 1200){
 20521  00405C  0EB0               	movlw	176
 20522  00405E  186B               	xorwf	_pan_servo_state,w,c	;volatile
 20523  004060  E15A               	bnz	i2l10524
 20524  004062  0E04               	movlw	4
 20525  004064  186C               	xorwf	_pan_servo_state+1,w,c	;volatile
 20526  004066  A4D8               	btfss	status,2,c
 20527  004068  D056               	goto	i2l10524
 20528                           
 20529                           ;sort.c: 693: servo_timer_counter = 0;
 20530  00406A  0E00               	movlw	0
 20531  00406C  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20532  00406E  0E00               	movlw	0
 20533  004070  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20534                           
 20535                           ;sort.c: 694: }
 20536  004072  0012               	return	
 20537  004074                     i2l10498:
 20538                           
 20539                           ;sort.c: 699: updateServoPosition(1050, 3);
 20540  004074  0E04               	movlw	4
 20541  004076  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20542  004078  0E1A               	movlw	26
 20543  00407A  6E01               	movwf	i2updateServoPosition@time_us,c
 20544  00407C  0E00               	movlw	0
 20545  00407E  6E04               	movwf	i2updateServoPosition@timer+1,c
 20546  004080  0E03               	movlw	3
 20547  004082  6E03               	movwf	i2updateServoPosition@timer,c
 20548  004084  ECDC  F02A         	call	i2_updateServoPosition	;wreg free
 20549                           
 20550                           ;sort.c: 700: servo_timer_counter = 0;
 20551  004088  0E00               	movlw	0
 20552  00408A  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20553  00408C  0E00               	movlw	0
 20554  00408E  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20555                           
 20556                           ;sort.c: 701: servo_timer_target = 750;
 20557  004090  0E02               	movlw	2
 20558  004092  6E70               	movwf	_servo_timer_target+1,c	;volatile
 20559  004094  0EEE               	movlw	238
 20560  004096  6E6F               	movwf	_servo_timer_target,c	;volatile
 20561                           
 20562                           ;sort.c: 702: break;
 20563  004098  0012               	return	
 20564  00409A                     i2l10504:
 20565                           
 20566                           ;sort.c: 704: updateServoPosition(1050, 3);
 20567  00409A  0E04               	movlw	4
 20568  00409C  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20569  00409E  0E1A               	movlw	26
 20570  0040A0  6E01               	movwf	i2updateServoPosition@time_us,c
 20571  0040A2  0E00               	movlw	0
 20572  0040A4  6E04               	movwf	i2updateServoPosition@timer+1,c
 20573  0040A6  0E03               	movlw	3
 20574  0040A8  6E03               	movwf	i2updateServoPosition@timer,c
 20575  0040AA  ECDC  F02A         	call	i2_updateServoPosition	;wreg free
 20576                           
 20577                           ;sort.c: 705: servo_timer_counter = 0;
 20578  0040AE  0E00               	movlw	0
 20579  0040B0  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20580  0040B2  0E00               	movlw	0
 20581  0040B4  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20582                           
 20583                           ;sort.c: 706: servo_timer_target = 750;
 20584  0040B6  0E02               	movlw	2
 20585  0040B8  6E70               	movwf	_servo_timer_target+1,c	;volatile
 20586  0040BA  0EEE               	movlw	238
 20587  0040BC  6E6F               	movwf	_servo_timer_target,c	;volatile
 20588                           
 20589                           ;sort.c: 707: break;
 20590  0040BE  0012               	return	
 20591  0040C0                     i2l10510:
 20592                           
 20593                           ;sort.c: 710: updateServoPosition(1200, 1);
 20594  0040C0  0E04               	movlw	4
 20595  0040C2  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20596  0040C4  0EB0               	movlw	176
 20597  0040C6  6E01               	movwf	i2updateServoPosition@time_us,c
 20598  0040C8  0E00               	movlw	0
 20599  0040CA  6E04               	movwf	i2updateServoPosition@timer+1,c
 20600  0040CC  0E01               	movlw	1
 20601  0040CE  6E03               	movwf	i2updateServoPosition@timer,c
 20602  0040D0  ECDC  F02A         	call	i2_updateServoPosition	;wreg free
 20603                           
 20604                           ;sort.c: 711: updateServoPosition(1050, 3);
 20605  0040D4  0E04               	movlw	4
 20606  0040D6  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20607  0040D8  0E1A               	movlw	26
 20608  0040DA  6E01               	movwf	i2updateServoPosition@time_us,c
 20609  0040DC  0E00               	movlw	0
 20610  0040DE  6E04               	movwf	i2updateServoPosition@timer+1,c
 20611  0040E0  0E03               	movlw	3
 20612  0040E2  6E03               	movwf	i2updateServoPosition@timer,c
 20613  0040E4  ECDC  F02A         	call	i2_updateServoPosition	;wreg free
 20614                           
 20615                           ;sort.c: 712: servo_timer_counter = 0;
 20616  0040E8  0E00               	movlw	0
 20617  0040EA  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20618  0040EC  0E00               	movlw	0
 20619  0040EE  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20620                           
 20621                           ;sort.c: 713: servo_timer_target = 9999;
 20622  0040F0  0E27               	movlw	39
 20623  0040F2  6E70               	movwf	_servo_timer_target+1,c	;volatile
 20624  0040F4  0E0F               	movlw	15
 20625  0040F6  6E6F               	movwf	_servo_timer_target,c	;volatile
 20626                           
 20627                           ;sort.c: 715: f_can_distributed = 1;
 20628  0040F8  0E00               	movlw	0
 20629  0040FA  0101               	movlb	1	; () banked
 20630  0040FC  6F38               	movwf	(_f_can_distributed+1)& (0+255),b
 20631  0040FE  0E01               	movlw	1
 20632  004100  6F37               	movwf	_f_can_distributed& (0+255),b
 20633                           
 20634                           ; BSR set to: 1
 20635                           ;sort.c: 716: if(f_lastCan == 1){
 20636  004102  0100               	movlb	0	; () banked
 20637  004104  05EC               	decf	_f_lastCan& (0+255),w,b
 20638  004106  0100               	movlb	0	; () banked
 20639  004108  11ED               	iorwf	(_f_lastCan+1)& (0+255),w,b
 20640  00410A  A4D8               	btfss	status,2,c
 20641  00410C  0012               	return	
 20642                           
 20643                           ; BSR set to: 0
 20644                           ;sort.c: 717: machine_state = DoneSorting_state;
 20645  00410E  0E02               	movlw	2
 20646  004110  0100               	movlb	0	; () banked
 20647  004112  6FFC               	movwf	_machine_state& (0+255),b
 20648                           
 20649                           ; BSR set to: 0
 20650                           ;sort.c: 723: }
 20651                           
 20652                           ; BSR set to: 0
 20653                           ;sort.c: 722: break;
 20654                           
 20655                           ;sort.c: 721: default:
 20656                           
 20657                           ; BSR set to: 0
 20658                           ;sort.c: 718: }
 20659                           ;sort.c: 719: break;
 20660  004114  0012               	return	
 20661  004116                     i2l10524:
 20662  004116  C071  F009         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 20663  00411A  C072  F00A         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 20664                           
 20665                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 20666                           ; Switch size 1, requested type "space"
 20667                           ; Number of cases is 2, Range of values is 4 to 5
 20668                           ; switch strategies available:
 20669                           ; Name         Instructions Cycles
 20670                           ; simple_byte            7     4 (average)
 20671                           ;	Chosen strategy is simple_byte
 20672  00411E  500A               	movf	??_updateServoStates+1,w,c
 20673  004120  0A04               	xorlw	4	; case 4
 20674  004122  B4D8               	btfsc	status,2,c
 20675  004124  D004               	goto	i2l11176
 20676  004126  0A01               	xorlw	1	; case 5
 20677  004128  A4D8               	btfss	status,2,c
 20678  00412A  0012               	return	
 20679  00412C  D008               	goto	i2l11178
 20680  00412E                     i2l11176:
 20681                           
 20682                           ; Switch size 1, requested type "space"
 20683                           ; Number of cases is 2, Range of values is 26 to 236
 20684                           ; switch strategies available:
 20685                           ; Name         Instructions Cycles
 20686                           ; simple_byte            7     4 (average)
 20687                           ;	Chosen strategy is simple_byte
 20688  00412E  5009               	movf	??_updateServoStates,w,c
 20689  004130  0A1A               	xorlw	26	; case 26
 20690  004132  B4D8               	btfsc	status,2,c
 20691  004134  D7C5               	goto	i2l10510
 20692  004136  0AF6               	xorlw	246	; case 236
 20693  004138  A4D8               	btfss	status,2,c
 20694  00413A  0012               	return	
 20695  00413C  D79B               	goto	i2l10498
 20696  00413E                     i2l11178:
 20697                           
 20698                           ; Switch size 1, requested type "space"
 20699                           ; Number of cases is 1, Range of values is 110 to 110
 20700                           ; switch strategies available:
 20701                           ; Name         Instructions Cycles
 20702                           ; simple_byte            4     3 (average)
 20703                           ;	Chosen strategy is simple_byte
 20704  00413E  5009               	movf	??_updateServoStates,w,c
 20705  004140  0A6E               	xorlw	110	; case 110
 20706  004142  A4D8               	btfss	status,2,c
 20707  004144  0012               	return	
 20708  004146  D7A9               	goto	i2l10504
 20709  004148                     __end_of_updateServoStates:
 20710                           	opt stack 0
 20711                           pclatu	equ	0xFFB
 20712                           pclath	equ	0xFFA
 20713                           tblptru	equ	0xFF8
 20714                           tblptrh	equ	0xFF7
 20715                           tblptrl	equ	0xFF6
 20716                           tablat	equ	0xFF5
 20717                           prodh	equ	0xFF4
 20718                           prodl	equ	0xFF3
 20719                           intcon	equ	0xFF2
 20720                           intcon2	equ	0xFF1
 20721                           intcon3	equ	0xFF0
 20722                           indf0	equ	0xFEF
 20723                           postinc0	equ	0xFEE
 20724                           fsr0h	equ	0xFEA
 20725                           fsr0l	equ	0xFE9
 20726                           wreg	equ	0xFE8
 20727                           postdec1	equ	0xFE5
 20728                           fsr1h	equ	0xFE2
 20729                           fsr1l	equ	0xFE1
 20730                           indf2	equ	0xFDF
 20731                           postinc2	equ	0xFDE
 20732                           postdec2	equ	0xFDD
 20733                           fsr2h	equ	0xFDA
 20734                           fsr2l	equ	0xFD9
 20735                           status	equ	0xFD8
 20736                           
 20737 ;; *************** function i2_updateServoPosition *****************
 20738 ;; Defined at:
 20739 ;;		line 643 in file "sort.c"
 20740 ;; Parameters:    Size  Location     Type
 20741 ;;  time_us         2    0[COMRAM] int 
 20742 ;;  timer           2    2[COMRAM] int 
 20743 ;; Auto vars:     Size  Location     Type
 20744 ;;  updateServoP    2    6[COMRAM] unsigned int 
 20745 ;; Return value:  Size  Location     Type
 20746 ;;                  1    wreg      void 
 20747 ;; Registers used:
 20748 ;;		wreg, status,2, status,0
 20749 ;; Tracked objects:
 20750 ;;		On entry : 0/0
 20751 ;;		On exit  : 0/0
 20752 ;;		Unchanged: 0/0
 20753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20754 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20755 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20756 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20757 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20758 ;;Total ram usage:        8 bytes
 20759 ;; Hardware stack levels used:    1
 20760 ;; This function calls:
 20761 ;;		Nothing
 20762 ;; This function is called by:
 20763 ;;		_updateServoStates
 20764 ;; This function uses a non-reentrant model
 20765 ;;
 20766                           
 20767                           	psect	text66
 20768  0055B8                     __ptext66:
 20769                           	opt stack 0
 20770  0055B8                     i2_updateServoPosition:
 20771                           	opt stack 22
 20772                           
 20773                           ;sort.c: 644: unsigned int my_time = 65535 - time_us;
 20774                           
 20775                           ;incstack = 0
 20776  0055B8  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 20777  0055BC  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 20778  0055C0  1E05               	comf	??i2_updateServoPosition,f,c
 20779  0055C2  1E06               	comf	??i2_updateServoPosition+1,f,c
 20780  0055C4  4A05               	infsnz	??i2_updateServoPosition,f,c
 20781  0055C6  2A06               	incf	??i2_updateServoPosition+1,f,c
 20782  0055C8  0EFF               	movlw	255
 20783  0055CA  2405               	addwf	??i2_updateServoPosition,w,c
 20784  0055CC  6E07               	movwf	i2updateServoPosition@my_time,c
 20785  0055CE  0EFF               	movlw	255
 20786  0055D0  2006               	addwfc	??i2_updateServoPosition+1,w,c
 20787  0055D2  6E08               	movwf	i2updateServoPosition@my_time+1,c
 20788                           
 20789                           ;sort.c: 645: switch(timer){
 20790  0055D4  D019               	goto	i2l9624
 20791  0055D6                     i2l9618:
 20792                           
 20793                           ;sort.c: 647: servoTimes[0] = my_time >> 8;
 20794  0055D6  5008               	movf	i2updateServoPosition@my_time+1,w,c
 20795  0055D8  0101               	movlb	1	; () banked
 20796  0055DA  6F1C               	movwf	_servoTimes& (0+255),b
 20797  0055DC  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 20798                           
 20799                           ;sort.c: 648: servoTimes[1] = my_time & 0xFF;
 20800  0055DE  5007               	movf	i2updateServoPosition@my_time,w,c
 20801  0055E0  0101               	movlb	1	; () banked
 20802  0055E2  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 20803  0055E4  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 20804                           
 20805                           ; BSR set to: 1
 20806                           ;sort.c: 650: pan_servo_state = time_us;
 20807  0055E6  C001  F06B         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 20808  0055EA  C002  F06C         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 20809  0055EE                     i2l963:
 20810                           
 20811                           ;sort.c: 652: servoTimes[2] = my_time >> 8;
 20812  0055EE  5008               	movf	i2updateServoPosition@my_time+1,w,c
 20813  0055F0  0101               	movlb	1	; () banked
 20814  0055F2  6F20               	movwf	(_servoTimes+4)& (0+255),b
 20815  0055F4  6B21               	clrf	(_servoTimes+5)& (0+255),b
 20816                           
 20817                           ;sort.c: 653: servoTimes[3] = my_time & 0xFF;
 20818  0055F6  5007               	movf	i2updateServoPosition@my_time,w,c
 20819  0055F8  0101               	movlb	1	; () banked
 20820  0055FA  6F22               	movwf	(_servoTimes+6)& (0+255),b
 20821  0055FC  6B23               	clrf	(_servoTimes+7)& (0+255),b
 20822                           
 20823                           ; BSR set to: 1
 20824                           ;sort.c: 655: tilt_servo_state = time_us;
 20825  0055FE  C001  F071         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 20826  005602  C002  F072         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 20827                           
 20828                           ;sort.c: 656: }
 20829  005606  0012               	return	
 20830  005608                     i2l9624:
 20831  005608  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 20832  00560C  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 20833                           
 20834                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20835                           ; Switch size 1, requested type "space"
 20836                           ; Number of cases is 1, Range of values is 0 to 0
 20837                           ; switch strategies available:
 20838                           ; Name         Instructions Cycles
 20839                           ; simple_byte            4     3 (average)
 20840                           ;	Chosen strategy is simple_byte
 20841  005610  5006               	movf	??i2_updateServoPosition+1,w,c
 20842  005612  0A00               	xorlw	0	; case 0
 20843  005614  A4D8               	btfss	status,2,c
 20844  005616  0012               	return	
 20845                           
 20846                           ; Switch size 1, requested type "space"
 20847                           ; Number of cases is 2, Range of values is 1 to 3
 20848                           ; switch strategies available:
 20849                           ; Name         Instructions Cycles
 20850                           ; simple_byte            7     4 (average)
 20851                           ;	Chosen strategy is simple_byte
 20852  005618  5005               	movf	??i2_updateServoPosition,w,c
 20853  00561A  0A01               	xorlw	1	; case 1
 20854  00561C  B4D8               	btfsc	status,2,c
 20855  00561E  D7DB               	goto	i2l9618
 20856  005620  0A02               	xorlw	2	; case 3
 20857  005622  A4D8               	btfss	status,2,c
 20858  005624  0012               	return	
 20859  005626  D7E3               	goto	i2l963
 20860  005628                     __end_ofi2_updateServoPosition:
 20861                           	opt stack 0
 20862                           pclatu	equ	0xFFB
 20863                           pclath	equ	0xFFA
 20864                           tblptru	equ	0xFF8
 20865                           tblptrh	equ	0xFF7
 20866                           tblptrl	equ	0xFF6
 20867                           tablat	equ	0xFF5
 20868                           prodh	equ	0xFF4
 20869                           prodl	equ	0xFF3
 20870                           intcon	equ	0xFF2
 20871                           intcon2	equ	0xFF1
 20872                           intcon3	equ	0xFF0
 20873                           indf0	equ	0xFEF
 20874                           postinc0	equ	0xFEE
 20875                           fsr0h	equ	0xFEA
 20876                           fsr0l	equ	0xFE9
 20877                           wreg	equ	0xFE8
 20878                           postdec1	equ	0xFE5
 20879                           fsr1h	equ	0xFE2
 20880                           fsr1l	equ	0xFE1
 20881                           indf2	equ	0xFDF
 20882                           postinc2	equ	0xFDE
 20883                           postdec2	equ	0xFDD
 20884                           fsr2h	equ	0xFDA
 20885                           fsr2l	equ	0xFD9
 20886                           status	equ	0xFD8
 20887                           
 20888 ;; *************** function _updateMenu *****************
 20889 ;; Defined at:
 20890 ;;		line 216 in file "UI.c"
 20891 ;; Parameters:    Size  Location     Type
 20892 ;;		None
 20893 ;; Auto vars:     Size  Location     Type
 20894 ;;		None
 20895 ;; Return value:  Size  Location     Type
 20896 ;;                  1    wreg      void 
 20897 ;; Registers used:
 20898 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20899 ;; Tracked objects:
 20900 ;;		On entry : 0/0
 20901 ;;		On exit  : 0/0
 20902 ;;		Unchanged: 0/0
 20903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20906 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20907 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20908 ;;Total ram usage:        2 bytes
 20909 ;; Hardware stack levels used:    1
 20910 ;; Hardware stack levels required when called:    5
 20911 ;; This function calls:
 20912 ;;		_change_state_to_logs_11
 20913 ;;		_change_state_to_logs_12
 20914 ;;		_change_state_to_logs_22
 20915 ;;		_change_state_to_logs_23
 20916 ;;		_change_state_to_logs_33
 20917 ;;		_change_state_to_logs_34
 20918 ;;		_change_state_to_menu_11
 20919 ;;		_change_state_to_menu_23
 20920 ;;		_dispLogs
 20921 ;;		_inputHandler
 20922 ;;		i2_change_state_to_menu_12
 20923 ;;		i2_change_state_to_menu_22
 20924 ;;		i2_change_state_to_menu_start
 20925 ;; This function is called by:
 20926 ;;		_handler
 20927 ;; This function uses a non-reentrant model
 20928 ;;
 20929                           
 20930                           	psect	text67
 20931  0036AC                     __ptext67:
 20932                           	opt stack 0
 20933  0036AC                     _updateMenu:
 20934                           	opt stack 18
 20935                           
 20936                           ;UI.c: 217: up = 0; down = 0; enter = 0; back = 0;
 20937                           
 20938                           ;incstack = 0
 20939  0036AC  0E00               	movlw	0
 20940  0036AE  6E76               	movwf	_up+1,c
 20941  0036B0  0E00               	movlw	0
 20942  0036B2  6E75               	movwf	_up,c
 20943  0036B4  0E00               	movlw	0
 20944  0036B6  6E64               	movwf	_down+1,c
 20945  0036B8  0E00               	movlw	0
 20946  0036BA  6E63               	movwf	_down,c
 20947  0036BC  0E00               	movlw	0
 20948  0036BE  6E66               	movwf	_enter+1,c
 20949  0036C0  0E00               	movlw	0
 20950  0036C2  6E65               	movwf	_enter,c
 20951  0036C4  0E00               	movlw	0
 20952  0036C6  6E5A               	movwf	_back+1,c
 20953  0036C8  0E00               	movlw	0
 20954  0036CA  6E59               	movwf	_back,c
 20955                           
 20956                           ;UI.c: 218: (INTCONbits.GIE = 0);
 20957  0036CC  9EF2               	bcf	intcon,7,c	;volatile
 20958                           
 20959                           ;UI.c: 220: if (inputHandler()
 20960                           ;UI.c: 223: ){
 20961  0036CE  ECCA  F01E         	call	_inputHandler	;wreg free
 20962  0036D2  502A               	movf	?_inputHandler,w,c
 20963  0036D4  102B               	iorwf	?_inputHandler+1,w,c
 20964  0036D6  A4D8               	btfss	status,2,c
 20965  0036D8  D112               	goto	i2l10186
 20966  0036DA  D146               	goto	i2l275
 20967  0036DC                     i2l10038:
 20968                           
 20969                           ;UI.c: 227: change_state_to_menu_11();
 20970  0036DC  EC8E  F02E         	call	_change_state_to_menu_11	;wreg free
 20971                           
 20972                           ;UI.c: 228: break;
 20973  0036E0  D143               	goto	i2l275
 20974  0036E2                     i2l10040:
 20975                           
 20976                           ;UI.c: 231: if(up){
 20977  0036E2  5075               	movf	_up,w,c
 20978  0036E4  1076               	iorwf	_up+1,w,c
 20979  0036E6  B4D8               	btfsc	status,2,c
 20980  0036E8  D003               	goto	i2l10044
 20981                           
 20982                           ;UI.c: 232: change_state_to_menu_23();
 20983  0036EA  EC76  F02E         	call	_change_state_to_menu_23	;wreg free
 20984                           
 20985                           ;UI.c: 233: }
 20986  0036EE  D13C               	goto	i2l275
 20987  0036F0                     i2l10044:
 20988                           
 20989                           ;UI.c: 234: else if(down){
 20990  0036F0  5063               	movf	_down,w,c
 20991  0036F2  1064               	iorwf	_down+1,w,c
 20992  0036F4  B4D8               	btfsc	status,2,c
 20993  0036F6  D003               	goto	i2l10048
 20994                           
 20995                           ;UI.c: 235: change_state_to_menu_12();
 20996  0036F8  EC5E  F02E         	call	i2_change_state_to_menu_12	;wreg free
 20997                           
 20998                           ;UI.c: 236: }
 20999  0036FC  D135               	goto	i2l275
 21000  0036FE                     i2l10048:
 21001                           
 21002                           ;UI.c: 237: else if(enter){
 21003  0036FE  5065               	movf	_enter,w,c
 21004  003700  1066               	iorwf	_enter+1,w,c
 21005  003702  B4D8               	btfsc	status,2,c
 21006  003704  D131               	goto	i2l275
 21007                           
 21008                           ;UI.c: 238: change_state_to_menu_start();
 21009  003706  ECA1  F02F         	call	i2_change_state_to_menu_start	;wreg free
 21010                           
 21011                           ;UI.c: 239: }
 21012                           ;UI.c: 240: break;
 21013  00370A  D12E               	goto	i2l275
 21014  00370C                     i2l10052:
 21015                           
 21016                           ;UI.c: 243: if(up){
 21017  00370C  5075               	movf	_up,w,c
 21018  00370E  1076               	iorwf	_up+1,w,c
 21019  003710  B4D8               	btfsc	status,2,c
 21020  003712  D003               	goto	i2l10056
 21021                           
 21022                           ;UI.c: 244: change_state_to_menu_11();
 21023  003714  EC8E  F02E         	call	_change_state_to_menu_11	;wreg free
 21024                           
 21025                           ;UI.c: 245: }
 21026  003718  D127               	goto	i2l275
 21027  00371A                     i2l10056:
 21028                           
 21029                           ;UI.c: 246: else if(down){
 21030  00371A  5063               	movf	_down,w,c
 21031  00371C  1064               	iorwf	_down+1,w,c
 21032  00371E  B4D8               	btfsc	status,2,c
 21033  003720  D011               	goto	i2l10072
 21034                           
 21035                           ;UI.c: 247: change_state_to_menu_23();
 21036  003722  EC76  F02E         	call	_change_state_to_menu_23	;wreg free
 21037                           
 21038                           ;UI.c: 248: }
 21039  003726  D120               	goto	i2l275
 21040  003728                     i2l10064:
 21041                           
 21042                           ;UI.c: 255: if(up){
 21043  003728  5075               	movf	_up,w,c
 21044  00372A  1076               	iorwf	_up+1,w,c
 21045  00372C  B4D8               	btfsc	status,2,c
 21046  00372E  D003               	goto	i2l10068
 21047                           
 21048                           ;UI.c: 256: change_state_to_menu_11();
 21049  003730  EC8E  F02E         	call	_change_state_to_menu_11	;wreg free
 21050                           
 21051                           ;UI.c: 257: }
 21052  003734  D119               	goto	i2l275
 21053  003736                     i2l10068:
 21054                           
 21055                           ;UI.c: 258: else if(down){
 21056  003736  5063               	movf	_down,w,c
 21057  003738  1064               	iorwf	_down+1,w,c
 21058  00373A  B4D8               	btfsc	status,2,c
 21059  00373C  D003               	goto	i2l10072
 21060                           
 21061                           ;UI.c: 259: change_state_to_menu_23();
 21062  00373E  EC76  F02E         	call	_change_state_to_menu_23	;wreg free
 21063                           
 21064                           ;UI.c: 260: }
 21065  003742  D112               	goto	i2l275
 21066  003744                     i2l10072:
 21067                           
 21068                           ;UI.c: 261: else if(enter){
 21069  003744  5065               	movf	_enter,w,c
 21070  003746  1066               	iorwf	_enter+1,w,c
 21071  003748  B4D8               	btfsc	status,2,c
 21072  00374A  D10E               	goto	i2l275
 21073                           
 21074                           ;UI.c: 262: machine_state = Sorting_state;
 21075  00374C  0E01               	movlw	1
 21076  00374E  0100               	movlb	0	; () banked
 21077  003750  6FFC               	movwf	_machine_state& (0+255),b
 21078                           
 21079                           ; BSR set to: 0
 21080                           ;UI.c: 263: }
 21081                           ;UI.c: 264: break;
 21082                           
 21083                           ; BSR set to: 0
 21084                           
 21085                           ; BSR set to: 0
 21086  003752  D10A               	goto	i2l275
 21087  003754                     i2l10076:
 21088                           
 21089                           ;UI.c: 267: if(up){
 21090  003754  5075               	movf	_up,w,c
 21091  003756  1076               	iorwf	_up+1,w,c
 21092  003758  B4D8               	btfsc	status,2,c
 21093  00375A  D003               	goto	i2l10080
 21094                           
 21095                           ;UI.c: 268: change_state_to_menu_22();
 21096  00375C  EC46  F02E         	call	i2_change_state_to_menu_22	;wreg free
 21097                           
 21098                           ;UI.c: 269: }
 21099  003760  D103               	goto	i2l275
 21100  003762                     i2l10080:
 21101                           
 21102                           ;UI.c: 270: else if(down){
 21103  003762  5063               	movf	_down,w,c
 21104  003764  1064               	iorwf	_down+1,w,c
 21105  003766  B4D8               	btfsc	status,2,c
 21106  003768  D003               	goto	i2l10084
 21107                           
 21108                           ;UI.c: 271: change_state_to_menu_11();
 21109  00376A  EC8E  F02E         	call	_change_state_to_menu_11	;wreg free
 21110                           
 21111                           ;UI.c: 272: }
 21112  00376E  D0FC               	goto	i2l275
 21113  003770                     i2l10084:
 21114                           
 21115                           ;UI.c: 273: else if(enter){
 21116  003770  5065               	movf	_enter,w,c
 21117  003772  1066               	iorwf	_enter+1,w,c
 21118  003774  B4D8               	btfsc	status,2,c
 21119  003776  D0F8               	goto	i2l275
 21120                           
 21121                           ;UI.c: 274: change_state_to_logs_11();
 21122  003778  EC06  F02F         	call	_change_state_to_logs_11	;wreg free
 21123                           
 21124                           ;UI.c: 275: }
 21125                           ;UI.c: 276: break;
 21126  00377C  D0F5               	goto	i2l275
 21127  00377E                     i2l10088:
 21128                           
 21129                           ;UI.c: 279: if(up){
 21130  00377E  5075               	movf	_up,w,c
 21131  003780  1076               	iorwf	_up+1,w,c
 21132  003782  B4D8               	btfsc	status,2,c
 21133  003784  D003               	goto	i2l10092
 21134                           
 21135                           ;UI.c: 280: change_state_to_logs_34();
 21136  003786  ECA6  F02E         	call	_change_state_to_logs_34	;wreg free
 21137                           
 21138                           ;UI.c: 281: }
 21139  00378A  D0EE               	goto	i2l275
 21140  00378C                     i2l10092:
 21141                           
 21142                           ;UI.c: 282: else if(down){
 21143  00378C  5063               	movf	_down,w,c
 21144  00378E  1064               	iorwf	_down+1,w,c
 21145  003790  B4D8               	btfsc	status,2,c
 21146  003792  D003               	goto	i2l10096
 21147                           
 21148                           ;UI.c: 283: change_state_to_logs_12();
 21149  003794  ECEE  F02E         	call	_change_state_to_logs_12	;wreg free
 21150                           
 21151                           ;UI.c: 284: }
 21152  003798  D0E7               	goto	i2l275
 21153  00379A                     i2l10096:
 21154                           
 21155                           ;UI.c: 285: else if(enter){
 21156  00379A  5065               	movf	_enter,w,c
 21157  00379C  1066               	iorwf	_enter+1,w,c
 21158  00379E  B4D8               	btfsc	status,2,c
 21159  0037A0  D007               	goto	i2l10100
 21160                           
 21161                           ;UI.c: 286: dispLogs(1);
 21162  0037A2  0E00               	movlw	0
 21163  0037A4  6E13               	movwf	dispLogs@myLog+1,c
 21164  0037A6  0E01               	movlw	1
 21165  0037A8  6E12               	movwf	dispLogs@myLog,c
 21166  0037AA  ECDB  F02F         	call	_dispLogs	;wreg free
 21167                           
 21168                           ;UI.c: 287: }
 21169  0037AE  D0DC               	goto	i2l275
 21170  0037B0                     i2l10100:
 21171                           
 21172                           ;UI.c: 288: else if(back){
 21173  0037B0  5059               	movf	_back,w,c
 21174  0037B2  105A               	iorwf	_back+1,w,c
 21175  0037B4  B4D8               	btfsc	status,2,c
 21176  0037B6  D0D8               	goto	i2l275
 21177                           
 21178                           ;UI.c: 289: change_state_to_menu_23();
 21179  0037B8  EC76  F02E         	call	_change_state_to_menu_23	;wreg free
 21180                           
 21181                           ;UI.c: 290: }
 21182                           ;UI.c: 291: break;
 21183  0037BC  D0D5               	goto	i2l275
 21184  0037BE                     i2l10104:
 21185                           
 21186                           ;UI.c: 294: if(up){
 21187  0037BE  5075               	movf	_up,w,c
 21188  0037C0  1076               	iorwf	_up+1,w,c
 21189  0037C2  B4D8               	btfsc	status,2,c
 21190  0037C4  D003               	goto	i2l10108
 21191                           
 21192                           ;UI.c: 295: change_state_to_logs_11();
 21193  0037C6  EC06  F02F         	call	_change_state_to_logs_11	;wreg free
 21194                           
 21195                           ;UI.c: 296: }
 21196  0037CA  D0CE               	goto	i2l275
 21197  0037CC                     i2l10108:
 21198                           
 21199                           ;UI.c: 297: else if(down){
 21200  0037CC  5063               	movf	_down,w,c
 21201  0037CE  1064               	iorwf	_down+1,w,c
 21202  0037D0  B4D8               	btfsc	status,2,c
 21203  0037D2  D003               	goto	i2l10112
 21204                           
 21205                           ;UI.c: 298: change_state_to_logs_23();
 21206  0037D4  EC35  F02F         	call	_change_state_to_logs_23	;wreg free
 21207                           
 21208                           ;UI.c: 299: }
 21209  0037D8  D0C7               	goto	i2l275
 21210  0037DA                     i2l10112:
 21211                           
 21212                           ;UI.c: 300: else if(enter){
 21213  0037DA  5065               	movf	_enter,w,c
 21214  0037DC  1066               	iorwf	_enter+1,w,c
 21215  0037DE  B4D8               	btfsc	status,2,c
 21216  0037E0  D007               	goto	i2l10116
 21217                           
 21218                           ;UI.c: 301: dispLogs(2);
 21219  0037E2  0E00               	movlw	0
 21220  0037E4  6E13               	movwf	dispLogs@myLog+1,c
 21221  0037E6  0E02               	movlw	2
 21222  0037E8  6E12               	movwf	dispLogs@myLog,c
 21223  0037EA  ECDB  F02F         	call	_dispLogs	;wreg free
 21224                           
 21225                           ;UI.c: 302: }
 21226  0037EE  D0BC               	goto	i2l275
 21227  0037F0                     i2l10116:
 21228                           
 21229                           ;UI.c: 303: else if(back){
 21230  0037F0  5059               	movf	_back,w,c
 21231  0037F2  105A               	iorwf	_back+1,w,c
 21232  0037F4  B4D8               	btfsc	status,2,c
 21233  0037F6  D0B8               	goto	i2l275
 21234                           
 21235                           ;UI.c: 304: change_state_to_menu_23();
 21236  0037F8  EC76  F02E         	call	_change_state_to_menu_23	;wreg free
 21237                           
 21238                           ;UI.c: 305: }
 21239                           ;UI.c: 306: break;
 21240  0037FC  D0B5               	goto	i2l275
 21241  0037FE                     i2l10120:
 21242                           
 21243                           ;UI.c: 309: if(up){
 21244  0037FE  5075               	movf	_up,w,c
 21245  003800  1076               	iorwf	_up+1,w,c
 21246  003802  B4D8               	btfsc	status,2,c
 21247  003804  D003               	goto	i2l10124
 21248                           
 21249                           ;UI.c: 310: change_state_to_logs_11();
 21250  003806  EC06  F02F         	call	_change_state_to_logs_11	;wreg free
 21251                           
 21252                           ;UI.c: 311: }
 21253  00380A  D0AE               	goto	i2l275
 21254  00380C                     i2l10124:
 21255                           
 21256                           ;UI.c: 312: else if(down){
 21257  00380C  5063               	movf	_down,w,c
 21258  00380E  1064               	iorwf	_down+1,w,c
 21259  003810  B4D8               	btfsc	status,2,c
 21260  003812  D003               	goto	i2l10128
 21261                           
 21262                           ;UI.c: 313: change_state_to_logs_23();
 21263  003814  EC35  F02F         	call	_change_state_to_logs_23	;wreg free
 21264                           
 21265                           ;UI.c: 314: }
 21266  003818  D0A7               	goto	i2l275
 21267  00381A                     i2l10128:
 21268                           
 21269                           ;UI.c: 315: else if(enter){
 21270  00381A  5065               	movf	_enter,w,c
 21271  00381C  1066               	iorwf	_enter+1,w,c
 21272  00381E  B4D8               	btfsc	status,2,c
 21273  003820  D007               	goto	i2l10132
 21274                           
 21275                           ;UI.c: 316: dispLogs(2);
 21276  003822  0E00               	movlw	0
 21277  003824  6E13               	movwf	dispLogs@myLog+1,c
 21278  003826  0E02               	movlw	2
 21279  003828  6E12               	movwf	dispLogs@myLog,c
 21280  00382A  ECDB  F02F         	call	_dispLogs	;wreg free
 21281                           
 21282                           ;UI.c: 317: }
 21283  00382E  D09C               	goto	i2l275
 21284  003830                     i2l10132:
 21285                           
 21286                           ;UI.c: 318: else if(back){
 21287  003830  5059               	movf	_back,w,c
 21288  003832  105A               	iorwf	_back+1,w,c
 21289  003834  B4D8               	btfsc	status,2,c
 21290  003836  D098               	goto	i2l275
 21291                           
 21292                           ;UI.c: 319: change_state_to_menu_23();
 21293  003838  EC76  F02E         	call	_change_state_to_menu_23	;wreg free
 21294                           
 21295                           ;UI.c: 320: }
 21296                           ;UI.c: 321: break;
 21297  00383C  D095               	goto	i2l275
 21298  00383E                     i2l10136:
 21299                           
 21300                           ;UI.c: 324: if(up){
 21301  00383E  5075               	movf	_up,w,c
 21302  003840  1076               	iorwf	_up+1,w,c
 21303  003842  B4D8               	btfsc	status,2,c
 21304  003844  D003               	goto	i2l10140
 21305                           
 21306                           ;UI.c: 325: change_state_to_logs_22();
 21307  003846  ECD6  F02E         	call	_change_state_to_logs_22	;wreg free
 21308                           
 21309                           ;UI.c: 326: }
 21310  00384A  D08E               	goto	i2l275
 21311  00384C                     i2l10140:
 21312                           
 21313                           ;UI.c: 327: else if(down){
 21314  00384C  5063               	movf	_down,w,c
 21315  00384E  1064               	iorwf	_down+1,w,c
 21316  003850  B4D8               	btfsc	status,2,c
 21317  003852  D003               	goto	i2l10144
 21318                           
 21319                           ;UI.c: 328: change_state_to_logs_34();
 21320  003854  ECA6  F02E         	call	_change_state_to_logs_34	;wreg free
 21321                           
 21322                           ;UI.c: 329: }
 21323  003858  D087               	goto	i2l275
 21324  00385A                     i2l10144:
 21325                           
 21326                           ;UI.c: 330: else if(enter){
 21327  00385A  5065               	movf	_enter,w,c
 21328  00385C  1066               	iorwf	_enter+1,w,c
 21329  00385E  B4D8               	btfsc	status,2,c
 21330  003860  D007               	goto	i2l10148
 21331                           
 21332                           ;UI.c: 331: dispLogs(3);
 21333  003862  0E00               	movlw	0
 21334  003864  6E13               	movwf	dispLogs@myLog+1,c
 21335  003866  0E03               	movlw	3
 21336  003868  6E12               	movwf	dispLogs@myLog,c
 21337  00386A  ECDB  F02F         	call	_dispLogs	;wreg free
 21338                           
 21339                           ;UI.c: 332: }
 21340  00386E  D07C               	goto	i2l275
 21341  003870                     i2l10148:
 21342                           
 21343                           ;UI.c: 333: else if(back){
 21344  003870  5059               	movf	_back,w,c
 21345  003872  105A               	iorwf	_back+1,w,c
 21346  003874  B4D8               	btfsc	status,2,c
 21347  003876  D078               	goto	i2l275
 21348                           
 21349                           ;UI.c: 334: change_state_to_menu_23();
 21350  003878  EC76  F02E         	call	_change_state_to_menu_23	;wreg free
 21351                           
 21352                           ;UI.c: 335: }
 21353                           ;UI.c: 336: break;
 21354  00387C  D075               	goto	i2l275
 21355  00387E                     i2l10152:
 21356                           
 21357                           ;UI.c: 339: if(up){
 21358  00387E  5075               	movf	_up,w,c
 21359  003880  1076               	iorwf	_up+1,w,c
 21360  003882  B4D8               	btfsc	status,2,c
 21361  003884  D003               	goto	i2l10156
 21362                           
 21363                           ;UI.c: 340: change_state_to_logs_22();
 21364  003886  ECD6  F02E         	call	_change_state_to_logs_22	;wreg free
 21365                           
 21366                           ;UI.c: 341: }
 21367  00388A  D06E               	goto	i2l275
 21368  00388C                     i2l10156:
 21369                           
 21370                           ;UI.c: 342: else if(down){
 21371  00388C  5063               	movf	_down,w,c
 21372  00388E  1064               	iorwf	_down+1,w,c
 21373  003890  B4D8               	btfsc	status,2,c
 21374  003892  D003               	goto	i2l10160
 21375                           
 21376                           ;UI.c: 343: change_state_to_logs_34();
 21377  003894  ECA6  F02E         	call	_change_state_to_logs_34	;wreg free
 21378                           
 21379                           ;UI.c: 344: }
 21380  003898  D067               	goto	i2l275
 21381  00389A                     i2l10160:
 21382                           
 21383                           ;UI.c: 345: else if(enter){
 21384  00389A  5065               	movf	_enter,w,c
 21385  00389C  1066               	iorwf	_enter+1,w,c
 21386  00389E  B4D8               	btfsc	status,2,c
 21387  0038A0  D007               	goto	i2l10164
 21388                           
 21389                           ;UI.c: 346: dispLogs(3);
 21390  0038A2  0E00               	movlw	0
 21391  0038A4  6E13               	movwf	dispLogs@myLog+1,c
 21392  0038A6  0E03               	movlw	3
 21393  0038A8  6E12               	movwf	dispLogs@myLog,c
 21394  0038AA  ECDB  F02F         	call	_dispLogs	;wreg free
 21395                           
 21396                           ;UI.c: 347: }
 21397  0038AE  D05C               	goto	i2l275
 21398  0038B0                     i2l10164:
 21399                           
 21400                           ;UI.c: 348: else if(back){
 21401  0038B0  5059               	movf	_back,w,c
 21402  0038B2  105A               	iorwf	_back+1,w,c
 21403  0038B4  B4D8               	btfsc	status,2,c
 21404  0038B6  D058               	goto	i2l275
 21405                           
 21406                           ;UI.c: 349: change_state_to_menu_23();
 21407  0038B8  EC76  F02E         	call	_change_state_to_menu_23	;wreg free
 21408                           
 21409                           ;UI.c: 350: }
 21410                           ;UI.c: 351: break;
 21411  0038BC  D055               	goto	i2l275
 21412  0038BE                     i2l10168:
 21413                           
 21414                           ;UI.c: 354: if(up){
 21415  0038BE  5075               	movf	_up,w,c
 21416  0038C0  1076               	iorwf	_up+1,w,c
 21417  0038C2  B4D8               	btfsc	status,2,c
 21418  0038C4  D003               	goto	i2l10172
 21419                           
 21420                           ;UI.c: 355: change_state_to_logs_33();
 21421  0038C6  ECBE  F02E         	call	_change_state_to_logs_33	;wreg free
 21422                           
 21423                           ;UI.c: 356: }
 21424  0038CA  D04E               	goto	i2l275
 21425  0038CC                     i2l10172:
 21426                           
 21427                           ;UI.c: 357: else if(down){
 21428  0038CC  5063               	movf	_down,w,c
 21429  0038CE  1064               	iorwf	_down+1,w,c
 21430  0038D0  B4D8               	btfsc	status,2,c
 21431  0038D2  D003               	goto	i2l10176
 21432                           
 21433                           ;UI.c: 358: change_state_to_logs_11();
 21434  0038D4  EC06  F02F         	call	_change_state_to_logs_11	;wreg free
 21435                           
 21436                           ;UI.c: 359: }
 21437  0038D8  D047               	goto	i2l275
 21438  0038DA                     i2l10176:
 21439                           
 21440                           ;UI.c: 360: else if(enter){
 21441  0038DA  5065               	movf	_enter,w,c
 21442  0038DC  1066               	iorwf	_enter+1,w,c
 21443  0038DE  B4D8               	btfsc	status,2,c
 21444  0038E0  D007               	goto	i2l10180
 21445                           
 21446                           ;UI.c: 361: dispLogs(4);
 21447  0038E2  0E00               	movlw	0
 21448  0038E4  6E13               	movwf	dispLogs@myLog+1,c
 21449  0038E6  0E04               	movlw	4
 21450  0038E8  6E12               	movwf	dispLogs@myLog,c
 21451  0038EA  ECDB  F02F         	call	_dispLogs	;wreg free
 21452                           
 21453                           ;UI.c: 362: }
 21454  0038EE  D03C               	goto	i2l275
 21455  0038F0                     i2l10180:
 21456                           
 21457                           ;UI.c: 363: else if(back){
 21458  0038F0  5059               	movf	_back,w,c
 21459  0038F2  105A               	iorwf	_back+1,w,c
 21460  0038F4  B4D8               	btfsc	status,2,c
 21461  0038F6  D038               	goto	i2l275
 21462                           
 21463                           ;UI.c: 364: change_state_to_menu_23();
 21464  0038F8  EC76  F02E         	call	_change_state_to_menu_23	;wreg free
 21465                           
 21466                           ;UI.c: 370: }
 21467                           
 21468                           ;UI.c: 369: break;
 21469                           
 21470                           ;UI.c: 368: default:
 21471                           
 21472                           ;UI.c: 365: }
 21473                           ;UI.c: 366: break;
 21474  0038FC  D035               	goto	i2l275
 21475  0038FE                     i2l10186:
 21476  0038FE  C0E8  F043         	movff	_cur_state,??_updateMenu
 21477  003902  C0E9  F044         	movff	_cur_state+1,??_updateMenu+1
 21478                           
 21479                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 21480                           ; Switch size 1, requested type "space"
 21481                           ; Number of cases is 3, Range of values is 0 to 4
 21482                           ; switch strategies available:
 21483                           ; Name         Instructions Cycles
 21484                           ; simple_byte           10     6 (average)
 21485                           ;	Chosen strategy is simple_byte
 21486  003906  5044               	movf	??_updateMenu+1,w,c
 21487  003908  0A00               	xorlw	0	; case 0
 21488  00390A  B4D8               	btfsc	status,2,c
 21489  00390C  D007               	goto	i2l11182
 21490  00390E  0A03               	xorlw	3	; case 3
 21491  003910  B4D8               	btfsc	status,2,c
 21492  003912  D015               	goto	i2l11184
 21493  003914  0A07               	xorlw	7	; case 4
 21494  003916  B4D8               	btfsc	status,2,c
 21495  003918  D020               	goto	i2l11186
 21496  00391A  D026               	goto	i2l275
 21497  00391C                     i2l11182:
 21498                           
 21499                           ; Switch size 1, requested type "space"
 21500                           ; Number of cases is 5, Range of values is 0 to 23
 21501                           ; switch strategies available:
 21502                           ; Name         Instructions Cycles
 21503                           ; simple_byte           16     9 (average)
 21504                           ;	Chosen strategy is simple_byte
 21505  00391C  5043               	movf	??_updateMenu,w,c
 21506  00391E  0A00               	xorlw	0	; case 0
 21507  003920  B4D8               	btfsc	status,2,c
 21508  003922  D6DC               	goto	i2l10038
 21509  003924  0A0B               	xorlw	11	; case 11
 21510  003926  B4D8               	btfsc	status,2,c
 21511  003928  D6DC               	goto	i2l10040
 21512  00392A  0A07               	xorlw	7	; case 12
 21513  00392C  B4D8               	btfsc	status,2,c
 21514  00392E  D6EE               	goto	i2l10052
 21515  003930  0A1A               	xorlw	26	; case 22
 21516  003932  B4D8               	btfsc	status,2,c
 21517  003934  D6F9               	goto	i2l10064
 21518  003936  0A01               	xorlw	1	; case 23
 21519  003938  B4D8               	btfsc	status,2,c
 21520  00393A  D70C               	goto	i2l10076
 21521  00393C  D015               	goto	i2l275
 21522  00393E                     i2l11184:
 21523                           
 21524                           ; Switch size 1, requested type "space"
 21525                           ; Number of cases is 4, Range of values is 243 to 255
 21526                           ; switch strategies available:
 21527                           ; Name         Instructions Cycles
 21528                           ; simple_byte           13     7 (average)
 21529                           ;	Chosen strategy is simple_byte
 21530  00393E  5043               	movf	??_updateMenu,w,c
 21531  003940  0AF3               	xorlw	243	; case 243
 21532  003942  B4D8               	btfsc	status,2,c
 21533  003944  D71C               	goto	i2l10088
 21534  003946  0A07               	xorlw	7	; case 244
 21535  003948  B4D8               	btfsc	status,2,c
 21536  00394A  D739               	goto	i2l10104
 21537  00394C  0A0A               	xorlw	10	; case 254
 21538  00394E  B4D8               	btfsc	status,2,c
 21539  003950  D756               	goto	i2l10120
 21540  003952  0A01               	xorlw	1	; case 255
 21541  003954  B4D8               	btfsc	status,2,c
 21542  003956  D773               	goto	i2l10136
 21543  003958  D007               	goto	i2l275
 21544  00395A                     i2l11186:
 21545                           
 21546                           ; Switch size 1, requested type "space"
 21547                           ; Number of cases is 2, Range of values is 9 to 10
 21548                           ; switch strategies available:
 21549                           ; Name         Instructions Cycles
 21550                           ; simple_byte            7     4 (average)
 21551                           ;	Chosen strategy is simple_byte
 21552  00395A  5043               	movf	??_updateMenu,w,c
 21553  00395C  0A09               	xorlw	9	; case 9
 21554  00395E  B4D8               	btfsc	status,2,c
 21555  003960  D78E               	goto	i2l10152
 21556  003962  0A03               	xorlw	3	; case 10
 21557  003964  B4D8               	btfsc	status,2,c
 21558  003966  D7AB               	goto	i2l10168
 21559  003968                     i2l275:
 21560                           
 21561                           ;UI.c: 371: }
 21562                           ;UI.c: 372: (INTCONbits.GIE = 1);
 21563  003968  8EF2               	bsf	intcon,7,c	;volatile
 21564  00396A  0012               	return		;funcret
 21565  00396C                     __end_of_updateMenu:
 21566                           	opt stack 0
 21567                           pclatu	equ	0xFFB
 21568                           pclath	equ	0xFFA
 21569                           tblptru	equ	0xFF8
 21570                           tblptrh	equ	0xFF7
 21571                           tblptrl	equ	0xFF6
 21572                           tablat	equ	0xFF5
 21573                           prodh	equ	0xFF4
 21574                           prodl	equ	0xFF3
 21575                           intcon	equ	0xFF2
 21576                           intcon2	equ	0xFF1
 21577                           intcon3	equ	0xFF0
 21578                           indf0	equ	0xFEF
 21579                           postinc0	equ	0xFEE
 21580                           fsr0h	equ	0xFEA
 21581                           fsr0l	equ	0xFE9
 21582                           wreg	equ	0xFE8
 21583                           postdec1	equ	0xFE5
 21584                           fsr1h	equ	0xFE2
 21585                           fsr1l	equ	0xFE1
 21586                           indf2	equ	0xFDF
 21587                           postinc2	equ	0xFDE
 21588                           postdec2	equ	0xFDD
 21589                           fsr2h	equ	0xFDA
 21590                           fsr2l	equ	0xFD9
 21591                           status	equ	0xFD8
 21592                           
 21593 ;; *************** function i2_change_state_to_menu_start *****************
 21594 ;; Defined at:
 21595 ;;		line 477 in file "UI.c"
 21596 ;; Parameters:    Size  Location     Type
 21597 ;;		None
 21598 ;; Auto vars:     Size  Location     Type
 21599 ;;		None
 21600 ;; Return value:  Size  Location     Type
 21601 ;;                  1    wreg      void 
 21602 ;; Registers used:
 21603 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21604 ;; Tracked objects:
 21605 ;;		On entry : 0/0
 21606 ;;		On exit  : 0/0
 21607 ;;		Unchanged: 0/0
 21608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21612 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21613 ;;Total ram usage:        0 bytes
 21614 ;; Hardware stack levels used:    1
 21615 ;; Hardware stack levels required when called:    4
 21616 ;; This function calls:
 21617 ;;		i2_lcdInst
 21618 ;;		i2_printRTC
 21619 ;;		i2_printf
 21620 ;; This function is called by:
 21621 ;;		_updateMenu
 21622 ;;		_handler
 21623 ;; This function uses a non-reentrant model
 21624 ;;
 21625                           
 21626                           	psect	text68
 21627  005F42                     __ptext68:
 21628                           	opt stack 0
 21629  005F42                     i2_change_state_to_menu_start:
 21630                           	opt stack 19
 21631                           
 21632                           ;UI.c: 478: cur_state = 0;
 21633                           
 21634                           ;incstack = 0
 21635  005F42  0E00               	movlw	0
 21636  005F44  0100               	movlb	0	; () banked
 21637  005F46  6FE9               	movwf	(_cur_state+1)& (0+255),b
 21638  005F48  0E00               	movlw	0
 21639  005F4A  6FE8               	movwf	_cur_state& (0+255),b
 21640                           
 21641                           ; BSR set to: 0
 21642                           ;UI.c: 480: lcdInst(0b10000000);;
 21643  005F4C  0E80               	movlw	128
 21644  005F4E  EC77  F030         	call	i2_lcdInst
 21645                           
 21646                           ;UI.c: 481: printRTC();
 21647  005F52  ECB6  F01C         	call	i2_printRTC	;wreg free
 21648                           
 21649                           ;UI.c: 482: lcdInst(0b11000000);;
 21650  005F56  0EC0               	movlw	192
 21651  005F58  EC77  F030         	call	i2_lcdInst
 21652                           
 21653                           ;UI.c: 483: printf("PUSH TO CONTINUE");
 21654  005F5C  0E06               	movlw	low STR_30
 21655  005F5E  6E0D               	movwf	i2printf@f,c
 21656  005F60  0EFE               	movlw	high STR_30
 21657  005F62  6E0E               	movwf	i2printf@f+1,c
 21658  005F64  ECB8  F016         	call	i2_printf	;wreg free
 21659  005F68  0012               	return		;funcret
 21660  005F6A                     __end_ofi2_change_state_to_menu_start:
 21661                           	opt stack 0
 21662                           pclatu	equ	0xFFB
 21663                           pclath	equ	0xFFA
 21664                           tblptru	equ	0xFF8
 21665                           tblptrh	equ	0xFF7
 21666                           tblptrl	equ	0xFF6
 21667                           tablat	equ	0xFF5
 21668                           prodh	equ	0xFF4
 21669                           prodl	equ	0xFF3
 21670                           intcon	equ	0xFF2
 21671                           intcon2	equ	0xFF1
 21672                           intcon3	equ	0xFF0
 21673                           indf0	equ	0xFEF
 21674                           postinc0	equ	0xFEE
 21675                           fsr0h	equ	0xFEA
 21676                           fsr0l	equ	0xFE9
 21677                           wreg	equ	0xFE8
 21678                           postdec1	equ	0xFE5
 21679                           fsr1h	equ	0xFE2
 21680                           fsr1l	equ	0xFE1
 21681                           indf2	equ	0xFDF
 21682                           postinc2	equ	0xFDE
 21683                           postdec2	equ	0xFDD
 21684                           fsr2h	equ	0xFDA
 21685                           fsr2l	equ	0xFD9
 21686                           status	equ	0xFD8
 21687                           
 21688 ;; *************** function i2_printRTC *****************
 21689 ;; Defined at:
 21690 ;;		line 63 in file "RTC.c"
 21691 ;; Parameters:    Size  Location     Type
 21692 ;;		None
 21693 ;; Auto vars:     Size  Location     Type
 21694 ;;  printRTC       14   44[COMRAM] int [7]
 21695 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 21696 ;;  printRTC        2   64[COMRAM] int 
 21697 ;;  printRTC        2   58[COMRAM] int 
 21698 ;; Return value:  Size  Location     Type
 21699 ;;                  1    wreg      void 
 21700 ;; Registers used:
 21701 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21702 ;; Tracked objects:
 21703 ;;		On entry : 0/0
 21704 ;;		On exit  : 0/0
 21705 ;;		Unchanged: 0/0
 21706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21708 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21709 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21710 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21711 ;;Total ram usage:       25 bytes
 21712 ;; Hardware stack levels used:    1
 21713 ;; Hardware stack levels required when called:    3
 21714 ;; This function calls:
 21715 ;;		i2_getRTC
 21716 ;;		i2_lcdInst
 21717 ;;		i2_printf
 21718 ;;		i2_strcpy
 21719 ;; This function is called by:
 21720 ;;		i2_change_state_to_menu_start
 21721 ;; This function uses a non-reentrant model
 21722 ;;
 21723                           
 21724                           	psect	text69
 21725  00396C                     __ptext69:
 21726                           	opt stack 0
 21727  00396C                     i2_printRTC:
 21728                           	opt stack 19
 21729                           
 21730                           ;RTC.c: 64: getRTC();
 21731                           
 21732                           ;incstack = 0
 21733  00396C  ECA3  F02A         	call	i2_getRTC	;wreg free
 21734                           
 21735                           ;RTC.c: 65: char month[] = "MMM";
 21736  003970  C153  F03D         	movff	printRTC@F3242,i2printRTC@month
 21737  003974  C154  F03E         	movff	printRTC@F3242+1,i2printRTC@month+1
 21738  003978  C155  F03F         	movff	printRTC@F3242+2,i2printRTC@month+2
 21739  00397C  C156  F040         	movff	printRTC@F3242+3,i2printRTC@month+3
 21740                           
 21741                           ;RTC.c: 66: int INT_time[7];
 21742                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 21743  003980  0E00               	movlw	0
 21744  003982  6E42               	movwf	i2printRTC@i+1,c
 21745  003984  0E00               	movlw	0
 21746  003986  6E41               	movwf	i2printRTC@i,c
 21747  003988  BE42               	btfsc	i2printRTC@i+1,7,c
 21748  00398A  D006               	goto	i2l7830
 21749  00398C  5042               	movf	i2printRTC@i+1,w,c
 21750  00398E  E135               	bnz	i2l634
 21751  003990  0E07               	movlw	7
 21752  003992  5C41               	subwf	i2printRTC@i,w,c
 21753  003994  B0D8               	btfsc	status,0,c
 21754  003996  D031               	goto	i2l634
 21755  003998                     i2l7830:
 21756                           
 21757                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 21758  003998  0E24               	movlw	low _time
 21759  00399A  2441               	addwf	i2printRTC@i,w,c
 21760  00399C  6ED9               	movwf	fsr2l,c
 21761  00399E  0E01               	movlw	high _time
 21762  0039A0  2042               	addwfc	i2printRTC@i+1,w,c
 21763  0039A2  6EDA               	movwf	fsr2h,c
 21764  0039A4  50DF               	movf	indf2,w,c
 21765  0039A6  6E2A               	movwf	??i2_printRTC& (0+255),c
 21766  0039A8  3A2A               	swapf	??i2_printRTC,f,c
 21767  0039AA  0E0F               	movlw	15
 21768  0039AC  162A               	andwf	??i2_printRTC,f,c
 21769  0039AE  0E0F               	movlw	15
 21770  0039B0  162A               	andwf	??i2_printRTC,f,c
 21771  0039B2  502A               	movf	??i2_printRTC,w,c
 21772  0039B4  0D0A               	mullw	10
 21773  0039B6  0E24               	movlw	low _time
 21774  0039B8  2441               	addwf	i2printRTC@i,w,c
 21775  0039BA  6ED9               	movwf	fsr2l,c
 21776  0039BC  0E01               	movlw	high _time
 21777  0039BE  2042               	addwfc	i2printRTC@i+1,w,c
 21778  0039C0  6EDA               	movwf	fsr2h,c
 21779  0039C2  50DF               	movf	indf2,w,c
 21780  0039C4  0B0F               	andlw	15
 21781  0039C6  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 21782  0039C8  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 21783  0039CA  50F3               	movf	prodl,w,c
 21784  0039CC  262B               	addwf	??i2_printRTC+1,f,c
 21785  0039CE  50F4               	movf	prodh,w,c
 21786  0039D0  222C               	addwfc	??i2_printRTC+2,f,c
 21787  0039D2  90D8               	bcf	status,0,c
 21788  0039D4  3441               	rlcf	i2printRTC@i,w,c
 21789  0039D6  6ED9               	movwf	fsr2l,c
 21790  0039D8  3442               	rlcf	i2printRTC@i+1,w,c
 21791  0039DA  6EDA               	movwf	fsr2h,c
 21792  0039DC  0E2D               	movlw	low i2printRTC@INT_time
 21793  0039DE  26D9               	addwf	fsr2l,f,c
 21794  0039E0  0E00               	movlw	high i2printRTC@INT_time
 21795  0039E2  22DA               	addwfc	fsr2h,f,c
 21796  0039E4  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 21797  0039E8  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 21798  0039EC  4A41               	infsnz	i2printRTC@i,f,c
 21799  0039EE  2A42               	incf	i2printRTC@i+1,f,c
 21800  0039F0  BE42               	btfsc	i2printRTC@i+1,7,c
 21801  0039F2  D7D2               	goto	i2l7830
 21802  0039F4  5042               	movf	i2printRTC@i+1,w,c
 21803  0039F6  E101               	bnz	i2u676_40
 21804  0039F8  D7CB               	goto	L18
 21805  0039FA                     i2u676_40:
 21806  0039FA                     i2l634:
 21807                           
 21808                           ;RTC.c: 69: }
 21809                           ;RTC.c: 70: int RTC_month = INT_time[5];
 21810  0039FA  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 21811  0039FE  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 21812                           
 21813                           ;RTC.c: 72: switch(RTC_month){
 21814  003A02  D084               	goto	i2l7862
 21815  003A04                     i2l7836:
 21816                           
 21817                           ;RTC.c: 74: strcpy(month, "JAN");
 21818  003A04  0E3D               	movlw	low i2printRTC@month
 21819  003A06  6E01               	movwf	i2strcpy@to,c
 21820  003A08  0E00               	movlw	high i2printRTC@month
 21821  003A0A  6E02               	movwf	i2strcpy@to+1,c
 21822  003A0C  0EDA               	movlw	low STR_8
 21823  003A0E  6E03               	movwf	i2strcpy@from,c
 21824  003A10  0EFF               	movlw	high STR_8
 21825  003A12  6E04               	movwf	i2strcpy@from+1,c
 21826  003A14  ECFD  F02D         	call	i2_strcpy	;wreg free
 21827                           
 21828                           ;RTC.c: 75: break;
 21829  003A18  D0A6               	goto	i2l7864
 21830  003A1A                     i2l7838:
 21831                           
 21832                           ;RTC.c: 77: strcpy(month, "FEB");
 21833  003A1A  0E3D               	movlw	low i2printRTC@month
 21834  003A1C  6E01               	movwf	i2strcpy@to,c
 21835  003A1E  0E00               	movlw	high i2printRTC@month
 21836  003A20  6E02               	movwf	i2strcpy@to+1,c
 21837  003A22  0ECA               	movlw	low STR_9
 21838  003A24  6E03               	movwf	i2strcpy@from,c
 21839  003A26  0EFF               	movlw	high STR_9
 21840  003A28  6E04               	movwf	i2strcpy@from+1,c
 21841  003A2A  ECFD  F02D         	call	i2_strcpy	;wreg free
 21842                           
 21843                           ;RTC.c: 78: break;
 21844  003A2E  D09B               	goto	i2l7864
 21845  003A30                     i2l7840:
 21846                           
 21847                           ;RTC.c: 80: strcpy(month, "MAR");
 21848  003A30  0E3D               	movlw	low i2printRTC@month
 21849  003A32  6E01               	movwf	i2strcpy@to,c
 21850  003A34  0E00               	movlw	high i2printRTC@month
 21851  003A36  6E02               	movwf	i2strcpy@to+1,c
 21852  003A38  0EE6               	movlw	low STR_10
 21853  003A3A  6E03               	movwf	i2strcpy@from,c
 21854  003A3C  0EFF               	movlw	high STR_10
 21855  003A3E  6E04               	movwf	i2strcpy@from+1,c
 21856  003A40  ECFD  F02D         	call	i2_strcpy	;wreg free
 21857                           
 21858                           ;RTC.c: 81: break;
 21859  003A44  D090               	goto	i2l7864
 21860  003A46                     i2l7842:
 21861                           
 21862                           ;RTC.c: 83: strcpy(month, "APR");
 21863  003A46  0E3D               	movlw	low i2printRTC@month
 21864  003A48  6E01               	movwf	i2strcpy@to,c
 21865  003A4A  0E00               	movlw	high i2printRTC@month
 21866  003A4C  6E02               	movwf	i2strcpy@to+1,c
 21867  003A4E  0EEA               	movlw	low STR_11
 21868  003A50  6E03               	movwf	i2strcpy@from,c
 21869  003A52  0EFF               	movlw	high STR_11
 21870  003A54  6E04               	movwf	i2strcpy@from+1,c
 21871  003A56  ECFD  F02D         	call	i2_strcpy	;wreg free
 21872                           
 21873                           ;RTC.c: 84: break;
 21874  003A5A  D085               	goto	i2l7864
 21875  003A5C                     i2l7844:
 21876                           
 21877                           ;RTC.c: 86: strcpy(month, "MAY");
 21878  003A5C  0E3D               	movlw	low i2printRTC@month
 21879  003A5E  6E01               	movwf	i2strcpy@to,c
 21880  003A60  0E00               	movlw	high i2printRTC@month
 21881  003A62  6E02               	movwf	i2strcpy@to+1,c
 21882  003A64  0EFA               	movlw	low STR_12
 21883  003A66  6E03               	movwf	i2strcpy@from,c
 21884  003A68  0EFF               	movlw	high STR_12
 21885  003A6A  6E04               	movwf	i2strcpy@from+1,c
 21886  003A6C  ECFD  F02D         	call	i2_strcpy	;wreg free
 21887                           
 21888                           ;RTC.c: 87: break;
 21889  003A70  D07A               	goto	i2l7864
 21890  003A72                     i2l7846:
 21891                           
 21892                           ;RTC.c: 89: strcpy(month, "JUN");
 21893  003A72  0E3D               	movlw	low i2printRTC@month
 21894  003A74  6E01               	movwf	i2strcpy@to,c
 21895  003A76  0E00               	movlw	high i2printRTC@month
 21896  003A78  6E02               	movwf	i2strcpy@to+1,c
 21897  003A7A  0EDE               	movlw	low STR_13
 21898  003A7C  6E03               	movwf	i2strcpy@from,c
 21899  003A7E  0EFF               	movlw	high STR_13
 21900  003A80  6E04               	movwf	i2strcpy@from+1,c
 21901  003A82  ECFD  F02D         	call	i2_strcpy	;wreg free
 21902                           
 21903                           ;RTC.c: 90: break;
 21904  003A86  D06F               	goto	i2l7864
 21905  003A88                     i2l7848:
 21906                           
 21907                           ;RTC.c: 92: strcpy(month, "JUL");
 21908  003A88  0E3D               	movlw	low i2printRTC@month
 21909  003A8A  6E01               	movwf	i2strcpy@to,c
 21910  003A8C  0E00               	movlw	high i2printRTC@month
 21911  003A8E  6E02               	movwf	i2strcpy@to+1,c
 21912  003A90  0ED6               	movlw	low STR_14
 21913  003A92  6E03               	movwf	i2strcpy@from,c
 21914  003A94  0EFF               	movlw	high STR_14
 21915  003A96  6E04               	movwf	i2strcpy@from+1,c
 21916  003A98  ECFD  F02D         	call	i2_strcpy	;wreg free
 21917                           
 21918                           ;RTC.c: 93: break;
 21919  003A9C  D064               	goto	i2l7864
 21920  003A9E                     i2l7850:
 21921                           
 21922                           ;RTC.c: 95: strcpy(month, "AUG");
 21923  003A9E  0E3D               	movlw	low i2printRTC@month
 21924  003AA0  6E01               	movwf	i2strcpy@to,c
 21925  003AA2  0E00               	movlw	high i2printRTC@month
 21926  003AA4  6E02               	movwf	i2strcpy@to+1,c
 21927  003AA6  0ED2               	movlw	low STR_15
 21928  003AA8  6E03               	movwf	i2strcpy@from,c
 21929  003AAA  0EFF               	movlw	high STR_15
 21930  003AAC  6E04               	movwf	i2strcpy@from+1,c
 21931  003AAE  ECFD  F02D         	call	i2_strcpy	;wreg free
 21932                           
 21933                           ;RTC.c: 96: break;
 21934  003AB2  D059               	goto	i2l7864
 21935  003AB4                     i2l7852:
 21936                           
 21937                           ;RTC.c: 98: strcpy(month, "SEP");
 21938  003AB4  0E3D               	movlw	low i2printRTC@month
 21939  003AB6  6E01               	movwf	i2strcpy@to,c
 21940  003AB8  0E00               	movlw	high i2printRTC@month
 21941  003ABA  6E02               	movwf	i2strcpy@to+1,c
 21942  003ABC  0EE2               	movlw	low STR_16
 21943  003ABE  6E03               	movwf	i2strcpy@from,c
 21944  003AC0  0EFF               	movlw	high STR_16
 21945  003AC2  6E04               	movwf	i2strcpy@from+1,c
 21946  003AC4  ECFD  F02D         	call	i2_strcpy	;wreg free
 21947                           
 21948                           ;RTC.c: 99: break;
 21949  003AC8  D04E               	goto	i2l7864
 21950  003ACA                     i2l7854:
 21951                           
 21952                           ;RTC.c: 101: strcpy(month, "OCT");
 21953  003ACA  0E3D               	movlw	low i2printRTC@month
 21954  003ACC  6E01               	movwf	i2strcpy@to,c
 21955  003ACE  0E00               	movlw	high i2printRTC@month
 21956  003AD0  6E02               	movwf	i2strcpy@to+1,c
 21957  003AD2  0EF2               	movlw	low STR_17
 21958  003AD4  6E03               	movwf	i2strcpy@from,c
 21959  003AD6  0EFF               	movlw	high STR_17
 21960  003AD8  6E04               	movwf	i2strcpy@from+1,c
 21961  003ADA  ECFD  F02D         	call	i2_strcpy	;wreg free
 21962                           
 21963                           ;RTC.c: 102: break;
 21964  003ADE  D043               	goto	i2l7864
 21965  003AE0                     i2l7856:
 21966                           
 21967                           ;RTC.c: 104: strcpy(month, "NOV");
 21968  003AE0  0E3D               	movlw	low i2printRTC@month
 21969  003AE2  6E01               	movwf	i2strcpy@to,c
 21970  003AE4  0E00               	movlw	high i2printRTC@month
 21971  003AE6  6E02               	movwf	i2strcpy@to+1,c
 21972  003AE8  0EF6               	movlw	low STR_18
 21973  003AEA  6E03               	movwf	i2strcpy@from,c
 21974  003AEC  0EFF               	movlw	high STR_18
 21975  003AEE  6E04               	movwf	i2strcpy@from+1,c
 21976  003AF0  ECFD  F02D         	call	i2_strcpy	;wreg free
 21977                           
 21978                           ;RTC.c: 105: break;
 21979  003AF4  D038               	goto	i2l7864
 21980  003AF6                     i2l7858:
 21981                           
 21982                           ;RTC.c: 107: strcpy(month, "DEC");
 21983  003AF6  0E3D               	movlw	low i2printRTC@month
 21984  003AF8  6E01               	movwf	i2strcpy@to,c
 21985  003AFA  0E00               	movlw	high i2printRTC@month
 21986  003AFC  6E02               	movwf	i2strcpy@to+1,c
 21987  003AFE  0ECE               	movlw	low STR_19
 21988  003B00  6E03               	movwf	i2strcpy@from,c
 21989  003B02  0EFF               	movlw	high STR_19
 21990  003B04  6E04               	movwf	i2strcpy@from+1,c
 21991  003B06  ECFD  F02D         	call	i2_strcpy	;wreg free
 21992                           
 21993                           ;RTC.c: 109: }
 21994                           
 21995                           ;RTC.c: 108: break;
 21996  003B0A  D02D               	goto	i2l7864
 21997  003B0C                     i2l7862:
 21998  003B0C  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 21999  003B10  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 22000                           
 22001                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 22002                           ; Switch size 1, requested type "space"
 22003                           ; Number of cases is 1, Range of values is 0 to 0
 22004                           ; switch strategies available:
 22005                           ; Name         Instructions Cycles
 22006                           ; simple_byte            4     3 (average)
 22007                           ;	Chosen strategy is simple_byte
 22008  003B14  502B               	movf	??i2_printRTC+1,w,c
 22009  003B16  0A00               	xorlw	0	; case 0
 22010  003B18  A4D8               	btfss	status,2,c
 22011  003B1A  D025               	goto	i2l7864
 22012                           
 22013                           ; Switch size 1, requested type "space"
 22014                           ; Number of cases is 12, Range of values is 1 to 12
 22015                           ; switch strategies available:
 22016                           ; Name         Instructions Cycles
 22017                           ; simple_byte           37    19 (average)
 22018                           ;	Chosen strategy is simple_byte
 22019  003B1C  502A               	movf	??i2_printRTC,w,c
 22020  003B1E  0A01               	xorlw	1	; case 1
 22021  003B20  B4D8               	btfsc	status,2,c
 22022  003B22  D770               	goto	i2l7836
 22023  003B24  0A03               	xorlw	3	; case 2
 22024  003B26  B4D8               	btfsc	status,2,c
 22025  003B28  D778               	goto	i2l7838
 22026  003B2A  0A01               	xorlw	1	; case 3
 22027  003B2C  B4D8               	btfsc	status,2,c
 22028  003B2E  D780               	goto	i2l7840
 22029  003B30  0A07               	xorlw	7	; case 4
 22030  003B32  B4D8               	btfsc	status,2,c
 22031  003B34  D788               	goto	i2l7842
 22032  003B36  0A01               	xorlw	1	; case 5
 22033  003B38  B4D8               	btfsc	status,2,c
 22034  003B3A  D790               	goto	i2l7844
 22035  003B3C  0A03               	xorlw	3	; case 6
 22036  003B3E  B4D8               	btfsc	status,2,c
 22037  003B40  D798               	goto	i2l7846
 22038  003B42  0A01               	xorlw	1	; case 7
 22039  003B44  B4D8               	btfsc	status,2,c
 22040  003B46  D7A0               	goto	i2l7848
 22041  003B48  0A0F               	xorlw	15	; case 8
 22042  003B4A  B4D8               	btfsc	status,2,c
 22043  003B4C  D7A8               	goto	i2l7850
 22044  003B4E  0A01               	xorlw	1	; case 9
 22045  003B50  B4D8               	btfsc	status,2,c
 22046  003B52  D7B0               	goto	i2l7852
 22047  003B54  0A03               	xorlw	3	; case 10
 22048  003B56  B4D8               	btfsc	status,2,c
 22049  003B58  D7B8               	goto	i2l7854
 22050  003B5A  0A01               	xorlw	1	; case 11
 22051  003B5C  B4D8               	btfsc	status,2,c
 22052  003B5E  D7C0               	goto	i2l7856
 22053  003B60  0A07               	xorlw	7	; case 12
 22054  003B62  B4D8               	btfsc	status,2,c
 22055  003B64  D7C8               	goto	i2l7858
 22056  003B66                     i2l7864:
 22057                           
 22058                           ;RTC.c: 110: lcdInst(0b10000000);;
 22059  003B66  0E80               	movlw	128
 22060  003B68  EC77  F030         	call	i2_lcdInst
 22061                           
 22062                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 22063  003B6C  0EC2               	movlw	low STR_21
 22064  003B6E  6E0D               	movwf	i2printf@f,c
 22065  003B70  0EFA               	movlw	high STR_21
 22066  003B72  6E0E               	movwf	i2printf@f+1,c
 22067  003B74  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 22068  003B78  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 22069  003B7C  0E3D               	movlw	low i2printRTC@month
 22070  003B7E  6E11               	movwf	?i2_printf+4,c
 22071  003B80  0E00               	movlw	high i2printRTC@month
 22072  003B82  6E12               	movwf	?i2_printf+5,c
 22073  003B84  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 22074  003B88  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 22075  003B8C  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 22076  003B90  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 22077  003B94  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 22078  003B98  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 22079  003B9C  ECB8  F016         	call	i2_printf	;wreg free
 22080  003BA0  0012               	return		;funcret
 22081  003BA2                     __end_ofi2_printRTC:
 22082                           	opt stack 0
 22083                           pclatu	equ	0xFFB
 22084                           pclath	equ	0xFFA
 22085                           tblptru	equ	0xFF8
 22086                           tblptrh	equ	0xFF7
 22087                           tblptrl	equ	0xFF6
 22088                           tablat	equ	0xFF5
 22089                           prodh	equ	0xFF4
 22090                           prodl	equ	0xFF3
 22091                           intcon	equ	0xFF2
 22092                           intcon2	equ	0xFF1
 22093                           intcon3	equ	0xFF0
 22094                           indf0	equ	0xFEF
 22095                           postinc0	equ	0xFEE
 22096                           fsr0h	equ	0xFEA
 22097                           fsr0l	equ	0xFE9
 22098                           wreg	equ	0xFE8
 22099                           postdec1	equ	0xFE5
 22100                           fsr1h	equ	0xFE2
 22101                           fsr1l	equ	0xFE1
 22102                           indf2	equ	0xFDF
 22103                           postinc2	equ	0xFDE
 22104                           postdec2	equ	0xFDD
 22105                           fsr2h	equ	0xFDA
 22106                           fsr2l	equ	0xFD9
 22107                           status	equ	0xFD8
 22108                           
 22109 ;; *************** function i2_strcpy *****************
 22110 ;; Defined at:
 22111 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 22112 ;; Parameters:    Size  Location     Type
 22113 ;;  to              2    0[COMRAM] PTR unsigned char 
 22114 ;;		 -> printRTC@month(4), UI@month(4), 
 22115 ;;  from            2    2[COMRAM] PTR const unsigned char 
 22116 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 22117 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 22118 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 22119 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 22120 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 22121 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 22122 ;;		 -> STR_8(4), 
 22123 ;; Auto vars:     Size  Location     Type
 22124 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 22125 ;;		 -> printRTC@month(4), UI@month(4), 
 22126 ;; Return value:  Size  Location     Type
 22127 ;;                  2    0[COMRAM] PTR unsigned char 
 22128 ;; Registers used:
 22129 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 22130 ;; Tracked objects:
 22131 ;;		On entry : 0/0
 22132 ;;		On exit  : 0/0
 22133 ;;		Unchanged: 0/0
 22134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22135 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22136 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22138 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22139 ;;Total ram usage:        6 bytes
 22140 ;; Hardware stack levels used:    1
 22141 ;; This function calls:
 22142 ;;		Nothing
 22143 ;; This function is called by:
 22144 ;;		i2_printRTC
 22145 ;; This function uses a non-reentrant model
 22146 ;;
 22147                           
 22148                           	psect	text70
 22149  005BFA                     __ptext70:
 22150                           	opt stack 0
 22151  005BFA                     i2_strcpy:
 22152                           	opt stack 21
 22153                           
 22154                           ;incstack = 0
 22155  005BFA  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 22156  005BFE  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 22157  005C02  D004               	goto	i2l7388
 22158  005C04                     i2l7386:
 22159  005C04  4A05               	infsnz	i2strcpy@cp,f,c
 22160  005C06  2A06               	incf	i2strcpy@cp+1,f,c
 22161  005C08  4A03               	infsnz	i2strcpy@from,f,c
 22162  005C0A  2A04               	incf	i2strcpy@from+1,f,c
 22163  005C0C                     i2l7388:
 22164  005C0C  C003  FFF6         	movff	i2strcpy@from,tblptrl
 22165  005C10  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 22166  005C14                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22167  005C14  6AF8               	clrf	tblptru,c
 22168  005C16                     	endif
 22169  005C16                     	if	0	;tblptru may be non-zero
 22170  005C16                     	endif
 22171  005C16  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 22172  005C1A  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 22173  005C1E  0008               	tblrd		*
 22174  005C20  CFF5 FFDF          	movff	tablat,indf2
 22175  005C24  50DF               	movf	indf2,w,c
 22176  005C26  B4D8               	btfsc	status,2,c
 22177  005C28  0012               	return	
 22178  005C2A  D7EC               	goto	i2l7386
 22179  005C2C                     __end_ofi2_strcpy:
 22180                           	opt stack 0
 22181                           pclatu	equ	0xFFB
 22182                           pclath	equ	0xFFA
 22183                           tblptru	equ	0xFF8
 22184                           tblptrh	equ	0xFF7
 22185                           tblptrl	equ	0xFF6
 22186                           tablat	equ	0xFF5
 22187                           prodh	equ	0xFF4
 22188                           prodl	equ	0xFF3
 22189                           intcon	equ	0xFF2
 22190                           intcon2	equ	0xFF1
 22191                           intcon3	equ	0xFF0
 22192                           indf0	equ	0xFEF
 22193                           postinc0	equ	0xFEE
 22194                           fsr0h	equ	0xFEA
 22195                           fsr0l	equ	0xFE9
 22196                           wreg	equ	0xFE8
 22197                           postdec1	equ	0xFE5
 22198                           fsr1h	equ	0xFE2
 22199                           fsr1l	equ	0xFE1
 22200                           indf2	equ	0xFDF
 22201                           postinc2	equ	0xFDE
 22202                           postdec2	equ	0xFDD
 22203                           fsr2h	equ	0xFDA
 22204                           fsr2l	equ	0xFD9
 22205                           status	equ	0xFD8
 22206                           
 22207 ;; *************** function _inputHandler *****************
 22208 ;; Defined at:
 22209 ;;		line 375 in file "UI.c"
 22210 ;; Parameters:    Size  Location     Type
 22211 ;;		None
 22212 ;; Auto vars:     Size  Location     Type
 22213 ;;		None
 22214 ;; Return value:  Size  Location     Type
 22215 ;;                  2   41[COMRAM] int 
 22216 ;; Registers used:
 22217 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22218 ;; Tracked objects:
 22219 ;;		On entry : 0/0
 22220 ;;		On exit  : 0/0
 22221 ;;		Unchanged: 0/0
 22222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22223 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22225 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22226 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22227 ;;Total ram usage:        4 bytes
 22228 ;; Hardware stack levels used:    1
 22229 ;; Hardware stack levels required when called:    4
 22230 ;; This function calls:
 22231 ;;		_change_state_to_logs_11
 22232 ;;		_change_state_to_logs_12
 22233 ;;		_change_state_to_logs_22
 22234 ;;		_change_state_to_logs_23
 22235 ;;		_change_state_to_logs_33
 22236 ;;		_change_state_to_logs_34
 22237 ;;		_change_state_to_menu_11
 22238 ;;		_change_state_to_menu_23
 22239 ;;		i2_change_state_to_menu_12
 22240 ;;		i2_change_state_to_menu_22
 22241 ;; This function is called by:
 22242 ;;		_updateMenu
 22243 ;; This function uses a non-reentrant model
 22244 ;;
 22245                           
 22246                           	psect	text71
 22247  003D94                     __ptext71:
 22248                           	opt stack 0
 22249  003D94                     _inputHandler:
 22250                           	opt stack 18
 22251                           
 22252                           ;UI.c: 380: if(firstboot){
 22253                           
 22254                           ;incstack = 0
 22255  003D94  0101               	movlb	1	; () banked
 22256  003D96  513D               	movf	_firstboot& (0+255),w,b
 22257  003D98  0101               	movlb	1	; () banked
 22258  003D9A  113E               	iorwf	(_firstboot+1)& (0+255),w,b
 22259  003D9C  B4D8               	btfsc	status,2,c
 22260  003D9E  D00C               	goto	i2l7932
 22261                           
 22262                           ; BSR set to: 1
 22263                           ;UI.c: 381: change_state_to_menu_11();
 22264  003DA0  EC8E  F02E         	call	_change_state_to_menu_11	;wreg free
 22265                           
 22266                           ;UI.c: 382: firstboot = 0;
 22267  003DA4  0E00               	movlw	0
 22268  003DA6  0101               	movlb	1	; () banked
 22269  003DA8  6F3E               	movwf	(_firstboot+1)& (0+255),b
 22270  003DAA  0E00               	movlw	0
 22271  003DAC  6F3D               	movwf	_firstboot& (0+255),b
 22272                           
 22273                           ; BSR set to: 1
 22274                           ;UI.c: 383: return 0;
 22275  003DAE  0E00               	movlw	0
 22276  003DB0  6E2B               	movwf	?_inputHandler+1,c
 22277  003DB2  0E00               	movlw	0
 22278  003DB4  6E2A               	movwf	?_inputHandler,c
 22279                           
 22280                           ; BSR set to: 1
 22281  003DB6  0012               	return	
 22282  003DB8                     i2l7932:
 22283                           
 22284                           ; BSR set to: 1
 22285                           ;UI.c: 384: }
 22286                           ;UI.c: 385: if (logstate){
 22287  003DB8  0100               	movlb	0	; () banked
 22288  003DBA  51F8               	movf	_logstate& (0+255),w,b
 22289  003DBC  0100               	movlb	0	; () banked
 22290  003DBE  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 22291  003DC0  B4D8               	btfsc	status,2,c
 22292  003DC2  D0C7               	goto	i2l8050
 22293                           
 22294                           ; BSR set to: 0
 22295                           ;UI.c: 386: if(input == 'C' && PORTBbits.RB1 == 1){
 22296  003DC4  0E43               	movlw	67
 22297  003DC6  187D               	xorwf	_input,w,c	;volatile
 22298  003DC8  A4D8               	btfss	status,2,c
 22299  003DCA  D012               	goto	i2l7950
 22300                           
 22301                           ; BSR set to: 0
 22302  003DCC  B281               	btfsc	3969,1,c	;volatile
 22303  003DCE  D009               	goto	i2l7942
 22304  003DD0  D00F               	goto	i2l7950
 22305  003DD2                     i2l7940:
 22306                           
 22307                           ;UI.c: 389: _delay((unsigned long)((10)*(32000000/4000.0)));
 22308  003DD2  0E68               	movlw	104
 22309  003DD4  6E2C               	movwf	??_inputHandler& (0+255),c
 22310  003DD6  0EE4               	movlw	228
 22311  003DD8                     i2u1240_47:
 22312  003DD8  2EE8               	decfsz	wreg,f,c
 22313  003DDA  D7FE               	bra	i2u1240_47
 22314  003DDC  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 22315  003DDE  D7FC               	bra	i2u1240_47
 22316  003DE0  D000               	nop2	
 22317  003DE2                     i2l7942:
 22318  003DE2  B281               	btfsc	3969,1,c	;volatile
 22319  003DE4  D7F6               	goto	i2l7940
 22320  003DE6                     i2l7944:
 22321                           
 22322                           ;UI.c: 390: }
 22323                           ;UI.c: 391: return 0;
 22324  003DE6  0E00               	movlw	0
 22325  003DE8  6E2B               	movwf	?_inputHandler+1,c
 22326  003DEA  0E00               	movlw	0
 22327  003DEC  6E2A               	movwf	?_inputHandler,c
 22328  003DEE  0012               	return	
 22329  003DF0                     i2l7950:
 22330                           
 22331                           ;UI.c: 393: else if (input == 'D'){
 22332  003DF0  0E44               	movlw	68
 22333  003DF2  187D               	xorwf	_input,w,c	;volatile
 22334  003DF4  A4D8               	btfss	status,2,c
 22335  003DF6  D7F7               	goto	i2l7944
 22336                           
 22337                           ;UI.c: 395: logstate = 0;
 22338  003DF8  0E00               	movlw	0
 22339  003DFA  0100               	movlb	0	; () banked
 22340  003DFC  6FF9               	movwf	(_logstate+1)& (0+255),b
 22341  003DFE  0E00               	movlw	0
 22342  003E00  6FF8               	movwf	_logstate& (0+255),b
 22343                           
 22344                           ;UI.c: 396: switch(cur_state){
 22345  003E02  D012               	goto	i2l7968
 22346  003E04                     i2l7954:
 22347                           
 22348                           ;UI.c: 398: change_state_to_logs_11();
 22349  003E04  EC06  F02F         	call	_change_state_to_logs_11	;wreg free
 22350                           
 22351                           ;UI.c: 399: break;
 22352  003E08  D7EE               	goto	i2l7944
 22353  003E0A                     i2l7956:
 22354                           
 22355                           ;UI.c: 401: change_state_to_logs_12();
 22356  003E0A  ECEE  F02E         	call	_change_state_to_logs_12	;wreg free
 22357                           
 22358                           ;UI.c: 402: break;
 22359  003E0E  D7EB               	goto	i2l7944
 22360  003E10                     i2l7958:
 22361                           
 22362                           ;UI.c: 404: change_state_to_logs_22();
 22363  003E10  ECD6  F02E         	call	_change_state_to_logs_22	;wreg free
 22364                           
 22365                           ;UI.c: 405: break;
 22366  003E14  D7E8               	goto	i2l7944
 22367  003E16                     i2l7960:
 22368                           
 22369                           ;UI.c: 407: change_state_to_logs_23();
 22370  003E16  EC35  F02F         	call	_change_state_to_logs_23	;wreg free
 22371                           
 22372                           ;UI.c: 408: break;
 22373  003E1A  D7E5               	goto	i2l7944
 22374  003E1C                     i2l7962:
 22375                           
 22376                           ;UI.c: 410: change_state_to_logs_33();
 22377  003E1C  ECBE  F02E         	call	_change_state_to_logs_33	;wreg free
 22378                           
 22379                           ;UI.c: 411: break;
 22380  003E20  D7E2               	goto	i2l7944
 22381  003E22                     i2l7964:
 22382                           
 22383                           ;UI.c: 413: change_state_to_logs_34();
 22384  003E22  ECA6  F02E         	call	_change_state_to_logs_34	;wreg free
 22385                           
 22386                           ;UI.c: 415: }
 22387                           
 22388                           ;UI.c: 414: break;
 22389  003E26  D7DF               	goto	i2l7944
 22390  003E28                     i2l7968:
 22391  003E28  C0E8  F02C         	movff	_cur_state,??_inputHandler
 22392  003E2C  C0E9  F02D         	movff	_cur_state+1,??_inputHandler+1
 22393                           
 22394                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 22395                           ; Switch size 1, requested type "space"
 22396                           ; Number of cases is 2, Range of values is 3 to 4
 22397                           ; switch strategies available:
 22398                           ; Name         Instructions Cycles
 22399                           ; simple_byte            7     4 (average)
 22400                           ;	Chosen strategy is simple_byte
 22401  003E30  502D               	movf	??_inputHandler+1,w,c
 22402  003E32  0A03               	xorlw	3	; case 3
 22403  003E34  B4D8               	btfsc	status,2,c
 22404  003E36  D004               	goto	i2l11190
 22405  003E38  0A07               	xorlw	7	; case 4
 22406  003E3A  B4D8               	btfsc	status,2,c
 22407  003E3C  D00F               	goto	i2l11192
 22408  003E3E  D7D3               	goto	i2l7944
 22409  003E40                     i2l11190:
 22410                           
 22411                           ; Switch size 1, requested type "space"
 22412                           ; Number of cases is 4, Range of values is 243 to 255
 22413                           ; switch strategies available:
 22414                           ; Name         Instructions Cycles
 22415                           ; simple_byte           13     7 (average)
 22416                           ;	Chosen strategy is simple_byte
 22417  003E40  502C               	movf	??_inputHandler,w,c
 22418  003E42  0AF3               	xorlw	243	; case 243
 22419  003E44  B4D8               	btfsc	status,2,c
 22420  003E46  D7DE               	goto	i2l7954
 22421  003E48  0A07               	xorlw	7	; case 244
 22422  003E4A  B4D8               	btfsc	status,2,c
 22423  003E4C  D7DE               	goto	i2l7956
 22424  003E4E  0A0A               	xorlw	10	; case 254
 22425  003E50  B4D8               	btfsc	status,2,c
 22426  003E52  D7DE               	goto	i2l7958
 22427  003E54  0A01               	xorlw	1	; case 255
 22428  003E56  B4D8               	btfsc	status,2,c
 22429  003E58  D7DE               	goto	i2l7960
 22430  003E5A  D7C5               	goto	i2l7944
 22431  003E5C                     i2l11192:
 22432                           
 22433                           ; Switch size 1, requested type "space"
 22434                           ; Number of cases is 2, Range of values is 9 to 10
 22435                           ; switch strategies available:
 22436                           ; Name         Instructions Cycles
 22437                           ; simple_byte            7     4 (average)
 22438                           ;	Chosen strategy is simple_byte
 22439  003E5C  502C               	movf	??_inputHandler,w,c
 22440  003E5E  0A09               	xorlw	9	; case 9
 22441  003E60  B4D8               	btfsc	status,2,c
 22442  003E62  D7DC               	goto	i2l7962
 22443  003E64  0A03               	xorlw	3	; case 10
 22444  003E66  B4D8               	btfsc	status,2,c
 22445  003E68  D7DC               	goto	i2l7964
 22446  003E6A  D7BD               	goto	i2l7944
 22447  003E6C                     i2l7980:
 22448                           
 22449                           ;UI.c: 425: if(cur_state == 11){
 22450  003E6C  0E0B               	movlw	11
 22451  003E6E  0100               	movlb	0	; () banked
 22452  003E70  19E8               	xorwf	_cur_state& (0+255),w,b
 22453  003E72  0100               	movlb	0	; () banked
 22454  003E74  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
 22455  003E76  A4D8               	btfss	status,2,c
 22456  003E78  D005               	goto	i2l7988
 22457                           
 22458                           ; BSR set to: 0
 22459                           ;UI.c: 426: return 0;
 22460  003E7A  0E00               	movlw	0
 22461  003E7C  6E2B               	movwf	?_inputHandler+1,c
 22462  003E7E  0E00               	movlw	0
 22463  003E80  6E2A               	movwf	?_inputHandler,c
 22464                           
 22465                           ; BSR set to: 0
 22466  003E82  0012               	return	
 22467  003E84                     i2l7988:
 22468                           
 22469                           ; BSR set to: 0
 22470                           ;UI.c: 428: else{
 22471                           ;UI.c: 429: change_state_to_menu_11();
 22472  003E84  EC8E  F02E         	call	_change_state_to_menu_11	;wreg free
 22473                           
 22474                           ;UI.c: 430: }
 22475                           ;UI.c: 431: return 0;
 22476  003E88  0E00               	movlw	0
 22477  003E8A  6E2B               	movwf	?_inputHandler+1,c
 22478  003E8C  0E00               	movlw	0
 22479  003E8E  6E2A               	movwf	?_inputHandler,c
 22480  003E90  0012               	return	
 22481  003E92                     i2l7994:
 22482                           
 22483                           ;UI.c: 433: if(cur_state == 22 || cur_state == 12){
 22484  003E92  0E16               	movlw	22
 22485  003E94  0100               	movlb	0	; () banked
 22486  003E96  19E8               	xorwf	_cur_state& (0+255),w,b
 22487  003E98  0100               	movlb	0	; () banked
 22488  003E9A  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
 22489  003E9C  B4D8               	btfsc	status,2,c
 22490  003E9E  D007               	goto	i2l7998
 22491                           
 22492                           ; BSR set to: 0
 22493  003EA0  0E0C               	movlw	12
 22494  003EA2  0100               	movlb	0	; () banked
 22495  003EA4  19E8               	xorwf	_cur_state& (0+255),w,b
 22496  003EA6  0100               	movlb	0	; () banked
 22497  003EA8  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
 22498  003EAA  A4D8               	btfss	status,2,c
 22499  003EAC  D005               	goto	i2l8004
 22500  003EAE                     i2l7998:
 22501                           
 22502                           ; BSR set to: 0
 22503                           ;UI.c: 434: return 0;
 22504  003EAE  0E00               	movlw	0
 22505  003EB0  6E2B               	movwf	?_inputHandler+1,c
 22506  003EB2  0E00               	movlw	0
 22507  003EB4  6E2A               	movwf	?_inputHandler,c
 22508                           
 22509                           ; BSR set to: 0
 22510  003EB6  0012               	return	
 22511  003EB8                     i2l8004:
 22512                           
 22513                           ; BSR set to: 0
 22514                           ;UI.c: 436: else if(cur_state == 23){
 22515  003EB8  0E17               	movlw	23
 22516  003EBA  0100               	movlb	0	; () banked
 22517  003EBC  19E8               	xorwf	_cur_state& (0+255),w,b
 22518  003EBE  0100               	movlb	0	; () banked
 22519  003EC0  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
 22520  003EC2  A4D8               	btfss	status,2,c
 22521  003EC4  D003               	goto	i2l8008
 22522                           
 22523                           ; BSR set to: 0
 22524                           ;UI.c: 437: change_state_to_menu_22();
 22525  003EC6  EC46  F02E         	call	i2_change_state_to_menu_22	;wreg free
 22526                           
 22527                           ;UI.c: 438: }
 22528  003ECA  D002               	goto	i2l8010
 22529  003ECC                     i2l8008:
 22530                           
 22531                           ;UI.c: 439: else{
 22532                           ;UI.c: 440: change_state_to_menu_12();
 22533  003ECC  EC5E  F02E         	call	i2_change_state_to_menu_12	;wreg free
 22534  003ED0                     i2l8010:
 22535                           
 22536                           ;UI.c: 441: }
 22537                           ;UI.c: 442: return 0;
 22538  003ED0  0E00               	movlw	0
 22539  003ED2  6E2B               	movwf	?_inputHandler+1,c
 22540  003ED4  0E00               	movlw	0
 22541  003ED6  6E2A               	movwf	?_inputHandler,c
 22542  003ED8  0012               	return	
 22543  003EDA                     i2l8014:
 22544                           
 22545                           ;UI.c: 444: if(cur_state == 23){
 22546  003EDA  0E17               	movlw	23
 22547  003EDC  0100               	movlb	0	; () banked
 22548  003EDE  19E8               	xorwf	_cur_state& (0+255),w,b
 22549  003EE0  0100               	movlb	0	; () banked
 22550  003EE2  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
 22551  003EE4  A4D8               	btfss	status,2,c
 22552  003EE6  D005               	goto	i2l8022
 22553                           
 22554                           ; BSR set to: 0
 22555                           ;UI.c: 445: return 0;
 22556  003EE8  0E00               	movlw	0
 22557  003EEA  6E2B               	movwf	?_inputHandler+1,c
 22558  003EEC  0E00               	movlw	0
 22559  003EEE  6E2A               	movwf	?_inputHandler,c
 22560                           
 22561                           ; BSR set to: 0
 22562  003EF0  0012               	return	
 22563  003EF2                     i2l8022:
 22564                           
 22565                           ; BSR set to: 0
 22566                           ;UI.c: 447: else{
 22567                           ;UI.c: 448: change_state_to_menu_23();
 22568  003EF2  EC76  F02E         	call	_change_state_to_menu_23	;wreg free
 22569                           
 22570                           ;UI.c: 449: }
 22571                           ;UI.c: 450: return 0;
 22572  003EF6  0E00               	movlw	0
 22573  003EF8  6E2B               	movwf	?_inputHandler+1,c
 22574  003EFA  0E00               	movlw	0
 22575  003EFC  6E2A               	movwf	?_inputHandler,c
 22576  003EFE  0012               	return	
 22577  003F00                     i2l8028:
 22578                           
 22579                           ;UI.c: 453: up = 1;
 22580  003F00  0E00               	movlw	0
 22581  003F02  6E76               	movwf	_up+1,c
 22582  003F04  0E01               	movlw	1
 22583  003F06  6E75               	movwf	_up,c
 22584                           
 22585                           ;UI.c: 454: return 1;
 22586  003F08  0E00               	movlw	0
 22587  003F0A  6E2B               	movwf	?_inputHandler+1,c
 22588  003F0C  0E01               	movlw	1
 22589  003F0E  6E2A               	movwf	?_inputHandler,c
 22590  003F10  0012               	return	
 22591  003F12                     i2l8032:
 22592                           
 22593                           ;UI.c: 456: down = 1;
 22594  003F12  0E00               	movlw	0
 22595  003F14  6E64               	movwf	_down+1,c
 22596  003F16  0E01               	movlw	1
 22597  003F18  6E63               	movwf	_down,c
 22598                           
 22599                           ;UI.c: 457: return 1;
 22600  003F1A  0E00               	movlw	0
 22601  003F1C  6E2B               	movwf	?_inputHandler+1,c
 22602  003F1E  0E01               	movlw	1
 22603  003F20  6E2A               	movwf	?_inputHandler,c
 22604  003F22  0012               	return	
 22605  003F24                     i2l8036:
 22606                           
 22607                           ;UI.c: 459: enter = 1;
 22608  003F24  0E00               	movlw	0
 22609  003F26  6E66               	movwf	_enter+1,c
 22610  003F28  0E01               	movlw	1
 22611  003F2A  6E65               	movwf	_enter,c
 22612                           
 22613                           ;UI.c: 460: return 1;
 22614  003F2C  0E00               	movlw	0
 22615  003F2E  6E2B               	movwf	?_inputHandler+1,c
 22616  003F30  0E01               	movlw	1
 22617  003F32  6E2A               	movwf	?_inputHandler,c
 22618  003F34  0012               	return	
 22619  003F36                     i2l8040:
 22620                           
 22621                           ;UI.c: 462: back = 1;
 22622  003F36  0E00               	movlw	0
 22623  003F38  6E5A               	movwf	_back+1,c
 22624  003F3A  0E01               	movlw	1
 22625  003F3C  6E59               	movwf	_back,c
 22626                           
 22627                           ;UI.c: 463: return 1;
 22628  003F3E  0E00               	movlw	0
 22629  003F40  6E2B               	movwf	?_inputHandler+1,c
 22630  003F42  0E01               	movlw	1
 22631  003F44  6E2A               	movwf	?_inputHandler,c
 22632  003F46  0012               	return	
 22633  003F48                     i2l8044:
 22634                           
 22635                           ;UI.c: 466: return 1;
 22636  003F48  0E00               	movlw	0
 22637  003F4A  6E2B               	movwf	?_inputHandler+1,c
 22638  003F4C  0E01               	movlw	1
 22639  003F4E  6E2A               	movwf	?_inputHandler,c
 22640                           
 22641                           ;UI.c: 467: }
 22642  003F50  0012               	return	
 22643  003F52                     i2l8050:
 22644  003F52  507D               	movf	_input,w,c	;volatile
 22645                           
 22646                           ; Switch size 1, requested type "space"
 22647                           ; Number of cases is 7, Range of values is 49 to 68
 22648                           ; switch strategies available:
 22649                           ; Name         Instructions Cycles
 22650                           ; simple_byte           22    12 (average)
 22651                           ;	Chosen strategy is simple_byte
 22652  003F54  0A31               	xorlw	49	; case 49
 22653  003F56  B4D8               	btfsc	status,2,c
 22654  003F58  D789               	goto	i2l7980
 22655  003F5A  0A03               	xorlw	3	; case 50
 22656  003F5C  B4D8               	btfsc	status,2,c
 22657  003F5E  D799               	goto	i2l7994
 22658  003F60  0A01               	xorlw	1	; case 51
 22659  003F62  B4D8               	btfsc	status,2,c
 22660  003F64  D7BA               	goto	i2l8014
 22661  003F66  0A72               	xorlw	114	; case 65
 22662  003F68  B4D8               	btfsc	status,2,c
 22663  003F6A  D7CA               	goto	i2l8028
 22664  003F6C  0A03               	xorlw	3	; case 66
 22665  003F6E  B4D8               	btfsc	status,2,c
 22666  003F70  D7D0               	goto	i2l8032
 22667  003F72  0A01               	xorlw	1	; case 67
 22668  003F74  B4D8               	btfsc	status,2,c
 22669  003F76  D7D6               	goto	i2l8036
 22670  003F78  0A07               	xorlw	7	; case 68
 22671  003F7A  B4D8               	btfsc	status,2,c
 22672  003F7C  D7DC               	goto	i2l8040
 22673  003F7E  D7E4               	goto	i2l8044
 22674  003F80                     __end_of_inputHandler:
 22675                           	opt stack 0
 22676                           pclatu	equ	0xFFB
 22677                           pclath	equ	0xFFA
 22678                           tblptru	equ	0xFF8
 22679                           tblptrh	equ	0xFF7
 22680                           tblptrl	equ	0xFF6
 22681                           tablat	equ	0xFF5
 22682                           prodh	equ	0xFF4
 22683                           prodl	equ	0xFF3
 22684                           intcon	equ	0xFF2
 22685                           intcon2	equ	0xFF1
 22686                           intcon3	equ	0xFF0
 22687                           indf0	equ	0xFEF
 22688                           postinc0	equ	0xFEE
 22689                           fsr0h	equ	0xFEA
 22690                           fsr0l	equ	0xFE9
 22691                           wreg	equ	0xFE8
 22692                           postdec1	equ	0xFE5
 22693                           fsr1h	equ	0xFE2
 22694                           fsr1l	equ	0xFE1
 22695                           indf2	equ	0xFDF
 22696                           postinc2	equ	0xFDE
 22697                           postdec2	equ	0xFDD
 22698                           fsr2h	equ	0xFDA
 22699                           fsr2l	equ	0xFD9
 22700                           status	equ	0xFD8
 22701                           
 22702 ;; *************** function i2_change_state_to_menu_22 *****************
 22703 ;; Defined at:
 22704 ;;		line 501 in file "UI.c"
 22705 ;; Parameters:    Size  Location     Type
 22706 ;;		None
 22707 ;; Auto vars:     Size  Location     Type
 22708 ;;		None
 22709 ;; Return value:  Size  Location     Type
 22710 ;;                  1    wreg      void 
 22711 ;; Registers used:
 22712 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22713 ;; Tracked objects:
 22714 ;;		On entry : 0/0
 22715 ;;		On exit  : 0/0
 22716 ;;		Unchanged: 0/0
 22717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22721 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22722 ;;Total ram usage:        0 bytes
 22723 ;; Hardware stack levels used:    1
 22724 ;; Hardware stack levels required when called:    3
 22725 ;; This function calls:
 22726 ;;		i2_lcdInst
 22727 ;;		i2_printf
 22728 ;; This function is called by:
 22729 ;;		_updateMenu
 22730 ;;		_inputHandler
 22731 ;; This function uses a non-reentrant model
 22732 ;;
 22733                           
 22734                           	psect	text72
 22735  005C8C                     __ptext72:
 22736                           	opt stack 0
 22737  005C8C                     i2_change_state_to_menu_22:
 22738                           	opt stack 19
 22739                           
 22740                           ;UI.c: 502: cur_state = 22;
 22741                           
 22742                           ;incstack = 0
 22743  005C8C  0E00               	movlw	0
 22744  005C8E  0100               	movlb	0	; () banked
 22745  005C90  6FE9               	movwf	(_cur_state+1)& (0+255),b
 22746  005C92  0E16               	movlw	22
 22747  005C94  6FE8               	movwf	_cur_state& (0+255),b
 22748                           
 22749                           ; BSR set to: 0
 22750                           ;UI.c: 504: lcdInst(0b10000000);;
 22751  005C96  0E80               	movlw	128
 22752  005C98  EC77  F030         	call	i2_lcdInst
 22753                           
 22754                           ;UI.c: 505: printf("2. SORT        <");
 22755  005C9C  0ED3               	movlw	low STR_34
 22756  005C9E  6E0D               	movwf	i2printf@f,c
 22757  005CA0  0EFD               	movlw	high STR_34
 22758  005CA2  6E0E               	movwf	i2printf@f+1,c
 22759  005CA4  ECB8  F016         	call	i2_printf	;wreg free
 22760                           
 22761                           ;UI.c: 506: lcdInst(0b11000000);;
 22762  005CA8  0EC0               	movlw	192
 22763  005CAA  EC77  F030         	call	i2_lcdInst
 22764                           
 22765                           ;UI.c: 507: printf("3. LOGS         ");
 22766  005CAE  0E18               	movlw	low STR_36
 22767  005CB0  6E0D               	movwf	i2printf@f,c
 22768  005CB2  0EFD               	movlw	high STR_36
 22769  005CB4  6E0E               	movwf	i2printf@f+1,c
 22770  005CB6  ECB8  F016         	call	i2_printf	;wreg free
 22771  005CBA  0012               	return		;funcret
 22772  005CBC                     __end_ofi2_change_state_to_menu_22:
 22773                           	opt stack 0
 22774                           pclatu	equ	0xFFB
 22775                           pclath	equ	0xFFA
 22776                           tblptru	equ	0xFF8
 22777                           tblptrh	equ	0xFF7
 22778                           tblptrl	equ	0xFF6
 22779                           tablat	equ	0xFF5
 22780                           prodh	equ	0xFF4
 22781                           prodl	equ	0xFF3
 22782                           intcon	equ	0xFF2
 22783                           intcon2	equ	0xFF1
 22784                           intcon3	equ	0xFF0
 22785                           indf0	equ	0xFEF
 22786                           postinc0	equ	0xFEE
 22787                           fsr0h	equ	0xFEA
 22788                           fsr0l	equ	0xFE9
 22789                           wreg	equ	0xFE8
 22790                           postdec1	equ	0xFE5
 22791                           fsr1h	equ	0xFE2
 22792                           fsr1l	equ	0xFE1
 22793                           indf2	equ	0xFDF
 22794                           postinc2	equ	0xFDE
 22795                           postdec2	equ	0xFDD
 22796                           fsr2h	equ	0xFDA
 22797                           fsr2l	equ	0xFD9
 22798                           status	equ	0xFD8
 22799                           
 22800 ;; *************** function i2_change_state_to_menu_12 *****************
 22801 ;; Defined at:
 22802 ;;		line 493 in file "UI.c"
 22803 ;; Parameters:    Size  Location     Type
 22804 ;;		None
 22805 ;; Auto vars:     Size  Location     Type
 22806 ;;		None
 22807 ;; Return value:  Size  Location     Type
 22808 ;;                  1    wreg      void 
 22809 ;; Registers used:
 22810 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22811 ;; Tracked objects:
 22812 ;;		On entry : 0/0
 22813 ;;		On exit  : 0/0
 22814 ;;		Unchanged: 0/0
 22815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22820 ;;Total ram usage:        0 bytes
 22821 ;; Hardware stack levels used:    1
 22822 ;; Hardware stack levels required when called:    3
 22823 ;; This function calls:
 22824 ;;		i2_lcdInst
 22825 ;;		i2_printf
 22826 ;; This function is called by:
 22827 ;;		_updateMenu
 22828 ;;		_inputHandler
 22829 ;; This function uses a non-reentrant model
 22830 ;;
 22831                           
 22832                           	psect	text73
 22833  005CBC                     __ptext73:
 22834                           	opt stack 0
 22835  005CBC                     i2_change_state_to_menu_12:
 22836                           	opt stack 19
 22837                           
 22838                           ;UI.c: 494: cur_state = 12;
 22839                           
 22840                           ;incstack = 0
 22841  005CBC  0E00               	movlw	0
 22842  005CBE  0100               	movlb	0	; () banked
 22843  005CC0  6FE9               	movwf	(_cur_state+1)& (0+255),b
 22844  005CC2  0E0C               	movlw	12
 22845  005CC4  6FE8               	movwf	_cur_state& (0+255),b
 22846                           
 22847                           ; BSR set to: 0
 22848                           ;UI.c: 496: lcdInst(0b10000000);;
 22849  005CC6  0E80               	movlw	128
 22850  005CC8  EC77  F030         	call	i2_lcdInst
 22851                           
 22852                           ;UI.c: 497: printf("1. DATE/TIME    ");
 22853  005CCC  0E3A               	movlw	low STR_33
 22854  005CCE  6E0D               	movwf	i2printf@f,c
 22855  005CD0  0EFD               	movlw	high STR_33
 22856  005CD2  6E0E               	movwf	i2printf@f+1,c
 22857  005CD4  ECB8  F016         	call	i2_printf	;wreg free
 22858                           
 22859                           ;UI.c: 498: lcdInst(0b11000000);;
 22860  005CD8  0EC0               	movlw	192
 22861  005CDA  EC77  F030         	call	i2_lcdInst
 22862                           
 22863                           ;UI.c: 499: printf("2. SORT        <");
 22864  005CDE  0ED3               	movlw	low STR_34
 22865  005CE0  6E0D               	movwf	i2printf@f,c
 22866  005CE2  0EFD               	movlw	high STR_34
 22867  005CE4  6E0E               	movwf	i2printf@f+1,c
 22868  005CE6  ECB8  F016         	call	i2_printf	;wreg free
 22869  005CEA  0012               	return		;funcret
 22870  005CEC                     __end_ofi2_change_state_to_menu_12:
 22871                           	opt stack 0
 22872                           pclatu	equ	0xFFB
 22873                           pclath	equ	0xFFA
 22874                           tblptru	equ	0xFF8
 22875                           tblptrh	equ	0xFF7
 22876                           tblptrl	equ	0xFF6
 22877                           tablat	equ	0xFF5
 22878                           prodh	equ	0xFF4
 22879                           prodl	equ	0xFF3
 22880                           intcon	equ	0xFF2
 22881                           intcon2	equ	0xFF1
 22882                           intcon3	equ	0xFF0
 22883                           indf0	equ	0xFEF
 22884                           postinc0	equ	0xFEE
 22885                           fsr0h	equ	0xFEA
 22886                           fsr0l	equ	0xFE9
 22887                           wreg	equ	0xFE8
 22888                           postdec1	equ	0xFE5
 22889                           fsr1h	equ	0xFE2
 22890                           fsr1l	equ	0xFE1
 22891                           indf2	equ	0xFDF
 22892                           postinc2	equ	0xFDE
 22893                           postdec2	equ	0xFDD
 22894                           fsr2h	equ	0xFDA
 22895                           fsr2l	equ	0xFD9
 22896                           status	equ	0xFD8
 22897                           
 22898 ;; *************** function _change_state_to_menu_23 *****************
 22899 ;; Defined at:
 22900 ;;		line 509 in file "UI.c"
 22901 ;; Parameters:    Size  Location     Type
 22902 ;;		None
 22903 ;; Auto vars:     Size  Location     Type
 22904 ;;		None
 22905 ;; Return value:  Size  Location     Type
 22906 ;;                  1    wreg      void 
 22907 ;; Registers used:
 22908 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22909 ;; Tracked objects:
 22910 ;;		On entry : 0/0
 22911 ;;		On exit  : 0/0
 22912 ;;		Unchanged: 0/0
 22913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22918 ;;Total ram usage:        0 bytes
 22919 ;; Hardware stack levels used:    1
 22920 ;; Hardware stack levels required when called:    3
 22921 ;; This function calls:
 22922 ;;		i2_lcdInst
 22923 ;;		i2_printf
 22924 ;; This function is called by:
 22925 ;;		_updateMenu
 22926 ;;		_inputHandler
 22927 ;; This function uses a non-reentrant model
 22928 ;;
 22929                           
 22930                           	psect	text74
 22931  005CEC                     __ptext74:
 22932                           	opt stack 0
 22933  005CEC                     _change_state_to_menu_23:
 22934                           	opt stack 18
 22935                           
 22936                           ;UI.c: 510: cur_state = 23;
 22937                           
 22938                           ;incstack = 0
 22939  005CEC  0E00               	movlw	0
 22940  005CEE  0100               	movlb	0	; () banked
 22941  005CF0  6FE9               	movwf	(_cur_state+1)& (0+255),b
 22942  005CF2  0E17               	movlw	23
 22943  005CF4  6FE8               	movwf	_cur_state& (0+255),b
 22944                           
 22945                           ; BSR set to: 0
 22946                           ;UI.c: 512: lcdInst(0b10000000);;
 22947  005CF6  0E80               	movlw	128
 22948  005CF8  EC77  F030         	call	i2_lcdInst
 22949                           
 22950                           ;UI.c: 513: printf("2. SORT         ");
 22951  005CFC  0E29               	movlw	low STR_32
 22952  005CFE  6E0D               	movwf	i2printf@f,c
 22953  005D00  0EFD               	movlw	high STR_32
 22954  005D02  6E0E               	movwf	i2printf@f+1,c
 22955  005D04  ECB8  F016         	call	i2_printf	;wreg free
 22956                           
 22957                           ;UI.c: 514: lcdInst(0b11000000);;
 22958  005D08  0EC0               	movlw	192
 22959  005D0A  EC77  F030         	call	i2_lcdInst
 22960                           
 22961                           ;UI.c: 515: printf("3. LOGS        <");
 22962  005D0E  0EC2               	movlw	low STR_38
 22963  005D10  6E0D               	movwf	i2printf@f,c
 22964  005D12  0EFD               	movlw	high STR_38
 22965  005D14  6E0E               	movwf	i2printf@f+1,c
 22966  005D16  ECB8  F016         	call	i2_printf	;wreg free
 22967  005D1A  0012               	return		;funcret
 22968  005D1C                     __end_of_change_state_to_menu_23:
 22969                           	opt stack 0
 22970                           pclatu	equ	0xFFB
 22971                           pclath	equ	0xFFA
 22972                           tblptru	equ	0xFF8
 22973                           tblptrh	equ	0xFF7
 22974                           tblptrl	equ	0xFF6
 22975                           tablat	equ	0xFF5
 22976                           prodh	equ	0xFF4
 22977                           prodl	equ	0xFF3
 22978                           intcon	equ	0xFF2
 22979                           intcon2	equ	0xFF1
 22980                           intcon3	equ	0xFF0
 22981                           indf0	equ	0xFEF
 22982                           postinc0	equ	0xFEE
 22983                           fsr0h	equ	0xFEA
 22984                           fsr0l	equ	0xFE9
 22985                           wreg	equ	0xFE8
 22986                           postdec1	equ	0xFE5
 22987                           fsr1h	equ	0xFE2
 22988                           fsr1l	equ	0xFE1
 22989                           indf2	equ	0xFDF
 22990                           postinc2	equ	0xFDE
 22991                           postdec2	equ	0xFDD
 22992                           fsr2h	equ	0xFDA
 22993                           fsr2l	equ	0xFD9
 22994                           status	equ	0xFD8
 22995                           
 22996 ;; *************** function _change_state_to_menu_11 *****************
 22997 ;; Defined at:
 22998 ;;		line 485 in file "UI.c"
 22999 ;; Parameters:    Size  Location     Type
 23000 ;;		None
 23001 ;; Auto vars:     Size  Location     Type
 23002 ;;		None
 23003 ;; Return value:  Size  Location     Type
 23004 ;;                  1    wreg      void 
 23005 ;; Registers used:
 23006 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23007 ;; Tracked objects:
 23008 ;;		On entry : 0/0
 23009 ;;		On exit  : 0/0
 23010 ;;		Unchanged: 0/0
 23011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23016 ;;Total ram usage:        0 bytes
 23017 ;; Hardware stack levels used:    1
 23018 ;; Hardware stack levels required when called:    3
 23019 ;; This function calls:
 23020 ;;		i2_lcdInst
 23021 ;;		i2_printf
 23022 ;; This function is called by:
 23023 ;;		_updateMenu
 23024 ;;		_inputHandler
 23025 ;; This function uses a non-reentrant model
 23026 ;;
 23027                           
 23028                           	psect	text75
 23029  005D1C                     __ptext75:
 23030                           	opt stack 0
 23031  005D1C                     _change_state_to_menu_11:
 23032                           	opt stack 18
 23033                           
 23034                           ;UI.c: 486: cur_state = 11;
 23035                           
 23036                           ;incstack = 0
 23037  005D1C  0E00               	movlw	0
 23038  005D1E  0100               	movlb	0	; () banked
 23039  005D20  6FE9               	movwf	(_cur_state+1)& (0+255),b
 23040  005D22  0E0B               	movlw	11
 23041  005D24  6FE8               	movwf	_cur_state& (0+255),b
 23042                           
 23043                           ; BSR set to: 0
 23044                           ;UI.c: 488: lcdInst(0b10000000);;
 23045  005D26  0E80               	movlw	128
 23046  005D28  EC77  F030         	call	i2_lcdInst
 23047                           
 23048                           ;UI.c: 489: printf("1. DATE/TIME   <");
 23049  005D2C  0EE4               	movlw	low STR_31
 23050  005D2E  6E0D               	movwf	i2printf@f,c
 23051  005D30  0EFD               	movlw	high STR_31
 23052  005D32  6E0E               	movwf	i2printf@f+1,c
 23053  005D34  ECB8  F016         	call	i2_printf	;wreg free
 23054                           
 23055                           ;UI.c: 490: lcdInst(0b11000000);;
 23056  005D38  0EC0               	movlw	192
 23057  005D3A  EC77  F030         	call	i2_lcdInst
 23058                           
 23059                           ;UI.c: 491: printf("2. SORT         ");
 23060  005D3E  0E29               	movlw	low STR_32
 23061  005D40  6E0D               	movwf	i2printf@f,c
 23062  005D42  0EFD               	movlw	high STR_32
 23063  005D44  6E0E               	movwf	i2printf@f+1,c
 23064  005D46  ECB8  F016         	call	i2_printf	;wreg free
 23065  005D4A  0012               	return		;funcret
 23066  005D4C                     __end_of_change_state_to_menu_11:
 23067                           	opt stack 0
 23068                           pclatu	equ	0xFFB
 23069                           pclath	equ	0xFFA
 23070                           tblptru	equ	0xFF8
 23071                           tblptrh	equ	0xFF7
 23072                           tblptrl	equ	0xFF6
 23073                           tablat	equ	0xFF5
 23074                           prodh	equ	0xFF4
 23075                           prodl	equ	0xFF3
 23076                           intcon	equ	0xFF2
 23077                           intcon2	equ	0xFF1
 23078                           intcon3	equ	0xFF0
 23079                           indf0	equ	0xFEF
 23080                           postinc0	equ	0xFEE
 23081                           fsr0h	equ	0xFEA
 23082                           fsr0l	equ	0xFE9
 23083                           wreg	equ	0xFE8
 23084                           postdec1	equ	0xFE5
 23085                           fsr1h	equ	0xFE2
 23086                           fsr1l	equ	0xFE1
 23087                           indf2	equ	0xFDF
 23088                           postinc2	equ	0xFDE
 23089                           postdec2	equ	0xFDD
 23090                           fsr2h	equ	0xFDA
 23091                           fsr2l	equ	0xFD9
 23092                           status	equ	0xFD8
 23093                           
 23094 ;; *************** function _change_state_to_logs_34 *****************
 23095 ;; Defined at:
 23096 ;;		line 552 in file "UI.c"
 23097 ;; Parameters:    Size  Location     Type
 23098 ;;		None
 23099 ;; Auto vars:     Size  Location     Type
 23100 ;;		None
 23101 ;; Return value:  Size  Location     Type
 23102 ;;                  1    wreg      void 
 23103 ;; Registers used:
 23104 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23105 ;; Tracked objects:
 23106 ;;		On entry : 0/0
 23107 ;;		On exit  : 0/0
 23108 ;;		Unchanged: 0/0
 23109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23113 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23114 ;;Total ram usage:        0 bytes
 23115 ;; Hardware stack levels used:    1
 23116 ;; Hardware stack levels required when called:    3
 23117 ;; This function calls:
 23118 ;;		i2_lcdInst
 23119 ;;		i2_printf
 23120 ;; This function is called by:
 23121 ;;		_updateMenu
 23122 ;;		_inputHandler
 23123 ;; This function uses a non-reentrant model
 23124 ;;
 23125                           
 23126                           	psect	text76
 23127  005D4C                     __ptext76:
 23128                           	opt stack 0
 23129  005D4C                     _change_state_to_logs_34:
 23130                           	opt stack 18
 23131                           
 23132                           ;UI.c: 553: cur_state = 1034;
 23133                           
 23134                           ;incstack = 0
 23135  005D4C  0E04               	movlw	4
 23136  005D4E  0100               	movlb	0	; () banked
 23137  005D50  6FE9               	movwf	(_cur_state+1)& (0+255),b
 23138  005D52  0E0A               	movlw	10
 23139  005D54  6FE8               	movwf	_cur_state& (0+255),b
 23140                           
 23141                           ; BSR set to: 0
 23142                           ;UI.c: 554: lcdInst(0b10000000);;
 23143  005D56  0E80               	movlw	128
 23144  005D58  EC77  F030         	call	i2_lcdInst
 23145                           
 23146                           ;UI.c: 555: printf("LOG 3           ");
 23147  005D5C  0EF6               	movlw	low STR_44
 23148  005D5E  6E0D               	movwf	i2printf@f,c
 23149  005D60  0EFC               	movlw	high STR_44
 23150  005D62  6E0E               	movwf	i2printf@f+1,c
 23151  005D64  ECB8  F016         	call	i2_printf	;wreg free
 23152                           
 23153                           ;UI.c: 556: lcdInst(0b11000000);;
 23154  005D68  0EC0               	movlw	192
 23155  005D6A  EC77  F030         	call	i2_lcdInst
 23156                           
 23157                           ;UI.c: 557: printf("LOG 4          <");
 23158  005D6E  0EB1               	movlw	low STR_50
 23159  005D70  6E0D               	movwf	i2printf@f,c
 23160  005D72  0EFD               	movlw	high STR_50
 23161  005D74  6E0E               	movwf	i2printf@f+1,c
 23162  005D76  ECB8  F016         	call	i2_printf	;wreg free
 23163  005D7A  0012               	return		;funcret
 23164  005D7C                     __end_of_change_state_to_logs_34:
 23165                           	opt stack 0
 23166                           pclatu	equ	0xFFB
 23167                           pclath	equ	0xFFA
 23168                           tblptru	equ	0xFF8
 23169                           tblptrh	equ	0xFF7
 23170                           tblptrl	equ	0xFF6
 23171                           tablat	equ	0xFF5
 23172                           prodh	equ	0xFF4
 23173                           prodl	equ	0xFF3
 23174                           intcon	equ	0xFF2
 23175                           intcon2	equ	0xFF1
 23176                           intcon3	equ	0xFF0
 23177                           indf0	equ	0xFEF
 23178                           postinc0	equ	0xFEE
 23179                           fsr0h	equ	0xFEA
 23180                           fsr0l	equ	0xFE9
 23181                           wreg	equ	0xFE8
 23182                           postdec1	equ	0xFE5
 23183                           fsr1h	equ	0xFE2
 23184                           fsr1l	equ	0xFE1
 23185                           indf2	equ	0xFDF
 23186                           postinc2	equ	0xFDE
 23187                           postdec2	equ	0xFDD
 23188                           fsr2h	equ	0xFDA
 23189                           fsr2l	equ	0xFD9
 23190                           status	equ	0xFD8
 23191                           
 23192 ;; *************** function _change_state_to_logs_33 *****************
 23193 ;; Defined at:
 23194 ;;		line 545 in file "UI.c"
 23195 ;; Parameters:    Size  Location     Type
 23196 ;;		None
 23197 ;; Auto vars:     Size  Location     Type
 23198 ;;		None
 23199 ;; Return value:  Size  Location     Type
 23200 ;;                  1    wreg      void 
 23201 ;; Registers used:
 23202 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23203 ;; Tracked objects:
 23204 ;;		On entry : 0/0
 23205 ;;		On exit  : 0/0
 23206 ;;		Unchanged: 0/0
 23207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23211 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23212 ;;Total ram usage:        0 bytes
 23213 ;; Hardware stack levels used:    1
 23214 ;; Hardware stack levels required when called:    3
 23215 ;; This function calls:
 23216 ;;		i2_lcdInst
 23217 ;;		i2_printf
 23218 ;; This function is called by:
 23219 ;;		_updateMenu
 23220 ;;		_inputHandler
 23221 ;; This function uses a non-reentrant model
 23222 ;;
 23223                           
 23224                           	psect	text77
 23225  005D7C                     __ptext77:
 23226                           	opt stack 0
 23227  005D7C                     _change_state_to_logs_33:
 23228                           	opt stack 18
 23229                           
 23230                           ;UI.c: 546: cur_state = 1033;
 23231                           
 23232                           ;incstack = 0
 23233  005D7C  0E04               	movlw	4
 23234  005D7E  0100               	movlb	0	; () banked
 23235  005D80  6FE9               	movwf	(_cur_state+1)& (0+255),b
 23236  005D82  0E09               	movlw	9
 23237  005D84  6FE8               	movwf	_cur_state& (0+255),b
 23238                           
 23239                           ; BSR set to: 0
 23240                           ;UI.c: 547: lcdInst(0b10000000);;
 23241  005D86  0E80               	movlw	128
 23242  005D88  EC77  F030         	call	i2_lcdInst
 23243                           
 23244                           ;UI.c: 548: printf("LOG 3          <");
 23245  005D8C  0EA0               	movlw	low STR_46
 23246  005D8E  6E0D               	movwf	i2printf@f,c
 23247  005D90  0EFD               	movlw	high STR_46
 23248  005D92  6E0E               	movwf	i2printf@f+1,c
 23249  005D94  ECB8  F016         	call	i2_printf	;wreg free
 23250                           
 23251                           ;UI.c: 549: lcdInst(0b11000000);;
 23252  005D98  0EC0               	movlw	192
 23253  005D9A  EC77  F030         	call	i2_lcdInst
 23254                           
 23255                           ;UI.c: 550: printf("LOG 4           ");
 23256  005D9E  0E07               	movlw	low STR_48
 23257  005DA0  6E0D               	movwf	i2printf@f,c
 23258  005DA2  0EFD               	movlw	high STR_48
 23259  005DA4  6E0E               	movwf	i2printf@f+1,c
 23260  005DA6  ECB8  F016         	call	i2_printf	;wreg free
 23261  005DAA  0012               	return		;funcret
 23262  005DAC                     __end_of_change_state_to_logs_33:
 23263                           	opt stack 0
 23264                           pclatu	equ	0xFFB
 23265                           pclath	equ	0xFFA
 23266                           tblptru	equ	0xFF8
 23267                           tblptrh	equ	0xFF7
 23268                           tblptrl	equ	0xFF6
 23269                           tablat	equ	0xFF5
 23270                           prodh	equ	0xFF4
 23271                           prodl	equ	0xFF3
 23272                           intcon	equ	0xFF2
 23273                           intcon2	equ	0xFF1
 23274                           intcon3	equ	0xFF0
 23275                           indf0	equ	0xFEF
 23276                           postinc0	equ	0xFEE
 23277                           fsr0h	equ	0xFEA
 23278                           fsr0l	equ	0xFE9
 23279                           wreg	equ	0xFE8
 23280                           postdec1	equ	0xFE5
 23281                           fsr1h	equ	0xFE2
 23282                           fsr1l	equ	0xFE1
 23283                           indf2	equ	0xFDF
 23284                           postinc2	equ	0xFDE
 23285                           postdec2	equ	0xFDD
 23286                           fsr2h	equ	0xFDA
 23287                           fsr2l	equ	0xFD9
 23288                           status	equ	0xFD8
 23289                           
 23290 ;; *************** function _change_state_to_logs_23 *****************
 23291 ;; Defined at:
 23292 ;;		line 538 in file "UI.c"
 23293 ;; Parameters:    Size  Location     Type
 23294 ;;		None
 23295 ;; Auto vars:     Size  Location     Type
 23296 ;;		None
 23297 ;; Return value:  Size  Location     Type
 23298 ;;                  1    wreg      void 
 23299 ;; Registers used:
 23300 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23301 ;; Tracked objects:
 23302 ;;		On entry : 0/0
 23303 ;;		On exit  : 0/0
 23304 ;;		Unchanged: 0/0
 23305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23309 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23310 ;;Total ram usage:        0 bytes
 23311 ;; Hardware stack levels used:    1
 23312 ;; Hardware stack levels required when called:    3
 23313 ;; This function calls:
 23314 ;;		i2_lcdInst
 23315 ;;		i2_printf
 23316 ;; This function is called by:
 23317 ;;		_updateMenu
 23318 ;;		_inputHandler
 23319 ;; This function uses a non-reentrant model
 23320 ;;
 23321                           
 23322                           	psect	text78
 23323  005E6A                     __ptext78:
 23324                           	opt stack 0
 23325  005E6A                     _change_state_to_logs_23:
 23326                           	opt stack 18
 23327                           
 23328                           ;UI.c: 539: cur_state = 1023;
 23329                           
 23330                           ;incstack = 0
 23331  005E6A  0E03               	movlw	3
 23332  005E6C  0100               	movlb	0	; () banked
 23333  005E6E  6FE9               	movwf	(_cur_state+1)& (0+255),b
 23334  005E70  69E8               	setf	_cur_state& (0+255),b
 23335                           
 23336                           ; BSR set to: 0
 23337                           ;UI.c: 540: lcdInst(0b10000000);;
 23338  005E72  0E80               	movlw	128
 23339  005E74  EC77  F030         	call	i2_lcdInst
 23340                           
 23341                           ;UI.c: 541: printf("LOG 2           ");
 23342  005E78  0EE5               	movlw	low STR_40
 23343  005E7A  6E0D               	movwf	i2printf@f,c
 23344  005E7C  0EFC               	movlw	high STR_40
 23345  005E7E  6E0E               	movwf	i2printf@f+1,c
 23346  005E80  ECB8  F016         	call	i2_printf	;wreg free
 23347                           
 23348                           ;UI.c: 542: lcdInst(0b11000000);;
 23349  005E84  0EC0               	movlw	192
 23350  005E86  EC77  F030         	call	i2_lcdInst
 23351                           
 23352                           ;UI.c: 543: printf("LOG 3          <");
 23353  005E8A  0EA0               	movlw	low STR_46
 23354  005E8C  6E0D               	movwf	i2printf@f,c
 23355  005E8E  0EFD               	movlw	high STR_46
 23356  005E90  6E0E               	movwf	i2printf@f+1,c
 23357  005E92  ECB8  F016         	call	i2_printf	;wreg free
 23358  005E96  0012               	return		;funcret
 23359  005E98                     __end_of_change_state_to_logs_23:
 23360                           	opt stack 0
 23361                           pclatu	equ	0xFFB
 23362                           pclath	equ	0xFFA
 23363                           tblptru	equ	0xFF8
 23364                           tblptrh	equ	0xFF7
 23365                           tblptrl	equ	0xFF6
 23366                           tablat	equ	0xFF5
 23367                           prodh	equ	0xFF4
 23368                           prodl	equ	0xFF3
 23369                           intcon	equ	0xFF2
 23370                           intcon2	equ	0xFF1
 23371                           intcon3	equ	0xFF0
 23372                           indf0	equ	0xFEF
 23373                           postinc0	equ	0xFEE
 23374                           fsr0h	equ	0xFEA
 23375                           fsr0l	equ	0xFE9
 23376                           wreg	equ	0xFE8
 23377                           postdec1	equ	0xFE5
 23378                           fsr1h	equ	0xFE2
 23379                           fsr1l	equ	0xFE1
 23380                           indf2	equ	0xFDF
 23381                           postinc2	equ	0xFDE
 23382                           postdec2	equ	0xFDD
 23383                           fsr2h	equ	0xFDA
 23384                           fsr2l	equ	0xFD9
 23385                           status	equ	0xFD8
 23386                           
 23387 ;; *************** function _change_state_to_logs_22 *****************
 23388 ;; Defined at:
 23389 ;;		line 531 in file "UI.c"
 23390 ;; Parameters:    Size  Location     Type
 23391 ;;		None
 23392 ;; Auto vars:     Size  Location     Type
 23393 ;;		None
 23394 ;; Return value:  Size  Location     Type
 23395 ;;                  1    wreg      void 
 23396 ;; Registers used:
 23397 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23398 ;; Tracked objects:
 23399 ;;		On entry : 0/0
 23400 ;;		On exit  : 0/0
 23401 ;;		Unchanged: 0/0
 23402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23407 ;;Total ram usage:        0 bytes
 23408 ;; Hardware stack levels used:    1
 23409 ;; Hardware stack levels required when called:    3
 23410 ;; This function calls:
 23411 ;;		i2_lcdInst
 23412 ;;		i2_printf
 23413 ;; This function is called by:
 23414 ;;		_updateMenu
 23415 ;;		_inputHandler
 23416 ;; This function uses a non-reentrant model
 23417 ;;
 23418                           
 23419                           	psect	text79
 23420  005DAC                     __ptext79:
 23421                           	opt stack 0
 23422  005DAC                     _change_state_to_logs_22:
 23423                           	opt stack 18
 23424                           
 23425                           ;UI.c: 532: cur_state = 1022;
 23426                           
 23427                           ;incstack = 0
 23428  005DAC  0E03               	movlw	3
 23429  005DAE  0100               	movlb	0	; () banked
 23430  005DB0  6FE9               	movwf	(_cur_state+1)& (0+255),b
 23431  005DB2  0EFE               	movlw	254
 23432  005DB4  6FE8               	movwf	_cur_state& (0+255),b
 23433                           
 23434                           ; BSR set to: 0
 23435                           ;UI.c: 533: lcdInst(0b10000000);;
 23436  005DB6  0E80               	movlw	128
 23437  005DB8  EC77  F030         	call	i2_lcdInst
 23438                           
 23439                           ;UI.c: 534: printf("LOG 2          <");
 23440  005DBC  0E8F               	movlw	low STR_42
 23441  005DBE  6E0D               	movwf	i2printf@f,c
 23442  005DC0  0EFD               	movlw	high STR_42
 23443  005DC2  6E0E               	movwf	i2printf@f+1,c
 23444  005DC4  ECB8  F016         	call	i2_printf	;wreg free
 23445                           
 23446                           ;UI.c: 535: lcdInst(0b11000000);;
 23447  005DC8  0EC0               	movlw	192
 23448  005DCA  EC77  F030         	call	i2_lcdInst
 23449                           
 23450                           ;UI.c: 536: printf("LOG 3           ");
 23451  005DCE  0EF6               	movlw	low STR_44
 23452  005DD0  6E0D               	movwf	i2printf@f,c
 23453  005DD2  0EFC               	movlw	high STR_44
 23454  005DD4  6E0E               	movwf	i2printf@f+1,c
 23455  005DD6  ECB8  F016         	call	i2_printf	;wreg free
 23456  005DDA  0012               	return		;funcret
 23457  005DDC                     __end_of_change_state_to_logs_22:
 23458                           	opt stack 0
 23459                           pclatu	equ	0xFFB
 23460                           pclath	equ	0xFFA
 23461                           tblptru	equ	0xFF8
 23462                           tblptrh	equ	0xFF7
 23463                           tblptrl	equ	0xFF6
 23464                           tablat	equ	0xFF5
 23465                           prodh	equ	0xFF4
 23466                           prodl	equ	0xFF3
 23467                           intcon	equ	0xFF2
 23468                           intcon2	equ	0xFF1
 23469                           intcon3	equ	0xFF0
 23470                           indf0	equ	0xFEF
 23471                           postinc0	equ	0xFEE
 23472                           fsr0h	equ	0xFEA
 23473                           fsr0l	equ	0xFE9
 23474                           wreg	equ	0xFE8
 23475                           postdec1	equ	0xFE5
 23476                           fsr1h	equ	0xFE2
 23477                           fsr1l	equ	0xFE1
 23478                           indf2	equ	0xFDF
 23479                           postinc2	equ	0xFDE
 23480                           postdec2	equ	0xFDD
 23481                           fsr2h	equ	0xFDA
 23482                           fsr2l	equ	0xFD9
 23483                           status	equ	0xFD8
 23484                           
 23485 ;; *************** function _change_state_to_logs_12 *****************
 23486 ;; Defined at:
 23487 ;;		line 524 in file "UI.c"
 23488 ;; Parameters:    Size  Location     Type
 23489 ;;		None
 23490 ;; Auto vars:     Size  Location     Type
 23491 ;;		None
 23492 ;; Return value:  Size  Location     Type
 23493 ;;                  1    wreg      void 
 23494 ;; Registers used:
 23495 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23496 ;; Tracked objects:
 23497 ;;		On entry : 0/0
 23498 ;;		On exit  : 0/0
 23499 ;;		Unchanged: 0/0
 23500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23505 ;;Total ram usage:        0 bytes
 23506 ;; Hardware stack levels used:    1
 23507 ;; Hardware stack levels required when called:    3
 23508 ;; This function calls:
 23509 ;;		i2_lcdInst
 23510 ;;		i2_printf
 23511 ;; This function is called by:
 23512 ;;		_updateMenu
 23513 ;;		_inputHandler
 23514 ;; This function uses a non-reentrant model
 23515 ;;
 23516                           
 23517                           	psect	text80
 23518  005DDC                     __ptext80:
 23519                           	opt stack 0
 23520  005DDC                     _change_state_to_logs_12:
 23521                           	opt stack 18
 23522                           
 23523                           ;UI.c: 525: cur_state = 1012;
 23524                           
 23525                           ;incstack = 0
 23526  005DDC  0E03               	movlw	3
 23527  005DDE  0100               	movlb	0	; () banked
 23528  005DE0  6FE9               	movwf	(_cur_state+1)& (0+255),b
 23529  005DE2  0EF4               	movlw	244
 23530  005DE4  6FE8               	movwf	_cur_state& (0+255),b
 23531                           
 23532                           ; BSR set to: 0
 23533                           ;UI.c: 526: lcdInst(0b10000000);;
 23534  005DE6  0E80               	movlw	128
 23535  005DE8  EC77  F030         	call	i2_lcdInst
 23536                           
 23537                           ;UI.c: 527: printf("LOG 1           ");
 23538  005DEC  0ED4               	movlw	low STR_41
 23539  005DEE  6E0D               	movwf	i2printf@f,c
 23540  005DF0  0EFC               	movlw	high STR_41
 23541  005DF2  6E0E               	movwf	i2printf@f+1,c
 23542  005DF4  ECB8  F016         	call	i2_printf	;wreg free
 23543                           
 23544                           ;UI.c: 528: lcdInst(0b11000000);;
 23545  005DF8  0EC0               	movlw	192
 23546  005DFA  EC77  F030         	call	i2_lcdInst
 23547                           
 23548                           ;UI.c: 529: printf("LOG 2          <");
 23549  005DFE  0E8F               	movlw	low STR_42
 23550  005E00  6E0D               	movwf	i2printf@f,c
 23551  005E02  0EFD               	movlw	high STR_42
 23552  005E04  6E0E               	movwf	i2printf@f+1,c
 23553  005E06  ECB8  F016         	call	i2_printf	;wreg free
 23554  005E0A  0012               	return		;funcret
 23555  005E0C                     __end_of_change_state_to_logs_12:
 23556                           	opt stack 0
 23557                           pclatu	equ	0xFFB
 23558                           pclath	equ	0xFFA
 23559                           tblptru	equ	0xFF8
 23560                           tblptrh	equ	0xFF7
 23561                           tblptrl	equ	0xFF6
 23562                           tablat	equ	0xFF5
 23563                           prodh	equ	0xFF4
 23564                           prodl	equ	0xFF3
 23565                           intcon	equ	0xFF2
 23566                           intcon2	equ	0xFF1
 23567                           intcon3	equ	0xFF0
 23568                           indf0	equ	0xFEF
 23569                           postinc0	equ	0xFEE
 23570                           fsr0h	equ	0xFEA
 23571                           fsr0l	equ	0xFE9
 23572                           wreg	equ	0xFE8
 23573                           postdec1	equ	0xFE5
 23574                           fsr1h	equ	0xFE2
 23575                           fsr1l	equ	0xFE1
 23576                           indf2	equ	0xFDF
 23577                           postinc2	equ	0xFDE
 23578                           postdec2	equ	0xFDD
 23579                           fsr2h	equ	0xFDA
 23580                           fsr2l	equ	0xFD9
 23581                           status	equ	0xFD8
 23582                           
 23583 ;; *************** function _change_state_to_logs_11 *****************
 23584 ;; Defined at:
 23585 ;;		line 517 in file "UI.c"
 23586 ;; Parameters:    Size  Location     Type
 23587 ;;		None
 23588 ;; Auto vars:     Size  Location     Type
 23589 ;;		None
 23590 ;; Return value:  Size  Location     Type
 23591 ;;                  1    wreg      void 
 23592 ;; Registers used:
 23593 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23594 ;; Tracked objects:
 23595 ;;		On entry : 0/0
 23596 ;;		On exit  : 0/0
 23597 ;;		Unchanged: 0/0
 23598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23602 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23603 ;;Total ram usage:        0 bytes
 23604 ;; Hardware stack levels used:    1
 23605 ;; Hardware stack levels required when called:    3
 23606 ;; This function calls:
 23607 ;;		i2_lcdInst
 23608 ;;		i2_printf
 23609 ;; This function is called by:
 23610 ;;		_updateMenu
 23611 ;;		_inputHandler
 23612 ;; This function uses a non-reentrant model
 23613 ;;
 23614                           
 23615                           	psect	text81
 23616  005E0C                     __ptext81:
 23617                           	opt stack 0
 23618  005E0C                     _change_state_to_logs_11:
 23619                           	opt stack 18
 23620                           
 23621                           ;UI.c: 518: cur_state = 1011;
 23622                           
 23623                           ;incstack = 0
 23624  005E0C  0E03               	movlw	3
 23625  005E0E  0100               	movlb	0	; () banked
 23626  005E10  6FE9               	movwf	(_cur_state+1)& (0+255),b
 23627  005E12  0EF3               	movlw	243
 23628  005E14  6FE8               	movwf	_cur_state& (0+255),b
 23629                           
 23630                           ; BSR set to: 0
 23631                           ;UI.c: 519: lcdInst(0b10000000);;
 23632  005E16  0E80               	movlw	128
 23633  005E18  EC77  F030         	call	i2_lcdInst
 23634                           
 23635                           ;UI.c: 520: printf("LOG 1          <");
 23636  005E1C  0E7E               	movlw	low STR_39
 23637  005E1E  6E0D               	movwf	i2printf@f,c
 23638  005E20  0EFD               	movlw	high STR_39
 23639  005E22  6E0E               	movwf	i2printf@f+1,c
 23640  005E24  ECB8  F016         	call	i2_printf	;wreg free
 23641                           
 23642                           ;UI.c: 521: lcdInst(0b11000000);;
 23643  005E28  0EC0               	movlw	192
 23644  005E2A  EC77  F030         	call	i2_lcdInst
 23645                           
 23646                           ;UI.c: 522: printf("LOG 2           ");
 23647  005E2E  0EE5               	movlw	low STR_40
 23648  005E30  6E0D               	movwf	i2printf@f,c
 23649  005E32  0EFC               	movlw	high STR_40
 23650  005E34  6E0E               	movwf	i2printf@f+1,c
 23651  005E36  ECB8  F016         	call	i2_printf	;wreg free
 23652  005E3A  0012               	return		;funcret
 23653  005E3C                     __end_of_change_state_to_logs_11:
 23654                           	opt stack 0
 23655                           pclatu	equ	0xFFB
 23656                           pclath	equ	0xFFA
 23657                           tblptru	equ	0xFF8
 23658                           tblptrh	equ	0xFF7
 23659                           tblptrl	equ	0xFF6
 23660                           tablat	equ	0xFF5
 23661                           prodh	equ	0xFF4
 23662                           prodl	equ	0xFF3
 23663                           intcon	equ	0xFF2
 23664                           intcon2	equ	0xFF1
 23665                           intcon3	equ	0xFF0
 23666                           indf0	equ	0xFEF
 23667                           postinc0	equ	0xFEE
 23668                           fsr0h	equ	0xFEA
 23669                           fsr0l	equ	0xFE9
 23670                           wreg	equ	0xFE8
 23671                           postdec1	equ	0xFE5
 23672                           fsr1h	equ	0xFE2
 23673                           fsr1l	equ	0xFE1
 23674                           indf2	equ	0xFDF
 23675                           postinc2	equ	0xFDE
 23676                           postdec2	equ	0xFDD
 23677                           fsr2h	equ	0xFDA
 23678                           fsr2l	equ	0xFD9
 23679                           status	equ	0xFD8
 23680                           
 23681 ;; *************** function _dispLogs *****************
 23682 ;; Defined at:
 23683 ;;		line 470 in file "UI.c"
 23684 ;; Parameters:    Size  Location     Type
 23685 ;;  myLog           2   17[COMRAM] int 
 23686 ;; Auto vars:     Size  Location     Type
 23687 ;;		None
 23688 ;; Return value:  Size  Location     Type
 23689 ;;                  1    wreg      void 
 23690 ;; Registers used:
 23691 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23692 ;; Tracked objects:
 23693 ;;		On entry : 0/0
 23694 ;;		On exit  : 0/0
 23695 ;;		Unchanged: 0/0
 23696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23697 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23700 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23701 ;;Total ram usage:        2 bytes
 23702 ;; Hardware stack levels used:    1
 23703 ;; Hardware stack levels required when called:    2
 23704 ;; This function calls:
 23705 ;;		_retrieveLog
 23706 ;; This function is called by:
 23707 ;;		_updateMenu
 23708 ;; This function uses a non-reentrant model
 23709 ;;
 23710                           
 23711                           	psect	text82
 23712  005FB6                     __ptext82:
 23713                           	opt stack 0
 23714  005FB6                     _dispLogs:
 23715                           	opt stack 20
 23716                           
 23717                           ;UI.c: 471: logstate = 1;
 23718                           
 23719                           ;incstack = 0
 23720  005FB6  0E00               	movlw	0
 23721  005FB8  0100               	movlb	0	; () banked
 23722  005FBA  6FF9               	movwf	(_logstate+1)& (0+255),b
 23723  005FBC  0E01               	movlw	1
 23724  005FBE  6FF8               	movwf	_logstate& (0+255),b
 23725                           
 23726                           ; BSR set to: 0
 23727                           ;UI.c: 472: log = myLog;
 23728  005FC0  C012  F0F0         	movff	dispLogs@myLog,_log
 23729  005FC4  C013  F0F1         	movff	dispLogs@myLog+1,_log+1
 23730                           
 23731                           ; BSR set to: 0
 23732                           ;UI.c: 473: retrieveLog(myLog - 1);
 23733  005FC8  0EFF               	movlw	255
 23734  005FCA  2412               	addwf	dispLogs@myLog,w,c
 23735  005FCC  6E07               	movwf	retrieveLog@logNum,c
 23736  005FCE  0EFF               	movlw	255
 23737  005FD0  2013               	addwfc	dispLogs@myLog+1,w,c
 23738  005FD2  6E08               	movwf	retrieveLog@logNum+1,c
 23739  005FD4  EC25  F022         	call	_retrieveLog	;wreg free
 23740  005FD8  0012               	return		;funcret
 23741  005FDA                     __end_of_dispLogs:
 23742                           	opt stack 0
 23743                           pclatu	equ	0xFFB
 23744                           pclath	equ	0xFFA
 23745                           tblptru	equ	0xFF8
 23746                           tblptrh	equ	0xFF7
 23747                           tblptrl	equ	0xFF6
 23748                           tablat	equ	0xFF5
 23749                           prodh	equ	0xFF4
 23750                           prodl	equ	0xFF3
 23751                           intcon	equ	0xFF2
 23752                           intcon2	equ	0xFF1
 23753                           intcon3	equ	0xFF0
 23754                           indf0	equ	0xFEF
 23755                           postinc0	equ	0xFEE
 23756                           fsr0h	equ	0xFEA
 23757                           fsr0l	equ	0xFE9
 23758                           wreg	equ	0xFE8
 23759                           postdec1	equ	0xFE5
 23760                           fsr1h	equ	0xFE2
 23761                           fsr1l	equ	0xFE1
 23762                           indf2	equ	0xFDF
 23763                           postinc2	equ	0xFDE
 23764                           postdec2	equ	0xFDD
 23765                           fsr2h	equ	0xFDA
 23766                           fsr2l	equ	0xFD9
 23767                           status	equ	0xFD8
 23768                           
 23769 ;; *************** function _retrieveLog *****************
 23770 ;; Defined at:
 23771 ;;		line 138 in file "EEPROM.c"
 23772 ;; Parameters:    Size  Location     Type
 23773 ;;  logNum          2    6[COMRAM] int 
 23774 ;; Auto vars:     Size  Location     Type
 23775 ;;  i               2   13[COMRAM] int 
 23776 ;;  addr            2   15[COMRAM] unsigned short 
 23777 ;;  byte3           1   12[COMRAM] unsigned char 
 23778 ;;  byte2           1   11[COMRAM] unsigned char 
 23779 ;;  byte1           1   10[COMRAM] unsigned char 
 23780 ;; Return value:  Size  Location     Type
 23781 ;;                  1    wreg      void 
 23782 ;; Registers used:
 23783 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23784 ;; Tracked objects:
 23785 ;;		On entry : 0/0
 23786 ;;		On exit  : 0/0
 23787 ;;		Unchanged: 0/0
 23788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23789 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23790 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23791 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23792 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23793 ;;Total ram usage:       11 bytes
 23794 ;; Hardware stack levels used:    1
 23795 ;; Hardware stack levels required when called:    1
 23796 ;; This function calls:
 23797 ;;		i2_EEPROM_read
 23798 ;;		i2___wmul
 23799 ;; This function is called by:
 23800 ;;		_dispLogs
 23801 ;; This function uses a non-reentrant model
 23802 ;;
 23803                           
 23804                           	psect	text83
 23805  00444A                     __ptext83:
 23806                           	opt stack 0
 23807  00444A                     _retrieveLog:
 23808                           	opt stack 20
 23809                           
 23810                           ;EEPROM.c: 144: unsigned short addr = 1 + logNum * 11;
 23811                           
 23812                           ;incstack = 0
 23813  00444A  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 23814  00444E  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 23815  004452  0E00               	movlw	0
 23816  004454  6E04               	movwf	i2___wmul@multiplicand+1,c
 23817  004456  0E0B               	movlw	11
 23818  004458  6E03               	movwf	i2___wmul@multiplicand,c
 23819  00445A  ECB5  F02F         	call	i2___wmul	;wreg free
 23820  00445E  0E01               	movlw	1
 23821  004460  2401               	addwf	?i2___wmul,w,c
 23822  004462  6E10               	movwf	retrieveLog@addr,c
 23823  004464  0E00               	movlw	0
 23824  004466  2002               	addwfc	?i2___wmul+1,w,c
 23825  004468  6E11               	movwf	retrieveLog@addr+1,c
 23826                           
 23827                           ;EEPROM.c: 147: unsigned char byte1 = EEPROM_read(addr);
 23828  00446A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23829  00446E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23830  004472  EC43  F030         	call	i2_EEPROM_read	;wreg free
 23831  004476  6E0B               	movwf	retrieveLog@byte1,c
 23832                           
 23833                           ;EEPROM.c: 148: log_completion = (int)(byte1 & 0b10000000);
 23834  004478  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 23835  00447C  0E80               	movlw	128
 23836  00447E  1609               	andwf	??_retrieveLog,f,c
 23837  004480  5009               	movf	??_retrieveLog,w,c
 23838  004482  0100               	movlb	0	; () banked
 23839  004484  6FF2               	movwf	_log_completion& (0+255),b
 23840  004486  6BF3               	clrf	(_log_completion+1)& (0+255),b
 23841                           
 23842                           ; BSR set to: 0
 23843                           ;EEPROM.c: 149: log_count_total = (int)(byte1 & 0b00001111);
 23844  004488  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 23845  00448C  0E0F               	movlw	15
 23846  00448E  1609               	andwf	??_retrieveLog,f,c
 23847  004490  5009               	movf	??_retrieveLog,w,c
 23848  004492  0101               	movlb	1	; () banked
 23849  004494  6F45               	movwf	_log_count_total& (0+255),b
 23850  004496  6B46               	clrf	(_log_count_total+1)& (0+255),b
 23851                           
 23852                           ; BSR set to: 1
 23853                           ;EEPROM.c: 150: addr++;
 23854  004498  4A10               	infsnz	retrieveLog@addr,f,c
 23855  00449A  2A11               	incf	retrieveLog@addr+1,f,c
 23856                           
 23857                           ; BSR set to: 1
 23858                           ;EEPROM.c: 153: unsigned char byte2 = EEPROM_read(addr);
 23859  00449C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23860  0044A0  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23861  0044A4  EC43  F030         	call	i2_EEPROM_read	;wreg free
 23862  0044A8  6E0C               	movwf	retrieveLog@byte2,c
 23863                           
 23864                           ;EEPROM.c: 154: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 23865  0044AA  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23866  0044AE  3A09               	swapf	??_retrieveLog,f,c
 23867  0044B0  0E0F               	movlw	15
 23868  0044B2  1609               	andwf	??_retrieveLog,f,c
 23869  0044B4  0E0F               	movlw	15
 23870  0044B6  1609               	andwf	??_retrieveLog,f,c
 23871  0044B8  5009               	movf	??_retrieveLog,w,c
 23872  0044BA  0100               	movlb	0	; () banked
 23873  0044BC  6FF4               	movwf	_log_count_pop_no_tab& (0+255),b
 23874  0044BE  6BF5               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 23875                           
 23876                           ; BSR set to: 0
 23877                           ;EEPROM.c: 155: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 23878  0044C0  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23879  0044C4  0E0F               	movlw	15
 23880  0044C6  1609               	andwf	??_retrieveLog,f,c
 23881  0044C8  5009               	movf	??_retrieveLog,w,c
 23882  0044CA  6E69               	movwf	_log_count_pop_w_tab,c
 23883  0044CC  6A6A               	clrf	_log_count_pop_w_tab+1,c
 23884                           
 23885                           ; BSR set to: 0
 23886                           ;EEPROM.c: 156: addr++;
 23887  0044CE  4A10               	infsnz	retrieveLog@addr,f,c
 23888  0044D0  2A11               	incf	retrieveLog@addr+1,f,c
 23889                           
 23890                           ; BSR set to: 0
 23891                           ;EEPROM.c: 157: unsigned char byte3 = EEPROM_read(addr);
 23892  0044D2  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23893  0044D6  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23894  0044DA  EC43  F030         	call	i2_EEPROM_read	;wreg free
 23895  0044DE  6E0D               	movwf	retrieveLog@byte3,c
 23896                           
 23897                           ;EEPROM.c: 158: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 23898  0044E0  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23899  0044E4  3A09               	swapf	??_retrieveLog,f,c
 23900  0044E6  0E0F               	movlw	15
 23901  0044E8  1609               	andwf	??_retrieveLog,f,c
 23902  0044EA  0E0F               	movlw	15
 23903  0044EC  1609               	andwf	??_retrieveLog,f,c
 23904  0044EE  5009               	movf	??_retrieveLog,w,c
 23905  0044F0  0101               	movlb	1	; () banked
 23906  0044F2  6F43               	movwf	_log_count_can_w_lab& (0+255),b
 23907  0044F4  6B44               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 23908                           
 23909                           ; BSR set to: 1
 23910                           ;EEPROM.c: 159: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 23911  0044F6  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23912  0044FA  0E0F               	movlw	15
 23913  0044FC  1609               	andwf	??_retrieveLog,f,c
 23914  0044FE  5009               	movf	??_retrieveLog,w,c
 23915  004500  0101               	movlb	1	; () banked
 23916  004502  6F41               	movwf	_log_count_can_no_lab& (0+255),b
 23917  004504  6B42               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 23918                           
 23919                           ; BSR set to: 1
 23920                           ;EEPROM.c: 160: addr++;
 23921  004506  4A10               	infsnz	retrieveLog@addr,f,c
 23922  004508  2A11               	incf	retrieveLog@addr+1,f,c
 23923                           
 23924                           ; BSR set to: 1
 23925                           ;EEPROM.c: 163: for(int i = 0; i < 7; i++){
 23926  00450A  0E00               	movlw	0
 23927  00450C  6E0F               	movwf	retrieveLog@i+1,c
 23928  00450E  0E00               	movlw	0
 23929  004510  6E0E               	movwf	retrieveLog@i,c
 23930  004512                     i2l7564:
 23931                           
 23932                           ; BSR set to: 1
 23933  004512  BE0F               	btfsc	retrieveLog@i+1,7,c
 23934  004514  D006               	goto	i2l7568
 23935  004516  500F               	movf	retrieveLog@i+1,w,c
 23936  004518  E11E               	bnz	i2l7576
 23937  00451A  0E07               	movlw	7
 23938  00451C  5C0E               	subwf	retrieveLog@i,w,c
 23939  00451E  B0D8               	btfsc	status,0,c
 23940  004520  D01A               	goto	i2l7576
 23941  004522                     i2l7568:
 23942                           
 23943                           ;EEPROM.c: 164: log_startTime[i] = (int)EEPROM_read(addr);
 23944  004522  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23945  004526  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23946  00452A  EC43  F030         	call	i2_EEPROM_read	;wreg free
 23947  00452E  6E09               	movwf	??_retrieveLog& (0+255),c
 23948  004530  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 23949  004532  90D8               	bcf	status,0,c
 23950  004534  340E               	rlcf	retrieveLog@i,w,c
 23951  004536  6ED9               	movwf	fsr2l,c
 23952  004538  340F               	rlcf	retrieveLog@i+1,w,c
 23953  00453A  6EDA               	movwf	fsr2h,c
 23954  00453C  0E00               	movlw	low _log_startTime
 23955  00453E  26D9               	addwf	fsr2l,f,c
 23956  004540  0E01               	movlw	high _log_startTime
 23957  004542  22DA               	addwfc	fsr2h,f,c
 23958  004544  C009  FFDE         	movff	??_retrieveLog,postinc2
 23959  004548  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 23960                           
 23961                           ;EEPROM.c: 165: addr++;
 23962  00454C  4A10               	infsnz	retrieveLog@addr,f,c
 23963  00454E  2A11               	incf	retrieveLog@addr+1,f,c
 23964  004550  4A0E               	infsnz	retrieveLog@i,f,c
 23965  004552  2A0F               	incf	retrieveLog@i+1,f,c
 23966  004554  D7DE               	goto	i2l7564
 23967  004556                     i2l7576:
 23968                           
 23969                           ;EEPROM.c: 166: }
 23970                           ;EEPROM.c: 169: log_total_time = (int)EEPROM_read(addr);
 23971  004556  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23972  00455A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23973  00455E  EC43  F030         	call	i2_EEPROM_read	;wreg free
 23974  004562  6E09               	movwf	??_retrieveLog& (0+255),c
 23975  004564  5009               	movf	??_retrieveLog,w,c
 23976  004566  0100               	movlb	0	; () banked
 23977  004568  6FF6               	movwf	_log_total_time& (0+255),b
 23978  00456A  6BF7               	clrf	(_log_total_time+1)& (0+255),b
 23979                           
 23980                           ; BSR set to: 0
 23981  00456C  0012               	return		;funcret
 23982  00456E                     __end_of_retrieveLog:
 23983                           	opt stack 0
 23984                           pclatu	equ	0xFFB
 23985                           pclath	equ	0xFFA
 23986                           tblptru	equ	0xFF8
 23987                           tblptrh	equ	0xFF7
 23988                           tblptrl	equ	0xFF6
 23989                           tablat	equ	0xFF5
 23990                           prodh	equ	0xFF4
 23991                           prodl	equ	0xFF3
 23992                           intcon	equ	0xFF2
 23993                           intcon2	equ	0xFF1
 23994                           intcon3	equ	0xFF0
 23995                           indf0	equ	0xFEF
 23996                           postinc0	equ	0xFEE
 23997                           fsr0h	equ	0xFEA
 23998                           fsr0l	equ	0xFE9
 23999                           wreg	equ	0xFE8
 24000                           postdec1	equ	0xFE5
 24001                           fsr1h	equ	0xFE2
 24002                           fsr1l	equ	0xFE1
 24003                           indf2	equ	0xFDF
 24004                           postinc2	equ	0xFDE
 24005                           postdec2	equ	0xFDD
 24006                           fsr2h	equ	0xFDA
 24007                           fsr2l	equ	0xFD9
 24008                           status	equ	0xFD8
 24009                           
 24010 ;; *************** function i2_EEPROM_read *****************
 24011 ;; Defined at:
 24012 ;;		line 72 in file "EEPROM.c"
 24013 ;; Parameters:    Size  Location     Type
 24014 ;;  address         2    0[COMRAM] unsigned short 
 24015 ;; Auto vars:     Size  Location     Type
 24016 ;;		None
 24017 ;; Return value:  Size  Location     Type
 24018 ;;                  1    wreg      unsigned char 
 24019 ;; Registers used:
 24020 ;;		wreg, status,2
 24021 ;; Tracked objects:
 24022 ;;		On entry : 0/0
 24023 ;;		On exit  : 0/0
 24024 ;;		Unchanged: 0/0
 24025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24026 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24029 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24030 ;;Total ram usage:        2 bytes
 24031 ;; Hardware stack levels used:    1
 24032 ;; This function calls:
 24033 ;;		Nothing
 24034 ;; This function is called by:
 24035 ;;		_retrieveLog
 24036 ;; This function uses a non-reentrant model
 24037 ;;
 24038                           
 24039                           	psect	text84
 24040  006086                     __ptext84:
 24041                           	opt stack 0
 24042  006086                     i2_EEPROM_read:
 24043                           	opt stack 20
 24044                           
 24045                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
 24046                           
 24047                           ; BSR set to: 0
 24048                           ;incstack = 0
 24049  006086  5002               	movf	i2EEPROM_read@address+1,w,c
 24050  006088  6EAA               	movwf	4010,c	;volatile
 24051                           
 24052                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
 24053  00608A  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 24054                           
 24055                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
 24056  00608E  9EA6               	bcf	4006,7,c	;volatile
 24057                           
 24058                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
 24059  006090  9CA6               	bcf	4006,6,c	;volatile
 24060                           
 24061                           ;EEPROM.c: 79: EECON1bits.RD = 1;
 24062  006092  80A6               	bsf	4006,0,c	;volatile
 24063  006094                     i2l1174:
 24064  006094  B0A6               	btfsc	4006,0,c	;volatile
 24065  006096  D7FE               	goto	i2l1174
 24066                           
 24067                           ;EEPROM.c: 85: return EEDATA;
 24068  006098  50A8               	movf	4008,w,c	;volatile
 24069  00609A  0012               	return	
 24070  00609C                     __end_ofi2_EEPROM_read:
 24071                           	opt stack 0
 24072                           pclatu	equ	0xFFB
 24073                           pclath	equ	0xFFA
 24074                           tblptru	equ	0xFF8
 24075                           tblptrh	equ	0xFF7
 24076                           tblptrl	equ	0xFF6
 24077                           tablat	equ	0xFF5
 24078                           prodh	equ	0xFF4
 24079                           prodl	equ	0xFF3
 24080                           intcon	equ	0xFF2
 24081                           intcon2	equ	0xFF1
 24082                           intcon3	equ	0xFF0
 24083                           indf0	equ	0xFEF
 24084                           postinc0	equ	0xFEE
 24085                           fsr0h	equ	0xFEA
 24086                           fsr0l	equ	0xFE9
 24087                           wreg	equ	0xFE8
 24088                           postdec1	equ	0xFE5
 24089                           fsr1h	equ	0xFE2
 24090                           fsr1l	equ	0xFE1
 24091                           indf2	equ	0xFDF
 24092                           postinc2	equ	0xFDE
 24093                           postdec2	equ	0xFDD
 24094                           fsr2h	equ	0xFDA
 24095                           fsr2l	equ	0xFD9
 24096                           status	equ	0xFD8
 24097                           
 24098 ;; *************** function _updateArmState *****************
 24099 ;; Defined at:
 24100 ;;		line 727 in file "sort.c"
 24101 ;; Parameters:    Size  Location     Type
 24102 ;;		None
 24103 ;; Auto vars:     Size  Location     Type
 24104 ;;		None
 24105 ;; Return value:  Size  Location     Type
 24106 ;;                  1    wreg      void 
 24107 ;; Registers used:
 24108 ;;		wreg, status,2, status,0
 24109 ;; Tracked objects:
 24110 ;;		On entry : 0/0
 24111 ;;		On exit  : 0/0
 24112 ;;		Unchanged: 0/0
 24113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24116 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24117 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24118 ;;Total ram usage:        2 bytes
 24119 ;; Hardware stack levels used:    1
 24120 ;; This function calls:
 24121 ;;		Nothing
 24122 ;; This function is called by:
 24123 ;;		_handler
 24124 ;; This function uses a non-reentrant model
 24125 ;;
 24126                           
 24127                           	psect	text85
 24128  005AE4                     __ptext85:
 24129                           	opt stack 0
 24130  005AE4                     _updateArmState:
 24131                           	opt stack 23
 24132                           
 24133                           ;sort.c: 734: if(!was_low_2){
 24134                           
 24135                           ;incstack = 0
 24136  005AE4  5079               	movf	_was_low_2,w,c	;volatile
 24137  005AE6  107A               	iorwf	_was_low_2+1,w,c	;volatile
 24138  005AE8  B4D8               	btfsc	status,2,c
 24139  005AEA  D007               	goto	i2l10560
 24140  005AEC  D016               	goto	i2l990
 24141  005AEE                     i2l10554:
 24142                           
 24143                           ;sort.c: 739: PR2 = 0x20;
 24144  005AEE  0E20               	movlw	32
 24145  005AF0  6ECB               	movwf	4043,c	;volatile
 24146                           
 24147                           ;sort.c: 740: break;
 24148  005AF2  0012               	return	
 24149  005AF4                     i2l10556:
 24150                           
 24151                           ;sort.c: 743: PR2 = 0x40;
 24152  005AF4  0E40               	movlw	64
 24153  005AF6  6ECB               	movwf	4043,c	;volatile
 24154                           
 24155                           ;sort.c: 745: }
 24156                           
 24157                           ;sort.c: 744: break;
 24158  005AF8  0012               	return	
 24159  005AFA                     i2l10560:
 24160  005AFA  C0EA  F001         	movff	_f_arm_position,??_updateArmState	;volatile
 24161  005AFE  C0EB  F002         	movff	_f_arm_position+1,??_updateArmState+1	;volatile
 24162                           
 24163                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 24164                           ; Switch size 1, requested type "space"
 24165                           ; Number of cases is 1, Range of values is 0 to 0
 24166                           ; switch strategies available:
 24167                           ; Name         Instructions Cycles
 24168                           ; simple_byte            4     3 (average)
 24169                           ;	Chosen strategy is simple_byte
 24170  005B02  5002               	movf	??_updateArmState+1,w,c
 24171  005B04  0A00               	xorlw	0	; case 0
 24172  005B06  A4D8               	btfss	status,2,c
 24173  005B08  0012               	return	
 24174                           
 24175                           ; Switch size 1, requested type "space"
 24176                           ; Number of cases is 2, Range of values is 0 to 1
 24177                           ; switch strategies available:
 24178                           ; Name         Instructions Cycles
 24179                           ; simple_byte            7     4 (average)
 24180                           ;	Chosen strategy is simple_byte
 24181  005B0A  5001               	movf	??_updateArmState,w,c
 24182  005B0C  0A00               	xorlw	0	; case 0
 24183  005B0E  B4D8               	btfsc	status,2,c
 24184  005B10  D7EE               	goto	i2l10554
 24185  005B12  0A01               	xorlw	1	; case 1
 24186  005B14  A4D8               	btfss	status,2,c
 24187                           
 24188                           ;sort.c: 746: }
 24189  005B16  0012               	return	
 24190  005B18  D7ED               	goto	i2l10556
 24191  005B1A                     i2l990:
 24192                           
 24193                           ;sort.c: 747: else{
 24194                           ;sort.c: 749: PR2 = 0xFF;
 24195  005B1A  68CB               	setf	4043,c	;volatile
 24196  005B1C  0012               	return	
 24197  005B1E                     __end_of_updateArmState:
 24198                           	opt stack 0
 24199                           pclatu	equ	0xFFB
 24200                           pclath	equ	0xFFA
 24201                           tblptru	equ	0xFF8
 24202                           tblptrh	equ	0xFF7
 24203                           tblptrl	equ	0xFF6
 24204                           tablat	equ	0xFF5
 24205                           prodh	equ	0xFF4
 24206                           prodl	equ	0xFF3
 24207                           intcon	equ	0xFF2
 24208                           intcon2	equ	0xFF1
 24209                           intcon3	equ	0xFF0
 24210                           indf0	equ	0xFEF
 24211                           postinc0	equ	0xFEE
 24212                           fsr0h	equ	0xFEA
 24213                           fsr0l	equ	0xFE9
 24214                           wreg	equ	0xFE8
 24215                           postdec1	equ	0xFE5
 24216                           fsr1h	equ	0xFE2
 24217                           fsr1l	equ	0xFE1
 24218                           indf2	equ	0xFDF
 24219                           postinc2	equ	0xFDE
 24220                           postdec2	equ	0xFDD
 24221                           fsr2h	equ	0xFDA
 24222                           fsr2l	equ	0xFD9
 24223                           status	equ	0xFD8
 24224                           
 24225 ;; *************** function _printSortTimer *****************
 24226 ;; Defined at:
 24227 ;;		line 545 in file "sort.c"
 24228 ;; Parameters:    Size  Location     Type
 24229 ;;		None
 24230 ;; Auto vars:     Size  Location     Type
 24231 ;;  i               2   70[COMRAM] int 
 24232 ;;  curTime        14   44[COMRAM] int [7]
 24233 ;;  timeDiff        2   68[COMRAM] unsigned int 
 24234 ;;  sec             2   64[COMRAM] int 
 24235 ;;  min             2   62[COMRAM] int 
 24236 ;;  cur_sec         2   60[COMRAM] unsigned int 
 24237 ;;  start_sec       2   58[COMRAM] unsigned int 
 24238 ;; Return value:  Size  Location     Type
 24239 ;;                  1    wreg      void 
 24240 ;; Registers used:
 24241 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24242 ;; Tracked objects:
 24243 ;;		On entry : 0/0
 24244 ;;		On exit  : 0/0
 24245 ;;		Unchanged: 0/0
 24246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24248 ;;      Locals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24249 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24250 ;;      Totals:        31       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24251 ;;Total ram usage:       31 bytes
 24252 ;; Hardware stack levels used:    1
 24253 ;; Hardware stack levels required when called:    3
 24254 ;; This function calls:
 24255 ;;		i2___awmod
 24256 ;;		i2___lwdiv
 24257 ;;		i2___lwmod
 24258 ;;		i2___wmul
 24259 ;;		i2_getRTC
 24260 ;;		i2_lcdInst
 24261 ;;		i2_printf
 24262 ;; This function is called by:
 24263 ;;		_handler
 24264 ;; This function uses a non-reentrant model
 24265 ;;
 24266                           
 24267                           	psect	text86
 24268  0029DA                     __ptext86:
 24269                           	opt stack 0
 24270  0029DA                     _printSortTimer:
 24271                           	opt stack 20
 24272                           
 24273                           ;sort.c: 546: getRTC();
 24274                           
 24275                           ;incstack = 0
 24276  0029DA  ECA3  F02A         	call	i2_getRTC	;wreg free
 24277                           
 24278                           ;sort.c: 547: int curTime[7];
 24279                           ;sort.c: 548: for(int i = 0; i < 7; i++){
 24280  0029DE  0E00               	movlw	0
 24281  0029E0  6E48               	movwf	printSortTimer@i+1,c
 24282  0029E2  0E00               	movlw	0
 24283  0029E4  6E47               	movwf	printSortTimer@i,c
 24284  0029E6                     i2l10366:
 24285  0029E6  BE48               	btfsc	printSortTimer@i+1,7,c
 24286  0029E8  D006               	goto	i2l10370
 24287  0029EA  5048               	movf	printSortTimer@i+1,w,c
 24288  0029EC  E131               	bnz	i2l10376
 24289  0029EE  0E07               	movlw	7
 24290  0029F0  5C47               	subwf	printSortTimer@i,w,c
 24291  0029F2  B0D8               	btfsc	status,0,c
 24292  0029F4  D02D               	goto	i2l10376
 24293  0029F6                     i2l10370:
 24294                           
 24295                           ;sort.c: 549: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 24296  0029F6  0E24               	movlw	low _time
 24297  0029F8  2447               	addwf	printSortTimer@i,w,c
 24298  0029FA  6ED9               	movwf	fsr2l,c
 24299  0029FC  0E01               	movlw	high _time
 24300  0029FE  2048               	addwfc	printSortTimer@i+1,w,c
 24301  002A00  6EDA               	movwf	fsr2h,c
 24302  002A02  50DF               	movf	indf2,w,c
 24303  002A04  6E2A               	movwf	??_printSortTimer& (0+255),c
 24304  002A06  3A2A               	swapf	??_printSortTimer,f,c
 24305  002A08  0E0F               	movlw	15
 24306  002A0A  162A               	andwf	??_printSortTimer,f,c
 24307  002A0C  0E0F               	movlw	15
 24308  002A0E  162A               	andwf	??_printSortTimer,f,c
 24309  002A10  502A               	movf	??_printSortTimer,w,c
 24310  002A12  0D0A               	mullw	10
 24311  002A14  0E24               	movlw	low _time
 24312  002A16  2447               	addwf	printSortTimer@i,w,c
 24313  002A18  6ED9               	movwf	fsr2l,c
 24314  002A1A  0E01               	movlw	high _time
 24315  002A1C  2048               	addwfc	printSortTimer@i+1,w,c
 24316  002A1E  6EDA               	movwf	fsr2h,c
 24317  002A20  50DF               	movf	indf2,w,c
 24318  002A22  0B0F               	andlw	15
 24319  002A24  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 24320  002A26  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 24321  002A28  50F3               	movf	prodl,w,c
 24322  002A2A  262B               	addwf	??_printSortTimer+1,f,c
 24323  002A2C  50F4               	movf	prodh,w,c
 24324  002A2E  222C               	addwfc	??_printSortTimer+2,f,c
 24325  002A30  90D8               	bcf	status,0,c
 24326  002A32  3447               	rlcf	printSortTimer@i,w,c
 24327  002A34  6ED9               	movwf	fsr2l,c
 24328  002A36  3448               	rlcf	printSortTimer@i+1,w,c
 24329  002A38  6EDA               	movwf	fsr2h,c
 24330  002A3A  0E2D               	movlw	low printSortTimer@curTime
 24331  002A3C  26D9               	addwf	fsr2l,f,c
 24332  002A3E  0E00               	movlw	high printSortTimer@curTime
 24333  002A40  22DA               	addwfc	fsr2h,f,c
 24334  002A42  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 24335  002A46  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 24336  002A4A  4A47               	infsnz	printSortTimer@i,f,c
 24337  002A4C  2A48               	incf	printSortTimer@i+1,f,c
 24338  002A4E  D7CB               	goto	i2l10366
 24339  002A50                     i2l10376:
 24340                           
 24341                           ;sort.c: 550: }
 24342                           ;sort.c: 551: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 24343  002A50  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 24344  002A54  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 24345  002A58  0E00               	movlw	0
 24346  002A5A  6E04               	movwf	i2___wmul@multiplicand+1,c
 24347  002A5C  0E3C               	movlw	60
 24348  002A5E  6E03               	movwf	i2___wmul@multiplicand,c
 24349  002A60  ECB5  F02F         	call	i2___wmul	;wreg free
 24350  002A64  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 24351  002A68  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 24352  002A6C  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 24353  002A70  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 24354  002A74  0E0E               	movlw	14
 24355  002A76  6E04               	movwf	i2___wmul@multiplicand+1,c
 24356  002A78  0E10               	movlw	16
 24357  002A7A  6E03               	movwf	i2___wmul@multiplicand,c
 24358  002A7C  ECB5  F02F         	call	i2___wmul	;wreg free
 24359  002A80  5001               	movf	?i2___wmul,w,c
 24360  002A82  262A               	addwf	??_printSortTimer,f,c
 24361  002A84  5002               	movf	?i2___wmul+1,w,c
 24362  002A86  222B               	addwfc	??_printSortTimer+1,f,c
 24363  002A88  0101               	movlb	1	; () banked
 24364  002A8A  510E               	movf	_startTime& (0+255),w,b
 24365  002A8C  242A               	addwf	??_printSortTimer,w,c
 24366  002A8E  6E3B               	movwf	printSortTimer@start_sec,c
 24367  002A90  0101               	movlb	1	; () banked
 24368  002A92  510F               	movf	(_startTime+1)& (0+255),w,b
 24369  002A94  202B               	addwfc	??_printSortTimer+1,w,c
 24370  002A96  6E3C               	movwf	printSortTimer@start_sec+1,c
 24371                           
 24372                           ;sort.c: 552: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 24373  002A98  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 24374  002A9C  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 24375  002AA0  0E00               	movlw	0
 24376  002AA2  6E04               	movwf	i2___wmul@multiplicand+1,c
 24377  002AA4  0E3C               	movlw	60
 24378  002AA6  6E03               	movwf	i2___wmul@multiplicand,c
 24379  002AA8  ECB5  F02F         	call	i2___wmul	;wreg free
 24380  002AAC  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 24381  002AB0  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 24382  002AB4  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 24383  002AB8  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 24384  002ABC  0E0E               	movlw	14
 24385  002ABE  6E04               	movwf	i2___wmul@multiplicand+1,c
 24386  002AC0  0E10               	movlw	16
 24387  002AC2  6E03               	movwf	i2___wmul@multiplicand,c
 24388  002AC4  ECB5  F02F         	call	i2___wmul	;wreg free
 24389  002AC8  5001               	movf	?i2___wmul,w,c
 24390  002ACA  262A               	addwf	??_printSortTimer,f,c
 24391  002ACC  5002               	movf	?i2___wmul+1,w,c
 24392  002ACE  222B               	addwfc	??_printSortTimer+1,f,c
 24393  002AD0  502D               	movf	printSortTimer@curTime,w,c
 24394  002AD2  242A               	addwf	??_printSortTimer,w,c
 24395  002AD4  6E3D               	movwf	printSortTimer@cur_sec,c
 24396  002AD6  502E               	movf	printSortTimer@curTime+1,w,c
 24397  002AD8  202B               	addwfc	??_printSortTimer+1,w,c
 24398  002ADA  6E3E               	movwf	printSortTimer@cur_sec+1,c
 24399                           
 24400                           ;sort.c: 553: unsigned int timeDiff = cur_sec - start_sec;
 24401  002ADC  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 24402  002AE0  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 24403  002AE4  1E2A               	comf	??_printSortTimer,f,c
 24404  002AE6  1E2B               	comf	??_printSortTimer+1,f,c
 24405  002AE8  4A2A               	infsnz	??_printSortTimer,f,c
 24406  002AEA  2A2B               	incf	??_printSortTimer+1,f,c
 24407  002AEC  503D               	movf	printSortTimer@cur_sec,w,c
 24408  002AEE  242A               	addwf	??_printSortTimer,w,c
 24409  002AF0  6E45               	movwf	printSortTimer@timeDiff,c
 24410  002AF2  503E               	movf	printSortTimer@cur_sec+1,w,c
 24411  002AF4  202B               	addwfc	??_printSortTimer+1,w,c
 24412  002AF6  6E46               	movwf	printSortTimer@timeDiff+1,c
 24413                           
 24414                           ;sort.c: 555: total_time = timeDiff;
 24415  002AF8  C045  F0FA         	movff	printSortTimer@timeDiff,_total_time
 24416  002AFC  C046  F0FB         	movff	printSortTimer@timeDiff+1,_total_time+1
 24417                           
 24418                           ;sort.c: 557: if(f_most_recent_sort_time){
 24419  002B00  0101               	movlb	1	; () banked
 24420  002B02  5139               	movf	_f_most_recent_sort_time& (0+255),w,b
 24421  002B04  0101               	movlb	1	; () banked
 24422  002B06  113A               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 24423  002B08  B4D8               	btfsc	status,2,c
 24424  002B0A  D009               	goto	i2l10388
 24425                           
 24426                           ; BSR set to: 1
 24427                           ;sort.c: 558: most_recent_sort_time = total_time;
 24428  002B0C  C0FA  F147         	movff	_total_time,_most_recent_sort_time
 24429  002B10  C0FB  F148         	movff	_total_time+1,_most_recent_sort_time+1
 24430                           
 24431                           ; BSR set to: 1
 24432                           ;sort.c: 559: f_most_recent_sort_time = 0;
 24433  002B14  0E00               	movlw	0
 24434  002B16  0101               	movlb	1	; () banked
 24435  002B18  6F3A               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 24436  002B1A  0E00               	movlw	0
 24437  002B1C  6F39               	movwf	_f_most_recent_sort_time& (0+255),b
 24438  002B1E                     i2l10388:
 24439                           
 24440                           ; BSR set to: 1
 24441                           ;sort.c: 560: }
 24442                           ;sort.c: 562: if (total_time == 179){
 24443  002B1E  0EB3               	movlw	179
 24444  002B20  0100               	movlb	0	; () banked
 24445  002B22  19FA               	xorwf	_total_time& (0+255),w,b
 24446  002B24  0100               	movlb	0	; () banked
 24447  002B26  11FB               	iorwf	(_total_time+1)& (0+255),w,b
 24448  002B28  A4D8               	btfss	status,2,c
 24449  002B2A  D004               	goto	i2l10394
 24450                           
 24451                           ; BSR set to: 0
 24452                           ;sort.c: 563: machine_state = DoneSorting_state;
 24453  002B2C  0E02               	movlw	2
 24454  002B2E  0100               	movlb	0	; () banked
 24455  002B30  6FFC               	movwf	_machine_state& (0+255),b
 24456                           
 24457                           ; BSR set to: 0
 24458                           ;sort.c: 565: return;
 24459  002B32  0012               	return	
 24460  002B34                     i2l10394:
 24461                           
 24462                           ; BSR set to: 0
 24463                           ;sort.c: 566: }
 24464                           ;sort.c: 569: if(total_time >= 20){
 24465  002B34  0100               	movlb	0	; () banked
 24466  002B36  BFFB               	btfsc	(_total_time+1)& (0+255),7,b
 24467  002B38  D036               	goto	i2l935
 24468  002B3A  0100               	movlb	0	; () banked
 24469  002B3C  51FB               	movf	(_total_time+1)& (0+255),w,b
 24470  002B3E  E105               	bnz	i2u1038_40
 24471  002B40  0E14               	movlw	20
 24472  002B42  0100               	movlb	0	; () banked
 24473  002B44  5DFA               	subwf	_total_time& (0+255),w,b
 24474  002B46  A0D8               	btfss	status,0,c
 24475  002B48  D02E               	goto	i2l935
 24476  002B4A                     i2u1038_40:
 24477                           
 24478                           ; BSR set to: 0
 24479                           ;sort.c: 570: if(LATBbits.LATB2 == 0){
 24480  002B4A  B48A               	btfsc	3978,2,c	;volatile
 24481  002B4C  D011               	goto	i2l10406
 24482                           
 24483                           ; BSR set to: 0
 24484                           ;sort.c: 571: motor_toggle_count++;
 24485  002B4E  0101               	movlb	1	; () banked
 24486  002B50  4B49               	infsnz	_motor_toggle_count& (0+255),f,b
 24487  002B52  2B4A               	incf	(_motor_toggle_count+1)& (0+255),f,b
 24488                           
 24489                           ; BSR set to: 1
 24490                           ;sort.c: 572: if(motor_toggle_count == 2){
 24491  002B54  0E02               	movlw	2
 24492  002B56  0101               	movlb	1	; () banked
 24493  002B58  1949               	xorwf	_motor_toggle_count& (0+255),w,b
 24494  002B5A  0101               	movlb	1	; () banked
 24495  002B5C  114A               	iorwf	(_motor_toggle_count+1)& (0+255),w,b
 24496  002B5E  A4D8               	btfss	status,2,c
 24497  002B60  D022               	goto	i2l935
 24498                           
 24499                           ; BSR set to: 1
 24500                           ;sort.c: 573: motor_toggle_count = 0;
 24501  002B62  0E00               	movlw	0
 24502  002B64  0101               	movlb	1	; () banked
 24503  002B66  6F4A               	movwf	(_motor_toggle_count+1)& (0+255),b
 24504  002B68  0E00               	movlw	0
 24505  002B6A  6F49               	movwf	_motor_toggle_count& (0+255),b
 24506                           
 24507                           ; BSR set to: 1
 24508                           ;sort.c: 578: LATBbits.LATB2 = 1;
 24509  002B6C  848A               	bsf	3978,2,c	;volatile
 24510                           
 24511                           ; BSR set to: 1
 24512                           ;sort.c: 579: }
 24513                           ;sort.c: 580: }
 24514  002B6E  D01B               	goto	i2l935
 24515  002B70                     i2l10406:
 24516                           
 24517                           ;sort.c: 581: else if(total_time % 20 == 0){
 24518  002B70  C0FA  F001         	movff	_total_time,i2___awmod@dividend
 24519  002B74  C0FB  F002         	movff	_total_time+1,i2___awmod@dividend+1
 24520  002B78  0E00               	movlw	0
 24521  002B7A  6E04               	movwf	i2___awmod@divisor+1,c
 24522  002B7C  0E14               	movlw	20
 24523  002B7E  6E03               	movwf	i2___awmod@divisor,c
 24524  002B80  EC14  F02B         	call	i2___awmod	;wreg free
 24525  002B84  5001               	movf	?i2___awmod,w,c
 24526  002B86  1002               	iorwf	?i2___awmod+1,w,c
 24527  002B88  A4D8               	btfss	status,2,c
 24528  002B8A  D00D               	goto	i2l935
 24529                           
 24530                           ;sort.c: 582: LATBbits.LATB2 = !LATBbits.LATB2;
 24531  002B8C  B48A               	btfsc	3978,2,c	;volatile
 24532  002B8E  D003               	goto	i2u1042_40
 24533  002B90  6A2A               	clrf	??_printSortTimer& (0+255),c
 24534  002B92  2A2A               	incf	??_printSortTimer& (0+255),f,c
 24535  002B94  D001               	goto	i2u1043_48
 24536  002B96                     i2u1042_40:
 24537  002B96  6A2A               	clrf	??_printSortTimer& (0+255),c
 24538  002B98                     i2u1043_48:
 24539  002B98  462A               	rlncf	??_printSortTimer,f,c
 24540  002B9A  462A               	rlncf	??_printSortTimer,f,c
 24541  002B9C  508A               	movf	3978,w,c	;volatile
 24542  002B9E  182A               	xorwf	??_printSortTimer,w,c
 24543  002BA0  0BFB               	andlw	-5
 24544  002BA2  182A               	xorwf	??_printSortTimer,w,c
 24545  002BA4  6E8A               	movwf	3978,c	;volatile
 24546  002BA6                     i2l935:
 24547                           
 24548                           ;sort.c: 583: }
 24549                           ;sort.c: 584: }
 24550                           ;sort.c: 588: if(total_time >= 18 && (total_time < 60)){
 24551  002BA6  0100               	movlb	0	; () banked
 24552  002BA8  BFFB               	btfsc	(_total_time+1)& (0+255),7,b
 24553  002BAA  D030               	goto	i2l10420
 24554  002BAC  0100               	movlb	0	; () banked
 24555  002BAE  51FB               	movf	(_total_time+1)& (0+255),w,b
 24556  002BB0  E105               	bnz	i2u1044_40
 24557  002BB2  0E12               	movlw	18
 24558  002BB4  0100               	movlb	0	; () banked
 24559  002BB6  5DFA               	subwf	_total_time& (0+255),w,b
 24560  002BB8  A0D8               	btfss	status,0,c
 24561  002BBA  D028               	goto	i2l10420
 24562  002BBC                     i2u1044_40:
 24563                           
 24564                           ; BSR set to: 0
 24565  002BBC  0100               	movlb	0	; () banked
 24566  002BBE  BFFB               	btfsc	(_total_time+1)& (0+255),7,b
 24567  002BC0  D008               	goto	i2l10412
 24568  002BC2  0100               	movlb	0	; () banked
 24569  002BC4  51FB               	movf	(_total_time+1)& (0+255),w,b
 24570  002BC6  E122               	bnz	i2l10420
 24571  002BC8  0E3C               	movlw	60
 24572  002BCA  0100               	movlb	0	; () banked
 24573  002BCC  5DFA               	subwf	_total_time& (0+255),w,b
 24574  002BCE  B0D8               	btfsc	status,0,c
 24575  002BD0  D01D               	goto	i2l10420
 24576  002BD2                     i2l10412:
 24577                           
 24578                           ; BSR set to: 0
 24579                           ;sort.c: 589: if(total_time % 18 == 0){
 24580  002BD2  C0FA  F001         	movff	_total_time,i2___awmod@dividend
 24581  002BD6  C0FB  F002         	movff	_total_time+1,i2___awmod@dividend+1
 24582  002BDA  0E00               	movlw	0
 24583  002BDC  6E04               	movwf	i2___awmod@divisor+1,c
 24584  002BDE  0E12               	movlw	18
 24585  002BE0  6E03               	movwf	i2___awmod@divisor,c
 24586  002BE2  EC14  F02B         	call	i2___awmod	;wreg free
 24587  002BE6  5001               	movf	?i2___awmod,w,c
 24588  002BE8  1002               	iorwf	?i2___awmod+1,w,c
 24589  002BEA  A4D8               	btfss	status,2,c
 24590  002BEC  D041               	goto	i2l10432
 24591                           
 24592                           ;sort.c: 590: LATBbits.LATB0 = 1;
 24593  002BEE  808A               	bsf	3978,0,c	;volatile
 24594                           
 24595                           ;sort.c: 591: _delay((unsigned long)((200)*(32000000/4000.0)));
 24596  002BF0  0E09               	movlw	9
 24597  002BF2  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 24598  002BF4  0E1E               	movlw	30
 24599  002BF6  6E2A               	movwf	??_printSortTimer& (0+255),c
 24600  002BF8  0EE4               	movlw	228
 24601  002BFA                     i2u1241_47:
 24602  002BFA  2EE8               	decfsz	wreg,f,c
 24603  002BFC  D7FE               	bra	i2u1241_47
 24604  002BFE  2E2A               	decfsz	??_printSortTimer& (0+255),f,c
 24605  002C00  D7FC               	bra	i2u1241_47
 24606  002C02  2E2B               	decfsz	(??_printSortTimer+1)& (0+255),f,c
 24607  002C04  D7FA               	bra	i2u1241_47
 24608  002C06  D032               	goto	L19
 24609  002C08                     i2l10418:
 24610                           
 24611                           ;sort.c: 592: LATBbits.LATB0 = 0;
 24612  002C08  908A               	bcf	3978,0,c	;volatile
 24613                           
 24614                           ;sort.c: 593: }
 24615                           ;sort.c: 594: }
 24616  002C0A  D032               	goto	i2l10432
 24617  002C0C                     i2l10420:
 24618                           
 24619                           ;sort.c: 595: else if(total_time >= 18 && (total_time >= 60)){
 24620  002C0C  0100               	movlb	0	; () banked
 24621  002C0E  BFFB               	btfsc	(_total_time+1)& (0+255),7,b
 24622  002C10  D02F               	goto	i2l10432
 24623  002C12  0100               	movlb	0	; () banked
 24624  002C14  51FB               	movf	(_total_time+1)& (0+255),w,b
 24625  002C16  E105               	bnz	i2u1047_40
 24626  002C18  0E12               	movlw	18
 24627  002C1A  0100               	movlb	0	; () banked
 24628  002C1C  5DFA               	subwf	_total_time& (0+255),w,b
 24629  002C1E  A0D8               	btfss	status,0,c
 24630  002C20  D027               	goto	i2l10432
 24631  002C22                     i2u1047_40:
 24632                           
 24633                           ; BSR set to: 0
 24634  002C22  0100               	movlb	0	; () banked
 24635  002C24  BFFB               	btfsc	(_total_time+1)& (0+255),7,b
 24636  002C26  D024               	goto	i2l10432
 24637  002C28  0100               	movlb	0	; () banked
 24638  002C2A  51FB               	movf	(_total_time+1)& (0+255),w,b
 24639  002C2C  E105               	bnz	i2u1048_40
 24640  002C2E  0E3C               	movlw	60
 24641  002C30  0100               	movlb	0	; () banked
 24642  002C32  5DFA               	subwf	_total_time& (0+255),w,b
 24643  002C34  A0D8               	btfss	status,0,c
 24644  002C36  D01C               	goto	i2l10432
 24645  002C38                     i2u1048_40:
 24646                           
 24647                           ; BSR set to: 0
 24648                           ;sort.c: 596: if(total_time % (18/2) == 0){
 24649  002C38  C0FA  F001         	movff	_total_time,i2___awmod@dividend
 24650  002C3C  C0FB  F002         	movff	_total_time+1,i2___awmod@dividend+1
 24651  002C40  0E00               	movlw	0
 24652  002C42  6E04               	movwf	i2___awmod@divisor+1,c
 24653  002C44  0E09               	movlw	9
 24654  002C46  6E03               	movwf	i2___awmod@divisor,c
 24655  002C48  EC14  F02B         	call	i2___awmod	;wreg free
 24656  002C4C  5001               	movf	?i2___awmod,w,c
 24657  002C4E  1002               	iorwf	?i2___awmod+1,w,c
 24658  002C50  A4D8               	btfss	status,2,c
 24659  002C52  D00E               	goto	i2l10432
 24660                           
 24661                           ;sort.c: 597: LATBbits.LATB0 = 1;
 24662  002C54  808A               	bsf	3978,0,c	;volatile
 24663                           
 24664                           ;sort.c: 598: _delay((unsigned long)((200)*(32000000/4000.0)));
 24665  002C56  0E09               	movlw	9
 24666  002C58  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 24667  002C5A  0E1E               	movlw	30
 24668  002C5C  6E2A               	movwf	??_printSortTimer& (0+255),c
 24669  002C5E  0EE4               	movlw	228
 24670  002C60                     i2u1242_47:
 24671  002C60  2EE8               	decfsz	wreg,f,c
 24672  002C62  D7FE               	bra	i2u1242_47
 24673  002C64  2E2A               	decfsz	??_printSortTimer& (0+255),f,c
 24674  002C66  D7FC               	bra	i2u1242_47
 24675  002C68  2E2B               	decfsz	(??_printSortTimer+1)& (0+255),f,c
 24676  002C6A  D7FA               	bra	i2u1242_47
 24677  002C6C                     L19:
 24678  002C6C  D000               	nop2	
 24679  002C6E  D7CC               	goto	i2l10418
 24680  002C70                     i2l10432:
 24681                           
 24682                           ;sort.c: 600: }
 24683                           ;sort.c: 601: }
 24684                           ;sort.c: 603: if(total_time - most_recent_sort_time == 42){
 24685  002C70  C147  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 24686  002C74  C148  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 24687  002C78  1E2A               	comf	??_printSortTimer,f,c
 24688  002C7A  1E2B               	comf	??_printSortTimer+1,f,c
 24689  002C7C  4A2A               	infsnz	??_printSortTimer,f,c
 24690  002C7E  2A2B               	incf	??_printSortTimer+1,f,c
 24691  002C80  0100               	movlb	0	; () banked
 24692  002C82  51FA               	movf	_total_time& (0+255),w,b
 24693  002C84  262A               	addwf	??_printSortTimer,f,c
 24694  002C86  0100               	movlb	0	; () banked
 24695  002C88  51FB               	movf	(_total_time+1)& (0+255),w,b
 24696  002C8A  222B               	addwfc	??_printSortTimer+1,f,c
 24697  002C8C  0E2A               	movlw	42
 24698  002C8E  182A               	xorwf	??_printSortTimer,w,c
 24699  002C90  102B               	iorwf	??_printSortTimer+1,w,c
 24700  002C92  B4D8               	btfsc	status,2,c
 24701                           
 24702                           ; BSR set to: 0
 24703                           ;sort.c: 604: if((count_pop_no_tab > 0) && (count_pop_w_tab > 0) && (count_can_w_lab > 0
      +                          ) && (count_can_no_lab > 0)){
 24704  002C94  BE60               	btfsc	_count_pop_no_tab+1,7,c
 24705  002C96  D01D               	goto	i2l10444
 24706  002C98  5060               	movf	_count_pop_no_tab+1,w,c
 24707  002C9A  E103               	bnz	i2u1051_40
 24708  002C9C  045F               	decf	_count_pop_no_tab,w,c
 24709  002C9E  A0D8               	btfss	status,0,c
 24710  002CA0  D018               	goto	i2l10444
 24711  002CA2                     i2u1051_40:
 24712                           
 24713                           ; BSR set to: 0
 24714  002CA2  BE62               	btfsc	_count_pop_w_tab+1,7,c
 24715  002CA4  D016               	goto	i2l10444
 24716  002CA6  5062               	movf	_count_pop_w_tab+1,w,c
 24717  002CA8  E103               	bnz	i2u1052_40
 24718  002CAA  0461               	decf	_count_pop_w_tab,w,c
 24719  002CAC  A0D8               	btfss	status,0,c
 24720  002CAE  D011               	goto	i2l10444
 24721  002CB0                     i2u1052_40:
 24722                           
 24723                           ; BSR set to: 0
 24724  002CB0  BE5E               	btfsc	_count_can_w_lab+1,7,c
 24725  002CB2  D00F               	goto	i2l10444
 24726  002CB4  505E               	movf	_count_can_w_lab+1,w,c
 24727  002CB6  E103               	bnz	i2u1053_40
 24728  002CB8  045D               	decf	_count_can_w_lab,w,c
 24729  002CBA  A0D8               	btfss	status,0,c
 24730  002CBC  D00A               	goto	i2l10444
 24731  002CBE                     i2u1053_40:
 24732                           
 24733                           ; BSR set to: 0
 24734  002CBE  BE5C               	btfsc	_count_can_no_lab+1,7,c
 24735  002CC0  D008               	goto	i2l10444
 24736  002CC2  505C               	movf	_count_can_no_lab+1,w,c
 24737  002CC4  E103               	bnz	i2u1054_40
 24738  002CC6  045B               	decf	_count_can_no_lab,w,c
 24739  002CC8  A0D8               	btfss	status,0,c
 24740  002CCA  D003               	goto	i2l10444
 24741  002CCC                     i2u1054_40:
 24742                           
 24743                           ; BSR set to: 0
 24744                           ;sort.c: 605: machine_state = DoneSorting_state;
 24745  002CCC  0E02               	movlw	2
 24746  002CCE  0100               	movlb	0	; () banked
 24747  002CD0  6FFC               	movwf	_machine_state& (0+255),b
 24748  002CD2                     i2l10444:
 24749                           
 24750                           ; BSR set to: 0
 24751                           ;sort.c: 607: }
 24752                           ;sort.c: 608: }
 24753                           ;sort.c: 610: int min = (timeDiff % 3600) / 60;
 24754  002CD2  0E0E               	movlw	14
 24755  002CD4  6E04               	movwf	i2___lwmod@divisor+1,c
 24756  002CD6  0E10               	movlw	16
 24757  002CD8  6E03               	movwf	i2___lwmod@divisor,c
 24758  002CDA  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 24759  002CDE  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 24760  002CE2  EC51  F02D         	call	i2___lwmod	;wreg free
 24761  002CE6  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 24762  002CEA  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 24763  002CEE  0E00               	movlw	0
 24764  002CF0  6E09               	movwf	i2___lwdiv@divisor+1,c
 24765  002CF2  0E3C               	movlw	60
 24766  002CF4  6E08               	movwf	i2___lwdiv@divisor,c
 24767  002CF6  EC70  F02C         	call	i2___lwdiv	;wreg free
 24768  002CFA  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 24769  002CFE  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 24770                           
 24771                           ;sort.c: 611: int sec = (timeDiff % 3600) % 60;
 24772  002D02  0E0E               	movlw	14
 24773  002D04  6E04               	movwf	i2___lwmod@divisor+1,c
 24774  002D06  0E10               	movlw	16
 24775  002D08  6E03               	movwf	i2___lwmod@divisor,c
 24776  002D0A  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 24777  002D0E  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 24778  002D12  EC51  F02D         	call	i2___lwmod	;wreg free
 24779  002D16  C001  F043         	movff	?i2___lwmod,_printSortTimer$2578
 24780  002D1A  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2578+1
 24781                           
 24782                           ;sort.c: 611: int sec = (timeDiff % 3600) % 60;
 24783  002D1E  C043  F001         	movff	_printSortTimer$2578,i2___lwmod@dividend
 24784  002D22  C044  F002         	movff	_printSortTimer$2578+1,i2___lwmod@dividend+1
 24785  002D26  0E00               	movlw	0
 24786  002D28  6E04               	movwf	i2___lwmod@divisor+1,c
 24787  002D2A  0E3C               	movlw	60
 24788  002D2C  6E03               	movwf	i2___lwmod@divisor,c
 24789  002D2E  EC51  F02D         	call	i2___lwmod	;wreg free
 24790  002D32  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 24791  002D36  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 24792                           
 24793                           ;sort.c: 613: lcdInst(0b10000000);;
 24794  002D3A  0E80               	movlw	128
 24795  002D3C  EC77  F030         	call	i2_lcdInst
 24796                           
 24797                           ;sort.c: 614: printf("SORTING...     ");
 24798  002D40  0E59               	movlw	low STR_64
 24799  002D42  6E0D               	movwf	i2printf@f,c
 24800  002D44  0EFE               	movlw	high STR_64
 24801  002D46  6E0E               	movwf	i2printf@f+1,c
 24802  002D48  ECB8  F016         	call	i2_printf	;wreg free
 24803                           
 24804                           ;sort.c: 615: lcdInst(0b11000000);;
 24805  002D4C  0EC0               	movlw	192
 24806  002D4E  EC77  F030         	call	i2_lcdInst
 24807                           
 24808                           ;sort.c: 616: printf("TIME %d:%02d   ", min, sec);
 24809  002D52  0E69               	movlw	low STR_65
 24810  002D54  6E0D               	movwf	i2printf@f,c
 24811  002D56  0EFE               	movlw	high STR_65
 24812  002D58  6E0E               	movwf	i2printf@f+1,c
 24813  002D5A  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 24814  002D5E  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 24815  002D62  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 24816  002D66  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 24817  002D6A  ECB8  F016         	call	i2_printf	;wreg free
 24818  002D6E  0012               	return		;funcret
 24819  002D70                     __end_of_printSortTimer:
 24820                           	opt stack 0
 24821                           pclatu	equ	0xFFB
 24822                           pclath	equ	0xFFA
 24823                           tblptru	equ	0xFF8
 24824                           tblptrh	equ	0xFF7
 24825                           tblptrl	equ	0xFF6
 24826                           tablat	equ	0xFF5
 24827                           prodh	equ	0xFF4
 24828                           prodl	equ	0xFF3
 24829                           intcon	equ	0xFF2
 24830                           intcon2	equ	0xFF1
 24831                           intcon3	equ	0xFF0
 24832                           indf0	equ	0xFEF
 24833                           postinc0	equ	0xFEE
 24834                           fsr0h	equ	0xFEA
 24835                           fsr0l	equ	0xFE9
 24836                           wreg	equ	0xFE8
 24837                           postdec1	equ	0xFE5
 24838                           fsr1h	equ	0xFE2
 24839                           fsr1l	equ	0xFE1
 24840                           indf2	equ	0xFDF
 24841                           postinc2	equ	0xFDE
 24842                           postdec2	equ	0xFDD
 24843                           fsr2h	equ	0xFDA
 24844                           fsr2l	equ	0xFD9
 24845                           status	equ	0xFD8
 24846                           
 24847 ;; *************** function i2_printf *****************
 24848 ;; Defined at:
 24849 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 24850 ;; Parameters:    Size  Location     Type
 24851 ;;  f               2   12[COMRAM] PTR const unsigned char 
 24852 ;;		 -> STR_128(18), STR_127(18), STR_126(17), STR_125(17), 
 24853 ;;		 -> STR_124(15), STR_123(15), STR_122(18), STR_121(15), 
 24854 ;;		 -> STR_120(18), STR_119(18), STR_118(17), STR_117(17), 
 24855 ;;		 -> STR_116(17), STR_115(17), STR_114(17), STR_113(17), 
 24856 ;;		 -> STR_112(18), STR_111(17), STR_110(15), STR_109(15), 
 24857 ;;		 -> STR_108(15), STR_107(17), STR_106(17), STR_105(17), 
 24858 ;;		 -> STR_104(16), STR_103(17), STR_102(17), STR_101(17), 
 24859 ;;		 -> STR_100(17), STR_99(17), STR_98(17), STR_97(15), 
 24860 ;;		 -> STR_96(11), STR_95(17), STR_94(11), STR_93(17), 
 24861 ;;		 -> STR_92(14), STR_91(15), STR_90(14), STR_89(10), 
 24862 ;;		 -> STR_88(9), STR_87(9), STR_86(10), STR_85(10), 
 24863 ;;		 -> STR_84(16), STR_83(15), STR_82(3), STR_81(18), 
 24864 ;;		 -> STR_80(3), STR_79(18), STR_78(14), STR_77(8), 
 24865 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 24866 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(17), 
 24867 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(16), 
 24868 ;;		 -> STR_64(16), STR_63(24), STR_50(17), STR_49(17), 
 24869 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 24870 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 24871 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 24872 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 24873 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 24874 ;;		 -> STR_28(17), STR_27(17), STR_26(17), STR_25(17), 
 24875 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 24876 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 24877 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 24878 ;; Auto vars:     Size  Location     Type
 24879 ;;  printf          4    0        struct .
 24880 ;;  printf          2   39[COMRAM] int 
 24881 ;;  printf          2   35[COMRAM] unsigned int 
 24882 ;;  printf          2   33[COMRAM] unsigned int 
 24883 ;;  printf          2   31[COMRAM] PTR void [1]
 24884 ;;		 -> ?i2_printf(2), ?_printf(2), 
 24885 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 24886 ;;		 -> STR_129(7), count_total(2), printRTC@month(4), UI@month(4), 
 24887 ;;  printf          1   38[COMRAM] char 
 24888 ;;  printf          1   37[COMRAM] unsigned char 
 24889 ;;  printf          1   28[COMRAM] char 
 24890 ;; Return value:  Size  Location     Type
 24891 ;;                  2   12[COMRAM] int 
 24892 ;; Registers used:
 24893 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24894 ;; Tracked objects:
 24895 ;;		On entry : 0/0
 24896 ;;		On exit  : 0/0
 24897 ;;		Unchanged: 0/0
 24898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24899 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24900 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24901 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24902 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24903 ;;Total ram usage:       29 bytes
 24904 ;; Hardware stack levels used:    1
 24905 ;; Hardware stack levels required when called:    2
 24906 ;; This function calls:
 24907 ;;		i2___lwdiv
 24908 ;;		i2___lwmod
 24909 ;;		i2___wmul
 24910 ;;		i2_isdigit
 24911 ;;		i2_putch
 24912 ;; This function is called by:
 24913 ;;		_change_state_to_menu_11
 24914 ;;		_change_state_to_menu_23
 24915 ;;		_change_state_to_logs_11
 24916 ;;		_change_state_to_logs_12
 24917 ;;		_change_state_to_logs_22
 24918 ;;		_change_state_to_logs_23
 24919 ;;		_change_state_to_logs_33
 24920 ;;		_change_state_to_logs_34
 24921 ;;		_printSortTimer
 24922 ;;		i2_change_state_to_menu_start
 24923 ;;		i2_change_state_to_menu_12
 24924 ;;		i2_change_state_to_menu_22
 24925 ;;		i2_printRTC
 24926 ;; This function uses a non-reentrant model
 24927 ;;
 24928                           
 24929                           	psect	text87
 24930  002D70                     __ptext87:
 24931                           	opt stack 0
 24932  002D70                     i2_printf:
 24933                           	opt stack 20
 24934                           
 24935                           ;doprnt.c: 466: va_list ap;
 24936                           ;doprnt.c: 499: signed char c;
 24937                           ;doprnt.c: 501: int width;
 24938                           ;doprnt.c: 506: signed char prec;
 24939                           ;doprnt.c: 508: unsigned char flag;
 24940                           ;doprnt.c: 523: union {
 24941                           ;doprnt.c: 524: unsigned long vd;
 24942                           ;doprnt.c: 525: double integ;
 24943                           ;doprnt.c: 526: } tmpval;
 24944                           ;doprnt.c: 528: unsigned int val;
 24945                           ;doprnt.c: 529: unsigned len;
 24946                           ;doprnt.c: 530: const char * cp;
 24947                           ;doprnt.c: 533: *ap = __va_start();
 24948                           
 24949                           ;incstack = 0
 24950  002D70  0E0F               	movlw	low (?i2_printf+2)
 24951  002D72  6E20               	movwf	i2printf@ap,c
 24952  002D74  0E00               	movlw	high (?i2_printf+2)
 24953  002D76  6E21               	movwf	i2printf@ap+1,c
 24954                           
 24955                           ;doprnt.c: 536: while(c = *f++) {
 24956  002D78  D1A4               	goto	i2l7382
 24957  002D7A                     i2l7252:
 24958                           
 24959                           ;doprnt.c: 538: if(c != '%')
 24960  002D7A  0E25               	movlw	37
 24961  002D7C  1827               	xorwf	i2printf@c,w,c
 24962  002D7E  B4D8               	btfsc	status,2,c
 24963  002D80  D004               	goto	i2l7256
 24964                           
 24965                           ;doprnt.c: 540: {
 24966                           ;doprnt.c: 541: (putch(c) );
 24967  002D82  5027               	movf	i2printf@c,w,c
 24968  002D84  EC71  F030         	call	i2_putch
 24969                           
 24970                           ;doprnt.c: 542: continue;
 24971  002D88  D19C               	goto	i2l7382
 24972  002D8A                     i2l7256:
 24973                           
 24974                           ;doprnt.c: 543: }
 24975                           ;doprnt.c: 546: width = 0;
 24976  002D8A  0E00               	movlw	0
 24977  002D8C  6E29               	movwf	i2printf@width+1,c
 24978  002D8E  0E00               	movlw	0
 24979  002D90  6E28               	movwf	i2printf@width,c
 24980                           
 24981                           ;doprnt.c: 548: flag = 0;
 24982  002D92  0E00               	movlw	0
 24983  002D94  6E26               	movwf	i2printf@flag,c
 24984                           
 24985                           ;doprnt.c: 551: switch(*f) {
 24986                           
 24987                           ;doprnt.c: 550: for(;;) {
 24988  002D96  D003               	goto	i2l7262
 24989  002D98                     i2l7258:
 24990                           
 24991                           ;doprnt.c: 580: flag |= 0x04;
 24992  002D98  8426               	bsf	i2printf@flag,2,c
 24993                           
 24994                           ;doprnt.c: 581: f++;
 24995  002D9A  4A0D               	infsnz	i2printf@f,f,c
 24996  002D9C  2A0E               	incf	i2printf@f+1,f,c
 24997  002D9E                     i2l7262:
 24998  002D9E  C00D  FFF6         	movff	i2printf@f,tblptrl
 24999  002DA2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 25000  002DA6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 25001  002DA6  6AF8               	clrf	tblptru,c
 25002  002DA8                     	endif
 25003  002DA8                     	if	0	;tblptru may be non-zero
 25004  002DA8                     	endif
 25005  002DA8  0008               	tblrd		*
 25006  002DAA  50F5               	movf	tablat,w,c
 25007                           
 25008                           ; Switch size 1, requested type "space"
 25009                           ; Number of cases is 1, Range of values is 48 to 48
 25010                           ; switch strategies available:
 25011                           ; Name         Instructions Cycles
 25012                           ; simple_byte            4     3 (average)
 25013                           ;	Chosen strategy is simple_byte
 25014  002DAC  0A30               	xorlw	48	; case 48
 25015  002DAE  B4D8               	btfsc	status,2,c
 25016  002DB0  D7F3               	goto	i2l7258
 25017                           
 25018                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 25019                           
 25020                           ;doprnt.c: 586: }
 25021                           
 25022                           ;doprnt.c: 585: break;
 25023  002DB2  C00D  FFF6         	movff	i2printf@f,tblptrl
 25024  002DB6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 25025  002DBA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 25026  002DBA  6AF8               	clrf	tblptru,c
 25027  002DBC                     	endif
 25028  002DBC                     	if	0	;tblptru may be non-zero
 25029  002DBC                     	endif
 25030  002DBC  0008               	tblrd		*
 25031  002DBE  50F5               	movf	tablat,w,c
 25032  002DC0  EC0F  F030         	call	i2_isdigit
 25033  002DC4  A0D8               	btfss	status,0,c
 25034  002DC6  D0A6               	goto	i2l7310
 25035                           
 25036                           ;doprnt.c: 598: width = 0;
 25037  002DC8  0E00               	movlw	0
 25038  002DCA  6E29               	movwf	i2printf@width+1,c
 25039  002DCC  0E00               	movlw	0
 25040  002DCE  6E28               	movwf	i2printf@width,c
 25041  002DD0                     i2l7268:
 25042                           
 25043                           ;doprnt.c: 600: width *= 10;
 25044  002DD0  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 25045  002DD4  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 25046  002DD8  0E00               	movlw	0
 25047  002DDA  6E04               	movwf	i2___wmul@multiplicand+1,c
 25048  002DDC  0E0A               	movlw	10
 25049  002DDE  6E03               	movwf	i2___wmul@multiplicand,c
 25050  002DE0  ECB5  F02F         	call	i2___wmul	;wreg free
 25051  002DE4  C001  F028         	movff	?i2___wmul,i2printf@width
 25052  002DE8  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 25053                           
 25054                           ;doprnt.c: 601: width += *f++ - '0';
 25055  002DEC  0ED0               	movlw	208
 25056  002DEE  6E19               	movwf	??i2_printf& (0+255),c
 25057  002DF0  0EFF               	movlw	255
 25058  002DF2  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 25059  002DF4  C00D  FFF6         	movff	i2printf@f,tblptrl
 25060  002DF8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 25061  002DFC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 25062  002DFC  6AF8               	clrf	tblptru,c
 25063  002DFE                     	endif
 25064  002DFE                     	if	0	;tblptru may be non-zero
 25065  002DFE                     	endif
 25066  002DFE  0008               	tblrd		*
 25067  002E00  50F5               	movf	tablat,w,c
 25068  002E02  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 25069  002E04  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 25070  002E06  5019               	movf	??i2_printf,w,c
 25071  002E08  261B               	addwf	??i2_printf+2,f,c
 25072  002E0A  501A               	movf	??i2_printf+1,w,c
 25073  002E0C  221C               	addwfc	??i2_printf+3,f,c
 25074  002E0E  501B               	movf	??i2_printf+2,w,c
 25075  002E10  2628               	addwf	i2printf@width,f,c
 25076  002E12  501C               	movf	??i2_printf+3,w,c
 25077  002E14  2229               	addwfc	i2printf@width+1,f,c
 25078  002E16  4A0D               	infsnz	i2printf@f,f,c
 25079  002E18  2A0E               	incf	i2printf@f+1,f,c
 25080                           
 25081                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 25082  002E1A  C00D  FFF6         	movff	i2printf@f,tblptrl
 25083  002E1E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 25084  002E22                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 25085  002E22  6AF8               	clrf	tblptru,c
 25086  002E24                     	endif
 25087  002E24                     	if	0	;tblptru may be non-zero
 25088  002E24                     	endif
 25089  002E24  0008               	tblrd		*
 25090  002E26  50F5               	movf	tablat,w,c
 25091  002E28  EC0F  F030         	call	i2_isdigit
 25092  002E2C  A0D8               	btfss	status,0,c
 25093  002E2E  D072               	goto	i2l7310
 25094  002E30  D7CF               	goto	i2l7268
 25095  002E32                     i2l7276:
 25096                           
 25097                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 25098  002E32  C020  FFD9         	movff	i2printf@ap,fsr2l
 25099  002E36  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 25100  002E3A  CFDE F01E          	movff	postinc2,i2printf@cp
 25101  002E3E  CFDD F01F          	movff	postdec2,i2printf@cp+1
 25102  002E42  0E02               	movlw	2
 25103  002E44  2620               	addwf	i2printf@ap,f,c
 25104  002E46  0E00               	movlw	0
 25105  002E48  2221               	addwfc	i2printf@ap+1,f,c
 25106                           
 25107                           ;doprnt.c: 740: if(!cp)
 25108  002E4A  501E               	movf	i2printf@cp,w,c
 25109  002E4C  101F               	iorwf	i2printf@cp+1,w,c
 25110  002E4E  A4D8               	btfss	status,2,c
 25111  002E50  D004               	goto	i2l7284
 25112                           
 25113                           ;doprnt.c: 741: cp = "(null)";
 25114  002E52  0EB5               	movlw	low STR_129
 25115  002E54  6E1E               	movwf	i2printf@cp,c
 25116  002E56  0EFF               	movlw	high STR_129
 25117  002E58  6E1F               	movwf	i2printf@cp+1,c
 25118  002E5A                     i2l7284:
 25119                           
 25120                           ;doprnt.c: 745: len = 0;
 25121  002E5A  0E00               	movlw	0
 25122  002E5C  6E23               	movwf	i2printf@len+1,c
 25123  002E5E  0E00               	movlw	0
 25124  002E60  6E22               	movwf	i2printf@len,c
 25125                           
 25126                           ;doprnt.c: 746: while(cp[len])
 25127  002E62  D002               	goto	i2l7288
 25128  002E64                     i2l7286:
 25129                           
 25130                           ;doprnt.c: 747: len++;
 25131  002E64  4A22               	infsnz	i2printf@len,f,c
 25132  002E66  2A23               	incf	i2printf@len+1,f,c
 25133  002E68                     i2l7288:
 25134  002E68  5022               	movf	i2printf@len,w,c
 25135  002E6A  241E               	addwf	i2printf@cp,w,c
 25136  002E6C  6E19               	movwf	??i2_printf& (0+255),c
 25137  002E6E  5023               	movf	i2printf@len+1,w,c
 25138  002E70  201F               	addwfc	i2printf@cp+1,w,c
 25139  002E72  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 25140  002E74  C019  FFF6         	movff	??i2_printf,tblptrl
 25141  002E78  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 25142  002E7C  0E00               	movlw	low (__mediumconst shr (0+16))
 25143  002E7E  6EF8               	movwf	tblptru,c
 25144  002E80  0E0F               	movlw	(high __ramtop+-1)
 25145  002E82  64F7               	cpfsgt	tblptrh,c
 25146  002E84  D003               	bra	i2u619_47
 25147  002E86  0008               	tblrd		*
 25148  002E88  50F5               	movf	tablat,w,c
 25149  002E8A  D005               	bra	i2u619_40
 25150  002E8C                     i2u619_47:
 25151  002E8C  CFF6 FFE9          	movff	tblptrl,fsr0l
 25152  002E90  CFF7 FFEA          	movff	tblptrh,fsr0h
 25153  002E94  50EF               	movf	indf0,w,c
 25154  002E96                     i2u619_40:
 25155  002E96  0900               	iorlw	0
 25156  002E98  A4D8               	btfss	status,2,c
 25157  002E9A  D7E4               	goto	i2l7286
 25158                           
 25159                           ;doprnt.c: 757: if(width > len)
 25160  002E9C  5028               	movf	i2printf@width,w,c
 25161  002E9E  5C22               	subwf	i2printf@len,w,c
 25162  002EA0  5029               	movf	i2printf@width+1,w,c
 25163  002EA2  5823               	subwfb	i2printf@len+1,w,c
 25164  002EA4  B0D8               	btfsc	status,0,c
 25165  002EA6  D005               	goto	i2l7294
 25166                           
 25167                           ;doprnt.c: 758: width -= len;
 25168  002EA8  5022               	movf	i2printf@len,w,c
 25169  002EAA  5E28               	subwf	i2printf@width,f,c
 25170  002EAC  5023               	movf	i2printf@len+1,w,c
 25171  002EAE  5A29               	subwfb	i2printf@width+1,f,c
 25172  002EB0  D008               	goto	i2l7298
 25173  002EB2                     i2l7294:
 25174                           
 25175                           ;doprnt.c: 759: else
 25176                           ;doprnt.c: 760: width = 0;
 25177  002EB2  0E00               	movlw	0
 25178  002EB4  6E29               	movwf	i2printf@width+1,c
 25179  002EB6  0E00               	movlw	0
 25180  002EB8  6E28               	movwf	i2printf@width,c
 25181                           
 25182                           ;doprnt.c: 764: while(width--)
 25183  002EBA  D003               	goto	i2l7298
 25184  002EBC                     i2l7296:
 25185                           
 25186                           ;doprnt.c: 765: (putch(' ') );
 25187  002EBC  0E20               	movlw	32
 25188  002EBE  EC71  F030         	call	i2_putch
 25189  002EC2                     i2l7298:
 25190  002EC2  0628               	decf	i2printf@width,f,c
 25191  002EC4  A0D8               	btfss	status,0,c
 25192  002EC6  0629               	decf	i2printf@width+1,f,c
 25193  002EC8  2828               	incf	i2printf@width,w,c
 25194  002ECA  E1F8               	bnz	i2l7296
 25195  002ECC  2829               	incf	i2printf@width+1,w,c
 25196  002ECE  B4D8               	btfsc	status,2,c
 25197  002ED0  D016               	goto	i2l7304
 25198  002ED2  D7F4               	goto	i2l7296
 25199  002ED4                     i2l7300:
 25200                           
 25201                           ;doprnt.c: 768: (putch(*cp++) );
 25202  002ED4  C01E  FFF6         	movff	i2printf@cp,tblptrl
 25203  002ED8  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 25204  002EDC  0E00               	movlw	low (__mediumconst shr (0+16))
 25205  002EDE  6EF8               	movwf	tblptru,c
 25206  002EE0  0E0F               	movlw	(high __ramtop+-1)
 25207  002EE2  64F7               	cpfsgt	tblptrh,c
 25208  002EE4  D003               	bra	i2u623_47
 25209  002EE6  0008               	tblrd		*
 25210  002EE8  50F5               	movf	tablat,w,c
 25211  002EEA  D005               	bra	i2u623_40
 25212  002EEC                     i2u623_47:
 25213  002EEC  CFF6 FFE9          	movff	tblptrl,fsr0l
 25214  002EF0  CFF7 FFEA          	movff	tblptrh,fsr0h
 25215  002EF4  50EF               	movf	indf0,w,c
 25216  002EF6                     i2u623_40:
 25217  002EF6  EC71  F030         	call	i2_putch
 25218  002EFA  4A1E               	infsnz	i2printf@cp,f,c
 25219  002EFC  2A1F               	incf	i2printf@cp+1,f,c
 25220  002EFE                     i2l7304:
 25221  002EFE  0622               	decf	i2printf@len,f,c
 25222  002F00  A0D8               	btfss	status,0,c
 25223  002F02  0623               	decf	i2printf@len+1,f,c
 25224  002F04  2822               	incf	i2printf@len,w,c
 25225  002F06  E1E6               	bnz	i2l7300
 25226  002F08  2823               	incf	i2printf@len+1,w,c
 25227  002F0A  B4D8               	btfsc	status,2,c
 25228  002F0C  D0DA               	goto	i2l7382
 25229  002F0E  D7E2               	goto	i2l7300
 25230  002F10                     i2l7306:
 25231                           
 25232                           ;doprnt.c: 818: flag |= 0x40;
 25233  002F10  8C26               	bsf	i2printf@flag,6,c
 25234                           
 25235                           ;doprnt.c: 822: }
 25236                           
 25237                           ;doprnt.c: 819: break;
 25238  002F12  D01B               	goto	i2l1582
 25239  002F14                     i2l7310:
 25240  002F14  C00D  FFF6         	movff	i2printf@f,tblptrl
 25241  002F18  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 25242  002F1C  4A0D               	infsnz	i2printf@f,f,c
 25243  002F1E  2A0E               	incf	i2printf@f+1,f,c
 25244  002F20                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 25245  002F20  6AF8               	clrf	tblptru,c
 25246  002F22                     	endif
 25247  002F22                     	if	0	;tblptru may be non-zero
 25248  002F22                     	endif
 25249  002F22  0008               	tblrd		*
 25250  002F24  CFF5 F027          	movff	tablat,i2printf@c
 25251  002F28  5027               	movf	i2printf@c,w,c
 25252                           
 25253                           ; Switch size 1, requested type "space"
 25254                           ; Number of cases is 5, Range of values is 0 to 117
 25255                           ; switch strategies available:
 25256                           ; Name         Instructions Cycles
 25257                           ; simple_byte           16     9 (average)
 25258                           ;	Chosen strategy is simple_byte
 25259  002F2A  0A00               	xorlw	0	; case 0
 25260  002F2C  B4D8               	btfsc	status,2,c
 25261  002F2E  0012               	return	
 25262  002F30  0A64               	xorlw	100	; case 100
 25263  002F32  B4D8               	btfsc	status,2,c
 25264  002F34  D00A               	goto	i2l1582
 25265  002F36  0A0D               	xorlw	13	; case 105
 25266  002F38  B4D8               	btfsc	status,2,c
 25267  002F3A  D007               	goto	i2l1582
 25268  002F3C  0A1A               	xorlw	26	; case 115
 25269  002F3E  B4D8               	btfsc	status,2,c
 25270  002F40  D778               	goto	i2l7276
 25271  002F42  0A06               	xorlw	6	; case 117
 25272  002F44  B4D8               	btfsc	status,2,c
 25273  002F46  D7E4               	goto	i2l7306
 25274  002F48  D0BC               	goto	i2l7382
 25275  002F4A                     i2l1582:
 25276                           
 25277                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 25278  002F4A  BC26               	btfsc	i2printf@flag,6,c
 25279  002F4C  D015               	goto	i2l7322
 25280                           
 25281                           ;doprnt.c: 1253: {
 25282                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 25283  002F4E  C020  FFD9         	movff	i2printf@ap,fsr2l
 25284  002F52  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 25285  002F56  CFDE F024          	movff	postinc2,i2printf@val
 25286  002F5A  CFDD F025          	movff	postdec2,i2printf@val+1
 25287  002F5E  0E02               	movlw	2
 25288  002F60  2620               	addwf	i2printf@ap,f,c
 25289  002F62  0E00               	movlw	0
 25290  002F64  2221               	addwfc	i2printf@ap+1,f,c
 25291                           
 25292                           ;doprnt.c: 1261: if((int)val < 0) {
 25293  002F66  AE25               	btfss	i2printf@val+1,7,c
 25294  002F68  D013               	goto	i2l7326
 25295                           
 25296                           ;doprnt.c: 1262: flag |= 0x03;
 25297  002F6A  0E03               	movlw	3
 25298  002F6C  1226               	iorwf	i2printf@flag,f,c
 25299                           
 25300                           ;doprnt.c: 1263: val = -val;
 25301  002F6E  6C24               	negf	i2printf@val,c
 25302  002F70  1E25               	comf	i2printf@val+1,f,c
 25303  002F72  B0D8               	btfsc	status,0,c
 25304  002F74  2A25               	incf	i2printf@val+1,f,c
 25305                           
 25306                           ;doprnt.c: 1264: }
 25307                           ;doprnt.c: 1266: }
 25308  002F76  D00C               	goto	i2l7326
 25309  002F78                     i2l7322:
 25310                           
 25311                           ;doprnt.c: 1268: else
 25312                           ;doprnt.c: 1273: {
 25313                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 25314  002F78  C020  FFD9         	movff	i2printf@ap,fsr2l
 25315  002F7C  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 25316  002F80  CFDE F024          	movff	postinc2,i2printf@val
 25317  002F84  CFDD F025          	movff	postdec2,i2printf@val+1
 25318  002F88  0E02               	movlw	2
 25319  002F8A  2620               	addwf	i2printf@ap,f,c
 25320  002F8C  0E00               	movlw	0
 25321  002F8E  2221               	addwfc	i2printf@ap+1,f,c
 25322  002F90                     i2l7326:
 25323                           
 25324                           ;doprnt.c: 1287: }
 25325                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 25326  002F90  0E01               	movlw	1
 25327  002F92  6E27               	movwf	i2printf@c,c
 25328  002F94                     i2l7328:
 25329  002F94  0E05               	movlw	5
 25330  002F96  1827               	xorwf	i2printf@c,w,c
 25331  002F98  B4D8               	btfsc	status,2,c
 25332  002F9A  D015               	goto	i2l7340
 25333                           
 25334                           ;doprnt.c: 1306: if(val < dpowers[c])
 25335  002F9C  5027               	movf	i2printf@c,w,c
 25336  002F9E  0D02               	mullw	2
 25337  002FA0  0EB8               	movlw	low _dpowers
 25338  002FA2  24F3               	addwf	prodl,w,c
 25339  002FA4  6EF6               	movwf	tblptrl,c
 25340  002FA6  0EFA               	movlw	high _dpowers
 25341  002FA8  20F4               	addwfc	prodh,w,c
 25342  002FAA  6EF7               	movwf	tblptrh,c
 25343  002FAC                     	if	1	;There are 3 active tblptr bytes
 25344  002FAC  6AF8               	clrf	tblptru,c
 25345  002FAE  0E00               	movlw	low (__mediumconst shr (0+16))
 25346  002FB0  22F8               	addwfc	tblptru,f,c
 25347  002FB2                     	endif
 25348  002FB2  0009               	tblrd		*+
 25349  002FB4  50F5               	movf	tablat,w,c
 25350  002FB6  5C24               	subwf	i2printf@val,w,c
 25351  002FB8  0009               	tblrd		*+
 25352  002FBA  50F5               	movf	tablat,w,c
 25353  002FBC  5825               	subwfb	i2printf@val+1,w,c
 25354  002FBE  A0D8               	btfss	status,0,c
 25355  002FC0  D002               	goto	i2l7340
 25356                           
 25357                           ;doprnt.c: 1307: break;
 25358  002FC2  2A27               	incf	i2printf@c,f,c
 25359  002FC4  D7E7               	goto	i2l7328
 25360  002FC6                     i2l7340:
 25361                           
 25362                           ;doprnt.c: 1345: if(width && flag & 0x03)
 25363  002FC6  5028               	movf	i2printf@width,w,c
 25364  002FC8  1029               	iorwf	i2printf@width+1,w,c
 25365  002FCA  B4D8               	btfsc	status,2,c
 25366  002FCC  D009               	goto	i2l7346
 25367  002FCE  C026  F019         	movff	i2printf@flag,??i2_printf
 25368  002FD2  0E03               	movlw	3
 25369  002FD4  1619               	andwf	??i2_printf,f,c
 25370  002FD6  B4D8               	btfsc	status,2,c
 25371  002FD8  D003               	goto	i2l7346
 25372                           
 25373                           ;doprnt.c: 1346: width--;
 25374  002FDA  0628               	decf	i2printf@width,f,c
 25375  002FDC  A0D8               	btfss	status,0,c
 25376  002FDE  0629               	decf	i2printf@width+1,f,c
 25377  002FE0                     i2l7346:
 25378                           
 25379                           ;doprnt.c: 1381: if(width > c)
 25380  002FE0  0E80               	movlw	128
 25381  002FE2  BE27               	btfsc	i2printf@c,7,c
 25382  002FE4  0E7F               	movlw	127
 25383  002FE6  6E19               	movwf	??i2_printf& (0+255),c
 25384  002FE8  5028               	movf	i2printf@width,w,c
 25385  002FEA  5C27               	subwf	i2printf@c,w,c
 25386  002FEC  5029               	movf	i2printf@width+1,w,c
 25387  002FEE  0A80               	xorlw	128
 25388  002FF0  5819               	subwfb	??i2_printf& (0+255),w,c
 25389  002FF2  B0D8               	btfsc	status,0,c
 25390  002FF4  D007               	goto	i2l7350
 25391                           
 25392                           ;doprnt.c: 1382: width -= c;
 25393  002FF6  5027               	movf	i2printf@c,w,c
 25394  002FF8  5E28               	subwf	i2printf@width,f,c
 25395  002FFA  0E00               	movlw	0
 25396  002FFC  BE27               	btfsc	i2printf@c,7,c
 25397  002FFE  0EFF               	movlw	255
 25398  003000  5A29               	subwfb	i2printf@width+1,f,c
 25399  003002  D004               	goto	i2l7352
 25400  003004                     i2l7350:
 25401                           
 25402                           ;doprnt.c: 1383: else
 25403                           ;doprnt.c: 1384: width = 0;
 25404  003004  0E00               	movlw	0
 25405  003006  6E29               	movwf	i2printf@width+1,c
 25406  003008  0E00               	movlw	0
 25407  00300A  6E28               	movwf	i2printf@width,c
 25408  00300C                     i2l7352:
 25409                           
 25410                           ;doprnt.c: 1387: if(flag & 0x04) {
 25411  00300C  A426               	btfss	i2printf@flag,2,c
 25412  00300E  D014               	goto	i2l7364
 25413                           
 25414                           ;doprnt.c: 1392: if(flag & 0x03)
 25415  003010  C026  F019         	movff	i2printf@flag,??i2_printf
 25416  003014  0E03               	movlw	3
 25417  003016  1619               	andwf	??i2_printf,f,c
 25418  003018  B4D8               	btfsc	status,2,c
 25419  00301A  D003               	goto	i2l7358
 25420                           
 25421                           ;doprnt.c: 1393: (putch('-') );
 25422  00301C  0E2D               	movlw	45
 25423  00301E  EC71  F030         	call	i2_putch
 25424  003022                     i2l7358:
 25425                           
 25426                           ;doprnt.c: 1415: if(width)
 25427  003022  5028               	movf	i2printf@width,w,c
 25428  003024  1029               	iorwf	i2printf@width+1,w,c
 25429  003026  B4D8               	btfsc	status,2,c
 25430  003028  D01E               	goto	i2l7374
 25431                           
 25432                           ;doprnt.c: 1417: (putch('0') );
 25433                           
 25434                           ;doprnt.c: 1416: do
 25435  00302A  0E30               	movlw	48
 25436  00302C  EC71  F030         	call	i2_putch
 25437                           
 25438                           ;doprnt.c: 1418: while(--width);
 25439  003030  0628               	decf	i2printf@width,f,c
 25440  003032  A0D8               	btfss	status,0,c
 25441  003034  0629               	decf	i2printf@width+1,f,c
 25442  003036  D7F5               	goto	i2l7358
 25443  003038                     i2l7364:
 25444                           
 25445                           ;doprnt.c: 1422: {
 25446                           ;doprnt.c: 1424: if(width
 25447                           ;doprnt.c: 1428: )
 25448  003038  5028               	movf	i2printf@width,w,c
 25449  00303A  1029               	iorwf	i2printf@width+1,w,c
 25450  00303C  B4D8               	btfsc	status,2,c
 25451  00303E  D00A               	goto	i2l7370
 25452  003040                     i2l7366:
 25453                           
 25454                           ;doprnt.c: 1430: (putch(' ') );
 25455  003040  0E20               	movlw	32
 25456  003042  EC71  F030         	call	i2_putch
 25457                           
 25458                           ;doprnt.c: 1431: while(--width);
 25459  003046  0628               	decf	i2printf@width,f,c
 25460  003048  A0D8               	btfss	status,0,c
 25461  00304A  0629               	decf	i2printf@width+1,f,c
 25462  00304C  5028               	movf	i2printf@width,w,c
 25463  00304E  1029               	iorwf	i2printf@width+1,w,c
 25464  003050  A4D8               	btfss	status,2,c
 25465  003052  D7F6               	goto	i2l7366
 25466  003054                     i2l7370:
 25467                           
 25468                           ;doprnt.c: 1438: if(flag & 0x03)
 25469  003054  C026  F019         	movff	i2printf@flag,??i2_printf
 25470  003058  0E03               	movlw	3
 25471  00305A  1619               	andwf	??i2_printf,f,c
 25472  00305C  B4D8               	btfsc	status,2,c
 25473  00305E  D003               	goto	i2l7374
 25474                           
 25475                           ;doprnt.c: 1439: (putch('-') );
 25476  003060  0E2D               	movlw	45
 25477  003062  EC71  F030         	call	i2_putch
 25478  003066                     i2l7374:
 25479                           
 25480                           ;doprnt.c: 1469: }
 25481                           ;doprnt.c: 1472: prec = c;
 25482  003066  C027  F01D         	movff	i2printf@c,i2printf@prec
 25483                           
 25484                           ;doprnt.c: 1474: while(prec--) {
 25485  00306A  D027               	goto	i2l7380
 25486  00306C                     i2l7376:
 25487                           
 25488                           ;doprnt.c: 1478: {
 25489                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 25490  00306C  501D               	movf	i2printf@prec,w,c
 25491  00306E  0D02               	mullw	2
 25492  003070  0EB8               	movlw	low _dpowers
 25493  003072  24F3               	addwf	prodl,w,c
 25494  003074  6EF6               	movwf	tblptrl,c
 25495  003076  0EFA               	movlw	high _dpowers
 25496  003078  20F4               	addwfc	prodh,w,c
 25497  00307A  6EF7               	movwf	tblptrh,c
 25498  00307C                     	if	1	;There are 3 active tblptr bytes
 25499  00307C  6AF8               	clrf	tblptru,c
 25500  00307E  0E00               	movlw	low (__mediumconst shr (0+16))
 25501  003080  22F8               	addwfc	tblptru,f,c
 25502  003082                     	endif
 25503  003082  0009               	tblrd		*+
 25504  003084  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 25505  003088  000A               	tblrd		*-
 25506  00308A  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 25507  00308E  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 25508  003092  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 25509  003096  EC70  F02C         	call	i2___lwdiv	;wreg free
 25510  00309A  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 25511  00309E  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 25512  0030A2  0E00               	movlw	0
 25513  0030A4  6E04               	movwf	i2___lwmod@divisor+1,c
 25514  0030A6  0E0A               	movlw	10
 25515  0030A8  6E03               	movwf	i2___lwmod@divisor,c
 25516  0030AA  EC51  F02D         	call	i2___lwmod	;wreg free
 25517  0030AE  5001               	movf	?i2___lwmod,w,c
 25518  0030B0  0F30               	addlw	48
 25519  0030B2  6E27               	movwf	i2printf@c,c
 25520                           
 25521                           ;doprnt.c: 1523: }
 25522                           ;doprnt.c: 1524: (putch(c) );
 25523  0030B4  5027               	movf	i2printf@c,w,c
 25524  0030B6  EC71  F030         	call	i2_putch
 25525  0030BA                     i2l7380:
 25526  0030BA  061D               	decf	i2printf@prec,f,c
 25527  0030BC  281D               	incf	i2printf@prec,w,c
 25528  0030BE  A4D8               	btfss	status,2,c
 25529  0030C0  D7D5               	goto	i2l7376
 25530  0030C2                     i2l7382:
 25531  0030C2  C00D  FFF6         	movff	i2printf@f,tblptrl
 25532  0030C6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 25533  0030CA  4A0D               	infsnz	i2printf@f,f,c
 25534  0030CC  2A0E               	incf	i2printf@f+1,f,c
 25535  0030CE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 25536  0030CE  6AF8               	clrf	tblptru,c
 25537  0030D0                     	endif
 25538  0030D0                     	if	0	;tblptru may be non-zero
 25539  0030D0                     	endif
 25540  0030D0  0008               	tblrd		*
 25541  0030D2  CFF5 F027          	movff	tablat,i2printf@c
 25542  0030D6  5027               	movf	i2printf@c,w,c
 25543  0030D8  B4D8               	btfsc	status,2,c
 25544  0030DA  0012               	return	
 25545  0030DC  D64E               	goto	i2l7252
 25546  0030DE                     __end_ofi2_printf:
 25547                           	opt stack 0
 25548                           pclatu	equ	0xFFB
 25549                           pclath	equ	0xFFA
 25550                           tblptru	equ	0xFF8
 25551                           tblptrh	equ	0xFF7
 25552                           tblptrl	equ	0xFF6
 25553                           tablat	equ	0xFF5
 25554                           prodh	equ	0xFF4
 25555                           prodl	equ	0xFF3
 25556                           intcon	equ	0xFF2
 25557                           intcon2	equ	0xFF1
 25558                           intcon3	equ	0xFF0
 25559                           indf0	equ	0xFEF
 25560                           postinc0	equ	0xFEE
 25561                           fsr0h	equ	0xFEA
 25562                           fsr0l	equ	0xFE9
 25563                           wreg	equ	0xFE8
 25564                           postdec1	equ	0xFE5
 25565                           fsr1h	equ	0xFE2
 25566                           fsr1l	equ	0xFE1
 25567                           indf2	equ	0xFDF
 25568                           postinc2	equ	0xFDE
 25569                           postdec2	equ	0xFDD
 25570                           fsr2h	equ	0xFDA
 25571                           fsr2l	equ	0xFD9
 25572                           status	equ	0xFD8
 25573                           
 25574 ;; *************** function i2_putch *****************
 25575 ;; Defined at:
 25576 ;;		line 20 in file "lcd.c"
 25577 ;; Parameters:    Size  Location     Type
 25578 ;;  data            1    wreg     unsigned char 
 25579 ;; Auto vars:     Size  Location     Type
 25580 ;;  data            1    2[COMRAM] unsigned char 
 25581 ;; Return value:  Size  Location     Type
 25582 ;;                  1    wreg      void 
 25583 ;; Registers used:
 25584 ;;		wreg, status,2, status,0, cstack
 25585 ;; Tracked objects:
 25586 ;;		On entry : 0/0
 25587 ;;		On exit  : 0/0
 25588 ;;		Unchanged: 0/0
 25589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25591 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25593 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25594 ;;Total ram usage:        1 bytes
 25595 ;; Hardware stack levels used:    1
 25596 ;; Hardware stack levels required when called:    1
 25597 ;; This function calls:
 25598 ;;		i2_lcdNibble
 25599 ;; This function is called by:
 25600 ;;		i2_printf
 25601 ;; This function uses a non-reentrant model
 25602 ;;
 25603                           
 25604                           	psect	text88
 25605  0060E2                     __ptext88:
 25606                           	opt stack 0
 25607  0060E2                     i2_putch:
 25608                           	opt stack 20
 25609                           
 25610                           ;incstack = 0
 25611                           ;i2putch@data stored from wreg
 25612  0060E2  6E03               	movwf	i2putch@data,c
 25613                           
 25614                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 25615  0060E4  848C               	bsf	3980,2,c	;volatile
 25616                           
 25617                           ;lcd.c: 22: lcdNibble(data);
 25618  0060E6  5003               	movf	i2putch@data,w,c
 25619  0060E8  EC43  F02C         	call	i2_lcdNibble
 25620  0060EC  0012               	return		;funcret
 25621  0060EE                     __end_ofi2_putch:
 25622                           	opt stack 0
 25623                           pclatu	equ	0xFFB
 25624                           pclath	equ	0xFFA
 25625                           tblptru	equ	0xFF8
 25626                           tblptrh	equ	0xFF7
 25627                           tblptrl	equ	0xFF6
 25628                           tablat	equ	0xFF5
 25629                           prodh	equ	0xFF4
 25630                           prodl	equ	0xFF3
 25631                           intcon	equ	0xFF2
 25632                           intcon2	equ	0xFF1
 25633                           intcon3	equ	0xFF0
 25634                           indf0	equ	0xFEF
 25635                           postinc0	equ	0xFEE
 25636                           fsr0h	equ	0xFEA
 25637                           fsr0l	equ	0xFE9
 25638                           wreg	equ	0xFE8
 25639                           postdec1	equ	0xFE5
 25640                           fsr1h	equ	0xFE2
 25641                           fsr1l	equ	0xFE1
 25642                           indf2	equ	0xFDF
 25643                           postinc2	equ	0xFDE
 25644                           postdec2	equ	0xFDD
 25645                           fsr2h	equ	0xFDA
 25646                           fsr2l	equ	0xFD9
 25647                           status	equ	0xFD8
 25648                           
 25649 ;; *************** function i2_isdigit *****************
 25650 ;; Defined at:
 25651 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 25652 ;; Parameters:    Size  Location     Type
 25653 ;;  c               1    wreg     unsigned char 
 25654 ;; Auto vars:     Size  Location     Type
 25655 ;;  c               1    2[COMRAM] unsigned char 
 25656 ;; Return value:  Size  Location     Type
 25657 ;;		None               void
 25658 ;; Registers used:
 25659 ;;		wreg, status,2, status,0
 25660 ;; Tracked objects:
 25661 ;;		On entry : 0/0
 25662 ;;		On exit  : 0/0
 25663 ;;		Unchanged: 0/0
 25664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25666 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25667 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25668 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25669 ;;Total ram usage:        3 bytes
 25670 ;; Hardware stack levels used:    1
 25671 ;; This function calls:
 25672 ;;		Nothing
 25673 ;; This function is called by:
 25674 ;;		i2_printf
 25675 ;; This function uses a non-reentrant model
 25676 ;;
 25677                           
 25678                           	psect	text89
 25679  00601E                     __ptext89:
 25680                           	opt stack 0
 25681  00601E                     i2_isdigit:
 25682                           	opt stack 21
 25683                           
 25684                           ;incstack = 0
 25685                           ;i2isdigit@c stored from wreg
 25686  00601E  6E03               	movwf	i2isdigit@c,c
 25687  006020  0E00               	movlw	0
 25688  006022  6E02               	movwf	i2_isdigit$2081,c
 25689  006024  0E3A               	movlw	58
 25690  006026  6003               	cpfslt	i2isdigit@c,c
 25691  006028  D005               	goto	i2l6906
 25692  00602A  0E2F               	movlw	47
 25693  00602C  6403               	cpfsgt	i2isdigit@c,c
 25694  00602E  D002               	goto	i2l6906
 25695  006030  0E01               	movlw	1
 25696  006032  6E02               	movwf	i2_isdigit$2081,c
 25697  006034                     i2l6906:
 25698  006034  C002  F001         	movff	i2_isdigit$2081,??i2_isdigit
 25699  006038  3001               	rrcf	??i2_isdigit,w,c
 25700  00603A  0012               	return	
 25701  00603C                     __end_ofi2_isdigit:
 25702                           	opt stack 0
 25703                           pclatu	equ	0xFFB
 25704                           pclath	equ	0xFFA
 25705                           tblptru	equ	0xFF8
 25706                           tblptrh	equ	0xFF7
 25707                           tblptrl	equ	0xFF6
 25708                           tablat	equ	0xFF5
 25709                           prodh	equ	0xFF4
 25710                           prodl	equ	0xFF3
 25711                           intcon	equ	0xFF2
 25712                           intcon2	equ	0xFF1
 25713                           intcon3	equ	0xFF0
 25714                           indf0	equ	0xFEF
 25715                           postinc0	equ	0xFEE
 25716                           fsr0h	equ	0xFEA
 25717                           fsr0l	equ	0xFE9
 25718                           wreg	equ	0xFE8
 25719                           postdec1	equ	0xFE5
 25720                           fsr1h	equ	0xFE2
 25721                           fsr1l	equ	0xFE1
 25722                           indf2	equ	0xFDF
 25723                           postinc2	equ	0xFDE
 25724                           postdec2	equ	0xFDD
 25725                           fsr2h	equ	0xFDA
 25726                           fsr2l	equ	0xFD9
 25727                           status	equ	0xFD8
 25728                           
 25729 ;; *************** function i2___wmul *****************
 25730 ;; Defined at:
 25731 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 25732 ;; Parameters:    Size  Location     Type
 25733 ;;  multiplier      2    0[COMRAM] unsigned int 
 25734 ;;  multiplicand    2    2[COMRAM] unsigned int 
 25735 ;; Auto vars:     Size  Location     Type
 25736 ;;  __wmul          2    4[COMRAM] unsigned int 
 25737 ;; Return value:  Size  Location     Type
 25738 ;;                  2    0[COMRAM] unsigned int 
 25739 ;; Registers used:
 25740 ;;		wreg, status,2, status,0, prodl, prodh
 25741 ;; Tracked objects:
 25742 ;;		On entry : 0/0
 25743 ;;		On exit  : 0/0
 25744 ;;		Unchanged: 0/0
 25745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25746 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25747 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25749 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25750 ;;Total ram usage:        6 bytes
 25751 ;; Hardware stack levels used:    1
 25752 ;; This function calls:
 25753 ;;		Nothing
 25754 ;; This function is called by:
 25755 ;;		_printSortTimer
 25756 ;;		_retrieveLog
 25757 ;;		i2_printf
 25758 ;; This function uses a non-reentrant model
 25759 ;;
 25760                           
 25761                           	psect	text90
 25762  005F6A                     __ptext90:
 25763                           	opt stack 0
 25764  005F6A                     i2___wmul:
 25765                           	opt stack 21
 25766                           
 25767                           ;incstack = 0
 25768  005F6A  5001               	movf	i2___wmul@multiplier,w,c
 25769  005F6C  0203               	mulwf	i2___wmul@multiplicand,c
 25770  005F6E  CFF3 F005          	movff	prodl,i2___wmul@product
 25771  005F72  CFF4 F006          	movff	prodh,i2___wmul@product+1
 25772  005F76  5001               	movf	i2___wmul@multiplier,w,c
 25773  005F78  0204               	mulwf	i2___wmul@multiplicand+1,c
 25774  005F7A  50F3               	movf	prodl,w,c
 25775  005F7C  2606               	addwf	i2___wmul@product+1,f,c
 25776  005F7E  5002               	movf	i2___wmul@multiplier+1,w,c
 25777  005F80  0203               	mulwf	i2___wmul@multiplicand,c
 25778  005F82  50F3               	movf	prodl,w,c
 25779  005F84  2606               	addwf	i2___wmul@product+1,f,c
 25780  005F86  C005  F001         	movff	i2___wmul@product,?i2___wmul
 25781  005F8A  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 25782  005F8E  0012               	return	
 25783  005F90                     __end_ofi2___wmul:
 25784                           	opt stack 0
 25785                           pclatu	equ	0xFFB
 25786                           pclath	equ	0xFFA
 25787                           tblptru	equ	0xFF8
 25788                           tblptrh	equ	0xFF7
 25789                           tblptrl	equ	0xFF6
 25790                           tablat	equ	0xFF5
 25791                           prodh	equ	0xFF4
 25792                           prodl	equ	0xFF3
 25793                           intcon	equ	0xFF2
 25794                           intcon2	equ	0xFF1
 25795                           intcon3	equ	0xFF0
 25796                           indf0	equ	0xFEF
 25797                           postinc0	equ	0xFEE
 25798                           fsr0h	equ	0xFEA
 25799                           fsr0l	equ	0xFE9
 25800                           wreg	equ	0xFE8
 25801                           postdec1	equ	0xFE5
 25802                           fsr1h	equ	0xFE2
 25803                           fsr1l	equ	0xFE1
 25804                           indf2	equ	0xFDF
 25805                           postinc2	equ	0xFDE
 25806                           postdec2	equ	0xFDD
 25807                           fsr2h	equ	0xFDA
 25808                           fsr2l	equ	0xFD9
 25809                           status	equ	0xFD8
 25810                           
 25811 ;; *************** function i2___lwmod *****************
 25812 ;; Defined at:
 25813 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 25814 ;; Parameters:    Size  Location     Type
 25815 ;;  dividend        2    0[COMRAM] unsigned int 
 25816 ;;  divisor         2    2[COMRAM] unsigned int 
 25817 ;; Auto vars:     Size  Location     Type
 25818 ;;  __lwmod         1    4[COMRAM] unsigned char 
 25819 ;; Return value:  Size  Location     Type
 25820 ;;                  2    0[COMRAM] unsigned int 
 25821 ;; Registers used:
 25822 ;;		wreg, status,2, status,0
 25823 ;; Tracked objects:
 25824 ;;		On entry : 0/0
 25825 ;;		On exit  : 0/0
 25826 ;;		Unchanged: 0/0
 25827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25828 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25829 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25831 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25832 ;;Total ram usage:        5 bytes
 25833 ;; Hardware stack levels used:    1
 25834 ;; This function calls:
 25835 ;;		Nothing
 25836 ;; This function is called by:
 25837 ;;		_printSortTimer
 25838 ;;		i2_printf
 25839 ;; This function uses a non-reentrant model
 25840 ;;
 25841                           
 25842                           	psect	text91
 25843  005AA2                     __ptext91:
 25844                           	opt stack 0
 25845  005AA2                     i2___lwmod:
 25846                           	opt stack 21
 25847                           
 25848                           ;incstack = 0
 25849  005AA2  5003               	movf	i2___lwmod@divisor,w,c
 25850  005AA4  1004               	iorwf	i2___lwmod@divisor+1,w,c
 25851  005AA6  B4D8               	btfsc	status,2,c
 25852  005AA8  D018               	goto	i2l2039
 25853  005AAA  0E01               	movlw	1
 25854  005AAC  6E05               	movwf	i2___lwmod@counter,c
 25855  005AAE  D004               	goto	i2l6938
 25856  005AB0                     i2l6936:
 25857  005AB0  90D8               	bcf	status,0,c
 25858  005AB2  3603               	rlcf	i2___lwmod@divisor,f,c
 25859  005AB4  3604               	rlcf	i2___lwmod@divisor+1,f,c
 25860  005AB6  2A05               	incf	i2___lwmod@counter,f,c
 25861  005AB8                     i2l6938:
 25862  005AB8  AE04               	btfss	i2___lwmod@divisor+1,7,c
 25863  005ABA  D7FA               	goto	i2l6936
 25864  005ABC                     i2l6940:
 25865  005ABC  5003               	movf	i2___lwmod@divisor,w,c
 25866  005ABE  5C01               	subwf	i2___lwmod@dividend,w,c
 25867  005AC0  5004               	movf	i2___lwmod@divisor+1,w,c
 25868  005AC2  5802               	subwfb	i2___lwmod@dividend+1,w,c
 25869  005AC4  A0D8               	btfss	status,0,c
 25870  005AC6  D004               	goto	i2l6944
 25871  005AC8  5003               	movf	i2___lwmod@divisor,w,c
 25872  005ACA  5E01               	subwf	i2___lwmod@dividend,f,c
 25873  005ACC  5004               	movf	i2___lwmod@divisor+1,w,c
 25874  005ACE  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 25875  005AD0                     i2l6944:
 25876  005AD0  90D8               	bcf	status,0,c
 25877  005AD2  3204               	rrcf	i2___lwmod@divisor+1,f,c
 25878  005AD4  3203               	rrcf	i2___lwmod@divisor,f,c
 25879  005AD6  2E05               	decfsz	i2___lwmod@counter,f,c
 25880  005AD8  D7F1               	goto	i2l6940
 25881  005ADA                     i2l2039:
 25882  005ADA  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 25883  005ADE  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 25884  005AE2  0012               	return		;funcret
 25885  005AE4                     __end_ofi2___lwmod:
 25886                           	opt stack 0
 25887                           pclatu	equ	0xFFB
 25888                           pclath	equ	0xFFA
 25889                           tblptru	equ	0xFF8
 25890                           tblptrh	equ	0xFF7
 25891                           tblptrl	equ	0xFF6
 25892                           tablat	equ	0xFF5
 25893                           prodh	equ	0xFF4
 25894                           prodl	equ	0xFF3
 25895                           intcon	equ	0xFF2
 25896                           intcon2	equ	0xFF1
 25897                           intcon3	equ	0xFF0
 25898                           indf0	equ	0xFEF
 25899                           postinc0	equ	0xFEE
 25900                           fsr0h	equ	0xFEA
 25901                           fsr0l	equ	0xFE9
 25902                           wreg	equ	0xFE8
 25903                           postdec1	equ	0xFE5
 25904                           fsr1h	equ	0xFE2
 25905                           fsr1l	equ	0xFE1
 25906                           indf2	equ	0xFDF
 25907                           postinc2	equ	0xFDE
 25908                           postdec2	equ	0xFDD
 25909                           fsr2h	equ	0xFDA
 25910                           fsr2l	equ	0xFD9
 25911                           status	equ	0xFD8
 25912                           
 25913 ;; *************** function i2___lwdiv *****************
 25914 ;; Defined at:
 25915 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 25916 ;; Parameters:    Size  Location     Type
 25917 ;;  dividend        2    5[COMRAM] unsigned int 
 25918 ;;  divisor         2    7[COMRAM] unsigned int 
 25919 ;; Auto vars:     Size  Location     Type
 25920 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 25921 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 25922 ;; Return value:  Size  Location     Type
 25923 ;;                  2    5[COMRAM] unsigned int 
 25924 ;; Registers used:
 25925 ;;		wreg, status,2, status,0
 25926 ;; Tracked objects:
 25927 ;;		On entry : 0/0
 25928 ;;		On exit  : 0/0
 25929 ;;		Unchanged: 0/0
 25930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25931 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25932 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25934 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25935 ;;Total ram usage:        7 bytes
 25936 ;; Hardware stack levels used:    1
 25937 ;; This function calls:
 25938 ;;		Nothing
 25939 ;; This function is called by:
 25940 ;;		_printSortTimer
 25941 ;;		i2_printf
 25942 ;; This function uses a non-reentrant model
 25943 ;;
 25944                           
 25945                           	psect	text92
 25946  0058E0                     __ptext92:
 25947                           	opt stack 0
 25948  0058E0                     i2___lwdiv:
 25949                           	opt stack 21
 25950                           
 25951                           ;incstack = 0
 25952  0058E0  0E00               	movlw	0
 25953  0058E2  6E0B               	movwf	i2___lwdiv@quotient+1,c
 25954  0058E4  0E00               	movlw	0
 25955  0058E6  6E0A               	movwf	i2___lwdiv@quotient,c
 25956  0058E8  5008               	movf	i2___lwdiv@divisor,w,c
 25957  0058EA  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 25958  0058EC  B4D8               	btfsc	status,2,c
 25959  0058EE  D01C               	goto	i2l2029
 25960  0058F0  0E01               	movlw	1
 25961  0058F2  6E0C               	movwf	i2___lwdiv@counter,c
 25962  0058F4  D004               	goto	i2l6918
 25963  0058F6                     i2l6916:
 25964  0058F6  90D8               	bcf	status,0,c
 25965  0058F8  3608               	rlcf	i2___lwdiv@divisor,f,c
 25966  0058FA  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 25967  0058FC  2A0C               	incf	i2___lwdiv@counter,f,c
 25968  0058FE                     i2l6918:
 25969  0058FE  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 25970  005900  D7FA               	goto	i2l6916
 25971  005902                     i2l6920:
 25972  005902  90D8               	bcf	status,0,c
 25973  005904  360A               	rlcf	i2___lwdiv@quotient,f,c
 25974  005906  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 25975  005908  5008               	movf	i2___lwdiv@divisor,w,c
 25976  00590A  5C06               	subwf	i2___lwdiv@dividend,w,c
 25977  00590C  5009               	movf	i2___lwdiv@divisor+1,w,c
 25978  00590E  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 25979  005910  A0D8               	btfss	status,0,c
 25980  005912  D005               	goto	i2l6928
 25981  005914  5008               	movf	i2___lwdiv@divisor,w,c
 25982  005916  5E06               	subwf	i2___lwdiv@dividend,f,c
 25983  005918  5009               	movf	i2___lwdiv@divisor+1,w,c
 25984  00591A  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 25985  00591C  800A               	bsf	i2___lwdiv@quotient,0,c
 25986  00591E                     i2l6928:
 25987  00591E  90D8               	bcf	status,0,c
 25988  005920  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 25989  005922  3208               	rrcf	i2___lwdiv@divisor,f,c
 25990  005924  2E0C               	decfsz	i2___lwdiv@counter,f,c
 25991  005926  D7ED               	goto	i2l6920
 25992  005928                     i2l2029:
 25993  005928  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 25994  00592C  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 25995  005930  0012               	return		;funcret
 25996  005932                     __end_ofi2___lwdiv:
 25997                           	opt stack 0
 25998                           pclatu	equ	0xFFB
 25999                           pclath	equ	0xFFA
 26000                           tblptru	equ	0xFF8
 26001                           tblptrh	equ	0xFF7
 26002                           tblptrl	equ	0xFF6
 26003                           tablat	equ	0xFF5
 26004                           prodh	equ	0xFF4
 26005                           prodl	equ	0xFF3
 26006                           intcon	equ	0xFF2
 26007                           intcon2	equ	0xFF1
 26008                           intcon3	equ	0xFF0
 26009                           indf0	equ	0xFEF
 26010                           postinc0	equ	0xFEE
 26011                           fsr0h	equ	0xFEA
 26012                           fsr0l	equ	0xFE9
 26013                           wreg	equ	0xFE8
 26014                           postdec1	equ	0xFE5
 26015                           fsr1h	equ	0xFE2
 26016                           fsr1l	equ	0xFE1
 26017                           indf2	equ	0xFDF
 26018                           postinc2	equ	0xFDE
 26019                           postdec2	equ	0xFDD
 26020                           fsr2h	equ	0xFDA
 26021                           fsr2l	equ	0xFD9
 26022                           status	equ	0xFD8
 26023                           
 26024 ;; *************** function i2_lcdInst *****************
 26025 ;; Defined at:
 26026 ;;		line 15 in file "lcd.c"
 26027 ;; Parameters:    Size  Location     Type
 26028 ;;  data            1    wreg     unsigned char 
 26029 ;; Auto vars:     Size  Location     Type
 26030 ;;  data            1    2[COMRAM] unsigned char 
 26031 ;; Return value:  Size  Location     Type
 26032 ;;                  1    wreg      void 
 26033 ;; Registers used:
 26034 ;;		wreg, status,2, status,0, cstack
 26035 ;; Tracked objects:
 26036 ;;		On entry : 0/0
 26037 ;;		On exit  : 0/0
 26038 ;;		Unchanged: 0/0
 26039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26041 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26043 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26044 ;;Total ram usage:        1 bytes
 26045 ;; Hardware stack levels used:    1
 26046 ;; Hardware stack levels required when called:    1
 26047 ;; This function calls:
 26048 ;;		i2_lcdNibble
 26049 ;; This function is called by:
 26050 ;;		_change_state_to_menu_11
 26051 ;;		_change_state_to_menu_23
 26052 ;;		_change_state_to_logs_11
 26053 ;;		_change_state_to_logs_12
 26054 ;;		_change_state_to_logs_22
 26055 ;;		_change_state_to_logs_23
 26056 ;;		_change_state_to_logs_33
 26057 ;;		_change_state_to_logs_34
 26058 ;;		_printSortTimer
 26059 ;;		i2_change_state_to_menu_start
 26060 ;;		i2_change_state_to_menu_12
 26061 ;;		i2_change_state_to_menu_22
 26062 ;;		i2_printRTC
 26063 ;; This function uses a non-reentrant model
 26064 ;;
 26065                           
 26066                           	psect	text93
 26067  0060EE                     __ptext93:
 26068                           	opt stack 0
 26069  0060EE                     i2_lcdInst:
 26070                           	opt stack 20
 26071                           
 26072                           ;incstack = 0
 26073                           ;i2lcdInst@data stored from wreg
 26074  0060EE  6E03               	movwf	i2lcdInst@data,c
 26075                           
 26076                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 26077  0060F0  948C               	bcf	3980,2,c	;volatile
 26078                           
 26079                           ;lcd.c: 17: lcdNibble(data);
 26080  0060F2  5003               	movf	i2lcdInst@data,w,c
 26081  0060F4  EC43  F02C         	call	i2_lcdNibble
 26082  0060F8  0012               	return		;funcret
 26083  0060FA                     __end_ofi2_lcdInst:
 26084                           	opt stack 0
 26085                           pclatu	equ	0xFFB
 26086                           pclath	equ	0xFFA
 26087                           tblptru	equ	0xFF8
 26088                           tblptrh	equ	0xFF7
 26089                           tblptrl	equ	0xFF6
 26090                           tablat	equ	0xFF5
 26091                           prodh	equ	0xFF4
 26092                           prodl	equ	0xFF3
 26093                           intcon	equ	0xFF2
 26094                           intcon2	equ	0xFF1
 26095                           intcon3	equ	0xFF0
 26096                           indf0	equ	0xFEF
 26097                           postinc0	equ	0xFEE
 26098                           fsr0h	equ	0xFEA
 26099                           fsr0l	equ	0xFE9
 26100                           wreg	equ	0xFE8
 26101                           postdec1	equ	0xFE5
 26102                           fsr1h	equ	0xFE2
 26103                           fsr1l	equ	0xFE1
 26104                           indf2	equ	0xFDF
 26105                           postinc2	equ	0xFDE
 26106                           postdec2	equ	0xFDD
 26107                           fsr2h	equ	0xFDA
 26108                           fsr2l	equ	0xFD9
 26109                           status	equ	0xFD8
 26110                           
 26111 ;; *************** function i2_lcdNibble *****************
 26112 ;; Defined at:
 26113 ;;		line 25 in file "lcd.c"
 26114 ;; Parameters:    Size  Location     Type
 26115 ;;  data            1    wreg     unsigned char 
 26116 ;; Auto vars:     Size  Location     Type
 26117 ;;  data            1    1[COMRAM] unsigned char 
 26118 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 26119 ;; Return value:  Size  Location     Type
 26120 ;;                  1    wreg      void 
 26121 ;; Registers used:
 26122 ;;		wreg, status,2, status,0
 26123 ;; Tracked objects:
 26124 ;;		On entry : 0/0
 26125 ;;		On exit  : 0/0
 26126 ;;		Unchanged: 0/0
 26127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26129 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26131 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26132 ;;Total ram usage:        2 bytes
 26133 ;; Hardware stack levels used:    1
 26134 ;; This function calls:
 26135 ;;		Nothing
 26136 ;; This function is called by:
 26137 ;;		i2_lcdInst
 26138 ;;		i2_putch
 26139 ;; This function uses a non-reentrant model
 26140 ;;
 26141                           
 26142                           	psect	text94
 26143  005886                     __ptext94:
 26144                           	opt stack 0
 26145  005886                     i2_lcdNibble:
 26146                           	opt stack 20
 26147                           
 26148                           ;incstack = 0
 26149                           ;i2lcdNibble@data stored from wreg
 26150  005886  6E02               	movwf	i2lcdNibble@data,c
 26151                           
 26152                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 26153  005888  9EF2               	bcf	intcon,7,c	;volatile
 26154                           
 26155                           ;lcd.c: 28: char temp = data & 0xF0;
 26156  00588A  5002               	movf	i2lcdNibble@data,w,c
 26157  00588C  0BF0               	andlw	240
 26158  00588E  6E01               	movwf	i2lcdNibble@temp,c
 26159                           
 26160                           ;lcd.c: 29: LATD = LATD & 0x0F;
 26161  005890  508C               	movf	3980,w,c	;volatile
 26162  005892  0B0F               	andlw	15
 26163  005894  6E8C               	movwf	3980,c	;volatile
 26164                           
 26165                           ;lcd.c: 30: LATD = temp | LATD;
 26166  005896  5001               	movf	i2lcdNibble@temp,w,c
 26167  005898  108C               	iorwf	3980,w,c	;volatile
 26168  00589A  6E8C               	movwf	3980,c	;volatile
 26169                           
 26170                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 26171  00589C  868C               	bsf	3980,3,c	;volatile
 26172                           
 26173                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 26174  00589E  0E42               	movlw	66
 26175  0058A0                     i2u1243_47:
 26176  0058A0  2EE8               	decfsz	wreg,f,c
 26177  0058A2  D7FE               	bra	i2u1243_47
 26178  0058A4  D000               	nop2	
 26179                           
 26180                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 26181  0058A6  968C               	bcf	3980,3,c	;volatile
 26182                           
 26183                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 26184  0058A8  0E42               	movlw	66
 26185  0058AA                     i2u1244_47:
 26186  0058AA  2EE8               	decfsz	wreg,f,c
 26187  0058AC  D7FE               	bra	i2u1244_47
 26188  0058AE  D000               	nop2	
 26189                           
 26190                           ;lcd.c: 37: data = data << 4;
 26191  0058B0  3802               	swapf	i2lcdNibble@data,w,c
 26192  0058B2  0BF0               	andlw	240
 26193  0058B4  6E02               	movwf	i2lcdNibble@data,c
 26194                           
 26195                           ;lcd.c: 39: temp = data & 0xF0;
 26196  0058B6  5002               	movf	i2lcdNibble@data,w,c
 26197  0058B8  0BF0               	andlw	240
 26198  0058BA  6E01               	movwf	i2lcdNibble@temp,c
 26199                           
 26200                           ;lcd.c: 40: LATD = LATD & 0x0F;
 26201  0058BC  508C               	movf	3980,w,c	;volatile
 26202  0058BE  0B0F               	andlw	15
 26203  0058C0  6E8C               	movwf	3980,c	;volatile
 26204                           
 26205                           ;lcd.c: 41: LATD = temp | LATD;
 26206  0058C2  5001               	movf	i2lcdNibble@temp,w,c
 26207  0058C4  108C               	iorwf	3980,w,c	;volatile
 26208  0058C6  6E8C               	movwf	3980,c	;volatile
 26209                           
 26210                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 26211  0058C8  868C               	bsf	3980,3,c	;volatile
 26212                           
 26213                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 26214  0058CA  0E42               	movlw	66
 26215  0058CC                     i2u1245_47:
 26216  0058CC  2EE8               	decfsz	wreg,f,c
 26217  0058CE  D7FE               	bra	i2u1245_47
 26218  0058D0  D000               	nop2	
 26219                           
 26220                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 26221  0058D2  968C               	bcf	3980,3,c	;volatile
 26222                           
 26223                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 26224  0058D4  0E42               	movlw	66
 26225  0058D6                     i2u1246_47:
 26226  0058D6  2EE8               	decfsz	wreg,f,c
 26227  0058D8  D7FE               	bra	i2u1246_47
 26228  0058DA  D000               	nop2	
 26229                           
 26230                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 26231  0058DC  8EF2               	bsf	intcon,7,c	;volatile
 26232  0058DE  0012               	return		;funcret
 26233  0058E0                     __end_ofi2_lcdNibble:
 26234                           	opt stack 0
 26235                           pclatu	equ	0xFFB
 26236                           pclath	equ	0xFFA
 26237                           tblptru	equ	0xFF8
 26238                           tblptrh	equ	0xFF7
 26239                           tblptrl	equ	0xFF6
 26240                           tablat	equ	0xFF5
 26241                           prodh	equ	0xFF4
 26242                           prodl	equ	0xFF3
 26243                           intcon	equ	0xFF2
 26244                           intcon2	equ	0xFF1
 26245                           intcon3	equ	0xFF0
 26246                           indf0	equ	0xFEF
 26247                           postinc0	equ	0xFEE
 26248                           fsr0h	equ	0xFEA
 26249                           fsr0l	equ	0xFE9
 26250                           wreg	equ	0xFE8
 26251                           postdec1	equ	0xFE5
 26252                           fsr1h	equ	0xFE2
 26253                           fsr1l	equ	0xFE1
 26254                           indf2	equ	0xFDF
 26255                           postinc2	equ	0xFDE
 26256                           postdec2	equ	0xFDD
 26257                           fsr2h	equ	0xFDA
 26258                           fsr2l	equ	0xFD9
 26259                           status	equ	0xFD8
 26260                           
 26261 ;; *************** function i2_getRTC *****************
 26262 ;; Defined at:
 26263 ;;		line 44 in file "RTC.c"
 26264 ;; Parameters:    Size  Location     Type
 26265 ;;		None
 26266 ;; Auto vars:     Size  Location     Type
 26267 ;;  getRTC          2    3[COMRAM] int 
 26268 ;; Return value:  Size  Location     Type
 26269 ;;                  1    wreg      void 
 26270 ;; Registers used:
 26271 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26272 ;; Tracked objects:
 26273 ;;		On entry : 0/0
 26274 ;;		On exit  : 0/0
 26275 ;;		Unchanged: 0/0
 26276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26278 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26280 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26281 ;;Total ram usage:        2 bytes
 26282 ;; Hardware stack levels used:    1
 26283 ;; Hardware stack levels required when called:    2
 26284 ;; This function calls:
 26285 ;;		i2_I2C_Master_Read
 26286 ;;		i2_I2C_Master_Start
 26287 ;;		i2_I2C_Master_Stop
 26288 ;;		i2_I2C_Master_Write
 26289 ;; This function is called by:
 26290 ;;		_printSortTimer
 26291 ;;		i2_printRTC
 26292 ;; This function uses a non-reentrant model
 26293 ;;
 26294                           
 26295                           	psect	text95
 26296  005546                     __ptext95:
 26297                           	opt stack 0
 26298  005546                     i2_getRTC:
 26299                           	opt stack 19
 26300                           
 26301                           ;RTC.c: 48: I2C_Master_Start();
 26302                           
 26303                           ;incstack = 0
 26304  005546  EC97  F030         	call	i2_I2C_Master_Start	;wreg free
 26305                           
 26306                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 26307  00554A  0E00               	movlw	0
 26308  00554C  6E03               	movwf	i2I2C_Master_Write@d+1,c
 26309  00554E  0ED0               	movlw	208
 26310  005550  6E02               	movwf	i2I2C_Master_Write@d,c
 26311  005552  EC82  F030         	call	i2_I2C_Master_Write	;wreg free
 26312                           
 26313                           ;RTC.c: 50: I2C_Master_Write(0x00);
 26314  005556  0E00               	movlw	0
 26315  005558  6E03               	movwf	i2I2C_Master_Write@d+1,c
 26316  00555A  0E00               	movlw	0
 26317  00555C  6E02               	movwf	i2I2C_Master_Write@d,c
 26318  00555E  EC82  F030         	call	i2_I2C_Master_Write	;wreg free
 26319                           
 26320                           ;RTC.c: 51: I2C_Master_Stop();
 26321  005562  EC93  F030         	call	i2_I2C_Master_Stop	;wreg free
 26322                           
 26323                           ;RTC.c: 54: I2C_Master_Start();
 26324  005566  EC97  F030         	call	i2_I2C_Master_Start	;wreg free
 26325                           
 26326                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 26327  00556A  0E00               	movlw	0
 26328  00556C  6E03               	movwf	i2I2C_Master_Write@d+1,c
 26329  00556E  0ED1               	movlw	209
 26330  005570  6E02               	movwf	i2I2C_Master_Write@d,c
 26331  005572  EC82  F030         	call	i2_I2C_Master_Write	;wreg free
 26332                           
 26333                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 26334  005576  0E00               	movlw	0
 26335  005578  6E05               	movwf	i2getRTC@i+1,c
 26336  00557A  0E00               	movlw	0
 26337  00557C  6E04               	movwf	i2getRTC@i,c
 26338  00557E                     i2l7224:
 26339  00557E  BE05               	btfsc	i2getRTC@i+1,7,c
 26340  005580  D006               	goto	i2l7228
 26341  005582  5005               	movf	i2getRTC@i+1,w,c
 26342  005584  E111               	bnz	i2l7234
 26343  005586  0E06               	movlw	6
 26344  005588  5C04               	subwf	i2getRTC@i,w,c
 26345  00558A  B0D8               	btfsc	status,0,c
 26346  00558C  D00D               	goto	i2l7234
 26347  00558E                     i2l7228:
 26348                           
 26349                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 26350  00558E  0E24               	movlw	low _time
 26351  005590  2404               	addwf	i2getRTC@i,w,c
 26352  005592  6ED9               	movwf	fsr2l,c
 26353  005594  0E01               	movlw	high _time
 26354  005596  2005               	addwfc	i2getRTC@i+1,w,c
 26355  005598  6EDA               	movwf	fsr2h,c
 26356  00559A  0E01               	movlw	1
 26357  00559C  ECC8  F02F         	call	i2_I2C_Master_Read
 26358  0055A0  6EDF               	movwf	indf2,c
 26359  0055A2  4A04               	infsnz	i2getRTC@i,f,c
 26360  0055A4  2A05               	incf	i2getRTC@i+1,f,c
 26361  0055A6  D7EB               	goto	i2l7224
 26362  0055A8                     i2l7234:
 26363                           
 26364                           ;RTC.c: 58: }
 26365                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 26366  0055A8  0E00               	movlw	0
 26367  0055AA  ECC8  F02F         	call	i2_I2C_Master_Read
 26368  0055AE  0101               	movlb	1	; () banked
 26369  0055B0  6F2A               	movwf	(_time+6)& (0+255),b
 26370                           
 26371                           ;RTC.c: 60: I2C_Master_Stop();
 26372  0055B2  EC93  F030         	call	i2_I2C_Master_Stop	;wreg free
 26373  0055B6  0012               	return		;funcret
 26374  0055B8                     __end_ofi2_getRTC:
 26375                           	opt stack 0
 26376                           pclatu	equ	0xFFB
 26377                           pclath	equ	0xFFA
 26378                           tblptru	equ	0xFF8
 26379                           tblptrh	equ	0xFF7
 26380                           tblptrl	equ	0xFF6
 26381                           tablat	equ	0xFF5
 26382                           prodh	equ	0xFF4
 26383                           prodl	equ	0xFF3
 26384                           intcon	equ	0xFF2
 26385                           intcon2	equ	0xFF1
 26386                           intcon3	equ	0xFF0
 26387                           indf0	equ	0xFEF
 26388                           postinc0	equ	0xFEE
 26389                           fsr0h	equ	0xFEA
 26390                           fsr0l	equ	0xFE9
 26391                           wreg	equ	0xFE8
 26392                           postdec1	equ	0xFE5
 26393                           fsr1h	equ	0xFE2
 26394                           fsr1l	equ	0xFE1
 26395                           indf2	equ	0xFDF
 26396                           postinc2	equ	0xFDE
 26397                           postdec2	equ	0xFDD
 26398                           fsr2h	equ	0xFDA
 26399                           fsr2l	equ	0xFD9
 26400                           status	equ	0xFD8
 26401                           
 26402 ;; *************** function i2_I2C_Master_Write *****************
 26403 ;; Defined at:
 26404 ;;		line 49 in file "I2C.c"
 26405 ;; Parameters:    Size  Location     Type
 26406 ;;  d               2    1[COMRAM] unsigned int 
 26407 ;; Auto vars:     Size  Location     Type
 26408 ;;		None
 26409 ;; Return value:  Size  Location     Type
 26410 ;;                  1    wreg      void 
 26411 ;; Registers used:
 26412 ;;		wreg, status,2, status,0, cstack
 26413 ;; Tracked objects:
 26414 ;;		On entry : 0/0
 26415 ;;		On exit  : 0/0
 26416 ;;		Unchanged: 0/0
 26417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26418 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26421 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26422 ;;Total ram usage:        2 bytes
 26423 ;; Hardware stack levels used:    1
 26424 ;; Hardware stack levels required when called:    1
 26425 ;; This function calls:
 26426 ;;		i2_I2C_Master_Wait
 26427 ;; This function is called by:
 26428 ;;		i2_getRTC
 26429 ;; This function uses a non-reentrant model
 26430 ;;
 26431                           
 26432                           	psect	text96
 26433  006104                     __ptext96:
 26434                           	opt stack 0
 26435  006104                     i2_I2C_Master_Write:
 26436                           	opt stack 19
 26437                           
 26438                           ;I2C.c: 51: I2C_Master_Wait();
 26439                           
 26440                           ;incstack = 0
 26441  006104  EC58  F030         	call	i2_I2C_Master_Wait	;wreg free
 26442                           
 26443                           ;I2C.c: 52: SSPBUF = d;
 26444  006108  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 26445  00610C  0012               	return		;funcret
 26446  00610E                     __end_ofi2_I2C_Master_Write:
 26447                           	opt stack 0
 26448                           pclatu	equ	0xFFB
 26449                           pclath	equ	0xFFA
 26450                           tblptru	equ	0xFF8
 26451                           tblptrh	equ	0xFF7
 26452                           tblptrl	equ	0xFF6
 26453                           tablat	equ	0xFF5
 26454                           prodh	equ	0xFF4
 26455                           prodl	equ	0xFF3
 26456                           intcon	equ	0xFF2
 26457                           intcon2	equ	0xFF1
 26458                           intcon3	equ	0xFF0
 26459                           indf0	equ	0xFEF
 26460                           postinc0	equ	0xFEE
 26461                           fsr0h	equ	0xFEA
 26462                           fsr0l	equ	0xFE9
 26463                           wreg	equ	0xFE8
 26464                           postdec1	equ	0xFE5
 26465                           fsr1h	equ	0xFE2
 26466                           fsr1l	equ	0xFE1
 26467                           indf2	equ	0xFDF
 26468                           postinc2	equ	0xFDE
 26469                           postdec2	equ	0xFDD
 26470                           fsr2h	equ	0xFDA
 26471                           fsr2l	equ	0xFD9
 26472                           status	equ	0xFD8
 26473                           
 26474 ;; *************** function i2_I2C_Master_Stop *****************
 26475 ;; Defined at:
 26476 ;;		line 43 in file "I2C.c"
 26477 ;; Parameters:    Size  Location     Type
 26478 ;;		None
 26479 ;; Auto vars:     Size  Location     Type
 26480 ;;		None
 26481 ;; Return value:  Size  Location     Type
 26482 ;;                  1    wreg      void 
 26483 ;; Registers used:
 26484 ;;		wreg, status,2, status,0, cstack
 26485 ;; Tracked objects:
 26486 ;;		On entry : 0/0
 26487 ;;		On exit  : 0/0
 26488 ;;		Unchanged: 0/0
 26489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26493 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26494 ;;Total ram usage:        0 bytes
 26495 ;; Hardware stack levels used:    1
 26496 ;; Hardware stack levels required when called:    1
 26497 ;; This function calls:
 26498 ;;		i2_I2C_Master_Wait
 26499 ;; This function is called by:
 26500 ;;		i2_getRTC
 26501 ;; This function uses a non-reentrant model
 26502 ;;
 26503                           
 26504                           	psect	text97
 26505  006126                     __ptext97:
 26506                           	opt stack 0
 26507  006126                     i2_I2C_Master_Stop:
 26508                           	opt stack 19
 26509                           
 26510                           ;I2C.c: 45: I2C_Master_Wait();
 26511                           
 26512                           ;incstack = 0
 26513  006126  EC58  F030         	call	i2_I2C_Master_Wait	;wreg free
 26514                           
 26515                           ;I2C.c: 46: PEN = 1;
 26516  00612A  84C5               	bsf	4037,2,c	;volatile
 26517  00612C  0012               	return		;funcret
 26518  00612E                     __end_ofi2_I2C_Master_Stop:
 26519                           	opt stack 0
 26520                           pclatu	equ	0xFFB
 26521                           pclath	equ	0xFFA
 26522                           tblptru	equ	0xFF8
 26523                           tblptrh	equ	0xFF7
 26524                           tblptrl	equ	0xFF6
 26525                           tablat	equ	0xFF5
 26526                           prodh	equ	0xFF4
 26527                           prodl	equ	0xFF3
 26528                           intcon	equ	0xFF2
 26529                           intcon2	equ	0xFF1
 26530                           intcon3	equ	0xFF0
 26531                           indf0	equ	0xFEF
 26532                           postinc0	equ	0xFEE
 26533                           fsr0h	equ	0xFEA
 26534                           fsr0l	equ	0xFE9
 26535                           wreg	equ	0xFE8
 26536                           postdec1	equ	0xFE5
 26537                           fsr1h	equ	0xFE2
 26538                           fsr1l	equ	0xFE1
 26539                           indf2	equ	0xFDF
 26540                           postinc2	equ	0xFDE
 26541                           postdec2	equ	0xFDD
 26542                           fsr2h	equ	0xFDA
 26543                           fsr2l	equ	0xFD9
 26544                           status	equ	0xFD8
 26545                           
 26546 ;; *************** function i2_I2C_Master_Start *****************
 26547 ;; Defined at:
 26548 ;;		line 31 in file "I2C.c"
 26549 ;; Parameters:    Size  Location     Type
 26550 ;;		None
 26551 ;; Auto vars:     Size  Location     Type
 26552 ;;		None
 26553 ;; Return value:  Size  Location     Type
 26554 ;;                  1    wreg      void 
 26555 ;; Registers used:
 26556 ;;		wreg, status,2, status,0, cstack
 26557 ;; Tracked objects:
 26558 ;;		On entry : 0/0
 26559 ;;		On exit  : 0/0
 26560 ;;		Unchanged: 0/0
 26561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26565 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26566 ;;Total ram usage:        0 bytes
 26567 ;; Hardware stack levels used:    1
 26568 ;; Hardware stack levels required when called:    1
 26569 ;; This function calls:
 26570 ;;		i2_I2C_Master_Wait
 26571 ;; This function is called by:
 26572 ;;		i2_getRTC
 26573 ;; This function uses a non-reentrant model
 26574 ;;
 26575                           
 26576                           	psect	text98
 26577  00612E                     __ptext98:
 26578                           	opt stack 0
 26579  00612E                     i2_I2C_Master_Start:
 26580                           	opt stack 19
 26581                           
 26582                           ;I2C.c: 33: I2C_Master_Wait();
 26583                           
 26584                           ;incstack = 0
 26585  00612E  EC58  F030         	call	i2_I2C_Master_Wait	;wreg free
 26586                           
 26587                           ;I2C.c: 34: SEN = 1;
 26588  006132  80C5               	bsf	4037,0,c	;volatile
 26589  006134  0012               	return		;funcret
 26590  006136                     __end_ofi2_I2C_Master_Start:
 26591                           	opt stack 0
 26592                           pclatu	equ	0xFFB
 26593                           pclath	equ	0xFFA
 26594                           tblptru	equ	0xFF8
 26595                           tblptrh	equ	0xFF7
 26596                           tblptrl	equ	0xFF6
 26597                           tablat	equ	0xFF5
 26598                           prodh	equ	0xFF4
 26599                           prodl	equ	0xFF3
 26600                           intcon	equ	0xFF2
 26601                           intcon2	equ	0xFF1
 26602                           intcon3	equ	0xFF0
 26603                           indf0	equ	0xFEF
 26604                           postinc0	equ	0xFEE
 26605                           fsr0h	equ	0xFEA
 26606                           fsr0l	equ	0xFE9
 26607                           wreg	equ	0xFE8
 26608                           postdec1	equ	0xFE5
 26609                           fsr1h	equ	0xFE2
 26610                           fsr1l	equ	0xFE1
 26611                           indf2	equ	0xFDF
 26612                           postinc2	equ	0xFDE
 26613                           postdec2	equ	0xFDD
 26614                           fsr2h	equ	0xFDA
 26615                           fsr2l	equ	0xFD9
 26616                           status	equ	0xFD8
 26617                           
 26618 ;; *************** function i2_I2C_Master_Read *****************
 26619 ;; Defined at:
 26620 ;;		line 55 in file "I2C.c"
 26621 ;; Parameters:    Size  Location     Type
 26622 ;;  a               1    wreg     unsigned char 
 26623 ;; Auto vars:     Size  Location     Type
 26624 ;;  a               1    1[COMRAM] unsigned char 
 26625 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 26626 ;; Return value:  Size  Location     Type
 26627 ;;                  1    wreg      unsigned char 
 26628 ;; Registers used:
 26629 ;;		wreg, status,2, status,0, cstack
 26630 ;; Tracked objects:
 26631 ;;		On entry : 0/0
 26632 ;;		On exit  : 0/0
 26633 ;;		Unchanged: 0/0
 26634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26636 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26638 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26639 ;;Total ram usage:        2 bytes
 26640 ;; Hardware stack levels used:    1
 26641 ;; Hardware stack levels required when called:    1
 26642 ;; This function calls:
 26643 ;;		i2_I2C_Master_Wait
 26644 ;; This function is called by:
 26645 ;;		i2_getRTC
 26646 ;; This function uses a non-reentrant model
 26647 ;;
 26648                           
 26649                           	psect	text99
 26650  005F90                     __ptext99:
 26651                           	opt stack 0
 26652  005F90                     i2_I2C_Master_Read:
 26653                           	opt stack 19
 26654                           
 26655                           ;incstack = 0
 26656                           ;i2I2C_Master_Read@a stored from wreg
 26657  005F90  6E02               	movwf	i2I2C_Master_Read@a,c
 26658                           
 26659                           ;I2C.c: 57: unsigned char temp;
 26660                           ;I2C.c: 58: I2C_Master_Wait();
 26661  005F92  EC58  F030         	call	i2_I2C_Master_Wait	;wreg free
 26662                           
 26663                           ;I2C.c: 59: RCEN = 1;
 26664  005F96  86C5               	bsf	4037,3,c	;volatile
 26665                           
 26666                           ;I2C.c: 60: I2C_Master_Wait();
 26667  005F98  EC58  F030         	call	i2_I2C_Master_Wait	;wreg free
 26668                           
 26669                           ;I2C.c: 61: temp = SSPBUF;
 26670  005F9C  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 26671                           
 26672                           ;I2C.c: 62: I2C_Master_Wait();
 26673  005FA0  EC58  F030         	call	i2_I2C_Master_Wait	;wreg free
 26674                           
 26675                           ;I2C.c: 63: ACKDT = (a)?0:1;
 26676  005FA4  5002               	movf	i2I2C_Master_Read@a,w,c
 26677  005FA6  A4D8               	btfss	status,2,c
 26678  005FA8  D002               	goto	i2u554_40
 26679  005FAA  8AC5               	bsf	4037,5,c	;volatile
 26680  005FAC  D001               	goto	i2l6882
 26681  005FAE                     i2u554_40:
 26682  005FAE  9AC5               	bcf	4037,5,c	;volatile
 26683  005FB0                     i2l6882:
 26684                           
 26685                           ;I2C.c: 64: ACKEN = 1;
 26686  005FB0  88C5               	bsf	4037,4,c	;volatile
 26687                           
 26688                           ;I2C.c: 65: return temp;
 26689  005FB2  5003               	movf	i2I2C_Master_Read@temp,w,c
 26690  005FB4  0012               	return	
 26691  005FB6                     __end_ofi2_I2C_Master_Read:
 26692                           	opt stack 0
 26693                           pclatu	equ	0xFFB
 26694                           pclath	equ	0xFFA
 26695                           tblptru	equ	0xFF8
 26696                           tblptrh	equ	0xFF7
 26697                           tblptrl	equ	0xFF6
 26698                           tablat	equ	0xFF5
 26699                           prodh	equ	0xFF4
 26700                           prodl	equ	0xFF3
 26701                           intcon	equ	0xFF2
 26702                           intcon2	equ	0xFF1
 26703                           intcon3	equ	0xFF0
 26704                           indf0	equ	0xFEF
 26705                           postinc0	equ	0xFEE
 26706                           fsr0h	equ	0xFEA
 26707                           fsr0l	equ	0xFE9
 26708                           wreg	equ	0xFE8
 26709                           postdec1	equ	0xFE5
 26710                           fsr1h	equ	0xFE2
 26711                           fsr1l	equ	0xFE1
 26712                           indf2	equ	0xFDF
 26713                           postinc2	equ	0xFDE
 26714                           postdec2	equ	0xFDD
 26715                           fsr2h	equ	0xFDA
 26716                           fsr2l	equ	0xFD9
 26717                           status	equ	0xFD8
 26718                           
 26719 ;; *************** function i2_I2C_Master_Wait *****************
 26720 ;; Defined at:
 26721 ;;		line 26 in file "I2C.c"
 26722 ;; Parameters:    Size  Location     Type
 26723 ;;		None
 26724 ;; Auto vars:     Size  Location     Type
 26725 ;;		None
 26726 ;; Return value:  Size  Location     Type
 26727 ;;                  1    wreg      void 
 26728 ;; Registers used:
 26729 ;;		wreg, status,2, status,0
 26730 ;; Tracked objects:
 26731 ;;		On entry : 0/0
 26732 ;;		On exit  : 0/0
 26733 ;;		Unchanged: 0/0
 26734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26737 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26738 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26739 ;;Total ram usage:        1 bytes
 26740 ;; Hardware stack levels used:    1
 26741 ;; This function calls:
 26742 ;;		Nothing
 26743 ;; This function is called by:
 26744 ;;		i2_I2C_Master_Start
 26745 ;;		i2_I2C_Master_Stop
 26746 ;;		i2_I2C_Master_Write
 26747 ;;		i2_I2C_Master_Read
 26748 ;; This function uses a non-reentrant model
 26749 ;;
 26750                           
 26751                           	psect	text100
 26752  0060B0                     __ptext100:
 26753                           	opt stack 0
 26754  0060B0                     i2_I2C_Master_Wait:
 26755                           	opt stack 19
 26756  0060B0                     i2l78:
 26757  0060B0  B4C7               	btfsc	4039,2,c	;volatile
 26758  0060B2  D7FE               	goto	i2l78
 26759  0060B4  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 26760  0060B8  0E1F               	movlw	31
 26761  0060BA  1601               	andwf	??i2_I2C_Master_Wait,f,c
 26762  0060BC  B4D8               	btfsc	status,2,c
 26763  0060BE  0012               	return	
 26764  0060C0  D7F7               	goto	i2l78
 26765  0060C2                     __end_ofi2_I2C_Master_Wait:
 26766                           	opt stack 0
 26767                           pclatu	equ	0xFFB
 26768                           pclath	equ	0xFFA
 26769                           tblptru	equ	0xFF8
 26770                           tblptrh	equ	0xFF7
 26771                           tblptrl	equ	0xFF6
 26772                           tablat	equ	0xFF5
 26773                           prodh	equ	0xFF4
 26774                           prodl	equ	0xFF3
 26775                           intcon	equ	0xFF2
 26776                           intcon2	equ	0xFF1
 26777                           intcon3	equ	0xFF0
 26778                           indf0	equ	0xFEF
 26779                           postinc0	equ	0xFEE
 26780                           fsr0h	equ	0xFEA
 26781                           fsr0l	equ	0xFE9
 26782                           wreg	equ	0xFE8
 26783                           postdec1	equ	0xFE5
 26784                           fsr1h	equ	0xFE2
 26785                           fsr1l	equ	0xFE1
 26786                           indf2	equ	0xFDF
 26787                           postinc2	equ	0xFDE
 26788                           postdec2	equ	0xFDD
 26789                           fsr2h	equ	0xFDA
 26790                           fsr2l	equ	0xFD9
 26791                           status	equ	0xFD8
 26792                           
 26793 ;; *************** function i2___awmod *****************
 26794 ;; Defined at:
 26795 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 26796 ;; Parameters:    Size  Location     Type
 26797 ;;  dividend        2    0[COMRAM] int 
 26798 ;;  divisor         2    2[COMRAM] int 
 26799 ;; Auto vars:     Size  Location     Type
 26800 ;;  __awmod         1    5[COMRAM] unsigned char 
 26801 ;;  __awmod         1    4[COMRAM] unsigned char 
 26802 ;; Return value:  Size  Location     Type
 26803 ;;                  2    0[COMRAM] int 
 26804 ;; Registers used:
 26805 ;;		wreg, status,2, status,0
 26806 ;; Tracked objects:
 26807 ;;		On entry : 0/0
 26808 ;;		On exit  : 0/0
 26809 ;;		Unchanged: 0/0
 26810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26811 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26812 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26814 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26815 ;;Total ram usage:        6 bytes
 26816 ;; Hardware stack levels used:    1
 26817 ;; This function calls:
 26818 ;;		Nothing
 26819 ;; This function is called by:
 26820 ;;		_printSortTimer
 26821 ;; This function uses a non-reentrant model
 26822 ;;
 26823                           
 26824                           	psect	text101
 26825  005628                     __ptext101:
 26826                           	opt stack 0
 26827  005628                     i2___awmod:
 26828                           	opt stack 22
 26829                           
 26830                           ;incstack = 0
 26831  005628  0E00               	movlw	0
 26832  00562A  6E06               	movwf	i2___awmod@sign,c
 26833  00562C  AE02               	btfss	i2___awmod@dividend+1,7,c
 26834  00562E  D006               	goto	i2l9638
 26835  005630  6C01               	negf	i2___awmod@dividend,c
 26836  005632  1E02               	comf	i2___awmod@dividend+1,f,c
 26837  005634  B0D8               	btfsc	status,0,c
 26838  005636  2A02               	incf	i2___awmod@dividend+1,f,c
 26839  005638  0E01               	movlw	1
 26840  00563A  6E06               	movwf	i2___awmod@sign,c
 26841  00563C                     i2l9638:
 26842  00563C  AE04               	btfss	i2___awmod@divisor+1,7,c
 26843  00563E  D004               	goto	i2l9642
 26844  005640  6C03               	negf	i2___awmod@divisor,c
 26845  005642  1E04               	comf	i2___awmod@divisor+1,f,c
 26846  005644  B0D8               	btfsc	status,0,c
 26847  005646  2A04               	incf	i2___awmod@divisor+1,f,c
 26848  005648                     i2l9642:
 26849  005648  5003               	movf	i2___awmod@divisor,w,c
 26850  00564A  1004               	iorwf	i2___awmod@divisor+1,w,c
 26851  00564C  B4D8               	btfsc	status,2,c
 26852  00564E  D018               	goto	i2l9658
 26853  005650  0E01               	movlw	1
 26854  005652  6E05               	movwf	i2___awmod@counter,c
 26855  005654  D004               	goto	i2l9648
 26856  005656                     i2l9646:
 26857  005656  90D8               	bcf	status,0,c
 26858  005658  3603               	rlcf	i2___awmod@divisor,f,c
 26859  00565A  3604               	rlcf	i2___awmod@divisor+1,f,c
 26860  00565C  2A05               	incf	i2___awmod@counter,f,c
 26861  00565E                     i2l9648:
 26862  00565E  AE04               	btfss	i2___awmod@divisor+1,7,c
 26863  005660  D7FA               	goto	i2l9646
 26864  005662                     i2l9650:
 26865  005662  5003               	movf	i2___awmod@divisor,w,c
 26866  005664  5C01               	subwf	i2___awmod@dividend,w,c
 26867  005666  5004               	movf	i2___awmod@divisor+1,w,c
 26868  005668  5802               	subwfb	i2___awmod@dividend+1,w,c
 26869  00566A  A0D8               	btfss	status,0,c
 26870  00566C  D004               	goto	i2l9654
 26871  00566E  5003               	movf	i2___awmod@divisor,w,c
 26872  005670  5E01               	subwf	i2___awmod@dividend,f,c
 26873  005672  5004               	movf	i2___awmod@divisor+1,w,c
 26874  005674  5A02               	subwfb	i2___awmod@dividend+1,f,c
 26875  005676                     i2l9654:
 26876  005676  90D8               	bcf	status,0,c
 26877  005678  3204               	rrcf	i2___awmod@divisor+1,f,c
 26878  00567A  3203               	rrcf	i2___awmod@divisor,f,c
 26879  00567C  2E05               	decfsz	i2___awmod@counter,f,c
 26880  00567E  D7F1               	goto	i2l9650
 26881  005680                     i2l9658:
 26882  005680  5006               	movf	i2___awmod@sign,w,c
 26883  005682  B4D8               	btfsc	status,2,c
 26884  005684  D004               	goto	i2l9662
 26885  005686  6C01               	negf	i2___awmod@dividend,c
 26886  005688  1E02               	comf	i2___awmod@dividend+1,f,c
 26887  00568A  B0D8               	btfsc	status,0,c
 26888  00568C  2A02               	incf	i2___awmod@dividend+1,f,c
 26889  00568E                     i2l9662:
 26890  00568E  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 26891  005692  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 26892  005696  0012               	return	
 26893  005698                     __end_ofi2___awmod:
 26894                           	opt stack 0
 26895                           pclatu	equ	0xFFB
 26896                           pclath	equ	0xFFA
 26897                           tblptru	equ	0xFF8
 26898                           tblptrh	equ	0xFF7
 26899                           tblptrl	equ	0xFF6
 26900                           tablat	equ	0xFF5
 26901                           prodh	equ	0xFF4
 26902                           prodl	equ	0xFF3
 26903                           intcon	equ	0xFF2
 26904                           intcon2	equ	0xFF1
 26905                           intcon3	equ	0xFF0
 26906                           indf0	equ	0xFEF
 26907                           postinc0	equ	0xFEE
 26908                           fsr0h	equ	0xFEA
 26909                           fsr0l	equ	0xFE9
 26910                           wreg	equ	0xFE8
 26911                           postdec1	equ	0xFE5
 26912                           fsr1h	equ	0xFE2
 26913                           fsr1l	equ	0xFE1
 26914                           indf2	equ	0xFDF
 26915                           postinc2	equ	0xFDE
 26916                           postdec2	equ	0xFDD
 26917                           fsr2h	equ	0xFDA
 26918                           fsr2l	equ	0xFD9
 26919                           status	equ	0xFD8
 26920                           pclatu	equ	0xFFB
 26921                           pclath	equ	0xFFA
 26922                           tblptru	equ	0xFF8
 26923                           tblptrh	equ	0xFF7
 26924                           tblptrl	equ	0xFF6
 26925                           tablat	equ	0xFF5
 26926                           prodh	equ	0xFF4
 26927                           prodl	equ	0xFF3
 26928                           intcon	equ	0xFF2
 26929                           intcon2	equ	0xFF1
 26930                           intcon3	equ	0xFF0
 26931                           indf0	equ	0xFEF
 26932                           postinc0	equ	0xFEE
 26933                           fsr0h	equ	0xFEA
 26934                           fsr0l	equ	0xFE9
 26935                           wreg	equ	0xFE8
 26936                           postdec1	equ	0xFE5
 26937                           fsr1h	equ	0xFE2
 26938                           fsr1l	equ	0xFE1
 26939                           indf2	equ	0xFDF
 26940                           postinc2	equ	0xFDE
 26941                           postdec2	equ	0xFDD
 26942                           fsr2h	equ	0xFDA
 26943                           fsr2l	equ	0xFD9
 26944                           status	equ	0xFD8
 26945                           
 26946                           	psect	rparam
 26947  0000                     pclatu	equ	0xFFB
 26948                           pclath	equ	0xFFA
 26949                           tblptru	equ	0xFF8
 26950                           tblptrh	equ	0xFF7
 26951                           tblptrl	equ	0xFF6
 26952                           tablat	equ	0xFF5
 26953                           prodh	equ	0xFF4
 26954                           prodl	equ	0xFF3
 26955                           intcon	equ	0xFF2
 26956                           intcon2	equ	0xFF1
 26957                           intcon3	equ	0xFF0
 26958                           indf0	equ	0xFEF
 26959                           postinc0	equ	0xFEE
 26960                           fsr0h	equ	0xFEA
 26961                           fsr0l	equ	0xFE9
 26962                           wreg	equ	0xFE8
 26963                           postdec1	equ	0xFE5
 26964                           fsr1h	equ	0xFE2
 26965                           fsr1l	equ	0xFE1
 26966                           indf2	equ	0xFDF
 26967                           postinc2	equ	0xFDE
 26968                           postdec2	equ	0xFDD
 26969                           fsr2h	equ	0xFDA
 26970                           fsr2l	equ	0xFD9
 26971                           status	equ	0xFD8
 26972                           
 26973                           	psect	temp
 26974  00007E                     btemp:
 26975                           	opt stack 0
 26976  00007E                     	ds	1
 26977  0000                     int$flags	set	btemp
 26978                           pclatu	equ	0xFFB
 26979                           pclath	equ	0xFFA
 26980                           tblptru	equ	0xFF8
 26981                           tblptrh	equ	0xFF7
 26982                           tblptrl	equ	0xFF6
 26983                           tablat	equ	0xFF5
 26984                           prodh	equ	0xFF4
 26985                           prodl	equ	0xFF3
 26986                           intcon	equ	0xFF2
 26987                           intcon2	equ	0xFF1
 26988                           intcon3	equ	0xFF0
 26989                           indf0	equ	0xFEF
 26990                           postinc0	equ	0xFEE
 26991                           fsr0h	equ	0xFEA
 26992                           fsr0l	equ	0xFE9
 26993                           wreg	equ	0xFE8
 26994                           postdec1	equ	0xFE5
 26995                           fsr1h	equ	0xFE2
 26996                           fsr1l	equ	0xFE1
 26997                           indf2	equ	0xFDF
 26998                           postinc2	equ	0xFDE
 26999                           postdec2	equ	0xFDD
 27000                           fsr2h	equ	0xFDA
 27001                           fsr2l	equ	0xFD9
 27002                           status	equ	0xFD8


Data Sizes:
    Strings     1340
    Constant    27
    Data        8
    BSS         154
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     88     125
    BANK0           128     90     128
    BANK1           256      0      87
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_129(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_128(CODE[18]), STR_127(CODE[18]), STR_126(CODE[17]), STR_125(CODE[17]), 
		 -> STR_124(CODE[15]), STR_123(CODE[15]), STR_122(CODE[18]), STR_121(CODE[15]), 
		 -> STR_120(CODE[18]), STR_119(CODE[18]), STR_118(CODE[17]), STR_117(CODE[17]), 
		 -> STR_116(CODE[17]), STR_115(CODE[17]), STR_114(CODE[17]), STR_113(CODE[17]), 
		 -> STR_112(CODE[18]), STR_111(CODE[17]), STR_110(CODE[15]), STR_109(CODE[15]), 
		 -> STR_108(CODE[15]), STR_107(CODE[17]), STR_106(CODE[17]), STR_105(CODE[17]), 
		 -> STR_104(CODE[16]), STR_103(CODE[17]), STR_102(CODE[17]), STR_101(CODE[17]), 
		 -> STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[17]), STR_97(CODE[15]), 
		 -> STR_96(CODE[11]), STR_95(CODE[17]), STR_94(CODE[11]), STR_93(CODE[17]), 
		 -> STR_92(CODE[14]), STR_91(CODE[15]), STR_90(CODE[14]), STR_89(CODE[10]), 
		 -> STR_88(CODE[9]), STR_87(CODE[9]), STR_86(CODE[10]), STR_85(CODE[10]), 
		 -> STR_84(CODE[16]), STR_83(CODE[15]), STR_82(CODE[3]), STR_81(CODE[18]), 
		 -> STR_80(CODE[3]), STR_79(CODE[18]), STR_78(CODE[14]), STR_77(CODE[8]), 
		 -> STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), 
		 -> STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), 
		 -> STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[16]), 
		 -> STR_64(CODE[16]), STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), 
		 -> STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), 
		 -> STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), 
		 -> STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), 
		 -> STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), 
		 -> STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), 
		 -> STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), 
		 -> STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), 
		 -> STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), 
		 -> STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _ID->___ftge
    _readIR->_readADC
    _readCOND->_readADC
    ___ftge->___awtoft
    ___awtoft->___awdiv
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _initEEPROM->_EEPROM_write
    _EEPROM_write->_printf
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _arm->_printf
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PortTestPusher->_printf
    _PortTestDC->_printf
    _PlatformTest->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  242890
                    _I2C_Master_Init
                               _Test
                                 _UI
                         _initEEPROM
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   31055
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             20    20      0   19797
                                             49 BANK0     20    20      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       2     2      0       1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                5     3      2     924
                                              6 BANK0      5     3      2
                             _readIR
 ---------------------------------------------------------------------------------
 (2) _ID                                                  37    37      0    5865
                                             27 BANK0     37    37      0
                            ___awdiv
                           ___awtoft
                             ___ftge
                           _delay_ms
                           _readCOND
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     2      2     770
                                              2 BANK0      4     2      2
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _readCOND                                             4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     520
                                             18 BANK0      9     3      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2236
                                             14 BANK0      4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1953
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5393
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11606
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   23352
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22438
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initEEPROM                                           0     0      0   10859
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10859
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   47324
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13403
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    9035
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    9035
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1292
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1196
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0  117581
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                       _PlatformTest
                         _PortTestDC
                     _PortTestPusher
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                                _arm
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           6     6      0    9192
                                             43 BANK0      6     6      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _arm                                                  3     3      0    9104
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    9035
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15671
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    9035
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestPusher                                       1     1      0    9035
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestDC                                           1     1      0    9035
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PlatformTest                                        12    12      0    9308
                                             43 BANK0     12    12      0
                            _lcdInst
                             _printf
                            _readADC
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19821
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                        _stopSignals
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5393
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5393
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                         10    10      0    9310
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8900
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   84328
                                             72 COMRAM    16    16      0
                     _printSortTimer
                     _updateArmState
                         _updateMenu
                  _updateServoStates
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     593
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printRTC                                          25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (10) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _updateArmState                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      31    31      0    5240
                                             41 COMRAM    31    31      0
                          i2___awmod
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2___awmod                                            6     2      4     452
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
       _updateServoPosition
     _PlatformTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _stopSignals
     _PortTestDC
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTestPusher
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _arm
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initEEPROM
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       ___awdiv
         ___awmod (ARG)
       ___awtoft
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftge
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
       _delay_ms
       _readCOND
         _readADC
       _readIR
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___awmod
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateArmState
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition
   i2_change_state_to_menu_start
     i2_lcdInst
       i2_lcdNibble
     i2_printRTC
       i2_getRTC
         i2_I2C_Master_Read
           i2_I2C_Master_Wait
         i2_I2C_Master_Start
           i2_I2C_Master_Wait
         i2_I2C_Master_Stop
           i2_I2C_Master_Wait
         i2_I2C_Master_Write
           i2_I2C_Master_Wait
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
       i2_strcpy
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      57       7       34.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     58      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     154      34        0.0%
DATA                 0      0     154       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Apr 12 19:01:14 2017

                                    _i 013F                     i2_I2C_Master_Start 612E  
                   i2_I2C_Master_Write 6104                                     _ID 1192  
                                   l78 609C                       _f_panning_to_bin 0067  
                          __CFG_CPD$ON 000000                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0075  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
               __end_of_updateArmState 5B1E                                    ID@i 00A9  
                                  ID@j 00BC                                    ID@n 00BE  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l200 0102  
                                  l192 00E2                                    l195 00E6  
                                  l515 4D6C                                    l634 3498  
                                  l900 1714                                    l901 172E  
                                  l806 18AC                                    l904 17C6  
                                  l816 1982                                    l841 1BCC  
                                  l826 1A9E                                    l818 19D6  
                                  l851 1D68                                    l819 19BC  
                                  l853 1CBA                                    l829 1AD8  
                                  l863 1DC0                                    l855 1CCC  
                                  l847 1D6A                                    l839 1B6A  
                                  l872 12D2                                    l856 1CE0  
                                  l848 1C96                                    l881 14BA  
                                  l857 1CF4                                    l874 1340  
                                  l858 1D08                                    l963 530E  
                                  l859 1D1E                                    l877 15DE  
                                  l878 145A                           __CFG_CPB$OFF 000000  
                                  _PR2 000FCB                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
            __end_of_updateServoStates 4148                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _arm 4780  
                                  _log 00F0                                    _sel 00FD  
                                  _var 014D                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  __end_of_BlockerTest 430E                    _log_count_can_w_lab 0143  
      __end_of_change_state_to_menu_11 5D4C        __end_of_change_state_to_menu_12 5B8E  
      __end_of_change_state_to_menu_22 5B56        __end_of_change_state_to_menu_23 5D1C  
         _f_can_coming_to_distribution 0135                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 5E3C        __end_of_change_state_to_logs_12 5E0C  
      __end_of_change_state_to_logs_22 5DDC        __end_of_change_state_to_logs_23 5E98  
      __end_of_change_state_to_logs_33 5DAC        __end_of_change_state_to_logs_34 5D7C  
                                 ??_ID 009B                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1301 4B7C                                   l1310 2652  
                                 l1304 4B80                                   l1313 2656  
                                 l1161 48A0                                   l1330 283C  
                                 l1411 1120                                   l1340 28D8  
                                 l2029 553C                                   l1510 4296  
                                 l1406 104A                                   l1334 2844  
                                 l1174 6068                                   l2039 57C0  
                                 l1511 42B0                                   l1327 2842  
                                 l1319 273A                                   l1183 4434  
                                 l1440 4CBE                                   l1424 4C38  
                                 l1360 0948                                   l1505 424A  
                                 l1281 46E0                                   l1370 0B56  
                                 l1435 4CAA                                   l1443 4CC4  
                                 l1364 09EE                                   l1357 0944  
                                 l1525 4870                                   l1542 586E  
                                 l1534 486A                                   l1526 4832  
                                 l1278 46C0                                   l1471 33B0  
                                 l1367 0A54                                   l1472 33CA  
                                 l1368 0AA2                                   l1473 33CE  
                                 l1481 5394                                   l1369 0B08  
                                 l1458 33D4                                   l1394 0EB0  
                                 l1467 3362                                   l1468 337C  
                                 l1548 587E                                   ?_arm 0001  
                                 l1582 2014                                   l1488 53A4  
                                 l1846 4646                                   l7000 1EBC  
                                 l7010 1EFA                                   l7100 2182  
                                 l7020 1F72                                   l7012 1F00  
                                 l7030 1FD4                                   l7022 1F78  
                                 l7110 5B98                                   l7104 21DA  
                                 l7024 1F90                                   l7008 1EEE  
                                 l7112 5BA4                                   l7200 4F46  
                                 l1976 4FC2                                   l7050 2066  
                                 l7018 1F66                                   l7034 1FDA  
                                 l7106 21E6                                   l7122 529A  
                                 l7202 4F56                                   l7052 206C  
                                 l7028 1FBC                                   l7212 4FB0  
                                 l7204 4F5C                                   l7070 20CA  
                                 l7046 204C                                   l7118 5284  
                                 l7064 20A8                                   l7152 532C  
                                 l7128 52BA                                   l7090 214E  
                                 l7082 2126                                   l7074 2102  
                                 l7146 52F2                                   l9010 0EF8  
                                 l7170 45DA                                   l7162 4588  
                                 l7076 210C                                   l9100 10A4  
                                 l9020 0F20                                   l7420 34A2  
                                 l8124 18FA                                   l8108 18B4  
                                 l7094 2168                                   l9110 10CC  
                                 l9014 0F02                                   l7430 3538  
                                 l7422 34C0                                   l7414 3416  
                                 l7190 466C                                   l7174 45FA  
                                 l7166 459C                                   l8230 1B4E  
                                 l8222 1B18                                   l8206 1AB8  
                                 _ADIE 007CEE                                   l7088 2142  
                                 l9120 110A                                   l9104 10BC  
                                 l9040 0F86                                   l9024 0F2A  
                                 l7440 35CE                                   l7432 3556  
                                 l7424 34DE                                   l7184 4650  
                                 l7176 462A                                   l7168 45AA  
                                 l7600 4FF8                                   l8304 1D72  
                                 l8208 1AC2                                   l7098 217C  
                                 l9130 113A                                   l9114 10E4  
                                 l9106 10C2                                   l9050 0FAE  
                                 l9018 0F1A                                   l7442 35EC  
                                 l7434 3574                                   l7426 34FC  
                                 l7178 4638                                   l8242 1BA6  
                                 l8234 1B6E                                   l8250 1C28  
                                 l8218 1AF2                                   l8146 196C  
                                 l9300 3142                                   l9140 1162  
                                 l9132 1140                                   l9044 0F9E  
                                 l9036 0F7C                                   l9028 0F42  
                                 l7436 3592                                   l7428 351A  
                                 l7700 5400                                   l8228 1B42  
                                 l8316 1DB4                                   l8156 199C  
                                 l6830 54EC                                   l6814 5F10  
                                 l9150 118A                                   l9142 1168  
                                 l9070 1022                                   l9062 1000  
                                 l9054 0FC6                                   l9046 0FA4  
                                 l7438 35B0                                   l7446 360A  
                                 l8510 16FE                                   l8502 16DA  
                                 l8406 140E                                   l8350 122A  
                                 l7606 506E                                   l8190 1A6A  
                                 l8318 1DC2                                   l8158 19A6  
                                 l6832 54F8                                   l9320 31F8  
                                 l9232 4C9E                                   l9136 114A  
                                 l9072 1028                                   l7448 3668  
                                 l8408 1418                                   l8352 1232  
                                 l7712 5432                                   l6842 552E  
                                 l6834 54FE                                   l6850 577C  
                                 l9146 1172                                   l9066 100A  
                                 l7642 490C                                   l7650 492E  
                                 l8506 16E8                                   l8418 1466  
                                 l8098 186A                                   l6852 5788  
                                 l6772 5ED8                                   l9236 4CB2  
                                 l9228 4C76                                   l9076 1032  
                                 l9180 47F4                                   l7740 4E8C  
                                 l7716 544A                                   l8268 1CA2  
                                 l8196 1A88                                   l6854 578E  
                                 l6774 5EEA                                   l9350 32EA  
                                 l9318 31F2                                   l9262 53CC  
                                 l8710 2954                                   l8702 2924  
                                 l7750 4EBC                                   l7734 4E76  
                                 l7654 4944                                   l7646 4916  
                                 l8550 4998                                   l8534 1784  
                                 l8542 17C8                                   l8446 15C2  
                                 l8438 158C                                   l8366 128E  
                                 l9096 109A                                   l9184 481A  
                                 l9192 4838                                   l8624 267C  
                                 l8552 49B2                                   l8560 4A14  
                                 l7664 5F20                                   l6952 514C  
                                 l8464 1624                                   l8480 1678  
                                 l8448 15CA                                   l8384 12FC  
                                 l8296 1D2A                                   l6858 57B2  
                                 l9514 41D2                                   l9522 4218  
                                 l9362 3334                                   l9338 32A8  
                                 l9194 4852                                   l9186 4824  
                                 l8722 299C                                   l8714 298A  
                                 l8642 2734                                   l7746 4EAA  
                                 l7762 4EFA                                   l9602 5116  
                                 l7658 494E                                   l8554 49CC  
                                 l6954 5170                                   l8490 16A6  
                                 l8298 1D60                                   l6980 1DF0  
                                 l9540 425C                                   l9356 330A  
                                 l9196 485C                                   l8644 2742  
                                 l7748 4EB6                                   l6796 5E62  
                                 l8548 497E                                   l7668 5F36  
                                 l7596 4FE2                                   l6982 1E02  
                                 l9358 3320                                   l8726 29D2  
                                 l8662 27FA                                   l7766 4F0E  
                                 l7758 4EEC                                   l8558 49E6  
                                 l7790 4E12                                   l6958 5194  
                                 l8494 16B4                                   l8478 1670  
                                 l6992 1E40                                   l6976 1DDC  
                                 l9560 42C2                                   l9384 339A  
                                 l9368 334C                                   l8912 0CFC  
                                 l8904 0CDA                                   l9720 016E  
                                 l9712 0144                                   l9704 0128  
                                 l7696 53EA                                   l6986 1E0C  
                                 l9546 4276                                   l9538 424C  
                                 l9378 3382                                   l8930 0D5E  
                                 l8922 0D24                                   l8914 0D02  
                                 l8690 28D4                                   l9810 036E  
                                 l9802 02F6                                   l7882 5210  
                                 l7778 5A7A                                   l7786 4DD2  
                                 l9548 4280                                   l8940 0D86  
                                 l8908 0CE4                                   l8860 0BF4  
                                 l8852 0BD2                                   l8772 09C2  
                                 l8684 2892                                   l9900 0694  
                                 l9820 0404                                   l9812 038C  
                                 l9804 0314                                   l9740 01D6  
                                 l9716 015C                                   l9708 013A  
                                 l7796 4E56                                   l9558 42B2  
                                 l8934 0D68                                   l8918 0D0C  
                                 l8870 0C1C                                   l8862 0BFA  
                                 l8766 09B2                                   l9590 50D0  
                                 l9582 50AA                                   l9822 0422  
                                 l9814 03AA                                   l9806 0332  
                                 l9830 047C                                   l9734 01C6  
                                 l9750 01FC                                   l7878 51FA  
                                 l9568 4308                                   l8960 0DEC  
                                 l8944 0D90                                   l8856 0BDC  
                                 l8776 09DA                                   l8768 09B8  
                                 l9840 052C                                   l9824 0440  
                                 l9816 03C8                                   l9808 0350  
                                 l9832 04E0                                   l9744 01EE  
                                 l9736 01CC                                   l7888 523C  
                                 l8970 0E14                                   l8938 0D80  
                                 l8882 0C60                                   l8866 0C04  
                                 l9594 50F4                                   l9586 50BE  
                                 l9578 509A                                   l9922 0704  
                                 l9850 0556                                   l9826 045E  
                                 l9818 03E6                                   l8964 0E04  
                                 l8956 0DE2                                   l8948 0DA8  
                                 l8892 0C88                                   l9588 50CA  
                                 l9940 0750                                   l9932 072E  
                                 l9844 0544                                   l9836 0522  
                                 l9772 0270                                   l9764 024E  
                                 l8990 0E88                                   l8982 0E66  
                                 l8974 0E2C                                   l8966 0E0A  
                                 l8886 0C78                                   l8878 0C56  
                                 l9598 5102                                   l9926 071C  
                                 l9918 06FA                                   l9854 0560  
                                 l9782 028C                                   STR_1 FB7F  
                                 l8992 0E8E                                   l8896 0CA0  
                                 l8888 0C7E                                   l9936 0738  
                                 l9768 0258                                   STR_2 FF56  
                                 STR_3 FB6D                                   l8986 0E70  
                                 l9962 07C0                                   l9882 0648  
                                 l9858 0578                                   l9786 02A4  
                                 l9778 0282                                   l9698 00FE  
                                 STR_4 FE79                                   STR_5 FB6D  
                                 l8996 0E98                                   l9980 080C  
                                 l9972 07EA                                   l9892 0672  
                                 STR_6 FDF5                                   STR_7 FFC3  
                                 l9966 07D8                                   l9958 07B6  
                                 l9886 0660                                   l9878 063E  
                                 STR_8 FFDA                                   STR_9 FFCA  
                                 l9976 07F4                                   l9896 067C  
                                 l9998 086A                ??i2_updateServoPosition 0005  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   _PEIE 007F96  
                                 u5440 5E60                                   u7220 1BDE  
                                 _RCEN 007E2B                                   u6430 59C2  
                                 u9000 3330                                   u6440 59C4  
                                 u5640 5166                                   u7240 1C04  
                                 u9001 332C                                   u8050 09EE  
                                 u5650 5168                                   u7250 1C06  
                                 u5740 1F3A                                   u5660 518A  
                                 u5661 5186                                   u8070 0AA2  
                                 u6470 3498                                   u5670 518C  
                                 u7430 138E                                   u7238 1BE2  
                                 u6455 57FA                                   u5680 5A0E  
                                 u7520 153A                                   u7440 1390  
                                 u5681 5A0A                                   u8090 0B56  
                                 u5690 5A10                                   u7530 153C  
                                 u7450 13E2                                   u5747 1F30  
                                 u9131 4240                                   u5780 1FB2  
                                 u9140 4242                                   u7460 13E4  
                                 i2l78 60B0                                   u7800 26BE  
                                 u7720 1790                                   u6920 1876  
                                 u7810 26C0                                   u7490 1458  
                                 u5787 1FA8                                   u8700 4C62  
                                 u8620 4848                                   u7740 17C6  
                                 u6940 18AC                                   u9181 426C  
                                 u9190 426E                                   u8630 484A  
                                 u7840 2784                                   u7841 2780  
                                 u8730 4C8C                                   u8570 4810  
                                 u7850 2786                                   u7738 1794  
                                 u6938 187A                                   u8900 323C  
                                 u8580 4812                                   u7908 2828  
                                 u8718 4C66                                   u7950 2978  
                                 u7890 2824                                   u8940 32D2  
                                 u8860 3184                                   u8748 4C90  
                                 u7980 29C0                                   u8870 3186  
                                 u7958 297C                                   u8890 323A  
                                 u7988 29C4                                   u8990 3318  
                                 u8958 32D6                                   _RSEN 007E29  
                          _stopSignals 603C                                   _Test 467A  
                                 _back 0059                                   _main 4CCA  
                                 _down 0063                           ___ftpack@arg 0080  
                                 _keys FAA7                           ___ftpack@exp 0083  
                                 _time 0124                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 5FDA                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 0141                        __end_ofi2_putch 60EE  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 396C                            i2_lcdNibble 5886  
                      __end_of_Loading 1DCE                   __end_of_actuatorTest 1192  
                                ??_arm 00AB                                  ID@res 00B6  
           i2updateServoPosition@timer 0003                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                                l10002 0874                                  l10020 08C0  
                                l10012 089E                                  l10006 088C  
                                l10016 08A8                                  l10024 08CC  
                                l10302 43EE                                  l10340 46FE  
                                l10332 46E6                                  l10316 467C  
                                l10350 471C                                  l10342 4704  
                                l10334 46EC                                  l10344 470A  
                                l10336 46F2                                  l10600 4D68  
                                l10346 4710                                  l10338 46F8  
                                l10354 4722                                  l10348 4716  
                                l10356 4774                                  l10276 435A  
                                l10604 4D6E                                  l10278 436E  
                                l10580 4D2A                                  l10590 4D4A  
                                l10586 4D3E                                  l10578 4D14  
                                l10588 4D44                                  l10598 4D62  
                 __end_of_EEPROM_write 4966                            ID@time_1154 00A3  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 4F18  
                      ?_updateArmState 0001                                  _EEADR 000FA9  
                                STR_10 FFE6                                  STR_11 FFEA  
                                STR_12 FFFA                                  STR_20 FFEE  
                                STR_13 FFDE                                  STR_21 FAC2  
                                STR_14 FFD6                                  STR_22 FF9A  
                                STR_30 FE06                                  STR_15 FFD2  
                                STR_23 FF48                                  STR_31 FDE4  
                                STR_16 FFE2                                  STR_24 FD4B  
                                STR_32 FD29                                  STR_40 FCE5  
                                STR_17 FFF2                                  STR_25 FE28  
                                STR_33 FD3A                                  STR_41 FCD4  
                                STR_18 FFF6                                  STR_34 FDD3  
                                STR_50 FDB1                                  STR_42 FD8F  
                                STR_26 FD5C                                  STR_43 FD8F  
                                STR_35 FDD3                                  STR_51 FFDA  
                                STR_19 FFCE                                  STR_27 FE17  
                                STR_52 FFCA                                  STR_60 FFF2  
                                STR_28 FD6D                                  STR_36 FD18  
                                STR_44 FCF6                        __end_of___awmod 5120  
                                STR_45 FCE5                                  STR_37 FD29  
                                STR_53 FFE6                                  STR_61 FFF6  
                                STR_29 FE25                                  STR_62 FFCE  
                                STR_54 FFEA                                  STR_70 FF01  
                                STR_38 FDC2                                  STR_46 FDA0  
                                STR_47 FDA0                                  STR_55 FFFA  
                                STR_63 FAC2                                  STR_71 FF3A  
                                STR_39 FD7E                                  STR_56 FFDE  
                                STR_80 FE25                                  STR_64 FE59  
                                STR_48 FD07                                  STR_72 FC5D  
                                STR_49 FCF6                                  STR_57 FFD6  
                                STR_73 FF1E                                  STR_65 FE69  
                                STR_81 FB13                                  STR_58 FFD2  
                                STR_90 FF3A                                  STR_82 FE25  
                                STR_74 FF64                                  STR_66 FADA  
                                STR_59 FFE2                                  STR_67 FFBC  
                                STR_91 FEF2                                  STR_75 FEE3  
                                STR_83 FEB6                                  STR_76 FF2C  
                                STR_92 FF10                                  STR_84 FE39  
                                STR_68 FC90                                  STR_77 FFAD  
                                STR_85 FF86                                  STR_69 FCA1  
                                STR_93 FC6E                                  STR_86 FF86  
                                STR_78 FF3A                                  STR_94 FF70  
                                STR_87 FFA4                                  STR_95 FC7F  
                                STR_79 FB25                                  STR_88 FFA4  
                                STR_96 FF7B                                  STR_89 FF90  
                                STR_97 FED4                                  STR_98 FBE6  
                                STR_99 FBD5           i2updateServoPosition@my_time 0007  
                                ?_sort 0001                        __end_of___lldiv 4FD4  
         i2updateServoPosition@time_us 0001                                  u10300 4434  
                                u11007 1CF8                                  u11017 1D00  
                                u11107 12E2                                  u11027 1D0C  
                                u11117 14CA                                  u11037 1D16  
                                u12007 53AE                                  u11207 491E  
                                u11127 1634                                  u11047 1D22  
                                _T0CON 000FD5                                  u12017 53C2  
                                u11217 4956                                  u11137 1718  
                                u11057 1D8C                                  u12107 336E  
                                u12027 5838                                  u11307 02BE  
                                u11227 002A                                  u11147 1722  
                                u11067 5C4A                        ___awdiv@divisor 0088  
                                u12117 33B4                                  u12037 4C02  
                                u11317 0534                                  u11237 0114  
                                u11157 1748                                  u11077 5408  
                                u12207 23C4                                  u12127 33BE  
                                u12047 3120                                  u11407 07C8  
                                u11327 0568                                  u11247 014C  
                                u11167 5F2C                                  u11087 11AC  
                                _T1CON 000FCD                                  u12217 2410  
                                u12137 2214                                  u12057 319A  
                                u11417 07FC                                  u11337 0592  
                                u11257 0188                                  u11177 5A20  
                                u11097 11EE                                  u12307 5498  
                                u12227 2444                                  u12147 2260  
                                u12067 31E6                                  u11507 2728  
                                u11427 0826                                  u11347 0650  
                                u11267 01DE                                  u11187 5A54  
                                u12317 54B4                                  u12237 2476  
                                u12157 22AC                                  u12077 3250  
                                u11517 279A                                  u11437 087C  
                                u11357 0684                                  u11277 020A  
                                u11197 48C2                                  u12327 417E  
                                u12247 24C2                                  u12167 22E0  
                                u12087 329C                                  u11607 4B2C  
                                u11527 27EE                                  u11447 08B0  
                                u11367 06AE                                  u11287 0260  
                                u10807 198E                                  _T2CON 000FCA  
                                u12337 429A                                  u12257 24F6  
                                u12177 2312                                  u12097 3366  
                                u11617 4B70                                  u11537 2856  
                                u11457 468A                                  u11377 070C  
                                u11297 0294                                  u10817 19C0  
                                u12347 42A4                                  u12267 2528  
                                u12187 235E                                  u11707 0AB2  
                                u11627 4B92                                  u11547 2884  
                                u11467 2602                                  u11387 0740  
                                u10907 1BBE                                  u10827 19CA  
                                u12357 5EE0                                  u12277 2574  
                                u12197 2392                                  u11717 0B18  
                                u11637 08F4                                  u11557 28C8  
                                u11477 2646                                  u11397 076A  
                                u10917 1C1A                                  u10837 19E6  
                                u12367 56BA                                  u12287 25A8  
                                u11807 0D70                                  u11727 0B36  
                                u11647 0938                                  u11567 28EA  
                                u11487 2668                                  u10927 1C42  
                                u10847 1A1C                                  _T3CON 000FB1  
                                u12377 56C4                                  u12297 25DA  
                                u11817 0D98                                  u11737 0B66  
                                u11657 095A                                  u11577 2918  
                                u11497 26D4                                  u10937 1C84  
                                u10857 1AA2                                  u10777 17F8  
                                u12387 56F0                                  u11907 1012  
                                u11827 0DF4                                  u11747 0BE4  
                                u11667 09CA                                  u11587 2932  
                                u10947 1CBE                                  u10867 1AAA  
                                u10787 1928                                  u12397 56FA  
                                u11917 103A                                  u11837 0E1C  
                                u11757 0C0C                                  u11677 09FE  
                                u11597 478E                                  u10957 1CC6  
                                u10877 1ADC                                  u10797 1986  
                                u11927 105C                                  u11847 0E78  
                                u11767 0C68                                  u11687 0A64  
                                u10967 1CD0                                  u10887 1AE6  
                                u11937 10AC                                  u11857 0EA0  
                                u11777 0C90                                  u11697 0A82  
                                u10977 1CDA                                  u10897 1B00  
                                u11947 10D4                                  u11867 0F0A  
                                u11787 0CEC                                  u10987 1CE4  
                                u11957 1124                                  u11877 0F32  
                                u11797 0D14                                  u10997 1CEE  
                                u11967 112E                                  u11887 0F8E  
                                u11977 1152                                  u11897 0FB6  
                                u11987 117A                                  u11997 535E  
                      __end_of___lwdiv 5546                        __end_of___lwmod 57CA  
                                i2l275 3968                                  i2l634 39FA  
                                i2l935 2BA6                                  i2l963 55EE  
                      ___awdiv@counter 008A                                  i2l990 5B1A  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 2206                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 60E2                        __end_of_handler 3D94  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 5EF0  
                      __end_of_initLCD 5A5E                         __CFG_EBTRB$OFF 000000  
                                _debug 012F                             i2isdigit@c 0003  
                        ___awtoft@sign 0091                                  _getIR 53D4  
                      __end_of_loadRTC 5244                        __end_of_readMAG 5A18  
                      __end_of_dpowers FAC2                                  _first 013B  
                                _enter 0065                                  arm@on 00AC  
                      __end_of_isdigit 5F1A                                  _input 007D  
                        ___ftpack@sign 0084                                  _putch 60C2  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 5F90                       __end_ofi2_getRTC 55B8  
                  _log_count_pop_w_tab 0069                                  status 000FD8  
                          readCOND@res 0084                     __size_ofi2___awmod 0070  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 30DE                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 5C2C  
                          Loading@addr 00B3                       _count_can_no_lab 005B  
                 __size_of_EEPROM_read 0018                        __initialization 5932  
                       readIR@ana_port 0082                           __end_of_Test 4780  
                   __size_ofi2_lcdInst 000C                           __end_of_main 4D92  
                         __end_of_keys FAB8                           __end_of_sort 5FFC  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                            _BlockerTest 4148  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00C5                          __activetblptr 000003  
                               ID@res1 00B2                                 ID@res2 00B4  
           __size_of_updateServoStates 01C8                                 ID@time 00B1  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                               ?_getIR 0086                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FBB3                                 STR_101 FC3B  
                               STR_110 FE98                                 STR_102 FC4C  
                               STR_111 FCC3                                 STR_103 FB91  
                               STR_104 FE49                                 STR_120 FB01  
                               STR_112 FAEF                                 STR_121 FE89  
                               STR_113 FBF7                                 STR_105 FBC4  
                               STR_114 FC2A                                 STR_106 FBA2  
                               STR_122 FB49                                 _ADRESH 000FC4  
                               STR_107 FBC4                                 STR_115 FC2A  
                               STR_123 FE89                                 STR_124 FE89  
                               STR_108 FEC5                                 STR_116 FC19  
                               _EEADRH 000FAA                                 STR_117 FC2A  
                               STR_109 FEA7                                 STR_125 FC08  
                               STR_118 FC19                                 STR_126 FCB2  
                               _ADRESL 000FC3                                 STR_127 FAEF  
                               STR_119 FB37                                 STR_128 FB5B  
                               STR_129 FFB5                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                       __end_of___awtoft 5AA2  
                               ?_putch 0001                       __end_of___ftpack 467A  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 5CBC              i2_change_state_to_menu_22 5C8C  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1082 3C90  
                               i2l1091 3D38                                 i2l2029 5928  
                               i2l1093 3D58                                 i2l1174 6094  
                               i2l2039 5ADA                                 i2l1582 2F4A  
                               i2l8010 3ED0                                 i2l7300 2ED4  
                               i2l8004 3EB8                                 i2l7310 2F14  
                               i2l8022 3EF2                                 i2l8014 3EDA  
                               i2l7224 557E                                 i2l7304 2EFE  
                               i2l8040 3F36                                 i2l8032 3F12  
                               i2l8008 3ECC                                 i2l7234 55A8  
                               i2l7322 2F78                                 i2l7306 2F10  
                               i2l8050 3F52                                 i2l7228 558E  
                               i2l7340 2FC6                                 i2l7252 2D7A  
                               i2l8044 3F48                                 i2l8036 3F24  
                               i2l8028 3F00                                 i2l7350 3004  
                               i2l7326 2F90                                 i2l7262 2D9E  
                               i2l7352 300C                                 i2l7328 2F94  
                               i2l7256 2D8A                                 i2l7370 3054  
                               i2l7346 2FE0                                 i2l7258 2D98  
                               i2l7380 30BA                                 i2l7364 3038  
                               i2l7284 2E5A                                 i2l7276 2E32  
                               i2l7268 2DD0                                 i2l7366 3040  
                               i2l7374 3066                                 i2l7358 3022  
                               i2l7294 2EB2                                 i2l7286 2E64  
                               i2l7382 30C2                                 i2l6920 5902  
                               i2l7376 306C                                 i2l7296 2EBC  
                               i2l7288 2E68                                 i2l6906 6034  
                               i2l7298 2EC2                                 i2l7386 5C04  
                               i2l6916 58F6                                 i2l6940 5ABC  
                               i2l7564 4512                                 i2l7388 5C0C  
                               i2l6918 58FE                                 i2l7830 3998  
                               i2l6928 591E                                 i2l6944 5AD0  
                               i2l6936 5AB0                                 i2l7576 4556  
                               i2l7568 4522                                 i2l7840 3A30  
                               i2l6882 5FB0                                 i2l6938 5AB8  
                               i2l7850 3A9E                                 i2l7842 3A46  
                               i2l7940 3DD2                                 i2l7932 3DB8  
                               i2l7852 3AB4                                 i2l7844 3A5C  
                               i2l7836 3A04                                 i2l7942 3DE2  
                               i2l7950 3DF0                                 i2l7854 3ACA  
                               i2l7846 3A72                                 i2l7838 3A1A  
                               i2l7862 3B0C                                 i2l7960 3E16  
                               i2l7944 3DE6                                 i2l7856 3AE0  
                               i2l7848 3A88                                 i2l7864 3B66  
                               i2l9624 5608                                 i2l9650 5662  
                               i2l9642 5648                                 i2l7962 3E1C  
                               i2l7954 3E04                                 i2l7858 3AF6  
                               i2l9618 55D6                                 i2l7980 3E6C  
                               i2l7964 3E22                                 i2l7956 3E0A  
                               i2l9662 568E                                 i2l9654 5676  
                               i2l9646 5656                                 i2l9638 563C  
                               i2l7958 3E10                                 i2l9648 565E  
                               i2l7968 3E28                                 i2l9658 5680  
                               i2l7994 3E92                                 i2l7988 3E84  
                               i2l7998 3EAE                _f_most_recent_sort_time 0139  
                        PlatformTest@i 00B1                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR2IF 007CF1                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR2ON 007E52  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                                 _IR_res 00E0  
                            ??_Loading 00B1                       __end_of_delay_ms 5F42  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     __end_of_dispLogs 5FDA                                 ___ftge 4D92  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 4A48                                 ___wmul 5BC4  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                               _getMAG 5C2C                              ??___awmod 0084  
                          logRun@byte1 00B2                            logRun@byte2 00B3  
                          logRun@byte3 00B4                       __end_of_readCOND 59CC  
                               _getRTC 5244                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 601E  
                               _initUI 5C5C                                 _readIR 5120  
                               _logRun 430E                                 getIR@i 0089  
                               clear_0 5958                                 clear_1 5964  
                               clear_2 5970                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestDC 4BF4  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 1DCE                              ??_handler 0049  
              __size_of_initGlobalVars 00D6                           ?_retrieveLog 0007  
                               _strcpy 5B8E                     __size_of_SpeedTest 0084  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 5F6A  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 5F42                            ?_BothServos 0001  
                            ??_isdigit 0080                      __end_ofi2___awmod 5698  
                    __end_ofi2___lwdiv 5932                       __end_of_printRTC 36AC  
                         __mediumconst FAA6                      __end_ofi2___lwmod 5AE4  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 00F4  
                       i2___awmod@sign 0006                  __end_of_algorithmTest 4BF4  
                    __end_ofi2_lcdInst 60FA                      __end_ofi2_isdigit 603C  
                           __accesstop 0080                __end_of__initialization 5976  
                        ?_inputHandler 002A                             ___ftge@ff1 0092  
                           ___ftge@ff2 0095                  _most_recent_sort_time 0147  
                        ___rparam_used 000001                          ?_PlatformTest 0001  
              printSortTimer@start_sec 003B                  __size_of_actuatorTest 08B8  
                           ___awtoft@c 008E                          i2_EEPROM_read 6086  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                       __pcstackCOMRAM 0001                  _agitator_toggle_count 012B  
                __size_of_EEPROM_write 00E8                           __pidataBANK1 610E  
                  BlockerTest@cam_flag 00B1                          __end_of_getIR 5456  
                          i2printRTC@i 0041                          _initSortTimer 4FD4  
          __end_of_updateServoPosition 5350                          __end_of_putch 60D2  
                      ID@reflectivity1 009D                        ID@reflectivity2 00A1  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 17D4                             __end_of_UI 08DA  
                            ?i2___wmul 0001                     __size_of_lcdNibble 006C  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002D     __end_of_change_state_to_menu_start 5EC4  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 5E98  
                printSortTimer@cur_sec 003D                              ?i2_printf 000D  
                              ??_getIR 0088                              ?i2_strcpy 0001  
                     _count_pop_no_tab 005F                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 08DA  
              __size_of_PortTestPusher 005C                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                                ID@cond1 009F  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
       __size_ofi2_updateServoPosition 0070          __end_ofi2_updateServoPosition 5628  
                         _EEPROM_write 487E                         ??_PlatformTest 00AB  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
                              UI@F3252 014F                      __end_of_SpeedTest 53D4  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                    __size_of_BothServos 03EE  
                    printRTC@RTC_month 00BC                                ?___ftge 0092  
                              _ID$1160 00A7                                _ID$1144 00A4  
                              _ID$1161 00A8                                _ID$1153 00A5  
                              _ID$1158 00A6                           ?i2_lcdNibble 0001  
                              UI@i_413 00C9                                UI@i_440 00CF  
                              UI@i_416 00CA                                UI@i_417 00CB  
                              UI@i_451 00D4                                UI@i_443 00D0  
                              UI@i_435 00CC                                UI@i_452 00D5  
                              UI@i_444 00D1                                UI@i_436 00CD  
                              UI@i_447 00D2                                UI@i_439 00CE  
                              UI@i_448 00D3                       ??_updateArmState 0001  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getMAG 0001                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0082  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                              ?___awtoft 008E  
                            ?___ftpack 0080                            ?_PortTestDC 0001  
                              ?_printf 008E                                _UI$2443 00C6  
                              ?_strcpy 0080                        _pan_servo_state 006B  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                              i2l10100 37B0                                i2l10120 37FE  
                              i2l10112 37DA                                i2l10104 37BE  
                              i2l10040 36E2                                i2l10140 384C  
                              i2l10132 3830                                i2l10124 380C  
                              i2l10116 37F0                                i2l10108 37CC  
                              i2l10052 370C                                i2l10044 36F0  
                              i2l10038 36DC                                i2l10160 389A  
                              i2l10152 387E                                i2l10144 385A  
                              i2l10136 383E                                i2l10128 381A  
                              i2l10080 3762                                i2l10072 3744  
                              i2l10064 3728                                i2l10056 371A  
                              i2l10048 36FE                                i2l10412 2BD2  
                              i2l10420 2C0C                                i2l10180 38F0  
                              i2l10172 38CC                                i2l10164 38B0  
                              i2l10156 388C                                i2l10148 3870  
                              i2l10092 378C                                i2l10084 3770  
                              i2l10076 3754                                i2l10068 3736  
                              i2l10406 2B70                                i2l10510 40C0  
                              i2l10432 2C70                                i2l10176 38DA  
                              i2l10168 38BE                                i2l10096 379A  
                              i2l10088 377E                                i2l10504 409A  
                              i2l10418 2C08                                i2l10370 29F6  
                              i2l10186 38FE                                i2l11170 4036  
                              i2l10444 2CD2                                i2l10524 4116  
                              i2l11172 4040                                i2l10700 3D0C  
                              i2l10366 29E6                                i2l11190 3E40  
                              i2l11182 391C                                i2l11174 404A  
                              i2l10470 3FBE                                i2l10622 3C1E  
                              i2l10376 2A50                                i2l10560 5AFA  
                              i2l11192 3E5C                                i2l11184 393E  
                              i2l11176 412E                                i2l11168 402C  
                              i2l10464 3F9E                                i2l10616 3C0E  
                              i2l10632 3C48                                i2l10394 2B34  
                              i2l10554 5AEE                                i2l11186 395A  
                              i2l11178 413E                                i2l10482 3FEA  
                              i2l10490 4008                                i2l10722 3D56  
                              i2l10618 3C12                                i2l10626 3C26  
                              i2l10388 2B1E                                i2l10556 5AF4  
                              i2l10484 3FFE                                i2l10476 3FD4  
                              i2l10492 4052                                i2l10468 3FB4  
                              i2l10628 3C3E                                i2l10494 405C  
                              i2l10646 3C64                                i2l10498 4074  
                              i2l10690 3CEC                                i2l10674 3CBC  
                              i2l10668 3CAE                                i2l10696 3D06  
                            ?_delay_ms 0001                         PlatformTest@on 00B5  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              _RTCflag 00E6                              ?_readCOND 0001  
                           _initEEPROM 6070                                i2_putch 60E2  
                            ?_initTime 0080                        _f_loadingNewCan 00EE  
                      i2printRTC@month 003D                  __size_of_Distribution 00E2  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 5704  
                              _Loading 17D4            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                      __size_of___ftge 00C8                                ___awdiv 4E5A  
                              ___awmod 507E                             _initServos 5456  
                              ___lldiv 4F18                        __size_of___wmul 0036  
                      __size_of_getMAG 0030                                ___lwdiv 54CE  
                              ___lwmod 5768                        __size_of_getRTC 0086  
                      printSortTimer@i 0047                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                         ?_BlockerTest 0001                        __size_of_initUI 0030  
                      __size_of_readIR 0098                                __pcinit 5932  
                           ??___awtoft 0091                   i2EEPROM_read@address 0001  
                      __size_of_logRun 013C                             ??___ftpack 0085  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 4A48                                _lcdInst 60D2  
                              _handler 0008                                __ptext0 4CCA  
                              __ptext1 5FDA                                __ptext2 17D4  
                              __ptext3 4FD4                                __ptext4 4A48  
                              __ptext5 5C2C                                __ptext6 53D4  
                              __ptext7 1192                                __ptext8 5120  
                              __ptext9 5980                        __size_of_printf 0438  
                              _readADC 5EC4                        __size_of_strcpy 0036  
                              _initLCD 5A18                                _cur_can 012D  
                              _loadRTC 51B8                                _readMAG 59CC  
                              _dpowers FAB8                     actuatorTest@i_1770 00B3  
                   actuatorTest@i_1763 00AE                           __size_of_arm 00FE  
                   actuatorTest@i_1772 00B4                     actuatorTest@i_1764 00AF  
                   actuatorTest@i_1756 00AD                     actuatorTest@i_1773 00B5  
                   actuatorTest@i_1782 00BA                     actuatorTest@i_1766 00B0  
                   actuatorTest@i_1783 00BB                     actuatorTest@i_1775 00B6  
                   actuatorTest@i_1767 00B1                     actuatorTest@i_1792 00C0  
                   actuatorTest@i_1776 00B7                     actuatorTest@i_1793 00C1  
                   actuatorTest@i_1785 00BC                     actuatorTest@i_1769 00B2  
                   actuatorTest@i_1786 00BD                     actuatorTest@i_1778 00B8  
                   actuatorTest@i_1795 00C2                     actuatorTest@i_1779 00B9  
                   actuatorTest@i_1796 00C3                     actuatorTest@i_1788 00BE  
                   actuatorTest@i_1789 00BF                                _isdigit 5EF0  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 0124                     _motor_toggle_count 0149  
                           ??_delay_ms 0080               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014     initGlobalVars@time_recent_agitator 0080  
                         _Distribution 4966                   PlatformTest@res_1808 00AF  
                       __pintcode_body 3BA2                   end_of_initialization 5976  
                           ??_readCOND 0082                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 3BA2                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestDC 00D6  
                            i2u1042_40 2B96                              i2u1051_40 2CA2  
                            i2u1052_40 2CB0                              i2u1044_40 2BBC  
                            i2u1043_48 2B98                              i2u1053_40 2CBE  
                            i2u1054_40 2CCC                              i2u1038_40 2B4A  
                            i2u1047_40 2C22                              i2u1048_40 2C38  
                            i2u1240_47 3DD8                              i2u1241_47 2BFA  
                            i2u1242_47 2C60                              i2u1243_47 58A0  
                            i2u1244_47 58AA                              i2u1245_47 58CC  
                            i2u1246_47 58D6              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
               __end_of_initGlobalVars 4B1E                             _sensorTest 25F4  
                           _servoTimes 011C                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 3F80  
                         ??_BothServos 00AB                  __end_of_machineConfig 5768  
                 __end_of_PlatformTest 33E2                   _time_recent_agitator 014B  
                           _updateMenu 36AC                      i2_I2C_Master_Read 5F90  
                            _IR_signal 00E2                      i2_I2C_Master_Wait 60B0  
                    i2_I2C_Master_Stop 6126                              i2___awmod 5628  
                    i2___lwdiv@divisor 0008                        _log_count_total 0145  
                       _PortTestPusher 582A                              i2___lwdiv 58E0  
                            i2___lwmod 5AA2                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 3BA2                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                          ?_initEEPROM 0001                              i2_lcdInst 60EE  
                        Loading@i_1140 00BD                          Loading@i_1142 00BF  
                        Loading@i_1127 00B7                          Loading@i_1136 00B9  
                        Loading@i_1139 00BB                             _total_time 00FA  
                          printf@width 00A9                   __size_of_stopSignals 001C  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 601E  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                     __end_of_BothServos 25F4  
                  __end_of_EEPROM_read 6070                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___ftge 4E5A  
                         _Loading$1138 00B6                         __end_of___wmul 5BFA  
                       __end_of_getMAG 5C5C                         __end_of_getRTC 52CA  
                 __size_ofi2_lcdNibble 005A                         _timer2_counter 0073  
                        EEPROM_write@i 00AF                          i2lcdInst@data 0003  
                       __end_of_initUI 5C8C                         __end_of_readIR 51B8  
                       __end_of_logRun 444A                       i2___wmul@product 0005  
                       __end_of_printf 2206                           i2printf@flag 0026  
                       __end_of_strcpy 5BC4              __end_ofi2_I2C_Master_Read 5FB6  
            __end_ofi2_I2C_Master_Wait 60C2                           i2printf@prec 001D  
                  start_initialization 5932              __end_ofi2_I2C_Master_Stop 612E  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 005D            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                 __end_of_PortTestPusher 5886  
                          __end_of_arm 487E                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1421 00B0  
                i2I2C_Master_Read@temp 0003                             ?i2___awmod 0001  
                 BlockerTest@cond_flag 00B3                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                               ??___ftge 0098  
                            _SpeedTest 5350                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                            ?_sensorTest 0001  
                          __pdataBANK1 014F                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0084  
                             ??_logRun 00B1                               ID@i_1152 00AB  
                             ID@i_1163 00AF                               ID@i_1164 00BA  
                             ID@i_1157 00AD                           ??_PortTestDC 00AB  
               printSortTimer@timeDiff 0045       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    __size_of_initEEPROM 0016  
                 __size_of_BlockerTest 01C6                    _printSortTimer$2578 0043  
                    __size_of___awtoft 0044                      __size_of___ftpack 010C  
                          __pbssCOMRAM 0059           __size_of_updateServoPosition 0086  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
                      ?_PortTestPusher 0001                __size_of_printSortTimer 0396  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$2081 0081                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 003F  
                    printSortTimer@sec 0041                    __size_of_initServos 0078  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                     _tilt_servo_state 0071                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 0061  
                    __size_of_readCOND 004C                            _EEPROM_read 6058  
                     _I2C_Master_Start 611E                     __end_of_PortTestDC 4CCA  
                            _f_lastCan 00EC                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 60FA  
                    __size_of_initTime 0022                  i2_updateServoPosition 55B8  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                             ?_SpeedTest 0001  
                        __pmediumconst FAA6                              _lcdNibble 5698  
                __size_of_inputHandler 01EC                               ?___awdiv 0086  
                            __ptext100 60B0                              __ptext101 5628  
                             ?___awmod 0080                               ?___lldiv 0080  
                       _sensor_outputs 00DA                               ?___lwdiv 0080  
                             ?___lwmod 0087                  __size_of_PlatformTest 0304  
                    __size_of_printRTC 02CA                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 013D  
                            _cur_state 00E8                       ___lwdiv@quotient 0084  
                       __size_of_getIR 0082                            ??i2___awmod 0005  
                        _algorithmTest 4B1E                            ??i2___lwdiv 000A  
                          _COND_signal 00DE                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 0642  
                            getIR@port 0086                            __size_of_UI 08C8  
                  __size_of_sensorTest 03E6             __end_ofi2_I2C_Master_Start 6136  
           __end_ofi2_I2C_Master_Write 610E                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATBbits 000F8A                               _LATCbits 000F8B  
                             _LATDbits 000F8C                           _inputHandler 3D94  
                          ??i2_isdigit 0001                           _PlatformTest 30DE  
                         BlockerTest@i 00AD                               _PIR2bits 000FA1  
                             i2u623_40 2EF6                        PlatformTest@res 00AD  
                             i2u623_47 2EEC                               i2u554_40 5FAE  
                             i2u619_40 2E96                               i2u619_47 2E8C  
                             i2u676_40 39FA                    __size_of_updateMenu 02C0  
                       _log_completion 00F2                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 0077  
                            _was_low_2 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 5F6A                          lcdNibble@data 0081  
                             i2_getRTC 5546                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
              __size_of_updateArmState 003A                               Loading@i 00C1  
                             Loading@j 00C3                               i2_printf 2D70  
                             i2_strcpy 5BFA                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 5946  
                   i2___awmod@dividend 0001                           ??_initEEPROM 00B1  
               ?i2_updateServoPosition 0001                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                  __end_ofi2_EEPROM_read 609C  
                          _count_total 00FE                       ??_initGlobalVars 0080  
                             __Hrparam 0000                       __size_of_Loading 05FA  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                            ??_SpeedTest 00AB  
                __end_of_initSortTimer 507E                           ??_initServos 0088  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 5D1C             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 5B56             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 5B1E                _change_state_to_menu_23 5CEC  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 5E0C  
              _change_state_to_logs_12 5DDC                _change_state_to_logs_22 5DAC  
              _change_state_to_logs_23 5E6A                _change_state_to_logs_33 5D7C  
              _change_state_to_logs_34 5D4C                       __size_of___lwmod 0062  
                       readADC@channel 0081                               ___awtoft 5A5E  
                             ___ftpack 456E                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 3D8C  
                   __end_of_initEEPROM 6086                        _I2C_Master_Init 57CA  
                     __size_of_readADC 002C                        _I2C_Master_Read 5E3C  
                     __size_of_initLCD 0046                           _f_ID_receive 0131  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004C  
                      _I2C_Master_Wait 609C                        _I2C_Master_Stop 6116  
                     __size_of_isdigit 002A                               _delay_ms 5F1A  
                       _printSortTimer 29DA                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 456E  
                             __ptext10 5F1A                               __ptext11 4D92  
                             __ptext20 4F18                               __ptext12 5A5E  
                             __ptext21 5E98                               __ptext13 456E  
                             __ptext30 5244                               __ptext22 5FFC  
                             __ptext14 4966                               __ptext31 60FA  
                             __ptext23 5A18                               __ptext15 5704  
                             __ptext40 467A                               __ptext32 6116  
                             __ptext24 6070                               __ptext16 430E  
                             __ptext41 25F4                               __ptext33 611E  
                             __ptext25 487E                               __ptext17 5C5C  
                             __ptext50 2206                               __ptext42 59CC  
                             __ptext34 5E3C                               __ptext26 6058  
                             __ptext18 51B8                               __ptext51 603C  
                             __ptext43 4780                               __ptext35 609C  
                             __ptext27 0012                               __ptext19 57CA  
                             __ptext60 5768                               __ptext52 5456  
                             __ptext44 4B1E                               __ptext36 5B1E  
                             __ptext28 33E2                               __ptext61 54CE  
                             __ptext53 52CA                               __ptext45 08DA  
                             __ptext37 5B56                               __ptext29 5B8E  
                             __ptext70 5BFA                               __ptext62 60D2  
                             __ptext54 4148                               __ptext46 5350  
                             __ptext38 507E                               __ptext71 3D94  
                             __ptext63 5698                               __ptext55 5EC4  
                             __ptext47 582A                               __ptext39 4E5A  
                             __ptext80 5DDC                               __ptext72 5C8C  
                             __ptext56 1DCE                               __ptext48 4BF4  
                             __ptext81 5E0C                               __ptext73 5CBC  
                             __ptext65 3F80                               __ptext57 60C2  
                             __ptext49 30DE                               __ptext90 5F6A  
                             __ptext82 5FB6                               __ptext74 5CEC  
                             __ptext66 55B8                               __ptext58 5EF0  
                             __ptext91 5AA2                               __ptext83 444A  
                             __ptext75 5D1C                               __ptext67 36AC  
                             __ptext59 5BC4                               __ptext92 58E0  
                             __ptext84 6086                               __ptext76 5D4C  
                             __ptext68 5F42                               __ptext93 60EE  
                             __ptext85 5AE4                               __ptext77 5D7C  
                             __ptext69 396C                               __ptext94 5886  
                             __ptext86 29DA                               __ptext78 5E6A  
                             __ptext95 5546                               __ptext87 2D70  
                             __ptext79 5DAC                               __ptext96 6104  
                             __ptext88 60E2                               __ptext97 6126  
                             __ptext89 601E                               __ptext98 612E  
                             __ptext99 5F90                               _dispLogs 5FB6  
                        ?_actuatorTest 0001                     PlatformTest@i_1812 00B3  
                             _readCOND 5980                          ??_stopSignals 0080  
                           strcpy@from 0082                         i2_isdigit$2081 0002  
                   __end_of_initServos 54CE                          __size_of_Test 0106  
                        ?_EEPROM_write 00AB                               _initTime 5FFC  
                        __size_of_main 00C8                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F8  
                  _updateServoPosition 52CA                 __size_of_machineConfig 0064  
                        ??i2_lcdNibble 0001                               _printRTC 33E2  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F6                     _f_can_coming_to_ID 0133  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 5CEC      __end_ofi2_change_state_to_menu_22 5CBC  
                     ??_PortTestPusher 00AB                               loadRTC@i 0096  
                    i2___awmod@divisor 0003                 __end_of_printSortTimer 2D70  
                            putch@data 0082                      i2___awmod@counter 0005  
             __end_of_I2C_Master_Start 6126                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 6104                             _INTCONbits 000FF2  
                 ?_updateServoPosition 0080                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00E4  
                             isdigit@c 0082                          sensorTest@res 00AD  
                       ??_actuatorTest 00AB                     sensorTest@res_1733 00AF  
                  _servo_timer_counter 006D                               intlevel2 0000  
                       ??_EEPROM_write 00AE                         BlockerTest@res 00AF  
                   __end_of_sensorTest 29DA                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 6058              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 396C  
              __end_of_I2C_Master_Init 582A                __end_of_I2C_Master_Read 5E6A  
              __end_of_I2C_Master_Wait 60B0                          ??_BlockerTest 00AB  
              __end_of_I2C_Master_Stop 611E                            lcdInst@data 0082  
                        printRTC@F3242 0153                           retrieveLog@i 000E  
                          _retrieveLog 444A                    __end_ofi2_lcdNibble 58E0  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                   _servo_timer_target 006F                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                        ___lwmod@divisor 0089  
                       _updateArmState 5AE4                      _f_can_distributed 0137  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 5704                        ___lwmod@counter 008B  
                    _updateServoStates 3F80                          printRTC@month 00BE  
                        ?_Distribution 0001                     ?_updateServoStates 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                       _f_arm_position 00EA                    ??_updateServoStates 0009  
                   i2printRTC@INT_time 002D  
