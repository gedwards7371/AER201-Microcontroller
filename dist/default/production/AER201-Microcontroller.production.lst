

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Apr 10 04:35:30 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	text97,global,reloc=2,class=CODE,delta=1
   113                           	psect	text98,global,reloc=2,class=CODE,delta=1
   114                           	psect	text99,global,reloc=2,class=CODE,delta=1
   115                           	psect	text100,global,reloc=2,class=CODE,delta=1
   116                           	psect	text101,global,reloc=2,class=CODE,delta=1
   117                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   118                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   119                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   120  0000                     
   121                           ; Version 1.40
   122                           ; Generated 01/12/2016 GMT
   123                           ; 
   124                           ; Copyright © 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   125                           ; All rights reserved.
   126                           ; 
   127                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   128                           ; 
   129                           ; Redistribution and use in source and binary forms, with or without modification, are
   130                           ; permitted provided that the following conditions are met:
   131                           ; 
   132                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   133                           ;        conditions and the following disclaimer.
   134                           ; 
   135                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   136                           ;        of conditions and the following disclaimer in the documentation and/or other
   137                           ;        materials provided with the distribution.
   138                           ; 
   139                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   140                           ;        software without specific prior written permission.
   141                           ; 
   142                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   143                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   144                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   145                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   146                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   147                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   148                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   149                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   150                           ; 
   151                           ; 
   152                           ; Code-generator required, PIC18F4620 Definitions
   153                           ; 
   154                           ; SFR Addresses
   155  0000                     
   156                           	psect	idataBANK1
   157  005CEE                     __pidataBANK1:
   158                           	opt stack 0
   159                           
   160                           ;initializer for UI@F3246
   161  005CEE  4D                 	db	77
   162  005CEF  4D                 	db	77
   163  005CF0  4D                 	db	77
   164  005CF1  00                 	db	0
   165                           
   166                           ;initializer for printRTC@F3236
   167  005CF2  4D                 	db	77
   168  005CF3  4D                 	db	77
   169  005CF4  4D                 	db	77
   170  005CF5  00                 	db	0
   171                           
   172                           	psect	mediumconst
   173  00FA86                     __pmediumconst:
   174                           	opt stack 0
   175  00FA86  00                 	db	0
   176  00FA87                     _keys:
   177                           	opt stack 0
   178  00FA87  31                 	db	49
   179  00FA88  32                 	db	50
   180  00FA89  33                 	db	51
   181  00FA8A  41                 	db	65
   182  00FA8B  34                 	db	52
   183  00FA8C  35                 	db	53
   184  00FA8D  36                 	db	54
   185  00FA8E  42                 	db	66
   186  00FA8F  37                 	db	55
   187  00FA90  38                 	db	56
   188  00FA91  39                 	db	57
   189  00FA92  43                 	db	67
   190  00FA93  2A                 	db	42
   191  00FA94  30                 	db	48
   192  00FA95  23                 	db	35
   193  00FA96  44                 	db	68
   194  00FA97  00                 	db	0
   195  00FA98                     __end_of_keys:
   196                           	opt stack 0
   197  00FA98                     _dpowers:
   198                           	opt stack 0
   199  00FA98  0001               	dw	1
   200  00FA9A  000A               	dw	10
   201  00FA9C  0064               	dw	100
   202  00FA9E  03E8               	dw	1000
   203  00FAA0  2710               	dw	10000
   204  00FAA2                     __end_of_dpowers:
   205                           	opt stack 0
   206  0000                     _ADCON0	set	4034
   207  0000                     _ADCON0bits	set	4034
   208  0000                     _ADCON1	set	4033
   209  0000                     _ADCON2	set	4032
   210  0000                     _ADRESH	set	4036
   211  0000                     _ADRESL	set	4035
   212  0000                     _CMCONbits	set	4020
   213  0000                     _CVRCON	set	4021
   214  0000                     _EEADR	set	4009
   215  0000                     _EEADRH	set	4010
   216  0000                     _EECON1bits	set	4006
   217  0000                     _EECON2	set	4007
   218  0000                     _EEDATA	set	4008
   219  0000                     _INTCONbits	set	4082
   220  0000                     _LATA	set	3977
   221  0000                     _LATAbits	set	3977
   222  0000                     _LATB	set	3978
   223  0000                     _LATBbits	set	3978
   224  0000                     _LATC	set	3979
   225  0000                     _LATCbits	set	3979
   226  0000                     _LATD	set	3980
   227  0000                     _LATDbits	set	3980
   228  0000                     _LATE	set	3981
   229  0000                     _OSCCON	set	4051
   230  0000                     _OSCTUNEbits	set	3995
   231  0000                     _PIR2bits	set	4001
   232  0000                     _PORTAbits	set	3968
   233  0000                     _PORTB	set	3969
   234  0000                     _PORTBbits	set	3969
   235  0000                     _PR2	set	4043
   236  0000                     _SSPADD	set	4040
   237  0000                     _SSPBUF	set	4041
   238  0000                     _SSPCON1	set	4038
   239  0000                     _SSPCON2	set	4037
   240  0000                     _SSPSTAT	set	4039
   241  0000                     _T0CON	set	4053
   242  0000                     _T1CON	set	4045
   243  0000                     _T2CON	set	4042
   244  0000                     _T3CON	set	4017
   245  0000                     _TMR0H	set	4055
   246  0000                     _TMR0L	set	4054
   247  0000                     _TMR1H	set	4047
   248  0000                     _TMR1L	set	4046
   249  0000                     _TMR3H	set	4019
   250  0000                     _TMR3L	set	4018
   251  0000                     _TRISA	set	3986
   252  0000                     _TRISB	set	3987
   253  0000                     _TRISC	set	3988
   254  0000                     _TRISD	set	3989
   255  0000                     _TRISE	set	3990
   256  0000                     _ACKDT	set	32301
   257  0000                     _ACKEN	set	32300
   258  0000                     _ADIE	set	31982
   259  0000                     _INT1IE	set	32643
   260  0000                     _INT1IF	set	32640
   261  0000                     _PEIE	set	32662
   262  0000                     _PEN	set	32298
   263  0000                     _RCEN	set	32299
   264  0000                     _RSEN	set	32297
   265  0000                     _SEN	set	32296
   266  0000                     _TMR0IE	set	32661
   267  0000                     _TMR0IF	set	32658
   268  0000                     _TMR0ON	set	32431
   269  0000                     _TMR1IE	set	31976
   270  0000                     _TMR1IF	set	31984
   271  0000                     _TMR1ON	set	32360
   272  0000                     _TMR2IE	set	31977
   273  0000                     _TMR2IF	set	31985
   274  0000                     _TMR2ON	set	32338
   275  0000                     _TMR3IE	set	32001
   276  0000                     _TMR3IF	set	32009
   277  0000                     _TMR3ON	set	32136
   278  0000                     _TRISC3	set	31907
   279  0000                     _TRISC4	set	31908
   280  0000                     _nRBPU	set	32655
   281  00FAA2                     STR_21:
   282  00FAA2  25                 	db	37
   283  00FAA3  30                 	db	48	;'0'
   284  00FAA4  32                 	db	50	;'2'
   285  00FAA5  64                 	db	100	;'d'
   286  00FAA6  25                 	db	37
   287  00FAA7  73                 	db	115	;'s'
   288  00FAA8  20                 	db	32
   289  00FAA9  7C                 	db	124
   290  00FAAA  20                 	db	32
   291  00FAAB  25                 	db	37
   292  00FAAC  30                 	db	48	;'0'
   293  00FAAD  32                 	db	50	;'2'
   294  00FAAE  64                 	db	100	;'d'
   295  00FAAF  3A                 	db	58	;':'
   296  00FAB0  25                 	db	37
   297  00FAB1  30                 	db	48	;'0'
   298  00FAB2  32                 	db	50	;'2'
   299  00FAB3  64                 	db	100	;'d'
   300  00FAB4  3A                 	db	58	;':'
   301  00FAB5  25                 	db	37
   302  00FAB6  30                 	db	48	;'0'
   303  00FAB7  32                 	db	50	;'2'
   304  00FAB8  64                 	db	100	;'d'
   305  00FAB9  00                 	db	0
   306  00FABA                     STR_64:
   307  00FABA  20                 	db	32
   308  00FABB  20                 	db	32
   309  00FABC  20                 	db	32
   310  00FABD  20                 	db	32
   311  00FABE  20                 	db	32
   312  00FABF  20                 	db	32
   313  00FAC0  20                 	db	32
   314  00FAC1  20                 	db	32
   315  00FAC2  20                 	db	32
   316  00FAC3  20                 	db	32
   317  00FAC4  20                 	db	32
   318  00FAC5  20                 	db	32
   319  00FAC6  46                 	db	70	;'F'
   320  00FAC7  25                 	db	37
   321  00FAC8  64                 	db	100	;'d'
   322  00FAC9  4D                 	db	77	;'M'
   323  00FACA  25                 	db	37
   324  00FACB  64                 	db	100	;'d'
   325  00FACC  4C                 	db	76	;'L'
   326  00FACD  25                 	db	37
   327  00FACE  64                 	db	100	;'d'
   328  00FACF  00                 	db	0
   329  00FAD0                     STR_71:
   330  00FAD0  28                 	db	40
   331  00FAD1  64                 	db	100	;'d'
   332  00FAD2  61                 	db	97	;'a'
   333  00FAD3  74                 	db	116	;'t'
   334  00FAD4  61                 	db	97	;'a'
   335  00FAD5  3A                 	db	58	;':'
   336  00FAD6  20                 	db	32
   337  00FAD7  25                 	db	37
   338  00FAD8  75                 	db	117	;'u'
   339  00FAD9  2C                 	db	44
   340  00FADA  20                 	db	32
   341  00FADB  61                 	db	97	;'a'
   342  00FADC  64                 	db	100	;'d'
   343  00FADD  64                 	db	100	;'d'
   344  00FADE  72                 	db	114	;'r'
   345  00FADF  3A                 	db	58	;':'
   346  00FAE0  20                 	db	32
   347  00FAE1  25                 	db	37
   348  00FAE2  75                 	db	117	;'u'
   349  00FAE3  29                 	db	41
   350  00FAE4  00                 	db	0
   351  00FAE5                     STR_116:
   352  00FAE5  44                 	db	68	;'D'
   353  00FAE6  20                 	db	32
   354  00FAE7  57                 	db	87	;'W'
   355  00FAE8  49                 	db	73	;'I'
   356  00FAE9  4C                 	db	76	;'L'
   357  00FAEA  4C                 	db	76	;'L'
   358  00FAEB  20                 	db	32
   359  00FAEC  52                 	db	82	;'R'
   360  00FAED  45                 	db	69	;'E'
   361  00FAEE  54                 	db	84	;'T'
   362  00FAEF  55                 	db	85	;'U'
   363  00FAF0  52                 	db	82	;'R'
   364  00FAF1  4E                 	db	78	;'N'
   365  00FAF2  20                 	db	32
   366  00FAF3  20                 	db	32
   367  00FAF4  20                 	db	32
   368  00FAF5  20                 	db	32
   369  00FAF6  00                 	db	0
   370  00FAF7                     STR_126:
   371  00FAF7  4F                 	db	79	;'O'
   372  00FAF8  54                 	db	84	;'T'
   373  00FAF9  48                 	db	72	;'H'
   374  00FAFA  45                 	db	69	;'E'
   375  00FAFB  52                 	db	82	;'R'
   376  00FAFC  20                 	db	32
   377  00FAFD  53                 	db	83	;'S'
   378  00FAFE  45                 	db	69	;'E'
   379  00FAFF  54                 	db	84	;'T'
   380  00FB00  53                 	db	83	;'S'
   381  00FB01  20                 	db	32
   382  00FB02  52                 	db	82	;'R'
   383  00FB03  41                 	db	65	;'A'
   384  00FB04  35                 	db	53	;'5'
   385  00FB05  20                 	db	32
   386  00FB06  20                 	db	32
   387  00FB07  20                 	db	32
   388  00FB08  00                 	db	0
   389  00FB09                     STR_125:
   390  00FB09  53                 	db	83	;'S'
   391  00FB0A  3A                 	db	58	;':'
   392  00FB0B  20                 	db	32
   393  00FB0C  44                 	db	68	;'D'
   394  00FB0D  20                 	db	32
   395  00FB0E  57                 	db	87	;'W'
   396  00FB0F  49                 	db	73	;'I'
   397  00FB10  4C                 	db	76	;'L'
   398  00FB11  4C                 	db	76	;'L'
   399  00FB12  20                 	db	32
   400  00FB13  52                 	db	82	;'R'
   401  00FB14  45                 	db	69	;'E'
   402  00FB15  54                 	db	84	;'T'
   403  00FB16  55                 	db	85	;'U'
   404  00FB17  52                 	db	82	;'R'
   405  00FB18  4E                 	db	78	;'N'
   406  00FB19  20                 	db	32
   407  00FB1A  00                 	db	0
   408  00FB1B                     STR_128:
   409  00FB1B  4F                 	db	79	;'O'
   410  00FB1C  54                 	db	84	;'T'
   411  00FB1D  48                 	db	72	;'H'
   412  00FB1E  45                 	db	69	;'E'
   413  00FB1F  52                 	db	82	;'R'
   414  00FB20  3A                 	db	58	;':'
   415  00FB21  20                 	db	32
   416  00FB22  43                 	db	67	;'C'
   417  00FB23  41                 	db	65	;'A'
   418  00FB24  4D                 	db	77	;'M'
   419  00FB25  20                 	db	32
   420  00FB26  54                 	db	84	;'T'
   421  00FB27  4F                 	db	79	;'O'
   422  00FB28  47                 	db	71	;'G'
   423  00FB29  47                 	db	71	;'G'
   424  00FB2A  4C                 	db	76	;'L'
   425  00FB2B  45                 	db	69	;'E'
   426  00FB2C  00                 	db	0
   427  00FB2D                     STR_134:
   428  00FB2D  4F                 	db	79	;'O'
   429  00FB2E  54                 	db	84	;'T'
   430  00FB2F  48                 	db	72	;'H'
   431  00FB30  45                 	db	69	;'E'
   432  00FB31  52                 	db	82	;'R'
   433  00FB32  20                 	db	32
   434  00FB33  53                 	db	83	;'S'
   435  00FB34  45                 	db	69	;'E'
   436  00FB35  54                 	db	84	;'T'
   437  00FB36  53                 	db	83	;'S'
   438  00FB37  20                 	db	32
   439  00FB38  50                 	db	80	;'P'
   440  00FB39  55                 	db	85	;'U'
   441  00FB3A  53                 	db	83	;'S'
   442  00FB3B  48                 	db	72	;'H'
   443  00FB3C  45                 	db	69	;'E'
   444  00FB3D  52                 	db	82	;'R'
   445  00FB3E  00                 	db	0
   446  00FB3F                     STR_3:
   447  00FB3F  2D                 	db	45
   448  00FB40  2D                 	db	45
   449  00FB41  20                 	db	32
   450  00FB42  4C                 	db	76	;'L'
   451  00FB43  4F                 	db	79	;'O'
   452  00FB44  47                 	db	71	;'G'
   453  00FB45  20                 	db	32
   454  00FB46  25                 	db	37
   455  00FB47  32                 	db	50	;'2'
   456  00FB48  64                 	db	100	;'d'
   457  00FB49  20                 	db	32
   458  00FB4A  48                 	db	72	;'H'
   459  00FB4B  45                 	db	69	;'E'
   460  00FB4C  52                 	db	82	;'R'
   461  00FB4D  45                 	db	69	;'E'
   462  00FB4E  2D                 	db	45
   463  00FB4F  2D                 	db	45
   464  00FB50  00                 	db	0
   465  00FB51                     STR_1:
   466  00FB51  52                 	db	82	;'R'
   467  00FB52  45                 	db	69	;'E'
   468  00FB53  53                 	db	83	;'S'
   469  00FB54  55                 	db	85	;'U'
   470  00FB55  4C                 	db	76	;'L'
   471  00FB56  54                 	db	84	;'T'
   472  00FB57  53                 	db	83	;'S'
   473  00FB58  20                 	db	32
   474  00FB59  49                 	db	73	;'I'
   475  00FB5A  4E                 	db	78	;'N'
   476  00FB5B  20                 	db	32
   477  00FB5C  4C                 	db	76	;'L'
   478  00FB5D  4F                 	db	79	;'O'
   479  00FB5E  47                 	db	71	;'G'
   480  00FB5F  20                 	db	32
   481  00FB60  25                 	db	37
   482  00FB61  64                 	db	100	;'d'
   483  00FB62  00                 	db	0
   484  00FB63                     STR_107:
   485  00FB63  4D                 	db	77	;'M'
   486  00FB64  49                 	db	73	;'I'
   487  00FB65  44                 	db	68	;'D'
   488  00FB66  20                 	db	32
   489  00FB67  2D                 	db	45
   490  00FB68  2D                 	db	45
   491  00FB69  20                 	db	32
   492  00FB6A  32                 	db	50	;'2'
   493  00FB6B  73                 	db	115	;'s'
   494  00FB6C  20                 	db	32
   495  00FB6D  20                 	db	32
   496  00FB6E  20                 	db	32
   497  00FB6F  20                 	db	32
   498  00FB70  20                 	db	32
   499  00FB71  20                 	db	32
   500  00FB72  20                 	db	32
   501  00FB73  00                 	db	0
   502  00FB74                     STR_110:
   503  00FB74  44                 	db	68	;'D'
   504  00FB75  52                 	db	82	;'R'
   505  00FB76  4F                 	db	79	;'O'
   506  00FB77  50                 	db	80	;'P'
   507  00FB78  20                 	db	32
   508  00FB79  2D                 	db	45
   509  00FB7A  2D                 	db	45
   510  00FB7B  20                 	db	32
   511  00FB7C  32                 	db	50	;'2'
   512  00FB7D  73                 	db	115	;'s'
   513  00FB7E  20                 	db	32
   514  00FB7F  20                 	db	32
   515  00FB80  20                 	db	32
   516  00FB81  20                 	db	32
   517  00FB82  20                 	db	32
   518  00FB83  20                 	db	32
   519  00FB84  00                 	db	0
   520  00FB85                     STR_104:
   521  00FB85  4C                 	db	76	;'L'
   522  00FB86  45                 	db	69	;'E'
   523  00FB87  46                 	db	70	;'F'
   524  00FB88  54                 	db	84	;'T'
   525  00FB89  20                 	db	32
   526  00FB8A  2D                 	db	45
   527  00FB8B  2D                 	db	45
   528  00FB8C  20                 	db	32
   529  00FB8D  32                 	db	50	;'2'
   530  00FB8E  73                 	db	115	;'s'
   531  00FB8F  20                 	db	32
   532  00FB90  20                 	db	32
   533  00FB91  20                 	db	32
   534  00FB92  20                 	db	32
   535  00FB93  20                 	db	32
   536  00FB94  20                 	db	32
   537  00FB95  00                 	db	0
   538  00FB96                     STR_109:
   539  00FB96  4C                 	db	76	;'L'
   540  00FB97  45                 	db	69	;'E'
   541  00FB98  56                 	db	86	;'V'
   542  00FB99  45                 	db	69	;'E'
   543  00FB9A  4C                 	db	76	;'L'
   544  00FB9B  20                 	db	32
   545  00FB9C  2D                 	db	45
   546  00FB9D  2D                 	db	45
   547  00FB9E  20                 	db	32
   548  00FB9F  32                 	db	50	;'2'
   549  00FBA0  73                 	db	115	;'s'
   550  00FBA1  20                 	db	32
   551  00FBA2  20                 	db	32
   552  00FBA3  20                 	db	32
   553  00FBA4  20                 	db	32
   554  00FBA5  20                 	db	32
   555  00FBA6  00                 	db	0
   556  00FBA7                     STR_103:
   557  00FBA7  52                 	db	82	;'R'
   558  00FBA8  49                 	db	73	;'I'
   559  00FBA9  47                 	db	71	;'G'
   560  00FBAA  48                 	db	72	;'H'
   561  00FBAB  54                 	db	84	;'T'
   562  00FBAC  20                 	db	32
   563  00FBAD  2D                 	db	45
   564  00FBAE  2D                 	db	45
   565  00FBAF  20                 	db	32
   566  00FBB0  32                 	db	50	;'2'
   567  00FBB1  73                 	db	115	;'s'
   568  00FBB2  20                 	db	32
   569  00FBB3  20                 	db	32
   570  00FBB4  20                 	db	32
   571  00FBB5  20                 	db	32
   572  00FBB6  20                 	db	32
   573  00FBB7  00                 	db	0
   574  00FBB8                     STR_102:
   575  00FBB8  4D                 	db	77	;'M'
   576  00FBB9  49                 	db	73	;'I'
   577  00FBBA  44                 	db	68	;'D'
   578  00FBBB  44                 	db	68	;'D'
   579  00FBBC  4C                 	db	76	;'L'
   580  00FBBD  45                 	db	69	;'E'
   581  00FBBE  20                 	db	32
   582  00FBBF  2D                 	db	45
   583  00FBC0  2D                 	db	45
   584  00FBC1  20                 	db	32
   585  00FBC2  32                 	db	50	;'2'
   586  00FBC3  73                 	db	115	;'s'
   587  00FBC4  20                 	db	32
   588  00FBC5  20                 	db	32
   589  00FBC6  20                 	db	32
   590  00FBC7  20                 	db	32
   591  00FBC8  00                 	db	0
   592  00FBC9                     STR_117:
   593  00FBC9  4F                 	db	79	;'O'
   594  00FBCA  54                 	db	84	;'T'
   595  00FBCB  48                 	db	72	;'H'
   596  00FBCC  45                 	db	69	;'E'
   597  00FBCD  52                 	db	82	;'R'
   598  00FBCE  20                 	db	32
   599  00FBCF  53                 	db	83	;'S'
   600  00FBD0  45                 	db	69	;'E'
   601  00FBD1  54                 	db	84	;'T'
   602  00FBD2  53                 	db	83	;'S'
   603  00FBD3  20                 	db	32
   604  00FBD4  44                 	db	68	;'D'
   605  00FBD5  43                 	db	67	;'C'
   606  00FBD6  20                 	db	32
   607  00FBD7  20                 	db	32
   608  00FBD8  20                 	db	32
   609  00FBD9  00                 	db	0
   610  00FBDA                     STR_123:
   611  00FBDA  44                 	db	68	;'D'
   612  00FBDB  20                 	db	32
   613  00FBDC  57                 	db	87	;'W'
   614  00FBDD  49                 	db	73	;'I'
   615  00FBDE  4C                 	db	76	;'L'
   616  00FBDF  4C                 	db	76	;'L'
   617  00FBE0  20                 	db	32
   618  00FBE1  52                 	db	82	;'R'
   619  00FBE2  45                 	db	69	;'E'
   620  00FBE3  54                 	db	84	;'T'
   621  00FBE4  55                 	db	85	;'U'
   622  00FBE5  52                 	db	82	;'R'
   623  00FBE6  4E                 	db	78	;'N'
   624  00FBE7  20                 	db	32
   625  00FBE8  20                 	db	32
   626  00FBE9  20                 	db	32
   627  00FBEA  00                 	db	0
   628  00FBEB                     STR_120:
   629  00FBEB  35                 	db	53	;'5'
   630  00FBEC  3A                 	db	58	;':'
   631  00FBED  48                 	db	72	;'H'
   632  00FBEE  7C                 	db	124
   633  00FBEF  36                 	db	54	;'6'
   634  00FBF0  3A                 	db	58	;':'
   635  00FBF1  4C                 	db	76	;'L'
   636  00FBF2  7C                 	db	124
   637  00FBF3  49                 	db	73	;'I'
   638  00FBF4  52                 	db	82	;'R'
   639  00FBF5  3A                 	db	58	;':'
   640  00FBF6  25                 	db	37
   641  00FBF7  64                 	db	100	;'d'
   642  00FBF8  20                 	db	32
   643  00FBF9  20                 	db	32
   644  00FBFA  20                 	db	32
   645  00FBFB  00                 	db	0
   646  00FBFC                     STR_118:
   647  00FBFC  31                 	db	49	;'1'
   648  00FBFD  3A                 	db	58	;':'
   649  00FBFE  20                 	db	32
   650  00FBFF  44                 	db	68	;'D'
   651  00FC00  43                 	db	67	;'C'
   652  00FC01  20                 	db	32
   653  00FC02  7C                 	db	124
   654  00FC03  20                 	db	32
   655  00FC04  41                 	db	65	;'A'
   656  00FC05  3A                 	db	58	;':'
   657  00FC06  20                 	db	32
   658  00FC07  41                 	db	65	;'A'
   659  00FC08  52                 	db	82	;'R'
   660  00FC09  4D                 	db	77	;'M'
   661  00FC0A  20                 	db	32
   662  00FC0B  20                 	db	32
   663  00FC0C  00                 	db	0
   664  00FC0D                     STR_105:
   665  00FC0D  4D                 	db	77	;'M'
   666  00FC0E  49                 	db	73	;'I'
   667  00FC0F  44                 	db	68	;'D'
   668  00FC10  2D                 	db	45
   669  00FC11  4C                 	db	76	;'L'
   670  00FC12  45                 	db	69	;'E'
   671  00FC13  46                 	db	70	;'F'
   672  00FC14  54                 	db	84	;'T'
   673  00FC15  20                 	db	32
   674  00FC16  2D                 	db	45
   675  00FC17  2D                 	db	45
   676  00FC18  20                 	db	32
   677  00FC19  32                 	db	50	;'2'
   678  00FC1A  73                 	db	115	;'s'
   679  00FC1B  20                 	db	32
   680  00FC1C  20                 	db	32
   681  00FC1D  00                 	db	0
   682  00FC1E                     STR_106:
   683  00FC1E  4D                 	db	77	;'M'
   684  00FC1F  49                 	db	73	;'I'
   685  00FC20  44                 	db	68	;'D'
   686  00FC21  2D                 	db	45
   687  00FC22  52                 	db	82	;'R'
   688  00FC23  49                 	db	73	;'I'
   689  00FC24  47                 	db	71	;'G'
   690  00FC25  48                 	db	72	;'H'
   691  00FC26  54                 	db	84	;'T'
   692  00FC27  20                 	db	32
   693  00FC28  2D                 	db	45
   694  00FC29  2D                 	db	45
   695  00FC2A  20                 	db	32
   696  00FC2B  32                 	db	50	;'2'
   697  00FC2C  73                 	db	115	;'s'
   698  00FC2D  20                 	db	32
   699  00FC2E  00                 	db	0
   700  00FC2F  45                 	db	69	;'E'
   701  00FC30  4C                 	db	76	;'L'
   702  00FC31  53                 	db	83	;'S'
   703  00FC32  45                 	db	69	;'E'
   704  00FC33  20                 	db	32
   705  00FC34  54                 	db	84	;'T'
   706  00FC35  4F                 	db	79	;'O'
   707  00FC36  47                 	db	71	;'G'
   708  00FC37  47                 	db	71	;'G'
   709  00FC38  4C                 	db	76	;'L'
   710  00FC39  45                 	db	69	;'E'
   711  00FC3A  53                 	db	83	;'S'
   712  00FC3B  20                 	db	32
   713  00FC3C  52                 	db	82	;'R'
   714  00FC3D  41                 	db	65	;'A'
   715  00FC3E  35                 	db	53	;'5'
   716  00FC3F  00                 	db	0
   717  00FC40                     STR_77:
   718  00FC40  41                 	db	65	;'A'
   719  00FC41  4C                 	db	76	;'L'
   720  00FC42  47                 	db	71	;'G'
   721  00FC43  31                 	db	49	;'1'
   722  00FC44  3A                 	db	58	;':'
   723  00FC45  20                 	db	32
   724  00FC46  39                 	db	57	;'9'
   725  00FC47  20                 	db	32
   726  00FC48  50                 	db	80	;'P'
   727  00FC49  4F                 	db	79	;'O'
   728  00FC4A  50                 	db	80	;'P'
   729  00FC4B  4E                 	db	78	;'N'
   730  00FC4C  4F                 	db	79	;'O'
   731  00FC4D  54                 	db	84	;'T'
   732  00FC4E  41                 	db	65	;'A'
   733  00FC4F  42                 	db	66	;'B'
   734  00FC50  00                 	db	0
   735  00FC51                     STR_97:
   736  00FC51  54                 	db	84	;'T'
   737  00FC52  53                 	db	83	;'S'
   738  00FC53  54                 	db	84	;'T'
   739  00FC54  3A                 	db	58	;':'
   740  00FC55  20                 	db	32
   741  00FC56  43                 	db	67	;'C'
   742  00FC57  4F                 	db	79	;'O'
   743  00FC58  4E                 	db	78	;'N'
   744  00FC59  44                 	db	68	;'D'
   745  00FC5A  20                 	db	32
   746  00FC5B  53                 	db	83	;'S'
   747  00FC5C  4F                 	db	79	;'O'
   748  00FC5D  4C                 	db	76	;'L'
   749  00FC5E  4E                 	db	78	;'N'
   750  00FC5F  27                 	db	39
   751  00FC60  44                 	db	68	;'D'
   752  00FC61  00                 	db	0
   753  00FC62                     STR_99:
   754  00FC62  54                 	db	84	;'T'
   755  00FC63  53                 	db	83	;'S'
   756  00FC64  54                 	db	84	;'T'
   757  00FC65  3A                 	db	58	;':'
   758  00FC66  20                 	db	32
   759  00FC67  50                 	db	80	;'P'
   760  00FC68  55                 	db	85	;'U'
   761  00FC69  53                 	db	83	;'S'
   762  00FC6A  48                 	db	72	;'H'
   763  00FC6B  20                 	db	32
   764  00FC6C  53                 	db	83	;'S'
   765  00FC6D  4F                 	db	79	;'O'
   766  00FC6E  4C                 	db	76	;'L'
   767  00FC6F  4E                 	db	78	;'N'
   768  00FC70  27                 	db	39
   769  00FC71  44                 	db	68	;'D'
   770  00FC72  00                 	db	0
   771  00FC73                     STR_73:
   772  00FC73  32                 	db	50	;'2'
   773  00FC74  2E                 	db	46
   774  00FC75  53                 	db	83	;'S'
   775  00FC76  4E                 	db	78	;'N'
   776  00FC77  52                 	db	82	;'R'
   777  00FC78  7C                 	db	124
   778  00FC79  34                 	db	52	;'4'
   779  00FC7A  2E                 	db	46
   780  00FC7B  48                 	db	72	;'H'
   781  00FC7C  49                 	db	73	;'I'
   782  00FC7D  7C                 	db	124
   783  00FC7E  35                 	db	53	;'5'
   784  00FC7F  2E                 	db	46
   785  00FC80  4D                 	db	77	;'M'
   786  00FC81  45                 	db	69	;'E'
   787  00FC82  44                 	db	68	;'D'
   788  00FC83  00                 	db	0
   789  00FC84                     STR_74:
   790  00FC84  42                 	db	66	;'B'
   791  00FC85  2E                 	db	46
   792  00FC86  50                 	db	80	;'P'
   793  00FC87  4C                 	db	76	;'L'
   794  00FC88  41                 	db	65	;'A'
   795  00FC89  7C                 	db	124
   796  00FC8A  38                 	db	56	;'8'
   797  00FC8B  2E                 	db	46
   798  00FC8C  53                 	db	83	;'S'
   799  00FC8D  56                 	db	86	;'V'
   800  00FC8E  7C                 	db	124
   801  00FC8F  39                 	db	57	;'9'
   802  00FC90  2E                 	db	46
   803  00FC91  42                 	db	66	;'B'
   804  00FC92  4C                 	db	76	;'L'
   805  00FC93  4B                 	db	75	;'K'
   806  00FC94  00                 	db	0
   807  00FC95                     STR_132:
   808  00FC95  45                 	db	69	;'E'
   809  00FC96  4C                 	db	76	;'L'
   810  00FC97  53                 	db	83	;'S'
   811  00FC98  45                 	db	69	;'E'
   812  00FC99  20                 	db	32
   813  00FC9A  54                 	db	84	;'T'
   814  00FC9B  4F                 	db	79	;'O'
   815  00FC9C  47                 	db	71	;'G'
   816  00FC9D  47                 	db	71	;'G'
   817  00FC9E  4C                 	db	76	;'L'
   818  00FC9F  45                 	db	69	;'E'
   819  00FCA0  53                 	db	83	;'S'
   820  00FCA1  20                 	db	32
   821  00FCA2  41                 	db	65	;'A'
   822  00FCA3  52                 	db	82	;'R'
   823  00FCA4  4D                 	db	77	;'M'
   824  00FCA5  00                 	db	0
   825  00FCA6                     STR_115:
   826  00FCA6  54                 	db	84	;'T'
   827  00FCA7  53                 	db	83	;'S'
   828  00FCA8  54                 	db	84	;'T'
   829  00FCA9  3A                 	db	58	;':'
   830  00FCAA  20                 	db	32
   831  00FCAB  42                 	db	66	;'B'
   832  00FCAC  4F                 	db	79	;'O'
   833  00FCAD  54                 	db	84	;'T'
   834  00FCAE  48                 	db	72	;'H'
   835  00FCAF  20                 	db	32
   836  00FCB0  53                 	db	83	;'S'
   837  00FCB1  45                 	db	69	;'E'
   838  00FCB2  52                 	db	82	;'R'
   839  00FCB3  56                 	db	86	;'V'
   840  00FCB4  4F                 	db	79	;'O'
   841  00FCB5  53                 	db	83	;'S'
   842  00FCB6  00                 	db	0
   843  00FCB7                     STR_65:
   844  00FCB7  53                 	db	83	;'S'
   845  00FCB8  4F                 	db	79	;'O'
   846  00FCB9  52                 	db	82	;'R'
   847  00FCBA  54                 	db	84	;'T'
   848  00FCBB  49                 	db	73	;'I'
   849  00FCBC  4E                 	db	78	;'N'
   850  00FCBD  47                 	db	71	;'G'
   851  00FCBE  2E                 	db	46
   852  00FCBF  2E                 	db	46
   853  00FCC0  2E                 	db	46
   854  00FCC1  20                 	db	32
   855  00FCC2  20                 	db	32
   856  00FCC3  20                 	db	32
   857  00FCC4  20                 	db	32
   858  00FCC5  20                 	db	32
   859  00FCC6  20                 	db	32
   860  00FCC7  00                 	db	0
   861  00FCC8                     STR_66:
   862  00FCC8  54                 	db	84	;'T'
   863  00FCC9  49                 	db	73	;'I'
   864  00FCCA  4D                 	db	77	;'M'
   865  00FCCB  45                 	db	69	;'E'
   866  00FCCC  20                 	db	32
   867  00FCCD  25                 	db	37
   868  00FCCE  64                 	db	100	;'d'
   869  00FCCF  3A                 	db	58	;':'
   870  00FCD0  25                 	db	37
   871  00FCD1  30                 	db	48	;'0'
   872  00FCD2  32                 	db	50	;'2'
   873  00FCD3  64                 	db	100	;'d'
   874  00FCD4  20                 	db	32
   875  00FCD5  20                 	db	32
   876  00FCD6  20                 	db	32
   877  00FCD7  20                 	db	32
   878  00FCD8  00                 	db	0
   879  00FCD9                     STR_41:
   880  00FCD9  4C                 	db	76	;'L'
   881  00FCDA  4F                 	db	79	;'O'
   882  00FCDB  47                 	db	71	;'G'
   883  00FCDC  20                 	db	32
   884  00FCDD  31                 	db	49	;'1'
   885  00FCDE  20                 	db	32
   886  00FCDF  20                 	db	32
   887  00FCE0  20                 	db	32
   888  00FCE1  20                 	db	32
   889  00FCE2  20                 	db	32
   890  00FCE3  20                 	db	32
   891  00FCE4  20                 	db	32
   892  00FCE5  20                 	db	32
   893  00FCE6  20                 	db	32
   894  00FCE7  20                 	db	32
   895  00FCE8  20                 	db	32
   896  00FCE9  00                 	db	0
   897  00FCEA                     STR_40:
   898  00FCEA  4C                 	db	76	;'L'
   899  00FCEB  4F                 	db	79	;'O'
   900  00FCEC  47                 	db	71	;'G'
   901  00FCED  20                 	db	32
   902  00FCEE  32                 	db	50	;'2'
   903  00FCEF  20                 	db	32
   904  00FCF0  20                 	db	32
   905  00FCF1  20                 	db	32
   906  00FCF2  20                 	db	32
   907  00FCF3  20                 	db	32
   908  00FCF4  20                 	db	32
   909  00FCF5  20                 	db	32
   910  00FCF6  20                 	db	32
   911  00FCF7  20                 	db	32
   912  00FCF8  20                 	db	32
   913  00FCF9  20                 	db	32
   914  00FCFA  00                 	db	0
   915  00FCFB                     STR_44:
   916  00FCFB  4C                 	db	76	;'L'
   917  00FCFC  4F                 	db	79	;'O'
   918  00FCFD  47                 	db	71	;'G'
   919  00FCFE  20                 	db	32
   920  00FCFF  33                 	db	51	;'3'
   921  00FD00  20                 	db	32
   922  00FD01  20                 	db	32
   923  00FD02  20                 	db	32
   924  00FD03  20                 	db	32
   925  00FD04  20                 	db	32
   926  00FD05  20                 	db	32
   927  00FD06  20                 	db	32
   928  00FD07  20                 	db	32
   929  00FD08  20                 	db	32
   930  00FD09  20                 	db	32
   931  00FD0A  20                 	db	32
   932  00FD0B  00                 	db	0
   933  00FD0C                     STR_48:
   934  00FD0C  4C                 	db	76	;'L'
   935  00FD0D  4F                 	db	79	;'O'
   936  00FD0E  47                 	db	71	;'G'
   937  00FD0F  20                 	db	32
   938  00FD10  34                 	db	52	;'4'
   939  00FD11  20                 	db	32
   940  00FD12  20                 	db	32
   941  00FD13  20                 	db	32
   942  00FD14  20                 	db	32
   943  00FD15  20                 	db	32
   944  00FD16  20                 	db	32
   945  00FD17  20                 	db	32
   946  00FD18  20                 	db	32
   947  00FD19  20                 	db	32
   948  00FD1A  20                 	db	32
   949  00FD1B  20                 	db	32
   950  00FD1C  00                 	db	0
   951  00FD1D                     STR_36:
   952  00FD1D  33                 	db	51	;'3'
   953  00FD1E  2E                 	db	46
   954  00FD1F  20                 	db	32
   955  00FD20  4C                 	db	76	;'L'
   956  00FD21  4F                 	db	79	;'O'
   957  00FD22  47                 	db	71	;'G'
   958  00FD23  53                 	db	83	;'S'
   959  00FD24  20                 	db	32
   960  00FD25  20                 	db	32
   961  00FD26  20                 	db	32
   962  00FD27  20                 	db	32
   963  00FD28  20                 	db	32
   964  00FD29  20                 	db	32
   965  00FD2A  20                 	db	32
   966  00FD2B  20                 	db	32
   967  00FD2C  20                 	db	32
   968  00FD2D  00                 	db	0
   969  00FD2E                     STR_32:
   970  00FD2E  32                 	db	50	;'2'
   971  00FD2F  2E                 	db	46
   972  00FD30  20                 	db	32
   973  00FD31  53                 	db	83	;'S'
   974  00FD32  4F                 	db	79	;'O'
   975  00FD33  52                 	db	82	;'R'
   976  00FD34  54                 	db	84	;'T'
   977  00FD35  20                 	db	32
   978  00FD36  20                 	db	32
   979  00FD37  20                 	db	32
   980  00FD38  20                 	db	32
   981  00FD39  20                 	db	32
   982  00FD3A  20                 	db	32
   983  00FD3B  20                 	db	32
   984  00FD3C  20                 	db	32
   985  00FD3D  20                 	db	32
   986  00FD3E  00                 	db	0
   987  00FD3F                     STR_33:
   988  00FD3F  31                 	db	49	;'1'
   989  00FD40  2E                 	db	46
   990  00FD41  20                 	db	32
   991  00FD42  44                 	db	68	;'D'
   992  00FD43  41                 	db	65	;'A'
   993  00FD44  54                 	db	84	;'T'
   994  00FD45  45                 	db	69	;'E'
   995  00FD46  2F                 	db	47
   996  00FD47  54                 	db	84	;'T'
   997  00FD48  49                 	db	73	;'I'
   998  00FD49  4D                 	db	77	;'M'
   999  00FD4A  45                 	db	69	;'E'
  1000  00FD4B  20                 	db	32
  1001  00FD4C  20                 	db	32
  1002  00FD4D  20                 	db	32
  1003  00FD4E  20                 	db	32
  1004  00FD4F  00                 	db	0
  1005  00FD50                     STR_24:
  1006  00FD50  20                 	db	32
  1007  00FD51  2D                 	db	45
  1008  00FD52  2D                 	db	45
  1009  00FD53  20                 	db	32
  1010  00FD54  50                 	db	80	;'P'
  1011  00FD55  4F                 	db	79	;'O'
  1012  00FD56  50                 	db	80	;'P'
  1013  00FD57  20                 	db	32
  1014  00FD58  20                 	db	32
  1015  00FD59  43                 	db	67	;'C'
  1016  00FD5A  41                 	db	65	;'A'
  1017  00FD5B  4E                 	db	78	;'N'
  1018  00FD5C  20                 	db	32
  1019  00FD5D  2D                 	db	45
  1020  00FD5E  2D                 	db	45
  1021  00FD5F  20                 	db	32
  1022  00FD60  00                 	db	0
  1023  00FD61                     STR_26:
  1024  00FD61  20                 	db	32
  1025  00FD62  2D                 	db	45
  1026  00FD63  2D                 	db	45
  1027  00FD64  20                 	db	32
  1028  00FD65  53                 	db	83	;'S'
  1029  00FD66  4F                 	db	79	;'O'
  1030  00FD67  55                 	db	85	;'U'
  1031  00FD68  50                 	db	80	;'P'
  1032  00FD69  20                 	db	32
  1033  00FD6A  43                 	db	67	;'C'
  1034  00FD6B  41                 	db	65	;'A'
  1035  00FD6C  4E                 	db	78	;'N'
  1036  00FD6D  20                 	db	32
  1037  00FD6E  2D                 	db	45
  1038  00FD6F  2D                 	db	45
  1039  00FD70  20                 	db	32
  1040  00FD71  00                 	db	0
  1041  00FD72                     STR_28:
  1042  00FD72  2D                 	db	45
  1043  00FD73  2D                 	db	45
  1044  00FD74  20                 	db	32
  1045  00FD75  54                 	db	84	;'T'
  1046  00FD76  4F                 	db	79	;'O'
  1047  00FD77  54                 	db	84	;'T'
  1048  00FD78  41                 	db	65	;'A'
  1049  00FD79  4C                 	db	76	;'L'
  1050  00FD7A  20                 	db	32
  1051  00FD7B  43                 	db	67	;'C'
  1052  00FD7C  41                 	db	65	;'A'
  1053  00FD7D  4E                 	db	78	;'N'
  1054  00FD7E  53                 	db	83	;'S'
  1055  00FD7F  20                 	db	32
  1056  00FD80  2D                 	db	45
  1057  00FD81  2D                 	db	45
  1058  00FD82  00                 	db	0
  1059  00FD83                     STR_39:
  1060  00FD83  4C                 	db	76	;'L'
  1061  00FD84  4F                 	db	79	;'O'
  1062  00FD85  47                 	db	71	;'G'
  1063  00FD86  20                 	db	32
  1064  00FD87  31                 	db	49	;'1'
  1065  00FD88  20                 	db	32
  1066  00FD89  20                 	db	32
  1067  00FD8A  20                 	db	32
  1068  00FD8B  20                 	db	32
  1069  00FD8C  20                 	db	32
  1070  00FD8D  20                 	db	32
  1071  00FD8E  20                 	db	32
  1072  00FD8F  20                 	db	32
  1073  00FD90  20                 	db	32
  1074  00FD91  20                 	db	32
  1075  00FD92  3C                 	db	60	;'<'
  1076  00FD93  00                 	db	0
  1077  00FD94                     STR_42:
  1078  00FD94  4C                 	db	76	;'L'
  1079  00FD95  4F                 	db	79	;'O'
  1080  00FD96  47                 	db	71	;'G'
  1081  00FD97  20                 	db	32
  1082  00FD98  32                 	db	50	;'2'
  1083  00FD99  20                 	db	32
  1084  00FD9A  20                 	db	32
  1085  00FD9B  20                 	db	32
  1086  00FD9C  20                 	db	32
  1087  00FD9D  20                 	db	32
  1088  00FD9E  20                 	db	32
  1089  00FD9F  20                 	db	32
  1090  00FDA0  20                 	db	32
  1091  00FDA1  20                 	db	32
  1092  00FDA2  20                 	db	32
  1093  00FDA3  3C                 	db	60	;'<'
  1094  00FDA4  00                 	db	0
  1095  00FDA5                     STR_46:
  1096  00FDA5  4C                 	db	76	;'L'
  1097  00FDA6  4F                 	db	79	;'O'
  1098  00FDA7  47                 	db	71	;'G'
  1099  00FDA8  20                 	db	32
  1100  00FDA9  33                 	db	51	;'3'
  1101  00FDAA  20                 	db	32
  1102  00FDAB  20                 	db	32
  1103  00FDAC  20                 	db	32
  1104  00FDAD  20                 	db	32
  1105  00FDAE  20                 	db	32
  1106  00FDAF  20                 	db	32
  1107  00FDB0  20                 	db	32
  1108  00FDB1  20                 	db	32
  1109  00FDB2  20                 	db	32
  1110  00FDB3  20                 	db	32
  1111  00FDB4  3C                 	db	60	;'<'
  1112  00FDB5  00                 	db	0
  1113  00FDB6                     STR_50:
  1114  00FDB6  4C                 	db	76	;'L'
  1115  00FDB7  4F                 	db	79	;'O'
  1116  00FDB8  47                 	db	71	;'G'
  1117  00FDB9  20                 	db	32
  1118  00FDBA  34                 	db	52	;'4'
  1119  00FDBB  20                 	db	32
  1120  00FDBC  20                 	db	32
  1121  00FDBD  20                 	db	32
  1122  00FDBE  20                 	db	32
  1123  00FDBF  20                 	db	32
  1124  00FDC0  20                 	db	32
  1125  00FDC1  20                 	db	32
  1126  00FDC2  20                 	db	32
  1127  00FDC3  20                 	db	32
  1128  00FDC4  20                 	db	32
  1129  00FDC5  3C                 	db	60	;'<'
  1130  00FDC6  00                 	db	0
  1131  00FDC7                     STR_38:
  1132  00FDC7  33                 	db	51	;'3'
  1133  00FDC8  2E                 	db	46
  1134  00FDC9  20                 	db	32
  1135  00FDCA  4C                 	db	76	;'L'
  1136  00FDCB  4F                 	db	79	;'O'
  1137  00FDCC  47                 	db	71	;'G'
  1138  00FDCD  53                 	db	83	;'S'
  1139  00FDCE  20                 	db	32
  1140  00FDCF  20                 	db	32
  1141  00FDD0  20                 	db	32
  1142  00FDD1  20                 	db	32
  1143  00FDD2  20                 	db	32
  1144  00FDD3  20                 	db	32
  1145  00FDD4  20                 	db	32
  1146  00FDD5  20                 	db	32
  1147  00FDD6  3C                 	db	60	;'<'
  1148  00FDD7  00                 	db	0
  1149  00FDD8                     STR_34:
  1150  00FDD8  32                 	db	50	;'2'
  1151  00FDD9  2E                 	db	46
  1152  00FDDA  20                 	db	32
  1153  00FDDB  53                 	db	83	;'S'
  1154  00FDDC  4F                 	db	79	;'O'
  1155  00FDDD  52                 	db	82	;'R'
  1156  00FDDE  54                 	db	84	;'T'
  1157  00FDDF  20                 	db	32
  1158  00FDE0  20                 	db	32
  1159  00FDE1  20                 	db	32
  1160  00FDE2  20                 	db	32
  1161  00FDE3  20                 	db	32
  1162  00FDE4  20                 	db	32
  1163  00FDE5  20                 	db	32
  1164  00FDE6  20                 	db	32
  1165  00FDE7  3C                 	db	60	;'<'
  1166  00FDE8  00                 	db	0
  1167  00FDE9                     STR_31:
  1168  00FDE9  31                 	db	49	;'1'
  1169  00FDEA  2E                 	db	46
  1170  00FDEB  20                 	db	32
  1171  00FDEC  44                 	db	68	;'D'
  1172  00FDED  41                 	db	65	;'A'
  1173  00FDEE  54                 	db	84	;'T'
  1174  00FDEF  45                 	db	69	;'E'
  1175  00FDF0  2F                 	db	47
  1176  00FDF1  54                 	db	84	;'T'
  1177  00FDF2  49                 	db	73	;'I'
  1178  00FDF3  4D                 	db	77	;'M'
  1179  00FDF4  45                 	db	69	;'E'
  1180  00FDF5  20                 	db	32
  1181  00FDF6  20                 	db	32
  1182  00FDF7  20                 	db	32
  1183  00FDF8  3C                 	db	60	;'<'
  1184  00FDF9  00                 	db	0
  1185  00FDFA                     STR_6:
  1186  00FDFA  50                 	db	80	;'P'
  1187  00FDFB  41                 	db	65	;'A'
  1188  00FDFC  55                 	db	85	;'U'
  1189  00FDFD  53                 	db	83	;'S'
  1190  00FDFE  45                 	db	69	;'E'
  1191  00FDFF  20                 	db	32
  1192  00FE00  3C                 	db	60	;'<'
  1193  00FE01  20                 	db	32
  1194  00FE02  7C                 	db	124
  1195  00FE03  20                 	db	32
  1196  00FE04  42                 	db	66	;'B'
  1197  00FE05  41                 	db	65	;'A'
  1198  00FE06  43                 	db	67	;'C'
  1199  00FE07  4B                 	db	75	;'K'
  1200  00FE08  20                 	db	32
  1201  00FE09  3E                 	db	62	;'>'
  1202  00FE0A  00                 	db	0
  1203  00FE0B                     STR_30:
  1204  00FE0B  50                 	db	80	;'P'
  1205  00FE0C  55                 	db	85	;'U'
  1206  00FE0D  53                 	db	83	;'S'
  1207  00FE0E  48                 	db	72	;'H'
  1208  00FE0F  20                 	db	32
  1209  00FE10  54                 	db	84	;'T'
  1210  00FE11  4F                 	db	79	;'O'
  1211  00FE12  20                 	db	32
  1212  00FE13  43                 	db	67	;'C'
  1213  00FE14  4F                 	db	79	;'O'
  1214  00FE15  4E                 	db	78	;'N'
  1215  00FE16  54                 	db	84	;'T'
  1216  00FE17  49                 	db	73	;'I'
  1217  00FE18  4E                 	db	78	;'N'
  1218  00FE19  55                 	db	85	;'U'
  1219  00FE1A  45                 	db	69	;'E'
  1220  00FE1B  00                 	db	0
  1221  00FE1C                     STR_27:
  1222  00FE1C  4E                 	db	78	;'N'
  1223  00FE1D  4C                 	db	76	;'L'
  1224  00FE1E  41                 	db	65	;'A'
  1225  00FE1F  42                 	db	66	;'B'
  1226  00FE20  3A                 	db	58	;':'
  1227  00FE21  20                 	db	32
  1228  00FE22  25                 	db	37
  1229  00FE23  64                 	db	100	;'d'
  1230  00FE24  7C                 	db	124
  1231  00FE25  4C                 	db	76	;'L'
  1232  00FE26  41                 	db	65	;'A'
  1233  00FE27  42                 	db	66	;'B'
  1234  00FE28  3A                 	db	58	;':'
  1235  00FE29  20                 	db	32
  1236  00FE2A  25                 	db	37
  1237  00FE2B  64                 	db	100	;'d'
  1238  00FE2C  00                 	db	0
  1239  00FE2D                     STR_25:
  1240  00FE2D  4E                 	db	78	;'N'
  1241  00FE2E  54                 	db	84	;'T'
  1242  00FE2F  41                 	db	65	;'A'
  1243  00FE30  42                 	db	66	;'B'
  1244  00FE31  3A                 	db	58	;':'
  1245  00FE32  20                 	db	32
  1246  00FE33  25                 	db	37
  1247  00FE34  64                 	db	100	;'d'
  1248  00FE35  7C                 	db	124
  1249  00FE36  54                 	db	84	;'T'
  1250  00FE37  41                 	db	65	;'A'
  1251  00FE38  42                 	db	66	;'B'
  1252  00FE39  3A                 	db	58	;':'
  1253  00FE3A  20                 	db	32
  1254  00FE3B  25                 	db	37
  1255  00FE3C  64                 	db	100	;'d'
  1256  00FE3D  00                 	db	0
  1257  00FE3E                     STR_88:
  1258  00FE3E  4D                 	db	77	;'M'
  1259  00FE3F  41                 	db	65	;'A'
  1260  00FE40  47                 	db	71	;'G'
  1261  00FE41  5F                 	db	95	;'_'
  1262  00FE42  73                 	db	115	;'s'
  1263  00FE43  69                 	db	105	;'i'
  1264  00FE44  67                 	db	103	;'g'
  1265  00FE45  6E                 	db	110	;'n'
  1266  00FE46  61                 	db	97	;'a'
  1267  00FE47  6C                 	db	108	;'l'
  1268  00FE48  3A                 	db	58	;':'
  1269  00FE49  20                 	db	32
  1270  00FE4A  25                 	db	37
  1271  00FE4B  64                 	db	100	;'d'
  1272  00FE4C  20                 	db	32
  1273  00FE4D  00                 	db	0
  1274  00FE4E                     STR_108:
  1275  00FE4E  54                 	db	84	;'T'
  1276  00FE4F  53                 	db	83	;'S'
  1277  00FE50  54                 	db	84	;'T'
  1278  00FE51  3A                 	db	58	;':'
  1279  00FE52  20                 	db	32
  1280  00FE53  54                 	db	84	;'T'
  1281  00FE54  49                 	db	73	;'I'
  1282  00FE55  4C                 	db	76	;'L'
  1283  00FE56  54                 	db	84	;'T'
  1284  00FE57  20                 	db	32
  1285  00FE58  53                 	db	83	;'S'
  1286  00FE59  45                 	db	69	;'E'
  1287  00FE5A  52                 	db	82	;'R'
  1288  00FE5B  56                 	db	86	;'V'
  1289  00FE5C  4F                 	db	79	;'O'
  1290  00FE5D  00                 	db	0
  1291  00FE5E                     STR_4:
  1292  00FE5E  44                 	db	68	;'D'
  1293  00FE5F  49                 	db	73	;'I'
  1294  00FE60  44                 	db	68	;'D'
  1295  00FE61  4E                 	db	78	;'N'
  1296  00FE62  27                 	db	39
  1297  00FE63  54                 	db	84	;'T'
  1298  00FE64  20                 	db	32
  1299  00FE65  43                 	db	67	;'C'
  1300  00FE66  4F                 	db	79	;'O'
  1301  00FE67  4D                 	db	77	;'M'
  1302  00FE68  50                 	db	80	;'P'
  1303  00FE69  4C                 	db	76	;'L'
  1304  00FE6A  45                 	db	69	;'E'
  1305  00FE6B  54                 	db	84	;'T'
  1306  00FE6C  45                 	db	69	;'E'
  1307  00FE6D  00                 	db	0
  1308  00FE6E                     STR_127:
  1309  00FE6E  44                 	db	68	;'D'
  1310  00FE6F  3A                 	db	58	;':'
  1311  00FE70  52                 	db	82	;'R'
  1312  00FE71  45                 	db	69	;'E'
  1313  00FE72  54                 	db	84	;'T'
  1314  00FE73  7C                 	db	124
  1315  00FE74  32                 	db	50	;'2'
  1316  00FE75  3A                 	db	58	;':'
  1317  00FE76  43                 	db	67	;'C'
  1318  00FE77  20                 	db	32
  1319  00FE78  25                 	db	37
  1320  00FE79  64                 	db	100	;'d'
  1321  00FE7A  20                 	db	32
  1322  00FE7B  20                 	db	32
  1323  00FE7C  00                 	db	0
  1324  00FE7D                     STR_85:
  1325  00FE7D  49                 	db	73	;'I'
  1326  00FE7E  52                 	db	82	;'R'
  1327  00FE7F  5F                 	db	95	;'_'
  1328  00FE80  73                 	db	115	;'s'
  1329  00FE81  69                 	db	105	;'i'
  1330  00FE82  67                 	db	103	;'g'
  1331  00FE83  6E                 	db	110	;'n'
  1332  00FE84  61                 	db	97	;'a'
  1333  00FE85  6C                 	db	108	;'l'
  1334  00FE86  3A                 	db	58	;':'
  1335  00FE87  20                 	db	32
  1336  00FE88  25                 	db	37
  1337  00FE89  64                 	db	100	;'d'
  1338  00FE8A  20                 	db	32
  1339  00FE8B  00                 	db	0
  1340  00FE8C                     STR_114:
  1341  00FE8C  43                 	db	67	;'C'
  1342  00FE8D  41                 	db	65	;'A'
  1343  00FE8E  4D                 	db	77	;'M'
  1344  00FE8F  20                 	db	32
  1345  00FE90  44                 	db	68	;'D'
  1346  00FE91  57                 	db	87	;'W'
  1347  00FE92  4E                 	db	78	;'N'
  1348  00FE93  20                 	db	32
  1349  00FE94  7C                 	db	124
  1350  00FE95  52                 	db	82	;'R'
  1351  00FE96  43                 	db	67	;'C'
  1352  00FE97  30                 	db	48	;'0'
  1353  00FE98  3D                 	db	61	;'='
  1354  00FE99  30                 	db	48	;'0'
  1355  00FE9A  00                 	db	0
  1356  00FE9B                     STR_113:
  1357  00FE9B  43                 	db	67	;'C'
  1358  00FE9C  41                 	db	65	;'A'
  1359  00FE9D  4D                 	db	77	;'M'
  1360  00FE9E  20                 	db	32
  1361  00FE9F  55                 	db	85	;'U'
  1362  00FEA0  50                 	db	80	;'P'
  1363  00FEA1  20                 	db	32
  1364  00FEA2  20                 	db	32
  1365  00FEA3  7C                 	db	124
  1366  00FEA4  52                 	db	82	;'R'
  1367  00FEA5  43                 	db	67	;'C'
  1368  00FEA6  30                 	db	48	;'0'
  1369  00FEA7  3D                 	db	61	;'='
  1370  00FEA8  31                 	db	49	;'1'
  1371  00FEA9  00                 	db	0
  1372  00FEAA                     STR_87:
  1373  00FEAA  54                 	db	84	;'T'
  1374  00FEAB  53                 	db	83	;'S'
  1375  00FEAC  54                 	db	84	;'T'
  1376  00FEAD  3A                 	db	58	;':'
  1377  00FEAE  20                 	db	32
  1378  00FEAF  4D                 	db	77	;'M'
  1379  00FEB0  41                 	db	65	;'A'
  1380  00FEB1  47                 	db	71	;'G'
  1381  00FEB2  4E                 	db	78	;'N'
  1382  00FEB3  45                 	db	69	;'E'
  1383  00FEB4  54                 	db	84	;'T'
  1384  00FEB5  49                 	db	73	;'I'
  1385  00FEB6  53                 	db	83	;'S'
  1386  00FEB7  4D                 	db	77	;'M'
  1387  00FEB8  00                 	db	0
  1388  00FEB9                     STR_112:
  1389  00FEB9  54                 	db	84	;'T'
  1390  00FEBA  53                 	db	83	;'S'
  1391  00FEBB  54                 	db	84	;'T'
  1392  00FEBC  3A                 	db	58	;':'
  1393  00FEBD  20                 	db	32
  1394  00FEBE  43                 	db	67	;'C'
  1395  00FEBF  41                 	db	65	;'A'
  1396  00FEC0  4D                 	db	77	;'M'
  1397  00FEC1  20                 	db	32
  1398  00FEC2  53                 	db	83	;'S'
  1399  00FEC3  45                 	db	69	;'E'
  1400  00FEC4  52                 	db	82	;'R'
  1401  00FEC5  56                 	db	86	;'V'
  1402  00FEC6  4F                 	db	79	;'O'
  1403  00FEC7  00                 	db	0
  1404  00FEC8                     STR_101:
  1405  00FEC8  54                 	db	84	;'T'
  1406  00FEC9  53                 	db	83	;'S'
  1407  00FECA  54                 	db	84	;'T'
  1408  00FECB  3A                 	db	58	;':'
  1409  00FECC  20                 	db	32
  1410  00FECD  50                 	db	80	;'P'
  1411  00FECE  41                 	db	65	;'A'
  1412  00FECF  4E                 	db	78	;'N'
  1413  00FED0  20                 	db	32
  1414  00FED1  53                 	db	83	;'S'
  1415  00FED2  45                 	db	69	;'E'
  1416  00FED3  52                 	db	82	;'R'
  1417  00FED4  56                 	db	86	;'V'
  1418  00FED5  4F                 	db	79	;'O'
  1419  00FED6  00                 	db	0
  1420  00FED7                     STR_80:
  1421  00FED7  41                 	db	65	;'A'
  1422  00FED8  4C                 	db	76	;'L'
  1423  00FED9  47                 	db	71	;'G'
  1424  00FEDA  34                 	db	52	;'4'
  1425  00FEDB  3A                 	db	58	;':'
  1426  00FEDC  20                 	db	32
  1427  00FEDD  41                 	db	65	;'A'
  1428  00FEDE  4C                 	db	76	;'L'
  1429  00FEDF  4C                 	db	76	;'L'
  1430  00FEE0  20                 	db	32
  1431  00FEE1  43                 	db	67	;'C'
  1432  00FEE2  41                 	db	65	;'A'
  1433  00FEE3  4E                 	db	78	;'N'
  1434  00FEE4  53                 	db	83	;'S'
  1435  00FEE5  00                 	db	0
  1436  00FEE6                     STR_95:
  1437  00FEE6  54                 	db	84	;'T'
  1438  00FEE7  53                 	db	83	;'S'
  1439  00FEE8  54                 	db	84	;'T'
  1440  00FEE9  3A                 	db	58	;':'
  1441  00FEEA  20                 	db	32
  1442  00FEEB  44                 	db	68	;'D'
  1443  00FEEC  43                 	db	67	;'C'
  1444  00FEED  20                 	db	32
  1445  00FEEE  4D                 	db	77	;'M'
  1446  00FEEF  4F                 	db	79	;'O'
  1447  00FEF0  54                 	db	84	;'T'
  1448  00FEF1  4F                 	db	79	;'O'
  1449  00FEF2  52                 	db	82	;'R'
  1450  00FEF3  53                 	db	83	;'S'
  1451  00FEF4  00                 	db	0
  1452  00FEF5                     STR_75:
  1453  00FEF5  41                 	db	65	;'A'
  1454  00FEF6  4C                 	db	76	;'L'
  1455  00FEF7  47                 	db	71	;'G'
  1456  00FEF8  4F                 	db	79	;'O'
  1457  00FEF9  52                 	db	82	;'R'
  1458  00FEFA  49                 	db	73	;'I'
  1459  00FEFB  54                 	db	84	;'T'
  1460  00FEFC  48                 	db	72	;'H'
  1461  00FEFD  4D                 	db	77	;'M'
  1462  00FEFE  20                 	db	32
  1463  00FEFF  54                 	db	84	;'T'
  1464  00FF00  45                 	db	69	;'E'
  1465  00FF01  53                 	db	83	;'S'
  1466  00FF02  54                 	db	84	;'T'
  1467  00FF03  00                 	db	0
  1468  00FF04                     STR_96:
  1469  00FF04  50                 	db	80	;'P'
  1470  00FF05  49                 	db	73	;'I'
  1471  00FF06  4E                 	db	78	;'N'
  1472  00FF07  20                 	db	32
  1473  00FF08  52                 	db	82	;'R'
  1474  00FF09  41                 	db	65	;'A'
  1475  00FF0A  35                 	db	53	;'5'
  1476  00FF0B  20                 	db	32
  1477  00FF0C  48                 	db	72	;'H'
  1478  00FF0D  49                 	db	73	;'I'
  1479  00FF0E  47                 	db	71	;'G'
  1480  00FF0F  48                 	db	72	;'H'
  1481  00FF10  2E                 	db	46
  1482  00FF11  00                 	db	0
  1483  00FF12                     STR_78:
  1484  00FF12  41                 	db	65	;'A'
  1485  00FF13  4C                 	db	76	;'L'
  1486  00FF14  47                 	db	71	;'G'
  1487  00FF15  32                 	db	50	;'2'
  1488  00FF16  3A                 	db	58	;':'
  1489  00FF17  20                 	db	32
  1490  00FF18  31                 	db	49	;'1'
  1491  00FF19  32                 	db	50	;'2'
  1492  00FF1A  20                 	db	32
  1493  00FF1B  43                 	db	67	;'C'
  1494  00FF1C  41                 	db	65	;'A'
  1495  00FF1D  4E                 	db	78	;'N'
  1496  00FF1E  53                 	db	83	;'S'
  1497  00FF1F  00                 	db	0
  1498  00FF20                     STR_81:
  1499  00FF20  41                 	db	65	;'A'
  1500  00FF21  4C                 	db	76	;'L'
  1501  00FF22  47                 	db	71	;'G'
  1502  00FF23  35                 	db	53	;'5'
  1503  00FF24  3A                 	db	58	;':'
  1504  00FF25  20                 	db	32
  1505  00FF26  4E                 	db	78	;'N'
  1506  00FF27  4F                 	db	79	;'O'
  1507  00FF28  20                 	db	32
  1508  00FF29  43                 	db	67	;'C'
  1509  00FF2A  41                 	db	65	;'A'
  1510  00FF2B  4E                 	db	78	;'N'
  1511  00FF2C  53                 	db	83	;'S'
  1512  00FF2D  00                 	db	0
  1513  00FF2E                     STR_76:
  1514  00FF2E  50                 	db	80	;'P'
  1515  00FF2F  55                 	db	85	;'U'
  1516  00FF30  53                 	db	83	;'S'
  1517  00FF31  48                 	db	72	;'H'
  1518  00FF32  20                 	db	32
  1519  00FF33  54                 	db	84	;'T'
  1520  00FF34  4F                 	db	79	;'O'
  1521  00FF35  20                 	db	32
  1522  00FF36  53                 	db	83	;'S'
  1523  00FF37  54                 	db	84	;'T'
  1524  00FF38  41                 	db	65	;'A'
  1525  00FF39  52                 	db	82	;'R'
  1526  00FF3A  54                 	db	84	;'T'
  1527  00FF3B  00                 	db	0
  1528  00FF3C                     STR_23:
  1529  00FF3C  25                 	db	37
  1530  00FF3D  64                 	db	100	;'d'
  1531  00FF3E  20                 	db	32
  1532  00FF3F  4D                 	db	77	;'M'
  1533  00FF40  49                 	db	73	;'I'
  1534  00FF41  4E                 	db	78	;'N'
  1535  00FF42  20                 	db	32
  1536  00FF43  25                 	db	37
  1537  00FF44  64                 	db	100	;'d'
  1538  00FF45  20                 	db	32
  1539  00FF46  53                 	db	83	;'S'
  1540  00FF47  45                 	db	69	;'E'
  1541  00FF48  43                 	db	67	;'C'
  1542  00FF49  00                 	db	0
  1543  00FF4A                     STR_2:
  1544  00FF4A  54                 	db	84	;'T'
  1545  00FF4B  49                 	db	73	;'I'
  1546  00FF4C  4D                 	db	77	;'M'
  1547  00FF4D  45                 	db	69	;'E'
  1548  00FF4E  3A                 	db	58	;':'
  1549  00FF4F  20                 	db	32
  1550  00FF50  25                 	db	37
  1551  00FF51  64                 	db	100	;'d'
  1552  00FF52  3A                 	db	58	;':'
  1553  00FF53  25                 	db	37
  1554  00FF54  30                 	db	48	;'0'
  1555  00FF55  32                 	db	50	;'2'
  1556  00FF56  64                 	db	100	;'d'
  1557  00FF57  00                 	db	0
  1558  00FF58                     STR_84:
  1559  00FF58  54                 	db	84	;'T'
  1560  00FF59  53                 	db	83	;'S'
  1561  00FF5A  54                 	db	84	;'T'
  1562  00FF5B  3A                 	db	58	;':'
  1563  00FF5C  20                 	db	32
  1564  00FF5D  49                 	db	73	;'I'
  1565  00FF5E  52                 	db	82	;'R'
  1566  00FF5F  20                 	db	32
  1567  00FF60  53                 	db	83	;'S'
  1568  00FF61  4E                 	db	78	;'N'
  1569  00FF62  53                 	db	83	;'S'
  1570  00FF63  52                 	db	82	;'R'
  1571  00FF64  00                 	db	0
  1572  00FF65                     STR_79:
  1573  00FF65  41                 	db	65	;'A'
  1574  00FF66  4C                 	db	76	;'L'
  1575  00FF67  47                 	db	71	;'G'
  1576  00FF68  33                 	db	51	;'3'
  1577  00FF69  3A                 	db	58	;':'
  1578  00FF6A  20                 	db	32
  1579  00FF6B  31                 	db	49	;'1'
  1580  00FF6C  20                 	db	32
  1581  00FF6D  43                 	db	67	;'C'
  1582  00FF6E  41                 	db	65	;'A'
  1583  00FF6F  4E                 	db	78	;'N'
  1584  00FF70  00                 	db	0
  1585  00FF71                     STR_98:
  1586  00FF71  50                 	db	80	;'P'
  1587  00FF72  49                 	db	73	;'I'
  1588  00FF73  4E                 	db	78	;'N'
  1589  00FF74  20                 	db	32
  1590  00FF75  52                 	db	82	;'R'
  1591  00FF76  41                 	db	65	;'A'
  1592  00FF77  33                 	db	51	;'3'
  1593  00FF78  2E                 	db	46
  1594  00FF79  2E                 	db	46
  1595  00FF7A  2E                 	db	46
  1596  00FF7B  00                 	db	0
  1597  00FF7C                     STR_100:
  1598  00FF7C  50                 	db	80	;'P'
  1599  00FF7D  49                 	db	73	;'I'
  1600  00FF7E  4E                 	db	78	;'N'
  1601  00FF7F  20                 	db	32
  1602  00FF80  52                 	db	82	;'R'
  1603  00FF81  41                 	db	65	;'A'
  1604  00FF82  34                 	db	52	;'4'
  1605  00FF83  2E                 	db	46
  1606  00FF84  2E                 	db	46
  1607  00FF85  2E                 	db	46
  1608  00FF86  00                 	db	0
  1609  00FF87                     STR_89:
  1610  00FF87  54                 	db	84	;'T'
  1611  00FF88  53                 	db	83	;'S'
  1612  00FF89  54                 	db	84	;'T'
  1613  00FF8A  3A                 	db	58	;':'
  1614  00FF8B  20                 	db	32
  1615  00FF8C  43                 	db	67	;'C'
  1616  00FF8D  4F                 	db	79	;'O'
  1617  00FF8E  4E                 	db	78	;'N'
  1618  00FF8F  44                 	db	68	;'D'
  1619  00FF90  00                 	db	0
  1620  00FF91                     STR_93:
  1621  00FF91  41                 	db	65	;'A'
  1622  00FF92  43                 	db	67	;'C'
  1623  00FF93  54                 	db	84	;'T'
  1624  00FF94  55                 	db	85	;'U'
  1625  00FF95  41                 	db	65	;'A'
  1626  00FF96  54                 	db	84	;'T'
  1627  00FF97  4F                 	db	79	;'O'
  1628  00FF98  52                 	db	82	;'R'
  1629  00FF99  53                 	db	83	;'S'
  1630  00FF9A  00                 	db	0
  1631  00FF9B                     STR_22:
  1632  00FF9B  44                 	db	68	;'D'
  1633  00FF9C  55                 	db	85	;'U'
  1634  00FF9D  52                 	db	82	;'R'
  1635  00FF9E  41                 	db	65	;'A'
  1636  00FF9F  54                 	db	84	;'T'
  1637  00FFA0  49                 	db	73	;'I'
  1638  00FFA1  4F                 	db	79	;'O'
  1639  00FFA2  4E                 	db	78	;'N'
  1640  00FFA3  3A                 	db	58	;':'
  1641  00FFA4  00                 	db	0
  1642  00FFA5                     STR_91:
  1643  00FFA5  43                 	db	67	;'C'
  1644  00FFA6  4F                 	db	79	;'O'
  1645  00FFA7  4E                 	db	78	;'N'
  1646  00FFA8  44                 	db	68	;'D'
  1647  00FFA9  3A                 	db	58	;':'
  1648  00FFAA  20                 	db	32
  1649  00FFAB  25                 	db	37
  1650  00FFAC  64                 	db	100	;'d'
  1651  00FFAD  00                 	db	0
  1652  00FFAE                     STR_82:
  1653  00FFAE  53                 	db	83	;'S'
  1654  00FFAF  45                 	db	69	;'E'
  1655  00FFB0  4E                 	db	78	;'N'
  1656  00FFB1  53                 	db	83	;'S'
  1657  00FFB2  4F                 	db	79	;'O'
  1658  00FFB3  52                 	db	82	;'R'
  1659  00FFB4  53                 	db	83	;'S'
  1660  00FFB5  00                 	db	0
  1661  00FFB6                     STR_135:
  1662  00FFB6  28                 	db	40
  1663  00FFB7  6E                 	db	110	;'n'
  1664  00FFB8  75                 	db	117	;'u'
  1665  00FFB9  6C                 	db	108	;'l'
  1666  00FFBA  6C                 	db	108	;'l'
  1667  00FFBB  29                 	db	41
  1668  00FFBC  00                 	db	0
  1669  00FFBD                     STR_72:
  1670  00FFBD  46                 	db	70	;'F'
  1671  00FFBE  41                 	db	65	;'A'
  1672  00FFBF  49                 	db	73	;'I'
  1673  00FFC0  4C                 	db	76	;'L'
  1674  00FFC1  45                 	db	69	;'E'
  1675  00FFC2  44                 	db	68	;'D'
  1676  00FFC3  00                 	db	0
  1677  00FFC4                     STR_7:
  1678  00FFC4  53                 	db	83	;'S'
  1679  00FFC5  54                 	db	84	;'T'
  1680  00FFC6  41                 	db	65	;'A'
  1681  00FFC7  52                 	db	82	;'R'
  1682  00FFC8  54                 	db	84	;'T'
  1683  00FFC9  3A                 	db	58	;':'
  1684  00FFCA  00                 	db	0
  1685  00FFCB                     STR_9:
  1686  00FFCB  46                 	db	70	;'F'
  1687  00FFCC  45                 	db	69	;'E'
  1688  00FFCD  42                 	db	66	;'B'
  1689  00FFCE  00                 	db	0
  1690  00FFCF                     STR_19:
  1691  00FFCF  44                 	db	68	;'D'
  1692  00FFD0  45                 	db	69	;'E'
  1693  00FFD1  43                 	db	67	;'C'
  1694  00FFD2  00                 	db	0
  1695  00FFD3                     STR_15:
  1696  00FFD3  41                 	db	65	;'A'
  1697  00FFD4  55                 	db	85	;'U'
  1698  00FFD5  47                 	db	71	;'G'
  1699  00FFD6  00                 	db	0
  1700  00FFD7                     STR_14:
  1701  00FFD7  4A                 	db	74	;'J'
  1702  00FFD8  55                 	db	85	;'U'
  1703  00FFD9  4C                 	db	76	;'L'
  1704  00FFDA  00                 	db	0
  1705  00FFDB                     STR_8:
  1706  00FFDB  4A                 	db	74	;'J'
  1707  00FFDC  41                 	db	65	;'A'
  1708  00FFDD  4E                 	db	78	;'N'
  1709  00FFDE  00                 	db	0
  1710  00FFDF                     STR_13:
  1711  00FFDF  4A                 	db	74	;'J'
  1712  00FFE0  55                 	db	85	;'U'
  1713  00FFE1  4E                 	db	78	;'N'
  1714  00FFE2  00                 	db	0
  1715  00FFE3                     STR_16:
  1716  00FFE3  53                 	db	83	;'S'
  1717  00FFE4  45                 	db	69	;'E'
  1718  00FFE5  50                 	db	80	;'P'
  1719  00FFE6  00                 	db	0
  1720  00FFE7                     STR_10:
  1721  00FFE7  4D                 	db	77	;'M'
  1722  00FFE8  41                 	db	65	;'A'
  1723  00FFE9  52                 	db	82	;'R'
  1724  00FFEA  00                 	db	0
  1725  00FFEB                     STR_11:
  1726  00FFEB  41                 	db	65	;'A'
  1727  00FFEC  50                 	db	80	;'P'
  1728  00FFED  52                 	db	82	;'R'
  1729  00FFEE  00                 	db	0
  1730  00FFEF                     STR_20:
  1731  00FFEF  45                 	db	69	;'E'
  1732  00FFF0  52                 	db	82	;'R'
  1733  00FFF1  52                 	db	82	;'R'
  1734  00FFF2  00                 	db	0
  1735  00FFF3                     STR_17:
  1736  00FFF3  4F                 	db	79	;'O'
  1737  00FFF4  43                 	db	67	;'C'
  1738  00FFF5  54                 	db	84	;'T'
  1739  00FFF6  00                 	db	0
  1740  00FFF7                     STR_18:
  1741  00FFF7  4E                 	db	78	;'N'
  1742  00FFF8  4F                 	db	79	;'O'
  1743  00FFF9  56                 	db	86	;'V'
  1744  00FFFA  00                 	db	0
  1745  00FFFB                     STR_12:
  1746  00FFFB  4D                 	db	77	;'M'
  1747  00FFFC  41                 	db	65	;'A'
  1748  00FFFD  59                 	db	89	;'Y'
  1749  00FFFE  00                 	db	0
  1750  0000                     
  1751                           ; #config settings
  1752  00FFFF  00                 	db	0	; dummy byte at the end
  1753  0000                     
  1754                           	psect	cinit
  1755  0054BE                     __pcinit:
  1756                           	opt stack 0
  1757  0054BE                     start_initialization:
  1758                           	opt stack 0
  1759  0054BE                     __initialization:
  1760                           	opt stack 0
  1761                           
  1762                           ; Initialize objects allocated to BANK1 (8 bytes)
  1763                           ; load TBLPTR registers with __pidataBANK1
  1764  0054BE  0EEE               	movlw	low __pidataBANK1
  1765  0054C0  6EF6               	movwf	tblptrl,c
  1766  0054C2  0E5C               	movlw	high __pidataBANK1
  1767  0054C4  6EF7               	movwf	tblptrh,c
  1768  0054C6  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1769  0054C8  6EF8               	movwf	tblptru,c
  1770  0054CA  EE01  F049         	lfsr	0,__pdataBANK1
  1771  0054CE  EE10 F008          	lfsr	1,8
  1772  0054D2                     copy_data0:
  1773  0054D2  0009               	tblrd		*+
  1774  0054D4  CFF5 FFEE          	movff	tablat,postinc0
  1775  0054D8  50E5               	movf	postdec1,w,c
  1776  0054DA  50E1               	movf	fsr1l,w,c
  1777  0054DC  E1FA               	bnz	copy_data0
  1778                           
  1779                           ; Clear objects allocated to BANK1 (73 bytes)
  1780  0054DE  EE01  F000         	lfsr	0,__pbssBANK1
  1781  0054E2  0E49               	movlw	73
  1782  0054E4                     clear_0:
  1783  0054E4  6AEE               	clrf	postinc0,c
  1784  0054E6  06E8               	decf	wreg,f,c
  1785  0054E8  E1FD               	bnz	clear_0
  1786                           
  1787                           ; Clear objects allocated to BANK0 (38 bytes)
  1788  0054EA  EE00  F0DA         	lfsr	0,__pbssBANK0
  1789  0054EE  0E26               	movlw	38
  1790  0054F0                     clear_1:
  1791  0054F0  6AEE               	clrf	postinc0,c
  1792  0054F2  06E8               	decf	wreg,f,c
  1793  0054F4  E1FD               	bnz	clear_1
  1794                           
  1795                           ; Clear objects allocated to COMRAM (35 bytes)
  1796  0054F6  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1797  0054FA  0E23               	movlw	35
  1798  0054FC                     clear_2:
  1799  0054FC  6AEE               	clrf	postinc0,c
  1800  0054FE  06E8               	decf	wreg,f,c
  1801  005500  E1FD               	bnz	clear_2
  1802  005502                     end_of_initialization:
  1803                           	opt stack 0
  1804  005502                     __end_of__initialization:
  1805                           	opt stack 0
  1806  005502  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1807  005504  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1808  005506  0100               	movlb	0
  1809  005508  EF2F  F024         	goto	_main	;jump to C main() function
  1810                           tblptru	equ	0xFF8
  1811                           tblptrh	equ	0xFF7
  1812                           tblptrl	equ	0xFF6
  1813                           tablat	equ	0xFF5
  1814                           postinc0	equ	0xFEE
  1815                           wreg	equ	0xFE8
  1816                           postdec1	equ	0xFE5
  1817                           fsr1l	equ	0xFE1
  1818                           
  1819                           	psect	bssCOMRAM
  1820  00005B                     __pbssCOMRAM:
  1821                           	opt stack 0
  1822  00005B                     _servoTimes:
  1823                           	opt stack 0
  1824  00005B                     	ds	8
  1825  000063                     _back:
  1826                           	opt stack 0
  1827  000063                     	ds	2
  1828  000065                     _down:
  1829                           	opt stack 0
  1830  000065                     	ds	2
  1831  000067                     _enter:
  1832                           	opt stack 0
  1833  000067                     	ds	2
  1834  000069                     _f_panning_to_bin:
  1835                           	opt stack 0
  1836  000069                     	ds	2
  1837  00006B                     _pan_servo_state:
  1838                           	opt stack 0
  1839  00006B                     	ds	2
  1840  00006D                     _servo_timer_counter:
  1841                           	opt stack 0
  1842  00006D                     	ds	2
  1843  00006F                     _servo_timer_target:
  1844                           	opt stack 0
  1845  00006F                     	ds	2
  1846  000071                     _tilt_servo_state:
  1847                           	opt stack 0
  1848  000071                     	ds	2
  1849  000073                     _timer2_counter:
  1850                           	opt stack 0
  1851  000073                     	ds	2
  1852  000075                     _up:
  1853                           	opt stack 0
  1854  000075                     	ds	2
  1855  000077                     _was_low_1:
  1856                           	opt stack 0
  1857  000077                     	ds	2
  1858  000079                     _was_low_2:
  1859                           	opt stack 0
  1860  000079                     	ds	2
  1861  00007B                     _was_low_3:
  1862                           	opt stack 0
  1863  00007B                     	ds	2
  1864  00007D                     _input:
  1865                           	opt stack 0
  1866  00007D                     	ds	1
  1867                           tblptru	equ	0xFF8
  1868                           tblptrh	equ	0xFF7
  1869                           tblptrl	equ	0xFF6
  1870                           tablat	equ	0xFF5
  1871                           postinc0	equ	0xFEE
  1872                           wreg	equ	0xFE8
  1873                           postdec1	equ	0xFE5
  1874                           fsr1l	equ	0xFE1
  1875                           
  1876                           	psect	bssBANK0
  1877  0000DA                     __pbssBANK0:
  1878                           	opt stack 0
  1879  0000DA                     _sensor_outputs:
  1880                           	opt stack 0
  1881  0000DA                     	ds	4
  1882  0000DE                     _COND_signal:
  1883                           	opt stack 0
  1884  0000DE                     	ds	2
  1885  0000E0                     _IR_signal:
  1886                           	opt stack 0
  1887  0000E0                     	ds	2
  1888  0000E2                     _MAG_signal:
  1889                           	opt stack 0
  1890  0000E2                     	ds	2
  1891  0000E4                     _RTCflag:
  1892                           	opt stack 0
  1893  0000E4                     	ds	2
  1894  0000E6                     _cur_state:
  1895                           	opt stack 0
  1896  0000E6                     	ds	2
  1897  0000E8                     _f_arm_position:
  1898                           	opt stack 0
  1899  0000E8                     	ds	2
  1900  0000EA                     _f_lastCan:
  1901                           	opt stack 0
  1902  0000EA                     	ds	2
  1903  0000EC                     _f_loadingNewCan:
  1904                           	opt stack 0
  1905  0000EC                     	ds	2
  1906  0000EE                     _log:
  1907                           	opt stack 0
  1908  0000EE                     	ds	2
  1909  0000F0                     _log_completion:
  1910                           	opt stack 0
  1911  0000F0                     	ds	2
  1912  0000F2                     _log_count_pop_no_tab:
  1913                           	opt stack 0
  1914  0000F2                     	ds	2
  1915  0000F4                     _log_count_pop_w_tab:
  1916                           	opt stack 0
  1917  0000F4                     	ds	2
  1918  0000F6                     _log_total_time:
  1919                           	opt stack 0
  1920  0000F6                     	ds	2
  1921  0000F8                     _logstate:
  1922                           	opt stack 0
  1923  0000F8                     	ds	2
  1924  0000FA                     _total_time:
  1925                           	opt stack 0
  1926  0000FA                     	ds	2
  1927  0000FC                     _machine_state:
  1928                           	opt stack 0
  1929  0000FC                     	ds	1
  1930  0000FD                     _sel:
  1931                           	opt stack 0
  1932  0000FD                     	ds	1
  1933  0000FE                     _count_total:
  1934                           	opt stack 0
  1935  0000FE                     	ds	2
  1936                           tblptru	equ	0xFF8
  1937                           tblptrh	equ	0xFF7
  1938                           tblptrl	equ	0xFF6
  1939                           tablat	equ	0xFF5
  1940                           postinc0	equ	0xFEE
  1941                           wreg	equ	0xFE8
  1942                           postdec1	equ	0xFE5
  1943                           fsr1l	equ	0xFE1
  1944                           
  1945                           	psect	bssBANK1
  1946  000100                     __pbssBANK1:
  1947                           	opt stack 0
  1948  000100                     _log_startTime:
  1949                           	opt stack 0
  1950  000100                     	ds	14
  1951  00010E                     _startTime:
  1952                           	opt stack 0
  1953  00010E                     	ds	14
  1954  00011C                     _time:
  1955                           	opt stack 0
  1956  00011C                     	ds	7
  1957  000123                     _count_can_no_lab:
  1958                           	opt stack 0
  1959  000123                     	ds	2
  1960  000125                     _count_can_w_lab:
  1961                           	opt stack 0
  1962  000125                     	ds	2
  1963  000127                     _count_pop_no_tab:
  1964                           	opt stack 0
  1965  000127                     	ds	2
  1966  000129                     _count_pop_w_tab:
  1967                           	opt stack 0
  1968  000129                     	ds	2
  1969  00012B                     _cur_can:
  1970                           	opt stack 0
  1971  00012B                     	ds	2
  1972  00012D                     _debug:
  1973                           	opt stack 0
  1974  00012D                     	ds	2
  1975  00012F                     _f_ID_receive:
  1976                           	opt stack 0
  1977  00012F                     	ds	2
  1978  000131                     _f_can_coming_to_ID:
  1979                           	opt stack 0
  1980  000131                     	ds	2
  1981  000133                     _f_can_coming_to_distribution:
  1982                           	opt stack 0
  1983  000133                     	ds	2
  1984  000135                     _f_can_distributed:
  1985                           	opt stack 0
  1986  000135                     	ds	2
  1987  000137                     _f_most_recent_sort_time:
  1988                           	opt stack 0
  1989  000137                     	ds	2
  1990  000139                     _first:
  1991                           	opt stack 0
  1992  000139                     	ds	2
  1993  00013B                     _firstboot:
  1994                           	opt stack 0
  1995  00013B                     	ds	2
  1996  00013D                     _i:
  1997                           	opt stack 0
  1998  00013D                     	ds	2
  1999  00013F                     _log_count_can_no_lab:
  2000                           	opt stack 0
  2001  00013F                     	ds	2
  2002  000141                     _log_count_can_w_lab:
  2003                           	opt stack 0
  2004  000141                     	ds	2
  2005  000143                     _log_count_total:
  2006                           	opt stack 0
  2007  000143                     	ds	2
  2008  000145                     _most_recent_sort_time:
  2009                           	opt stack 0
  2010  000145                     	ds	2
  2011  000147                     _var:
  2012                           	opt stack 0
  2013  000147                     	ds	2
  2014                           tblptru	equ	0xFF8
  2015                           tblptrh	equ	0xFF7
  2016                           tblptrl	equ	0xFF6
  2017                           tablat	equ	0xFF5
  2018                           postinc0	equ	0xFEE
  2019                           wreg	equ	0xFE8
  2020                           postdec1	equ	0xFE5
  2021                           fsr1l	equ	0xFE1
  2022                           
  2023                           	psect	dataBANK1
  2024  000149                     __pdataBANK1:
  2025                           	opt stack 0
  2026  000149                     UI@F3246:
  2027                           	opt stack 0
  2028  000149                     	ds	4
  2029  00014D                     printRTC@F3236:
  2030                           	opt stack 0
  2031  00014D                     	ds	4
  2032                           tblptru	equ	0xFF8
  2033                           tblptrh	equ	0xFF7
  2034                           tblptrl	equ	0xFF6
  2035                           tablat	equ	0xFF5
  2036                           postinc0	equ	0xFEE
  2037                           wreg	equ	0xFE8
  2038                           postdec1	equ	0xFE5
  2039                           fsr1l	equ	0xFE1
  2040                           
  2041                           	psect	cstackBANK0
  2042  000080                     __pcstackBANK0:
  2043                           	opt stack 0
  2044  000080                     ??_delay_ms:
  2045  000080                     ??_isdigit:
  2046  000080                     ??_readADC:
  2047  000080                     ??_I2C_Master_Wait:
  2048  000080                     ?___wmul:
  2049                           	opt stack 0
  2050  000080                     ?___awmod:
  2051                           	opt stack 0
  2052  000080                     ?___lwdiv:
  2053                           	opt stack 0
  2054  000080                     ?___ftpack:
  2055                           	opt stack 0
  2056  000080                     ?___lldiv:
  2057                           	opt stack 0
  2058  000080                     lcdNibble@temp:
  2059                           	opt stack 0
  2060  000080                     initTime@m:
  2061                           	opt stack 0
  2062  000080                     updateServoPosition@time_us:
  2063                           	opt stack 0
  2064  000080                     EEPROM_read@address:
  2065                           	opt stack 0
  2066  000080                     ___wmul@multiplier:
  2067                           	opt stack 0
  2068  000080                     ___awmod@dividend:
  2069                           	opt stack 0
  2070  000080                     ___lwdiv@dividend:
  2071                           	opt stack 0
  2072  000080                     strcpy@to:
  2073                           	opt stack 0
  2074  000080                     ___ftpack@arg:
  2075                           	opt stack 0
  2076  000080                     ___lldiv@dividend:
  2077                           	opt stack 0
  2078                           
  2079                           ; 4 bytes @ 0x0
  2080  000080                     	ds	1
  2081  000081                     readADC@channel:
  2082                           	opt stack 0
  2083  000081                     I2C_Master_Read@a:
  2084                           	opt stack 0
  2085  000081                     lcdNibble@data:
  2086                           	opt stack 0
  2087  000081                     initTime@h:
  2088                           	opt stack 0
  2089  000081                     delay_ms@milliseconds:
  2090                           	opt stack 0
  2091  000081                     _isdigit$2067:
  2092                           	opt stack 0
  2093  000081                     I2C_Master_Write@d:
  2094                           	opt stack 0
  2095                           
  2096                           ; 2 bytes @ 0x1
  2097  000081                     	ds	1
  2098  000082                     ??_readIR:
  2099  000082                     ??_readMAG:
  2100  000082                     ??_readCOND:
  2101  000082                     I2C_Master_Read@temp:
  2102                           	opt stack 0
  2103  000082                     lcdInst@data:
  2104                           	opt stack 0
  2105  000082                     putch@data:
  2106                           	opt stack 0
  2107  000082                     initTime@w:
  2108                           	opt stack 0
  2109  000082                     isdigit@c:
  2110                           	opt stack 0
  2111  000082                     updateServoPosition@timer:
  2112                           	opt stack 0
  2113  000082                     ___wmul@multiplicand:
  2114                           	opt stack 0
  2115  000082                     ___awmod@divisor:
  2116                           	opt stack 0
  2117  000082                     ___lwdiv@divisor:
  2118                           	opt stack 0
  2119  000082                     strcpy@from:
  2120                           	opt stack 0
  2121                           
  2122                           ; 2 bytes @ 0x2
  2123  000082                     	ds	1
  2124  000083                     ??_initLCD:
  2125  000083                     initTime@DD:
  2126                           	opt stack 0
  2127  000083                     ___ftpack@exp:
  2128                           	opt stack 0
  2129  000083                     getRTC@i:
  2130                           	opt stack 0
  2131                           
  2132                           ; 2 bytes @ 0x3
  2133  000083                     	ds	1
  2134  000084                     ??_updateServoPosition:
  2135  000084                     initTime@MM:
  2136                           	opt stack 0
  2137  000084                     ___awmod@counter:
  2138                           	opt stack 0
  2139  000084                     ___ftpack@sign:
  2140                           	opt stack 0
  2141  000084                     readIR@res:
  2142                           	opt stack 0
  2143  000084                     readMAG@res:
  2144                           	opt stack 0
  2145  000084                     readCOND@res:
  2146                           	opt stack 0
  2147  000084                     ___wmul@product:
  2148                           	opt stack 0
  2149  000084                     ___lwdiv@quotient:
  2150                           	opt stack 0
  2151  000084                     strcpy@cp:
  2152                           	opt stack 0
  2153  000084                     ___lldiv@divisor:
  2154                           	opt stack 0
  2155                           
  2156                           ; 4 bytes @ 0x4
  2157  000084                     	ds	1
  2158  000085                     ??_initSortTimer:
  2159  000085                     ??___ftpack:
  2160  000085                     initTime@YY:
  2161                           	opt stack 0
  2162  000085                     ___awmod@sign:
  2163                           	opt stack 0
  2164                           
  2165                           ; 1 bytes @ 0x5
  2166  000085                     	ds	1
  2167  000086                     ??_getIR:
  2168  000086                     ??_getMAG:
  2169  000086                     ?___awdiv:
  2170                           	opt stack 0
  2171  000086                     initTime@s:
  2172                           	opt stack 0
  2173  000086                     ___lwdiv@counter:
  2174                           	opt stack 0
  2175  000086                     updateServoPosition@my_time:
  2176                           	opt stack 0
  2177  000086                     ___awdiv@dividend:
  2178                           	opt stack 0
  2179                           
  2180                           ; 2 bytes @ 0x6
  2181  000086                     	ds	1
  2182  000087                     ?___lwmod:
  2183                           	opt stack 0
  2184  000087                     getIR@i:
  2185                           	opt stack 0
  2186  000087                     ___lwmod@dividend:
  2187                           	opt stack 0
  2188                           
  2189                           ; 2 bytes @ 0x7
  2190  000087                     	ds	1
  2191  000088                     ??_Distribution:
  2192  000088                     ??_initServos:
  2193  000088                     initSortTimer@i:
  2194                           	opt stack 0
  2195  000088                     ___awdiv@divisor:
  2196                           	opt stack 0
  2197  000088                     ___lldiv@quotient:
  2198                           	opt stack 0
  2199                           
  2200                           ; 4 bytes @ 0x8
  2201  000088                     	ds	1
  2202  000089                     ___lwmod@divisor:
  2203                           	opt stack 0
  2204                           
  2205                           ; 2 bytes @ 0x9
  2206  000089                     	ds	1
  2207  00008A                     ___awdiv@counter:
  2208                           	opt stack 0
  2209                           
  2210                           ; 1 bytes @ 0xA
  2211  00008A                     	ds	1
  2212  00008B                     ___awdiv@sign:
  2213                           	opt stack 0
  2214  00008B                     ___lwmod@counter:
  2215                           	opt stack 0
  2216                           
  2217                           ; 1 bytes @ 0xB
  2218  00008B                     	ds	1
  2219  00008C                     ___lldiv@counter:
  2220                           	opt stack 0
  2221  00008C                     ___awdiv@quotient:
  2222                           	opt stack 0
  2223                           
  2224                           ; 2 bytes @ 0xC
  2225  00008C                     	ds	1
  2226  00008D                     I2C_Master_Init@c:
  2227                           	opt stack 0
  2228                           
  2229                           ; 4 bytes @ 0xD
  2230  00008D                     	ds	1
  2231  00008E                     ?_printf:
  2232                           	opt stack 0
  2233  00008E                     ?___awtoft:
  2234                           	opt stack 0
  2235  00008E                     printf@f:
  2236                           	opt stack 0
  2237  00008E                     ___awtoft@c:
  2238                           	opt stack 0
  2239                           
  2240                           ; 2 bytes @ 0xE
  2241  00008E                     	ds	3
  2242  000091                     ??_I2C_Master_Init:
  2243  000091                     ___awtoft@sign:
  2244                           	opt stack 0
  2245                           
  2246                           ; 1 bytes @ 0x11
  2247  000091                     	ds	1
  2248  000092                     ___ftge@ff1:
  2249                           	opt stack 0
  2250                           
  2251                           ; 3 bytes @ 0x12
  2252  000092                     	ds	3
  2253  000095                     ??_loadRTC:
  2254  000095                     ___ftge@ff2:
  2255                           	opt stack 0
  2256                           
  2257                           ; 3 bytes @ 0x15
  2258  000095                     	ds	1
  2259  000096                     loadRTC@i:
  2260                           	opt stack 0
  2261                           
  2262                           ; 2 bytes @ 0x16
  2263  000096                     	ds	2
  2264  000098                     ??___ftge:
  2265                           
  2266                           ; 1 bytes @ 0x18
  2267  000098                     	ds	2
  2268  00009A                     ??_printf:
  2269                           
  2270                           ; 1 bytes @ 0x1A
  2271  00009A                     	ds	4
  2272  00009E                     printf@prec:
  2273                           	opt stack 0
  2274                           
  2275                           ; 1 bytes @ 0x1E
  2276  00009E                     	ds	1
  2277  00009F                     printf@cp:
  2278                           	opt stack 0
  2279                           
  2280                           ; 2 bytes @ 0x1F
  2281  00009F                     	ds	2
  2282  0000A1                     printf@ap:
  2283                           	opt stack 0
  2284                           
  2285                           ; 2 bytes @ 0x21
  2286  0000A1                     	ds	2
  2287  0000A3                     printf@len:
  2288                           	opt stack 0
  2289                           
  2290                           ; 2 bytes @ 0x23
  2291  0000A3                     	ds	2
  2292  0000A5                     printf@val:
  2293                           	opt stack 0
  2294                           
  2295                           ; 2 bytes @ 0x25
  2296  0000A5                     	ds	2
  2297  0000A7                     printf@flag:
  2298                           	opt stack 0
  2299                           
  2300                           ; 1 bytes @ 0x27
  2301  0000A7                     	ds	1
  2302  0000A8                     printf@c:
  2303                           	opt stack 0
  2304                           
  2305                           ; 1 bytes @ 0x28
  2306  0000A8                     	ds	1
  2307  0000A9                     printf@width:
  2308                           	opt stack 0
  2309                           
  2310                           ; 2 bytes @ 0x29
  2311  0000A9                     	ds	2
  2312  0000AB                     ??_printRTC:
  2313  0000AB                     ??_ID:
  2314  0000AB                     ??_algorithmTest:
  2315  0000AB                     ??_sensorTest:
  2316  0000AB                     ??_actuatorTest:
  2317  0000AB                     ??_arm:
  2318  0000AB                     ??_PortTestDC:
  2319  0000AB                     ??_SpeedTest:
  2320  0000AB                     ??_PortTestPusher:
  2321  0000AB                     ??_PlatformTest:
  2322  0000AB                     ??_BothServos:
  2323  0000AB                     ??_BlockerTest:
  2324  0000AB                     EEPROM_write@address:
  2325                           	opt stack 0
  2326                           
  2327                           ; 2 bytes @ 0x2B
  2328  0000AB                     	ds	1
  2329  0000AC                     arm@on:
  2330                           	opt stack 0
  2331                           
  2332                           ; 2 bytes @ 0x2C
  2333  0000AC                     	ds	1
  2334  0000AD                     _ID$1142:
  2335                           	opt stack 0
  2336  0000AD                     EEPROM_write@data:
  2337                           	opt stack 0
  2338  0000AD                     actuatorTest@i_1738:
  2339                           	opt stack 0
  2340  0000AD                     sensorTest@res:
  2341                           	opt stack 0
  2342  0000AD                     PlatformTest@res:
  2343                           	opt stack 0
  2344  0000AD                     BlockerTest@i:
  2345                           	opt stack 0
  2346                           
  2347                           ; 2 bytes @ 0x2D
  2348  0000AD                     	ds	1
  2349  0000AE                     ??_EEPROM_write:
  2350  0000AE                     _ID$1144:
  2351                           	opt stack 0
  2352  0000AE                     actuatorTest@i_1745:
  2353                           	opt stack 0
  2354  0000AE                     printRTC@INT_time:
  2355                           	opt stack 0
  2356                           
  2357                           ; 14 bytes @ 0x2E
  2358  0000AE                     	ds	1
  2359  0000AF                     EEPROM_write@i:
  2360                           	opt stack 0
  2361  0000AF                     actuatorTest@i_1746:
  2362                           	opt stack 0
  2363  0000AF                     ID@i:
  2364                           	opt stack 0
  2365  0000AF                     PlatformTest@res_1790:
  2366                           	opt stack 0
  2367  0000AF                     BlockerTest@res:
  2368                           	opt stack 0
  2369                           
  2370                           ; 2 bytes @ 0x2F
  2371  0000AF                     	ds	1
  2372  0000B0                     EEPROM_write@i_1406:
  2373                           	opt stack 0
  2374  0000B0                     actuatorTest@i_1748:
  2375                           	opt stack 0
  2376                           
  2377                           ; 1 bytes @ 0x30
  2378  0000B0                     	ds	1
  2379  0000B1                     ??_Loading:
  2380  0000B1                     logRun@num:
  2381                           	opt stack 0
  2382  0000B1                     actuatorTest@i_1749:
  2383                           	opt stack 0
  2384  0000B1                     ID@i_1141:
  2385                           	opt stack 0
  2386  0000B1                     PlatformTest@i:
  2387                           	opt stack 0
  2388  0000B1                     BlockerTest@cam_flag:
  2389                           	opt stack 0
  2390                           
  2391                           ; 2 bytes @ 0x31
  2392  0000B1                     	ds	1
  2393  0000B2                     logRun@byte1:
  2394                           	opt stack 0
  2395  0000B2                     actuatorTest@i_1751:
  2396                           	opt stack 0
  2397                           
  2398                           ; 1 bytes @ 0x32
  2399  0000B2                     	ds	1
  2400  0000B3                     logRun@byte2:
  2401                           	opt stack 0
  2402  0000B3                     actuatorTest@i_1752:
  2403                           	opt stack 0
  2404  0000B3                     Loading@addr:
  2405                           	opt stack 0
  2406  0000B3                     ID@i_1143:
  2407                           	opt stack 0
  2408  0000B3                     PlatformTest@i_1794:
  2409                           	opt stack 0
  2410  0000B3                     BlockerTest@cond_flag:
  2411                           	opt stack 0
  2412                           
  2413                           ; 2 bytes @ 0x33
  2414  0000B3                     	ds	1
  2415  0000B4                     logRun@byte3:
  2416                           	opt stack 0
  2417  0000B4                     actuatorTest@i_1754:
  2418                           	opt stack 0
  2419                           
  2420                           ; 1 bytes @ 0x34
  2421  0000B4                     	ds	1
  2422  0000B5                     Loading@byte1:
  2423                           	opt stack 0
  2424  0000B5                     logRun@byte_i:
  2425                           	opt stack 0
  2426  0000B5                     actuatorTest@i_1755:
  2427                           	opt stack 0
  2428  0000B5                     ID@i_1146:
  2429                           	opt stack 0
  2430  0000B5                     PlatformTest@on:
  2431                           	opt stack 0
  2432                           
  2433                           ; 2 bytes @ 0x35
  2434  0000B5                     	ds	1
  2435  0000B6                     logRun@byte11:
  2436                           	opt stack 0
  2437  0000B6                     actuatorTest@i_1757:
  2438                           	opt stack 0
  2439  0000B6                     Loading@i_1118:
  2440                           	opt stack 0
  2441                           
  2442                           ; 2 bytes @ 0x36
  2443  0000B6                     	ds	1
  2444  0000B7                     actuatorTest@i_1758:
  2445                           	opt stack 0
  2446  0000B7                     ID@i_1147:
  2447                           	opt stack 0
  2448  0000B7                     logRun@i:
  2449                           	opt stack 0
  2450                           
  2451                           ; 2 bytes @ 0x37
  2452  0000B7                     	ds	1
  2453  0000B8                     actuatorTest@i_1760:
  2454                           	opt stack 0
  2455  0000B8                     Loading@i_1127:
  2456                           	opt stack 0
  2457                           
  2458                           ; 2 bytes @ 0x38
  2459  0000B8                     	ds	1
  2460  0000B9                     ID@time:
  2461                           	opt stack 0
  2462  0000B9                     actuatorTest@i_1761:
  2463                           	opt stack 0
  2464  0000B9                     logRun@addr:
  2465                           	opt stack 0
  2466                           
  2467                           ; 2 bytes @ 0x39
  2468  0000B9                     	ds	1
  2469  0000BA                     actuatorTest@i_1764:
  2470                           	opt stack 0
  2471  0000BA                     Loading@i_1129:
  2472                           	opt stack 0
  2473  0000BA                     ID@res1:
  2474                           	opt stack 0
  2475                           
  2476                           ; 2 bytes @ 0x3A
  2477  0000BA                     	ds	1
  2478  0000BB                     actuatorTest@i_1765:
  2479                           	opt stack 0
  2480                           
  2481                           ; 1 bytes @ 0x3B
  2482  0000BB                     	ds	1
  2483  0000BC                     actuatorTest@i_1767:
  2484                           	opt stack 0
  2485  0000BC                     printRTC@RTC_month:
  2486                           	opt stack 0
  2487  0000BC                     Loading@i_1130:
  2488                           	opt stack 0
  2489  0000BC                     ID@res2:
  2490                           	opt stack 0
  2491                           
  2492                           ; 2 bytes @ 0x3C
  2493  0000BC                     	ds	1
  2494  0000BD                     actuatorTest@i_1768:
  2495                           	opt stack 0
  2496                           
  2497                           ; 1 bytes @ 0x3D
  2498  0000BD                     	ds	1
  2499  0000BE                     actuatorTest@i_1770:
  2500                           	opt stack 0
  2501  0000BE                     Loading@i_1132:
  2502                           	opt stack 0
  2503  0000BE                     ID@res3:
  2504                           	opt stack 0
  2505  0000BE                     printRTC@month:
  2506                           	opt stack 0
  2507                           
  2508                           ; 4 bytes @ 0x3E
  2509  0000BE                     	ds	1
  2510  0000BF                     actuatorTest@i_1771:
  2511                           	opt stack 0
  2512                           
  2513                           ; 1 bytes @ 0x3F
  2514  0000BF                     	ds	1
  2515  0000C0                     actuatorTest@i_1774:
  2516                           	opt stack 0
  2517  0000C0                     Loading@i:
  2518                           	opt stack 0
  2519  0000C0                     ID@n:
  2520                           	opt stack 0
  2521                           
  2522                           ; 2 bytes @ 0x40
  2523  0000C0                     	ds	1
  2524  0000C1                     actuatorTest@i_1775:
  2525                           	opt stack 0
  2526                           
  2527                           ; 1 bytes @ 0x41
  2528  0000C1                     	ds	1
  2529  0000C2                     actuatorTest@i_1777:
  2530                           	opt stack 0
  2531  0000C2                     printRTC@i:
  2532                           	opt stack 0
  2533  0000C2                     Loading@j:
  2534                           	opt stack 0
  2535                           
  2536                           ; 2 bytes @ 0x42
  2537  0000C2                     	ds	1
  2538  0000C3                     actuatorTest@i_1778:
  2539                           	opt stack 0
  2540                           
  2541                           ; 1 bytes @ 0x43
  2542  0000C3                     	ds	1
  2543  0000C4                     ??_UI:
  2544  0000C4                     actuatorTest@i:
  2545                           	opt stack 0
  2546                           
  2547                           ; 2 bytes @ 0x44
  2548  0000C4                     	ds	2
  2549  0000C6                     ??_Test:
  2550  0000C6                     _UI$2432:
  2551                           	opt stack 0
  2552                           
  2553                           ; 2 bytes @ 0x46
  2554  0000C6                     	ds	2
  2555  0000C8                     UI@i:
  2556                           	opt stack 0
  2557                           
  2558                           ; 1 bytes @ 0x48
  2559  0000C8                     	ds	1
  2560  0000C9                     UI@i_412:
  2561                           	opt stack 0
  2562                           
  2563                           ; 1 bytes @ 0x49
  2564  0000C9                     	ds	1
  2565  0000CA                     UI@i_415:
  2566                           	opt stack 0
  2567                           
  2568                           ; 1 bytes @ 0x4A
  2569  0000CA                     	ds	1
  2570  0000CB                     UI@i_416:
  2571                           	opt stack 0
  2572                           
  2573                           ; 1 bytes @ 0x4B
  2574  0000CB                     	ds	1
  2575  0000CC                     UI@i_434:
  2576                           	opt stack 0
  2577                           
  2578                           ; 1 bytes @ 0x4C
  2579  0000CC                     	ds	1
  2580  0000CD                     UI@i_435:
  2581                           	opt stack 0
  2582                           
  2583                           ; 1 bytes @ 0x4D
  2584  0000CD                     	ds	1
  2585  0000CE                     UI@i_438:
  2586                           	opt stack 0
  2587                           
  2588                           ; 1 bytes @ 0x4E
  2589  0000CE                     	ds	1
  2590  0000CF                     UI@i_439:
  2591                           	opt stack 0
  2592                           
  2593                           ; 1 bytes @ 0x4F
  2594  0000CF                     	ds	1
  2595  0000D0                     UI@i_442:
  2596                           	opt stack 0
  2597                           
  2598                           ; 1 bytes @ 0x50
  2599  0000D0                     	ds	1
  2600  0000D1                     UI@i_443:
  2601                           	opt stack 0
  2602                           
  2603                           ; 1 bytes @ 0x51
  2604  0000D1                     	ds	1
  2605  0000D2                     UI@i_446:
  2606                           	opt stack 0
  2607                           
  2608                           ; 1 bytes @ 0x52
  2609  0000D2                     	ds	1
  2610  0000D3                     UI@i_447:
  2611                           	opt stack 0
  2612                           
  2613                           ; 1 bytes @ 0x53
  2614  0000D3                     	ds	1
  2615  0000D4                     UI@i_450:
  2616                           	opt stack 0
  2617                           
  2618                           ; 1 bytes @ 0x54
  2619  0000D4                     	ds	1
  2620  0000D5                     UI@i_451:
  2621                           	opt stack 0
  2622                           
  2623                           ; 1 bytes @ 0x55
  2624  0000D5                     	ds	1
  2625  0000D6                     UI@month:
  2626                           	opt stack 0
  2627                           
  2628                           ; 4 bytes @ 0x56
  2629  0000D6                     	ds	4
  2630  0000DA                     tblptru	equ	0xFF8
  2631                           tblptrh	equ	0xFF7
  2632                           tblptrl	equ	0xFF6
  2633                           tablat	equ	0xFF5
  2634                           postinc0	equ	0xFEE
  2635                           wreg	equ	0xFE8
  2636                           postdec1	equ	0xFE5
  2637                           fsr1l	equ	0xFE1
  2638                           
  2639                           ; 1 bytes @ 0x5A
  2640                           
  2641                           	psect	cstackCOMRAM
  2642  000001                     __pcstackCOMRAM:
  2643                           	opt stack 0
  2644  000001                     ??_updateArmState:
  2645  000001                     ??i2_I2C_Master_Wait:
  2646  000001                     ??i2_delay_ms:
  2647  000001                     ??i2_isdigit:
  2648  000001                     ?i2___wmul:
  2649                           	opt stack 0
  2650  000001                     ?i2___lwmod:
  2651                           	opt stack 0
  2652  000001                     i2lcdNibble@temp:
  2653                           	opt stack 0
  2654  000001                     i2updateServoPosition@time_us:
  2655                           	opt stack 0
  2656  000001                     i2EEPROM_read@address:
  2657                           	opt stack 0
  2658  000001                     i2___wmul@multiplier:
  2659                           	opt stack 0
  2660  000001                     i2___lwmod@dividend:
  2661                           	opt stack 0
  2662  000001                     i2strcpy@to:
  2663                           	opt stack 0
  2664                           
  2665                           ; 2 bytes @ 0x0
  2666  000001                     	ds	1
  2667  000002                     i2I2C_Master_Read@a:
  2668                           	opt stack 0
  2669  000002                     i2lcdNibble@data:
  2670                           	opt stack 0
  2671  000002                     i2delay_ms@milliseconds:
  2672                           	opt stack 0
  2673  000002                     i2_isdigit$2067:
  2674                           	opt stack 0
  2675  000002                     i2I2C_Master_Write@d:
  2676                           	opt stack 0
  2677                           
  2678                           ; 2 bytes @ 0x1
  2679  000002                     	ds	1
  2680  000003                     i2I2C_Master_Read@temp:
  2681                           	opt stack 0
  2682  000003                     i2lcdInst@data:
  2683                           	opt stack 0
  2684  000003                     i2putch@data:
  2685                           	opt stack 0
  2686  000003                     i2isdigit@c:
  2687                           	opt stack 0
  2688  000003                     i2updateServoPosition@timer:
  2689                           	opt stack 0
  2690  000003                     i2___wmul@multiplicand:
  2691                           	opt stack 0
  2692  000003                     i2___lwmod@divisor:
  2693                           	opt stack 0
  2694  000003                     i2strcpy@from:
  2695                           	opt stack 0
  2696                           
  2697                           ; 2 bytes @ 0x2
  2698  000003                     	ds	1
  2699  000004                     i2getRTC@i:
  2700                           	opt stack 0
  2701                           
  2702                           ; 2 bytes @ 0x3
  2703  000004                     	ds	1
  2704  000005                     ??i2_updateServoPosition:
  2705  000005                     i2___lwmod@counter:
  2706                           	opt stack 0
  2707  000005                     i2___wmul@product:
  2708                           	opt stack 0
  2709  000005                     i2strcpy@cp:
  2710                           	opt stack 0
  2711                           
  2712                           ; 2 bytes @ 0x4
  2713  000005                     	ds	1
  2714  000006                     ?i2___lwdiv:
  2715                           	opt stack 0
  2716  000006                     i2___lwdiv@dividend:
  2717                           	opt stack 0
  2718                           
  2719                           ; 2 bytes @ 0x5
  2720  000006                     	ds	1
  2721  000007                     retrieveLog@logNum:
  2722                           	opt stack 0
  2723  000007                     i2updateServoPosition@my_time:
  2724                           	opt stack 0
  2725                           
  2726                           ; 2 bytes @ 0x6
  2727  000007                     	ds	1
  2728  000008                     i2___lwdiv@divisor:
  2729                           	opt stack 0
  2730                           
  2731                           ; 2 bytes @ 0x7
  2732  000008                     	ds	1
  2733  000009                     ??_retrieveLog:
  2734  000009                     ??_updateServoStates:
  2735                           
  2736                           ; 1 bytes @ 0x8
  2737  000009                     	ds	1
  2738  00000A                     i2___lwdiv@quotient:
  2739                           	opt stack 0
  2740                           
  2741                           ; 2 bytes @ 0x9
  2742  00000A                     	ds	1
  2743  00000B                     retrieveLog@byte1:
  2744                           	opt stack 0
  2745                           
  2746                           ; 1 bytes @ 0xA
  2747  00000B                     	ds	1
  2748  00000C                     retrieveLog@byte2:
  2749                           	opt stack 0
  2750  00000C                     i2___lwdiv@counter:
  2751                           	opt stack 0
  2752                           
  2753                           ; 1 bytes @ 0xB
  2754  00000C                     	ds	1
  2755  00000D                     ?i2_printf:
  2756                           	opt stack 0
  2757  00000D                     retrieveLog@byte3:
  2758                           	opt stack 0
  2759  00000D                     i2printf@f:
  2760                           	opt stack 0
  2761                           
  2762                           ; 2 bytes @ 0xC
  2763  00000D                     	ds	1
  2764  00000E                     retrieveLog@i:
  2765                           	opt stack 0
  2766                           
  2767                           ; 2 bytes @ 0xD
  2768  00000E                     	ds	2
  2769  000010                     retrieveLog@addr:
  2770                           	opt stack 0
  2771                           
  2772                           ; 2 bytes @ 0xF
  2773  000010                     	ds	2
  2774  000012                     dispLogs@myLog:
  2775                           	opt stack 0
  2776                           
  2777                           ; 2 bytes @ 0x11
  2778  000012                     	ds	2
  2779  000014                     
  2780                           ; 1 bytes @ 0x13
  2781  000014                     	ds	5
  2782  000019                     ??i2_printf:
  2783                           
  2784                           ; 1 bytes @ 0x18
  2785  000019                     	ds	4
  2786  00001D                     i2printf@prec:
  2787                           	opt stack 0
  2788                           
  2789                           ; 1 bytes @ 0x1C
  2790  00001D                     	ds	1
  2791  00001E                     i2printf@cp:
  2792                           	opt stack 0
  2793                           
  2794                           ; 2 bytes @ 0x1D
  2795  00001E                     	ds	2
  2796  000020                     i2printf@ap:
  2797                           	opt stack 0
  2798                           
  2799                           ; 2 bytes @ 0x1F
  2800  000020                     	ds	2
  2801  000022                     i2printf@len:
  2802                           	opt stack 0
  2803                           
  2804                           ; 2 bytes @ 0x21
  2805  000022                     	ds	2
  2806  000024                     i2printf@val:
  2807                           	opt stack 0
  2808                           
  2809                           ; 2 bytes @ 0x23
  2810  000024                     	ds	2
  2811  000026                     i2printf@flag:
  2812                           	opt stack 0
  2813                           
  2814                           ; 1 bytes @ 0x25
  2815  000026                     	ds	1
  2816  000027                     i2printf@c:
  2817                           	opt stack 0
  2818                           
  2819                           ; 1 bytes @ 0x26
  2820  000027                     	ds	1
  2821  000028                     i2printf@width:
  2822                           	opt stack 0
  2823                           
  2824                           ; 2 bytes @ 0x27
  2825  000028                     	ds	2
  2826  00002A                     ??_printSortTimer:
  2827  00002A                     ??i2_printRTC:
  2828  00002A                     ?_inputHandler:
  2829                           	opt stack 0
  2830                           
  2831                           ; 2 bytes @ 0x29
  2832  00002A                     	ds	2
  2833  00002C                     ??_inputHandler:
  2834                           
  2835                           ; 1 bytes @ 0x2B
  2836  00002C                     	ds	1
  2837  00002D                     printSortTimer@curTime:
  2838                           	opt stack 0
  2839  00002D                     i2printRTC@INT_time:
  2840                           	opt stack 0
  2841                           
  2842                           ; 14 bytes @ 0x2C
  2843  00002D                     	ds	14
  2844  00003B                     printSortTimer@start_sec:
  2845                           	opt stack 0
  2846  00003B                     i2printRTC@RTC_month:
  2847                           	opt stack 0
  2848                           
  2849                           ; 2 bytes @ 0x3A
  2850  00003B                     	ds	2
  2851  00003D                     printSortTimer@cur_sec:
  2852                           	opt stack 0
  2853  00003D                     i2printRTC@month:
  2854                           	opt stack 0
  2855                           
  2856                           ; 4 bytes @ 0x3C
  2857  00003D                     	ds	2
  2858  00003F                     _printSortTimer$2564:
  2859                           	opt stack 0
  2860                           
  2861                           ; 2 bytes @ 0x3E
  2862  00003F                     	ds	2
  2863  000041                     printSortTimer@timeDiff:
  2864                           	opt stack 0
  2865  000041                     i2printRTC@i:
  2866                           	opt stack 0
  2867                           
  2868                           ; 2 bytes @ 0x40
  2869  000041                     	ds	2
  2870  000043                     ??_updateMenu:
  2871  000043                     printSortTimer@i_1167:
  2872                           	opt stack 0
  2873                           
  2874                           ; 2 bytes @ 0x42
  2875  000043                     	ds	2
  2876  000045                     printSortTimer@min:
  2877                           	opt stack 0
  2878                           
  2879                           ; 2 bytes @ 0x44
  2880  000045                     	ds	2
  2881  000047                     printSortTimer@i:
  2882                           	opt stack 0
  2883                           
  2884                           ; 2 bytes @ 0x46
  2885  000047                     	ds	2
  2886  000049                     printSortTimer@sec:
  2887                           	opt stack 0
  2888                           
  2889                           ; 2 bytes @ 0x48
  2890  000049                     	ds	2
  2891  00004B                     ??_handler:
  2892                           
  2893                           ; 1 bytes @ 0x4A
  2894  00004B                     	ds	16
  2895                           tblptru	equ	0xFF8
  2896                           tblptrh	equ	0xFF7
  2897                           tblptrl	equ	0xFF6
  2898                           tablat	equ	0xFF5
  2899                           postinc0	equ	0xFEE
  2900                           wreg	equ	0xFE8
  2901                           postdec1	equ	0xFE5
  2902                           fsr1l	equ	0xFE1
  2903                           
  2904 ;;
  2905 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2906 ;;
  2907 ;; *************** function _main *****************
  2908 ;; Defined at:
  2909 ;;		line 19 in file "main.c"
  2910 ;; Parameters:    Size  Location     Type
  2911 ;;		None
  2912 ;; Auto vars:     Size  Location     Type
  2913 ;;		None
  2914 ;; Return value:  Size  Location     Type
  2915 ;;                  1    wreg      void 
  2916 ;; Registers used:
  2917 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2918 ;; Tracked objects:
  2919 ;;		On entry : 0/0
  2920 ;;		On exit  : 0/0
  2921 ;;		Unchanged: 0/0
  2922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2926 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2927 ;;Total ram usage:        0 bytes
  2928 ;; Hardware stack levels required when called:   13
  2929 ;; This function calls:
  2930 ;;		_I2C_Master_Init
  2931 ;;		_Test
  2932 ;;		_UI
  2933 ;;		_initEEPROM
  2934 ;;		_initLCD
  2935 ;;		_initTime
  2936 ;;		_initUI
  2937 ;;		_logRun
  2938 ;;		_machineConfig
  2939 ;;		_sort
  2940 ;;		_stopSignals
  2941 ;; This function is called by:
  2942 ;;		Startup code after reset
  2943 ;; This function uses a non-reentrant model
  2944 ;;
  2945                           
  2946                           	psect	text0
  2947  00485E                     __ptext0:
  2948                           	opt stack 0
  2949  00485E                     _main:
  2950                           	opt stack 18
  2951                           
  2952                           ;main.c: 20: machineConfig();
  2953                           
  2954                           ;incstack = 0
  2955  00485E  EC1A  F029         	call	_machineConfig	;wreg free
  2956                           
  2957                           ;main.c: 21: initLCD();
  2958  004862  ECF8  F02A         	call	_initLCD	;wreg free
  2959                           
  2960                           ;main.c: 24: RTCflag = 0;
  2961  004866  0E00               	movlw	0
  2962  004868  0100               	movlb	0	; () banked
  2963  00486A  6FE5               	movwf	(_RTCflag+1)& (0+255),b
  2964  00486C  0E00               	movlw	0
  2965  00486E  6FE4               	movwf	_RTCflag& (0+255),b
  2966                           
  2967                           ;main.c: 25: if(RTCflag){
  2968  004870  0100               	movlb	0	; () banked
  2969  004872  51E4               	movf	_RTCflag& (0+255),w,b
  2970  004874  0100               	movlb	0	; () banked
  2971  004876  11E5               	iorwf	(_RTCflag+1)& (0+255),w,b
  2972  004878  B4D8               	btfsc	status,2,c
  2973  00487A  D016               	goto	l10183
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;main.c: 26: initTime(0x42, 0x47, 0x17, 0x07, 0x08, 0x04, 0x17);
  2977  00487C  0E47               	movlw	71
  2978  00487E  0100               	movlb	0	; () banked
  2979  004880  6F80               	movwf	initTime@m& (0+255),b
  2980  004882  0E17               	movlw	23
  2981  004884  0100               	movlb	0	; () banked
  2982  004886  6F81               	movwf	initTime@h& (0+255),b
  2983  004888  0E07               	movlw	7
  2984  00488A  0100               	movlb	0	; () banked
  2985  00488C  6F82               	movwf	initTime@w& (0+255),b
  2986  00488E  0E08               	movlw	8
  2987  004890  0100               	movlb	0	; () banked
  2988  004892  6F83               	movwf	initTime@DD& (0+255),b
  2989  004894  0E04               	movlw	4
  2990  004896  0100               	movlb	0	; () banked
  2991  004898  6F84               	movwf	initTime@MM& (0+255),b
  2992  00489A  0E17               	movlw	23
  2993  00489C  0100               	movlb	0	; () banked
  2994  00489E  6F85               	movwf	initTime@YY& (0+255),b
  2995  0048A0  0E42               	movlw	66
  2996  0048A2  ECEB  F02D         	call	_initTime
  2997                           
  2998                           ;main.c: 27: }
  2999  0048A6  D00B               	goto	l10185
  3000  0048A8                     l10183:
  3001                           
  3002                           ;main.c: 28: else{
  3003                           ;main.c: 29: I2C_Master_Init(10000);
  3004  0048A8  0E10               	movlw	16
  3005  0048AA  0100               	movlb	0	; () banked
  3006  0048AC  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3007  0048AE  0E27               	movlw	39
  3008  0048B0  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3009  0048B2  0E00               	movlw	0
  3010  0048B4  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3011  0048B6  0E00               	movlw	0
  3012  0048B8  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3013  0048BA  EC7D  F029         	call	_I2C_Master_Init	;wreg free
  3014  0048BE                     l10185:
  3015                           
  3016                           ;main.c: 30: }
  3017                           ;main.c: 32: initUI();
  3018  0048BE  EC1B  F02C         	call	_initUI	;wreg free
  3019                           
  3020                           ;main.c: 33: first = 1;
  3021  0048C2  0E00               	movlw	0
  3022  0048C4  0101               	movlb	1	; () banked
  3023  0048C6  6F3A               	movwf	(_first+1)& (0+255),b
  3024  0048C8  0E01               	movlw	1
  3025  0048CA  6F39               	movwf	_first& (0+255),b
  3026                           
  3027                           ; BSR set to: 1
  3028                           ;main.c: 34: initEEPROM();
  3029  0048CC  EC7B  F02E         	call	_initEEPROM	;wreg free
  3030                           
  3031                           ;main.c: 45: switch(machine_state){
  3032                           
  3033                           ;main.c: 44: while(1){
  3034  0048D0  D01A               	goto	l10211
  3035  0048D2                     l10191:
  3036                           
  3037                           ;main.c: 47: UI();
  3038  0048D2  EC09  F000         	call	_UI	;wreg free
  3039                           
  3040                           ;main.c: 48: break;
  3041  0048D6  D017               	goto	l10211
  3042  0048D8                     l10193:
  3043                           
  3044                           ;main.c: 50: sort();
  3045  0048D8  ECDA  F02D         	call	_sort	;wreg free
  3046                           
  3047                           ;main.c: 51: break;
  3048  0048DC  D014               	goto	l10211
  3049  0048DE                     l10195:
  3050                           
  3051                           ;main.c: 53: stopSignals();
  3052  0048DE  EC0B  F02E         	call	_stopSignals	;wreg free
  3053                           
  3054                           ;main.c: 54: logRun();
  3055  0048E2  EC22  F020         	call	_logRun	;wreg free
  3056                           
  3057                           ;main.c: 55: first = 1;
  3058  0048E6  0E00               	movlw	0
  3059  0048E8  0101               	movlb	1	; () banked
  3060  0048EA  6F3A               	movwf	(_first+1)& (0+255),b
  3061  0048EC  0E01               	movlw	1
  3062  0048EE  6F39               	movwf	_first& (0+255),b
  3063                           
  3064                           ; BSR set to: 1
  3065                           ;main.c: 56: initLCD();
  3066  0048F0  ECF8  F02A         	call	_initLCD	;wreg free
  3067                           
  3068                           ;main.c: 57: UI();
  3069  0048F4  EC09  F000         	call	_UI	;wreg free
  3070                           
  3071                           ;main.c: 58: break;
  3072  0048F8  D006               	goto	l10211
  3073  0048FA                     l10205:
  3074                           
  3075                           ;main.c: 60: Test();
  3076  0048FA  ECDD  F021         	call	_Test	;wreg free
  3077                           
  3078                           ;main.c: 61: break;
  3079  0048FE  D003               	goto	l10211
  3080  004900                     l10207:
  3081                           
  3082                           ;main.c: 63: stopSignals();
  3083  004900  EC0B  F02E         	call	_stopSignals	;wreg free
  3084  004904                     l508:
  3085  004904  D7FF               	goto	l508
  3086  004906                     l10211:
  3087  004906  0100               	movlb	0	; () banked
  3088  004908  51FC               	movf	_machine_state& (0+255),w,b
  3089                           
  3090                           ; Switch size 1, requested type "space"
  3091                           ; Number of cases is 5, Range of values is 0 to 4
  3092                           ; switch strategies available:
  3093                           ; Name         Instructions Cycles
  3094                           ; simple_byte           16     9 (average)
  3095                           ;	Chosen strategy is simple_byte
  3096  00490A  0A00               	xorlw	0	; case 0
  3097  00490C  B4D8               	btfsc	status,2,c
  3098  00490E  D7E1               	goto	l10191
  3099  004910  0A01               	xorlw	1	; case 1
  3100  004912  B4D8               	btfsc	status,2,c
  3101  004914  D7E1               	goto	l10193
  3102  004916  0A03               	xorlw	3	; case 2
  3103  004918  B4D8               	btfsc	status,2,c
  3104  00491A  D7E1               	goto	l10195
  3105  00491C  0A01               	xorlw	1	; case 3
  3106  00491E  B4D8               	btfsc	status,2,c
  3107  004920  D7EC               	goto	l10205
  3108  004922  0A07               	xorlw	7	; case 4
  3109  004924  B4D8               	btfsc	status,2,c
  3110  004926  D7EC               	goto	l10207
  3111                           
  3112                           ; BSR set to: 0
  3113                           
  3114                           ; BSR set to: 0
  3115  004928  D7EE               	goto	l10211
  3116  00492A                     __end_of_main:
  3117                           	opt stack 0
  3118                           tblptru	equ	0xFF8
  3119                           tblptrh	equ	0xFF7
  3120                           tblptrl	equ	0xFF6
  3121                           tablat	equ	0xFF5
  3122                           postinc0	equ	0xFEE
  3123                           wreg	equ	0xFE8
  3124                           postdec1	equ	0xFE5
  3125                           fsr1l	equ	0xFE1
  3126                           status	equ	0xFD8
  3127                           
  3128 ;; *************** function _sort *****************
  3129 ;; Defined at:
  3130 ;;		line 67 in file "sort.c"
  3131 ;; Parameters:    Size  Location     Type
  3132 ;;		None
  3133 ;; Auto vars:     Size  Location     Type
  3134 ;;		None
  3135 ;; Return value:  Size  Location     Type
  3136 ;;                  1    wreg      void 
  3137 ;; Registers used:
  3138 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3139 ;; Tracked objects:
  3140 ;;		On entry : 0/0
  3141 ;;		On exit  : 0/0
  3142 ;;		Unchanged: 0/0
  3143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3148 ;;Total ram usage:        0 bytes
  3149 ;; Hardware stack levels used:    1
  3150 ;; Hardware stack levels required when called:   12
  3151 ;; This function calls:
  3152 ;;		_Distribution
  3153 ;;		_ID
  3154 ;;		_Loading
  3155 ;; This function is called by:
  3156 ;;		_main
  3157 ;; This function uses a non-reentrant model
  3158 ;;
  3159                           
  3160                           	psect	text1
  3161  005BB4                     __ptext1:
  3162                           	opt stack 0
  3163  005BB4                     _sort:
  3164                           	opt stack 18
  3165                           
  3166                           ;sort.c: 68: if(machine_state == Sorting_state){
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;incstack = 0
  3170  005BB4  0100               	movlb	0	; () banked
  3171  005BB6  05FC               	decf	_machine_state& (0+255),w,b
  3172  005BB8  B4D8               	btfsc	status,2,c
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;sort.c: 69: Loading();
  3176  005BBA  ECC9  F008         	call	_Loading	;wreg free
  3177                           
  3178                           ;sort.c: 70: }
  3179                           ;sort.c: 71: if(machine_state == Sorting_state){
  3180  005BBE  0100               	movlb	0	; () banked
  3181  005BC0  05FC               	decf	_machine_state& (0+255),w,b
  3182  005BC2  B4D8               	btfsc	status,2,c
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;sort.c: 72: ID();
  3186  005BC4  ECC2  F00B         	call	_ID	;wreg free
  3187                           
  3188                           ;sort.c: 73: }
  3189                           ;sort.c: 74: if(machine_state == Sorting_state){
  3190  005BC8  0100               	movlb	0	; () banked
  3191  005BCA  05FC               	decf	_machine_state& (0+255),w,b
  3192  005BCC  A4D8               	btfss	status,2,c
  3193  005BCE  0012               	return	
  3194                           
  3195                           ; BSR set to: 0
  3196                           ;sort.c: 75: Distribution();
  3197  005BD0  EC53  F023         	call	_Distribution	;wreg free
  3198  005BD4  0012               	return	
  3199  005BD6                     __end_of_sort:
  3200                           	opt stack 0
  3201                           tblptru	equ	0xFF8
  3202                           tblptrh	equ	0xFF7
  3203                           tblptrl	equ	0xFF6
  3204                           tablat	equ	0xFF5
  3205                           postinc0	equ	0xFEE
  3206                           wreg	equ	0xFE8
  3207                           postdec1	equ	0xFE5
  3208                           fsr1l	equ	0xFE1
  3209                           status	equ	0xFD8
  3210                           
  3211 ;; *************** function _Loading *****************
  3212 ;; Defined at:
  3213 ;;		line 79 in file "sort.c"
  3214 ;; Parameters:    Size  Location     Type
  3215 ;;		None
  3216 ;; Auto vars:     Size  Location     Type
  3217 ;;  i               2   62[BANK0 ] int 
  3218 ;;  i               2   60[BANK0 ] int 
  3219 ;;  i               2   58[BANK0 ] int 
  3220 ;;  i               2   56[BANK0 ] int 
  3221 ;;  i               2   54[BANK0 ] int 
  3222 ;;  j               2   66[BANK0 ] int 
  3223 ;;  i               2   64[BANK0 ] int 
  3224 ;;  addr            2   51[BANK0 ] unsigned short 
  3225 ;;  byte1           1   53[BANK0 ] unsigned char 
  3226 ;; Return value:  Size  Location     Type
  3227 ;;                  1    wreg      void 
  3228 ;; Registers used:
  3229 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3230 ;; Tracked objects:
  3231 ;;		On entry : 0/0
  3232 ;;		On exit  : 0/0
  3233 ;;		Unchanged: 0/0
  3234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3236 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3237 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3238 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3239 ;;Total ram usage:       19 bytes
  3240 ;; Hardware stack levels used:    1
  3241 ;; Hardware stack levels required when called:   11
  3242 ;; This function calls:
  3243 ;;		_EEPROM_read
  3244 ;;		_EEPROM_write
  3245 ;;		_delay_ms
  3246 ;;		_getIR
  3247 ;;		_getMAG
  3248 ;;		_initGlobalVars
  3249 ;;		_initServos
  3250 ;;		_initSortTimer
  3251 ;;		_lcdInst
  3252 ;;		_readIR
  3253 ;; This function is called by:
  3254 ;;		_sort
  3255 ;; This function uses a non-reentrant model
  3256 ;;
  3257                           
  3258                           	psect	text2
  3259  001192                     __ptext2:
  3260                           	opt stack 0
  3261  001192                     _Loading:
  3262                           	opt stack 18
  3263                           
  3264                           ;sort.c: 80: if(first){
  3265                           
  3266                           ;incstack = 0
  3267  001192  0101               	movlb	1	; () banked
  3268  001194  5139               	movf	_first& (0+255),w,b
  3269  001196  0101               	movlb	1	; () banked
  3270  001198  113A               	iorwf	(_first+1)& (0+255),w,b
  3271  00119A  B4D8               	btfsc	status,2,c
  3272  00119C  D066               	goto	l7861
  3273                           
  3274                           ; BSR set to: 1
  3275                           ;sort.c: 81: initGlobalVars();
  3276  00119E  ECF9  F024         	call	_initGlobalVars	;wreg free
  3277                           
  3278                           ;sort.c: 82: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3279  0011A2  0E01               	movlw	1
  3280  0011A4  EC59  F02E         	call	_lcdInst
  3281  0011A8  0E68               	movlw	104
  3282  0011AA  0100               	movlb	0	; () banked
  3283  0011AC  6FB1               	movwf	??_Loading& (0+255),b
  3284  0011AE  0EE4               	movlw	228
  3285  0011B0                     u9777:
  3286  0011B0  2EE8               	decfsz	wreg,f,c
  3287  0011B2  D7FE               	bra	u9777
  3288  0011B4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3289  0011B6  D7FC               	bra	u9777
  3290  0011B8  F000               	nop	
  3291                           
  3292                           ;sort.c: 83: initSortTimer();
  3293  0011BA  EC16  F026         	call	_initSortTimer	;wreg free
  3294                           
  3295                           ;sort.c: 84: LATCbits.LATC5 = 1;
  3296  0011BE  8A8B               	bsf	3979,5,c	;volatile
  3297                           
  3298                           ;sort.c: 89: sel = EEPROM_read(0);
  3299  0011C0  0E00               	movlw	0
  3300  0011C2  0100               	movlb	0	; () banked
  3301  0011C4  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3302  0011C6  0E00               	movlw	0
  3303  0011C8  6F80               	movwf	EEPROM_read@address& (0+255),b
  3304  0011CA  EC27  F02E         	call	_EEPROM_read	;wreg free
  3305  0011CE  0100               	movlb	0	; () banked
  3306  0011D0  6FFD               	movwf	_sel& (0+255),b
  3307                           
  3308                           ; BSR set to: 0
  3309                           ;sort.c: 90: unsigned short addr = 1 + 11 * sel;
  3310  0011D2  0100               	movlb	0	; () banked
  3311  0011D4  51FD               	movf	_sel& (0+255),w,b
  3312  0011D6  0D0B               	mullw	11
  3313  0011D8  0E01               	movlw	1
  3314  0011DA  24F3               	addwf	prodl,w,c
  3315  0011DC  0100               	movlb	0	; () banked
  3316  0011DE  6FB3               	movwf	Loading@addr& (0+255),b
  3317  0011E0  0E00               	movlw	0
  3318  0011E2  20F4               	addwfc	prodh,w,c
  3319  0011E4  0100               	movlb	0	; () banked
  3320  0011E6  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3321                           
  3322                           ; BSR set to: 0
  3323                           ;sort.c: 91: unsigned char byte1 = 0b01111111;
  3324  0011E8  0E7F               	movlw	127
  3325  0011EA  0100               	movlb	0	; () banked
  3326  0011EC  6FB5               	movwf	Loading@byte1& (0+255),b
  3327                           
  3328                           ; BSR set to: 0
  3329                           ;sort.c: 92: EEPROM_write(addr, byte1);
  3330  0011EE  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3331  0011F2  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3332  0011F6  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3333  0011FA  ECDF  F022         	call	_EEPROM_write	;wreg free
  3334                           
  3335                           ;sort.c: 95: LATBbits.LATB2 = 0;
  3336  0011FE  948A               	bcf	3978,2,c	;volatile
  3337                           
  3338                           ;sort.c: 97: for(int i=0; i<46; i++){
  3339  001200  0E00               	movlw	0
  3340  001202  0100               	movlb	0	; () banked
  3341  001204  6FC1               	movwf	(Loading@i+1)& (0+255),b
  3342  001206  0E00               	movlw	0
  3343  001208  6FC0               	movwf	Loading@i& (0+255),b
  3344                           
  3345                           ; BSR set to: 0
  3346  00120A  0100               	movlb	0	; () banked
  3347  00120C  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3348  00120E  D008               	goto	l7851
  3349  001210  0100               	movlb	0	; () banked
  3350  001212  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3351  001214  E126               	bnz	l785
  3352  001216  0E2E               	movlw	46
  3353  001218  0100               	movlb	0	; () banked
  3354  00121A  5DC0               	subwf	Loading@i& (0+255),w,b
  3355  00121C  B0D8               	btfsc	status,0,c
  3356  00121E  D021               	goto	l785
  3357  001220                     l7851:
  3358                           
  3359                           ; BSR set to: 0
  3360                           ;sort.c: 98: LATBbits.LATB2 = !LATBbits.LATB2;
  3361  001220  B48A               	btfsc	3978,2,c	;volatile
  3362  001222  D004               	goto	u6400
  3363  001224  0100               	movlb	0	; () banked
  3364  001226  6BB1               	clrf	??_Loading& (0+255),b
  3365  001228  2BB1               	incf	??_Loading& (0+255),f,b
  3366  00122A  D002               	goto	u6418
  3367  00122C                     u6400:
  3368  00122C  0100               	movlb	0	; () banked
  3369  00122E  6BB1               	clrf	??_Loading& (0+255),b
  3370  001230                     u6418:
  3371  001230  0100               	movlb	0	; () banked
  3372  001232  47B1               	rlncf	??_Loading& (0+255),f,b
  3373  001234  47B1               	rlncf	??_Loading& (0+255),f,b
  3374  001236  508A               	movf	3978,w,c	;volatile
  3375  001238  0100               	movlb	0	; () banked
  3376  00123A  19B1               	xorwf	??_Loading& (0+255),w,b
  3377  00123C  0BFB               	andlw	-5
  3378  00123E  19B1               	xorwf	??_Loading& (0+255),w,b
  3379  001240  6E8A               	movwf	3978,c	;volatile
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;sort.c: 99: delay_ms(45-i);
  3383  001242  0100               	movlb	0	; () banked
  3384  001244  51C0               	movf	Loading@i& (0+255),w,b
  3385  001246  0800               	sublw	0
  3386  001248  0F2D               	addlw	45
  3387  00124A  EC7A  F02D         	call	_delay_ms
  3388  00124E  0100               	movlb	0	; () banked
  3389  001250  4BC0               	infsnz	Loading@i& (0+255),f,b
  3390  001252  2BC1               	incf	(Loading@i+1)& (0+255),f,b
  3391                           
  3392                           ; BSR set to: 0
  3393  001254  0100               	movlb	0	; () banked
  3394  001256  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3395  001258  D7E3               	goto	l7851
  3396  00125A  0100               	movlb	0	; () banked
  3397  00125C  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3398  00125E  E101               	bnz	u6420
  3399  001260  D7DA               	goto	L1
  3400  001262                     u6420:
  3401  001262                     l785:
  3402                           
  3403                           ; BSR set to: 0
  3404                           ;sort.c: 100: }
  3405                           ;sort.c: 101: LATBbits.LATB2 = 1;
  3406  001262  848A               	bsf	3978,2,c	;volatile
  3407                           
  3408                           ; BSR set to: 0
  3409                           ;sort.c: 104: initServos();
  3410  001264  ECC6  F027         	call	_initServos	;wreg free
  3411                           
  3412                           ;sort.c: 105: }
  3413  001268  0012               	return	
  3414  00126A                     l7861:
  3415                           
  3416                           ;sort.c: 106: else{
  3417                           ;sort.c: 109: if(!f_loadingNewCan){
  3418  00126A  0100               	movlb	0	; () banked
  3419  00126C  51EC               	movf	_f_loadingNewCan& (0+255),w,b
  3420  00126E  0100               	movlb	0	; () banked
  3421  001270  11ED               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3422  001272  A4D8               	btfss	status,2,c
  3423  001274  D018               	goto	l7877
  3424                           
  3425                           ; BSR set to: 0
  3426                           ;sort.c: 111: getIR();
  3427  001276  EC3E  F028         	call	_getIR	;wreg free
  3428                           
  3429                           ;sort.c: 113: if(!f_loadingNewCan){
  3430  00127A  0100               	movlb	0	; () banked
  3431  00127C  51EC               	movf	_f_loadingNewCan& (0+255),w,b
  3432  00127E  0100               	movlb	0	; () banked
  3433  001280  11ED               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3434  001282  B4D8               	btfsc	status,2,c
  3435  001284  0012               	return	
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;sort.c: 117: else{
  3439                           ;sort.c: 118: count_total++;
  3440                           
  3441                           ; BSR set to: 0
  3442                           
  3443                           ; BSR set to: 0
  3444                           ;sort.c: 115: }
  3445                           
  3446                           ; BSR set to: 0
  3447                           ;sort.c: 114: return;
  3448  001286  0100               	movlb	0	; () banked
  3449  001288  4BFE               	infsnz	_count_total& (0+255),f,b
  3450  00128A  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3451                           
  3452                           ; BSR set to: 0
  3453                           ;sort.c: 119: if(count_total == 12){
  3454  00128C  0E0C               	movlw	12
  3455  00128E  0100               	movlb	0	; () banked
  3456  001290  19FE               	xorwf	_count_total& (0+255),w,b
  3457  001292  0100               	movlb	0	; () banked
  3458  001294  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3459  001296  A4D8               	btfss	status,2,c
  3460  001298  0012               	return	
  3461                           
  3462                           ; BSR set to: 0
  3463                           ;sort.c: 120: f_lastCan = 1;
  3464  00129A  0E00               	movlw	0
  3465  00129C  0100               	movlb	0	; () banked
  3466  00129E  6FEB               	movwf	(_f_lastCan+1)& (0+255),b
  3467  0012A0  0E01               	movlw	1
  3468  0012A2  6FEA               	movwf	_f_lastCan& (0+255),b
  3469                           
  3470                           ; BSR set to: 0
  3471                           ;sort.c: 121: }
  3472                           ;sort.c: 122: }
  3473                           ;sort.c: 123: }
  3474                           
  3475                           ; BSR set to: 0
  3476  0012A4  0012               	return	
  3477  0012A6                     l7877:
  3478                           
  3479                           ; BSR set to: 0
  3480                           ;sort.c: 126: else if(f_ID_receive){
  3481  0012A6  0101               	movlb	1	; () banked
  3482  0012A8  512F               	movf	_f_ID_receive& (0+255),w,b
  3483  0012AA  0101               	movlb	1	; () banked
  3484  0012AC  1130               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3485  0012AE  B4D8               	btfsc	status,2,c
  3486  0012B0  0012               	return	
  3487                           
  3488                           ; BSR set to: 1
  3489                           ;sort.c: 127: f_most_recent_sort_time = 1;
  3490  0012B2  0E00               	movlw	0
  3491  0012B4  0101               	movlb	1	; () banked
  3492  0012B6  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  3493  0012B8  0E01               	movlw	1
  3494  0012BA  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  3495                           
  3496                           ;sort.c: 128: f_loadingNewCan = 0;
  3497  0012BC  0E00               	movlw	0
  3498  0012BE  0100               	movlb	0	; () banked
  3499  0012C0  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3500  0012C2  0E00               	movlw	0
  3501  0012C4  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  3502                           
  3503                           ; BSR set to: 0
  3504                           ;sort.c: 129: _delay((unsigned long)((400)*(32000000/4000.0)));
  3505  0012C6  0E11               	movlw	17
  3506  0012C8  0100               	movlb	0	; () banked
  3507  0012CA  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3508  0012CC  0E3C               	movlw	60
  3509  0012CE  0100               	movlb	0	; () banked
  3510  0012D0  6FB1               	movwf	??_Loading& (0+255),b
  3511  0012D2  0ECB               	movlw	203
  3512  0012D4                     u9787:
  3513  0012D4  2EE8               	decfsz	wreg,f,c
  3514  0012D6  D7FE               	bra	u9787
  3515  0012D8  2FB1               	decfsz	??_Loading& (0+255),f,b
  3516  0012DA  D7FC               	bra	u9787
  3517  0012DC  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3518  0012DE  D7FA               	bra	u9787
  3519                           
  3520                           ;sort.c: 130: LATBbits.LATB2 = 0;
  3521  0012E0  948A               	bcf	3978,2,c	;volatile
  3522                           
  3523                           ;sort.c: 134: f_arm_position = 1;
  3524  0012E2  0E00               	movlw	0
  3525  0012E4  0100               	movlb	0	; () banked
  3526  0012E6  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3527  0012E8  0E01               	movlw	1
  3528  0012EA  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  3529                           
  3530                           ; BSR set to: 0
  3531                           ;sort.c: 136: delay_ms(750);
  3532  0012EC  0EEE               	movlw	238
  3533  0012EE  EC7A  F02D         	call	_delay_ms
  3534                           
  3535                           ;sort.c: 137: getMAG();
  3536  0012F2  ECE9  F02B         	call	_getMAG	;wreg free
  3537                           
  3538                           ;sort.c: 138: sensor_outputs[0] = MAG_signal;
  3539  0012F6  C0E2  F0DA         	movff	_MAG_signal,_sensor_outputs
  3540  0012FA  C0E3  F0DB         	movff	_MAG_signal+1,_sensor_outputs+1
  3541                           
  3542                           ;sort.c: 140: if(sensor_outputs[0]){
  3543  0012FE  0100               	movlb	0	; () banked
  3544  001300  51DA               	movf	_sensor_outputs& (0+255),w,b
  3545  001302  0100               	movlb	0	; () banked
  3546  001304  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3547  001306  B4D8               	btfsc	status,2,c
  3548  001308  D027               	goto	l7907
  3549                           
  3550                           ; BSR set to: 0
  3551                           ;sort.c: 141: for(int i = 0; i<25; i++){
  3552  00130A  0E00               	movlw	0
  3553  00130C  0100               	movlb	0	; () banked
  3554  00130E  6FB7               	movwf	(Loading@i_1118+1)& (0+255),b
  3555  001310  0E00               	movlw	0
  3556  001312  6FB6               	movwf	Loading@i_1118& (0+255),b
  3557  001314                     l7897:
  3558                           
  3559                           ; BSR set to: 0
  3560  001314  0100               	movlb	0	; () banked
  3561  001316  BFB7               	btfsc	(Loading@i_1118+1)& (0+255),7,b
  3562  001318  D008               	goto	l795
  3563  00131A  0100               	movlb	0	; () banked
  3564  00131C  51B7               	movf	(Loading@i_1118+1)& (0+255),w,b
  3565  00131E  E143               	bnz	l7919
  3566  001320  0E19               	movlw	25
  3567  001322  0100               	movlb	0	; () banked
  3568  001324  5DB6               	subwf	Loading@i_1118& (0+255),w,b
  3569  001326  B0D8               	btfsc	status,0,c
  3570  001328  D03E               	goto	l7919
  3571  00132A                     l795:
  3572                           
  3573                           ; BSR set to: 0
  3574                           ;sort.c: 142: LATAbits.LATA4 = 1;
  3575  00132A  8889               	bsf	3977,4,c	;volatile
  3576                           
  3577                           ; BSR set to: 0
  3578                           ;sort.c: 143: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  3579  00132C  0E4E               	movlw	78
  3580  00132E  0100               	movlb	0	; () banked
  3581  001330  6FB1               	movwf	??_Loading& (0+255),b
  3582  001332  0EEB               	movlw	235
  3583  001334                     u9797:
  3584  001334  2EE8               	decfsz	wreg,f,c
  3585  001336  D7FE               	bra	u9797
  3586  001338  2FB1               	decfsz	??_Loading& (0+255),f,b
  3587  00133A  D7FC               	bra	u9797
  3588                           
  3589                           ;sort.c: 144: LATAbits.LATA4 = 0;
  3590  00133C  9889               	bcf	3977,4,c	;volatile
  3591                           
  3592                           ;sort.c: 145: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  3593  00133E  0E1A               	movlw	26
  3594  001340  0100               	movlb	0	; () banked
  3595  001342  6FB1               	movwf	??_Loading& (0+255),b
  3596  001344  0EF8               	movlw	248
  3597  001346                     u9807:
  3598  001346  2EE8               	decfsz	wreg,f,c
  3599  001348  D7FE               	bra	u9807
  3600  00134A  2FB1               	decfsz	??_Loading& (0+255),f,b
  3601  00134C  D7FC               	bra	u9807
  3602  00134E  F000               	nop	
  3603  001350  0100               	movlb	0	; () banked
  3604  001352  4BB6               	infsnz	Loading@i_1118& (0+255),f,b
  3605  001354  2BB7               	incf	(Loading@i_1118+1)& (0+255),f,b
  3606  001356  D7DE               	goto	l7897
  3607  001358                     l7907:
  3608                           
  3609                           ; BSR set to: 0
  3610                           ;sort.c: 148: else{
  3611                           ;sort.c: 149: for(int i = 0; i<25; i++){
  3612  001358  0E00               	movlw	0
  3613  00135A  0100               	movlb	0	; () banked
  3614  00135C  6FB9               	movwf	(Loading@i_1127+1)& (0+255),b
  3615  00135E  0E00               	movlw	0
  3616  001360  6FB8               	movwf	Loading@i_1127& (0+255),b
  3617  001362                     l7909:
  3618                           
  3619                           ; BSR set to: 0
  3620  001362  0100               	movlb	0	; () banked
  3621  001364  BFB9               	btfsc	(Loading@i_1127+1)& (0+255),7,b
  3622  001366  D008               	goto	l798
  3623  001368  0100               	movlb	0	; () banked
  3624  00136A  51B9               	movf	(Loading@i_1127+1)& (0+255),w,b
  3625  00136C  E11C               	bnz	l7919
  3626  00136E  0E19               	movlw	25
  3627  001370  0100               	movlb	0	; () banked
  3628  001372  5DB8               	subwf	Loading@i_1127& (0+255),w,b
  3629  001374  B0D8               	btfsc	status,0,c
  3630  001376  D017               	goto	l7919
  3631  001378                     l798:
  3632                           
  3633                           ; BSR set to: 0
  3634                           ;sort.c: 150: LATAbits.LATA4 = 1;
  3635  001378  8889               	bsf	3977,4,c	;volatile
  3636                           
  3637                           ; BSR set to: 0
  3638                           ;sort.c: 151: _delay((unsigned long)((5800)*(32000000/4000000.0)));
  3639  00137A  0E3D               	movlw	61
  3640  00137C  0100               	movlb	0	; () banked
  3641  00137E  6FB1               	movwf	??_Loading& (0+255),b
  3642  001380  0E41               	movlw	65
  3643  001382                     u9817:
  3644  001382  2EE8               	decfsz	wreg,f,c
  3645  001384  D7FE               	bra	u9817
  3646  001386  2FB1               	decfsz	??_Loading& (0+255),f,b
  3647  001388  D7FC               	bra	u9817
  3648                           
  3649                           ;sort.c: 152: LATAbits.LATA4 = 0;
  3650  00138A  9889               	bcf	3977,4,c	;volatile
  3651                           
  3652                           ;sort.c: 153: _delay((unsigned long)((4200)*(32000000/4000000.0)));
  3653  00138C  0E2C               	movlw	44
  3654  00138E  0100               	movlb	0	; () banked
  3655  001390  6FB1               	movwf	??_Loading& (0+255),b
  3656  001392  0EA1               	movlw	161
  3657  001394                     u9827:
  3658  001394  2EE8               	decfsz	wreg,f,c
  3659  001396  D7FE               	bra	u9827
  3660  001398  2FB1               	decfsz	??_Loading& (0+255),f,b
  3661  00139A  D7FC               	bra	u9827
  3662  00139C  D000               	nop2	
  3663  00139E  0100               	movlb	0	; () banked
  3664  0013A0  4BB8               	infsnz	Loading@i_1127& (0+255),f,b
  3665  0013A2  2BB9               	incf	(Loading@i_1127+1)& (0+255),f,b
  3666  0013A4  D7DE               	goto	l7909
  3667  0013A6                     l7919:
  3668                           
  3669                           ; BSR set to: 0
  3670                           ;sort.c: 154: }
  3671                           ;sort.c: 155: }
  3672                           ;sort.c: 157: _delay((unsigned long)((350)*(32000000/4000.0)));
  3673  0013A6  0E0F               	movlw	15
  3674  0013A8  0100               	movlb	0	; () banked
  3675  0013AA  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3676  0013AC  0E35               	movlw	53
  3677  0013AE  0100               	movlb	0	; () banked
  3678  0013B0  6FB1               	movwf	??_Loading& (0+255),b
  3679  0013B2  0E51               	movlw	81
  3680  0013B4                     u9837:
  3681  0013B4  2EE8               	decfsz	wreg,f,c
  3682  0013B6  D7FE               	bra	u9837
  3683  0013B8  2FB1               	decfsz	??_Loading& (0+255),f,b
  3684  0013BA  D7FC               	bra	u9837
  3685  0013BC  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3686  0013BE  D7FA               	bra	u9837
  3687                           
  3688                           ;sort.c: 159: readIR();
  3689  0013C0  EC86  F02A         	call	_readIR	;wreg free
  3690                           
  3691                           ;sort.c: 160: if(IR_signal==1){
  3692  0013C4  0100               	movlb	0	; () banked
  3693  0013C6  05E0               	decf	_IR_signal& (0+255),w,b
  3694  0013C8  0100               	movlb	0	; () banked
  3695  0013CA  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  3696  0013CC  A4D8               	btfss	status,2,c
  3697  0013CE  D1D4               	goto	l8047
  3698                           
  3699                           ; BSR set to: 0
  3700                           ;sort.c: 161: _delay((unsigned long)((30)*(32000000/4000.0)));
  3701  0013D0  0E02               	movlw	2
  3702  0013D2  0100               	movlb	0	; () banked
  3703  0013D4  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3704  0013D6  0E38               	movlw	56
  3705  0013D8  0100               	movlb	0	; () banked
  3706  0013DA  6FB1               	movwf	??_Loading& (0+255),b
  3707  0013DC  0EAD               	movlw	173
  3708  0013DE                     u9847:
  3709  0013DE  2EE8               	decfsz	wreg,f,c
  3710  0013E0  D7FE               	bra	u9847
  3711  0013E2  2FB1               	decfsz	??_Loading& (0+255),f,b
  3712  0013E4  D7FC               	bra	u9847
  3713  0013E6  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3714  0013E8  D7FA               	bra	u9847
  3715                           
  3716                           ;sort.c: 162: readIR();
  3717  0013EA  EC86  F02A         	call	_readIR	;wreg free
  3718                           
  3719                           ;sort.c: 163: if(IR_signal==1){
  3720  0013EE  0100               	movlb	0	; () banked
  3721  0013F0  05E0               	decf	_IR_signal& (0+255),w,b
  3722  0013F2  0100               	movlb	0	; () banked
  3723  0013F4  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  3724  0013F6  A4D8               	btfss	status,2,c
  3725  0013F8  D054               	goto	l7957
  3726                           
  3727                           ; BSR set to: 0
  3728                           ;sort.c: 164: if(sensor_outputs[0]){
  3729  0013FA  0100               	movlb	0	; () banked
  3730  0013FC  51DA               	movf	_sensor_outputs& (0+255),w,b
  3731  0013FE  0100               	movlb	0	; () banked
  3732  001400  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3733  001402  B4D8               	btfsc	status,2,c
  3734  001404  D027               	goto	l7945
  3735                           
  3736                           ; BSR set to: 0
  3737                           ;sort.c: 165: for(int i = 0; i<25; i++){
  3738  001406  0E00               	movlw	0
  3739  001408  0100               	movlb	0	; () banked
  3740  00140A  6FBB               	movwf	(Loading@i_1129+1)& (0+255),b
  3741  00140C  0E00               	movlw	0
  3742  00140E  6FBA               	movwf	Loading@i_1129& (0+255),b
  3743  001410                     l7935:
  3744                           
  3745                           ; BSR set to: 0
  3746  001410  0100               	movlb	0	; () banked
  3747  001412  BFBB               	btfsc	(Loading@i_1129+1)& (0+255),7,b
  3748  001414  D008               	goto	l803
  3749  001416  0100               	movlb	0	; () banked
  3750  001418  51BB               	movf	(Loading@i_1129+1)& (0+255),w,b
  3751  00141A  E143               	bnz	l7957
  3752  00141C  0E19               	movlw	25
  3753  00141E  0100               	movlb	0	; () banked
  3754  001420  5DBA               	subwf	Loading@i_1129& (0+255),w,b
  3755  001422  B0D8               	btfsc	status,0,c
  3756  001424  D03E               	goto	l7957
  3757  001426                     l803:
  3758                           
  3759                           ; BSR set to: 0
  3760                           ;sort.c: 166: LATAbits.LATA4 = 1;
  3761  001426  8889               	bsf	3977,4,c	;volatile
  3762                           
  3763                           ; BSR set to: 0
  3764                           ;sort.c: 167: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  3765  001428  0E4E               	movlw	78
  3766  00142A  0100               	movlb	0	; () banked
  3767  00142C  6FB1               	movwf	??_Loading& (0+255),b
  3768  00142E  0EEB               	movlw	235
  3769  001430                     u9857:
  3770  001430  2EE8               	decfsz	wreg,f,c
  3771  001432  D7FE               	bra	u9857
  3772  001434  2FB1               	decfsz	??_Loading& (0+255),f,b
  3773  001436  D7FC               	bra	u9857
  3774                           
  3775                           ;sort.c: 168: LATAbits.LATA4 = 0;
  3776  001438  9889               	bcf	3977,4,c	;volatile
  3777                           
  3778                           ;sort.c: 169: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  3779  00143A  0E1A               	movlw	26
  3780  00143C  0100               	movlb	0	; () banked
  3781  00143E  6FB1               	movwf	??_Loading& (0+255),b
  3782  001440  0EF8               	movlw	248
  3783  001442                     u9867:
  3784  001442  2EE8               	decfsz	wreg,f,c
  3785  001444  D7FE               	bra	u9867
  3786  001446  2FB1               	decfsz	??_Loading& (0+255),f,b
  3787  001448  D7FC               	bra	u9867
  3788  00144A  F000               	nop	
  3789  00144C  0100               	movlb	0	; () banked
  3790  00144E  4BBA               	infsnz	Loading@i_1129& (0+255),f,b
  3791  001450  2BBB               	incf	(Loading@i_1129+1)& (0+255),f,b
  3792  001452  D7DE               	goto	l7935
  3793  001454                     l7945:
  3794                           
  3795                           ; BSR set to: 0
  3796                           ;sort.c: 172: else{
  3797                           ;sort.c: 173: for(int i = 0; i<25; i++){
  3798  001454  0E00               	movlw	0
  3799  001456  0100               	movlb	0	; () banked
  3800  001458  6FBD               	movwf	(Loading@i_1130+1)& (0+255),b
  3801  00145A  0E00               	movlw	0
  3802  00145C  6FBC               	movwf	Loading@i_1130& (0+255),b
  3803  00145E                     l7947:
  3804                           
  3805                           ; BSR set to: 0
  3806  00145E  0100               	movlb	0	; () banked
  3807  001460  BFBD               	btfsc	(Loading@i_1130+1)& (0+255),7,b
  3808  001462  D008               	goto	l806
  3809  001464  0100               	movlb	0	; () banked
  3810  001466  51BD               	movf	(Loading@i_1130+1)& (0+255),w,b
  3811  001468  E11C               	bnz	l7957
  3812  00146A  0E19               	movlw	25
  3813  00146C  0100               	movlb	0	; () banked
  3814  00146E  5DBC               	subwf	Loading@i_1130& (0+255),w,b
  3815  001470  B0D8               	btfsc	status,0,c
  3816  001472  D017               	goto	l7957
  3817  001474                     l806:
  3818                           
  3819                           ; BSR set to: 0
  3820                           ;sort.c: 174: LATAbits.LATA4 = 1;
  3821  001474  8889               	bsf	3977,4,c	;volatile
  3822                           
  3823                           ; BSR set to: 0
  3824                           ;sort.c: 175: _delay((unsigned long)((5800)*(32000000/4000000.0)));
  3825  001476  0E3D               	movlw	61
  3826  001478  0100               	movlb	0	; () banked
  3827  00147A  6FB1               	movwf	??_Loading& (0+255),b
  3828  00147C  0E41               	movlw	65
  3829  00147E                     u9877:
  3830  00147E  2EE8               	decfsz	wreg,f,c
  3831  001480  D7FE               	bra	u9877
  3832  001482  2FB1               	decfsz	??_Loading& (0+255),f,b
  3833  001484  D7FC               	bra	u9877
  3834                           
  3835                           ;sort.c: 176: LATAbits.LATA4 = 0;
  3836  001486  9889               	bcf	3977,4,c	;volatile
  3837                           
  3838                           ;sort.c: 177: _delay((unsigned long)((4200)*(32000000/4000000.0)));
  3839  001488  0E2C               	movlw	44
  3840  00148A  0100               	movlb	0	; () banked
  3841  00148C  6FB1               	movwf	??_Loading& (0+255),b
  3842  00148E  0EA1               	movlw	161
  3843  001490                     u9887:
  3844  001490  2EE8               	decfsz	wreg,f,c
  3845  001492  D7FE               	bra	u9887
  3846  001494  2FB1               	decfsz	??_Loading& (0+255),f,b
  3847  001496  D7FC               	bra	u9887
  3848  001498  D000               	nop2	
  3849  00149A  0100               	movlb	0	; () banked
  3850  00149C  4BBC               	infsnz	Loading@i_1130& (0+255),f,b
  3851  00149E  2BBD               	incf	(Loading@i_1130+1)& (0+255),f,b
  3852  0014A0  D7DE               	goto	l7947
  3853  0014A2                     l7957:
  3854                           
  3855                           ; BSR set to: 0
  3856                           ;sort.c: 178: }
  3857                           ;sort.c: 179: }
  3858                           ;sort.c: 180: }
  3859                           ;sort.c: 182: _delay((unsigned long)((350)*(32000000/4000.0)));
  3860  0014A2  0E0F               	movlw	15
  3861  0014A4  0100               	movlb	0	; () banked
  3862  0014A6  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3863  0014A8  0E35               	movlw	53
  3864  0014AA  0100               	movlb	0	; () banked
  3865  0014AC  6FB1               	movwf	??_Loading& (0+255),b
  3866  0014AE  0E51               	movlw	81
  3867  0014B0                     u9897:
  3868  0014B0  2EE8               	decfsz	wreg,f,c
  3869  0014B2  D7FE               	bra	u9897
  3870  0014B4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3871  0014B6  D7FC               	bra	u9897
  3872  0014B8  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3873  0014BA  D7FA               	bra	u9897
  3874                           
  3875                           ;sort.c: 184: int j = 0;
  3876  0014BC  0E00               	movlw	0
  3877  0014BE  0100               	movlb	0	; () banked
  3878  0014C0  6FC3               	movwf	(Loading@j+1)& (0+255),b
  3879  0014C2  0E00               	movlw	0
  3880  0014C4  6FC2               	movwf	Loading@j& (0+255),b
  3881                           
  3882                           ;sort.c: 185: while(IR_signal == 1){
  3883  0014C6  D151               	goto	l8045
  3884  0014C8                     l7961:
  3885                           
  3886                           ; BSR set to: 0
  3887                           ;sort.c: 186: readIR();
  3888  0014C8  EC86  F02A         	call	_readIR	;wreg free
  3889                           
  3890                           ;sort.c: 187: if(j == 3 || j == 4){
  3891  0014CC  0E03               	movlw	3
  3892  0014CE  0100               	movlb	0	; () banked
  3893  0014D0  19C2               	xorwf	Loading@j& (0+255),w,b
  3894  0014D2  0100               	movlb	0	; () banked
  3895  0014D4  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3896  0014D6  B4D8               	btfsc	status,2,c
  3897  0014D8  D007               	goto	l7967
  3898                           
  3899                           ; BSR set to: 0
  3900  0014DA  0E04               	movlw	4
  3901  0014DC  0100               	movlb	0	; () banked
  3902  0014DE  19C2               	xorwf	Loading@j& (0+255),w,b
  3903  0014E0  0100               	movlb	0	; () banked
  3904  0014E2  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3905  0014E4  A4D8               	btfss	status,2,c
  3906  0014E6  D005               	goto	l7969
  3907  0014E8                     l7967:
  3908                           
  3909                           ; BSR set to: 0
  3910                           ;sort.c: 188: f_arm_position = 0;
  3911  0014E8  0E00               	movlw	0
  3912  0014EA  0100               	movlb	0	; () banked
  3913  0014EC  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3914  0014EE  0E00               	movlw	0
  3915  0014F0  D022               	goto	L2
  3916  0014F2                     l7969:
  3917                           
  3918                           ; BSR set to: 0
  3919                           ;sort.c: 190: else if(j == 5 || j == 6){
  3920  0014F2  0E05               	movlw	5
  3921  0014F4  0100               	movlb	0	; () banked
  3922  0014F6  19C2               	xorwf	Loading@j& (0+255),w,b
  3923  0014F8  0100               	movlb	0	; () banked
  3924  0014FA  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3925  0014FC  B4D8               	btfsc	status,2,c
  3926  0014FE  D007               	goto	l816
  3927                           
  3928                           ; BSR set to: 0
  3929  001500  0E06               	movlw	6
  3930  001502  0100               	movlb	0	; () banked
  3931  001504  19C2               	xorwf	Loading@j& (0+255),w,b
  3932  001506  0100               	movlb	0	; () banked
  3933  001508  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3934  00150A  A4D8               	btfss	status,2,c
  3935  00150C  D002               	goto	l7973
  3936  00150E                     l816:
  3937                           
  3938                           ; BSR set to: 0
  3939                           ;sort.c: 191: LATBbits.LATB2 = 1;
  3940  00150E  848A               	bsf	3978,2,c	;volatile
  3941                           
  3942                           ;sort.c: 192: }
  3943  001510  D034               	goto	l813
  3944  001512                     l7973:
  3945                           
  3946                           ; BSR set to: 0
  3947                           ;sort.c: 193: else if(j == 7 || j == 8){
  3948  001512  0E07               	movlw	7
  3949  001514  0100               	movlb	0	; () banked
  3950  001516  19C2               	xorwf	Loading@j& (0+255),w,b
  3951  001518  0100               	movlb	0	; () banked
  3952  00151A  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3953  00151C  B4D8               	btfsc	status,2,c
  3954  00151E  D007               	goto	l7977
  3955                           
  3956                           ; BSR set to: 0
  3957  001520  0E08               	movlw	8
  3958  001522  0100               	movlb	0	; () banked
  3959  001524  19C2               	xorwf	Loading@j& (0+255),w,b
  3960  001526  0100               	movlb	0	; () banked
  3961  001528  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3962  00152A  A4D8               	btfss	status,2,c
  3963  00152C  D006               	goto	l818
  3964  00152E                     l7977:
  3965                           
  3966                           ; BSR set to: 0
  3967                           ;sort.c: 194: f_arm_position = 1;
  3968  00152E  0E00               	movlw	0
  3969  001530  0100               	movlb	0	; () banked
  3970  001532  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3971  001534  0E01               	movlw	1
  3972  001536                     L2:
  3973  001536  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  3974                           
  3975                           ;sort.c: 195: }
  3976  001538  D020               	goto	l813
  3977  00153A                     l818:
  3978                           
  3979                           ; BSR set to: 0
  3980                           ;sort.c: 196: else if(j % 2 == 0){
  3981  00153A  0100               	movlb	0	; () banked
  3982  00153C  B1C2               	btfsc	Loading@j& (0+255),0,b
  3983  00153E  D01D               	goto	l813
  3984                           
  3985                           ; BSR set to: 0
  3986                           ;sort.c: 197: LATBbits.LATB2 = !LATBbits.LATB2;
  3987  001540  B48A               	btfsc	3978,2,c	;volatile
  3988  001542  D004               	goto	u6660
  3989  001544  0100               	movlb	0	; () banked
  3990  001546  6BB1               	clrf	??_Loading& (0+255),b
  3991  001548  2BB1               	incf	??_Loading& (0+255),f,b
  3992  00154A  D002               	goto	u6678
  3993  00154C                     u6660:
  3994  00154C  0100               	movlb	0	; () banked
  3995  00154E  6BB1               	clrf	??_Loading& (0+255),b
  3996  001550                     u6678:
  3997  001550  0100               	movlb	0	; () banked
  3998  001552  47B1               	rlncf	??_Loading& (0+255),f,b
  3999  001554  47B1               	rlncf	??_Loading& (0+255),f,b
  4000  001556  508A               	movf	3978,w,c	;volatile
  4001  001558  0100               	movlb	0	; () banked
  4002  00155A  19B1               	xorwf	??_Loading& (0+255),w,b
  4003  00155C  0BFB               	andlw	-5
  4004  00155E  19B1               	xorwf	??_Loading& (0+255),w,b
  4005  001560  6E8A               	movwf	3978,c	;volatile
  4006                           
  4007                           ;sort.c: 198: f_arm_position = !f_arm_position;
  4008  001562  0100               	movlb	0	; () banked
  4009  001564  51E8               	movf	_f_arm_position& (0+255),w,b	;volatile
  4010  001566  0100               	movlb	0	; () banked
  4011  001568  11E9               	iorwf	(_f_arm_position+1)& (0+255),w,b	;volatile
  4012  00156A  A4D8               	btfss	status,2,c
  4013  00156C  D002               	goto	u6680
  4014  00156E  0E01               	movlw	1
  4015  001570  D001               	goto	u6690
  4016  001572                     u6680:
  4017  001572  0E00               	movlw	0
  4018  001574                     u6690:
  4019  001574  0100               	movlb	0	; () banked
  4020  001576  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  4021  001578  6BE9               	clrf	(_f_arm_position+1)& (0+255),b	;volatile
  4022  00157A                     l813:
  4023                           
  4024                           ; BSR set to: 0
  4025                           ;sort.c: 199: }
  4026                           ;sort.c: 202: if(IR_signal==1){
  4027  00157A  0100               	movlb	0	; () banked
  4028  00157C  05E0               	decf	_IR_signal& (0+255),w,b
  4029  00157E  0100               	movlb	0	; () banked
  4030  001580  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4031  001582  A4D8               	btfss	status,2,c
  4032  001584  D0D6               	goto	l8033
  4033                           
  4034                           ; BSR set to: 0
  4035                           ;sort.c: 203: _delay((unsigned long)((350)*(32000000/4000.0)));
  4036  001586  0E0F               	movlw	15
  4037  001588  0100               	movlb	0	; () banked
  4038  00158A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4039  00158C  0E35               	movlw	53
  4040  00158E  0100               	movlb	0	; () banked
  4041  001590  6FB1               	movwf	??_Loading& (0+255),b
  4042  001592  0E51               	movlw	81
  4043  001594                     u9907:
  4044  001594  2EE8               	decfsz	wreg,f,c
  4045  001596  D7FE               	bra	u9907
  4046  001598  2FB1               	decfsz	??_Loading& (0+255),f,b
  4047  00159A  D7FC               	bra	u9907
  4048  00159C  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4049  00159E  D7FA               	bra	u9907
  4050                           
  4051                           ;sort.c: 204: readIR();
  4052  0015A0  EC86  F02A         	call	_readIR	;wreg free
  4053                           
  4054                           ;sort.c: 205: if(IR_signal==1){
  4055  0015A4  0100               	movlb	0	; () banked
  4056  0015A6  05E0               	decf	_IR_signal& (0+255),w,b
  4057  0015A8  0100               	movlb	0	; () banked
  4058  0015AA  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4059  0015AC  A4D8               	btfss	status,2,c
  4060  0015AE  D0BD               	goto	l824
  4061                           
  4062                           ; BSR set to: 0
  4063                           ;sort.c: 206: if(sensor_outputs[0]){
  4064  0015B0  0100               	movlb	0	; () banked
  4065  0015B2  51DA               	movf	_sensor_outputs& (0+255),w,b
  4066  0015B4  0100               	movlb	0	; () banked
  4067  0015B6  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4068  0015B8  B4D8               	btfsc	status,2,c
  4069  0015BA  D011               	goto	l7995
  4070                           
  4071                           ; BSR set to: 0
  4072                           ;sort.c: 207: LATAbits.LATA4 = 1;
  4073  0015BC  8889               	bsf	3977,4,c	;volatile
  4074                           
  4075                           ; BSR set to: 0
  4076                           ;sort.c: 208: _delay((unsigned long)((250)*(32000000/4000.0)));
  4077  0015BE  0E0B               	movlw	11
  4078  0015C0  0100               	movlb	0	; () banked
  4079  0015C2  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4080  0015C4  0E26               	movlw	38
  4081  0015C6  0100               	movlb	0	; () banked
  4082  0015C8  6FB1               	movwf	??_Loading& (0+255),b
  4083  0015CA  0E5D               	movlw	93
  4084  0015CC                     u9917:
  4085  0015CC  2EE8               	decfsz	wreg,f,c
  4086  0015CE  D7FE               	bra	u9917
  4087  0015D0  2FB1               	decfsz	??_Loading& (0+255),f,b
  4088  0015D2  D7FC               	bra	u9917
  4089  0015D4  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4090  0015D6  D7FA               	bra	u9917
  4091  0015D8  D000               	nop2	
  4092                           
  4093                           ;sort.c: 209: LATAbits.LATA4 = 0;
  4094  0015DA  9889               	bcf	3977,4,c	;volatile
  4095                           
  4096                           ;sort.c: 210: }
  4097  0015DC  D0A6               	goto	l824
  4098  0015DE                     l7995:
  4099                           
  4100                           ;sort.c: 211: else{
  4101                           ;sort.c: 212: for(int i = 0; i<25; i++){
  4102  0015DE  0E00               	movlw	0
  4103  0015E0  0100               	movlb	0	; () banked
  4104  0015E2  6FBF               	movwf	(Loading@i_1132+1)& (0+255),b
  4105  0015E4  0E00               	movlw	0
  4106  0015E6  6FBE               	movwf	Loading@i_1132& (0+255),b
  4107                           
  4108                           ; BSR set to: 0
  4109  0015E8  0100               	movlb	0	; () banked
  4110  0015EA  BFBF               	btfsc	(Loading@i_1132+1)& (0+255),7,b
  4111  0015EC  D079               	goto	l8025
  4112  0015EE  0100               	movlb	0	; () banked
  4113  0015F0  51BF               	movf	(Loading@i_1132+1)& (0+255),w,b
  4114  0015F2  E106               	bnz	u6730
  4115  0015F4  0E19               	movlw	25
  4116  0015F6  0100               	movlb	0	; () banked
  4117  0015F8  5DBE               	subwf	Loading@i_1132& (0+255),w,b
  4118  0015FA  B0D8               	btfsc	status,0,c
  4119  0015FC  D096               	goto	l824
  4120  0015FE  D070               	goto	l8025
  4121  001600                     u6730:
  4122                           
  4123                           ; BSR set to: 0
  4124  001600  D094               	goto	l824
  4125  001602                     l830:
  4126                           
  4127                           ; BSR set to: 0
  4128                           ;sort.c: 215: LATAbits.LATA4 = 1;
  4129  001602  8889               	bsf	3977,4,c	;volatile
  4130                           
  4131                           ; BSR set to: 0
  4132                           ;sort.c: 216: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  4133  001604  0E4E               	movlw	78
  4134  001606  0100               	movlb	0	; () banked
  4135  001608  6FB1               	movwf	??_Loading& (0+255),b
  4136  00160A  0EEB               	movlw	235
  4137  00160C                     u9927:
  4138  00160C  2EE8               	decfsz	wreg,f,c
  4139  00160E  D7FE               	bra	u9927
  4140  001610  2FB1               	decfsz	??_Loading& (0+255),f,b
  4141  001612  D7FC               	bra	u9927
  4142                           
  4143                           ;sort.c: 217: LATAbits.LATA4 = 0;
  4144  001614  9889               	bcf	3977,4,c	;volatile
  4145                           
  4146                           ;sort.c: 218: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  4147  001616  0E1A               	movlw	26
  4148  001618  0100               	movlb	0	; () banked
  4149  00161A  6FB1               	movwf	??_Loading& (0+255),b
  4150  00161C  0EF8               	movlw	248
  4151  00161E                     u9937:
  4152  00161E  2EE8               	decfsz	wreg,f,c
  4153  001620  D7FE               	bra	u9937
  4154  001622  2FB1               	decfsz	??_Loading& (0+255),f,b
  4155  001624  D7FC               	bra	u9937
  4156  001626  D05A               	goto	L6
  4157  001628                     l832:
  4158                           
  4159                           ; BSR set to: 0
  4160                           ;sort.c: 221: LATAbits.LATA4 = 1;
  4161  001628  8889               	bsf	3977,4,c	;volatile
  4162                           
  4163                           ; BSR set to: 0
  4164                           ;sort.c: 222: _delay((unsigned long)((8000)*(32000000/4000000.0)));
  4165  00162A  0E54               	movlw	84
  4166  00162C  0100               	movlb	0	; () banked
  4167  00162E  6FB1               	movwf	??_Loading& (0+255),b
  4168  001630  0E1C               	movlw	28
  4169  001632                     u9947:
  4170  001632  2EE8               	decfsz	wreg,f,c
  4171  001634  D7FE               	bra	u9947
  4172  001636  2FB1               	decfsz	??_Loading& (0+255),f,b
  4173  001638  D7FC               	bra	u9947
  4174  00163A  F000               	nop	
  4175                           
  4176                           ;sort.c: 223: LATAbits.LATA4 = 0;
  4177  00163C  9889               	bcf	3977,4,c	;volatile
  4178                           
  4179                           ;sort.c: 224: _delay((unsigned long)((2000)*(32000000/4000000.0)));
  4180  00163E  0E15               	movlw	21
  4181  001640  0100               	movlb	0	; () banked
  4182  001642  6FB1               	movwf	??_Loading& (0+255),b
  4183  001644  0EC6               	movlw	198
  4184  001646                     u9957:
  4185  001646  2EE8               	decfsz	wreg,f,c
  4186  001648  D7FE               	bra	u9957
  4187  00164A  2FB1               	decfsz	??_Loading& (0+255),f,b
  4188  00164C  D7FC               	bra	u9957
  4189  00164E  D046               	goto	L6
  4190  001650                     l833:
  4191                           
  4192                           ; BSR set to: 0
  4193                           ;sort.c: 227: LATAbits.LATA4 = 1;
  4194  001650  8889               	bsf	3977,4,c	;volatile
  4195                           
  4196                           ; BSR set to: 0
  4197                           ;sort.c: 228: _delay((unsigned long)((8500)*(32000000/4000000.0)));
  4198  001652  0E59               	movlw	89
  4199  001654  0100               	movlb	0	; () banked
  4200  001656  6FB1               	movwf	??_Loading& (0+255),b
  4201  001658  0E4E               	movlw	78
  4202  00165A                     u9967:
  4203  00165A  2EE8               	decfsz	wreg,f,c
  4204  00165C  D7FE               	bra	u9967
  4205  00165E  2FB1               	decfsz	??_Loading& (0+255),f,b
  4206  001660  D7FC               	bra	u9967
  4207  001662  F000               	nop	
  4208                           
  4209                           ;sort.c: 229: LATAbits.LATA4 = 0;
  4210  001664  9889               	bcf	3977,4,c	;volatile
  4211                           
  4212                           ;sort.c: 230: _delay((unsigned long)((1500)*(32000000/4000000.0)));
  4213  001666  0E10               	movlw	16
  4214  001668  0100               	movlb	0	; () banked
  4215  00166A  6FB1               	movwf	??_Loading& (0+255),b
  4216  00166C  0E94               	movlw	148
  4217  00166E                     u9977:
  4218  00166E  2EE8               	decfsz	wreg,f,c
  4219  001670  D7FE               	bra	u9977
  4220  001672  2FB1               	decfsz	??_Loading& (0+255),f,b
  4221  001674  D7FC               	bra	u9977
  4222  001676  D032               	goto	L6
  4223  001678                     l834:
  4224                           
  4225                           ; BSR set to: 0
  4226                           ;sort.c: 233: LATAbits.LATA4 = 1;
  4227  001678  8889               	bsf	3977,4,c	;volatile
  4228                           
  4229                           ; BSR set to: 0
  4230                           ;sort.c: 234: _delay((unsigned long)((9000)*(32000000/4000000.0)));
  4231  00167A  0E5E               	movlw	94
  4232  00167C  0100               	movlb	0	; () banked
  4233  00167E  6FB1               	movwf	??_Loading& (0+255),b
  4234  001680  0E80               	movlw	128
  4235  001682                     u9987:
  4236  001682  2EE8               	decfsz	wreg,f,c
  4237  001684  D7FE               	bra	u9987
  4238  001686  2FB1               	decfsz	??_Loading& (0+255),f,b
  4239  001688  D7FC               	bra	u9987
  4240  00168A  F000               	nop	
  4241                           
  4242                           ;sort.c: 235: LATAbits.LATA4 = 0;
  4243  00168C  9889               	bcf	3977,4,c	;volatile
  4244                           
  4245                           ;sort.c: 236: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  4246  00168E  0E0B               	movlw	11
  4247  001690  0100               	movlb	0	; () banked
  4248  001692  6FB1               	movwf	??_Loading& (0+255),b
  4249  001694  0E62               	movlw	98
  4250  001696                     u9997:
  4251  001696  2EE8               	decfsz	wreg,f,c
  4252  001698  D7FE               	bra	u9997
  4253  00169A  2FB1               	decfsz	??_Loading& (0+255),f,b
  4254  00169C  D7FC               	bra	u9997
  4255  00169E  D01E               	goto	L6
  4256  0016A0                     l835:
  4257                           
  4258                           ; BSR set to: 0
  4259                           ;sort.c: 239: LATAbits.LATA4 = 1;
  4260  0016A0  8889               	bsf	3977,4,c	;volatile
  4261                           
  4262                           ; BSR set to: 0
  4263                           ;sort.c: 240: _delay((unsigned long)((9500)*(32000000/4000000.0)));
  4264  0016A2  0E63               	movlw	99
  4265  0016A4  0100               	movlb	0	; () banked
  4266  0016A6  6FB1               	movwf	??_Loading& (0+255),b
  4267  0016A8  0EB2               	movlw	178
  4268  0016AA                     u10007:
  4269  0016AA  2EE8               	decfsz	wreg,f,c
  4270  0016AC  D7FE               	bra	u10007
  4271  0016AE  2FB1               	decfsz	??_Loading& (0+255),f,b
  4272  0016B0  D7FC               	bra	u10007
  4273  0016B2  F000               	nop	
  4274                           
  4275                           ;sort.c: 241: LATAbits.LATA4 = 0;
  4276  0016B4  9889               	bcf	3977,4,c	;volatile
  4277                           
  4278                           ;sort.c: 242: _delay((unsigned long)((5000)*(32000000/4000000.0)));
  4279  0016B6  0E34               	movlw	52
  4280  0016B8  0100               	movlb	0	; () banked
  4281  0016BA  6FB1               	movwf	??_Loading& (0+255),b
  4282  0016BC  0EF1               	movlw	241
  4283  0016BE                     u10017:
  4284  0016BE  2EE8               	decfsz	wreg,f,c
  4285  0016C0  D7FE               	bra	u10017
  4286  0016C2  2FB1               	decfsz	??_Loading& (0+255),f,b
  4287  0016C4  D7FC               	bra	u10017
  4288  0016C6  D000               	nop2	
  4289                           
  4290                           ;sort.c: 243: break;
  4291  0016C8  D026               	goto	l8027
  4292  0016CA                     l836:
  4293                           
  4294                           ; BSR set to: 0
  4295                           ;sort.c: 245: LATAbits.LATA4 = 1;
  4296  0016CA  8889               	bsf	3977,4,c	;volatile
  4297                           
  4298                           ; BSR set to: 0
  4299                           ;sort.c: 246: _delay((unsigned long)((10)*(32000000/4000.0)));
  4300  0016CC  0E68               	movlw	104
  4301  0016CE  0100               	movlb	0	; () banked
  4302  0016D0  6FB1               	movwf	??_Loading& (0+255),b
  4303  0016D2  0EE4               	movlw	228
  4304  0016D4                     u10027:
  4305  0016D4  2EE8               	decfsz	wreg,f,c
  4306  0016D6  D7FE               	bra	u10027
  4307  0016D8  2FB1               	decfsz	??_Loading& (0+255),f,b
  4308  0016DA  D7FC               	bra	u10027
  4309  0016DC                     L6:
  4310  0016DC  F000               	nop	
  4311                           
  4312                           ;sort.c: 248: }
  4313                           
  4314                           ;sort.c: 247: break;
  4315  0016DE  D01B               	goto	l8027
  4316  0016E0                     l8025:
  4317  0016E0  C0C2  F0B1         	movff	Loading@j,??_Loading
  4318  0016E4  C0C3  F0B2         	movff	Loading@j+1,??_Loading+1
  4319                           
  4320                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4321                           ; Switch size 1, requested type "space"
  4322                           ; Number of cases is 1, Range of values is 0 to 0
  4323                           ; switch strategies available:
  4324                           ; Name         Instructions Cycles
  4325                           ; simple_byte            4     3 (average)
  4326                           ;	Chosen strategy is simple_byte
  4327  0016E8  0100               	movlb	0	; () banked
  4328  0016EA  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4329  0016EC  0A00               	xorlw	0	; case 0
  4330  0016EE  A4D8               	btfss	status,2,c
  4331  0016F0  D7EC               	goto	l836
  4332                           
  4333                           ; BSR set to: 0
  4334                           ; Switch size 1, requested type "space"
  4335                           ; Number of cases is 5, Range of values is 0 to 4
  4336                           ; switch strategies available:
  4337                           ; Name         Instructions Cycles
  4338                           ; simple_byte           16     9 (average)
  4339                           ;	Chosen strategy is simple_byte
  4340  0016F2  0100               	movlb	0	; () banked
  4341  0016F4  51B1               	movf	??_Loading& (0+255),w,b
  4342  0016F6  0A00               	xorlw	0	; case 0
  4343  0016F8  B4D8               	btfsc	status,2,c
  4344  0016FA  D783               	goto	l830
  4345  0016FC  0A01               	xorlw	1	; case 1
  4346  0016FE  B4D8               	btfsc	status,2,c
  4347  001700  D793               	goto	l832
  4348  001702  0A03               	xorlw	3	; case 2
  4349  001704  B4D8               	btfsc	status,2,c
  4350  001706  D7A4               	goto	l833
  4351  001708  0A01               	xorlw	1	; case 3
  4352  00170A  B4D8               	btfsc	status,2,c
  4353  00170C  D7B5               	goto	l834
  4354  00170E  0A07               	xorlw	7	; case 4
  4355  001710  B4D8               	btfsc	status,2,c
  4356  001712  D7C6               	goto	l835
  4357  001714  D7DA               	goto	l836
  4358  001716                     l8027:
  4359  001716  0100               	movlb	0	; () banked
  4360  001718  4BBE               	infsnz	Loading@i_1132& (0+255),f,b
  4361  00171A  2BBF               	incf	(Loading@i_1132+1)& (0+255),f,b
  4362                           
  4363                           ; BSR set to: 0
  4364  00171C  0100               	movlb	0	; () banked
  4365  00171E  BFBF               	btfsc	(Loading@i_1132+1)& (0+255),7,b
  4366  001720  D7DF               	goto	l8025
  4367  001722  0100               	movlb	0	; () banked
  4368  001724  51BF               	movf	(Loading@i_1132+1)& (0+255),w,b
  4369  001726  E101               	bnz	l824
  4370  001728  D765               	goto	L7
  4371  00172A                     l824:
  4372                           
  4373                           ;sort.c: 249: }
  4374                           ;sort.c: 250: }
  4375                           ;sort.c: 251: }
  4376                           ;sort.c: 252: LATAbits.LATA4 = 0;
  4377  00172A  9889               	bcf	3977,4,c	;volatile
  4378                           
  4379                           ;sort.c: 253: j++;
  4380  00172C  0100               	movlb	0	; () banked
  4381  00172E  4BC2               	infsnz	Loading@j& (0+255),f,b
  4382  001730  2BC3               	incf	(Loading@j+1)& (0+255),f,b
  4383  001732                     l8033:
  4384                           
  4385                           ; BSR set to: 0
  4386                           ;sort.c: 254: }
  4387                           ;sort.c: 256: if(!IR_signal){
  4388  001732  0100               	movlb	0	; () banked
  4389  001734  51E0               	movf	_IR_signal& (0+255),w,b
  4390  001736  0100               	movlb	0	; () banked
  4391  001738  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4392  00173A  A4D8               	btfss	status,2,c
  4393  00173C  D016               	goto	l8045
  4394                           
  4395                           ; BSR set to: 0
  4396                           ;sort.c: 257: _delay((unsigned long)((500)*(32000000/4000.0)));
  4397  00173E  0E15               	movlw	21
  4398  001740  0100               	movlb	0	; () banked
  4399  001742  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4400  001744  0E4B               	movlw	75
  4401  001746  0100               	movlb	0	; () banked
  4402  001748  6FB1               	movwf	??_Loading& (0+255),b
  4403  00174A  0EBE               	movlw	190
  4404  00174C                     u10037:
  4405  00174C  2EE8               	decfsz	wreg,f,c
  4406  00174E  D7FE               	bra	u10037
  4407  001750  2FB1               	decfsz	??_Loading& (0+255),f,b
  4408  001752  D7FC               	bra	u10037
  4409  001754  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4410  001756  D7FA               	bra	u10037
  4411  001758  F000               	nop	
  4412                           
  4413                           ;sort.c: 258: readIR();
  4414  00175A  EC86  F02A         	call	_readIR	;wreg free
  4415                           
  4416                           ;sort.c: 259: if(IR_signal==1){
  4417  00175E  0100               	movlb	0	; () banked
  4418  001760  05E0               	decf	_IR_signal& (0+255),w,b
  4419  001762  0100               	movlb	0	; () banked
  4420  001764  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4421  001766  A4D8               	btfss	status,2,c
  4422  001768  D006               	goto	l840
  4423  00176A                     l8045:
  4424                           
  4425                           ; BSR set to: 0
  4426  00176A  0100               	movlb	0	; () banked
  4427  00176C  05E0               	decf	_IR_signal& (0+255),w,b
  4428  00176E  0100               	movlb	0	; () banked
  4429  001770  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4430  001772  B4D8               	btfsc	status,2,c
  4431  001774  D6A9               	goto	l7961
  4432  001776                     l840:
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;sort.c: 264: }
  4436                           ;sort.c: 265: }
  4437                           ;sort.c: 266: }
  4438                           ;sort.c: 267: LATBbits.LATB2 = 0;
  4439  001776  948A               	bcf	3978,2,c	;volatile
  4440  001778                     l8047:
  4441                           
  4442                           ; BSR set to: 0
  4443                           ;sort.c: 268: }
  4444                           ;sort.c: 269: f_can_coming_to_ID = 1;
  4445  001778  0E00               	movlw	0
  4446  00177A  0101               	movlb	1	; () banked
  4447  00177C  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4448  00177E  0E01               	movlw	1
  4449  001780  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4450                           
  4451                           ; BSR set to: 1
  4452                           
  4453                           ; BSR set to: 1
  4454  001782  0012               	return	
  4455  001784                     __end_of_Loading:
  4456                           	opt stack 0
  4457                           tblptru	equ	0xFF8
  4458                           tblptrh	equ	0xFF7
  4459                           tblptrl	equ	0xFF6
  4460                           tablat	equ	0xFF5
  4461                           prodh	equ	0xFF4
  4462                           prodl	equ	0xFF3
  4463                           postinc0	equ	0xFEE
  4464                           wreg	equ	0xFE8
  4465                           postdec1	equ	0xFE5
  4466                           fsr1l	equ	0xFE1
  4467                           status	equ	0xFD8
  4468                           
  4469 ;; *************** function _initSortTimer *****************
  4470 ;; Defined at:
  4471 ;;		line 445 in file "sort.c"
  4472 ;; Parameters:    Size  Location     Type
  4473 ;;		None
  4474 ;; Auto vars:     Size  Location     Type
  4475 ;;  i               2    8[BANK0 ] int 
  4476 ;; Return value:  Size  Location     Type
  4477 ;;                  1    wreg      void 
  4478 ;; Registers used:
  4479 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4480 ;; Tracked objects:
  4481 ;;		On entry : 0/0
  4482 ;;		On exit  : 0/0
  4483 ;;		Unchanged: 0/0
  4484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4486 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4487 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4488 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4489 ;;Total ram usage:        5 bytes
  4490 ;; Hardware stack levels used:    1
  4491 ;; Hardware stack levels required when called:   10
  4492 ;; This function calls:
  4493 ;;		_getRTC
  4494 ;; This function is called by:
  4495 ;;		_Loading
  4496 ;; This function uses a non-reentrant model
  4497 ;;
  4498                           
  4499                           	psect	text3
  4500  004C2C                     __ptext3:
  4501                           	opt stack 0
  4502  004C2C                     _initSortTimer:
  4503                           	opt stack 18
  4504                           
  4505                           ;sort.c: 447: getRTC();
  4506                           
  4507                           ;incstack = 0
  4508  004C2C  EC02  F027         	call	_getRTC	;wreg free
  4509                           
  4510                           ;sort.c: 448: for(int i = 0; i < 7; i++){
  4511  004C30  0E00               	movlw	0
  4512  004C32  0100               	movlb	0	; () banked
  4513  004C34  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4514  004C36  0E00               	movlw	0
  4515  004C38  6F88               	movwf	initSortTimer@i& (0+255),b
  4516  004C3A                     l7353:
  4517                           
  4518                           ; BSR set to: 0
  4519  004C3A  0100               	movlb	0	; () banked
  4520  004C3C  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4521  004C3E  D008               	goto	l7357
  4522  004C40  0100               	movlb	0	; () banked
  4523  004C42  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4524  004C44  E140               	bnz	l7363
  4525  004C46  0E07               	movlw	7
  4526  004C48  0100               	movlb	0	; () banked
  4527  004C4A  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4528  004C4C  B0D8               	btfsc	status,0,c
  4529  004C4E  D03B               	goto	l7363
  4530  004C50                     l7357:
  4531                           
  4532                           ; BSR set to: 0
  4533                           ;sort.c: 449: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4534  004C50  0E1C               	movlw	low _time
  4535  004C52  0100               	movlb	0	; () banked
  4536  004C54  2588               	addwf	initSortTimer@i& (0+255),w,b
  4537  004C56  6ED9               	movwf	fsr2l,c
  4538  004C58  0E01               	movlw	high _time
  4539  004C5A  0100               	movlb	0	; () banked
  4540  004C5C  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4541  004C5E  6EDA               	movwf	fsr2h,c
  4542  004C60  50DF               	movf	indf2,w,c
  4543  004C62  0100               	movlb	0	; () banked
  4544  004C64  6F85               	movwf	??_initSortTimer& (0+255),b
  4545  004C66  0100               	movlb	0	; () banked
  4546  004C68  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4547  004C6A  0E0F               	movlw	15
  4548  004C6C  1785               	andwf	??_initSortTimer& (0+255),f,b
  4549  004C6E  0E0F               	movlw	15
  4550  004C70  0100               	movlb	0	; () banked
  4551  004C72  1785               	andwf	??_initSortTimer& (0+255),f,b
  4552  004C74  0100               	movlb	0	; () banked
  4553  004C76  5185               	movf	??_initSortTimer& (0+255),w,b
  4554  004C78  0D0A               	mullw	10
  4555  004C7A  0E1C               	movlw	low _time
  4556  004C7C  0100               	movlb	0	; () banked
  4557  004C7E  2588               	addwf	initSortTimer@i& (0+255),w,b
  4558  004C80  6ED9               	movwf	fsr2l,c
  4559  004C82  0E01               	movlw	high _time
  4560  004C84  0100               	movlb	0	; () banked
  4561  004C86  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4562  004C88  6EDA               	movwf	fsr2h,c
  4563  004C8A  50DF               	movf	indf2,w,c
  4564  004C8C  0B0F               	andlw	15
  4565  004C8E  0100               	movlb	0	; () banked
  4566  004C90  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4567  004C92  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4568  004C94  50F3               	movf	prodl,w,c
  4569  004C96  0100               	movlb	0	; () banked
  4570  004C98  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4571  004C9A  50F4               	movf	prodh,w,c
  4572  004C9C  0100               	movlb	0	; () banked
  4573  004C9E  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4574  004CA0  90D8               	bcf	status,0,c
  4575  004CA2  0100               	movlb	0	; () banked
  4576  004CA4  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4577  004CA6  6ED9               	movwf	fsr2l,c
  4578  004CA8  0100               	movlb	0	; () banked
  4579  004CAA  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4580  004CAC  6EDA               	movwf	fsr2h,c
  4581  004CAE  0E0E               	movlw	low _startTime
  4582  004CB0  26D9               	addwf	fsr2l,f,c
  4583  004CB2  0E01               	movlw	high _startTime
  4584  004CB4  22DA               	addwfc	fsr2h,f,c
  4585  004CB6  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4586  004CBA  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4587                           
  4588                           ; BSR set to: 0
  4589  004CBE  0100               	movlb	0	; () banked
  4590  004CC0  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4591  004CC2  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4592  004CC4  D7BA               	goto	l7353
  4593  004CC6                     l7363:
  4594                           
  4595                           ; BSR set to: 0
  4596                           ;sort.c: 450: }
  4597                           ;sort.c: 452: T0CON = 0b00010111;
  4598  004CC6  0E17               	movlw	23
  4599  004CC8  6ED5               	movwf	4053,c	;volatile
  4600                           
  4601                           ;sort.c: 461: TMR0H = 0b10000101;
  4602  004CCA  0E85               	movlw	133
  4603  004CCC  6ED7               	movwf	4055,c	;volatile
  4604                           
  4605                           ;sort.c: 462: TMR0L = 0b11101110;
  4606  004CCE  0EEE               	movlw	238
  4607  004CD0  6ED6               	movwf	4054,c	;volatile
  4608                           
  4609                           ; BSR set to: 0
  4610                           ;sort.c: 463: TMR0ON = 1;
  4611  004CD2  8ED5               	bsf	4053,7,c	;volatile
  4612                           
  4613                           ; BSR set to: 0
  4614  004CD4  0012               	return		;funcret
  4615  004CD6                     __end_of_initSortTimer:
  4616                           	opt stack 0
  4617                           tblptru	equ	0xFF8
  4618                           tblptrh	equ	0xFF7
  4619                           tblptrl	equ	0xFF6
  4620                           tablat	equ	0xFF5
  4621                           prodh	equ	0xFF4
  4622                           prodl	equ	0xFF3
  4623                           postinc0	equ	0xFEE
  4624                           wreg	equ	0xFE8
  4625                           postdec1	equ	0xFE5
  4626                           fsr1l	equ	0xFE1
  4627                           indf2	equ	0xFDF
  4628                           postinc2	equ	0xFDE
  4629                           postdec2	equ	0xFDD
  4630                           fsr2h	equ	0xFDA
  4631                           fsr2l	equ	0xFD9
  4632                           status	equ	0xFD8
  4633                           
  4634 ;; *************** function _initGlobalVars *****************
  4635 ;; Defined at:
  4636 ;;		line 413 in file "sort.c"
  4637 ;; Parameters:    Size  Location     Type
  4638 ;;		None
  4639 ;; Auto vars:     Size  Location     Type
  4640 ;;		None
  4641 ;; Return value:  Size  Location     Type
  4642 ;;                  1    wreg      void 
  4643 ;; Registers used:
  4644 ;;		wreg, status,2
  4645 ;; Tracked objects:
  4646 ;;		On entry : 0/0
  4647 ;;		On exit  : 0/0
  4648 ;;		Unchanged: 0/0
  4649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4654 ;;Total ram usage:        0 bytes
  4655 ;; Hardware stack levels used:    1
  4656 ;; Hardware stack levels required when called:    7
  4657 ;; This function calls:
  4658 ;;		Nothing
  4659 ;; This function is called by:
  4660 ;;		_Loading
  4661 ;; This function uses a non-reentrant model
  4662 ;;
  4663                           
  4664                           	psect	text4
  4665  0049F2                     __ptext4:
  4666                           	opt stack 0
  4667  0049F2                     _initGlobalVars:
  4668                           	opt stack 21
  4669                           
  4670                           ;sort.c: 415: first = 0;
  4671                           
  4672                           ; BSR set to: 0
  4673                           ;incstack = 0
  4674  0049F2  0E00               	movlw	0
  4675  0049F4  0101               	movlb	1	; () banked
  4676  0049F6  6F3A               	movwf	(_first+1)& (0+255),b
  4677  0049F8  0E00               	movlw	0
  4678  0049FA  6F39               	movwf	_first& (0+255),b
  4679                           
  4680                           ;sort.c: 418: f_loadingNewCan = 0;
  4681  0049FC  0E00               	movlw	0
  4682  0049FE  0100               	movlb	0	; () banked
  4683  004A00  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4684  004A02  0E00               	movlw	0
  4685  004A04  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  4686                           
  4687                           ;sort.c: 419: f_lastCan = 0;
  4688  004A06  0E00               	movlw	0
  4689  004A08  0100               	movlb	0	; () banked
  4690  004A0A  6FEB               	movwf	(_f_lastCan+1)& (0+255),b
  4691  004A0C  0E00               	movlw	0
  4692  004A0E  6FEA               	movwf	_f_lastCan& (0+255),b
  4693                           
  4694                           ;sort.c: 420: f_ID_receive = 1;
  4695  004A10  0E00               	movlw	0
  4696  004A12  0101               	movlb	1	; () banked
  4697  004A14  6F30               	movwf	(_f_ID_receive+1)& (0+255),b
  4698  004A16  0E01               	movlw	1
  4699  004A18  6F2F               	movwf	_f_ID_receive& (0+255),b
  4700                           
  4701                           ;sort.c: 421: f_can_coming_to_ID = 0;
  4702  004A1A  0E00               	movlw	0
  4703  004A1C  0101               	movlb	1	; () banked
  4704  004A1E  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4705  004A20  0E00               	movlw	0
  4706  004A22  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4707                           
  4708                           ;sort.c: 422: f_can_coming_to_distribution = 0;
  4709  004A24  0E00               	movlw	0
  4710  004A26  0101               	movlb	1	; () banked
  4711  004A28  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4712  004A2A  0E00               	movlw	0
  4713  004A2C  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  4714                           
  4715                           ;sort.c: 423: f_can_distributed = 1;
  4716  004A2E  0E00               	movlw	0
  4717  004A30  0101               	movlb	1	; () banked
  4718  004A32  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  4719  004A34  0E01               	movlw	1
  4720  004A36  6F35               	movwf	_f_can_distributed& (0+255),b
  4721                           
  4722                           ;sort.c: 424: f_most_recent_sort_time = 0;
  4723  004A38  0E00               	movlw	0
  4724  004A3A  0101               	movlb	1	; () banked
  4725  004A3C  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4726  004A3E  0E00               	movlw	0
  4727  004A40  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  4728                           
  4729                           ;sort.c: 427: count_total = 0;
  4730  004A42  0E00               	movlw	0
  4731  004A44  0100               	movlb	0	; () banked
  4732  004A46  6FFF               	movwf	(_count_total+1)& (0+255),b
  4733  004A48  0E00               	movlw	0
  4734  004A4A  6FFE               	movwf	_count_total& (0+255),b
  4735                           
  4736                           ;sort.c: 428: count_pop_no_tab = 0;
  4737  004A4C  0E00               	movlw	0
  4738  004A4E  0101               	movlb	1	; () banked
  4739  004A50  6F28               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4740  004A52  0E00               	movlw	0
  4741  004A54  6F27               	movwf	_count_pop_no_tab& (0+255),b
  4742                           
  4743                           ;sort.c: 429: count_pop_w_tab = 0;
  4744  004A56  0E00               	movlw	0
  4745  004A58  0101               	movlb	1	; () banked
  4746  004A5A  6F2A               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4747  004A5C  0E00               	movlw	0
  4748  004A5E  6F29               	movwf	_count_pop_w_tab& (0+255),b
  4749                           
  4750                           ;sort.c: 430: count_can_w_lab = 0;
  4751  004A60  0E00               	movlw	0
  4752  004A62  0101               	movlb	1	; () banked
  4753  004A64  6F26               	movwf	(_count_can_w_lab+1)& (0+255),b
  4754  004A66  0E00               	movlw	0
  4755  004A68  6F25               	movwf	_count_can_w_lab& (0+255),b
  4756                           
  4757                           ;sort.c: 431: count_can_no_lab = 0;
  4758  004A6A  0E00               	movlw	0
  4759  004A6C  0101               	movlb	1	; () banked
  4760  004A6E  6F24               	movwf	(_count_can_no_lab+1)& (0+255),b
  4761  004A70  0E00               	movlw	0
  4762  004A72  6F23               	movwf	_count_can_no_lab& (0+255),b
  4763                           
  4764                           ;sort.c: 434: most_recent_sort_time = 999;
  4765  004A74  0E03               	movlw	3
  4766  004A76  0101               	movlb	1	; () banked
  4767  004A78  6F46               	movwf	(_most_recent_sort_time+1)& (0+255),b
  4768  004A7A  0EE7               	movlw	231
  4769  004A7C  6F45               	movwf	_most_recent_sort_time& (0+255),b
  4770                           
  4771                           ;sort.c: 437: servo_timer_counter = 0;
  4772  004A7E  0E00               	movlw	0
  4773  004A80  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
  4774  004A82  0E00               	movlw	0
  4775  004A84  6E6D               	movwf	_servo_timer_counter,c	;volatile
  4776                           
  4777                           ;sort.c: 438: servo_timer_target = 9999;
  4778  004A86  0E27               	movlw	39
  4779  004A88  6E70               	movwf	_servo_timer_target+1,c	;volatile
  4780  004A8A  0E0F               	movlw	15
  4781  004A8C  6E6F               	movwf	_servo_timer_target,c	;volatile
  4782                           
  4783                           ;sort.c: 439: timer2_counter = 0;
  4784  004A8E  0E00               	movlw	0
  4785  004A90  6E74               	movwf	_timer2_counter+1,c	;volatile
  4786  004A92  0E00               	movlw	0
  4787  004A94  6E73               	movwf	_timer2_counter,c	;volatile
  4788                           
  4789                           ;sort.c: 440: f_arm_position = 0;
  4790  004A96  0E00               	movlw	0
  4791  004A98  0100               	movlb	0	; () banked
  4792  004A9A  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  4793  004A9C  0E00               	movlw	0
  4794  004A9E  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  4795                           
  4796                           ; BSR set to: 0
  4797                           ;sort.c: 441: pan_servo_state = -1;
  4798  004AA0  686B               	setf	_pan_servo_state,c	;volatile
  4799  004AA2  686C               	setf	_pan_servo_state+1,c	;volatile
  4800                           
  4801                           ; BSR set to: 0
  4802                           ;sort.c: 442: tilt_servo_state = -1;
  4803  004AA4  6871               	setf	_tilt_servo_state,c	;volatile
  4804  004AA6  6872               	setf	_tilt_servo_state+1,c	;volatile
  4805                           
  4806                           ;sort.c: 443: f_panning_to_bin = 0;
  4807  004AA8  0E00               	movlw	0
  4808  004AAA  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
  4809  004AAC  0E00               	movlw	0
  4810  004AAE  6E69               	movwf	_f_panning_to_bin,c	;volatile
  4811                           
  4812                           ; BSR set to: 0
  4813  004AB0  0012               	return		;funcret
  4814  004AB2                     __end_of_initGlobalVars:
  4815                           	opt stack 0
  4816                           tblptru	equ	0xFF8
  4817                           tblptrh	equ	0xFF7
  4818                           tblptrl	equ	0xFF6
  4819                           tablat	equ	0xFF5
  4820                           prodh	equ	0xFF4
  4821                           prodl	equ	0xFF3
  4822                           postinc0	equ	0xFEE
  4823                           wreg	equ	0xFE8
  4824                           postdec1	equ	0xFE5
  4825                           fsr1l	equ	0xFE1
  4826                           indf2	equ	0xFDF
  4827                           postinc2	equ	0xFDE
  4828                           postdec2	equ	0xFDD
  4829                           fsr2h	equ	0xFDA
  4830                           fsr2l	equ	0xFD9
  4831                           status	equ	0xFD8
  4832                           
  4833 ;; *************** function _getMAG *****************
  4834 ;; Defined at:
  4835 ;;		line 564 in file "sort.c"
  4836 ;; Parameters:    Size  Location     Type
  4837 ;;		None
  4838 ;; Auto vars:     Size  Location     Type
  4839 ;;		None
  4840 ;; Return value:  Size  Location     Type
  4841 ;;                  1    wreg      void 
  4842 ;; Registers used:
  4843 ;;		wreg, status,2, status,0, cstack
  4844 ;; Tracked objects:
  4845 ;;		On entry : 0/0
  4846 ;;		On exit  : 0/0
  4847 ;;		Unchanged: 0/0
  4848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4851 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4852 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4853 ;;Total ram usage:        2 bytes
  4854 ;; Hardware stack levels used:    1
  4855 ;; Hardware stack levels required when called:    9
  4856 ;; This function calls:
  4857 ;;		_readMAG
  4858 ;; This function is called by:
  4859 ;;		_Loading
  4860 ;; This function uses a non-reentrant model
  4861 ;;
  4862                           
  4863                           	psect	text5
  4864  0057D2                     __ptext5:
  4865                           	opt stack 0
  4866  0057D2                     _getMAG:
  4867                           	opt stack 19
  4868                           
  4869                           ;sort.c: 565: readMAG();
  4870                           
  4871                           ; BSR set to: 0
  4872                           ;incstack = 0
  4873  0057D2  ECD2  F02A         	call	_readMAG	;wreg free
  4874                           
  4875                           ;sort.c: 567: if(MAG_signal==1){
  4876  0057D6  0100               	movlb	0	; () banked
  4877  0057D8  05E2               	decf	_MAG_signal& (0+255),w,b
  4878  0057DA  0100               	movlb	0	; () banked
  4879  0057DC  11E3               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4880  0057DE  A4D8               	btfss	status,2,c
  4881  0057E0  0012               	return	
  4882                           
  4883                           ; BSR set to: 0
  4884                           ;sort.c: 568: _delay((unsigned long)((500)*(32000000/4000.0)));
  4885  0057E2  0E15               	movlw	21
  4886  0057E4  0100               	movlb	0	; () banked
  4887  0057E6  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4888  0057E8  0E4B               	movlw	75
  4889  0057EA  0100               	movlb	0	; () banked
  4890  0057EC  6F86               	movwf	??_getMAG& (0+255),b
  4891  0057EE  0EBE               	movlw	190
  4892  0057F0                     u10047:
  4893  0057F0  2EE8               	decfsz	wreg,f,c
  4894  0057F2  D7FE               	bra	u10047
  4895  0057F4  2F86               	decfsz	??_getMAG& (0+255),f,b
  4896  0057F6  D7FC               	bra	u10047
  4897  0057F8  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4898  0057FA  D7FA               	bra	u10047
  4899  0057FC  F000               	nop	
  4900                           
  4901                           ;sort.c: 569: readMAG();
  4902  0057FE  ECD2  F02A         	call	_readMAG	;wreg free
  4903  005802  0012               	return	
  4904  005804                     __end_of_getMAG:
  4905                           	opt stack 0
  4906                           tblptru	equ	0xFF8
  4907                           tblptrh	equ	0xFF7
  4908                           tblptrl	equ	0xFF6
  4909                           tablat	equ	0xFF5
  4910                           prodh	equ	0xFF4
  4911                           prodl	equ	0xFF3
  4912                           postinc0	equ	0xFEE
  4913                           wreg	equ	0xFE8
  4914                           postdec1	equ	0xFE5
  4915                           fsr1l	equ	0xFE1
  4916                           indf2	equ	0xFDF
  4917                           postinc2	equ	0xFDE
  4918                           postdec2	equ	0xFDD
  4919                           fsr2h	equ	0xFDA
  4920                           fsr2l	equ	0xFD9
  4921                           status	equ	0xFD8
  4922                           
  4923 ;; *************** function _getIR *****************
  4924 ;; Defined at:
  4925 ;;		line 548 in file "sort.c"
  4926 ;; Parameters:    Size  Location     Type
  4927 ;;		None
  4928 ;; Auto vars:     Size  Location     Type
  4929 ;;  i               2    7[BANK0 ] int 
  4930 ;; Return value:  Size  Location     Type
  4931 ;;                  1    wreg      void 
  4932 ;; Registers used:
  4933 ;;		wreg, status,2, status,0, cstack
  4934 ;; Tracked objects:
  4935 ;;		On entry : 0/0
  4936 ;;		On exit  : 0/0
  4937 ;;		Unchanged: 0/0
  4938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4940 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4941 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4942 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4943 ;;Total ram usage:        3 bytes
  4944 ;; Hardware stack levels used:    1
  4945 ;; Hardware stack levels required when called:    9
  4946 ;; This function calls:
  4947 ;;		_readIR
  4948 ;; This function is called by:
  4949 ;;		_Loading
  4950 ;; This function uses a non-reentrant model
  4951 ;;
  4952                           
  4953                           	psect	text6
  4954  00507C                     __ptext6:
  4955                           	opt stack 0
  4956  00507C                     _getIR:
  4957                           	opt stack 19
  4958                           
  4959                           ;sort.c: 549: readIR();
  4960                           
  4961                           ;incstack = 0
  4962  00507C  EC86  F02A         	call	_readIR	;wreg free
  4963                           
  4964                           ;sort.c: 550: for(int i = 0; i < 150; i++){
  4965  005080  0E00               	movlw	0
  4966  005082  0100               	movlb	0	; () banked
  4967  005084  6F88               	movwf	(getIR@i+1)& (0+255),b
  4968  005086  0E00               	movlw	0
  4969  005088  6F87               	movwf	getIR@i& (0+255),b
  4970  00508A                     l7453:
  4971                           
  4972                           ; BSR set to: 0
  4973  00508A  0100               	movlb	0	; () banked
  4974  00508C  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4975  00508E  D008               	goto	l7457
  4976  005090  0100               	movlb	0	; () banked
  4977  005092  5188               	movf	(getIR@i+1)& (0+255),w,b
  4978  005094  E11A               	bnz	l7469
  4979  005096  0E96               	movlw	150
  4980  005098  0100               	movlb	0	; () banked
  4981  00509A  5D87               	subwf	getIR@i& (0+255),w,b
  4982  00509C  B0D8               	btfsc	status,0,c
  4983  00509E  D015               	goto	l7469
  4984  0050A0                     l7457:
  4985                           
  4986                           ; BSR set to: 0
  4987                           ;sort.c: 551: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4988  0050A0  0E06               	movlw	6
  4989  0050A2  0100               	movlb	0	; () banked
  4990  0050A4  6F86               	movwf	??_getIR& (0+255),b
  4991  0050A6  0E30               	movlw	48
  4992  0050A8                     u10057:
  4993  0050A8  2EE8               	decfsz	wreg,f,c
  4994  0050AA  D7FE               	bra	u10057
  4995  0050AC  2F86               	decfsz	??_getIR& (0+255),f,b
  4996  0050AE  D7FC               	bra	u10057
  4997  0050B0  F000               	nop	
  4998                           
  4999                           ;sort.c: 552: readIR();
  5000  0050B2  EC86  F02A         	call	_readIR	;wreg free
  5001                           
  5002                           ;sort.c: 553: if(!IR_signal){
  5003  0050B6  0100               	movlb	0	; () banked
  5004  0050B8  51E0               	movf	_IR_signal& (0+255),w,b
  5005  0050BA  0100               	movlb	0	; () banked
  5006  0050BC  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  5007  0050BE  B4D8               	btfsc	status,2,c
  5008  0050C0  D004               	goto	l7469
  5009                           
  5010                           ; BSR set to: 0
  5011                           
  5012                           ; BSR set to: 0
  5013                           
  5014                           ; BSR set to: 0
  5015                           ;sort.c: 554: break;
  5016  0050C2  0100               	movlb	0	; () banked
  5017  0050C4  4B87               	infsnz	getIR@i& (0+255),f,b
  5018  0050C6  2B88               	incf	(getIR@i+1)& (0+255),f,b
  5019  0050C8  D7E0               	goto	l7453
  5020  0050CA                     l7469:
  5021                           
  5022                           ; BSR set to: 0
  5023                           ;sort.c: 555: }
  5024                           ;sort.c: 556: }
  5025                           ;sort.c: 557: if(IR_signal==1){
  5026  0050CA  0100               	movlb	0	; () banked
  5027  0050CC  05E0               	decf	_IR_signal& (0+255),w,b
  5028  0050CE  0100               	movlb	0	; () banked
  5029  0050D0  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  5030  0050D2  A4D8               	btfss	status,2,c
  5031  0050D4  D006               	goto	l7473
  5032                           
  5033                           ; BSR set to: 0
  5034                           ;sort.c: 558: f_loadingNewCan = 1;
  5035  0050D6  0E00               	movlw	0
  5036  0050D8  0100               	movlb	0	; () banked
  5037  0050DA  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  5038  0050DC  0E01               	movlw	1
  5039  0050DE  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  5040                           
  5041                           ;sort.c: 559: }
  5042  0050E0  0012               	return	
  5043  0050E2                     l7473:
  5044                           
  5045                           ; BSR set to: 0
  5046                           ;sort.c: 560: else{
  5047                           ;sort.c: 561: f_loadingNewCan = 0;
  5048  0050E2  0E00               	movlw	0
  5049  0050E4  0100               	movlb	0	; () banked
  5050  0050E6  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  5051  0050E8  0E00               	movlw	0
  5052  0050EA  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  5053  0050EC  0012               	return	
  5054  0050EE                     __end_of_getIR:
  5055                           	opt stack 0
  5056                           tblptru	equ	0xFF8
  5057                           tblptrh	equ	0xFF7
  5058                           tblptrl	equ	0xFF6
  5059                           tablat	equ	0xFF5
  5060                           prodh	equ	0xFF4
  5061                           prodl	equ	0xFF3
  5062                           postinc0	equ	0xFEE
  5063                           wreg	equ	0xFE8
  5064                           postdec1	equ	0xFE5
  5065                           fsr1l	equ	0xFE1
  5066                           indf2	equ	0xFDF
  5067                           postinc2	equ	0xFDE
  5068                           postdec2	equ	0xFDD
  5069                           fsr2h	equ	0xFDA
  5070                           fsr2l	equ	0xFD9
  5071                           status	equ	0xFD8
  5072                           
  5073 ;; *************** function _readIR *****************
  5074 ;; Defined at:
  5075 ;;		line 23 in file "ADCFunctionality.c"
  5076 ;; Parameters:    Size  Location     Type
  5077 ;;		None
  5078 ;; Auto vars:     Size  Location     Type
  5079 ;;  res             2    4[BANK0 ] int 
  5080 ;; Return value:  Size  Location     Type
  5081 ;;                  1    wreg      void 
  5082 ;; Registers used:
  5083 ;;		wreg, status,2, status,0, cstack
  5084 ;; Tracked objects:
  5085 ;;		On entry : 0/0
  5086 ;;		On exit  : 0/0
  5087 ;;		Unchanged: 0/0
  5088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5090 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5091 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5092 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5093 ;;Total ram usage:        4 bytes
  5094 ;; Hardware stack levels used:    1
  5095 ;; Hardware stack levels required when called:    8
  5096 ;; This function calls:
  5097 ;;		_readADC
  5098 ;; This function is called by:
  5099 ;;		_Loading
  5100 ;;		_getIR
  5101 ;; This function uses a non-reentrant model
  5102 ;;
  5103                           
  5104                           	psect	text7
  5105  00550C                     __ptext7:
  5106                           	opt stack 0
  5107  00550C                     _readIR:
  5108                           	opt stack 20
  5109                           
  5110                           ;ADCFunctionality.c: 24: readADC(0);
  5111                           
  5112                           ; BSR set to: 0
  5113                           ;incstack = 0
  5114  00550C  0E00               	movlw	0
  5115  00550E  EC4F  F02D         	call	_readADC
  5116                           
  5117                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  5118  005512  50C3               	movf	4035,w,c	;volatile
  5119  005514  CFC4 F082          	movff	4036,??_readIR	;volatile
  5120  005518  0100               	movlb	0	; () banked
  5121  00551A  6B83               	clrf	(??_readIR+1)& (0+255),b
  5122  00551C  C082  F083         	movff	??_readIR,??_readIR+1
  5123  005520  0100               	movlb	0	; () banked
  5124  005522  6B82               	clrf	??_readIR& (0+255),b
  5125  005524  0100               	movlb	0	; () banked
  5126  005526  1182               	iorwf	??_readIR& (0+255),w,b
  5127  005528  0100               	movlb	0	; () banked
  5128  00552A  6F84               	movwf	readIR@res& (0+255),b
  5129  00552C  0100               	movlb	0	; () banked
  5130  00552E  5183               	movf	(??_readIR+1)& (0+255),w,b
  5131  005530  0100               	movlb	0	; () banked
  5132  005532  6F85               	movwf	(readIR@res+1)& (0+255),b
  5133                           
  5134                           ; BSR set to: 0
  5135                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  5136  005534  0100               	movlb	0	; () banked
  5137  005536  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  5138  005538  D00A               	goto	u5140
  5139  00553A  0E21               	movlw	33
  5140  00553C  0100               	movlb	0	; () banked
  5141  00553E  5D84               	subwf	readIR@res& (0+255),w,b
  5142  005540  0E03               	movlw	3
  5143  005542  0100               	movlb	0	; () banked
  5144  005544  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  5145  005546  A0D8               	btfss	status,0,c
  5146  005548  D002               	goto	u5140
  5147  00554A  0E01               	movlw	1
  5148  00554C  D001               	goto	u5150
  5149  00554E                     u5140:
  5150  00554E  0E00               	movlw	0
  5151  005550                     u5150:
  5152  005550  0100               	movlb	0	; () banked
  5153  005552  6FE0               	movwf	_IR_signal& (0+255),b
  5154  005554  6BE1               	clrf	(_IR_signal+1)& (0+255),b
  5155                           
  5156                           ; BSR set to: 0
  5157  005556  0012               	return		;funcret
  5158  005558                     __end_of_readIR:
  5159                           	opt stack 0
  5160                           tblptru	equ	0xFF8
  5161                           tblptrh	equ	0xFF7
  5162                           tblptrl	equ	0xFF6
  5163                           tablat	equ	0xFF5
  5164                           prodh	equ	0xFF4
  5165                           prodl	equ	0xFF3
  5166                           postinc0	equ	0xFEE
  5167                           wreg	equ	0xFE8
  5168                           postdec1	equ	0xFE5
  5169                           fsr1l	equ	0xFE1
  5170                           indf2	equ	0xFDF
  5171                           postinc2	equ	0xFDE
  5172                           postdec2	equ	0xFDD
  5173                           fsr2h	equ	0xFDA
  5174                           fsr2l	equ	0xFD9
  5175                           status	equ	0xFD8
  5176                           
  5177 ;; *************** function _ID *****************
  5178 ;; Defined at:
  5179 ;;		line 273 in file "sort.c"
  5180 ;; Parameters:    Size  Location     Type
  5181 ;;		None
  5182 ;; Auto vars:     Size  Location     Type
  5183 ;;  i               2   55[BANK0 ] int 
  5184 ;;  i               2   51[BANK0 ] int 
  5185 ;;  i               2   53[BANK0 ] int 
  5186 ;;  i               2   49[BANK0 ] int 
  5187 ;;  i               2   47[BANK0 ] int 
  5188 ;;  n               2   64[BANK0 ] const int 
  5189 ;;  res3            2   62[BANK0 ] int 
  5190 ;;  res2            2   60[BANK0 ] int 
  5191 ;;  res1            2   58[BANK0 ] int 
  5192 ;;  time            1   57[BANK0 ] const unsigned char 
  5193 ;; Return value:  Size  Location     Type
  5194 ;;                  1    wreg      void 
  5195 ;; Registers used:
  5196 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5197 ;; Tracked objects:
  5198 ;;		On entry : 0/0
  5199 ;;		On exit  : 0/0
  5200 ;;		Unchanged: 0/0
  5201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5203 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5204 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5205 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5206 ;;Total ram usage:       23 bytes
  5207 ;; Hardware stack levels used:    1
  5208 ;; Hardware stack levels required when called:   10
  5209 ;; This function calls:
  5210 ;;		___awdiv
  5211 ;;		___awtoft
  5212 ;;		___ftge
  5213 ;;		_delay_ms
  5214 ;;		_lcdInst
  5215 ;;		_printf
  5216 ;;		_readCOND
  5217 ;; This function is called by:
  5218 ;;		_sort
  5219 ;; This function uses a non-reentrant model
  5220 ;;
  5221                           
  5222                           	psect	text8
  5223  001784                     __ptext8:
  5224                           	opt stack 0
  5225  001784                     _ID:
  5226                           	opt stack 19
  5227                           
  5228                           ;sort.c: 274: if(f_can_coming_to_ID){
  5229                           
  5230                           ; BSR set to: 0
  5231                           ;incstack = 0
  5232  001784  0101               	movlb	1	; () banked
  5233  001786  5131               	movf	_f_can_coming_to_ID& (0+255),w,b
  5234  001788  0101               	movlb	1	; () banked
  5235  00178A  1132               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  5236  00178C  B4D8               	btfsc	status,2,c
  5237  00178E  0012               	return	
  5238                           
  5239                           ; BSR set to: 1
  5240                           ;sort.c: 276: _delay((unsigned long)((1000)*(32000000/4000.0)));
  5241  001790  0E29               	movlw	41
  5242  001792  0100               	movlb	0	; () banked
  5243  001794  6FAC               	movwf	(??_ID+1)& (0+255),b
  5244  001796  0E96               	movlw	150
  5245  001798  0100               	movlb	0	; () banked
  5246  00179A  6FAB               	movwf	??_ID& (0+255),b
  5247  00179C  0E7F               	movlw	127
  5248  00179E                     u10067:
  5249  00179E  2EE8               	decfsz	wreg,f,c
  5250  0017A0  D7FE               	bra	u10067
  5251  0017A2  2FAB               	decfsz	??_ID& (0+255),f,b
  5252  0017A4  D7FC               	bra	u10067
  5253  0017A6  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5254  0017A8  D7FA               	bra	u10067
  5255                           
  5256                           ;sort.c: 278: f_arm_position = 0;
  5257  0017AA  0E00               	movlw	0
  5258  0017AC  0100               	movlb	0	; () banked
  5259  0017AE  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  5260  0017B0  0E00               	movlw	0
  5261  0017B2  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  5262                           
  5263                           ; BSR set to: 0
  5264                           ;sort.c: 280: LATAbits.LATA3 = 1;
  5265  0017B4  8689               	bsf	3977,3,c	;volatile
  5266                           
  5267                           ; BSR set to: 0
  5268                           ;sort.c: 283: const int n = 10;
  5269  0017B6  0E00               	movlw	0
  5270  0017B8  0100               	movlb	0	; () banked
  5271  0017BA  6FC1               	movwf	(ID@n+1)& (0+255),b
  5272  0017BC  0E0A               	movlw	10
  5273  0017BE  6FC0               	movwf	ID@n& (0+255),b
  5274                           
  5275                           ; BSR set to: 0
  5276                           ;sort.c: 284: const unsigned char time = (600 / n);
  5277  0017C0  0E02               	movlw	2
  5278  0017C2  0100               	movlb	0	; () banked
  5279  0017C4  6F87               	movwf	(___awdiv@dividend+1)& (0+255),b
  5280  0017C6  0E58               	movlw	88
  5281  0017C8  6F86               	movwf	___awdiv@dividend& (0+255),b
  5282  0017CA  C0C0  F088         	movff	ID@n,___awdiv@divisor
  5283  0017CE  C0C1  F089         	movff	ID@n+1,___awdiv@divisor+1
  5284  0017D2  EC59  F025         	call	___awdiv	;wreg free
  5285  0017D6  0100               	movlb	0	; () banked
  5286  0017D8  5186               	movf	?___awdiv& (0+255),w,b
  5287  0017DA  0100               	movlb	0	; () banked
  5288  0017DC  6FB9               	movwf	ID@time& (0+255),b
  5289                           
  5290                           ; BSR set to: 0
  5291                           ;sort.c: 285: int res1 = 0;
  5292  0017DE  0E00               	movlw	0
  5293  0017E0  0100               	movlb	0	; () banked
  5294  0017E2  6FBB               	movwf	(ID@res1+1)& (0+255),b
  5295  0017E4  0E00               	movlw	0
  5296  0017E6  6FBA               	movwf	ID@res1& (0+255),b
  5297                           
  5298                           ; BSR set to: 0
  5299                           ;sort.c: 286: int res2 = 0;
  5300  0017E8  0E00               	movlw	0
  5301  0017EA  0100               	movlb	0	; () banked
  5302  0017EC  6FBD               	movwf	(ID@res2+1)& (0+255),b
  5303  0017EE  0E00               	movlw	0
  5304  0017F0  6FBC               	movwf	ID@res2& (0+255),b
  5305                           
  5306                           ; BSR set to: 0
  5307                           ;sort.c: 287: int res3 = 0;
  5308  0017F2  0E00               	movlw	0
  5309  0017F4  0100               	movlb	0	; () banked
  5310  0017F6  6FBF               	movwf	(ID@res3+1)& (0+255),b
  5311  0017F8  0E00               	movlw	0
  5312  0017FA  6FBE               	movwf	ID@res3& (0+255),b
  5313                           
  5314                           ; BSR set to: 0
  5315                           ;sort.c: 288: for(int i = 0; i<n; i++){
  5316  0017FC  0E00               	movlw	0
  5317  0017FE  0100               	movlb	0	; () banked
  5318  001800  6FB0               	movwf	(ID@i+1)& (0+255),b
  5319  001802  0E00               	movlw	0
  5320  001804  6FAF               	movwf	ID@i& (0+255),b
  5321  001806                     l8075:
  5322                           
  5323                           ; BSR set to: 0
  5324  001806  0100               	movlb	0	; () banked
  5325  001808  51C0               	movf	ID@n& (0+255),w,b
  5326  00180A  0100               	movlb	0	; () banked
  5327  00180C  5DAF               	subwf	ID@i& (0+255),w,b
  5328  00180E  0100               	movlb	0	; () banked
  5329  001810  51B0               	movf	(ID@i+1)& (0+255),w,b
  5330  001812  0A80               	xorlw	128
  5331  001814  0100               	movlb	0	; () banked
  5332  001816  6FAB               	movwf	??_ID& (0+255),b
  5333  001818  0100               	movlb	0	; () banked
  5334  00181A  51C1               	movf	(ID@n+1)& (0+255),w,b
  5335  00181C  0A80               	xorlw	128
  5336  00181E  0100               	movlb	0	; () banked
  5337  001820  59AB               	subwfb	??_ID& (0+255),w,b
  5338  001822  B0D8               	btfsc	status,0,c
  5339  001824  D012               	goto	l845
  5340                           
  5341                           ; BSR set to: 0
  5342                           ;sort.c: 289: delay_ms(time);
  5343                           
  5344                           ; BSR set to: 0
  5345                           
  5346                           ; BSR set to: 0
  5347  001826  0100               	movlb	0	; () banked
  5348  001828  51B9               	movf	ID@time& (0+255),w,b
  5349  00182A  EC7A  F02D         	call	_delay_ms
  5350                           
  5351                           ;sort.c: 290: readCOND();
  5352  00182E  ECAC  F02A         	call	_readCOND	;wreg free
  5353                           
  5354                           ;sort.c: 291: res1 += COND_signal;
  5355  001832  0100               	movlb	0	; () banked
  5356  001834  51DE               	movf	_COND_signal& (0+255),w,b
  5357  001836  0100               	movlb	0	; () banked
  5358  001838  27BA               	addwf	ID@res1& (0+255),f,b
  5359  00183A  0100               	movlb	0	; () banked
  5360  00183C  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5361  00183E  0100               	movlb	0	; () banked
  5362  001840  23BB               	addwfc	(ID@res1+1)& (0+255),f,b
  5363                           
  5364                           ; BSR set to: 0
  5365  001842  0100               	movlb	0	; () banked
  5366  001844  4BAF               	infsnz	ID@i& (0+255),f,b
  5367  001846  2BB0               	incf	(ID@i+1)& (0+255),f,b
  5368  001848  D7DE               	goto	l8075
  5369  00184A                     l845:
  5370                           
  5371                           ; BSR set to: 0
  5372                           ;sort.c: 292: }
  5373                           ;sort.c: 293: LATAbits.LATA3 = 0;
  5374  00184A  9689               	bcf	3977,3,c	;volatile
  5375                           
  5376                           ; BSR set to: 0
  5377                           ;sort.c: 294: _delay((unsigned long)((200)*(32000000/4000.0)));
  5378  00184C  0E09               	movlw	9
  5379  00184E  0100               	movlb	0	; () banked
  5380  001850  6FAC               	movwf	(??_ID+1)& (0+255),b
  5381  001852  0E1E               	movlw	30
  5382  001854  0100               	movlb	0	; () banked
  5383  001856  6FAB               	movwf	??_ID& (0+255),b
  5384  001858  0EE4               	movlw	228
  5385  00185A                     u10077:
  5386  00185A  2EE8               	decfsz	wreg,f,c
  5387  00185C  D7FE               	bra	u10077
  5388  00185E  2FAB               	decfsz	??_ID& (0+255),f,b
  5389  001860  D7FC               	bra	u10077
  5390  001862  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5391  001864  D7FA               	bra	u10077
  5392  001866  F000               	nop	
  5393                           
  5394                           ;sort.c: 295: LATAbits.LATA3 = 1;
  5395  001868  8689               	bsf	3977,3,c	;volatile
  5396                           
  5397                           ;sort.c: 296: for(int i = 0; i<n; i++){
  5398  00186A  0E00               	movlw	0
  5399  00186C  0100               	movlb	0	; () banked
  5400  00186E  6FB2               	movwf	(ID@i_1141+1)& (0+255),b
  5401  001870  0E00               	movlw	0
  5402  001872  6FB1               	movwf	ID@i_1141& (0+255),b
  5403  001874                     l8093:
  5404                           
  5405                           ; BSR set to: 0
  5406  001874  0100               	movlb	0	; () banked
  5407  001876  51C0               	movf	ID@n& (0+255),w,b
  5408  001878  0100               	movlb	0	; () banked
  5409  00187A  5DB1               	subwf	ID@i_1141& (0+255),w,b
  5410  00187C  0100               	movlb	0	; () banked
  5411  00187E  51B2               	movf	(ID@i_1141+1)& (0+255),w,b
  5412  001880  0A80               	xorlw	128
  5413  001882  0100               	movlb	0	; () banked
  5414  001884  6FAB               	movwf	??_ID& (0+255),b
  5415  001886  0100               	movlb	0	; () banked
  5416  001888  51C1               	movf	(ID@n+1)& (0+255),w,b
  5417  00188A  0A80               	xorlw	128
  5418  00188C  0100               	movlb	0	; () banked
  5419  00188E  59AB               	subwfb	??_ID& (0+255),w,b
  5420  001890  B0D8               	btfsc	status,0,c
  5421  001892  D012               	goto	l8105
  5422                           
  5423                           ; BSR set to: 0
  5424                           ;sort.c: 297: delay_ms(time);
  5425                           
  5426                           ; BSR set to: 0
  5427                           
  5428                           ; BSR set to: 0
  5429  001894  0100               	movlb	0	; () banked
  5430  001896  51B9               	movf	ID@time& (0+255),w,b
  5431  001898  EC7A  F02D         	call	_delay_ms
  5432                           
  5433                           ;sort.c: 298: readCOND();
  5434  00189C  ECAC  F02A         	call	_readCOND	;wreg free
  5435                           
  5436                           ;sort.c: 299: res2 += COND_signal;
  5437  0018A0  0100               	movlb	0	; () banked
  5438  0018A2  51DE               	movf	_COND_signal& (0+255),w,b
  5439  0018A4  0100               	movlb	0	; () banked
  5440  0018A6  27BC               	addwf	ID@res2& (0+255),f,b
  5441  0018A8  0100               	movlb	0	; () banked
  5442  0018AA  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5443  0018AC  0100               	movlb	0	; () banked
  5444  0018AE  23BD               	addwfc	(ID@res2+1)& (0+255),f,b
  5445                           
  5446                           ; BSR set to: 0
  5447  0018B0  0100               	movlb	0	; () banked
  5448  0018B2  4BB1               	infsnz	ID@i_1141& (0+255),f,b
  5449  0018B4  2BB2               	incf	(ID@i_1141+1)& (0+255),f,b
  5450  0018B6  D7DE               	goto	l8093
  5451  0018B8                     l8105:
  5452                           
  5453                           ; BSR set to: 0
  5454                           ;sort.c: 300: }
  5455                           ;sort.c: 301: res1 = ((res1 / n) > 0.3) ? 1 : 0;
  5456  0018B8  0E9A               	movlw	154
  5457  0018BA  0100               	movlb	0	; () banked
  5458  0018BC  6F92               	movwf	___ftge@ff1& (0+255),b
  5459  0018BE  0E99               	movlw	153
  5460  0018C0  0100               	movlb	0	; () banked
  5461  0018C2  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5462  0018C4  0E3E               	movlw	62
  5463  0018C6  0100               	movlb	0	; () banked
  5464  0018C8  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5465  0018CA  C0C0  F088         	movff	ID@n,___awdiv@divisor
  5466  0018CE  C0C1  F089         	movff	ID@n+1,___awdiv@divisor+1
  5467  0018D2  C0BA  F086         	movff	ID@res1,___awdiv@dividend
  5468  0018D6  C0BB  F087         	movff	ID@res1+1,___awdiv@dividend+1
  5469  0018DA  EC59  F025         	call	___awdiv	;wreg free
  5470  0018DE  C086  F08E         	movff	?___awdiv,___awtoft@c
  5471  0018E2  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5472  0018E6  EC1B  F02B         	call	___awtoft	;wreg free
  5473  0018EA  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5474  0018EE  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5475  0018F2  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5476  0018F6  EC95  F024         	call	___ftge	;wreg free
  5477  0018FA  0100               	movlb	0	; () banked
  5478  0018FC  B0D8               	btfsc	status,0,c
  5479  0018FE  D002               	goto	u6830
  5480  001900  0E01               	movlw	1
  5481  001902  D001               	goto	u6840
  5482  001904                     u6830:
  5483  001904  0E00               	movlw	0
  5484  001906                     u6840:
  5485  001906  0100               	movlb	0	; () banked
  5486  001908  6FBA               	movwf	ID@res1& (0+255),b
  5487  00190A  6BBB               	clrf	(ID@res1+1)& (0+255),b
  5488                           
  5489                           ;sort.c: 302: res2 = ((res2 / n) > 0.3) ? 1 : 0;
  5490  00190C  0E9A               	movlw	154
  5491  00190E  0100               	movlb	0	; () banked
  5492  001910  6F92               	movwf	___ftge@ff1& (0+255),b
  5493  001912  0E99               	movlw	153
  5494  001914  0100               	movlb	0	; () banked
  5495  001916  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5496  001918  0E3E               	movlw	62
  5497  00191A  0100               	movlb	0	; () banked
  5498  00191C  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5499  00191E  C0C0  F088         	movff	ID@n,___awdiv@divisor
  5500  001922  C0C1  F089         	movff	ID@n+1,___awdiv@divisor+1
  5501  001926  C0BC  F086         	movff	ID@res2,___awdiv@dividend
  5502  00192A  C0BD  F087         	movff	ID@res2+1,___awdiv@dividend+1
  5503  00192E  EC59  F025         	call	___awdiv	;wreg free
  5504  001932  C086  F08E         	movff	?___awdiv,___awtoft@c
  5505  001936  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5506  00193A  EC1B  F02B         	call	___awtoft	;wreg free
  5507  00193E  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5508  001942  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5509  001946  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5510  00194A  EC95  F024         	call	___ftge	;wreg free
  5511  00194E  0100               	movlb	0	; () banked
  5512  001950  B0D8               	btfsc	status,0,c
  5513  001952  D002               	goto	u6850
  5514  001954  0E01               	movlw	1
  5515  001956  D001               	goto	u6860
  5516  001958                     u6850:
  5517  001958  0E00               	movlw	0
  5518  00195A                     u6860:
  5519  00195A  0100               	movlb	0	; () banked
  5520  00195C  6FBC               	movwf	ID@res2& (0+255),b
  5521  00195E  6BBD               	clrf	(ID@res2+1)& (0+255),b
  5522                           
  5523                           ; BSR set to: 0
  5524                           ;sort.c: 305: sensor_outputs[1] = (res1 || res2);
  5525  001960  0E01               	movlw	1
  5526  001962  0100               	movlb	0	; () banked
  5527  001964  6FAD               	movwf	_ID$1142& (0+255),b
  5528                           
  5529                           ; BSR set to: 0
  5530  001966  0100               	movlb	0	; () banked
  5531  001968  51BA               	movf	ID@res1& (0+255),w,b
  5532  00196A  0100               	movlb	0	; () banked
  5533  00196C  11BB               	iorwf	(ID@res1+1)& (0+255),w,b
  5534  00196E  A4D8               	btfss	status,2,c
  5535  001970  D009               	goto	l8115
  5536                           
  5537                           ; BSR set to: 0
  5538  001972  0100               	movlb	0	; () banked
  5539  001974  51BC               	movf	ID@res2& (0+255),w,b
  5540  001976  0100               	movlb	0	; () banked
  5541  001978  11BD               	iorwf	(ID@res2+1)& (0+255),w,b
  5542  00197A  A4D8               	btfss	status,2,c
  5543  00197C  D003               	goto	l8115
  5544                           
  5545                           ; BSR set to: 0
  5546  00197E  0E00               	movlw	0
  5547  001980  0100               	movlb	0	; () banked
  5548  001982  6FAD               	movwf	_ID$1142& (0+255),b
  5549  001984                     l8115:
  5550                           
  5551                           ; BSR set to: 0
  5552  001984  C0AD  F0DC         	movff	_ID$1142,_sensor_outputs+2
  5553  001988  0100               	movlb	0	; () banked
  5554  00198A  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5555                           
  5556                           ; BSR set to: 0
  5557                           ;sort.c: 306: LATAbits.LATA3 = 0;
  5558  00198C  9689               	bcf	3977,3,c	;volatile
  5559                           
  5560                           ; BSR set to: 0
  5561                           ;sort.c: 308: if(sensor_outputs[0]){
  5562  00198E  0100               	movlb	0	; () banked
  5563  001990  51DA               	movf	_sensor_outputs& (0+255),w,b
  5564  001992  0100               	movlb	0	; () banked
  5565  001994  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5566  001996  B4D8               	btfsc	status,2,c
  5567  001998  D077               	goto	l8153
  5568                           
  5569                           ; BSR set to: 0
  5570                           ;sort.c: 309: _delay((unsigned long)((200)*(32000000/4000.0)));
  5571  00199A  0E09               	movlw	9
  5572  00199C  0100               	movlb	0	; () banked
  5573  00199E  6FAC               	movwf	(??_ID+1)& (0+255),b
  5574  0019A0  0E1E               	movlw	30
  5575  0019A2  0100               	movlb	0	; () banked
  5576  0019A4  6FAB               	movwf	??_ID& (0+255),b
  5577  0019A6  0EE4               	movlw	228
  5578  0019A8                     u10087:
  5579  0019A8  2EE8               	decfsz	wreg,f,c
  5580  0019AA  D7FE               	bra	u10087
  5581  0019AC  2FAB               	decfsz	??_ID& (0+255),f,b
  5582  0019AE  D7FC               	bra	u10087
  5583  0019B0  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5584  0019B2  D7FA               	bra	u10087
  5585  0019B4  F000               	nop	
  5586                           
  5587                           ;sort.c: 310: LATAbits.LATA3 = 1;
  5588  0019B6  8689               	bsf	3977,3,c	;volatile
  5589                           
  5590                           ;sort.c: 311: for(int i = 0; i<n; i++){
  5591  0019B8  0E00               	movlw	0
  5592  0019BA  0100               	movlb	0	; () banked
  5593  0019BC  6FB4               	movwf	(ID@i_1143+1)& (0+255),b
  5594  0019BE  0E00               	movlw	0
  5595  0019C0  6FB3               	movwf	ID@i_1143& (0+255),b
  5596  0019C2                     l8127:
  5597                           
  5598                           ; BSR set to: 0
  5599  0019C2  0100               	movlb	0	; () banked
  5600  0019C4  51C0               	movf	ID@n& (0+255),w,b
  5601  0019C6  0100               	movlb	0	; () banked
  5602  0019C8  5DB3               	subwf	ID@i_1143& (0+255),w,b
  5603  0019CA  0100               	movlb	0	; () banked
  5604  0019CC  51B4               	movf	(ID@i_1143+1)& (0+255),w,b
  5605  0019CE  0A80               	xorlw	128
  5606  0019D0  0100               	movlb	0	; () banked
  5607  0019D2  6FAB               	movwf	??_ID& (0+255),b
  5608  0019D4  0100               	movlb	0	; () banked
  5609  0019D6  51C1               	movf	(ID@n+1)& (0+255),w,b
  5610  0019D8  0A80               	xorlw	128
  5611  0019DA  0100               	movlb	0	; () banked
  5612  0019DC  59AB               	subwfb	??_ID& (0+255),w,b
  5613  0019DE  B0D8               	btfsc	status,0,c
  5614  0019E0  D012               	goto	l8139
  5615                           
  5616                           ; BSR set to: 0
  5617                           ;sort.c: 312: delay_ms(time);
  5618                           
  5619                           ; BSR set to: 0
  5620                           
  5621                           ; BSR set to: 0
  5622  0019E2  0100               	movlb	0	; () banked
  5623  0019E4  51B9               	movf	ID@time& (0+255),w,b
  5624  0019E6  EC7A  F02D         	call	_delay_ms
  5625                           
  5626                           ;sort.c: 313: readCOND();
  5627  0019EA  ECAC  F02A         	call	_readCOND	;wreg free
  5628                           
  5629                           ;sort.c: 314: res3 += COND_signal;
  5630  0019EE  0100               	movlb	0	; () banked
  5631  0019F0  51DE               	movf	_COND_signal& (0+255),w,b
  5632  0019F2  0100               	movlb	0	; () banked
  5633  0019F4  27BE               	addwf	ID@res3& (0+255),f,b
  5634  0019F6  0100               	movlb	0	; () banked
  5635  0019F8  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5636  0019FA  0100               	movlb	0	; () banked
  5637  0019FC  23BF               	addwfc	(ID@res3+1)& (0+255),f,b
  5638                           
  5639                           ; BSR set to: 0
  5640  0019FE  0100               	movlb	0	; () banked
  5641  001A00  4BB3               	infsnz	ID@i_1143& (0+255),f,b
  5642  001A02  2BB4               	incf	(ID@i_1143+1)& (0+255),f,b
  5643  001A04  D7DE               	goto	l8127
  5644  001A06                     l8139:
  5645                           
  5646                           ; BSR set to: 0
  5647                           ;sort.c: 315: }
  5648                           ;sort.c: 316: res3 = ((res3 / n) > 0.3) ? 1 : 0;
  5649  001A06  0E9A               	movlw	154
  5650  001A08  0100               	movlb	0	; () banked
  5651  001A0A  6F92               	movwf	___ftge@ff1& (0+255),b
  5652  001A0C  0E99               	movlw	153
  5653  001A0E  0100               	movlb	0	; () banked
  5654  001A10  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5655  001A12  0E3E               	movlw	62
  5656  001A14  0100               	movlb	0	; () banked
  5657  001A16  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5658  001A18  C0C0  F088         	movff	ID@n,___awdiv@divisor
  5659  001A1C  C0C1  F089         	movff	ID@n+1,___awdiv@divisor+1
  5660  001A20  C0BE  F086         	movff	ID@res3,___awdiv@dividend
  5661  001A24  C0BF  F087         	movff	ID@res3+1,___awdiv@dividend+1
  5662  001A28  EC59  F025         	call	___awdiv	;wreg free
  5663  001A2C  C086  F08E         	movff	?___awdiv,___awtoft@c
  5664  001A30  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5665  001A34  EC1B  F02B         	call	___awtoft	;wreg free
  5666  001A38  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5667  001A3C  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5668  001A40  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5669  001A44  EC95  F024         	call	___ftge	;wreg free
  5670  001A48  0100               	movlb	0	; () banked
  5671  001A4A  B0D8               	btfsc	status,0,c
  5672  001A4C  D002               	goto	u6920
  5673  001A4E  0E01               	movlw	1
  5674  001A50  D001               	goto	u6930
  5675  001A52                     u6920:
  5676  001A52  0E00               	movlw	0
  5677  001A54                     u6930:
  5678  001A54  0100               	movlb	0	; () banked
  5679  001A56  6FBE               	movwf	ID@res3& (0+255),b
  5680  001A58  6BBF               	clrf	(ID@res3+1)& (0+255),b
  5681                           
  5682                           ; BSR set to: 0
  5683                           ;sort.c: 317: sensor_outputs[1] = (sensor_outputs[1] || res3);
  5684  001A5A  0E01               	movlw	1
  5685  001A5C  0100               	movlb	0	; () banked
  5686  001A5E  6FAE               	movwf	_ID$1144& (0+255),b
  5687                           
  5688                           ; BSR set to: 0
  5689  001A60  0100               	movlb	0	; () banked
  5690  001A62  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5691  001A64  0100               	movlb	0	; () banked
  5692  001A66  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5693  001A68  A4D8               	btfss	status,2,c
  5694  001A6A  D009               	goto	l8149
  5695                           
  5696                           ; BSR set to: 0
  5697  001A6C  0100               	movlb	0	; () banked
  5698  001A6E  51BE               	movf	ID@res3& (0+255),w,b
  5699  001A70  0100               	movlb	0	; () banked
  5700  001A72  11BF               	iorwf	(ID@res3+1)& (0+255),w,b
  5701  001A74  A4D8               	btfss	status,2,c
  5702  001A76  D003               	goto	l8149
  5703                           
  5704                           ; BSR set to: 0
  5705  001A78  0E00               	movlw	0
  5706  001A7A  0100               	movlb	0	; () banked
  5707  001A7C  6FAE               	movwf	_ID$1144& (0+255),b
  5708  001A7E                     l8149:
  5709                           
  5710                           ; BSR set to: 0
  5711  001A7E  C0AE  F0DC         	movff	_ID$1144,_sensor_outputs+2
  5712  001A82  0100               	movlb	0	; () banked
  5713  001A84  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5714                           
  5715                           ; BSR set to: 0
  5716                           ;sort.c: 318: LATAbits.LATA3 = 0;
  5717  001A86  9689               	bcf	3977,3,c	;volatile
  5718  001A88                     l8153:
  5719                           
  5720                           ; BSR set to: 0
  5721                           ;sort.c: 319: }
  5722                           ;sort.c: 322: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  5723  001A88  0E01               	movlw	1
  5724  001A8A  EC59  F02E         	call	_lcdInst
  5725  001A8E  0E68               	movlw	104
  5726  001A90  0100               	movlb	0	; () banked
  5727  001A92  6FAB               	movwf	??_ID& (0+255),b
  5728  001A94  0EE4               	movlw	228
  5729  001A96                     u10097:
  5730  001A96  2EE8               	decfsz	wreg,f,c
  5731  001A98  D7FE               	bra	u10097
  5732  001A9A  2FAB               	decfsz	??_ID& (0+255),f,b
  5733  001A9C  D7FC               	bra	u10097
  5734  001A9E  F000               	nop	
  5735  001AA0  0E80               	movlw	128
  5736  001AA2  EC59  F02E         	call	_lcdInst
  5737                           
  5738                           ;sort.c: 323: printf("            F%dM%dL%d", res1, res2, res3);
  5739  001AA6  0EBA               	movlw	low STR_64
  5740  001AA8  0100               	movlb	0	; () banked
  5741  001AAA  6F8E               	movwf	printf@f& (0+255),b
  5742  001AAC  0EFA               	movlw	high STR_64
  5743  001AAE  0100               	movlb	0	; () banked
  5744  001AB0  6F8F               	movwf	(printf@f+1)& (0+255),b
  5745  001AB2  C0BA  F090         	movff	ID@res1,?_printf+2
  5746  001AB6  C0BB  F091         	movff	ID@res1+1,?_printf+3
  5747  001ABA  C0BC  F092         	movff	ID@res2,?_printf+4
  5748  001ABE  C0BD  F093         	movff	ID@res2+1,?_printf+5
  5749  001AC2  C0BE  F094         	movff	ID@res3,?_printf+6
  5750  001AC6  C0BF  F095         	movff	ID@res3+1,?_printf+7
  5751  001ACA  EC15  F00E         	call	_printf	;wreg free
  5752                           
  5753                           ;sort.c: 332: if(!sensor_outputs[0]){
  5754  001ACE  0100               	movlb	0	; () banked
  5755  001AD0  51DA               	movf	_sensor_outputs& (0+255),w,b
  5756  001AD2  0100               	movlb	0	; () banked
  5757  001AD4  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5758  001AD6  A4D8               	btfss	status,2,c
  5759  001AD8  D016               	goto	l8173
  5760                           
  5761                           ; BSR set to: 0
  5762                           ;sort.c: 333: if(!sensor_outputs[1]){
  5763  001ADA  0100               	movlb	0	; () banked
  5764  001ADC  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5765  001ADE  0100               	movlb	0	; () banked
  5766  001AE0  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5767  001AE2  A4D8               	btfss	status,2,c
  5768  001AE4  D008               	goto	l8169
  5769                           
  5770                           ; BSR set to: 0
  5771                           ;sort.c: 334: count_pop_no_tab++;
  5772  001AE6  0101               	movlb	1	; () banked
  5773  001AE8  4B27               	infsnz	_count_pop_no_tab& (0+255),f,b
  5774  001AEA  2B28               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  5775                           
  5776                           ; BSR set to: 1
  5777                           ;sort.c: 335: cur_can = 0;
  5778  001AEC  0E00               	movlw	0
  5779  001AEE  0101               	movlb	1	; () banked
  5780  001AF0  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5781  001AF2  0E00               	movlw	0
  5782  001AF4  D007               	goto	L8
  5783  001AF6                     l8169:
  5784                           
  5785                           ;sort.c: 337: else{
  5786                           ;sort.c: 338: count_pop_w_tab++;
  5787  001AF6  0101               	movlb	1	; () banked
  5788  001AF8  4B29               	infsnz	_count_pop_w_tab& (0+255),f,b
  5789  001AFA  2B2A               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  5790                           
  5791                           ; BSR set to: 1
  5792                           ;sort.c: 339: cur_can = 1;
  5793  001AFC  0E00               	movlw	0
  5794  001AFE  0101               	movlb	1	; () banked
  5795  001B00  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5796  001B02  0E01               	movlw	1
  5797  001B04                     L8:
  5798  001B04  6F2B               	movwf	_cur_can& (0+255),b
  5799  001B06                     l8173:
  5800                           
  5801                           ;sort.c: 340: }
  5802                           ;sort.c: 341: }
  5803                           ;sort.c: 342: if(sensor_outputs[0]){
  5804  001B06  0100               	movlb	0	; () banked
  5805  001B08  51DA               	movf	_sensor_outputs& (0+255),w,b
  5806  001B0A  0100               	movlb	0	; () banked
  5807  001B0C  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5808  001B0E  B4D8               	btfsc	status,2,c
  5809  001B10  D016               	goto	l8185
  5810                           
  5811                           ; BSR set to: 0
  5812                           ;sort.c: 343: if(!sensor_outputs[1]){
  5813  001B12  0100               	movlb	0	; () banked
  5814  001B14  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5815  001B16  0100               	movlb	0	; () banked
  5816  001B18  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5817  001B1A  A4D8               	btfss	status,2,c
  5818  001B1C  D008               	goto	l8181
  5819                           
  5820                           ; BSR set to: 0
  5821                           ;sort.c: 344: count_can_w_lab++;
  5822  001B1E  0101               	movlb	1	; () banked
  5823  001B20  4B25               	infsnz	_count_can_w_lab& (0+255),f,b
  5824  001B22  2B26               	incf	(_count_can_w_lab+1)& (0+255),f,b
  5825                           
  5826                           ; BSR set to: 1
  5827                           ;sort.c: 345: cur_can = 2;
  5828  001B24  0E00               	movlw	0
  5829  001B26  0101               	movlb	1	; () banked
  5830  001B28  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5831  001B2A  0E02               	movlw	2
  5832  001B2C  D007               	goto	L9
  5833  001B2E                     l8181:
  5834                           
  5835                           ;sort.c: 347: else{
  5836                           ;sort.c: 348: count_can_no_lab++;
  5837  001B2E  0101               	movlb	1	; () banked
  5838  001B30  4B23               	infsnz	_count_can_no_lab& (0+255),f,b
  5839  001B32  2B24               	incf	(_count_can_no_lab+1)& (0+255),f,b
  5840                           
  5841                           ; BSR set to: 1
  5842                           ;sort.c: 349: cur_can = 3;
  5843  001B34  0E00               	movlw	0
  5844  001B36  0101               	movlb	1	; () banked
  5845  001B38  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5846  001B3A  0E03               	movlw	3
  5847  001B3C                     L9:
  5848  001B3C  6F2B               	movwf	_cur_can& (0+255),b
  5849  001B3E                     l8185:
  5850  001B3E  0101               	movlb	1	; () banked
  5851  001B40  5135               	movf	_f_can_distributed& (0+255),w,b
  5852  001B42  0101               	movlb	1	; () banked
  5853  001B44  1136               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  5854  001B46  B4D8               	btfsc	status,2,c
  5855  001B48  D7FA               	goto	l8185
  5856                           
  5857                           ; BSR set to: 1
  5858                           ;sort.c: 355: for(int i=0;i<10000;i++)
  5859                           
  5860                           ; BSR set to: 1
  5861  001B4A  0E00               	movlw	0
  5862  001B4C  0100               	movlb	0	; () banked
  5863  001B4E  6FB6               	movwf	(ID@i_1146+1)& (0+255),b
  5864  001B50  0E00               	movlw	0
  5865  001B52  6FB5               	movwf	ID@i_1146& (0+255),b
  5866  001B54                     l8189:
  5867                           
  5868                           ; BSR set to: 0
  5869  001B54  0100               	movlb	0	; () banked
  5870  001B56  BFB6               	btfsc	(ID@i_1146+1)& (0+255),7,b
  5871  001B58  D008               	goto	l864
  5872  001B5A  0E10               	movlw	16
  5873  001B5C  0100               	movlb	0	; () banked
  5874  001B5E  5DB5               	subwf	ID@i_1146& (0+255),w,b
  5875  001B60  0E27               	movlw	39
  5876  001B62  0100               	movlb	0	; () banked
  5877  001B64  59B6               	subwfb	(ID@i_1146+1)& (0+255),w,b
  5878  001B66  B0D8               	btfsc	status,0,c
  5879  001B68  D00D               	goto	l865
  5880  001B6A                     l864:
  5881                           
  5882                           ; BSR set to: 0
  5883                           ;sort.c: 356: {
  5884                           ;sort.c: 357: LATCbits.LATC0 = 1;
  5885  001B6A  808B               	bsf	3979,0,c	;volatile
  5886                           
  5887                           ; BSR set to: 0
  5888                           ;sort.c: 358: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5889  001B6C  0E1A               	movlw	26
  5890  001B6E                     u10107:
  5891  001B6E  2EE8               	decfsz	wreg,f,c
  5892  001B70  D7FE               	bra	u10107
  5893  001B72  D000               	nop2	
  5894                           
  5895                           ;sort.c: 359: LATCbits.LATC0 = 0;
  5896  001B74  908B               	bcf	3979,0,c	;volatile
  5897                           
  5898                           ;sort.c: 360: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5899  001B76  0EF0               	movlw	240
  5900  001B78                     u10117:
  5901  001B78  2EE8               	decfsz	wreg,f,c
  5902  001B7A  D7FE               	bra	u10117
  5903  001B7C  0100               	movlb	0	; () banked
  5904  001B7E  4BB5               	infsnz	ID@i_1146& (0+255),f,b
  5905  001B80  2BB6               	incf	(ID@i_1146+1)& (0+255),f,b
  5906  001B82  D7E8               	goto	l8189
  5907  001B84                     l865:
  5908                           
  5909                           ; BSR set to: 0
  5910                           ;sort.c: 361: }
  5911                           ;sort.c: 363: LATCbits.LATC0 = 0;
  5912  001B84  908B               	bcf	3979,0,c	;volatile
  5913                           
  5914                           ; BSR set to: 0
  5915                           ;sort.c: 365: f_can_coming_to_distribution = 1;
  5916  001B86  0E00               	movlw	0
  5917  001B88  0101               	movlb	1	; () banked
  5918  001B8A  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5919  001B8C  0E01               	movlw	1
  5920  001B8E  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5921                           
  5922                           ; BSR set to: 1
  5923                           ;sort.c: 366: _delay((unsigned long)((750)*(32000000/4000.0)));
  5924  001B90  0E1F               	movlw	31
  5925  001B92  0100               	movlb	0	; () banked
  5926  001B94  6FAC               	movwf	(??_ID+1)& (0+255),b
  5927  001B96  0E71               	movlw	113
  5928  001B98  0100               	movlb	0	; () banked
  5929  001B9A  6FAB               	movwf	??_ID& (0+255),b
  5930  001B9C  0E1E               	movlw	30
  5931  001B9E                     u10127:
  5932  001B9E  2EE8               	decfsz	wreg,f,c
  5933  001BA0  D7FE               	bra	u10127
  5934  001BA2  2FAB               	decfsz	??_ID& (0+255),f,b
  5935  001BA4  D7FC               	bra	u10127
  5936  001BA6  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5937  001BA8  D7FA               	bra	u10127
  5938  001BAA  F000               	nop	
  5939                           
  5940                           ;sort.c: 367: LATCbits.LATC0 = 1;
  5941  001BAC  808B               	bsf	3979,0,c	;volatile
  5942                           
  5943                           ;sort.c: 370: if(!f_lastCan){
  5944  001BAE  0100               	movlb	0	; () banked
  5945  001BB0  51EA               	movf	_f_lastCan& (0+255),w,b
  5946  001BB2  0100               	movlb	0	; () banked
  5947  001BB4  11EB               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5948  001BB6  A4D8               	btfss	status,2,c
  5949  001BB8  D032               	goto	l8221
  5950                           
  5951                           ; BSR set to: 0
  5952                           ;sort.c: 371: for(int i=0; i<46; i++){
  5953  001BBA  0E00               	movlw	0
  5954  001BBC  0100               	movlb	0	; () banked
  5955  001BBE  6FB8               	movwf	(ID@i_1147+1)& (0+255),b
  5956  001BC0  0E00               	movlw	0
  5957  001BC2  6FB7               	movwf	ID@i_1147& (0+255),b
  5958                           
  5959                           ; BSR set to: 0
  5960  001BC4  0100               	movlb	0	; () banked
  5961  001BC6  BFB8               	btfsc	(ID@i_1147+1)& (0+255),7,b
  5962  001BC8  D008               	goto	l8213
  5963  001BCA  0100               	movlb	0	; () banked
  5964  001BCC  51B8               	movf	(ID@i_1147+1)& (0+255),w,b
  5965  001BCE  E126               	bnz	l868
  5966  001BD0  0E2E               	movlw	46
  5967  001BD2  0100               	movlb	0	; () banked
  5968  001BD4  5DB7               	subwf	ID@i_1147& (0+255),w,b
  5969  001BD6  B0D8               	btfsc	status,0,c
  5970  001BD8  D021               	goto	l868
  5971  001BDA                     l8213:
  5972                           
  5973                           ; BSR set to: 0
  5974                           ;sort.c: 372: LATBbits.LATB2 = !LATBbits.LATB2;
  5975  001BDA  B48A               	btfsc	3978,2,c	;volatile
  5976  001BDC  D004               	goto	u7050
  5977  001BDE  0100               	movlb	0	; () banked
  5978  001BE0  6BAB               	clrf	??_ID& (0+255),b
  5979  001BE2  2BAB               	incf	??_ID& (0+255),f,b
  5980  001BE4  D002               	goto	u7068
  5981  001BE6                     u7050:
  5982  001BE6  0100               	movlb	0	; () banked
  5983  001BE8  6BAB               	clrf	??_ID& (0+255),b
  5984  001BEA                     u7068:
  5985  001BEA  0100               	movlb	0	; () banked
  5986  001BEC  47AB               	rlncf	??_ID& (0+255),f,b
  5987  001BEE  47AB               	rlncf	??_ID& (0+255),f,b
  5988  001BF0  508A               	movf	3978,w,c	;volatile
  5989  001BF2  0100               	movlb	0	; () banked
  5990  001BF4  19AB               	xorwf	??_ID& (0+255),w,b
  5991  001BF6  0BFB               	andlw	-5
  5992  001BF8  19AB               	xorwf	??_ID& (0+255),w,b
  5993  001BFA  6E8A               	movwf	3978,c	;volatile
  5994                           
  5995                           ; BSR set to: 0
  5996                           ;sort.c: 373: delay_ms(45-i);
  5997  001BFC  0100               	movlb	0	; () banked
  5998  001BFE  51B7               	movf	ID@i_1147& (0+255),w,b
  5999  001C00  0800               	sublw	0
  6000  001C02  0F2D               	addlw	45
  6001  001C04  EC7A  F02D         	call	_delay_ms
  6002  001C08  0100               	movlb	0	; () banked
  6003  001C0A  4BB7               	infsnz	ID@i_1147& (0+255),f,b
  6004  001C0C  2BB8               	incf	(ID@i_1147+1)& (0+255),f,b
  6005                           
  6006                           ; BSR set to: 0
  6007  001C0E  0100               	movlb	0	; () banked
  6008  001C10  BFB8               	btfsc	(ID@i_1147+1)& (0+255),7,b
  6009  001C12  D7E3               	goto	l8213
  6010  001C14  0100               	movlb	0	; () banked
  6011  001C16  51B8               	movf	(ID@i_1147+1)& (0+255),w,b
  6012  001C18  E101               	bnz	u7070
  6013  001C1A  D7DA               	goto	L10
  6014  001C1C                     u7070:
  6015  001C1C                     l868:
  6016                           
  6017                           ; BSR set to: 0
  6018                           ;sort.c: 374: }
  6019                           ;sort.c: 375: LATBbits.LATB2 = 1;
  6020  001C1C  848A               	bsf	3978,2,c	;volatile
  6021  001C1E                     l8221:
  6022                           
  6023                           ; BSR set to: 0
  6024                           ;sort.c: 376: }
  6025                           ;sort.c: 378: f_can_coming_to_ID = 0;
  6026  001C1E  0E00               	movlw	0
  6027  001C20  0101               	movlb	1	; () banked
  6028  001C22  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  6029  001C24  0E00               	movlw	0
  6030  001C26  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  6031  001C28  0012               	return	
  6032  001C2A                     __end_of_ID:
  6033                           	opt stack 0
  6034                           tblptru	equ	0xFF8
  6035                           tblptrh	equ	0xFF7
  6036                           tblptrl	equ	0xFF6
  6037                           tablat	equ	0xFF5
  6038                           prodh	equ	0xFF4
  6039                           prodl	equ	0xFF3
  6040                           postinc0	equ	0xFEE
  6041                           wreg	equ	0xFE8
  6042                           postdec1	equ	0xFE5
  6043                           fsr1l	equ	0xFE1
  6044                           indf2	equ	0xFDF
  6045                           postinc2	equ	0xFDE
  6046                           postdec2	equ	0xFDD
  6047                           fsr2h	equ	0xFDA
  6048                           fsr2l	equ	0xFD9
  6049                           status	equ	0xFD8
  6050                           
  6051 ;; *************** function _readCOND *****************
  6052 ;; Defined at:
  6053 ;;		line 35 in file "ADCFunctionality.c"
  6054 ;; Parameters:    Size  Location     Type
  6055 ;;		None
  6056 ;; Auto vars:     Size  Location     Type
  6057 ;;  res             2    4[BANK0 ] int 
  6058 ;; Return value:  Size  Location     Type
  6059 ;;                  1    wreg      void 
  6060 ;; Registers used:
  6061 ;;		wreg, status,2, status,0, cstack
  6062 ;; Tracked objects:
  6063 ;;		On entry : 0/0
  6064 ;;		On exit  : 0/0
  6065 ;;		Unchanged: 0/0
  6066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6068 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6069 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6070 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6071 ;;Total ram usage:        4 bytes
  6072 ;; Hardware stack levels used:    1
  6073 ;; Hardware stack levels required when called:    8
  6074 ;; This function calls:
  6075 ;;		_readADC
  6076 ;; This function is called by:
  6077 ;;		_ID
  6078 ;; This function uses a non-reentrant model
  6079 ;;
  6080                           
  6081                           	psect	text9
  6082  005558                     __ptext9:
  6083                           	opt stack 0
  6084  005558                     _readCOND:
  6085                           	opt stack 20
  6086                           
  6087                           ;ADCFunctionality.c: 36: readADC(2);
  6088                           
  6089                           ; BSR set to: 1
  6090                           ;incstack = 0
  6091  005558  0E02               	movlw	2
  6092  00555A  EC4F  F02D         	call	_readADC
  6093                           
  6094                           ;ADCFunctionality.c: 37: int res = ADRESH<<8 | ADRESL;
  6095  00555E  50C3               	movf	4035,w,c	;volatile
  6096  005560  CFC4 F082          	movff	4036,??_readCOND	;volatile
  6097  005564  0100               	movlb	0	; () banked
  6098  005566  6B83               	clrf	(??_readCOND+1)& (0+255),b
  6099  005568  C082  F083         	movff	??_readCOND,??_readCOND+1
  6100  00556C  0100               	movlb	0	; () banked
  6101  00556E  6B82               	clrf	??_readCOND& (0+255),b
  6102  005570  0100               	movlb	0	; () banked
  6103  005572  1182               	iorwf	??_readCOND& (0+255),w,b
  6104  005574  0100               	movlb	0	; () banked
  6105  005576  6F84               	movwf	readCOND@res& (0+255),b
  6106  005578  0100               	movlb	0	; () banked
  6107  00557A  5183               	movf	(??_readCOND+1)& (0+255),w,b
  6108  00557C  0100               	movlb	0	; () banked
  6109  00557E  6F85               	movwf	(readCOND@res+1)& (0+255),b
  6110                           
  6111                           ; BSR set to: 0
  6112                           ;ADCFunctionality.c: 38: COND_signal = (res > 300) ? 1 : 0;
  6113  005580  0100               	movlb	0	; () banked
  6114  005582  BF85               	btfsc	(readCOND@res+1)& (0+255),7,b
  6115  005584  D00A               	goto	u5910
  6116  005586  0E2D               	movlw	45
  6117  005588  0100               	movlb	0	; () banked
  6118  00558A  5D84               	subwf	readCOND@res& (0+255),w,b
  6119  00558C  0E01               	movlw	1
  6120  00558E  0100               	movlb	0	; () banked
  6121  005590  5985               	subwfb	(readCOND@res+1)& (0+255),w,b
  6122  005592  A0D8               	btfss	status,0,c
  6123  005594  D002               	goto	u5910
  6124  005596  0E01               	movlw	1
  6125  005598  D001               	goto	u5920
  6126  00559A                     u5910:
  6127  00559A  0E00               	movlw	0
  6128  00559C                     u5920:
  6129  00559C  0100               	movlb	0	; () banked
  6130  00559E  6FDE               	movwf	_COND_signal& (0+255),b
  6131  0055A0  6BDF               	clrf	(_COND_signal+1)& (0+255),b
  6132                           
  6133                           ; BSR set to: 0
  6134  0055A2  0012               	return		;funcret
  6135  0055A4                     __end_of_readCOND:
  6136                           	opt stack 0
  6137                           tblptru	equ	0xFF8
  6138                           tblptrh	equ	0xFF7
  6139                           tblptrl	equ	0xFF6
  6140                           tablat	equ	0xFF5
  6141                           prodh	equ	0xFF4
  6142                           prodl	equ	0xFF3
  6143                           postinc0	equ	0xFEE
  6144                           wreg	equ	0xFE8
  6145                           postdec1	equ	0xFE5
  6146                           fsr1l	equ	0xFE1
  6147                           indf2	equ	0xFDF
  6148                           postinc2	equ	0xFDE
  6149                           postdec2	equ	0xFDD
  6150                           fsr2h	equ	0xFDA
  6151                           fsr2l	equ	0xFD9
  6152                           status	equ	0xFD8
  6153                           
  6154 ;; *************** function _delay_ms *****************
  6155 ;; Defined at:
  6156 ;;		line 683 in file "sort.c"
  6157 ;; Parameters:    Size  Location     Type
  6158 ;;  milliseconds    1    wreg     unsigned char 
  6159 ;; Auto vars:     Size  Location     Type
  6160 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  6161 ;; Return value:  Size  Location     Type
  6162 ;;                  1    wreg      void 
  6163 ;; Registers used:
  6164 ;;		wreg, status,2, status,0, cstack
  6165 ;; Tracked objects:
  6166 ;;		On entry : 0/0
  6167 ;;		On exit  : 0/0
  6168 ;;		Unchanged: 0/0
  6169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6171 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6172 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6173 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6174 ;;Total ram usage:        2 bytes
  6175 ;; Hardware stack levels used:    1
  6176 ;; Hardware stack levels required when called:    7
  6177 ;; This function calls:
  6178 ;;		Nothing
  6179 ;; This function is called by:
  6180 ;;		_Loading
  6181 ;;		_ID
  6182 ;; This function uses a non-reentrant model
  6183 ;;
  6184                           
  6185                           	psect	text10
  6186  005AF4                     __ptext10:
  6187                           	opt stack 0
  6188  005AF4                     _delay_ms:
  6189                           	opt stack 21
  6190                           
  6191                           ; BSR set to: 0
  6192                           ;incstack = 0
  6193                           ;delay_ms@milliseconds stored from wreg
  6194  005AF4  0100               	movlb	0	; () banked
  6195  005AF6  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  6196                           
  6197                           ;sort.c: 684: while(milliseconds > 0)
  6198  005AF8  D00B               	goto	l7425
  6199  005AFA                     l7421:
  6200                           
  6201                           ;sort.c: 685: {
  6202                           ;sort.c: 686: milliseconds--;
  6203  005AFA  0100               	movlb	0	; () banked
  6204  005AFC  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  6205                           
  6206                           ; BSR set to: 0
  6207                           ;sort.c: 687: _delay((unsigned long)((990)*(32000000/4000000.0)));
  6208  005AFE  0E0B               	movlw	11
  6209  005B00  0100               	movlb	0	; () banked
  6210  005B02  6F80               	movwf	??_delay_ms& (0+255),b
  6211  005B04  0E47               	movlw	71
  6212  005B06                     u10137:
  6213  005B06  2EE8               	decfsz	wreg,f,c
  6214  005B08  D7FE               	bra	u10137
  6215  005B0A  2F80               	decfsz	??_delay_ms& (0+255),f,b
  6216  005B0C  D7FC               	bra	u10137
  6217  005B0E  D000               	nop2	
  6218  005B10                     l7425:
  6219  005B10  0100               	movlb	0	; () banked
  6220  005B12  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  6221  005B14  0100               	movlb	0	; () banked
  6222  005B16  B4D8               	btfsc	status,2,c
  6223  005B18  0012               	return	
  6224  005B1A  D7EF               	goto	l7421
  6225  005B1C                     __end_of_delay_ms:
  6226                           	opt stack 0
  6227                           tblptru	equ	0xFF8
  6228                           tblptrh	equ	0xFF7
  6229                           tblptrl	equ	0xFF6
  6230                           tablat	equ	0xFF5
  6231                           prodh	equ	0xFF4
  6232                           prodl	equ	0xFF3
  6233                           postinc0	equ	0xFEE
  6234                           wreg	equ	0xFE8
  6235                           postdec1	equ	0xFE5
  6236                           fsr1l	equ	0xFE1
  6237                           indf2	equ	0xFDF
  6238                           postinc2	equ	0xFDE
  6239                           postdec2	equ	0xFDD
  6240                           fsr2h	equ	0xFDA
  6241                           fsr2l	equ	0xFD9
  6242                           status	equ	0xFD8
  6243                           
  6244 ;; *************** function ___ftge *****************
  6245 ;; Defined at:
  6246 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  6247 ;; Parameters:    Size  Location     Type
  6248 ;;  ff1             3   18[BANK0 ] float 
  6249 ;;  ff2             3   21[BANK0 ] float 
  6250 ;; Auto vars:     Size  Location     Type
  6251 ;;		None
  6252 ;; Return value:  Size  Location     Type
  6253 ;;		None               void
  6254 ;; Registers used:
  6255 ;;		wreg, status,2, status,0
  6256 ;; Tracked objects:
  6257 ;;		On entry : 0/0
  6258 ;;		On exit  : 0/0
  6259 ;;		Unchanged: 0/0
  6260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6261 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6263 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6264 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6265 ;;Total ram usage:        9 bytes
  6266 ;; Hardware stack levels used:    1
  6267 ;; Hardware stack levels required when called:    7
  6268 ;; This function calls:
  6269 ;;		Nothing
  6270 ;; This function is called by:
  6271 ;;		_ID
  6272 ;; This function uses a non-reentrant model
  6273 ;;
  6274                           
  6275                           	psect	text11
  6276  00492A                     __ptext11:
  6277                           	opt stack 0
  6278  00492A                     ___ftge:
  6279                           	opt stack 21
  6280                           
  6281                           ; BSR set to: 0
  6282                           ;incstack = 0
  6283  00492A  0100               	movlb	0	; () banked
  6284  00492C  AF94               	btfss	(___ftge@ff1+2)& (0+255),7,b
  6285  00492E  D01D               	goto	l7543
  6286                           
  6287                           ; BSR set to: 0
  6288  004930  C092  F098         	movff	___ftge@ff1,??___ftge
  6289  004934  C093  F099         	movff	___ftge@ff1+1,??___ftge+1
  6290  004938  C094  F09A         	movff	___ftge@ff1+2,??___ftge+2
  6291  00493C  0100               	movlb	0	; () banked
  6292  00493E  1F98               	comf	??___ftge& (0+255),f,b
  6293  004940  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6294  004942  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6295  004944  2B98               	incf	??___ftge& (0+255),f,b
  6296  004946  0E00               	movlw	0
  6297  004948  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6298  00494A  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6299  00494C  0E00               	movlw	0
  6300  00494E  0100               	movlb	0	; () banked
  6301  004950  2598               	addwf	??___ftge& (0+255),w,b
  6302  004952  0100               	movlb	0	; () banked
  6303  004954  6F92               	movwf	___ftge@ff1& (0+255),b
  6304  004956  0E00               	movlw	0
  6305  004958  0100               	movlb	0	; () banked
  6306  00495A  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6307  00495C  0100               	movlb	0	; () banked
  6308  00495E  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  6309  004960  0E80               	movlw	128
  6310  004962  0100               	movlb	0	; () banked
  6311  004964  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6312  004966  0100               	movlb	0	; () banked
  6313  004968  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  6314  00496A                     l7543:
  6315                           
  6316                           ; BSR set to: 0
  6317  00496A  0100               	movlb	0	; () banked
  6318  00496C  AF97               	btfss	(___ftge@ff2+2)& (0+255),7,b
  6319  00496E  D01D               	goto	l7547
  6320                           
  6321                           ; BSR set to: 0
  6322  004970  C095  F098         	movff	___ftge@ff2,??___ftge
  6323  004974  C096  F099         	movff	___ftge@ff2+1,??___ftge+1
  6324  004978  C097  F09A         	movff	___ftge@ff2+2,??___ftge+2
  6325  00497C  0100               	movlb	0	; () banked
  6326  00497E  1F98               	comf	??___ftge& (0+255),f,b
  6327  004980  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6328  004982  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6329  004984  2B98               	incf	??___ftge& (0+255),f,b
  6330  004986  0E00               	movlw	0
  6331  004988  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6332  00498A  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6333  00498C  0E00               	movlw	0
  6334  00498E  0100               	movlb	0	; () banked
  6335  004990  2598               	addwf	??___ftge& (0+255),w,b
  6336  004992  0100               	movlb	0	; () banked
  6337  004994  6F95               	movwf	___ftge@ff2& (0+255),b
  6338  004996  0E00               	movlw	0
  6339  004998  0100               	movlb	0	; () banked
  6340  00499A  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6341  00499C  0100               	movlb	0	; () banked
  6342  00499E  6F96               	movwf	(___ftge@ff2+1)& (0+255),b
  6343  0049A0  0E80               	movlw	128
  6344  0049A2  0100               	movlb	0	; () banked
  6345  0049A4  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6346  0049A6  0100               	movlb	0	; () banked
  6347  0049A8  6F97               	movwf	(___ftge@ff2+2)& (0+255),b
  6348  0049AA                     l7547:
  6349                           
  6350                           ; BSR set to: 0
  6351  0049AA  0E00               	movlw	0
  6352  0049AC  0100               	movlb	0	; () banked
  6353  0049AE  1B92               	xorwf	___ftge@ff1& (0+255),f,b
  6354  0049B0  0E00               	movlw	0
  6355  0049B2  0100               	movlb	0	; () banked
  6356  0049B4  1B93               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  6357  0049B6  0E80               	movlw	128
  6358  0049B8  0100               	movlb	0	; () banked
  6359  0049BA  1B94               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  6360                           
  6361                           ; BSR set to: 0
  6362  0049BC  0E00               	movlw	0
  6363  0049BE  0100               	movlb	0	; () banked
  6364  0049C0  1B95               	xorwf	___ftge@ff2& (0+255),f,b
  6365  0049C2  0E00               	movlw	0
  6366  0049C4  0100               	movlb	0	; () banked
  6367  0049C6  1B96               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  6368  0049C8  0E80               	movlw	128
  6369  0049CA  0100               	movlb	0	; () banked
  6370  0049CC  1B97               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  6371  0049CE  0100               	movlb	0	; () banked
  6372  0049D0  5195               	movf	___ftge@ff2& (0+255),w,b
  6373  0049D2  0100               	movlb	0	; () banked
  6374  0049D4  5D92               	subwf	___ftge@ff1& (0+255),w,b
  6375  0049D6  0100               	movlb	0	; () banked
  6376  0049D8  5196               	movf	(___ftge@ff2+1)& (0+255),w,b
  6377  0049DA  0100               	movlb	0	; () banked
  6378  0049DC  5993               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  6379  0049DE  0100               	movlb	0	; () banked
  6380  0049E0  5197               	movf	(___ftge@ff2+2)& (0+255),w,b
  6381  0049E2  0100               	movlb	0	; () banked
  6382  0049E4  5994               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  6383  0049E6  B0D8               	btfsc	status,0,c
  6384  0049E8  D002               	goto	l7553
  6385                           
  6386                           ; BSR set to: 0
  6387  0049EA  90D8               	bcf	status,0,c
  6388  0049EC  0012               	return	
  6389  0049EE                     l7553:
  6390                           
  6391                           ; BSR set to: 0
  6392  0049EE  80D8               	bsf	status,0,c
  6393                           
  6394                           ; BSR set to: 0
  6395  0049F0  0012               	return	
  6396  0049F2                     __end_of___ftge:
  6397                           	opt stack 0
  6398                           tblptru	equ	0xFF8
  6399                           tblptrh	equ	0xFF7
  6400                           tblptrl	equ	0xFF6
  6401                           tablat	equ	0xFF5
  6402                           prodh	equ	0xFF4
  6403                           prodl	equ	0xFF3
  6404                           postinc0	equ	0xFEE
  6405                           wreg	equ	0xFE8
  6406                           postdec1	equ	0xFE5
  6407                           fsr1l	equ	0xFE1
  6408                           indf2	equ	0xFDF
  6409                           postinc2	equ	0xFDE
  6410                           postdec2	equ	0xFDD
  6411                           fsr2h	equ	0xFDA
  6412                           fsr2l	equ	0xFD9
  6413                           status	equ	0xFD8
  6414                           
  6415 ;; *************** function ___awtoft *****************
  6416 ;; Defined at:
  6417 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  6418 ;; Parameters:    Size  Location     Type
  6419 ;;  c               2   14[BANK0 ] int 
  6420 ;; Auto vars:     Size  Location     Type
  6421 ;;  sign            1   17[BANK0 ] unsigned char 
  6422 ;; Return value:  Size  Location     Type
  6423 ;;                  3   14[BANK0 ] float 
  6424 ;; Registers used:
  6425 ;;		wreg, status,2, status,0, cstack
  6426 ;; Tracked objects:
  6427 ;;		On entry : 0/0
  6428 ;;		On exit  : 0/0
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6431 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6432 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6434 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6435 ;;Total ram usage:        4 bytes
  6436 ;; Hardware stack levels used:    1
  6437 ;; Hardware stack levels required when called:    8
  6438 ;; This function calls:
  6439 ;;		___ftpack
  6440 ;; This function is called by:
  6441 ;;		_ID
  6442 ;; This function uses a non-reentrant model
  6443 ;;
  6444                           
  6445                           	psect	text12
  6446  005636                     __ptext12:
  6447                           	opt stack 0
  6448  005636                     ___awtoft:
  6449                           	opt stack 20
  6450                           
  6451                           ; BSR set to: 0
  6452                           ;incstack = 0
  6453  005636  0E00               	movlw	0
  6454  005638  0100               	movlb	0	; () banked
  6455  00563A  6F91               	movwf	___awtoft@sign& (0+255),b
  6456                           
  6457                           ; BSR set to: 0
  6458  00563C  0100               	movlb	0	; () banked
  6459  00563E  AF8F               	btfss	(___awtoft@c+1)& (0+255),7,b
  6460  005640  D008               	goto	l7535
  6461                           
  6462                           ; BSR set to: 0
  6463  005642  0100               	movlb	0	; () banked
  6464  005644  6D8E               	negf	___awtoft@c& (0+255),b
  6465  005646  1F8F               	comf	(___awtoft@c+1)& (0+255),f,b
  6466  005648  B0D8               	btfsc	status,0,c
  6467  00564A  2B8F               	incf	(___awtoft@c+1)& (0+255),f,b
  6468                           
  6469                           ; BSR set to: 0
  6470  00564C  0E01               	movlw	1
  6471  00564E  0100               	movlb	0	; () banked
  6472  005650  6F91               	movwf	___awtoft@sign& (0+255),b
  6473  005652                     l7535:
  6474                           
  6475                           ; BSR set to: 0
  6476  005652  C08E  F080         	movff	___awtoft@c,___ftpack@arg
  6477  005656  C08F  F081         	movff	___awtoft@c+1,___ftpack@arg+1
  6478  00565A  0100               	movlb	0	; () banked
  6479  00565C  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
  6480  00565E  0E8E               	movlw	142
  6481  005660  0100               	movlb	0	; () banked
  6482  005662  6F83               	movwf	___ftpack@exp& (0+255),b
  6483  005664  C091  F084         	movff	___awtoft@sign,___ftpack@sign
  6484  005668  EC57  F021         	call	___ftpack	;wreg free
  6485  00566C  C080  F08E         	movff	?___ftpack,?___awtoft
  6486  005670  C081  F08F         	movff	?___ftpack+1,?___awtoft+1
  6487  005674  C082  F090         	movff	?___ftpack+2,?___awtoft+2
  6488  005678  0012               	return	
  6489  00567A                     __end_of___awtoft:
  6490                           	opt stack 0
  6491                           tblptru	equ	0xFF8
  6492                           tblptrh	equ	0xFF7
  6493                           tblptrl	equ	0xFF6
  6494                           tablat	equ	0xFF5
  6495                           prodh	equ	0xFF4
  6496                           prodl	equ	0xFF3
  6497                           postinc0	equ	0xFEE
  6498                           wreg	equ	0xFE8
  6499                           postdec1	equ	0xFE5
  6500                           fsr1l	equ	0xFE1
  6501                           indf2	equ	0xFDF
  6502                           postinc2	equ	0xFDE
  6503                           postdec2	equ	0xFDD
  6504                           fsr2h	equ	0xFDA
  6505                           fsr2l	equ	0xFD9
  6506                           status	equ	0xFD8
  6507                           
  6508 ;; *************** function ___ftpack *****************
  6509 ;; Defined at:
  6510 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  6511 ;; Parameters:    Size  Location     Type
  6512 ;;  arg             3    0[BANK0 ] unsigned um
  6513 ;;  exp             1    3[BANK0 ] unsigned char 
  6514 ;;  sign            1    4[BANK0 ] unsigned char 
  6515 ;; Auto vars:     Size  Location     Type
  6516 ;;		None
  6517 ;; Return value:  Size  Location     Type
  6518 ;;                  3    0[BANK0 ] float 
  6519 ;; Registers used:
  6520 ;;		wreg, status,2, status,0
  6521 ;; Tracked objects:
  6522 ;;		On entry : 0/0
  6523 ;;		On exit  : 0/0
  6524 ;;		Unchanged: 0/0
  6525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6526 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6528 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6529 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6530 ;;Total ram usage:        8 bytes
  6531 ;; Hardware stack levels used:    1
  6532 ;; Hardware stack levels required when called:    7
  6533 ;; This function calls:
  6534 ;;		Nothing
  6535 ;; This function is called by:
  6536 ;;		___awtoft
  6537 ;; This function uses a non-reentrant model
  6538 ;;
  6539                           
  6540                           	psect	text13
  6541  0042AE                     __ptext13:
  6542                           	opt stack 0
  6543  0042AE                     ___ftpack:
  6544                           	opt stack 20
  6545                           
  6546                           ;incstack = 0
  6547  0042AE  0100               	movlb	0	; () banked
  6548  0042B0  5183               	movf	___ftpack@exp& (0+255),w,b
  6549  0042B2  0100               	movlb	0	; () banked
  6550  0042B4  B4D8               	btfsc	status,2,c
  6551  0042B6  D008               	goto	l6919
  6552                           
  6553                           ; BSR set to: 0
  6554  0042B8  0100               	movlb	0	; () banked
  6555  0042BA  5180               	movf	___ftpack@arg& (0+255),w,b
  6556  0042BC  0100               	movlb	0	; () banked
  6557  0042BE  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  6558  0042C0  0100               	movlb	0	; () banked
  6559  0042C2  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  6560  0042C4  A4D8               	btfss	status,2,c
  6561  0042C6  D011               	goto	l6925
  6562  0042C8                     l6919:
  6563                           
  6564                           ; BSR set to: 0
  6565  0042C8  0E00               	movlw	0
  6566  0042CA  0100               	movlb	0	; () banked
  6567  0042CC  6F80               	movwf	?___ftpack& (0+255),b
  6568  0042CE  0E00               	movlw	0
  6569  0042D0  0100               	movlb	0	; () banked
  6570  0042D2  6F81               	movwf	(?___ftpack+1)& (0+255),b
  6571  0042D4  0E00               	movlw	0
  6572  0042D6  0100               	movlb	0	; () banked
  6573  0042D8  6F82               	movwf	(?___ftpack+2)& (0+255),b
  6574                           
  6575                           ; BSR set to: 0
  6576  0042DA  0012               	return	
  6577  0042DC                     l6923:
  6578                           
  6579                           ; BSR set to: 0
  6580  0042DC  0100               	movlb	0	; () banked
  6581  0042DE  2B83               	incf	___ftpack@exp& (0+255),f,b
  6582  0042E0  0100               	movlb	0	; () banked
  6583  0042E2  90D8               	bcf	status,0,c
  6584  0042E4  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6585  0042E6  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6586  0042E8  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6587  0042EA                     l6925:
  6588                           
  6589                           ; BSR set to: 0
  6590  0042EA  0E00               	movlw	0
  6591  0042EC  0100               	movlb	0	; () banked
  6592  0042EE  1580               	andwf	___ftpack@arg& (0+255),w,b
  6593  0042F0  0100               	movlb	0	; () banked
  6594  0042F2  6F85               	movwf	??___ftpack& (0+255),b
  6595  0042F4  0E00               	movlw	0
  6596  0042F6  0100               	movlb	0	; () banked
  6597  0042F8  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6598  0042FA  0100               	movlb	0	; () banked
  6599  0042FC  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6600  0042FE  0EFE               	movlw	254
  6601  004300  0100               	movlb	0	; () banked
  6602  004302  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6603  004304  0100               	movlb	0	; () banked
  6604  004306  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6605  004308  0100               	movlb	0	; () banked
  6606  00430A  5185               	movf	??___ftpack& (0+255),w,b
  6607  00430C  0100               	movlb	0	; () banked
  6608  00430E  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6609  004310  0100               	movlb	0	; () banked
  6610  004312  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6611  004314  B4D8               	btfsc	status,2,c
  6612  004316  D011               	goto	l6931
  6613  004318  D7E1               	goto	l6923
  6614  00431A                     l6927:
  6615                           
  6616                           ; BSR set to: 0
  6617  00431A  0100               	movlb	0	; () banked
  6618  00431C  2B83               	incf	___ftpack@exp& (0+255),f,b
  6619                           
  6620                           ; BSR set to: 0
  6621  00431E  0E01               	movlw	1
  6622  004320  0100               	movlb	0	; () banked
  6623  004322  2780               	addwf	___ftpack@arg& (0+255),f,b
  6624  004324  0E00               	movlw	0
  6625  004326  0100               	movlb	0	; () banked
  6626  004328  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  6627  00432A  0E00               	movlw	0
  6628  00432C  0100               	movlb	0	; () banked
  6629  00432E  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  6630  004330  0100               	movlb	0	; () banked
  6631  004332  90D8               	bcf	status,0,c
  6632  004334  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6633  004336  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6634  004338  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6635  00433A                     l6931:
  6636                           
  6637                           ; BSR set to: 0
  6638  00433A  0E00               	movlw	0
  6639  00433C  0100               	movlb	0	; () banked
  6640  00433E  1580               	andwf	___ftpack@arg& (0+255),w,b
  6641  004340  0100               	movlb	0	; () banked
  6642  004342  6F85               	movwf	??___ftpack& (0+255),b
  6643  004344  0E00               	movlw	0
  6644  004346  0100               	movlb	0	; () banked
  6645  004348  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6646  00434A  0100               	movlb	0	; () banked
  6647  00434C  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6648  00434E  0EFF               	movlw	255
  6649  004350  0100               	movlb	0	; () banked
  6650  004352  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6651  004354  0100               	movlb	0	; () banked
  6652  004356  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6653  004358  0100               	movlb	0	; () banked
  6654  00435A  5185               	movf	??___ftpack& (0+255),w,b
  6655  00435C  0100               	movlb	0	; () banked
  6656  00435E  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6657  004360  0100               	movlb	0	; () banked
  6658  004362  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6659  004364  B4D8               	btfsc	status,2,c
  6660  004366  D008               	goto	l6935
  6661  004368  D7D8               	goto	l6927
  6662  00436A                     l6933:
  6663                           
  6664                           ; BSR set to: 0
  6665  00436A  0100               	movlb	0	; () banked
  6666  00436C  0783               	decf	___ftpack@exp& (0+255),f,b
  6667  00436E  0100               	movlb	0	; () banked
  6668  004370  90D8               	bcf	status,0,c
  6669  004372  3780               	rlcf	___ftpack@arg& (0+255),f,b
  6670  004374  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  6671  004376  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  6672  004378                     l6935:
  6673                           
  6674                           ; BSR set to: 0
  6675  004378  0100               	movlb	0	; () banked
  6676  00437A  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  6677  00437C  D004               	goto	l1781
  6678                           
  6679                           ; BSR set to: 0
  6680  00437E  0E02               	movlw	2
  6681  004380  0100               	movlb	0	; () banked
  6682  004382  6183               	cpfslt	___ftpack@exp& (0+255),b
  6683  004384  D7F2               	goto	l6933
  6684  004386                     l1781:
  6685                           
  6686                           ; BSR set to: 0
  6687  004386  0100               	movlb	0	; () banked
  6688  004388  B183               	btfsc	___ftpack@exp& (0+255),0,b
  6689  00438A  D002               	goto	l6941
  6690                           
  6691                           ; BSR set to: 0
  6692  00438C  0100               	movlb	0	; () banked
  6693  00438E  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  6694  004390                     l6941:
  6695                           
  6696                           ; BSR set to: 0
  6697  004390  0100               	movlb	0	; () banked
  6698  004392  90D8               	bcf	status,0,c
  6699  004394  3383               	rrcf	___ftpack@exp& (0+255),f,b
  6700  004396  0100               	movlb	0	; () banked
  6701  004398  5183               	movf	___ftpack@exp& (0+255),w,b
  6702  00439A  0100               	movlb	0	; () banked
  6703  00439C  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  6704                           
  6705                           ; BSR set to: 0
  6706  00439E  0100               	movlb	0	; () banked
  6707  0043A0  5184               	movf	___ftpack@sign& (0+255),w,b
  6708  0043A2  0100               	movlb	0	; () banked
  6709  0043A4  B4D8               	btfsc	status,2,c
  6710  0043A6  D002               	goto	l6947
  6711                           
  6712                           ; BSR set to: 0
  6713  0043A8  0100               	movlb	0	; () banked
  6714  0043AA  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  6715  0043AC                     l6947:
  6716                           
  6717                           ; BSR set to: 0
  6718  0043AC  C080  F080         	movff	___ftpack@arg,?___ftpack
  6719  0043B0  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
  6720  0043B4  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
  6721  0043B8  0012               	return	
  6722  0043BA                     __end_of___ftpack:
  6723                           	opt stack 0
  6724                           tblptru	equ	0xFF8
  6725                           tblptrh	equ	0xFF7
  6726                           tblptrl	equ	0xFF6
  6727                           tablat	equ	0xFF5
  6728                           prodh	equ	0xFF4
  6729                           prodl	equ	0xFF3
  6730                           postinc0	equ	0xFEE
  6731                           wreg	equ	0xFE8
  6732                           postdec1	equ	0xFE5
  6733                           fsr1l	equ	0xFE1
  6734                           indf2	equ	0xFDF
  6735                           postinc2	equ	0xFDE
  6736                           postdec2	equ	0xFDD
  6737                           fsr2h	equ	0xFDA
  6738                           fsr2l	equ	0xFD9
  6739                           status	equ	0xFD8
  6740                           
  6741 ;; *************** function _Distribution *****************
  6742 ;; Defined at:
  6743 ;;		line 381 in file "sort.c"
  6744 ;; Parameters:    Size  Location     Type
  6745 ;;		None
  6746 ;; Auto vars:     Size  Location     Type
  6747 ;;		None
  6748 ;; Return value:  Size  Location     Type
  6749 ;;                  1    wreg      void 
  6750 ;; Registers used:
  6751 ;;		wreg, status,2, status,0, cstack
  6752 ;; Tracked objects:
  6753 ;;		On entry : 0/0
  6754 ;;		On exit  : 0/0
  6755 ;;		Unchanged: 0/0
  6756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6759 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6760 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6761 ;;Total ram usage:        2 bytes
  6762 ;; Hardware stack levels used:    1
  6763 ;; Hardware stack levels required when called:    8
  6764 ;; This function calls:
  6765 ;;		_updateServoPosition
  6766 ;; This function is called by:
  6767 ;;		_sort
  6768 ;; This function uses a non-reentrant model
  6769 ;;
  6770                           
  6771                           	psect	text14
  6772  0046A6                     __ptext14:
  6773                           	opt stack 0
  6774  0046A6                     _Distribution:
  6775                           	opt stack 21
  6776                           
  6777                           ;sort.c: 382: if(f_can_coming_to_distribution){
  6778                           
  6779                           ; BSR set to: 0
  6780                           ;incstack = 0
  6781  0046A6  0101               	movlb	1	; () banked
  6782  0046A8  5133               	movf	_f_can_coming_to_distribution& (0+255),w,b
  6783  0046AA  0101               	movlb	1	; () banked
  6784  0046AC  1134               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  6785  0046AE  B4D8               	btfsc	status,2,c
  6786  0046B0  0012               	return	
  6787                           
  6788                           ; BSR set to: 1
  6789                           ;sort.c: 383: f_can_distributed = 0;
  6790  0046B2  0E00               	movlw	0
  6791  0046B4  0101               	movlb	1	; () banked
  6792  0046B6  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  6793  0046B8  0E00               	movlw	0
  6794  0046BA  6F35               	movwf	_f_can_distributed& (0+255),b
  6795                           
  6796                           ;sort.c: 390: switch(cur_can){
  6797  0046BC  D034               	goto	l8237
  6798  0046BE                     l8227:
  6799                           
  6800                           ;sort.c: 392: updateServoPosition(500, 1);
  6801  0046BE  0E01               	movlw	1
  6802  0046C0  0100               	movlb	0	; () banked
  6803  0046C2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6804  0046C4  0EF4               	movlw	244
  6805  0046C6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6806  0046C8  0E00               	movlw	0
  6807  0046CA  0100               	movlb	0	; () banked
  6808  0046CC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6809  0046CE  0E01               	movlw	1
  6810  0046D0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6811  0046D2  EC87  F027         	call	_updateServoPosition	;wreg free
  6812                           
  6813                           ;sort.c: 393: break;
  6814  0046D6  D03E               	goto	l8239
  6815  0046D8                     l8229:
  6816                           
  6817                           ;sort.c: 395: updateServoPosition(850, 1);
  6818  0046D8  0E03               	movlw	3
  6819  0046DA  0100               	movlb	0	; () banked
  6820  0046DC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6821  0046DE  0E52               	movlw	82
  6822  0046E0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6823  0046E2  0E00               	movlw	0
  6824  0046E4  0100               	movlb	0	; () banked
  6825  0046E6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6826  0046E8  0E01               	movlw	1
  6827  0046EA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6828  0046EC  EC87  F027         	call	_updateServoPosition	;wreg free
  6829                           
  6830                           ;sort.c: 396: break;
  6831  0046F0  D031               	goto	l8239
  6832  0046F2                     l8231:
  6833                           
  6834                           ;sort.c: 398: updateServoPosition(1670, 1);
  6835  0046F2  0E06               	movlw	6
  6836  0046F4  0100               	movlb	0	; () banked
  6837  0046F6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6838  0046F8  0E86               	movlw	134
  6839  0046FA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6840  0046FC  0E00               	movlw	0
  6841  0046FE  0100               	movlb	0	; () banked
  6842  004700  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6843  004702  0E01               	movlw	1
  6844  004704  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6845  004706  EC87  F027         	call	_updateServoPosition	;wreg free
  6846                           
  6847                           ;sort.c: 399: break;
  6848  00470A  D024               	goto	l8239
  6849  00470C                     l8233:
  6850                           
  6851                           ;sort.c: 401: updateServoPosition(2400, 1);
  6852  00470C  0E09               	movlw	9
  6853  00470E  0100               	movlb	0	; () banked
  6854  004710  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6855  004712  0E60               	movlw	96
  6856  004714  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6857  004716  0E00               	movlw	0
  6858  004718  0100               	movlb	0	; () banked
  6859  00471A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6860  00471C  0E01               	movlw	1
  6861  00471E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6862  004720  EC87  F027         	call	_updateServoPosition	;wreg free
  6863                           
  6864                           ;sort.c: 405: }
  6865                           
  6866                           ;sort.c: 404: break;
  6867                           
  6868                           ;sort.c: 403: default:
  6869                           
  6870                           ;sort.c: 402: break;
  6871  004724  D017               	goto	l8239
  6872  004726                     l8237:
  6873  004726  C12B  F088         	movff	_cur_can,??_Distribution
  6874  00472A  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  6875                           
  6876                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6877                           ; Switch size 1, requested type "space"
  6878                           ; Number of cases is 1, Range of values is 0 to 0
  6879                           ; switch strategies available:
  6880                           ; Name         Instructions Cycles
  6881                           ; simple_byte            4     3 (average)
  6882                           ;	Chosen strategy is simple_byte
  6883  00472E  0100               	movlb	0	; () banked
  6884  004730  5189               	movf	(??_Distribution+1)& (0+255),w,b
  6885  004732  0A00               	xorlw	0	; case 0
  6886  004734  A4D8               	btfss	status,2,c
  6887  004736  D00E               	goto	l8239
  6888                           
  6889                           ; BSR set to: 0
  6890                           ; Switch size 1, requested type "space"
  6891                           ; Number of cases is 4, Range of values is 0 to 3
  6892                           ; switch strategies available:
  6893                           ; Name         Instructions Cycles
  6894                           ; simple_byte           13     7 (average)
  6895                           ;	Chosen strategy is simple_byte
  6896  004738  0100               	movlb	0	; () banked
  6897  00473A  5188               	movf	??_Distribution& (0+255),w,b
  6898  00473C  0A00               	xorlw	0	; case 0
  6899  00473E  B4D8               	btfsc	status,2,c
  6900  004740  D7BE               	goto	l8227
  6901  004742  0A01               	xorlw	1	; case 1
  6902  004744  B4D8               	btfsc	status,2,c
  6903  004746  D7C8               	goto	l8229
  6904  004748  0A03               	xorlw	3	; case 2
  6905  00474A  B4D8               	btfsc	status,2,c
  6906  00474C  D7D2               	goto	l8231
  6907  00474E  0A01               	xorlw	1	; case 3
  6908  004750  B4D8               	btfsc	status,2,c
  6909  004752  D7DC               	goto	l8233
  6910  004754                     l8239:
  6911                           
  6912                           ;sort.c: 406: updateServoPosition(1050, 3);
  6913  004754  0E04               	movlw	4
  6914  004756  0100               	movlb	0	; () banked
  6915  004758  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6916  00475A  0E1A               	movlw	26
  6917  00475C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6918  00475E  0E00               	movlw	0
  6919  004760  0100               	movlb	0	; () banked
  6920  004762  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6921  004764  0E03               	movlw	3
  6922  004766  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6923  004768  EC87  F027         	call	_updateServoPosition	;wreg free
  6924                           
  6925                           ;sort.c: 407: servo_timer_target = 750;
  6926  00476C  0E02               	movlw	2
  6927  00476E  6E70               	movwf	_servo_timer_target+1,c	;volatile
  6928  004770  0EEE               	movlw	238
  6929  004772  6E6F               	movwf	_servo_timer_target,c	;volatile
  6930                           
  6931                           ;sort.c: 408: f_panning_to_bin = 1;
  6932  004774  0E00               	movlw	0
  6933  004776  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
  6934  004778  0E01               	movlw	1
  6935  00477A  6E69               	movwf	_f_panning_to_bin,c	;volatile
  6936                           
  6937                           ;sort.c: 409: f_can_coming_to_distribution = 0;
  6938  00477C  0E00               	movlw	0
  6939  00477E  0101               	movlb	1	; () banked
  6940  004780  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  6941  004782  0E00               	movlw	0
  6942  004784  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  6943  004786  0012               	return	
  6944  004788                     __end_of_Distribution:
  6945                           	opt stack 0
  6946                           tblptru	equ	0xFF8
  6947                           tblptrh	equ	0xFF7
  6948                           tblptrl	equ	0xFF6
  6949                           tablat	equ	0xFF5
  6950                           prodh	equ	0xFF4
  6951                           prodl	equ	0xFF3
  6952                           postinc0	equ	0xFEE
  6953                           wreg	equ	0xFE8
  6954                           postdec1	equ	0xFE5
  6955                           fsr1l	equ	0xFE1
  6956                           indf2	equ	0xFDF
  6957                           postinc2	equ	0xFDE
  6958                           postdec2	equ	0xFDD
  6959                           fsr2h	equ	0xFDA
  6960                           fsr2l	equ	0xFD9
  6961                           status	equ	0xFD8
  6962                           
  6963 ;; *************** function _machineConfig *****************
  6964 ;; Defined at:
  6965 ;;		line 15 in file "MachineConfig.c"
  6966 ;; Parameters:    Size  Location     Type
  6967 ;;		None
  6968 ;; Auto vars:     Size  Location     Type
  6969 ;;		None
  6970 ;; Return value:  Size  Location     Type
  6971 ;;                  1    wreg      void 
  6972 ;; Registers used:
  6973 ;;		wreg, status,2
  6974 ;; Tracked objects:
  6975 ;;		On entry : 0/0
  6976 ;;		On exit  : 0/0
  6977 ;;		Unchanged: 0/0
  6978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6983 ;;Total ram usage:        0 bytes
  6984 ;; Hardware stack levels used:    1
  6985 ;; Hardware stack levels required when called:    7
  6986 ;; This function calls:
  6987 ;;		Nothing
  6988 ;; This function is called by:
  6989 ;;		_main
  6990 ;; This function uses a non-reentrant model
  6991 ;;
  6992                           
  6993                           	psect	text15
  6994  005234                     __ptext15:
  6995                           	opt stack 0
  6996  005234                     _machineConfig:
  6997                           	opt stack 23
  6998                           
  6999                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  7000                           
  7001                           ; BSR set to: 1
  7002                           ;incstack = 0
  7003  005234  0EF0               	movlw	240
  7004  005236  6ED3               	movwf	4051,c	;volatile
  7005                           
  7006                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  7007  005238  8C9B               	bsf	3995,6,c	;volatile
  7008                           
  7009                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  7010  00523A  0E07               	movlw	7
  7011  00523C  6E92               	movwf	3986,c	;volatile
  7012                           
  7013                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  7014  00523E  0EF2               	movlw	242
  7015  005240  6E93               	movwf	3987,c	;volatile
  7016                           
  7017                           ;MachineConfig.c: 27: TRISC = 0x00;
  7018  005242  0E00               	movlw	0
  7019  005244  6E94               	movwf	3988,c	;volatile
  7020                           
  7021                           ;MachineConfig.c: 31: TRISD = 0x00;
  7022  005246  0E00               	movlw	0
  7023  005248  6E95               	movwf	3989,c	;volatile
  7024                           
  7025                           ;MachineConfig.c: 34: TRISE = 0x00;
  7026  00524A  0E00               	movlw	0
  7027  00524C  6E96               	movwf	3990,c	;volatile
  7028                           
  7029                           ;MachineConfig.c: 37: LATA = 0x00;
  7030  00524E  0E00               	movlw	0
  7031  005250  6E89               	movwf	3977,c	;volatile
  7032                           
  7033                           ;MachineConfig.c: 38: LATB = 0x00;
  7034  005252  0E00               	movlw	0
  7035  005254  6E8A               	movwf	3978,c	;volatile
  7036                           
  7037                           ;MachineConfig.c: 39: LATC = 0x00;
  7038  005256  0E00               	movlw	0
  7039  005258  6E8B               	movwf	3979,c	;volatile
  7040                           
  7041                           ;MachineConfig.c: 40: LATD = 0x00;
  7042  00525A  0E00               	movlw	0
  7043  00525C  6E8C               	movwf	3980,c	;volatile
  7044                           
  7045                           ;MachineConfig.c: 41: LATE = 0x00;
  7046  00525E  0E00               	movlw	0
  7047  005260  6E8D               	movwf	3981,c	;volatile
  7048                           
  7049                           ;MachineConfig.c: 43: nRBPU = 0;
  7050  005262  9EF1               	bcf	intcon2,7,c	;volatile
  7051                           
  7052                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  7053  005264  0E00               	movlw	0
  7054  005266  6EC2               	movwf	4034,c	;volatile
  7055                           
  7056                           ;MachineConfig.c: 47: ADCON1 = 0b00001100;
  7057  005268  0E0C               	movlw	12
  7058  00526A  6EC1               	movwf	4033,c	;volatile
  7059                           
  7060                           ;MachineConfig.c: 50: CVRCON = 0x00;
  7061  00526C  0E00               	movlw	0
  7062  00526E  6EB5               	movwf	4021,c	;volatile
  7063                           
  7064                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  7065  005270  96B4               	bcf	4020,3,c	;volatile
  7066                           
  7067                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  7068  005272  0EB1               	movlw	177
  7069  005274  6EC0               	movwf	4032,c	;volatile
  7070                           
  7071                           ;MachineConfig.c: 55: INT1IE = 1;
  7072  005276  86F0               	bsf	intcon3,3,c	;volatile
  7073                           
  7074                           ;MachineConfig.c: 57: TMR0IE = 1;
  7075  005278  8AF2               	bsf	intcon,5,c	;volatile
  7076                           
  7077                           ;MachineConfig.c: 58: TMR1IE = 1;
  7078  00527A  809D               	bsf	3997,0,c	;volatile
  7079                           
  7080                           ;MachineConfig.c: 59: TMR2IE = 1;
  7081  00527C  829D               	bsf	3997,1,c	;volatile
  7082                           
  7083                           ;MachineConfig.c: 60: TMR3IE = 1;
  7084  00527E  82A0               	bsf	4000,1,c	;volatile
  7085                           
  7086                           ;MachineConfig.c: 62: T1CON = 0b10110000;
  7087  005280  0EB0               	movlw	176
  7088  005282  6ECD               	movwf	4045,c	;volatile
  7089                           
  7090                           ;MachineConfig.c: 63: T2CON = 0b01111011;
  7091  005284  0E7B               	movlw	123
  7092  005286  6ECA               	movwf	4042,c	;volatile
  7093                           
  7094                           ;MachineConfig.c: 64: PR2 = 0x22;
  7095  005288  0E22               	movlw	34
  7096  00528A  6ECB               	movwf	4043,c	;volatile
  7097                           
  7098                           ;MachineConfig.c: 65: T3CON = 0b10110000;
  7099  00528C  0EB0               	movlw	176
  7100  00528E  6EB1               	movwf	4017,c	;volatile
  7101                           
  7102                           ;MachineConfig.c: 66: PEIE = 1;
  7103  005290  8CF2               	bsf	intcon,6,c	;volatile
  7104                           
  7105                           ;MachineConfig.c: 67: ADIE = 0;
  7106  005292  9C9D               	bcf	3997,6,c	;volatile
  7107                           
  7108                           ;MachineConfig.c: 68: (INTCONbits.GIE = 0);
  7109  005294  9EF2               	bcf	intcon,7,c	;volatile
  7110  005296  0012               	return		;funcret
  7111  005298                     __end_of_machineConfig:
  7112                           	opt stack 0
  7113                           tblptru	equ	0xFF8
  7114                           tblptrh	equ	0xFF7
  7115                           tblptrl	equ	0xFF6
  7116                           tablat	equ	0xFF5
  7117                           prodh	equ	0xFF4
  7118                           prodl	equ	0xFF3
  7119                           intcon	equ	0xFF2
  7120                           intcon2	equ	0xFF1
  7121                           intcon3	equ	0xFF0
  7122                           postinc0	equ	0xFEE
  7123                           wreg	equ	0xFE8
  7124                           postdec1	equ	0xFE5
  7125                           fsr1l	equ	0xFE1
  7126                           indf2	equ	0xFDF
  7127                           postinc2	equ	0xFDE
  7128                           postdec2	equ	0xFDD
  7129                           fsr2h	equ	0xFDA
  7130                           fsr2l	equ	0xFD9
  7131                           status	equ	0xFD8
  7132                           
  7133 ;; *************** function _logRun *****************
  7134 ;; Defined at:
  7135 ;;		line 88 in file "EEPROM.c"
  7136 ;; Parameters:    Size  Location     Type
  7137 ;;		None
  7138 ;; Auto vars:     Size  Location     Type
  7139 ;;  byte_i          1   53[BANK0 ] unsigned char 
  7140 ;;  i               2   55[BANK0 ] int 
  7141 ;;  num             1   49[BANK0 ] unsigned char 
  7142 ;;  addr            2   57[BANK0 ] unsigned short 
  7143 ;;  byte11          1   54[BANK0 ] unsigned char 
  7144 ;;  byte3           1   52[BANK0 ] unsigned char 
  7145 ;;  byte2           1   51[BANK0 ] unsigned char 
  7146 ;;  byte1           1   50[BANK0 ] unsigned char 
  7147 ;; Return value:  Size  Location     Type
  7148 ;;                  1    wreg      void 
  7149 ;; Registers used:
  7150 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7151 ;; Tracked objects:
  7152 ;;		On entry : 0/0
  7153 ;;		On exit  : 0/0
  7154 ;;		Unchanged: 0/0
  7155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7157 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7159 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7160 ;;Total ram usage:       10 bytes
  7161 ;; Hardware stack levels used:    1
  7162 ;; Hardware stack levels required when called:   11
  7163 ;; This function calls:
  7164 ;;		_EEPROM_read
  7165 ;;		_EEPROM_write
  7166 ;; This function is called by:
  7167 ;;		_main
  7168 ;; This function uses a non-reentrant model
  7169 ;;
  7170                           
  7171                           	psect	text16
  7172  004044                     __ptext16:
  7173                           	opt stack 0
  7174  004044                     _logRun:
  7175                           	opt stack 19
  7176                           
  7177                           ;EEPROM.c: 101: sel = EEPROM_read(0);
  7178                           
  7179                           ;incstack = 0
  7180  004044  0E00               	movlw	0
  7181  004046  0100               	movlb	0	; () banked
  7182  004048  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  7183  00404A  0E00               	movlw	0
  7184  00404C  6F80               	movwf	EEPROM_read@address& (0+255),b
  7185  00404E  EC27  F02E         	call	_EEPROM_read	;wreg free
  7186  004052  0100               	movlb	0	; () banked
  7187  004054  6FFD               	movwf	_sel& (0+255),b
  7188                           
  7189                           ; BSR set to: 0
  7190                           ;EEPROM.c: 102: unsigned short addr = 1 + 11 * sel;
  7191  004056  0100               	movlb	0	; () banked
  7192  004058  51FD               	movf	_sel& (0+255),w,b
  7193  00405A  0D0B               	mullw	11
  7194  00405C  0E01               	movlw	1
  7195  00405E  24F3               	addwf	prodl,w,c
  7196  004060  0100               	movlb	0	; () banked
  7197  004062  6FB9               	movwf	logRun@addr& (0+255),b
  7198  004064  0E00               	movlw	0
  7199  004066  20F4               	addwfc	prodh,w,c
  7200  004068  0100               	movlb	0	; () banked
  7201  00406A  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  7202                           
  7203                           ; BSR set to: 0
  7204                           ;EEPROM.c: 105: if (sel < 3){
  7205  00406C  0E03               	movlw	3
  7206  00406E  0100               	movlb	0	; () banked
  7207  004070  61FD               	cpfslt	_sel& (0+255),b
  7208  004072  D00E               	goto	l9879
  7209                           
  7210                           ; BSR set to: 0
  7211                           ;EEPROM.c: 106: unsigned char num = sel+1;
  7212  004074  0100               	movlb	0	; () banked
  7213  004076  29FD               	incf	_sel& (0+255),w,b
  7214  004078  0100               	movlb	0	; () banked
  7215  00407A  6FB1               	movwf	logRun@num& (0+255),b
  7216                           
  7217                           ; BSR set to: 0
  7218                           ;EEPROM.c: 107: EEPROM_write(0, num);
  7219  00407C  0E00               	movlw	0
  7220  00407E  0100               	movlb	0	; () banked
  7221  004080  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7222  004082  0E00               	movlw	0
  7223  004084  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7224  004086  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  7225  00408A  ECDF  F022         	call	_EEPROM_write	;wreg free
  7226                           
  7227                           ;EEPROM.c: 108: }
  7228  00408E  D00A               	goto	l9881
  7229  004090                     l9879:
  7230                           
  7231                           ;EEPROM.c: 109: else{
  7232                           ;EEPROM.c: 110: EEPROM_write(0, 0);
  7233  004090  0E00               	movlw	0
  7234  004092  0100               	movlb	0	; () banked
  7235  004094  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7236  004096  0E00               	movlw	0
  7237  004098  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7238  00409A  0E00               	movlw	0
  7239  00409C  0100               	movlb	0	; () banked
  7240  00409E  6FAD               	movwf	EEPROM_write@data& (0+255),b
  7241  0040A0  ECDF  F022         	call	_EEPROM_write	;wreg free
  7242  0040A4                     l9881:
  7243                           
  7244                           ;EEPROM.c: 111: }
  7245                           ;EEPROM.c: 114: unsigned char byte1 = 0b10000000 | count_total;
  7246  0040A4  0100               	movlb	0	; () banked
  7247  0040A6  51FE               	movf	_count_total& (0+255),w,b
  7248  0040A8  0980               	iorlw	128
  7249  0040AA  0100               	movlb	0	; () banked
  7250  0040AC  6FB2               	movwf	logRun@byte1& (0+255),b
  7251                           
  7252                           ; BSR set to: 0
  7253                           ;EEPROM.c: 115: EEPROM_write(addr, byte1);
  7254  0040AE  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7255  0040B2  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7256  0040B6  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  7257  0040BA  ECDF  F022         	call	_EEPROM_write	;wreg free
  7258                           
  7259                           ;EEPROM.c: 116: addr++;
  7260  0040BE  0100               	movlb	0	; () banked
  7261  0040C0  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7262  0040C2  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7263                           
  7264                           ; BSR set to: 0
  7265                           ;EEPROM.c: 119: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  7266  0040C4  0101               	movlb	1	; () banked
  7267  0040C6  3927               	swapf	_count_pop_no_tab& (0+255),w,b
  7268  0040C8  0BF0               	andlw	240
  7269  0040CA  0101               	movlb	1	; () banked
  7270  0040CC  1129               	iorwf	_count_pop_w_tab& (0+255),w,b
  7271  0040CE  0100               	movlb	0	; () banked
  7272  0040D0  6FB3               	movwf	logRun@byte2& (0+255),b
  7273                           
  7274                           ; BSR set to: 0
  7275                           ;EEPROM.c: 120: EEPROM_write(addr, byte2);
  7276  0040D2  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7277  0040D6  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7278  0040DA  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  7279  0040DE  ECDF  F022         	call	_EEPROM_write	;wreg free
  7280                           
  7281                           ;EEPROM.c: 121: addr++;
  7282  0040E2  0100               	movlb	0	; () banked
  7283  0040E4  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7284  0040E6  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7285                           
  7286                           ; BSR set to: 0
  7287                           ;EEPROM.c: 122: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  7288  0040E8  0101               	movlb	1	; () banked
  7289  0040EA  3925               	swapf	_count_can_w_lab& (0+255),w,b
  7290  0040EC  0BF0               	andlw	240
  7291  0040EE  0101               	movlb	1	; () banked
  7292  0040F0  1123               	iorwf	_count_can_no_lab& (0+255),w,b
  7293  0040F2  0100               	movlb	0	; () banked
  7294  0040F4  6FB4               	movwf	logRun@byte3& (0+255),b
  7295                           
  7296                           ; BSR set to: 0
  7297                           ;EEPROM.c: 123: EEPROM_write(addr, byte3);
  7298  0040F6  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7299  0040FA  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7300  0040FE  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  7301  004102  ECDF  F022         	call	_EEPROM_write	;wreg free
  7302                           
  7303                           ;EEPROM.c: 124: addr++;
  7304  004106  0100               	movlb	0	; () banked
  7305  004108  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7306  00410A  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7307                           
  7308                           ; BSR set to: 0
  7309                           ;EEPROM.c: 127: for(int i = 0; i < 7; i++){
  7310  00410C  0E00               	movlw	0
  7311  00410E  0100               	movlb	0	; () banked
  7312  004110  6FB8               	movwf	(logRun@i+1)& (0+255),b
  7313  004112  0E00               	movlw	0
  7314  004114  6FB7               	movwf	logRun@i& (0+255),b
  7315                           
  7316                           ; BSR set to: 0
  7317  004116  0100               	movlb	0	; () banked
  7318  004118  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7319  00411A  D008               	goto	l9905
  7320  00411C  0100               	movlb	0	; () banked
  7321  00411E  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7322  004120  E128               	bnz	l1140
  7323  004122  0E07               	movlw	7
  7324  004124  0100               	movlb	0	; () banked
  7325  004126  5DB7               	subwf	logRun@i& (0+255),w,b
  7326  004128  B0D8               	btfsc	status,0,c
  7327  00412A  D023               	goto	l1140
  7328  00412C                     l9905:
  7329                           
  7330                           ; BSR set to: 0
  7331                           ;EEPROM.c: 128: unsigned char byte_i = startTime[i];
  7332  00412C  90D8               	bcf	status,0,c
  7333  00412E  0100               	movlb	0	; () banked
  7334  004130  35B7               	rlcf	logRun@i& (0+255),w,b
  7335  004132  6ED9               	movwf	fsr2l,c
  7336  004134  0100               	movlb	0	; () banked
  7337  004136  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  7338  004138  6EDA               	movwf	fsr2h,c
  7339  00413A  0E0E               	movlw	low _startTime
  7340  00413C  26D9               	addwf	fsr2l,f,c
  7341  00413E  0E01               	movlw	high _startTime
  7342  004140  22DA               	addwfc	fsr2h,f,c
  7343  004142  50DF               	movf	indf2,w,c
  7344  004144  0100               	movlb	0	; () banked
  7345  004146  6FB5               	movwf	logRun@byte_i& (0+255),b
  7346                           
  7347                           ; BSR set to: 0
  7348                           ;EEPROM.c: 129: EEPROM_write(addr, byte_i);
  7349  004148  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7350  00414C  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7351  004150  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  7352  004154  ECDF  F022         	call	_EEPROM_write	;wreg free
  7353                           
  7354                           ;EEPROM.c: 130: addr++;
  7355  004158  0100               	movlb	0	; () banked
  7356  00415A  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7357  00415C  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7358                           
  7359                           ; BSR set to: 0
  7360  00415E  0100               	movlb	0	; () banked
  7361  004160  4BB7               	infsnz	logRun@i& (0+255),f,b
  7362  004162  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  7363                           
  7364                           ; BSR set to: 0
  7365  004164  0100               	movlb	0	; () banked
  7366  004166  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7367  004168  D7E1               	goto	l9905
  7368  00416A  0100               	movlb	0	; () banked
  7369  00416C  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7370  00416E  E101               	bnz	u9370
  7371  004170  D7D8               	goto	L11
  7372  004172                     u9370:
  7373  004172                     l1140:
  7374                           
  7375                           ; BSR set to: 0
  7376                           ;EEPROM.c: 131: }
  7377                           ;EEPROM.c: 134: unsigned char byte11 = total_time;
  7378  004172  C0FA  F0B6         	movff	_total_time,logRun@byte11
  7379                           
  7380                           ; BSR set to: 0
  7381                           ;EEPROM.c: 135: EEPROM_write(addr, byte11);
  7382  004176  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7383  00417A  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7384  00417E  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  7385  004182  ECDF  F022         	call	_EEPROM_write	;wreg free
  7386  004186  0012               	return		;funcret
  7387  004188                     __end_of_logRun:
  7388                           	opt stack 0
  7389                           tblptru	equ	0xFF8
  7390                           tblptrh	equ	0xFF7
  7391                           tblptrl	equ	0xFF6
  7392                           tablat	equ	0xFF5
  7393                           prodh	equ	0xFF4
  7394                           prodl	equ	0xFF3
  7395                           intcon	equ	0xFF2
  7396                           intcon2	equ	0xFF1
  7397                           intcon3	equ	0xFF0
  7398                           postinc0	equ	0xFEE
  7399                           wreg	equ	0xFE8
  7400                           postdec1	equ	0xFE5
  7401                           fsr1l	equ	0xFE1
  7402                           indf2	equ	0xFDF
  7403                           postinc2	equ	0xFDE
  7404                           postdec2	equ	0xFDD
  7405                           fsr2h	equ	0xFDA
  7406                           fsr2l	equ	0xFD9
  7407                           status	equ	0xFD8
  7408                           
  7409 ;; *************** function _EEPROM_write *****************
  7410 ;; Defined at:
  7411 ;;		line 36 in file "EEPROM.c"
  7412 ;; Parameters:    Size  Location     Type
  7413 ;;  address         2   43[BANK0 ] unsigned short 
  7414 ;;  data            1   45[BANK0 ] unsigned char 
  7415 ;; Auto vars:     Size  Location     Type
  7416 ;;  i               1   48[BANK0 ] unsigned char 
  7417 ;;  i               1   47[BANK0 ] unsigned char 
  7418 ;; Return value:  Size  Location     Type
  7419 ;;                  1    wreg      void 
  7420 ;; Registers used:
  7421 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7422 ;; Tracked objects:
  7423 ;;		On entry : 0/0
  7424 ;;		On exit  : 0/0
  7425 ;;		Unchanged: 0/0
  7426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7427 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7428 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7429 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7430 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7431 ;;Total ram usage:        6 bytes
  7432 ;; Hardware stack levels used:    1
  7433 ;; Hardware stack levels required when called:   10
  7434 ;; This function calls:
  7435 ;;		_EEPROM_read
  7436 ;;		_lcdInst
  7437 ;;		_printf
  7438 ;; This function is called by:
  7439 ;;		_Loading
  7440 ;;		_logRun
  7441 ;; This function uses a non-reentrant model
  7442 ;;
  7443                           
  7444                           	psect	text17
  7445  0045BE                     __ptext17:
  7446                           	opt stack 0
  7447  0045BE                     _EEPROM_write:
  7448                           	opt stack 18
  7449                           
  7450                           ;EEPROM.c: 37: EECON1bits.WREN = 1;
  7451                           
  7452                           ;incstack = 0
  7453  0045BE  84A6               	bsf	4006,2,c	;volatile
  7454                           
  7455                           ;EEPROM.c: 40: EEADRH = (unsigned char)(address >> 8);
  7456  0045C0  0100               	movlb	0	; () banked
  7457  0045C2  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  7458  0045C4  6EAA               	movwf	4010,c	;volatile
  7459                           
  7460                           ; BSR set to: 0
  7461                           ;EEPROM.c: 41: EEADR = (unsigned char)address;
  7462  0045C6  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  7463                           
  7464                           ; BSR set to: 0
  7465                           ;EEPROM.c: 43: EEDATA = data;
  7466  0045CA  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  7467                           
  7468                           ; BSR set to: 0
  7469                           ;EEPROM.c: 44: EECON1bits.EEPGD = 0;
  7470  0045CE  9EA6               	bcf	4006,7,c	;volatile
  7471                           
  7472                           ; BSR set to: 0
  7473                           ;EEPROM.c: 45: EECON1bits.CFGS = 0;
  7474  0045D0  9CA6               	bcf	4006,6,c	;volatile
  7475                           
  7476                           ; BSR set to: 0
  7477                           ;EEPROM.c: 47: (INTCONbits.GIE = 0);
  7478  0045D2  9EF2               	bcf	intcon,7,c	;volatile
  7479                           
  7480                           ;EEPROM.c: 49: EECON2 = 0x55;
  7481  0045D4  0E55               	movlw	85
  7482  0045D6  6EA7               	movwf	4007,c	;volatile
  7483                           
  7484                           ;EEPROM.c: 50: EECON2 = 0x0AA;
  7485  0045D8  0EAA               	movlw	170
  7486  0045DA  6EA7               	movwf	4007,c	;volatile
  7487                           
  7488                           ; BSR set to: 0
  7489                           ;EEPROM.c: 51: EECON1bits.WR = 1;
  7490  0045DC  82A6               	bsf	4006,1,c	;volatile
  7491                           
  7492                           ; BSR set to: 0
  7493                           ;EEPROM.c: 52: (INTCONbits.GIE = 1);
  7494  0045DE  8EF2               	bsf	intcon,7,c	;volatile
  7495  0045E0                     l1118:
  7496  0045E0  A8A1               	btfss	4001,4,c	;volatile
  7497  0045E2  D7FE               	goto	l1118
  7498                           
  7499                           ;EEPROM.c: 57: PIR2bits.EEIF = 0;
  7500  0045E4  98A1               	bcf	4001,4,c	;volatile
  7501                           
  7502                           ;EEPROM.c: 58: EECON1bits.WREN = 0;
  7503  0045E6  94A6               	bcf	4006,2,c	;volatile
  7504                           
  7505                           ;EEPROM.c: 61: if(debug){
  7506  0045E8  0101               	movlb	1	; () banked
  7507  0045EA  512D               	movf	_debug& (0+255),w,b
  7508  0045EC  0101               	movlb	1	; () banked
  7509  0045EE  112E               	iorwf	(_debug+1)& (0+255),w,b
  7510  0045F0  B4D8               	btfsc	status,2,c
  7511  0045F2  0012               	return	
  7512                           
  7513                           ; BSR set to: 1
  7514                           ;EEPROM.c: 62: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7515  0045F4  0E01               	movlw	1
  7516  0045F6  EC59  F02E         	call	_lcdInst
  7517  0045FA  0E68               	movlw	104
  7518  0045FC  0100               	movlb	0	; () banked
  7519  0045FE  6FAE               	movwf	??_EEPROM_write& (0+255),b
  7520  004600  0EE4               	movlw	228
  7521  004602                     u10147:
  7522  004602  2EE8               	decfsz	wreg,f,c
  7523  004604  D7FE               	bra	u10147
  7524  004606  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  7525  004608  D7FC               	bra	u10147
  7526  00460A  F000               	nop	
  7527                           
  7528                           ;EEPROM.c: 63: lcdInst(0b10000000);;
  7529  00460C  0E80               	movlw	128
  7530  00460E  EC59  F02E         	call	_lcdInst
  7531                           
  7532                           ;EEPROM.c: 64: if(EEPROM_read(address)==data){
  7533  004612  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  7534  004616  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  7535  00461A  EC27  F02E         	call	_EEPROM_read	;wreg free
  7536  00461E  0100               	movlb	0	; () banked
  7537  004620  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  7538  004622  A4D8               	btfss	status,2,c
  7539  004624  D024               	goto	l7407
  7540                           
  7541                           ; BSR set to: 0
  7542                           ;EEPROM.c: 65: printf("(data: %u, addr: %u)", data, address);
  7543  004626  0ED0               	movlw	low STR_71
  7544  004628  0100               	movlb	0	; () banked
  7545  00462A  6F8E               	movwf	printf@f& (0+255),b
  7546  00462C  0EFA               	movlw	high STR_71
  7547  00462E  0100               	movlb	0	; () banked
  7548  004630  6F8F               	movwf	(printf@f+1)& (0+255),b
  7549  004632  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  7550  004636  0100               	movlb	0	; () banked
  7551  004638  6B91               	clrf	(?_printf+3)& (0+255),b
  7552  00463A  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  7553  00463E  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  7554  004642  EC15  F00E         	call	_printf	;wreg free
  7555                           
  7556                           ;EEPROM.c: 66: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  7557  004646  0E00               	movlw	0
  7558  004648  0100               	movlb	0	; () banked
  7559  00464A  6FAF               	movwf	EEPROM_write@i& (0+255),b
  7560  00464C                     l7399:
  7561                           
  7562                           ; BSR set to: 0
  7563  00464C  0E63               	movlw	99
  7564  00464E  0100               	movlb	0	; () banked
  7565  004650  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  7566  004652  D001               	goto	l7403
  7567  004654  0012               	return	
  7568  004656                     l7403:
  7569                           
  7570                           ; BSR set to: 0
  7571  004656  0E68               	movlw	104
  7572  004658  0100               	movlb	0	; () banked
  7573  00465A  6FAE               	movwf	??_EEPROM_write& (0+255),b
  7574  00465C  0EE4               	movlw	228
  7575  00465E                     u10157:
  7576  00465E  2EE8               	decfsz	wreg,f,c
  7577  004660  D7FE               	bra	u10157
  7578  004662  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  7579  004664  D7FC               	bra	u10157
  7580  004666  F000               	nop	
  7581  004668  0100               	movlb	0	; () banked
  7582  00466A  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  7583  00466C  D7EF               	goto	l7399
  7584  00466E                     l7407:
  7585                           
  7586                           ; BSR set to: 0
  7587                           ;EEPROM.c: 68: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  7588  00466E  0EBD               	movlw	low STR_72
  7589  004670  0100               	movlb	0	; () banked
  7590  004672  6F8E               	movwf	printf@f& (0+255),b
  7591  004674  0EFF               	movlw	high STR_72
  7592  004676  0100               	movlb	0	; () banked
  7593  004678  6F8F               	movwf	(printf@f+1)& (0+255),b
  7594  00467A  EC15  F00E         	call	_printf	;wreg free
  7595  00467E  0E00               	movlw	0
  7596  004680  0100               	movlb	0	; () banked
  7597  004682  6FB0               	movwf	EEPROM_write@i_1406& (0+255),b
  7598  004684                     l7411:
  7599                           
  7600                           ; BSR set to: 0
  7601  004684  0E63               	movlw	99
  7602  004686  0100               	movlb	0	; () banked
  7603  004688  65B0               	cpfsgt	EEPROM_write@i_1406& (0+255),b
  7604  00468A  D001               	goto	l7415
  7605  00468C  0012               	return	
  7606  00468E                     l7415:
  7607                           
  7608                           ; BSR set to: 0
  7609  00468E  0E68               	movlw	104
  7610  004690  0100               	movlb	0	; () banked
  7611  004692  6FAE               	movwf	??_EEPROM_write& (0+255),b
  7612  004694  0EE4               	movlw	228
  7613  004696                     u10167:
  7614  004696  2EE8               	decfsz	wreg,f,c
  7615  004698  D7FE               	bra	u10167
  7616  00469A  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  7617  00469C  D7FC               	bra	u10167
  7618  00469E  F000               	nop	
  7619  0046A0  0100               	movlb	0	; () banked
  7620  0046A2  2BB0               	incf	EEPROM_write@i_1406& (0+255),f,b
  7621  0046A4  D7EF               	goto	l7411
  7622  0046A6                     __end_of_EEPROM_write:
  7623                           	opt stack 0
  7624                           tblptru	equ	0xFF8
  7625                           tblptrh	equ	0xFF7
  7626                           tblptrl	equ	0xFF6
  7627                           tablat	equ	0xFF5
  7628                           prodh	equ	0xFF4
  7629                           prodl	equ	0xFF3
  7630                           intcon	equ	0xFF2
  7631                           intcon2	equ	0xFF1
  7632                           intcon3	equ	0xFF0
  7633                           postinc0	equ	0xFEE
  7634                           wreg	equ	0xFE8
  7635                           postdec1	equ	0xFE5
  7636                           fsr1l	equ	0xFE1
  7637                           indf2	equ	0xFDF
  7638                           postinc2	equ	0xFDE
  7639                           postdec2	equ	0xFDD
  7640                           fsr2h	equ	0xFDA
  7641                           fsr2l	equ	0xFD9
  7642                           status	equ	0xFD8
  7643                           
  7644 ;; *************** function _EEPROM_read *****************
  7645 ;; Defined at:
  7646 ;;		line 72 in file "EEPROM.c"
  7647 ;; Parameters:    Size  Location     Type
  7648 ;;  address         2    0[BANK0 ] unsigned short 
  7649 ;; Auto vars:     Size  Location     Type
  7650 ;;		None
  7651 ;; Return value:  Size  Location     Type
  7652 ;;                  1    wreg      unsigned char 
  7653 ;; Registers used:
  7654 ;;		wreg, status,2
  7655 ;; Tracked objects:
  7656 ;;		On entry : 0/0
  7657 ;;		On exit  : 0/0
  7658 ;;		Unchanged: 0/0
  7659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7660 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7663 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7664 ;;Total ram usage:        2 bytes
  7665 ;; Hardware stack levels used:    1
  7666 ;; Hardware stack levels required when called:    7
  7667 ;; This function calls:
  7668 ;;		Nothing
  7669 ;; This function is called by:
  7670 ;;		_Loading
  7671 ;;		_EEPROM_write
  7672 ;;		_logRun
  7673 ;; This function uses a non-reentrant model
  7674 ;;
  7675                           
  7676                           	psect	text18
  7677  005C4E                     __ptext18:
  7678                           	opt stack 0
  7679  005C4E                     _EEPROM_read:
  7680                           	opt stack 20
  7681                           
  7682                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
  7683                           
  7684                           ;incstack = 0
  7685  005C4E  0100               	movlb	0	; () banked
  7686  005C50  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  7687  005C52  6EAA               	movwf	4010,c	;volatile
  7688                           
  7689                           ; BSR set to: 0
  7690                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
  7691  005C54  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  7692                           
  7693                           ; BSR set to: 0
  7694                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
  7695  005C58  9EA6               	bcf	4006,7,c	;volatile
  7696                           
  7697                           ; BSR set to: 0
  7698                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
  7699  005C5A  9CA6               	bcf	4006,6,c	;volatile
  7700                           
  7701                           ; BSR set to: 0
  7702                           ;EEPROM.c: 79: EECON1bits.RD = 1;
  7703  005C5C  80A6               	bsf	4006,0,c	;volatile
  7704  005C5E                     l1131:
  7705  005C5E  B0A6               	btfsc	4006,0,c	;volatile
  7706  005C60  D7FE               	goto	l1131
  7707                           
  7708                           ;EEPROM.c: 85: return EEDATA;
  7709  005C62  50A8               	movf	4008,w,c	;volatile
  7710  005C64  0012               	return	
  7711  005C66                     __end_of_EEPROM_read:
  7712                           	opt stack 0
  7713                           tblptru	equ	0xFF8
  7714                           tblptrh	equ	0xFF7
  7715                           tblptrl	equ	0xFF6
  7716                           tablat	equ	0xFF5
  7717                           prodh	equ	0xFF4
  7718                           prodl	equ	0xFF3
  7719                           intcon	equ	0xFF2
  7720                           intcon2	equ	0xFF1
  7721                           intcon3	equ	0xFF0
  7722                           postinc0	equ	0xFEE
  7723                           wreg	equ	0xFE8
  7724                           postdec1	equ	0xFE5
  7725                           fsr1l	equ	0xFE1
  7726                           indf2	equ	0xFDF
  7727                           postinc2	equ	0xFDE
  7728                           postdec2	equ	0xFDD
  7729                           fsr2h	equ	0xFDA
  7730                           fsr2l	equ	0xFD9
  7731                           status	equ	0xFD8
  7732                           
  7733 ;; *************** function _initUI *****************
  7734 ;; Defined at:
  7735 ;;		line 62 in file "UI.c"
  7736 ;; Parameters:    Size  Location     Type
  7737 ;;		None
  7738 ;; Auto vars:     Size  Location     Type
  7739 ;;		None
  7740 ;; Return value:  Size  Location     Type
  7741 ;;                  1    wreg      void 
  7742 ;; Registers used:
  7743 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7744 ;; Tracked objects:
  7745 ;;		On entry : 0/0
  7746 ;;		On exit  : 0/0
  7747 ;;		Unchanged: 0/0
  7748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7753 ;;Total ram usage:        0 bytes
  7754 ;; Hardware stack levels used:    1
  7755 ;; Hardware stack levels required when called:   12
  7756 ;; This function calls:
  7757 ;;		_change_state_to_menu_start
  7758 ;;		_loadRTC
  7759 ;; This function is called by:
  7760 ;;		_main
  7761 ;; This function uses a non-reentrant model
  7762 ;;
  7763                           
  7764                           	psect	text19
  7765  005836                     __ptext19:
  7766                           	opt stack 0
  7767  005836                     _initUI:
  7768                           	opt stack 18
  7769                           
  7770                           ;UI.c: 63: (INTCONbits.GIE = 1);
  7771                           
  7772                           ;incstack = 0
  7773  005836  8EF2               	bsf	intcon,7,c	;volatile
  7774                           
  7775                           ;UI.c: 64: machine_state = UI_state;
  7776  005838  0E00               	movlw	0
  7777  00583A  0100               	movlb	0	; () banked
  7778  00583C  6FFC               	movwf	_machine_state& (0+255),b
  7779                           
  7780                           ;UI.c: 65: logstate = 0;
  7781  00583E  0E00               	movlw	0
  7782  005840  0100               	movlb	0	; () banked
  7783  005842  6FF9               	movwf	(_logstate+1)& (0+255),b
  7784  005844  0E00               	movlw	0
  7785  005846  6FF8               	movwf	_logstate& (0+255),b
  7786                           
  7787                           ; BSR set to: 0
  7788                           ;UI.c: 67: if(RTCflag){
  7789  005848  0100               	movlb	0	; () banked
  7790  00584A  51E4               	movf	_RTCflag& (0+255),w,b
  7791  00584C  0100               	movlb	0	; () banked
  7792  00584E  11E5               	iorwf	(_RTCflag+1)& (0+255),w,b
  7793  005850  A4D8               	btfss	status,2,c
  7794                           
  7795                           ; BSR set to: 0
  7796                           ;UI.c: 68: loadRTC();
  7797  005852  ECBC  F026         	call	_loadRTC	;wreg free
  7798                           
  7799                           ;UI.c: 69: }
  7800                           ;UI.c: 71: change_state_to_menu_start();
  7801  005856  EC39  F02D         	call	_change_state_to_menu_start	;wreg free
  7802                           
  7803                           ;UI.c: 72: firstboot = 1;
  7804  00585A  0E00               	movlw	0
  7805  00585C  0101               	movlb	1	; () banked
  7806  00585E  6F3C               	movwf	(_firstboot+1)& (0+255),b
  7807  005860  0E01               	movlw	1
  7808  005862  6F3B               	movwf	_firstboot& (0+255),b
  7809                           
  7810                           ; BSR set to: 1
  7811  005864  0012               	return		;funcret
  7812  005866                     __end_of_initUI:
  7813                           	opt stack 0
  7814                           tblptru	equ	0xFF8
  7815                           tblptrh	equ	0xFF7
  7816                           tblptrl	equ	0xFF6
  7817                           tablat	equ	0xFF5
  7818                           prodh	equ	0xFF4
  7819                           prodl	equ	0xFF3
  7820                           intcon	equ	0xFF2
  7821                           intcon2	equ	0xFF1
  7822                           intcon3	equ	0xFF0
  7823                           postinc0	equ	0xFEE
  7824                           wreg	equ	0xFE8
  7825                           postdec1	equ	0xFE5
  7826                           fsr1l	equ	0xFE1
  7827                           indf2	equ	0xFDF
  7828                           postinc2	equ	0xFDE
  7829                           postdec2	equ	0xFDD
  7830                           fsr2h	equ	0xFDA
  7831                           fsr2l	equ	0xFD9
  7832                           status	equ	0xFD8
  7833                           
  7834 ;; *************** function _loadRTC *****************
  7835 ;; Defined at:
  7836 ;;		line 28 in file "RTC.c"
  7837 ;; Parameters:    Size  Location     Type
  7838 ;;		None
  7839 ;; Auto vars:     Size  Location     Type
  7840 ;;  i               2   22[BANK0 ] int 
  7841 ;; Return value:  Size  Location     Type
  7842 ;;                  1    wreg      void 
  7843 ;; Registers used:
  7844 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7845 ;; Tracked objects:
  7846 ;;		On entry : 0/0
  7847 ;;		On exit  : 0/0
  7848 ;;		Unchanged: 0/0
  7849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7851 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7852 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7853 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7854 ;;Total ram usage:        3 bytes
  7855 ;; Hardware stack levels used:    1
  7856 ;; Hardware stack levels required when called:    9
  7857 ;; This function calls:
  7858 ;;		_I2C_Master_Init
  7859 ;;		_I2C_Master_Start
  7860 ;;		_I2C_Master_Stop
  7861 ;;		_I2C_Master_Write
  7862 ;; This function is called by:
  7863 ;;		_initUI
  7864 ;; This function uses a non-reentrant model
  7865 ;;
  7866                           
  7867                           	psect	text20
  7868  004D78                     __ptext20:
  7869                           	opt stack 0
  7870  004D78                     _loadRTC:
  7871                           	opt stack 20
  7872                           
  7873                           ;RTC.c: 30: I2C_Master_Init(10000);
  7874                           
  7875                           ; BSR set to: 1
  7876                           ;incstack = 0
  7877  004D78  0E10               	movlw	16
  7878  004D7A  0100               	movlb	0	; () banked
  7879  004D7C  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  7880  004D7E  0E27               	movlw	39
  7881  004D80  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  7882  004D82  0E00               	movlw	0
  7883  004D84  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  7884  004D86  0E00               	movlw	0
  7885  004D88  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  7886  004D8A  EC7D  F029         	call	_I2C_Master_Init	;wreg free
  7887                           
  7888                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  7889  004D8E  9EF2               	bcf	intcon,7,c	;volatile
  7890                           
  7891                           ;RTC.c: 34: I2C_Master_Start();
  7892  004D90  EC83  F02E         	call	_I2C_Master_Start	;wreg free
  7893                           
  7894                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  7895  004D94  0E00               	movlw	0
  7896  004D96  0100               	movlb	0	; () banked
  7897  004D98  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7898  004D9A  0ED0               	movlw	208
  7899  004D9C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7900  004D9E  EC6D  F02E         	call	_I2C_Master_Write	;wreg free
  7901                           
  7902                           ;RTC.c: 36: I2C_Master_Write(0x00);
  7903  004DA2  0E00               	movlw	0
  7904  004DA4  0100               	movlb	0	; () banked
  7905  004DA6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7906  004DA8  0E00               	movlw	0
  7907  004DAA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7908  004DAC  EC6D  F02E         	call	_I2C_Master_Write	;wreg free
  7909                           
  7910                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  7911  004DB0  0E00               	movlw	0
  7912  004DB2  0100               	movlb	0	; () banked
  7913  004DB4  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  7914  004DB6  0E00               	movlw	0
  7915  004DB8  6F96               	movwf	loadRTC@i& (0+255),b
  7916  004DBA                     l7635:
  7917                           
  7918                           ; BSR set to: 0
  7919  004DBA  0100               	movlb	0	; () banked
  7920  004DBC  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  7921  004DBE  D008               	goto	l7639
  7922  004DC0  0100               	movlb	0	; () banked
  7923  004DC2  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  7924  004DC4  E11B               	bnz	l7645
  7925  004DC6  0E07               	movlw	7
  7926  004DC8  0100               	movlb	0	; () banked
  7927  004DCA  5D96               	subwf	loadRTC@i& (0+255),w,b
  7928  004DCC  B0D8               	btfsc	status,0,c
  7929  004DCE  D016               	goto	l7645
  7930  004DD0                     l7639:
  7931                           
  7932                           ; BSR set to: 0
  7933                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  7934  004DD0  0E1C               	movlw	low _time
  7935  004DD2  0100               	movlb	0	; () banked
  7936  004DD4  2596               	addwf	loadRTC@i& (0+255),w,b
  7937  004DD6  6ED9               	movwf	fsr2l,c
  7938  004DD8  0E01               	movlw	high _time
  7939  004DDA  0100               	movlb	0	; () banked
  7940  004DDC  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  7941  004DDE  6EDA               	movwf	fsr2h,c
  7942  004DE0  50DF               	movf	indf2,w,c
  7943  004DE2  0100               	movlb	0	; () banked
  7944  004DE4  6F95               	movwf	??_loadRTC& (0+255),b
  7945  004DE6  0100               	movlb	0	; () banked
  7946  004DE8  5195               	movf	??_loadRTC& (0+255),w,b
  7947  004DEA  0100               	movlb	0	; () banked
  7948  004DEC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7949  004DEE  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  7950  004DF0  EC6D  F02E         	call	_I2C_Master_Write	;wreg free
  7951  004DF4  0100               	movlb	0	; () banked
  7952  004DF6  4B96               	infsnz	loadRTC@i& (0+255),f,b
  7953  004DF8  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  7954  004DFA  D7DF               	goto	l7635
  7955  004DFC                     l7645:
  7956                           
  7957                           ; BSR set to: 0
  7958                           ;RTC.c: 39: }
  7959                           ;RTC.c: 40: I2C_Master_Stop();
  7960  004DFC  EC7F  F02E         	call	_I2C_Master_Stop	;wreg free
  7961                           
  7962                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  7963  004E00  8EF2               	bsf	intcon,7,c	;volatile
  7964  004E02  0012               	return		;funcret
  7965  004E04                     __end_of_loadRTC:
  7966                           	opt stack 0
  7967                           tblptru	equ	0xFF8
  7968                           tblptrh	equ	0xFF7
  7969                           tblptrl	equ	0xFF6
  7970                           tablat	equ	0xFF5
  7971                           prodh	equ	0xFF4
  7972                           prodl	equ	0xFF3
  7973                           intcon	equ	0xFF2
  7974                           intcon2	equ	0xFF1
  7975                           intcon3	equ	0xFF0
  7976                           postinc0	equ	0xFEE
  7977                           wreg	equ	0xFE8
  7978                           postdec1	equ	0xFE5
  7979                           fsr1l	equ	0xFE1
  7980                           indf2	equ	0xFDF
  7981                           postinc2	equ	0xFDE
  7982                           postdec2	equ	0xFDD
  7983                           fsr2h	equ	0xFDA
  7984                           fsr2l	equ	0xFD9
  7985                           status	equ	0xFD8
  7986                           
  7987 ;; *************** function _I2C_Master_Init *****************
  7988 ;; Defined at:
  7989 ;;		line 15 in file "I2C.c"
  7990 ;; Parameters:    Size  Location     Type
  7991 ;;  c               4   13[BANK0 ] const unsigned long 
  7992 ;; Auto vars:     Size  Location     Type
  7993 ;;		None
  7994 ;; Return value:  Size  Location     Type
  7995 ;;                  1    wreg      void 
  7996 ;; Registers used:
  7997 ;;		wreg, status,2, status,0, cstack
  7998 ;; Tracked objects:
  7999 ;;		On entry : 0/0
  8000 ;;		On exit  : 0/0
  8001 ;;		Unchanged: 0/0
  8002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8003 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8005 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8006 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8007 ;;Total ram usage:        8 bytes
  8008 ;; Hardware stack levels used:    1
  8009 ;; Hardware stack levels required when called:    8
  8010 ;; This function calls:
  8011 ;;		___lldiv
  8012 ;; This function is called by:
  8013 ;;		_main
  8014 ;;		_loadRTC
  8015 ;; This function uses a non-reentrant model
  8016 ;;
  8017                           
  8018                           	psect	text21
  8019  0052FA                     __ptext21:
  8020                           	opt stack 0
  8021  0052FA                     _I2C_Master_Init:
  8022                           	opt stack 20
  8023                           
  8024                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  8025                           
  8026                           ;incstack = 0
  8027  0052FA  0E00               	movlw	0
  8028  0052FC  6EC7               	movwf	4039,c	;volatile
  8029                           
  8030                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  8031  0052FE  0E28               	movlw	40
  8032  005300  6EC6               	movwf	4038,c	;volatile
  8033                           
  8034                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  8035  005302  0E00               	movlw	0
  8036  005304  6EC5               	movwf	4037,c	;volatile
  8037                           
  8038                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  8039  005306  0E00               	movlw	0
  8040  005308  0100               	movlb	0	; () banked
  8041  00530A  6F80               	movwf	___lldiv@dividend& (0+255),b
  8042  00530C  0E48               	movlw	72
  8043  00530E  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  8044  005310  0EE8               	movlw	232
  8045  005312  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  8046  005314  0E01               	movlw	1
  8047  005316  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  8048  005318  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  8049  00531C  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  8050  005320  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  8051  005324  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  8052  005328  0E02               	movlw	2
  8053  00532A                     u5935:
  8054  00532A  90D8               	bcf	status,0,c
  8055  00532C  0100               	movlb	0	; () banked
  8056  00532E  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  8057  005330  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  8058  005332  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  8059  005334  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  8060  005336  2EE8               	decfsz	wreg,f,c
  8061  005338  D7F8               	goto	u5935
  8062  00533A  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  8063  00533E  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  8064  005342  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  8065  005346  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  8066  00534A  ECB8  F025         	call	___lldiv	;wreg free
  8067  00534E  0100               	movlb	0	; () banked
  8068  005350  0580               	decf	?___lldiv& (0+255),w,b
  8069  005352  6EC8               	movwf	4040,c	;volatile
  8070                           
  8071                           ; BSR set to: 0
  8072                           ;I2C.c: 22: TRISC3 = 1;
  8073  005354  8694               	bsf	3988,3,c	;volatile
  8074                           
  8075                           ; BSR set to: 0
  8076                           ;I2C.c: 23: TRISC4 = 1;
  8077  005356  8894               	bsf	3988,4,c	;volatile
  8078                           
  8079                           ; BSR set to: 0
  8080  005358  0012               	return		;funcret
  8081  00535A                     __end_of_I2C_Master_Init:
  8082                           	opt stack 0
  8083                           tblptru	equ	0xFF8
  8084                           tblptrh	equ	0xFF7
  8085                           tblptrl	equ	0xFF6
  8086                           tablat	equ	0xFF5
  8087                           prodh	equ	0xFF4
  8088                           prodl	equ	0xFF3
  8089                           intcon	equ	0xFF2
  8090                           intcon2	equ	0xFF1
  8091                           intcon3	equ	0xFF0
  8092                           postinc0	equ	0xFEE
  8093                           wreg	equ	0xFE8
  8094                           postdec1	equ	0xFE5
  8095                           fsr1l	equ	0xFE1
  8096                           indf2	equ	0xFDF
  8097                           postinc2	equ	0xFDE
  8098                           postdec2	equ	0xFDD
  8099                           fsr2h	equ	0xFDA
  8100                           fsr2l	equ	0xFD9
  8101                           status	equ	0xFD8
  8102                           
  8103 ;; *************** function ___lldiv *****************
  8104 ;; Defined at:
  8105 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  8106 ;; Parameters:    Size  Location     Type
  8107 ;;  dividend        4    0[BANK0 ] unsigned long 
  8108 ;;  divisor         4    4[BANK0 ] unsigned long 
  8109 ;; Auto vars:     Size  Location     Type
  8110 ;;  quotient        4    8[BANK0 ] unsigned long 
  8111 ;;  counter         1   12[BANK0 ] unsigned char 
  8112 ;; Return value:  Size  Location     Type
  8113 ;;                  4    0[BANK0 ] unsigned long 
  8114 ;; Registers used:
  8115 ;;		wreg, status,2, status,0
  8116 ;; Tracked objects:
  8117 ;;		On entry : 0/0
  8118 ;;		On exit  : 0/0
  8119 ;;		Unchanged: 0/0
  8120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8121 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8122 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8124 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8125 ;;Total ram usage:       13 bytes
  8126 ;; Hardware stack levels used:    1
  8127 ;; Hardware stack levels required when called:    7
  8128 ;; This function calls:
  8129 ;;		Nothing
  8130 ;; This function is called by:
  8131 ;;		_I2C_Master_Init
  8132 ;; This function uses a non-reentrant model
  8133 ;;
  8134                           
  8135                           	psect	text22
  8136  004B70                     __ptext22:
  8137                           	opt stack 0
  8138  004B70                     ___lldiv:
  8139                           	opt stack 20
  8140                           
  8141                           ; BSR set to: 0
  8142                           ;incstack = 0
  8143  004B70  0E00               	movlw	0
  8144  004B72  0100               	movlb	0	; () banked
  8145  004B74  6F88               	movwf	___lldiv@quotient& (0+255),b
  8146  004B76  0E00               	movlw	0
  8147  004B78  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  8148  004B7A  0E00               	movlw	0
  8149  004B7C  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  8150  004B7E  0E00               	movlw	0
  8151  004B80  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  8152                           
  8153                           ; BSR set to: 0
  8154  004B82  0100               	movlb	0	; () banked
  8155  004B84  5184               	movf	___lldiv@divisor& (0+255),w,b
  8156  004B86  0100               	movlb	0	; () banked
  8157  004B88  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  8158  004B8A  0100               	movlb	0	; () banked
  8159  004B8C  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  8160  004B8E  0100               	movlb	0	; () banked
  8161  004B90  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  8162  004B92  B4D8               	btfsc	status,2,c
  8163  004B94  D042               	goto	l1911
  8164                           
  8165                           ; BSR set to: 0
  8166  004B96  0E01               	movlw	1
  8167  004B98  0100               	movlb	0	; () banked
  8168  004B9A  6F8C               	movwf	___lldiv@counter& (0+255),b
  8169  004B9C  D008               	goto	l6959
  8170  004B9E                     l6957:
  8171                           
  8172                           ; BSR set to: 0
  8173  004B9E  0100               	movlb	0	; () banked
  8174  004BA0  90D8               	bcf	status,0,c
  8175  004BA2  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  8176  004BA4  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  8177  004BA6  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  8178  004BA8  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  8179  004BAA  0100               	movlb	0	; () banked
  8180  004BAC  2B8C               	incf	___lldiv@counter& (0+255),f,b
  8181  004BAE                     l6959:
  8182                           
  8183                           ; BSR set to: 0
  8184  004BAE  0100               	movlb	0	; () banked
  8185  004BB0  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  8186  004BB2  D7F5               	goto	l6957
  8187  004BB4                     l6961:
  8188                           
  8189                           ; BSR set to: 0
  8190  004BB4  0100               	movlb	0	; () banked
  8191  004BB6  90D8               	bcf	status,0,c
  8192  004BB8  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  8193  004BBA  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  8194  004BBC  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  8195  004BBE  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  8196                           
  8197                           ; BSR set to: 0
  8198  004BC0  0100               	movlb	0	; () banked
  8199  004BC2  5184               	movf	___lldiv@divisor& (0+255),w,b
  8200  004BC4  0100               	movlb	0	; () banked
  8201  004BC6  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  8202  004BC8  0100               	movlb	0	; () banked
  8203  004BCA  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8204  004BCC  0100               	movlb	0	; () banked
  8205  004BCE  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  8206  004BD0  0100               	movlb	0	; () banked
  8207  004BD2  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8208  004BD4  0100               	movlb	0	; () banked
  8209  004BD6  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  8210  004BD8  0100               	movlb	0	; () banked
  8211  004BDA  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8212  004BDC  0100               	movlb	0	; () banked
  8213  004BDE  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  8214  004BE0  A0D8               	btfss	status,0,c
  8215  004BE2  D012               	goto	l6969
  8216                           
  8217                           ; BSR set to: 0
  8218  004BE4  0100               	movlb	0	; () banked
  8219  004BE6  5184               	movf	___lldiv@divisor& (0+255),w,b
  8220  004BE8  0100               	movlb	0	; () banked
  8221  004BEA  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  8222  004BEC  0100               	movlb	0	; () banked
  8223  004BEE  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8224  004BF0  0100               	movlb	0	; () banked
  8225  004BF2  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  8226  004BF4  0100               	movlb	0	; () banked
  8227  004BF6  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8228  004BF8  0100               	movlb	0	; () banked
  8229  004BFA  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  8230  004BFC  0100               	movlb	0	; () banked
  8231  004BFE  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8232  004C00  0100               	movlb	0	; () banked
  8233  004C02  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  8234                           
  8235                           ; BSR set to: 0
  8236  004C04  0100               	movlb	0	; () banked
  8237  004C06  8188               	bsf	___lldiv@quotient& (0+255),0,b
  8238  004C08                     l6969:
  8239                           
  8240                           ; BSR set to: 0
  8241  004C08  0100               	movlb	0	; () banked
  8242  004C0A  90D8               	bcf	status,0,c
  8243  004C0C  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  8244  004C0E  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  8245  004C10  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  8246  004C12  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  8247                           
  8248                           ; BSR set to: 0
  8249  004C14  0100               	movlb	0	; () banked
  8250  004C16  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  8251  004C18  D7CD               	goto	l6961
  8252  004C1A                     l1911:
  8253                           
  8254                           ; BSR set to: 0
  8255  004C1A  C088  F080         	movff	___lldiv@quotient,?___lldiv
  8256  004C1E  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  8257  004C22  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  8258  004C26  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  8259                           
  8260                           ; BSR set to: 0
  8261  004C2A  0012               	return		;funcret
  8262  004C2C                     __end_of___lldiv:
  8263                           	opt stack 0
  8264                           tblptru	equ	0xFF8
  8265                           tblptrh	equ	0xFF7
  8266                           tblptrl	equ	0xFF6
  8267                           tablat	equ	0xFF5
  8268                           prodh	equ	0xFF4
  8269                           prodl	equ	0xFF3
  8270                           intcon	equ	0xFF2
  8271                           intcon2	equ	0xFF1
  8272                           intcon3	equ	0xFF0
  8273                           postinc0	equ	0xFEE
  8274                           wreg	equ	0xFE8
  8275                           postdec1	equ	0xFE5
  8276                           fsr1l	equ	0xFE1
  8277                           indf2	equ	0xFDF
  8278                           postinc2	equ	0xFDE
  8279                           postdec2	equ	0xFDD
  8280                           fsr2h	equ	0xFDA
  8281                           fsr2l	equ	0xFD9
  8282                           status	equ	0xFD8
  8283                           
  8284 ;; *************** function _change_state_to_menu_start *****************
  8285 ;; Defined at:
  8286 ;;		line 477 in file "UI.c"
  8287 ;; Parameters:    Size  Location     Type
  8288 ;;		None
  8289 ;; Auto vars:     Size  Location     Type
  8290 ;;		None
  8291 ;; Return value:  Size  Location     Type
  8292 ;;                  1    wreg      void 
  8293 ;; Registers used:
  8294 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8295 ;; Tracked objects:
  8296 ;;		On entry : 0/0
  8297 ;;		On exit  : 0/0
  8298 ;;		Unchanged: 0/0
  8299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8304 ;;Total ram usage:        0 bytes
  8305 ;; Hardware stack levels used:    1
  8306 ;; Hardware stack levels required when called:   11
  8307 ;; This function calls:
  8308 ;;		_lcdInst
  8309 ;;		_printRTC
  8310 ;;		_printf
  8311 ;; This function is called by:
  8312 ;;		_initUI
  8313 ;; This function uses a non-reentrant model
  8314 ;;
  8315                           
  8316                           	psect	text23
  8317  005A72                     __ptext23:
  8318                           	opt stack 0
  8319  005A72                     _change_state_to_menu_start:
  8320                           	opt stack 18
  8321                           
  8322                           ;UI.c: 478: cur_state = 0;
  8323                           
  8324                           ; BSR set to: 0
  8325                           ;incstack = 0
  8326  005A72  0E00               	movlw	0
  8327  005A74  0100               	movlb	0	; () banked
  8328  005A76  6FE7               	movwf	(_cur_state+1)& (0+255),b
  8329  005A78  0E00               	movlw	0
  8330  005A7A  6FE6               	movwf	_cur_state& (0+255),b
  8331                           
  8332                           ; BSR set to: 0
  8333                           ;UI.c: 480: lcdInst(0b10000000);;
  8334  005A7C  0E80               	movlw	128
  8335  005A7E  EC59  F02E         	call	_lcdInst
  8336                           
  8337                           ;UI.c: 481: printRTC();
  8338  005A82  EC90  F018         	call	_printRTC	;wreg free
  8339                           
  8340                           ;UI.c: 482: lcdInst(0b11000000);;
  8341  005A86  0EC0               	movlw	192
  8342  005A88  EC59  F02E         	call	_lcdInst
  8343                           
  8344                           ;UI.c: 483: printf("PUSH TO CONTINUE");
  8345  005A8C  0E0B               	movlw	low STR_30
  8346  005A8E  0100               	movlb	0	; () banked
  8347  005A90  6F8E               	movwf	printf@f& (0+255),b
  8348  005A92  0EFE               	movlw	high STR_30
  8349  005A94  0100               	movlb	0	; () banked
  8350  005A96  6F8F               	movwf	(printf@f+1)& (0+255),b
  8351  005A98  EC15  F00E         	call	_printf	;wreg free
  8352  005A9C  0012               	return		;funcret
  8353  005A9E                     __end_of_change_state_to_menu_start:
  8354                           	opt stack 0
  8355                           tblptru	equ	0xFF8
  8356                           tblptrh	equ	0xFF7
  8357                           tblptrl	equ	0xFF6
  8358                           tablat	equ	0xFF5
  8359                           prodh	equ	0xFF4
  8360                           prodl	equ	0xFF3
  8361                           intcon	equ	0xFF2
  8362                           intcon2	equ	0xFF1
  8363                           intcon3	equ	0xFF0
  8364                           postinc0	equ	0xFEE
  8365                           wreg	equ	0xFE8
  8366                           postdec1	equ	0xFE5
  8367                           fsr1l	equ	0xFE1
  8368                           indf2	equ	0xFDF
  8369                           postinc2	equ	0xFDE
  8370                           postdec2	equ	0xFDD
  8371                           fsr2h	equ	0xFDA
  8372                           fsr2l	equ	0xFD9
  8373                           status	equ	0xFD8
  8374                           
  8375 ;; *************** function _initTime *****************
  8376 ;; Defined at:
  8377 ;;		line 17 in file "RTC.c"
  8378 ;; Parameters:    Size  Location     Type
  8379 ;;  s               1    wreg     unsigned char 
  8380 ;;  m               1    0[BANK0 ] unsigned char 
  8381 ;;  h               1    1[BANK0 ] unsigned char 
  8382 ;;  w               1    2[BANK0 ] unsigned char 
  8383 ;;  DD              1    3[BANK0 ] unsigned char 
  8384 ;;  MM              1    4[BANK0 ] unsigned char 
  8385 ;;  YY              1    5[BANK0 ] unsigned char 
  8386 ;; Auto vars:     Size  Location     Type
  8387 ;;  s               1    6[BANK0 ] unsigned char 
  8388 ;; Return value:  Size  Location     Type
  8389 ;;                  1    wreg      void 
  8390 ;; Registers used:
  8391 ;;		wreg
  8392 ;; Tracked objects:
  8393 ;;		On entry : 0/0
  8394 ;;		On exit  : 0/0
  8395 ;;		Unchanged: 0/0
  8396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8397 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8398 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8400 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8401 ;;Total ram usage:        7 bytes
  8402 ;; Hardware stack levels used:    1
  8403 ;; Hardware stack levels required when called:    7
  8404 ;; This function calls:
  8405 ;;		Nothing
  8406 ;; This function is called by:
  8407 ;;		_main
  8408 ;; This function uses a non-reentrant model
  8409 ;;
  8410                           
  8411                           	psect	text24
  8412  005BD6                     __ptext24:
  8413                           	opt stack 0
  8414  005BD6                     _initTime:
  8415                           	opt stack 23
  8416                           
  8417                           ;incstack = 0
  8418                           ;initTime@s stored from wreg
  8419  005BD6  0100               	movlb	0	; () banked
  8420  005BD8  6F86               	movwf	initTime@s& (0+255),b
  8421                           
  8422                           ;RTC.c: 19: time[0] = s;
  8423  005BDA  C086  F11C         	movff	initTime@s,_time
  8424                           
  8425                           ;RTC.c: 20: time[1] = m;
  8426  005BDE  C080  F11D         	movff	initTime@m,_time+1
  8427                           
  8428                           ;RTC.c: 21: time[2] = h;
  8429  005BE2  C081  F11E         	movff	initTime@h,_time+2
  8430                           
  8431                           ;RTC.c: 22: time[3] = w;
  8432  005BE6  C082  F11F         	movff	initTime@w,_time+3
  8433                           
  8434                           ;RTC.c: 23: time[4] = DD;
  8435  005BEA  C083  F120         	movff	initTime@DD,_time+4
  8436                           
  8437                           ;RTC.c: 24: time[5] = MM;
  8438  005BEE  C084  F121         	movff	initTime@MM,_time+5
  8439                           
  8440                           ;RTC.c: 25: time[6] = YY;
  8441  005BF2  C085  F122         	movff	initTime@YY,_time+6
  8442  005BF6  0012               	return		;funcret
  8443  005BF8                     __end_of_initTime:
  8444                           	opt stack 0
  8445                           tblptru	equ	0xFF8
  8446                           tblptrh	equ	0xFF7
  8447                           tblptrl	equ	0xFF6
  8448                           tablat	equ	0xFF5
  8449                           prodh	equ	0xFF4
  8450                           prodl	equ	0xFF3
  8451                           intcon	equ	0xFF2
  8452                           intcon2	equ	0xFF1
  8453                           intcon3	equ	0xFF0
  8454                           postinc0	equ	0xFEE
  8455                           wreg	equ	0xFE8
  8456                           postdec1	equ	0xFE5
  8457                           fsr1l	equ	0xFE1
  8458                           indf2	equ	0xFDF
  8459                           postinc2	equ	0xFDE
  8460                           postdec2	equ	0xFDD
  8461                           fsr2h	equ	0xFDA
  8462                           fsr2l	equ	0xFD9
  8463                           status	equ	0xFD8
  8464                           
  8465 ;; *************** function _initLCD *****************
  8466 ;; Defined at:
  8467 ;;		line 50 in file "lcd.c"
  8468 ;; Parameters:    Size  Location     Type
  8469 ;;		None
  8470 ;; Auto vars:     Size  Location     Type
  8471 ;;		None
  8472 ;; Return value:  Size  Location     Type
  8473 ;;                  1    wreg      void 
  8474 ;; Registers used:
  8475 ;;		wreg, status,2, status,0, cstack
  8476 ;; Tracked objects:
  8477 ;;		On entry : 0/0
  8478 ;;		On exit  : 0/0
  8479 ;;		Unchanged: 0/0
  8480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8483 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8484 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8485 ;;Total ram usage:        1 bytes
  8486 ;; Hardware stack levels used:    1
  8487 ;; Hardware stack levels required when called:    9
  8488 ;; This function calls:
  8489 ;;		_lcdInst
  8490 ;; This function is called by:
  8491 ;;		_main
  8492 ;; This function uses a non-reentrant model
  8493 ;;
  8494                           
  8495                           	psect	text25
  8496  0055F0                     __ptext25:
  8497                           	opt stack 0
  8498  0055F0                     _initLCD:
  8499                           	opt stack 21
  8500                           
  8501                           ;lcd.c: 51: _delay((unsigned long)((15)*(32000000/4000.0)));
  8502                           
  8503                           ;incstack = 0
  8504  0055F0  0E9C               	movlw	156
  8505  0055F2  0100               	movlb	0	; () banked
  8506  0055F4  6F83               	movwf	??_initLCD& (0+255),b
  8507  0055F6  0ED7               	movlw	215
  8508  0055F8                     u10177:
  8509  0055F8  2EE8               	decfsz	wreg,f,c
  8510  0055FA  D7FE               	bra	u10177
  8511  0055FC  2F83               	decfsz	??_initLCD& (0+255),f,b
  8512  0055FE  D7FC               	bra	u10177
  8513                           
  8514                           ;lcd.c: 52: lcdInst(0b00110011);
  8515  005600  0E33               	movlw	51
  8516  005602  EC59  F02E         	call	_lcdInst
  8517                           
  8518                           ;lcd.c: 53: lcdInst(0b00110010);
  8519  005606  0E32               	movlw	50
  8520  005608  EC59  F02E         	call	_lcdInst
  8521                           
  8522                           ;lcd.c: 55: lcdInst(0b00101000);
  8523  00560C  0E28               	movlw	40
  8524  00560E  EC59  F02E         	call	_lcdInst
  8525                           
  8526                           ;lcd.c: 56: lcdInst(0b00001100);
  8527  005612  0E0C               	movlw	12
  8528  005614  EC59  F02E         	call	_lcdInst
  8529                           
  8530                           ;lcd.c: 57: lcdInst(0b00000110);
  8531  005618  0E06               	movlw	6
  8532  00561A  EC59  F02E         	call	_lcdInst
  8533                           
  8534                           ;lcd.c: 58: lcdInst(0b00000001);
  8535  00561E  0E01               	movlw	1
  8536  005620  EC59  F02E         	call	_lcdInst
  8537                           
  8538                           ;lcd.c: 59: _delay((unsigned long)((15)*(32000000/4000.0)));
  8539  005624  0E9C               	movlw	156
  8540  005626  0100               	movlb	0	; () banked
  8541  005628  6F83               	movwf	??_initLCD& (0+255),b
  8542  00562A  0ED7               	movlw	215
  8543  00562C                     u10187:
  8544  00562C  2EE8               	decfsz	wreg,f,c
  8545  00562E  D7FE               	bra	u10187
  8546  005630  2F83               	decfsz	??_initLCD& (0+255),f,b
  8547  005632  D7FC               	bra	u10187
  8548  005634  0012               	return		;funcret
  8549  005636                     __end_of_initLCD:
  8550                           	opt stack 0
  8551                           tblptru	equ	0xFF8
  8552                           tblptrh	equ	0xFF7
  8553                           tblptrl	equ	0xFF6
  8554                           tablat	equ	0xFF5
  8555                           prodh	equ	0xFF4
  8556                           prodl	equ	0xFF3
  8557                           intcon	equ	0xFF2
  8558                           intcon2	equ	0xFF1
  8559                           intcon3	equ	0xFF0
  8560                           postinc0	equ	0xFEE
  8561                           wreg	equ	0xFE8
  8562                           postdec1	equ	0xFE5
  8563                           fsr1l	equ	0xFE1
  8564                           indf2	equ	0xFDF
  8565                           postinc2	equ	0xFDE
  8566                           postdec2	equ	0xFDD
  8567                           fsr2h	equ	0xFDA
  8568                           fsr2l	equ	0xFD9
  8569                           status	equ	0xFD8
  8570                           
  8571 ;; *************** function _initEEPROM *****************
  8572 ;; Defined at:
  8573 ;;		line 32 in file "EEPROM.c"
  8574 ;; Parameters:    Size  Location     Type
  8575 ;;		None
  8576 ;; Auto vars:     Size  Location     Type
  8577 ;;		None
  8578 ;; Return value:  Size  Location     Type
  8579 ;;                  1    wreg      void 
  8580 ;; Registers used:
  8581 ;;		wreg, status,2
  8582 ;; Tracked objects:
  8583 ;;		On entry : 0/0
  8584 ;;		On exit  : 0/0
  8585 ;;		Unchanged: 0/0
  8586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8591 ;;Total ram usage:        0 bytes
  8592 ;; Hardware stack levels used:    1
  8593 ;; Hardware stack levels required when called:    7
  8594 ;; This function calls:
  8595 ;;		Nothing
  8596 ;; This function is called by:
  8597 ;;		_main
  8598 ;; This function uses a non-reentrant model
  8599 ;;
  8600                           
  8601                           	psect	text26
  8602  005CF6                     __ptext26:
  8603                           	opt stack 0
  8604  005CF6                     _initEEPROM:
  8605                           	opt stack 23
  8606                           
  8607                           ;EEPROM.c: 33: sel = 1;
  8608                           
  8609                           ;incstack = 0
  8610  005CF6  0E01               	movlw	1
  8611  005CF8  0100               	movlb	0	; () banked
  8612  005CFA  6FFD               	movwf	_sel& (0+255),b
  8613                           
  8614                           ; BSR set to: 0
  8615  005CFC  0012               	return		;funcret
  8616  005CFE                     __end_of_initEEPROM:
  8617                           	opt stack 0
  8618                           tblptru	equ	0xFF8
  8619                           tblptrh	equ	0xFF7
  8620                           tblptrl	equ	0xFF6
  8621                           tablat	equ	0xFF5
  8622                           prodh	equ	0xFF4
  8623                           prodl	equ	0xFF3
  8624                           intcon	equ	0xFF2
  8625                           intcon2	equ	0xFF1
  8626                           intcon3	equ	0xFF0
  8627                           postinc0	equ	0xFEE
  8628                           wreg	equ	0xFE8
  8629                           postdec1	equ	0xFE5
  8630                           fsr1l	equ	0xFE1
  8631                           indf2	equ	0xFDF
  8632                           postinc2	equ	0xFDE
  8633                           postdec2	equ	0xFDD
  8634                           fsr2h	equ	0xFDA
  8635                           fsr2l	equ	0xFD9
  8636                           status	equ	0xFD8
  8637                           
  8638 ;; *************** function _UI *****************
  8639 ;; Defined at:
  8640 ;;		line 76 in file "UI.c"
  8641 ;; Parameters:    Size  Location     Type
  8642 ;;		None
  8643 ;; Auto vars:     Size  Location     Type
  8644 ;;  i               1   73[BANK0 ] unsigned char 
  8645 ;;  i               1   85[BANK0 ] unsigned char 
  8646 ;;  i               1   84[BANK0 ] unsigned char 
  8647 ;;  i               1   83[BANK0 ] unsigned char 
  8648 ;;  i               1   82[BANK0 ] unsigned char 
  8649 ;;  i               1   81[BANK0 ] unsigned char 
  8650 ;;  i               1   80[BANK0 ] unsigned char 
  8651 ;;  i               1   79[BANK0 ] unsigned char 
  8652 ;;  i               1   78[BANK0 ] unsigned char 
  8653 ;;  i               1   77[BANK0 ] unsigned char 
  8654 ;;  i               1   76[BANK0 ] unsigned char 
  8655 ;;  i               1   75[BANK0 ] unsigned char 
  8656 ;;  i               1   74[BANK0 ] unsigned char 
  8657 ;;  month           4   86[BANK0 ] unsigned char [4]
  8658 ;;  i               1   72[BANK0 ] unsigned char 
  8659 ;; Return value:  Size  Location     Type
  8660 ;;                  1    wreg      void 
  8661 ;; Registers used:
  8662 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8663 ;; Tracked objects:
  8664 ;;		On entry : 0/0
  8665 ;;		On exit  : 0/0
  8666 ;;		Unchanged: 0/0
  8667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8669 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8670 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8671 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8672 ;;Total ram usage:       22 bytes
  8673 ;; Hardware stack levels used:    1
  8674 ;; Hardware stack levels required when called:   11
  8675 ;; This function calls:
  8676 ;;		___awdiv
  8677 ;;		___awmod
  8678 ;;		_change_state_to_menu_12
  8679 ;;		_change_state_to_menu_22
  8680 ;;		_lcdInst
  8681 ;;		_printRTC
  8682 ;;		_printf
  8683 ;;		_strcpy
  8684 ;; This function is called by:
  8685 ;;		_main
  8686 ;; This function uses a non-reentrant model
  8687 ;;
  8688                           
  8689                           	psect	text27
  8690  000012                     __ptext27:
  8691                           	opt stack 0
  8692  000012                     _UI:
  8693                           	opt stack 19
  8694                           
  8695                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  8696                           
  8697                           ; BSR set to: 0
  8698                           ;incstack = 0
  8699  000012  0E02               	movlw	2
  8700  000014  0100               	movlb	0	; () banked
  8701  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  8702  000018  A4D8               	btfss	status,2,c
  8703  00001A  D086               	goto	l9307
  8704                           
  8705                           ; BSR set to: 0
  8706                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8707  00001C  0E01               	movlw	1
  8708  00001E  EC59  F02E         	call	_lcdInst
  8709  000022  0E68               	movlw	104
  8710  000024  0100               	movlb	0	; () banked
  8711  000026  6FC4               	movwf	??_UI& (0+255),b
  8712  000028  0EE4               	movlw	228
  8713  00002A                     u10197:
  8714  00002A  2EE8               	decfsz	wreg,f,c
  8715  00002C  D7FE               	bra	u10197
  8716  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  8717  000030  D7FC               	bra	u10197
  8718  000032  F000               	nop	
  8719                           
  8720                           ;UI.c: 79: lcdInst(0b10000000);;
  8721  000034  0E80               	movlw	128
  8722  000036  EC59  F02E         	call	_lcdInst
  8723                           
  8724                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  8725  00003A  0E51               	movlw	low STR_1
  8726  00003C  0100               	movlb	0	; () banked
  8727  00003E  6F8E               	movwf	printf@f& (0+255),b
  8728  000040  0EFB               	movlw	high STR_1
  8729  000042  0100               	movlb	0	; () banked
  8730  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  8731  000046  0E01               	movlw	1
  8732  000048  0100               	movlb	0	; () banked
  8733  00004A  25FD               	addwf	_sel& (0+255),w,b
  8734  00004C  0100               	movlb	0	; () banked
  8735  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  8736  000050  0100               	movlb	0	; () banked
  8737  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  8738  000054  0E00               	movlw	0
  8739  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  8740  000058  EC15  F00E         	call	_printf	;wreg free
  8741                           
  8742                           ;UI.c: 81: lcdInst(0b11000000);;
  8743  00005C  0EC0               	movlw	192
  8744  00005E  EC59  F02E         	call	_lcdInst
  8745                           
  8746                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  8747  000062  0E0E               	movlw	14
  8748  000064  0100               	movlb	0	; () banked
  8749  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8750  000068  0E10               	movlw	16
  8751  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  8752  00006C  C0FA  F080         	movff	_total_time,___awmod@dividend
  8753  000070  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  8754  000074  EC6B  F026         	call	___awmod	;wreg free
  8755  000078  C080  F0C6         	movff	?___awmod,_UI$2432
  8756  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2432+1
  8757                           
  8758                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  8759  000080  0E4A               	movlw	low STR_2
  8760  000082  0100               	movlb	0	; () banked
  8761  000084  6F8E               	movwf	printf@f& (0+255),b
  8762  000086  0EFF               	movlw	high STR_2
  8763  000088  0100               	movlb	0	; () banked
  8764  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8765  00008C  0E0E               	movlw	14
  8766  00008E  0100               	movlb	0	; () banked
  8767  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8768  000092  0E10               	movlw	16
  8769  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  8770  000096  C0FA  F080         	movff	_total_time,___awmod@dividend
  8771  00009A  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  8772  00009E  EC6B  F026         	call	___awmod	;wreg free
  8773  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  8774  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8775  0000AA  0E00               	movlw	0
  8776  0000AC  0100               	movlb	0	; () banked
  8777  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8778  0000B0  0E3C               	movlw	60
  8779  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  8780  0000B4  EC59  F025         	call	___awdiv	;wreg free
  8781  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  8782  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  8783  0000C0  C0C6  F080         	movff	_UI$2432,___awmod@dividend
  8784  0000C4  C0C7  F081         	movff	_UI$2432+1,___awmod@dividend+1
  8785  0000C8  0E00               	movlw	0
  8786  0000CA  0100               	movlb	0	; () banked
  8787  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8788  0000CE  0E3C               	movlw	60
  8789  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  8790  0000D2  EC6B  F026         	call	___awmod	;wreg free
  8791  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  8792  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  8793  0000DE  EC15  F00E         	call	_printf	;wreg free
  8794  0000E2                     l185:
  8795  0000E2  B281               	btfsc	3969,1,c	;volatile
  8796  0000E4  D7FE               	goto	l185
  8797  0000E6                     l188:
  8798  0000E6  A281               	btfss	3969,1,c	;volatile
  8799  0000E8  D7FE               	goto	l188
  8800                           
  8801                           ;UI.c: 86: }
  8802                           ;UI.c: 87: if(cur_state == 12){
  8803  0000EA  0E0C               	movlw	12
  8804  0000EC  0100               	movlb	0	; () banked
  8805  0000EE  19E6               	xorwf	_cur_state& (0+255),w,b
  8806  0000F0  0100               	movlb	0	; () banked
  8807  0000F2  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  8808  0000F4  A4D8               	btfss	status,2,c
  8809  0000F6  D003               	goto	l9301
  8810                           
  8811                           ; BSR set to: 0
  8812                           ;UI.c: 88: change_state_to_menu_12();
  8813  0000F8  EC97  F02B         	call	_change_state_to_menu_12	;wreg free
  8814                           
  8815                           ;UI.c: 89: }
  8816  0000FC  D002               	goto	l193
  8817  0000FE                     l9301:
  8818                           
  8819                           ;UI.c: 90: else{
  8820                           ;UI.c: 91: change_state_to_menu_22();
  8821  0000FE  EC7B  F02B         	call	_change_state_to_menu_22	;wreg free
  8822  000102                     l193:
  8823  000102  B281               	btfsc	3969,1,c	;volatile
  8824  000104  D7FE               	goto	l193
  8825                           
  8826                           ;UI.c: 94: _delay((unsigned long)((100)*(32000000/4000.0)));
  8827  000106  0E05               	movlw	5
  8828  000108  0100               	movlb	0	; () banked
  8829  00010A  6FC5               	movwf	(??_UI+1)& (0+255),b
  8830  00010C  0E0F               	movlw	15
  8831  00010E  0100               	movlb	0	; () banked
  8832  000110  6FC4               	movwf	??_UI& (0+255),b
  8833  000112  0EF1               	movlw	241
  8834  000114                     u10207:
  8835  000114  2EE8               	decfsz	wreg,f,c
  8836  000116  D7FE               	bra	u10207
  8837  000118  2FC4               	decfsz	??_UI& (0+255),f,b
  8838  00011A  D7FC               	bra	u10207
  8839  00011C  2FC5               	decfsz	(??_UI+1)& (0+255),f,b
  8840  00011E  D7FA               	bra	u10207
  8841                           
  8842                           ;UI.c: 95: machine_state = UI_state;
  8843  000120  0E00               	movlw	0
  8844  000122  0100               	movlb	0	; () banked
  8845  000124  6FFC               	movwf	_machine_state& (0+255),b
  8846                           
  8847                           ;UI.c: 96: }
  8848  000126  D3D2               	goto	l9627
  8849  000128                     l9307:
  8850                           
  8851                           ; BSR set to: 0
  8852                           ;UI.c: 97: else if(cur_state == 0){
  8853  000128  0100               	movlb	0	; () banked
  8854  00012A  51E6               	movf	_cur_state& (0+255),w,b
  8855  00012C  0100               	movlb	0	; () banked
  8856  00012E  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  8857  000130  A4D8               	btfss	status,2,c
  8858  000132  D3CC               	goto	l9627
  8859                           
  8860                           ; BSR set to: 0
  8861                           ;UI.c: 98: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  8862  000134  0E00               	movlw	0
  8863  000136  0100               	movlb	0	; () banked
  8864  000138  6FC8               	movwf	UI@i& (0+255),b
  8865  00013A                     l9311:
  8866                           
  8867                           ; BSR set to: 0
  8868  00013A  0E63               	movlw	99
  8869  00013C  0100               	movlb	0	; () banked
  8870  00013E  65C8               	cpfsgt	UI@i& (0+255),b
  8871  000140  D001               	goto	l9315
  8872  000142  D00C               	goto	l9319
  8873  000144                     l9315:
  8874                           
  8875                           ; BSR set to: 0
  8876  000144  0E68               	movlw	104
  8877  000146  0100               	movlb	0	; () banked
  8878  000148  6FC4               	movwf	??_UI& (0+255),b
  8879  00014A  0EE4               	movlw	228
  8880  00014C                     u10217:
  8881  00014C  2EE8               	decfsz	wreg,f,c
  8882  00014E  D7FE               	bra	u10217
  8883  000150  2FC4               	decfsz	??_UI& (0+255),f,b
  8884  000152  D7FC               	bra	u10217
  8885  000154  F000               	nop	
  8886  000156  0100               	movlb	0	; () banked
  8887  000158  2BC8               	incf	UI@i& (0+255),f,b
  8888  00015A  D7EF               	goto	l9311
  8889  00015C                     l9319:
  8890                           
  8891                           ; BSR set to: 0
  8892                           ;UI.c: 99: if(cur_state == 0){
  8893  00015C  0100               	movlb	0	; () banked
  8894  00015E  51E6               	movf	_cur_state& (0+255),w,b
  8895  000160  0100               	movlb	0	; () banked
  8896  000162  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  8897  000164  A4D8               	btfss	status,2,c
  8898  000166  D3B2               	goto	l9627
  8899                           
  8900                           ; BSR set to: 0
  8901                           ;UI.c: 100: printRTC();
  8902  000168  EC90  F018         	call	_printRTC	;wreg free
  8903                           
  8904                           ;UI.c: 101: }
  8905                           ;UI.c: 102: }
  8906                           ;UI.c: 103: while(logstate){
  8907  00016C  D3AF               	goto	l9627
  8908  00016E                     l9323:
  8909                           
  8910                           ;UI.c: 105: if(!log_completion){
  8911  00016E  0100               	movlb	0	; () banked
  8912  000170  51F0               	movf	_log_completion& (0+255),w,b
  8913  000172  0100               	movlb	0	; () banked
  8914  000174  11F1               	iorwf	(_log_completion+1)& (0+255),w,b
  8915  000176  A4D8               	btfss	status,2,c
  8916  000178  D041               	goto	l9353
  8917                           
  8918                           ; BSR set to: 0
  8919                           ;UI.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8920  00017A  0E01               	movlw	1
  8921  00017C  EC59  F02E         	call	_lcdInst
  8922  000180  0E68               	movlw	104
  8923  000182  0100               	movlb	0	; () banked
  8924  000184  6FC4               	movwf	??_UI& (0+255),b
  8925  000186  0EE4               	movlw	228
  8926  000188                     u10227:
  8927  000188  2EE8               	decfsz	wreg,f,c
  8928  00018A  D7FE               	bra	u10227
  8929  00018C  2FC4               	decfsz	??_UI& (0+255),f,b
  8930  00018E  D7FC               	bra	u10227
  8931  000190  F000               	nop	
  8932                           
  8933                           ;UI.c: 107: lcdInst(0b10000000);;
  8934  000192  0E80               	movlw	128
  8935  000194  EC59  F02E         	call	_lcdInst
  8936                           
  8937                           ;UI.c: 108: printf("-- LOG %2d HERE--", log);
  8938  000198  0E3F               	movlw	low STR_3
  8939  00019A  0100               	movlb	0	; () banked
  8940  00019C  6F8E               	movwf	printf@f& (0+255),b
  8941  00019E  0EFB               	movlw	high STR_3
  8942  0001A0  0100               	movlb	0	; () banked
  8943  0001A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  8944  0001A4  C0EE  F090         	movff	_log,?_printf+2
  8945  0001A8  C0EF  F091         	movff	_log+1,?_printf+3
  8946  0001AC  EC15  F00E         	call	_printf	;wreg free
  8947                           
  8948                           ;UI.c: 109: lcdInst(0b11000000);;
  8949  0001B0  0EC0               	movlw	192
  8950  0001B2  EC59  F02E         	call	_lcdInst
  8951                           
  8952                           ;UI.c: 110: printf("DIDN'T COMPLETE");
  8953  0001B6  0E5E               	movlw	low STR_4
  8954  0001B8  0100               	movlb	0	; () banked
  8955  0001BA  6F8E               	movwf	printf@f& (0+255),b
  8956  0001BC  0EFE               	movlw	high STR_4
  8957  0001BE  0100               	movlb	0	; () banked
  8958  0001C0  6F8F               	movwf	(printf@f+1)& (0+255),b
  8959  0001C2  EC15  F00E         	call	_printf	;wreg free
  8960  0001C6                     l9337:
  8961  0001C6  0E00               	movlw	0
  8962  0001C8  0100               	movlb	0	; () banked
  8963  0001CA  6FC9               	movwf	UI@i_412& (0+255),b
  8964  0001CC                     l9339:
  8965                           
  8966                           ; BSR set to: 0
  8967  0001CC  0E63               	movlw	99
  8968  0001CE  0100               	movlb	0	; () banked
  8969  0001D0  65C9               	cpfsgt	UI@i_412& (0+255),b
  8970  0001D2  D001               	goto	l9343
  8971  0001D4  D00C               	goto	l9347
  8972  0001D6                     l9343:
  8973                           
  8974                           ; BSR set to: 0
  8975  0001D6  0E68               	movlw	104
  8976  0001D8  0100               	movlb	0	; () banked
  8977  0001DA  6FC4               	movwf	??_UI& (0+255),b
  8978  0001DC  0EE4               	movlw	228
  8979  0001DE                     u10237:
  8980  0001DE  2EE8               	decfsz	wreg,f,c
  8981  0001E0  D7FE               	bra	u10237
  8982  0001E2  2FC4               	decfsz	??_UI& (0+255),f,b
  8983  0001E4  D7FC               	bra	u10237
  8984  0001E6  F000               	nop	
  8985  0001E8  0100               	movlb	0	; () banked
  8986  0001EA  2BC9               	incf	UI@i_412& (0+255),f,b
  8987  0001EC  D7EF               	goto	l9339
  8988  0001EE                     l9347:
  8989                           
  8990                           ; BSR set to: 0
  8991  0001EE  0100               	movlb	0	; () banked
  8992  0001F0  51F8               	movf	_logstate& (0+255),w,b
  8993  0001F2  0100               	movlb	0	; () banked
  8994  0001F4  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8995  0001F6  B4D8               	btfsc	status,2,c
  8996  0001F8  0012               	return	
  8997  0001FA  D7E5               	goto	l9337
  8998  0001FC                     l9353:
  8999                           
  9000                           ; BSR set to: 0
  9001                           ;UI.c: 114: else{
  9002                           ;UI.c: 115: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9003  0001FC  0E01               	movlw	1
  9004  0001FE  EC59  F02E         	call	_lcdInst
  9005  000202  0E68               	movlw	104
  9006  000204  0100               	movlb	0	; () banked
  9007  000206  6FC4               	movwf	??_UI& (0+255),b
  9008  000208  0EE4               	movlw	228
  9009  00020A                     u10247:
  9010  00020A  2EE8               	decfsz	wreg,f,c
  9011  00020C  D7FE               	bra	u10247
  9012  00020E  2FC4               	decfsz	??_UI& (0+255),f,b
  9013  000210  D7FC               	bra	u10247
  9014  000212  F000               	nop	
  9015                           
  9016                           ;UI.c: 116: lcdInst(0b10000000);;
  9017  000214  0E80               	movlw	128
  9018  000216  EC59  F02E         	call	_lcdInst
  9019                           
  9020                           ;UI.c: 117: printf("-- LOG %2d HERE--", log);
  9021  00021A  0E3F               	movlw	low STR_3
  9022  00021C  0100               	movlb	0	; () banked
  9023  00021E  6F8E               	movwf	printf@f& (0+255),b
  9024  000220  0EFB               	movlw	high STR_3
  9025  000222  0100               	movlb	0	; () banked
  9026  000224  6F8F               	movwf	(printf@f+1)& (0+255),b
  9027  000226  C0EE  F090         	movff	_log,?_printf+2
  9028  00022A  C0EF  F091         	movff	_log+1,?_printf+3
  9029  00022E  EC15  F00E         	call	_printf	;wreg free
  9030                           
  9031                           ;UI.c: 118: lcdInst(0b11000000);;
  9032  000232  0EC0               	movlw	192
  9033  000234  EC59  F02E         	call	_lcdInst
  9034                           
  9035                           ;UI.c: 119: printf("PAUSE < | BACK >");
  9036  000238  0EFA               	movlw	low STR_6
  9037  00023A  0100               	movlb	0	; () banked
  9038  00023C  6F8E               	movwf	printf@f& (0+255),b
  9039  00023E  0EFD               	movlw	high STR_6
  9040  000240  0100               	movlb	0	; () banked
  9041  000242  6F8F               	movwf	(printf@f+1)& (0+255),b
  9042  000244  EC15  F00E         	call	_printf	;wreg free
  9043                           
  9044                           ;UI.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9045  000248  0E00               	movlw	0
  9046  00024A  0100               	movlb	0	; () banked
  9047  00024C  6FCA               	movwf	UI@i_415& (0+255),b
  9048  00024E                     l9367:
  9049                           
  9050                           ; BSR set to: 0
  9051  00024E  0E63               	movlw	99
  9052  000250  0100               	movlb	0	; () banked
  9053  000252  65CA               	cpfsgt	UI@i_415& (0+255),b
  9054  000254  D001               	goto	l9371
  9055  000256  D00C               	goto	l9375
  9056  000258                     l9371:
  9057                           
  9058                           ; BSR set to: 0
  9059  000258  0E68               	movlw	104
  9060  00025A  0100               	movlb	0	; () banked
  9061  00025C  6FC4               	movwf	??_UI& (0+255),b
  9062  00025E  0EE4               	movlw	228
  9063  000260                     u10257:
  9064  000260  2EE8               	decfsz	wreg,f,c
  9065  000262  D7FE               	bra	u10257
  9066  000264  2FC4               	decfsz	??_UI& (0+255),f,b
  9067  000266  D7FC               	bra	u10257
  9068  000268  F000               	nop	
  9069  00026A  0100               	movlb	0	; () banked
  9070  00026C  2BCA               	incf	UI@i_415& (0+255),f,b
  9071  00026E  D7EF               	goto	l9367
  9072  000270                     l9375:
  9073                           
  9074                           ; BSR set to: 0
  9075  000270  0100               	movlb	0	; () banked
  9076  000272  51F8               	movf	_logstate& (0+255),w,b
  9077  000274  0100               	movlb	0	; () banked
  9078  000276  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9079  000278  B4D8               	btfsc	status,2,c
  9080  00027A  0012               	return	
  9081                           
  9082                           ; BSR set to: 0
  9083                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9084                           
  9085                           ; BSR set to: 0
  9086                           
  9087                           ; BSR set to: 0
  9088  00027C  0E00               	movlw	0
  9089  00027E  0100               	movlb	0	; () banked
  9090  000280  6FCB               	movwf	UI@i_416& (0+255),b
  9091  000282                     l9381:
  9092                           
  9093                           ; BSR set to: 0
  9094  000282  0E63               	movlw	99
  9095  000284  0100               	movlb	0	; () banked
  9096  000286  65CB               	cpfsgt	UI@i_416& (0+255),b
  9097  000288  D001               	goto	l9385
  9098  00028A  D00C               	goto	l9389
  9099  00028C                     l9385:
  9100                           
  9101                           ; BSR set to: 0
  9102  00028C  0E68               	movlw	104
  9103  00028E  0100               	movlb	0	; () banked
  9104  000290  6FC4               	movwf	??_UI& (0+255),b
  9105  000292  0EE4               	movlw	228
  9106  000294                     u10267:
  9107  000294  2EE8               	decfsz	wreg,f,c
  9108  000296  D7FE               	bra	u10267
  9109  000298  2FC4               	decfsz	??_UI& (0+255),f,b
  9110  00029A  D7FC               	bra	u10267
  9111  00029C  F000               	nop	
  9112  00029E  0100               	movlb	0	; () banked
  9113  0002A0  2BCB               	incf	UI@i_416& (0+255),f,b
  9114  0002A2  D7EF               	goto	l9381
  9115  0002A4                     l9389:
  9116                           
  9117                           ; BSR set to: 0
  9118  0002A4  0100               	movlb	0	; () banked
  9119  0002A6  51F8               	movf	_logstate& (0+255),w,b
  9120  0002A8  0100               	movlb	0	; () banked
  9121  0002AA  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9122  0002AC  B4D8               	btfsc	status,2,c
  9123  0002AE  0012               	return	
  9124                           
  9125                           ; BSR set to: 0
  9126                           ;UI.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9127                           
  9128                           ; BSR set to: 0
  9129                           
  9130                           ; BSR set to: 0
  9131  0002B0  0E01               	movlw	1
  9132  0002B2  EC59  F02E         	call	_lcdInst
  9133  0002B6  0E68               	movlw	104
  9134  0002B8  0100               	movlb	0	; () banked
  9135  0002BA  6FC4               	movwf	??_UI& (0+255),b
  9136  0002BC  0EE4               	movlw	228
  9137  0002BE                     u10277:
  9138  0002BE  2EE8               	decfsz	wreg,f,c
  9139  0002C0  D7FE               	bra	u10277
  9140  0002C2  2FC4               	decfsz	??_UI& (0+255),f,b
  9141  0002C4  D7FC               	bra	u10277
  9142  0002C6  F000               	nop	
  9143                           
  9144                           ;UI.c: 125: lcdInst(0b10000000);;
  9145  0002C8  0E80               	movlw	128
  9146  0002CA  EC59  F02E         	call	_lcdInst
  9147                           
  9148                           ;UI.c: 126: printf("START:");
  9149  0002CE  0EC4               	movlw	low STR_7
  9150  0002D0  0100               	movlb	0	; () banked
  9151  0002D2  6F8E               	movwf	printf@f& (0+255),b
  9152  0002D4  0EFF               	movlw	high STR_7
  9153  0002D6  0100               	movlb	0	; () banked
  9154  0002D8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9155  0002DA  EC15  F00E         	call	_printf	;wreg free
  9156                           
  9157                           ;UI.c: 127: lcdInst(0b11000000);;
  9158  0002DE  0EC0               	movlw	192
  9159  0002E0  EC59  F02E         	call	_lcdInst
  9160                           
  9161                           ;UI.c: 128: char month[] = "MMM";
  9162  0002E4  C149  F0D6         	movff	UI@F3246,UI@month
  9163  0002E8  C14A  F0D7         	movff	UI@F3246+1,UI@month+1
  9164  0002EC  C14B  F0D8         	movff	UI@F3246+2,UI@month+2
  9165  0002F0  C14C  F0D9         	movff	UI@F3246+3,UI@month+3
  9166                           
  9167                           ;UI.c: 129: switch(log_startTime[5]){
  9168  0002F4  D0C3               	goto	l9433
  9169  0002F6                     l9405:
  9170                           
  9171                           ;UI.c: 131: strcpy(month, "JAN");
  9172  0002F6  0ED6               	movlw	low UI@month
  9173  0002F8  0100               	movlb	0	; () banked
  9174  0002FA  6F80               	movwf	strcpy@to& (0+255),b
  9175  0002FC  0E00               	movlw	high UI@month
  9176  0002FE  0100               	movlb	0	; () banked
  9177  000300  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9178  000302  0EDB               	movlw	low STR_8
  9179  000304  0100               	movlb	0	; () banked
  9180  000306  6F82               	movwf	strcpy@from& (0+255),b
  9181  000308  0EFF               	movlw	high STR_8
  9182  00030A  0100               	movlb	0	; () banked
  9183  00030C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9184  00030E  ECB3  F02B         	call	_strcpy	;wreg free
  9185                           
  9186                           ;UI.c: 132: break;
  9187  000312  D0E6               	goto	l9435
  9188  000314                     l9407:
  9189                           
  9190                           ;UI.c: 134: strcpy(month, "FEB");
  9191  000314  0ED6               	movlw	low UI@month
  9192  000316  0100               	movlb	0	; () banked
  9193  000318  6F80               	movwf	strcpy@to& (0+255),b
  9194  00031A  0E00               	movlw	high UI@month
  9195  00031C  0100               	movlb	0	; () banked
  9196  00031E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9197  000320  0ECB               	movlw	low STR_9
  9198  000322  0100               	movlb	0	; () banked
  9199  000324  6F82               	movwf	strcpy@from& (0+255),b
  9200  000326  0EFF               	movlw	high STR_9
  9201  000328  0100               	movlb	0	; () banked
  9202  00032A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9203  00032C  ECB3  F02B         	call	_strcpy	;wreg free
  9204                           
  9205                           ;UI.c: 135: break;
  9206  000330  D0D7               	goto	l9435
  9207  000332                     l9409:
  9208                           
  9209                           ;UI.c: 137: strcpy(month, "MAR");
  9210  000332  0ED6               	movlw	low UI@month
  9211  000334  0100               	movlb	0	; () banked
  9212  000336  6F80               	movwf	strcpy@to& (0+255),b
  9213  000338  0E00               	movlw	high UI@month
  9214  00033A  0100               	movlb	0	; () banked
  9215  00033C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9216  00033E  0EE7               	movlw	low STR_10
  9217  000340  0100               	movlb	0	; () banked
  9218  000342  6F82               	movwf	strcpy@from& (0+255),b
  9219  000344  0EFF               	movlw	high STR_10
  9220  000346  0100               	movlb	0	; () banked
  9221  000348  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9222  00034A  ECB3  F02B         	call	_strcpy	;wreg free
  9223                           
  9224                           ;UI.c: 138: break;
  9225  00034E  D0C8               	goto	l9435
  9226  000350                     l9411:
  9227                           
  9228                           ;UI.c: 140: strcpy(month, "APR");
  9229  000350  0ED6               	movlw	low UI@month
  9230  000352  0100               	movlb	0	; () banked
  9231  000354  6F80               	movwf	strcpy@to& (0+255),b
  9232  000356  0E00               	movlw	high UI@month
  9233  000358  0100               	movlb	0	; () banked
  9234  00035A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9235  00035C  0EEB               	movlw	low STR_11
  9236  00035E  0100               	movlb	0	; () banked
  9237  000360  6F82               	movwf	strcpy@from& (0+255),b
  9238  000362  0EFF               	movlw	high STR_11
  9239  000364  0100               	movlb	0	; () banked
  9240  000366  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9241  000368  ECB3  F02B         	call	_strcpy	;wreg free
  9242                           
  9243                           ;UI.c: 141: break;
  9244  00036C  D0B9               	goto	l9435
  9245  00036E                     l9413:
  9246                           
  9247                           ;UI.c: 143: strcpy(month, "MAY");
  9248  00036E  0ED6               	movlw	low UI@month
  9249  000370  0100               	movlb	0	; () banked
  9250  000372  6F80               	movwf	strcpy@to& (0+255),b
  9251  000374  0E00               	movlw	high UI@month
  9252  000376  0100               	movlb	0	; () banked
  9253  000378  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9254  00037A  0EFB               	movlw	low STR_12
  9255  00037C  0100               	movlb	0	; () banked
  9256  00037E  6F82               	movwf	strcpy@from& (0+255),b
  9257  000380  0EFF               	movlw	high STR_12
  9258  000382  0100               	movlb	0	; () banked
  9259  000384  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9260  000386  ECB3  F02B         	call	_strcpy	;wreg free
  9261                           
  9262                           ;UI.c: 144: break;
  9263  00038A  D0AA               	goto	l9435
  9264  00038C                     l9415:
  9265                           
  9266                           ;UI.c: 146: strcpy(month, "JUN");
  9267  00038C  0ED6               	movlw	low UI@month
  9268  00038E  0100               	movlb	0	; () banked
  9269  000390  6F80               	movwf	strcpy@to& (0+255),b
  9270  000392  0E00               	movlw	high UI@month
  9271  000394  0100               	movlb	0	; () banked
  9272  000396  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9273  000398  0EDF               	movlw	low STR_13
  9274  00039A  0100               	movlb	0	; () banked
  9275  00039C  6F82               	movwf	strcpy@from& (0+255),b
  9276  00039E  0EFF               	movlw	high STR_13
  9277  0003A0  0100               	movlb	0	; () banked
  9278  0003A2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9279  0003A4  ECB3  F02B         	call	_strcpy	;wreg free
  9280                           
  9281                           ;UI.c: 147: break;
  9282  0003A8  D09B               	goto	l9435
  9283  0003AA                     l9417:
  9284                           
  9285                           ;UI.c: 149: strcpy(month, "JUL");
  9286  0003AA  0ED6               	movlw	low UI@month
  9287  0003AC  0100               	movlb	0	; () banked
  9288  0003AE  6F80               	movwf	strcpy@to& (0+255),b
  9289  0003B0  0E00               	movlw	high UI@month
  9290  0003B2  0100               	movlb	0	; () banked
  9291  0003B4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9292  0003B6  0ED7               	movlw	low STR_14
  9293  0003B8  0100               	movlb	0	; () banked
  9294  0003BA  6F82               	movwf	strcpy@from& (0+255),b
  9295  0003BC  0EFF               	movlw	high STR_14
  9296  0003BE  0100               	movlb	0	; () banked
  9297  0003C0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9298  0003C2  ECB3  F02B         	call	_strcpy	;wreg free
  9299                           
  9300                           ;UI.c: 150: break;
  9301  0003C6  D08C               	goto	l9435
  9302  0003C8                     l9419:
  9303                           
  9304                           ;UI.c: 152: strcpy(month, "AUG");
  9305  0003C8  0ED6               	movlw	low UI@month
  9306  0003CA  0100               	movlb	0	; () banked
  9307  0003CC  6F80               	movwf	strcpy@to& (0+255),b
  9308  0003CE  0E00               	movlw	high UI@month
  9309  0003D0  0100               	movlb	0	; () banked
  9310  0003D2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9311  0003D4  0ED3               	movlw	low STR_15
  9312  0003D6  0100               	movlb	0	; () banked
  9313  0003D8  6F82               	movwf	strcpy@from& (0+255),b
  9314  0003DA  0EFF               	movlw	high STR_15
  9315  0003DC  0100               	movlb	0	; () banked
  9316  0003DE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9317  0003E0  ECB3  F02B         	call	_strcpy	;wreg free
  9318                           
  9319                           ;UI.c: 153: break;
  9320  0003E4  D07D               	goto	l9435
  9321  0003E6                     l9421:
  9322                           
  9323                           ;UI.c: 155: strcpy(month, "SEP");
  9324  0003E6  0ED6               	movlw	low UI@month
  9325  0003E8  0100               	movlb	0	; () banked
  9326  0003EA  6F80               	movwf	strcpy@to& (0+255),b
  9327  0003EC  0E00               	movlw	high UI@month
  9328  0003EE  0100               	movlb	0	; () banked
  9329  0003F0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9330  0003F2  0EE3               	movlw	low STR_16
  9331  0003F4  0100               	movlb	0	; () banked
  9332  0003F6  6F82               	movwf	strcpy@from& (0+255),b
  9333  0003F8  0EFF               	movlw	high STR_16
  9334  0003FA  0100               	movlb	0	; () banked
  9335  0003FC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9336  0003FE  ECB3  F02B         	call	_strcpy	;wreg free
  9337                           
  9338                           ;UI.c: 156: break;
  9339  000402  D06E               	goto	l9435
  9340  000404                     l9423:
  9341                           
  9342                           ;UI.c: 158: strcpy(month, "OCT");
  9343  000404  0ED6               	movlw	low UI@month
  9344  000406  0100               	movlb	0	; () banked
  9345  000408  6F80               	movwf	strcpy@to& (0+255),b
  9346  00040A  0E00               	movlw	high UI@month
  9347  00040C  0100               	movlb	0	; () banked
  9348  00040E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9349  000410  0EF3               	movlw	low STR_17
  9350  000412  0100               	movlb	0	; () banked
  9351  000414  6F82               	movwf	strcpy@from& (0+255),b
  9352  000416  0EFF               	movlw	high STR_17
  9353  000418  0100               	movlb	0	; () banked
  9354  00041A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9355  00041C  ECB3  F02B         	call	_strcpy	;wreg free
  9356                           
  9357                           ;UI.c: 159: break;
  9358  000420  D05F               	goto	l9435
  9359  000422                     l9425:
  9360                           
  9361                           ;UI.c: 161: strcpy(month, "NOV");
  9362  000422  0ED6               	movlw	low UI@month
  9363  000424  0100               	movlb	0	; () banked
  9364  000426  6F80               	movwf	strcpy@to& (0+255),b
  9365  000428  0E00               	movlw	high UI@month
  9366  00042A  0100               	movlb	0	; () banked
  9367  00042C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9368  00042E  0EF7               	movlw	low STR_18
  9369  000430  0100               	movlb	0	; () banked
  9370  000432  6F82               	movwf	strcpy@from& (0+255),b
  9371  000434  0EFF               	movlw	high STR_18
  9372  000436  0100               	movlb	0	; () banked
  9373  000438  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9374  00043A  ECB3  F02B         	call	_strcpy	;wreg free
  9375                           
  9376                           ;UI.c: 162: break;
  9377  00043E  D050               	goto	l9435
  9378  000440                     l9427:
  9379                           
  9380                           ;UI.c: 164: strcpy(month, "DEC");
  9381  000440  0ED6               	movlw	low UI@month
  9382  000442  0100               	movlb	0	; () banked
  9383  000444  6F80               	movwf	strcpy@to& (0+255),b
  9384  000446  0E00               	movlw	high UI@month
  9385  000448  0100               	movlb	0	; () banked
  9386  00044A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9387  00044C  0ECF               	movlw	low STR_19
  9388  00044E  0100               	movlb	0	; () banked
  9389  000450  6F82               	movwf	strcpy@from& (0+255),b
  9390  000452  0EFF               	movlw	high STR_19
  9391  000454  0100               	movlb	0	; () banked
  9392  000456  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9393  000458  ECB3  F02B         	call	_strcpy	;wreg free
  9394                           
  9395                           ;UI.c: 165: break;
  9396  00045C  D041               	goto	l9435
  9397  00045E                     l9429:
  9398                           
  9399                           ;UI.c: 167: strcpy(month, "ERR");
  9400  00045E  0ED6               	movlw	low UI@month
  9401  000460  0100               	movlb	0	; () banked
  9402  000462  6F80               	movwf	strcpy@to& (0+255),b
  9403  000464  0E00               	movlw	high UI@month
  9404  000466  0100               	movlb	0	; () banked
  9405  000468  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9406  00046A  0EEF               	movlw	low STR_20
  9407  00046C  0100               	movlb	0	; () banked
  9408  00046E  6F82               	movwf	strcpy@from& (0+255),b
  9409  000470  0EFF               	movlw	high STR_20
  9410  000472  0100               	movlb	0	; () banked
  9411  000474  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9412  000476  ECB3  F02B         	call	_strcpy	;wreg free
  9413                           
  9414                           ;UI.c: 169: }
  9415                           
  9416                           ;UI.c: 168: break;
  9417  00047A  D032               	goto	l9435
  9418  00047C                     l9433:
  9419  00047C  EE21  F00A         	lfsr	2,_log_startTime+10
  9420  000480  CFDE F0C4          	movff	postinc2,??_UI
  9421  000484  CFDD F0C5          	movff	postdec2,??_UI+1
  9422                           
  9423                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9424                           ; Switch size 1, requested type "space"
  9425                           ; Number of cases is 1, Range of values is 0 to 0
  9426                           ; switch strategies available:
  9427                           ; Name         Instructions Cycles
  9428                           ; simple_byte            4     3 (average)
  9429                           ;	Chosen strategy is simple_byte
  9430  000488  0100               	movlb	0	; () banked
  9431  00048A  51C5               	movf	(??_UI+1)& (0+255),w,b
  9432  00048C  0A00               	xorlw	0	; case 0
  9433  00048E  A4D8               	btfss	status,2,c
  9434  000490  D7E6               	goto	l9429
  9435                           
  9436                           ; BSR set to: 0
  9437                           ; Switch size 1, requested type "space"
  9438                           ; Number of cases is 12, Range of values is 1 to 12
  9439                           ; switch strategies available:
  9440                           ; Name         Instructions Cycles
  9441                           ; simple_byte           37    19 (average)
  9442                           ;	Chosen strategy is simple_byte
  9443  000492  0100               	movlb	0	; () banked
  9444  000494  51C4               	movf	??_UI& (0+255),w,b
  9445  000496  0A01               	xorlw	1	; case 1
  9446  000498  B4D8               	btfsc	status,2,c
  9447  00049A  D72D               	goto	l9405
  9448  00049C  0A03               	xorlw	3	; case 2
  9449  00049E  B4D8               	btfsc	status,2,c
  9450  0004A0  D739               	goto	l9407
  9451  0004A2  0A01               	xorlw	1	; case 3
  9452  0004A4  B4D8               	btfsc	status,2,c
  9453  0004A6  D745               	goto	l9409
  9454  0004A8  0A07               	xorlw	7	; case 4
  9455  0004AA  B4D8               	btfsc	status,2,c
  9456  0004AC  D751               	goto	l9411
  9457  0004AE  0A01               	xorlw	1	; case 5
  9458  0004B0  B4D8               	btfsc	status,2,c
  9459  0004B2  D75D               	goto	l9413
  9460  0004B4  0A03               	xorlw	3	; case 6
  9461  0004B6  B4D8               	btfsc	status,2,c
  9462  0004B8  D769               	goto	l9415
  9463  0004BA  0A01               	xorlw	1	; case 7
  9464  0004BC  B4D8               	btfsc	status,2,c
  9465  0004BE  D775               	goto	l9417
  9466  0004C0  0A0F               	xorlw	15	; case 8
  9467  0004C2  B4D8               	btfsc	status,2,c
  9468  0004C4  D781               	goto	l9419
  9469  0004C6  0A01               	xorlw	1	; case 9
  9470  0004C8  B4D8               	btfsc	status,2,c
  9471  0004CA  D78D               	goto	l9421
  9472  0004CC  0A03               	xorlw	3	; case 10
  9473  0004CE  B4D8               	btfsc	status,2,c
  9474  0004D0  D799               	goto	l9423
  9475  0004D2  0A01               	xorlw	1	; case 11
  9476  0004D4  B4D8               	btfsc	status,2,c
  9477  0004D6  D7A5               	goto	l9425
  9478  0004D8  0A07               	xorlw	7	; case 12
  9479  0004DA  B4D8               	btfsc	status,2,c
  9480  0004DC  D7B1               	goto	l9427
  9481  0004DE  D7BF               	goto	l9429
  9482  0004E0                     l9435:
  9483                           
  9484                           ;UI.c: 170: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  9485  0004E0  0EA2               	movlw	low STR_21
  9486  0004E2  0100               	movlb	0	; () banked
  9487  0004E4  6F8E               	movwf	printf@f& (0+255),b
  9488  0004E6  0EFA               	movlw	high STR_21
  9489  0004E8  0100               	movlb	0	; () banked
  9490  0004EA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9491  0004EC  C108  F090         	movff	_log_startTime+8,?_printf+2
  9492  0004F0  C109  F091         	movff	_log_startTime+9,?_printf+3
  9493  0004F4  0ED6               	movlw	low UI@month
  9494  0004F6  0100               	movlb	0	; () banked
  9495  0004F8  6F92               	movwf	(?_printf+4)& (0+255),b
  9496  0004FA  0E00               	movlw	high UI@month
  9497  0004FC  0100               	movlb	0	; () banked
  9498  0004FE  6F93               	movwf	(?_printf+5)& (0+255),b
  9499  000500  C104  F094         	movff	_log_startTime+4,?_printf+6
  9500  000504  C105  F095         	movff	_log_startTime+5,?_printf+7
  9501  000508  C102  F096         	movff	_log_startTime+2,?_printf+8
  9502  00050C  C103  F097         	movff	_log_startTime+3,?_printf+9
  9503  000510  C100  F098         	movff	_log_startTime,?_printf+10
  9504  000514  C101  F099         	movff	_log_startTime+1,?_printf+11
  9505  000518  EC15  F00E         	call	_printf	;wreg free
  9506                           
  9507                           ;UI.c: 172: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9508  00051C  0E00               	movlw	0
  9509  00051E  0100               	movlb	0	; () banked
  9510  000520  6FCC               	movwf	UI@i_434& (0+255),b
  9511  000522                     l9439:
  9512                           
  9513                           ; BSR set to: 0
  9514  000522  0E63               	movlw	99
  9515  000524  0100               	movlb	0	; () banked
  9516  000526  65CC               	cpfsgt	UI@i_434& (0+255),b
  9517  000528  D001               	goto	l9443
  9518  00052A  D00C               	goto	l9447
  9519  00052C                     l9443:
  9520                           
  9521                           ; BSR set to: 0
  9522  00052C  0E68               	movlw	104
  9523  00052E  0100               	movlb	0	; () banked
  9524  000530  6FC4               	movwf	??_UI& (0+255),b
  9525  000532  0EE4               	movlw	228
  9526  000534                     u10287:
  9527  000534  2EE8               	decfsz	wreg,f,c
  9528  000536  D7FE               	bra	u10287
  9529  000538  2FC4               	decfsz	??_UI& (0+255),f,b
  9530  00053A  D7FC               	bra	u10287
  9531  00053C  F000               	nop	
  9532  00053E  0100               	movlb	0	; () banked
  9533  000540  2BCC               	incf	UI@i_434& (0+255),f,b
  9534  000542  D7EF               	goto	l9439
  9535  000544                     l9447:
  9536                           
  9537                           ; BSR set to: 0
  9538  000544  0100               	movlb	0	; () banked
  9539  000546  51F8               	movf	_logstate& (0+255),w,b
  9540  000548  0100               	movlb	0	; () banked
  9541  00054A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9542  00054C  B4D8               	btfsc	status,2,c
  9543  00054E  0012               	return	
  9544                           
  9545                           ; BSR set to: 0
  9546                           ;UI.c: 173: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9547                           
  9548                           ; BSR set to: 0
  9549                           
  9550                           ; BSR set to: 0
  9551  000550  0E00               	movlw	0
  9552  000552  0100               	movlb	0	; () banked
  9553  000554  6FCD               	movwf	UI@i_435& (0+255),b
  9554  000556                     l9453:
  9555                           
  9556                           ; BSR set to: 0
  9557  000556  0E63               	movlw	99
  9558  000558  0100               	movlb	0	; () banked
  9559  00055A  65CD               	cpfsgt	UI@i_435& (0+255),b
  9560  00055C  D001               	goto	l9457
  9561  00055E  D00C               	goto	l9461
  9562  000560                     l9457:
  9563                           
  9564                           ; BSR set to: 0
  9565  000560  0E68               	movlw	104
  9566  000562  0100               	movlb	0	; () banked
  9567  000564  6FC4               	movwf	??_UI& (0+255),b
  9568  000566  0EE4               	movlw	228
  9569  000568                     u10297:
  9570  000568  2EE8               	decfsz	wreg,f,c
  9571  00056A  D7FE               	bra	u10297
  9572  00056C  2FC4               	decfsz	??_UI& (0+255),f,b
  9573  00056E  D7FC               	bra	u10297
  9574  000570  F000               	nop	
  9575  000572  0100               	movlb	0	; () banked
  9576  000574  2BCD               	incf	UI@i_435& (0+255),f,b
  9577  000576  D7EF               	goto	l9453
  9578  000578                     l9461:
  9579                           
  9580                           ; BSR set to: 0
  9581  000578  0100               	movlb	0	; () banked
  9582  00057A  51F8               	movf	_logstate& (0+255),w,b
  9583  00057C  0100               	movlb	0	; () banked
  9584  00057E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9585  000580  B4D8               	btfsc	status,2,c
  9586  000582  0012               	return	
  9587                           
  9588                           ; BSR set to: 0
  9589                           ;UI.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9590                           
  9591                           ; BSR set to: 0
  9592                           
  9593                           ; BSR set to: 0
  9594  000584  0E01               	movlw	1
  9595  000586  EC59  F02E         	call	_lcdInst
  9596  00058A  0E68               	movlw	104
  9597  00058C  0100               	movlb	0	; () banked
  9598  00058E  6FC4               	movwf	??_UI& (0+255),b
  9599  000590  0EE4               	movlw	228
  9600  000592                     u10307:
  9601  000592  2EE8               	decfsz	wreg,f,c
  9602  000594  D7FE               	bra	u10307
  9603  000596  2FC4               	decfsz	??_UI& (0+255),f,b
  9604  000598  D7FC               	bra	u10307
  9605  00059A  F000               	nop	
  9606                           
  9607                           ;UI.c: 176: lcdInst(0b10000000);;
  9608  00059C  0E80               	movlw	128
  9609  00059E  EC59  F02E         	call	_lcdInst
  9610                           
  9611                           ;UI.c: 177: printf("DURATION:");
  9612  0005A2  0E9B               	movlw	low STR_22
  9613  0005A4  0100               	movlb	0	; () banked
  9614  0005A6  6F8E               	movwf	printf@f& (0+255),b
  9615  0005A8  0EFF               	movlw	high STR_22
  9616  0005AA  0100               	movlb	0	; () banked
  9617  0005AC  6F8F               	movwf	(printf@f+1)& (0+255),b
  9618  0005AE  EC15  F00E         	call	_printf	;wreg free
  9619                           
  9620                           ;UI.c: 178: lcdInst(0b11000000);;
  9621  0005B2  0EC0               	movlw	192
  9622  0005B4  EC59  F02E         	call	_lcdInst
  9623                           
  9624                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  9625  0005B8  0E0E               	movlw	14
  9626  0005BA  0100               	movlb	0	; () banked
  9627  0005BC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9628  0005BE  0E10               	movlw	16
  9629  0005C0  6F82               	movwf	___awmod@divisor& (0+255),b
  9630  0005C2  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  9631  0005C6  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  9632  0005CA  EC6B  F026         	call	___awmod	;wreg free
  9633  0005CE  C080  F0C6         	movff	?___awmod,_UI$2432
  9634  0005D2  C081  F0C7         	movff	?___awmod+1,_UI$2432+1
  9635                           
  9636                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  9637  0005D6  0E3C               	movlw	low STR_23
  9638  0005D8  0100               	movlb	0	; () banked
  9639  0005DA  6F8E               	movwf	printf@f& (0+255),b
  9640  0005DC  0EFF               	movlw	high STR_23
  9641  0005DE  0100               	movlb	0	; () banked
  9642  0005E0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9643  0005E2  0E0E               	movlw	14
  9644  0005E4  0100               	movlb	0	; () banked
  9645  0005E6  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9646  0005E8  0E10               	movlw	16
  9647  0005EA  6F82               	movwf	___awmod@divisor& (0+255),b
  9648  0005EC  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  9649  0005F0  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  9650  0005F4  EC6B  F026         	call	___awmod	;wreg free
  9651  0005F8  C080  F086         	movff	?___awmod,___awdiv@dividend
  9652  0005FC  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  9653  000600  0E00               	movlw	0
  9654  000602  0100               	movlb	0	; () banked
  9655  000604  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  9656  000606  0E3C               	movlw	60
  9657  000608  6F88               	movwf	___awdiv@divisor& (0+255),b
  9658  00060A  EC59  F025         	call	___awdiv	;wreg free
  9659  00060E  C086  F090         	movff	?___awdiv,?_printf+2
  9660  000612  C087  F091         	movff	?___awdiv+1,?_printf+3
  9661  000616  C0C6  F080         	movff	_UI$2432,___awmod@dividend
  9662  00061A  C0C7  F081         	movff	_UI$2432+1,___awmod@dividend+1
  9663  00061E  0E00               	movlw	0
  9664  000620  0100               	movlb	0	; () banked
  9665  000622  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9666  000624  0E3C               	movlw	60
  9667  000626  6F82               	movwf	___awmod@divisor& (0+255),b
  9668  000628  EC6B  F026         	call	___awmod	;wreg free
  9669  00062C  C080  F092         	movff	?___awmod,?_printf+4
  9670  000630  C081  F093         	movff	?___awmod+1,?_printf+5
  9671  000634  EC15  F00E         	call	_printf	;wreg free
  9672                           
  9673                           ;UI.c: 181: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9674  000638  0E00               	movlw	0
  9675  00063A  0100               	movlb	0	; () banked
  9676  00063C  6FCE               	movwf	UI@i_438& (0+255),b
  9677  00063E                     l9481:
  9678                           
  9679                           ; BSR set to: 0
  9680  00063E  0E63               	movlw	99
  9681  000640  0100               	movlb	0	; () banked
  9682  000642  65CE               	cpfsgt	UI@i_438& (0+255),b
  9683  000644  D001               	goto	l9485
  9684  000646  D00C               	goto	l9489
  9685  000648                     l9485:
  9686                           
  9687                           ; BSR set to: 0
  9688  000648  0E68               	movlw	104
  9689  00064A  0100               	movlb	0	; () banked
  9690  00064C  6FC4               	movwf	??_UI& (0+255),b
  9691  00064E  0EE4               	movlw	228
  9692  000650                     u10317:
  9693  000650  2EE8               	decfsz	wreg,f,c
  9694  000652  D7FE               	bra	u10317
  9695  000654  2FC4               	decfsz	??_UI& (0+255),f,b
  9696  000656  D7FC               	bra	u10317
  9697  000658  F000               	nop	
  9698  00065A  0100               	movlb	0	; () banked
  9699  00065C  2BCE               	incf	UI@i_438& (0+255),f,b
  9700  00065E  D7EF               	goto	l9481
  9701  000660                     l9489:
  9702                           
  9703                           ; BSR set to: 0
  9704  000660  0100               	movlb	0	; () banked
  9705  000662  51F8               	movf	_logstate& (0+255),w,b
  9706  000664  0100               	movlb	0	; () banked
  9707  000666  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9708  000668  B4D8               	btfsc	status,2,c
  9709  00066A  0012               	return	
  9710                           
  9711                           ; BSR set to: 0
  9712                           ;UI.c: 182: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9713                           
  9714                           ; BSR set to: 0
  9715                           
  9716                           ; BSR set to: 0
  9717  00066C  0E00               	movlw	0
  9718  00066E  0100               	movlb	0	; () banked
  9719  000670  6FCF               	movwf	UI@i_439& (0+255),b
  9720  000672                     l9495:
  9721                           
  9722                           ; BSR set to: 0
  9723  000672  0E63               	movlw	99
  9724  000674  0100               	movlb	0	; () banked
  9725  000676  65CF               	cpfsgt	UI@i_439& (0+255),b
  9726  000678  D001               	goto	l9499
  9727  00067A  D00C               	goto	l9503
  9728  00067C                     l9499:
  9729                           
  9730                           ; BSR set to: 0
  9731  00067C  0E68               	movlw	104
  9732  00067E  0100               	movlb	0	; () banked
  9733  000680  6FC4               	movwf	??_UI& (0+255),b
  9734  000682  0EE4               	movlw	228
  9735  000684                     u10327:
  9736  000684  2EE8               	decfsz	wreg,f,c
  9737  000686  D7FE               	bra	u10327
  9738  000688  2FC4               	decfsz	??_UI& (0+255),f,b
  9739  00068A  D7FC               	bra	u10327
  9740  00068C  F000               	nop	
  9741  00068E  0100               	movlb	0	; () banked
  9742  000690  2BCF               	incf	UI@i_439& (0+255),f,b
  9743  000692  D7EF               	goto	l9495
  9744  000694                     l9503:
  9745                           
  9746                           ; BSR set to: 0
  9747  000694  0100               	movlb	0	; () banked
  9748  000696  51F8               	movf	_logstate& (0+255),w,b
  9749  000698  0100               	movlb	0	; () banked
  9750  00069A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9751  00069C  B4D8               	btfsc	status,2,c
  9752  00069E  0012               	return	
  9753                           
  9754                           ; BSR set to: 0
  9755                           ;UI.c: 184: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9756                           
  9757                           ; BSR set to: 0
  9758                           
  9759                           ; BSR set to: 0
  9760  0006A0  0E01               	movlw	1
  9761  0006A2  EC59  F02E         	call	_lcdInst
  9762  0006A6  0E68               	movlw	104
  9763  0006A8  0100               	movlb	0	; () banked
  9764  0006AA  6FC4               	movwf	??_UI& (0+255),b
  9765  0006AC  0EE4               	movlw	228
  9766  0006AE                     u10337:
  9767  0006AE  2EE8               	decfsz	wreg,f,c
  9768  0006B0  D7FE               	bra	u10337
  9769  0006B2  2FC4               	decfsz	??_UI& (0+255),f,b
  9770  0006B4  D7FC               	bra	u10337
  9771  0006B6  F000               	nop	
  9772                           
  9773                           ;UI.c: 185: lcdInst(0b10000000);;
  9774  0006B8  0E80               	movlw	128
  9775  0006BA  EC59  F02E         	call	_lcdInst
  9776                           
  9777                           ;UI.c: 186: printf(" -- POP  CAN -- ");
  9778  0006BE  0E50               	movlw	low STR_24
  9779  0006C0  0100               	movlb	0	; () banked
  9780  0006C2  6F8E               	movwf	printf@f& (0+255),b
  9781  0006C4  0EFD               	movlw	high STR_24
  9782  0006C6  0100               	movlb	0	; () banked
  9783  0006C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9784  0006CA  EC15  F00E         	call	_printf	;wreg free
  9785                           
  9786                           ;UI.c: 187: lcdInst(0b11000000);;
  9787  0006CE  0EC0               	movlw	192
  9788  0006D0  EC59  F02E         	call	_lcdInst
  9789                           
  9790                           ;UI.c: 188: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  9791  0006D4  0E2D               	movlw	low STR_25
  9792  0006D6  0100               	movlb	0	; () banked
  9793  0006D8  6F8E               	movwf	printf@f& (0+255),b
  9794  0006DA  0EFE               	movlw	high STR_25
  9795  0006DC  0100               	movlb	0	; () banked
  9796  0006DE  6F8F               	movwf	(printf@f+1)& (0+255),b
  9797  0006E0  C0F2  F090         	movff	_log_count_pop_no_tab,?_printf+2
  9798  0006E4  C0F3  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  9799  0006E8  C0F4  F092         	movff	_log_count_pop_w_tab,?_printf+4
  9800  0006EC  C0F5  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  9801  0006F0  EC15  F00E         	call	_printf	;wreg free
  9802                           
  9803                           ;UI.c: 190: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9804  0006F4  0E00               	movlw	0
  9805  0006F6  0100               	movlb	0	; () banked
  9806  0006F8  6FD0               	movwf	UI@i_442& (0+255),b
  9807  0006FA                     l9521:
  9808                           
  9809                           ; BSR set to: 0
  9810  0006FA  0E63               	movlw	99
  9811  0006FC  0100               	movlb	0	; () banked
  9812  0006FE  65D0               	cpfsgt	UI@i_442& (0+255),b
  9813  000700  D001               	goto	l9525
  9814  000702  D00C               	goto	l9529
  9815  000704                     l9525:
  9816                           
  9817                           ; BSR set to: 0
  9818  000704  0E68               	movlw	104
  9819  000706  0100               	movlb	0	; () banked
  9820  000708  6FC4               	movwf	??_UI& (0+255),b
  9821  00070A  0EE4               	movlw	228
  9822  00070C                     u10347:
  9823  00070C  2EE8               	decfsz	wreg,f,c
  9824  00070E  D7FE               	bra	u10347
  9825  000710  2FC4               	decfsz	??_UI& (0+255),f,b
  9826  000712  D7FC               	bra	u10347
  9827  000714  F000               	nop	
  9828  000716  0100               	movlb	0	; () banked
  9829  000718  2BD0               	incf	UI@i_442& (0+255),f,b
  9830  00071A  D7EF               	goto	l9521
  9831  00071C                     l9529:
  9832                           
  9833                           ; BSR set to: 0
  9834  00071C  0100               	movlb	0	; () banked
  9835  00071E  51F8               	movf	_logstate& (0+255),w,b
  9836  000720  0100               	movlb	0	; () banked
  9837  000722  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9838  000724  B4D8               	btfsc	status,2,c
  9839  000726  0012               	return	
  9840                           
  9841                           ; BSR set to: 0
  9842                           ;UI.c: 191: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9843                           
  9844                           ; BSR set to: 0
  9845                           
  9846                           ; BSR set to: 0
  9847  000728  0E00               	movlw	0
  9848  00072A  0100               	movlb	0	; () banked
  9849  00072C  6FD1               	movwf	UI@i_443& (0+255),b
  9850  00072E                     l9535:
  9851                           
  9852                           ; BSR set to: 0
  9853  00072E  0E63               	movlw	99
  9854  000730  0100               	movlb	0	; () banked
  9855  000732  65D1               	cpfsgt	UI@i_443& (0+255),b
  9856  000734  D001               	goto	l9539
  9857  000736  D00C               	goto	l9543
  9858  000738                     l9539:
  9859                           
  9860                           ; BSR set to: 0
  9861  000738  0E68               	movlw	104
  9862  00073A  0100               	movlb	0	; () banked
  9863  00073C  6FC4               	movwf	??_UI& (0+255),b
  9864  00073E  0EE4               	movlw	228
  9865  000740                     u10357:
  9866  000740  2EE8               	decfsz	wreg,f,c
  9867  000742  D7FE               	bra	u10357
  9868  000744  2FC4               	decfsz	??_UI& (0+255),f,b
  9869  000746  D7FC               	bra	u10357
  9870  000748  F000               	nop	
  9871  00074A  0100               	movlb	0	; () banked
  9872  00074C  2BD1               	incf	UI@i_443& (0+255),f,b
  9873  00074E  D7EF               	goto	l9535
  9874  000750                     l9543:
  9875                           
  9876                           ; BSR set to: 0
  9877  000750  0100               	movlb	0	; () banked
  9878  000752  51F8               	movf	_logstate& (0+255),w,b
  9879  000754  0100               	movlb	0	; () banked
  9880  000756  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9881  000758  B4D8               	btfsc	status,2,c
  9882  00075A  0012               	return	
  9883                           
  9884                           ; BSR set to: 0
  9885                           ;UI.c: 193: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9886                           
  9887                           ; BSR set to: 0
  9888                           
  9889                           ; BSR set to: 0
  9890  00075C  0E01               	movlw	1
  9891  00075E  EC59  F02E         	call	_lcdInst
  9892  000762  0E68               	movlw	104
  9893  000764  0100               	movlb	0	; () banked
  9894  000766  6FC4               	movwf	??_UI& (0+255),b
  9895  000768  0EE4               	movlw	228
  9896  00076A                     u10367:
  9897  00076A  2EE8               	decfsz	wreg,f,c
  9898  00076C  D7FE               	bra	u10367
  9899  00076E  2FC4               	decfsz	??_UI& (0+255),f,b
  9900  000770  D7FC               	bra	u10367
  9901  000772  F000               	nop	
  9902                           
  9903                           ;UI.c: 194: lcdInst(0b10000000);;
  9904  000774  0E80               	movlw	128
  9905  000776  EC59  F02E         	call	_lcdInst
  9906                           
  9907                           ;UI.c: 195: printf(" -- SOUP CAN -- ");
  9908  00077A  0E61               	movlw	low STR_26
  9909  00077C  0100               	movlb	0	; () banked
  9910  00077E  6F8E               	movwf	printf@f& (0+255),b
  9911  000780  0EFD               	movlw	high STR_26
  9912  000782  0100               	movlb	0	; () banked
  9913  000784  6F8F               	movwf	(printf@f+1)& (0+255),b
  9914  000786  EC15  F00E         	call	_printf	;wreg free
  9915                           
  9916                           ;UI.c: 196: lcdInst(0b11000000);;
  9917  00078A  0EC0               	movlw	192
  9918  00078C  EC59  F02E         	call	_lcdInst
  9919                           
  9920                           ;UI.c: 197: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  9921  000790  0E1C               	movlw	low STR_27
  9922  000792  0100               	movlb	0	; () banked
  9923  000794  6F8E               	movwf	printf@f& (0+255),b
  9924  000796  0EFE               	movlw	high STR_27
  9925  000798  0100               	movlb	0	; () banked
  9926  00079A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9927  00079C  C13F  F090         	movff	_log_count_can_no_lab,?_printf+2
  9928  0007A0  C140  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  9929  0007A4  C141  F092         	movff	_log_count_can_w_lab,?_printf+4
  9930  0007A8  C142  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  9931  0007AC  EC15  F00E         	call	_printf	;wreg free
  9932                           
  9933                           ;UI.c: 199: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9934  0007B0  0E00               	movlw	0
  9935  0007B2  0100               	movlb	0	; () banked
  9936  0007B4  6FD2               	movwf	UI@i_446& (0+255),b
  9937  0007B6                     l9561:
  9938                           
  9939                           ; BSR set to: 0
  9940  0007B6  0E63               	movlw	99
  9941  0007B8  0100               	movlb	0	; () banked
  9942  0007BA  65D2               	cpfsgt	UI@i_446& (0+255),b
  9943  0007BC  D001               	goto	l9565
  9944  0007BE  D00C               	goto	l9569
  9945  0007C0                     l9565:
  9946                           
  9947                           ; BSR set to: 0
  9948  0007C0  0E68               	movlw	104
  9949  0007C2  0100               	movlb	0	; () banked
  9950  0007C4  6FC4               	movwf	??_UI& (0+255),b
  9951  0007C6  0EE4               	movlw	228
  9952  0007C8                     u10377:
  9953  0007C8  2EE8               	decfsz	wreg,f,c
  9954  0007CA  D7FE               	bra	u10377
  9955  0007CC  2FC4               	decfsz	??_UI& (0+255),f,b
  9956  0007CE  D7FC               	bra	u10377
  9957  0007D0  F000               	nop	
  9958  0007D2  0100               	movlb	0	; () banked
  9959  0007D4  2BD2               	incf	UI@i_446& (0+255),f,b
  9960  0007D6  D7EF               	goto	l9561
  9961  0007D8                     l9569:
  9962                           
  9963                           ; BSR set to: 0
  9964  0007D8  0100               	movlb	0	; () banked
  9965  0007DA  51F8               	movf	_logstate& (0+255),w,b
  9966  0007DC  0100               	movlb	0	; () banked
  9967  0007DE  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9968  0007E0  B4D8               	btfsc	status,2,c
  9969  0007E2  0012               	return	
  9970                           
  9971                           ; BSR set to: 0
  9972                           ;UI.c: 200: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9973                           
  9974                           ; BSR set to: 0
  9975                           
  9976                           ; BSR set to: 0
  9977  0007E4  0E00               	movlw	0
  9978  0007E6  0100               	movlb	0	; () banked
  9979  0007E8  6FD3               	movwf	UI@i_447& (0+255),b
  9980  0007EA                     l9575:
  9981                           
  9982                           ; BSR set to: 0
  9983  0007EA  0E63               	movlw	99
  9984  0007EC  0100               	movlb	0	; () banked
  9985  0007EE  65D3               	cpfsgt	UI@i_447& (0+255),b
  9986  0007F0  D001               	goto	l9579
  9987  0007F2  D00C               	goto	l9583
  9988  0007F4                     l9579:
  9989                           
  9990                           ; BSR set to: 0
  9991  0007F4  0E68               	movlw	104
  9992  0007F6  0100               	movlb	0	; () banked
  9993  0007F8  6FC4               	movwf	??_UI& (0+255),b
  9994  0007FA  0EE4               	movlw	228
  9995  0007FC                     u10387:
  9996  0007FC  2EE8               	decfsz	wreg,f,c
  9997  0007FE  D7FE               	bra	u10387
  9998  000800  2FC4               	decfsz	??_UI& (0+255),f,b
  9999  000802  D7FC               	bra	u10387
 10000  000804  F000               	nop	
 10001  000806  0100               	movlb	0	; () banked
 10002  000808  2BD3               	incf	UI@i_447& (0+255),f,b
 10003  00080A  D7EF               	goto	l9575
 10004  00080C                     l9583:
 10005                           
 10006                           ; BSR set to: 0
 10007  00080C  0100               	movlb	0	; () banked
 10008  00080E  51F8               	movf	_logstate& (0+255),w,b
 10009  000810  0100               	movlb	0	; () banked
 10010  000812  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10011  000814  B4D8               	btfsc	status,2,c
 10012  000816  0012               	return	
 10013                           
 10014                           ; BSR set to: 0
 10015                           ;UI.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
 10016                           
 10017                           ; BSR set to: 0
 10018                           
 10019                           ; BSR set to: 0
 10020  000818  0E01               	movlw	1
 10021  00081A  EC59  F02E         	call	_lcdInst
 10022  00081E  0E68               	movlw	104
 10023  000820  0100               	movlb	0	; () banked
 10024  000822  6FC4               	movwf	??_UI& (0+255),b
 10025  000824  0EE4               	movlw	228
 10026  000826                     u10397:
 10027  000826  2EE8               	decfsz	wreg,f,c
 10028  000828  D7FE               	bra	u10397
 10029  00082A  2FC4               	decfsz	??_UI& (0+255),f,b
 10030  00082C  D7FC               	bra	u10397
 10031  00082E  F000               	nop	
 10032                           
 10033                           ;UI.c: 203: lcdInst(0b10000000);;
 10034  000830  0E80               	movlw	128
 10035  000832  EC59  F02E         	call	_lcdInst
 10036                           
 10037                           ;UI.c: 204: printf("-- TOTAL CANS --");
 10038  000836  0E72               	movlw	low STR_28
 10039  000838  0100               	movlb	0	; () banked
 10040  00083A  6F8E               	movwf	printf@f& (0+255),b
 10041  00083C  0EFD               	movlw	high STR_28
 10042  00083E  0100               	movlb	0	; () banked
 10043  000840  6F8F               	movwf	(printf@f+1)& (0+255),b
 10044  000842  EC15  F00E         	call	_printf	;wreg free
 10045                           
 10046                           ;UI.c: 205: lcdInst(0b11000000);;
 10047  000846  0EC0               	movlw	192
 10048  000848  EC59  F02E         	call	_lcdInst
 10049                           
 10050                           ;UI.c: 206: printf("%d", log_count_total);
 10051  00084C  0E2A               	movlw	low (STR_27+14)
 10052  00084E  0100               	movlb	0	; () banked
 10053  000850  6F8E               	movwf	printf@f& (0+255),b
 10054  000852  0EFE               	movlw	high (STR_27+14)
 10055  000854  0100               	movlb	0	; () banked
 10056  000856  6F8F               	movwf	(printf@f+1)& (0+255),b
 10057  000858  C143  F090         	movff	_log_count_total,?_printf+2
 10058  00085C  C144  F091         	movff	_log_count_total+1,?_printf+3
 10059  000860  EC15  F00E         	call	_printf	;wreg free
 10060                           
 10061                           ;UI.c: 208: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10062  000864  0E00               	movlw	0
 10063  000866  0100               	movlb	0	; () banked
 10064  000868  6FD4               	movwf	UI@i_450& (0+255),b
 10065  00086A                     l9601:
 10066                           
 10067                           ; BSR set to: 0
 10068  00086A  0E63               	movlw	99
 10069  00086C  0100               	movlb	0	; () banked
 10070  00086E  65D4               	cpfsgt	UI@i_450& (0+255),b
 10071  000870  D001               	goto	l9605
 10072  000872  D00C               	goto	l9609
 10073  000874                     l9605:
 10074                           
 10075                           ; BSR set to: 0
 10076  000874  0E68               	movlw	104
 10077  000876  0100               	movlb	0	; () banked
 10078  000878  6FC4               	movwf	??_UI& (0+255),b
 10079  00087A  0EE4               	movlw	228
 10080  00087C                     u10407:
 10081  00087C  2EE8               	decfsz	wreg,f,c
 10082  00087E  D7FE               	bra	u10407
 10083  000880  2FC4               	decfsz	??_UI& (0+255),f,b
 10084  000882  D7FC               	bra	u10407
 10085  000884  F000               	nop	
 10086  000886  0100               	movlb	0	; () banked
 10087  000888  2BD4               	incf	UI@i_450& (0+255),f,b
 10088  00088A  D7EF               	goto	l9601
 10089  00088C                     l9609:
 10090                           
 10091                           ; BSR set to: 0
 10092  00088C  0100               	movlb	0	; () banked
 10093  00088E  51F8               	movf	_logstate& (0+255),w,b
 10094  000890  0100               	movlb	0	; () banked
 10095  000892  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10096  000894  B4D8               	btfsc	status,2,c
 10097  000896  0012               	return	
 10098                           
 10099                           ; BSR set to: 0
 10100                           ;UI.c: 209: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10101                           
 10102                           ; BSR set to: 0
 10103                           
 10104                           ; BSR set to: 0
 10105  000898  0E00               	movlw	0
 10106  00089A  0100               	movlb	0	; () banked
 10107  00089C  6FD5               	movwf	UI@i_451& (0+255),b
 10108  00089E                     l9615:
 10109                           
 10110                           ; BSR set to: 0
 10111  00089E  0E63               	movlw	99
 10112  0008A0  0100               	movlb	0	; () banked
 10113  0008A2  65D5               	cpfsgt	UI@i_451& (0+255),b
 10114  0008A4  D001               	goto	l9619
 10115  0008A6  D00C               	goto	l9623
 10116  0008A8                     l9619:
 10117                           
 10118                           ; BSR set to: 0
 10119  0008A8  0E68               	movlw	104
 10120  0008AA  0100               	movlb	0	; () banked
 10121  0008AC  6FC4               	movwf	??_UI& (0+255),b
 10122  0008AE  0EE4               	movlw	228
 10123  0008B0                     u10417:
 10124  0008B0  2EE8               	decfsz	wreg,f,c
 10125  0008B2  D7FE               	bra	u10417
 10126  0008B4  2FC4               	decfsz	??_UI& (0+255),f,b
 10127  0008B6  D7FC               	bra	u10417
 10128  0008B8  F000               	nop	
 10129  0008BA  0100               	movlb	0	; () banked
 10130  0008BC  2BD5               	incf	UI@i_451& (0+255),f,b
 10131  0008BE  D7EF               	goto	l9615
 10132  0008C0                     l9623:
 10133                           
 10134                           ; BSR set to: 0
 10135  0008C0  0100               	movlb	0	; () banked
 10136  0008C2  51F8               	movf	_logstate& (0+255),w,b
 10137  0008C4  0100               	movlb	0	; () banked
 10138  0008C6  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10139  0008C8  B4D8               	btfsc	status,2,c
 10140  0008CA  0012               	return	
 10141  0008CC                     l9627:
 10142  0008CC  0100               	movlb	0	; () banked
 10143  0008CE  51F8               	movf	_logstate& (0+255),w,b
 10144  0008D0  0100               	movlb	0	; () banked
 10145  0008D2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10146  0008D4  B4D8               	btfsc	status,2,c
 10147  0008D6  0012               	return	
 10148  0008D8  D44A               	goto	l9323
 10149  0008DA                     __end_of_UI:
 10150                           	opt stack 0
 10151                           tblptru	equ	0xFF8
 10152                           tblptrh	equ	0xFF7
 10153                           tblptrl	equ	0xFF6
 10154                           tablat	equ	0xFF5
 10155                           prodh	equ	0xFF4
 10156                           prodl	equ	0xFF3
 10157                           intcon	equ	0xFF2
 10158                           intcon2	equ	0xFF1
 10159                           intcon3	equ	0xFF0
 10160                           postinc0	equ	0xFEE
 10161                           wreg	equ	0xFE8
 10162                           postdec1	equ	0xFE5
 10163                           fsr1l	equ	0xFE1
 10164                           indf2	equ	0xFDF
 10165                           postinc2	equ	0xFDE
 10166                           postdec2	equ	0xFDD
 10167                           fsr2h	equ	0xFDA
 10168                           fsr2l	equ	0xFD9
 10169                           status	equ	0xFD8
 10170                           
 10171 ;; *************** function _printRTC *****************
 10172 ;; Defined at:
 10173 ;;		line 63 in file "RTC.c"
 10174 ;; Parameters:    Size  Location     Type
 10175 ;;		None
 10176 ;; Auto vars:     Size  Location     Type
 10177 ;;  i               2   66[BANK0 ] int 
 10178 ;;  INT_time       14   46[BANK0 ] int [7]
 10179 ;;  month           4   62[BANK0 ] unsigned char [4]
 10180 ;;  RTC_month       2   60[BANK0 ] int 
 10181 ;; Return value:  Size  Location     Type
 10182 ;;                  1    wreg      void 
 10183 ;; Registers used:
 10184 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10185 ;; Tracked objects:
 10186 ;;		On entry : 0/0
 10187 ;;		On exit  : 0/0
 10188 ;;		Unchanged: 0/0
 10189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10191 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10192 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10193 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10194 ;;Total ram usage:       25 bytes
 10195 ;; Hardware stack levels used:    1
 10196 ;; Hardware stack levels required when called:   10
 10197 ;; This function calls:
 10198 ;;		_getRTC
 10199 ;;		_lcdInst
 10200 ;;		_printf
 10201 ;;		_strcpy
 10202 ;; This function is called by:
 10203 ;;		_UI
 10204 ;;		_change_state_to_menu_start
 10205 ;; This function uses a non-reentrant model
 10206 ;;
 10207                           
 10208                           	psect	text28
 10209  003120                     __ptext28:
 10210                           	opt stack 0
 10211  003120                     _printRTC:
 10212                           	opt stack 18
 10213                           
 10214                           ;RTC.c: 64: getRTC();
 10215                           
 10216                           ; BSR set to: 0
 10217                           ;incstack = 0
 10218  003120  EC02  F027         	call	_getRTC	;wreg free
 10219                           
 10220                           ;RTC.c: 65: char month[] = "MMM";
 10221  003124  C14D  F0BE         	movff	printRTC@F3236,printRTC@month
 10222  003128  C14E  F0BF         	movff	printRTC@F3236+1,printRTC@month+1
 10223  00312C  C14F  F0C0         	movff	printRTC@F3236+2,printRTC@month+2
 10224  003130  C150  F0C1         	movff	printRTC@F3236+3,printRTC@month+3
 10225                           
 10226                           ;RTC.c: 66: int INT_time[7];
 10227                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 10228  003134  0E00               	movlw	0
 10229  003136  0100               	movlb	0	; () banked
 10230  003138  6FC3               	movwf	(printRTC@i+1)& (0+255),b
 10231  00313A  0E00               	movlw	0
 10232  00313C  6FC2               	movwf	printRTC@i& (0+255),b
 10233                           
 10234                           ; BSR set to: 0
 10235  00313E  0100               	movlb	0	; () banked
 10236  003140  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10237  003142  D008               	goto	l7171
 10238  003144  0100               	movlb	0	; () banked
 10239  003146  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10240  003148  E146               	bnz	l627
 10241  00314A  0E07               	movlw	7
 10242  00314C  0100               	movlb	0	; () banked
 10243  00314E  5DC2               	subwf	printRTC@i& (0+255),w,b
 10244  003150  B0D8               	btfsc	status,0,c
 10245  003152  D041               	goto	l627
 10246  003154                     l7171:
 10247                           
 10248                           ; BSR set to: 0
 10249                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 10250  003154  0E1C               	movlw	low _time
 10251  003156  0100               	movlb	0	; () banked
 10252  003158  25C2               	addwf	printRTC@i& (0+255),w,b
 10253  00315A  6ED9               	movwf	fsr2l,c
 10254  00315C  0E01               	movlw	high _time
 10255  00315E  0100               	movlb	0	; () banked
 10256  003160  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10257  003162  6EDA               	movwf	fsr2h,c
 10258  003164  50DF               	movf	indf2,w,c
 10259  003166  0100               	movlb	0	; () banked
 10260  003168  6FAB               	movwf	??_printRTC& (0+255),b
 10261  00316A  0100               	movlb	0	; () banked
 10262  00316C  3BAB               	swapf	??_printRTC& (0+255),f,b
 10263  00316E  0E0F               	movlw	15
 10264  003170  17AB               	andwf	??_printRTC& (0+255),f,b
 10265  003172  0E0F               	movlw	15
 10266  003174  0100               	movlb	0	; () banked
 10267  003176  17AB               	andwf	??_printRTC& (0+255),f,b
 10268  003178  0100               	movlb	0	; () banked
 10269  00317A  51AB               	movf	??_printRTC& (0+255),w,b
 10270  00317C  0D0A               	mullw	10
 10271  00317E  0E1C               	movlw	low _time
 10272  003180  0100               	movlb	0	; () banked
 10273  003182  25C2               	addwf	printRTC@i& (0+255),w,b
 10274  003184  6ED9               	movwf	fsr2l,c
 10275  003186  0E01               	movlw	high _time
 10276  003188  0100               	movlb	0	; () banked
 10277  00318A  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10278  00318C  6EDA               	movwf	fsr2h,c
 10279  00318E  50DF               	movf	indf2,w,c
 10280  003190  0B0F               	andlw	15
 10281  003192  0100               	movlb	0	; () banked
 10282  003194  6FAC               	movwf	(??_printRTC+1)& (0+255),b
 10283  003196  6BAD               	clrf	(??_printRTC+2)& (0+255),b
 10284  003198  50F3               	movf	prodl,w,c
 10285  00319A  0100               	movlb	0	; () banked
 10286  00319C  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
 10287  00319E  50F4               	movf	prodh,w,c
 10288  0031A0  0100               	movlb	0	; () banked
 10289  0031A2  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
 10290  0031A4  90D8               	bcf	status,0,c
 10291  0031A6  0100               	movlb	0	; () banked
 10292  0031A8  35C2               	rlcf	printRTC@i& (0+255),w,b
 10293  0031AA  6ED9               	movwf	fsr2l,c
 10294  0031AC  0100               	movlb	0	; () banked
 10295  0031AE  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
 10296  0031B0  6EDA               	movwf	fsr2h,c
 10297  0031B2  0EAE               	movlw	low printRTC@INT_time
 10298  0031B4  26D9               	addwf	fsr2l,f,c
 10299  0031B6  0E00               	movlw	high printRTC@INT_time
 10300  0031B8  22DA               	addwfc	fsr2h,f,c
 10301  0031BA  C0AC  FFDE         	movff	??_printRTC+1,postinc2
 10302  0031BE  C0AD  FFDD         	movff	??_printRTC+2,postdec2
 10303                           
 10304                           ; BSR set to: 0
 10305  0031C2  0100               	movlb	0	; () banked
 10306  0031C4  4BC2               	infsnz	printRTC@i& (0+255),f,b
 10307  0031C6  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
 10308                           
 10309                           ; BSR set to: 0
 10310  0031C8  0100               	movlb	0	; () banked
 10311  0031CA  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10312  0031CC  D7C3               	goto	l7171
 10313  0031CE  0100               	movlb	0	; () banked
 10314  0031D0  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10315  0031D2  E101               	bnz	u5950
 10316  0031D4  D7BA               	goto	L12
 10317  0031D6                     u5950:
 10318  0031D6                     l627:
 10319                           
 10320                           ; BSR set to: 0
 10321                           ;RTC.c: 69: }
 10322                           ;RTC.c: 70: int RTC_month = INT_time[5];
 10323  0031D6  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
 10324  0031DA  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
 10325                           
 10326                           ;RTC.c: 72: switch(RTC_month){
 10327  0031DE  D0B4               	goto	l7203
 10328  0031E0                     l7177:
 10329                           
 10330                           ; BSR set to: 0
 10331                           ;RTC.c: 74: strcpy(month, "JAN");
 10332  0031E0  0EBE               	movlw	low printRTC@month
 10333  0031E2  0100               	movlb	0	; () banked
 10334  0031E4  6F80               	movwf	strcpy@to& (0+255),b
 10335  0031E6  0E00               	movlw	high printRTC@month
 10336  0031E8  0100               	movlb	0	; () banked
 10337  0031EA  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10338  0031EC  0EDB               	movlw	low STR_8
 10339  0031EE  0100               	movlb	0	; () banked
 10340  0031F0  6F82               	movwf	strcpy@from& (0+255),b
 10341  0031F2  0EFF               	movlw	high STR_8
 10342  0031F4  0100               	movlb	0	; () banked
 10343  0031F6  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10344  0031F8  ECB3  F02B         	call	_strcpy	;wreg free
 10345                           
 10346                           ;RTC.c: 75: break;
 10347  0031FC  D0D4               	goto	l7205
 10348  0031FE                     l7179:
 10349                           
 10350                           ;RTC.c: 77: strcpy(month, "FEB");
 10351  0031FE  0EBE               	movlw	low printRTC@month
 10352  003200  0100               	movlb	0	; () banked
 10353  003202  6F80               	movwf	strcpy@to& (0+255),b
 10354  003204  0E00               	movlw	high printRTC@month
 10355  003206  0100               	movlb	0	; () banked
 10356  003208  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10357  00320A  0ECB               	movlw	low STR_9
 10358  00320C  0100               	movlb	0	; () banked
 10359  00320E  6F82               	movwf	strcpy@from& (0+255),b
 10360  003210  0EFF               	movlw	high STR_9
 10361  003212  0100               	movlb	0	; () banked
 10362  003214  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10363  003216  ECB3  F02B         	call	_strcpy	;wreg free
 10364                           
 10365                           ;RTC.c: 78: break;
 10366  00321A  D0C5               	goto	l7205
 10367  00321C                     l7181:
 10368                           
 10369                           ;RTC.c: 80: strcpy(month, "MAR");
 10370  00321C  0EBE               	movlw	low printRTC@month
 10371  00321E  0100               	movlb	0	; () banked
 10372  003220  6F80               	movwf	strcpy@to& (0+255),b
 10373  003222  0E00               	movlw	high printRTC@month
 10374  003224  0100               	movlb	0	; () banked
 10375  003226  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10376  003228  0EE7               	movlw	low STR_10
 10377  00322A  0100               	movlb	0	; () banked
 10378  00322C  6F82               	movwf	strcpy@from& (0+255),b
 10379  00322E  0EFF               	movlw	high STR_10
 10380  003230  0100               	movlb	0	; () banked
 10381  003232  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10382  003234  ECB3  F02B         	call	_strcpy	;wreg free
 10383                           
 10384                           ;RTC.c: 81: break;
 10385  003238  D0B6               	goto	l7205
 10386  00323A                     l7183:
 10387                           
 10388                           ;RTC.c: 83: strcpy(month, "APR");
 10389  00323A  0EBE               	movlw	low printRTC@month
 10390  00323C  0100               	movlb	0	; () banked
 10391  00323E  6F80               	movwf	strcpy@to& (0+255),b
 10392  003240  0E00               	movlw	high printRTC@month
 10393  003242  0100               	movlb	0	; () banked
 10394  003244  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10395  003246  0EEB               	movlw	low STR_11
 10396  003248  0100               	movlb	0	; () banked
 10397  00324A  6F82               	movwf	strcpy@from& (0+255),b
 10398  00324C  0EFF               	movlw	high STR_11
 10399  00324E  0100               	movlb	0	; () banked
 10400  003250  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10401  003252  ECB3  F02B         	call	_strcpy	;wreg free
 10402                           
 10403                           ;RTC.c: 84: break;
 10404  003256  D0A7               	goto	l7205
 10405  003258                     l7185:
 10406                           
 10407                           ;RTC.c: 86: strcpy(month, "MAY");
 10408  003258  0EBE               	movlw	low printRTC@month
 10409  00325A  0100               	movlb	0	; () banked
 10410  00325C  6F80               	movwf	strcpy@to& (0+255),b
 10411  00325E  0E00               	movlw	high printRTC@month
 10412  003260  0100               	movlb	0	; () banked
 10413  003262  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10414  003264  0EFB               	movlw	low STR_12
 10415  003266  0100               	movlb	0	; () banked
 10416  003268  6F82               	movwf	strcpy@from& (0+255),b
 10417  00326A  0EFF               	movlw	high STR_12
 10418  00326C  0100               	movlb	0	; () banked
 10419  00326E  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10420  003270  ECB3  F02B         	call	_strcpy	;wreg free
 10421                           
 10422                           ;RTC.c: 87: break;
 10423  003274  D098               	goto	l7205
 10424  003276                     l7187:
 10425                           
 10426                           ;RTC.c: 89: strcpy(month, "JUN");
 10427  003276  0EBE               	movlw	low printRTC@month
 10428  003278  0100               	movlb	0	; () banked
 10429  00327A  6F80               	movwf	strcpy@to& (0+255),b
 10430  00327C  0E00               	movlw	high printRTC@month
 10431  00327E  0100               	movlb	0	; () banked
 10432  003280  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10433  003282  0EDF               	movlw	low STR_13
 10434  003284  0100               	movlb	0	; () banked
 10435  003286  6F82               	movwf	strcpy@from& (0+255),b
 10436  003288  0EFF               	movlw	high STR_13
 10437  00328A  0100               	movlb	0	; () banked
 10438  00328C  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10439  00328E  ECB3  F02B         	call	_strcpy	;wreg free
 10440                           
 10441                           ;RTC.c: 90: break;
 10442  003292  D089               	goto	l7205
 10443  003294                     l7189:
 10444                           
 10445                           ;RTC.c: 92: strcpy(month, "JUL");
 10446  003294  0EBE               	movlw	low printRTC@month
 10447  003296  0100               	movlb	0	; () banked
 10448  003298  6F80               	movwf	strcpy@to& (0+255),b
 10449  00329A  0E00               	movlw	high printRTC@month
 10450  00329C  0100               	movlb	0	; () banked
 10451  00329E  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10452  0032A0  0ED7               	movlw	low STR_14
 10453  0032A2  0100               	movlb	0	; () banked
 10454  0032A4  6F82               	movwf	strcpy@from& (0+255),b
 10455  0032A6  0EFF               	movlw	high STR_14
 10456  0032A8  0100               	movlb	0	; () banked
 10457  0032AA  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10458  0032AC  ECB3  F02B         	call	_strcpy	;wreg free
 10459                           
 10460                           ;RTC.c: 93: break;
 10461  0032B0  D07A               	goto	l7205
 10462  0032B2                     l7191:
 10463                           
 10464                           ;RTC.c: 95: strcpy(month, "AUG");
 10465  0032B2  0EBE               	movlw	low printRTC@month
 10466  0032B4  0100               	movlb	0	; () banked
 10467  0032B6  6F80               	movwf	strcpy@to& (0+255),b
 10468  0032B8  0E00               	movlw	high printRTC@month
 10469  0032BA  0100               	movlb	0	; () banked
 10470  0032BC  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10471  0032BE  0ED3               	movlw	low STR_15
 10472  0032C0  0100               	movlb	0	; () banked
 10473  0032C2  6F82               	movwf	strcpy@from& (0+255),b
 10474  0032C4  0EFF               	movlw	high STR_15
 10475  0032C6  0100               	movlb	0	; () banked
 10476  0032C8  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10477  0032CA  ECB3  F02B         	call	_strcpy	;wreg free
 10478                           
 10479                           ;RTC.c: 96: break;
 10480  0032CE  D06B               	goto	l7205
 10481  0032D0                     l7193:
 10482                           
 10483                           ;RTC.c: 98: strcpy(month, "SEP");
 10484  0032D0  0EBE               	movlw	low printRTC@month
 10485  0032D2  0100               	movlb	0	; () banked
 10486  0032D4  6F80               	movwf	strcpy@to& (0+255),b
 10487  0032D6  0E00               	movlw	high printRTC@month
 10488  0032D8  0100               	movlb	0	; () banked
 10489  0032DA  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10490  0032DC  0EE3               	movlw	low STR_16
 10491  0032DE  0100               	movlb	0	; () banked
 10492  0032E0  6F82               	movwf	strcpy@from& (0+255),b
 10493  0032E2  0EFF               	movlw	high STR_16
 10494  0032E4  0100               	movlb	0	; () banked
 10495  0032E6  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10496  0032E8  ECB3  F02B         	call	_strcpy	;wreg free
 10497                           
 10498                           ;RTC.c: 99: break;
 10499  0032EC  D05C               	goto	l7205
 10500  0032EE                     l7195:
 10501                           
 10502                           ;RTC.c: 101: strcpy(month, "OCT");
 10503  0032EE  0EBE               	movlw	low printRTC@month
 10504  0032F0  0100               	movlb	0	; () banked
 10505  0032F2  6F80               	movwf	strcpy@to& (0+255),b
 10506  0032F4  0E00               	movlw	high printRTC@month
 10507  0032F6  0100               	movlb	0	; () banked
 10508  0032F8  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10509  0032FA  0EF3               	movlw	low STR_17
 10510  0032FC  0100               	movlb	0	; () banked
 10511  0032FE  6F82               	movwf	strcpy@from& (0+255),b
 10512  003300  0EFF               	movlw	high STR_17
 10513  003302  0100               	movlb	0	; () banked
 10514  003304  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10515  003306  ECB3  F02B         	call	_strcpy	;wreg free
 10516                           
 10517                           ;RTC.c: 102: break;
 10518  00330A  D04D               	goto	l7205
 10519  00330C                     l7197:
 10520                           
 10521                           ;RTC.c: 104: strcpy(month, "NOV");
 10522  00330C  0EBE               	movlw	low printRTC@month
 10523  00330E  0100               	movlb	0	; () banked
 10524  003310  6F80               	movwf	strcpy@to& (0+255),b
 10525  003312  0E00               	movlw	high printRTC@month
 10526  003314  0100               	movlb	0	; () banked
 10527  003316  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10528  003318  0EF7               	movlw	low STR_18
 10529  00331A  0100               	movlb	0	; () banked
 10530  00331C  6F82               	movwf	strcpy@from& (0+255),b
 10531  00331E  0EFF               	movlw	high STR_18
 10532  003320  0100               	movlb	0	; () banked
 10533  003322  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10534  003324  ECB3  F02B         	call	_strcpy	;wreg free
 10535                           
 10536                           ;RTC.c: 105: break;
 10537  003328  D03E               	goto	l7205
 10538  00332A                     l7199:
 10539                           
 10540                           ;RTC.c: 107: strcpy(month, "DEC");
 10541  00332A  0EBE               	movlw	low printRTC@month
 10542  00332C  0100               	movlb	0	; () banked
 10543  00332E  6F80               	movwf	strcpy@to& (0+255),b
 10544  003330  0E00               	movlw	high printRTC@month
 10545  003332  0100               	movlb	0	; () banked
 10546  003334  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10547  003336  0ECF               	movlw	low STR_19
 10548  003338  0100               	movlb	0	; () banked
 10549  00333A  6F82               	movwf	strcpy@from& (0+255),b
 10550  00333C  0EFF               	movlw	high STR_19
 10551  00333E  0100               	movlb	0	; () banked
 10552  003340  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10553  003342  ECB3  F02B         	call	_strcpy	;wreg free
 10554                           
 10555                           ;RTC.c: 109: }
 10556                           
 10557                           ;RTC.c: 108: break;
 10558  003346  D02F               	goto	l7205
 10559  003348                     l7203:
 10560  003348  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
 10561  00334C  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
 10562                           
 10563                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10564                           ; Switch size 1, requested type "space"
 10565                           ; Number of cases is 1, Range of values is 0 to 0
 10566                           ; switch strategies available:
 10567                           ; Name         Instructions Cycles
 10568                           ; simple_byte            4     3 (average)
 10569                           ;	Chosen strategy is simple_byte
 10570  003350  0100               	movlb	0	; () banked
 10571  003352  51AC               	movf	(??_printRTC+1)& (0+255),w,b
 10572  003354  0A00               	xorlw	0	; case 0
 10573  003356  A4D8               	btfss	status,2,c
 10574  003358  D026               	goto	l7205
 10575                           
 10576                           ; BSR set to: 0
 10577                           ; Switch size 1, requested type "space"
 10578                           ; Number of cases is 12, Range of values is 1 to 12
 10579                           ; switch strategies available:
 10580                           ; Name         Instructions Cycles
 10581                           ; simple_byte           37    19 (average)
 10582                           ;	Chosen strategy is simple_byte
 10583  00335A  0100               	movlb	0	; () banked
 10584  00335C  51AB               	movf	??_printRTC& (0+255),w,b
 10585  00335E  0A01               	xorlw	1	; case 1
 10586  003360  B4D8               	btfsc	status,2,c
 10587  003362  D73E               	goto	l7177
 10588  003364  0A03               	xorlw	3	; case 2
 10589  003366  B4D8               	btfsc	status,2,c
 10590  003368  D74A               	goto	l7179
 10591  00336A  0A01               	xorlw	1	; case 3
 10592  00336C  B4D8               	btfsc	status,2,c
 10593  00336E  D756               	goto	l7181
 10594  003370  0A07               	xorlw	7	; case 4
 10595  003372  B4D8               	btfsc	status,2,c
 10596  003374  D762               	goto	l7183
 10597  003376  0A01               	xorlw	1	; case 5
 10598  003378  B4D8               	btfsc	status,2,c
 10599  00337A  D76E               	goto	l7185
 10600  00337C  0A03               	xorlw	3	; case 6
 10601  00337E  B4D8               	btfsc	status,2,c
 10602  003380  D77A               	goto	l7187
 10603  003382  0A01               	xorlw	1	; case 7
 10604  003384  B4D8               	btfsc	status,2,c
 10605  003386  D786               	goto	l7189
 10606  003388  0A0F               	xorlw	15	; case 8
 10607  00338A  B4D8               	btfsc	status,2,c
 10608  00338C  D792               	goto	l7191
 10609  00338E  0A01               	xorlw	1	; case 9
 10610  003390  B4D8               	btfsc	status,2,c
 10611  003392  D79E               	goto	l7193
 10612  003394  0A03               	xorlw	3	; case 10
 10613  003396  B4D8               	btfsc	status,2,c
 10614  003398  D7AA               	goto	l7195
 10615  00339A  0A01               	xorlw	1	; case 11
 10616  00339C  B4D8               	btfsc	status,2,c
 10617  00339E  D7B6               	goto	l7197
 10618  0033A0  0A07               	xorlw	7	; case 12
 10619  0033A2  B4D8               	btfsc	status,2,c
 10620  0033A4  D7C2               	goto	l7199
 10621  0033A6                     l7205:
 10622                           
 10623                           ;RTC.c: 110: lcdInst(0b10000000);;
 10624  0033A6  0E80               	movlw	128
 10625  0033A8  EC59  F02E         	call	_lcdInst
 10626                           
 10627                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 10628  0033AC  0EA2               	movlw	low STR_21
 10629  0033AE  0100               	movlb	0	; () banked
 10630  0033B0  6F8E               	movwf	printf@f& (0+255),b
 10631  0033B2  0EFA               	movlw	high STR_21
 10632  0033B4  0100               	movlb	0	; () banked
 10633  0033B6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10634  0033B8  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
 10635  0033BC  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
 10636  0033C0  0EBE               	movlw	low printRTC@month
 10637  0033C2  0100               	movlb	0	; () banked
 10638  0033C4  6F92               	movwf	(?_printf+4)& (0+255),b
 10639  0033C6  0E00               	movlw	high printRTC@month
 10640  0033C8  0100               	movlb	0	; () banked
 10641  0033CA  6F93               	movwf	(?_printf+5)& (0+255),b
 10642  0033CC  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
 10643  0033D0  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
 10644  0033D4  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
 10645  0033D8  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
 10646  0033DC  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
 10647  0033E0  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
 10648  0033E4  EC15  F00E         	call	_printf	;wreg free
 10649  0033E8  0012               	return		;funcret
 10650  0033EA                     __end_of_printRTC:
 10651                           	opt stack 0
 10652                           tblptru	equ	0xFF8
 10653                           tblptrh	equ	0xFF7
 10654                           tblptrl	equ	0xFF6
 10655                           tablat	equ	0xFF5
 10656                           prodh	equ	0xFF4
 10657                           prodl	equ	0xFF3
 10658                           intcon	equ	0xFF2
 10659                           intcon2	equ	0xFF1
 10660                           intcon3	equ	0xFF0
 10661                           postinc0	equ	0xFEE
 10662                           wreg	equ	0xFE8
 10663                           postdec1	equ	0xFE5
 10664                           fsr1l	equ	0xFE1
 10665                           indf2	equ	0xFDF
 10666                           postinc2	equ	0xFDE
 10667                           postdec2	equ	0xFDD
 10668                           fsr2h	equ	0xFDA
 10669                           fsr2l	equ	0xFD9
 10670                           status	equ	0xFD8
 10671                           
 10672 ;; *************** function _strcpy *****************
 10673 ;; Defined at:
 10674 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 10675 ;; Parameters:    Size  Location     Type
 10676 ;;  to              2    0[BANK0 ] PTR unsigned char 
 10677 ;;		 -> printRTC@month(4), UI@month(4), 
 10678 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 10679 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 10680 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 10681 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 10682 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 10683 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 10684 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 10685 ;;		 -> STR_8(4), 
 10686 ;; Auto vars:     Size  Location     Type
 10687 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 10688 ;;		 -> printRTC@month(4), UI@month(4), 
 10689 ;; Return value:  Size  Location     Type
 10690 ;;                  2    0[BANK0 ] PTR unsigned char 
 10691 ;; Registers used:
 10692 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10693 ;; Tracked objects:
 10694 ;;		On entry : 0/0
 10695 ;;		On exit  : 0/0
 10696 ;;		Unchanged: 0/0
 10697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10698 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10699 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10701 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10702 ;;Total ram usage:        6 bytes
 10703 ;; Hardware stack levels used:    1
 10704 ;; Hardware stack levels required when called:    7
 10705 ;; This function calls:
 10706 ;;		Nothing
 10707 ;; This function is called by:
 10708 ;;		_UI
 10709 ;;		_printRTC
 10710 ;; This function uses a non-reentrant model
 10711 ;;
 10712                           
 10713                           	psect	text29
 10714  005766                     __ptext29:
 10715                           	opt stack 0
 10716  005766                     _strcpy:
 10717                           	opt stack 20
 10718                           
 10719                           ;incstack = 0
 10720  005766  C080  F084         	movff	strcpy@to,strcpy@cp
 10721  00576A  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
 10722  00576E  D006               	goto	l6869
 10723  005770                     l6867:
 10724  005770  0100               	movlb	0	; () banked
 10725  005772  4B84               	infsnz	strcpy@cp& (0+255),f,b
 10726  005774  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
 10727  005776  0100               	movlb	0	; () banked
 10728  005778  4B82               	infsnz	strcpy@from& (0+255),f,b
 10729  00577A  2B83               	incf	(strcpy@from+1)& (0+255),f,b
 10730  00577C                     l6869:
 10731  00577C  C082  FFF6         	movff	strcpy@from,tblptrl
 10732  005780  C083  FFF7         	movff	strcpy@from+1,tblptrh
 10733  005784                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10734  005784  6AF8               	clrf	tblptru,c
 10735  005786                     	endif
 10736  005786                     	if	0	;tblptru may be non-zero
 10737  005786                     	endif
 10738  005786  C084  FFD9         	movff	strcpy@cp,fsr2l
 10739  00578A  C085  FFDA         	movff	strcpy@cp+1,fsr2h
 10740  00578E  0008               	tblrd		*
 10741  005790  CFF5 FFDF          	movff	tablat,indf2
 10742  005794  50DF               	movf	indf2,w,c
 10743  005796  B4D8               	btfsc	status,2,c
 10744  005798  0012               	return	
 10745  00579A  D7EA               	goto	l6867
 10746  00579C                     __end_of_strcpy:
 10747                           	opt stack 0
 10748                           tblptru	equ	0xFF8
 10749                           tblptrh	equ	0xFF7
 10750                           tblptrl	equ	0xFF6
 10751                           tablat	equ	0xFF5
 10752                           prodh	equ	0xFF4
 10753                           prodl	equ	0xFF3
 10754                           intcon	equ	0xFF2
 10755                           intcon2	equ	0xFF1
 10756                           intcon3	equ	0xFF0
 10757                           postinc0	equ	0xFEE
 10758                           wreg	equ	0xFE8
 10759                           postdec1	equ	0xFE5
 10760                           fsr1l	equ	0xFE1
 10761                           indf2	equ	0xFDF
 10762                           postinc2	equ	0xFDE
 10763                           postdec2	equ	0xFDD
 10764                           fsr2h	equ	0xFDA
 10765                           fsr2l	equ	0xFD9
 10766                           status	equ	0xFD8
 10767                           
 10768 ;; *************** function _getRTC *****************
 10769 ;; Defined at:
 10770 ;;		line 44 in file "RTC.c"
 10771 ;; Parameters:    Size  Location     Type
 10772 ;;		None
 10773 ;; Auto vars:     Size  Location     Type
 10774 ;;  i               2    3[BANK0 ] int 
 10775 ;; Return value:  Size  Location     Type
 10776 ;;                  1    wreg      void 
 10777 ;; Registers used:
 10778 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10779 ;; Tracked objects:
 10780 ;;		On entry : 0/0
 10781 ;;		On exit  : 0/0
 10782 ;;		Unchanged: 0/0
 10783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10785 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10787 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10788 ;;Total ram usage:        2 bytes
 10789 ;; Hardware stack levels used:    1
 10790 ;; Hardware stack levels required when called:    9
 10791 ;; This function calls:
 10792 ;;		_I2C_Master_Read
 10793 ;;		_I2C_Master_Start
 10794 ;;		_I2C_Master_Stop
 10795 ;;		_I2C_Master_Write
 10796 ;; This function is called by:
 10797 ;;		_printRTC
 10798 ;;		_initSortTimer
 10799 ;; This function uses a non-reentrant model
 10800 ;;
 10801                           
 10802                           	psect	text30
 10803  004E04                     __ptext30:
 10804                           	opt stack 0
 10805  004E04                     _getRTC:
 10806                           	opt stack 18
 10807                           
 10808                           ;RTC.c: 48: I2C_Master_Start();
 10809                           
 10810                           ;incstack = 0
 10811  004E04  EC83  F02E         	call	_I2C_Master_Start	;wreg free
 10812                           
 10813                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 10814  004E08  0E00               	movlw	0
 10815  004E0A  0100               	movlb	0	; () banked
 10816  004E0C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10817  004E0E  0ED0               	movlw	208
 10818  004E10  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10819  004E12  EC6D  F02E         	call	_I2C_Master_Write	;wreg free
 10820                           
 10821                           ;RTC.c: 50: I2C_Master_Write(0x00);
 10822  004E16  0E00               	movlw	0
 10823  004E18  0100               	movlb	0	; () banked
 10824  004E1A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10825  004E1C  0E00               	movlw	0
 10826  004E1E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10827  004E20  EC6D  F02E         	call	_I2C_Master_Write	;wreg free
 10828                           
 10829                           ;RTC.c: 51: I2C_Master_Stop();
 10830  004E24  EC7F  F02E         	call	_I2C_Master_Stop	;wreg free
 10831                           
 10832                           ;RTC.c: 54: I2C_Master_Start();
 10833  004E28  EC83  F02E         	call	_I2C_Master_Start	;wreg free
 10834                           
 10835                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 10836  004E2C  0E00               	movlw	0
 10837  004E2E  0100               	movlb	0	; () banked
 10838  004E30  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10839  004E32  0ED1               	movlw	209
 10840  004E34  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10841  004E36  EC6D  F02E         	call	_I2C_Master_Write	;wreg free
 10842                           
 10843                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 10844  004E3A  0E00               	movlw	0
 10845  004E3C  0100               	movlb	0	; () banked
 10846  004E3E  6F84               	movwf	(getRTC@i+1)& (0+255),b
 10847  004E40  0E00               	movlw	0
 10848  004E42  6F83               	movwf	getRTC@i& (0+255),b
 10849  004E44                     l6875:
 10850                           
 10851                           ; BSR set to: 0
 10852  004E44  0100               	movlb	0	; () banked
 10853  004E46  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
 10854  004E48  D008               	goto	l6879
 10855  004E4A  0100               	movlb	0	; () banked
 10856  004E4C  5184               	movf	(getRTC@i+1)& (0+255),w,b
 10857  004E4E  E115               	bnz	l6885
 10858  004E50  0E06               	movlw	6
 10859  004E52  0100               	movlb	0	; () banked
 10860  004E54  5D83               	subwf	getRTC@i& (0+255),w,b
 10861  004E56  B0D8               	btfsc	status,0,c
 10862  004E58  D010               	goto	l6885
 10863  004E5A                     l6879:
 10864                           
 10865                           ; BSR set to: 0
 10866                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 10867  004E5A  0E1C               	movlw	low _time
 10868  004E5C  0100               	movlb	0	; () banked
 10869  004E5E  2583               	addwf	getRTC@i& (0+255),w,b
 10870  004E60  6ED9               	movwf	fsr2l,c
 10871  004E62  0E01               	movlw	high _time
 10872  004E64  0100               	movlb	0	; () banked
 10873  004E66  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
 10874  004E68  6EDA               	movwf	fsr2h,c
 10875  004E6A  0E01               	movlw	1
 10876  004E6C  EC0B  F02D         	call	_I2C_Master_Read
 10877  004E70  6EDF               	movwf	indf2,c
 10878  004E72  0100               	movlb	0	; () banked
 10879  004E74  4B83               	infsnz	getRTC@i& (0+255),f,b
 10880  004E76  2B84               	incf	(getRTC@i+1)& (0+255),f,b
 10881  004E78  D7E5               	goto	l6875
 10882  004E7A                     l6885:
 10883                           
 10884                           ; BSR set to: 0
 10885                           ;RTC.c: 58: }
 10886                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 10887  004E7A  0E00               	movlw	0
 10888  004E7C  EC0B  F02D         	call	_I2C_Master_Read
 10889  004E80  0101               	movlb	1	; () banked
 10890  004E82  6F22               	movwf	(_time+6)& (0+255),b
 10891                           
 10892                           ;RTC.c: 60: I2C_Master_Stop();
 10893  004E84  EC7F  F02E         	call	_I2C_Master_Stop	;wreg free
 10894  004E88  0012               	return		;funcret
 10895  004E8A                     __end_of_getRTC:
 10896                           	opt stack 0
 10897                           tblptru	equ	0xFF8
 10898                           tblptrh	equ	0xFF7
 10899                           tblptrl	equ	0xFF6
 10900                           tablat	equ	0xFF5
 10901                           prodh	equ	0xFF4
 10902                           prodl	equ	0xFF3
 10903                           intcon	equ	0xFF2
 10904                           intcon2	equ	0xFF1
 10905                           intcon3	equ	0xFF0
 10906                           postinc0	equ	0xFEE
 10907                           wreg	equ	0xFE8
 10908                           postdec1	equ	0xFE5
 10909                           fsr1l	equ	0xFE1
 10910                           indf2	equ	0xFDF
 10911                           postinc2	equ	0xFDE
 10912                           postdec2	equ	0xFDD
 10913                           fsr2h	equ	0xFDA
 10914                           fsr2l	equ	0xFD9
 10915                           status	equ	0xFD8
 10916                           
 10917 ;; *************** function _I2C_Master_Write *****************
 10918 ;; Defined at:
 10919 ;;		line 49 in file "I2C.c"
 10920 ;; Parameters:    Size  Location     Type
 10921 ;;  d               2    1[BANK0 ] unsigned int 
 10922 ;; Auto vars:     Size  Location     Type
 10923 ;;		None
 10924 ;; Return value:  Size  Location     Type
 10925 ;;                  1    wreg      void 
 10926 ;; Registers used:
 10927 ;;		wreg, status,2, status,0, cstack
 10928 ;; Tracked objects:
 10929 ;;		On entry : 0/0
 10930 ;;		On exit  : 0/0
 10931 ;;		Unchanged: 0/0
 10932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10933 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10936 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10937 ;;Total ram usage:        2 bytes
 10938 ;; Hardware stack levels used:    1
 10939 ;; Hardware stack levels required when called:    8
 10940 ;; This function calls:
 10941 ;;		_I2C_Master_Wait
 10942 ;; This function is called by:
 10943 ;;		_loadRTC
 10944 ;;		_getRTC
 10945 ;; This function uses a non-reentrant model
 10946 ;;
 10947                           
 10948                           	psect	text31
 10949  005CDA                     __ptext31:
 10950                           	opt stack 0
 10951  005CDA                     _I2C_Master_Write:
 10952                           	opt stack 18
 10953                           
 10954                           ;I2C.c: 51: I2C_Master_Wait();
 10955                           
 10956                           ;incstack = 0
 10957  005CDA  EC3E  F02E         	call	_I2C_Master_Wait	;wreg free
 10958                           
 10959                           ;I2C.c: 52: SSPBUF = d;
 10960  005CDE  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 10961  005CE2  0012               	return		;funcret
 10962  005CE4                     __end_of_I2C_Master_Write:
 10963                           	opt stack 0
 10964                           tblptru	equ	0xFF8
 10965                           tblptrh	equ	0xFF7
 10966                           tblptrl	equ	0xFF6
 10967                           tablat	equ	0xFF5
 10968                           prodh	equ	0xFF4
 10969                           prodl	equ	0xFF3
 10970                           intcon	equ	0xFF2
 10971                           intcon2	equ	0xFF1
 10972                           intcon3	equ	0xFF0
 10973                           postinc0	equ	0xFEE
 10974                           wreg	equ	0xFE8
 10975                           postdec1	equ	0xFE5
 10976                           fsr1l	equ	0xFE1
 10977                           indf2	equ	0xFDF
 10978                           postinc2	equ	0xFDE
 10979                           postdec2	equ	0xFDD
 10980                           fsr2h	equ	0xFDA
 10981                           fsr2l	equ	0xFD9
 10982                           status	equ	0xFD8
 10983                           
 10984 ;; *************** function _I2C_Master_Stop *****************
 10985 ;; Defined at:
 10986 ;;		line 43 in file "I2C.c"
 10987 ;; Parameters:    Size  Location     Type
 10988 ;;		None
 10989 ;; Auto vars:     Size  Location     Type
 10990 ;;		None
 10991 ;; Return value:  Size  Location     Type
 10992 ;;                  1    wreg      void 
 10993 ;; Registers used:
 10994 ;;		wreg, status,2, status,0, cstack
 10995 ;; Tracked objects:
 10996 ;;		On entry : 0/0
 10997 ;;		On exit  : 0/0
 10998 ;;		Unchanged: 0/0
 10999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11004 ;;Total ram usage:        0 bytes
 11005 ;; Hardware stack levels used:    1
 11006 ;; Hardware stack levels required when called:    8
 11007 ;; This function calls:
 11008 ;;		_I2C_Master_Wait
 11009 ;; This function is called by:
 11010 ;;		_loadRTC
 11011 ;;		_getRTC
 11012 ;; This function uses a non-reentrant model
 11013 ;;
 11014                           
 11015                           	psect	text32
 11016  005CFE                     __ptext32:
 11017                           	opt stack 0
 11018  005CFE                     _I2C_Master_Stop:
 11019                           	opt stack 18
 11020                           
 11021                           ;I2C.c: 45: I2C_Master_Wait();
 11022                           
 11023                           ;incstack = 0
 11024  005CFE  EC3E  F02E         	call	_I2C_Master_Wait	;wreg free
 11025                           
 11026                           ;I2C.c: 46: PEN = 1;
 11027  005D02  84C5               	bsf	4037,2,c	;volatile
 11028  005D04  0012               	return		;funcret
 11029  005D06                     __end_of_I2C_Master_Stop:
 11030                           	opt stack 0
 11031                           tblptru	equ	0xFF8
 11032                           tblptrh	equ	0xFF7
 11033                           tblptrl	equ	0xFF6
 11034                           tablat	equ	0xFF5
 11035                           prodh	equ	0xFF4
 11036                           prodl	equ	0xFF3
 11037                           intcon	equ	0xFF2
 11038                           intcon2	equ	0xFF1
 11039                           intcon3	equ	0xFF0
 11040                           postinc0	equ	0xFEE
 11041                           wreg	equ	0xFE8
 11042                           postdec1	equ	0xFE5
 11043                           fsr1l	equ	0xFE1
 11044                           indf2	equ	0xFDF
 11045                           postinc2	equ	0xFDE
 11046                           postdec2	equ	0xFDD
 11047                           fsr2h	equ	0xFDA
 11048                           fsr2l	equ	0xFD9
 11049                           status	equ	0xFD8
 11050                           
 11051 ;; *************** function _I2C_Master_Start *****************
 11052 ;; Defined at:
 11053 ;;		line 31 in file "I2C.c"
 11054 ;; Parameters:    Size  Location     Type
 11055 ;;		None
 11056 ;; Auto vars:     Size  Location     Type
 11057 ;;		None
 11058 ;; Return value:  Size  Location     Type
 11059 ;;                  1    wreg      void 
 11060 ;; Registers used:
 11061 ;;		wreg, status,2, status,0, cstack
 11062 ;; Tracked objects:
 11063 ;;		On entry : 0/0
 11064 ;;		On exit  : 0/0
 11065 ;;		Unchanged: 0/0
 11066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11071 ;;Total ram usage:        0 bytes
 11072 ;; Hardware stack levels used:    1
 11073 ;; Hardware stack levels required when called:    8
 11074 ;; This function calls:
 11075 ;;		_I2C_Master_Wait
 11076 ;; This function is called by:
 11077 ;;		_loadRTC
 11078 ;;		_getRTC
 11079 ;; This function uses a non-reentrant model
 11080 ;;
 11081                           
 11082                           	psect	text33
 11083  005D06                     __ptext33:
 11084                           	opt stack 0
 11085  005D06                     _I2C_Master_Start:
 11086                           	opt stack 18
 11087                           
 11088                           ;I2C.c: 33: I2C_Master_Wait();
 11089                           
 11090                           ;incstack = 0
 11091  005D06  EC3E  F02E         	call	_I2C_Master_Wait	;wreg free
 11092                           
 11093                           ;I2C.c: 34: SEN = 1;
 11094  005D0A  80C5               	bsf	4037,0,c	;volatile
 11095  005D0C  0012               	return		;funcret
 11096  005D0E                     __end_of_I2C_Master_Start:
 11097                           	opt stack 0
 11098                           tblptru	equ	0xFF8
 11099                           tblptrh	equ	0xFF7
 11100                           tblptrl	equ	0xFF6
 11101                           tablat	equ	0xFF5
 11102                           prodh	equ	0xFF4
 11103                           prodl	equ	0xFF3
 11104                           intcon	equ	0xFF2
 11105                           intcon2	equ	0xFF1
 11106                           intcon3	equ	0xFF0
 11107                           postinc0	equ	0xFEE
 11108                           wreg	equ	0xFE8
 11109                           postdec1	equ	0xFE5
 11110                           fsr1l	equ	0xFE1
 11111                           indf2	equ	0xFDF
 11112                           postinc2	equ	0xFDE
 11113                           postdec2	equ	0xFDD
 11114                           fsr2h	equ	0xFDA
 11115                           fsr2l	equ	0xFD9
 11116                           status	equ	0xFD8
 11117                           
 11118 ;; *************** function _I2C_Master_Read *****************
 11119 ;; Defined at:
 11120 ;;		line 55 in file "I2C.c"
 11121 ;; Parameters:    Size  Location     Type
 11122 ;;  a               1    wreg     unsigned char 
 11123 ;; Auto vars:     Size  Location     Type
 11124 ;;  a               1    1[BANK0 ] unsigned char 
 11125 ;;  temp            1    2[BANK0 ] unsigned char 
 11126 ;; Return value:  Size  Location     Type
 11127 ;;                  1    wreg      unsigned char 
 11128 ;; Registers used:
 11129 ;;		wreg, status,2, status,0, cstack
 11130 ;; Tracked objects:
 11131 ;;		On entry : 0/0
 11132 ;;		On exit  : 0/0
 11133 ;;		Unchanged: 0/0
 11134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11136 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11138 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11139 ;;Total ram usage:        2 bytes
 11140 ;; Hardware stack levels used:    1
 11141 ;; Hardware stack levels required when called:    8
 11142 ;; This function calls:
 11143 ;;		_I2C_Master_Wait
 11144 ;; This function is called by:
 11145 ;;		_getRTC
 11146 ;; This function uses a non-reentrant model
 11147 ;;
 11148                           
 11149                           	psect	text34
 11150  005A16                     __ptext34:
 11151                           	opt stack 0
 11152  005A16                     _I2C_Master_Read:
 11153                           	opt stack 18
 11154                           
 11155                           ;incstack = 0
 11156                           ;I2C_Master_Read@a stored from wreg
 11157  005A16  0100               	movlb	0	; () banked
 11158  005A18  6F81               	movwf	I2C_Master_Read@a& (0+255),b
 11159                           
 11160                           ;I2C.c: 57: unsigned char temp;
 11161                           ;I2C.c: 58: I2C_Master_Wait();
 11162  005A1A  EC3E  F02E         	call	_I2C_Master_Wait	;wreg free
 11163                           
 11164                           ;I2C.c: 59: RCEN = 1;
 11165  005A1E  86C5               	bsf	4037,3,c	;volatile
 11166                           
 11167                           ;I2C.c: 60: I2C_Master_Wait();
 11168  005A20  EC3E  F02E         	call	_I2C_Master_Wait	;wreg free
 11169                           
 11170                           ;I2C.c: 61: temp = SSPBUF;
 11171  005A24  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
 11172                           
 11173                           ;I2C.c: 62: I2C_Master_Wait();
 11174  005A28  EC3E  F02E         	call	_I2C_Master_Wait	;wreg free
 11175                           
 11176                           ;I2C.c: 63: ACKDT = (a)?0:1;
 11177  005A2C  0100               	movlb	0	; () banked
 11178  005A2E  5181               	movf	I2C_Master_Read@a& (0+255),w,b
 11179  005A30  0100               	movlb	0	; () banked
 11180  005A32  A4D8               	btfss	status,2,c
 11181  005A34  D002               	goto	u4940
 11182  005A36  8AC5               	bsf	4037,5,c	;volatile
 11183  005A38  D001               	goto	l6563
 11184  005A3A                     u4940:
 11185  005A3A  9AC5               	bcf	4037,5,c	;volatile
 11186  005A3C                     l6563:
 11187                           
 11188                           ;I2C.c: 64: ACKEN = 1;
 11189  005A3C  88C5               	bsf	4037,4,c	;volatile
 11190                           
 11191                           ;I2C.c: 65: return temp;
 11192  005A3E  0100               	movlb	0	; () banked
 11193  005A40  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
 11194  005A42  0012               	return	
 11195  005A44                     __end_of_I2C_Master_Read:
 11196                           	opt stack 0
 11197                           tblptru	equ	0xFF8
 11198                           tblptrh	equ	0xFF7
 11199                           tblptrl	equ	0xFF6
 11200                           tablat	equ	0xFF5
 11201                           prodh	equ	0xFF4
 11202                           prodl	equ	0xFF3
 11203                           intcon	equ	0xFF2
 11204                           intcon2	equ	0xFF1
 11205                           intcon3	equ	0xFF0
 11206                           postinc0	equ	0xFEE
 11207                           wreg	equ	0xFE8
 11208                           postdec1	equ	0xFE5
 11209                           fsr1l	equ	0xFE1
 11210                           indf2	equ	0xFDF
 11211                           postinc2	equ	0xFDE
 11212                           postdec2	equ	0xFDD
 11213                           fsr2h	equ	0xFDA
 11214                           fsr2l	equ	0xFD9
 11215                           status	equ	0xFD8
 11216                           
 11217 ;; *************** function _I2C_Master_Wait *****************
 11218 ;; Defined at:
 11219 ;;		line 26 in file "I2C.c"
 11220 ;; Parameters:    Size  Location     Type
 11221 ;;		None
 11222 ;; Auto vars:     Size  Location     Type
 11223 ;;		None
 11224 ;; Return value:  Size  Location     Type
 11225 ;;                  1    wreg      void 
 11226 ;; Registers used:
 11227 ;;		wreg, status,2, status,0
 11228 ;; Tracked objects:
 11229 ;;		On entry : 0/0
 11230 ;;		On exit  : 0/0
 11231 ;;		Unchanged: 0/0
 11232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11235 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11236 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11237 ;;Total ram usage:        1 bytes
 11238 ;; Hardware stack levels used:    1
 11239 ;; Hardware stack levels required when called:    7
 11240 ;; This function calls:
 11241 ;;		Nothing
 11242 ;; This function is called by:
 11243 ;;		_I2C_Master_Start
 11244 ;;		_I2C_Master_Stop
 11245 ;;		_I2C_Master_Write
 11246 ;;		_I2C_Master_Read
 11247 ;;		_I2C_Master_RepeatedStart
 11248 ;; This function uses a non-reentrant model
 11249 ;;
 11250                           
 11251                           	psect	text35
 11252  005C7C                     __ptext35:
 11253                           	opt stack 0
 11254  005C7C                     _I2C_Master_Wait:
 11255                           	opt stack 18
 11256  005C7C                     l71:
 11257  005C7C  B4C7               	btfsc	4039,2,c	;volatile
 11258  005C7E  D7FE               	goto	l71
 11259  005C80  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
 11260  005C84  0E1F               	movlw	31
 11261  005C86  0100               	movlb	0	; () banked
 11262  005C88  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
 11263  005C8A  B4D8               	btfsc	status,2,c
 11264  005C8C  0012               	return	
 11265  005C8E  D7F6               	goto	l71
 11266  005C90                     __end_of_I2C_Master_Wait:
 11267                           	opt stack 0
 11268                           tblptru	equ	0xFF8
 11269                           tblptrh	equ	0xFF7
 11270                           tblptrl	equ	0xFF6
 11271                           tablat	equ	0xFF5
 11272                           prodh	equ	0xFF4
 11273                           prodl	equ	0xFF3
 11274                           intcon	equ	0xFF2
 11275                           intcon2	equ	0xFF1
 11276                           intcon3	equ	0xFF0
 11277                           postinc0	equ	0xFEE
 11278                           wreg	equ	0xFE8
 11279                           postdec1	equ	0xFE5
 11280                           fsr1l	equ	0xFE1
 11281                           indf2	equ	0xFDF
 11282                           postinc2	equ	0xFDE
 11283                           postdec2	equ	0xFDD
 11284                           fsr2h	equ	0xFDA
 11285                           fsr2l	equ	0xFD9
 11286                           status	equ	0xFD8
 11287                           
 11288 ;; *************** function _change_state_to_menu_22 *****************
 11289 ;; Defined at:
 11290 ;;		line 501 in file "UI.c"
 11291 ;; Parameters:    Size  Location     Type
 11292 ;;		None
 11293 ;; Auto vars:     Size  Location     Type
 11294 ;;		None
 11295 ;; Return value:  Size  Location     Type
 11296 ;;                  1    wreg      void 
 11297 ;; Registers used:
 11298 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11299 ;; Tracked objects:
 11300 ;;		On entry : 0/0
 11301 ;;		On exit  : 0/0
 11302 ;;		Unchanged: 0/0
 11303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11308 ;;Total ram usage:        0 bytes
 11309 ;; Hardware stack levels used:    1
 11310 ;; Hardware stack levels required when called:   10
 11311 ;; This function calls:
 11312 ;;		_lcdInst
 11313 ;;		_printf
 11314 ;; This function is called by:
 11315 ;;		_UI
 11316 ;; This function uses a non-reentrant model
 11317 ;;
 11318                           
 11319                           	psect	text36
 11320  0056F6                     __ptext36:
 11321                           	opt stack 0
 11322  0056F6                     _change_state_to_menu_22:
 11323                           	opt stack 19
 11324                           
 11325                           ;UI.c: 502: cur_state = 22;
 11326                           
 11327                           ; BSR set to: 0
 11328                           ;incstack = 0
 11329  0056F6  0E00               	movlw	0
 11330  0056F8  0100               	movlb	0	; () banked
 11331  0056FA  6FE7               	movwf	(_cur_state+1)& (0+255),b
 11332  0056FC  0E16               	movlw	22
 11333  0056FE  6FE6               	movwf	_cur_state& (0+255),b
 11334                           
 11335                           ; BSR set to: 0
 11336                           ;UI.c: 504: lcdInst(0b10000000);;
 11337  005700  0E80               	movlw	128
 11338  005702  EC59  F02E         	call	_lcdInst
 11339                           
 11340                           ;UI.c: 505: printf("2. SORT        <");
 11341  005706  0ED8               	movlw	low STR_34
 11342  005708  0100               	movlb	0	; () banked
 11343  00570A  6F8E               	movwf	printf@f& (0+255),b
 11344  00570C  0EFD               	movlw	high STR_34
 11345  00570E  0100               	movlb	0	; () banked
 11346  005710  6F8F               	movwf	(printf@f+1)& (0+255),b
 11347  005712  EC15  F00E         	call	_printf	;wreg free
 11348                           
 11349                           ;UI.c: 506: lcdInst(0b11000000);;
 11350  005716  0EC0               	movlw	192
 11351  005718  EC59  F02E         	call	_lcdInst
 11352                           
 11353                           ;UI.c: 507: printf("3. LOGS         ");
 11354  00571C  0E1D               	movlw	low STR_36
 11355  00571E  0100               	movlb	0	; () banked
 11356  005720  6F8E               	movwf	printf@f& (0+255),b
 11357  005722  0EFD               	movlw	high STR_36
 11358  005724  0100               	movlb	0	; () banked
 11359  005726  6F8F               	movwf	(printf@f+1)& (0+255),b
 11360  005728  EC15  F00E         	call	_printf	;wreg free
 11361  00572C  0012               	return		;funcret
 11362  00572E                     __end_of_change_state_to_menu_22:
 11363                           	opt stack 0
 11364                           tblptru	equ	0xFF8
 11365                           tblptrh	equ	0xFF7
 11366                           tblptrl	equ	0xFF6
 11367                           tablat	equ	0xFF5
 11368                           prodh	equ	0xFF4
 11369                           prodl	equ	0xFF3
 11370                           intcon	equ	0xFF2
 11371                           intcon2	equ	0xFF1
 11372                           intcon3	equ	0xFF0
 11373                           postinc0	equ	0xFEE
 11374                           wreg	equ	0xFE8
 11375                           postdec1	equ	0xFE5
 11376                           fsr1l	equ	0xFE1
 11377                           indf2	equ	0xFDF
 11378                           postinc2	equ	0xFDE
 11379                           postdec2	equ	0xFDD
 11380                           fsr2h	equ	0xFDA
 11381                           fsr2l	equ	0xFD9
 11382                           status	equ	0xFD8
 11383                           
 11384 ;; *************** function _change_state_to_menu_12 *****************
 11385 ;; Defined at:
 11386 ;;		line 493 in file "UI.c"
 11387 ;; Parameters:    Size  Location     Type
 11388 ;;		None
 11389 ;; Auto vars:     Size  Location     Type
 11390 ;;		None
 11391 ;; Return value:  Size  Location     Type
 11392 ;;                  1    wreg      void 
 11393 ;; Registers used:
 11394 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11395 ;; Tracked objects:
 11396 ;;		On entry : 0/0
 11397 ;;		On exit  : 0/0
 11398 ;;		Unchanged: 0/0
 11399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11404 ;;Total ram usage:        0 bytes
 11405 ;; Hardware stack levels used:    1
 11406 ;; Hardware stack levels required when called:   10
 11407 ;; This function calls:
 11408 ;;		_lcdInst
 11409 ;;		_printf
 11410 ;; This function is called by:
 11411 ;;		_UI
 11412 ;; This function uses a non-reentrant model
 11413 ;;
 11414                           
 11415                           	psect	text37
 11416  00572E                     __ptext37:
 11417                           	opt stack 0
 11418  00572E                     _change_state_to_menu_12:
 11419                           	opt stack 19
 11420                           
 11421                           ;UI.c: 494: cur_state = 12;
 11422                           
 11423                           ;incstack = 0
 11424  00572E  0E00               	movlw	0
 11425  005730  0100               	movlb	0	; () banked
 11426  005732  6FE7               	movwf	(_cur_state+1)& (0+255),b
 11427  005734  0E0C               	movlw	12
 11428  005736  6FE6               	movwf	_cur_state& (0+255),b
 11429                           
 11430                           ; BSR set to: 0
 11431                           ;UI.c: 496: lcdInst(0b10000000);;
 11432  005738  0E80               	movlw	128
 11433  00573A  EC59  F02E         	call	_lcdInst
 11434                           
 11435                           ;UI.c: 497: printf("1. DATE/TIME    ");
 11436  00573E  0E3F               	movlw	low STR_33
 11437  005740  0100               	movlb	0	; () banked
 11438  005742  6F8E               	movwf	printf@f& (0+255),b
 11439  005744  0EFD               	movlw	high STR_33
 11440  005746  0100               	movlb	0	; () banked
 11441  005748  6F8F               	movwf	(printf@f+1)& (0+255),b
 11442  00574A  EC15  F00E         	call	_printf	;wreg free
 11443                           
 11444                           ;UI.c: 498: lcdInst(0b11000000);;
 11445  00574E  0EC0               	movlw	192
 11446  005750  EC59  F02E         	call	_lcdInst
 11447                           
 11448                           ;UI.c: 499: printf("2. SORT        <");
 11449  005754  0ED8               	movlw	low STR_34
 11450  005756  0100               	movlb	0	; () banked
 11451  005758  6F8E               	movwf	printf@f& (0+255),b
 11452  00575A  0EFD               	movlw	high STR_34
 11453  00575C  0100               	movlb	0	; () banked
 11454  00575E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11455  005760  EC15  F00E         	call	_printf	;wreg free
 11456  005764  0012               	return		;funcret
 11457  005766                     __end_of_change_state_to_menu_12:
 11458                           	opt stack 0
 11459                           tblptru	equ	0xFF8
 11460                           tblptrh	equ	0xFF7
 11461                           tblptrl	equ	0xFF6
 11462                           tablat	equ	0xFF5
 11463                           prodh	equ	0xFF4
 11464                           prodl	equ	0xFF3
 11465                           intcon	equ	0xFF2
 11466                           intcon2	equ	0xFF1
 11467                           intcon3	equ	0xFF0
 11468                           postinc0	equ	0xFEE
 11469                           wreg	equ	0xFE8
 11470                           postdec1	equ	0xFE5
 11471                           fsr1l	equ	0xFE1
 11472                           indf2	equ	0xFDF
 11473                           postinc2	equ	0xFDE
 11474                           postdec2	equ	0xFDD
 11475                           fsr2h	equ	0xFDA
 11476                           fsr2l	equ	0xFD9
 11477                           status	equ	0xFD8
 11478                           
 11479 ;; *************** function ___awmod *****************
 11480 ;; Defined at:
 11481 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 11482 ;; Parameters:    Size  Location     Type
 11483 ;;  dividend        2    0[BANK0 ] int 
 11484 ;;  divisor         2    2[BANK0 ] int 
 11485 ;; Auto vars:     Size  Location     Type
 11486 ;;  sign            1    5[BANK0 ] unsigned char 
 11487 ;;  counter         1    4[BANK0 ] unsigned char 
 11488 ;; Return value:  Size  Location     Type
 11489 ;;                  2    0[BANK0 ] int 
 11490 ;; Registers used:
 11491 ;;		wreg, status,2, status,0
 11492 ;; Tracked objects:
 11493 ;;		On entry : 0/0
 11494 ;;		On exit  : 0/0
 11495 ;;		Unchanged: 0/0
 11496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11497 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11498 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11500 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11501 ;;Total ram usage:        6 bytes
 11502 ;; Hardware stack levels used:    1
 11503 ;; Hardware stack levels required when called:    7
 11504 ;; This function calls:
 11505 ;;		Nothing
 11506 ;; This function is called by:
 11507 ;;		_UI
 11508 ;; This function uses a non-reentrant model
 11509 ;;
 11510                           
 11511                           	psect	text38
 11512  004CD6                     __ptext38:
 11513                           	opt stack 0
 11514  004CD6                     ___awmod:
 11515                           	opt stack 22
 11516                           
 11517                           ;incstack = 0
 11518  004CD6  0E00               	movlw	0
 11519  004CD8  0100               	movlb	0	; () banked
 11520  004CDA  6F85               	movwf	___awmod@sign& (0+255),b
 11521                           
 11522                           ; BSR set to: 0
 11523  004CDC  0100               	movlb	0	; () banked
 11524  004CDE  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 11525  004CE0  D008               	goto	l9209
 11526                           
 11527                           ; BSR set to: 0
 11528  004CE2  0100               	movlb	0	; () banked
 11529  004CE4  6D80               	negf	___awmod@dividend& (0+255),b
 11530  004CE6  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11531  004CE8  B0D8               	btfsc	status,0,c
 11532  004CEA  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11533                           
 11534                           ; BSR set to: 0
 11535  004CEC  0E01               	movlw	1
 11536  004CEE  0100               	movlb	0	; () banked
 11537  004CF0  6F85               	movwf	___awmod@sign& (0+255),b
 11538  004CF2                     l9209:
 11539                           
 11540                           ; BSR set to: 0
 11541  004CF2  0100               	movlb	0	; () banked
 11542  004CF4  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11543  004CF6  D005               	goto	l9213
 11544                           
 11545                           ; BSR set to: 0
 11546  004CF8  0100               	movlb	0	; () banked
 11547  004CFA  6D82               	negf	___awmod@divisor& (0+255),b
 11548  004CFC  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 11549  004CFE  B0D8               	btfsc	status,0,c
 11550  004D00  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 11551  004D02                     l9213:
 11552                           
 11553                           ; BSR set to: 0
 11554  004D02  0100               	movlb	0	; () banked
 11555  004D04  5182               	movf	___awmod@divisor& (0+255),w,b
 11556  004D06  0100               	movlb	0	; () banked
 11557  004D08  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 11558  004D0A  B4D8               	btfsc	status,2,c
 11559  004D0C  D026               	goto	l9229
 11560                           
 11561                           ; BSR set to: 0
 11562  004D0E  0E01               	movlw	1
 11563  004D10  0100               	movlb	0	; () banked
 11564  004D12  6F84               	movwf	___awmod@counter& (0+255),b
 11565  004D14  D006               	goto	l9219
 11566  004D16                     l9217:
 11567                           
 11568                           ; BSR set to: 0
 11569  004D16  0100               	movlb	0	; () banked
 11570  004D18  90D8               	bcf	status,0,c
 11571  004D1A  3782               	rlcf	___awmod@divisor& (0+255),f,b
 11572  004D1C  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 11573  004D1E  0100               	movlb	0	; () banked
 11574  004D20  2B84               	incf	___awmod@counter& (0+255),f,b
 11575  004D22                     l9219:
 11576                           
 11577                           ; BSR set to: 0
 11578  004D22  0100               	movlb	0	; () banked
 11579  004D24  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11580  004D26  D7F7               	goto	l9217
 11581  004D28                     l9221:
 11582                           
 11583                           ; BSR set to: 0
 11584  004D28  0100               	movlb	0	; () banked
 11585  004D2A  5182               	movf	___awmod@divisor& (0+255),w,b
 11586  004D2C  0100               	movlb	0	; () banked
 11587  004D2E  5D80               	subwf	___awmod@dividend& (0+255),w,b
 11588  004D30  0100               	movlb	0	; () banked
 11589  004D32  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 11590  004D34  0100               	movlb	0	; () banked
 11591  004D36  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 11592  004D38  A0D8               	btfss	status,0,c
 11593  004D3A  D008               	goto	l9225
 11594                           
 11595                           ; BSR set to: 0
 11596  004D3C  0100               	movlb	0	; () banked
 11597  004D3E  5182               	movf	___awmod@divisor& (0+255),w,b
 11598  004D40  0100               	movlb	0	; () banked
 11599  004D42  5F80               	subwf	___awmod@dividend& (0+255),f,b
 11600  004D44  0100               	movlb	0	; () banked
 11601  004D46  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 11602  004D48  0100               	movlb	0	; () banked
 11603  004D4A  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 11604  004D4C                     l9225:
 11605                           
 11606                           ; BSR set to: 0
 11607  004D4C  0100               	movlb	0	; () banked
 11608  004D4E  90D8               	bcf	status,0,c
 11609  004D50  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 11610  004D52  3382               	rrcf	___awmod@divisor& (0+255),f,b
 11611                           
 11612                           ; BSR set to: 0
 11613  004D54  0100               	movlb	0	; () banked
 11614  004D56  2F84               	decfsz	___awmod@counter& (0+255),f,b
 11615  004D58  D7E7               	goto	l9221
 11616  004D5A                     l9229:
 11617                           
 11618                           ; BSR set to: 0
 11619  004D5A  0100               	movlb	0	; () banked
 11620  004D5C  5185               	movf	___awmod@sign& (0+255),w,b
 11621  004D5E  0100               	movlb	0	; () banked
 11622  004D60  B4D8               	btfsc	status,2,c
 11623  004D62  D005               	goto	l9233
 11624                           
 11625                           ; BSR set to: 0
 11626  004D64  0100               	movlb	0	; () banked
 11627  004D66  6D80               	negf	___awmod@dividend& (0+255),b
 11628  004D68  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11629  004D6A  B0D8               	btfsc	status,0,c
 11630  004D6C  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11631  004D6E                     l9233:
 11632                           
 11633                           ; BSR set to: 0
 11634  004D6E  C080  F080         	movff	___awmod@dividend,?___awmod
 11635  004D72  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 11636  004D76  0012               	return	
 11637  004D78                     __end_of___awmod:
 11638                           	opt stack 0
 11639                           tblptru	equ	0xFF8
 11640                           tblptrh	equ	0xFF7
 11641                           tblptrl	equ	0xFF6
 11642                           tablat	equ	0xFF5
 11643                           prodh	equ	0xFF4
 11644                           prodl	equ	0xFF3
 11645                           intcon	equ	0xFF2
 11646                           intcon2	equ	0xFF1
 11647                           intcon3	equ	0xFF0
 11648                           postinc0	equ	0xFEE
 11649                           wreg	equ	0xFE8
 11650                           postdec1	equ	0xFE5
 11651                           fsr1l	equ	0xFE1
 11652                           indf2	equ	0xFDF
 11653                           postinc2	equ	0xFDE
 11654                           postdec2	equ	0xFDD
 11655                           fsr2h	equ	0xFDA
 11656                           fsr2l	equ	0xFD9
 11657                           status	equ	0xFD8
 11658                           
 11659 ;; *************** function ___awdiv *****************
 11660 ;; Defined at:
 11661 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 11662 ;; Parameters:    Size  Location     Type
 11663 ;;  dividend        2    6[BANK0 ] int 
 11664 ;;  divisor         2    8[BANK0 ] int 
 11665 ;; Auto vars:     Size  Location     Type
 11666 ;;  quotient        2   12[BANK0 ] int 
 11667 ;;  sign            1   11[BANK0 ] unsigned char 
 11668 ;;  counter         1   10[BANK0 ] unsigned char 
 11669 ;; Return value:  Size  Location     Type
 11670 ;;                  2    6[BANK0 ] int 
 11671 ;; Registers used:
 11672 ;;		wreg, status,2, status,0
 11673 ;; Tracked objects:
 11674 ;;		On entry : 0/0
 11675 ;;		On exit  : 0/0
 11676 ;;		Unchanged: 0/0
 11677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11678 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11679 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11681 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11682 ;;Total ram usage:        8 bytes
 11683 ;; Hardware stack levels used:    1
 11684 ;; Hardware stack levels required when called:    7
 11685 ;; This function calls:
 11686 ;;		Nothing
 11687 ;; This function is called by:
 11688 ;;		_UI
 11689 ;;		_ID
 11690 ;; This function uses a non-reentrant model
 11691 ;;
 11692                           
 11693                           	psect	text39
 11694  004AB2                     __ptext39:
 11695                           	opt stack 0
 11696  004AB2                     ___awdiv:
 11697                           	opt stack 21
 11698                           
 11699                           ; BSR set to: 0
 11700                           ;incstack = 0
 11701  004AB2  0E00               	movlw	0
 11702  004AB4  0100               	movlb	0	; () banked
 11703  004AB6  6F8B               	movwf	___awdiv@sign& (0+255),b
 11704                           
 11705                           ; BSR set to: 0
 11706  004AB8  0100               	movlb	0	; () banked
 11707  004ABA  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 11708  004ABC  D008               	goto	l7491
 11709                           
 11710                           ; BSR set to: 0
 11711  004ABE  0100               	movlb	0	; () banked
 11712  004AC0  6D88               	negf	___awdiv@divisor& (0+255),b
 11713  004AC2  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 11714  004AC4  B0D8               	btfsc	status,0,c
 11715  004AC6  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 11716                           
 11717                           ; BSR set to: 0
 11718  004AC8  0E01               	movlw	1
 11719  004ACA  0100               	movlb	0	; () banked
 11720  004ACC  6F8B               	movwf	___awdiv@sign& (0+255),b
 11721  004ACE                     l7491:
 11722                           
 11723                           ; BSR set to: 0
 11724  004ACE  0100               	movlb	0	; () banked
 11725  004AD0  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 11726  004AD2  D008               	goto	l7497
 11727                           
 11728                           ; BSR set to: 0
 11729  004AD4  0100               	movlb	0	; () banked
 11730  004AD6  6D86               	negf	___awdiv@dividend& (0+255),b
 11731  004AD8  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 11732  004ADA  B0D8               	btfsc	status,0,c
 11733  004ADC  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 11734                           
 11735                           ; BSR set to: 0
 11736  004ADE  0E01               	movlw	1
 11737  004AE0  0100               	movlb	0	; () banked
 11738  004AE2  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 11739  004AE4                     l7497:
 11740                           
 11741                           ; BSR set to: 0
 11742  004AE4  0E00               	movlw	0
 11743  004AE6  0100               	movlb	0	; () banked
 11744  004AE8  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 11745  004AEA  0E00               	movlw	0
 11746  004AEC  6F8C               	movwf	___awdiv@quotient& (0+255),b
 11747                           
 11748                           ; BSR set to: 0
 11749  004AEE  0100               	movlb	0	; () banked
 11750  004AF0  5188               	movf	___awdiv@divisor& (0+255),w,b
 11751  004AF2  0100               	movlb	0	; () banked
 11752  004AF4  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 11753  004AF6  B4D8               	btfsc	status,2,c
 11754  004AF8  D02C               	goto	l7519
 11755                           
 11756                           ; BSR set to: 0
 11757  004AFA  0E01               	movlw	1
 11758  004AFC  0100               	movlb	0	; () banked
 11759  004AFE  6F8A               	movwf	___awdiv@counter& (0+255),b
 11760  004B00  D006               	goto	l7505
 11761  004B02                     l7503:
 11762                           
 11763                           ; BSR set to: 0
 11764  004B02  0100               	movlb	0	; () banked
 11765  004B04  90D8               	bcf	status,0,c
 11766  004B06  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 11767  004B08  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 11768  004B0A  0100               	movlb	0	; () banked
 11769  004B0C  2B8A               	incf	___awdiv@counter& (0+255),f,b
 11770  004B0E                     l7505:
 11771                           
 11772                           ; BSR set to: 0
 11773  004B0E  0100               	movlb	0	; () banked
 11774  004B10  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 11775  004B12  D7F7               	goto	l7503
 11776  004B14                     l7507:
 11777                           
 11778                           ; BSR set to: 0
 11779  004B14  0100               	movlb	0	; () banked
 11780  004B16  90D8               	bcf	status,0,c
 11781  004B18  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 11782  004B1A  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 11783                           
 11784                           ; BSR set to: 0
 11785  004B1C  0100               	movlb	0	; () banked
 11786  004B1E  5188               	movf	___awdiv@divisor& (0+255),w,b
 11787  004B20  0100               	movlb	0	; () banked
 11788  004B22  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 11789  004B24  0100               	movlb	0	; () banked
 11790  004B26  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 11791  004B28  0100               	movlb	0	; () banked
 11792  004B2A  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 11793  004B2C  A0D8               	btfss	status,0,c
 11794  004B2E  D00A               	goto	l7515
 11795                           
 11796                           ; BSR set to: 0
 11797  004B30  0100               	movlb	0	; () banked
 11798  004B32  5188               	movf	___awdiv@divisor& (0+255),w,b
 11799  004B34  0100               	movlb	0	; () banked
 11800  004B36  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 11801  004B38  0100               	movlb	0	; () banked
 11802  004B3A  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 11803  004B3C  0100               	movlb	0	; () banked
 11804  004B3E  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 11805                           
 11806                           ; BSR set to: 0
 11807  004B40  0100               	movlb	0	; () banked
 11808  004B42  818C               	bsf	___awdiv@quotient& (0+255),0,b
 11809  004B44                     l7515:
 11810                           
 11811                           ; BSR set to: 0
 11812  004B44  0100               	movlb	0	; () banked
 11813  004B46  90D8               	bcf	status,0,c
 11814  004B48  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 11815  004B4A  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 11816                           
 11817                           ; BSR set to: 0
 11818  004B4C  0100               	movlb	0	; () banked
 11819  004B4E  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 11820  004B50  D7E1               	goto	l7507
 11821  004B52                     l7519:
 11822                           
 11823                           ; BSR set to: 0
 11824  004B52  0100               	movlb	0	; () banked
 11825  004B54  518B               	movf	___awdiv@sign& (0+255),w,b
 11826  004B56  0100               	movlb	0	; () banked
 11827  004B58  B4D8               	btfsc	status,2,c
 11828  004B5A  D005               	goto	l7523
 11829                           
 11830                           ; BSR set to: 0
 11831  004B5C  0100               	movlb	0	; () banked
 11832  004B5E  6D8C               	negf	___awdiv@quotient& (0+255),b
 11833  004B60  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 11834  004B62  B0D8               	btfsc	status,0,c
 11835  004B64  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 11836  004B66                     l7523:
 11837                           
 11838                           ; BSR set to: 0
 11839  004B66  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 11840  004B6A  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 11841  004B6E  0012               	return	
 11842  004B70                     __end_of___awdiv:
 11843                           	opt stack 0
 11844                           tblptru	equ	0xFF8
 11845                           tblptrh	equ	0xFF7
 11846                           tblptrl	equ	0xFF6
 11847                           tablat	equ	0xFF5
 11848                           prodh	equ	0xFF4
 11849                           prodl	equ	0xFF3
 11850                           intcon	equ	0xFF2
 11851                           intcon2	equ	0xFF1
 11852                           intcon3	equ	0xFF0
 11853                           postinc0	equ	0xFEE
 11854                           wreg	equ	0xFE8
 11855                           postdec1	equ	0xFE5
 11856                           fsr1l	equ	0xFE1
 11857                           indf2	equ	0xFDF
 11858                           postinc2	equ	0xFDE
 11859                           postdec2	equ	0xFDD
 11860                           fsr2h	equ	0xFDA
 11861                           fsr2l	equ	0xFD9
 11862                           status	equ	0xFD8
 11863                           
 11864 ;; *************** function _Test *****************
 11865 ;; Defined at:
 11866 ;;		line 31 in file "Test.c"
 11867 ;; Parameters:    Size  Location     Type
 11868 ;;		None
 11869 ;; Auto vars:     Size  Location     Type
 11870 ;;		None
 11871 ;; Return value:  Size  Location     Type
 11872 ;;                  1    wreg      void 
 11873 ;; Registers used:
 11874 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11875 ;; Tracked objects:
 11876 ;;		On entry : 0/0
 11877 ;;		On exit  : 0/0
 11878 ;;		Unchanged: 0/0
 11879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11882 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11883 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11884 ;;Total ram usage:        2 bytes
 11885 ;; Hardware stack levels used:    1
 11886 ;; Hardware stack levels required when called:   11
 11887 ;; This function calls:
 11888 ;;		_BlockerTest
 11889 ;;		_BothServos
 11890 ;;		_PlatformTest
 11891 ;;		_PortTestDC
 11892 ;;		_PortTestPusher
 11893 ;;		_SpeedTest
 11894 ;;		_actuatorTest
 11895 ;;		_algorithmTest
 11896 ;;		_arm
 11897 ;;		_lcdInst
 11898 ;;		_printf
 11899 ;;		_sensorTest
 11900 ;; This function is called by:
 11901 ;;		_main
 11902 ;; This function uses a non-reentrant model
 11903 ;;
 11904                           
 11905                           	psect	text40
 11906  0043BA                     __ptext40:
 11907                           	opt stack 0
 11908  0043BA                     _Test:
 11909                           	opt stack 19
 11910                           
 11911                           ;Test.c: 33: while(machine_state == Testing_state){
 11912                           
 11913                           ; BSR set to: 0
 11914                           ;incstack = 0
 11915  0043BA  D07C               	goto	l9959
 11916  0043BC                     l9919:
 11917                           
 11918                           ;Test.c: 34: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11919  0043BC  0E01               	movlw	1
 11920  0043BE  EC59  F02E         	call	_lcdInst
 11921  0043C2  0E68               	movlw	104
 11922  0043C4  0100               	movlb	0	; () banked
 11923  0043C6  6FC6               	movwf	??_Test& (0+255),b
 11924  0043C8  0EE4               	movlw	228
 11925  0043CA                     u10427:
 11926  0043CA  2EE8               	decfsz	wreg,f,c
 11927  0043CC  D7FE               	bra	u10427
 11928  0043CE  2FC6               	decfsz	??_Test& (0+255),f,b
 11929  0043D0  D7FC               	bra	u10427
 11930  0043D2  F000               	nop	
 11931  0043D4  0E80               	movlw	128
 11932  0043D6  EC59  F02E         	call	_lcdInst
 11933                           
 11934                           ;Test.c: 35: printf("2.SNR|4.HI|5.MED");
 11935  0043DA  0E73               	movlw	low STR_73
 11936  0043DC  0100               	movlb	0	; () banked
 11937  0043DE  6F8E               	movwf	printf@f& (0+255),b
 11938  0043E0  0EFC               	movlw	high STR_73
 11939  0043E2  0100               	movlb	0	; () banked
 11940  0043E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11941  0043E6  EC15  F00E         	call	_printf	;wreg free
 11942                           
 11943                           ;Test.c: 36: lcdInst(0b11000000);;
 11944  0043EA  0EC0               	movlw	192
 11945  0043EC  EC59  F02E         	call	_lcdInst
 11946                           
 11947                           ;Test.c: 37: printf("B.PLA|8.SV|9.BLK");
 11948  0043F0  0E84               	movlw	low STR_74
 11949  0043F2  0100               	movlb	0	; () banked
 11950  0043F4  6F8E               	movwf	printf@f& (0+255),b
 11951  0043F6  0EFC               	movlw	high STR_74
 11952  0043F8  0100               	movlb	0	; () banked
 11953  0043FA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11954  0043FC  EC15  F00E         	call	_printf	;wreg free
 11955  004400                     l1233:
 11956  004400  A281               	btfss	3969,1,c	;volatile
 11957  004402  D7FE               	goto	l1233
 11958                           
 11959                           ;Test.c: 39: var = PORTB >> 4;
 11960  004404  CF81 F0C6          	movff	3969,??_Test	;volatile
 11961  004408  0100               	movlb	0	; () banked
 11962  00440A  3BC6               	swapf	??_Test& (0+255),f,b
 11963  00440C  0E0F               	movlw	15
 11964  00440E  17C6               	andwf	??_Test& (0+255),f,b
 11965  004410  0100               	movlb	0	; () banked
 11966  004412  51C6               	movf	??_Test& (0+255),w,b
 11967  004414  0101               	movlb	1	; () banked
 11968  004416  6F47               	movwf	_var& (0+255),b
 11969  004418  6B48               	clrf	(_var+1)& (0+255),b
 11970                           
 11971                           ; BSR set to: 1
 11972                           ;Test.c: 40: var++;
 11973  00441A  0101               	movlb	1	; () banked
 11974  00441C  4B47               	infsnz	_var& (0+255),f,b
 11975  00441E  2B48               	incf	(_var+1)& (0+255),f,b
 11976  004420                     l1236:
 11977  004420  A281               	btfss	3969,1,c	;volatile
 11978  004422  D01F               	goto	l9957
 11979  004424  D7FD               	goto	l1236
 11980  004426                     l9935:
 11981                           
 11982                           ;Test.c: 44: algorithmTest();
 11983  004426  ECC4  F023         	call	_algorithmTest	;wreg free
 11984                           
 11985                           ;Test.c: 45: break;
 11986  00442A  D044               	goto	l9959
 11987  00442C                     l9937:
 11988                           
 11989                           ;Test.c: 47: sensorTest();
 11990  00442C  EC11  F017         	call	_sensorTest	;wreg free
 11991                           
 11992                           ;Test.c: 48: break;
 11993  004430  D041               	goto	l9959
 11994  004432                     l9939:
 11995                           
 11996                           ;Test.c: 50: actuatorTest();
 11997  004432  EC6D  F004         	call	_actuatorTest	;wreg free
 11998                           
 11999                           ;Test.c: 51: break;
 12000  004436  D03E               	goto	l9959
 12001  004438                     l9941:
 12002                           
 12003                           ;Test.c: 53: arm();
 12004  004438  EC60  F022         	call	_arm	;wreg free
 12005                           
 12006                           ;Test.c: 54: break;
 12007  00443C  D03B               	goto	l9959
 12008  00443E                     l9943:
 12009                           
 12010                           ;Test.c: 56: PortTestDC();
 12011  00443E  ECDB  F029         	call	_PortTestDC	;wreg free
 12012                           
 12013                           ;Test.c: 57: break;
 12014  004442  D038               	goto	l9959
 12015  004444                     l9945:
 12016                           
 12017                           ;Test.c: 59: SpeedTest();
 12018  004444  EC45  F027         	call	_SpeedTest	;wreg free
 12019                           
 12020                           ;Test.c: 60: break;
 12021  004448  D035               	goto	l9959
 12022  00444A                     l9947:
 12023                           
 12024                           ;Test.c: 62: PortTestPusher();
 12025  00444A  ECAD  F029         	call	_PortTestPusher	;wreg free
 12026                           
 12027                           ;Test.c: 63: break;
 12028  00444E  D032               	goto	l9959
 12029  004450                     l9949:
 12030                           
 12031                           ;Test.c: 65: PlatformTest();
 12032  004450  EC86  F015         	call	_PlatformTest	;wreg free
 12033                           
 12034                           ;Test.c: 66: break;
 12035  004454  D02F               	goto	l9959
 12036  004456                     l9951:
 12037                           
 12038                           ;Test.c: 68: BothServos();
 12039  004456  EC31  F010         	call	_BothServos	;wreg free
 12040                           
 12041                           ;Test.c: 69: break;
 12042  00445A  D02C               	goto	l9959
 12043  00445C                     l9953:
 12044                           
 12045                           ;Test.c: 71: BlockerTest();
 12046  00445C  EC3F  F01F         	call	_BlockerTest	;wreg free
 12047                           
 12048                           ;Test.c: 75: }
 12049                           
 12050                           ;Test.c: 74: break;
 12051                           
 12052                           ;Test.c: 73: default:
 12053                           
 12054                           ;Test.c: 72: break;
 12055  004460  D029               	goto	l9959
 12056  004462                     l9957:
 12057  004462  C147  F0C6         	movff	_var,??_Test
 12058  004466  C148  F0C7         	movff	_var+1,??_Test+1
 12059                           
 12060                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12061                           ; Switch size 1, requested type "space"
 12062                           ; Number of cases is 1, Range of values is 0 to 0
 12063                           ; switch strategies available:
 12064                           ; Name         Instructions Cycles
 12065                           ; simple_byte            4     3 (average)
 12066                           ;	Chosen strategy is simple_byte
 12067  00446A  0100               	movlb	0	; () banked
 12068  00446C  51C7               	movf	(??_Test+1)& (0+255),w,b
 12069  00446E  0A00               	xorlw	0	; case 0
 12070  004470  A4D8               	btfss	status,2,c
 12071  004472  D020               	goto	l9959
 12072                           
 12073                           ; BSR set to: 0
 12074                           ; Switch size 1, requested type "space"
 12075                           ; Number of cases is 10, Range of values is 1 to 11
 12076                           ; switch strategies available:
 12077                           ; Name         Instructions Cycles
 12078                           ; simple_byte           31    16 (average)
 12079                           ;	Chosen strategy is simple_byte
 12080  004474  0100               	movlb	0	; () banked
 12081  004476  51C6               	movf	??_Test& (0+255),w,b
 12082  004478  0A01               	xorlw	1	; case 1
 12083  00447A  B4D8               	btfsc	status,2,c
 12084  00447C  D7D4               	goto	l9935
 12085  00447E  0A03               	xorlw	3	; case 2
 12086  004480  B4D8               	btfsc	status,2,c
 12087  004482  D7D4               	goto	l9937
 12088  004484  0A01               	xorlw	1	; case 3
 12089  004486  B4D8               	btfsc	status,2,c
 12090  004488  D7D4               	goto	l9939
 12091  00448A  0A07               	xorlw	7	; case 4
 12092  00448C  B4D8               	btfsc	status,2,c
 12093  00448E  D7D4               	goto	l9941
 12094  004490  0A01               	xorlw	1	; case 5
 12095  004492  B4D8               	btfsc	status,2,c
 12096  004494  D7D4               	goto	l9943
 12097  004496  0A03               	xorlw	3	; case 6
 12098  004498  B4D8               	btfsc	status,2,c
 12099  00449A  D7D4               	goto	l9945
 12100  00449C  0A01               	xorlw	1	; case 7
 12101  00449E  B4D8               	btfsc	status,2,c
 12102  0044A0  D7D4               	goto	l9947
 12103  0044A2  0A0F               	xorlw	15	; case 8
 12104  0044A4  B4D8               	btfsc	status,2,c
 12105  0044A6  D7D4               	goto	l9949
 12106  0044A8  0A02               	xorlw	2	; case 10
 12107  0044AA  B4D8               	btfsc	status,2,c
 12108  0044AC  D7D4               	goto	l9951
 12109  0044AE  0A01               	xorlw	1	; case 11
 12110  0044B0  B4D8               	btfsc	status,2,c
 12111  0044B2  D7D4               	goto	l9953
 12112  0044B4                     l9959:
 12113  0044B4  0E03               	movlw	3
 12114  0044B6  0100               	movlb	0	; () banked
 12115  0044B8  19FC               	xorwf	_machine_state& (0+255),w,b
 12116  0044BA  A4D8               	btfss	status,2,c
 12117  0044BC  0012               	return	
 12118  0044BE  D77E               	goto	l9919
 12119  0044C0                     __end_of_Test:
 12120                           	opt stack 0
 12121                           tblptru	equ	0xFF8
 12122                           tblptrh	equ	0xFF7
 12123                           tblptrl	equ	0xFF6
 12124                           tablat	equ	0xFF5
 12125                           prodh	equ	0xFF4
 12126                           prodl	equ	0xFF3
 12127                           intcon	equ	0xFF2
 12128                           intcon2	equ	0xFF1
 12129                           intcon3	equ	0xFF0
 12130                           postinc0	equ	0xFEE
 12131                           wreg	equ	0xFE8
 12132                           postdec1	equ	0xFE5
 12133                           fsr1l	equ	0xFE1
 12134                           indf2	equ	0xFDF
 12135                           postinc2	equ	0xFDE
 12136                           postdec2	equ	0xFDD
 12137                           fsr2h	equ	0xFDA
 12138                           fsr2l	equ	0xFD9
 12139                           status	equ	0xFD8
 12140                           
 12141 ;; *************** function _sensorTest *****************
 12142 ;; Defined at:
 12143 ;;		line 123 in file "Test.c"
 12144 ;; Parameters:    Size  Location     Type
 12145 ;;		None
 12146 ;; Auto vars:     Size  Location     Type
 12147 ;;  res             2   45[BANK0 ] int 
 12148 ;; Return value:  Size  Location     Type
 12149 ;;                  1    wreg      void 
 12150 ;; Registers used:
 12151 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12152 ;; Tracked objects:
 12153 ;;		On entry : 0/0
 12154 ;;		On exit  : 0/0
 12155 ;;		Unchanged: 0/0
 12156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12158 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12159 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12160 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12161 ;;Total ram usage:        4 bytes
 12162 ;; Hardware stack levels used:    1
 12163 ;; Hardware stack levels required when called:   10
 12164 ;; This function calls:
 12165 ;;		_lcdInst
 12166 ;;		_printf
 12167 ;;		_readADC
 12168 ;;		_readMAG
 12169 ;; This function is called by:
 12170 ;;		_Test
 12171 ;; This function uses a non-reentrant model
 12172 ;;
 12173                           
 12174                           	psect	text41
 12175  002E22                     __ptext41:
 12176                           	opt stack 0
 12177  002E22                     _sensorTest:
 12178                           	opt stack 19
 12179                           
 12180                           ;Test.c: 125: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12181                           
 12182                           ; BSR set to: 0
 12183                           ;incstack = 0
 12184  002E22  0E01               	movlw	1
 12185  002E24  EC59  F02E         	call	_lcdInst
 12186  002E28  0E68               	movlw	104
 12187  002E2A  0100               	movlb	0	; () banked
 12188  002E2C  6FAB               	movwf	??_sensorTest& (0+255),b
 12189  002E2E  0EE4               	movlw	228
 12190  002E30                     u10437:
 12191  002E30  2EE8               	decfsz	wreg,f,c
 12192  002E32  D7FE               	bra	u10437
 12193  002E34  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12194  002E36  D7FC               	bra	u10437
 12195  002E38  F000               	nop	
 12196  002E3A  0E80               	movlw	128
 12197  002E3C  EC59  F02E         	call	_lcdInst
 12198                           
 12199                           ;Test.c: 126: printf("SENSORS");
 12200  002E40  0EAE               	movlw	low STR_82
 12201  002E42  0100               	movlb	0	; () banked
 12202  002E44  6F8E               	movwf	printf@f& (0+255),b
 12203  002E46  0EFF               	movlw	high STR_82
 12204  002E48  0100               	movlb	0	; () banked
 12205  002E4A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12206  002E4C  EC15  F00E         	call	_printf	;wreg free
 12207                           
 12208                           ;Test.c: 127: lcdInst(0b11000000);;
 12209  002E50  0EC0               	movlw	192
 12210  002E52  EC59  F02E         	call	_lcdInst
 12211                           
 12212                           ;Test.c: 128: printf("PUSH TO START");
 12213  002E56  0E2E               	movlw	low STR_76
 12214  002E58  0100               	movlb	0	; () banked
 12215  002E5A  6F8E               	movwf	printf@f& (0+255),b
 12216  002E5C  0EFF               	movlw	high STR_76
 12217  002E5E  0100               	movlb	0	; () banked
 12218  002E60  6F8F               	movwf	(printf@f+1)& (0+255),b
 12219  002E62  EC15  F00E         	call	_printf	;wreg free
 12220                           
 12221                           ;Test.c: 129: _delay((unsigned long)((100)*(32000000/4000.0)));
 12222  002E66  0E05               	movlw	5
 12223  002E68  0100               	movlb	0	; () banked
 12224  002E6A  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12225  002E6C  0E0F               	movlw	15
 12226  002E6E  0100               	movlb	0	; () banked
 12227  002E70  6FAB               	movwf	??_sensorTest& (0+255),b
 12228  002E72  0EF1               	movlw	241
 12229  002E74                     u10447:
 12230  002E74  2EE8               	decfsz	wreg,f,c
 12231  002E76  D7FE               	bra	u10447
 12232  002E78  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12233  002E7A  D7FC               	bra	u10447
 12234  002E7C  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12235  002E7E  D7FA               	bra	u10447
 12236  002E80                     l1265:
 12237  002E80  A281               	btfss	3969,1,c	;volatile
 12238  002E82  D7FE               	goto	l1265
 12239  002E84                     l1268:
 12240  002E84  B281               	btfsc	3969,1,c	;volatile
 12241  002E86  D7FE               	goto	l1268
 12242                           
 12243                           ;Test.c: 132: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12244  002E88  0E01               	movlw	1
 12245  002E8A  EC59  F02E         	call	_lcdInst
 12246  002E8E  0E68               	movlw	104
 12247  002E90  0100               	movlb	0	; () banked
 12248  002E92  6FAB               	movwf	??_sensorTest& (0+255),b
 12249  002E94  0EE4               	movlw	228
 12250  002E96                     u10457:
 12251  002E96  2EE8               	decfsz	wreg,f,c
 12252  002E98  D7FE               	bra	u10457
 12253  002E9A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12254  002E9C  D7FC               	bra	u10457
 12255  002E9E  F000               	nop	
 12256  002EA0  0E80               	movlw	128
 12257  002EA2  EC59  F02E         	call	_lcdInst
 12258                           
 12259                           ;Test.c: 137: printf("TST: IR SNSR");
 12260  002EA6  0E58               	movlw	low STR_84
 12261  002EA8  0100               	movlb	0	; () banked
 12262  002EAA  6F8E               	movwf	printf@f& (0+255),b
 12263  002EAC  0EFF               	movlw	high STR_84
 12264  002EAE  0100               	movlb	0	; () banked
 12265  002EB0  6F8F               	movwf	(printf@f+1)& (0+255),b
 12266  002EB2  EC15  F00E         	call	_printf	;wreg free
 12267                           
 12268                           ;Test.c: 138: _delay((unsigned long)((100)*(32000000/4000.0)));
 12269  002EB6  0E05               	movlw	5
 12270  002EB8  0100               	movlb	0	; () banked
 12271  002EBA  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12272  002EBC  0E0F               	movlw	15
 12273  002EBE  0100               	movlb	0	; () banked
 12274  002EC0  6FAB               	movwf	??_sensorTest& (0+255),b
 12275  002EC2  0EF1               	movlw	241
 12276  002EC4                     u10467:
 12277  002EC4  2EE8               	decfsz	wreg,f,c
 12278  002EC6  D7FE               	bra	u10467
 12279  002EC8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12280  002ECA  D7FC               	bra	u10467
 12281  002ECC  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12282  002ECE  D7FA               	bra	u10467
 12283                           
 12284                           ;Test.c: 139: LATCbits.LATC5 = 1;
 12285  002ED0  8A8B               	bsf	3979,5,c	;volatile
 12286                           
 12287                           ;Test.c: 141: while(PORTBbits.RB1 == 0){
 12288  002ED2  D05C               	goto	l8325
 12289  002ED4                     l8307:
 12290                           
 12291                           ;Test.c: 142: readADC(0);
 12292  002ED4  0E00               	movlw	0
 12293  002ED6  EC4F  F02D         	call	_readADC
 12294                           
 12295                           ;Test.c: 143: int res = ADRESH<<8 | ADRESL;
 12296  002EDA  50C3               	movf	4035,w,c	;volatile
 12297  002EDC  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 12298  002EE0  0100               	movlb	0	; () banked
 12299  002EE2  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 12300  002EE4  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 12301  002EE8  0100               	movlb	0	; () banked
 12302  002EEA  6BAB               	clrf	??_sensorTest& (0+255),b
 12303  002EEC  0100               	movlb	0	; () banked
 12304  002EEE  11AB               	iorwf	??_sensorTest& (0+255),w,b
 12305  002EF0  0100               	movlb	0	; () banked
 12306  002EF2  6FAD               	movwf	sensorTest@res& (0+255),b
 12307  002EF4  0100               	movlb	0	; () banked
 12308  002EF6  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 12309  002EF8  0100               	movlb	0	; () banked
 12310  002EFA  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 12311                           
 12312                           ; BSR set to: 0
 12313                           ;Test.c: 144: IR_signal = (res > 800) ? 1 : 0;
 12314  002EFC  0100               	movlb	0	; () banked
 12315  002EFE  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 12316  002F00  D00A               	goto	u7130
 12317  002F02  0E21               	movlw	33
 12318  002F04  0100               	movlb	0	; () banked
 12319  002F06  5DAD               	subwf	sensorTest@res& (0+255),w,b
 12320  002F08  0E03               	movlw	3
 12321  002F0A  0100               	movlb	0	; () banked
 12322  002F0C  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 12323  002F0E  A0D8               	btfss	status,0,c
 12324  002F10  D002               	goto	u7130
 12325  002F12  0E01               	movlw	1
 12326  002F14  D001               	goto	u7140
 12327  002F16                     u7130:
 12328  002F16  0E00               	movlw	0
 12329  002F18                     u7140:
 12330  002F18  0100               	movlb	0	; () banked
 12331  002F1A  6FE0               	movwf	_IR_signal& (0+255),b
 12332  002F1C  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 12333                           
 12334                           ;Test.c: 146: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12335  002F1E  0E01               	movlw	1
 12336  002F20  EC59  F02E         	call	_lcdInst
 12337  002F24  0E68               	movlw	104
 12338  002F26  0100               	movlb	0	; () banked
 12339  002F28  6FAB               	movwf	??_sensorTest& (0+255),b
 12340  002F2A  0EE4               	movlw	228
 12341  002F2C                     u10477:
 12342  002F2C  2EE8               	decfsz	wreg,f,c
 12343  002F2E  D7FE               	bra	u10477
 12344  002F30  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12345  002F32  D7FC               	bra	u10477
 12346  002F34  F000               	nop	
 12347  002F36  0E80               	movlw	128
 12348  002F38  EC59  F02E         	call	_lcdInst
 12349                           
 12350                           ;Test.c: 147: printf("IR_signal: %d ", IR_signal);
 12351  002F3C  0E7D               	movlw	low STR_85
 12352  002F3E  0100               	movlb	0	; () banked
 12353  002F40  6F8E               	movwf	printf@f& (0+255),b
 12354  002F42  0EFE               	movlw	high STR_85
 12355  002F44  0100               	movlb	0	; () banked
 12356  002F46  6F8F               	movwf	(printf@f+1)& (0+255),b
 12357  002F48  C0E0  F090         	movff	_IR_signal,?_printf+2
 12358  002F4C  C0E1  F091         	movff	_IR_signal+1,?_printf+3
 12359  002F50  EC15  F00E         	call	_printf	;wreg free
 12360                           
 12361                           ;Test.c: 148: lcdInst(0b11000000);;
 12362  002F54  0EC0               	movlw	192
 12363  002F56  EC59  F02E         	call	_lcdInst
 12364                           
 12365                           ;Test.c: 149: printf("%d", res);
 12366  002F5A  0E2A               	movlw	low (STR_27+14)
 12367  002F5C  0100               	movlb	0	; () banked
 12368  002F5E  6F8E               	movwf	printf@f& (0+255),b
 12369  002F60  0EFE               	movlw	high (STR_27+14)
 12370  002F62  0100               	movlb	0	; () banked
 12371  002F64  6F8F               	movwf	(printf@f+1)& (0+255),b
 12372  002F66  C0AD  F090         	movff	sensorTest@res,?_printf+2
 12373  002F6A  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 12374  002F6E  EC15  F00E         	call	_printf	;wreg free
 12375                           
 12376                           ;Test.c: 150: _delay((unsigned long)((100)*(32000000/4000.0)));
 12377  002F72  0E05               	movlw	5
 12378  002F74  0100               	movlb	0	; () banked
 12379  002F76  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12380  002F78  0E0F               	movlw	15
 12381  002F7A  0100               	movlb	0	; () banked
 12382  002F7C  6FAB               	movwf	??_sensorTest& (0+255),b
 12383  002F7E  0EF1               	movlw	241
 12384  002F80                     u10487:
 12385  002F80  2EE8               	decfsz	wreg,f,c
 12386  002F82  D7FE               	bra	u10487
 12387  002F84  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12388  002F86  D7FC               	bra	u10487
 12389  002F88  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12390  002F8A  D7FA               	bra	u10487
 12391  002F8C                     l8325:
 12392  002F8C  A281               	btfss	3969,1,c	;volatile
 12393  002F8E  D7A2               	goto	l8307
 12394                           
 12395                           ;Test.c: 151: }
 12396                           ;Test.c: 152: LATCbits.LATC5 = 0;
 12397  002F90  9A8B               	bcf	3979,5,c	;volatile
 12398                           
 12399                           ;Test.c: 160: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12400  002F92  0E01               	movlw	1
 12401  002F94  EC59  F02E         	call	_lcdInst
 12402  002F98  0E68               	movlw	104
 12403  002F9A  0100               	movlb	0	; () banked
 12404  002F9C  6FAB               	movwf	??_sensorTest& (0+255),b
 12405  002F9E  0EE4               	movlw	228
 12406  002FA0                     u10497:
 12407  002FA0  2EE8               	decfsz	wreg,f,c
 12408  002FA2  D7FE               	bra	u10497
 12409  002FA4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12410  002FA6  D7FC               	bra	u10497
 12411  002FA8  F000               	nop	
 12412  002FAA  0E80               	movlw	128
 12413  002FAC  EC59  F02E         	call	_lcdInst
 12414                           
 12415                           ;Test.c: 161: printf("TST: MAGNETISM");
 12416  002FB0  0EAA               	movlw	low STR_87
 12417  002FB2  0100               	movlb	0	; () banked
 12418  002FB4  6F8E               	movwf	printf@f& (0+255),b
 12419  002FB6  0EFE               	movlw	high STR_87
 12420  002FB8  0100               	movlb	0	; () banked
 12421  002FBA  6F8F               	movwf	(printf@f+1)& (0+255),b
 12422  002FBC  EC15  F00E         	call	_printf	;wreg free
 12423                           
 12424                           ;Test.c: 162: _delay((unsigned long)((100)*(32000000/4000.0)));
 12425  002FC0  0E05               	movlw	5
 12426  002FC2  0100               	movlb	0	; () banked
 12427  002FC4  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12428  002FC6  0E0F               	movlw	15
 12429  002FC8  0100               	movlb	0	; () banked
 12430  002FCA  6FAB               	movwf	??_sensorTest& (0+255),b
 12431  002FCC  0EF1               	movlw	241
 12432  002FCE                     u10507:
 12433  002FCE  2EE8               	decfsz	wreg,f,c
 12434  002FD0  D7FE               	bra	u10507
 12435  002FD2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12436  002FD4  D7FC               	bra	u10507
 12437  002FD6  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12438  002FD8  D7FA               	bra	u10507
 12439                           
 12440                           ;Test.c: 163: while(PORTBbits.RB1 == 0){
 12441  002FDA  D021               	goto	l8343
 12442  002FDC                     l8337:
 12443                           
 12444                           ;Test.c: 164: readMAG();
 12445  002FDC  ECD2  F02A         	call	_readMAG	;wreg free
 12446                           
 12447                           ;Test.c: 165: lcdInst(0b10000000);;
 12448  002FE0  0E80               	movlw	128
 12449  002FE2  EC59  F02E         	call	_lcdInst
 12450                           
 12451                           ;Test.c: 166: lcdInst(0b11000000);;
 12452  002FE6  0EC0               	movlw	192
 12453  002FE8  EC59  F02E         	call	_lcdInst
 12454                           
 12455                           ;Test.c: 167: printf("MAG_signal: %d ", MAG_signal);
 12456  002FEC  0E3E               	movlw	low STR_88
 12457  002FEE  0100               	movlb	0	; () banked
 12458  002FF0  6F8E               	movwf	printf@f& (0+255),b
 12459  002FF2  0EFE               	movlw	high STR_88
 12460  002FF4  0100               	movlb	0	; () banked
 12461  002FF6  6F8F               	movwf	(printf@f+1)& (0+255),b
 12462  002FF8  C0E2  F090         	movff	_MAG_signal,?_printf+2
 12463  002FFC  C0E3  F091         	movff	_MAG_signal+1,?_printf+3
 12464  003000  EC15  F00E         	call	_printf	;wreg free
 12465                           
 12466                           ;Test.c: 168: _delay((unsigned long)((100)*(32000000/4000.0)));
 12467  003004  0E05               	movlw	5
 12468  003006  0100               	movlb	0	; () banked
 12469  003008  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12470  00300A  0E0F               	movlw	15
 12471  00300C  0100               	movlb	0	; () banked
 12472  00300E  6FAB               	movwf	??_sensorTest& (0+255),b
 12473  003010  0EF1               	movlw	241
 12474  003012                     u10517:
 12475  003012  2EE8               	decfsz	wreg,f,c
 12476  003014  D7FE               	bra	u10517
 12477  003016  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12478  003018  D7FC               	bra	u10517
 12479  00301A  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12480  00301C  D7FA               	bra	u10517
 12481  00301E                     l8343:
 12482  00301E  A281               	btfss	3969,1,c	;volatile
 12483  003020  D7DD               	goto	l8337
 12484                           
 12485                           ;Test.c: 169: }
 12486                           ;Test.c: 174: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12487  003022  0E01               	movlw	1
 12488  003024  EC59  F02E         	call	_lcdInst
 12489  003028  0E68               	movlw	104
 12490  00302A  0100               	movlb	0	; () banked
 12491  00302C  6FAB               	movwf	??_sensorTest& (0+255),b
 12492  00302E  0EE4               	movlw	228
 12493  003030                     u10527:
 12494  003030  2EE8               	decfsz	wreg,f,c
 12495  003032  D7FE               	bra	u10527
 12496  003034  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12497  003036  D7FC               	bra	u10527
 12498  003038  F000               	nop	
 12499  00303A  0E80               	movlw	128
 12500  00303C  EC59  F02E         	call	_lcdInst
 12501                           
 12502                           ;Test.c: 175: printf("TST: COND");
 12503  003040  0E87               	movlw	low STR_89
 12504  003042  0100               	movlb	0	; () banked
 12505  003044  6F8E               	movwf	printf@f& (0+255),b
 12506  003046  0EFF               	movlw	high STR_89
 12507  003048  0100               	movlb	0	; () banked
 12508  00304A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12509  00304C  EC15  F00E         	call	_printf	;wreg free
 12510                           
 12511                           ;Test.c: 176: _delay((unsigned long)((100)*(32000000/4000.0)));
 12512  003050  0E05               	movlw	5
 12513  003052  0100               	movlb	0	; () banked
 12514  003054  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12515  003056  0E0F               	movlw	15
 12516  003058  0100               	movlb	0	; () banked
 12517  00305A  6FAB               	movwf	??_sensorTest& (0+255),b
 12518  00305C  0EF1               	movlw	241
 12519  00305E                     u10537:
 12520  00305E  2EE8               	decfsz	wreg,f,c
 12521  003060  D7FE               	bra	u10537
 12522  003062  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12523  003064  D7FC               	bra	u10537
 12524  003066  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12525  003068  D7FA               	bra	u10537
 12526  00306A                     l8355:
 12527                           
 12528                           ;Test.c: 178: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12529  00306A  0E01               	movlw	1
 12530  00306C  EC59  F02E         	call	_lcdInst
 12531  003070  0E68               	movlw	104
 12532  003072  0100               	movlb	0	; () banked
 12533  003074  6FAB               	movwf	??_sensorTest& (0+255),b
 12534  003076  0EE4               	movlw	228
 12535  003078                     u10547:
 12536  003078  2EE8               	decfsz	wreg,f,c
 12537  00307A  D7FE               	bra	u10547
 12538  00307C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12539  00307E  D7FC               	bra	u10547
 12540  003080  F000               	nop	
 12541  003082  0E80               	movlw	128
 12542  003084  EC59  F02E         	call	_lcdInst
 12543                           
 12544                           ;Test.c: 179: printf("TST: COND");
 12545  003088  0E87               	movlw	low STR_89
 12546  00308A  0100               	movlb	0	; () banked
 12547  00308C  6F8E               	movwf	printf@f& (0+255),b
 12548  00308E  0EFF               	movlw	high STR_89
 12549  003090  0100               	movlb	0	; () banked
 12550  003092  6F8F               	movwf	(printf@f+1)& (0+255),b
 12551  003094  EC15  F00E         	call	_printf	;wreg free
 12552                           
 12553                           ;Test.c: 180: while(PORTBbits.RB1 == 0){
 12554  003098  D01B               	goto	l8367
 12555  00309A                     l8363:
 12556                           
 12557                           ;Test.c: 184: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12558  00309A  0E80               	movlw	128
 12559  00309C  EC59  F02E         	call	_lcdInst
 12560  0030A0  0EC0               	movlw	192
 12561  0030A2  EC59  F02E         	call	_lcdInst
 12562                           
 12563                           ;Test.c: 185: printf("COND: %d", PORTAbits.RA2);
 12564  0030A6  0EA5               	movlw	low STR_91
 12565  0030A8  0100               	movlb	0	; () banked
 12566  0030AA  6F8E               	movwf	printf@f& (0+255),b
 12567  0030AC  0EFF               	movlw	high STR_91
 12568  0030AE  0100               	movlb	0	; () banked
 12569  0030B0  6F8F               	movwf	(printf@f+1)& (0+255),b
 12570  0030B2  A480               	btfss	3968,2,c	;volatile
 12571  0030B4  D004               	goto	u7170
 12572  0030B6  0100               	movlb	0	; () banked
 12573  0030B8  6BAB               	clrf	??_sensorTest& (0+255),b
 12574  0030BA  2BAB               	incf	??_sensorTest& (0+255),f,b
 12575  0030BC  D002               	goto	u7178
 12576  0030BE                     u7170:
 12577  0030BE  0100               	movlb	0	; () banked
 12578  0030C0  6BAB               	clrf	??_sensorTest& (0+255),b
 12579  0030C2                     u7178:
 12580  0030C2  0100               	movlb	0	; () banked
 12581  0030C4  51AB               	movf	??_sensorTest& (0+255),w,b
 12582  0030C6  0100               	movlb	0	; () banked
 12583  0030C8  6F90               	movwf	(?_printf+2)& (0+255),b
 12584  0030CA  6B91               	clrf	(?_printf+3)& (0+255),b
 12585  0030CC  EC15  F00E         	call	_printf	;wreg free
 12586  0030D0                     l8367:
 12587  0030D0  A281               	btfss	3969,1,c	;volatile
 12588  0030D2  D7E3               	goto	l8363
 12589                           
 12590                           ;Test.c: 186: }
 12591                           ;Test.c: 187: if(PORTB >> 4 == 0b1111){
 12592  0030D4  3881               	swapf	3969,w,c	;volatile
 12593  0030D6  0B0F               	andlw	15
 12594  0030D8  0A0F               	xorlw	15
 12595  0030DA  B4D8               	btfsc	status,2,c
 12596  0030DC  0012               	return	
 12597                           
 12598                           ;Test.c: 190: else{
 12599                           ;Test.c: 191: LATAbits.LATA3 = 1;
 12600                           
 12601                           ;Test.c: 189: }
 12602                           
 12603                           ;Test.c: 188: break;
 12604  0030DE  8689               	bsf	3977,3,c	;volatile
 12605                           
 12606                           ;Test.c: 192: while(PORTBbits.RB1 == 1){
 12607  0030E0  D01B               	goto	l8379
 12608  0030E2                     l8375:
 12609                           
 12610                           ;Test.c: 194: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12611  0030E2  0E80               	movlw	128
 12612  0030E4  EC59  F02E         	call	_lcdInst
 12613  0030E8  0EC0               	movlw	192
 12614  0030EA  EC59  F02E         	call	_lcdInst
 12615                           
 12616                           ;Test.c: 195: printf("COND: %d", PORTAbits.RA2);
 12617  0030EE  0EA5               	movlw	low STR_91
 12618  0030F0  0100               	movlb	0	; () banked
 12619  0030F2  6F8E               	movwf	printf@f& (0+255),b
 12620  0030F4  0EFF               	movlw	high STR_91
 12621  0030F6  0100               	movlb	0	; () banked
 12622  0030F8  6F8F               	movwf	(printf@f+1)& (0+255),b
 12623  0030FA  A480               	btfss	3968,2,c	;volatile
 12624  0030FC  D004               	goto	u7200
 12625  0030FE  0100               	movlb	0	; () banked
 12626  003100  6BAB               	clrf	??_sensorTest& (0+255),b
 12627  003102  2BAB               	incf	??_sensorTest& (0+255),f,b
 12628  003104  D002               	goto	u7208
 12629  003106                     u7200:
 12630  003106  0100               	movlb	0	; () banked
 12631  003108  6BAB               	clrf	??_sensorTest& (0+255),b
 12632  00310A                     u7208:
 12633  00310A  0100               	movlb	0	; () banked
 12634  00310C  51AB               	movf	??_sensorTest& (0+255),w,b
 12635  00310E  0100               	movlb	0	; () banked
 12636  003110  6F90               	movwf	(?_printf+2)& (0+255),b
 12637  003112  6B91               	clrf	(?_printf+3)& (0+255),b
 12638  003114  EC15  F00E         	call	_printf	;wreg free
 12639  003118                     l8379:
 12640  003118  B281               	btfsc	3969,1,c	;volatile
 12641  00311A  D7E3               	goto	l8375
 12642                           
 12643                           ;Test.c: 196: }
 12644                           ;Test.c: 197: LATAbits.LATA3 = !1;
 12645  00311C  9689               	bcf	3977,3,c	;volatile
 12646  00311E  D7A5               	goto	l8355
 12647  003120                     __end_of_sensorTest:
 12648                           	opt stack 0
 12649                           tblptru	equ	0xFF8
 12650                           tblptrh	equ	0xFF7
 12651                           tblptrl	equ	0xFF6
 12652                           tablat	equ	0xFF5
 12653                           prodh	equ	0xFF4
 12654                           prodl	equ	0xFF3
 12655                           intcon	equ	0xFF2
 12656                           intcon2	equ	0xFF1
 12657                           intcon3	equ	0xFF0
 12658                           postinc0	equ	0xFEE
 12659                           wreg	equ	0xFE8
 12660                           postdec1	equ	0xFE5
 12661                           fsr1l	equ	0xFE1
 12662                           indf2	equ	0xFDF
 12663                           postinc2	equ	0xFDE
 12664                           postdec2	equ	0xFDD
 12665                           fsr2h	equ	0xFDA
 12666                           fsr2l	equ	0xFD9
 12667                           status	equ	0xFD8
 12668                           
 12669 ;; *************** function _readMAG *****************
 12670 ;; Defined at:
 12671 ;;		line 29 in file "ADCFunctionality.c"
 12672 ;; Parameters:    Size  Location     Type
 12673 ;;		None
 12674 ;; Auto vars:     Size  Location     Type
 12675 ;;  res             2    4[BANK0 ] int 
 12676 ;; Return value:  Size  Location     Type
 12677 ;;                  1    wreg      void 
 12678 ;; Registers used:
 12679 ;;		wreg, status,2, status,0, cstack
 12680 ;; Tracked objects:
 12681 ;;		On entry : 0/0
 12682 ;;		On exit  : 0/0
 12683 ;;		Unchanged: 0/0
 12684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12686 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12687 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12688 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12689 ;;Total ram usage:        4 bytes
 12690 ;; Hardware stack levels used:    1
 12691 ;; Hardware stack levels required when called:    8
 12692 ;; This function calls:
 12693 ;;		_readADC
 12694 ;; This function is called by:
 12695 ;;		_getMAG
 12696 ;;		_sensorTest
 12697 ;; This function uses a non-reentrant model
 12698 ;;
 12699                           
 12700                           	psect	text42
 12701  0055A4                     __ptext42:
 12702                           	opt stack 0
 12703  0055A4                     _readMAG:
 12704                           	opt stack 19
 12705                           
 12706                           ;ADCFunctionality.c: 30: readADC(1);
 12707                           
 12708                           ;incstack = 0
 12709  0055A4  0E01               	movlw	1
 12710  0055A6  EC4F  F02D         	call	_readADC
 12711                           
 12712                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 12713  0055AA  50C3               	movf	4035,w,c	;volatile
 12714  0055AC  CFC4 F082          	movff	4036,??_readMAG	;volatile
 12715  0055B0  0100               	movlb	0	; () banked
 12716  0055B2  6B83               	clrf	(??_readMAG+1)& (0+255),b
 12717  0055B4  C082  F083         	movff	??_readMAG,??_readMAG+1
 12718  0055B8  0100               	movlb	0	; () banked
 12719  0055BA  6B82               	clrf	??_readMAG& (0+255),b
 12720  0055BC  0100               	movlb	0	; () banked
 12721  0055BE  1182               	iorwf	??_readMAG& (0+255),w,b
 12722  0055C0  0100               	movlb	0	; () banked
 12723  0055C2  6F84               	movwf	readMAG@res& (0+255),b
 12724  0055C4  0100               	movlb	0	; () banked
 12725  0055C6  5183               	movf	(??_readMAG+1)& (0+255),w,b
 12726  0055C8  0100               	movlb	0	; () banked
 12727  0055CA  6F85               	movwf	(readMAG@res+1)& (0+255),b
 12728                           
 12729                           ; BSR set to: 0
 12730                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 12731  0055CC  0100               	movlb	0	; () banked
 12732  0055CE  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 12733  0055D0  D008               	goto	u5161
 12734  0055D2  0100               	movlb	0	; () banked
 12735  0055D4  5185               	movf	(readMAG@res+1)& (0+255),w,b
 12736  0055D6  E107               	bnz	u5160
 12737  0055D8  0E96               	movlw	150
 12738  0055DA  0100               	movlb	0	; () banked
 12739  0055DC  5D84               	subwf	readMAG@res& (0+255),w,b
 12740  0055DE  B0D8               	btfsc	status,0,c
 12741  0055E0  D002               	goto	u5160
 12742  0055E2                     u5161:
 12743  0055E2  0E01               	movlw	1
 12744  0055E4  D001               	goto	u5170
 12745  0055E6                     u5160:
 12746  0055E6  0E00               	movlw	0
 12747  0055E8                     u5170:
 12748  0055E8  0100               	movlb	0	; () banked
 12749  0055EA  6FE2               	movwf	_MAG_signal& (0+255),b
 12750  0055EC  6BE3               	clrf	(_MAG_signal+1)& (0+255),b
 12751                           
 12752                           ; BSR set to: 0
 12753  0055EE  0012               	return		;funcret
 12754  0055F0                     __end_of_readMAG:
 12755                           	opt stack 0
 12756                           tblptru	equ	0xFF8
 12757                           tblptrh	equ	0xFF7
 12758                           tblptrl	equ	0xFF6
 12759                           tablat	equ	0xFF5
 12760                           prodh	equ	0xFF4
 12761                           prodl	equ	0xFF3
 12762                           intcon	equ	0xFF2
 12763                           intcon2	equ	0xFF1
 12764                           intcon3	equ	0xFF0
 12765                           postinc0	equ	0xFEE
 12766                           wreg	equ	0xFE8
 12767                           postdec1	equ	0xFE5
 12768                           fsr1l	equ	0xFE1
 12769                           indf2	equ	0xFDF
 12770                           postinc2	equ	0xFDE
 12771                           postdec2	equ	0xFDD
 12772                           fsr2h	equ	0xFDA
 12773                           fsr2l	equ	0xFD9
 12774                           status	equ	0xFD8
 12775                           
 12776 ;; *************** function _arm *****************
 12777 ;; Defined at:
 12778 ;;		line 639 in file "Test.c"
 12779 ;; Parameters:    Size  Location     Type
 12780 ;;		None
 12781 ;; Auto vars:     Size  Location     Type
 12782 ;;  on              2   44[BANK0 ] int 
 12783 ;; Return value:  Size  Location     Type
 12784 ;;                  1    wreg      void 
 12785 ;; Registers used:
 12786 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12787 ;; Tracked objects:
 12788 ;;		On entry : 0/0
 12789 ;;		On exit  : 0/0
 12790 ;;		Unchanged: 0/0
 12791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12793 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12794 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12795 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12796 ;;Total ram usage:        3 bytes
 12797 ;; Hardware stack levels used:    1
 12798 ;; Hardware stack levels required when called:   10
 12799 ;; This function calls:
 12800 ;;		_lcdInst
 12801 ;;		_printf
 12802 ;;		_stopSignals
 12803 ;; This function is called by:
 12804 ;;		_Test
 12805 ;; This function uses a non-reentrant model
 12806 ;;
 12807                           
 12808                           	psect	text43
 12809  0044C0                     __ptext43:
 12810                           	opt stack 0
 12811  0044C0                     _arm:
 12812                           	opt stack 19
 12813                           
 12814                           ;Test.c: 640: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12815                           
 12816                           ; BSR set to: 0
 12817                           ;incstack = 0
 12818  0044C0  0E01               	movlw	1
 12819  0044C2  EC59  F02E         	call	_lcdInst
 12820  0044C6  0E68               	movlw	104
 12821  0044C8  0100               	movlb	0	; () banked
 12822  0044CA  6FAB               	movwf	??_arm& (0+255),b
 12823  0044CC  0EE4               	movlw	228
 12824  0044CE                     u10557:
 12825  0044CE  2EE8               	decfsz	wreg,f,c
 12826  0044D0  D7FE               	bra	u10557
 12827  0044D2  2FAB               	decfsz	??_arm& (0+255),f,b
 12828  0044D4  D7FC               	bra	u10557
 12829  0044D6  F000               	nop	
 12830  0044D8  0E80               	movlw	128
 12831  0044DA  EC59  F02E         	call	_lcdInst
 12832                           
 12833                           ;Test.c: 641: printf("D WILL RETURN   ");
 12834  0044DE  0EDA               	movlw	low STR_123
 12835  0044E0  0100               	movlb	0	; () banked
 12836  0044E2  6F8E               	movwf	printf@f& (0+255),b
 12837  0044E4  0EFB               	movlw	high STR_123
 12838  0044E6  0100               	movlb	0	; () banked
 12839  0044E8  6F8F               	movwf	(printf@f+1)& (0+255),b
 12840  0044EA  EC15  F00E         	call	_printf	;wreg free
 12841                           
 12842                           ;Test.c: 642: lcdInst(0b11000000);;
 12843  0044EE  0EC0               	movlw	192
 12844  0044F0  EC59  F02E         	call	_lcdInst
 12845                           
 12846                           ;Test.c: 643: printf("ELSE TOGGLES ARM");
 12847  0044F4  0E95               	movlw	low STR_132
 12848  0044F6  0100               	movlb	0	; () banked
 12849  0044F8  6F8E               	movwf	printf@f& (0+255),b
 12850  0044FA  0EFC               	movlw	high STR_132
 12851  0044FC  0100               	movlb	0	; () banked
 12852  0044FE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12853  004500  EC15  F00E         	call	_printf	;wreg free
 12854                           
 12855                           ;Test.c: 645: (INTCONbits.GIE = 1);
 12856  004504  8EF2               	bsf	intcon,7,c	;volatile
 12857                           
 12858                           ;Test.c: 646: machine_state = Sorting_state;
 12859  004506  0E01               	movlw	1
 12860  004508  0100               	movlb	0	; () banked
 12861  00450A  6FFC               	movwf	_machine_state& (0+255),b
 12862                           
 12863                           ; BSR set to: 0
 12864                           ;Test.c: 647: f_arm_position = 2;
 12865  00450C  0E00               	movlw	0
 12866  00450E  0100               	movlb	0	; () banked
 12867  004510  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12868  004512  0E02               	movlw	2
 12869  004514  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 12870                           
 12871                           ; BSR set to: 0
 12872                           ;Test.c: 648: timer2_counter = 0;
 12873  004516  0E00               	movlw	0
 12874  004518  6E74               	movwf	_timer2_counter+1,c	;volatile
 12875  00451A  0E00               	movlw	0
 12876  00451C  6E73               	movwf	_timer2_counter,c	;volatile
 12877                           
 12878                           ; BSR set to: 0
 12879                           ;Test.c: 649: LATBbits.LATB3 = 1;
 12880  00451E  868A               	bsf	3978,3,c	;volatile
 12881                           
 12882                           ; BSR set to: 0
 12883                           ;Test.c: 650: TMR2ON = 1;
 12884  004520  84CA               	bsf	4042,2,c	;volatile
 12885                           
 12886                           ; BSR set to: 0
 12887                           ;Test.c: 651: was_low_2 = 0;
 12888  004522  0E00               	movlw	0
 12889  004524  6E7A               	movwf	_was_low_2+1,c	;volatile
 12890  004526  0E00               	movlw	0
 12891  004528  6E79               	movwf	_was_low_2,c	;volatile
 12892                           
 12893                           ; BSR set to: 0
 12894                           ;Test.c: 653: int on = 0;
 12895  00452A  0E00               	movlw	0
 12896  00452C  0100               	movlb	0	; () banked
 12897  00452E  6FAD               	movwf	(arm@on+1)& (0+255),b
 12898  004530  0E00               	movlw	0
 12899  004532  6FAC               	movwf	arm@on& (0+255),b
 12900  004534                     l8833:
 12901                           
 12902                           ;Test.c: 655: if(on){
 12903  004534  0100               	movlb	0	; () banked
 12904  004536  51AC               	movf	arm@on& (0+255),w,b
 12905  004538  0100               	movlb	0	; () banked
 12906  00453A  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12907  00453C  B4D8               	btfsc	status,2,c
 12908  00453E  D01C               	goto	l8845
 12909                           
 12910                           ; BSR set to: 0
 12911                           ;Test.c: 656: on = !on;
 12912  004540  0100               	movlb	0	; () banked
 12913  004542  51AC               	movf	arm@on& (0+255),w,b
 12914  004544  0100               	movlb	0	; () banked
 12915  004546  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12916  004548  A4D8               	btfss	status,2,c
 12917  00454A  D002               	goto	u7790
 12918  00454C  0E01               	movlw	1
 12919  00454E  D001               	goto	u7800
 12920  004550                     u7790:
 12921  004550  0E00               	movlw	0
 12922  004552                     u7800:
 12923  004552  0100               	movlb	0	; () banked
 12924  004554  6FAC               	movwf	arm@on& (0+255),b
 12925  004556  6BAD               	clrf	(arm@on+1)& (0+255),b
 12926                           
 12927                           ;Test.c: 657: while(PORTBbits.RB1 == 0){
 12928  004558  D005               	goto	l8839
 12929  00455A                     l8837:
 12930                           
 12931                           ; BSR set to: 0
 12932                           ;Test.c: 658: f_arm_position = 0;
 12933  00455A  0E00               	movlw	0
 12934  00455C  0100               	movlb	0	; () banked
 12935  00455E  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12936  004560  0E00               	movlw	0
 12937  004562  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 12938  004564                     l8839:
 12939                           
 12940                           ; BSR set to: 0
 12941  004564  A281               	btfss	3969,1,c	;volatile
 12942  004566  D7F9               	goto	l8837
 12943                           
 12944                           ; BSR set to: 0
 12945                           ;Test.c: 659: }
 12946                           ;Test.c: 660: if(PORTB >> 4 == 0b1111){
 12947                           
 12948                           ; BSR set to: 0
 12949  004568  3881               	swapf	3969,w,c	;volatile
 12950  00456A  0B0F               	andlw	15
 12951  00456C  0A0F               	xorlw	15
 12952  00456E  B4D8               	btfsc	status,2,c
 12953  004570  D01F               	goto	l1460
 12954  004572                     l1461:
 12955  004572  A281               	btfss	3969,1,c	;volatile
 12956  004574  D7DF               	goto	l8833
 12957  004576  D7FD               	goto	l1461
 12958  004578                     l8845:
 12959                           
 12960                           ;Test.c: 665: else{
 12961                           ;Test.c: 666: on = !on;
 12962  004578  0100               	movlb	0	; () banked
 12963  00457A  51AC               	movf	arm@on& (0+255),w,b
 12964  00457C  0100               	movlb	0	; () banked
 12965  00457E  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12966  004580  A4D8               	btfss	status,2,c
 12967  004582  D002               	goto	u7840
 12968  004584  0E01               	movlw	1
 12969  004586  D001               	goto	u7850
 12970  004588                     u7840:
 12971  004588  0E00               	movlw	0
 12972  00458A                     u7850:
 12973  00458A  0100               	movlb	0	; () banked
 12974  00458C  6FAC               	movwf	arm@on& (0+255),b
 12975  00458E  6BAD               	clrf	(arm@on+1)& (0+255),b
 12976                           
 12977                           ;Test.c: 667: while(PORTBbits.RB1 == 0){
 12978  004590  D005               	goto	l8849
 12979  004592                     l8847:
 12980                           
 12981                           ; BSR set to: 0
 12982                           ;Test.c: 668: f_arm_position = 1;
 12983  004592  0E00               	movlw	0
 12984  004594  0100               	movlb	0	; () banked
 12985  004596  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12986  004598  0E01               	movlw	1
 12987  00459A  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 12988  00459C                     l8849:
 12989                           
 12990                           ; BSR set to: 0
 12991  00459C  A281               	btfss	3969,1,c	;volatile
 12992  00459E  D7F9               	goto	l8847
 12993                           
 12994                           ; BSR set to: 0
 12995                           ;Test.c: 669: }
 12996                           ;Test.c: 670: if(PORTB >> 4 == 0b1111){
 12997                           
 12998                           ; BSR set to: 0
 12999  0045A0  3881               	swapf	3969,w,c	;volatile
 13000  0045A2  0B0F               	andlw	15
 13001  0045A4  0A0F               	xorlw	15
 13002  0045A6  B4D8               	btfsc	status,2,c
 13003  0045A8  D003               	goto	l1460
 13004  0045AA                     l1469:
 13005  0045AA  A281               	btfss	3969,1,c	;volatile
 13006  0045AC  D7C3               	goto	l8833
 13007  0045AE  D7FD               	goto	l1469
 13008  0045B0                     l1460:
 13009                           
 13010                           ; BSR set to: 0
 13011                           ;Test.c: 674: }
 13012                           ;Test.c: 675: }
 13013                           ;Test.c: 677: (INTCONbits.GIE = 0);
 13014  0045B0  9EF2               	bcf	intcon,7,c	;volatile
 13015                           
 13016                           ; BSR set to: 0
 13017                           ;Test.c: 678: stopSignals();
 13018  0045B2  EC0B  F02E         	call	_stopSignals	;wreg free
 13019                           
 13020                           ;Test.c: 679: machine_state = Testing_state;
 13021  0045B6  0E03               	movlw	3
 13022  0045B8  0100               	movlb	0	; () banked
 13023  0045BA  6FFC               	movwf	_machine_state& (0+255),b
 13024                           
 13025                           ; BSR set to: 0
 13026  0045BC  0012               	return		;funcret
 13027  0045BE                     __end_of_arm:
 13028                           	opt stack 0
 13029                           tblptru	equ	0xFF8
 13030                           tblptrh	equ	0xFF7
 13031                           tblptrl	equ	0xFF6
 13032                           tablat	equ	0xFF5
 13033                           prodh	equ	0xFF4
 13034                           prodl	equ	0xFF3
 13035                           intcon	equ	0xFF2
 13036                           intcon2	equ	0xFF1
 13037                           intcon3	equ	0xFF0
 13038                           postinc0	equ	0xFEE
 13039                           wreg	equ	0xFE8
 13040                           postdec1	equ	0xFE5
 13041                           fsr1l	equ	0xFE1
 13042                           indf2	equ	0xFDF
 13043                           postinc2	equ	0xFDE
 13044                           postdec2	equ	0xFDD
 13045                           fsr2h	equ	0xFDA
 13046                           fsr2l	equ	0xFD9
 13047                           status	equ	0xFD8
 13048                           
 13049 ;; *************** function _algorithmTest *****************
 13050 ;; Defined at:
 13051 ;;		line 79 in file "Test.c"
 13052 ;; Parameters:    Size  Location     Type
 13053 ;;		None
 13054 ;; Auto vars:     Size  Location     Type
 13055 ;;		None
 13056 ;; Return value:  Size  Location     Type
 13057 ;;                  1    wreg      void 
 13058 ;; Registers used:
 13059 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13060 ;; Tracked objects:
 13061 ;;		On entry : 0/0
 13062 ;;		On exit  : 0/0
 13063 ;;		Unchanged: 0/0
 13064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13067 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13068 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13069 ;;Total ram usage:        2 bytes
 13070 ;; Hardware stack levels used:    1
 13071 ;; Hardware stack levels required when called:   10
 13072 ;; This function calls:
 13073 ;;		_lcdInst
 13074 ;;		_printf
 13075 ;; This function is called by:
 13076 ;;		_Test
 13077 ;; This function uses a non-reentrant model
 13078 ;;
 13079                           
 13080                           	psect	text44
 13081  004788                     __ptext44:
 13082                           	opt stack 0
 13083  004788                     _algorithmTest:
 13084                           	opt stack 19
 13085                           
 13086                           ;Test.c: 81: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 13087                           
 13088                           ; BSR set to: 0
 13089                           ;incstack = 0
 13090  004788  0E01               	movlw	1
 13091  00478A  EC59  F02E         	call	_lcdInst
 13092  00478E  0E68               	movlw	104
 13093  004790  0100               	movlb	0	; () banked
 13094  004792  6FAB               	movwf	??_algorithmTest& (0+255),b
 13095  004794  0EE4               	movlw	228
 13096  004796                     u10567:
 13097  004796  2EE8               	decfsz	wreg,f,c
 13098  004798  D7FE               	bra	u10567
 13099  00479A  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13100  00479C  D7FC               	bra	u10567
 13101  00479E  F000               	nop	
 13102  0047A0  0E80               	movlw	128
 13103  0047A2  EC59  F02E         	call	_lcdInst
 13104                           
 13105                           ;Test.c: 82: printf("ALGORITHM TEST");
 13106  0047A6  0EF5               	movlw	low STR_75
 13107  0047A8  0100               	movlb	0	; () banked
 13108  0047AA  6F8E               	movwf	printf@f& (0+255),b
 13109  0047AC  0EFE               	movlw	high STR_75
 13110  0047AE  0100               	movlb	0	; () banked
 13111  0047B0  6F8F               	movwf	(printf@f+1)& (0+255),b
 13112  0047B2  EC15  F00E         	call	_printf	;wreg free
 13113                           
 13114                           ;Test.c: 83: lcdInst(0b11000000);;
 13115  0047B6  0EC0               	movlw	192
 13116  0047B8  EC59  F02E         	call	_lcdInst
 13117                           
 13118                           ;Test.c: 84: printf("PUSH TO START");
 13119  0047BC  0E2E               	movlw	low STR_76
 13120  0047BE  0100               	movlb	0	; () banked
 13121  0047C0  6F8E               	movwf	printf@f& (0+255),b
 13122  0047C2  0EFF               	movlw	high STR_76
 13123  0047C4  0100               	movlb	0	; () banked
 13124  0047C6  6F8F               	movwf	(printf@f+1)& (0+255),b
 13125  0047C8  EC15  F00E         	call	_printf	;wreg free
 13126                           
 13127                           ;Test.c: 85: _delay((unsigned long)((100)*(32000000/4000.0)));
 13128  0047CC  0E05               	movlw	5
 13129  0047CE  0100               	movlb	0	; () banked
 13130  0047D0  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 13131  0047D2  0E0F               	movlw	15
 13132  0047D4  0100               	movlb	0	; () banked
 13133  0047D6  6FAB               	movwf	??_algorithmTest& (0+255),b
 13134  0047D8  0EF1               	movlw	241
 13135  0047DA                     u10577:
 13136  0047DA  2EE8               	decfsz	wreg,f,c
 13137  0047DC  D7FE               	bra	u10577
 13138  0047DE  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13139  0047E0  D7FC               	bra	u10577
 13140  0047E2  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 13141  0047E4  D7FA               	bra	u10577
 13142  0047E6                     l1256:
 13143  0047E6  A281               	btfss	3969,1,c	;volatile
 13144  0047E8  D7FE               	goto	l1256
 13145  0047EA                     l1259:
 13146  0047EA  B281               	btfsc	3969,1,c	;volatile
 13147  0047EC  D7FE               	goto	l1259
 13148                           
 13149                           ;Test.c: 88: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 13150  0047EE  0E01               	movlw	1
 13151  0047F0  EC59  F02E         	call	_lcdInst
 13152  0047F4  0E68               	movlw	104
 13153  0047F6  0100               	movlb	0	; () banked
 13154  0047F8  6FAB               	movwf	??_algorithmTest& (0+255),b
 13155  0047FA  0EE4               	movlw	228
 13156  0047FC                     u10587:
 13157  0047FC  2EE8               	decfsz	wreg,f,c
 13158  0047FE  D7FE               	bra	u10587
 13159  004800  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13160  004802  D7FC               	bra	u10587
 13161  004804  F000               	nop	
 13162  004806  0E80               	movlw	128
 13163  004808  EC59  F02E         	call	_lcdInst
 13164                           
 13165                           ;Test.c: 93: printf("ALG1: 9 POPNOTAB");
 13166  00480C  0E40               	movlw	low STR_77
 13167  00480E  0100               	movlb	0	; () banked
 13168  004810  6F8E               	movwf	printf@f& (0+255),b
 13169  004812  0EFC               	movlw	high STR_77
 13170  004814  0100               	movlb	0	; () banked
 13171  004816  6F8F               	movwf	(printf@f+1)& (0+255),b
 13172  004818  EC15  F00E         	call	_printf	;wreg free
 13173                           
 13174                           ;Test.c: 100: printf("ALG2: 12 CANS");
 13175  00481C  0E12               	movlw	low STR_78
 13176  00481E  0100               	movlb	0	; () banked
 13177  004820  6F8E               	movwf	printf@f& (0+255),b
 13178  004822  0EFF               	movlw	high STR_78
 13179  004824  0100               	movlb	0	; () banked
 13180  004826  6F8F               	movwf	(printf@f+1)& (0+255),b
 13181  004828  EC15  F00E         	call	_printf	;wreg free
 13182                           
 13183                           ;Test.c: 109: printf("ALG3: 1 CAN");
 13184  00482C  0E65               	movlw	low STR_79
 13185  00482E  0100               	movlb	0	; () banked
 13186  004830  6F8E               	movwf	printf@f& (0+255),b
 13187  004832  0EFF               	movlw	high STR_79
 13188  004834  0100               	movlb	0	; () banked
 13189  004836  6F8F               	movwf	(printf@f+1)& (0+255),b
 13190  004838  EC15  F00E         	call	_printf	;wreg free
 13191                           
 13192                           ;Test.c: 115: printf("ALG4: ALL CANS");
 13193  00483C  0ED7               	movlw	low STR_80
 13194  00483E  0100               	movlb	0	; () banked
 13195  004840  6F8E               	movwf	printf@f& (0+255),b
 13196  004842  0EFE               	movlw	high STR_80
 13197  004844  0100               	movlb	0	; () banked
 13198  004846  6F8F               	movwf	(printf@f+1)& (0+255),b
 13199  004848  EC15  F00E         	call	_printf	;wreg free
 13200                           
 13201                           ;Test.c: 120: printf("ALG5: NO CANS");
 13202  00484C  0E20               	movlw	low STR_81
 13203  00484E  0100               	movlb	0	; () banked
 13204  004850  6F8E               	movwf	printf@f& (0+255),b
 13205  004852  0EFF               	movlw	high STR_81
 13206  004854  0100               	movlb	0	; () banked
 13207  004856  6F8F               	movwf	(printf@f+1)& (0+255),b
 13208  004858  EC15  F00E         	call	_printf	;wreg free
 13209  00485C  0012               	return		;funcret
 13210  00485E                     __end_of_algorithmTest:
 13211                           	opt stack 0
 13212                           tblptru	equ	0xFF8
 13213                           tblptrh	equ	0xFF7
 13214                           tblptrl	equ	0xFF6
 13215                           tablat	equ	0xFF5
 13216                           prodh	equ	0xFF4
 13217                           prodl	equ	0xFF3
 13218                           intcon	equ	0xFF2
 13219                           intcon2	equ	0xFF1
 13220                           intcon3	equ	0xFF0
 13221                           postinc0	equ	0xFEE
 13222                           wreg	equ	0xFE8
 13223                           postdec1	equ	0xFE5
 13224                           fsr1l	equ	0xFE1
 13225                           indf2	equ	0xFDF
 13226                           postinc2	equ	0xFDE
 13227                           postdec2	equ	0xFDD
 13228                           fsr2h	equ	0xFDA
 13229                           fsr2l	equ	0xFD9
 13230                           status	equ	0xFD8
 13231                           
 13232 ;; *************** function _actuatorTest *****************
 13233 ;; Defined at:
 13234 ;;		line 202 in file "Test.c"
 13235 ;; Parameters:    Size  Location     Type
 13236 ;;		None
 13237 ;; Auto vars:     Size  Location     Type
 13238 ;;  i               1   45[BANK0 ] unsigned char 
 13239 ;;  i               1   67[BANK0 ] unsigned char 
 13240 ;;  i               1   66[BANK0 ] unsigned char 
 13241 ;;  i               1   65[BANK0 ] unsigned char 
 13242 ;;  i               1   64[BANK0 ] unsigned char 
 13243 ;;  i               1   63[BANK0 ] unsigned char 
 13244 ;;  i               1   62[BANK0 ] unsigned char 
 13245 ;;  i               1   61[BANK0 ] unsigned char 
 13246 ;;  i               1   60[BANK0 ] unsigned char 
 13247 ;;  i               1   59[BANK0 ] unsigned char 
 13248 ;;  i               1   58[BANK0 ] unsigned char 
 13249 ;;  i               1   57[BANK0 ] unsigned char 
 13250 ;;  i               1   56[BANK0 ] unsigned char 
 13251 ;;  i               1   55[BANK0 ] unsigned char 
 13252 ;;  i               1   54[BANK0 ] unsigned char 
 13253 ;;  i               1   53[BANK0 ] unsigned char 
 13254 ;;  i               1   52[BANK0 ] unsigned char 
 13255 ;;  i               1   51[BANK0 ] unsigned char 
 13256 ;;  i               1   50[BANK0 ] unsigned char 
 13257 ;;  i               1   49[BANK0 ] unsigned char 
 13258 ;;  i               1   48[BANK0 ] unsigned char 
 13259 ;;  i               1   47[BANK0 ] unsigned char 
 13260 ;;  i               1   46[BANK0 ] unsigned char 
 13261 ;;  i               2   68[BANK0 ] int 
 13262 ;; Return value:  Size  Location     Type
 13263 ;;                  1    wreg      void 
 13264 ;; Registers used:
 13265 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13266 ;; Tracked objects:
 13267 ;;		On entry : 0/0
 13268 ;;		On exit  : 0/0
 13269 ;;		Unchanged: 0/0
 13270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13272 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13273 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13274 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13275 ;;Total ram usage:       27 bytes
 13276 ;; Hardware stack levels used:    1
 13277 ;; Hardware stack levels required when called:   10
 13278 ;; This function calls:
 13279 ;;		_lcdInst
 13280 ;;		_printf
 13281 ;;		_updateServoPosition
 13282 ;; This function is called by:
 13283 ;;		_Test
 13284 ;; This function uses a non-reentrant model
 13285 ;;
 13286                           
 13287                           	psect	text45
 13288  0008DA                     __ptext45:
 13289                           	opt stack 0
 13290  0008DA                     _actuatorTest:
 13291                           	opt stack 19
 13292                           
 13293                           ;Test.c: 204: int i = 0;
 13294                           
 13295                           ;incstack = 0
 13296  0008DA  0E00               	movlw	0
 13297  0008DC  0100               	movlb	0	; () banked
 13298  0008DE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13299  0008E0  0E00               	movlw	0
 13300  0008E2  6FC4               	movwf	actuatorTest@i& (0+255),b
 13301                           
 13302                           ; BSR set to: 0
 13303                           ;Test.c: 206: (INTCONbits.GIE = 1);
 13304  0008E4  8EF2               	bsf	intcon,7,c	;volatile
 13305                           
 13306                           ; BSR set to: 0
 13307                           ;Test.c: 207: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13308  0008E6  0E01               	movlw	1
 13309  0008E8  EC59  F02E         	call	_lcdInst
 13310  0008EC  0E68               	movlw	104
 13311  0008EE  0100               	movlb	0	; () banked
 13312  0008F0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13313  0008F2  0EE4               	movlw	228
 13314  0008F4                     u10597:
 13315  0008F4  2EE8               	decfsz	wreg,f,c
 13316  0008F6  D7FE               	bra	u10597
 13317  0008F8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13318  0008FA  D7FC               	bra	u10597
 13319  0008FC  F000               	nop	
 13320  0008FE  0E80               	movlw	128
 13321  000900  EC59  F02E         	call	_lcdInst
 13322                           
 13323                           ;Test.c: 208: printf("ACTUATORS");
 13324  000904  0E91               	movlw	low STR_93
 13325  000906  0100               	movlb	0	; () banked
 13326  000908  6F8E               	movwf	printf@f& (0+255),b
 13327  00090A  0EFF               	movlw	high STR_93
 13328  00090C  0100               	movlb	0	; () banked
 13329  00090E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13330  000910  EC15  F00E         	call	_printf	;wreg free
 13331                           
 13332                           ;Test.c: 209: lcdInst(0b11000000);;
 13333  000914  0EC0               	movlw	192
 13334  000916  EC59  F02E         	call	_lcdInst
 13335                           
 13336                           ;Test.c: 210: printf("PUSH TO START");
 13337  00091A  0E2E               	movlw	low STR_76
 13338  00091C  0100               	movlb	0	; () banked
 13339  00091E  6F8E               	movwf	printf@f& (0+255),b
 13340  000920  0EFF               	movlw	high STR_76
 13341  000922  0100               	movlb	0	; () banked
 13342  000924  6F8F               	movwf	(printf@f+1)& (0+255),b
 13343  000926  EC15  F00E         	call	_printf	;wreg free
 13344                           
 13345                           ;Test.c: 211: _delay((unsigned long)((100)*(32000000/4000.0)));
 13346  00092A  0E05               	movlw	5
 13347  00092C  0100               	movlb	0	; () banked
 13348  00092E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13349  000930  0E0F               	movlw	15
 13350  000932  0100               	movlb	0	; () banked
 13351  000934  6FAB               	movwf	??_actuatorTest& (0+255),b
 13352  000936  0EF1               	movlw	241
 13353  000938                     u10607:
 13354  000938  2EE8               	decfsz	wreg,f,c
 13355  00093A  D7FE               	bra	u10607
 13356  00093C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13357  00093E  D7FC               	bra	u10607
 13358  000940  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13359  000942  D7FA               	bra	u10607
 13360  000944                     l1291:
 13361  000944  A281               	btfss	3969,1,c	;volatile
 13362  000946  D7FE               	goto	l1291
 13363  000948                     l1294:
 13364  000948  B281               	btfsc	3969,1,c	;volatile
 13365  00094A  D7FE               	goto	l1294
 13366                           
 13367                           ;Test.c: 214: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13368  00094C  0E01               	movlw	1
 13369  00094E  EC59  F02E         	call	_lcdInst
 13370  000952  0E68               	movlw	104
 13371  000954  0100               	movlb	0	; () banked
 13372  000956  6FAB               	movwf	??_actuatorTest& (0+255),b
 13373  000958  0EE4               	movlw	228
 13374  00095A                     u10617:
 13375  00095A  2EE8               	decfsz	wreg,f,c
 13376  00095C  D7FE               	bra	u10617
 13377  00095E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13378  000960  D7FC               	bra	u10617
 13379  000962  F000               	nop	
 13380  000964  0E80               	movlw	128
 13381  000966  EC59  F02E         	call	_lcdInst
 13382                           
 13383                           ;Test.c: 219: printf("TST: DC MOTORS");
 13384  00096A  0EE6               	movlw	low STR_95
 13385  00096C  0100               	movlb	0	; () banked
 13386  00096E  6F8E               	movwf	printf@f& (0+255),b
 13387  000970  0EFE               	movlw	high STR_95
 13388  000972  0100               	movlb	0	; () banked
 13389  000974  6F8F               	movwf	(printf@f+1)& (0+255),b
 13390  000976  EC15  F00E         	call	_printf	;wreg free
 13391                           
 13392                           ;Test.c: 220: lcdInst(0b11000000);;
 13393  00097A  0EC0               	movlw	192
 13394  00097C  EC59  F02E         	call	_lcdInst
 13395                           
 13396                           ;Test.c: 221: printf("PIN RA5 HIGH.");
 13397  000980  0E04               	movlw	low STR_96
 13398  000982  0100               	movlb	0	; () banked
 13399  000984  6F8E               	movwf	printf@f& (0+255),b
 13400  000986  0EFF               	movlw	high STR_96
 13401  000988  0100               	movlb	0	; () banked
 13402  00098A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13403  00098C  EC15  F00E         	call	_printf	;wreg free
 13404                           
 13405                           ;Test.c: 222: LATBbits.LATB2 = 1;
 13406  000990  848A               	bsf	3978,2,c	;volatile
 13407                           
 13408                           ;Test.c: 223: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 13409  000992  0E00               	movlw	0
 13410  000994  0100               	movlb	0	; () banked
 13411  000996  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13412  000998  0E00               	movlw	0
 13413  00099A  6FC4               	movwf	actuatorTest@i& (0+255),b
 13414                           
 13415                           ; BSR set to: 0
 13416  00099C  0100               	movlb	0	; () banked
 13417  00099E  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13418  0009A0  D008               	goto	l8419
 13419  0009A2  0100               	movlb	0	; () banked
 13420  0009A4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13421  0009A6  E123               	bnz	l1298
 13422  0009A8  0E05               	movlw	5
 13423  0009AA  0100               	movlb	0	; () banked
 13424  0009AC  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13425  0009AE  B0D8               	btfsc	status,0,c
 13426  0009B0  D01E               	goto	l1298
 13427  0009B2                     l8419:
 13428                           
 13429                           ; BSR set to: 0
 13430  0009B2  0E00               	movlw	0
 13431  0009B4  0100               	movlb	0	; () banked
 13432  0009B6  6FAD               	movwf	actuatorTest@i_1738& (0+255),b
 13433  0009B8                     l8421:
 13434                           
 13435                           ; BSR set to: 0
 13436  0009B8  0E63               	movlw	99
 13437  0009BA  0100               	movlb	0	; () banked
 13438  0009BC  65AD               	cpfsgt	actuatorTest@i_1738& (0+255),b
 13439  0009BE  D001               	goto	l8425
 13440  0009C0  D00C               	goto	l8429
 13441  0009C2                     l8425:
 13442                           
 13443                           ; BSR set to: 0
 13444  0009C2  0E68               	movlw	104
 13445  0009C4  0100               	movlb	0	; () banked
 13446  0009C6  6FAB               	movwf	??_actuatorTest& (0+255),b
 13447  0009C8  0EE4               	movlw	228
 13448  0009CA                     u10627:
 13449  0009CA  2EE8               	decfsz	wreg,f,c
 13450  0009CC  D7FE               	bra	u10627
 13451  0009CE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13452  0009D0  D7FC               	bra	u10627
 13453  0009D2  F000               	nop	
 13454  0009D4  0100               	movlb	0	; () banked
 13455  0009D6  2BAD               	incf	actuatorTest@i_1738& (0+255),f,b
 13456  0009D8  D7EF               	goto	l8421
 13457  0009DA                     l8429:
 13458                           
 13459                           ; BSR set to: 0
 13460  0009DA  0100               	movlb	0	; () banked
 13461  0009DC  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13462  0009DE  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13463                           
 13464                           ; BSR set to: 0
 13465  0009E0  0100               	movlb	0	; () banked
 13466  0009E2  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13467  0009E4  D7E6               	goto	l8419
 13468  0009E6  0100               	movlb	0	; () banked
 13469  0009E8  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13470  0009EA  E101               	bnz	u7270
 13471  0009EC  D7DD               	goto	L13
 13472  0009EE                     u7270:
 13473  0009EE                     l1298:
 13474                           
 13475                           ; BSR set to: 0
 13476                           ;Test.c: 224: LATBbits.LATB2 = 0;
 13477  0009EE  948A               	bcf	3978,2,c	;volatile
 13478                           
 13479                           ; BSR set to: 0
 13480                           ;Test.c: 225: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13481  0009F0  0E01               	movlw	1
 13482  0009F2  EC59  F02E         	call	_lcdInst
 13483  0009F6  0E68               	movlw	104
 13484  0009F8  0100               	movlb	0	; () banked
 13485  0009FA  6FAB               	movwf	??_actuatorTest& (0+255),b
 13486  0009FC  0EE4               	movlw	228
 13487  0009FE                     u10637:
 13488  0009FE  2EE8               	decfsz	wreg,f,c
 13489  000A00  D7FE               	bra	u10637
 13490  000A02  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13491  000A04  D7FC               	bra	u10637
 13492  000A06  F000               	nop	
 13493  000A08  0E80               	movlw	128
 13494  000A0A  EC59  F02E         	call	_lcdInst
 13495                           
 13496                           ;Test.c: 231: printf("TST: COND SOLN'D");
 13497  000A0E  0E51               	movlw	low STR_97
 13498  000A10  0100               	movlb	0	; () banked
 13499  000A12  6F8E               	movwf	printf@f& (0+255),b
 13500  000A14  0EFC               	movlw	high STR_97
 13501  000A16  0100               	movlb	0	; () banked
 13502  000A18  6F8F               	movwf	(printf@f+1)& (0+255),b
 13503  000A1A  EC15  F00E         	call	_printf	;wreg free
 13504                           
 13505                           ;Test.c: 232: lcdInst(0b11000000);;
 13506  000A1E  0EC0               	movlw	192
 13507  000A20  EC59  F02E         	call	_lcdInst
 13508                           
 13509                           ;Test.c: 233: printf("PIN RA3...");
 13510  000A24  0E71               	movlw	low STR_98
 13511  000A26  0100               	movlb	0	; () banked
 13512  000A28  6F8E               	movwf	printf@f& (0+255),b
 13513  000A2A  0EFF               	movlw	high STR_98
 13514  000A2C  0100               	movlb	0	; () banked
 13515  000A2E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13516  000A30  EC15  F00E         	call	_printf	;wreg free
 13517                           
 13518                           ;Test.c: 234: for(i=0;i<5;i++){
 13519  000A34  0E00               	movlw	0
 13520  000A36  0100               	movlb	0	; () banked
 13521  000A38  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13522  000A3A  0E00               	movlw	0
 13523  000A3C  6FC4               	movwf	actuatorTest@i& (0+255),b
 13524                           
 13525                           ; BSR set to: 0
 13526  000A3E  0100               	movlb	0	; () banked
 13527  000A40  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13528  000A42  D008               	goto	l1301
 13529  000A44  0100               	movlb	0	; () banked
 13530  000A46  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13531  000A48  E12C               	bnz	l1302
 13532  000A4A  0E05               	movlw	5
 13533  000A4C  0100               	movlb	0	; () banked
 13534  000A4E  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13535  000A50  B0D8               	btfsc	status,0,c
 13536  000A52  D027               	goto	l1302
 13537  000A54                     l1301:
 13538                           
 13539                           ; BSR set to: 0
 13540                           ;Test.c: 235: LATAbits.LATA3 = 1;
 13541  000A54  8689               	bsf	3977,3,c	;volatile
 13542                           
 13543                           ; BSR set to: 0
 13544                           ;Test.c: 236: _delay((unsigned long)((300)*(32000000/4000.0)));
 13545  000A56  0E0D               	movlw	13
 13546  000A58  0100               	movlb	0	; () banked
 13547  000A5A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13548  000A5C  0E2D               	movlw	45
 13549  000A5E  0100               	movlb	0	; () banked
 13550  000A60  6FAB               	movwf	??_actuatorTest& (0+255),b
 13551  000A62  0ED7               	movlw	215
 13552  000A64                     u10647:
 13553  000A64  2EE8               	decfsz	wreg,f,c
 13554  000A66  D7FE               	bra	u10647
 13555  000A68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13556  000A6A  D7FC               	bra	u10647
 13557  000A6C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13558  000A6E  D7FA               	bra	u10647
 13559  000A70  D000               	nop2	
 13560                           
 13561                           ;Test.c: 237: LATAbits.LATA3 = !1;
 13562  000A72  9689               	bcf	3977,3,c	;volatile
 13563                           
 13564                           ;Test.c: 238: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 13565  000A74  0E1D               	movlw	29
 13566  000A76  0100               	movlb	0	; () banked
 13567  000A78  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13568  000A7A  0E69               	movlw	105
 13569  000A7C  0100               	movlb	0	; () banked
 13570  000A7E  6FAB               	movwf	??_actuatorTest& (0+255),b
 13571  000A80  0EA5               	movlw	165
 13572  000A82                     u10657:
 13573  000A82  2EE8               	decfsz	wreg,f,c
 13574  000A84  D7FE               	bra	u10657
 13575  000A86  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13576  000A88  D7FC               	bra	u10657
 13577  000A8A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13578  000A8C  D7FA               	bra	u10657
 13579  000A8E  0100               	movlb	0	; () banked
 13580  000A90  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13581  000A92  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13582  000A94  0100               	movlb	0	; () banked
 13583  000A96  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13584  000A98  D7DD               	goto	l1301
 13585  000A9A  0100               	movlb	0	; () banked
 13586  000A9C  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13587  000A9E  E101               	bnz	u7290
 13588  000AA0  D7D4               	goto	L14
 13589  000AA2                     u7290:
 13590  000AA2                     l1302:
 13591                           
 13592                           ; BSR set to: 0
 13593                           ;Test.c: 239: }
 13594                           ;Test.c: 240: LATAbits.LATA3 = !1;
 13595  000AA2  9689               	bcf	3977,3,c	;volatile
 13596                           
 13597                           ; BSR set to: 0
 13598                           ;Test.c: 241: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13599  000AA4  0E01               	movlw	1
 13600  000AA6  EC59  F02E         	call	_lcdInst
 13601  000AAA  0E68               	movlw	104
 13602  000AAC  0100               	movlb	0	; () banked
 13603  000AAE  6FAB               	movwf	??_actuatorTest& (0+255),b
 13604  000AB0  0EE4               	movlw	228
 13605  000AB2                     u10667:
 13606  000AB2  2EE8               	decfsz	wreg,f,c
 13607  000AB4  D7FE               	bra	u10667
 13608  000AB6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13609  000AB8  D7FC               	bra	u10667
 13610  000ABA  F000               	nop	
 13611  000ABC  0E80               	movlw	128
 13612  000ABE  EC59  F02E         	call	_lcdInst
 13613                           
 13614                           ;Test.c: 247: printf("TST: PUSH SOLN'D");
 13615  000AC2  0E62               	movlw	low STR_99
 13616  000AC4  0100               	movlb	0	; () banked
 13617  000AC6  6F8E               	movwf	printf@f& (0+255),b
 13618  000AC8  0EFC               	movlw	high STR_99
 13619  000ACA  0100               	movlb	0	; () banked
 13620  000ACC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13621  000ACE  EC15  F00E         	call	_printf	;wreg free
 13622                           
 13623                           ;Test.c: 248: lcdInst(0b11000000);;
 13624  000AD2  0EC0               	movlw	192
 13625  000AD4  EC59  F02E         	call	_lcdInst
 13626                           
 13627                           ;Test.c: 249: printf("PIN RA4...");
 13628  000AD8  0E7C               	movlw	low STR_100
 13629  000ADA  0100               	movlb	0	; () banked
 13630  000ADC  6F8E               	movwf	printf@f& (0+255),b
 13631  000ADE  0EFF               	movlw	high STR_100
 13632  000AE0  0100               	movlb	0	; () banked
 13633  000AE2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13634  000AE4  EC15  F00E         	call	_printf	;wreg free
 13635                           
 13636                           ;Test.c: 250: for(i=0;i<5;i++){
 13637  000AE8  0E00               	movlw	0
 13638  000AEA  0100               	movlb	0	; () banked
 13639  000AEC  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13640  000AEE  0E00               	movlw	0
 13641  000AF0  6FC4               	movwf	actuatorTest@i& (0+255),b
 13642                           
 13643                           ; BSR set to: 0
 13644  000AF2  0100               	movlb	0	; () banked
 13645  000AF4  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13646  000AF6  D008               	goto	l1303
 13647  000AF8  0100               	movlb	0	; () banked
 13648  000AFA  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13649  000AFC  E12C               	bnz	l1304
 13650  000AFE  0E05               	movlw	5
 13651  000B00  0100               	movlb	0	; () banked
 13652  000B02  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13653  000B04  B0D8               	btfsc	status,0,c
 13654  000B06  D027               	goto	l1304
 13655  000B08                     l1303:
 13656                           
 13657                           ; BSR set to: 0
 13658                           ;Test.c: 251: LATAbits.LATA4 = 1;
 13659  000B08  8889               	bsf	3977,4,c	;volatile
 13660                           
 13661                           ; BSR set to: 0
 13662                           ;Test.c: 252: _delay((unsigned long)((300)*(32000000/4000.0)));
 13663  000B0A  0E0D               	movlw	13
 13664  000B0C  0100               	movlb	0	; () banked
 13665  000B0E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13666  000B10  0E2D               	movlw	45
 13667  000B12  0100               	movlb	0	; () banked
 13668  000B14  6FAB               	movwf	??_actuatorTest& (0+255),b
 13669  000B16  0ED7               	movlw	215
 13670  000B18                     u10677:
 13671  000B18  2EE8               	decfsz	wreg,f,c
 13672  000B1A  D7FE               	bra	u10677
 13673  000B1C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13674  000B1E  D7FC               	bra	u10677
 13675  000B20  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13676  000B22  D7FA               	bra	u10677
 13677  000B24  D000               	nop2	
 13678                           
 13679                           ;Test.c: 253: LATAbits.LATA4 = !1;
 13680  000B26  9889               	bcf	3977,4,c	;volatile
 13681                           
 13682                           ;Test.c: 254: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 13683  000B28  0E1D               	movlw	29
 13684  000B2A  0100               	movlb	0	; () banked
 13685  000B2C  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13686  000B2E  0E69               	movlw	105
 13687  000B30  0100               	movlb	0	; () banked
 13688  000B32  6FAB               	movwf	??_actuatorTest& (0+255),b
 13689  000B34  0EA5               	movlw	165
 13690  000B36                     u10687:
 13691  000B36  2EE8               	decfsz	wreg,f,c
 13692  000B38  D7FE               	bra	u10687
 13693  000B3A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13694  000B3C  D7FC               	bra	u10687
 13695  000B3E  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13696  000B40  D7FA               	bra	u10687
 13697  000B42  0100               	movlb	0	; () banked
 13698  000B44  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13699  000B46  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13700  000B48  0100               	movlb	0	; () banked
 13701  000B4A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13702  000B4C  D7DD               	goto	l1303
 13703  000B4E  0100               	movlb	0	; () banked
 13704  000B50  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13705  000B52  E101               	bnz	u7310
 13706  000B54  D7D4               	goto	L15
 13707  000B56                     u7310:
 13708  000B56                     l1304:
 13709                           
 13710                           ; BSR set to: 0
 13711                           ;Test.c: 255: }
 13712                           ;Test.c: 256: LATAbits.LATA4 = !1;
 13713  000B56  9889               	bcf	3977,4,c	;volatile
 13714                           
 13715                           ; BSR set to: 0
 13716                           ;Test.c: 257: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13717  000B58  0E01               	movlw	1
 13718  000B5A  EC59  F02E         	call	_lcdInst
 13719  000B5E  0E68               	movlw	104
 13720  000B60  0100               	movlb	0	; () banked
 13721  000B62  6FAB               	movwf	??_actuatorTest& (0+255),b
 13722  000B64  0EE4               	movlw	228
 13723  000B66                     u10697:
 13724  000B66  2EE8               	decfsz	wreg,f,c
 13725  000B68  D7FE               	bra	u10697
 13726  000B6A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13727  000B6C  D7FC               	bra	u10697
 13728  000B6E  F000               	nop	
 13729  000B70  0E80               	movlw	128
 13730  000B72  EC59  F02E         	call	_lcdInst
 13731                           
 13732                           ;Test.c: 260: machine_state = Sorting_state;
 13733  000B76  0E01               	movlw	1
 13734  000B78  0100               	movlb	0	; () banked
 13735  000B7A  6FFC               	movwf	_machine_state& (0+255),b
 13736                           
 13737                           ; BSR set to: 0
 13738                           ;Test.c: 261: was_low_1 = 0;
 13739  000B7C  0E00               	movlw	0
 13740  000B7E  6E78               	movwf	_was_low_1+1,c	;volatile
 13741  000B80  0E00               	movlw	0
 13742  000B82  6E77               	movwf	_was_low_1,c	;volatile
 13743                           
 13744                           ; BSR set to: 0
 13745                           ;Test.c: 262: was_low_1 = 0;
 13746  000B84  0E00               	movlw	0
 13747  000B86  6E78               	movwf	_was_low_1+1,c	;volatile
 13748  000B88  0E00               	movlw	0
 13749  000B8A  6E77               	movwf	_was_low_1,c	;volatile
 13750                           
 13751                           ; BSR set to: 0
 13752                           ;Test.c: 269: printf("TST: PAN SERVO");
 13753  000B8C  0EC8               	movlw	low STR_101
 13754  000B8E  0100               	movlb	0	; () banked
 13755  000B90  6F8E               	movwf	printf@f& (0+255),b
 13756  000B92  0EFE               	movlw	high STR_101
 13757  000B94  0100               	movlb	0	; () banked
 13758  000B96  6F8F               	movwf	(printf@f+1)& (0+255),b
 13759  000B98  EC15  F00E         	call	_printf	;wreg free
 13760                           
 13761                           ;Test.c: 270: lcdInst(0b11000000);;
 13762  000B9C  0EC0               	movlw	192
 13763  000B9E  EC59  F02E         	call	_lcdInst
 13764                           
 13765                           ;Test.c: 271: printf("MIDDLE -- 2s    ");
 13766  000BA2  0EB8               	movlw	low STR_102
 13767  000BA4  0100               	movlb	0	; () banked
 13768  000BA6  6F8E               	movwf	printf@f& (0+255),b
 13769  000BA8  0EFB               	movlw	high STR_102
 13770  000BAA  0100               	movlb	0	; () banked
 13771  000BAC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13772  000BAE  EC15  F00E         	call	_printf	;wreg free
 13773                           
 13774                           ;Test.c: 272: updateServoPosition(1200, 1);
 13775  000BB2  0E04               	movlw	4
 13776  000BB4  0100               	movlb	0	; () banked
 13777  000BB6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13778  000BB8  0EB0               	movlw	176
 13779  000BBA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13780  000BBC  0E00               	movlw	0
 13781  000BBE  0100               	movlb	0	; () banked
 13782  000BC0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13783  000BC2  0E01               	movlw	1
 13784  000BC4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13785  000BC6  EC87  F027         	call	_updateServoPosition	;wreg free
 13786                           
 13787                           ;Test.c: 273: TMR1ON = 1;
 13788  000BCA  80CD               	bsf	4045,0,c	;volatile
 13789                           
 13790                           ;Test.c: 274: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13791  000BCC  0E00               	movlw	0
 13792  000BCE  0100               	movlb	0	; () banked
 13793  000BD0  6FAE               	movwf	actuatorTest@i_1745& (0+255),b
 13794  000BD2                     l8505:
 13795                           
 13796                           ; BSR set to: 0
 13797  000BD2  0E63               	movlw	99
 13798  000BD4  0100               	movlb	0	; () banked
 13799  000BD6  65AE               	cpfsgt	actuatorTest@i_1745& (0+255),b
 13800  000BD8  D001               	goto	l8509
 13801  000BDA  D00C               	goto	l8513
 13802  000BDC                     l8509:
 13803                           
 13804                           ; BSR set to: 0
 13805  000BDC  0E68               	movlw	104
 13806  000BDE  0100               	movlb	0	; () banked
 13807  000BE0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13808  000BE2  0EE4               	movlw	228
 13809  000BE4                     u10707:
 13810  000BE4  2EE8               	decfsz	wreg,f,c
 13811  000BE6  D7FE               	bra	u10707
 13812  000BE8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13813  000BEA  D7FC               	bra	u10707
 13814  000BEC  F000               	nop	
 13815  000BEE  0100               	movlb	0	; () banked
 13816  000BF0  2BAE               	incf	actuatorTest@i_1745& (0+255),f,b
 13817  000BF2  D7EF               	goto	l8505
 13818  000BF4                     l8513:
 13819                           
 13820                           ; BSR set to: 0
 13821  000BF4  0E00               	movlw	0
 13822  000BF6  0100               	movlb	0	; () banked
 13823  000BF8  6FAF               	movwf	actuatorTest@i_1746& (0+255),b
 13824  000BFA                     l8515:
 13825                           
 13826                           ; BSR set to: 0
 13827  000BFA  0E63               	movlw	99
 13828  000BFC  0100               	movlb	0	; () banked
 13829  000BFE  65AF               	cpfsgt	actuatorTest@i_1746& (0+255),b
 13830  000C00  D001               	goto	l8519
 13831  000C02  D00C               	goto	l8523
 13832  000C04                     l8519:
 13833                           
 13834                           ; BSR set to: 0
 13835  000C04  0E68               	movlw	104
 13836  000C06  0100               	movlb	0	; () banked
 13837  000C08  6FAB               	movwf	??_actuatorTest& (0+255),b
 13838  000C0A  0EE4               	movlw	228
 13839  000C0C                     u10717:
 13840  000C0C  2EE8               	decfsz	wreg,f,c
 13841  000C0E  D7FE               	bra	u10717
 13842  000C10  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13843  000C12  D7FC               	bra	u10717
 13844  000C14  F000               	nop	
 13845  000C16  0100               	movlb	0	; () banked
 13846  000C18  2BAF               	incf	actuatorTest@i_1746& (0+255),f,b
 13847  000C1A  D7EF               	goto	l8515
 13848  000C1C                     l8523:
 13849                           
 13850                           ; BSR set to: 0
 13851                           ;Test.c: 276: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13852  000C1C  0E80               	movlw	128
 13853  000C1E  EC59  F02E         	call	_lcdInst
 13854  000C22  0EC0               	movlw	192
 13855  000C24  EC59  F02E         	call	_lcdInst
 13856                           
 13857                           ;Test.c: 277: printf("RIGHT -- 2s     ");
 13858  000C28  0EA7               	movlw	low STR_103
 13859  000C2A  0100               	movlb	0	; () banked
 13860  000C2C  6F8E               	movwf	printf@f& (0+255),b
 13861  000C2E  0EFB               	movlw	high STR_103
 13862  000C30  0100               	movlb	0	; () banked
 13863  000C32  6F8F               	movwf	(printf@f+1)& (0+255),b
 13864  000C34  EC15  F00E         	call	_printf	;wreg free
 13865                           
 13866                           ;Test.c: 278: updateServoPosition(500, 1);
 13867  000C38  0E01               	movlw	1
 13868  000C3A  0100               	movlb	0	; () banked
 13869  000C3C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13870  000C3E  0EF4               	movlw	244
 13871  000C40  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13872  000C42  0E00               	movlw	0
 13873  000C44  0100               	movlb	0	; () banked
 13874  000C46  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13875  000C48  0E01               	movlw	1
 13876  000C4A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13877  000C4C  EC87  F027         	call	_updateServoPosition	;wreg free
 13878                           
 13879                           ;Test.c: 279: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13880  000C50  0E00               	movlw	0
 13881  000C52  0100               	movlb	0	; () banked
 13882  000C54  6FB0               	movwf	actuatorTest@i_1748& (0+255),b
 13883  000C56                     l8531:
 13884                           
 13885                           ; BSR set to: 0
 13886  000C56  0E63               	movlw	99
 13887  000C58  0100               	movlb	0	; () banked
 13888  000C5A  65B0               	cpfsgt	actuatorTest@i_1748& (0+255),b
 13889  000C5C  D001               	goto	l8535
 13890  000C5E  D00C               	goto	l8539
 13891  000C60                     l8535:
 13892                           
 13893                           ; BSR set to: 0
 13894  000C60  0E68               	movlw	104
 13895  000C62  0100               	movlb	0	; () banked
 13896  000C64  6FAB               	movwf	??_actuatorTest& (0+255),b
 13897  000C66  0EE4               	movlw	228
 13898  000C68                     u10727:
 13899  000C68  2EE8               	decfsz	wreg,f,c
 13900  000C6A  D7FE               	bra	u10727
 13901  000C6C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13902  000C6E  D7FC               	bra	u10727
 13903  000C70  F000               	nop	
 13904  000C72  0100               	movlb	0	; () banked
 13905  000C74  2BB0               	incf	actuatorTest@i_1748& (0+255),f,b
 13906  000C76  D7EF               	goto	l8531
 13907  000C78                     l8539:
 13908                           
 13909                           ; BSR set to: 0
 13910  000C78  0E00               	movlw	0
 13911  000C7A  0100               	movlb	0	; () banked
 13912  000C7C  6FB1               	movwf	actuatorTest@i_1749& (0+255),b
 13913  000C7E                     l8541:
 13914                           
 13915                           ; BSR set to: 0
 13916  000C7E  0E63               	movlw	99
 13917  000C80  0100               	movlb	0	; () banked
 13918  000C82  65B1               	cpfsgt	actuatorTest@i_1749& (0+255),b
 13919  000C84  D001               	goto	l8545
 13920  000C86  D00C               	goto	l8549
 13921  000C88                     l8545:
 13922                           
 13923                           ; BSR set to: 0
 13924  000C88  0E68               	movlw	104
 13925  000C8A  0100               	movlb	0	; () banked
 13926  000C8C  6FAB               	movwf	??_actuatorTest& (0+255),b
 13927  000C8E  0EE4               	movlw	228
 13928  000C90                     u10737:
 13929  000C90  2EE8               	decfsz	wreg,f,c
 13930  000C92  D7FE               	bra	u10737
 13931  000C94  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13932  000C96  D7FC               	bra	u10737
 13933  000C98  F000               	nop	
 13934  000C9A  0100               	movlb	0	; () banked
 13935  000C9C  2BB1               	incf	actuatorTest@i_1749& (0+255),f,b
 13936  000C9E  D7EF               	goto	l8541
 13937  000CA0                     l8549:
 13938                           
 13939                           ; BSR set to: 0
 13940                           ;Test.c: 281: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13941  000CA0  0E80               	movlw	128
 13942  000CA2  EC59  F02E         	call	_lcdInst
 13943  000CA6  0EC0               	movlw	192
 13944  000CA8  EC59  F02E         	call	_lcdInst
 13945                           
 13946                           ;Test.c: 282: printf("LEFT -- 2s      ");
 13947  000CAC  0E85               	movlw	low STR_104
 13948  000CAE  0100               	movlb	0	; () banked
 13949  000CB0  6F8E               	movwf	printf@f& (0+255),b
 13950  000CB2  0EFB               	movlw	high STR_104
 13951  000CB4  0100               	movlb	0	; () banked
 13952  000CB6  6F8F               	movwf	(printf@f+1)& (0+255),b
 13953  000CB8  EC15  F00E         	call	_printf	;wreg free
 13954                           
 13955                           ;Test.c: 283: updateServoPosition(2400, 1);
 13956  000CBC  0E09               	movlw	9
 13957  000CBE  0100               	movlb	0	; () banked
 13958  000CC0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13959  000CC2  0E60               	movlw	96
 13960  000CC4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13961  000CC6  0E00               	movlw	0
 13962  000CC8  0100               	movlb	0	; () banked
 13963  000CCA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13964  000CCC  0E01               	movlw	1
 13965  000CCE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13966  000CD0  EC87  F027         	call	_updateServoPosition	;wreg free
 13967                           
 13968                           ;Test.c: 284: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13969  000CD4  0E00               	movlw	0
 13970  000CD6  0100               	movlb	0	; () banked
 13971  000CD8  6FB2               	movwf	actuatorTest@i_1751& (0+255),b
 13972  000CDA                     l8557:
 13973                           
 13974                           ; BSR set to: 0
 13975  000CDA  0E63               	movlw	99
 13976  000CDC  0100               	movlb	0	; () banked
 13977  000CDE  65B2               	cpfsgt	actuatorTest@i_1751& (0+255),b
 13978  000CE0  D001               	goto	l8561
 13979  000CE2  D00C               	goto	l8565
 13980  000CE4                     l8561:
 13981                           
 13982                           ; BSR set to: 0
 13983  000CE4  0E68               	movlw	104
 13984  000CE6  0100               	movlb	0	; () banked
 13985  000CE8  6FAB               	movwf	??_actuatorTest& (0+255),b
 13986  000CEA  0EE4               	movlw	228
 13987  000CEC                     u10747:
 13988  000CEC  2EE8               	decfsz	wreg,f,c
 13989  000CEE  D7FE               	bra	u10747
 13990  000CF0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13991  000CF2  D7FC               	bra	u10747
 13992  000CF4  F000               	nop	
 13993  000CF6  0100               	movlb	0	; () banked
 13994  000CF8  2BB2               	incf	actuatorTest@i_1751& (0+255),f,b
 13995  000CFA  D7EF               	goto	l8557
 13996  000CFC                     l8565:
 13997                           
 13998                           ; BSR set to: 0
 13999  000CFC  0E00               	movlw	0
 14000  000CFE  0100               	movlb	0	; () banked
 14001  000D00  6FB3               	movwf	actuatorTest@i_1752& (0+255),b
 14002  000D02                     l8567:
 14003                           
 14004                           ; BSR set to: 0
 14005  000D02  0E63               	movlw	99
 14006  000D04  0100               	movlb	0	; () banked
 14007  000D06  65B3               	cpfsgt	actuatorTest@i_1752& (0+255),b
 14008  000D08  D001               	goto	l8571
 14009  000D0A  D00C               	goto	l8575
 14010  000D0C                     l8571:
 14011                           
 14012                           ; BSR set to: 0
 14013  000D0C  0E68               	movlw	104
 14014  000D0E  0100               	movlb	0	; () banked
 14015  000D10  6FAB               	movwf	??_actuatorTest& (0+255),b
 14016  000D12  0EE4               	movlw	228
 14017  000D14                     u10757:
 14018  000D14  2EE8               	decfsz	wreg,f,c
 14019  000D16  D7FE               	bra	u10757
 14020  000D18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14021  000D1A  D7FC               	bra	u10757
 14022  000D1C  F000               	nop	
 14023  000D1E  0100               	movlb	0	; () banked
 14024  000D20  2BB3               	incf	actuatorTest@i_1752& (0+255),f,b
 14025  000D22  D7EF               	goto	l8567
 14026  000D24                     l8575:
 14027                           
 14028                           ; BSR set to: 0
 14029                           ;Test.c: 286: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14030  000D24  0E80               	movlw	128
 14031  000D26  EC59  F02E         	call	_lcdInst
 14032  000D2A  0EC0               	movlw	192
 14033  000D2C  EC59  F02E         	call	_lcdInst
 14034                           
 14035                           ;Test.c: 287: printf("MID-LEFT -- 2s  ");
 14036  000D30  0E0D               	movlw	low STR_105
 14037  000D32  0100               	movlb	0	; () banked
 14038  000D34  6F8E               	movwf	printf@f& (0+255),b
 14039  000D36  0EFC               	movlw	high STR_105
 14040  000D38  0100               	movlb	0	; () banked
 14041  000D3A  6F8F               	movwf	(printf@f+1)& (0+255),b
 14042  000D3C  EC15  F00E         	call	_printf	;wreg free
 14043                           
 14044                           ;Test.c: 288: updateServoPosition(1670, 1);
 14045  000D40  0E06               	movlw	6
 14046  000D42  0100               	movlb	0	; () banked
 14047  000D44  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14048  000D46  0E86               	movlw	134
 14049  000D48  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14050  000D4A  0E00               	movlw	0
 14051  000D4C  0100               	movlb	0	; () banked
 14052  000D4E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14053  000D50  0E01               	movlw	1
 14054  000D52  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14055  000D54  EC87  F027         	call	_updateServoPosition	;wreg free
 14056                           
 14057                           ;Test.c: 289: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14058  000D58  0E00               	movlw	0
 14059  000D5A  0100               	movlb	0	; () banked
 14060  000D5C  6FB4               	movwf	actuatorTest@i_1754& (0+255),b
 14061  000D5E                     l8583:
 14062                           
 14063                           ; BSR set to: 0
 14064  000D5E  0E63               	movlw	99
 14065  000D60  0100               	movlb	0	; () banked
 14066  000D62  65B4               	cpfsgt	actuatorTest@i_1754& (0+255),b
 14067  000D64  D001               	goto	l8587
 14068  000D66  D00C               	goto	l8591
 14069  000D68                     l8587:
 14070                           
 14071                           ; BSR set to: 0
 14072  000D68  0E68               	movlw	104
 14073  000D6A  0100               	movlb	0	; () banked
 14074  000D6C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14075  000D6E  0EE4               	movlw	228
 14076  000D70                     u10767:
 14077  000D70  2EE8               	decfsz	wreg,f,c
 14078  000D72  D7FE               	bra	u10767
 14079  000D74  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14080  000D76  D7FC               	bra	u10767
 14081  000D78  F000               	nop	
 14082  000D7A  0100               	movlb	0	; () banked
 14083  000D7C  2BB4               	incf	actuatorTest@i_1754& (0+255),f,b
 14084  000D7E  D7EF               	goto	l8583
 14085  000D80                     l8591:
 14086                           
 14087                           ; BSR set to: 0
 14088  000D80  0E00               	movlw	0
 14089  000D82  0100               	movlb	0	; () banked
 14090  000D84  6FB5               	movwf	actuatorTest@i_1755& (0+255),b
 14091  000D86                     l8593:
 14092                           
 14093                           ; BSR set to: 0
 14094  000D86  0E63               	movlw	99
 14095  000D88  0100               	movlb	0	; () banked
 14096  000D8A  65B5               	cpfsgt	actuatorTest@i_1755& (0+255),b
 14097  000D8C  D001               	goto	l8597
 14098  000D8E  D00C               	goto	l8601
 14099  000D90                     l8597:
 14100                           
 14101                           ; BSR set to: 0
 14102  000D90  0E68               	movlw	104
 14103  000D92  0100               	movlb	0	; () banked
 14104  000D94  6FAB               	movwf	??_actuatorTest& (0+255),b
 14105  000D96  0EE4               	movlw	228
 14106  000D98                     u10777:
 14107  000D98  2EE8               	decfsz	wreg,f,c
 14108  000D9A  D7FE               	bra	u10777
 14109  000D9C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14110  000D9E  D7FC               	bra	u10777
 14111  000DA0  F000               	nop	
 14112  000DA2  0100               	movlb	0	; () banked
 14113  000DA4  2BB5               	incf	actuatorTest@i_1755& (0+255),f,b
 14114  000DA6  D7EF               	goto	l8593
 14115  000DA8                     l8601:
 14116                           
 14117                           ; BSR set to: 0
 14118                           ;Test.c: 291: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14119  000DA8  0E80               	movlw	128
 14120  000DAA  EC59  F02E         	call	_lcdInst
 14121  000DAE  0EC0               	movlw	192
 14122  000DB0  EC59  F02E         	call	_lcdInst
 14123                           
 14124                           ;Test.c: 292: printf("MID-RIGHT -- 2s ");
 14125  000DB4  0E1E               	movlw	low STR_106
 14126  000DB6  0100               	movlb	0	; () banked
 14127  000DB8  6F8E               	movwf	printf@f& (0+255),b
 14128  000DBA  0EFC               	movlw	high STR_106
 14129  000DBC  0100               	movlb	0	; () banked
 14130  000DBE  6F8F               	movwf	(printf@f+1)& (0+255),b
 14131  000DC0  EC15  F00E         	call	_printf	;wreg free
 14132                           
 14133                           ;Test.c: 293: updateServoPosition(850, 1);
 14134  000DC4  0E03               	movlw	3
 14135  000DC6  0100               	movlb	0	; () banked
 14136  000DC8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14137  000DCA  0E52               	movlw	82
 14138  000DCC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14139  000DCE  0E00               	movlw	0
 14140  000DD0  0100               	movlb	0	; () banked
 14141  000DD2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14142  000DD4  0E01               	movlw	1
 14143  000DD6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14144  000DD8  EC87  F027         	call	_updateServoPosition	;wreg free
 14145                           
 14146                           ;Test.c: 294: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14147  000DDC  0E00               	movlw	0
 14148  000DDE  0100               	movlb	0	; () banked
 14149  000DE0  6FB6               	movwf	actuatorTest@i_1757& (0+255),b
 14150  000DE2                     l8609:
 14151                           
 14152                           ; BSR set to: 0
 14153  000DE2  0E63               	movlw	99
 14154  000DE4  0100               	movlb	0	; () banked
 14155  000DE6  65B6               	cpfsgt	actuatorTest@i_1757& (0+255),b
 14156  000DE8  D001               	goto	l8613
 14157  000DEA  D00C               	goto	l8617
 14158  000DEC                     l8613:
 14159                           
 14160                           ; BSR set to: 0
 14161  000DEC  0E68               	movlw	104
 14162  000DEE  0100               	movlb	0	; () banked
 14163  000DF0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14164  000DF2  0EE4               	movlw	228
 14165  000DF4                     u10787:
 14166  000DF4  2EE8               	decfsz	wreg,f,c
 14167  000DF6  D7FE               	bra	u10787
 14168  000DF8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14169  000DFA  D7FC               	bra	u10787
 14170  000DFC  F000               	nop	
 14171  000DFE  0100               	movlb	0	; () banked
 14172  000E00  2BB6               	incf	actuatorTest@i_1757& (0+255),f,b
 14173  000E02  D7EF               	goto	l8609
 14174  000E04                     l8617:
 14175                           
 14176                           ; BSR set to: 0
 14177  000E04  0E00               	movlw	0
 14178  000E06  0100               	movlb	0	; () banked
 14179  000E08  6FB7               	movwf	actuatorTest@i_1758& (0+255),b
 14180  000E0A                     l8619:
 14181                           
 14182                           ; BSR set to: 0
 14183  000E0A  0E63               	movlw	99
 14184  000E0C  0100               	movlb	0	; () banked
 14185  000E0E  65B7               	cpfsgt	actuatorTest@i_1758& (0+255),b
 14186  000E10  D001               	goto	l8623
 14187  000E12  D00C               	goto	l8627
 14188  000E14                     l8623:
 14189                           
 14190                           ; BSR set to: 0
 14191  000E14  0E68               	movlw	104
 14192  000E16  0100               	movlb	0	; () banked
 14193  000E18  6FAB               	movwf	??_actuatorTest& (0+255),b
 14194  000E1A  0EE4               	movlw	228
 14195  000E1C                     u10797:
 14196  000E1C  2EE8               	decfsz	wreg,f,c
 14197  000E1E  D7FE               	bra	u10797
 14198  000E20  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14199  000E22  D7FC               	bra	u10797
 14200  000E24  F000               	nop	
 14201  000E26  0100               	movlb	0	; () banked
 14202  000E28  2BB7               	incf	actuatorTest@i_1758& (0+255),f,b
 14203  000E2A  D7EF               	goto	l8619
 14204  000E2C                     l8627:
 14205                           
 14206                           ; BSR set to: 0
 14207                           ;Test.c: 296: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14208  000E2C  0E80               	movlw	128
 14209  000E2E  EC59  F02E         	call	_lcdInst
 14210  000E32  0EC0               	movlw	192
 14211  000E34  EC59  F02E         	call	_lcdInst
 14212                           
 14213                           ;Test.c: 297: printf("MID -- 2s       ");
 14214  000E38  0E63               	movlw	low STR_107
 14215  000E3A  0100               	movlb	0	; () banked
 14216  000E3C  6F8E               	movwf	printf@f& (0+255),b
 14217  000E3E  0EFB               	movlw	high STR_107
 14218  000E40  0100               	movlb	0	; () banked
 14219  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
 14220  000E44  EC15  F00E         	call	_printf	;wreg free
 14221                           
 14222                           ;Test.c: 298: updateServoPosition(1200, 1);
 14223  000E48  0E04               	movlw	4
 14224  000E4A  0100               	movlb	0	; () banked
 14225  000E4C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14226  000E4E  0EB0               	movlw	176
 14227  000E50  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14228  000E52  0E00               	movlw	0
 14229  000E54  0100               	movlb	0	; () banked
 14230  000E56  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14231  000E58  0E01               	movlw	1
 14232  000E5A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14233  000E5C  EC87  F027         	call	_updateServoPosition	;wreg free
 14234                           
 14235                           ;Test.c: 299: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14236  000E60  0E00               	movlw	0
 14237  000E62  0100               	movlb	0	; () banked
 14238  000E64  6FB8               	movwf	actuatorTest@i_1760& (0+255),b
 14239  000E66                     l8635:
 14240                           
 14241                           ; BSR set to: 0
 14242  000E66  0E63               	movlw	99
 14243  000E68  0100               	movlb	0	; () banked
 14244  000E6A  65B8               	cpfsgt	actuatorTest@i_1760& (0+255),b
 14245  000E6C  D001               	goto	l8639
 14246  000E6E  D00C               	goto	l8643
 14247  000E70                     l8639:
 14248                           
 14249                           ; BSR set to: 0
 14250  000E70  0E68               	movlw	104
 14251  000E72  0100               	movlb	0	; () banked
 14252  000E74  6FAB               	movwf	??_actuatorTest& (0+255),b
 14253  000E76  0EE4               	movlw	228
 14254  000E78                     u10807:
 14255  000E78  2EE8               	decfsz	wreg,f,c
 14256  000E7A  D7FE               	bra	u10807
 14257  000E7C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14258  000E7E  D7FC               	bra	u10807
 14259  000E80  F000               	nop	
 14260  000E82  0100               	movlb	0	; () banked
 14261  000E84  2BB8               	incf	actuatorTest@i_1760& (0+255),f,b
 14262  000E86  D7EF               	goto	l8635
 14263  000E88                     l8643:
 14264                           
 14265                           ; BSR set to: 0
 14266  000E88  0E00               	movlw	0
 14267  000E8A  0100               	movlb	0	; () banked
 14268  000E8C  6FB9               	movwf	actuatorTest@i_1761& (0+255),b
 14269  000E8E                     l8645:
 14270                           
 14271                           ; BSR set to: 0
 14272  000E8E  0E63               	movlw	99
 14273  000E90  0100               	movlb	0	; () banked
 14274  000E92  65B9               	cpfsgt	actuatorTest@i_1761& (0+255),b
 14275  000E94  D001               	goto	l8649
 14276  000E96  D00C               	goto	l1328
 14277  000E98                     l8649:
 14278                           
 14279                           ; BSR set to: 0
 14280  000E98  0E68               	movlw	104
 14281  000E9A  0100               	movlb	0	; () banked
 14282  000E9C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14283  000E9E  0EE4               	movlw	228
 14284  000EA0                     u10817:
 14285  000EA0  2EE8               	decfsz	wreg,f,c
 14286  000EA2  D7FE               	bra	u10817
 14287  000EA4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14288  000EA6  D7FC               	bra	u10817
 14289  000EA8  F000               	nop	
 14290  000EAA  0100               	movlb	0	; () banked
 14291  000EAC  2BB9               	incf	actuatorTest@i_1761& (0+255),f,b
 14292  000EAE  D7EF               	goto	l8645
 14293  000EB0                     l1328:
 14294                           
 14295                           ; BSR set to: 0
 14296                           ;Test.c: 300: TMR1ON = 0;
 14297  000EB0  90CD               	bcf	4045,0,c	;volatile
 14298                           
 14299                           ; BSR set to: 0
 14300                           ;Test.c: 307: printf("TST: TILT SERVO");
 14301  000EB2  0E4E               	movlw	low STR_108
 14302  000EB4  0100               	movlb	0	; () banked
 14303  000EB6  6F8E               	movwf	printf@f& (0+255),b
 14304  000EB8  0EFE               	movlw	high STR_108
 14305  000EBA  0100               	movlb	0	; () banked
 14306  000EBC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14307  000EBE  EC15  F00E         	call	_printf	;wreg free
 14308                           
 14309                           ;Test.c: 308: lcdInst(0b11000000);;
 14310  000EC2  0EC0               	movlw	192
 14311  000EC4  EC59  F02E         	call	_lcdInst
 14312                           
 14313                           ;Test.c: 309: printf("LEVEL -- 2s     ");
 14314  000EC8  0E96               	movlw	low STR_109
 14315  000ECA  0100               	movlb	0	; () banked
 14316  000ECC  6F8E               	movwf	printf@f& (0+255),b
 14317  000ECE  0EFB               	movlw	high STR_109
 14318  000ED0  0100               	movlb	0	; () banked
 14319  000ED2  6F8F               	movwf	(printf@f+1)& (0+255),b
 14320  000ED4  EC15  F00E         	call	_printf	;wreg free
 14321                           
 14322                           ;Test.c: 310: updateServoPosition(1050, 3);
 14323  000ED8  0E04               	movlw	4
 14324  000EDA  0100               	movlb	0	; () banked
 14325  000EDC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14326  000EDE  0E1A               	movlw	26
 14327  000EE0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14328  000EE2  0E00               	movlw	0
 14329  000EE4  0100               	movlb	0	; () banked
 14330  000EE6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14331  000EE8  0E03               	movlw	3
 14332  000EEA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14333  000EEC  EC87  F027         	call	_updateServoPosition	;wreg free
 14334                           
 14335                           ;Test.c: 311: TMR3ON = 1;
 14336  000EF0  80B1               	bsf	4017,0,c	;volatile
 14337                           
 14338                           ;Test.c: 312: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14339  000EF2  0E00               	movlw	0
 14340  000EF4  0100               	movlb	0	; () banked
 14341  000EF6  6FBA               	movwf	actuatorTest@i_1764& (0+255),b
 14342  000EF8                     l8663:
 14343                           
 14344                           ; BSR set to: 0
 14345  000EF8  0E63               	movlw	99
 14346  000EFA  0100               	movlb	0	; () banked
 14347  000EFC  65BA               	cpfsgt	actuatorTest@i_1764& (0+255),b
 14348  000EFE  D001               	goto	l8667
 14349  000F00  D00C               	goto	l8671
 14350  000F02                     l8667:
 14351                           
 14352                           ; BSR set to: 0
 14353  000F02  0E68               	movlw	104
 14354  000F04  0100               	movlb	0	; () banked
 14355  000F06  6FAB               	movwf	??_actuatorTest& (0+255),b
 14356  000F08  0EE4               	movlw	228
 14357  000F0A                     u10827:
 14358  000F0A  2EE8               	decfsz	wreg,f,c
 14359  000F0C  D7FE               	bra	u10827
 14360  000F0E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14361  000F10  D7FC               	bra	u10827
 14362  000F12  F000               	nop	
 14363  000F14  0100               	movlb	0	; () banked
 14364  000F16  2BBA               	incf	actuatorTest@i_1764& (0+255),f,b
 14365  000F18  D7EF               	goto	l8663
 14366  000F1A                     l8671:
 14367                           
 14368                           ; BSR set to: 0
 14369  000F1A  0E00               	movlw	0
 14370  000F1C  0100               	movlb	0	; () banked
 14371  000F1E  6FBB               	movwf	actuatorTest@i_1765& (0+255),b
 14372  000F20                     l8673:
 14373                           
 14374                           ; BSR set to: 0
 14375  000F20  0E63               	movlw	99
 14376  000F22  0100               	movlb	0	; () banked
 14377  000F24  65BB               	cpfsgt	actuatorTest@i_1765& (0+255),b
 14378  000F26  D001               	goto	l8677
 14379  000F28  D00C               	goto	l8681
 14380  000F2A                     l8677:
 14381                           
 14382                           ; BSR set to: 0
 14383  000F2A  0E68               	movlw	104
 14384  000F2C  0100               	movlb	0	; () banked
 14385  000F2E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14386  000F30  0EE4               	movlw	228
 14387  000F32                     u10837:
 14388  000F32  2EE8               	decfsz	wreg,f,c
 14389  000F34  D7FE               	bra	u10837
 14390  000F36  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14391  000F38  D7FC               	bra	u10837
 14392  000F3A  F000               	nop	
 14393  000F3C  0100               	movlb	0	; () banked
 14394  000F3E  2BBB               	incf	actuatorTest@i_1765& (0+255),f,b
 14395  000F40  D7EF               	goto	l8673
 14396  000F42                     l8681:
 14397                           
 14398                           ; BSR set to: 0
 14399                           ;Test.c: 314: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14400  000F42  0E80               	movlw	128
 14401  000F44  EC59  F02E         	call	_lcdInst
 14402  000F48  0EC0               	movlw	192
 14403  000F4A  EC59  F02E         	call	_lcdInst
 14404                           
 14405                           ;Test.c: 315: printf("DROP -- 2s      ");
 14406  000F4E  0E74               	movlw	low STR_110
 14407  000F50  0100               	movlb	0	; () banked
 14408  000F52  6F8E               	movwf	printf@f& (0+255),b
 14409  000F54  0EFB               	movlw	high STR_110
 14410  000F56  0100               	movlb	0	; () banked
 14411  000F58  6F8F               	movwf	(printf@f+1)& (0+255),b
 14412  000F5A  EC15  F00E         	call	_printf	;wreg free
 14413                           
 14414                           ;Test.c: 316: updateServoPosition(1260, 3);
 14415  000F5E  0E04               	movlw	4
 14416  000F60  0100               	movlb	0	; () banked
 14417  000F62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14418  000F64  0EEC               	movlw	236
 14419  000F66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14420  000F68  0E00               	movlw	0
 14421  000F6A  0100               	movlb	0	; () banked
 14422  000F6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14423  000F6E  0E03               	movlw	3
 14424  000F70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14425  000F72  EC87  F027         	call	_updateServoPosition	;wreg free
 14426                           
 14427                           ;Test.c: 317: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14428  000F76  0E00               	movlw	0
 14429  000F78  0100               	movlb	0	; () banked
 14430  000F7A  6FBC               	movwf	actuatorTest@i_1767& (0+255),b
 14431  000F7C                     l8689:
 14432                           
 14433                           ; BSR set to: 0
 14434  000F7C  0E63               	movlw	99
 14435  000F7E  0100               	movlb	0	; () banked
 14436  000F80  65BC               	cpfsgt	actuatorTest@i_1767& (0+255),b
 14437  000F82  D001               	goto	l8693
 14438  000F84  D00C               	goto	l8697
 14439  000F86                     l8693:
 14440                           
 14441                           ; BSR set to: 0
 14442  000F86  0E68               	movlw	104
 14443  000F88  0100               	movlb	0	; () banked
 14444  000F8A  6FAB               	movwf	??_actuatorTest& (0+255),b
 14445  000F8C  0EE4               	movlw	228
 14446  000F8E                     u10847:
 14447  000F8E  2EE8               	decfsz	wreg,f,c
 14448  000F90  D7FE               	bra	u10847
 14449  000F92  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14450  000F94  D7FC               	bra	u10847
 14451  000F96  F000               	nop	
 14452  000F98  0100               	movlb	0	; () banked
 14453  000F9A  2BBC               	incf	actuatorTest@i_1767& (0+255),f,b
 14454  000F9C  D7EF               	goto	l8689
 14455  000F9E                     l8697:
 14456                           
 14457                           ; BSR set to: 0
 14458  000F9E  0E00               	movlw	0
 14459  000FA0  0100               	movlb	0	; () banked
 14460  000FA2  6FBD               	movwf	actuatorTest@i_1768& (0+255),b
 14461  000FA4                     l8699:
 14462                           
 14463                           ; BSR set to: 0
 14464  000FA4  0E63               	movlw	99
 14465  000FA6  0100               	movlb	0	; () banked
 14466  000FA8  65BD               	cpfsgt	actuatorTest@i_1768& (0+255),b
 14467  000FAA  D001               	goto	l8703
 14468  000FAC  D00C               	goto	l8707
 14469  000FAE                     l8703:
 14470                           
 14471                           ; BSR set to: 0
 14472  000FAE  0E68               	movlw	104
 14473  000FB0  0100               	movlb	0	; () banked
 14474  000FB2  6FAB               	movwf	??_actuatorTest& (0+255),b
 14475  000FB4  0EE4               	movlw	228
 14476  000FB6                     u10857:
 14477  000FB6  2EE8               	decfsz	wreg,f,c
 14478  000FB8  D7FE               	bra	u10857
 14479  000FBA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14480  000FBC  D7FC               	bra	u10857
 14481  000FBE  F000               	nop	
 14482  000FC0  0100               	movlb	0	; () banked
 14483  000FC2  2BBD               	incf	actuatorTest@i_1768& (0+255),f,b
 14484  000FC4  D7EF               	goto	l8699
 14485  000FC6                     l8707:
 14486                           
 14487                           ; BSR set to: 0
 14488                           ;Test.c: 319: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14489  000FC6  0E80               	movlw	128
 14490  000FC8  EC59  F02E         	call	_lcdInst
 14491  000FCC  0EC0               	movlw	192
 14492  000FCE  EC59  F02E         	call	_lcdInst
 14493                           
 14494                           ;Test.c: 320: printf("LEVEL -- 2s     ");
 14495  000FD2  0E96               	movlw	low STR_109
 14496  000FD4  0100               	movlb	0	; () banked
 14497  000FD6  6F8E               	movwf	printf@f& (0+255),b
 14498  000FD8  0EFB               	movlw	high STR_109
 14499  000FDA  0100               	movlb	0	; () banked
 14500  000FDC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14501  000FDE  EC15  F00E         	call	_printf	;wreg free
 14502                           
 14503                           ;Test.c: 321: updateServoPosition(1050, 3);
 14504  000FE2  0E04               	movlw	4
 14505  000FE4  0100               	movlb	0	; () banked
 14506  000FE6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14507  000FE8  0E1A               	movlw	26
 14508  000FEA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14509  000FEC  0E00               	movlw	0
 14510  000FEE  0100               	movlb	0	; () banked
 14511  000FF0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14512  000FF2  0E03               	movlw	3
 14513  000FF4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14514  000FF6  EC87  F027         	call	_updateServoPosition	;wreg free
 14515                           
 14516                           ;Test.c: 322: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14517  000FFA  0E00               	movlw	0
 14518  000FFC  0100               	movlb	0	; () banked
 14519  000FFE  6FBE               	movwf	actuatorTest@i_1770& (0+255),b
 14520  001000                     l8715:
 14521                           
 14522                           ; BSR set to: 0
 14523  001000  0E63               	movlw	99
 14524  001002  0100               	movlb	0	; () banked
 14525  001004  65BE               	cpfsgt	actuatorTest@i_1770& (0+255),b
 14526  001006  D001               	goto	l8719
 14527  001008  D00C               	goto	l8723
 14528  00100A                     l8719:
 14529                           
 14530                           ; BSR set to: 0
 14531  00100A  0E68               	movlw	104
 14532  00100C  0100               	movlb	0	; () banked
 14533  00100E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14534  001010  0EE4               	movlw	228
 14535  001012                     u10867:
 14536  001012  2EE8               	decfsz	wreg,f,c
 14537  001014  D7FE               	bra	u10867
 14538  001016  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14539  001018  D7FC               	bra	u10867
 14540  00101A  F000               	nop	
 14541  00101C  0100               	movlb	0	; () banked
 14542  00101E  2BBE               	incf	actuatorTest@i_1770& (0+255),f,b
 14543  001020  D7EF               	goto	l8715
 14544  001022                     l8723:
 14545                           
 14546                           ; BSR set to: 0
 14547  001022  0E00               	movlw	0
 14548  001024  0100               	movlb	0	; () banked
 14549  001026  6FBF               	movwf	actuatorTest@i_1771& (0+255),b
 14550  001028                     l8725:
 14551                           
 14552                           ; BSR set to: 0
 14553  001028  0E63               	movlw	99
 14554  00102A  0100               	movlb	0	; () banked
 14555  00102C  65BF               	cpfsgt	actuatorTest@i_1771& (0+255),b
 14556  00102E  D001               	goto	l8729
 14557  001030  D00C               	goto	l1340
 14558  001032                     l8729:
 14559                           
 14560                           ; BSR set to: 0
 14561  001032  0E68               	movlw	104
 14562  001034  0100               	movlb	0	; () banked
 14563  001036  6FAB               	movwf	??_actuatorTest& (0+255),b
 14564  001038  0EE4               	movlw	228
 14565  00103A                     u10877:
 14566  00103A  2EE8               	decfsz	wreg,f,c
 14567  00103C  D7FE               	bra	u10877
 14568  00103E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14569  001040  D7FC               	bra	u10877
 14570  001042  F000               	nop	
 14571  001044  0100               	movlb	0	; () banked
 14572  001046  2BBF               	incf	actuatorTest@i_1771& (0+255),f,b
 14573  001048  D7EF               	goto	l8725
 14574  00104A                     l1340:
 14575                           
 14576                           ; BSR set to: 0
 14577                           ;Test.c: 323: TMR3ON = 0;
 14578  00104A  90B1               	bcf	4017,0,c	;volatile
 14579                           
 14580                           ;Test.c: 324: (INTCONbits.GIE = 0);
 14581  00104C  9EF2               	bcf	intcon,7,c	;volatile
 14582                           
 14583                           ; BSR set to: 0
 14584                           ;Test.c: 329: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14585  00104E  0E01               	movlw	1
 14586  001050  EC59  F02E         	call	_lcdInst
 14587  001054  0E68               	movlw	104
 14588  001056  0100               	movlb	0	; () banked
 14589  001058  6FAB               	movwf	??_actuatorTest& (0+255),b
 14590  00105A  0EE4               	movlw	228
 14591  00105C                     u10887:
 14592  00105C  2EE8               	decfsz	wreg,f,c
 14593  00105E  D7FE               	bra	u10887
 14594  001060  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14595  001062  D7FC               	bra	u10887
 14596  001064  F000               	nop	
 14597  001066  0E80               	movlw	128
 14598  001068  EC59  F02E         	call	_lcdInst
 14599                           
 14600                           ;Test.c: 330: printf("TST: CAM SERVO");
 14601  00106C  0EB9               	movlw	low STR_112
 14602  00106E  0100               	movlb	0	; () banked
 14603  001070  6F8E               	movwf	printf@f& (0+255),b
 14604  001072  0EFE               	movlw	high STR_112
 14605  001074  0100               	movlb	0	; () banked
 14606  001076  6F8F               	movwf	(printf@f+1)& (0+255),b
 14607  001078  EC15  F00E         	call	_printf	;wreg free
 14608                           
 14609                           ;Test.c: 331: lcdInst(0b11000000);;
 14610  00107C  0EC0               	movlw	192
 14611  00107E  EC59  F02E         	call	_lcdInst
 14612                           
 14613                           ;Test.c: 332: printf("CAM UP  |RC0=1");
 14614  001082  0E9B               	movlw	low STR_113
 14615  001084  0100               	movlb	0	; () banked
 14616  001086  6F8E               	movwf	printf@f& (0+255),b
 14617  001088  0EFE               	movlw	high STR_113
 14618  00108A  0100               	movlb	0	; () banked
 14619  00108C  6F8F               	movwf	(printf@f+1)& (0+255),b
 14620  00108E  EC15  F00E         	call	_printf	;wreg free
 14621                           
 14622                           ;Test.c: 333: LATCbits.LATC0 = 1;
 14623  001092  808B               	bsf	3979,0,c	;volatile
 14624                           
 14625                           ;Test.c: 334: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14626  001094  0E00               	movlw	0
 14627  001096  0100               	movlb	0	; () banked
 14628  001098  6FC0               	movwf	actuatorTest@i_1774& (0+255),b
 14629  00109A                     l8749:
 14630                           
 14631                           ; BSR set to: 0
 14632  00109A  0E63               	movlw	99
 14633  00109C  0100               	movlb	0	; () banked
 14634  00109E  65C0               	cpfsgt	actuatorTest@i_1774& (0+255),b
 14635  0010A0  D001               	goto	l8753
 14636  0010A2  D00C               	goto	l8757
 14637  0010A4                     l8753:
 14638                           
 14639                           ; BSR set to: 0
 14640  0010A4  0E68               	movlw	104
 14641  0010A6  0100               	movlb	0	; () banked
 14642  0010A8  6FAB               	movwf	??_actuatorTest& (0+255),b
 14643  0010AA  0EE4               	movlw	228
 14644  0010AC                     u10897:
 14645  0010AC  2EE8               	decfsz	wreg,f,c
 14646  0010AE  D7FE               	bra	u10897
 14647  0010B0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14648  0010B2  D7FC               	bra	u10897
 14649  0010B4  F000               	nop	
 14650  0010B6  0100               	movlb	0	; () banked
 14651  0010B8  2BC0               	incf	actuatorTest@i_1774& (0+255),f,b
 14652  0010BA  D7EF               	goto	l8749
 14653  0010BC                     l8757:
 14654                           
 14655                           ; BSR set to: 0
 14656  0010BC  0E00               	movlw	0
 14657  0010BE  0100               	movlb	0	; () banked
 14658  0010C0  6FC1               	movwf	actuatorTest@i_1775& (0+255),b
 14659  0010C2                     l8759:
 14660                           
 14661                           ; BSR set to: 0
 14662  0010C2  0E63               	movlw	99
 14663  0010C4  0100               	movlb	0	; () banked
 14664  0010C6  65C1               	cpfsgt	actuatorTest@i_1775& (0+255),b
 14665  0010C8  D001               	goto	l8763
 14666  0010CA  D00C               	goto	l8767
 14667  0010CC                     l8763:
 14668                           
 14669                           ; BSR set to: 0
 14670  0010CC  0E68               	movlw	104
 14671  0010CE  0100               	movlb	0	; () banked
 14672  0010D0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14673  0010D2  0EE4               	movlw	228
 14674  0010D4                     u10907:
 14675  0010D4  2EE8               	decfsz	wreg,f,c
 14676  0010D6  D7FE               	bra	u10907
 14677  0010D8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14678  0010DA  D7FC               	bra	u10907
 14679  0010DC  F000               	nop	
 14680  0010DE  0100               	movlb	0	; () banked
 14681  0010E0  2BC1               	incf	actuatorTest@i_1775& (0+255),f,b
 14682  0010E2  D7EF               	goto	l8759
 14683  0010E4                     l8767:
 14684                           
 14685                           ; BSR set to: 0
 14686                           ;Test.c: 335: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14687  0010E4  0E80               	movlw	128
 14688  0010E6  EC59  F02E         	call	_lcdInst
 14689  0010EA  0EC0               	movlw	192
 14690  0010EC  EC59  F02E         	call	_lcdInst
 14691                           
 14692                           ;Test.c: 336: printf("CAM DWN |RC0=0");
 14693  0010F0  0E8C               	movlw	low STR_114
 14694  0010F2  0100               	movlb	0	; () banked
 14695  0010F4  6F8E               	movwf	printf@f& (0+255),b
 14696  0010F6  0EFE               	movlw	high STR_114
 14697  0010F8  0100               	movlb	0	; () banked
 14698  0010FA  6F8F               	movwf	(printf@f+1)& (0+255),b
 14699  0010FC  EC15  F00E         	call	_printf	;wreg free
 14700                           
 14701                           ;Test.c: 339: for(i=0;i<10000;i++)
 14702  001100  0E00               	movlw	0
 14703  001102  0100               	movlb	0	; () banked
 14704  001104  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 14705  001106  0E00               	movlw	0
 14706  001108  6FC4               	movwf	actuatorTest@i& (0+255),b
 14707  00110A                     l8773:
 14708                           
 14709                           ; BSR set to: 0
 14710  00110A  0100               	movlb	0	; () banked
 14711  00110C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14712  00110E  D008               	goto	l1345
 14713  001110  0E10               	movlw	16
 14714  001112  0100               	movlb	0	; () banked
 14715  001114  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 14716  001116  0E27               	movlw	39
 14717  001118  0100               	movlb	0	; () banked
 14718  00111A  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 14719  00111C  B0D8               	btfsc	status,0,c
 14720  00111E  D00D               	goto	l8783
 14721  001120                     l1345:
 14722                           
 14723                           ; BSR set to: 0
 14724                           ;Test.c: 340: {
 14725                           ;Test.c: 341: LATCbits.LATC0 = 1;
 14726  001120  808B               	bsf	3979,0,c	;volatile
 14727                           
 14728                           ; BSR set to: 0
 14729                           ;Test.c: 342: _delay((unsigned long)((10)*(32000000/4000000.0)));
 14730  001122  0E1A               	movlw	26
 14731  001124                     u10917:
 14732  001124  2EE8               	decfsz	wreg,f,c
 14733  001126  D7FE               	bra	u10917
 14734  001128  D000               	nop2	
 14735                           
 14736                           ;Test.c: 343: LATCbits.LATC0 = 0;
 14737  00112A  908B               	bcf	3979,0,c	;volatile
 14738                           
 14739                           ;Test.c: 344: _delay((unsigned long)((90)*(32000000/4000000.0)));
 14740  00112C  0EF0               	movlw	240
 14741  00112E                     u10927:
 14742  00112E  2EE8               	decfsz	wreg,f,c
 14743  001130  D7FE               	bra	u10927
 14744  001132  0100               	movlb	0	; () banked
 14745  001134  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 14746  001136  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 14747  001138  D7E8               	goto	l8773
 14748  00113A                     l8783:
 14749                           
 14750                           ; BSR set to: 0
 14751                           ;Test.c: 345: }
 14752                           ;Test.c: 347: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14753  00113A  0E00               	movlw	0
 14754  00113C  0100               	movlb	0	; () banked
 14755  00113E  6FC2               	movwf	actuatorTest@i_1777& (0+255),b
 14756  001140                     l8785:
 14757                           
 14758                           ; BSR set to: 0
 14759  001140  0E63               	movlw	99
 14760  001142  0100               	movlb	0	; () banked
 14761  001144  65C2               	cpfsgt	actuatorTest@i_1777& (0+255),b
 14762  001146  D001               	goto	l8789
 14763  001148  D00C               	goto	l8793
 14764  00114A                     l8789:
 14765                           
 14766                           ; BSR set to: 0
 14767  00114A  0E68               	movlw	104
 14768  00114C  0100               	movlb	0	; () banked
 14769  00114E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14770  001150  0EE4               	movlw	228
 14771  001152                     u10937:
 14772  001152  2EE8               	decfsz	wreg,f,c
 14773  001154  D7FE               	bra	u10937
 14774  001156  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14775  001158  D7FC               	bra	u10937
 14776  00115A  F000               	nop	
 14777  00115C  0100               	movlb	0	; () banked
 14778  00115E  2BC2               	incf	actuatorTest@i_1777& (0+255),f,b
 14779  001160  D7EF               	goto	l8785
 14780  001162                     l8793:
 14781                           
 14782                           ; BSR set to: 0
 14783  001162  0E00               	movlw	0
 14784  001164  0100               	movlb	0	; () banked
 14785  001166  6FC3               	movwf	actuatorTest@i_1778& (0+255),b
 14786  001168                     l8795:
 14787                           
 14788                           ; BSR set to: 0
 14789  001168  0E63               	movlw	99
 14790  00116A  0100               	movlb	0	; () banked
 14791  00116C  65C3               	cpfsgt	actuatorTest@i_1778& (0+255),b
 14792  00116E  D001               	goto	l8799
 14793  001170  D00C               	goto	l8803
 14794  001172                     l8799:
 14795                           
 14796                           ; BSR set to: 0
 14797  001172  0E68               	movlw	104
 14798  001174  0100               	movlb	0	; () banked
 14799  001176  6FAB               	movwf	??_actuatorTest& (0+255),b
 14800  001178  0EE4               	movlw	228
 14801  00117A                     u10947:
 14802  00117A  2EE8               	decfsz	wreg,f,c
 14803  00117C  D7FE               	bra	u10947
 14804  00117E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14805  001180  D7FC               	bra	u10947
 14806  001182  F000               	nop	
 14807  001184  0100               	movlb	0	; () banked
 14808  001186  2BC3               	incf	actuatorTest@i_1778& (0+255),f,b
 14809  001188  D7EF               	goto	l8795
 14810  00118A                     l8803:
 14811                           
 14812                           ; BSR set to: 0
 14813                           ;Test.c: 348: machine_state = Testing_state;
 14814  00118A  0E03               	movlw	3
 14815  00118C  0100               	movlb	0	; () banked
 14816  00118E  6FFC               	movwf	_machine_state& (0+255),b
 14817                           
 14818                           ; BSR set to: 0
 14819  001190  0012               	return		;funcret
 14820  001192                     __end_of_actuatorTest:
 14821                           	opt stack 0
 14822                           tblptru	equ	0xFF8
 14823                           tblptrh	equ	0xFF7
 14824                           tblptrl	equ	0xFF6
 14825                           tablat	equ	0xFF5
 14826                           prodh	equ	0xFF4
 14827                           prodl	equ	0xFF3
 14828                           intcon	equ	0xFF2
 14829                           intcon2	equ	0xFF1
 14830                           intcon3	equ	0xFF0
 14831                           postinc0	equ	0xFEE
 14832                           wreg	equ	0xFE8
 14833                           postdec1	equ	0xFE5
 14834                           fsr1l	equ	0xFE1
 14835                           indf2	equ	0xFDF
 14836                           postinc2	equ	0xFDE
 14837                           postdec2	equ	0xFDD
 14838                           fsr2h	equ	0xFDA
 14839                           fsr2l	equ	0xFD9
 14840                           status	equ	0xFD8
 14841                           
 14842 ;; *************** function _SpeedTest *****************
 14843 ;; Defined at:
 14844 ;;		line 541 in file "Test.c"
 14845 ;; Parameters:    Size  Location     Type
 14846 ;;		None
 14847 ;; Auto vars:     Size  Location     Type
 14848 ;;		None
 14849 ;; Return value:  Size  Location     Type
 14850 ;;                  1    wreg      void 
 14851 ;; Registers used:
 14852 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14853 ;; Tracked objects:
 14854 ;;		On entry : 0/0
 14855 ;;		On exit  : 0/0
 14856 ;;		Unchanged: 0/0
 14857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14860 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14861 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14862 ;;Total ram usage:        1 bytes
 14863 ;; Hardware stack levels used:    1
 14864 ;; Hardware stack levels required when called:   10
 14865 ;; This function calls:
 14866 ;;		_lcdInst
 14867 ;;		_printf
 14868 ;; This function is called by:
 14869 ;;		_Test
 14870 ;; This function uses a non-reentrant model
 14871 ;;
 14872                           
 14873                           	psect	text46
 14874  004E8A                     __ptext46:
 14875                           	opt stack 0
 14876  004E8A                     _SpeedTest:
 14877                           	opt stack 19
 14878                           
 14879                           ;Test.c: 543: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14880                           
 14881                           ; BSR set to: 0
 14882                           ;incstack = 0
 14883  004E8A  0E01               	movlw	1
 14884  004E8C  EC59  F02E         	call	_lcdInst
 14885  004E90  0E68               	movlw	104
 14886  004E92  0100               	movlb	0	; () banked
 14887  004E94  6FAB               	movwf	??_SpeedTest& (0+255),b
 14888  004E96  0EE4               	movlw	228
 14889  004E98                     u10957:
 14890  004E98  2EE8               	decfsz	wreg,f,c
 14891  004E9A  D7FE               	bra	u10957
 14892  004E9C  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14893  004E9E  D7FC               	bra	u10957
 14894  004EA0  F000               	nop	
 14895  004EA2  0E80               	movlw	128
 14896  004EA4  EC59  F02E         	call	_lcdInst
 14897                           
 14898                           ;Test.c: 544: printf("S: D WILL RETURN ");
 14899  004EA8  0E09               	movlw	low STR_125
 14900  004EAA  0100               	movlb	0	; () banked
 14901  004EAC  6F8E               	movwf	printf@f& (0+255),b
 14902  004EAE  0EFB               	movlw	high STR_125
 14903  004EB0  0100               	movlb	0	; () banked
 14904  004EB2  6F8F               	movwf	(printf@f+1)& (0+255),b
 14905  004EB4  EC15  F00E         	call	_printf	;wreg free
 14906                           
 14907                           ;Test.c: 545: lcdInst(0b11000000);;
 14908  004EB8  0EC0               	movlw	192
 14909  004EBA  EC59  F02E         	call	_lcdInst
 14910                           
 14911                           ;Test.c: 546: printf("OTHER SETS RA5   ");
 14912  004EBE  0EF7               	movlw	low STR_126
 14913  004EC0  0100               	movlb	0	; () banked
 14914  004EC2  6F8E               	movwf	printf@f& (0+255),b
 14915  004EC4  0EFA               	movlw	high STR_126
 14916  004EC6  0100               	movlb	0	; () banked
 14917  004EC8  6F8F               	movwf	(printf@f+1)& (0+255),b
 14918  004ECA  EC15  F00E         	call	_printf	;wreg free
 14919  004ECE                     l1416:
 14920  004ECE  A281               	btfss	3969,1,c	;volatile
 14921  004ED0  D7FE               	goto	l1416
 14922                           
 14923                           ;Test.c: 551: }
 14924                           ;Test.c: 552: if(PORTB >> 4 == 0b1111){
 14925  004ED2  3881               	swapf	3969,w,c	;volatile
 14926  004ED4  0B0F               	andlw	15
 14927  004ED6  0A0F               	xorlw	15
 14928  004ED8  B4D8               	btfsc	status,2,c
 14929  004EDA  0012               	return	
 14930  004EDC  D014               	goto	l8899
 14931  004EDE                     l1423:
 14932                           
 14933                           ;Test.c: 557: LATBbits.LATB2 = 1;
 14934  004EDE  848A               	bsf	3978,2,c	;volatile
 14935                           
 14936                           ;Test.c: 558: _delay((unsigned long)((5)*(32000000/4000.0)));
 14937  004EE0  0E34               	movlw	52
 14938  004EE2  0100               	movlb	0	; () banked
 14939  004EE4  6FAB               	movwf	??_SpeedTest& (0+255),b
 14940  004EE6  0EF1               	movlw	241
 14941  004EE8                     u10967:
 14942  004EE8  2EE8               	decfsz	wreg,f,c
 14943  004EEA  D7FE               	bra	u10967
 14944  004EEC  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14945  004EEE  D7FC               	bra	u10967
 14946  004EF0  D000               	nop2	
 14947                           
 14948                           ;Test.c: 559: LATBbits.LATB2 = 0;
 14949  004EF2  948A               	bcf	3978,2,c	;volatile
 14950                           
 14951                           ;Test.c: 560: _delay((unsigned long)((5)*(32000000/4000.0)));
 14952  004EF4  0E34               	movlw	52
 14953  004EF6  0100               	movlb	0	; () banked
 14954  004EF8  6FAB               	movwf	??_SpeedTest& (0+255),b
 14955  004EFA  0EF1               	movlw	241
 14956  004EFC                     u10977:
 14957  004EFC  2EE8               	decfsz	wreg,f,c
 14958  004EFE  D7FE               	bra	u10977
 14959  004F00  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14960  004F02  D7FC               	bra	u10977
 14961  004F04  D000               	nop2	
 14962  004F06                     l8899:
 14963  004F06  B281               	btfsc	3969,1,c	;volatile
 14964  004F08  D7EA               	goto	l1423
 14965                           
 14966                           ;Test.c: 563: }
 14967                           ;Test.c: 564: LATBbits.LATB2 = 0;
 14968  004F0A  948A               	bcf	3978,2,c	;volatile
 14969  004F0C  D7E0               	goto	l1416
 14970  004F0E                     __end_of_SpeedTest:
 14971                           	opt stack 0
 14972                           tblptru	equ	0xFF8
 14973                           tblptrh	equ	0xFF7
 14974                           tblptrl	equ	0xFF6
 14975                           tablat	equ	0xFF5
 14976                           prodh	equ	0xFF4
 14977                           prodl	equ	0xFF3
 14978                           intcon	equ	0xFF2
 14979                           intcon2	equ	0xFF1
 14980                           intcon3	equ	0xFF0
 14981                           postinc0	equ	0xFEE
 14982                           wreg	equ	0xFE8
 14983                           postdec1	equ	0xFE5
 14984                           fsr1l	equ	0xFE1
 14985                           indf2	equ	0xFDF
 14986                           postinc2	equ	0xFDE
 14987                           postdec2	equ	0xFDD
 14988                           fsr2h	equ	0xFDA
 14989                           fsr2l	equ	0xFD9
 14990                           status	equ	0xFD8
 14991                           
 14992 ;; *************** function _PortTestPusher *****************
 14993 ;; Defined at:
 14994 ;;		line 682 in file "Test.c"
 14995 ;; Parameters:    Size  Location     Type
 14996 ;;		None
 14997 ;; Auto vars:     Size  Location     Type
 14998 ;;		None
 14999 ;; Return value:  Size  Location     Type
 15000 ;;                  1    wreg      void 
 15001 ;; Registers used:
 15002 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15003 ;; Tracked objects:
 15004 ;;		On entry : 0/0
 15005 ;;		On exit  : 0/0
 15006 ;;		Unchanged: 0/0
 15007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15010 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15011 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15012 ;;Total ram usage:        1 bytes
 15013 ;; Hardware stack levels used:    1
 15014 ;; Hardware stack levels required when called:   10
 15015 ;; This function calls:
 15016 ;;		_lcdInst
 15017 ;;		_printf
 15018 ;; This function is called by:
 15019 ;;		_Test
 15020 ;; This function uses a non-reentrant model
 15021 ;;
 15022                           
 15023                           	psect	text47
 15024  00535A                     __ptext47:
 15025                           	opt stack 0
 15026  00535A                     _PortTestPusher:
 15027                           	opt stack 19
 15028                           
 15029                           ;Test.c: 683: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15030                           
 15031                           ;incstack = 0
 15032  00535A  0E01               	movlw	1
 15033  00535C  EC59  F02E         	call	_lcdInst
 15034  005360  0E68               	movlw	104
 15035  005362  0100               	movlb	0	; () banked
 15036  005364  6FAB               	movwf	??_PortTestPusher& (0+255),b
 15037  005366  0EE4               	movlw	228
 15038  005368                     u10987:
 15039  005368  2EE8               	decfsz	wreg,f,c
 15040  00536A  D7FE               	bra	u10987
 15041  00536C  2FAB               	decfsz	??_PortTestPusher& (0+255),f,b
 15042  00536E  D7FC               	bra	u10987
 15043  005370  F000               	nop	
 15044  005372  0E80               	movlw	128
 15045  005374  EC59  F02E         	call	_lcdInst
 15046                           
 15047                           ;Test.c: 684: printf("D WILL RETURN    ");
 15048  005378  0EE5               	movlw	low STR_116
 15049  00537A  0100               	movlb	0	; () banked
 15050  00537C  6F8E               	movwf	printf@f& (0+255),b
 15051  00537E  0EFA               	movlw	high STR_116
 15052  005380  0100               	movlb	0	; () banked
 15053  005382  6F8F               	movwf	(printf@f+1)& (0+255),b
 15054  005384  EC15  F00E         	call	_printf	;wreg free
 15055                           
 15056                           ;Test.c: 685: lcdInst(0b11000000);;
 15057  005388  0EC0               	movlw	192
 15058  00538A  EC59  F02E         	call	_lcdInst
 15059                           
 15060                           ;Test.c: 686: printf("OTHER SETS PUSHER");
 15061  00538E  0E2D               	movlw	low STR_134
 15062  005390  0100               	movlb	0	; () banked
 15063  005392  6F8E               	movwf	printf@f& (0+255),b
 15064  005394  0EFB               	movlw	high STR_134
 15065  005396  0100               	movlb	0	; () banked
 15066  005398  6F8F               	movwf	(printf@f+1)& (0+255),b
 15067  00539A  EC15  F00E         	call	_printf	;wreg free
 15068  00539E                     l1477:
 15069  00539E  A281               	btfss	3969,1,c	;volatile
 15070  0053A0  D7FE               	goto	l1477
 15071                           
 15072                           ;Test.c: 691: }
 15073                           ;Test.c: 692: if(PORTB >> 4 == 0b1111){
 15074  0053A2  3881               	swapf	3969,w,c	;volatile
 15075  0053A4  0B0F               	andlw	15
 15076  0053A6  0A0F               	xorlw	15
 15077  0053A8  B4D8               	btfsc	status,2,c
 15078  0053AA  0012               	return	
 15079                           
 15080                           ;Test.c: 695: else{
 15081                           ;Test.c: 696: LATAbits.LATA4 = 1;
 15082                           
 15083                           ;Test.c: 694: }
 15084                           
 15085                           ;Test.c: 693: break;
 15086  0053AC  8889               	bsf	3977,4,c	;volatile
 15087  0053AE                     l1483:
 15088  0053AE  B281               	btfsc	3969,1,c	;volatile
 15089  0053B0  D7FE               	goto	l1483
 15090                           
 15091                           ;Test.c: 699: }
 15092                           ;Test.c: 700: LATAbits.LATA4 = 0;
 15093  0053B2  9889               	bcf	3977,4,c	;volatile
 15094  0053B4  D7F4               	goto	l1477
 15095  0053B6                     __end_of_PortTestPusher:
 15096                           	opt stack 0
 15097                           tblptru	equ	0xFF8
 15098                           tblptrh	equ	0xFF7
 15099                           tblptrl	equ	0xFF6
 15100                           tablat	equ	0xFF5
 15101                           prodh	equ	0xFF4
 15102                           prodl	equ	0xFF3
 15103                           intcon	equ	0xFF2
 15104                           intcon2	equ	0xFF1
 15105                           intcon3	equ	0xFF0
 15106                           postinc0	equ	0xFEE
 15107                           wreg	equ	0xFE8
 15108                           postdec1	equ	0xFE5
 15109                           fsr1l	equ	0xFE1
 15110                           indf2	equ	0xFDF
 15111                           postinc2	equ	0xFDE
 15112                           postdec2	equ	0xFDD
 15113                           fsr2h	equ	0xFDA
 15114                           fsr2l	equ	0xFD9
 15115                           status	equ	0xFD8
 15116                           
 15117 ;; *************** function _PortTestDC *****************
 15118 ;; Defined at:
 15119 ;;		line 411 in file "Test.c"
 15120 ;; Parameters:    Size  Location     Type
 15121 ;;		None
 15122 ;; Auto vars:     Size  Location     Type
 15123 ;;		None
 15124 ;; Return value:  Size  Location     Type
 15125 ;;                  1    wreg      void 
 15126 ;; Registers used:
 15127 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15128 ;; Tracked objects:
 15129 ;;		On entry : 0/0
 15130 ;;		On exit  : 0/0
 15131 ;;		Unchanged: 0/0
 15132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15135 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15136 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15137 ;;Total ram usage:        1 bytes
 15138 ;; Hardware stack levels used:    1
 15139 ;; Hardware stack levels required when called:   10
 15140 ;; This function calls:
 15141 ;;		_lcdInst
 15142 ;;		_printf
 15143 ;; This function is called by:
 15144 ;;		_Test
 15145 ;; This function uses a non-reentrant model
 15146 ;;
 15147                           
 15148                           	psect	text48
 15149  0053B6                     __ptext48:
 15150                           	opt stack 0
 15151  0053B6                     _PortTestDC:
 15152                           	opt stack 19
 15153                           
 15154                           ;Test.c: 412: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15155                           
 15156                           ;incstack = 0
 15157  0053B6  0E01               	movlw	1
 15158  0053B8  EC59  F02E         	call	_lcdInst
 15159  0053BC  0E68               	movlw	104
 15160  0053BE  0100               	movlb	0	; () banked
 15161  0053C0  6FAB               	movwf	??_PortTestDC& (0+255),b
 15162  0053C2  0EE4               	movlw	228
 15163  0053C4                     u10997:
 15164  0053C4  2EE8               	decfsz	wreg,f,c
 15165  0053C6  D7FE               	bra	u10997
 15166  0053C8  2FAB               	decfsz	??_PortTestDC& (0+255),f,b
 15167  0053CA  D7FC               	bra	u10997
 15168  0053CC  F000               	nop	
 15169  0053CE  0E80               	movlw	128
 15170  0053D0  EC59  F02E         	call	_lcdInst
 15171                           
 15172                           ;Test.c: 413: printf("D WILL RETURN    ");
 15173  0053D4  0EE5               	movlw	low STR_116
 15174  0053D6  0100               	movlb	0	; () banked
 15175  0053D8  6F8E               	movwf	printf@f& (0+255),b
 15176  0053DA  0EFA               	movlw	high STR_116
 15177  0053DC  0100               	movlb	0	; () banked
 15178  0053DE  6F8F               	movwf	(printf@f+1)& (0+255),b
 15179  0053E0  EC15  F00E         	call	_printf	;wreg free
 15180                           
 15181                           ;Test.c: 414: lcdInst(0b11000000);;
 15182  0053E4  0EC0               	movlw	192
 15183  0053E6  EC59  F02E         	call	_lcdInst
 15184                           
 15185                           ;Test.c: 415: printf("OTHER SETS DC   ");
 15186  0053EA  0EC9               	movlw	low STR_117
 15187  0053EC  0100               	movlb	0	; () banked
 15188  0053EE  6F8E               	movwf	printf@f& (0+255),b
 15189  0053F0  0EFB               	movlw	high STR_117
 15190  0053F2  0100               	movlb	0	; () banked
 15191  0053F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 15192  0053F6  EC15  F00E         	call	_printf	;wreg free
 15193  0053FA                     l1358:
 15194  0053FA  A281               	btfss	3969,1,c	;volatile
 15195  0053FC  D7FE               	goto	l1358
 15196                           
 15197                           ;Test.c: 420: }
 15198                           ;Test.c: 421: if(PORTB >> 4 == 0b1111){
 15199  0053FE  3881               	swapf	3969,w,c	;volatile
 15200  005400  0B0F               	andlw	15
 15201  005402  0A0F               	xorlw	15
 15202  005404  B4D8               	btfsc	status,2,c
 15203  005406  0012               	return	
 15204                           
 15205                           ;Test.c: 424: else{
 15206                           ;Test.c: 425: LATBbits.LATB2 = 1;
 15207                           
 15208                           ;Test.c: 423: }
 15209                           
 15210                           ;Test.c: 422: break;
 15211  005408  848A               	bsf	3978,2,c	;volatile
 15212  00540A                     l1364:
 15213  00540A  B281               	btfsc	3969,1,c	;volatile
 15214  00540C  D7FE               	goto	l1364
 15215                           
 15216                           ;Test.c: 428: }
 15217                           ;Test.c: 429: LATBbits.LATB2 = 0;
 15218  00540E  948A               	bcf	3978,2,c	;volatile
 15219  005410  D7F4               	goto	l1358
 15220  005412                     __end_of_PortTestDC:
 15221                           	opt stack 0
 15222                           tblptru	equ	0xFF8
 15223                           tblptrh	equ	0xFF7
 15224                           tblptrl	equ	0xFF6
 15225                           tablat	equ	0xFF5
 15226                           prodh	equ	0xFF4
 15227                           prodl	equ	0xFF3
 15228                           intcon	equ	0xFF2
 15229                           intcon2	equ	0xFF1
 15230                           intcon3	equ	0xFF0
 15231                           postinc0	equ	0xFEE
 15232                           wreg	equ	0xFE8
 15233                           postdec1	equ	0xFE5
 15234                           fsr1l	equ	0xFE1
 15235                           indf2	equ	0xFDF
 15236                           postinc2	equ	0xFDE
 15237                           postdec2	equ	0xFDD
 15238                           fsr2h	equ	0xFDA
 15239                           fsr2l	equ	0xFD9
 15240                           status	equ	0xFD8
 15241                           
 15242 ;; *************** function _PlatformTest *****************
 15243 ;; Defined at:
 15244 ;;		line 434 in file "Test.c"
 15245 ;; Parameters:    Size  Location     Type
 15246 ;;		None
 15247 ;; Auto vars:     Size  Location     Type
 15248 ;;  i               2   51[BANK0 ] int 
 15249 ;;  i               2   49[BANK0 ] int 
 15250 ;;  res             2   47[BANK0 ] int 
 15251 ;;  res             2   45[BANK0 ] int 
 15252 ;;  on              2   53[BANK0 ] int 
 15253 ;; Return value:  Size  Location     Type
 15254 ;;                  1    wreg      void 
 15255 ;; Registers used:
 15256 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15257 ;; Tracked objects:
 15258 ;;		On entry : 0/0
 15259 ;;		On exit  : 0/0
 15260 ;;		Unchanged: 0/0
 15261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15263 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15264 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15265 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15266 ;;Total ram usage:       12 bytes
 15267 ;; Hardware stack levels used:    1
 15268 ;; Hardware stack levels required when called:   10
 15269 ;; This function calls:
 15270 ;;		_lcdInst
 15271 ;;		_printf
 15272 ;;		_readADC
 15273 ;;		_stopSignals
 15274 ;; This function is called by:
 15275 ;;		_Test
 15276 ;; This function uses a non-reentrant model
 15277 ;;
 15278                           
 15279                           	psect	text49
 15280  002B0C                     __ptext49:
 15281                           	opt stack 0
 15282  002B0C                     _PlatformTest:
 15283                           	opt stack 19
 15284                           
 15285                           ;Test.c: 435: LATCbits.LATC5 = 1;
 15286                           
 15287                           ;incstack = 0
 15288  002B0C  8A8B               	bsf	3979,5,c	;volatile
 15289                           
 15290                           ;Test.c: 437: machine_state = Sorting_state;
 15291  002B0E  0E01               	movlw	1
 15292  002B10  0100               	movlb	0	; () banked
 15293  002B12  6FFC               	movwf	_machine_state& (0+255),b
 15294                           
 15295                           ;Test.c: 438: f_arm_position = 0;
 15296  002B14  0E00               	movlw	0
 15297  002B16  0100               	movlb	0	; () banked
 15298  002B18  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15299  002B1A  0E00               	movlw	0
 15300  002B1C  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 15301                           
 15302                           ;Test.c: 439: timer2_counter = 0;
 15303  002B1E  0E00               	movlw	0
 15304  002B20  6E74               	movwf	_timer2_counter+1,c	;volatile
 15305  002B22  0E00               	movlw	0
 15306  002B24  6E73               	movwf	_timer2_counter,c	;volatile
 15307                           
 15308                           ; BSR set to: 0
 15309                           ;Test.c: 440: LATBbits.LATB3 = 0;
 15310  002B26  968A               	bcf	3978,3,c	;volatile
 15311                           
 15312                           ; BSR set to: 0
 15313                           ;Test.c: 441: TMR2ON = 1;
 15314  002B28  84CA               	bsf	4042,2,c	;volatile
 15315                           
 15316                           ;Test.c: 442: was_low_2 = 0;
 15317  002B2A  0E00               	movlw	0
 15318  002B2C  6E7A               	movwf	_was_low_2+1,c	;volatile
 15319  002B2E  0E00               	movlw	0
 15320  002B30  6E79               	movwf	_was_low_2,c	;volatile
 15321                           
 15322                           ;Test.c: 444: int on = 1;
 15323  002B32  0E00               	movlw	0
 15324  002B34  0100               	movlb	0	; () banked
 15325  002B36  6FB6               	movwf	(PlatformTest@on+1)& (0+255),b
 15326  002B38  0E01               	movlw	1
 15327  002B3A  6FB5               	movwf	PlatformTest@on& (0+255),b
 15328                           
 15329                           ; BSR set to: 0
 15330                           ;Test.c: 445: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15331  002B3C  0E01               	movlw	1
 15332  002B3E  EC59  F02E         	call	_lcdInst
 15333  002B42  0E68               	movlw	104
 15334  002B44  0100               	movlb	0	; () banked
 15335  002B46  6FAB               	movwf	??_PlatformTest& (0+255),b
 15336  002B48  0EE4               	movlw	228
 15337  002B4A                     u11007:
 15338  002B4A  2EE8               	decfsz	wreg,f,c
 15339  002B4C  D7FE               	bra	u11007
 15340  002B4E  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15341  002B50  D7FC               	bra	u11007
 15342  002B52  F000               	nop	
 15343  002B54  0E80               	movlw	128
 15344  002B56  EC59  F02E         	call	_lcdInst
 15345                           
 15346                           ;Test.c: 446: printf("1: DC | A: ARM  ");
 15347  002B5A  0EFC               	movlw	low STR_118
 15348  002B5C  0100               	movlb	0	; () banked
 15349  002B5E  6F8E               	movwf	printf@f& (0+255),b
 15350  002B60  0EFB               	movlw	high STR_118
 15351  002B62  0100               	movlb	0	; () banked
 15352  002B64  6F8F               	movwf	(printf@f+1)& (0+255),b
 15353  002B66  EC15  F00E         	call	_printf	;wreg free
 15354                           
 15355                           ;Test.c: 448: while(PORTBbits.RB1 == 0){
 15356  002B6A  D058               	goto	l8953
 15357  002B6C                     l8935:
 15358                           
 15359                           ;Test.c: 449: readADC(0);
 15360  002B6C  0E00               	movlw	0
 15361  002B6E  EC4F  F02D         	call	_readADC
 15362                           
 15363                           ;Test.c: 450: int res = ADRESH<<8 | ADRESL;
 15364  002B72  50C3               	movf	4035,w,c	;volatile
 15365  002B74  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 15366  002B78  0100               	movlb	0	; () banked
 15367  002B7A  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 15368  002B7C  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 15369  002B80  0100               	movlb	0	; () banked
 15370  002B82  6BAB               	clrf	??_PlatformTest& (0+255),b
 15371  002B84  0100               	movlb	0	; () banked
 15372  002B86  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 15373  002B88  0100               	movlb	0	; () banked
 15374  002B8A  6FAD               	movwf	PlatformTest@res& (0+255),b
 15375  002B8C  0100               	movlb	0	; () banked
 15376  002B8E  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 15377  002B90  0100               	movlb	0	; () banked
 15378  002B92  6FAE               	movwf	(PlatformTest@res+1)& (0+255),b
 15379                           
 15380                           ; BSR set to: 0
 15381                           ;Test.c: 451: IR_signal = (res > 800) ? 1 : 0;
 15382  002B94  0100               	movlb	0	; () banked
 15383  002B96  BFAE               	btfsc	(PlatformTest@res+1)& (0+255),7,b
 15384  002B98  D00A               	goto	u7980
 15385  002B9A  0E21               	movlw	33
 15386  002B9C  0100               	movlb	0	; () banked
 15387  002B9E  5DAD               	subwf	PlatformTest@res& (0+255),w,b
 15388  002BA0  0E03               	movlw	3
 15389  002BA2  0100               	movlb	0	; () banked
 15390  002BA4  59AE               	subwfb	(PlatformTest@res+1)& (0+255),w,b
 15391  002BA6  A0D8               	btfss	status,0,c
 15392  002BA8  D002               	goto	u7980
 15393  002BAA  0E01               	movlw	1
 15394  002BAC  D001               	goto	u7990
 15395  002BAE                     u7980:
 15396  002BAE  0E00               	movlw	0
 15397  002BB0                     u7990:
 15398  002BB0  0100               	movlb	0	; () banked
 15399  002BB2  6FE0               	movwf	_IR_signal& (0+255),b
 15400  002BB4  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 15401                           
 15402                           ;Test.c: 453: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15403  002BB6  0E01               	movlw	1
 15404  002BB8  EC59  F02E         	call	_lcdInst
 15405  002BBC  0E68               	movlw	104
 15406  002BBE  0100               	movlb	0	; () banked
 15407  002BC0  6FAB               	movwf	??_PlatformTest& (0+255),b
 15408  002BC2  0EE4               	movlw	228
 15409  002BC4                     u11017:
 15410  002BC4  2EE8               	decfsz	wreg,f,c
 15411  002BC6  D7FE               	bra	u11017
 15412  002BC8  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15413  002BCA  D7FC               	bra	u11017
 15414  002BCC  F000               	nop	
 15415  002BCE  0E80               	movlw	128
 15416  002BD0  EC59  F02E         	call	_lcdInst
 15417                           
 15418                           ;Test.c: 454: printf("1: DC | A: ARM  ");
 15419  002BD4  0EFC               	movlw	low STR_118
 15420  002BD6  0100               	movlb	0	; () banked
 15421  002BD8  6F8E               	movwf	printf@f& (0+255),b
 15422  002BDA  0EFB               	movlw	high STR_118
 15423  002BDC  0100               	movlb	0	; () banked
 15424  002BDE  6F8F               	movwf	(printf@f+1)& (0+255),b
 15425  002BE0  EC15  F00E         	call	_printf	;wreg free
 15426                           
 15427                           ;Test.c: 455: lcdInst(0b11000000);;
 15428  002BE4  0EC0               	movlw	192
 15429  002BE6  EC59  F02E         	call	_lcdInst
 15430                           
 15431                           ;Test.c: 456: printf("5:H|6:L|IR:%d   ", res);
 15432  002BEA  0EEB               	movlw	low STR_120
 15433  002BEC  0100               	movlb	0	; () banked
 15434  002BEE  6F8E               	movwf	printf@f& (0+255),b
 15435  002BF0  0EFB               	movlw	high STR_120
 15436  002BF2  0100               	movlb	0	; () banked
 15437  002BF4  6F8F               	movwf	(printf@f+1)& (0+255),b
 15438  002BF6  C0AD  F090         	movff	PlatformTest@res,?_printf+2
 15439  002BFA  C0AE  F091         	movff	PlatformTest@res+1,?_printf+3
 15440  002BFE  EC15  F00E         	call	_printf	;wreg free
 15441                           
 15442                           ;Test.c: 457: _delay((unsigned long)((100)*(32000000/4000.0)));
 15443  002C02  0E05               	movlw	5
 15444  002C04  0100               	movlb	0	; () banked
 15445  002C06  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 15446  002C08  0E0F               	movlw	15
 15447  002C0A  0100               	movlb	0	; () banked
 15448  002C0C  6FAB               	movwf	??_PlatformTest& (0+255),b
 15449  002C0E  0EF1               	movlw	241
 15450  002C10                     u11027:
 15451  002C10  2EE8               	decfsz	wreg,f,c
 15452  002C12  D7FE               	bra	u11027
 15453  002C14  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15454  002C16  D7FC               	bra	u11027
 15455  002C18  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 15456  002C1A  D7FA               	bra	u11027
 15457  002C1C                     l8953:
 15458  002C1C  B281               	btfsc	3969,1,c	;volatile
 15459  002C1E  D059               	goto	l8973
 15460  002C20  D7A5               	goto	l8935
 15461  002C22                     l8955:
 15462                           
 15463                           ;Test.c: 462: readADC(0);
 15464  002C22  0E00               	movlw	0
 15465  002C24  EC4F  F02D         	call	_readADC
 15466                           
 15467                           ;Test.c: 463: int res = ADRESH<<8 | ADRESL;
 15468  002C28  50C3               	movf	4035,w,c	;volatile
 15469  002C2A  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 15470  002C2E  0100               	movlb	0	; () banked
 15471  002C30  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 15472  002C32  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 15473  002C36  0100               	movlb	0	; () banked
 15474  002C38  6BAB               	clrf	??_PlatformTest& (0+255),b
 15475  002C3A  0100               	movlb	0	; () banked
 15476  002C3C  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 15477  002C3E  0100               	movlb	0	; () banked
 15478  002C40  6FAF               	movwf	PlatformTest@res_1790& (0+255),b
 15479  002C42  0100               	movlb	0	; () banked
 15480  002C44  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 15481  002C46  0100               	movlb	0	; () banked
 15482  002C48  6FB0               	movwf	(PlatformTest@res_1790+1)& (0+255),b
 15483                           
 15484                           ; BSR set to: 0
 15485                           ;Test.c: 464: IR_signal = (res > 800) ? 1 : 0;
 15486  002C4A  0100               	movlb	0	; () banked
 15487  002C4C  BFB0               	btfsc	(PlatformTest@res_1790+1)& (0+255),7,b
 15488  002C4E  D00A               	goto	u8010
 15489  002C50  0E21               	movlw	33
 15490  002C52  0100               	movlb	0	; () banked
 15491  002C54  5DAF               	subwf	PlatformTest@res_1790& (0+255),w,b
 15492  002C56  0E03               	movlw	3
 15493  002C58  0100               	movlb	0	; () banked
 15494  002C5A  59B0               	subwfb	(PlatformTest@res_1790+1)& (0+255),w,b
 15495  002C5C  A0D8               	btfss	status,0,c
 15496  002C5E  D002               	goto	u8010
 15497  002C60  0E01               	movlw	1
 15498  002C62  D001               	goto	u8020
 15499  002C64                     u8010:
 15500  002C64  0E00               	movlw	0
 15501  002C66                     u8020:
 15502  002C66  0100               	movlb	0	; () banked
 15503  002C68  6FE0               	movwf	_IR_signal& (0+255),b
 15504  002C6A  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 15505                           
 15506                           ;Test.c: 466: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15507  002C6C  0E01               	movlw	1
 15508  002C6E  EC59  F02E         	call	_lcdInst
 15509  002C72  0E68               	movlw	104
 15510  002C74  0100               	movlb	0	; () banked
 15511  002C76  6FAB               	movwf	??_PlatformTest& (0+255),b
 15512  002C78  0EE4               	movlw	228
 15513  002C7A                     u11037:
 15514  002C7A  2EE8               	decfsz	wreg,f,c
 15515  002C7C  D7FE               	bra	u11037
 15516  002C7E  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15517  002C80  D7FC               	bra	u11037
 15518  002C82  F000               	nop	
 15519  002C84  0E80               	movlw	128
 15520  002C86  EC59  F02E         	call	_lcdInst
 15521                           
 15522                           ;Test.c: 467: printf("1: DC | A: ARM  ");
 15523  002C8A  0EFC               	movlw	low STR_118
 15524  002C8C  0100               	movlb	0	; () banked
 15525  002C8E  6F8E               	movwf	printf@f& (0+255),b
 15526  002C90  0EFB               	movlw	high STR_118
 15527  002C92  0100               	movlb	0	; () banked
 15528  002C94  6F8F               	movwf	(printf@f+1)& (0+255),b
 15529  002C96  EC15  F00E         	call	_printf	;wreg free
 15530                           
 15531                           ;Test.c: 468: lcdInst(0b11000000);;
 15532  002C9A  0EC0               	movlw	192
 15533  002C9C  EC59  F02E         	call	_lcdInst
 15534                           
 15535                           ;Test.c: 469: printf("5:H|6:L|IR:%d   ", res);
 15536  002CA0  0EEB               	movlw	low STR_120
 15537  002CA2  0100               	movlb	0	; () banked
 15538  002CA4  6F8E               	movwf	printf@f& (0+255),b
 15539  002CA6  0EFB               	movlw	high STR_120
 15540  002CA8  0100               	movlb	0	; () banked
 15541  002CAA  6F8F               	movwf	(printf@f+1)& (0+255),b
 15542  002CAC  C0AF  F090         	movff	PlatformTest@res_1790,?_printf+2
 15543  002CB0  C0B0  F091         	movff	PlatformTest@res_1790+1,?_printf+3
 15544  002CB4  EC15  F00E         	call	_printf	;wreg free
 15545                           
 15546                           ;Test.c: 470: _delay((unsigned long)((100)*(32000000/4000.0)));
 15547  002CB8  0E05               	movlw	5
 15548  002CBA  0100               	movlb	0	; () banked
 15549  002CBC  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 15550  002CBE  0E0F               	movlw	15
 15551  002CC0  0100               	movlb	0	; () banked
 15552  002CC2  6FAB               	movwf	??_PlatformTest& (0+255),b
 15553  002CC4  0EF1               	movlw	241
 15554  002CC6                     u11047:
 15555  002CC6  2EE8               	decfsz	wreg,f,c
 15556  002CC8  D7FE               	bra	u11047
 15557  002CCA  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15558  002CCC  D7FC               	bra	u11047
 15559  002CCE  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 15560  002CD0  D7FA               	bra	u11047
 15561  002CD2                     l8973:
 15562  002CD2  A281               	btfss	3969,1,c	;volatile
 15563  002CD4  D7A6               	goto	l8955
 15564                           
 15565                           ;Test.c: 471: }
 15566                           ;Test.c: 472: if(PORTB >> 4 == 0b1111){
 15567  002CD6  3881               	swapf	3969,w,c	;volatile
 15568  002CD8  0B0F               	andlw	15
 15569  002CDA  0A0F               	xorlw	15
 15570  002CDC  B4D8               	btfsc	status,2,c
 15571  002CDE  D09A               	goto	l1379
 15572                           
 15573                           ;Test.c: 475: else if(PORTB >> 4 == 0b0000){
 15574                           
 15575                           ;Test.c: 474: }
 15576                           
 15577                           ;Test.c: 473: break;
 15578  002CE0  CF81 F0AB          	movff	3969,??_PlatformTest	;volatile
 15579  002CE4  0100               	movlb	0	; () banked
 15580  002CE6  3BAB               	swapf	??_PlatformTest& (0+255),f,b
 15581  002CE8  0E0F               	movlw	15
 15582  002CEA  17AB               	andwf	??_PlatformTest& (0+255),f,b
 15583  002CEC  A4D8               	btfss	status,2,c
 15584  002CEE  D012               	goto	l8985
 15585                           
 15586                           ; BSR set to: 0
 15587                           ;Test.c: 476: LATBbits.LATB2 = !LATBbits.LATB2;
 15588  002CF0  B48A               	btfsc	3978,2,c	;volatile
 15589  002CF2  D004               	goto	u8060
 15590  002CF4  0100               	movlb	0	; () banked
 15591  002CF6  6BAB               	clrf	??_PlatformTest& (0+255),b
 15592  002CF8  2BAB               	incf	??_PlatformTest& (0+255),f,b
 15593  002CFA  D002               	goto	u8078
 15594  002CFC                     u8060:
 15595  002CFC  0100               	movlb	0	; () banked
 15596  002CFE  6BAB               	clrf	??_PlatformTest& (0+255),b
 15597  002D00                     u8078:
 15598  002D00  0100               	movlb	0	; () banked
 15599  002D02  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 15600  002D04  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 15601  002D06  508A               	movf	3978,w,c	;volatile
 15602  002D08  0100               	movlb	0	; () banked
 15603  002D0A  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 15604  002D0C  0BFB               	andlw	-5
 15605  002D0E  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 15606  002D10  6E8A               	movwf	3978,c	;volatile
 15607                           
 15608                           ;Test.c: 477: }
 15609  002D12  D07D               	goto	l1394
 15610  002D14                     l8985:
 15611                           
 15612                           ; BSR set to: 0
 15613                           ;Test.c: 478: else if(PORTB >> 4 == 0b0011){
 15614  002D14  3881               	swapf	3969,w,c	;volatile
 15615  002D16  0B0F               	andlw	15
 15616  002D18  0A03               	xorlw	3
 15617  002D1A  A4D8               	btfss	status,2,c
 15618  002D1C  D020               	goto	l8997
 15619                           
 15620                           ; BSR set to: 0
 15621                           ;Test.c: 479: if(on){
 15622  002D1E  0100               	movlb	0	; () banked
 15623  002D20  51B5               	movf	PlatformTest@on& (0+255),w,b
 15624  002D22  0100               	movlb	0	; () banked
 15625  002D24  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 15626  002D26  B4D8               	btfsc	status,2,c
 15627  002D28  D010               	goto	l8993
 15628                           
 15629                           ; BSR set to: 0
 15630                           ;Test.c: 480: f_arm_position = 1;
 15631  002D2A  0E00               	movlw	0
 15632  002D2C  0100               	movlb	0	; () banked
 15633  002D2E  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15634  002D30  0E01               	movlw	1
 15635  002D32  D00F               	goto	L16
 15636  002D34                     l8991:
 15637                           
 15638                           ; BSR set to: 0
 15639                           ;Test.c: 481: on = !on;
 15640  002D34  0100               	movlb	0	; () banked
 15641  002D36  51B5               	movf	PlatformTest@on& (0+255),w,b
 15642  002D38  0100               	movlb	0	; () banked
 15643  002D3A  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 15644  002D3C  A4D8               	btfss	status,2,c
 15645  002D3E  D00D               	goto	u8120
 15646  002D40  D00A               	goto	u8121
 15647  002D42                     u8110:
 15648  002D42  0100               	movlb	0	; () banked
 15649  002D44  6FB5               	movwf	PlatformTest@on& (0+255),b
 15650  002D46  6BB6               	clrf	(PlatformTest@on+1)& (0+255),b
 15651                           
 15652                           ;Test.c: 482: }
 15653  002D48  D062               	goto	l1394
 15654  002D4A                     l8993:
 15655                           
 15656                           ; BSR set to: 0
 15657                           ;Test.c: 483: else{
 15658                           ;Test.c: 484: f_arm_position = 0;
 15659  002D4A  0E00               	movlw	0
 15660  002D4C  0100               	movlb	0	; () banked
 15661  002D4E  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15662  002D50  0E00               	movlw	0
 15663  002D52                     L16:
 15664  002D52  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 15665  002D54  D7EF               	goto	l8991
 15666  002D56                     u8121:
 15667  002D56  0E01               	movlw	1
 15668  002D58  D7F4               	goto	u8110
 15669  002D5A                     u8120:
 15670  002D5A  0E00               	movlw	0
 15671  002D5C  D7F2               	goto	u8110
 15672  002D5E                     l8997:
 15673                           
 15674                           ; BSR set to: 0
 15675                           ;Test.c: 488: else if(PORTB >> 4 == 0b0101){
 15676  002D5E  3881               	swapf	3969,w,c	;volatile
 15677  002D60  0B0F               	andlw	15
 15678  002D62  0A05               	xorlw	5
 15679  002D64  A4D8               	btfss	status,2,c
 15680  002D66  D027               	goto	l9011
 15681                           
 15682                           ; BSR set to: 0
 15683                           ;Test.c: 490: for(int i = 0; i<30; i++){
 15684  002D68  0E00               	movlw	0
 15685  002D6A  0100               	movlb	0	; () banked
 15686  002D6C  6FB2               	movwf	(PlatformTest@i+1)& (0+255),b
 15687  002D6E  0E00               	movlw	0
 15688  002D70  6FB1               	movwf	PlatformTest@i& (0+255),b
 15689  002D72                     l9001:
 15690                           
 15691                           ; BSR set to: 0
 15692  002D72  0100               	movlb	0	; () banked
 15693  002D74  BFB2               	btfsc	(PlatformTest@i+1)& (0+255),7,b
 15694  002D76  D008               	goto	l1388
 15695  002D78  0100               	movlb	0	; () banked
 15696  002D7A  51B2               	movf	(PlatformTest@i+1)& (0+255),w,b
 15697  002D7C  E148               	bnz	l1394
 15698  002D7E  0E1E               	movlw	30
 15699  002D80  0100               	movlb	0	; () banked
 15700  002D82  5DB1               	subwf	PlatformTest@i& (0+255),w,b
 15701  002D84  B0D8               	btfsc	status,0,c
 15702  002D86  D043               	goto	l1394
 15703  002D88                     l1388:
 15704                           
 15705                           ; BSR set to: 0
 15706                           ;Test.c: 491: LATAbits.LATA4 = 1;
 15707  002D88  8889               	bsf	3977,4,c	;volatile
 15708                           
 15709                           ; BSR set to: 0
 15710                           ;Test.c: 492: _delay((unsigned long)((7500)*(32000000/4000000.0)));
 15711  002D8A  0E4E               	movlw	78
 15712  002D8C  0100               	movlb	0	; () banked
 15713  002D8E  6FAB               	movwf	??_PlatformTest& (0+255),b
 15714  002D90  0EEB               	movlw	235
 15715  002D92                     u11057:
 15716  002D92  2EE8               	decfsz	wreg,f,c
 15717  002D94  D7FE               	bra	u11057
 15718  002D96  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15719  002D98  D7FC               	bra	u11057
 15720                           
 15721                           ;Test.c: 493: LATAbits.LATA4 = 0;
 15722  002D9A  9889               	bcf	3977,4,c	;volatile
 15723                           
 15724                           ;Test.c: 494: _delay((unsigned long)((2500)*(32000000/4000000.0)));
 15725  002D9C  0E1A               	movlw	26
 15726  002D9E  0100               	movlb	0	; () banked
 15727  002DA0  6FAB               	movwf	??_PlatformTest& (0+255),b
 15728  002DA2  0EF8               	movlw	248
 15729  002DA4                     u11067:
 15730  002DA4  2EE8               	decfsz	wreg,f,c
 15731  002DA6  D7FE               	bra	u11067
 15732  002DA8  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15733  002DAA  D7FC               	bra	u11067
 15734  002DAC  F000               	nop	
 15735  002DAE  0100               	movlb	0	; () banked
 15736  002DB0  4BB1               	infsnz	PlatformTest@i& (0+255),f,b
 15737  002DB2  2BB2               	incf	(PlatformTest@i+1)& (0+255),f,b
 15738  002DB4  D7DE               	goto	l9001
 15739  002DB6                     l9011:
 15740                           
 15741                           ; BSR set to: 0
 15742                           ;Test.c: 497: else if (PORTB >> 4 == 0b0110){
 15743  002DB6  3881               	swapf	3969,w,c	;volatile
 15744  002DB8  0B0F               	andlw	15
 15745  002DBA  0A06               	xorlw	6
 15746  002DBC  A4D8               	btfss	status,2,c
 15747  002DBE  D027               	goto	l1394
 15748                           
 15749                           ; BSR set to: 0
 15750                           ;Test.c: 499: for(int i = 0; i<30; i++){
 15751  002DC0  0E00               	movlw	0
 15752  002DC2  0100               	movlb	0	; () banked
 15753  002DC4  6FB4               	movwf	(PlatformTest@i_1794+1)& (0+255),b
 15754  002DC6  0E00               	movlw	0
 15755  002DC8  6FB3               	movwf	PlatformTest@i_1794& (0+255),b
 15756  002DCA                     l9015:
 15757                           
 15758                           ; BSR set to: 0
 15759  002DCA  0100               	movlb	0	; () banked
 15760  002DCC  BFB4               	btfsc	(PlatformTest@i_1794+1)& (0+255),7,b
 15761  002DCE  D008               	goto	l1392
 15762  002DD0  0100               	movlb	0	; () banked
 15763  002DD2  51B4               	movf	(PlatformTest@i_1794+1)& (0+255),w,b
 15764  002DD4  E11C               	bnz	l1394
 15765  002DD6  0E1E               	movlw	30
 15766  002DD8  0100               	movlb	0	; () banked
 15767  002DDA  5DB3               	subwf	PlatformTest@i_1794& (0+255),w,b
 15768  002DDC  B0D8               	btfsc	status,0,c
 15769  002DDE  D017               	goto	l1394
 15770  002DE0                     l1392:
 15771                           
 15772                           ; BSR set to: 0
 15773                           ;Test.c: 500: LATAbits.LATA4 = 1;
 15774  002DE0  8889               	bsf	3977,4,c	;volatile
 15775                           
 15776                           ; BSR set to: 0
 15777                           ;Test.c: 501: _delay((unsigned long)((5800)*(32000000/4000000.0)));
 15778  002DE2  0E3D               	movlw	61
 15779  002DE4  0100               	movlb	0	; () banked
 15780  002DE6  6FAB               	movwf	??_PlatformTest& (0+255),b
 15781  002DE8  0E41               	movlw	65
 15782  002DEA                     u11077:
 15783  002DEA  2EE8               	decfsz	wreg,f,c
 15784  002DEC  D7FE               	bra	u11077
 15785  002DEE  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15786  002DF0  D7FC               	bra	u11077
 15787                           
 15788                           ;Test.c: 502: LATAbits.LATA4 = 0;
 15789  002DF2  9889               	bcf	3977,4,c	;volatile
 15790                           
 15791                           ;Test.c: 503: _delay((unsigned long)((4200)*(32000000/4000000.0)));
 15792  002DF4  0E2C               	movlw	44
 15793  002DF6  0100               	movlb	0	; () banked
 15794  002DF8  6FAB               	movwf	??_PlatformTest& (0+255),b
 15795  002DFA  0EA1               	movlw	161
 15796  002DFC                     u11087:
 15797  002DFC  2EE8               	decfsz	wreg,f,c
 15798  002DFE  D7FE               	bra	u11087
 15799  002E00  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15800  002E02  D7FC               	bra	u11087
 15801  002E04  D000               	nop2	
 15802  002E06  0100               	movlb	0	; () banked
 15803  002E08  4BB3               	infsnz	PlatformTest@i_1794& (0+255),f,b
 15804  002E0A  2BB4               	incf	(PlatformTest@i_1794+1)& (0+255),f,b
 15805  002E0C  D7DE               	goto	l9015
 15806  002E0E                     l1394:
 15807  002E0E  A281               	btfss	3969,1,c	;volatile
 15808  002E10  D760               	goto	l8973
 15809  002E12  D7FD               	goto	l1394
 15810  002E14                     l1379:
 15811                           
 15812                           ;Test.c: 508: }
 15813                           ;Test.c: 510: LATCbits.LATC5 = 0;
 15814  002E14  9A8B               	bcf	3979,5,c	;volatile
 15815                           
 15816                           ;Test.c: 511: stopSignals();
 15817  002E16  EC0B  F02E         	call	_stopSignals	;wreg free
 15818                           
 15819                           ;Test.c: 512: machine_state = Testing_state;
 15820  002E1A  0E03               	movlw	3
 15821  002E1C  0100               	movlb	0	; () banked
 15822  002E1E  6FFC               	movwf	_machine_state& (0+255),b
 15823                           
 15824                           ; BSR set to: 0
 15825  002E20  0012               	return		;funcret
 15826  002E22                     __end_of_PlatformTest:
 15827                           	opt stack 0
 15828                           tblptru	equ	0xFF8
 15829                           tblptrh	equ	0xFF7
 15830                           tblptrl	equ	0xFF6
 15831                           tablat	equ	0xFF5
 15832                           prodh	equ	0xFF4
 15833                           prodl	equ	0xFF3
 15834                           intcon	equ	0xFF2
 15835                           intcon2	equ	0xFF1
 15836                           intcon3	equ	0xFF0
 15837                           postinc0	equ	0xFEE
 15838                           wreg	equ	0xFE8
 15839                           postdec1	equ	0xFE5
 15840                           fsr1l	equ	0xFE1
 15841                           indf2	equ	0xFDF
 15842                           postinc2	equ	0xFDE
 15843                           postdec2	equ	0xFDD
 15844                           fsr2h	equ	0xFDA
 15845                           fsr2l	equ	0xFD9
 15846                           status	equ	0xFD8
 15847                           
 15848 ;; *************** function _BothServos *****************
 15849 ;; Defined at:
 15850 ;;		line 351 in file "Test.c"
 15851 ;; Parameters:    Size  Location     Type
 15852 ;;		None
 15853 ;; Auto vars:     Size  Location     Type
 15854 ;;		None
 15855 ;; Return value:  Size  Location     Type
 15856 ;;                  1    wreg      void 
 15857 ;; Registers used:
 15858 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15859 ;; Tracked objects:
 15860 ;;		On entry : 0/0
 15861 ;;		On exit  : 0/0
 15862 ;;		Unchanged: 0/0
 15863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15866 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15867 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15868 ;;Total ram usage:        2 bytes
 15869 ;; Hardware stack levels used:    1
 15870 ;; Hardware stack levels required when called:   10
 15871 ;; This function calls:
 15872 ;;		_initServos
 15873 ;;		_lcdInst
 15874 ;;		_printf
 15875 ;;		_stopSignals
 15876 ;;		_updateServoPosition
 15877 ;; This function is called by:
 15878 ;;		_Test
 15879 ;; This function uses a non-reentrant model
 15880 ;;
 15881                           
 15882                           	psect	text50
 15883  002062                     __ptext50:
 15884                           	opt stack 0
 15885  002062                     _BothServos:
 15886                           	opt stack 19
 15887                           
 15888                           ;Test.c: 352: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15889                           
 15890                           ; BSR set to: 0
 15891                           ;incstack = 0
 15892  002062  0E01               	movlw	1
 15893  002064  EC59  F02E         	call	_lcdInst
 15894  002068  0E68               	movlw	104
 15895  00206A  0100               	movlb	0	; () banked
 15896  00206C  6FAB               	movwf	??_BothServos& (0+255),b
 15897  00206E  0EE4               	movlw	228
 15898  002070                     u11097:
 15899  002070  2EE8               	decfsz	wreg,f,c
 15900  002072  D7FE               	bra	u11097
 15901  002074  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15902  002076  D7FC               	bra	u11097
 15903  002078  F000               	nop	
 15904  00207A  0E80               	movlw	128
 15905  00207C  EC59  F02E         	call	_lcdInst
 15906                           
 15907                           ;Test.c: 353: printf("TST: BOTH SERVOS");
 15908  002080  0EA6               	movlw	low STR_115
 15909  002082  0100               	movlb	0	; () banked
 15910  002084  6F8E               	movwf	printf@f& (0+255),b
 15911  002086  0EFC               	movlw	high STR_115
 15912  002088  0100               	movlb	0	; () banked
 15913  00208A  6F8F               	movwf	(printf@f+1)& (0+255),b
 15914  00208C  EC15  F00E         	call	_printf	;wreg free
 15915                           
 15916                           ;Test.c: 354: TMR1ON = 1;
 15917  002090  80CD               	bsf	4045,0,c	;volatile
 15918                           
 15919                           ;Test.c: 355: TMR3ON = 1;
 15920  002092  80B1               	bsf	4017,0,c	;volatile
 15921                           
 15922                           ;Test.c: 356: machine_state = Sorting_state;
 15923  002094  0E01               	movlw	1
 15924  002096  0100               	movlb	0	; () banked
 15925  002098  6FFC               	movwf	_machine_state& (0+255),b
 15926                           
 15927                           ; BSR set to: 0
 15928                           ;Test.c: 357: was_low_1 = 0;
 15929  00209A  0E00               	movlw	0
 15930  00209C  6E78               	movwf	_was_low_1+1,c	;volatile
 15931  00209E  0E00               	movlw	0
 15932  0020A0  6E77               	movwf	_was_low_1,c	;volatile
 15933                           
 15934                           ; BSR set to: 0
 15935                           ;Test.c: 358: was_low_3 = 0;
 15936  0020A2  0E00               	movlw	0
 15937  0020A4  6E7C               	movwf	_was_low_3+1,c	;volatile
 15938  0020A6  0E00               	movlw	0
 15939  0020A8  6E7B               	movwf	_was_low_3,c	;volatile
 15940                           
 15941                           ; BSR set to: 0
 15942                           ;Test.c: 364: initServos();
 15943  0020AA  ECC6  F027         	call	_initServos	;wreg free
 15944                           
 15945                           ;Test.c: 365: _delay((unsigned long)((1500)*(32000000/4000.0)));
 15946  0020AE  0E3D               	movlw	61
 15947  0020B0  0100               	movlb	0	; () banked
 15948  0020B2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15949  0020B4  0EE1               	movlw	225
 15950  0020B6  0100               	movlb	0	; () banked
 15951  0020B8  6FAB               	movwf	??_BothServos& (0+255),b
 15952  0020BA  0E3F               	movlw	63
 15953  0020BC                     u11107:
 15954  0020BC  2EE8               	decfsz	wreg,f,c
 15955  0020BE  D7FE               	bra	u11107
 15956  0020C0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15957  0020C2  D7FC               	bra	u11107
 15958  0020C4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15959  0020C6  D7FA               	bra	u11107
 15960  0020C8  D000               	nop2	
 15961                           
 15962                           ;Test.c: 367: updateServoPosition(500, 1);
 15963  0020CA  0E01               	movlw	1
 15964  0020CC  0100               	movlb	0	; () banked
 15965  0020CE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15966  0020D0  0EF4               	movlw	244
 15967  0020D2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15968  0020D4  0E00               	movlw	0
 15969  0020D6  0100               	movlb	0	; () banked
 15970  0020D8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15971  0020DA  0E01               	movlw	1
 15972  0020DC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15973  0020DE  EC87  F027         	call	_updateServoPosition	;wreg free
 15974                           
 15975                           ;Test.c: 368: updateServoPosition(1050, 3);
 15976  0020E2  0E04               	movlw	4
 15977  0020E4  0100               	movlb	0	; () banked
 15978  0020E6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15979  0020E8  0E1A               	movlw	26
 15980  0020EA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15981  0020EC  0E00               	movlw	0
 15982  0020EE  0100               	movlb	0	; () banked
 15983  0020F0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15984  0020F2  0E03               	movlw	3
 15985  0020F4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15986  0020F6  EC87  F027         	call	_updateServoPosition	;wreg free
 15987                           
 15988                           ;Test.c: 369: _delay((unsigned long)((750)*(32000000/4000.0)));
 15989  0020FA  0E1F               	movlw	31
 15990  0020FC  0100               	movlb	0	; () banked
 15991  0020FE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15992  002100  0E71               	movlw	113
 15993  002102  0100               	movlb	0	; () banked
 15994  002104  6FAB               	movwf	??_BothServos& (0+255),b
 15995  002106  0E1E               	movlw	30
 15996  002108                     u11117:
 15997  002108  2EE8               	decfsz	wreg,f,c
 15998  00210A  D7FE               	bra	u11117
 15999  00210C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16000  00210E  D7FC               	bra	u11117
 16001  002110  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16002  002112  D7FA               	bra	u11117
 16003  002114  F000               	nop	
 16004                           
 16005                           ;Test.c: 370: updateServoPosition(1260, 3);
 16006  002116  0E04               	movlw	4
 16007  002118  0100               	movlb	0	; () banked
 16008  00211A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16009  00211C  0EEC               	movlw	236
 16010  00211E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16011  002120  0E00               	movlw	0
 16012  002122  0100               	movlb	0	; () banked
 16013  002124  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16014  002126  0E03               	movlw	3
 16015  002128  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16016  00212A  EC87  F027         	call	_updateServoPosition	;wreg free
 16017                           
 16018                           ;Test.c: 371: _delay((unsigned long)((700)*(32000000/4000.0)));
 16019  00212E  0E1D               	movlw	29
 16020  002130  0100               	movlb	0	; () banked
 16021  002132  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16022  002134  0E69               	movlw	105
 16023  002136  0100               	movlb	0	; () banked
 16024  002138  6FAB               	movwf	??_BothServos& (0+255),b
 16025  00213A  0EA5               	movlw	165
 16026  00213C                     u11127:
 16027  00213C  2EE8               	decfsz	wreg,f,c
 16028  00213E  D7FE               	bra	u11127
 16029  002140  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16030  002142  D7FC               	bra	u11127
 16031  002144  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16032  002146  D7FA               	bra	u11127
 16033                           
 16034                           ;Test.c: 372: updateServoPosition(1050, 3);
 16035  002148  0E04               	movlw	4
 16036  00214A  0100               	movlb	0	; () banked
 16037  00214C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16038  00214E  0E1A               	movlw	26
 16039  002150  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16040  002152  0E00               	movlw	0
 16041  002154  0100               	movlb	0	; () banked
 16042  002156  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16043  002158  0E03               	movlw	3
 16044  00215A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16045  00215C  EC87  F027         	call	_updateServoPosition	;wreg free
 16046                           
 16047                           ;Test.c: 373: _delay((unsigned long)((750)*(32000000/4000.0)));
 16048  002160  0E1F               	movlw	31
 16049  002162  0100               	movlb	0	; () banked
 16050  002164  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16051  002166  0E71               	movlw	113
 16052  002168  0100               	movlb	0	; () banked
 16053  00216A  6FAB               	movwf	??_BothServos& (0+255),b
 16054  00216C  0E1E               	movlw	30
 16055  00216E                     u11137:
 16056  00216E  2EE8               	decfsz	wreg,f,c
 16057  002170  D7FE               	bra	u11137
 16058  002172  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16059  002174  D7FC               	bra	u11137
 16060  002176  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16061  002178  D7FA               	bra	u11137
 16062  00217A  F000               	nop	
 16063                           
 16064                           ;Test.c: 375: updateServoPosition(850, 1);
 16065  00217C  0E03               	movlw	3
 16066  00217E  0100               	movlb	0	; () banked
 16067  002180  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16068  002182  0E52               	movlw	82
 16069  002184  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16070  002186  0E00               	movlw	0
 16071  002188  0100               	movlb	0	; () banked
 16072  00218A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16073  00218C  0E01               	movlw	1
 16074  00218E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16075  002190  EC87  F027         	call	_updateServoPosition	;wreg free
 16076                           
 16077                           ;Test.c: 376: updateServoPosition(1050, 3);
 16078  002194  0E04               	movlw	4
 16079  002196  0100               	movlb	0	; () banked
 16080  002198  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16081  00219A  0E1A               	movlw	26
 16082  00219C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16083  00219E  0E00               	movlw	0
 16084  0021A0  0100               	movlb	0	; () banked
 16085  0021A2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16086  0021A4  0E03               	movlw	3
 16087  0021A6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16088  0021A8  EC87  F027         	call	_updateServoPosition	;wreg free
 16089                           
 16090                           ;Test.c: 377: _delay((unsigned long)((750)*(32000000/4000.0)));
 16091  0021AC  0E1F               	movlw	31
 16092  0021AE  0100               	movlb	0	; () banked
 16093  0021B0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16094  0021B2  0E71               	movlw	113
 16095  0021B4  0100               	movlb	0	; () banked
 16096  0021B6  6FAB               	movwf	??_BothServos& (0+255),b
 16097  0021B8  0E1E               	movlw	30
 16098  0021BA                     u11147:
 16099  0021BA  2EE8               	decfsz	wreg,f,c
 16100  0021BC  D7FE               	bra	u11147
 16101  0021BE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16102  0021C0  D7FC               	bra	u11147
 16103  0021C2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16104  0021C4  D7FA               	bra	u11147
 16105  0021C6  F000               	nop	
 16106                           
 16107                           ;Test.c: 378: updateServoPosition(1260, 3);
 16108  0021C8  0E04               	movlw	4
 16109  0021CA  0100               	movlb	0	; () banked
 16110  0021CC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16111  0021CE  0EEC               	movlw	236
 16112  0021D0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16113  0021D2  0E00               	movlw	0
 16114  0021D4  0100               	movlb	0	; () banked
 16115  0021D6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16116  0021D8  0E03               	movlw	3
 16117  0021DA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16118  0021DC  EC87  F027         	call	_updateServoPosition	;wreg free
 16119                           
 16120                           ;Test.c: 379: _delay((unsigned long)((700)*(32000000/4000.0)));
 16121  0021E0  0E1D               	movlw	29
 16122  0021E2  0100               	movlb	0	; () banked
 16123  0021E4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16124  0021E6  0E69               	movlw	105
 16125  0021E8  0100               	movlb	0	; () banked
 16126  0021EA  6FAB               	movwf	??_BothServos& (0+255),b
 16127  0021EC  0EA5               	movlw	165
 16128  0021EE                     u11157:
 16129  0021EE  2EE8               	decfsz	wreg,f,c
 16130  0021F0  D7FE               	bra	u11157
 16131  0021F2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16132  0021F4  D7FC               	bra	u11157
 16133  0021F6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16134  0021F8  D7FA               	bra	u11157
 16135                           
 16136                           ;Test.c: 380: updateServoPosition(1050, 3);
 16137  0021FA  0E04               	movlw	4
 16138  0021FC  0100               	movlb	0	; () banked
 16139  0021FE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16140  002200  0E1A               	movlw	26
 16141  002202  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16142  002204  0E00               	movlw	0
 16143  002206  0100               	movlb	0	; () banked
 16144  002208  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16145  00220A  0E03               	movlw	3
 16146  00220C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16147  00220E  EC87  F027         	call	_updateServoPosition	;wreg free
 16148                           
 16149                           ;Test.c: 381: _delay((unsigned long)((750)*(32000000/4000.0)));
 16150  002212  0E1F               	movlw	31
 16151  002214  0100               	movlb	0	; () banked
 16152  002216  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16153  002218  0E71               	movlw	113
 16154  00221A  0100               	movlb	0	; () banked
 16155  00221C  6FAB               	movwf	??_BothServos& (0+255),b
 16156  00221E  0E1E               	movlw	30
 16157  002220                     u11167:
 16158  002220  2EE8               	decfsz	wreg,f,c
 16159  002222  D7FE               	bra	u11167
 16160  002224  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16161  002226  D7FC               	bra	u11167
 16162  002228  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16163  00222A  D7FA               	bra	u11167
 16164  00222C  F000               	nop	
 16165                           
 16166                           ;Test.c: 383: updateServoPosition(500, 1);
 16167  00222E  0E01               	movlw	1
 16168  002230  0100               	movlb	0	; () banked
 16169  002232  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16170  002234  0EF4               	movlw	244
 16171  002236  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16172  002238  0E00               	movlw	0
 16173  00223A  0100               	movlb	0	; () banked
 16174  00223C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16175  00223E  0E01               	movlw	1
 16176  002240  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16177  002242  EC87  F027         	call	_updateServoPosition	;wreg free
 16178                           
 16179                           ;Test.c: 384: updateServoPosition(1050, 3);
 16180  002246  0E04               	movlw	4
 16181  002248  0100               	movlb	0	; () banked
 16182  00224A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16183  00224C  0E1A               	movlw	26
 16184  00224E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16185  002250  0E00               	movlw	0
 16186  002252  0100               	movlb	0	; () banked
 16187  002254  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16188  002256  0E03               	movlw	3
 16189  002258  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16190  00225A  EC87  F027         	call	_updateServoPosition	;wreg free
 16191                           
 16192                           ;Test.c: 385: _delay((unsigned long)((750)*(32000000/4000.0)));
 16193  00225E  0E1F               	movlw	31
 16194  002260  0100               	movlb	0	; () banked
 16195  002262  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16196  002264  0E71               	movlw	113
 16197  002266  0100               	movlb	0	; () banked
 16198  002268  6FAB               	movwf	??_BothServos& (0+255),b
 16199  00226A  0E1E               	movlw	30
 16200  00226C                     u11177:
 16201  00226C  2EE8               	decfsz	wreg,f,c
 16202  00226E  D7FE               	bra	u11177
 16203  002270  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16204  002272  D7FC               	bra	u11177
 16205  002274  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16206  002276  D7FA               	bra	u11177
 16207  002278  F000               	nop	
 16208                           
 16209                           ;Test.c: 386: updateServoPosition(1260, 3);
 16210  00227A  0E04               	movlw	4
 16211  00227C  0100               	movlb	0	; () banked
 16212  00227E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16213  002280  0EEC               	movlw	236
 16214  002282  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16215  002284  0E00               	movlw	0
 16216  002286  0100               	movlb	0	; () banked
 16217  002288  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16218  00228A  0E03               	movlw	3
 16219  00228C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16220  00228E  EC87  F027         	call	_updateServoPosition	;wreg free
 16221                           
 16222                           ;Test.c: 387: _delay((unsigned long)((700)*(32000000/4000.0)));
 16223  002292  0E1D               	movlw	29
 16224  002294  0100               	movlb	0	; () banked
 16225  002296  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16226  002298  0E69               	movlw	105
 16227  00229A  0100               	movlb	0	; () banked
 16228  00229C  6FAB               	movwf	??_BothServos& (0+255),b
 16229  00229E  0EA5               	movlw	165
 16230  0022A0                     u11187:
 16231  0022A0  2EE8               	decfsz	wreg,f,c
 16232  0022A2  D7FE               	bra	u11187
 16233  0022A4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16234  0022A6  D7FC               	bra	u11187
 16235  0022A8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16236  0022AA  D7FA               	bra	u11187
 16237                           
 16238                           ;Test.c: 388: updateServoPosition(1050, 3);
 16239  0022AC  0E04               	movlw	4
 16240  0022AE  0100               	movlb	0	; () banked
 16241  0022B0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16242  0022B2  0E1A               	movlw	26
 16243  0022B4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16244  0022B6  0E00               	movlw	0
 16245  0022B8  0100               	movlb	0	; () banked
 16246  0022BA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16247  0022BC  0E03               	movlw	3
 16248  0022BE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16249  0022C0  EC87  F027         	call	_updateServoPosition	;wreg free
 16250                           
 16251                           ;Test.c: 389: _delay((unsigned long)((1500)*(32000000/4000.0)));
 16252  0022C4  0E3D               	movlw	61
 16253  0022C6  0100               	movlb	0	; () banked
 16254  0022C8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16255  0022CA  0EE1               	movlw	225
 16256  0022CC  0100               	movlb	0	; () banked
 16257  0022CE  6FAB               	movwf	??_BothServos& (0+255),b
 16258  0022D0  0E3F               	movlw	63
 16259  0022D2                     u11197:
 16260  0022D2  2EE8               	decfsz	wreg,f,c
 16261  0022D4  D7FE               	bra	u11197
 16262  0022D6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16263  0022D8  D7FC               	bra	u11197
 16264  0022DA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16265  0022DC  D7FA               	bra	u11197
 16266  0022DE  D000               	nop2	
 16267                           
 16268                           ;Test.c: 391: updateServoPosition(1670, 1);
 16269  0022E0  0E06               	movlw	6
 16270  0022E2  0100               	movlb	0	; () banked
 16271  0022E4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16272  0022E6  0E86               	movlw	134
 16273  0022E8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16274  0022EA  0E00               	movlw	0
 16275  0022EC  0100               	movlb	0	; () banked
 16276  0022EE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16277  0022F0  0E01               	movlw	1
 16278  0022F2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16279  0022F4  EC87  F027         	call	_updateServoPosition	;wreg free
 16280                           
 16281                           ;Test.c: 392: updateServoPosition(1050, 3);
 16282  0022F8  0E04               	movlw	4
 16283  0022FA  0100               	movlb	0	; () banked
 16284  0022FC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16285  0022FE  0E1A               	movlw	26
 16286  002300  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16287  002302  0E00               	movlw	0
 16288  002304  0100               	movlb	0	; () banked
 16289  002306  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16290  002308  0E03               	movlw	3
 16291  00230A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16292  00230C  EC87  F027         	call	_updateServoPosition	;wreg free
 16293                           
 16294                           ;Test.c: 393: _delay((unsigned long)((750)*(32000000/4000.0)));
 16295  002310  0E1F               	movlw	31
 16296  002312  0100               	movlb	0	; () banked
 16297  002314  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16298  002316  0E71               	movlw	113
 16299  002318  0100               	movlb	0	; () banked
 16300  00231A  6FAB               	movwf	??_BothServos& (0+255),b
 16301  00231C  0E1E               	movlw	30
 16302  00231E                     u11207:
 16303  00231E  2EE8               	decfsz	wreg,f,c
 16304  002320  D7FE               	bra	u11207
 16305  002322  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16306  002324  D7FC               	bra	u11207
 16307  002326  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16308  002328  D7FA               	bra	u11207
 16309  00232A  F000               	nop	
 16310                           
 16311                           ;Test.c: 394: updateServoPosition(1390, 3);
 16312  00232C  0E05               	movlw	5
 16313  00232E  0100               	movlb	0	; () banked
 16314  002330  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16315  002332  0E6E               	movlw	110
 16316  002334  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16317  002336  0E00               	movlw	0
 16318  002338  0100               	movlb	0	; () banked
 16319  00233A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16320  00233C  0E03               	movlw	3
 16321  00233E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16322  002340  EC87  F027         	call	_updateServoPosition	;wreg free
 16323                           
 16324                           ;Test.c: 395: _delay((unsigned long)((700)*(32000000/4000.0)));
 16325  002344  0E1D               	movlw	29
 16326  002346  0100               	movlb	0	; () banked
 16327  002348  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16328  00234A  0E69               	movlw	105
 16329  00234C  0100               	movlb	0	; () banked
 16330  00234E  6FAB               	movwf	??_BothServos& (0+255),b
 16331  002350  0EA5               	movlw	165
 16332  002352                     u11217:
 16333  002352  2EE8               	decfsz	wreg,f,c
 16334  002354  D7FE               	bra	u11217
 16335  002356  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16336  002358  D7FC               	bra	u11217
 16337  00235A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16338  00235C  D7FA               	bra	u11217
 16339                           
 16340                           ;Test.c: 396: updateServoPosition(1050, 3);
 16341  00235E  0E04               	movlw	4
 16342  002360  0100               	movlb	0	; () banked
 16343  002362  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16344  002364  0E1A               	movlw	26
 16345  002366  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16346  002368  0E00               	movlw	0
 16347  00236A  0100               	movlb	0	; () banked
 16348  00236C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16349  00236E  0E03               	movlw	3
 16350  002370  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16351  002372  EC87  F027         	call	_updateServoPosition	;wreg free
 16352                           
 16353                           ;Test.c: 397: _delay((unsigned long)((750)*(32000000/4000.0)));
 16354  002376  0E1F               	movlw	31
 16355  002378  0100               	movlb	0	; () banked
 16356  00237A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16357  00237C  0E71               	movlw	113
 16358  00237E  0100               	movlb	0	; () banked
 16359  002380  6FAB               	movwf	??_BothServos& (0+255),b
 16360  002382  0E1E               	movlw	30
 16361  002384                     u11227:
 16362  002384  2EE8               	decfsz	wreg,f,c
 16363  002386  D7FE               	bra	u11227
 16364  002388  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16365  00238A  D7FC               	bra	u11227
 16366  00238C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16367  00238E  D7FA               	bra	u11227
 16368  002390  F000               	nop	
 16369                           
 16370                           ;Test.c: 399: updateServoPosition(2400, 1);
 16371  002392  0E09               	movlw	9
 16372  002394  0100               	movlb	0	; () banked
 16373  002396  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16374  002398  0E60               	movlw	96
 16375  00239A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16376  00239C  0E00               	movlw	0
 16377  00239E  0100               	movlb	0	; () banked
 16378  0023A0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16379  0023A2  0E01               	movlw	1
 16380  0023A4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16381  0023A6  EC87  F027         	call	_updateServoPosition	;wreg free
 16382                           
 16383                           ;Test.c: 400: updateServoPosition(1050, 3);
 16384  0023AA  0E04               	movlw	4
 16385  0023AC  0100               	movlb	0	; () banked
 16386  0023AE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16387  0023B0  0E1A               	movlw	26
 16388  0023B2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16389  0023B4  0E00               	movlw	0
 16390  0023B6  0100               	movlb	0	; () banked
 16391  0023B8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16392  0023BA  0E03               	movlw	3
 16393  0023BC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16394  0023BE  EC87  F027         	call	_updateServoPosition	;wreg free
 16395                           
 16396                           ;Test.c: 401: _delay((unsigned long)((750)*(32000000/4000.0)));
 16397  0023C2  0E1F               	movlw	31
 16398  0023C4  0100               	movlb	0	; () banked
 16399  0023C6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16400  0023C8  0E71               	movlw	113
 16401  0023CA  0100               	movlb	0	; () banked
 16402  0023CC  6FAB               	movwf	??_BothServos& (0+255),b
 16403  0023CE  0E1E               	movlw	30
 16404  0023D0                     u11237:
 16405  0023D0  2EE8               	decfsz	wreg,f,c
 16406  0023D2  D7FE               	bra	u11237
 16407  0023D4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16408  0023D6  D7FC               	bra	u11237
 16409  0023D8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16410  0023DA  D7FA               	bra	u11237
 16411  0023DC  F000               	nop	
 16412                           
 16413                           ;Test.c: 402: updateServoPosition(1390, 3);
 16414  0023DE  0E05               	movlw	5
 16415  0023E0  0100               	movlb	0	; () banked
 16416  0023E2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16417  0023E4  0E6E               	movlw	110
 16418  0023E6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16419  0023E8  0E00               	movlw	0
 16420  0023EA  0100               	movlb	0	; () banked
 16421  0023EC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16422  0023EE  0E03               	movlw	3
 16423  0023F0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16424  0023F2  EC87  F027         	call	_updateServoPosition	;wreg free
 16425                           
 16426                           ;Test.c: 403: _delay((unsigned long)((700)*(32000000/4000.0)));
 16427  0023F6  0E1D               	movlw	29
 16428  0023F8  0100               	movlb	0	; () banked
 16429  0023FA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16430  0023FC  0E69               	movlw	105
 16431  0023FE  0100               	movlb	0	; () banked
 16432  002400  6FAB               	movwf	??_BothServos& (0+255),b
 16433  002402  0EA5               	movlw	165
 16434  002404                     u11247:
 16435  002404  2EE8               	decfsz	wreg,f,c
 16436  002406  D7FE               	bra	u11247
 16437  002408  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16438  00240A  D7FC               	bra	u11247
 16439  00240C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16440  00240E  D7FA               	bra	u11247
 16441                           
 16442                           ;Test.c: 404: updateServoPosition(1050, 3);
 16443  002410  0E04               	movlw	4
 16444  002412  0100               	movlb	0	; () banked
 16445  002414  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16446  002416  0E1A               	movlw	26
 16447  002418  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16448  00241A  0E00               	movlw	0
 16449  00241C  0100               	movlb	0	; () banked
 16450  00241E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16451  002420  0E03               	movlw	3
 16452  002422  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16453  002424  EC87  F027         	call	_updateServoPosition	;wreg free
 16454                           
 16455                           ;Test.c: 405: _delay((unsigned long)((750)*(32000000/4000.0)));
 16456  002428  0E1F               	movlw	31
 16457  00242A  0100               	movlb	0	; () banked
 16458  00242C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16459  00242E  0E71               	movlw	113
 16460  002430  0100               	movlb	0	; () banked
 16461  002432  6FAB               	movwf	??_BothServos& (0+255),b
 16462  002434  0E1E               	movlw	30
 16463  002436                     u11257:
 16464  002436  2EE8               	decfsz	wreg,f,c
 16465  002438  D7FE               	bra	u11257
 16466  00243A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16467  00243C  D7FC               	bra	u11257
 16468  00243E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16469  002440  D7FA               	bra	u11257
 16470  002442  F000               	nop	
 16471                           
 16472                           ;Test.c: 407: stopSignals();
 16473  002444  EC0B  F02E         	call	_stopSignals	;wreg free
 16474                           
 16475                           ;Test.c: 408: machine_state = Testing_state;
 16476  002448  0E03               	movlw	3
 16477  00244A  0100               	movlb	0	; () banked
 16478  00244C  6FFC               	movwf	_machine_state& (0+255),b
 16479                           
 16480                           ; BSR set to: 0
 16481  00244E  0012               	return		;funcret
 16482  002450                     __end_of_BothServos:
 16483                           	opt stack 0
 16484                           tblptru	equ	0xFF8
 16485                           tblptrh	equ	0xFF7
 16486                           tblptrl	equ	0xFF6
 16487                           tablat	equ	0xFF5
 16488                           prodh	equ	0xFF4
 16489                           prodl	equ	0xFF3
 16490                           intcon	equ	0xFF2
 16491                           intcon2	equ	0xFF1
 16492                           intcon3	equ	0xFF0
 16493                           postinc0	equ	0xFEE
 16494                           wreg	equ	0xFE8
 16495                           postdec1	equ	0xFE5
 16496                           fsr1l	equ	0xFE1
 16497                           indf2	equ	0xFDF
 16498                           postinc2	equ	0xFDE
 16499                           postdec2	equ	0xFDD
 16500                           fsr2h	equ	0xFDA
 16501                           fsr2l	equ	0xFD9
 16502                           status	equ	0xFD8
 16503                           
 16504 ;; *************** function _stopSignals *****************
 16505 ;; Defined at:
 16506 ;;		line 72 in file "main.c"
 16507 ;; Parameters:    Size  Location     Type
 16508 ;;		None
 16509 ;; Auto vars:     Size  Location     Type
 16510 ;;		None
 16511 ;; Return value:  Size  Location     Type
 16512 ;;                  1    wreg      void 
 16513 ;; Registers used:
 16514 ;;		wreg, status,2
 16515 ;; Tracked objects:
 16516 ;;		On entry : 0/0
 16517 ;;		On exit  : 0/0
 16518 ;;		Unchanged: 0/0
 16519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16523 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16524 ;;Total ram usage:        0 bytes
 16525 ;; Hardware stack levels used:    1
 16526 ;; Hardware stack levels required when called:    7
 16527 ;; This function calls:
 16528 ;;		Nothing
 16529 ;; This function is called by:
 16530 ;;		_main
 16531 ;;		_BothServos
 16532 ;;		_PlatformTest
 16533 ;;		_arm
 16534 ;; This function uses a non-reentrant model
 16535 ;;
 16536                           
 16537                           	psect	text51
 16538  005C16                     __ptext51:
 16539                           	opt stack 0
 16540  005C16                     _stopSignals:
 16541                           	opt stack 23
 16542                           
 16543                           ;main.c: 73: LATA = 0x00;
 16544                           
 16545                           ; BSR set to: 0
 16546                           ;incstack = 0
 16547  005C16  0E00               	movlw	0
 16548  005C18  6E89               	movwf	3977,c	;volatile
 16549                           
 16550                           ;main.c: 74: LATB = 0x00;
 16551  005C1A  0E00               	movlw	0
 16552  005C1C  6E8A               	movwf	3978,c	;volatile
 16553                           
 16554                           ;main.c: 75: LATC = 0x00;
 16555  005C1E  0E00               	movlw	0
 16556  005C20  6E8B               	movwf	3979,c	;volatile
 16557                           
 16558                           ;main.c: 76: LATD = 0x00;
 16559  005C22  0E00               	movlw	0
 16560  005C24  6E8C               	movwf	3980,c	;volatile
 16561                           
 16562                           ;main.c: 77: LATE = 0x00;
 16563  005C26  0E00               	movlw	0
 16564  005C28  6E8D               	movwf	3981,c	;volatile
 16565                           
 16566                           ;main.c: 78: TMR1ON = 0;
 16567  005C2A  90CD               	bcf	4045,0,c	;volatile
 16568                           
 16569                           ;main.c: 79: TMR2ON = 0;
 16570  005C2C  94CA               	bcf	4042,2,c	;volatile
 16571                           
 16572                           ;main.c: 80: TMR3ON = 0;
 16573  005C2E  90B1               	bcf	4017,0,c	;volatile
 16574  005C30  0012               	return		;funcret
 16575  005C32                     __end_of_stopSignals:
 16576                           	opt stack 0
 16577                           tblptru	equ	0xFF8
 16578                           tblptrh	equ	0xFF7
 16579                           tblptrl	equ	0xFF6
 16580                           tablat	equ	0xFF5
 16581                           prodh	equ	0xFF4
 16582                           prodl	equ	0xFF3
 16583                           intcon	equ	0xFF2
 16584                           intcon2	equ	0xFF1
 16585                           intcon3	equ	0xFF0
 16586                           postinc0	equ	0xFEE
 16587                           wreg	equ	0xFE8
 16588                           postdec1	equ	0xFE5
 16589                           fsr1l	equ	0xFE1
 16590                           indf2	equ	0xFDF
 16591                           postinc2	equ	0xFDE
 16592                           postdec2	equ	0xFDD
 16593                           fsr2h	equ	0xFDA
 16594                           fsr2l	equ	0xFD9
 16595                           status	equ	0xFD8
 16596                           
 16597 ;; *************** function _initServos *****************
 16598 ;; Defined at:
 16599 ;;		line 465 in file "sort.c"
 16600 ;; Parameters:    Size  Location     Type
 16601 ;;		None
 16602 ;; Auto vars:     Size  Location     Type
 16603 ;;		None
 16604 ;; Return value:  Size  Location     Type
 16605 ;;                  1    wreg      void 
 16606 ;; Registers used:
 16607 ;;		wreg, status,2, status,0, cstack
 16608 ;; Tracked objects:
 16609 ;;		On entry : 0/0
 16610 ;;		On exit  : 0/0
 16611 ;;		Unchanged: 0/0
 16612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16615 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16616 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16617 ;;Total ram usage:        1 bytes
 16618 ;; Hardware stack levels used:    1
 16619 ;; Hardware stack levels required when called:    8
 16620 ;; This function calls:
 16621 ;;		_updateServoPosition
 16622 ;; This function is called by:
 16623 ;;		_Loading
 16624 ;;		_BothServos
 16625 ;; This function uses a non-reentrant model
 16626 ;;
 16627                           
 16628                           	psect	text52
 16629  004F8C                     __ptext52:
 16630                           	opt stack 0
 16631  004F8C                     _initServos:
 16632                           	opt stack 20
 16633                           
 16634                           ;sort.c: 467: updateServoPosition(1200, 1);
 16635                           
 16636                           ;incstack = 0
 16637  004F8C  0E04               	movlw	4
 16638  004F8E  0100               	movlb	0	; () banked
 16639  004F90  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16640  004F92  0EB0               	movlw	176
 16641  004F94  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16642  004F96  0E00               	movlw	0
 16643  004F98  0100               	movlb	0	; () banked
 16644  004F9A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16645  004F9C  0E01               	movlw	1
 16646  004F9E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16647  004FA0  EC87  F027         	call	_updateServoPosition	;wreg free
 16648                           
 16649                           ;sort.c: 468: updateServoPosition(1050, 3);
 16650  004FA4  0E04               	movlw	4
 16651  004FA6  0100               	movlb	0	; () banked
 16652  004FA8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16653  004FAA  0E1A               	movlw	26
 16654  004FAC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16655  004FAE  0E00               	movlw	0
 16656  004FB0  0100               	movlb	0	; () banked
 16657  004FB2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16658  004FB4  0E03               	movlw	3
 16659  004FB6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16660  004FB8  EC87  F027         	call	_updateServoPosition	;wreg free
 16661                           
 16662                           ;sort.c: 469: TMR1ON = 1;
 16663  004FBC  80CD               	bsf	4045,0,c	;volatile
 16664                           
 16665                           ;sort.c: 470: was_low_1 = 0;
 16666  004FBE  0E00               	movlw	0
 16667  004FC0  6E78               	movwf	_was_low_1+1,c	;volatile
 16668  004FC2  0E00               	movlw	0
 16669  004FC4  6E77               	movwf	_was_low_1,c	;volatile
 16670                           
 16671                           ;sort.c: 472: _delay((unsigned long)((5)*(32000000/4000.0)));
 16672  004FC6  0E34               	movlw	52
 16673  004FC8  0100               	movlb	0	; () banked
 16674  004FCA  6F88               	movwf	??_initServos& (0+255),b
 16675  004FCC  0EF1               	movlw	241
 16676  004FCE                     u11267:
 16677  004FCE  2EE8               	decfsz	wreg,f,c
 16678  004FD0  D7FE               	bra	u11267
 16679  004FD2  2F88               	decfsz	??_initServos& (0+255),f,b
 16680  004FD4  D7FC               	bra	u11267
 16681  004FD6  D000               	nop2	
 16682                           
 16683                           ;sort.c: 474: TMR3ON = 1;
 16684  004FD8  80B1               	bsf	4017,0,c	;volatile
 16685                           
 16686                           ;sort.c: 475: was_low_3 = 0;
 16687  004FDA  0E00               	movlw	0
 16688  004FDC  6E7C               	movwf	_was_low_3+1,c	;volatile
 16689  004FDE  0E00               	movlw	0
 16690  004FE0  6E7B               	movwf	_was_low_3,c	;volatile
 16691                           
 16692                           ;sort.c: 478: _delay((unsigned long)((1)*(32000000/4000.0)));
 16693  004FE2  0E0B               	movlw	11
 16694  004FE4  0100               	movlb	0	; () banked
 16695  004FE6  6F88               	movwf	??_initServos& (0+255),b
 16696  004FE8  0E62               	movlw	98
 16697  004FEA                     u11277:
 16698  004FEA  2EE8               	decfsz	wreg,f,c
 16699  004FEC  D7FE               	bra	u11277
 16700  004FEE  2F88               	decfsz	??_initServos& (0+255),f,b
 16701  004FF0  D7FC               	bra	u11277
 16702  004FF2  F000               	nop	
 16703                           
 16704                           ;sort.c: 479: LATBbits.LATB3 = 0;
 16705  004FF4  968A               	bcf	3978,3,c	;volatile
 16706                           
 16707                           ;sort.c: 480: TMR2ON = 1;
 16708  004FF6  84CA               	bsf	4042,2,c	;volatile
 16709                           
 16710                           ;sort.c: 481: was_low_2 = 0;
 16711  004FF8  0E00               	movlw	0
 16712  004FFA  6E7A               	movwf	_was_low_2+1,c	;volatile
 16713  004FFC  0E00               	movlw	0
 16714  004FFE  6E79               	movwf	_was_low_2,c	;volatile
 16715                           
 16716                           ;sort.c: 483: LATCbits.LATC0 = 1;
 16717  005000  808B               	bsf	3979,0,c	;volatile
 16718  005002  0012               	return		;funcret
 16719  005004                     __end_of_initServos:
 16720                           	opt stack 0
 16721                           tblptru	equ	0xFF8
 16722                           tblptrh	equ	0xFF7
 16723                           tblptrl	equ	0xFF6
 16724                           tablat	equ	0xFF5
 16725                           prodh	equ	0xFF4
 16726                           prodl	equ	0xFF3
 16727                           intcon	equ	0xFF2
 16728                           intcon2	equ	0xFF1
 16729                           intcon3	equ	0xFF0
 16730                           postinc0	equ	0xFEE
 16731                           wreg	equ	0xFE8
 16732                           postdec1	equ	0xFE5
 16733                           fsr1l	equ	0xFE1
 16734                           indf2	equ	0xFDF
 16735                           postinc2	equ	0xFDE
 16736                           postdec2	equ	0xFDD
 16737                           fsr2h	equ	0xFDA
 16738                           fsr2l	equ	0xFD9
 16739                           status	equ	0xFD8
 16740                           
 16741 ;; *************** function _updateServoPosition *****************
 16742 ;; Defined at:
 16743 ;;		line 573 in file "sort.c"
 16744 ;; Parameters:    Size  Location     Type
 16745 ;;  time_us         2    0[BANK0 ] int 
 16746 ;;  timer           2    2[BANK0 ] int 
 16747 ;; Auto vars:     Size  Location     Type
 16748 ;;  my_time         2    6[BANK0 ] unsigned int 
 16749 ;; Return value:  Size  Location     Type
 16750 ;;                  1    wreg      void 
 16751 ;; Registers used:
 16752 ;;		wreg, status,2, status,0
 16753 ;; Tracked objects:
 16754 ;;		On entry : 0/0
 16755 ;;		On exit  : 0/0
 16756 ;;		Unchanged: 0/0
 16757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16758 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16759 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16760 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16761 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16762 ;;Total ram usage:        8 bytes
 16763 ;; Hardware stack levels used:    1
 16764 ;; Hardware stack levels required when called:    7
 16765 ;; This function calls:
 16766 ;;		Nothing
 16767 ;; This function is called by:
 16768 ;;		_Distribution
 16769 ;;		_initServos
 16770 ;;		_actuatorTest
 16771 ;;		_BothServos
 16772 ;; This function uses a non-reentrant model
 16773 ;;
 16774                           
 16775                           	psect	text53
 16776  004F0E                     __ptext53:
 16777                           	opt stack 0
 16778  004F0E                     _updateServoPosition:
 16779                           	opt stack 20
 16780                           
 16781                           ;sort.c: 574: unsigned int my_time = 65535 - time_us;
 16782                           
 16783                           ;incstack = 0
 16784  004F0E  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 16785  004F12  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 16786  004F16  0100               	movlb	0	; () banked
 16787  004F18  1F84               	comf	??_updateServoPosition& (0+255),f,b
 16788  004F1A  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 16789  004F1C  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 16790  004F1E  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 16791  004F20  0EFF               	movlw	255
 16792  004F22  0100               	movlb	0	; () banked
 16793  004F24  2584               	addwf	??_updateServoPosition& (0+255),w,b
 16794  004F26  0100               	movlb	0	; () banked
 16795  004F28  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 16796  004F2A  0EFF               	movlw	255
 16797  004F2C  0100               	movlb	0	; () banked
 16798  004F2E  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 16799  004F30  0100               	movlb	0	; () banked
 16800  004F32  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 16801                           
 16802                           ;sort.c: 575: switch(timer){
 16803  004F34  D019               	goto	l6909
 16804  004F36                     l6903:
 16805                           
 16806                           ; BSR set to: 0
 16807                           ;sort.c: 577: servoTimes[0] = my_time >> 8;
 16808  004F36  0100               	movlb	0	; () banked
 16809  004F38  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 16810  004F3A  6E5B               	movwf	_servoTimes,c
 16811  004F3C  6A5C               	clrf	_servoTimes+1,c
 16812                           
 16813                           ;sort.c: 578: servoTimes[1] = my_time & 0xFF;
 16814  004F3E  0100               	movlb	0	; () banked
 16815  004F40  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 16816  004F42  6E5D               	movwf	_servoTimes+2,c
 16817  004F44  6A5E               	clrf	_servoTimes+3,c
 16818                           
 16819                           ; BSR set to: 0
 16820                           ;sort.c: 580: pan_servo_state = time_us;
 16821  004F46  C080  F06B         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 16822  004F4A  C081  F06C         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 16823  004F4E                     l922:
 16824                           
 16825                           ; BSR set to: 0
 16826                           ;sort.c: 582: servoTimes[2] = my_time >> 8;
 16827  004F4E  0100               	movlb	0	; () banked
 16828  004F50  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 16829  004F52  6E5F               	movwf	_servoTimes+4,c
 16830  004F54  6A60               	clrf	_servoTimes+5,c
 16831                           
 16832                           ;sort.c: 583: servoTimes[3] = my_time & 0xFF;
 16833  004F56  0100               	movlb	0	; () banked
 16834  004F58  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 16835  004F5A  6E61               	movwf	_servoTimes+6,c
 16836  004F5C  6A62               	clrf	_servoTimes+7,c
 16837                           
 16838                           ; BSR set to: 0
 16839                           ;sort.c: 585: tilt_servo_state = time_us;
 16840  004F5E  C080  F071         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 16841  004F62  C081  F072         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 16842                           
 16843                           ;sort.c: 586: }
 16844  004F66  0012               	return	
 16845  004F68                     l6909:
 16846                           
 16847                           ; BSR set to: 0
 16848  004F68  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 16849  004F6C  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 16850                           
 16851                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16852                           ; Switch size 1, requested type "space"
 16853                           ; Number of cases is 1, Range of values is 0 to 0
 16854                           ; switch strategies available:
 16855                           ; Name         Instructions Cycles
 16856                           ; simple_byte            4     3 (average)
 16857                           ;	Chosen strategy is simple_byte
 16858  004F70  0100               	movlb	0	; () banked
 16859  004F72  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 16860  004F74  0A00               	xorlw	0	; case 0
 16861  004F76  A4D8               	btfss	status,2,c
 16862  004F78  0012               	return	
 16863                           
 16864                           ; BSR set to: 0
 16865                           ; Switch size 1, requested type "space"
 16866                           ; Number of cases is 2, Range of values is 1 to 3
 16867                           ; switch strategies available:
 16868                           ; Name         Instructions Cycles
 16869                           ; simple_byte            7     4 (average)
 16870                           ;	Chosen strategy is simple_byte
 16871  004F7A  0100               	movlb	0	; () banked
 16872  004F7C  5184               	movf	??_updateServoPosition& (0+255),w,b
 16873  004F7E  0A01               	xorlw	1	; case 1
 16874  004F80  B4D8               	btfsc	status,2,c
 16875  004F82  D7D9               	goto	l6903
 16876  004F84  0A02               	xorlw	2	; case 3
 16877  004F86  A4D8               	btfss	status,2,c
 16878  004F88  0012               	return	
 16879  004F8A  D7E1               	goto	l922
 16880  004F8C                     __end_of_updateServoPosition:
 16881                           	opt stack 0
 16882                           tblptru	equ	0xFF8
 16883                           tblptrh	equ	0xFF7
 16884                           tblptrl	equ	0xFF6
 16885                           tablat	equ	0xFF5
 16886                           prodh	equ	0xFF4
 16887                           prodl	equ	0xFF3
 16888                           intcon	equ	0xFF2
 16889                           intcon2	equ	0xFF1
 16890                           intcon3	equ	0xFF0
 16891                           postinc0	equ	0xFEE
 16892                           wreg	equ	0xFE8
 16893                           postdec1	equ	0xFE5
 16894                           fsr1l	equ	0xFE1
 16895                           indf2	equ	0xFDF
 16896                           postinc2	equ	0xFDE
 16897                           postdec2	equ	0xFDD
 16898                           fsr2h	equ	0xFDA
 16899                           fsr2l	equ	0xFD9
 16900                           status	equ	0xFD8
 16901                           
 16902 ;; *************** function _BlockerTest *****************
 16903 ;; Defined at:
 16904 ;;		line 581 in file "Test.c"
 16905 ;; Parameters:    Size  Location     Type
 16906 ;;		None
 16907 ;; Auto vars:     Size  Location     Type
 16908 ;;  i               2   45[BANK0 ] int 
 16909 ;;  cond_flag       2   51[BANK0 ] int 
 16910 ;;  cam_flag        2   49[BANK0 ] int 
 16911 ;;  res             2   47[BANK0 ] int 
 16912 ;; Return value:  Size  Location     Type
 16913 ;;                  1    wreg      void 
 16914 ;; Registers used:
 16915 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16916 ;; Tracked objects:
 16917 ;;		On entry : 0/0
 16918 ;;		On exit  : 0/0
 16919 ;;		Unchanged: 0/0
 16920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16922 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16923 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16924 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16925 ;;Total ram usage:       10 bytes
 16926 ;; Hardware stack levels used:    1
 16927 ;; Hardware stack levels required when called:   10
 16928 ;; This function calls:
 16929 ;;		_lcdInst
 16930 ;;		_printf
 16931 ;;		_readADC
 16932 ;; This function is called by:
 16933 ;;		_Test
 16934 ;; This function uses a non-reentrant model
 16935 ;;
 16936                           
 16937                           	psect	text54
 16938  003E7E                     __ptext54:
 16939                           	opt stack 0
 16940  003E7E                     _BlockerTest:
 16941                           	opt stack 19
 16942                           
 16943                           ;Test.c: 582: readADC(2);
 16944                           
 16945                           ; BSR set to: 0
 16946                           ;incstack = 0
 16947  003E7E  0E02               	movlw	2
 16948  003E80  EC4F  F02D         	call	_readADC
 16949                           
 16950                           ;Test.c: 583: int res = ADRESH<<8 | ADRESL;
 16951  003E84  50C3               	movf	4035,w,c	;volatile
 16952  003E86  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 16953  003E8A  0100               	movlb	0	; () banked
 16954  003E8C  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 16955  003E8E  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 16956  003E92  0100               	movlb	0	; () banked
 16957  003E94  6BAB               	clrf	??_BlockerTest& (0+255),b
 16958  003E96  0100               	movlb	0	; () banked
 16959  003E98  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 16960  003E9A  0100               	movlb	0	; () banked
 16961  003E9C  6FAF               	movwf	BlockerTest@res& (0+255),b
 16962  003E9E  0100               	movlb	0	; () banked
 16963  003EA0  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 16964  003EA2  0100               	movlb	0	; () banked
 16965  003EA4  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 16966                           
 16967                           ; BSR set to: 0
 16968                           ;Test.c: 585: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16969  003EA6  0E01               	movlw	1
 16970  003EA8  EC59  F02E         	call	_lcdInst
 16971  003EAC  0E68               	movlw	104
 16972  003EAE  0100               	movlb	0	; () banked
 16973  003EB0  6FAB               	movwf	??_BlockerTest& (0+255),b
 16974  003EB2  0EE4               	movlw	228
 16975  003EB4                     u11287:
 16976  003EB4  2EE8               	decfsz	wreg,f,c
 16977  003EB6  D7FE               	bra	u11287
 16978  003EB8  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 16979  003EBA  D7FC               	bra	u11287
 16980  003EBC  F000               	nop	
 16981  003EBE  0E80               	movlw	128
 16982  003EC0  EC59  F02E         	call	_lcdInst
 16983                           
 16984                           ;Test.c: 586: printf("D:RET|2:C %d  ", res);
 16985  003EC4  0E6E               	movlw	low STR_127
 16986  003EC6  0100               	movlb	0	; () banked
 16987  003EC8  6F8E               	movwf	printf@f& (0+255),b
 16988  003ECA  0EFE               	movlw	high STR_127
 16989  003ECC  0100               	movlb	0	; () banked
 16990  003ECE  6F8F               	movwf	(printf@f+1)& (0+255),b
 16991  003ED0  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 16992  003ED4  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 16993  003ED8  EC15  F00E         	call	_printf	;wreg free
 16994                           
 16995                           ;Test.c: 587: lcdInst(0b11000000);;
 16996  003EDC  0EC0               	movlw	192
 16997  003EDE  EC59  F02E         	call	_lcdInst
 16998                           
 16999                           ;Test.c: 588: printf("OTHER: CAM TOGGLE");
 17000  003EE2  0E1B               	movlw	low STR_128
 17001  003EE4  0100               	movlb	0	; () banked
 17002  003EE6  6F8E               	movwf	printf@f& (0+255),b
 17003  003EE8  0EFB               	movlw	high STR_128
 17004  003EEA  0100               	movlb	0	; () banked
 17005  003EEC  6F8F               	movwf	(printf@f+1)& (0+255),b
 17006  003EEE  EC15  F00E         	call	_printf	;wreg free
 17007                           
 17008                           ;Test.c: 589: int cam_flag = 1;
 17009  003EF2  0E00               	movlw	0
 17010  003EF4  0100               	movlb	0	; () banked
 17011  003EF6  6FB2               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 17012  003EF8  0E01               	movlw	1
 17013  003EFA  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 17014                           
 17015                           ; BSR set to: 0
 17016                           ;Test.c: 590: int cond_flag = 0;
 17017  003EFC  0E00               	movlw	0
 17018  003EFE  0100               	movlb	0	; () banked
 17019  003F00  6FB4               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 17020  003F02  0E00               	movlw	0
 17021  003F04  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 17022                           
 17023                           ; BSR set to: 0
 17024                           ;Test.c: 593: while(PORTBbits.RB1 == 0){
 17025                           
 17026                           ;Test.c: 592: while(1){
 17027  003F06  D023               	goto	l9153
 17028  003F08                     l9145:
 17029                           
 17030                           ;Test.c: 594: readADC(2);
 17031  003F08  0E02               	movlw	2
 17032  003F0A  EC4F  F02D         	call	_readADC
 17033                           
 17034                           ;Test.c: 595: res = ADRESH<<8 | ADRESL;
 17035  003F0E  50C3               	movf	4035,w,c	;volatile
 17036  003F10  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17037  003F14  0100               	movlb	0	; () banked
 17038  003F16  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17039  003F18  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17040  003F1C  0100               	movlb	0	; () banked
 17041  003F1E  6BAB               	clrf	??_BlockerTest& (0+255),b
 17042  003F20  0100               	movlb	0	; () banked
 17043  003F22  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17044  003F24  0100               	movlb	0	; () banked
 17045  003F26  6FAF               	movwf	BlockerTest@res& (0+255),b
 17046  003F28  0100               	movlb	0	; () banked
 17047  003F2A  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17048  003F2C  0100               	movlb	0	; () banked
 17049  003F2E  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17050                           
 17051                           ; BSR set to: 0
 17052                           ;Test.c: 596: lcdInst(0b10000000);;
 17053  003F30  0E80               	movlw	128
 17054  003F32  EC59  F02E         	call	_lcdInst
 17055                           
 17056                           ;Test.c: 597: printf("D:RET|2:C %d  ", res);
 17057  003F36  0E6E               	movlw	low STR_127
 17058  003F38  0100               	movlb	0	; () banked
 17059  003F3A  6F8E               	movwf	printf@f& (0+255),b
 17060  003F3C  0EFE               	movlw	high STR_127
 17061  003F3E  0100               	movlb	0	; () banked
 17062  003F40  6F8F               	movwf	(printf@f+1)& (0+255),b
 17063  003F42  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17064  003F46  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17065  003F4A  EC15  F00E         	call	_printf	;wreg free
 17066  003F4E                     l9153:
 17067  003F4E  A281               	btfss	3969,1,c	;volatile
 17068  003F50  D7DB               	goto	l9145
 17069                           
 17070                           ;Test.c: 598: }
 17071                           ;Test.c: 599: if(PORTB >> 4 == 0b1111){
 17072  003F52  3881               	swapf	3969,w,c	;volatile
 17073  003F54  0B0F               	andlw	15
 17074  003F56  0A0F               	xorlw	15
 17075  003F58  B4D8               	btfsc	status,2,c
 17076  003F5A  0012               	return	
 17077                           
 17078                           ;Test.c: 602: else if(PORTB >> 4 == 0b0001){
 17079                           
 17080                           ;Test.c: 601: }
 17081                           
 17082                           ;Test.c: 600: break;
 17083  003F5C  3881               	swapf	3969,w,c	;volatile
 17084  003F5E  0B0F               	andlw	15
 17085  003F60  06E8               	decf	wreg,f,c
 17086  003F62  A4D8               	btfss	status,2,c
 17087  003F64  D016               	goto	l9171
 17088                           
 17089                           ;Test.c: 603: if(cond_flag){
 17090  003F66  0100               	movlb	0	; () banked
 17091  003F68  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 17092  003F6A  0100               	movlb	0	; () banked
 17093  003F6C  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17094  003F6E  B4D8               	btfsc	status,2,c
 17095  003F70  D007               	goto	l1440
 17096                           
 17097                           ; BSR set to: 0
 17098                           ;Test.c: 604: LATAbits.LATA3 = 1;
 17099  003F72  8689               	bsf	3977,3,c	;volatile
 17100  003F74  D006               	goto	l9169
 17101  003F76                     u8251:
 17102  003F76  0E01               	movlw	1
 17103  003F78                     u8260:
 17104  003F78  0100               	movlb	0	; () banked
 17105  003F7A  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 17106  003F7C  6BB4               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 17107                           
 17108                           ;Test.c: 606: }
 17109  003F7E  D05F               	goto	l9199
 17110  003F80                     l1440:
 17111                           
 17112                           ; BSR set to: 0
 17113                           ;Test.c: 607: else{
 17114                           ;Test.c: 608: LATAbits.LATA3 = 0;
 17115  003F80  9689               	bcf	3977,3,c	;volatile
 17116  003F82                     l9169:
 17117                           
 17118                           ; BSR set to: 0
 17119                           ;Test.c: 609: cond_flag = !cond_flag;
 17120  003F82  0100               	movlb	0	; () banked
 17121  003F84  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 17122  003F86  0100               	movlb	0	; () banked
 17123  003F88  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17124  003F8A  B4D8               	btfsc	status,2,c
 17125  003F8C  D7F4               	goto	u8251
 17126  003F8E  0E00               	movlw	0
 17127  003F90  D7F3               	goto	u8260
 17128  003F92                     l9171:
 17129                           
 17130                           ;Test.c: 612: else{
 17131                           ;Test.c: 613: if(cam_flag){
 17132  003F92  0100               	movlb	0	; () banked
 17133  003F94  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17134  003F96  0100               	movlb	0	; () banked
 17135  003F98  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17136  003F9A  B4D8               	btfsc	status,2,c
 17137  003F9C  D007               	goto	l9177
 17138                           
 17139                           ; BSR set to: 0
 17140                           ;Test.c: 614: LATCbits.LATC0 = 1;
 17141  003F9E  808B               	bsf	3979,0,c	;volatile
 17142  003FA0  D023               	goto	l9189
 17143  003FA2                     u8301:
 17144  003FA2  0E01               	movlw	1
 17145  003FA4                     u8310:
 17146  003FA4  0100               	movlb	0	; () banked
 17147  003FA6  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 17148  003FA8  6BB2               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 17149                           
 17150                           ;Test.c: 616: }
 17151  003FAA  D049               	goto	l9199
 17152  003FAC                     l9177:
 17153                           
 17154                           ; BSR set to: 0
 17155                           ;Test.c: 617: else{
 17156                           ;Test.c: 618: for(int i=0;i<5000;i++)
 17157  003FAC  0E00               	movlw	0
 17158  003FAE  0100               	movlb	0	; () banked
 17159  003FB0  6FAE               	movwf	(BlockerTest@i+1)& (0+255),b
 17160  003FB2  0E00               	movlw	0
 17161  003FB4  6FAD               	movwf	BlockerTest@i& (0+255),b
 17162  003FB6                     l9179:
 17163                           
 17164                           ; BSR set to: 0
 17165  003FB6  0100               	movlb	0	; () banked
 17166  003FB8  BFAE               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 17167  003FBA  D008               	goto	l1445
 17168  003FBC  0E88               	movlw	136
 17169  003FBE  0100               	movlb	0	; () banked
 17170  003FC0  5DAD               	subwf	BlockerTest@i& (0+255),w,b
 17171  003FC2  0E13               	movlw	19
 17172  003FC4  0100               	movlb	0	; () banked
 17173  003FC6  59AE               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 17174  003FC8  B0D8               	btfsc	status,0,c
 17175  003FCA  D00D               	goto	l1446
 17176  003FCC                     l1445:
 17177                           
 17178                           ; BSR set to: 0
 17179                           ;Test.c: 619: {
 17180                           ;Test.c: 620: LATCbits.LATC0 = 1;
 17181  003FCC  808B               	bsf	3979,0,c	;volatile
 17182                           
 17183                           ; BSR set to: 0
 17184                           ;Test.c: 621: _delay((unsigned long)((10)*(32000000/4000000.0)));
 17185  003FCE  0E1A               	movlw	26
 17186  003FD0                     u11297:
 17187  003FD0  2EE8               	decfsz	wreg,f,c
 17188  003FD2  D7FE               	bra	u11297
 17189  003FD4  D000               	nop2	
 17190                           
 17191                           ;Test.c: 622: LATCbits.LATC0 = 0;
 17192  003FD6  908B               	bcf	3979,0,c	;volatile
 17193                           
 17194                           ;Test.c: 623: _delay((unsigned long)((90)*(32000000/4000000.0)));
 17195  003FD8  0EF0               	movlw	240
 17196  003FDA                     u11307:
 17197  003FDA  2EE8               	decfsz	wreg,f,c
 17198  003FDC  D7FE               	bra	u11307
 17199  003FDE  0100               	movlb	0	; () banked
 17200  003FE0  4BAD               	infsnz	BlockerTest@i& (0+255),f,b
 17201  003FE2  2BAE               	incf	(BlockerTest@i+1)& (0+255),f,b
 17202  003FE4  D7E8               	goto	l9179
 17203  003FE6                     l1446:
 17204                           
 17205                           ; BSR set to: 0
 17206                           ;Test.c: 624: }
 17207                           ;Test.c: 625: LATCbits.LATC0 = 0;
 17208  003FE6  908B               	bcf	3979,0,c	;volatile
 17209  003FE8                     l9189:
 17210                           
 17211                           ; BSR set to: 0
 17212                           ;Test.c: 626: cam_flag = !cam_flag;
 17213  003FE8  0100               	movlb	0	; () banked
 17214  003FEA  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17215  003FEC  0100               	movlb	0	; () banked
 17216  003FEE  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17217  003FF0  B4D8               	btfsc	status,2,c
 17218  003FF2  D7D7               	goto	u8301
 17219  003FF4  0E00               	movlw	0
 17220  003FF6  D7D6               	goto	u8310
 17221  003FF8                     l9191:
 17222                           
 17223                           ;Test.c: 631: readADC(2);
 17224  003FF8  0E02               	movlw	2
 17225  003FFA  EC4F  F02D         	call	_readADC
 17226                           
 17227                           ;Test.c: 632: res = ADRESH<<8 | ADRESL;
 17228  003FFE  50C3               	movf	4035,w,c	;volatile
 17229  004000  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17230  004004  0100               	movlb	0	; () banked
 17231  004006  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17232  004008  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17233  00400C  0100               	movlb	0	; () banked
 17234  00400E  6BAB               	clrf	??_BlockerTest& (0+255),b
 17235  004010  0100               	movlb	0	; () banked
 17236  004012  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17237  004014  0100               	movlb	0	; () banked
 17238  004016  6FAF               	movwf	BlockerTest@res& (0+255),b
 17239  004018  0100               	movlb	0	; () banked
 17240  00401A  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17241  00401C  0100               	movlb	0	; () banked
 17242  00401E  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17243                           
 17244                           ; BSR set to: 0
 17245                           ;Test.c: 633: lcdInst(0b10000000);;
 17246  004020  0E80               	movlw	128
 17247  004022  EC59  F02E         	call	_lcdInst
 17248                           
 17249                           ;Test.c: 634: printf("D:RET|2:C %d  ", res);
 17250  004026  0E6E               	movlw	low STR_127
 17251  004028  0100               	movlb	0	; () banked
 17252  00402A  6F8E               	movwf	printf@f& (0+255),b
 17253  00402C  0EFE               	movlw	high STR_127
 17254  00402E  0100               	movlb	0	; () banked
 17255  004030  6F8F               	movwf	(printf@f+1)& (0+255),b
 17256  004032  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17257  004036  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17258  00403A  EC15  F00E         	call	_printf	;wreg free
 17259  00403E                     l9199:
 17260  00403E  A281               	btfss	3969,1,c	;volatile
 17261  004040  D786               	goto	l9153
 17262  004042  D7DA               	goto	l9191
 17263  004044                     __end_of_BlockerTest:
 17264                           	opt stack 0
 17265                           tblptru	equ	0xFF8
 17266                           tblptrh	equ	0xFF7
 17267                           tblptrl	equ	0xFF6
 17268                           tablat	equ	0xFF5
 17269                           prodh	equ	0xFF4
 17270                           prodl	equ	0xFF3
 17271                           intcon	equ	0xFF2
 17272                           intcon2	equ	0xFF1
 17273                           intcon3	equ	0xFF0
 17274                           postinc0	equ	0xFEE
 17275                           wreg	equ	0xFE8
 17276                           postdec1	equ	0xFE5
 17277                           fsr1l	equ	0xFE1
 17278                           indf2	equ	0xFDF
 17279                           postinc2	equ	0xFDE
 17280                           postdec2	equ	0xFDD
 17281                           fsr2h	equ	0xFDA
 17282                           fsr2l	equ	0xFD9
 17283                           status	equ	0xFD8
 17284                           
 17285 ;; *************** function _readADC *****************
 17286 ;; Defined at:
 17287 ;;		line 15 in file "ADCFunctionality.c"
 17288 ;; Parameters:    Size  Location     Type
 17289 ;;  channel         1    wreg     unsigned char 
 17290 ;; Auto vars:     Size  Location     Type
 17291 ;;  channel         1    1[BANK0 ] unsigned char 
 17292 ;; Return value:  Size  Location     Type
 17293 ;;                  1    wreg      void 
 17294 ;; Registers used:
 17295 ;;		wreg, status,2, status,0, cstack
 17296 ;; Tracked objects:
 17297 ;;		On entry : 0/0
 17298 ;;		On exit  : 0/0
 17299 ;;		Unchanged: 0/0
 17300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17302 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17303 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17304 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17305 ;;Total ram usage:        2 bytes
 17306 ;; Hardware stack levels used:    1
 17307 ;; Hardware stack levels required when called:    7
 17308 ;; This function calls:
 17309 ;;		Nothing
 17310 ;; This function is called by:
 17311 ;;		_readIR
 17312 ;;		_readMAG
 17313 ;;		_readCOND
 17314 ;;		_sensorTest
 17315 ;;		_PlatformTest
 17316 ;;		_BlockerTest
 17317 ;; This function uses a non-reentrant model
 17318 ;;
 17319                           
 17320                           	psect	text55
 17321  005A9E                     __ptext55:
 17322                           	opt stack 0
 17323  005A9E                     _readADC:
 17324                           	opt stack 20
 17325                           
 17326                           ;incstack = 0
 17327                           ;readADC@channel stored from wreg
 17328  005A9E  0100               	movlb	0	; () banked
 17329  005AA0  6F81               	movwf	readADC@channel& (0+255),b
 17330                           
 17331                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 17332  005AA2  0100               	movlb	0	; () banked
 17333  005AA4  4581               	rlncf	readADC@channel& (0+255),w,b
 17334  005AA6  46E8               	rlncf	wreg,f,c
 17335  005AA8  0BFC               	andlw	252
 17336  005AAA  6EC2               	movwf	4034,c	;volatile
 17337                           
 17338                           ; BSR set to: 0
 17339                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 17340  005AAC  80C2               	bsf	4034,0,c	;volatile
 17341                           
 17342                           ; BSR set to: 0
 17343                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 17344  005AAE  82C2               	bsf	4034,1,c	;volatile
 17345                           
 17346                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 17347  005AB0  D009               	goto	l6541
 17348  005AB2                     l6539:
 17349  005AB2  0E34               	movlw	52
 17350  005AB4  0100               	movlb	0	; () banked
 17351  005AB6  6F80               	movwf	??_readADC& (0+255),b
 17352  005AB8  0EF1               	movlw	241
 17353  005ABA                     u11317:
 17354  005ABA  2EE8               	decfsz	wreg,f,c
 17355  005ABC  D7FE               	bra	u11317
 17356  005ABE  2F80               	decfsz	??_readADC& (0+255),f,b
 17357  005AC0  D7FC               	bra	u11317
 17358  005AC2  D000               	nop2	
 17359  005AC4                     l6541:
 17360  005AC4  A2C2               	btfss	4034,1,c	;volatile
 17361  005AC6  0012               	return	
 17362  005AC8  D7F4               	goto	l6539
 17363  005ACA                     __end_of_readADC:
 17364                           	opt stack 0
 17365                           tblptru	equ	0xFF8
 17366                           tblptrh	equ	0xFF7
 17367                           tblptrl	equ	0xFF6
 17368                           tablat	equ	0xFF5
 17369                           prodh	equ	0xFF4
 17370                           prodl	equ	0xFF3
 17371                           intcon	equ	0xFF2
 17372                           intcon2	equ	0xFF1
 17373                           intcon3	equ	0xFF0
 17374                           postinc0	equ	0xFEE
 17375                           wreg	equ	0xFE8
 17376                           postdec1	equ	0xFE5
 17377                           fsr1l	equ	0xFE1
 17378                           indf2	equ	0xFDF
 17379                           postinc2	equ	0xFDE
 17380                           postdec2	equ	0xFDD
 17381                           fsr2h	equ	0xFDA
 17382                           fsr2l	equ	0xFD9
 17383                           status	equ	0xFD8
 17384                           
 17385 ;; *************** function _printf *****************
 17386 ;; Defined at:
 17387 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 17388 ;; Parameters:    Size  Location     Type
 17389 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 17390 ;;		 -> STR_134(18), STR_133(18), STR_132(17), STR_131(17), 
 17391 ;;		 -> STR_130(15), STR_129(15), STR_128(18), STR_127(15), 
 17392 ;;		 -> STR_126(18), STR_125(18), STR_124(17), STR_123(17), 
 17393 ;;		 -> STR_122(17), STR_121(17), STR_120(17), STR_119(17), 
 17394 ;;		 -> STR_118(17), STR_117(17), STR_116(18), STR_115(17), 
 17395 ;;		 -> STR_114(15), STR_113(15), STR_112(15), STR_111(17), 
 17396 ;;		 -> STR_110(17), STR_109(17), STR_108(16), STR_107(17), 
 17397 ;;		 -> STR_106(17), STR_105(17), STR_104(17), STR_103(17), 
 17398 ;;		 -> STR_102(17), STR_101(15), STR_100(11), STR_99(17), 
 17399 ;;		 -> STR_98(11), STR_97(17), STR_96(14), STR_95(15), 
 17400 ;;		 -> STR_94(14), STR_93(10), STR_92(9), STR_91(9), 
 17401 ;;		 -> STR_90(10), STR_89(10), STR_88(16), STR_87(15), 
 17402 ;;		 -> STR_86(3), STR_85(15), STR_84(13), STR_83(14), 
 17403 ;;		 -> STR_82(8), STR_81(14), STR_80(15), STR_79(12), 
 17404 ;;		 -> STR_78(14), STR_77(17), STR_76(14), STR_75(15), 
 17405 ;;		 -> STR_74(17), STR_73(17), STR_72(7), STR_71(21), 
 17406 ;;		 -> STR_70(17), STR_69(17), STR_68(17), STR_67(17), 
 17407 ;;		 -> STR_66(17), STR_65(17), STR_64(22), STR_63(24), 
 17408 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 17409 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 17410 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 17411 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 17412 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 17413 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(17), 
 17414 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(14), 
 17415 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 17416 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 17417 ;;		 -> STR_1(18), 
 17418 ;; Auto vars:     Size  Location     Type
 17419 ;;  tmpval          4    0        struct .
 17420 ;;  width           2   41[BANK0 ] int 
 17421 ;;  val             2   37[BANK0 ] unsigned int 
 17422 ;;  len             2   35[BANK0 ] unsigned int 
 17423 ;;  ap              2   33[BANK0 ] PTR void [1]
 17424 ;;		 -> ?i2_printf(2), ?_printf(2), 
 17425 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 17426 ;;		 -> STR_135(7), ID@res3(2), ID@res2(2), ID@res1(2), 
 17427 ;;		 -> count_total(2), printRTC@month(4), UI@month(4), 
 17428 ;;  c               1   40[BANK0 ] char 
 17429 ;;  flag            1   39[BANK0 ] unsigned char 
 17430 ;;  prec            1   30[BANK0 ] char 
 17431 ;; Return value:  Size  Location     Type
 17432 ;;                  2   14[BANK0 ] int 
 17433 ;; Registers used:
 17434 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17435 ;; Tracked objects:
 17436 ;;		On entry : 0/0
 17437 ;;		On exit  : 0/0
 17438 ;;		Unchanged: 0/0
 17439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17440 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17441 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17442 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17443 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17444 ;;Total ram usage:       29 bytes
 17445 ;; Hardware stack levels used:    1
 17446 ;; Hardware stack levels required when called:    9
 17447 ;; This function calls:
 17448 ;;		___lwdiv
 17449 ;;		___lwmod
 17450 ;;		___wmul
 17451 ;;		_isdigit
 17452 ;;		_putch
 17453 ;; This function is called by:
 17454 ;;		_UI
 17455 ;;		_change_state_to_menu_start
 17456 ;;		_change_state_to_menu_12
 17457 ;;		_change_state_to_menu_22
 17458 ;;		_printRTC
 17459 ;;		_ID
 17460 ;;		_EEPROM_write
 17461 ;;		_Test
 17462 ;;		_algorithmTest
 17463 ;;		_sensorTest
 17464 ;;		_actuatorTest
 17465 ;;		_BothServos
 17466 ;;		_PortTestDC
 17467 ;;		_PlatformTest
 17468 ;;		_SpeedTest
 17469 ;;		_BlockerTest
 17470 ;;		_arm
 17471 ;;		_PortTestPusher
 17472 ;;		_ToggleTestA5
 17473 ;; This function uses a non-reentrant model
 17474 ;;
 17475                           
 17476                           	psect	text56
 17477  001C2A                     __ptext56:
 17478                           	opt stack 0
 17479  001C2A                     _printf:
 17480                           	opt stack 18
 17481                           
 17482                           ;doprnt.c: 466: va_list ap;
 17483                           ;doprnt.c: 499: signed char c;
 17484                           ;doprnt.c: 501: int width;
 17485                           ;doprnt.c: 506: signed char prec;
 17486                           ;doprnt.c: 508: unsigned char flag;
 17487                           ;doprnt.c: 523: union {
 17488                           ;doprnt.c: 524: unsigned long vd;
 17489                           ;doprnt.c: 525: double integ;
 17490                           ;doprnt.c: 526: } tmpval;
 17491                           ;doprnt.c: 528: unsigned int val;
 17492                           ;doprnt.c: 529: unsigned len;
 17493                           ;doprnt.c: 530: const char * cp;
 17494                           ;doprnt.c: 533: *ap = __va_start();
 17495                           
 17496                           ;incstack = 0
 17497  001C2A  0E90               	movlw	low (?_printf+2)
 17498  001C2C  0100               	movlb	0	; () banked
 17499  001C2E  6FA1               	movwf	printf@ap& (0+255),b
 17500  001C30  0E00               	movlw	high (?_printf+2)
 17501  001C32  0100               	movlb	0	; () banked
 17502  001C34  6FA2               	movwf	(printf@ap+1)& (0+255),b
 17503                           
 17504                           ;doprnt.c: 536: while(c = *f++) {
 17505  001C36  D205               	goto	l6863
 17506  001C38                     l6733:
 17507                           
 17508                           ; BSR set to: 0
 17509                           ;doprnt.c: 538: if(c != '%')
 17510  001C38  0E25               	movlw	37
 17511  001C3A  0100               	movlb	0	; () banked
 17512  001C3C  19A8               	xorwf	printf@c& (0+255),w,b
 17513  001C3E  B4D8               	btfsc	status,2,c
 17514  001C40  D005               	goto	l6737
 17515                           
 17516                           ; BSR set to: 0
 17517                           ;doprnt.c: 540: {
 17518                           ;doprnt.c: 541: (putch(c) );
 17519  001C42  0100               	movlb	0	; () banked
 17520  001C44  51A8               	movf	printf@c& (0+255),w,b
 17521  001C46  EC51  F02E         	call	_putch
 17522                           
 17523                           ;doprnt.c: 542: continue;
 17524  001C4A  D1FB               	goto	l6863
 17525  001C4C                     l6737:
 17526                           
 17527                           ;doprnt.c: 543: }
 17528                           ;doprnt.c: 546: width = 0;
 17529  001C4C  0E00               	movlw	0
 17530  001C4E  0100               	movlb	0	; () banked
 17531  001C50  6FAA               	movwf	(printf@width+1)& (0+255),b
 17532  001C52  0E00               	movlw	0
 17533  001C54  6FA9               	movwf	printf@width& (0+255),b
 17534                           
 17535                           ;doprnt.c: 548: flag = 0;
 17536  001C56  0E00               	movlw	0
 17537  001C58  0100               	movlb	0	; () banked
 17538  001C5A  6FA7               	movwf	printf@flag& (0+255),b
 17539                           
 17540                           ; BSR set to: 0
 17541                           ;doprnt.c: 551: switch(*f) {
 17542                           
 17543                           ;doprnt.c: 550: for(;;) {
 17544  001C5C  D005               	goto	l6743
 17545  001C5E                     l6739:
 17546                           
 17547                           ;doprnt.c: 580: flag |= 0x04;
 17548  001C5E  0100               	movlb	0	; () banked
 17549  001C60  85A7               	bsf	printf@flag& (0+255),2,b
 17550                           
 17551                           ;doprnt.c: 581: f++;
 17552  001C62  0100               	movlb	0	; () banked
 17553  001C64  4B8E               	infsnz	printf@f& (0+255),f,b
 17554  001C66  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17555  001C68                     l6743:
 17556  001C68  C08E  FFF6         	movff	printf@f,tblptrl
 17557  001C6C  C08F  FFF7         	movff	printf@f+1,tblptrh
 17558  001C70                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17559  001C70  6AF8               	clrf	tblptru,c
 17560  001C72                     	endif
 17561  001C72                     	if	0	;tblptru may be non-zero
 17562  001C72                     	endif
 17563  001C72  0008               	tblrd		*
 17564  001C74  50F5               	movf	tablat,w,c
 17565                           
 17566                           ; Switch size 1, requested type "space"
 17567                           ; Number of cases is 1, Range of values is 48 to 48
 17568                           ; switch strategies available:
 17569                           ; Name         Instructions Cycles
 17570                           ; simple_byte            4     3 (average)
 17571                           ;	Chosen strategy is simple_byte
 17572  001C76  0A30               	xorlw	48	; case 48
 17573  001C78  B4D8               	btfsc	status,2,c
 17574  001C7A  D7F1               	goto	l6739
 17575                           
 17576                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 17577                           
 17578                           ;doprnt.c: 586: }
 17579                           
 17580                           ;doprnt.c: 585: break;
 17581  001C7C  C08E  FFF6         	movff	printf@f,tblptrl
 17582  001C80  C08F  FFF7         	movff	printf@f+1,tblptrh
 17583  001C84                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17584  001C84  6AF8               	clrf	tblptru,c
 17585  001C86                     	endif
 17586  001C86                     	if	0	;tblptru may be non-zero
 17587  001C86                     	endif
 17588  001C86  0008               	tblrd		*
 17589  001C88  50F5               	movf	tablat,w,c
 17590  001C8A  EC65  F02D         	call	_isdigit
 17591  001C8E  A0D8               	btfss	status,0,c
 17592  001C90  D0D2               	goto	l6791
 17593                           
 17594                           ;doprnt.c: 598: width = 0;
 17595  001C92  0E00               	movlw	0
 17596  001C94  0100               	movlb	0	; () banked
 17597  001C96  6FAA               	movwf	(printf@width+1)& (0+255),b
 17598  001C98  0E00               	movlw	0
 17599  001C9A  6FA9               	movwf	printf@width& (0+255),b
 17600  001C9C                     l6749:
 17601                           
 17602                           ;doprnt.c: 600: width *= 10;
 17603  001C9C  C0A9  F080         	movff	printf@width,___wmul@multiplier
 17604  001CA0  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 17605  001CA4  0E00               	movlw	0
 17606  001CA6  0100               	movlb	0	; () banked
 17607  001CA8  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17608  001CAA  0E0A               	movlw	10
 17609  001CAC  6F82               	movwf	___wmul@multiplicand& (0+255),b
 17610  001CAE  ECCE  F02B         	call	___wmul	;wreg free
 17611  001CB2  C080  F0A9         	movff	?___wmul,printf@width
 17612  001CB6  C081  F0AA         	movff	?___wmul+1,printf@width+1
 17613                           
 17614                           ;doprnt.c: 601: width += *f++ - '0';
 17615  001CBA  0ED0               	movlw	208
 17616  001CBC  0100               	movlb	0	; () banked
 17617  001CBE  6F9A               	movwf	??_printf& (0+255),b
 17618  001CC0  0EFF               	movlw	255
 17619  001CC2  0100               	movlb	0	; () banked
 17620  001CC4  6F9B               	movwf	(??_printf+1)& (0+255),b
 17621  001CC6  C08E  FFF6         	movff	printf@f,tblptrl
 17622  001CCA  C08F  FFF7         	movff	printf@f+1,tblptrh
 17623  001CCE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17624  001CCE  6AF8               	clrf	tblptru,c
 17625  001CD0                     	endif
 17626  001CD0                     	if	0	;tblptru may be non-zero
 17627  001CD0                     	endif
 17628  001CD0  0008               	tblrd		*
 17629  001CD2  50F5               	movf	tablat,w,c
 17630  001CD4  0100               	movlb	0	; () banked
 17631  001CD6  6F9C               	movwf	(??_printf+2)& (0+255),b
 17632  001CD8  6B9D               	clrf	(??_printf+3)& (0+255),b
 17633  001CDA  0100               	movlb	0	; () banked
 17634  001CDC  519A               	movf	??_printf& (0+255),w,b
 17635  001CDE  0100               	movlb	0	; () banked
 17636  001CE0  279C               	addwf	(??_printf+2)& (0+255),f,b
 17637  001CE2  0100               	movlb	0	; () banked
 17638  001CE4  519B               	movf	(??_printf+1)& (0+255),w,b
 17639  001CE6  0100               	movlb	0	; () banked
 17640  001CE8  239D               	addwfc	(??_printf+3)& (0+255),f,b
 17641  001CEA  0100               	movlb	0	; () banked
 17642  001CEC  519C               	movf	(??_printf+2)& (0+255),w,b
 17643  001CEE  0100               	movlb	0	; () banked
 17644  001CF0  27A9               	addwf	printf@width& (0+255),f,b
 17645  001CF2  0100               	movlb	0	; () banked
 17646  001CF4  519D               	movf	(??_printf+3)& (0+255),w,b
 17647  001CF6  0100               	movlb	0	; () banked
 17648  001CF8  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 17649                           
 17650                           ; BSR set to: 0
 17651  001CFA  0100               	movlb	0	; () banked
 17652  001CFC  4B8E               	infsnz	printf@f& (0+255),f,b
 17653  001CFE  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17654                           
 17655                           ; BSR set to: 0
 17656                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 17657  001D00  C08E  FFF6         	movff	printf@f,tblptrl
 17658  001D04  C08F  FFF7         	movff	printf@f+1,tblptrh
 17659  001D08                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17660  001D08  6AF8               	clrf	tblptru,c
 17661  001D0A                     	endif
 17662  001D0A                     	if	0	;tblptru may be non-zero
 17663  001D0A                     	endif
 17664  001D0A  0008               	tblrd		*
 17665  001D0C  50F5               	movf	tablat,w,c
 17666  001D0E  EC65  F02D         	call	_isdigit
 17667  001D12  A0D8               	btfss	status,0,c
 17668  001D14  D090               	goto	l6791
 17669  001D16  D7C2               	goto	l6749
 17670  001D18                     l6757:
 17671                           
 17672                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 17673  001D18  C0A1  FFD9         	movff	printf@ap,fsr2l
 17674  001D1C  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17675  001D20  CFDE F09F          	movff	postinc2,printf@cp
 17676  001D24  CFDD F0A0          	movff	postdec2,printf@cp+1
 17677  001D28  0E02               	movlw	2
 17678  001D2A  0100               	movlb	0	; () banked
 17679  001D2C  27A1               	addwf	printf@ap& (0+255),f,b
 17680  001D2E  0E00               	movlw	0
 17681  001D30  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17682                           
 17683                           ; BSR set to: 0
 17684                           ;doprnt.c: 740: if(!cp)
 17685  001D32  0100               	movlb	0	; () banked
 17686  001D34  519F               	movf	printf@cp& (0+255),w,b
 17687  001D36  0100               	movlb	0	; () banked
 17688  001D38  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 17689  001D3A  A4D8               	btfss	status,2,c
 17690  001D3C  D006               	goto	l6765
 17691                           
 17692                           ; BSR set to: 0
 17693                           ;doprnt.c: 741: cp = "(null)";
 17694  001D3E  0EB6               	movlw	low STR_135
 17695  001D40  0100               	movlb	0	; () banked
 17696  001D42  6F9F               	movwf	printf@cp& (0+255),b
 17697  001D44  0EFF               	movlw	high STR_135
 17698  001D46  0100               	movlb	0	; () banked
 17699  001D48  6FA0               	movwf	(printf@cp+1)& (0+255),b
 17700  001D4A                     l6765:
 17701                           
 17702                           ; BSR set to: 0
 17703                           ;doprnt.c: 745: len = 0;
 17704  001D4A  0E00               	movlw	0
 17705  001D4C  0100               	movlb	0	; () banked
 17706  001D4E  6FA4               	movwf	(printf@len+1)& (0+255),b
 17707  001D50  0E00               	movlw	0
 17708  001D52  6FA3               	movwf	printf@len& (0+255),b
 17709                           
 17710                           ;doprnt.c: 746: while(cp[len])
 17711  001D54  D003               	goto	l6769
 17712  001D56                     l6767:
 17713                           
 17714                           ;doprnt.c: 747: len++;
 17715  001D56  0100               	movlb	0	; () banked
 17716  001D58  4BA3               	infsnz	printf@len& (0+255),f,b
 17717  001D5A  2BA4               	incf	(printf@len+1)& (0+255),f,b
 17718  001D5C                     l6769:
 17719                           
 17720                           ; BSR set to: 0
 17721  001D5C  0100               	movlb	0	; () banked
 17722  001D5E  51A3               	movf	printf@len& (0+255),w,b
 17723  001D60  0100               	movlb	0	; () banked
 17724  001D62  259F               	addwf	printf@cp& (0+255),w,b
 17725  001D64  0100               	movlb	0	; () banked
 17726  001D66  6F9A               	movwf	??_printf& (0+255),b
 17727  001D68  0100               	movlb	0	; () banked
 17728  001D6A  51A4               	movf	(printf@len+1)& (0+255),w,b
 17729  001D6C  0100               	movlb	0	; () banked
 17730  001D6E  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 17731  001D70  0100               	movlb	0	; () banked
 17732  001D72  6F9B               	movwf	(??_printf+1)& (0+255),b
 17733  001D74  C09A  FFF6         	movff	??_printf,tblptrl
 17734  001D78  C09B  FFF7         	movff	??_printf+1,tblptrh
 17735  001D7C  0E00               	movlw	low (__mediumconst shr (0+16))
 17736  001D7E  6EF8               	movwf	tblptru,c
 17737  001D80  0E0F               	movlw	(high __ramtop+-1)
 17738  001D82  64F7               	cpfsgt	tblptrh,c
 17739  001D84  D003               	bra	u5227
 17740  001D86  0008               	tblrd		*
 17741  001D88  50F5               	movf	tablat,w,c
 17742  001D8A  D005               	bra	u5220
 17743  001D8C                     u5227:
 17744  001D8C  CFF6 FFE9          	movff	tblptrl,fsr0l
 17745  001D90  CFF7 FFEA          	movff	tblptrh,fsr0h
 17746  001D94  50EF               	movf	indf0,w,c
 17747  001D96                     u5220:
 17748  001D96  0900               	iorlw	0
 17749  001D98  A4D8               	btfss	status,2,c
 17750  001D9A  D7DD               	goto	l6767
 17751                           
 17752                           ;doprnt.c: 757: if(width > len)
 17753  001D9C  0100               	movlb	0	; () banked
 17754  001D9E  51A9               	movf	printf@width& (0+255),w,b
 17755  001DA0  0100               	movlb	0	; () banked
 17756  001DA2  5DA3               	subwf	printf@len& (0+255),w,b
 17757  001DA4  0100               	movlb	0	; () banked
 17758  001DA6  51AA               	movf	(printf@width+1)& (0+255),w,b
 17759  001DA8  0100               	movlb	0	; () banked
 17760  001DAA  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 17761  001DAC  B0D8               	btfsc	status,0,c
 17762  001DAE  D009               	goto	l6775
 17763                           
 17764                           ; BSR set to: 0
 17765                           ;doprnt.c: 758: width -= len;
 17766  001DB0  0100               	movlb	0	; () banked
 17767  001DB2  51A3               	movf	printf@len& (0+255),w,b
 17768  001DB4  0100               	movlb	0	; () banked
 17769  001DB6  5FA9               	subwf	printf@width& (0+255),f,b
 17770  001DB8  0100               	movlb	0	; () banked
 17771  001DBA  51A4               	movf	(printf@len+1)& (0+255),w,b
 17772  001DBC  0100               	movlb	0	; () banked
 17773  001DBE  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 17774  001DC0  D009               	goto	l6779
 17775  001DC2                     l6775:
 17776                           
 17777                           ; BSR set to: 0
 17778                           ;doprnt.c: 759: else
 17779                           ;doprnt.c: 760: width = 0;
 17780  001DC2  0E00               	movlw	0
 17781  001DC4  0100               	movlb	0	; () banked
 17782  001DC6  6FAA               	movwf	(printf@width+1)& (0+255),b
 17783  001DC8  0E00               	movlw	0
 17784  001DCA  6FA9               	movwf	printf@width& (0+255),b
 17785                           
 17786                           ; BSR set to: 0
 17787                           ;doprnt.c: 764: while(width--)
 17788  001DCC  D003               	goto	l6779
 17789  001DCE                     l6777:
 17790                           
 17791                           ; BSR set to: 0
 17792                           ;doprnt.c: 765: (putch(' ') );
 17793  001DCE  0E20               	movlw	32
 17794  001DD0  EC51  F02E         	call	_putch
 17795  001DD4                     l6779:
 17796  001DD4  0100               	movlb	0	; () banked
 17797  001DD6  07A9               	decf	printf@width& (0+255),f,b
 17798  001DD8  A0D8               	btfss	status,0,c
 17799  001DDA  07AA               	decf	(printf@width+1)& (0+255),f,b
 17800  001DDC  0100               	movlb	0	; () banked
 17801  001DDE  29A9               	incf	printf@width& (0+255),w,b
 17802  001DE0  E1F6               	bnz	l6777
 17803  001DE2  0100               	movlb	0	; () banked
 17804  001DE4  29AA               	incf	(printf@width+1)& (0+255),w,b
 17805  001DE6  B4D8               	btfsc	status,2,c
 17806  001DE8  D017               	goto	l6785
 17807  001DEA  D7F1               	goto	l6777
 17808  001DEC                     l6781:
 17809                           
 17810                           ; BSR set to: 0
 17811                           ;doprnt.c: 768: (putch(*cp++) );
 17812  001DEC  C09F  FFF6         	movff	printf@cp,tblptrl
 17813  001DF0  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 17814  001DF4  0E00               	movlw	low (__mediumconst shr (0+16))
 17815  001DF6  6EF8               	movwf	tblptru,c
 17816  001DF8  0E0F               	movlw	(high __ramtop+-1)
 17817  001DFA  64F7               	cpfsgt	tblptrh,c
 17818  001DFC  D003               	bra	u5267
 17819  001DFE  0008               	tblrd		*
 17820  001E00  50F5               	movf	tablat,w,c
 17821  001E02  D005               	bra	u5260
 17822  001E04                     u5267:
 17823  001E04  CFF6 FFE9          	movff	tblptrl,fsr0l
 17824  001E08  CFF7 FFEA          	movff	tblptrh,fsr0h
 17825  001E0C  50EF               	movf	indf0,w,c
 17826  001E0E                     u5260:
 17827  001E0E  EC51  F02E         	call	_putch
 17828  001E12  0100               	movlb	0	; () banked
 17829  001E14  4B9F               	infsnz	printf@cp& (0+255),f,b
 17830  001E16  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 17831  001E18                     l6785:
 17832                           
 17833                           ; BSR set to: 0
 17834  001E18  0100               	movlb	0	; () banked
 17835  001E1A  07A3               	decf	printf@len& (0+255),f,b
 17836  001E1C  A0D8               	btfss	status,0,c
 17837  001E1E  07A4               	decf	(printf@len+1)& (0+255),f,b
 17838  001E20  0100               	movlb	0	; () banked
 17839  001E22  29A3               	incf	printf@len& (0+255),w,b
 17840  001E24  E1E3               	bnz	l6781
 17841  001E26  0100               	movlb	0	; () banked
 17842  001E28  29A4               	incf	(printf@len+1)& (0+255),w,b
 17843  001E2A  B4D8               	btfsc	status,2,c
 17844  001E2C  D10A               	goto	l6863
 17845  001E2E  D7DE               	goto	l6781
 17846  001E30                     l6787:
 17847                           
 17848                           ; BSR set to: 0
 17849                           ;doprnt.c: 818: flag |= 0x40;
 17850  001E30  0100               	movlb	0	; () banked
 17851  001E32  8DA7               	bsf	printf@flag& (0+255),6,b
 17852                           
 17853                           ; BSR set to: 0
 17854                           ;doprnt.c: 822: }
 17855                           
 17856                           ;doprnt.c: 819: break;
 17857  001E34  D01D               	goto	l1517
 17858  001E36                     l6791:
 17859  001E36  C08E  FFF6         	movff	printf@f,tblptrl
 17860  001E3A  C08F  FFF7         	movff	printf@f+1,tblptrh
 17861  001E3E  0100               	movlb	0	; () banked
 17862  001E40  4B8E               	infsnz	printf@f& (0+255),f,b
 17863  001E42  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17864  001E44                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17865  001E44  6AF8               	clrf	tblptru,c
 17866  001E46                     	endif
 17867  001E46                     	if	0	;tblptru may be non-zero
 17868  001E46                     	endif
 17869  001E46  0008               	tblrd		*
 17870  001E48  CFF5 F0A8          	movff	tablat,printf@c
 17871  001E4C  0100               	movlb	0	; () banked
 17872  001E4E  51A8               	movf	printf@c& (0+255),w,b
 17873                           
 17874                           ; Switch size 1, requested type "space"
 17875                           ; Number of cases is 5, Range of values is 0 to 117
 17876                           ; switch strategies available:
 17877                           ; Name         Instructions Cycles
 17878                           ; simple_byte           16     9 (average)
 17879                           ;	Chosen strategy is simple_byte
 17880  001E50  0A00               	xorlw	0	; case 0
 17881  001E52  B4D8               	btfsc	status,2,c
 17882  001E54  0012               	return	
 17883  001E56  0A64               	xorlw	100	; case 100
 17884  001E58  B4D8               	btfsc	status,2,c
 17885  001E5A  D00A               	goto	l1517
 17886  001E5C  0A0D               	xorlw	13	; case 105
 17887  001E5E  B4D8               	btfsc	status,2,c
 17888  001E60  D007               	goto	l1517
 17889  001E62  0A1A               	xorlw	26	; case 115
 17890  001E64  B4D8               	btfsc	status,2,c
 17891  001E66  D758               	goto	l6757
 17892  001E68  0A06               	xorlw	6	; case 117
 17893  001E6A  B4D8               	btfsc	status,2,c
 17894  001E6C  D7E1               	goto	l6787
 17895  001E6E  D0E9               	goto	l6863
 17896  001E70                     l1517:
 17897                           
 17898                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 17899  001E70  0100               	movlb	0	; () banked
 17900  001E72  BDA7               	btfsc	printf@flag& (0+255),6,b
 17901  001E74  D019               	goto	l6803
 17902                           
 17903                           ; BSR set to: 0
 17904                           ;doprnt.c: 1253: {
 17905                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 17906  001E76  C0A1  FFD9         	movff	printf@ap,fsr2l
 17907  001E7A  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17908  001E7E  CFDE F0A5          	movff	postinc2,printf@val
 17909  001E82  CFDD F0A6          	movff	postdec2,printf@val+1
 17910                           
 17911                           ; BSR set to: 0
 17912  001E86  0E02               	movlw	2
 17913  001E88  0100               	movlb	0	; () banked
 17914  001E8A  27A1               	addwf	printf@ap& (0+255),f,b
 17915  001E8C  0E00               	movlw	0
 17916  001E8E  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17917                           
 17918                           ; BSR set to: 0
 17919                           ;doprnt.c: 1261: if((int)val < 0) {
 17920  001E90  0100               	movlb	0	; () banked
 17921  001E92  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 17922  001E94  D016               	goto	l6807
 17923                           
 17924                           ; BSR set to: 0
 17925                           ;doprnt.c: 1262: flag |= 0x03;
 17926  001E96  0E03               	movlw	3
 17927  001E98  0100               	movlb	0	; () banked
 17928  001E9A  13A7               	iorwf	printf@flag& (0+255),f,b
 17929                           
 17930                           ; BSR set to: 0
 17931                           ;doprnt.c: 1263: val = -val;
 17932  001E9C  0100               	movlb	0	; () banked
 17933  001E9E  6DA5               	negf	printf@val& (0+255),b
 17934  001EA0  1FA6               	comf	(printf@val+1)& (0+255),f,b
 17935  001EA2  B0D8               	btfsc	status,0,c
 17936  001EA4  2BA6               	incf	(printf@val+1)& (0+255),f,b
 17937                           
 17938                           ; BSR set to: 0
 17939                           ;doprnt.c: 1264: }
 17940                           ;doprnt.c: 1266: }
 17941  001EA6  D00D               	goto	l6807
 17942  001EA8                     l6803:
 17943                           
 17944                           ; BSR set to: 0
 17945                           ;doprnt.c: 1268: else
 17946                           ;doprnt.c: 1273: {
 17947                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 17948  001EA8  C0A1  FFD9         	movff	printf@ap,fsr2l
 17949  001EAC  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17950  001EB0  CFDE F0A5          	movff	postinc2,printf@val
 17951  001EB4  CFDD F0A6          	movff	postdec2,printf@val+1
 17952                           
 17953                           ; BSR set to: 0
 17954  001EB8  0E02               	movlw	2
 17955  001EBA  0100               	movlb	0	; () banked
 17956  001EBC  27A1               	addwf	printf@ap& (0+255),f,b
 17957  001EBE  0E00               	movlw	0
 17958  001EC0  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17959  001EC2                     l6807:
 17960                           
 17961                           ; BSR set to: 0
 17962                           ;doprnt.c: 1287: }
 17963                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 17964  001EC2  0E01               	movlw	1
 17965  001EC4  0100               	movlb	0	; () banked
 17966  001EC6  6FA8               	movwf	printf@c& (0+255),b
 17967  001EC8                     l6809:
 17968                           
 17969                           ; BSR set to: 0
 17970  001EC8  0E05               	movlw	5
 17971  001ECA  0100               	movlb	0	; () banked
 17972  001ECC  19A8               	xorwf	printf@c& (0+255),w,b
 17973  001ECE  B4D8               	btfsc	status,2,c
 17974  001ED0  D019               	goto	l6821
 17975                           
 17976                           ; BSR set to: 0
 17977                           ;doprnt.c: 1306: if(val < dpowers[c])
 17978                           
 17979                           ; BSR set to: 0
 17980                           
 17981                           ; BSR set to: 0
 17982  001ED2  0100               	movlb	0	; () banked
 17983  001ED4  51A8               	movf	printf@c& (0+255),w,b
 17984  001ED6  0D02               	mullw	2
 17985  001ED8  0E98               	movlw	low _dpowers
 17986  001EDA  24F3               	addwf	prodl,w,c
 17987  001EDC  6EF6               	movwf	tblptrl,c
 17988  001EDE  0EFA               	movlw	high _dpowers
 17989  001EE0  20F4               	addwfc	prodh,w,c
 17990  001EE2  6EF7               	movwf	tblptrh,c
 17991  001EE4                     	if	1	;There are 3 active tblptr bytes
 17992  001EE4  6AF8               	clrf	tblptru,c
 17993  001EE6  0E00               	movlw	low (__mediumconst shr (0+16))
 17994  001EE8  22F8               	addwfc	tblptru,f,c
 17995  001EEA                     	endif
 17996  001EEA  0009               	tblrd		*+
 17997  001EEC  50F5               	movf	tablat,w,c
 17998  001EEE  0100               	movlb	0	; () banked
 17999  001EF0  5DA5               	subwf	printf@val& (0+255),w,b
 18000  001EF2  0009               	tblrd		*+
 18001  001EF4  50F5               	movf	tablat,w,c
 18002  001EF6  0100               	movlb	0	; () banked
 18003  001EF8  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 18004  001EFA  A0D8               	btfss	status,0,c
 18005  001EFC  D003               	goto	l6821
 18006                           
 18007                           ; BSR set to: 0
 18008                           
 18009                           ; BSR set to: 0
 18010                           
 18011                           ; BSR set to: 0
 18012                           ;doprnt.c: 1307: break;
 18013  001EFE  0100               	movlb	0	; () banked
 18014  001F00  2BA8               	incf	printf@c& (0+255),f,b
 18015  001F02  D7E2               	goto	l6809
 18016  001F04                     l6821:
 18017                           
 18018                           ; BSR set to: 0
 18019                           ;doprnt.c: 1345: if(width && flag & 0x03)
 18020  001F04  0100               	movlb	0	; () banked
 18021  001F06  51A9               	movf	printf@width& (0+255),w,b
 18022  001F08  0100               	movlb	0	; () banked
 18023  001F0A  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18024  001F0C  B4D8               	btfsc	status,2,c
 18025  001F0E  D00B               	goto	l6827
 18026                           
 18027                           ; BSR set to: 0
 18028  001F10  C0A7  F09A         	movff	printf@flag,??_printf
 18029  001F14  0E03               	movlw	3
 18030  001F16  0100               	movlb	0	; () banked
 18031  001F18  179A               	andwf	??_printf& (0+255),f,b
 18032  001F1A  B4D8               	btfsc	status,2,c
 18033  001F1C  D004               	goto	l6827
 18034                           
 18035                           ; BSR set to: 0
 18036                           ;doprnt.c: 1346: width--;
 18037  001F1E  0100               	movlb	0	; () banked
 18038  001F20  07A9               	decf	printf@width& (0+255),f,b
 18039  001F22  A0D8               	btfss	status,0,c
 18040  001F24  07AA               	decf	(printf@width+1)& (0+255),f,b
 18041  001F26                     l6827:
 18042                           
 18043                           ; BSR set to: 0
 18044                           ;doprnt.c: 1381: if(width > c)
 18045  001F26  0E80               	movlw	128
 18046  001F28  0100               	movlb	0	; () banked
 18047  001F2A  BFA8               	btfsc	printf@c& (0+255),7,b
 18048  001F2C  0E7F               	movlw	127
 18049  001F2E  0100               	movlb	0	; () banked
 18050  001F30  6F9A               	movwf	??_printf& (0+255),b
 18051  001F32  0100               	movlb	0	; () banked
 18052  001F34  51A9               	movf	printf@width& (0+255),w,b
 18053  001F36  0100               	movlb	0	; () banked
 18054  001F38  5DA8               	subwf	printf@c& (0+255),w,b
 18055  001F3A  0100               	movlb	0	; () banked
 18056  001F3C  51AA               	movf	(printf@width+1)& (0+255),w,b
 18057  001F3E  0A80               	xorlw	128
 18058  001F40  0100               	movlb	0	; () banked
 18059  001F42  599A               	subwfb	??_printf& (0+255),w,b
 18060  001F44  B0D8               	btfsc	status,0,c
 18061  001F46  D00B               	goto	l6831
 18062                           
 18063                           ; BSR set to: 0
 18064                           ;doprnt.c: 1382: width -= c;
 18065  001F48  0100               	movlb	0	; () banked
 18066  001F4A  51A8               	movf	printf@c& (0+255),w,b
 18067  001F4C  0100               	movlb	0	; () banked
 18068  001F4E  5FA9               	subwf	printf@width& (0+255),f,b
 18069  001F50  0E00               	movlw	0
 18070  001F52  0100               	movlb	0	; () banked
 18071  001F54  BFA8               	btfsc	printf@c& (0+255),7,b
 18072  001F56  0EFF               	movlw	255
 18073  001F58  0100               	movlb	0	; () banked
 18074  001F5A  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 18075  001F5C  D005               	goto	l6833
 18076  001F5E                     l6831:
 18077                           
 18078                           ; BSR set to: 0
 18079                           ;doprnt.c: 1383: else
 18080                           ;doprnt.c: 1384: width = 0;
 18081  001F5E  0E00               	movlw	0
 18082  001F60  0100               	movlb	0	; () banked
 18083  001F62  6FAA               	movwf	(printf@width+1)& (0+255),b
 18084  001F64  0E00               	movlw	0
 18085  001F66  6FA9               	movwf	printf@width& (0+255),b
 18086  001F68                     l6833:
 18087                           
 18088                           ; BSR set to: 0
 18089                           ;doprnt.c: 1387: if(flag & 0x04) {
 18090  001F68  0100               	movlb	0	; () banked
 18091  001F6A  A5A7               	btfss	printf@flag& (0+255),2,b
 18092  001F6C  D018               	goto	l6845
 18093                           
 18094                           ; BSR set to: 0
 18095                           ;doprnt.c: 1392: if(flag & 0x03)
 18096  001F6E  C0A7  F09A         	movff	printf@flag,??_printf
 18097  001F72  0E03               	movlw	3
 18098  001F74  0100               	movlb	0	; () banked
 18099  001F76  179A               	andwf	??_printf& (0+255),f,b
 18100  001F78  B4D8               	btfsc	status,2,c
 18101  001F7A  D003               	goto	l6839
 18102                           
 18103                           ; BSR set to: 0
 18104                           ;doprnt.c: 1393: (putch('-') );
 18105  001F7C  0E2D               	movlw	45
 18106  001F7E  EC51  F02E         	call	_putch
 18107  001F82                     l6839:
 18108                           
 18109                           ;doprnt.c: 1415: if(width)
 18110  001F82  0100               	movlb	0	; () banked
 18111  001F84  51A9               	movf	printf@width& (0+255),w,b
 18112  001F86  0100               	movlb	0	; () banked
 18113  001F88  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18114  001F8A  B4D8               	btfsc	status,2,c
 18115  001F8C  D025               	goto	l6855
 18116                           
 18117                           ; BSR set to: 0
 18118                           ;doprnt.c: 1417: (putch('0') );
 18119                           
 18120                           ; BSR set to: 0
 18121                           
 18122                           ;doprnt.c: 1416: do
 18123  001F8E  0E30               	movlw	48
 18124  001F90  EC51  F02E         	call	_putch
 18125                           
 18126                           ;doprnt.c: 1418: while(--width);
 18127  001F94  0100               	movlb	0	; () banked
 18128  001F96  07A9               	decf	printf@width& (0+255),f,b
 18129  001F98  A0D8               	btfss	status,0,c
 18130  001F9A  07AA               	decf	(printf@width+1)& (0+255),f,b
 18131  001F9C  D7F2               	goto	l6839
 18132  001F9E                     l6845:
 18133                           
 18134                           ; BSR set to: 0
 18135                           ;doprnt.c: 1422: {
 18136                           ;doprnt.c: 1424: if(width
 18137                           ;doprnt.c: 1428: )
 18138  001F9E  0100               	movlb	0	; () banked
 18139  001FA0  51A9               	movf	printf@width& (0+255),w,b
 18140  001FA2  0100               	movlb	0	; () banked
 18141  001FA4  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18142  001FA6  B4D8               	btfsc	status,2,c
 18143  001FA8  D00D               	goto	l6851
 18144  001FAA                     l6847:
 18145                           
 18146                           ; BSR set to: 0
 18147                           ;doprnt.c: 1430: (putch(' ') );
 18148  001FAA  0E20               	movlw	32
 18149  001FAC  EC51  F02E         	call	_putch
 18150                           
 18151                           ;doprnt.c: 1431: while(--width);
 18152  001FB0  0100               	movlb	0	; () banked
 18153  001FB2  07A9               	decf	printf@width& (0+255),f,b
 18154  001FB4  A0D8               	btfss	status,0,c
 18155  001FB6  07AA               	decf	(printf@width+1)& (0+255),f,b
 18156  001FB8  0100               	movlb	0	; () banked
 18157  001FBA  51A9               	movf	printf@width& (0+255),w,b
 18158  001FBC  0100               	movlb	0	; () banked
 18159  001FBE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18160  001FC0  A4D8               	btfss	status,2,c
 18161  001FC2  D7F3               	goto	l6847
 18162  001FC4                     l6851:
 18163                           
 18164                           ; BSR set to: 0
 18165                           ;doprnt.c: 1438: if(flag & 0x03)
 18166  001FC4  C0A7  F09A         	movff	printf@flag,??_printf
 18167  001FC8  0E03               	movlw	3
 18168  001FCA  0100               	movlb	0	; () banked
 18169  001FCC  179A               	andwf	??_printf& (0+255),f,b
 18170  001FCE  B4D8               	btfsc	status,2,c
 18171  001FD0  D003               	goto	l6855
 18172                           
 18173                           ; BSR set to: 0
 18174                           ;doprnt.c: 1439: (putch('-') );
 18175  001FD2  0E2D               	movlw	45
 18176  001FD4  EC51  F02E         	call	_putch
 18177  001FD8                     l6855:
 18178                           
 18179                           ;doprnt.c: 1469: }
 18180                           ;doprnt.c: 1472: prec = c;
 18181  001FD8  C0A8  F09E         	movff	printf@c,printf@prec
 18182                           
 18183                           ;doprnt.c: 1474: while(prec--) {
 18184  001FDC  D02C               	goto	l6861
 18185  001FDE                     l6857:
 18186                           
 18187                           ;doprnt.c: 1478: {
 18188                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 18189  001FDE  0100               	movlb	0	; () banked
 18190  001FE0  519E               	movf	printf@prec& (0+255),w,b
 18191  001FE2  0D02               	mullw	2
 18192  001FE4  0E98               	movlw	low _dpowers
 18193  001FE6  24F3               	addwf	prodl,w,c
 18194  001FE8  6EF6               	movwf	tblptrl,c
 18195  001FEA  0EFA               	movlw	high _dpowers
 18196  001FEC  20F4               	addwfc	prodh,w,c
 18197  001FEE  6EF7               	movwf	tblptrh,c
 18198  001FF0                     	if	1	;There are 3 active tblptr bytes
 18199  001FF0  6AF8               	clrf	tblptru,c
 18200  001FF2  0E00               	movlw	low (__mediumconst shr (0+16))
 18201  001FF4  22F8               	addwfc	tblptru,f,c
 18202  001FF6                     	endif
 18203  001FF6  0009               	tblrd		*+
 18204  001FF8  CFF5 F082          	movff	tablat,___lwdiv@divisor
 18205  001FFC  000A               	tblrd		*-
 18206  001FFE  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 18207  002002  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 18208  002006  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 18209  00200A  EC02  F028         	call	___lwdiv	;wreg free
 18210  00200E  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 18211  002012  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 18212  002016  0E00               	movlw	0
 18213  002018  0100               	movlb	0	; () banked
 18214  00201A  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 18215  00201C  0E0A               	movlw	10
 18216  00201E  6F89               	movwf	___lwmod@divisor& (0+255),b
 18217  002020  EC4C  F029         	call	___lwmod	;wreg free
 18218  002024  0100               	movlb	0	; () banked
 18219  002026  5187               	movf	?___lwmod& (0+255),w,b
 18220  002028  0F30               	addlw	48
 18221  00202A  0100               	movlb	0	; () banked
 18222  00202C  6FA8               	movwf	printf@c& (0+255),b
 18223                           
 18224                           ; BSR set to: 0
 18225                           ;doprnt.c: 1523: }
 18226                           ;doprnt.c: 1524: (putch(c) );
 18227  00202E  0100               	movlb	0	; () banked
 18228  002030  51A8               	movf	printf@c& (0+255),w,b
 18229  002032  EC51  F02E         	call	_putch
 18230  002036                     l6861:
 18231  002036  0100               	movlb	0	; () banked
 18232  002038  079E               	decf	printf@prec& (0+255),f,b
 18233  00203A  0100               	movlb	0	; () banked
 18234  00203C  299E               	incf	printf@prec& (0+255),w,b
 18235  00203E  A4D8               	btfss	status,2,c
 18236  002040  D7CE               	goto	l6857
 18237  002042                     l6863:
 18238  002042  C08E  FFF6         	movff	printf@f,tblptrl
 18239  002046  C08F  FFF7         	movff	printf@f+1,tblptrh
 18240  00204A  0100               	movlb	0	; () banked
 18241  00204C  4B8E               	infsnz	printf@f& (0+255),f,b
 18242  00204E  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18243  002050                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18244  002050  6AF8               	clrf	tblptru,c
 18245  002052                     	endif
 18246  002052                     	if	0	;tblptru may be non-zero
 18247  002052                     	endif
 18248  002052  0008               	tblrd		*
 18249  002054  CFF5 F0A8          	movff	tablat,printf@c
 18250  002058  0100               	movlb	0	; () banked
 18251  00205A  51A8               	movf	printf@c& (0+255),w,b
 18252  00205C  B4D8               	btfsc	status,2,c
 18253  00205E  0012               	return	
 18254  002060  D5EB               	goto	l6733
 18255  002062                     __end_of_printf:
 18256                           	opt stack 0
 18257                           tblptru	equ	0xFF8
 18258                           tblptrh	equ	0xFF7
 18259                           tblptrl	equ	0xFF6
 18260                           tablat	equ	0xFF5
 18261                           prodh	equ	0xFF4
 18262                           prodl	equ	0xFF3
 18263                           intcon	equ	0xFF2
 18264                           intcon2	equ	0xFF1
 18265                           intcon3	equ	0xFF0
 18266                           indf0	equ	0xFEF
 18267                           postinc0	equ	0xFEE
 18268                           fsr0h	equ	0xFEA
 18269                           fsr0l	equ	0xFE9
 18270                           wreg	equ	0xFE8
 18271                           postdec1	equ	0xFE5
 18272                           fsr1l	equ	0xFE1
 18273                           indf2	equ	0xFDF
 18274                           postinc2	equ	0xFDE
 18275                           postdec2	equ	0xFDD
 18276                           fsr2h	equ	0xFDA
 18277                           fsr2l	equ	0xFD9
 18278                           status	equ	0xFD8
 18279                           
 18280 ;; *************** function _putch *****************
 18281 ;; Defined at:
 18282 ;;		line 20 in file "lcd.c"
 18283 ;; Parameters:    Size  Location     Type
 18284 ;;  data            1    wreg     unsigned char 
 18285 ;; Auto vars:     Size  Location     Type
 18286 ;;  data            1    2[BANK0 ] unsigned char 
 18287 ;; Return value:  Size  Location     Type
 18288 ;;                  1    wreg      void 
 18289 ;; Registers used:
 18290 ;;		wreg, status,2, status,0, cstack
 18291 ;; Tracked objects:
 18292 ;;		On entry : 0/0
 18293 ;;		On exit  : 0/0
 18294 ;;		Unchanged: 0/0
 18295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18297 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18299 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18300 ;;Total ram usage:        1 bytes
 18301 ;; Hardware stack levels used:    1
 18302 ;; Hardware stack levels required when called:    8
 18303 ;; This function calls:
 18304 ;;		_lcdNibble
 18305 ;; This function is called by:
 18306 ;;		_printf
 18307 ;; This function uses a non-reentrant model
 18308 ;;
 18309                           
 18310                           	psect	text57
 18311  005CA2                     __ptext57:
 18312                           	opt stack 0
 18313  005CA2                     _putch:
 18314                           	opt stack 18
 18315                           
 18316                           ;incstack = 0
 18317                           ;putch@data stored from wreg
 18318  005CA2  0100               	movlb	0	; () banked
 18319  005CA4  6F82               	movwf	putch@data& (0+255),b
 18320                           
 18321                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 18322  005CA6  848C               	bsf	3980,2,c	;volatile
 18323                           
 18324                           ;lcd.c: 22: lcdNibble(data);
 18325  005CA8  0100               	movlb	0	; () banked
 18326  005CAA  5182               	movf	putch@data& (0+255),w,b
 18327  005CAC  ECB0  F028         	call	_lcdNibble
 18328  005CB0  0012               	return		;funcret
 18329  005CB2                     __end_of_putch:
 18330                           	opt stack 0
 18331                           tblptru	equ	0xFF8
 18332                           tblptrh	equ	0xFF7
 18333                           tblptrl	equ	0xFF6
 18334                           tablat	equ	0xFF5
 18335                           prodh	equ	0xFF4
 18336                           prodl	equ	0xFF3
 18337                           intcon	equ	0xFF2
 18338                           intcon2	equ	0xFF1
 18339                           intcon3	equ	0xFF0
 18340                           indf0	equ	0xFEF
 18341                           postinc0	equ	0xFEE
 18342                           fsr0h	equ	0xFEA
 18343                           fsr0l	equ	0xFE9
 18344                           wreg	equ	0xFE8
 18345                           postdec1	equ	0xFE5
 18346                           fsr1l	equ	0xFE1
 18347                           indf2	equ	0xFDF
 18348                           postinc2	equ	0xFDE
 18349                           postdec2	equ	0xFDD
 18350                           fsr2h	equ	0xFDA
 18351                           fsr2l	equ	0xFD9
 18352                           status	equ	0xFD8
 18353                           
 18354 ;; *************** function _isdigit *****************
 18355 ;; Defined at:
 18356 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 18357 ;; Parameters:    Size  Location     Type
 18358 ;;  c               1    wreg     unsigned char 
 18359 ;; Auto vars:     Size  Location     Type
 18360 ;;  c               1    2[BANK0 ] unsigned char 
 18361 ;; Return value:  Size  Location     Type
 18362 ;;		None               void
 18363 ;; Registers used:
 18364 ;;		wreg, status,2, status,0
 18365 ;; Tracked objects:
 18366 ;;		On entry : 0/0
 18367 ;;		On exit  : 0/0
 18368 ;;		Unchanged: 0/0
 18369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18371 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18372 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18373 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18374 ;;Total ram usage:        3 bytes
 18375 ;; Hardware stack levels used:    1
 18376 ;; Hardware stack levels required when called:    7
 18377 ;; This function calls:
 18378 ;;		Nothing
 18379 ;; This function is called by:
 18380 ;;		_printf
 18381 ;; This function uses a non-reentrant model
 18382 ;;
 18383                           
 18384                           	psect	text58
 18385  005ACA                     __ptext58:
 18386                           	opt stack 0
 18387  005ACA                     _isdigit:
 18388                           	opt stack 19
 18389                           
 18390                           ;incstack = 0
 18391                           ;isdigit@c stored from wreg
 18392  005ACA  0100               	movlb	0	; () banked
 18393  005ACC  6F82               	movwf	isdigit@c& (0+255),b
 18394  005ACE  0E00               	movlw	0
 18395  005AD0  0100               	movlb	0	; () banked
 18396  005AD2  6F81               	movwf	_isdigit$2067& (0+255),b
 18397                           
 18398                           ; BSR set to: 0
 18399  005AD4  0E3A               	movlw	58
 18400  005AD6  0100               	movlb	0	; () banked
 18401  005AD8  6182               	cpfslt	isdigit@c& (0+255),b
 18402  005ADA  D007               	goto	l6581
 18403                           
 18404                           ; BSR set to: 0
 18405  005ADC  0E2F               	movlw	47
 18406  005ADE  0100               	movlb	0	; () banked
 18407  005AE0  6582               	cpfsgt	isdigit@c& (0+255),b
 18408  005AE2  D003               	goto	l6581
 18409                           
 18410                           ; BSR set to: 0
 18411  005AE4  0E01               	movlw	1
 18412  005AE6  0100               	movlb	0	; () banked
 18413  005AE8  6F81               	movwf	_isdigit$2067& (0+255),b
 18414  005AEA                     l6581:
 18415                           
 18416                           ; BSR set to: 0
 18417  005AEA  C081  F080         	movff	_isdigit$2067,??_isdigit
 18418  005AEE  0100               	movlb	0	; () banked
 18419  005AF0  3180               	rrcf	??_isdigit& (0+255),w,b
 18420  005AF2  0012               	return	
 18421  005AF4                     __end_of_isdigit:
 18422                           	opt stack 0
 18423                           tblptru	equ	0xFF8
 18424                           tblptrh	equ	0xFF7
 18425                           tblptrl	equ	0xFF6
 18426                           tablat	equ	0xFF5
 18427                           prodh	equ	0xFF4
 18428                           prodl	equ	0xFF3
 18429                           intcon	equ	0xFF2
 18430                           intcon2	equ	0xFF1
 18431                           intcon3	equ	0xFF0
 18432                           indf0	equ	0xFEF
 18433                           postinc0	equ	0xFEE
 18434                           fsr0h	equ	0xFEA
 18435                           fsr0l	equ	0xFE9
 18436                           wreg	equ	0xFE8
 18437                           postdec1	equ	0xFE5
 18438                           fsr1l	equ	0xFE1
 18439                           indf2	equ	0xFDF
 18440                           postinc2	equ	0xFDE
 18441                           postdec2	equ	0xFDD
 18442                           fsr2h	equ	0xFDA
 18443                           fsr2l	equ	0xFD9
 18444                           status	equ	0xFD8
 18445                           
 18446 ;; *************** function ___wmul *****************
 18447 ;; Defined at:
 18448 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 18449 ;; Parameters:    Size  Location     Type
 18450 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18451 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18452 ;; Auto vars:     Size  Location     Type
 18453 ;;  product         2    4[BANK0 ] unsigned int 
 18454 ;; Return value:  Size  Location     Type
 18455 ;;                  2    0[BANK0 ] unsigned int 
 18456 ;; Registers used:
 18457 ;;		wreg, status,2, status,0, prodl, prodh
 18458 ;; Tracked objects:
 18459 ;;		On entry : 0/0
 18460 ;;		On exit  : 0/0
 18461 ;;		Unchanged: 0/0
 18462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18463 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18464 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18466 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18467 ;;Total ram usage:        6 bytes
 18468 ;; Hardware stack levels used:    1
 18469 ;; Hardware stack levels required when called:    7
 18470 ;; This function calls:
 18471 ;;		Nothing
 18472 ;; This function is called by:
 18473 ;;		_printf
 18474 ;; This function uses a non-reentrant model
 18475 ;;
 18476                           
 18477                           	psect	text59
 18478  00579C                     __ptext59:
 18479                           	opt stack 0
 18480  00579C                     ___wmul:
 18481                           	opt stack 19
 18482                           
 18483                           ; BSR set to: 0
 18484                           ;incstack = 0
 18485  00579C  0100               	movlb	0	; () banked
 18486  00579E  5180               	movf	___wmul@multiplier& (0+255),w,b
 18487  0057A0  0100               	movlb	0	; () banked
 18488  0057A2  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18489  0057A4  CFF3 F084          	movff	prodl,___wmul@product
 18490  0057A8  CFF4 F085          	movff	prodh,___wmul@product+1
 18491  0057AC  0100               	movlb	0	; () banked
 18492  0057AE  5180               	movf	___wmul@multiplier& (0+255),w,b
 18493  0057B0  0100               	movlb	0	; () banked
 18494  0057B2  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 18495  0057B4  50F3               	movf	prodl,w,c
 18496  0057B6  0100               	movlb	0	; () banked
 18497  0057B8  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18498  0057BA  0100               	movlb	0	; () banked
 18499  0057BC  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 18500  0057BE  0100               	movlb	0	; () banked
 18501  0057C0  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18502  0057C2  50F3               	movf	prodl,w,c
 18503  0057C4  0100               	movlb	0	; () banked
 18504  0057C6  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18505                           
 18506                           ; BSR set to: 0
 18507  0057C8  C084  F080         	movff	___wmul@product,?___wmul
 18508  0057CC  C085  F081         	movff	___wmul@product+1,?___wmul+1
 18509  0057D0  0012               	return	
 18510  0057D2                     __end_of___wmul:
 18511                           	opt stack 0
 18512                           tblptru	equ	0xFF8
 18513                           tblptrh	equ	0xFF7
 18514                           tblptrl	equ	0xFF6
 18515                           tablat	equ	0xFF5
 18516                           prodh	equ	0xFF4
 18517                           prodl	equ	0xFF3
 18518                           intcon	equ	0xFF2
 18519                           intcon2	equ	0xFF1
 18520                           intcon3	equ	0xFF0
 18521                           indf0	equ	0xFEF
 18522                           postinc0	equ	0xFEE
 18523                           fsr0h	equ	0xFEA
 18524                           fsr0l	equ	0xFE9
 18525                           wreg	equ	0xFE8
 18526                           postdec1	equ	0xFE5
 18527                           fsr1l	equ	0xFE1
 18528                           indf2	equ	0xFDF
 18529                           postinc2	equ	0xFDE
 18530                           postdec2	equ	0xFDD
 18531                           fsr2h	equ	0xFDA
 18532                           fsr2l	equ	0xFD9
 18533                           status	equ	0xFD8
 18534                           
 18535 ;; *************** function ___lwmod *****************
 18536 ;; Defined at:
 18537 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 18538 ;; Parameters:    Size  Location     Type
 18539 ;;  dividend        2    7[BANK0 ] unsigned int 
 18540 ;;  divisor         2    9[BANK0 ] unsigned int 
 18541 ;; Auto vars:     Size  Location     Type
 18542 ;;  counter         1   11[BANK0 ] unsigned char 
 18543 ;; Return value:  Size  Location     Type
 18544 ;;                  2    7[BANK0 ] unsigned int 
 18545 ;; Registers used:
 18546 ;;		wreg, status,2, status,0
 18547 ;; Tracked objects:
 18548 ;;		On entry : 0/0
 18549 ;;		On exit  : 0/0
 18550 ;;		Unchanged: 0/0
 18551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18552 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18553 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18555 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18556 ;;Total ram usage:        5 bytes
 18557 ;; Hardware stack levels used:    1
 18558 ;; Hardware stack levels required when called:    7
 18559 ;; This function calls:
 18560 ;;		Nothing
 18561 ;; This function is called by:
 18562 ;;		_printf
 18563 ;; This function uses a non-reentrant model
 18564 ;;
 18565                           
 18566                           	psect	text60
 18567  005298                     __ptext60:
 18568                           	opt stack 0
 18569  005298                     ___lwmod:
 18570                           	opt stack 19
 18571                           
 18572                           ; BSR set to: 0
 18573                           ;incstack = 0
 18574  005298  0100               	movlb	0	; () banked
 18575  00529A  5189               	movf	___lwmod@divisor& (0+255),w,b
 18576  00529C  0100               	movlb	0	; () banked
 18577  00529E  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 18578  0052A0  B4D8               	btfsc	status,2,c
 18579  0052A2  D026               	goto	l1974
 18580                           
 18581                           ; BSR set to: 0
 18582  0052A4  0E01               	movlw	1
 18583  0052A6  0100               	movlb	0	; () banked
 18584  0052A8  6F8B               	movwf	___lwmod@counter& (0+255),b
 18585  0052AA  D006               	goto	l6619
 18586  0052AC                     l6617:
 18587                           
 18588                           ; BSR set to: 0
 18589  0052AC  0100               	movlb	0	; () banked
 18590  0052AE  90D8               	bcf	status,0,c
 18591  0052B0  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 18592  0052B2  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 18593  0052B4  0100               	movlb	0	; () banked
 18594  0052B6  2B8B               	incf	___lwmod@counter& (0+255),f,b
 18595  0052B8                     l6619:
 18596                           
 18597                           ; BSR set to: 0
 18598  0052B8  0100               	movlb	0	; () banked
 18599  0052BA  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 18600  0052BC  D7F7               	goto	l6617
 18601  0052BE                     l6621:
 18602                           
 18603                           ; BSR set to: 0
 18604  0052BE  0100               	movlb	0	; () banked
 18605  0052C0  5189               	movf	___lwmod@divisor& (0+255),w,b
 18606  0052C2  0100               	movlb	0	; () banked
 18607  0052C4  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 18608  0052C6  0100               	movlb	0	; () banked
 18609  0052C8  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18610  0052CA  0100               	movlb	0	; () banked
 18611  0052CC  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 18612  0052CE  A0D8               	btfss	status,0,c
 18613  0052D0  D008               	goto	l6625
 18614                           
 18615                           ; BSR set to: 0
 18616  0052D2  0100               	movlb	0	; () banked
 18617  0052D4  5189               	movf	___lwmod@divisor& (0+255),w,b
 18618  0052D6  0100               	movlb	0	; () banked
 18619  0052D8  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 18620  0052DA  0100               	movlb	0	; () banked
 18621  0052DC  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18622  0052DE  0100               	movlb	0	; () banked
 18623  0052E0  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 18624  0052E2                     l6625:
 18625                           
 18626                           ; BSR set to: 0
 18627  0052E2  0100               	movlb	0	; () banked
 18628  0052E4  90D8               	bcf	status,0,c
 18629  0052E6  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 18630  0052E8  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 18631                           
 18632                           ; BSR set to: 0
 18633  0052EA  0100               	movlb	0	; () banked
 18634  0052EC  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 18635  0052EE  D7E7               	goto	l6621
 18636  0052F0                     l1974:
 18637                           
 18638                           ; BSR set to: 0
 18639  0052F0  C087  F087         	movff	___lwmod@dividend,?___lwmod
 18640  0052F4  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 18641                           
 18642                           ; BSR set to: 0
 18643  0052F8  0012               	return		;funcret
 18644  0052FA                     __end_of___lwmod:
 18645                           	opt stack 0
 18646                           tblptru	equ	0xFF8
 18647                           tblptrh	equ	0xFF7
 18648                           tblptrl	equ	0xFF6
 18649                           tablat	equ	0xFF5
 18650                           prodh	equ	0xFF4
 18651                           prodl	equ	0xFF3
 18652                           intcon	equ	0xFF2
 18653                           intcon2	equ	0xFF1
 18654                           intcon3	equ	0xFF0
 18655                           indf0	equ	0xFEF
 18656                           postinc0	equ	0xFEE
 18657                           fsr0h	equ	0xFEA
 18658                           fsr0l	equ	0xFE9
 18659                           wreg	equ	0xFE8
 18660                           postdec1	equ	0xFE5
 18661                           fsr1l	equ	0xFE1
 18662                           indf2	equ	0xFDF
 18663                           postinc2	equ	0xFDE
 18664                           postdec2	equ	0xFDD
 18665                           fsr2h	equ	0xFDA
 18666                           fsr2l	equ	0xFD9
 18667                           status	equ	0xFD8
 18668                           
 18669 ;; *************** function ___lwdiv *****************
 18670 ;; Defined at:
 18671 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 18672 ;; Parameters:    Size  Location     Type
 18673 ;;  dividend        2    0[BANK0 ] unsigned int 
 18674 ;;  divisor         2    2[BANK0 ] unsigned int 
 18675 ;; Auto vars:     Size  Location     Type
 18676 ;;  quotient        2    4[BANK0 ] unsigned int 
 18677 ;;  counter         1    6[BANK0 ] unsigned char 
 18678 ;; Return value:  Size  Location     Type
 18679 ;;                  2    0[BANK0 ] unsigned int 
 18680 ;; Registers used:
 18681 ;;		wreg, status,2, status,0
 18682 ;; Tracked objects:
 18683 ;;		On entry : 0/0
 18684 ;;		On exit  : 0/0
 18685 ;;		Unchanged: 0/0
 18686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18687 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18688 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18690 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18691 ;;Total ram usage:        7 bytes
 18692 ;; Hardware stack levels used:    1
 18693 ;; Hardware stack levels required when called:    7
 18694 ;; This function calls:
 18695 ;;		Nothing
 18696 ;; This function is called by:
 18697 ;;		_printf
 18698 ;; This function uses a non-reentrant model
 18699 ;;
 18700                           
 18701                           	psect	text61
 18702  005004                     __ptext61:
 18703                           	opt stack 0
 18704  005004                     ___lwdiv:
 18705                           	opt stack 19
 18706                           
 18707                           ; BSR set to: 0
 18708                           ;incstack = 0
 18709  005004  0E00               	movlw	0
 18710  005006  0100               	movlb	0	; () banked
 18711  005008  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 18712  00500A  0E00               	movlw	0
 18713  00500C  6F84               	movwf	___lwdiv@quotient& (0+255),b
 18714                           
 18715                           ; BSR set to: 0
 18716  00500E  0100               	movlb	0	; () banked
 18717  005010  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18718  005012  0100               	movlb	0	; () banked
 18719  005014  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 18720  005016  B4D8               	btfsc	status,2,c
 18721  005018  D02C               	goto	l1964
 18722                           
 18723                           ; BSR set to: 0
 18724  00501A  0E01               	movlw	1
 18725  00501C  0100               	movlb	0	; () banked
 18726  00501E  6F86               	movwf	___lwdiv@counter& (0+255),b
 18727  005020  D006               	goto	l6599
 18728  005022                     l6597:
 18729                           
 18730                           ; BSR set to: 0
 18731  005022  0100               	movlb	0	; () banked
 18732  005024  90D8               	bcf	status,0,c
 18733  005026  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 18734  005028  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 18735  00502A  0100               	movlb	0	; () banked
 18736  00502C  2B86               	incf	___lwdiv@counter& (0+255),f,b
 18737  00502E                     l6599:
 18738                           
 18739                           ; BSR set to: 0
 18740  00502E  0100               	movlb	0	; () banked
 18741  005030  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 18742  005032  D7F7               	goto	l6597
 18743  005034                     l6601:
 18744                           
 18745                           ; BSR set to: 0
 18746  005034  0100               	movlb	0	; () banked
 18747  005036  90D8               	bcf	status,0,c
 18748  005038  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 18749  00503A  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 18750                           
 18751                           ; BSR set to: 0
 18752  00503C  0100               	movlb	0	; () banked
 18753  00503E  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18754  005040  0100               	movlb	0	; () banked
 18755  005042  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 18756  005044  0100               	movlb	0	; () banked
 18757  005046  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 18758  005048  0100               	movlb	0	; () banked
 18759  00504A  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 18760  00504C  A0D8               	btfss	status,0,c
 18761  00504E  D00A               	goto	l6609
 18762                           
 18763                           ; BSR set to: 0
 18764  005050  0100               	movlb	0	; () banked
 18765  005052  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18766  005054  0100               	movlb	0	; () banked
 18767  005056  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 18768  005058  0100               	movlb	0	; () banked
 18769  00505A  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 18770  00505C  0100               	movlb	0	; () banked
 18771  00505E  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 18772                           
 18773                           ; BSR set to: 0
 18774  005060  0100               	movlb	0	; () banked
 18775  005062  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 18776  005064                     l6609:
 18777                           
 18778                           ; BSR set to: 0
 18779  005064  0100               	movlb	0	; () banked
 18780  005066  90D8               	bcf	status,0,c
 18781  005068  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 18782  00506A  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 18783                           
 18784                           ; BSR set to: 0
 18785  00506C  0100               	movlb	0	; () banked
 18786  00506E  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 18787  005070  D7E1               	goto	l6601
 18788  005072                     l1964:
 18789                           
 18790                           ; BSR set to: 0
 18791  005072  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 18792  005076  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 18793                           
 18794                           ; BSR set to: 0
 18795  00507A  0012               	return		;funcret
 18796  00507C                     __end_of___lwdiv:
 18797                           	opt stack 0
 18798                           tblptru	equ	0xFF8
 18799                           tblptrh	equ	0xFF7
 18800                           tblptrl	equ	0xFF6
 18801                           tablat	equ	0xFF5
 18802                           prodh	equ	0xFF4
 18803                           prodl	equ	0xFF3
 18804                           intcon	equ	0xFF2
 18805                           intcon2	equ	0xFF1
 18806                           intcon3	equ	0xFF0
 18807                           indf0	equ	0xFEF
 18808                           postinc0	equ	0xFEE
 18809                           fsr0h	equ	0xFEA
 18810                           fsr0l	equ	0xFE9
 18811                           wreg	equ	0xFE8
 18812                           postdec1	equ	0xFE5
 18813                           fsr1l	equ	0xFE1
 18814                           indf2	equ	0xFDF
 18815                           postinc2	equ	0xFDE
 18816                           postdec2	equ	0xFDD
 18817                           fsr2h	equ	0xFDA
 18818                           fsr2l	equ	0xFD9
 18819                           status	equ	0xFD8
 18820                           
 18821 ;; *************** function _lcdInst *****************
 18822 ;; Defined at:
 18823 ;;		line 15 in file "lcd.c"
 18824 ;; Parameters:    Size  Location     Type
 18825 ;;  data            1    wreg     unsigned char 
 18826 ;; Auto vars:     Size  Location     Type
 18827 ;;  data            1    2[BANK0 ] unsigned char 
 18828 ;; Return value:  Size  Location     Type
 18829 ;;                  1    wreg      void 
 18830 ;; Registers used:
 18831 ;;		wreg, status,2, status,0, cstack
 18832 ;; Tracked objects:
 18833 ;;		On entry : 0/0
 18834 ;;		On exit  : 0/0
 18835 ;;		Unchanged: 0/0
 18836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18838 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18840 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18841 ;;Total ram usage:        1 bytes
 18842 ;; Hardware stack levels used:    1
 18843 ;; Hardware stack levels required when called:    8
 18844 ;; This function calls:
 18845 ;;		_lcdNibble
 18846 ;; This function is called by:
 18847 ;;		_UI
 18848 ;;		_change_state_to_menu_start
 18849 ;;		_change_state_to_menu_12
 18850 ;;		_change_state_to_menu_22
 18851 ;;		_initLCD
 18852 ;;		_printRTC
 18853 ;;		_Loading
 18854 ;;		_ID
 18855 ;;		_EEPROM_write
 18856 ;;		_Test
 18857 ;;		_algorithmTest
 18858 ;;		_sensorTest
 18859 ;;		_actuatorTest
 18860 ;;		_BothServos
 18861 ;;		_PortTestDC
 18862 ;;		_PlatformTest
 18863 ;;		_SpeedTest
 18864 ;;		_BlockerTest
 18865 ;;		_arm
 18866 ;;		_PortTestPusher
 18867 ;;		_ToggleTestA5
 18868 ;; This function uses a non-reentrant model
 18869 ;;
 18870                           
 18871                           	psect	text62
 18872  005CB2                     __ptext62:
 18873                           	opt stack 0
 18874  005CB2                     _lcdInst:
 18875                           	opt stack 20
 18876                           
 18877                           ; BSR set to: 0
 18878                           ;incstack = 0
 18879                           ;lcdInst@data stored from wreg
 18880  005CB2  0100               	movlb	0	; () banked
 18881  005CB4  6F82               	movwf	lcdInst@data& (0+255),b
 18882                           
 18883                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 18884  005CB6  948C               	bcf	3980,2,c	;volatile
 18885                           
 18886                           ;lcd.c: 17: lcdNibble(data);
 18887  005CB8  0100               	movlb	0	; () banked
 18888  005CBA  5182               	movf	lcdInst@data& (0+255),w,b
 18889  005CBC  ECB0  F028         	call	_lcdNibble
 18890  005CC0  0012               	return		;funcret
 18891  005CC2                     __end_of_lcdInst:
 18892                           	opt stack 0
 18893                           tblptru	equ	0xFF8
 18894                           tblptrh	equ	0xFF7
 18895                           tblptrl	equ	0xFF6
 18896                           tablat	equ	0xFF5
 18897                           prodh	equ	0xFF4
 18898                           prodl	equ	0xFF3
 18899                           intcon	equ	0xFF2
 18900                           intcon2	equ	0xFF1
 18901                           intcon3	equ	0xFF0
 18902                           indf0	equ	0xFEF
 18903                           postinc0	equ	0xFEE
 18904                           fsr0h	equ	0xFEA
 18905                           fsr0l	equ	0xFE9
 18906                           wreg	equ	0xFE8
 18907                           postdec1	equ	0xFE5
 18908                           fsr1l	equ	0xFE1
 18909                           indf2	equ	0xFDF
 18910                           postinc2	equ	0xFDE
 18911                           postdec2	equ	0xFDD
 18912                           fsr2h	equ	0xFDA
 18913                           fsr2l	equ	0xFD9
 18914                           status	equ	0xFD8
 18915                           
 18916 ;; *************** function _lcdNibble *****************
 18917 ;; Defined at:
 18918 ;;		line 25 in file "lcd.c"
 18919 ;; Parameters:    Size  Location     Type
 18920 ;;  data            1    wreg     unsigned char 
 18921 ;; Auto vars:     Size  Location     Type
 18922 ;;  data            1    1[BANK0 ] unsigned char 
 18923 ;;  temp            1    0[BANK0 ] unsigned char 
 18924 ;; Return value:  Size  Location     Type
 18925 ;;                  1    wreg      void 
 18926 ;; Registers used:
 18927 ;;		wreg, status,2, status,0
 18928 ;; Tracked objects:
 18929 ;;		On entry : 0/0
 18930 ;;		On exit  : 0/0
 18931 ;;		Unchanged: 0/0
 18932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18934 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18936 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18937 ;;Total ram usage:        2 bytes
 18938 ;; Hardware stack levels used:    1
 18939 ;; Hardware stack levels required when called:    7
 18940 ;; This function calls:
 18941 ;;		Nothing
 18942 ;; This function is called by:
 18943 ;;		_lcdInst
 18944 ;;		_putch
 18945 ;; This function uses a non-reentrant model
 18946 ;;
 18947                           
 18948                           	psect	text63
 18949  005160                     __ptext63:
 18950                           	opt stack 0
 18951  005160                     _lcdNibble:
 18952                           	opt stack 20
 18953                           
 18954                           ;incstack = 0
 18955                           ;lcdNibble@data stored from wreg
 18956  005160  0100               	movlb	0	; () banked
 18957  005162  6F81               	movwf	lcdNibble@data& (0+255),b
 18958                           
 18959                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 18960  005164  9EF2               	bcf	intcon,7,c	;volatile
 18961                           
 18962                           ;lcd.c: 28: char temp = data & 0xF0;
 18963  005166  0100               	movlb	0	; () banked
 18964  005168  5181               	movf	lcdNibble@data& (0+255),w,b
 18965  00516A  0BF0               	andlw	240
 18966  00516C  0100               	movlb	0	; () banked
 18967  00516E  6F80               	movwf	lcdNibble@temp& (0+255),b
 18968                           
 18969                           ;lcd.c: 29: LATD = LATD & 0x0F;
 18970  005170  508C               	movf	3980,w,c	;volatile
 18971  005172  0B0F               	andlw	15
 18972  005174  6E8C               	movwf	3980,c	;volatile
 18973                           
 18974                           ;lcd.c: 30: LATD = temp | LATD;
 18975  005176  0100               	movlb	0	; () banked
 18976  005178  5180               	movf	lcdNibble@temp& (0+255),w,b
 18977  00517A  108C               	iorwf	3980,w,c	;volatile
 18978  00517C  6E8C               	movwf	3980,c	;volatile
 18979                           
 18980                           ; BSR set to: 0
 18981                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 18982  00517E  868C               	bsf	3980,3,c	;volatile
 18983                           
 18984                           ; BSR set to: 0
 18985                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18986  005180  0E42               	movlw	66
 18987  005182                     u11327:
 18988  005182  2EE8               	decfsz	wreg,f,c
 18989  005184  D7FE               	bra	u11327
 18990  005186  D000               	nop2	
 18991                           
 18992                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 18993  005188  968C               	bcf	3980,3,c	;volatile
 18994                           
 18995                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18996  00518A  0E42               	movlw	66
 18997  00518C                     u11337:
 18998  00518C  2EE8               	decfsz	wreg,f,c
 18999  00518E  D7FE               	bra	u11337
 19000  005190  D000               	nop2	
 19001                           
 19002                           ;lcd.c: 37: data = data << 4;
 19003  005192  0100               	movlb	0	; () banked
 19004  005194  3981               	swapf	lcdNibble@data& (0+255),w,b
 19005  005196  0BF0               	andlw	240
 19006  005198  0100               	movlb	0	; () banked
 19007  00519A  6F81               	movwf	lcdNibble@data& (0+255),b
 19008                           
 19009                           ;lcd.c: 39: temp = data & 0xF0;
 19010  00519C  0100               	movlb	0	; () banked
 19011  00519E  5181               	movf	lcdNibble@data& (0+255),w,b
 19012  0051A0  0BF0               	andlw	240
 19013  0051A2  0100               	movlb	0	; () banked
 19014  0051A4  6F80               	movwf	lcdNibble@temp& (0+255),b
 19015                           
 19016                           ;lcd.c: 40: LATD = LATD & 0x0F;
 19017  0051A6  508C               	movf	3980,w,c	;volatile
 19018  0051A8  0B0F               	andlw	15
 19019  0051AA  6E8C               	movwf	3980,c	;volatile
 19020                           
 19021                           ;lcd.c: 41: LATD = temp | LATD;
 19022  0051AC  0100               	movlb	0	; () banked
 19023  0051AE  5180               	movf	lcdNibble@temp& (0+255),w,b
 19024  0051B0  108C               	iorwf	3980,w,c	;volatile
 19025  0051B2  6E8C               	movwf	3980,c	;volatile
 19026                           
 19027                           ; BSR set to: 0
 19028                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 19029  0051B4  868C               	bsf	3980,3,c	;volatile
 19030                           
 19031                           ; BSR set to: 0
 19032                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19033  0051B6  0E42               	movlw	66
 19034  0051B8                     u11347:
 19035  0051B8  2EE8               	decfsz	wreg,f,c
 19036  0051BA  D7FE               	bra	u11347
 19037  0051BC  D000               	nop2	
 19038                           
 19039                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 19040  0051BE  968C               	bcf	3980,3,c	;volatile
 19041                           
 19042                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19043  0051C0  0E42               	movlw	66
 19044  0051C2                     u11357:
 19045  0051C2  2EE8               	decfsz	wreg,f,c
 19046  0051C4  D7FE               	bra	u11357
 19047  0051C6  D000               	nop2	
 19048                           
 19049                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 19050  0051C8  8EF2               	bsf	intcon,7,c	;volatile
 19051  0051CA  0012               	return		;funcret
 19052  0051CC                     __end_of_lcdNibble:
 19053                           	opt stack 0
 19054                           tblptru	equ	0xFF8
 19055                           tblptrh	equ	0xFF7
 19056                           tblptrl	equ	0xFF6
 19057                           tablat	equ	0xFF5
 19058                           prodh	equ	0xFF4
 19059                           prodl	equ	0xFF3
 19060                           intcon	equ	0xFF2
 19061                           intcon2	equ	0xFF1
 19062                           intcon3	equ	0xFF0
 19063                           indf0	equ	0xFEF
 19064                           postinc0	equ	0xFEE
 19065                           fsr0h	equ	0xFEA
 19066                           fsr0l	equ	0xFE9
 19067                           wreg	equ	0xFE8
 19068                           postdec1	equ	0xFE5
 19069                           fsr1l	equ	0xFE1
 19070                           indf2	equ	0xFDF
 19071                           postinc2	equ	0xFDE
 19072                           postdec2	equ	0xFDD
 19073                           fsr2h	equ	0xFDA
 19074                           fsr2l	equ	0xFD9
 19075                           status	equ	0xFD8
 19076                           
 19077 ;; *************** function _handler *****************
 19078 ;; Defined at:
 19079 ;;		line 16 in file "interruptHandler.c"
 19080 ;; Parameters:    Size  Location     Type
 19081 ;;		None
 19082 ;; Auto vars:     Size  Location     Type
 19083 ;;		None
 19084 ;; Return value:  Size  Location     Type
 19085 ;;                  1    wreg      void 
 19086 ;; Registers used:
 19087 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19088 ;; Tracked objects:
 19089 ;;		On entry : 0/0
 19090 ;;		On exit  : 0/0
 19091 ;;		Unchanged: 0/0
 19092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19095 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19096 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19097 ;;Total ram usage:       16 bytes
 19098 ;; Hardware stack levels used:    1
 19099 ;; Hardware stack levels required when called:    6
 19100 ;; This function calls:
 19101 ;;		_printSortTimer
 19102 ;;		_updateArmState
 19103 ;;		_updateMenu
 19104 ;;		_updateServoStates
 19105 ;;		i2_change_state_to_menu_start
 19106 ;; This function is called by:
 19107 ;;		Interrupt level 2
 19108 ;; This function uses a non-reentrant model
 19109 ;;
 19110                           
 19111                           	psect	intcode
 19112  000008                     __pintcode:
 19113                           	opt stack 0
 19114  000008                     _handler:
 19115                           	opt stack 18
 19116                           
 19117                           ;incstack = 0
 19118  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19119  00000A  ED66  F01D         	call	int_func,f	;refresh shadow registers
 19120                           tblptru	equ	0xFF8
 19121                           tblptrh	equ	0xFF7
 19122                           tblptrl	equ	0xFF6
 19123                           tablat	equ	0xFF5
 19124                           prodh	equ	0xFF4
 19125                           prodl	equ	0xFF3
 19126                           intcon	equ	0xFF2
 19127                           intcon2	equ	0xFF1
 19128                           intcon3	equ	0xFF0
 19129                           indf0	equ	0xFEF
 19130                           postinc0	equ	0xFEE
 19131                           fsr0h	equ	0xFEA
 19132                           fsr0l	equ	0xFE9
 19133                           wreg	equ	0xFE8
 19134                           postdec1	equ	0xFE5
 19135                           fsr1l	equ	0xFE1
 19136                           indf2	equ	0xFDF
 19137                           postinc2	equ	0xFDE
 19138                           postdec2	equ	0xFDD
 19139                           fsr2h	equ	0xFDA
 19140                           fsr2l	equ	0xFD9
 19141                           status	equ	0xFD8
 19142                           
 19143                           	psect	intcode_body
 19144  003ACC                     __pintcode_body:
 19145                           	opt stack 18
 19146  003ACC                     int_func:
 19147                           	opt stack 18
 19148  003ACC  0006               	pop		; remove dummy address from shadow register refresh
 19149  003ACE  CFFA F04D          	movff	pclath,??_handler+2
 19150  003AD2  CFFB F04E          	movff	pclatu,??_handler+3
 19151  003AD6  CFE9 F04F          	movff	fsr0l,??_handler+4
 19152  003ADA  CFEA F050          	movff	fsr0h,??_handler+5
 19153  003ADE  CFE1 F051          	movff	fsr1l,??_handler+6
 19154  003AE2  CFE2 F052          	movff	fsr1h,??_handler+7
 19155  003AE6  CFD9 F053          	movff	fsr2l,??_handler+8
 19156  003AEA  CFDA F054          	movff	fsr2h,??_handler+9
 19157  003AEE  CFF3 F055          	movff	prodl,??_handler+10
 19158  003AF2  CFF4 F056          	movff	prodh,??_handler+11
 19159  003AF6  CFF6 F057          	movff	tblptrl,??_handler+12
 19160  003AFA  CFF7 F058          	movff	tblptrh,??_handler+13
 19161  003AFE  CFF8 F059          	movff	tblptru,??_handler+14
 19162  003B02  CFF5 F05A          	movff	tablat,??_handler+15
 19163                           
 19164                           ;interruptHandler.c: 18: if(INT1IF){
 19165  003B06  A0F0               	btfss	intcon3,0,c	;volatile
 19166  003B08  D034               	goto	i2l10239
 19167                           
 19168                           ;interruptHandler.c: 19: INT1IF = 0;
 19169  003B0A  90F0               	bcf	intcon3,0,c	;volatile
 19170                           
 19171                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
 19172  003B0C  3881               	swapf	3969,w,c	;volatile
 19173  003B0E  0B0F               	andlw	15
 19174  003B10  0B0F               	andlw	15
 19175  003B12  6E4B               	movwf	??_handler& (0+255),c
 19176  003B14  6A4C               	clrf	(??_handler+1)& (0+255),c
 19177  003B16  0E87               	movlw	low _keys
 19178  003B18  244B               	addwf	??_handler,w,c
 19179  003B1A  6EF6               	movwf	tblptrl,c
 19180  003B1C  0EFA               	movlw	high _keys
 19181  003B1E  204C               	addwfc	??_handler+1,w,c
 19182  003B20  6EF7               	movwf	tblptrh,c
 19183  003B22                     	if	1	;There are 3 active tblptr bytes
 19184  003B22  6AF8               	clrf	tblptru,c
 19185  003B24  0E00               	movlw	low (__mediumconst shr (0+16))
 19186  003B26  22F8               	addwfc	tblptru,f,c
 19187  003B28                     	endif
 19188  003B28  0008               	tblrd		*
 19189  003B2A  CFF5 F07D          	movff	tablat,_input	;volatile
 19190                           
 19191                           ;interruptHandler.c: 21: if(input == '*'){
 19192  003B2E  0E2A               	movlw	42
 19193  003B30  187D               	xorwf	_input,w,c	;volatile
 19194  003B32  B4D8               	btfsc	status,2,c
 19195  003B34  D00D               	goto	i2l10233
 19196  003B36  D018               	goto	i2l10235
 19197  003B38                     i2l10223:
 19198                           
 19199                           ;interruptHandler.c: 24: machine_state = Testing_state;
 19200  003B38  0E03               	movlw	3
 19201  003B3A  D007               	goto	L17
 19202  003B3C                     i2l10225:
 19203                           
 19204                           ; BSR set to: 0
 19205                           ;interruptHandler.c: 27: machine_state = UI_state;
 19206  003B3C  0E00               	movlw	0
 19207  003B3E  0100               	movlb	0	; () banked
 19208  003B40  6FFC               	movwf	_machine_state& (0+255),b
 19209                           
 19210                           ; BSR set to: 0
 19211                           ;interruptHandler.c: 28: change_state_to_menu_start();
 19212  003B42  EC8E  F02D         	call	i2_change_state_to_menu_start	;wreg free
 19213                           
 19214                           ;interruptHandler.c: 29: break;
 19215  003B46  D015               	goto	i2l10239
 19216  003B48                     i2l10229:
 19217                           
 19218                           ;interruptHandler.c: 31: machine_state = DoneSorting_state;
 19219  003B48  0E02               	movlw	2
 19220  003B4A                     L17:
 19221  003B4A  0100               	movlb	0	; () banked
 19222  003B4C  6FFC               	movwf	_machine_state& (0+255),b
 19223                           
 19224                           ; BSR set to: 0
 19225                           ;interruptHandler.c: 33: }
 19226                           
 19227                           ;interruptHandler.c: 32: break;
 19228  003B4E  D011               	goto	i2l10239
 19229  003B50                     i2l10233:
 19230  003B50  0100               	movlb	0	; () banked
 19231  003B52  51FC               	movf	_machine_state& (0+255),w,b
 19232                           
 19233                           ; Switch size 1, requested type "space"
 19234                           ; Number of cases is 3, Range of values is 0 to 3
 19235                           ; switch strategies available:
 19236                           ; Name         Instructions Cycles
 19237                           ; simple_byte           10     6 (average)
 19238                           ;	Chosen strategy is simple_byte
 19239  003B54  0A00               	xorlw	0	; case 0
 19240  003B56  B4D8               	btfsc	status,2,c
 19241  003B58  D7EF               	goto	i2l10223
 19242  003B5A  0A01               	xorlw	1	; case 1
 19243  003B5C  B4D8               	btfsc	status,2,c
 19244  003B5E  D7F4               	goto	i2l10229
 19245  003B60  0A02               	xorlw	2	; case 3
 19246  003B62  B4D8               	btfsc	status,2,c
 19247  003B64  D7EB               	goto	i2l10225
 19248                           
 19249                           ; BSR set to: 0
 19250                           ;interruptHandler.c: 34: }
 19251  003B66  D005               	goto	i2l10239
 19252  003B68                     i2l10235:
 19253                           
 19254                           ;interruptHandler.c: 35: else if(machine_state == UI_state){
 19255  003B68  0100               	movlb	0	; () banked
 19256  003B6A  51FC               	movf	_machine_state& (0+255),w,b
 19257  003B6C  B4D8               	btfsc	status,2,c
 19258                           
 19259                           ; BSR set to: 0
 19260                           ;interruptHandler.c: 36: updateMenu();
 19261  003B6E  ECF5  F019         	call	_updateMenu	;wreg free
 19262  003B72                     i2l10239:
 19263                           
 19264                           ;interruptHandler.c: 37: }
 19265                           ;interruptHandler.c: 38: }
 19266                           ;interruptHandler.c: 41: if(TMR0IF){
 19267  003B72  A4F2               	btfss	intcon,2,c	;volatile
 19268  003B74  D00C               	goto	i2l10253
 19269                           
 19270                           ;interruptHandler.c: 42: TMR0IF = 0;
 19271  003B76  94F2               	bcf	intcon,2,c	;volatile
 19272                           
 19273                           ;interruptHandler.c: 43: if(machine_state == Sorting_state){
 19274  003B78  0100               	movlb	0	; () banked
 19275  003B7A  05FC               	decf	_machine_state& (0+255),w,b
 19276  003B7C  A4D8               	btfss	status,2,c
 19277  003B7E  D007               	goto	i2l10253
 19278                           
 19279                           ; BSR set to: 0
 19280                           ;interruptHandler.c: 44: printSortTimer();
 19281  003B80  ECDF  F013         	call	_printSortTimer	;wreg free
 19282                           
 19283                           ;interruptHandler.c: 46: TMR0H = 0b10000101;
 19284  003B84  0E85               	movlw	133
 19285  003B86  6ED7               	movwf	4055,c	;volatile
 19286                           
 19287                           ;interruptHandler.c: 47: TMR0L = 0b11101110;
 19288  003B88  0EEE               	movlw	238
 19289  003B8A  6ED6               	movwf	4054,c	;volatile
 19290                           
 19291                           ;interruptHandler.c: 48: TMR0ON = 1;
 19292  003B8C  8ED5               	bsf	4053,7,c	;volatile
 19293  003B8E                     i2l10253:
 19294                           
 19295                           ;interruptHandler.c: 49: }
 19296                           ;interruptHandler.c: 50: }
 19297                           ;interruptHandler.c: 53: if(TMR1IF){
 19298  003B8E  A09E               	btfss	3998,0,c	;volatile
 19299  003B90  D028               	goto	i2l10281
 19300                           
 19301                           ;interruptHandler.c: 54: TMR1IF = 0;
 19302  003B92  909E               	bcf	3998,0,c	;volatile
 19303                           
 19304                           ;interruptHandler.c: 55: TMR1ON = 0;
 19305  003B94  90CD               	bcf	4045,0,c	;volatile
 19306                           
 19307                           ;interruptHandler.c: 56: if(machine_state == Sorting_state){
 19308  003B96  0100               	movlb	0	; () banked
 19309  003B98  05FC               	decf	_machine_state& (0+255),w,b
 19310  003B9A  A4D8               	btfss	status,2,c
 19311  003B9C  D022               	goto	i2l10281
 19312                           
 19313                           ; BSR set to: 0
 19314                           ;interruptHandler.c: 57: if(was_low_1){
 19315  003B9E  5077               	movf	_was_low_1,w,c	;volatile
 19316  003BA0  1078               	iorwf	_was_low_1+1,w,c	;volatile
 19317  003BA2  B4D8               	btfsc	status,2,c
 19318  003BA4  D00A               	goto	i2l1041
 19319                           
 19320                           ; BSR set to: 0
 19321                           ;interruptHandler.c: 58: LATCbits.LATC1 = 1;
 19322  003BA6  828B               	bsf	3979,1,c	;volatile
 19323                           
 19324                           ; BSR set to: 0
 19325                           ;interruptHandler.c: 59: was_low_1 = 0;
 19326  003BA8  0E00               	movlw	0
 19327  003BAA  6E78               	movwf	_was_low_1+1,c	;volatile
 19328  003BAC  0E00               	movlw	0
 19329  003BAE  6E77               	movwf	_was_low_1,c	;volatile
 19330                           
 19331                           ; BSR set to: 0
 19332                           ;interruptHandler.c: 60: TMR1H = servoTimes[0];
 19333  003BB0  C05B  FFCF         	movff	_servoTimes,4047	;volatile
 19334                           
 19335                           ; BSR set to: 0
 19336                           ;interruptHandler.c: 61: TMR1L = servoTimes[1];
 19337  003BB4  C05D  FFCE         	movff	_servoTimes+2,4046	;volatile
 19338                           
 19339                           ;interruptHandler.c: 62: }
 19340  003BB8  D00D               	goto	i2l10275
 19341  003BBA                     i2l1041:
 19342                           
 19343                           ; BSR set to: 0
 19344                           ;interruptHandler.c: 63: else{
 19345                           ;interruptHandler.c: 64: LATCbits.LATC1 = 0;
 19346  003BBA  928B               	bcf	3979,1,c	;volatile
 19347                           
 19348                           ; BSR set to: 0
 19349                           ;interruptHandler.c: 65: was_low_1 = 1;
 19350  003BBC  0E00               	movlw	0
 19351  003BBE  6E78               	movwf	_was_low_1+1,c	;volatile
 19352  003BC0  0E01               	movlw	1
 19353  003BC2  6E77               	movwf	_was_low_1,c	;volatile
 19354                           
 19355                           ; BSR set to: 0
 19356                           ;interruptHandler.c: 66: TMR1H = 20000 - servoTimes[0];
 19357  003BC4  505B               	movf	_servoTimes,w,c
 19358  003BC6  0800               	sublw	0
 19359  003BC8  0F20               	addlw	32
 19360  003BCA  6ECF               	movwf	4047,c	;volatile
 19361                           
 19362                           ; BSR set to: 0
 19363                           ;interruptHandler.c: 67: TMR1L = 20000 - servoTimes[1];
 19364  003BCC  505D               	movf	_servoTimes+2,w,c
 19365  003BCE  0800               	sublw	0
 19366  003BD0  0F20               	addlw	32
 19367  003BD2  6ECE               	movwf	4046,c	;volatile
 19368  003BD4                     i2l10275:
 19369                           
 19370                           ; BSR set to: 0
 19371                           ;interruptHandler.c: 68: }
 19372                           ;interruptHandler.c: 69: TMR1ON = 1;
 19373  003BD4  80CD               	bsf	4045,0,c	;volatile
 19374                           
 19375                           ; BSR set to: 0
 19376                           ;interruptHandler.c: 70: servo_timer_counter += 10;
 19377  003BD6  0E0A               	movlw	10
 19378  003BD8  266D               	addwf	_servo_timer_counter,f,c	;volatile
 19379  003BDA  0E00               	movlw	0
 19380  003BDC  226E               	addwfc	_servo_timer_counter+1,f,c	;volatile
 19381                           
 19382                           ; BSR set to: 0
 19383                           ;interruptHandler.c: 72: updateServoStates();
 19384  003BDE  EC5B  F01E         	call	_updateServoStates	;wreg free
 19385  003BE2                     i2l10281:
 19386                           
 19387                           ;interruptHandler.c: 73: }
 19388                           ;interruptHandler.c: 74: }
 19389                           ;interruptHandler.c: 77: if(TMR2IF){
 19390  003BE2  A29E               	btfss	3998,1,c	;volatile
 19391  003BE4  D026               	goto	i2l10307
 19392                           
 19393                           ;interruptHandler.c: 80: TMR2IF = 0;
 19394  003BE6  929E               	bcf	3998,1,c	;volatile
 19395                           
 19396                           ;interruptHandler.c: 81: TMR2ON = 0;
 19397  003BE8  94CA               	bcf	4042,2,c	;volatile
 19398                           
 19399                           ;interruptHandler.c: 82: timer2_counter++;
 19400  003BEA  4A73               	infsnz	_timer2_counter,f,c	;volatile
 19401  003BEC  2A74               	incf	_timer2_counter+1,f,c	;volatile
 19402                           
 19403                           ;interruptHandler.c: 83: if(machine_state == Sorting_state){
 19404  003BEE  0100               	movlb	0	; () banked
 19405  003BF0  05FC               	decf	_machine_state& (0+255),w,b
 19406  003BF2  A4D8               	btfss	status,2,c
 19407  003BF4  D01E               	goto	i2l10307
 19408                           
 19409                           ; BSR set to: 0
 19410                           ;interruptHandler.c: 84: if(was_low_2 && (timer2_counter == 2)){
 19411  003BF6  5079               	movf	_was_low_2,w,c	;volatile
 19412  003BF8  107A               	iorwf	_was_low_2+1,w,c	;volatile
 19413  003BFA  B4D8               	btfsc	status,2,c
 19414  003BFC  D00A               	goto	i2l10297
 19415                           
 19416                           ; BSR set to: 0
 19417  003BFE  0E02               	movlw	2
 19418  003C00  1873               	xorwf	_timer2_counter,w,c	;volatile
 19419  003C02  1074               	iorwf	_timer2_counter+1,w,c	;volatile
 19420  003C04  A4D8               	btfss	status,2,c
 19421  003C06  D005               	goto	i2l10297
 19422                           
 19423                           ; BSR set to: 0
 19424                           ;interruptHandler.c: 86: LATBbits.LATB3 = 1;
 19425  003C08  868A               	bsf	3978,3,c	;volatile
 19426                           
 19427                           ; BSR set to: 0
 19428                           ;interruptHandler.c: 87: was_low_2 = 0;
 19429  003C0A  0E00               	movlw	0
 19430  003C0C  6E7A               	movwf	_was_low_2+1,c	;volatile
 19431  003C0E  0E00               	movlw	0
 19432  003C10  D008               	goto	L18
 19433  003C12                     i2l10297:
 19434                           
 19435                           ; BSR set to: 0
 19436                           ;interruptHandler.c: 90: else if(!was_low_2){
 19437  003C12  5079               	movf	_was_low_2,w,c	;volatile
 19438  003C14  107A               	iorwf	_was_low_2+1,w,c	;volatile
 19439  003C16  A4D8               	btfss	status,2,c
 19440  003C18  D009               	goto	i2l10303
 19441                           
 19442                           ; BSR set to: 0
 19443                           ;interruptHandler.c: 91: LATBbits.LATB3 = 0;
 19444  003C1A  968A               	bcf	3978,3,c	;volatile
 19445                           
 19446                           ; BSR set to: 0
 19447                           ;interruptHandler.c: 92: was_low_2 = 1;
 19448  003C1C  0E00               	movlw	0
 19449  003C1E  6E7A               	movwf	_was_low_2+1,c	;volatile
 19450  003C20  0E01               	movlw	1
 19451  003C22                     L18:
 19452  003C22  6E79               	movwf	_was_low_2,c	;volatile
 19453                           
 19454                           ;interruptHandler.c: 93: timer2_counter = 0;
 19455  003C24  0E00               	movlw	0
 19456  003C26  6E74               	movwf	_timer2_counter+1,c	;volatile
 19457  003C28  0E00               	movlw	0
 19458  003C2A  6E73               	movwf	_timer2_counter,c	;volatile
 19459  003C2C                     i2l10303:
 19460                           
 19461                           ; BSR set to: 0
 19462                           ;interruptHandler.c: 94: }
 19463                           ;interruptHandler.c: 95: updateArmState();
 19464  003C2C  EC5E  F02B         	call	_updateArmState	;wreg free
 19465                           
 19466                           ;interruptHandler.c: 96: TMR2ON = 1;
 19467  003C30  84CA               	bsf	4042,2,c	;volatile
 19468  003C32                     i2l10307:
 19469                           
 19470                           ;interruptHandler.c: 97: }
 19471                           ;interruptHandler.c: 98: }
 19472                           ;interruptHandler.c: 101: if(TMR3IF){
 19473  003C32  A2A1               	btfss	4001,1,c	;volatile
 19474  003C34  D022               	goto	i2l1052
 19475                           
 19476                           ;interruptHandler.c: 102: TMR3IF = 0;
 19477  003C36  92A1               	bcf	4001,1,c	;volatile
 19478                           
 19479                           ;interruptHandler.c: 103: TMR3ON = 0;
 19480  003C38  90B1               	bcf	4017,0,c	;volatile
 19481                           
 19482                           ;interruptHandler.c: 104: if(machine_state == Sorting_state){
 19483  003C3A  0100               	movlb	0	; () banked
 19484  003C3C  05FC               	decf	_machine_state& (0+255),w,b
 19485  003C3E  A4D8               	btfss	status,2,c
 19486  003C40  D01C               	goto	i2l1052
 19487                           
 19488                           ; BSR set to: 0
 19489                           ;interruptHandler.c: 105: if(was_low_3){
 19490  003C42  507B               	movf	_was_low_3,w,c	;volatile
 19491  003C44  107C               	iorwf	_was_low_3+1,w,c	;volatile
 19492  003C46  B4D8               	btfsc	status,2,c
 19493  003C48  D00A               	goto	i2l1050
 19494                           
 19495                           ; BSR set to: 0
 19496                           ;interruptHandler.c: 106: LATCbits.LATC2 = 1;
 19497  003C4A  848B               	bsf	3979,2,c	;volatile
 19498                           
 19499                           ; BSR set to: 0
 19500                           ;interruptHandler.c: 107: was_low_3 = 0;
 19501  003C4C  0E00               	movlw	0
 19502  003C4E  6E7C               	movwf	_was_low_3+1,c	;volatile
 19503  003C50  0E00               	movlw	0
 19504  003C52  6E7B               	movwf	_was_low_3,c	;volatile
 19505                           
 19506                           ; BSR set to: 0
 19507                           ;interruptHandler.c: 108: TMR3H = servoTimes[2];
 19508  003C54  C05F  FFB3         	movff	_servoTimes+4,4019	;volatile
 19509                           
 19510                           ; BSR set to: 0
 19511                           ;interruptHandler.c: 109: TMR3L = servoTimes[3];
 19512  003C58  C061  FFB2         	movff	_servoTimes+6,4018	;volatile
 19513                           
 19514                           ;interruptHandler.c: 110: }
 19515  003C5C  D00D               	goto	i2l10329
 19516  003C5E                     i2l1050:
 19517                           
 19518                           ; BSR set to: 0
 19519                           ;interruptHandler.c: 111: else{
 19520                           ;interruptHandler.c: 112: LATCbits.LATC2 = 0;
 19521  003C5E  948B               	bcf	3979,2,c	;volatile
 19522                           
 19523                           ; BSR set to: 0
 19524                           ;interruptHandler.c: 113: was_low_3 = 1;
 19525  003C60  0E00               	movlw	0
 19526  003C62  6E7C               	movwf	_was_low_3+1,c	;volatile
 19527  003C64  0E01               	movlw	1
 19528  003C66  6E7B               	movwf	_was_low_3,c	;volatile
 19529                           
 19530                           ; BSR set to: 0
 19531                           ;interruptHandler.c: 114: TMR3H = 20000 - servoTimes[2];
 19532  003C68  505F               	movf	_servoTimes+4,w,c
 19533  003C6A  0800               	sublw	0
 19534  003C6C  0F20               	addlw	32
 19535  003C6E  6EB3               	movwf	4019,c	;volatile
 19536                           
 19537                           ; BSR set to: 0
 19538                           ;interruptHandler.c: 115: TMR3L = 20000 - servoTimes[3];
 19539  003C70  5061               	movf	_servoTimes+6,w,c
 19540  003C72  0800               	sublw	0
 19541  003C74  0F20               	addlw	32
 19542  003C76  6EB2               	movwf	4018,c	;volatile
 19543  003C78                     i2l10329:
 19544                           
 19545                           ; BSR set to: 0
 19546                           ;interruptHandler.c: 116: }
 19547                           ;interruptHandler.c: 117: TMR3ON = 1;
 19548  003C78  80B1               	bsf	4017,0,c	;volatile
 19549  003C7A                     i2l1052:
 19550  003C7A  C05A  FFF5         	movff	??_handler+15,tablat
 19551  003C7E  C059  FFF8         	movff	??_handler+14,tblptru
 19552  003C82  C058  FFF7         	movff	??_handler+13,tblptrh
 19553  003C86  C057  FFF6         	movff	??_handler+12,tblptrl
 19554  003C8A  C056  FFF4         	movff	??_handler+11,prodh
 19555  003C8E  C055  FFF3         	movff	??_handler+10,prodl
 19556  003C92  C054  FFDA         	movff	??_handler+9,fsr2h
 19557  003C96  C053  FFD9         	movff	??_handler+8,fsr2l
 19558  003C9A  C052  FFE2         	movff	??_handler+7,fsr1h
 19559  003C9E  C051  FFE1         	movff	??_handler+6,fsr1l
 19560  003CA2  C050  FFEA         	movff	??_handler+5,fsr0h
 19561  003CA6  C04F  FFE9         	movff	??_handler+4,fsr0l
 19562  003CAA  C04E  FFFB         	movff	??_handler+3,pclatu
 19563  003CAE  C04D  FFFA         	movff	??_handler+2,pclath
 19564  003CB2  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19565  003CB4  0011               	retfie		f
 19566  003CB6                     __end_of_handler:
 19567                           	opt stack 0
 19568                           pclatu	equ	0xFFB
 19569                           pclath	equ	0xFFA
 19570                           tblptru	equ	0xFF8
 19571                           tblptrh	equ	0xFF7
 19572                           tblptrl	equ	0xFF6
 19573                           tablat	equ	0xFF5
 19574                           prodh	equ	0xFF4
 19575                           prodl	equ	0xFF3
 19576                           intcon	equ	0xFF2
 19577                           intcon2	equ	0xFF1
 19578                           intcon3	equ	0xFF0
 19579                           indf0	equ	0xFEF
 19580                           postinc0	equ	0xFEE
 19581                           fsr0h	equ	0xFEA
 19582                           fsr0l	equ	0xFE9
 19583                           wreg	equ	0xFE8
 19584                           postdec1	equ	0xFE5
 19585                           fsr1h	equ	0xFE2
 19586                           fsr1l	equ	0xFE1
 19587                           indf2	equ	0xFDF
 19588                           postinc2	equ	0xFDE
 19589                           postdec2	equ	0xFDD
 19590                           fsr2h	equ	0xFDA
 19591                           fsr2l	equ	0xFD9
 19592                           status	equ	0xFD8
 19593                           
 19594 ;; *************** function _updateServoStates *****************
 19595 ;; Defined at:
 19596 ;;		line 588 in file "sort.c"
 19597 ;; Parameters:    Size  Location     Type
 19598 ;;		None
 19599 ;; Auto vars:     Size  Location     Type
 19600 ;;		None
 19601 ;; Return value:  Size  Location     Type
 19602 ;;                  1    wreg      void 
 19603 ;; Registers used:
 19604 ;;		wreg, status,2, status,0, cstack
 19605 ;; Tracked objects:
 19606 ;;		On entry : 0/0
 19607 ;;		On exit  : 0/0
 19608 ;;		Unchanged: 0/0
 19609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19612 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19613 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19614 ;;Total ram usage:        2 bytes
 19615 ;; Hardware stack levels used:    1
 19616 ;; Hardware stack levels required when called:    1
 19617 ;; This function calls:
 19618 ;;		i2_updateServoPosition
 19619 ;; This function is called by:
 19620 ;;		_handler
 19621 ;; This function uses a non-reentrant model
 19622 ;;
 19623                           
 19624                           	psect	text65
 19625  003CB6                     __ptext65:
 19626                           	opt stack 0
 19627  003CB6                     _updateServoStates:
 19628                           	opt stack 22
 19629                           
 19630                           ;sort.c: 590: if(servo_timer_counter >= servo_timer_target){
 19631                           
 19632                           ;incstack = 0
 19633  003CB6  506F               	movf	_servo_timer_target,w,c	;volatile
 19634  003CB8  5C6D               	subwf	_servo_timer_counter,w,c	;volatile
 19635  003CBA  506E               	movf	_servo_timer_counter+1,w,c	;volatile
 19636  003CBC  0A80               	xorlw	128
 19637  003CBE  6E09               	movwf	??_updateServoStates& (0+255),c
 19638  003CC0  5070               	movf	_servo_timer_target+1,w,c	;volatile
 19639  003CC2  0A80               	xorlw	128
 19640  003CC4  5809               	subwfb	??_updateServoStates& (0+255),w,c
 19641  003CC6  A0D8               	btfss	status,0,c
 19642  003CC8  0012               	return	
 19643                           
 19644                           ;sort.c: 592: if(f_panning_to_bin){
 19645  003CCA  5069               	movf	_f_panning_to_bin,w,c	;volatile
 19646  003CCC  106A               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 19647  003CCE  A4D8               	btfss	status,2,c
 19648  003CD0  D036               	goto	i2l10095
 19649  003CD2  D05F               	goto	i2l10099
 19650  003CD4                     i2l10069:
 19651                           
 19652                           ;sort.c: 596: updateServoPosition(1260, 3);
 19653  003CD4  0E04               	movlw	4
 19654  003CD6  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19655  003CD8  0EEC               	movlw	236
 19656  003CDA  6E01               	movwf	i2updateServoPosition@time_us,c
 19657  003CDC  0E00               	movlw	0
 19658  003CDE  6E04               	movwf	i2updateServoPosition@timer+1,c
 19659  003CE0  0E03               	movlw	3
 19660  003CE2  6E03               	movwf	i2updateServoPosition@timer,c
 19661  003CE4  ECE6  F028         	call	i2_updateServoPosition	;wreg free
 19662  003CE8  D025               	goto	i2l10089
 19663  003CEA                     i2l10073:
 19664                           
 19665                           ;sort.c: 598: servo_timer_target = 700;
 19666  003CEA  0E02               	movlw	2
 19667  003CEC  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19668  003CEE  0EBC               	movlw	188
 19669  003CF0  6E6F               	movwf	_servo_timer_target,c	;volatile
 19670                           
 19671                           ;sort.c: 599: break;
 19672  003CF2  D04A               	goto	i2l10097
 19673  003CF4                     i2l10075:
 19674                           
 19675                           ;sort.c: 601: updateServoPosition(1260, 3);
 19676  003CF4  0E04               	movlw	4
 19677  003CF6  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19678  003CF8  0EEC               	movlw	236
 19679  003CFA  6E01               	movwf	i2updateServoPosition@time_us,c
 19680  003CFC  0E00               	movlw	0
 19681  003CFE  6E04               	movwf	i2updateServoPosition@timer+1,c
 19682  003D00  0E03               	movlw	3
 19683  003D02  6E03               	movwf	i2updateServoPosition@timer,c
 19684  003D04  ECE6  F028         	call	i2_updateServoPosition	;wreg free
 19685  003D08  D015               	goto	i2l10089
 19686  003D0A                     i2l10081:
 19687                           
 19688                           ;sort.c: 607: updateServoPosition(1390, 3);
 19689  003D0A  0E05               	movlw	5
 19690  003D0C  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19691  003D0E  0E6E               	movlw	110
 19692  003D10  6E01               	movwf	i2updateServoPosition@time_us,c
 19693  003D12  0E00               	movlw	0
 19694  003D14  6E04               	movwf	i2updateServoPosition@timer+1,c
 19695  003D16  0E03               	movlw	3
 19696  003D18  6E03               	movwf	i2updateServoPosition@timer,c
 19697  003D1A  ECE6  F028         	call	i2_updateServoPosition	;wreg free
 19698  003D1E  D00A               	goto	i2l10089
 19699  003D20                     i2l10087:
 19700                           
 19701                           ;sort.c: 612: updateServoPosition(1390, 3);
 19702  003D20  0E05               	movlw	5
 19703  003D22  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19704  003D24  0E6E               	movlw	110
 19705  003D26  6E01               	movwf	i2updateServoPosition@time_us,c
 19706  003D28  0E00               	movlw	0
 19707  003D2A  6E04               	movwf	i2updateServoPosition@timer+1,c
 19708  003D2C  0E03               	movlw	3
 19709  003D2E  6E03               	movwf	i2updateServoPosition@timer,c
 19710  003D30  ECE6  F028         	call	i2_updateServoPosition	;wreg free
 19711  003D34                     i2l10089:
 19712                           
 19713                           ;sort.c: 613: servo_timer_counter = 0;
 19714  003D34  0E00               	movlw	0
 19715  003D36  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19716  003D38  0E00               	movlw	0
 19717  003D3A  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19718  003D3C  D7D6               	goto	i2l10073
 19719  003D3E                     i2l10095:
 19720  003D3E  C06B  F009         	movff	_pan_servo_state,??_updateServoStates	;volatile
 19721  003D42  C06C  F00A         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 19722                           
 19723                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 19724                           ; Switch size 1, requested type "space"
 19725                           ; Number of cases is 4, Range of values is 1 to 9
 19726                           ; switch strategies available:
 19727                           ; Name         Instructions Cycles
 19728                           ; simple_byte           13     7 (average)
 19729                           ;	Chosen strategy is simple_byte
 19730  003D46  500A               	movf	??_updateServoStates+1,w,c
 19731  003D48  0A01               	xorlw	1	; case 1
 19732  003D4A  B4D8               	btfsc	status,2,c
 19733  003D4C  D00A               	goto	i2l10777
 19734  003D4E  0A02               	xorlw	2	; case 3
 19735  003D50  B4D8               	btfsc	status,2,c
 19736  003D52  D00C               	goto	i2l10779
 19737  003D54  0A05               	xorlw	5	; case 6
 19738  003D56  B4D8               	btfsc	status,2,c
 19739  003D58  D00E               	goto	i2l10781
 19740  003D5A  0A0F               	xorlw	15	; case 9
 19741  003D5C  B4D8               	btfsc	status,2,c
 19742  003D5E  D010               	goto	i2l10783
 19743  003D60  D013               	goto	i2l10097
 19744  003D62                     i2l10777:
 19745                           
 19746                           ; Switch size 1, requested type "space"
 19747                           ; Number of cases is 1, Range of values is 244 to 244
 19748                           ; switch strategies available:
 19749                           ; Name         Instructions Cycles
 19750                           ; simple_byte            4     3 (average)
 19751                           ;	Chosen strategy is simple_byte
 19752  003D62  5009               	movf	??_updateServoStates,w,c
 19753  003D64  0AF4               	xorlw	244	; case 244
 19754  003D66  B4D8               	btfsc	status,2,c
 19755  003D68  D7B5               	goto	i2l10069
 19756  003D6A  D00E               	goto	i2l10097
 19757  003D6C                     i2l10779:
 19758                           
 19759                           ; Switch size 1, requested type "space"
 19760                           ; Number of cases is 1, Range of values is 82 to 82
 19761                           ; switch strategies available:
 19762                           ; Name         Instructions Cycles
 19763                           ; simple_byte            4     3 (average)
 19764                           ;	Chosen strategy is simple_byte
 19765  003D6C  5009               	movf	??_updateServoStates,w,c
 19766  003D6E  0A52               	xorlw	82	; case 82
 19767  003D70  B4D8               	btfsc	status,2,c
 19768  003D72  D7C0               	goto	i2l10075
 19769  003D74  D009               	goto	i2l10097
 19770  003D76                     i2l10781:
 19771                           
 19772                           ; Switch size 1, requested type "space"
 19773                           ; Number of cases is 1, Range of values is 134 to 134
 19774                           ; switch strategies available:
 19775                           ; Name         Instructions Cycles
 19776                           ; simple_byte            4     3 (average)
 19777                           ;	Chosen strategy is simple_byte
 19778  003D76  5009               	movf	??_updateServoStates,w,c
 19779  003D78  0A86               	xorlw	134	; case 134
 19780  003D7A  B4D8               	btfsc	status,2,c
 19781  003D7C  D7C6               	goto	i2l10081
 19782  003D7E  D004               	goto	i2l10097
 19783  003D80                     i2l10783:
 19784                           
 19785                           ; Switch size 1, requested type "space"
 19786                           ; Number of cases is 1, Range of values is 96 to 96
 19787                           ; switch strategies available:
 19788                           ; Name         Instructions Cycles
 19789                           ; simple_byte            4     3 (average)
 19790                           ;	Chosen strategy is simple_byte
 19791  003D80  5009               	movf	??_updateServoStates,w,c
 19792  003D82  0A60               	xorlw	96	; case 96
 19793  003D84  B4D8               	btfsc	status,2,c
 19794  003D86  D7CC               	goto	i2l10087
 19795  003D88                     i2l10097:
 19796                           
 19797                           ;sort.c: 619: f_panning_to_bin = 0;
 19798  003D88  0E00               	movlw	0
 19799  003D8A  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
 19800  003D8C  0E00               	movlw	0
 19801  003D8E  6E69               	movwf	_f_panning_to_bin,c	;volatile
 19802                           
 19803                           ;sort.c: 620: }
 19804  003D90  0012               	return	
 19805  003D92                     i2l10099:
 19806                           
 19807                           ;sort.c: 621: else if(pan_servo_state == 1200){
 19808  003D92  0EB0               	movlw	176
 19809  003D94  186B               	xorwf	_pan_servo_state,w,c	;volatile
 19810  003D96  E15A               	bnz	i2l10129
 19811  003D98  0E04               	movlw	4
 19812  003D9A  186C               	xorwf	_pan_servo_state+1,w,c	;volatile
 19813  003D9C  A4D8               	btfss	status,2,c
 19814  003D9E  D056               	goto	i2l10129
 19815                           
 19816                           ;sort.c: 623: servo_timer_counter = 0;
 19817  003DA0  0E00               	movlw	0
 19818  003DA2  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19819  003DA4  0E00               	movlw	0
 19820  003DA6  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19821                           
 19822                           ;sort.c: 624: }
 19823  003DA8  0012               	return	
 19824  003DAA                     i2l10103:
 19825                           
 19826                           ;sort.c: 629: updateServoPosition(1050, 3);
 19827  003DAA  0E04               	movlw	4
 19828  003DAC  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19829  003DAE  0E1A               	movlw	26
 19830  003DB0  6E01               	movwf	i2updateServoPosition@time_us,c
 19831  003DB2  0E00               	movlw	0
 19832  003DB4  6E04               	movwf	i2updateServoPosition@timer+1,c
 19833  003DB6  0E03               	movlw	3
 19834  003DB8  6E03               	movwf	i2updateServoPosition@timer,c
 19835  003DBA  ECE6  F028         	call	i2_updateServoPosition	;wreg free
 19836                           
 19837                           ;sort.c: 630: servo_timer_counter = 0;
 19838  003DBE  0E00               	movlw	0
 19839  003DC0  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19840  003DC2  0E00               	movlw	0
 19841  003DC4  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19842                           
 19843                           ;sort.c: 631: servo_timer_target = 750;
 19844  003DC6  0E02               	movlw	2
 19845  003DC8  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19846  003DCA  0EEE               	movlw	238
 19847  003DCC  6E6F               	movwf	_servo_timer_target,c	;volatile
 19848                           
 19849                           ;sort.c: 632: break;
 19850  003DCE  0012               	return	
 19851  003DD0                     i2l10109:
 19852                           
 19853                           ;sort.c: 634: updateServoPosition(1050, 3);
 19854  003DD0  0E04               	movlw	4
 19855  003DD2  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19856  003DD4  0E1A               	movlw	26
 19857  003DD6  6E01               	movwf	i2updateServoPosition@time_us,c
 19858  003DD8  0E00               	movlw	0
 19859  003DDA  6E04               	movwf	i2updateServoPosition@timer+1,c
 19860  003DDC  0E03               	movlw	3
 19861  003DDE  6E03               	movwf	i2updateServoPosition@timer,c
 19862  003DE0  ECE6  F028         	call	i2_updateServoPosition	;wreg free
 19863                           
 19864                           ;sort.c: 635: servo_timer_counter = 0;
 19865  003DE4  0E00               	movlw	0
 19866  003DE6  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19867  003DE8  0E00               	movlw	0
 19868  003DEA  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19869                           
 19870                           ;sort.c: 636: servo_timer_target = 750;
 19871  003DEC  0E02               	movlw	2
 19872  003DEE  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19873  003DF0  0EEE               	movlw	238
 19874  003DF2  6E6F               	movwf	_servo_timer_target,c	;volatile
 19875                           
 19876                           ;sort.c: 637: break;
 19877  003DF4  0012               	return	
 19878  003DF6                     i2l10115:
 19879                           
 19880                           ;sort.c: 640: updateServoPosition(1200, 1);
 19881  003DF6  0E04               	movlw	4
 19882  003DF8  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19883  003DFA  0EB0               	movlw	176
 19884  003DFC  6E01               	movwf	i2updateServoPosition@time_us,c
 19885  003DFE  0E00               	movlw	0
 19886  003E00  6E04               	movwf	i2updateServoPosition@timer+1,c
 19887  003E02  0E01               	movlw	1
 19888  003E04  6E03               	movwf	i2updateServoPosition@timer,c
 19889  003E06  ECE6  F028         	call	i2_updateServoPosition	;wreg free
 19890                           
 19891                           ;sort.c: 641: updateServoPosition(1050, 3);
 19892  003E0A  0E04               	movlw	4
 19893  003E0C  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19894  003E0E  0E1A               	movlw	26
 19895  003E10  6E01               	movwf	i2updateServoPosition@time_us,c
 19896  003E12  0E00               	movlw	0
 19897  003E14  6E04               	movwf	i2updateServoPosition@timer+1,c
 19898  003E16  0E03               	movlw	3
 19899  003E18  6E03               	movwf	i2updateServoPosition@timer,c
 19900  003E1A  ECE6  F028         	call	i2_updateServoPosition	;wreg free
 19901                           
 19902                           ;sort.c: 642: servo_timer_counter = 0;
 19903  003E1E  0E00               	movlw	0
 19904  003E20  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19905  003E22  0E00               	movlw	0
 19906  003E24  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19907                           
 19908                           ;sort.c: 643: servo_timer_target = 9999;
 19909  003E26  0E27               	movlw	39
 19910  003E28  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19911  003E2A  0E0F               	movlw	15
 19912  003E2C  6E6F               	movwf	_servo_timer_target,c	;volatile
 19913                           
 19914                           ;sort.c: 645: f_can_distributed = 1;
 19915  003E2E  0E00               	movlw	0
 19916  003E30  0101               	movlb	1	; () banked
 19917  003E32  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
 19918  003E34  0E01               	movlw	1
 19919  003E36  6F35               	movwf	_f_can_distributed& (0+255),b
 19920                           
 19921                           ; BSR set to: 1
 19922                           ;sort.c: 646: if(f_lastCan == 1){
 19923  003E38  0100               	movlb	0	; () banked
 19924  003E3A  05EA               	decf	_f_lastCan& (0+255),w,b
 19925  003E3C  0100               	movlb	0	; () banked
 19926  003E3E  11EB               	iorwf	(_f_lastCan+1)& (0+255),w,b
 19927  003E40  A4D8               	btfss	status,2,c
 19928  003E42  0012               	return	
 19929                           
 19930                           ; BSR set to: 0
 19931                           ;sort.c: 647: machine_state = DoneSorting_state;
 19932  003E44  0E02               	movlw	2
 19933  003E46  0100               	movlb	0	; () banked
 19934  003E48  6FFC               	movwf	_machine_state& (0+255),b
 19935                           
 19936                           ; BSR set to: 0
 19937                           ;sort.c: 653: }
 19938                           
 19939                           ; BSR set to: 0
 19940                           ;sort.c: 652: break;
 19941                           
 19942                           ;sort.c: 651: default:
 19943                           
 19944                           ; BSR set to: 0
 19945                           ;sort.c: 648: }
 19946                           ;sort.c: 649: break;
 19947  003E4A  0012               	return	
 19948  003E4C                     i2l10129:
 19949  003E4C  C071  F009         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 19950  003E50  C072  F00A         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 19951                           
 19952                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 19953                           ; Switch size 1, requested type "space"
 19954                           ; Number of cases is 2, Range of values is 4 to 5
 19955                           ; switch strategies available:
 19956                           ; Name         Instructions Cycles
 19957                           ; simple_byte            7     4 (average)
 19958                           ;	Chosen strategy is simple_byte
 19959  003E54  500A               	movf	??_updateServoStates+1,w,c
 19960  003E56  0A04               	xorlw	4	; case 4
 19961  003E58  B4D8               	btfsc	status,2,c
 19962  003E5A  D004               	goto	i2l10785
 19963  003E5C  0A01               	xorlw	1	; case 5
 19964  003E5E  A4D8               	btfss	status,2,c
 19965  003E60  0012               	return	
 19966  003E62  D008               	goto	i2l10787
 19967  003E64                     i2l10785:
 19968                           
 19969                           ; Switch size 1, requested type "space"
 19970                           ; Number of cases is 2, Range of values is 26 to 236
 19971                           ; switch strategies available:
 19972                           ; Name         Instructions Cycles
 19973                           ; simple_byte            7     4 (average)
 19974                           ;	Chosen strategy is simple_byte
 19975  003E64  5009               	movf	??_updateServoStates,w,c
 19976  003E66  0A1A               	xorlw	26	; case 26
 19977  003E68  B4D8               	btfsc	status,2,c
 19978  003E6A  D7C5               	goto	i2l10115
 19979  003E6C  0AF6               	xorlw	246	; case 236
 19980  003E6E  A4D8               	btfss	status,2,c
 19981  003E70  0012               	return	
 19982  003E72  D79B               	goto	i2l10103
 19983  003E74                     i2l10787:
 19984                           
 19985                           ; Switch size 1, requested type "space"
 19986                           ; Number of cases is 1, Range of values is 110 to 110
 19987                           ; switch strategies available:
 19988                           ; Name         Instructions Cycles
 19989                           ; simple_byte            4     3 (average)
 19990                           ;	Chosen strategy is simple_byte
 19991  003E74  5009               	movf	??_updateServoStates,w,c
 19992  003E76  0A6E               	xorlw	110	; case 110
 19993  003E78  A4D8               	btfss	status,2,c
 19994  003E7A  0012               	return	
 19995  003E7C  D7A9               	goto	i2l10109
 19996  003E7E                     __end_of_updateServoStates:
 19997                           	opt stack 0
 19998                           pclatu	equ	0xFFB
 19999                           pclath	equ	0xFFA
 20000                           tblptru	equ	0xFF8
 20001                           tblptrh	equ	0xFF7
 20002                           tblptrl	equ	0xFF6
 20003                           tablat	equ	0xFF5
 20004                           prodh	equ	0xFF4
 20005                           prodl	equ	0xFF3
 20006                           intcon	equ	0xFF2
 20007                           intcon2	equ	0xFF1
 20008                           intcon3	equ	0xFF0
 20009                           indf0	equ	0xFEF
 20010                           postinc0	equ	0xFEE
 20011                           fsr0h	equ	0xFEA
 20012                           fsr0l	equ	0xFE9
 20013                           wreg	equ	0xFE8
 20014                           postdec1	equ	0xFE5
 20015                           fsr1h	equ	0xFE2
 20016                           fsr1l	equ	0xFE1
 20017                           indf2	equ	0xFDF
 20018                           postinc2	equ	0xFDE
 20019                           postdec2	equ	0xFDD
 20020                           fsr2h	equ	0xFDA
 20021                           fsr2l	equ	0xFD9
 20022                           status	equ	0xFD8
 20023                           
 20024 ;; *************** function i2_updateServoPosition *****************
 20025 ;; Defined at:
 20026 ;;		line 573 in file "sort.c"
 20027 ;; Parameters:    Size  Location     Type
 20028 ;;  time_us         2    0[COMRAM] int 
 20029 ;;  timer           2    2[COMRAM] int 
 20030 ;; Auto vars:     Size  Location     Type
 20031 ;;  updateServoP    2    6[COMRAM] unsigned int 
 20032 ;; Return value:  Size  Location     Type
 20033 ;;                  1    wreg      void 
 20034 ;; Registers used:
 20035 ;;		wreg, status,2, status,0
 20036 ;; Tracked objects:
 20037 ;;		On entry : 0/0
 20038 ;;		On exit  : 0/0
 20039 ;;		Unchanged: 0/0
 20040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20041 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20042 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20043 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20044 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20045 ;;Total ram usage:        8 bytes
 20046 ;; Hardware stack levels used:    1
 20047 ;; This function calls:
 20048 ;;		Nothing
 20049 ;; This function is called by:
 20050 ;;		_updateServoStates
 20051 ;; This function uses a non-reentrant model
 20052 ;;
 20053                           
 20054                           	psect	text66
 20055  0051CC                     __ptext66:
 20056                           	opt stack 0
 20057  0051CC                     i2_updateServoPosition:
 20058                           	opt stack 22
 20059                           
 20060                           ;sort.c: 574: unsigned int my_time = 65535 - time_us;
 20061                           
 20062                           ;incstack = 0
 20063  0051CC  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 20064  0051D0  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 20065  0051D4  1E05               	comf	??i2_updateServoPosition,f,c
 20066  0051D6  1E06               	comf	??i2_updateServoPosition+1,f,c
 20067  0051D8  4A05               	infsnz	??i2_updateServoPosition,f,c
 20068  0051DA  2A06               	incf	??i2_updateServoPosition+1,f,c
 20069  0051DC  0EFF               	movlw	255
 20070  0051DE  2405               	addwf	??i2_updateServoPosition,w,c
 20071  0051E0  6E07               	movwf	i2updateServoPosition@my_time,c
 20072  0051E2  0EFF               	movlw	255
 20073  0051E4  2006               	addwfc	??i2_updateServoPosition+1,w,c
 20074  0051E6  6E08               	movwf	i2updateServoPosition@my_time+1,c
 20075                           
 20076                           ;sort.c: 575: switch(timer){
 20077  0051E8  D015               	goto	i2l9255
 20078  0051EA                     i2l9249:
 20079                           
 20080                           ;sort.c: 577: servoTimes[0] = my_time >> 8;
 20081  0051EA  5008               	movf	i2updateServoPosition@my_time+1,w,c
 20082  0051EC  6E5B               	movwf	_servoTimes,c
 20083  0051EE  6A5C               	clrf	_servoTimes+1,c
 20084                           
 20085                           ;sort.c: 578: servoTimes[1] = my_time & 0xFF;
 20086  0051F0  5007               	movf	i2updateServoPosition@my_time,w,c
 20087  0051F2  6E5D               	movwf	_servoTimes+2,c
 20088  0051F4  6A5E               	clrf	_servoTimes+3,c
 20089                           
 20090                           ;sort.c: 580: pan_servo_state = time_us;
 20091  0051F6  C001  F06B         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 20092  0051FA  C002  F06C         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 20093  0051FE                     i2l922:
 20094                           
 20095                           ;sort.c: 582: servoTimes[2] = my_time >> 8;
 20096  0051FE  5008               	movf	i2updateServoPosition@my_time+1,w,c
 20097  005200  6E5F               	movwf	_servoTimes+4,c
 20098  005202  6A60               	clrf	_servoTimes+5,c
 20099                           
 20100                           ;sort.c: 583: servoTimes[3] = my_time & 0xFF;
 20101  005204  5007               	movf	i2updateServoPosition@my_time,w,c
 20102  005206  6E61               	movwf	_servoTimes+6,c
 20103  005208  6A62               	clrf	_servoTimes+7,c
 20104                           
 20105                           ;sort.c: 585: tilt_servo_state = time_us;
 20106  00520A  C001  F071         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 20107  00520E  C002  F072         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 20108                           
 20109                           ;sort.c: 586: }
 20110  005212  0012               	return	
 20111  005214                     i2l9255:
 20112  005214  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 20113  005218  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 20114                           
 20115                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20116                           ; Switch size 1, requested type "space"
 20117                           ; Number of cases is 1, Range of values is 0 to 0
 20118                           ; switch strategies available:
 20119                           ; Name         Instructions Cycles
 20120                           ; simple_byte            4     3 (average)
 20121                           ;	Chosen strategy is simple_byte
 20122  00521C  5006               	movf	??i2_updateServoPosition+1,w,c
 20123  00521E  0A00               	xorlw	0	; case 0
 20124  005220  A4D8               	btfss	status,2,c
 20125  005222  0012               	return	
 20126                           
 20127                           ; Switch size 1, requested type "space"
 20128                           ; Number of cases is 2, Range of values is 1 to 3
 20129                           ; switch strategies available:
 20130                           ; Name         Instructions Cycles
 20131                           ; simple_byte            7     4 (average)
 20132                           ;	Chosen strategy is simple_byte
 20133  005224  5005               	movf	??i2_updateServoPosition,w,c
 20134  005226  0A01               	xorlw	1	; case 1
 20135  005228  B4D8               	btfsc	status,2,c
 20136  00522A  D7DF               	goto	i2l9249
 20137  00522C  0A02               	xorlw	2	; case 3
 20138  00522E  A4D8               	btfss	status,2,c
 20139  005230  0012               	return	
 20140  005232  D7E5               	goto	i2l922
 20141  005234                     __end_ofi2_updateServoPosition:
 20142                           	opt stack 0
 20143                           pclatu	equ	0xFFB
 20144                           pclath	equ	0xFFA
 20145                           tblptru	equ	0xFF8
 20146                           tblptrh	equ	0xFF7
 20147                           tblptrl	equ	0xFF6
 20148                           tablat	equ	0xFF5
 20149                           prodh	equ	0xFF4
 20150                           prodl	equ	0xFF3
 20151                           intcon	equ	0xFF2
 20152                           intcon2	equ	0xFF1
 20153                           intcon3	equ	0xFF0
 20154                           indf0	equ	0xFEF
 20155                           postinc0	equ	0xFEE
 20156                           fsr0h	equ	0xFEA
 20157                           fsr0l	equ	0xFE9
 20158                           wreg	equ	0xFE8
 20159                           postdec1	equ	0xFE5
 20160                           fsr1h	equ	0xFE2
 20161                           fsr1l	equ	0xFE1
 20162                           indf2	equ	0xFDF
 20163                           postinc2	equ	0xFDE
 20164                           postdec2	equ	0xFDD
 20165                           fsr2h	equ	0xFDA
 20166                           fsr2l	equ	0xFD9
 20167                           status	equ	0xFD8
 20168                           
 20169 ;; *************** function _updateMenu *****************
 20170 ;; Defined at:
 20171 ;;		line 216 in file "UI.c"
 20172 ;; Parameters:    Size  Location     Type
 20173 ;;		None
 20174 ;; Auto vars:     Size  Location     Type
 20175 ;;		None
 20176 ;; Return value:  Size  Location     Type
 20177 ;;                  1    wreg      void 
 20178 ;; Registers used:
 20179 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20180 ;; Tracked objects:
 20181 ;;		On entry : 0/0
 20182 ;;		On exit  : 0/0
 20183 ;;		Unchanged: 0/0
 20184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20187 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20188 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20189 ;;Total ram usage:        2 bytes
 20190 ;; Hardware stack levels used:    1
 20191 ;; Hardware stack levels required when called:    5
 20192 ;; This function calls:
 20193 ;;		_change_state_to_logs_11
 20194 ;;		_change_state_to_logs_12
 20195 ;;		_change_state_to_logs_22
 20196 ;;		_change_state_to_logs_23
 20197 ;;		_change_state_to_logs_33
 20198 ;;		_change_state_to_logs_34
 20199 ;;		_change_state_to_menu_11
 20200 ;;		_change_state_to_menu_23
 20201 ;;		_dispLogs
 20202 ;;		_inputHandler
 20203 ;;		i2_change_state_to_menu_12
 20204 ;;		i2_change_state_to_menu_22
 20205 ;;		i2_change_state_to_menu_start
 20206 ;; This function is called by:
 20207 ;;		_handler
 20208 ;; This function uses a non-reentrant model
 20209 ;;
 20210                           
 20211                           	psect	text67
 20212  0033EA                     __ptext67:
 20213                           	opt stack 0
 20214  0033EA                     _updateMenu:
 20215                           	opt stack 18
 20216                           
 20217                           ;UI.c: 217: up = 0; down = 0; enter = 0; back = 0;
 20218                           
 20219                           ;incstack = 0
 20220  0033EA  0E00               	movlw	0
 20221  0033EC  6E76               	movwf	_up+1,c
 20222  0033EE  0E00               	movlw	0
 20223  0033F0  6E75               	movwf	_up,c
 20224  0033F2  0E00               	movlw	0
 20225  0033F4  6E66               	movwf	_down+1,c
 20226  0033F6  0E00               	movlw	0
 20227  0033F8  6E65               	movwf	_down,c
 20228  0033FA  0E00               	movlw	0
 20229  0033FC  6E68               	movwf	_enter+1,c
 20230  0033FE  0E00               	movlw	0
 20231  003400  6E67               	movwf	_enter,c
 20232  003402  0E00               	movlw	0
 20233  003404  6E64               	movwf	_back+1,c
 20234  003406  0E00               	movlw	0
 20235  003408  6E63               	movwf	_back,c
 20236                           
 20237                           ;UI.c: 218: (INTCONbits.GIE = 0);
 20238  00340A  9EF2               	bcf	intcon,7,c	;volatile
 20239                           
 20240                           ;UI.c: 220: if (inputHandler()
 20241                           ;UI.c: 223: ){
 20242  00340C  EC70  F01C         	call	_inputHandler	;wreg free
 20243  003410  502A               	movf	?_inputHandler,w,c
 20244  003412  102B               	iorwf	?_inputHandler+1,w,c
 20245  003414  A4D8               	btfss	status,2,c
 20246  003416  D112               	goto	i2l9789
 20247  003418  D146               	goto	i2l268
 20248  00341A                     i2l9641:
 20249                           
 20250                           ;UI.c: 227: change_state_to_menu_11();
 20251  00341A  EC7B  F02C         	call	_change_state_to_menu_11	;wreg free
 20252                           
 20253                           ;UI.c: 228: break;
 20254  00341E  D143               	goto	i2l268
 20255  003420                     i2l9643:
 20256                           
 20257                           ;UI.c: 231: if(up){
 20258  003420  5075               	movf	_up,w,c
 20259  003422  1076               	iorwf	_up+1,w,c
 20260  003424  B4D8               	btfsc	status,2,c
 20261  003426  D003               	goto	i2l9647
 20262                           
 20263                           ;UI.c: 232: change_state_to_menu_23();
 20264  003428  EC63  F02C         	call	_change_state_to_menu_23	;wreg free
 20265                           
 20266                           ;UI.c: 233: }
 20267  00342C  D13C               	goto	i2l268
 20268  00342E                     i2l9647:
 20269                           
 20270                           ;UI.c: 234: else if(down){
 20271  00342E  5065               	movf	_down,w,c
 20272  003430  1066               	iorwf	_down+1,w,c
 20273  003432  B4D8               	btfsc	status,2,c
 20274  003434  D003               	goto	i2l9651
 20275                           
 20276                           ;UI.c: 235: change_state_to_menu_12();
 20277  003436  EC4B  F02C         	call	i2_change_state_to_menu_12	;wreg free
 20278                           
 20279                           ;UI.c: 236: }
 20280  00343A  D135               	goto	i2l268
 20281  00343C                     i2l9651:
 20282                           
 20283                           ;UI.c: 237: else if(enter){
 20284  00343C  5067               	movf	_enter,w,c
 20285  00343E  1068               	iorwf	_enter+1,w,c
 20286  003440  B4D8               	btfsc	status,2,c
 20287  003442  D131               	goto	i2l268
 20288                           
 20289                           ;UI.c: 238: change_state_to_menu_start();
 20290  003444  EC8E  F02D         	call	i2_change_state_to_menu_start	;wreg free
 20291                           
 20292                           ;UI.c: 239: }
 20293                           ;UI.c: 240: break;
 20294  003448  D12E               	goto	i2l268
 20295  00344A                     i2l9655:
 20296                           
 20297                           ;UI.c: 243: if(up){
 20298  00344A  5075               	movf	_up,w,c
 20299  00344C  1076               	iorwf	_up+1,w,c
 20300  00344E  B4D8               	btfsc	status,2,c
 20301  003450  D003               	goto	i2l9659
 20302                           
 20303                           ;UI.c: 244: change_state_to_menu_11();
 20304  003452  EC7B  F02C         	call	_change_state_to_menu_11	;wreg free
 20305                           
 20306                           ;UI.c: 245: }
 20307  003456  D127               	goto	i2l268
 20308  003458                     i2l9659:
 20309                           
 20310                           ;UI.c: 246: else if(down){
 20311  003458  5065               	movf	_down,w,c
 20312  00345A  1066               	iorwf	_down+1,w,c
 20313  00345C  B4D8               	btfsc	status,2,c
 20314  00345E  D011               	goto	i2l9675
 20315                           
 20316                           ;UI.c: 247: change_state_to_menu_23();
 20317  003460  EC63  F02C         	call	_change_state_to_menu_23	;wreg free
 20318                           
 20319                           ;UI.c: 248: }
 20320  003464  D120               	goto	i2l268
 20321  003466                     i2l9667:
 20322                           
 20323                           ;UI.c: 255: if(up){
 20324  003466  5075               	movf	_up,w,c
 20325  003468  1076               	iorwf	_up+1,w,c
 20326  00346A  B4D8               	btfsc	status,2,c
 20327  00346C  D003               	goto	i2l9671
 20328                           
 20329                           ;UI.c: 256: change_state_to_menu_11();
 20330  00346E  EC7B  F02C         	call	_change_state_to_menu_11	;wreg free
 20331                           
 20332                           ;UI.c: 257: }
 20333  003472  D119               	goto	i2l268
 20334  003474                     i2l9671:
 20335                           
 20336                           ;UI.c: 258: else if(down){
 20337  003474  5065               	movf	_down,w,c
 20338  003476  1066               	iorwf	_down+1,w,c
 20339  003478  B4D8               	btfsc	status,2,c
 20340  00347A  D003               	goto	i2l9675
 20341                           
 20342                           ;UI.c: 259: change_state_to_menu_23();
 20343  00347C  EC63  F02C         	call	_change_state_to_menu_23	;wreg free
 20344                           
 20345                           ;UI.c: 260: }
 20346  003480  D112               	goto	i2l268
 20347  003482                     i2l9675:
 20348                           
 20349                           ;UI.c: 261: else if(enter){
 20350  003482  5067               	movf	_enter,w,c
 20351  003484  1068               	iorwf	_enter+1,w,c
 20352  003486  B4D8               	btfsc	status,2,c
 20353  003488  D10E               	goto	i2l268
 20354                           
 20355                           ;UI.c: 262: machine_state = Sorting_state;
 20356  00348A  0E01               	movlw	1
 20357  00348C  0100               	movlb	0	; () banked
 20358  00348E  6FFC               	movwf	_machine_state& (0+255),b
 20359                           
 20360                           ; BSR set to: 0
 20361                           ;UI.c: 263: }
 20362                           ;UI.c: 264: break;
 20363                           
 20364                           ; BSR set to: 0
 20365                           
 20366                           ; BSR set to: 0
 20367  003490  D10A               	goto	i2l268
 20368  003492                     i2l9679:
 20369                           
 20370                           ;UI.c: 267: if(up){
 20371  003492  5075               	movf	_up,w,c
 20372  003494  1076               	iorwf	_up+1,w,c
 20373  003496  B4D8               	btfsc	status,2,c
 20374  003498  D003               	goto	i2l9683
 20375                           
 20376                           ;UI.c: 268: change_state_to_menu_22();
 20377  00349A  EC33  F02C         	call	i2_change_state_to_menu_22	;wreg free
 20378                           
 20379                           ;UI.c: 269: }
 20380  00349E  D103               	goto	i2l268
 20381  0034A0                     i2l9683:
 20382                           
 20383                           ;UI.c: 270: else if(down){
 20384  0034A0  5065               	movf	_down,w,c
 20385  0034A2  1066               	iorwf	_down+1,w,c
 20386  0034A4  B4D8               	btfsc	status,2,c
 20387  0034A6  D003               	goto	i2l9687
 20388                           
 20389                           ;UI.c: 271: change_state_to_menu_11();
 20390  0034A8  EC7B  F02C         	call	_change_state_to_menu_11	;wreg free
 20391                           
 20392                           ;UI.c: 272: }
 20393  0034AC  D0FC               	goto	i2l268
 20394  0034AE                     i2l9687:
 20395                           
 20396                           ;UI.c: 273: else if(enter){
 20397  0034AE  5067               	movf	_enter,w,c
 20398  0034B0  1068               	iorwf	_enter+1,w,c
 20399  0034B2  B4D8               	btfsc	status,2,c
 20400  0034B4  D0F8               	goto	i2l268
 20401                           
 20402                           ;UI.c: 274: change_state_to_logs_11();
 20403  0034B6  ECF3  F02C         	call	_change_state_to_logs_11	;wreg free
 20404                           
 20405                           ;UI.c: 275: }
 20406                           ;UI.c: 276: break;
 20407  0034BA  D0F5               	goto	i2l268
 20408  0034BC                     i2l9691:
 20409                           
 20410                           ;UI.c: 279: if(up){
 20411  0034BC  5075               	movf	_up,w,c
 20412  0034BE  1076               	iorwf	_up+1,w,c
 20413  0034C0  B4D8               	btfsc	status,2,c
 20414  0034C2  D003               	goto	i2l9695
 20415                           
 20416                           ;UI.c: 280: change_state_to_logs_34();
 20417  0034C4  EC93  F02C         	call	_change_state_to_logs_34	;wreg free
 20418                           
 20419                           ;UI.c: 281: }
 20420  0034C8  D0EE               	goto	i2l268
 20421  0034CA                     i2l9695:
 20422                           
 20423                           ;UI.c: 282: else if(down){
 20424  0034CA  5065               	movf	_down,w,c
 20425  0034CC  1066               	iorwf	_down+1,w,c
 20426  0034CE  B4D8               	btfsc	status,2,c
 20427  0034D0  D003               	goto	i2l9699
 20428                           
 20429                           ;UI.c: 283: change_state_to_logs_12();
 20430  0034D2  ECDB  F02C         	call	_change_state_to_logs_12	;wreg free
 20431                           
 20432                           ;UI.c: 284: }
 20433  0034D6  D0E7               	goto	i2l268
 20434  0034D8                     i2l9699:
 20435                           
 20436                           ;UI.c: 285: else if(enter){
 20437  0034D8  5067               	movf	_enter,w,c
 20438  0034DA  1068               	iorwf	_enter+1,w,c
 20439  0034DC  B4D8               	btfsc	status,2,c
 20440  0034DE  D007               	goto	i2l9703
 20441                           
 20442                           ;UI.c: 286: dispLogs(1);
 20443  0034E0  0E00               	movlw	0
 20444  0034E2  6E13               	movwf	dispLogs@myLog+1,c
 20445  0034E4  0E01               	movlw	1
 20446  0034E6  6E12               	movwf	dispLogs@myLog,c
 20447  0034E8  ECC8  F02D         	call	_dispLogs	;wreg free
 20448                           
 20449                           ;UI.c: 287: }
 20450  0034EC  D0DC               	goto	i2l268
 20451  0034EE                     i2l9703:
 20452                           
 20453                           ;UI.c: 288: else if(back){
 20454  0034EE  5063               	movf	_back,w,c
 20455  0034F0  1064               	iorwf	_back+1,w,c
 20456  0034F2  B4D8               	btfsc	status,2,c
 20457  0034F4  D0D8               	goto	i2l268
 20458                           
 20459                           ;UI.c: 289: change_state_to_menu_23();
 20460  0034F6  EC63  F02C         	call	_change_state_to_menu_23	;wreg free
 20461                           
 20462                           ;UI.c: 290: }
 20463                           ;UI.c: 291: break;
 20464  0034FA  D0D5               	goto	i2l268
 20465  0034FC                     i2l9707:
 20466                           
 20467                           ;UI.c: 294: if(up){
 20468  0034FC  5075               	movf	_up,w,c
 20469  0034FE  1076               	iorwf	_up+1,w,c
 20470  003500  B4D8               	btfsc	status,2,c
 20471  003502  D003               	goto	i2l9711
 20472                           
 20473                           ;UI.c: 295: change_state_to_logs_11();
 20474  003504  ECF3  F02C         	call	_change_state_to_logs_11	;wreg free
 20475                           
 20476                           ;UI.c: 296: }
 20477  003508  D0CE               	goto	i2l268
 20478  00350A                     i2l9711:
 20479                           
 20480                           ;UI.c: 297: else if(down){
 20481  00350A  5065               	movf	_down,w,c
 20482  00350C  1066               	iorwf	_down+1,w,c
 20483  00350E  B4D8               	btfsc	status,2,c
 20484  003510  D003               	goto	i2l9715
 20485                           
 20486                           ;UI.c: 298: change_state_to_logs_23();
 20487  003512  EC22  F02D         	call	_change_state_to_logs_23	;wreg free
 20488                           
 20489                           ;UI.c: 299: }
 20490  003516  D0C7               	goto	i2l268
 20491  003518                     i2l9715:
 20492                           
 20493                           ;UI.c: 300: else if(enter){
 20494  003518  5067               	movf	_enter,w,c
 20495  00351A  1068               	iorwf	_enter+1,w,c
 20496  00351C  B4D8               	btfsc	status,2,c
 20497  00351E  D007               	goto	i2l9719
 20498                           
 20499                           ;UI.c: 301: dispLogs(2);
 20500  003520  0E00               	movlw	0
 20501  003522  6E13               	movwf	dispLogs@myLog+1,c
 20502  003524  0E02               	movlw	2
 20503  003526  6E12               	movwf	dispLogs@myLog,c
 20504  003528  ECC8  F02D         	call	_dispLogs	;wreg free
 20505                           
 20506                           ;UI.c: 302: }
 20507  00352C  D0BC               	goto	i2l268
 20508  00352E                     i2l9719:
 20509                           
 20510                           ;UI.c: 303: else if(back){
 20511  00352E  5063               	movf	_back,w,c
 20512  003530  1064               	iorwf	_back+1,w,c
 20513  003532  B4D8               	btfsc	status,2,c
 20514  003534  D0B8               	goto	i2l268
 20515                           
 20516                           ;UI.c: 304: change_state_to_menu_23();
 20517  003536  EC63  F02C         	call	_change_state_to_menu_23	;wreg free
 20518                           
 20519                           ;UI.c: 305: }
 20520                           ;UI.c: 306: break;
 20521  00353A  D0B5               	goto	i2l268
 20522  00353C                     i2l9723:
 20523                           
 20524                           ;UI.c: 309: if(up){
 20525  00353C  5075               	movf	_up,w,c
 20526  00353E  1076               	iorwf	_up+1,w,c
 20527  003540  B4D8               	btfsc	status,2,c
 20528  003542  D003               	goto	i2l9727
 20529                           
 20530                           ;UI.c: 310: change_state_to_logs_11();
 20531  003544  ECF3  F02C         	call	_change_state_to_logs_11	;wreg free
 20532                           
 20533                           ;UI.c: 311: }
 20534  003548  D0AE               	goto	i2l268
 20535  00354A                     i2l9727:
 20536                           
 20537                           ;UI.c: 312: else if(down){
 20538  00354A  5065               	movf	_down,w,c
 20539  00354C  1066               	iorwf	_down+1,w,c
 20540  00354E  B4D8               	btfsc	status,2,c
 20541  003550  D003               	goto	i2l9731
 20542                           
 20543                           ;UI.c: 313: change_state_to_logs_23();
 20544  003552  EC22  F02D         	call	_change_state_to_logs_23	;wreg free
 20545                           
 20546                           ;UI.c: 314: }
 20547  003556  D0A7               	goto	i2l268
 20548  003558                     i2l9731:
 20549                           
 20550                           ;UI.c: 315: else if(enter){
 20551  003558  5067               	movf	_enter,w,c
 20552  00355A  1068               	iorwf	_enter+1,w,c
 20553  00355C  B4D8               	btfsc	status,2,c
 20554  00355E  D007               	goto	i2l9735
 20555                           
 20556                           ;UI.c: 316: dispLogs(2);
 20557  003560  0E00               	movlw	0
 20558  003562  6E13               	movwf	dispLogs@myLog+1,c
 20559  003564  0E02               	movlw	2
 20560  003566  6E12               	movwf	dispLogs@myLog,c
 20561  003568  ECC8  F02D         	call	_dispLogs	;wreg free
 20562                           
 20563                           ;UI.c: 317: }
 20564  00356C  D09C               	goto	i2l268
 20565  00356E                     i2l9735:
 20566                           
 20567                           ;UI.c: 318: else if(back){
 20568  00356E  5063               	movf	_back,w,c
 20569  003570  1064               	iorwf	_back+1,w,c
 20570  003572  B4D8               	btfsc	status,2,c
 20571  003574  D098               	goto	i2l268
 20572                           
 20573                           ;UI.c: 319: change_state_to_menu_23();
 20574  003576  EC63  F02C         	call	_change_state_to_menu_23	;wreg free
 20575                           
 20576                           ;UI.c: 320: }
 20577                           ;UI.c: 321: break;
 20578  00357A  D095               	goto	i2l268
 20579  00357C                     i2l9739:
 20580                           
 20581                           ;UI.c: 324: if(up){
 20582  00357C  5075               	movf	_up,w,c
 20583  00357E  1076               	iorwf	_up+1,w,c
 20584  003580  B4D8               	btfsc	status,2,c
 20585  003582  D003               	goto	i2l9743
 20586                           
 20587                           ;UI.c: 325: change_state_to_logs_22();
 20588  003584  ECC3  F02C         	call	_change_state_to_logs_22	;wreg free
 20589                           
 20590                           ;UI.c: 326: }
 20591  003588  D08E               	goto	i2l268
 20592  00358A                     i2l9743:
 20593                           
 20594                           ;UI.c: 327: else if(down){
 20595  00358A  5065               	movf	_down,w,c
 20596  00358C  1066               	iorwf	_down+1,w,c
 20597  00358E  B4D8               	btfsc	status,2,c
 20598  003590  D003               	goto	i2l9747
 20599                           
 20600                           ;UI.c: 328: change_state_to_logs_34();
 20601  003592  EC93  F02C         	call	_change_state_to_logs_34	;wreg free
 20602                           
 20603                           ;UI.c: 329: }
 20604  003596  D087               	goto	i2l268
 20605  003598                     i2l9747:
 20606                           
 20607                           ;UI.c: 330: else if(enter){
 20608  003598  5067               	movf	_enter,w,c
 20609  00359A  1068               	iorwf	_enter+1,w,c
 20610  00359C  B4D8               	btfsc	status,2,c
 20611  00359E  D007               	goto	i2l9751
 20612                           
 20613                           ;UI.c: 331: dispLogs(3);
 20614  0035A0  0E00               	movlw	0
 20615  0035A2  6E13               	movwf	dispLogs@myLog+1,c
 20616  0035A4  0E03               	movlw	3
 20617  0035A6  6E12               	movwf	dispLogs@myLog,c
 20618  0035A8  ECC8  F02D         	call	_dispLogs	;wreg free
 20619                           
 20620                           ;UI.c: 332: }
 20621  0035AC  D07C               	goto	i2l268
 20622  0035AE                     i2l9751:
 20623                           
 20624                           ;UI.c: 333: else if(back){
 20625  0035AE  5063               	movf	_back,w,c
 20626  0035B0  1064               	iorwf	_back+1,w,c
 20627  0035B2  B4D8               	btfsc	status,2,c
 20628  0035B4  D078               	goto	i2l268
 20629                           
 20630                           ;UI.c: 334: change_state_to_menu_23();
 20631  0035B6  EC63  F02C         	call	_change_state_to_menu_23	;wreg free
 20632                           
 20633                           ;UI.c: 335: }
 20634                           ;UI.c: 336: break;
 20635  0035BA  D075               	goto	i2l268
 20636  0035BC                     i2l9755:
 20637                           
 20638                           ;UI.c: 339: if(up){
 20639  0035BC  5075               	movf	_up,w,c
 20640  0035BE  1076               	iorwf	_up+1,w,c
 20641  0035C0  B4D8               	btfsc	status,2,c
 20642  0035C2  D003               	goto	i2l9759
 20643                           
 20644                           ;UI.c: 340: change_state_to_logs_22();
 20645  0035C4  ECC3  F02C         	call	_change_state_to_logs_22	;wreg free
 20646                           
 20647                           ;UI.c: 341: }
 20648  0035C8  D06E               	goto	i2l268
 20649  0035CA                     i2l9759:
 20650                           
 20651                           ;UI.c: 342: else if(down){
 20652  0035CA  5065               	movf	_down,w,c
 20653  0035CC  1066               	iorwf	_down+1,w,c
 20654  0035CE  B4D8               	btfsc	status,2,c
 20655  0035D0  D003               	goto	i2l9763
 20656                           
 20657                           ;UI.c: 343: change_state_to_logs_34();
 20658  0035D2  EC93  F02C         	call	_change_state_to_logs_34	;wreg free
 20659                           
 20660                           ;UI.c: 344: }
 20661  0035D6  D067               	goto	i2l268
 20662  0035D8                     i2l9763:
 20663                           
 20664                           ;UI.c: 345: else if(enter){
 20665  0035D8  5067               	movf	_enter,w,c
 20666  0035DA  1068               	iorwf	_enter+1,w,c
 20667  0035DC  B4D8               	btfsc	status,2,c
 20668  0035DE  D007               	goto	i2l9767
 20669                           
 20670                           ;UI.c: 346: dispLogs(3);
 20671  0035E0  0E00               	movlw	0
 20672  0035E2  6E13               	movwf	dispLogs@myLog+1,c
 20673  0035E4  0E03               	movlw	3
 20674  0035E6  6E12               	movwf	dispLogs@myLog,c
 20675  0035E8  ECC8  F02D         	call	_dispLogs	;wreg free
 20676                           
 20677                           ;UI.c: 347: }
 20678  0035EC  D05C               	goto	i2l268
 20679  0035EE                     i2l9767:
 20680                           
 20681                           ;UI.c: 348: else if(back){
 20682  0035EE  5063               	movf	_back,w,c
 20683  0035F0  1064               	iorwf	_back+1,w,c
 20684  0035F2  B4D8               	btfsc	status,2,c
 20685  0035F4  D058               	goto	i2l268
 20686                           
 20687                           ;UI.c: 349: change_state_to_menu_23();
 20688  0035F6  EC63  F02C         	call	_change_state_to_menu_23	;wreg free
 20689                           
 20690                           ;UI.c: 350: }
 20691                           ;UI.c: 351: break;
 20692  0035FA  D055               	goto	i2l268
 20693  0035FC                     i2l9771:
 20694                           
 20695                           ;UI.c: 354: if(up){
 20696  0035FC  5075               	movf	_up,w,c
 20697  0035FE  1076               	iorwf	_up+1,w,c
 20698  003600  B4D8               	btfsc	status,2,c
 20699  003602  D003               	goto	i2l9775
 20700                           
 20701                           ;UI.c: 355: change_state_to_logs_33();
 20702  003604  ECAB  F02C         	call	_change_state_to_logs_33	;wreg free
 20703                           
 20704                           ;UI.c: 356: }
 20705  003608  D04E               	goto	i2l268
 20706  00360A                     i2l9775:
 20707                           
 20708                           ;UI.c: 357: else if(down){
 20709  00360A  5065               	movf	_down,w,c
 20710  00360C  1066               	iorwf	_down+1,w,c
 20711  00360E  B4D8               	btfsc	status,2,c
 20712  003610  D003               	goto	i2l9779
 20713                           
 20714                           ;UI.c: 358: change_state_to_logs_11();
 20715  003612  ECF3  F02C         	call	_change_state_to_logs_11	;wreg free
 20716                           
 20717                           ;UI.c: 359: }
 20718  003616  D047               	goto	i2l268
 20719  003618                     i2l9779:
 20720                           
 20721                           ;UI.c: 360: else if(enter){
 20722  003618  5067               	movf	_enter,w,c
 20723  00361A  1068               	iorwf	_enter+1,w,c
 20724  00361C  B4D8               	btfsc	status,2,c
 20725  00361E  D007               	goto	i2l9783
 20726                           
 20727                           ;UI.c: 361: dispLogs(4);
 20728  003620  0E00               	movlw	0
 20729  003622  6E13               	movwf	dispLogs@myLog+1,c
 20730  003624  0E04               	movlw	4
 20731  003626  6E12               	movwf	dispLogs@myLog,c
 20732  003628  ECC8  F02D         	call	_dispLogs	;wreg free
 20733                           
 20734                           ;UI.c: 362: }
 20735  00362C  D03C               	goto	i2l268
 20736  00362E                     i2l9783:
 20737                           
 20738                           ;UI.c: 363: else if(back){
 20739  00362E  5063               	movf	_back,w,c
 20740  003630  1064               	iorwf	_back+1,w,c
 20741  003632  B4D8               	btfsc	status,2,c
 20742  003634  D038               	goto	i2l268
 20743                           
 20744                           ;UI.c: 364: change_state_to_menu_23();
 20745  003636  EC63  F02C         	call	_change_state_to_menu_23	;wreg free
 20746                           
 20747                           ;UI.c: 370: }
 20748                           
 20749                           ;UI.c: 369: break;
 20750                           
 20751                           ;UI.c: 368: default:
 20752                           
 20753                           ;UI.c: 365: }
 20754                           ;UI.c: 366: break;
 20755  00363A  D035               	goto	i2l268
 20756  00363C                     i2l9789:
 20757  00363C  C0E6  F043         	movff	_cur_state,??_updateMenu
 20758  003640  C0E7  F044         	movff	_cur_state+1,??_updateMenu+1
 20759                           
 20760                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 20761                           ; Switch size 1, requested type "space"
 20762                           ; Number of cases is 3, Range of values is 0 to 4
 20763                           ; switch strategies available:
 20764                           ; Name         Instructions Cycles
 20765                           ; simple_byte           10     6 (average)
 20766                           ;	Chosen strategy is simple_byte
 20767  003644  5044               	movf	??_updateMenu+1,w,c
 20768  003646  0A00               	xorlw	0	; case 0
 20769  003648  B4D8               	btfsc	status,2,c
 20770  00364A  D007               	goto	i2l10791
 20771  00364C  0A03               	xorlw	3	; case 3
 20772  00364E  B4D8               	btfsc	status,2,c
 20773  003650  D015               	goto	i2l10793
 20774  003652  0A07               	xorlw	7	; case 4
 20775  003654  B4D8               	btfsc	status,2,c
 20776  003656  D020               	goto	i2l10795
 20777  003658  D026               	goto	i2l268
 20778  00365A                     i2l10791:
 20779                           
 20780                           ; Switch size 1, requested type "space"
 20781                           ; Number of cases is 5, Range of values is 0 to 23
 20782                           ; switch strategies available:
 20783                           ; Name         Instructions Cycles
 20784                           ; simple_byte           16     9 (average)
 20785                           ;	Chosen strategy is simple_byte
 20786  00365A  5043               	movf	??_updateMenu,w,c
 20787  00365C  0A00               	xorlw	0	; case 0
 20788  00365E  B4D8               	btfsc	status,2,c
 20789  003660  D6DC               	goto	i2l9641
 20790  003662  0A0B               	xorlw	11	; case 11
 20791  003664  B4D8               	btfsc	status,2,c
 20792  003666  D6DC               	goto	i2l9643
 20793  003668  0A07               	xorlw	7	; case 12
 20794  00366A  B4D8               	btfsc	status,2,c
 20795  00366C  D6EE               	goto	i2l9655
 20796  00366E  0A1A               	xorlw	26	; case 22
 20797  003670  B4D8               	btfsc	status,2,c
 20798  003672  D6F9               	goto	i2l9667
 20799  003674  0A01               	xorlw	1	; case 23
 20800  003676  B4D8               	btfsc	status,2,c
 20801  003678  D70C               	goto	i2l9679
 20802  00367A  D015               	goto	i2l268
 20803  00367C                     i2l10793:
 20804                           
 20805                           ; Switch size 1, requested type "space"
 20806                           ; Number of cases is 4, Range of values is 243 to 255
 20807                           ; switch strategies available:
 20808                           ; Name         Instructions Cycles
 20809                           ; simple_byte           13     7 (average)
 20810                           ;	Chosen strategy is simple_byte
 20811  00367C  5043               	movf	??_updateMenu,w,c
 20812  00367E  0AF3               	xorlw	243	; case 243
 20813  003680  B4D8               	btfsc	status,2,c
 20814  003682  D71C               	goto	i2l9691
 20815  003684  0A07               	xorlw	7	; case 244
 20816  003686  B4D8               	btfsc	status,2,c
 20817  003688  D739               	goto	i2l9707
 20818  00368A  0A0A               	xorlw	10	; case 254
 20819  00368C  B4D8               	btfsc	status,2,c
 20820  00368E  D756               	goto	i2l9723
 20821  003690  0A01               	xorlw	1	; case 255
 20822  003692  B4D8               	btfsc	status,2,c
 20823  003694  D773               	goto	i2l9739
 20824  003696  D007               	goto	i2l268
 20825  003698                     i2l10795:
 20826                           
 20827                           ; Switch size 1, requested type "space"
 20828                           ; Number of cases is 2, Range of values is 9 to 10
 20829                           ; switch strategies available:
 20830                           ; Name         Instructions Cycles
 20831                           ; simple_byte            7     4 (average)
 20832                           ;	Chosen strategy is simple_byte
 20833  003698  5043               	movf	??_updateMenu,w,c
 20834  00369A  0A09               	xorlw	9	; case 9
 20835  00369C  B4D8               	btfsc	status,2,c
 20836  00369E  D78E               	goto	i2l9755
 20837  0036A0  0A03               	xorlw	3	; case 10
 20838  0036A2  B4D8               	btfsc	status,2,c
 20839  0036A4  D7AB               	goto	i2l9771
 20840  0036A6                     i2l268:
 20841                           
 20842                           ;UI.c: 371: }
 20843                           ;UI.c: 372: (INTCONbits.GIE = 1);
 20844  0036A6  8EF2               	bsf	intcon,7,c	;volatile
 20845  0036A8  0012               	return		;funcret
 20846  0036AA                     __end_of_updateMenu:
 20847                           	opt stack 0
 20848                           pclatu	equ	0xFFB
 20849                           pclath	equ	0xFFA
 20850                           tblptru	equ	0xFF8
 20851                           tblptrh	equ	0xFF7
 20852                           tblptrl	equ	0xFF6
 20853                           tablat	equ	0xFF5
 20854                           prodh	equ	0xFF4
 20855                           prodl	equ	0xFF3
 20856                           intcon	equ	0xFF2
 20857                           intcon2	equ	0xFF1
 20858                           intcon3	equ	0xFF0
 20859                           indf0	equ	0xFEF
 20860                           postinc0	equ	0xFEE
 20861                           fsr0h	equ	0xFEA
 20862                           fsr0l	equ	0xFE9
 20863                           wreg	equ	0xFE8
 20864                           postdec1	equ	0xFE5
 20865                           fsr1h	equ	0xFE2
 20866                           fsr1l	equ	0xFE1
 20867                           indf2	equ	0xFDF
 20868                           postinc2	equ	0xFDE
 20869                           postdec2	equ	0xFDD
 20870                           fsr2h	equ	0xFDA
 20871                           fsr2l	equ	0xFD9
 20872                           status	equ	0xFD8
 20873                           
 20874 ;; *************** function i2_change_state_to_menu_start *****************
 20875 ;; Defined at:
 20876 ;;		line 477 in file "UI.c"
 20877 ;; Parameters:    Size  Location     Type
 20878 ;;		None
 20879 ;; Auto vars:     Size  Location     Type
 20880 ;;		None
 20881 ;; Return value:  Size  Location     Type
 20882 ;;                  1    wreg      void 
 20883 ;; Registers used:
 20884 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20885 ;; Tracked objects:
 20886 ;;		On entry : 0/0
 20887 ;;		On exit  : 0/0
 20888 ;;		Unchanged: 0/0
 20889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20893 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20894 ;;Total ram usage:        0 bytes
 20895 ;; Hardware stack levels used:    1
 20896 ;; Hardware stack levels required when called:    4
 20897 ;; This function calls:
 20898 ;;		i2_lcdInst
 20899 ;;		i2_printRTC
 20900 ;;		i2_printf
 20901 ;; This function is called by:
 20902 ;;		_updateMenu
 20903 ;;		_handler
 20904 ;; This function uses a non-reentrant model
 20905 ;;
 20906                           
 20907                           	psect	text68
 20908  005B1C                     __ptext68:
 20909                           	opt stack 0
 20910  005B1C                     i2_change_state_to_menu_start:
 20911                           	opt stack 19
 20912                           
 20913                           ;UI.c: 478: cur_state = 0;
 20914                           
 20915                           ;incstack = 0
 20916  005B1C  0E00               	movlw	0
 20917  005B1E  0100               	movlb	0	; () banked
 20918  005B20  6FE7               	movwf	(_cur_state+1)& (0+255),b
 20919  005B22  0E00               	movlw	0
 20920  005B24  6FE6               	movwf	_cur_state& (0+255),b
 20921                           
 20922                           ; BSR set to: 0
 20923                           ;UI.c: 480: lcdInst(0b10000000);;
 20924  005B26  0E80               	movlw	128
 20925  005B28  EC67  F02E         	call	i2_lcdInst
 20926                           
 20927                           ;UI.c: 481: printRTC();
 20928  005B2C  EC55  F01B         	call	i2_printRTC	;wreg free
 20929                           
 20930                           ;UI.c: 482: lcdInst(0b11000000);;
 20931  005B30  0EC0               	movlw	192
 20932  005B32  EC67  F02E         	call	i2_lcdInst
 20933                           
 20934                           ;UI.c: 483: printf("PUSH TO CONTINUE");
 20935  005B36  0E0B               	movlw	low STR_30
 20936  005B38  6E0D               	movwf	i2printf@f,c
 20937  005B3A  0EFE               	movlw	high STR_30
 20938  005B3C  6E0E               	movwf	i2printf@f+1,c
 20939  005B3E  EC28  F012         	call	i2_printf	;wreg free
 20940  005B42  0012               	return		;funcret
 20941  005B44                     __end_ofi2_change_state_to_menu_start:
 20942                           	opt stack 0
 20943                           pclatu	equ	0xFFB
 20944                           pclath	equ	0xFFA
 20945                           tblptru	equ	0xFF8
 20946                           tblptrh	equ	0xFF7
 20947                           tblptrl	equ	0xFF6
 20948                           tablat	equ	0xFF5
 20949                           prodh	equ	0xFF4
 20950                           prodl	equ	0xFF3
 20951                           intcon	equ	0xFF2
 20952                           intcon2	equ	0xFF1
 20953                           intcon3	equ	0xFF0
 20954                           indf0	equ	0xFEF
 20955                           postinc0	equ	0xFEE
 20956                           fsr0h	equ	0xFEA
 20957                           fsr0l	equ	0xFE9
 20958                           wreg	equ	0xFE8
 20959                           postdec1	equ	0xFE5
 20960                           fsr1h	equ	0xFE2
 20961                           fsr1l	equ	0xFE1
 20962                           indf2	equ	0xFDF
 20963                           postinc2	equ	0xFDE
 20964                           postdec2	equ	0xFDD
 20965                           fsr2h	equ	0xFDA
 20966                           fsr2l	equ	0xFD9
 20967                           status	equ	0xFD8
 20968                           
 20969 ;; *************** function i2_printRTC *****************
 20970 ;; Defined at:
 20971 ;;		line 63 in file "RTC.c"
 20972 ;; Parameters:    Size  Location     Type
 20973 ;;		None
 20974 ;; Auto vars:     Size  Location     Type
 20975 ;;  printRTC       14   44[COMRAM] int [7]
 20976 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 20977 ;;  printRTC        2   64[COMRAM] int 
 20978 ;;  printRTC        2   58[COMRAM] int 
 20979 ;; Return value:  Size  Location     Type
 20980 ;;                  1    wreg      void 
 20981 ;; Registers used:
 20982 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20983 ;; Tracked objects:
 20984 ;;		On entry : 0/0
 20985 ;;		On exit  : 0/0
 20986 ;;		Unchanged: 0/0
 20987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20989 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20990 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20991 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20992 ;;Total ram usage:       25 bytes
 20993 ;; Hardware stack levels used:    1
 20994 ;; Hardware stack levels required when called:    3
 20995 ;; This function calls:
 20996 ;;		i2_getRTC
 20997 ;;		i2_lcdInst
 20998 ;;		i2_printf
 20999 ;;		i2_strcpy
 21000 ;; This function is called by:
 21001 ;;		i2_change_state_to_menu_start
 21002 ;; This function uses a non-reentrant model
 21003 ;;
 21004                           
 21005                           	psect	text69
 21006  0036AA                     __ptext69:
 21007                           	opt stack 0
 21008  0036AA                     i2_printRTC:
 21009                           	opt stack 19
 21010                           
 21011                           ;RTC.c: 64: getRTC();
 21012                           
 21013                           ;incstack = 0
 21014  0036AA  EC77  F028         	call	i2_getRTC	;wreg free
 21015                           
 21016                           ;RTC.c: 65: char month[] = "MMM";
 21017  0036AE  C14D  F03D         	movff	printRTC@F3236,i2printRTC@month
 21018  0036B2  C14E  F03E         	movff	printRTC@F3236+1,i2printRTC@month+1
 21019  0036B6  C14F  F03F         	movff	printRTC@F3236+2,i2printRTC@month+2
 21020  0036BA  C150  F040         	movff	printRTC@F3236+3,i2printRTC@month+3
 21021                           
 21022                           ;RTC.c: 66: int INT_time[7];
 21023                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 21024  0036BE  0E00               	movlw	0
 21025  0036C0  6E42               	movwf	i2printRTC@i+1,c
 21026  0036C2  0E00               	movlw	0
 21027  0036C4  6E41               	movwf	i2printRTC@i,c
 21028  0036C6  BE42               	btfsc	i2printRTC@i+1,7,c
 21029  0036C8  D006               	goto	i2l7587
 21030  0036CA  5042               	movf	i2printRTC@i+1,w,c
 21031  0036CC  E135               	bnz	i2l627
 21032  0036CE  0E07               	movlw	7
 21033  0036D0  5C41               	subwf	i2printRTC@i,w,c
 21034  0036D2  B0D8               	btfsc	status,0,c
 21035  0036D4  D031               	goto	i2l627
 21036  0036D6                     i2l7587:
 21037                           
 21038                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 21039  0036D6  0E1C               	movlw	low _time
 21040  0036D8  2441               	addwf	i2printRTC@i,w,c
 21041  0036DA  6ED9               	movwf	fsr2l,c
 21042  0036DC  0E01               	movlw	high _time
 21043  0036DE  2042               	addwfc	i2printRTC@i+1,w,c
 21044  0036E0  6EDA               	movwf	fsr2h,c
 21045  0036E2  50DF               	movf	indf2,w,c
 21046  0036E4  6E2A               	movwf	??i2_printRTC& (0+255),c
 21047  0036E6  3A2A               	swapf	??i2_printRTC,f,c
 21048  0036E8  0E0F               	movlw	15
 21049  0036EA  162A               	andwf	??i2_printRTC,f,c
 21050  0036EC  0E0F               	movlw	15
 21051  0036EE  162A               	andwf	??i2_printRTC,f,c
 21052  0036F0  502A               	movf	??i2_printRTC,w,c
 21053  0036F2  0D0A               	mullw	10
 21054  0036F4  0E1C               	movlw	low _time
 21055  0036F6  2441               	addwf	i2printRTC@i,w,c
 21056  0036F8  6ED9               	movwf	fsr2l,c
 21057  0036FA  0E01               	movlw	high _time
 21058  0036FC  2042               	addwfc	i2printRTC@i+1,w,c
 21059  0036FE  6EDA               	movwf	fsr2h,c
 21060  003700  50DF               	movf	indf2,w,c
 21061  003702  0B0F               	andlw	15
 21062  003704  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 21063  003706  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 21064  003708  50F3               	movf	prodl,w,c
 21065  00370A  262B               	addwf	??i2_printRTC+1,f,c
 21066  00370C  50F4               	movf	prodh,w,c
 21067  00370E  222C               	addwfc	??i2_printRTC+2,f,c
 21068  003710  90D8               	bcf	status,0,c
 21069  003712  3441               	rlcf	i2printRTC@i,w,c
 21070  003714  6ED9               	movwf	fsr2l,c
 21071  003716  3442               	rlcf	i2printRTC@i+1,w,c
 21072  003718  6EDA               	movwf	fsr2h,c
 21073  00371A  0E2D               	movlw	low i2printRTC@INT_time
 21074  00371C  26D9               	addwf	fsr2l,f,c
 21075  00371E  0E00               	movlw	high i2printRTC@INT_time
 21076  003720  22DA               	addwfc	fsr2h,f,c
 21077  003722  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 21078  003726  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 21079  00372A  4A41               	infsnz	i2printRTC@i,f,c
 21080  00372C  2A42               	incf	i2printRTC@i+1,f,c
 21081  00372E  BE42               	btfsc	i2printRTC@i+1,7,c
 21082  003730  D7D2               	goto	i2l7587
 21083  003732  5042               	movf	i2printRTC@i+1,w,c
 21084  003734  E101               	bnz	i2u624_40
 21085  003736  D7CB               	goto	L19
 21086  003738                     i2u624_40:
 21087  003738                     i2l627:
 21088                           
 21089                           ;RTC.c: 69: }
 21090                           ;RTC.c: 70: int RTC_month = INT_time[5];
 21091  003738  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 21092  00373C  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 21093                           
 21094                           ;RTC.c: 72: switch(RTC_month){
 21095  003740  D084               	goto	i2l7619
 21096  003742                     i2l7593:
 21097                           
 21098                           ;RTC.c: 74: strcpy(month, "JAN");
 21099  003742  0E3D               	movlw	low i2printRTC@month
 21100  003744  6E01               	movwf	i2strcpy@to,c
 21101  003746  0E00               	movlw	high i2printRTC@month
 21102  003748  6E02               	movwf	i2strcpy@to+1,c
 21103  00374A  0EDB               	movlw	low STR_8
 21104  00374C  6E03               	movwf	i2strcpy@from,c
 21105  00374E  0EFF               	movlw	high STR_8
 21106  003750  6E04               	movwf	i2strcpy@from+1,c
 21107  003752  EC02  F02C         	call	i2_strcpy	;wreg free
 21108                           
 21109                           ;RTC.c: 75: break;
 21110  003756  D0A6               	goto	i2l7621
 21111  003758                     i2l7595:
 21112                           
 21113                           ;RTC.c: 77: strcpy(month, "FEB");
 21114  003758  0E3D               	movlw	low i2printRTC@month
 21115  00375A  6E01               	movwf	i2strcpy@to,c
 21116  00375C  0E00               	movlw	high i2printRTC@month
 21117  00375E  6E02               	movwf	i2strcpy@to+1,c
 21118  003760  0ECB               	movlw	low STR_9
 21119  003762  6E03               	movwf	i2strcpy@from,c
 21120  003764  0EFF               	movlw	high STR_9
 21121  003766  6E04               	movwf	i2strcpy@from+1,c
 21122  003768  EC02  F02C         	call	i2_strcpy	;wreg free
 21123                           
 21124                           ;RTC.c: 78: break;
 21125  00376C  D09B               	goto	i2l7621
 21126  00376E                     i2l7597:
 21127                           
 21128                           ;RTC.c: 80: strcpy(month, "MAR");
 21129  00376E  0E3D               	movlw	low i2printRTC@month
 21130  003770  6E01               	movwf	i2strcpy@to,c
 21131  003772  0E00               	movlw	high i2printRTC@month
 21132  003774  6E02               	movwf	i2strcpy@to+1,c
 21133  003776  0EE7               	movlw	low STR_10
 21134  003778  6E03               	movwf	i2strcpy@from,c
 21135  00377A  0EFF               	movlw	high STR_10
 21136  00377C  6E04               	movwf	i2strcpy@from+1,c
 21137  00377E  EC02  F02C         	call	i2_strcpy	;wreg free
 21138                           
 21139                           ;RTC.c: 81: break;
 21140  003782  D090               	goto	i2l7621
 21141  003784                     i2l7599:
 21142                           
 21143                           ;RTC.c: 83: strcpy(month, "APR");
 21144  003784  0E3D               	movlw	low i2printRTC@month
 21145  003786  6E01               	movwf	i2strcpy@to,c
 21146  003788  0E00               	movlw	high i2printRTC@month
 21147  00378A  6E02               	movwf	i2strcpy@to+1,c
 21148  00378C  0EEB               	movlw	low STR_11
 21149  00378E  6E03               	movwf	i2strcpy@from,c
 21150  003790  0EFF               	movlw	high STR_11
 21151  003792  6E04               	movwf	i2strcpy@from+1,c
 21152  003794  EC02  F02C         	call	i2_strcpy	;wreg free
 21153                           
 21154                           ;RTC.c: 84: break;
 21155  003798  D085               	goto	i2l7621
 21156  00379A                     i2l7601:
 21157                           
 21158                           ;RTC.c: 86: strcpy(month, "MAY");
 21159  00379A  0E3D               	movlw	low i2printRTC@month
 21160  00379C  6E01               	movwf	i2strcpy@to,c
 21161  00379E  0E00               	movlw	high i2printRTC@month
 21162  0037A0  6E02               	movwf	i2strcpy@to+1,c
 21163  0037A2  0EFB               	movlw	low STR_12
 21164  0037A4  6E03               	movwf	i2strcpy@from,c
 21165  0037A6  0EFF               	movlw	high STR_12
 21166  0037A8  6E04               	movwf	i2strcpy@from+1,c
 21167  0037AA  EC02  F02C         	call	i2_strcpy	;wreg free
 21168                           
 21169                           ;RTC.c: 87: break;
 21170  0037AE  D07A               	goto	i2l7621
 21171  0037B0                     i2l7603:
 21172                           
 21173                           ;RTC.c: 89: strcpy(month, "JUN");
 21174  0037B0  0E3D               	movlw	low i2printRTC@month
 21175  0037B2  6E01               	movwf	i2strcpy@to,c
 21176  0037B4  0E00               	movlw	high i2printRTC@month
 21177  0037B6  6E02               	movwf	i2strcpy@to+1,c
 21178  0037B8  0EDF               	movlw	low STR_13
 21179  0037BA  6E03               	movwf	i2strcpy@from,c
 21180  0037BC  0EFF               	movlw	high STR_13
 21181  0037BE  6E04               	movwf	i2strcpy@from+1,c
 21182  0037C0  EC02  F02C         	call	i2_strcpy	;wreg free
 21183                           
 21184                           ;RTC.c: 90: break;
 21185  0037C4  D06F               	goto	i2l7621
 21186  0037C6                     i2l7605:
 21187                           
 21188                           ;RTC.c: 92: strcpy(month, "JUL");
 21189  0037C6  0E3D               	movlw	low i2printRTC@month
 21190  0037C8  6E01               	movwf	i2strcpy@to,c
 21191  0037CA  0E00               	movlw	high i2printRTC@month
 21192  0037CC  6E02               	movwf	i2strcpy@to+1,c
 21193  0037CE  0ED7               	movlw	low STR_14
 21194  0037D0  6E03               	movwf	i2strcpy@from,c
 21195  0037D2  0EFF               	movlw	high STR_14
 21196  0037D4  6E04               	movwf	i2strcpy@from+1,c
 21197  0037D6  EC02  F02C         	call	i2_strcpy	;wreg free
 21198                           
 21199                           ;RTC.c: 93: break;
 21200  0037DA  D064               	goto	i2l7621
 21201  0037DC                     i2l7607:
 21202                           
 21203                           ;RTC.c: 95: strcpy(month, "AUG");
 21204  0037DC  0E3D               	movlw	low i2printRTC@month
 21205  0037DE  6E01               	movwf	i2strcpy@to,c
 21206  0037E0  0E00               	movlw	high i2printRTC@month
 21207  0037E2  6E02               	movwf	i2strcpy@to+1,c
 21208  0037E4  0ED3               	movlw	low STR_15
 21209  0037E6  6E03               	movwf	i2strcpy@from,c
 21210  0037E8  0EFF               	movlw	high STR_15
 21211  0037EA  6E04               	movwf	i2strcpy@from+1,c
 21212  0037EC  EC02  F02C         	call	i2_strcpy	;wreg free
 21213                           
 21214                           ;RTC.c: 96: break;
 21215  0037F0  D059               	goto	i2l7621
 21216  0037F2                     i2l7609:
 21217                           
 21218                           ;RTC.c: 98: strcpy(month, "SEP");
 21219  0037F2  0E3D               	movlw	low i2printRTC@month
 21220  0037F4  6E01               	movwf	i2strcpy@to,c
 21221  0037F6  0E00               	movlw	high i2printRTC@month
 21222  0037F8  6E02               	movwf	i2strcpy@to+1,c
 21223  0037FA  0EE3               	movlw	low STR_16
 21224  0037FC  6E03               	movwf	i2strcpy@from,c
 21225  0037FE  0EFF               	movlw	high STR_16
 21226  003800  6E04               	movwf	i2strcpy@from+1,c
 21227  003802  EC02  F02C         	call	i2_strcpy	;wreg free
 21228                           
 21229                           ;RTC.c: 99: break;
 21230  003806  D04E               	goto	i2l7621
 21231  003808                     i2l7611:
 21232                           
 21233                           ;RTC.c: 101: strcpy(month, "OCT");
 21234  003808  0E3D               	movlw	low i2printRTC@month
 21235  00380A  6E01               	movwf	i2strcpy@to,c
 21236  00380C  0E00               	movlw	high i2printRTC@month
 21237  00380E  6E02               	movwf	i2strcpy@to+1,c
 21238  003810  0EF3               	movlw	low STR_17
 21239  003812  6E03               	movwf	i2strcpy@from,c
 21240  003814  0EFF               	movlw	high STR_17
 21241  003816  6E04               	movwf	i2strcpy@from+1,c
 21242  003818  EC02  F02C         	call	i2_strcpy	;wreg free
 21243                           
 21244                           ;RTC.c: 102: break;
 21245  00381C  D043               	goto	i2l7621
 21246  00381E                     i2l7613:
 21247                           
 21248                           ;RTC.c: 104: strcpy(month, "NOV");
 21249  00381E  0E3D               	movlw	low i2printRTC@month
 21250  003820  6E01               	movwf	i2strcpy@to,c
 21251  003822  0E00               	movlw	high i2printRTC@month
 21252  003824  6E02               	movwf	i2strcpy@to+1,c
 21253  003826  0EF7               	movlw	low STR_18
 21254  003828  6E03               	movwf	i2strcpy@from,c
 21255  00382A  0EFF               	movlw	high STR_18
 21256  00382C  6E04               	movwf	i2strcpy@from+1,c
 21257  00382E  EC02  F02C         	call	i2_strcpy	;wreg free
 21258                           
 21259                           ;RTC.c: 105: break;
 21260  003832  D038               	goto	i2l7621
 21261  003834                     i2l7615:
 21262                           
 21263                           ;RTC.c: 107: strcpy(month, "DEC");
 21264  003834  0E3D               	movlw	low i2printRTC@month
 21265  003836  6E01               	movwf	i2strcpy@to,c
 21266  003838  0E00               	movlw	high i2printRTC@month
 21267  00383A  6E02               	movwf	i2strcpy@to+1,c
 21268  00383C  0ECF               	movlw	low STR_19
 21269  00383E  6E03               	movwf	i2strcpy@from,c
 21270  003840  0EFF               	movlw	high STR_19
 21271  003842  6E04               	movwf	i2strcpy@from+1,c
 21272  003844  EC02  F02C         	call	i2_strcpy	;wreg free
 21273                           
 21274                           ;RTC.c: 109: }
 21275                           
 21276                           ;RTC.c: 108: break;
 21277  003848  D02D               	goto	i2l7621
 21278  00384A                     i2l7619:
 21279  00384A  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 21280  00384E  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 21281                           
 21282                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21283                           ; Switch size 1, requested type "space"
 21284                           ; Number of cases is 1, Range of values is 0 to 0
 21285                           ; switch strategies available:
 21286                           ; Name         Instructions Cycles
 21287                           ; simple_byte            4     3 (average)
 21288                           ;	Chosen strategy is simple_byte
 21289  003852  502B               	movf	??i2_printRTC+1,w,c
 21290  003854  0A00               	xorlw	0	; case 0
 21291  003856  A4D8               	btfss	status,2,c
 21292  003858  D025               	goto	i2l7621
 21293                           
 21294                           ; Switch size 1, requested type "space"
 21295                           ; Number of cases is 12, Range of values is 1 to 12
 21296                           ; switch strategies available:
 21297                           ; Name         Instructions Cycles
 21298                           ; simple_byte           37    19 (average)
 21299                           ;	Chosen strategy is simple_byte
 21300  00385A  502A               	movf	??i2_printRTC,w,c
 21301  00385C  0A01               	xorlw	1	; case 1
 21302  00385E  B4D8               	btfsc	status,2,c
 21303  003860  D770               	goto	i2l7593
 21304  003862  0A03               	xorlw	3	; case 2
 21305  003864  B4D8               	btfsc	status,2,c
 21306  003866  D778               	goto	i2l7595
 21307  003868  0A01               	xorlw	1	; case 3
 21308  00386A  B4D8               	btfsc	status,2,c
 21309  00386C  D780               	goto	i2l7597
 21310  00386E  0A07               	xorlw	7	; case 4
 21311  003870  B4D8               	btfsc	status,2,c
 21312  003872  D788               	goto	i2l7599
 21313  003874  0A01               	xorlw	1	; case 5
 21314  003876  B4D8               	btfsc	status,2,c
 21315  003878  D790               	goto	i2l7601
 21316  00387A  0A03               	xorlw	3	; case 6
 21317  00387C  B4D8               	btfsc	status,2,c
 21318  00387E  D798               	goto	i2l7603
 21319  003880  0A01               	xorlw	1	; case 7
 21320  003882  B4D8               	btfsc	status,2,c
 21321  003884  D7A0               	goto	i2l7605
 21322  003886  0A0F               	xorlw	15	; case 8
 21323  003888  B4D8               	btfsc	status,2,c
 21324  00388A  D7A8               	goto	i2l7607
 21325  00388C  0A01               	xorlw	1	; case 9
 21326  00388E  B4D8               	btfsc	status,2,c
 21327  003890  D7B0               	goto	i2l7609
 21328  003892  0A03               	xorlw	3	; case 10
 21329  003894  B4D8               	btfsc	status,2,c
 21330  003896  D7B8               	goto	i2l7611
 21331  003898  0A01               	xorlw	1	; case 11
 21332  00389A  B4D8               	btfsc	status,2,c
 21333  00389C  D7C0               	goto	i2l7613
 21334  00389E  0A07               	xorlw	7	; case 12
 21335  0038A0  B4D8               	btfsc	status,2,c
 21336  0038A2  D7C8               	goto	i2l7615
 21337  0038A4                     i2l7621:
 21338                           
 21339                           ;RTC.c: 110: lcdInst(0b10000000);;
 21340  0038A4  0E80               	movlw	128
 21341  0038A6  EC67  F02E         	call	i2_lcdInst
 21342                           
 21343                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 21344  0038AA  0EA2               	movlw	low STR_21
 21345  0038AC  6E0D               	movwf	i2printf@f,c
 21346  0038AE  0EFA               	movlw	high STR_21
 21347  0038B0  6E0E               	movwf	i2printf@f+1,c
 21348  0038B2  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 21349  0038B6  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 21350  0038BA  0E3D               	movlw	low i2printRTC@month
 21351  0038BC  6E11               	movwf	?i2_printf+4,c
 21352  0038BE  0E00               	movlw	high i2printRTC@month
 21353  0038C0  6E12               	movwf	?i2_printf+5,c
 21354  0038C2  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 21355  0038C6  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 21356  0038CA  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 21357  0038CE  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 21358  0038D2  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 21359  0038D6  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 21360  0038DA  EC28  F012         	call	i2_printf	;wreg free
 21361  0038DE  0012               	return		;funcret
 21362  0038E0                     __end_ofi2_printRTC:
 21363                           	opt stack 0
 21364                           pclatu	equ	0xFFB
 21365                           pclath	equ	0xFFA
 21366                           tblptru	equ	0xFF8
 21367                           tblptrh	equ	0xFF7
 21368                           tblptrl	equ	0xFF6
 21369                           tablat	equ	0xFF5
 21370                           prodh	equ	0xFF4
 21371                           prodl	equ	0xFF3
 21372                           intcon	equ	0xFF2
 21373                           intcon2	equ	0xFF1
 21374                           intcon3	equ	0xFF0
 21375                           indf0	equ	0xFEF
 21376                           postinc0	equ	0xFEE
 21377                           fsr0h	equ	0xFEA
 21378                           fsr0l	equ	0xFE9
 21379                           wreg	equ	0xFE8
 21380                           postdec1	equ	0xFE5
 21381                           fsr1h	equ	0xFE2
 21382                           fsr1l	equ	0xFE1
 21383                           indf2	equ	0xFDF
 21384                           postinc2	equ	0xFDE
 21385                           postdec2	equ	0xFDD
 21386                           fsr2h	equ	0xFDA
 21387                           fsr2l	equ	0xFD9
 21388                           status	equ	0xFD8
 21389                           
 21390 ;; *************** function i2_strcpy *****************
 21391 ;; Defined at:
 21392 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 21393 ;; Parameters:    Size  Location     Type
 21394 ;;  to              2    0[COMRAM] PTR unsigned char 
 21395 ;;		 -> printRTC@month(4), UI@month(4), 
 21396 ;;  from            2    2[COMRAM] PTR const unsigned char 
 21397 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 21398 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 21399 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 21400 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 21401 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 21402 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 21403 ;;		 -> STR_8(4), 
 21404 ;; Auto vars:     Size  Location     Type
 21405 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 21406 ;;		 -> printRTC@month(4), UI@month(4), 
 21407 ;; Return value:  Size  Location     Type
 21408 ;;                  2    0[COMRAM] PTR unsigned char 
 21409 ;; Registers used:
 21410 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 21411 ;; Tracked objects:
 21412 ;;		On entry : 0/0
 21413 ;;		On exit  : 0/0
 21414 ;;		Unchanged: 0/0
 21415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21416 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21417 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21419 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21420 ;;Total ram usage:        6 bytes
 21421 ;; Hardware stack levels used:    1
 21422 ;; This function calls:
 21423 ;;		Nothing
 21424 ;; This function is called by:
 21425 ;;		i2_printRTC
 21426 ;; This function uses a non-reentrant model
 21427 ;;
 21428                           
 21429                           	psect	text70
 21430  005804                     __ptext70:
 21431                           	opt stack 0
 21432  005804                     i2_strcpy:
 21433                           	opt stack 21
 21434                           
 21435                           ;incstack = 0
 21436  005804  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 21437  005808  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 21438  00580C  D004               	goto	i2l7145
 21439  00580E                     i2l7143:
 21440  00580E  4A05               	infsnz	i2strcpy@cp,f,c
 21441  005810  2A06               	incf	i2strcpy@cp+1,f,c
 21442  005812  4A03               	infsnz	i2strcpy@from,f,c
 21443  005814  2A04               	incf	i2strcpy@from+1,f,c
 21444  005816                     i2l7145:
 21445  005816  C003  FFF6         	movff	i2strcpy@from,tblptrl
 21446  00581A  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 21447  00581E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21448  00581E  6AF8               	clrf	tblptru,c
 21449  005820                     	endif
 21450  005820                     	if	0	;tblptru may be non-zero
 21451  005820                     	endif
 21452  005820  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 21453  005824  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 21454  005828  0008               	tblrd		*
 21455  00582A  CFF5 FFDF          	movff	tablat,indf2
 21456  00582E  50DF               	movf	indf2,w,c
 21457  005830  B4D8               	btfsc	status,2,c
 21458  005832  0012               	return	
 21459  005834  D7EC               	goto	i2l7143
 21460  005836                     __end_ofi2_strcpy:
 21461                           	opt stack 0
 21462                           pclatu	equ	0xFFB
 21463                           pclath	equ	0xFFA
 21464                           tblptru	equ	0xFF8
 21465                           tblptrh	equ	0xFF7
 21466                           tblptrl	equ	0xFF6
 21467                           tablat	equ	0xFF5
 21468                           prodh	equ	0xFF4
 21469                           prodl	equ	0xFF3
 21470                           intcon	equ	0xFF2
 21471                           intcon2	equ	0xFF1
 21472                           intcon3	equ	0xFF0
 21473                           indf0	equ	0xFEF
 21474                           postinc0	equ	0xFEE
 21475                           fsr0h	equ	0xFEA
 21476                           fsr0l	equ	0xFE9
 21477                           wreg	equ	0xFE8
 21478                           postdec1	equ	0xFE5
 21479                           fsr1h	equ	0xFE2
 21480                           fsr1l	equ	0xFE1
 21481                           indf2	equ	0xFDF
 21482                           postinc2	equ	0xFDE
 21483                           postdec2	equ	0xFDD
 21484                           fsr2h	equ	0xFDA
 21485                           fsr2l	equ	0xFD9
 21486                           status	equ	0xFD8
 21487                           
 21488 ;; *************** function _inputHandler *****************
 21489 ;; Defined at:
 21490 ;;		line 375 in file "UI.c"
 21491 ;; Parameters:    Size  Location     Type
 21492 ;;		None
 21493 ;; Auto vars:     Size  Location     Type
 21494 ;;		None
 21495 ;; Return value:  Size  Location     Type
 21496 ;;                  2   41[COMRAM] int 
 21497 ;; Registers used:
 21498 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21499 ;; Tracked objects:
 21500 ;;		On entry : 0/0
 21501 ;;		On exit  : 0/0
 21502 ;;		Unchanged: 0/0
 21503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21504 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21506 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21507 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21508 ;;Total ram usage:        4 bytes
 21509 ;; Hardware stack levels used:    1
 21510 ;; Hardware stack levels required when called:    4
 21511 ;; This function calls:
 21512 ;;		_change_state_to_logs_11
 21513 ;;		_change_state_to_logs_12
 21514 ;;		_change_state_to_logs_22
 21515 ;;		_change_state_to_logs_23
 21516 ;;		_change_state_to_logs_33
 21517 ;;		_change_state_to_logs_34
 21518 ;;		_change_state_to_menu_11
 21519 ;;		_change_state_to_menu_23
 21520 ;;		i2_change_state_to_menu_12
 21521 ;;		i2_change_state_to_menu_22
 21522 ;; This function is called by:
 21523 ;;		_updateMenu
 21524 ;; This function uses a non-reentrant model
 21525 ;;
 21526                           
 21527                           	psect	text71
 21528  0038E0                     __ptext71:
 21529                           	opt stack 0
 21530  0038E0                     _inputHandler:
 21531                           	opt stack 18
 21532                           
 21533                           ;UI.c: 380: if(firstboot){
 21534                           
 21535                           ;incstack = 0
 21536  0038E0  0101               	movlb	1	; () banked
 21537  0038E2  513B               	movf	_firstboot& (0+255),w,b
 21538  0038E4  0101               	movlb	1	; () banked
 21539  0038E6  113C               	iorwf	(_firstboot+1)& (0+255),w,b
 21540  0038E8  B4D8               	btfsc	status,2,c
 21541  0038EA  D00C               	goto	i2l7689
 21542                           
 21543                           ; BSR set to: 1
 21544                           ;UI.c: 381: change_state_to_menu_11();
 21545  0038EC  EC7B  F02C         	call	_change_state_to_menu_11	;wreg free
 21546                           
 21547                           ;UI.c: 382: firstboot = 0;
 21548  0038F0  0E00               	movlw	0
 21549  0038F2  0101               	movlb	1	; () banked
 21550  0038F4  6F3C               	movwf	(_firstboot+1)& (0+255),b
 21551  0038F6  0E00               	movlw	0
 21552  0038F8  6F3B               	movwf	_firstboot& (0+255),b
 21553                           
 21554                           ; BSR set to: 1
 21555                           ;UI.c: 383: return 0;
 21556  0038FA  0E00               	movlw	0
 21557  0038FC  6E2B               	movwf	?_inputHandler+1,c
 21558  0038FE  0E00               	movlw	0
 21559  003900  6E2A               	movwf	?_inputHandler,c
 21560                           
 21561                           ; BSR set to: 1
 21562  003902  0012               	return	
 21563  003904                     i2l7689:
 21564                           
 21565                           ; BSR set to: 1
 21566                           ;UI.c: 384: }
 21567                           ;UI.c: 385: if (logstate){
 21568  003904  0100               	movlb	0	; () banked
 21569  003906  51F8               	movf	_logstate& (0+255),w,b
 21570  003908  0100               	movlb	0	; () banked
 21571  00390A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 21572  00390C  B4D8               	btfsc	status,2,c
 21573  00390E  D0C7               	goto	i2l7807
 21574                           
 21575                           ; BSR set to: 0
 21576                           ;UI.c: 386: if(input == 'C' && PORTBbits.RB1 == 1){
 21577  003910  0E43               	movlw	67
 21578  003912  187D               	xorwf	_input,w,c	;volatile
 21579  003914  A4D8               	btfss	status,2,c
 21580  003916  D012               	goto	i2l7707
 21581                           
 21582                           ; BSR set to: 0
 21583  003918  B281               	btfsc	3969,1,c	;volatile
 21584  00391A  D009               	goto	i2l7699
 21585  00391C  D00F               	goto	i2l7707
 21586  00391E                     i2l7697:
 21587                           
 21588                           ;UI.c: 389: _delay((unsigned long)((10)*(32000000/4000.0)));
 21589  00391E  0E68               	movlw	104
 21590  003920  6E2C               	movwf	??_inputHandler& (0+255),c
 21591  003922  0EE4               	movlw	228
 21592  003924                     i2u1136_47:
 21593  003924  2EE8               	decfsz	wreg,f,c
 21594  003926  D7FE               	bra	i2u1136_47
 21595  003928  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 21596  00392A  D7FC               	bra	i2u1136_47
 21597  00392C  D000               	nop2	
 21598  00392E                     i2l7699:
 21599  00392E  B281               	btfsc	3969,1,c	;volatile
 21600  003930  D7F6               	goto	i2l7697
 21601  003932                     i2l7701:
 21602                           
 21603                           ;UI.c: 390: }
 21604                           ;UI.c: 391: return 0;
 21605  003932  0E00               	movlw	0
 21606  003934  6E2B               	movwf	?_inputHandler+1,c
 21607  003936  0E00               	movlw	0
 21608  003938  6E2A               	movwf	?_inputHandler,c
 21609  00393A  0012               	return	
 21610  00393C                     i2l7707:
 21611                           
 21612                           ;UI.c: 393: else if (input == 'D'){
 21613  00393C  0E44               	movlw	68
 21614  00393E  187D               	xorwf	_input,w,c	;volatile
 21615  003940  A4D8               	btfss	status,2,c
 21616  003942  D7F7               	goto	i2l7701
 21617                           
 21618                           ;UI.c: 395: logstate = 0;
 21619  003944  0E00               	movlw	0
 21620  003946  0100               	movlb	0	; () banked
 21621  003948  6FF9               	movwf	(_logstate+1)& (0+255),b
 21622  00394A  0E00               	movlw	0
 21623  00394C  6FF8               	movwf	_logstate& (0+255),b
 21624                           
 21625                           ;UI.c: 396: switch(cur_state){
 21626  00394E  D012               	goto	i2l7725
 21627  003950                     i2l7711:
 21628                           
 21629                           ;UI.c: 398: change_state_to_logs_11();
 21630  003950  ECF3  F02C         	call	_change_state_to_logs_11	;wreg free
 21631                           
 21632                           ;UI.c: 399: break;
 21633  003954  D7EE               	goto	i2l7701
 21634  003956                     i2l7713:
 21635                           
 21636                           ;UI.c: 401: change_state_to_logs_12();
 21637  003956  ECDB  F02C         	call	_change_state_to_logs_12	;wreg free
 21638                           
 21639                           ;UI.c: 402: break;
 21640  00395A  D7EB               	goto	i2l7701
 21641  00395C                     i2l7715:
 21642                           
 21643                           ;UI.c: 404: change_state_to_logs_22();
 21644  00395C  ECC3  F02C         	call	_change_state_to_logs_22	;wreg free
 21645                           
 21646                           ;UI.c: 405: break;
 21647  003960  D7E8               	goto	i2l7701
 21648  003962                     i2l7717:
 21649                           
 21650                           ;UI.c: 407: change_state_to_logs_23();
 21651  003962  EC22  F02D         	call	_change_state_to_logs_23	;wreg free
 21652                           
 21653                           ;UI.c: 408: break;
 21654  003966  D7E5               	goto	i2l7701
 21655  003968                     i2l7719:
 21656                           
 21657                           ;UI.c: 410: change_state_to_logs_33();
 21658  003968  ECAB  F02C         	call	_change_state_to_logs_33	;wreg free
 21659                           
 21660                           ;UI.c: 411: break;
 21661  00396C  D7E2               	goto	i2l7701
 21662  00396E                     i2l7721:
 21663                           
 21664                           ;UI.c: 413: change_state_to_logs_34();
 21665  00396E  EC93  F02C         	call	_change_state_to_logs_34	;wreg free
 21666                           
 21667                           ;UI.c: 415: }
 21668                           
 21669                           ;UI.c: 414: break;
 21670  003972  D7DF               	goto	i2l7701
 21671  003974                     i2l7725:
 21672  003974  C0E6  F02C         	movff	_cur_state,??_inputHandler
 21673  003978  C0E7  F02D         	movff	_cur_state+1,??_inputHandler+1
 21674                           
 21675                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 21676                           ; Switch size 1, requested type "space"
 21677                           ; Number of cases is 2, Range of values is 3 to 4
 21678                           ; switch strategies available:
 21679                           ; Name         Instructions Cycles
 21680                           ; simple_byte            7     4 (average)
 21681                           ;	Chosen strategy is simple_byte
 21682  00397C  502D               	movf	??_inputHandler+1,w,c
 21683  00397E  0A03               	xorlw	3	; case 3
 21684  003980  B4D8               	btfsc	status,2,c
 21685  003982  D004               	goto	i2l10799
 21686  003984  0A07               	xorlw	7	; case 4
 21687  003986  B4D8               	btfsc	status,2,c
 21688  003988  D00F               	goto	i2l10801
 21689  00398A  D7D3               	goto	i2l7701
 21690  00398C                     i2l10799:
 21691                           
 21692                           ; Switch size 1, requested type "space"
 21693                           ; Number of cases is 4, Range of values is 243 to 255
 21694                           ; switch strategies available:
 21695                           ; Name         Instructions Cycles
 21696                           ; simple_byte           13     7 (average)
 21697                           ;	Chosen strategy is simple_byte
 21698  00398C  502C               	movf	??_inputHandler,w,c
 21699  00398E  0AF3               	xorlw	243	; case 243
 21700  003990  B4D8               	btfsc	status,2,c
 21701  003992  D7DE               	goto	i2l7711
 21702  003994  0A07               	xorlw	7	; case 244
 21703  003996  B4D8               	btfsc	status,2,c
 21704  003998  D7DE               	goto	i2l7713
 21705  00399A  0A0A               	xorlw	10	; case 254
 21706  00399C  B4D8               	btfsc	status,2,c
 21707  00399E  D7DE               	goto	i2l7715
 21708  0039A0  0A01               	xorlw	1	; case 255
 21709  0039A2  B4D8               	btfsc	status,2,c
 21710  0039A4  D7DE               	goto	i2l7717
 21711  0039A6  D7C5               	goto	i2l7701
 21712  0039A8                     i2l10801:
 21713                           
 21714                           ; Switch size 1, requested type "space"
 21715                           ; Number of cases is 2, Range of values is 9 to 10
 21716                           ; switch strategies available:
 21717                           ; Name         Instructions Cycles
 21718                           ; simple_byte            7     4 (average)
 21719                           ;	Chosen strategy is simple_byte
 21720  0039A8  502C               	movf	??_inputHandler,w,c
 21721  0039AA  0A09               	xorlw	9	; case 9
 21722  0039AC  B4D8               	btfsc	status,2,c
 21723  0039AE  D7DC               	goto	i2l7719
 21724  0039B0  0A03               	xorlw	3	; case 10
 21725  0039B2  B4D8               	btfsc	status,2,c
 21726  0039B4  D7DC               	goto	i2l7721
 21727  0039B6  D7BD               	goto	i2l7701
 21728  0039B8                     i2l7737:
 21729                           
 21730                           ;UI.c: 425: if(cur_state == 11){
 21731  0039B8  0E0B               	movlw	11
 21732  0039BA  0100               	movlb	0	; () banked
 21733  0039BC  19E6               	xorwf	_cur_state& (0+255),w,b
 21734  0039BE  0100               	movlb	0	; () banked
 21735  0039C0  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21736  0039C2  A4D8               	btfss	status,2,c
 21737  0039C4  D005               	goto	i2l7745
 21738                           
 21739                           ; BSR set to: 0
 21740                           ;UI.c: 426: return 0;
 21741  0039C6  0E00               	movlw	0
 21742  0039C8  6E2B               	movwf	?_inputHandler+1,c
 21743  0039CA  0E00               	movlw	0
 21744  0039CC  6E2A               	movwf	?_inputHandler,c
 21745                           
 21746                           ; BSR set to: 0
 21747  0039CE  0012               	return	
 21748  0039D0                     i2l7745:
 21749                           
 21750                           ; BSR set to: 0
 21751                           ;UI.c: 428: else{
 21752                           ;UI.c: 429: change_state_to_menu_11();
 21753  0039D0  EC7B  F02C         	call	_change_state_to_menu_11	;wreg free
 21754                           
 21755                           ;UI.c: 430: }
 21756                           ;UI.c: 431: return 0;
 21757  0039D4  0E00               	movlw	0
 21758  0039D6  6E2B               	movwf	?_inputHandler+1,c
 21759  0039D8  0E00               	movlw	0
 21760  0039DA  6E2A               	movwf	?_inputHandler,c
 21761  0039DC  0012               	return	
 21762  0039DE                     i2l7751:
 21763                           
 21764                           ;UI.c: 433: if(cur_state == 22 || cur_state == 12){
 21765  0039DE  0E16               	movlw	22
 21766  0039E0  0100               	movlb	0	; () banked
 21767  0039E2  19E6               	xorwf	_cur_state& (0+255),w,b
 21768  0039E4  0100               	movlb	0	; () banked
 21769  0039E6  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21770  0039E8  B4D8               	btfsc	status,2,c
 21771  0039EA  D007               	goto	i2l7755
 21772                           
 21773                           ; BSR set to: 0
 21774  0039EC  0E0C               	movlw	12
 21775  0039EE  0100               	movlb	0	; () banked
 21776  0039F0  19E6               	xorwf	_cur_state& (0+255),w,b
 21777  0039F2  0100               	movlb	0	; () banked
 21778  0039F4  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21779  0039F6  A4D8               	btfss	status,2,c
 21780  0039F8  D005               	goto	i2l7761
 21781  0039FA                     i2l7755:
 21782                           
 21783                           ; BSR set to: 0
 21784                           ;UI.c: 434: return 0;
 21785  0039FA  0E00               	movlw	0
 21786  0039FC  6E2B               	movwf	?_inputHandler+1,c
 21787  0039FE  0E00               	movlw	0
 21788  003A00  6E2A               	movwf	?_inputHandler,c
 21789                           
 21790                           ; BSR set to: 0
 21791  003A02  0012               	return	
 21792  003A04                     i2l7761:
 21793                           
 21794                           ; BSR set to: 0
 21795                           ;UI.c: 436: else if(cur_state == 23){
 21796  003A04  0E17               	movlw	23
 21797  003A06  0100               	movlb	0	; () banked
 21798  003A08  19E6               	xorwf	_cur_state& (0+255),w,b
 21799  003A0A  0100               	movlb	0	; () banked
 21800  003A0C  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21801  003A0E  A4D8               	btfss	status,2,c
 21802  003A10  D003               	goto	i2l7765
 21803                           
 21804                           ; BSR set to: 0
 21805                           ;UI.c: 437: change_state_to_menu_22();
 21806  003A12  EC33  F02C         	call	i2_change_state_to_menu_22	;wreg free
 21807                           
 21808                           ;UI.c: 438: }
 21809  003A16  D002               	goto	i2l7767
 21810  003A18                     i2l7765:
 21811                           
 21812                           ;UI.c: 439: else{
 21813                           ;UI.c: 440: change_state_to_menu_12();
 21814  003A18  EC4B  F02C         	call	i2_change_state_to_menu_12	;wreg free
 21815  003A1C                     i2l7767:
 21816                           
 21817                           ;UI.c: 441: }
 21818                           ;UI.c: 442: return 0;
 21819  003A1C  0E00               	movlw	0
 21820  003A1E  6E2B               	movwf	?_inputHandler+1,c
 21821  003A20  0E00               	movlw	0
 21822  003A22  6E2A               	movwf	?_inputHandler,c
 21823  003A24  0012               	return	
 21824  003A26                     i2l7771:
 21825                           
 21826                           ;UI.c: 444: if(cur_state == 23){
 21827  003A26  0E17               	movlw	23
 21828  003A28  0100               	movlb	0	; () banked
 21829  003A2A  19E6               	xorwf	_cur_state& (0+255),w,b
 21830  003A2C  0100               	movlb	0	; () banked
 21831  003A2E  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21832  003A30  A4D8               	btfss	status,2,c
 21833  003A32  D005               	goto	i2l7779
 21834                           
 21835                           ; BSR set to: 0
 21836                           ;UI.c: 445: return 0;
 21837  003A34  0E00               	movlw	0
 21838  003A36  6E2B               	movwf	?_inputHandler+1,c
 21839  003A38  0E00               	movlw	0
 21840  003A3A  6E2A               	movwf	?_inputHandler,c
 21841                           
 21842                           ; BSR set to: 0
 21843  003A3C  0012               	return	
 21844  003A3E                     i2l7779:
 21845                           
 21846                           ; BSR set to: 0
 21847                           ;UI.c: 447: else{
 21848                           ;UI.c: 448: change_state_to_menu_23();
 21849  003A3E  EC63  F02C         	call	_change_state_to_menu_23	;wreg free
 21850                           
 21851                           ;UI.c: 449: }
 21852                           ;UI.c: 450: return 0;
 21853  003A42  0E00               	movlw	0
 21854  003A44  6E2B               	movwf	?_inputHandler+1,c
 21855  003A46  0E00               	movlw	0
 21856  003A48  6E2A               	movwf	?_inputHandler,c
 21857  003A4A  0012               	return	
 21858  003A4C                     i2l7785:
 21859                           
 21860                           ;UI.c: 453: up = 1;
 21861  003A4C  0E00               	movlw	0
 21862  003A4E  6E76               	movwf	_up+1,c
 21863  003A50  0E01               	movlw	1
 21864  003A52  6E75               	movwf	_up,c
 21865                           
 21866                           ;UI.c: 454: return 1;
 21867  003A54  0E00               	movlw	0
 21868  003A56  6E2B               	movwf	?_inputHandler+1,c
 21869  003A58  0E01               	movlw	1
 21870  003A5A  6E2A               	movwf	?_inputHandler,c
 21871  003A5C  0012               	return	
 21872  003A5E                     i2l7789:
 21873                           
 21874                           ;UI.c: 456: down = 1;
 21875  003A5E  0E00               	movlw	0
 21876  003A60  6E66               	movwf	_down+1,c
 21877  003A62  0E01               	movlw	1
 21878  003A64  6E65               	movwf	_down,c
 21879                           
 21880                           ;UI.c: 457: return 1;
 21881  003A66  0E00               	movlw	0
 21882  003A68  6E2B               	movwf	?_inputHandler+1,c
 21883  003A6A  0E01               	movlw	1
 21884  003A6C  6E2A               	movwf	?_inputHandler,c
 21885  003A6E  0012               	return	
 21886  003A70                     i2l7793:
 21887                           
 21888                           ;UI.c: 459: enter = 1;
 21889  003A70  0E00               	movlw	0
 21890  003A72  6E68               	movwf	_enter+1,c
 21891  003A74  0E01               	movlw	1
 21892  003A76  6E67               	movwf	_enter,c
 21893                           
 21894                           ;UI.c: 460: return 1;
 21895  003A78  0E00               	movlw	0
 21896  003A7A  6E2B               	movwf	?_inputHandler+1,c
 21897  003A7C  0E01               	movlw	1
 21898  003A7E  6E2A               	movwf	?_inputHandler,c
 21899  003A80  0012               	return	
 21900  003A82                     i2l7797:
 21901                           
 21902                           ;UI.c: 462: back = 1;
 21903  003A82  0E00               	movlw	0
 21904  003A84  6E64               	movwf	_back+1,c
 21905  003A86  0E01               	movlw	1
 21906  003A88  6E63               	movwf	_back,c
 21907                           
 21908                           ;UI.c: 463: return 1;
 21909  003A8A  0E00               	movlw	0
 21910  003A8C  6E2B               	movwf	?_inputHandler+1,c
 21911  003A8E  0E01               	movlw	1
 21912  003A90  6E2A               	movwf	?_inputHandler,c
 21913  003A92  0012               	return	
 21914  003A94                     i2l7801:
 21915                           
 21916                           ;UI.c: 466: return 1;
 21917  003A94  0E00               	movlw	0
 21918  003A96  6E2B               	movwf	?_inputHandler+1,c
 21919  003A98  0E01               	movlw	1
 21920  003A9A  6E2A               	movwf	?_inputHandler,c
 21921                           
 21922                           ;UI.c: 467: }
 21923  003A9C  0012               	return	
 21924  003A9E                     i2l7807:
 21925  003A9E  507D               	movf	_input,w,c	;volatile
 21926                           
 21927                           ; Switch size 1, requested type "space"
 21928                           ; Number of cases is 7, Range of values is 49 to 68
 21929                           ; switch strategies available:
 21930                           ; Name         Instructions Cycles
 21931                           ; simple_byte           22    12 (average)
 21932                           ;	Chosen strategy is simple_byte
 21933  003AA0  0A31               	xorlw	49	; case 49
 21934  003AA2  B4D8               	btfsc	status,2,c
 21935  003AA4  D789               	goto	i2l7737
 21936  003AA6  0A03               	xorlw	3	; case 50
 21937  003AA8  B4D8               	btfsc	status,2,c
 21938  003AAA  D799               	goto	i2l7751
 21939  003AAC  0A01               	xorlw	1	; case 51
 21940  003AAE  B4D8               	btfsc	status,2,c
 21941  003AB0  D7BA               	goto	i2l7771
 21942  003AB2  0A72               	xorlw	114	; case 65
 21943  003AB4  B4D8               	btfsc	status,2,c
 21944  003AB6  D7CA               	goto	i2l7785
 21945  003AB8  0A03               	xorlw	3	; case 66
 21946  003ABA  B4D8               	btfsc	status,2,c
 21947  003ABC  D7D0               	goto	i2l7789
 21948  003ABE  0A01               	xorlw	1	; case 67
 21949  003AC0  B4D8               	btfsc	status,2,c
 21950  003AC2  D7D6               	goto	i2l7793
 21951  003AC4  0A07               	xorlw	7	; case 68
 21952  003AC6  B4D8               	btfsc	status,2,c
 21953  003AC8  D7DC               	goto	i2l7797
 21954  003ACA  D7E4               	goto	i2l7801
 21955  003ACC                     __end_of_inputHandler:
 21956                           	opt stack 0
 21957                           pclatu	equ	0xFFB
 21958                           pclath	equ	0xFFA
 21959                           tblptru	equ	0xFF8
 21960                           tblptrh	equ	0xFF7
 21961                           tblptrl	equ	0xFF6
 21962                           tablat	equ	0xFF5
 21963                           prodh	equ	0xFF4
 21964                           prodl	equ	0xFF3
 21965                           intcon	equ	0xFF2
 21966                           intcon2	equ	0xFF1
 21967                           intcon3	equ	0xFF0
 21968                           indf0	equ	0xFEF
 21969                           postinc0	equ	0xFEE
 21970                           fsr0h	equ	0xFEA
 21971                           fsr0l	equ	0xFE9
 21972                           wreg	equ	0xFE8
 21973                           postdec1	equ	0xFE5
 21974                           fsr1h	equ	0xFE2
 21975                           fsr1l	equ	0xFE1
 21976                           indf2	equ	0xFDF
 21977                           postinc2	equ	0xFDE
 21978                           postdec2	equ	0xFDD
 21979                           fsr2h	equ	0xFDA
 21980                           fsr2l	equ	0xFD9
 21981                           status	equ	0xFD8
 21982                           
 21983 ;; *************** function i2_change_state_to_menu_22 *****************
 21984 ;; Defined at:
 21985 ;;		line 501 in file "UI.c"
 21986 ;; Parameters:    Size  Location     Type
 21987 ;;		None
 21988 ;; Auto vars:     Size  Location     Type
 21989 ;;		None
 21990 ;; Return value:  Size  Location     Type
 21991 ;;                  1    wreg      void 
 21992 ;; Registers used:
 21993 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21994 ;; Tracked objects:
 21995 ;;		On entry : 0/0
 21996 ;;		On exit  : 0/0
 21997 ;;		Unchanged: 0/0
 21998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22002 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22003 ;;Total ram usage:        0 bytes
 22004 ;; Hardware stack levels used:    1
 22005 ;; Hardware stack levels required when called:    3
 22006 ;; This function calls:
 22007 ;;		i2_lcdInst
 22008 ;;		i2_printf
 22009 ;; This function is called by:
 22010 ;;		_updateMenu
 22011 ;;		_inputHandler
 22012 ;; This function uses a non-reentrant model
 22013 ;;
 22014                           
 22015                           	psect	text72
 22016  005866                     __ptext72:
 22017                           	opt stack 0
 22018  005866                     i2_change_state_to_menu_22:
 22019                           	opt stack 19
 22020                           
 22021                           ;UI.c: 502: cur_state = 22;
 22022                           
 22023                           ;incstack = 0
 22024  005866  0E00               	movlw	0
 22025  005868  0100               	movlb	0	; () banked
 22026  00586A  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22027  00586C  0E16               	movlw	22
 22028  00586E  6FE6               	movwf	_cur_state& (0+255),b
 22029                           
 22030                           ; BSR set to: 0
 22031                           ;UI.c: 504: lcdInst(0b10000000);;
 22032  005870  0E80               	movlw	128
 22033  005872  EC67  F02E         	call	i2_lcdInst
 22034                           
 22035                           ;UI.c: 505: printf("2. SORT        <");
 22036  005876  0ED8               	movlw	low STR_34
 22037  005878  6E0D               	movwf	i2printf@f,c
 22038  00587A  0EFD               	movlw	high STR_34
 22039  00587C  6E0E               	movwf	i2printf@f+1,c
 22040  00587E  EC28  F012         	call	i2_printf	;wreg free
 22041                           
 22042                           ;UI.c: 506: lcdInst(0b11000000);;
 22043  005882  0EC0               	movlw	192
 22044  005884  EC67  F02E         	call	i2_lcdInst
 22045                           
 22046                           ;UI.c: 507: printf("3. LOGS         ");
 22047  005888  0E1D               	movlw	low STR_36
 22048  00588A  6E0D               	movwf	i2printf@f,c
 22049  00588C  0EFD               	movlw	high STR_36
 22050  00588E  6E0E               	movwf	i2printf@f+1,c
 22051  005890  EC28  F012         	call	i2_printf	;wreg free
 22052  005894  0012               	return		;funcret
 22053  005896                     __end_ofi2_change_state_to_menu_22:
 22054                           	opt stack 0
 22055                           pclatu	equ	0xFFB
 22056                           pclath	equ	0xFFA
 22057                           tblptru	equ	0xFF8
 22058                           tblptrh	equ	0xFF7
 22059                           tblptrl	equ	0xFF6
 22060                           tablat	equ	0xFF5
 22061                           prodh	equ	0xFF4
 22062                           prodl	equ	0xFF3
 22063                           intcon	equ	0xFF2
 22064                           intcon2	equ	0xFF1
 22065                           intcon3	equ	0xFF0
 22066                           indf0	equ	0xFEF
 22067                           postinc0	equ	0xFEE
 22068                           fsr0h	equ	0xFEA
 22069                           fsr0l	equ	0xFE9
 22070                           wreg	equ	0xFE8
 22071                           postdec1	equ	0xFE5
 22072                           fsr1h	equ	0xFE2
 22073                           fsr1l	equ	0xFE1
 22074                           indf2	equ	0xFDF
 22075                           postinc2	equ	0xFDE
 22076                           postdec2	equ	0xFDD
 22077                           fsr2h	equ	0xFDA
 22078                           fsr2l	equ	0xFD9
 22079                           status	equ	0xFD8
 22080                           
 22081 ;; *************** function i2_change_state_to_menu_12 *****************
 22082 ;; Defined at:
 22083 ;;		line 493 in file "UI.c"
 22084 ;; Parameters:    Size  Location     Type
 22085 ;;		None
 22086 ;; Auto vars:     Size  Location     Type
 22087 ;;		None
 22088 ;; Return value:  Size  Location     Type
 22089 ;;                  1    wreg      void 
 22090 ;; Registers used:
 22091 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22092 ;; Tracked objects:
 22093 ;;		On entry : 0/0
 22094 ;;		On exit  : 0/0
 22095 ;;		Unchanged: 0/0
 22096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22100 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22101 ;;Total ram usage:        0 bytes
 22102 ;; Hardware stack levels used:    1
 22103 ;; Hardware stack levels required when called:    3
 22104 ;; This function calls:
 22105 ;;		i2_lcdInst
 22106 ;;		i2_printf
 22107 ;; This function is called by:
 22108 ;;		_updateMenu
 22109 ;;		_inputHandler
 22110 ;; This function uses a non-reentrant model
 22111 ;;
 22112                           
 22113                           	psect	text73
 22114  005896                     __ptext73:
 22115                           	opt stack 0
 22116  005896                     i2_change_state_to_menu_12:
 22117                           	opt stack 19
 22118                           
 22119                           ;UI.c: 494: cur_state = 12;
 22120                           
 22121                           ;incstack = 0
 22122  005896  0E00               	movlw	0
 22123  005898  0100               	movlb	0	; () banked
 22124  00589A  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22125  00589C  0E0C               	movlw	12
 22126  00589E  6FE6               	movwf	_cur_state& (0+255),b
 22127                           
 22128                           ; BSR set to: 0
 22129                           ;UI.c: 496: lcdInst(0b10000000);;
 22130  0058A0  0E80               	movlw	128
 22131  0058A2  EC67  F02E         	call	i2_lcdInst
 22132                           
 22133                           ;UI.c: 497: printf("1. DATE/TIME    ");
 22134  0058A6  0E3F               	movlw	low STR_33
 22135  0058A8  6E0D               	movwf	i2printf@f,c
 22136  0058AA  0EFD               	movlw	high STR_33
 22137  0058AC  6E0E               	movwf	i2printf@f+1,c
 22138  0058AE  EC28  F012         	call	i2_printf	;wreg free
 22139                           
 22140                           ;UI.c: 498: lcdInst(0b11000000);;
 22141  0058B2  0EC0               	movlw	192
 22142  0058B4  EC67  F02E         	call	i2_lcdInst
 22143                           
 22144                           ;UI.c: 499: printf("2. SORT        <");
 22145  0058B8  0ED8               	movlw	low STR_34
 22146  0058BA  6E0D               	movwf	i2printf@f,c
 22147  0058BC  0EFD               	movlw	high STR_34
 22148  0058BE  6E0E               	movwf	i2printf@f+1,c
 22149  0058C0  EC28  F012         	call	i2_printf	;wreg free
 22150  0058C4  0012               	return		;funcret
 22151  0058C6                     __end_ofi2_change_state_to_menu_12:
 22152                           	opt stack 0
 22153                           pclatu	equ	0xFFB
 22154                           pclath	equ	0xFFA
 22155                           tblptru	equ	0xFF8
 22156                           tblptrh	equ	0xFF7
 22157                           tblptrl	equ	0xFF6
 22158                           tablat	equ	0xFF5
 22159                           prodh	equ	0xFF4
 22160                           prodl	equ	0xFF3
 22161                           intcon	equ	0xFF2
 22162                           intcon2	equ	0xFF1
 22163                           intcon3	equ	0xFF0
 22164                           indf0	equ	0xFEF
 22165                           postinc0	equ	0xFEE
 22166                           fsr0h	equ	0xFEA
 22167                           fsr0l	equ	0xFE9
 22168                           wreg	equ	0xFE8
 22169                           postdec1	equ	0xFE5
 22170                           fsr1h	equ	0xFE2
 22171                           fsr1l	equ	0xFE1
 22172                           indf2	equ	0xFDF
 22173                           postinc2	equ	0xFDE
 22174                           postdec2	equ	0xFDD
 22175                           fsr2h	equ	0xFDA
 22176                           fsr2l	equ	0xFD9
 22177                           status	equ	0xFD8
 22178                           
 22179 ;; *************** function _change_state_to_menu_23 *****************
 22180 ;; Defined at:
 22181 ;;		line 509 in file "UI.c"
 22182 ;; Parameters:    Size  Location     Type
 22183 ;;		None
 22184 ;; Auto vars:     Size  Location     Type
 22185 ;;		None
 22186 ;; Return value:  Size  Location     Type
 22187 ;;                  1    wreg      void 
 22188 ;; Registers used:
 22189 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22190 ;; Tracked objects:
 22191 ;;		On entry : 0/0
 22192 ;;		On exit  : 0/0
 22193 ;;		Unchanged: 0/0
 22194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22199 ;;Total ram usage:        0 bytes
 22200 ;; Hardware stack levels used:    1
 22201 ;; Hardware stack levels required when called:    3
 22202 ;; This function calls:
 22203 ;;		i2_lcdInst
 22204 ;;		i2_printf
 22205 ;; This function is called by:
 22206 ;;		_updateMenu
 22207 ;;		_inputHandler
 22208 ;; This function uses a non-reentrant model
 22209 ;;
 22210                           
 22211                           	psect	text74
 22212  0058C6                     __ptext74:
 22213                           	opt stack 0
 22214  0058C6                     _change_state_to_menu_23:
 22215                           	opt stack 18
 22216                           
 22217                           ;UI.c: 510: cur_state = 23;
 22218                           
 22219                           ;incstack = 0
 22220  0058C6  0E00               	movlw	0
 22221  0058C8  0100               	movlb	0	; () banked
 22222  0058CA  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22223  0058CC  0E17               	movlw	23
 22224  0058CE  6FE6               	movwf	_cur_state& (0+255),b
 22225                           
 22226                           ; BSR set to: 0
 22227                           ;UI.c: 512: lcdInst(0b10000000);;
 22228  0058D0  0E80               	movlw	128
 22229  0058D2  EC67  F02E         	call	i2_lcdInst
 22230                           
 22231                           ;UI.c: 513: printf("2. SORT         ");
 22232  0058D6  0E2E               	movlw	low STR_32
 22233  0058D8  6E0D               	movwf	i2printf@f,c
 22234  0058DA  0EFD               	movlw	high STR_32
 22235  0058DC  6E0E               	movwf	i2printf@f+1,c
 22236  0058DE  EC28  F012         	call	i2_printf	;wreg free
 22237                           
 22238                           ;UI.c: 514: lcdInst(0b11000000);;
 22239  0058E2  0EC0               	movlw	192
 22240  0058E4  EC67  F02E         	call	i2_lcdInst
 22241                           
 22242                           ;UI.c: 515: printf("3. LOGS        <");
 22243  0058E8  0EC7               	movlw	low STR_38
 22244  0058EA  6E0D               	movwf	i2printf@f,c
 22245  0058EC  0EFD               	movlw	high STR_38
 22246  0058EE  6E0E               	movwf	i2printf@f+1,c
 22247  0058F0  EC28  F012         	call	i2_printf	;wreg free
 22248  0058F4  0012               	return		;funcret
 22249  0058F6                     __end_of_change_state_to_menu_23:
 22250                           	opt stack 0
 22251                           pclatu	equ	0xFFB
 22252                           pclath	equ	0xFFA
 22253                           tblptru	equ	0xFF8
 22254                           tblptrh	equ	0xFF7
 22255                           tblptrl	equ	0xFF6
 22256                           tablat	equ	0xFF5
 22257                           prodh	equ	0xFF4
 22258                           prodl	equ	0xFF3
 22259                           intcon	equ	0xFF2
 22260                           intcon2	equ	0xFF1
 22261                           intcon3	equ	0xFF0
 22262                           indf0	equ	0xFEF
 22263                           postinc0	equ	0xFEE
 22264                           fsr0h	equ	0xFEA
 22265                           fsr0l	equ	0xFE9
 22266                           wreg	equ	0xFE8
 22267                           postdec1	equ	0xFE5
 22268                           fsr1h	equ	0xFE2
 22269                           fsr1l	equ	0xFE1
 22270                           indf2	equ	0xFDF
 22271                           postinc2	equ	0xFDE
 22272                           postdec2	equ	0xFDD
 22273                           fsr2h	equ	0xFDA
 22274                           fsr2l	equ	0xFD9
 22275                           status	equ	0xFD8
 22276                           
 22277 ;; *************** function _change_state_to_menu_11 *****************
 22278 ;; Defined at:
 22279 ;;		line 485 in file "UI.c"
 22280 ;; Parameters:    Size  Location     Type
 22281 ;;		None
 22282 ;; Auto vars:     Size  Location     Type
 22283 ;;		None
 22284 ;; Return value:  Size  Location     Type
 22285 ;;                  1    wreg      void 
 22286 ;; Registers used:
 22287 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22288 ;; Tracked objects:
 22289 ;;		On entry : 0/0
 22290 ;;		On exit  : 0/0
 22291 ;;		Unchanged: 0/0
 22292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22296 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22297 ;;Total ram usage:        0 bytes
 22298 ;; Hardware stack levels used:    1
 22299 ;; Hardware stack levels required when called:    3
 22300 ;; This function calls:
 22301 ;;		i2_lcdInst
 22302 ;;		i2_printf
 22303 ;; This function is called by:
 22304 ;;		_updateMenu
 22305 ;;		_inputHandler
 22306 ;; This function uses a non-reentrant model
 22307 ;;
 22308                           
 22309                           	psect	text75
 22310  0058F6                     __ptext75:
 22311                           	opt stack 0
 22312  0058F6                     _change_state_to_menu_11:
 22313                           	opt stack 18
 22314                           
 22315                           ;UI.c: 486: cur_state = 11;
 22316                           
 22317                           ;incstack = 0
 22318  0058F6  0E00               	movlw	0
 22319  0058F8  0100               	movlb	0	; () banked
 22320  0058FA  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22321  0058FC  0E0B               	movlw	11
 22322  0058FE  6FE6               	movwf	_cur_state& (0+255),b
 22323                           
 22324                           ; BSR set to: 0
 22325                           ;UI.c: 488: lcdInst(0b10000000);;
 22326  005900  0E80               	movlw	128
 22327  005902  EC67  F02E         	call	i2_lcdInst
 22328                           
 22329                           ;UI.c: 489: printf("1. DATE/TIME   <");
 22330  005906  0EE9               	movlw	low STR_31
 22331  005908  6E0D               	movwf	i2printf@f,c
 22332  00590A  0EFD               	movlw	high STR_31
 22333  00590C  6E0E               	movwf	i2printf@f+1,c
 22334  00590E  EC28  F012         	call	i2_printf	;wreg free
 22335                           
 22336                           ;UI.c: 490: lcdInst(0b11000000);;
 22337  005912  0EC0               	movlw	192
 22338  005914  EC67  F02E         	call	i2_lcdInst
 22339                           
 22340                           ;UI.c: 491: printf("2. SORT         ");
 22341  005918  0E2E               	movlw	low STR_32
 22342  00591A  6E0D               	movwf	i2printf@f,c
 22343  00591C  0EFD               	movlw	high STR_32
 22344  00591E  6E0E               	movwf	i2printf@f+1,c
 22345  005920  EC28  F012         	call	i2_printf	;wreg free
 22346  005924  0012               	return		;funcret
 22347  005926                     __end_of_change_state_to_menu_11:
 22348                           	opt stack 0
 22349                           pclatu	equ	0xFFB
 22350                           pclath	equ	0xFFA
 22351                           tblptru	equ	0xFF8
 22352                           tblptrh	equ	0xFF7
 22353                           tblptrl	equ	0xFF6
 22354                           tablat	equ	0xFF5
 22355                           prodh	equ	0xFF4
 22356                           prodl	equ	0xFF3
 22357                           intcon	equ	0xFF2
 22358                           intcon2	equ	0xFF1
 22359                           intcon3	equ	0xFF0
 22360                           indf0	equ	0xFEF
 22361                           postinc0	equ	0xFEE
 22362                           fsr0h	equ	0xFEA
 22363                           fsr0l	equ	0xFE9
 22364                           wreg	equ	0xFE8
 22365                           postdec1	equ	0xFE5
 22366                           fsr1h	equ	0xFE2
 22367                           fsr1l	equ	0xFE1
 22368                           indf2	equ	0xFDF
 22369                           postinc2	equ	0xFDE
 22370                           postdec2	equ	0xFDD
 22371                           fsr2h	equ	0xFDA
 22372                           fsr2l	equ	0xFD9
 22373                           status	equ	0xFD8
 22374                           
 22375 ;; *************** function _change_state_to_logs_34 *****************
 22376 ;; Defined at:
 22377 ;;		line 552 in file "UI.c"
 22378 ;; Parameters:    Size  Location     Type
 22379 ;;		None
 22380 ;; Auto vars:     Size  Location     Type
 22381 ;;		None
 22382 ;; Return value:  Size  Location     Type
 22383 ;;                  1    wreg      void 
 22384 ;; Registers used:
 22385 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22386 ;; Tracked objects:
 22387 ;;		On entry : 0/0
 22388 ;;		On exit  : 0/0
 22389 ;;		Unchanged: 0/0
 22390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22395 ;;Total ram usage:        0 bytes
 22396 ;; Hardware stack levels used:    1
 22397 ;; Hardware stack levels required when called:    3
 22398 ;; This function calls:
 22399 ;;		i2_lcdInst
 22400 ;;		i2_printf
 22401 ;; This function is called by:
 22402 ;;		_updateMenu
 22403 ;;		_inputHandler
 22404 ;; This function uses a non-reentrant model
 22405 ;;
 22406                           
 22407                           	psect	text76
 22408  005926                     __ptext76:
 22409                           	opt stack 0
 22410  005926                     _change_state_to_logs_34:
 22411                           	opt stack 18
 22412                           
 22413                           ;UI.c: 553: cur_state = 1034;
 22414                           
 22415                           ;incstack = 0
 22416  005926  0E04               	movlw	4
 22417  005928  0100               	movlb	0	; () banked
 22418  00592A  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22419  00592C  0E0A               	movlw	10
 22420  00592E  6FE6               	movwf	_cur_state& (0+255),b
 22421                           
 22422                           ; BSR set to: 0
 22423                           ;UI.c: 554: lcdInst(0b10000000);;
 22424  005930  0E80               	movlw	128
 22425  005932  EC67  F02E         	call	i2_lcdInst
 22426                           
 22427                           ;UI.c: 555: printf("LOG 3           ");
 22428  005936  0EFB               	movlw	low STR_44
 22429  005938  6E0D               	movwf	i2printf@f,c
 22430  00593A  0EFC               	movlw	high STR_44
 22431  00593C  6E0E               	movwf	i2printf@f+1,c
 22432  00593E  EC28  F012         	call	i2_printf	;wreg free
 22433                           
 22434                           ;UI.c: 556: lcdInst(0b11000000);;
 22435  005942  0EC0               	movlw	192
 22436  005944  EC67  F02E         	call	i2_lcdInst
 22437                           
 22438                           ;UI.c: 557: printf("LOG 4          <");
 22439  005948  0EB6               	movlw	low STR_50
 22440  00594A  6E0D               	movwf	i2printf@f,c
 22441  00594C  0EFD               	movlw	high STR_50
 22442  00594E  6E0E               	movwf	i2printf@f+1,c
 22443  005950  EC28  F012         	call	i2_printf	;wreg free
 22444  005954  0012               	return		;funcret
 22445  005956                     __end_of_change_state_to_logs_34:
 22446                           	opt stack 0
 22447                           pclatu	equ	0xFFB
 22448                           pclath	equ	0xFFA
 22449                           tblptru	equ	0xFF8
 22450                           tblptrh	equ	0xFF7
 22451                           tblptrl	equ	0xFF6
 22452                           tablat	equ	0xFF5
 22453                           prodh	equ	0xFF4
 22454                           prodl	equ	0xFF3
 22455                           intcon	equ	0xFF2
 22456                           intcon2	equ	0xFF1
 22457                           intcon3	equ	0xFF0
 22458                           indf0	equ	0xFEF
 22459                           postinc0	equ	0xFEE
 22460                           fsr0h	equ	0xFEA
 22461                           fsr0l	equ	0xFE9
 22462                           wreg	equ	0xFE8
 22463                           postdec1	equ	0xFE5
 22464                           fsr1h	equ	0xFE2
 22465                           fsr1l	equ	0xFE1
 22466                           indf2	equ	0xFDF
 22467                           postinc2	equ	0xFDE
 22468                           postdec2	equ	0xFDD
 22469                           fsr2h	equ	0xFDA
 22470                           fsr2l	equ	0xFD9
 22471                           status	equ	0xFD8
 22472                           
 22473 ;; *************** function _change_state_to_logs_33 *****************
 22474 ;; Defined at:
 22475 ;;		line 545 in file "UI.c"
 22476 ;; Parameters:    Size  Location     Type
 22477 ;;		None
 22478 ;; Auto vars:     Size  Location     Type
 22479 ;;		None
 22480 ;; Return value:  Size  Location     Type
 22481 ;;                  1    wreg      void 
 22482 ;; Registers used:
 22483 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22484 ;; Tracked objects:
 22485 ;;		On entry : 0/0
 22486 ;;		On exit  : 0/0
 22487 ;;		Unchanged: 0/0
 22488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22493 ;;Total ram usage:        0 bytes
 22494 ;; Hardware stack levels used:    1
 22495 ;; Hardware stack levels required when called:    3
 22496 ;; This function calls:
 22497 ;;		i2_lcdInst
 22498 ;;		i2_printf
 22499 ;; This function is called by:
 22500 ;;		_updateMenu
 22501 ;;		_inputHandler
 22502 ;; This function uses a non-reentrant model
 22503 ;;
 22504                           
 22505                           	psect	text77
 22506  005956                     __ptext77:
 22507                           	opt stack 0
 22508  005956                     _change_state_to_logs_33:
 22509                           	opt stack 18
 22510                           
 22511                           ;UI.c: 546: cur_state = 1033;
 22512                           
 22513                           ;incstack = 0
 22514  005956  0E04               	movlw	4
 22515  005958  0100               	movlb	0	; () banked
 22516  00595A  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22517  00595C  0E09               	movlw	9
 22518  00595E  6FE6               	movwf	_cur_state& (0+255),b
 22519                           
 22520                           ; BSR set to: 0
 22521                           ;UI.c: 547: lcdInst(0b10000000);;
 22522  005960  0E80               	movlw	128
 22523  005962  EC67  F02E         	call	i2_lcdInst
 22524                           
 22525                           ;UI.c: 548: printf("LOG 3          <");
 22526  005966  0EA5               	movlw	low STR_46
 22527  005968  6E0D               	movwf	i2printf@f,c
 22528  00596A  0EFD               	movlw	high STR_46
 22529  00596C  6E0E               	movwf	i2printf@f+1,c
 22530  00596E  EC28  F012         	call	i2_printf	;wreg free
 22531                           
 22532                           ;UI.c: 549: lcdInst(0b11000000);;
 22533  005972  0EC0               	movlw	192
 22534  005974  EC67  F02E         	call	i2_lcdInst
 22535                           
 22536                           ;UI.c: 550: printf("LOG 4           ");
 22537  005978  0E0C               	movlw	low STR_48
 22538  00597A  6E0D               	movwf	i2printf@f,c
 22539  00597C  0EFD               	movlw	high STR_48
 22540  00597E  6E0E               	movwf	i2printf@f+1,c
 22541  005980  EC28  F012         	call	i2_printf	;wreg free
 22542  005984  0012               	return		;funcret
 22543  005986                     __end_of_change_state_to_logs_33:
 22544                           	opt stack 0
 22545                           pclatu	equ	0xFFB
 22546                           pclath	equ	0xFFA
 22547                           tblptru	equ	0xFF8
 22548                           tblptrh	equ	0xFF7
 22549                           tblptrl	equ	0xFF6
 22550                           tablat	equ	0xFF5
 22551                           prodh	equ	0xFF4
 22552                           prodl	equ	0xFF3
 22553                           intcon	equ	0xFF2
 22554                           intcon2	equ	0xFF1
 22555                           intcon3	equ	0xFF0
 22556                           indf0	equ	0xFEF
 22557                           postinc0	equ	0xFEE
 22558                           fsr0h	equ	0xFEA
 22559                           fsr0l	equ	0xFE9
 22560                           wreg	equ	0xFE8
 22561                           postdec1	equ	0xFE5
 22562                           fsr1h	equ	0xFE2
 22563                           fsr1l	equ	0xFE1
 22564                           indf2	equ	0xFDF
 22565                           postinc2	equ	0xFDE
 22566                           postdec2	equ	0xFDD
 22567                           fsr2h	equ	0xFDA
 22568                           fsr2l	equ	0xFD9
 22569                           status	equ	0xFD8
 22570                           
 22571 ;; *************** function _change_state_to_logs_23 *****************
 22572 ;; Defined at:
 22573 ;;		line 538 in file "UI.c"
 22574 ;; Parameters:    Size  Location     Type
 22575 ;;		None
 22576 ;; Auto vars:     Size  Location     Type
 22577 ;;		None
 22578 ;; Return value:  Size  Location     Type
 22579 ;;                  1    wreg      void 
 22580 ;; Registers used:
 22581 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22582 ;; Tracked objects:
 22583 ;;		On entry : 0/0
 22584 ;;		On exit  : 0/0
 22585 ;;		Unchanged: 0/0
 22586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22591 ;;Total ram usage:        0 bytes
 22592 ;; Hardware stack levels used:    1
 22593 ;; Hardware stack levels required when called:    3
 22594 ;; This function calls:
 22595 ;;		i2_lcdInst
 22596 ;;		i2_printf
 22597 ;; This function is called by:
 22598 ;;		_updateMenu
 22599 ;;		_inputHandler
 22600 ;; This function uses a non-reentrant model
 22601 ;;
 22602                           
 22603                           	psect	text78
 22604  005A44                     __ptext78:
 22605                           	opt stack 0
 22606  005A44                     _change_state_to_logs_23:
 22607                           	opt stack 18
 22608                           
 22609                           ;UI.c: 539: cur_state = 1023;
 22610                           
 22611                           ;incstack = 0
 22612  005A44  0E03               	movlw	3
 22613  005A46  0100               	movlb	0	; () banked
 22614  005A48  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22615  005A4A  69E6               	setf	_cur_state& (0+255),b
 22616                           
 22617                           ; BSR set to: 0
 22618                           ;UI.c: 540: lcdInst(0b10000000);;
 22619  005A4C  0E80               	movlw	128
 22620  005A4E  EC67  F02E         	call	i2_lcdInst
 22621                           
 22622                           ;UI.c: 541: printf("LOG 2           ");
 22623  005A52  0EEA               	movlw	low STR_40
 22624  005A54  6E0D               	movwf	i2printf@f,c
 22625  005A56  0EFC               	movlw	high STR_40
 22626  005A58  6E0E               	movwf	i2printf@f+1,c
 22627  005A5A  EC28  F012         	call	i2_printf	;wreg free
 22628                           
 22629                           ;UI.c: 542: lcdInst(0b11000000);;
 22630  005A5E  0EC0               	movlw	192
 22631  005A60  EC67  F02E         	call	i2_lcdInst
 22632                           
 22633                           ;UI.c: 543: printf("LOG 3          <");
 22634  005A64  0EA5               	movlw	low STR_46
 22635  005A66  6E0D               	movwf	i2printf@f,c
 22636  005A68  0EFD               	movlw	high STR_46
 22637  005A6A  6E0E               	movwf	i2printf@f+1,c
 22638  005A6C  EC28  F012         	call	i2_printf	;wreg free
 22639  005A70  0012               	return		;funcret
 22640  005A72                     __end_of_change_state_to_logs_23:
 22641                           	opt stack 0
 22642                           pclatu	equ	0xFFB
 22643                           pclath	equ	0xFFA
 22644                           tblptru	equ	0xFF8
 22645                           tblptrh	equ	0xFF7
 22646                           tblptrl	equ	0xFF6
 22647                           tablat	equ	0xFF5
 22648                           prodh	equ	0xFF4
 22649                           prodl	equ	0xFF3
 22650                           intcon	equ	0xFF2
 22651                           intcon2	equ	0xFF1
 22652                           intcon3	equ	0xFF0
 22653                           indf0	equ	0xFEF
 22654                           postinc0	equ	0xFEE
 22655                           fsr0h	equ	0xFEA
 22656                           fsr0l	equ	0xFE9
 22657                           wreg	equ	0xFE8
 22658                           postdec1	equ	0xFE5
 22659                           fsr1h	equ	0xFE2
 22660                           fsr1l	equ	0xFE1
 22661                           indf2	equ	0xFDF
 22662                           postinc2	equ	0xFDE
 22663                           postdec2	equ	0xFDD
 22664                           fsr2h	equ	0xFDA
 22665                           fsr2l	equ	0xFD9
 22666                           status	equ	0xFD8
 22667                           
 22668 ;; *************** function _change_state_to_logs_22 *****************
 22669 ;; Defined at:
 22670 ;;		line 531 in file "UI.c"
 22671 ;; Parameters:    Size  Location     Type
 22672 ;;		None
 22673 ;; Auto vars:     Size  Location     Type
 22674 ;;		None
 22675 ;; Return value:  Size  Location     Type
 22676 ;;                  1    wreg      void 
 22677 ;; Registers used:
 22678 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22679 ;; Tracked objects:
 22680 ;;		On entry : 0/0
 22681 ;;		On exit  : 0/0
 22682 ;;		Unchanged: 0/0
 22683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22687 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22688 ;;Total ram usage:        0 bytes
 22689 ;; Hardware stack levels used:    1
 22690 ;; Hardware stack levels required when called:    3
 22691 ;; This function calls:
 22692 ;;		i2_lcdInst
 22693 ;;		i2_printf
 22694 ;; This function is called by:
 22695 ;;		_updateMenu
 22696 ;;		_inputHandler
 22697 ;; This function uses a non-reentrant model
 22698 ;;
 22699                           
 22700                           	psect	text79
 22701  005986                     __ptext79:
 22702                           	opt stack 0
 22703  005986                     _change_state_to_logs_22:
 22704                           	opt stack 18
 22705                           
 22706                           ;UI.c: 532: cur_state = 1022;
 22707                           
 22708                           ;incstack = 0
 22709  005986  0E03               	movlw	3
 22710  005988  0100               	movlb	0	; () banked
 22711  00598A  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22712  00598C  0EFE               	movlw	254
 22713  00598E  6FE6               	movwf	_cur_state& (0+255),b
 22714                           
 22715                           ; BSR set to: 0
 22716                           ;UI.c: 533: lcdInst(0b10000000);;
 22717  005990  0E80               	movlw	128
 22718  005992  EC67  F02E         	call	i2_lcdInst
 22719                           
 22720                           ;UI.c: 534: printf("LOG 2          <");
 22721  005996  0E94               	movlw	low STR_42
 22722  005998  6E0D               	movwf	i2printf@f,c
 22723  00599A  0EFD               	movlw	high STR_42
 22724  00599C  6E0E               	movwf	i2printf@f+1,c
 22725  00599E  EC28  F012         	call	i2_printf	;wreg free
 22726                           
 22727                           ;UI.c: 535: lcdInst(0b11000000);;
 22728  0059A2  0EC0               	movlw	192
 22729  0059A4  EC67  F02E         	call	i2_lcdInst
 22730                           
 22731                           ;UI.c: 536: printf("LOG 3           ");
 22732  0059A8  0EFB               	movlw	low STR_44
 22733  0059AA  6E0D               	movwf	i2printf@f,c
 22734  0059AC  0EFC               	movlw	high STR_44
 22735  0059AE  6E0E               	movwf	i2printf@f+1,c
 22736  0059B0  EC28  F012         	call	i2_printf	;wreg free
 22737  0059B4  0012               	return		;funcret
 22738  0059B6                     __end_of_change_state_to_logs_22:
 22739                           	opt stack 0
 22740                           pclatu	equ	0xFFB
 22741                           pclath	equ	0xFFA
 22742                           tblptru	equ	0xFF8
 22743                           tblptrh	equ	0xFF7
 22744                           tblptrl	equ	0xFF6
 22745                           tablat	equ	0xFF5
 22746                           prodh	equ	0xFF4
 22747                           prodl	equ	0xFF3
 22748                           intcon	equ	0xFF2
 22749                           intcon2	equ	0xFF1
 22750                           intcon3	equ	0xFF0
 22751                           indf0	equ	0xFEF
 22752                           postinc0	equ	0xFEE
 22753                           fsr0h	equ	0xFEA
 22754                           fsr0l	equ	0xFE9
 22755                           wreg	equ	0xFE8
 22756                           postdec1	equ	0xFE5
 22757                           fsr1h	equ	0xFE2
 22758                           fsr1l	equ	0xFE1
 22759                           indf2	equ	0xFDF
 22760                           postinc2	equ	0xFDE
 22761                           postdec2	equ	0xFDD
 22762                           fsr2h	equ	0xFDA
 22763                           fsr2l	equ	0xFD9
 22764                           status	equ	0xFD8
 22765                           
 22766 ;; *************** function _change_state_to_logs_12 *****************
 22767 ;; Defined at:
 22768 ;;		line 524 in file "UI.c"
 22769 ;; Parameters:    Size  Location     Type
 22770 ;;		None
 22771 ;; Auto vars:     Size  Location     Type
 22772 ;;		None
 22773 ;; Return value:  Size  Location     Type
 22774 ;;                  1    wreg      void 
 22775 ;; Registers used:
 22776 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22777 ;; Tracked objects:
 22778 ;;		On entry : 0/0
 22779 ;;		On exit  : 0/0
 22780 ;;		Unchanged: 0/0
 22781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22786 ;;Total ram usage:        0 bytes
 22787 ;; Hardware stack levels used:    1
 22788 ;; Hardware stack levels required when called:    3
 22789 ;; This function calls:
 22790 ;;		i2_lcdInst
 22791 ;;		i2_printf
 22792 ;; This function is called by:
 22793 ;;		_updateMenu
 22794 ;;		_inputHandler
 22795 ;; This function uses a non-reentrant model
 22796 ;;
 22797                           
 22798                           	psect	text80
 22799  0059B6                     __ptext80:
 22800                           	opt stack 0
 22801  0059B6                     _change_state_to_logs_12:
 22802                           	opt stack 18
 22803                           
 22804                           ;UI.c: 525: cur_state = 1012;
 22805                           
 22806                           ;incstack = 0
 22807  0059B6  0E03               	movlw	3
 22808  0059B8  0100               	movlb	0	; () banked
 22809  0059BA  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22810  0059BC  0EF4               	movlw	244
 22811  0059BE  6FE6               	movwf	_cur_state& (0+255),b
 22812                           
 22813                           ; BSR set to: 0
 22814                           ;UI.c: 526: lcdInst(0b10000000);;
 22815  0059C0  0E80               	movlw	128
 22816  0059C2  EC67  F02E         	call	i2_lcdInst
 22817                           
 22818                           ;UI.c: 527: printf("LOG 1           ");
 22819  0059C6  0ED9               	movlw	low STR_41
 22820  0059C8  6E0D               	movwf	i2printf@f,c
 22821  0059CA  0EFC               	movlw	high STR_41
 22822  0059CC  6E0E               	movwf	i2printf@f+1,c
 22823  0059CE  EC28  F012         	call	i2_printf	;wreg free
 22824                           
 22825                           ;UI.c: 528: lcdInst(0b11000000);;
 22826  0059D2  0EC0               	movlw	192
 22827  0059D4  EC67  F02E         	call	i2_lcdInst
 22828                           
 22829                           ;UI.c: 529: printf("LOG 2          <");
 22830  0059D8  0E94               	movlw	low STR_42
 22831  0059DA  6E0D               	movwf	i2printf@f,c
 22832  0059DC  0EFD               	movlw	high STR_42
 22833  0059DE  6E0E               	movwf	i2printf@f+1,c
 22834  0059E0  EC28  F012         	call	i2_printf	;wreg free
 22835  0059E4  0012               	return		;funcret
 22836  0059E6                     __end_of_change_state_to_logs_12:
 22837                           	opt stack 0
 22838                           pclatu	equ	0xFFB
 22839                           pclath	equ	0xFFA
 22840                           tblptru	equ	0xFF8
 22841                           tblptrh	equ	0xFF7
 22842                           tblptrl	equ	0xFF6
 22843                           tablat	equ	0xFF5
 22844                           prodh	equ	0xFF4
 22845                           prodl	equ	0xFF3
 22846                           intcon	equ	0xFF2
 22847                           intcon2	equ	0xFF1
 22848                           intcon3	equ	0xFF0
 22849                           indf0	equ	0xFEF
 22850                           postinc0	equ	0xFEE
 22851                           fsr0h	equ	0xFEA
 22852                           fsr0l	equ	0xFE9
 22853                           wreg	equ	0xFE8
 22854                           postdec1	equ	0xFE5
 22855                           fsr1h	equ	0xFE2
 22856                           fsr1l	equ	0xFE1
 22857                           indf2	equ	0xFDF
 22858                           postinc2	equ	0xFDE
 22859                           postdec2	equ	0xFDD
 22860                           fsr2h	equ	0xFDA
 22861                           fsr2l	equ	0xFD9
 22862                           status	equ	0xFD8
 22863                           
 22864 ;; *************** function _change_state_to_logs_11 *****************
 22865 ;; Defined at:
 22866 ;;		line 517 in file "UI.c"
 22867 ;; Parameters:    Size  Location     Type
 22868 ;;		None
 22869 ;; Auto vars:     Size  Location     Type
 22870 ;;		None
 22871 ;; Return value:  Size  Location     Type
 22872 ;;                  1    wreg      void 
 22873 ;; Registers used:
 22874 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22875 ;; Tracked objects:
 22876 ;;		On entry : 0/0
 22877 ;;		On exit  : 0/0
 22878 ;;		Unchanged: 0/0
 22879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22884 ;;Total ram usage:        0 bytes
 22885 ;; Hardware stack levels used:    1
 22886 ;; Hardware stack levels required when called:    3
 22887 ;; This function calls:
 22888 ;;		i2_lcdInst
 22889 ;;		i2_printf
 22890 ;; This function is called by:
 22891 ;;		_updateMenu
 22892 ;;		_inputHandler
 22893 ;; This function uses a non-reentrant model
 22894 ;;
 22895                           
 22896                           	psect	text81
 22897  0059E6                     __ptext81:
 22898                           	opt stack 0
 22899  0059E6                     _change_state_to_logs_11:
 22900                           	opt stack 18
 22901                           
 22902                           ;UI.c: 518: cur_state = 1011;
 22903                           
 22904                           ;incstack = 0
 22905  0059E6  0E03               	movlw	3
 22906  0059E8  0100               	movlb	0	; () banked
 22907  0059EA  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22908  0059EC  0EF3               	movlw	243
 22909  0059EE  6FE6               	movwf	_cur_state& (0+255),b
 22910                           
 22911                           ; BSR set to: 0
 22912                           ;UI.c: 519: lcdInst(0b10000000);;
 22913  0059F0  0E80               	movlw	128
 22914  0059F2  EC67  F02E         	call	i2_lcdInst
 22915                           
 22916                           ;UI.c: 520: printf("LOG 1          <");
 22917  0059F6  0E83               	movlw	low STR_39
 22918  0059F8  6E0D               	movwf	i2printf@f,c
 22919  0059FA  0EFD               	movlw	high STR_39
 22920  0059FC  6E0E               	movwf	i2printf@f+1,c
 22921  0059FE  EC28  F012         	call	i2_printf	;wreg free
 22922                           
 22923                           ;UI.c: 521: lcdInst(0b11000000);;
 22924  005A02  0EC0               	movlw	192
 22925  005A04  EC67  F02E         	call	i2_lcdInst
 22926                           
 22927                           ;UI.c: 522: printf("LOG 2           ");
 22928  005A08  0EEA               	movlw	low STR_40
 22929  005A0A  6E0D               	movwf	i2printf@f,c
 22930  005A0C  0EFC               	movlw	high STR_40
 22931  005A0E  6E0E               	movwf	i2printf@f+1,c
 22932  005A10  EC28  F012         	call	i2_printf	;wreg free
 22933  005A14  0012               	return		;funcret
 22934  005A16                     __end_of_change_state_to_logs_11:
 22935                           	opt stack 0
 22936                           pclatu	equ	0xFFB
 22937                           pclath	equ	0xFFA
 22938                           tblptru	equ	0xFF8
 22939                           tblptrh	equ	0xFF7
 22940                           tblptrl	equ	0xFF6
 22941                           tablat	equ	0xFF5
 22942                           prodh	equ	0xFF4
 22943                           prodl	equ	0xFF3
 22944                           intcon	equ	0xFF2
 22945                           intcon2	equ	0xFF1
 22946                           intcon3	equ	0xFF0
 22947                           indf0	equ	0xFEF
 22948                           postinc0	equ	0xFEE
 22949                           fsr0h	equ	0xFEA
 22950                           fsr0l	equ	0xFE9
 22951                           wreg	equ	0xFE8
 22952                           postdec1	equ	0xFE5
 22953                           fsr1h	equ	0xFE2
 22954                           fsr1l	equ	0xFE1
 22955                           indf2	equ	0xFDF
 22956                           postinc2	equ	0xFDE
 22957                           postdec2	equ	0xFDD
 22958                           fsr2h	equ	0xFDA
 22959                           fsr2l	equ	0xFD9
 22960                           status	equ	0xFD8
 22961                           
 22962 ;; *************** function _dispLogs *****************
 22963 ;; Defined at:
 22964 ;;		line 470 in file "UI.c"
 22965 ;; Parameters:    Size  Location     Type
 22966 ;;  myLog           2   17[COMRAM] int 
 22967 ;; Auto vars:     Size  Location     Type
 22968 ;;		None
 22969 ;; Return value:  Size  Location     Type
 22970 ;;                  1    wreg      void 
 22971 ;; Registers used:
 22972 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22973 ;; Tracked objects:
 22974 ;;		On entry : 0/0
 22975 ;;		On exit  : 0/0
 22976 ;;		Unchanged: 0/0
 22977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22978 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22981 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22982 ;;Total ram usage:        2 bytes
 22983 ;; Hardware stack levels used:    1
 22984 ;; Hardware stack levels required when called:    2
 22985 ;; This function calls:
 22986 ;;		_retrieveLog
 22987 ;; This function is called by:
 22988 ;;		_updateMenu
 22989 ;; This function uses a non-reentrant model
 22990 ;;
 22991                           
 22992                           	psect	text82
 22993  005B90                     __ptext82:
 22994                           	opt stack 0
 22995  005B90                     _dispLogs:
 22996                           	opt stack 20
 22997                           
 22998                           ;UI.c: 471: logstate = 1;
 22999                           
 23000                           ;incstack = 0
 23001  005B90  0E00               	movlw	0
 23002  005B92  0100               	movlb	0	; () banked
 23003  005B94  6FF9               	movwf	(_logstate+1)& (0+255),b
 23004  005B96  0E01               	movlw	1
 23005  005B98  6FF8               	movwf	_logstate& (0+255),b
 23006                           
 23007                           ; BSR set to: 0
 23008                           ;UI.c: 472: log = myLog;
 23009  005B9A  C012  F0EE         	movff	dispLogs@myLog,_log
 23010  005B9E  C013  F0EF         	movff	dispLogs@myLog+1,_log+1
 23011                           
 23012                           ; BSR set to: 0
 23013                           ;UI.c: 473: retrieveLog(myLog - 1);
 23014  005BA2  0EFF               	movlw	255
 23015  005BA4  2412               	addwf	dispLogs@myLog,w,c
 23016  005BA6  6E07               	movwf	retrieveLog@logNum,c
 23017  005BA8  0EFF               	movlw	255
 23018  005BAA  2013               	addwfc	dispLogs@myLog+1,w,c
 23019  005BAC  6E08               	movwf	retrieveLog@logNum+1,c
 23020  005BAE  ECC4  F020         	call	_retrieveLog	;wreg free
 23021  005BB2  0012               	return		;funcret
 23022  005BB4                     __end_of_dispLogs:
 23023                           	opt stack 0
 23024                           pclatu	equ	0xFFB
 23025                           pclath	equ	0xFFA
 23026                           tblptru	equ	0xFF8
 23027                           tblptrh	equ	0xFF7
 23028                           tblptrl	equ	0xFF6
 23029                           tablat	equ	0xFF5
 23030                           prodh	equ	0xFF4
 23031                           prodl	equ	0xFF3
 23032                           intcon	equ	0xFF2
 23033                           intcon2	equ	0xFF1
 23034                           intcon3	equ	0xFF0
 23035                           indf0	equ	0xFEF
 23036                           postinc0	equ	0xFEE
 23037                           fsr0h	equ	0xFEA
 23038                           fsr0l	equ	0xFE9
 23039                           wreg	equ	0xFE8
 23040                           postdec1	equ	0xFE5
 23041                           fsr1h	equ	0xFE2
 23042                           fsr1l	equ	0xFE1
 23043                           indf2	equ	0xFDF
 23044                           postinc2	equ	0xFDE
 23045                           postdec2	equ	0xFDD
 23046                           fsr2h	equ	0xFDA
 23047                           fsr2l	equ	0xFD9
 23048                           status	equ	0xFD8
 23049                           
 23050 ;; *************** function _retrieveLog *****************
 23051 ;; Defined at:
 23052 ;;		line 138 in file "EEPROM.c"
 23053 ;; Parameters:    Size  Location     Type
 23054 ;;  logNum          2    6[COMRAM] int 
 23055 ;; Auto vars:     Size  Location     Type
 23056 ;;  i               2   13[COMRAM] int 
 23057 ;;  addr            2   15[COMRAM] unsigned short 
 23058 ;;  byte3           1   12[COMRAM] unsigned char 
 23059 ;;  byte2           1   11[COMRAM] unsigned char 
 23060 ;;  byte1           1   10[COMRAM] unsigned char 
 23061 ;; Return value:  Size  Location     Type
 23062 ;;                  1    wreg      void 
 23063 ;; Registers used:
 23064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23065 ;; Tracked objects:
 23066 ;;		On entry : 0/0
 23067 ;;		On exit  : 0/0
 23068 ;;		Unchanged: 0/0
 23069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23070 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23071 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23072 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23073 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23074 ;;Total ram usage:       11 bytes
 23075 ;; Hardware stack levels used:    1
 23076 ;; Hardware stack levels required when called:    1
 23077 ;; This function calls:
 23078 ;;		i2_EEPROM_read
 23079 ;;		i2___wmul
 23080 ;; This function is called by:
 23081 ;;		_dispLogs
 23082 ;; This function uses a non-reentrant model
 23083 ;;
 23084                           
 23085                           	psect	text83
 23086  004188                     __ptext83:
 23087                           	opt stack 0
 23088  004188                     _retrieveLog:
 23089                           	opt stack 20
 23090                           
 23091                           ;EEPROM.c: 144: unsigned short addr = 1 + logNum * 11;
 23092                           
 23093                           ;incstack = 0
 23094  004188  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 23095  00418C  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 23096  004190  0E00               	movlw	0
 23097  004192  6E04               	movwf	i2___wmul@multiplicand+1,c
 23098  004194  0E0B               	movlw	11
 23099  004196  6E03               	movwf	i2___wmul@multiplicand,c
 23100  004198  ECA2  F02D         	call	i2___wmul	;wreg free
 23101  00419C  0E01               	movlw	1
 23102  00419E  2401               	addwf	?i2___wmul,w,c
 23103  0041A0  6E10               	movwf	retrieveLog@addr,c
 23104  0041A2  0E00               	movlw	0
 23105  0041A4  2002               	addwfc	?i2___wmul+1,w,c
 23106  0041A6  6E11               	movwf	retrieveLog@addr+1,c
 23107                           
 23108                           ;EEPROM.c: 147: unsigned char byte1 = EEPROM_read(addr);
 23109  0041A8  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23110  0041AC  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23111  0041B0  EC33  F02E         	call	i2_EEPROM_read	;wreg free
 23112  0041B4  6E0B               	movwf	retrieveLog@byte1,c
 23113                           
 23114                           ;EEPROM.c: 148: log_completion = (int)(byte1 & 0b10000000);
 23115  0041B6  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 23116  0041BA  0E80               	movlw	128
 23117  0041BC  1609               	andwf	??_retrieveLog,f,c
 23118  0041BE  5009               	movf	??_retrieveLog,w,c
 23119  0041C0  0100               	movlb	0	; () banked
 23120  0041C2  6FF0               	movwf	_log_completion& (0+255),b
 23121  0041C4  6BF1               	clrf	(_log_completion+1)& (0+255),b
 23122                           
 23123                           ; BSR set to: 0
 23124                           ;EEPROM.c: 149: log_count_total = (int)(byte1 & 0b00001111);
 23125  0041C6  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 23126  0041CA  0E0F               	movlw	15
 23127  0041CC  1609               	andwf	??_retrieveLog,f,c
 23128  0041CE  5009               	movf	??_retrieveLog,w,c
 23129  0041D0  0101               	movlb	1	; () banked
 23130  0041D2  6F43               	movwf	_log_count_total& (0+255),b
 23131  0041D4  6B44               	clrf	(_log_count_total+1)& (0+255),b
 23132                           
 23133                           ; BSR set to: 1
 23134                           ;EEPROM.c: 150: addr++;
 23135  0041D6  4A10               	infsnz	retrieveLog@addr,f,c
 23136  0041D8  2A11               	incf	retrieveLog@addr+1,f,c
 23137                           
 23138                           ; BSR set to: 1
 23139                           ;EEPROM.c: 153: unsigned char byte2 = EEPROM_read(addr);
 23140  0041DA  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23141  0041DE  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23142  0041E2  EC33  F02E         	call	i2_EEPROM_read	;wreg free
 23143  0041E6  6E0C               	movwf	retrieveLog@byte2,c
 23144                           
 23145                           ;EEPROM.c: 154: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 23146  0041E8  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23147  0041EC  3A09               	swapf	??_retrieveLog,f,c
 23148  0041EE  0E0F               	movlw	15
 23149  0041F0  1609               	andwf	??_retrieveLog,f,c
 23150  0041F2  0E0F               	movlw	15
 23151  0041F4  1609               	andwf	??_retrieveLog,f,c
 23152  0041F6  5009               	movf	??_retrieveLog,w,c
 23153  0041F8  0100               	movlb	0	; () banked
 23154  0041FA  6FF2               	movwf	_log_count_pop_no_tab& (0+255),b
 23155  0041FC  6BF3               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 23156                           
 23157                           ; BSR set to: 0
 23158                           ;EEPROM.c: 155: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 23159  0041FE  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23160  004202  0E0F               	movlw	15
 23161  004204  1609               	andwf	??_retrieveLog,f,c
 23162  004206  5009               	movf	??_retrieveLog,w,c
 23163  004208  0100               	movlb	0	; () banked
 23164  00420A  6FF4               	movwf	_log_count_pop_w_tab& (0+255),b
 23165  00420C  6BF5               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 23166                           
 23167                           ; BSR set to: 0
 23168                           ;EEPROM.c: 156: addr++;
 23169  00420E  4A10               	infsnz	retrieveLog@addr,f,c
 23170  004210  2A11               	incf	retrieveLog@addr+1,f,c
 23171                           
 23172                           ; BSR set to: 0
 23173                           ;EEPROM.c: 157: unsigned char byte3 = EEPROM_read(addr);
 23174  004212  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23175  004216  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23176  00421A  EC33  F02E         	call	i2_EEPROM_read	;wreg free
 23177  00421E  6E0D               	movwf	retrieveLog@byte3,c
 23178                           
 23179                           ;EEPROM.c: 158: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 23180  004220  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23181  004224  3A09               	swapf	??_retrieveLog,f,c
 23182  004226  0E0F               	movlw	15
 23183  004228  1609               	andwf	??_retrieveLog,f,c
 23184  00422A  0E0F               	movlw	15
 23185  00422C  1609               	andwf	??_retrieveLog,f,c
 23186  00422E  5009               	movf	??_retrieveLog,w,c
 23187  004230  0101               	movlb	1	; () banked
 23188  004232  6F41               	movwf	_log_count_can_w_lab& (0+255),b
 23189  004234  6B42               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 23190                           
 23191                           ; BSR set to: 1
 23192                           ;EEPROM.c: 159: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 23193  004236  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23194  00423A  0E0F               	movlw	15
 23195  00423C  1609               	andwf	??_retrieveLog,f,c
 23196  00423E  5009               	movf	??_retrieveLog,w,c
 23197  004240  0101               	movlb	1	; () banked
 23198  004242  6F3F               	movwf	_log_count_can_no_lab& (0+255),b
 23199  004244  6B40               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 23200                           
 23201                           ; BSR set to: 1
 23202                           ;EEPROM.c: 160: addr++;
 23203  004246  4A10               	infsnz	retrieveLog@addr,f,c
 23204  004248  2A11               	incf	retrieveLog@addr+1,f,c
 23205                           
 23206                           ; BSR set to: 1
 23207                           ;EEPROM.c: 163: for(int i = 0; i < 7; i++){
 23208  00424A  0E00               	movlw	0
 23209  00424C  6E0F               	movwf	retrieveLog@i+1,c
 23210  00424E  0E00               	movlw	0
 23211  004250  6E0E               	movwf	retrieveLog@i,c
 23212  004252                     i2l7321:
 23213                           
 23214                           ; BSR set to: 1
 23215  004252  BE0F               	btfsc	retrieveLog@i+1,7,c
 23216  004254  D006               	goto	i2l7325
 23217  004256  500F               	movf	retrieveLog@i+1,w,c
 23218  004258  E11E               	bnz	i2l7333
 23219  00425A  0E07               	movlw	7
 23220  00425C  5C0E               	subwf	retrieveLog@i,w,c
 23221  00425E  B0D8               	btfsc	status,0,c
 23222  004260  D01A               	goto	i2l7333
 23223  004262                     i2l7325:
 23224                           
 23225                           ;EEPROM.c: 164: log_startTime[i] = (int)EEPROM_read(addr);
 23226  004262  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23227  004266  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23228  00426A  EC33  F02E         	call	i2_EEPROM_read	;wreg free
 23229  00426E  6E09               	movwf	??_retrieveLog& (0+255),c
 23230  004270  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 23231  004272  90D8               	bcf	status,0,c
 23232  004274  340E               	rlcf	retrieveLog@i,w,c
 23233  004276  6ED9               	movwf	fsr2l,c
 23234  004278  340F               	rlcf	retrieveLog@i+1,w,c
 23235  00427A  6EDA               	movwf	fsr2h,c
 23236  00427C  0E00               	movlw	low _log_startTime
 23237  00427E  26D9               	addwf	fsr2l,f,c
 23238  004280  0E01               	movlw	high _log_startTime
 23239  004282  22DA               	addwfc	fsr2h,f,c
 23240  004284  C009  FFDE         	movff	??_retrieveLog,postinc2
 23241  004288  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 23242                           
 23243                           ;EEPROM.c: 165: addr++;
 23244  00428C  4A10               	infsnz	retrieveLog@addr,f,c
 23245  00428E  2A11               	incf	retrieveLog@addr+1,f,c
 23246  004290  4A0E               	infsnz	retrieveLog@i,f,c
 23247  004292  2A0F               	incf	retrieveLog@i+1,f,c
 23248  004294  D7DE               	goto	i2l7321
 23249  004296                     i2l7333:
 23250                           
 23251                           ;EEPROM.c: 166: }
 23252                           ;EEPROM.c: 169: log_total_time = (int)EEPROM_read(addr);
 23253  004296  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23254  00429A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23255  00429E  EC33  F02E         	call	i2_EEPROM_read	;wreg free
 23256  0042A2  6E09               	movwf	??_retrieveLog& (0+255),c
 23257  0042A4  5009               	movf	??_retrieveLog,w,c
 23258  0042A6  0100               	movlb	0	; () banked
 23259  0042A8  6FF6               	movwf	_log_total_time& (0+255),b
 23260  0042AA  6BF7               	clrf	(_log_total_time+1)& (0+255),b
 23261                           
 23262                           ; BSR set to: 0
 23263  0042AC  0012               	return		;funcret
 23264  0042AE                     __end_of_retrieveLog:
 23265                           	opt stack 0
 23266                           pclatu	equ	0xFFB
 23267                           pclath	equ	0xFFA
 23268                           tblptru	equ	0xFF8
 23269                           tblptrh	equ	0xFF7
 23270                           tblptrl	equ	0xFF6
 23271                           tablat	equ	0xFF5
 23272                           prodh	equ	0xFF4
 23273                           prodl	equ	0xFF3
 23274                           intcon	equ	0xFF2
 23275                           intcon2	equ	0xFF1
 23276                           intcon3	equ	0xFF0
 23277                           indf0	equ	0xFEF
 23278                           postinc0	equ	0xFEE
 23279                           fsr0h	equ	0xFEA
 23280                           fsr0l	equ	0xFE9
 23281                           wreg	equ	0xFE8
 23282                           postdec1	equ	0xFE5
 23283                           fsr1h	equ	0xFE2
 23284                           fsr1l	equ	0xFE1
 23285                           indf2	equ	0xFDF
 23286                           postinc2	equ	0xFDE
 23287                           postdec2	equ	0xFDD
 23288                           fsr2h	equ	0xFDA
 23289                           fsr2l	equ	0xFD9
 23290                           status	equ	0xFD8
 23291                           
 23292 ;; *************** function i2_EEPROM_read *****************
 23293 ;; Defined at:
 23294 ;;		line 72 in file "EEPROM.c"
 23295 ;; Parameters:    Size  Location     Type
 23296 ;;  address         2    0[COMRAM] unsigned short 
 23297 ;; Auto vars:     Size  Location     Type
 23298 ;;		None
 23299 ;; Return value:  Size  Location     Type
 23300 ;;                  1    wreg      unsigned char 
 23301 ;; Registers used:
 23302 ;;		wreg, status,2
 23303 ;; Tracked objects:
 23304 ;;		On entry : 0/0
 23305 ;;		On exit  : 0/0
 23306 ;;		Unchanged: 0/0
 23307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23308 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23311 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23312 ;;Total ram usage:        2 bytes
 23313 ;; Hardware stack levels used:    1
 23314 ;; This function calls:
 23315 ;;		Nothing
 23316 ;; This function is called by:
 23317 ;;		_retrieveLog
 23318 ;; This function uses a non-reentrant model
 23319 ;;
 23320                           
 23321                           	psect	text84
 23322  005C66                     __ptext84:
 23323                           	opt stack 0
 23324  005C66                     i2_EEPROM_read:
 23325                           	opt stack 20
 23326                           
 23327                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
 23328                           
 23329                           ; BSR set to: 0
 23330                           ;incstack = 0
 23331  005C66  5002               	movf	i2EEPROM_read@address+1,w,c
 23332  005C68  6EAA               	movwf	4010,c	;volatile
 23333                           
 23334                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
 23335  005C6A  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 23336                           
 23337                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
 23338  005C6E  9EA6               	bcf	4006,7,c	;volatile
 23339                           
 23340                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
 23341  005C70  9CA6               	bcf	4006,6,c	;volatile
 23342                           
 23343                           ;EEPROM.c: 79: EECON1bits.RD = 1;
 23344  005C72  80A6               	bsf	4006,0,c	;volatile
 23345  005C74                     i2l1131:
 23346  005C74  B0A6               	btfsc	4006,0,c	;volatile
 23347  005C76  D7FE               	goto	i2l1131
 23348                           
 23349                           ;EEPROM.c: 85: return EEDATA;
 23350  005C78  50A8               	movf	4008,w,c	;volatile
 23351  005C7A  0012               	return	
 23352  005C7C                     __end_ofi2_EEPROM_read:
 23353                           	opt stack 0
 23354                           pclatu	equ	0xFFB
 23355                           pclath	equ	0xFFA
 23356                           tblptru	equ	0xFF8
 23357                           tblptrh	equ	0xFF7
 23358                           tblptrl	equ	0xFF6
 23359                           tablat	equ	0xFF5
 23360                           prodh	equ	0xFF4
 23361                           prodl	equ	0xFF3
 23362                           intcon	equ	0xFF2
 23363                           intcon2	equ	0xFF1
 23364                           intcon3	equ	0xFF0
 23365                           indf0	equ	0xFEF
 23366                           postinc0	equ	0xFEE
 23367                           fsr0h	equ	0xFEA
 23368                           fsr0l	equ	0xFE9
 23369                           wreg	equ	0xFE8
 23370                           postdec1	equ	0xFE5
 23371                           fsr1h	equ	0xFE2
 23372                           fsr1l	equ	0xFE1
 23373                           indf2	equ	0xFDF
 23374                           postinc2	equ	0xFDE
 23375                           postdec2	equ	0xFDD
 23376                           fsr2h	equ	0xFDA
 23377                           fsr2l	equ	0xFD9
 23378                           status	equ	0xFD8
 23379                           
 23380 ;; *************** function _updateArmState *****************
 23381 ;; Defined at:
 23382 ;;		line 657 in file "sort.c"
 23383 ;; Parameters:    Size  Location     Type
 23384 ;;		None
 23385 ;; Auto vars:     Size  Location     Type
 23386 ;;		None
 23387 ;; Return value:  Size  Location     Type
 23388 ;;                  1    wreg      void 
 23389 ;; Registers used:
 23390 ;;		wreg, status,2, status,0
 23391 ;; Tracked objects:
 23392 ;;		On entry : 0/0
 23393 ;;		On exit  : 0/0
 23394 ;;		Unchanged: 0/0
 23395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23398 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23399 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23400 ;;Total ram usage:        2 bytes
 23401 ;; Hardware stack levels used:    1
 23402 ;; This function calls:
 23403 ;;		Nothing
 23404 ;; This function is called by:
 23405 ;;		_handler
 23406 ;; This function uses a non-reentrant model
 23407 ;;
 23408                           
 23409                           	psect	text85
 23410  0056BC                     __ptext85:
 23411                           	opt stack 0
 23412  0056BC                     _updateArmState:
 23413                           	opt stack 23
 23414                           
 23415                           ;sort.c: 664: if(!was_low_2){
 23416                           
 23417                           ;incstack = 0
 23418  0056BC  5079               	movf	_was_low_2,w,c	;volatile
 23419  0056BE  107A               	iorwf	_was_low_2+1,w,c	;volatile
 23420  0056C0  B4D8               	btfsc	status,2,c
 23421  0056C2  D007               	goto	i2l10165
 23422  0056C4  D016               	goto	i2l949
 23423  0056C6                     i2l10159:
 23424                           
 23425                           ;sort.c: 669: PR2 = 0x20;
 23426  0056C6  0E20               	movlw	32
 23427  0056C8  6ECB               	movwf	4043,c	;volatile
 23428                           
 23429                           ;sort.c: 670: break;
 23430  0056CA  0012               	return	
 23431  0056CC                     i2l10161:
 23432                           
 23433                           ;sort.c: 673: PR2 = 0x40;
 23434  0056CC  0E40               	movlw	64
 23435  0056CE  6ECB               	movwf	4043,c	;volatile
 23436                           
 23437                           ;sort.c: 675: }
 23438                           
 23439                           ;sort.c: 674: break;
 23440  0056D0  0012               	return	
 23441  0056D2                     i2l10165:
 23442  0056D2  C0E8  F001         	movff	_f_arm_position,??_updateArmState	;volatile
 23443  0056D6  C0E9  F002         	movff	_f_arm_position+1,??_updateArmState+1	;volatile
 23444                           
 23445                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 23446                           ; Switch size 1, requested type "space"
 23447                           ; Number of cases is 1, Range of values is 0 to 0
 23448                           ; switch strategies available:
 23449                           ; Name         Instructions Cycles
 23450                           ; simple_byte            4     3 (average)
 23451                           ;	Chosen strategy is simple_byte
 23452  0056DA  5002               	movf	??_updateArmState+1,w,c
 23453  0056DC  0A00               	xorlw	0	; case 0
 23454  0056DE  A4D8               	btfss	status,2,c
 23455  0056E0  0012               	return	
 23456                           
 23457                           ; Switch size 1, requested type "space"
 23458                           ; Number of cases is 2, Range of values is 0 to 1
 23459                           ; switch strategies available:
 23460                           ; Name         Instructions Cycles
 23461                           ; simple_byte            7     4 (average)
 23462                           ;	Chosen strategy is simple_byte
 23463  0056E2  5001               	movf	??_updateArmState,w,c
 23464  0056E4  0A00               	xorlw	0	; case 0
 23465  0056E6  B4D8               	btfsc	status,2,c
 23466  0056E8  D7EE               	goto	i2l10159
 23467  0056EA  0A01               	xorlw	1	; case 1
 23468  0056EC  A4D8               	btfss	status,2,c
 23469                           
 23470                           ;sort.c: 676: }
 23471  0056EE  0012               	return	
 23472  0056F0  D7ED               	goto	i2l10161
 23473  0056F2                     i2l949:
 23474                           
 23475                           ;sort.c: 677: else{
 23476                           ;sort.c: 679: PR2 = 0xFF;
 23477  0056F2  68CB               	setf	4043,c	;volatile
 23478  0056F4  0012               	return	
 23479  0056F6                     __end_of_updateArmState:
 23480                           	opt stack 0
 23481                           pclatu	equ	0xFFB
 23482                           pclath	equ	0xFFA
 23483                           tblptru	equ	0xFF8
 23484                           tblptrh	equ	0xFF7
 23485                           tblptrl	equ	0xFF6
 23486                           tablat	equ	0xFF5
 23487                           prodh	equ	0xFF4
 23488                           prodl	equ	0xFF3
 23489                           intcon	equ	0xFF2
 23490                           intcon2	equ	0xFF1
 23491                           intcon3	equ	0xFF0
 23492                           indf0	equ	0xFEF
 23493                           postinc0	equ	0xFEE
 23494                           fsr0h	equ	0xFEA
 23495                           fsr0l	equ	0xFE9
 23496                           wreg	equ	0xFE8
 23497                           postdec1	equ	0xFE5
 23498                           fsr1h	equ	0xFE2
 23499                           fsr1l	equ	0xFE1
 23500                           indf2	equ	0xFDF
 23501                           postinc2	equ	0xFDE
 23502                           postdec2	equ	0xFDD
 23503                           fsr2h	equ	0xFDA
 23504                           fsr2l	equ	0xFD9
 23505                           status	equ	0xFD8
 23506                           
 23507 ;; *************** function _printSortTimer *****************
 23508 ;; Defined at:
 23509 ;;		line 485 in file "sort.c"
 23510 ;; Parameters:    Size  Location     Type
 23511 ;;		None
 23512 ;; Auto vars:     Size  Location     Type
 23513 ;;  i               2   66[COMRAM] int 
 23514 ;;  i               2   70[COMRAM] int 
 23515 ;;  curTime        14   44[COMRAM] int [7]
 23516 ;;  sec             2   72[COMRAM] int 
 23517 ;;  min             2   68[COMRAM] int 
 23518 ;;  timeDiff        2   64[COMRAM] unsigned int 
 23519 ;;  cur_sec         2   60[COMRAM] unsigned int 
 23520 ;;  start_sec       2   58[COMRAM] unsigned int 
 23521 ;; Return value:  Size  Location     Type
 23522 ;;                  1    wreg      void 
 23523 ;; Registers used:
 23524 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23525 ;; Tracked objects:
 23526 ;;		On entry : 0/0
 23527 ;;		On exit  : 0/0
 23528 ;;		Unchanged: 0/0
 23529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23531 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23532 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23533 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23534 ;;Total ram usage:       33 bytes
 23535 ;; Hardware stack levels used:    1
 23536 ;; Hardware stack levels required when called:    3
 23537 ;; This function calls:
 23538 ;;		i2___lwdiv
 23539 ;;		i2___lwmod
 23540 ;;		i2___wmul
 23541 ;;		i2_delay_ms
 23542 ;;		i2_getRTC
 23543 ;;		i2_lcdInst
 23544 ;;		i2_printf
 23545 ;; This function is called by:
 23546 ;;		_handler
 23547 ;; This function uses a non-reentrant model
 23548 ;;
 23549                           
 23550                           	psect	text86
 23551  0027BE                     __ptext86:
 23552                           	opt stack 0
 23553  0027BE                     _printSortTimer:
 23554                           	opt stack 20
 23555                           
 23556                           ;sort.c: 486: getRTC();
 23557                           
 23558                           ;incstack = 0
 23559  0027BE  EC77  F028         	call	i2_getRTC	;wreg free
 23560                           
 23561                           ;sort.c: 487: int curTime[7];
 23562                           ;sort.c: 488: for(int i = 0; i < 7; i++){
 23563  0027C2  0E00               	movlw	0
 23564  0027C4  6E48               	movwf	printSortTimer@i+1,c
 23565  0027C6  0E00               	movlw	0
 23566  0027C8  6E47               	movwf	printSortTimer@i,c
 23567  0027CA                     i2l9969:
 23568  0027CA  BE48               	btfsc	printSortTimer@i+1,7,c
 23569  0027CC  D006               	goto	i2l9973
 23570  0027CE  5048               	movf	printSortTimer@i+1,w,c
 23571  0027D0  E131               	bnz	i2l9979
 23572  0027D2  0E07               	movlw	7
 23573  0027D4  5C47               	subwf	printSortTimer@i,w,c
 23574  0027D6  B0D8               	btfsc	status,0,c
 23575  0027D8  D02D               	goto	i2l9979
 23576  0027DA                     i2l9973:
 23577                           
 23578                           ;sort.c: 489: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 23579  0027DA  0E1C               	movlw	low _time
 23580  0027DC  2447               	addwf	printSortTimer@i,w,c
 23581  0027DE  6ED9               	movwf	fsr2l,c
 23582  0027E0  0E01               	movlw	high _time
 23583  0027E2  2048               	addwfc	printSortTimer@i+1,w,c
 23584  0027E4  6EDA               	movwf	fsr2h,c
 23585  0027E6  50DF               	movf	indf2,w,c
 23586  0027E8  6E2A               	movwf	??_printSortTimer& (0+255),c
 23587  0027EA  3A2A               	swapf	??_printSortTimer,f,c
 23588  0027EC  0E0F               	movlw	15
 23589  0027EE  162A               	andwf	??_printSortTimer,f,c
 23590  0027F0  0E0F               	movlw	15
 23591  0027F2  162A               	andwf	??_printSortTimer,f,c
 23592  0027F4  502A               	movf	??_printSortTimer,w,c
 23593  0027F6  0D0A               	mullw	10
 23594  0027F8  0E1C               	movlw	low _time
 23595  0027FA  2447               	addwf	printSortTimer@i,w,c
 23596  0027FC  6ED9               	movwf	fsr2l,c
 23597  0027FE  0E01               	movlw	high _time
 23598  002800  2048               	addwfc	printSortTimer@i+1,w,c
 23599  002802  6EDA               	movwf	fsr2h,c
 23600  002804  50DF               	movf	indf2,w,c
 23601  002806  0B0F               	andlw	15
 23602  002808  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 23603  00280A  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 23604  00280C  50F3               	movf	prodl,w,c
 23605  00280E  262B               	addwf	??_printSortTimer+1,f,c
 23606  002810  50F4               	movf	prodh,w,c
 23607  002812  222C               	addwfc	??_printSortTimer+2,f,c
 23608  002814  90D8               	bcf	status,0,c
 23609  002816  3447               	rlcf	printSortTimer@i,w,c
 23610  002818  6ED9               	movwf	fsr2l,c
 23611  00281A  3448               	rlcf	printSortTimer@i+1,w,c
 23612  00281C  6EDA               	movwf	fsr2h,c
 23613  00281E  0E2D               	movlw	low printSortTimer@curTime
 23614  002820  26D9               	addwf	fsr2l,f,c
 23615  002822  0E00               	movlw	high printSortTimer@curTime
 23616  002824  22DA               	addwfc	fsr2h,f,c
 23617  002826  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 23618  00282A  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 23619  00282E  4A47               	infsnz	printSortTimer@i,f,c
 23620  002830  2A48               	incf	printSortTimer@i+1,f,c
 23621  002832  D7CB               	goto	i2l9969
 23622  002834                     i2l9979:
 23623                           
 23624                           ;sort.c: 490: }
 23625                           ;sort.c: 491: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 23626  002834  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 23627  002838  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 23628  00283C  0E00               	movlw	0
 23629  00283E  6E04               	movwf	i2___wmul@multiplicand+1,c
 23630  002840  0E3C               	movlw	60
 23631  002842  6E03               	movwf	i2___wmul@multiplicand,c
 23632  002844  ECA2  F02D         	call	i2___wmul	;wreg free
 23633  002848  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 23634  00284C  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 23635  002850  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 23636  002854  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 23637  002858  0E0E               	movlw	14
 23638  00285A  6E04               	movwf	i2___wmul@multiplicand+1,c
 23639  00285C  0E10               	movlw	16
 23640  00285E  6E03               	movwf	i2___wmul@multiplicand,c
 23641  002860  ECA2  F02D         	call	i2___wmul	;wreg free
 23642  002864  5001               	movf	?i2___wmul,w,c
 23643  002866  262A               	addwf	??_printSortTimer,f,c
 23644  002868  5002               	movf	?i2___wmul+1,w,c
 23645  00286A  222B               	addwfc	??_printSortTimer+1,f,c
 23646  00286C  0101               	movlb	1	; () banked
 23647  00286E  510E               	movf	_startTime& (0+255),w,b
 23648  002870  242A               	addwf	??_printSortTimer,w,c
 23649  002872  6E3B               	movwf	printSortTimer@start_sec,c
 23650  002874  0101               	movlb	1	; () banked
 23651  002876  510F               	movf	(_startTime+1)& (0+255),w,b
 23652  002878  202B               	addwfc	??_printSortTimer+1,w,c
 23653  00287A  6E3C               	movwf	printSortTimer@start_sec+1,c
 23654                           
 23655                           ;sort.c: 492: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 23656  00287C  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 23657  002880  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 23658  002884  0E00               	movlw	0
 23659  002886  6E04               	movwf	i2___wmul@multiplicand+1,c
 23660  002888  0E3C               	movlw	60
 23661  00288A  6E03               	movwf	i2___wmul@multiplicand,c
 23662  00288C  ECA2  F02D         	call	i2___wmul	;wreg free
 23663  002890  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 23664  002894  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 23665  002898  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 23666  00289C  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 23667  0028A0  0E0E               	movlw	14
 23668  0028A2  6E04               	movwf	i2___wmul@multiplicand+1,c
 23669  0028A4  0E10               	movlw	16
 23670  0028A6  6E03               	movwf	i2___wmul@multiplicand,c
 23671  0028A8  ECA2  F02D         	call	i2___wmul	;wreg free
 23672  0028AC  5001               	movf	?i2___wmul,w,c
 23673  0028AE  262A               	addwf	??_printSortTimer,f,c
 23674  0028B0  5002               	movf	?i2___wmul+1,w,c
 23675  0028B2  222B               	addwfc	??_printSortTimer+1,f,c
 23676  0028B4  502D               	movf	printSortTimer@curTime,w,c
 23677  0028B6  242A               	addwf	??_printSortTimer,w,c
 23678  0028B8  6E3D               	movwf	printSortTimer@cur_sec,c
 23679  0028BA  502E               	movf	printSortTimer@curTime+1,w,c
 23680  0028BC  202B               	addwfc	??_printSortTimer+1,w,c
 23681  0028BE  6E3E               	movwf	printSortTimer@cur_sec+1,c
 23682                           
 23683                           ;sort.c: 493: unsigned int timeDiff = cur_sec - start_sec;
 23684  0028C0  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 23685  0028C4  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 23686  0028C8  1E2A               	comf	??_printSortTimer,f,c
 23687  0028CA  1E2B               	comf	??_printSortTimer+1,f,c
 23688  0028CC  4A2A               	infsnz	??_printSortTimer,f,c
 23689  0028CE  2A2B               	incf	??_printSortTimer+1,f,c
 23690  0028D0  503D               	movf	printSortTimer@cur_sec,w,c
 23691  0028D2  242A               	addwf	??_printSortTimer,w,c
 23692  0028D4  6E41               	movwf	printSortTimer@timeDiff,c
 23693  0028D6  503E               	movf	printSortTimer@cur_sec+1,w,c
 23694  0028D8  202B               	addwfc	??_printSortTimer+1,w,c
 23695  0028DA  6E42               	movwf	printSortTimer@timeDiff+1,c
 23696                           
 23697                           ;sort.c: 495: total_time = timeDiff;
 23698  0028DC  C041  F0FA         	movff	printSortTimer@timeDiff,_total_time
 23699  0028E0  C042  F0FB         	movff	printSortTimer@timeDiff+1,_total_time+1
 23700                           
 23701                           ;sort.c: 497: if(f_most_recent_sort_time){
 23702  0028E4  0101               	movlb	1	; () banked
 23703  0028E6  5137               	movf	_f_most_recent_sort_time& (0+255),w,b
 23704  0028E8  0101               	movlb	1	; () banked
 23705  0028EA  1138               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 23706  0028EC  B4D8               	btfsc	status,2,c
 23707  0028EE  D009               	goto	i2l9991
 23708                           
 23709                           ; BSR set to: 1
 23710                           ;sort.c: 498: most_recent_sort_time = total_time;
 23711  0028F0  C0FA  F145         	movff	_total_time,_most_recent_sort_time
 23712  0028F4  C0FB  F146         	movff	_total_time+1,_most_recent_sort_time+1
 23713                           
 23714                           ; BSR set to: 1
 23715                           ;sort.c: 499: f_most_recent_sort_time = 0;
 23716  0028F8  0E00               	movlw	0
 23717  0028FA  0101               	movlb	1	; () banked
 23718  0028FC  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 23719  0028FE  0E00               	movlw	0
 23720  002900  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
 23721  002902                     i2l9991:
 23722                           
 23723                           ; BSR set to: 1
 23724                           ;sort.c: 500: }
 23725                           ;sort.c: 502: if((total_time - most_recent_sort_time == 42) || (total_time == 179)){
 23726  002902  C145  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 23727  002906  C146  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 23728  00290A  1E2A               	comf	??_printSortTimer,f,c
 23729  00290C  1E2B               	comf	??_printSortTimer+1,f,c
 23730  00290E  4A2A               	infsnz	??_printSortTimer,f,c
 23731  002910  2A2B               	incf	??_printSortTimer+1,f,c
 23732  002912  0100               	movlb	0	; () banked
 23733  002914  51FA               	movf	_total_time& (0+255),w,b
 23734  002916  262A               	addwf	??_printSortTimer,f,c
 23735  002918  0100               	movlb	0	; () banked
 23736  00291A  51FB               	movf	(_total_time+1)& (0+255),w,b
 23737  00291C  222B               	addwfc	??_printSortTimer+1,f,c
 23738  00291E  0E2A               	movlw	42
 23739  002920  182A               	xorwf	??_printSortTimer,w,c
 23740  002922  102B               	iorwf	??_printSortTimer+1,w,c
 23741  002924  B4D8               	btfsc	status,2,c
 23742  002926  D007               	goto	i2l9995
 23743                           
 23744                           ; BSR set to: 0
 23745  002928  0EB3               	movlw	179
 23746  00292A  0100               	movlb	0	; () banked
 23747  00292C  19FA               	xorwf	_total_time& (0+255),w,b
 23748  00292E  0100               	movlb	0	; () banked
 23749  002930  11FB               	iorwf	(_total_time+1)& (0+255),w,b
 23750  002932  A4D8               	btfss	status,2,c
 23751  002934  D003               	goto	i2l9997
 23752  002936                     i2l9995:
 23753                           
 23754                           ; BSR set to: 0
 23755                           ;sort.c: 503: machine_state = DoneSorting_state;
 23756  002936  0E02               	movlw	2
 23757  002938  0100               	movlb	0	; () banked
 23758  00293A  6FFC               	movwf	_machine_state& (0+255),b
 23759  00293C                     i2l9997:
 23760                           
 23761                           ; BSR set to: 0
 23762                           ;sort.c: 505: }
 23763                           ;sort.c: 507: int min = (timeDiff % 3600) / 60;
 23764  00293C  0E0E               	movlw	14
 23765  00293E  6E04               	movwf	i2___lwmod@divisor+1,c
 23766  002940  0E10               	movlw	16
 23767  002942  6E03               	movwf	i2___lwmod@divisor,c
 23768  002944  C041  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 23769  002948  C042  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 23770  00294C  EC3D  F02B         	call	i2___lwmod	;wreg free
 23771  002950  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 23772  002954  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 23773  002958  0E00               	movlw	0
 23774  00295A  6E09               	movwf	i2___lwdiv@divisor+1,c
 23775  00295C  0E3C               	movlw	60
 23776  00295E  6E08               	movwf	i2___lwdiv@divisor,c
 23777  002960  EC36  F02A         	call	i2___lwdiv	;wreg free
 23778  002964  C006  F045         	movff	?i2___lwdiv,printSortTimer@min
 23779  002968  C007  F046         	movff	?i2___lwdiv+1,printSortTimer@min+1
 23780                           
 23781                           ;sort.c: 508: int sec = (timeDiff % 3600) % 60;
 23782  00296C  0E0E               	movlw	14
 23783  00296E  6E04               	movwf	i2___lwmod@divisor+1,c
 23784  002970  0E10               	movlw	16
 23785  002972  6E03               	movwf	i2___lwmod@divisor,c
 23786  002974  C041  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 23787  002978  C042  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 23788  00297C  EC3D  F02B         	call	i2___lwmod	;wreg free
 23789  002980  C001  F03F         	movff	?i2___lwmod,_printSortTimer$2564
 23790  002984  C002  F040         	movff	?i2___lwmod+1,_printSortTimer$2564+1
 23791                           
 23792                           ;sort.c: 508: int sec = (timeDiff % 3600) % 60;
 23793  002988  C03F  F001         	movff	_printSortTimer$2564,i2___lwmod@dividend
 23794  00298C  C040  F002         	movff	_printSortTimer$2564+1,i2___lwmod@dividend+1
 23795  002990  0E00               	movlw	0
 23796  002992  6E04               	movwf	i2___lwmod@divisor+1,c
 23797  002994  0E3C               	movlw	60
 23798  002996  6E03               	movwf	i2___lwmod@divisor,c
 23799  002998  EC3D  F02B         	call	i2___lwmod	;wreg free
 23800  00299C  C001  F049         	movff	?i2___lwmod,printSortTimer@sec
 23801  0029A0  C002  F04A         	movff	?i2___lwmod+1,printSortTimer@sec+1
 23802                           
 23803                           ;sort.c: 510: lcdInst(0b10000000);;
 23804  0029A4  0E80               	movlw	128
 23805  0029A6  EC67  F02E         	call	i2_lcdInst
 23806                           
 23807                           ;sort.c: 511: printf("SORTING...      ");
 23808  0029AA  0EB7               	movlw	low STR_65
 23809  0029AC  6E0D               	movwf	i2printf@f,c
 23810  0029AE  0EFC               	movlw	high STR_65
 23811  0029B0  6E0E               	movwf	i2printf@f+1,c
 23812  0029B2  EC28  F012         	call	i2_printf	;wreg free
 23813                           
 23814                           ;sort.c: 512: lcdInst(0b11000000);;
 23815  0029B6  0EC0               	movlw	192
 23816  0029B8  EC67  F02E         	call	i2_lcdInst
 23817                           
 23818                           ;sort.c: 513: printf("TIME %d:%02d    ", min, sec);
 23819  0029BC  0EC8               	movlw	low STR_66
 23820  0029BE  6E0D               	movwf	i2printf@f,c
 23821  0029C0  0EFC               	movlw	high STR_66
 23822  0029C2  6E0E               	movwf	i2printf@f+1,c
 23823  0029C4  C045  F00F         	movff	printSortTimer@min,?i2_printf+2
 23824  0029C8  C046  F010         	movff	printSortTimer@min+1,?i2_printf+3
 23825  0029CC  C049  F011         	movff	printSortTimer@sec,?i2_printf+4
 23826  0029D0  C04A  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 23827  0029D4  EC28  F012         	call	i2_printf	;wreg free
 23828                           
 23829                           ;sort.c: 515: if(total_time % 4 == 0){
 23830  0029D8  0E03               	movlw	3
 23831  0029DA  0100               	movlb	0	; () banked
 23832  0029DC  15FA               	andwf	_total_time& (0+255),w,b
 23833  0029DE  6E2A               	movwf	??_printSortTimer& (0+255),c
 23834  0029E0  0E00               	movlw	0
 23835  0029E2  0100               	movlb	0	; () banked
 23836  0029E4  15FB               	andwf	(_total_time+1)& (0+255),w,b
 23837  0029E6  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 23838  0029E8  502A               	movf	??_printSortTimer,w,c
 23839  0029EA  102B               	iorwf	??_printSortTimer+1,w,c
 23840  0029EC  A4D8               	btfss	status,2,c
 23841  0029EE  0012               	return	
 23842                           
 23843                           ; BSR set to: 0
 23844                           ;sort.c: 516: LATBbits.LATB2 = 0;
 23845  0029F0  948A               	bcf	3978,2,c	;volatile
 23846                           
 23847                           ; BSR set to: 0
 23848                           ;sort.c: 518: sec++;
 23849  0029F2  4A49               	infsnz	printSortTimer@sec,f,c
 23850  0029F4  2A4A               	incf	printSortTimer@sec+1,f,c
 23851                           
 23852                           ; BSR set to: 0
 23853                           ;sort.c: 519: if(sec==60){
 23854  0029F6  0E3C               	movlw	60
 23855  0029F8  1849               	xorwf	printSortTimer@sec,w,c
 23856  0029FA  104A               	iorwf	printSortTimer@sec+1,w,c
 23857  0029FC  A4D8               	btfss	status,2,c
 23858  0029FE  D006               	goto	i2l10023
 23859                           
 23860                           ; BSR set to: 0
 23861                           ;sort.c: 520: sec = 0;
 23862  002A00  0E00               	movlw	0
 23863  002A02  6E4A               	movwf	printSortTimer@sec+1,c
 23864  002A04  0E00               	movlw	0
 23865  002A06  6E49               	movwf	printSortTimer@sec,c
 23866                           
 23867                           ; BSR set to: 0
 23868                           ;sort.c: 521: min++;
 23869  002A08  4A45               	infsnz	printSortTimer@min,f,c
 23870  002A0A  2A46               	incf	printSortTimer@min+1,f,c
 23871  002A0C                     i2l10023:
 23872                           
 23873                           ; BSR set to: 0
 23874                           ;sort.c: 522: }
 23875                           ;sort.c: 523: _delay((unsigned long)((1000)*(32000000/4000.0)));
 23876  002A0C  0E29               	movlw	41
 23877  002A0E  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 23878  002A10  0E96               	movlw	150
 23879  002A12  6E2A               	movwf	??_printSortTimer& (0+255),c
 23880  002A14  0E7F               	movlw	127
 23881  002A16                     i2u1137_47:
 23882  002A16  2EE8               	decfsz	wreg,f,c
 23883  002A18  D7FE               	bra	i2u1137_47
 23884  002A1A  2E2A               	decfsz	??_printSortTimer& (0+255),f,c
 23885  002A1C  D7FC               	bra	i2u1137_47
 23886  002A1E  2E2B               	decfsz	(??_printSortTimer+1)& (0+255),f,c
 23887  002A20  D7FA               	bra	i2u1137_47
 23888  002A22  F000               	nop	
 23889                           
 23890                           ;sort.c: 524: lcdInst(0b10000000);;
 23891  002A24  0E80               	movlw	128
 23892  002A26  EC67  F02E         	call	i2_lcdInst
 23893                           
 23894                           ;sort.c: 525: printf("SORTING...      ");
 23895  002A2A  0EB7               	movlw	low STR_65
 23896  002A2C  6E0D               	movwf	i2printf@f,c
 23897  002A2E  0EFC               	movlw	high STR_65
 23898  002A30  6E0E               	movwf	i2printf@f+1,c
 23899  002A32  EC28  F012         	call	i2_printf	;wreg free
 23900                           
 23901                           ;sort.c: 526: lcdInst(0b11000000);;
 23902  002A36  0EC0               	movlw	192
 23903  002A38  EC67  F02E         	call	i2_lcdInst
 23904                           
 23905                           ;sort.c: 527: printf("TIME %d:%02d    ", min, sec);
 23906  002A3C  0EC8               	movlw	low STR_66
 23907  002A3E  6E0D               	movwf	i2printf@f,c
 23908  002A40  0EFC               	movlw	high STR_66
 23909  002A42  6E0E               	movwf	i2printf@f+1,c
 23910  002A44  C045  F00F         	movff	printSortTimer@min,?i2_printf+2
 23911  002A48  C046  F010         	movff	printSortTimer@min+1,?i2_printf+3
 23912  002A4C  C049  F011         	movff	printSortTimer@sec,?i2_printf+4
 23913  002A50  C04A  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 23914  002A54  EC28  F012         	call	i2_printf	;wreg free
 23915                           
 23916                           ;sort.c: 529: sec++;
 23917  002A58  4A49               	infsnz	printSortTimer@sec,f,c
 23918  002A5A  2A4A               	incf	printSortTimer@sec+1,f,c
 23919                           
 23920                           ;sort.c: 530: if(sec==60){
 23921  002A5C  0E3C               	movlw	60
 23922  002A5E  1849               	xorwf	printSortTimer@sec,w,c
 23923  002A60  104A               	iorwf	printSortTimer@sec+1,w,c
 23924  002A62  A4D8               	btfss	status,2,c
 23925  002A64  D006               	goto	i2l10041
 23926                           
 23927                           ;sort.c: 531: sec = 0;
 23928  002A66  0E00               	movlw	0
 23929  002A68  6E4A               	movwf	printSortTimer@sec+1,c
 23930  002A6A  0E00               	movlw	0
 23931  002A6C  6E49               	movwf	printSortTimer@sec,c
 23932                           
 23933                           ;sort.c: 532: min++;
 23934  002A6E  4A45               	infsnz	printSortTimer@min,f,c
 23935  002A70  2A46               	incf	printSortTimer@min+1,f,c
 23936  002A72                     i2l10041:
 23937                           
 23938                           ;sort.c: 533: }
 23939                           ;sort.c: 534: _delay((unsigned long)((1000)*(32000000/4000.0)));
 23940  002A72  0E29               	movlw	41
 23941  002A74  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 23942  002A76  0E96               	movlw	150
 23943  002A78  6E2A               	movwf	??_printSortTimer& (0+255),c
 23944  002A7A  0E7F               	movlw	127
 23945  002A7C                     i2u1138_47:
 23946  002A7C  2EE8               	decfsz	wreg,f,c
 23947  002A7E  D7FE               	bra	i2u1138_47
 23948  002A80  2E2A               	decfsz	??_printSortTimer& (0+255),f,c
 23949  002A82  D7FC               	bra	i2u1138_47
 23950  002A84  2E2B               	decfsz	(??_printSortTimer+1)& (0+255),f,c
 23951  002A86  D7FA               	bra	i2u1138_47
 23952  002A88  F000               	nop	
 23953                           
 23954                           ;sort.c: 535: lcdInst(0b10000000);;
 23955  002A8A  0E80               	movlw	128
 23956  002A8C  EC67  F02E         	call	i2_lcdInst
 23957                           
 23958                           ;sort.c: 536: printf("SORTING...      ");
 23959  002A90  0EB7               	movlw	low STR_65
 23960  002A92  6E0D               	movwf	i2printf@f,c
 23961  002A94  0EFC               	movlw	high STR_65
 23962  002A96  6E0E               	movwf	i2printf@f+1,c
 23963  002A98  EC28  F012         	call	i2_printf	;wreg free
 23964                           
 23965                           ;sort.c: 537: lcdInst(0b11000000);;
 23966  002A9C  0EC0               	movlw	192
 23967  002A9E  EC67  F02E         	call	i2_lcdInst
 23968                           
 23969                           ;sort.c: 538: printf("TIME %d:%02d    ", min, sec);
 23970  002AA2  0EC8               	movlw	low STR_66
 23971  002AA4  6E0D               	movwf	i2printf@f,c
 23972  002AA6  0EFC               	movlw	high STR_66
 23973  002AA8  6E0E               	movwf	i2printf@f+1,c
 23974  002AAA  C045  F00F         	movff	printSortTimer@min,?i2_printf+2
 23975  002AAE  C046  F010         	movff	printSortTimer@min+1,?i2_printf+3
 23976  002AB2  C049  F011         	movff	printSortTimer@sec,?i2_printf+4
 23977  002AB6  C04A  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 23978  002ABA  EC28  F012         	call	i2_printf	;wreg free
 23979                           
 23980                           ;sort.c: 540: for(int i=0; i<46; i++){
 23981  002ABE  0E00               	movlw	0
 23982  002AC0  6E44               	movwf	printSortTimer@i_1167+1,c
 23983  002AC2  0E00               	movlw	0
 23984  002AC4  6E43               	movwf	printSortTimer@i_1167,c
 23985  002AC6  BE44               	btfsc	printSortTimer@i_1167+1,7,c
 23986  002AC8  D006               	goto	i2l10055
 23987  002ACA  5044               	movf	printSortTimer@i_1167+1,w,c
 23988  002ACC  E11D               	bnz	i2l904
 23989  002ACE  0E2E               	movlw	46
 23990  002AD0  5C43               	subwf	printSortTimer@i_1167,w,c
 23991  002AD2  B0D8               	btfsc	status,0,c
 23992  002AD4  D019               	goto	i2l904
 23993  002AD6                     i2l10055:
 23994                           
 23995                           ;sort.c: 541: LATBbits.LATB2 = !LATBbits.LATB2;
 23996  002AD6  B48A               	btfsc	3978,2,c	;volatile
 23997  002AD8  D003               	goto	i2u950_40
 23998  002ADA  6A2A               	clrf	??_printSortTimer& (0+255),c
 23999  002ADC  2A2A               	incf	??_printSortTimer& (0+255),f,c
 24000  002ADE  D001               	goto	i2u951_48
 24001  002AE0                     i2u950_40:
 24002  002AE0  6A2A               	clrf	??_printSortTimer& (0+255),c
 24003  002AE2                     i2u951_48:
 24004  002AE2  462A               	rlncf	??_printSortTimer,f,c
 24005  002AE4  462A               	rlncf	??_printSortTimer,f,c
 24006  002AE6  508A               	movf	3978,w,c	;volatile
 24007  002AE8  182A               	xorwf	??_printSortTimer,w,c
 24008  002AEA  0BFB               	andlw	-5
 24009  002AEC  182A               	xorwf	??_printSortTimer,w,c
 24010  002AEE  6E8A               	movwf	3978,c	;volatile
 24011                           
 24012                           ;sort.c: 542: delay_ms(45-i);
 24013  002AF0  5043               	movf	printSortTimer@i_1167,w,c
 24014  002AF2  0800               	sublw	0
 24015  002AF4  0F2D               	addlw	45
 24016  002AF6  EC19  F02E         	call	i2_delay_ms
 24017  002AFA  4A43               	infsnz	printSortTimer@i_1167,f,c
 24018  002AFC  2A44               	incf	printSortTimer@i_1167+1,f,c
 24019  002AFE  BE44               	btfsc	printSortTimer@i_1167+1,7,c
 24020  002B00  D7EA               	goto	i2l10055
 24021  002B02  5044               	movf	printSortTimer@i_1167+1,w,c
 24022  002B04  E101               	bnz	i2u952_40
 24023  002B06  D7E3               	goto	L20
 24024  002B08                     i2u952_40:
 24025  002B08                     i2l904:
 24026                           
 24027                           ;sort.c: 543: }
 24028                           ;sort.c: 544: LATBbits.LATB2 = 1;
 24029  002B08  848A               	bsf	3978,2,c	;volatile
 24030  002B0A  0012               	return	
 24031  002B0C                     __end_of_printSortTimer:
 24032                           	opt stack 0
 24033                           pclatu	equ	0xFFB
 24034                           pclath	equ	0xFFA
 24035                           tblptru	equ	0xFF8
 24036                           tblptrh	equ	0xFF7
 24037                           tblptrl	equ	0xFF6
 24038                           tablat	equ	0xFF5
 24039                           prodh	equ	0xFF4
 24040                           prodl	equ	0xFF3
 24041                           intcon	equ	0xFF2
 24042                           intcon2	equ	0xFF1
 24043                           intcon3	equ	0xFF0
 24044                           indf0	equ	0xFEF
 24045                           postinc0	equ	0xFEE
 24046                           fsr0h	equ	0xFEA
 24047                           fsr0l	equ	0xFE9
 24048                           wreg	equ	0xFE8
 24049                           postdec1	equ	0xFE5
 24050                           fsr1h	equ	0xFE2
 24051                           fsr1l	equ	0xFE1
 24052                           indf2	equ	0xFDF
 24053                           postinc2	equ	0xFDE
 24054                           postdec2	equ	0xFDD
 24055                           fsr2h	equ	0xFDA
 24056                           fsr2l	equ	0xFD9
 24057                           status	equ	0xFD8
 24058                           
 24059 ;; *************** function i2_printf *****************
 24060 ;; Defined at:
 24061 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 24062 ;; Parameters:    Size  Location     Type
 24063 ;;  f               2   12[COMRAM] PTR const unsigned char 
 24064 ;;		 -> STR_134(18), STR_133(18), STR_132(17), STR_131(17), 
 24065 ;;		 -> STR_130(15), STR_129(15), STR_128(18), STR_127(15), 
 24066 ;;		 -> STR_126(18), STR_125(18), STR_124(17), STR_123(17), 
 24067 ;;		 -> STR_122(17), STR_121(17), STR_120(17), STR_119(17), 
 24068 ;;		 -> STR_118(17), STR_117(17), STR_116(18), STR_115(17), 
 24069 ;;		 -> STR_114(15), STR_113(15), STR_112(15), STR_111(17), 
 24070 ;;		 -> STR_110(17), STR_109(17), STR_108(16), STR_107(17), 
 24071 ;;		 -> STR_106(17), STR_105(17), STR_104(17), STR_103(17), 
 24072 ;;		 -> STR_102(17), STR_101(15), STR_100(11), STR_99(17), 
 24073 ;;		 -> STR_98(11), STR_97(17), STR_96(14), STR_95(15), 
 24074 ;;		 -> STR_94(14), STR_93(10), STR_92(9), STR_91(9), 
 24075 ;;		 -> STR_90(10), STR_89(10), STR_88(16), STR_87(15), 
 24076 ;;		 -> STR_86(3), STR_85(15), STR_84(13), STR_83(14), 
 24077 ;;		 -> STR_82(8), STR_81(14), STR_80(15), STR_79(12), 
 24078 ;;		 -> STR_78(14), STR_77(17), STR_76(14), STR_75(15), 
 24079 ;;		 -> STR_74(17), STR_73(17), STR_72(7), STR_71(21), 
 24080 ;;		 -> STR_70(17), STR_69(17), STR_68(17), STR_67(17), 
 24081 ;;		 -> STR_66(17), STR_65(17), STR_64(22), STR_63(24), 
 24082 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 24083 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 24084 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 24085 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 24086 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 24087 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(17), 
 24088 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(14), 
 24089 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 24090 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 24091 ;;		 -> STR_1(18), 
 24092 ;; Auto vars:     Size  Location     Type
 24093 ;;  printf          4    0        struct .
 24094 ;;  printf          2   39[COMRAM] int 
 24095 ;;  printf          2   35[COMRAM] unsigned int 
 24096 ;;  printf          2   33[COMRAM] unsigned int 
 24097 ;;  printf          2   31[COMRAM] PTR void [1]
 24098 ;;		 -> ?i2_printf(2), ?_printf(2), 
 24099 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 24100 ;;		 -> STR_135(7), ID@res3(2), ID@res2(2), ID@res1(2), 
 24101 ;;		 -> count_total(2), printRTC@month(4), UI@month(4), 
 24102 ;;  printf          1   38[COMRAM] char 
 24103 ;;  printf          1   37[COMRAM] unsigned char 
 24104 ;;  printf          1   28[COMRAM] char 
 24105 ;; Return value:  Size  Location     Type
 24106 ;;                  2   12[COMRAM] int 
 24107 ;; Registers used:
 24108 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24109 ;; Tracked objects:
 24110 ;;		On entry : 0/0
 24111 ;;		On exit  : 0/0
 24112 ;;		Unchanged: 0/0
 24113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24114 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24115 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24116 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24117 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24118 ;;Total ram usage:       29 bytes
 24119 ;; Hardware stack levels used:    1
 24120 ;; Hardware stack levels required when called:    2
 24121 ;; This function calls:
 24122 ;;		i2___lwdiv
 24123 ;;		i2___lwmod
 24124 ;;		i2___wmul
 24125 ;;		i2_isdigit
 24126 ;;		i2_putch
 24127 ;; This function is called by:
 24128 ;;		_change_state_to_menu_11
 24129 ;;		_change_state_to_menu_23
 24130 ;;		_change_state_to_logs_11
 24131 ;;		_change_state_to_logs_12
 24132 ;;		_change_state_to_logs_22
 24133 ;;		_change_state_to_logs_23
 24134 ;;		_change_state_to_logs_33
 24135 ;;		_change_state_to_logs_34
 24136 ;;		_printSortTimer
 24137 ;;		i2_change_state_to_menu_start
 24138 ;;		i2_change_state_to_menu_12
 24139 ;;		i2_change_state_to_menu_22
 24140 ;;		i2_printRTC
 24141 ;; This function uses a non-reentrant model
 24142 ;;
 24143                           
 24144                           	psect	text87
 24145  002450                     __ptext87:
 24146                           	opt stack 0
 24147  002450                     i2_printf:
 24148                           	opt stack 20
 24149                           
 24150                           ;doprnt.c: 466: va_list ap;
 24151                           ;doprnt.c: 499: signed char c;
 24152                           ;doprnt.c: 501: int width;
 24153                           ;doprnt.c: 506: signed char prec;
 24154                           ;doprnt.c: 508: unsigned char flag;
 24155                           ;doprnt.c: 523: union {
 24156                           ;doprnt.c: 524: unsigned long vd;
 24157                           ;doprnt.c: 525: double integ;
 24158                           ;doprnt.c: 526: } tmpval;
 24159                           ;doprnt.c: 528: unsigned int val;
 24160                           ;doprnt.c: 529: unsigned len;
 24161                           ;doprnt.c: 530: const char * cp;
 24162                           ;doprnt.c: 533: *ap = __va_start();
 24163                           
 24164                           ;incstack = 0
 24165  002450  0E0F               	movlw	low (?i2_printf+2)
 24166  002452  6E20               	movwf	i2printf@ap,c
 24167  002454  0E00               	movlw	high (?i2_printf+2)
 24168  002456  6E21               	movwf	i2printf@ap+1,c
 24169                           
 24170                           ;doprnt.c: 536: while(c = *f++) {
 24171  002458  D1A4               	goto	i2l7139
 24172  00245A                     i2l7009:
 24173                           
 24174                           ;doprnt.c: 538: if(c != '%')
 24175  00245A  0E25               	movlw	37
 24176  00245C  1827               	xorwf	i2printf@c,w,c
 24177  00245E  B4D8               	btfsc	status,2,c
 24178  002460  D004               	goto	i2l7013
 24179                           
 24180                           ;doprnt.c: 540: {
 24181                           ;doprnt.c: 541: (putch(c) );
 24182  002462  5027               	movf	i2printf@c,w,c
 24183  002464  EC61  F02E         	call	i2_putch
 24184                           
 24185                           ;doprnt.c: 542: continue;
 24186  002468  D19C               	goto	i2l7139
 24187  00246A                     i2l7013:
 24188                           
 24189                           ;doprnt.c: 543: }
 24190                           ;doprnt.c: 546: width = 0;
 24191  00246A  0E00               	movlw	0
 24192  00246C  6E29               	movwf	i2printf@width+1,c
 24193  00246E  0E00               	movlw	0
 24194  002470  6E28               	movwf	i2printf@width,c
 24195                           
 24196                           ;doprnt.c: 548: flag = 0;
 24197  002472  0E00               	movlw	0
 24198  002474  6E26               	movwf	i2printf@flag,c
 24199                           
 24200                           ;doprnt.c: 551: switch(*f) {
 24201                           
 24202                           ;doprnt.c: 550: for(;;) {
 24203  002476  D003               	goto	i2l7019
 24204  002478                     i2l7015:
 24205                           
 24206                           ;doprnt.c: 580: flag |= 0x04;
 24207  002478  8426               	bsf	i2printf@flag,2,c
 24208                           
 24209                           ;doprnt.c: 581: f++;
 24210  00247A  4A0D               	infsnz	i2printf@f,f,c
 24211  00247C  2A0E               	incf	i2printf@f+1,f,c
 24212  00247E                     i2l7019:
 24213  00247E  C00D  FFF6         	movff	i2printf@f,tblptrl
 24214  002482  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24215  002486                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24216  002486  6AF8               	clrf	tblptru,c
 24217  002488                     	endif
 24218  002488                     	if	0	;tblptru may be non-zero
 24219  002488                     	endif
 24220  002488  0008               	tblrd		*
 24221  00248A  50F5               	movf	tablat,w,c
 24222                           
 24223                           ; Switch size 1, requested type "space"
 24224                           ; Number of cases is 1, Range of values is 48 to 48
 24225                           ; switch strategies available:
 24226                           ; Name         Instructions Cycles
 24227                           ; simple_byte            4     3 (average)
 24228                           ;	Chosen strategy is simple_byte
 24229  00248C  0A30               	xorlw	48	; case 48
 24230  00248E  B4D8               	btfsc	status,2,c
 24231  002490  D7F3               	goto	i2l7015
 24232                           
 24233                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 24234                           
 24235                           ;doprnt.c: 586: }
 24236                           
 24237                           ;doprnt.c: 585: break;
 24238  002492  C00D  FFF6         	movff	i2printf@f,tblptrl
 24239  002496  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24240  00249A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24241  00249A  6AF8               	clrf	tblptru,c
 24242  00249C                     	endif
 24243  00249C                     	if	0	;tblptru may be non-zero
 24244  00249C                     	endif
 24245  00249C  0008               	tblrd		*
 24246  00249E  50F5               	movf	tablat,w,c
 24247  0024A0  ECFC  F02D         	call	i2_isdigit
 24248  0024A4  A0D8               	btfss	status,0,c
 24249  0024A6  D0A6               	goto	i2l7067
 24250                           
 24251                           ;doprnt.c: 598: width = 0;
 24252  0024A8  0E00               	movlw	0
 24253  0024AA  6E29               	movwf	i2printf@width+1,c
 24254  0024AC  0E00               	movlw	0
 24255  0024AE  6E28               	movwf	i2printf@width,c
 24256  0024B0                     i2l7025:
 24257                           
 24258                           ;doprnt.c: 600: width *= 10;
 24259  0024B0  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 24260  0024B4  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 24261  0024B8  0E00               	movlw	0
 24262  0024BA  6E04               	movwf	i2___wmul@multiplicand+1,c
 24263  0024BC  0E0A               	movlw	10
 24264  0024BE  6E03               	movwf	i2___wmul@multiplicand,c
 24265  0024C0  ECA2  F02D         	call	i2___wmul	;wreg free
 24266  0024C4  C001  F028         	movff	?i2___wmul,i2printf@width
 24267  0024C8  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 24268                           
 24269                           ;doprnt.c: 601: width += *f++ - '0';
 24270  0024CC  0ED0               	movlw	208
 24271  0024CE  6E19               	movwf	??i2_printf& (0+255),c
 24272  0024D0  0EFF               	movlw	255
 24273  0024D2  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 24274  0024D4  C00D  FFF6         	movff	i2printf@f,tblptrl
 24275  0024D8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24276  0024DC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24277  0024DC  6AF8               	clrf	tblptru,c
 24278  0024DE                     	endif
 24279  0024DE                     	if	0	;tblptru may be non-zero
 24280  0024DE                     	endif
 24281  0024DE  0008               	tblrd		*
 24282  0024E0  50F5               	movf	tablat,w,c
 24283  0024E2  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 24284  0024E4  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 24285  0024E6  5019               	movf	??i2_printf,w,c
 24286  0024E8  261B               	addwf	??i2_printf+2,f,c
 24287  0024EA  501A               	movf	??i2_printf+1,w,c
 24288  0024EC  221C               	addwfc	??i2_printf+3,f,c
 24289  0024EE  501B               	movf	??i2_printf+2,w,c
 24290  0024F0  2628               	addwf	i2printf@width,f,c
 24291  0024F2  501C               	movf	??i2_printf+3,w,c
 24292  0024F4  2229               	addwfc	i2printf@width+1,f,c
 24293  0024F6  4A0D               	infsnz	i2printf@f,f,c
 24294  0024F8  2A0E               	incf	i2printf@f+1,f,c
 24295                           
 24296                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 24297  0024FA  C00D  FFF6         	movff	i2printf@f,tblptrl
 24298  0024FE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24299  002502                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24300  002502  6AF8               	clrf	tblptru,c
 24301  002504                     	endif
 24302  002504                     	if	0	;tblptru may be non-zero
 24303  002504                     	endif
 24304  002504  0008               	tblrd		*
 24305  002506  50F5               	movf	tablat,w,c
 24306  002508  ECFC  F02D         	call	i2_isdigit
 24307  00250C  A0D8               	btfss	status,0,c
 24308  00250E  D072               	goto	i2l7067
 24309  002510  D7CF               	goto	i2l7025
 24310  002512                     i2l7033:
 24311                           
 24312                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 24313  002512  C020  FFD9         	movff	i2printf@ap,fsr2l
 24314  002516  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24315  00251A  CFDE F01E          	movff	postinc2,i2printf@cp
 24316  00251E  CFDD F01F          	movff	postdec2,i2printf@cp+1
 24317  002522  0E02               	movlw	2
 24318  002524  2620               	addwf	i2printf@ap,f,c
 24319  002526  0E00               	movlw	0
 24320  002528  2221               	addwfc	i2printf@ap+1,f,c
 24321                           
 24322                           ;doprnt.c: 740: if(!cp)
 24323  00252A  501E               	movf	i2printf@cp,w,c
 24324  00252C  101F               	iorwf	i2printf@cp+1,w,c
 24325  00252E  A4D8               	btfss	status,2,c
 24326  002530  D004               	goto	i2l7041
 24327                           
 24328                           ;doprnt.c: 741: cp = "(null)";
 24329  002532  0EB6               	movlw	low STR_135
 24330  002534  6E1E               	movwf	i2printf@cp,c
 24331  002536  0EFF               	movlw	high STR_135
 24332  002538  6E1F               	movwf	i2printf@cp+1,c
 24333  00253A                     i2l7041:
 24334                           
 24335                           ;doprnt.c: 745: len = 0;
 24336  00253A  0E00               	movlw	0
 24337  00253C  6E23               	movwf	i2printf@len+1,c
 24338  00253E  0E00               	movlw	0
 24339  002540  6E22               	movwf	i2printf@len,c
 24340                           
 24341                           ;doprnt.c: 746: while(cp[len])
 24342  002542  D002               	goto	i2l7045
 24343  002544                     i2l7043:
 24344                           
 24345                           ;doprnt.c: 747: len++;
 24346  002544  4A22               	infsnz	i2printf@len,f,c
 24347  002546  2A23               	incf	i2printf@len+1,f,c
 24348  002548                     i2l7045:
 24349  002548  5022               	movf	i2printf@len,w,c
 24350  00254A  241E               	addwf	i2printf@cp,w,c
 24351  00254C  6E19               	movwf	??i2_printf& (0+255),c
 24352  00254E  5023               	movf	i2printf@len+1,w,c
 24353  002550  201F               	addwfc	i2printf@cp+1,w,c
 24354  002552  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 24355  002554  C019  FFF6         	movff	??i2_printf,tblptrl
 24356  002558  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 24357  00255C  0E00               	movlw	low (__mediumconst shr (0+16))
 24358  00255E  6EF8               	movwf	tblptru,c
 24359  002560  0E0F               	movlw	(high __ramtop+-1)
 24360  002562  64F7               	cpfsgt	tblptrh,c
 24361  002564  D003               	bra	i2u567_47
 24362  002566  0008               	tblrd		*
 24363  002568  50F5               	movf	tablat,w,c
 24364  00256A  D005               	bra	i2u567_40
 24365  00256C                     i2u567_47:
 24366  00256C  CFF6 FFE9          	movff	tblptrl,fsr0l
 24367  002570  CFF7 FFEA          	movff	tblptrh,fsr0h
 24368  002574  50EF               	movf	indf0,w,c
 24369  002576                     i2u567_40:
 24370  002576  0900               	iorlw	0
 24371  002578  A4D8               	btfss	status,2,c
 24372  00257A  D7E4               	goto	i2l7043
 24373                           
 24374                           ;doprnt.c: 757: if(width > len)
 24375  00257C  5028               	movf	i2printf@width,w,c
 24376  00257E  5C22               	subwf	i2printf@len,w,c
 24377  002580  5029               	movf	i2printf@width+1,w,c
 24378  002582  5823               	subwfb	i2printf@len+1,w,c
 24379  002584  B0D8               	btfsc	status,0,c
 24380  002586  D005               	goto	i2l7051
 24381                           
 24382                           ;doprnt.c: 758: width -= len;
 24383  002588  5022               	movf	i2printf@len,w,c
 24384  00258A  5E28               	subwf	i2printf@width,f,c
 24385  00258C  5023               	movf	i2printf@len+1,w,c
 24386  00258E  5A29               	subwfb	i2printf@width+1,f,c
 24387  002590  D008               	goto	i2l7055
 24388  002592                     i2l7051:
 24389                           
 24390                           ;doprnt.c: 759: else
 24391                           ;doprnt.c: 760: width = 0;
 24392  002592  0E00               	movlw	0
 24393  002594  6E29               	movwf	i2printf@width+1,c
 24394  002596  0E00               	movlw	0
 24395  002598  6E28               	movwf	i2printf@width,c
 24396                           
 24397                           ;doprnt.c: 764: while(width--)
 24398  00259A  D003               	goto	i2l7055
 24399  00259C                     i2l7053:
 24400                           
 24401                           ;doprnt.c: 765: (putch(' ') );
 24402  00259C  0E20               	movlw	32
 24403  00259E  EC61  F02E         	call	i2_putch
 24404  0025A2                     i2l7055:
 24405  0025A2  0628               	decf	i2printf@width,f,c
 24406  0025A4  A0D8               	btfss	status,0,c
 24407  0025A6  0629               	decf	i2printf@width+1,f,c
 24408  0025A8  2828               	incf	i2printf@width,w,c
 24409  0025AA  E1F8               	bnz	i2l7053
 24410  0025AC  2829               	incf	i2printf@width+1,w,c
 24411  0025AE  B4D8               	btfsc	status,2,c
 24412  0025B0  D016               	goto	i2l7061
 24413  0025B2  D7F4               	goto	i2l7053
 24414  0025B4                     i2l7057:
 24415                           
 24416                           ;doprnt.c: 768: (putch(*cp++) );
 24417  0025B4  C01E  FFF6         	movff	i2printf@cp,tblptrl
 24418  0025B8  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 24419  0025BC  0E00               	movlw	low (__mediumconst shr (0+16))
 24420  0025BE  6EF8               	movwf	tblptru,c
 24421  0025C0  0E0F               	movlw	(high __ramtop+-1)
 24422  0025C2  64F7               	cpfsgt	tblptrh,c
 24423  0025C4  D003               	bra	i2u571_47
 24424  0025C6  0008               	tblrd		*
 24425  0025C8  50F5               	movf	tablat,w,c
 24426  0025CA  D005               	bra	i2u571_40
 24427  0025CC                     i2u571_47:
 24428  0025CC  CFF6 FFE9          	movff	tblptrl,fsr0l
 24429  0025D0  CFF7 FFEA          	movff	tblptrh,fsr0h
 24430  0025D4  50EF               	movf	indf0,w,c
 24431  0025D6                     i2u571_40:
 24432  0025D6  EC61  F02E         	call	i2_putch
 24433  0025DA  4A1E               	infsnz	i2printf@cp,f,c
 24434  0025DC  2A1F               	incf	i2printf@cp+1,f,c
 24435  0025DE                     i2l7061:
 24436  0025DE  0622               	decf	i2printf@len,f,c
 24437  0025E0  A0D8               	btfss	status,0,c
 24438  0025E2  0623               	decf	i2printf@len+1,f,c
 24439  0025E4  2822               	incf	i2printf@len,w,c
 24440  0025E6  E1E6               	bnz	i2l7057
 24441  0025E8  2823               	incf	i2printf@len+1,w,c
 24442  0025EA  B4D8               	btfsc	status,2,c
 24443  0025EC  D0DA               	goto	i2l7139
 24444  0025EE  D7E2               	goto	i2l7057
 24445  0025F0                     i2l7063:
 24446                           
 24447                           ;doprnt.c: 818: flag |= 0x40;
 24448  0025F0  8C26               	bsf	i2printf@flag,6,c
 24449                           
 24450                           ;doprnt.c: 822: }
 24451                           
 24452                           ;doprnt.c: 819: break;
 24453  0025F2  D01B               	goto	i2l1517
 24454  0025F4                     i2l7067:
 24455  0025F4  C00D  FFF6         	movff	i2printf@f,tblptrl
 24456  0025F8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24457  0025FC  4A0D               	infsnz	i2printf@f,f,c
 24458  0025FE  2A0E               	incf	i2printf@f+1,f,c
 24459  002600                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24460  002600  6AF8               	clrf	tblptru,c
 24461  002602                     	endif
 24462  002602                     	if	0	;tblptru may be non-zero
 24463  002602                     	endif
 24464  002602  0008               	tblrd		*
 24465  002604  CFF5 F027          	movff	tablat,i2printf@c
 24466  002608  5027               	movf	i2printf@c,w,c
 24467                           
 24468                           ; Switch size 1, requested type "space"
 24469                           ; Number of cases is 5, Range of values is 0 to 117
 24470                           ; switch strategies available:
 24471                           ; Name         Instructions Cycles
 24472                           ; simple_byte           16     9 (average)
 24473                           ;	Chosen strategy is simple_byte
 24474  00260A  0A00               	xorlw	0	; case 0
 24475  00260C  B4D8               	btfsc	status,2,c
 24476  00260E  0012               	return	
 24477  002610  0A64               	xorlw	100	; case 100
 24478  002612  B4D8               	btfsc	status,2,c
 24479  002614  D00A               	goto	i2l1517
 24480  002616  0A0D               	xorlw	13	; case 105
 24481  002618  B4D8               	btfsc	status,2,c
 24482  00261A  D007               	goto	i2l1517
 24483  00261C  0A1A               	xorlw	26	; case 115
 24484  00261E  B4D8               	btfsc	status,2,c
 24485  002620  D778               	goto	i2l7033
 24486  002622  0A06               	xorlw	6	; case 117
 24487  002624  B4D8               	btfsc	status,2,c
 24488  002626  D7E4               	goto	i2l7063
 24489  002628  D0BC               	goto	i2l7139
 24490  00262A                     i2l1517:
 24491                           
 24492                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 24493  00262A  BC26               	btfsc	i2printf@flag,6,c
 24494  00262C  D015               	goto	i2l7079
 24495                           
 24496                           ;doprnt.c: 1253: {
 24497                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 24498  00262E  C020  FFD9         	movff	i2printf@ap,fsr2l
 24499  002632  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24500  002636  CFDE F024          	movff	postinc2,i2printf@val
 24501  00263A  CFDD F025          	movff	postdec2,i2printf@val+1
 24502  00263E  0E02               	movlw	2
 24503  002640  2620               	addwf	i2printf@ap,f,c
 24504  002642  0E00               	movlw	0
 24505  002644  2221               	addwfc	i2printf@ap+1,f,c
 24506                           
 24507                           ;doprnt.c: 1261: if((int)val < 0) {
 24508  002646  AE25               	btfss	i2printf@val+1,7,c
 24509  002648  D013               	goto	i2l7083
 24510                           
 24511                           ;doprnt.c: 1262: flag |= 0x03;
 24512  00264A  0E03               	movlw	3
 24513  00264C  1226               	iorwf	i2printf@flag,f,c
 24514                           
 24515                           ;doprnt.c: 1263: val = -val;
 24516  00264E  6C24               	negf	i2printf@val,c
 24517  002650  1E25               	comf	i2printf@val+1,f,c
 24518  002652  B0D8               	btfsc	status,0,c
 24519  002654  2A25               	incf	i2printf@val+1,f,c
 24520                           
 24521                           ;doprnt.c: 1264: }
 24522                           ;doprnt.c: 1266: }
 24523  002656  D00C               	goto	i2l7083
 24524  002658                     i2l7079:
 24525                           
 24526                           ;doprnt.c: 1268: else
 24527                           ;doprnt.c: 1273: {
 24528                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 24529  002658  C020  FFD9         	movff	i2printf@ap,fsr2l
 24530  00265C  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24531  002660  CFDE F024          	movff	postinc2,i2printf@val
 24532  002664  CFDD F025          	movff	postdec2,i2printf@val+1
 24533  002668  0E02               	movlw	2
 24534  00266A  2620               	addwf	i2printf@ap,f,c
 24535  00266C  0E00               	movlw	0
 24536  00266E  2221               	addwfc	i2printf@ap+1,f,c
 24537  002670                     i2l7083:
 24538                           
 24539                           ;doprnt.c: 1287: }
 24540                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 24541  002670  0E01               	movlw	1
 24542  002672  6E27               	movwf	i2printf@c,c
 24543  002674                     i2l7085:
 24544  002674  0E05               	movlw	5
 24545  002676  1827               	xorwf	i2printf@c,w,c
 24546  002678  B4D8               	btfsc	status,2,c
 24547  00267A  D015               	goto	i2l7097
 24548                           
 24549                           ;doprnt.c: 1306: if(val < dpowers[c])
 24550  00267C  5027               	movf	i2printf@c,w,c
 24551  00267E  0D02               	mullw	2
 24552  002680  0E98               	movlw	low _dpowers
 24553  002682  24F3               	addwf	prodl,w,c
 24554  002684  6EF6               	movwf	tblptrl,c
 24555  002686  0EFA               	movlw	high _dpowers
 24556  002688  20F4               	addwfc	prodh,w,c
 24557  00268A  6EF7               	movwf	tblptrh,c
 24558  00268C                     	if	1	;There are 3 active tblptr bytes
 24559  00268C  6AF8               	clrf	tblptru,c
 24560  00268E  0E00               	movlw	low (__mediumconst shr (0+16))
 24561  002690  22F8               	addwfc	tblptru,f,c
 24562  002692                     	endif
 24563  002692  0009               	tblrd		*+
 24564  002694  50F5               	movf	tablat,w,c
 24565  002696  5C24               	subwf	i2printf@val,w,c
 24566  002698  0009               	tblrd		*+
 24567  00269A  50F5               	movf	tablat,w,c
 24568  00269C  5825               	subwfb	i2printf@val+1,w,c
 24569  00269E  A0D8               	btfss	status,0,c
 24570  0026A0  D002               	goto	i2l7097
 24571                           
 24572                           ;doprnt.c: 1307: break;
 24573  0026A2  2A27               	incf	i2printf@c,f,c
 24574  0026A4  D7E7               	goto	i2l7085
 24575  0026A6                     i2l7097:
 24576                           
 24577                           ;doprnt.c: 1345: if(width && flag & 0x03)
 24578  0026A6  5028               	movf	i2printf@width,w,c
 24579  0026A8  1029               	iorwf	i2printf@width+1,w,c
 24580  0026AA  B4D8               	btfsc	status,2,c
 24581  0026AC  D009               	goto	i2l7103
 24582  0026AE  C026  F019         	movff	i2printf@flag,??i2_printf
 24583  0026B2  0E03               	movlw	3
 24584  0026B4  1619               	andwf	??i2_printf,f,c
 24585  0026B6  B4D8               	btfsc	status,2,c
 24586  0026B8  D003               	goto	i2l7103
 24587                           
 24588                           ;doprnt.c: 1346: width--;
 24589  0026BA  0628               	decf	i2printf@width,f,c
 24590  0026BC  A0D8               	btfss	status,0,c
 24591  0026BE  0629               	decf	i2printf@width+1,f,c
 24592  0026C0                     i2l7103:
 24593                           
 24594                           ;doprnt.c: 1381: if(width > c)
 24595  0026C0  0E80               	movlw	128
 24596  0026C2  BE27               	btfsc	i2printf@c,7,c
 24597  0026C4  0E7F               	movlw	127
 24598  0026C6  6E19               	movwf	??i2_printf& (0+255),c
 24599  0026C8  5028               	movf	i2printf@width,w,c
 24600  0026CA  5C27               	subwf	i2printf@c,w,c
 24601  0026CC  5029               	movf	i2printf@width+1,w,c
 24602  0026CE  0A80               	xorlw	128
 24603  0026D0  5819               	subwfb	??i2_printf& (0+255),w,c
 24604  0026D2  B0D8               	btfsc	status,0,c
 24605  0026D4  D007               	goto	i2l7107
 24606                           
 24607                           ;doprnt.c: 1382: width -= c;
 24608  0026D6  5027               	movf	i2printf@c,w,c
 24609  0026D8  5E28               	subwf	i2printf@width,f,c
 24610  0026DA  0E00               	movlw	0
 24611  0026DC  BE27               	btfsc	i2printf@c,7,c
 24612  0026DE  0EFF               	movlw	255
 24613  0026E0  5A29               	subwfb	i2printf@width+1,f,c
 24614  0026E2  D004               	goto	i2l7109
 24615  0026E4                     i2l7107:
 24616                           
 24617                           ;doprnt.c: 1383: else
 24618                           ;doprnt.c: 1384: width = 0;
 24619  0026E4  0E00               	movlw	0
 24620  0026E6  6E29               	movwf	i2printf@width+1,c
 24621  0026E8  0E00               	movlw	0
 24622  0026EA  6E28               	movwf	i2printf@width,c
 24623  0026EC                     i2l7109:
 24624                           
 24625                           ;doprnt.c: 1387: if(flag & 0x04) {
 24626  0026EC  A426               	btfss	i2printf@flag,2,c
 24627  0026EE  D014               	goto	i2l7121
 24628                           
 24629                           ;doprnt.c: 1392: if(flag & 0x03)
 24630  0026F0  C026  F019         	movff	i2printf@flag,??i2_printf
 24631  0026F4  0E03               	movlw	3
 24632  0026F6  1619               	andwf	??i2_printf,f,c
 24633  0026F8  B4D8               	btfsc	status,2,c
 24634  0026FA  D003               	goto	i2l7115
 24635                           
 24636                           ;doprnt.c: 1393: (putch('-') );
 24637  0026FC  0E2D               	movlw	45
 24638  0026FE  EC61  F02E         	call	i2_putch
 24639  002702                     i2l7115:
 24640                           
 24641                           ;doprnt.c: 1415: if(width)
 24642  002702  5028               	movf	i2printf@width,w,c
 24643  002704  1029               	iorwf	i2printf@width+1,w,c
 24644  002706  B4D8               	btfsc	status,2,c
 24645  002708  D01E               	goto	i2l7131
 24646                           
 24647                           ;doprnt.c: 1417: (putch('0') );
 24648                           
 24649                           ;doprnt.c: 1416: do
 24650  00270A  0E30               	movlw	48
 24651  00270C  EC61  F02E         	call	i2_putch
 24652                           
 24653                           ;doprnt.c: 1418: while(--width);
 24654  002710  0628               	decf	i2printf@width,f,c
 24655  002712  A0D8               	btfss	status,0,c
 24656  002714  0629               	decf	i2printf@width+1,f,c
 24657  002716  D7F5               	goto	i2l7115
 24658  002718                     i2l7121:
 24659                           
 24660                           ;doprnt.c: 1422: {
 24661                           ;doprnt.c: 1424: if(width
 24662                           ;doprnt.c: 1428: )
 24663  002718  5028               	movf	i2printf@width,w,c
 24664  00271A  1029               	iorwf	i2printf@width+1,w,c
 24665  00271C  B4D8               	btfsc	status,2,c
 24666  00271E  D00A               	goto	i2l7127
 24667  002720                     i2l7123:
 24668                           
 24669                           ;doprnt.c: 1430: (putch(' ') );
 24670  002720  0E20               	movlw	32
 24671  002722  EC61  F02E         	call	i2_putch
 24672                           
 24673                           ;doprnt.c: 1431: while(--width);
 24674  002726  0628               	decf	i2printf@width,f,c
 24675  002728  A0D8               	btfss	status,0,c
 24676  00272A  0629               	decf	i2printf@width+1,f,c
 24677  00272C  5028               	movf	i2printf@width,w,c
 24678  00272E  1029               	iorwf	i2printf@width+1,w,c
 24679  002730  A4D8               	btfss	status,2,c
 24680  002732  D7F6               	goto	i2l7123
 24681  002734                     i2l7127:
 24682                           
 24683                           ;doprnt.c: 1438: if(flag & 0x03)
 24684  002734  C026  F019         	movff	i2printf@flag,??i2_printf
 24685  002738  0E03               	movlw	3
 24686  00273A  1619               	andwf	??i2_printf,f,c
 24687  00273C  B4D8               	btfsc	status,2,c
 24688  00273E  D003               	goto	i2l7131
 24689                           
 24690                           ;doprnt.c: 1439: (putch('-') );
 24691  002740  0E2D               	movlw	45
 24692  002742  EC61  F02E         	call	i2_putch
 24693  002746                     i2l7131:
 24694                           
 24695                           ;doprnt.c: 1469: }
 24696                           ;doprnt.c: 1472: prec = c;
 24697  002746  C027  F01D         	movff	i2printf@c,i2printf@prec
 24698                           
 24699                           ;doprnt.c: 1474: while(prec--) {
 24700  00274A  D027               	goto	i2l7137
 24701  00274C                     i2l7133:
 24702                           
 24703                           ;doprnt.c: 1478: {
 24704                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 24705  00274C  501D               	movf	i2printf@prec,w,c
 24706  00274E  0D02               	mullw	2
 24707  002750  0E98               	movlw	low _dpowers
 24708  002752  24F3               	addwf	prodl,w,c
 24709  002754  6EF6               	movwf	tblptrl,c
 24710  002756  0EFA               	movlw	high _dpowers
 24711  002758  20F4               	addwfc	prodh,w,c
 24712  00275A  6EF7               	movwf	tblptrh,c
 24713  00275C                     	if	1	;There are 3 active tblptr bytes
 24714  00275C  6AF8               	clrf	tblptru,c
 24715  00275E  0E00               	movlw	low (__mediumconst shr (0+16))
 24716  002760  22F8               	addwfc	tblptru,f,c
 24717  002762                     	endif
 24718  002762  0009               	tblrd		*+
 24719  002764  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 24720  002768  000A               	tblrd		*-
 24721  00276A  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 24722  00276E  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 24723  002772  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 24724  002776  EC36  F02A         	call	i2___lwdiv	;wreg free
 24725  00277A  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 24726  00277E  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 24727  002782  0E00               	movlw	0
 24728  002784  6E04               	movwf	i2___lwmod@divisor+1,c
 24729  002786  0E0A               	movlw	10
 24730  002788  6E03               	movwf	i2___lwmod@divisor,c
 24731  00278A  EC3D  F02B         	call	i2___lwmod	;wreg free
 24732  00278E  5001               	movf	?i2___lwmod,w,c
 24733  002790  0F30               	addlw	48
 24734  002792  6E27               	movwf	i2printf@c,c
 24735                           
 24736                           ;doprnt.c: 1523: }
 24737                           ;doprnt.c: 1524: (putch(c) );
 24738  002794  5027               	movf	i2printf@c,w,c
 24739  002796  EC61  F02E         	call	i2_putch
 24740  00279A                     i2l7137:
 24741  00279A  061D               	decf	i2printf@prec,f,c
 24742  00279C  281D               	incf	i2printf@prec,w,c
 24743  00279E  A4D8               	btfss	status,2,c
 24744  0027A0  D7D5               	goto	i2l7133
 24745  0027A2                     i2l7139:
 24746  0027A2  C00D  FFF6         	movff	i2printf@f,tblptrl
 24747  0027A6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24748  0027AA  4A0D               	infsnz	i2printf@f,f,c
 24749  0027AC  2A0E               	incf	i2printf@f+1,f,c
 24750  0027AE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24751  0027AE  6AF8               	clrf	tblptru,c
 24752  0027B0                     	endif
 24753  0027B0                     	if	0	;tblptru may be non-zero
 24754  0027B0                     	endif
 24755  0027B0  0008               	tblrd		*
 24756  0027B2  CFF5 F027          	movff	tablat,i2printf@c
 24757  0027B6  5027               	movf	i2printf@c,w,c
 24758  0027B8  B4D8               	btfsc	status,2,c
 24759  0027BA  0012               	return	
 24760  0027BC  D64E               	goto	i2l7009
 24761  0027BE                     __end_ofi2_printf:
 24762                           	opt stack 0
 24763                           pclatu	equ	0xFFB
 24764                           pclath	equ	0xFFA
 24765                           tblptru	equ	0xFF8
 24766                           tblptrh	equ	0xFF7
 24767                           tblptrl	equ	0xFF6
 24768                           tablat	equ	0xFF5
 24769                           prodh	equ	0xFF4
 24770                           prodl	equ	0xFF3
 24771                           intcon	equ	0xFF2
 24772                           intcon2	equ	0xFF1
 24773                           intcon3	equ	0xFF0
 24774                           indf0	equ	0xFEF
 24775                           postinc0	equ	0xFEE
 24776                           fsr0h	equ	0xFEA
 24777                           fsr0l	equ	0xFE9
 24778                           wreg	equ	0xFE8
 24779                           postdec1	equ	0xFE5
 24780                           fsr1h	equ	0xFE2
 24781                           fsr1l	equ	0xFE1
 24782                           indf2	equ	0xFDF
 24783                           postinc2	equ	0xFDE
 24784                           postdec2	equ	0xFDD
 24785                           fsr2h	equ	0xFDA
 24786                           fsr2l	equ	0xFD9
 24787                           status	equ	0xFD8
 24788                           
 24789 ;; *************** function i2_putch *****************
 24790 ;; Defined at:
 24791 ;;		line 20 in file "lcd.c"
 24792 ;; Parameters:    Size  Location     Type
 24793 ;;  data            1    wreg     unsigned char 
 24794 ;; Auto vars:     Size  Location     Type
 24795 ;;  data            1    2[COMRAM] unsigned char 
 24796 ;; Return value:  Size  Location     Type
 24797 ;;                  1    wreg      void 
 24798 ;; Registers used:
 24799 ;;		wreg, status,2, status,0, cstack
 24800 ;; Tracked objects:
 24801 ;;		On entry : 0/0
 24802 ;;		On exit  : 0/0
 24803 ;;		Unchanged: 0/0
 24804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24806 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24808 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24809 ;;Total ram usage:        1 bytes
 24810 ;; Hardware stack levels used:    1
 24811 ;; Hardware stack levels required when called:    1
 24812 ;; This function calls:
 24813 ;;		i2_lcdNibble
 24814 ;; This function is called by:
 24815 ;;		i2_printf
 24816 ;; This function uses a non-reentrant model
 24817 ;;
 24818                           
 24819                           	psect	text88
 24820  005CC2                     __ptext88:
 24821                           	opt stack 0
 24822  005CC2                     i2_putch:
 24823                           	opt stack 20
 24824                           
 24825                           ;incstack = 0
 24826                           ;i2putch@data stored from wreg
 24827  005CC2  6E03               	movwf	i2putch@data,c
 24828                           
 24829                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 24830  005CC4  848C               	bsf	3980,2,c	;volatile
 24831                           
 24832                           ;lcd.c: 22: lcdNibble(data);
 24833  005CC6  5003               	movf	i2putch@data,w,c
 24834  005CC8  EC09  F02A         	call	i2_lcdNibble
 24835  005CCC  0012               	return		;funcret
 24836  005CCE                     __end_ofi2_putch:
 24837                           	opt stack 0
 24838                           pclatu	equ	0xFFB
 24839                           pclath	equ	0xFFA
 24840                           tblptru	equ	0xFF8
 24841                           tblptrh	equ	0xFF7
 24842                           tblptrl	equ	0xFF6
 24843                           tablat	equ	0xFF5
 24844                           prodh	equ	0xFF4
 24845                           prodl	equ	0xFF3
 24846                           intcon	equ	0xFF2
 24847                           intcon2	equ	0xFF1
 24848                           intcon3	equ	0xFF0
 24849                           indf0	equ	0xFEF
 24850                           postinc0	equ	0xFEE
 24851                           fsr0h	equ	0xFEA
 24852                           fsr0l	equ	0xFE9
 24853                           wreg	equ	0xFE8
 24854                           postdec1	equ	0xFE5
 24855                           fsr1h	equ	0xFE2
 24856                           fsr1l	equ	0xFE1
 24857                           indf2	equ	0xFDF
 24858                           postinc2	equ	0xFDE
 24859                           postdec2	equ	0xFDD
 24860                           fsr2h	equ	0xFDA
 24861                           fsr2l	equ	0xFD9
 24862                           status	equ	0xFD8
 24863                           
 24864 ;; *************** function i2_isdigit *****************
 24865 ;; Defined at:
 24866 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 24867 ;; Parameters:    Size  Location     Type
 24868 ;;  c               1    wreg     unsigned char 
 24869 ;; Auto vars:     Size  Location     Type
 24870 ;;  c               1    2[COMRAM] unsigned char 
 24871 ;; Return value:  Size  Location     Type
 24872 ;;		None               void
 24873 ;; Registers used:
 24874 ;;		wreg, status,2, status,0
 24875 ;; Tracked objects:
 24876 ;;		On entry : 0/0
 24877 ;;		On exit  : 0/0
 24878 ;;		Unchanged: 0/0
 24879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24881 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24882 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24883 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24884 ;;Total ram usage:        3 bytes
 24885 ;; Hardware stack levels used:    1
 24886 ;; This function calls:
 24887 ;;		Nothing
 24888 ;; This function is called by:
 24889 ;;		i2_printf
 24890 ;; This function uses a non-reentrant model
 24891 ;;
 24892                           
 24893                           	psect	text89
 24894  005BF8                     __ptext89:
 24895                           	opt stack 0
 24896  005BF8                     i2_isdigit:
 24897                           	opt stack 21
 24898                           
 24899                           ;incstack = 0
 24900                           ;i2isdigit@c stored from wreg
 24901  005BF8  6E03               	movwf	i2isdigit@c,c
 24902  005BFA  0E00               	movlw	0
 24903  005BFC  6E02               	movwf	i2_isdigit$2067,c
 24904  005BFE  0E3A               	movlw	58
 24905  005C00  6003               	cpfslt	i2isdigit@c,c
 24906  005C02  D005               	goto	i2l6673
 24907  005C04  0E2F               	movlw	47
 24908  005C06  6403               	cpfsgt	i2isdigit@c,c
 24909  005C08  D002               	goto	i2l6673
 24910  005C0A  0E01               	movlw	1
 24911  005C0C  6E02               	movwf	i2_isdigit$2067,c
 24912  005C0E                     i2l6673:
 24913  005C0E  C002  F001         	movff	i2_isdigit$2067,??i2_isdigit
 24914  005C12  3001               	rrcf	??i2_isdigit,w,c
 24915  005C14  0012               	return	
 24916  005C16                     __end_ofi2_isdigit:
 24917                           	opt stack 0
 24918                           pclatu	equ	0xFFB
 24919                           pclath	equ	0xFFA
 24920                           tblptru	equ	0xFF8
 24921                           tblptrh	equ	0xFF7
 24922                           tblptrl	equ	0xFF6
 24923                           tablat	equ	0xFF5
 24924                           prodh	equ	0xFF4
 24925                           prodl	equ	0xFF3
 24926                           intcon	equ	0xFF2
 24927                           intcon2	equ	0xFF1
 24928                           intcon3	equ	0xFF0
 24929                           indf0	equ	0xFEF
 24930                           postinc0	equ	0xFEE
 24931                           fsr0h	equ	0xFEA
 24932                           fsr0l	equ	0xFE9
 24933                           wreg	equ	0xFE8
 24934                           postdec1	equ	0xFE5
 24935                           fsr1h	equ	0xFE2
 24936                           fsr1l	equ	0xFE1
 24937                           indf2	equ	0xFDF
 24938                           postinc2	equ	0xFDE
 24939                           postdec2	equ	0xFDD
 24940                           fsr2h	equ	0xFDA
 24941                           fsr2l	equ	0xFD9
 24942                           status	equ	0xFD8
 24943                           
 24944 ;; *************** function i2___wmul *****************
 24945 ;; Defined at:
 24946 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 24947 ;; Parameters:    Size  Location     Type
 24948 ;;  multiplier      2    0[COMRAM] unsigned int 
 24949 ;;  multiplicand    2    2[COMRAM] unsigned int 
 24950 ;; Auto vars:     Size  Location     Type
 24951 ;;  __wmul          2    4[COMRAM] unsigned int 
 24952 ;; Return value:  Size  Location     Type
 24953 ;;                  2    0[COMRAM] unsigned int 
 24954 ;; Registers used:
 24955 ;;		wreg, status,2, status,0, prodl, prodh
 24956 ;; Tracked objects:
 24957 ;;		On entry : 0/0
 24958 ;;		On exit  : 0/0
 24959 ;;		Unchanged: 0/0
 24960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24961 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24962 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24964 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24965 ;;Total ram usage:        6 bytes
 24966 ;; Hardware stack levels used:    1
 24967 ;; This function calls:
 24968 ;;		Nothing
 24969 ;; This function is called by:
 24970 ;;		_printSortTimer
 24971 ;;		_retrieveLog
 24972 ;;		i2_printf
 24973 ;; This function uses a non-reentrant model
 24974 ;;
 24975                           
 24976                           	psect	text90
 24977  005B44                     __ptext90:
 24978                           	opt stack 0
 24979  005B44                     i2___wmul:
 24980                           	opt stack 21
 24981                           
 24982                           ;incstack = 0
 24983  005B44  5001               	movf	i2___wmul@multiplier,w,c
 24984  005B46  0203               	mulwf	i2___wmul@multiplicand,c
 24985  005B48  CFF3 F005          	movff	prodl,i2___wmul@product
 24986  005B4C  CFF4 F006          	movff	prodh,i2___wmul@product+1
 24987  005B50  5001               	movf	i2___wmul@multiplier,w,c
 24988  005B52  0204               	mulwf	i2___wmul@multiplicand+1,c
 24989  005B54  50F3               	movf	prodl,w,c
 24990  005B56  2606               	addwf	i2___wmul@product+1,f,c
 24991  005B58  5002               	movf	i2___wmul@multiplier+1,w,c
 24992  005B5A  0203               	mulwf	i2___wmul@multiplicand,c
 24993  005B5C  50F3               	movf	prodl,w,c
 24994  005B5E  2606               	addwf	i2___wmul@product+1,f,c
 24995  005B60  C005  F001         	movff	i2___wmul@product,?i2___wmul
 24996  005B64  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 24997  005B68  0012               	return	
 24998  005B6A                     __end_ofi2___wmul:
 24999                           	opt stack 0
 25000                           pclatu	equ	0xFFB
 25001                           pclath	equ	0xFFA
 25002                           tblptru	equ	0xFF8
 25003                           tblptrh	equ	0xFF7
 25004                           tblptrl	equ	0xFF6
 25005                           tablat	equ	0xFF5
 25006                           prodh	equ	0xFF4
 25007                           prodl	equ	0xFF3
 25008                           intcon	equ	0xFF2
 25009                           intcon2	equ	0xFF1
 25010                           intcon3	equ	0xFF0
 25011                           indf0	equ	0xFEF
 25012                           postinc0	equ	0xFEE
 25013                           fsr0h	equ	0xFEA
 25014                           fsr0l	equ	0xFE9
 25015                           wreg	equ	0xFE8
 25016                           postdec1	equ	0xFE5
 25017                           fsr1h	equ	0xFE2
 25018                           fsr1l	equ	0xFE1
 25019                           indf2	equ	0xFDF
 25020                           postinc2	equ	0xFDE
 25021                           postdec2	equ	0xFDD
 25022                           fsr2h	equ	0xFDA
 25023                           fsr2l	equ	0xFD9
 25024                           status	equ	0xFD8
 25025                           
 25026 ;; *************** function i2___lwmod *****************
 25027 ;; Defined at:
 25028 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 25029 ;; Parameters:    Size  Location     Type
 25030 ;;  dividend        2    0[COMRAM] unsigned int 
 25031 ;;  divisor         2    2[COMRAM] unsigned int 
 25032 ;; Auto vars:     Size  Location     Type
 25033 ;;  __lwmod         1    4[COMRAM] unsigned char 
 25034 ;; Return value:  Size  Location     Type
 25035 ;;                  2    0[COMRAM] unsigned int 
 25036 ;; Registers used:
 25037 ;;		wreg, status,2, status,0
 25038 ;; Tracked objects:
 25039 ;;		On entry : 0/0
 25040 ;;		On exit  : 0/0
 25041 ;;		Unchanged: 0/0
 25042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25043 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25044 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25046 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25047 ;;Total ram usage:        5 bytes
 25048 ;; Hardware stack levels used:    1
 25049 ;; This function calls:
 25050 ;;		Nothing
 25051 ;; This function is called by:
 25052 ;;		_printSortTimer
 25053 ;;		i2_printf
 25054 ;; This function uses a non-reentrant model
 25055 ;;
 25056                           
 25057                           	psect	text91
 25058  00567A                     __ptext91:
 25059                           	opt stack 0
 25060  00567A                     i2___lwmod:
 25061                           	opt stack 21
 25062                           
 25063                           ;incstack = 0
 25064  00567A  5003               	movf	i2___lwmod@divisor,w,c
 25065  00567C  1004               	iorwf	i2___lwmod@divisor+1,w,c
 25066  00567E  B4D8               	btfsc	status,2,c
 25067  005680  D018               	goto	i2l1974
 25068  005682  0E01               	movlw	1
 25069  005684  6E05               	movwf	i2___lwmod@counter,c
 25070  005686  D004               	goto	i2l6705
 25071  005688                     i2l6703:
 25072  005688  90D8               	bcf	status,0,c
 25073  00568A  3603               	rlcf	i2___lwmod@divisor,f,c
 25074  00568C  3604               	rlcf	i2___lwmod@divisor+1,f,c
 25075  00568E  2A05               	incf	i2___lwmod@counter,f,c
 25076  005690                     i2l6705:
 25077  005690  AE04               	btfss	i2___lwmod@divisor+1,7,c
 25078  005692  D7FA               	goto	i2l6703
 25079  005694                     i2l6707:
 25080  005694  5003               	movf	i2___lwmod@divisor,w,c
 25081  005696  5C01               	subwf	i2___lwmod@dividend,w,c
 25082  005698  5004               	movf	i2___lwmod@divisor+1,w,c
 25083  00569A  5802               	subwfb	i2___lwmod@dividend+1,w,c
 25084  00569C  A0D8               	btfss	status,0,c
 25085  00569E  D004               	goto	i2l6711
 25086  0056A0  5003               	movf	i2___lwmod@divisor,w,c
 25087  0056A2  5E01               	subwf	i2___lwmod@dividend,f,c
 25088  0056A4  5004               	movf	i2___lwmod@divisor+1,w,c
 25089  0056A6  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 25090  0056A8                     i2l6711:
 25091  0056A8  90D8               	bcf	status,0,c
 25092  0056AA  3204               	rrcf	i2___lwmod@divisor+1,f,c
 25093  0056AC  3203               	rrcf	i2___lwmod@divisor,f,c
 25094  0056AE  2E05               	decfsz	i2___lwmod@counter,f,c
 25095  0056B0  D7F1               	goto	i2l6707
 25096  0056B2                     i2l1974:
 25097  0056B2  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 25098  0056B6  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 25099  0056BA  0012               	return		;funcret
 25100  0056BC                     __end_ofi2___lwmod:
 25101                           	opt stack 0
 25102                           pclatu	equ	0xFFB
 25103                           pclath	equ	0xFFA
 25104                           tblptru	equ	0xFF8
 25105                           tblptrh	equ	0xFF7
 25106                           tblptrl	equ	0xFF6
 25107                           tablat	equ	0xFF5
 25108                           prodh	equ	0xFF4
 25109                           prodl	equ	0xFF3
 25110                           intcon	equ	0xFF2
 25111                           intcon2	equ	0xFF1
 25112                           intcon3	equ	0xFF0
 25113                           indf0	equ	0xFEF
 25114                           postinc0	equ	0xFEE
 25115                           fsr0h	equ	0xFEA
 25116                           fsr0l	equ	0xFE9
 25117                           wreg	equ	0xFE8
 25118                           postdec1	equ	0xFE5
 25119                           fsr1h	equ	0xFE2
 25120                           fsr1l	equ	0xFE1
 25121                           indf2	equ	0xFDF
 25122                           postinc2	equ	0xFDE
 25123                           postdec2	equ	0xFDD
 25124                           fsr2h	equ	0xFDA
 25125                           fsr2l	equ	0xFD9
 25126                           status	equ	0xFD8
 25127                           
 25128 ;; *************** function i2___lwdiv *****************
 25129 ;; Defined at:
 25130 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 25131 ;; Parameters:    Size  Location     Type
 25132 ;;  dividend        2    5[COMRAM] unsigned int 
 25133 ;;  divisor         2    7[COMRAM] unsigned int 
 25134 ;; Auto vars:     Size  Location     Type
 25135 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 25136 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 25137 ;; Return value:  Size  Location     Type
 25138 ;;                  2    5[COMRAM] unsigned int 
 25139 ;; Registers used:
 25140 ;;		wreg, status,2, status,0
 25141 ;; Tracked objects:
 25142 ;;		On entry : 0/0
 25143 ;;		On exit  : 0/0
 25144 ;;		Unchanged: 0/0
 25145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25146 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25147 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25149 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25150 ;;Total ram usage:        7 bytes
 25151 ;; Hardware stack levels used:    1
 25152 ;; This function calls:
 25153 ;;		Nothing
 25154 ;; This function is called by:
 25155 ;;		_printSortTimer
 25156 ;;		i2_printf
 25157 ;; This function uses a non-reentrant model
 25158 ;;
 25159                           
 25160                           	psect	text92
 25161  00546C                     __ptext92:
 25162                           	opt stack 0
 25163  00546C                     i2___lwdiv:
 25164                           	opt stack 21
 25165                           
 25166                           ;incstack = 0
 25167  00546C  0E00               	movlw	0
 25168  00546E  6E0B               	movwf	i2___lwdiv@quotient+1,c
 25169  005470  0E00               	movlw	0
 25170  005472  6E0A               	movwf	i2___lwdiv@quotient,c
 25171  005474  5008               	movf	i2___lwdiv@divisor,w,c
 25172  005476  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 25173  005478  B4D8               	btfsc	status,2,c
 25174  00547A  D01C               	goto	i2l1964
 25175  00547C  0E01               	movlw	1
 25176  00547E  6E0C               	movwf	i2___lwdiv@counter,c
 25177  005480  D004               	goto	i2l6685
 25178  005482                     i2l6683:
 25179  005482  90D8               	bcf	status,0,c
 25180  005484  3608               	rlcf	i2___lwdiv@divisor,f,c
 25181  005486  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 25182  005488  2A0C               	incf	i2___lwdiv@counter,f,c
 25183  00548A                     i2l6685:
 25184  00548A  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 25185  00548C  D7FA               	goto	i2l6683
 25186  00548E                     i2l6687:
 25187  00548E  90D8               	bcf	status,0,c
 25188  005490  360A               	rlcf	i2___lwdiv@quotient,f,c
 25189  005492  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 25190  005494  5008               	movf	i2___lwdiv@divisor,w,c
 25191  005496  5C06               	subwf	i2___lwdiv@dividend,w,c
 25192  005498  5009               	movf	i2___lwdiv@divisor+1,w,c
 25193  00549A  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 25194  00549C  A0D8               	btfss	status,0,c
 25195  00549E  D005               	goto	i2l6695
 25196  0054A0  5008               	movf	i2___lwdiv@divisor,w,c
 25197  0054A2  5E06               	subwf	i2___lwdiv@dividend,f,c
 25198  0054A4  5009               	movf	i2___lwdiv@divisor+1,w,c
 25199  0054A6  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 25200  0054A8  800A               	bsf	i2___lwdiv@quotient,0,c
 25201  0054AA                     i2l6695:
 25202  0054AA  90D8               	bcf	status,0,c
 25203  0054AC  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 25204  0054AE  3208               	rrcf	i2___lwdiv@divisor,f,c
 25205  0054B0  2E0C               	decfsz	i2___lwdiv@counter,f,c
 25206  0054B2  D7ED               	goto	i2l6687
 25207  0054B4                     i2l1964:
 25208  0054B4  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 25209  0054B8  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 25210  0054BC  0012               	return		;funcret
 25211  0054BE                     __end_ofi2___lwdiv:
 25212                           	opt stack 0
 25213                           pclatu	equ	0xFFB
 25214                           pclath	equ	0xFFA
 25215                           tblptru	equ	0xFF8
 25216                           tblptrh	equ	0xFF7
 25217                           tblptrl	equ	0xFF6
 25218                           tablat	equ	0xFF5
 25219                           prodh	equ	0xFF4
 25220                           prodl	equ	0xFF3
 25221                           intcon	equ	0xFF2
 25222                           intcon2	equ	0xFF1
 25223                           intcon3	equ	0xFF0
 25224                           indf0	equ	0xFEF
 25225                           postinc0	equ	0xFEE
 25226                           fsr0h	equ	0xFEA
 25227                           fsr0l	equ	0xFE9
 25228                           wreg	equ	0xFE8
 25229                           postdec1	equ	0xFE5
 25230                           fsr1h	equ	0xFE2
 25231                           fsr1l	equ	0xFE1
 25232                           indf2	equ	0xFDF
 25233                           postinc2	equ	0xFDE
 25234                           postdec2	equ	0xFDD
 25235                           fsr2h	equ	0xFDA
 25236                           fsr2l	equ	0xFD9
 25237                           status	equ	0xFD8
 25238                           
 25239 ;; *************** function i2_lcdInst *****************
 25240 ;; Defined at:
 25241 ;;		line 15 in file "lcd.c"
 25242 ;; Parameters:    Size  Location     Type
 25243 ;;  data            1    wreg     unsigned char 
 25244 ;; Auto vars:     Size  Location     Type
 25245 ;;  data            1    2[COMRAM] unsigned char 
 25246 ;; Return value:  Size  Location     Type
 25247 ;;                  1    wreg      void 
 25248 ;; Registers used:
 25249 ;;		wreg, status,2, status,0, cstack
 25250 ;; Tracked objects:
 25251 ;;		On entry : 0/0
 25252 ;;		On exit  : 0/0
 25253 ;;		Unchanged: 0/0
 25254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25256 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25258 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25259 ;;Total ram usage:        1 bytes
 25260 ;; Hardware stack levels used:    1
 25261 ;; Hardware stack levels required when called:    1
 25262 ;; This function calls:
 25263 ;;		i2_lcdNibble
 25264 ;; This function is called by:
 25265 ;;		_change_state_to_menu_11
 25266 ;;		_change_state_to_menu_23
 25267 ;;		_change_state_to_logs_11
 25268 ;;		_change_state_to_logs_12
 25269 ;;		_change_state_to_logs_22
 25270 ;;		_change_state_to_logs_23
 25271 ;;		_change_state_to_logs_33
 25272 ;;		_change_state_to_logs_34
 25273 ;;		_printSortTimer
 25274 ;;		i2_change_state_to_menu_start
 25275 ;;		i2_change_state_to_menu_12
 25276 ;;		i2_change_state_to_menu_22
 25277 ;;		i2_printRTC
 25278 ;; This function uses a non-reentrant model
 25279 ;;
 25280                           
 25281                           	psect	text93
 25282  005CCE                     __ptext93:
 25283                           	opt stack 0
 25284  005CCE                     i2_lcdInst:
 25285                           	opt stack 20
 25286                           
 25287                           ;incstack = 0
 25288                           ;i2lcdInst@data stored from wreg
 25289  005CCE  6E03               	movwf	i2lcdInst@data,c
 25290                           
 25291                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 25292  005CD0  948C               	bcf	3980,2,c	;volatile
 25293                           
 25294                           ;lcd.c: 17: lcdNibble(data);
 25295  005CD2  5003               	movf	i2lcdInst@data,w,c
 25296  005CD4  EC09  F02A         	call	i2_lcdNibble
 25297  005CD8  0012               	return		;funcret
 25298  005CDA                     __end_ofi2_lcdInst:
 25299                           	opt stack 0
 25300                           pclatu	equ	0xFFB
 25301                           pclath	equ	0xFFA
 25302                           tblptru	equ	0xFF8
 25303                           tblptrh	equ	0xFF7
 25304                           tblptrl	equ	0xFF6
 25305                           tablat	equ	0xFF5
 25306                           prodh	equ	0xFF4
 25307                           prodl	equ	0xFF3
 25308                           intcon	equ	0xFF2
 25309                           intcon2	equ	0xFF1
 25310                           intcon3	equ	0xFF0
 25311                           indf0	equ	0xFEF
 25312                           postinc0	equ	0xFEE
 25313                           fsr0h	equ	0xFEA
 25314                           fsr0l	equ	0xFE9
 25315                           wreg	equ	0xFE8
 25316                           postdec1	equ	0xFE5
 25317                           fsr1h	equ	0xFE2
 25318                           fsr1l	equ	0xFE1
 25319                           indf2	equ	0xFDF
 25320                           postinc2	equ	0xFDE
 25321                           postdec2	equ	0xFDD
 25322                           fsr2h	equ	0xFDA
 25323                           fsr2l	equ	0xFD9
 25324                           status	equ	0xFD8
 25325                           
 25326 ;; *************** function i2_lcdNibble *****************
 25327 ;; Defined at:
 25328 ;;		line 25 in file "lcd.c"
 25329 ;; Parameters:    Size  Location     Type
 25330 ;;  data            1    wreg     unsigned char 
 25331 ;; Auto vars:     Size  Location     Type
 25332 ;;  data            1    1[COMRAM] unsigned char 
 25333 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 25334 ;; Return value:  Size  Location     Type
 25335 ;;                  1    wreg      void 
 25336 ;; Registers used:
 25337 ;;		wreg, status,2, status,0
 25338 ;; Tracked objects:
 25339 ;;		On entry : 0/0
 25340 ;;		On exit  : 0/0
 25341 ;;		Unchanged: 0/0
 25342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25344 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25346 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25347 ;;Total ram usage:        2 bytes
 25348 ;; Hardware stack levels used:    1
 25349 ;; This function calls:
 25350 ;;		Nothing
 25351 ;; This function is called by:
 25352 ;;		i2_lcdInst
 25353 ;;		i2_putch
 25354 ;; This function uses a non-reentrant model
 25355 ;;
 25356                           
 25357                           	psect	text94
 25358  005412                     __ptext94:
 25359                           	opt stack 0
 25360  005412                     i2_lcdNibble:
 25361                           	opt stack 20
 25362                           
 25363                           ;incstack = 0
 25364                           ;i2lcdNibble@data stored from wreg
 25365  005412  6E02               	movwf	i2lcdNibble@data,c
 25366                           
 25367                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 25368  005414  9EF2               	bcf	intcon,7,c	;volatile
 25369                           
 25370                           ;lcd.c: 28: char temp = data & 0xF0;
 25371  005416  5002               	movf	i2lcdNibble@data,w,c
 25372  005418  0BF0               	andlw	240
 25373  00541A  6E01               	movwf	i2lcdNibble@temp,c
 25374                           
 25375                           ;lcd.c: 29: LATD = LATD & 0x0F;
 25376  00541C  508C               	movf	3980,w,c	;volatile
 25377  00541E  0B0F               	andlw	15
 25378  005420  6E8C               	movwf	3980,c	;volatile
 25379                           
 25380                           ;lcd.c: 30: LATD = temp | LATD;
 25381  005422  5001               	movf	i2lcdNibble@temp,w,c
 25382  005424  108C               	iorwf	3980,w,c	;volatile
 25383  005426  6E8C               	movwf	3980,c	;volatile
 25384                           
 25385                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 25386  005428  868C               	bsf	3980,3,c	;volatile
 25387                           
 25388                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25389  00542A  0E42               	movlw	66
 25390  00542C                     i2u1139_47:
 25391  00542C  2EE8               	decfsz	wreg,f,c
 25392  00542E  D7FE               	bra	i2u1139_47
 25393  005430  D000               	nop2	
 25394                           
 25395                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 25396  005432  968C               	bcf	3980,3,c	;volatile
 25397                           
 25398                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25399  005434  0E42               	movlw	66
 25400  005436                     i2u1140_47:
 25401  005436  2EE8               	decfsz	wreg,f,c
 25402  005438  D7FE               	bra	i2u1140_47
 25403  00543A  D000               	nop2	
 25404                           
 25405                           ;lcd.c: 37: data = data << 4;
 25406  00543C  3802               	swapf	i2lcdNibble@data,w,c
 25407  00543E  0BF0               	andlw	240
 25408  005440  6E02               	movwf	i2lcdNibble@data,c
 25409                           
 25410                           ;lcd.c: 39: temp = data & 0xF0;
 25411  005442  5002               	movf	i2lcdNibble@data,w,c
 25412  005444  0BF0               	andlw	240
 25413  005446  6E01               	movwf	i2lcdNibble@temp,c
 25414                           
 25415                           ;lcd.c: 40: LATD = LATD & 0x0F;
 25416  005448  508C               	movf	3980,w,c	;volatile
 25417  00544A  0B0F               	andlw	15
 25418  00544C  6E8C               	movwf	3980,c	;volatile
 25419                           
 25420                           ;lcd.c: 41: LATD = temp | LATD;
 25421  00544E  5001               	movf	i2lcdNibble@temp,w,c
 25422  005450  108C               	iorwf	3980,w,c	;volatile
 25423  005452  6E8C               	movwf	3980,c	;volatile
 25424                           
 25425                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 25426  005454  868C               	bsf	3980,3,c	;volatile
 25427                           
 25428                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25429  005456  0E42               	movlw	66
 25430  005458                     i2u1141_47:
 25431  005458  2EE8               	decfsz	wreg,f,c
 25432  00545A  D7FE               	bra	i2u1141_47
 25433  00545C  D000               	nop2	
 25434                           
 25435                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 25436  00545E  968C               	bcf	3980,3,c	;volatile
 25437                           
 25438                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25439  005460  0E42               	movlw	66
 25440  005462                     i2u1142_47:
 25441  005462  2EE8               	decfsz	wreg,f,c
 25442  005464  D7FE               	bra	i2u1142_47
 25443  005466  D000               	nop2	
 25444                           
 25445                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 25446  005468  8EF2               	bsf	intcon,7,c	;volatile
 25447  00546A  0012               	return		;funcret
 25448  00546C                     __end_ofi2_lcdNibble:
 25449                           	opt stack 0
 25450                           pclatu	equ	0xFFB
 25451                           pclath	equ	0xFFA
 25452                           tblptru	equ	0xFF8
 25453                           tblptrh	equ	0xFF7
 25454                           tblptrl	equ	0xFF6
 25455                           tablat	equ	0xFF5
 25456                           prodh	equ	0xFF4
 25457                           prodl	equ	0xFF3
 25458                           intcon	equ	0xFF2
 25459                           intcon2	equ	0xFF1
 25460                           intcon3	equ	0xFF0
 25461                           indf0	equ	0xFEF
 25462                           postinc0	equ	0xFEE
 25463                           fsr0h	equ	0xFEA
 25464                           fsr0l	equ	0xFE9
 25465                           wreg	equ	0xFE8
 25466                           postdec1	equ	0xFE5
 25467                           fsr1h	equ	0xFE2
 25468                           fsr1l	equ	0xFE1
 25469                           indf2	equ	0xFDF
 25470                           postinc2	equ	0xFDE
 25471                           postdec2	equ	0xFDD
 25472                           fsr2h	equ	0xFDA
 25473                           fsr2l	equ	0xFD9
 25474                           status	equ	0xFD8
 25475                           
 25476 ;; *************** function i2_getRTC *****************
 25477 ;; Defined at:
 25478 ;;		line 44 in file "RTC.c"
 25479 ;; Parameters:    Size  Location     Type
 25480 ;;		None
 25481 ;; Auto vars:     Size  Location     Type
 25482 ;;  getRTC          2    3[COMRAM] int 
 25483 ;; Return value:  Size  Location     Type
 25484 ;;                  1    wreg      void 
 25485 ;; Registers used:
 25486 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25487 ;; Tracked objects:
 25488 ;;		On entry : 0/0
 25489 ;;		On exit  : 0/0
 25490 ;;		Unchanged: 0/0
 25491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25493 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25495 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25496 ;;Total ram usage:        2 bytes
 25497 ;; Hardware stack levels used:    1
 25498 ;; Hardware stack levels required when called:    2
 25499 ;; This function calls:
 25500 ;;		i2_I2C_Master_Read
 25501 ;;		i2_I2C_Master_Start
 25502 ;;		i2_I2C_Master_Stop
 25503 ;;		i2_I2C_Master_Write
 25504 ;; This function is called by:
 25505 ;;		_printSortTimer
 25506 ;;		i2_printRTC
 25507 ;; This function uses a non-reentrant model
 25508 ;;
 25509                           
 25510                           	psect	text95
 25511  0050EE                     __ptext95:
 25512                           	opt stack 0
 25513  0050EE                     i2_getRTC:
 25514                           	opt stack 19
 25515                           
 25516                           ;RTC.c: 48: I2C_Master_Start();
 25517                           
 25518                           ;incstack = 0
 25519  0050EE  EC8B  F02E         	call	i2_I2C_Master_Start	;wreg free
 25520                           
 25521                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 25522  0050F2  0E00               	movlw	0
 25523  0050F4  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25524  0050F6  0ED0               	movlw	208
 25525  0050F8  6E02               	movwf	i2I2C_Master_Write@d,c
 25526  0050FA  EC72  F02E         	call	i2_I2C_Master_Write	;wreg free
 25527                           
 25528                           ;RTC.c: 50: I2C_Master_Write(0x00);
 25529  0050FE  0E00               	movlw	0
 25530  005100  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25531  005102  0E00               	movlw	0
 25532  005104  6E02               	movwf	i2I2C_Master_Write@d,c
 25533  005106  EC72  F02E         	call	i2_I2C_Master_Write	;wreg free
 25534                           
 25535                           ;RTC.c: 51: I2C_Master_Stop();
 25536  00510A  EC87  F02E         	call	i2_I2C_Master_Stop	;wreg free
 25537                           
 25538                           ;RTC.c: 54: I2C_Master_Start();
 25539  00510E  EC8B  F02E         	call	i2_I2C_Master_Start	;wreg free
 25540                           
 25541                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 25542  005112  0E00               	movlw	0
 25543  005114  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25544  005116  0ED1               	movlw	209
 25545  005118  6E02               	movwf	i2I2C_Master_Write@d,c
 25546  00511A  EC72  F02E         	call	i2_I2C_Master_Write	;wreg free
 25547                           
 25548                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 25549  00511E  0E00               	movlw	0
 25550  005120  6E05               	movwf	i2getRTC@i+1,c
 25551  005122  0E00               	movlw	0
 25552  005124  6E04               	movwf	i2getRTC@i,c
 25553  005126                     i2l6981:
 25554  005126  BE05               	btfsc	i2getRTC@i+1,7,c
 25555  005128  D006               	goto	i2l6985
 25556  00512A  5005               	movf	i2getRTC@i+1,w,c
 25557  00512C  E111               	bnz	i2l6991
 25558  00512E  0E06               	movlw	6
 25559  005130  5C04               	subwf	i2getRTC@i,w,c
 25560  005132  B0D8               	btfsc	status,0,c
 25561  005134  D00D               	goto	i2l6991
 25562  005136                     i2l6985:
 25563                           
 25564                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 25565  005136  0E1C               	movlw	low _time
 25566  005138  2404               	addwf	i2getRTC@i,w,c
 25567  00513A  6ED9               	movwf	fsr2l,c
 25568  00513C  0E01               	movlw	high _time
 25569  00513E  2005               	addwfc	i2getRTC@i+1,w,c
 25570  005140  6EDA               	movwf	fsr2h,c
 25571  005142  0E01               	movlw	1
 25572  005144  ECB5  F02D         	call	i2_I2C_Master_Read
 25573  005148  6EDF               	movwf	indf2,c
 25574  00514A  4A04               	infsnz	i2getRTC@i,f,c
 25575  00514C  2A05               	incf	i2getRTC@i+1,f,c
 25576  00514E  D7EB               	goto	i2l6981
 25577  005150                     i2l6991:
 25578                           
 25579                           ;RTC.c: 58: }
 25580                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 25581  005150  0E00               	movlw	0
 25582  005152  ECB5  F02D         	call	i2_I2C_Master_Read
 25583  005156  0101               	movlb	1	; () banked
 25584  005158  6F22               	movwf	(_time+6)& (0+255),b
 25585                           
 25586                           ;RTC.c: 60: I2C_Master_Stop();
 25587  00515A  EC87  F02E         	call	i2_I2C_Master_Stop	;wreg free
 25588  00515E  0012               	return		;funcret
 25589  005160                     __end_ofi2_getRTC:
 25590                           	opt stack 0
 25591                           pclatu	equ	0xFFB
 25592                           pclath	equ	0xFFA
 25593                           tblptru	equ	0xFF8
 25594                           tblptrh	equ	0xFF7
 25595                           tblptrl	equ	0xFF6
 25596                           tablat	equ	0xFF5
 25597                           prodh	equ	0xFF4
 25598                           prodl	equ	0xFF3
 25599                           intcon	equ	0xFF2
 25600                           intcon2	equ	0xFF1
 25601                           intcon3	equ	0xFF0
 25602                           indf0	equ	0xFEF
 25603                           postinc0	equ	0xFEE
 25604                           fsr0h	equ	0xFEA
 25605                           fsr0l	equ	0xFE9
 25606                           wreg	equ	0xFE8
 25607                           postdec1	equ	0xFE5
 25608                           fsr1h	equ	0xFE2
 25609                           fsr1l	equ	0xFE1
 25610                           indf2	equ	0xFDF
 25611                           postinc2	equ	0xFDE
 25612                           postdec2	equ	0xFDD
 25613                           fsr2h	equ	0xFDA
 25614                           fsr2l	equ	0xFD9
 25615                           status	equ	0xFD8
 25616                           
 25617 ;; *************** function i2_I2C_Master_Write *****************
 25618 ;; Defined at:
 25619 ;;		line 49 in file "I2C.c"
 25620 ;; Parameters:    Size  Location     Type
 25621 ;;  d               2    1[COMRAM] unsigned int 
 25622 ;; Auto vars:     Size  Location     Type
 25623 ;;		None
 25624 ;; Return value:  Size  Location     Type
 25625 ;;                  1    wreg      void 
 25626 ;; Registers used:
 25627 ;;		wreg, status,2, status,0, cstack
 25628 ;; Tracked objects:
 25629 ;;		On entry : 0/0
 25630 ;;		On exit  : 0/0
 25631 ;;		Unchanged: 0/0
 25632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25633 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25636 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25637 ;;Total ram usage:        2 bytes
 25638 ;; Hardware stack levels used:    1
 25639 ;; Hardware stack levels required when called:    1
 25640 ;; This function calls:
 25641 ;;		i2_I2C_Master_Wait
 25642 ;; This function is called by:
 25643 ;;		i2_getRTC
 25644 ;; This function uses a non-reentrant model
 25645 ;;
 25646                           
 25647                           	psect	text96
 25648  005CE4                     __ptext96:
 25649                           	opt stack 0
 25650  005CE4                     i2_I2C_Master_Write:
 25651                           	opt stack 19
 25652                           
 25653                           ;I2C.c: 51: I2C_Master_Wait();
 25654                           
 25655                           ;incstack = 0
 25656  005CE4  EC48  F02E         	call	i2_I2C_Master_Wait	;wreg free
 25657                           
 25658                           ;I2C.c: 52: SSPBUF = d;
 25659  005CE8  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 25660  005CEC  0012               	return		;funcret
 25661  005CEE                     __end_ofi2_I2C_Master_Write:
 25662                           	opt stack 0
 25663                           pclatu	equ	0xFFB
 25664                           pclath	equ	0xFFA
 25665                           tblptru	equ	0xFF8
 25666                           tblptrh	equ	0xFF7
 25667                           tblptrl	equ	0xFF6
 25668                           tablat	equ	0xFF5
 25669                           prodh	equ	0xFF4
 25670                           prodl	equ	0xFF3
 25671                           intcon	equ	0xFF2
 25672                           intcon2	equ	0xFF1
 25673                           intcon3	equ	0xFF0
 25674                           indf0	equ	0xFEF
 25675                           postinc0	equ	0xFEE
 25676                           fsr0h	equ	0xFEA
 25677                           fsr0l	equ	0xFE9
 25678                           wreg	equ	0xFE8
 25679                           postdec1	equ	0xFE5
 25680                           fsr1h	equ	0xFE2
 25681                           fsr1l	equ	0xFE1
 25682                           indf2	equ	0xFDF
 25683                           postinc2	equ	0xFDE
 25684                           postdec2	equ	0xFDD
 25685                           fsr2h	equ	0xFDA
 25686                           fsr2l	equ	0xFD9
 25687                           status	equ	0xFD8
 25688                           
 25689 ;; *************** function i2_I2C_Master_Stop *****************
 25690 ;; Defined at:
 25691 ;;		line 43 in file "I2C.c"
 25692 ;; Parameters:    Size  Location     Type
 25693 ;;		None
 25694 ;; Auto vars:     Size  Location     Type
 25695 ;;		None
 25696 ;; Return value:  Size  Location     Type
 25697 ;;                  1    wreg      void 
 25698 ;; Registers used:
 25699 ;;		wreg, status,2, status,0, cstack
 25700 ;; Tracked objects:
 25701 ;;		On entry : 0/0
 25702 ;;		On exit  : 0/0
 25703 ;;		Unchanged: 0/0
 25704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25708 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25709 ;;Total ram usage:        0 bytes
 25710 ;; Hardware stack levels used:    1
 25711 ;; Hardware stack levels required when called:    1
 25712 ;; This function calls:
 25713 ;;		i2_I2C_Master_Wait
 25714 ;; This function is called by:
 25715 ;;		i2_getRTC
 25716 ;; This function uses a non-reentrant model
 25717 ;;
 25718                           
 25719                           	psect	text97
 25720  005D0E                     __ptext97:
 25721                           	opt stack 0
 25722  005D0E                     i2_I2C_Master_Stop:
 25723                           	opt stack 19
 25724                           
 25725                           ;I2C.c: 45: I2C_Master_Wait();
 25726                           
 25727                           ;incstack = 0
 25728  005D0E  EC48  F02E         	call	i2_I2C_Master_Wait	;wreg free
 25729                           
 25730                           ;I2C.c: 46: PEN = 1;
 25731  005D12  84C5               	bsf	4037,2,c	;volatile
 25732  005D14  0012               	return		;funcret
 25733  005D16                     __end_ofi2_I2C_Master_Stop:
 25734                           	opt stack 0
 25735                           pclatu	equ	0xFFB
 25736                           pclath	equ	0xFFA
 25737                           tblptru	equ	0xFF8
 25738                           tblptrh	equ	0xFF7
 25739                           tblptrl	equ	0xFF6
 25740                           tablat	equ	0xFF5
 25741                           prodh	equ	0xFF4
 25742                           prodl	equ	0xFF3
 25743                           intcon	equ	0xFF2
 25744                           intcon2	equ	0xFF1
 25745                           intcon3	equ	0xFF0
 25746                           indf0	equ	0xFEF
 25747                           postinc0	equ	0xFEE
 25748                           fsr0h	equ	0xFEA
 25749                           fsr0l	equ	0xFE9
 25750                           wreg	equ	0xFE8
 25751                           postdec1	equ	0xFE5
 25752                           fsr1h	equ	0xFE2
 25753                           fsr1l	equ	0xFE1
 25754                           indf2	equ	0xFDF
 25755                           postinc2	equ	0xFDE
 25756                           postdec2	equ	0xFDD
 25757                           fsr2h	equ	0xFDA
 25758                           fsr2l	equ	0xFD9
 25759                           status	equ	0xFD8
 25760                           
 25761 ;; *************** function i2_I2C_Master_Start *****************
 25762 ;; Defined at:
 25763 ;;		line 31 in file "I2C.c"
 25764 ;; Parameters:    Size  Location     Type
 25765 ;;		None
 25766 ;; Auto vars:     Size  Location     Type
 25767 ;;		None
 25768 ;; Return value:  Size  Location     Type
 25769 ;;                  1    wreg      void 
 25770 ;; Registers used:
 25771 ;;		wreg, status,2, status,0, cstack
 25772 ;; Tracked objects:
 25773 ;;		On entry : 0/0
 25774 ;;		On exit  : 0/0
 25775 ;;		Unchanged: 0/0
 25776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25780 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25781 ;;Total ram usage:        0 bytes
 25782 ;; Hardware stack levels used:    1
 25783 ;; Hardware stack levels required when called:    1
 25784 ;; This function calls:
 25785 ;;		i2_I2C_Master_Wait
 25786 ;; This function is called by:
 25787 ;;		i2_getRTC
 25788 ;; This function uses a non-reentrant model
 25789 ;;
 25790                           
 25791                           	psect	text98
 25792  005D16                     __ptext98:
 25793                           	opt stack 0
 25794  005D16                     i2_I2C_Master_Start:
 25795                           	opt stack 19
 25796                           
 25797                           ;I2C.c: 33: I2C_Master_Wait();
 25798                           
 25799                           ;incstack = 0
 25800  005D16  EC48  F02E         	call	i2_I2C_Master_Wait	;wreg free
 25801                           
 25802                           ;I2C.c: 34: SEN = 1;
 25803  005D1A  80C5               	bsf	4037,0,c	;volatile
 25804  005D1C  0012               	return		;funcret
 25805  005D1E                     __end_ofi2_I2C_Master_Start:
 25806                           	opt stack 0
 25807                           pclatu	equ	0xFFB
 25808                           pclath	equ	0xFFA
 25809                           tblptru	equ	0xFF8
 25810                           tblptrh	equ	0xFF7
 25811                           tblptrl	equ	0xFF6
 25812                           tablat	equ	0xFF5
 25813                           prodh	equ	0xFF4
 25814                           prodl	equ	0xFF3
 25815                           intcon	equ	0xFF2
 25816                           intcon2	equ	0xFF1
 25817                           intcon3	equ	0xFF0
 25818                           indf0	equ	0xFEF
 25819                           postinc0	equ	0xFEE
 25820                           fsr0h	equ	0xFEA
 25821                           fsr0l	equ	0xFE9
 25822                           wreg	equ	0xFE8
 25823                           postdec1	equ	0xFE5
 25824                           fsr1h	equ	0xFE2
 25825                           fsr1l	equ	0xFE1
 25826                           indf2	equ	0xFDF
 25827                           postinc2	equ	0xFDE
 25828                           postdec2	equ	0xFDD
 25829                           fsr2h	equ	0xFDA
 25830                           fsr2l	equ	0xFD9
 25831                           status	equ	0xFD8
 25832                           
 25833 ;; *************** function i2_I2C_Master_Read *****************
 25834 ;; Defined at:
 25835 ;;		line 55 in file "I2C.c"
 25836 ;; Parameters:    Size  Location     Type
 25837 ;;  a               1    wreg     unsigned char 
 25838 ;; Auto vars:     Size  Location     Type
 25839 ;;  a               1    1[COMRAM] unsigned char 
 25840 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 25841 ;; Return value:  Size  Location     Type
 25842 ;;                  1    wreg      unsigned char 
 25843 ;; Registers used:
 25844 ;;		wreg, status,2, status,0, cstack
 25845 ;; Tracked objects:
 25846 ;;		On entry : 0/0
 25847 ;;		On exit  : 0/0
 25848 ;;		Unchanged: 0/0
 25849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25851 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25853 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25854 ;;Total ram usage:        2 bytes
 25855 ;; Hardware stack levels used:    1
 25856 ;; Hardware stack levels required when called:    1
 25857 ;; This function calls:
 25858 ;;		i2_I2C_Master_Wait
 25859 ;; This function is called by:
 25860 ;;		i2_getRTC
 25861 ;; This function uses a non-reentrant model
 25862 ;;
 25863                           
 25864                           	psect	text99
 25865  005B6A                     __ptext99:
 25866                           	opt stack 0
 25867  005B6A                     i2_I2C_Master_Read:
 25868                           	opt stack 19
 25869                           
 25870                           ;incstack = 0
 25871                           ;i2I2C_Master_Read@a stored from wreg
 25872  005B6A  6E02               	movwf	i2I2C_Master_Read@a,c
 25873                           
 25874                           ;I2C.c: 57: unsigned char temp;
 25875                           ;I2C.c: 58: I2C_Master_Wait();
 25876  005B6C  EC48  F02E         	call	i2_I2C_Master_Wait	;wreg free
 25877                           
 25878                           ;I2C.c: 59: RCEN = 1;
 25879  005B70  86C5               	bsf	4037,3,c	;volatile
 25880                           
 25881                           ;I2C.c: 60: I2C_Master_Wait();
 25882  005B72  EC48  F02E         	call	i2_I2C_Master_Wait	;wreg free
 25883                           
 25884                           ;I2C.c: 61: temp = SSPBUF;
 25885  005B76  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 25886                           
 25887                           ;I2C.c: 62: I2C_Master_Wait();
 25888  005B7A  EC48  F02E         	call	i2_I2C_Master_Wait	;wreg free
 25889                           
 25890                           ;I2C.c: 63: ACKDT = (a)?0:1;
 25891  005B7E  5002               	movf	i2I2C_Master_Read@a,w,c
 25892  005B80  A4D8               	btfss	status,2,c
 25893  005B82  D002               	goto	i2u504_40
 25894  005B84  8AC5               	bsf	4037,5,c	;volatile
 25895  005B86  D001               	goto	i2l6649
 25896  005B88                     i2u504_40:
 25897  005B88  9AC5               	bcf	4037,5,c	;volatile
 25898  005B8A                     i2l6649:
 25899                           
 25900                           ;I2C.c: 64: ACKEN = 1;
 25901  005B8A  88C5               	bsf	4037,4,c	;volatile
 25902                           
 25903                           ;I2C.c: 65: return temp;
 25904  005B8C  5003               	movf	i2I2C_Master_Read@temp,w,c
 25905  005B8E  0012               	return	
 25906  005B90                     __end_ofi2_I2C_Master_Read:
 25907                           	opt stack 0
 25908                           pclatu	equ	0xFFB
 25909                           pclath	equ	0xFFA
 25910                           tblptru	equ	0xFF8
 25911                           tblptrh	equ	0xFF7
 25912                           tblptrl	equ	0xFF6
 25913                           tablat	equ	0xFF5
 25914                           prodh	equ	0xFF4
 25915                           prodl	equ	0xFF3
 25916                           intcon	equ	0xFF2
 25917                           intcon2	equ	0xFF1
 25918                           intcon3	equ	0xFF0
 25919                           indf0	equ	0xFEF
 25920                           postinc0	equ	0xFEE
 25921                           fsr0h	equ	0xFEA
 25922                           fsr0l	equ	0xFE9
 25923                           wreg	equ	0xFE8
 25924                           postdec1	equ	0xFE5
 25925                           fsr1h	equ	0xFE2
 25926                           fsr1l	equ	0xFE1
 25927                           indf2	equ	0xFDF
 25928                           postinc2	equ	0xFDE
 25929                           postdec2	equ	0xFDD
 25930                           fsr2h	equ	0xFDA
 25931                           fsr2l	equ	0xFD9
 25932                           status	equ	0xFD8
 25933                           
 25934 ;; *************** function i2_I2C_Master_Wait *****************
 25935 ;; Defined at:
 25936 ;;		line 26 in file "I2C.c"
 25937 ;; Parameters:    Size  Location     Type
 25938 ;;		None
 25939 ;; Auto vars:     Size  Location     Type
 25940 ;;		None
 25941 ;; Return value:  Size  Location     Type
 25942 ;;                  1    wreg      void 
 25943 ;; Registers used:
 25944 ;;		wreg, status,2, status,0
 25945 ;; Tracked objects:
 25946 ;;		On entry : 0/0
 25947 ;;		On exit  : 0/0
 25948 ;;		Unchanged: 0/0
 25949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25952 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25953 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25954 ;;Total ram usage:        1 bytes
 25955 ;; Hardware stack levels used:    1
 25956 ;; This function calls:
 25957 ;;		Nothing
 25958 ;; This function is called by:
 25959 ;;		i2_I2C_Master_Start
 25960 ;;		i2_I2C_Master_Stop
 25961 ;;		i2_I2C_Master_Write
 25962 ;;		i2_I2C_Master_Read
 25963 ;; This function uses a non-reentrant model
 25964 ;;
 25965                           
 25966                           	psect	text100
 25967  005C90                     __ptext100:
 25968                           	opt stack 0
 25969  005C90                     i2_I2C_Master_Wait:
 25970                           	opt stack 19
 25971  005C90                     i2l71:
 25972  005C90  B4C7               	btfsc	4039,2,c	;volatile
 25973  005C92  D7FE               	goto	i2l71
 25974  005C94  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 25975  005C98  0E1F               	movlw	31
 25976  005C9A  1601               	andwf	??i2_I2C_Master_Wait,f,c
 25977  005C9C  B4D8               	btfsc	status,2,c
 25978  005C9E  0012               	return	
 25979  005CA0  D7F7               	goto	i2l71
 25980  005CA2                     __end_ofi2_I2C_Master_Wait:
 25981                           	opt stack 0
 25982                           pclatu	equ	0xFFB
 25983                           pclath	equ	0xFFA
 25984                           tblptru	equ	0xFF8
 25985                           tblptrh	equ	0xFF7
 25986                           tblptrl	equ	0xFF6
 25987                           tablat	equ	0xFF5
 25988                           prodh	equ	0xFF4
 25989                           prodl	equ	0xFF3
 25990                           intcon	equ	0xFF2
 25991                           intcon2	equ	0xFF1
 25992                           intcon3	equ	0xFF0
 25993                           indf0	equ	0xFEF
 25994                           postinc0	equ	0xFEE
 25995                           fsr0h	equ	0xFEA
 25996                           fsr0l	equ	0xFE9
 25997                           wreg	equ	0xFE8
 25998                           postdec1	equ	0xFE5
 25999                           fsr1h	equ	0xFE2
 26000                           fsr1l	equ	0xFE1
 26001                           indf2	equ	0xFDF
 26002                           postinc2	equ	0xFDE
 26003                           postdec2	equ	0xFDD
 26004                           fsr2h	equ	0xFDA
 26005                           fsr2l	equ	0xFD9
 26006                           status	equ	0xFD8
 26007                           
 26008 ;; *************** function i2_delay_ms *****************
 26009 ;; Defined at:
 26010 ;;		line 683 in file "sort.c"
 26011 ;; Parameters:    Size  Location     Type
 26012 ;;  milliseconds    1    wreg     unsigned char 
 26013 ;; Auto vars:     Size  Location     Type
 26014 ;;  milliseconds    1    1[COMRAM] unsigned char 
 26015 ;; Return value:  Size  Location     Type
 26016 ;;                  1    wreg      void 
 26017 ;; Registers used:
 26018 ;;		wreg, status,2, status,0, cstack
 26019 ;; Tracked objects:
 26020 ;;		On entry : 0/0
 26021 ;;		On exit  : 0/0
 26022 ;;		Unchanged: 0/0
 26023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26025 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26026 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26027 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26028 ;;Total ram usage:        2 bytes
 26029 ;; Hardware stack levels used:    1
 26030 ;; This function calls:
 26031 ;;		Nothing
 26032 ;; This function is called by:
 26033 ;;		_printSortTimer
 26034 ;; This function uses a non-reentrant model
 26035 ;;
 26036                           
 26037                           	psect	text101
 26038  005C32                     __ptext101:
 26039                           	opt stack 0
 26040  005C32                     i2_delay_ms:
 26041                           	opt stack 22
 26042                           
 26043                           ;incstack = 0
 26044                           ;i2delay_ms@milliseconds stored from wreg
 26045  005C32  6E02               	movwf	i2delay_ms@milliseconds,c
 26046                           
 26047                           ;sort.c: 684: while(milliseconds > 0)
 26048  005C34  D008               	goto	i2l9267
 26049  005C36                     i2l9263:
 26050                           
 26051                           ;sort.c: 685: {
 26052                           ;sort.c: 686: milliseconds--;
 26053  005C36  0602               	decf	i2delay_ms@milliseconds,f,c
 26054                           
 26055                           ;sort.c: 687: _delay((unsigned long)((990)*(32000000/4000000.0)));
 26056  005C38  0E0B               	movlw	11
 26057  005C3A  6E01               	movwf	??i2_delay_ms& (0+255),c
 26058  005C3C  0E48               	movlw	72
 26059  005C3E                     i2u1143_47:
 26060  005C3E  2EE8               	decfsz	wreg,f,c
 26061  005C40  D7FE               	bra	i2u1143_47
 26062  005C42  2E01               	decfsz	??i2_delay_ms& (0+255),f,c
 26063  005C44  D7FC               	bra	i2u1143_47
 26064  005C46                     i2l9267:
 26065  005C46  5002               	movf	i2delay_ms@milliseconds,w,c
 26066  005C48  B4D8               	btfsc	status,2,c
 26067  005C4A  0012               	return	
 26068  005C4C  D7F4               	goto	i2l9263
 26069  005C4E                     __end_ofi2_delay_ms:
 26070                           	opt stack 0
 26071                           pclatu	equ	0xFFB
 26072                           pclath	equ	0xFFA
 26073                           tblptru	equ	0xFF8
 26074                           tblptrh	equ	0xFF7
 26075                           tblptrl	equ	0xFF6
 26076                           tablat	equ	0xFF5
 26077                           prodh	equ	0xFF4
 26078                           prodl	equ	0xFF3
 26079                           intcon	equ	0xFF2
 26080                           intcon2	equ	0xFF1
 26081                           intcon3	equ	0xFF0
 26082                           indf0	equ	0xFEF
 26083                           postinc0	equ	0xFEE
 26084                           fsr0h	equ	0xFEA
 26085                           fsr0l	equ	0xFE9
 26086                           wreg	equ	0xFE8
 26087                           postdec1	equ	0xFE5
 26088                           fsr1h	equ	0xFE2
 26089                           fsr1l	equ	0xFE1
 26090                           indf2	equ	0xFDF
 26091                           postinc2	equ	0xFDE
 26092                           postdec2	equ	0xFDD
 26093                           fsr2h	equ	0xFDA
 26094                           fsr2l	equ	0xFD9
 26095                           status	equ	0xFD8
 26096                           pclatu	equ	0xFFB
 26097                           pclath	equ	0xFFA
 26098                           tblptru	equ	0xFF8
 26099                           tblptrh	equ	0xFF7
 26100                           tblptrl	equ	0xFF6
 26101                           tablat	equ	0xFF5
 26102                           prodh	equ	0xFF4
 26103                           prodl	equ	0xFF3
 26104                           intcon	equ	0xFF2
 26105                           intcon2	equ	0xFF1
 26106                           intcon3	equ	0xFF0
 26107                           indf0	equ	0xFEF
 26108                           postinc0	equ	0xFEE
 26109                           fsr0h	equ	0xFEA
 26110                           fsr0l	equ	0xFE9
 26111                           wreg	equ	0xFE8
 26112                           postdec1	equ	0xFE5
 26113                           fsr1h	equ	0xFE2
 26114                           fsr1l	equ	0xFE1
 26115                           indf2	equ	0xFDF
 26116                           postinc2	equ	0xFDE
 26117                           postdec2	equ	0xFDD
 26118                           fsr2h	equ	0xFDA
 26119                           fsr2l	equ	0xFD9
 26120                           status	equ	0xFD8
 26121                           
 26122                           	psect	rparam
 26123  0000                     pclatu	equ	0xFFB
 26124                           pclath	equ	0xFFA
 26125                           tblptru	equ	0xFF8
 26126                           tblptrh	equ	0xFF7
 26127                           tblptrl	equ	0xFF6
 26128                           tablat	equ	0xFF5
 26129                           prodh	equ	0xFF4
 26130                           prodl	equ	0xFF3
 26131                           intcon	equ	0xFF2
 26132                           intcon2	equ	0xFF1
 26133                           intcon3	equ	0xFF0
 26134                           indf0	equ	0xFEF
 26135                           postinc0	equ	0xFEE
 26136                           fsr0h	equ	0xFEA
 26137                           fsr0l	equ	0xFE9
 26138                           wreg	equ	0xFE8
 26139                           postdec1	equ	0xFE5
 26140                           fsr1h	equ	0xFE2
 26141                           fsr1l	equ	0xFE1
 26142                           indf2	equ	0xFDF
 26143                           postinc2	equ	0xFDE
 26144                           postdec2	equ	0xFDD
 26145                           fsr2h	equ	0xFDA
 26146                           fsr2l	equ	0xFD9
 26147                           status	equ	0xFD8
 26148                           
 26149                           	psect	temp
 26150  00007E                     btemp:
 26151                           	opt stack 0
 26152  00007E                     	ds	1
 26153  0000                     int$flags	set	btemp
 26154                           pclatu	equ	0xFFB
 26155                           pclath	equ	0xFFA
 26156                           tblptru	equ	0xFF8
 26157                           tblptrh	equ	0xFF7
 26158                           tblptrl	equ	0xFF6
 26159                           tablat	equ	0xFF5
 26160                           prodh	equ	0xFF4
 26161                           prodl	equ	0xFF3
 26162                           intcon	equ	0xFF2
 26163                           intcon2	equ	0xFF1
 26164                           intcon3	equ	0xFF0
 26165                           indf0	equ	0xFEF
 26166                           postinc0	equ	0xFEE
 26167                           fsr0h	equ	0xFEA
 26168                           fsr0l	equ	0xFE9
 26169                           wreg	equ	0xFE8
 26170                           postdec1	equ	0xFE5
 26171                           fsr1h	equ	0xFE2
 26172                           fsr1l	equ	0xFE1
 26173                           indf2	equ	0xFDF
 26174                           postinc2	equ	0xFDE
 26175                           postdec2	equ	0xFDD
 26176                           fsr2h	equ	0xFDA
 26177                           fsr2l	equ	0xFD9
 26178                           status	equ	0xFD8


Data Sizes:
    Strings     1373
    Constant    27
    Data        8
    BSS         146
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      81
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_135(CODE[7]), ID@res3(BANK0[2]), ID@res2(BANK0[2]), ID@res1(BANK0[2]), 
		 -> count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_134(CODE[18]), STR_133(CODE[18]), STR_132(CODE[17]), STR_131(CODE[17]), 
		 -> STR_130(CODE[15]), STR_129(CODE[15]), STR_128(CODE[18]), STR_127(CODE[15]), 
		 -> STR_126(CODE[18]), STR_125(CODE[18]), STR_124(CODE[17]), STR_123(CODE[17]), 
		 -> STR_122(CODE[17]), STR_121(CODE[17]), STR_120(CODE[17]), STR_119(CODE[17]), 
		 -> STR_118(CODE[17]), STR_117(CODE[17]), STR_116(CODE[18]), STR_115(CODE[17]), 
		 -> STR_114(CODE[15]), STR_113(CODE[15]), STR_112(CODE[15]), STR_111(CODE[17]), 
		 -> STR_110(CODE[17]), STR_109(CODE[17]), STR_108(CODE[16]), STR_107(CODE[17]), 
		 -> STR_106(CODE[17]), STR_105(CODE[17]), STR_104(CODE[17]), STR_103(CODE[17]), 
		 -> STR_102(CODE[17]), STR_101(CODE[15]), STR_100(CODE[11]), STR_99(CODE[17]), 
		 -> STR_98(CODE[11]), STR_97(CODE[17]), STR_96(CODE[14]), STR_95(CODE[15]), 
		 -> STR_94(CODE[14]), STR_93(CODE[10]), STR_92(CODE[9]), STR_91(CODE[9]), 
		 -> STR_90(CODE[10]), STR_89(CODE[10]), STR_88(CODE[16]), STR_87(CODE[15]), 
		 -> STR_86(CODE[3]), STR_85(CODE[15]), STR_84(CODE[13]), STR_83(CODE[14]), 
		 -> STR_82(CODE[8]), STR_81(CODE[14]), STR_80(CODE[15]), STR_79(CODE[12]), 
		 -> STR_78(CODE[14]), STR_77(CODE[17]), STR_76(CODE[14]), STR_75(CODE[15]), 
		 -> STR_74(CODE[17]), STR_73(CODE[17]), STR_72(CODE[7]), STR_71(CODE[21]), 
		 -> STR_70(CODE[17]), STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[17]), 
		 -> STR_66(CODE[17]), STR_65(CODE[17]), STR_64(CODE[22]), STR_63(CODE[24]), 
		 -> STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), 
		 -> STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), 
		 -> STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), 
		 -> STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[17]), 
		 -> STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[14]), 
		 -> STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), 
		 -> STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), 
		 -> STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_printf
    _readCOND->_readADC
    ___ftge->___awtoft
    ___awtoft->___awdiv
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _arm->_printf
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PortTestPusher->_printf
    _PortTestDC->_printf
    _PlatformTest->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  243216
                    _I2C_Master_Init
                               _Test
                                 _UI
                         _initEEPROM
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   37729
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   18322
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                  23    23      0   14014
                                             43 BANK0     23    23      0
                            ___awdiv
                           ___awtoft
                             ___ftge
                           _delay_ms
                            _lcdInst
                             _printf
                           _readCOND
 ---------------------------------------------------------------------------------
 (3) _readCOND                                             4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     520
                                             18 BANK0      9     3      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2236
                                             14 BANK0      4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1953
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5393
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11758
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   11011
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   23912
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22998
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initEEPROM                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   48088
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13683
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    9315
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    9315
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1068
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0  120616
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                       _PlatformTest
                         _PortTestDC
                     _PortTestPusher
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                                _arm
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    9427
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _arm                                                  3     3      0    9384
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    9315
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15951
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    9315
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestPusher                                       1     1      0    9315
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestDC                                           1     1      0    9315
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PlatformTest                                        12    12      0    9588
                                             43 BANK0     12    12      0
                            _lcdInst
                             _printf
                            _readADC
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   20101
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                        _stopSignals
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5393
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5393
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                         10    10      0    9590
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    9180
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   86705
                                             74 COMRAM    16    16      0
                     _printSortTimer
                     _updateArmState
                         _updateMenu
                  _updateServoStates
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     593
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   73143
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) i2_change_state_to_menu_start                         0     0      0    7848
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printRTC                                          25    25      0    4657
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (10) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31910
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3191
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3191
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3191
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3191
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3191
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3191
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3191
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3191
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3191
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3191
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _updateArmState                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    5121
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                         i2_delay_ms
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            33    21     12    3056
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_delay_ms                                           2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
       _updateServoPosition
     _PlatformTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _stopSignals
     _PortTestDC
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTestPusher
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _arm
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initEEPROM
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       ___awdiv
         ___awmod (ARG)
       ___awtoft
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftge
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
       _delay_ms
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readCOND
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_delay_ms
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateArmState
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition
   i2_change_state_to_menu_start
     i2_lcdInst
       i2_lcdNibble
     i2_printRTC
       i2_getRTC
         i2_I2C_Master_Read
           i2_I2C_Master_Wait
         i2_I2C_Master_Start
           i2_I2C_Master_Wait
         i2_I2C_Master_Stop
           i2_I2C_Master_Wait
         i2_I2C_Master_Write
           i2_I2C_Master_Wait
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
       i2_strcpy
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      51       7       31.6%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14E      34        0.0%
DATA                 0      0     14E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Apr 10 04:35:30 2017

                                    _i 013D                     i2_I2C_Master_Start 5D16  
                   i2_I2C_Master_Write 5CE4                                     l71 5C7C  
                                   _ID 1784                       _f_panning_to_bin 0069  
                          __CFG_CPD$ON 000000                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0075  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
               __end_of_updateArmState 56F6                                    ID@i 00AF  
                                  ID@n 00C0                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C8  
                                  l193 0102                                    l185 00E2  
                                  l188 00E6                                    l508 4904  
                                  l627 31D6                                    l803 1426  
                                  l813 157A                                    l830 1602  
                                  l806 1474                                    l840 1776  
                                  l832 1628                                    l824 172A  
                                  l816 150E                                    l833 1650  
                                  l922 4F4E                                    l834 1678  
                                  l818 153A                                    l835 16A0  
                                  l836 16CA                                    l845 184A  
                                  l864 1B6A                                    l865 1B84  
                                  l785 1262                                    l795 132A  
                                  l868 1C1C                                    l798 1378  
                         __CFG_CPB$OFF 000000                                    _PR2 000FCB  
                                  _PEN 007E2A                                    _SEN 007E28  
                  ?i2_I2C_Master_Start 0001              __end_of_updateServoStates 3E7E  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _arm 44C0                                    _log 00EE  
                                  _sel 00FD                                    _var 0147  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B                    __end_of_BlockerTest 4044  
                  _log_count_can_w_lab 0141                             i2_delay_ms 5C32  
      __end_of_change_state_to_menu_11 5926        __end_of_change_state_to_menu_12 5766  
      __end_of_change_state_to_menu_22 572E        __end_of_change_state_to_menu_23 58F6  
         _f_can_coming_to_distribution 0133                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 5A16        __end_of_change_state_to_logs_12 59E6  
      __end_of_change_state_to_logs_22 59B6        __end_of_change_state_to_logs_23 5A72  
      __end_of_change_state_to_logs_33 5986        __end_of_change_state_to_logs_34 5956  
                                 ??_ID 00AB                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1131 5C5E                                   l1140 4172  
                                 l1301 0A54                                   l1302 0AA2  
                                 l1118 45E0                                   l1303 0B08  
                                 l1304 0B56                                   l1233 4400  
                                 l1340 104A                                   l1236 4420  
                                 l1423 4EDE                                   l1440 3F80  
                                 l1416 4ECE                                   l1328 0EB0  
                                 l1256 47E6                                   l1345 1120  
                                 l1265 2E80                                   l1291 0944  
                                 l1259 47EA                                   l1364 540A  
                                 l1460 45B0                                   l1268 2E84  
                                 l1517 1E70                                   l1445 3FCC  
                                 l1461 4572                                   l1446 3FE6  
                                 l1358 53FA                                   l1294 0948  
                                 l1392 2DE0                                   l1394 2E0E  
                                 l1298 09EE                                   l1379 2E14  
                                 l1483 53AE                                   l1388 2D88  
                                 l1477 539E                                   l1469 45AA  
                                 ?_arm 0001                                   l1911 4C1A  
                                 l1781 4386                                   l1964 5072  
                                 l1974 52F0                                   l7203 3348  
                                 l7205 33A6                                   l6601 5034  
                                 l9001 2D72                                   l8105 18B8  
                                 l8025 16E0                                   l8033 1732  
                                 l9011 2DB6                                   l7171 3154  
                                 l7411 4684                                   l7403 4656  
                                 l8115 1984                                   l8027 1716  
                                 l6621 52BE                                   l6541 5AC4  
                                 l7181 321C                                   l7421 5AFA  
                                 l8213 1BDA                                   l8221 1C1E  
                                 l8045 176A                                   l9015 2DCA  
                                 l7503 4B02                                   l7191 32B2  
                                 l7183 323A                                   l7415 468E  
                                 l7407 466E                                   l8231 46F2  
                                 l8127 19C2                                   l8047 1778  
                                 _ADIE 007CEE                                   l6609 5064  
                                 l6625 52E2                                   l6617 52AC  
                                 l7505 4B0E                                   l7193 32D0  
                                 l7185 3258                                   l7177 31E0  
                                 l8233 470C                                   l7425 5B10  
                                 l8153 1A88                                   l7353 4C3A  
                                 l6619 52B8                                   l6803 1EA8  
                                 l6539 5AB2                                   l8307 2ED4  
                                 l7523 4B66                                   l7515 4B44  
                                 l7507 4B14                                   l6563 5A3C  
                                 l7195 32EE                                   l7187 3276  
                                 l7179 31FE                                   l8227 46BE  
                                 l8139 1A06                                   l8075 1806  
                                 l7363 4CC6                                   l6581 5AEA  
                                 l6821 1F04                                   l6733 1C38  
                                 l8421 09B8                                   l8325 2F8C  
                                 l9221 4D28                                   l9213 4D02  
                                 l7197 330C                                   l7189 3294  
                                 l9301 00FE                                   l8229 46D8  
                                 l8237 4726                                   l8181 1B2E  
                                 l8173 1B06                                   l8149 1A7E  
                                 l8093 1874                                   l7453 508A  
                                 l7357 4C50                                   l6831 1F5E  
                                 l6807 1EC2                                   l6743 1C68  
                                 l6903 4F36                                   l8343 301E  
                                 l7519 4B52                                   l7199 332A  
                                 l9311 013A                                   l8239 4754  
                                 l7535 5652                                   l7543 496A  
                                 l6833 1F68                                   l6809 1EC8  
                                 l6737 1C4C                                   l9145 3F08  
                                 l9153 3F4E                                   l8601 0DA8  
                                 l8513 0BF4                                   l8505 0BD2  
                                 l8425 09C2                                   l8337 2FDC  
                                 l9233 4D6E                                   l9225 4D4C  
                                 l9217 4D16                                   l9209 4CF2  
                                 l7553 49EE                                   l8185 1B3E  
                                 l8169 1AF6                                   l7473 50E2  
                                 l7457 50A0                                   l6851 1FC4  
                                 l6827 1F26                                   l6739 1C5E  
                                 l9171 3F92                                   l8531 0C56  
                                 l8523 0C1C                                   l8515 0BFA  
                                 l8419 09B2                                   l8363 309A  
                                 l8355 306A                                   l7491 4ACE  
                                 l9219 4D22                                   l9411 0350  
                                 l9323 016E                                   l9315 0144  
                                 l9307 0128                                   l7635 4DBA  
                                 l6931 433A                                   l6923 42DC  
                                 l7547 49AA                                   l6597 5022  
                                 l6861 2036                                   l6845 1F9E  
                                 l6781 1DEC                                   l6765 1D4A  
                                 l6757 1D18                                   l6749 1C9C  
                                 l6909 4F68                                   l8613 0DEC  
                                 l8541 0C7E                                   l8509 0BDC  
                                 l8429 09DA                                   l9229 4D5A  
                                 l9421 03E6                                   l9413 036E  
                                 l9405 02F6                                   l7645 4DFC  
                                 l6941 4390                                   l6933 436A  
                                 l6925 42EA                                   l8189 1B54  
                                 l7469 50CA                                   l6599 502E  
                                 l6847 1FAA                                   l6855 1FD8  
                                 l6839 1F82                                   l6775 1DC2  
                                 l6767 1D56                                   l6791 1E36  
                                 l6863 2042                                   l9191 3FF8  
                                 l8703 0FAE                                   l8623 0E14  
                                 l8535 0C60                                   l8519 0C04  
                                 l8375 30E2                                   l8367 30D0  
                                 l9503 0694                                   l9423 0404  
                                 l9415 038C                                   l9407 0314  
                                 l9343 01D6                                   l9319 015C  
                                 l7639 4DD0                                   l7399 464C  
                                 l6935 4378                                   l6927 431A  
                                 l6919 42C8                                   l6857 1FDE  
                                 l6785 1E18                                   l6777 1DCE  
                                 l6769 1D5C                                   l9177 3FAC  
                                 l9169 3F82                                   l8617 0E04  
                                 l8609 0DE2                                   l8561 0CE4  
                                 l8545 0C88                                   l7497 4AE4  
                                 l9601 086A                                   l9521 06FA  
                                 l9425 0422                                   l9417 03AA  
                                 l9409 0332                                   l9433 047C  
                                 l9337 01C6                                   l9353 01FC  
                                 l6961 4BB4                                   l6787 1E30  
                                 l6779 1DD4                                   l9179 3FB6  
                                 l8803 118A                                   l8723 1022  
                                 l8715 1000                                   l8707 0FC6  
                                 l8643 0E88                                   l8635 0E66  
                                 l8627 0E2C                                   l8619 0E0A  
                                 l8571 0D0C                                   l8539 0C78  
                                 l8379 3118                                   l6875 4E44  
                                 l6867 5770                                   l9443 052C  
                                 l9427 0440                                   l9419 03C8  
                                 l9435 04E0                                   l9371 0258  
                                 l9347 01EE                                   l9339 01CC  
                                 l6947 43AC                                   l7907 1358  
                                 l7851 1220                                   l9189 3FE8  
                                 l8725 1028                                   l8645 0E8E  
                                 l8565 0CFC                                   l8557 0CDA  
                                 l8549 0CA0                                   l6885 4E7A  
                                 l6869 577C                                   l9605 0874  
                                 l9525 0704                                   l9461 0578  
                                 l9453 0556                                   l9429 045E  
                                 l9381 0282                                   l6957 4B9E  
                                 l7909 1362                                   l7861 126A  
                                 l9199 403E                                   l8719 100A  
                                 l8671 0F1A                                   l8663 0EF8  
                                 l8639 0E70                                   l8591 0D80  
                                 l8583 0D5E                                   l8575 0D24  
                                 l8567 0D02                                   l6879 4E5A  
                                 l9623 08C0                                   l9615 089E  
                                 l9543 0750                                   l9535 072E  
                                 l9447 0544                                   l9439 0522  
                                 l9375 0270                                   l9367 024E  
                                 l6959 4BAE                                   l7935 1410  
                                 l7919 13A6                                   l8753 10A4  
                                 l8729 1032                                   l8681 0F42  
                                 l8673 0F20                                   l8649 0E98  
                                 l8593 0D86                                   l8833 4534  
                                 l9609 088C                                   l9561 07B6  
                                 l9529 071C                                   l9481 063E  
                                 l9457 0560                                   l9385 028C  
                                 l6969 4C08                                   l7961 14C8  
                                 l7945 1454                                   l8763 10CC  
                                 l8667 0F02                                   l8587 0D68  
                                 l9619 08A8                                   l9539 0738  
                                 l9627 08CC                                   l7947 145E  
                                 l8773 110A                                   l8757 10BC  
                                 l8749 109A                                   l8693 0F86  
                                 l8677 0F2A                                   l8597 0D90  
                                 l8837 455A                                   l8845 4578  
                                 l9565 07C0                                   l9485 0648  
                                 l9389 02A4                                   l7973 1512  
                                 l7957 14A2                                   l7877 12A6  
                                 l8935 2B6C                                   l8783 113A  
                                 l8767 10E4                                   l8759 10C2  
                                 l8847 4592                                   l8839 4564  
                                 l9583 080C                                   l9575 07EA  
                                 l9495 0672                                   l7967 14E8  
                                 l8953 2C1C                                   l8793 1162  
                                 l8785 1140                                   l8697 0F9E  
                                 l8689 0F7C                                   l8849 459C  
                                 l9569 07D8                                   l9489 0660  
                                 l9905 412C                                   l7977 152E  
                                 l7969 14F2                                   l7897 1314  
                                 l8955 2C22                                   l8795 1168  
                                 l8699 0FA4                                   l9579 07F4  
                                 l9499 067C                                   l7995 15DE  
                                 l8973 2CD2                                   l8789 114A  
                                 l9941 4438                                   l8991 2D34  
                                 l8799 1172                                   l9951 4456  
                                 l9943 443E                                   l9935 4426  
                                 l9919 43BC                                   STR_1 FB51  
                                 STR_2 FF4A                                   l8993 2D4A  
                                 l8985 2D14                                   l9953 445C  
                                 l9945 4444                                   l9937 442C  
                                 l9881 40A4                                   STR_3 FB3F  
                                 STR_4 FE5E                                   l8899 4F06  
                                 l9947 444A                                   l9939 4432  
                                 STR_5 FB3F                                   STR_6 FDFA  
                                 l8997 2D5E                                   l9949 4450  
                                 l9957 4462                                   STR_7 FFC4  
                                 STR_8 FFDB                                   l9959 44B4  
                                 l9879 4090                                   STR_9 FFCB  
              ??i2_updateServoPosition 0005                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u5220 1D96                                   u5140 554E  
                                 u5150 5550                                   u5160 55E6  
                                 u5161 55E2                                   u5170 55E8  
                                 u5227 1D8C                                   _PEIE 007F96  
                                 u5260 1E0E                                   u7200 3106  
                                 u6400 122C                                   u8010 2C64  
                                 u7130 2F16                                   u7050 1BE6  
                                 u5267 1E04                                   u8020 2C66  
                                 u7140 2F18                                   u6420 1262  
                                 _RCEN 007E2B                                   u8110 2D42  
                                 u7310 0B56                                   u7070 1C1C  
                                 u8120 2D5A                                   u7208 310A  
                                 u8121 2D56                                   u7170 30BE  
                                 u6418 1230                                   u8060 2CFC  
                                 u4940 5A3A                                   u7068 1BEA  
                                 u8301 3FA2                                   u8310 3FA4  
                                 u7270 09EE                                   u5910 559A  
                                 i2l71 5C90                                   u5920 559C  
                                 u7290 0AA2                                   u7178 30C2  
                                 u6730 1600                                   u8251 3F76  
                                 u8260 3F78                                   u6660 154C  
                                 u8078 2D00                                   u5950 31D6  
                                 u6830 1904                                   u5935 532A  
                                 u7800 4552                                   u6920 1A52  
                                 u6840 1906                                   u6680 1572  
                                 u6930 1A54                                   u6850 1958  
                                 u6690 1574                                   u6860 195A  
                                 u6678 1550                                   u7840 4588  
                                 u7850 458A                                   u9370 4172  
                                 u7790 4550                                   u7980 2BAE  
                                 u7990 2BB0                                   u9807 1346  
                                 u9817 1382                                   u9907 1594  
                                 u9827 1394                                   u9917 15CC  
                                 u9837 13B4                                   u9927 160C  
                                 u9847 13DE                                   u9937 161E  
                                 u9857 1430                                   u9777 11B0  
                                 u9947 1632                                   u9867 1442  
                                 u9787 12D4                                   u9957 1646  
                                 u9877 147E                                   u9797 1334  
                                 u9967 165A                                   u9887 1490  
                                 u9977 166E                                   u9897 14B0  
                                 u9987 1682                                   _RSEN 007E29  
                                 u9997 1696                            _stopSignals 5C16  
                                 _Test 43BA                                   _back 0063  
                                 _main 485E                                   _down 0065  
                         ___ftpack@arg 0080                                   _keys FA87  
                         ___ftpack@exp 0083                                   _time 011C  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 5BB4  
                                 btemp 007E                   ??i2_I2C_Master_Start 0002  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                   _log_count_can_no_lab 013F  
                      __end_ofi2_putch 5CCE                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 36AA  
                          i2_lcdNibble 5412                        __end_of_Loading 1784  
                 __end_of_actuatorTest 1192                                  ??_arm 00AB  
           i2updateServoPosition@timer 0003                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                                l10211 4906                                  l10205 48FA  
                                l10207 4900                                  l10191 48D2  
                                l10183 48A8                                  l10193 48D8  
                                l10185 48BE                                  l10195 48DE  
                 __end_of_EEPROM_write 46A6                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 4B70                        ?_updateArmState 0001  
                                _EEADR 000FA9                                  STR_10 FFE7  
                                STR_11 FFEB                                  STR_12 FFFB  
                                STR_20 FFEF                                  STR_13 FFDF  
                                STR_21 FAA2                                  STR_14 FFD7  
                                STR_22 FF9B                                  STR_30 FE0B  
                                STR_15 FFD3                                  STR_23 FF3C  
                                STR_31 FDE9                                  STR_16 FFE3  
                                STR_24 FD50                                  STR_32 FD2E  
                                STR_40 FCEA                                  STR_17 FFF3  
                                STR_25 FE2D                                  STR_33 FD3F  
                                STR_41 FCD9                                  STR_18 FFF7  
                                STR_34 FDD8                                  STR_50 FDB6  
                                STR_42 FD94                                  STR_26 FD61  
                                STR_43 FD94                                  STR_35 FDD8  
                                STR_51 FFDB                                  STR_19 FFCF  
                                STR_27 FE1C                                  STR_52 FFCB  
                                STR_60 FFF3                                  STR_28 FD72  
                                STR_36 FD1D                                  STR_44 FCFB  
                      __end_of___awmod 4D78                                  STR_45 FCEA  
                                STR_37 FD2E                                  STR_53 FFE7  
                                STR_61 FFF7                                  STR_29 FE2A  
                                STR_70 FCC8                                  STR_62 FFCF  
                                STR_54 FFEB                                  STR_38 FDC7  
                                STR_46 FDA5                                  STR_47 FDA5  
                                STR_55 FFFB                                  STR_63 FAA2  
                                STR_39 FD83                                  STR_71 FAD0  
                                STR_56 FFDF                                  STR_72 FFBD  
                                STR_80 FED7                                  STR_48 FD0C  
                                STR_64 FABA                                  STR_49 FCFB  
                                STR_57 FFD7                                  STR_81 FF20  
                                STR_65 FCB7                                  STR_73 FC73  
                                STR_90 FF87                                  STR_58 FFD3  
                                STR_82 FFAE                                  STR_66 FCC8  
                                STR_74 FC84                                  STR_67 FCB7  
                                STR_59 FFE3                                  STR_83 FF2E  
                                STR_91 FFA5                                  STR_75 FEF5  
                                STR_68 FCC8                                  STR_92 FFA5  
                                STR_84 FF58                                  STR_76 FF2E  
                                STR_69 FCB7                                  STR_93 FF91  
                                STR_85 FE7D                                  STR_77 FC40  
                                STR_94 FF2E                                  STR_86 FE2A  
                                STR_78 FF12                                  STR_79 FF65  
                                STR_95 FEE6                                  STR_87 FEAA  
                                STR_96 FF04                                  STR_88 FE3E  
                                STR_89 FF87                                  STR_97 FC51  
                                STR_98 FF71                                  STR_99 FC62  
         i2updateServoPosition@my_time 0007                                  ?_sort 0001  
                      __end_of___lldiv 4C2C           i2updateServoPosition@time_us 0001  
                                u10007 16AA                                  u10017 16BE  
                                u10107 1B6E                                  u10027 16D4  
                                u10117 1B78                                  u10037 174C  
                                u11007 2B4A                                  u10207 0114  
                                u10127 1B9E                                  u10047 57F0  
                                u11017 2BC4                                  u10217 014C  
                                u10137 5B06                                  u10057 50A8  
                                u11107 20BC                                  u11027 2C10  
                                u10307 0592                                  u10227 0188  
                                u10147 4602                                  u10067 179E  
                                u11117 2108                                  u11037 2C7A  
                                u10317 0650                                  u10237 01DE  
                                u10157 465E                                  u10077 185A  
                                u11207 231E                                  u11127 213C  
                                u11047 2CC6                                  u10407 087C  
                                u10327 0684                                  u10247 020A  
                                u10167 4696                                  u10087 19A8  
                                _T0CON 000FD5                                  u11217 2352  
                                u11137 216E                                  u11057 2D92  
                                u10417 08B0                                  u10337 06AE  
                                u10257 0260                                  u10177 55F8  
                                u10097 1A96                                  u11307 3FDA  
                                u11227 2384                                  u11147 21BA  
                                u11067 2DA4                                  u10507 2FCE  
                                u10427 43CA                                  u10347 070C  
                                u10267 0294                                  u10187 562C  
                      ___awdiv@divisor 0088                                  u11317 5ABA  
                                u11237 23D0                                  u11157 21EE  
                                u11077 2DEA                                  u10517 3012  
                                u10437 2E30                                  u10357 0740  
                                u10277 02BE                                  u10197 002A  
                                u11327 5182                                  u11247 2404  
                                u11167 2220                                  u11087 2DFC  
                                u10607 0938                                  u10527 3030  
                                u10447 2E74                                  u10367 076A  
                                u10287 0534                                  _T1CON 000FCD  
                                u11337 518C                                  u11257 2436  
                                u11177 226C                                  u11097 2070  
                                u10617 095A                                  u10537 305E  
                                u10457 2E96                                  u10377 07C8  
                                u10297 0568                                  u11347 51B8  
                                u11267 4FCE                                  u11187 22A0  
                                u10707 0BE4                                  u10627 09CA  
                                u10547 3078                                  u10467 2EC4  
                                u10387 07FC                                  u11357 51C2  
                                u11277 4FEA                                  u11197 22D2  
                                u10717 0C0C                                  u10637 09FE  
                                u10557 44CE                                  u10477 2F2C  
                                u10397 0826                                  u11287 3EB4  
                                u10807 0E78                                  u10727 0C68  
                                u10647 0A64                                  u10567 4796  
                                u10487 2F80                                  _T2CON 000FCA  
                                u11297 3FD0                                  u10817 0EA0  
                                u10737 0C90                                  u10657 0A82  
                                u10577 47DA                                  u10497 2FA0  
                                u10907 10D4                                  u10827 0F0A  
                                u10747 0CEC                                  u10667 0AB2  
                                u10587 47FC                                  u10917 1124  
                                u10837 0F32                                  u10757 0D14  
                                u10677 0B18                                  u10597 08F4  
                                u10927 112E                                  u10847 0F8E  
                                u10767 0D70                                  u10687 0B36  
                                _T3CON 000FB1                                  u10937 1152  
                                u10857 0FB6                                  u10777 0D98  
                                u10697 0B66                                  u10947 117A  
                                u10867 1012                                  u10787 0DF4  
                                u10957 4E98                                  u10877 103A  
                                u10797 0E1C                                  u10967 4EE8  
                                u10887 105C                                  u10977 4EFC  
                                u10897 10AC                                  u10987 5368  
                                u10997 53C4                        __end_of___lwdiv 507C  
                      __end_of___lwmod 52FA                                  i2l268 36A6  
                                i2l627 3738                                  i2l904 2B08  
                                i2l922 51FE                        ___awdiv@counter 008A  
                                i2l949 56F2                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                             _BothServos 2062  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 5CC2  
                      __end_of_handler 3CB6                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 5ACA                        __end_of_initLCD 5636  
                       __CFG_EBTRB$OFF 000000                                  _debug 012D  
                           i2isdigit@c 0003                          ___awtoft@sign 0091  
                                _getIR 507C                        __end_of_loadRTC 4E04  
                      __end_of_readMAG 55F0                        __end_of_dpowers FAA2  
                                _first 0139                                  _enter 0067  
                                arm@on 00AC                        __end_of_isdigit 5AF4  
                                _input 007D                          ___ftpack@sign 0084  
                                _putch 5CA2                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 5B6A  
                     __end_ofi2_getRTC 5160                    _log_count_pop_w_tab 00F4  
                                status 000FD8                            readCOND@res 0084  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 27BE                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 5836  
                          Loading@addr 00B3                       _count_can_no_lab 0123  
                 printSortTimer@i_1167 0043                   __size_of_EEPROM_read 0018  
                      __initialization 54BE                           __end_of_Test 44C0  
                   __size_ofi2_lcdInst 000C                           __end_of_main 492A  
                         __end_of_keys FA98                           __end_of_sort 5BD6  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                            _BlockerTest 3E7E  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00C4                          __activetblptr 000003  
                               ID@res1 00BA                                 ID@res2 00BC  
           __size_of_updateServoStates 01C8                                 ID@res3 00BE  
                               ID@time 00B9             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                            ?i2_delay_ms 0001  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FF7C                                 STR_101 FEC8  
                               STR_102 FBB8                                 STR_110 FB74  
                               STR_111 FB96                                 STR_103 FBA7  
                               STR_112 FEB9                                 STR_120 FBEB  
                               STR_104 FB85                                 STR_121 FBFC  
                               STR_113 FE9B                                 STR_105 FC0D  
                               STR_122 FBEB                                 STR_130 FE6E  
                               STR_114 FE8C                                 STR_106 FC1E  
                               _ADRESH 000FC4                                 STR_131 FBDA  
                               STR_115 FCA6                                 STR_123 FBDA  
                               STR_107 FB63                                 STR_108 FE4E  
                               STR_132 FC95                                 STR_124 FC2F  
                               STR_116 FAE5                                 _EEADRH 000FAA  
                               STR_133 FAE5                                 STR_117 FBC9  
                               STR_109 FB96                                 STR_125 FB09  
                               STR_118 FBFC                                 STR_134 FB2D  
                               STR_126 FAF7                                 _ADRESL 000FC3  
                               STR_119 FBFC                                 STR_135 FFB6  
                               STR_127 FE6E                                 STR_128 FB1B  
                               STR_129 FE6E                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                       __end_of___awtoft 567A  
                               ?_putch 0001                       __end_of___ftpack 43BA  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 5896              i2_change_state_to_menu_22 5866  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1041 3BBA  
                               i2l1050 3C5E                                 i2l1131 5C74  
                               i2l1052 3C7A                                 i2l1517 262A  
                               i2l1964 54B4                                 i2l7013 246A  
                               i2l1974 56B2                                 i2l7103 26C0  
                               i2l7015 2478                                 i2l7121 2718  
                               i2l7041 253A                                 i2l7033 2512  
                               i2l7025 24B0                                 i2l7009 245A  
                               i2l7123 2720                                 i2l7131 2746  
                               i2l7115 2702                                 i2l7107 26E4  
                               i2l7051 2592                                 i2l7043 2544  
                               i2l7019 247E                                 i2l7133 274C  
                               i2l7109 26EC                                 i2l7061 25DE  
                               i2l7053 259C                                 i2l7045 2548  
                               i2l7127 2734                                 i2l7063 25F0  
                               i2l7055 25A2                                 i2l7143 580E  
                               i2l7137 279A                                 i2l7057 25B4  
                               i2l7321 4252                                 i2l7145 5816  
                               i2l7083 2670                                 i2l7067 25F4  
                               i2l7139 27A2                                 i2l7085 2674  
                               i2l7333 4296                                 i2l7325 4262  
                               i2l6711 56A8                                 i2l6703 5688  
                               i2l7079 2658                                 i2l6705 5690  
                               i2l7097 26A6                                 i2l7601 379A  
                               i2l6707 5694                                 i2l7611 3808  
                               i2l7603 37B0                                 i2l7701 3932  
                               i2l7613 381E                                 i2l7605 37C6  
                               i2l7621 38A4                                 i2l7711 3950  
                               i2l7615 3834                                 i2l7607 37DC  
                               i2l6649 5B8A                                 i2l6673 5C0E  
                               i2l7801 3A94                                 i2l7721 396E  
                               i2l7713 3956                                 i2l7609 37F2  
                               i2l6683 5482                                 i2l7715 395C  
                               i2l7707 393C                                 i2l7619 384A  
                               i2l6685 548A                                 i2l7717 3962  
                               i2l7725 3974                                 i2l9263 5C36  
                               i2l6695 54AA                                 i2l6687 548E  
                               i2l7751 39DE                                 i2l7719 3968  
                               i2l7807 3A9E                                 i2l9255 5214  
                               i2l7761 3A04                                 i2l7745 39D0  
                               i2l7737 39B8                                 i2l7593 3742  
                               i2l9249 51EA                                 i2l9267 5C46  
                               i2l7771 3A26                                 i2l7755 39FA  
                               i2l7595 3758                                 i2l7587 36D6  
                               i2l6981 5126                                 i2l7765 3A18  
                               i2l7597 376E                                 i2l6991 5150  
                               i2l7767 3A1C                                 i2l7599 3784  
                               i2l9711 350A                                 i2l9703 34EE  
                               i2l6985 5136                                 i2l7793 3A70  
                               i2l7785 3A4C                                 i2l7697 391E  
                               i2l7689 3904                                 i2l9641 341A  
                               i2l7779 3A3E                                 i2l7699 392E  
                               i2l9731 3558                                 i2l9723 353C  
                               i2l9715 3518                                 i2l9707 34FC  
                               i2l9651 343C                                 i2l9643 3420  
                               i2l7797 3A82                                 i2l7789 3A5E  
                               i2l9751 35AE                                 i2l9743 358A  
                               i2l9735 356E                                 i2l9727 354A  
                               i2l9719 352E                                 i2l9671 3474  
                               i2l9655 344A                                 i2l9647 342E  
                               i2l9771 35FC                                 i2l9763 35D8  
                               i2l9755 35BC                                 i2l9747 3598  
                               i2l9739 357C                                 i2l9691 34BC  
                               i2l9683 34A0                                 i2l9675 3482  
                               i2l9667 3466                                 i2l9659 3458  
                               i2l9783 362E                                 i2l9775 360A  
                               i2l9767 35EE                                 i2l9759 35CA  
                               i2l9695 34CA                                 i2l9687 34AE  
                               i2l9679 3492                                 i2l9779 3618  
                               i2l9699 34D8                                 i2l9973 27DA  
                               i2l9789 363C                                 i2l9991 2902  
                               i2l9969 27CA                                 i2l9995 2936  
                               i2l9979 2834                _f_most_recent_sort_time 0137  
                               i2l9997 293C                          PlatformTest@i 00B1  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR2IF 007CF1  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR2ON 007E52                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 5B1C  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     __end_of_dispLogs 5BB4                                 ___ftge 492A  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 4788                                 ___wmul 579C  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                               _getMAG 57D2                              ??___awmod 0084  
                          logRun@byte1 00B2                            logRun@byte2 00B3  
                          logRun@byte3 00B4                       __end_of_readCOND 55A4  
                               _getRTC 4E04                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 5BF8  
                               _initUI 5836                                 _readIR 550C  
                               _logRun 4044                                 getIR@i 0087  
                               clear_0 54E4                                 clear_1 54F0  
                               clear_2 54FC                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestDC 53B6  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 1C2A                              ??_handler 004B  
              __size_of_initGlobalVars 00C0                           ?_retrieveLog 0007  
                               _strcpy 5766                     __size_of_SpeedTest 0084  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 5B44  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 5B1C                            ?_BothServos 0001  
                            ??_isdigit 0080                      __end_ofi2___lwdiv 54BE  
                     __end_of_printRTC 33EA                           __mediumconst FA86  
                    __end_ofi2___lwmod 56BC                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 00F2                  __end_of_algorithmTest 485E  
                    __end_ofi2_lcdInst 5CDA                      __end_ofi2_isdigit 5C16  
                           __accesstop 0080                __end_of__initialization 5502  
                        ?_inputHandler 002A                             ___ftge@ff1 0092  
                           ___ftge@ff2 0095                  _most_recent_sort_time 0145  
                        ___rparam_used 000001                          ?_PlatformTest 0001  
              printSortTimer@start_sec 003B                  __size_of_actuatorTest 08B8  
                           ___awtoft@c 008E                          i2_EEPROM_read 5C66  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E8  
                  __size_ofi2_delay_ms 001C                           __pidataBANK1 5CEE  
                  BlockerTest@cam_flag 00B1                          __end_of_getIR 50EE  
                          i2printRTC@i 0041                          _initSortTimer 4C2C  
          __end_of_updateServoPosition 4F8C                          __end_of_putch 5CB2  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 1C2A                             __end_of_UI 08DA  
                            ?i2___wmul 0001                     __size_of_lcdNibble 006C  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002D     __end_of_change_state_to_menu_start 5A9E  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 5A72  
                printSortTimer@cur_sec 003D                              ?i2_printf 000D  
                              ??_getIR 0086                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0127                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 08DA  
              __size_of_PortTestPusher 005C                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C         __size_ofi2_updateServoPosition 0068  
        __end_ofi2_updateServoPosition 5234                           _EEPROM_write 45BE  
                       ??_PlatformTest 00AB               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                                UI@F3246 0149  
                    __end_of_SpeedTest 4F0E                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 03EE                      printRTC@RTC_month 00BC  
                              ?___ftge 0092                                _ID$1142 00AD  
                              _ID$1144 00AE                           ?i2_lcdNibble 0001  
                              UI@i_412 00C9                                UI@i_415 00CA  
                              UI@i_416 00CB                                UI@i_450 00D4  
                              UI@i_442 00D0                                UI@i_434 00CC  
                              UI@i_451 00D5                                UI@i_443 00D1  
                              UI@i_435 00CD                                UI@i_446 00D2  
                              UI@i_438 00CE                                UI@i_447 00D3  
                              UI@i_439 00CF                       ??_updateArmState 0001  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getMAG 0001                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                              ?___awtoft 008E  
                            ?___ftpack 0080                            ?_PortTestDC 0001  
                              ?_printf 008E                                _UI$2432 00C6  
                              ?_strcpy 0080                        _pan_servo_state 006B  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                              i2l10023 2A0C                                i2l10103 3DAA  
                              i2l10041 2A72                                i2l10115 3DF6  
                              i2l10109 3DD0                                i2l10055 2AD6  
                              i2l10303 3C2C                                i2l10223 3B38  
                              i2l10161 56CC                                i2l10129 3E4C  
                              i2l10081 3D0A                                i2l10073 3CEA  
                              i2l10225 3B3C                                i2l10233 3B50  
                              i2l10075 3CF4                                i2l10307 3C32  
                              i2l10235 3B68                                i2l10165 56D2  
                              i2l10069 3CD4                                i2l10253 3B8E  
                              i2l10229 3B48                                i2l10159 56C6  
                              i2l10087 3D20                                i2l10095 3D3E  
                              i2l10239 3B72                                i2l10089 3D34  
                              i2l10097 3D88                                i2l10329 3C78  
                              i2l10281 3BE2                                i2l10099 3D92  
                              i2l10275 3BD4                                i2l10801 39A8  
                              i2l10297 3C12                                i2l10781 3D76  
                              i2l10791 365A                                i2l10783 3D80  
                              i2l10793 367C                                i2l10785 3E64  
                              i2l10777 3D62                                i2l10795 3698  
                              i2l10787 3E74                                i2l10779 3D6C  
                              i2l10799 398C                              ?_delay_ms 0001  
                       PlatformTest@on 00B5                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                _RTCflag 00E4  
                            ?_readCOND 0001                             _initEEPROM 5CF6  
                              i2_putch 5CC2                              ?_initTime 0080  
                      _f_loadingNewCan 00EC                        i2printRTC@month 003D  
                __size_of_Distribution 00E2            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 51CC                                _Loading 1192  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                        __size_of___ftge 00C8  
                              ___awdiv 4AB2                                ___awmod 4CD6  
                           _initServos 4F8C                                ___lldiv 4B70  
                      __size_of___wmul 0036                        __size_of_getMAG 0032  
                              ___lwdiv 5004                                ___lwmod 5298  
                      __size_of_getRTC 0086                        printSortTimer@i 0047  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                           ?_BlockerTest 0001  
                      __size_of_initUI 0030                        __size_of_readIR 004C  
                              __pcinit 54BE                             ??___awtoft 0091  
                 i2EEPROM_read@address 0001                        __size_of_logRun 0144  
                           ??___ftpack 0085                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 49F2  
                              _lcdInst 5CB2                                _handler 0008  
                              __ptext0 485E                                __ptext1 5BB4  
                              __ptext2 1192                                __ptext3 4C2C  
                              __ptext4 49F2                                __ptext5 57D2  
                              __ptext6 507C                                __ptext7 550C  
                              __ptext8 1784                                __ptext9 5558  
                      __size_of_printf 0438                                _readADC 5A9E  
                      __size_of_strcpy 0036                                _initLCD 55F0  
                              _cur_can 012B                                _loadRTC 4D78  
                              _readMAG 55A4                                _dpowers FA98  
                   actuatorTest@i_1751 00B2                     actuatorTest@i_1760 00B8  
                   actuatorTest@i_1752 00B3                     actuatorTest@i_1761 00B9  
                   actuatorTest@i_1745 00AE                     actuatorTest@i_1770 00BE  
                   actuatorTest@i_1754 00B4                     actuatorTest@i_1746 00AF  
                   actuatorTest@i_1738 00AD                     actuatorTest@i_1771 00BF  
                   actuatorTest@i_1755 00B5                           __size_of_arm 00FE  
                   actuatorTest@i_1764 00BA                     actuatorTest@i_1748 00B0  
                   actuatorTest@i_1765 00BB                     actuatorTest@i_1757 00B6  
                   actuatorTest@i_1749 00B1                     actuatorTest@i_1774 00C0  
                   actuatorTest@i_1758 00B7                     actuatorTest@i_1775 00C1  
                   actuatorTest@i_1767 00BC                     actuatorTest@i_1768 00BD  
                   actuatorTest@i_1777 00C2                     actuatorTest@i_1778 00C3  
                              _isdigit 5ACA                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 0126  
                         ??i2_delay_ms 0001                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 46A6                   PlatformTest@res_1790 00AF  
                       __pintcode_body 3ACC                   end_of_initialization 5502  
                           ??_readCOND 0082                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 3ACC                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestDC 005C  
                            i2u1140_47 5436                              i2u1141_47 5458  
                            i2u1142_47 5462                              i2u1143_47 5C3E  
                            i2u1136_47 3924                              i2u1137_47 2A16  
                            i2u1138_47 2A7C                              i2u1139_47 542C  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                     __end_ofi2_delay_ms 5C4E  
               __end_of_initGlobalVars 4AB2                             _sensorTest 2E22  
                           _servoTimes 005B                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 3ACC  
                         ??_BothServos 00AB                  __end_of_machineConfig 5298  
                 __end_of_PlatformTest 2E22                             _updateMenu 33EA  
                    i2_I2C_Master_Read 5B6A                              _IR_signal 00E0  
                    i2_I2C_Master_Wait 5C90                      i2_I2C_Master_Stop 5D0E  
                    i2___lwdiv@divisor 0008                        _log_count_total 0143  
                       _PortTestPusher 535A                              i2___lwdiv 546C  
                            i2___lwmod 567A                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 38E0                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                          ?_initEEPROM 0001                              i2_lcdInst 5CCE  
                        Loading@i_1130 00BC                          Loading@i_1132 00BE  
                        Loading@i_1118 00B6                          Loading@i_1127 00B8  
                        Loading@i_1129 00BA                             _total_time 00FA  
                          printf@width 00A9                   __size_of_stopSignals 001C  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 5BF8  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                     __end_of_BothServos 2450  
                  __end_of_EEPROM_read 5C66                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___ftge 49F2  
                       __end_of___wmul 57D2                         __end_of_getMAG 5804  
                       __end_of_getRTC 4E8A                   __size_ofi2_lcdNibble 005A  
                       _timer2_counter 0073                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 5866  
                       __end_of_readIR 5558                         __end_of_logRun 4188  
                     i2___wmul@product 0005                         __end_of_printf 2062  
                         i2printf@flag 0026                         __end_of_strcpy 579C  
            __end_ofi2_I2C_Master_Read 5B90              __end_ofi2_I2C_Master_Wait 5CA2  
                         i2printf@prec 001D                    start_initialization 54BE  
            __end_ofi2_I2C_Master_Stop 5D16                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 0125  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
               __end_of_PortTestPusher 53B6                            __end_of_arm 45BE  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1406 00B0                  i2I2C_Master_Read@temp 0003  
                 BlockerTest@cond_flag 00B3                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                               ??___ftge 0098  
                            _SpeedTest 4E8A                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                            ?_sensorTest 0001  
                          __pdataBANK1 0149                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                               ID@i_1141 00B1  
                             ID@i_1143 00B3                               ID@i_1146 00B5  
                             ID@i_1147 00B7                           ??_PortTestDC 00AB  
               printSortTimer@timeDiff 0041       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    __size_of_initEEPROM 0008  
                 __size_of_BlockerTest 01C6                    _printSortTimer$2564 003F  
                    __size_of___awtoft 0044                      __size_of___ftpack 010C  
                          __pbssCOMRAM 005B           __size_of_updateServoPosition 007E  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
                      ?_PortTestPusher 0001                __size_of_printSortTimer 034E  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$2067 0081                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 0045  
                    printSortTimer@sec 0049                    __size_of_initServos 0078  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                     _tilt_servo_state 0071                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 0129  
                    __size_of_readCOND 004C                            _EEPROM_read 5C4E  
                     _I2C_Master_Start 5D06                     __end_of_PortTestDC 5412  
                            _f_lastCan 00EA                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 5CDA  
                    __size_of_initTime 0022                  i2_updateServoPosition 51CC  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                             ?_SpeedTest 0001  
                        __pmediumconst FA86                              _lcdNibble 5160  
                __size_of_inputHandler 01EC                               ?___awdiv 0086  
                            __ptext100 5C90                              __ptext101 5C32  
                             ?___awmod 0080                               ?___lldiv 0080  
                       _sensor_outputs 00DA                               ?___lwdiv 0080  
                             ?___lwmod 0087                  __size_of_PlatformTest 0316  
                    __size_of_printRTC 02CA                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 013B  
                            _cur_state 00E6                       ___lwdiv@quotient 0084  
                       __size_of_getIR 0072                          _algorithmTest 4788  
                          ??i2___lwdiv 000A                            _COND_signal 00DE  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 04A6                            __size_of_UI 08C8  
                  __size_of_sensorTest 02FE             __end_ofi2_I2C_Master_Start 5D1E  
           __end_ofi2_I2C_Master_Write 5CEE                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATBbits 000F8A                               _LATCbits 000F8B  
                             _LATDbits 000F8C                           _inputHandler 38E0  
                          ??i2_isdigit 0001                           _PlatformTest 2B0C  
                         BlockerTest@i 00AD                               i2u504_40 5B88  
                             _PIR2bits 000FA1                        PlatformTest@res 00AD  
                             i2u624_40 3738                               i2u571_40 25D6  
                             i2u571_47 25CC                               i2u567_40 2576  
                             i2u567_47 256C                               i2u950_40 2AE0  
                             i2u952_40 2B08                               i2u951_48 2AE2  
                  __size_of_updateMenu 02C0                         _log_completion 00F0  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                            _was_low_1 0077                              _was_low_2 0079  
                            _was_low_3 007B                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 5B44  
                        lcdNibble@data 0081                               i2_getRTC 50EE  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                __size_of_updateArmState 003A  
                             Loading@i 00C0                               Loading@j 00C2  
                             i2_printf 2450                               i2_strcpy 5804  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 54D2                           ??_initEEPROM 0080  
                            readIR@res 0084                 ?i2_updateServoPosition 0001  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 5C7C                            _count_total 00FE  
               i2delay_ms@milliseconds 0002                       ??_initGlobalVars 0080  
                             __Hrparam 0000                       __size_of_Loading 05F2  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                            ??_SpeedTest 00AB  
                __end_of_initSortTimer 4CD6                           ??_initServos 0088  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 58F6             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 572E             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 56F6                _change_state_to_menu_23 58C6  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 59E6  
              _change_state_to_logs_12 59B6                _change_state_to_logs_22 5986  
              _change_state_to_logs_23 5A44                _change_state_to_logs_33 5956  
              _change_state_to_logs_34 5926                       __size_of___lwmod 0062  
                       readADC@channel 0081                               ___awtoft 5636  
                             ___ftpack 42AE                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 3CAE  
                   __end_of_initEEPROM 5CFE                        _I2C_Master_Init 52FA  
                     __size_of_readADC 002C                        _I2C_Master_Read 5A16  
                     __size_of_initLCD 0046                           _f_ID_receive 012F  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004C  
                      _I2C_Master_Wait 5C7C                        _I2C_Master_Stop 5CFE  
                     __size_of_isdigit 002A                               _delay_ms 5AF4  
                       _printSortTimer 27BE                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 42AE  
                             __ptext10 5AF4                               __ptext11 492A  
                             __ptext20 4D78                               __ptext12 5636  
                             __ptext21 52FA                               __ptext13 42AE  
                             __ptext30 4E04                               __ptext22 4B70  
                             __ptext14 46A6                               __ptext31 5CDA  
                             __ptext23 5A72                               __ptext15 5234  
                             __ptext40 43BA                               __ptext32 5CFE  
                             __ptext24 5BD6                               __ptext16 4044  
                             __ptext41 2E22                               __ptext33 5D06  
                             __ptext25 55F0                               __ptext17 45BE  
                             __ptext50 2062                               __ptext42 55A4  
                             __ptext34 5A16                               __ptext26 5CF6  
                             __ptext18 5C4E                               __ptext51 5C16  
                             __ptext43 44C0                               __ptext35 5C7C  
                             __ptext27 0012                               __ptext19 5836  
                             __ptext60 5298                               __ptext52 4F8C  
                             __ptext44 4788                               __ptext36 56F6  
                             __ptext28 3120                               __ptext61 5004  
                             __ptext53 4F0E                               __ptext45 08DA  
                             __ptext37 572E                               __ptext29 5766  
                             __ptext70 5804                               __ptext62 5CB2  
                             __ptext54 3E7E                               __ptext46 4E8A  
                             __ptext38 4CD6                               __ptext71 38E0  
                             __ptext63 5160                               __ptext55 5A9E  
                             __ptext47 535A                               __ptext39 4AB2  
                             __ptext80 59B6                               __ptext72 5866  
                             __ptext56 1C2A                               __ptext48 53B6  
                             __ptext81 59E6                               __ptext73 5896  
                             __ptext65 3CB6                               __ptext57 5CA2  
                             __ptext49 2B0C                               __ptext90 5B44  
                             __ptext82 5B90                               __ptext74 58C6  
                             __ptext66 51CC                               __ptext58 5ACA  
                             __ptext91 567A                               __ptext83 4188  
                             __ptext75 58F6                               __ptext67 33EA  
                             __ptext59 579C                               __ptext92 546C  
                             __ptext84 5C66                               __ptext76 5926  
                             __ptext68 5B1C                               __ptext93 5CCE  
                             __ptext85 56BC                               __ptext77 5956  
                             __ptext69 36AA                               __ptext94 5412  
                             __ptext86 27BE                               __ptext78 5A44  
                             __ptext95 50EE                               __ptext87 2450  
                             __ptext79 5986                               __ptext96 5CE4  
                             __ptext88 5CC2                               __ptext97 5D0E  
                             __ptext89 5BF8                               __ptext98 5D16  
                             __ptext99 5B6A                               _dispLogs 5B90  
                        ?_actuatorTest 0001                     PlatformTest@i_1794 00B3  
                             _readCOND 5558                          ??_stopSignals 0080  
                           strcpy@from 0082                         i2_isdigit$2067 0002  
                   __end_of_initServos 5004                          __size_of_Test 0106  
                        ?_EEPROM_write 00AB                               _initTime 5BD6  
                        __size_of_main 00CC                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F8  
                  _updateServoPosition 4F0E                 __size_of_machineConfig 0064  
                        ??i2_lcdNibble 0001                               _printRTC 3120  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F6                     _f_can_coming_to_ID 0131  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 58C6      __end_ofi2_change_state_to_menu_22 5896  
                     ??_PortTestPusher 00AB                               loadRTC@i 0096  
               __end_of_printSortTimer 2B0C                              putch@data 0082  
             __end_of_I2C_Master_Start 5D0E                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 5CE4                             _INTCONbits 000FF2  
                 ?_updateServoPosition 0080                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00E2  
                             isdigit@c 0082                          sensorTest@res 00AD  
                       ??_actuatorTest 00AB                    _servo_timer_counter 006D  
                             intlevel2 0000                         ??_EEPROM_write 00AE  
                       BlockerTest@res 00AF                     __end_of_sensorTest 3120  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 5C32  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 36AA                __end_of_I2C_Master_Init 535A  
              __end_of_I2C_Master_Read 5A44                __end_of_I2C_Master_Wait 5C90  
                        ??_BlockerTest 00AB                __end_of_I2C_Master_Stop 5D06  
                          lcdInst@data 0082                          printRTC@F3236 014D  
                         retrieveLog@i 000E                            _retrieveLog 4188  
                  __end_ofi2_lcdNibble 546C                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                     _servo_timer_target 006F  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                      ___lwmod@divisor 0089                         _updateArmState 56BC  
                    _f_can_distributed 0135                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 5234  
                      ___lwmod@counter 008B                      _updateServoStates 3CB6  
                        printRTC@month 00BE                          ?_Distribution 0001  
                   ?_updateServoStates 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                         _f_arm_position 00E8  
                  ??_updateServoStates 0009                     i2printRTC@INT_time 002D  
