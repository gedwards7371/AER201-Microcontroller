

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Feb 24 03:23:43 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1
    93                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    94                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    95                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    96  0000                     
    97                           ; Version 1.40
    98                           ; Generated 01/12/2016 GMT
    99                           ; 
   100                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   101                           ; All rights reserved.
   102                           ; 
   103                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   104                           ; 
   105                           ; Redistribution and use in source and binary forms, with or without modification, are
   106                           ; permitted provided that the following conditions are met:
   107                           ; 
   108                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   109                           ;        conditions and the following disclaimer.
   110                           ; 
   111                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   112                           ;        of conditions and the following disclaimer in the documentation and/or other
   113                           ;        materials provided with the distribution.
   114                           ; 
   115                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   116                           ;        software without specific prior written permission.
   117                           ; 
   118                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   119                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   120                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   121                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   122                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   123                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   124                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   125                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   126                           ; 
   127                           ; 
   128                           ; Code-generator required, PIC18F4620 Definitions
   129                           ; 
   130                           ; SFR Addresses
   131  0000                     
   132                           	psect	idataCOMRAM
   133  002A54                     __pidataCOMRAM:
   134                           	opt stack 0
   135                           
   136                           ;initializer for _timer1_20ms_high
   137  002A54  00B7               	dw	183
   138                           
   139                           ;initializer for _timer1_20ms_low
   140  002A56  00BC               	dw	188
   141                           
   142                           ;initializer for _THMAG
   143  002A58  FF                 	db	255
   144                           
   145                           	psect	idataBANK0
   146  002A2A                     __pidataBANK0:
   147                           	opt stack 0
   148                           
   149                           ;initializer for printRTC@F3206
   150  002A2A  4D                 	db	77
   151  002A2B  4D                 	db	77
   152  002A2C  4D                 	db	77
   153  002A2D  00                 	db	0
   154                           
   155                           ;initializer for _f_ID_receive
   156  002A2E  0001               	dw	1
   157                           
   158                           ;initializer for _first
   159  002A30  0001               	dw	1
   160                           
   161                           ;initializer for _THIR
   162  002A32  FF                 	db	255
   163                           
   164                           	psect	mediumconst
   165  00FDB4                     __pmediumconst:
   166                           	opt stack 0
   167  00FDB4  00                 	db	0
   168  00FDB5                     _keys:
   169                           	opt stack 0
   170  00FDB5  31                 	db	49
   171  00FDB6  32                 	db	50
   172  00FDB7  33                 	db	51
   173  00FDB8  41                 	db	65
   174  00FDB9  34                 	db	52
   175  00FDBA  35                 	db	53
   176  00FDBB  36                 	db	54
   177  00FDBC  42                 	db	66
   178  00FDBD  37                 	db	55
   179  00FDBE  38                 	db	56
   180  00FDBF  39                 	db	57
   181  00FDC0  43                 	db	67
   182  00FDC1  2A                 	db	42
   183  00FDC2  30                 	db	48
   184  00FDC3  23                 	db	35
   185  00FDC4  44                 	db	68
   186  00FDC5  00                 	db	0
   187  00FDC6                     __end_of_keys:
   188                           	opt stack 0
   189  00FDC6                     _dpowers:
   190                           	opt stack 0
   191  00FDC6  0001               	dw	1
   192  00FDC8  000A               	dw	10
   193  00FDCA  0064               	dw	100
   194  00FDCC  03E8               	dw	1000
   195  00FDCE  2710               	dw	10000
   196  00FDD0                     __end_of_dpowers:
   197                           	opt stack 0
   198  0000                     _ADCON0	set	4034
   199  0000                     _ADCON0bits	set	4034
   200  0000                     _ADCON1	set	4033
   201  0000                     _ADRESL	set	4035
   202  0000                     _CMCONbits	set	4020
   203  0000                     _CVRCON	set	4021
   204  0000                     _INTCONbits	set	4082
   205  0000                     _LATA	set	3977
   206  0000                     _LATAbits	set	3977
   207  0000                     _LATB	set	3978
   208  0000                     _LATC	set	3979
   209  0000                     _LATCbits	set	3979
   210  0000                     _LATD	set	3980
   211  0000                     _LATDbits	set	3980
   212  0000                     _LATE	set	3981
   213  0000                     _OSCCON	set	4051
   214  0000                     _OSCTUNEbits	set	3995
   215  0000                     _PORTAbits	set	3968
   216  0000                     _PORTB	set	3969
   217  0000                     _PORTBbits	set	3969
   218  0000                     _PR2	set	4043
   219  0000                     _SSPADD	set	4040
   220  0000                     _SSPBUF	set	4041
   221  0000                     _SSPCON1	set	4038
   222  0000                     _SSPCON2	set	4037
   223  0000                     _SSPSTAT	set	4039
   224  0000                     _T0CON	set	4053
   225  0000                     _T1CON	set	4045
   226  0000                     _T2CON	set	4042
   227  0000                     _T3CON	set	4017
   228  0000                     _TMR0H	set	4055
   229  0000                     _TMR0L	set	4054
   230  0000                     _TMR1H	set	4047
   231  0000                     _TMR1L	set	4046
   232  0000                     _TMR3H	set	4019
   233  0000                     _TMR3L	set	4018
   234  0000                     _TRISA	set	3986
   235  0000                     _TRISB	set	3987
   236  0000                     _TRISC	set	3988
   237  0000                     _TRISD	set	3989
   238  0000                     _TRISE	set	3990
   239  0000                     _ACKDT	set	32301
   240  0000                     _ACKEN	set	32300
   241  0000                     _ADFM	set	32263
   242  0000                     _ADIE	set	31982
   243  0000                     _ADON	set	32272
   244  0000                     _INT1IE	set	32643
   245  0000                     _INT1IF	set	32640
   246  0000                     _PEIE	set	32662
   247  0000                     _PEN	set	32298
   248  0000                     _RCEN	set	32299
   249  0000                     _RSEN	set	32297
   250  0000                     _SEN	set	32296
   251  0000                     _TMR0IE	set	32661
   252  0000                     _TMR0IF	set	32658
   253  0000                     _TMR0ON	set	32431
   254  0000                     _TMR1IE	set	31976
   255  0000                     _TMR1IF	set	31984
   256  0000                     _TMR1ON	set	32360
   257  0000                     _TMR2IE	set	31977
   258  0000                     _TMR2IF	set	31985
   259  0000                     _TMR2ON	set	32338
   260  0000                     _TMR3IE	set	32001
   261  0000                     _TMR3ON	set	32136
   262  0000                     _TRISC3	set	31907
   263  0000                     _TRISC4	set	31908
   264  0000                     _VCFG0	set	32268
   265  0000                     _VCFG1	set	32269
   266  0000                     _nRBPU	set	32655
   267  00FDD0                     STR_48:
   268  00FDD0  25                 	db	37
   269  00FDD1  30                 	db	48	;'0'
   270  00FDD2  32                 	db	50	;'2'
   271  00FDD3  64                 	db	100	;'d'
   272  00FDD4  25                 	db	37
   273  00FDD5  73                 	db	115	;'s'
   274  00FDD6  20                 	db	32
   275  00FDD7  7C                 	db	124
   276  00FDD8  20                 	db	32
   277  00FDD9  25                 	db	37
   278  00FDDA  30                 	db	48	;'0'
   279  00FDDB  32                 	db	50	;'2'
   280  00FDDC  64                 	db	100	;'d'
   281  00FDDD  3A                 	db	58	;':'
   282  00FDDE  25                 	db	37
   283  00FDDF  30                 	db	48	;'0'
   284  00FDE0  32                 	db	50	;'2'
   285  00FDE1  64                 	db	100	;'d'
   286  00FDE2  3A                 	db	58	;':'
   287  00FDE3  25                 	db	37
   288  00FDE4  30                 	db	48	;'0'
   289  00FDE5  32                 	db	50	;'2'
   290  00FDE6  64                 	db	100	;'d'
   291  00FDE7  00                 	db	0
   292  00FDE8                     STR_2:
   293  00FDE8  54                 	db	84	;'T'
   294  00FDE9  69                 	db	105	;'i'
   295  00FDEA  6D                 	db	109	;'m'
   296  00FDEB  65                 	db	101	;'e'
   297  00FDEC  3A                 	db	58	;':'
   298  00FDED  20                 	db	32
   299  00FDEE  25                 	db	37
   300  00FDEF  30                 	db	48	;'0'
   301  00FDF0  32                 	db	50	;'2'
   302  00FDF1  64                 	db	100	;'d'
   303  00FDF2  3A                 	db	58	;':'
   304  00FDF3  25                 	db	37
   305  00FDF4  30                 	db	48	;'0'
   306  00FDF5  32                 	db	50	;'2'
   307  00FDF6  64                 	db	100	;'d'
   308  00FDF7  3A                 	db	58	;':'
   309  00FDF8  25                 	db	37
   310  00FDF9  30                 	db	48	;'0'
   311  00FDFA  32                 	db	50	;'2'
   312  00FDFB  64                 	db	100	;'d'
   313  00FDFC  00                 	db	0
   314  00FDFD                     STR_3:
   315  00FDFD  2D                 	db	45
   316  00FDFE  2D                 	db	45
   317  00FDFF  20                 	db	32
   318  00FE00  4C                 	db	76	;'L'
   319  00FE01  6F                 	db	111	;'o'
   320  00FE02  67                 	db	103	;'g'
   321  00FE03  20                 	db	32
   322  00FE04  25                 	db	37
   323  00FE05  32                 	db	50	;'2'
   324  00FE06  64                 	db	100	;'d'
   325  00FE07  20                 	db	32
   326  00FE08  68                 	db	104	;'h'
   327  00FE09  65                 	db	101	;'e'
   328  00FE0A  72                 	db	114	;'r'
   329  00FE0B  65                 	db	101	;'e'
   330  00FE0C  2D                 	db	45
   331  00FE0D  2D                 	db	45
   332  00FE0E  00                 	db	0
   333  00FE0F                     STR_8:
   334  00FE0F  25                 	db	37
   335  00FE10  64                 	db	100	;'d'
   336  00FE11  20                 	db	32
   337  00FE12  6D                 	db	109	;'m'
   338  00FE13  69                 	db	105	;'i'
   339  00FE14  6E                 	db	110	;'n'
   340  00FE15  28                 	db	40
   341  00FE16  73                 	db	115	;'s'
   342  00FE17  29                 	db	41
   343  00FE18  20                 	db	32
   344  00FE19  25                 	db	37
   345  00FE1A  64                 	db	100	;'d'
   346  00FE1B  20                 	db	32
   347  00FE1C  73                 	db	115	;'s'
   348  00FE1D  65                 	db	101	;'e'
   349  00FE1E  63                 	db	99	;'c'
   350  00FE1F  73                 	db	115	;'s'
   351  00FE20  00                 	db	0
   352  00FE21                     STR_26:
   353  00FE21  4C                 	db	76	;'L'
   354  00FE22  4F                 	db	79	;'O'
   355  00FE23  47                 	db	71	;'G'
   356  00FE24  20                 	db	32
   357  00FE25  31                 	db	49	;'1'
   358  00FE26  20                 	db	32
   359  00FE27  20                 	db	32
   360  00FE28  20                 	db	32
   361  00FE29  20                 	db	32
   362  00FE2A  20                 	db	32
   363  00FE2B  20                 	db	32
   364  00FE2C  20                 	db	32
   365  00FE2D  20                 	db	32
   366  00FE2E  20                 	db	32
   367  00FE2F  20                 	db	32
   368  00FE30  20                 	db	32
   369  00FE31  00                 	db	0
   370  00FE32                     STR_25:
   371  00FE32  4C                 	db	76	;'L'
   372  00FE33  4F                 	db	79	;'O'
   373  00FE34  47                 	db	71	;'G'
   374  00FE35  20                 	db	32
   375  00FE36  32                 	db	50	;'2'
   376  00FE37  20                 	db	32
   377  00FE38  20                 	db	32
   378  00FE39  20                 	db	32
   379  00FE3A  20                 	db	32
   380  00FE3B  20                 	db	32
   381  00FE3C  20                 	db	32
   382  00FE3D  20                 	db	32
   383  00FE3E  20                 	db	32
   384  00FE3F  20                 	db	32
   385  00FE40  20                 	db	32
   386  00FE41  20                 	db	32
   387  00FE42  00                 	db	0
   388  00FE43                     STR_29:
   389  00FE43  4C                 	db	76	;'L'
   390  00FE44  4F                 	db	79	;'O'
   391  00FE45  47                 	db	71	;'G'
   392  00FE46  20                 	db	32
   393  00FE47  33                 	db	51	;'3'
   394  00FE48  20                 	db	32
   395  00FE49  20                 	db	32
   396  00FE4A  20                 	db	32
   397  00FE4B  20                 	db	32
   398  00FE4C  20                 	db	32
   399  00FE4D  20                 	db	32
   400  00FE4E  20                 	db	32
   401  00FE4F  20                 	db	32
   402  00FE50  20                 	db	32
   403  00FE51  20                 	db	32
   404  00FE52  20                 	db	32
   405  00FE53  00                 	db	0
   406  00FE54                     STR_33:
   407  00FE54  4C                 	db	76	;'L'
   408  00FE55  4F                 	db	79	;'O'
   409  00FE56  47                 	db	71	;'G'
   410  00FE57  20                 	db	32
   411  00FE58  34                 	db	52	;'4'
   412  00FE59  20                 	db	32
   413  00FE5A  20                 	db	32
   414  00FE5B  20                 	db	32
   415  00FE5C  20                 	db	32
   416  00FE5D  20                 	db	32
   417  00FE5E  20                 	db	32
   418  00FE5F  20                 	db	32
   419  00FE60  20                 	db	32
   420  00FE61  20                 	db	32
   421  00FE62  20                 	db	32
   422  00FE63  20                 	db	32
   423  00FE64  00                 	db	0
   424  00FE65                     STR_21:
   425  00FE65  33                 	db	51	;'3'
   426  00FE66  2E                 	db	46
   427  00FE67  20                 	db	32
   428  00FE68  4C                 	db	76	;'L'
   429  00FE69  4F                 	db	79	;'O'
   430  00FE6A  47                 	db	71	;'G'
   431  00FE6B  53                 	db	83	;'S'
   432  00FE6C  20                 	db	32
   433  00FE6D  20                 	db	32
   434  00FE6E  20                 	db	32
   435  00FE6F  20                 	db	32
   436  00FE70  20                 	db	32
   437  00FE71  20                 	db	32
   438  00FE72  20                 	db	32
   439  00FE73  20                 	db	32
   440  00FE74  20                 	db	32
   441  00FE75  00                 	db	0
   442  00FE76                     STR_17:
   443  00FE76  32                 	db	50	;'2'
   444  00FE77  2E                 	db	46
   445  00FE78  20                 	db	32
   446  00FE79  53                 	db	83	;'S'
   447  00FE7A  4F                 	db	79	;'O'
   448  00FE7B  52                 	db	82	;'R'
   449  00FE7C  54                 	db	84	;'T'
   450  00FE7D  20                 	db	32
   451  00FE7E  20                 	db	32
   452  00FE7F  20                 	db	32
   453  00FE80  20                 	db	32
   454  00FE81  20                 	db	32
   455  00FE82  20                 	db	32
   456  00FE83  20                 	db	32
   457  00FE84  20                 	db	32
   458  00FE85  20                 	db	32
   459  00FE86  00                 	db	0
   460  00FE87                     STR_18:
   461  00FE87  31                 	db	49	;'1'
   462  00FE88  2E                 	db	46
   463  00FE89  20                 	db	32
   464  00FE8A  44                 	db	68	;'D'
   465  00FE8B  41                 	db	65	;'A'
   466  00FE8C  54                 	db	84	;'T'
   467  00FE8D  45                 	db	69	;'E'
   468  00FE8E  2F                 	db	47
   469  00FE8F  54                 	db	84	;'T'
   470  00FE90  49                 	db	73	;'I'
   471  00FE91  4D                 	db	77	;'M'
   472  00FE92  45                 	db	69	;'E'
   473  00FE93  20                 	db	32
   474  00FE94  20                 	db	32
   475  00FE95  20                 	db	32
   476  00FE96  20                 	db	32
   477  00FE97  00                 	db	0
   478  00FE98                     STR_9:
   479  00FE98  20                 	db	32
   480  00FE99  2D                 	db	45
   481  00FE9A  2D                 	db	45
   482  00FE9B  20                 	db	32
   483  00FE9C  50                 	db	80	;'P'
   484  00FE9D  6F                 	db	111	;'o'
   485  00FE9E  70                 	db	112	;'p'
   486  00FE9F  20                 	db	32
   487  00FEA0  20                 	db	32
   488  00FEA1  63                 	db	99	;'c'
   489  00FEA2  61                 	db	97	;'a'
   490  00FEA3  6E                 	db	110	;'n'
   491  00FEA4  20                 	db	32
   492  00FEA5  2D                 	db	45
   493  00FEA6  2D                 	db	45
   494  00FEA7  20                 	db	32
   495  00FEA8  00                 	db	0
   496  00FEA9                     STR_11:
   497  00FEA9  20                 	db	32
   498  00FEAA  2D                 	db	45
   499  00FEAB  2D                 	db	45
   500  00FEAC  20                 	db	32
   501  00FEAD  53                 	db	83	;'S'
   502  00FEAE  6F                 	db	111	;'o'
   503  00FEAF  75                 	db	117	;'u'
   504  00FEB0  70                 	db	112	;'p'
   505  00FEB1  20                 	db	32
   506  00FEB2  63                 	db	99	;'c'
   507  00FEB3  61                 	db	97	;'a'
   508  00FEB4  6E                 	db	110	;'n'
   509  00FEB5  20                 	db	32
   510  00FEB6  2D                 	db	45
   511  00FEB7  2D                 	db	45
   512  00FEB8  20                 	db	32
   513  00FEB9  00                 	db	0
   514  00FEBA                     STR_1:
   515  00FEBA  21                 	db	33
   516  00FEBB  53                 	db	83	;'S'
   517  00FEBC  4F                 	db	79	;'O'
   518  00FEBD  52                 	db	82	;'R'
   519  00FEBE  54                 	db	84	;'T'
   520  00FEBF  20                 	db	32
   521  00FEC0  43                 	db	67	;'C'
   522  00FEC1  4F                 	db	79	;'O'
   523  00FEC2  4E                 	db	78	;'N'
   524  00FEC3  43                 	db	67	;'C'
   525  00FEC4  4C                 	db	76	;'L'
   526  00FEC5  55                 	db	85	;'U'
   527  00FEC6  44                 	db	68	;'D'
   528  00FEC7  45                 	db	69	;'E'
   529  00FEC8  44                 	db	68	;'D'
   530  00FEC9  21                 	db	33
   531  00FECA  00                 	db	0
   532  00FECB                     STR_13:
   533  00FECB  2D                 	db	45
   534  00FECC  2D                 	db	45
   535  00FECD  20                 	db	32
   536  00FECE  54                 	db	84	;'T'
   537  00FECF  6F                 	db	111	;'o'
   538  00FED0  74                 	db	116	;'t'
   539  00FED1  61                 	db	97	;'a'
   540  00FED2  6C                 	db	108	;'l'
   541  00FED3  20                 	db	32
   542  00FED4  63                 	db	99	;'c'
   543  00FED5  61                 	db	97	;'a'
   544  00FED6  6E                 	db	110	;'n'
   545  00FED7  73                 	db	115	;'s'
   546  00FED8  20                 	db	32
   547  00FED9  2D                 	db	45
   548  00FEDA  2D                 	db	45
   549  00FEDB  00                 	db	0
   550  00FEDC                     STR_10:
   551  00FEDC  4E                 	db	78	;'N'
   552  00FEDD  6F                 	db	111	;'o'
   553  00FEDE  20                 	db	32
   554  00FEDF  74                 	db	116	;'t'
   555  00FEE0  61                 	db	97	;'a'
   556  00FEE1  62                 	db	98	;'b'
   557  00FEE2  3A                 	db	58	;':'
   558  00FEE3  20                 	db	32
   559  00FEE4  39                 	db	57	;'9'
   560  00FEE5  7C                 	db	124
   561  00FEE6  54                 	db	84	;'T'
   562  00FEE7  61                 	db	97	;'a'
   563  00FEE8  62                 	db	98	;'b'
   564  00FEE9  3A                 	db	58	;':'
   565  00FEEA  20                 	db	32
   566  00FEEB  31                 	db	49	;'1'
   567  00FEEC  00                 	db	0
   568  00FEED                     STR_12:
   569  00FEED  4E                 	db	78	;'N'
   570  00FEEE  6F                 	db	111	;'o'
   571  00FEEF  20                 	db	32
   572  00FEF0  6C                 	db	108	;'l'
   573  00FEF1  62                 	db	98	;'b'
   574  00FEF2  6C                 	db	108	;'l'
   575  00FEF3  3A                 	db	58	;':'
   576  00FEF4  20                 	db	32
   577  00FEF5  31                 	db	49	;'1'
   578  00FEF6  7C                 	db	124
   579  00FEF7  6C                 	db	108	;'l'
   580  00FEF8  62                 	db	98	;'b'
   581  00FEF9  6C                 	db	108	;'l'
   582  00FEFA  3A                 	db	58	;':'
   583  00FEFB  20                 	db	32
   584  00FEFC  31                 	db	49	;'1'
   585  00FEFD  00                 	db	0
   586  00FEFE                     STR_6:
   587  00FEFE  30                 	db	48	;'0'
   588  00FEFF  36                 	db	54	;'6'
   589  00FF00  46                 	db	70	;'F'
   590  00FF01  65                 	db	101	;'e'
   591  00FF02  62                 	db	98	;'b'
   592  00FF03  20                 	db	32
   593  00FF04  7C                 	db	124
   594  00FF05  20                 	db	32
   595  00FF06  30                 	db	48	;'0'
   596  00FF07  31                 	db	49	;'1'
   597  00FF08  3A                 	db	58	;':'
   598  00FF09  30                 	db	48	;'0'
   599  00FF0A  38                 	db	56	;'8'
   600  00FF0B  3A                 	db	58	;':'
   601  00FF0C  35                 	db	53	;'5'
   602  00FF0D  36                 	db	54	;'6'
   603  00FF0E  00                 	db	0
   604  00FF0F                     STR_24:
   605  00FF0F  4C                 	db	76	;'L'
   606  00FF10  4F                 	db	79	;'O'
   607  00FF11  47                 	db	71	;'G'
   608  00FF12  20                 	db	32
   609  00FF13  31                 	db	49	;'1'
   610  00FF14  20                 	db	32
   611  00FF15  20                 	db	32
   612  00FF16  20                 	db	32
   613  00FF17  20                 	db	32
   614  00FF18  20                 	db	32
   615  00FF19  20                 	db	32
   616  00FF1A  20                 	db	32
   617  00FF1B  20                 	db	32
   618  00FF1C  20                 	db	32
   619  00FF1D  20                 	db	32
   620  00FF1E  3C                 	db	60	;'<'
   621  00FF1F  00                 	db	0
   622  00FF20                     STR_27:
   623  00FF20  4C                 	db	76	;'L'
   624  00FF21  4F                 	db	79	;'O'
   625  00FF22  47                 	db	71	;'G'
   626  00FF23  20                 	db	32
   627  00FF24  32                 	db	50	;'2'
   628  00FF25  20                 	db	32
   629  00FF26  20                 	db	32
   630  00FF27  20                 	db	32
   631  00FF28  20                 	db	32
   632  00FF29  20                 	db	32
   633  00FF2A  20                 	db	32
   634  00FF2B  20                 	db	32
   635  00FF2C  20                 	db	32
   636  00FF2D  20                 	db	32
   637  00FF2E  20                 	db	32
   638  00FF2F  3C                 	db	60	;'<'
   639  00FF30  00                 	db	0
   640  00FF31                     STR_31:
   641  00FF31  4C                 	db	76	;'L'
   642  00FF32  4F                 	db	79	;'O'
   643  00FF33  47                 	db	71	;'G'
   644  00FF34  20                 	db	32
   645  00FF35  33                 	db	51	;'3'
   646  00FF36  20                 	db	32
   647  00FF37  20                 	db	32
   648  00FF38  20                 	db	32
   649  00FF39  20                 	db	32
   650  00FF3A  20                 	db	32
   651  00FF3B  20                 	db	32
   652  00FF3C  20                 	db	32
   653  00FF3D  20                 	db	32
   654  00FF3E  20                 	db	32
   655  00FF3F  20                 	db	32
   656  00FF40  3C                 	db	60	;'<'
   657  00FF41  00                 	db	0
   658  00FF42                     STR_35:
   659  00FF42  4C                 	db	76	;'L'
   660  00FF43  4F                 	db	79	;'O'
   661  00FF44  47                 	db	71	;'G'
   662  00FF45  20                 	db	32
   663  00FF46  34                 	db	52	;'4'
   664  00FF47  20                 	db	32
   665  00FF48  20                 	db	32
   666  00FF49  20                 	db	32
   667  00FF4A  20                 	db	32
   668  00FF4B  20                 	db	32
   669  00FF4C  20                 	db	32
   670  00FF4D  20                 	db	32
   671  00FF4E  20                 	db	32
   672  00FF4F  20                 	db	32
   673  00FF50  20                 	db	32
   674  00FF51  3C                 	db	60	;'<'
   675  00FF52  00                 	db	0
   676  00FF53                     STR_23:
   677  00FF53  33                 	db	51	;'3'
   678  00FF54  2E                 	db	46
   679  00FF55  20                 	db	32
   680  00FF56  4C                 	db	76	;'L'
   681  00FF57  4F                 	db	79	;'O'
   682  00FF58  47                 	db	71	;'G'
   683  00FF59  53                 	db	83	;'S'
   684  00FF5A  20                 	db	32
   685  00FF5B  20                 	db	32
   686  00FF5C  20                 	db	32
   687  00FF5D  20                 	db	32
   688  00FF5E  20                 	db	32
   689  00FF5F  20                 	db	32
   690  00FF60  20                 	db	32
   691  00FF61  20                 	db	32
   692  00FF62  3C                 	db	60	;'<'
   693  00FF63  00                 	db	0
   694  00FF64                     STR_19:
   695  00FF64  32                 	db	50	;'2'
   696  00FF65  2E                 	db	46
   697  00FF66  20                 	db	32
   698  00FF67  53                 	db	83	;'S'
   699  00FF68  4F                 	db	79	;'O'
   700  00FF69  52                 	db	82	;'R'
   701  00FF6A  54                 	db	84	;'T'
   702  00FF6B  20                 	db	32
   703  00FF6C  20                 	db	32
   704  00FF6D  20                 	db	32
   705  00FF6E  20                 	db	32
   706  00FF6F  20                 	db	32
   707  00FF70  20                 	db	32
   708  00FF71  20                 	db	32
   709  00FF72  20                 	db	32
   710  00FF73  3C                 	db	60	;'<'
   711  00FF74  00                 	db	0
   712  00FF75                     STR_16:
   713  00FF75  31                 	db	49	;'1'
   714  00FF76  2E                 	db	46
   715  00FF77  20                 	db	32
   716  00FF78  44                 	db	68	;'D'
   717  00FF79  41                 	db	65	;'A'
   718  00FF7A  54                 	db	84	;'T'
   719  00FF7B  45                 	db	69	;'E'
   720  00FF7C  2F                 	db	47
   721  00FF7D  54                 	db	84	;'T'
   722  00FF7E  49                 	db	73	;'I'
   723  00FF7F  4D                 	db	77	;'M'
   724  00FF80  45                 	db	69	;'E'
   725  00FF81  20                 	db	32
   726  00FF82  20                 	db	32
   727  00FF83  20                 	db	32
   728  00FF84  3C                 	db	60	;'<'
   729  00FF85  00                 	db	0
   730  00FF86                     STR_4:
   731  00FF86  50                 	db	80	;'P'
   732  00FF87  61                 	db	97	;'a'
   733  00FF88  75                 	db	117	;'u'
   734  00FF89  73                 	db	115	;'s'
   735  00FF8A  65                 	db	101	;'e'
   736  00FF8B  3A                 	db	58	;':'
   737  00FF8C  3C                 	db	60	;'<'
   738  00FF8D  20                 	db	32
   739  00FF8E  7C                 	db	124
   740  00FF8F  20                 	db	32
   741  00FF90  42                 	db	66	;'B'
   742  00FF91  61                 	db	97	;'a'
   743  00FF92  63                 	db	99	;'c'
   744  00FF93  6B                 	db	107	;'k'
   745  00FF94  3A                 	db	58	;':'
   746  00FF95  3E                 	db	62	;'>'
   747  00FF96  00                 	db	0
   748  00FF97                     STR_15:
   749  00FF97  50                 	db	80	;'P'
   750  00FF98  55                 	db	85	;'U'
   751  00FF99  53                 	db	83	;'S'
   752  00FF9A  48                 	db	72	;'H'
   753  00FF9B  20                 	db	32
   754  00FF9C  54                 	db	84	;'T'
   755  00FF9D  4F                 	db	79	;'O'
   756  00FF9E  20                 	db	32
   757  00FF9F  43                 	db	67	;'C'
   758  00FFA0  4F                 	db	79	;'O'
   759  00FFA1  4E                 	db	78	;'N'
   760  00FFA2  54                 	db	84	;'T'
   761  00FFA3  49                 	db	73	;'I'
   762  00FFA4  4E                 	db	78	;'N'
   763  00FFA5  55                 	db	85	;'U'
   764  00FFA6  45                 	db	69	;'E'
   765  00FFA7  00                 	db	0
   766  00FFA8                     STR_49:
   767  00FFA8  53                 	db	83	;'S'
   768  00FFA9  6F                 	db	111	;'o'
   769  00FFAA  72                 	db	114	;'r'
   770  00FFAB  74                 	db	116	;'t'
   771  00FFAC  69                 	db	105	;'i'
   772  00FFAD  6E                 	db	110	;'n'
   773  00FFAE  67                 	db	103	;'g'
   774  00FFAF  2E                 	db	46
   775  00FFB0  2E                 	db	46
   776  00FFB1  2E                 	db	46
   777  00FFB2  00                 	db	0
   778  00FFB3                     STR_7:
   779  00FFB3  44                 	db	68	;'D'
   780  00FFB4  75                 	db	117	;'u'
   781  00FFB5  72                 	db	114	;'r'
   782  00FFB6  61                 	db	97	;'a'
   783  00FFB7  74                 	db	116	;'t'
   784  00FFB8  69                 	db	105	;'i'
   785  00FFB9  6F                 	db	111	;'o'
   786  00FFBA  6E                 	db	110	;'n'
   787  00FFBB  3A                 	db	58	;':'
   788  00FFBC  00                 	db	0
   789  00FFBD                     STR_51:
   790  00FFBD  28                 	db	40
   791  00FFBE  6E                 	db	110	;'n'
   792  00FFBF  75                 	db	117	;'u'
   793  00FFC0  6C                 	db	108	;'l'
   794  00FFC1  6C                 	db	108	;'l'
   795  00FFC2  29                 	db	41
   796  00FFC3  00                 	db	0
   797  00FFC4                     STR_5:
   798  00FFC4  53                 	db	83	;'S'
   799  00FFC5  74                 	db	116	;'t'
   800  00FFC6  61                 	db	97	;'a'
   801  00FFC7  72                 	db	114	;'r'
   802  00FFC8  74                 	db	116	;'t'
   803  00FFC9  3A                 	db	58	;':'
   804  00FFCA  00                 	db	0
   805  00FFCB                     STR_37:
   806  00FFCB  46                 	db	70	;'F'
   807  00FFCC  65                 	db	101	;'e'
   808  00FFCD  62                 	db	98	;'b'
   809  00FFCE  00                 	db	0
   810  00FFCF                     STR_47:
   811  00FFCF  44                 	db	68	;'D'
   812  00FFD0  65                 	db	101	;'e'
   813  00FFD1  63                 	db	99	;'c'
   814  00FFD2  00                 	db	0
   815  00FFD3                     STR_43:
   816  00FFD3  41                 	db	65	;'A'
   817  00FFD4  75                 	db	117	;'u'
   818  00FFD5  67                 	db	103	;'g'
   819  00FFD6  00                 	db	0
   820  00FFD7                     STR_42:
   821  00FFD7  4A                 	db	74	;'J'
   822  00FFD8  75                 	db	117	;'u'
   823  00FFD9  6C                 	db	108	;'l'
   824  00FFDA  00                 	db	0
   825  00FFDB                     STR_36:
   826  00FFDB  4A                 	db	74	;'J'
   827  00FFDC  61                 	db	97	;'a'
   828  00FFDD  6E                 	db	110	;'n'
   829  00FFDE  00                 	db	0
   830  00FFDF                     STR_41:
   831  00FFDF  4A                 	db	74	;'J'
   832  00FFE0  75                 	db	117	;'u'
   833  00FFE1  6E                 	db	110	;'n'
   834  00FFE2  00                 	db	0
   835  00FFE3                     STR_44:
   836  00FFE3  53                 	db	83	;'S'
   837  00FFE4  65                 	db	101	;'e'
   838  00FFE5  70                 	db	112	;'p'
   839  00FFE6  00                 	db	0
   840  00FFE7                     STR_38:
   841  00FFE7  4D                 	db	77	;'M'
   842  00FFE8  61                 	db	97	;'a'
   843  00FFE9  72                 	db	114	;'r'
   844  00FFEA  00                 	db	0
   845  00FFEB                     STR_39:
   846  00FFEB  41                 	db	65	;'A'
   847  00FFEC  70                 	db	112	;'p'
   848  00FFED  72                 	db	114	;'r'
   849  00FFEE  00                 	db	0
   850  00FFEF                     STR_45:
   851  00FFEF  4F                 	db	79	;'O'
   852  00FFF0  63                 	db	99	;'c'
   853  00FFF1  74                 	db	116	;'t'
   854  00FFF2  00                 	db	0
   855  00FFF3                     STR_46:
   856  00FFF3  4E                 	db	78	;'N'
   857  00FFF4  6F                 	db	111	;'o'
   858  00FFF5  76                 	db	118	;'v'
   859  00FFF6  00                 	db	0
   860  00FFF7                     STR_40:
   861  00FFF7  4D                 	db	77	;'M'
   862  00FFF8  61                 	db	97	;'a'
   863  00FFF9  79                 	db	121	;'y'
   864  00FFFA  00                 	db	0
   865  00FFFB                     STR_14:
   866  00FFFB  31                 	db	49	;'1'
   867  00FFFC  32                 	db	50	;'2'
   868  00FFFD  00                 	db	0
   869  0000                     
   870                           ; #config settings
   871  00FFFE  00                 	db	0	; dummy byte at the end
   872  0000                     
   873                           	psect	cinit
   874  0020A2                     __pcinit:
   875                           	opt stack 0
   876  0020A2                     start_initialization:
   877                           	opt stack 0
   878  0020A2                     __initialization:
   879                           	opt stack 0
   880                           
   881                           ; Initialize objects allocated to BANK0 (9 bytes)
   882                           ; load TBLPTR registers with __pidataBANK0
   883  0020A2  0E2A               	movlw	low __pidataBANK0
   884  0020A4  6EF6               	movwf	tblptrl,c
   885  0020A6  0E2A               	movlw	high __pidataBANK0
   886  0020A8  6EF7               	movwf	tblptrh,c
   887  0020AA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   888  0020AC  6EF8               	movwf	tblptru,c
   889  0020AE  EE00  F0F4         	lfsr	0,__pdataBANK0
   890  0020B2  EE10 F009          	lfsr	1,9
   891  0020B6                     copy_data0:
   892  0020B6  0009               	tblrd		*+
   893  0020B8  CFF5 FFEE          	movff	tablat,postinc0
   894  0020BC  50E5               	movf	postdec1,w,c
   895  0020BE  50E1               	movf	fsr1l,w,c
   896  0020C0  E1FA               	bnz	copy_data0
   897                           
   898                           ; Initialize objects allocated to COMRAM (5 bytes)
   899                           ; load TBLPTR registers with __pidataCOMRAM
   900  0020C2  0E54               	movlw	low __pidataCOMRAM
   901  0020C4  6EF6               	movwf	tblptrl,c
   902  0020C6  0E2A               	movlw	high __pidataCOMRAM
   903  0020C8  6EF7               	movwf	tblptrh,c
   904  0020CA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   905  0020CC  6EF8               	movwf	tblptru,c
   906  0020CE  EE00  F07A         	lfsr	0,__pdataCOMRAM
   907  0020D2  EE10 F005          	lfsr	1,5
   908  0020D6                     copy_data1:
   909  0020D6  0009               	tblrd		*+
   910  0020D8  CFF5 FFEE          	movff	tablat,postinc0
   911  0020DC  50E5               	movf	postdec1,w,c
   912  0020DE  50E1               	movf	fsr1l,w,c
   913  0020E0  E1FA               	bnz	copy_data1
   914                           
   915                           ; Clear objects allocated to BANK1 (14 bytes)
   916  0020E2  EE01  F000         	lfsr	0,__pbssBANK1
   917  0020E6  0E0E               	movlw	14
   918  0020E8                     clear_0:
   919  0020E8  6AEE               	clrf	postinc0,c
   920  0020EA  06E8               	decf	wreg,f,c
   921  0020EC  E1FD               	bnz	clear_0
   922                           
   923                           ; Clear objects allocated to BANK0 (32 bytes)
   924  0020EE  EE00  F0D4         	lfsr	0,__pbssBANK0
   925  0020F2  0E20               	movlw	32
   926  0020F4                     clear_1:
   927  0020F4  6AEE               	clrf	postinc0,c
   928  0020F6  06E8               	decf	wreg,f,c
   929  0020F8  E1FD               	bnz	clear_1
   930                           
   931                           ; Clear objects allocated to COMRAM (31 bytes)
   932  0020FA  EE00  F05B         	lfsr	0,__pbssCOMRAM
   933  0020FE  0E1F               	movlw	31
   934  002100                     clear_2:
   935  002100  6AEE               	clrf	postinc0,c
   936  002102  06E8               	decf	wreg,f,c
   937  002104  E1FD               	bnz	clear_2
   938  002106                     end_of_initialization:
   939                           	opt stack 0
   940  002106                     __end_of__initialization:
   941                           	opt stack 0
   942  002106  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   943  002108  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   944  00210A  0100               	movlb	0
   945  00210C  EF55  F00F         	goto	_main	;jump to C main() function
   946                           tblptru	equ	0xFF8
   947                           tblptrh	equ	0xFF7
   948                           tblptrl	equ	0xFF6
   949                           tablat	equ	0xFF5
   950                           postinc0	equ	0xFEE
   951                           wreg	equ	0xFE8
   952                           postdec1	equ	0xFE5
   953                           fsr1l	equ	0xFE1
   954                           
   955                           	psect	bssCOMRAM
   956  00005B                     __pbssCOMRAM:
   957                           	opt stack 0
   958  00005B                     _UIenabled:
   959                           	opt stack 0
   960  00005B                     	ds	2
   961  00005D                     _back:
   962                           	opt stack 0
   963  00005D                     	ds	2
   964  00005F                     _count_can_no_lab:
   965                           	opt stack 0
   966  00005F                     	ds	2
   967  000061                     _count_pop_no_tab:
   968                           	opt stack 0
   969  000061                     	ds	2
   970  000063                     _count_pop_w_tab:
   971                           	opt stack 0
   972  000063                     	ds	2
   973  000065                     _down:
   974                           	opt stack 0
   975  000065                     	ds	2
   976  000067                     _enter:
   977                           	opt stack 0
   978  000067                     	ds	2
   979  000069                     _firstboot:
   980                           	opt stack 0
   981  000069                     	ds	2
   982  00006B                     _timer1highbits:
   983                           	opt stack 0
   984  00006B                     	ds	2
   985  00006D                     _timer1lowbits:
   986                           	opt stack 0
   987  00006D                     	ds	2
   988  00006F                     _timer3highbits:
   989                           	opt stack 0
   990  00006F                     	ds	2
   991  000071                     _timer3lowbits:
   992                           	opt stack 0
   993  000071                     	ds	2
   994  000073                     _up:
   995                           	opt stack 0
   996  000073                     	ds	2
   997  000075                     _was_low:
   998                           	opt stack 0
   999  000075                     	ds	2
  1000  000077                     _block:
  1001                           	opt stack 0
  1002  000077                     	ds	1
  1003  000078                     _canType:
  1004                           	opt stack 0
  1005  000078                     	ds	1
  1006  000079                     _input:
  1007                           	opt stack 0
  1008  000079                     	ds	1
  1009                           tblptru	equ	0xFF8
  1010                           tblptrh	equ	0xFF7
  1011                           tblptrl	equ	0xFF6
  1012                           tablat	equ	0xFF5
  1013                           postinc0	equ	0xFEE
  1014                           wreg	equ	0xFE8
  1015                           postdec1	equ	0xFE5
  1016                           fsr1l	equ	0xFE1
  1017                           
  1018                           	psect	dataCOMRAM
  1019  00007A                     __pdataCOMRAM:
  1020                           	opt stack 0
  1021  00007A                     _timer1_20ms_high:
  1022                           	opt stack 0
  1023  00007A                     	ds	2
  1024  00007C                     _timer1_20ms_low:
  1025                           	opt stack 0
  1026  00007C                     	ds	2
  1027  00007E                     _THMAG:
  1028                           	opt stack 0
  1029  00007E                     	ds	1
  1030                           tblptru	equ	0xFF8
  1031                           tblptrh	equ	0xFF7
  1032                           tblptrl	equ	0xFF6
  1033                           tablat	equ	0xFF5
  1034                           postinc0	equ	0xFEE
  1035                           wreg	equ	0xFE8
  1036                           postdec1	equ	0xFE5
  1037                           fsr1l	equ	0xFE1
  1038                           
  1039                           	psect	bssBANK0
  1040  0000D4                     __pbssBANK0:
  1041                           	opt stack 0
  1042  0000D4                     _time:
  1043                           	opt stack 0
  1044  0000D4                     	ds	7
  1045  0000DB                     _IR_signal:
  1046                           	opt stack 0
  1047  0000DB                     	ds	2
  1048  0000DD                     _count_can_w_lab:
  1049                           	opt stack 0
  1050  0000DD                     	ds	2
  1051  0000DF                     _count_total:
  1052                           	opt stack 0
  1053  0000DF                     	ds	2
  1054  0000E1                     _cur_state:
  1055                           	opt stack 0
  1056  0000E1                     	ds	2
  1057  0000E3                     _f_can_coming_to_ID:
  1058                           	opt stack 0
  1059  0000E3                     	ds	2
  1060  0000E5                     _f_can_coming_to_distribution:
  1061                           	opt stack 0
  1062  0000E5                     	ds	2
  1063  0000E7                     _f_can_distributed:
  1064                           	opt stack 0
  1065  0000E7                     	ds	2
  1066  0000E9                     _f_lastCan:
  1067                           	opt stack 0
  1068  0000E9                     	ds	2
  1069  0000EB                     _f_loadingNewCan:
  1070                           	opt stack 0
  1071  0000EB                     	ds	2
  1072  0000ED                     _log:
  1073                           	opt stack 0
  1074  0000ED                     	ds	2
  1075  0000EF                     _logstate:
  1076                           	opt stack 0
  1077  0000EF                     	ds	2
  1078  0000F1                     _total_time:
  1079                           	opt stack 0
  1080  0000F1                     	ds	2
  1081  0000F3                     _machine_state:
  1082                           	opt stack 0
  1083  0000F3                     	ds	1
  1084                           tblptru	equ	0xFF8
  1085                           tblptrh	equ	0xFF7
  1086                           tblptrl	equ	0xFF6
  1087                           tablat	equ	0xFF5
  1088                           postinc0	equ	0xFEE
  1089                           wreg	equ	0xFE8
  1090                           postdec1	equ	0xFE5
  1091                           fsr1l	equ	0xFE1
  1092                           
  1093                           	psect	dataBANK0
  1094  0000F4                     __pdataBANK0:
  1095                           	opt stack 0
  1096  0000F4                     printRTC@F3206:
  1097                           	opt stack 0
  1098  0000F4                     	ds	4
  1099  0000F8                     _f_ID_receive:
  1100                           	opt stack 0
  1101  0000F8                     	ds	2
  1102  0000FA                     _first:
  1103                           	opt stack 0
  1104  0000FA                     	ds	2
  1105  0000FC                     _THIR:
  1106                           	opt stack 0
  1107  0000FC                     	ds	1
  1108                           tblptru	equ	0xFF8
  1109                           tblptrh	equ	0xFF7
  1110                           tblptrl	equ	0xFF6
  1111                           tablat	equ	0xFF5
  1112                           postinc0	equ	0xFEE
  1113                           wreg	equ	0xFE8
  1114                           postdec1	equ	0xFE5
  1115                           fsr1l	equ	0xFE1
  1116                           
  1117                           	psect	bssBANK1
  1118  000100                     __pbssBANK1:
  1119                           	opt stack 0
  1120  000100                     _startTime:
  1121                           	opt stack 0
  1122  000100                     	ds	14
  1123                           tblptru	equ	0xFF8
  1124                           tblptrh	equ	0xFF7
  1125                           tblptrl	equ	0xFF6
  1126                           tablat	equ	0xFF5
  1127                           postinc0	equ	0xFEE
  1128                           wreg	equ	0xFE8
  1129                           postdec1	equ	0xFE5
  1130                           fsr1l	equ	0xFE1
  1131                           
  1132                           	psect	cstackBANK0
  1133  000080                     __pcstackBANK0:
  1134                           	opt stack 0
  1135  000080                     ??_isdigit:
  1136  000080                     ??_readADC:
  1137  000080                     ??_I2C_Master_Wait:
  1138  000080                     ?_MAGNETISM_in:
  1139                           	opt stack 0
  1140  000080                     ?___wmul:
  1141                           	opt stack 0
  1142  000080                     ?___awmod:
  1143                           	opt stack 0
  1144  000080                     ?___lwdiv:
  1145                           	opt stack 0
  1146  000080                     ?___lldiv:
  1147                           	opt stack 0
  1148  000080                     lcdNibble@temp:
  1149                           	opt stack 0
  1150  000080                     initTime@m:
  1151                           	opt stack 0
  1152  000080                     moveServoBlock@myPosition:
  1153                           	opt stack 0
  1154  000080                     moveServoCup@myPosition:
  1155                           	opt stack 0
  1156  000080                     ___wmul@multiplier:
  1157                           	opt stack 0
  1158  000080                     ___awmod@dividend:
  1159                           	opt stack 0
  1160  000080                     ___lwdiv@dividend:
  1161                           	opt stack 0
  1162  000080                     strcpy@to:
  1163                           	opt stack 0
  1164  000080                     ___lldiv@dividend:
  1165                           	opt stack 0
  1166                           
  1167                           ; 4 bytes @ 0x0
  1168  000080                     	ds	1
  1169  000081                     readADC@channel:
  1170                           	opt stack 0
  1171  000081                     I2C_Master_Read@a:
  1172                           	opt stack 0
  1173  000081                     lcdNibble@data:
  1174                           	opt stack 0
  1175  000081                     initTime@h:
  1176                           	opt stack 0
  1177  000081                     _isdigit$1808:
  1178                           	opt stack 0
  1179  000081                     I2C_Master_Write@d:
  1180                           	opt stack 0
  1181                           
  1182                           ; 2 bytes @ 0x1
  1183  000081                     	ds	1
  1184  000082                     ??_ID:
  1185  000082                     readIR@res:
  1186                           	opt stack 0
  1187  000082                     I2C_Master_Read@temp:
  1188                           	opt stack 0
  1189  000082                     lcdInst@data:
  1190                           	opt stack 0
  1191  000082                     putch@data:
  1192                           	opt stack 0
  1193  000082                     initTime@w:
  1194                           	opt stack 0
  1195  000082                     isdigit@c:
  1196                           	opt stack 0
  1197  000082                     ___wmul@multiplicand:
  1198                           	opt stack 0
  1199  000082                     ___awmod@divisor:
  1200                           	opt stack 0
  1201  000082                     ___lwdiv@divisor:
  1202                           	opt stack 0
  1203  000082                     strcpy@from:
  1204                           	opt stack 0
  1205                           
  1206                           ; 2 bytes @ 0x2
  1207  000082                     	ds	1
  1208  000083                     ??_initLCD:
  1209  000083                     initTime@DD:
  1210                           	opt stack 0
  1211  000083                     getRTC@i:
  1212                           	opt stack 0
  1213  000083                     ID@top_bottom_conductivity:
  1214                           	opt stack 0
  1215                           
  1216                           ; 2 bytes @ 0x3
  1217  000083                     	ds	1
  1218  000084                     initTime@MM:
  1219                           	opt stack 0
  1220  000084                     ___awmod@counter:
  1221                           	opt stack 0
  1222  000084                     ___wmul@product:
  1223                           	opt stack 0
  1224  000084                     ___lwdiv@quotient:
  1225                           	opt stack 0
  1226  000084                     strcpy@cp:
  1227                           	opt stack 0
  1228  000084                     ___lldiv@divisor:
  1229                           	opt stack 0
  1230                           
  1231                           ; 4 bytes @ 0x4
  1232  000084                     	ds	1
  1233  000085                     ??_initSortTimer:
  1234  000085                     initTime@YY:
  1235                           	opt stack 0
  1236  000085                     ___awmod@sign:
  1237                           	opt stack 0
  1238  000085                     ID@side_conductivity:
  1239                           	opt stack 0
  1240                           
  1241                           ; 2 bytes @ 0x5
  1242  000085                     	ds	1
  1243  000086                     ?___awdiv:
  1244                           	opt stack 0
  1245  000086                     initTime@s:
  1246                           	opt stack 0
  1247  000086                     ___lwdiv@counter:
  1248                           	opt stack 0
  1249  000086                     ___awdiv@dividend:
  1250                           	opt stack 0
  1251                           
  1252                           ; 2 bytes @ 0x6
  1253  000086                     	ds	1
  1254  000087                     ?___lwmod:
  1255                           	opt stack 0
  1256  000087                     ID@magnetic:
  1257                           	opt stack 0
  1258  000087                     ___lwmod@dividend:
  1259                           	opt stack 0
  1260                           
  1261                           ; 2 bytes @ 0x7
  1262  000087                     	ds	1
  1263  000088                     initSortTimer@i:
  1264                           	opt stack 0
  1265  000088                     ___awdiv@divisor:
  1266                           	opt stack 0
  1267  000088                     ___lldiv@quotient:
  1268                           	opt stack 0
  1269                           
  1270                           ; 4 bytes @ 0x8
  1271  000088                     	ds	1
  1272  000089                     ___lwmod@divisor:
  1273                           	opt stack 0
  1274                           
  1275                           ; 2 bytes @ 0x9
  1276  000089                     	ds	1
  1277  00008A                     ??_Loading:
  1278  00008A                     ___awdiv@counter:
  1279                           	opt stack 0
  1280                           
  1281                           ; 1 bytes @ 0xA
  1282  00008A                     	ds	1
  1283  00008B                     ___awdiv@sign:
  1284                           	opt stack 0
  1285  00008B                     ___lwmod@counter:
  1286                           	opt stack 0
  1287                           
  1288                           ; 1 bytes @ 0xB
  1289  00008B                     	ds	1
  1290  00008C                     ___lldiv@counter:
  1291                           	opt stack 0
  1292  00008C                     ___awdiv@quotient:
  1293                           	opt stack 0
  1294                           
  1295                           ; 2 bytes @ 0xC
  1296  00008C                     	ds	1
  1297  00008D                     I2C_Master_Init@c:
  1298                           	opt stack 0
  1299                           
  1300                           ; 4 bytes @ 0xD
  1301  00008D                     	ds	1
  1302  00008E                     ?_printf:
  1303                           	opt stack 0
  1304  00008E                     printf@f:
  1305                           	opt stack 0
  1306                           
  1307                           ; 2 bytes @ 0xE
  1308  00008E                     	ds	3
  1309  000091                     ??_I2C_Master_Init:
  1310                           
  1311                           ; 1 bytes @ 0x11
  1312  000091                     	ds	4
  1313  000095                     ??_loadRTC:
  1314                           
  1315                           ; 1 bytes @ 0x15
  1316  000095                     	ds	1
  1317  000096                     loadRTC@i:
  1318                           	opt stack 0
  1319                           
  1320                           ; 2 bytes @ 0x16
  1321  000096                     	ds	4
  1322  00009A                     ??_printf:
  1323                           
  1324                           ; 1 bytes @ 0x1A
  1325  00009A                     	ds	4
  1326  00009E                     printf@prec:
  1327                           	opt stack 0
  1328                           
  1329                           ; 1 bytes @ 0x1E
  1330  00009E                     	ds	1
  1331  00009F                     printf@ap:
  1332                           	opt stack 0
  1333                           
  1334                           ; 2 bytes @ 0x1F
  1335  00009F                     	ds	2
  1336  0000A1                     printf@cp:
  1337                           	opt stack 0
  1338                           
  1339                           ; 2 bytes @ 0x21
  1340  0000A1                     	ds	2
  1341  0000A3                     printf@val:
  1342                           	opt stack 0
  1343                           
  1344                           ; 2 bytes @ 0x23
  1345  0000A3                     	ds	2
  1346  0000A5                     printf@len:
  1347                           	opt stack 0
  1348                           
  1349                           ; 2 bytes @ 0x25
  1350  0000A5                     	ds	2
  1351  0000A7                     printf@flag:
  1352                           	opt stack 0
  1353                           
  1354                           ; 1 bytes @ 0x27
  1355  0000A7                     	ds	1
  1356  0000A8                     printf@c:
  1357                           	opt stack 0
  1358                           
  1359                           ; 1 bytes @ 0x28
  1360  0000A8                     	ds	1
  1361  0000A9                     printf@width:
  1362                           	opt stack 0
  1363                           
  1364                           ; 2 bytes @ 0x29
  1365  0000A9                     	ds	2
  1366  0000AB                     ??_printRTC:
  1367                           
  1368                           ; 1 bytes @ 0x2B
  1369  0000AB                     	ds	3
  1370  0000AE                     printRTC@INT_time:
  1371                           	opt stack 0
  1372                           
  1373                           ; 14 bytes @ 0x2E
  1374  0000AE                     	ds	14
  1375  0000BC                     printRTC@RTC_month:
  1376                           	opt stack 0
  1377                           
  1378                           ; 2 bytes @ 0x3C
  1379  0000BC                     	ds	2
  1380  0000BE                     printRTC@month:
  1381                           	opt stack 0
  1382                           
  1383                           ; 4 bytes @ 0x3E
  1384  0000BE                     	ds	4
  1385  0000C2                     printRTC@i:
  1386                           	opt stack 0
  1387                           
  1388                           ; 2 bytes @ 0x42
  1389  0000C2                     	ds	2
  1390  0000C4                     ??_UI:
  1391                           
  1392                           ; 1 bytes @ 0x44
  1393  0000C4                     	ds	1
  1394  0000C5                     _UI$2167:
  1395                           	opt stack 0
  1396                           
  1397                           ; 2 bytes @ 0x45
  1398  0000C5                     	ds	2
  1399  0000C7                     UI@i:
  1400                           	opt stack 0
  1401                           
  1402                           ; 1 bytes @ 0x47
  1403  0000C7                     	ds	1
  1404  0000C8                     UI@i_683:
  1405                           	opt stack 0
  1406                           
  1407                           ; 1 bytes @ 0x48
  1408  0000C8                     	ds	1
  1409  0000C9                     UI@i_684:
  1410                           	opt stack 0
  1411                           
  1412                           ; 1 bytes @ 0x49
  1413  0000C9                     	ds	1
  1414  0000CA                     UI@i_687:
  1415                           	opt stack 0
  1416                           
  1417                           ; 1 bytes @ 0x4A
  1418  0000CA                     	ds	1
  1419  0000CB                     UI@i_688:
  1420                           	opt stack 0
  1421                           
  1422                           ; 1 bytes @ 0x4B
  1423  0000CB                     	ds	1
  1424  0000CC                     UI@i_691:
  1425                           	opt stack 0
  1426                           
  1427                           ; 1 bytes @ 0x4C
  1428  0000CC                     	ds	1
  1429  0000CD                     UI@i_692:
  1430                           	opt stack 0
  1431                           
  1432                           ; 1 bytes @ 0x4D
  1433  0000CD                     	ds	1
  1434  0000CE                     UI@i_695:
  1435                           	opt stack 0
  1436                           
  1437                           ; 1 bytes @ 0x4E
  1438  0000CE                     	ds	1
  1439  0000CF                     UI@i_696:
  1440                           	opt stack 0
  1441                           
  1442                           ; 1 bytes @ 0x4F
  1443  0000CF                     	ds	1
  1444  0000D0                     UI@i_699:
  1445                           	opt stack 0
  1446                           
  1447                           ; 1 bytes @ 0x50
  1448  0000D0                     	ds	1
  1449  0000D1                     UI@i_700:
  1450                           	opt stack 0
  1451                           
  1452                           ; 1 bytes @ 0x51
  1453  0000D1                     	ds	1
  1454  0000D2                     UI@i_703:
  1455                           	opt stack 0
  1456                           
  1457                           ; 1 bytes @ 0x52
  1458  0000D2                     	ds	1
  1459  0000D3                     UI@i_704:
  1460                           	opt stack 0
  1461                           
  1462                           ; 1 bytes @ 0x53
  1463  0000D3                     	ds	1
  1464  0000D4                     tblptru	equ	0xFF8
  1465                           tblptrh	equ	0xFF7
  1466                           tblptrl	equ	0xFF6
  1467                           tablat	equ	0xFF5
  1468                           postinc0	equ	0xFEE
  1469                           wreg	equ	0xFE8
  1470                           postdec1	equ	0xFE5
  1471                           fsr1l	equ	0xFE1
  1472                           
  1473                           ; 1 bytes @ 0x54
  1474                           
  1475                           	psect	cstackCOMRAM
  1476  000001                     __pcstackCOMRAM:
  1477                           	opt stack 0
  1478  000001                     ??i2_I2C_Master_Wait:
  1479  000001                     ??i2_isdigit:
  1480  000001                     ?i2___wmul:
  1481                           	opt stack 0
  1482  000001                     ?i2___lwmod:
  1483                           	opt stack 0
  1484  000001                     i2lcdNibble@temp:
  1485                           	opt stack 0
  1486  000001                     dispLogs@myLog:
  1487                           	opt stack 0
  1488  000001                     i2___wmul@multiplier:
  1489                           	opt stack 0
  1490  000001                     i2___lwmod@dividend:
  1491                           	opt stack 0
  1492  000001                     i2strcpy@to:
  1493                           	opt stack 0
  1494                           
  1495                           ; 2 bytes @ 0x0
  1496  000001                     	ds	1
  1497  000002                     i2I2C_Master_Read@a:
  1498                           	opt stack 0
  1499  000002                     i2lcdNibble@data:
  1500                           	opt stack 0
  1501  000002                     i2_isdigit$1808:
  1502                           	opt stack 0
  1503  000002                     i2I2C_Master_Write@d:
  1504                           	opt stack 0
  1505                           
  1506                           ; 2 bytes @ 0x1
  1507  000002                     	ds	1
  1508  000003                     i2I2C_Master_Read@temp:
  1509                           	opt stack 0
  1510  000003                     i2lcdInst@data:
  1511                           	opt stack 0
  1512  000003                     i2putch@data:
  1513                           	opt stack 0
  1514  000003                     i2isdigit@c:
  1515                           	opt stack 0
  1516  000003                     i2___wmul@multiplicand:
  1517                           	opt stack 0
  1518  000003                     i2___lwmod@divisor:
  1519                           	opt stack 0
  1520  000003                     i2strcpy@from:
  1521                           	opt stack 0
  1522                           
  1523                           ; 2 bytes @ 0x2
  1524  000003                     	ds	1
  1525  000004                     i2getRTC@i:
  1526                           	opt stack 0
  1527                           
  1528                           ; 2 bytes @ 0x3
  1529  000004                     	ds	1
  1530  000005                     i2___lwmod@counter:
  1531                           	opt stack 0
  1532  000005                     i2___wmul@product:
  1533                           	opt stack 0
  1534  000005                     i2strcpy@cp:
  1535                           	opt stack 0
  1536                           
  1537                           ; 2 bytes @ 0x4
  1538  000005                     	ds	1
  1539  000006                     ?i2___lwdiv:
  1540                           	opt stack 0
  1541  000006                     i2___lwdiv@dividend:
  1542                           	opt stack 0
  1543                           
  1544                           ; 2 bytes @ 0x5
  1545  000006                     	ds	2
  1546  000008                     i2___lwdiv@divisor:
  1547                           	opt stack 0
  1548                           
  1549                           ; 2 bytes @ 0x7
  1550  000008                     	ds	2
  1551  00000A                     i2___lwdiv@quotient:
  1552                           	opt stack 0
  1553                           
  1554                           ; 2 bytes @ 0x9
  1555  00000A                     	ds	2
  1556  00000C                     i2___lwdiv@counter:
  1557                           	opt stack 0
  1558                           
  1559                           ; 1 bytes @ 0xB
  1560  00000C                     	ds	1
  1561  00000D                     ?i2_printf:
  1562                           	opt stack 0
  1563  00000D                     i2printf@f:
  1564                           	opt stack 0
  1565                           
  1566                           ; 2 bytes @ 0xC
  1567  00000D                     	ds	12
  1568  000019                     ??i2_printf:
  1569                           
  1570                           ; 1 bytes @ 0x18
  1571  000019                     	ds	4
  1572  00001D                     i2printf@prec:
  1573                           	opt stack 0
  1574                           
  1575                           ; 1 bytes @ 0x1C
  1576  00001D                     	ds	1
  1577  00001E                     i2printf@ap:
  1578                           	opt stack 0
  1579                           
  1580                           ; 2 bytes @ 0x1D
  1581  00001E                     	ds	2
  1582  000020                     i2printf@cp:
  1583                           	opt stack 0
  1584                           
  1585                           ; 2 bytes @ 0x1F
  1586  000020                     	ds	2
  1587  000022                     i2printf@val:
  1588                           	opt stack 0
  1589                           
  1590                           ; 2 bytes @ 0x21
  1591  000022                     	ds	2
  1592  000024                     i2printf@len:
  1593                           	opt stack 0
  1594                           
  1595                           ; 2 bytes @ 0x23
  1596  000024                     	ds	2
  1597  000026                     i2printf@flag:
  1598                           	opt stack 0
  1599                           
  1600                           ; 1 bytes @ 0x25
  1601  000026                     	ds	1
  1602  000027                     i2printf@c:
  1603                           	opt stack 0
  1604                           
  1605                           ; 1 bytes @ 0x26
  1606  000027                     	ds	1
  1607  000028                     i2printf@width:
  1608                           	opt stack 0
  1609                           
  1610                           ; 2 bytes @ 0x27
  1611  000028                     	ds	2
  1612  00002A                     ??_printSortTimer:
  1613  00002A                     ??i2_printRTC:
  1614  00002A                     ?_inputHandler:
  1615                           	opt stack 0
  1616                           
  1617                           ; 2 bytes @ 0x29
  1618  00002A                     	ds	2
  1619  00002C                     ??_inputHandler:
  1620                           
  1621                           ; 1 bytes @ 0x2B
  1622  00002C                     	ds	1
  1623  00002D                     printSortTimer@curTime:
  1624                           	opt stack 0
  1625  00002D                     i2printRTC@INT_time:
  1626                           	opt stack 0
  1627                           
  1628                           ; 14 bytes @ 0x2C
  1629  00002D                     	ds	14
  1630  00003B                     printSortTimer@start_sec:
  1631                           	opt stack 0
  1632  00003B                     i2printRTC@RTC_month:
  1633                           	opt stack 0
  1634                           
  1635                           ; 2 bytes @ 0x3A
  1636  00003B                     	ds	2
  1637  00003D                     printSortTimer@cur_sec:
  1638                           	opt stack 0
  1639  00003D                     i2printRTC@month:
  1640                           	opt stack 0
  1641                           
  1642                           ; 4 bytes @ 0x3C
  1643  00003D                     	ds	2
  1644  00003F                     printSortTimer@hour:
  1645                           	opt stack 0
  1646                           
  1647                           ; 2 bytes @ 0x3E
  1648  00003F                     	ds	2
  1649  000041                     printSortTimer@min:
  1650                           	opt stack 0
  1651  000041                     i2printRTC@i:
  1652                           	opt stack 0
  1653                           
  1654                           ; 2 bytes @ 0x40
  1655  000041                     	ds	2
  1656  000043                     ??_updateMenu:
  1657  000043                     printSortTimer@sec:
  1658                           	opt stack 0
  1659                           
  1660                           ; 2 bytes @ 0x42
  1661  000043                     	ds	2
  1662  000045                     _printSortTimer$2282:
  1663                           	opt stack 0
  1664                           
  1665                           ; 2 bytes @ 0x44
  1666  000045                     	ds	2
  1667  000047                     printSortTimer@timeDiff:
  1668                           	opt stack 0
  1669                           
  1670                           ; 2 bytes @ 0x46
  1671  000047                     	ds	2
  1672  000049                     printSortTimer@i:
  1673                           	opt stack 0
  1674                           
  1675                           ; 2 bytes @ 0x48
  1676  000049                     	ds	2
  1677  00004B                     ??_handler:
  1678                           
  1679                           ; 1 bytes @ 0x4A
  1680  00004B                     	ds	16
  1681                           tblptru	equ	0xFF8
  1682                           tblptrh	equ	0xFF7
  1683                           tblptrl	equ	0xFF6
  1684                           tablat	equ	0xFF5
  1685                           postinc0	equ	0xFEE
  1686                           wreg	equ	0xFE8
  1687                           postdec1	equ	0xFE5
  1688                           fsr1l	equ	0xFE1
  1689                           
  1690 ;;
  1691 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1692 ;;
  1693 ;; *************** function _main *****************
  1694 ;; Defined at:
  1695 ;;		line 16 in file "main.c"
  1696 ;; Parameters:    Size  Location     Type
  1697 ;;		None
  1698 ;; Auto vars:     Size  Location     Type
  1699 ;;		None
  1700 ;; Return value:  Size  Location     Type
  1701 ;;                  1    wreg      void 
  1702 ;; Registers used:
  1703 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1704 ;; Tracked objects:
  1705 ;;		On entry : 0/0
  1706 ;;		On exit  : 0/0
  1707 ;;		Unchanged: 0/0
  1708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1713 ;;Total ram usage:        0 bytes
  1714 ;; Hardware stack levels required when called:   13
  1715 ;; This function calls:
  1716 ;;		_PortTestA5
  1717 ;;		_UI
  1718 ;;		_initLCD
  1719 ;;		_initTime
  1720 ;;		_initUI
  1721 ;;		_machineConfig
  1722 ;;		_sort
  1723 ;;		_stopSignals
  1724 ;; This function is called by:
  1725 ;;		Startup code after reset
  1726 ;; This function uses a non-reentrant model
  1727 ;;
  1728                           
  1729                           	psect	text0
  1730  001EAA                     __ptext0:
  1731                           	opt stack 0
  1732  001EAA                     _main:
  1733                           	opt stack 18
  1734                           
  1735                           ;main.c: 17: machineConfig();
  1736                           
  1737                           ;incstack = 0
  1738  001EAA  EC1D  F011         	call	_machineConfig	;wreg free
  1739                           
  1740                           ;main.c: 18: initLCD();
  1741  001EAE  ECC4  F011         	call	_initLCD	;wreg free
  1742                           
  1743                           ;main.c: 19: initTime(0x42, 0x32, 0x13, 0x04, 0x09, 0x02, 0x17);
  1744  001EB2  0E32               	movlw	50
  1745  001EB4  0100               	movlb	0	; () banked
  1746  001EB6  6F80               	movwf	initTime@m& (0+255),b
  1747  001EB8  0E13               	movlw	19
  1748  001EBA  0100               	movlb	0	; () banked
  1749  001EBC  6F81               	movwf	initTime@h& (0+255),b
  1750  001EBE  0E04               	movlw	4
  1751  001EC0  0100               	movlb	0	; () banked
  1752  001EC2  6F82               	movwf	initTime@w& (0+255),b
  1753  001EC4  0E09               	movlw	9
  1754  001EC6  0100               	movlb	0	; () banked
  1755  001EC8  6F83               	movwf	initTime@DD& (0+255),b
  1756  001ECA  0E02               	movlw	2
  1757  001ECC  0100               	movlb	0	; () banked
  1758  001ECE  6F84               	movwf	initTime@MM& (0+255),b
  1759  001ED0  0E17               	movlw	23
  1760  001ED2  0100               	movlb	0	; () banked
  1761  001ED4  6F85               	movwf	initTime@YY& (0+255),b
  1762  001ED6  0E42               	movlw	66
  1763  001ED8  EC8B  F014         	call	_initTime
  1764                           
  1765                           ;main.c: 20: initUI();
  1766  001EDC  ECAB  F014         	call	_initUI	;wreg free
  1767                           
  1768                           ;main.c: 24: switch(machine_state){
  1769                           
  1770                           ;main.c: 23: while(1){
  1771  001EE0  D016               	goto	l5874
  1772  001EE2                     l5858:
  1773                           
  1774                           ;main.c: 26: UI();
  1775  001EE2  EC09  F000         	call	_UI	;wreg free
  1776                           
  1777                           ;main.c: 27: break;
  1778  001EE6  D013               	goto	l5874
  1779  001EE8                     l5860:
  1780                           
  1781                           ;main.c: 29: sort();
  1782  001EE8  EC7A  F014         	call	_sort	;wreg free
  1783                           
  1784                           ;main.c: 30: break;
  1785  001EEC  D010               	goto	l5874
  1786  001EEE                     l5862:
  1787                           
  1788                           ;main.c: 32: stopSignals();
  1789  001EEE  ECB8  F014         	call	_stopSignals	;wreg free
  1790                           
  1791                           ;main.c: 33: first = 1;
  1792  001EF2  0E00               	movlw	0
  1793  001EF4  0100               	movlb	0	; () banked
  1794  001EF6  6FFB               	movwf	(_first+1)& (0+255),b
  1795  001EF8  0E01               	movlw	1
  1796  001EFA  6FFA               	movwf	_first& (0+255),b
  1797                           
  1798                           ; BSR set to: 0
  1799                           ;main.c: 34: UI();
  1800  001EFC  EC09  F000         	call	_UI	;wreg free
  1801                           
  1802                           ;main.c: 35: break;
  1803  001F00  D006               	goto	l5874
  1804  001F02                     l5868:
  1805                           
  1806                           ;main.c: 37: PortTestA5();
  1807  001F02  ECD7  F014         	call	_PortTestA5	;wreg free
  1808                           
  1809                           ;main.c: 38: break;
  1810  001F06  D003               	goto	l5874
  1811  001F08                     l5870:
  1812                           
  1813                           ;main.c: 40: stopSignals();
  1814  001F08  ECB8  F014         	call	_stopSignals	;wreg free
  1815  001F0C                     l807:
  1816  001F0C  D7FF               	goto	l807
  1817  001F0E                     l5874:
  1818  001F0E  0100               	movlb	0	; () banked
  1819  001F10  51F3               	movf	_machine_state& (0+255),w,b
  1820                           
  1821                           ; Switch size 1, requested type "space"
  1822                           ; Number of cases is 5, Range of values is 0 to 4
  1823                           ; switch strategies available:
  1824                           ; Name         Instructions Cycles
  1825                           ; simple_byte           16     9 (average)
  1826                           ;	Chosen strategy is simple_byte
  1827  001F12  0A00               	xorlw	0	; case 0
  1828  001F14  B4D8               	btfsc	status,2,c
  1829  001F16  D7E5               	goto	l5858
  1830  001F18  0A01               	xorlw	1	; case 1
  1831  001F1A  B4D8               	btfsc	status,2,c
  1832  001F1C  D7E5               	goto	l5860
  1833  001F1E  0A03               	xorlw	3	; case 2
  1834  001F20  B4D8               	btfsc	status,2,c
  1835  001F22  D7E5               	goto	l5862
  1836  001F24  0A01               	xorlw	1	; case 3
  1837  001F26  B4D8               	btfsc	status,2,c
  1838  001F28  D7EC               	goto	l5868
  1839  001F2A  0A07               	xorlw	7	; case 4
  1840  001F2C  B4D8               	btfsc	status,2,c
  1841  001F2E  D7EC               	goto	l5870
  1842                           
  1843                           ; BSR set to: 0
  1844                           
  1845                           ; BSR set to: 0
  1846  001F30  D7EE               	goto	l5874
  1847  001F32                     __end_of_main:
  1848                           	opt stack 0
  1849                           tblptru	equ	0xFF8
  1850                           tblptrh	equ	0xFF7
  1851                           tblptrl	equ	0xFF6
  1852                           tablat	equ	0xFF5
  1853                           postinc0	equ	0xFEE
  1854                           wreg	equ	0xFE8
  1855                           postdec1	equ	0xFE5
  1856                           fsr1l	equ	0xFE1
  1857                           status	equ	0xFD8
  1858                           
  1859 ;; *************** function _stopSignals *****************
  1860 ;; Defined at:
  1861 ;;		line 49 in file "main.c"
  1862 ;; Parameters:    Size  Location     Type
  1863 ;;		None
  1864 ;; Auto vars:     Size  Location     Type
  1865 ;;		None
  1866 ;; Return value:  Size  Location     Type
  1867 ;;                  1    wreg      void 
  1868 ;; Registers used:
  1869 ;;		wreg, status,2
  1870 ;; Tracked objects:
  1871 ;;		On entry : 0/0
  1872 ;;		On exit  : 0/0
  1873 ;;		Unchanged: 0/0
  1874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1878 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1879 ;;Total ram usage:        0 bytes
  1880 ;; Hardware stack levels used:    1
  1881 ;; Hardware stack levels required when called:    7
  1882 ;; This function calls:
  1883 ;;		Nothing
  1884 ;; This function is called by:
  1885 ;;		_main
  1886 ;; This function uses a non-reentrant model
  1887 ;;
  1888                           
  1889                           	psect	text1
  1890  002970                     __ptext1:
  1891                           	opt stack 0
  1892  002970                     _stopSignals:
  1893                           	opt stack 23
  1894                           
  1895                           ;main.c: 50: LATA = 0x00;
  1896                           
  1897                           ; BSR set to: 0
  1898                           ;incstack = 0
  1899  002970  0E00               	movlw	0
  1900  002972  6E89               	movwf	3977,c	;volatile
  1901                           
  1902                           ;main.c: 51: LATB = 0x00;
  1903  002974  0E00               	movlw	0
  1904  002976  6E8A               	movwf	3978,c	;volatile
  1905                           
  1906                           ;main.c: 52: LATC = 0x00;
  1907  002978  0E00               	movlw	0
  1908  00297A  6E8B               	movwf	3979,c	;volatile
  1909                           
  1910                           ;main.c: 53: LATD = 0x00;
  1911  00297C  0E00               	movlw	0
  1912  00297E  6E8C               	movwf	3980,c	;volatile
  1913                           
  1914                           ;main.c: 54: LATE = 0x00;
  1915  002980  0E00               	movlw	0
  1916  002982  6E8D               	movwf	3981,c	;volatile
  1917  002984  0012               	return		;funcret
  1918  002986                     __end_of_stopSignals:
  1919                           	opt stack 0
  1920                           tblptru	equ	0xFF8
  1921                           tblptrh	equ	0xFF7
  1922                           tblptrl	equ	0xFF6
  1923                           tablat	equ	0xFF5
  1924                           postinc0	equ	0xFEE
  1925                           wreg	equ	0xFE8
  1926                           postdec1	equ	0xFE5
  1927                           fsr1l	equ	0xFE1
  1928                           status	equ	0xFD8
  1929                           
  1930 ;; *************** function _sort *****************
  1931 ;; Defined at:
  1932 ;;		line 14 in file "sort.c"
  1933 ;; Parameters:    Size  Location     Type
  1934 ;;		None
  1935 ;; Auto vars:     Size  Location     Type
  1936 ;;		None
  1937 ;; Return value:  Size  Location     Type
  1938 ;;                  1    wreg      void 
  1939 ;; Registers used:
  1940 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1941 ;; Tracked objects:
  1942 ;;		On entry : 0/0
  1943 ;;		On exit  : 0/0
  1944 ;;		Unchanged: 0/0
  1945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1949 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1950 ;;Total ram usage:        0 bytes
  1951 ;; Hardware stack levels used:    1
  1952 ;; Hardware stack levels required when called:   12
  1953 ;; This function calls:
  1954 ;;		_Distribution
  1955 ;;		_ID
  1956 ;;		_Loading
  1957 ;; This function is called by:
  1958 ;;		_main
  1959 ;; This function uses a non-reentrant model
  1960 ;;
  1961                           
  1962                           	psect	text2
  1963  0028F4                     __ptext2:
  1964                           	opt stack 0
  1965  0028F4                     _sort:
  1966                           	opt stack 18
  1967                           
  1968                           ;sort.c: 15: if(machine_state == Sorting_state){
  1969                           
  1970                           ;incstack = 0
  1971  0028F4  0100               	movlb	0	; () banked
  1972  0028F6  05F3               	decf	_machine_state& (0+255),w,b
  1973  0028F8  B4D8               	btfsc	status,2,c
  1974                           
  1975                           ; BSR set to: 0
  1976                           ;sort.c: 16: Loading();
  1977  0028FA  EC24  F00E         	call	_Loading	;wreg free
  1978                           
  1979                           ;sort.c: 17: }
  1980                           ;sort.c: 18: if(machine_state == Sorting_state){
  1981  0028FE  0100               	movlb	0	; () banked
  1982  002900  05F3               	decf	_machine_state& (0+255),w,b
  1983  002902  B4D8               	btfsc	status,2,c
  1984                           
  1985                           ; BSR set to: 0
  1986                           ;sort.c: 19: ID();
  1987  002904  ECD0  F00D         	call	_ID	;wreg free
  1988                           
  1989                           ;sort.c: 20: }
  1990                           ;sort.c: 21: if(machine_state == Sorting_state){
  1991  002908  0100               	movlb	0	; () banked
  1992  00290A  05F3               	decf	_machine_state& (0+255),w,b
  1993  00290C  A4D8               	btfss	status,2,c
  1994  00290E  0012               	return	
  1995                           
  1996                           ; BSR set to: 0
  1997                           ;sort.c: 22: Distribution();
  1998  002910  ECA8  F013         	call	_Distribution	;wreg free
  1999  002914  0012               	return	
  2000  002916                     __end_of_sort:
  2001                           	opt stack 0
  2002                           tblptru	equ	0xFF8
  2003                           tblptrh	equ	0xFF7
  2004                           tblptrl	equ	0xFF6
  2005                           tablat	equ	0xFF5
  2006                           postinc0	equ	0xFEE
  2007                           wreg	equ	0xFE8
  2008                           postdec1	equ	0xFE5
  2009                           fsr1l	equ	0xFE1
  2010                           status	equ	0xFD8
  2011                           
  2012 ;; *************** function _Loading *****************
  2013 ;; Defined at:
  2014 ;;		line 26 in file "sort.c"
  2015 ;; Parameters:    Size  Location     Type
  2016 ;;		None
  2017 ;; Auto vars:     Size  Location     Type
  2018 ;;		None
  2019 ;; Return value:  Size  Location     Type
  2020 ;;                  1    wreg      void 
  2021 ;; Registers used:
  2022 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2023 ;; Tracked objects:
  2024 ;;		On entry : 0/0
  2025 ;;		On exit  : 0/0
  2026 ;;		Unchanged: 0/0
  2027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2030 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2031 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2032 ;;Total ram usage:        1 bytes
  2033 ;; Hardware stack levels used:    1
  2034 ;; Hardware stack levels required when called:   11
  2035 ;; This function calls:
  2036 ;;		_getIR
  2037 ;;		_initFlags
  2038 ;;		_initSortTimer
  2039 ;;		_lcdInst
  2040 ;;		_moveServoCup
  2041 ;; This function is called by:
  2042 ;;		_sort
  2043 ;; This function uses a non-reentrant model
  2044 ;;
  2045                           
  2046                           	psect	text3
  2047  001C48                     __ptext3:
  2048                           	opt stack 0
  2049  001C48                     _Loading:
  2050                           	opt stack 18
  2051                           
  2052                           ;sort.c: 27: if(first){
  2053                           
  2054                           ;incstack = 0
  2055  001C48  0100               	movlb	0	; () banked
  2056  001C4A  51FA               	movf	_first& (0+255),w,b
  2057  001C4C  0100               	movlb	0	; () banked
  2058  001C4E  11FB               	iorwf	(_first+1)& (0+255),w,b
  2059  001C50  B4D8               	btfsc	status,2,c
  2060  001C52  D01A               	goto	l5120
  2061                           
  2062                           ; BSR set to: 0
  2063                           ;sort.c: 28: first = 0;
  2064  001C54  0E00               	movlw	0
  2065  001C56  0100               	movlb	0	; () banked
  2066  001C58  6FFB               	movwf	(_first+1)& (0+255),b
  2067  001C5A  0E00               	movlw	0
  2068  001C5C  6FFA               	movwf	_first& (0+255),b
  2069                           
  2070                           ; BSR set to: 0
  2071                           ;sort.c: 29: initFlags();
  2072  001C5E  EC2A  F012         	call	_initFlags	;wreg free
  2073                           
  2074                           ;sort.c: 30: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  2075  001C62  0E01               	movlw	1
  2076  001C64  ECF1  F014         	call	_lcdInst
  2077  001C68  0E68               	movlw	104
  2078  001C6A  0100               	movlb	0	; () banked
  2079  001C6C  6F8A               	movwf	??_Loading& (0+255),b
  2080  001C6E  0EE4               	movlw	228
  2081  001C70                     u4717:
  2082  001C70  2EE8               	decfsz	wreg,f,c
  2083  001C72  D7FE               	bra	u4717
  2084  001C74  2F8A               	decfsz	??_Loading& (0+255),f,b
  2085  001C76  D7FC               	bra	u4717
  2086  001C78  F000               	nop	
  2087                           
  2088                           ;sort.c: 31: initSortTimer();
  2089  001C7A  EC7B  F00D         	call	_initSortTimer	;wreg free
  2090                           
  2091                           ;sort.c: 34: LATAbits.LATA5 = 1;
  2092  001C7E  8A89               	bsf	3977,5,c	;volatile
  2093                           
  2094                           ;sort.c: 37: moveServoCup(Home);
  2095  001C80  0E00               	movlw	0
  2096  001C82  ECC6  F00E         	call	_moveServoCup
  2097                           
  2098                           ;sort.c: 39: }
  2099  001C86  0012               	return	
  2100  001C88                     l5120:
  2101                           
  2102                           ;sort.c: 40: else{
  2103                           ;sort.c: 43: if(!f_loadingNewCan){
  2104  001C88  0100               	movlb	0	; () banked
  2105  001C8A  51EB               	movf	_f_loadingNewCan& (0+255),w,b
  2106  001C8C  0100               	movlb	0	; () banked
  2107  001C8E  11EC               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2108  001C90  A4D8               	btfss	status,2,c
  2109  001C92  D018               	goto	l5136
  2110                           
  2111                           ; BSR set to: 0
  2112                           ;sort.c: 45: getIR();
  2113  001C94  ECE7  F011         	call	_getIR	;wreg free
  2114                           
  2115                           ;sort.c: 47: if(!f_loadingNewCan){
  2116  001C98  0100               	movlb	0	; () banked
  2117  001C9A  51EB               	movf	_f_loadingNewCan& (0+255),w,b
  2118  001C9C  0100               	movlb	0	; () banked
  2119  001C9E  11EC               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2120  001CA0  B4D8               	btfsc	status,2,c
  2121  001CA2  0012               	return	
  2122                           
  2123                           ; BSR set to: 0
  2124                           ;sort.c: 51: else{
  2125                           ;sort.c: 52: count_total++;
  2126                           
  2127                           ; BSR set to: 0
  2128                           
  2129                           ; BSR set to: 0
  2130                           ;sort.c: 49: }
  2131                           
  2132                           ; BSR set to: 0
  2133                           ;sort.c: 48: return;
  2134  001CA4  0100               	movlb	0	; () banked
  2135  001CA6  4BDF               	infsnz	_count_total& (0+255),f,b
  2136  001CA8  2BE0               	incf	(_count_total+1)& (0+255),f,b
  2137                           
  2138                           ; BSR set to: 0
  2139                           ;sort.c: 53: if(count_total == 12){
  2140  001CAA  0E0C               	movlw	12
  2141  001CAC  0100               	movlb	0	; () banked
  2142  001CAE  19DF               	xorwf	_count_total& (0+255),w,b
  2143  001CB0  0100               	movlb	0	; () banked
  2144  001CB2  11E0               	iorwf	(_count_total+1)& (0+255),w,b
  2145  001CB4  A4D8               	btfss	status,2,c
  2146  001CB6  0012               	return	
  2147                           
  2148                           ; BSR set to: 0
  2149                           ;sort.c: 54: f_lastCan = 1;
  2150  001CB8  0E00               	movlw	0
  2151  001CBA  0100               	movlb	0	; () banked
  2152  001CBC  6FEA               	movwf	(_f_lastCan+1)& (0+255),b
  2153  001CBE  0E01               	movlw	1
  2154  001CC0  6FE9               	movwf	_f_lastCan& (0+255),b
  2155                           
  2156                           ; BSR set to: 0
  2157                           ;sort.c: 55: }
  2158                           ;sort.c: 56: }
  2159                           ;sort.c: 57: }
  2160                           
  2161                           ; BSR set to: 0
  2162  001CC2  0012               	return	
  2163  001CC4                     l5136:
  2164                           
  2165                           ; BSR set to: 0
  2166                           ;sort.c: 60: else if(f_ID_receive){
  2167  001CC4  0100               	movlb	0	; () banked
  2168  001CC6  51F8               	movf	_f_ID_receive& (0+255),w,b
  2169  001CC8  0100               	movlb	0	; () banked
  2170  001CCA  11F9               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  2171  001CCC  B4D8               	btfsc	status,2,c
  2172  001CCE  0012               	return	
  2173                           
  2174                           ; BSR set to: 0
  2175                           ;sort.c: 61: f_loadingNewCan = 0;
  2176  001CD0  0E00               	movlw	0
  2177  001CD2  0100               	movlb	0	; () banked
  2178  001CD4  6FEC               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2179  001CD6  0E00               	movlw	0
  2180  001CD8  6FEB               	movwf	_f_loadingNewCan& (0+255),b
  2181                           
  2182                           ; BSR set to: 0
  2183                           ;sort.c: 62: LATAbits.LATA4 = 1;
  2184  001CDA  8889               	bsf	3977,4,c	;volatile
  2185                           
  2186                           ;sort.c: 63: f_can_coming_to_ID = 1;
  2187  001CDC  0E00               	movlw	0
  2188  001CDE  0100               	movlb	0	; () banked
  2189  001CE0  6FE4               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2190  001CE2  0E01               	movlw	1
  2191  001CE4  6FE3               	movwf	_f_can_coming_to_ID& (0+255),b
  2192                           
  2193                           ; BSR set to: 0
  2194                           ;sort.c: 66: LATAbits.LATA4 = 0;
  2195  001CE6  9889               	bcf	3977,4,c	;volatile
  2196                           
  2197                           ; BSR set to: 0
  2198                           
  2199                           ; BSR set to: 0
  2200  001CE8  0012               	return	
  2201  001CEA                     __end_of_Loading:
  2202                           	opt stack 0
  2203                           tblptru	equ	0xFF8
  2204                           tblptrh	equ	0xFF7
  2205                           tblptrl	equ	0xFF6
  2206                           tablat	equ	0xFF5
  2207                           postinc0	equ	0xFEE
  2208                           wreg	equ	0xFE8
  2209                           postdec1	equ	0xFE5
  2210                           fsr1l	equ	0xFE1
  2211                           status	equ	0xFD8
  2212                           
  2213 ;; *************** function _initSortTimer *****************
  2214 ;; Defined at:
  2215 ;;		line 118 in file "sort.c"
  2216 ;; Parameters:    Size  Location     Type
  2217 ;;		None
  2218 ;; Auto vars:     Size  Location     Type
  2219 ;;  i               2    8[BANK0 ] int 
  2220 ;; Return value:  Size  Location     Type
  2221 ;;                  1    wreg      void 
  2222 ;; Registers used:
  2223 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2224 ;; Tracked objects:
  2225 ;;		On entry : 0/0
  2226 ;;		On exit  : 0/0
  2227 ;;		Unchanged: 0/0
  2228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2230 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2231 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2232 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2233 ;;Total ram usage:        5 bytes
  2234 ;; Hardware stack levels used:    1
  2235 ;; Hardware stack levels required when called:   10
  2236 ;; This function calls:
  2237 ;;		_getRTC
  2238 ;; This function is called by:
  2239 ;;		_Loading
  2240 ;; This function uses a non-reentrant model
  2241 ;;
  2242                           
  2243                           	psect	text4
  2244  001AF6                     __ptext4:
  2245                           	opt stack 0
  2246  001AF6                     _initSortTimer:
  2247                           	opt stack 18
  2248                           
  2249                           ;sort.c: 120: getRTC();
  2250                           
  2251                           ;incstack = 0
  2252  001AF6  EC99  F00F         	call	_getRTC	;wreg free
  2253                           
  2254                           ;sort.c: 121: for(int i = 0; i < 7; i++){
  2255  001AFA  0E00               	movlw	0
  2256  001AFC  0100               	movlb	0	; () banked
  2257  001AFE  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  2258  001B00  0E00               	movlw	0
  2259  001B02  6F88               	movwf	initSortTimer@i& (0+255),b
  2260  001B04                     l4774:
  2261                           
  2262                           ; BSR set to: 0
  2263  001B04  0100               	movlb	0	; () banked
  2264  001B06  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  2265  001B08  D008               	goto	l4778
  2266  001B0A  0100               	movlb	0	; () banked
  2267  001B0C  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  2268  001B0E  E140               	bnz	l4784
  2269  001B10  0E07               	movlw	7
  2270  001B12  0100               	movlb	0	; () banked
  2271  001B14  5D88               	subwf	initSortTimer@i& (0+255),w,b
  2272  001B16  B0D8               	btfsc	status,0,c
  2273  001B18  D03B               	goto	l4784
  2274  001B1A                     l4778:
  2275                           
  2276                           ; BSR set to: 0
  2277                           ;sort.c: 122: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  2278  001B1A  0ED4               	movlw	low _time
  2279  001B1C  0100               	movlb	0	; () banked
  2280  001B1E  2588               	addwf	initSortTimer@i& (0+255),w,b
  2281  001B20  6ED9               	movwf	fsr2l,c
  2282  001B22  0E00               	movlw	high _time
  2283  001B24  0100               	movlb	0	; () banked
  2284  001B26  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2285  001B28  6EDA               	movwf	fsr2h,c
  2286  001B2A  50DF               	movf	indf2,w,c
  2287  001B2C  0100               	movlb	0	; () banked
  2288  001B2E  6F85               	movwf	??_initSortTimer& (0+255),b
  2289  001B30  0100               	movlb	0	; () banked
  2290  001B32  3B85               	swapf	??_initSortTimer& (0+255),f,b
  2291  001B34  0E0F               	movlw	15
  2292  001B36  1785               	andwf	??_initSortTimer& (0+255),f,b
  2293  001B38  0E0F               	movlw	15
  2294  001B3A  0100               	movlb	0	; () banked
  2295  001B3C  1785               	andwf	??_initSortTimer& (0+255),f,b
  2296  001B3E  0100               	movlb	0	; () banked
  2297  001B40  5185               	movf	??_initSortTimer& (0+255),w,b
  2298  001B42  0D0A               	mullw	10
  2299  001B44  0ED4               	movlw	low _time
  2300  001B46  0100               	movlb	0	; () banked
  2301  001B48  2588               	addwf	initSortTimer@i& (0+255),w,b
  2302  001B4A  6ED9               	movwf	fsr2l,c
  2303  001B4C  0E00               	movlw	high _time
  2304  001B4E  0100               	movlb	0	; () banked
  2305  001B50  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2306  001B52  6EDA               	movwf	fsr2h,c
  2307  001B54  50DF               	movf	indf2,w,c
  2308  001B56  0B0F               	andlw	15
  2309  001B58  0100               	movlb	0	; () banked
  2310  001B5A  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  2311  001B5C  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  2312  001B5E  50F3               	movf	prodl,w,c
  2313  001B60  0100               	movlb	0	; () banked
  2314  001B62  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  2315  001B64  50F4               	movf	prodh,w,c
  2316  001B66  0100               	movlb	0	; () banked
  2317  001B68  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  2318  001B6A  90D8               	bcf	status,0,c
  2319  001B6C  0100               	movlb	0	; () banked
  2320  001B6E  3588               	rlcf	initSortTimer@i& (0+255),w,b
  2321  001B70  6ED9               	movwf	fsr2l,c
  2322  001B72  0100               	movlb	0	; () banked
  2323  001B74  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  2324  001B76  6EDA               	movwf	fsr2h,c
  2325  001B78  0E00               	movlw	low _startTime
  2326  001B7A  26D9               	addwf	fsr2l,f,c
  2327  001B7C  0E01               	movlw	high _startTime
  2328  001B7E  22DA               	addwfc	fsr2h,f,c
  2329  001B80  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  2330  001B84  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  2331                           
  2332                           ; BSR set to: 0
  2333  001B88  0100               	movlb	0	; () banked
  2334  001B8A  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  2335  001B8C  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  2336  001B8E  D7BA               	goto	l4774
  2337  001B90                     l4784:
  2338                           
  2339                           ; BSR set to: 0
  2340                           ;sort.c: 123: }
  2341                           ;sort.c: 125: T0CON = 0b00010111;
  2342  001B90  0E17               	movlw	23
  2343  001B92  6ED5               	movwf	4053,c	;volatile
  2344                           
  2345                           ;sort.c: 134: TMR0H = 0b10000101;
  2346  001B94  0E85               	movlw	133
  2347  001B96  6ED7               	movwf	4055,c	;volatile
  2348                           
  2349                           ;sort.c: 135: TMR0L = 0b11101110;
  2350  001B98  0EEE               	movlw	238
  2351  001B9A  6ED6               	movwf	4054,c	;volatile
  2352                           
  2353                           ; BSR set to: 0
  2354                           ;sort.c: 136: TMR0ON = 1;
  2355  001B9C  8ED5               	bsf	4053,7,c	;volatile
  2356                           
  2357                           ; BSR set to: 0
  2358  001B9E  0012               	return		;funcret
  2359  001BA0                     __end_of_initSortTimer:
  2360                           	opt stack 0
  2361                           tblptru	equ	0xFF8
  2362                           tblptrh	equ	0xFF7
  2363                           tblptrl	equ	0xFF6
  2364                           tablat	equ	0xFF5
  2365                           prodh	equ	0xFF4
  2366                           prodl	equ	0xFF3
  2367                           postinc0	equ	0xFEE
  2368                           wreg	equ	0xFE8
  2369                           postdec1	equ	0xFE5
  2370                           fsr1l	equ	0xFE1
  2371                           indf2	equ	0xFDF
  2372                           postinc2	equ	0xFDE
  2373                           postdec2	equ	0xFDD
  2374                           fsr2h	equ	0xFDA
  2375                           fsr2l	equ	0xFD9
  2376                           status	equ	0xFD8
  2377                           
  2378 ;; *************** function _initFlags *****************
  2379 ;; Defined at:
  2380 ;;		line 110 in file "sort.c"
  2381 ;; Parameters:    Size  Location     Type
  2382 ;;		None
  2383 ;; Auto vars:     Size  Location     Type
  2384 ;;		None
  2385 ;; Return value:  Size  Location     Type
  2386 ;;                  1    wreg      void 
  2387 ;; Registers used:
  2388 ;;		wreg, status,2
  2389 ;; Tracked objects:
  2390 ;;		On entry : 0/0
  2391 ;;		On exit  : 0/0
  2392 ;;		Unchanged: 0/0
  2393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2398 ;;Total ram usage:        0 bytes
  2399 ;; Hardware stack levels used:    1
  2400 ;; Hardware stack levels required when called:    7
  2401 ;; This function calls:
  2402 ;;		Nothing
  2403 ;; This function is called by:
  2404 ;;		_Loading
  2405 ;; This function uses a non-reentrant model
  2406 ;;
  2407                           
  2408                           	psect	text5
  2409  002454                     __ptext5:
  2410                           	opt stack 0
  2411  002454                     _initFlags:
  2412                           	opt stack 21
  2413                           
  2414                           ;sort.c: 111: f_loadingNewCan = 0;
  2415                           
  2416                           ; BSR set to: 0
  2417                           ;incstack = 0
  2418  002454  0E00               	movlw	0
  2419  002456  0100               	movlb	0	; () banked
  2420  002458  6FEC               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2421  00245A  0E00               	movlw	0
  2422  00245C  6FEB               	movwf	_f_loadingNewCan& (0+255),b
  2423                           
  2424                           ;sort.c: 112: f_lastCan = 0;
  2425  00245E  0E00               	movlw	0
  2426  002460  0100               	movlb	0	; () banked
  2427  002462  6FEA               	movwf	(_f_lastCan+1)& (0+255),b
  2428  002464  0E00               	movlw	0
  2429  002466  6FE9               	movwf	_f_lastCan& (0+255),b
  2430                           
  2431                           ;sort.c: 113: f_ID_receive = 1;
  2432  002468  0E00               	movlw	0
  2433  00246A  0100               	movlb	0	; () banked
  2434  00246C  6FF9               	movwf	(_f_ID_receive+1)& (0+255),b
  2435  00246E  0E01               	movlw	1
  2436  002470  6FF8               	movwf	_f_ID_receive& (0+255),b
  2437                           
  2438                           ;sort.c: 114: f_can_coming_to_ID = 0;
  2439  002472  0E00               	movlw	0
  2440  002474  0100               	movlb	0	; () banked
  2441  002476  6FE4               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2442  002478  0E00               	movlw	0
  2443  00247A  6FE3               	movwf	_f_can_coming_to_ID& (0+255),b
  2444                           
  2445                           ;sort.c: 115: f_can_coming_to_distribution = 0;
  2446  00247C  0E00               	movlw	0
  2447  00247E  0100               	movlb	0	; () banked
  2448  002480  6FE6               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  2449  002482  0E00               	movlw	0
  2450  002484  6FE5               	movwf	_f_can_coming_to_distribution& (0+255),b
  2451                           
  2452                           ;sort.c: 116: f_can_distributed = 0;
  2453  002486  0E00               	movlw	0
  2454  002488  0100               	movlb	0	; () banked
  2455  00248A  6FE8               	movwf	(_f_can_distributed+1)& (0+255),b
  2456  00248C  0E00               	movlw	0
  2457  00248E  6FE7               	movwf	_f_can_distributed& (0+255),b
  2458                           
  2459                           ; BSR set to: 0
  2460  002490  0012               	return		;funcret
  2461  002492                     __end_of_initFlags:
  2462                           	opt stack 0
  2463                           tblptru	equ	0xFF8
  2464                           tblptrh	equ	0xFF7
  2465                           tblptrl	equ	0xFF6
  2466                           tablat	equ	0xFF5
  2467                           prodh	equ	0xFF4
  2468                           prodl	equ	0xFF3
  2469                           postinc0	equ	0xFEE
  2470                           wreg	equ	0xFE8
  2471                           postdec1	equ	0xFE5
  2472                           fsr1l	equ	0xFE1
  2473                           indf2	equ	0xFDF
  2474                           postinc2	equ	0xFDE
  2475                           postdec2	equ	0xFDD
  2476                           fsr2h	equ	0xFDA
  2477                           fsr2l	equ	0xFD9
  2478                           status	equ	0xFD8
  2479                           
  2480 ;; *************** function _getIR *****************
  2481 ;; Defined at:
  2482 ;;		line 165 in file "sort.c"
  2483 ;; Parameters:    Size  Location     Type
  2484 ;;		None
  2485 ;; Auto vars:     Size  Location     Type
  2486 ;;		None
  2487 ;; Return value:  Size  Location     Type
  2488 ;;                  1    wreg      void 
  2489 ;; Registers used:
  2490 ;;		wreg, status,2, status,0, cstack
  2491 ;; Tracked objects:
  2492 ;;		On entry : 0/0
  2493 ;;		On exit  : 0/0
  2494 ;;		Unchanged: 0/0
  2495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2500 ;;Total ram usage:        0 bytes
  2501 ;; Hardware stack levels used:    1
  2502 ;; Hardware stack levels required when called:    9
  2503 ;; This function calls:
  2504 ;;		_readIR
  2505 ;; This function is called by:
  2506 ;;		_Loading
  2507 ;; This function uses a non-reentrant model
  2508 ;;
  2509                           
  2510                           	psect	text6
  2511  0023CE                     __ptext6:
  2512                           	opt stack 0
  2513  0023CE                     _getIR:
  2514                           	opt stack 19
  2515                           
  2516                           ;sort.c: 166: readIR();
  2517                           
  2518                           ; BSR set to: 0
  2519                           ;incstack = 0
  2520  0023CE  EC68  F014         	call	_readIR	;wreg free
  2521                           
  2522                           ;sort.c: 167: if(IR_signal==1){
  2523  0023D2  0100               	movlb	0	; () banked
  2524  0023D4  05DB               	decf	_IR_signal& (0+255),w,b
  2525  0023D6  0100               	movlb	0	; () banked
  2526  0023D8  11DC               	iorwf	(_IR_signal+1)& (0+255),w,b
  2527  0023DA  A4D8               	btfss	status,2,c
  2528  0023DC  D004               	goto	l4816
  2529                           
  2530                           ; BSR set to: 0
  2531                           ;sort.c: 168: T2CON = 0b01111011;
  2532  0023DE  0E7B               	movlw	123
  2533  0023E0  6ECA               	movwf	4042,c	;volatile
  2534                           
  2535                           ; BSR set to: 0
  2536                           ;sort.c: 169: PR2 = 0xFF;
  2537  0023E2  68CB               	setf	4043,c	;volatile
  2538                           
  2539                           ; BSR set to: 0
  2540                           ;sort.c: 170: TMR2ON = 1;
  2541  0023E4  84CA               	bsf	4042,2,c	;volatile
  2542  0023E6                     l4816:
  2543                           
  2544                           ; BSR set to: 0
  2545  0023E6  0100               	movlb	0	; () banked
  2546  0023E8  51DB               	movf	_IR_signal& (0+255),w,b
  2547  0023EA  0100               	movlb	0	; () banked
  2548  0023EC  11DC               	iorwf	(_IR_signal+1)& (0+255),w,b
  2549  0023EE  A4D8               	btfss	status,2,c
  2550                           
  2551                           ; BSR set to: 0
  2552  0023F0  A29E               	btfss	3998,1,c	;volatile
  2553  0023F2  D001               	goto	l1232
  2554  0023F4  D7F8               	goto	l4816
  2555  0023F6                     l1232:
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;sort.c: 174: }
  2559                           ;sort.c: 176: if(TMR2IF==1){
  2560  0023F6  A29E               	btfss	3998,1,c	;volatile
  2561  0023F8  D006               	goto	l4822
  2562                           
  2563                           ; BSR set to: 0
  2564                           ;sort.c: 177: f_loadingNewCan = 1;
  2565  0023FA  0E00               	movlw	0
  2566  0023FC  0100               	movlb	0	; () banked
  2567  0023FE  6FEC               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2568  002400  0E01               	movlw	1
  2569  002402  6FEB               	movwf	_f_loadingNewCan& (0+255),b
  2570                           
  2571                           ;sort.c: 178: }
  2572  002404  0012               	return	
  2573  002406                     l4822:
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;sort.c: 179: else{
  2577                           ;sort.c: 180: f_loadingNewCan = 0;
  2578  002406  0E00               	movlw	0
  2579  002408  0100               	movlb	0	; () banked
  2580  00240A  6FEC               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2581  00240C  0E00               	movlw	0
  2582  00240E  6FEB               	movwf	_f_loadingNewCan& (0+255),b
  2583  002410  0012               	return	
  2584  002412                     __end_of_getIR:
  2585                           	opt stack 0
  2586                           tblptru	equ	0xFF8
  2587                           tblptrh	equ	0xFF7
  2588                           tblptrl	equ	0xFF6
  2589                           tablat	equ	0xFF5
  2590                           prodh	equ	0xFF4
  2591                           prodl	equ	0xFF3
  2592                           postinc0	equ	0xFEE
  2593                           wreg	equ	0xFE8
  2594                           postdec1	equ	0xFE5
  2595                           fsr1l	equ	0xFE1
  2596                           indf2	equ	0xFDF
  2597                           postinc2	equ	0xFDE
  2598                           postdec2	equ	0xFDD
  2599                           fsr2h	equ	0xFDA
  2600                           fsr2l	equ	0xFD9
  2601                           status	equ	0xFD8
  2602                           
  2603 ;; *************** function _readIR *****************
  2604 ;; Defined at:
  2605 ;;		line 22 in file "ADCFunctionality.c"
  2606 ;; Parameters:    Size  Location     Type
  2607 ;;		None
  2608 ;; Auto vars:     Size  Location     Type
  2609 ;;  res             1    2[BANK0 ] unsigned char 
  2610 ;; Return value:  Size  Location     Type
  2611 ;;                  1    wreg      void 
  2612 ;; Registers used:
  2613 ;;		wreg, status,2, status,0, cstack
  2614 ;; Tracked objects:
  2615 ;;		On entry : 0/0
  2616 ;;		On exit  : 0/0
  2617 ;;		Unchanged: 0/0
  2618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2620 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2622 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2623 ;;Total ram usage:        1 bytes
  2624 ;; Hardware stack levels used:    1
  2625 ;; Hardware stack levels required when called:    8
  2626 ;; This function calls:
  2627 ;;		_readADC
  2628 ;; This function is called by:
  2629 ;;		_getIR
  2630 ;; This function uses a non-reentrant model
  2631 ;;
  2632                           
  2633                           	psect	text7
  2634  0028D0                     __ptext7:
  2635                           	opt stack 0
  2636  0028D0                     _readIR:
  2637                           	opt stack 19
  2638                           
  2639                           ;ADCFunctionality.c: 23: readADC(0);
  2640                           
  2641                           ; BSR set to: 0
  2642                           ;incstack = 0
  2643  0028D0  0E00               	movlw	0
  2644  0028D2  ECED  F013         	call	_readADC
  2645                           
  2646                           ;ADCFunctionality.c: 24: unsigned char res = ADRESH<<8 | ADRESL;
  2647  0028D6  CFC3 F082          	movff	4035,readIR@res	;volatile
  2648                           
  2649                           ;ADCFunctionality.c: 25: IR_signal = (res > THIR) ? 1 : 0;
  2650  0028DA  0100               	movlb	0	; () banked
  2651  0028DC  5182               	movf	readIR@res& (0+255),w,b
  2652  0028DE  0100               	movlb	0	; () banked
  2653  0028E0  5DFC               	subwf	_THIR& (0+255),w,b
  2654  0028E2  B0D8               	btfsc	status,0,c
  2655  0028E4  D002               	goto	u2620
  2656  0028E6  0E01               	movlw	1
  2657  0028E8  D001               	goto	u2630
  2658  0028EA                     u2620:
  2659  0028EA  0E00               	movlw	0
  2660  0028EC                     u2630:
  2661  0028EC  0100               	movlb	0	; () banked
  2662  0028EE  6FDB               	movwf	_IR_signal& (0+255),b
  2663  0028F0  6BDC               	clrf	(_IR_signal+1)& (0+255),b
  2664                           
  2665                           ; BSR set to: 0
  2666  0028F2  0012               	return		;funcret
  2667  0028F4                     __end_of_readIR:
  2668                           	opt stack 0
  2669                           tblptru	equ	0xFF8
  2670                           tblptrh	equ	0xFF7
  2671                           tblptrl	equ	0xFF6
  2672                           tablat	equ	0xFF5
  2673                           prodh	equ	0xFF4
  2674                           prodl	equ	0xFF3
  2675                           postinc0	equ	0xFEE
  2676                           wreg	equ	0xFE8
  2677                           postdec1	equ	0xFE5
  2678                           fsr1l	equ	0xFE1
  2679                           indf2	equ	0xFDF
  2680                           postinc2	equ	0xFDE
  2681                           postdec2	equ	0xFDD
  2682                           fsr2h	equ	0xFDA
  2683                           fsr2l	equ	0xFD9
  2684                           status	equ	0xFD8
  2685                           
  2686 ;; *************** function _readADC *****************
  2687 ;; Defined at:
  2688 ;;		line 14 in file "ADCFunctionality.c"
  2689 ;; Parameters:    Size  Location     Type
  2690 ;;  channel         1    wreg     unsigned char 
  2691 ;; Auto vars:     Size  Location     Type
  2692 ;;  channel         1    1[BANK0 ] unsigned char 
  2693 ;; Return value:  Size  Location     Type
  2694 ;;                  1    wreg      void 
  2695 ;; Registers used:
  2696 ;;		wreg, status,2, status,0, cstack
  2697 ;; Tracked objects:
  2698 ;;		On entry : 0/0
  2699 ;;		On exit  : 0/0
  2700 ;;		Unchanged: 0/0
  2701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2703 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2704 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2705 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2706 ;;Total ram usage:        2 bytes
  2707 ;; Hardware stack levels used:    1
  2708 ;; Hardware stack levels required when called:    7
  2709 ;; This function calls:
  2710 ;;		Nothing
  2711 ;; This function is called by:
  2712 ;;		_readIR
  2713 ;;		_readMAG
  2714 ;; This function uses a non-reentrant model
  2715 ;;
  2716                           
  2717                           	psect	text8
  2718  0027DA                     __ptext8:
  2719                           	opt stack 0
  2720  0027DA                     _readADC:
  2721                           	opt stack 19
  2722                           
  2723                           ; BSR set to: 0
  2724                           ;incstack = 0
  2725                           ;readADC@channel stored from wreg
  2726  0027DA  0100               	movlb	0	; () banked
  2727  0027DC  6F81               	movwf	readADC@channel& (0+255),b
  2728                           
  2729                           ;ADCFunctionality.c: 16: ADCON0 = ((channel <<2));
  2730  0027DE  0100               	movlb	0	; () banked
  2731  0027E0  4581               	rlncf	readADC@channel& (0+255),w,b
  2732  0027E2  46E8               	rlncf	wreg,f,c
  2733  0027E4  0BFC               	andlw	252
  2734  0027E6  6EC2               	movwf	4034,c	;volatile
  2735                           
  2736                           ; BSR set to: 0
  2737                           ;ADCFunctionality.c: 17: ADON = 1;
  2738  0027E8  80C2               	bsf	4034,0,c	;volatile
  2739                           
  2740                           ; BSR set to: 0
  2741                           ;ADCFunctionality.c: 18: ADCON0bits.GO = 1;
  2742  0027EA  82C2               	bsf	4034,1,c	;volatile
  2743                           
  2744                           ;ADCFunctionality.c: 19: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
  2745  0027EC  D009               	goto	l4118
  2746  0027EE                     l4116:
  2747  0027EE  0E34               	movlw	52
  2748  0027F0  0100               	movlb	0	; () banked
  2749  0027F2  6F80               	movwf	??_readADC& (0+255),b
  2750  0027F4  0EF1               	movlw	241
  2751  0027F6                     u4727:
  2752  0027F6  2EE8               	decfsz	wreg,f,c
  2753  0027F8  D7FE               	bra	u4727
  2754  0027FA  2F80               	decfsz	??_readADC& (0+255),f,b
  2755  0027FC  D7FC               	bra	u4727
  2756  0027FE  D000               	nop2	
  2757  002800                     l4118:
  2758  002800  A2C2               	btfss	4034,1,c	;volatile
  2759  002802  0012               	return	
  2760  002804  D7F4               	goto	l4116
  2761  002806                     __end_of_readADC:
  2762                           	opt stack 0
  2763                           tblptru	equ	0xFF8
  2764                           tblptrh	equ	0xFF7
  2765                           tblptrl	equ	0xFF6
  2766                           tablat	equ	0xFF5
  2767                           prodh	equ	0xFF4
  2768                           prodl	equ	0xFF3
  2769                           postinc0	equ	0xFEE
  2770                           wreg	equ	0xFE8
  2771                           postdec1	equ	0xFE5
  2772                           fsr1l	equ	0xFE1
  2773                           indf2	equ	0xFDF
  2774                           postinc2	equ	0xFDE
  2775                           postdec2	equ	0xFDD
  2776                           fsr2h	equ	0xFDA
  2777                           fsr2l	equ	0xFD9
  2778                           status	equ	0xFD8
  2779                           
  2780 ;; *************** function _ID *****************
  2781 ;; Defined at:
  2782 ;;		line 70 in file "sort.c"
  2783 ;; Parameters:    Size  Location     Type
  2784 ;;		None
  2785 ;; Auto vars:     Size  Location     Type
  2786 ;;  magnetic        2    7[BANK0 ] int 
  2787 ;;  side_conduct    2    5[BANK0 ] int 
  2788 ;;  top_bottom_c    2    3[BANK0 ] int 
  2789 ;; Return value:  Size  Location     Type
  2790 ;;                  1    wreg      void 
  2791 ;; Registers used:
  2792 ;;		wreg, status,2, status,0, cstack
  2793 ;; Tracked objects:
  2794 ;;		On entry : 0/0
  2795 ;;		On exit  : 0/0
  2796 ;;		Unchanged: 0/0
  2797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2799 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2800 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2801 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2802 ;;Total ram usage:        7 bytes
  2803 ;; Hardware stack levels used:    1
  2804 ;; Hardware stack levels required when called:    8
  2805 ;; This function calls:
  2806 ;;		_MAGNETISM_in
  2807 ;;		_moveServoBlock
  2808 ;; This function is called by:
  2809 ;;		_sort
  2810 ;; This function uses a non-reentrant model
  2811 ;;
  2812                           
  2813                           	psect	text9
  2814  001BA0                     __ptext9:
  2815                           	opt stack 0
  2816  001BA0                     _ID:
  2817                           	opt stack 21
  2818                           
  2819                           ;sort.c: 71: if(f_can_coming_to_ID){
  2820                           
  2821                           ;incstack = 0
  2822  001BA0  0100               	movlb	0	; () banked
  2823  001BA2  51E3               	movf	_f_can_coming_to_ID& (0+255),w,b
  2824  001BA4  0100               	movlb	0	; () banked
  2825  001BA6  11E4               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  2826  001BA8  B4D8               	btfsc	status,2,c
  2827  001BAA  0012               	return	
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;sort.c: 76: int side_conductivity = 0;
  2831  001BAC  0E00               	movlw	0
  2832  001BAE  0100               	movlb	0	; () banked
  2833  001BB0  6F86               	movwf	(ID@side_conductivity+1)& (0+255),b
  2834  001BB2  0E00               	movlw	0
  2835  001BB4  6F85               	movwf	ID@side_conductivity& (0+255),b
  2836                           
  2837                           ;sort.c: 77: int magnetic = 0;
  2838  001BB6  0E00               	movlw	0
  2839  001BB8  0100               	movlb	0	; () banked
  2840  001BBA  6F88               	movwf	(ID@magnetic+1)& (0+255),b
  2841  001BBC  0E00               	movlw	0
  2842  001BBE  6F87               	movwf	ID@magnetic& (0+255),b
  2843                           
  2844                           ;sort.c: 78: int top_bottom_conductivity = 0;
  2845  001BC0  0E00               	movlw	0
  2846  001BC2  0100               	movlb	0	; () banked
  2847  001BC4  6F84               	movwf	(ID@top_bottom_conductivity+1)& (0+255),b
  2848  001BC6  0E00               	movlw	0
  2849  001BC8  6F83               	movwf	ID@top_bottom_conductivity& (0+255),b
  2850                           
  2851                           ;sort.c: 80: side_conductivity = PORTAbits.RA2;
  2852  001BCA  A480               	btfss	3968,2,c	;volatile
  2853  001BCC  D004               	goto	u3550
  2854  001BCE  0100               	movlb	0	; () banked
  2855  001BD0  6B82               	clrf	??_ID& (0+255),b
  2856  001BD2  2B82               	incf	??_ID& (0+255),f,b
  2857  001BD4  D002               	goto	u3558
  2858  001BD6                     u3550:
  2859  001BD6  0100               	movlb	0	; () banked
  2860  001BD8  6B82               	clrf	??_ID& (0+255),b
  2861  001BDA                     u3558:
  2862  001BDA  0100               	movlb	0	; () banked
  2863  001BDC  5182               	movf	??_ID& (0+255),w,b
  2864  001BDE  0100               	movlb	0	; () banked
  2865  001BE0  6F85               	movwf	ID@side_conductivity& (0+255),b
  2866  001BE2  6B86               	clrf	(ID@side_conductivity+1)& (0+255),b
  2867                           
  2868                           ; BSR set to: 0
  2869                           ;sort.c: 81: if(!side_conductivity){
  2870  001BE4  0100               	movlb	0	; () banked
  2871  001BE6  5185               	movf	ID@side_conductivity& (0+255),w,b
  2872  001BE8  0100               	movlb	0	; () banked
  2873  001BEA  1186               	iorwf	(ID@side_conductivity+1)& (0+255),w,b
  2874  001BEC  A4D8               	btfss	status,2,c
  2875  001BEE  D01B               	goto	l5160
  2876                           
  2877                           ; BSR set to: 0
  2878                           ;sort.c: 82: magnetic = MAGNETISM_in();
  2879  001BF0  ECF9  F014         	call	_MAGNETISM_in	;wreg free
  2880  001BF4  C080  F087         	movff	?_MAGNETISM_in,ID@magnetic
  2881  001BF8  C081  F088         	movff	?_MAGNETISM_in+1,ID@magnetic+1
  2882                           
  2883                           ;sort.c: 83: if(!magnetic){
  2884  001BFC  0100               	movlb	0	; () banked
  2885  001BFE  5187               	movf	ID@magnetic& (0+255),w,b
  2886  001C00  0100               	movlb	0	; () banked
  2887  001C02  1188               	iorwf	(ID@magnetic+1)& (0+255),w,b
  2888  001C04  A4D8               	btfss	status,2,c
  2889  001C06  D00F               	goto	l5160
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;sort.c: 84: LATAbits.LATA3 = 1;
  2893  001C08  8689               	bsf	3977,3,c	;volatile
  2894                           
  2895                           ; BSR set to: 0
  2896                           ;sort.c: 86: top_bottom_conductivity = PORTAbits.RA2;
  2897  001C0A  A480               	btfss	3968,2,c	;volatile
  2898  001C0C  D004               	goto	u3580
  2899  001C0E  0100               	movlb	0	; () banked
  2900  001C10  6B82               	clrf	??_ID& (0+255),b
  2901  001C12  2B82               	incf	??_ID& (0+255),f,b
  2902  001C14  D002               	goto	u3588
  2903  001C16                     u3580:
  2904  001C16  0100               	movlb	0	; () banked
  2905  001C18  6B82               	clrf	??_ID& (0+255),b
  2906  001C1A                     u3588:
  2907  001C1A  0100               	movlb	0	; () banked
  2908  001C1C  5182               	movf	??_ID& (0+255),w,b
  2909  001C1E  0100               	movlb	0	; () banked
  2910  001C20  6F83               	movwf	ID@top_bottom_conductivity& (0+255),b
  2911  001C22  6B84               	clrf	(ID@top_bottom_conductivity+1)& (0+255),b
  2912                           
  2913                           ; BSR set to: 0
  2914                           ;sort.c: 87: LATAbits.LATA3 = 0;
  2915  001C24  9689               	bcf	3977,3,c	;volatile
  2916  001C26                     l5160:
  2917                           
  2918                           ; BSR set to: 0
  2919                           ;sort.c: 88: }
  2920                           ;sort.c: 89: }
  2921                           ;sort.c: 92: moveServoBlock(Lower);
  2922  001C26  0E01               	movlw	1
  2923  001C28  EC9C  F011         	call	_moveServoBlock
  2924                           
  2925                           ;sort.c: 94: f_can_coming_to_distribution = 1;
  2926  001C2C  0E00               	movlw	0
  2927  001C2E  0100               	movlb	0	; () banked
  2928  001C30  6FE6               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  2929  001C32  0E01               	movlw	1
  2930  001C34  6FE5               	movwf	_f_can_coming_to_distribution& (0+255),b
  2931                           
  2932                           ;sort.c: 95: moveServoBlock(Raise);
  2933  001C36  0E00               	movlw	0
  2934  001C38  EC9C  F011         	call	_moveServoBlock
  2935                           
  2936                           ;sort.c: 96: f_can_coming_to_ID = 0;
  2937  001C3C  0E00               	movlw	0
  2938  001C3E  0100               	movlb	0	; () banked
  2939  001C40  6FE4               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2940  001C42  0E00               	movlw	0
  2941  001C44  6FE3               	movwf	_f_can_coming_to_ID& (0+255),b
  2942  001C46  0012               	return	
  2943  001C48                     __end_of_ID:
  2944                           	opt stack 0
  2945                           tblptru	equ	0xFF8
  2946                           tblptrh	equ	0xFF7
  2947                           tblptrl	equ	0xFF6
  2948                           tablat	equ	0xFF5
  2949                           prodh	equ	0xFF4
  2950                           prodl	equ	0xFF3
  2951                           postinc0	equ	0xFEE
  2952                           wreg	equ	0xFE8
  2953                           postdec1	equ	0xFE5
  2954                           fsr1l	equ	0xFE1
  2955                           indf2	equ	0xFDF
  2956                           postinc2	equ	0xFDE
  2957                           postdec2	equ	0xFDD
  2958                           fsr2h	equ	0xFDA
  2959                           fsr2l	equ	0xFD9
  2960                           status	equ	0xFD8
  2961                           
  2962 ;; *************** function _moveServoBlock *****************
  2963 ;; Defined at:
  2964 ;;		line 188 in file "sort.c"
  2965 ;; Parameters:    Size  Location     Type
  2966 ;;  myPosition      1    wreg     enum E3138
  2967 ;; Auto vars:     Size  Location     Type
  2968 ;;  myPosition      1    0[BANK0 ] enum E3138
  2969 ;; Return value:  Size  Location     Type
  2970 ;;                  1    wreg      void 
  2971 ;; Registers used:
  2972 ;;		wreg, status,2, status,0
  2973 ;; Tracked objects:
  2974 ;;		On entry : 0/0
  2975 ;;		On exit  : 0/0
  2976 ;;		Unchanged: 0/0
  2977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2979 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2981 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2982 ;;Total ram usage:        1 bytes
  2983 ;; Hardware stack levels used:    1
  2984 ;; Hardware stack levels required when called:    7
  2985 ;; This function calls:
  2986 ;;		Nothing
  2987 ;; This function is called by:
  2988 ;;		_ID
  2989 ;; This function uses a non-reentrant model
  2990 ;;
  2991                           
  2992                           	psect	text10
  2993  002338                     __ptext10:
  2994                           	opt stack 0
  2995  002338                     _moveServoBlock:
  2996                           	opt stack 21
  2997                           
  2998                           ; BSR set to: 0
  2999                           ;incstack = 0
  3000                           ;moveServoBlock@myPosition stored from wreg
  3001  002338  0100               	movlb	0	; () banked
  3002  00233A  6F80               	movwf	moveServoBlock@myPosition& (0+255),b
  3003                           
  3004                           ;sort.c: 190: T3CON = 0b10110000;
  3005  00233C  0EB0               	movlw	176
  3006  00233E  6EB1               	movwf	4017,c	;volatile
  3007                           
  3008                           ;sort.c: 191: switch(myPosition){
  3009  002340  D011               	goto	l4836
  3010  002342                     l4830:
  3011                           
  3012                           ;sort.c: 194: timer3highbits = 0b11111000;
  3013  002342  0E00               	movlw	0
  3014  002344  6E70               	movwf	_timer3highbits+1,c
  3015  002346  0EF8               	movlw	248
  3016  002348  6E6F               	movwf	_timer3highbits,c
  3017                           
  3018                           ;sort.c: 195: timer3lowbits = 0b00110000;
  3019  00234A  0E00               	movlw	0
  3020  00234C  6E72               	movwf	_timer3lowbits+1,c
  3021  00234E  0E30               	movlw	48
  3022  002350  D007               	goto	L1
  3023  002352                     l4832:
  3024                           
  3025                           ;sort.c: 199: timer3highbits = 0b11111100;
  3026  002352  0E00               	movlw	0
  3027  002354  6E70               	movwf	_timer3highbits+1,c
  3028  002356  0EFC               	movlw	252
  3029  002358  6E6F               	movwf	_timer3highbits,c
  3030                           
  3031                           ;sort.c: 200: timer3lowbits = 0b00011000;
  3032  00235A  0E00               	movlw	0
  3033  00235C  6E72               	movwf	_timer3lowbits+1,c
  3034  00235E  0E18               	movlw	24
  3035  002360                     L1:
  3036  002360  6E71               	movwf	_timer3lowbits,c
  3037                           
  3038                           ;sort.c: 204: }
  3039                           
  3040                           ;sort.c: 203: break;
  3041                           
  3042                           ;sort.c: 202: default:
  3043                           
  3044                           ;sort.c: 201: break;
  3045  002362  D008               	goto	l1243
  3046  002364                     l4836:
  3047  002364  0100               	movlb	0	; () banked
  3048  002366  5180               	movf	moveServoBlock@myPosition& (0+255),w,b
  3049                           
  3050                           ; Switch size 1, requested type "space"
  3051                           ; Number of cases is 2, Range of values is 0 to 1
  3052                           ; switch strategies available:
  3053                           ; Name         Instructions Cycles
  3054                           ; simple_byte            7     4 (average)
  3055                           ;	Chosen strategy is simple_byte
  3056  002368  0A00               	xorlw	0	; case 0
  3057  00236A  B4D8               	btfsc	status,2,c
  3058  00236C  D7EA               	goto	l4830
  3059  00236E  0A01               	xorlw	1	; case 1
  3060  002370  B4D8               	btfsc	status,2,c
  3061  002372  D7EF               	goto	l4832
  3062  002374                     l1243:
  3063                           
  3064                           ;sort.c: 206: TMR3H = timer3highbits;
  3065  002374  C06F  FFB3         	movff	_timer3highbits,4019	;volatile
  3066                           
  3067                           ;sort.c: 207: TMR3L = timer3lowbits;
  3068  002378  C071  FFB2         	movff	_timer3lowbits,4018	;volatile
  3069                           
  3070                           ;sort.c: 208: TMR3ON = 1;
  3071  00237C  80B1               	bsf	4017,0,c	;volatile
  3072                           
  3073                           ;sort.c: 209: was_low = 0;
  3074  00237E  0E00               	movlw	0
  3075  002380  6E76               	movwf	_was_low+1,c
  3076  002382  0E00               	movlw	0
  3077  002384  6E75               	movwf	_was_low,c
  3078  002386  0012               	return		;funcret
  3079  002388                     __end_of_moveServoBlock:
  3080                           	opt stack 0
  3081                           tblptru	equ	0xFF8
  3082                           tblptrh	equ	0xFF7
  3083                           tblptrl	equ	0xFF6
  3084                           tablat	equ	0xFF5
  3085                           prodh	equ	0xFF4
  3086                           prodl	equ	0xFF3
  3087                           postinc0	equ	0xFEE
  3088                           wreg	equ	0xFE8
  3089                           postdec1	equ	0xFE5
  3090                           fsr1l	equ	0xFE1
  3091                           indf2	equ	0xFDF
  3092                           postinc2	equ	0xFDE
  3093                           postdec2	equ	0xFDD
  3094                           fsr2h	equ	0xFDA
  3095                           fsr2l	equ	0xFD9
  3096                           status	equ	0xFD8
  3097                           
  3098 ;; *************** function _MAGNETISM_in *****************
  3099 ;; Defined at:
  3100 ;;		line 183 in file "sort.c"
  3101 ;; Parameters:    Size  Location     Type
  3102 ;;		None
  3103 ;; Auto vars:     Size  Location     Type
  3104 ;;		None
  3105 ;; Return value:  Size  Location     Type
  3106 ;;                  2    0[BANK0 ] int 
  3107 ;; Registers used:
  3108 ;;		wreg, status,2
  3109 ;; Tracked objects:
  3110 ;;		On entry : 0/0
  3111 ;;		On exit  : 0/0
  3112 ;;		Unchanged: 0/0
  3113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3114 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3117 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3118 ;;Total ram usage:        2 bytes
  3119 ;; Hardware stack levels used:    1
  3120 ;; Hardware stack levels required when called:    7
  3121 ;; This function calls:
  3122 ;;		Nothing
  3123 ;; This function is called by:
  3124 ;;		_ID
  3125 ;; This function uses a non-reentrant model
  3126 ;;
  3127                           
  3128                           	psect	text11
  3129  0029F2                     __ptext11:
  3130                           	opt stack 0
  3131  0029F2                     _MAGNETISM_in:
  3132                           	opt stack 21
  3133                           
  3134                           ;sort.c: 185: return 0;
  3135                           
  3136                           ;incstack = 0
  3137  0029F2  0E00               	movlw	0
  3138  0029F4  0100               	movlb	0	; () banked
  3139  0029F6  6F81               	movwf	(?_MAGNETISM_in+1)& (0+255),b
  3140  0029F8  0E00               	movlw	0
  3141  0029FA  6F80               	movwf	?_MAGNETISM_in& (0+255),b
  3142  0029FC  0012               	return	
  3143  0029FE                     __end_of_MAGNETISM_in:
  3144                           	opt stack 0
  3145                           tblptru	equ	0xFF8
  3146                           tblptrh	equ	0xFF7
  3147                           tblptrl	equ	0xFF6
  3148                           tablat	equ	0xFF5
  3149                           prodh	equ	0xFF4
  3150                           prodl	equ	0xFF3
  3151                           postinc0	equ	0xFEE
  3152                           wreg	equ	0xFE8
  3153                           postdec1	equ	0xFE5
  3154                           fsr1l	equ	0xFE1
  3155                           indf2	equ	0xFDF
  3156                           postinc2	equ	0xFDE
  3157                           postdec2	equ	0xFDD
  3158                           fsr2h	equ	0xFDA
  3159                           fsr2l	equ	0xFD9
  3160                           status	equ	0xFD8
  3161                           
  3162 ;; *************** function _Distribution *****************
  3163 ;; Defined at:
  3164 ;;		line 99 in file "sort.c"
  3165 ;; Parameters:    Size  Location     Type
  3166 ;;		None
  3167 ;; Auto vars:     Size  Location     Type
  3168 ;;		None
  3169 ;; Return value:  Size  Location     Type
  3170 ;;                  1    wreg      void 
  3171 ;; Registers used:
  3172 ;;		wreg, status,2, status,0, cstack
  3173 ;; Tracked objects:
  3174 ;;		On entry : 0/0
  3175 ;;		On exit  : 0/0
  3176 ;;		Unchanged: 0/0
  3177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3182 ;;Total ram usage:        0 bytes
  3183 ;; Hardware stack levels used:    1
  3184 ;; Hardware stack levels required when called:    8
  3185 ;; This function calls:
  3186 ;;		_moveServoCup
  3187 ;; This function is called by:
  3188 ;;		_sort
  3189 ;; This function uses a non-reentrant model
  3190 ;;
  3191                           
  3192                           	psect	text12
  3193  002750                     __ptext12:
  3194                           	opt stack 0
  3195  002750                     _Distribution:
  3196                           	opt stack 21
  3197                           
  3198                           ;sort.c: 100: if(f_can_coming_to_distribution){
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;incstack = 0
  3202  002750  0100               	movlb	0	; () banked
  3203  002752  51E5               	movf	_f_can_coming_to_distribution& (0+255),w,b
  3204  002754  0100               	movlb	0	; () banked
  3205  002756  11E6               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  3206  002758  B4D8               	btfsc	status,2,c
  3207  00275A  0012               	return	
  3208                           
  3209                           ; BSR set to: 0
  3210                           ;sort.c: 102: moveServoCup(canType);
  3211  00275C  5078               	movf	_canType,w,c
  3212  00275E  ECC6  F00E         	call	_moveServoCup
  3213                           
  3214                           ;sort.c: 104: moveServoCup(Home);
  3215  002762  0E00               	movlw	0
  3216  002764  ECC6  F00E         	call	_moveServoCup
  3217                           
  3218                           ;sort.c: 105: f_can_coming_to_distribution = 0;
  3219  002768  0E00               	movlw	0
  3220  00276A  0100               	movlb	0	; () banked
  3221  00276C  6FE6               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  3222  00276E  0E00               	movlw	0
  3223  002770  6FE5               	movwf	_f_can_coming_to_distribution& (0+255),b
  3224                           
  3225                           ; BSR set to: 0
  3226                           ;sort.c: 106: f_can_distributed = 1;
  3227  002772  0E00               	movlw	0
  3228  002774  0100               	movlb	0	; () banked
  3229  002776  6FE8               	movwf	(_f_can_distributed+1)& (0+255),b
  3230  002778  0E01               	movlw	1
  3231  00277A  6FE7               	movwf	_f_can_distributed& (0+255),b
  3232  00277C  0012               	return	
  3233  00277E                     __end_of_Distribution:
  3234                           	opt stack 0
  3235                           tblptru	equ	0xFF8
  3236                           tblptrh	equ	0xFF7
  3237                           tblptrl	equ	0xFF6
  3238                           tablat	equ	0xFF5
  3239                           prodh	equ	0xFF4
  3240                           prodl	equ	0xFF3
  3241                           postinc0	equ	0xFEE
  3242                           wreg	equ	0xFE8
  3243                           postdec1	equ	0xFE5
  3244                           fsr1l	equ	0xFE1
  3245                           indf2	equ	0xFDF
  3246                           postinc2	equ	0xFDE
  3247                           postdec2	equ	0xFDD
  3248                           fsr2h	equ	0xFDA
  3249                           fsr2l	equ	0xFD9
  3250                           status	equ	0xFD8
  3251                           
  3252 ;; *************** function _moveServoCup *****************
  3253 ;; Defined at:
  3254 ;;		line 211 in file "sort.c"
  3255 ;; Parameters:    Size  Location     Type
  3256 ;;  myPosition      1    wreg     enum E3131
  3257 ;; Auto vars:     Size  Location     Type
  3258 ;;  myPosition      1    0[BANK0 ] enum E3131
  3259 ;; Return value:  Size  Location     Type
  3260 ;;                  1    wreg      void 
  3261 ;; Registers used:
  3262 ;;		wreg, status,2, status,0
  3263 ;; Tracked objects:
  3264 ;;		On entry : 0/0
  3265 ;;		On exit  : 0/0
  3266 ;;		Unchanged: 0/0
  3267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3269 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3271 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3272 ;;Total ram usage:        1 bytes
  3273 ;; Hardware stack levels used:    1
  3274 ;; Hardware stack levels required when called:    7
  3275 ;; This function calls:
  3276 ;;		Nothing
  3277 ;; This function is called by:
  3278 ;;		_Loading
  3279 ;;		_Distribution
  3280 ;; This function uses a non-reentrant model
  3281 ;;
  3282                           
  3283                           	psect	text13
  3284  001D8C                     __ptext13:
  3285                           	opt stack 0
  3286  001D8C                     _moveServoCup:
  3287                           	opt stack 21
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;incstack = 0
  3291                           ;moveServoCup@myPosition stored from wreg
  3292  001D8C  0100               	movlb	0	; () banked
  3293  001D8E  6F80               	movwf	moveServoCup@myPosition& (0+255),b
  3294                           
  3295                           ;sort.c: 213: T1CON = 0b10110000;
  3296  001D90  0EB0               	movlw	176
  3297  001D92  6ECD               	movwf	4045,c	;volatile
  3298                           
  3299                           ;sort.c: 214: switch(myPosition){
  3300  001D94  D029               	goto	l4802
  3301  001D96                     l4790:
  3302                           
  3303                           ;sort.c: 217: timer1highbits = 0b11111010;
  3304  001D96  0E00               	movlw	0
  3305  001D98  6E6C               	movwf	_timer1highbits+1,c
  3306  001D9A  0EFA               	movlw	250
  3307  001D9C  6E6B               	movwf	_timer1highbits,c
  3308                           
  3309                           ;sort.c: 218: timer1lowbits = 0b00100100;
  3310  001D9E  0E00               	movlw	0
  3311  001DA0  6E6E               	movwf	_timer1lowbits+1,c
  3312  001DA2  0E24               	movlw	36
  3313  001DA4  D01F               	goto	L5
  3314  001DA6                     l4792:
  3315                           
  3316                           ;sort.c: 222: timer1highbits = 0b11111100;
  3317  001DA6  0E00               	movlw	0
  3318  001DA8  6E6C               	movwf	_timer1highbits+1,c
  3319  001DAA  0EFC               	movlw	252
  3320  001DAC  6E6B               	movwf	_timer1highbits,c
  3321                           
  3322                           ;sort.c: 223: timer1lowbits = 0b00011000;
  3323  001DAE  0E00               	movlw	0
  3324  001DB0  6E6E               	movwf	_timer1lowbits+1,c
  3325  001DB2  0E18               	movlw	24
  3326  001DB4  D017               	goto	L5
  3327  001DB6                     l4794:
  3328                           
  3329                           ;sort.c: 227: timer1highbits = 0b11111010;
  3330  001DB6  0E00               	movlw	0
  3331  001DB8  6E6C               	movwf	_timer1highbits+1,c
  3332  001DBA  0EFA               	movlw	250
  3333  001DBC  6E6B               	movwf	_timer1highbits,c
  3334                           
  3335                           ;sort.c: 228: timer1lowbits = 0b11001011;
  3336  001DBE  0E00               	movlw	0
  3337  001DC0  6E6E               	movwf	_timer1lowbits+1,c
  3338  001DC2  0ECB               	movlw	203
  3339  001DC4  D00F               	goto	L5
  3340  001DC6                     l4796:
  3341                           
  3342                           ;sort.c: 232: timer1highbits = 0b11111001;
  3343  001DC6  0E00               	movlw	0
  3344  001DC8  6E6C               	movwf	_timer1highbits+1,c
  3345  001DCA  0EF9               	movlw	249
  3346  001DCC  6E6B               	movwf	_timer1highbits,c
  3347                           
  3348                           ;sort.c: 233: timer1lowbits = 0b01111101;
  3349  001DCE  0E00               	movlw	0
  3350  001DD0  6E6E               	movwf	_timer1lowbits+1,c
  3351  001DD2  0E7D               	movlw	125
  3352  001DD4  D007               	goto	L5
  3353  001DD6                     l4798:
  3354                           
  3355                           ;sort.c: 237: timer1highbits = 0b11111000;
  3356  001DD6  0E00               	movlw	0
  3357  001DD8  6E6C               	movwf	_timer1highbits+1,c
  3358  001DDA  0EF8               	movlw	248
  3359  001DDC  6E6B               	movwf	_timer1highbits,c
  3360                           
  3361                           ;sort.c: 238: timer1lowbits = 0b00110000;
  3362  001DDE  0E00               	movlw	0
  3363  001DE0  6E6E               	movwf	_timer1lowbits+1,c
  3364  001DE2  0E30               	movlw	48
  3365  001DE4                     L5:
  3366  001DE4  6E6D               	movwf	_timer1lowbits,c
  3367                           
  3368                           ;sort.c: 242: }
  3369                           
  3370                           ;sort.c: 241: break;
  3371                           
  3372                           ;sort.c: 240: default:
  3373                           
  3374                           ;sort.c: 239: break;
  3375  001DE6  D011               	goto	l1251
  3376  001DE8                     l4802:
  3377  001DE8  0100               	movlb	0	; () banked
  3378  001DEA  5180               	movf	moveServoCup@myPosition& (0+255),w,b
  3379                           
  3380                           ; Switch size 1, requested type "space"
  3381                           ; Number of cases is 5, Range of values is 0 to 4
  3382                           ; switch strategies available:
  3383                           ; Name         Instructions Cycles
  3384                           ; simple_byte           16     9 (average)
  3385                           ;	Chosen strategy is simple_byte
  3386  001DEC  0A00               	xorlw	0	; case 0
  3387  001DEE  B4D8               	btfsc	status,2,c
  3388  001DF0  D7D2               	goto	l4790
  3389  001DF2  0A01               	xorlw	1	; case 1
  3390  001DF4  B4D8               	btfsc	status,2,c
  3391  001DF6  D7D7               	goto	l4792
  3392  001DF8  0A03               	xorlw	3	; case 2
  3393  001DFA  B4D8               	btfsc	status,2,c
  3394  001DFC  D7DC               	goto	l4794
  3395  001DFE  0A01               	xorlw	1	; case 3
  3396  001E00  B4D8               	btfsc	status,2,c
  3397  001E02  D7E1               	goto	l4796
  3398  001E04  0A07               	xorlw	7	; case 4
  3399  001E06  B4D8               	btfsc	status,2,c
  3400  001E08  D7E6               	goto	l4798
  3401  001E0A                     l1251:
  3402                           
  3403                           ;sort.c: 244: TMR1H = timer1highbits;
  3404  001E0A  C06B  FFCF         	movff	_timer1highbits,4047	;volatile
  3405                           
  3406                           ;sort.c: 245: TMR1L = timer1lowbits;
  3407  001E0E  C06D  FFCE         	movff	_timer1lowbits,4046	;volatile
  3408                           
  3409                           ;sort.c: 246: TMR1ON = 1;
  3410  001E12  80CD               	bsf	4045,0,c	;volatile
  3411                           
  3412                           ;sort.c: 247: was_low = 0;
  3413  001E14  0E00               	movlw	0
  3414  001E16  6E76               	movwf	_was_low+1,c
  3415  001E18  0E00               	movlw	0
  3416  001E1A  6E75               	movwf	_was_low,c
  3417  001E1C  0012               	return		;funcret
  3418  001E1E                     __end_of_moveServoCup:
  3419                           	opt stack 0
  3420                           tblptru	equ	0xFF8
  3421                           tblptrh	equ	0xFF7
  3422                           tblptrl	equ	0xFF6
  3423                           tablat	equ	0xFF5
  3424                           prodh	equ	0xFF4
  3425                           prodl	equ	0xFF3
  3426                           postinc0	equ	0xFEE
  3427                           wreg	equ	0xFE8
  3428                           postdec1	equ	0xFE5
  3429                           fsr1l	equ	0xFE1
  3430                           indf2	equ	0xFDF
  3431                           postinc2	equ	0xFDE
  3432                           postdec2	equ	0xFDD
  3433                           fsr2h	equ	0xFDA
  3434                           fsr2l	equ	0xFD9
  3435                           status	equ	0xFD8
  3436                           
  3437 ;; *************** function _machineConfig *****************
  3438 ;; Defined at:
  3439 ;;		line 14 in file "MachineConfig.c"
  3440 ;; Parameters:    Size  Location     Type
  3441 ;;		None
  3442 ;; Auto vars:     Size  Location     Type
  3443 ;;		None
  3444 ;; Return value:  Size  Location     Type
  3445 ;;                  1    wreg      void 
  3446 ;; Registers used:
  3447 ;;		wreg, status,2
  3448 ;; Tracked objects:
  3449 ;;		On entry : 0/0
  3450 ;;		On exit  : 0/0
  3451 ;;		Unchanged: 0/0
  3452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3457 ;;Total ram usage:        0 bytes
  3458 ;; Hardware stack levels used:    1
  3459 ;; Hardware stack levels required when called:    7
  3460 ;; This function calls:
  3461 ;;		Nothing
  3462 ;; This function is called by:
  3463 ;;		_main
  3464 ;; This function uses a non-reentrant model
  3465 ;;
  3466                           
  3467                           	psect	text14
  3468  00223A                     __ptext14:
  3469                           	opt stack 0
  3470  00223A                     _machineConfig:
  3471                           	opt stack 23
  3472                           
  3473                           ;MachineConfig.c: 16: OSCCON = 0b11110000;
  3474                           
  3475                           ;incstack = 0
  3476  00223A  0EF0               	movlw	240
  3477  00223C  6ED3               	movwf	4051,c	;volatile
  3478                           
  3479                           ;MachineConfig.c: 17: OSCTUNEbits.PLLEN = 1;
  3480  00223E  8C9B               	bsf	3995,6,c	;volatile
  3481                           
  3482                           ;MachineConfig.c: 21: TRISA = 0b01000111;
  3483  002240  0E47               	movlw	71
  3484  002242  6E92               	movwf	3986,c	;volatile
  3485                           
  3486                           ;MachineConfig.c: 23: TRISB = 0b11110010;
  3487  002244  0EF2               	movlw	242
  3488  002246  6E93               	movwf	3987,c	;volatile
  3489                           
  3490                           ;MachineConfig.c: 26: TRISC = 0x00;
  3491  002248  0E00               	movlw	0
  3492  00224A  6E94               	movwf	3988,c	;volatile
  3493                           
  3494                           ;MachineConfig.c: 30: TRISD = 0x00;
  3495  00224C  0E00               	movlw	0
  3496  00224E  6E95               	movwf	3989,c	;volatile
  3497                           
  3498                           ;MachineConfig.c: 33: TRISE = 0x00;
  3499  002250  0E00               	movlw	0
  3500  002252  6E96               	movwf	3990,c	;volatile
  3501                           
  3502                           ;MachineConfig.c: 36: LATA = 0x00;
  3503  002254  0E00               	movlw	0
  3504  002256  6E89               	movwf	3977,c	;volatile
  3505                           
  3506                           ;MachineConfig.c: 37: LATB = 0x00;
  3507  002258  0E00               	movlw	0
  3508  00225A  6E8A               	movwf	3978,c	;volatile
  3509                           
  3510                           ;MachineConfig.c: 38: LATC = 0x00;
  3511  00225C  0E00               	movlw	0
  3512  00225E  6E8B               	movwf	3979,c	;volatile
  3513                           
  3514                           ;MachineConfig.c: 39: LATD = 0x00;
  3515  002260  0E00               	movlw	0
  3516  002262  6E8C               	movwf	3980,c	;volatile
  3517                           
  3518                           ;MachineConfig.c: 40: LATE = 0x00;
  3519  002264  0E00               	movlw	0
  3520  002266  6E8D               	movwf	3981,c	;volatile
  3521                           
  3522                           ;MachineConfig.c: 43: ADCON0 = 0x00;
  3523  002268  0E00               	movlw	0
  3524  00226A  6EC2               	movwf	4034,c	;volatile
  3525                           
  3526                           ;MachineConfig.c: 44: ADCON1 = 0x0D;
  3527  00226C  0E0D               	movlw	13
  3528  00226E  6EC1               	movwf	4033,c	;volatile
  3529                           
  3530                           ;MachineConfig.c: 47: VCFG1 = 0;
  3531  002270  9AC1               	bcf	4033,5,c	;volatile
  3532                           
  3533                           ;MachineConfig.c: 48: VCFG0 = 0;
  3534  002272  98C1               	bcf	4033,4,c	;volatile
  3535                           
  3536                           ;MachineConfig.c: 49: CVRCON = 0x00;
  3537  002274  0E00               	movlw	0
  3538  002276  6EB5               	movwf	4021,c	;volatile
  3539                           
  3540                           ;MachineConfig.c: 50: CMCONbits.CIS = 0;
  3541  002278  96B4               	bcf	4020,3,c	;volatile
  3542                           
  3543                           ;MachineConfig.c: 51: ADFM = 1;
  3544  00227A  8EC0               	bsf	4032,7,c	;volatile
  3545                           
  3546                           ;MachineConfig.c: 52: nRBPU = 0;
  3547  00227C  9EF1               	bcf	intcon2,7,c	;volatile
  3548                           
  3549                           ;MachineConfig.c: 55: INT1IE = 1;
  3550  00227E  86F0               	bsf	intcon3,3,c	;volatile
  3551                           
  3552                           ;MachineConfig.c: 57: TMR0IE = 1;
  3553  002280  8AF2               	bsf	intcon,5,c	;volatile
  3554                           
  3555                           ;MachineConfig.c: 58: TMR1IE = 1;
  3556  002282  809D               	bsf	3997,0,c	;volatile
  3557                           
  3558                           ;MachineConfig.c: 59: TMR2IE = 1;
  3559  002284  829D               	bsf	3997,1,c	;volatile
  3560                           
  3561                           ;MachineConfig.c: 60: TMR3IE = 1;
  3562  002286  82A0               	bsf	4000,1,c	;volatile
  3563                           
  3564                           ;MachineConfig.c: 61: PEIE = 1;
  3565  002288  8CF2               	bsf	intcon,6,c	;volatile
  3566                           
  3567                           ;MachineConfig.c: 63: ADIE = 1;
  3568  00228A  8C9D               	bsf	3997,6,c	;volatile
  3569                           
  3570                           ;MachineConfig.c: 64: (INTCONbits.GIE = 0);
  3571  00228C  9EF2               	bcf	intcon,7,c	;volatile
  3572  00228E  0012               	return		;funcret
  3573  002290                     __end_of_machineConfig:
  3574                           	opt stack 0
  3575                           tblptru	equ	0xFF8
  3576                           tblptrh	equ	0xFF7
  3577                           tblptrl	equ	0xFF6
  3578                           tablat	equ	0xFF5
  3579                           prodh	equ	0xFF4
  3580                           prodl	equ	0xFF3
  3581                           intcon	equ	0xFF2
  3582                           intcon2	equ	0xFF1
  3583                           intcon3	equ	0xFF0
  3584                           postinc0	equ	0xFEE
  3585                           wreg	equ	0xFE8
  3586                           postdec1	equ	0xFE5
  3587                           fsr1l	equ	0xFE1
  3588                           indf2	equ	0xFDF
  3589                           postinc2	equ	0xFDE
  3590                           postdec2	equ	0xFDD
  3591                           fsr2h	equ	0xFDA
  3592                           fsr2l	equ	0xFD9
  3593                           status	equ	0xFD8
  3594                           
  3595 ;; *************** function _initUI *****************
  3596 ;; Defined at:
  3597 ;;		line 61 in file "UI.c"
  3598 ;; Parameters:    Size  Location     Type
  3599 ;;		None
  3600 ;; Auto vars:     Size  Location     Type
  3601 ;;		None
  3602 ;; Return value:  Size  Location     Type
  3603 ;;                  1    wreg      void 
  3604 ;; Registers used:
  3605 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3606 ;; Tracked objects:
  3607 ;;		On entry : 0/0
  3608 ;;		On exit  : 0/0
  3609 ;;		Unchanged: 0/0
  3610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3615 ;;Total ram usage:        0 bytes
  3616 ;; Hardware stack levels used:    1
  3617 ;; Hardware stack levels required when called:   12
  3618 ;; This function calls:
  3619 ;;		_change_state_to_menu_start
  3620 ;;		_loadRTC
  3621 ;; This function is called by:
  3622 ;;		_main
  3623 ;; This function uses a non-reentrant model
  3624 ;;
  3625                           
  3626                           	psect	text15
  3627  002956                     __ptext15:
  3628                           	opt stack 0
  3629  002956                     _initUI:
  3630                           	opt stack 18
  3631                           
  3632                           ;UI.c: 62: (INTCONbits.GIE = 1);
  3633                           
  3634                           ;incstack = 0
  3635  002956  8EF2               	bsf	intcon,7,c	;volatile
  3636                           
  3637                           ;UI.c: 63: machine_state = UI_state;
  3638  002958  0E00               	movlw	0
  3639  00295A  0100               	movlb	0	; () banked
  3640  00295C  6FF3               	movwf	_machine_state& (0+255),b
  3641                           
  3642                           ; BSR set to: 0
  3643                           ;UI.c: 65: loadRTC();
  3644  00295E  EC0F  F00F         	call	_loadRTC	;wreg free
  3645                           
  3646                           ;UI.c: 67: change_state_to_menu_start();
  3647  002962  EC03  F014         	call	_change_state_to_menu_start	;wreg free
  3648                           
  3649                           ;UI.c: 68: firstboot = 1;
  3650  002966  0E00               	movlw	0
  3651  002968  6E6A               	movwf	_firstboot+1,c
  3652  00296A  0E01               	movlw	1
  3653  00296C  6E69               	movwf	_firstboot,c
  3654  00296E  0012               	return		;funcret
  3655  002970                     __end_of_initUI:
  3656                           	opt stack 0
  3657                           tblptru	equ	0xFF8
  3658                           tblptrh	equ	0xFF7
  3659                           tblptrl	equ	0xFF6
  3660                           tablat	equ	0xFF5
  3661                           prodh	equ	0xFF4
  3662                           prodl	equ	0xFF3
  3663                           intcon	equ	0xFF2
  3664                           intcon2	equ	0xFF1
  3665                           intcon3	equ	0xFF0
  3666                           postinc0	equ	0xFEE
  3667                           wreg	equ	0xFE8
  3668                           postdec1	equ	0xFE5
  3669                           fsr1l	equ	0xFE1
  3670                           indf2	equ	0xFDF
  3671                           postinc2	equ	0xFDE
  3672                           postdec2	equ	0xFDD
  3673                           fsr2h	equ	0xFDA
  3674                           fsr2l	equ	0xFD9
  3675                           status	equ	0xFD8
  3676                           
  3677 ;; *************** function _loadRTC *****************
  3678 ;; Defined at:
  3679 ;;		line 27 in file "RTC.c"
  3680 ;; Parameters:    Size  Location     Type
  3681 ;;		None
  3682 ;; Auto vars:     Size  Location     Type
  3683 ;;  i               2   22[BANK0 ] int 
  3684 ;; Return value:  Size  Location     Type
  3685 ;;                  1    wreg      void 
  3686 ;; Registers used:
  3687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3688 ;; Tracked objects:
  3689 ;;		On entry : 0/0
  3690 ;;		On exit  : 0/0
  3691 ;;		Unchanged: 0/0
  3692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3694 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3695 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3696 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3697 ;;Total ram usage:        3 bytes
  3698 ;; Hardware stack levels used:    1
  3699 ;; Hardware stack levels required when called:    9
  3700 ;; This function calls:
  3701 ;;		_I2C_Master_Init
  3702 ;;		_I2C_Master_Start
  3703 ;;		_I2C_Master_Stop
  3704 ;;		_I2C_Master_Write
  3705 ;; This function is called by:
  3706 ;;		_initUI
  3707 ;; This function uses a non-reentrant model
  3708 ;;
  3709                           
  3710                           	psect	text16
  3711  001E1E                     __ptext16:
  3712                           	opt stack 0
  3713  001E1E                     _loadRTC:
  3714                           	opt stack 20
  3715                           
  3716                           ;RTC.c: 29: I2C_Master_Init(10000);
  3717                           
  3718                           ;incstack = 0
  3719  001E1E  0E10               	movlw	16
  3720  001E20  0100               	movlb	0	; () banked
  3721  001E22  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3722  001E24  0E27               	movlw	39
  3723  001E26  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3724  001E28  0E00               	movlw	0
  3725  001E2A  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3726  001E2C  0E00               	movlw	0
  3727  001E2E  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3728  001E30  ECED  F010         	call	_I2C_Master_Init	;wreg free
  3729                           
  3730                           ;RTC.c: 31: (INTCONbits.GIE = 0);
  3731  001E34  9EF2               	bcf	intcon,7,c	;volatile
  3732                           
  3733                           ;RTC.c: 33: I2C_Master_Start();
  3734  001E36  EC1E  F015         	call	_I2C_Master_Start	;wreg free
  3735                           
  3736                           ;RTC.c: 34: I2C_Master_Write(0b11010000);
  3737  001E3A  0E00               	movlw	0
  3738  001E3C  0100               	movlb	0	; () banked
  3739  001E3E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3740  001E40  0ED0               	movlw	208
  3741  001E42  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3742  001E44  EC0B  F015         	call	_I2C_Master_Write	;wreg free
  3743                           
  3744                           ;RTC.c: 35: I2C_Master_Write(0x00);
  3745  001E48  0E00               	movlw	0
  3746  001E4A  0100               	movlb	0	; () banked
  3747  001E4C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3748  001E4E  0E00               	movlw	0
  3749  001E50  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3750  001E52  EC0B  F015         	call	_I2C_Master_Write	;wreg free
  3751                           
  3752                           ;RTC.c: 36: for(int i = 0; i<7; i++){
  3753  001E56  0E00               	movlw	0
  3754  001E58  0100               	movlb	0	; () banked
  3755  001E5A  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  3756  001E5C  0E00               	movlw	0
  3757  001E5E  6F96               	movwf	loadRTC@i& (0+255),b
  3758  001E60                     l4918:
  3759                           
  3760                           ; BSR set to: 0
  3761  001E60  0100               	movlb	0	; () banked
  3762  001E62  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  3763  001E64  D008               	goto	l4922
  3764  001E66  0100               	movlb	0	; () banked
  3765  001E68  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  3766  001E6A  E11B               	bnz	l4928
  3767  001E6C  0E07               	movlw	7
  3768  001E6E  0100               	movlb	0	; () banked
  3769  001E70  5D96               	subwf	loadRTC@i& (0+255),w,b
  3770  001E72  B0D8               	btfsc	status,0,c
  3771  001E74  D016               	goto	l4928
  3772  001E76                     l4922:
  3773                           
  3774                           ; BSR set to: 0
  3775                           ;RTC.c: 37: I2C_Master_Write(time[i]);
  3776  001E76  0ED4               	movlw	low _time
  3777  001E78  0100               	movlb	0	; () banked
  3778  001E7A  2596               	addwf	loadRTC@i& (0+255),w,b
  3779  001E7C  6ED9               	movwf	fsr2l,c
  3780  001E7E  0E00               	movlw	high _time
  3781  001E80  0100               	movlb	0	; () banked
  3782  001E82  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  3783  001E84  6EDA               	movwf	fsr2h,c
  3784  001E86  50DF               	movf	indf2,w,c
  3785  001E88  0100               	movlb	0	; () banked
  3786  001E8A  6F95               	movwf	??_loadRTC& (0+255),b
  3787  001E8C  0100               	movlb	0	; () banked
  3788  001E8E  5195               	movf	??_loadRTC& (0+255),w,b
  3789  001E90  0100               	movlb	0	; () banked
  3790  001E92  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3791  001E94  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  3792  001E96  EC0B  F015         	call	_I2C_Master_Write	;wreg free
  3793  001E9A  0100               	movlb	0	; () banked
  3794  001E9C  4B96               	infsnz	loadRTC@i& (0+255),f,b
  3795  001E9E  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  3796  001EA0  D7DF               	goto	l4918
  3797  001EA2                     l4928:
  3798                           
  3799                           ; BSR set to: 0
  3800                           ;RTC.c: 38: }
  3801                           ;RTC.c: 39: I2C_Master_Stop();
  3802  001EA2  EC1A  F015         	call	_I2C_Master_Stop	;wreg free
  3803                           
  3804                           ;RTC.c: 40: (INTCONbits.GIE = 1);
  3805  001EA6  8EF2               	bsf	intcon,7,c	;volatile
  3806  001EA8  0012               	return		;funcret
  3807  001EAA                     __end_of_loadRTC:
  3808                           	opt stack 0
  3809                           tblptru	equ	0xFF8
  3810                           tblptrh	equ	0xFF7
  3811                           tblptrl	equ	0xFF6
  3812                           tablat	equ	0xFF5
  3813                           prodh	equ	0xFF4
  3814                           prodl	equ	0xFF3
  3815                           intcon	equ	0xFF2
  3816                           intcon2	equ	0xFF1
  3817                           intcon3	equ	0xFF0
  3818                           postinc0	equ	0xFEE
  3819                           wreg	equ	0xFE8
  3820                           postdec1	equ	0xFE5
  3821                           fsr1l	equ	0xFE1
  3822                           indf2	equ	0xFDF
  3823                           postinc2	equ	0xFDE
  3824                           postdec2	equ	0xFDD
  3825                           fsr2h	equ	0xFDA
  3826                           fsr2l	equ	0xFD9
  3827                           status	equ	0xFD8
  3828                           
  3829 ;; *************** function _I2C_Master_Init *****************
  3830 ;; Defined at:
  3831 ;;		line 14 in file "I2C.c"
  3832 ;; Parameters:    Size  Location     Type
  3833 ;;  c               4   13[BANK0 ] const unsigned long 
  3834 ;; Auto vars:     Size  Location     Type
  3835 ;;		None
  3836 ;; Return value:  Size  Location     Type
  3837 ;;                  1    wreg      void 
  3838 ;; Registers used:
  3839 ;;		wreg, status,2, status,0, cstack
  3840 ;; Tracked objects:
  3841 ;;		On entry : 0/0
  3842 ;;		On exit  : 0/0
  3843 ;;		Unchanged: 0/0
  3844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3845 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3847 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3848 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3849 ;;Total ram usage:        8 bytes
  3850 ;; Hardware stack levels used:    1
  3851 ;; Hardware stack levels required when called:    8
  3852 ;; This function calls:
  3853 ;;		___lldiv
  3854 ;; This function is called by:
  3855 ;;		_loadRTC
  3856 ;; This function uses a non-reentrant model
  3857 ;;
  3858                           
  3859                           	psect	text17
  3860  0021DA                     __ptext17:
  3861                           	opt stack 0
  3862  0021DA                     _I2C_Master_Init:
  3863                           	opt stack 20
  3864                           
  3865                           ;I2C.c: 17: SSPSTAT = 0b00000000;
  3866                           
  3867                           ;incstack = 0
  3868  0021DA  0E00               	movlw	0
  3869  0021DC  6EC7               	movwf	4039,c	;volatile
  3870                           
  3871                           ;I2C.c: 18: SSPCON1 = 0b00101000;
  3872  0021DE  0E28               	movlw	40
  3873  0021E0  6EC6               	movwf	4038,c	;volatile
  3874                           
  3875                           ;I2C.c: 19: SSPCON2 = 0b00000000;
  3876  0021E2  0E00               	movlw	0
  3877  0021E4  6EC5               	movwf	4037,c	;volatile
  3878                           
  3879                           ;I2C.c: 20: SSPADD = (32000000/(4*c))-1;
  3880  0021E6  0E00               	movlw	0
  3881  0021E8  0100               	movlb	0	; () banked
  3882  0021EA  6F80               	movwf	___lldiv@dividend& (0+255),b
  3883  0021EC  0E48               	movlw	72
  3884  0021EE  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  3885  0021F0  0EE8               	movlw	232
  3886  0021F2  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  3887  0021F4  0E01               	movlw	1
  3888  0021F6  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  3889  0021F8  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  3890  0021FC  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  3891  002200  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  3892  002204  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  3893  002208  0E02               	movlw	2
  3894  00220A                     u3255:
  3895  00220A  90D8               	bcf	status,0,c
  3896  00220C  0100               	movlb	0	; () banked
  3897  00220E  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  3898  002210  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  3899  002212  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  3900  002214  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  3901  002216  2EE8               	decfsz	wreg,f,c
  3902  002218  D7F8               	goto	u3255
  3903  00221A  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  3904  00221E  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3905  002222  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3906  002226  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3907  00222A  EC1D  F00D         	call	___lldiv	;wreg free
  3908  00222E  0100               	movlb	0	; () banked
  3909  002230  0580               	decf	?___lldiv& (0+255),w,b
  3910  002232  6EC8               	movwf	4040,c	;volatile
  3911                           
  3912                           ; BSR set to: 0
  3913                           ;I2C.c: 21: TRISC3 = 1;
  3914  002234  8694               	bsf	3988,3,c	;volatile
  3915                           
  3916                           ; BSR set to: 0
  3917                           ;I2C.c: 22: TRISC4 = 1;
  3918  002236  8894               	bsf	3988,4,c	;volatile
  3919                           
  3920                           ; BSR set to: 0
  3921  002238  0012               	return		;funcret
  3922  00223A                     __end_of_I2C_Master_Init:
  3923                           	opt stack 0
  3924                           tblptru	equ	0xFF8
  3925                           tblptrh	equ	0xFF7
  3926                           tblptrl	equ	0xFF6
  3927                           tablat	equ	0xFF5
  3928                           prodh	equ	0xFF4
  3929                           prodl	equ	0xFF3
  3930                           intcon	equ	0xFF2
  3931                           intcon2	equ	0xFF1
  3932                           intcon3	equ	0xFF0
  3933                           postinc0	equ	0xFEE
  3934                           wreg	equ	0xFE8
  3935                           postdec1	equ	0xFE5
  3936                           fsr1l	equ	0xFE1
  3937                           indf2	equ	0xFDF
  3938                           postinc2	equ	0xFDE
  3939                           postdec2	equ	0xFDD
  3940                           fsr2h	equ	0xFDA
  3941                           fsr2l	equ	0xFD9
  3942                           status	equ	0xFD8
  3943                           
  3944 ;; *************** function ___lldiv *****************
  3945 ;; Defined at:
  3946 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3947 ;; Parameters:    Size  Location     Type
  3948 ;;  dividend        4    0[BANK0 ] unsigned long 
  3949 ;;  divisor         4    4[BANK0 ] unsigned long 
  3950 ;; Auto vars:     Size  Location     Type
  3951 ;;  quotient        4    8[BANK0 ] unsigned long 
  3952 ;;  counter         1   12[BANK0 ] unsigned char 
  3953 ;; Return value:  Size  Location     Type
  3954 ;;                  4    0[BANK0 ] unsigned long 
  3955 ;; Registers used:
  3956 ;;		wreg, status,2, status,0
  3957 ;; Tracked objects:
  3958 ;;		On entry : 0/0
  3959 ;;		On exit  : 0/0
  3960 ;;		Unchanged: 0/0
  3961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3962 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3963 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3965 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3966 ;;Total ram usage:       13 bytes
  3967 ;; Hardware stack levels used:    1
  3968 ;; Hardware stack levels required when called:    7
  3969 ;; This function calls:
  3970 ;;		Nothing
  3971 ;; This function is called by:
  3972 ;;		_I2C_Master_Init
  3973 ;; This function uses a non-reentrant model
  3974 ;;
  3975                           
  3976                           	psect	text18
  3977  001A3A                     __ptext18:
  3978                           	opt stack 0
  3979  001A3A                     ___lldiv:
  3980                           	opt stack 20
  3981                           
  3982                           ; BSR set to: 0
  3983                           ;incstack = 0
  3984  001A3A  0E00               	movlw	0
  3985  001A3C  0100               	movlb	0	; () banked
  3986  001A3E  6F88               	movwf	___lldiv@quotient& (0+255),b
  3987  001A40  0E00               	movlw	0
  3988  001A42  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  3989  001A44  0E00               	movlw	0
  3990  001A46  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  3991  001A48  0E00               	movlw	0
  3992  001A4A  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  3993                           
  3994                           ; BSR set to: 0
  3995  001A4C  0100               	movlb	0	; () banked
  3996  001A4E  5184               	movf	___lldiv@divisor& (0+255),w,b
  3997  001A50  0100               	movlb	0	; () banked
  3998  001A52  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  3999  001A54  0100               	movlb	0	; () banked
  4000  001A56  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  4001  001A58  0100               	movlb	0	; () banked
  4002  001A5A  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  4003  001A5C  B4D8               	btfsc	status,2,c
  4004  001A5E  D042               	goto	l1788
  4005                           
  4006                           ; BSR set to: 0
  4007  001A60  0E01               	movlw	1
  4008  001A62  0100               	movlb	0	; () banked
  4009  001A64  6F8C               	movwf	___lldiv@counter& (0+255),b
  4010  001A66  D008               	goto	l4460
  4011  001A68                     l4458:
  4012                           
  4013                           ; BSR set to: 0
  4014  001A68  0100               	movlb	0	; () banked
  4015  001A6A  90D8               	bcf	status,0,c
  4016  001A6C  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  4017  001A6E  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  4018  001A70  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  4019  001A72  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  4020  001A74  0100               	movlb	0	; () banked
  4021  001A76  2B8C               	incf	___lldiv@counter& (0+255),f,b
  4022  001A78                     l4460:
  4023                           
  4024                           ; BSR set to: 0
  4025  001A78  0100               	movlb	0	; () banked
  4026  001A7A  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  4027  001A7C  D7F5               	goto	l4458
  4028  001A7E                     l4462:
  4029                           
  4030                           ; BSR set to: 0
  4031  001A7E  0100               	movlb	0	; () banked
  4032  001A80  90D8               	bcf	status,0,c
  4033  001A82  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  4034  001A84  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  4035  001A86  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  4036  001A88  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  4037                           
  4038                           ; BSR set to: 0
  4039  001A8A  0100               	movlb	0	; () banked
  4040  001A8C  5184               	movf	___lldiv@divisor& (0+255),w,b
  4041  001A8E  0100               	movlb	0	; () banked
  4042  001A90  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  4043  001A92  0100               	movlb	0	; () banked
  4044  001A94  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4045  001A96  0100               	movlb	0	; () banked
  4046  001A98  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  4047  001A9A  0100               	movlb	0	; () banked
  4048  001A9C  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4049  001A9E  0100               	movlb	0	; () banked
  4050  001AA0  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  4051  001AA2  0100               	movlb	0	; () banked
  4052  001AA4  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4053  001AA6  0100               	movlb	0	; () banked
  4054  001AA8  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  4055  001AAA  A0D8               	btfss	status,0,c
  4056  001AAC  D012               	goto	l4470
  4057                           
  4058                           ; BSR set to: 0
  4059  001AAE  0100               	movlb	0	; () banked
  4060  001AB0  5184               	movf	___lldiv@divisor& (0+255),w,b
  4061  001AB2  0100               	movlb	0	; () banked
  4062  001AB4  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  4063  001AB6  0100               	movlb	0	; () banked
  4064  001AB8  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4065  001ABA  0100               	movlb	0	; () banked
  4066  001ABC  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  4067  001ABE  0100               	movlb	0	; () banked
  4068  001AC0  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4069  001AC2  0100               	movlb	0	; () banked
  4070  001AC4  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  4071  001AC6  0100               	movlb	0	; () banked
  4072  001AC8  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4073  001ACA  0100               	movlb	0	; () banked
  4074  001ACC  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  4075                           
  4076                           ; BSR set to: 0
  4077  001ACE  0100               	movlb	0	; () banked
  4078  001AD0  8188               	bsf	___lldiv@quotient& (0+255),0,b
  4079  001AD2                     l4470:
  4080                           
  4081                           ; BSR set to: 0
  4082  001AD2  0100               	movlb	0	; () banked
  4083  001AD4  90D8               	bcf	status,0,c
  4084  001AD6  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  4085  001AD8  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  4086  001ADA  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  4087  001ADC  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  4088                           
  4089                           ; BSR set to: 0
  4090  001ADE  0100               	movlb	0	; () banked
  4091  001AE0  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  4092  001AE2  D7CD               	goto	l4462
  4093  001AE4                     l1788:
  4094                           
  4095                           ; BSR set to: 0
  4096  001AE4  C088  F080         	movff	___lldiv@quotient,?___lldiv
  4097  001AE8  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  4098  001AEC  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  4099  001AF0  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  4100                           
  4101                           ; BSR set to: 0
  4102  001AF4  0012               	return		;funcret
  4103  001AF6                     __end_of___lldiv:
  4104                           	opt stack 0
  4105                           tblptru	equ	0xFF8
  4106                           tblptrh	equ	0xFF7
  4107                           tblptrl	equ	0xFF6
  4108                           tablat	equ	0xFF5
  4109                           prodh	equ	0xFF4
  4110                           prodl	equ	0xFF3
  4111                           intcon	equ	0xFF2
  4112                           intcon2	equ	0xFF1
  4113                           intcon3	equ	0xFF0
  4114                           postinc0	equ	0xFEE
  4115                           wreg	equ	0xFE8
  4116                           postdec1	equ	0xFE5
  4117                           fsr1l	equ	0xFE1
  4118                           indf2	equ	0xFDF
  4119                           postinc2	equ	0xFDE
  4120                           postdec2	equ	0xFDD
  4121                           fsr2h	equ	0xFDA
  4122                           fsr2l	equ	0xFD9
  4123                           status	equ	0xFD8
  4124                           
  4125 ;; *************** function _change_state_to_menu_start *****************
  4126 ;; Defined at:
  4127 ;;		line 416 in file "UI.c"
  4128 ;; Parameters:    Size  Location     Type
  4129 ;;		None
  4130 ;; Auto vars:     Size  Location     Type
  4131 ;;		None
  4132 ;; Return value:  Size  Location     Type
  4133 ;;                  1    wreg      void 
  4134 ;; Registers used:
  4135 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4136 ;; Tracked objects:
  4137 ;;		On entry : 0/0
  4138 ;;		On exit  : 0/0
  4139 ;;		Unchanged: 0/0
  4140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4144 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4145 ;;Total ram usage:        0 bytes
  4146 ;; Hardware stack levels used:    1
  4147 ;; Hardware stack levels required when called:   11
  4148 ;; This function calls:
  4149 ;;		_lcdInst
  4150 ;;		_printRTC
  4151 ;;		_printf
  4152 ;; This function is called by:
  4153 ;;		_initUI
  4154 ;; This function uses a non-reentrant model
  4155 ;;
  4156                           
  4157                           	psect	text19
  4158  002806                     __ptext19:
  4159                           	opt stack 0
  4160  002806                     _change_state_to_menu_start:
  4161                           	opt stack 18
  4162                           
  4163                           ;UI.c: 417: cur_state = 0;
  4164                           
  4165                           ; BSR set to: 0
  4166                           ;incstack = 0
  4167  002806  0E00               	movlw	0
  4168  002808  0100               	movlb	0	; () banked
  4169  00280A  6FE2               	movwf	(_cur_state+1)& (0+255),b
  4170  00280C  0E00               	movlw	0
  4171  00280E  6FE1               	movwf	_cur_state& (0+255),b
  4172                           
  4173                           ; BSR set to: 0
  4174                           ;UI.c: 419: lcdInst(0b10000000);;
  4175  002810  0E80               	movlw	128
  4176  002812  ECF1  F014         	call	_lcdInst
  4177                           
  4178                           ;UI.c: 420: printRTC();
  4179  002816  EC63  F006         	call	_printRTC	;wreg free
  4180                           
  4181                           ;UI.c: 421: lcdInst(0b11000000);;
  4182  00281A  0EC0               	movlw	192
  4183  00281C  ECF1  F014         	call	_lcdInst
  4184                           
  4185                           ;UI.c: 422: printf("PUSH TO CONTINUE");
  4186  002820  0E97               	movlw	low STR_15
  4187  002822  0100               	movlb	0	; () banked
  4188  002824  6F8E               	movwf	printf@f& (0+255),b
  4189  002826  0EFF               	movlw	high STR_15
  4190  002828  0100               	movlb	0	; () banked
  4191  00282A  6F8F               	movwf	(printf@f+1)& (0+255),b
  4192  00282C  ECBB  F002         	call	_printf	;wreg free
  4193  002830  0012               	return		;funcret
  4194  002832                     __end_of_change_state_to_menu_start:
  4195                           	opt stack 0
  4196                           tblptru	equ	0xFF8
  4197                           tblptrh	equ	0xFF7
  4198                           tblptrl	equ	0xFF6
  4199                           tablat	equ	0xFF5
  4200                           prodh	equ	0xFF4
  4201                           prodl	equ	0xFF3
  4202                           intcon	equ	0xFF2
  4203                           intcon2	equ	0xFF1
  4204                           intcon3	equ	0xFF0
  4205                           postinc0	equ	0xFEE
  4206                           wreg	equ	0xFE8
  4207                           postdec1	equ	0xFE5
  4208                           fsr1l	equ	0xFE1
  4209                           indf2	equ	0xFDF
  4210                           postinc2	equ	0xFDE
  4211                           postdec2	equ	0xFDD
  4212                           fsr2h	equ	0xFDA
  4213                           fsr2l	equ	0xFD9
  4214                           status	equ	0xFD8
  4215                           
  4216 ;; *************** function _initTime *****************
  4217 ;; Defined at:
  4218 ;;		line 16 in file "RTC.c"
  4219 ;; Parameters:    Size  Location     Type
  4220 ;;  s               1    wreg     unsigned char 
  4221 ;;  m               1    0[BANK0 ] unsigned char 
  4222 ;;  h               1    1[BANK0 ] unsigned char 
  4223 ;;  w               1    2[BANK0 ] unsigned char 
  4224 ;;  DD              1    3[BANK0 ] unsigned char 
  4225 ;;  MM              1    4[BANK0 ] unsigned char 
  4226 ;;  YY              1    5[BANK0 ] unsigned char 
  4227 ;; Auto vars:     Size  Location     Type
  4228 ;;  s               1    6[BANK0 ] unsigned char 
  4229 ;; Return value:  Size  Location     Type
  4230 ;;                  1    wreg      void 
  4231 ;; Registers used:
  4232 ;;		wreg
  4233 ;; Tracked objects:
  4234 ;;		On entry : 0/0
  4235 ;;		On exit  : 0/0
  4236 ;;		Unchanged: 0/0
  4237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4238 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4239 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4241 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4242 ;;Total ram usage:        7 bytes
  4243 ;; Hardware stack levels used:    1
  4244 ;; Hardware stack levels required when called:    7
  4245 ;; This function calls:
  4246 ;;		Nothing
  4247 ;; This function is called by:
  4248 ;;		_main
  4249 ;; This function uses a non-reentrant model
  4250 ;;
  4251                           
  4252                           	psect	text20
  4253  002916                     __ptext20:
  4254                           	opt stack 0
  4255  002916                     _initTime:
  4256                           	opt stack 23
  4257                           
  4258                           ;incstack = 0
  4259                           ;initTime@s stored from wreg
  4260  002916  0100               	movlb	0	; () banked
  4261  002918  6F86               	movwf	initTime@s& (0+255),b
  4262                           
  4263                           ;RTC.c: 18: time[0] = s;
  4264  00291A  C086  F0D4         	movff	initTime@s,_time
  4265                           
  4266                           ;RTC.c: 19: time[1] = m;
  4267  00291E  C080  F0D5         	movff	initTime@m,_time+1
  4268                           
  4269                           ;RTC.c: 20: time[2] = h;
  4270  002922  C081  F0D6         	movff	initTime@h,_time+2
  4271                           
  4272                           ;RTC.c: 21: time[3] = w;
  4273  002926  C082  F0D7         	movff	initTime@w,_time+3
  4274                           
  4275                           ;RTC.c: 22: time[4] = DD;
  4276  00292A  C083  F0D8         	movff	initTime@DD,_time+4
  4277                           
  4278                           ;RTC.c: 23: time[5] = MM;
  4279  00292E  C084  F0D9         	movff	initTime@MM,_time+5
  4280                           
  4281                           ;RTC.c: 24: time[6] = YY;
  4282  002932  C085  F0DA         	movff	initTime@YY,_time+6
  4283  002936  0012               	return		;funcret
  4284  002938                     __end_of_initTime:
  4285                           	opt stack 0
  4286                           tblptru	equ	0xFF8
  4287                           tblptrh	equ	0xFF7
  4288                           tblptrl	equ	0xFF6
  4289                           tablat	equ	0xFF5
  4290                           prodh	equ	0xFF4
  4291                           prodl	equ	0xFF3
  4292                           intcon	equ	0xFF2
  4293                           intcon2	equ	0xFF1
  4294                           intcon3	equ	0xFF0
  4295                           postinc0	equ	0xFEE
  4296                           wreg	equ	0xFE8
  4297                           postdec1	equ	0xFE5
  4298                           fsr1l	equ	0xFE1
  4299                           indf2	equ	0xFDF
  4300                           postinc2	equ	0xFDE
  4301                           postdec2	equ	0xFDD
  4302                           fsr2h	equ	0xFDA
  4303                           fsr2l	equ	0xFD9
  4304                           status	equ	0xFD8
  4305                           
  4306 ;; *************** function _initLCD *****************
  4307 ;; Defined at:
  4308 ;;		line 47 in file "lcd.c"
  4309 ;; Parameters:    Size  Location     Type
  4310 ;;		None
  4311 ;; Auto vars:     Size  Location     Type
  4312 ;;		None
  4313 ;; Return value:  Size  Location     Type
  4314 ;;                  1    wreg      void 
  4315 ;; Registers used:
  4316 ;;		wreg, status,2, status,0, cstack
  4317 ;; Tracked objects:
  4318 ;;		On entry : 0/0
  4319 ;;		On exit  : 0/0
  4320 ;;		Unchanged: 0/0
  4321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4325 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4326 ;;Total ram usage:        1 bytes
  4327 ;; Hardware stack levels used:    1
  4328 ;; Hardware stack levels required when called:    9
  4329 ;; This function calls:
  4330 ;;		_lcdInst
  4331 ;; This function is called by:
  4332 ;;		_main
  4333 ;; This function uses a non-reentrant model
  4334 ;;
  4335                           
  4336                           	psect	text21
  4337  002388                     __ptext21:
  4338                           	opt stack 0
  4339  002388                     _initLCD:
  4340                           	opt stack 21
  4341                           
  4342                           ;lcd.c: 48: _delay((unsigned long)((15)*(32000000/4000.0)));
  4343                           
  4344                           ;incstack = 0
  4345  002388  0E9C               	movlw	156
  4346  00238A  0100               	movlb	0	; () banked
  4347  00238C  6F83               	movwf	??_initLCD& (0+255),b
  4348  00238E  0ED7               	movlw	215
  4349  002390                     u4737:
  4350  002390  2EE8               	decfsz	wreg,f,c
  4351  002392  D7FE               	bra	u4737
  4352  002394  2F83               	decfsz	??_initLCD& (0+255),f,b
  4353  002396  D7FC               	bra	u4737
  4354                           
  4355                           ;lcd.c: 49: lcdInst(0b00110011);
  4356  002398  0E33               	movlw	51
  4357  00239A  ECF1  F014         	call	_lcdInst
  4358                           
  4359                           ;lcd.c: 50: lcdInst(0b00110010);
  4360  00239E  0E32               	movlw	50
  4361  0023A0  ECF1  F014         	call	_lcdInst
  4362                           
  4363                           ;lcd.c: 52: lcdInst(0b00101000);
  4364  0023A4  0E28               	movlw	40
  4365  0023A6  ECF1  F014         	call	_lcdInst
  4366                           
  4367                           ;lcd.c: 53: lcdInst(0b00001100);
  4368  0023AA  0E0C               	movlw	12
  4369  0023AC  ECF1  F014         	call	_lcdInst
  4370                           
  4371                           ;lcd.c: 54: lcdInst(0b00000110);
  4372  0023B0  0E06               	movlw	6
  4373  0023B2  ECF1  F014         	call	_lcdInst
  4374                           
  4375                           ;lcd.c: 55: lcdInst(0b00000001);
  4376  0023B6  0E01               	movlw	1
  4377  0023B8  ECF1  F014         	call	_lcdInst
  4378                           
  4379                           ;lcd.c: 56: _delay((unsigned long)((15)*(32000000/4000.0)));
  4380  0023BC  0E9C               	movlw	156
  4381  0023BE  0100               	movlb	0	; () banked
  4382  0023C0  6F83               	movwf	??_initLCD& (0+255),b
  4383  0023C2  0ED7               	movlw	215
  4384  0023C4                     u4747:
  4385  0023C4  2EE8               	decfsz	wreg,f,c
  4386  0023C6  D7FE               	bra	u4747
  4387  0023C8  2F83               	decfsz	??_initLCD& (0+255),f,b
  4388  0023CA  D7FC               	bra	u4747
  4389  0023CC  0012               	return		;funcret
  4390  0023CE                     __end_of_initLCD:
  4391                           	opt stack 0
  4392                           tblptru	equ	0xFF8
  4393                           tblptrh	equ	0xFF7
  4394                           tblptrl	equ	0xFF6
  4395                           tablat	equ	0xFF5
  4396                           prodh	equ	0xFF4
  4397                           prodl	equ	0xFF3
  4398                           intcon	equ	0xFF2
  4399                           intcon2	equ	0xFF1
  4400                           intcon3	equ	0xFF0
  4401                           postinc0	equ	0xFEE
  4402                           wreg	equ	0xFE8
  4403                           postdec1	equ	0xFE5
  4404                           fsr1l	equ	0xFE1
  4405                           indf2	equ	0xFDF
  4406                           postinc2	equ	0xFDE
  4407                           postdec2	equ	0xFDD
  4408                           fsr2h	equ	0xFDA
  4409                           fsr2l	equ	0xFD9
  4410                           status	equ	0xFD8
  4411                           
  4412 ;; *************** function _UI *****************
  4413 ;; Defined at:
  4414 ;;		line 72 in file "UI.c"
  4415 ;; Parameters:    Size  Location     Type
  4416 ;;		None
  4417 ;; Auto vars:     Size  Location     Type
  4418 ;;  i               1   83[BANK0 ] unsigned char 
  4419 ;;  i               1   82[BANK0 ] unsigned char 
  4420 ;;  i               1   81[BANK0 ] unsigned char 
  4421 ;;  i               1   80[BANK0 ] unsigned char 
  4422 ;;  i               1   79[BANK0 ] unsigned char 
  4423 ;;  i               1   78[BANK0 ] unsigned char 
  4424 ;;  i               1   77[BANK0 ] unsigned char 
  4425 ;;  i               1   76[BANK0 ] unsigned char 
  4426 ;;  i               1   75[BANK0 ] unsigned char 
  4427 ;;  i               1   74[BANK0 ] unsigned char 
  4428 ;;  i               1   73[BANK0 ] unsigned char 
  4429 ;;  i               1   72[BANK0 ] unsigned char 
  4430 ;;  i               1   71[BANK0 ] unsigned char 
  4431 ;; Return value:  Size  Location     Type
  4432 ;;                  1    wreg      void 
  4433 ;; Registers used:
  4434 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4435 ;; Tracked objects:
  4436 ;;		On entry : 0/0
  4437 ;;		On exit  : 0/0
  4438 ;;		Unchanged: 0/0
  4439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4441 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4442 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4443 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4444 ;;Total ram usage:       16 bytes
  4445 ;; Hardware stack levels used:    1
  4446 ;; Hardware stack levels required when called:   11
  4447 ;; This function calls:
  4448 ;;		___awdiv
  4449 ;;		___awmod
  4450 ;;		_change_state_to_menu_12
  4451 ;;		_change_state_to_menu_22
  4452 ;;		_lcdInst
  4453 ;;		_printRTC
  4454 ;;		_printf
  4455 ;; This function is called by:
  4456 ;;		_main
  4457 ;; This function uses a non-reentrant model
  4458 ;;
  4459                           
  4460                           	psect	text22
  4461  000012                     __ptext22:
  4462                           	opt stack 0
  4463  000012                     _UI:
  4464                           	opt stack 19
  4465                           
  4466                           ;UI.c: 73: if(machine_state == DoneSorting_state){
  4467                           
  4468                           ;incstack = 0
  4469  000012  0E02               	movlw	2
  4470  000014  0100               	movlb	0	; () banked
  4471  000016  19F3               	xorwf	_machine_state& (0+255),w,b
  4472  000018  A4D8               	btfss	status,2,c
  4473  00001A  D071               	goto	l5300
  4474                           
  4475                           ; BSR set to: 0
  4476                           ;UI.c: 74: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4477  00001C  0E01               	movlw	1
  4478  00001E  ECF1  F014         	call	_lcdInst
  4479  000022  0E68               	movlw	104
  4480  000024  0100               	movlb	0	; () banked
  4481  000026  6FC4               	movwf	??_UI& (0+255),b
  4482  000028  0EE4               	movlw	228
  4483  00002A                     u4757:
  4484  00002A  2EE8               	decfsz	wreg,f,c
  4485  00002C  D7FE               	bra	u4757
  4486  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  4487  000030  D7FC               	bra	u4757
  4488  000032  F000               	nop	
  4489                           
  4490                           ;UI.c: 75: lcdInst(0b10000000);;
  4491  000034  0E80               	movlw	128
  4492  000036  ECF1  F014         	call	_lcdInst
  4493                           
  4494                           ;UI.c: 76: printf("!SORT CONCLUDED!");
  4495  00003A  0EBA               	movlw	low STR_1
  4496  00003C  0100               	movlb	0	; () banked
  4497  00003E  6F8E               	movwf	printf@f& (0+255),b
  4498  000040  0EFE               	movlw	high STR_1
  4499  000042  0100               	movlb	0	; () banked
  4500  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  4501  000046  ECBB  F002         	call	_printf	;wreg free
  4502                           
  4503                           ;UI.c: 77: lcdInst(0b11000000);;
  4504  00004A  0EC0               	movlw	192
  4505  00004C  ECF1  F014         	call	_lcdInst
  4506                           
  4507                           ;UI.c: 78: printf("Time: %02d:%02d:%02d", 0, (total_time % 3600) / 60, (total_time % 360
      +                          0) % 60);
  4508  000050  0E0E               	movlw	14
  4509  000052  0100               	movlb	0	; () banked
  4510  000054  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4511  000056  0E10               	movlw	16
  4512  000058  6F82               	movwf	___awmod@divisor& (0+255),b
  4513  00005A  C0F1  F080         	movff	_total_time,___awmod@dividend
  4514  00005E  C0F2  F081         	movff	_total_time+1,___awmod@dividend+1
  4515  000062  EC75  F00E         	call	___awmod	;wreg free
  4516  000066  C080  F0C5         	movff	?___awmod,_UI$2167
  4517  00006A  C081  F0C6         	movff	?___awmod+1,_UI$2167+1
  4518                           
  4519                           ;UI.c: 78: printf("Time: %02d:%02d:%02d", 0, (total_time % 3600) / 60, (total_time % 360
      +                          0) % 60);
  4520  00006E  0EE8               	movlw	low STR_2
  4521  000070  0100               	movlb	0	; () banked
  4522  000072  6F8E               	movwf	printf@f& (0+255),b
  4523  000074  0EFD               	movlw	high STR_2
  4524  000076  0100               	movlb	0	; () banked
  4525  000078  6F8F               	movwf	(printf@f+1)& (0+255),b
  4526  00007A  0E00               	movlw	0
  4527  00007C  0100               	movlb	0	; () banked
  4528  00007E  6F91               	movwf	(?_printf+3)& (0+255),b
  4529  000080  0E00               	movlw	0
  4530  000082  6F90               	movwf	(?_printf+2)& (0+255),b
  4531  000084  0E0E               	movlw	14
  4532  000086  0100               	movlb	0	; () banked
  4533  000088  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4534  00008A  0E10               	movlw	16
  4535  00008C  6F82               	movwf	___awmod@divisor& (0+255),b
  4536  00008E  C0F1  F080         	movff	_total_time,___awmod@dividend
  4537  000092  C0F2  F081         	movff	_total_time+1,___awmod@dividend+1
  4538  000096  EC75  F00E         	call	___awmod	;wreg free
  4539  00009A  C080  F086         	movff	?___awmod,___awdiv@dividend
  4540  00009E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  4541  0000A2  0E00               	movlw	0
  4542  0000A4  0100               	movlb	0	; () banked
  4543  0000A6  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  4544  0000A8  0E3C               	movlw	60
  4545  0000AA  6F88               	movwf	___awdiv@divisor& (0+255),b
  4546  0000AC  ECBE  F00C         	call	___awdiv	;wreg free
  4547  0000B0  C086  F092         	movff	?___awdiv,?_printf+4
  4548  0000B4  C087  F093         	movff	?___awdiv+1,?_printf+5
  4549  0000B8  C0C5  F080         	movff	_UI$2167,___awmod@dividend
  4550  0000BC  C0C6  F081         	movff	_UI$2167+1,___awmod@dividend+1
  4551  0000C0  0E00               	movlw	0
  4552  0000C2  0100               	movlb	0	; () banked
  4553  0000C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4554  0000C6  0E3C               	movlw	60
  4555  0000C8  6F82               	movwf	___awmod@divisor& (0+255),b
  4556  0000CA  EC75  F00E         	call	___awmod	;wreg free
  4557  0000CE  C080  F094         	movff	?___awmod,?_printf+6
  4558  0000D2  C081  F095         	movff	?___awmod+1,?_printf+7
  4559  0000D6  ECBB  F002         	call	_printf	;wreg free
  4560                           
  4561                           ;UI.c: 79: machine_state = UI_state;
  4562  0000DA  0E00               	movlw	0
  4563  0000DC  0100               	movlb	0	; () banked
  4564  0000DE  6FF3               	movwf	_machine_state& (0+255),b
  4565  0000E0                     l417:
  4566  0000E0  A281               	btfss	3969,1,c	;volatile
  4567  0000E2  D7FE               	goto	l417
  4568                           
  4569                           ;UI.c: 82: }
  4570                           ;UI.c: 83: if(cur_state==12){
  4571  0000E4  0E0C               	movlw	12
  4572  0000E6  0100               	movlb	0	; () banked
  4573  0000E8  19E1               	xorwf	_cur_state& (0+255),w,b
  4574  0000EA  0100               	movlb	0	; () banked
  4575  0000EC  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
  4576  0000EE  A4D8               	btfss	status,2,c
  4577  0000F0  D003               	goto	l5298
  4578                           
  4579                           ; BSR set to: 0
  4580                           ;UI.c: 84: change_state_to_menu_12();
  4581  0000F2  EC65  F012         	call	_change_state_to_menu_12	;wreg free
  4582                           
  4583                           ;UI.c: 85: }
  4584  0000F6  D238               	goto	l5556
  4585  0000F8                     l5298:
  4586                           
  4587                           ;UI.c: 86: else{
  4588                           ;UI.c: 87: change_state_to_menu_22();
  4589  0000F8  EC49  F012         	call	_change_state_to_menu_22	;wreg free
  4590                           
  4591                           ;UI.c: 88: }
  4592                           ;UI.c: 89: }
  4593  0000FC  D235               	goto	l5556
  4594  0000FE                     l5300:
  4595                           
  4596                           ;UI.c: 90: else if(cur_state == 0){
  4597  0000FE  0100               	movlb	0	; () banked
  4598  000100  51E1               	movf	_cur_state& (0+255),w,b
  4599  000102  0100               	movlb	0	; () banked
  4600  000104  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
  4601  000106  A4D8               	btfss	status,2,c
  4602  000108  D22F               	goto	l5556
  4603                           
  4604                           ; BSR set to: 0
  4605                           ;UI.c: 91: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  4606  00010A  0E00               	movlw	0
  4607  00010C  0100               	movlb	0	; () banked
  4608  00010E  6FC7               	movwf	UI@i& (0+255),b
  4609  000110                     l5304:
  4610                           
  4611                           ; BSR set to: 0
  4612  000110  0E63               	movlw	99
  4613  000112  0100               	movlb	0	; () banked
  4614  000114  65C7               	cpfsgt	UI@i& (0+255),b
  4615  000116  D001               	goto	l5308
  4616  000118  D00C               	goto	l5312
  4617  00011A                     l5308:
  4618                           
  4619                           ; BSR set to: 0
  4620  00011A  0E68               	movlw	104
  4621  00011C  0100               	movlb	0	; () banked
  4622  00011E  6FC4               	movwf	??_UI& (0+255),b
  4623  000120  0EE4               	movlw	228
  4624  000122                     u4767:
  4625  000122  2EE8               	decfsz	wreg,f,c
  4626  000124  D7FE               	bra	u4767
  4627  000126  2FC4               	decfsz	??_UI& (0+255),f,b
  4628  000128  D7FC               	bra	u4767
  4629  00012A  F000               	nop	
  4630  00012C  0100               	movlb	0	; () banked
  4631  00012E  2BC7               	incf	UI@i& (0+255),f,b
  4632  000130  D7EF               	goto	l5304
  4633  000132                     l5312:
  4634                           
  4635                           ; BSR set to: 0
  4636                           ;UI.c: 92: if(cur_state == 0){
  4637  000132  0100               	movlb	0	; () banked
  4638  000134  51E1               	movf	_cur_state& (0+255),w,b
  4639  000136  0100               	movlb	0	; () banked
  4640  000138  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
  4641  00013A  A4D8               	btfss	status,2,c
  4642  00013C  D215               	goto	l5556
  4643                           
  4644                           ; BSR set to: 0
  4645                           ;UI.c: 93: printRTC();
  4646  00013E  EC63  F006         	call	_printRTC	;wreg free
  4647                           
  4648                           ;UI.c: 94: }
  4649                           ;UI.c: 95: }
  4650                           ;UI.c: 96: while(logstate){
  4651  000142  D212               	goto	l5556
  4652  000144                     l5316:
  4653                           
  4654                           ;UI.c: 98: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4655  000144  0E01               	movlw	1
  4656  000146  ECF1  F014         	call	_lcdInst
  4657  00014A  0E68               	movlw	104
  4658  00014C  0100               	movlb	0	; () banked
  4659  00014E  6FC4               	movwf	??_UI& (0+255),b
  4660  000150  0EE4               	movlw	228
  4661  000152                     u4777:
  4662  000152  2EE8               	decfsz	wreg,f,c
  4663  000154  D7FE               	bra	u4777
  4664  000156  2FC4               	decfsz	??_UI& (0+255),f,b
  4665  000158  D7FC               	bra	u4777
  4666  00015A  F000               	nop	
  4667                           
  4668                           ;UI.c: 99: lcdInst(0b10000000);;
  4669  00015C  0E80               	movlw	128
  4670  00015E  ECF1  F014         	call	_lcdInst
  4671                           
  4672                           ;UI.c: 100: printf("-- Log %2d here--", log);
  4673  000162  0EFD               	movlw	low STR_3
  4674  000164  0100               	movlb	0	; () banked
  4675  000166  6F8E               	movwf	printf@f& (0+255),b
  4676  000168  0EFD               	movlw	high STR_3
  4677  00016A  0100               	movlb	0	; () banked
  4678  00016C  6F8F               	movwf	(printf@f+1)& (0+255),b
  4679  00016E  C0ED  F090         	movff	_log,?_printf+2
  4680  000172  C0EE  F091         	movff	_log+1,?_printf+3
  4681  000176  ECBB  F002         	call	_printf	;wreg free
  4682                           
  4683                           ;UI.c: 101: lcdInst(0b11000000);;
  4684  00017A  0EC0               	movlw	192
  4685  00017C  ECF1  F014         	call	_lcdInst
  4686                           
  4687                           ;UI.c: 102: printf("Pause:< | Back:>");
  4688  000180  0E86               	movlw	low STR_4
  4689  000182  0100               	movlb	0	; () banked
  4690  000184  6F8E               	movwf	printf@f& (0+255),b
  4691  000186  0EFF               	movlw	high STR_4
  4692  000188  0100               	movlb	0	; () banked
  4693  00018A  6F8F               	movwf	(printf@f+1)& (0+255),b
  4694  00018C  ECBB  F002         	call	_printf	;wreg free
  4695                           
  4696                           ;UI.c: 104: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4697  000190  0E00               	movlw	0
  4698  000192  0100               	movlb	0	; () banked
  4699  000194  6FC8               	movwf	UI@i_683& (0+255),b
  4700  000196                     l5330:
  4701                           
  4702                           ; BSR set to: 0
  4703  000196  0E63               	movlw	99
  4704  000198  0100               	movlb	0	; () banked
  4705  00019A  65C8               	cpfsgt	UI@i_683& (0+255),b
  4706  00019C  D001               	goto	l5334
  4707  00019E  D00C               	goto	l5338
  4708  0001A0                     l5334:
  4709                           
  4710                           ; BSR set to: 0
  4711  0001A0  0E68               	movlw	104
  4712  0001A2  0100               	movlb	0	; () banked
  4713  0001A4  6FC4               	movwf	??_UI& (0+255),b
  4714  0001A6  0EE4               	movlw	228
  4715  0001A8                     u4787:
  4716  0001A8  2EE8               	decfsz	wreg,f,c
  4717  0001AA  D7FE               	bra	u4787
  4718  0001AC  2FC4               	decfsz	??_UI& (0+255),f,b
  4719  0001AE  D7FC               	bra	u4787
  4720  0001B0  F000               	nop	
  4721  0001B2  0100               	movlb	0	; () banked
  4722  0001B4  2BC8               	incf	UI@i_683& (0+255),f,b
  4723  0001B6  D7EF               	goto	l5330
  4724  0001B8                     l5338:
  4725                           
  4726                           ; BSR set to: 0
  4727  0001B8  0100               	movlb	0	; () banked
  4728  0001BA  51EF               	movf	_logstate& (0+255),w,b
  4729  0001BC  0100               	movlb	0	; () banked
  4730  0001BE  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4731  0001C0  B4D8               	btfsc	status,2,c
  4732  0001C2  0012               	return	
  4733                           
  4734                           ; BSR set to: 0
  4735                           ;UI.c: 105: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4736                           
  4737                           ; BSR set to: 0
  4738                           
  4739                           ; BSR set to: 0
  4740  0001C4  0E00               	movlw	0
  4741  0001C6  0100               	movlb	0	; () banked
  4742  0001C8  6FC9               	movwf	UI@i_684& (0+255),b
  4743  0001CA                     l5344:
  4744                           
  4745                           ; BSR set to: 0
  4746  0001CA  0E63               	movlw	99
  4747  0001CC  0100               	movlb	0	; () banked
  4748  0001CE  65C9               	cpfsgt	UI@i_684& (0+255),b
  4749  0001D0  D001               	goto	l5348
  4750  0001D2  D00C               	goto	l5352
  4751  0001D4                     l5348:
  4752                           
  4753                           ; BSR set to: 0
  4754  0001D4  0E68               	movlw	104
  4755  0001D6  0100               	movlb	0	; () banked
  4756  0001D8  6FC4               	movwf	??_UI& (0+255),b
  4757  0001DA  0EE4               	movlw	228
  4758  0001DC                     u4797:
  4759  0001DC  2EE8               	decfsz	wreg,f,c
  4760  0001DE  D7FE               	bra	u4797
  4761  0001E0  2FC4               	decfsz	??_UI& (0+255),f,b
  4762  0001E2  D7FC               	bra	u4797
  4763  0001E4  F000               	nop	
  4764  0001E6  0100               	movlb	0	; () banked
  4765  0001E8  2BC9               	incf	UI@i_684& (0+255),f,b
  4766  0001EA  D7EF               	goto	l5344
  4767  0001EC                     l5352:
  4768                           
  4769                           ; BSR set to: 0
  4770  0001EC  0100               	movlb	0	; () banked
  4771  0001EE  51EF               	movf	_logstate& (0+255),w,b
  4772  0001F0  0100               	movlb	0	; () banked
  4773  0001F2  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4774  0001F4  B4D8               	btfsc	status,2,c
  4775  0001F6  0012               	return	
  4776                           
  4777                           ; BSR set to: 0
  4778                           ;UI.c: 107: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4779                           
  4780                           ; BSR set to: 0
  4781                           
  4782                           ; BSR set to: 0
  4783  0001F8  0E01               	movlw	1
  4784  0001FA  ECF1  F014         	call	_lcdInst
  4785  0001FE  0E68               	movlw	104
  4786  000200  0100               	movlb	0	; () banked
  4787  000202  6FC4               	movwf	??_UI& (0+255),b
  4788  000204  0EE4               	movlw	228
  4789  000206                     u4807:
  4790  000206  2EE8               	decfsz	wreg,f,c
  4791  000208  D7FE               	bra	u4807
  4792  00020A  2FC4               	decfsz	??_UI& (0+255),f,b
  4793  00020C  D7FC               	bra	u4807
  4794  00020E  F000               	nop	
  4795                           
  4796                           ;UI.c: 108: lcdInst(0b10000000);;
  4797  000210  0E80               	movlw	128
  4798  000212  ECF1  F014         	call	_lcdInst
  4799                           
  4800                           ;UI.c: 109: printf("Start:");
  4801  000216  0EC4               	movlw	low STR_5
  4802  000218  0100               	movlb	0	; () banked
  4803  00021A  6F8E               	movwf	printf@f& (0+255),b
  4804  00021C  0EFF               	movlw	high STR_5
  4805  00021E  0100               	movlb	0	; () banked
  4806  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  4807  000222  ECBB  F002         	call	_printf	;wreg free
  4808                           
  4809                           ;UI.c: 110: lcdInst(0b11000000);;
  4810  000226  0EC0               	movlw	192
  4811  000228  ECF1  F014         	call	_lcdInst
  4812                           
  4813                           ;UI.c: 111: printf("06Feb | 01:08:56");
  4814  00022C  0EFE               	movlw	low STR_6
  4815  00022E  0100               	movlb	0	; () banked
  4816  000230  6F8E               	movwf	printf@f& (0+255),b
  4817  000232  0EFE               	movlw	high STR_6
  4818  000234  0100               	movlb	0	; () banked
  4819  000236  6F8F               	movwf	(printf@f+1)& (0+255),b
  4820  000238  ECBB  F002         	call	_printf	;wreg free
  4821                           
  4822                           ;UI.c: 113: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4823  00023C  0E00               	movlw	0
  4824  00023E  0100               	movlb	0	; () banked
  4825  000240  6FCA               	movwf	UI@i_687& (0+255),b
  4826  000242                     l5370:
  4827                           
  4828                           ; BSR set to: 0
  4829  000242  0E63               	movlw	99
  4830  000244  0100               	movlb	0	; () banked
  4831  000246  65CA               	cpfsgt	UI@i_687& (0+255),b
  4832  000248  D001               	goto	l5374
  4833  00024A  D00C               	goto	l5378
  4834  00024C                     l5374:
  4835                           
  4836                           ; BSR set to: 0
  4837  00024C  0E68               	movlw	104
  4838  00024E  0100               	movlb	0	; () banked
  4839  000250  6FC4               	movwf	??_UI& (0+255),b
  4840  000252  0EE4               	movlw	228
  4841  000254                     u4817:
  4842  000254  2EE8               	decfsz	wreg,f,c
  4843  000256  D7FE               	bra	u4817
  4844  000258  2FC4               	decfsz	??_UI& (0+255),f,b
  4845  00025A  D7FC               	bra	u4817
  4846  00025C  F000               	nop	
  4847  00025E  0100               	movlb	0	; () banked
  4848  000260  2BCA               	incf	UI@i_687& (0+255),f,b
  4849  000262  D7EF               	goto	l5370
  4850  000264                     l5378:
  4851                           
  4852                           ; BSR set to: 0
  4853  000264  0100               	movlb	0	; () banked
  4854  000266  51EF               	movf	_logstate& (0+255),w,b
  4855  000268  0100               	movlb	0	; () banked
  4856  00026A  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4857  00026C  B4D8               	btfsc	status,2,c
  4858  00026E  0012               	return	
  4859                           
  4860                           ; BSR set to: 0
  4861                           ;UI.c: 114: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4862                           
  4863                           ; BSR set to: 0
  4864                           
  4865                           ; BSR set to: 0
  4866  000270  0E00               	movlw	0
  4867  000272  0100               	movlb	0	; () banked
  4868  000274  6FCB               	movwf	UI@i_688& (0+255),b
  4869  000276                     l5384:
  4870                           
  4871                           ; BSR set to: 0
  4872  000276  0E63               	movlw	99
  4873  000278  0100               	movlb	0	; () banked
  4874  00027A  65CB               	cpfsgt	UI@i_688& (0+255),b
  4875  00027C  D001               	goto	l5388
  4876  00027E  D00C               	goto	l5392
  4877  000280                     l5388:
  4878                           
  4879                           ; BSR set to: 0
  4880  000280  0E68               	movlw	104
  4881  000282  0100               	movlb	0	; () banked
  4882  000284  6FC4               	movwf	??_UI& (0+255),b
  4883  000286  0EE4               	movlw	228
  4884  000288                     u4827:
  4885  000288  2EE8               	decfsz	wreg,f,c
  4886  00028A  D7FE               	bra	u4827
  4887  00028C  2FC4               	decfsz	??_UI& (0+255),f,b
  4888  00028E  D7FC               	bra	u4827
  4889  000290  F000               	nop	
  4890  000292  0100               	movlb	0	; () banked
  4891  000294  2BCB               	incf	UI@i_688& (0+255),f,b
  4892  000296  D7EF               	goto	l5384
  4893  000298                     l5392:
  4894                           
  4895                           ; BSR set to: 0
  4896  000298  0100               	movlb	0	; () banked
  4897  00029A  51EF               	movf	_logstate& (0+255),w,b
  4898  00029C  0100               	movlb	0	; () banked
  4899  00029E  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4900  0002A0  B4D8               	btfsc	status,2,c
  4901  0002A2  0012               	return	
  4902                           
  4903                           ; BSR set to: 0
  4904                           ;UI.c: 116: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4905                           
  4906                           ; BSR set to: 0
  4907                           
  4908                           ; BSR set to: 0
  4909  0002A4  0E01               	movlw	1
  4910  0002A6  ECF1  F014         	call	_lcdInst
  4911  0002AA  0E68               	movlw	104
  4912  0002AC  0100               	movlb	0	; () banked
  4913  0002AE  6FC4               	movwf	??_UI& (0+255),b
  4914  0002B0  0EE4               	movlw	228
  4915  0002B2                     u4837:
  4916  0002B2  2EE8               	decfsz	wreg,f,c
  4917  0002B4  D7FE               	bra	u4837
  4918  0002B6  2FC4               	decfsz	??_UI& (0+255),f,b
  4919  0002B8  D7FC               	bra	u4837
  4920  0002BA  F000               	nop	
  4921                           
  4922                           ;UI.c: 117: lcdInst(0b10000000);;
  4923  0002BC  0E80               	movlw	128
  4924  0002BE  ECF1  F014         	call	_lcdInst
  4925                           
  4926                           ;UI.c: 118: printf("Duration:");
  4927  0002C2  0EB3               	movlw	low STR_7
  4928  0002C4  0100               	movlb	0	; () banked
  4929  0002C6  6F8E               	movwf	printf@f& (0+255),b
  4930  0002C8  0EFF               	movlw	high STR_7
  4931  0002CA  0100               	movlb	0	; () banked
  4932  0002CC  6F8F               	movwf	(printf@f+1)& (0+255),b
  4933  0002CE  ECBB  F002         	call	_printf	;wreg free
  4934                           
  4935                           ;UI.c: 119: lcdInst(0b11000000);;
  4936  0002D2  0EC0               	movlw	192
  4937  0002D4  ECF1  F014         	call	_lcdInst
  4938                           
  4939                           ;UI.c: 120: printf("%d min(s) %d secs", 2, 42);
  4940  0002D8  0E0F               	movlw	low STR_8
  4941  0002DA  0100               	movlb	0	; () banked
  4942  0002DC  6F8E               	movwf	printf@f& (0+255),b
  4943  0002DE  0EFE               	movlw	high STR_8
  4944  0002E0  0100               	movlb	0	; () banked
  4945  0002E2  6F8F               	movwf	(printf@f+1)& (0+255),b
  4946  0002E4  0E00               	movlw	0
  4947  0002E6  0100               	movlb	0	; () banked
  4948  0002E8  6F91               	movwf	(?_printf+3)& (0+255),b
  4949  0002EA  0E02               	movlw	2
  4950  0002EC  6F90               	movwf	(?_printf+2)& (0+255),b
  4951  0002EE  0E00               	movlw	0
  4952  0002F0  0100               	movlb	0	; () banked
  4953  0002F2  6F93               	movwf	(?_printf+5)& (0+255),b
  4954  0002F4  0E2A               	movlw	42
  4955  0002F6  6F92               	movwf	(?_printf+4)& (0+255),b
  4956  0002F8  ECBB  F002         	call	_printf	;wreg free
  4957                           
  4958                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4959  0002FC  0E00               	movlw	0
  4960  0002FE  0100               	movlb	0	; () banked
  4961  000300  6FCC               	movwf	UI@i_691& (0+255),b
  4962  000302                     l5410:
  4963                           
  4964                           ; BSR set to: 0
  4965  000302  0E63               	movlw	99
  4966  000304  0100               	movlb	0	; () banked
  4967  000306  65CC               	cpfsgt	UI@i_691& (0+255),b
  4968  000308  D001               	goto	l5414
  4969  00030A  D00C               	goto	l5418
  4970  00030C                     l5414:
  4971                           
  4972                           ; BSR set to: 0
  4973  00030C  0E68               	movlw	104
  4974  00030E  0100               	movlb	0	; () banked
  4975  000310  6FC4               	movwf	??_UI& (0+255),b
  4976  000312  0EE4               	movlw	228
  4977  000314                     u4847:
  4978  000314  2EE8               	decfsz	wreg,f,c
  4979  000316  D7FE               	bra	u4847
  4980  000318  2FC4               	decfsz	??_UI& (0+255),f,b
  4981  00031A  D7FC               	bra	u4847
  4982  00031C  F000               	nop	
  4983  00031E  0100               	movlb	0	; () banked
  4984  000320  2BCC               	incf	UI@i_691& (0+255),f,b
  4985  000322  D7EF               	goto	l5410
  4986  000324                     l5418:
  4987                           
  4988                           ; BSR set to: 0
  4989  000324  0100               	movlb	0	; () banked
  4990  000326  51EF               	movf	_logstate& (0+255),w,b
  4991  000328  0100               	movlb	0	; () banked
  4992  00032A  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  4993  00032C  B4D8               	btfsc	status,2,c
  4994  00032E  0012               	return	
  4995                           
  4996                           ; BSR set to: 0
  4997                           ;UI.c: 123: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4998                           
  4999                           ; BSR set to: 0
  5000                           
  5001                           ; BSR set to: 0
  5002  000330  0E00               	movlw	0
  5003  000332  0100               	movlb	0	; () banked
  5004  000334  6FCD               	movwf	UI@i_692& (0+255),b
  5005  000336                     l5424:
  5006                           
  5007                           ; BSR set to: 0
  5008  000336  0E63               	movlw	99
  5009  000338  0100               	movlb	0	; () banked
  5010  00033A  65CD               	cpfsgt	UI@i_692& (0+255),b
  5011  00033C  D001               	goto	l5428
  5012  00033E  D00C               	goto	l5432
  5013  000340                     l5428:
  5014                           
  5015                           ; BSR set to: 0
  5016  000340  0E68               	movlw	104
  5017  000342  0100               	movlb	0	; () banked
  5018  000344  6FC4               	movwf	??_UI& (0+255),b
  5019  000346  0EE4               	movlw	228
  5020  000348                     u4857:
  5021  000348  2EE8               	decfsz	wreg,f,c
  5022  00034A  D7FE               	bra	u4857
  5023  00034C  2FC4               	decfsz	??_UI& (0+255),f,b
  5024  00034E  D7FC               	bra	u4857
  5025  000350  F000               	nop	
  5026  000352  0100               	movlb	0	; () banked
  5027  000354  2BCD               	incf	UI@i_692& (0+255),f,b
  5028  000356  D7EF               	goto	l5424
  5029  000358                     l5432:
  5030                           
  5031                           ; BSR set to: 0
  5032  000358  0100               	movlb	0	; () banked
  5033  00035A  51EF               	movf	_logstate& (0+255),w,b
  5034  00035C  0100               	movlb	0	; () banked
  5035  00035E  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  5036  000360  B4D8               	btfsc	status,2,c
  5037  000362  0012               	return	
  5038                           
  5039                           ; BSR set to: 0
  5040                           ;UI.c: 125: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5041                           
  5042                           ; BSR set to: 0
  5043                           
  5044                           ; BSR set to: 0
  5045  000364  0E01               	movlw	1
  5046  000366  ECF1  F014         	call	_lcdInst
  5047  00036A  0E68               	movlw	104
  5048  00036C  0100               	movlb	0	; () banked
  5049  00036E  6FC4               	movwf	??_UI& (0+255),b
  5050  000370  0EE4               	movlw	228
  5051  000372                     u4867:
  5052  000372  2EE8               	decfsz	wreg,f,c
  5053  000374  D7FE               	bra	u4867
  5054  000376  2FC4               	decfsz	??_UI& (0+255),f,b
  5055  000378  D7FC               	bra	u4867
  5056  00037A  F000               	nop	
  5057                           
  5058                           ;UI.c: 126: lcdInst(0b10000000);;
  5059  00037C  0E80               	movlw	128
  5060  00037E  ECF1  F014         	call	_lcdInst
  5061                           
  5062                           ;UI.c: 127: printf(" -- Pop  can -- ");
  5063  000382  0E98               	movlw	low STR_9
  5064  000384  0100               	movlb	0	; () banked
  5065  000386  6F8E               	movwf	printf@f& (0+255),b
  5066  000388  0EFE               	movlw	high STR_9
  5067  00038A  0100               	movlb	0	; () banked
  5068  00038C  6F8F               	movwf	(printf@f+1)& (0+255),b
  5069  00038E  ECBB  F002         	call	_printf	;wreg free
  5070                           
  5071                           ;UI.c: 128: lcdInst(0b11000000);;
  5072  000392  0EC0               	movlw	192
  5073  000394  ECF1  F014         	call	_lcdInst
  5074                           
  5075                           ;UI.c: 129: printf("No tab: 9|Tab: 1");
  5076  000398  0EDC               	movlw	low STR_10
  5077  00039A  0100               	movlb	0	; () banked
  5078  00039C  6F8E               	movwf	printf@f& (0+255),b
  5079  00039E  0EFE               	movlw	high STR_10
  5080  0003A0  0100               	movlb	0	; () banked
  5081  0003A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  5082  0003A4  ECBB  F002         	call	_printf	;wreg free
  5083                           
  5084                           ;UI.c: 131: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5085  0003A8  0E00               	movlw	0
  5086  0003AA  0100               	movlb	0	; () banked
  5087  0003AC  6FCE               	movwf	UI@i_695& (0+255),b
  5088  0003AE                     l5450:
  5089                           
  5090                           ; BSR set to: 0
  5091  0003AE  0E63               	movlw	99
  5092  0003B0  0100               	movlb	0	; () banked
  5093  0003B2  65CE               	cpfsgt	UI@i_695& (0+255),b
  5094  0003B4  D001               	goto	l5454
  5095  0003B6  D00C               	goto	l5458
  5096  0003B8                     l5454:
  5097                           
  5098                           ; BSR set to: 0
  5099  0003B8  0E68               	movlw	104
  5100  0003BA  0100               	movlb	0	; () banked
  5101  0003BC  6FC4               	movwf	??_UI& (0+255),b
  5102  0003BE  0EE4               	movlw	228
  5103  0003C0                     u4877:
  5104  0003C0  2EE8               	decfsz	wreg,f,c
  5105  0003C2  D7FE               	bra	u4877
  5106  0003C4  2FC4               	decfsz	??_UI& (0+255),f,b
  5107  0003C6  D7FC               	bra	u4877
  5108  0003C8  F000               	nop	
  5109  0003CA  0100               	movlb	0	; () banked
  5110  0003CC  2BCE               	incf	UI@i_695& (0+255),f,b
  5111  0003CE  D7EF               	goto	l5450
  5112  0003D0                     l5458:
  5113                           
  5114                           ; BSR set to: 0
  5115  0003D0  0100               	movlb	0	; () banked
  5116  0003D2  51EF               	movf	_logstate& (0+255),w,b
  5117  0003D4  0100               	movlb	0	; () banked
  5118  0003D6  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  5119  0003D8  B4D8               	btfsc	status,2,c
  5120  0003DA  0012               	return	
  5121                           
  5122                           ; BSR set to: 0
  5123                           ;UI.c: 132: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5124                           
  5125                           ; BSR set to: 0
  5126                           
  5127                           ; BSR set to: 0
  5128  0003DC  0E00               	movlw	0
  5129  0003DE  0100               	movlb	0	; () banked
  5130  0003E0  6FCF               	movwf	UI@i_696& (0+255),b
  5131  0003E2                     l5464:
  5132                           
  5133                           ; BSR set to: 0
  5134  0003E2  0E63               	movlw	99
  5135  0003E4  0100               	movlb	0	; () banked
  5136  0003E6  65CF               	cpfsgt	UI@i_696& (0+255),b
  5137  0003E8  D001               	goto	l5468
  5138  0003EA  D00C               	goto	l5472
  5139  0003EC                     l5468:
  5140                           
  5141                           ; BSR set to: 0
  5142  0003EC  0E68               	movlw	104
  5143  0003EE  0100               	movlb	0	; () banked
  5144  0003F0  6FC4               	movwf	??_UI& (0+255),b
  5145  0003F2  0EE4               	movlw	228
  5146  0003F4                     u4887:
  5147  0003F4  2EE8               	decfsz	wreg,f,c
  5148  0003F6  D7FE               	bra	u4887
  5149  0003F8  2FC4               	decfsz	??_UI& (0+255),f,b
  5150  0003FA  D7FC               	bra	u4887
  5151  0003FC  F000               	nop	
  5152  0003FE  0100               	movlb	0	; () banked
  5153  000400  2BCF               	incf	UI@i_696& (0+255),f,b
  5154  000402  D7EF               	goto	l5464
  5155  000404                     l5472:
  5156                           
  5157                           ; BSR set to: 0
  5158  000404  0100               	movlb	0	; () banked
  5159  000406  51EF               	movf	_logstate& (0+255),w,b
  5160  000408  0100               	movlb	0	; () banked
  5161  00040A  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  5162  00040C  B4D8               	btfsc	status,2,c
  5163  00040E  0012               	return	
  5164                           
  5165                           ; BSR set to: 0
  5166                           ;UI.c: 134: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5167                           
  5168                           ; BSR set to: 0
  5169                           
  5170                           ; BSR set to: 0
  5171  000410  0E01               	movlw	1
  5172  000412  ECF1  F014         	call	_lcdInst
  5173  000416  0E68               	movlw	104
  5174  000418  0100               	movlb	0	; () banked
  5175  00041A  6FC4               	movwf	??_UI& (0+255),b
  5176  00041C  0EE4               	movlw	228
  5177  00041E                     u4897:
  5178  00041E  2EE8               	decfsz	wreg,f,c
  5179  000420  D7FE               	bra	u4897
  5180  000422  2FC4               	decfsz	??_UI& (0+255),f,b
  5181  000424  D7FC               	bra	u4897
  5182  000426  F000               	nop	
  5183                           
  5184                           ;UI.c: 135: lcdInst(0b10000000);;
  5185  000428  0E80               	movlw	128
  5186  00042A  ECF1  F014         	call	_lcdInst
  5187                           
  5188                           ;UI.c: 136: printf(" -- Soup can -- ");
  5189  00042E  0EA9               	movlw	low STR_11
  5190  000430  0100               	movlb	0	; () banked
  5191  000432  6F8E               	movwf	printf@f& (0+255),b
  5192  000434  0EFE               	movlw	high STR_11
  5193  000436  0100               	movlb	0	; () banked
  5194  000438  6F8F               	movwf	(printf@f+1)& (0+255),b
  5195  00043A  ECBB  F002         	call	_printf	;wreg free
  5196                           
  5197                           ;UI.c: 137: lcdInst(0b11000000);;
  5198  00043E  0EC0               	movlw	192
  5199  000440  ECF1  F014         	call	_lcdInst
  5200                           
  5201                           ;UI.c: 138: printf("No lbl: 1|lbl: 1");
  5202  000444  0EED               	movlw	low STR_12
  5203  000446  0100               	movlb	0	; () banked
  5204  000448  6F8E               	movwf	printf@f& (0+255),b
  5205  00044A  0EFE               	movlw	high STR_12
  5206  00044C  0100               	movlb	0	; () banked
  5207  00044E  6F8F               	movwf	(printf@f+1)& (0+255),b
  5208  000450  ECBB  F002         	call	_printf	;wreg free
  5209                           
  5210                           ;UI.c: 140: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5211  000454  0E00               	movlw	0
  5212  000456  0100               	movlb	0	; () banked
  5213  000458  6FD0               	movwf	UI@i_699& (0+255),b
  5214  00045A                     l5490:
  5215                           
  5216                           ; BSR set to: 0
  5217  00045A  0E63               	movlw	99
  5218  00045C  0100               	movlb	0	; () banked
  5219  00045E  65D0               	cpfsgt	UI@i_699& (0+255),b
  5220  000460  D001               	goto	l5494
  5221  000462  D00C               	goto	l5498
  5222  000464                     l5494:
  5223                           
  5224                           ; BSR set to: 0
  5225  000464  0E68               	movlw	104
  5226  000466  0100               	movlb	0	; () banked
  5227  000468  6FC4               	movwf	??_UI& (0+255),b
  5228  00046A  0EE4               	movlw	228
  5229  00046C                     u4907:
  5230  00046C  2EE8               	decfsz	wreg,f,c
  5231  00046E  D7FE               	bra	u4907
  5232  000470  2FC4               	decfsz	??_UI& (0+255),f,b
  5233  000472  D7FC               	bra	u4907
  5234  000474  F000               	nop	
  5235  000476  0100               	movlb	0	; () banked
  5236  000478  2BD0               	incf	UI@i_699& (0+255),f,b
  5237  00047A  D7EF               	goto	l5490
  5238  00047C                     l5498:
  5239                           
  5240                           ; BSR set to: 0
  5241  00047C  0100               	movlb	0	; () banked
  5242  00047E  51EF               	movf	_logstate& (0+255),w,b
  5243  000480  0100               	movlb	0	; () banked
  5244  000482  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  5245  000484  B4D8               	btfsc	status,2,c
  5246  000486  0012               	return	
  5247                           
  5248                           ; BSR set to: 0
  5249                           ;UI.c: 141: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5250                           
  5251                           ; BSR set to: 0
  5252                           
  5253                           ; BSR set to: 0
  5254  000488  0E00               	movlw	0
  5255  00048A  0100               	movlb	0	; () banked
  5256  00048C  6FD1               	movwf	UI@i_700& (0+255),b
  5257  00048E                     l5504:
  5258                           
  5259                           ; BSR set to: 0
  5260  00048E  0E63               	movlw	99
  5261  000490  0100               	movlb	0	; () banked
  5262  000492  65D1               	cpfsgt	UI@i_700& (0+255),b
  5263  000494  D001               	goto	l5508
  5264  000496  D00C               	goto	l5512
  5265  000498                     l5508:
  5266                           
  5267                           ; BSR set to: 0
  5268  000498  0E68               	movlw	104
  5269  00049A  0100               	movlb	0	; () banked
  5270  00049C  6FC4               	movwf	??_UI& (0+255),b
  5271  00049E  0EE4               	movlw	228
  5272  0004A0                     u4917:
  5273  0004A0  2EE8               	decfsz	wreg,f,c
  5274  0004A2  D7FE               	bra	u4917
  5275  0004A4  2FC4               	decfsz	??_UI& (0+255),f,b
  5276  0004A6  D7FC               	bra	u4917
  5277  0004A8  F000               	nop	
  5278  0004AA  0100               	movlb	0	; () banked
  5279  0004AC  2BD1               	incf	UI@i_700& (0+255),f,b
  5280  0004AE  D7EF               	goto	l5504
  5281  0004B0                     l5512:
  5282                           
  5283                           ; BSR set to: 0
  5284  0004B0  0100               	movlb	0	; () banked
  5285  0004B2  51EF               	movf	_logstate& (0+255),w,b
  5286  0004B4  0100               	movlb	0	; () banked
  5287  0004B6  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  5288  0004B8  B4D8               	btfsc	status,2,c
  5289  0004BA  0012               	return	
  5290                           
  5291                           ; BSR set to: 0
  5292                           ;UI.c: 143: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5293                           
  5294                           ; BSR set to: 0
  5295                           
  5296                           ; BSR set to: 0
  5297  0004BC  0E01               	movlw	1
  5298  0004BE  ECF1  F014         	call	_lcdInst
  5299  0004C2  0E68               	movlw	104
  5300  0004C4  0100               	movlb	0	; () banked
  5301  0004C6  6FC4               	movwf	??_UI& (0+255),b
  5302  0004C8  0EE4               	movlw	228
  5303  0004CA                     u4927:
  5304  0004CA  2EE8               	decfsz	wreg,f,c
  5305  0004CC  D7FE               	bra	u4927
  5306  0004CE  2FC4               	decfsz	??_UI& (0+255),f,b
  5307  0004D0  D7FC               	bra	u4927
  5308  0004D2  F000               	nop	
  5309                           
  5310                           ;UI.c: 144: lcdInst(0b10000000);;
  5311  0004D4  0E80               	movlw	128
  5312  0004D6  ECF1  F014         	call	_lcdInst
  5313                           
  5314                           ;UI.c: 145: printf("-- Total cans --");
  5315  0004DA  0ECB               	movlw	low STR_13
  5316  0004DC  0100               	movlb	0	; () banked
  5317  0004DE  6F8E               	movwf	printf@f& (0+255),b
  5318  0004E0  0EFE               	movlw	high STR_13
  5319  0004E2  0100               	movlb	0	; () banked
  5320  0004E4  6F8F               	movwf	(printf@f+1)& (0+255),b
  5321  0004E6  ECBB  F002         	call	_printf	;wreg free
  5322                           
  5323                           ;UI.c: 146: lcdInst(0b11000000);;
  5324  0004EA  0EC0               	movlw	192
  5325  0004EC  ECF1  F014         	call	_lcdInst
  5326                           
  5327                           ;UI.c: 147: printf("12");
  5328  0004F0  0EFB               	movlw	low STR_14
  5329  0004F2  0100               	movlb	0	; () banked
  5330  0004F4  6F8E               	movwf	printf@f& (0+255),b
  5331  0004F6  0EFF               	movlw	high STR_14
  5332  0004F8  0100               	movlb	0	; () banked
  5333  0004FA  6F8F               	movwf	(printf@f+1)& (0+255),b
  5334  0004FC  ECBB  F002         	call	_printf	;wreg free
  5335                           
  5336                           ;UI.c: 149: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5337  000500  0E00               	movlw	0
  5338  000502  0100               	movlb	0	; () banked
  5339  000504  6FD2               	movwf	UI@i_703& (0+255),b
  5340  000506                     l5530:
  5341                           
  5342                           ; BSR set to: 0
  5343  000506  0E63               	movlw	99
  5344  000508  0100               	movlb	0	; () banked
  5345  00050A  65D2               	cpfsgt	UI@i_703& (0+255),b
  5346  00050C  D001               	goto	l5534
  5347  00050E  D00C               	goto	l5538
  5348  000510                     l5534:
  5349                           
  5350                           ; BSR set to: 0
  5351  000510  0E68               	movlw	104
  5352  000512  0100               	movlb	0	; () banked
  5353  000514  6FC4               	movwf	??_UI& (0+255),b
  5354  000516  0EE4               	movlw	228
  5355  000518                     u4937:
  5356  000518  2EE8               	decfsz	wreg,f,c
  5357  00051A  D7FE               	bra	u4937
  5358  00051C  2FC4               	decfsz	??_UI& (0+255),f,b
  5359  00051E  D7FC               	bra	u4937
  5360  000520  F000               	nop	
  5361  000522  0100               	movlb	0	; () banked
  5362  000524  2BD2               	incf	UI@i_703& (0+255),f,b
  5363  000526  D7EF               	goto	l5530
  5364  000528                     l5538:
  5365                           
  5366                           ; BSR set to: 0
  5367  000528  0100               	movlb	0	; () banked
  5368  00052A  51EF               	movf	_logstate& (0+255),w,b
  5369  00052C  0100               	movlb	0	; () banked
  5370  00052E  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  5371  000530  B4D8               	btfsc	status,2,c
  5372  000532  0012               	return	
  5373                           
  5374                           ; BSR set to: 0
  5375                           ;UI.c: 150: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5376                           
  5377                           ; BSR set to: 0
  5378                           
  5379                           ; BSR set to: 0
  5380  000534  0E00               	movlw	0
  5381  000536  0100               	movlb	0	; () banked
  5382  000538  6FD3               	movwf	UI@i_704& (0+255),b
  5383  00053A                     l5544:
  5384                           
  5385                           ; BSR set to: 0
  5386  00053A  0E63               	movlw	99
  5387  00053C  0100               	movlb	0	; () banked
  5388  00053E  65D3               	cpfsgt	UI@i_704& (0+255),b
  5389  000540  D001               	goto	l5548
  5390  000542  D00C               	goto	l5552
  5391  000544                     l5548:
  5392                           
  5393                           ; BSR set to: 0
  5394  000544  0E68               	movlw	104
  5395  000546  0100               	movlb	0	; () banked
  5396  000548  6FC4               	movwf	??_UI& (0+255),b
  5397  00054A  0EE4               	movlw	228
  5398  00054C                     u4947:
  5399  00054C  2EE8               	decfsz	wreg,f,c
  5400  00054E  D7FE               	bra	u4947
  5401  000550  2FC4               	decfsz	??_UI& (0+255),f,b
  5402  000552  D7FC               	bra	u4947
  5403  000554  F000               	nop	
  5404  000556  0100               	movlb	0	; () banked
  5405  000558  2BD3               	incf	UI@i_704& (0+255),f,b
  5406  00055A  D7EF               	goto	l5544
  5407  00055C                     l5552:
  5408                           
  5409                           ; BSR set to: 0
  5410  00055C  0100               	movlb	0	; () banked
  5411  00055E  51EF               	movf	_logstate& (0+255),w,b
  5412  000560  0100               	movlb	0	; () banked
  5413  000562  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  5414  000564  B4D8               	btfsc	status,2,c
  5415  000566  0012               	return	
  5416  000568                     l5556:
  5417  000568  0100               	movlb	0	; () banked
  5418  00056A  51EF               	movf	_logstate& (0+255),w,b
  5419  00056C  0100               	movlb	0	; () banked
  5420  00056E  11F0               	iorwf	(_logstate+1)& (0+255),w,b
  5421  000570  B4D8               	btfsc	status,2,c
  5422  000572  0012               	return	
  5423  000574  D5E7               	goto	l5316
  5424  000576                     __end_of_UI:
  5425                           	opt stack 0
  5426                           tblptru	equ	0xFF8
  5427                           tblptrh	equ	0xFF7
  5428                           tblptrl	equ	0xFF6
  5429                           tablat	equ	0xFF5
  5430                           prodh	equ	0xFF4
  5431                           prodl	equ	0xFF3
  5432                           intcon	equ	0xFF2
  5433                           intcon2	equ	0xFF1
  5434                           intcon3	equ	0xFF0
  5435                           postinc0	equ	0xFEE
  5436                           wreg	equ	0xFE8
  5437                           postdec1	equ	0xFE5
  5438                           fsr1l	equ	0xFE1
  5439                           indf2	equ	0xFDF
  5440                           postinc2	equ	0xFDE
  5441                           postdec2	equ	0xFDD
  5442                           fsr2h	equ	0xFDA
  5443                           fsr2l	equ	0xFD9
  5444                           status	equ	0xFD8
  5445                           
  5446 ;; *************** function _printRTC *****************
  5447 ;; Defined at:
  5448 ;;		line 62 in file "RTC.c"
  5449 ;; Parameters:    Size  Location     Type
  5450 ;;		None
  5451 ;; Auto vars:     Size  Location     Type
  5452 ;;  i               2   66[BANK0 ] int 
  5453 ;;  INT_time       14   46[BANK0 ] int [7]
  5454 ;;  month           4   62[BANK0 ] unsigned char [4]
  5455 ;;  RTC_month       2   60[BANK0 ] int 
  5456 ;; Return value:  Size  Location     Type
  5457 ;;                  1    wreg      void 
  5458 ;; Registers used:
  5459 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5460 ;; Tracked objects:
  5461 ;;		On entry : 0/0
  5462 ;;		On exit  : 0/0
  5463 ;;		Unchanged: 0/0
  5464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5466 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5467 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5468 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5469 ;;Total ram usage:       25 bytes
  5470 ;; Hardware stack levels used:    1
  5471 ;; Hardware stack levels required when called:   10
  5472 ;; This function calls:
  5473 ;;		_getRTC
  5474 ;;		_lcdInst
  5475 ;;		_printf
  5476 ;;		_strcpy
  5477 ;; This function is called by:
  5478 ;;		_UI
  5479 ;;		_change_state_to_menu_start
  5480 ;; This function uses a non-reentrant model
  5481 ;;
  5482                           
  5483                           	psect	text23
  5484  000CC6                     __ptext23:
  5485                           	opt stack 0
  5486  000CC6                     _printRTC:
  5487                           	opt stack 18
  5488                           
  5489                           ;RTC.c: 63: getRTC();
  5490                           
  5491                           ; BSR set to: 0
  5492                           ;incstack = 0
  5493  000CC6  EC99  F00F         	call	_getRTC	;wreg free
  5494                           
  5495                           ;RTC.c: 64: char month[] = "MMM";
  5496  000CCA  C0F4  F0BE         	movff	printRTC@F3206,printRTC@month
  5497  000CCE  C0F5  F0BF         	movff	printRTC@F3206+1,printRTC@month+1
  5498  000CD2  C0F6  F0C0         	movff	printRTC@F3206+2,printRTC@month+2
  5499  000CD6  C0F7  F0C1         	movff	printRTC@F3206+3,printRTC@month+3
  5500                           
  5501                           ;RTC.c: 65: int INT_time[7];
  5502                           ;RTC.c: 66: for(int i = 0; i < 7; i++){
  5503  000CDA  0E00               	movlw	0
  5504  000CDC  0100               	movlb	0	; () banked
  5505  000CDE  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  5506  000CE0  0E00               	movlw	0
  5507  000CE2  6FC2               	movwf	printRTC@i& (0+255),b
  5508                           
  5509                           ; BSR set to: 0
  5510  000CE4  0100               	movlb	0	; () banked
  5511  000CE6  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  5512  000CE8  D008               	goto	l4646
  5513  000CEA  0100               	movlb	0	; () banked
  5514  000CEC  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  5515  000CEE  E146               	bnz	l1040
  5516  000CF0  0E07               	movlw	7
  5517  000CF2  0100               	movlb	0	; () banked
  5518  000CF4  5DC2               	subwf	printRTC@i& (0+255),w,b
  5519  000CF6  B0D8               	btfsc	status,0,c
  5520  000CF8  D041               	goto	l1040
  5521  000CFA                     l4646:
  5522                           
  5523                           ; BSR set to: 0
  5524                           ;RTC.c: 67: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  5525  000CFA  0ED4               	movlw	low _time
  5526  000CFC  0100               	movlb	0	; () banked
  5527  000CFE  25C2               	addwf	printRTC@i& (0+255),w,b
  5528  000D00  6ED9               	movwf	fsr2l,c
  5529  000D02  0E00               	movlw	high _time
  5530  000D04  0100               	movlb	0	; () banked
  5531  000D06  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  5532  000D08  6EDA               	movwf	fsr2h,c
  5533  000D0A  50DF               	movf	indf2,w,c
  5534  000D0C  0100               	movlb	0	; () banked
  5535  000D0E  6FAB               	movwf	??_printRTC& (0+255),b
  5536  000D10  0100               	movlb	0	; () banked
  5537  000D12  3BAB               	swapf	??_printRTC& (0+255),f,b
  5538  000D14  0E0F               	movlw	15
  5539  000D16  17AB               	andwf	??_printRTC& (0+255),f,b
  5540  000D18  0E0F               	movlw	15
  5541  000D1A  0100               	movlb	0	; () banked
  5542  000D1C  17AB               	andwf	??_printRTC& (0+255),f,b
  5543  000D1E  0100               	movlb	0	; () banked
  5544  000D20  51AB               	movf	??_printRTC& (0+255),w,b
  5545  000D22  0D0A               	mullw	10
  5546  000D24  0ED4               	movlw	low _time
  5547  000D26  0100               	movlb	0	; () banked
  5548  000D28  25C2               	addwf	printRTC@i& (0+255),w,b
  5549  000D2A  6ED9               	movwf	fsr2l,c
  5550  000D2C  0E00               	movlw	high _time
  5551  000D2E  0100               	movlb	0	; () banked
  5552  000D30  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  5553  000D32  6EDA               	movwf	fsr2h,c
  5554  000D34  50DF               	movf	indf2,w,c
  5555  000D36  0B0F               	andlw	15
  5556  000D38  0100               	movlb	0	; () banked
  5557  000D3A  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  5558  000D3C  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  5559  000D3E  50F3               	movf	prodl,w,c
  5560  000D40  0100               	movlb	0	; () banked
  5561  000D42  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  5562  000D44  50F4               	movf	prodh,w,c
  5563  000D46  0100               	movlb	0	; () banked
  5564  000D48  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  5565  000D4A  90D8               	bcf	status,0,c
  5566  000D4C  0100               	movlb	0	; () banked
  5567  000D4E  35C2               	rlcf	printRTC@i& (0+255),w,b
  5568  000D50  6ED9               	movwf	fsr2l,c
  5569  000D52  0100               	movlb	0	; () banked
  5570  000D54  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  5571  000D56  6EDA               	movwf	fsr2h,c
  5572  000D58  0EAE               	movlw	low printRTC@INT_time
  5573  000D5A  26D9               	addwf	fsr2l,f,c
  5574  000D5C  0E00               	movlw	high printRTC@INT_time
  5575  000D5E  22DA               	addwfc	fsr2h,f,c
  5576  000D60  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  5577  000D64  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  5578                           
  5579                           ; BSR set to: 0
  5580  000D68  0100               	movlb	0	; () banked
  5581  000D6A  4BC2               	infsnz	printRTC@i& (0+255),f,b
  5582  000D6C  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  5583                           
  5584                           ; BSR set to: 0
  5585  000D6E  0100               	movlb	0	; () banked
  5586  000D70  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  5587  000D72  D7C3               	goto	l4646
  5588  000D74  0100               	movlb	0	; () banked
  5589  000D76  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  5590  000D78  E101               	bnz	u3270
  5591  000D7A  D7BA               	goto	L6
  5592  000D7C                     u3270:
  5593  000D7C                     l1040:
  5594                           
  5595                           ; BSR set to: 0
  5596                           ;RTC.c: 68: }
  5597                           ;RTC.c: 69: int RTC_month = INT_time[5];
  5598  000D7C  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  5599  000D80  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  5600                           
  5601                           ;RTC.c: 70: switch(RTC_month){
  5602  000D84  D0B4               	goto	l4678
  5603  000D86                     l4652:
  5604                           
  5605                           ; BSR set to: 0
  5606                           ;RTC.c: 72: strcpy(month, "Jan");
  5607  000D86  0EBE               	movlw	low printRTC@month
  5608  000D88  0100               	movlb	0	; () banked
  5609  000D8A  6F80               	movwf	strcpy@to& (0+255),b
  5610  000D8C  0E00               	movlw	high printRTC@month
  5611  000D8E  0100               	movlb	0	; () banked
  5612  000D90  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5613  000D92  0EDB               	movlw	low STR_36
  5614  000D94  0100               	movlb	0	; () banked
  5615  000D96  6F82               	movwf	strcpy@from& (0+255),b
  5616  000D98  0EFF               	movlw	high STR_36
  5617  000D9A  0100               	movlb	0	; () banked
  5618  000D9C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5619  000D9E  EC81  F012         	call	_strcpy	;wreg free
  5620                           
  5621                           ;RTC.c: 73: break;
  5622  000DA2  D0D4               	goto	l4680
  5623  000DA4                     l4654:
  5624                           
  5625                           ;RTC.c: 75: strcpy(month, "Feb");
  5626  000DA4  0EBE               	movlw	low printRTC@month
  5627  000DA6  0100               	movlb	0	; () banked
  5628  000DA8  6F80               	movwf	strcpy@to& (0+255),b
  5629  000DAA  0E00               	movlw	high printRTC@month
  5630  000DAC  0100               	movlb	0	; () banked
  5631  000DAE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5632  000DB0  0ECB               	movlw	low STR_37
  5633  000DB2  0100               	movlb	0	; () banked
  5634  000DB4  6F82               	movwf	strcpy@from& (0+255),b
  5635  000DB6  0EFF               	movlw	high STR_37
  5636  000DB8  0100               	movlb	0	; () banked
  5637  000DBA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5638  000DBC  EC81  F012         	call	_strcpy	;wreg free
  5639                           
  5640                           ;RTC.c: 76: break;
  5641  000DC0  D0C5               	goto	l4680
  5642  000DC2                     l4656:
  5643                           
  5644                           ;RTC.c: 78: strcpy(month, "Mar");
  5645  000DC2  0EBE               	movlw	low printRTC@month
  5646  000DC4  0100               	movlb	0	; () banked
  5647  000DC6  6F80               	movwf	strcpy@to& (0+255),b
  5648  000DC8  0E00               	movlw	high printRTC@month
  5649  000DCA  0100               	movlb	0	; () banked
  5650  000DCC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5651  000DCE  0EE7               	movlw	low STR_38
  5652  000DD0  0100               	movlb	0	; () banked
  5653  000DD2  6F82               	movwf	strcpy@from& (0+255),b
  5654  000DD4  0EFF               	movlw	high STR_38
  5655  000DD6  0100               	movlb	0	; () banked
  5656  000DD8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5657  000DDA  EC81  F012         	call	_strcpy	;wreg free
  5658                           
  5659                           ;RTC.c: 79: break;
  5660  000DDE  D0B6               	goto	l4680
  5661  000DE0                     l4658:
  5662                           
  5663                           ;RTC.c: 81: strcpy(month, "Apr");
  5664  000DE0  0EBE               	movlw	low printRTC@month
  5665  000DE2  0100               	movlb	0	; () banked
  5666  000DE4  6F80               	movwf	strcpy@to& (0+255),b
  5667  000DE6  0E00               	movlw	high printRTC@month
  5668  000DE8  0100               	movlb	0	; () banked
  5669  000DEA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5670  000DEC  0EEB               	movlw	low STR_39
  5671  000DEE  0100               	movlb	0	; () banked
  5672  000DF0  6F82               	movwf	strcpy@from& (0+255),b
  5673  000DF2  0EFF               	movlw	high STR_39
  5674  000DF4  0100               	movlb	0	; () banked
  5675  000DF6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5676  000DF8  EC81  F012         	call	_strcpy	;wreg free
  5677                           
  5678                           ;RTC.c: 82: break;
  5679  000DFC  D0A7               	goto	l4680
  5680  000DFE                     l4660:
  5681                           
  5682                           ;RTC.c: 84: strcpy(month, "May");
  5683  000DFE  0EBE               	movlw	low printRTC@month
  5684  000E00  0100               	movlb	0	; () banked
  5685  000E02  6F80               	movwf	strcpy@to& (0+255),b
  5686  000E04  0E00               	movlw	high printRTC@month
  5687  000E06  0100               	movlb	0	; () banked
  5688  000E08  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5689  000E0A  0EF7               	movlw	low STR_40
  5690  000E0C  0100               	movlb	0	; () banked
  5691  000E0E  6F82               	movwf	strcpy@from& (0+255),b
  5692  000E10  0EFF               	movlw	high STR_40
  5693  000E12  0100               	movlb	0	; () banked
  5694  000E14  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5695  000E16  EC81  F012         	call	_strcpy	;wreg free
  5696                           
  5697                           ;RTC.c: 85: break;
  5698  000E1A  D098               	goto	l4680
  5699  000E1C                     l4662:
  5700                           
  5701                           ;RTC.c: 87: strcpy(month, "Jun");
  5702  000E1C  0EBE               	movlw	low printRTC@month
  5703  000E1E  0100               	movlb	0	; () banked
  5704  000E20  6F80               	movwf	strcpy@to& (0+255),b
  5705  000E22  0E00               	movlw	high printRTC@month
  5706  000E24  0100               	movlb	0	; () banked
  5707  000E26  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5708  000E28  0EDF               	movlw	low STR_41
  5709  000E2A  0100               	movlb	0	; () banked
  5710  000E2C  6F82               	movwf	strcpy@from& (0+255),b
  5711  000E2E  0EFF               	movlw	high STR_41
  5712  000E30  0100               	movlb	0	; () banked
  5713  000E32  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5714  000E34  EC81  F012         	call	_strcpy	;wreg free
  5715                           
  5716                           ;RTC.c: 88: break;
  5717  000E38  D089               	goto	l4680
  5718  000E3A                     l4664:
  5719                           
  5720                           ;RTC.c: 90: strcpy(month, "Jul");
  5721  000E3A  0EBE               	movlw	low printRTC@month
  5722  000E3C  0100               	movlb	0	; () banked
  5723  000E3E  6F80               	movwf	strcpy@to& (0+255),b
  5724  000E40  0E00               	movlw	high printRTC@month
  5725  000E42  0100               	movlb	0	; () banked
  5726  000E44  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5727  000E46  0ED7               	movlw	low STR_42
  5728  000E48  0100               	movlb	0	; () banked
  5729  000E4A  6F82               	movwf	strcpy@from& (0+255),b
  5730  000E4C  0EFF               	movlw	high STR_42
  5731  000E4E  0100               	movlb	0	; () banked
  5732  000E50  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5733  000E52  EC81  F012         	call	_strcpy	;wreg free
  5734                           
  5735                           ;RTC.c: 91: break;
  5736  000E56  D07A               	goto	l4680
  5737  000E58                     l4666:
  5738                           
  5739                           ;RTC.c: 93: strcpy(month, "Aug");
  5740  000E58  0EBE               	movlw	low printRTC@month
  5741  000E5A  0100               	movlb	0	; () banked
  5742  000E5C  6F80               	movwf	strcpy@to& (0+255),b
  5743  000E5E  0E00               	movlw	high printRTC@month
  5744  000E60  0100               	movlb	0	; () banked
  5745  000E62  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5746  000E64  0ED3               	movlw	low STR_43
  5747  000E66  0100               	movlb	0	; () banked
  5748  000E68  6F82               	movwf	strcpy@from& (0+255),b
  5749  000E6A  0EFF               	movlw	high STR_43
  5750  000E6C  0100               	movlb	0	; () banked
  5751  000E6E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5752  000E70  EC81  F012         	call	_strcpy	;wreg free
  5753                           
  5754                           ;RTC.c: 94: break;
  5755  000E74  D06B               	goto	l4680
  5756  000E76                     l4668:
  5757                           
  5758                           ;RTC.c: 96: strcpy(month, "Sep");
  5759  000E76  0EBE               	movlw	low printRTC@month
  5760  000E78  0100               	movlb	0	; () banked
  5761  000E7A  6F80               	movwf	strcpy@to& (0+255),b
  5762  000E7C  0E00               	movlw	high printRTC@month
  5763  000E7E  0100               	movlb	0	; () banked
  5764  000E80  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5765  000E82  0EE3               	movlw	low STR_44
  5766  000E84  0100               	movlb	0	; () banked
  5767  000E86  6F82               	movwf	strcpy@from& (0+255),b
  5768  000E88  0EFF               	movlw	high STR_44
  5769  000E8A  0100               	movlb	0	; () banked
  5770  000E8C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5771  000E8E  EC81  F012         	call	_strcpy	;wreg free
  5772                           
  5773                           ;RTC.c: 97: break;
  5774  000E92  D05C               	goto	l4680
  5775  000E94                     l4670:
  5776                           
  5777                           ;RTC.c: 99: strcpy(month, "Oct");
  5778  000E94  0EBE               	movlw	low printRTC@month
  5779  000E96  0100               	movlb	0	; () banked
  5780  000E98  6F80               	movwf	strcpy@to& (0+255),b
  5781  000E9A  0E00               	movlw	high printRTC@month
  5782  000E9C  0100               	movlb	0	; () banked
  5783  000E9E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5784  000EA0  0EEF               	movlw	low STR_45
  5785  000EA2  0100               	movlb	0	; () banked
  5786  000EA4  6F82               	movwf	strcpy@from& (0+255),b
  5787  000EA6  0EFF               	movlw	high STR_45
  5788  000EA8  0100               	movlb	0	; () banked
  5789  000EAA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5790  000EAC  EC81  F012         	call	_strcpy	;wreg free
  5791                           
  5792                           ;RTC.c: 100: break;
  5793  000EB0  D04D               	goto	l4680
  5794  000EB2                     l4672:
  5795                           
  5796                           ;RTC.c: 102: strcpy(month, "Nov");
  5797  000EB2  0EBE               	movlw	low printRTC@month
  5798  000EB4  0100               	movlb	0	; () banked
  5799  000EB6  6F80               	movwf	strcpy@to& (0+255),b
  5800  000EB8  0E00               	movlw	high printRTC@month
  5801  000EBA  0100               	movlb	0	; () banked
  5802  000EBC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5803  000EBE  0EF3               	movlw	low STR_46
  5804  000EC0  0100               	movlb	0	; () banked
  5805  000EC2  6F82               	movwf	strcpy@from& (0+255),b
  5806  000EC4  0EFF               	movlw	high STR_46
  5807  000EC6  0100               	movlb	0	; () banked
  5808  000EC8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5809  000ECA  EC81  F012         	call	_strcpy	;wreg free
  5810                           
  5811                           ;RTC.c: 103: break;
  5812  000ECE  D03E               	goto	l4680
  5813  000ED0                     l4674:
  5814                           
  5815                           ;RTC.c: 105: strcpy(month, "Dec");
  5816  000ED0  0EBE               	movlw	low printRTC@month
  5817  000ED2  0100               	movlb	0	; () banked
  5818  000ED4  6F80               	movwf	strcpy@to& (0+255),b
  5819  000ED6  0E00               	movlw	high printRTC@month
  5820  000ED8  0100               	movlb	0	; () banked
  5821  000EDA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5822  000EDC  0ECF               	movlw	low STR_47
  5823  000EDE  0100               	movlb	0	; () banked
  5824  000EE0  6F82               	movwf	strcpy@from& (0+255),b
  5825  000EE2  0EFF               	movlw	high STR_47
  5826  000EE4  0100               	movlb	0	; () banked
  5827  000EE6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5828  000EE8  EC81  F012         	call	_strcpy	;wreg free
  5829                           
  5830                           ;RTC.c: 107: }
  5831                           
  5832                           ;RTC.c: 106: break;
  5833  000EEC  D02F               	goto	l4680
  5834  000EEE                     l4678:
  5835  000EEE  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  5836  000EF2  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  5837                           
  5838                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5839                           ; Switch size 1, requested type "space"
  5840                           ; Number of cases is 1, Range of values is 0 to 0
  5841                           ; switch strategies available:
  5842                           ; Name         Instructions Cycles
  5843                           ; simple_byte            4     3 (average)
  5844                           ;	Chosen strategy is simple_byte
  5845  000EF6  0100               	movlb	0	; () banked
  5846  000EF8  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  5847  000EFA  0A00               	xorlw	0	; case 0
  5848  000EFC  A4D8               	btfss	status,2,c
  5849  000EFE  D026               	goto	l4680
  5850                           
  5851                           ; BSR set to: 0
  5852                           ; Switch size 1, requested type "space"
  5853                           ; Number of cases is 12, Range of values is 1 to 12
  5854                           ; switch strategies available:
  5855                           ; Name         Instructions Cycles
  5856                           ; simple_byte           37    19 (average)
  5857                           ;	Chosen strategy is simple_byte
  5858  000F00  0100               	movlb	0	; () banked
  5859  000F02  51AB               	movf	??_printRTC& (0+255),w,b
  5860  000F04  0A01               	xorlw	1	; case 1
  5861  000F06  B4D8               	btfsc	status,2,c
  5862  000F08  D73E               	goto	l4652
  5863  000F0A  0A03               	xorlw	3	; case 2
  5864  000F0C  B4D8               	btfsc	status,2,c
  5865  000F0E  D74A               	goto	l4654
  5866  000F10  0A01               	xorlw	1	; case 3
  5867  000F12  B4D8               	btfsc	status,2,c
  5868  000F14  D756               	goto	l4656
  5869  000F16  0A07               	xorlw	7	; case 4
  5870  000F18  B4D8               	btfsc	status,2,c
  5871  000F1A  D762               	goto	l4658
  5872  000F1C  0A01               	xorlw	1	; case 5
  5873  000F1E  B4D8               	btfsc	status,2,c
  5874  000F20  D76E               	goto	l4660
  5875  000F22  0A03               	xorlw	3	; case 6
  5876  000F24  B4D8               	btfsc	status,2,c
  5877  000F26  D77A               	goto	l4662
  5878  000F28  0A01               	xorlw	1	; case 7
  5879  000F2A  B4D8               	btfsc	status,2,c
  5880  000F2C  D786               	goto	l4664
  5881  000F2E  0A0F               	xorlw	15	; case 8
  5882  000F30  B4D8               	btfsc	status,2,c
  5883  000F32  D792               	goto	l4666
  5884  000F34  0A01               	xorlw	1	; case 9
  5885  000F36  B4D8               	btfsc	status,2,c
  5886  000F38  D79E               	goto	l4668
  5887  000F3A  0A03               	xorlw	3	; case 10
  5888  000F3C  B4D8               	btfsc	status,2,c
  5889  000F3E  D7AA               	goto	l4670
  5890  000F40  0A01               	xorlw	1	; case 11
  5891  000F42  B4D8               	btfsc	status,2,c
  5892  000F44  D7B6               	goto	l4672
  5893  000F46  0A07               	xorlw	7	; case 12
  5894  000F48  B4D8               	btfsc	status,2,c
  5895  000F4A  D7C2               	goto	l4674
  5896  000F4C                     l4680:
  5897                           
  5898                           ;RTC.c: 108: lcdInst(0b10000000);;
  5899  000F4C  0E80               	movlw	128
  5900  000F4E  ECF1  F014         	call	_lcdInst
  5901                           
  5902                           ;RTC.c: 109: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  5903  000F52  0ED0               	movlw	low STR_48
  5904  000F54  0100               	movlb	0	; () banked
  5905  000F56  6F8E               	movwf	printf@f& (0+255),b
  5906  000F58  0EFD               	movlw	high STR_48
  5907  000F5A  0100               	movlb	0	; () banked
  5908  000F5C  6F8F               	movwf	(printf@f+1)& (0+255),b
  5909  000F5E  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  5910  000F62  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  5911  000F66  0EBE               	movlw	low printRTC@month
  5912  000F68  0100               	movlb	0	; () banked
  5913  000F6A  6F92               	movwf	(?_printf+4)& (0+255),b
  5914  000F6C  0E00               	movlw	high printRTC@month
  5915  000F6E  0100               	movlb	0	; () banked
  5916  000F70  6F93               	movwf	(?_printf+5)& (0+255),b
  5917  000F72  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  5918  000F76  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  5919  000F7A  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  5920  000F7E  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  5921  000F82  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  5922  000F86  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  5923  000F8A  ECBB  F002         	call	_printf	;wreg free
  5924  000F8E  0012               	return		;funcret
  5925  000F90                     __end_of_printRTC:
  5926                           	opt stack 0
  5927                           tblptru	equ	0xFF8
  5928                           tblptrh	equ	0xFF7
  5929                           tblptrl	equ	0xFF6
  5930                           tablat	equ	0xFF5
  5931                           prodh	equ	0xFF4
  5932                           prodl	equ	0xFF3
  5933                           intcon	equ	0xFF2
  5934                           intcon2	equ	0xFF1
  5935                           intcon3	equ	0xFF0
  5936                           postinc0	equ	0xFEE
  5937                           wreg	equ	0xFE8
  5938                           postdec1	equ	0xFE5
  5939                           fsr1l	equ	0xFE1
  5940                           indf2	equ	0xFDF
  5941                           postinc2	equ	0xFDE
  5942                           postdec2	equ	0xFDD
  5943                           fsr2h	equ	0xFDA
  5944                           fsr2l	equ	0xFD9
  5945                           status	equ	0xFD8
  5946                           
  5947 ;; *************** function _strcpy *****************
  5948 ;; Defined at:
  5949 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  5950 ;; Parameters:    Size  Location     Type
  5951 ;;  to              2    0[BANK0 ] PTR unsigned char 
  5952 ;;		 -> printRTC@month(4), 
  5953 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  5954 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
  5955 ;;		 -> STR_43(4), STR_42(4), STR_41(4), STR_40(4), 
  5956 ;;		 -> STR_39(4), STR_38(4), STR_37(4), STR_36(4), 
  5957 ;; Auto vars:     Size  Location     Type
  5958 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  5959 ;;		 -> printRTC@month(4), 
  5960 ;; Return value:  Size  Location     Type
  5961 ;;                  2    0[BANK0 ] PTR unsigned char 
  5962 ;; Registers used:
  5963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5964 ;; Tracked objects:
  5965 ;;		On entry : 0/0
  5966 ;;		On exit  : 0/0
  5967 ;;		Unchanged: 0/0
  5968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5969 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5970 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5972 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5973 ;;Total ram usage:        6 bytes
  5974 ;; Hardware stack levels used:    1
  5975 ;; Hardware stack levels required when called:    7
  5976 ;; This function calls:
  5977 ;;		Nothing
  5978 ;; This function is called by:
  5979 ;;		_printRTC
  5980 ;; This function uses a non-reentrant model
  5981 ;;
  5982                           
  5983                           	psect	text24
  5984  002502                     __ptext24:
  5985                           	opt stack 0
  5986  002502                     _strcpy:
  5987                           	opt stack 20
  5988                           
  5989                           ;incstack = 0
  5990  002502  C080  F084         	movff	strcpy@to,strcpy@cp
  5991  002506  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  5992  00250A  D006               	goto	l4450
  5993  00250C                     l4448:
  5994  00250C  0100               	movlb	0	; () banked
  5995  00250E  4B84               	infsnz	strcpy@cp& (0+255),f,b
  5996  002510  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  5997  002512  0100               	movlb	0	; () banked
  5998  002514  4B82               	infsnz	strcpy@from& (0+255),f,b
  5999  002516  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  6000  002518                     l4450:
  6001  002518  C082  FFF6         	movff	strcpy@from,tblptrl
  6002  00251C  C083  FFF7         	movff	strcpy@from+1,tblptrh
  6003  002520                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6004  002520  6AF8               	clrf	tblptru,c
  6005  002522                     	endif
  6006  002522                     	if	0	;tblptru may be non-zero
  6007  002522                     	endif
  6008  002522  C084  FFD9         	movff	strcpy@cp,fsr2l
  6009  002526  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  6010  00252A  0008               	tblrd		*
  6011  00252C  CFF5 FFDF          	movff	tablat,indf2
  6012  002530  50DF               	movf	indf2,w,c
  6013  002532  B4D8               	btfsc	status,2,c
  6014  002534  0012               	return	
  6015  002536  D7EA               	goto	l4448
  6016  002538                     __end_of_strcpy:
  6017                           	opt stack 0
  6018                           tblptru	equ	0xFF8
  6019                           tblptrh	equ	0xFF7
  6020                           tblptrl	equ	0xFF6
  6021                           tablat	equ	0xFF5
  6022                           prodh	equ	0xFF4
  6023                           prodl	equ	0xFF3
  6024                           intcon	equ	0xFF2
  6025                           intcon2	equ	0xFF1
  6026                           intcon3	equ	0xFF0
  6027                           postinc0	equ	0xFEE
  6028                           wreg	equ	0xFE8
  6029                           postdec1	equ	0xFE5
  6030                           fsr1l	equ	0xFE1
  6031                           indf2	equ	0xFDF
  6032                           postinc2	equ	0xFDE
  6033                           postdec2	equ	0xFDD
  6034                           fsr2h	equ	0xFDA
  6035                           fsr2l	equ	0xFD9
  6036                           status	equ	0xFD8
  6037                           
  6038 ;; *************** function _getRTC *****************
  6039 ;; Defined at:
  6040 ;;		line 43 in file "RTC.c"
  6041 ;; Parameters:    Size  Location     Type
  6042 ;;		None
  6043 ;; Auto vars:     Size  Location     Type
  6044 ;;  i               2    3[BANK0 ] int 
  6045 ;; Return value:  Size  Location     Type
  6046 ;;                  1    wreg      void 
  6047 ;; Registers used:
  6048 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6049 ;; Tracked objects:
  6050 ;;		On entry : 0/0
  6051 ;;		On exit  : 0/0
  6052 ;;		Unchanged: 0/0
  6053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6055 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6057 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6058 ;;Total ram usage:        2 bytes
  6059 ;; Hardware stack levels used:    1
  6060 ;; Hardware stack levels required when called:    9
  6061 ;; This function calls:
  6062 ;;		_I2C_Master_Read
  6063 ;;		_I2C_Master_Start
  6064 ;;		_I2C_Master_Stop
  6065 ;;		_I2C_Master_Write
  6066 ;; This function is called by:
  6067 ;;		_printRTC
  6068 ;;		_initSortTimer
  6069 ;; This function uses a non-reentrant model
  6070 ;;
  6071                           
  6072                           	psect	text25
  6073  001F32                     __ptext25:
  6074                           	opt stack 0
  6075  001F32                     _getRTC:
  6076                           	opt stack 18
  6077                           
  6078                           ;RTC.c: 47: I2C_Master_Start();
  6079                           
  6080                           ;incstack = 0
  6081  001F32  EC1E  F015         	call	_I2C_Master_Start	;wreg free
  6082                           
  6083                           ;RTC.c: 48: I2C_Master_Write(0b11010000);
  6084  001F36  0E00               	movlw	0
  6085  001F38  0100               	movlb	0	; () banked
  6086  001F3A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6087  001F3C  0ED0               	movlw	208
  6088  001F3E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6089  001F40  EC0B  F015         	call	_I2C_Master_Write	;wreg free
  6090                           
  6091                           ;RTC.c: 49: I2C_Master_Write(0x00);
  6092  001F44  0E00               	movlw	0
  6093  001F46  0100               	movlb	0	; () banked
  6094  001F48  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6095  001F4A  0E00               	movlw	0
  6096  001F4C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6097  001F4E  EC0B  F015         	call	_I2C_Master_Write	;wreg free
  6098                           
  6099                           ;RTC.c: 50: I2C_Master_Stop();
  6100  001F52  EC1A  F015         	call	_I2C_Master_Stop	;wreg free
  6101                           
  6102                           ;RTC.c: 53: I2C_Master_Start();
  6103  001F56  EC1E  F015         	call	_I2C_Master_Start	;wreg free
  6104                           
  6105                           ;RTC.c: 54: I2C_Master_Write(0b11010001);
  6106  001F5A  0E00               	movlw	0
  6107  001F5C  0100               	movlb	0	; () banked
  6108  001F5E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6109  001F60  0ED1               	movlw	209
  6110  001F62  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6111  001F64  EC0B  F015         	call	_I2C_Master_Write	;wreg free
  6112                           
  6113                           ;RTC.c: 55: for(int i = 0; i < 6; i++){
  6114  001F68  0E00               	movlw	0
  6115  001F6A  0100               	movlb	0	; () banked
  6116  001F6C  6F84               	movwf	(getRTC@i+1)& (0+255),b
  6117  001F6E  0E00               	movlw	0
  6118  001F70  6F83               	movwf	getRTC@i& (0+255),b
  6119  001F72                     l4434:
  6120                           
  6121                           ; BSR set to: 0
  6122  001F72  0100               	movlb	0	; () banked
  6123  001F74  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  6124  001F76  D008               	goto	l4438
  6125  001F78  0100               	movlb	0	; () banked
  6126  001F7A  5184               	movf	(getRTC@i+1)& (0+255),w,b
  6127  001F7C  E115               	bnz	l4444
  6128  001F7E  0E06               	movlw	6
  6129  001F80  0100               	movlb	0	; () banked
  6130  001F82  5D83               	subwf	getRTC@i& (0+255),w,b
  6131  001F84  B0D8               	btfsc	status,0,c
  6132  001F86  D010               	goto	l4444
  6133  001F88                     l4438:
  6134                           
  6135                           ; BSR set to: 0
  6136                           ;RTC.c: 56: time[i] = I2C_Master_Read(1);
  6137  001F88  0ED4               	movlw	low _time
  6138  001F8A  0100               	movlb	0	; () banked
  6139  001F8C  2583               	addwf	getRTC@i& (0+255),w,b
  6140  001F8E  6ED9               	movwf	fsr2l,c
  6141  001F90  0E00               	movlw	high _time
  6142  001F92  0100               	movlb	0	; () banked
  6143  001F94  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  6144  001F96  6EDA               	movwf	fsr2h,c
  6145  001F98  0E01               	movlw	1
  6146  001F9A  ECBF  F013         	call	_I2C_Master_Read
  6147  001F9E  6EDF               	movwf	indf2,c
  6148  001FA0  0100               	movlb	0	; () banked
  6149  001FA2  4B83               	infsnz	getRTC@i& (0+255),f,b
  6150  001FA4  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  6151  001FA6  D7E5               	goto	l4434
  6152  001FA8                     l4444:
  6153                           
  6154                           ; BSR set to: 0
  6155                           ;RTC.c: 57: }
  6156                           ;RTC.c: 58: time[6] = I2C_Master_Read(0);
  6157  001FA8  0E00               	movlw	0
  6158  001FAA  ECBF  F013         	call	_I2C_Master_Read
  6159  001FAE  0100               	movlb	0	; () banked
  6160  001FB0  6FDA               	movwf	(_time+6)& (0+255),b
  6161                           
  6162                           ;RTC.c: 59: I2C_Master_Stop();
  6163  001FB2  EC1A  F015         	call	_I2C_Master_Stop	;wreg free
  6164  001FB6  0012               	return		;funcret
  6165  001FB8                     __end_of_getRTC:
  6166                           	opt stack 0
  6167                           tblptru	equ	0xFF8
  6168                           tblptrh	equ	0xFF7
  6169                           tblptrl	equ	0xFF6
  6170                           tablat	equ	0xFF5
  6171                           prodh	equ	0xFF4
  6172                           prodl	equ	0xFF3
  6173                           intcon	equ	0xFF2
  6174                           intcon2	equ	0xFF1
  6175                           intcon3	equ	0xFF0
  6176                           postinc0	equ	0xFEE
  6177                           wreg	equ	0xFE8
  6178                           postdec1	equ	0xFE5
  6179                           fsr1l	equ	0xFE1
  6180                           indf2	equ	0xFDF
  6181                           postinc2	equ	0xFDE
  6182                           postdec2	equ	0xFDD
  6183                           fsr2h	equ	0xFDA
  6184                           fsr2l	equ	0xFD9
  6185                           status	equ	0xFD8
  6186                           
  6187 ;; *************** function _I2C_Master_Write *****************
  6188 ;; Defined at:
  6189 ;;		line 48 in file "I2C.c"
  6190 ;; Parameters:    Size  Location     Type
  6191 ;;  d               2    1[BANK0 ] unsigned int 
  6192 ;; Auto vars:     Size  Location     Type
  6193 ;;		None
  6194 ;; Return value:  Size  Location     Type
  6195 ;;                  1    wreg      void 
  6196 ;; Registers used:
  6197 ;;		wreg, status,2, status,0, cstack
  6198 ;; Tracked objects:
  6199 ;;		On entry : 0/0
  6200 ;;		On exit  : 0/0
  6201 ;;		Unchanged: 0/0
  6202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6203 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6206 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6207 ;;Total ram usage:        2 bytes
  6208 ;; Hardware stack levels used:    1
  6209 ;; Hardware stack levels required when called:    8
  6210 ;; This function calls:
  6211 ;;		_I2C_Master_Wait
  6212 ;; This function is called by:
  6213 ;;		_loadRTC
  6214 ;;		_getRTC
  6215 ;; This function uses a non-reentrant model
  6216 ;;
  6217                           
  6218                           	psect	text26
  6219  002A16                     __ptext26:
  6220                           	opt stack 0
  6221  002A16                     _I2C_Master_Write:
  6222                           	opt stack 18
  6223                           
  6224                           ;I2C.c: 50: I2C_Master_Wait();
  6225                           
  6226                           ;incstack = 0
  6227  002A16  ECC3  F014         	call	_I2C_Master_Wait	;wreg free
  6228                           
  6229                           ;I2C.c: 51: SSPBUF = d;
  6230  002A1A  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  6231  002A1E  0012               	return		;funcret
  6232  002A20                     __end_of_I2C_Master_Write:
  6233                           	opt stack 0
  6234                           tblptru	equ	0xFF8
  6235                           tblptrh	equ	0xFF7
  6236                           tblptrl	equ	0xFF6
  6237                           tablat	equ	0xFF5
  6238                           prodh	equ	0xFF4
  6239                           prodl	equ	0xFF3
  6240                           intcon	equ	0xFF2
  6241                           intcon2	equ	0xFF1
  6242                           intcon3	equ	0xFF0
  6243                           postinc0	equ	0xFEE
  6244                           wreg	equ	0xFE8
  6245                           postdec1	equ	0xFE5
  6246                           fsr1l	equ	0xFE1
  6247                           indf2	equ	0xFDF
  6248                           postinc2	equ	0xFDE
  6249                           postdec2	equ	0xFDD
  6250                           fsr2h	equ	0xFDA
  6251                           fsr2l	equ	0xFD9
  6252                           status	equ	0xFD8
  6253                           
  6254 ;; *************** function _I2C_Master_Stop *****************
  6255 ;; Defined at:
  6256 ;;		line 42 in file "I2C.c"
  6257 ;; Parameters:    Size  Location     Type
  6258 ;;		None
  6259 ;; Auto vars:     Size  Location     Type
  6260 ;;		None
  6261 ;; Return value:  Size  Location     Type
  6262 ;;                  1    wreg      void 
  6263 ;; Registers used:
  6264 ;;		wreg, status,2, status,0, cstack
  6265 ;; Tracked objects:
  6266 ;;		On entry : 0/0
  6267 ;;		On exit  : 0/0
  6268 ;;		Unchanged: 0/0
  6269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6273 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6274 ;;Total ram usage:        0 bytes
  6275 ;; Hardware stack levels used:    1
  6276 ;; Hardware stack levels required when called:    8
  6277 ;; This function calls:
  6278 ;;		_I2C_Master_Wait
  6279 ;; This function is called by:
  6280 ;;		_loadRTC
  6281 ;;		_getRTC
  6282 ;; This function uses a non-reentrant model
  6283 ;;
  6284                           
  6285                           	psect	text27
  6286  002A34                     __ptext27:
  6287                           	opt stack 0
  6288  002A34                     _I2C_Master_Stop:
  6289                           	opt stack 18
  6290                           
  6291                           ;I2C.c: 44: I2C_Master_Wait();
  6292                           
  6293                           ;incstack = 0
  6294  002A34  ECC3  F014         	call	_I2C_Master_Wait	;wreg free
  6295                           
  6296                           ;I2C.c: 45: PEN = 1;
  6297  002A38  84C5               	bsf	4037,2,c	;volatile
  6298  002A3A  0012               	return		;funcret
  6299  002A3C                     __end_of_I2C_Master_Stop:
  6300                           	opt stack 0
  6301                           tblptru	equ	0xFF8
  6302                           tblptrh	equ	0xFF7
  6303                           tblptrl	equ	0xFF6
  6304                           tablat	equ	0xFF5
  6305                           prodh	equ	0xFF4
  6306                           prodl	equ	0xFF3
  6307                           intcon	equ	0xFF2
  6308                           intcon2	equ	0xFF1
  6309                           intcon3	equ	0xFF0
  6310                           postinc0	equ	0xFEE
  6311                           wreg	equ	0xFE8
  6312                           postdec1	equ	0xFE5
  6313                           fsr1l	equ	0xFE1
  6314                           indf2	equ	0xFDF
  6315                           postinc2	equ	0xFDE
  6316                           postdec2	equ	0xFDD
  6317                           fsr2h	equ	0xFDA
  6318                           fsr2l	equ	0xFD9
  6319                           status	equ	0xFD8
  6320                           
  6321 ;; *************** function _I2C_Master_Start *****************
  6322 ;; Defined at:
  6323 ;;		line 30 in file "I2C.c"
  6324 ;; Parameters:    Size  Location     Type
  6325 ;;		None
  6326 ;; Auto vars:     Size  Location     Type
  6327 ;;		None
  6328 ;; Return value:  Size  Location     Type
  6329 ;;                  1    wreg      void 
  6330 ;; Registers used:
  6331 ;;		wreg, status,2, status,0, cstack
  6332 ;; Tracked objects:
  6333 ;;		On entry : 0/0
  6334 ;;		On exit  : 0/0
  6335 ;;		Unchanged: 0/0
  6336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6340 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6341 ;;Total ram usage:        0 bytes
  6342 ;; Hardware stack levels used:    1
  6343 ;; Hardware stack levels required when called:    8
  6344 ;; This function calls:
  6345 ;;		_I2C_Master_Wait
  6346 ;; This function is called by:
  6347 ;;		_loadRTC
  6348 ;;		_getRTC
  6349 ;; This function uses a non-reentrant model
  6350 ;;
  6351                           
  6352                           	psect	text28
  6353  002A3C                     __ptext28:
  6354                           	opt stack 0
  6355  002A3C                     _I2C_Master_Start:
  6356                           	opt stack 18
  6357                           
  6358                           ;I2C.c: 32: I2C_Master_Wait();
  6359                           
  6360                           ;incstack = 0
  6361  002A3C  ECC3  F014         	call	_I2C_Master_Wait	;wreg free
  6362                           
  6363                           ;I2C.c: 33: SEN = 1;
  6364  002A40  80C5               	bsf	4037,0,c	;volatile
  6365  002A42  0012               	return		;funcret
  6366  002A44                     __end_of_I2C_Master_Start:
  6367                           	opt stack 0
  6368                           tblptru	equ	0xFF8
  6369                           tblptrh	equ	0xFF7
  6370                           tblptrl	equ	0xFF6
  6371                           tablat	equ	0xFF5
  6372                           prodh	equ	0xFF4
  6373                           prodl	equ	0xFF3
  6374                           intcon	equ	0xFF2
  6375                           intcon2	equ	0xFF1
  6376                           intcon3	equ	0xFF0
  6377                           postinc0	equ	0xFEE
  6378                           wreg	equ	0xFE8
  6379                           postdec1	equ	0xFE5
  6380                           fsr1l	equ	0xFE1
  6381                           indf2	equ	0xFDF
  6382                           postinc2	equ	0xFDE
  6383                           postdec2	equ	0xFDD
  6384                           fsr2h	equ	0xFDA
  6385                           fsr2l	equ	0xFD9
  6386                           status	equ	0xFD8
  6387                           
  6388 ;; *************** function _I2C_Master_Read *****************
  6389 ;; Defined at:
  6390 ;;		line 54 in file "I2C.c"
  6391 ;; Parameters:    Size  Location     Type
  6392 ;;  a               1    wreg     unsigned char 
  6393 ;; Auto vars:     Size  Location     Type
  6394 ;;  a               1    1[BANK0 ] unsigned char 
  6395 ;;  temp            1    2[BANK0 ] unsigned char 
  6396 ;; Return value:  Size  Location     Type
  6397 ;;                  1    wreg      unsigned char 
  6398 ;; Registers used:
  6399 ;;		wreg, status,2, status,0, cstack
  6400 ;; Tracked objects:
  6401 ;;		On entry : 0/0
  6402 ;;		On exit  : 0/0
  6403 ;;		Unchanged: 0/0
  6404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6406 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6408 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6409 ;;Total ram usage:        2 bytes
  6410 ;; Hardware stack levels used:    1
  6411 ;; Hardware stack levels required when called:    8
  6412 ;; This function calls:
  6413 ;;		_I2C_Master_Wait
  6414 ;; This function is called by:
  6415 ;;		_getRTC
  6416 ;; This function uses a non-reentrant model
  6417 ;;
  6418                           
  6419                           	psect	text29
  6420  00277E                     __ptext29:
  6421                           	opt stack 0
  6422  00277E                     _I2C_Master_Read:
  6423                           	opt stack 18
  6424                           
  6425                           ;incstack = 0
  6426                           ;I2C_Master_Read@a stored from wreg
  6427  00277E  0100               	movlb	0	; () banked
  6428  002780  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  6429                           
  6430                           ;I2C.c: 56: unsigned char temp;
  6431                           ;I2C.c: 57: I2C_Master_Wait();
  6432  002782  ECC3  F014         	call	_I2C_Master_Wait	;wreg free
  6433                           
  6434                           ;I2C.c: 58: RCEN = 1;
  6435  002786  86C5               	bsf	4037,3,c	;volatile
  6436                           
  6437                           ;I2C.c: 59: I2C_Master_Wait();
  6438  002788  ECC3  F014         	call	_I2C_Master_Wait	;wreg free
  6439                           
  6440                           ;I2C.c: 60: temp = SSPBUF;
  6441  00278C  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  6442                           
  6443                           ;I2C.c: 61: I2C_Master_Wait();
  6444  002790  ECC3  F014         	call	_I2C_Master_Wait	;wreg free
  6445                           
  6446                           ;I2C.c: 62: ACKDT = (a)?0:1;
  6447  002794  0100               	movlb	0	; () banked
  6448  002796  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  6449  002798  0100               	movlb	0	; () banked
  6450  00279A  A4D8               	btfss	status,2,c
  6451  00279C  D002               	goto	u2420
  6452  00279E  8AC5               	bsf	4037,5,c	;volatile
  6453  0027A0  D001               	goto	l4140
  6454  0027A2                     u2420:
  6455  0027A2  9AC5               	bcf	4037,5,c	;volatile
  6456  0027A4                     l4140:
  6457                           
  6458                           ;I2C.c: 63: ACKEN = 1;
  6459  0027A4  88C5               	bsf	4037,4,c	;volatile
  6460                           
  6461                           ;I2C.c: 64: return temp;
  6462  0027A6  0100               	movlb	0	; () banked
  6463  0027A8  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  6464  0027AA  0012               	return	
  6465  0027AC                     __end_of_I2C_Master_Read:
  6466                           	opt stack 0
  6467                           tblptru	equ	0xFF8
  6468                           tblptrh	equ	0xFF7
  6469                           tblptrl	equ	0xFF6
  6470                           tablat	equ	0xFF5
  6471                           prodh	equ	0xFF4
  6472                           prodl	equ	0xFF3
  6473                           intcon	equ	0xFF2
  6474                           intcon2	equ	0xFF1
  6475                           intcon3	equ	0xFF0
  6476                           postinc0	equ	0xFEE
  6477                           wreg	equ	0xFE8
  6478                           postdec1	equ	0xFE5
  6479                           fsr1l	equ	0xFE1
  6480                           indf2	equ	0xFDF
  6481                           postinc2	equ	0xFDE
  6482                           postdec2	equ	0xFDD
  6483                           fsr2h	equ	0xFDA
  6484                           fsr2l	equ	0xFD9
  6485                           status	equ	0xFD8
  6486                           
  6487 ;; *************** function _I2C_Master_Wait *****************
  6488 ;; Defined at:
  6489 ;;		line 25 in file "I2C.c"
  6490 ;; Parameters:    Size  Location     Type
  6491 ;;		None
  6492 ;; Auto vars:     Size  Location     Type
  6493 ;;		None
  6494 ;; Return value:  Size  Location     Type
  6495 ;;                  1    wreg      void 
  6496 ;; Registers used:
  6497 ;;		wreg, status,2, status,0
  6498 ;; Tracked objects:
  6499 ;;		On entry : 0/0
  6500 ;;		On exit  : 0/0
  6501 ;;		Unchanged: 0/0
  6502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6505 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6506 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6507 ;;Total ram usage:        1 bytes
  6508 ;; Hardware stack levels used:    1
  6509 ;; Hardware stack levels required when called:    7
  6510 ;; This function calls:
  6511 ;;		Nothing
  6512 ;; This function is called by:
  6513 ;;		_I2C_Master_Start
  6514 ;;		_I2C_Master_Stop
  6515 ;;		_I2C_Master_Write
  6516 ;;		_I2C_Master_Read
  6517 ;;		_I2C_Master_RepeatedStart
  6518 ;; This function uses a non-reentrant model
  6519 ;;
  6520                           
  6521                           	psect	text30
  6522  002986                     __ptext30:
  6523                           	opt stack 0
  6524  002986                     _I2C_Master_Wait:
  6525                           	opt stack 18
  6526  002986                     l184:
  6527  002986  B4C7               	btfsc	4039,2,c	;volatile
  6528  002988  D7FE               	goto	l184
  6529  00298A  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  6530  00298E  0E1F               	movlw	31
  6531  002990  0100               	movlb	0	; () banked
  6532  002992  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  6533  002994  B4D8               	btfsc	status,2,c
  6534  002996  0012               	return	
  6535  002998  D7F6               	goto	l184
  6536  00299A                     __end_of_I2C_Master_Wait:
  6537                           	opt stack 0
  6538                           tblptru	equ	0xFF8
  6539                           tblptrh	equ	0xFF7
  6540                           tblptrl	equ	0xFF6
  6541                           tablat	equ	0xFF5
  6542                           prodh	equ	0xFF4
  6543                           prodl	equ	0xFF3
  6544                           intcon	equ	0xFF2
  6545                           intcon2	equ	0xFF1
  6546                           intcon3	equ	0xFF0
  6547                           postinc0	equ	0xFEE
  6548                           wreg	equ	0xFE8
  6549                           postdec1	equ	0xFE5
  6550                           fsr1l	equ	0xFE1
  6551                           indf2	equ	0xFDF
  6552                           postinc2	equ	0xFDE
  6553                           postdec2	equ	0xFDD
  6554                           fsr2h	equ	0xFDA
  6555                           fsr2l	equ	0xFD9
  6556                           status	equ	0xFD8
  6557                           
  6558 ;; *************** function _change_state_to_menu_22 *****************
  6559 ;; Defined at:
  6560 ;;		line 440 in file "UI.c"
  6561 ;; Parameters:    Size  Location     Type
  6562 ;;		None
  6563 ;; Auto vars:     Size  Location     Type
  6564 ;;		None
  6565 ;; Return value:  Size  Location     Type
  6566 ;;                  1    wreg      void 
  6567 ;; Registers used:
  6568 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6569 ;; Tracked objects:
  6570 ;;		On entry : 0/0
  6571 ;;		On exit  : 0/0
  6572 ;;		Unchanged: 0/0
  6573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6578 ;;Total ram usage:        0 bytes
  6579 ;; Hardware stack levels used:    1
  6580 ;; Hardware stack levels required when called:   10
  6581 ;; This function calls:
  6582 ;;		_lcdInst
  6583 ;;		_printf
  6584 ;; This function is called by:
  6585 ;;		_UI
  6586 ;; This function uses a non-reentrant model
  6587 ;;
  6588                           
  6589                           	psect	text31
  6590  002492                     __ptext31:
  6591                           	opt stack 0
  6592  002492                     _change_state_to_menu_22:
  6593                           	opt stack 19
  6594                           
  6595                           ;UI.c: 441: cur_state = 22;
  6596                           
  6597                           ; BSR set to: 0
  6598                           ;incstack = 0
  6599  002492  0E00               	movlw	0
  6600  002494  0100               	movlb	0	; () banked
  6601  002496  6FE2               	movwf	(_cur_state+1)& (0+255),b
  6602  002498  0E16               	movlw	22
  6603  00249A  6FE1               	movwf	_cur_state& (0+255),b
  6604                           
  6605                           ; BSR set to: 0
  6606                           ;UI.c: 443: lcdInst(0b10000000);;
  6607  00249C  0E80               	movlw	128
  6608  00249E  ECF1  F014         	call	_lcdInst
  6609                           
  6610                           ;UI.c: 444: printf("2. SORT        <");
  6611  0024A2  0E64               	movlw	low STR_19
  6612  0024A4  0100               	movlb	0	; () banked
  6613  0024A6  6F8E               	movwf	printf@f& (0+255),b
  6614  0024A8  0EFF               	movlw	high STR_19
  6615  0024AA  0100               	movlb	0	; () banked
  6616  0024AC  6F8F               	movwf	(printf@f+1)& (0+255),b
  6617  0024AE  ECBB  F002         	call	_printf	;wreg free
  6618                           
  6619                           ;UI.c: 445: lcdInst(0b11000000);;
  6620  0024B2  0EC0               	movlw	192
  6621  0024B4  ECF1  F014         	call	_lcdInst
  6622                           
  6623                           ;UI.c: 446: printf("3. LOGS         ");
  6624  0024B8  0E65               	movlw	low STR_21
  6625  0024BA  0100               	movlb	0	; () banked
  6626  0024BC  6F8E               	movwf	printf@f& (0+255),b
  6627  0024BE  0EFE               	movlw	high STR_21
  6628  0024C0  0100               	movlb	0	; () banked
  6629  0024C2  6F8F               	movwf	(printf@f+1)& (0+255),b
  6630  0024C4  ECBB  F002         	call	_printf	;wreg free
  6631  0024C8  0012               	return		;funcret
  6632  0024CA                     __end_of_change_state_to_menu_22:
  6633                           	opt stack 0
  6634                           tblptru	equ	0xFF8
  6635                           tblptrh	equ	0xFF7
  6636                           tblptrl	equ	0xFF6
  6637                           tablat	equ	0xFF5
  6638                           prodh	equ	0xFF4
  6639                           prodl	equ	0xFF3
  6640                           intcon	equ	0xFF2
  6641                           intcon2	equ	0xFF1
  6642                           intcon3	equ	0xFF0
  6643                           postinc0	equ	0xFEE
  6644                           wreg	equ	0xFE8
  6645                           postdec1	equ	0xFE5
  6646                           fsr1l	equ	0xFE1
  6647                           indf2	equ	0xFDF
  6648                           postinc2	equ	0xFDE
  6649                           postdec2	equ	0xFDD
  6650                           fsr2h	equ	0xFDA
  6651                           fsr2l	equ	0xFD9
  6652                           status	equ	0xFD8
  6653                           
  6654 ;; *************** function _change_state_to_menu_12 *****************
  6655 ;; Defined at:
  6656 ;;		line 432 in file "UI.c"
  6657 ;; Parameters:    Size  Location     Type
  6658 ;;		None
  6659 ;; Auto vars:     Size  Location     Type
  6660 ;;		None
  6661 ;; Return value:  Size  Location     Type
  6662 ;;                  1    wreg      void 
  6663 ;; Registers used:
  6664 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6665 ;; Tracked objects:
  6666 ;;		On entry : 0/0
  6667 ;;		On exit  : 0/0
  6668 ;;		Unchanged: 0/0
  6669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6674 ;;Total ram usage:        0 bytes
  6675 ;; Hardware stack levels used:    1
  6676 ;; Hardware stack levels required when called:   10
  6677 ;; This function calls:
  6678 ;;		_lcdInst
  6679 ;;		_printf
  6680 ;; This function is called by:
  6681 ;;		_UI
  6682 ;; This function uses a non-reentrant model
  6683 ;;
  6684                           
  6685                           	psect	text32
  6686  0024CA                     __ptext32:
  6687                           	opt stack 0
  6688  0024CA                     _change_state_to_menu_12:
  6689                           	opt stack 19
  6690                           
  6691                           ;UI.c: 433: cur_state = 12;
  6692                           
  6693                           ;incstack = 0
  6694  0024CA  0E00               	movlw	0
  6695  0024CC  0100               	movlb	0	; () banked
  6696  0024CE  6FE2               	movwf	(_cur_state+1)& (0+255),b
  6697  0024D0  0E0C               	movlw	12
  6698  0024D2  6FE1               	movwf	_cur_state& (0+255),b
  6699                           
  6700                           ; BSR set to: 0
  6701                           ;UI.c: 435: lcdInst(0b10000000);;
  6702  0024D4  0E80               	movlw	128
  6703  0024D6  ECF1  F014         	call	_lcdInst
  6704                           
  6705                           ;UI.c: 436: printf("1. DATE/TIME    ");
  6706  0024DA  0E87               	movlw	low STR_18
  6707  0024DC  0100               	movlb	0	; () banked
  6708  0024DE  6F8E               	movwf	printf@f& (0+255),b
  6709  0024E0  0EFE               	movlw	high STR_18
  6710  0024E2  0100               	movlb	0	; () banked
  6711  0024E4  6F8F               	movwf	(printf@f+1)& (0+255),b
  6712  0024E6  ECBB  F002         	call	_printf	;wreg free
  6713                           
  6714                           ;UI.c: 437: lcdInst(0b11000000);;
  6715  0024EA  0EC0               	movlw	192
  6716  0024EC  ECF1  F014         	call	_lcdInst
  6717                           
  6718                           ;UI.c: 438: printf("2. SORT        <");
  6719  0024F0  0E64               	movlw	low STR_19
  6720  0024F2  0100               	movlb	0	; () banked
  6721  0024F4  6F8E               	movwf	printf@f& (0+255),b
  6722  0024F6  0EFF               	movlw	high STR_19
  6723  0024F8  0100               	movlb	0	; () banked
  6724  0024FA  6F8F               	movwf	(printf@f+1)& (0+255),b
  6725  0024FC  ECBB  F002         	call	_printf	;wreg free
  6726  002500  0012               	return		;funcret
  6727  002502                     __end_of_change_state_to_menu_12:
  6728                           	opt stack 0
  6729                           tblptru	equ	0xFF8
  6730                           tblptrh	equ	0xFF7
  6731                           tblptrl	equ	0xFF6
  6732                           tablat	equ	0xFF5
  6733                           prodh	equ	0xFF4
  6734                           prodl	equ	0xFF3
  6735                           intcon	equ	0xFF2
  6736                           intcon2	equ	0xFF1
  6737                           intcon3	equ	0xFF0
  6738                           postinc0	equ	0xFEE
  6739                           wreg	equ	0xFE8
  6740                           postdec1	equ	0xFE5
  6741                           fsr1l	equ	0xFE1
  6742                           indf2	equ	0xFDF
  6743                           postinc2	equ	0xFDE
  6744                           postdec2	equ	0xFDD
  6745                           fsr2h	equ	0xFDA
  6746                           fsr2l	equ	0xFD9
  6747                           status	equ	0xFD8
  6748                           
  6749 ;; *************** function _printf *****************
  6750 ;; Defined at:
  6751 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6752 ;; Parameters:    Size  Location     Type
  6753 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  6754 ;;		 -> STR_50(21), STR_49(11), STR_48(24), STR_35(17), 
  6755 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
  6756 ;;		 -> STR_30(17), STR_29(17), STR_28(17), STR_27(17), 
  6757 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(17), 
  6758 ;;		 -> STR_22(17), STR_21(17), STR_20(17), STR_19(17), 
  6759 ;;		 -> STR_18(17), STR_17(17), STR_16(17), STR_15(17), 
  6760 ;;		 -> STR_14(3), STR_13(17), STR_12(17), STR_11(17), 
  6761 ;;		 -> STR_10(17), STR_9(17), STR_8(18), STR_7(10), 
  6762 ;;		 -> STR_6(17), STR_5(7), STR_4(17), STR_3(18), 
  6763 ;;		 -> STR_2(21), STR_1(17), 
  6764 ;; Auto vars:     Size  Location     Type
  6765 ;;  tmpval          4    0        struct .
  6766 ;;  width           2   41[BANK0 ] int 
  6767 ;;  len             2   37[BANK0 ] unsigned int 
  6768 ;;  val             2   35[BANK0 ] unsigned int 
  6769 ;;  cp              2   33[BANK0 ] PTR const unsigned char 
  6770 ;;		 -> STR_51(7), printRTC@month(4), 
  6771 ;;  ap              2   31[BANK0 ] PTR void [1]
  6772 ;;		 -> ?i2_printf(2), ?_printf(2), 
  6773 ;;  c               1   40[BANK0 ] char 
  6774 ;;  flag            1   39[BANK0 ] unsigned char 
  6775 ;;  prec            1   30[BANK0 ] char 
  6776 ;; Return value:  Size  Location     Type
  6777 ;;                  2   14[BANK0 ] int 
  6778 ;; Registers used:
  6779 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6780 ;; Tracked objects:
  6781 ;;		On entry : 0/0
  6782 ;;		On exit  : 0/0
  6783 ;;		Unchanged: 0/0
  6784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6785 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6786 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6787 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6788 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6789 ;;Total ram usage:       29 bytes
  6790 ;; Hardware stack levels used:    1
  6791 ;; Hardware stack levels required when called:    9
  6792 ;; This function calls:
  6793 ;;		___lwdiv
  6794 ;;		___lwmod
  6795 ;;		___wmul
  6796 ;;		_isdigit
  6797 ;;		_putch
  6798 ;; This function is called by:
  6799 ;;		_UI
  6800 ;;		_change_state_to_menu_start
  6801 ;;		_change_state_to_menu_12
  6802 ;;		_change_state_to_menu_22
  6803 ;;		_printRTC
  6804 ;; This function uses a non-reentrant model
  6805 ;;
  6806                           
  6807                           	psect	text33
  6808  000576                     __ptext33:
  6809                           	opt stack 0
  6810  000576                     _printf:
  6811                           	opt stack 19
  6812                           
  6813                           ;doprnt.c: 466: va_list ap;
  6814                           ;doprnt.c: 499: signed char c;
  6815                           ;doprnt.c: 501: int width;
  6816                           ;doprnt.c: 506: signed char prec;
  6817                           ;doprnt.c: 508: unsigned char flag;
  6818                           ;doprnt.c: 523: union {
  6819                           ;doprnt.c: 524: unsigned long vd;
  6820                           ;doprnt.c: 525: double integ;
  6821                           ;doprnt.c: 526: } tmpval;
  6822                           ;doprnt.c: 528: unsigned int val;
  6823                           ;doprnt.c: 529: unsigned len;
  6824                           ;doprnt.c: 530: const char * cp;
  6825                           ;doprnt.c: 533: *ap = __va_start();
  6826                           
  6827                           ;incstack = 0
  6828  000576  0E90               	movlw	low (?_printf+2)
  6829  000578  0100               	movlb	0	; () banked
  6830  00057A  6F9F               	movwf	printf@ap& (0+255),b
  6831  00057C  0E00               	movlw	high (?_printf+2)
  6832  00057E  0100               	movlb	0	; () banked
  6833  000580  6FA0               	movwf	(printf@ap+1)& (0+255),b
  6834                           
  6835                           ;doprnt.c: 536: while(c = *f++) {
  6836  000582  D1EE               	goto	l4428
  6837  000584                     l4304:
  6838                           
  6839                           ; BSR set to: 0
  6840                           ;doprnt.c: 538: if(c != '%')
  6841  000584  0E25               	movlw	37
  6842  000586  0100               	movlb	0	; () banked
  6843  000588  19A8               	xorwf	printf@c& (0+255),w,b
  6844  00058A  B4D8               	btfsc	status,2,c
  6845  00058C  D005               	goto	l4308
  6846                           
  6847                           ; BSR set to: 0
  6848                           ;doprnt.c: 540: {
  6849                           ;doprnt.c: 541: (putch(c) );
  6850  00058E  0100               	movlb	0	; () banked
  6851  000590  51A8               	movf	printf@c& (0+255),w,b
  6852  000592  ECE9  F014         	call	_putch
  6853                           
  6854                           ;doprnt.c: 542: continue;
  6855  000596  D1E4               	goto	l4428
  6856  000598                     l4308:
  6857                           
  6858                           ;doprnt.c: 543: }
  6859                           ;doprnt.c: 546: width = 0;
  6860  000598  0E00               	movlw	0
  6861  00059A  0100               	movlb	0	; () banked
  6862  00059C  6FAA               	movwf	(printf@width+1)& (0+255),b
  6863  00059E  0E00               	movlw	0
  6864  0005A0  6FA9               	movwf	printf@width& (0+255),b
  6865                           
  6866                           ;doprnt.c: 548: flag = 0;
  6867  0005A2  0E00               	movlw	0
  6868  0005A4  0100               	movlb	0	; () banked
  6869  0005A6  6FA7               	movwf	printf@flag& (0+255),b
  6870                           
  6871                           ; BSR set to: 0
  6872                           ;doprnt.c: 551: switch(*f) {
  6873                           
  6874                           ;doprnt.c: 550: for(;;) {
  6875  0005A8  D005               	goto	l4314
  6876  0005AA                     l4310:
  6877                           
  6878                           ;doprnt.c: 580: flag |= 0x04;
  6879  0005AA  0100               	movlb	0	; () banked
  6880  0005AC  85A7               	bsf	printf@flag& (0+255),2,b
  6881                           
  6882                           ;doprnt.c: 581: f++;
  6883  0005AE  0100               	movlb	0	; () banked
  6884  0005B0  4B8E               	infsnz	printf@f& (0+255),f,b
  6885  0005B2  2B8F               	incf	(printf@f+1)& (0+255),f,b
  6886  0005B4                     l4314:
  6887  0005B4  C08E  FFF6         	movff	printf@f,tblptrl
  6888  0005B8  C08F  FFF7         	movff	printf@f+1,tblptrh
  6889  0005BC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6890  0005BC  6AF8               	clrf	tblptru,c
  6891  0005BE                     	endif
  6892  0005BE                     	if	0	;tblptru may be non-zero
  6893  0005BE                     	endif
  6894  0005BE  0008               	tblrd		*
  6895  0005C0  50F5               	movf	tablat,w,c
  6896                           
  6897                           ; Switch size 1, requested type "space"
  6898                           ; Number of cases is 1, Range of values is 48 to 48
  6899                           ; switch strategies available:
  6900                           ; Name         Instructions Cycles
  6901                           ; simple_byte            4     3 (average)
  6902                           ;	Chosen strategy is simple_byte
  6903  0005C2  0A30               	xorlw	48	; case 48
  6904  0005C4  B4D8               	btfsc	status,2,c
  6905  0005C6  D7F1               	goto	l4310
  6906                           
  6907                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6908                           
  6909                           ;doprnt.c: 586: }
  6910                           
  6911                           ;doprnt.c: 585: break;
  6912  0005C8  C08E  FFF6         	movff	printf@f,tblptrl
  6913  0005CC  C08F  FFF7         	movff	printf@f+1,tblptrh
  6914  0005D0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6915  0005D0  6AF8               	clrf	tblptru,c
  6916  0005D2                     	endif
  6917  0005D2                     	if	0	;tblptru may be non-zero
  6918  0005D2                     	endif
  6919  0005D2  0008               	tblrd		*
  6920  0005D4  50F5               	movf	tablat,w,c
  6921  0005D6  EC19  F014         	call	_isdigit
  6922  0005DA  A0D8               	btfss	status,0,c
  6923  0005DC  D0CF               	goto	l4360
  6924                           
  6925                           ;doprnt.c: 598: width = 0;
  6926  0005DE  0E00               	movlw	0
  6927  0005E0  0100               	movlb	0	; () banked
  6928  0005E2  6FAA               	movwf	(printf@width+1)& (0+255),b
  6929  0005E4  0E00               	movlw	0
  6930  0005E6  6FA9               	movwf	printf@width& (0+255),b
  6931  0005E8                     l4320:
  6932                           
  6933                           ;doprnt.c: 600: width *= 10;
  6934  0005E8  C0A9  F080         	movff	printf@width,___wmul@multiplier
  6935  0005EC  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
  6936  0005F0  0E00               	movlw	0
  6937  0005F2  0100               	movlb	0	; () banked
  6938  0005F4  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6939  0005F6  0E0A               	movlw	10
  6940  0005F8  6F82               	movwf	___wmul@multiplicand& (0+255),b
  6941  0005FA  EC9C  F012         	call	___wmul	;wreg free
  6942  0005FE  C080  F0A9         	movff	?___wmul,printf@width
  6943  000602  C081  F0AA         	movff	?___wmul+1,printf@width+1
  6944                           
  6945                           ;doprnt.c: 601: width += *f++ - '0';
  6946  000606  0ED0               	movlw	208
  6947  000608  0100               	movlb	0	; () banked
  6948  00060A  6F9A               	movwf	??_printf& (0+255),b
  6949  00060C  0EFF               	movlw	255
  6950  00060E  0100               	movlb	0	; () banked
  6951  000610  6F9B               	movwf	(??_printf+1)& (0+255),b
  6952  000612  C08E  FFF6         	movff	printf@f,tblptrl
  6953  000616  C08F  FFF7         	movff	printf@f+1,tblptrh
  6954  00061A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6955  00061A  6AF8               	clrf	tblptru,c
  6956  00061C                     	endif
  6957  00061C                     	if	0	;tblptru may be non-zero
  6958  00061C                     	endif
  6959  00061C  0008               	tblrd		*
  6960  00061E  50F5               	movf	tablat,w,c
  6961  000620  0100               	movlb	0	; () banked
  6962  000622  6F9C               	movwf	(??_printf+2)& (0+255),b
  6963  000624  6B9D               	clrf	(??_printf+3)& (0+255),b
  6964  000626  0100               	movlb	0	; () banked
  6965  000628  519A               	movf	??_printf& (0+255),w,b
  6966  00062A  0100               	movlb	0	; () banked
  6967  00062C  279C               	addwf	(??_printf+2)& (0+255),f,b
  6968  00062E  0100               	movlb	0	; () banked
  6969  000630  519B               	movf	(??_printf+1)& (0+255),w,b
  6970  000632  0100               	movlb	0	; () banked
  6971  000634  239D               	addwfc	(??_printf+3)& (0+255),f,b
  6972  000636  0100               	movlb	0	; () banked
  6973  000638  519C               	movf	(??_printf+2)& (0+255),w,b
  6974  00063A  0100               	movlb	0	; () banked
  6975  00063C  27A9               	addwf	printf@width& (0+255),f,b
  6976  00063E  0100               	movlb	0	; () banked
  6977  000640  519D               	movf	(??_printf+3)& (0+255),w,b
  6978  000642  0100               	movlb	0	; () banked
  6979  000644  23AA               	addwfc	(printf@width+1)& (0+255),f,b
  6980                           
  6981                           ; BSR set to: 0
  6982  000646  0100               	movlb	0	; () banked
  6983  000648  4B8E               	infsnz	printf@f& (0+255),f,b
  6984  00064A  2B8F               	incf	(printf@f+1)& (0+255),f,b
  6985                           
  6986                           ; BSR set to: 0
  6987                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6988  00064C  C08E  FFF6         	movff	printf@f,tblptrl
  6989  000650  C08F  FFF7         	movff	printf@f+1,tblptrh
  6990  000654                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6991  000654  6AF8               	clrf	tblptru,c
  6992  000656                     	endif
  6993  000656                     	if	0	;tblptru may be non-zero
  6994  000656                     	endif
  6995  000656  0008               	tblrd		*
  6996  000658  50F5               	movf	tablat,w,c
  6997  00065A  EC19  F014         	call	_isdigit
  6998  00065E  A0D8               	btfss	status,0,c
  6999  000660  D08D               	goto	l4360
  7000  000662  D7C2               	goto	l4320
  7001  000664                     l4328:
  7002                           
  7003                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  7004  000664  C09F  FFD9         	movff	printf@ap,fsr2l
  7005  000668  C0A0  FFDA         	movff	printf@ap+1,fsr2h
  7006  00066C  CFDE F0A1          	movff	postinc2,printf@cp
  7007  000670  CFDD F0A2          	movff	postdec2,printf@cp+1
  7008  000674  0E02               	movlw	2
  7009  000676  0100               	movlb	0	; () banked
  7010  000678  279F               	addwf	printf@ap& (0+255),f,b
  7011  00067A  0E00               	movlw	0
  7012  00067C  23A0               	addwfc	(printf@ap+1)& (0+255),f,b
  7013                           
  7014                           ; BSR set to: 0
  7015                           ;doprnt.c: 740: if(!cp)
  7016  00067E  0100               	movlb	0	; () banked
  7017  000680  51A1               	movf	printf@cp& (0+255),w,b
  7018  000682  0100               	movlb	0	; () banked
  7019  000684  11A2               	iorwf	(printf@cp+1)& (0+255),w,b
  7020  000686  A4D8               	btfss	status,2,c
  7021  000688  D006               	goto	l4336
  7022                           
  7023                           ; BSR set to: 0
  7024                           ;doprnt.c: 741: cp = "(null)";
  7025  00068A  0EBD               	movlw	low STR_51
  7026  00068C  0100               	movlb	0	; () banked
  7027  00068E  6FA1               	movwf	printf@cp& (0+255),b
  7028  000690  0EFF               	movlw	high STR_51
  7029  000692  0100               	movlb	0	; () banked
  7030  000694  6FA2               	movwf	(printf@cp+1)& (0+255),b
  7031  000696                     l4336:
  7032                           
  7033                           ; BSR set to: 0
  7034                           ;doprnt.c: 745: len = 0;
  7035  000696  0E00               	movlw	0
  7036  000698  0100               	movlb	0	; () banked
  7037  00069A  6FA6               	movwf	(printf@len+1)& (0+255),b
  7038  00069C  0E00               	movlw	0
  7039  00069E  6FA5               	movwf	printf@len& (0+255),b
  7040                           
  7041                           ;doprnt.c: 746: while(cp[len])
  7042  0006A0  D003               	goto	l4340
  7043  0006A2                     l4338:
  7044                           
  7045                           ;doprnt.c: 747: len++;
  7046  0006A2  0100               	movlb	0	; () banked
  7047  0006A4  4BA5               	infsnz	printf@len& (0+255),f,b
  7048  0006A6  2BA6               	incf	(printf@len+1)& (0+255),f,b
  7049  0006A8                     l4340:
  7050                           
  7051                           ; BSR set to: 0
  7052  0006A8  0100               	movlb	0	; () banked
  7053  0006AA  51A5               	movf	printf@len& (0+255),w,b
  7054  0006AC  0100               	movlb	0	; () banked
  7055  0006AE  25A1               	addwf	printf@cp& (0+255),w,b
  7056  0006B0  0100               	movlb	0	; () banked
  7057  0006B2  6F9A               	movwf	??_printf& (0+255),b
  7058  0006B4  0100               	movlb	0	; () banked
  7059  0006B6  51A6               	movf	(printf@len+1)& (0+255),w,b
  7060  0006B8  0100               	movlb	0	; () banked
  7061  0006BA  21A2               	addwfc	(printf@cp+1)& (0+255),w,b
  7062  0006BC  0100               	movlb	0	; () banked
  7063  0006BE  6F9B               	movwf	(??_printf+1)& (0+255),b
  7064  0006C0  C09A  FFF6         	movff	??_printf,tblptrl
  7065  0006C4  C09B  FFF7         	movff	??_printf+1,tblptrh
  7066  0006C8  0E00               	movlw	low (__mediumconst shr (0+16))
  7067  0006CA  6EF8               	movwf	tblptru,c
  7068  0006CC  0E0F               	movlw	(high __ramtop+-1)
  7069  0006CE  64F7               	cpfsgt	tblptrh,c
  7070  0006D0  D003               	bra	u2687
  7071  0006D2  0008               	tblrd		*
  7072  0006D4  50F5               	movf	tablat,w,c
  7073  0006D6  D005               	bra	u2680
  7074  0006D8                     u2687:
  7075  0006D8  CFF6 FFE9          	movff	tblptrl,fsr0l
  7076  0006DC  CFF7 FFEA          	movff	tblptrh,fsr0h
  7077  0006E0  50EF               	movf	indf0,w,c
  7078  0006E2                     u2680:
  7079  0006E2  0900               	iorlw	0
  7080  0006E4  A4D8               	btfss	status,2,c
  7081  0006E6  D7DD               	goto	l4338
  7082                           
  7083                           ;doprnt.c: 757: if(width > len)
  7084  0006E8  0100               	movlb	0	; () banked
  7085  0006EA  51A9               	movf	printf@width& (0+255),w,b
  7086  0006EC  0100               	movlb	0	; () banked
  7087  0006EE  5DA5               	subwf	printf@len& (0+255),w,b
  7088  0006F0  0100               	movlb	0	; () banked
  7089  0006F2  51AA               	movf	(printf@width+1)& (0+255),w,b
  7090  0006F4  0100               	movlb	0	; () banked
  7091  0006F6  59A6               	subwfb	(printf@len+1)& (0+255),w,b
  7092  0006F8  B0D8               	btfsc	status,0,c
  7093  0006FA  D009               	goto	l4346
  7094                           
  7095                           ; BSR set to: 0
  7096                           ;doprnt.c: 758: width -= len;
  7097  0006FC  0100               	movlb	0	; () banked
  7098  0006FE  51A5               	movf	printf@len& (0+255),w,b
  7099  000700  0100               	movlb	0	; () banked
  7100  000702  5FA9               	subwf	printf@width& (0+255),f,b
  7101  000704  0100               	movlb	0	; () banked
  7102  000706  51A6               	movf	(printf@len+1)& (0+255),w,b
  7103  000708  0100               	movlb	0	; () banked
  7104  00070A  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  7105  00070C  D009               	goto	l4350
  7106  00070E                     l4346:
  7107                           
  7108                           ; BSR set to: 0
  7109                           ;doprnt.c: 759: else
  7110                           ;doprnt.c: 760: width = 0;
  7111  00070E  0E00               	movlw	0
  7112  000710  0100               	movlb	0	; () banked
  7113  000712  6FAA               	movwf	(printf@width+1)& (0+255),b
  7114  000714  0E00               	movlw	0
  7115  000716  6FA9               	movwf	printf@width& (0+255),b
  7116                           
  7117                           ; BSR set to: 0
  7118                           ;doprnt.c: 764: while(width--)
  7119  000718  D003               	goto	l4350
  7120  00071A                     l4348:
  7121                           
  7122                           ; BSR set to: 0
  7123                           ;doprnt.c: 765: (putch(' ') );
  7124  00071A  0E20               	movlw	32
  7125  00071C  ECE9  F014         	call	_putch
  7126  000720                     l4350:
  7127  000720  0100               	movlb	0	; () banked
  7128  000722  07A9               	decf	printf@width& (0+255),f,b
  7129  000724  A0D8               	btfss	status,0,c
  7130  000726  07AA               	decf	(printf@width+1)& (0+255),f,b
  7131  000728  0100               	movlb	0	; () banked
  7132  00072A  29A9               	incf	printf@width& (0+255),w,b
  7133  00072C  E1F6               	bnz	l4348
  7134  00072E  0100               	movlb	0	; () banked
  7135  000730  29AA               	incf	(printf@width+1)& (0+255),w,b
  7136  000732  B4D8               	btfsc	status,2,c
  7137  000734  D017               	goto	l4356
  7138  000736  D7F1               	goto	l4348
  7139  000738                     l4352:
  7140                           
  7141                           ; BSR set to: 0
  7142                           ;doprnt.c: 768: (putch(*cp++) );
  7143  000738  C0A1  FFF6         	movff	printf@cp,tblptrl
  7144  00073C  C0A2  FFF7         	movff	printf@cp+1,tblptrh
  7145  000740  0E00               	movlw	low (__mediumconst shr (0+16))
  7146  000742  6EF8               	movwf	tblptru,c
  7147  000744  0E0F               	movlw	(high __ramtop+-1)
  7148  000746  64F7               	cpfsgt	tblptrh,c
  7149  000748  D003               	bra	u2727
  7150  00074A  0008               	tblrd		*
  7151  00074C  50F5               	movf	tablat,w,c
  7152  00074E  D005               	bra	u2720
  7153  000750                     u2727:
  7154  000750  CFF6 FFE9          	movff	tblptrl,fsr0l
  7155  000754  CFF7 FFEA          	movff	tblptrh,fsr0h
  7156  000758  50EF               	movf	indf0,w,c
  7157  00075A                     u2720:
  7158  00075A  ECE9  F014         	call	_putch
  7159  00075E  0100               	movlb	0	; () banked
  7160  000760  4BA1               	infsnz	printf@cp& (0+255),f,b
  7161  000762  2BA2               	incf	(printf@cp+1)& (0+255),f,b
  7162  000764                     l4356:
  7163                           
  7164                           ; BSR set to: 0
  7165  000764  0100               	movlb	0	; () banked
  7166  000766  07A5               	decf	printf@len& (0+255),f,b
  7167  000768  A0D8               	btfss	status,0,c
  7168  00076A  07A6               	decf	(printf@len+1)& (0+255),f,b
  7169  00076C  0100               	movlb	0	; () banked
  7170  00076E  29A5               	incf	printf@len& (0+255),w,b
  7171  000770  E1E3               	bnz	l4352
  7172  000772  0100               	movlb	0	; () banked
  7173  000774  29A6               	incf	(printf@len+1)& (0+255),w,b
  7174  000776  B4D8               	btfsc	status,2,c
  7175  000778  D0F3               	goto	l4428
  7176  00077A  D7DE               	goto	l4352
  7177  00077C                     l4360:
  7178  00077C  C08E  FFF6         	movff	printf@f,tblptrl
  7179  000780  C08F  FFF7         	movff	printf@f+1,tblptrh
  7180  000784  0100               	movlb	0	; () banked
  7181  000786  4B8E               	infsnz	printf@f& (0+255),f,b
  7182  000788  2B8F               	incf	(printf@f+1)& (0+255),f,b
  7183  00078A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7184  00078A  6AF8               	clrf	tblptru,c
  7185  00078C                     	endif
  7186  00078C                     	if	0	;tblptru may be non-zero
  7187  00078C                     	endif
  7188  00078C  0008               	tblrd		*
  7189  00078E  CFF5 F0A8          	movff	tablat,printf@c
  7190  000792  0100               	movlb	0	; () banked
  7191  000794  51A8               	movf	printf@c& (0+255),w,b
  7192                           
  7193                           ; Switch size 1, requested type "space"
  7194                           ; Number of cases is 4, Range of values is 0 to 115
  7195                           ; switch strategies available:
  7196                           ; Name         Instructions Cycles
  7197                           ; simple_byte           13     7 (average)
  7198                           ;	Chosen strategy is simple_byte
  7199  000796  0A00               	xorlw	0	; case 0
  7200  000798  B4D8               	btfsc	status,2,c
  7201  00079A  0012               	return	
  7202  00079C  0A64               	xorlw	100	; case 100
  7203  00079E  B4D8               	btfsc	status,2,c
  7204  0007A0  D007               	goto	l4362
  7205  0007A2  0A0D               	xorlw	13	; case 105
  7206  0007A4  B4D8               	btfsc	status,2,c
  7207  0007A6  D004               	goto	l4362
  7208  0007A8  0A1A               	xorlw	26	; case 115
  7209  0007AA  B4D8               	btfsc	status,2,c
  7210  0007AC  D75B               	goto	l4328
  7211  0007AE  D0D8               	goto	l4428
  7212  0007B0                     l4362:
  7213                           
  7214                           ;doprnt.c: 1253: {
  7215                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7216  0007B0  C09F  FFD9         	movff	printf@ap,fsr2l
  7217  0007B4  C0A0  FFDA         	movff	printf@ap+1,fsr2h
  7218  0007B8  CFDE F0A3          	movff	postinc2,printf@val
  7219  0007BC  CFDD F0A4          	movff	postdec2,printf@val+1
  7220  0007C0  0E02               	movlw	2
  7221  0007C2  0100               	movlb	0	; () banked
  7222  0007C4  279F               	addwf	printf@ap& (0+255),f,b
  7223  0007C6  0E00               	movlw	0
  7224  0007C8  23A0               	addwfc	(printf@ap+1)& (0+255),f,b
  7225                           
  7226                           ; BSR set to: 0
  7227                           ;doprnt.c: 1261: if((int)val < 0) {
  7228  0007CA  0100               	movlb	0	; () banked
  7229  0007CC  AFA4               	btfss	(printf@val+1)& (0+255),7,b
  7230  0007CE  D008               	goto	l4372
  7231                           
  7232                           ; BSR set to: 0
  7233                           ;doprnt.c: 1262: flag |= 0x03;
  7234  0007D0  0E03               	movlw	3
  7235  0007D2  0100               	movlb	0	; () banked
  7236  0007D4  13A7               	iorwf	printf@flag& (0+255),f,b
  7237                           
  7238                           ; BSR set to: 0
  7239                           ;doprnt.c: 1263: val = -val;
  7240  0007D6  0100               	movlb	0	; () banked
  7241  0007D8  6DA3               	negf	printf@val& (0+255),b
  7242  0007DA  1FA4               	comf	(printf@val+1)& (0+255),f,b
  7243  0007DC  B0D8               	btfsc	status,0,c
  7244  0007DE  2BA4               	incf	(printf@val+1)& (0+255),f,b
  7245  0007E0                     l4372:
  7246                           
  7247                           ; BSR set to: 0
  7248                           ;doprnt.c: 1264: }
  7249                           ;doprnt.c: 1266: }
  7250                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7251  0007E0  0E01               	movlw	1
  7252  0007E2  0100               	movlb	0	; () banked
  7253  0007E4  6FA8               	movwf	printf@c& (0+255),b
  7254  0007E6                     l4374:
  7255                           
  7256                           ; BSR set to: 0
  7257  0007E6  0E05               	movlw	5
  7258  0007E8  0100               	movlb	0	; () banked
  7259  0007EA  19A8               	xorwf	printf@c& (0+255),w,b
  7260  0007EC  B4D8               	btfsc	status,2,c
  7261  0007EE  D019               	goto	l4386
  7262                           
  7263                           ; BSR set to: 0
  7264                           ;doprnt.c: 1306: if(val < dpowers[c])
  7265                           
  7266                           ; BSR set to: 0
  7267                           
  7268                           ; BSR set to: 0
  7269  0007F0  0100               	movlb	0	; () banked
  7270  0007F2  51A8               	movf	printf@c& (0+255),w,b
  7271  0007F4  0D02               	mullw	2
  7272  0007F6  0EC6               	movlw	low _dpowers
  7273  0007F8  24F3               	addwf	prodl,w,c
  7274  0007FA  6EF6               	movwf	tblptrl,c
  7275  0007FC  0EFD               	movlw	high _dpowers
  7276  0007FE  20F4               	addwfc	prodh,w,c
  7277  000800  6EF7               	movwf	tblptrh,c
  7278  000802                     	if	1	;There are 3 active tblptr bytes
  7279  000802  6AF8               	clrf	tblptru,c
  7280  000804  0E00               	movlw	low (__mediumconst shr (0+16))
  7281  000806  22F8               	addwfc	tblptru,f,c
  7282  000808                     	endif
  7283  000808  0009               	tblrd		*+
  7284  00080A  50F5               	movf	tablat,w,c
  7285  00080C  0100               	movlb	0	; () banked
  7286  00080E  5DA3               	subwf	printf@val& (0+255),w,b
  7287  000810  0009               	tblrd		*+
  7288  000812  50F5               	movf	tablat,w,c
  7289  000814  0100               	movlb	0	; () banked
  7290  000816  59A4               	subwfb	(printf@val+1)& (0+255),w,b
  7291  000818  A0D8               	btfss	status,0,c
  7292  00081A  D003               	goto	l4386
  7293                           
  7294                           ; BSR set to: 0
  7295                           
  7296                           ; BSR set to: 0
  7297                           
  7298                           ; BSR set to: 0
  7299                           ;doprnt.c: 1307: break;
  7300  00081C  0100               	movlb	0	; () banked
  7301  00081E  2BA8               	incf	printf@c& (0+255),f,b
  7302  000820  D7E2               	goto	l4374
  7303  000822                     l4386:
  7304                           
  7305                           ; BSR set to: 0
  7306                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7307  000822  0100               	movlb	0	; () banked
  7308  000824  51A9               	movf	printf@width& (0+255),w,b
  7309  000826  0100               	movlb	0	; () banked
  7310  000828  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  7311  00082A  B4D8               	btfsc	status,2,c
  7312  00082C  D00B               	goto	l4392
  7313                           
  7314                           ; BSR set to: 0
  7315  00082E  C0A7  F09A         	movff	printf@flag,??_printf
  7316  000832  0E03               	movlw	3
  7317  000834  0100               	movlb	0	; () banked
  7318  000836  179A               	andwf	??_printf& (0+255),f,b
  7319  000838  B4D8               	btfsc	status,2,c
  7320  00083A  D004               	goto	l4392
  7321                           
  7322                           ; BSR set to: 0
  7323                           ;doprnt.c: 1346: width--;
  7324  00083C  0100               	movlb	0	; () banked
  7325  00083E  07A9               	decf	printf@width& (0+255),f,b
  7326  000840  A0D8               	btfss	status,0,c
  7327  000842  07AA               	decf	(printf@width+1)& (0+255),f,b
  7328  000844                     l4392:
  7329                           
  7330                           ; BSR set to: 0
  7331                           ;doprnt.c: 1381: if(width > c)
  7332  000844  0E80               	movlw	128
  7333  000846  0100               	movlb	0	; () banked
  7334  000848  BFA8               	btfsc	printf@c& (0+255),7,b
  7335  00084A  0E7F               	movlw	127
  7336  00084C  0100               	movlb	0	; () banked
  7337  00084E  6F9A               	movwf	??_printf& (0+255),b
  7338  000850  0100               	movlb	0	; () banked
  7339  000852  51A9               	movf	printf@width& (0+255),w,b
  7340  000854  0100               	movlb	0	; () banked
  7341  000856  5DA8               	subwf	printf@c& (0+255),w,b
  7342  000858  0100               	movlb	0	; () banked
  7343  00085A  51AA               	movf	(printf@width+1)& (0+255),w,b
  7344  00085C  0A80               	xorlw	128
  7345  00085E  0100               	movlb	0	; () banked
  7346  000860  599A               	subwfb	??_printf& (0+255),w,b
  7347  000862  B0D8               	btfsc	status,0,c
  7348  000864  D00B               	goto	l4396
  7349                           
  7350                           ; BSR set to: 0
  7351                           ;doprnt.c: 1382: width -= c;
  7352  000866  0100               	movlb	0	; () banked
  7353  000868  51A8               	movf	printf@c& (0+255),w,b
  7354  00086A  0100               	movlb	0	; () banked
  7355  00086C  5FA9               	subwf	printf@width& (0+255),f,b
  7356  00086E  0E00               	movlw	0
  7357  000870  0100               	movlb	0	; () banked
  7358  000872  BFA8               	btfsc	printf@c& (0+255),7,b
  7359  000874  0EFF               	movlw	255
  7360  000876  0100               	movlb	0	; () banked
  7361  000878  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  7362  00087A  D005               	goto	l4398
  7363  00087C                     l4396:
  7364                           
  7365                           ; BSR set to: 0
  7366                           ;doprnt.c: 1383: else
  7367                           ;doprnt.c: 1384: width = 0;
  7368  00087C  0E00               	movlw	0
  7369  00087E  0100               	movlb	0	; () banked
  7370  000880  6FAA               	movwf	(printf@width+1)& (0+255),b
  7371  000882  0E00               	movlw	0
  7372  000884  6FA9               	movwf	printf@width& (0+255),b
  7373  000886                     l4398:
  7374                           
  7375                           ; BSR set to: 0
  7376                           ;doprnt.c: 1387: if(flag & 0x04) {
  7377  000886  0100               	movlb	0	; () banked
  7378  000888  A5A7               	btfss	printf@flag& (0+255),2,b
  7379  00088A  D018               	goto	l4410
  7380                           
  7381                           ; BSR set to: 0
  7382                           ;doprnt.c: 1392: if(flag & 0x03)
  7383  00088C  C0A7  F09A         	movff	printf@flag,??_printf
  7384  000890  0E03               	movlw	3
  7385  000892  0100               	movlb	0	; () banked
  7386  000894  179A               	andwf	??_printf& (0+255),f,b
  7387  000896  B4D8               	btfsc	status,2,c
  7388  000898  D003               	goto	l4404
  7389                           
  7390                           ; BSR set to: 0
  7391                           ;doprnt.c: 1393: (putch('-') );
  7392  00089A  0E2D               	movlw	45
  7393  00089C  ECE9  F014         	call	_putch
  7394  0008A0                     l4404:
  7395                           
  7396                           ;doprnt.c: 1415: if(width)
  7397  0008A0  0100               	movlb	0	; () banked
  7398  0008A2  51A9               	movf	printf@width& (0+255),w,b
  7399  0008A4  0100               	movlb	0	; () banked
  7400  0008A6  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  7401  0008A8  B4D8               	btfsc	status,2,c
  7402  0008AA  D025               	goto	l4420
  7403                           
  7404                           ; BSR set to: 0
  7405                           ;doprnt.c: 1417: (putch('0') );
  7406                           
  7407                           ; BSR set to: 0
  7408                           
  7409                           ;doprnt.c: 1416: do
  7410  0008AC  0E30               	movlw	48
  7411  0008AE  ECE9  F014         	call	_putch
  7412                           
  7413                           ;doprnt.c: 1418: while(--width);
  7414  0008B2  0100               	movlb	0	; () banked
  7415  0008B4  07A9               	decf	printf@width& (0+255),f,b
  7416  0008B6  A0D8               	btfss	status,0,c
  7417  0008B8  07AA               	decf	(printf@width+1)& (0+255),f,b
  7418  0008BA  D7F2               	goto	l4404
  7419  0008BC                     l4410:
  7420                           
  7421                           ; BSR set to: 0
  7422                           ;doprnt.c: 1422: {
  7423                           ;doprnt.c: 1424: if(width
  7424                           ;doprnt.c: 1428: )
  7425  0008BC  0100               	movlb	0	; () banked
  7426  0008BE  51A9               	movf	printf@width& (0+255),w,b
  7427  0008C0  0100               	movlb	0	; () banked
  7428  0008C2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  7429  0008C4  B4D8               	btfsc	status,2,c
  7430  0008C6  D00D               	goto	l4416
  7431  0008C8                     l4412:
  7432                           
  7433                           ; BSR set to: 0
  7434                           ;doprnt.c: 1430: (putch(' ') );
  7435  0008C8  0E20               	movlw	32
  7436  0008CA  ECE9  F014         	call	_putch
  7437                           
  7438                           ;doprnt.c: 1431: while(--width);
  7439  0008CE  0100               	movlb	0	; () banked
  7440  0008D0  07A9               	decf	printf@width& (0+255),f,b
  7441  0008D2  A0D8               	btfss	status,0,c
  7442  0008D4  07AA               	decf	(printf@width+1)& (0+255),f,b
  7443  0008D6  0100               	movlb	0	; () banked
  7444  0008D8  51A9               	movf	printf@width& (0+255),w,b
  7445  0008DA  0100               	movlb	0	; () banked
  7446  0008DC  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  7447  0008DE  A4D8               	btfss	status,2,c
  7448  0008E0  D7F3               	goto	l4412
  7449  0008E2                     l4416:
  7450                           
  7451                           ; BSR set to: 0
  7452                           ;doprnt.c: 1438: if(flag & 0x03)
  7453  0008E2  C0A7  F09A         	movff	printf@flag,??_printf
  7454  0008E6  0E03               	movlw	3
  7455  0008E8  0100               	movlb	0	; () banked
  7456  0008EA  179A               	andwf	??_printf& (0+255),f,b
  7457  0008EC  B4D8               	btfsc	status,2,c
  7458  0008EE  D003               	goto	l4420
  7459                           
  7460                           ; BSR set to: 0
  7461                           ;doprnt.c: 1439: (putch('-') );
  7462  0008F0  0E2D               	movlw	45
  7463  0008F2  ECE9  F014         	call	_putch
  7464  0008F6                     l4420:
  7465                           
  7466                           ;doprnt.c: 1469: }
  7467                           ;doprnt.c: 1472: prec = c;
  7468  0008F6  C0A8  F09E         	movff	printf@c,printf@prec
  7469                           
  7470                           ;doprnt.c: 1474: while(prec--) {
  7471  0008FA  D02C               	goto	l4426
  7472  0008FC                     l4422:
  7473                           
  7474                           ;doprnt.c: 1478: {
  7475                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7476  0008FC  0100               	movlb	0	; () banked
  7477  0008FE  519E               	movf	printf@prec& (0+255),w,b
  7478  000900  0D02               	mullw	2
  7479  000902  0EC6               	movlw	low _dpowers
  7480  000904  24F3               	addwf	prodl,w,c
  7481  000906  6EF6               	movwf	tblptrl,c
  7482  000908  0EFD               	movlw	high _dpowers
  7483  00090A  20F4               	addwfc	prodh,w,c
  7484  00090C  6EF7               	movwf	tblptrh,c
  7485  00090E                     	if	1	;There are 3 active tblptr bytes
  7486  00090E  6AF8               	clrf	tblptru,c
  7487  000910  0E00               	movlw	low (__mediumconst shr (0+16))
  7488  000912  22F8               	addwfc	tblptru,f,c
  7489  000914                     	endif
  7490  000914  0009               	tblrd		*+
  7491  000916  CFF5 F082          	movff	tablat,___lwdiv@divisor
  7492  00091A  000A               	tblrd		*-
  7493  00091C  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  7494  000920  C0A3  F080         	movff	printf@val,___lwdiv@dividend
  7495  000924  C0A4  F081         	movff	printf@val+1,___lwdiv@dividend+1
  7496  000928  ECDC  F00F         	call	___lwdiv	;wreg free
  7497  00092C  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  7498  000930  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  7499  000934  0E00               	movlw	0
  7500  000936  0100               	movlb	0	; () banked
  7501  000938  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  7502  00093A  0E0A               	movlw	10
  7503  00093C  6F89               	movwf	___lwmod@divisor& (0+255),b
  7504  00093E  ECBC  F010         	call	___lwmod	;wreg free
  7505  000942  0100               	movlb	0	; () banked
  7506  000944  5187               	movf	?___lwmod& (0+255),w,b
  7507  000946  0F30               	addlw	48
  7508  000948  0100               	movlb	0	; () banked
  7509  00094A  6FA8               	movwf	printf@c& (0+255),b
  7510                           
  7511                           ; BSR set to: 0
  7512                           ;doprnt.c: 1523: }
  7513                           ;doprnt.c: 1524: (putch(c) );
  7514  00094C  0100               	movlb	0	; () banked
  7515  00094E  51A8               	movf	printf@c& (0+255),w,b
  7516  000950  ECE9  F014         	call	_putch
  7517  000954                     l4426:
  7518  000954  0100               	movlb	0	; () banked
  7519  000956  079E               	decf	printf@prec& (0+255),f,b
  7520  000958  0100               	movlb	0	; () banked
  7521  00095A  299E               	incf	printf@prec& (0+255),w,b
  7522  00095C  A4D8               	btfss	status,2,c
  7523  00095E  D7CE               	goto	l4422
  7524  000960                     l4428:
  7525  000960  C08E  FFF6         	movff	printf@f,tblptrl
  7526  000964  C08F  FFF7         	movff	printf@f+1,tblptrh
  7527  000968  0100               	movlb	0	; () banked
  7528  00096A  4B8E               	infsnz	printf@f& (0+255),f,b
  7529  00096C  2B8F               	incf	(printf@f+1)& (0+255),f,b
  7530  00096E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7531  00096E  6AF8               	clrf	tblptru,c
  7532  000970                     	endif
  7533  000970                     	if	0	;tblptru may be non-zero
  7534  000970                     	endif
  7535  000970  0008               	tblrd		*
  7536  000972  CFF5 F0A8          	movff	tablat,printf@c
  7537  000976  0100               	movlb	0	; () banked
  7538  000978  51A8               	movf	printf@c& (0+255),w,b
  7539  00097A  B4D8               	btfsc	status,2,c
  7540  00097C  0012               	return	
  7541  00097E  D602               	goto	l4304
  7542  000980                     __end_of_printf:
  7543                           	opt stack 0
  7544                           tblptru	equ	0xFF8
  7545                           tblptrh	equ	0xFF7
  7546                           tblptrl	equ	0xFF6
  7547                           tablat	equ	0xFF5
  7548                           prodh	equ	0xFF4
  7549                           prodl	equ	0xFF3
  7550                           intcon	equ	0xFF2
  7551                           intcon2	equ	0xFF1
  7552                           intcon3	equ	0xFF0
  7553                           indf0	equ	0xFEF
  7554                           postinc0	equ	0xFEE
  7555                           fsr0h	equ	0xFEA
  7556                           fsr0l	equ	0xFE9
  7557                           wreg	equ	0xFE8
  7558                           postdec1	equ	0xFE5
  7559                           fsr1l	equ	0xFE1
  7560                           indf2	equ	0xFDF
  7561                           postinc2	equ	0xFDE
  7562                           postdec2	equ	0xFDD
  7563                           fsr2h	equ	0xFDA
  7564                           fsr2l	equ	0xFD9
  7565                           status	equ	0xFD8
  7566                           
  7567 ;; *************** function _putch *****************
  7568 ;; Defined at:
  7569 ;;		line 19 in file "lcd.c"
  7570 ;; Parameters:    Size  Location     Type
  7571 ;;  data            1    wreg     unsigned char 
  7572 ;; Auto vars:     Size  Location     Type
  7573 ;;  data            1    2[BANK0 ] unsigned char 
  7574 ;; Return value:  Size  Location     Type
  7575 ;;                  1    wreg      void 
  7576 ;; Registers used:
  7577 ;;		wreg, status,2, status,0, cstack
  7578 ;; Tracked objects:
  7579 ;;		On entry : 0/0
  7580 ;;		On exit  : 0/0
  7581 ;;		Unchanged: 0/0
  7582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7584 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7586 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7587 ;;Total ram usage:        1 bytes
  7588 ;; Hardware stack levels used:    1
  7589 ;; Hardware stack levels required when called:    8
  7590 ;; This function calls:
  7591 ;;		_lcdNibble
  7592 ;; This function is called by:
  7593 ;;		_printf
  7594 ;; This function uses a non-reentrant model
  7595 ;;
  7596                           
  7597                           	psect	text34
  7598  0029D2                     __ptext34:
  7599                           	opt stack 0
  7600  0029D2                     _putch:
  7601                           	opt stack 19
  7602                           
  7603                           ;incstack = 0
  7604                           ;putch@data stored from wreg
  7605  0029D2  0100               	movlb	0	; () banked
  7606  0029D4  6F82               	movwf	putch@data& (0+255),b
  7607                           
  7608                           ;lcd.c: 20: LATDbits.LATD2 = 1;
  7609  0029D6  848C               	bsf	3980,2,c	;volatile
  7610                           
  7611                           ;lcd.c: 21: lcdNibble(data);
  7612  0029D8  0100               	movlb	0	; () banked
  7613  0029DA  5182               	movf	putch@data& (0+255),w,b
  7614  0029DC  EC88  F010         	call	_lcdNibble
  7615  0029E0  0012               	return		;funcret
  7616  0029E2                     __end_of_putch:
  7617                           	opt stack 0
  7618                           tblptru	equ	0xFF8
  7619                           tblptrh	equ	0xFF7
  7620                           tblptrl	equ	0xFF6
  7621                           tablat	equ	0xFF5
  7622                           prodh	equ	0xFF4
  7623                           prodl	equ	0xFF3
  7624                           intcon	equ	0xFF2
  7625                           intcon2	equ	0xFF1
  7626                           intcon3	equ	0xFF0
  7627                           indf0	equ	0xFEF
  7628                           postinc0	equ	0xFEE
  7629                           fsr0h	equ	0xFEA
  7630                           fsr0l	equ	0xFE9
  7631                           wreg	equ	0xFE8
  7632                           postdec1	equ	0xFE5
  7633                           fsr1l	equ	0xFE1
  7634                           indf2	equ	0xFDF
  7635                           postinc2	equ	0xFDE
  7636                           postdec2	equ	0xFDD
  7637                           fsr2h	equ	0xFDA
  7638                           fsr2l	equ	0xFD9
  7639                           status	equ	0xFD8
  7640                           
  7641 ;; *************** function _isdigit *****************
  7642 ;; Defined at:
  7643 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7644 ;; Parameters:    Size  Location     Type
  7645 ;;  c               1    wreg     unsigned char 
  7646 ;; Auto vars:     Size  Location     Type
  7647 ;;  c               1    2[BANK0 ] unsigned char 
  7648 ;; Return value:  Size  Location     Type
  7649 ;;		None               void
  7650 ;; Registers used:
  7651 ;;		wreg, status,2, status,0
  7652 ;; Tracked objects:
  7653 ;;		On entry : 0/0
  7654 ;;		On exit  : 0/0
  7655 ;;		Unchanged: 0/0
  7656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7658 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7659 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7660 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7661 ;;Total ram usage:        3 bytes
  7662 ;; Hardware stack levels used:    1
  7663 ;; Hardware stack levels required when called:    7
  7664 ;; This function calls:
  7665 ;;		Nothing
  7666 ;; This function is called by:
  7667 ;;		_printf
  7668 ;; This function uses a non-reentrant model
  7669 ;;
  7670                           
  7671                           	psect	text35
  7672  002832                     __ptext35:
  7673                           	opt stack 0
  7674  002832                     _isdigit:
  7675                           	opt stack 20
  7676                           
  7677                           ;incstack = 0
  7678                           ;isdigit@c stored from wreg
  7679  002832  0100               	movlb	0	; () banked
  7680  002834  6F82               	movwf	isdigit@c& (0+255),b
  7681  002836  0E00               	movlw	0
  7682  002838  0100               	movlb	0	; () banked
  7683  00283A  6F81               	movwf	_isdigit$1808& (0+255),b
  7684                           
  7685                           ; BSR set to: 0
  7686  00283C  0E3A               	movlw	58
  7687  00283E  0100               	movlb	0	; () banked
  7688  002840  6182               	cpfslt	isdigit@c& (0+255),b
  7689  002842  D007               	goto	l4158
  7690                           
  7691                           ; BSR set to: 0
  7692  002844  0E2F               	movlw	47
  7693  002846  0100               	movlb	0	; () banked
  7694  002848  6582               	cpfsgt	isdigit@c& (0+255),b
  7695  00284A  D003               	goto	l4158
  7696                           
  7697                           ; BSR set to: 0
  7698  00284C  0E01               	movlw	1
  7699  00284E  0100               	movlb	0	; () banked
  7700  002850  6F81               	movwf	_isdigit$1808& (0+255),b
  7701  002852                     l4158:
  7702                           
  7703                           ; BSR set to: 0
  7704  002852  C081  F080         	movff	_isdigit$1808,??_isdigit
  7705  002856  0100               	movlb	0	; () banked
  7706  002858  3180               	rrcf	??_isdigit& (0+255),w,b
  7707  00285A  0012               	return	
  7708  00285C                     __end_of_isdigit:
  7709                           	opt stack 0
  7710                           tblptru	equ	0xFF8
  7711                           tblptrh	equ	0xFF7
  7712                           tblptrl	equ	0xFF6
  7713                           tablat	equ	0xFF5
  7714                           prodh	equ	0xFF4
  7715                           prodl	equ	0xFF3
  7716                           intcon	equ	0xFF2
  7717                           intcon2	equ	0xFF1
  7718                           intcon3	equ	0xFF0
  7719                           indf0	equ	0xFEF
  7720                           postinc0	equ	0xFEE
  7721                           fsr0h	equ	0xFEA
  7722                           fsr0l	equ	0xFE9
  7723                           wreg	equ	0xFE8
  7724                           postdec1	equ	0xFE5
  7725                           fsr1l	equ	0xFE1
  7726                           indf2	equ	0xFDF
  7727                           postinc2	equ	0xFDE
  7728                           postdec2	equ	0xFDD
  7729                           fsr2h	equ	0xFDA
  7730                           fsr2l	equ	0xFD9
  7731                           status	equ	0xFD8
  7732                           
  7733 ;; *************** function ___wmul *****************
  7734 ;; Defined at:
  7735 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7736 ;; Parameters:    Size  Location     Type
  7737 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7738 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7739 ;; Auto vars:     Size  Location     Type
  7740 ;;  product         2    4[BANK0 ] unsigned int 
  7741 ;; Return value:  Size  Location     Type
  7742 ;;                  2    0[BANK0 ] unsigned int 
  7743 ;; Registers used:
  7744 ;;		wreg, status,2, status,0, prodl, prodh
  7745 ;; Tracked objects:
  7746 ;;		On entry : 0/0
  7747 ;;		On exit  : 0/0
  7748 ;;		Unchanged: 0/0
  7749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7750 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7751 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7753 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7754 ;;Total ram usage:        6 bytes
  7755 ;; Hardware stack levels used:    1
  7756 ;; Hardware stack levels required when called:    7
  7757 ;; This function calls:
  7758 ;;		Nothing
  7759 ;; This function is called by:
  7760 ;;		_printf
  7761 ;; This function uses a non-reentrant model
  7762 ;;
  7763                           
  7764                           	psect	text36
  7765  002538                     __ptext36:
  7766                           	opt stack 0
  7767  002538                     ___wmul:
  7768                           	opt stack 20
  7769                           
  7770                           ; BSR set to: 0
  7771                           ;incstack = 0
  7772  002538  0100               	movlb	0	; () banked
  7773  00253A  5180               	movf	___wmul@multiplier& (0+255),w,b
  7774  00253C  0100               	movlb	0	; () banked
  7775  00253E  0382               	mulwf	___wmul@multiplicand& (0+255),b
  7776  002540  CFF3 F084          	movff	prodl,___wmul@product
  7777  002544  CFF4 F085          	movff	prodh,___wmul@product+1
  7778  002548  0100               	movlb	0	; () banked
  7779  00254A  5180               	movf	___wmul@multiplier& (0+255),w,b
  7780  00254C  0100               	movlb	0	; () banked
  7781  00254E  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7782  002550  50F3               	movf	prodl,w,c
  7783  002552  0100               	movlb	0	; () banked
  7784  002554  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  7785  002556  0100               	movlb	0	; () banked
  7786  002558  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7787  00255A  0100               	movlb	0	; () banked
  7788  00255C  0382               	mulwf	___wmul@multiplicand& (0+255),b
  7789  00255E  50F3               	movf	prodl,w,c
  7790  002560  0100               	movlb	0	; () banked
  7791  002562  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  7792                           
  7793                           ; BSR set to: 0
  7794  002564  C084  F080         	movff	___wmul@product,?___wmul
  7795  002568  C085  F081         	movff	___wmul@product+1,?___wmul+1
  7796  00256C  0012               	return	
  7797  00256E                     __end_of___wmul:
  7798                           	opt stack 0
  7799                           tblptru	equ	0xFF8
  7800                           tblptrh	equ	0xFF7
  7801                           tblptrl	equ	0xFF6
  7802                           tablat	equ	0xFF5
  7803                           prodh	equ	0xFF4
  7804                           prodl	equ	0xFF3
  7805                           intcon	equ	0xFF2
  7806                           intcon2	equ	0xFF1
  7807                           intcon3	equ	0xFF0
  7808                           indf0	equ	0xFEF
  7809                           postinc0	equ	0xFEE
  7810                           fsr0h	equ	0xFEA
  7811                           fsr0l	equ	0xFE9
  7812                           wreg	equ	0xFE8
  7813                           postdec1	equ	0xFE5
  7814                           fsr1l	equ	0xFE1
  7815                           indf2	equ	0xFDF
  7816                           postinc2	equ	0xFDE
  7817                           postdec2	equ	0xFDD
  7818                           fsr2h	equ	0xFDA
  7819                           fsr2l	equ	0xFD9
  7820                           status	equ	0xFD8
  7821                           
  7822 ;; *************** function ___lwmod *****************
  7823 ;; Defined at:
  7824 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  7825 ;; Parameters:    Size  Location     Type
  7826 ;;  dividend        2    7[BANK0 ] unsigned int 
  7827 ;;  divisor         2    9[BANK0 ] unsigned int 
  7828 ;; Auto vars:     Size  Location     Type
  7829 ;;  counter         1   11[BANK0 ] unsigned char 
  7830 ;; Return value:  Size  Location     Type
  7831 ;;                  2    7[BANK0 ] unsigned int 
  7832 ;; Registers used:
  7833 ;;		wreg, status,2, status,0
  7834 ;; Tracked objects:
  7835 ;;		On entry : 0/0
  7836 ;;		On exit  : 0/0
  7837 ;;		Unchanged: 0/0
  7838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7839 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7840 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7842 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7843 ;;Total ram usage:        5 bytes
  7844 ;; Hardware stack levels used:    1
  7845 ;; Hardware stack levels required when called:    7
  7846 ;; This function calls:
  7847 ;;		Nothing
  7848 ;; This function is called by:
  7849 ;;		_printf
  7850 ;; This function uses a non-reentrant model
  7851 ;;
  7852                           
  7853                           	psect	text37
  7854  002178                     __ptext37:
  7855                           	opt stack 0
  7856  002178                     ___lwmod:
  7857                           	opt stack 20
  7858                           
  7859                           ; BSR set to: 0
  7860                           ;incstack = 0
  7861  002178  0100               	movlb	0	; () banked
  7862  00217A  5189               	movf	___lwmod@divisor& (0+255),w,b
  7863  00217C  0100               	movlb	0	; () banked
  7864  00217E  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  7865  002180  B4D8               	btfsc	status,2,c
  7866  002182  D026               	goto	l1851
  7867                           
  7868                           ; BSR set to: 0
  7869  002184  0E01               	movlw	1
  7870  002186  0100               	movlb	0	; () banked
  7871  002188  6F8B               	movwf	___lwmod@counter& (0+255),b
  7872  00218A  D006               	goto	l4196
  7873  00218C                     l4194:
  7874                           
  7875                           ; BSR set to: 0
  7876  00218C  0100               	movlb	0	; () banked
  7877  00218E  90D8               	bcf	status,0,c
  7878  002190  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  7879  002192  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  7880  002194  0100               	movlb	0	; () banked
  7881  002196  2B8B               	incf	___lwmod@counter& (0+255),f,b
  7882  002198                     l4196:
  7883                           
  7884                           ; BSR set to: 0
  7885  002198  0100               	movlb	0	; () banked
  7886  00219A  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  7887  00219C  D7F7               	goto	l4194
  7888  00219E                     l4198:
  7889                           
  7890                           ; BSR set to: 0
  7891  00219E  0100               	movlb	0	; () banked
  7892  0021A0  5189               	movf	___lwmod@divisor& (0+255),w,b
  7893  0021A2  0100               	movlb	0	; () banked
  7894  0021A4  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  7895  0021A6  0100               	movlb	0	; () banked
  7896  0021A8  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7897  0021AA  0100               	movlb	0	; () banked
  7898  0021AC  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  7899  0021AE  A0D8               	btfss	status,0,c
  7900  0021B0  D008               	goto	l4202
  7901                           
  7902                           ; BSR set to: 0
  7903  0021B2  0100               	movlb	0	; () banked
  7904  0021B4  5189               	movf	___lwmod@divisor& (0+255),w,b
  7905  0021B6  0100               	movlb	0	; () banked
  7906  0021B8  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  7907  0021BA  0100               	movlb	0	; () banked
  7908  0021BC  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7909  0021BE  0100               	movlb	0	; () banked
  7910  0021C0  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  7911  0021C2                     l4202:
  7912                           
  7913                           ; BSR set to: 0
  7914  0021C2  0100               	movlb	0	; () banked
  7915  0021C4  90D8               	bcf	status,0,c
  7916  0021C6  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  7917  0021C8  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  7918                           
  7919                           ; BSR set to: 0
  7920  0021CA  0100               	movlb	0	; () banked
  7921  0021CC  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  7922  0021CE  D7E7               	goto	l4198
  7923  0021D0                     l1851:
  7924                           
  7925                           ; BSR set to: 0
  7926  0021D0  C087  F087         	movff	___lwmod@dividend,?___lwmod
  7927  0021D4  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  7928                           
  7929                           ; BSR set to: 0
  7930  0021D8  0012               	return		;funcret
  7931  0021DA                     __end_of___lwmod:
  7932                           	opt stack 0
  7933                           tblptru	equ	0xFF8
  7934                           tblptrh	equ	0xFF7
  7935                           tblptrl	equ	0xFF6
  7936                           tablat	equ	0xFF5
  7937                           prodh	equ	0xFF4
  7938                           prodl	equ	0xFF3
  7939                           intcon	equ	0xFF2
  7940                           intcon2	equ	0xFF1
  7941                           intcon3	equ	0xFF0
  7942                           indf0	equ	0xFEF
  7943                           postinc0	equ	0xFEE
  7944                           fsr0h	equ	0xFEA
  7945                           fsr0l	equ	0xFE9
  7946                           wreg	equ	0xFE8
  7947                           postdec1	equ	0xFE5
  7948                           fsr1l	equ	0xFE1
  7949                           indf2	equ	0xFDF
  7950                           postinc2	equ	0xFDE
  7951                           postdec2	equ	0xFDD
  7952                           fsr2h	equ	0xFDA
  7953                           fsr2l	equ	0xFD9
  7954                           status	equ	0xFD8
  7955                           
  7956 ;; *************** function ___lwdiv *****************
  7957 ;; Defined at:
  7958 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  7959 ;; Parameters:    Size  Location     Type
  7960 ;;  dividend        2    0[BANK0 ] unsigned int 
  7961 ;;  divisor         2    2[BANK0 ] unsigned int 
  7962 ;; Auto vars:     Size  Location     Type
  7963 ;;  quotient        2    4[BANK0 ] unsigned int 
  7964 ;;  counter         1    6[BANK0 ] unsigned char 
  7965 ;; Return value:  Size  Location     Type
  7966 ;;                  2    0[BANK0 ] unsigned int 
  7967 ;; Registers used:
  7968 ;;		wreg, status,2, status,0
  7969 ;; Tracked objects:
  7970 ;;		On entry : 0/0
  7971 ;;		On exit  : 0/0
  7972 ;;		Unchanged: 0/0
  7973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7974 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7975 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7977 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7978 ;;Total ram usage:        7 bytes
  7979 ;; Hardware stack levels used:    1
  7980 ;; Hardware stack levels required when called:    7
  7981 ;; This function calls:
  7982 ;;		Nothing
  7983 ;; This function is called by:
  7984 ;;		_printf
  7985 ;; This function uses a non-reentrant model
  7986 ;;
  7987                           
  7988                           	psect	text38
  7989  001FB8                     __ptext38:
  7990                           	opt stack 0
  7991  001FB8                     ___lwdiv:
  7992                           	opt stack 20
  7993                           
  7994                           ; BSR set to: 0
  7995                           ;incstack = 0
  7996  001FB8  0E00               	movlw	0
  7997  001FBA  0100               	movlb	0	; () banked
  7998  001FBC  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
  7999  001FBE  0E00               	movlw	0
  8000  001FC0  6F84               	movwf	___lwdiv@quotient& (0+255),b
  8001                           
  8002                           ; BSR set to: 0
  8003  001FC2  0100               	movlb	0	; () banked
  8004  001FC4  5182               	movf	___lwdiv@divisor& (0+255),w,b
  8005  001FC6  0100               	movlb	0	; () banked
  8006  001FC8  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  8007  001FCA  B4D8               	btfsc	status,2,c
  8008  001FCC  D02C               	goto	l1841
  8009                           
  8010                           ; BSR set to: 0
  8011  001FCE  0E01               	movlw	1
  8012  001FD0  0100               	movlb	0	; () banked
  8013  001FD2  6F86               	movwf	___lwdiv@counter& (0+255),b
  8014  001FD4  D006               	goto	l4176
  8015  001FD6                     l4174:
  8016                           
  8017                           ; BSR set to: 0
  8018  001FD6  0100               	movlb	0	; () banked
  8019  001FD8  90D8               	bcf	status,0,c
  8020  001FDA  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  8021  001FDC  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  8022  001FDE  0100               	movlb	0	; () banked
  8023  001FE0  2B86               	incf	___lwdiv@counter& (0+255),f,b
  8024  001FE2                     l4176:
  8025                           
  8026                           ; BSR set to: 0
  8027  001FE2  0100               	movlb	0	; () banked
  8028  001FE4  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  8029  001FE6  D7F7               	goto	l4174
  8030  001FE8                     l4178:
  8031                           
  8032                           ; BSR set to: 0
  8033  001FE8  0100               	movlb	0	; () banked
  8034  001FEA  90D8               	bcf	status,0,c
  8035  001FEC  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
  8036  001FEE  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  8037                           
  8038                           ; BSR set to: 0
  8039  001FF0  0100               	movlb	0	; () banked
  8040  001FF2  5182               	movf	___lwdiv@divisor& (0+255),w,b
  8041  001FF4  0100               	movlb	0	; () banked
  8042  001FF6  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  8043  001FF8  0100               	movlb	0	; () banked
  8044  001FFA  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8045  001FFC  0100               	movlb	0	; () banked
  8046  001FFE  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  8047  002000  A0D8               	btfss	status,0,c
  8048  002002  D00A               	goto	l4186
  8049                           
  8050                           ; BSR set to: 0
  8051  002004  0100               	movlb	0	; () banked
  8052  002006  5182               	movf	___lwdiv@divisor& (0+255),w,b
  8053  002008  0100               	movlb	0	; () banked
  8054  00200A  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  8055  00200C  0100               	movlb	0	; () banked
  8056  00200E  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8057  002010  0100               	movlb	0	; () banked
  8058  002012  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  8059                           
  8060                           ; BSR set to: 0
  8061  002014  0100               	movlb	0	; () banked
  8062  002016  8184               	bsf	___lwdiv@quotient& (0+255),0,b
  8063  002018                     l4186:
  8064                           
  8065                           ; BSR set to: 0
  8066  002018  0100               	movlb	0	; () banked
  8067  00201A  90D8               	bcf	status,0,c
  8068  00201C  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  8069  00201E  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  8070                           
  8071                           ; BSR set to: 0
  8072  002020  0100               	movlb	0	; () banked
  8073  002022  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
  8074  002024  D7E1               	goto	l4178
  8075  002026                     l1841:
  8076                           
  8077                           ; BSR set to: 0
  8078  002026  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
  8079  00202A  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8080                           
  8081                           ; BSR set to: 0
  8082  00202E  0012               	return		;funcret
  8083  002030                     __end_of___lwdiv:
  8084                           	opt stack 0
  8085                           tblptru	equ	0xFF8
  8086                           tblptrh	equ	0xFF7
  8087                           tblptrl	equ	0xFF6
  8088                           tablat	equ	0xFF5
  8089                           prodh	equ	0xFF4
  8090                           prodl	equ	0xFF3
  8091                           intcon	equ	0xFF2
  8092                           intcon2	equ	0xFF1
  8093                           intcon3	equ	0xFF0
  8094                           indf0	equ	0xFEF
  8095                           postinc0	equ	0xFEE
  8096                           fsr0h	equ	0xFEA
  8097                           fsr0l	equ	0xFE9
  8098                           wreg	equ	0xFE8
  8099                           postdec1	equ	0xFE5
  8100                           fsr1l	equ	0xFE1
  8101                           indf2	equ	0xFDF
  8102                           postinc2	equ	0xFDE
  8103                           postdec2	equ	0xFDD
  8104                           fsr2h	equ	0xFDA
  8105                           fsr2l	equ	0xFD9
  8106                           status	equ	0xFD8
  8107                           
  8108 ;; *************** function _lcdInst *****************
  8109 ;; Defined at:
  8110 ;;		line 14 in file "lcd.c"
  8111 ;; Parameters:    Size  Location     Type
  8112 ;;  data            1    wreg     unsigned char 
  8113 ;; Auto vars:     Size  Location     Type
  8114 ;;  data            1    2[BANK0 ] unsigned char 
  8115 ;; Return value:  Size  Location     Type
  8116 ;;                  1    wreg      void 
  8117 ;; Registers used:
  8118 ;;		wreg, status,2, status,0, cstack
  8119 ;; Tracked objects:
  8120 ;;		On entry : 0/0
  8121 ;;		On exit  : 0/0
  8122 ;;		Unchanged: 0/0
  8123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8125 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8127 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8128 ;;Total ram usage:        1 bytes
  8129 ;; Hardware stack levels used:    1
  8130 ;; Hardware stack levels required when called:    8
  8131 ;; This function calls:
  8132 ;;		_lcdNibble
  8133 ;; This function is called by:
  8134 ;;		_UI
  8135 ;;		_change_state_to_menu_start
  8136 ;;		_change_state_to_menu_12
  8137 ;;		_change_state_to_menu_22
  8138 ;;		_initLCD
  8139 ;;		_printRTC
  8140 ;;		_Loading
  8141 ;; This function uses a non-reentrant model
  8142 ;;
  8143                           
  8144                           	psect	text39
  8145  0029E2                     __ptext39:
  8146                           	opt stack 0
  8147  0029E2                     _lcdInst:
  8148                           	opt stack 20
  8149                           
  8150                           ; BSR set to: 0
  8151                           ;incstack = 0
  8152                           ;lcdInst@data stored from wreg
  8153  0029E2  0100               	movlb	0	; () banked
  8154  0029E4  6F82               	movwf	lcdInst@data& (0+255),b
  8155                           
  8156                           ;lcd.c: 15: LATDbits.LATD2 = 0;
  8157  0029E6  948C               	bcf	3980,2,c	;volatile
  8158                           
  8159                           ;lcd.c: 16: lcdNibble(data);
  8160  0029E8  0100               	movlb	0	; () banked
  8161  0029EA  5182               	movf	lcdInst@data& (0+255),w,b
  8162  0029EC  EC88  F010         	call	_lcdNibble
  8163  0029F0  0012               	return		;funcret
  8164  0029F2                     __end_of_lcdInst:
  8165                           	opt stack 0
  8166                           tblptru	equ	0xFF8
  8167                           tblptrh	equ	0xFF7
  8168                           tblptrl	equ	0xFF6
  8169                           tablat	equ	0xFF5
  8170                           prodh	equ	0xFF4
  8171                           prodl	equ	0xFF3
  8172                           intcon	equ	0xFF2
  8173                           intcon2	equ	0xFF1
  8174                           intcon3	equ	0xFF0
  8175                           indf0	equ	0xFEF
  8176                           postinc0	equ	0xFEE
  8177                           fsr0h	equ	0xFEA
  8178                           fsr0l	equ	0xFE9
  8179                           wreg	equ	0xFE8
  8180                           postdec1	equ	0xFE5
  8181                           fsr1l	equ	0xFE1
  8182                           indf2	equ	0xFDF
  8183                           postinc2	equ	0xFDE
  8184                           postdec2	equ	0xFDD
  8185                           fsr2h	equ	0xFDA
  8186                           fsr2l	equ	0xFD9
  8187                           status	equ	0xFD8
  8188                           
  8189 ;; *************** function _lcdNibble *****************
  8190 ;; Defined at:
  8191 ;;		line 24 in file "lcd.c"
  8192 ;; Parameters:    Size  Location     Type
  8193 ;;  data            1    wreg     unsigned char 
  8194 ;; Auto vars:     Size  Location     Type
  8195 ;;  data            1    1[BANK0 ] unsigned char 
  8196 ;;  temp            1    0[BANK0 ] unsigned char 
  8197 ;; Return value:  Size  Location     Type
  8198 ;;                  1    wreg      void 
  8199 ;; Registers used:
  8200 ;;		wreg, status,2, status,0
  8201 ;; Tracked objects:
  8202 ;;		On entry : 0/0
  8203 ;;		On exit  : 0/0
  8204 ;;		Unchanged: 0/0
  8205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8207 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8209 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8210 ;;Total ram usage:        2 bytes
  8211 ;; Hardware stack levels used:    1
  8212 ;; Hardware stack levels required when called:    7
  8213 ;; This function calls:
  8214 ;;		Nothing
  8215 ;; This function is called by:
  8216 ;;		_lcdInst
  8217 ;;		_putch
  8218 ;; This function uses a non-reentrant model
  8219 ;;
  8220                           
  8221                           	psect	text40
  8222  002110                     __ptext40:
  8223                           	opt stack 0
  8224  002110                     _lcdNibble:
  8225                           	opt stack 20
  8226                           
  8227                           ;incstack = 0
  8228                           ;lcdNibble@data stored from wreg
  8229  002110  0100               	movlb	0	; () banked
  8230  002112  6F81               	movwf	lcdNibble@data& (0+255),b
  8231                           
  8232                           ;lcd.c: 26: char temp = data & 0xF0;
  8233  002114  0100               	movlb	0	; () banked
  8234  002116  5181               	movf	lcdNibble@data& (0+255),w,b
  8235  002118  0BF0               	andlw	240
  8236  00211A  0100               	movlb	0	; () banked
  8237  00211C  6F80               	movwf	lcdNibble@temp& (0+255),b
  8238                           
  8239                           ;lcd.c: 27: LATD = LATD & 0x0F;
  8240  00211E  508C               	movf	3980,w,c	;volatile
  8241  002120  0B0F               	andlw	15
  8242  002122  6E8C               	movwf	3980,c	;volatile
  8243                           
  8244                           ;lcd.c: 28: LATD = temp | LATD;
  8245  002124  0100               	movlb	0	; () banked
  8246  002126  5180               	movf	lcdNibble@temp& (0+255),w,b
  8247  002128  108C               	iorwf	3980,w,c	;volatile
  8248  00212A  6E8C               	movwf	3980,c	;volatile
  8249                           
  8250                           ; BSR set to: 0
  8251                           ;lcd.c: 30: LATDbits.LATD3 = 1;
  8252  00212C  868C               	bsf	3980,3,c	;volatile
  8253                           
  8254                           ; BSR set to: 0
  8255                           ;lcd.c: 31: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8256  00212E  0E42               	movlw	66
  8257  002130                     u4957:
  8258  002130  2EE8               	decfsz	wreg,f,c
  8259  002132  D7FE               	bra	u4957
  8260  002134  D000               	nop2	
  8261                           
  8262                           ;lcd.c: 32: LATDbits.LATD3 = 0;
  8263  002136  968C               	bcf	3980,3,c	;volatile
  8264                           
  8265                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8266  002138  0E42               	movlw	66
  8267  00213A                     u4967:
  8268  00213A  2EE8               	decfsz	wreg,f,c
  8269  00213C  D7FE               	bra	u4967
  8270  00213E  D000               	nop2	
  8271                           
  8272                           ;lcd.c: 35: data = data << 4;
  8273  002140  0100               	movlb	0	; () banked
  8274  002142  3981               	swapf	lcdNibble@data& (0+255),w,b
  8275  002144  0BF0               	andlw	240
  8276  002146  0100               	movlb	0	; () banked
  8277  002148  6F81               	movwf	lcdNibble@data& (0+255),b
  8278                           
  8279                           ;lcd.c: 37: temp = data & 0xF0;
  8280  00214A  0100               	movlb	0	; () banked
  8281  00214C  5181               	movf	lcdNibble@data& (0+255),w,b
  8282  00214E  0BF0               	andlw	240
  8283  002150  0100               	movlb	0	; () banked
  8284  002152  6F80               	movwf	lcdNibble@temp& (0+255),b
  8285                           
  8286                           ;lcd.c: 38: LATD = LATD & 0x0F;
  8287  002154  508C               	movf	3980,w,c	;volatile
  8288  002156  0B0F               	andlw	15
  8289  002158  6E8C               	movwf	3980,c	;volatile
  8290                           
  8291                           ;lcd.c: 39: LATD = temp | LATD;
  8292  00215A  0100               	movlb	0	; () banked
  8293  00215C  5180               	movf	lcdNibble@temp& (0+255),w,b
  8294  00215E  108C               	iorwf	3980,w,c	;volatile
  8295  002160  6E8C               	movwf	3980,c	;volatile
  8296                           
  8297                           ; BSR set to: 0
  8298                           ;lcd.c: 41: LATDbits.LATD3 = 1;
  8299  002162  868C               	bsf	3980,3,c	;volatile
  8300                           
  8301                           ; BSR set to: 0
  8302                           ;lcd.c: 42: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8303  002164  0E42               	movlw	66
  8304  002166                     u4977:
  8305  002166  2EE8               	decfsz	wreg,f,c
  8306  002168  D7FE               	bra	u4977
  8307  00216A  D000               	nop2	
  8308                           
  8309                           ;lcd.c: 43: LATDbits.LATD3 = 0;
  8310  00216C  968C               	bcf	3980,3,c	;volatile
  8311                           
  8312                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8313  00216E  0E42               	movlw	66
  8314  002170                     u4987:
  8315  002170  2EE8               	decfsz	wreg,f,c
  8316  002172  D7FE               	bra	u4987
  8317  002174  D000               	nop2	
  8318  002176  0012               	return		;funcret
  8319  002178                     __end_of_lcdNibble:
  8320                           	opt stack 0
  8321                           tblptru	equ	0xFF8
  8322                           tblptrh	equ	0xFF7
  8323                           tblptrl	equ	0xFF6
  8324                           tablat	equ	0xFF5
  8325                           prodh	equ	0xFF4
  8326                           prodl	equ	0xFF3
  8327                           intcon	equ	0xFF2
  8328                           intcon2	equ	0xFF1
  8329                           intcon3	equ	0xFF0
  8330                           indf0	equ	0xFEF
  8331                           postinc0	equ	0xFEE
  8332                           fsr0h	equ	0xFEA
  8333                           fsr0l	equ	0xFE9
  8334                           wreg	equ	0xFE8
  8335                           postdec1	equ	0xFE5
  8336                           fsr1l	equ	0xFE1
  8337                           indf2	equ	0xFDF
  8338                           postinc2	equ	0xFDE
  8339                           postdec2	equ	0xFDD
  8340                           fsr2h	equ	0xFDA
  8341                           fsr2l	equ	0xFD9
  8342                           status	equ	0xFD8
  8343                           
  8344 ;; *************** function ___awmod *****************
  8345 ;; Defined at:
  8346 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8347 ;; Parameters:    Size  Location     Type
  8348 ;;  dividend        2    0[BANK0 ] int 
  8349 ;;  divisor         2    2[BANK0 ] int 
  8350 ;; Auto vars:     Size  Location     Type
  8351 ;;  sign            1    5[BANK0 ] unsigned char 
  8352 ;;  counter         1    4[BANK0 ] unsigned char 
  8353 ;; Return value:  Size  Location     Type
  8354 ;;                  2    0[BANK0 ] int 
  8355 ;; Registers used:
  8356 ;;		wreg, status,2, status,0
  8357 ;; Tracked objects:
  8358 ;;		On entry : 0/0
  8359 ;;		On exit  : 0/0
  8360 ;;		Unchanged: 0/0
  8361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8362 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8363 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8365 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8366 ;;Total ram usage:        6 bytes
  8367 ;; Hardware stack levels used:    1
  8368 ;; Hardware stack levels required when called:    7
  8369 ;; This function calls:
  8370 ;;		Nothing
  8371 ;; This function is called by:
  8372 ;;		_UI
  8373 ;; This function uses a non-reentrant model
  8374 ;;
  8375                           
  8376                           	psect	text41
  8377  001CEA                     __ptext41:
  8378                           	opt stack 0
  8379  001CEA                     ___awmod:
  8380                           	opt stack 22
  8381                           
  8382                           ;incstack = 0
  8383  001CEA  0E00               	movlw	0
  8384  001CEC  0100               	movlb	0	; () banked
  8385  001CEE  6F85               	movwf	___awmod@sign& (0+255),b
  8386                           
  8387                           ; BSR set to: 0
  8388  001CF0  0100               	movlb	0	; () banked
  8389  001CF2  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8390  001CF4  D008               	goto	l5226
  8391                           
  8392                           ; BSR set to: 0
  8393  001CF6  0100               	movlb	0	; () banked
  8394  001CF8  6D80               	negf	___awmod@dividend& (0+255),b
  8395  001CFA  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8396  001CFC  B0D8               	btfsc	status,0,c
  8397  001CFE  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8398                           
  8399                           ; BSR set to: 0
  8400  001D00  0E01               	movlw	1
  8401  001D02  0100               	movlb	0	; () banked
  8402  001D04  6F85               	movwf	___awmod@sign& (0+255),b
  8403  001D06                     l5226:
  8404                           
  8405                           ; BSR set to: 0
  8406  001D06  0100               	movlb	0	; () banked
  8407  001D08  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8408  001D0A  D005               	goto	l5230
  8409                           
  8410                           ; BSR set to: 0
  8411  001D0C  0100               	movlb	0	; () banked
  8412  001D0E  6D82               	negf	___awmod@divisor& (0+255),b
  8413  001D10  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  8414  001D12  B0D8               	btfsc	status,0,c
  8415  001D14  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  8416  001D16                     l5230:
  8417                           
  8418                           ; BSR set to: 0
  8419  001D16  0100               	movlb	0	; () banked
  8420  001D18  5182               	movf	___awmod@divisor& (0+255),w,b
  8421  001D1A  0100               	movlb	0	; () banked
  8422  001D1C  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8423  001D1E  B4D8               	btfsc	status,2,c
  8424  001D20  D026               	goto	l5246
  8425                           
  8426                           ; BSR set to: 0
  8427  001D22  0E01               	movlw	1
  8428  001D24  0100               	movlb	0	; () banked
  8429  001D26  6F84               	movwf	___awmod@counter& (0+255),b
  8430  001D28  D006               	goto	l5236
  8431  001D2A                     l5234:
  8432                           
  8433                           ; BSR set to: 0
  8434  001D2A  0100               	movlb	0	; () banked
  8435  001D2C  90D8               	bcf	status,0,c
  8436  001D2E  3782               	rlcf	___awmod@divisor& (0+255),f,b
  8437  001D30  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8438  001D32  0100               	movlb	0	; () banked
  8439  001D34  2B84               	incf	___awmod@counter& (0+255),f,b
  8440  001D36                     l5236:
  8441                           
  8442                           ; BSR set to: 0
  8443  001D36  0100               	movlb	0	; () banked
  8444  001D38  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8445  001D3A  D7F7               	goto	l5234
  8446  001D3C                     l5238:
  8447                           
  8448                           ; BSR set to: 0
  8449  001D3C  0100               	movlb	0	; () banked
  8450  001D3E  5182               	movf	___awmod@divisor& (0+255),w,b
  8451  001D40  0100               	movlb	0	; () banked
  8452  001D42  5D80               	subwf	___awmod@dividend& (0+255),w,b
  8453  001D44  0100               	movlb	0	; () banked
  8454  001D46  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8455  001D48  0100               	movlb	0	; () banked
  8456  001D4A  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8457  001D4C  A0D8               	btfss	status,0,c
  8458  001D4E  D008               	goto	l5242
  8459                           
  8460                           ; BSR set to: 0
  8461  001D50  0100               	movlb	0	; () banked
  8462  001D52  5182               	movf	___awmod@divisor& (0+255),w,b
  8463  001D54  0100               	movlb	0	; () banked
  8464  001D56  5F80               	subwf	___awmod@dividend& (0+255),f,b
  8465  001D58  0100               	movlb	0	; () banked
  8466  001D5A  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8467  001D5C  0100               	movlb	0	; () banked
  8468  001D5E  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8469  001D60                     l5242:
  8470                           
  8471                           ; BSR set to: 0
  8472  001D60  0100               	movlb	0	; () banked
  8473  001D62  90D8               	bcf	status,0,c
  8474  001D64  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8475  001D66  3382               	rrcf	___awmod@divisor& (0+255),f,b
  8476                           
  8477                           ; BSR set to: 0
  8478  001D68  0100               	movlb	0	; () banked
  8479  001D6A  2F84               	decfsz	___awmod@counter& (0+255),f,b
  8480  001D6C  D7E7               	goto	l5238
  8481  001D6E                     l5246:
  8482                           
  8483                           ; BSR set to: 0
  8484  001D6E  0100               	movlb	0	; () banked
  8485  001D70  5185               	movf	___awmod@sign& (0+255),w,b
  8486  001D72  0100               	movlb	0	; () banked
  8487  001D74  B4D8               	btfsc	status,2,c
  8488  001D76  D005               	goto	l5250
  8489                           
  8490                           ; BSR set to: 0
  8491  001D78  0100               	movlb	0	; () banked
  8492  001D7A  6D80               	negf	___awmod@dividend& (0+255),b
  8493  001D7C  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8494  001D7E  B0D8               	btfsc	status,0,c
  8495  001D80  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8496  001D82                     l5250:
  8497                           
  8498                           ; BSR set to: 0
  8499  001D82  C080  F080         	movff	___awmod@dividend,?___awmod
  8500  001D86  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  8501  001D8A  0012               	return	
  8502  001D8C                     __end_of___awmod:
  8503                           	opt stack 0
  8504                           tblptru	equ	0xFF8
  8505                           tblptrh	equ	0xFF7
  8506                           tblptrl	equ	0xFF6
  8507                           tablat	equ	0xFF5
  8508                           prodh	equ	0xFF4
  8509                           prodl	equ	0xFF3
  8510                           intcon	equ	0xFF2
  8511                           intcon2	equ	0xFF1
  8512                           intcon3	equ	0xFF0
  8513                           indf0	equ	0xFEF
  8514                           postinc0	equ	0xFEE
  8515                           fsr0h	equ	0xFEA
  8516                           fsr0l	equ	0xFE9
  8517                           wreg	equ	0xFE8
  8518                           postdec1	equ	0xFE5
  8519                           fsr1l	equ	0xFE1
  8520                           indf2	equ	0xFDF
  8521                           postinc2	equ	0xFDE
  8522                           postdec2	equ	0xFDD
  8523                           fsr2h	equ	0xFDA
  8524                           fsr2l	equ	0xFD9
  8525                           status	equ	0xFD8
  8526                           
  8527 ;; *************** function ___awdiv *****************
  8528 ;; Defined at:
  8529 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8530 ;; Parameters:    Size  Location     Type
  8531 ;;  dividend        2    6[BANK0 ] int 
  8532 ;;  divisor         2    8[BANK0 ] int 
  8533 ;; Auto vars:     Size  Location     Type
  8534 ;;  quotient        2   12[BANK0 ] int 
  8535 ;;  sign            1   11[BANK0 ] unsigned char 
  8536 ;;  counter         1   10[BANK0 ] unsigned char 
  8537 ;; Return value:  Size  Location     Type
  8538 ;;                  2    6[BANK0 ] int 
  8539 ;; Registers used:
  8540 ;;		wreg, status,2, status,0
  8541 ;; Tracked objects:
  8542 ;;		On entry : 0/0
  8543 ;;		On exit  : 0/0
  8544 ;;		Unchanged: 0/0
  8545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8546 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8547 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8549 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8550 ;;Total ram usage:        8 bytes
  8551 ;; Hardware stack levels used:    1
  8552 ;; Hardware stack levels required when called:    7
  8553 ;; This function calls:
  8554 ;;		Nothing
  8555 ;; This function is called by:
  8556 ;;		_UI
  8557 ;; This function uses a non-reentrant model
  8558 ;;
  8559                           
  8560                           	psect	text42
  8561  00197C                     __ptext42:
  8562                           	opt stack 0
  8563  00197C                     ___awdiv:
  8564                           	opt stack 22
  8565                           
  8566                           ; BSR set to: 0
  8567                           ;incstack = 0
  8568  00197C  0E00               	movlw	0
  8569  00197E  0100               	movlb	0	; () banked
  8570  001980  6F8B               	movwf	___awdiv@sign& (0+255),b
  8571                           
  8572                           ; BSR set to: 0
  8573  001982  0100               	movlb	0	; () banked
  8574  001984  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8575  001986  D008               	goto	l5182
  8576                           
  8577                           ; BSR set to: 0
  8578  001988  0100               	movlb	0	; () banked
  8579  00198A  6D88               	negf	___awdiv@divisor& (0+255),b
  8580  00198C  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8581  00198E  B0D8               	btfsc	status,0,c
  8582  001990  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8583                           
  8584                           ; BSR set to: 0
  8585  001992  0E01               	movlw	1
  8586  001994  0100               	movlb	0	; () banked
  8587  001996  6F8B               	movwf	___awdiv@sign& (0+255),b
  8588  001998                     l5182:
  8589                           
  8590                           ; BSR set to: 0
  8591  001998  0100               	movlb	0	; () banked
  8592  00199A  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8593  00199C  D008               	goto	l5188
  8594                           
  8595                           ; BSR set to: 0
  8596  00199E  0100               	movlb	0	; () banked
  8597  0019A0  6D86               	negf	___awdiv@dividend& (0+255),b
  8598  0019A2  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8599  0019A4  B0D8               	btfsc	status,0,c
  8600  0019A6  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8601                           
  8602                           ; BSR set to: 0
  8603  0019A8  0E01               	movlw	1
  8604  0019AA  0100               	movlb	0	; () banked
  8605  0019AC  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  8606  0019AE                     l5188:
  8607                           
  8608                           ; BSR set to: 0
  8609  0019AE  0E00               	movlw	0
  8610  0019B0  0100               	movlb	0	; () banked
  8611  0019B2  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  8612  0019B4  0E00               	movlw	0
  8613  0019B6  6F8C               	movwf	___awdiv@quotient& (0+255),b
  8614                           
  8615                           ; BSR set to: 0
  8616  0019B8  0100               	movlb	0	; () banked
  8617  0019BA  5188               	movf	___awdiv@divisor& (0+255),w,b
  8618  0019BC  0100               	movlb	0	; () banked
  8619  0019BE  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8620  0019C0  B4D8               	btfsc	status,2,c
  8621  0019C2  D02C               	goto	l5210
  8622                           
  8623                           ; BSR set to: 0
  8624  0019C4  0E01               	movlw	1
  8625  0019C6  0100               	movlb	0	; () banked
  8626  0019C8  6F8A               	movwf	___awdiv@counter& (0+255),b
  8627  0019CA  D006               	goto	l5196
  8628  0019CC                     l5194:
  8629                           
  8630                           ; BSR set to: 0
  8631  0019CC  0100               	movlb	0	; () banked
  8632  0019CE  90D8               	bcf	status,0,c
  8633  0019D0  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  8634  0019D2  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8635  0019D4  0100               	movlb	0	; () banked
  8636  0019D6  2B8A               	incf	___awdiv@counter& (0+255),f,b
  8637  0019D8                     l5196:
  8638                           
  8639                           ; BSR set to: 0
  8640  0019D8  0100               	movlb	0	; () banked
  8641  0019DA  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8642  0019DC  D7F7               	goto	l5194
  8643  0019DE                     l5198:
  8644                           
  8645                           ; BSR set to: 0
  8646  0019DE  0100               	movlb	0	; () banked
  8647  0019E0  90D8               	bcf	status,0,c
  8648  0019E2  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  8649  0019E4  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8650                           
  8651                           ; BSR set to: 0
  8652  0019E6  0100               	movlb	0	; () banked
  8653  0019E8  5188               	movf	___awdiv@divisor& (0+255),w,b
  8654  0019EA  0100               	movlb	0	; () banked
  8655  0019EC  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  8656  0019EE  0100               	movlb	0	; () banked
  8657  0019F0  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8658  0019F2  0100               	movlb	0	; () banked
  8659  0019F4  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8660  0019F6  A0D8               	btfss	status,0,c
  8661  0019F8  D00A               	goto	l5206
  8662                           
  8663                           ; BSR set to: 0
  8664  0019FA  0100               	movlb	0	; () banked
  8665  0019FC  5188               	movf	___awdiv@divisor& (0+255),w,b
  8666  0019FE  0100               	movlb	0	; () banked
  8667  001A00  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  8668  001A02  0100               	movlb	0	; () banked
  8669  001A04  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8670  001A06  0100               	movlb	0	; () banked
  8671  001A08  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8672                           
  8673                           ; BSR set to: 0
  8674  001A0A  0100               	movlb	0	; () banked
  8675  001A0C  818C               	bsf	___awdiv@quotient& (0+255),0,b
  8676  001A0E                     l5206:
  8677                           
  8678                           ; BSR set to: 0
  8679  001A0E  0100               	movlb	0	; () banked
  8680  001A10  90D8               	bcf	status,0,c
  8681  001A12  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8682  001A14  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  8683                           
  8684                           ; BSR set to: 0
  8685  001A16  0100               	movlb	0	; () banked
  8686  001A18  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  8687  001A1A  D7E1               	goto	l5198
  8688  001A1C                     l5210:
  8689                           
  8690                           ; BSR set to: 0
  8691  001A1C  0100               	movlb	0	; () banked
  8692  001A1E  518B               	movf	___awdiv@sign& (0+255),w,b
  8693  001A20  0100               	movlb	0	; () banked
  8694  001A22  B4D8               	btfsc	status,2,c
  8695  001A24  D005               	goto	l5214
  8696                           
  8697                           ; BSR set to: 0
  8698  001A26  0100               	movlb	0	; () banked
  8699  001A28  6D8C               	negf	___awdiv@quotient& (0+255),b
  8700  001A2A  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8701  001A2C  B0D8               	btfsc	status,0,c
  8702  001A2E  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8703  001A30                     l5214:
  8704                           
  8705                           ; BSR set to: 0
  8706  001A30  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  8707  001A34  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  8708  001A38  0012               	return	
  8709  001A3A                     __end_of___awdiv:
  8710                           	opt stack 0
  8711                           tblptru	equ	0xFF8
  8712                           tblptrh	equ	0xFF7
  8713                           tblptrl	equ	0xFF6
  8714                           tablat	equ	0xFF5
  8715                           prodh	equ	0xFF4
  8716                           prodl	equ	0xFF3
  8717                           intcon	equ	0xFF2
  8718                           intcon2	equ	0xFF1
  8719                           intcon3	equ	0xFF0
  8720                           indf0	equ	0xFEF
  8721                           postinc0	equ	0xFEE
  8722                           fsr0h	equ	0xFEA
  8723                           fsr0l	equ	0xFE9
  8724                           wreg	equ	0xFE8
  8725                           postdec1	equ	0xFE5
  8726                           fsr1l	equ	0xFE1
  8727                           indf2	equ	0xFDF
  8728                           postinc2	equ	0xFDE
  8729                           postdec2	equ	0xFDD
  8730                           fsr2h	equ	0xFDA
  8731                           fsr2l	equ	0xFD9
  8732                           status	equ	0xFD8
  8733                           
  8734 ;; *************** function _PortTestA5 *****************
  8735 ;; Defined at:
  8736 ;;		line 28 in file "PortHigh.c"
  8737 ;; Parameters:    Size  Location     Type
  8738 ;;		None
  8739 ;; Auto vars:     Size  Location     Type
  8740 ;;		None
  8741 ;; Return value:  Size  Location     Type
  8742 ;;                  1    wreg      void 
  8743 ;; Registers used:
  8744 ;;		None
  8745 ;; Tracked objects:
  8746 ;;		On entry : 0/0
  8747 ;;		On exit  : 0/0
  8748 ;;		Unchanged: 0/0
  8749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8753 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8754 ;;Total ram usage:        0 bytes
  8755 ;; Hardware stack levels used:    1
  8756 ;; Hardware stack levels required when called:    7
  8757 ;; This function calls:
  8758 ;;		Nothing
  8759 ;; This function is called by:
  8760 ;;		_main
  8761 ;; This function uses a non-reentrant model
  8762 ;;
  8763                           
  8764                           	psect	text43
  8765  0029AE                     __ptext43:
  8766                           	opt stack 0
  8767  0029AE                     _PortTestA5:
  8768                           	opt stack 23
  8769  0029AE                     l286:
  8770  0029AE  A281               	btfss	3969,1,c	;volatile
  8771  0029B0  D7FE               	goto	l286
  8772                           
  8773                           ;PortHigh.c: 32: }
  8774                           ;PortHigh.c: 33: LATAbits.LATA5 = 1;
  8775  0029B2  8A89               	bsf	3977,5,c	;volatile
  8776  0029B4                     l289:
  8777  0029B4  B281               	btfsc	3969,1,c	;volatile
  8778  0029B6  D7FE               	goto	l289
  8779                           
  8780                           ;PortHigh.c: 36: }
  8781                           ;PortHigh.c: 37: __nop();
  8782  0029B8  F000               	nop	
  8783                           
  8784                           ;PortHigh.c: 38: __nop();
  8785  0029BA  F000               	nop	
  8786                           
  8787                           ;PortHigh.c: 39: LATAbits.LATA5 = 0;
  8788  0029BC  9A89               	bcf	3977,5,c	;volatile
  8789  0029BE  0012               	return		;funcret
  8790  0029C0                     __end_of_PortTestA5:
  8791                           	opt stack 0
  8792                           tblptru	equ	0xFF8
  8793                           tblptrh	equ	0xFF7
  8794                           tblptrl	equ	0xFF6
  8795                           tablat	equ	0xFF5
  8796                           prodh	equ	0xFF4
  8797                           prodl	equ	0xFF3
  8798                           intcon	equ	0xFF2
  8799                           intcon2	equ	0xFF1
  8800                           intcon3	equ	0xFF0
  8801                           indf0	equ	0xFEF
  8802                           postinc0	equ	0xFEE
  8803                           fsr0h	equ	0xFEA
  8804                           fsr0l	equ	0xFE9
  8805                           wreg	equ	0xFE8
  8806                           postdec1	equ	0xFE5
  8807                           fsr1l	equ	0xFE1
  8808                           indf2	equ	0xFDF
  8809                           postinc2	equ	0xFDE
  8810                           postdec2	equ	0xFDD
  8811                           fsr2h	equ	0xFDA
  8812                           fsr2l	equ	0xFD9
  8813                           status	equ	0xFD8
  8814                           
  8815 ;; *************** function _handler *****************
  8816 ;; Defined at:
  8817 ;;		line 15 in file "interruptHandler.c"
  8818 ;; Parameters:    Size  Location     Type
  8819 ;;		None
  8820 ;; Auto vars:     Size  Location     Type
  8821 ;;		None
  8822 ;; Return value:  Size  Location     Type
  8823 ;;                  1    wreg      void 
  8824 ;; Registers used:
  8825 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8826 ;; Tracked objects:
  8827 ;;		On entry : 0/0
  8828 ;;		On exit  : 0/0
  8829 ;;		Unchanged: 0/0
  8830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8833 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8834 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8835 ;;Total ram usage:       16 bytes
  8836 ;; Hardware stack levels used:    1
  8837 ;; Hardware stack levels required when called:    6
  8838 ;; This function calls:
  8839 ;;		_printSortTimer
  8840 ;;		_updateMenu
  8841 ;; This function is called by:
  8842 ;;		Interrupt level 2
  8843 ;; This function uses a non-reentrant model
  8844 ;;
  8845                           
  8846                           	psect	intcode
  8847  000008                     __pintcode:
  8848                           	opt stack 0
  8849  000008                     _handler:
  8850                           	opt stack 18
  8851                           
  8852                           ;incstack = 0
  8853  000008  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8854  00000A  ED33  F00C         	call	int_func,f	;refresh shadow registers
  8855                           tblptru	equ	0xFF8
  8856                           tblptrh	equ	0xFF7
  8857                           tblptrl	equ	0xFF6
  8858                           tablat	equ	0xFF5
  8859                           prodh	equ	0xFF4
  8860                           prodl	equ	0xFF3
  8861                           intcon	equ	0xFF2
  8862                           intcon2	equ	0xFF1
  8863                           intcon3	equ	0xFF0
  8864                           indf0	equ	0xFEF
  8865                           postinc0	equ	0xFEE
  8866                           fsr0h	equ	0xFEA
  8867                           fsr0l	equ	0xFE9
  8868                           wreg	equ	0xFE8
  8869                           postdec1	equ	0xFE5
  8870                           fsr1l	equ	0xFE1
  8871                           indf2	equ	0xFDF
  8872                           postinc2	equ	0xFDE
  8873                           postdec2	equ	0xFDD
  8874                           fsr2h	equ	0xFDA
  8875                           fsr2l	equ	0xFD9
  8876                           status	equ	0xFD8
  8877                           
  8878                           	psect	intcode_body
  8879  001866                     __pintcode_body:
  8880                           	opt stack 18
  8881  001866                     int_func:
  8882                           	opt stack 18
  8883  001866  0006               	pop		; remove dummy address from shadow register refresh
  8884  001868  CFFA F04D          	movff	pclath,??_handler+2
  8885  00186C  CFFB F04E          	movff	pclatu,??_handler+3
  8886  001870  CFE9 F04F          	movff	fsr0l,??_handler+4
  8887  001874  CFEA F050          	movff	fsr0h,??_handler+5
  8888  001878  CFE1 F051          	movff	fsr1l,??_handler+6
  8889  00187C  CFE2 F052          	movff	fsr1h,??_handler+7
  8890  001880  CFD9 F053          	movff	fsr2l,??_handler+8
  8891  001884  CFDA F054          	movff	fsr2h,??_handler+9
  8892  001888  CFF3 F055          	movff	prodl,??_handler+10
  8893  00188C  CFF4 F056          	movff	prodh,??_handler+11
  8894  001890  CFF6 F057          	movff	tblptrl,??_handler+12
  8895  001894  CFF7 F058          	movff	tblptrh,??_handler+13
  8896  001898  CFF8 F059          	movff	tblptru,??_handler+14
  8897  00189C  CFF5 F05A          	movff	tablat,??_handler+15
  8898                           
  8899                           ;interruptHandler.c: 17: if(INT1IF){
  8900  0018A0  A0F0               	btfss	intcon3,0,c	;volatile
  8901  0018A2  D018               	goto	i2l5886
  8902                           
  8903                           ;interruptHandler.c: 18: INT1IF = 0;
  8904  0018A4  90F0               	bcf	intcon3,0,c	;volatile
  8905                           
  8906                           ;interruptHandler.c: 19: if(machine_state == UI_state) {
  8907  0018A6  0100               	movlb	0	; () banked
  8908  0018A8  51F3               	movf	_machine_state& (0+255),w,b
  8909  0018AA  A4D8               	btfss	status,2,c
  8910  0018AC  D013               	goto	i2l5886
  8911                           
  8912                           ; BSR set to: 0
  8913                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
  8914  0018AE  3881               	swapf	3969,w,c	;volatile
  8915  0018B0  0B0F               	andlw	15
  8916  0018B2  0B0F               	andlw	15
  8917  0018B4  6E4B               	movwf	??_handler& (0+255),c
  8918  0018B6  6A4C               	clrf	(??_handler+1)& (0+255),c
  8919  0018B8  0EB5               	movlw	low _keys
  8920  0018BA  244B               	addwf	??_handler,w,c
  8921  0018BC  6EF6               	movwf	tblptrl,c
  8922  0018BE  0EFD               	movlw	high _keys
  8923  0018C0  204C               	addwfc	??_handler+1,w,c
  8924  0018C2  6EF7               	movwf	tblptrh,c
  8925  0018C4                     	if	1	;There are 3 active tblptr bytes
  8926  0018C4  6AF8               	clrf	tblptru,c
  8927  0018C6  0E00               	movlw	low (__mediumconst shr (0+16))
  8928  0018C8  22F8               	addwfc	tblptru,f,c
  8929  0018CA                     	endif
  8930  0018CA  0008               	tblrd		*
  8931  0018CC  CFF5 F079          	movff	tablat,_input
  8932                           
  8933                           ; BSR set to: 0
  8934                           ;interruptHandler.c: 21: updateMenu();
  8935  0018D0  ECC8  F007         	call	_updateMenu	;wreg free
  8936  0018D4                     i2l5886:
  8937                           
  8938                           ;interruptHandler.c: 22: }
  8939                           ;interruptHandler.c: 23: }
  8940                           ;interruptHandler.c: 26: if(TMR0IF){
  8941  0018D4  A4F2               	btfss	intcon,2,c	;volatile
  8942  0018D6  D00E               	goto	i2l5902
  8943                           
  8944                           ;interruptHandler.c: 27: TMR0IF = 0;
  8945  0018D8  94F2               	bcf	intcon,2,c	;volatile
  8946                           
  8947                           ;interruptHandler.c: 28: if(machine_state == Sorting_state){
  8948  0018DA  0100               	movlb	0	; () banked
  8949  0018DC  05F3               	decf	_machine_state& (0+255),w,b
  8950  0018DE  A4D8               	btfss	status,2,c
  8951  0018E0  D009               	goto	i2l5902
  8952                           
  8953                           ; BSR set to: 0
  8954                           ;interruptHandler.c: 29: printSortTimer();
  8955  0018E2  EC43  F00A         	call	_printSortTimer	;wreg free
  8956                           
  8957                           ;interruptHandler.c: 32: T0CON = 0b00010111;
  8958  0018E6  0E17               	movlw	23
  8959  0018E8  6ED5               	movwf	4053,c	;volatile
  8960                           
  8961                           ;interruptHandler.c: 33: TMR0H = 0b10000101;
  8962  0018EA  0E85               	movlw	133
  8963  0018EC  6ED7               	movwf	4055,c	;volatile
  8964                           
  8965                           ;interruptHandler.c: 34: TMR0L = 0b11101110;
  8966  0018EE  0EEE               	movlw	238
  8967  0018F0  6ED6               	movwf	4054,c	;volatile
  8968                           
  8969                           ;interruptHandler.c: 35: TMR0ON = 1;
  8970  0018F2  8ED5               	bsf	4053,7,c	;volatile
  8971  0018F4                     i2l5902:
  8972                           
  8973                           ;interruptHandler.c: 36: }
  8974                           ;interruptHandler.c: 37: }
  8975                           ;interruptHandler.c: 40: if(TMR1IF){
  8976  0018F4  A09E               	btfss	3998,0,c	;volatile
  8977  0018F6  D020               	goto	i2l5928
  8978                           
  8979                           ;interruptHandler.c: 41: TMR1IF = 0;
  8980  0018F8  909E               	bcf	3998,0,c	;volatile
  8981                           
  8982                           ;interruptHandler.c: 42: TMR1ON = 0;
  8983  0018FA  90CD               	bcf	4045,0,c	;volatile
  8984                           
  8985                           ;interruptHandler.c: 43: if(machine_state == Sorting_state){
  8986  0018FC  0100               	movlb	0	; () banked
  8987  0018FE  05F3               	decf	_machine_state& (0+255),w,b
  8988  001900  A4D8               	btfss	status,2,c
  8989  001902  D01A               	goto	i2l5928
  8990                           
  8991                           ; BSR set to: 0
  8992                           ;interruptHandler.c: 44: T1CON = 0b10110000;
  8993  001904  0EB0               	movlw	176
  8994  001906  6ECD               	movwf	4045,c	;volatile
  8995                           
  8996                           ; BSR set to: 0
  8997                           ;interruptHandler.c: 45: if(was_low){
  8998  001908  5075               	movf	_was_low,w,c
  8999  00190A  1076               	iorwf	_was_low+1,w,c
  9000  00190C  B4D8               	btfsc	status,2,c
  9001  00190E  D00A               	goto	i2l1364
  9002                           
  9003                           ; BSR set to: 0
  9004                           ;interruptHandler.c: 47: LATCbits.LATC2 = 1;
  9005  001910  848B               	bsf	3979,2,c	;volatile
  9006                           
  9007                           ; BSR set to: 0
  9008                           ;interruptHandler.c: 48: was_low = 0;
  9009  001912  0E00               	movlw	0
  9010  001914  6E76               	movwf	_was_low+1,c
  9011  001916  0E00               	movlw	0
  9012  001918  6E75               	movwf	_was_low,c
  9013                           
  9014                           ; BSR set to: 0
  9015                           ;interruptHandler.c: 50: TMR1H = timer1highbits;
  9016  00191A  C06B  FFCF         	movff	_timer1highbits,4047	;volatile
  9017                           
  9018                           ; BSR set to: 0
  9019                           ;interruptHandler.c: 51: TMR1L = timer1lowbits;
  9020  00191E  C06D  FFCE         	movff	_timer1lowbits,4046	;volatile
  9021                           
  9022                           ;interruptHandler.c: 52: }
  9023  001922  D009               	goto	i2l5926
  9024  001924                     i2l1364:
  9025                           
  9026                           ; BSR set to: 0
  9027                           ;interruptHandler.c: 53: else{
  9028                           ;interruptHandler.c: 55: LATCbits.LATC2 = 0;
  9029  001924  948B               	bcf	3979,2,c	;volatile
  9030                           
  9031                           ; BSR set to: 0
  9032                           ;interruptHandler.c: 56: was_low = 1;
  9033  001926  0E00               	movlw	0
  9034  001928  6E76               	movwf	_was_low+1,c
  9035  00192A  0E01               	movlw	1
  9036  00192C  6E75               	movwf	_was_low,c
  9037                           
  9038                           ; BSR set to: 0
  9039                           ;interruptHandler.c: 58: TMR1H = timer1_20ms_high;
  9040  00192E  C07A  FFCF         	movff	_timer1_20ms_high,4047	;volatile
  9041                           
  9042                           ; BSR set to: 0
  9043                           ;interruptHandler.c: 59: TMR1L = timer1_20ms_low;
  9044  001932  C07C  FFCE         	movff	_timer1_20ms_low,4046	;volatile
  9045  001936                     i2l5926:
  9046                           
  9047                           ; BSR set to: 0
  9048                           ;interruptHandler.c: 60: }
  9049                           ;interruptHandler.c: 61: TMR1ON = 1;
  9050  001936  80CD               	bsf	4045,0,c	;volatile
  9051  001938                     i2l5928:
  9052                           
  9053                           ;interruptHandler.c: 62: }
  9054                           ;interruptHandler.c: 63: }
  9055                           ;interruptHandler.c: 66: if(TMR2IF){
  9056  001938  A29E               	btfss	3998,1,c	;volatile
  9057  00193A  D002               	goto	i2l1367
  9058                           
  9059                           ;interruptHandler.c: 67: TMR2IF = 0;
  9060  00193C  929E               	bcf	3998,1,c	;volatile
  9061                           
  9062                           ;interruptHandler.c: 68: TMR2ON = 0;
  9063  00193E  94CA               	bcf	4042,2,c	;volatile
  9064  001940                     i2l1367:
  9065  001940  C05A  FFF5         	movff	??_handler+15,tablat
  9066  001944  C059  FFF8         	movff	??_handler+14,tblptru
  9067  001948  C058  FFF7         	movff	??_handler+13,tblptrh
  9068  00194C  C057  FFF6         	movff	??_handler+12,tblptrl
  9069  001950  C056  FFF4         	movff	??_handler+11,prodh
  9070  001954  C055  FFF3         	movff	??_handler+10,prodl
  9071  001958  C054  FFDA         	movff	??_handler+9,fsr2h
  9072  00195C  C053  FFD9         	movff	??_handler+8,fsr2l
  9073  001960  C052  FFE2         	movff	??_handler+7,fsr1h
  9074  001964  C051  FFE1         	movff	??_handler+6,fsr1l
  9075  001968  C050  FFEA         	movff	??_handler+5,fsr0h
  9076  00196C  C04F  FFE9         	movff	??_handler+4,fsr0l
  9077  001970  C04E  FFFB         	movff	??_handler+3,pclatu
  9078  001974  C04D  FFFA         	movff	??_handler+2,pclath
  9079  001978  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9080  00197A  0011               	retfie		f
  9081  00197C                     __end_of_handler:
  9082                           	opt stack 0
  9083                           pclatu	equ	0xFFB
  9084                           pclath	equ	0xFFA
  9085                           tblptru	equ	0xFF8
  9086                           tblptrh	equ	0xFF7
  9087                           tblptrl	equ	0xFF6
  9088                           tablat	equ	0xFF5
  9089                           prodh	equ	0xFF4
  9090                           prodl	equ	0xFF3
  9091                           intcon	equ	0xFF2
  9092                           intcon2	equ	0xFF1
  9093                           intcon3	equ	0xFF0
  9094                           indf0	equ	0xFEF
  9095                           postinc0	equ	0xFEE
  9096                           fsr0h	equ	0xFEA
  9097                           fsr0l	equ	0xFE9
  9098                           wreg	equ	0xFE8
  9099                           postdec1	equ	0xFE5
  9100                           fsr1h	equ	0xFE2
  9101                           fsr1l	equ	0xFE1
  9102                           indf2	equ	0xFDF
  9103                           postinc2	equ	0xFDE
  9104                           postdec2	equ	0xFDD
  9105                           fsr2h	equ	0xFDA
  9106                           fsr2l	equ	0xFD9
  9107                           status	equ	0xFD8
  9108                           
  9109 ;; *************** function _updateMenu *****************
  9110 ;; Defined at:
  9111 ;;		line 156 in file "UI.c"
  9112 ;; Parameters:    Size  Location     Type
  9113 ;;		None
  9114 ;; Auto vars:     Size  Location     Type
  9115 ;;		None
  9116 ;; Return value:  Size  Location     Type
  9117 ;;                  1    wreg      void 
  9118 ;; Registers used:
  9119 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9120 ;; Tracked objects:
  9121 ;;		On entry : 0/0
  9122 ;;		On exit  : 0/0
  9123 ;;		Unchanged: 0/0
  9124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9127 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9128 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9129 ;;Total ram usage:        2 bytes
  9130 ;; Hardware stack levels used:    1
  9131 ;; Hardware stack levels required when called:    5
  9132 ;; This function calls:
  9133 ;;		_change_state_to_logs_11
  9134 ;;		_change_state_to_logs_12
  9135 ;;		_change_state_to_logs_22
  9136 ;;		_change_state_to_logs_23
  9137 ;;		_change_state_to_logs_33
  9138 ;;		_change_state_to_logs_34
  9139 ;;		_change_state_to_menu_11
  9140 ;;		_change_state_to_menu_23
  9141 ;;		_dispLogs
  9142 ;;		_inputHandler
  9143 ;;		i2_change_state_to_menu_12
  9144 ;;		i2_change_state_to_menu_22
  9145 ;;		i2_change_state_to_menu_start
  9146 ;; This function is called by:
  9147 ;;		_handler
  9148 ;; This function uses a non-reentrant model
  9149 ;;
  9150                           
  9151                           	psect	text45
  9152  000F90                     __ptext45:
  9153                           	opt stack 0
  9154  000F90                     _updateMenu:
  9155                           	opt stack 18
  9156                           
  9157                           ;UI.c: 157: up = 0; down = 0; enter = 0; back = 0;
  9158                           
  9159                           ;incstack = 0
  9160  000F90  0E00               	movlw	0
  9161  000F92  6E74               	movwf	_up+1,c
  9162  000F94  0E00               	movlw	0
  9163  000F96  6E73               	movwf	_up,c
  9164  000F98  0E00               	movlw	0
  9165  000F9A  6E66               	movwf	_down+1,c
  9166  000F9C  0E00               	movlw	0
  9167  000F9E  6E65               	movwf	_down,c
  9168  000FA0  0E00               	movlw	0
  9169  000FA2  6E68               	movwf	_enter+1,c
  9170  000FA4  0E00               	movlw	0
  9171  000FA6  6E67               	movwf	_enter,c
  9172  000FA8  0E00               	movlw	0
  9173  000FAA  6E5E               	movwf	_back+1,c
  9174  000FAC  0E00               	movlw	0
  9175  000FAE  6E5D               	movwf	_back,c
  9176                           
  9177                           ;UI.c: 158: (INTCONbits.GIE = 0);
  9178  000FB0  9EF2               	bcf	intcon,7,c	;volatile
  9179                           
  9180                           ;UI.c: 160: if (inputHandler()
  9181                           ;UI.c: 163: ){
  9182  000FB2  EC40  F00B         	call	_inputHandler	;wreg free
  9183  000FB6  502A               	movf	?_inputHandler,w,c
  9184  000FB8  102B               	iorwf	?_inputHandler+1,w,c
  9185  000FBA  A4D8               	btfss	status,2,c
  9186  000FBC  D112               	goto	i2l5714
  9187  000FBE  D146               	goto	i2l469
  9188  000FC0                     i2l5566:
  9189                           
  9190                           ;UI.c: 167: change_state_to_menu_11();
  9191  000FC0  EC18  F013         	call	_change_state_to_menu_11	;wreg free
  9192                           
  9193                           ;UI.c: 168: break;
  9194  000FC4  D143               	goto	i2l469
  9195  000FC6                     i2l5568:
  9196                           
  9197                           ;UI.c: 171: if(up){
  9198  000FC6  5073               	movf	_up,w,c
  9199  000FC8  1074               	iorwf	_up+1,w,c
  9200  000FCA  B4D8               	btfsc	status,2,c
  9201  000FCC  D003               	goto	i2l5572
  9202                           
  9203                           ;UI.c: 172: change_state_to_menu_23();
  9204  000FCE  EC00  F013         	call	_change_state_to_menu_23	;wreg free
  9205                           
  9206                           ;UI.c: 173: }
  9207  000FD2  D13C               	goto	i2l469
  9208  000FD4                     i2l5572:
  9209                           
  9210                           ;UI.c: 174: else if(down){
  9211  000FD4  5065               	movf	_down,w,c
  9212  000FD6  1066               	iorwf	_down+1,w,c
  9213  000FD8  B4D8               	btfsc	status,2,c
  9214  000FDA  D003               	goto	i2l5576
  9215                           
  9216                           ;UI.c: 175: change_state_to_menu_12();
  9217  000FDC  ECE8  F012         	call	i2_change_state_to_menu_12	;wreg free
  9218                           
  9219                           ;UI.c: 176: }
  9220  000FE0  D135               	goto	i2l469
  9221  000FE2                     i2l5576:
  9222                           
  9223                           ;UI.c: 177: else if(enter){
  9224  000FE2  5067               	movf	_enter,w,c
  9225  000FE4  1068               	iorwf	_enter+1,w,c
  9226  000FE6  B4D8               	btfsc	status,2,c
  9227  000FE8  D131               	goto	i2l469
  9228                           
  9229                           ;UI.c: 178: change_state_to_menu_start();
  9230  000FEA  EC2E  F014         	call	i2_change_state_to_menu_start	;wreg free
  9231                           
  9232                           ;UI.c: 179: }
  9233                           ;UI.c: 180: break;
  9234  000FEE  D12E               	goto	i2l469
  9235  000FF0                     i2l5580:
  9236                           
  9237                           ;UI.c: 183: if(up){
  9238  000FF0  5073               	movf	_up,w,c
  9239  000FF2  1074               	iorwf	_up+1,w,c
  9240  000FF4  B4D8               	btfsc	status,2,c
  9241  000FF6  D003               	goto	i2l5584
  9242                           
  9243                           ;UI.c: 184: change_state_to_menu_11();
  9244  000FF8  EC18  F013         	call	_change_state_to_menu_11	;wreg free
  9245                           
  9246                           ;UI.c: 185: }
  9247  000FFC  D127               	goto	i2l469
  9248  000FFE                     i2l5584:
  9249                           
  9250                           ;UI.c: 186: else if(down){
  9251  000FFE  5065               	movf	_down,w,c
  9252  001000  1066               	iorwf	_down+1,w,c
  9253  001002  B4D8               	btfsc	status,2,c
  9254  001004  D011               	goto	i2l5600
  9255                           
  9256                           ;UI.c: 187: change_state_to_menu_23();
  9257  001006  EC00  F013         	call	_change_state_to_menu_23	;wreg free
  9258                           
  9259                           ;UI.c: 188: }
  9260  00100A  D120               	goto	i2l469
  9261  00100C                     i2l5592:
  9262                           
  9263                           ;UI.c: 195: if(up){
  9264  00100C  5073               	movf	_up,w,c
  9265  00100E  1074               	iorwf	_up+1,w,c
  9266  001010  B4D8               	btfsc	status,2,c
  9267  001012  D003               	goto	i2l5596
  9268                           
  9269                           ;UI.c: 196: change_state_to_menu_11();
  9270  001014  EC18  F013         	call	_change_state_to_menu_11	;wreg free
  9271                           
  9272                           ;UI.c: 197: }
  9273  001018  D119               	goto	i2l469
  9274  00101A                     i2l5596:
  9275                           
  9276                           ;UI.c: 198: else if(down){
  9277  00101A  5065               	movf	_down,w,c
  9278  00101C  1066               	iorwf	_down+1,w,c
  9279  00101E  B4D8               	btfsc	status,2,c
  9280  001020  D003               	goto	i2l5600
  9281                           
  9282                           ;UI.c: 199: change_state_to_menu_23();
  9283  001022  EC00  F013         	call	_change_state_to_menu_23	;wreg free
  9284                           
  9285                           ;UI.c: 200: }
  9286  001026  D112               	goto	i2l469
  9287  001028                     i2l5600:
  9288                           
  9289                           ;UI.c: 201: else if(enter){
  9290  001028  5067               	movf	_enter,w,c
  9291  00102A  1068               	iorwf	_enter+1,w,c
  9292  00102C  B4D8               	btfsc	status,2,c
  9293  00102E  D10E               	goto	i2l469
  9294                           
  9295                           ;UI.c: 202: machine_state = Sorting_state;
  9296  001030  0E01               	movlw	1
  9297  001032  0100               	movlb	0	; () banked
  9298  001034  6FF3               	movwf	_machine_state& (0+255),b
  9299                           
  9300                           ; BSR set to: 0
  9301                           ;UI.c: 203: }
  9302                           ;UI.c: 204: break;
  9303                           
  9304                           ; BSR set to: 0
  9305                           
  9306                           ; BSR set to: 0
  9307  001036  D10A               	goto	i2l469
  9308  001038                     i2l5604:
  9309                           
  9310                           ;UI.c: 207: if(up){
  9311  001038  5073               	movf	_up,w,c
  9312  00103A  1074               	iorwf	_up+1,w,c
  9313  00103C  B4D8               	btfsc	status,2,c
  9314  00103E  D003               	goto	i2l5608
  9315                           
  9316                           ;UI.c: 208: change_state_to_menu_22();
  9317  001040  ECD0  F012         	call	i2_change_state_to_menu_22	;wreg free
  9318                           
  9319                           ;UI.c: 209: }
  9320  001044  D103               	goto	i2l469
  9321  001046                     i2l5608:
  9322                           
  9323                           ;UI.c: 210: else if(down){
  9324  001046  5065               	movf	_down,w,c
  9325  001048  1066               	iorwf	_down+1,w,c
  9326  00104A  B4D8               	btfsc	status,2,c
  9327  00104C  D003               	goto	i2l5612
  9328                           
  9329                           ;UI.c: 211: change_state_to_menu_11();
  9330  00104E  EC18  F013         	call	_change_state_to_menu_11	;wreg free
  9331                           
  9332                           ;UI.c: 212: }
  9333  001052  D0FC               	goto	i2l469
  9334  001054                     i2l5612:
  9335                           
  9336                           ;UI.c: 213: else if(enter){
  9337  001054  5067               	movf	_enter,w,c
  9338  001056  1068               	iorwf	_enter+1,w,c
  9339  001058  B4D8               	btfsc	status,2,c
  9340  00105A  D0F8               	goto	i2l469
  9341                           
  9342                           ;UI.c: 214: change_state_to_logs_11();
  9343  00105C  EC90  F013         	call	_change_state_to_logs_11	;wreg free
  9344                           
  9345                           ;UI.c: 215: }
  9346                           ;UI.c: 216: break;
  9347  001060  D0F5               	goto	i2l469
  9348  001062                     i2l5616:
  9349                           
  9350                           ;UI.c: 219: if(up){
  9351  001062  5073               	movf	_up,w,c
  9352  001064  1074               	iorwf	_up+1,w,c
  9353  001066  B4D8               	btfsc	status,2,c
  9354  001068  D003               	goto	i2l5620
  9355                           
  9356                           ;UI.c: 220: change_state_to_logs_34();
  9357  00106A  EC30  F013         	call	_change_state_to_logs_34	;wreg free
  9358                           
  9359                           ;UI.c: 221: }
  9360  00106E  D0EE               	goto	i2l469
  9361  001070                     i2l5620:
  9362                           
  9363                           ;UI.c: 222: else if(down){
  9364  001070  5065               	movf	_down,w,c
  9365  001072  1066               	iorwf	_down+1,w,c
  9366  001074  B4D8               	btfsc	status,2,c
  9367  001076  D003               	goto	i2l5624
  9368                           
  9369                           ;UI.c: 223: change_state_to_logs_12();
  9370  001078  EC78  F013         	call	_change_state_to_logs_12	;wreg free
  9371                           
  9372                           ;UI.c: 224: }
  9373  00107C  D0E7               	goto	i2l469
  9374  00107E                     i2l5624:
  9375                           
  9376                           ;UI.c: 225: else if(enter){
  9377  00107E  5067               	movf	_enter,w,c
  9378  001080  1068               	iorwf	_enter+1,w,c
  9379  001082  B4D8               	btfsc	status,2,c
  9380  001084  D007               	goto	i2l5628
  9381                           
  9382                           ;UI.c: 226: dispLogs(1);
  9383  001086  0E00               	movlw	0
  9384  001088  6E02               	movwf	dispLogs@myLog+1,c
  9385  00108A  0E01               	movlw	1
  9386  00108C  6E01               	movwf	dispLogs@myLog,c
  9387  00108E  ECCD  F014         	call	_dispLogs	;wreg free
  9388                           
  9389                           ;UI.c: 227: }
  9390  001092  D0DC               	goto	i2l469
  9391  001094                     i2l5628:
  9392                           
  9393                           ;UI.c: 228: else if(back){
  9394  001094  505D               	movf	_back,w,c
  9395  001096  105E               	iorwf	_back+1,w,c
  9396  001098  B4D8               	btfsc	status,2,c
  9397  00109A  D0D8               	goto	i2l469
  9398                           
  9399                           ;UI.c: 229: change_state_to_menu_23();
  9400  00109C  EC00  F013         	call	_change_state_to_menu_23	;wreg free
  9401                           
  9402                           ;UI.c: 230: }
  9403                           ;UI.c: 231: break;
  9404  0010A0  D0D5               	goto	i2l469
  9405  0010A2                     i2l5632:
  9406                           
  9407                           ;UI.c: 234: if(up){
  9408  0010A2  5073               	movf	_up,w,c
  9409  0010A4  1074               	iorwf	_up+1,w,c
  9410  0010A6  B4D8               	btfsc	status,2,c
  9411  0010A8  D003               	goto	i2l5636
  9412                           
  9413                           ;UI.c: 235: change_state_to_logs_11();
  9414  0010AA  EC90  F013         	call	_change_state_to_logs_11	;wreg free
  9415                           
  9416                           ;UI.c: 236: }
  9417  0010AE  D0CE               	goto	i2l469
  9418  0010B0                     i2l5636:
  9419                           
  9420                           ;UI.c: 237: else if(down){
  9421  0010B0  5065               	movf	_down,w,c
  9422  0010B2  1066               	iorwf	_down+1,w,c
  9423  0010B4  B4D8               	btfsc	status,2,c
  9424  0010B6  D003               	goto	i2l5640
  9425                           
  9426                           ;UI.c: 238: change_state_to_logs_23();
  9427  0010B8  ECD6  F013         	call	_change_state_to_logs_23	;wreg free
  9428                           
  9429                           ;UI.c: 239: }
  9430  0010BC  D0C7               	goto	i2l469
  9431  0010BE                     i2l5640:
  9432                           
  9433                           ;UI.c: 240: else if(enter){
  9434  0010BE  5067               	movf	_enter,w,c
  9435  0010C0  1068               	iorwf	_enter+1,w,c
  9436  0010C2  B4D8               	btfsc	status,2,c
  9437  0010C4  D007               	goto	i2l5644
  9438                           
  9439                           ;UI.c: 241: dispLogs(2);
  9440  0010C6  0E00               	movlw	0
  9441  0010C8  6E02               	movwf	dispLogs@myLog+1,c
  9442  0010CA  0E02               	movlw	2
  9443  0010CC  6E01               	movwf	dispLogs@myLog,c
  9444  0010CE  ECCD  F014         	call	_dispLogs	;wreg free
  9445                           
  9446                           ;UI.c: 242: }
  9447  0010D2  D0BC               	goto	i2l469
  9448  0010D4                     i2l5644:
  9449                           
  9450                           ;UI.c: 243: else if(back){
  9451  0010D4  505D               	movf	_back,w,c
  9452  0010D6  105E               	iorwf	_back+1,w,c
  9453  0010D8  B4D8               	btfsc	status,2,c
  9454  0010DA  D0B8               	goto	i2l469
  9455                           
  9456                           ;UI.c: 244: change_state_to_menu_23();
  9457  0010DC  EC00  F013         	call	_change_state_to_menu_23	;wreg free
  9458                           
  9459                           ;UI.c: 245: }
  9460                           ;UI.c: 246: break;
  9461  0010E0  D0B5               	goto	i2l469
  9462  0010E2                     i2l5648:
  9463                           
  9464                           ;UI.c: 249: if(up){
  9465  0010E2  5073               	movf	_up,w,c
  9466  0010E4  1074               	iorwf	_up+1,w,c
  9467  0010E6  B4D8               	btfsc	status,2,c
  9468  0010E8  D003               	goto	i2l5652
  9469                           
  9470                           ;UI.c: 250: change_state_to_logs_11();
  9471  0010EA  EC90  F013         	call	_change_state_to_logs_11	;wreg free
  9472                           
  9473                           ;UI.c: 251: }
  9474  0010EE  D0AE               	goto	i2l469
  9475  0010F0                     i2l5652:
  9476                           
  9477                           ;UI.c: 252: else if(down){
  9478  0010F0  5065               	movf	_down,w,c
  9479  0010F2  1066               	iorwf	_down+1,w,c
  9480  0010F4  B4D8               	btfsc	status,2,c
  9481  0010F6  D003               	goto	i2l5656
  9482                           
  9483                           ;UI.c: 253: change_state_to_logs_23();
  9484  0010F8  ECD6  F013         	call	_change_state_to_logs_23	;wreg free
  9485                           
  9486                           ;UI.c: 254: }
  9487  0010FC  D0A7               	goto	i2l469
  9488  0010FE                     i2l5656:
  9489                           
  9490                           ;UI.c: 255: else if(enter){
  9491  0010FE  5067               	movf	_enter,w,c
  9492  001100  1068               	iorwf	_enter+1,w,c
  9493  001102  B4D8               	btfsc	status,2,c
  9494  001104  D007               	goto	i2l5660
  9495                           
  9496                           ;UI.c: 256: dispLogs(2);
  9497  001106  0E00               	movlw	0
  9498  001108  6E02               	movwf	dispLogs@myLog+1,c
  9499  00110A  0E02               	movlw	2
  9500  00110C  6E01               	movwf	dispLogs@myLog,c
  9501  00110E  ECCD  F014         	call	_dispLogs	;wreg free
  9502                           
  9503                           ;UI.c: 257: }
  9504  001112  D09C               	goto	i2l469
  9505  001114                     i2l5660:
  9506                           
  9507                           ;UI.c: 258: else if(back){
  9508  001114  505D               	movf	_back,w,c
  9509  001116  105E               	iorwf	_back+1,w,c
  9510  001118  B4D8               	btfsc	status,2,c
  9511  00111A  D098               	goto	i2l469
  9512                           
  9513                           ;UI.c: 259: change_state_to_menu_23();
  9514  00111C  EC00  F013         	call	_change_state_to_menu_23	;wreg free
  9515                           
  9516                           ;UI.c: 260: }
  9517                           ;UI.c: 261: break;
  9518  001120  D095               	goto	i2l469
  9519  001122                     i2l5664:
  9520                           
  9521                           ;UI.c: 264: if(up){
  9522  001122  5073               	movf	_up,w,c
  9523  001124  1074               	iorwf	_up+1,w,c
  9524  001126  B4D8               	btfsc	status,2,c
  9525  001128  D003               	goto	i2l5668
  9526                           
  9527                           ;UI.c: 265: change_state_to_logs_22();
  9528  00112A  EC60  F013         	call	_change_state_to_logs_22	;wreg free
  9529                           
  9530                           ;UI.c: 266: }
  9531  00112E  D08E               	goto	i2l469
  9532  001130                     i2l5668:
  9533                           
  9534                           ;UI.c: 267: else if(down){
  9535  001130  5065               	movf	_down,w,c
  9536  001132  1066               	iorwf	_down+1,w,c
  9537  001134  B4D8               	btfsc	status,2,c
  9538  001136  D003               	goto	i2l5672
  9539                           
  9540                           ;UI.c: 268: change_state_to_logs_34();
  9541  001138  EC30  F013         	call	_change_state_to_logs_34	;wreg free
  9542                           
  9543                           ;UI.c: 269: }
  9544  00113C  D087               	goto	i2l469
  9545  00113E                     i2l5672:
  9546                           
  9547                           ;UI.c: 270: else if(enter){
  9548  00113E  5067               	movf	_enter,w,c
  9549  001140  1068               	iorwf	_enter+1,w,c
  9550  001142  B4D8               	btfsc	status,2,c
  9551  001144  D007               	goto	i2l5676
  9552                           
  9553                           ;UI.c: 271: dispLogs(3);
  9554  001146  0E00               	movlw	0
  9555  001148  6E02               	movwf	dispLogs@myLog+1,c
  9556  00114A  0E03               	movlw	3
  9557  00114C  6E01               	movwf	dispLogs@myLog,c
  9558  00114E  ECCD  F014         	call	_dispLogs	;wreg free
  9559                           
  9560                           ;UI.c: 272: }
  9561  001152  D07C               	goto	i2l469
  9562  001154                     i2l5676:
  9563                           
  9564                           ;UI.c: 273: else if(back){
  9565  001154  505D               	movf	_back,w,c
  9566  001156  105E               	iorwf	_back+1,w,c
  9567  001158  B4D8               	btfsc	status,2,c
  9568  00115A  D078               	goto	i2l469
  9569                           
  9570                           ;UI.c: 274: change_state_to_menu_23();
  9571  00115C  EC00  F013         	call	_change_state_to_menu_23	;wreg free
  9572                           
  9573                           ;UI.c: 275: }
  9574                           ;UI.c: 276: break;
  9575  001160  D075               	goto	i2l469
  9576  001162                     i2l5680:
  9577                           
  9578                           ;UI.c: 279: if(up){
  9579  001162  5073               	movf	_up,w,c
  9580  001164  1074               	iorwf	_up+1,w,c
  9581  001166  B4D8               	btfsc	status,2,c
  9582  001168  D003               	goto	i2l5684
  9583                           
  9584                           ;UI.c: 280: change_state_to_logs_22();
  9585  00116A  EC60  F013         	call	_change_state_to_logs_22	;wreg free
  9586                           
  9587                           ;UI.c: 281: }
  9588  00116E  D06E               	goto	i2l469
  9589  001170                     i2l5684:
  9590                           
  9591                           ;UI.c: 282: else if(down){
  9592  001170  5065               	movf	_down,w,c
  9593  001172  1066               	iorwf	_down+1,w,c
  9594  001174  B4D8               	btfsc	status,2,c
  9595  001176  D003               	goto	i2l5688
  9596                           
  9597                           ;UI.c: 283: change_state_to_logs_34();
  9598  001178  EC30  F013         	call	_change_state_to_logs_34	;wreg free
  9599                           
  9600                           ;UI.c: 284: }
  9601  00117C  D067               	goto	i2l469
  9602  00117E                     i2l5688:
  9603                           
  9604                           ;UI.c: 285: else if(enter){
  9605  00117E  5067               	movf	_enter,w,c
  9606  001180  1068               	iorwf	_enter+1,w,c
  9607  001182  B4D8               	btfsc	status,2,c
  9608  001184  D007               	goto	i2l5692
  9609                           
  9610                           ;UI.c: 286: dispLogs(3);
  9611  001186  0E00               	movlw	0
  9612  001188  6E02               	movwf	dispLogs@myLog+1,c
  9613  00118A  0E03               	movlw	3
  9614  00118C  6E01               	movwf	dispLogs@myLog,c
  9615  00118E  ECCD  F014         	call	_dispLogs	;wreg free
  9616                           
  9617                           ;UI.c: 287: }
  9618  001192  D05C               	goto	i2l469
  9619  001194                     i2l5692:
  9620                           
  9621                           ;UI.c: 288: else if(back){
  9622  001194  505D               	movf	_back,w,c
  9623  001196  105E               	iorwf	_back+1,w,c
  9624  001198  B4D8               	btfsc	status,2,c
  9625  00119A  D058               	goto	i2l469
  9626                           
  9627                           ;UI.c: 289: change_state_to_menu_23();
  9628  00119C  EC00  F013         	call	_change_state_to_menu_23	;wreg free
  9629                           
  9630                           ;UI.c: 290: }
  9631                           ;UI.c: 291: break;
  9632  0011A0  D055               	goto	i2l469
  9633  0011A2                     i2l5696:
  9634                           
  9635                           ;UI.c: 294: if(up){
  9636  0011A2  5073               	movf	_up,w,c
  9637  0011A4  1074               	iorwf	_up+1,w,c
  9638  0011A6  B4D8               	btfsc	status,2,c
  9639  0011A8  D003               	goto	i2l5700
  9640                           
  9641                           ;UI.c: 295: change_state_to_logs_33();
  9642  0011AA  EC48  F013         	call	_change_state_to_logs_33	;wreg free
  9643                           
  9644                           ;UI.c: 296: }
  9645  0011AE  D04E               	goto	i2l469
  9646  0011B0                     i2l5700:
  9647                           
  9648                           ;UI.c: 297: else if(down){
  9649  0011B0  5065               	movf	_down,w,c
  9650  0011B2  1066               	iorwf	_down+1,w,c
  9651  0011B4  B4D8               	btfsc	status,2,c
  9652  0011B6  D003               	goto	i2l5704
  9653                           
  9654                           ;UI.c: 298: change_state_to_logs_11();
  9655  0011B8  EC90  F013         	call	_change_state_to_logs_11	;wreg free
  9656                           
  9657                           ;UI.c: 299: }
  9658  0011BC  D047               	goto	i2l469
  9659  0011BE                     i2l5704:
  9660                           
  9661                           ;UI.c: 300: else if(enter){
  9662  0011BE  5067               	movf	_enter,w,c
  9663  0011C0  1068               	iorwf	_enter+1,w,c
  9664  0011C2  B4D8               	btfsc	status,2,c
  9665  0011C4  D007               	goto	i2l5708
  9666                           
  9667                           ;UI.c: 301: dispLogs(4);
  9668  0011C6  0E00               	movlw	0
  9669  0011C8  6E02               	movwf	dispLogs@myLog+1,c
  9670  0011CA  0E04               	movlw	4
  9671  0011CC  6E01               	movwf	dispLogs@myLog,c
  9672  0011CE  ECCD  F014         	call	_dispLogs	;wreg free
  9673                           
  9674                           ;UI.c: 302: }
  9675  0011D2  D03C               	goto	i2l469
  9676  0011D4                     i2l5708:
  9677                           
  9678                           ;UI.c: 303: else if(back){
  9679  0011D4  505D               	movf	_back,w,c
  9680  0011D6  105E               	iorwf	_back+1,w,c
  9681  0011D8  B4D8               	btfsc	status,2,c
  9682  0011DA  D038               	goto	i2l469
  9683                           
  9684                           ;UI.c: 304: change_state_to_menu_23();
  9685  0011DC  EC00  F013         	call	_change_state_to_menu_23	;wreg free
  9686                           
  9687                           ;UI.c: 310: }
  9688                           
  9689                           ;UI.c: 309: break;
  9690                           
  9691                           ;UI.c: 308: default:
  9692                           
  9693                           ;UI.c: 305: }
  9694                           ;UI.c: 306: break;
  9695  0011E0  D035               	goto	i2l469
  9696  0011E2                     i2l5714:
  9697  0011E2  C0E1  F043         	movff	_cur_state,??_updateMenu
  9698  0011E6  C0E2  F044         	movff	_cur_state+1,??_updateMenu+1
  9699                           
  9700                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
  9701                           ; Switch size 1, requested type "space"
  9702                           ; Number of cases is 3, Range of values is 0 to 4
  9703                           ; switch strategies available:
  9704                           ; Name         Instructions Cycles
  9705                           ; simple_byte           10     6 (average)
  9706                           ;	Chosen strategy is simple_byte
  9707  0011EA  5044               	movf	??_updateMenu+1,w,c
  9708  0011EC  0A00               	xorlw	0	; case 0
  9709  0011EE  B4D8               	btfsc	status,2,c
  9710  0011F0  D007               	goto	i2l6074
  9711  0011F2  0A03               	xorlw	3	; case 3
  9712  0011F4  B4D8               	btfsc	status,2,c
  9713  0011F6  D015               	goto	i2l6076
  9714  0011F8  0A07               	xorlw	7	; case 4
  9715  0011FA  B4D8               	btfsc	status,2,c
  9716  0011FC  D020               	goto	i2l6078
  9717  0011FE  D026               	goto	i2l469
  9718  001200                     i2l6074:
  9719                           
  9720                           ; Switch size 1, requested type "space"
  9721                           ; Number of cases is 5, Range of values is 0 to 23
  9722                           ; switch strategies available:
  9723                           ; Name         Instructions Cycles
  9724                           ; simple_byte           16     9 (average)
  9725                           ;	Chosen strategy is simple_byte
  9726  001200  5043               	movf	??_updateMenu,w,c
  9727  001202  0A00               	xorlw	0	; case 0
  9728  001204  B4D8               	btfsc	status,2,c
  9729  001206  D6DC               	goto	i2l5566
  9730  001208  0A0B               	xorlw	11	; case 11
  9731  00120A  B4D8               	btfsc	status,2,c
  9732  00120C  D6DC               	goto	i2l5568
  9733  00120E  0A07               	xorlw	7	; case 12
  9734  001210  B4D8               	btfsc	status,2,c
  9735  001212  D6EE               	goto	i2l5580
  9736  001214  0A1A               	xorlw	26	; case 22
  9737  001216  B4D8               	btfsc	status,2,c
  9738  001218  D6F9               	goto	i2l5592
  9739  00121A  0A01               	xorlw	1	; case 23
  9740  00121C  B4D8               	btfsc	status,2,c
  9741  00121E  D70C               	goto	i2l5604
  9742  001220  D015               	goto	i2l469
  9743  001222                     i2l6076:
  9744                           
  9745                           ; Switch size 1, requested type "space"
  9746                           ; Number of cases is 4, Range of values is 243 to 255
  9747                           ; switch strategies available:
  9748                           ; Name         Instructions Cycles
  9749                           ; simple_byte           13     7 (average)
  9750                           ;	Chosen strategy is simple_byte
  9751  001222  5043               	movf	??_updateMenu,w,c
  9752  001224  0AF3               	xorlw	243	; case 243
  9753  001226  B4D8               	btfsc	status,2,c
  9754  001228  D71C               	goto	i2l5616
  9755  00122A  0A07               	xorlw	7	; case 244
  9756  00122C  B4D8               	btfsc	status,2,c
  9757  00122E  D739               	goto	i2l5632
  9758  001230  0A0A               	xorlw	10	; case 254
  9759  001232  B4D8               	btfsc	status,2,c
  9760  001234  D756               	goto	i2l5648
  9761  001236  0A01               	xorlw	1	; case 255
  9762  001238  B4D8               	btfsc	status,2,c
  9763  00123A  D773               	goto	i2l5664
  9764  00123C  D007               	goto	i2l469
  9765  00123E                     i2l6078:
  9766                           
  9767                           ; Switch size 1, requested type "space"
  9768                           ; Number of cases is 2, Range of values is 9 to 10
  9769                           ; switch strategies available:
  9770                           ; Name         Instructions Cycles
  9771                           ; simple_byte            7     4 (average)
  9772                           ;	Chosen strategy is simple_byte
  9773  00123E  5043               	movf	??_updateMenu,w,c
  9774  001240  0A09               	xorlw	9	; case 9
  9775  001242  B4D8               	btfsc	status,2,c
  9776  001244  D78E               	goto	i2l5680
  9777  001246  0A03               	xorlw	3	; case 10
  9778  001248  B4D8               	btfsc	status,2,c
  9779  00124A  D7AB               	goto	i2l5696
  9780  00124C                     i2l469:
  9781                           
  9782                           ;UI.c: 311: }
  9783                           ;UI.c: 312: (INTCONbits.GIE = 1);
  9784  00124C  8EF2               	bsf	intcon,7,c	;volatile
  9785  00124E  0012               	return		;funcret
  9786  001250                     __end_of_updateMenu:
  9787                           	opt stack 0
  9788                           pclatu	equ	0xFFB
  9789                           pclath	equ	0xFFA
  9790                           tblptru	equ	0xFF8
  9791                           tblptrh	equ	0xFF7
  9792                           tblptrl	equ	0xFF6
  9793                           tablat	equ	0xFF5
  9794                           prodh	equ	0xFF4
  9795                           prodl	equ	0xFF3
  9796                           intcon	equ	0xFF2
  9797                           intcon2	equ	0xFF1
  9798                           intcon3	equ	0xFF0
  9799                           indf0	equ	0xFEF
  9800                           postinc0	equ	0xFEE
  9801                           fsr0h	equ	0xFEA
  9802                           fsr0l	equ	0xFE9
  9803                           wreg	equ	0xFE8
  9804                           postdec1	equ	0xFE5
  9805                           fsr1h	equ	0xFE2
  9806                           fsr1l	equ	0xFE1
  9807                           indf2	equ	0xFDF
  9808                           postinc2	equ	0xFDE
  9809                           postdec2	equ	0xFDD
  9810                           fsr2h	equ	0xFDA
  9811                           fsr2l	equ	0xFD9
  9812                           status	equ	0xFD8
  9813                           
  9814 ;; *************** function i2_change_state_to_menu_start *****************
  9815 ;; Defined at:
  9816 ;;		line 416 in file "UI.c"
  9817 ;; Parameters:    Size  Location     Type
  9818 ;;		None
  9819 ;; Auto vars:     Size  Location     Type
  9820 ;;		None
  9821 ;; Return value:  Size  Location     Type
  9822 ;;                  1    wreg      void 
  9823 ;; Registers used:
  9824 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9825 ;; Tracked objects:
  9826 ;;		On entry : 0/0
  9827 ;;		On exit  : 0/0
  9828 ;;		Unchanged: 0/0
  9829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9834 ;;Total ram usage:        0 bytes
  9835 ;; Hardware stack levels used:    1
  9836 ;; Hardware stack levels required when called:    4
  9837 ;; This function calls:
  9838 ;;		i2_lcdInst
  9839 ;;		i2_printRTC
  9840 ;;		i2_printf
  9841 ;; This function is called by:
  9842 ;;		_updateMenu
  9843 ;; This function uses a non-reentrant model
  9844 ;;
  9845                           
  9846                           	psect	text46
  9847  00285C                     __ptext46:
  9848                           	opt stack 0
  9849  00285C                     i2_change_state_to_menu_start:
  9850                           	opt stack 18
  9851                           
  9852                           ;UI.c: 417: cur_state = 0;
  9853                           
  9854                           ;incstack = 0
  9855  00285C  0E00               	movlw	0
  9856  00285E  0100               	movlb	0	; () banked
  9857  002860  6FE2               	movwf	(_cur_state+1)& (0+255),b
  9858  002862  0E00               	movlw	0
  9859  002864  6FE1               	movwf	_cur_state& (0+255),b
  9860                           
  9861                           ; BSR set to: 0
  9862                           ;UI.c: 419: lcdInst(0b10000000);;
  9863  002866  0E80               	movlw	128
  9864  002868  EC05  F015         	call	i2_lcdInst
  9865                           
  9866                           ;UI.c: 420: printRTC();
  9867  00286C  EC28  F009         	call	i2_printRTC	;wreg free
  9868                           
  9869                           ;UI.c: 421: lcdInst(0b11000000);;
  9870  002870  0EC0               	movlw	192
  9871  002872  EC05  F015         	call	i2_lcdInst
  9872                           
  9873                           ;UI.c: 422: printf("PUSH TO CONTINUE");
  9874  002876  0E97               	movlw	low STR_15
  9875  002878  6E0D               	movwf	i2printf@f,c
  9876  00287A  0EFF               	movlw	high STR_15
  9877  00287C  6E0E               	movwf	i2printf@f+1,c
  9878  00287E  ECC0  F004         	call	i2_printf	;wreg free
  9879  002882  0012               	return		;funcret
  9880  002884                     __end_ofi2_change_state_to_menu_start:
  9881                           	opt stack 0
  9882                           pclatu	equ	0xFFB
  9883                           pclath	equ	0xFFA
  9884                           tblptru	equ	0xFF8
  9885                           tblptrh	equ	0xFF7
  9886                           tblptrl	equ	0xFF6
  9887                           tablat	equ	0xFF5
  9888                           prodh	equ	0xFF4
  9889                           prodl	equ	0xFF3
  9890                           intcon	equ	0xFF2
  9891                           intcon2	equ	0xFF1
  9892                           intcon3	equ	0xFF0
  9893                           indf0	equ	0xFEF
  9894                           postinc0	equ	0xFEE
  9895                           fsr0h	equ	0xFEA
  9896                           fsr0l	equ	0xFE9
  9897                           wreg	equ	0xFE8
  9898                           postdec1	equ	0xFE5
  9899                           fsr1h	equ	0xFE2
  9900                           fsr1l	equ	0xFE1
  9901                           indf2	equ	0xFDF
  9902                           postinc2	equ	0xFDE
  9903                           postdec2	equ	0xFDD
  9904                           fsr2h	equ	0xFDA
  9905                           fsr2l	equ	0xFD9
  9906                           status	equ	0xFD8
  9907                           
  9908 ;; *************** function i2_printRTC *****************
  9909 ;; Defined at:
  9910 ;;		line 62 in file "RTC.c"
  9911 ;; Parameters:    Size  Location     Type
  9912 ;;		None
  9913 ;; Auto vars:     Size  Location     Type
  9914 ;;  printRTC       14   44[COMRAM] int [7]
  9915 ;;  printRTC        4   60[COMRAM] unsigned char [4]
  9916 ;;  printRTC        2   64[COMRAM] int 
  9917 ;;  printRTC        2   58[COMRAM] int 
  9918 ;; Return value:  Size  Location     Type
  9919 ;;                  1    wreg      void 
  9920 ;; Registers used:
  9921 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9922 ;; Tracked objects:
  9923 ;;		On entry : 0/0
  9924 ;;		On exit  : 0/0
  9925 ;;		Unchanged: 0/0
  9926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9928 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9929 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9930 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9931 ;;Total ram usage:       25 bytes
  9932 ;; Hardware stack levels used:    1
  9933 ;; Hardware stack levels required when called:    3
  9934 ;; This function calls:
  9935 ;;		i2_getRTC
  9936 ;;		i2_lcdInst
  9937 ;;		i2_printf
  9938 ;;		i2_strcpy
  9939 ;; This function is called by:
  9940 ;;		i2_change_state_to_menu_start
  9941 ;; This function uses a non-reentrant model
  9942 ;;
  9943                           
  9944                           	psect	text47
  9945  001250                     __ptext47:
  9946                           	opt stack 0
  9947  001250                     i2_printRTC:
  9948                           	opt stack 18
  9949                           
  9950                           ;RTC.c: 63: getRTC();
  9951                           
  9952                           ;incstack = 0
  9953  001250  EC18  F010         	call	i2_getRTC	;wreg free
  9954                           
  9955                           ;RTC.c: 64: char month[] = "MMM";
  9956  001254  C0F4  F03D         	movff	printRTC@F3206,i2printRTC@month
  9957  001258  C0F5  F03E         	movff	printRTC@F3206+1,i2printRTC@month+1
  9958  00125C  C0F6  F03F         	movff	printRTC@F3206+2,i2printRTC@month+2
  9959  001260  C0F7  F040         	movff	printRTC@F3206+3,i2printRTC@month+3
  9960                           
  9961                           ;RTC.c: 65: int INT_time[7];
  9962                           ;RTC.c: 66: for(int i = 0; i < 7; i++){
  9963  001264  0E00               	movlw	0
  9964  001266  6E42               	movwf	i2printRTC@i+1,c
  9965  001268  0E00               	movlw	0
  9966  00126A  6E41               	movwf	i2printRTC@i,c
  9967  00126C  BE42               	btfsc	i2printRTC@i+1,7,c
  9968  00126E  D006               	goto	i2l4870
  9969  001270  5042               	movf	i2printRTC@i+1,w,c
  9970  001272  E135               	bnz	i2l1040
  9971  001274  0E07               	movlw	7
  9972  001276  5C41               	subwf	i2printRTC@i,w,c
  9973  001278  B0D8               	btfsc	status,0,c
  9974  00127A  D031               	goto	i2l1040
  9975  00127C                     i2l4870:
  9976                           
  9977                           ;RTC.c: 67: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  9978  00127C  0ED4               	movlw	low _time
  9979  00127E  2441               	addwf	i2printRTC@i,w,c
  9980  001280  6ED9               	movwf	fsr2l,c
  9981  001282  0E00               	movlw	high _time
  9982  001284  2042               	addwfc	i2printRTC@i+1,w,c
  9983  001286  6EDA               	movwf	fsr2h,c
  9984  001288  50DF               	movf	indf2,w,c
  9985  00128A  6E2A               	movwf	??i2_printRTC& (0+255),c
  9986  00128C  3A2A               	swapf	??i2_printRTC,f,c
  9987  00128E  0E0F               	movlw	15
  9988  001290  162A               	andwf	??i2_printRTC,f,c
  9989  001292  0E0F               	movlw	15
  9990  001294  162A               	andwf	??i2_printRTC,f,c
  9991  001296  502A               	movf	??i2_printRTC,w,c
  9992  001298  0D0A               	mullw	10
  9993  00129A  0ED4               	movlw	low _time
  9994  00129C  2441               	addwf	i2printRTC@i,w,c
  9995  00129E  6ED9               	movwf	fsr2l,c
  9996  0012A0  0E00               	movlw	high _time
  9997  0012A2  2042               	addwfc	i2printRTC@i+1,w,c
  9998  0012A4  6EDA               	movwf	fsr2h,c
  9999  0012A6  50DF               	movf	indf2,w,c
 10000  0012A8  0B0F               	andlw	15
 10001  0012AA  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 10002  0012AC  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 10003  0012AE  50F3               	movf	prodl,w,c
 10004  0012B0  262B               	addwf	??i2_printRTC+1,f,c
 10005  0012B2  50F4               	movf	prodh,w,c
 10006  0012B4  222C               	addwfc	??i2_printRTC+2,f,c
 10007  0012B6  90D8               	bcf	status,0,c
 10008  0012B8  3441               	rlcf	i2printRTC@i,w,c
 10009  0012BA  6ED9               	movwf	fsr2l,c
 10010  0012BC  3442               	rlcf	i2printRTC@i+1,w,c
 10011  0012BE  6EDA               	movwf	fsr2h,c
 10012  0012C0  0E2D               	movlw	low i2printRTC@INT_time
 10013  0012C2  26D9               	addwf	fsr2l,f,c
 10014  0012C4  0E00               	movlw	high i2printRTC@INT_time
 10015  0012C6  22DA               	addwfc	fsr2h,f,c
 10016  0012C8  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 10017  0012CC  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 10018  0012D0  4A41               	infsnz	i2printRTC@i,f,c
 10019  0012D2  2A42               	incf	i2printRTC@i+1,f,c
 10020  0012D4  BE42               	btfsc	i2printRTC@i+1,7,c
 10021  0012D6  D7D2               	goto	i2l4870
 10022  0012D8  5042               	movf	i2printRTC@i+1,w,c
 10023  0012DA  E101               	bnz	i2u335_40
 10024  0012DC  D7CB               	goto	L7
 10025  0012DE                     i2u335_40:
 10026  0012DE                     i2l1040:
 10027                           
 10028                           ;RTC.c: 68: }
 10029                           ;RTC.c: 69: int RTC_month = INT_time[5];
 10030  0012DE  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 10031  0012E2  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 10032                           
 10033                           ;RTC.c: 70: switch(RTC_month){
 10034  0012E6  D084               	goto	i2l4902
 10035  0012E8                     i2l4876:
 10036                           
 10037                           ;RTC.c: 72: strcpy(month, "Jan");
 10038  0012E8  0E3D               	movlw	low i2printRTC@month
 10039  0012EA  6E01               	movwf	i2strcpy@to,c
 10040  0012EC  0E00               	movlw	high i2printRTC@month
 10041  0012EE  6E02               	movwf	i2strcpy@to+1,c
 10042  0012F0  0EDB               	movlw	low STR_36
 10043  0012F2  6E03               	movwf	i2strcpy@from,c
 10044  0012F4  0EFF               	movlw	high STR_36
 10045  0012F6  6E04               	movwf	i2strcpy@from+1,c
 10046  0012F8  ECB7  F012         	call	i2_strcpy	;wreg free
 10047                           
 10048                           ;RTC.c: 73: break;
 10049  0012FC  D0A6               	goto	i2l4904
 10050  0012FE                     i2l4878:
 10051                           
 10052                           ;RTC.c: 75: strcpy(month, "Feb");
 10053  0012FE  0E3D               	movlw	low i2printRTC@month
 10054  001300  6E01               	movwf	i2strcpy@to,c
 10055  001302  0E00               	movlw	high i2printRTC@month
 10056  001304  6E02               	movwf	i2strcpy@to+1,c
 10057  001306  0ECB               	movlw	low STR_37
 10058  001308  6E03               	movwf	i2strcpy@from,c
 10059  00130A  0EFF               	movlw	high STR_37
 10060  00130C  6E04               	movwf	i2strcpy@from+1,c
 10061  00130E  ECB7  F012         	call	i2_strcpy	;wreg free
 10062                           
 10063                           ;RTC.c: 76: break;
 10064  001312  D09B               	goto	i2l4904
 10065  001314                     i2l4880:
 10066                           
 10067                           ;RTC.c: 78: strcpy(month, "Mar");
 10068  001314  0E3D               	movlw	low i2printRTC@month
 10069  001316  6E01               	movwf	i2strcpy@to,c
 10070  001318  0E00               	movlw	high i2printRTC@month
 10071  00131A  6E02               	movwf	i2strcpy@to+1,c
 10072  00131C  0EE7               	movlw	low STR_38
 10073  00131E  6E03               	movwf	i2strcpy@from,c
 10074  001320  0EFF               	movlw	high STR_38
 10075  001322  6E04               	movwf	i2strcpy@from+1,c
 10076  001324  ECB7  F012         	call	i2_strcpy	;wreg free
 10077                           
 10078                           ;RTC.c: 79: break;
 10079  001328  D090               	goto	i2l4904
 10080  00132A                     i2l4882:
 10081                           
 10082                           ;RTC.c: 81: strcpy(month, "Apr");
 10083  00132A  0E3D               	movlw	low i2printRTC@month
 10084  00132C  6E01               	movwf	i2strcpy@to,c
 10085  00132E  0E00               	movlw	high i2printRTC@month
 10086  001330  6E02               	movwf	i2strcpy@to+1,c
 10087  001332  0EEB               	movlw	low STR_39
 10088  001334  6E03               	movwf	i2strcpy@from,c
 10089  001336  0EFF               	movlw	high STR_39
 10090  001338  6E04               	movwf	i2strcpy@from+1,c
 10091  00133A  ECB7  F012         	call	i2_strcpy	;wreg free
 10092                           
 10093                           ;RTC.c: 82: break;
 10094  00133E  D085               	goto	i2l4904
 10095  001340                     i2l4884:
 10096                           
 10097                           ;RTC.c: 84: strcpy(month, "May");
 10098  001340  0E3D               	movlw	low i2printRTC@month
 10099  001342  6E01               	movwf	i2strcpy@to,c
 10100  001344  0E00               	movlw	high i2printRTC@month
 10101  001346  6E02               	movwf	i2strcpy@to+1,c
 10102  001348  0EF7               	movlw	low STR_40
 10103  00134A  6E03               	movwf	i2strcpy@from,c
 10104  00134C  0EFF               	movlw	high STR_40
 10105  00134E  6E04               	movwf	i2strcpy@from+1,c
 10106  001350  ECB7  F012         	call	i2_strcpy	;wreg free
 10107                           
 10108                           ;RTC.c: 85: break;
 10109  001354  D07A               	goto	i2l4904
 10110  001356                     i2l4886:
 10111                           
 10112                           ;RTC.c: 87: strcpy(month, "Jun");
 10113  001356  0E3D               	movlw	low i2printRTC@month
 10114  001358  6E01               	movwf	i2strcpy@to,c
 10115  00135A  0E00               	movlw	high i2printRTC@month
 10116  00135C  6E02               	movwf	i2strcpy@to+1,c
 10117  00135E  0EDF               	movlw	low STR_41
 10118  001360  6E03               	movwf	i2strcpy@from,c
 10119  001362  0EFF               	movlw	high STR_41
 10120  001364  6E04               	movwf	i2strcpy@from+1,c
 10121  001366  ECB7  F012         	call	i2_strcpy	;wreg free
 10122                           
 10123                           ;RTC.c: 88: break;
 10124  00136A  D06F               	goto	i2l4904
 10125  00136C                     i2l4888:
 10126                           
 10127                           ;RTC.c: 90: strcpy(month, "Jul");
 10128  00136C  0E3D               	movlw	low i2printRTC@month
 10129  00136E  6E01               	movwf	i2strcpy@to,c
 10130  001370  0E00               	movlw	high i2printRTC@month
 10131  001372  6E02               	movwf	i2strcpy@to+1,c
 10132  001374  0ED7               	movlw	low STR_42
 10133  001376  6E03               	movwf	i2strcpy@from,c
 10134  001378  0EFF               	movlw	high STR_42
 10135  00137A  6E04               	movwf	i2strcpy@from+1,c
 10136  00137C  ECB7  F012         	call	i2_strcpy	;wreg free
 10137                           
 10138                           ;RTC.c: 91: break;
 10139  001380  D064               	goto	i2l4904
 10140  001382                     i2l4890:
 10141                           
 10142                           ;RTC.c: 93: strcpy(month, "Aug");
 10143  001382  0E3D               	movlw	low i2printRTC@month
 10144  001384  6E01               	movwf	i2strcpy@to,c
 10145  001386  0E00               	movlw	high i2printRTC@month
 10146  001388  6E02               	movwf	i2strcpy@to+1,c
 10147  00138A  0ED3               	movlw	low STR_43
 10148  00138C  6E03               	movwf	i2strcpy@from,c
 10149  00138E  0EFF               	movlw	high STR_43
 10150  001390  6E04               	movwf	i2strcpy@from+1,c
 10151  001392  ECB7  F012         	call	i2_strcpy	;wreg free
 10152                           
 10153                           ;RTC.c: 94: break;
 10154  001396  D059               	goto	i2l4904
 10155  001398                     i2l4892:
 10156                           
 10157                           ;RTC.c: 96: strcpy(month, "Sep");
 10158  001398  0E3D               	movlw	low i2printRTC@month
 10159  00139A  6E01               	movwf	i2strcpy@to,c
 10160  00139C  0E00               	movlw	high i2printRTC@month
 10161  00139E  6E02               	movwf	i2strcpy@to+1,c
 10162  0013A0  0EE3               	movlw	low STR_44
 10163  0013A2  6E03               	movwf	i2strcpy@from,c
 10164  0013A4  0EFF               	movlw	high STR_44
 10165  0013A6  6E04               	movwf	i2strcpy@from+1,c
 10166  0013A8  ECB7  F012         	call	i2_strcpy	;wreg free
 10167                           
 10168                           ;RTC.c: 97: break;
 10169  0013AC  D04E               	goto	i2l4904
 10170  0013AE                     i2l4894:
 10171                           
 10172                           ;RTC.c: 99: strcpy(month, "Oct");
 10173  0013AE  0E3D               	movlw	low i2printRTC@month
 10174  0013B0  6E01               	movwf	i2strcpy@to,c
 10175  0013B2  0E00               	movlw	high i2printRTC@month
 10176  0013B4  6E02               	movwf	i2strcpy@to+1,c
 10177  0013B6  0EEF               	movlw	low STR_45
 10178  0013B8  6E03               	movwf	i2strcpy@from,c
 10179  0013BA  0EFF               	movlw	high STR_45
 10180  0013BC  6E04               	movwf	i2strcpy@from+1,c
 10181  0013BE  ECB7  F012         	call	i2_strcpy	;wreg free
 10182                           
 10183                           ;RTC.c: 100: break;
 10184  0013C2  D043               	goto	i2l4904
 10185  0013C4                     i2l4896:
 10186                           
 10187                           ;RTC.c: 102: strcpy(month, "Nov");
 10188  0013C4  0E3D               	movlw	low i2printRTC@month
 10189  0013C6  6E01               	movwf	i2strcpy@to,c
 10190  0013C8  0E00               	movlw	high i2printRTC@month
 10191  0013CA  6E02               	movwf	i2strcpy@to+1,c
 10192  0013CC  0EF3               	movlw	low STR_46
 10193  0013CE  6E03               	movwf	i2strcpy@from,c
 10194  0013D0  0EFF               	movlw	high STR_46
 10195  0013D2  6E04               	movwf	i2strcpy@from+1,c
 10196  0013D4  ECB7  F012         	call	i2_strcpy	;wreg free
 10197                           
 10198                           ;RTC.c: 103: break;
 10199  0013D8  D038               	goto	i2l4904
 10200  0013DA                     i2l4898:
 10201                           
 10202                           ;RTC.c: 105: strcpy(month, "Dec");
 10203  0013DA  0E3D               	movlw	low i2printRTC@month
 10204  0013DC  6E01               	movwf	i2strcpy@to,c
 10205  0013DE  0E00               	movlw	high i2printRTC@month
 10206  0013E0  6E02               	movwf	i2strcpy@to+1,c
 10207  0013E2  0ECF               	movlw	low STR_47
 10208  0013E4  6E03               	movwf	i2strcpy@from,c
 10209  0013E6  0EFF               	movlw	high STR_47
 10210  0013E8  6E04               	movwf	i2strcpy@from+1,c
 10211  0013EA  ECB7  F012         	call	i2_strcpy	;wreg free
 10212                           
 10213                           ;RTC.c: 107: }
 10214                           
 10215                           ;RTC.c: 106: break;
 10216  0013EE  D02D               	goto	i2l4904
 10217  0013F0                     i2l4902:
 10218  0013F0  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 10219  0013F4  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 10220                           
 10221                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10222                           ; Switch size 1, requested type "space"
 10223                           ; Number of cases is 1, Range of values is 0 to 0
 10224                           ; switch strategies available:
 10225                           ; Name         Instructions Cycles
 10226                           ; simple_byte            4     3 (average)
 10227                           ;	Chosen strategy is simple_byte
 10228  0013F8  502B               	movf	??i2_printRTC+1,w,c
 10229  0013FA  0A00               	xorlw	0	; case 0
 10230  0013FC  A4D8               	btfss	status,2,c
 10231  0013FE  D025               	goto	i2l4904
 10232                           
 10233                           ; Switch size 1, requested type "space"
 10234                           ; Number of cases is 12, Range of values is 1 to 12
 10235                           ; switch strategies available:
 10236                           ; Name         Instructions Cycles
 10237                           ; simple_byte           37    19 (average)
 10238                           ;	Chosen strategy is simple_byte
 10239  001400  502A               	movf	??i2_printRTC,w,c
 10240  001402  0A01               	xorlw	1	; case 1
 10241  001404  B4D8               	btfsc	status,2,c
 10242  001406  D770               	goto	i2l4876
 10243  001408  0A03               	xorlw	3	; case 2
 10244  00140A  B4D8               	btfsc	status,2,c
 10245  00140C  D778               	goto	i2l4878
 10246  00140E  0A01               	xorlw	1	; case 3
 10247  001410  B4D8               	btfsc	status,2,c
 10248  001412  D780               	goto	i2l4880
 10249  001414  0A07               	xorlw	7	; case 4
 10250  001416  B4D8               	btfsc	status,2,c
 10251  001418  D788               	goto	i2l4882
 10252  00141A  0A01               	xorlw	1	; case 5
 10253  00141C  B4D8               	btfsc	status,2,c
 10254  00141E  D790               	goto	i2l4884
 10255  001420  0A03               	xorlw	3	; case 6
 10256  001422  B4D8               	btfsc	status,2,c
 10257  001424  D798               	goto	i2l4886
 10258  001426  0A01               	xorlw	1	; case 7
 10259  001428  B4D8               	btfsc	status,2,c
 10260  00142A  D7A0               	goto	i2l4888
 10261  00142C  0A0F               	xorlw	15	; case 8
 10262  00142E  B4D8               	btfsc	status,2,c
 10263  001430  D7A8               	goto	i2l4890
 10264  001432  0A01               	xorlw	1	; case 9
 10265  001434  B4D8               	btfsc	status,2,c
 10266  001436  D7B0               	goto	i2l4892
 10267  001438  0A03               	xorlw	3	; case 10
 10268  00143A  B4D8               	btfsc	status,2,c
 10269  00143C  D7B8               	goto	i2l4894
 10270  00143E  0A01               	xorlw	1	; case 11
 10271  001440  B4D8               	btfsc	status,2,c
 10272  001442  D7C0               	goto	i2l4896
 10273  001444  0A07               	xorlw	7	; case 12
 10274  001446  B4D8               	btfsc	status,2,c
 10275  001448  D7C8               	goto	i2l4898
 10276  00144A                     i2l4904:
 10277                           
 10278                           ;RTC.c: 108: lcdInst(0b10000000);;
 10279  00144A  0E80               	movlw	128
 10280  00144C  EC05  F015         	call	i2_lcdInst
 10281                           
 10282                           ;RTC.c: 109: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 10283  001450  0ED0               	movlw	low STR_48
 10284  001452  6E0D               	movwf	i2printf@f,c
 10285  001454  0EFD               	movlw	high STR_48
 10286  001456  6E0E               	movwf	i2printf@f+1,c
 10287  001458  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 10288  00145C  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 10289  001460  0E3D               	movlw	low i2printRTC@month
 10290  001462  6E11               	movwf	?i2_printf+4,c
 10291  001464  0E00               	movlw	high i2printRTC@month
 10292  001466  6E12               	movwf	?i2_printf+5,c
 10293  001468  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 10294  00146C  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 10295  001470  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 10296  001474  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 10297  001478  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 10298  00147C  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 10299  001480  ECC0  F004         	call	i2_printf	;wreg free
 10300  001484  0012               	return		;funcret
 10301  001486                     __end_ofi2_printRTC:
 10302                           	opt stack 0
 10303                           pclatu	equ	0xFFB
 10304                           pclath	equ	0xFFA
 10305                           tblptru	equ	0xFF8
 10306                           tblptrh	equ	0xFF7
 10307                           tblptrl	equ	0xFF6
 10308                           tablat	equ	0xFF5
 10309                           prodh	equ	0xFF4
 10310                           prodl	equ	0xFF3
 10311                           intcon	equ	0xFF2
 10312                           intcon2	equ	0xFF1
 10313                           intcon3	equ	0xFF0
 10314                           indf0	equ	0xFEF
 10315                           postinc0	equ	0xFEE
 10316                           fsr0h	equ	0xFEA
 10317                           fsr0l	equ	0xFE9
 10318                           wreg	equ	0xFE8
 10319                           postdec1	equ	0xFE5
 10320                           fsr1h	equ	0xFE2
 10321                           fsr1l	equ	0xFE1
 10322                           indf2	equ	0xFDF
 10323                           postinc2	equ	0xFDE
 10324                           postdec2	equ	0xFDD
 10325                           fsr2h	equ	0xFDA
 10326                           fsr2l	equ	0xFD9
 10327                           status	equ	0xFD8
 10328                           
 10329 ;; *************** function i2_strcpy *****************
 10330 ;; Defined at:
 10331 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 10332 ;; Parameters:    Size  Location     Type
 10333 ;;  to              2    0[COMRAM] PTR unsigned char 
 10334 ;;		 -> printRTC@month(4), 
 10335 ;;  from            2    2[COMRAM] PTR const unsigned char 
 10336 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
 10337 ;;		 -> STR_43(4), STR_42(4), STR_41(4), STR_40(4), 
 10338 ;;		 -> STR_39(4), STR_38(4), STR_37(4), STR_36(4), 
 10339 ;; Auto vars:     Size  Location     Type
 10340 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 10341 ;;		 -> printRTC@month(4), 
 10342 ;; Return value:  Size  Location     Type
 10343 ;;                  2    0[COMRAM] PTR unsigned char 
 10344 ;; Registers used:
 10345 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10346 ;; Tracked objects:
 10347 ;;		On entry : 0/0
 10348 ;;		On exit  : 0/0
 10349 ;;		Unchanged: 0/0
 10350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10351 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10352 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10354 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10355 ;;Total ram usage:        6 bytes
 10356 ;; Hardware stack levels used:    1
 10357 ;; This function calls:
 10358 ;;		Nothing
 10359 ;; This function is called by:
 10360 ;;		i2_printRTC
 10361 ;; This function uses a non-reentrant model
 10362 ;;
 10363                           
 10364                           	psect	text48
 10365  00256E                     __ptext48:
 10366                           	opt stack 0
 10367  00256E                     i2_strcpy:
 10368                           	opt stack 20
 10369                           
 10370                           ;incstack = 0
 10371  00256E  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 10372  002572  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 10373  002576  D004               	goto	i2l4626
 10374  002578                     i2l4624:
 10375  002578  4A05               	infsnz	i2strcpy@cp,f,c
 10376  00257A  2A06               	incf	i2strcpy@cp+1,f,c
 10377  00257C  4A03               	infsnz	i2strcpy@from,f,c
 10378  00257E  2A04               	incf	i2strcpy@from+1,f,c
 10379  002580                     i2l4626:
 10380  002580  C003  FFF6         	movff	i2strcpy@from,tblptrl
 10381  002584  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 10382  002588                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10383  002588  6AF8               	clrf	tblptru,c
 10384  00258A                     	endif
 10385  00258A                     	if	0	;tblptru may be non-zero
 10386  00258A                     	endif
 10387  00258A  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 10388  00258E  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 10389  002592  0008               	tblrd		*
 10390  002594  CFF5 FFDF          	movff	tablat,indf2
 10391  002598  50DF               	movf	indf2,w,c
 10392  00259A  B4D8               	btfsc	status,2,c
 10393  00259C  0012               	return	
 10394  00259E  D7EC               	goto	i2l4624
 10395  0025A0                     __end_ofi2_strcpy:
 10396                           	opt stack 0
 10397                           pclatu	equ	0xFFB
 10398                           pclath	equ	0xFFA
 10399                           tblptru	equ	0xFF8
 10400                           tblptrh	equ	0xFF7
 10401                           tblptrl	equ	0xFF6
 10402                           tablat	equ	0xFF5
 10403                           prodh	equ	0xFF4
 10404                           prodl	equ	0xFF3
 10405                           intcon	equ	0xFF2
 10406                           intcon2	equ	0xFF1
 10407                           intcon3	equ	0xFF0
 10408                           indf0	equ	0xFEF
 10409                           postinc0	equ	0xFEE
 10410                           fsr0h	equ	0xFEA
 10411                           fsr0l	equ	0xFE9
 10412                           wreg	equ	0xFE8
 10413                           postdec1	equ	0xFE5
 10414                           fsr1h	equ	0xFE2
 10415                           fsr1l	equ	0xFE1
 10416                           indf2	equ	0xFDF
 10417                           postinc2	equ	0xFDE
 10418                           postdec2	equ	0xFDD
 10419                           fsr2h	equ	0xFDA
 10420                           fsr2l	equ	0xFD9
 10421                           status	equ	0xFD8
 10422                           
 10423 ;; *************** function _inputHandler *****************
 10424 ;; Defined at:
 10425 ;;		line 315 in file "UI.c"
 10426 ;; Parameters:    Size  Location     Type
 10427 ;;		None
 10428 ;; Auto vars:     Size  Location     Type
 10429 ;;		None
 10430 ;; Return value:  Size  Location     Type
 10431 ;;                  2   41[COMRAM] int 
 10432 ;; Registers used:
 10433 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10434 ;; Tracked objects:
 10435 ;;		On entry : 0/0
 10436 ;;		On exit  : 0/0
 10437 ;;		Unchanged: 0/0
 10438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10439 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10441 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10442 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10443 ;;Total ram usage:        4 bytes
 10444 ;; Hardware stack levels used:    1
 10445 ;; Hardware stack levels required when called:    4
 10446 ;; This function calls:
 10447 ;;		_change_state_to_logs_11
 10448 ;;		_change_state_to_logs_12
 10449 ;;		_change_state_to_logs_22
 10450 ;;		_change_state_to_logs_23
 10451 ;;		_change_state_to_logs_33
 10452 ;;		_change_state_to_logs_34
 10453 ;;		_change_state_to_menu_11
 10454 ;;		_change_state_to_menu_23
 10455 ;;		i2_change_state_to_menu_12
 10456 ;;		i2_change_state_to_menu_22
 10457 ;; This function is called by:
 10458 ;;		_updateMenu
 10459 ;; This function uses a non-reentrant model
 10460 ;;
 10461                           
 10462                           	psect	text49
 10463  001680                     __ptext49:
 10464                           	opt stack 0
 10465  001680                     _inputHandler:
 10466                           	opt stack 18
 10467                           
 10468                           ;UI.c: 320: if(firstboot){
 10469                           
 10470                           ;incstack = 0
 10471  001680  5069               	movf	_firstboot,w,c
 10472  001682  106A               	iorwf	_firstboot+1,w,c
 10473  001684  B4D8               	btfsc	status,2,c
 10474  001686  D00B               	goto	i2l4972
 10475                           
 10476                           ;UI.c: 321: change_state_to_menu_11();
 10477  001688  EC18  F013         	call	_change_state_to_menu_11	;wreg free
 10478                           
 10479                           ;UI.c: 322: firstboot = 0;
 10480  00168C  0E00               	movlw	0
 10481  00168E  6E6A               	movwf	_firstboot+1,c
 10482  001690  0E00               	movlw	0
 10483  001692  6E69               	movwf	_firstboot,c
 10484                           
 10485                           ;UI.c: 323: return 0;
 10486  001694  0E00               	movlw	0
 10487  001696  6E2B               	movwf	?_inputHandler+1,c
 10488  001698  0E00               	movlw	0
 10489  00169A  6E2A               	movwf	?_inputHandler,c
 10490  00169C  0012               	return	
 10491  00169E                     i2l4972:
 10492                           
 10493                           ;UI.c: 324: }
 10494                           ;UI.c: 325: if (logstate){
 10495  00169E  0100               	movlb	0	; () banked
 10496  0016A0  51EF               	movf	_logstate& (0+255),w,b
 10497  0016A2  0100               	movlb	0	; () banked
 10498  0016A4  11F0               	iorwf	(_logstate+1)& (0+255),w,b
 10499  0016A6  B4D8               	btfsc	status,2,c
 10500  0016A8  D0C7               	goto	i2l5090
 10501                           
 10502                           ; BSR set to: 0
 10503                           ;UI.c: 326: if(input == 'C' && PORTBbits.RB1 == 1){
 10504  0016AA  0E43               	movlw	67
 10505  0016AC  1879               	xorwf	_input,w,c
 10506  0016AE  A4D8               	btfss	status,2,c
 10507  0016B0  D012               	goto	i2l4990
 10508                           
 10509                           ; BSR set to: 0
 10510  0016B2  B281               	btfsc	3969,1,c	;volatile
 10511  0016B4  D009               	goto	i2l4982
 10512  0016B6  D00F               	goto	i2l4990
 10513  0016B8                     i2l4980:
 10514                           
 10515                           ;UI.c: 329: _delay((unsigned long)((10)*(32000000/4000.0)));
 10516  0016B8  0E68               	movlw	104
 10517  0016BA  6E2C               	movwf	??_inputHandler& (0+255),c
 10518  0016BC  0EE4               	movlw	228
 10519  0016BE                     i2u499_47:
 10520  0016BE  2EE8               	decfsz	wreg,f,c
 10521  0016C0  D7FE               	bra	i2u499_47
 10522  0016C2  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 10523  0016C4  D7FC               	bra	i2u499_47
 10524  0016C6  D000               	nop2	
 10525  0016C8                     i2l4982:
 10526  0016C8  B281               	btfsc	3969,1,c	;volatile
 10527  0016CA  D7F6               	goto	i2l4980
 10528  0016CC                     i2l4984:
 10529                           
 10530                           ;UI.c: 330: }
 10531                           ;UI.c: 331: return 0;
 10532  0016CC  0E00               	movlw	0
 10533  0016CE  6E2B               	movwf	?_inputHandler+1,c
 10534  0016D0  0E00               	movlw	0
 10535  0016D2  6E2A               	movwf	?_inputHandler,c
 10536  0016D4  0012               	return	
 10537  0016D6                     i2l4990:
 10538                           
 10539                           ;UI.c: 333: else if (input == 'D'){
 10540  0016D6  0E44               	movlw	68
 10541  0016D8  1879               	xorwf	_input,w,c
 10542  0016DA  A4D8               	btfss	status,2,c
 10543  0016DC  D7F7               	goto	i2l4984
 10544                           
 10545                           ;UI.c: 335: logstate = 0;
 10546  0016DE  0E00               	movlw	0
 10547  0016E0  0100               	movlb	0	; () banked
 10548  0016E2  6FF0               	movwf	(_logstate+1)& (0+255),b
 10549  0016E4  0E00               	movlw	0
 10550  0016E6  6FEF               	movwf	_logstate& (0+255),b
 10551                           
 10552                           ;UI.c: 336: switch(cur_state){
 10553  0016E8  D012               	goto	i2l5008
 10554  0016EA                     i2l4994:
 10555                           
 10556                           ;UI.c: 338: change_state_to_logs_11();
 10557  0016EA  EC90  F013         	call	_change_state_to_logs_11	;wreg free
 10558                           
 10559                           ;UI.c: 339: break;
 10560  0016EE  D7EE               	goto	i2l4984
 10561  0016F0                     i2l4996:
 10562                           
 10563                           ;UI.c: 341: change_state_to_logs_12();
 10564  0016F0  EC78  F013         	call	_change_state_to_logs_12	;wreg free
 10565                           
 10566                           ;UI.c: 342: break;
 10567  0016F4  D7EB               	goto	i2l4984
 10568  0016F6                     i2l4998:
 10569                           
 10570                           ;UI.c: 344: change_state_to_logs_22();
 10571  0016F6  EC60  F013         	call	_change_state_to_logs_22	;wreg free
 10572                           
 10573                           ;UI.c: 345: break;
 10574  0016FA  D7E8               	goto	i2l4984
 10575  0016FC                     i2l5000:
 10576                           
 10577                           ;UI.c: 347: change_state_to_logs_23();
 10578  0016FC  ECD6  F013         	call	_change_state_to_logs_23	;wreg free
 10579                           
 10580                           ;UI.c: 348: break;
 10581  001700  D7E5               	goto	i2l4984
 10582  001702                     i2l5002:
 10583                           
 10584                           ;UI.c: 350: change_state_to_logs_33();
 10585  001702  EC48  F013         	call	_change_state_to_logs_33	;wreg free
 10586                           
 10587                           ;UI.c: 351: break;
 10588  001706  D7E2               	goto	i2l4984
 10589  001708                     i2l5004:
 10590                           
 10591                           ;UI.c: 353: change_state_to_logs_34();
 10592  001708  EC30  F013         	call	_change_state_to_logs_34	;wreg free
 10593                           
 10594                           ;UI.c: 355: }
 10595                           
 10596                           ;UI.c: 354: break;
 10597  00170C  D7DF               	goto	i2l4984
 10598  00170E                     i2l5008:
 10599  00170E  C0E1  F02C         	movff	_cur_state,??_inputHandler
 10600  001712  C0E2  F02D         	movff	_cur_state+1,??_inputHandler+1
 10601                           
 10602                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 10603                           ; Switch size 1, requested type "space"
 10604                           ; Number of cases is 2, Range of values is 3 to 4
 10605                           ; switch strategies available:
 10606                           ; Name         Instructions Cycles
 10607                           ; simple_byte            7     4 (average)
 10608                           ;	Chosen strategy is simple_byte
 10609  001716  502D               	movf	??_inputHandler+1,w,c
 10610  001718  0A03               	xorlw	3	; case 3
 10611  00171A  B4D8               	btfsc	status,2,c
 10612  00171C  D004               	goto	i2l6082
 10613  00171E  0A07               	xorlw	7	; case 4
 10614  001720  B4D8               	btfsc	status,2,c
 10615  001722  D00F               	goto	i2l6084
 10616  001724  D7D3               	goto	i2l4984
 10617  001726                     i2l6082:
 10618                           
 10619                           ; Switch size 1, requested type "space"
 10620                           ; Number of cases is 4, Range of values is 243 to 255
 10621                           ; switch strategies available:
 10622                           ; Name         Instructions Cycles
 10623                           ; simple_byte           13     7 (average)
 10624                           ;	Chosen strategy is simple_byte
 10625  001726  502C               	movf	??_inputHandler,w,c
 10626  001728  0AF3               	xorlw	243	; case 243
 10627  00172A  B4D8               	btfsc	status,2,c
 10628  00172C  D7DE               	goto	i2l4994
 10629  00172E  0A07               	xorlw	7	; case 244
 10630  001730  B4D8               	btfsc	status,2,c
 10631  001732  D7DE               	goto	i2l4996
 10632  001734  0A0A               	xorlw	10	; case 254
 10633  001736  B4D8               	btfsc	status,2,c
 10634  001738  D7DE               	goto	i2l4998
 10635  00173A  0A01               	xorlw	1	; case 255
 10636  00173C  B4D8               	btfsc	status,2,c
 10637  00173E  D7DE               	goto	i2l5000
 10638  001740  D7C5               	goto	i2l4984
 10639  001742                     i2l6084:
 10640                           
 10641                           ; Switch size 1, requested type "space"
 10642                           ; Number of cases is 2, Range of values is 9 to 10
 10643                           ; switch strategies available:
 10644                           ; Name         Instructions Cycles
 10645                           ; simple_byte            7     4 (average)
 10646                           ;	Chosen strategy is simple_byte
 10647  001742  502C               	movf	??_inputHandler,w,c
 10648  001744  0A09               	xorlw	9	; case 9
 10649  001746  B4D8               	btfsc	status,2,c
 10650  001748  D7DC               	goto	i2l5002
 10651  00174A  0A03               	xorlw	3	; case 10
 10652  00174C  B4D8               	btfsc	status,2,c
 10653  00174E  D7DC               	goto	i2l5004
 10654  001750  D7BD               	goto	i2l4984
 10655  001752                     i2l5020:
 10656                           
 10657                           ;UI.c: 365: if(cur_state == 11){
 10658  001752  0E0B               	movlw	11
 10659  001754  0100               	movlb	0	; () banked
 10660  001756  19E1               	xorwf	_cur_state& (0+255),w,b
 10661  001758  0100               	movlb	0	; () banked
 10662  00175A  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
 10663  00175C  A4D8               	btfss	status,2,c
 10664  00175E  D005               	goto	i2l5028
 10665                           
 10666                           ; BSR set to: 0
 10667                           ;UI.c: 366: return 0;
 10668  001760  0E00               	movlw	0
 10669  001762  6E2B               	movwf	?_inputHandler+1,c
 10670  001764  0E00               	movlw	0
 10671  001766  6E2A               	movwf	?_inputHandler,c
 10672                           
 10673                           ; BSR set to: 0
 10674  001768  0012               	return	
 10675  00176A                     i2l5028:
 10676                           
 10677                           ; BSR set to: 0
 10678                           ;UI.c: 368: else{
 10679                           ;UI.c: 369: change_state_to_menu_11();
 10680  00176A  EC18  F013         	call	_change_state_to_menu_11	;wreg free
 10681                           
 10682                           ;UI.c: 370: }
 10683                           ;UI.c: 371: return 0;
 10684  00176E  0E00               	movlw	0
 10685  001770  6E2B               	movwf	?_inputHandler+1,c
 10686  001772  0E00               	movlw	0
 10687  001774  6E2A               	movwf	?_inputHandler,c
 10688  001776  0012               	return	
 10689  001778                     i2l5034:
 10690                           
 10691                           ;UI.c: 373: if(cur_state == 22 | cur_state == 12){
 10692  001778  0E16               	movlw	22
 10693  00177A  0100               	movlb	0	; () banked
 10694  00177C  19E1               	xorwf	_cur_state& (0+255),w,b
 10695  00177E  0100               	movlb	0	; () banked
 10696  001780  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
 10697  001782  B4D8               	btfsc	status,2,c
 10698  001784  D007               	goto	i2l5038
 10699                           
 10700                           ; BSR set to: 0
 10701  001786  0E0C               	movlw	12
 10702  001788  0100               	movlb	0	; () banked
 10703  00178A  19E1               	xorwf	_cur_state& (0+255),w,b
 10704  00178C  0100               	movlb	0	; () banked
 10705  00178E  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
 10706  001790  A4D8               	btfss	status,2,c
 10707  001792  D005               	goto	i2l5044
 10708  001794                     i2l5038:
 10709                           
 10710                           ; BSR set to: 0
 10711                           ;UI.c: 374: return 0;
 10712  001794  0E00               	movlw	0
 10713  001796  6E2B               	movwf	?_inputHandler+1,c
 10714  001798  0E00               	movlw	0
 10715  00179A  6E2A               	movwf	?_inputHandler,c
 10716                           
 10717                           ; BSR set to: 0
 10718  00179C  0012               	return	
 10719  00179E                     i2l5044:
 10720                           
 10721                           ; BSR set to: 0
 10722                           ;UI.c: 376: else if(cur_state == 23){
 10723  00179E  0E17               	movlw	23
 10724  0017A0  0100               	movlb	0	; () banked
 10725  0017A2  19E1               	xorwf	_cur_state& (0+255),w,b
 10726  0017A4  0100               	movlb	0	; () banked
 10727  0017A6  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
 10728  0017A8  A4D8               	btfss	status,2,c
 10729  0017AA  D003               	goto	i2l5048
 10730                           
 10731                           ; BSR set to: 0
 10732                           ;UI.c: 377: change_state_to_menu_22();
 10733  0017AC  ECD0  F012         	call	i2_change_state_to_menu_22	;wreg free
 10734                           
 10735                           ;UI.c: 378: }
 10736  0017B0  D002               	goto	i2l5050
 10737  0017B2                     i2l5048:
 10738                           
 10739                           ;UI.c: 379: else{
 10740                           ;UI.c: 380: change_state_to_menu_12();
 10741  0017B2  ECE8  F012         	call	i2_change_state_to_menu_12	;wreg free
 10742  0017B6                     i2l5050:
 10743                           
 10744                           ;UI.c: 381: }
 10745                           ;UI.c: 382: return 0;
 10746  0017B6  0E00               	movlw	0
 10747  0017B8  6E2B               	movwf	?_inputHandler+1,c
 10748  0017BA  0E00               	movlw	0
 10749  0017BC  6E2A               	movwf	?_inputHandler,c
 10750  0017BE  0012               	return	
 10751  0017C0                     i2l5054:
 10752                           
 10753                           ;UI.c: 384: if(cur_state == 23){
 10754  0017C0  0E17               	movlw	23
 10755  0017C2  0100               	movlb	0	; () banked
 10756  0017C4  19E1               	xorwf	_cur_state& (0+255),w,b
 10757  0017C6  0100               	movlb	0	; () banked
 10758  0017C8  11E2               	iorwf	(_cur_state+1)& (0+255),w,b
 10759  0017CA  A4D8               	btfss	status,2,c
 10760  0017CC  D005               	goto	i2l5062
 10761                           
 10762                           ; BSR set to: 0
 10763                           ;UI.c: 385: return 0;
 10764  0017CE  0E00               	movlw	0
 10765  0017D0  6E2B               	movwf	?_inputHandler+1,c
 10766  0017D2  0E00               	movlw	0
 10767  0017D4  6E2A               	movwf	?_inputHandler,c
 10768                           
 10769                           ; BSR set to: 0
 10770  0017D6  0012               	return	
 10771  0017D8                     i2l5062:
 10772                           
 10773                           ; BSR set to: 0
 10774                           ;UI.c: 387: else{
 10775                           ;UI.c: 388: change_state_to_menu_23();
 10776  0017D8  EC00  F013         	call	_change_state_to_menu_23	;wreg free
 10777                           
 10778                           ;UI.c: 389: }
 10779                           ;UI.c: 390: return 0;
 10780  0017DC  0E00               	movlw	0
 10781  0017DE  6E2B               	movwf	?_inputHandler+1,c
 10782  0017E0  0E00               	movlw	0
 10783  0017E2  6E2A               	movwf	?_inputHandler,c
 10784  0017E4  0012               	return	
 10785  0017E6                     i2l5068:
 10786                           
 10787                           ;UI.c: 393: up = 1;
 10788  0017E6  0E00               	movlw	0
 10789  0017E8  6E74               	movwf	_up+1,c
 10790  0017EA  0E01               	movlw	1
 10791  0017EC  6E73               	movwf	_up,c
 10792                           
 10793                           ;UI.c: 394: return 1;
 10794  0017EE  0E00               	movlw	0
 10795  0017F0  6E2B               	movwf	?_inputHandler+1,c
 10796  0017F2  0E01               	movlw	1
 10797  0017F4  6E2A               	movwf	?_inputHandler,c
 10798  0017F6  0012               	return	
 10799  0017F8                     i2l5072:
 10800                           
 10801                           ;UI.c: 396: down = 1;
 10802  0017F8  0E00               	movlw	0
 10803  0017FA  6E66               	movwf	_down+1,c
 10804  0017FC  0E01               	movlw	1
 10805  0017FE  6E65               	movwf	_down,c
 10806                           
 10807                           ;UI.c: 397: return 1;
 10808  001800  0E00               	movlw	0
 10809  001802  6E2B               	movwf	?_inputHandler+1,c
 10810  001804  0E01               	movlw	1
 10811  001806  6E2A               	movwf	?_inputHandler,c
 10812  001808  0012               	return	
 10813  00180A                     i2l5076:
 10814                           
 10815                           ;UI.c: 399: enter = 1;
 10816  00180A  0E00               	movlw	0
 10817  00180C  6E68               	movwf	_enter+1,c
 10818  00180E  0E01               	movlw	1
 10819  001810  6E67               	movwf	_enter,c
 10820                           
 10821                           ;UI.c: 400: return 1;
 10822  001812  0E00               	movlw	0
 10823  001814  6E2B               	movwf	?_inputHandler+1,c
 10824  001816  0E01               	movlw	1
 10825  001818  6E2A               	movwf	?_inputHandler,c
 10826  00181A  0012               	return	
 10827  00181C                     i2l5080:
 10828                           
 10829                           ;UI.c: 402: back = 1;
 10830  00181C  0E00               	movlw	0
 10831  00181E  6E5E               	movwf	_back+1,c
 10832  001820  0E01               	movlw	1
 10833  001822  6E5D               	movwf	_back,c
 10834                           
 10835                           ;UI.c: 403: return 1;
 10836  001824  0E00               	movlw	0
 10837  001826  6E2B               	movwf	?_inputHandler+1,c
 10838  001828  0E01               	movlw	1
 10839  00182A  6E2A               	movwf	?_inputHandler,c
 10840  00182C  0012               	return	
 10841  00182E                     i2l5084:
 10842                           
 10843                           ;UI.c: 406: return 1;
 10844  00182E  0E00               	movlw	0
 10845  001830  6E2B               	movwf	?_inputHandler+1,c
 10846  001832  0E01               	movlw	1
 10847  001834  6E2A               	movwf	?_inputHandler,c
 10848                           
 10849                           ;UI.c: 407: }
 10850  001836  0012               	return	
 10851  001838                     i2l5090:
 10852  001838  5079               	movf	_input,w,c
 10853                           
 10854                           ; Switch size 1, requested type "space"
 10855                           ; Number of cases is 7, Range of values is 49 to 68
 10856                           ; switch strategies available:
 10857                           ; Name         Instructions Cycles
 10858                           ; simple_byte           22    12 (average)
 10859                           ;	Chosen strategy is simple_byte
 10860  00183A  0A31               	xorlw	49	; case 49
 10861  00183C  B4D8               	btfsc	status,2,c
 10862  00183E  D789               	goto	i2l5020
 10863  001840  0A03               	xorlw	3	; case 50
 10864  001842  B4D8               	btfsc	status,2,c
 10865  001844  D799               	goto	i2l5034
 10866  001846  0A01               	xorlw	1	; case 51
 10867  001848  B4D8               	btfsc	status,2,c
 10868  00184A  D7BA               	goto	i2l5054
 10869  00184C  0A72               	xorlw	114	; case 65
 10870  00184E  B4D8               	btfsc	status,2,c
 10871  001850  D7CA               	goto	i2l5068
 10872  001852  0A03               	xorlw	3	; case 66
 10873  001854  B4D8               	btfsc	status,2,c
 10874  001856  D7D0               	goto	i2l5072
 10875  001858  0A01               	xorlw	1	; case 67
 10876  00185A  B4D8               	btfsc	status,2,c
 10877  00185C  D7D6               	goto	i2l5076
 10878  00185E  0A07               	xorlw	7	; case 68
 10879  001860  B4D8               	btfsc	status,2,c
 10880  001862  D7DC               	goto	i2l5080
 10881  001864  D7E4               	goto	i2l5084
 10882  001866                     __end_of_inputHandler:
 10883                           	opt stack 0
 10884                           pclatu	equ	0xFFB
 10885                           pclath	equ	0xFFA
 10886                           tblptru	equ	0xFF8
 10887                           tblptrh	equ	0xFF7
 10888                           tblptrl	equ	0xFF6
 10889                           tablat	equ	0xFF5
 10890                           prodh	equ	0xFF4
 10891                           prodl	equ	0xFF3
 10892                           intcon	equ	0xFF2
 10893                           intcon2	equ	0xFF1
 10894                           intcon3	equ	0xFF0
 10895                           indf0	equ	0xFEF
 10896                           postinc0	equ	0xFEE
 10897                           fsr0h	equ	0xFEA
 10898                           fsr0l	equ	0xFE9
 10899                           wreg	equ	0xFE8
 10900                           postdec1	equ	0xFE5
 10901                           fsr1h	equ	0xFE2
 10902                           fsr1l	equ	0xFE1
 10903                           indf2	equ	0xFDF
 10904                           postinc2	equ	0xFDE
 10905                           postdec2	equ	0xFDD
 10906                           fsr2h	equ	0xFDA
 10907                           fsr2l	equ	0xFD9
 10908                           status	equ	0xFD8
 10909                           
 10910 ;; *************** function i2_change_state_to_menu_22 *****************
 10911 ;; Defined at:
 10912 ;;		line 440 in file "UI.c"
 10913 ;; Parameters:    Size  Location     Type
 10914 ;;		None
 10915 ;; Auto vars:     Size  Location     Type
 10916 ;;		None
 10917 ;; Return value:  Size  Location     Type
 10918 ;;                  1    wreg      void 
 10919 ;; Registers used:
 10920 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10921 ;; Tracked objects:
 10922 ;;		On entry : 0/0
 10923 ;;		On exit  : 0/0
 10924 ;;		Unchanged: 0/0
 10925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10929 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10930 ;;Total ram usage:        0 bytes
 10931 ;; Hardware stack levels used:    1
 10932 ;; Hardware stack levels required when called:    3
 10933 ;; This function calls:
 10934 ;;		i2_lcdInst
 10935 ;;		i2_printf
 10936 ;; This function is called by:
 10937 ;;		_updateMenu
 10938 ;;		_inputHandler
 10939 ;; This function uses a non-reentrant model
 10940 ;;
 10941                           
 10942                           	psect	text50
 10943  0025A0                     __ptext50:
 10944                           	opt stack 0
 10945  0025A0                     i2_change_state_to_menu_22:
 10946                           	opt stack 19
 10947                           
 10948                           ;UI.c: 441: cur_state = 22;
 10949                           
 10950                           ;incstack = 0
 10951  0025A0  0E00               	movlw	0
 10952  0025A2  0100               	movlb	0	; () banked
 10953  0025A4  6FE2               	movwf	(_cur_state+1)& (0+255),b
 10954  0025A6  0E16               	movlw	22
 10955  0025A8  6FE1               	movwf	_cur_state& (0+255),b
 10956                           
 10957                           ; BSR set to: 0
 10958                           ;UI.c: 443: lcdInst(0b10000000);;
 10959  0025AA  0E80               	movlw	128
 10960  0025AC  EC05  F015         	call	i2_lcdInst
 10961                           
 10962                           ;UI.c: 444: printf("2. SORT        <");
 10963  0025B0  0E64               	movlw	low STR_19
 10964  0025B2  6E0D               	movwf	i2printf@f,c
 10965  0025B4  0EFF               	movlw	high STR_19
 10966  0025B6  6E0E               	movwf	i2printf@f+1,c
 10967  0025B8  ECC0  F004         	call	i2_printf	;wreg free
 10968                           
 10969                           ;UI.c: 445: lcdInst(0b11000000);;
 10970  0025BC  0EC0               	movlw	192
 10971  0025BE  EC05  F015         	call	i2_lcdInst
 10972                           
 10973                           ;UI.c: 446: printf("3. LOGS         ");
 10974  0025C2  0E65               	movlw	low STR_21
 10975  0025C4  6E0D               	movwf	i2printf@f,c
 10976  0025C6  0EFE               	movlw	high STR_21
 10977  0025C8  6E0E               	movwf	i2printf@f+1,c
 10978  0025CA  ECC0  F004         	call	i2_printf	;wreg free
 10979  0025CE  0012               	return		;funcret
 10980  0025D0                     __end_ofi2_change_state_to_menu_22:
 10981                           	opt stack 0
 10982                           pclatu	equ	0xFFB
 10983                           pclath	equ	0xFFA
 10984                           tblptru	equ	0xFF8
 10985                           tblptrh	equ	0xFF7
 10986                           tblptrl	equ	0xFF6
 10987                           tablat	equ	0xFF5
 10988                           prodh	equ	0xFF4
 10989                           prodl	equ	0xFF3
 10990                           intcon	equ	0xFF2
 10991                           intcon2	equ	0xFF1
 10992                           intcon3	equ	0xFF0
 10993                           indf0	equ	0xFEF
 10994                           postinc0	equ	0xFEE
 10995                           fsr0h	equ	0xFEA
 10996                           fsr0l	equ	0xFE9
 10997                           wreg	equ	0xFE8
 10998                           postdec1	equ	0xFE5
 10999                           fsr1h	equ	0xFE2
 11000                           fsr1l	equ	0xFE1
 11001                           indf2	equ	0xFDF
 11002                           postinc2	equ	0xFDE
 11003                           postdec2	equ	0xFDD
 11004                           fsr2h	equ	0xFDA
 11005                           fsr2l	equ	0xFD9
 11006                           status	equ	0xFD8
 11007                           
 11008 ;; *************** function i2_change_state_to_menu_12 *****************
 11009 ;; Defined at:
 11010 ;;		line 432 in file "UI.c"
 11011 ;; Parameters:    Size  Location     Type
 11012 ;;		None
 11013 ;; Auto vars:     Size  Location     Type
 11014 ;;		None
 11015 ;; Return value:  Size  Location     Type
 11016 ;;                  1    wreg      void 
 11017 ;; Registers used:
 11018 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11019 ;; Tracked objects:
 11020 ;;		On entry : 0/0
 11021 ;;		On exit  : 0/0
 11022 ;;		Unchanged: 0/0
 11023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11027 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11028 ;;Total ram usage:        0 bytes
 11029 ;; Hardware stack levels used:    1
 11030 ;; Hardware stack levels required when called:    3
 11031 ;; This function calls:
 11032 ;;		i2_lcdInst
 11033 ;;		i2_printf
 11034 ;; This function is called by:
 11035 ;;		_updateMenu
 11036 ;;		_inputHandler
 11037 ;; This function uses a non-reentrant model
 11038 ;;
 11039                           
 11040                           	psect	text51
 11041  0025D0                     __ptext51:
 11042                           	opt stack 0
 11043  0025D0                     i2_change_state_to_menu_12:
 11044                           	opt stack 19
 11045                           
 11046                           ;UI.c: 433: cur_state = 12;
 11047                           
 11048                           ;incstack = 0
 11049  0025D0  0E00               	movlw	0
 11050  0025D2  0100               	movlb	0	; () banked
 11051  0025D4  6FE2               	movwf	(_cur_state+1)& (0+255),b
 11052  0025D6  0E0C               	movlw	12
 11053  0025D8  6FE1               	movwf	_cur_state& (0+255),b
 11054                           
 11055                           ; BSR set to: 0
 11056                           ;UI.c: 435: lcdInst(0b10000000);;
 11057  0025DA  0E80               	movlw	128
 11058  0025DC  EC05  F015         	call	i2_lcdInst
 11059                           
 11060                           ;UI.c: 436: printf("1. DATE/TIME    ");
 11061  0025E0  0E87               	movlw	low STR_18
 11062  0025E2  6E0D               	movwf	i2printf@f,c
 11063  0025E4  0EFE               	movlw	high STR_18
 11064  0025E6  6E0E               	movwf	i2printf@f+1,c
 11065  0025E8  ECC0  F004         	call	i2_printf	;wreg free
 11066                           
 11067                           ;UI.c: 437: lcdInst(0b11000000);;
 11068  0025EC  0EC0               	movlw	192
 11069  0025EE  EC05  F015         	call	i2_lcdInst
 11070                           
 11071                           ;UI.c: 438: printf("2. SORT        <");
 11072  0025F2  0E64               	movlw	low STR_19
 11073  0025F4  6E0D               	movwf	i2printf@f,c
 11074  0025F6  0EFF               	movlw	high STR_19
 11075  0025F8  6E0E               	movwf	i2printf@f+1,c
 11076  0025FA  ECC0  F004         	call	i2_printf	;wreg free
 11077  0025FE  0012               	return		;funcret
 11078  002600                     __end_ofi2_change_state_to_menu_12:
 11079                           	opt stack 0
 11080                           pclatu	equ	0xFFB
 11081                           pclath	equ	0xFFA
 11082                           tblptru	equ	0xFF8
 11083                           tblptrh	equ	0xFF7
 11084                           tblptrl	equ	0xFF6
 11085                           tablat	equ	0xFF5
 11086                           prodh	equ	0xFF4
 11087                           prodl	equ	0xFF3
 11088                           intcon	equ	0xFF2
 11089                           intcon2	equ	0xFF1
 11090                           intcon3	equ	0xFF0
 11091                           indf0	equ	0xFEF
 11092                           postinc0	equ	0xFEE
 11093                           fsr0h	equ	0xFEA
 11094                           fsr0l	equ	0xFE9
 11095                           wreg	equ	0xFE8
 11096                           postdec1	equ	0xFE5
 11097                           fsr1h	equ	0xFE2
 11098                           fsr1l	equ	0xFE1
 11099                           indf2	equ	0xFDF
 11100                           postinc2	equ	0xFDE
 11101                           postdec2	equ	0xFDD
 11102                           fsr2h	equ	0xFDA
 11103                           fsr2l	equ	0xFD9
 11104                           status	equ	0xFD8
 11105                           
 11106 ;; *************** function _change_state_to_menu_23 *****************
 11107 ;; Defined at:
 11108 ;;		line 448 in file "UI.c"
 11109 ;; Parameters:    Size  Location     Type
 11110 ;;		None
 11111 ;; Auto vars:     Size  Location     Type
 11112 ;;		None
 11113 ;; Return value:  Size  Location     Type
 11114 ;;                  1    wreg      void 
 11115 ;; Registers used:
 11116 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11117 ;; Tracked objects:
 11118 ;;		On entry : 0/0
 11119 ;;		On exit  : 0/0
 11120 ;;		Unchanged: 0/0
 11121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11125 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11126 ;;Total ram usage:        0 bytes
 11127 ;; Hardware stack levels used:    1
 11128 ;; Hardware stack levels required when called:    3
 11129 ;; This function calls:
 11130 ;;		i2_lcdInst
 11131 ;;		i2_printf
 11132 ;; This function is called by:
 11133 ;;		_updateMenu
 11134 ;;		_inputHandler
 11135 ;; This function uses a non-reentrant model
 11136 ;;
 11137                           
 11138                           	psect	text52
 11139  002600                     __ptext52:
 11140                           	opt stack 0
 11141  002600                     _change_state_to_menu_23:
 11142                           	opt stack 18
 11143                           
 11144                           ;UI.c: 449: cur_state = 23;
 11145                           
 11146                           ;incstack = 0
 11147  002600  0E00               	movlw	0
 11148  002602  0100               	movlb	0	; () banked
 11149  002604  6FE2               	movwf	(_cur_state+1)& (0+255),b
 11150  002606  0E17               	movlw	23
 11151  002608  6FE1               	movwf	_cur_state& (0+255),b
 11152                           
 11153                           ; BSR set to: 0
 11154                           ;UI.c: 451: lcdInst(0b10000000);;
 11155  00260A  0E80               	movlw	128
 11156  00260C  EC05  F015         	call	i2_lcdInst
 11157                           
 11158                           ;UI.c: 452: printf("2. SORT         ");
 11159  002610  0E76               	movlw	low STR_17
 11160  002612  6E0D               	movwf	i2printf@f,c
 11161  002614  0EFE               	movlw	high STR_17
 11162  002616  6E0E               	movwf	i2printf@f+1,c
 11163  002618  ECC0  F004         	call	i2_printf	;wreg free
 11164                           
 11165                           ;UI.c: 453: lcdInst(0b11000000);;
 11166  00261C  0EC0               	movlw	192
 11167  00261E  EC05  F015         	call	i2_lcdInst
 11168                           
 11169                           ;UI.c: 454: printf("3. LOGS        <");
 11170  002622  0E53               	movlw	low STR_23
 11171  002624  6E0D               	movwf	i2printf@f,c
 11172  002626  0EFF               	movlw	high STR_23
 11173  002628  6E0E               	movwf	i2printf@f+1,c
 11174  00262A  ECC0  F004         	call	i2_printf	;wreg free
 11175  00262E  0012               	return		;funcret
 11176  002630                     __end_of_change_state_to_menu_23:
 11177                           	opt stack 0
 11178                           pclatu	equ	0xFFB
 11179                           pclath	equ	0xFFA
 11180                           tblptru	equ	0xFF8
 11181                           tblptrh	equ	0xFF7
 11182                           tblptrl	equ	0xFF6
 11183                           tablat	equ	0xFF5
 11184                           prodh	equ	0xFF4
 11185                           prodl	equ	0xFF3
 11186                           intcon	equ	0xFF2
 11187                           intcon2	equ	0xFF1
 11188                           intcon3	equ	0xFF0
 11189                           indf0	equ	0xFEF
 11190                           postinc0	equ	0xFEE
 11191                           fsr0h	equ	0xFEA
 11192                           fsr0l	equ	0xFE9
 11193                           wreg	equ	0xFE8
 11194                           postdec1	equ	0xFE5
 11195                           fsr1h	equ	0xFE2
 11196                           fsr1l	equ	0xFE1
 11197                           indf2	equ	0xFDF
 11198                           postinc2	equ	0xFDE
 11199                           postdec2	equ	0xFDD
 11200                           fsr2h	equ	0xFDA
 11201                           fsr2l	equ	0xFD9
 11202                           status	equ	0xFD8
 11203                           
 11204 ;; *************** function _change_state_to_menu_11 *****************
 11205 ;; Defined at:
 11206 ;;		line 424 in file "UI.c"
 11207 ;; Parameters:    Size  Location     Type
 11208 ;;		None
 11209 ;; Auto vars:     Size  Location     Type
 11210 ;;		None
 11211 ;; Return value:  Size  Location     Type
 11212 ;;                  1    wreg      void 
 11213 ;; Registers used:
 11214 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11215 ;; Tracked objects:
 11216 ;;		On entry : 0/0
 11217 ;;		On exit  : 0/0
 11218 ;;		Unchanged: 0/0
 11219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11224 ;;Total ram usage:        0 bytes
 11225 ;; Hardware stack levels used:    1
 11226 ;; Hardware stack levels required when called:    3
 11227 ;; This function calls:
 11228 ;;		i2_lcdInst
 11229 ;;		i2_printf
 11230 ;; This function is called by:
 11231 ;;		_updateMenu
 11232 ;;		_inputHandler
 11233 ;; This function uses a non-reentrant model
 11234 ;;
 11235                           
 11236                           	psect	text53
 11237  002630                     __ptext53:
 11238                           	opt stack 0
 11239  002630                     _change_state_to_menu_11:
 11240                           	opt stack 18
 11241                           
 11242                           ;UI.c: 425: cur_state = 11;
 11243                           
 11244                           ;incstack = 0
 11245  002630  0E00               	movlw	0
 11246  002632  0100               	movlb	0	; () banked
 11247  002634  6FE2               	movwf	(_cur_state+1)& (0+255),b
 11248  002636  0E0B               	movlw	11
 11249  002638  6FE1               	movwf	_cur_state& (0+255),b
 11250                           
 11251                           ; BSR set to: 0
 11252                           ;UI.c: 427: lcdInst(0b10000000);;
 11253  00263A  0E80               	movlw	128
 11254  00263C  EC05  F015         	call	i2_lcdInst
 11255                           
 11256                           ;UI.c: 428: printf("1. DATE/TIME   <");
 11257  002640  0E75               	movlw	low STR_16
 11258  002642  6E0D               	movwf	i2printf@f,c
 11259  002644  0EFF               	movlw	high STR_16
 11260  002646  6E0E               	movwf	i2printf@f+1,c
 11261  002648  ECC0  F004         	call	i2_printf	;wreg free
 11262                           
 11263                           ;UI.c: 429: lcdInst(0b11000000);;
 11264  00264C  0EC0               	movlw	192
 11265  00264E  EC05  F015         	call	i2_lcdInst
 11266                           
 11267                           ;UI.c: 430: printf("2. SORT         ");
 11268  002652  0E76               	movlw	low STR_17
 11269  002654  6E0D               	movwf	i2printf@f,c
 11270  002656  0EFE               	movlw	high STR_17
 11271  002658  6E0E               	movwf	i2printf@f+1,c
 11272  00265A  ECC0  F004         	call	i2_printf	;wreg free
 11273  00265E  0012               	return		;funcret
 11274  002660                     __end_of_change_state_to_menu_11:
 11275                           	opt stack 0
 11276                           pclatu	equ	0xFFB
 11277                           pclath	equ	0xFFA
 11278                           tblptru	equ	0xFF8
 11279                           tblptrh	equ	0xFF7
 11280                           tblptrl	equ	0xFF6
 11281                           tablat	equ	0xFF5
 11282                           prodh	equ	0xFF4
 11283                           prodl	equ	0xFF3
 11284                           intcon	equ	0xFF2
 11285                           intcon2	equ	0xFF1
 11286                           intcon3	equ	0xFF0
 11287                           indf0	equ	0xFEF
 11288                           postinc0	equ	0xFEE
 11289                           fsr0h	equ	0xFEA
 11290                           fsr0l	equ	0xFE9
 11291                           wreg	equ	0xFE8
 11292                           postdec1	equ	0xFE5
 11293                           fsr1h	equ	0xFE2
 11294                           fsr1l	equ	0xFE1
 11295                           indf2	equ	0xFDF
 11296                           postinc2	equ	0xFDE
 11297                           postdec2	equ	0xFDD
 11298                           fsr2h	equ	0xFDA
 11299                           fsr2l	equ	0xFD9
 11300                           status	equ	0xFD8
 11301                           
 11302 ;; *************** function _change_state_to_logs_34 *****************
 11303 ;; Defined at:
 11304 ;;		line 491 in file "UI.c"
 11305 ;; Parameters:    Size  Location     Type
 11306 ;;		None
 11307 ;; Auto vars:     Size  Location     Type
 11308 ;;		None
 11309 ;; Return value:  Size  Location     Type
 11310 ;;                  1    wreg      void 
 11311 ;; Registers used:
 11312 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11313 ;; Tracked objects:
 11314 ;;		On entry : 0/0
 11315 ;;		On exit  : 0/0
 11316 ;;		Unchanged: 0/0
 11317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11321 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11322 ;;Total ram usage:        0 bytes
 11323 ;; Hardware stack levels used:    1
 11324 ;; Hardware stack levels required when called:    3
 11325 ;; This function calls:
 11326 ;;		i2_lcdInst
 11327 ;;		i2_printf
 11328 ;; This function is called by:
 11329 ;;		_updateMenu
 11330 ;;		_inputHandler
 11331 ;; This function uses a non-reentrant model
 11332 ;;
 11333                           
 11334                           	psect	text54
 11335  002660                     __ptext54:
 11336                           	opt stack 0
 11337  002660                     _change_state_to_logs_34:
 11338                           	opt stack 18
 11339                           
 11340                           ;UI.c: 492: cur_state = 1034;
 11341                           
 11342                           ;incstack = 0
 11343  002660  0E04               	movlw	4
 11344  002662  0100               	movlb	0	; () banked
 11345  002664  6FE2               	movwf	(_cur_state+1)& (0+255),b
 11346  002666  0E0A               	movlw	10
 11347  002668  6FE1               	movwf	_cur_state& (0+255),b
 11348                           
 11349                           ; BSR set to: 0
 11350                           ;UI.c: 493: lcdInst(0b10000000);;
 11351  00266A  0E80               	movlw	128
 11352  00266C  EC05  F015         	call	i2_lcdInst
 11353                           
 11354                           ;UI.c: 494: printf("LOG 3           ");
 11355  002670  0E43               	movlw	low STR_29
 11356  002672  6E0D               	movwf	i2printf@f,c
 11357  002674  0EFE               	movlw	high STR_29
 11358  002676  6E0E               	movwf	i2printf@f+1,c
 11359  002678  ECC0  F004         	call	i2_printf	;wreg free
 11360                           
 11361                           ;UI.c: 495: lcdInst(0b11000000);;
 11362  00267C  0EC0               	movlw	192
 11363  00267E  EC05  F015         	call	i2_lcdInst
 11364                           
 11365                           ;UI.c: 496: printf("LOG 4          <");
 11366  002682  0E42               	movlw	low STR_35
 11367  002684  6E0D               	movwf	i2printf@f,c
 11368  002686  0EFF               	movlw	high STR_35
 11369  002688  6E0E               	movwf	i2printf@f+1,c
 11370  00268A  ECC0  F004         	call	i2_printf	;wreg free
 11371  00268E  0012               	return		;funcret
 11372  002690                     __end_of_change_state_to_logs_34:
 11373                           	opt stack 0
 11374                           pclatu	equ	0xFFB
 11375                           pclath	equ	0xFFA
 11376                           tblptru	equ	0xFF8
 11377                           tblptrh	equ	0xFF7
 11378                           tblptrl	equ	0xFF6
 11379                           tablat	equ	0xFF5
 11380                           prodh	equ	0xFF4
 11381                           prodl	equ	0xFF3
 11382                           intcon	equ	0xFF2
 11383                           intcon2	equ	0xFF1
 11384                           intcon3	equ	0xFF0
 11385                           indf0	equ	0xFEF
 11386                           postinc0	equ	0xFEE
 11387                           fsr0h	equ	0xFEA
 11388                           fsr0l	equ	0xFE9
 11389                           wreg	equ	0xFE8
 11390                           postdec1	equ	0xFE5
 11391                           fsr1h	equ	0xFE2
 11392                           fsr1l	equ	0xFE1
 11393                           indf2	equ	0xFDF
 11394                           postinc2	equ	0xFDE
 11395                           postdec2	equ	0xFDD
 11396                           fsr2h	equ	0xFDA
 11397                           fsr2l	equ	0xFD9
 11398                           status	equ	0xFD8
 11399                           
 11400 ;; *************** function _change_state_to_logs_33 *****************
 11401 ;; Defined at:
 11402 ;;		line 484 in file "UI.c"
 11403 ;; Parameters:    Size  Location     Type
 11404 ;;		None
 11405 ;; Auto vars:     Size  Location     Type
 11406 ;;		None
 11407 ;; Return value:  Size  Location     Type
 11408 ;;                  1    wreg      void 
 11409 ;; Registers used:
 11410 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11411 ;; Tracked objects:
 11412 ;;		On entry : 0/0
 11413 ;;		On exit  : 0/0
 11414 ;;		Unchanged: 0/0
 11415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11419 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11420 ;;Total ram usage:        0 bytes
 11421 ;; Hardware stack levels used:    1
 11422 ;; Hardware stack levels required when called:    3
 11423 ;; This function calls:
 11424 ;;		i2_lcdInst
 11425 ;;		i2_printf
 11426 ;; This function is called by:
 11427 ;;		_updateMenu
 11428 ;;		_inputHandler
 11429 ;; This function uses a non-reentrant model
 11430 ;;
 11431                           
 11432                           	psect	text55
 11433  002690                     __ptext55:
 11434                           	opt stack 0
 11435  002690                     _change_state_to_logs_33:
 11436                           	opt stack 18
 11437                           
 11438                           ;UI.c: 485: cur_state = 1033;
 11439                           
 11440                           ;incstack = 0
 11441  002690  0E04               	movlw	4
 11442  002692  0100               	movlb	0	; () banked
 11443  002694  6FE2               	movwf	(_cur_state+1)& (0+255),b
 11444  002696  0E09               	movlw	9
 11445  002698  6FE1               	movwf	_cur_state& (0+255),b
 11446                           
 11447                           ; BSR set to: 0
 11448                           ;UI.c: 486: lcdInst(0b10000000);;
 11449  00269A  0E80               	movlw	128
 11450  00269C  EC05  F015         	call	i2_lcdInst
 11451                           
 11452                           ;UI.c: 487: printf("LOG 3          <");
 11453  0026A0  0E31               	movlw	low STR_31
 11454  0026A2  6E0D               	movwf	i2printf@f,c
 11455  0026A4  0EFF               	movlw	high STR_31
 11456  0026A6  6E0E               	movwf	i2printf@f+1,c
 11457  0026A8  ECC0  F004         	call	i2_printf	;wreg free
 11458                           
 11459                           ;UI.c: 488: lcdInst(0b11000000);;
 11460  0026AC  0EC0               	movlw	192
 11461  0026AE  EC05  F015         	call	i2_lcdInst
 11462                           
 11463                           ;UI.c: 489: printf("LOG 4           ");
 11464  0026B2  0E54               	movlw	low STR_33
 11465  0026B4  6E0D               	movwf	i2printf@f,c
 11466  0026B6  0EFE               	movlw	high STR_33
 11467  0026B8  6E0E               	movwf	i2printf@f+1,c
 11468  0026BA  ECC0  F004         	call	i2_printf	;wreg free
 11469  0026BE  0012               	return		;funcret
 11470  0026C0                     __end_of_change_state_to_logs_33:
 11471                           	opt stack 0
 11472                           pclatu	equ	0xFFB
 11473                           pclath	equ	0xFFA
 11474                           tblptru	equ	0xFF8
 11475                           tblptrh	equ	0xFF7
 11476                           tblptrl	equ	0xFF6
 11477                           tablat	equ	0xFF5
 11478                           prodh	equ	0xFF4
 11479                           prodl	equ	0xFF3
 11480                           intcon	equ	0xFF2
 11481                           intcon2	equ	0xFF1
 11482                           intcon3	equ	0xFF0
 11483                           indf0	equ	0xFEF
 11484                           postinc0	equ	0xFEE
 11485                           fsr0h	equ	0xFEA
 11486                           fsr0l	equ	0xFE9
 11487                           wreg	equ	0xFE8
 11488                           postdec1	equ	0xFE5
 11489                           fsr1h	equ	0xFE2
 11490                           fsr1l	equ	0xFE1
 11491                           indf2	equ	0xFDF
 11492                           postinc2	equ	0xFDE
 11493                           postdec2	equ	0xFDD
 11494                           fsr2h	equ	0xFDA
 11495                           fsr2l	equ	0xFD9
 11496                           status	equ	0xFD8
 11497                           
 11498 ;; *************** function _change_state_to_logs_23 *****************
 11499 ;; Defined at:
 11500 ;;		line 477 in file "UI.c"
 11501 ;; Parameters:    Size  Location     Type
 11502 ;;		None
 11503 ;; Auto vars:     Size  Location     Type
 11504 ;;		None
 11505 ;; Return value:  Size  Location     Type
 11506 ;;                  1    wreg      void 
 11507 ;; Registers used:
 11508 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11509 ;; Tracked objects:
 11510 ;;		On entry : 0/0
 11511 ;;		On exit  : 0/0
 11512 ;;		Unchanged: 0/0
 11513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11517 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11518 ;;Total ram usage:        0 bytes
 11519 ;; Hardware stack levels used:    1
 11520 ;; Hardware stack levels required when called:    3
 11521 ;; This function calls:
 11522 ;;		i2_lcdInst
 11523 ;;		i2_printf
 11524 ;; This function is called by:
 11525 ;;		_updateMenu
 11526 ;;		_inputHandler
 11527 ;; This function uses a non-reentrant model
 11528 ;;
 11529                           
 11530                           	psect	text56
 11531  0027AC                     __ptext56:
 11532                           	opt stack 0
 11533  0027AC                     _change_state_to_logs_23:
 11534                           	opt stack 18
 11535                           
 11536                           ;UI.c: 478: cur_state = 1023;
 11537                           
 11538                           ;incstack = 0
 11539  0027AC  0E03               	movlw	3
 11540  0027AE  0100               	movlb	0	; () banked
 11541  0027B0  6FE2               	movwf	(_cur_state+1)& (0+255),b
 11542  0027B2  69E1               	setf	_cur_state& (0+255),b
 11543                           
 11544                           ; BSR set to: 0
 11545                           ;UI.c: 479: lcdInst(0b10000000);;
 11546  0027B4  0E80               	movlw	128
 11547  0027B6  EC05  F015         	call	i2_lcdInst
 11548                           
 11549                           ;UI.c: 480: printf("LOG 2           ");
 11550  0027BA  0E32               	movlw	low STR_25
 11551  0027BC  6E0D               	movwf	i2printf@f,c
 11552  0027BE  0EFE               	movlw	high STR_25
 11553  0027C0  6E0E               	movwf	i2printf@f+1,c
 11554  0027C2  ECC0  F004         	call	i2_printf	;wreg free
 11555                           
 11556                           ;UI.c: 481: lcdInst(0b11000000);;
 11557  0027C6  0EC0               	movlw	192
 11558  0027C8  EC05  F015         	call	i2_lcdInst
 11559                           
 11560                           ;UI.c: 482: printf("LOG 3          <");
 11561  0027CC  0E31               	movlw	low STR_31
 11562  0027CE  6E0D               	movwf	i2printf@f,c
 11563  0027D0  0EFF               	movlw	high STR_31
 11564  0027D2  6E0E               	movwf	i2printf@f+1,c
 11565  0027D4  ECC0  F004         	call	i2_printf	;wreg free
 11566  0027D8  0012               	return		;funcret
 11567  0027DA                     __end_of_change_state_to_logs_23:
 11568                           	opt stack 0
 11569                           pclatu	equ	0xFFB
 11570                           pclath	equ	0xFFA
 11571                           tblptru	equ	0xFF8
 11572                           tblptrh	equ	0xFF7
 11573                           tblptrl	equ	0xFF6
 11574                           tablat	equ	0xFF5
 11575                           prodh	equ	0xFF4
 11576                           prodl	equ	0xFF3
 11577                           intcon	equ	0xFF2
 11578                           intcon2	equ	0xFF1
 11579                           intcon3	equ	0xFF0
 11580                           indf0	equ	0xFEF
 11581                           postinc0	equ	0xFEE
 11582                           fsr0h	equ	0xFEA
 11583                           fsr0l	equ	0xFE9
 11584                           wreg	equ	0xFE8
 11585                           postdec1	equ	0xFE5
 11586                           fsr1h	equ	0xFE2
 11587                           fsr1l	equ	0xFE1
 11588                           indf2	equ	0xFDF
 11589                           postinc2	equ	0xFDE
 11590                           postdec2	equ	0xFDD
 11591                           fsr2h	equ	0xFDA
 11592                           fsr2l	equ	0xFD9
 11593                           status	equ	0xFD8
 11594                           
 11595 ;; *************** function _change_state_to_logs_22 *****************
 11596 ;; Defined at:
 11597 ;;		line 470 in file "UI.c"
 11598 ;; Parameters:    Size  Location     Type
 11599 ;;		None
 11600 ;; Auto vars:     Size  Location     Type
 11601 ;;		None
 11602 ;; Return value:  Size  Location     Type
 11603 ;;                  1    wreg      void 
 11604 ;; Registers used:
 11605 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11606 ;; Tracked objects:
 11607 ;;		On entry : 0/0
 11608 ;;		On exit  : 0/0
 11609 ;;		Unchanged: 0/0
 11610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11615 ;;Total ram usage:        0 bytes
 11616 ;; Hardware stack levels used:    1
 11617 ;; Hardware stack levels required when called:    3
 11618 ;; This function calls:
 11619 ;;		i2_lcdInst
 11620 ;;		i2_printf
 11621 ;; This function is called by:
 11622 ;;		_updateMenu
 11623 ;;		_inputHandler
 11624 ;; This function uses a non-reentrant model
 11625 ;;
 11626                           
 11627                           	psect	text57
 11628  0026C0                     __ptext57:
 11629                           	opt stack 0
 11630  0026C0                     _change_state_to_logs_22:
 11631                           	opt stack 18
 11632                           
 11633                           ;UI.c: 471: cur_state = 1022;
 11634                           
 11635                           ;incstack = 0
 11636  0026C0  0E03               	movlw	3
 11637  0026C2  0100               	movlb	0	; () banked
 11638  0026C4  6FE2               	movwf	(_cur_state+1)& (0+255),b
 11639  0026C6  0EFE               	movlw	254
 11640  0026C8  6FE1               	movwf	_cur_state& (0+255),b
 11641                           
 11642                           ; BSR set to: 0
 11643                           ;UI.c: 472: lcdInst(0b10000000);;
 11644  0026CA  0E80               	movlw	128
 11645  0026CC  EC05  F015         	call	i2_lcdInst
 11646                           
 11647                           ;UI.c: 473: printf("LOG 2          <");
 11648  0026D0  0E20               	movlw	low STR_27
 11649  0026D2  6E0D               	movwf	i2printf@f,c
 11650  0026D4  0EFF               	movlw	high STR_27
 11651  0026D6  6E0E               	movwf	i2printf@f+1,c
 11652  0026D8  ECC0  F004         	call	i2_printf	;wreg free
 11653                           
 11654                           ;UI.c: 474: lcdInst(0b11000000);;
 11655  0026DC  0EC0               	movlw	192
 11656  0026DE  EC05  F015         	call	i2_lcdInst
 11657                           
 11658                           ;UI.c: 475: printf("LOG 3           ");
 11659  0026E2  0E43               	movlw	low STR_29
 11660  0026E4  6E0D               	movwf	i2printf@f,c
 11661  0026E6  0EFE               	movlw	high STR_29
 11662  0026E8  6E0E               	movwf	i2printf@f+1,c
 11663  0026EA  ECC0  F004         	call	i2_printf	;wreg free
 11664  0026EE  0012               	return		;funcret
 11665  0026F0                     __end_of_change_state_to_logs_22:
 11666                           	opt stack 0
 11667                           pclatu	equ	0xFFB
 11668                           pclath	equ	0xFFA
 11669                           tblptru	equ	0xFF8
 11670                           tblptrh	equ	0xFF7
 11671                           tblptrl	equ	0xFF6
 11672                           tablat	equ	0xFF5
 11673                           prodh	equ	0xFF4
 11674                           prodl	equ	0xFF3
 11675                           intcon	equ	0xFF2
 11676                           intcon2	equ	0xFF1
 11677                           intcon3	equ	0xFF0
 11678                           indf0	equ	0xFEF
 11679                           postinc0	equ	0xFEE
 11680                           fsr0h	equ	0xFEA
 11681                           fsr0l	equ	0xFE9
 11682                           wreg	equ	0xFE8
 11683                           postdec1	equ	0xFE5
 11684                           fsr1h	equ	0xFE2
 11685                           fsr1l	equ	0xFE1
 11686                           indf2	equ	0xFDF
 11687                           postinc2	equ	0xFDE
 11688                           postdec2	equ	0xFDD
 11689                           fsr2h	equ	0xFDA
 11690                           fsr2l	equ	0xFD9
 11691                           status	equ	0xFD8
 11692                           
 11693 ;; *************** function _change_state_to_logs_12 *****************
 11694 ;; Defined at:
 11695 ;;		line 463 in file "UI.c"
 11696 ;; Parameters:    Size  Location     Type
 11697 ;;		None
 11698 ;; Auto vars:     Size  Location     Type
 11699 ;;		None
 11700 ;; Return value:  Size  Location     Type
 11701 ;;                  1    wreg      void 
 11702 ;; Registers used:
 11703 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11704 ;; Tracked objects:
 11705 ;;		On entry : 0/0
 11706 ;;		On exit  : 0/0
 11707 ;;		Unchanged: 0/0
 11708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11713 ;;Total ram usage:        0 bytes
 11714 ;; Hardware stack levels used:    1
 11715 ;; Hardware stack levels required when called:    3
 11716 ;; This function calls:
 11717 ;;		i2_lcdInst
 11718 ;;		i2_printf
 11719 ;; This function is called by:
 11720 ;;		_updateMenu
 11721 ;;		_inputHandler
 11722 ;; This function uses a non-reentrant model
 11723 ;;
 11724                           
 11725                           	psect	text58
 11726  0026F0                     __ptext58:
 11727                           	opt stack 0
 11728  0026F0                     _change_state_to_logs_12:
 11729                           	opt stack 18
 11730                           
 11731                           ;UI.c: 464: cur_state = 1012;
 11732                           
 11733                           ;incstack = 0
 11734  0026F0  0E03               	movlw	3
 11735  0026F2  0100               	movlb	0	; () banked
 11736  0026F4  6FE2               	movwf	(_cur_state+1)& (0+255),b
 11737  0026F6  0EF4               	movlw	244
 11738  0026F8  6FE1               	movwf	_cur_state& (0+255),b
 11739                           
 11740                           ; BSR set to: 0
 11741                           ;UI.c: 465: lcdInst(0b10000000);;
 11742  0026FA  0E80               	movlw	128
 11743  0026FC  EC05  F015         	call	i2_lcdInst
 11744                           
 11745                           ;UI.c: 466: printf("LOG 1           ");
 11746  002700  0E21               	movlw	low STR_26
 11747  002702  6E0D               	movwf	i2printf@f,c
 11748  002704  0EFE               	movlw	high STR_26
 11749  002706  6E0E               	movwf	i2printf@f+1,c
 11750  002708  ECC0  F004         	call	i2_printf	;wreg free
 11751                           
 11752                           ;UI.c: 467: lcdInst(0b11000000);;
 11753  00270C  0EC0               	movlw	192
 11754  00270E  EC05  F015         	call	i2_lcdInst
 11755                           
 11756                           ;UI.c: 468: printf("LOG 2          <");
 11757  002712  0E20               	movlw	low STR_27
 11758  002714  6E0D               	movwf	i2printf@f,c
 11759  002716  0EFF               	movlw	high STR_27
 11760  002718  6E0E               	movwf	i2printf@f+1,c
 11761  00271A  ECC0  F004         	call	i2_printf	;wreg free
 11762  00271E  0012               	return		;funcret
 11763  002720                     __end_of_change_state_to_logs_12:
 11764                           	opt stack 0
 11765                           pclatu	equ	0xFFB
 11766                           pclath	equ	0xFFA
 11767                           tblptru	equ	0xFF8
 11768                           tblptrh	equ	0xFF7
 11769                           tblptrl	equ	0xFF6
 11770                           tablat	equ	0xFF5
 11771                           prodh	equ	0xFF4
 11772                           prodl	equ	0xFF3
 11773                           intcon	equ	0xFF2
 11774                           intcon2	equ	0xFF1
 11775                           intcon3	equ	0xFF0
 11776                           indf0	equ	0xFEF
 11777                           postinc0	equ	0xFEE
 11778                           fsr0h	equ	0xFEA
 11779                           fsr0l	equ	0xFE9
 11780                           wreg	equ	0xFE8
 11781                           postdec1	equ	0xFE5
 11782                           fsr1h	equ	0xFE2
 11783                           fsr1l	equ	0xFE1
 11784                           indf2	equ	0xFDF
 11785                           postinc2	equ	0xFDE
 11786                           postdec2	equ	0xFDD
 11787                           fsr2h	equ	0xFDA
 11788                           fsr2l	equ	0xFD9
 11789                           status	equ	0xFD8
 11790                           
 11791 ;; *************** function _change_state_to_logs_11 *****************
 11792 ;; Defined at:
 11793 ;;		line 456 in file "UI.c"
 11794 ;; Parameters:    Size  Location     Type
 11795 ;;		None
 11796 ;; Auto vars:     Size  Location     Type
 11797 ;;		None
 11798 ;; Return value:  Size  Location     Type
 11799 ;;                  1    wreg      void 
 11800 ;; Registers used:
 11801 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11802 ;; Tracked objects:
 11803 ;;		On entry : 0/0
 11804 ;;		On exit  : 0/0
 11805 ;;		Unchanged: 0/0
 11806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11811 ;;Total ram usage:        0 bytes
 11812 ;; Hardware stack levels used:    1
 11813 ;; Hardware stack levels required when called:    3
 11814 ;; This function calls:
 11815 ;;		i2_lcdInst
 11816 ;;		i2_printf
 11817 ;; This function is called by:
 11818 ;;		_updateMenu
 11819 ;;		_inputHandler
 11820 ;; This function uses a non-reentrant model
 11821 ;;
 11822                           
 11823                           	psect	text59
 11824  002720                     __ptext59:
 11825                           	opt stack 0
 11826  002720                     _change_state_to_logs_11:
 11827                           	opt stack 18
 11828                           
 11829                           ;UI.c: 457: cur_state = 1011;
 11830                           
 11831                           ;incstack = 0
 11832  002720  0E03               	movlw	3
 11833  002722  0100               	movlb	0	; () banked
 11834  002724  6FE2               	movwf	(_cur_state+1)& (0+255),b
 11835  002726  0EF3               	movlw	243
 11836  002728  6FE1               	movwf	_cur_state& (0+255),b
 11837                           
 11838                           ; BSR set to: 0
 11839                           ;UI.c: 458: lcdInst(0b10000000);;
 11840  00272A  0E80               	movlw	128
 11841  00272C  EC05  F015         	call	i2_lcdInst
 11842                           
 11843                           ;UI.c: 459: printf("LOG 1          <");
 11844  002730  0E0F               	movlw	low STR_24
 11845  002732  6E0D               	movwf	i2printf@f,c
 11846  002734  0EFF               	movlw	high STR_24
 11847  002736  6E0E               	movwf	i2printf@f+1,c
 11848  002738  ECC0  F004         	call	i2_printf	;wreg free
 11849                           
 11850                           ;UI.c: 460: lcdInst(0b11000000);;
 11851  00273C  0EC0               	movlw	192
 11852  00273E  EC05  F015         	call	i2_lcdInst
 11853                           
 11854                           ;UI.c: 461: printf("LOG 2           ");
 11855  002742  0E32               	movlw	low STR_25
 11856  002744  6E0D               	movwf	i2printf@f,c
 11857  002746  0EFE               	movlw	high STR_25
 11858  002748  6E0E               	movwf	i2printf@f+1,c
 11859  00274A  ECC0  F004         	call	i2_printf	;wreg free
 11860  00274E  0012               	return		;funcret
 11861  002750                     __end_of_change_state_to_logs_11:
 11862                           	opt stack 0
 11863                           pclatu	equ	0xFFB
 11864                           pclath	equ	0xFFA
 11865                           tblptru	equ	0xFF8
 11866                           tblptrh	equ	0xFF7
 11867                           tblptrl	equ	0xFF6
 11868                           tablat	equ	0xFF5
 11869                           prodh	equ	0xFF4
 11870                           prodl	equ	0xFF3
 11871                           intcon	equ	0xFF2
 11872                           intcon2	equ	0xFF1
 11873                           intcon3	equ	0xFF0
 11874                           indf0	equ	0xFEF
 11875                           postinc0	equ	0xFEE
 11876                           fsr0h	equ	0xFEA
 11877                           fsr0l	equ	0xFE9
 11878                           wreg	equ	0xFE8
 11879                           postdec1	equ	0xFE5
 11880                           fsr1h	equ	0xFE2
 11881                           fsr1l	equ	0xFE1
 11882                           indf2	equ	0xFDF
 11883                           postinc2	equ	0xFDE
 11884                           postdec2	equ	0xFDD
 11885                           fsr2h	equ	0xFDA
 11886                           fsr2l	equ	0xFD9
 11887                           status	equ	0xFD8
 11888                           
 11889 ;; *************** function _dispLogs *****************
 11890 ;; Defined at:
 11891 ;;		line 410 in file "UI.c"
 11892 ;; Parameters:    Size  Location     Type
 11893 ;;  myLog           2    0[COMRAM] int 
 11894 ;; Auto vars:     Size  Location     Type
 11895 ;;		None
 11896 ;; Return value:  Size  Location     Type
 11897 ;;                  1    wreg      void 
 11898 ;; Registers used:
 11899 ;;		wreg, status,2
 11900 ;; Tracked objects:
 11901 ;;		On entry : 0/0
 11902 ;;		On exit  : 0/0
 11903 ;;		Unchanged: 0/0
 11904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11905 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11908 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11909 ;;Total ram usage:        2 bytes
 11910 ;; Hardware stack levels used:    1
 11911 ;; This function calls:
 11912 ;;		Nothing
 11913 ;; This function is called by:
 11914 ;;		_updateMenu
 11915 ;; This function uses a non-reentrant model
 11916 ;;
 11917                           
 11918                           	psect	text60
 11919  00299A                     __ptext60:
 11920                           	opt stack 0
 11921  00299A                     _dispLogs:
 11922                           	opt stack 22
 11923                           
 11924                           ;UI.c: 411: logstate = 1;
 11925                           
 11926                           ;incstack = 0
 11927  00299A  0E00               	movlw	0
 11928  00299C  0100               	movlb	0	; () banked
 11929  00299E  6FF0               	movwf	(_logstate+1)& (0+255),b
 11930  0029A0  0E01               	movlw	1
 11931  0029A2  6FEF               	movwf	_logstate& (0+255),b
 11932                           
 11933                           ; BSR set to: 0
 11934                           ;UI.c: 412: log = myLog;
 11935  0029A4  C001  F0ED         	movff	dispLogs@myLog,_log
 11936  0029A8  C002  F0EE         	movff	dispLogs@myLog+1,_log+1
 11937                           
 11938                           ; BSR set to: 0
 11939  0029AC  0012               	return		;funcret
 11940  0029AE                     __end_of_dispLogs:
 11941                           	opt stack 0
 11942                           pclatu	equ	0xFFB
 11943                           pclath	equ	0xFFA
 11944                           tblptru	equ	0xFF8
 11945                           tblptrh	equ	0xFF7
 11946                           tblptrl	equ	0xFF6
 11947                           tablat	equ	0xFF5
 11948                           prodh	equ	0xFF4
 11949                           prodl	equ	0xFF3
 11950                           intcon	equ	0xFF2
 11951                           intcon2	equ	0xFF1
 11952                           intcon3	equ	0xFF0
 11953                           indf0	equ	0xFEF
 11954                           postinc0	equ	0xFEE
 11955                           fsr0h	equ	0xFEA
 11956                           fsr0l	equ	0xFE9
 11957                           wreg	equ	0xFE8
 11958                           postdec1	equ	0xFE5
 11959                           fsr1h	equ	0xFE2
 11960                           fsr1l	equ	0xFE1
 11961                           indf2	equ	0xFDF
 11962                           postinc2	equ	0xFDE
 11963                           postdec2	equ	0xFDD
 11964                           fsr2h	equ	0xFDA
 11965                           fsr2l	equ	0xFD9
 11966                           status	equ	0xFD8
 11967                           
 11968 ;; *************** function _printSortTimer *****************
 11969 ;; Defined at:
 11970 ;;		line 138 in file "sort.c"
 11971 ;; Parameters:    Size  Location     Type
 11972 ;;		None
 11973 ;; Auto vars:     Size  Location     Type
 11974 ;;  i               2   72[COMRAM] int 
 11975 ;;  curTime        14   44[COMRAM] int [7]
 11976 ;;  timeDiff        2   70[COMRAM] unsigned int 
 11977 ;;  sec             2   66[COMRAM] int 
 11978 ;;  min             2   64[COMRAM] int 
 11979 ;;  hour            2   62[COMRAM] int 
 11980 ;;  cur_sec         2   60[COMRAM] unsigned int 
 11981 ;;  start_sec       2   58[COMRAM] unsigned int 
 11982 ;; Return value:  Size  Location     Type
 11983 ;;                  1    wreg      void 
 11984 ;; Registers used:
 11985 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11986 ;; Tracked objects:
 11987 ;;		On entry : 0/0
 11988 ;;		On exit  : 0/0
 11989 ;;		Unchanged: 0/0
 11990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11992 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11993 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11994 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11995 ;;Total ram usage:       33 bytes
 11996 ;; Hardware stack levels used:    1
 11997 ;; Hardware stack levels required when called:    3
 11998 ;; This function calls:
 11999 ;;		i2___lwdiv
 12000 ;;		i2___lwmod
 12001 ;;		i2___wmul
 12002 ;;		i2_getRTC
 12003 ;;		i2_lcdInst
 12004 ;;		i2_printf
 12005 ;; This function is called by:
 12006 ;;		_handler
 12007 ;; This function uses a non-reentrant model
 12008 ;;
 12009                           
 12010                           	psect	text61
 12011  001486                     __ptext61:
 12012                           	opt stack 0
 12013  001486                     _printSortTimer:
 12014                           	opt stack 20
 12015                           
 12016                           ;sort.c: 139: getRTC();
 12017                           
 12018                           ; BSR set to: 0
 12019                           ;incstack = 0
 12020  001486  EC18  F010         	call	i2_getRTC	;wreg free
 12021                           
 12022                           ;sort.c: 140: int curTime[7];
 12023                           ;sort.c: 141: for(int i = 0; i < 7; i++){
 12024  00148A  0E00               	movlw	0
 12025  00148C  6E4A               	movwf	printSortTimer@i+1,c
 12026  00148E  0E00               	movlw	0
 12027  001490  6E49               	movwf	printSortTimer@i,c
 12028  001492                     i2l5804:
 12029  001492  BE4A               	btfsc	printSortTimer@i+1,7,c
 12030  001494  D006               	goto	i2l5808
 12031  001496  504A               	movf	printSortTimer@i+1,w,c
 12032  001498  E131               	bnz	i2l5814
 12033  00149A  0E07               	movlw	7
 12034  00149C  5C49               	subwf	printSortTimer@i,w,c
 12035  00149E  B0D8               	btfsc	status,0,c
 12036  0014A0  D02D               	goto	i2l5814
 12037  0014A2                     i2l5808:
 12038                           
 12039                           ;sort.c: 142: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 12040  0014A2  0ED4               	movlw	low _time
 12041  0014A4  2449               	addwf	printSortTimer@i,w,c
 12042  0014A6  6ED9               	movwf	fsr2l,c
 12043  0014A8  0E00               	movlw	high _time
 12044  0014AA  204A               	addwfc	printSortTimer@i+1,w,c
 12045  0014AC  6EDA               	movwf	fsr2h,c
 12046  0014AE  50DF               	movf	indf2,w,c
 12047  0014B0  6E2A               	movwf	??_printSortTimer& (0+255),c
 12048  0014B2  3A2A               	swapf	??_printSortTimer,f,c
 12049  0014B4  0E0F               	movlw	15
 12050  0014B6  162A               	andwf	??_printSortTimer,f,c
 12051  0014B8  0E0F               	movlw	15
 12052  0014BA  162A               	andwf	??_printSortTimer,f,c
 12053  0014BC  502A               	movf	??_printSortTimer,w,c
 12054  0014BE  0D0A               	mullw	10
 12055  0014C0  0ED4               	movlw	low _time
 12056  0014C2  2449               	addwf	printSortTimer@i,w,c
 12057  0014C4  6ED9               	movwf	fsr2l,c
 12058  0014C6  0E00               	movlw	high _time
 12059  0014C8  204A               	addwfc	printSortTimer@i+1,w,c
 12060  0014CA  6EDA               	movwf	fsr2h,c
 12061  0014CC  50DF               	movf	indf2,w,c
 12062  0014CE  0B0F               	andlw	15
 12063  0014D0  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 12064  0014D2  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 12065  0014D4  50F3               	movf	prodl,w,c
 12066  0014D6  262B               	addwf	??_printSortTimer+1,f,c
 12067  0014D8  50F4               	movf	prodh,w,c
 12068  0014DA  222C               	addwfc	??_printSortTimer+2,f,c
 12069  0014DC  90D8               	bcf	status,0,c
 12070  0014DE  3449               	rlcf	printSortTimer@i,w,c
 12071  0014E0  6ED9               	movwf	fsr2l,c
 12072  0014E2  344A               	rlcf	printSortTimer@i+1,w,c
 12073  0014E4  6EDA               	movwf	fsr2h,c
 12074  0014E6  0E2D               	movlw	low printSortTimer@curTime
 12075  0014E8  26D9               	addwf	fsr2l,f,c
 12076  0014EA  0E00               	movlw	high printSortTimer@curTime
 12077  0014EC  22DA               	addwfc	fsr2h,f,c
 12078  0014EE  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 12079  0014F2  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 12080  0014F6  4A49               	infsnz	printSortTimer@i,f,c
 12081  0014F8  2A4A               	incf	printSortTimer@i+1,f,c
 12082  0014FA  D7CB               	goto	i2l5804
 12083  0014FC                     i2l5814:
 12084                           
 12085                           ;sort.c: 143: }
 12086                           ;sort.c: 144: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 12087  0014FC  C102  F001         	movff	_startTime+2,i2___wmul@multiplier
 12088  001500  C103  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 12089  001504  0E00               	movlw	0
 12090  001506  6E04               	movwf	i2___wmul@multiplicand+1,c
 12091  001508  0E3C               	movlw	60
 12092  00150A  6E03               	movwf	i2___wmul@multiplicand,c
 12093  00150C  EC42  F014         	call	i2___wmul	;wreg free
 12094  001510  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 12095  001514  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 12096  001518  C104  F001         	movff	_startTime+4,i2___wmul@multiplier
 12097  00151C  C105  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 12098  001520  0E0E               	movlw	14
 12099  001522  6E04               	movwf	i2___wmul@multiplicand+1,c
 12100  001524  0E10               	movlw	16
 12101  001526  6E03               	movwf	i2___wmul@multiplicand,c
 12102  001528  EC42  F014         	call	i2___wmul	;wreg free
 12103  00152C  5001               	movf	?i2___wmul,w,c
 12104  00152E  262A               	addwf	??_printSortTimer,f,c
 12105  001530  5002               	movf	?i2___wmul+1,w,c
 12106  001532  222B               	addwfc	??_printSortTimer+1,f,c
 12107  001534  0101               	movlb	1	; () banked
 12108  001536  5100               	movf	_startTime& (0+255),w,b
 12109  001538  242A               	addwf	??_printSortTimer,w,c
 12110  00153A  6E3B               	movwf	printSortTimer@start_sec,c
 12111  00153C  0101               	movlb	1	; () banked
 12112  00153E  5101               	movf	(_startTime+1)& (0+255),w,b
 12113  001540  202B               	addwfc	??_printSortTimer+1,w,c
 12114  001542  6E3C               	movwf	printSortTimer@start_sec+1,c
 12115                           
 12116                           ;sort.c: 145: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 12117  001544  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 12118  001548  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 12119  00154C  0E00               	movlw	0
 12120  00154E  6E04               	movwf	i2___wmul@multiplicand+1,c
 12121  001550  0E3C               	movlw	60
 12122  001552  6E03               	movwf	i2___wmul@multiplicand,c
 12123  001554  EC42  F014         	call	i2___wmul	;wreg free
 12124  001558  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 12125  00155C  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 12126  001560  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 12127  001564  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 12128  001568  0E0E               	movlw	14
 12129  00156A  6E04               	movwf	i2___wmul@multiplicand+1,c
 12130  00156C  0E10               	movlw	16
 12131  00156E  6E03               	movwf	i2___wmul@multiplicand,c
 12132  001570  EC42  F014         	call	i2___wmul	;wreg free
 12133  001574  5001               	movf	?i2___wmul,w,c
 12134  001576  262A               	addwf	??_printSortTimer,f,c
 12135  001578  5002               	movf	?i2___wmul+1,w,c
 12136  00157A  222B               	addwfc	??_printSortTimer+1,f,c
 12137  00157C  502D               	movf	printSortTimer@curTime,w,c
 12138  00157E  242A               	addwf	??_printSortTimer,w,c
 12139  001580  6E3D               	movwf	printSortTimer@cur_sec,c
 12140  001582  502E               	movf	printSortTimer@curTime+1,w,c
 12141  001584  202B               	addwfc	??_printSortTimer+1,w,c
 12142  001586  6E3E               	movwf	printSortTimer@cur_sec+1,c
 12143                           
 12144                           ;sort.c: 146: unsigned int timeDiff = cur_sec - start_sec;
 12145  001588  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 12146  00158C  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 12147  001590  1E2A               	comf	??_printSortTimer,f,c
 12148  001592  1E2B               	comf	??_printSortTimer+1,f,c
 12149  001594  4A2A               	infsnz	??_printSortTimer,f,c
 12150  001596  2A2B               	incf	??_printSortTimer+1,f,c
 12151  001598  503D               	movf	printSortTimer@cur_sec,w,c
 12152  00159A  242A               	addwf	??_printSortTimer,w,c
 12153  00159C  6E47               	movwf	printSortTimer@timeDiff,c
 12154  00159E  503E               	movf	printSortTimer@cur_sec+1,w,c
 12155  0015A0  202B               	addwfc	??_printSortTimer+1,w,c
 12156  0015A2  6E48               	movwf	printSortTimer@timeDiff+1,c
 12157                           
 12158                           ;sort.c: 148: total_time = timeDiff;
 12159  0015A4  C047  F0F1         	movff	printSortTimer@timeDiff,_total_time
 12160  0015A8  C048  F0F2         	movff	printSortTimer@timeDiff+1,_total_time+1
 12161                           
 12162                           ;sort.c: 150: if(timeDiff >= 10){
 12163  0015AC  5048               	movf	printSortTimer@timeDiff+1,w,c
 12164  0015AE  E104               	bnz	i2u460_40
 12165  0015B0  0E0A               	movlw	10
 12166  0015B2  5C47               	subwf	printSortTimer@timeDiff,w,c
 12167  0015B4  A0D8               	btfss	status,0,c
 12168  0015B6  D003               	goto	i2l5824
 12169  0015B8                     i2u460_40:
 12170                           
 12171                           ;sort.c: 151: machine_state = DoneSorting_state;
 12172  0015B8  0E02               	movlw	2
 12173  0015BA  0100               	movlb	0	; () banked
 12174  0015BC  6FF3               	movwf	_machine_state& (0+255),b
 12175  0015BE                     i2l5824:
 12176                           
 12177                           ;sort.c: 153: }
 12178                           ;sort.c: 155: int hour = timeDiff / 3600;
 12179  0015BE  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 12180  0015C2  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 12181  0015C6  0E0E               	movlw	14
 12182  0015C8  6E09               	movwf	i2___lwdiv@divisor+1,c
 12183  0015CA  0E10               	movlw	16
 12184  0015CC  6E08               	movwf	i2___lwdiv@divisor,c
 12185  0015CE  EC73  F011         	call	i2___lwdiv	;wreg free
 12186  0015D2  C006  F03F         	movff	?i2___lwdiv,printSortTimer@hour
 12187  0015D6  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 12188                           
 12189                           ;sort.c: 156: int min = (timeDiff % 3600) / 60;
 12190  0015DA  0E0E               	movlw	14
 12191  0015DC  6E04               	movwf	i2___lwmod@divisor+1,c
 12192  0015DE  0E10               	movlw	16
 12193  0015E0  6E03               	movwf	i2___lwmod@divisor,c
 12194  0015E2  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 12195  0015E6  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 12196  0015EA  EC09  F012         	call	i2___lwmod	;wreg free
 12197  0015EE  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 12198  0015F2  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 12199  0015F6  0E00               	movlw	0
 12200  0015F8  6E09               	movwf	i2___lwdiv@divisor+1,c
 12201  0015FA  0E3C               	movlw	60
 12202  0015FC  6E08               	movwf	i2___lwdiv@divisor,c
 12203  0015FE  EC73  F011         	call	i2___lwdiv	;wreg free
 12204  001602  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 12205  001606  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 12206                           
 12207                           ;sort.c: 157: int sec = (timeDiff % 3600) % 60;
 12208  00160A  0E0E               	movlw	14
 12209  00160C  6E04               	movwf	i2___lwmod@divisor+1,c
 12210  00160E  0E10               	movlw	16
 12211  001610  6E03               	movwf	i2___lwmod@divisor,c
 12212  001612  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 12213  001616  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 12214  00161A  EC09  F012         	call	i2___lwmod	;wreg free
 12215  00161E  C001  F045         	movff	?i2___lwmod,_printSortTimer$2282
 12216  001622  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2282+1
 12217                           
 12218                           ;sort.c: 157: int sec = (timeDiff % 3600) % 60;
 12219  001626  C045  F001         	movff	_printSortTimer$2282,i2___lwmod@dividend
 12220  00162A  C046  F002         	movff	_printSortTimer$2282+1,i2___lwmod@dividend+1
 12221  00162E  0E00               	movlw	0
 12222  001630  6E04               	movwf	i2___lwmod@divisor+1,c
 12223  001632  0E3C               	movlw	60
 12224  001634  6E03               	movwf	i2___lwmod@divisor,c
 12225  001636  EC09  F012         	call	i2___lwmod	;wreg free
 12226  00163A  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 12227  00163E  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 12228                           
 12229                           ;sort.c: 159: lcdInst(0b10000000);;
 12230  001642  0E80               	movlw	128
 12231  001644  EC05  F015         	call	i2_lcdInst
 12232                           
 12233                           ;sort.c: 160: printf("Sorting...");
 12234  001648  0EA8               	movlw	low STR_49
 12235  00164A  6E0D               	movwf	i2printf@f,c
 12236  00164C  0EFF               	movlw	high STR_49
 12237  00164E  6E0E               	movwf	i2printf@f+1,c
 12238  001650  ECC0  F004         	call	i2_printf	;wreg free
 12239                           
 12240                           ;sort.c: 161: lcdInst(0b11000000);;
 12241  001654  0EC0               	movlw	192
 12242  001656  EC05  F015         	call	i2_lcdInst
 12243                           
 12244                           ;sort.c: 162: printf("Time: %02d:%02d:%02d", hour, min, sec);
 12245  00165A  0EE8               	movlw	low STR_2
 12246  00165C  6E0D               	movwf	i2printf@f,c
 12247  00165E  0EFD               	movlw	high STR_2
 12248  001660  6E0E               	movwf	i2printf@f+1,c
 12249  001662  C03F  F00F         	movff	printSortTimer@hour,?i2_printf+2
 12250  001666  C040  F010         	movff	printSortTimer@hour+1,?i2_printf+3
 12251  00166A  C041  F011         	movff	printSortTimer@min,?i2_printf+4
 12252  00166E  C042  F012         	movff	printSortTimer@min+1,?i2_printf+5
 12253  001672  C043  F013         	movff	printSortTimer@sec,?i2_printf+6
 12254  001676  C044  F014         	movff	printSortTimer@sec+1,?i2_printf+7
 12255  00167A  ECC0  F004         	call	i2_printf	;wreg free
 12256  00167E  0012               	return		;funcret
 12257  001680                     __end_of_printSortTimer:
 12258                           	opt stack 0
 12259                           pclatu	equ	0xFFB
 12260                           pclath	equ	0xFFA
 12261                           tblptru	equ	0xFF8
 12262                           tblptrh	equ	0xFF7
 12263                           tblptrl	equ	0xFF6
 12264                           tablat	equ	0xFF5
 12265                           prodh	equ	0xFF4
 12266                           prodl	equ	0xFF3
 12267                           intcon	equ	0xFF2
 12268                           intcon2	equ	0xFF1
 12269                           intcon3	equ	0xFF0
 12270                           indf0	equ	0xFEF
 12271                           postinc0	equ	0xFEE
 12272                           fsr0h	equ	0xFEA
 12273                           fsr0l	equ	0xFE9
 12274                           wreg	equ	0xFE8
 12275                           postdec1	equ	0xFE5
 12276                           fsr1h	equ	0xFE2
 12277                           fsr1l	equ	0xFE1
 12278                           indf2	equ	0xFDF
 12279                           postinc2	equ	0xFDE
 12280                           postdec2	equ	0xFDD
 12281                           fsr2h	equ	0xFDA
 12282                           fsr2l	equ	0xFD9
 12283                           status	equ	0xFD8
 12284                           
 12285 ;; *************** function i2_printf *****************
 12286 ;; Defined at:
 12287 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 12288 ;; Parameters:    Size  Location     Type
 12289 ;;  f               2   12[COMRAM] PTR const unsigned char 
 12290 ;;		 -> STR_50(21), STR_49(11), STR_48(24), STR_35(17), 
 12291 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 12292 ;;		 -> STR_30(17), STR_29(17), STR_28(17), STR_27(17), 
 12293 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(17), 
 12294 ;;		 -> STR_22(17), STR_21(17), STR_20(17), STR_19(17), 
 12295 ;;		 -> STR_18(17), STR_17(17), STR_16(17), STR_15(17), 
 12296 ;;		 -> STR_14(3), STR_13(17), STR_12(17), STR_11(17), 
 12297 ;;		 -> STR_10(17), STR_9(17), STR_8(18), STR_7(10), 
 12298 ;;		 -> STR_6(17), STR_5(7), STR_4(17), STR_3(18), 
 12299 ;;		 -> STR_2(21), STR_1(17), 
 12300 ;; Auto vars:     Size  Location     Type
 12301 ;;  printf          4    0        struct .
 12302 ;;  printf          2   39[COMRAM] int 
 12303 ;;  printf          2   35[COMRAM] unsigned int 
 12304 ;;  printf          2   33[COMRAM] unsigned int 
 12305 ;;  printf          2   31[COMRAM] PTR const unsigned char 
 12306 ;;		 -> STR_51(7), printRTC@month(4), 
 12307 ;;  printf          2   29[COMRAM] PTR void [1]
 12308 ;;		 -> ?i2_printf(2), ?_printf(2), 
 12309 ;;  printf          1   38[COMRAM] char 
 12310 ;;  printf          1   37[COMRAM] unsigned char 
 12311 ;;  printf          1   28[COMRAM] char 
 12312 ;; Return value:  Size  Location     Type
 12313 ;;                  2   12[COMRAM] int 
 12314 ;; Registers used:
 12315 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12316 ;; Tracked objects:
 12317 ;;		On entry : 0/0
 12318 ;;		On exit  : 0/0
 12319 ;;		Unchanged: 0/0
 12320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12321 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12322 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12323 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12324 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12325 ;;Total ram usage:       29 bytes
 12326 ;; Hardware stack levels used:    1
 12327 ;; Hardware stack levels required when called:    2
 12328 ;; This function calls:
 12329 ;;		i2___lwdiv
 12330 ;;		i2___lwmod
 12331 ;;		i2___wmul
 12332 ;;		i2_isdigit
 12333 ;;		i2_putch
 12334 ;; This function is called by:
 12335 ;;		_change_state_to_menu_11
 12336 ;;		_change_state_to_menu_23
 12337 ;;		_change_state_to_logs_11
 12338 ;;		_change_state_to_logs_12
 12339 ;;		_change_state_to_logs_22
 12340 ;;		_change_state_to_logs_23
 12341 ;;		_change_state_to_logs_33
 12342 ;;		_change_state_to_logs_34
 12343 ;;		_printSortTimer
 12344 ;;		i2_change_state_to_menu_start
 12345 ;;		i2_change_state_to_menu_12
 12346 ;;		i2_change_state_to_menu_22
 12347 ;;		i2_printRTC
 12348 ;; This function uses a non-reentrant model
 12349 ;;
 12350                           
 12351                           	psect	text62
 12352  000980                     __ptext62:
 12353                           	opt stack 0
 12354  000980                     i2_printf:
 12355                           	opt stack 19
 12356                           
 12357                           ;doprnt.c: 466: va_list ap;
 12358                           ;doprnt.c: 499: signed char c;
 12359                           ;doprnt.c: 501: int width;
 12360                           ;doprnt.c: 506: signed char prec;
 12361                           ;doprnt.c: 508: unsigned char flag;
 12362                           ;doprnt.c: 523: union {
 12363                           ;doprnt.c: 524: unsigned long vd;
 12364                           ;doprnt.c: 525: double integ;
 12365                           ;doprnt.c: 526: } tmpval;
 12366                           ;doprnt.c: 528: unsigned int val;
 12367                           ;doprnt.c: 529: unsigned len;
 12368                           ;doprnt.c: 530: const char * cp;
 12369                           ;doprnt.c: 533: *ap = __va_start();
 12370                           
 12371                           ;incstack = 0
 12372  000980  0E0F               	movlw	low (?i2_printf+2)
 12373  000982  6E1E               	movwf	i2printf@ap,c
 12374  000984  0E00               	movlw	high (?i2_printf+2)
 12375  000986  6E1F               	movwf	i2printf@ap+1,c
 12376                           
 12377                           ;doprnt.c: 536: while(c = *f++) {
 12378  000988  D190               	goto	i2l4620
 12379  00098A                     i2l4496:
 12380                           
 12381                           ;doprnt.c: 538: if(c != '%')
 12382  00098A  0E25               	movlw	37
 12383  00098C  1827               	xorwf	i2printf@c,w,c
 12384  00098E  B4D8               	btfsc	status,2,c
 12385  000990  D004               	goto	i2l4500
 12386                           
 12387                           ;doprnt.c: 540: {
 12388                           ;doprnt.c: 541: (putch(c) );
 12389  000992  5027               	movf	i2printf@c,w,c
 12390  000994  ECFF  F014         	call	i2_putch
 12391                           
 12392                           ;doprnt.c: 542: continue;
 12393  000998  D188               	goto	i2l4620
 12394  00099A                     i2l4500:
 12395                           
 12396                           ;doprnt.c: 543: }
 12397                           ;doprnt.c: 546: width = 0;
 12398  00099A  0E00               	movlw	0
 12399  00099C  6E29               	movwf	i2printf@width+1,c
 12400  00099E  0E00               	movlw	0
 12401  0009A0  6E28               	movwf	i2printf@width,c
 12402                           
 12403                           ;doprnt.c: 548: flag = 0;
 12404  0009A2  0E00               	movlw	0
 12405  0009A4  6E26               	movwf	i2printf@flag,c
 12406                           
 12407                           ;doprnt.c: 551: switch(*f) {
 12408                           
 12409                           ;doprnt.c: 550: for(;;) {
 12410  0009A6  D003               	goto	i2l4506
 12411  0009A8                     i2l4502:
 12412                           
 12413                           ;doprnt.c: 580: flag |= 0x04;
 12414  0009A8  8426               	bsf	i2printf@flag,2,c
 12415                           
 12416                           ;doprnt.c: 581: f++;
 12417  0009AA  4A0D               	infsnz	i2printf@f,f,c
 12418  0009AC  2A0E               	incf	i2printf@f+1,f,c
 12419  0009AE                     i2l4506:
 12420  0009AE  C00D  FFF6         	movff	i2printf@f,tblptrl
 12421  0009B2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12422  0009B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12423  0009B6  6AF8               	clrf	tblptru,c
 12424  0009B8                     	endif
 12425  0009B8                     	if	0	;tblptru may be non-zero
 12426  0009B8                     	endif
 12427  0009B8  0008               	tblrd		*
 12428  0009BA  50F5               	movf	tablat,w,c
 12429                           
 12430                           ; Switch size 1, requested type "space"
 12431                           ; Number of cases is 1, Range of values is 48 to 48
 12432                           ; switch strategies available:
 12433                           ; Name         Instructions Cycles
 12434                           ; simple_byte            4     3 (average)
 12435                           ;	Chosen strategy is simple_byte
 12436  0009BC  0A30               	xorlw	48	; case 48
 12437  0009BE  B4D8               	btfsc	status,2,c
 12438  0009C0  D7F3               	goto	i2l4502
 12439                           
 12440                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 12441                           
 12442                           ;doprnt.c: 586: }
 12443                           
 12444                           ;doprnt.c: 585: break;
 12445  0009C2  C00D  FFF6         	movff	i2printf@f,tblptrl
 12446  0009C6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12447  0009CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12448  0009CA  6AF8               	clrf	tblptru,c
 12449  0009CC                     	endif
 12450  0009CC                     	if	0	;tblptru may be non-zero
 12451  0009CC                     	endif
 12452  0009CC  0008               	tblrd		*
 12453  0009CE  50F5               	movf	tablat,w,c
 12454  0009D0  EC9C  F014         	call	i2_isdigit
 12455  0009D4  A0D8               	btfss	status,0,c
 12456  0009D6  D0A4               	goto	i2l4552
 12457                           
 12458                           ;doprnt.c: 598: width = 0;
 12459  0009D8  0E00               	movlw	0
 12460  0009DA  6E29               	movwf	i2printf@width+1,c
 12461  0009DC  0E00               	movlw	0
 12462  0009DE  6E28               	movwf	i2printf@width,c
 12463  0009E0                     i2l4512:
 12464                           
 12465                           ;doprnt.c: 600: width *= 10;
 12466  0009E0  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 12467  0009E4  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 12468  0009E8  0E00               	movlw	0
 12469  0009EA  6E04               	movwf	i2___wmul@multiplicand+1,c
 12470  0009EC  0E0A               	movlw	10
 12471  0009EE  6E03               	movwf	i2___wmul@multiplicand,c
 12472  0009F0  EC42  F014         	call	i2___wmul	;wreg free
 12473  0009F4  C001  F028         	movff	?i2___wmul,i2printf@width
 12474  0009F8  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 12475                           
 12476                           ;doprnt.c: 601: width += *f++ - '0';
 12477  0009FC  0ED0               	movlw	208
 12478  0009FE  6E19               	movwf	??i2_printf& (0+255),c
 12479  000A00  0EFF               	movlw	255
 12480  000A02  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 12481  000A04  C00D  FFF6         	movff	i2printf@f,tblptrl
 12482  000A08  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12483  000A0C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12484  000A0C  6AF8               	clrf	tblptru,c
 12485  000A0E                     	endif
 12486  000A0E                     	if	0	;tblptru may be non-zero
 12487  000A0E                     	endif
 12488  000A0E  0008               	tblrd		*
 12489  000A10  50F5               	movf	tablat,w,c
 12490  000A12  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 12491  000A14  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 12492  000A16  5019               	movf	??i2_printf,w,c
 12493  000A18  261B               	addwf	??i2_printf+2,f,c
 12494  000A1A  501A               	movf	??i2_printf+1,w,c
 12495  000A1C  221C               	addwfc	??i2_printf+3,f,c
 12496  000A1E  501B               	movf	??i2_printf+2,w,c
 12497  000A20  2628               	addwf	i2printf@width,f,c
 12498  000A22  501C               	movf	??i2_printf+3,w,c
 12499  000A24  2229               	addwfc	i2printf@width+1,f,c
 12500  000A26  4A0D               	infsnz	i2printf@f,f,c
 12501  000A28  2A0E               	incf	i2printf@f+1,f,c
 12502                           
 12503                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 12504  000A2A  C00D  FFF6         	movff	i2printf@f,tblptrl
 12505  000A2E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12506  000A32                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12507  000A32  6AF8               	clrf	tblptru,c
 12508  000A34                     	endif
 12509  000A34                     	if	0	;tblptru may be non-zero
 12510  000A34                     	endif
 12511  000A34  0008               	tblrd		*
 12512  000A36  50F5               	movf	tablat,w,c
 12513  000A38  EC9C  F014         	call	i2_isdigit
 12514  000A3C  A0D8               	btfss	status,0,c
 12515  000A3E  D070               	goto	i2l4552
 12516  000A40  D7CF               	goto	i2l4512
 12517  000A42                     i2l4520:
 12518                           
 12519                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 12520  000A42  C01E  FFD9         	movff	i2printf@ap,fsr2l
 12521  000A46  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
 12522  000A4A  CFDE F020          	movff	postinc2,i2printf@cp
 12523  000A4E  CFDD F021          	movff	postdec2,i2printf@cp+1
 12524  000A52  0E02               	movlw	2
 12525  000A54  261E               	addwf	i2printf@ap,f,c
 12526  000A56  0E00               	movlw	0
 12527  000A58  221F               	addwfc	i2printf@ap+1,f,c
 12528                           
 12529                           ;doprnt.c: 740: if(!cp)
 12530  000A5A  5020               	movf	i2printf@cp,w,c
 12531  000A5C  1021               	iorwf	i2printf@cp+1,w,c
 12532  000A5E  A4D8               	btfss	status,2,c
 12533  000A60  D004               	goto	i2l4528
 12534                           
 12535                           ;doprnt.c: 741: cp = "(null)";
 12536  000A62  0EBD               	movlw	low STR_51
 12537  000A64  6E20               	movwf	i2printf@cp,c
 12538  000A66  0EFF               	movlw	high STR_51
 12539  000A68  6E21               	movwf	i2printf@cp+1,c
 12540  000A6A                     i2l4528:
 12541                           
 12542                           ;doprnt.c: 745: len = 0;
 12543  000A6A  0E00               	movlw	0
 12544  000A6C  6E25               	movwf	i2printf@len+1,c
 12545  000A6E  0E00               	movlw	0
 12546  000A70  6E24               	movwf	i2printf@len,c
 12547                           
 12548                           ;doprnt.c: 746: while(cp[len])
 12549  000A72  D002               	goto	i2l4532
 12550  000A74                     i2l4530:
 12551                           
 12552                           ;doprnt.c: 747: len++;
 12553  000A74  4A24               	infsnz	i2printf@len,f,c
 12554  000A76  2A25               	incf	i2printf@len+1,f,c
 12555  000A78                     i2l4532:
 12556  000A78  5024               	movf	i2printf@len,w,c
 12557  000A7A  2420               	addwf	i2printf@cp,w,c
 12558  000A7C  6E19               	movwf	??i2_printf& (0+255),c
 12559  000A7E  5025               	movf	i2printf@len+1,w,c
 12560  000A80  2021               	addwfc	i2printf@cp+1,w,c
 12561  000A82  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 12562  000A84  C019  FFF6         	movff	??i2_printf,tblptrl
 12563  000A88  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 12564  000A8C  0E00               	movlw	low (__mediumconst shr (0+16))
 12565  000A8E  6EF8               	movwf	tblptru,c
 12566  000A90  0E0F               	movlw	(high __ramtop+-1)
 12567  000A92  64F7               	cpfsgt	tblptrh,c
 12568  000A94  D003               	bra	i2u302_47
 12569  000A96  0008               	tblrd		*
 12570  000A98  50F5               	movf	tablat,w,c
 12571  000A9A  D005               	bra	i2u302_40
 12572  000A9C                     i2u302_47:
 12573  000A9C  CFF6 FFE9          	movff	tblptrl,fsr0l
 12574  000AA0  CFF7 FFEA          	movff	tblptrh,fsr0h
 12575  000AA4  50EF               	movf	indf0,w,c
 12576  000AA6                     i2u302_40:
 12577  000AA6  0900               	iorlw	0
 12578  000AA8  A4D8               	btfss	status,2,c
 12579  000AAA  D7E4               	goto	i2l4530
 12580                           
 12581                           ;doprnt.c: 757: if(width > len)
 12582  000AAC  5028               	movf	i2printf@width,w,c
 12583  000AAE  5C24               	subwf	i2printf@len,w,c
 12584  000AB0  5029               	movf	i2printf@width+1,w,c
 12585  000AB2  5825               	subwfb	i2printf@len+1,w,c
 12586  000AB4  B0D8               	btfsc	status,0,c
 12587  000AB6  D005               	goto	i2l4538
 12588                           
 12589                           ;doprnt.c: 758: width -= len;
 12590  000AB8  5024               	movf	i2printf@len,w,c
 12591  000ABA  5E28               	subwf	i2printf@width,f,c
 12592  000ABC  5025               	movf	i2printf@len+1,w,c
 12593  000ABE  5A29               	subwfb	i2printf@width+1,f,c
 12594  000AC0  D008               	goto	i2l4542
 12595  000AC2                     i2l4538:
 12596                           
 12597                           ;doprnt.c: 759: else
 12598                           ;doprnt.c: 760: width = 0;
 12599  000AC2  0E00               	movlw	0
 12600  000AC4  6E29               	movwf	i2printf@width+1,c
 12601  000AC6  0E00               	movlw	0
 12602  000AC8  6E28               	movwf	i2printf@width,c
 12603                           
 12604                           ;doprnt.c: 764: while(width--)
 12605  000ACA  D003               	goto	i2l4542
 12606  000ACC                     i2l4540:
 12607                           
 12608                           ;doprnt.c: 765: (putch(' ') );
 12609  000ACC  0E20               	movlw	32
 12610  000ACE  ECFF  F014         	call	i2_putch
 12611  000AD2                     i2l4542:
 12612  000AD2  0628               	decf	i2printf@width,f,c
 12613  000AD4  A0D8               	btfss	status,0,c
 12614  000AD6  0629               	decf	i2printf@width+1,f,c
 12615  000AD8  2828               	incf	i2printf@width,w,c
 12616  000ADA  E1F8               	bnz	i2l4540
 12617  000ADC  2829               	incf	i2printf@width+1,w,c
 12618  000ADE  B4D8               	btfsc	status,2,c
 12619  000AE0  D016               	goto	i2l4548
 12620  000AE2  D7F4               	goto	i2l4540
 12621  000AE4                     i2l4544:
 12622                           
 12623                           ;doprnt.c: 768: (putch(*cp++) );
 12624  000AE4  C020  FFF6         	movff	i2printf@cp,tblptrl
 12625  000AE8  C021  FFF7         	movff	i2printf@cp+1,tblptrh
 12626  000AEC  0E00               	movlw	low (__mediumconst shr (0+16))
 12627  000AEE  6EF8               	movwf	tblptru,c
 12628  000AF0  0E0F               	movlw	(high __ramtop+-1)
 12629  000AF2  64F7               	cpfsgt	tblptrh,c
 12630  000AF4  D003               	bra	i2u306_47
 12631  000AF6  0008               	tblrd		*
 12632  000AF8  50F5               	movf	tablat,w,c
 12633  000AFA  D005               	bra	i2u306_40
 12634  000AFC                     i2u306_47:
 12635  000AFC  CFF6 FFE9          	movff	tblptrl,fsr0l
 12636  000B00  CFF7 FFEA          	movff	tblptrh,fsr0h
 12637  000B04  50EF               	movf	indf0,w,c
 12638  000B06                     i2u306_40:
 12639  000B06  ECFF  F014         	call	i2_putch
 12640  000B0A  4A20               	infsnz	i2printf@cp,f,c
 12641  000B0C  2A21               	incf	i2printf@cp+1,f,c
 12642  000B0E                     i2l4548:
 12643  000B0E  0624               	decf	i2printf@len,f,c
 12644  000B10  A0D8               	btfss	status,0,c
 12645  000B12  0625               	decf	i2printf@len+1,f,c
 12646  000B14  2824               	incf	i2printf@len,w,c
 12647  000B16  E1E6               	bnz	i2l4544
 12648  000B18  2825               	incf	i2printf@len+1,w,c
 12649  000B1A  B4D8               	btfsc	status,2,c
 12650  000B1C  D0C6               	goto	i2l4620
 12651  000B1E  D7E2               	goto	i2l4544
 12652  000B20                     i2l4552:
 12653  000B20  C00D  FFF6         	movff	i2printf@f,tblptrl
 12654  000B24  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12655  000B28  4A0D               	infsnz	i2printf@f,f,c
 12656  000B2A  2A0E               	incf	i2printf@f+1,f,c
 12657  000B2C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12658  000B2C  6AF8               	clrf	tblptru,c
 12659  000B2E                     	endif
 12660  000B2E                     	if	0	;tblptru may be non-zero
 12661  000B2E                     	endif
 12662  000B2E  0008               	tblrd		*
 12663  000B30  CFF5 F027          	movff	tablat,i2printf@c
 12664  000B34  5027               	movf	i2printf@c,w,c
 12665                           
 12666                           ; Switch size 1, requested type "space"
 12667                           ; Number of cases is 4, Range of values is 0 to 115
 12668                           ; switch strategies available:
 12669                           ; Name         Instructions Cycles
 12670                           ; simple_byte           13     7 (average)
 12671                           ;	Chosen strategy is simple_byte
 12672  000B36  0A00               	xorlw	0	; case 0
 12673  000B38  B4D8               	btfsc	status,2,c
 12674  000B3A  0012               	return	
 12675  000B3C  0A64               	xorlw	100	; case 100
 12676  000B3E  B4D8               	btfsc	status,2,c
 12677  000B40  D007               	goto	i2l4554
 12678  000B42  0A0D               	xorlw	13	; case 105
 12679  000B44  B4D8               	btfsc	status,2,c
 12680  000B46  D004               	goto	i2l4554
 12681  000B48  0A1A               	xorlw	26	; case 115
 12682  000B4A  B4D8               	btfsc	status,2,c
 12683  000B4C  D77A               	goto	i2l4520
 12684  000B4E  D0AD               	goto	i2l4620
 12685  000B50                     i2l4554:
 12686                           
 12687                           ;doprnt.c: 1253: {
 12688                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12689  000B50  C01E  FFD9         	movff	i2printf@ap,fsr2l
 12690  000B54  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
 12691  000B58  CFDE F022          	movff	postinc2,i2printf@val
 12692  000B5C  CFDD F023          	movff	postdec2,i2printf@val+1
 12693  000B60  0E02               	movlw	2
 12694  000B62  261E               	addwf	i2printf@ap,f,c
 12695  000B64  0E00               	movlw	0
 12696  000B66  221F               	addwfc	i2printf@ap+1,f,c
 12697                           
 12698                           ;doprnt.c: 1261: if((int)val < 0) {
 12699  000B68  AE23               	btfss	i2printf@val+1,7,c
 12700  000B6A  D006               	goto	i2l4564
 12701                           
 12702                           ;doprnt.c: 1262: flag |= 0x03;
 12703  000B6C  0E03               	movlw	3
 12704  000B6E  1226               	iorwf	i2printf@flag,f,c
 12705                           
 12706                           ;doprnt.c: 1263: val = -val;
 12707  000B70  6C22               	negf	i2printf@val,c
 12708  000B72  1E23               	comf	i2printf@val+1,f,c
 12709  000B74  B0D8               	btfsc	status,0,c
 12710  000B76  2A23               	incf	i2printf@val+1,f,c
 12711  000B78                     i2l4564:
 12712                           
 12713                           ;doprnt.c: 1264: }
 12714                           ;doprnt.c: 1266: }
 12715                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12716  000B78  0E01               	movlw	1
 12717  000B7A  6E27               	movwf	i2printf@c,c
 12718  000B7C                     i2l4566:
 12719  000B7C  0E05               	movlw	5
 12720  000B7E  1827               	xorwf	i2printf@c,w,c
 12721  000B80  B4D8               	btfsc	status,2,c
 12722  000B82  D015               	goto	i2l4578
 12723                           
 12724                           ;doprnt.c: 1306: if(val < dpowers[c])
 12725  000B84  5027               	movf	i2printf@c,w,c
 12726  000B86  0D02               	mullw	2
 12727  000B88  0EC6               	movlw	low _dpowers
 12728  000B8A  24F3               	addwf	prodl,w,c
 12729  000B8C  6EF6               	movwf	tblptrl,c
 12730  000B8E  0EFD               	movlw	high _dpowers
 12731  000B90  20F4               	addwfc	prodh,w,c
 12732  000B92  6EF7               	movwf	tblptrh,c
 12733  000B94                     	if	1	;There are 3 active tblptr bytes
 12734  000B94  6AF8               	clrf	tblptru,c
 12735  000B96  0E00               	movlw	low (__mediumconst shr (0+16))
 12736  000B98  22F8               	addwfc	tblptru,f,c
 12737  000B9A                     	endif
 12738  000B9A  0009               	tblrd		*+
 12739  000B9C  50F5               	movf	tablat,w,c
 12740  000B9E  5C22               	subwf	i2printf@val,w,c
 12741  000BA0  0009               	tblrd		*+
 12742  000BA2  50F5               	movf	tablat,w,c
 12743  000BA4  5823               	subwfb	i2printf@val+1,w,c
 12744  000BA6  A0D8               	btfss	status,0,c
 12745  000BA8  D002               	goto	i2l4578
 12746                           
 12747                           ;doprnt.c: 1307: break;
 12748  000BAA  2A27               	incf	i2printf@c,f,c
 12749  000BAC  D7E7               	goto	i2l4566
 12750  000BAE                     i2l4578:
 12751                           
 12752                           ;doprnt.c: 1345: if(width && flag & 0x03)
 12753  000BAE  5028               	movf	i2printf@width,w,c
 12754  000BB0  1029               	iorwf	i2printf@width+1,w,c
 12755  000BB2  B4D8               	btfsc	status,2,c
 12756  000BB4  D009               	goto	i2l4584
 12757  000BB6  C026  F019         	movff	i2printf@flag,??i2_printf
 12758  000BBA  0E03               	movlw	3
 12759  000BBC  1619               	andwf	??i2_printf,f,c
 12760  000BBE  B4D8               	btfsc	status,2,c
 12761  000BC0  D003               	goto	i2l4584
 12762                           
 12763                           ;doprnt.c: 1346: width--;
 12764  000BC2  0628               	decf	i2printf@width,f,c
 12765  000BC4  A0D8               	btfss	status,0,c
 12766  000BC6  0629               	decf	i2printf@width+1,f,c
 12767  000BC8                     i2l4584:
 12768                           
 12769                           ;doprnt.c: 1381: if(width > c)
 12770  000BC8  0E80               	movlw	128
 12771  000BCA  BE27               	btfsc	i2printf@c,7,c
 12772  000BCC  0E7F               	movlw	127
 12773  000BCE  6E19               	movwf	??i2_printf& (0+255),c
 12774  000BD0  5028               	movf	i2printf@width,w,c
 12775  000BD2  5C27               	subwf	i2printf@c,w,c
 12776  000BD4  5029               	movf	i2printf@width+1,w,c
 12777  000BD6  0A80               	xorlw	128
 12778  000BD8  5819               	subwfb	??i2_printf& (0+255),w,c
 12779  000BDA  B0D8               	btfsc	status,0,c
 12780  000BDC  D007               	goto	i2l4588
 12781                           
 12782                           ;doprnt.c: 1382: width -= c;
 12783  000BDE  5027               	movf	i2printf@c,w,c
 12784  000BE0  5E28               	subwf	i2printf@width,f,c
 12785  000BE2  0E00               	movlw	0
 12786  000BE4  BE27               	btfsc	i2printf@c,7,c
 12787  000BE6  0EFF               	movlw	255
 12788  000BE8  5A29               	subwfb	i2printf@width+1,f,c
 12789  000BEA  D004               	goto	i2l4590
 12790  000BEC                     i2l4588:
 12791                           
 12792                           ;doprnt.c: 1383: else
 12793                           ;doprnt.c: 1384: width = 0;
 12794  000BEC  0E00               	movlw	0
 12795  000BEE  6E29               	movwf	i2printf@width+1,c
 12796  000BF0  0E00               	movlw	0
 12797  000BF2  6E28               	movwf	i2printf@width,c
 12798  000BF4                     i2l4590:
 12799                           
 12800                           ;doprnt.c: 1387: if(flag & 0x04) {
 12801  000BF4  A426               	btfss	i2printf@flag,2,c
 12802  000BF6  D014               	goto	i2l4602
 12803                           
 12804                           ;doprnt.c: 1392: if(flag & 0x03)
 12805  000BF8  C026  F019         	movff	i2printf@flag,??i2_printf
 12806  000BFC  0E03               	movlw	3
 12807  000BFE  1619               	andwf	??i2_printf,f,c
 12808  000C00  B4D8               	btfsc	status,2,c
 12809  000C02  D003               	goto	i2l4596
 12810                           
 12811                           ;doprnt.c: 1393: (putch('-') );
 12812  000C04  0E2D               	movlw	45
 12813  000C06  ECFF  F014         	call	i2_putch
 12814  000C0A                     i2l4596:
 12815                           
 12816                           ;doprnt.c: 1415: if(width)
 12817  000C0A  5028               	movf	i2printf@width,w,c
 12818  000C0C  1029               	iorwf	i2printf@width+1,w,c
 12819  000C0E  B4D8               	btfsc	status,2,c
 12820  000C10  D01E               	goto	i2l4612
 12821                           
 12822                           ;doprnt.c: 1417: (putch('0') );
 12823                           
 12824                           ;doprnt.c: 1416: do
 12825  000C12  0E30               	movlw	48
 12826  000C14  ECFF  F014         	call	i2_putch
 12827                           
 12828                           ;doprnt.c: 1418: while(--width);
 12829  000C18  0628               	decf	i2printf@width,f,c
 12830  000C1A  A0D8               	btfss	status,0,c
 12831  000C1C  0629               	decf	i2printf@width+1,f,c
 12832  000C1E  D7F5               	goto	i2l4596
 12833  000C20                     i2l4602:
 12834                           
 12835                           ;doprnt.c: 1422: {
 12836                           ;doprnt.c: 1424: if(width
 12837                           ;doprnt.c: 1428: )
 12838  000C20  5028               	movf	i2printf@width,w,c
 12839  000C22  1029               	iorwf	i2printf@width+1,w,c
 12840  000C24  B4D8               	btfsc	status,2,c
 12841  000C26  D00A               	goto	i2l4608
 12842  000C28                     i2l4604:
 12843                           
 12844                           ;doprnt.c: 1430: (putch(' ') );
 12845  000C28  0E20               	movlw	32
 12846  000C2A  ECFF  F014         	call	i2_putch
 12847                           
 12848                           ;doprnt.c: 1431: while(--width);
 12849  000C2E  0628               	decf	i2printf@width,f,c
 12850  000C30  A0D8               	btfss	status,0,c
 12851  000C32  0629               	decf	i2printf@width+1,f,c
 12852  000C34  5028               	movf	i2printf@width,w,c
 12853  000C36  1029               	iorwf	i2printf@width+1,w,c
 12854  000C38  A4D8               	btfss	status,2,c
 12855  000C3A  D7F6               	goto	i2l4604
 12856  000C3C                     i2l4608:
 12857                           
 12858                           ;doprnt.c: 1438: if(flag & 0x03)
 12859  000C3C  C026  F019         	movff	i2printf@flag,??i2_printf
 12860  000C40  0E03               	movlw	3
 12861  000C42  1619               	andwf	??i2_printf,f,c
 12862  000C44  B4D8               	btfsc	status,2,c
 12863  000C46  D003               	goto	i2l4612
 12864                           
 12865                           ;doprnt.c: 1439: (putch('-') );
 12866  000C48  0E2D               	movlw	45
 12867  000C4A  ECFF  F014         	call	i2_putch
 12868  000C4E                     i2l4612:
 12869                           
 12870                           ;doprnt.c: 1469: }
 12871                           ;doprnt.c: 1472: prec = c;
 12872  000C4E  C027  F01D         	movff	i2printf@c,i2printf@prec
 12873                           
 12874                           ;doprnt.c: 1474: while(prec--) {
 12875  000C52  D027               	goto	i2l4618
 12876  000C54                     i2l4614:
 12877                           
 12878                           ;doprnt.c: 1478: {
 12879                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 12880  000C54  501D               	movf	i2printf@prec,w,c
 12881  000C56  0D02               	mullw	2
 12882  000C58  0EC6               	movlw	low _dpowers
 12883  000C5A  24F3               	addwf	prodl,w,c
 12884  000C5C  6EF6               	movwf	tblptrl,c
 12885  000C5E  0EFD               	movlw	high _dpowers
 12886  000C60  20F4               	addwfc	prodh,w,c
 12887  000C62  6EF7               	movwf	tblptrh,c
 12888  000C64                     	if	1	;There are 3 active tblptr bytes
 12889  000C64  6AF8               	clrf	tblptru,c
 12890  000C66  0E00               	movlw	low (__mediumconst shr (0+16))
 12891  000C68  22F8               	addwfc	tblptru,f,c
 12892  000C6A                     	endif
 12893  000C6A  0009               	tblrd		*+
 12894  000C6C  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 12895  000C70  000A               	tblrd		*-
 12896  000C72  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 12897  000C76  C022  F006         	movff	i2printf@val,i2___lwdiv@dividend
 12898  000C7A  C023  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 12899  000C7E  EC73  F011         	call	i2___lwdiv	;wreg free
 12900  000C82  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 12901  000C86  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 12902  000C8A  0E00               	movlw	0
 12903  000C8C  6E04               	movwf	i2___lwmod@divisor+1,c
 12904  000C8E  0E0A               	movlw	10
 12905  000C90  6E03               	movwf	i2___lwmod@divisor,c
 12906  000C92  EC09  F012         	call	i2___lwmod	;wreg free
 12907  000C96  5001               	movf	?i2___lwmod,w,c
 12908  000C98  0F30               	addlw	48
 12909  000C9A  6E27               	movwf	i2printf@c,c
 12910                           
 12911                           ;doprnt.c: 1523: }
 12912                           ;doprnt.c: 1524: (putch(c) );
 12913  000C9C  5027               	movf	i2printf@c,w,c
 12914  000C9E  ECFF  F014         	call	i2_putch
 12915  000CA2                     i2l4618:
 12916  000CA2  061D               	decf	i2printf@prec,f,c
 12917  000CA4  281D               	incf	i2printf@prec,w,c
 12918  000CA6  A4D8               	btfss	status,2,c
 12919  000CA8  D7D5               	goto	i2l4614
 12920  000CAA                     i2l4620:
 12921  000CAA  C00D  FFF6         	movff	i2printf@f,tblptrl
 12922  000CAE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12923  000CB2  4A0D               	infsnz	i2printf@f,f,c
 12924  000CB4  2A0E               	incf	i2printf@f+1,f,c
 12925  000CB6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12926  000CB6  6AF8               	clrf	tblptru,c
 12927  000CB8                     	endif
 12928  000CB8                     	if	0	;tblptru may be non-zero
 12929  000CB8                     	endif
 12930  000CB8  0008               	tblrd		*
 12931  000CBA  CFF5 F027          	movff	tablat,i2printf@c
 12932  000CBE  5027               	movf	i2printf@c,w,c
 12933  000CC0  B4D8               	btfsc	status,2,c
 12934  000CC2  0012               	return	
 12935  000CC4  D662               	goto	i2l4496
 12936  000CC6                     __end_ofi2_printf:
 12937                           	opt stack 0
 12938                           pclatu	equ	0xFFB
 12939                           pclath	equ	0xFFA
 12940                           tblptru	equ	0xFF8
 12941                           tblptrh	equ	0xFF7
 12942                           tblptrl	equ	0xFF6
 12943                           tablat	equ	0xFF5
 12944                           prodh	equ	0xFF4
 12945                           prodl	equ	0xFF3
 12946                           intcon	equ	0xFF2
 12947                           intcon2	equ	0xFF1
 12948                           intcon3	equ	0xFF0
 12949                           indf0	equ	0xFEF
 12950                           postinc0	equ	0xFEE
 12951                           fsr0h	equ	0xFEA
 12952                           fsr0l	equ	0xFE9
 12953                           wreg	equ	0xFE8
 12954                           postdec1	equ	0xFE5
 12955                           fsr1h	equ	0xFE2
 12956                           fsr1l	equ	0xFE1
 12957                           indf2	equ	0xFDF
 12958                           postinc2	equ	0xFDE
 12959                           postdec2	equ	0xFDD
 12960                           fsr2h	equ	0xFDA
 12961                           fsr2l	equ	0xFD9
 12962                           status	equ	0xFD8
 12963                           
 12964 ;; *************** function i2_putch *****************
 12965 ;; Defined at:
 12966 ;;		line 19 in file "lcd.c"
 12967 ;; Parameters:    Size  Location     Type
 12968 ;;  data            1    wreg     unsigned char 
 12969 ;; Auto vars:     Size  Location     Type
 12970 ;;  data            1    2[COMRAM] unsigned char 
 12971 ;; Return value:  Size  Location     Type
 12972 ;;                  1    wreg      void 
 12973 ;; Registers used:
 12974 ;;		wreg, status,2, status,0, cstack
 12975 ;; Tracked objects:
 12976 ;;		On entry : 0/0
 12977 ;;		On exit  : 0/0
 12978 ;;		Unchanged: 0/0
 12979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12981 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12983 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12984 ;;Total ram usage:        1 bytes
 12985 ;; Hardware stack levels used:    1
 12986 ;; Hardware stack levels required when called:    1
 12987 ;; This function calls:
 12988 ;;		i2_lcdNibble
 12989 ;; This function is called by:
 12990 ;;		i2_printf
 12991 ;; This function uses a non-reentrant model
 12992 ;;
 12993                           
 12994                           	psect	text63
 12995  0029FE                     __ptext63:
 12996                           	opt stack 0
 12997  0029FE                     i2_putch:
 12998                           	opt stack 19
 12999                           
 13000                           ;incstack = 0
 13001                           ;i2putch@data stored from wreg
 13002  0029FE  6E03               	movwf	i2putch@data,c
 13003                           
 13004                           ;lcd.c: 20: LATDbits.LATD2 = 1;
 13005  002A00  848C               	bsf	3980,2,c	;volatile
 13006                           
 13007                           ;lcd.c: 21: lcdNibble(data);
 13008  002A02  5003               	movf	i2putch@data,w,c
 13009  002A04  EC48  F011         	call	i2_lcdNibble
 13010  002A08  0012               	return		;funcret
 13011  002A0A                     __end_ofi2_putch:
 13012                           	opt stack 0
 13013                           pclatu	equ	0xFFB
 13014                           pclath	equ	0xFFA
 13015                           tblptru	equ	0xFF8
 13016                           tblptrh	equ	0xFF7
 13017                           tblptrl	equ	0xFF6
 13018                           tablat	equ	0xFF5
 13019                           prodh	equ	0xFF4
 13020                           prodl	equ	0xFF3
 13021                           intcon	equ	0xFF2
 13022                           intcon2	equ	0xFF1
 13023                           intcon3	equ	0xFF0
 13024                           indf0	equ	0xFEF
 13025                           postinc0	equ	0xFEE
 13026                           fsr0h	equ	0xFEA
 13027                           fsr0l	equ	0xFE9
 13028                           wreg	equ	0xFE8
 13029                           postdec1	equ	0xFE5
 13030                           fsr1h	equ	0xFE2
 13031                           fsr1l	equ	0xFE1
 13032                           indf2	equ	0xFDF
 13033                           postinc2	equ	0xFDE
 13034                           postdec2	equ	0xFDD
 13035                           fsr2h	equ	0xFDA
 13036                           fsr2l	equ	0xFD9
 13037                           status	equ	0xFD8
 13038                           
 13039 ;; *************** function i2_isdigit *****************
 13040 ;; Defined at:
 13041 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 13042 ;; Parameters:    Size  Location     Type
 13043 ;;  c               1    wreg     unsigned char 
 13044 ;; Auto vars:     Size  Location     Type
 13045 ;;  c               1    2[COMRAM] unsigned char 
 13046 ;; Return value:  Size  Location     Type
 13047 ;;		None               void
 13048 ;; Registers used:
 13049 ;;		wreg, status,2, status,0
 13050 ;; Tracked objects:
 13051 ;;		On entry : 0/0
 13052 ;;		On exit  : 0/0
 13053 ;;		Unchanged: 0/0
 13054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13056 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13057 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13058 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13059 ;;Total ram usage:        3 bytes
 13060 ;; Hardware stack levels used:    1
 13061 ;; This function calls:
 13062 ;;		Nothing
 13063 ;; This function is called by:
 13064 ;;		i2_printf
 13065 ;; This function uses a non-reentrant model
 13066 ;;
 13067                           
 13068                           	psect	text64
 13069  002938                     __ptext64:
 13070                           	opt stack 0
 13071  002938                     i2_isdigit:
 13072                           	opt stack 20
 13073                           
 13074                           ;incstack = 0
 13075                           ;i2isdigit@c stored from wreg
 13076  002938  6E03               	movwf	i2isdigit@c,c
 13077  00293A  0E00               	movlw	0
 13078  00293C  6E02               	movwf	i2_isdigit$1808,c
 13079  00293E  0E3A               	movlw	58
 13080  002940  6003               	cpfslt	i2isdigit@c,c
 13081  002942  D005               	goto	i2l4250
 13082  002944  0E2F               	movlw	47
 13083  002946  6403               	cpfsgt	i2isdigit@c,c
 13084  002948  D002               	goto	i2l4250
 13085  00294A  0E01               	movlw	1
 13086  00294C  6E02               	movwf	i2_isdigit$1808,c
 13087  00294E                     i2l4250:
 13088  00294E  C002  F001         	movff	i2_isdigit$1808,??i2_isdigit
 13089  002952  3001               	rrcf	??i2_isdigit,w,c
 13090  002954  0012               	return	
 13091  002956                     __end_ofi2_isdigit:
 13092                           	opt stack 0
 13093                           pclatu	equ	0xFFB
 13094                           pclath	equ	0xFFA
 13095                           tblptru	equ	0xFF8
 13096                           tblptrh	equ	0xFF7
 13097                           tblptrl	equ	0xFF6
 13098                           tablat	equ	0xFF5
 13099                           prodh	equ	0xFF4
 13100                           prodl	equ	0xFF3
 13101                           intcon	equ	0xFF2
 13102                           intcon2	equ	0xFF1
 13103                           intcon3	equ	0xFF0
 13104                           indf0	equ	0xFEF
 13105                           postinc0	equ	0xFEE
 13106                           fsr0h	equ	0xFEA
 13107                           fsr0l	equ	0xFE9
 13108                           wreg	equ	0xFE8
 13109                           postdec1	equ	0xFE5
 13110                           fsr1h	equ	0xFE2
 13111                           fsr1l	equ	0xFE1
 13112                           indf2	equ	0xFDF
 13113                           postinc2	equ	0xFDE
 13114                           postdec2	equ	0xFDD
 13115                           fsr2h	equ	0xFDA
 13116                           fsr2l	equ	0xFD9
 13117                           status	equ	0xFD8
 13118                           
 13119 ;; *************** function i2___wmul *****************
 13120 ;; Defined at:
 13121 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 13122 ;; Parameters:    Size  Location     Type
 13123 ;;  multiplier      2    0[COMRAM] unsigned int 
 13124 ;;  multiplicand    2    2[COMRAM] unsigned int 
 13125 ;; Auto vars:     Size  Location     Type
 13126 ;;  __wmul          2    4[COMRAM] unsigned int 
 13127 ;; Return value:  Size  Location     Type
 13128 ;;                  2    0[COMRAM] unsigned int 
 13129 ;; Registers used:
 13130 ;;		wreg, status,2, status,0, prodl, prodh
 13131 ;; Tracked objects:
 13132 ;;		On entry : 0/0
 13133 ;;		On exit  : 0/0
 13134 ;;		Unchanged: 0/0
 13135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13136 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13137 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13139 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13140 ;;Total ram usage:        6 bytes
 13141 ;; Hardware stack levels used:    1
 13142 ;; This function calls:
 13143 ;;		Nothing
 13144 ;; This function is called by:
 13145 ;;		_printSortTimer
 13146 ;;		i2_printf
 13147 ;; This function uses a non-reentrant model
 13148 ;;
 13149                           
 13150                           	psect	text65
 13151  002884                     __ptext65:
 13152                           	opt stack 0
 13153  002884                     i2___wmul:
 13154                           	opt stack 20
 13155                           
 13156                           ;incstack = 0
 13157  002884  5001               	movf	i2___wmul@multiplier,w,c
 13158  002886  0203               	mulwf	i2___wmul@multiplicand,c
 13159  002888  CFF3 F005          	movff	prodl,i2___wmul@product
 13160  00288C  CFF4 F006          	movff	prodh,i2___wmul@product+1
 13161  002890  5001               	movf	i2___wmul@multiplier,w,c
 13162  002892  0204               	mulwf	i2___wmul@multiplicand+1,c
 13163  002894  50F3               	movf	prodl,w,c
 13164  002896  2606               	addwf	i2___wmul@product+1,f,c
 13165  002898  5002               	movf	i2___wmul@multiplier+1,w,c
 13166  00289A  0203               	mulwf	i2___wmul@multiplicand,c
 13167  00289C  50F3               	movf	prodl,w,c
 13168  00289E  2606               	addwf	i2___wmul@product+1,f,c
 13169  0028A0  C005  F001         	movff	i2___wmul@product,?i2___wmul
 13170  0028A4  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 13171  0028A8  0012               	return	
 13172  0028AA                     __end_ofi2___wmul:
 13173                           	opt stack 0
 13174                           pclatu	equ	0xFFB
 13175                           pclath	equ	0xFFA
 13176                           tblptru	equ	0xFF8
 13177                           tblptrh	equ	0xFF7
 13178                           tblptrl	equ	0xFF6
 13179                           tablat	equ	0xFF5
 13180                           prodh	equ	0xFF4
 13181                           prodl	equ	0xFF3
 13182                           intcon	equ	0xFF2
 13183                           intcon2	equ	0xFF1
 13184                           intcon3	equ	0xFF0
 13185                           indf0	equ	0xFEF
 13186                           postinc0	equ	0xFEE
 13187                           fsr0h	equ	0xFEA
 13188                           fsr0l	equ	0xFE9
 13189                           wreg	equ	0xFE8
 13190                           postdec1	equ	0xFE5
 13191                           fsr1h	equ	0xFE2
 13192                           fsr1l	equ	0xFE1
 13193                           indf2	equ	0xFDF
 13194                           postinc2	equ	0xFDE
 13195                           postdec2	equ	0xFDD
 13196                           fsr2h	equ	0xFDA
 13197                           fsr2l	equ	0xFD9
 13198                           status	equ	0xFD8
 13199                           
 13200 ;; *************** function i2___lwmod *****************
 13201 ;; Defined at:
 13202 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 13203 ;; Parameters:    Size  Location     Type
 13204 ;;  dividend        2    0[COMRAM] unsigned int 
 13205 ;;  divisor         2    2[COMRAM] unsigned int 
 13206 ;; Auto vars:     Size  Location     Type
 13207 ;;  __lwmod         1    4[COMRAM] unsigned char 
 13208 ;; Return value:  Size  Location     Type
 13209 ;;                  2    0[COMRAM] unsigned int 
 13210 ;; Registers used:
 13211 ;;		wreg, status,2, status,0
 13212 ;; Tracked objects:
 13213 ;;		On entry : 0/0
 13214 ;;		On exit  : 0/0
 13215 ;;		Unchanged: 0/0
 13216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13217 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13218 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13220 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13221 ;;Total ram usage:        5 bytes
 13222 ;; Hardware stack levels used:    1
 13223 ;; This function calls:
 13224 ;;		Nothing
 13225 ;; This function is called by:
 13226 ;;		_printSortTimer
 13227 ;;		i2_printf
 13228 ;; This function uses a non-reentrant model
 13229 ;;
 13230                           
 13231                           	psect	text66
 13232  002412                     __ptext66:
 13233                           	opt stack 0
 13234  002412                     i2___lwmod:
 13235                           	opt stack 20
 13236                           
 13237                           ;incstack = 0
 13238  002412  5003               	movf	i2___lwmod@divisor,w,c
 13239  002414  1004               	iorwf	i2___lwmod@divisor+1,w,c
 13240  002416  B4D8               	btfsc	status,2,c
 13241  002418  D018               	goto	i2l1851
 13242  00241A  0E01               	movlw	1
 13243  00241C  6E05               	movwf	i2___lwmod@counter,c
 13244  00241E  D004               	goto	i2l4282
 13245  002420                     i2l4280:
 13246  002420  90D8               	bcf	status,0,c
 13247  002422  3603               	rlcf	i2___lwmod@divisor,f,c
 13248  002424  3604               	rlcf	i2___lwmod@divisor+1,f,c
 13249  002426  2A05               	incf	i2___lwmod@counter,f,c
 13250  002428                     i2l4282:
 13251  002428  AE04               	btfss	i2___lwmod@divisor+1,7,c
 13252  00242A  D7FA               	goto	i2l4280
 13253  00242C                     i2l4284:
 13254  00242C  5003               	movf	i2___lwmod@divisor,w,c
 13255  00242E  5C01               	subwf	i2___lwmod@dividend,w,c
 13256  002430  5004               	movf	i2___lwmod@divisor+1,w,c
 13257  002432  5802               	subwfb	i2___lwmod@dividend+1,w,c
 13258  002434  A0D8               	btfss	status,0,c
 13259  002436  D004               	goto	i2l4288
 13260  002438  5003               	movf	i2___lwmod@divisor,w,c
 13261  00243A  5E01               	subwf	i2___lwmod@dividend,f,c
 13262  00243C  5004               	movf	i2___lwmod@divisor+1,w,c
 13263  00243E  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 13264  002440                     i2l4288:
 13265  002440  90D8               	bcf	status,0,c
 13266  002442  3204               	rrcf	i2___lwmod@divisor+1,f,c
 13267  002444  3203               	rrcf	i2___lwmod@divisor,f,c
 13268  002446  2E05               	decfsz	i2___lwmod@counter,f,c
 13269  002448  D7F1               	goto	i2l4284
 13270  00244A                     i2l1851:
 13271  00244A  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 13272  00244E  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 13273  002452  0012               	return		;funcret
 13274  002454                     __end_ofi2___lwmod:
 13275                           	opt stack 0
 13276                           pclatu	equ	0xFFB
 13277                           pclath	equ	0xFFA
 13278                           tblptru	equ	0xFF8
 13279                           tblptrh	equ	0xFF7
 13280                           tblptrl	equ	0xFF6
 13281                           tablat	equ	0xFF5
 13282                           prodh	equ	0xFF4
 13283                           prodl	equ	0xFF3
 13284                           intcon	equ	0xFF2
 13285                           intcon2	equ	0xFF1
 13286                           intcon3	equ	0xFF0
 13287                           indf0	equ	0xFEF
 13288                           postinc0	equ	0xFEE
 13289                           fsr0h	equ	0xFEA
 13290                           fsr0l	equ	0xFE9
 13291                           wreg	equ	0xFE8
 13292                           postdec1	equ	0xFE5
 13293                           fsr1h	equ	0xFE2
 13294                           fsr1l	equ	0xFE1
 13295                           indf2	equ	0xFDF
 13296                           postinc2	equ	0xFDE
 13297                           postdec2	equ	0xFDD
 13298                           fsr2h	equ	0xFDA
 13299                           fsr2l	equ	0xFD9
 13300                           status	equ	0xFD8
 13301                           
 13302 ;; *************** function i2___lwdiv *****************
 13303 ;; Defined at:
 13304 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 13305 ;; Parameters:    Size  Location     Type
 13306 ;;  dividend        2    5[COMRAM] unsigned int 
 13307 ;;  divisor         2    7[COMRAM] unsigned int 
 13308 ;; Auto vars:     Size  Location     Type
 13309 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 13310 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 13311 ;; Return value:  Size  Location     Type
 13312 ;;                  2    5[COMRAM] unsigned int 
 13313 ;; Registers used:
 13314 ;;		wreg, status,2, status,0
 13315 ;; Tracked objects:
 13316 ;;		On entry : 0/0
 13317 ;;		On exit  : 0/0
 13318 ;;		Unchanged: 0/0
 13319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13320 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13321 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13323 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13324 ;;Total ram usage:        7 bytes
 13325 ;; Hardware stack levels used:    1
 13326 ;; This function calls:
 13327 ;;		Nothing
 13328 ;; This function is called by:
 13329 ;;		_printSortTimer
 13330 ;;		i2_printf
 13331 ;; This function uses a non-reentrant model
 13332 ;;
 13333                           
 13334                           	psect	text67
 13335  0022E6                     __ptext67:
 13336                           	opt stack 0
 13337  0022E6                     i2___lwdiv:
 13338                           	opt stack 20
 13339                           
 13340                           ;incstack = 0
 13341  0022E6  0E00               	movlw	0
 13342  0022E8  6E0B               	movwf	i2___lwdiv@quotient+1,c
 13343  0022EA  0E00               	movlw	0
 13344  0022EC  6E0A               	movwf	i2___lwdiv@quotient,c
 13345  0022EE  5008               	movf	i2___lwdiv@divisor,w,c
 13346  0022F0  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 13347  0022F2  B4D8               	btfsc	status,2,c
 13348  0022F4  D01C               	goto	i2l1841
 13349  0022F6  0E01               	movlw	1
 13350  0022F8  6E0C               	movwf	i2___lwdiv@counter,c
 13351  0022FA  D004               	goto	i2l4262
 13352  0022FC                     i2l4260:
 13353  0022FC  90D8               	bcf	status,0,c
 13354  0022FE  3608               	rlcf	i2___lwdiv@divisor,f,c
 13355  002300  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 13356  002302  2A0C               	incf	i2___lwdiv@counter,f,c
 13357  002304                     i2l4262:
 13358  002304  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 13359  002306  D7FA               	goto	i2l4260
 13360  002308                     i2l4264:
 13361  002308  90D8               	bcf	status,0,c
 13362  00230A  360A               	rlcf	i2___lwdiv@quotient,f,c
 13363  00230C  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 13364  00230E  5008               	movf	i2___lwdiv@divisor,w,c
 13365  002310  5C06               	subwf	i2___lwdiv@dividend,w,c
 13366  002312  5009               	movf	i2___lwdiv@divisor+1,w,c
 13367  002314  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 13368  002316  A0D8               	btfss	status,0,c
 13369  002318  D005               	goto	i2l4272
 13370  00231A  5008               	movf	i2___lwdiv@divisor,w,c
 13371  00231C  5E06               	subwf	i2___lwdiv@dividend,f,c
 13372  00231E  5009               	movf	i2___lwdiv@divisor+1,w,c
 13373  002320  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 13374  002322  800A               	bsf	i2___lwdiv@quotient,0,c
 13375  002324                     i2l4272:
 13376  002324  90D8               	bcf	status,0,c
 13377  002326  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 13378  002328  3208               	rrcf	i2___lwdiv@divisor,f,c
 13379  00232A  2E0C               	decfsz	i2___lwdiv@counter,f,c
 13380  00232C  D7ED               	goto	i2l4264
 13381  00232E                     i2l1841:
 13382  00232E  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 13383  002332  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 13384  002336  0012               	return		;funcret
 13385  002338                     __end_ofi2___lwdiv:
 13386                           	opt stack 0
 13387                           pclatu	equ	0xFFB
 13388                           pclath	equ	0xFFA
 13389                           tblptru	equ	0xFF8
 13390                           tblptrh	equ	0xFF7
 13391                           tblptrl	equ	0xFF6
 13392                           tablat	equ	0xFF5
 13393                           prodh	equ	0xFF4
 13394                           prodl	equ	0xFF3
 13395                           intcon	equ	0xFF2
 13396                           intcon2	equ	0xFF1
 13397                           intcon3	equ	0xFF0
 13398                           indf0	equ	0xFEF
 13399                           postinc0	equ	0xFEE
 13400                           fsr0h	equ	0xFEA
 13401                           fsr0l	equ	0xFE9
 13402                           wreg	equ	0xFE8
 13403                           postdec1	equ	0xFE5
 13404                           fsr1h	equ	0xFE2
 13405                           fsr1l	equ	0xFE1
 13406                           indf2	equ	0xFDF
 13407                           postinc2	equ	0xFDE
 13408                           postdec2	equ	0xFDD
 13409                           fsr2h	equ	0xFDA
 13410                           fsr2l	equ	0xFD9
 13411                           status	equ	0xFD8
 13412                           
 13413 ;; *************** function i2_lcdInst *****************
 13414 ;; Defined at:
 13415 ;;		line 14 in file "lcd.c"
 13416 ;; Parameters:    Size  Location     Type
 13417 ;;  data            1    wreg     unsigned char 
 13418 ;; Auto vars:     Size  Location     Type
 13419 ;;  data            1    2[COMRAM] unsigned char 
 13420 ;; Return value:  Size  Location     Type
 13421 ;;                  1    wreg      void 
 13422 ;; Registers used:
 13423 ;;		wreg, status,2, status,0, cstack
 13424 ;; Tracked objects:
 13425 ;;		On entry : 0/0
 13426 ;;		On exit  : 0/0
 13427 ;;		Unchanged: 0/0
 13428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13430 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13432 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13433 ;;Total ram usage:        1 bytes
 13434 ;; Hardware stack levels used:    1
 13435 ;; Hardware stack levels required when called:    1
 13436 ;; This function calls:
 13437 ;;		i2_lcdNibble
 13438 ;; This function is called by:
 13439 ;;		_change_state_to_menu_11
 13440 ;;		_change_state_to_menu_23
 13441 ;;		_change_state_to_logs_11
 13442 ;;		_change_state_to_logs_12
 13443 ;;		_change_state_to_logs_22
 13444 ;;		_change_state_to_logs_23
 13445 ;;		_change_state_to_logs_33
 13446 ;;		_change_state_to_logs_34
 13447 ;;		_printSortTimer
 13448 ;;		i2_change_state_to_menu_start
 13449 ;;		i2_change_state_to_menu_12
 13450 ;;		i2_change_state_to_menu_22
 13451 ;;		i2_printRTC
 13452 ;; This function uses a non-reentrant model
 13453 ;;
 13454                           
 13455                           	psect	text68
 13456  002A0A                     __ptext68:
 13457                           	opt stack 0
 13458  002A0A                     i2_lcdInst:
 13459                           	opt stack 19
 13460                           
 13461                           ;incstack = 0
 13462                           ;i2lcdInst@data stored from wreg
 13463  002A0A  6E03               	movwf	i2lcdInst@data,c
 13464                           
 13465                           ;lcd.c: 15: LATDbits.LATD2 = 0;
 13466  002A0C  948C               	bcf	3980,2,c	;volatile
 13467                           
 13468                           ;lcd.c: 16: lcdNibble(data);
 13469  002A0E  5003               	movf	i2lcdInst@data,w,c
 13470  002A10  EC48  F011         	call	i2_lcdNibble
 13471  002A14  0012               	return		;funcret
 13472  002A16                     __end_ofi2_lcdInst:
 13473                           	opt stack 0
 13474                           pclatu	equ	0xFFB
 13475                           pclath	equ	0xFFA
 13476                           tblptru	equ	0xFF8
 13477                           tblptrh	equ	0xFF7
 13478                           tblptrl	equ	0xFF6
 13479                           tablat	equ	0xFF5
 13480                           prodh	equ	0xFF4
 13481                           prodl	equ	0xFF3
 13482                           intcon	equ	0xFF2
 13483                           intcon2	equ	0xFF1
 13484                           intcon3	equ	0xFF0
 13485                           indf0	equ	0xFEF
 13486                           postinc0	equ	0xFEE
 13487                           fsr0h	equ	0xFEA
 13488                           fsr0l	equ	0xFE9
 13489                           wreg	equ	0xFE8
 13490                           postdec1	equ	0xFE5
 13491                           fsr1h	equ	0xFE2
 13492                           fsr1l	equ	0xFE1
 13493                           indf2	equ	0xFDF
 13494                           postinc2	equ	0xFDE
 13495                           postdec2	equ	0xFDD
 13496                           fsr2h	equ	0xFDA
 13497                           fsr2l	equ	0xFD9
 13498                           status	equ	0xFD8
 13499                           
 13500 ;; *************** function i2_lcdNibble *****************
 13501 ;; Defined at:
 13502 ;;		line 24 in file "lcd.c"
 13503 ;; Parameters:    Size  Location     Type
 13504 ;;  data            1    wreg     unsigned char 
 13505 ;; Auto vars:     Size  Location     Type
 13506 ;;  data            1    1[COMRAM] unsigned char 
 13507 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 13508 ;; Return value:  Size  Location     Type
 13509 ;;                  1    wreg      void 
 13510 ;; Registers used:
 13511 ;;		wreg, status,2, status,0
 13512 ;; Tracked objects:
 13513 ;;		On entry : 0/0
 13514 ;;		On exit  : 0/0
 13515 ;;		Unchanged: 0/0
 13516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13518 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13520 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13521 ;;Total ram usage:        2 bytes
 13522 ;; Hardware stack levels used:    1
 13523 ;; This function calls:
 13524 ;;		Nothing
 13525 ;; This function is called by:
 13526 ;;		i2_lcdInst
 13527 ;;		i2_putch
 13528 ;; This function uses a non-reentrant model
 13529 ;;
 13530                           
 13531                           	psect	text69
 13532  002290                     __ptext69:
 13533                           	opt stack 0
 13534  002290                     i2_lcdNibble:
 13535                           	opt stack 19
 13536                           
 13537                           ;incstack = 0
 13538                           ;i2lcdNibble@data stored from wreg
 13539  002290  6E02               	movwf	i2lcdNibble@data,c
 13540                           
 13541                           ;lcd.c: 26: char temp = data & 0xF0;
 13542  002292  5002               	movf	i2lcdNibble@data,w,c
 13543  002294  0BF0               	andlw	240
 13544  002296  6E01               	movwf	i2lcdNibble@temp,c
 13545                           
 13546                           ;lcd.c: 27: LATD = LATD & 0x0F;
 13547  002298  508C               	movf	3980,w,c	;volatile
 13548  00229A  0B0F               	andlw	15
 13549  00229C  6E8C               	movwf	3980,c	;volatile
 13550                           
 13551                           ;lcd.c: 28: LATD = temp | LATD;
 13552  00229E  5001               	movf	i2lcdNibble@temp,w,c
 13553  0022A0  108C               	iorwf	3980,w,c	;volatile
 13554  0022A2  6E8C               	movwf	3980,c	;volatile
 13555                           
 13556                           ;lcd.c: 30: LATDbits.LATD3 = 1;
 13557  0022A4  868C               	bsf	3980,3,c	;volatile
 13558                           
 13559                           ;lcd.c: 31: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13560  0022A6  0E42               	movlw	66
 13561  0022A8                     i2u500_47:
 13562  0022A8  2EE8               	decfsz	wreg,f,c
 13563  0022AA  D7FE               	bra	i2u500_47
 13564  0022AC  D000               	nop2	
 13565                           
 13566                           ;lcd.c: 32: LATDbits.LATD3 = 0;
 13567  0022AE  968C               	bcf	3980,3,c	;volatile
 13568                           
 13569                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13570  0022B0  0E42               	movlw	66
 13571  0022B2                     i2u501_47:
 13572  0022B2  2EE8               	decfsz	wreg,f,c
 13573  0022B4  D7FE               	bra	i2u501_47
 13574  0022B6  D000               	nop2	
 13575                           
 13576                           ;lcd.c: 35: data = data << 4;
 13577  0022B8  3802               	swapf	i2lcdNibble@data,w,c
 13578  0022BA  0BF0               	andlw	240
 13579  0022BC  6E02               	movwf	i2lcdNibble@data,c
 13580                           
 13581                           ;lcd.c: 37: temp = data & 0xF0;
 13582  0022BE  5002               	movf	i2lcdNibble@data,w,c
 13583  0022C0  0BF0               	andlw	240
 13584  0022C2  6E01               	movwf	i2lcdNibble@temp,c
 13585                           
 13586                           ;lcd.c: 38: LATD = LATD & 0x0F;
 13587  0022C4  508C               	movf	3980,w,c	;volatile
 13588  0022C6  0B0F               	andlw	15
 13589  0022C8  6E8C               	movwf	3980,c	;volatile
 13590                           
 13591                           ;lcd.c: 39: LATD = temp | LATD;
 13592  0022CA  5001               	movf	i2lcdNibble@temp,w,c
 13593  0022CC  108C               	iorwf	3980,w,c	;volatile
 13594  0022CE  6E8C               	movwf	3980,c	;volatile
 13595                           
 13596                           ;lcd.c: 41: LATDbits.LATD3 = 1;
 13597  0022D0  868C               	bsf	3980,3,c	;volatile
 13598                           
 13599                           ;lcd.c: 42: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13600  0022D2  0E42               	movlw	66
 13601  0022D4                     i2u502_47:
 13602  0022D4  2EE8               	decfsz	wreg,f,c
 13603  0022D6  D7FE               	bra	i2u502_47
 13604  0022D8  D000               	nop2	
 13605                           
 13606                           ;lcd.c: 43: LATDbits.LATD3 = 0;
 13607  0022DA  968C               	bcf	3980,3,c	;volatile
 13608                           
 13609                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13610  0022DC  0E42               	movlw	66
 13611  0022DE                     i2u503_47:
 13612  0022DE  2EE8               	decfsz	wreg,f,c
 13613  0022E0  D7FE               	bra	i2u503_47
 13614  0022E2  D000               	nop2	
 13615  0022E4  0012               	return		;funcret
 13616  0022E6                     __end_ofi2_lcdNibble:
 13617                           	opt stack 0
 13618                           pclatu	equ	0xFFB
 13619                           pclath	equ	0xFFA
 13620                           tblptru	equ	0xFF8
 13621                           tblptrh	equ	0xFF7
 13622                           tblptrl	equ	0xFF6
 13623                           tablat	equ	0xFF5
 13624                           prodh	equ	0xFF4
 13625                           prodl	equ	0xFF3
 13626                           intcon	equ	0xFF2
 13627                           intcon2	equ	0xFF1
 13628                           intcon3	equ	0xFF0
 13629                           indf0	equ	0xFEF
 13630                           postinc0	equ	0xFEE
 13631                           fsr0h	equ	0xFEA
 13632                           fsr0l	equ	0xFE9
 13633                           wreg	equ	0xFE8
 13634                           postdec1	equ	0xFE5
 13635                           fsr1h	equ	0xFE2
 13636                           fsr1l	equ	0xFE1
 13637                           indf2	equ	0xFDF
 13638                           postinc2	equ	0xFDE
 13639                           postdec2	equ	0xFDD
 13640                           fsr2h	equ	0xFDA
 13641                           fsr2l	equ	0xFD9
 13642                           status	equ	0xFD8
 13643                           
 13644 ;; *************** function i2_getRTC *****************
 13645 ;; Defined at:
 13646 ;;		line 43 in file "RTC.c"
 13647 ;; Parameters:    Size  Location     Type
 13648 ;;		None
 13649 ;; Auto vars:     Size  Location     Type
 13650 ;;  getRTC          2    3[COMRAM] int 
 13651 ;; Return value:  Size  Location     Type
 13652 ;;                  1    wreg      void 
 13653 ;; Registers used:
 13654 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13655 ;; Tracked objects:
 13656 ;;		On entry : 0/0
 13657 ;;		On exit  : 0/0
 13658 ;;		Unchanged: 0/0
 13659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13661 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13663 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13664 ;;Total ram usage:        2 bytes
 13665 ;; Hardware stack levels used:    1
 13666 ;; Hardware stack levels required when called:    2
 13667 ;; This function calls:
 13668 ;;		i2_I2C_Master_Read
 13669 ;;		i2_I2C_Master_Start
 13670 ;;		i2_I2C_Master_Stop
 13671 ;;		i2_I2C_Master_Write
 13672 ;; This function is called by:
 13673 ;;		_printSortTimer
 13674 ;;		i2_printRTC
 13675 ;; This function uses a non-reentrant model
 13676 ;;
 13677                           
 13678                           	psect	text70
 13679  002030                     __ptext70:
 13680                           	opt stack 0
 13681  002030                     i2_getRTC:
 13682                           	opt stack 18
 13683                           
 13684                           ;RTC.c: 47: I2C_Master_Start();
 13685                           
 13686                           ;incstack = 0
 13687  002030  EC26  F015         	call	i2_I2C_Master_Start	;wreg free
 13688                           
 13689                           ;RTC.c: 48: I2C_Master_Write(0b11010000);
 13690  002034  0E00               	movlw	0
 13691  002036  6E03               	movwf	i2I2C_Master_Write@d+1,c
 13692  002038  0ED0               	movlw	208
 13693  00203A  6E02               	movwf	i2I2C_Master_Write@d,c
 13694  00203C  EC10  F015         	call	i2_I2C_Master_Write	;wreg free
 13695                           
 13696                           ;RTC.c: 49: I2C_Master_Write(0x00);
 13697  002040  0E00               	movlw	0
 13698  002042  6E03               	movwf	i2I2C_Master_Write@d+1,c
 13699  002044  0E00               	movlw	0
 13700  002046  6E02               	movwf	i2I2C_Master_Write@d,c
 13701  002048  EC10  F015         	call	i2_I2C_Master_Write	;wreg free
 13702                           
 13703                           ;RTC.c: 50: I2C_Master_Stop();
 13704  00204C  EC22  F015         	call	i2_I2C_Master_Stop	;wreg free
 13705                           
 13706                           ;RTC.c: 53: I2C_Master_Start();
 13707  002050  EC26  F015         	call	i2_I2C_Master_Start	;wreg free
 13708                           
 13709                           ;RTC.c: 54: I2C_Master_Write(0b11010001);
 13710  002054  0E00               	movlw	0
 13711  002056  6E03               	movwf	i2I2C_Master_Write@d+1,c
 13712  002058  0ED1               	movlw	209
 13713  00205A  6E02               	movwf	i2I2C_Master_Write@d,c
 13714  00205C  EC10  F015         	call	i2_I2C_Master_Write	;wreg free
 13715                           
 13716                           ;RTC.c: 55: for(int i = 0; i < 6; i++){
 13717  002060  0E00               	movlw	0
 13718  002062  6E05               	movwf	i2getRTC@i+1,c
 13719  002064  0E00               	movlw	0
 13720  002066  6E04               	movwf	i2getRTC@i,c
 13721  002068                     i2l4482:
 13722  002068  BE05               	btfsc	i2getRTC@i+1,7,c
 13723  00206A  D006               	goto	i2l4486
 13724  00206C  5005               	movf	i2getRTC@i+1,w,c
 13725  00206E  E111               	bnz	i2l4492
 13726  002070  0E06               	movlw	6
 13727  002072  5C04               	subwf	i2getRTC@i,w,c
 13728  002074  B0D8               	btfsc	status,0,c
 13729  002076  D00D               	goto	i2l4492
 13730  002078                     i2l4486:
 13731                           
 13732                           ;RTC.c: 56: time[i] = I2C_Master_Read(1);
 13733  002078  0ED4               	movlw	low _time
 13734  00207A  2404               	addwf	i2getRTC@i,w,c
 13735  00207C  6ED9               	movwf	fsr2l,c
 13736  00207E  0E00               	movlw	high _time
 13737  002080  2005               	addwfc	i2getRTC@i+1,w,c
 13738  002082  6EDA               	movwf	fsr2h,c
 13739  002084  0E01               	movlw	1
 13740  002086  EC55  F014         	call	i2_I2C_Master_Read
 13741  00208A  6EDF               	movwf	indf2,c
 13742  00208C  4A04               	infsnz	i2getRTC@i,f,c
 13743  00208E  2A05               	incf	i2getRTC@i+1,f,c
 13744  002090  D7EB               	goto	i2l4482
 13745  002092                     i2l4492:
 13746                           
 13747                           ;RTC.c: 57: }
 13748                           ;RTC.c: 58: time[6] = I2C_Master_Read(0);
 13749  002092  0E00               	movlw	0
 13750  002094  EC55  F014         	call	i2_I2C_Master_Read
 13751  002098  0100               	movlb	0	; () banked
 13752  00209A  6FDA               	movwf	(_time+6)& (0+255),b
 13753                           
 13754                           ;RTC.c: 59: I2C_Master_Stop();
 13755  00209C  EC22  F015         	call	i2_I2C_Master_Stop	;wreg free
 13756  0020A0  0012               	return		;funcret
 13757  0020A2                     __end_ofi2_getRTC:
 13758                           	opt stack 0
 13759                           pclatu	equ	0xFFB
 13760                           pclath	equ	0xFFA
 13761                           tblptru	equ	0xFF8
 13762                           tblptrh	equ	0xFF7
 13763                           tblptrl	equ	0xFF6
 13764                           tablat	equ	0xFF5
 13765                           prodh	equ	0xFF4
 13766                           prodl	equ	0xFF3
 13767                           intcon	equ	0xFF2
 13768                           intcon2	equ	0xFF1
 13769                           intcon3	equ	0xFF0
 13770                           indf0	equ	0xFEF
 13771                           postinc0	equ	0xFEE
 13772                           fsr0h	equ	0xFEA
 13773                           fsr0l	equ	0xFE9
 13774                           wreg	equ	0xFE8
 13775                           postdec1	equ	0xFE5
 13776                           fsr1h	equ	0xFE2
 13777                           fsr1l	equ	0xFE1
 13778                           indf2	equ	0xFDF
 13779                           postinc2	equ	0xFDE
 13780                           postdec2	equ	0xFDD
 13781                           fsr2h	equ	0xFDA
 13782                           fsr2l	equ	0xFD9
 13783                           status	equ	0xFD8
 13784                           
 13785 ;; *************** function i2_I2C_Master_Write *****************
 13786 ;; Defined at:
 13787 ;;		line 48 in file "I2C.c"
 13788 ;; Parameters:    Size  Location     Type
 13789 ;;  d               2    1[COMRAM] unsigned int 
 13790 ;; Auto vars:     Size  Location     Type
 13791 ;;		None
 13792 ;; Return value:  Size  Location     Type
 13793 ;;                  1    wreg      void 
 13794 ;; Registers used:
 13795 ;;		wreg, status,2, status,0, cstack
 13796 ;; Tracked objects:
 13797 ;;		On entry : 0/0
 13798 ;;		On exit  : 0/0
 13799 ;;		Unchanged: 0/0
 13800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13801 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13804 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13805 ;;Total ram usage:        2 bytes
 13806 ;; Hardware stack levels used:    1
 13807 ;; Hardware stack levels required when called:    1
 13808 ;; This function calls:
 13809 ;;		i2_I2C_Master_Wait
 13810 ;; This function is called by:
 13811 ;;		i2_getRTC
 13812 ;; This function uses a non-reentrant model
 13813 ;;
 13814                           
 13815                           	psect	text71
 13816  002A20                     __ptext71:
 13817                           	opt stack 0
 13818  002A20                     i2_I2C_Master_Write:
 13819                           	opt stack 18
 13820                           
 13821                           ;I2C.c: 50: I2C_Master_Wait();
 13822                           
 13823                           ;incstack = 0
 13824  002A20  ECE0  F014         	call	i2_I2C_Master_Wait	;wreg free
 13825                           
 13826                           ;I2C.c: 51: SSPBUF = d;
 13827  002A24  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 13828  002A28  0012               	return		;funcret
 13829  002A2A                     __end_ofi2_I2C_Master_Write:
 13830                           	opt stack 0
 13831                           pclatu	equ	0xFFB
 13832                           pclath	equ	0xFFA
 13833                           tblptru	equ	0xFF8
 13834                           tblptrh	equ	0xFF7
 13835                           tblptrl	equ	0xFF6
 13836                           tablat	equ	0xFF5
 13837                           prodh	equ	0xFF4
 13838                           prodl	equ	0xFF3
 13839                           intcon	equ	0xFF2
 13840                           intcon2	equ	0xFF1
 13841                           intcon3	equ	0xFF0
 13842                           indf0	equ	0xFEF
 13843                           postinc0	equ	0xFEE
 13844                           fsr0h	equ	0xFEA
 13845                           fsr0l	equ	0xFE9
 13846                           wreg	equ	0xFE8
 13847                           postdec1	equ	0xFE5
 13848                           fsr1h	equ	0xFE2
 13849                           fsr1l	equ	0xFE1
 13850                           indf2	equ	0xFDF
 13851                           postinc2	equ	0xFDE
 13852                           postdec2	equ	0xFDD
 13853                           fsr2h	equ	0xFDA
 13854                           fsr2l	equ	0xFD9
 13855                           status	equ	0xFD8
 13856                           
 13857 ;; *************** function i2_I2C_Master_Stop *****************
 13858 ;; Defined at:
 13859 ;;		line 42 in file "I2C.c"
 13860 ;; Parameters:    Size  Location     Type
 13861 ;;		None
 13862 ;; Auto vars:     Size  Location     Type
 13863 ;;		None
 13864 ;; Return value:  Size  Location     Type
 13865 ;;                  1    wreg      void 
 13866 ;; Registers used:
 13867 ;;		wreg, status,2, status,0, cstack
 13868 ;; Tracked objects:
 13869 ;;		On entry : 0/0
 13870 ;;		On exit  : 0/0
 13871 ;;		Unchanged: 0/0
 13872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13876 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13877 ;;Total ram usage:        0 bytes
 13878 ;; Hardware stack levels used:    1
 13879 ;; Hardware stack levels required when called:    1
 13880 ;; This function calls:
 13881 ;;		i2_I2C_Master_Wait
 13882 ;; This function is called by:
 13883 ;;		i2_getRTC
 13884 ;; This function uses a non-reentrant model
 13885 ;;
 13886                           
 13887                           	psect	text72
 13888  002A44                     __ptext72:
 13889                           	opt stack 0
 13890  002A44                     i2_I2C_Master_Stop:
 13891                           	opt stack 18
 13892                           
 13893                           ;I2C.c: 44: I2C_Master_Wait();
 13894                           
 13895                           ;incstack = 0
 13896  002A44  ECE0  F014         	call	i2_I2C_Master_Wait	;wreg free
 13897                           
 13898                           ;I2C.c: 45: PEN = 1;
 13899  002A48  84C5               	bsf	4037,2,c	;volatile
 13900  002A4A  0012               	return		;funcret
 13901  002A4C                     __end_ofi2_I2C_Master_Stop:
 13902                           	opt stack 0
 13903                           pclatu	equ	0xFFB
 13904                           pclath	equ	0xFFA
 13905                           tblptru	equ	0xFF8
 13906                           tblptrh	equ	0xFF7
 13907                           tblptrl	equ	0xFF6
 13908                           tablat	equ	0xFF5
 13909                           prodh	equ	0xFF4
 13910                           prodl	equ	0xFF3
 13911                           intcon	equ	0xFF2
 13912                           intcon2	equ	0xFF1
 13913                           intcon3	equ	0xFF0
 13914                           indf0	equ	0xFEF
 13915                           postinc0	equ	0xFEE
 13916                           fsr0h	equ	0xFEA
 13917                           fsr0l	equ	0xFE9
 13918                           wreg	equ	0xFE8
 13919                           postdec1	equ	0xFE5
 13920                           fsr1h	equ	0xFE2
 13921                           fsr1l	equ	0xFE1
 13922                           indf2	equ	0xFDF
 13923                           postinc2	equ	0xFDE
 13924                           postdec2	equ	0xFDD
 13925                           fsr2h	equ	0xFDA
 13926                           fsr2l	equ	0xFD9
 13927                           status	equ	0xFD8
 13928                           
 13929 ;; *************** function i2_I2C_Master_Start *****************
 13930 ;; Defined at:
 13931 ;;		line 30 in file "I2C.c"
 13932 ;; Parameters:    Size  Location     Type
 13933 ;;		None
 13934 ;; Auto vars:     Size  Location     Type
 13935 ;;		None
 13936 ;; Return value:  Size  Location     Type
 13937 ;;                  1    wreg      void 
 13938 ;; Registers used:
 13939 ;;		wreg, status,2, status,0, cstack
 13940 ;; Tracked objects:
 13941 ;;		On entry : 0/0
 13942 ;;		On exit  : 0/0
 13943 ;;		Unchanged: 0/0
 13944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13949 ;;Total ram usage:        0 bytes
 13950 ;; Hardware stack levels used:    1
 13951 ;; Hardware stack levels required when called:    1
 13952 ;; This function calls:
 13953 ;;		i2_I2C_Master_Wait
 13954 ;; This function is called by:
 13955 ;;		i2_getRTC
 13956 ;; This function uses a non-reentrant model
 13957 ;;
 13958                           
 13959                           	psect	text73
 13960  002A4C                     __ptext73:
 13961                           	opt stack 0
 13962  002A4C                     i2_I2C_Master_Start:
 13963                           	opt stack 18
 13964                           
 13965                           ;I2C.c: 32: I2C_Master_Wait();
 13966                           
 13967                           ;incstack = 0
 13968  002A4C  ECE0  F014         	call	i2_I2C_Master_Wait	;wreg free
 13969                           
 13970                           ;I2C.c: 33: SEN = 1;
 13971  002A50  80C5               	bsf	4037,0,c	;volatile
 13972  002A52  0012               	return		;funcret
 13973  002A54                     __end_ofi2_I2C_Master_Start:
 13974                           	opt stack 0
 13975                           pclatu	equ	0xFFB
 13976                           pclath	equ	0xFFA
 13977                           tblptru	equ	0xFF8
 13978                           tblptrh	equ	0xFF7
 13979                           tblptrl	equ	0xFF6
 13980                           tablat	equ	0xFF5
 13981                           prodh	equ	0xFF4
 13982                           prodl	equ	0xFF3
 13983                           intcon	equ	0xFF2
 13984                           intcon2	equ	0xFF1
 13985                           intcon3	equ	0xFF0
 13986                           indf0	equ	0xFEF
 13987                           postinc0	equ	0xFEE
 13988                           fsr0h	equ	0xFEA
 13989                           fsr0l	equ	0xFE9
 13990                           wreg	equ	0xFE8
 13991                           postdec1	equ	0xFE5
 13992                           fsr1h	equ	0xFE2
 13993                           fsr1l	equ	0xFE1
 13994                           indf2	equ	0xFDF
 13995                           postinc2	equ	0xFDE
 13996                           postdec2	equ	0xFDD
 13997                           fsr2h	equ	0xFDA
 13998                           fsr2l	equ	0xFD9
 13999                           status	equ	0xFD8
 14000                           
 14001 ;; *************** function i2_I2C_Master_Read *****************
 14002 ;; Defined at:
 14003 ;;		line 54 in file "I2C.c"
 14004 ;; Parameters:    Size  Location     Type
 14005 ;;  a               1    wreg     unsigned char 
 14006 ;; Auto vars:     Size  Location     Type
 14007 ;;  a               1    1[COMRAM] unsigned char 
 14008 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 14009 ;; Return value:  Size  Location     Type
 14010 ;;                  1    wreg      unsigned char 
 14011 ;; Registers used:
 14012 ;;		wreg, status,2, status,0, cstack
 14013 ;; Tracked objects:
 14014 ;;		On entry : 0/0
 14015 ;;		On exit  : 0/0
 14016 ;;		Unchanged: 0/0
 14017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14019 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14021 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14022 ;;Total ram usage:        2 bytes
 14023 ;; Hardware stack levels used:    1
 14024 ;; Hardware stack levels required when called:    1
 14025 ;; This function calls:
 14026 ;;		i2_I2C_Master_Wait
 14027 ;; This function is called by:
 14028 ;;		i2_getRTC
 14029 ;; This function uses a non-reentrant model
 14030 ;;
 14031                           
 14032                           	psect	text74
 14033  0028AA                     __ptext74:
 14034                           	opt stack 0
 14035  0028AA                     i2_I2C_Master_Read:
 14036                           	opt stack 18
 14037                           
 14038                           ;incstack = 0
 14039                           ;i2I2C_Master_Read@a stored from wreg
 14040  0028AA  6E02               	movwf	i2I2C_Master_Read@a,c
 14041                           
 14042                           ;I2C.c: 56: unsigned char temp;
 14043                           ;I2C.c: 57: I2C_Master_Wait();
 14044  0028AC  ECE0  F014         	call	i2_I2C_Master_Wait	;wreg free
 14045                           
 14046                           ;I2C.c: 58: RCEN = 1;
 14047  0028B0  86C5               	bsf	4037,3,c	;volatile
 14048                           
 14049                           ;I2C.c: 59: I2C_Master_Wait();
 14050  0028B2  ECE0  F014         	call	i2_I2C_Master_Wait	;wreg free
 14051                           
 14052                           ;I2C.c: 60: temp = SSPBUF;
 14053  0028B6  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 14054                           
 14055                           ;I2C.c: 61: I2C_Master_Wait();
 14056  0028BA  ECE0  F014         	call	i2_I2C_Master_Wait	;wreg free
 14057                           
 14058                           ;I2C.c: 62: ACKDT = (a)?0:1;
 14059  0028BE  5002               	movf	i2I2C_Master_Read@a,w,c
 14060  0028C0  A4D8               	btfss	status,2,c
 14061  0028C2  D002               	goto	i2u252_40
 14062  0028C4  8AC5               	bsf	4037,5,c	;volatile
 14063  0028C6  D001               	goto	i2l4226
 14064  0028C8                     i2u252_40:
 14065  0028C8  9AC5               	bcf	4037,5,c	;volatile
 14066  0028CA                     i2l4226:
 14067                           
 14068                           ;I2C.c: 63: ACKEN = 1;
 14069  0028CA  88C5               	bsf	4037,4,c	;volatile
 14070                           
 14071                           ;I2C.c: 64: return temp;
 14072  0028CC  5003               	movf	i2I2C_Master_Read@temp,w,c
 14073  0028CE  0012               	return	
 14074  0028D0                     __end_ofi2_I2C_Master_Read:
 14075                           	opt stack 0
 14076                           pclatu	equ	0xFFB
 14077                           pclath	equ	0xFFA
 14078                           tblptru	equ	0xFF8
 14079                           tblptrh	equ	0xFF7
 14080                           tblptrl	equ	0xFF6
 14081                           tablat	equ	0xFF5
 14082                           prodh	equ	0xFF4
 14083                           prodl	equ	0xFF3
 14084                           intcon	equ	0xFF2
 14085                           intcon2	equ	0xFF1
 14086                           intcon3	equ	0xFF0
 14087                           indf0	equ	0xFEF
 14088                           postinc0	equ	0xFEE
 14089                           fsr0h	equ	0xFEA
 14090                           fsr0l	equ	0xFE9
 14091                           wreg	equ	0xFE8
 14092                           postdec1	equ	0xFE5
 14093                           fsr1h	equ	0xFE2
 14094                           fsr1l	equ	0xFE1
 14095                           indf2	equ	0xFDF
 14096                           postinc2	equ	0xFDE
 14097                           postdec2	equ	0xFDD
 14098                           fsr2h	equ	0xFDA
 14099                           fsr2l	equ	0xFD9
 14100                           status	equ	0xFD8
 14101                           
 14102 ;; *************** function i2_I2C_Master_Wait *****************
 14103 ;; Defined at:
 14104 ;;		line 25 in file "I2C.c"
 14105 ;; Parameters:    Size  Location     Type
 14106 ;;		None
 14107 ;; Auto vars:     Size  Location     Type
 14108 ;;		None
 14109 ;; Return value:  Size  Location     Type
 14110 ;;                  1    wreg      void 
 14111 ;; Registers used:
 14112 ;;		wreg, status,2, status,0
 14113 ;; Tracked objects:
 14114 ;;		On entry : 0/0
 14115 ;;		On exit  : 0/0
 14116 ;;		Unchanged: 0/0
 14117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14120 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14121 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14122 ;;Total ram usage:        1 bytes
 14123 ;; Hardware stack levels used:    1
 14124 ;; This function calls:
 14125 ;;		Nothing
 14126 ;; This function is called by:
 14127 ;;		i2_I2C_Master_Start
 14128 ;;		i2_I2C_Master_Stop
 14129 ;;		i2_I2C_Master_Write
 14130 ;;		i2_I2C_Master_Read
 14131 ;; This function uses a non-reentrant model
 14132 ;;
 14133                           
 14134                           	psect	text75
 14135  0029C0                     __ptext75:
 14136                           	opt stack 0
 14137  0029C0                     i2_I2C_Master_Wait:
 14138                           	opt stack 18
 14139  0029C0                     i2l184:
 14140  0029C0  B4C7               	btfsc	4039,2,c	;volatile
 14141  0029C2  D7FE               	goto	i2l184
 14142  0029C4  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 14143  0029C8  0E1F               	movlw	31
 14144  0029CA  1601               	andwf	??i2_I2C_Master_Wait,f,c
 14145  0029CC  B4D8               	btfsc	status,2,c
 14146  0029CE  0012               	return	
 14147  0029D0  D7F7               	goto	i2l184
 14148  0029D2                     __end_ofi2_I2C_Master_Wait:
 14149                           	opt stack 0
 14150                           pclatu	equ	0xFFB
 14151                           pclath	equ	0xFFA
 14152                           tblptru	equ	0xFF8
 14153                           tblptrh	equ	0xFF7
 14154                           tblptrl	equ	0xFF6
 14155                           tablat	equ	0xFF5
 14156                           prodh	equ	0xFF4
 14157                           prodl	equ	0xFF3
 14158                           intcon	equ	0xFF2
 14159                           intcon2	equ	0xFF1
 14160                           intcon3	equ	0xFF0
 14161                           indf0	equ	0xFEF
 14162                           postinc0	equ	0xFEE
 14163                           fsr0h	equ	0xFEA
 14164                           fsr0l	equ	0xFE9
 14165                           wreg	equ	0xFE8
 14166                           postdec1	equ	0xFE5
 14167                           fsr1h	equ	0xFE2
 14168                           fsr1l	equ	0xFE1
 14169                           indf2	equ	0xFDF
 14170                           postinc2	equ	0xFDE
 14171                           postdec2	equ	0xFDD
 14172                           fsr2h	equ	0xFDA
 14173                           fsr2l	equ	0xFD9
 14174                           status	equ	0xFD8
 14175                           pclatu	equ	0xFFB
 14176                           pclath	equ	0xFFA
 14177                           tblptru	equ	0xFF8
 14178                           tblptrh	equ	0xFF7
 14179                           tblptrl	equ	0xFF6
 14180                           tablat	equ	0xFF5
 14181                           prodh	equ	0xFF4
 14182                           prodl	equ	0xFF3
 14183                           intcon	equ	0xFF2
 14184                           intcon2	equ	0xFF1
 14185                           intcon3	equ	0xFF0
 14186                           indf0	equ	0xFEF
 14187                           postinc0	equ	0xFEE
 14188                           fsr0h	equ	0xFEA
 14189                           fsr0l	equ	0xFE9
 14190                           wreg	equ	0xFE8
 14191                           postdec1	equ	0xFE5
 14192                           fsr1h	equ	0xFE2
 14193                           fsr1l	equ	0xFE1
 14194                           indf2	equ	0xFDF
 14195                           postinc2	equ	0xFDE
 14196                           postdec2	equ	0xFDD
 14197                           fsr2h	equ	0xFDA
 14198                           fsr2l	equ	0xFD9
 14199                           status	equ	0xFD8
 14200                           
 14201                           	psect	rparam
 14202  0000                     pclatu	equ	0xFFB
 14203                           pclath	equ	0xFFA
 14204                           tblptru	equ	0xFF8
 14205                           tblptrh	equ	0xFF7
 14206                           tblptrl	equ	0xFF6
 14207                           tablat	equ	0xFF5
 14208                           prodh	equ	0xFF4
 14209                           prodl	equ	0xFF3
 14210                           intcon	equ	0xFF2
 14211                           intcon2	equ	0xFF1
 14212                           intcon3	equ	0xFF0
 14213                           indf0	equ	0xFEF
 14214                           postinc0	equ	0xFEE
 14215                           fsr0h	equ	0xFEA
 14216                           fsr0l	equ	0xFE9
 14217                           wreg	equ	0xFE8
 14218                           postdec1	equ	0xFE5
 14219                           fsr1h	equ	0xFE2
 14220                           fsr1l	equ	0xFE1
 14221                           indf2	equ	0xFDF
 14222                           postinc2	equ	0xFDE
 14223                           postdec2	equ	0xFDD
 14224                           fsr2h	equ	0xFDA
 14225                           fsr2l	equ	0xFD9
 14226                           status	equ	0xFD8
 14227                           
 14228                           	psect	temp
 14229  00007F                     btemp:
 14230                           	opt stack 0
 14231  00007F                     	ds	1
 14232  0000                     int$flags	set	btemp
 14233                           pclatu	equ	0xFFB
 14234                           pclath	equ	0xFFA
 14235                           tblptru	equ	0xFF8
 14236                           tblptrh	equ	0xFF7
 14237                           tblptrl	equ	0xFF6
 14238                           tablat	equ	0xFF5
 14239                           prodh	equ	0xFF4
 14240                           prodl	equ	0xFF3
 14241                           intcon	equ	0xFF2
 14242                           intcon2	equ	0xFF1
 14243                           intcon3	equ	0xFF0
 14244                           indf0	equ	0xFEF
 14245                           postinc0	equ	0xFEE
 14246                           fsr0h	equ	0xFEA
 14247                           fsr0l	equ	0xFE9
 14248                           wreg	equ	0xFE8
 14249                           postdec1	equ	0xFE5
 14250                           fsr1h	equ	0xFE2
 14251                           fsr1l	equ	0xFE1
 14252                           indf2	equ	0xFDF
 14253                           postinc2	equ	0xFDE
 14254                           postdec2	equ	0xFDD
 14255                           fsr2h	equ	0xFDA
 14256                           fsr2l	equ	0xFD9
 14257                           status	equ	0xFD8


Data Sizes:
    Strings     558
    Constant    27
    Data        14
    BSS         77
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     126
    BANK0           128     84     125
    BANK1           256      0      14
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_47(CODE[4]), STR_46(CODE[4]), STR_45(CODE[4]), STR_44(CODE[4]), 
		 -> STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), STR_40(CODE[4]), 
		 -> STR_39(CODE[4]), STR_38(CODE[4]), STR_37(CODE[4]), STR_36(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_51(CODE[7]), printRTC@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_50(CODE[21]), STR_49(CODE[11]), STR_48(CODE[24]), STR_35(CODE[17]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[17]), STR_28(CODE[17]), STR_27(CODE[17]), 
		 -> STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[17]), 
		 -> STR_22(CODE[17]), STR_21(CODE[17]), STR_20(CODE[17]), STR_19(CODE[17]), 
		 -> STR_18(CODE[17]), STR_17(CODE[17]), STR_16(CODE[17]), STR_15(CODE[17]), 
		 -> STR_14(CODE[3]), STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[17]), 
		 -> STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[18]), STR_7(CODE[10]), 
		 -> STR_6(CODE[17]), STR_5(CODE[7]), STR_4(CODE[17]), STR_3(CODE[18]), 
		 -> STR_2(CODE[21]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_initSortTimer
    _initSortTimer->_getRTC
    _getIR->_readIR
    _readIR->_readADC
    _ID->_MAGNETISM_in
    _Distribution->_moveServoCup
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    ___awdiv->___awmod

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   38555
                         _PortTestA5
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0     927
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              1     1      0     833
                                             10 BANK0      1     1      0
                              _getIR
                          _initFlags
                      _initSortTimer
                            _lcdInst
                       _moveServoCup
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initFlags                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getIR                                                0     0      0      45
                             _readIR
 ---------------------------------------------------------------------------------
 (4) _readIR                                               1     1      0      45
                                              2 BANK0      1     1      0
                            _readADC
 ---------------------------------------------------------------------------------
 (5) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ID                                                   7     7      0      72
                                              2 BANK0      7     7      0
                       _MAGNETISM_in
                     _moveServoBlock
 ---------------------------------------------------------------------------------
 (3) _moveServoBlock                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _MAGNETISM_in                                         2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         0     0      0      22
                       _moveServoCup
 ---------------------------------------------------------------------------------
 (3) _moveServoCup                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   13210
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   12360
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  16    16      0   23745
                                             68 BANK0     16    16      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0    7532
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    1611
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    4828
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    4828
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              33    21     12    4693
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     593
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     680
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _PortTestA5                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   73560
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   68752
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7546
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4506
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30400
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2     406
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4808
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    2905
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     417
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PortTestA5
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _machineConfig
   _sort
     _Distribution
       _moveServoCup
     _ID
       _MAGNETISM_in
       _moveServoBlock
     _Loading
       _getIR
         _readIR
           _readADC
       _initFlags
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _moveServoCup
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       E       7        5.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     54      7D       5       97.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     109      34        0.0%
DATA                 0      0     109       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Feb 24 03:23:43 2017

                   i2_I2C_Master_Start 2A4C                     i2_I2C_Master_Write 2A20  
                                   _ID 1BA0                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0073  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C7  
                                  l184 2986                                    l417 00E0  
                                  l286 29AE                                    l289 29B4  
                                  l807 1F0C                           __CFG_CPB$OFF 000000  
                                  _PR2 000FCB                                    _PEN 007E2A  
                         __CFG_CPD$OFF 000000                                    _SEN 007E28  
                  ?i2_I2C_Master_Start 0001                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _log 00ED  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B        __end_of_change_state_to_menu_11 2660  
      __end_of_change_state_to_menu_12 2502        __end_of_change_state_to_menu_22 24CA  
      __end_of_change_state_to_menu_23 2630           _f_can_coming_to_distribution 00E5  
                       ??_Distribution 0081        __end_of_change_state_to_logs_11 2750  
      __end_of_change_state_to_logs_12 2720        __end_of_change_state_to_logs_22 26F0  
      __end_of_change_state_to_logs_23 27DA        __end_of_change_state_to_logs_33 26C0  
      __end_of_change_state_to_logs_34 2690                                   ??_ID 0082  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1040 0D7C  
                                 l1232 23F6                                   l1251 1E0A  
                                 l1243 2374                                   l4202 21C2  
                                 l4140 27A4                                   l4116 27EE  
                                 l4310 05AA                                   l4118 2800  
                                 l4320 05E8                                   l4304 0584  
                                 l5120 1C88                                   l1841 2026  
                                 l5210 1A1C                                   l4410 08BC  
                                 l4314 05B4                                   l1851 21D0  
                                 l4412 08C8                                   l4420 08F6  
                                 l4404 08A0                                   l4340 06A8  
                                 l4308 0598                                   l5300 00FE  
                                 l5214 1A30                                   l5206 1A0E  
                                 l5230 1D16                                   l4174 1FD6  
                                 l4158 2852                                   l4422 08FC  
                                 l4350 0720                                   l4176 1FE2  
                                 l4416 08E2                                   l4352 0738  
                                 l4336 0696                                   l4328 0664  
                                 l4360 077C                                   l5312 0132  
                                 l5304 0110                                   l5160 1C26  
                                 l5136 1CC4                                   l5250 1D82  
                                 l5242 1D60                                   l5234 1D2A  
                                 l5226 1D06                                   l4186 2018  
                                 l4178 1FE8                                   l4194 218C  
                                 l4426 0954                                   l4346 070E  
                                 l4338 06A2                                   l4362 07B0  
                                 l4434 1F72                                   l4450 2518  
                                 l5410 0302                                   l5330 0196  
                                 l5236 1D36                                   l4196 2198  
                                 l4372 07E0                                   l4356 0764  
                                 l4348 071A                                   l4428 0960  
                                 l4444 1FA8                                   l5316 0144  
                                 l5308 011A                                   l4460 1A78  
                                 l1788 1AE4                                   l5182 1998  
                                 l5238 1D3C                                   l5246 1D6E  
                                 l4198 219E                                   l4374 07E6  
                                 l4438 1F88                                   l5414 030C  
                                 l5334 01A0                                   l4470 1AD2  
                                 l4462 1A7E                                   l4392 0844  
                                 l4448 250C                                   l5512 04B0  
                                 l5504 048E                                   l5432 0358  
                                 l5424 0336                                   l5352 01EC  
                                 l5344 01CA                                   l5194 19CC  
                                 l4386 0822                                   l5530 0506  
                                 l5450 03AE                                   l5418 0324  
                                 l5370 0242                                   l5338 01B8  
                                 l4458 1A68                                   l4802 1DE8  
                                 l5196 19D8                                   l5188 19AE  
                                 l4396 087C                                   l4660 0DFE  
                                 l4652 0D86                                   l5508 0498  
                                 l5428 0340                                   l5348 01D4  
                                 l5198 19DE                                   l4398 0886  
                                 l4670 0E94                                   l4662 0E1C  
                                 l4654 0DA4                                   l4646 0CFA  
                                 l5534 0510                                   l5454 03B8  
                                 l5374 024C                                   l4830 2342  
                                 l4822 2406                                   l4672 0EB2  
                                 l4664 0E3A                                   l4656 0DC2  
                                 l4680 0F4C                                   l5552 055C  
                                 l5544 053A                                   l5472 0404  
                                 l5464 03E2                                   l5392 0298  
                                 l5384 0276                                   l4832 2352  
                                 l4816 23E6                                   l4674 0ED0  
                                 l4666 0E58                                   l4658 0DE0  
                                 l5538 0528                                   l5490 045A  
                                 l5458 03D0                                   l5378 0264  
                                 l5298 00F8                                   l4922 1E76  
                                 l4668 0E76                                   l5548 0544  
                                 l5468 03EC                                   l5388 0280  
                                 l5556 0568                                   l4836 2364  
                                 l4678 0EEE                                   l5494 0464  
                                 l4918 1E60                                   l4790 1D96  
                                 l4774 1B04                                   _ADIE 007CEE  
                                 l4928 1EA2                                   l4792 1DA6  
                                 l4784 1B90                                   _ADFM 007E07  
                                 l5498 047C                                   l4794 1DB6  
                                 l4778 1B1A                                   l4796 1DC6  
                                 l5860 1EE8                                   l4798 1DD6  
                                 l5870 1F08                                   l5862 1EEE  
                                 l5858 1EE2                                   l5874 1F0E  
                                 l5868 1F02                                   _ADON 007E10  
                                 STR_1 FEBA                                   STR_2 FDE8  
                                 STR_3 FDFD                                   STR_4 FF86  
                                 STR_5 FFC4                                   STR_6 FEFE  
                                 STR_7 FFB3                                   STR_8 FE0F  
                                 STR_9 FE98                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u2420 27A2                                   u2620 28EA  
                                 u3270 0D7C                                   u2630 28EC  
                                 u3255 220A                                   u2720 075A  
                                 u3550 1BD6                                   u2727 0750  
                                 u2680 06E2                                   _PEIE 007F96  
                                 u3580 1C16                                   u3558 1BDA  
                                 u2687 06D8                                   u3588 1C1A  
                                 _RCEN 007E2B                                   u4717 1C70  
                                 u4807 0206                                   u4727 27F6  
                                 u4817 0254                                   u4737 2390  
                                 u4907 046C                                   u4827 0288  
                                 u4747 23C4                                   u4917 04A0  
                                 u4837 02B2                                   u4757 002A  
                                 u4927 04CA                                   u4847 0314  
                                 u4767 0122                                   u4937 0518  
                                 u4857 0348                                   u4777 0152  
                                 u4947 054C                                   u4867 0372  
                                 u4787 01A8                                   u4957 2130  
                                 u4877 03C0                                   u4797 01DC  
                                 u4967 213A                                   u4887 03F4  
                                 u4977 2166                                   u4897 041E  
                                 u4987 2170                                   _THIR 00FC  
                                 _RSEN 007E29                            _stopSignals 2970  
                                 _back 005D                                   _main 1EAA  
                                 _down 0065                                   _keys FDB5  
                                 _time 00D4                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 28F4                                   btemp 007F  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                      __end_ofi2_putch 2A0A                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 1250  
                          i2_lcdNibble 2290                        __end_of_Loading 1CEA  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 1A3A  
                                STR_10 FEDC                                  STR_11 FEA9  
                                STR_20 FF64                                  STR_12 FEED  
                                STR_13 FECB                                  STR_21 FE65  
                                STR_30 FE32                                  STR_22 FE76  
                                STR_14 FFFB                                  STR_15 FF97  
                                STR_23 FF53                                  STR_31 FF31  
                                STR_32 FF31                                  STR_40 FFF7  
                                STR_16 FF75                                  STR_24 FF0F  
                                STR_41 FFDF                                  STR_17 FE76  
                                STR_33 FE54                                  STR_25 FE32  
                                STR_34 FE43                                  STR_50 FDE8  
                                STR_42 FFD7                                  STR_18 FE87  
                                STR_26 FE21                                  STR_43 FFD3  
                                STR_51 FFBD                                  STR_19 FF64  
                                STR_35 FF42                                  STR_27 FF20  
                                STR_28 FF20                                  STR_44 FFE3  
                                STR_36 FFDB                        __end_of___awmod 1D8C  
                                STR_45 FFEF                                  STR_37 FFCB  
                                STR_29 FE43                                  STR_46 FFF3  
                                STR_38 FFE7                                  STR_39 FFEB  
                                STR_47 FFCF                                  STR_48 FDD0  
                                STR_49 FFA8                                  ?_sort 0001  
                      __end_of___lldiv 1AF6                                  _T0CON 000FD5  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                                _T2CON 000FCA                                  _T3CON 000FB1  
                      __end_of___lwdiv 2030                        __end_of___lwmod 21DA  
                                i2l184 29C0                                  i2l469 124C  
                      ___awdiv@counter 008A                                  _VCFG0 007E0C  
                                _VCFG1 007E0D                                  _THMAG 007E  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 29F2  
                      __end_of_handler 197C                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 2806                        __end_of_initLCD 23CE  
                       __CFG_EBTRB$OFF 000000                             i2isdigit@c 0003  
                                _getIR 23CE                        __end_of_loadRTC 1EAA  
                                _block 0077                        __end_of_dpowers FDD0  
                                _first 00FA                                  _enter 0067  
                      __end_of_isdigit 285C                                  _input 0079  
                                _putch 29D2                                  pclath 000FFA  
                                tablat 000FF5                __size_of_moveServoBlock 0050  
                     __end_ofi2___wmul 28AA                       __end_ofi2_getRTC 20A2  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 0CC6  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
               moveServoCup@myPosition 0080                       __end_ofi2_strcpy 25A0  
                     _count_can_no_lab 005F                        __initialization 20A2  
                   __size_ofi2_lcdInst 000C                           __end_of_main 1F32  
                         __end_of_keys FDC6                           __end_of_sort 2916  
                           i2printf@ap 001E                             i2printf@cp 0020  
                   __size_ofi2_isdigit 001E    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00D4  
                 __end_of_MAGNETISM_in 29FE                                 ??_sort 008B  
                        __activetblptr 000003                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                    ?_I2C_Master_Write 0081                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADRESL 000FC3                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 25D0              i2_change_state_to_menu_22 25A0  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1040 12DE  
                               i2l1364 1924                                 i2l1367 1940  
                               i2l5000 16FC                                 i2l5002 1702  
                               i2l5020 1752                                 i2l5004 1708  
                               i2l5008 170E                                 i2l1841 232E  
                               i2l4226 28CA                                 i2l4250 294E  
                               i2l5050 17B6                                 i2l5034 1778  
                               i2l1851 244A                                 i2l4260 22FC  
                               i2l4500 099A                                 i2l5044 179E  
                               i2l5028 176A                                 i2l4262 2304  
                               i2l4502 09A8                                 i2l5062 17D8  
                               i2l5054 17C0                                 i2l5038 1794  
                               i2l4272 2324                                 i2l4264 2308  
                               i2l4280 2420                                 i2l4520 0A42  
                               i2l4512 09E0                                 i2l5080 181C  
                               i2l5072 17F8                                 i2l5048 17B2  
                               i2l4282 2428                                 i2l4602 0C20  
                               i2l4530 0A74                                 i2l4506 09AE  
                               i2l5090 1838                                 i2l4284 242C  
                               i2l4604 0C28                                 i2l4612 0C4E  
                               i2l4540 0ACC                                 i2l4532 0A78  
                               i2l4620 0CAA                                 i2l5084 182E  
                               i2l5076 180A                                 i2l5068 17E6  
                               i2l4614 0C54                                 i2l4542 0AD2  
                               i2l4288 2440                                 i2l4608 0C3C  
                               i2l4544 0AE4                                 i2l4528 0A6A  
                               i2l4552 0B20                                 i2l4624 2578  
                               i2l5600 1028                                 i2l4482 2068  
                               i2l4618 0CA2                                 i2l4538 0AC2  
                               i2l4554 0B50                                 i2l6082 1726  
                               i2l4626 2580                                 i2l6074 1200  
                               i2l4492 2092                                 i2l4564 0B78  
                               i2l4548 0B0E                                 i2l6084 1742  
                               i2l6076 1222                                 i2l5700 11B0  
                               i2l5620 1070                                 i2l5612 1054  
                               i2l5604 1038                                 i2l4486 2078  
                               i2l4590 0BF4                                 i2l4566 0B7C  
                               i2l4902 13F0                                 i2l6078 123E  
                               i2l4584 0BC8                                 i2l4496 098A  
                               i2l4904 144A                                 i2l5704 11BE  
                               i2l5640 10BE                                 i2l5632 10A2  
                               i2l5624 107E                                 i2l5616 1062  
                               i2l5608 1046                                 i2l4578 0BAE  
                               i2l5714 11E2                                 i2l4596 0C0A  
                               i2l4588 0BEC                                 i2l5804 1492  
                               i2l5708 11D4                                 i2l5660 1114  
                               i2l5652 10F0                                 i2l5644 10D4  
                               i2l5636 10B0                                 i2l5628 1094  
                               i2l5580 0FF0                                 i2l5572 0FD4  
                               i2l5814 14FC                                 i2l4870 127C  
                               i2l5566 0FC0                                 i2l5902 18F4  
                               i2l5824 15BE                                 i2l5808 14A2  
                               i2l4880 1314                                 i2l5680 1162  
                               i2l5672 113E                                 i2l5664 1122  
                               i2l5656 10FE                                 i2l5648 10E2  
                               i2l5592 100C                                 i2l5584 0FFE  
                               i2l5576 0FE2                                 i2l5568 0FC6  
                               i2l4890 1382                                 i2l4882 132A  
                               i2l4980 16B8                                 i2l4972 169E  
                               i2l4892 1398                                 i2l4884 1340  
                               i2l4876 12E8                                 i2l5692 1194  
                               i2l5684 1170                                 i2l5676 1154  
                               i2l5668 1130                                 i2l5596 101A  
                               i2l4982 16C8                                 i2l4990 16D6  
                               i2l4894 13AE                                 i2l4886 1356  
                               i2l4878 12FE                                 i2l5926 1936  
                               i2l4984 16CC                                 i2l4896 13C4  
                               i2l4888 136C                                 i2l5696 11A2  
                               i2l5688 117E                                 i2l5928 1938  
                               i2l4994 16EA                                 i2l4898 13DA  
                               i2l4996 16F0                                 i2l4998 16F6  
                               i2l5886 18D4                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR2IF 007CF1                                 _TMR3IE 007D01  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR2ON 007E52                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 008A                         __CFG_XINST$OFF 000000  
                     __end_of_dispLogs 29AE                            ?i2_printRTC 0001  
                 __end_of_Distribution 277E                                 ___wmul 2538  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                            ??___awmod 0084                                 _getRTC 1F32  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 2938                                 _initUI 2956  
                               _readIR 28D0                                 clear_0 20E8  
                               clear_1 20F4                                 clear_2 2100  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 29AE                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 0576  
                            ??_handler 004B                                 _strcpy 2502  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095   __end_ofi2_change_state_to_menu_start 2884  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 285C  
                         __pdataCOMRAM 007A                              ??_isdigit 0080  
                    __end_ofi2___lwdiv 2338                       __end_of_printRTC 0F90  
                         __mediumconst FDB4                      __end_ofi2___lwmod 2454  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                      __end_ofi2_lcdInst 2A16  
                    __end_ofi2_isdigit 2956                             __accesstop 0080  
              __end_of__initialization 2106                          ?_inputHandler 002A  
                        ___rparam_used 000001                printSortTimer@start_sec 003B  
                   i2___lwmod@dividend 0001                         __pcstackCOMRAM 0001  
                         __pidataBANK0 2A2A                          __end_of_getIR 2412  
                          i2printRTC@i 0041                          _initSortTimer 1AF6  
                        __end_of_putch 29E2                            i2printf@len 0024  
                          i2printf@val 0022                             __end_of_ID 1C48  
                           __end_of_UI 0576                     printSortTimer@hour 003F  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0068  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002D     __end_of_change_state_to_menu_start 2832  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 2806  
                printSortTimer@cur_sec 003D                              ?i2_printf 000D  
                              ??_getIR 0083                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0061                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                         _moveServoBlock 2338  
                           __pbssBANK0 00D4                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
                   __size_of_initFlags 003E               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                      printRTC@RTC_month 00BC  
                         ?i2_lcdNibble 0001                                UI@i_700 00D1  
                              UI@i_703 00D2                                UI@i_704 00D3  
                       ?_initSortTimer 0001                                UI@i_691 00CC  
                              UI@i_683 00C8                                UI@i_692 00CD  
                              UI@i_684 00C9                                UI@i_695 00CE  
                              UI@i_687 00CA                                UI@i_696 00CF  
                              UI@i_688 00CB                                UI@i_699 00D0  
                              ?___wmul 0080                  __size_of_MAGNETISM_in 000C  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0001                            ?_PortTestA5 0001  
                              ?_printf 008E              ID@top_bottom_conductivity 0083  
                              _UI$2167 00C5                                ?_strcpy 0080  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                        ?_moveServoCup 0001                             ??i2_printf 0019  
               __end_of_moveServoBlock 2388                             ??i2_strcpy 0005  
                            ?_dispLogs 0001                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              i2_putch 29FE                              ?_initTime 0080  
                         _MAGNETISM_in 29F2                        _f_loadingNewCan 00EB  
                      i2printRTC@month 003D                  __size_of_Distribution 002E  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 2178  
                              _Loading 1C48            __size_ofi2_I2C_Master_Write 000A  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 197C  
                              ___awmod 1CEA                                ___lldiv 1A3A  
                      __size_of___wmul 0036                                ___lwdiv 1FB8  
                              ___lwmod 2178                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                              _canType 0078                        __size_of_initUI 001A  
                      __size_of_readIR 0024                                __pcinit 20A2  
                              __ramtop 1000                                _lcdInst 29E2  
                              _handler 0008                                __ptext0 1EAA  
                              __ptext1 2970                                __ptext2 28F4  
                              __ptext3 1C48                                __ptext4 1AF6  
                              __ptext5 2454                                __ptext6 23CE  
                              __ptext7 28D0                                __ptext8 27DA  
                              __ptext9 1BA0                      __end_of_initFlags 2492  
                      __size_of_printf 040A                         ??_moveServoCup 0080  
                              _readADC 27DA                        __size_of_strcpy 0036  
                              _initLCD 2388                                _loadRTC 1E1E  
                              _dpowers FDC6                                _isdigit 2832  
                     ___awmod@dividend 0080                                getRTC@i 0083  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                              _was_low 0075                        ?_moveServoBlock 0001  
                           ??_dispLogs 0003                           _Distribution 2750  
                       __pintcode_body 1866                   end_of_initialization 2106  
                           ??_initTime 0086                                int_func 1866  
                  i2___wmul@multiplier 0001                    __size_of_PortTestA5 0012  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 1866  
                __end_of_machineConfig 2290                             _updateMenu 0F90  
                    i2_I2C_Master_Read 28AA                              _IR_signal 00DB  
                    i2_I2C_Master_Wait 29C0                      i2_I2C_Master_Stop 2A44  
                    i2___lwdiv@divisor 0008                              i2___lwdiv 22E6  
                            i2___lwmod 2412                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 1486                     ?i2_I2C_Master_Stop 0001  
         ??_change_state_to_menu_start 00C4                              i2_lcdInst 2A0A  
                           _total_time 00F1                            printf@width 00A9  
                 __size_of_stopSignals 0016                             ID@magnetic 0087  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 2938  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                              _UIenabled 005B  
                       __end_of___wmul 256E                         __end_of_getRTC 1FB8  
                 __size_ofi2_lcdNibble 0056                          __pidataCOMRAM 2A54  
                        i2lcdInst@data 0003                         __end_of_initUI 2970  
                       __end_of_readIR 28F4                       i2___wmul@product 0005  
                       __end_of_printf 0980                         _timer1highbits 006B  
                         i2printf@flag 0026                         __end_of_strcpy 2538  
            __end_ofi2_I2C_Master_Read 28D0              __end_ofi2_I2C_Master_Wait 29D2  
                         i2printf@prec 001D                    start_initialization 20A2  
            __end_ofi2_I2C_Master_Stop 2A4C                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 00DD            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                         _timer3highbits 006F  
                            i2printf@c 0027                              i2printf@f 000D  
                i2I2C_Master_Read@temp 0003                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 0346  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                   __end_of_moveServoCup 1E1E  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                             ??___wmul 0084                               ??_getRTC 0083  
                          __pdataBANK0 00F4                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                         ??_PortTestA5 0080                 printSortTimer@timeDiff 0047  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2282 0045                            __pbssCOMRAM 005B  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
              __size_of_printSortTimer 01FA                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$1808 0081  
                       initSortTimer@i 0088                      printSortTimer@min 0041  
                    printSortTimer@sec 0043                      __size_of_dispLogs 0014  
                     printRTC@INT_time 00AE                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 0063  
                   __end_of_PortTestA5 29C0                       _I2C_Master_Start 2A3C  
                            _f_lastCan 00E9                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 2A16  
                    __size_of_initTime 0022                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                        __pmediumconst FDB4                              _lcdNibble 2110  
                __size_of_inputHandler 01E6                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                             ?___lwdiv 0080                               ?___lwmod 0087  
                    __size_of_printRTC 02CA                               ?_lcdInst 0001  
                             ?_handler 0001                       ??_moveServoBlock 0080  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 0069  
                            _initFlags 2454                              _cur_state 00E1  
                     ___lwdiv@quotient 0084                         __size_of_getIR 0044  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 00A8  
                          __size_of_UI 0564             __end_ofi2_I2C_Master_Start 2A54  
           __end_ofi2_I2C_Master_Write 2A2A                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                         _inputHandler 1680                            ??i2_isdigit 0001  
                             i2u302_40 0AA6                               i2u302_47 0A9C  
                             i2u306_40 0B06                               i2u306_47 0AFC  
                             i2u252_40 28C8                               i2u500_47 22A8  
                             i2u501_47 22B2                               i2u502_47 22D4  
                             i2u335_40 12DE                               i2u503_47 22DE  
                             i2u460_40 15B8                               i2u499_47 16BE  
                  __size_of_updateMenu 02C0                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                    ID@side_conductivity 0085  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 0100                               i2___wmul 2884  
                        lcdNibble@data 0081                               i2_getRTC 2030  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                             ?_initFlags 0001  
                             i2_printf 0980                               i2_strcpy 256E  
                  I2C_Master_Read@temp 0082                              copy_data0 20B6  
                            copy_data1 20D6                  __size_of_moveServoCup 0092  
                            readIR@res 0082                       __size_ofi2_putch 000C  
                        _timer1lowbits 006D                            _count_total 00DF  
                             __Hrparam 0000                          _timer3lowbits 0071  
                     __size_of_Loading 00A2                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                  __end_of_initSortTimer 1BA0  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 2630             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 24CA             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 2492                _change_state_to_menu_23 2600  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 2720  
              _change_state_to_logs_12 26F0                _change_state_to_logs_22 26C0  
              _change_state_to_logs_23 27AC                _change_state_to_logs_33 2690  
              _change_state_to_logs_34 2660                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 1974  
                     _timer1_20ms_high 007A                        _I2C_Master_Init 21DA  
                     __size_of_readADC 002C                        _I2C_Master_Read 277E  
                     __size_of_initLCD 0046                           _f_ID_receive 00F8  
                         _moveServoCup 1D8C                       __size_of_loadRTC 008C  
                      _I2C_Master_Wait 2986                        _I2C_Master_Stop 2A34  
                     __size_of_isdigit 002A                         _printSortTimer 1486  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                             __ptext10 2338                               __ptext11 29F2  
                             __ptext20 2916                               __ptext12 2750  
                             __ptext21 2388                               __ptext13 1D8C  
                             __ptext30 2986                               __ptext22 0012  
                             __ptext14 223A                               __ptext31 2492  
                             __ptext23 0CC6                               __ptext15 2956  
                             __ptext40 2110                               __ptext32 24CA  
                             __ptext24 2502                               __ptext16 1E1E  
                             __ptext41 1CEA                               __ptext33 0576  
                             __ptext25 1F32                               __ptext17 21DA  
                             __ptext50 25A0                               __ptext42 197C  
                             __ptext34 29D2                               __ptext26 2A16  
                             __ptext18 1A3A                               __ptext51 25D0  
                             __ptext43 29AE                               __ptext35 2832  
                             __ptext27 2A34                               __ptext19 2806  
                             __ptext60 299A                               __ptext52 2600  
                             __ptext36 2538                               __ptext28 2A3C  
                             __ptext61 1486                               __ptext53 2630  
                             __ptext45 0F90                               __ptext37 2178  
                             __ptext29 277E                               __ptext70 2030  
                             __ptext62 0980                               __ptext54 2660  
                             __ptext46 285C                               __ptext38 1FB8  
                             __ptext71 2A20                               __ptext63 29FE  
                             __ptext55 2690                               __ptext47 1250  
                             __ptext39 29E2                               __ptext72 2A44  
                             __ptext64 2938                               __ptext56 27AC  
                             __ptext48 256E                               __ptext73 2A4C  
                             __ptext65 2884                               __ptext57 26C0  
                             __ptext49 1680                               __ptext74 28AA  
                             __ptext66 2412                               __ptext58 26F0  
                             __ptext75 29C0                               __ptext67 22E6  
                             __ptext59 2720                               __ptext68 2A0A  
                             __ptext69 2290                               _dispLogs 299A  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$1808 0002                               _initTime 2916  
                        __size_of_main 0088                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00EF  
               __size_of_machineConfig 0056                          ??i2_lcdNibble 0001  
                             _printRTC 0CC6                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007F  
                   _f_can_coming_to_ID 00E3                              printf@len 00A5  
                            printf@val 00A3      __end_ofi2_change_state_to_menu_12 2600  
    __end_ofi2_change_state_to_menu_22 25D0                               loadRTC@i 0096  
               __end_of_printSortTimer 1680                              putch@data 0082  
             __end_of_I2C_Master_Start 2A44                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 2A20                             _INTCONbits 000FF2  
                         ??_updateMenu 0043                            ??_initFlags 0080  
                             isdigit@c 0082                               intlevel2 0000  
                      _timer1_20ms_low 007C                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                          ?_MAGNETISM_in 0080  
                  __end_of_stopSignals 2986              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 009F  
                             printf@cp 00A1                     __end_of_updateMenu 1250  
              __end_of_I2C_Master_Init 223A                __end_of_I2C_Master_Read 27AC  
              __end_of_I2C_Master_Wait 299A                __end_of_I2C_Master_Stop 2A3C  
                        printRTC@F3206 00F4                            lcdInst@data 0082  
                  __end_ofi2_lcdNibble 22E6                        ?_printSortTimer 0001  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                      ___lwmod@divisor 0089                      _f_can_distributed 00E7  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 223A                        ___lwmod@counter 008B  
             moveServoBlock@myPosition 0080                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00F3  
                       ??_MAGNETISM_in 0082                          dispLogs@myLog 0001  
                   i2printRTC@INT_time 002D  
