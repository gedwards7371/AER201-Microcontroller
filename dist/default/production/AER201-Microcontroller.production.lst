

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Apr 12 15:16:55 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	text97,global,reloc=2,class=CODE,delta=1
   113                           	psect	text98,global,reloc=2,class=CODE,delta=1
   114                           	psect	text99,global,reloc=2,class=CODE,delta=1
   115                           	psect	text100,global,reloc=2,class=CODE,delta=1
   116                           	psect	text101,global,reloc=2,class=CODE,delta=1
   117                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   118                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   119                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   120  0000                     
   121                           ; Version 1.40
   122                           ; Generated 01/12/2016 GMT
   123                           ; 
   124                           ; Copyright © 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   125                           ; All rights reserved.
   126                           ; 
   127                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   128                           ; 
   129                           ; Redistribution and use in source and binary forms, with or without modification, are
   130                           ; permitted provided that the following conditions are met:
   131                           ; 
   132                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   133                           ;        conditions and the following disclaimer.
   134                           ; 
   135                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   136                           ;        of conditions and the following disclaimer in the documentation and/or other
   137                           ;        materials provided with the distribution.
   138                           ; 
   139                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   140                           ;        software without specific prior written permission.
   141                           ; 
   142                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   143                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   144                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   145                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   146                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   147                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   148                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   149                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   150                           ; 
   151                           ; 
   152                           ; Code-generator required, PIC18F4620 Definitions
   153                           ; 
   154                           ; SFR Addresses
   155  0000                     
   156                           	psect	idataBANK1
   157  006116                     __pidataBANK1:
   158                           	opt stack 0
   159                           
   160                           ;initializer for UI@F3252
   161  006116  4D                 	db	77
   162  006117  4D                 	db	77
   163  006118  4D                 	db	77
   164  006119  00                 	db	0
   165                           
   166                           ;initializer for printRTC@F3242
   167  00611A  4D                 	db	77
   168  00611B  4D                 	db	77
   169  00611C  4D                 	db	77
   170  00611D  00                 	db	0
   171                           
   172                           	psect	mediumconst
   173  00FAA6                     __pmediumconst:
   174                           	opt stack 0
   175  00FAA6  00                 	db	0
   176  00FAA7                     _keys:
   177                           	opt stack 0
   178  00FAA7  31                 	db	49
   179  00FAA8  32                 	db	50
   180  00FAA9  33                 	db	51
   181  00FAAA  41                 	db	65
   182  00FAAB  34                 	db	52
   183  00FAAC  35                 	db	53
   184  00FAAD  36                 	db	54
   185  00FAAE  42                 	db	66
   186  00FAAF  37                 	db	55
   187  00FAB0  38                 	db	56
   188  00FAB1  39                 	db	57
   189  00FAB2  43                 	db	67
   190  00FAB3  2A                 	db	42
   191  00FAB4  30                 	db	48
   192  00FAB5  23                 	db	35
   193  00FAB6  44                 	db	68
   194  00FAB7  00                 	db	0
   195  00FAB8                     __end_of_keys:
   196                           	opt stack 0
   197  00FAB8                     _dpowers:
   198                           	opt stack 0
   199  00FAB8  0001               	dw	1
   200  00FABA  000A               	dw	10
   201  00FABC  0064               	dw	100
   202  00FABE  03E8               	dw	1000
   203  00FAC0  2710               	dw	10000
   204  00FAC2                     __end_of_dpowers:
   205                           	opt stack 0
   206  0000                     _ADCON0	set	4034
   207  0000                     _ADCON0bits	set	4034
   208  0000                     _ADCON1	set	4033
   209  0000                     _ADCON2	set	4032
   210  0000                     _ADRESH	set	4036
   211  0000                     _ADRESL	set	4035
   212  0000                     _CMCONbits	set	4020
   213  0000                     _CVRCON	set	4021
   214  0000                     _EEADR	set	4009
   215  0000                     _EEADRH	set	4010
   216  0000                     _EECON1bits	set	4006
   217  0000                     _EECON2	set	4007
   218  0000                     _EEDATA	set	4008
   219  0000                     _INTCONbits	set	4082
   220  0000                     _LATA	set	3977
   221  0000                     _LATAbits	set	3977
   222  0000                     _LATB	set	3978
   223  0000                     _LATBbits	set	3978
   224  0000                     _LATC	set	3979
   225  0000                     _LATCbits	set	3979
   226  0000                     _LATD	set	3980
   227  0000                     _LATDbits	set	3980
   228  0000                     _LATE	set	3981
   229  0000                     _OSCCON	set	4051
   230  0000                     _OSCTUNEbits	set	3995
   231  0000                     _PIR2bits	set	4001
   232  0000                     _PORTAbits	set	3968
   233  0000                     _PORTB	set	3969
   234  0000                     _PORTBbits	set	3969
   235  0000                     _PR2	set	4043
   236  0000                     _SSPADD	set	4040
   237  0000                     _SSPBUF	set	4041
   238  0000                     _SSPCON1	set	4038
   239  0000                     _SSPCON2	set	4037
   240  0000                     _SSPSTAT	set	4039
   241  0000                     _T0CON	set	4053
   242  0000                     _T1CON	set	4045
   243  0000                     _T2CON	set	4042
   244  0000                     _T3CON	set	4017
   245  0000                     _TMR0H	set	4055
   246  0000                     _TMR0L	set	4054
   247  0000                     _TMR1H	set	4047
   248  0000                     _TMR1L	set	4046
   249  0000                     _TMR3H	set	4019
   250  0000                     _TMR3L	set	4018
   251  0000                     _TRISA	set	3986
   252  0000                     _TRISB	set	3987
   253  0000                     _TRISC	set	3988
   254  0000                     _TRISD	set	3989
   255  0000                     _TRISE	set	3990
   256  0000                     _ACKDT	set	32301
   257  0000                     _ACKEN	set	32300
   258  0000                     _ADIE	set	31982
   259  0000                     _INT1IE	set	32643
   260  0000                     _INT1IF	set	32640
   261  0000                     _PEIE	set	32662
   262  0000                     _PEN	set	32298
   263  0000                     _RCEN	set	32299
   264  0000                     _RSEN	set	32297
   265  0000                     _SEN	set	32296
   266  0000                     _TMR0IE	set	32661
   267  0000                     _TMR0IF	set	32658
   268  0000                     _TMR0ON	set	32431
   269  0000                     _TMR1IE	set	31976
   270  0000                     _TMR1IF	set	31984
   271  0000                     _TMR1ON	set	32360
   272  0000                     _TMR2IE	set	31977
   273  0000                     _TMR2IF	set	31985
   274  0000                     _TMR2ON	set	32338
   275  0000                     _TMR3IE	set	32001
   276  0000                     _TMR3IF	set	32009
   277  0000                     _TMR3ON	set	32136
   278  0000                     _TRISC3	set	31907
   279  0000                     _TRISC4	set	31908
   280  0000                     _nRBPU	set	32655
   281  00FAC2                     STR_21:
   282  00FAC2  25                 	db	37
   283  00FAC3  30                 	db	48	;'0'
   284  00FAC4  32                 	db	50	;'2'
   285  00FAC5  64                 	db	100	;'d'
   286  00FAC6  25                 	db	37
   287  00FAC7  73                 	db	115	;'s'
   288  00FAC8  20                 	db	32
   289  00FAC9  7C                 	db	124
   290  00FACA  20                 	db	32
   291  00FACB  25                 	db	37
   292  00FACC  30                 	db	48	;'0'
   293  00FACD  32                 	db	50	;'2'
   294  00FACE  64                 	db	100	;'d'
   295  00FACF  3A                 	db	58	;':'
   296  00FAD0  25                 	db	37
   297  00FAD1  30                 	db	48	;'0'
   298  00FAD2  32                 	db	50	;'2'
   299  00FAD3  64                 	db	100	;'d'
   300  00FAD4  3A                 	db	58	;':'
   301  00FAD5  25                 	db	37
   302  00FAD6  30                 	db	48	;'0'
   303  00FAD7  32                 	db	50	;'2'
   304  00FAD8  64                 	db	100	;'d'
   305  00FAD9  00                 	db	0
   306  00FADA                     STR_66:
   307  00FADA  28                 	db	40
   308  00FADB  64                 	db	100	;'d'
   309  00FADC  61                 	db	97	;'a'
   310  00FADD  74                 	db	116	;'t'
   311  00FADE  61                 	db	97	;'a'
   312  00FADF  3A                 	db	58	;':'
   313  00FAE0  20                 	db	32
   314  00FAE1  25                 	db	37
   315  00FAE2  75                 	db	117	;'u'
   316  00FAE3  2C                 	db	44
   317  00FAE4  20                 	db	32
   318  00FAE5  61                 	db	97	;'a'
   319  00FAE6  64                 	db	100	;'d'
   320  00FAE7  64                 	db	100	;'d'
   321  00FAE8  72                 	db	114	;'r'
   322  00FAE9  3A                 	db	58	;':'
   323  00FAEA  20                 	db	32
   324  00FAEB  25                 	db	37
   325  00FAEC  75                 	db	117	;'u'
   326  00FAED  29                 	db	41
   327  00FAEE  00                 	db	0
   328  00FAEF                     STR_112:
   329  00FAEF  44                 	db	68	;'D'
   330  00FAF0  20                 	db	32
   331  00FAF1  57                 	db	87	;'W'
   332  00FAF2  49                 	db	73	;'I'
   333  00FAF3  4C                 	db	76	;'L'
   334  00FAF4  4C                 	db	76	;'L'
   335  00FAF5  20                 	db	32
   336  00FAF6  52                 	db	82	;'R'
   337  00FAF7  45                 	db	69	;'E'
   338  00FAF8  54                 	db	84	;'T'
   339  00FAF9  55                 	db	85	;'U'
   340  00FAFA  52                 	db	82	;'R'
   341  00FAFB  4E                 	db	78	;'N'
   342  00FAFC  20                 	db	32
   343  00FAFD  20                 	db	32
   344  00FAFE  20                 	db	32
   345  00FAFF  20                 	db	32
   346  00FB00  00                 	db	0
   347  00FB01                     STR_120:
   348  00FB01  4F                 	db	79	;'O'
   349  00FB02  54                 	db	84	;'T'
   350  00FB03  48                 	db	72	;'H'
   351  00FB04  45                 	db	69	;'E'
   352  00FB05  52                 	db	82	;'R'
   353  00FB06  20                 	db	32
   354  00FB07  53                 	db	83	;'S'
   355  00FB08  45                 	db	69	;'E'
   356  00FB09  54                 	db	84	;'T'
   357  00FB0A  53                 	db	83	;'S'
   358  00FB0B  20                 	db	32
   359  00FB0C  52                 	db	82	;'R'
   360  00FB0D  41                 	db	65	;'A'
   361  00FB0E  35                 	db	53	;'5'
   362  00FB0F  20                 	db	32
   363  00FB10  20                 	db	32
   364  00FB11  20                 	db	32
   365  00FB12  00                 	db	0
   366  00FB13                     STR_81:
   367  00FB13  49                 	db	73	;'I'
   368  00FB14  52                 	db	82	;'R'
   369  00FB15  20                 	db	32
   370  00FB16  28                 	db	40
   371  00FB17  52                 	db	82	;'R'
   372  00FB18  45                 	db	69	;'E'
   373  00FB19  46                 	db	70	;'F'
   374  00FB1A  4C                 	db	76	;'L'
   375  00FB1B  45                 	db	69	;'E'
   376  00FB1C  43                 	db	67	;'C'
   377  00FB1D  29                 	db	41
   378  00FB1E  3A                 	db	58	;':'
   379  00FB1F  20                 	db	32
   380  00FB20  25                 	db	37
   381  00FB21  64                 	db	100	;'d'
   382  00FB22  20                 	db	32
   383  00FB23  20                 	db	32
   384  00FB24  00                 	db	0
   385  00FB25                     STR_79:
   386  00FB25  49                 	db	73	;'I'
   387  00FB26  52                 	db	82	;'R'
   388  00FB27  20                 	db	32
   389  00FB28  28                 	db	40
   390  00FB29  50                 	db	80	;'P'
   391  00FB2A  55                 	db	85	;'U'
   392  00FB2B  53                 	db	83	;'S'
   393  00FB2C  48                 	db	72	;'H'
   394  00FB2D  45                 	db	69	;'E'
   395  00FB2E  52                 	db	82	;'R'
   396  00FB2F  29                 	db	41
   397  00FB30  3A                 	db	58	;':'
   398  00FB31  20                 	db	32
   399  00FB32  25                 	db	37
   400  00FB33  64                 	db	100	;'d'
   401  00FB34  20                 	db	32
   402  00FB35  20                 	db	32
   403  00FB36  00                 	db	0
   404  00FB37                     STR_119:
   405  00FB37  53                 	db	83	;'S'
   406  00FB38  3A                 	db	58	;':'
   407  00FB39  20                 	db	32
   408  00FB3A  44                 	db	68	;'D'
   409  00FB3B  20                 	db	32
   410  00FB3C  57                 	db	87	;'W'
   411  00FB3D  49                 	db	73	;'I'
   412  00FB3E  4C                 	db	76	;'L'
   413  00FB3F  4C                 	db	76	;'L'
   414  00FB40  20                 	db	32
   415  00FB41  52                 	db	82	;'R'
   416  00FB42  45                 	db	69	;'E'
   417  00FB43  54                 	db	84	;'T'
   418  00FB44  55                 	db	85	;'U'
   419  00FB45  52                 	db	82	;'R'
   420  00FB46  4E                 	db	78	;'N'
   421  00FB47  20                 	db	32
   422  00FB48  00                 	db	0
   423  00FB49                     STR_122:
   424  00FB49  4F                 	db	79	;'O'
   425  00FB4A  54                 	db	84	;'T'
   426  00FB4B  48                 	db	72	;'H'
   427  00FB4C  45                 	db	69	;'E'
   428  00FB4D  52                 	db	82	;'R'
   429  00FB4E  3A                 	db	58	;':'
   430  00FB4F  20                 	db	32
   431  00FB50  43                 	db	67	;'C'
   432  00FB51  41                 	db	65	;'A'
   433  00FB52  4D                 	db	77	;'M'
   434  00FB53  20                 	db	32
   435  00FB54  54                 	db	84	;'T'
   436  00FB55  4F                 	db	79	;'O'
   437  00FB56  47                 	db	71	;'G'
   438  00FB57  47                 	db	71	;'G'
   439  00FB58  4C                 	db	76	;'L'
   440  00FB59  45                 	db	69	;'E'
   441  00FB5A  00                 	db	0
   442  00FB5B                     STR_128:
   443  00FB5B  4F                 	db	79	;'O'
   444  00FB5C  54                 	db	84	;'T'
   445  00FB5D  48                 	db	72	;'H'
   446  00FB5E  45                 	db	69	;'E'
   447  00FB5F  52                 	db	82	;'R'
   448  00FB60  20                 	db	32
   449  00FB61  53                 	db	83	;'S'
   450  00FB62  45                 	db	69	;'E'
   451  00FB63  54                 	db	84	;'T'
   452  00FB64  53                 	db	83	;'S'
   453  00FB65  20                 	db	32
   454  00FB66  50                 	db	80	;'P'
   455  00FB67  55                 	db	85	;'U'
   456  00FB68  53                 	db	83	;'S'
   457  00FB69  48                 	db	72	;'H'
   458  00FB6A  45                 	db	69	;'E'
   459  00FB6B  52                 	db	82	;'R'
   460  00FB6C  00                 	db	0
   461  00FB6D                     STR_3:
   462  00FB6D  2D                 	db	45
   463  00FB6E  2D                 	db	45
   464  00FB6F  20                 	db	32
   465  00FB70  4C                 	db	76	;'L'
   466  00FB71  4F                 	db	79	;'O'
   467  00FB72  47                 	db	71	;'G'
   468  00FB73  20                 	db	32
   469  00FB74  25                 	db	37
   470  00FB75  32                 	db	50	;'2'
   471  00FB76  64                 	db	100	;'d'
   472  00FB77  20                 	db	32
   473  00FB78  48                 	db	72	;'H'
   474  00FB79  45                 	db	69	;'E'
   475  00FB7A  52                 	db	82	;'R'
   476  00FB7B  45                 	db	69	;'E'
   477  00FB7C  2D                 	db	45
   478  00FB7D  2D                 	db	45
   479  00FB7E  00                 	db	0
   480  00FB7F                     STR_1:
   481  00FB7F  52                 	db	82	;'R'
   482  00FB80  45                 	db	69	;'E'
   483  00FB81  53                 	db	83	;'S'
   484  00FB82  55                 	db	85	;'U'
   485  00FB83  4C                 	db	76	;'L'
   486  00FB84  54                 	db	84	;'T'
   487  00FB85  53                 	db	83	;'S'
   488  00FB86  20                 	db	32
   489  00FB87  49                 	db	73	;'I'
   490  00FB88  4E                 	db	78	;'N'
   491  00FB89  20                 	db	32
   492  00FB8A  4C                 	db	76	;'L'
   493  00FB8B  4F                 	db	79	;'O'
   494  00FB8C  47                 	db	71	;'G'
   495  00FB8D  20                 	db	32
   496  00FB8E  25                 	db	37
   497  00FB8F  64                 	db	100	;'d'
   498  00FB90  00                 	db	0
   499  00FB91                     STR_103:
   500  00FB91  4D                 	db	77	;'M'
   501  00FB92  49                 	db	73	;'I'
   502  00FB93  44                 	db	68	;'D'
   503  00FB94  20                 	db	32
   504  00FB95  2D                 	db	45
   505  00FB96  2D                 	db	45
   506  00FB97  20                 	db	32
   507  00FB98  32                 	db	50	;'2'
   508  00FB99  73                 	db	115	;'s'
   509  00FB9A  20                 	db	32
   510  00FB9B  20                 	db	32
   511  00FB9C  20                 	db	32
   512  00FB9D  20                 	db	32
   513  00FB9E  20                 	db	32
   514  00FB9F  20                 	db	32
   515  00FBA0  20                 	db	32
   516  00FBA1  00                 	db	0
   517  00FBA2                     STR_106:
   518  00FBA2  44                 	db	68	;'D'
   519  00FBA3  52                 	db	82	;'R'
   520  00FBA4  4F                 	db	79	;'O'
   521  00FBA5  50                 	db	80	;'P'
   522  00FBA6  20                 	db	32
   523  00FBA7  2D                 	db	45
   524  00FBA8  2D                 	db	45
   525  00FBA9  20                 	db	32
   526  00FBAA  32                 	db	50	;'2'
   527  00FBAB  73                 	db	115	;'s'
   528  00FBAC  20                 	db	32
   529  00FBAD  20                 	db	32
   530  00FBAE  20                 	db	32
   531  00FBAF  20                 	db	32
   532  00FBB0  20                 	db	32
   533  00FBB1  20                 	db	32
   534  00FBB2  00                 	db	0
   535  00FBB3                     STR_100:
   536  00FBB3  4C                 	db	76	;'L'
   537  00FBB4  45                 	db	69	;'E'
   538  00FBB5  46                 	db	70	;'F'
   539  00FBB6  54                 	db	84	;'T'
   540  00FBB7  20                 	db	32
   541  00FBB8  2D                 	db	45
   542  00FBB9  2D                 	db	45
   543  00FBBA  20                 	db	32
   544  00FBBB  32                 	db	50	;'2'
   545  00FBBC  73                 	db	115	;'s'
   546  00FBBD  20                 	db	32
   547  00FBBE  20                 	db	32
   548  00FBBF  20                 	db	32
   549  00FBC0  20                 	db	32
   550  00FBC1  20                 	db	32
   551  00FBC2  20                 	db	32
   552  00FBC3  00                 	db	0
   553  00FBC4                     STR_105:
   554  00FBC4  4C                 	db	76	;'L'
   555  00FBC5  45                 	db	69	;'E'
   556  00FBC6  56                 	db	86	;'V'
   557  00FBC7  45                 	db	69	;'E'
   558  00FBC8  4C                 	db	76	;'L'
   559  00FBC9  20                 	db	32
   560  00FBCA  2D                 	db	45
   561  00FBCB  2D                 	db	45
   562  00FBCC  20                 	db	32
   563  00FBCD  32                 	db	50	;'2'
   564  00FBCE  73                 	db	115	;'s'
   565  00FBCF  20                 	db	32
   566  00FBD0  20                 	db	32
   567  00FBD1  20                 	db	32
   568  00FBD2  20                 	db	32
   569  00FBD3  20                 	db	32
   570  00FBD4  00                 	db	0
   571  00FBD5                     STR_99:
   572  00FBD5  52                 	db	82	;'R'
   573  00FBD6  49                 	db	73	;'I'
   574  00FBD7  47                 	db	71	;'G'
   575  00FBD8  48                 	db	72	;'H'
   576  00FBD9  54                 	db	84	;'T'
   577  00FBDA  20                 	db	32
   578  00FBDB  2D                 	db	45
   579  00FBDC  2D                 	db	45
   580  00FBDD  20                 	db	32
   581  00FBDE  32                 	db	50	;'2'
   582  00FBDF  73                 	db	115	;'s'
   583  00FBE0  20                 	db	32
   584  00FBE1  20                 	db	32
   585  00FBE2  20                 	db	32
   586  00FBE3  20                 	db	32
   587  00FBE4  20                 	db	32
   588  00FBE5  00                 	db	0
   589  00FBE6                     STR_98:
   590  00FBE6  4D                 	db	77	;'M'
   591  00FBE7  49                 	db	73	;'I'
   592  00FBE8  44                 	db	68	;'D'
   593  00FBE9  44                 	db	68	;'D'
   594  00FBEA  4C                 	db	76	;'L'
   595  00FBEB  45                 	db	69	;'E'
   596  00FBEC  20                 	db	32
   597  00FBED  2D                 	db	45
   598  00FBEE  2D                 	db	45
   599  00FBEF  20                 	db	32
   600  00FBF0  32                 	db	50	;'2'
   601  00FBF1  73                 	db	115	;'s'
   602  00FBF2  20                 	db	32
   603  00FBF3  20                 	db	32
   604  00FBF4  20                 	db	32
   605  00FBF5  20                 	db	32
   606  00FBF6  00                 	db	0
   607  00FBF7                     STR_113:
   608  00FBF7  4F                 	db	79	;'O'
   609  00FBF8  54                 	db	84	;'T'
   610  00FBF9  48                 	db	72	;'H'
   611  00FBFA  45                 	db	69	;'E'
   612  00FBFB  52                 	db	82	;'R'
   613  00FBFC  20                 	db	32
   614  00FBFD  53                 	db	83	;'S'
   615  00FBFE  45                 	db	69	;'E'
   616  00FBFF  54                 	db	84	;'T'
   617  00FC00  53                 	db	83	;'S'
   618  00FC01  20                 	db	32
   619  00FC02  44                 	db	68	;'D'
   620  00FC03  43                 	db	67	;'C'
   621  00FC04  20                 	db	32
   622  00FC05  20                 	db	32
   623  00FC06  20                 	db	32
   624  00FC07  00                 	db	0
   625  00FC08                     STR_125:
   626  00FC08  44                 	db	68	;'D'
   627  00FC09  20                 	db	32
   628  00FC0A  57                 	db	87	;'W'
   629  00FC0B  49                 	db	73	;'I'
   630  00FC0C  4C                 	db	76	;'L'
   631  00FC0D  4C                 	db	76	;'L'
   632  00FC0E  20                 	db	32
   633  00FC0F  52                 	db	82	;'R'
   634  00FC10  45                 	db	69	;'E'
   635  00FC11  54                 	db	84	;'T'
   636  00FC12  55                 	db	85	;'U'
   637  00FC13  52                 	db	82	;'R'
   638  00FC14  4E                 	db	78	;'N'
   639  00FC15  20                 	db	32
   640  00FC16  20                 	db	32
   641  00FC17  20                 	db	32
   642  00FC18  00                 	db	0
   643  00FC19                     STR_116:
   644  00FC19  35                 	db	53	;'5'
   645  00FC1A  3A                 	db	58	;':'
   646  00FC1B  48                 	db	72	;'H'
   647  00FC1C  7C                 	db	124
   648  00FC1D  36                 	db	54	;'6'
   649  00FC1E  3A                 	db	58	;':'
   650  00FC1F  4C                 	db	76	;'L'
   651  00FC20  7C                 	db	124
   652  00FC21  49                 	db	73	;'I'
   653  00FC22  52                 	db	82	;'R'
   654  00FC23  3A                 	db	58	;':'
   655  00FC24  25                 	db	37
   656  00FC25  64                 	db	100	;'d'
   657  00FC26  20                 	db	32
   658  00FC27  20                 	db	32
   659  00FC28  20                 	db	32
   660  00FC29  00                 	db	0
   661  00FC2A                     STR_114:
   662  00FC2A  31                 	db	49	;'1'
   663  00FC2B  3A                 	db	58	;':'
   664  00FC2C  20                 	db	32
   665  00FC2D  44                 	db	68	;'D'
   666  00FC2E  43                 	db	67	;'C'
   667  00FC2F  20                 	db	32
   668  00FC30  7C                 	db	124
   669  00FC31  20                 	db	32
   670  00FC32  41                 	db	65	;'A'
   671  00FC33  3A                 	db	58	;':'
   672  00FC34  20                 	db	32
   673  00FC35  41                 	db	65	;'A'
   674  00FC36  52                 	db	82	;'R'
   675  00FC37  4D                 	db	77	;'M'
   676  00FC38  20                 	db	32
   677  00FC39  20                 	db	32
   678  00FC3A  00                 	db	0
   679  00FC3B                     STR_101:
   680  00FC3B  4D                 	db	77	;'M'
   681  00FC3C  49                 	db	73	;'I'
   682  00FC3D  44                 	db	68	;'D'
   683  00FC3E  2D                 	db	45
   684  00FC3F  4C                 	db	76	;'L'
   685  00FC40  45                 	db	69	;'E'
   686  00FC41  46                 	db	70	;'F'
   687  00FC42  54                 	db	84	;'T'
   688  00FC43  20                 	db	32
   689  00FC44  2D                 	db	45
   690  00FC45  2D                 	db	45
   691  00FC46  20                 	db	32
   692  00FC47  32                 	db	50	;'2'
   693  00FC48  73                 	db	115	;'s'
   694  00FC49  20                 	db	32
   695  00FC4A  20                 	db	32
   696  00FC4B  00                 	db	0
   697  00FC4C                     STR_102:
   698  00FC4C  4D                 	db	77	;'M'
   699  00FC4D  49                 	db	73	;'I'
   700  00FC4E  44                 	db	68	;'D'
   701  00FC4F  2D                 	db	45
   702  00FC50  52                 	db	82	;'R'
   703  00FC51  49                 	db	73	;'I'
   704  00FC52  47                 	db	71	;'G'
   705  00FC53  48                 	db	72	;'H'
   706  00FC54  54                 	db	84	;'T'
   707  00FC55  20                 	db	32
   708  00FC56  2D                 	db	45
   709  00FC57  2D                 	db	45
   710  00FC58  20                 	db	32
   711  00FC59  32                 	db	50	;'2'
   712  00FC5A  73                 	db	115	;'s'
   713  00FC5B  20                 	db	32
   714  00FC5C  00                 	db	0
   715  00FC5D                     STR_72:
   716  00FC5D  41                 	db	65	;'A'
   717  00FC5E  4C                 	db	76	;'L'
   718  00FC5F  47                 	db	71	;'G'
   719  00FC60  31                 	db	49	;'1'
   720  00FC61  3A                 	db	58	;':'
   721  00FC62  20                 	db	32
   722  00FC63  39                 	db	57	;'9'
   723  00FC64  20                 	db	32
   724  00FC65  50                 	db	80	;'P'
   725  00FC66  4F                 	db	79	;'O'
   726  00FC67  50                 	db	80	;'P'
   727  00FC68  4E                 	db	78	;'N'
   728  00FC69  4F                 	db	79	;'O'
   729  00FC6A  54                 	db	84	;'T'
   730  00FC6B  41                 	db	65	;'A'
   731  00FC6C  42                 	db	66	;'B'
   732  00FC6D  00                 	db	0
   733  00FC6E                     STR_93:
   734  00FC6E  54                 	db	84	;'T'
   735  00FC6F  53                 	db	83	;'S'
   736  00FC70  54                 	db	84	;'T'
   737  00FC71  3A                 	db	58	;':'
   738  00FC72  20                 	db	32
   739  00FC73  43                 	db	67	;'C'
   740  00FC74  4F                 	db	79	;'O'
   741  00FC75  4E                 	db	78	;'N'
   742  00FC76  44                 	db	68	;'D'
   743  00FC77  20                 	db	32
   744  00FC78  53                 	db	83	;'S'
   745  00FC79  4F                 	db	79	;'O'
   746  00FC7A  4C                 	db	76	;'L'
   747  00FC7B  4E                 	db	78	;'N'
   748  00FC7C  27                 	db	39
   749  00FC7D  44                 	db	68	;'D'
   750  00FC7E  00                 	db	0
   751  00FC7F                     STR_95:
   752  00FC7F  54                 	db	84	;'T'
   753  00FC80  53                 	db	83	;'S'
   754  00FC81  54                 	db	84	;'T'
   755  00FC82  3A                 	db	58	;':'
   756  00FC83  20                 	db	32
   757  00FC84  50                 	db	80	;'P'
   758  00FC85  55                 	db	85	;'U'
   759  00FC86  53                 	db	83	;'S'
   760  00FC87  48                 	db	72	;'H'
   761  00FC88  20                 	db	32
   762  00FC89  53                 	db	83	;'S'
   763  00FC8A  4F                 	db	79	;'O'
   764  00FC8B  4C                 	db	76	;'L'
   765  00FC8C  4E                 	db	78	;'N'
   766  00FC8D  27                 	db	39
   767  00FC8E  44                 	db	68	;'D'
   768  00FC8F  00                 	db	0
   769  00FC90                     STR_68:
   770  00FC90  32                 	db	50	;'2'
   771  00FC91  2E                 	db	46
   772  00FC92  53                 	db	83	;'S'
   773  00FC93  4E                 	db	78	;'N'
   774  00FC94  52                 	db	82	;'R'
   775  00FC95  7C                 	db	124
   776  00FC96  34                 	db	52	;'4'
   777  00FC97  2E                 	db	46
   778  00FC98  48                 	db	72	;'H'
   779  00FC99  49                 	db	73	;'I'
   780  00FC9A  7C                 	db	124
   781  00FC9B  35                 	db	53	;'5'
   782  00FC9C  2E                 	db	46
   783  00FC9D  4D                 	db	77	;'M'
   784  00FC9E  45                 	db	69	;'E'
   785  00FC9F  44                 	db	68	;'D'
   786  00FCA0  00                 	db	0
   787  00FCA1                     STR_69:
   788  00FCA1  42                 	db	66	;'B'
   789  00FCA2  2E                 	db	46
   790  00FCA3  50                 	db	80	;'P'
   791  00FCA4  4C                 	db	76	;'L'
   792  00FCA5  41                 	db	65	;'A'
   793  00FCA6  7C                 	db	124
   794  00FCA7  38                 	db	56	;'8'
   795  00FCA8  2E                 	db	46
   796  00FCA9  53                 	db	83	;'S'
   797  00FCAA  56                 	db	86	;'V'
   798  00FCAB  7C                 	db	124
   799  00FCAC  39                 	db	57	;'9'
   800  00FCAD  2E                 	db	46
   801  00FCAE  42                 	db	66	;'B'
   802  00FCAF  4C                 	db	76	;'L'
   803  00FCB0  4B                 	db	75	;'K'
   804  00FCB1  00                 	db	0
   805  00FCB2                     STR_126:
   806  00FCB2  45                 	db	69	;'E'
   807  00FCB3  4C                 	db	76	;'L'
   808  00FCB4  53                 	db	83	;'S'
   809  00FCB5  45                 	db	69	;'E'
   810  00FCB6  20                 	db	32
   811  00FCB7  54                 	db	84	;'T'
   812  00FCB8  4F                 	db	79	;'O'
   813  00FCB9  47                 	db	71	;'G'
   814  00FCBA  47                 	db	71	;'G'
   815  00FCBB  4C                 	db	76	;'L'
   816  00FCBC  45                 	db	69	;'E'
   817  00FCBD  53                 	db	83	;'S'
   818  00FCBE  20                 	db	32
   819  00FCBF  41                 	db	65	;'A'
   820  00FCC0  52                 	db	82	;'R'
   821  00FCC1  4D                 	db	77	;'M'
   822  00FCC2  00                 	db	0
   823  00FCC3                     STR_111:
   824  00FCC3  54                 	db	84	;'T'
   825  00FCC4  53                 	db	83	;'S'
   826  00FCC5  54                 	db	84	;'T'
   827  00FCC6  3A                 	db	58	;':'
   828  00FCC7  20                 	db	32
   829  00FCC8  42                 	db	66	;'B'
   830  00FCC9  4F                 	db	79	;'O'
   831  00FCCA  54                 	db	84	;'T'
   832  00FCCB  48                 	db	72	;'H'
   833  00FCCC  20                 	db	32
   834  00FCCD  53                 	db	83	;'S'
   835  00FCCE  45                 	db	69	;'E'
   836  00FCCF  52                 	db	82	;'R'
   837  00FCD0  56                 	db	86	;'V'
   838  00FCD1  4F                 	db	79	;'O'
   839  00FCD2  53                 	db	83	;'S'
   840  00FCD3  00                 	db	0
   841  00FCD4                     STR_41:
   842  00FCD4  4C                 	db	76	;'L'
   843  00FCD5  4F                 	db	79	;'O'
   844  00FCD6  47                 	db	71	;'G'
   845  00FCD7  20                 	db	32
   846  00FCD8  31                 	db	49	;'1'
   847  00FCD9  20                 	db	32
   848  00FCDA  20                 	db	32
   849  00FCDB  20                 	db	32
   850  00FCDC  20                 	db	32
   851  00FCDD  20                 	db	32
   852  00FCDE  20                 	db	32
   853  00FCDF  20                 	db	32
   854  00FCE0  20                 	db	32
   855  00FCE1  20                 	db	32
   856  00FCE2  20                 	db	32
   857  00FCE3  20                 	db	32
   858  00FCE4  00                 	db	0
   859  00FCE5                     STR_40:
   860  00FCE5  4C                 	db	76	;'L'
   861  00FCE6  4F                 	db	79	;'O'
   862  00FCE7  47                 	db	71	;'G'
   863  00FCE8  20                 	db	32
   864  00FCE9  32                 	db	50	;'2'
   865  00FCEA  20                 	db	32
   866  00FCEB  20                 	db	32
   867  00FCEC  20                 	db	32
   868  00FCED  20                 	db	32
   869  00FCEE  20                 	db	32
   870  00FCEF  20                 	db	32
   871  00FCF0  20                 	db	32
   872  00FCF1  20                 	db	32
   873  00FCF2  20                 	db	32
   874  00FCF3  20                 	db	32
   875  00FCF4  20                 	db	32
   876  00FCF5  00                 	db	0
   877  00FCF6                     STR_44:
   878  00FCF6  4C                 	db	76	;'L'
   879  00FCF7  4F                 	db	79	;'O'
   880  00FCF8  47                 	db	71	;'G'
   881  00FCF9  20                 	db	32
   882  00FCFA  33                 	db	51	;'3'
   883  00FCFB  20                 	db	32
   884  00FCFC  20                 	db	32
   885  00FCFD  20                 	db	32
   886  00FCFE  20                 	db	32
   887  00FCFF  20                 	db	32
   888  00FD00  20                 	db	32
   889  00FD01  20                 	db	32
   890  00FD02  20                 	db	32
   891  00FD03  20                 	db	32
   892  00FD04  20                 	db	32
   893  00FD05  20                 	db	32
   894  00FD06  00                 	db	0
   895  00FD07                     STR_48:
   896  00FD07  4C                 	db	76	;'L'
   897  00FD08  4F                 	db	79	;'O'
   898  00FD09  47                 	db	71	;'G'
   899  00FD0A  20                 	db	32
   900  00FD0B  34                 	db	52	;'4'
   901  00FD0C  20                 	db	32
   902  00FD0D  20                 	db	32
   903  00FD0E  20                 	db	32
   904  00FD0F  20                 	db	32
   905  00FD10  20                 	db	32
   906  00FD11  20                 	db	32
   907  00FD12  20                 	db	32
   908  00FD13  20                 	db	32
   909  00FD14  20                 	db	32
   910  00FD15  20                 	db	32
   911  00FD16  20                 	db	32
   912  00FD17  00                 	db	0
   913  00FD18                     STR_36:
   914  00FD18  33                 	db	51	;'3'
   915  00FD19  2E                 	db	46
   916  00FD1A  20                 	db	32
   917  00FD1B  4C                 	db	76	;'L'
   918  00FD1C  4F                 	db	79	;'O'
   919  00FD1D  47                 	db	71	;'G'
   920  00FD1E  53                 	db	83	;'S'
   921  00FD1F  20                 	db	32
   922  00FD20  20                 	db	32
   923  00FD21  20                 	db	32
   924  00FD22  20                 	db	32
   925  00FD23  20                 	db	32
   926  00FD24  20                 	db	32
   927  00FD25  20                 	db	32
   928  00FD26  20                 	db	32
   929  00FD27  20                 	db	32
   930  00FD28  00                 	db	0
   931  00FD29                     STR_32:
   932  00FD29  32                 	db	50	;'2'
   933  00FD2A  2E                 	db	46
   934  00FD2B  20                 	db	32
   935  00FD2C  53                 	db	83	;'S'
   936  00FD2D  4F                 	db	79	;'O'
   937  00FD2E  52                 	db	82	;'R'
   938  00FD2F  54                 	db	84	;'T'
   939  00FD30  20                 	db	32
   940  00FD31  20                 	db	32
   941  00FD32  20                 	db	32
   942  00FD33  20                 	db	32
   943  00FD34  20                 	db	32
   944  00FD35  20                 	db	32
   945  00FD36  20                 	db	32
   946  00FD37  20                 	db	32
   947  00FD38  20                 	db	32
   948  00FD39  00                 	db	0
   949  00FD3A                     STR_33:
   950  00FD3A  31                 	db	49	;'1'
   951  00FD3B  2E                 	db	46
   952  00FD3C  20                 	db	32
   953  00FD3D  44                 	db	68	;'D'
   954  00FD3E  41                 	db	65	;'A'
   955  00FD3F  54                 	db	84	;'T'
   956  00FD40  45                 	db	69	;'E'
   957  00FD41  2F                 	db	47
   958  00FD42  54                 	db	84	;'T'
   959  00FD43  49                 	db	73	;'I'
   960  00FD44  4D                 	db	77	;'M'
   961  00FD45  45                 	db	69	;'E'
   962  00FD46  20                 	db	32
   963  00FD47  20                 	db	32
   964  00FD48  20                 	db	32
   965  00FD49  20                 	db	32
   966  00FD4A  00                 	db	0
   967  00FD4B                     STR_24:
   968  00FD4B  20                 	db	32
   969  00FD4C  2D                 	db	45
   970  00FD4D  2D                 	db	45
   971  00FD4E  20                 	db	32
   972  00FD4F  50                 	db	80	;'P'
   973  00FD50  4F                 	db	79	;'O'
   974  00FD51  50                 	db	80	;'P'
   975  00FD52  20                 	db	32
   976  00FD53  20                 	db	32
   977  00FD54  43                 	db	67	;'C'
   978  00FD55  41                 	db	65	;'A'
   979  00FD56  4E                 	db	78	;'N'
   980  00FD57  20                 	db	32
   981  00FD58  2D                 	db	45
   982  00FD59  2D                 	db	45
   983  00FD5A  20                 	db	32
   984  00FD5B  00                 	db	0
   985  00FD5C                     STR_26:
   986  00FD5C  20                 	db	32
   987  00FD5D  2D                 	db	45
   988  00FD5E  2D                 	db	45
   989  00FD5F  20                 	db	32
   990  00FD60  53                 	db	83	;'S'
   991  00FD61  4F                 	db	79	;'O'
   992  00FD62  55                 	db	85	;'U'
   993  00FD63  50                 	db	80	;'P'
   994  00FD64  20                 	db	32
   995  00FD65  43                 	db	67	;'C'
   996  00FD66  41                 	db	65	;'A'
   997  00FD67  4E                 	db	78	;'N'
   998  00FD68  20                 	db	32
   999  00FD69  2D                 	db	45
  1000  00FD6A  2D                 	db	45
  1001  00FD6B  20                 	db	32
  1002  00FD6C  00                 	db	0
  1003  00FD6D                     STR_28:
  1004  00FD6D  2D                 	db	45
  1005  00FD6E  2D                 	db	45
  1006  00FD6F  20                 	db	32
  1007  00FD70  54                 	db	84	;'T'
  1008  00FD71  4F                 	db	79	;'O'
  1009  00FD72  54                 	db	84	;'T'
  1010  00FD73  41                 	db	65	;'A'
  1011  00FD74  4C                 	db	76	;'L'
  1012  00FD75  20                 	db	32
  1013  00FD76  43                 	db	67	;'C'
  1014  00FD77  41                 	db	65	;'A'
  1015  00FD78  4E                 	db	78	;'N'
  1016  00FD79  53                 	db	83	;'S'
  1017  00FD7A  20                 	db	32
  1018  00FD7B  2D                 	db	45
  1019  00FD7C  2D                 	db	45
  1020  00FD7D  00                 	db	0
  1021  00FD7E                     STR_39:
  1022  00FD7E  4C                 	db	76	;'L'
  1023  00FD7F  4F                 	db	79	;'O'
  1024  00FD80  47                 	db	71	;'G'
  1025  00FD81  20                 	db	32
  1026  00FD82  31                 	db	49	;'1'
  1027  00FD83  20                 	db	32
  1028  00FD84  20                 	db	32
  1029  00FD85  20                 	db	32
  1030  00FD86  20                 	db	32
  1031  00FD87  20                 	db	32
  1032  00FD88  20                 	db	32
  1033  00FD89  20                 	db	32
  1034  00FD8A  20                 	db	32
  1035  00FD8B  20                 	db	32
  1036  00FD8C  20                 	db	32
  1037  00FD8D  3C                 	db	60	;'<'
  1038  00FD8E  00                 	db	0
  1039  00FD8F                     STR_42:
  1040  00FD8F  4C                 	db	76	;'L'
  1041  00FD90  4F                 	db	79	;'O'
  1042  00FD91  47                 	db	71	;'G'
  1043  00FD92  20                 	db	32
  1044  00FD93  32                 	db	50	;'2'
  1045  00FD94  20                 	db	32
  1046  00FD95  20                 	db	32
  1047  00FD96  20                 	db	32
  1048  00FD97  20                 	db	32
  1049  00FD98  20                 	db	32
  1050  00FD99  20                 	db	32
  1051  00FD9A  20                 	db	32
  1052  00FD9B  20                 	db	32
  1053  00FD9C  20                 	db	32
  1054  00FD9D  20                 	db	32
  1055  00FD9E  3C                 	db	60	;'<'
  1056  00FD9F  00                 	db	0
  1057  00FDA0                     STR_46:
  1058  00FDA0  4C                 	db	76	;'L'
  1059  00FDA1  4F                 	db	79	;'O'
  1060  00FDA2  47                 	db	71	;'G'
  1061  00FDA3  20                 	db	32
  1062  00FDA4  33                 	db	51	;'3'
  1063  00FDA5  20                 	db	32
  1064  00FDA6  20                 	db	32
  1065  00FDA7  20                 	db	32
  1066  00FDA8  20                 	db	32
  1067  00FDA9  20                 	db	32
  1068  00FDAA  20                 	db	32
  1069  00FDAB  20                 	db	32
  1070  00FDAC  20                 	db	32
  1071  00FDAD  20                 	db	32
  1072  00FDAE  20                 	db	32
  1073  00FDAF  3C                 	db	60	;'<'
  1074  00FDB0  00                 	db	0
  1075  00FDB1                     STR_50:
  1076  00FDB1  4C                 	db	76	;'L'
  1077  00FDB2  4F                 	db	79	;'O'
  1078  00FDB3  47                 	db	71	;'G'
  1079  00FDB4  20                 	db	32
  1080  00FDB5  34                 	db	52	;'4'
  1081  00FDB6  20                 	db	32
  1082  00FDB7  20                 	db	32
  1083  00FDB8  20                 	db	32
  1084  00FDB9  20                 	db	32
  1085  00FDBA  20                 	db	32
  1086  00FDBB  20                 	db	32
  1087  00FDBC  20                 	db	32
  1088  00FDBD  20                 	db	32
  1089  00FDBE  20                 	db	32
  1090  00FDBF  20                 	db	32
  1091  00FDC0  3C                 	db	60	;'<'
  1092  00FDC1  00                 	db	0
  1093  00FDC2                     STR_38:
  1094  00FDC2  33                 	db	51	;'3'
  1095  00FDC3  2E                 	db	46
  1096  00FDC4  20                 	db	32
  1097  00FDC5  4C                 	db	76	;'L'
  1098  00FDC6  4F                 	db	79	;'O'
  1099  00FDC7  47                 	db	71	;'G'
  1100  00FDC8  53                 	db	83	;'S'
  1101  00FDC9  20                 	db	32
  1102  00FDCA  20                 	db	32
  1103  00FDCB  20                 	db	32
  1104  00FDCC  20                 	db	32
  1105  00FDCD  20                 	db	32
  1106  00FDCE  20                 	db	32
  1107  00FDCF  20                 	db	32
  1108  00FDD0  20                 	db	32
  1109  00FDD1  3C                 	db	60	;'<'
  1110  00FDD2  00                 	db	0
  1111  00FDD3                     STR_34:
  1112  00FDD3  32                 	db	50	;'2'
  1113  00FDD4  2E                 	db	46
  1114  00FDD5  20                 	db	32
  1115  00FDD6  53                 	db	83	;'S'
  1116  00FDD7  4F                 	db	79	;'O'
  1117  00FDD8  52                 	db	82	;'R'
  1118  00FDD9  54                 	db	84	;'T'
  1119  00FDDA  20                 	db	32
  1120  00FDDB  20                 	db	32
  1121  00FDDC  20                 	db	32
  1122  00FDDD  20                 	db	32
  1123  00FDDE  20                 	db	32
  1124  00FDDF  20                 	db	32
  1125  00FDE0  20                 	db	32
  1126  00FDE1  20                 	db	32
  1127  00FDE2  3C                 	db	60	;'<'
  1128  00FDE3  00                 	db	0
  1129  00FDE4                     STR_31:
  1130  00FDE4  31                 	db	49	;'1'
  1131  00FDE5  2E                 	db	46
  1132  00FDE6  20                 	db	32
  1133  00FDE7  44                 	db	68	;'D'
  1134  00FDE8  41                 	db	65	;'A'
  1135  00FDE9  54                 	db	84	;'T'
  1136  00FDEA  45                 	db	69	;'E'
  1137  00FDEB  2F                 	db	47
  1138  00FDEC  54                 	db	84	;'T'
  1139  00FDED  49                 	db	73	;'I'
  1140  00FDEE  4D                 	db	77	;'M'
  1141  00FDEF  45                 	db	69	;'E'
  1142  00FDF0  20                 	db	32
  1143  00FDF1  20                 	db	32
  1144  00FDF2  20                 	db	32
  1145  00FDF3  3C                 	db	60	;'<'
  1146  00FDF4  00                 	db	0
  1147  00FDF5                     STR_6:
  1148  00FDF5  50                 	db	80	;'P'
  1149  00FDF6  41                 	db	65	;'A'
  1150  00FDF7  55                 	db	85	;'U'
  1151  00FDF8  53                 	db	83	;'S'
  1152  00FDF9  45                 	db	69	;'E'
  1153  00FDFA  20                 	db	32
  1154  00FDFB  3C                 	db	60	;'<'
  1155  00FDFC  20                 	db	32
  1156  00FDFD  7C                 	db	124
  1157  00FDFE  20                 	db	32
  1158  00FDFF  42                 	db	66	;'B'
  1159  00FE00  41                 	db	65	;'A'
  1160  00FE01  43                 	db	67	;'C'
  1161  00FE02  4B                 	db	75	;'K'
  1162  00FE03  20                 	db	32
  1163  00FE04  3E                 	db	62	;'>'
  1164  00FE05  00                 	db	0
  1165  00FE06                     STR_30:
  1166  00FE06  50                 	db	80	;'P'
  1167  00FE07  55                 	db	85	;'U'
  1168  00FE08  53                 	db	83	;'S'
  1169  00FE09  48                 	db	72	;'H'
  1170  00FE0A  20                 	db	32
  1171  00FE0B  54                 	db	84	;'T'
  1172  00FE0C  4F                 	db	79	;'O'
  1173  00FE0D  20                 	db	32
  1174  00FE0E  43                 	db	67	;'C'
  1175  00FE0F  4F                 	db	79	;'O'
  1176  00FE10  4E                 	db	78	;'N'
  1177  00FE11  54                 	db	84	;'T'
  1178  00FE12  49                 	db	73	;'I'
  1179  00FE13  4E                 	db	78	;'N'
  1180  00FE14  55                 	db	85	;'U'
  1181  00FE15  45                 	db	69	;'E'
  1182  00FE16  00                 	db	0
  1183  00FE17                     STR_27:
  1184  00FE17  4E                 	db	78	;'N'
  1185  00FE18  4C                 	db	76	;'L'
  1186  00FE19  41                 	db	65	;'A'
  1187  00FE1A  42                 	db	66	;'B'
  1188  00FE1B  3A                 	db	58	;':'
  1189  00FE1C  20                 	db	32
  1190  00FE1D  25                 	db	37
  1191  00FE1E  64                 	db	100	;'d'
  1192  00FE1F  7C                 	db	124
  1193  00FE20  4C                 	db	76	;'L'
  1194  00FE21  41                 	db	65	;'A'
  1195  00FE22  42                 	db	66	;'B'
  1196  00FE23  3A                 	db	58	;':'
  1197  00FE24  20                 	db	32
  1198  00FE25  25                 	db	37
  1199  00FE26  64                 	db	100	;'d'
  1200  00FE27  00                 	db	0
  1201  00FE28                     STR_25:
  1202  00FE28  4E                 	db	78	;'N'
  1203  00FE29  54                 	db	84	;'T'
  1204  00FE2A  41                 	db	65	;'A'
  1205  00FE2B  42                 	db	66	;'B'
  1206  00FE2C  3A                 	db	58	;':'
  1207  00FE2D  20                 	db	32
  1208  00FE2E  25                 	db	37
  1209  00FE2F  64                 	db	100	;'d'
  1210  00FE30  7C                 	db	124
  1211  00FE31  54                 	db	84	;'T'
  1212  00FE32  41                 	db	65	;'A'
  1213  00FE33  42                 	db	66	;'B'
  1214  00FE34  3A                 	db	58	;':'
  1215  00FE35  20                 	db	32
  1216  00FE36  25                 	db	37
  1217  00FE37  64                 	db	100	;'d'
  1218  00FE38  00                 	db	0
  1219  00FE39                     STR_84:
  1220  00FE39  4D                 	db	77	;'M'
  1221  00FE3A  41                 	db	65	;'A'
  1222  00FE3B  47                 	db	71	;'G'
  1223  00FE3C  5F                 	db	95	;'_'
  1224  00FE3D  73                 	db	115	;'s'
  1225  00FE3E  69                 	db	105	;'i'
  1226  00FE3F  67                 	db	103	;'g'
  1227  00FE40  6E                 	db	110	;'n'
  1228  00FE41  61                 	db	97	;'a'
  1229  00FE42  6C                 	db	108	;'l'
  1230  00FE43  3A                 	db	58	;':'
  1231  00FE44  20                 	db	32
  1232  00FE45  25                 	db	37
  1233  00FE46  64                 	db	100	;'d'
  1234  00FE47  20                 	db	32
  1235  00FE48  00                 	db	0
  1236  00FE49                     STR_104:
  1237  00FE49  54                 	db	84	;'T'
  1238  00FE4A  53                 	db	83	;'S'
  1239  00FE4B  54                 	db	84	;'T'
  1240  00FE4C  3A                 	db	58	;':'
  1241  00FE4D  20                 	db	32
  1242  00FE4E  54                 	db	84	;'T'
  1243  00FE4F  49                 	db	73	;'I'
  1244  00FE50  4C                 	db	76	;'L'
  1245  00FE51  54                 	db	84	;'T'
  1246  00FE52  20                 	db	32
  1247  00FE53  53                 	db	83	;'S'
  1248  00FE54  45                 	db	69	;'E'
  1249  00FE55  52                 	db	82	;'R'
  1250  00FE56  56                 	db	86	;'V'
  1251  00FE57  4F                 	db	79	;'O'
  1252  00FE58  00                 	db	0
  1253  00FE59                     STR_64:
  1254  00FE59  53                 	db	83	;'S'
  1255  00FE5A  4F                 	db	79	;'O'
  1256  00FE5B  52                 	db	82	;'R'
  1257  00FE5C  54                 	db	84	;'T'
  1258  00FE5D  49                 	db	73	;'I'
  1259  00FE5E  4E                 	db	78	;'N'
  1260  00FE5F  47                 	db	71	;'G'
  1261  00FE60  2E                 	db	46
  1262  00FE61  2E                 	db	46
  1263  00FE62  2E                 	db	46
  1264  00FE63  20                 	db	32
  1265  00FE64  20                 	db	32
  1266  00FE65  20                 	db	32
  1267  00FE66  20                 	db	32
  1268  00FE67  20                 	db	32
  1269  00FE68  00                 	db	0
  1270  00FE69                     STR_65:
  1271  00FE69  54                 	db	84	;'T'
  1272  00FE6A  49                 	db	73	;'I'
  1273  00FE6B  4D                 	db	77	;'M'
  1274  00FE6C  45                 	db	69	;'E'
  1275  00FE6D  20                 	db	32
  1276  00FE6E  25                 	db	37
  1277  00FE6F  64                 	db	100	;'d'
  1278  00FE70  3A                 	db	58	;':'
  1279  00FE71  25                 	db	37
  1280  00FE72  30                 	db	48	;'0'
  1281  00FE73  32                 	db	50	;'2'
  1282  00FE74  64                 	db	100	;'d'
  1283  00FE75  20                 	db	32
  1284  00FE76  20                 	db	32
  1285  00FE77  20                 	db	32
  1286  00FE78  00                 	db	0
  1287  00FE79                     STR_4:
  1288  00FE79  44                 	db	68	;'D'
  1289  00FE7A  49                 	db	73	;'I'
  1290  00FE7B  44                 	db	68	;'D'
  1291  00FE7C  4E                 	db	78	;'N'
  1292  00FE7D  27                 	db	39
  1293  00FE7E  54                 	db	84	;'T'
  1294  00FE7F  20                 	db	32
  1295  00FE80  43                 	db	67	;'C'
  1296  00FE81  4F                 	db	79	;'O'
  1297  00FE82  4D                 	db	77	;'M'
  1298  00FE83  50                 	db	80	;'P'
  1299  00FE84  4C                 	db	76	;'L'
  1300  00FE85  45                 	db	69	;'E'
  1301  00FE86  54                 	db	84	;'T'
  1302  00FE87  45                 	db	69	;'E'
  1303  00FE88  00                 	db	0
  1304  00FE89                     STR_121:
  1305  00FE89  44                 	db	68	;'D'
  1306  00FE8A  3A                 	db	58	;':'
  1307  00FE8B  52                 	db	82	;'R'
  1308  00FE8C  45                 	db	69	;'E'
  1309  00FE8D  54                 	db	84	;'T'
  1310  00FE8E  7C                 	db	124
  1311  00FE8F  32                 	db	50	;'2'
  1312  00FE90  3A                 	db	58	;':'
  1313  00FE91  43                 	db	67	;'C'
  1314  00FE92  20                 	db	32
  1315  00FE93  25                 	db	37
  1316  00FE94  64                 	db	100	;'d'
  1317  00FE95  20                 	db	32
  1318  00FE96  20                 	db	32
  1319  00FE97  00                 	db	0
  1320  00FE98                     STR_110:
  1321  00FE98  43                 	db	67	;'C'
  1322  00FE99  41                 	db	65	;'A'
  1323  00FE9A  4D                 	db	77	;'M'
  1324  00FE9B  20                 	db	32
  1325  00FE9C  44                 	db	68	;'D'
  1326  00FE9D  57                 	db	87	;'W'
  1327  00FE9E  4E                 	db	78	;'N'
  1328  00FE9F  20                 	db	32
  1329  00FEA0  7C                 	db	124
  1330  00FEA1  52                 	db	82	;'R'
  1331  00FEA2  43                 	db	67	;'C'
  1332  00FEA3  30                 	db	48	;'0'
  1333  00FEA4  3D                 	db	61	;'='
  1334  00FEA5  30                 	db	48	;'0'
  1335  00FEA6  00                 	db	0
  1336  00FEA7                     STR_109:
  1337  00FEA7  43                 	db	67	;'C'
  1338  00FEA8  41                 	db	65	;'A'
  1339  00FEA9  4D                 	db	77	;'M'
  1340  00FEAA  20                 	db	32
  1341  00FEAB  55                 	db	85	;'U'
  1342  00FEAC  50                 	db	80	;'P'
  1343  00FEAD  20                 	db	32
  1344  00FEAE  20                 	db	32
  1345  00FEAF  7C                 	db	124
  1346  00FEB0  52                 	db	82	;'R'
  1347  00FEB1  43                 	db	67	;'C'
  1348  00FEB2  30                 	db	48	;'0'
  1349  00FEB3  3D                 	db	61	;'='
  1350  00FEB4  31                 	db	49	;'1'
  1351  00FEB5  00                 	db	0
  1352  00FEB6                     STR_83:
  1353  00FEB6  54                 	db	84	;'T'
  1354  00FEB7  53                 	db	83	;'S'
  1355  00FEB8  54                 	db	84	;'T'
  1356  00FEB9  3A                 	db	58	;':'
  1357  00FEBA  20                 	db	32
  1358  00FEBB  4D                 	db	77	;'M'
  1359  00FEBC  41                 	db	65	;'A'
  1360  00FEBD  47                 	db	71	;'G'
  1361  00FEBE  4E                 	db	78	;'N'
  1362  00FEBF  45                 	db	69	;'E'
  1363  00FEC0  54                 	db	84	;'T'
  1364  00FEC1  49                 	db	73	;'I'
  1365  00FEC2  53                 	db	83	;'S'
  1366  00FEC3  4D                 	db	77	;'M'
  1367  00FEC4  00                 	db	0
  1368  00FEC5                     STR_108:
  1369  00FEC5  54                 	db	84	;'T'
  1370  00FEC6  53                 	db	83	;'S'
  1371  00FEC7  54                 	db	84	;'T'
  1372  00FEC8  3A                 	db	58	;':'
  1373  00FEC9  20                 	db	32
  1374  00FECA  43                 	db	67	;'C'
  1375  00FECB  41                 	db	65	;'A'
  1376  00FECC  4D                 	db	77	;'M'
  1377  00FECD  20                 	db	32
  1378  00FECE  53                 	db	83	;'S'
  1379  00FECF  45                 	db	69	;'E'
  1380  00FED0  52                 	db	82	;'R'
  1381  00FED1  56                 	db	86	;'V'
  1382  00FED2  4F                 	db	79	;'O'
  1383  00FED3  00                 	db	0
  1384  00FED4                     STR_97:
  1385  00FED4  54                 	db	84	;'T'
  1386  00FED5  53                 	db	83	;'S'
  1387  00FED6  54                 	db	84	;'T'
  1388  00FED7  3A                 	db	58	;':'
  1389  00FED8  20                 	db	32
  1390  00FED9  50                 	db	80	;'P'
  1391  00FEDA  41                 	db	65	;'A'
  1392  00FEDB  4E                 	db	78	;'N'
  1393  00FEDC  20                 	db	32
  1394  00FEDD  53                 	db	83	;'S'
  1395  00FEDE  45                 	db	69	;'E'
  1396  00FEDF  52                 	db	82	;'R'
  1397  00FEE0  56                 	db	86	;'V'
  1398  00FEE1  4F                 	db	79	;'O'
  1399  00FEE2  00                 	db	0
  1400  00FEE3                     STR_75:
  1401  00FEE3  41                 	db	65	;'A'
  1402  00FEE4  4C                 	db	76	;'L'
  1403  00FEE5  47                 	db	71	;'G'
  1404  00FEE6  34                 	db	52	;'4'
  1405  00FEE7  3A                 	db	58	;':'
  1406  00FEE8  20                 	db	32
  1407  00FEE9  41                 	db	65	;'A'
  1408  00FEEA  4C                 	db	76	;'L'
  1409  00FEEB  4C                 	db	76	;'L'
  1410  00FEEC  20                 	db	32
  1411  00FEED  43                 	db	67	;'C'
  1412  00FEEE  41                 	db	65	;'A'
  1413  00FEEF  4E                 	db	78	;'N'
  1414  00FEF0  53                 	db	83	;'S'
  1415  00FEF1  00                 	db	0
  1416  00FEF2                     STR_91:
  1417  00FEF2  54                 	db	84	;'T'
  1418  00FEF3  53                 	db	83	;'S'
  1419  00FEF4  54                 	db	84	;'T'
  1420  00FEF5  3A                 	db	58	;':'
  1421  00FEF6  20                 	db	32
  1422  00FEF7  44                 	db	68	;'D'
  1423  00FEF8  43                 	db	67	;'C'
  1424  00FEF9  20                 	db	32
  1425  00FEFA  4D                 	db	77	;'M'
  1426  00FEFB  4F                 	db	79	;'O'
  1427  00FEFC  54                 	db	84	;'T'
  1428  00FEFD  4F                 	db	79	;'O'
  1429  00FEFE  52                 	db	82	;'R'
  1430  00FEFF  53                 	db	83	;'S'
  1431  00FF00  00                 	db	0
  1432  00FF01                     STR_70:
  1433  00FF01  41                 	db	65	;'A'
  1434  00FF02  4C                 	db	76	;'L'
  1435  00FF03  47                 	db	71	;'G'
  1436  00FF04  4F                 	db	79	;'O'
  1437  00FF05  52                 	db	82	;'R'
  1438  00FF06  49                 	db	73	;'I'
  1439  00FF07  54                 	db	84	;'T'
  1440  00FF08  48                 	db	72	;'H'
  1441  00FF09  4D                 	db	77	;'M'
  1442  00FF0A  20                 	db	32
  1443  00FF0B  54                 	db	84	;'T'
  1444  00FF0C  45                 	db	69	;'E'
  1445  00FF0D  53                 	db	83	;'S'
  1446  00FF0E  54                 	db	84	;'T'
  1447  00FF0F  00                 	db	0
  1448  00FF10                     STR_92:
  1449  00FF10  50                 	db	80	;'P'
  1450  00FF11  49                 	db	73	;'I'
  1451  00FF12  4E                 	db	78	;'N'
  1452  00FF13  20                 	db	32
  1453  00FF14  52                 	db	82	;'R'
  1454  00FF15  41                 	db	65	;'A'
  1455  00FF16  35                 	db	53	;'5'
  1456  00FF17  20                 	db	32
  1457  00FF18  48                 	db	72	;'H'
  1458  00FF19  49                 	db	73	;'I'
  1459  00FF1A  47                 	db	71	;'G'
  1460  00FF1B  48                 	db	72	;'H'
  1461  00FF1C  2E                 	db	46
  1462  00FF1D  00                 	db	0
  1463  00FF1E                     STR_73:
  1464  00FF1E  41                 	db	65	;'A'
  1465  00FF1F  4C                 	db	76	;'L'
  1466  00FF20  47                 	db	71	;'G'
  1467  00FF21  32                 	db	50	;'2'
  1468  00FF22  3A                 	db	58	;':'
  1469  00FF23  20                 	db	32
  1470  00FF24  31                 	db	49	;'1'
  1471  00FF25  32                 	db	50	;'2'
  1472  00FF26  20                 	db	32
  1473  00FF27  43                 	db	67	;'C'
  1474  00FF28  41                 	db	65	;'A'
  1475  00FF29  4E                 	db	78	;'N'
  1476  00FF2A  53                 	db	83	;'S'
  1477  00FF2B  00                 	db	0
  1478  00FF2C                     STR_76:
  1479  00FF2C  41                 	db	65	;'A'
  1480  00FF2D  4C                 	db	76	;'L'
  1481  00FF2E  47                 	db	71	;'G'
  1482  00FF2F  35                 	db	53	;'5'
  1483  00FF30  3A                 	db	58	;':'
  1484  00FF31  20                 	db	32
  1485  00FF32  4E                 	db	78	;'N'
  1486  00FF33  4F                 	db	79	;'O'
  1487  00FF34  20                 	db	32
  1488  00FF35  43                 	db	67	;'C'
  1489  00FF36  41                 	db	65	;'A'
  1490  00FF37  4E                 	db	78	;'N'
  1491  00FF38  53                 	db	83	;'S'
  1492  00FF39  00                 	db	0
  1493  00FF3A                     STR_71:
  1494  00FF3A  50                 	db	80	;'P'
  1495  00FF3B  55                 	db	85	;'U'
  1496  00FF3C  53                 	db	83	;'S'
  1497  00FF3D  48                 	db	72	;'H'
  1498  00FF3E  20                 	db	32
  1499  00FF3F  54                 	db	84	;'T'
  1500  00FF40  4F                 	db	79	;'O'
  1501  00FF41  20                 	db	32
  1502  00FF42  53                 	db	83	;'S'
  1503  00FF43  54                 	db	84	;'T'
  1504  00FF44  41                 	db	65	;'A'
  1505  00FF45  52                 	db	82	;'R'
  1506  00FF46  54                 	db	84	;'T'
  1507  00FF47  00                 	db	0
  1508  00FF48                     STR_23:
  1509  00FF48  25                 	db	37
  1510  00FF49  64                 	db	100	;'d'
  1511  00FF4A  20                 	db	32
  1512  00FF4B  4D                 	db	77	;'M'
  1513  00FF4C  49                 	db	73	;'I'
  1514  00FF4D  4E                 	db	78	;'N'
  1515  00FF4E  20                 	db	32
  1516  00FF4F  25                 	db	37
  1517  00FF50  64                 	db	100	;'d'
  1518  00FF51  20                 	db	32
  1519  00FF52  53                 	db	83	;'S'
  1520  00FF53  45                 	db	69	;'E'
  1521  00FF54  43                 	db	67	;'C'
  1522  00FF55  00                 	db	0
  1523  00FF56                     STR_2:
  1524  00FF56  54                 	db	84	;'T'
  1525  00FF57  49                 	db	73	;'I'
  1526  00FF58  4D                 	db	77	;'M'
  1527  00FF59  45                 	db	69	;'E'
  1528  00FF5A  3A                 	db	58	;':'
  1529  00FF5B  20                 	db	32
  1530  00FF5C  25                 	db	37
  1531  00FF5D  64                 	db	100	;'d'
  1532  00FF5E  3A                 	db	58	;':'
  1533  00FF5F  25                 	db	37
  1534  00FF60  30                 	db	48	;'0'
  1535  00FF61  32                 	db	50	;'2'
  1536  00FF62  64                 	db	100	;'d'
  1537  00FF63  00                 	db	0
  1538  00FF64                     STR_74:
  1539  00FF64  41                 	db	65	;'A'
  1540  00FF65  4C                 	db	76	;'L'
  1541  00FF66  47                 	db	71	;'G'
  1542  00FF67  33                 	db	51	;'3'
  1543  00FF68  3A                 	db	58	;':'
  1544  00FF69  20                 	db	32
  1545  00FF6A  31                 	db	49	;'1'
  1546  00FF6B  20                 	db	32
  1547  00FF6C  43                 	db	67	;'C'
  1548  00FF6D  41                 	db	65	;'A'
  1549  00FF6E  4E                 	db	78	;'N'
  1550  00FF6F  00                 	db	0
  1551  00FF70                     STR_94:
  1552  00FF70  50                 	db	80	;'P'
  1553  00FF71  49                 	db	73	;'I'
  1554  00FF72  4E                 	db	78	;'N'
  1555  00FF73  20                 	db	32
  1556  00FF74  52                 	db	82	;'R'
  1557  00FF75  41                 	db	65	;'A'
  1558  00FF76  33                 	db	51	;'3'
  1559  00FF77  2E                 	db	46
  1560  00FF78  2E                 	db	46
  1561  00FF79  2E                 	db	46
  1562  00FF7A  00                 	db	0
  1563  00FF7B                     STR_96:
  1564  00FF7B  50                 	db	80	;'P'
  1565  00FF7C  49                 	db	73	;'I'
  1566  00FF7D  4E                 	db	78	;'N'
  1567  00FF7E  20                 	db	32
  1568  00FF7F  52                 	db	82	;'R'
  1569  00FF80  41                 	db	65	;'A'
  1570  00FF81  34                 	db	52	;'4'
  1571  00FF82  2E                 	db	46
  1572  00FF83  2E                 	db	46
  1573  00FF84  2E                 	db	46
  1574  00FF85  00                 	db	0
  1575  00FF86                     STR_85:
  1576  00FF86  54                 	db	84	;'T'
  1577  00FF87  53                 	db	83	;'S'
  1578  00FF88  54                 	db	84	;'T'
  1579  00FF89  3A                 	db	58	;':'
  1580  00FF8A  20                 	db	32
  1581  00FF8B  43                 	db	67	;'C'
  1582  00FF8C  4F                 	db	79	;'O'
  1583  00FF8D  4E                 	db	78	;'N'
  1584  00FF8E  44                 	db	68	;'D'
  1585  00FF8F  00                 	db	0
  1586  00FF90                     STR_89:
  1587  00FF90  41                 	db	65	;'A'
  1588  00FF91  43                 	db	67	;'C'
  1589  00FF92  54                 	db	84	;'T'
  1590  00FF93  55                 	db	85	;'U'
  1591  00FF94  41                 	db	65	;'A'
  1592  00FF95  54                 	db	84	;'T'
  1593  00FF96  4F                 	db	79	;'O'
  1594  00FF97  52                 	db	82	;'R'
  1595  00FF98  53                 	db	83	;'S'
  1596  00FF99  00                 	db	0
  1597  00FF9A                     STR_22:
  1598  00FF9A  44                 	db	68	;'D'
  1599  00FF9B  55                 	db	85	;'U'
  1600  00FF9C  52                 	db	82	;'R'
  1601  00FF9D  41                 	db	65	;'A'
  1602  00FF9E  54                 	db	84	;'T'
  1603  00FF9F  49                 	db	73	;'I'
  1604  00FFA0  4F                 	db	79	;'O'
  1605  00FFA1  4E                 	db	78	;'N'
  1606  00FFA2  3A                 	db	58	;':'
  1607  00FFA3  00                 	db	0
  1608  00FFA4                     STR_87:
  1609  00FFA4  43                 	db	67	;'C'
  1610  00FFA5  4F                 	db	79	;'O'
  1611  00FFA6  4E                 	db	78	;'N'
  1612  00FFA7  44                 	db	68	;'D'
  1613  00FFA8  3A                 	db	58	;':'
  1614  00FFA9  20                 	db	32
  1615  00FFAA  25                 	db	37
  1616  00FFAB  64                 	db	100	;'d'
  1617  00FFAC  00                 	db	0
  1618  00FFAD                     STR_77:
  1619  00FFAD  53                 	db	83	;'S'
  1620  00FFAE  45                 	db	69	;'E'
  1621  00FFAF  4E                 	db	78	;'N'
  1622  00FFB0  53                 	db	83	;'S'
  1623  00FFB1  4F                 	db	79	;'O'
  1624  00FFB2  52                 	db	82	;'R'
  1625  00FFB3  53                 	db	83	;'S'
  1626  00FFB4  00                 	db	0
  1627  00FFB5                     STR_129:
  1628  00FFB5  28                 	db	40
  1629  00FFB6  6E                 	db	110	;'n'
  1630  00FFB7  75                 	db	117	;'u'
  1631  00FFB8  6C                 	db	108	;'l'
  1632  00FFB9  6C                 	db	108	;'l'
  1633  00FFBA  29                 	db	41
  1634  00FFBB  00                 	db	0
  1635  00FFBC                     STR_67:
  1636  00FFBC  46                 	db	70	;'F'
  1637  00FFBD  41                 	db	65	;'A'
  1638  00FFBE  49                 	db	73	;'I'
  1639  00FFBF  4C                 	db	76	;'L'
  1640  00FFC0  45                 	db	69	;'E'
  1641  00FFC1  44                 	db	68	;'D'
  1642  00FFC2  00                 	db	0
  1643  00FFC3                     STR_7:
  1644  00FFC3  53                 	db	83	;'S'
  1645  00FFC4  54                 	db	84	;'T'
  1646  00FFC5  41                 	db	65	;'A'
  1647  00FFC6  52                 	db	82	;'R'
  1648  00FFC7  54                 	db	84	;'T'
  1649  00FFC8  3A                 	db	58	;':'
  1650  00FFC9  00                 	db	0
  1651  00FFCA                     STR_9:
  1652  00FFCA  46                 	db	70	;'F'
  1653  00FFCB  45                 	db	69	;'E'
  1654  00FFCC  42                 	db	66	;'B'
  1655  00FFCD  00                 	db	0
  1656  00FFCE                     STR_19:
  1657  00FFCE  44                 	db	68	;'D'
  1658  00FFCF  45                 	db	69	;'E'
  1659  00FFD0  43                 	db	67	;'C'
  1660  00FFD1  00                 	db	0
  1661  00FFD2                     STR_15:
  1662  00FFD2  41                 	db	65	;'A'
  1663  00FFD3  55                 	db	85	;'U'
  1664  00FFD4  47                 	db	71	;'G'
  1665  00FFD5  00                 	db	0
  1666  00FFD6                     STR_14:
  1667  00FFD6  4A                 	db	74	;'J'
  1668  00FFD7  55                 	db	85	;'U'
  1669  00FFD8  4C                 	db	76	;'L'
  1670  00FFD9  00                 	db	0
  1671  00FFDA                     STR_8:
  1672  00FFDA  4A                 	db	74	;'J'
  1673  00FFDB  41                 	db	65	;'A'
  1674  00FFDC  4E                 	db	78	;'N'
  1675  00FFDD  00                 	db	0
  1676  00FFDE                     STR_13:
  1677  00FFDE  4A                 	db	74	;'J'
  1678  00FFDF  55                 	db	85	;'U'
  1679  00FFE0  4E                 	db	78	;'N'
  1680  00FFE1  00                 	db	0
  1681  00FFE2                     STR_16:
  1682  00FFE2  53                 	db	83	;'S'
  1683  00FFE3  45                 	db	69	;'E'
  1684  00FFE4  50                 	db	80	;'P'
  1685  00FFE5  00                 	db	0
  1686  00FFE6                     STR_10:
  1687  00FFE6  4D                 	db	77	;'M'
  1688  00FFE7  41                 	db	65	;'A'
  1689  00FFE8  52                 	db	82	;'R'
  1690  00FFE9  00                 	db	0
  1691  00FFEA                     STR_11:
  1692  00FFEA  41                 	db	65	;'A'
  1693  00FFEB  50                 	db	80	;'P'
  1694  00FFEC  52                 	db	82	;'R'
  1695  00FFED  00                 	db	0
  1696  00FFEE                     STR_20:
  1697  00FFEE  45                 	db	69	;'E'
  1698  00FFEF  52                 	db	82	;'R'
  1699  00FFF0  52                 	db	82	;'R'
  1700  00FFF1  00                 	db	0
  1701  00FFF2                     STR_17:
  1702  00FFF2  4F                 	db	79	;'O'
  1703  00FFF3  43                 	db	67	;'C'
  1704  00FFF4  54                 	db	84	;'T'
  1705  00FFF5  00                 	db	0
  1706  00FFF6                     STR_18:
  1707  00FFF6  4E                 	db	78	;'N'
  1708  00FFF7  4F                 	db	79	;'O'
  1709  00FFF8  56                 	db	86	;'V'
  1710  00FFF9  00                 	db	0
  1711  00FFFA                     STR_12:
  1712  00FFFA  4D                 	db	77	;'M'
  1713  00FFFB  41                 	db	65	;'A'
  1714  00FFFC  59                 	db	89	;'Y'
  1715  00FFFD  00                 	db	0
  1716  0000                     
  1717                           ; #config settings
  1718  00FFFE  00                 	db	0	; dummy byte at the end
  1719  0000                     
  1720                           	psect	cinit
  1721  00593A                     __pcinit:
  1722                           	opt stack 0
  1723  00593A                     start_initialization:
  1724                           	opt stack 0
  1725  00593A                     __initialization:
  1726                           	opt stack 0
  1727                           
  1728                           ; Initialize objects allocated to BANK1 (8 bytes)
  1729                           ; load TBLPTR registers with __pidataBANK1
  1730  00593A  0E16               	movlw	low __pidataBANK1
  1731  00593C  6EF6               	movwf	tblptrl,c
  1732  00593E  0E61               	movlw	high __pidataBANK1
  1733  005940  6EF7               	movwf	tblptrh,c
  1734  005942  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1735  005944  6EF8               	movwf	tblptru,c
  1736  005946  EE01  F04F         	lfsr	0,__pdataBANK1
  1737  00594A  EE10 F008          	lfsr	1,8
  1738  00594E                     copy_data0:
  1739  00594E  0009               	tblrd		*+
  1740  005950  CFF5 FFEE          	movff	tablat,postinc0
  1741  005954  50E5               	movf	postdec1,w,c
  1742  005956  50E1               	movf	fsr1l,w,c
  1743  005958  E1FA               	bnz	copy_data0
  1744                           
  1745                           ; Clear objects allocated to BANK1 (79 bytes)
  1746  00595A  EE01  F000         	lfsr	0,__pbssBANK1
  1747  00595E  0E4F               	movlw	79
  1748  005960                     clear_0:
  1749  005960  6AEE               	clrf	postinc0,c
  1750  005962  06E8               	decf	wreg,f,c
  1751  005964  E1FD               	bnz	clear_0
  1752                           
  1753                           ; Clear objects allocated to BANK0 (38 bytes)
  1754  005966  EE00  F0DA         	lfsr	0,__pbssBANK0
  1755  00596A  0E26               	movlw	38
  1756  00596C                     clear_1:
  1757  00596C  6AEE               	clrf	postinc0,c
  1758  00596E  06E8               	decf	wreg,f,c
  1759  005970  E1FD               	bnz	clear_1
  1760                           
  1761                           ; Clear objects allocated to COMRAM (37 bytes)
  1762  005972  EE00  F059         	lfsr	0,__pbssCOMRAM
  1763  005976  0E25               	movlw	37
  1764  005978                     clear_2:
  1765  005978  6AEE               	clrf	postinc0,c
  1766  00597A  06E8               	decf	wreg,f,c
  1767  00597C  E1FD               	bnz	clear_2
  1768  00597E                     end_of_initialization:
  1769                           	opt stack 0
  1770  00597E                     __end_of__initialization:
  1771                           	opt stack 0
  1772  00597E  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1773  005980  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1774  005982  0100               	movlb	0
  1775  005984  EF71  F026         	goto	_main	;jump to C main() function
  1776                           tblptru	equ	0xFF8
  1777                           tblptrh	equ	0xFF7
  1778                           tblptrl	equ	0xFF6
  1779                           tablat	equ	0xFF5
  1780                           postinc0	equ	0xFEE
  1781                           wreg	equ	0xFE8
  1782                           postdec1	equ	0xFE5
  1783                           fsr1l	equ	0xFE1
  1784                           
  1785                           	psect	bssCOMRAM
  1786  000059                     __pbssCOMRAM:
  1787                           	opt stack 0
  1788  000059                     _servoTimes:
  1789                           	opt stack 0
  1790  000059                     	ds	8
  1791  000061                     _agitator_toggle_count:
  1792                           	opt stack 0
  1793  000061                     	ds	2
  1794  000063                     _back:
  1795                           	opt stack 0
  1796  000063                     	ds	2
  1797  000065                     _down:
  1798                           	opt stack 0
  1799  000065                     	ds	2
  1800  000067                     _enter:
  1801                           	opt stack 0
  1802  000067                     	ds	2
  1803  000069                     _f_panning_to_bin:
  1804                           	opt stack 0
  1805  000069                     	ds	2
  1806  00006B                     _pan_servo_state:
  1807                           	opt stack 0
  1808  00006B                     	ds	2
  1809  00006D                     _servo_timer_counter:
  1810                           	opt stack 0
  1811  00006D                     	ds	2
  1812  00006F                     _servo_timer_target:
  1813                           	opt stack 0
  1814  00006F                     	ds	2
  1815  000071                     _tilt_servo_state:
  1816                           	opt stack 0
  1817  000071                     	ds	2
  1818  000073                     _timer2_counter:
  1819                           	opt stack 0
  1820  000073                     	ds	2
  1821  000075                     _up:
  1822                           	opt stack 0
  1823  000075                     	ds	2
  1824  000077                     _was_low_1:
  1825                           	opt stack 0
  1826  000077                     	ds	2
  1827  000079                     _was_low_2:
  1828                           	opt stack 0
  1829  000079                     	ds	2
  1830  00007B                     _was_low_3:
  1831                           	opt stack 0
  1832  00007B                     	ds	2
  1833  00007D                     _input:
  1834                           	opt stack 0
  1835  00007D                     	ds	1
  1836                           tblptru	equ	0xFF8
  1837                           tblptrh	equ	0xFF7
  1838                           tblptrl	equ	0xFF6
  1839                           tablat	equ	0xFF5
  1840                           postinc0	equ	0xFEE
  1841                           wreg	equ	0xFE8
  1842                           postdec1	equ	0xFE5
  1843                           fsr1l	equ	0xFE1
  1844                           
  1845                           	psect	bssBANK0
  1846  0000DA                     __pbssBANK0:
  1847                           	opt stack 0
  1848  0000DA                     _sensor_outputs:
  1849                           	opt stack 0
  1850  0000DA                     	ds	4
  1851  0000DE                     _COND_signal:
  1852                           	opt stack 0
  1853  0000DE                     	ds	2
  1854  0000E0                     _IR_res:
  1855                           	opt stack 0
  1856  0000E0                     	ds	2
  1857  0000E2                     _IR_signal:
  1858                           	opt stack 0
  1859  0000E2                     	ds	2
  1860  0000E4                     _MAG_signal:
  1861                           	opt stack 0
  1862  0000E4                     	ds	2
  1863  0000E6                     _RTCflag:
  1864                           	opt stack 0
  1865  0000E6                     	ds	2
  1866  0000E8                     _cur_state:
  1867                           	opt stack 0
  1868  0000E8                     	ds	2
  1869  0000EA                     _f_arm_position:
  1870                           	opt stack 0
  1871  0000EA                     	ds	2
  1872  0000EC                     _f_lastCan:
  1873                           	opt stack 0
  1874  0000EC                     	ds	2
  1875  0000EE                     _f_loadingNewCan:
  1876                           	opt stack 0
  1877  0000EE                     	ds	2
  1878  0000F0                     _log:
  1879                           	opt stack 0
  1880  0000F0                     	ds	2
  1881  0000F2                     _log_completion:
  1882                           	opt stack 0
  1883  0000F2                     	ds	2
  1884  0000F4                     _log_count_pop_no_tab:
  1885                           	opt stack 0
  1886  0000F4                     	ds	2
  1887  0000F6                     _log_total_time:
  1888                           	opt stack 0
  1889  0000F6                     	ds	2
  1890  0000F8                     _logstate:
  1891                           	opt stack 0
  1892  0000F8                     	ds	2
  1893  0000FA                     _total_time:
  1894                           	opt stack 0
  1895  0000FA                     	ds	2
  1896  0000FC                     _machine_state:
  1897                           	opt stack 0
  1898  0000FC                     	ds	1
  1899  0000FD                     _sel:
  1900                           	opt stack 0
  1901  0000FD                     	ds	1
  1902  0000FE                     _count_total:
  1903                           	opt stack 0
  1904  0000FE                     	ds	2
  1905                           tblptru	equ	0xFF8
  1906                           tblptrh	equ	0xFF7
  1907                           tblptrl	equ	0xFF6
  1908                           tablat	equ	0xFF5
  1909                           postinc0	equ	0xFEE
  1910                           wreg	equ	0xFE8
  1911                           postdec1	equ	0xFE5
  1912                           fsr1l	equ	0xFE1
  1913                           
  1914                           	psect	bssBANK1
  1915  000100                     __pbssBANK1:
  1916                           	opt stack 0
  1917  000100                     _log_startTime:
  1918                           	opt stack 0
  1919  000100                     	ds	14
  1920  00010E                     _startTime:
  1921                           	opt stack 0
  1922  00010E                     	ds	14
  1923  00011C                     _time:
  1924                           	opt stack 0
  1925  00011C                     	ds	7
  1926  000123                     _count_can_no_lab:
  1927                           	opt stack 0
  1928  000123                     	ds	2
  1929  000125                     _count_can_w_lab:
  1930                           	opt stack 0
  1931  000125                     	ds	2
  1932  000127                     _count_pop_no_tab:
  1933                           	opt stack 0
  1934  000127                     	ds	2
  1935  000129                     _count_pop_w_tab:
  1936                           	opt stack 0
  1937  000129                     	ds	2
  1938  00012B                     _cur_can:
  1939                           	opt stack 0
  1940  00012B                     	ds	2
  1941  00012D                     _debug:
  1942                           	opt stack 0
  1943  00012D                     	ds	2
  1944  00012F                     _f_ID_receive:
  1945                           	opt stack 0
  1946  00012F                     	ds	2
  1947  000131                     _f_can_coming_to_ID:
  1948                           	opt stack 0
  1949  000131                     	ds	2
  1950  000133                     _f_can_coming_to_distribution:
  1951                           	opt stack 0
  1952  000133                     	ds	2
  1953  000135                     _f_can_distributed:
  1954                           	opt stack 0
  1955  000135                     	ds	2
  1956  000137                     _f_most_recent_sort_time:
  1957                           	opt stack 0
  1958  000137                     	ds	2
  1959  000139                     _first:
  1960                           	opt stack 0
  1961  000139                     	ds	2
  1962  00013B                     _firstboot:
  1963                           	opt stack 0
  1964  00013B                     	ds	2
  1965  00013D                     _i:
  1966                           	opt stack 0
  1967  00013D                     	ds	2
  1968  00013F                     _log_count_can_no_lab:
  1969                           	opt stack 0
  1970  00013F                     	ds	2
  1971  000141                     _log_count_can_w_lab:
  1972                           	opt stack 0
  1973  000141                     	ds	2
  1974  000143                     _log_count_pop_w_tab:
  1975                           	opt stack 0
  1976  000143                     	ds	2
  1977  000145                     _log_count_total:
  1978                           	opt stack 0
  1979  000145                     	ds	2
  1980  000147                     _most_recent_sort_time:
  1981                           	opt stack 0
  1982  000147                     	ds	2
  1983  000149                     _motor_toggle_count:
  1984                           	opt stack 0
  1985  000149                     	ds	2
  1986  00014B                     _time_recent_agitator:
  1987                           	opt stack 0
  1988  00014B                     	ds	2
  1989  00014D                     _var:
  1990                           	opt stack 0
  1991  00014D                     	ds	2
  1992                           tblptru	equ	0xFF8
  1993                           tblptrh	equ	0xFF7
  1994                           tblptrl	equ	0xFF6
  1995                           tablat	equ	0xFF5
  1996                           postinc0	equ	0xFEE
  1997                           wreg	equ	0xFE8
  1998                           postdec1	equ	0xFE5
  1999                           fsr1l	equ	0xFE1
  2000                           
  2001                           	psect	dataBANK1
  2002  00014F                     __pdataBANK1:
  2003                           	opt stack 0
  2004  00014F                     UI@F3252:
  2005                           	opt stack 0
  2006  00014F                     	ds	4
  2007  000153                     printRTC@F3242:
  2008                           	opt stack 0
  2009  000153                     	ds	4
  2010                           tblptru	equ	0xFF8
  2011                           tblptrh	equ	0xFF7
  2012                           tblptrl	equ	0xFF6
  2013                           tablat	equ	0xFF5
  2014                           postinc0	equ	0xFEE
  2015                           wreg	equ	0xFE8
  2016                           postdec1	equ	0xFE5
  2017                           fsr1l	equ	0xFE1
  2018                           
  2019                           	psect	cstackBANK0
  2020  000080                     __pcstackBANK0:
  2021                           	opt stack 0
  2022  000080                     ??_delay_ms:
  2023  000080                     ??_isdigit:
  2024  000080                     ??_readADC:
  2025  000080                     ??_I2C_Master_Wait:
  2026  000080                     ?___wmul:
  2027                           	opt stack 0
  2028  000080                     ?___awmod:
  2029                           	opt stack 0
  2030  000080                     ?___lwdiv:
  2031                           	opt stack 0
  2032  000080                     ?___ftpack:
  2033                           	opt stack 0
  2034  000080                     ?___lldiv:
  2035                           	opt stack 0
  2036  000080                     lcdNibble@temp:
  2037                           	opt stack 0
  2038  000080                     initTime@m:
  2039                           	opt stack 0
  2040  000080                     initGlobalVars@time_recent_agitator:
  2041                           	opt stack 0
  2042  000080                     updateServoPosition@time_us:
  2043                           	opt stack 0
  2044  000080                     EEPROM_read@address:
  2045                           	opt stack 0
  2046  000080                     ___wmul@multiplier:
  2047                           	opt stack 0
  2048  000080                     ___awmod@dividend:
  2049                           	opt stack 0
  2050  000080                     ___lwdiv@dividend:
  2051                           	opt stack 0
  2052  000080                     strcpy@to:
  2053                           	opt stack 0
  2054  000080                     ___ftpack@arg:
  2055                           	opt stack 0
  2056  000080                     ___lldiv@dividend:
  2057                           	opt stack 0
  2058                           
  2059                           ; 4 bytes @ 0x0
  2060  000080                     	ds	1
  2061  000081                     readADC@channel:
  2062                           	opt stack 0
  2063  000081                     I2C_Master_Read@a:
  2064                           	opt stack 0
  2065  000081                     lcdNibble@data:
  2066                           	opt stack 0
  2067  000081                     initTime@h:
  2068                           	opt stack 0
  2069  000081                     delay_ms@milliseconds:
  2070                           	opt stack 0
  2071  000081                     _isdigit$2081:
  2072                           	opt stack 0
  2073  000081                     I2C_Master_Write@d:
  2074                           	opt stack 0
  2075                           
  2076                           ; 2 bytes @ 0x1
  2077  000081                     	ds	1
  2078  000082                     ??_readMAG:
  2079  000082                     ??_readCOND:
  2080  000082                     I2C_Master_Read@temp:
  2081                           	opt stack 0
  2082  000082                     lcdInst@data:
  2083                           	opt stack 0
  2084  000082                     putch@data:
  2085                           	opt stack 0
  2086  000082                     initTime@w:
  2087                           	opt stack 0
  2088  000082                     isdigit@c:
  2089                           	opt stack 0
  2090  000082                     readIR@ana_port:
  2091                           	opt stack 0
  2092  000082                     updateServoPosition@timer:
  2093                           	opt stack 0
  2094  000082                     ___wmul@multiplicand:
  2095                           	opt stack 0
  2096  000082                     ___awmod@divisor:
  2097                           	opt stack 0
  2098  000082                     ___lwdiv@divisor:
  2099                           	opt stack 0
  2100  000082                     strcpy@from:
  2101                           	opt stack 0
  2102                           
  2103                           ; 2 bytes @ 0x2
  2104  000082                     	ds	1
  2105  000083                     ??_initLCD:
  2106  000083                     initTime@DD:
  2107                           	opt stack 0
  2108  000083                     ___ftpack@exp:
  2109                           	opt stack 0
  2110  000083                     getRTC@i:
  2111                           	opt stack 0
  2112                           
  2113                           ; 2 bytes @ 0x3
  2114  000083                     	ds	1
  2115  000084                     ??_updateServoPosition:
  2116  000084                     ??_readIR:
  2117  000084                     initTime@MM:
  2118                           	opt stack 0
  2119  000084                     ___awmod@counter:
  2120                           	opt stack 0
  2121  000084                     ___ftpack@sign:
  2122                           	opt stack 0
  2123  000084                     readMAG@res:
  2124                           	opt stack 0
  2125  000084                     readCOND@res:
  2126                           	opt stack 0
  2127  000084                     ___wmul@product:
  2128                           	opt stack 0
  2129  000084                     ___lwdiv@quotient:
  2130                           	opt stack 0
  2131  000084                     strcpy@cp:
  2132                           	opt stack 0
  2133  000084                     ___lldiv@divisor:
  2134                           	opt stack 0
  2135                           
  2136                           ; 4 bytes @ 0x4
  2137  000084                     	ds	1
  2138  000085                     ??_initSortTimer:
  2139  000085                     ??___ftpack:
  2140  000085                     initTime@YY:
  2141                           	opt stack 0
  2142  000085                     ___awmod@sign:
  2143                           	opt stack 0
  2144                           
  2145                           ; 1 bytes @ 0x5
  2146  000085                     	ds	1
  2147  000086                     ??_getMAG:
  2148  000086                     ?___awdiv:
  2149                           	opt stack 0
  2150  000086                     initTime@s:
  2151                           	opt stack 0
  2152  000086                     ___lwdiv@counter:
  2153                           	opt stack 0
  2154  000086                     getIR@port:
  2155                           	opt stack 0
  2156  000086                     updateServoPosition@my_time:
  2157                           	opt stack 0
  2158  000086                     ___awdiv@dividend:
  2159                           	opt stack 0
  2160                           
  2161                           ; 2 bytes @ 0x6
  2162  000086                     	ds	1
  2163  000087                     ?___lwmod:
  2164                           	opt stack 0
  2165  000087                     ___lwmod@dividend:
  2166                           	opt stack 0
  2167                           
  2168                           ; 2 bytes @ 0x7
  2169  000087                     	ds	1
  2170  000088                     ??_Distribution:
  2171  000088                     ??_initServos:
  2172  000088                     ??_getIR:
  2173  000088                     initSortTimer@i:
  2174                           	opt stack 0
  2175  000088                     ___awdiv@divisor:
  2176                           	opt stack 0
  2177  000088                     ___lldiv@quotient:
  2178                           	opt stack 0
  2179                           
  2180                           ; 4 bytes @ 0x8
  2181  000088                     	ds	1
  2182  000089                     getIR@i:
  2183                           	opt stack 0
  2184  000089                     ___lwmod@divisor:
  2185                           	opt stack 0
  2186                           
  2187                           ; 2 bytes @ 0x9
  2188  000089                     	ds	1
  2189  00008A                     ___awdiv@counter:
  2190                           	opt stack 0
  2191                           
  2192                           ; 1 bytes @ 0xA
  2193  00008A                     	ds	1
  2194  00008B                     ___awdiv@sign:
  2195                           	opt stack 0
  2196  00008B                     ___lwmod@counter:
  2197                           	opt stack 0
  2198                           
  2199                           ; 1 bytes @ 0xB
  2200  00008B                     	ds	1
  2201  00008C                     ___lldiv@counter:
  2202                           	opt stack 0
  2203  00008C                     ___awdiv@quotient:
  2204                           	opt stack 0
  2205                           
  2206                           ; 2 bytes @ 0xC
  2207  00008C                     	ds	1
  2208  00008D                     I2C_Master_Init@c:
  2209                           	opt stack 0
  2210                           
  2211                           ; 4 bytes @ 0xD
  2212  00008D                     	ds	1
  2213  00008E                     ?_printf:
  2214                           	opt stack 0
  2215  00008E                     ?___awtoft:
  2216                           	opt stack 0
  2217  00008E                     printf@f:
  2218                           	opt stack 0
  2219  00008E                     ___awtoft@c:
  2220                           	opt stack 0
  2221                           
  2222                           ; 2 bytes @ 0xE
  2223  00008E                     	ds	3
  2224  000091                     ??_I2C_Master_Init:
  2225  000091                     ___awtoft@sign:
  2226                           	opt stack 0
  2227                           
  2228                           ; 1 bytes @ 0x11
  2229  000091                     	ds	1
  2230  000092                     ___ftge@ff1:
  2231                           	opt stack 0
  2232                           
  2233                           ; 3 bytes @ 0x12
  2234  000092                     	ds	3
  2235  000095                     ??_loadRTC:
  2236  000095                     ___ftge@ff2:
  2237                           	opt stack 0
  2238                           
  2239                           ; 3 bytes @ 0x15
  2240  000095                     	ds	1
  2241  000096                     loadRTC@i:
  2242                           	opt stack 0
  2243                           
  2244                           ; 2 bytes @ 0x16
  2245  000096                     	ds	2
  2246  000098                     ??___ftge:
  2247                           
  2248                           ; 1 bytes @ 0x18
  2249  000098                     	ds	2
  2250  00009A                     ??_printf:
  2251                           
  2252                           ; 1 bytes @ 0x1A
  2253  00009A                     	ds	1
  2254  00009B                     ??_ID:
  2255                           
  2256                           ; 1 bytes @ 0x1B
  2257  00009B                     	ds	2
  2258  00009D                     ID@reflectivity1:
  2259                           	opt stack 0
  2260                           
  2261                           ; 2 bytes @ 0x1D
  2262  00009D                     	ds	1
  2263  00009E                     printf@prec:
  2264                           	opt stack 0
  2265                           
  2266                           ; 1 bytes @ 0x1E
  2267  00009E                     	ds	1
  2268  00009F                     ID@cond1:
  2269                           	opt stack 0
  2270  00009F                     printf@cp:
  2271                           	opt stack 0
  2272                           
  2273                           ; 2 bytes @ 0x1F
  2274  00009F                     	ds	2
  2275  0000A1                     ID@reflectivity2:
  2276                           	opt stack 0
  2277  0000A1                     printf@ap:
  2278                           	opt stack 0
  2279                           
  2280                           ; 2 bytes @ 0x21
  2281  0000A1                     	ds	2
  2282  0000A3                     ID@time_1154:
  2283                           	opt stack 0
  2284  0000A3                     printf@len:
  2285                           	opt stack 0
  2286                           
  2287                           ; 2 bytes @ 0x23
  2288  0000A3                     	ds	1
  2289  0000A4                     _ID$1144:
  2290                           	opt stack 0
  2291                           
  2292                           ; 1 bytes @ 0x24
  2293  0000A4                     	ds	1
  2294  0000A5                     _ID$1153:
  2295                           	opt stack 0
  2296  0000A5                     printf@val:
  2297                           	opt stack 0
  2298                           
  2299                           ; 2 bytes @ 0x25
  2300  0000A5                     	ds	1
  2301  0000A6                     _ID$1158:
  2302                           	opt stack 0
  2303                           
  2304                           ; 1 bytes @ 0x26
  2305  0000A6                     	ds	1
  2306  0000A7                     _ID$1160:
  2307                           	opt stack 0
  2308  0000A7                     printf@flag:
  2309                           	opt stack 0
  2310                           
  2311                           ; 1 bytes @ 0x27
  2312  0000A7                     	ds	1
  2313  0000A8                     _ID$1161:
  2314                           	opt stack 0
  2315  0000A8                     printf@c:
  2316                           	opt stack 0
  2317                           
  2318                           ; 1 bytes @ 0x28
  2319  0000A8                     	ds	1
  2320  0000A9                     ID@i:
  2321                           	opt stack 0
  2322  0000A9                     printf@width:
  2323                           	opt stack 0
  2324                           
  2325                           ; 2 bytes @ 0x29
  2326  0000A9                     	ds	2
  2327  0000AB                     ??_printRTC:
  2328  0000AB                     ??_algorithmTest:
  2329  0000AB                     ??_sensorTest:
  2330  0000AB                     ??_actuatorTest:
  2331  0000AB                     ??_arm:
  2332  0000AB                     ??_PortTestDC:
  2333  0000AB                     ??_SpeedTest:
  2334  0000AB                     ??_PortTestPusher:
  2335  0000AB                     ??_PlatformTest:
  2336  0000AB                     ??_BothServos:
  2337  0000AB                     ??_BlockerTest:
  2338  0000AB                     ID@i_1152:
  2339                           	opt stack 0
  2340  0000AB                     EEPROM_write@address:
  2341                           	opt stack 0
  2342                           
  2343                           ; 2 bytes @ 0x2B
  2344  0000AB                     	ds	1
  2345  0000AC                     arm@on:
  2346                           	opt stack 0
  2347                           
  2348                           ; 2 bytes @ 0x2C
  2349  0000AC                     	ds	1
  2350  0000AD                     EEPROM_write@data:
  2351                           	opt stack 0
  2352  0000AD                     actuatorTest@i_1756:
  2353                           	opt stack 0
  2354  0000AD                     ID@i_1157:
  2355                           	opt stack 0
  2356  0000AD                     sensorTest@res:
  2357                           	opt stack 0
  2358  0000AD                     PlatformTest@res:
  2359                           	opt stack 0
  2360  0000AD                     BlockerTest@i:
  2361                           	opt stack 0
  2362                           
  2363                           ; 2 bytes @ 0x2D
  2364  0000AD                     	ds	1
  2365  0000AE                     ??_EEPROM_write:
  2366  0000AE                     actuatorTest@i_1763:
  2367                           	opt stack 0
  2368  0000AE                     printRTC@INT_time:
  2369                           	opt stack 0
  2370                           
  2371                           ; 14 bytes @ 0x2E
  2372  0000AE                     	ds	1
  2373  0000AF                     EEPROM_write@i:
  2374                           	opt stack 0
  2375  0000AF                     actuatorTest@i_1764:
  2376                           	opt stack 0
  2377  0000AF                     ID@i_1163:
  2378                           	opt stack 0
  2379  0000AF                     sensorTest@res_1733:
  2380                           	opt stack 0
  2381  0000AF                     PlatformTest@res_1808:
  2382                           	opt stack 0
  2383  0000AF                     BlockerTest@res:
  2384                           	opt stack 0
  2385                           
  2386                           ; 2 bytes @ 0x2F
  2387  0000AF                     	ds	1
  2388  0000B0                     EEPROM_write@i_1421:
  2389                           	opt stack 0
  2390  0000B0                     actuatorTest@i_1766:
  2391                           	opt stack 0
  2392                           
  2393                           ; 1 bytes @ 0x30
  2394  0000B0                     	ds	1
  2395  0000B1                     ??_Loading:
  2396  0000B1                     ID@time:
  2397                           	opt stack 0
  2398  0000B1                     logRun@num:
  2399                           	opt stack 0
  2400  0000B1                     actuatorTest@i_1767:
  2401                           	opt stack 0
  2402  0000B1                     PlatformTest@i:
  2403                           	opt stack 0
  2404  0000B1                     BlockerTest@cam_flag:
  2405                           	opt stack 0
  2406                           
  2407                           ; 2 bytes @ 0x31
  2408  0000B1                     	ds	1
  2409  0000B2                     logRun@byte1:
  2410                           	opt stack 0
  2411  0000B2                     actuatorTest@i_1769:
  2412                           	opt stack 0
  2413  0000B2                     ID@res1:
  2414                           	opt stack 0
  2415                           
  2416                           ; 2 bytes @ 0x32
  2417  0000B2                     	ds	1
  2418  0000B3                     logRun@byte2:
  2419                           	opt stack 0
  2420  0000B3                     actuatorTest@i_1770:
  2421                           	opt stack 0
  2422  0000B3                     Loading@addr:
  2423                           	opt stack 0
  2424  0000B3                     PlatformTest@i_1812:
  2425                           	opt stack 0
  2426  0000B3                     BlockerTest@cond_flag:
  2427                           	opt stack 0
  2428                           
  2429                           ; 2 bytes @ 0x33
  2430  0000B3                     	ds	1
  2431  0000B4                     logRun@byte3:
  2432                           	opt stack 0
  2433  0000B4                     actuatorTest@i_1772:
  2434                           	opt stack 0
  2435  0000B4                     ID@res2:
  2436                           	opt stack 0
  2437                           
  2438                           ; 2 bytes @ 0x34
  2439  0000B4                     	ds	1
  2440  0000B5                     Loading@byte1:
  2441                           	opt stack 0
  2442  0000B5                     logRun@byte_i:
  2443                           	opt stack 0
  2444  0000B5                     actuatorTest@i_1773:
  2445                           	opt stack 0
  2446  0000B5                     PlatformTest@on:
  2447                           	opt stack 0
  2448                           
  2449                           ; 2 bytes @ 0x35
  2450  0000B5                     	ds	1
  2451  0000B6                     _Loading$1138:
  2452                           	opt stack 0
  2453  0000B6                     logRun@byte11:
  2454                           	opt stack 0
  2455  0000B6                     actuatorTest@i_1775:
  2456                           	opt stack 0
  2457  0000B6                     ID@res:
  2458                           	opt stack 0
  2459                           
  2460                           ; 4 bytes @ 0x36
  2461  0000B6                     	ds	1
  2462  0000B7                     actuatorTest@i_1776:
  2463                           	opt stack 0
  2464  0000B7                     Loading@i_1127:
  2465                           	opt stack 0
  2466  0000B7                     logRun@i:
  2467                           	opt stack 0
  2468                           
  2469                           ; 2 bytes @ 0x37
  2470  0000B7                     	ds	1
  2471  0000B8                     actuatorTest@i_1778:
  2472                           	opt stack 0
  2473                           
  2474                           ; 1 bytes @ 0x38
  2475  0000B8                     	ds	1
  2476  0000B9                     actuatorTest@i_1779:
  2477                           	opt stack 0
  2478  0000B9                     Loading@i_1136:
  2479                           	opt stack 0
  2480  0000B9                     logRun@addr:
  2481                           	opt stack 0
  2482                           
  2483                           ; 2 bytes @ 0x39
  2484  0000B9                     	ds	1
  2485  0000BA                     actuatorTest@i_1782:
  2486                           	opt stack 0
  2487  0000BA                     ID@i_1164:
  2488                           	opt stack 0
  2489                           
  2490                           ; 2 bytes @ 0x3A
  2491  0000BA                     	ds	1
  2492  0000BB                     actuatorTest@i_1783:
  2493                           	opt stack 0
  2494  0000BB                     Loading@i_1139:
  2495                           	opt stack 0
  2496                           
  2497                           ; 2 bytes @ 0x3B
  2498  0000BB                     	ds	1
  2499  0000BC                     actuatorTest@i_1785:
  2500                           	opt stack 0
  2501  0000BC                     printRTC@RTC_month:
  2502                           	opt stack 0
  2503  0000BC                     ID@j:
  2504                           	opt stack 0
  2505                           
  2506                           ; 2 bytes @ 0x3C
  2507  0000BC                     	ds	1
  2508  0000BD                     actuatorTest@i_1786:
  2509                           	opt stack 0
  2510  0000BD                     Loading@i_1140:
  2511                           	opt stack 0
  2512                           
  2513                           ; 2 bytes @ 0x3D
  2514  0000BD                     	ds	1
  2515  0000BE                     actuatorTest@i_1788:
  2516                           	opt stack 0
  2517  0000BE                     ID@n:
  2518                           	opt stack 0
  2519  0000BE                     printRTC@month:
  2520                           	opt stack 0
  2521                           
  2522                           ; 4 bytes @ 0x3E
  2523  0000BE                     	ds	1
  2524  0000BF                     actuatorTest@i_1789:
  2525                           	opt stack 0
  2526  0000BF                     Loading@i_1142:
  2527                           	opt stack 0
  2528                           
  2529                           ; 2 bytes @ 0x3F
  2530  0000BF                     	ds	1
  2531  0000C0                     actuatorTest@i_1792:
  2532                           	opt stack 0
  2533                           
  2534                           ; 1 bytes @ 0x40
  2535  0000C0                     	ds	1
  2536  0000C1                     actuatorTest@i_1793:
  2537                           	opt stack 0
  2538  0000C1                     Loading@i:
  2539                           	opt stack 0
  2540                           
  2541                           ; 2 bytes @ 0x41
  2542  0000C1                     	ds	1
  2543  0000C2                     actuatorTest@i_1795:
  2544                           	opt stack 0
  2545  0000C2                     printRTC@i:
  2546                           	opt stack 0
  2547                           
  2548                           ; 2 bytes @ 0x42
  2549  0000C2                     	ds	1
  2550  0000C3                     actuatorTest@i_1796:
  2551                           	opt stack 0
  2552  0000C3                     Loading@j:
  2553                           	opt stack 0
  2554                           
  2555                           ; 2 bytes @ 0x43
  2556  0000C3                     	ds	1
  2557  0000C4                     ??_UI:
  2558  0000C4                     actuatorTest@i:
  2559                           	opt stack 0
  2560                           
  2561                           ; 2 bytes @ 0x44
  2562  0000C4                     	ds	1
  2563  0000C5                     
  2564                           ; 1 bytes @ 0x45
  2565  0000C5                     	ds	1
  2566  0000C6                     ??_Test:
  2567  0000C6                     _UI$2443:
  2568                           	opt stack 0
  2569                           
  2570                           ; 2 bytes @ 0x46
  2571  0000C6                     	ds	2
  2572  0000C8                     UI@i:
  2573                           	opt stack 0
  2574                           
  2575                           ; 1 bytes @ 0x48
  2576  0000C8                     	ds	1
  2577  0000C9                     UI@i_413:
  2578                           	opt stack 0
  2579                           
  2580                           ; 1 bytes @ 0x49
  2581  0000C9                     	ds	1
  2582  0000CA                     UI@i_416:
  2583                           	opt stack 0
  2584                           
  2585                           ; 1 bytes @ 0x4A
  2586  0000CA                     	ds	1
  2587  0000CB                     UI@i_417:
  2588                           	opt stack 0
  2589                           
  2590                           ; 1 bytes @ 0x4B
  2591  0000CB                     	ds	1
  2592  0000CC                     UI@i_435:
  2593                           	opt stack 0
  2594                           
  2595                           ; 1 bytes @ 0x4C
  2596  0000CC                     	ds	1
  2597  0000CD                     UI@i_436:
  2598                           	opt stack 0
  2599                           
  2600                           ; 1 bytes @ 0x4D
  2601  0000CD                     	ds	1
  2602  0000CE                     UI@i_439:
  2603                           	opt stack 0
  2604                           
  2605                           ; 1 bytes @ 0x4E
  2606  0000CE                     	ds	1
  2607  0000CF                     UI@i_440:
  2608                           	opt stack 0
  2609                           
  2610                           ; 1 bytes @ 0x4F
  2611  0000CF                     	ds	1
  2612  0000D0                     UI@i_443:
  2613                           	opt stack 0
  2614                           
  2615                           ; 1 bytes @ 0x50
  2616  0000D0                     	ds	1
  2617  0000D1                     UI@i_444:
  2618                           	opt stack 0
  2619                           
  2620                           ; 1 bytes @ 0x51
  2621  0000D1                     	ds	1
  2622  0000D2                     UI@i_447:
  2623                           	opt stack 0
  2624                           
  2625                           ; 1 bytes @ 0x52
  2626  0000D2                     	ds	1
  2627  0000D3                     UI@i_448:
  2628                           	opt stack 0
  2629                           
  2630                           ; 1 bytes @ 0x53
  2631  0000D3                     	ds	1
  2632  0000D4                     UI@i_451:
  2633                           	opt stack 0
  2634                           
  2635                           ; 1 bytes @ 0x54
  2636  0000D4                     	ds	1
  2637  0000D5                     UI@i_452:
  2638                           	opt stack 0
  2639                           
  2640                           ; 1 bytes @ 0x55
  2641  0000D5                     	ds	1
  2642  0000D6                     UI@month:
  2643                           	opt stack 0
  2644                           
  2645                           ; 4 bytes @ 0x56
  2646  0000D6                     	ds	4
  2647  0000DA                     tblptru	equ	0xFF8
  2648                           tblptrh	equ	0xFF7
  2649                           tblptrl	equ	0xFF6
  2650                           tablat	equ	0xFF5
  2651                           postinc0	equ	0xFEE
  2652                           wreg	equ	0xFE8
  2653                           postdec1	equ	0xFE5
  2654                           fsr1l	equ	0xFE1
  2655                           
  2656                           ; 1 bytes @ 0x5A
  2657                           
  2658                           	psect	cstackCOMRAM
  2659  000001                     __pcstackCOMRAM:
  2660                           	opt stack 0
  2661  000001                     ??_updateArmState:
  2662  000001                     ??i2_I2C_Master_Wait:
  2663  000001                     ??i2_isdigit:
  2664  000001                     ?i2___wmul:
  2665                           	opt stack 0
  2666  000001                     ?i2___awmod:
  2667                           	opt stack 0
  2668  000001                     ?i2___lwmod:
  2669                           	opt stack 0
  2670  000001                     i2lcdNibble@temp:
  2671                           	opt stack 0
  2672  000001                     i2updateServoPosition@time_us:
  2673                           	opt stack 0
  2674  000001                     i2EEPROM_read@address:
  2675                           	opt stack 0
  2676  000001                     i2___wmul@multiplier:
  2677                           	opt stack 0
  2678  000001                     i2___awmod@dividend:
  2679                           	opt stack 0
  2680  000001                     i2___lwmod@dividend:
  2681                           	opt stack 0
  2682  000001                     i2strcpy@to:
  2683                           	opt stack 0
  2684                           
  2685                           ; 2 bytes @ 0x0
  2686  000001                     	ds	1
  2687  000002                     i2I2C_Master_Read@a:
  2688                           	opt stack 0
  2689  000002                     i2lcdNibble@data:
  2690                           	opt stack 0
  2691  000002                     i2_isdigit$2081:
  2692                           	opt stack 0
  2693  000002                     i2I2C_Master_Write@d:
  2694                           	opt stack 0
  2695                           
  2696                           ; 2 bytes @ 0x1
  2697  000002                     	ds	1
  2698  000003                     i2I2C_Master_Read@temp:
  2699                           	opt stack 0
  2700  000003                     i2lcdInst@data:
  2701                           	opt stack 0
  2702  000003                     i2putch@data:
  2703                           	opt stack 0
  2704  000003                     i2isdigit@c:
  2705                           	opt stack 0
  2706  000003                     i2updateServoPosition@timer:
  2707                           	opt stack 0
  2708  000003                     i2___wmul@multiplicand:
  2709                           	opt stack 0
  2710  000003                     i2___awmod@divisor:
  2711                           	opt stack 0
  2712  000003                     i2___lwmod@divisor:
  2713                           	opt stack 0
  2714  000003                     i2strcpy@from:
  2715                           	opt stack 0
  2716                           
  2717                           ; 2 bytes @ 0x2
  2718  000003                     	ds	1
  2719  000004                     i2getRTC@i:
  2720                           	opt stack 0
  2721                           
  2722                           ; 2 bytes @ 0x3
  2723  000004                     	ds	1
  2724  000005                     ??i2_updateServoPosition:
  2725  000005                     i2___awmod@counter:
  2726                           	opt stack 0
  2727  000005                     i2___lwmod@counter:
  2728                           	opt stack 0
  2729  000005                     i2___wmul@product:
  2730                           	opt stack 0
  2731  000005                     i2strcpy@cp:
  2732                           	opt stack 0
  2733                           
  2734                           ; 2 bytes @ 0x4
  2735  000005                     	ds	1
  2736  000006                     ?i2___lwdiv:
  2737                           	opt stack 0
  2738  000006                     i2___awmod@sign:
  2739                           	opt stack 0
  2740  000006                     i2___lwdiv@dividend:
  2741                           	opt stack 0
  2742                           
  2743                           ; 2 bytes @ 0x5
  2744  000006                     	ds	1
  2745  000007                     retrieveLog@logNum:
  2746                           	opt stack 0
  2747  000007                     i2updateServoPosition@my_time:
  2748                           	opt stack 0
  2749                           
  2750                           ; 2 bytes @ 0x6
  2751  000007                     	ds	1
  2752  000008                     i2___lwdiv@divisor:
  2753                           	opt stack 0
  2754                           
  2755                           ; 2 bytes @ 0x7
  2756  000008                     	ds	1
  2757  000009                     ??_retrieveLog:
  2758  000009                     ??_updateServoStates:
  2759                           
  2760                           ; 1 bytes @ 0x8
  2761  000009                     	ds	1
  2762  00000A                     i2___lwdiv@quotient:
  2763                           	opt stack 0
  2764                           
  2765                           ; 2 bytes @ 0x9
  2766  00000A                     	ds	1
  2767  00000B                     retrieveLog@byte1:
  2768                           	opt stack 0
  2769                           
  2770                           ; 1 bytes @ 0xA
  2771  00000B                     	ds	1
  2772  00000C                     retrieveLog@byte2:
  2773                           	opt stack 0
  2774  00000C                     i2___lwdiv@counter:
  2775                           	opt stack 0
  2776                           
  2777                           ; 1 bytes @ 0xB
  2778  00000C                     	ds	1
  2779  00000D                     ?i2_printf:
  2780                           	opt stack 0
  2781  00000D                     retrieveLog@byte3:
  2782                           	opt stack 0
  2783  00000D                     i2printf@f:
  2784                           	opt stack 0
  2785                           
  2786                           ; 2 bytes @ 0xC
  2787  00000D                     	ds	1
  2788  00000E                     retrieveLog@i:
  2789                           	opt stack 0
  2790                           
  2791                           ; 2 bytes @ 0xD
  2792  00000E                     	ds	2
  2793  000010                     retrieveLog@addr:
  2794                           	opt stack 0
  2795                           
  2796                           ; 2 bytes @ 0xF
  2797  000010                     	ds	2
  2798  000012                     dispLogs@myLog:
  2799                           	opt stack 0
  2800                           
  2801                           ; 2 bytes @ 0x11
  2802  000012                     	ds	2
  2803  000014                     
  2804                           ; 1 bytes @ 0x13
  2805  000014                     	ds	5
  2806  000019                     ??i2_printf:
  2807                           
  2808                           ; 1 bytes @ 0x18
  2809  000019                     	ds	4
  2810  00001D                     i2printf@prec:
  2811                           	opt stack 0
  2812                           
  2813                           ; 1 bytes @ 0x1C
  2814  00001D                     	ds	1
  2815  00001E                     i2printf@cp:
  2816                           	opt stack 0
  2817                           
  2818                           ; 2 bytes @ 0x1D
  2819  00001E                     	ds	2
  2820  000020                     i2printf@ap:
  2821                           	opt stack 0
  2822                           
  2823                           ; 2 bytes @ 0x1F
  2824  000020                     	ds	2
  2825  000022                     i2printf@len:
  2826                           	opt stack 0
  2827                           
  2828                           ; 2 bytes @ 0x21
  2829  000022                     	ds	2
  2830  000024                     i2printf@val:
  2831                           	opt stack 0
  2832                           
  2833                           ; 2 bytes @ 0x23
  2834  000024                     	ds	2
  2835  000026                     i2printf@flag:
  2836                           	opt stack 0
  2837                           
  2838                           ; 1 bytes @ 0x25
  2839  000026                     	ds	1
  2840  000027                     i2printf@c:
  2841                           	opt stack 0
  2842                           
  2843                           ; 1 bytes @ 0x26
  2844  000027                     	ds	1
  2845  000028                     i2printf@width:
  2846                           	opt stack 0
  2847                           
  2848                           ; 2 bytes @ 0x27
  2849  000028                     	ds	2
  2850  00002A                     ??_printSortTimer:
  2851  00002A                     ??i2_printRTC:
  2852  00002A                     ?_inputHandler:
  2853                           	opt stack 0
  2854                           
  2855                           ; 2 bytes @ 0x29
  2856  00002A                     	ds	2
  2857  00002C                     ??_inputHandler:
  2858                           
  2859                           ; 1 bytes @ 0x2B
  2860  00002C                     	ds	1
  2861  00002D                     printSortTimer@curTime:
  2862                           	opt stack 0
  2863  00002D                     i2printRTC@INT_time:
  2864                           	opt stack 0
  2865                           
  2866                           ; 14 bytes @ 0x2C
  2867  00002D                     	ds	14
  2868  00003B                     printSortTimer@start_sec:
  2869                           	opt stack 0
  2870  00003B                     i2printRTC@RTC_month:
  2871                           	opt stack 0
  2872                           
  2873                           ; 2 bytes @ 0x3A
  2874  00003B                     	ds	2
  2875  00003D                     printSortTimer@cur_sec:
  2876                           	opt stack 0
  2877  00003D                     i2printRTC@month:
  2878                           	opt stack 0
  2879                           
  2880                           ; 4 bytes @ 0x3C
  2881  00003D                     	ds	2
  2882  00003F                     printSortTimer@min:
  2883                           	opt stack 0
  2884                           
  2885                           ; 2 bytes @ 0x3E
  2886  00003F                     	ds	2
  2887  000041                     printSortTimer@sec:
  2888                           	opt stack 0
  2889  000041                     i2printRTC@i:
  2890                           	opt stack 0
  2891                           
  2892                           ; 2 bytes @ 0x40
  2893  000041                     	ds	2
  2894  000043                     ??_updateMenu:
  2895  000043                     _printSortTimer$2578:
  2896                           	opt stack 0
  2897                           
  2898                           ; 2 bytes @ 0x42
  2899  000043                     	ds	2
  2900  000045                     printSortTimer@timeDiff:
  2901                           	opt stack 0
  2902                           
  2903                           ; 2 bytes @ 0x44
  2904  000045                     	ds	2
  2905  000047                     printSortTimer@i:
  2906                           	opt stack 0
  2907                           
  2908                           ; 2 bytes @ 0x46
  2909  000047                     	ds	2
  2910  000049                     ??_handler:
  2911                           
  2912                           ; 1 bytes @ 0x48
  2913  000049                     	ds	16
  2914                           tblptru	equ	0xFF8
  2915                           tblptrh	equ	0xFF7
  2916                           tblptrl	equ	0xFF6
  2917                           tablat	equ	0xFF5
  2918                           postinc0	equ	0xFEE
  2919                           wreg	equ	0xFE8
  2920                           postdec1	equ	0xFE5
  2921                           fsr1l	equ	0xFE1
  2922                           
  2923 ;;
  2924 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2925 ;;
  2926 ;; *************** function _main *****************
  2927 ;; Defined at:
  2928 ;;		line 19 in file "main.c"
  2929 ;; Parameters:    Size  Location     Type
  2930 ;;		None
  2931 ;; Auto vars:     Size  Location     Type
  2932 ;;		None
  2933 ;; Return value:  Size  Location     Type
  2934 ;;                  1    wreg      void 
  2935 ;; Registers used:
  2936 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2937 ;; Tracked objects:
  2938 ;;		On entry : 0/0
  2939 ;;		On exit  : 0/0
  2940 ;;		Unchanged: 0/0
  2941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2946 ;;Total ram usage:        0 bytes
  2947 ;; Hardware stack levels required when called:   13
  2948 ;; This function calls:
  2949 ;;		_I2C_Master_Init
  2950 ;;		_Test
  2951 ;;		_UI
  2952 ;;		_initEEPROM
  2953 ;;		_initLCD
  2954 ;;		_initTime
  2955 ;;		_initUI
  2956 ;;		_logRun
  2957 ;;		_machineConfig
  2958 ;;		_sort
  2959 ;;		_stopSignals
  2960 ;; This function is called by:
  2961 ;;		Startup code after reset
  2962 ;; This function uses a non-reentrant model
  2963 ;;
  2964                           
  2965                           	psect	text0
  2966  004CE2                     __ptext0:
  2967                           	opt stack 0
  2968  004CE2                     _main:
  2969                           	opt stack 18
  2970                           
  2971                           ;main.c: 20: machineConfig();
  2972                           
  2973                           ;incstack = 0
  2974  004CE2  EC86  F02B         	call	_machineConfig	;wreg free
  2975                           
  2976                           ;main.c: 21: initLCD();
  2977  004CE6  EC10  F02D         	call	_initLCD	;wreg free
  2978                           
  2979                           ;main.c: 24: RTCflag = 0;
  2980  004CEA  0E00               	movlw	0
  2981  004CEC  0100               	movlb	0	; () banked
  2982  004CEE  6FE7               	movwf	(_RTCflag+1)& (0+255),b
  2983  004CF0  0E00               	movlw	0
  2984  004CF2  6FE6               	movwf	_RTCflag& (0+255),b
  2985                           
  2986                           ;main.c: 25: if(RTCflag){
  2987  004CF4  0100               	movlb	0	; () banked
  2988  004CF6  51E6               	movf	_RTCflag& (0+255),w,b
  2989  004CF8  0100               	movlb	0	; () banked
  2990  004CFA  11E7               	iorwf	(_RTCflag+1)& (0+255),w,b
  2991  004CFC  B4D8               	btfsc	status,2,c
  2992  004CFE  D016               	goto	l10607
  2993                           
  2994                           ; BSR set to: 0
  2995                           ;main.c: 26: initTime(0x42, 0x47, 0x17, 0x07, 0x08, 0x04, 0x17);
  2996  004D00  0E47               	movlw	71
  2997  004D02  0100               	movlb	0	; () banked
  2998  004D04  6F80               	movwf	initTime@m& (0+255),b
  2999  004D06  0E17               	movlw	23
  3000  004D08  0100               	movlb	0	; () banked
  3001  004D0A  6F81               	movwf	initTime@h& (0+255),b
  3002  004D0C  0E07               	movlw	7
  3003  004D0E  0100               	movlb	0	; () banked
  3004  004D10  6F82               	movwf	initTime@w& (0+255),b
  3005  004D12  0E08               	movlw	8
  3006  004D14  0100               	movlb	0	; () banked
  3007  004D16  6F83               	movwf	initTime@DD& (0+255),b
  3008  004D18  0E04               	movlw	4
  3009  004D1A  0100               	movlb	0	; () banked
  3010  004D1C  6F84               	movwf	initTime@MM& (0+255),b
  3011  004D1E  0E17               	movlw	23
  3012  004D20  0100               	movlb	0	; () banked
  3013  004D22  6F85               	movwf	initTime@YY& (0+255),b
  3014  004D24  0E42               	movlw	66
  3015  004D26  EC02  F030         	call	_initTime
  3016                           
  3017                           ;main.c: 27: }
  3018  004D2A  D00B               	goto	l10609
  3019  004D2C                     l10607:
  3020                           
  3021                           ;main.c: 28: else{
  3022                           ;main.c: 29: I2C_Master_Init(10000);
  3023  004D2C  0E10               	movlw	16
  3024  004D2E  0100               	movlb	0	; () banked
  3025  004D30  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3026  004D32  0E27               	movlw	39
  3027  004D34  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3028  004D36  0E00               	movlw	0
  3029  004D38  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3030  004D3A  0E00               	movlw	0
  3031  004D3C  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3032  004D3E  ECE9  F02B         	call	_I2C_Master_Init	;wreg free
  3033  004D42                     l10609:
  3034                           
  3035                           ;main.c: 30: }
  3036                           ;main.c: 32: initUI();
  3037  004D42  EC32  F02E         	call	_initUI	;wreg free
  3038                           
  3039                           ;main.c: 33: first = 1;
  3040  004D46  0E00               	movlw	0
  3041  004D48  0101               	movlb	1	; () banked
  3042  004D4A  6F3A               	movwf	(_first+1)& (0+255),b
  3043  004D4C  0E01               	movlw	1
  3044  004D4E  6F39               	movwf	_first& (0+255),b
  3045                           
  3046                           ; BSR set to: 1
  3047                           ;main.c: 34: initEEPROM();
  3048  004D50  EC3C  F030         	call	_initEEPROM	;wreg free
  3049                           
  3050                           ;main.c: 45: switch(machine_state){
  3051                           
  3052                           ;main.c: 44: while(1){
  3053  004D54  D018               	goto	l10633
  3054  004D56                     l10615:
  3055                           
  3056                           ;main.c: 47: UI();
  3057  004D56  EC09  F000         	call	_UI	;wreg free
  3058                           
  3059                           ;main.c: 48: break;
  3060  004D5A  D015               	goto	l10633
  3061  004D5C                     l10617:
  3062                           
  3063                           ;main.c: 50: sort();
  3064  004D5C  ECF1  F02F         	call	_sort	;wreg free
  3065                           
  3066                           ;main.c: 51: break;
  3067  004D60  D012               	goto	l10633
  3068  004D62                     l10619:
  3069                           
  3070                           ;main.c: 53: stopSignals();
  3071  004D62  EC22  F030         	call	_stopSignals	;wreg free
  3072                           
  3073                           ;main.c: 54: logRun();
  3074  004D66  EC8B  F021         	call	_logRun	;wreg free
  3075                           
  3076                           ;main.c: 55: first = 1;
  3077  004D6A  0E00               	movlw	0
  3078  004D6C  0101               	movlb	1	; () banked
  3079  004D6E  6F3A               	movwf	(_first+1)& (0+255),b
  3080  004D70  0E01               	movlw	1
  3081  004D72  6F39               	movwf	_first& (0+255),b
  3082                           
  3083                           ; BSR set to: 1
  3084                           ;main.c: 56: UI();
  3085  004D74  EC09  F000         	call	_UI	;wreg free
  3086                           
  3087                           ;main.c: 57: break;
  3088  004D78  D006               	goto	l10633
  3089  004D7A                     l10627:
  3090                           
  3091                           ;main.c: 59: Test();
  3092  004D7A  EC46  F023         	call	_Test	;wreg free
  3093                           
  3094                           ;main.c: 60: break;
  3095  004D7E  D003               	goto	l10633
  3096  004D80                     l10629:
  3097                           
  3098                           ;main.c: 62: stopSignals();
  3099  004D80  EC22  F030         	call	_stopSignals	;wreg free
  3100  004D84                     l515:
  3101  004D84  D7FF               	goto	l515
  3102  004D86                     l10633:
  3103  004D86  0100               	movlb	0	; () banked
  3104  004D88  51FC               	movf	_machine_state& (0+255),w,b
  3105                           
  3106                           ; Switch size 1, requested type "space"
  3107                           ; Number of cases is 5, Range of values is 0 to 4
  3108                           ; switch strategies available:
  3109                           ; Name         Instructions Cycles
  3110                           ; simple_byte           16     9 (average)
  3111                           ;	Chosen strategy is simple_byte
  3112  004D8A  0A00               	xorlw	0	; case 0
  3113  004D8C  B4D8               	btfsc	status,2,c
  3114  004D8E  D7E3               	goto	l10615
  3115  004D90  0A01               	xorlw	1	; case 1
  3116  004D92  B4D8               	btfsc	status,2,c
  3117  004D94  D7E3               	goto	l10617
  3118  004D96  0A03               	xorlw	3	; case 2
  3119  004D98  B4D8               	btfsc	status,2,c
  3120  004D9A  D7E3               	goto	l10619
  3121  004D9C  0A01               	xorlw	1	; case 3
  3122  004D9E  B4D8               	btfsc	status,2,c
  3123  004DA0  D7EC               	goto	l10627
  3124  004DA2  0A07               	xorlw	7	; case 4
  3125  004DA4  B4D8               	btfsc	status,2,c
  3126  004DA6  D7EC               	goto	l10629
  3127                           
  3128                           ; BSR set to: 0
  3129                           
  3130                           ; BSR set to: 0
  3131  004DA8  D7EE               	goto	l10633
  3132  004DAA                     __end_of_main:
  3133                           	opt stack 0
  3134                           tblptru	equ	0xFF8
  3135                           tblptrh	equ	0xFF7
  3136                           tblptrl	equ	0xFF6
  3137                           tablat	equ	0xFF5
  3138                           postinc0	equ	0xFEE
  3139                           wreg	equ	0xFE8
  3140                           postdec1	equ	0xFE5
  3141                           fsr1l	equ	0xFE1
  3142                           status	equ	0xFD8
  3143                           
  3144 ;; *************** function _sort *****************
  3145 ;; Defined at:
  3146 ;;		line 73 in file "sort.c"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;		None
  3149 ;; Auto vars:     Size  Location     Type
  3150 ;;		None
  3151 ;; Return value:  Size  Location     Type
  3152 ;;                  1    wreg      void 
  3153 ;; Registers used:
  3154 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3155 ;; Tracked objects:
  3156 ;;		On entry : 0/0
  3157 ;;		On exit  : 0/0
  3158 ;;		Unchanged: 0/0
  3159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3164 ;;Total ram usage:        0 bytes
  3165 ;; Hardware stack levels used:    1
  3166 ;; Hardware stack levels required when called:   12
  3167 ;; This function calls:
  3168 ;;		_Distribution
  3169 ;;		_ID
  3170 ;;		_Loading
  3171 ;; This function is called by:
  3172 ;;		_main
  3173 ;; This function uses a non-reentrant model
  3174 ;;
  3175                           
  3176                           	psect	text1
  3177  005FE2                     __ptext1:
  3178                           	opt stack 0
  3179  005FE2                     _sort:
  3180                           	opt stack 18
  3181                           
  3182                           ;sort.c: 74: if(machine_state == Sorting_state){
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;incstack = 0
  3186  005FE2  0100               	movlb	0	; () banked
  3187  005FE4  05FC               	decf	_machine_state& (0+255),w,b
  3188  005FE6  B4D8               	btfsc	status,2,c
  3189                           
  3190                           ; BSR set to: 0
  3191                           ;sort.c: 75: Loading();
  3192  005FE8  ECEE  F00B         	call	_Loading	;wreg free
  3193                           
  3194                           ;sort.c: 76: }
  3195                           ;sort.c: 77: if(machine_state == Sorting_state){
  3196  005FEC  0100               	movlb	0	; () banked
  3197  005FEE  05FC               	decf	_machine_state& (0+255),w,b
  3198  005FF0  B4D8               	btfsc	status,2,c
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;sort.c: 78: ID();
  3202  005FF2  ECC9  F008         	call	_ID	;wreg free
  3203                           
  3204                           ;sort.c: 79: }
  3205                           ;sort.c: 80: if(machine_state == Sorting_state){
  3206  005FF6  0100               	movlb	0	; () banked
  3207  005FF8  05FC               	decf	_machine_state& (0+255),w,b
  3208  005FFA  A4D8               	btfss	status,2,c
  3209  005FFC  0012               	return	
  3210                           
  3211                           ; BSR set to: 0
  3212                           ;sort.c: 81: Distribution();
  3213  005FFE  ECBC  F024         	call	_Distribution	;wreg free
  3214  006002  0012               	return	
  3215  006004                     __end_of_sort:
  3216                           	opt stack 0
  3217                           tblptru	equ	0xFF8
  3218                           tblptrh	equ	0xFF7
  3219                           tblptrl	equ	0xFF6
  3220                           tablat	equ	0xFF5
  3221                           postinc0	equ	0xFEE
  3222                           wreg	equ	0xFE8
  3223                           postdec1	equ	0xFE5
  3224                           fsr1l	equ	0xFE1
  3225                           status	equ	0xFD8
  3226                           
  3227 ;; *************** function _Loading *****************
  3228 ;; Defined at:
  3229 ;;		line 85 in file "sort.c"
  3230 ;; Parameters:    Size  Location     Type
  3231 ;;		None
  3232 ;; Auto vars:     Size  Location     Type
  3233 ;;  i               2   63[BANK0 ] int 
  3234 ;;  i               2   61[BANK0 ] int 
  3235 ;;  i               2   59[BANK0 ] int 
  3236 ;;  i               2   57[BANK0 ] int 
  3237 ;;  i               2   55[BANK0 ] int 
  3238 ;;  j               2   67[BANK0 ] int 
  3239 ;;  i               2   65[BANK0 ] int 
  3240 ;;  addr            2   51[BANK0 ] unsigned short 
  3241 ;;  byte1           1   53[BANK0 ] unsigned char 
  3242 ;; Return value:  Size  Location     Type
  3243 ;;                  1    wreg      void 
  3244 ;; Registers used:
  3245 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3246 ;; Tracked objects:
  3247 ;;		On entry : 0/0
  3248 ;;		On exit  : 0/0
  3249 ;;		Unchanged: 0/0
  3250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3252 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3253 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3254 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3255 ;;Total ram usage:       20 bytes
  3256 ;; Hardware stack levels used:    1
  3257 ;; Hardware stack levels required when called:   11
  3258 ;; This function calls:
  3259 ;;		_EEPROM_read
  3260 ;;		_EEPROM_write
  3261 ;;		_delay_ms
  3262 ;;		_getIR
  3263 ;;		_getMAG
  3264 ;;		_initGlobalVars
  3265 ;;		_initServos
  3266 ;;		_initSortTimer
  3267 ;;		_lcdInst
  3268 ;;		_readIR
  3269 ;; This function is called by:
  3270 ;;		_sort
  3271 ;; This function uses a non-reentrant model
  3272 ;;
  3273                           
  3274                           	psect	text2
  3275  0017DC                     __ptext2:
  3276                           	opt stack 0
  3277  0017DC                     _Loading:
  3278                           	opt stack 18
  3279                           
  3280                           ;sort.c: 86: if(first){
  3281                           
  3282                           ;incstack = 0
  3283  0017DC  0101               	movlb	1	; () banked
  3284  0017DE  5139               	movf	_first& (0+255),w,b
  3285  0017E0  0101               	movlb	1	; () banked
  3286  0017E2  113A               	iorwf	(_first+1)& (0+255),w,b
  3287  0017E4  B4D8               	btfsc	status,2,c
  3288  0017E6  D06A               	goto	l8127
  3289                           
  3290                           ; BSR set to: 1
  3291                           ;sort.c: 87: TMR1IE = 1;
  3292  0017E8  809D               	bsf	3997,0,c	;volatile
  3293                           
  3294                           ;sort.c: 88: TMR2IE = 1;
  3295  0017EA  829D               	bsf	3997,1,c	;volatile
  3296                           
  3297                           ;sort.c: 89: TMR3IE = 1;
  3298  0017EC  82A0               	bsf	4000,1,c	;volatile
  3299                           
  3300                           ; BSR set to: 1
  3301                           ;sort.c: 90: initGlobalVars();
  3302  0017EE  EC2D  F025         	call	_initGlobalVars	;wreg free
  3303                           
  3304                           ;sort.c: 91: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3305  0017F2  0E01               	movlw	1
  3306  0017F4  EC6D  F030         	call	_lcdInst
  3307  0017F8  0E68               	movlw	104
  3308  0017FA  0100               	movlb	0	; () banked
  3309  0017FC  6FB1               	movwf	??_Loading& (0+255),b
  3310  0017FE  0EE4               	movlw	228
  3311  001800                     u10857:
  3312  001800  2EE8               	decfsz	wreg,f,c
  3313  001802  D7FE               	bra	u10857
  3314  001804  2FB1               	decfsz	??_Loading& (0+255),f,b
  3315  001806  D7FC               	bra	u10857
  3316  001808  F000               	nop	
  3317                           
  3318                           ;sort.c: 92: initSortTimer();
  3319  00180A  ECF6  F027         	call	_initSortTimer	;wreg free
  3320                           
  3321                           ;sort.c: 93: LATCbits.LATC5 = 1;
  3322  00180E  8A8B               	bsf	3979,5,c	;volatile
  3323                           
  3324                           ;sort.c: 94: LATCbits.LATC6 = 1;
  3325  001810  8C8B               	bsf	3979,6,c	;volatile
  3326                           
  3327                           ;sort.c: 99: sel = EEPROM_read(0);
  3328  001812  0E00               	movlw	0
  3329  001814  0100               	movlb	0	; () banked
  3330  001816  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3331  001818  0E00               	movlw	0
  3332  00181A  6F80               	movwf	EEPROM_read@address& (0+255),b
  3333  00181C  EC30  F030         	call	_EEPROM_read	;wreg free
  3334  001820  0100               	movlb	0	; () banked
  3335  001822  6FFD               	movwf	_sel& (0+255),b
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;sort.c: 100: unsigned short addr = 1 + 11 * sel;
  3339  001824  0100               	movlb	0	; () banked
  3340  001826  51FD               	movf	_sel& (0+255),w,b
  3341  001828  0D0B               	mullw	11
  3342  00182A  0E01               	movlw	1
  3343  00182C  24F3               	addwf	prodl,w,c
  3344  00182E  0100               	movlb	0	; () banked
  3345  001830  6FB3               	movwf	Loading@addr& (0+255),b
  3346  001832  0E00               	movlw	0
  3347  001834  20F4               	addwfc	prodh,w,c
  3348  001836  0100               	movlb	0	; () banked
  3349  001838  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3350                           
  3351                           ; BSR set to: 0
  3352                           ;sort.c: 101: unsigned char byte1 = 0b01111111;
  3353  00183A  0E7F               	movlw	127
  3354  00183C  0100               	movlb	0	; () banked
  3355  00183E  6FB5               	movwf	Loading@byte1& (0+255),b
  3356                           
  3357                           ; BSR set to: 0
  3358                           ;sort.c: 102: EEPROM_write(addr, byte1);
  3359  001840  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3360  001844  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3361  001848  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3362  00184C  EC48  F024         	call	_EEPROM_write	;wreg free
  3363                           
  3364                           ;sort.c: 105: LATBbits.LATB2 = 0;
  3365  001850  948A               	bcf	3978,2,c	;volatile
  3366                           
  3367                           ;sort.c: 107: for(int i=0; i<46; i++){
  3368  001852  0E00               	movlw	0
  3369  001854  0100               	movlb	0	; () banked
  3370  001856  6FC2               	movwf	(Loading@i+1)& (0+255),b
  3371  001858  0E00               	movlw	0
  3372  00185A  6FC1               	movwf	Loading@i& (0+255),b
  3373                           
  3374                           ; BSR set to: 0
  3375  00185C  0100               	movlb	0	; () banked
  3376  00185E  BFC2               	btfsc	(Loading@i+1)& (0+255),7,b
  3377  001860  D008               	goto	l8117
  3378  001862  0100               	movlb	0	; () banked
  3379  001864  51C2               	movf	(Loading@i+1)& (0+255),w,b
  3380  001866  E126               	bnz	l806
  3381  001868  0E2E               	movlw	46
  3382  00186A  0100               	movlb	0	; () banked
  3383  00186C  5DC1               	subwf	Loading@i& (0+255),w,b
  3384  00186E  B0D8               	btfsc	status,0,c
  3385  001870  D021               	goto	l806
  3386  001872                     l8117:
  3387                           
  3388                           ; BSR set to: 0
  3389                           ;sort.c: 108: LATBbits.LATB2 = !LATBbits.LATB2;
  3390  001872  B48A               	btfsc	3978,2,c	;volatile
  3391  001874  D004               	goto	u6960
  3392  001876  0100               	movlb	0	; () banked
  3393  001878  6BB1               	clrf	??_Loading& (0+255),b
  3394  00187A  2BB1               	incf	??_Loading& (0+255),f,b
  3395  00187C  D002               	goto	u6978
  3396  00187E                     u6960:
  3397  00187E  0100               	movlb	0	; () banked
  3398  001880  6BB1               	clrf	??_Loading& (0+255),b
  3399  001882                     u6978:
  3400  001882  0100               	movlb	0	; () banked
  3401  001884  47B1               	rlncf	??_Loading& (0+255),f,b
  3402  001886  47B1               	rlncf	??_Loading& (0+255),f,b
  3403  001888  508A               	movf	3978,w,c	;volatile
  3404  00188A  0100               	movlb	0	; () banked
  3405  00188C  19B1               	xorwf	??_Loading& (0+255),w,b
  3406  00188E  0BFB               	andlw	-5
  3407  001890  19B1               	xorwf	??_Loading& (0+255),w,b
  3408  001892  6E8A               	movwf	3978,c	;volatile
  3409                           
  3410                           ; BSR set to: 0
  3411                           ;sort.c: 109: delay_ms(45-i);
  3412  001894  0100               	movlb	0	; () banked
  3413  001896  51C1               	movf	Loading@i& (0+255),w,b
  3414  001898  0800               	sublw	0
  3415  00189A  0F2D               	addlw	45
  3416  00189C  EC91  F02F         	call	_delay_ms
  3417  0018A0  0100               	movlb	0	; () banked
  3418  0018A2  4BC1               	infsnz	Loading@i& (0+255),f,b
  3419  0018A4  2BC2               	incf	(Loading@i+1)& (0+255),f,b
  3420                           
  3421                           ; BSR set to: 0
  3422  0018A6  0100               	movlb	0	; () banked
  3423  0018A8  BFC2               	btfsc	(Loading@i+1)& (0+255),7,b
  3424  0018AA  D7E3               	goto	l8117
  3425  0018AC  0100               	movlb	0	; () banked
  3426  0018AE  51C2               	movf	(Loading@i+1)& (0+255),w,b
  3427  0018B0  E101               	bnz	u6980
  3428  0018B2  D7DA               	goto	L1
  3429  0018B4                     u6980:
  3430  0018B4                     l806:
  3431                           
  3432                           ; BSR set to: 0
  3433                           ;sort.c: 110: }
  3434                           ;sort.c: 111: LATBbits.LATB2 = 1;
  3435  0018B4  848A               	bsf	3978,2,c	;volatile
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;sort.c: 114: initServos();
  3439  0018B6  EC33  F02A         	call	_initServos	;wreg free
  3440                           
  3441                           ;sort.c: 115: }
  3442  0018BA  0012               	return	
  3443  0018BC                     l8127:
  3444                           
  3445                           ;sort.c: 116: else{
  3446                           ;sort.c: 119: if(!f_loadingNewCan){
  3447  0018BC  0100               	movlb	0	; () banked
  3448  0018BE  51EE               	movf	_f_loadingNewCan& (0+255),w,b
  3449  0018C0  0100               	movlb	0	; () banked
  3450  0018C2  11EF               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3451  0018C4  A4D8               	btfss	status,2,c
  3452  0018C6  D01D               	goto	l8143
  3453                           
  3454                           ; BSR set to: 0
  3455                           ;sort.c: 121: getIR(0);
  3456  0018C8  0E00               	movlw	0
  3457  0018CA  0100               	movlb	0	; () banked
  3458  0018CC  6F87               	movwf	(getIR@port+1)& (0+255),b
  3459  0018CE  0E00               	movlw	0
  3460  0018D0  6F86               	movwf	getIR@port& (0+255),b
  3461  0018D2  ECB3  F029         	call	_getIR	;wreg free
  3462                           
  3463                           ;sort.c: 123: if(!f_loadingNewCan){
  3464  0018D6  0100               	movlb	0	; () banked
  3465  0018D8  51EE               	movf	_f_loadingNewCan& (0+255),w,b
  3466  0018DA  0100               	movlb	0	; () banked
  3467  0018DC  11EF               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3468  0018DE  B4D8               	btfsc	status,2,c
  3469  0018E0  0012               	return	
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;sort.c: 127: else{
  3473                           ;sort.c: 128: count_total++;
  3474                           
  3475                           ; BSR set to: 0
  3476                           
  3477                           ; BSR set to: 0
  3478                           ;sort.c: 125: }
  3479                           
  3480                           ; BSR set to: 0
  3481                           ;sort.c: 124: return;
  3482  0018E2  0100               	movlb	0	; () banked
  3483  0018E4  4BFE               	infsnz	_count_total& (0+255),f,b
  3484  0018E6  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3485                           
  3486                           ; BSR set to: 0
  3487                           ;sort.c: 129: if(count_total == 12){
  3488  0018E8  0E0C               	movlw	12
  3489  0018EA  0100               	movlb	0	; () banked
  3490  0018EC  19FE               	xorwf	_count_total& (0+255),w,b
  3491  0018EE  0100               	movlb	0	; () banked
  3492  0018F0  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3493  0018F2  A4D8               	btfss	status,2,c
  3494  0018F4  0012               	return	
  3495                           
  3496                           ; BSR set to: 0
  3497                           ;sort.c: 130: f_lastCan = 1;
  3498  0018F6  0E00               	movlw	0
  3499  0018F8  0100               	movlb	0	; () banked
  3500  0018FA  6FED               	movwf	(_f_lastCan+1)& (0+255),b
  3501  0018FC  0E01               	movlw	1
  3502  0018FE  6FEC               	movwf	_f_lastCan& (0+255),b
  3503                           
  3504                           ; BSR set to: 0
  3505                           ;sort.c: 131: }
  3506                           ;sort.c: 132: }
  3507                           ;sort.c: 133: }
  3508                           
  3509                           ; BSR set to: 0
  3510  001900  0012               	return	
  3511  001902                     l8143:
  3512                           
  3513                           ; BSR set to: 0
  3514                           ;sort.c: 136: else if(f_ID_receive){
  3515  001902  0101               	movlb	1	; () banked
  3516  001904  512F               	movf	_f_ID_receive& (0+255),w,b
  3517  001906  0101               	movlb	1	; () banked
  3518  001908  1130               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3519  00190A  B4D8               	btfsc	status,2,c
  3520  00190C  0012               	return	
  3521                           
  3522                           ; BSR set to: 1
  3523                           ;sort.c: 137: f_most_recent_sort_time = 1;
  3524  00190E  0E00               	movlw	0
  3525  001910  0101               	movlb	1	; () banked
  3526  001912  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  3527  001914  0E01               	movlw	1
  3528  001916  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  3529                           
  3530                           ;sort.c: 138: f_loadingNewCan = 0;
  3531  001918  0E00               	movlw	0
  3532  00191A  0100               	movlb	0	; () banked
  3533  00191C  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3534  00191E  0E00               	movlw	0
  3535  001920  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  3536                           
  3537                           ; BSR set to: 0
  3538                           ;sort.c: 139: _delay((unsigned long)((1000)*(32000000/4000.0)));
  3539  001922  0E29               	movlw	41
  3540  001924  0100               	movlb	0	; () banked
  3541  001926  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3542  001928  0E96               	movlw	150
  3543  00192A  0100               	movlb	0	; () banked
  3544  00192C  6FB1               	movwf	??_Loading& (0+255),b
  3545  00192E  0E7F               	movlw	127
  3546  001930                     u10867:
  3547  001930  2EE8               	decfsz	wreg,f,c
  3548  001932  D7FE               	bra	u10867
  3549  001934  2FB1               	decfsz	??_Loading& (0+255),f,b
  3550  001936  D7FC               	bra	u10867
  3551  001938  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3552  00193A  D7FA               	bra	u10867
  3553                           
  3554                           ;sort.c: 140: LATBbits.LATB2 = 0;
  3555  00193C  948A               	bcf	3978,2,c	;volatile
  3556                           
  3557                           ;sort.c: 144: f_arm_position = 1;
  3558  00193E  0E00               	movlw	0
  3559  001940  0100               	movlb	0	; () banked
  3560  001942  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3561  001944  0E01               	movlw	1
  3562  001946  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  3563                           
  3564                           ; BSR set to: 0
  3565                           ;sort.c: 146: delay_ms(750);
  3566  001948  0EEE               	movlw	238
  3567  00194A  EC91  F02F         	call	_delay_ms
  3568                           
  3569                           ;sort.c: 147: getMAG();
  3570  00194E  EC1A  F02E         	call	_getMAG	;wreg free
  3571                           
  3572                           ;sort.c: 148: sensor_outputs[0] = MAG_signal;
  3573  001952  C0E4  F0DA         	movff	_MAG_signal,_sensor_outputs
  3574  001956  C0E5  F0DB         	movff	_MAG_signal+1,_sensor_outputs+1
  3575                           
  3576                           ;sort.c: 150: TMR2IE = 0;
  3577  00195A  929D               	bcf	3997,1,c	;volatile
  3578                           
  3579                           ;sort.c: 151: if(sensor_outputs[0]){
  3580  00195C  0100               	movlb	0	; () banked
  3581  00195E  51DA               	movf	_sensor_outputs& (0+255),w,b
  3582  001960  0100               	movlb	0	; () banked
  3583  001962  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3584  001964  B4D8               	btfsc	status,2,c
  3585  001966  D01D               	goto	l8175
  3586                           
  3587                           ; BSR set to: 0
  3588                           ;sort.c: 152: for(int i = 0; i<3000; i++){
  3589  001968  0E00               	movlw	0
  3590  00196A  0100               	movlb	0	; () banked
  3591  00196C  6FB8               	movwf	(Loading@i_1127+1)& (0+255),b
  3592  00196E  0E00               	movlw	0
  3593  001970  6FB7               	movwf	Loading@i_1127& (0+255),b
  3594  001972                     l8165:
  3595                           
  3596                           ; BSR set to: 0
  3597  001972  0100               	movlb	0	; () banked
  3598  001974  BFB8               	btfsc	(Loading@i_1127+1)& (0+255),7,b
  3599  001976  D008               	goto	l816
  3600  001978  0EB8               	movlw	184
  3601  00197A  0100               	movlb	0	; () banked
  3602  00197C  5DB7               	subwf	Loading@i_1127& (0+255),w,b
  3603  00197E  0E0B               	movlw	11
  3604  001980  0100               	movlb	0	; () banked
  3605  001982  59B8               	subwfb	(Loading@i_1127+1)& (0+255),w,b
  3606  001984  B0D8               	btfsc	status,0,c
  3607  001986  D02A               	goto	l818
  3608  001988                     l816:
  3609                           
  3610                           ; BSR set to: 0
  3611                           ;sort.c: 153: LATAbits.LATA4 = 1;
  3612  001988  8889               	bsf	3977,4,c	;volatile
  3613                           
  3614                           ; BSR set to: 0
  3615                           ;sort.c: 154: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3616  00198A  0EC8               	movlw	200
  3617  00198C                     u10877:
  3618  00198C  2EE8               	decfsz	wreg,f,c
  3619  00198E  D7FE               	bra	u10877
  3620                           
  3621                           ;sort.c: 155: LATAbits.LATA4 = 0;
  3622  001990  9889               	bcf	3977,4,c	;volatile
  3623                           
  3624                           ;sort.c: 156: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3625  001992  0E42               	movlw	66
  3626  001994                     u10887:
  3627  001994  2EE8               	decfsz	wreg,f,c
  3628  001996  D7FE               	bra	u10887
  3629  001998  D000               	nop2	
  3630  00199A  0100               	movlb	0	; () banked
  3631  00199C  4BB7               	infsnz	Loading@i_1127& (0+255),f,b
  3632  00199E  2BB8               	incf	(Loading@i_1127+1)& (0+255),f,b
  3633  0019A0  D7E8               	goto	l8165
  3634  0019A2                     l8175:
  3635                           
  3636                           ; BSR set to: 0
  3637                           ;sort.c: 159: else{
  3638                           ;sort.c: 160: for(int i = 0; i<3000; i++){
  3639  0019A2  0E00               	movlw	0
  3640  0019A4  0100               	movlb	0	; () banked
  3641  0019A6  6FBA               	movwf	(Loading@i_1136+1)& (0+255),b
  3642  0019A8  0E00               	movlw	0
  3643  0019AA  6FB9               	movwf	Loading@i_1136& (0+255),b
  3644  0019AC                     l8177:
  3645                           
  3646                           ; BSR set to: 0
  3647  0019AC  0100               	movlb	0	; () banked
  3648  0019AE  BFBA               	btfsc	(Loading@i_1136+1)& (0+255),7,b
  3649  0019B0  D008               	goto	l819
  3650  0019B2  0EB8               	movlw	184
  3651  0019B4  0100               	movlb	0	; () banked
  3652  0019B6  5DB9               	subwf	Loading@i_1136& (0+255),w,b
  3653  0019B8  0E0B               	movlw	11
  3654  0019BA  0100               	movlb	0	; () banked
  3655  0019BC  59BA               	subwfb	(Loading@i_1136+1)& (0+255),w,b
  3656  0019BE  B0D8               	btfsc	status,0,c
  3657  0019C0  D00D               	goto	l818
  3658  0019C2                     l819:
  3659                           
  3660                           ; BSR set to: 0
  3661                           ;sort.c: 161: LATAbits.LATA4 = 1;
  3662  0019C2  8889               	bsf	3977,4,c	;volatile
  3663                           
  3664                           ; BSR set to: 0
  3665                           ;sort.c: 162: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3666  0019C4  0E9A               	movlw	154
  3667  0019C6                     u10897:
  3668  0019C6  2EE8               	decfsz	wreg,f,c
  3669  0019C8  D7FE               	bra	u10897
  3670  0019CA  D000               	nop2	
  3671                           
  3672                           ;sort.c: 163: LATAbits.LATA4 = 0;
  3673  0019CC  9889               	bcf	3977,4,c	;volatile
  3674                           
  3675                           ;sort.c: 164: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3676  0019CE  0E70               	movlw	112
  3677  0019D0                     u10907:
  3678  0019D0  2EE8               	decfsz	wreg,f,c
  3679  0019D2  D7FE               	bra	u10907
  3680  0019D4  0100               	movlb	0	; () banked
  3681  0019D6  4BB9               	infsnz	Loading@i_1136& (0+255),f,b
  3682  0019D8  2BBA               	incf	(Loading@i_1136+1)& (0+255),f,b
  3683  0019DA  D7E8               	goto	l8177
  3684  0019DC                     l818:
  3685                           
  3686                           ; BSR set to: 0
  3687                           ;sort.c: 165: }
  3688                           ;sort.c: 166: }
  3689                           ;sort.c: 167: TMR2IE = 1;
  3690  0019DC  829D               	bsf	3997,1,c	;volatile
  3691                           
  3692                           ; BSR set to: 0
  3693                           ;sort.c: 168: _delay((unsigned long)((350)*(32000000/4000.0)));
  3694  0019DE  0E0F               	movlw	15
  3695  0019E0  0100               	movlb	0	; () banked
  3696  0019E2  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3697  0019E4  0E35               	movlw	53
  3698  0019E6  0100               	movlb	0	; () banked
  3699  0019E8  6FB1               	movwf	??_Loading& (0+255),b
  3700  0019EA  0E51               	movlw	81
  3701  0019EC                     u10917:
  3702  0019EC  2EE8               	decfsz	wreg,f,c
  3703  0019EE  D7FE               	bra	u10917
  3704  0019F0  2FB1               	decfsz	??_Loading& (0+255),f,b
  3705  0019F2  D7FC               	bra	u10917
  3706  0019F4  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3707  0019F6  D7FA               	bra	u10917
  3708                           
  3709                           ;sort.c: 170: readIR(0);
  3710  0019F8  0E00               	movlw	0
  3711  0019FA  0100               	movlb	0	; () banked
  3712  0019FC  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  3713  0019FE  0E00               	movlw	0
  3714  001A00  6F82               	movwf	readIR@ana_port& (0+255),b
  3715  001A02  EC9C  F028         	call	_readIR	;wreg free
  3716                           
  3717                           ;sort.c: 171: if(IR_signal==1){
  3718  001A06  0100               	movlb	0	; () banked
  3719  001A08  05E2               	decf	_IR_signal& (0+255),w,b
  3720  001A0A  0100               	movlb	0	; () banked
  3721  001A0C  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  3722  001A0E  A4D8               	btfss	status,2,c
  3723  001A10  D1DA               	goto	l8337
  3724                           
  3725                           ; BSR set to: 0
  3726                           ;sort.c: 172: _delay((unsigned long)((100)*(32000000/4000.0)));
  3727  001A12  0E05               	movlw	5
  3728  001A14  0100               	movlb	0	; () banked
  3729  001A16  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3730  001A18  0E0F               	movlw	15
  3731  001A1A  0100               	movlb	0	; () banked
  3732  001A1C  6FB1               	movwf	??_Loading& (0+255),b
  3733  001A1E  0EF1               	movlw	241
  3734  001A20                     u10927:
  3735  001A20  2EE8               	decfsz	wreg,f,c
  3736  001A22  D7FE               	bra	u10927
  3737  001A24  2FB1               	decfsz	??_Loading& (0+255),f,b
  3738  001A26  D7FC               	bra	u10927
  3739  001A28  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3740  001A2A  D7FA               	bra	u10927
  3741                           
  3742                           ;sort.c: 173: readIR(0);
  3743  001A2C  0E00               	movlw	0
  3744  001A2E  0100               	movlb	0	; () banked
  3745  001A30  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  3746  001A32  0E00               	movlw	0
  3747  001A34  6F82               	movwf	readIR@ana_port& (0+255),b
  3748  001A36  EC9C  F028         	call	_readIR	;wreg free
  3749                           
  3750                           ;sort.c: 174: if(IR_signal==1){
  3751  001A3A  0100               	movlb	0	; () banked
  3752  001A3C  05E2               	decf	_IR_signal& (0+255),w,b
  3753  001A3E  0100               	movlb	0	; () banked
  3754  001A40  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  3755  001A42  A4D8               	btfss	status,2,c
  3756  001A44  D058               	goto	l8237
  3757                           
  3758                           ; BSR set to: 0
  3759                           ;sort.c: 175: getMAG();
  3760  001A46  EC1A  F02E         	call	_getMAG	;wreg free
  3761                           
  3762                           ;sort.c: 176: sensor_outputs[0] = sensor_outputs[0] || MAG_signal;
  3763  001A4A  0E01               	movlw	1
  3764  001A4C  0100               	movlb	0	; () banked
  3765  001A4E  6FB6               	movwf	_Loading$1138& (0+255),b
  3766                           
  3767                           ; BSR set to: 0
  3768  001A50  0100               	movlb	0	; () banked
  3769  001A52  51DA               	movf	_sensor_outputs& (0+255),w,b
  3770  001A54  0100               	movlb	0	; () banked
  3771  001A56  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3772  001A58  A4D8               	btfss	status,2,c
  3773  001A5A  D009               	goto	l8209
  3774                           
  3775                           ; BSR set to: 0
  3776  001A5C  0100               	movlb	0	; () banked
  3777  001A5E  51E4               	movf	_MAG_signal& (0+255),w,b
  3778  001A60  0100               	movlb	0	; () banked
  3779  001A62  11E5               	iorwf	(_MAG_signal+1)& (0+255),w,b
  3780  001A64  A4D8               	btfss	status,2,c
  3781  001A66  D003               	goto	l8209
  3782                           
  3783                           ; BSR set to: 0
  3784  001A68  0E00               	movlw	0
  3785  001A6A  0100               	movlb	0	; () banked
  3786  001A6C  6FB6               	movwf	_Loading$1138& (0+255),b
  3787  001A6E                     l8209:
  3788                           
  3789                           ; BSR set to: 0
  3790  001A6E  C0B6  F0DA         	movff	_Loading$1138,_sensor_outputs
  3791  001A72  0100               	movlb	0	; () banked
  3792  001A74  6BDB               	clrf	(_sensor_outputs+1)& (0+255),b
  3793                           
  3794                           ; BSR set to: 0
  3795                           ;sort.c: 178: if(sensor_outputs[0]){
  3796  001A76  0100               	movlb	0	; () banked
  3797  001A78  51DA               	movf	_sensor_outputs& (0+255),w,b
  3798  001A7A  0100               	movlb	0	; () banked
  3799  001A7C  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3800  001A7E  B4D8               	btfsc	status,2,c
  3801  001A80  D01D               	goto	l8225
  3802                           
  3803                           ; BSR set to: 0
  3804                           ;sort.c: 179: for(int i = 0; i<3000; i++){
  3805  001A82  0E00               	movlw	0
  3806  001A84  0100               	movlb	0	; () banked
  3807  001A86  6FBC               	movwf	(Loading@i_1139+1)& (0+255),b
  3808  001A88  0E00               	movlw	0
  3809  001A8A  6FBB               	movwf	Loading@i_1139& (0+255),b
  3810  001A8C                     l8215:
  3811                           
  3812                           ; BSR set to: 0
  3813  001A8C  0100               	movlb	0	; () banked
  3814  001A8E  BFBC               	btfsc	(Loading@i_1139+1)& (0+255),7,b
  3815  001A90  D008               	goto	l826
  3816  001A92  0EB8               	movlw	184
  3817  001A94  0100               	movlb	0	; () banked
  3818  001A96  5DBB               	subwf	Loading@i_1139& (0+255),w,b
  3819  001A98  0E0B               	movlw	11
  3820  001A9A  0100               	movlb	0	; () banked
  3821  001A9C  59BC               	subwfb	(Loading@i_1139+1)& (0+255),w,b
  3822  001A9E  B0D8               	btfsc	status,0,c
  3823  001AA0  D02A               	goto	l8237
  3824  001AA2                     l826:
  3825                           
  3826                           ; BSR set to: 0
  3827                           ;sort.c: 180: LATAbits.LATA4 = 1;
  3828  001AA2  8889               	bsf	3977,4,c	;volatile
  3829                           
  3830                           ; BSR set to: 0
  3831                           ;sort.c: 181: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3832  001AA4  0EC8               	movlw	200
  3833  001AA6                     u10937:
  3834  001AA6  2EE8               	decfsz	wreg,f,c
  3835  001AA8  D7FE               	bra	u10937
  3836                           
  3837                           ;sort.c: 182: LATAbits.LATA4 = 0;
  3838  001AAA  9889               	bcf	3977,4,c	;volatile
  3839                           
  3840                           ;sort.c: 183: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3841  001AAC  0E42               	movlw	66
  3842  001AAE                     u10947:
  3843  001AAE  2EE8               	decfsz	wreg,f,c
  3844  001AB0  D7FE               	bra	u10947
  3845  001AB2  D000               	nop2	
  3846  001AB4  0100               	movlb	0	; () banked
  3847  001AB6  4BBB               	infsnz	Loading@i_1139& (0+255),f,b
  3848  001AB8  2BBC               	incf	(Loading@i_1139+1)& (0+255),f,b
  3849  001ABA  D7E8               	goto	l8215
  3850  001ABC                     l8225:
  3851                           
  3852                           ; BSR set to: 0
  3853                           ;sort.c: 186: else{
  3854                           ;sort.c: 187: for(int i = 0; i<3000; i++){
  3855  001ABC  0E00               	movlw	0
  3856  001ABE  0100               	movlb	0	; () banked
  3857  001AC0  6FBE               	movwf	(Loading@i_1140+1)& (0+255),b
  3858  001AC2  0E00               	movlw	0
  3859  001AC4  6FBD               	movwf	Loading@i_1140& (0+255),b
  3860  001AC6                     l8227:
  3861                           
  3862                           ; BSR set to: 0
  3863  001AC6  0100               	movlb	0	; () banked
  3864  001AC8  BFBE               	btfsc	(Loading@i_1140+1)& (0+255),7,b
  3865  001ACA  D008               	goto	l829
  3866  001ACC  0EB8               	movlw	184
  3867  001ACE  0100               	movlb	0	; () banked
  3868  001AD0  5DBD               	subwf	Loading@i_1140& (0+255),w,b
  3869  001AD2  0E0B               	movlw	11
  3870  001AD4  0100               	movlb	0	; () banked
  3871  001AD6  59BE               	subwfb	(Loading@i_1140+1)& (0+255),w,b
  3872  001AD8  B0D8               	btfsc	status,0,c
  3873  001ADA  D00D               	goto	l8237
  3874  001ADC                     l829:
  3875                           
  3876                           ; BSR set to: 0
  3877                           ;sort.c: 188: LATAbits.LATA4 = 1;
  3878  001ADC  8889               	bsf	3977,4,c	;volatile
  3879                           
  3880                           ; BSR set to: 0
  3881                           ;sort.c: 189: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3882  001ADE  0E9A               	movlw	154
  3883  001AE0                     u10957:
  3884  001AE0  2EE8               	decfsz	wreg,f,c
  3885  001AE2  D7FE               	bra	u10957
  3886  001AE4  D000               	nop2	
  3887                           
  3888                           ;sort.c: 190: LATAbits.LATA4 = 0;
  3889  001AE6  9889               	bcf	3977,4,c	;volatile
  3890                           
  3891                           ;sort.c: 191: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3892  001AE8  0E70               	movlw	112
  3893  001AEA                     u10967:
  3894  001AEA  2EE8               	decfsz	wreg,f,c
  3895  001AEC  D7FE               	bra	u10967
  3896  001AEE  0100               	movlb	0	; () banked
  3897  001AF0  4BBD               	infsnz	Loading@i_1140& (0+255),f,b
  3898  001AF2  2BBE               	incf	(Loading@i_1140+1)& (0+255),f,b
  3899  001AF4  D7E8               	goto	l8227
  3900  001AF6                     l8237:
  3901                           
  3902                           ; BSR set to: 0
  3903                           ;sort.c: 192: }
  3904                           ;sort.c: 193: }
  3905                           ;sort.c: 194: }
  3906                           ;sort.c: 196: _delay((unsigned long)((400)*(32000000/4000.0)));
  3907  001AF6  0E11               	movlw	17
  3908  001AF8  0100               	movlb	0	; () banked
  3909  001AFA  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3910  001AFC  0E3C               	movlw	60
  3911  001AFE  0100               	movlb	0	; () banked
  3912  001B00  6FB1               	movwf	??_Loading& (0+255),b
  3913  001B02  0ECB               	movlw	203
  3914  001B04                     u10977:
  3915  001B04  2EE8               	decfsz	wreg,f,c
  3916  001B06  D7FE               	bra	u10977
  3917  001B08  2FB1               	decfsz	??_Loading& (0+255),f,b
  3918  001B0A  D7FC               	bra	u10977
  3919  001B0C  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3920  001B0E  D7FA               	bra	u10977
  3921                           
  3922                           ;sort.c: 198: int j = 0;
  3923  001B10  0E00               	movlw	0
  3924  001B12  0100               	movlb	0	; () banked
  3925  001B14  6FC4               	movwf	(Loading@j+1)& (0+255),b
  3926  001B16  0E00               	movlw	0
  3927  001B18  6FC3               	movwf	Loading@j& (0+255),b
  3928                           
  3929                           ;sort.c: 199: while(IR_signal == 1){
  3930  001B1A  D14E               	goto	l8335
  3931  001B1C                     l8241:
  3932                           
  3933                           ; BSR set to: 0
  3934                           ;sort.c: 200: readIR(0);
  3935  001B1C  0E00               	movlw	0
  3936  001B1E  0100               	movlb	0	; () banked
  3937  001B20  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  3938  001B22  0E00               	movlw	0
  3939  001B24  6F82               	movwf	readIR@ana_port& (0+255),b
  3940  001B26  EC9C  F028         	call	_readIR	;wreg free
  3941                           
  3942                           ;sort.c: 201: if(j == 3 || j == 4){
  3943  001B2A  0E03               	movlw	3
  3944  001B2C  0100               	movlb	0	; () banked
  3945  001B2E  19C3               	xorwf	Loading@j& (0+255),w,b
  3946  001B30  0100               	movlb	0	; () banked
  3947  001B32  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  3948  001B34  B4D8               	btfsc	status,2,c
  3949  001B36  D007               	goto	l8247
  3950                           
  3951                           ; BSR set to: 0
  3952  001B38  0E04               	movlw	4
  3953  001B3A  0100               	movlb	0	; () banked
  3954  001B3C  19C3               	xorwf	Loading@j& (0+255),w,b
  3955  001B3E  0100               	movlb	0	; () banked
  3956  001B40  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  3957  001B42  A4D8               	btfss	status,2,c
  3958  001B44  D006               	goto	l8249
  3959  001B46                     l8247:
  3960                           
  3961                           ; BSR set to: 0
  3962                           ;sort.c: 202: f_arm_position = 0;
  3963  001B46  0E00               	movlw	0
  3964  001B48  0100               	movlb	0	; () banked
  3965  001B4A  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3966  001B4C  0E00               	movlw	0
  3967  001B4E  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  3968                           
  3969                           ;sort.c: 203: }
  3970  001B50  D06D               	goto	l8269
  3971  001B52                     l8249:
  3972                           
  3973                           ; BSR set to: 0
  3974                           ;sort.c: 204: else if(j == 5 || j == 6){
  3975  001B52  0E05               	movlw	5
  3976  001B54  0100               	movlb	0	; () banked
  3977  001B56  19C3               	xorwf	Loading@j& (0+255),w,b
  3978  001B58  0100               	movlb	0	; () banked
  3979  001B5A  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  3980  001B5C  B4D8               	btfsc	status,2,c
  3981  001B5E  D007               	goto	l839
  3982                           
  3983                           ; BSR set to: 0
  3984  001B60  0E06               	movlw	6
  3985  001B62  0100               	movlb	0	; () banked
  3986  001B64  19C3               	xorwf	Loading@j& (0+255),w,b
  3987  001B66  0100               	movlb	0	; () banked
  3988  001B68  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  3989  001B6A  A4D8               	btfss	status,2,c
  3990  001B6C  D002               	goto	l8253
  3991  001B6E                     l839:
  3992                           
  3993                           ; BSR set to: 0
  3994                           ;sort.c: 205: LATBbits.LATB2 = 1;
  3995  001B6E  848A               	bsf	3978,2,c	;volatile
  3996                           
  3997                           ;sort.c: 206: }
  3998  001B70  D05D               	goto	l8269
  3999  001B72                     l8253:
  4000                           
  4001                           ; BSR set to: 0
  4002                           ;sort.c: 207: else if(j == 7 || j == 8 || j == 9 || j == 10){
  4003  001B72  0E07               	movlw	7
  4004  001B74  0100               	movlb	0	; () banked
  4005  001B76  19C3               	xorwf	Loading@j& (0+255),w,b
  4006  001B78  0100               	movlb	0	; () banked
  4007  001B7A  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  4008  001B7C  B4D8               	btfsc	status,2,c
  4009  001B7E  D015               	goto	l8261
  4010                           
  4011                           ; BSR set to: 0
  4012  001B80  0E08               	movlw	8
  4013  001B82  0100               	movlb	0	; () banked
  4014  001B84  19C3               	xorwf	Loading@j& (0+255),w,b
  4015  001B86  0100               	movlb	0	; () banked
  4016  001B88  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  4017  001B8A  B4D8               	btfsc	status,2,c
  4018  001B8C  D00E               	goto	l8261
  4019                           
  4020                           ; BSR set to: 0
  4021  001B8E  0E09               	movlw	9
  4022  001B90  0100               	movlb	0	; () banked
  4023  001B92  19C3               	xorwf	Loading@j& (0+255),w,b
  4024  001B94  0100               	movlb	0	; () banked
  4025  001B96  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  4026  001B98  B4D8               	btfsc	status,2,c
  4027  001B9A  D007               	goto	l8261
  4028                           
  4029                           ; BSR set to: 0
  4030  001B9C  0E0A               	movlw	10
  4031  001B9E  0100               	movlb	0	; () banked
  4032  001BA0  19C3               	xorwf	Loading@j& (0+255),w,b
  4033  001BA2  0100               	movlb	0	; () banked
  4034  001BA4  11C4               	iorwf	(Loading@j+1)& (0+255),w,b
  4035  001BA6  A4D8               	btfss	status,2,c
  4036  001BA8  D013               	goto	l841
  4037  001BAA                     l8261:
  4038                           
  4039                           ; BSR set to: 0
  4040                           ;sort.c: 208: f_arm_position = 1;
  4041  001BAA  0E00               	movlw	0
  4042  001BAC  0100               	movlb	0	; () banked
  4043  001BAE  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  4044  001BB0  0E01               	movlw	1
  4045  001BB2  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  4046                           
  4047                           ; BSR set to: 0
  4048                           ;sort.c: 209: _delay((unsigned long)((200)*(32000000/4000.0)));
  4049  001BB4  0E09               	movlw	9
  4050  001BB6  0100               	movlb	0	; () banked
  4051  001BB8  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4052  001BBA  0E1E               	movlw	30
  4053  001BBC  0100               	movlb	0	; () banked
  4054  001BBE  6FB1               	movwf	??_Loading& (0+255),b
  4055  001BC0  0EE4               	movlw	228
  4056  001BC2                     u10987:
  4057  001BC2  2EE8               	decfsz	wreg,f,c
  4058  001BC4  D7FE               	bra	u10987
  4059  001BC6  2FB1               	decfsz	??_Loading& (0+255),f,b
  4060  001BC8  D7FC               	bra	u10987
  4061  001BCA  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4062  001BCC  D7FA               	bra	u10987
  4063  001BCE  D02D               	goto	L2
  4064  001BD0                     l841:
  4065                           
  4066                           ; BSR set to: 0
  4067                           ;sort.c: 211: else if(j % 2 == 0){
  4068  001BD0  0100               	movlb	0	; () banked
  4069  001BD2  B1C3               	btfsc	Loading@j& (0+255),0,b
  4070  001BD4  D02B               	goto	l8269
  4071                           
  4072                           ; BSR set to: 0
  4073                           ;sort.c: 212: LATBbits.LATB2 = !LATBbits.LATB2;
  4074  001BD6  B48A               	btfsc	3978,2,c	;volatile
  4075  001BD8  D004               	goto	u7260
  4076  001BDA  0100               	movlb	0	; () banked
  4077  001BDC  6BB1               	clrf	??_Loading& (0+255),b
  4078  001BDE  2BB1               	incf	??_Loading& (0+255),f,b
  4079  001BE0  D002               	goto	u7278
  4080  001BE2                     u7260:
  4081  001BE2  0100               	movlb	0	; () banked
  4082  001BE4  6BB1               	clrf	??_Loading& (0+255),b
  4083  001BE6                     u7278:
  4084  001BE6  0100               	movlb	0	; () banked
  4085  001BE8  47B1               	rlncf	??_Loading& (0+255),f,b
  4086  001BEA  47B1               	rlncf	??_Loading& (0+255),f,b
  4087  001BEC  508A               	movf	3978,w,c	;volatile
  4088  001BEE  0100               	movlb	0	; () banked
  4089  001BF0  19B1               	xorwf	??_Loading& (0+255),w,b
  4090  001BF2  0BFB               	andlw	-5
  4091  001BF4  19B1               	xorwf	??_Loading& (0+255),w,b
  4092  001BF6  6E8A               	movwf	3978,c	;volatile
  4093                           
  4094                           ;sort.c: 213: f_arm_position = !f_arm_position;
  4095  001BF8  0100               	movlb	0	; () banked
  4096  001BFA  51EA               	movf	_f_arm_position& (0+255),w,b	;volatile
  4097  001BFC  0100               	movlb	0	; () banked
  4098  001BFE  11EB               	iorwf	(_f_arm_position+1)& (0+255),w,b	;volatile
  4099  001C00  A4D8               	btfss	status,2,c
  4100  001C02  D002               	goto	u7280
  4101  001C04  0E01               	movlw	1
  4102  001C06  D001               	goto	u7290
  4103  001C08                     u7280:
  4104  001C08  0E00               	movlw	0
  4105  001C0A                     u7290:
  4106  001C0A  0100               	movlb	0	; () banked
  4107  001C0C  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  4108  001C0E  6BEB               	clrf	(_f_arm_position+1)& (0+255),b	;volatile
  4109                           
  4110                           ; BSR set to: 0
  4111                           ;sort.c: 214: _delay((unsigned long)((200)*(32000000/4000.0)));
  4112  001C10  0E09               	movlw	9
  4113  001C12  0100               	movlb	0	; () banked
  4114  001C14  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4115  001C16  0E1E               	movlw	30
  4116  001C18  0100               	movlb	0	; () banked
  4117  001C1A  6FB1               	movwf	??_Loading& (0+255),b
  4118  001C1C  0EE4               	movlw	228
  4119  001C1E                     u10997:
  4120  001C1E  2EE8               	decfsz	wreg,f,c
  4121  001C20  D7FE               	bra	u10997
  4122  001C22  2FB1               	decfsz	??_Loading& (0+255),f,b
  4123  001C24  D7FC               	bra	u10997
  4124  001C26  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4125  001C28  D7FA               	bra	u10997
  4126  001C2A                     L2:
  4127  001C2A  F000               	nop	
  4128  001C2C                     l8269:
  4129                           
  4130                           ;sort.c: 215: }
  4131                           ;sort.c: 218: if(IR_signal==1){
  4132  001C2C  0100               	movlb	0	; () banked
  4133  001C2E  05E2               	decf	_IR_signal& (0+255),w,b
  4134  001C30  0100               	movlb	0	; () banked
  4135  001C32  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  4136  001C34  A4D8               	btfss	status,2,c
  4137  001C36  D09F               	goto	l8323
  4138                           
  4139                           ; BSR set to: 0
  4140                           ;sort.c: 219: _delay((unsigned long)((350)*(32000000/4000.0)));
  4141  001C38  0E0F               	movlw	15
  4142  001C3A  0100               	movlb	0	; () banked
  4143  001C3C  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4144  001C3E  0E35               	movlw	53
  4145  001C40  0100               	movlb	0	; () banked
  4146  001C42  6FB1               	movwf	??_Loading& (0+255),b
  4147  001C44  0E51               	movlw	81
  4148  001C46                     u11007:
  4149  001C46  2EE8               	decfsz	wreg,f,c
  4150  001C48  D7FE               	bra	u11007
  4151  001C4A  2FB1               	decfsz	??_Loading& (0+255),f,b
  4152  001C4C  D7FC               	bra	u11007
  4153  001C4E  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4154  001C50  D7FA               	bra	u11007
  4155                           
  4156                           ;sort.c: 220: readIR(0);
  4157  001C52  0E00               	movlw	0
  4158  001C54  0100               	movlb	0	; () banked
  4159  001C56  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  4160  001C58  0E00               	movlw	0
  4161  001C5A  6F82               	movwf	readIR@ana_port& (0+255),b
  4162  001C5C  EC9C  F028         	call	_readIR	;wreg free
  4163                           
  4164                           ;sort.c: 221: if(IR_signal==1){
  4165  001C60  0100               	movlb	0	; () banked
  4166  001C62  05E2               	decf	_IR_signal& (0+255),w,b
  4167  001C64  0100               	movlb	0	; () banked
  4168  001C66  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  4169  001C68  A4D8               	btfss	status,2,c
  4170  001C6A  D081               	goto	l847
  4171                           
  4172                           ; BSR set to: 0
  4173                           ;sort.c: 222: if(sensor_outputs[0]){
  4174  001C6C  0100               	movlb	0	; () banked
  4175  001C6E  51DA               	movf	_sensor_outputs& (0+255),w,b
  4176  001C70  0100               	movlb	0	; () banked
  4177  001C72  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4178  001C74  B4D8               	btfsc	status,2,c
  4179  001C76  D011               	goto	l848
  4180                           
  4181                           ; BSR set to: 0
  4182                           ;sort.c: 223: LATAbits.LATA4 = 1;
  4183  001C78  8889               	bsf	3977,4,c	;volatile
  4184                           
  4185                           ; BSR set to: 0
  4186                           ;sort.c: 224: _delay((unsigned long)((300)*(32000000/4000.0)));
  4187  001C7A  0E0D               	movlw	13
  4188  001C7C  0100               	movlb	0	; () banked
  4189  001C7E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4190  001C80  0E2D               	movlw	45
  4191  001C82  0100               	movlb	0	; () banked
  4192  001C84  6FB1               	movwf	??_Loading& (0+255),b
  4193  001C86  0ED7               	movlw	215
  4194  001C88                     u11017:
  4195  001C88  2EE8               	decfsz	wreg,f,c
  4196  001C8A  D7FE               	bra	u11017
  4197  001C8C  2FB1               	decfsz	??_Loading& (0+255),f,b
  4198  001C8E  D7FC               	bra	u11017
  4199  001C90  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4200  001C92  D7FA               	bra	u11017
  4201  001C94  D000               	nop2	
  4202                           
  4203                           ;sort.c: 225: LATAbits.LATA4 = 0;
  4204  001C96  9889               	bcf	3977,4,c	;volatile
  4205                           
  4206                           ;sort.c: 226: }
  4207  001C98  D06A               	goto	l847
  4208  001C9A                     l848:
  4209                           
  4210                           ; BSR set to: 0
  4211                           ;sort.c: 227: else{
  4212                           ;sort.c: 228: TMR2IE = 0;
  4213  001C9A  929D               	bcf	3997,1,c	;volatile
  4214                           
  4215                           ; BSR set to: 0
  4216                           ;sort.c: 229: for(int i = 0; i<3000; i++){
  4217  001C9C  0E00               	movlw	0
  4218  001C9E  0100               	movlb	0	; () banked
  4219  001CA0  6FC0               	movwf	(Loading@i_1142+1)& (0+255),b
  4220  001CA2  0E00               	movlw	0
  4221  001CA4  6FBF               	movwf	Loading@i_1142& (0+255),b
  4222  001CA6                     l8287:
  4223                           
  4224                           ; BSR set to: 0
  4225  001CA6  0100               	movlb	0	; () banked
  4226  001CA8  BFC0               	btfsc	(Loading@i_1142+1)& (0+255),7,b
  4227  001CAA  D041               	goto	l8315
  4228  001CAC  0EB8               	movlw	184
  4229  001CAE  0100               	movlb	0	; () banked
  4230  001CB0  5DBF               	subwf	Loading@i_1142& (0+255),w,b
  4231  001CB2  0E0B               	movlw	11
  4232  001CB4  0100               	movlb	0	; () banked
  4233  001CB6  59C0               	subwfb	(Loading@i_1142+1)& (0+255),w,b
  4234  001CB8  B0D8               	btfsc	status,0,c
  4235  001CBA  D058               	goto	l851
  4236  001CBC  D038               	goto	l8315
  4237  001CBE                     l853:
  4238                           
  4239                           ; BSR set to: 0
  4240                           ;sort.c: 232: LATAbits.LATA4 = 1;
  4241  001CBE  8889               	bsf	3977,4,c	;volatile
  4242                           
  4243                           ; BSR set to: 0
  4244                           ;sort.c: 233: _delay((unsigned long)((75)*(32000000/4000000.0)));
  4245  001CC0  0EC8               	movlw	200
  4246  001CC2                     u11027:
  4247  001CC2  2EE8               	decfsz	wreg,f,c
  4248  001CC4  D7FE               	bra	u11027
  4249                           
  4250                           ;sort.c: 234: LATAbits.LATA4 = 0;
  4251  001CC6  9889               	bcf	3977,4,c	;volatile
  4252                           
  4253                           ;sort.c: 235: _delay((unsigned long)((25)*(32000000/4000000.0)));
  4254  001CC8  0E42               	movlw	66
  4255  001CCA                     u11037:
  4256  001CCA  2EE8               	decfsz	wreg,f,c
  4257  001CCC  D7FE               	bra	u11037
  4258  001CCE  D01C               	goto	L3
  4259  001CD0                     l855:
  4260                           
  4261                           ; BSR set to: 0
  4262                           ;sort.c: 238: LATAbits.LATA4 = 1;
  4263  001CD0  8889               	bsf	3977,4,c	;volatile
  4264                           
  4265                           ; BSR set to: 0
  4266                           ;sort.c: 239: _delay((unsigned long)((80)*(32000000/4000000.0)));
  4267  001CD2  0ED5               	movlw	213
  4268  001CD4                     u11047:
  4269  001CD4  2EE8               	decfsz	wreg,f,c
  4270  001CD6  D7FE               	bra	u11047
  4271  001CD8  F000               	nop	
  4272                           
  4273                           ;sort.c: 240: LATAbits.LATA4 = 0;
  4274  001CDA  9889               	bcf	3977,4,c	;volatile
  4275                           
  4276                           ;sort.c: 241: _delay((unsigned long)((20)*(32000000/4000000.0)));
  4277  001CDC  0E35               	movlw	53
  4278  001CDE                     u11057:
  4279  001CDE  2EE8               	decfsz	wreg,f,c
  4280  001CE0  D7FE               	bra	u11057
  4281  001CE2  D01D               	goto	L4
  4282  001CE4                     l856:
  4283                           
  4284                           ; BSR set to: 0
  4285                           ;sort.c: 244: LATAbits.LATA4 = 1;
  4286  001CE4  8889               	bsf	3977,4,c	;volatile
  4287                           
  4288                           ; BSR set to: 0
  4289                           ;sort.c: 245: _delay((unsigned long)((85)*(32000000/4000000.0)));
  4290  001CE6  0EE2               	movlw	226
  4291  001CE8                     u11067:
  4292  001CE8  2EE8               	decfsz	wreg,f,c
  4293  001CEA  D7FE               	bra	u11067
  4294  001CEC  D000               	nop2	
  4295                           
  4296                           ;sort.c: 246: LATAbits.LATA4 = 0;
  4297  001CEE  9889               	bcf	3977,4,c	;volatile
  4298                           
  4299                           ;sort.c: 247: _delay((unsigned long)((15)*(32000000/4000000.0)));
  4300  001CF0  0E28               	movlw	40
  4301  001CF2                     u11077:
  4302  001CF2  2EE8               	decfsz	wreg,f,c
  4303  001CF4  D7FE               	bra	u11077
  4304                           
  4305                           ;sort.c: 248: break;
  4306  001CF6  D036               	goto	l8317
  4307  001CF8                     l857:
  4308                           
  4309                           ; BSR set to: 0
  4310                           ;sort.c: 250: LATAbits.LATA4 = 1;
  4311  001CF8  8889               	bsf	3977,4,c	;volatile
  4312                           
  4313                           ; BSR set to: 0
  4314                           ;sort.c: 251: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4315  001CFA  0EF0               	movlw	240
  4316  001CFC                     u11087:
  4317  001CFC  2EE8               	decfsz	wreg,f,c
  4318  001CFE  D7FE               	bra	u11087
  4319                           
  4320                           ;sort.c: 252: LATAbits.LATA4 = 0;
  4321  001D00  9889               	bcf	3977,4,c	;volatile
  4322                           
  4323                           ;sort.c: 253: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4324  001D02  0E1A               	movlw	26
  4325  001D04                     u11097:
  4326  001D04  2EE8               	decfsz	wreg,f,c
  4327  001D06  D7FE               	bra	u11097
  4328  001D08                     L3:
  4329  001D08  D000               	nop2	
  4330                           
  4331                           ;sort.c: 254: break;
  4332  001D0A  D02C               	goto	l8317
  4333  001D0C                     l858:
  4334                           
  4335                           ; BSR set to: 0
  4336                           ;sort.c: 256: LATAbits.LATA4 = 1;
  4337  001D0C  8889               	bsf	3977,4,c	;volatile
  4338                           
  4339                           ; BSR set to: 0
  4340                           ;sort.c: 257: _delay((unsigned long)((95)*(32000000/4000000.0)));
  4341  001D0E  0EFD               	movlw	253
  4342  001D10                     u11107:
  4343  001D10  2EE8               	decfsz	wreg,f,c
  4344  001D12  D7FE               	bra	u11107
  4345  001D14  F000               	nop	
  4346                           
  4347                           ;sort.c: 258: LATAbits.LATA4 = 0;
  4348  001D16  9889               	bcf	3977,4,c	;volatile
  4349                           
  4350                           ;sort.c: 259: _delay((unsigned long)((50)*(32000000/4000000.0)));
  4351  001D18  0E85               	movlw	133
  4352  001D1A                     u11117:
  4353  001D1A  2EE8               	decfsz	wreg,f,c
  4354  001D1C  D7FE               	bra	u11117
  4355  001D1E                     L4:
  4356  001D1E  F000               	nop	
  4357                           
  4358                           ;sort.c: 260: break;
  4359  001D20  D021               	goto	l8317
  4360  001D22                     l859:
  4361                           
  4362                           ; BSR set to: 0
  4363                           ;sort.c: 262: LATAbits.LATA4 = 1;
  4364  001D22  8889               	bsf	3977,4,c	;volatile
  4365                           
  4366                           ; BSR set to: 0
  4367                           ;sort.c: 263: _delay((unsigned long)((100)*(32000000/4000000.0)));
  4368  001D24  0EA0               	movlw	160
  4369  001D26                     u11127:
  4370  001D26  D000               	nop2	
  4371  001D28  2EE8               	decfsz	wreg,f,c
  4372  001D2A  D7FD               	bra	u11127
  4373                           
  4374                           ;sort.c: 265: }
  4375                           
  4376                           ;sort.c: 264: break;
  4377  001D2C  D01B               	goto	l8317
  4378  001D2E                     l8315:
  4379  001D2E  C0C3  F0B1         	movff	Loading@j,??_Loading
  4380  001D32  C0C4  F0B2         	movff	Loading@j+1,??_Loading+1
  4381                           
  4382                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4383                           ; Switch size 1, requested type "space"
  4384                           ; Number of cases is 1, Range of values is 0 to 0
  4385                           ; switch strategies available:
  4386                           ; Name         Instructions Cycles
  4387                           ; simple_byte            4     3 (average)
  4388                           ;	Chosen strategy is simple_byte
  4389  001D36  0100               	movlb	0	; () banked
  4390  001D38  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4391  001D3A  0A00               	xorlw	0	; case 0
  4392  001D3C  A4D8               	btfss	status,2,c
  4393  001D3E  D7F1               	goto	l859
  4394                           
  4395                           ; BSR set to: 0
  4396                           ; Switch size 1, requested type "space"
  4397                           ; Number of cases is 5, Range of values is 0 to 4
  4398                           ; switch strategies available:
  4399                           ; Name         Instructions Cycles
  4400                           ; simple_byte           16     9 (average)
  4401                           ;	Chosen strategy is simple_byte
  4402  001D40  0100               	movlb	0	; () banked
  4403  001D42  51B1               	movf	??_Loading& (0+255),w,b
  4404  001D44  0A00               	xorlw	0	; case 0
  4405  001D46  B4D8               	btfsc	status,2,c
  4406  001D48  D7BA               	goto	l853
  4407  001D4A  0A01               	xorlw	1	; case 1
  4408  001D4C  B4D8               	btfsc	status,2,c
  4409  001D4E  D7C0               	goto	l855
  4410  001D50  0A03               	xorlw	3	; case 2
  4411  001D52  B4D8               	btfsc	status,2,c
  4412  001D54  D7C7               	goto	l856
  4413  001D56  0A01               	xorlw	1	; case 3
  4414  001D58  B4D8               	btfsc	status,2,c
  4415  001D5A  D7CE               	goto	l857
  4416  001D5C  0A07               	xorlw	7	; case 4
  4417  001D5E  B4D8               	btfsc	status,2,c
  4418  001D60  D7D5               	goto	l858
  4419  001D62  D7DF               	goto	l859
  4420  001D64                     l8317:
  4421  001D64  0100               	movlb	0	; () banked
  4422  001D66  4BBF               	infsnz	Loading@i_1142& (0+255),f,b
  4423  001D68  2BC0               	incf	(Loading@i_1142+1)& (0+255),f,b
  4424  001D6A  D79D               	goto	l8287
  4425  001D6C                     l851:
  4426                           
  4427                           ; BSR set to: 0
  4428                           ;sort.c: 266: }
  4429                           ;sort.c: 267: TMR2IE = 1;
  4430  001D6C  829D               	bsf	3997,1,c	;volatile
  4431  001D6E                     l847:
  4432                           
  4433                           ;sort.c: 268: }
  4434                           ;sort.c: 269: }
  4435                           ;sort.c: 270: LATAbits.LATA4 = 0;
  4436  001D6E  9889               	bcf	3977,4,c	;volatile
  4437                           
  4438                           ;sort.c: 271: j++;
  4439  001D70  0100               	movlb	0	; () banked
  4440  001D72  4BC3               	infsnz	Loading@j& (0+255),f,b
  4441  001D74  2BC4               	incf	(Loading@j+1)& (0+255),f,b
  4442  001D76                     l8323:
  4443                           
  4444                           ; BSR set to: 0
  4445                           ;sort.c: 272: }
  4446                           ;sort.c: 274: if(!IR_signal){
  4447  001D76  0100               	movlb	0	; () banked
  4448  001D78  51E2               	movf	_IR_signal& (0+255),w,b
  4449  001D7A  0100               	movlb	0	; () banked
  4450  001D7C  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  4451  001D7E  A4D8               	btfss	status,2,c
  4452  001D80  D01B               	goto	l8335
  4453                           
  4454                           ; BSR set to: 0
  4455                           ;sort.c: 275: _delay((unsigned long)((750)*(32000000/4000.0)));
  4456  001D82  0E1F               	movlw	31
  4457  001D84  0100               	movlb	0	; () banked
  4458  001D86  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4459  001D88  0E71               	movlw	113
  4460  001D8A  0100               	movlb	0	; () banked
  4461  001D8C  6FB1               	movwf	??_Loading& (0+255),b
  4462  001D8E  0E1E               	movlw	30
  4463  001D90                     u11137:
  4464  001D90  2EE8               	decfsz	wreg,f,c
  4465  001D92  D7FE               	bra	u11137
  4466  001D94  2FB1               	decfsz	??_Loading& (0+255),f,b
  4467  001D96  D7FC               	bra	u11137
  4468  001D98  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4469  001D9A  D7FA               	bra	u11137
  4470  001D9C  F000               	nop	
  4471                           
  4472                           ;sort.c: 276: readIR(0);
  4473  001D9E  0E00               	movlw	0
  4474  001DA0  0100               	movlb	0	; () banked
  4475  001DA2  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  4476  001DA4  0E00               	movlw	0
  4477  001DA6  6F82               	movwf	readIR@ana_port& (0+255),b
  4478  001DA8  EC9C  F028         	call	_readIR	;wreg free
  4479                           
  4480                           ;sort.c: 277: if(IR_signal==1){
  4481  001DAC  0100               	movlb	0	; () banked
  4482  001DAE  05E2               	decf	_IR_signal& (0+255),w,b
  4483  001DB0  0100               	movlb	0	; () banked
  4484  001DB2  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  4485  001DB4  A4D8               	btfss	status,2,c
  4486  001DB6  D006               	goto	l863
  4487  001DB8                     l8335:
  4488                           
  4489                           ; BSR set to: 0
  4490  001DB8  0100               	movlb	0	; () banked
  4491  001DBA  05E2               	decf	_IR_signal& (0+255),w,b
  4492  001DBC  0100               	movlb	0	; () banked
  4493  001DBE  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  4494  001DC0  B4D8               	btfsc	status,2,c
  4495  001DC2  D6AC               	goto	l8241
  4496  001DC4                     l863:
  4497                           
  4498                           ; BSR set to: 0
  4499                           ;sort.c: 282: }
  4500                           ;sort.c: 283: }
  4501                           ;sort.c: 284: }
  4502                           ;sort.c: 285: LATBbits.LATB2 = 0;
  4503  001DC4  948A               	bcf	3978,2,c	;volatile
  4504  001DC6                     l8337:
  4505                           
  4506                           ; BSR set to: 0
  4507                           ;sort.c: 286: }
  4508                           ;sort.c: 287: f_can_coming_to_ID = 1;
  4509  001DC6  0E00               	movlw	0
  4510  001DC8  0101               	movlb	1	; () banked
  4511  001DCA  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4512  001DCC  0E01               	movlw	1
  4513  001DCE  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4514                           
  4515                           ; BSR set to: 1
  4516                           
  4517                           ; BSR set to: 1
  4518  001DD0  0012               	return	
  4519  001DD2                     __end_of_Loading:
  4520                           	opt stack 0
  4521                           tblptru	equ	0xFF8
  4522                           tblptrh	equ	0xFF7
  4523                           tblptrl	equ	0xFF6
  4524                           tablat	equ	0xFF5
  4525                           prodh	equ	0xFF4
  4526                           prodl	equ	0xFF3
  4527                           postinc0	equ	0xFEE
  4528                           wreg	equ	0xFE8
  4529                           postdec1	equ	0xFE5
  4530                           fsr1l	equ	0xFE1
  4531                           status	equ	0xFD8
  4532                           
  4533 ;; *************** function _initSortTimer *****************
  4534 ;; Defined at:
  4535 ;;		line 504 in file "sort.c"
  4536 ;; Parameters:    Size  Location     Type
  4537 ;;		None
  4538 ;; Auto vars:     Size  Location     Type
  4539 ;;  i               2    8[BANK0 ] int 
  4540 ;; Return value:  Size  Location     Type
  4541 ;;                  1    wreg      void 
  4542 ;; Registers used:
  4543 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4544 ;; Tracked objects:
  4545 ;;		On entry : 0/0
  4546 ;;		On exit  : 0/0
  4547 ;;		Unchanged: 0/0
  4548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4550 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4551 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4552 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4553 ;;Total ram usage:        5 bytes
  4554 ;; Hardware stack levels used:    1
  4555 ;; Hardware stack levels required when called:   10
  4556 ;; This function calls:
  4557 ;;		_getRTC
  4558 ;; This function is called by:
  4559 ;;		_Loading
  4560 ;; This function uses a non-reentrant model
  4561 ;;
  4562                           
  4563                           	psect	text3
  4564  004FEC                     __ptext3:
  4565                           	opt stack 0
  4566  004FEC                     _initSortTimer:
  4567                           	opt stack 18
  4568                           
  4569                           ;sort.c: 506: getRTC();
  4570                           
  4571                           ;incstack = 0
  4572  004FEC  EC2E  F029         	call	_getRTC	;wreg free
  4573                           
  4574                           ;sort.c: 507: for(int i = 0; i < 7; i++){
  4575  004FF0  0E00               	movlw	0
  4576  004FF2  0100               	movlb	0	; () banked
  4577  004FF4  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4578  004FF6  0E00               	movlw	0
  4579  004FF8  6F88               	movwf	initSortTimer@i& (0+255),b
  4580  004FFA                     l7615:
  4581                           
  4582                           ; BSR set to: 0
  4583  004FFA  0100               	movlb	0	; () banked
  4584  004FFC  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4585  004FFE  D008               	goto	l7619
  4586  005000  0100               	movlb	0	; () banked
  4587  005002  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4588  005004  E140               	bnz	l7625
  4589  005006  0E07               	movlw	7
  4590  005008  0100               	movlb	0	; () banked
  4591  00500A  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4592  00500C  B0D8               	btfsc	status,0,c
  4593  00500E  D03B               	goto	l7625
  4594  005010                     l7619:
  4595                           
  4596                           ; BSR set to: 0
  4597                           ;sort.c: 508: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4598  005010  0E1C               	movlw	low _time
  4599  005012  0100               	movlb	0	; () banked
  4600  005014  2588               	addwf	initSortTimer@i& (0+255),w,b
  4601  005016  6ED9               	movwf	fsr2l,c
  4602  005018  0E01               	movlw	high _time
  4603  00501A  0100               	movlb	0	; () banked
  4604  00501C  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4605  00501E  6EDA               	movwf	fsr2h,c
  4606  005020  50DF               	movf	indf2,w,c
  4607  005022  0100               	movlb	0	; () banked
  4608  005024  6F85               	movwf	??_initSortTimer& (0+255),b
  4609  005026  0100               	movlb	0	; () banked
  4610  005028  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4611  00502A  0E0F               	movlw	15
  4612  00502C  1785               	andwf	??_initSortTimer& (0+255),f,b
  4613  00502E  0E0F               	movlw	15
  4614  005030  0100               	movlb	0	; () banked
  4615  005032  1785               	andwf	??_initSortTimer& (0+255),f,b
  4616  005034  0100               	movlb	0	; () banked
  4617  005036  5185               	movf	??_initSortTimer& (0+255),w,b
  4618  005038  0D0A               	mullw	10
  4619  00503A  0E1C               	movlw	low _time
  4620  00503C  0100               	movlb	0	; () banked
  4621  00503E  2588               	addwf	initSortTimer@i& (0+255),w,b
  4622  005040  6ED9               	movwf	fsr2l,c
  4623  005042  0E01               	movlw	high _time
  4624  005044  0100               	movlb	0	; () banked
  4625  005046  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4626  005048  6EDA               	movwf	fsr2h,c
  4627  00504A  50DF               	movf	indf2,w,c
  4628  00504C  0B0F               	andlw	15
  4629  00504E  0100               	movlb	0	; () banked
  4630  005050  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4631  005052  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4632  005054  50F3               	movf	prodl,w,c
  4633  005056  0100               	movlb	0	; () banked
  4634  005058  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4635  00505A  50F4               	movf	prodh,w,c
  4636  00505C  0100               	movlb	0	; () banked
  4637  00505E  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4638  005060  90D8               	bcf	status,0,c
  4639  005062  0100               	movlb	0	; () banked
  4640  005064  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4641  005066  6ED9               	movwf	fsr2l,c
  4642  005068  0100               	movlb	0	; () banked
  4643  00506A  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4644  00506C  6EDA               	movwf	fsr2h,c
  4645  00506E  0E0E               	movlw	low _startTime
  4646  005070  26D9               	addwf	fsr2l,f,c
  4647  005072  0E01               	movlw	high _startTime
  4648  005074  22DA               	addwfc	fsr2h,f,c
  4649  005076  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4650  00507A  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4651                           
  4652                           ; BSR set to: 0
  4653  00507E  0100               	movlb	0	; () banked
  4654  005080  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4655  005082  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4656  005084  D7BA               	goto	l7615
  4657  005086                     l7625:
  4658                           
  4659                           ; BSR set to: 0
  4660                           ;sort.c: 509: }
  4661                           ;sort.c: 511: T0CON = 0b00010111;
  4662  005086  0E17               	movlw	23
  4663  005088  6ED5               	movwf	4053,c	;volatile
  4664                           
  4665                           ;sort.c: 520: TMR0H = 0b10000101;
  4666  00508A  0E85               	movlw	133
  4667  00508C  6ED7               	movwf	4055,c	;volatile
  4668                           
  4669                           ;sort.c: 521: TMR0L = 0b11101110;
  4670  00508E  0EEE               	movlw	238
  4671  005090  6ED6               	movwf	4054,c	;volatile
  4672                           
  4673                           ; BSR set to: 0
  4674                           ;sort.c: 522: TMR0ON = 1;
  4675  005092  8ED5               	bsf	4053,7,c	;volatile
  4676                           
  4677                           ; BSR set to: 0
  4678  005094  0012               	return		;funcret
  4679  005096                     __end_of_initSortTimer:
  4680                           	opt stack 0
  4681                           tblptru	equ	0xFF8
  4682                           tblptrh	equ	0xFF7
  4683                           tblptrl	equ	0xFF6
  4684                           tablat	equ	0xFF5
  4685                           prodh	equ	0xFF4
  4686                           prodl	equ	0xFF3
  4687                           postinc0	equ	0xFEE
  4688                           wreg	equ	0xFE8
  4689                           postdec1	equ	0xFE5
  4690                           fsr1l	equ	0xFE1
  4691                           indf2	equ	0xFDF
  4692                           postinc2	equ	0xFDE
  4693                           postdec2	equ	0xFDD
  4694                           fsr2h	equ	0xFDA
  4695                           fsr2l	equ	0xFD9
  4696                           status	equ	0xFD8
  4697                           
  4698 ;; *************** function _initGlobalVars *****************
  4699 ;; Defined at:
  4700 ;;		line 467 in file "sort.c"
  4701 ;; Parameters:    Size  Location     Type
  4702 ;;		None
  4703 ;; Auto vars:     Size  Location     Type
  4704 ;;  time_recent_    2    0[BANK0 ] int 
  4705 ;; Return value:  Size  Location     Type
  4706 ;;                  1    wreg      void 
  4707 ;; Registers used:
  4708 ;;		wreg, status,2
  4709 ;; Tracked objects:
  4710 ;;		On entry : 0/0
  4711 ;;		On exit  : 0/0
  4712 ;;		Unchanged: 0/0
  4713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4715 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4717 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4718 ;;Total ram usage:        2 bytes
  4719 ;; Hardware stack levels used:    1
  4720 ;; Hardware stack levels required when called:    7
  4721 ;; This function calls:
  4722 ;;		Nothing
  4723 ;; This function is called by:
  4724 ;;		_Loading
  4725 ;; This function uses a non-reentrant model
  4726 ;;
  4727                           
  4728                           	psect	text4
  4729  004A5A                     __ptext4:
  4730                           	opt stack 0
  4731  004A5A                     _initGlobalVars:
  4732                           	opt stack 21
  4733                           
  4734                           ;sort.c: 469: first = 0;
  4735                           
  4736                           ; BSR set to: 0
  4737                           ;incstack = 0
  4738  004A5A  0E00               	movlw	0
  4739  004A5C  0101               	movlb	1	; () banked
  4740  004A5E  6F3A               	movwf	(_first+1)& (0+255),b
  4741  004A60  0E00               	movlw	0
  4742  004A62  6F39               	movwf	_first& (0+255),b
  4743                           
  4744                           ;sort.c: 472: f_loadingNewCan = 0;
  4745  004A64  0E00               	movlw	0
  4746  004A66  0100               	movlb	0	; () banked
  4747  004A68  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4748  004A6A  0E00               	movlw	0
  4749  004A6C  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  4750                           
  4751                           ;sort.c: 473: f_lastCan = 0;
  4752  004A6E  0E00               	movlw	0
  4753  004A70  0100               	movlb	0	; () banked
  4754  004A72  6FED               	movwf	(_f_lastCan+1)& (0+255),b
  4755  004A74  0E00               	movlw	0
  4756  004A76  6FEC               	movwf	_f_lastCan& (0+255),b
  4757                           
  4758                           ;sort.c: 474: f_ID_receive = 1;
  4759  004A78  0E00               	movlw	0
  4760  004A7A  0101               	movlb	1	; () banked
  4761  004A7C  6F30               	movwf	(_f_ID_receive+1)& (0+255),b
  4762  004A7E  0E01               	movlw	1
  4763  004A80  6F2F               	movwf	_f_ID_receive& (0+255),b
  4764                           
  4765                           ;sort.c: 475: f_can_coming_to_ID = 0;
  4766  004A82  0E00               	movlw	0
  4767  004A84  0101               	movlb	1	; () banked
  4768  004A86  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4769  004A88  0E00               	movlw	0
  4770  004A8A  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4771                           
  4772                           ;sort.c: 476: f_can_coming_to_distribution = 0;
  4773  004A8C  0E00               	movlw	0
  4774  004A8E  0101               	movlb	1	; () banked
  4775  004A90  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4776  004A92  0E00               	movlw	0
  4777  004A94  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  4778                           
  4779                           ;sort.c: 477: f_can_distributed = 1;
  4780  004A96  0E00               	movlw	0
  4781  004A98  0101               	movlb	1	; () banked
  4782  004A9A  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  4783  004A9C  0E01               	movlw	1
  4784  004A9E  6F35               	movwf	_f_can_distributed& (0+255),b
  4785                           
  4786                           ;sort.c: 478: f_most_recent_sort_time = 0;
  4787  004AA0  0E00               	movlw	0
  4788  004AA2  0101               	movlb	1	; () banked
  4789  004AA4  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4790  004AA6  0E00               	movlw	0
  4791  004AA8  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  4792                           
  4793                           ;sort.c: 481: count_total = 0;
  4794  004AAA  0E00               	movlw	0
  4795  004AAC  0100               	movlb	0	; () banked
  4796  004AAE  6FFF               	movwf	(_count_total+1)& (0+255),b
  4797  004AB0  0E00               	movlw	0
  4798  004AB2  6FFE               	movwf	_count_total& (0+255),b
  4799                           
  4800                           ;sort.c: 482: count_pop_no_tab = 0;
  4801  004AB4  0E00               	movlw	0
  4802  004AB6  0101               	movlb	1	; () banked
  4803  004AB8  6F28               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4804  004ABA  0E00               	movlw	0
  4805  004ABC  6F27               	movwf	_count_pop_no_tab& (0+255),b
  4806                           
  4807                           ;sort.c: 483: count_pop_w_tab = 0;
  4808  004ABE  0E00               	movlw	0
  4809  004AC0  0101               	movlb	1	; () banked
  4810  004AC2  6F2A               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4811  004AC4  0E00               	movlw	0
  4812  004AC6  6F29               	movwf	_count_pop_w_tab& (0+255),b
  4813                           
  4814                           ;sort.c: 484: count_can_w_lab = 0;
  4815  004AC8  0E00               	movlw	0
  4816  004ACA  0101               	movlb	1	; () banked
  4817  004ACC  6F26               	movwf	(_count_can_w_lab+1)& (0+255),b
  4818  004ACE  0E00               	movlw	0
  4819  004AD0  6F25               	movwf	_count_can_w_lab& (0+255),b
  4820                           
  4821                           ;sort.c: 485: count_can_no_lab = 0;
  4822  004AD2  0E00               	movlw	0
  4823  004AD4  0101               	movlb	1	; () banked
  4824  004AD6  6F24               	movwf	(_count_can_no_lab+1)& (0+255),b
  4825  004AD8  0E00               	movlw	0
  4826  004ADA  6F23               	movwf	_count_can_no_lab& (0+255),b
  4827                           
  4828                           ;sort.c: 488: most_recent_sort_time = 999;
  4829  004ADC  0E03               	movlw	3
  4830  004ADE  0101               	movlb	1	; () banked
  4831  004AE0  6F48               	movwf	(_most_recent_sort_time+1)& (0+255),b
  4832  004AE2  0EE7               	movlw	231
  4833  004AE4  6F47               	movwf	_most_recent_sort_time& (0+255),b
  4834                           
  4835                           ;sort.c: 489: int time_recent_agitator = 0;
  4836  004AE6  0E00               	movlw	0
  4837  004AE8  0100               	movlb	0	; () banked
  4838  004AEA  6F81               	movwf	(initGlobalVars@time_recent_agitator+1)& (0+255),b
  4839  004AEC  0E00               	movlw	0
  4840  004AEE  6F80               	movwf	initGlobalVars@time_recent_agitator& (0+255),b
  4841                           
  4842                           ;sort.c: 492: motor_toggle_count = 0;
  4843  004AF0  0E00               	movlw	0
  4844  004AF2  0101               	movlb	1	; () banked
  4845  004AF4  6F4A               	movwf	(_motor_toggle_count+1)& (0+255),b
  4846  004AF6  0E00               	movlw	0
  4847  004AF8  6F49               	movwf	_motor_toggle_count& (0+255),b
  4848                           
  4849                           ;sort.c: 493: agitator_toggle_count = 0;
  4850  004AFA  0E00               	movlw	0
  4851  004AFC  6E62               	movwf	_agitator_toggle_count+1,c
  4852  004AFE  0E00               	movlw	0
  4853  004B00  6E61               	movwf	_agitator_toggle_count,c
  4854                           
  4855                           ;sort.c: 496: servo_timer_counter = 0;
  4856  004B02  0E00               	movlw	0
  4857  004B04  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
  4858  004B06  0E00               	movlw	0
  4859  004B08  6E6D               	movwf	_servo_timer_counter,c	;volatile
  4860                           
  4861                           ;sort.c: 497: servo_timer_target = 9999;
  4862  004B0A  0E27               	movlw	39
  4863  004B0C  6E70               	movwf	_servo_timer_target+1,c	;volatile
  4864  004B0E  0E0F               	movlw	15
  4865  004B10  6E6F               	movwf	_servo_timer_target,c	;volatile
  4866                           
  4867                           ;sort.c: 498: timer2_counter = 0;
  4868  004B12  0E00               	movlw	0
  4869  004B14  6E74               	movwf	_timer2_counter+1,c	;volatile
  4870  004B16  0E00               	movlw	0
  4871  004B18  6E73               	movwf	_timer2_counter,c	;volatile
  4872                           
  4873                           ;sort.c: 499: f_arm_position = 0;
  4874  004B1A  0E00               	movlw	0
  4875  004B1C  0100               	movlb	0	; () banked
  4876  004B1E  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  4877  004B20  0E00               	movlw	0
  4878  004B22  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  4879                           
  4880                           ; BSR set to: 0
  4881                           ;sort.c: 500: pan_servo_state = -1;
  4882  004B24  686B               	setf	_pan_servo_state,c	;volatile
  4883  004B26  686C               	setf	_pan_servo_state+1,c	;volatile
  4884                           
  4885                           ; BSR set to: 0
  4886                           ;sort.c: 501: tilt_servo_state = -1;
  4887  004B28  6871               	setf	_tilt_servo_state,c	;volatile
  4888  004B2A  6872               	setf	_tilt_servo_state+1,c	;volatile
  4889                           
  4890                           ;sort.c: 502: f_panning_to_bin = 0;
  4891  004B2C  0E00               	movlw	0
  4892  004B2E  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
  4893  004B30  0E00               	movlw	0
  4894  004B32  6E69               	movwf	_f_panning_to_bin,c	;volatile
  4895                           
  4896                           ; BSR set to: 0
  4897  004B34  0012               	return		;funcret
  4898  004B36                     __end_of_initGlobalVars:
  4899                           	opt stack 0
  4900                           tblptru	equ	0xFF8
  4901                           tblptrh	equ	0xFF7
  4902                           tblptrl	equ	0xFF6
  4903                           tablat	equ	0xFF5
  4904                           prodh	equ	0xFF4
  4905                           prodl	equ	0xFF3
  4906                           postinc0	equ	0xFEE
  4907                           wreg	equ	0xFE8
  4908                           postdec1	equ	0xFE5
  4909                           fsr1l	equ	0xFE1
  4910                           indf2	equ	0xFDF
  4911                           postinc2	equ	0xFDE
  4912                           postdec2	equ	0xFDD
  4913                           fsr2h	equ	0xFDA
  4914                           fsr2l	equ	0xFD9
  4915                           status	equ	0xFD8
  4916                           
  4917 ;; *************** function _getMAG *****************
  4918 ;; Defined at:
  4919 ;;		line 643 in file "sort.c"
  4920 ;; Parameters:    Size  Location     Type
  4921 ;;		None
  4922 ;; Auto vars:     Size  Location     Type
  4923 ;;		None
  4924 ;; Return value:  Size  Location     Type
  4925 ;;                  1    wreg      void 
  4926 ;; Registers used:
  4927 ;;		wreg, status,2, status,0, cstack
  4928 ;; Tracked objects:
  4929 ;;		On entry : 0/0
  4930 ;;		On exit  : 0/0
  4931 ;;		Unchanged: 0/0
  4932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4935 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4936 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4937 ;;Total ram usage:        2 bytes
  4938 ;; Hardware stack levels used:    1
  4939 ;; Hardware stack levels required when called:    9
  4940 ;; This function calls:
  4941 ;;		_readMAG
  4942 ;; This function is called by:
  4943 ;;		_Loading
  4944 ;; This function uses a non-reentrant model
  4945 ;;
  4946                           
  4947                           	psect	text5
  4948  005C34                     __ptext5:
  4949                           	opt stack 0
  4950  005C34                     _getMAG:
  4951                           	opt stack 19
  4952                           
  4953                           ;sort.c: 644: readMAG();
  4954                           
  4955                           ; BSR set to: 0
  4956                           ;incstack = 0
  4957  005C34  ECEA  F02C         	call	_readMAG	;wreg free
  4958                           
  4959                           ;sort.c: 645: if(MAG_signal){
  4960  005C38  0100               	movlb	0	; () banked
  4961  005C3A  51E4               	movf	_MAG_signal& (0+255),w,b
  4962  005C3C  0100               	movlb	0	; () banked
  4963  005C3E  11E5               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4964  005C40  B4D8               	btfsc	status,2,c
  4965  005C42  0012               	return	
  4966                           
  4967                           ; BSR set to: 0
  4968                           ;sort.c: 646: _delay((unsigned long)((100)*(32000000/4000.0)));
  4969  005C44  0E05               	movlw	5
  4970  005C46  0100               	movlb	0	; () banked
  4971  005C48  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4972  005C4A  0E0F               	movlw	15
  4973  005C4C  0100               	movlb	0	; () banked
  4974  005C4E  6F86               	movwf	??_getMAG& (0+255),b
  4975  005C50  0EF1               	movlw	241
  4976  005C52                     u11147:
  4977  005C52  2EE8               	decfsz	wreg,f,c
  4978  005C54  D7FE               	bra	u11147
  4979  005C56  2F86               	decfsz	??_getMAG& (0+255),f,b
  4980  005C58  D7FC               	bra	u11147
  4981  005C5A  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4982  005C5C  D7FA               	bra	u11147
  4983                           
  4984                           ;sort.c: 647: readMAG();
  4985  005C5E  ECEA  F02C         	call	_readMAG	;wreg free
  4986  005C62  0012               	return	
  4987  005C64                     __end_of_getMAG:
  4988                           	opt stack 0
  4989                           tblptru	equ	0xFF8
  4990                           tblptrh	equ	0xFF7
  4991                           tblptrl	equ	0xFF6
  4992                           tablat	equ	0xFF5
  4993                           prodh	equ	0xFF4
  4994                           prodl	equ	0xFF3
  4995                           postinc0	equ	0xFEE
  4996                           wreg	equ	0xFE8
  4997                           postdec1	equ	0xFE5
  4998                           fsr1l	equ	0xFE1
  4999                           indf2	equ	0xFDF
  5000                           postinc2	equ	0xFDE
  5001                           postdec2	equ	0xFDD
  5002                           fsr2h	equ	0xFDA
  5003                           fsr2l	equ	0xFD9
  5004                           status	equ	0xFD8
  5005                           
  5006 ;; *************** function _getIR *****************
  5007 ;; Defined at:
  5008 ;;		line 627 in file "sort.c"
  5009 ;; Parameters:    Size  Location     Type
  5010 ;;  port            2    6[BANK0 ] int 
  5011 ;; Auto vars:     Size  Location     Type
  5012 ;;  i               2    9[BANK0 ] int 
  5013 ;; Return value:  Size  Location     Type
  5014 ;;                  1    wreg      void 
  5015 ;; Registers used:
  5016 ;;		wreg, status,2, status,0, cstack
  5017 ;; Tracked objects:
  5018 ;;		On entry : 0/0
  5019 ;;		On exit  : 0/0
  5020 ;;		Unchanged: 0/0
  5021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5022 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5023 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5024 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5025 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5026 ;;Total ram usage:        5 bytes
  5027 ;; Hardware stack levels used:    1
  5028 ;; Hardware stack levels required when called:    9
  5029 ;; This function calls:
  5030 ;;		_readIR
  5031 ;; This function is called by:
  5032 ;;		_Loading
  5033 ;; This function uses a non-reentrant model
  5034 ;;
  5035                           
  5036                           	psect	text6
  5037  005366                     __ptext6:
  5038                           	opt stack 0
  5039  005366                     _getIR:
  5040                           	opt stack 19
  5041                           
  5042                           ;sort.c: 628: readIR(port);
  5043                           
  5044                           ;incstack = 0
  5045  005366  C086  F082         	movff	getIR@port,readIR@ana_port
  5046  00536A  C087  F083         	movff	getIR@port+1,readIR@ana_port+1
  5047  00536E  EC9C  F028         	call	_readIR	;wreg free
  5048                           
  5049                           ;sort.c: 629: for(int i = 0; i < 150; i++){
  5050  005372  0E00               	movlw	0
  5051  005374  0100               	movlb	0	; () banked
  5052  005376  6F8A               	movwf	(getIR@i+1)& (0+255),b
  5053  005378  0E00               	movlw	0
  5054  00537A  6F89               	movwf	getIR@i& (0+255),b
  5055  00537C                     l7715:
  5056                           
  5057                           ; BSR set to: 0
  5058  00537C  0100               	movlb	0	; () banked
  5059  00537E  BF8A               	btfsc	(getIR@i+1)& (0+255),7,b
  5060  005380  D008               	goto	l7719
  5061  005382  0100               	movlb	0	; () banked
  5062  005384  518A               	movf	(getIR@i+1)& (0+255),w,b
  5063  005386  E11E               	bnz	l7731
  5064  005388  0E96               	movlw	150
  5065  00538A  0100               	movlb	0	; () banked
  5066  00538C  5D89               	subwf	getIR@i& (0+255),w,b
  5067  00538E  B0D8               	btfsc	status,0,c
  5068  005390  D019               	goto	l7731
  5069  005392                     l7719:
  5070                           
  5071                           ; BSR set to: 0
  5072                           ;sort.c: 630: _delay((unsigned long)((500)*(32000000/4000000.0)));
  5073  005392  0E06               	movlw	6
  5074  005394  0100               	movlb	0	; () banked
  5075  005396  6F88               	movwf	??_getIR& (0+255),b
  5076  005398  0E30               	movlw	48
  5077  00539A                     u11157:
  5078  00539A  2EE8               	decfsz	wreg,f,c
  5079  00539C  D7FE               	bra	u11157
  5080  00539E  2F88               	decfsz	??_getIR& (0+255),f,b
  5081  0053A0  D7FC               	bra	u11157
  5082  0053A2  F000               	nop	
  5083                           
  5084                           ;sort.c: 631: readIR(port);
  5085  0053A4  C086  F082         	movff	getIR@port,readIR@ana_port
  5086  0053A8  C087  F083         	movff	getIR@port+1,readIR@ana_port+1
  5087  0053AC  EC9C  F028         	call	_readIR	;wreg free
  5088                           
  5089                           ;sort.c: 632: if(!IR_signal){
  5090  0053B0  0100               	movlb	0	; () banked
  5091  0053B2  51E2               	movf	_IR_signal& (0+255),w,b
  5092  0053B4  0100               	movlb	0	; () banked
  5093  0053B6  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  5094  0053B8  B4D8               	btfsc	status,2,c
  5095  0053BA  D004               	goto	l7731
  5096                           
  5097                           ; BSR set to: 0
  5098                           
  5099                           ; BSR set to: 0
  5100                           
  5101                           ; BSR set to: 0
  5102                           ;sort.c: 633: break;
  5103  0053BC  0100               	movlb	0	; () banked
  5104  0053BE  4B89               	infsnz	getIR@i& (0+255),f,b
  5105  0053C0  2B8A               	incf	(getIR@i+1)& (0+255),f,b
  5106  0053C2  D7DC               	goto	l7715
  5107  0053C4                     l7731:
  5108                           
  5109                           ; BSR set to: 0
  5110                           ;sort.c: 634: }
  5111                           ;sort.c: 635: }
  5112                           ;sort.c: 636: if(IR_signal==1){
  5113  0053C4  0100               	movlb	0	; () banked
  5114  0053C6  05E2               	decf	_IR_signal& (0+255),w,b
  5115  0053C8  0100               	movlb	0	; () banked
  5116  0053CA  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  5117  0053CC  A4D8               	btfss	status,2,c
  5118  0053CE  D006               	goto	l7735
  5119                           
  5120                           ; BSR set to: 0
  5121                           ;sort.c: 637: f_loadingNewCan = 1;
  5122  0053D0  0E00               	movlw	0
  5123  0053D2  0100               	movlb	0	; () banked
  5124  0053D4  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  5125  0053D6  0E01               	movlw	1
  5126  0053D8  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  5127                           
  5128                           ;sort.c: 638: }
  5129  0053DA  0012               	return	
  5130  0053DC                     l7735:
  5131                           
  5132                           ; BSR set to: 0
  5133                           ;sort.c: 639: else{
  5134                           ;sort.c: 640: f_loadingNewCan = 0;
  5135  0053DC  0E00               	movlw	0
  5136  0053DE  0100               	movlb	0	; () banked
  5137  0053E0  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  5138  0053E2  0E00               	movlw	0
  5139  0053E4  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  5140  0053E6  0012               	return	
  5141  0053E8                     __end_of_getIR:
  5142                           	opt stack 0
  5143                           tblptru	equ	0xFF8
  5144                           tblptrh	equ	0xFF7
  5145                           tblptrl	equ	0xFF6
  5146                           tablat	equ	0xFF5
  5147                           prodh	equ	0xFF4
  5148                           prodl	equ	0xFF3
  5149                           postinc0	equ	0xFEE
  5150                           wreg	equ	0xFE8
  5151                           postdec1	equ	0xFE5
  5152                           fsr1l	equ	0xFE1
  5153                           indf2	equ	0xFDF
  5154                           postinc2	equ	0xFDE
  5155                           postdec2	equ	0xFDD
  5156                           fsr2h	equ	0xFDA
  5157                           fsr2l	equ	0xFD9
  5158                           status	equ	0xFD8
  5159                           
  5160 ;; *************** function _ID *****************
  5161 ;; Defined at:
  5162 ;;		line 291 in file "sort.c"
  5163 ;; Parameters:    Size  Location     Type
  5164 ;;		None
  5165 ;; Auto vars:     Size  Location     Type
  5166 ;;  i               2   45[BANK0 ] int 
  5167 ;;  i               2   58[BANK0 ] int 
  5168 ;;  j               2   60[BANK0 ] int 
  5169 ;;  i               2   43[BANK0 ] int 
  5170 ;;  i               2   41[BANK0 ] int 
  5171 ;;  i               2   47[BANK0 ] int 
  5172 ;;  res             4   54[BANK0 ] int [2]
  5173 ;;  time            1   35[BANK0 ] const unsigned char 
  5174 ;;  res2            2   52[BANK0 ] int 
  5175 ;;  res1            2   50[BANK0 ] int 
  5176 ;;  time            1   49[BANK0 ] const unsigned char 
  5177 ;;  n               2   62[BANK0 ] const int 
  5178 ;;  reflectivity    2   33[BANK0 ] int 
  5179 ;;  cond1           2   31[BANK0 ] int 
  5180 ;;  reflectivity    2   29[BANK0 ] int 
  5181 ;; Return value:  Size  Location     Type
  5182 ;;                  1    wreg      void 
  5183 ;; Registers used:
  5184 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5185 ;; Tracked objects:
  5186 ;;		On entry : 0/0
  5187 ;;		On exit  : 0/0
  5188 ;;		Unchanged: 0/0
  5189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5191 ;;      Locals:         0      35       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5192 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5193 ;;      Totals:         0      37       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5194 ;;Total ram usage:       37 bytes
  5195 ;; Hardware stack levels used:    1
  5196 ;; Hardware stack levels required when called:    9
  5197 ;; This function calls:
  5198 ;;		___awdiv
  5199 ;;		___awtoft
  5200 ;;		___ftge
  5201 ;;		_delay_ms
  5202 ;;		_readCOND
  5203 ;;		_readIR
  5204 ;; This function is called by:
  5205 ;;		_sort
  5206 ;; This function uses a non-reentrant model
  5207 ;;
  5208                           
  5209                           	psect	text7
  5210  001192                     __ptext7:
  5211                           	opt stack 0
  5212  001192                     _ID:
  5213                           	opt stack 20
  5214                           
  5215                           ;sort.c: 292: if(f_can_coming_to_ID){
  5216                           
  5217                           ; BSR set to: 0
  5218                           ;incstack = 0
  5219  001192  0101               	movlb	1	; () banked
  5220  001194  5131               	movf	_f_can_coming_to_ID& (0+255),w,b
  5221  001196  0101               	movlb	1	; () banked
  5222  001198  1132               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  5223  00119A  B4D8               	btfsc	status,2,c
  5224  00119C  0012               	return	
  5225                           
  5226                           ; BSR set to: 1
  5227                           ;sort.c: 294: _delay((unsigned long)((750)*(32000000/4000.0)));
  5228  00119E  0E1F               	movlw	31
  5229  0011A0  0100               	movlb	0	; () banked
  5230  0011A2  6F9C               	movwf	(??_ID+1)& (0+255),b
  5231  0011A4  0E71               	movlw	113
  5232  0011A6  0100               	movlb	0	; () banked
  5233  0011A8  6F9B               	movwf	??_ID& (0+255),b
  5234  0011AA  0E1E               	movlw	30
  5235  0011AC                     u11167:
  5236  0011AC  2EE8               	decfsz	wreg,f,c
  5237  0011AE  D7FE               	bra	u11167
  5238  0011B0  2F9B               	decfsz	??_ID& (0+255),f,b
  5239  0011B2  D7FC               	bra	u11167
  5240  0011B4  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5241  0011B6  D7FA               	bra	u11167
  5242  0011B8  F000               	nop	
  5243                           
  5244                           ;sort.c: 296: f_arm_position = 0;
  5245  0011BA  0E00               	movlw	0
  5246  0011BC  0100               	movlb	0	; () banked
  5247  0011BE  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  5248  0011C0  0E00               	movlw	0
  5249  0011C2  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  5250                           
  5251                           ; BSR set to: 0
  5252                           ;sort.c: 298: if(sensor_outputs[0]){
  5253  0011C4  0100               	movlb	0	; () banked
  5254  0011C6  51DA               	movf	_sensor_outputs& (0+255),w,b
  5255  0011C8  0100               	movlb	0	; () banked
  5256  0011CA  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5257  0011CC  B4D8               	btfsc	status,2,c
  5258  0011CE  D031               	goto	l8371
  5259                           
  5260                           ; BSR set to: 0
  5261                           ;sort.c: 300: readIR(3);
  5262  0011D0  0E00               	movlw	0
  5263  0011D2  0100               	movlb	0	; () banked
  5264  0011D4  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  5265  0011D6  0E03               	movlw	3
  5266  0011D8  6F82               	movwf	readIR@ana_port& (0+255),b
  5267  0011DA  EC9C  F028         	call	_readIR	;wreg free
  5268                           
  5269                           ;sort.c: 301: sensor_outputs[1] = IR_signal;
  5270  0011DE  C0E2  F0DC         	movff	_IR_signal,_sensor_outputs+2
  5271  0011E2  C0E3  F0DD         	movff	_IR_signal+1,_sensor_outputs+3
  5272                           
  5273                           ;sort.c: 302: _delay((unsigned long)((10)*(32000000/4000.0)));
  5274  0011E6  0E68               	movlw	104
  5275  0011E8  0100               	movlb	0	; () banked
  5276  0011EA  6F9B               	movwf	??_ID& (0+255),b
  5277  0011EC  0EE4               	movlw	228
  5278  0011EE                     u11177:
  5279  0011EE  2EE8               	decfsz	wreg,f,c
  5280  0011F0  D7FE               	bra	u11177
  5281  0011F2  2F9B               	decfsz	??_ID& (0+255),f,b
  5282  0011F4  D7FC               	bra	u11177
  5283  0011F6  F000               	nop	
  5284                           
  5285                           ;sort.c: 303: readIR(3);
  5286  0011F8  0E00               	movlw	0
  5287  0011FA  0100               	movlb	0	; () banked
  5288  0011FC  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  5289  0011FE  0E03               	movlw	3
  5290  001200  6F82               	movwf	readIR@ana_port& (0+255),b
  5291  001202  EC9C  F028         	call	_readIR	;wreg free
  5292                           
  5293                           ;sort.c: 304: sensor_outputs[1] = sensor_outputs[1] || IR_signal;
  5294  001206  0E01               	movlw	1
  5295  001208  0100               	movlb	0	; () banked
  5296  00120A  6FA4               	movwf	_ID$1144& (0+255),b
  5297                           
  5298                           ; BSR set to: 0
  5299  00120C  0100               	movlb	0	; () banked
  5300  00120E  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5301  001210  0100               	movlb	0	; () banked
  5302  001212  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5303  001214  A4D8               	btfss	status,2,c
  5304  001216  D009               	goto	l8369
  5305                           
  5306                           ; BSR set to: 0
  5307  001218  0100               	movlb	0	; () banked
  5308  00121A  51E2               	movf	_IR_signal& (0+255),w,b
  5309  00121C  0100               	movlb	0	; () banked
  5310  00121E  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  5311  001220  A4D8               	btfss	status,2,c
  5312  001222  D003               	goto	l8369
  5313                           
  5314                           ; BSR set to: 0
  5315  001224  0E00               	movlw	0
  5316  001226  0100               	movlb	0	; () banked
  5317  001228  6FA4               	movwf	_ID$1144& (0+255),b
  5318  00122A                     l8369:
  5319                           
  5320                           ; BSR set to: 0
  5321  00122A  C0A4  F0DC         	movff	_ID$1144,_sensor_outputs+2
  5322  00122E  0100               	movlb	0	; () banked
  5323  001230  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5324  001232                     l8371:
  5325                           
  5326                           ; BSR set to: 0
  5327                           ;sort.c: 305: }
  5328                           ;sort.c: 306: int reflectivity1 = IR_res;
  5329  001232  C0E0  F09D         	movff	_IR_res,ID@reflectivity1
  5330  001236  C0E1  F09E         	movff	_IR_res+1,ID@reflectivity1+1
  5331                           
  5332                           ; BSR set to: 0
  5333                           ;sort.c: 308: LATCbits.LATC7 = 1;
  5334  00123A  8E8B               	bsf	3979,7,c	;volatile
  5335                           
  5336                           ;sort.c: 311: const int n = 10;
  5337  00123C  0E00               	movlw	0
  5338  00123E  0100               	movlb	0	; () banked
  5339  001240  6FBF               	movwf	(ID@n+1)& (0+255),b
  5340  001242  0E0A               	movlw	10
  5341  001244  6FBE               	movwf	ID@n& (0+255),b
  5342                           
  5343                           ; BSR set to: 0
  5344                           ;sort.c: 313: if(!sensor_outputs[0]){
  5345  001246  0100               	movlb	0	; () banked
  5346  001248  51DA               	movf	_sensor_outputs& (0+255),w,b
  5347  00124A  0100               	movlb	0	; () banked
  5348  00124C  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5349  00124E  A4D8               	btfss	status,2,c
  5350  001250  D0E3               	goto	l8427
  5351                           
  5352                           ; BSR set to: 0
  5353                           ;sort.c: 314: const unsigned char time = (600 / n);
  5354  001252  0E02               	movlw	2
  5355  001254  0100               	movlb	0	; () banked
  5356  001256  6F87               	movwf	(___awdiv@dividend+1)& (0+255),b
  5357  001258  0E58               	movlw	88
  5358  00125A  6F86               	movwf	___awdiv@dividend& (0+255),b
  5359  00125C  C0BE  F088         	movff	ID@n,___awdiv@divisor
  5360  001260  C0BF  F089         	movff	ID@n+1,___awdiv@divisor+1
  5361  001264  EC39  F027         	call	___awdiv	;wreg free
  5362  001268  0100               	movlb	0	; () banked
  5363  00126A  5186               	movf	?___awdiv& (0+255),w,b
  5364  00126C  0100               	movlb	0	; () banked
  5365  00126E  6FB1               	movwf	ID@time& (0+255),b
  5366                           
  5367                           ; BSR set to: 0
  5368                           ;sort.c: 315: int res1 = 0;
  5369  001270  0E00               	movlw	0
  5370  001272  0100               	movlb	0	; () banked
  5371  001274  6FB3               	movwf	(ID@res1+1)& (0+255),b
  5372  001276  0E00               	movlw	0
  5373  001278  6FB2               	movwf	ID@res1& (0+255),b
  5374                           
  5375                           ; BSR set to: 0
  5376                           ;sort.c: 316: int res2 = 0;
  5377  00127A  0E00               	movlw	0
  5378  00127C  0100               	movlb	0	; () banked
  5379  00127E  6FB5               	movwf	(ID@res2+1)& (0+255),b
  5380  001280  0E00               	movlw	0
  5381  001282  6FB4               	movwf	ID@res2& (0+255),b
  5382                           
  5383                           ; BSR set to: 0
  5384                           ;sort.c: 317: for(int i = 0; i<n; i++){
  5385  001284  0E00               	movlw	0
  5386  001286  0100               	movlb	0	; () banked
  5387  001288  6FAA               	movwf	(ID@i+1)& (0+255),b
  5388  00128A  0E00               	movlw	0
  5389  00128C  6FA9               	movwf	ID@i& (0+255),b
  5390  00128E                     l8385:
  5391                           
  5392                           ; BSR set to: 0
  5393  00128E  0100               	movlb	0	; () banked
  5394  001290  51BE               	movf	ID@n& (0+255),w,b
  5395  001292  0100               	movlb	0	; () banked
  5396  001294  5DA9               	subwf	ID@i& (0+255),w,b
  5397  001296  0100               	movlb	0	; () banked
  5398  001298  51AA               	movf	(ID@i+1)& (0+255),w,b
  5399  00129A  0A80               	xorlw	128
  5400  00129C  0100               	movlb	0	; () banked
  5401  00129E  6F9B               	movwf	??_ID& (0+255),b
  5402  0012A0  0100               	movlb	0	; () banked
  5403  0012A2  51BF               	movf	(ID@n+1)& (0+255),w,b
  5404  0012A4  0A80               	xorlw	128
  5405  0012A6  0100               	movlb	0	; () banked
  5406  0012A8  599B               	subwfb	??_ID& (0+255),w,b
  5407  0012AA  B0D8               	btfsc	status,0,c
  5408  0012AC  D012               	goto	l872
  5409                           
  5410                           ; BSR set to: 0
  5411                           ;sort.c: 318: delay_ms(time);
  5412                           
  5413                           ; BSR set to: 0
  5414                           
  5415                           ; BSR set to: 0
  5416  0012AE  0100               	movlb	0	; () banked
  5417  0012B0  51B1               	movf	ID@time& (0+255),w,b
  5418  0012B2  EC91  F02F         	call	_delay_ms
  5419                           
  5420                           ;sort.c: 319: readCOND();
  5421  0012B6  ECC4  F02C         	call	_readCOND	;wreg free
  5422                           
  5423                           ;sort.c: 320: res1 += COND_signal;
  5424  0012BA  0100               	movlb	0	; () banked
  5425  0012BC  51DE               	movf	_COND_signal& (0+255),w,b
  5426  0012BE  0100               	movlb	0	; () banked
  5427  0012C0  27B2               	addwf	ID@res1& (0+255),f,b
  5428  0012C2  0100               	movlb	0	; () banked
  5429  0012C4  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5430  0012C6  0100               	movlb	0	; () banked
  5431  0012C8  23B3               	addwfc	(ID@res1+1)& (0+255),f,b
  5432                           
  5433                           ; BSR set to: 0
  5434  0012CA  0100               	movlb	0	; () banked
  5435  0012CC  4BA9               	infsnz	ID@i& (0+255),f,b
  5436  0012CE  2BAA               	incf	(ID@i+1)& (0+255),f,b
  5437  0012D0  D7DE               	goto	l8385
  5438  0012D2                     l872:
  5439                           
  5440                           ; BSR set to: 0
  5441                           ;sort.c: 321: }
  5442                           ;sort.c: 322: LATCbits.LATC7 = 0;
  5443  0012D2  9E8B               	bcf	3979,7,c	;volatile
  5444                           
  5445                           ; BSR set to: 0
  5446                           ;sort.c: 323: _delay((unsigned long)((200)*(32000000/4000.0)));
  5447  0012D4  0E09               	movlw	9
  5448  0012D6  0100               	movlb	0	; () banked
  5449  0012D8  6F9C               	movwf	(??_ID+1)& (0+255),b
  5450  0012DA  0E1E               	movlw	30
  5451  0012DC  0100               	movlb	0	; () banked
  5452  0012DE  6F9B               	movwf	??_ID& (0+255),b
  5453  0012E0  0EE4               	movlw	228
  5454  0012E2                     u11187:
  5455  0012E2  2EE8               	decfsz	wreg,f,c
  5456  0012E4  D7FE               	bra	u11187
  5457  0012E6  2F9B               	decfsz	??_ID& (0+255),f,b
  5458  0012E8  D7FC               	bra	u11187
  5459  0012EA  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5460  0012EC  D7FA               	bra	u11187
  5461  0012EE  F000               	nop	
  5462                           
  5463                           ;sort.c: 324: LATCbits.LATC7 = 1;
  5464  0012F0  8E8B               	bsf	3979,7,c	;volatile
  5465                           
  5466                           ;sort.c: 325: for(int i = 0; i<n; i++){
  5467  0012F2  0E00               	movlw	0
  5468  0012F4  0100               	movlb	0	; () banked
  5469  0012F6  6FAC               	movwf	(ID@i_1152+1)& (0+255),b
  5470  0012F8  0E00               	movlw	0
  5471  0012FA  6FAB               	movwf	ID@i_1152& (0+255),b
  5472  0012FC                     l8403:
  5473                           
  5474                           ; BSR set to: 0
  5475  0012FC  0100               	movlb	0	; () banked
  5476  0012FE  51BE               	movf	ID@n& (0+255),w,b
  5477  001300  0100               	movlb	0	; () banked
  5478  001302  5DAB               	subwf	ID@i_1152& (0+255),w,b
  5479  001304  0100               	movlb	0	; () banked
  5480  001306  51AC               	movf	(ID@i_1152+1)& (0+255),w,b
  5481  001308  0A80               	xorlw	128
  5482  00130A  0100               	movlb	0	; () banked
  5483  00130C  6F9B               	movwf	??_ID& (0+255),b
  5484  00130E  0100               	movlb	0	; () banked
  5485  001310  51BF               	movf	(ID@n+1)& (0+255),w,b
  5486  001312  0A80               	xorlw	128
  5487  001314  0100               	movlb	0	; () banked
  5488  001316  599B               	subwfb	??_ID& (0+255),w,b
  5489  001318  B0D8               	btfsc	status,0,c
  5490  00131A  D012               	goto	l874
  5491                           
  5492                           ; BSR set to: 0
  5493                           ;sort.c: 326: delay_ms(time);
  5494                           
  5495                           ; BSR set to: 0
  5496                           
  5497                           ; BSR set to: 0
  5498  00131C  0100               	movlb	0	; () banked
  5499  00131E  51B1               	movf	ID@time& (0+255),w,b
  5500  001320  EC91  F02F         	call	_delay_ms
  5501                           
  5502                           ;sort.c: 327: readCOND();
  5503  001324  ECC4  F02C         	call	_readCOND	;wreg free
  5504                           
  5505                           ;sort.c: 328: res2 += COND_signal;
  5506  001328  0100               	movlb	0	; () banked
  5507  00132A  51DE               	movf	_COND_signal& (0+255),w,b
  5508  00132C  0100               	movlb	0	; () banked
  5509  00132E  27B4               	addwf	ID@res2& (0+255),f,b
  5510  001330  0100               	movlb	0	; () banked
  5511  001332  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5512  001334  0100               	movlb	0	; () banked
  5513  001336  23B5               	addwfc	(ID@res2+1)& (0+255),f,b
  5514                           
  5515                           ; BSR set to: 0
  5516  001338  0100               	movlb	0	; () banked
  5517  00133A  4BAB               	infsnz	ID@i_1152& (0+255),f,b
  5518  00133C  2BAC               	incf	(ID@i_1152+1)& (0+255),f,b
  5519  00133E  D7DE               	goto	l8403
  5520  001340                     l874:
  5521                           
  5522                           ; BSR set to: 0
  5523                           ;sort.c: 329: }
  5524                           ;sort.c: 330: LATCbits.LATC7 = 0;
  5525  001340  9E8B               	bcf	3979,7,c	;volatile
  5526                           
  5527                           ; BSR set to: 0
  5528                           ;sort.c: 331: res1 = ((res1 / n) > 0.3) ? 1 : 0;
  5529  001342  0E9A               	movlw	154
  5530  001344  0100               	movlb	0	; () banked
  5531  001346  6F92               	movwf	___ftge@ff1& (0+255),b
  5532  001348  0E99               	movlw	153
  5533  00134A  0100               	movlb	0	; () banked
  5534  00134C  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5535  00134E  0E3E               	movlw	62
  5536  001350  0100               	movlb	0	; () banked
  5537  001352  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5538  001354  C0BE  F088         	movff	ID@n,___awdiv@divisor
  5539  001358  C0BF  F089         	movff	ID@n+1,___awdiv@divisor+1
  5540  00135C  C0B2  F086         	movff	ID@res1,___awdiv@dividend
  5541  001360  C0B3  F087         	movff	ID@res1+1,___awdiv@dividend+1
  5542  001364  EC39  F027         	call	___awdiv	;wreg free
  5543  001368  C086  F08E         	movff	?___awdiv,___awtoft@c
  5544  00136C  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5545  001370  EC33  F02D         	call	___awtoft	;wreg free
  5546  001374  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5547  001378  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5548  00137C  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5549  001380  ECD5  F026         	call	___ftge	;wreg free
  5550  001384  0100               	movlb	0	; () banked
  5551  001386  B0D8               	btfsc	status,0,c
  5552  001388  D002               	goto	u7470
  5553  00138A  0E01               	movlw	1
  5554  00138C  D001               	goto	u7480
  5555  00138E                     u7470:
  5556  00138E  0E00               	movlw	0
  5557  001390                     u7480:
  5558  001390  0100               	movlb	0	; () banked
  5559  001392  6FB2               	movwf	ID@res1& (0+255),b
  5560  001394  6BB3               	clrf	(ID@res1+1)& (0+255),b
  5561                           
  5562                           ;sort.c: 332: res2 = ((res2 / n) > 0.3) ? 1 : 0;
  5563  001396  0E9A               	movlw	154
  5564  001398  0100               	movlb	0	; () banked
  5565  00139A  6F92               	movwf	___ftge@ff1& (0+255),b
  5566  00139C  0E99               	movlw	153
  5567  00139E  0100               	movlb	0	; () banked
  5568  0013A0  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5569  0013A2  0E3E               	movlw	62
  5570  0013A4  0100               	movlb	0	; () banked
  5571  0013A6  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5572  0013A8  C0BE  F088         	movff	ID@n,___awdiv@divisor
  5573  0013AC  C0BF  F089         	movff	ID@n+1,___awdiv@divisor+1
  5574  0013B0  C0B4  F086         	movff	ID@res2,___awdiv@dividend
  5575  0013B4  C0B5  F087         	movff	ID@res2+1,___awdiv@dividend+1
  5576  0013B8  EC39  F027         	call	___awdiv	;wreg free
  5577  0013BC  C086  F08E         	movff	?___awdiv,___awtoft@c
  5578  0013C0  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5579  0013C4  EC33  F02D         	call	___awtoft	;wreg free
  5580  0013C8  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5581  0013CC  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5582  0013D0  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5583  0013D4  ECD5  F026         	call	___ftge	;wreg free
  5584  0013D8  0100               	movlb	0	; () banked
  5585  0013DA  B0D8               	btfsc	status,0,c
  5586  0013DC  D002               	goto	u7490
  5587  0013DE  0E01               	movlw	1
  5588  0013E0  D001               	goto	u7500
  5589  0013E2                     u7490:
  5590  0013E2  0E00               	movlw	0
  5591  0013E4                     u7500:
  5592  0013E4  0100               	movlb	0	; () banked
  5593  0013E6  6FB4               	movwf	ID@res2& (0+255),b
  5594  0013E8  6BB5               	clrf	(ID@res2+1)& (0+255),b
  5595                           
  5596                           ; BSR set to: 0
  5597                           ;sort.c: 335: sensor_outputs[1] = (res1 || res2);
  5598  0013EA  0E01               	movlw	1
  5599  0013EC  0100               	movlb	0	; () banked
  5600  0013EE  6FA5               	movwf	_ID$1153& (0+255),b
  5601                           
  5602                           ; BSR set to: 0
  5603  0013F0  0100               	movlb	0	; () banked
  5604  0013F2  51B2               	movf	ID@res1& (0+255),w,b
  5605  0013F4  0100               	movlb	0	; () banked
  5606  0013F6  11B3               	iorwf	(ID@res1+1)& (0+255),w,b
  5607  0013F8  A4D8               	btfss	status,2,c
  5608  0013FA  D009               	goto	l8425
  5609                           
  5610                           ; BSR set to: 0
  5611  0013FC  0100               	movlb	0	; () banked
  5612  0013FE  51B4               	movf	ID@res2& (0+255),w,b
  5613  001400  0100               	movlb	0	; () banked
  5614  001402  11B5               	iorwf	(ID@res2+1)& (0+255),w,b
  5615  001404  A4D8               	btfss	status,2,c
  5616  001406  D003               	goto	l8425
  5617                           
  5618                           ; BSR set to: 0
  5619  001408  0E00               	movlw	0
  5620  00140A  0100               	movlb	0	; () banked
  5621  00140C  6FA5               	movwf	_ID$1153& (0+255),b
  5622  00140E                     l8425:
  5623                           
  5624                           ; BSR set to: 0
  5625  00140E  C0A5  F0DC         	movff	_ID$1153,_sensor_outputs+2
  5626  001412  0100               	movlb	0	; () banked
  5627  001414  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5628                           
  5629                           ;sort.c: 336: }
  5630  001416  D0E3               	goto	l877
  5631  001418                     l8427:
  5632                           
  5633                           ; BSR set to: 0
  5634                           ;sort.c: 337: else{
  5635                           ;sort.c: 338: const unsigned char time = (400 / n);
  5636  001418  0E01               	movlw	1
  5637  00141A  0100               	movlb	0	; () banked
  5638  00141C  6F87               	movwf	(___awdiv@dividend+1)& (0+255),b
  5639  00141E  0E90               	movlw	144
  5640  001420  6F86               	movwf	___awdiv@dividend& (0+255),b
  5641  001422  C0BE  F088         	movff	ID@n,___awdiv@divisor
  5642  001426  C0BF  F089         	movff	ID@n+1,___awdiv@divisor+1
  5643  00142A  EC39  F027         	call	___awdiv	;wreg free
  5644  00142E  0100               	movlb	0	; () banked
  5645  001430  5186               	movf	?___awdiv& (0+255),w,b
  5646  001432  0100               	movlb	0	; () banked
  5647  001434  6FA3               	movwf	ID@time_1154& (0+255),b
  5648                           
  5649                           ; BSR set to: 0
  5650                           ;sort.c: 339: int res[2];
  5651                           ;sort.c: 341: for(int j = 0; j < 2; j++){
  5652  001436  0E00               	movlw	0
  5653  001438  0100               	movlb	0	; () banked
  5654  00143A  6FBD               	movwf	(ID@j+1)& (0+255),b
  5655  00143C  0E00               	movlw	0
  5656  00143E  6FBC               	movwf	ID@j& (0+255),b
  5657                           
  5658                           ; BSR set to: 0
  5659  001440  0100               	movlb	0	; () banked
  5660  001442  BFBD               	btfsc	(ID@j+1)& (0+255),7,b
  5661  001444  D00A               	goto	l878
  5662  001446  0100               	movlb	0	; () banked
  5663  001448  51BD               	movf	(ID@j+1)& (0+255),w,b
  5664  00144A  E106               	bnz	u7530
  5665  00144C  0E02               	movlw	2
  5666  00144E  0100               	movlb	0	; () banked
  5667  001450  5DBC               	subwf	ID@j& (0+255),w,b
  5668  001452  B0D8               	btfsc	status,0,c
  5669  001454  D0C4               	goto	l877
  5670  001456  D001               	goto	l878
  5671  001458                     u7530:
  5672                           
  5673                           ; BSR set to: 0
  5674  001458  D0C2               	goto	l877
  5675  00145A                     l878:
  5676                           
  5677                           ; BSR set to: 0
  5678                           ;sort.c: 342: LATCbits.LATC7 = 1;
  5679  00145A  8E8B               	bsf	3979,7,c	;volatile
  5680                           
  5681                           ; BSR set to: 0
  5682                           ;sort.c: 343: for(int i = 0; i < n; i++){
  5683  00145C  0E00               	movlw	0
  5684  00145E  0100               	movlb	0	; () banked
  5685  001460  6FAE               	movwf	(ID@i_1157+1)& (0+255),b
  5686  001462  0E00               	movlw	0
  5687  001464  6FAD               	movwf	ID@i_1157& (0+255),b
  5688  001466                     l8437:
  5689                           
  5690                           ; BSR set to: 0
  5691  001466  0100               	movlb	0	; () banked
  5692  001468  51BE               	movf	ID@n& (0+255),w,b
  5693  00146A  0100               	movlb	0	; () banked
  5694  00146C  5DAD               	subwf	ID@i_1157& (0+255),w,b
  5695  00146E  0100               	movlb	0	; () banked
  5696  001470  51AE               	movf	(ID@i_1157+1)& (0+255),w,b
  5697  001472  0A80               	xorlw	128
  5698  001474  0100               	movlb	0	; () banked
  5699  001476  6F9B               	movwf	??_ID& (0+255),b
  5700  001478  0100               	movlb	0	; () banked
  5701  00147A  51BF               	movf	(ID@n+1)& (0+255),w,b
  5702  00147C  0A80               	xorlw	128
  5703  00147E  0100               	movlb	0	; () banked
  5704  001480  599B               	subwfb	??_ID& (0+255),w,b
  5705  001482  B0D8               	btfsc	status,0,c
  5706  001484  D01A               	goto	l881
  5707                           
  5708                           ; BSR set to: 0
  5709                           ;sort.c: 344: delay_ms(time);
  5710                           
  5711                           ; BSR set to: 0
  5712                           
  5713                           ; BSR set to: 0
  5714  001486  0100               	movlb	0	; () banked
  5715  001488  51A3               	movf	ID@time_1154& (0+255),w,b
  5716  00148A  EC91  F02F         	call	_delay_ms
  5717                           
  5718                           ;sort.c: 345: readCOND();
  5719  00148E  ECC4  F02C         	call	_readCOND	;wreg free
  5720                           
  5721                           ;sort.c: 346: res[j] += COND_signal;
  5722  001492  90D8               	bcf	status,0,c
  5723  001494  0100               	movlb	0	; () banked
  5724  001496  35BC               	rlcf	ID@j& (0+255),w,b
  5725  001498  6ED9               	movwf	fsr2l,c
  5726  00149A  0100               	movlb	0	; () banked
  5727  00149C  35BD               	rlcf	(ID@j+1)& (0+255),w,b
  5728  00149E  6EDA               	movwf	fsr2h,c
  5729  0014A0  0EB6               	movlw	low ID@res
  5730  0014A2  26D9               	addwf	fsr2l,f,c
  5731  0014A4  0E00               	movlw	high ID@res
  5732  0014A6  22DA               	addwfc	fsr2h,f,c
  5733  0014A8  0100               	movlb	0	; () banked
  5734  0014AA  51DE               	movf	_COND_signal& (0+255),w,b
  5735  0014AC  26DE               	addwf	postinc2,f,c
  5736  0014AE  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5737  0014B0  22DD               	addwfc	postdec2,f,c
  5738                           
  5739                           ; BSR set to: 0
  5740  0014B2  0100               	movlb	0	; () banked
  5741  0014B4  4BAD               	infsnz	ID@i_1157& (0+255),f,b
  5742  0014B6  2BAE               	incf	(ID@i_1157+1)& (0+255),f,b
  5743  0014B8  D7D6               	goto	l8437
  5744  0014BA                     l881:
  5745                           
  5746                           ; BSR set to: 0
  5747                           ;sort.c: 347: }
  5748                           ;sort.c: 348: LATCbits.LATC7 = 0;
  5749  0014BA  9E8B               	bcf	3979,7,c	;volatile
  5750                           
  5751                           ; BSR set to: 0
  5752                           ;sort.c: 350: _delay((unsigned long)((200)*(32000000/4000.0)));
  5753  0014BC  0E09               	movlw	9
  5754  0014BE  0100               	movlb	0	; () banked
  5755  0014C0  6F9C               	movwf	(??_ID+1)& (0+255),b
  5756  0014C2  0E1E               	movlw	30
  5757  0014C4  0100               	movlb	0	; () banked
  5758  0014C6  6F9B               	movwf	??_ID& (0+255),b
  5759  0014C8  0EE4               	movlw	228
  5760  0014CA                     u11197:
  5761  0014CA  2EE8               	decfsz	wreg,f,c
  5762  0014CC  D7FE               	bra	u11197
  5763  0014CE  2F9B               	decfsz	??_ID& (0+255),f,b
  5764  0014D0  D7FC               	bra	u11197
  5765  0014D2  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  5766  0014D4  D7FA               	bra	u11197
  5767  0014D6  F000               	nop	
  5768                           
  5769                           ;sort.c: 353: res[j] = ((res[j] / n) > 0.3) ? 1 : 0;
  5770  0014D8  0E9A               	movlw	154
  5771  0014DA  0100               	movlb	0	; () banked
  5772  0014DC  6F92               	movwf	___ftge@ff1& (0+255),b
  5773  0014DE  0E99               	movlw	153
  5774  0014E0  0100               	movlb	0	; () banked
  5775  0014E2  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5776  0014E4  0E3E               	movlw	62
  5777  0014E6  0100               	movlb	0	; () banked
  5778  0014E8  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5779  0014EA  C0BE  F088         	movff	ID@n,___awdiv@divisor
  5780  0014EE  C0BF  F089         	movff	ID@n+1,___awdiv@divisor+1
  5781  0014F2  90D8               	bcf	status,0,c
  5782  0014F4  0100               	movlb	0	; () banked
  5783  0014F6  35BC               	rlcf	ID@j& (0+255),w,b
  5784  0014F8  6ED9               	movwf	fsr2l,c
  5785  0014FA  0100               	movlb	0	; () banked
  5786  0014FC  35BD               	rlcf	(ID@j+1)& (0+255),w,b
  5787  0014FE  6EDA               	movwf	fsr2h,c
  5788  001500  0EB6               	movlw	low ID@res
  5789  001502  26D9               	addwf	fsr2l,f,c
  5790  001504  0E00               	movlw	high ID@res
  5791  001506  22DA               	addwfc	fsr2h,f,c
  5792  001508  CFDE F086          	movff	postinc2,___awdiv@dividend
  5793  00150C  CFDD F087          	movff	postdec2,___awdiv@dividend+1
  5794  001510  EC39  F027         	call	___awdiv	;wreg free
  5795  001514  C086  F08E         	movff	?___awdiv,___awtoft@c
  5796  001518  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5797  00151C  EC33  F02D         	call	___awtoft	;wreg free
  5798  001520  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5799  001524  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5800  001528  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5801  00152C  ECD5  F026         	call	___ftge	;wreg free
  5802  001530  0100               	movlb	0	; () banked
  5803  001532  B0D8               	btfsc	status,0,c
  5804  001534  D002               	goto	u7560
  5805  001536  0E01               	movlw	1
  5806  001538  D001               	goto	u7570
  5807  00153A                     u7560:
  5808  00153A  0E00               	movlw	0
  5809  00153C                     u7570:
  5810  00153C  0100               	movlb	0	; () banked
  5811  00153E  6F9B               	movwf	??_ID& (0+255),b
  5812  001540  6B9C               	clrf	(??_ID+1)& (0+255),b
  5813  001542  90D8               	bcf	status,0,c
  5814  001544  0100               	movlb	0	; () banked
  5815  001546  35BC               	rlcf	ID@j& (0+255),w,b
  5816  001548  6ED9               	movwf	fsr2l,c
  5817  00154A  0100               	movlb	0	; () banked
  5818  00154C  35BD               	rlcf	(ID@j+1)& (0+255),w,b
  5819  00154E  6EDA               	movwf	fsr2h,c
  5820  001550  0EB6               	movlw	low ID@res
  5821  001552  26D9               	addwf	fsr2l,f,c
  5822  001554  0E00               	movlw	high ID@res
  5823  001556  22DA               	addwfc	fsr2h,f,c
  5824  001558  C09B  FFDE         	movff	??_ID,postinc2
  5825  00155C  C09C  FFDD         	movff	??_ID+1,postdec2
  5826                           
  5827                           ; BSR set to: 0
  5828                           ;sort.c: 354: if(j==0){
  5829  001560  0100               	movlb	0	; () banked
  5830  001562  51BC               	movf	ID@j& (0+255),w,b
  5831  001564  0100               	movlb	0	; () banked
  5832  001566  11BD               	iorwf	(ID@j+1)& (0+255),w,b
  5833  001568  A4D8               	btfss	status,2,c
  5834  00156A  D010               	goto	l8457
  5835                           
  5836                           ; BSR set to: 0
  5837                           ;sort.c: 355: sensor_outputs[1] = res[j];
  5838  00156C  90D8               	bcf	status,0,c
  5839  00156E  0100               	movlb	0	; () banked
  5840  001570  35BC               	rlcf	ID@j& (0+255),w,b
  5841  001572  6ED9               	movwf	fsr2l,c
  5842  001574  0100               	movlb	0	; () banked
  5843  001576  35BD               	rlcf	(ID@j+1)& (0+255),w,b
  5844  001578  6EDA               	movwf	fsr2h,c
  5845  00157A  0EB6               	movlw	low ID@res
  5846  00157C  26D9               	addwf	fsr2l,f,c
  5847  00157E  0E00               	movlw	high ID@res
  5848  001580  22DA               	addwfc	fsr2h,f,c
  5849  001582  CFDE F0DC          	movff	postinc2,_sensor_outputs+2
  5850  001586  CFDD F0DD          	movff	postdec2,_sensor_outputs+3
  5851                           
  5852                           ;sort.c: 356: }
  5853  00158A  D01F               	goto	l8467
  5854  00158C                     l8457:
  5855                           
  5856                           ; BSR set to: 0
  5857                           ;sort.c: 357: else{
  5858                           ;sort.c: 358: sensor_outputs[1] = sensor_outputs[1] || res[j];
  5859  00158C  0E01               	movlw	1
  5860  00158E  0100               	movlb	0	; () banked
  5861  001590  6FA6               	movwf	_ID$1158& (0+255),b
  5862                           
  5863                           ; BSR set to: 0
  5864  001592  0100               	movlb	0	; () banked
  5865  001594  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5866  001596  0100               	movlb	0	; () banked
  5867  001598  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5868  00159A  A4D8               	btfss	status,2,c
  5869  00159C  D012               	goto	l8465
  5870                           
  5871                           ; BSR set to: 0
  5872  00159E  90D8               	bcf	status,0,c
  5873  0015A0  0100               	movlb	0	; () banked
  5874  0015A2  35BC               	rlcf	ID@j& (0+255),w,b
  5875  0015A4  6ED9               	movwf	fsr2l,c
  5876  0015A6  0100               	movlb	0	; () banked
  5877  0015A8  35BD               	rlcf	(ID@j+1)& (0+255),w,b
  5878  0015AA  6EDA               	movwf	fsr2h,c
  5879  0015AC  0EB6               	movlw	low ID@res
  5880  0015AE  26D9               	addwf	fsr2l,f,c
  5881  0015B0  0E00               	movlw	high ID@res
  5882  0015B2  22DA               	addwfc	fsr2h,f,c
  5883  0015B4  50DE               	movf	postinc2,w,c
  5884  0015B6  10DE               	iorwf	postinc2,w,c
  5885  0015B8  A4D8               	btfss	status,2,c
  5886  0015BA  D003               	goto	l8465
  5887                           
  5888                           ; BSR set to: 0
  5889  0015BC  0E00               	movlw	0
  5890  0015BE  0100               	movlb	0	; () banked
  5891  0015C0  6FA6               	movwf	_ID$1158& (0+255),b
  5892  0015C2                     l8465:
  5893                           
  5894                           ; BSR set to: 0
  5895  0015C2  C0A6  F0DC         	movff	_ID$1158,_sensor_outputs+2
  5896  0015C6  0100               	movlb	0	; () banked
  5897  0015C8  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5898  0015CA                     l8467:
  5899                           
  5900                           ; BSR set to: 0
  5901  0015CA  0100               	movlb	0	; () banked
  5902  0015CC  4BBC               	infsnz	ID@j& (0+255),f,b
  5903  0015CE  2BBD               	incf	(ID@j+1)& (0+255),f,b
  5904                           
  5905                           ; BSR set to: 0
  5906  0015D0  0100               	movlb	0	; () banked
  5907  0015D2  BFBD               	btfsc	(ID@j+1)& (0+255),7,b
  5908  0015D4  D742               	goto	l878
  5909  0015D6  0100               	movlb	0	; () banked
  5910  0015D8  51BD               	movf	(ID@j+1)& (0+255),w,b
  5911  0015DA  E101               	bnz	l877
  5912  0015DC  D737               	goto	L5
  5913  0015DE                     l877:
  5914                           
  5915                           ; BSR set to: 0
  5916                           ;sort.c: 359: }
  5917                           ;sort.c: 360: }
  5918                           ;sort.c: 361: }
  5919                           ;sort.c: 362: int cond1 = sensor_outputs[1];
  5920  0015DE  C0DC  F09F         	movff	_sensor_outputs+2,ID@cond1
  5921  0015E2  C0DD  F0A0         	movff	_sensor_outputs+3,ID@cond1+1
  5922                           
  5923                           ; BSR set to: 0
  5924                           ;sort.c: 365: if(sensor_outputs[0]){
  5925  0015E6  0100               	movlb	0	; () banked
  5926  0015E8  51DA               	movf	_sensor_outputs& (0+255),w,b
  5927  0015EA  0100               	movlb	0	; () banked
  5928  0015EC  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5929  0015EE  B4D8               	btfsc	status,2,c
  5930  0015F0  D043               	goto	l8499
  5931                           
  5932                           ; BSR set to: 0
  5933                           ;sort.c: 367: readIR(3);
  5934  0015F2  0E00               	movlw	0
  5935  0015F4  0100               	movlb	0	; () banked
  5936  0015F6  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  5937  0015F8  0E03               	movlw	3
  5938  0015FA  6F82               	movwf	readIR@ana_port& (0+255),b
  5939  0015FC  EC9C  F028         	call	_readIR	;wreg free
  5940                           
  5941                           ;sort.c: 368: sensor_outputs[1] = sensor_outputs[1] || IR_signal;
  5942  001600  0E01               	movlw	1
  5943  001602  0100               	movlb	0	; () banked
  5944  001604  6FA7               	movwf	_ID$1160& (0+255),b
  5945                           
  5946                           ; BSR set to: 0
  5947  001606  0100               	movlb	0	; () banked
  5948  001608  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5949  00160A  0100               	movlb	0	; () banked
  5950  00160C  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5951  00160E  A4D8               	btfss	status,2,c
  5952  001610  D009               	goto	l8483
  5953                           
  5954                           ; BSR set to: 0
  5955  001612  0100               	movlb	0	; () banked
  5956  001614  51E2               	movf	_IR_signal& (0+255),w,b
  5957  001616  0100               	movlb	0	; () banked
  5958  001618  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  5959  00161A  A4D8               	btfss	status,2,c
  5960  00161C  D003               	goto	l8483
  5961                           
  5962                           ; BSR set to: 0
  5963  00161E  0E00               	movlw	0
  5964  001620  0100               	movlb	0	; () banked
  5965  001622  6FA7               	movwf	_ID$1160& (0+255),b
  5966  001624                     l8483:
  5967                           
  5968                           ; BSR set to: 0
  5969  001624  C0A7  F0DC         	movff	_ID$1160,_sensor_outputs+2
  5970  001628  0100               	movlb	0	; () banked
  5971  00162A  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5972                           
  5973                           ; BSR set to: 0
  5974                           ;sort.c: 369: _delay((unsigned long)((10)*(32000000/4000.0)));
  5975  00162C  0E68               	movlw	104
  5976  00162E  0100               	movlb	0	; () banked
  5977  001630  6F9B               	movwf	??_ID& (0+255),b
  5978  001632  0EE4               	movlw	228
  5979  001634                     u11207:
  5980  001634  2EE8               	decfsz	wreg,f,c
  5981  001636  D7FE               	bra	u11207
  5982  001638  2F9B               	decfsz	??_ID& (0+255),f,b
  5983  00163A  D7FC               	bra	u11207
  5984  00163C  F000               	nop	
  5985                           
  5986                           ;sort.c: 370: readIR(3);
  5987  00163E  0E00               	movlw	0
  5988  001640  0100               	movlb	0	; () banked
  5989  001642  6F83               	movwf	(readIR@ana_port+1)& (0+255),b
  5990  001644  0E03               	movlw	3
  5991  001646  6F82               	movwf	readIR@ana_port& (0+255),b
  5992  001648  EC9C  F028         	call	_readIR	;wreg free
  5993                           
  5994                           ;sort.c: 371: sensor_outputs[1] = sensor_outputs[1] || IR_signal;
  5995  00164C  0E01               	movlw	1
  5996  00164E  0100               	movlb	0	; () banked
  5997  001650  6FA8               	movwf	_ID$1161& (0+255),b
  5998                           
  5999                           ; BSR set to: 0
  6000  001652  0100               	movlb	0	; () banked
  6001  001654  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  6002  001656  0100               	movlb	0	; () banked
  6003  001658  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  6004  00165A  A4D8               	btfss	status,2,c
  6005  00165C  D009               	goto	l8497
  6006                           
  6007                           ; BSR set to: 0
  6008  00165E  0100               	movlb	0	; () banked
  6009  001660  51E2               	movf	_IR_signal& (0+255),w,b
  6010  001662  0100               	movlb	0	; () banked
  6011  001664  11E3               	iorwf	(_IR_signal+1)& (0+255),w,b
  6012  001666  A4D8               	btfss	status,2,c
  6013  001668  D003               	goto	l8497
  6014                           
  6015                           ; BSR set to: 0
  6016  00166A  0E00               	movlw	0
  6017  00166C  0100               	movlb	0	; () banked
  6018  00166E  6FA8               	movwf	_ID$1161& (0+255),b
  6019  001670                     l8497:
  6020                           
  6021                           ; BSR set to: 0
  6022  001670  C0A8  F0DC         	movff	_ID$1161,_sensor_outputs+2
  6023  001674  0100               	movlb	0	; () banked
  6024  001676  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  6025  001678                     l8499:
  6026                           
  6027                           ; BSR set to: 0
  6028                           ;sort.c: 372: }
  6029                           ;sort.c: 373: int reflectivity2 = IR_res;
  6030  001678  C0E0  F0A1         	movff	_IR_res,ID@reflectivity2
  6031  00167C  C0E1  F0A2         	movff	_IR_res+1,ID@reflectivity2+1
  6032                           
  6033                           ; BSR set to: 0
  6034                           ;sort.c: 386: if(!sensor_outputs[0]){
  6035  001680  0100               	movlb	0	; () banked
  6036  001682  51DA               	movf	_sensor_outputs& (0+255),w,b
  6037  001684  0100               	movlb	0	; () banked
  6038  001686  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  6039  001688  A4D8               	btfss	status,2,c
  6040  00168A  D016               	goto	l8513
  6041                           
  6042                           ; BSR set to: 0
  6043                           ;sort.c: 387: if(!sensor_outputs[1]){
  6044  00168C  0100               	movlb	0	; () banked
  6045  00168E  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  6046  001690  0100               	movlb	0	; () banked
  6047  001692  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  6048  001694  A4D8               	btfss	status,2,c
  6049  001696  D008               	goto	l8509
  6050                           
  6051                           ; BSR set to: 0
  6052                           ;sort.c: 388: count_pop_no_tab++;
  6053  001698  0101               	movlb	1	; () banked
  6054  00169A  4B27               	infsnz	_count_pop_no_tab& (0+255),f,b
  6055  00169C  2B28               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  6056                           
  6057                           ; BSR set to: 1
  6058                           ;sort.c: 389: cur_can = 0;
  6059  00169E  0E00               	movlw	0
  6060  0016A0  0101               	movlb	1	; () banked
  6061  0016A2  6F2C               	movwf	(_cur_can+1)& (0+255),b
  6062  0016A4  0E00               	movlw	0
  6063  0016A6  D007               	goto	L6
  6064  0016A8                     l8509:
  6065                           
  6066                           ;sort.c: 391: else{
  6067                           ;sort.c: 392: count_pop_w_tab++;
  6068  0016A8  0101               	movlb	1	; () banked
  6069  0016AA  4B29               	infsnz	_count_pop_w_tab& (0+255),f,b
  6070  0016AC  2B2A               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  6071                           
  6072                           ; BSR set to: 1
  6073                           ;sort.c: 393: cur_can = 1;
  6074  0016AE  0E00               	movlw	0
  6075  0016B0  0101               	movlb	1	; () banked
  6076  0016B2  6F2C               	movwf	(_cur_can+1)& (0+255),b
  6077  0016B4  0E01               	movlw	1
  6078  0016B6                     L6:
  6079  0016B6  6F2B               	movwf	_cur_can& (0+255),b
  6080  0016B8                     l8513:
  6081                           
  6082                           ;sort.c: 394: }
  6083                           ;sort.c: 395: }
  6084                           ;sort.c: 396: if(sensor_outputs[0]){
  6085  0016B8  0100               	movlb	0	; () banked
  6086  0016BA  51DA               	movf	_sensor_outputs& (0+255),w,b
  6087  0016BC  0100               	movlb	0	; () banked
  6088  0016BE  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  6089  0016C0  B4D8               	btfsc	status,2,c
  6090  0016C2  D016               	goto	l8525
  6091                           
  6092                           ; BSR set to: 0
  6093                           ;sort.c: 397: if(!sensor_outputs[1]){
  6094  0016C4  0100               	movlb	0	; () banked
  6095  0016C6  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  6096  0016C8  0100               	movlb	0	; () banked
  6097  0016CA  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  6098  0016CC  A4D8               	btfss	status,2,c
  6099  0016CE  D008               	goto	l8521
  6100                           
  6101                           ; BSR set to: 0
  6102                           ;sort.c: 398: count_can_w_lab++;
  6103  0016D0  0101               	movlb	1	; () banked
  6104  0016D2  4B25               	infsnz	_count_can_w_lab& (0+255),f,b
  6105  0016D4  2B26               	incf	(_count_can_w_lab+1)& (0+255),f,b
  6106                           
  6107                           ; BSR set to: 1
  6108                           ;sort.c: 399: cur_can = 2;
  6109  0016D6  0E00               	movlw	0
  6110  0016D8  0101               	movlb	1	; () banked
  6111  0016DA  6F2C               	movwf	(_cur_can+1)& (0+255),b
  6112  0016DC  0E02               	movlw	2
  6113  0016DE  D007               	goto	L7
  6114  0016E0                     l8521:
  6115                           
  6116                           ;sort.c: 401: else{
  6117                           ;sort.c: 402: count_can_no_lab++;
  6118  0016E0  0101               	movlb	1	; () banked
  6119  0016E2  4B23               	infsnz	_count_can_no_lab& (0+255),f,b
  6120  0016E4  2B24               	incf	(_count_can_no_lab+1)& (0+255),f,b
  6121                           
  6122                           ; BSR set to: 1
  6123                           ;sort.c: 403: cur_can = 3;
  6124  0016E6  0E00               	movlw	0
  6125  0016E8  0101               	movlb	1	; () banked
  6126  0016EA  6F2C               	movwf	(_cur_can+1)& (0+255),b
  6127  0016EC  0E03               	movlw	3
  6128  0016EE                     L7:
  6129  0016EE  6F2B               	movwf	_cur_can& (0+255),b
  6130  0016F0                     l8525:
  6131  0016F0  0101               	movlb	1	; () banked
  6132  0016F2  5135               	movf	_f_can_distributed& (0+255),w,b
  6133  0016F4  0101               	movlb	1	; () banked
  6134  0016F6  1136               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  6135  0016F8  B4D8               	btfsc	status,2,c
  6136  0016FA  D7FA               	goto	l8525
  6137                           
  6138                           ; BSR set to: 1
  6139                           ;sort.c: 409: for(int i=0;i<10000;i++)
  6140                           
  6141                           ; BSR set to: 1
  6142  0016FC  0E00               	movlw	0
  6143  0016FE  0100               	movlb	0	; () banked
  6144  001700  6FB0               	movwf	(ID@i_1163+1)& (0+255),b
  6145  001702  0E00               	movlw	0
  6146  001704  6FAF               	movwf	ID@i_1163& (0+255),b
  6147  001706                     l8529:
  6148                           
  6149                           ; BSR set to: 0
  6150  001706  0100               	movlb	0	; () banked
  6151  001708  BFB0               	btfsc	(ID@i_1163+1)& (0+255),7,b
  6152  00170A  D008               	goto	l900
  6153  00170C  0E10               	movlw	16
  6154  00170E  0100               	movlb	0	; () banked
  6155  001710  5DAF               	subwf	ID@i_1163& (0+255),w,b
  6156  001712  0E27               	movlw	39
  6157  001714  0100               	movlb	0	; () banked
  6158  001716  59B0               	subwfb	(ID@i_1163+1)& (0+255),w,b
  6159  001718  B0D8               	btfsc	status,0,c
  6160  00171A  D00D               	goto	l901
  6161  00171C                     l900:
  6162                           
  6163                           ; BSR set to: 0
  6164                           ;sort.c: 410: {
  6165                           ;sort.c: 411: LATCbits.LATC0 = 1;
  6166  00171C  808B               	bsf	3979,0,c	;volatile
  6167                           
  6168                           ; BSR set to: 0
  6169                           ;sort.c: 412: _delay((unsigned long)((10)*(32000000/4000000.0)));
  6170  00171E  0E1A               	movlw	26
  6171  001720                     u11217:
  6172  001720  2EE8               	decfsz	wreg,f,c
  6173  001722  D7FE               	bra	u11217
  6174  001724  D000               	nop2	
  6175                           
  6176                           ;sort.c: 413: LATCbits.LATC0 = 0;
  6177  001726  908B               	bcf	3979,0,c	;volatile
  6178                           
  6179                           ;sort.c: 414: _delay((unsigned long)((90)*(32000000/4000000.0)));
  6180  001728  0EF0               	movlw	240
  6181  00172A                     u11227:
  6182  00172A  2EE8               	decfsz	wreg,f,c
  6183  00172C  D7FE               	bra	u11227
  6184  00172E  0100               	movlb	0	; () banked
  6185  001730  4BAF               	infsnz	ID@i_1163& (0+255),f,b
  6186  001732  2BB0               	incf	(ID@i_1163+1)& (0+255),f,b
  6187  001734  D7E8               	goto	l8529
  6188  001736                     l901:
  6189                           
  6190                           ; BSR set to: 0
  6191                           ;sort.c: 415: }
  6192                           ;sort.c: 417: LATCbits.LATC0 = 0;
  6193  001736  908B               	bcf	3979,0,c	;volatile
  6194                           
  6195                           ; BSR set to: 0
  6196                           ;sort.c: 419: f_can_coming_to_distribution = 1;
  6197  001738  0E00               	movlw	0
  6198  00173A  0101               	movlb	1	; () banked
  6199  00173C  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  6200  00173E  0E01               	movlw	1
  6201  001740  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  6202                           
  6203                           ; BSR set to: 1
  6204                           ;sort.c: 420: _delay((unsigned long)((500)*(32000000/4000.0)));
  6205  001742  0E15               	movlw	21
  6206  001744  0100               	movlb	0	; () banked
  6207  001746  6F9C               	movwf	(??_ID+1)& (0+255),b
  6208  001748  0E4B               	movlw	75
  6209  00174A  0100               	movlb	0	; () banked
  6210  00174C  6F9B               	movwf	??_ID& (0+255),b
  6211  00174E  0EBE               	movlw	190
  6212  001750                     u11237:
  6213  001750  2EE8               	decfsz	wreg,f,c
  6214  001752  D7FE               	bra	u11237
  6215  001754  2F9B               	decfsz	??_ID& (0+255),f,b
  6216  001756  D7FC               	bra	u11237
  6217  001758  2F9C               	decfsz	(??_ID+1)& (0+255),f,b
  6218  00175A  D7FA               	bra	u11237
  6219  00175C  F000               	nop	
  6220                           
  6221                           ;sort.c: 421: LATCbits.LATC0 = 1;
  6222  00175E  808B               	bsf	3979,0,c	;volatile
  6223                           
  6224                           ;sort.c: 424: if(!f_lastCan){
  6225  001760  0100               	movlb	0	; () banked
  6226  001762  51EC               	movf	_f_lastCan& (0+255),w,b
  6227  001764  0100               	movlb	0	; () banked
  6228  001766  11ED               	iorwf	(_f_lastCan+1)& (0+255),w,b
  6229  001768  A4D8               	btfss	status,2,c
  6230  00176A  D032               	goto	l8561
  6231                           
  6232                           ; BSR set to: 0
  6233                           ;sort.c: 425: for(int i=0; i<46; i++){
  6234  00176C  0E00               	movlw	0
  6235  00176E  0100               	movlb	0	; () banked
  6236  001770  6FBB               	movwf	(ID@i_1164+1)& (0+255),b
  6237  001772  0E00               	movlw	0
  6238  001774  6FBA               	movwf	ID@i_1164& (0+255),b
  6239                           
  6240                           ; BSR set to: 0
  6241  001776  0100               	movlb	0	; () banked
  6242  001778  BFBB               	btfsc	(ID@i_1164+1)& (0+255),7,b
  6243  00177A  D008               	goto	l8553
  6244  00177C  0100               	movlb	0	; () banked
  6245  00177E  51BB               	movf	(ID@i_1164+1)& (0+255),w,b
  6246  001780  E126               	bnz	l904
  6247  001782  0E2E               	movlw	46
  6248  001784  0100               	movlb	0	; () banked
  6249  001786  5DBA               	subwf	ID@i_1164& (0+255),w,b
  6250  001788  B0D8               	btfsc	status,0,c
  6251  00178A  D021               	goto	l904
  6252  00178C                     l8553:
  6253                           
  6254                           ; BSR set to: 0
  6255                           ;sort.c: 426: LATBbits.LATB2 = !LATBbits.LATB2;
  6256  00178C  B48A               	btfsc	3978,2,c	;volatile
  6257  00178E  D004               	goto	u7760
  6258  001790  0100               	movlb	0	; () banked
  6259  001792  6B9B               	clrf	??_ID& (0+255),b
  6260  001794  2B9B               	incf	??_ID& (0+255),f,b
  6261  001796  D002               	goto	u7778
  6262  001798                     u7760:
  6263  001798  0100               	movlb	0	; () banked
  6264  00179A  6B9B               	clrf	??_ID& (0+255),b
  6265  00179C                     u7778:
  6266  00179C  0100               	movlb	0	; () banked
  6267  00179E  479B               	rlncf	??_ID& (0+255),f,b
  6268  0017A0  479B               	rlncf	??_ID& (0+255),f,b
  6269  0017A2  508A               	movf	3978,w,c	;volatile
  6270  0017A4  0100               	movlb	0	; () banked
  6271  0017A6  199B               	xorwf	??_ID& (0+255),w,b
  6272  0017A8  0BFB               	andlw	-5
  6273  0017AA  199B               	xorwf	??_ID& (0+255),w,b
  6274  0017AC  6E8A               	movwf	3978,c	;volatile
  6275                           
  6276                           ; BSR set to: 0
  6277                           ;sort.c: 427: delay_ms(45-i);
  6278  0017AE  0100               	movlb	0	; () banked
  6279  0017B0  51BA               	movf	ID@i_1164& (0+255),w,b
  6280  0017B2  0800               	sublw	0
  6281  0017B4  0F2D               	addlw	45
  6282  0017B6  EC91  F02F         	call	_delay_ms
  6283  0017BA  0100               	movlb	0	; () banked
  6284  0017BC  4BBA               	infsnz	ID@i_1164& (0+255),f,b
  6285  0017BE  2BBB               	incf	(ID@i_1164+1)& (0+255),f,b
  6286                           
  6287                           ; BSR set to: 0
  6288  0017C0  0100               	movlb	0	; () banked
  6289  0017C2  BFBB               	btfsc	(ID@i_1164+1)& (0+255),7,b
  6290  0017C4  D7E3               	goto	l8553
  6291  0017C6  0100               	movlb	0	; () banked
  6292  0017C8  51BB               	movf	(ID@i_1164+1)& (0+255),w,b
  6293  0017CA  E101               	bnz	u7780
  6294  0017CC  D7DA               	goto	L8
  6295  0017CE                     u7780:
  6296  0017CE                     l904:
  6297                           
  6298                           ; BSR set to: 0
  6299                           ;sort.c: 428: }
  6300                           ;sort.c: 429: LATBbits.LATB2 = 1;
  6301  0017CE  848A               	bsf	3978,2,c	;volatile
  6302  0017D0                     l8561:
  6303                           
  6304                           ; BSR set to: 0
  6305                           ;sort.c: 430: }
  6306                           ;sort.c: 432: f_can_coming_to_ID = 0;
  6307  0017D0  0E00               	movlw	0
  6308  0017D2  0101               	movlb	1	; () banked
  6309  0017D4  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  6310  0017D6  0E00               	movlw	0
  6311  0017D8  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  6312  0017DA  0012               	return	
  6313  0017DC                     __end_of_ID:
  6314                           	opt stack 0
  6315                           tblptru	equ	0xFF8
  6316                           tblptrh	equ	0xFF7
  6317                           tblptrl	equ	0xFF6
  6318                           tablat	equ	0xFF5
  6319                           prodh	equ	0xFF4
  6320                           prodl	equ	0xFF3
  6321                           postinc0	equ	0xFEE
  6322                           wreg	equ	0xFE8
  6323                           postdec1	equ	0xFE5
  6324                           fsr1l	equ	0xFE1
  6325                           indf2	equ	0xFDF
  6326                           postinc2	equ	0xFDE
  6327                           postdec2	equ	0xFDD
  6328                           fsr2h	equ	0xFDA
  6329                           fsr2l	equ	0xFD9
  6330                           status	equ	0xFD8
  6331                           
  6332 ;; *************** function _readIR *****************
  6333 ;; Defined at:
  6334 ;;		line 23 in file "ADCFunctionality.c"
  6335 ;; Parameters:    Size  Location     Type
  6336 ;;  ana_port        2    2[BANK0 ] int 
  6337 ;; Auto vars:     Size  Location     Type
  6338 ;;		None
  6339 ;; Return value:  Size  Location     Type
  6340 ;;                  1    wreg      void 
  6341 ;; Registers used:
  6342 ;;		wreg, status,2, status,0, cstack
  6343 ;; Tracked objects:
  6344 ;;		On entry : 0/0
  6345 ;;		On exit  : 0/0
  6346 ;;		Unchanged: 0/0
  6347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6348 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6350 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6351 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6352 ;;Total ram usage:        4 bytes
  6353 ;; Hardware stack levels used:    1
  6354 ;; Hardware stack levels required when called:    8
  6355 ;; This function calls:
  6356 ;;		_readADC
  6357 ;; This function is called by:
  6358 ;;		_Loading
  6359 ;;		_ID
  6360 ;;		_getIR
  6361 ;; This function uses a non-reentrant model
  6362 ;;
  6363                           
  6364                           	psect	text8
  6365  005138                     __ptext8:
  6366                           	opt stack 0
  6367  005138                     _readIR:
  6368                           	opt stack 20
  6369                           
  6370                           ;ADCFunctionality.c: 24: readADC(ana_port);
  6371                           
  6372                           ; BSR set to: 1
  6373                           ;incstack = 0
  6374  005138  0100               	movlb	0	; () banked
  6375  00513A  5182               	movf	readIR@ana_port& (0+255),w,b
  6376  00513C  EC66  F02F         	call	_readADC
  6377                           
  6378                           ;ADCFunctionality.c: 25: IR_res = ADRESH<<8 | ADRESL;
  6379  005140  50C3               	movf	4035,w,c	;volatile
  6380  005142  CFC4 F084          	movff	4036,??_readIR	;volatile
  6381  005146  0100               	movlb	0	; () banked
  6382  005148  6B85               	clrf	(??_readIR+1)& (0+255),b
  6383  00514A  C084  F085         	movff	??_readIR,??_readIR+1
  6384  00514E  0100               	movlb	0	; () banked
  6385  005150  6B84               	clrf	??_readIR& (0+255),b
  6386  005152  0100               	movlb	0	; () banked
  6387  005154  1184               	iorwf	??_readIR& (0+255),w,b
  6388  005156  0100               	movlb	0	; () banked
  6389  005158  6FE0               	movwf	_IR_res& (0+255),b
  6390  00515A  0100               	movlb	0	; () banked
  6391  00515C  5185               	movf	(??_readIR+1)& (0+255),w,b
  6392  00515E  0100               	movlb	0	; () banked
  6393  005160  6FE1               	movwf	(_IR_res+1)& (0+255),b
  6394                           
  6395                           ;ADCFunctionality.c: 26: switch(ana_port){
  6396  005162  D024               	goto	l6977
  6397  005164                     l6971:
  6398                           
  6399                           ; BSR set to: 0
  6400                           ;ADCFunctionality.c: 28: IR_signal = (IR_res > 800) ? 1 : 0;
  6401  005164  0100               	movlb	0	; () banked
  6402  005166  BFE1               	btfsc	(_IR_res+1)& (0+255),7,b
  6403  005168  D00A               	goto	u5680
  6404  00516A  0E21               	movlw	33
  6405  00516C  0100               	movlb	0	; () banked
  6406  00516E  5DE0               	subwf	_IR_res& (0+255),w,b
  6407  005170  0E03               	movlw	3
  6408  005172  0100               	movlb	0	; () banked
  6409  005174  59E1               	subwfb	(_IR_res+1)& (0+255),w,b
  6410  005176  A0D8               	btfss	status,0,c
  6411  005178  D002               	goto	u5680
  6412  00517A  0E01               	movlw	1
  6413  00517C  D001               	goto	u5690
  6414  00517E                     u5680:
  6415  00517E  0E00               	movlw	0
  6416  005180                     u5690:
  6417  005180  0100               	movlb	0	; () banked
  6418  005182  6FE2               	movwf	_IR_signal& (0+255),b
  6419  005184  6BE3               	clrf	(_IR_signal+1)& (0+255),b
  6420                           
  6421                           ;ADCFunctionality.c: 29: break;
  6422  005186  0012               	return	
  6423  005188                     l6973:
  6424                           
  6425                           ; BSR set to: 0
  6426                           ;ADCFunctionality.c: 31: IR_signal = (IR_res > 250) ? 1 : 0;
  6427  005188  0100               	movlb	0	; () banked
  6428  00518A  BFE1               	btfsc	(_IR_res+1)& (0+255),7,b
  6429  00518C  D00A               	goto	u5700
  6430  00518E  0100               	movlb	0	; () banked
  6431  005190  51E1               	movf	(_IR_res+1)& (0+255),w,b
  6432  005192  E105               	bnz	u5701
  6433  005194  0EFB               	movlw	251
  6434  005196  0100               	movlb	0	; () banked
  6435  005198  5DE0               	subwf	_IR_res& (0+255),w,b
  6436  00519A  A0D8               	btfss	status,0,c
  6437  00519C  D002               	goto	u5700
  6438  00519E                     u5701:
  6439  00519E  0E01               	movlw	1
  6440  0051A0  D001               	goto	u5710
  6441  0051A2                     u5700:
  6442  0051A2  0E00               	movlw	0
  6443  0051A4                     u5710:
  6444  0051A4  0100               	movlb	0	; () banked
  6445  0051A6  6FE2               	movwf	_IR_signal& (0+255),b
  6446  0051A8  6BE3               	clrf	(_IR_signal+1)& (0+255),b
  6447                           
  6448                           ; BSR set to: 0
  6449                           ;ADCFunctionality.c: 35: }
  6450                           
  6451                           ; BSR set to: 0
  6452                           ;ADCFunctionality.c: 34: break;
  6453                           
  6454                           ;ADCFunctionality.c: 33: default:
  6455                           
  6456                           ;ADCFunctionality.c: 32: break;
  6457  0051AA  0012               	return	
  6458  0051AC                     l6977:
  6459                           
  6460                           ; BSR set to: 0
  6461  0051AC  C082  F084         	movff	readIR@ana_port,??_readIR
  6462  0051B0  C083  F085         	movff	readIR@ana_port+1,??_readIR+1
  6463                           
  6464                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6465                           ; Switch size 1, requested type "space"
  6466                           ; Number of cases is 1, Range of values is 0 to 0
  6467                           ; switch strategies available:
  6468                           ; Name         Instructions Cycles
  6469                           ; simple_byte            4     3 (average)
  6470                           ;	Chosen strategy is simple_byte
  6471  0051B4  0100               	movlb	0	; () banked
  6472  0051B6  5185               	movf	(??_readIR+1)& (0+255),w,b
  6473  0051B8  0A00               	xorlw	0	; case 0
  6474  0051BA  A4D8               	btfss	status,2,c
  6475  0051BC  0012               	return	
  6476                           
  6477                           ; BSR set to: 0
  6478                           ; Switch size 1, requested type "space"
  6479                           ; Number of cases is 2, Range of values is 0 to 3
  6480                           ; switch strategies available:
  6481                           ; Name         Instructions Cycles
  6482                           ; simple_byte            7     4 (average)
  6483                           ;	Chosen strategy is simple_byte
  6484  0051BE  0100               	movlb	0	; () banked
  6485  0051C0  5184               	movf	??_readIR& (0+255),w,b
  6486  0051C2  0A00               	xorlw	0	; case 0
  6487  0051C4  B4D8               	btfsc	status,2,c
  6488  0051C6  D7CE               	goto	l6971
  6489  0051C8  0A03               	xorlw	3	; case 3
  6490  0051CA  A4D8               	btfss	status,2,c
  6491  0051CC  0012               	return	
  6492  0051CE  D7DC               	goto	l6973
  6493  0051D0                     __end_of_readIR:
  6494                           	opt stack 0
  6495                           tblptru	equ	0xFF8
  6496                           tblptrh	equ	0xFF7
  6497                           tblptrl	equ	0xFF6
  6498                           tablat	equ	0xFF5
  6499                           prodh	equ	0xFF4
  6500                           prodl	equ	0xFF3
  6501                           postinc0	equ	0xFEE
  6502                           wreg	equ	0xFE8
  6503                           postdec1	equ	0xFE5
  6504                           fsr1l	equ	0xFE1
  6505                           indf2	equ	0xFDF
  6506                           postinc2	equ	0xFDE
  6507                           postdec2	equ	0xFDD
  6508                           fsr2h	equ	0xFDA
  6509                           fsr2l	equ	0xFD9
  6510                           status	equ	0xFD8
  6511                           
  6512 ;; *************** function _readCOND *****************
  6513 ;; Defined at:
  6514 ;;		line 44 in file "ADCFunctionality.c"
  6515 ;; Parameters:    Size  Location     Type
  6516 ;;		None
  6517 ;; Auto vars:     Size  Location     Type
  6518 ;;  res             2    4[BANK0 ] int 
  6519 ;; Return value:  Size  Location     Type
  6520 ;;                  1    wreg      void 
  6521 ;; Registers used:
  6522 ;;		wreg, status,2, status,0, cstack
  6523 ;; Tracked objects:
  6524 ;;		On entry : 0/0
  6525 ;;		On exit  : 0/0
  6526 ;;		Unchanged: 0/0
  6527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6529 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6530 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6531 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6532 ;;Total ram usage:        4 bytes
  6533 ;; Hardware stack levels used:    1
  6534 ;; Hardware stack levels required when called:    8
  6535 ;; This function calls:
  6536 ;;		_readADC
  6537 ;; This function is called by:
  6538 ;;		_ID
  6539 ;; This function uses a non-reentrant model
  6540 ;;
  6541                           
  6542                           	psect	text9
  6543  005988                     __ptext9:
  6544                           	opt stack 0
  6545  005988                     _readCOND:
  6546                           	opt stack 20
  6547                           
  6548                           ;ADCFunctionality.c: 45: readADC(2);
  6549                           
  6550                           ; BSR set to: 0
  6551                           ;incstack = 0
  6552  005988  0E02               	movlw	2
  6553  00598A  EC66  F02F         	call	_readADC
  6554                           
  6555                           ;ADCFunctionality.c: 46: int res = ADRESH<<8 | ADRESL;
  6556  00598E  50C3               	movf	4035,w,c	;volatile
  6557  005990  CFC4 F082          	movff	4036,??_readCOND	;volatile
  6558  005994  0100               	movlb	0	; () banked
  6559  005996  6B83               	clrf	(??_readCOND+1)& (0+255),b
  6560  005998  C082  F083         	movff	??_readCOND,??_readCOND+1
  6561  00599C  0100               	movlb	0	; () banked
  6562  00599E  6B82               	clrf	??_readCOND& (0+255),b
  6563  0059A0  0100               	movlb	0	; () banked
  6564  0059A2  1182               	iorwf	??_readCOND& (0+255),w,b
  6565  0059A4  0100               	movlb	0	; () banked
  6566  0059A6  6F84               	movwf	readCOND@res& (0+255),b
  6567  0059A8  0100               	movlb	0	; () banked
  6568  0059AA  5183               	movf	(??_readCOND+1)& (0+255),w,b
  6569  0059AC  0100               	movlb	0	; () banked
  6570  0059AE  6F85               	movwf	(readCOND@res+1)& (0+255),b
  6571                           
  6572                           ; BSR set to: 0
  6573                           ;ADCFunctionality.c: 47: COND_signal = (res > 300) ? 1 : 0;
  6574  0059B0  0100               	movlb	0	; () banked
  6575  0059B2  BF85               	btfsc	(readCOND@res+1)& (0+255),7,b
  6576  0059B4  D00A               	goto	u6470
  6577  0059B6  0E2D               	movlw	45
  6578  0059B8  0100               	movlb	0	; () banked
  6579  0059BA  5D84               	subwf	readCOND@res& (0+255),w,b
  6580  0059BC  0E01               	movlw	1
  6581  0059BE  0100               	movlb	0	; () banked
  6582  0059C0  5985               	subwfb	(readCOND@res+1)& (0+255),w,b
  6583  0059C2  A0D8               	btfss	status,0,c
  6584  0059C4  D002               	goto	u6470
  6585  0059C6  0E01               	movlw	1
  6586  0059C8  D001               	goto	u6480
  6587  0059CA                     u6470:
  6588  0059CA  0E00               	movlw	0
  6589  0059CC                     u6480:
  6590  0059CC  0100               	movlb	0	; () banked
  6591  0059CE  6FDE               	movwf	_COND_signal& (0+255),b
  6592  0059D0  6BDF               	clrf	(_COND_signal+1)& (0+255),b
  6593                           
  6594                           ; BSR set to: 0
  6595  0059D2  0012               	return		;funcret
  6596  0059D4                     __end_of_readCOND:
  6597                           	opt stack 0
  6598                           tblptru	equ	0xFF8
  6599                           tblptrh	equ	0xFF7
  6600                           tblptrl	equ	0xFF6
  6601                           tablat	equ	0xFF5
  6602                           prodh	equ	0xFF4
  6603                           prodl	equ	0xFF3
  6604                           postinc0	equ	0xFEE
  6605                           wreg	equ	0xFE8
  6606                           postdec1	equ	0xFE5
  6607                           fsr1l	equ	0xFE1
  6608                           indf2	equ	0xFDF
  6609                           postinc2	equ	0xFDE
  6610                           postdec2	equ	0xFDD
  6611                           fsr2h	equ	0xFDA
  6612                           fsr2l	equ	0xFD9
  6613                           status	equ	0xFD8
  6614                           
  6615 ;; *************** function _delay_ms *****************
  6616 ;; Defined at:
  6617 ;;		line 761 in file "sort.c"
  6618 ;; Parameters:    Size  Location     Type
  6619 ;;  milliseconds    1    wreg     unsigned char 
  6620 ;; Auto vars:     Size  Location     Type
  6621 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  6622 ;; Return value:  Size  Location     Type
  6623 ;;                  1    wreg      void 
  6624 ;; Registers used:
  6625 ;;		wreg, status,2, status,0, cstack
  6626 ;; Tracked objects:
  6627 ;;		On entry : 0/0
  6628 ;;		On exit  : 0/0
  6629 ;;		Unchanged: 0/0
  6630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6632 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6633 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6634 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6635 ;;Total ram usage:        2 bytes
  6636 ;; Hardware stack levels used:    1
  6637 ;; Hardware stack levels required when called:    7
  6638 ;; This function calls:
  6639 ;;		Nothing
  6640 ;; This function is called by:
  6641 ;;		_Loading
  6642 ;;		_ID
  6643 ;; This function uses a non-reentrant model
  6644 ;;
  6645                           
  6646                           	psect	text10
  6647  005F22                     __ptext10:
  6648                           	opt stack 0
  6649  005F22                     _delay_ms:
  6650                           	opt stack 21
  6651                           
  6652                           ; BSR set to: 0
  6653                           ;incstack = 0
  6654                           ;delay_ms@milliseconds stored from wreg
  6655  005F22  0100               	movlb	0	; () banked
  6656  005F24  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  6657                           
  6658                           ;sort.c: 762: while(milliseconds > 0)
  6659  005F26  D00B               	goto	l7687
  6660  005F28                     l7683:
  6661                           
  6662                           ;sort.c: 763: {
  6663                           ;sort.c: 764: milliseconds--;
  6664  005F28  0100               	movlb	0	; () banked
  6665  005F2A  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  6666                           
  6667                           ; BSR set to: 0
  6668                           ;sort.c: 765: _delay((unsigned long)((990)*(32000000/4000000.0)));
  6669  005F2C  0E0B               	movlw	11
  6670  005F2E  0100               	movlb	0	; () banked
  6671  005F30  6F80               	movwf	??_delay_ms& (0+255),b
  6672  005F32  0E47               	movlw	71
  6673  005F34                     u11247:
  6674  005F34  2EE8               	decfsz	wreg,f,c
  6675  005F36  D7FE               	bra	u11247
  6676  005F38  2F80               	decfsz	??_delay_ms& (0+255),f,b
  6677  005F3A  D7FC               	bra	u11247
  6678  005F3C  D000               	nop2	
  6679  005F3E                     l7687:
  6680  005F3E  0100               	movlb	0	; () banked
  6681  005F40  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  6682  005F42  0100               	movlb	0	; () banked
  6683  005F44  B4D8               	btfsc	status,2,c
  6684  005F46  0012               	return	
  6685  005F48  D7EF               	goto	l7683
  6686  005F4A                     __end_of_delay_ms:
  6687                           	opt stack 0
  6688                           tblptru	equ	0xFF8
  6689                           tblptrh	equ	0xFF7
  6690                           tblptrl	equ	0xFF6
  6691                           tablat	equ	0xFF5
  6692                           prodh	equ	0xFF4
  6693                           prodl	equ	0xFF3
  6694                           postinc0	equ	0xFEE
  6695                           wreg	equ	0xFE8
  6696                           postdec1	equ	0xFE5
  6697                           fsr1l	equ	0xFE1
  6698                           indf2	equ	0xFDF
  6699                           postinc2	equ	0xFDE
  6700                           postdec2	equ	0xFDD
  6701                           fsr2h	equ	0xFDA
  6702                           fsr2l	equ	0xFD9
  6703                           status	equ	0xFD8
  6704                           
  6705 ;; *************** function ___ftge *****************
  6706 ;; Defined at:
  6707 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  6708 ;; Parameters:    Size  Location     Type
  6709 ;;  ff1             3   18[BANK0 ] float 
  6710 ;;  ff2             3   21[BANK0 ] float 
  6711 ;; Auto vars:     Size  Location     Type
  6712 ;;		None
  6713 ;; Return value:  Size  Location     Type
  6714 ;;		None               void
  6715 ;; Registers used:
  6716 ;;		wreg, status,2, status,0
  6717 ;; Tracked objects:
  6718 ;;		On entry : 0/0
  6719 ;;		On exit  : 0/0
  6720 ;;		Unchanged: 0/0
  6721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6722 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6724 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6725 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6726 ;;Total ram usage:        9 bytes
  6727 ;; Hardware stack levels used:    1
  6728 ;; Hardware stack levels required when called:    7
  6729 ;; This function calls:
  6730 ;;		Nothing
  6731 ;; This function is called by:
  6732 ;;		_ID
  6733 ;; This function uses a non-reentrant model
  6734 ;;
  6735                           
  6736                           	psect	text11
  6737  004DAA                     __ptext11:
  6738                           	opt stack 0
  6739  004DAA                     ___ftge:
  6740                           	opt stack 21
  6741                           
  6742                           ; BSR set to: 0
  6743                           ;incstack = 0
  6744  004DAA  0100               	movlb	0	; () banked
  6745  004DAC  AF94               	btfss	(___ftge@ff1+2)& (0+255),7,b
  6746  004DAE  D01D               	goto	l7805
  6747                           
  6748                           ; BSR set to: 0
  6749  004DB0  C092  F098         	movff	___ftge@ff1,??___ftge
  6750  004DB4  C093  F099         	movff	___ftge@ff1+1,??___ftge+1
  6751  004DB8  C094  F09A         	movff	___ftge@ff1+2,??___ftge+2
  6752  004DBC  0100               	movlb	0	; () banked
  6753  004DBE  1F98               	comf	??___ftge& (0+255),f,b
  6754  004DC0  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6755  004DC2  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6756  004DC4  2B98               	incf	??___ftge& (0+255),f,b
  6757  004DC6  0E00               	movlw	0
  6758  004DC8  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6759  004DCA  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6760  004DCC  0E00               	movlw	0
  6761  004DCE  0100               	movlb	0	; () banked
  6762  004DD0  2598               	addwf	??___ftge& (0+255),w,b
  6763  004DD2  0100               	movlb	0	; () banked
  6764  004DD4  6F92               	movwf	___ftge@ff1& (0+255),b
  6765  004DD6  0E00               	movlw	0
  6766  004DD8  0100               	movlb	0	; () banked
  6767  004DDA  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6768  004DDC  0100               	movlb	0	; () banked
  6769  004DDE  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  6770  004DE0  0E80               	movlw	128
  6771  004DE2  0100               	movlb	0	; () banked
  6772  004DE4  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6773  004DE6  0100               	movlb	0	; () banked
  6774  004DE8  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  6775  004DEA                     l7805:
  6776                           
  6777                           ; BSR set to: 0
  6778  004DEA  0100               	movlb	0	; () banked
  6779  004DEC  AF97               	btfss	(___ftge@ff2+2)& (0+255),7,b
  6780  004DEE  D01D               	goto	l7809
  6781                           
  6782                           ; BSR set to: 0
  6783  004DF0  C095  F098         	movff	___ftge@ff2,??___ftge
  6784  004DF4  C096  F099         	movff	___ftge@ff2+1,??___ftge+1
  6785  004DF8  C097  F09A         	movff	___ftge@ff2+2,??___ftge+2
  6786  004DFC  0100               	movlb	0	; () banked
  6787  004DFE  1F98               	comf	??___ftge& (0+255),f,b
  6788  004E00  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6789  004E02  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6790  004E04  2B98               	incf	??___ftge& (0+255),f,b
  6791  004E06  0E00               	movlw	0
  6792  004E08  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6793  004E0A  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6794  004E0C  0E00               	movlw	0
  6795  004E0E  0100               	movlb	0	; () banked
  6796  004E10  2598               	addwf	??___ftge& (0+255),w,b
  6797  004E12  0100               	movlb	0	; () banked
  6798  004E14  6F95               	movwf	___ftge@ff2& (0+255),b
  6799  004E16  0E00               	movlw	0
  6800  004E18  0100               	movlb	0	; () banked
  6801  004E1A  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6802  004E1C  0100               	movlb	0	; () banked
  6803  004E1E  6F96               	movwf	(___ftge@ff2+1)& (0+255),b
  6804  004E20  0E80               	movlw	128
  6805  004E22  0100               	movlb	0	; () banked
  6806  004E24  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6807  004E26  0100               	movlb	0	; () banked
  6808  004E28  6F97               	movwf	(___ftge@ff2+2)& (0+255),b
  6809  004E2A                     l7809:
  6810                           
  6811                           ; BSR set to: 0
  6812  004E2A  0E00               	movlw	0
  6813  004E2C  0100               	movlb	0	; () banked
  6814  004E2E  1B92               	xorwf	___ftge@ff1& (0+255),f,b
  6815  004E30  0E00               	movlw	0
  6816  004E32  0100               	movlb	0	; () banked
  6817  004E34  1B93               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  6818  004E36  0E80               	movlw	128
  6819  004E38  0100               	movlb	0	; () banked
  6820  004E3A  1B94               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  6821                           
  6822                           ; BSR set to: 0
  6823  004E3C  0E00               	movlw	0
  6824  004E3E  0100               	movlb	0	; () banked
  6825  004E40  1B95               	xorwf	___ftge@ff2& (0+255),f,b
  6826  004E42  0E00               	movlw	0
  6827  004E44  0100               	movlb	0	; () banked
  6828  004E46  1B96               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  6829  004E48  0E80               	movlw	128
  6830  004E4A  0100               	movlb	0	; () banked
  6831  004E4C  1B97               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  6832  004E4E  0100               	movlb	0	; () banked
  6833  004E50  5195               	movf	___ftge@ff2& (0+255),w,b
  6834  004E52  0100               	movlb	0	; () banked
  6835  004E54  5D92               	subwf	___ftge@ff1& (0+255),w,b
  6836  004E56  0100               	movlb	0	; () banked
  6837  004E58  5196               	movf	(___ftge@ff2+1)& (0+255),w,b
  6838  004E5A  0100               	movlb	0	; () banked
  6839  004E5C  5993               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  6840  004E5E  0100               	movlb	0	; () banked
  6841  004E60  5197               	movf	(___ftge@ff2+2)& (0+255),w,b
  6842  004E62  0100               	movlb	0	; () banked
  6843  004E64  5994               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  6844  004E66  B0D8               	btfsc	status,0,c
  6845  004E68  D002               	goto	l7815
  6846                           
  6847                           ; BSR set to: 0
  6848  004E6A  90D8               	bcf	status,0,c
  6849  004E6C  0012               	return	
  6850  004E6E                     l7815:
  6851                           
  6852                           ; BSR set to: 0
  6853  004E6E  80D8               	bsf	status,0,c
  6854                           
  6855                           ; BSR set to: 0
  6856  004E70  0012               	return	
  6857  004E72                     __end_of___ftge:
  6858                           	opt stack 0
  6859                           tblptru	equ	0xFF8
  6860                           tblptrh	equ	0xFF7
  6861                           tblptrl	equ	0xFF6
  6862                           tablat	equ	0xFF5
  6863                           prodh	equ	0xFF4
  6864                           prodl	equ	0xFF3
  6865                           postinc0	equ	0xFEE
  6866                           wreg	equ	0xFE8
  6867                           postdec1	equ	0xFE5
  6868                           fsr1l	equ	0xFE1
  6869                           indf2	equ	0xFDF
  6870                           postinc2	equ	0xFDE
  6871                           postdec2	equ	0xFDD
  6872                           fsr2h	equ	0xFDA
  6873                           fsr2l	equ	0xFD9
  6874                           status	equ	0xFD8
  6875                           
  6876 ;; *************** function ___awtoft *****************
  6877 ;; Defined at:
  6878 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  6879 ;; Parameters:    Size  Location     Type
  6880 ;;  c               2   14[BANK0 ] int 
  6881 ;; Auto vars:     Size  Location     Type
  6882 ;;  sign            1   17[BANK0 ] unsigned char 
  6883 ;; Return value:  Size  Location     Type
  6884 ;;                  3   14[BANK0 ] float 
  6885 ;; Registers used:
  6886 ;;		wreg, status,2, status,0, cstack
  6887 ;; Tracked objects:
  6888 ;;		On entry : 0/0
  6889 ;;		On exit  : 0/0
  6890 ;;		Unchanged: 0/0
  6891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6892 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6893 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6895 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6896 ;;Total ram usage:        4 bytes
  6897 ;; Hardware stack levels used:    1
  6898 ;; Hardware stack levels required when called:    8
  6899 ;; This function calls:
  6900 ;;		___ftpack
  6901 ;; This function is called by:
  6902 ;;		_ID
  6903 ;; This function uses a non-reentrant model
  6904 ;;
  6905                           
  6906                           	psect	text12
  6907  005A66                     __ptext12:
  6908                           	opt stack 0
  6909  005A66                     ___awtoft:
  6910                           	opt stack 20
  6911                           
  6912                           ; BSR set to: 0
  6913                           ;incstack = 0
  6914  005A66  0E00               	movlw	0
  6915  005A68  0100               	movlb	0	; () banked
  6916  005A6A  6F91               	movwf	___awtoft@sign& (0+255),b
  6917                           
  6918                           ; BSR set to: 0
  6919  005A6C  0100               	movlb	0	; () banked
  6920  005A6E  AF8F               	btfss	(___awtoft@c+1)& (0+255),7,b
  6921  005A70  D008               	goto	l7797
  6922                           
  6923                           ; BSR set to: 0
  6924  005A72  0100               	movlb	0	; () banked
  6925  005A74  6D8E               	negf	___awtoft@c& (0+255),b
  6926  005A76  1F8F               	comf	(___awtoft@c+1)& (0+255),f,b
  6927  005A78  B0D8               	btfsc	status,0,c
  6928  005A7A  2B8F               	incf	(___awtoft@c+1)& (0+255),f,b
  6929                           
  6930                           ; BSR set to: 0
  6931  005A7C  0E01               	movlw	1
  6932  005A7E  0100               	movlb	0	; () banked
  6933  005A80  6F91               	movwf	___awtoft@sign& (0+255),b
  6934  005A82                     l7797:
  6935                           
  6936                           ; BSR set to: 0
  6937  005A82  C08E  F080         	movff	___awtoft@c,___ftpack@arg
  6938  005A86  C08F  F081         	movff	___awtoft@c+1,___ftpack@arg+1
  6939  005A8A  0100               	movlb	0	; () banked
  6940  005A8C  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
  6941  005A8E  0E8E               	movlw	142
  6942  005A90  0100               	movlb	0	; () banked
  6943  005A92  6F83               	movwf	___ftpack@exp& (0+255),b
  6944  005A94  C091  F084         	movff	___awtoft@sign,___ftpack@sign
  6945  005A98  ECC0  F022         	call	___ftpack	;wreg free
  6946  005A9C  C080  F08E         	movff	?___ftpack,?___awtoft
  6947  005AA0  C081  F08F         	movff	?___ftpack+1,?___awtoft+1
  6948  005AA4  C082  F090         	movff	?___ftpack+2,?___awtoft+2
  6949  005AA8  0012               	return	
  6950  005AAA                     __end_of___awtoft:
  6951                           	opt stack 0
  6952                           tblptru	equ	0xFF8
  6953                           tblptrh	equ	0xFF7
  6954                           tblptrl	equ	0xFF6
  6955                           tablat	equ	0xFF5
  6956                           prodh	equ	0xFF4
  6957                           prodl	equ	0xFF3
  6958                           postinc0	equ	0xFEE
  6959                           wreg	equ	0xFE8
  6960                           postdec1	equ	0xFE5
  6961                           fsr1l	equ	0xFE1
  6962                           indf2	equ	0xFDF
  6963                           postinc2	equ	0xFDE
  6964                           postdec2	equ	0xFDD
  6965                           fsr2h	equ	0xFDA
  6966                           fsr2l	equ	0xFD9
  6967                           status	equ	0xFD8
  6968                           
  6969 ;; *************** function ___ftpack *****************
  6970 ;; Defined at:
  6971 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  6972 ;; Parameters:    Size  Location     Type
  6973 ;;  arg             3    0[BANK0 ] unsigned um
  6974 ;;  exp             1    3[BANK0 ] unsigned char 
  6975 ;;  sign            1    4[BANK0 ] unsigned char 
  6976 ;; Auto vars:     Size  Location     Type
  6977 ;;		None
  6978 ;; Return value:  Size  Location     Type
  6979 ;;                  3    0[BANK0 ] float 
  6980 ;; Registers used:
  6981 ;;		wreg, status,2, status,0
  6982 ;; Tracked objects:
  6983 ;;		On entry : 0/0
  6984 ;;		On exit  : 0/0
  6985 ;;		Unchanged: 0/0
  6986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6987 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6989 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6990 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6991 ;;Total ram usage:        8 bytes
  6992 ;; Hardware stack levels used:    1
  6993 ;; Hardware stack levels required when called:    7
  6994 ;; This function calls:
  6995 ;;		Nothing
  6996 ;; This function is called by:
  6997 ;;		___awtoft
  6998 ;; This function uses a non-reentrant model
  6999 ;;
  7000                           
  7001                           	psect	text13
  7002  004580                     __ptext13:
  7003                           	opt stack 0
  7004  004580                     ___ftpack:
  7005                           	opt stack 20
  7006                           
  7007                           ;incstack = 0
  7008  004580  0100               	movlb	0	; () banked
  7009  004582  5183               	movf	___ftpack@exp& (0+255),w,b
  7010  004584  0100               	movlb	0	; () banked
  7011  004586  B4D8               	btfsc	status,2,c
  7012  004588  D008               	goto	l7181
  7013                           
  7014                           ; BSR set to: 0
  7015  00458A  0100               	movlb	0	; () banked
  7016  00458C  5180               	movf	___ftpack@arg& (0+255),w,b
  7017  00458E  0100               	movlb	0	; () banked
  7018  004590  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  7019  004592  0100               	movlb	0	; () banked
  7020  004594  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  7021  004596  A4D8               	btfss	status,2,c
  7022  004598  D011               	goto	l7187
  7023  00459A                     l7181:
  7024                           
  7025                           ; BSR set to: 0
  7026  00459A  0E00               	movlw	0
  7027  00459C  0100               	movlb	0	; () banked
  7028  00459E  6F80               	movwf	?___ftpack& (0+255),b
  7029  0045A0  0E00               	movlw	0
  7030  0045A2  0100               	movlb	0	; () banked
  7031  0045A4  6F81               	movwf	(?___ftpack+1)& (0+255),b
  7032  0045A6  0E00               	movlw	0
  7033  0045A8  0100               	movlb	0	; () banked
  7034  0045AA  6F82               	movwf	(?___ftpack+2)& (0+255),b
  7035                           
  7036                           ; BSR set to: 0
  7037  0045AC  0012               	return	
  7038  0045AE                     l7185:
  7039                           
  7040                           ; BSR set to: 0
  7041  0045AE  0100               	movlb	0	; () banked
  7042  0045B0  2B83               	incf	___ftpack@exp& (0+255),f,b
  7043  0045B2  0100               	movlb	0	; () banked
  7044  0045B4  90D8               	bcf	status,0,c
  7045  0045B6  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  7046  0045B8  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  7047  0045BA  3380               	rrcf	___ftpack@arg& (0+255),f,b
  7048  0045BC                     l7187:
  7049                           
  7050                           ; BSR set to: 0
  7051  0045BC  0E00               	movlw	0
  7052  0045BE  0100               	movlb	0	; () banked
  7053  0045C0  1580               	andwf	___ftpack@arg& (0+255),w,b
  7054  0045C2  0100               	movlb	0	; () banked
  7055  0045C4  6F85               	movwf	??___ftpack& (0+255),b
  7056  0045C6  0E00               	movlw	0
  7057  0045C8  0100               	movlb	0	; () banked
  7058  0045CA  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  7059  0045CC  0100               	movlb	0	; () banked
  7060  0045CE  6F86               	movwf	(??___ftpack+1)& (0+255),b
  7061  0045D0  0EFE               	movlw	254
  7062  0045D2  0100               	movlb	0	; () banked
  7063  0045D4  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  7064  0045D6  0100               	movlb	0	; () banked
  7065  0045D8  6F87               	movwf	(??___ftpack+2)& (0+255),b
  7066  0045DA  0100               	movlb	0	; () banked
  7067  0045DC  5185               	movf	??___ftpack& (0+255),w,b
  7068  0045DE  0100               	movlb	0	; () banked
  7069  0045E0  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  7070  0045E2  0100               	movlb	0	; () banked
  7071  0045E4  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  7072  0045E6  B4D8               	btfsc	status,2,c
  7073  0045E8  D011               	goto	l7193
  7074  0045EA  D7E1               	goto	l7185
  7075  0045EC                     l7189:
  7076                           
  7077                           ; BSR set to: 0
  7078  0045EC  0100               	movlb	0	; () banked
  7079  0045EE  2B83               	incf	___ftpack@exp& (0+255),f,b
  7080                           
  7081                           ; BSR set to: 0
  7082  0045F0  0E01               	movlw	1
  7083  0045F2  0100               	movlb	0	; () banked
  7084  0045F4  2780               	addwf	___ftpack@arg& (0+255),f,b
  7085  0045F6  0E00               	movlw	0
  7086  0045F8  0100               	movlb	0	; () banked
  7087  0045FA  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  7088  0045FC  0E00               	movlw	0
  7089  0045FE  0100               	movlb	0	; () banked
  7090  004600  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  7091  004602  0100               	movlb	0	; () banked
  7092  004604  90D8               	bcf	status,0,c
  7093  004606  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  7094  004608  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  7095  00460A  3380               	rrcf	___ftpack@arg& (0+255),f,b
  7096  00460C                     l7193:
  7097                           
  7098                           ; BSR set to: 0
  7099  00460C  0E00               	movlw	0
  7100  00460E  0100               	movlb	0	; () banked
  7101  004610  1580               	andwf	___ftpack@arg& (0+255),w,b
  7102  004612  0100               	movlb	0	; () banked
  7103  004614  6F85               	movwf	??___ftpack& (0+255),b
  7104  004616  0E00               	movlw	0
  7105  004618  0100               	movlb	0	; () banked
  7106  00461A  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  7107  00461C  0100               	movlb	0	; () banked
  7108  00461E  6F86               	movwf	(??___ftpack+1)& (0+255),b
  7109  004620  0EFF               	movlw	255
  7110  004622  0100               	movlb	0	; () banked
  7111  004624  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  7112  004626  0100               	movlb	0	; () banked
  7113  004628  6F87               	movwf	(??___ftpack+2)& (0+255),b
  7114  00462A  0100               	movlb	0	; () banked
  7115  00462C  5185               	movf	??___ftpack& (0+255),w,b
  7116  00462E  0100               	movlb	0	; () banked
  7117  004630  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  7118  004632  0100               	movlb	0	; () banked
  7119  004634  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  7120  004636  B4D8               	btfsc	status,2,c
  7121  004638  D008               	goto	l7197
  7122  00463A  D7D8               	goto	l7189
  7123  00463C                     l7195:
  7124                           
  7125                           ; BSR set to: 0
  7126  00463C  0100               	movlb	0	; () banked
  7127  00463E  0783               	decf	___ftpack@exp& (0+255),f,b
  7128  004640  0100               	movlb	0	; () banked
  7129  004642  90D8               	bcf	status,0,c
  7130  004644  3780               	rlcf	___ftpack@arg& (0+255),f,b
  7131  004646  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  7132  004648  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  7133  00464A                     l7197:
  7134                           
  7135                           ; BSR set to: 0
  7136  00464A  0100               	movlb	0	; () banked
  7137  00464C  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  7138  00464E  D004               	goto	l1855
  7139                           
  7140                           ; BSR set to: 0
  7141  004650  0E02               	movlw	2
  7142  004652  0100               	movlb	0	; () banked
  7143  004654  6183               	cpfslt	___ftpack@exp& (0+255),b
  7144  004656  D7F2               	goto	l7195
  7145  004658                     l1855:
  7146                           
  7147                           ; BSR set to: 0
  7148  004658  0100               	movlb	0	; () banked
  7149  00465A  B183               	btfsc	___ftpack@exp& (0+255),0,b
  7150  00465C  D002               	goto	l7203
  7151                           
  7152                           ; BSR set to: 0
  7153  00465E  0100               	movlb	0	; () banked
  7154  004660  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  7155  004662                     l7203:
  7156                           
  7157                           ; BSR set to: 0
  7158  004662  0100               	movlb	0	; () banked
  7159  004664  90D8               	bcf	status,0,c
  7160  004666  3383               	rrcf	___ftpack@exp& (0+255),f,b
  7161  004668  0100               	movlb	0	; () banked
  7162  00466A  5183               	movf	___ftpack@exp& (0+255),w,b
  7163  00466C  0100               	movlb	0	; () banked
  7164  00466E  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  7165                           
  7166                           ; BSR set to: 0
  7167  004670  0100               	movlb	0	; () banked
  7168  004672  5184               	movf	___ftpack@sign& (0+255),w,b
  7169  004674  0100               	movlb	0	; () banked
  7170  004676  B4D8               	btfsc	status,2,c
  7171  004678  D002               	goto	l7209
  7172                           
  7173                           ; BSR set to: 0
  7174  00467A  0100               	movlb	0	; () banked
  7175  00467C  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  7176  00467E                     l7209:
  7177                           
  7178                           ; BSR set to: 0
  7179  00467E  C080  F080         	movff	___ftpack@arg,?___ftpack
  7180  004682  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
  7181  004686  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
  7182  00468A  0012               	return	
  7183  00468C                     __end_of___ftpack:
  7184                           	opt stack 0
  7185                           tblptru	equ	0xFF8
  7186                           tblptrh	equ	0xFF7
  7187                           tblptrl	equ	0xFF6
  7188                           tablat	equ	0xFF5
  7189                           prodh	equ	0xFF4
  7190                           prodl	equ	0xFF3
  7191                           postinc0	equ	0xFEE
  7192                           wreg	equ	0xFE8
  7193                           postdec1	equ	0xFE5
  7194                           fsr1l	equ	0xFE1
  7195                           indf2	equ	0xFDF
  7196                           postinc2	equ	0xFDE
  7197                           postdec2	equ	0xFDD
  7198                           fsr2h	equ	0xFDA
  7199                           fsr2l	equ	0xFD9
  7200                           status	equ	0xFD8
  7201                           
  7202 ;; *************** function _Distribution *****************
  7203 ;; Defined at:
  7204 ;;		line 435 in file "sort.c"
  7205 ;; Parameters:    Size  Location     Type
  7206 ;;		None
  7207 ;; Auto vars:     Size  Location     Type
  7208 ;;		None
  7209 ;; Return value:  Size  Location     Type
  7210 ;;                  1    wreg      void 
  7211 ;; Registers used:
  7212 ;;		wreg, status,2, status,0, cstack
  7213 ;; Tracked objects:
  7214 ;;		On entry : 0/0
  7215 ;;		On exit  : 0/0
  7216 ;;		Unchanged: 0/0
  7217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7220 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7221 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7222 ;;Total ram usage:        2 bytes
  7223 ;; Hardware stack levels used:    1
  7224 ;; Hardware stack levels required when called:    8
  7225 ;; This function calls:
  7226 ;;		_updateServoPosition
  7227 ;; This function is called by:
  7228 ;;		_sort
  7229 ;; This function uses a non-reentrant model
  7230 ;;
  7231                           
  7232                           	psect	text14
  7233  004978                     __ptext14:
  7234                           	opt stack 0
  7235  004978                     _Distribution:
  7236                           	opt stack 21
  7237                           
  7238                           ;sort.c: 436: if(f_can_coming_to_distribution){
  7239                           
  7240                           ; BSR set to: 0
  7241                           ;incstack = 0
  7242  004978  0101               	movlb	1	; () banked
  7243  00497A  5133               	movf	_f_can_coming_to_distribution& (0+255),w,b
  7244  00497C  0101               	movlb	1	; () banked
  7245  00497E  1134               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  7246  004980  B4D8               	btfsc	status,2,c
  7247  004982  0012               	return	
  7248                           
  7249                           ; BSR set to: 1
  7250                           ;sort.c: 437: f_can_distributed = 0;
  7251  004984  0E00               	movlw	0
  7252  004986  0101               	movlb	1	; () banked
  7253  004988  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  7254  00498A  0E00               	movlw	0
  7255  00498C  6F35               	movwf	_f_can_distributed& (0+255),b
  7256                           
  7257                           ;sort.c: 444: switch(cur_can){
  7258  00498E  D034               	goto	l8577
  7259  004990                     l8567:
  7260                           
  7261                           ;sort.c: 446: updateServoPosition(400, 1);
  7262  004990  0E01               	movlw	1
  7263  004992  0100               	movlb	0	; () banked
  7264  004994  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7265  004996  0E90               	movlw	144
  7266  004998  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7267  00499A  0E00               	movlw	0
  7268  00499C  0100               	movlb	0	; () banked
  7269  00499E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7270  0049A0  0E01               	movlw	1
  7271  0049A2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7272  0049A4  ECF4  F029         	call	_updateServoPosition	;wreg free
  7273                           
  7274                           ;sort.c: 447: break;
  7275  0049A8  D03E               	goto	l8579
  7276  0049AA                     l8569:
  7277                           
  7278                           ;sort.c: 449: updateServoPosition(850, 1);
  7279  0049AA  0E03               	movlw	3
  7280  0049AC  0100               	movlb	0	; () banked
  7281  0049AE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7282  0049B0  0E52               	movlw	82
  7283  0049B2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7284  0049B4  0E00               	movlw	0
  7285  0049B6  0100               	movlb	0	; () banked
  7286  0049B8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7287  0049BA  0E01               	movlw	1
  7288  0049BC  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7289  0049BE  ECF4  F029         	call	_updateServoPosition	;wreg free
  7290                           
  7291                           ;sort.c: 450: break;
  7292  0049C2  D031               	goto	l8579
  7293  0049C4                     l8571:
  7294                           
  7295                           ;sort.c: 452: updateServoPosition(1550, 1);
  7296  0049C4  0E06               	movlw	6
  7297  0049C6  0100               	movlb	0	; () banked
  7298  0049C8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7299  0049CA  0E0E               	movlw	14
  7300  0049CC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7301  0049CE  0E00               	movlw	0
  7302  0049D0  0100               	movlb	0	; () banked
  7303  0049D2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7304  0049D4  0E01               	movlw	1
  7305  0049D6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7306  0049D8  ECF4  F029         	call	_updateServoPosition	;wreg free
  7307                           
  7308                           ;sort.c: 453: break;
  7309  0049DC  D024               	goto	l8579
  7310  0049DE                     l8573:
  7311                           
  7312                           ;sort.c: 455: updateServoPosition(2500, 1);
  7313  0049DE  0E09               	movlw	9
  7314  0049E0  0100               	movlb	0	; () banked
  7315  0049E2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7316  0049E4  0EC4               	movlw	196
  7317  0049E6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7318  0049E8  0E00               	movlw	0
  7319  0049EA  0100               	movlb	0	; () banked
  7320  0049EC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7321  0049EE  0E01               	movlw	1
  7322  0049F0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7323  0049F2  ECF4  F029         	call	_updateServoPosition	;wreg free
  7324                           
  7325                           ;sort.c: 459: }
  7326                           
  7327                           ;sort.c: 458: break;
  7328                           
  7329                           ;sort.c: 457: default:
  7330                           
  7331                           ;sort.c: 456: break;
  7332  0049F6  D017               	goto	l8579
  7333  0049F8                     l8577:
  7334  0049F8  C12B  F088         	movff	_cur_can,??_Distribution
  7335  0049FC  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  7336                           
  7337                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7338                           ; Switch size 1, requested type "space"
  7339                           ; Number of cases is 1, Range of values is 0 to 0
  7340                           ; switch strategies available:
  7341                           ; Name         Instructions Cycles
  7342                           ; simple_byte            4     3 (average)
  7343                           ;	Chosen strategy is simple_byte
  7344  004A00  0100               	movlb	0	; () banked
  7345  004A02  5189               	movf	(??_Distribution+1)& (0+255),w,b
  7346  004A04  0A00               	xorlw	0	; case 0
  7347  004A06  A4D8               	btfss	status,2,c
  7348  004A08  D00E               	goto	l8579
  7349                           
  7350                           ; BSR set to: 0
  7351                           ; Switch size 1, requested type "space"
  7352                           ; Number of cases is 4, Range of values is 0 to 3
  7353                           ; switch strategies available:
  7354                           ; Name         Instructions Cycles
  7355                           ; simple_byte           13     7 (average)
  7356                           ;	Chosen strategy is simple_byte
  7357  004A0A  0100               	movlb	0	; () banked
  7358  004A0C  5188               	movf	??_Distribution& (0+255),w,b
  7359  004A0E  0A00               	xorlw	0	; case 0
  7360  004A10  B4D8               	btfsc	status,2,c
  7361  004A12  D7BE               	goto	l8567
  7362  004A14  0A01               	xorlw	1	; case 1
  7363  004A16  B4D8               	btfsc	status,2,c
  7364  004A18  D7C8               	goto	l8569
  7365  004A1A  0A03               	xorlw	3	; case 2
  7366  004A1C  B4D8               	btfsc	status,2,c
  7367  004A1E  D7D2               	goto	l8571
  7368  004A20  0A01               	xorlw	1	; case 3
  7369  004A22  B4D8               	btfsc	status,2,c
  7370  004A24  D7DC               	goto	l8573
  7371  004A26                     l8579:
  7372                           
  7373                           ;sort.c: 460: updateServoPosition(1050, 3);
  7374  004A26  0E04               	movlw	4
  7375  004A28  0100               	movlb	0	; () banked
  7376  004A2A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  7377  004A2C  0E1A               	movlw	26
  7378  004A2E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  7379  004A30  0E00               	movlw	0
  7380  004A32  0100               	movlb	0	; () banked
  7381  004A34  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  7382  004A36  0E03               	movlw	3
  7383  004A38  6F82               	movwf	updateServoPosition@timer& (0+255),b
  7384  004A3A  ECF4  F029         	call	_updateServoPosition	;wreg free
  7385                           
  7386                           ;sort.c: 461: servo_timer_target = 750;
  7387  004A3E  0E02               	movlw	2
  7388  004A40  6E70               	movwf	_servo_timer_target+1,c	;volatile
  7389  004A42  0EEE               	movlw	238
  7390  004A44  6E6F               	movwf	_servo_timer_target,c	;volatile
  7391                           
  7392                           ;sort.c: 462: f_panning_to_bin = 1;
  7393  004A46  0E00               	movlw	0
  7394  004A48  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
  7395  004A4A  0E01               	movlw	1
  7396  004A4C  6E69               	movwf	_f_panning_to_bin,c	;volatile
  7397                           
  7398                           ;sort.c: 463: f_can_coming_to_distribution = 0;
  7399  004A4E  0E00               	movlw	0
  7400  004A50  0101               	movlb	1	; () banked
  7401  004A52  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  7402  004A54  0E00               	movlw	0
  7403  004A56  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  7404  004A58  0012               	return	
  7405  004A5A                     __end_of_Distribution:
  7406                           	opt stack 0
  7407                           tblptru	equ	0xFF8
  7408                           tblptrh	equ	0xFF7
  7409                           tblptrl	equ	0xFF6
  7410                           tablat	equ	0xFF5
  7411                           prodh	equ	0xFF4
  7412                           prodl	equ	0xFF3
  7413                           postinc0	equ	0xFEE
  7414                           wreg	equ	0xFE8
  7415                           postdec1	equ	0xFE5
  7416                           fsr1l	equ	0xFE1
  7417                           indf2	equ	0xFDF
  7418                           postinc2	equ	0xFDE
  7419                           postdec2	equ	0xFDD
  7420                           fsr2h	equ	0xFDA
  7421                           fsr2l	equ	0xFD9
  7422                           status	equ	0xFD8
  7423                           
  7424 ;; *************** function _machineConfig *****************
  7425 ;; Defined at:
  7426 ;;		line 15 in file "MachineConfig.c"
  7427 ;; Parameters:    Size  Location     Type
  7428 ;;		None
  7429 ;; Auto vars:     Size  Location     Type
  7430 ;;		None
  7431 ;; Return value:  Size  Location     Type
  7432 ;;                  1    wreg      void 
  7433 ;; Registers used:
  7434 ;;		wreg, status,2
  7435 ;; Tracked objects:
  7436 ;;		On entry : 0/0
  7437 ;;		On exit  : 0/0
  7438 ;;		Unchanged: 0/0
  7439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7443 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7444 ;;Total ram usage:        0 bytes
  7445 ;; Hardware stack levels used:    1
  7446 ;; Hardware stack levels required when called:    7
  7447 ;; This function calls:
  7448 ;;		Nothing
  7449 ;; This function is called by:
  7450 ;;		_main
  7451 ;; This function uses a non-reentrant model
  7452 ;;
  7453                           
  7454                           	psect	text15
  7455  00570C                     __ptext15:
  7456                           	opt stack 0
  7457  00570C                     _machineConfig:
  7458                           	opt stack 23
  7459                           
  7460                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  7461                           
  7462                           ; BSR set to: 1
  7463                           ;incstack = 0
  7464  00570C  0EF0               	movlw	240
  7465  00570E  6ED3               	movwf	4051,c	;volatile
  7466                           
  7467                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  7468  005710  8C9B               	bsf	3995,6,c	;volatile
  7469                           
  7470                           ;MachineConfig.c: 22: TRISA = 0b00001111;
  7471  005712  0E0F               	movlw	15
  7472  005714  6E92               	movwf	3986,c	;volatile
  7473                           
  7474                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  7475  005716  0EF2               	movlw	242
  7476  005718  6E93               	movwf	3987,c	;volatile
  7477                           
  7478                           ;MachineConfig.c: 27: TRISC = 0x00;
  7479  00571A  0E00               	movlw	0
  7480  00571C  6E94               	movwf	3988,c	;volatile
  7481                           
  7482                           ;MachineConfig.c: 31: TRISD = 0x00;
  7483  00571E  0E00               	movlw	0
  7484  005720  6E95               	movwf	3989,c	;volatile
  7485                           
  7486                           ;MachineConfig.c: 34: TRISE = 0x00;
  7487  005722  0E00               	movlw	0
  7488  005724  6E96               	movwf	3990,c	;volatile
  7489                           
  7490                           ;MachineConfig.c: 37: LATA = 0x00;
  7491  005726  0E00               	movlw	0
  7492  005728  6E89               	movwf	3977,c	;volatile
  7493                           
  7494                           ;MachineConfig.c: 38: LATB = 0x00;
  7495  00572A  0E00               	movlw	0
  7496  00572C  6E8A               	movwf	3978,c	;volatile
  7497                           
  7498                           ;MachineConfig.c: 39: LATC = 0x00;
  7499  00572E  0E00               	movlw	0
  7500  005730  6E8B               	movwf	3979,c	;volatile
  7501                           
  7502                           ;MachineConfig.c: 40: LATD = 0x00;
  7503  005732  0E00               	movlw	0
  7504  005734  6E8C               	movwf	3980,c	;volatile
  7505                           
  7506                           ;MachineConfig.c: 41: LATE = 0x00;
  7507  005736  0E00               	movlw	0
  7508  005738  6E8D               	movwf	3981,c	;volatile
  7509                           
  7510                           ;MachineConfig.c: 43: nRBPU = 0;
  7511  00573A  9EF1               	bcf	intcon2,7,c	;volatile
  7512                           
  7513                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  7514  00573C  0E00               	movlw	0
  7515  00573E  6EC2               	movwf	4034,c	;volatile
  7516                           
  7517                           ;MachineConfig.c: 47: ADCON1 = 0b00001011;
  7518  005740  0E0B               	movlw	11
  7519  005742  6EC1               	movwf	4033,c	;volatile
  7520                           
  7521                           ;MachineConfig.c: 52: CVRCON = 0x00;
  7522  005744  0E00               	movlw	0
  7523  005746  6EB5               	movwf	4021,c	;volatile
  7524                           
  7525                           ;MachineConfig.c: 53: CMCONbits.CIS = 0;
  7526  005748  96B4               	bcf	4020,3,c	;volatile
  7527                           
  7528                           ;MachineConfig.c: 54: ADCON2 = 0b10110001;
  7529  00574A  0EB1               	movlw	177
  7530  00574C  6EC0               	movwf	4032,c	;volatile
  7531                           
  7532                           ;MachineConfig.c: 57: INT1IE = 1;
  7533  00574E  86F0               	bsf	intcon3,3,c	;volatile
  7534                           
  7535                           ;MachineConfig.c: 59: TMR0IE = 1;
  7536  005750  8AF2               	bsf	intcon,5,c	;volatile
  7537                           
  7538                           ;MachineConfig.c: 60: TMR1IE = 1;
  7539  005752  809D               	bsf	3997,0,c	;volatile
  7540                           
  7541                           ;MachineConfig.c: 61: TMR2IE = 1;
  7542  005754  829D               	bsf	3997,1,c	;volatile
  7543                           
  7544                           ;MachineConfig.c: 62: TMR3IE = 1;
  7545  005756  82A0               	bsf	4000,1,c	;volatile
  7546                           
  7547                           ;MachineConfig.c: 64: T1CON = 0b10110000;
  7548  005758  0EB0               	movlw	176
  7549  00575A  6ECD               	movwf	4045,c	;volatile
  7550                           
  7551                           ;MachineConfig.c: 65: T2CON = 0b01111011;
  7552  00575C  0E7B               	movlw	123
  7553  00575E  6ECA               	movwf	4042,c	;volatile
  7554                           
  7555                           ;MachineConfig.c: 66: PR2 = 0x22;
  7556  005760  0E22               	movlw	34
  7557  005762  6ECB               	movwf	4043,c	;volatile
  7558                           
  7559                           ;MachineConfig.c: 67: T3CON = 0b10110000;
  7560  005764  0EB0               	movlw	176
  7561  005766  6EB1               	movwf	4017,c	;volatile
  7562                           
  7563                           ;MachineConfig.c: 68: PEIE = 1;
  7564  005768  8CF2               	bsf	intcon,6,c	;volatile
  7565                           
  7566                           ;MachineConfig.c: 69: ADIE = 0;
  7567  00576A  9C9D               	bcf	3997,6,c	;volatile
  7568                           
  7569                           ;MachineConfig.c: 70: (INTCONbits.GIE = 0);
  7570  00576C  9EF2               	bcf	intcon,7,c	;volatile
  7571  00576E  0012               	return		;funcret
  7572  005770                     __end_of_machineConfig:
  7573                           	opt stack 0
  7574                           tblptru	equ	0xFF8
  7575                           tblptrh	equ	0xFF7
  7576                           tblptrl	equ	0xFF6
  7577                           tablat	equ	0xFF5
  7578                           prodh	equ	0xFF4
  7579                           prodl	equ	0xFF3
  7580                           intcon	equ	0xFF2
  7581                           intcon2	equ	0xFF1
  7582                           intcon3	equ	0xFF0
  7583                           postinc0	equ	0xFEE
  7584                           wreg	equ	0xFE8
  7585                           postdec1	equ	0xFE5
  7586                           fsr1l	equ	0xFE1
  7587                           indf2	equ	0xFDF
  7588                           postinc2	equ	0xFDE
  7589                           postdec2	equ	0xFDD
  7590                           fsr2h	equ	0xFDA
  7591                           fsr2l	equ	0xFD9
  7592                           status	equ	0xFD8
  7593                           
  7594 ;; *************** function _logRun *****************
  7595 ;; Defined at:
  7596 ;;		line 88 in file "EEPROM.c"
  7597 ;; Parameters:    Size  Location     Type
  7598 ;;		None
  7599 ;; Auto vars:     Size  Location     Type
  7600 ;;  byte_i          1   53[BANK0 ] unsigned char 
  7601 ;;  i               2   55[BANK0 ] int 
  7602 ;;  num             1   49[BANK0 ] unsigned char 
  7603 ;;  addr            2   57[BANK0 ] unsigned short 
  7604 ;;  byte11          1   54[BANK0 ] unsigned char 
  7605 ;;  byte3           1   52[BANK0 ] unsigned char 
  7606 ;;  byte2           1   51[BANK0 ] unsigned char 
  7607 ;;  byte1           1   50[BANK0 ] unsigned char 
  7608 ;; Return value:  Size  Location     Type
  7609 ;;                  1    wreg      void 
  7610 ;; Registers used:
  7611 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7612 ;; Tracked objects:
  7613 ;;		On entry : 0/0
  7614 ;;		On exit  : 0/0
  7615 ;;		Unchanged: 0/0
  7616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7618 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7620 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7621 ;;Total ram usage:       10 bytes
  7622 ;; Hardware stack levels used:    1
  7623 ;; Hardware stack levels required when called:   11
  7624 ;; This function calls:
  7625 ;;		_EEPROM_read
  7626 ;;		_EEPROM_write
  7627 ;; This function is called by:
  7628 ;;		_main
  7629 ;; This function uses a non-reentrant model
  7630 ;;
  7631                           
  7632                           	psect	text16
  7633  004316                     __ptext16:
  7634                           	opt stack 0
  7635  004316                     _logRun:
  7636                           	opt stack 19
  7637                           
  7638                           ;EEPROM.c: 101: sel = EEPROM_read(0);
  7639                           
  7640                           ;incstack = 0
  7641  004316  0E00               	movlw	0
  7642  004318  0100               	movlb	0	; () banked
  7643  00431A  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  7644  00431C  0E00               	movlw	0
  7645  00431E  6F80               	movwf	EEPROM_read@address& (0+255),b
  7646  004320  EC30  F030         	call	_EEPROM_read	;wreg free
  7647  004324  0100               	movlb	0	; () banked
  7648  004326  6FFD               	movwf	_sel& (0+255),b
  7649                           
  7650                           ; BSR set to: 0
  7651                           ;EEPROM.c: 102: unsigned short addr = 1 + 11 * sel;
  7652  004328  0100               	movlb	0	; () banked
  7653  00432A  51FD               	movf	_sel& (0+255),w,b
  7654  00432C  0D0B               	mullw	11
  7655  00432E  0E01               	movlw	1
  7656  004330  24F3               	addwf	prodl,w,c
  7657  004332  0100               	movlb	0	; () banked
  7658  004334  6FB9               	movwf	logRun@addr& (0+255),b
  7659  004336  0E00               	movlw	0
  7660  004338  20F4               	addwfc	prodh,w,c
  7661  00433A  0100               	movlb	0	; () banked
  7662  00433C  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  7663                           
  7664                           ; BSR set to: 0
  7665                           ;EEPROM.c: 105: if (sel < 3){
  7666  00433E  0E03               	movlw	3
  7667  004340  0100               	movlb	0	; () banked
  7668  004342  61FD               	cpfslt	_sel& (0+255),b
  7669  004344  D00E               	goto	l10295
  7670                           
  7671                           ; BSR set to: 0
  7672                           ;EEPROM.c: 106: unsigned char num = sel+1;
  7673  004346  0100               	movlb	0	; () banked
  7674  004348  29FD               	incf	_sel& (0+255),w,b
  7675  00434A  0100               	movlb	0	; () banked
  7676  00434C  6FB1               	movwf	logRun@num& (0+255),b
  7677                           
  7678                           ; BSR set to: 0
  7679                           ;EEPROM.c: 107: EEPROM_write(0, num);
  7680  00434E  0E00               	movlw	0
  7681  004350  0100               	movlb	0	; () banked
  7682  004352  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7683  004354  0E00               	movlw	0
  7684  004356  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7685  004358  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  7686  00435C  EC48  F024         	call	_EEPROM_write	;wreg free
  7687                           
  7688                           ;EEPROM.c: 108: }
  7689  004360  D00A               	goto	l10297
  7690  004362                     l10295:
  7691                           
  7692                           ;EEPROM.c: 109: else{
  7693                           ;EEPROM.c: 110: EEPROM_write(0, 0);
  7694  004362  0E00               	movlw	0
  7695  004364  0100               	movlb	0	; () banked
  7696  004366  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7697  004368  0E00               	movlw	0
  7698  00436A  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7699  00436C  0E00               	movlw	0
  7700  00436E  0100               	movlb	0	; () banked
  7701  004370  6FAD               	movwf	EEPROM_write@data& (0+255),b
  7702  004372  EC48  F024         	call	_EEPROM_write	;wreg free
  7703  004376                     l10297:
  7704                           
  7705                           ;EEPROM.c: 111: }
  7706                           ;EEPROM.c: 114: unsigned char byte1 = 0b10000000 | count_total;
  7707  004376  0100               	movlb	0	; () banked
  7708  004378  51FE               	movf	_count_total& (0+255),w,b
  7709  00437A  0980               	iorlw	128
  7710  00437C  0100               	movlb	0	; () banked
  7711  00437E  6FB2               	movwf	logRun@byte1& (0+255),b
  7712                           
  7713                           ; BSR set to: 0
  7714                           ;EEPROM.c: 115: EEPROM_write(addr, byte1);
  7715  004380  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7716  004384  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7717  004388  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  7718  00438C  EC48  F024         	call	_EEPROM_write	;wreg free
  7719                           
  7720                           ;EEPROM.c: 116: addr++;
  7721  004390  0100               	movlb	0	; () banked
  7722  004392  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7723  004394  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7724                           
  7725                           ; BSR set to: 0
  7726                           ;EEPROM.c: 119: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  7727  004396  0101               	movlb	1	; () banked
  7728  004398  3927               	swapf	_count_pop_no_tab& (0+255),w,b
  7729  00439A  0BF0               	andlw	240
  7730  00439C  0101               	movlb	1	; () banked
  7731  00439E  1129               	iorwf	_count_pop_w_tab& (0+255),w,b
  7732  0043A0  0100               	movlb	0	; () banked
  7733  0043A2  6FB3               	movwf	logRun@byte2& (0+255),b
  7734                           
  7735                           ; BSR set to: 0
  7736                           ;EEPROM.c: 120: EEPROM_write(addr, byte2);
  7737  0043A4  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7738  0043A8  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7739  0043AC  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  7740  0043B0  EC48  F024         	call	_EEPROM_write	;wreg free
  7741                           
  7742                           ;EEPROM.c: 121: addr++;
  7743  0043B4  0100               	movlb	0	; () banked
  7744  0043B6  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7745  0043B8  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7746                           
  7747                           ; BSR set to: 0
  7748                           ;EEPROM.c: 122: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  7749  0043BA  0101               	movlb	1	; () banked
  7750  0043BC  3925               	swapf	_count_can_w_lab& (0+255),w,b
  7751  0043BE  0BF0               	andlw	240
  7752  0043C0  0101               	movlb	1	; () banked
  7753  0043C2  1123               	iorwf	_count_can_no_lab& (0+255),w,b
  7754  0043C4  0100               	movlb	0	; () banked
  7755  0043C6  6FB4               	movwf	logRun@byte3& (0+255),b
  7756                           
  7757                           ; BSR set to: 0
  7758                           ;EEPROM.c: 123: EEPROM_write(addr, byte3);
  7759  0043C8  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7760  0043CC  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7761  0043D0  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  7762  0043D4  EC48  F024         	call	_EEPROM_write	;wreg free
  7763                           
  7764                           ;EEPROM.c: 124: addr++;
  7765  0043D8  0100               	movlb	0	; () banked
  7766  0043DA  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7767  0043DC  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7768                           
  7769                           ; BSR set to: 0
  7770                           ;EEPROM.c: 127: for(int i = 0; i < 7; i++){
  7771  0043DE  0E00               	movlw	0
  7772  0043E0  0100               	movlb	0	; () banked
  7773  0043E2  6FB8               	movwf	(logRun@i+1)& (0+255),b
  7774  0043E4  0E00               	movlw	0
  7775  0043E6  6FB7               	movwf	logRun@i& (0+255),b
  7776                           
  7777                           ; BSR set to: 0
  7778  0043E8  0100               	movlb	0	; () banked
  7779  0043EA  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7780  0043EC  D008               	goto	l10321
  7781  0043EE  0100               	movlb	0	; () banked
  7782  0043F0  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7783  0043F2  E128               	bnz	l1192
  7784  0043F4  0E07               	movlw	7
  7785  0043F6  0100               	movlb	0	; () banked
  7786  0043F8  5DB7               	subwf	logRun@i& (0+255),w,b
  7787  0043FA  B0D8               	btfsc	status,0,c
  7788  0043FC  D023               	goto	l1192
  7789  0043FE                     l10321:
  7790                           
  7791                           ; BSR set to: 0
  7792                           ;EEPROM.c: 128: unsigned char byte_i = startTime[i];
  7793  0043FE  90D8               	bcf	status,0,c
  7794  004400  0100               	movlb	0	; () banked
  7795  004402  35B7               	rlcf	logRun@i& (0+255),w,b
  7796  004404  6ED9               	movwf	fsr2l,c
  7797  004406  0100               	movlb	0	; () banked
  7798  004408  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  7799  00440A  6EDA               	movwf	fsr2h,c
  7800  00440C  0E0E               	movlw	low _startTime
  7801  00440E  26D9               	addwf	fsr2l,f,c
  7802  004410  0E01               	movlw	high _startTime
  7803  004412  22DA               	addwfc	fsr2h,f,c
  7804  004414  50DF               	movf	indf2,w,c
  7805  004416  0100               	movlb	0	; () banked
  7806  004418  6FB5               	movwf	logRun@byte_i& (0+255),b
  7807                           
  7808                           ; BSR set to: 0
  7809                           ;EEPROM.c: 129: EEPROM_write(addr, byte_i);
  7810  00441A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7811  00441E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7812  004422  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  7813  004426  EC48  F024         	call	_EEPROM_write	;wreg free
  7814                           
  7815                           ;EEPROM.c: 130: addr++;
  7816  00442A  0100               	movlb	0	; () banked
  7817  00442C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7818  00442E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7819                           
  7820                           ; BSR set to: 0
  7821  004430  0100               	movlb	0	; () banked
  7822  004432  4BB7               	infsnz	logRun@i& (0+255),f,b
  7823  004434  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  7824                           
  7825                           ; BSR set to: 0
  7826  004436  0100               	movlb	0	; () banked
  7827  004438  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7828  00443A  D7E1               	goto	l10321
  7829  00443C  0100               	movlb	0	; () banked
  7830  00443E  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7831  004440  E101               	bnz	u10340
  7832  004442  D7D8               	goto	L9
  7833  004444                     u10340:
  7834  004444                     l1192:
  7835                           
  7836                           ; BSR set to: 0
  7837                           ;EEPROM.c: 131: }
  7838                           ;EEPROM.c: 134: unsigned char byte11 = total_time;
  7839  004444  C0FA  F0B6         	movff	_total_time,logRun@byte11
  7840                           
  7841                           ; BSR set to: 0
  7842                           ;EEPROM.c: 135: EEPROM_write(addr, byte11);
  7843  004448  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7844  00444C  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7845  004450  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  7846  004454  EC48  F024         	call	_EEPROM_write	;wreg free
  7847  004458  0012               	return		;funcret
  7848  00445A                     __end_of_logRun:
  7849                           	opt stack 0
  7850                           tblptru	equ	0xFF8
  7851                           tblptrh	equ	0xFF7
  7852                           tblptrl	equ	0xFF6
  7853                           tablat	equ	0xFF5
  7854                           prodh	equ	0xFF4
  7855                           prodl	equ	0xFF3
  7856                           intcon	equ	0xFF2
  7857                           intcon2	equ	0xFF1
  7858                           intcon3	equ	0xFF0
  7859                           postinc0	equ	0xFEE
  7860                           wreg	equ	0xFE8
  7861                           postdec1	equ	0xFE5
  7862                           fsr1l	equ	0xFE1
  7863                           indf2	equ	0xFDF
  7864                           postinc2	equ	0xFDE
  7865                           postdec2	equ	0xFDD
  7866                           fsr2h	equ	0xFDA
  7867                           fsr2l	equ	0xFD9
  7868                           status	equ	0xFD8
  7869                           
  7870 ;; *************** function _initUI *****************
  7871 ;; Defined at:
  7872 ;;		line 62 in file "UI.c"
  7873 ;; Parameters:    Size  Location     Type
  7874 ;;		None
  7875 ;; Auto vars:     Size  Location     Type
  7876 ;;		None
  7877 ;; Return value:  Size  Location     Type
  7878 ;;                  1    wreg      void 
  7879 ;; Registers used:
  7880 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7881 ;; Tracked objects:
  7882 ;;		On entry : 0/0
  7883 ;;		On exit  : 0/0
  7884 ;;		Unchanged: 0/0
  7885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7889 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7890 ;;Total ram usage:        0 bytes
  7891 ;; Hardware stack levels used:    1
  7892 ;; Hardware stack levels required when called:   12
  7893 ;; This function calls:
  7894 ;;		_change_state_to_menu_start
  7895 ;;		_loadRTC
  7896 ;; This function is called by:
  7897 ;;		_main
  7898 ;; This function uses a non-reentrant model
  7899 ;;
  7900                           
  7901                           	psect	text17
  7902  005C64                     __ptext17:
  7903                           	opt stack 0
  7904  005C64                     _initUI:
  7905                           	opt stack 18
  7906                           
  7907                           ;UI.c: 63: (INTCONbits.GIE = 1);
  7908                           
  7909                           ;incstack = 0
  7910  005C64  8EF2               	bsf	intcon,7,c	;volatile
  7911                           
  7912                           ;UI.c: 64: machine_state = UI_state;
  7913  005C66  0E00               	movlw	0
  7914  005C68  0100               	movlb	0	; () banked
  7915  005C6A  6FFC               	movwf	_machine_state& (0+255),b
  7916                           
  7917                           ;UI.c: 65: logstate = 0;
  7918  005C6C  0E00               	movlw	0
  7919  005C6E  0100               	movlb	0	; () banked
  7920  005C70  6FF9               	movwf	(_logstate+1)& (0+255),b
  7921  005C72  0E00               	movlw	0
  7922  005C74  6FF8               	movwf	_logstate& (0+255),b
  7923                           
  7924                           ; BSR set to: 0
  7925                           ;UI.c: 67: if(RTCflag){
  7926  005C76  0100               	movlb	0	; () banked
  7927  005C78  51E6               	movf	_RTCflag& (0+255),w,b
  7928  005C7A  0100               	movlb	0	; () banked
  7929  005C7C  11E7               	iorwf	(_RTCflag+1)& (0+255),w,b
  7930  005C7E  A4D8               	btfss	status,2,c
  7931                           
  7932                           ; BSR set to: 0
  7933                           ;UI.c: 68: loadRTC();
  7934  005C80  ECE8  F028         	call	_loadRTC	;wreg free
  7935                           
  7936                           ;UI.c: 69: }
  7937                           ;UI.c: 71: change_state_to_menu_start();
  7938  005C84  EC50  F02F         	call	_change_state_to_menu_start	;wreg free
  7939                           
  7940                           ;UI.c: 72: firstboot = 1;
  7941  005C88  0E00               	movlw	0
  7942  005C8A  0101               	movlb	1	; () banked
  7943  005C8C  6F3C               	movwf	(_firstboot+1)& (0+255),b
  7944  005C8E  0E01               	movlw	1
  7945  005C90  6F3B               	movwf	_firstboot& (0+255),b
  7946                           
  7947                           ; BSR set to: 1
  7948  005C92  0012               	return		;funcret
  7949  005C94                     __end_of_initUI:
  7950                           	opt stack 0
  7951                           tblptru	equ	0xFF8
  7952                           tblptrh	equ	0xFF7
  7953                           tblptrl	equ	0xFF6
  7954                           tablat	equ	0xFF5
  7955                           prodh	equ	0xFF4
  7956                           prodl	equ	0xFF3
  7957                           intcon	equ	0xFF2
  7958                           intcon2	equ	0xFF1
  7959                           intcon3	equ	0xFF0
  7960                           postinc0	equ	0xFEE
  7961                           wreg	equ	0xFE8
  7962                           postdec1	equ	0xFE5
  7963                           fsr1l	equ	0xFE1
  7964                           indf2	equ	0xFDF
  7965                           postinc2	equ	0xFDE
  7966                           postdec2	equ	0xFDD
  7967                           fsr2h	equ	0xFDA
  7968                           fsr2l	equ	0xFD9
  7969                           status	equ	0xFD8
  7970                           
  7971 ;; *************** function _loadRTC *****************
  7972 ;; Defined at:
  7973 ;;		line 28 in file "RTC.c"
  7974 ;; Parameters:    Size  Location     Type
  7975 ;;		None
  7976 ;; Auto vars:     Size  Location     Type
  7977 ;;  i               2   22[BANK0 ] int 
  7978 ;; Return value:  Size  Location     Type
  7979 ;;                  1    wreg      void 
  7980 ;; Registers used:
  7981 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7982 ;; Tracked objects:
  7983 ;;		On entry : 0/0
  7984 ;;		On exit  : 0/0
  7985 ;;		Unchanged: 0/0
  7986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7988 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7989 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7990 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7991 ;;Total ram usage:        3 bytes
  7992 ;; Hardware stack levels used:    1
  7993 ;; Hardware stack levels required when called:    9
  7994 ;; This function calls:
  7995 ;;		_I2C_Master_Init
  7996 ;;		_I2C_Master_Start
  7997 ;;		_I2C_Master_Stop
  7998 ;;		_I2C_Master_Write
  7999 ;; This function is called by:
  8000 ;;		_initUI
  8001 ;; This function uses a non-reentrant model
  8002 ;;
  8003                           
  8004                           	psect	text18
  8005  0051D0                     __ptext18:
  8006                           	opt stack 0
  8007  0051D0                     _loadRTC:
  8008                           	opt stack 20
  8009                           
  8010                           ;RTC.c: 30: I2C_Master_Init(10000);
  8011                           
  8012                           ; BSR set to: 1
  8013                           ;incstack = 0
  8014  0051D0  0E10               	movlw	16
  8015  0051D2  0100               	movlb	0	; () banked
  8016  0051D4  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  8017  0051D6  0E27               	movlw	39
  8018  0051D8  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  8019  0051DA  0E00               	movlw	0
  8020  0051DC  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  8021  0051DE  0E00               	movlw	0
  8022  0051E0  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  8023  0051E2  ECE9  F02B         	call	_I2C_Master_Init	;wreg free
  8024                           
  8025                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  8026  0051E6  9EF2               	bcf	intcon,7,c	;volatile
  8027                           
  8028                           ;RTC.c: 34: I2C_Master_Start();
  8029  0051E8  EC93  F030         	call	_I2C_Master_Start	;wreg free
  8030                           
  8031                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  8032  0051EC  0E00               	movlw	0
  8033  0051EE  0100               	movlb	0	; () banked
  8034  0051F0  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8035  0051F2  0ED0               	movlw	208
  8036  0051F4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8037  0051F6  EC81  F030         	call	_I2C_Master_Write	;wreg free
  8038                           
  8039                           ;RTC.c: 36: I2C_Master_Write(0x00);
  8040  0051FA  0E00               	movlw	0
  8041  0051FC  0100               	movlb	0	; () banked
  8042  0051FE  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8043  005200  0E00               	movlw	0
  8044  005202  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8045  005204  EC81  F030         	call	_I2C_Master_Write	;wreg free
  8046                           
  8047                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  8048  005208  0E00               	movlw	0
  8049  00520A  0100               	movlb	0	; () banked
  8050  00520C  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  8051  00520E  0E00               	movlw	0
  8052  005210  6F96               	movwf	loadRTC@i& (0+255),b
  8053  005212                     l7897:
  8054                           
  8055                           ; BSR set to: 0
  8056  005212  0100               	movlb	0	; () banked
  8057  005214  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  8058  005216  D008               	goto	l7901
  8059  005218  0100               	movlb	0	; () banked
  8060  00521A  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  8061  00521C  E11B               	bnz	l7907
  8062  00521E  0E07               	movlw	7
  8063  005220  0100               	movlb	0	; () banked
  8064  005222  5D96               	subwf	loadRTC@i& (0+255),w,b
  8065  005224  B0D8               	btfsc	status,0,c
  8066  005226  D016               	goto	l7907
  8067  005228                     l7901:
  8068                           
  8069                           ; BSR set to: 0
  8070                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  8071  005228  0E1C               	movlw	low _time
  8072  00522A  0100               	movlb	0	; () banked
  8073  00522C  2596               	addwf	loadRTC@i& (0+255),w,b
  8074  00522E  6ED9               	movwf	fsr2l,c
  8075  005230  0E01               	movlw	high _time
  8076  005232  0100               	movlb	0	; () banked
  8077  005234  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  8078  005236  6EDA               	movwf	fsr2h,c
  8079  005238  50DF               	movf	indf2,w,c
  8080  00523A  0100               	movlb	0	; () banked
  8081  00523C  6F95               	movwf	??_loadRTC& (0+255),b
  8082  00523E  0100               	movlb	0	; () banked
  8083  005240  5195               	movf	??_loadRTC& (0+255),w,b
  8084  005242  0100               	movlb	0	; () banked
  8085  005244  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8086  005246  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  8087  005248  EC81  F030         	call	_I2C_Master_Write	;wreg free
  8088  00524C  0100               	movlb	0	; () banked
  8089  00524E  4B96               	infsnz	loadRTC@i& (0+255),f,b
  8090  005250  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  8091  005252  D7DF               	goto	l7897
  8092  005254                     l7907:
  8093                           
  8094                           ; BSR set to: 0
  8095                           ;RTC.c: 39: }
  8096                           ;RTC.c: 40: I2C_Master_Stop();
  8097  005254  EC8F  F030         	call	_I2C_Master_Stop	;wreg free
  8098                           
  8099                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  8100  005258  8EF2               	bsf	intcon,7,c	;volatile
  8101  00525A  0012               	return		;funcret
  8102  00525C                     __end_of_loadRTC:
  8103                           	opt stack 0
  8104                           tblptru	equ	0xFF8
  8105                           tblptrh	equ	0xFF7
  8106                           tblptrl	equ	0xFF6
  8107                           tablat	equ	0xFF5
  8108                           prodh	equ	0xFF4
  8109                           prodl	equ	0xFF3
  8110                           intcon	equ	0xFF2
  8111                           intcon2	equ	0xFF1
  8112                           intcon3	equ	0xFF0
  8113                           postinc0	equ	0xFEE
  8114                           wreg	equ	0xFE8
  8115                           postdec1	equ	0xFE5
  8116                           fsr1l	equ	0xFE1
  8117                           indf2	equ	0xFDF
  8118                           postinc2	equ	0xFDE
  8119                           postdec2	equ	0xFDD
  8120                           fsr2h	equ	0xFDA
  8121                           fsr2l	equ	0xFD9
  8122                           status	equ	0xFD8
  8123                           
  8124 ;; *************** function _I2C_Master_Init *****************
  8125 ;; Defined at:
  8126 ;;		line 15 in file "I2C.c"
  8127 ;; Parameters:    Size  Location     Type
  8128 ;;  c               4   13[BANK0 ] const unsigned long 
  8129 ;; Auto vars:     Size  Location     Type
  8130 ;;		None
  8131 ;; Return value:  Size  Location     Type
  8132 ;;                  1    wreg      void 
  8133 ;; Registers used:
  8134 ;;		wreg, status,2, status,0, cstack
  8135 ;; Tracked objects:
  8136 ;;		On entry : 0/0
  8137 ;;		On exit  : 0/0
  8138 ;;		Unchanged: 0/0
  8139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8140 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8142 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8143 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8144 ;;Total ram usage:        8 bytes
  8145 ;; Hardware stack levels used:    1
  8146 ;; Hardware stack levels required when called:    8
  8147 ;; This function calls:
  8148 ;;		___lldiv
  8149 ;; This function is called by:
  8150 ;;		_main
  8151 ;;		_loadRTC
  8152 ;; This function uses a non-reentrant model
  8153 ;;
  8154                           
  8155                           	psect	text19
  8156  0057D2                     __ptext19:
  8157                           	opt stack 0
  8158  0057D2                     _I2C_Master_Init:
  8159                           	opt stack 20
  8160                           
  8161                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  8162                           
  8163                           ;incstack = 0
  8164  0057D2  0E00               	movlw	0
  8165  0057D4  6EC7               	movwf	4039,c	;volatile
  8166                           
  8167                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  8168  0057D6  0E28               	movlw	40
  8169  0057D8  6EC6               	movwf	4038,c	;volatile
  8170                           
  8171                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  8172  0057DA  0E00               	movlw	0
  8173  0057DC  6EC5               	movwf	4037,c	;volatile
  8174                           
  8175                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  8176  0057DE  0E00               	movlw	0
  8177  0057E0  0100               	movlb	0	; () banked
  8178  0057E2  6F80               	movwf	___lldiv@dividend& (0+255),b
  8179  0057E4  0E48               	movlw	72
  8180  0057E6  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  8181  0057E8  0EE8               	movlw	232
  8182  0057EA  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  8183  0057EC  0E01               	movlw	1
  8184  0057EE  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  8185  0057F0  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  8186  0057F4  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  8187  0057F8  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  8188  0057FC  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  8189  005800  0E02               	movlw	2
  8190  005802                     u6495:
  8191  005802  90D8               	bcf	status,0,c
  8192  005804  0100               	movlb	0	; () banked
  8193  005806  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  8194  005808  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  8195  00580A  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  8196  00580C  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  8197  00580E  2EE8               	decfsz	wreg,f,c
  8198  005810  D7F8               	goto	u6495
  8199  005812  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  8200  005816  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  8201  00581A  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  8202  00581E  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  8203  005822  EC98  F027         	call	___lldiv	;wreg free
  8204  005826  0100               	movlb	0	; () banked
  8205  005828  0580               	decf	?___lldiv& (0+255),w,b
  8206  00582A  6EC8               	movwf	4040,c	;volatile
  8207                           
  8208                           ; BSR set to: 0
  8209                           ;I2C.c: 22: TRISC3 = 1;
  8210  00582C  8694               	bsf	3988,3,c	;volatile
  8211                           
  8212                           ; BSR set to: 0
  8213                           ;I2C.c: 23: TRISC4 = 1;
  8214  00582E  8894               	bsf	3988,4,c	;volatile
  8215                           
  8216                           ; BSR set to: 0
  8217  005830  0012               	return		;funcret
  8218  005832                     __end_of_I2C_Master_Init:
  8219                           	opt stack 0
  8220                           tblptru	equ	0xFF8
  8221                           tblptrh	equ	0xFF7
  8222                           tblptrl	equ	0xFF6
  8223                           tablat	equ	0xFF5
  8224                           prodh	equ	0xFF4
  8225                           prodl	equ	0xFF3
  8226                           intcon	equ	0xFF2
  8227                           intcon2	equ	0xFF1
  8228                           intcon3	equ	0xFF0
  8229                           postinc0	equ	0xFEE
  8230                           wreg	equ	0xFE8
  8231                           postdec1	equ	0xFE5
  8232                           fsr1l	equ	0xFE1
  8233                           indf2	equ	0xFDF
  8234                           postinc2	equ	0xFDE
  8235                           postdec2	equ	0xFDD
  8236                           fsr2h	equ	0xFDA
  8237                           fsr2l	equ	0xFD9
  8238                           status	equ	0xFD8
  8239                           
  8240 ;; *************** function ___lldiv *****************
  8241 ;; Defined at:
  8242 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  8243 ;; Parameters:    Size  Location     Type
  8244 ;;  dividend        4    0[BANK0 ] unsigned long 
  8245 ;;  divisor         4    4[BANK0 ] unsigned long 
  8246 ;; Auto vars:     Size  Location     Type
  8247 ;;  quotient        4    8[BANK0 ] unsigned long 
  8248 ;;  counter         1   12[BANK0 ] unsigned char 
  8249 ;; Return value:  Size  Location     Type
  8250 ;;                  4    0[BANK0 ] unsigned long 
  8251 ;; Registers used:
  8252 ;;		wreg, status,2, status,0
  8253 ;; Tracked objects:
  8254 ;;		On entry : 0/0
  8255 ;;		On exit  : 0/0
  8256 ;;		Unchanged: 0/0
  8257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8258 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8259 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8261 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8262 ;;Total ram usage:       13 bytes
  8263 ;; Hardware stack levels used:    1
  8264 ;; Hardware stack levels required when called:    7
  8265 ;; This function calls:
  8266 ;;		Nothing
  8267 ;; This function is called by:
  8268 ;;		_I2C_Master_Init
  8269 ;; This function uses a non-reentrant model
  8270 ;;
  8271                           
  8272                           	psect	text20
  8273  004F30                     __ptext20:
  8274                           	opt stack 0
  8275  004F30                     ___lldiv:
  8276                           	opt stack 20
  8277                           
  8278                           ; BSR set to: 0
  8279                           ;incstack = 0
  8280  004F30  0E00               	movlw	0
  8281  004F32  0100               	movlb	0	; () banked
  8282  004F34  6F88               	movwf	___lldiv@quotient& (0+255),b
  8283  004F36  0E00               	movlw	0
  8284  004F38  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  8285  004F3A  0E00               	movlw	0
  8286  004F3C  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  8287  004F3E  0E00               	movlw	0
  8288  004F40  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  8289                           
  8290                           ; BSR set to: 0
  8291  004F42  0100               	movlb	0	; () banked
  8292  004F44  5184               	movf	___lldiv@divisor& (0+255),w,b
  8293  004F46  0100               	movlb	0	; () banked
  8294  004F48  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  8295  004F4A  0100               	movlb	0	; () banked
  8296  004F4C  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  8297  004F4E  0100               	movlb	0	; () banked
  8298  004F50  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  8299  004F52  B4D8               	btfsc	status,2,c
  8300  004F54  D042               	goto	l1985
  8301                           
  8302                           ; BSR set to: 0
  8303  004F56  0E01               	movlw	1
  8304  004F58  0100               	movlb	0	; () banked
  8305  004F5A  6F8C               	movwf	___lldiv@counter& (0+255),b
  8306  004F5C  D008               	goto	l7221
  8307  004F5E                     l7219:
  8308                           
  8309                           ; BSR set to: 0
  8310  004F5E  0100               	movlb	0	; () banked
  8311  004F60  90D8               	bcf	status,0,c
  8312  004F62  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  8313  004F64  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  8314  004F66  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  8315  004F68  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  8316  004F6A  0100               	movlb	0	; () banked
  8317  004F6C  2B8C               	incf	___lldiv@counter& (0+255),f,b
  8318  004F6E                     l7221:
  8319                           
  8320                           ; BSR set to: 0
  8321  004F6E  0100               	movlb	0	; () banked
  8322  004F70  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  8323  004F72  D7F5               	goto	l7219
  8324  004F74                     l7223:
  8325                           
  8326                           ; BSR set to: 0
  8327  004F74  0100               	movlb	0	; () banked
  8328  004F76  90D8               	bcf	status,0,c
  8329  004F78  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  8330  004F7A  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  8331  004F7C  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  8332  004F7E  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  8333                           
  8334                           ; BSR set to: 0
  8335  004F80  0100               	movlb	0	; () banked
  8336  004F82  5184               	movf	___lldiv@divisor& (0+255),w,b
  8337  004F84  0100               	movlb	0	; () banked
  8338  004F86  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  8339  004F88  0100               	movlb	0	; () banked
  8340  004F8A  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8341  004F8C  0100               	movlb	0	; () banked
  8342  004F8E  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  8343  004F90  0100               	movlb	0	; () banked
  8344  004F92  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8345  004F94  0100               	movlb	0	; () banked
  8346  004F96  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  8347  004F98  0100               	movlb	0	; () banked
  8348  004F9A  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8349  004F9C  0100               	movlb	0	; () banked
  8350  004F9E  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  8351  004FA0  A0D8               	btfss	status,0,c
  8352  004FA2  D012               	goto	l7231
  8353                           
  8354                           ; BSR set to: 0
  8355  004FA4  0100               	movlb	0	; () banked
  8356  004FA6  5184               	movf	___lldiv@divisor& (0+255),w,b
  8357  004FA8  0100               	movlb	0	; () banked
  8358  004FAA  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  8359  004FAC  0100               	movlb	0	; () banked
  8360  004FAE  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8361  004FB0  0100               	movlb	0	; () banked
  8362  004FB2  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  8363  004FB4  0100               	movlb	0	; () banked
  8364  004FB6  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8365  004FB8  0100               	movlb	0	; () banked
  8366  004FBA  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  8367  004FBC  0100               	movlb	0	; () banked
  8368  004FBE  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8369  004FC0  0100               	movlb	0	; () banked
  8370  004FC2  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  8371                           
  8372                           ; BSR set to: 0
  8373  004FC4  0100               	movlb	0	; () banked
  8374  004FC6  8188               	bsf	___lldiv@quotient& (0+255),0,b
  8375  004FC8                     l7231:
  8376                           
  8377                           ; BSR set to: 0
  8378  004FC8  0100               	movlb	0	; () banked
  8379  004FCA  90D8               	bcf	status,0,c
  8380  004FCC  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  8381  004FCE  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  8382  004FD0  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  8383  004FD2  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  8384                           
  8385                           ; BSR set to: 0
  8386  004FD4  0100               	movlb	0	; () banked
  8387  004FD6  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  8388  004FD8  D7CD               	goto	l7223
  8389  004FDA                     l1985:
  8390                           
  8391                           ; BSR set to: 0
  8392  004FDA  C088  F080         	movff	___lldiv@quotient,?___lldiv
  8393  004FDE  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  8394  004FE2  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  8395  004FE6  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  8396                           
  8397                           ; BSR set to: 0
  8398  004FEA  0012               	return		;funcret
  8399  004FEC                     __end_of___lldiv:
  8400                           	opt stack 0
  8401                           tblptru	equ	0xFF8
  8402                           tblptrh	equ	0xFF7
  8403                           tblptrl	equ	0xFF6
  8404                           tablat	equ	0xFF5
  8405                           prodh	equ	0xFF4
  8406                           prodl	equ	0xFF3
  8407                           intcon	equ	0xFF2
  8408                           intcon2	equ	0xFF1
  8409                           intcon3	equ	0xFF0
  8410                           postinc0	equ	0xFEE
  8411                           wreg	equ	0xFE8
  8412                           postdec1	equ	0xFE5
  8413                           fsr1l	equ	0xFE1
  8414                           indf2	equ	0xFDF
  8415                           postinc2	equ	0xFDE
  8416                           postdec2	equ	0xFDD
  8417                           fsr2h	equ	0xFDA
  8418                           fsr2l	equ	0xFD9
  8419                           status	equ	0xFD8
  8420                           
  8421 ;; *************** function _change_state_to_menu_start *****************
  8422 ;; Defined at:
  8423 ;;		line 477 in file "UI.c"
  8424 ;; Parameters:    Size  Location     Type
  8425 ;;		None
  8426 ;; Auto vars:     Size  Location     Type
  8427 ;;		None
  8428 ;; Return value:  Size  Location     Type
  8429 ;;                  1    wreg      void 
  8430 ;; Registers used:
  8431 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8432 ;; Tracked objects:
  8433 ;;		On entry : 0/0
  8434 ;;		On exit  : 0/0
  8435 ;;		Unchanged: 0/0
  8436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8441 ;;Total ram usage:        0 bytes
  8442 ;; Hardware stack levels used:    1
  8443 ;; Hardware stack levels required when called:   11
  8444 ;; This function calls:
  8445 ;;		_lcdInst
  8446 ;;		_printRTC
  8447 ;;		_printf
  8448 ;; This function is called by:
  8449 ;;		_initUI
  8450 ;; This function uses a non-reentrant model
  8451 ;;
  8452                           
  8453                           	psect	text21
  8454  005EA0                     __ptext21:
  8455                           	opt stack 0
  8456  005EA0                     _change_state_to_menu_start:
  8457                           	opt stack 18
  8458                           
  8459                           ;UI.c: 478: cur_state = 0;
  8460                           
  8461                           ; BSR set to: 0
  8462                           ;incstack = 0
  8463  005EA0  0E00               	movlw	0
  8464  005EA2  0100               	movlb	0	; () banked
  8465  005EA4  6FE9               	movwf	(_cur_state+1)& (0+255),b
  8466  005EA6  0E00               	movlw	0
  8467  005EA8  6FE8               	movwf	_cur_state& (0+255),b
  8468                           
  8469                           ; BSR set to: 0
  8470                           ;UI.c: 480: lcdInst(0b10000000);;
  8471  005EAA  0E80               	movlw	128
  8472  005EAC  EC6D  F030         	call	_lcdInst
  8473                           
  8474                           ;UI.c: 481: printRTC();
  8475  005EB0  ECF9  F019         	call	_printRTC	;wreg free
  8476                           
  8477                           ;UI.c: 482: lcdInst(0b11000000);;
  8478  005EB4  0EC0               	movlw	192
  8479  005EB6  EC6D  F030         	call	_lcdInst
  8480                           
  8481                           ;UI.c: 483: printf("PUSH TO CONTINUE");
  8482  005EBA  0E06               	movlw	low STR_30
  8483  005EBC  0100               	movlb	0	; () banked
  8484  005EBE  6F8E               	movwf	printf@f& (0+255),b
  8485  005EC0  0EFE               	movlw	high STR_30
  8486  005EC2  0100               	movlb	0	; () banked
  8487  005EC4  6F8F               	movwf	(printf@f+1)& (0+255),b
  8488  005EC6  ECE9  F00E         	call	_printf	;wreg free
  8489  005ECA  0012               	return		;funcret
  8490  005ECC                     __end_of_change_state_to_menu_start:
  8491                           	opt stack 0
  8492                           tblptru	equ	0xFF8
  8493                           tblptrh	equ	0xFF7
  8494                           tblptrl	equ	0xFF6
  8495                           tablat	equ	0xFF5
  8496                           prodh	equ	0xFF4
  8497                           prodl	equ	0xFF3
  8498                           intcon	equ	0xFF2
  8499                           intcon2	equ	0xFF1
  8500                           intcon3	equ	0xFF0
  8501                           postinc0	equ	0xFEE
  8502                           wreg	equ	0xFE8
  8503                           postdec1	equ	0xFE5
  8504                           fsr1l	equ	0xFE1
  8505                           indf2	equ	0xFDF
  8506                           postinc2	equ	0xFDE
  8507                           postdec2	equ	0xFDD
  8508                           fsr2h	equ	0xFDA
  8509                           fsr2l	equ	0xFD9
  8510                           status	equ	0xFD8
  8511                           
  8512 ;; *************** function _initTime *****************
  8513 ;; Defined at:
  8514 ;;		line 17 in file "RTC.c"
  8515 ;; Parameters:    Size  Location     Type
  8516 ;;  s               1    wreg     unsigned char 
  8517 ;;  m               1    0[BANK0 ] unsigned char 
  8518 ;;  h               1    1[BANK0 ] unsigned char 
  8519 ;;  w               1    2[BANK0 ] unsigned char 
  8520 ;;  DD              1    3[BANK0 ] unsigned char 
  8521 ;;  MM              1    4[BANK0 ] unsigned char 
  8522 ;;  YY              1    5[BANK0 ] unsigned char 
  8523 ;; Auto vars:     Size  Location     Type
  8524 ;;  s               1    6[BANK0 ] unsigned char 
  8525 ;; Return value:  Size  Location     Type
  8526 ;;                  1    wreg      void 
  8527 ;; Registers used:
  8528 ;;		wreg
  8529 ;; Tracked objects:
  8530 ;;		On entry : 0/0
  8531 ;;		On exit  : 0/0
  8532 ;;		Unchanged: 0/0
  8533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8534 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8535 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8537 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8538 ;;Total ram usage:        7 bytes
  8539 ;; Hardware stack levels used:    1
  8540 ;; Hardware stack levels required when called:    7
  8541 ;; This function calls:
  8542 ;;		Nothing
  8543 ;; This function is called by:
  8544 ;;		_main
  8545 ;; This function uses a non-reentrant model
  8546 ;;
  8547                           
  8548                           	psect	text22
  8549  006004                     __ptext22:
  8550                           	opt stack 0
  8551  006004                     _initTime:
  8552                           	opt stack 23
  8553                           
  8554                           ;incstack = 0
  8555                           ;initTime@s stored from wreg
  8556  006004  0100               	movlb	0	; () banked
  8557  006006  6F86               	movwf	initTime@s& (0+255),b
  8558                           
  8559                           ;RTC.c: 19: time[0] = s;
  8560  006008  C086  F11C         	movff	initTime@s,_time
  8561                           
  8562                           ;RTC.c: 20: time[1] = m;
  8563  00600C  C080  F11D         	movff	initTime@m,_time+1
  8564                           
  8565                           ;RTC.c: 21: time[2] = h;
  8566  006010  C081  F11E         	movff	initTime@h,_time+2
  8567                           
  8568                           ;RTC.c: 22: time[3] = w;
  8569  006014  C082  F11F         	movff	initTime@w,_time+3
  8570                           
  8571                           ;RTC.c: 23: time[4] = DD;
  8572  006018  C083  F120         	movff	initTime@DD,_time+4
  8573                           
  8574                           ;RTC.c: 24: time[5] = MM;
  8575  00601C  C084  F121         	movff	initTime@MM,_time+5
  8576                           
  8577                           ;RTC.c: 25: time[6] = YY;
  8578  006020  C085  F122         	movff	initTime@YY,_time+6
  8579  006024  0012               	return		;funcret
  8580  006026                     __end_of_initTime:
  8581                           	opt stack 0
  8582                           tblptru	equ	0xFF8
  8583                           tblptrh	equ	0xFF7
  8584                           tblptrl	equ	0xFF6
  8585                           tablat	equ	0xFF5
  8586                           prodh	equ	0xFF4
  8587                           prodl	equ	0xFF3
  8588                           intcon	equ	0xFF2
  8589                           intcon2	equ	0xFF1
  8590                           intcon3	equ	0xFF0
  8591                           postinc0	equ	0xFEE
  8592                           wreg	equ	0xFE8
  8593                           postdec1	equ	0xFE5
  8594                           fsr1l	equ	0xFE1
  8595                           indf2	equ	0xFDF
  8596                           postinc2	equ	0xFDE
  8597                           postdec2	equ	0xFDD
  8598                           fsr2h	equ	0xFDA
  8599                           fsr2l	equ	0xFD9
  8600                           status	equ	0xFD8
  8601                           
  8602 ;; *************** function _initLCD *****************
  8603 ;; Defined at:
  8604 ;;		line 50 in file "lcd.c"
  8605 ;; Parameters:    Size  Location     Type
  8606 ;;		None
  8607 ;; Auto vars:     Size  Location     Type
  8608 ;;		None
  8609 ;; Return value:  Size  Location     Type
  8610 ;;                  1    wreg      void 
  8611 ;; Registers used:
  8612 ;;		wreg, status,2, status,0, cstack
  8613 ;; Tracked objects:
  8614 ;;		On entry : 0/0
  8615 ;;		On exit  : 0/0
  8616 ;;		Unchanged: 0/0
  8617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8620 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8621 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8622 ;;Total ram usage:        1 bytes
  8623 ;; Hardware stack levels used:    1
  8624 ;; Hardware stack levels required when called:    9
  8625 ;; This function calls:
  8626 ;;		_lcdInst
  8627 ;; This function is called by:
  8628 ;;		_main
  8629 ;; This function uses a non-reentrant model
  8630 ;;
  8631                           
  8632                           	psect	text23
  8633  005A20                     __ptext23:
  8634                           	opt stack 0
  8635  005A20                     _initLCD:
  8636                           	opt stack 21
  8637                           
  8638                           ;lcd.c: 51: _delay((unsigned long)((15)*(32000000/4000.0)));
  8639                           
  8640                           ;incstack = 0
  8641  005A20  0E9C               	movlw	156
  8642  005A22  0100               	movlb	0	; () banked
  8643  005A24  6F83               	movwf	??_initLCD& (0+255),b
  8644  005A26  0ED7               	movlw	215
  8645  005A28                     u11257:
  8646  005A28  2EE8               	decfsz	wreg,f,c
  8647  005A2A  D7FE               	bra	u11257
  8648  005A2C  2F83               	decfsz	??_initLCD& (0+255),f,b
  8649  005A2E  D7FC               	bra	u11257
  8650                           
  8651                           ;lcd.c: 52: lcdInst(0b00110011);
  8652  005A30  0E33               	movlw	51
  8653  005A32  EC6D  F030         	call	_lcdInst
  8654                           
  8655                           ;lcd.c: 53: lcdInst(0b00110010);
  8656  005A36  0E32               	movlw	50
  8657  005A38  EC6D  F030         	call	_lcdInst
  8658                           
  8659                           ;lcd.c: 55: lcdInst(0b00101000);
  8660  005A3C  0E28               	movlw	40
  8661  005A3E  EC6D  F030         	call	_lcdInst
  8662                           
  8663                           ;lcd.c: 56: lcdInst(0b00001100);
  8664  005A42  0E0C               	movlw	12
  8665  005A44  EC6D  F030         	call	_lcdInst
  8666                           
  8667                           ;lcd.c: 57: lcdInst(0b00000110);
  8668  005A48  0E06               	movlw	6
  8669  005A4A  EC6D  F030         	call	_lcdInst
  8670                           
  8671                           ;lcd.c: 58: lcdInst(0b00000001);
  8672  005A4E  0E01               	movlw	1
  8673  005A50  EC6D  F030         	call	_lcdInst
  8674                           
  8675                           ;lcd.c: 59: _delay((unsigned long)((15)*(32000000/4000.0)));
  8676  005A54  0E9C               	movlw	156
  8677  005A56  0100               	movlb	0	; () banked
  8678  005A58  6F83               	movwf	??_initLCD& (0+255),b
  8679  005A5A  0ED7               	movlw	215
  8680  005A5C                     u11267:
  8681  005A5C  2EE8               	decfsz	wreg,f,c
  8682  005A5E  D7FE               	bra	u11267
  8683  005A60  2F83               	decfsz	??_initLCD& (0+255),f,b
  8684  005A62  D7FC               	bra	u11267
  8685  005A64  0012               	return		;funcret
  8686  005A66                     __end_of_initLCD:
  8687                           	opt stack 0
  8688                           tblptru	equ	0xFF8
  8689                           tblptrh	equ	0xFF7
  8690                           tblptrl	equ	0xFF6
  8691                           tablat	equ	0xFF5
  8692                           prodh	equ	0xFF4
  8693                           prodl	equ	0xFF3
  8694                           intcon	equ	0xFF2
  8695                           intcon2	equ	0xFF1
  8696                           intcon3	equ	0xFF0
  8697                           postinc0	equ	0xFEE
  8698                           wreg	equ	0xFE8
  8699                           postdec1	equ	0xFE5
  8700                           fsr1l	equ	0xFE1
  8701                           indf2	equ	0xFDF
  8702                           postinc2	equ	0xFDE
  8703                           postdec2	equ	0xFDD
  8704                           fsr2h	equ	0xFDA
  8705                           fsr2l	equ	0xFD9
  8706                           status	equ	0xFD8
  8707                           
  8708 ;; *************** function _initEEPROM *****************
  8709 ;; Defined at:
  8710 ;;		line 32 in file "EEPROM.c"
  8711 ;; Parameters:    Size  Location     Type
  8712 ;;		None
  8713 ;; Auto vars:     Size  Location     Type
  8714 ;;		None
  8715 ;; Return value:  Size  Location     Type
  8716 ;;                  1    wreg      void 
  8717 ;; Registers used:
  8718 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8719 ;; Tracked objects:
  8720 ;;		On entry : 0/0
  8721 ;;		On exit  : 0/0
  8722 ;;		Unchanged: 0/0
  8723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8728 ;;Total ram usage:        0 bytes
  8729 ;; Hardware stack levels used:    1
  8730 ;; Hardware stack levels required when called:   11
  8731 ;; This function calls:
  8732 ;;		_EEPROM_write
  8733 ;; This function is called by:
  8734 ;;		_main
  8735 ;; This function uses a non-reentrant model
  8736 ;;
  8737                           
  8738                           	psect	text24
  8739  006078                     __ptext24:
  8740                           	opt stack 0
  8741  006078                     _initEEPROM:
  8742                           	opt stack 19
  8743                           
  8744                           ;EEPROM.c: 33: EEPROM_write(0, 0x01);
  8745                           
  8746                           ;incstack = 0
  8747  006078  0E00               	movlw	0
  8748  00607A  0100               	movlb	0	; () banked
  8749  00607C  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  8750  00607E  0E00               	movlw	0
  8751  006080  6FAB               	movwf	EEPROM_write@address& (0+255),b
  8752  006082  0E01               	movlw	1
  8753  006084  0100               	movlb	0	; () banked
  8754  006086  6FAD               	movwf	EEPROM_write@data& (0+255),b
  8755  006088  EC48  F024         	call	_EEPROM_write	;wreg free
  8756  00608C  0012               	return		;funcret
  8757  00608E                     __end_of_initEEPROM:
  8758                           	opt stack 0
  8759                           tblptru	equ	0xFF8
  8760                           tblptrh	equ	0xFF7
  8761                           tblptrl	equ	0xFF6
  8762                           tablat	equ	0xFF5
  8763                           prodh	equ	0xFF4
  8764                           prodl	equ	0xFF3
  8765                           intcon	equ	0xFF2
  8766                           intcon2	equ	0xFF1
  8767                           intcon3	equ	0xFF0
  8768                           postinc0	equ	0xFEE
  8769                           wreg	equ	0xFE8
  8770                           postdec1	equ	0xFE5
  8771                           fsr1l	equ	0xFE1
  8772                           indf2	equ	0xFDF
  8773                           postinc2	equ	0xFDE
  8774                           postdec2	equ	0xFDD
  8775                           fsr2h	equ	0xFDA
  8776                           fsr2l	equ	0xFD9
  8777                           status	equ	0xFD8
  8778                           
  8779 ;; *************** function _EEPROM_write *****************
  8780 ;; Defined at:
  8781 ;;		line 36 in file "EEPROM.c"
  8782 ;; Parameters:    Size  Location     Type
  8783 ;;  address         2   43[BANK0 ] unsigned short 
  8784 ;;  data            1   45[BANK0 ] unsigned char 
  8785 ;; Auto vars:     Size  Location     Type
  8786 ;;  i               1   48[BANK0 ] unsigned char 
  8787 ;;  i               1   47[BANK0 ] unsigned char 
  8788 ;; Return value:  Size  Location     Type
  8789 ;;                  1    wreg      void 
  8790 ;; Registers used:
  8791 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8792 ;; Tracked objects:
  8793 ;;		On entry : 0/0
  8794 ;;		On exit  : 0/0
  8795 ;;		Unchanged: 0/0
  8796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8797 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8798 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8799 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8800 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8801 ;;Total ram usage:        6 bytes
  8802 ;; Hardware stack levels used:    1
  8803 ;; Hardware stack levels required when called:   10
  8804 ;; This function calls:
  8805 ;;		_EEPROM_read
  8806 ;;		_lcdInst
  8807 ;;		_printf
  8808 ;; This function is called by:
  8809 ;;		_Loading
  8810 ;;		_initEEPROM
  8811 ;;		_logRun
  8812 ;; This function uses a non-reentrant model
  8813 ;;
  8814                           
  8815                           	psect	text25
  8816  004890                     __ptext25:
  8817                           	opt stack 0
  8818  004890                     _EEPROM_write:
  8819                           	opt stack 18
  8820                           
  8821                           ;EEPROM.c: 37: EECON1bits.WREN = 1;
  8822                           
  8823                           ;incstack = 0
  8824  004890  84A6               	bsf	4006,2,c	;volatile
  8825                           
  8826                           ;EEPROM.c: 40: EEADRH = (unsigned char)(address >> 8);
  8827  004892  0100               	movlb	0	; () banked
  8828  004894  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  8829  004896  6EAA               	movwf	4010,c	;volatile
  8830                           
  8831                           ; BSR set to: 0
  8832                           ;EEPROM.c: 41: EEADR = (unsigned char)address;
  8833  004898  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  8834                           
  8835                           ; BSR set to: 0
  8836                           ;EEPROM.c: 43: EEDATA = data;
  8837  00489C  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  8838                           
  8839                           ; BSR set to: 0
  8840                           ;EEPROM.c: 44: EECON1bits.EEPGD = 0;
  8841  0048A0  9EA6               	bcf	4006,7,c	;volatile
  8842                           
  8843                           ; BSR set to: 0
  8844                           ;EEPROM.c: 45: EECON1bits.CFGS = 0;
  8845  0048A2  9CA6               	bcf	4006,6,c	;volatile
  8846                           
  8847                           ; BSR set to: 0
  8848                           ;EEPROM.c: 47: (INTCONbits.GIE = 0);
  8849  0048A4  9EF2               	bcf	intcon,7,c	;volatile
  8850                           
  8851                           ;EEPROM.c: 49: EECON2 = 0x55;
  8852  0048A6  0E55               	movlw	85
  8853  0048A8  6EA7               	movwf	4007,c	;volatile
  8854                           
  8855                           ;EEPROM.c: 50: EECON2 = 0x0AA;
  8856  0048AA  0EAA               	movlw	170
  8857  0048AC  6EA7               	movwf	4007,c	;volatile
  8858                           
  8859                           ; BSR set to: 0
  8860                           ;EEPROM.c: 51: EECON1bits.WR = 1;
  8861  0048AE  82A6               	bsf	4006,1,c	;volatile
  8862                           
  8863                           ; BSR set to: 0
  8864                           ;EEPROM.c: 52: (INTCONbits.GIE = 1);
  8865  0048B0  8EF2               	bsf	intcon,7,c	;volatile
  8866  0048B2                     l1170:
  8867  0048B2  A8A1               	btfss	4001,4,c	;volatile
  8868  0048B4  D7FE               	goto	l1170
  8869                           
  8870                           ;EEPROM.c: 57: PIR2bits.EEIF = 0;
  8871  0048B6  98A1               	bcf	4001,4,c	;volatile
  8872                           
  8873                           ;EEPROM.c: 58: EECON1bits.WREN = 0;
  8874  0048B8  94A6               	bcf	4006,2,c	;volatile
  8875                           
  8876                           ;EEPROM.c: 61: if(debug){
  8877  0048BA  0101               	movlb	1	; () banked
  8878  0048BC  512D               	movf	_debug& (0+255),w,b
  8879  0048BE  0101               	movlb	1	; () banked
  8880  0048C0  112E               	iorwf	(_debug+1)& (0+255),w,b
  8881  0048C2  B4D8               	btfsc	status,2,c
  8882  0048C4  0012               	return	
  8883                           
  8884                           ; BSR set to: 1
  8885                           ;EEPROM.c: 62: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8886  0048C6  0E01               	movlw	1
  8887  0048C8  EC6D  F030         	call	_lcdInst
  8888  0048CC  0E68               	movlw	104
  8889  0048CE  0100               	movlb	0	; () banked
  8890  0048D0  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8891  0048D2  0EE4               	movlw	228
  8892  0048D4                     u11277:
  8893  0048D4  2EE8               	decfsz	wreg,f,c
  8894  0048D6  D7FE               	bra	u11277
  8895  0048D8  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8896  0048DA  D7FC               	bra	u11277
  8897  0048DC  F000               	nop	
  8898                           
  8899                           ;EEPROM.c: 63: lcdInst(0b10000000);;
  8900  0048DE  0E80               	movlw	128
  8901  0048E0  EC6D  F030         	call	_lcdInst
  8902                           
  8903                           ;EEPROM.c: 64: if(EEPROM_read(address)==data){
  8904  0048E4  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  8905  0048E8  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  8906  0048EC  EC30  F030         	call	_EEPROM_read	;wreg free
  8907  0048F0  0100               	movlb	0	; () banked
  8908  0048F2  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  8909  0048F4  A4D8               	btfss	status,2,c
  8910  0048F6  D024               	goto	l7669
  8911                           
  8912                           ; BSR set to: 0
  8913                           ;EEPROM.c: 65: printf("(data: %u, addr: %u)", data, address);
  8914  0048F8  0EDA               	movlw	low STR_66
  8915  0048FA  0100               	movlb	0	; () banked
  8916  0048FC  6F8E               	movwf	printf@f& (0+255),b
  8917  0048FE  0EFA               	movlw	high STR_66
  8918  004900  0100               	movlb	0	; () banked
  8919  004902  6F8F               	movwf	(printf@f+1)& (0+255),b
  8920  004904  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  8921  004908  0100               	movlb	0	; () banked
  8922  00490A  6B91               	clrf	(?_printf+3)& (0+255),b
  8923  00490C  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  8924  004910  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  8925  004914  ECE9  F00E         	call	_printf	;wreg free
  8926                           
  8927                           ;EEPROM.c: 66: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  8928  004918  0E00               	movlw	0
  8929  00491A  0100               	movlb	0	; () banked
  8930  00491C  6FAF               	movwf	EEPROM_write@i& (0+255),b
  8931  00491E                     l7661:
  8932                           
  8933                           ; BSR set to: 0
  8934  00491E  0E63               	movlw	99
  8935  004920  0100               	movlb	0	; () banked
  8936  004922  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  8937  004924  D001               	goto	l7665
  8938  004926  0012               	return	
  8939  004928                     l7665:
  8940                           
  8941                           ; BSR set to: 0
  8942  004928  0E68               	movlw	104
  8943  00492A  0100               	movlb	0	; () banked
  8944  00492C  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8945  00492E  0EE4               	movlw	228
  8946  004930                     u11287:
  8947  004930  2EE8               	decfsz	wreg,f,c
  8948  004932  D7FE               	bra	u11287
  8949  004934  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8950  004936  D7FC               	bra	u11287
  8951  004938  F000               	nop	
  8952  00493A  0100               	movlb	0	; () banked
  8953  00493C  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  8954  00493E  D7EF               	goto	l7661
  8955  004940                     l7669:
  8956                           
  8957                           ; BSR set to: 0
  8958                           ;EEPROM.c: 68: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  8959  004940  0EBC               	movlw	low STR_67
  8960  004942  0100               	movlb	0	; () banked
  8961  004944  6F8E               	movwf	printf@f& (0+255),b
  8962  004946  0EFF               	movlw	high STR_67
  8963  004948  0100               	movlb	0	; () banked
  8964  00494A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8965  00494C  ECE9  F00E         	call	_printf	;wreg free
  8966  004950  0E00               	movlw	0
  8967  004952  0100               	movlb	0	; () banked
  8968  004954  6FB0               	movwf	EEPROM_write@i_1421& (0+255),b
  8969  004956                     l7673:
  8970                           
  8971                           ; BSR set to: 0
  8972  004956  0E63               	movlw	99
  8973  004958  0100               	movlb	0	; () banked
  8974  00495A  65B0               	cpfsgt	EEPROM_write@i_1421& (0+255),b
  8975  00495C  D001               	goto	l7677
  8976  00495E  0012               	return	
  8977  004960                     l7677:
  8978                           
  8979                           ; BSR set to: 0
  8980  004960  0E68               	movlw	104
  8981  004962  0100               	movlb	0	; () banked
  8982  004964  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8983  004966  0EE4               	movlw	228
  8984  004968                     u11297:
  8985  004968  2EE8               	decfsz	wreg,f,c
  8986  00496A  D7FE               	bra	u11297
  8987  00496C  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8988  00496E  D7FC               	bra	u11297
  8989  004970  F000               	nop	
  8990  004972  0100               	movlb	0	; () banked
  8991  004974  2BB0               	incf	EEPROM_write@i_1421& (0+255),f,b
  8992  004976  D7EF               	goto	l7673
  8993  004978                     __end_of_EEPROM_write:
  8994                           	opt stack 0
  8995                           tblptru	equ	0xFF8
  8996                           tblptrh	equ	0xFF7
  8997                           tblptrl	equ	0xFF6
  8998                           tablat	equ	0xFF5
  8999                           prodh	equ	0xFF4
  9000                           prodl	equ	0xFF3
  9001                           intcon	equ	0xFF2
  9002                           intcon2	equ	0xFF1
  9003                           intcon3	equ	0xFF0
  9004                           postinc0	equ	0xFEE
  9005                           wreg	equ	0xFE8
  9006                           postdec1	equ	0xFE5
  9007                           fsr1l	equ	0xFE1
  9008                           indf2	equ	0xFDF
  9009                           postinc2	equ	0xFDE
  9010                           postdec2	equ	0xFDD
  9011                           fsr2h	equ	0xFDA
  9012                           fsr2l	equ	0xFD9
  9013                           status	equ	0xFD8
  9014                           
  9015 ;; *************** function _EEPROM_read *****************
  9016 ;; Defined at:
  9017 ;;		line 72 in file "EEPROM.c"
  9018 ;; Parameters:    Size  Location     Type
  9019 ;;  address         2    0[BANK0 ] unsigned short 
  9020 ;; Auto vars:     Size  Location     Type
  9021 ;;		None
  9022 ;; Return value:  Size  Location     Type
  9023 ;;                  1    wreg      unsigned char 
  9024 ;; Registers used:
  9025 ;;		wreg, status,2
  9026 ;; Tracked objects:
  9027 ;;		On entry : 0/0
  9028 ;;		On exit  : 0/0
  9029 ;;		Unchanged: 0/0
  9030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9031 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9034 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9035 ;;Total ram usage:        2 bytes
  9036 ;; Hardware stack levels used:    1
  9037 ;; Hardware stack levels required when called:    7
  9038 ;; This function calls:
  9039 ;;		Nothing
  9040 ;; This function is called by:
  9041 ;;		_Loading
  9042 ;;		_EEPROM_write
  9043 ;;		_logRun
  9044 ;; This function uses a non-reentrant model
  9045 ;;
  9046                           
  9047                           	psect	text26
  9048  006060                     __ptext26:
  9049                           	opt stack 0
  9050  006060                     _EEPROM_read:
  9051                           	opt stack 20
  9052                           
  9053                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
  9054                           
  9055                           ;incstack = 0
  9056  006060  0100               	movlb	0	; () banked
  9057  006062  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  9058  006064  6EAA               	movwf	4010,c	;volatile
  9059                           
  9060                           ; BSR set to: 0
  9061                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
  9062  006066  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  9063                           
  9064                           ; BSR set to: 0
  9065                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
  9066  00606A  9EA6               	bcf	4006,7,c	;volatile
  9067                           
  9068                           ; BSR set to: 0
  9069                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
  9070  00606C  9CA6               	bcf	4006,6,c	;volatile
  9071                           
  9072                           ; BSR set to: 0
  9073                           ;EEPROM.c: 79: EECON1bits.RD = 1;
  9074  00606E  80A6               	bsf	4006,0,c	;volatile
  9075  006070                     l1183:
  9076  006070  B0A6               	btfsc	4006,0,c	;volatile
  9077  006072  D7FE               	goto	l1183
  9078                           
  9079                           ;EEPROM.c: 85: return EEDATA;
  9080  006074  50A8               	movf	4008,w,c	;volatile
  9081  006076  0012               	return	
  9082  006078                     __end_of_EEPROM_read:
  9083                           	opt stack 0
  9084                           tblptru	equ	0xFF8
  9085                           tblptrh	equ	0xFF7
  9086                           tblptrl	equ	0xFF6
  9087                           tablat	equ	0xFF5
  9088                           prodh	equ	0xFF4
  9089                           prodl	equ	0xFF3
  9090                           intcon	equ	0xFF2
  9091                           intcon2	equ	0xFF1
  9092                           intcon3	equ	0xFF0
  9093                           postinc0	equ	0xFEE
  9094                           wreg	equ	0xFE8
  9095                           postdec1	equ	0xFE5
  9096                           fsr1l	equ	0xFE1
  9097                           indf2	equ	0xFDF
  9098                           postinc2	equ	0xFDE
  9099                           postdec2	equ	0xFDD
  9100                           fsr2h	equ	0xFDA
  9101                           fsr2l	equ	0xFD9
  9102                           status	equ	0xFD8
  9103                           
  9104 ;; *************** function _UI *****************
  9105 ;; Defined at:
  9106 ;;		line 76 in file "UI.c"
  9107 ;; Parameters:    Size  Location     Type
  9108 ;;		None
  9109 ;; Auto vars:     Size  Location     Type
  9110 ;;  i               1   73[BANK0 ] unsigned char 
  9111 ;;  i               1   85[BANK0 ] unsigned char 
  9112 ;;  i               1   84[BANK0 ] unsigned char 
  9113 ;;  i               1   83[BANK0 ] unsigned char 
  9114 ;;  i               1   82[BANK0 ] unsigned char 
  9115 ;;  i               1   81[BANK0 ] unsigned char 
  9116 ;;  i               1   80[BANK0 ] unsigned char 
  9117 ;;  i               1   79[BANK0 ] unsigned char 
  9118 ;;  i               1   78[BANK0 ] unsigned char 
  9119 ;;  i               1   77[BANK0 ] unsigned char 
  9120 ;;  i               1   76[BANK0 ] unsigned char 
  9121 ;;  i               1   75[BANK0 ] unsigned char 
  9122 ;;  i               1   74[BANK0 ] unsigned char 
  9123 ;;  month           4   86[BANK0 ] unsigned char [4]
  9124 ;;  i               1   72[BANK0 ] unsigned char 
  9125 ;; Return value:  Size  Location     Type
  9126 ;;                  1    wreg      void 
  9127 ;; Registers used:
  9128 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9129 ;; Tracked objects:
  9130 ;;		On entry : 0/0
  9131 ;;		On exit  : 0/0
  9132 ;;		Unchanged: 0/0
  9133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9135 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9136 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9137 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9138 ;;Total ram usage:       22 bytes
  9139 ;; Hardware stack levels used:    1
  9140 ;; Hardware stack levels required when called:   11
  9141 ;; This function calls:
  9142 ;;		___awdiv
  9143 ;;		___awmod
  9144 ;;		_change_state_to_menu_12
  9145 ;;		_change_state_to_menu_22
  9146 ;;		_lcdInst
  9147 ;;		_printRTC
  9148 ;;		_printf
  9149 ;;		_strcpy
  9150 ;; This function is called by:
  9151 ;;		_main
  9152 ;; This function uses a non-reentrant model
  9153 ;;
  9154                           
  9155                           	psect	text27
  9156  000012                     __ptext27:
  9157                           	opt stack 0
  9158  000012                     _UI:
  9159                           	opt stack 19
  9160                           
  9161                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  9162                           
  9163                           ;incstack = 0
  9164  000012  0E02               	movlw	2
  9165  000014  0100               	movlb	0	; () banked
  9166  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  9167  000018  A4D8               	btfss	status,2,c
  9168  00001A  D086               	goto	l9723
  9169                           
  9170                           ; BSR set to: 0
  9171                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9172  00001C  0E01               	movlw	1
  9173  00001E  EC6D  F030         	call	_lcdInst
  9174  000022  0E68               	movlw	104
  9175  000024  0100               	movlb	0	; () banked
  9176  000026  6FC4               	movwf	??_UI& (0+255),b
  9177  000028  0EE4               	movlw	228
  9178  00002A                     u11307:
  9179  00002A  2EE8               	decfsz	wreg,f,c
  9180  00002C  D7FE               	bra	u11307
  9181  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  9182  000030  D7FC               	bra	u11307
  9183  000032  F000               	nop	
  9184                           
  9185                           ;UI.c: 79: lcdInst(0b10000000);;
  9186  000034  0E80               	movlw	128
  9187  000036  EC6D  F030         	call	_lcdInst
  9188                           
  9189                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  9190  00003A  0E7F               	movlw	low STR_1
  9191  00003C  0100               	movlb	0	; () banked
  9192  00003E  6F8E               	movwf	printf@f& (0+255),b
  9193  000040  0EFB               	movlw	high STR_1
  9194  000042  0100               	movlb	0	; () banked
  9195  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  9196  000046  0E01               	movlw	1
  9197  000048  0100               	movlb	0	; () banked
  9198  00004A  25FD               	addwf	_sel& (0+255),w,b
  9199  00004C  0100               	movlb	0	; () banked
  9200  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  9201  000050  0100               	movlb	0	; () banked
  9202  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  9203  000054  0E00               	movlw	0
  9204  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  9205  000058  ECE9  F00E         	call	_printf	;wreg free
  9206                           
  9207                           ;UI.c: 81: lcdInst(0b11000000);;
  9208  00005C  0EC0               	movlw	192
  9209  00005E  EC6D  F030         	call	_lcdInst
  9210                           
  9211                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  9212  000062  0E0E               	movlw	14
  9213  000064  0100               	movlb	0	; () banked
  9214  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9215  000068  0E10               	movlw	16
  9216  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  9217  00006C  C0FA  F080         	movff	_total_time,___awmod@dividend
  9218  000070  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  9219  000074  EC4B  F028         	call	___awmod	;wreg free
  9220  000078  C080  F0C6         	movff	?___awmod,_UI$2443
  9221  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2443+1
  9222                           
  9223                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  9224  000080  0E56               	movlw	low STR_2
  9225  000082  0100               	movlb	0	; () banked
  9226  000084  6F8E               	movwf	printf@f& (0+255),b
  9227  000086  0EFF               	movlw	high STR_2
  9228  000088  0100               	movlb	0	; () banked
  9229  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9230  00008C  0E0E               	movlw	14
  9231  00008E  0100               	movlb	0	; () banked
  9232  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9233  000092  0E10               	movlw	16
  9234  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  9235  000096  C0FA  F080         	movff	_total_time,___awmod@dividend
  9236  00009A  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  9237  00009E  EC4B  F028         	call	___awmod	;wreg free
  9238  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  9239  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  9240  0000AA  0E00               	movlw	0
  9241  0000AC  0100               	movlb	0	; () banked
  9242  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  9243  0000B0  0E3C               	movlw	60
  9244  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  9245  0000B4  EC39  F027         	call	___awdiv	;wreg free
  9246  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  9247  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  9248  0000C0  C0C6  F080         	movff	_UI$2443,___awmod@dividend
  9249  0000C4  C0C7  F081         	movff	_UI$2443+1,___awmod@dividend+1
  9250  0000C8  0E00               	movlw	0
  9251  0000CA  0100               	movlb	0	; () banked
  9252  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9253  0000CE  0E3C               	movlw	60
  9254  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  9255  0000D2  EC4B  F028         	call	___awmod	;wreg free
  9256  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  9257  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  9258  0000DE  ECE9  F00E         	call	_printf	;wreg free
  9259  0000E2                     l192:
  9260  0000E2  B281               	btfsc	3969,1,c	;volatile
  9261  0000E4  D7FE               	goto	l192
  9262  0000E6                     l195:
  9263  0000E6  A281               	btfss	3969,1,c	;volatile
  9264  0000E8  D7FE               	goto	l195
  9265                           
  9266                           ;UI.c: 86: }
  9267                           ;UI.c: 87: if(cur_state == 12){
  9268  0000EA  0E0C               	movlw	12
  9269  0000EC  0100               	movlb	0	; () banked
  9270  0000EE  19E8               	xorwf	_cur_state& (0+255),w,b
  9271  0000F0  0100               	movlb	0	; () banked
  9272  0000F2  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
  9273  0000F4  A4D8               	btfss	status,2,c
  9274  0000F6  D003               	goto	l9717
  9275                           
  9276                           ; BSR set to: 0
  9277                           ;UI.c: 88: change_state_to_menu_12();
  9278  0000F8  ECAF  F02D         	call	_change_state_to_menu_12	;wreg free
  9279                           
  9280                           ;UI.c: 89: }
  9281  0000FC  D002               	goto	l200
  9282  0000FE                     l9717:
  9283                           
  9284                           ;UI.c: 90: else{
  9285                           ;UI.c: 91: change_state_to_menu_22();
  9286  0000FE  EC93  F02D         	call	_change_state_to_menu_22	;wreg free
  9287  000102                     l200:
  9288  000102  B281               	btfsc	3969,1,c	;volatile
  9289  000104  D7FE               	goto	l200
  9290                           
  9291                           ;UI.c: 94: _delay((unsigned long)((100)*(32000000/4000.0)));
  9292  000106  0E05               	movlw	5
  9293  000108  0100               	movlb	0	; () banked
  9294  00010A  6FC5               	movwf	(??_UI+1)& (0+255),b
  9295  00010C  0E0F               	movlw	15
  9296  00010E  0100               	movlb	0	; () banked
  9297  000110  6FC4               	movwf	??_UI& (0+255),b
  9298  000112  0EF1               	movlw	241
  9299  000114                     u11317:
  9300  000114  2EE8               	decfsz	wreg,f,c
  9301  000116  D7FE               	bra	u11317
  9302  000118  2FC4               	decfsz	??_UI& (0+255),f,b
  9303  00011A  D7FC               	bra	u11317
  9304  00011C  2FC5               	decfsz	(??_UI+1)& (0+255),f,b
  9305  00011E  D7FA               	bra	u11317
  9306                           
  9307                           ;UI.c: 95: machine_state = UI_state;
  9308  000120  0E00               	movlw	0
  9309  000122  0100               	movlb	0	; () banked
  9310  000124  6FFC               	movwf	_machine_state& (0+255),b
  9311                           
  9312                           ;UI.c: 96: }
  9313  000126  D3D2               	goto	l10043
  9314  000128                     l9723:
  9315                           
  9316                           ; BSR set to: 0
  9317                           ;UI.c: 97: else if(cur_state == 0){
  9318  000128  0100               	movlb	0	; () banked
  9319  00012A  51E8               	movf	_cur_state& (0+255),w,b
  9320  00012C  0100               	movlb	0	; () banked
  9321  00012E  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
  9322  000130  A4D8               	btfss	status,2,c
  9323  000132  D3CC               	goto	l10043
  9324                           
  9325                           ; BSR set to: 0
  9326                           ;UI.c: 98: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  9327  000134  0E00               	movlw	0
  9328  000136  0100               	movlb	0	; () banked
  9329  000138  6FC8               	movwf	UI@i& (0+255),b
  9330  00013A                     l9727:
  9331                           
  9332                           ; BSR set to: 0
  9333  00013A  0E63               	movlw	99
  9334  00013C  0100               	movlb	0	; () banked
  9335  00013E  65C8               	cpfsgt	UI@i& (0+255),b
  9336  000140  D001               	goto	l9731
  9337  000142  D00C               	goto	l9735
  9338  000144                     l9731:
  9339                           
  9340                           ; BSR set to: 0
  9341  000144  0E68               	movlw	104
  9342  000146  0100               	movlb	0	; () banked
  9343  000148  6FC4               	movwf	??_UI& (0+255),b
  9344  00014A  0EE4               	movlw	228
  9345  00014C                     u11327:
  9346  00014C  2EE8               	decfsz	wreg,f,c
  9347  00014E  D7FE               	bra	u11327
  9348  000150  2FC4               	decfsz	??_UI& (0+255),f,b
  9349  000152  D7FC               	bra	u11327
  9350  000154  F000               	nop	
  9351  000156  0100               	movlb	0	; () banked
  9352  000158  2BC8               	incf	UI@i& (0+255),f,b
  9353  00015A  D7EF               	goto	l9727
  9354  00015C                     l9735:
  9355                           
  9356                           ; BSR set to: 0
  9357                           ;UI.c: 99: if(cur_state == 0){
  9358  00015C  0100               	movlb	0	; () banked
  9359  00015E  51E8               	movf	_cur_state& (0+255),w,b
  9360  000160  0100               	movlb	0	; () banked
  9361  000162  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
  9362  000164  A4D8               	btfss	status,2,c
  9363  000166  D3B2               	goto	l10043
  9364                           
  9365                           ; BSR set to: 0
  9366                           ;UI.c: 100: printRTC();
  9367  000168  ECF9  F019         	call	_printRTC	;wreg free
  9368                           
  9369                           ;UI.c: 101: }
  9370                           ;UI.c: 102: }
  9371                           ;UI.c: 103: while(logstate){
  9372  00016C  D3AF               	goto	l10043
  9373  00016E                     l9739:
  9374                           
  9375                           ;UI.c: 105: if(!log_completion){
  9376  00016E  0100               	movlb	0	; () banked
  9377  000170  51F2               	movf	_log_completion& (0+255),w,b
  9378  000172  0100               	movlb	0	; () banked
  9379  000174  11F3               	iorwf	(_log_completion+1)& (0+255),w,b
  9380  000176  A4D8               	btfss	status,2,c
  9381  000178  D041               	goto	l9769
  9382                           
  9383                           ; BSR set to: 0
  9384                           ;UI.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9385  00017A  0E01               	movlw	1
  9386  00017C  EC6D  F030         	call	_lcdInst
  9387  000180  0E68               	movlw	104
  9388  000182  0100               	movlb	0	; () banked
  9389  000184  6FC4               	movwf	??_UI& (0+255),b
  9390  000186  0EE4               	movlw	228
  9391  000188                     u11337:
  9392  000188  2EE8               	decfsz	wreg,f,c
  9393  00018A  D7FE               	bra	u11337
  9394  00018C  2FC4               	decfsz	??_UI& (0+255),f,b
  9395  00018E  D7FC               	bra	u11337
  9396  000190  F000               	nop	
  9397                           
  9398                           ;UI.c: 107: lcdInst(0b10000000);;
  9399  000192  0E80               	movlw	128
  9400  000194  EC6D  F030         	call	_lcdInst
  9401                           
  9402                           ;UI.c: 108: printf("-- LOG %2d HERE--", log);
  9403  000198  0E6D               	movlw	low STR_3
  9404  00019A  0100               	movlb	0	; () banked
  9405  00019C  6F8E               	movwf	printf@f& (0+255),b
  9406  00019E  0EFB               	movlw	high STR_3
  9407  0001A0  0100               	movlb	0	; () banked
  9408  0001A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9409  0001A4  C0F0  F090         	movff	_log,?_printf+2
  9410  0001A8  C0F1  F091         	movff	_log+1,?_printf+3
  9411  0001AC  ECE9  F00E         	call	_printf	;wreg free
  9412                           
  9413                           ;UI.c: 109: lcdInst(0b11000000);;
  9414  0001B0  0EC0               	movlw	192
  9415  0001B2  EC6D  F030         	call	_lcdInst
  9416                           
  9417                           ;UI.c: 110: printf("DIDN'T COMPLETE");
  9418  0001B6  0E79               	movlw	low STR_4
  9419  0001B8  0100               	movlb	0	; () banked
  9420  0001BA  6F8E               	movwf	printf@f& (0+255),b
  9421  0001BC  0EFE               	movlw	high STR_4
  9422  0001BE  0100               	movlb	0	; () banked
  9423  0001C0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9424  0001C2  ECE9  F00E         	call	_printf	;wreg free
  9425  0001C6                     l9753:
  9426  0001C6  0E00               	movlw	0
  9427  0001C8  0100               	movlb	0	; () banked
  9428  0001CA  6FC9               	movwf	UI@i_413& (0+255),b
  9429  0001CC                     l9755:
  9430                           
  9431                           ; BSR set to: 0
  9432  0001CC  0E63               	movlw	99
  9433  0001CE  0100               	movlb	0	; () banked
  9434  0001D0  65C9               	cpfsgt	UI@i_413& (0+255),b
  9435  0001D2  D001               	goto	l9759
  9436  0001D4  D00C               	goto	l9763
  9437  0001D6                     l9759:
  9438                           
  9439                           ; BSR set to: 0
  9440  0001D6  0E68               	movlw	104
  9441  0001D8  0100               	movlb	0	; () banked
  9442  0001DA  6FC4               	movwf	??_UI& (0+255),b
  9443  0001DC  0EE4               	movlw	228
  9444  0001DE                     u11347:
  9445  0001DE  2EE8               	decfsz	wreg,f,c
  9446  0001E0  D7FE               	bra	u11347
  9447  0001E2  2FC4               	decfsz	??_UI& (0+255),f,b
  9448  0001E4  D7FC               	bra	u11347
  9449  0001E6  F000               	nop	
  9450  0001E8  0100               	movlb	0	; () banked
  9451  0001EA  2BC9               	incf	UI@i_413& (0+255),f,b
  9452  0001EC  D7EF               	goto	l9755
  9453  0001EE                     l9763:
  9454                           
  9455                           ; BSR set to: 0
  9456  0001EE  0100               	movlb	0	; () banked
  9457  0001F0  51F8               	movf	_logstate& (0+255),w,b
  9458  0001F2  0100               	movlb	0	; () banked
  9459  0001F4  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9460  0001F6  B4D8               	btfsc	status,2,c
  9461  0001F8  0012               	return	
  9462  0001FA  D7E5               	goto	l9753
  9463  0001FC                     l9769:
  9464                           
  9465                           ; BSR set to: 0
  9466                           ;UI.c: 114: else{
  9467                           ;UI.c: 115: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9468  0001FC  0E01               	movlw	1
  9469  0001FE  EC6D  F030         	call	_lcdInst
  9470  000202  0E68               	movlw	104
  9471  000204  0100               	movlb	0	; () banked
  9472  000206  6FC4               	movwf	??_UI& (0+255),b
  9473  000208  0EE4               	movlw	228
  9474  00020A                     u11357:
  9475  00020A  2EE8               	decfsz	wreg,f,c
  9476  00020C  D7FE               	bra	u11357
  9477  00020E  2FC4               	decfsz	??_UI& (0+255),f,b
  9478  000210  D7FC               	bra	u11357
  9479  000212  F000               	nop	
  9480                           
  9481                           ;UI.c: 116: lcdInst(0b10000000);;
  9482  000214  0E80               	movlw	128
  9483  000216  EC6D  F030         	call	_lcdInst
  9484                           
  9485                           ;UI.c: 117: printf("-- LOG %2d HERE--", log);
  9486  00021A  0E6D               	movlw	low STR_3
  9487  00021C  0100               	movlb	0	; () banked
  9488  00021E  6F8E               	movwf	printf@f& (0+255),b
  9489  000220  0EFB               	movlw	high STR_3
  9490  000222  0100               	movlb	0	; () banked
  9491  000224  6F8F               	movwf	(printf@f+1)& (0+255),b
  9492  000226  C0F0  F090         	movff	_log,?_printf+2
  9493  00022A  C0F1  F091         	movff	_log+1,?_printf+3
  9494  00022E  ECE9  F00E         	call	_printf	;wreg free
  9495                           
  9496                           ;UI.c: 118: lcdInst(0b11000000);;
  9497  000232  0EC0               	movlw	192
  9498  000234  EC6D  F030         	call	_lcdInst
  9499                           
  9500                           ;UI.c: 119: printf("PAUSE < | BACK >");
  9501  000238  0EF5               	movlw	low STR_6
  9502  00023A  0100               	movlb	0	; () banked
  9503  00023C  6F8E               	movwf	printf@f& (0+255),b
  9504  00023E  0EFD               	movlw	high STR_6
  9505  000240  0100               	movlb	0	; () banked
  9506  000242  6F8F               	movwf	(printf@f+1)& (0+255),b
  9507  000244  ECE9  F00E         	call	_printf	;wreg free
  9508                           
  9509                           ;UI.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9510  000248  0E00               	movlw	0
  9511  00024A  0100               	movlb	0	; () banked
  9512  00024C  6FCA               	movwf	UI@i_416& (0+255),b
  9513  00024E                     l9783:
  9514                           
  9515                           ; BSR set to: 0
  9516  00024E  0E63               	movlw	99
  9517  000250  0100               	movlb	0	; () banked
  9518  000252  65CA               	cpfsgt	UI@i_416& (0+255),b
  9519  000254  D001               	goto	l9787
  9520  000256  D00C               	goto	l9791
  9521  000258                     l9787:
  9522                           
  9523                           ; BSR set to: 0
  9524  000258  0E68               	movlw	104
  9525  00025A  0100               	movlb	0	; () banked
  9526  00025C  6FC4               	movwf	??_UI& (0+255),b
  9527  00025E  0EE4               	movlw	228
  9528  000260                     u11367:
  9529  000260  2EE8               	decfsz	wreg,f,c
  9530  000262  D7FE               	bra	u11367
  9531  000264  2FC4               	decfsz	??_UI& (0+255),f,b
  9532  000266  D7FC               	bra	u11367
  9533  000268  F000               	nop	
  9534  00026A  0100               	movlb	0	; () banked
  9535  00026C  2BCA               	incf	UI@i_416& (0+255),f,b
  9536  00026E  D7EF               	goto	l9783
  9537  000270                     l9791:
  9538                           
  9539                           ; BSR set to: 0
  9540  000270  0100               	movlb	0	; () banked
  9541  000272  51F8               	movf	_logstate& (0+255),w,b
  9542  000274  0100               	movlb	0	; () banked
  9543  000276  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9544  000278  B4D8               	btfsc	status,2,c
  9545  00027A  0012               	return	
  9546                           
  9547                           ; BSR set to: 0
  9548                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9549                           
  9550                           ; BSR set to: 0
  9551                           
  9552                           ; BSR set to: 0
  9553  00027C  0E00               	movlw	0
  9554  00027E  0100               	movlb	0	; () banked
  9555  000280  6FCB               	movwf	UI@i_417& (0+255),b
  9556  000282                     l9797:
  9557                           
  9558                           ; BSR set to: 0
  9559  000282  0E63               	movlw	99
  9560  000284  0100               	movlb	0	; () banked
  9561  000286  65CB               	cpfsgt	UI@i_417& (0+255),b
  9562  000288  D001               	goto	l9801
  9563  00028A  D00C               	goto	l9805
  9564  00028C                     l9801:
  9565                           
  9566                           ; BSR set to: 0
  9567  00028C  0E68               	movlw	104
  9568  00028E  0100               	movlb	0	; () banked
  9569  000290  6FC4               	movwf	??_UI& (0+255),b
  9570  000292  0EE4               	movlw	228
  9571  000294                     u11377:
  9572  000294  2EE8               	decfsz	wreg,f,c
  9573  000296  D7FE               	bra	u11377
  9574  000298  2FC4               	decfsz	??_UI& (0+255),f,b
  9575  00029A  D7FC               	bra	u11377
  9576  00029C  F000               	nop	
  9577  00029E  0100               	movlb	0	; () banked
  9578  0002A0  2BCB               	incf	UI@i_417& (0+255),f,b
  9579  0002A2  D7EF               	goto	l9797
  9580  0002A4                     l9805:
  9581                           
  9582                           ; BSR set to: 0
  9583  0002A4  0100               	movlb	0	; () banked
  9584  0002A6  51F8               	movf	_logstate& (0+255),w,b
  9585  0002A8  0100               	movlb	0	; () banked
  9586  0002AA  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9587  0002AC  B4D8               	btfsc	status,2,c
  9588  0002AE  0012               	return	
  9589                           
  9590                           ; BSR set to: 0
  9591                           ;UI.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9592                           
  9593                           ; BSR set to: 0
  9594                           
  9595                           ; BSR set to: 0
  9596  0002B0  0E01               	movlw	1
  9597  0002B2  EC6D  F030         	call	_lcdInst
  9598  0002B6  0E68               	movlw	104
  9599  0002B8  0100               	movlb	0	; () banked
  9600  0002BA  6FC4               	movwf	??_UI& (0+255),b
  9601  0002BC  0EE4               	movlw	228
  9602  0002BE                     u11387:
  9603  0002BE  2EE8               	decfsz	wreg,f,c
  9604  0002C0  D7FE               	bra	u11387
  9605  0002C2  2FC4               	decfsz	??_UI& (0+255),f,b
  9606  0002C4  D7FC               	bra	u11387
  9607  0002C6  F000               	nop	
  9608                           
  9609                           ;UI.c: 125: lcdInst(0b10000000);;
  9610  0002C8  0E80               	movlw	128
  9611  0002CA  EC6D  F030         	call	_lcdInst
  9612                           
  9613                           ;UI.c: 126: printf("START:");
  9614  0002CE  0EC3               	movlw	low STR_7
  9615  0002D0  0100               	movlb	0	; () banked
  9616  0002D2  6F8E               	movwf	printf@f& (0+255),b
  9617  0002D4  0EFF               	movlw	high STR_7
  9618  0002D6  0100               	movlb	0	; () banked
  9619  0002D8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9620  0002DA  ECE9  F00E         	call	_printf	;wreg free
  9621                           
  9622                           ;UI.c: 127: lcdInst(0b11000000);;
  9623  0002DE  0EC0               	movlw	192
  9624  0002E0  EC6D  F030         	call	_lcdInst
  9625                           
  9626                           ;UI.c: 128: char month[] = "MMM";
  9627  0002E4  C14F  F0D6         	movff	UI@F3252,UI@month
  9628  0002E8  C150  F0D7         	movff	UI@F3252+1,UI@month+1
  9629  0002EC  C151  F0D8         	movff	UI@F3252+2,UI@month+2
  9630  0002F0  C152  F0D9         	movff	UI@F3252+3,UI@month+3
  9631                           
  9632                           ;UI.c: 129: switch(log_startTime[5]){
  9633  0002F4  D0C3               	goto	l9849
  9634  0002F6                     l9821:
  9635                           
  9636                           ;UI.c: 131: strcpy(month, "JAN");
  9637  0002F6  0ED6               	movlw	low UI@month
  9638  0002F8  0100               	movlb	0	; () banked
  9639  0002FA  6F80               	movwf	strcpy@to& (0+255),b
  9640  0002FC  0E00               	movlw	high UI@month
  9641  0002FE  0100               	movlb	0	; () banked
  9642  000300  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9643  000302  0EDA               	movlw	low STR_8
  9644  000304  0100               	movlb	0	; () banked
  9645  000306  6F82               	movwf	strcpy@from& (0+255),b
  9646  000308  0EFF               	movlw	high STR_8
  9647  00030A  0100               	movlb	0	; () banked
  9648  00030C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9649  00030E  ECCB  F02D         	call	_strcpy	;wreg free
  9650                           
  9651                           ;UI.c: 132: break;
  9652  000312  D0E6               	goto	l9851
  9653  000314                     l9823:
  9654                           
  9655                           ;UI.c: 134: strcpy(month, "FEB");
  9656  000314  0ED6               	movlw	low UI@month
  9657  000316  0100               	movlb	0	; () banked
  9658  000318  6F80               	movwf	strcpy@to& (0+255),b
  9659  00031A  0E00               	movlw	high UI@month
  9660  00031C  0100               	movlb	0	; () banked
  9661  00031E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9662  000320  0ECA               	movlw	low STR_9
  9663  000322  0100               	movlb	0	; () banked
  9664  000324  6F82               	movwf	strcpy@from& (0+255),b
  9665  000326  0EFF               	movlw	high STR_9
  9666  000328  0100               	movlb	0	; () banked
  9667  00032A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9668  00032C  ECCB  F02D         	call	_strcpy	;wreg free
  9669                           
  9670                           ;UI.c: 135: break;
  9671  000330  D0D7               	goto	l9851
  9672  000332                     l9825:
  9673                           
  9674                           ;UI.c: 137: strcpy(month, "MAR");
  9675  000332  0ED6               	movlw	low UI@month
  9676  000334  0100               	movlb	0	; () banked
  9677  000336  6F80               	movwf	strcpy@to& (0+255),b
  9678  000338  0E00               	movlw	high UI@month
  9679  00033A  0100               	movlb	0	; () banked
  9680  00033C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9681  00033E  0EE6               	movlw	low STR_10
  9682  000340  0100               	movlb	0	; () banked
  9683  000342  6F82               	movwf	strcpy@from& (0+255),b
  9684  000344  0EFF               	movlw	high STR_10
  9685  000346  0100               	movlb	0	; () banked
  9686  000348  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9687  00034A  ECCB  F02D         	call	_strcpy	;wreg free
  9688                           
  9689                           ;UI.c: 138: break;
  9690  00034E  D0C8               	goto	l9851
  9691  000350                     l9827:
  9692                           
  9693                           ;UI.c: 140: strcpy(month, "APR");
  9694  000350  0ED6               	movlw	low UI@month
  9695  000352  0100               	movlb	0	; () banked
  9696  000354  6F80               	movwf	strcpy@to& (0+255),b
  9697  000356  0E00               	movlw	high UI@month
  9698  000358  0100               	movlb	0	; () banked
  9699  00035A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9700  00035C  0EEA               	movlw	low STR_11
  9701  00035E  0100               	movlb	0	; () banked
  9702  000360  6F82               	movwf	strcpy@from& (0+255),b
  9703  000362  0EFF               	movlw	high STR_11
  9704  000364  0100               	movlb	0	; () banked
  9705  000366  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9706  000368  ECCB  F02D         	call	_strcpy	;wreg free
  9707                           
  9708                           ;UI.c: 141: break;
  9709  00036C  D0B9               	goto	l9851
  9710  00036E                     l9829:
  9711                           
  9712                           ;UI.c: 143: strcpy(month, "MAY");
  9713  00036E  0ED6               	movlw	low UI@month
  9714  000370  0100               	movlb	0	; () banked
  9715  000372  6F80               	movwf	strcpy@to& (0+255),b
  9716  000374  0E00               	movlw	high UI@month
  9717  000376  0100               	movlb	0	; () banked
  9718  000378  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9719  00037A  0EFA               	movlw	low STR_12
  9720  00037C  0100               	movlb	0	; () banked
  9721  00037E  6F82               	movwf	strcpy@from& (0+255),b
  9722  000380  0EFF               	movlw	high STR_12
  9723  000382  0100               	movlb	0	; () banked
  9724  000384  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9725  000386  ECCB  F02D         	call	_strcpy	;wreg free
  9726                           
  9727                           ;UI.c: 144: break;
  9728  00038A  D0AA               	goto	l9851
  9729  00038C                     l9831:
  9730                           
  9731                           ;UI.c: 146: strcpy(month, "JUN");
  9732  00038C  0ED6               	movlw	low UI@month
  9733  00038E  0100               	movlb	0	; () banked
  9734  000390  6F80               	movwf	strcpy@to& (0+255),b
  9735  000392  0E00               	movlw	high UI@month
  9736  000394  0100               	movlb	0	; () banked
  9737  000396  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9738  000398  0EDE               	movlw	low STR_13
  9739  00039A  0100               	movlb	0	; () banked
  9740  00039C  6F82               	movwf	strcpy@from& (0+255),b
  9741  00039E  0EFF               	movlw	high STR_13
  9742  0003A0  0100               	movlb	0	; () banked
  9743  0003A2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9744  0003A4  ECCB  F02D         	call	_strcpy	;wreg free
  9745                           
  9746                           ;UI.c: 147: break;
  9747  0003A8  D09B               	goto	l9851
  9748  0003AA                     l9833:
  9749                           
  9750                           ;UI.c: 149: strcpy(month, "JUL");
  9751  0003AA  0ED6               	movlw	low UI@month
  9752  0003AC  0100               	movlb	0	; () banked
  9753  0003AE  6F80               	movwf	strcpy@to& (0+255),b
  9754  0003B0  0E00               	movlw	high UI@month
  9755  0003B2  0100               	movlb	0	; () banked
  9756  0003B4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9757  0003B6  0ED6               	movlw	low STR_14
  9758  0003B8  0100               	movlb	0	; () banked
  9759  0003BA  6F82               	movwf	strcpy@from& (0+255),b
  9760  0003BC  0EFF               	movlw	high STR_14
  9761  0003BE  0100               	movlb	0	; () banked
  9762  0003C0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9763  0003C2  ECCB  F02D         	call	_strcpy	;wreg free
  9764                           
  9765                           ;UI.c: 150: break;
  9766  0003C6  D08C               	goto	l9851
  9767  0003C8                     l9835:
  9768                           
  9769                           ;UI.c: 152: strcpy(month, "AUG");
  9770  0003C8  0ED6               	movlw	low UI@month
  9771  0003CA  0100               	movlb	0	; () banked
  9772  0003CC  6F80               	movwf	strcpy@to& (0+255),b
  9773  0003CE  0E00               	movlw	high UI@month
  9774  0003D0  0100               	movlb	0	; () banked
  9775  0003D2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9776  0003D4  0ED2               	movlw	low STR_15
  9777  0003D6  0100               	movlb	0	; () banked
  9778  0003D8  6F82               	movwf	strcpy@from& (0+255),b
  9779  0003DA  0EFF               	movlw	high STR_15
  9780  0003DC  0100               	movlb	0	; () banked
  9781  0003DE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9782  0003E0  ECCB  F02D         	call	_strcpy	;wreg free
  9783                           
  9784                           ;UI.c: 153: break;
  9785  0003E4  D07D               	goto	l9851
  9786  0003E6                     l9837:
  9787                           
  9788                           ;UI.c: 155: strcpy(month, "SEP");
  9789  0003E6  0ED6               	movlw	low UI@month
  9790  0003E8  0100               	movlb	0	; () banked
  9791  0003EA  6F80               	movwf	strcpy@to& (0+255),b
  9792  0003EC  0E00               	movlw	high UI@month
  9793  0003EE  0100               	movlb	0	; () banked
  9794  0003F0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9795  0003F2  0EE2               	movlw	low STR_16
  9796  0003F4  0100               	movlb	0	; () banked
  9797  0003F6  6F82               	movwf	strcpy@from& (0+255),b
  9798  0003F8  0EFF               	movlw	high STR_16
  9799  0003FA  0100               	movlb	0	; () banked
  9800  0003FC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9801  0003FE  ECCB  F02D         	call	_strcpy	;wreg free
  9802                           
  9803                           ;UI.c: 156: break;
  9804  000402  D06E               	goto	l9851
  9805  000404                     l9839:
  9806                           
  9807                           ;UI.c: 158: strcpy(month, "OCT");
  9808  000404  0ED6               	movlw	low UI@month
  9809  000406  0100               	movlb	0	; () banked
  9810  000408  6F80               	movwf	strcpy@to& (0+255),b
  9811  00040A  0E00               	movlw	high UI@month
  9812  00040C  0100               	movlb	0	; () banked
  9813  00040E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9814  000410  0EF2               	movlw	low STR_17
  9815  000412  0100               	movlb	0	; () banked
  9816  000414  6F82               	movwf	strcpy@from& (0+255),b
  9817  000416  0EFF               	movlw	high STR_17
  9818  000418  0100               	movlb	0	; () banked
  9819  00041A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9820  00041C  ECCB  F02D         	call	_strcpy	;wreg free
  9821                           
  9822                           ;UI.c: 159: break;
  9823  000420  D05F               	goto	l9851
  9824  000422                     l9841:
  9825                           
  9826                           ;UI.c: 161: strcpy(month, "NOV");
  9827  000422  0ED6               	movlw	low UI@month
  9828  000424  0100               	movlb	0	; () banked
  9829  000426  6F80               	movwf	strcpy@to& (0+255),b
  9830  000428  0E00               	movlw	high UI@month
  9831  00042A  0100               	movlb	0	; () banked
  9832  00042C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9833  00042E  0EF6               	movlw	low STR_18
  9834  000430  0100               	movlb	0	; () banked
  9835  000432  6F82               	movwf	strcpy@from& (0+255),b
  9836  000434  0EFF               	movlw	high STR_18
  9837  000436  0100               	movlb	0	; () banked
  9838  000438  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9839  00043A  ECCB  F02D         	call	_strcpy	;wreg free
  9840                           
  9841                           ;UI.c: 162: break;
  9842  00043E  D050               	goto	l9851
  9843  000440                     l9843:
  9844                           
  9845                           ;UI.c: 164: strcpy(month, "DEC");
  9846  000440  0ED6               	movlw	low UI@month
  9847  000442  0100               	movlb	0	; () banked
  9848  000444  6F80               	movwf	strcpy@to& (0+255),b
  9849  000446  0E00               	movlw	high UI@month
  9850  000448  0100               	movlb	0	; () banked
  9851  00044A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9852  00044C  0ECE               	movlw	low STR_19
  9853  00044E  0100               	movlb	0	; () banked
  9854  000450  6F82               	movwf	strcpy@from& (0+255),b
  9855  000452  0EFF               	movlw	high STR_19
  9856  000454  0100               	movlb	0	; () banked
  9857  000456  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9858  000458  ECCB  F02D         	call	_strcpy	;wreg free
  9859                           
  9860                           ;UI.c: 165: break;
  9861  00045C  D041               	goto	l9851
  9862  00045E                     l9845:
  9863                           
  9864                           ;UI.c: 167: strcpy(month, "ERR");
  9865  00045E  0ED6               	movlw	low UI@month
  9866  000460  0100               	movlb	0	; () banked
  9867  000462  6F80               	movwf	strcpy@to& (0+255),b
  9868  000464  0E00               	movlw	high UI@month
  9869  000466  0100               	movlb	0	; () banked
  9870  000468  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9871  00046A  0EEE               	movlw	low STR_20
  9872  00046C  0100               	movlb	0	; () banked
  9873  00046E  6F82               	movwf	strcpy@from& (0+255),b
  9874  000470  0EFF               	movlw	high STR_20
  9875  000472  0100               	movlb	0	; () banked
  9876  000474  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9877  000476  ECCB  F02D         	call	_strcpy	;wreg free
  9878                           
  9879                           ;UI.c: 169: }
  9880                           
  9881                           ;UI.c: 168: break;
  9882  00047A  D032               	goto	l9851
  9883  00047C                     l9849:
  9884  00047C  EE21  F00A         	lfsr	2,_log_startTime+10
  9885  000480  CFDE F0C4          	movff	postinc2,??_UI
  9886  000484  CFDD F0C5          	movff	postdec2,??_UI+1
  9887                           
  9888                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9889                           ; Switch size 1, requested type "space"
  9890                           ; Number of cases is 1, Range of values is 0 to 0
  9891                           ; switch strategies available:
  9892                           ; Name         Instructions Cycles
  9893                           ; simple_byte            4     3 (average)
  9894                           ;	Chosen strategy is simple_byte
  9895  000488  0100               	movlb	0	; () banked
  9896  00048A  51C5               	movf	(??_UI+1)& (0+255),w,b
  9897  00048C  0A00               	xorlw	0	; case 0
  9898  00048E  A4D8               	btfss	status,2,c
  9899  000490  D7E6               	goto	l9845
  9900                           
  9901                           ; BSR set to: 0
  9902                           ; Switch size 1, requested type "space"
  9903                           ; Number of cases is 12, Range of values is 1 to 12
  9904                           ; switch strategies available:
  9905                           ; Name         Instructions Cycles
  9906                           ; simple_byte           37    19 (average)
  9907                           ;	Chosen strategy is simple_byte
  9908  000492  0100               	movlb	0	; () banked
  9909  000494  51C4               	movf	??_UI& (0+255),w,b
  9910  000496  0A01               	xorlw	1	; case 1
  9911  000498  B4D8               	btfsc	status,2,c
  9912  00049A  D72D               	goto	l9821
  9913  00049C  0A03               	xorlw	3	; case 2
  9914  00049E  B4D8               	btfsc	status,2,c
  9915  0004A0  D739               	goto	l9823
  9916  0004A2  0A01               	xorlw	1	; case 3
  9917  0004A4  B4D8               	btfsc	status,2,c
  9918  0004A6  D745               	goto	l9825
  9919  0004A8  0A07               	xorlw	7	; case 4
  9920  0004AA  B4D8               	btfsc	status,2,c
  9921  0004AC  D751               	goto	l9827
  9922  0004AE  0A01               	xorlw	1	; case 5
  9923  0004B0  B4D8               	btfsc	status,2,c
  9924  0004B2  D75D               	goto	l9829
  9925  0004B4  0A03               	xorlw	3	; case 6
  9926  0004B6  B4D8               	btfsc	status,2,c
  9927  0004B8  D769               	goto	l9831
  9928  0004BA  0A01               	xorlw	1	; case 7
  9929  0004BC  B4D8               	btfsc	status,2,c
  9930  0004BE  D775               	goto	l9833
  9931  0004C0  0A0F               	xorlw	15	; case 8
  9932  0004C2  B4D8               	btfsc	status,2,c
  9933  0004C4  D781               	goto	l9835
  9934  0004C6  0A01               	xorlw	1	; case 9
  9935  0004C8  B4D8               	btfsc	status,2,c
  9936  0004CA  D78D               	goto	l9837
  9937  0004CC  0A03               	xorlw	3	; case 10
  9938  0004CE  B4D8               	btfsc	status,2,c
  9939  0004D0  D799               	goto	l9839
  9940  0004D2  0A01               	xorlw	1	; case 11
  9941  0004D4  B4D8               	btfsc	status,2,c
  9942  0004D6  D7A5               	goto	l9841
  9943  0004D8  0A07               	xorlw	7	; case 12
  9944  0004DA  B4D8               	btfsc	status,2,c
  9945  0004DC  D7B1               	goto	l9843
  9946  0004DE  D7BF               	goto	l9845
  9947  0004E0                     l9851:
  9948                           
  9949                           ;UI.c: 170: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  9950  0004E0  0EC2               	movlw	low STR_21
  9951  0004E2  0100               	movlb	0	; () banked
  9952  0004E4  6F8E               	movwf	printf@f& (0+255),b
  9953  0004E6  0EFA               	movlw	high STR_21
  9954  0004E8  0100               	movlb	0	; () banked
  9955  0004EA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9956  0004EC  C108  F090         	movff	_log_startTime+8,?_printf+2
  9957  0004F0  C109  F091         	movff	_log_startTime+9,?_printf+3
  9958  0004F4  0ED6               	movlw	low UI@month
  9959  0004F6  0100               	movlb	0	; () banked
  9960  0004F8  6F92               	movwf	(?_printf+4)& (0+255),b
  9961  0004FA  0E00               	movlw	high UI@month
  9962  0004FC  0100               	movlb	0	; () banked
  9963  0004FE  6F93               	movwf	(?_printf+5)& (0+255),b
  9964  000500  C104  F094         	movff	_log_startTime+4,?_printf+6
  9965  000504  C105  F095         	movff	_log_startTime+5,?_printf+7
  9966  000508  C102  F096         	movff	_log_startTime+2,?_printf+8
  9967  00050C  C103  F097         	movff	_log_startTime+3,?_printf+9
  9968  000510  C100  F098         	movff	_log_startTime,?_printf+10
  9969  000514  C101  F099         	movff	_log_startTime+1,?_printf+11
  9970  000518  ECE9  F00E         	call	_printf	;wreg free
  9971                           
  9972                           ;UI.c: 172: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9973  00051C  0E00               	movlw	0
  9974  00051E  0100               	movlb	0	; () banked
  9975  000520  6FCC               	movwf	UI@i_435& (0+255),b
  9976  000522                     l9855:
  9977                           
  9978                           ; BSR set to: 0
  9979  000522  0E63               	movlw	99
  9980  000524  0100               	movlb	0	; () banked
  9981  000526  65CC               	cpfsgt	UI@i_435& (0+255),b
  9982  000528  D001               	goto	l9859
  9983  00052A  D00C               	goto	l9863
  9984  00052C                     l9859:
  9985                           
  9986                           ; BSR set to: 0
  9987  00052C  0E68               	movlw	104
  9988  00052E  0100               	movlb	0	; () banked
  9989  000530  6FC4               	movwf	??_UI& (0+255),b
  9990  000532  0EE4               	movlw	228
  9991  000534                     u11397:
  9992  000534  2EE8               	decfsz	wreg,f,c
  9993  000536  D7FE               	bra	u11397
  9994  000538  2FC4               	decfsz	??_UI& (0+255),f,b
  9995  00053A  D7FC               	bra	u11397
  9996  00053C  F000               	nop	
  9997  00053E  0100               	movlb	0	; () banked
  9998  000540  2BCC               	incf	UI@i_435& (0+255),f,b
  9999  000542  D7EF               	goto	l9855
 10000  000544                     l9863:
 10001                           
 10002                           ; BSR set to: 0
 10003  000544  0100               	movlb	0	; () banked
 10004  000546  51F8               	movf	_logstate& (0+255),w,b
 10005  000548  0100               	movlb	0	; () banked
 10006  00054A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10007  00054C  B4D8               	btfsc	status,2,c
 10008  00054E  0012               	return	
 10009                           
 10010                           ; BSR set to: 0
 10011                           ;UI.c: 173: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10012                           
 10013                           ; BSR set to: 0
 10014                           
 10015                           ; BSR set to: 0
 10016  000550  0E00               	movlw	0
 10017  000552  0100               	movlb	0	; () banked
 10018  000554  6FCD               	movwf	UI@i_436& (0+255),b
 10019  000556                     l9869:
 10020                           
 10021                           ; BSR set to: 0
 10022  000556  0E63               	movlw	99
 10023  000558  0100               	movlb	0	; () banked
 10024  00055A  65CD               	cpfsgt	UI@i_436& (0+255),b
 10025  00055C  D001               	goto	l9873
 10026  00055E  D00C               	goto	l9877
 10027  000560                     l9873:
 10028                           
 10029                           ; BSR set to: 0
 10030  000560  0E68               	movlw	104
 10031  000562  0100               	movlb	0	; () banked
 10032  000564  6FC4               	movwf	??_UI& (0+255),b
 10033  000566  0EE4               	movlw	228
 10034  000568                     u11407:
 10035  000568  2EE8               	decfsz	wreg,f,c
 10036  00056A  D7FE               	bra	u11407
 10037  00056C  2FC4               	decfsz	??_UI& (0+255),f,b
 10038  00056E  D7FC               	bra	u11407
 10039  000570  F000               	nop	
 10040  000572  0100               	movlb	0	; () banked
 10041  000574  2BCD               	incf	UI@i_436& (0+255),f,b
 10042  000576  D7EF               	goto	l9869
 10043  000578                     l9877:
 10044                           
 10045                           ; BSR set to: 0
 10046  000578  0100               	movlb	0	; () banked
 10047  00057A  51F8               	movf	_logstate& (0+255),w,b
 10048  00057C  0100               	movlb	0	; () banked
 10049  00057E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10050  000580  B4D8               	btfsc	status,2,c
 10051  000582  0012               	return	
 10052                           
 10053                           ; BSR set to: 0
 10054                           ;UI.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
 10055                           
 10056                           ; BSR set to: 0
 10057                           
 10058                           ; BSR set to: 0
 10059  000584  0E01               	movlw	1
 10060  000586  EC6D  F030         	call	_lcdInst
 10061  00058A  0E68               	movlw	104
 10062  00058C  0100               	movlb	0	; () banked
 10063  00058E  6FC4               	movwf	??_UI& (0+255),b
 10064  000590  0EE4               	movlw	228
 10065  000592                     u11417:
 10066  000592  2EE8               	decfsz	wreg,f,c
 10067  000594  D7FE               	bra	u11417
 10068  000596  2FC4               	decfsz	??_UI& (0+255),f,b
 10069  000598  D7FC               	bra	u11417
 10070  00059A  F000               	nop	
 10071                           
 10072                           ;UI.c: 176: lcdInst(0b10000000);;
 10073  00059C  0E80               	movlw	128
 10074  00059E  EC6D  F030         	call	_lcdInst
 10075                           
 10076                           ;UI.c: 177: printf("DURATION:");
 10077  0005A2  0E9A               	movlw	low STR_22
 10078  0005A4  0100               	movlb	0	; () banked
 10079  0005A6  6F8E               	movwf	printf@f& (0+255),b
 10080  0005A8  0EFF               	movlw	high STR_22
 10081  0005AA  0100               	movlb	0	; () banked
 10082  0005AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10083  0005AE  ECE9  F00E         	call	_printf	;wreg free
 10084                           
 10085                           ;UI.c: 178: lcdInst(0b11000000);;
 10086  0005B2  0EC0               	movlw	192
 10087  0005B4  EC6D  F030         	call	_lcdInst
 10088                           
 10089                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
 10090  0005B8  0E0E               	movlw	14
 10091  0005BA  0100               	movlb	0	; () banked
 10092  0005BC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
 10093  0005BE  0E10               	movlw	16
 10094  0005C0  6F82               	movwf	___awmod@divisor& (0+255),b
 10095  0005C2  C0F6  F080         	movff	_log_total_time,___awmod@dividend
 10096  0005C6  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
 10097  0005CA  EC4B  F028         	call	___awmod	;wreg free
 10098  0005CE  C080  F0C6         	movff	?___awmod,_UI$2443
 10099  0005D2  C081  F0C7         	movff	?___awmod+1,_UI$2443+1
 10100                           
 10101                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
 10102  0005D6  0E48               	movlw	low STR_23
 10103  0005D8  0100               	movlb	0	; () banked
 10104  0005DA  6F8E               	movwf	printf@f& (0+255),b
 10105  0005DC  0EFF               	movlw	high STR_23
 10106  0005DE  0100               	movlb	0	; () banked
 10107  0005E0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10108  0005E2  0E0E               	movlw	14
 10109  0005E4  0100               	movlb	0	; () banked
 10110  0005E6  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
 10111  0005E8  0E10               	movlw	16
 10112  0005EA  6F82               	movwf	___awmod@divisor& (0+255),b
 10113  0005EC  C0F6  F080         	movff	_log_total_time,___awmod@dividend
 10114  0005F0  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
 10115  0005F4  EC4B  F028         	call	___awmod	;wreg free
 10116  0005F8  C080  F086         	movff	?___awmod,___awdiv@dividend
 10117  0005FC  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
 10118  000600  0E00               	movlw	0
 10119  000602  0100               	movlb	0	; () banked
 10120  000604  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
 10121  000606  0E3C               	movlw	60
 10122  000608  6F88               	movwf	___awdiv@divisor& (0+255),b
 10123  00060A  EC39  F027         	call	___awdiv	;wreg free
 10124  00060E  C086  F090         	movff	?___awdiv,?_printf+2
 10125  000612  C087  F091         	movff	?___awdiv+1,?_printf+3
 10126  000616  C0C6  F080         	movff	_UI$2443,___awmod@dividend
 10127  00061A  C0C7  F081         	movff	_UI$2443+1,___awmod@dividend+1
 10128  00061E  0E00               	movlw	0
 10129  000620  0100               	movlb	0	; () banked
 10130  000622  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
 10131  000624  0E3C               	movlw	60
 10132  000626  6F82               	movwf	___awmod@divisor& (0+255),b
 10133  000628  EC4B  F028         	call	___awmod	;wreg free
 10134  00062C  C080  F092         	movff	?___awmod,?_printf+4
 10135  000630  C081  F093         	movff	?___awmod+1,?_printf+5
 10136  000634  ECE9  F00E         	call	_printf	;wreg free
 10137                           
 10138                           ;UI.c: 181: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10139  000638  0E00               	movlw	0
 10140  00063A  0100               	movlb	0	; () banked
 10141  00063C  6FCE               	movwf	UI@i_439& (0+255),b
 10142  00063E                     l9897:
 10143                           
 10144                           ; BSR set to: 0
 10145  00063E  0E63               	movlw	99
 10146  000640  0100               	movlb	0	; () banked
 10147  000642  65CE               	cpfsgt	UI@i_439& (0+255),b
 10148  000644  D001               	goto	l9901
 10149  000646  D00C               	goto	l9905
 10150  000648                     l9901:
 10151                           
 10152                           ; BSR set to: 0
 10153  000648  0E68               	movlw	104
 10154  00064A  0100               	movlb	0	; () banked
 10155  00064C  6FC4               	movwf	??_UI& (0+255),b
 10156  00064E  0EE4               	movlw	228
 10157  000650                     u11427:
 10158  000650  2EE8               	decfsz	wreg,f,c
 10159  000652  D7FE               	bra	u11427
 10160  000654  2FC4               	decfsz	??_UI& (0+255),f,b
 10161  000656  D7FC               	bra	u11427
 10162  000658  F000               	nop	
 10163  00065A  0100               	movlb	0	; () banked
 10164  00065C  2BCE               	incf	UI@i_439& (0+255),f,b
 10165  00065E  D7EF               	goto	l9897
 10166  000660                     l9905:
 10167                           
 10168                           ; BSR set to: 0
 10169  000660  0100               	movlb	0	; () banked
 10170  000662  51F8               	movf	_logstate& (0+255),w,b
 10171  000664  0100               	movlb	0	; () banked
 10172  000666  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10173  000668  B4D8               	btfsc	status,2,c
 10174  00066A  0012               	return	
 10175                           
 10176                           ; BSR set to: 0
 10177                           ;UI.c: 182: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10178                           
 10179                           ; BSR set to: 0
 10180                           
 10181                           ; BSR set to: 0
 10182  00066C  0E00               	movlw	0
 10183  00066E  0100               	movlb	0	; () banked
 10184  000670  6FCF               	movwf	UI@i_440& (0+255),b
 10185  000672                     l9911:
 10186                           
 10187                           ; BSR set to: 0
 10188  000672  0E63               	movlw	99
 10189  000674  0100               	movlb	0	; () banked
 10190  000676  65CF               	cpfsgt	UI@i_440& (0+255),b
 10191  000678  D001               	goto	l9915
 10192  00067A  D00C               	goto	l9919
 10193  00067C                     l9915:
 10194                           
 10195                           ; BSR set to: 0
 10196  00067C  0E68               	movlw	104
 10197  00067E  0100               	movlb	0	; () banked
 10198  000680  6FC4               	movwf	??_UI& (0+255),b
 10199  000682  0EE4               	movlw	228
 10200  000684                     u11437:
 10201  000684  2EE8               	decfsz	wreg,f,c
 10202  000686  D7FE               	bra	u11437
 10203  000688  2FC4               	decfsz	??_UI& (0+255),f,b
 10204  00068A  D7FC               	bra	u11437
 10205  00068C  F000               	nop	
 10206  00068E  0100               	movlb	0	; () banked
 10207  000690  2BCF               	incf	UI@i_440& (0+255),f,b
 10208  000692  D7EF               	goto	l9911
 10209  000694                     l9919:
 10210                           
 10211                           ; BSR set to: 0
 10212  000694  0100               	movlb	0	; () banked
 10213  000696  51F8               	movf	_logstate& (0+255),w,b
 10214  000698  0100               	movlb	0	; () banked
 10215  00069A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10216  00069C  B4D8               	btfsc	status,2,c
 10217  00069E  0012               	return	
 10218                           
 10219                           ; BSR set to: 0
 10220                           ;UI.c: 184: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
 10221                           
 10222                           ; BSR set to: 0
 10223                           
 10224                           ; BSR set to: 0
 10225  0006A0  0E01               	movlw	1
 10226  0006A2  EC6D  F030         	call	_lcdInst
 10227  0006A6  0E68               	movlw	104
 10228  0006A8  0100               	movlb	0	; () banked
 10229  0006AA  6FC4               	movwf	??_UI& (0+255),b
 10230  0006AC  0EE4               	movlw	228
 10231  0006AE                     u11447:
 10232  0006AE  2EE8               	decfsz	wreg,f,c
 10233  0006B0  D7FE               	bra	u11447
 10234  0006B2  2FC4               	decfsz	??_UI& (0+255),f,b
 10235  0006B4  D7FC               	bra	u11447
 10236  0006B6  F000               	nop	
 10237                           
 10238                           ;UI.c: 185: lcdInst(0b10000000);;
 10239  0006B8  0E80               	movlw	128
 10240  0006BA  EC6D  F030         	call	_lcdInst
 10241                           
 10242                           ;UI.c: 186: printf(" -- POP  CAN -- ");
 10243  0006BE  0E4B               	movlw	low STR_24
 10244  0006C0  0100               	movlb	0	; () banked
 10245  0006C2  6F8E               	movwf	printf@f& (0+255),b
 10246  0006C4  0EFD               	movlw	high STR_24
 10247  0006C6  0100               	movlb	0	; () banked
 10248  0006C8  6F8F               	movwf	(printf@f+1)& (0+255),b
 10249  0006CA  ECE9  F00E         	call	_printf	;wreg free
 10250                           
 10251                           ;UI.c: 187: lcdInst(0b11000000);;
 10252  0006CE  0EC0               	movlw	192
 10253  0006D0  EC6D  F030         	call	_lcdInst
 10254                           
 10255                           ;UI.c: 188: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
 10256  0006D4  0E28               	movlw	low STR_25
 10257  0006D6  0100               	movlb	0	; () banked
 10258  0006D8  6F8E               	movwf	printf@f& (0+255),b
 10259  0006DA  0EFE               	movlw	high STR_25
 10260  0006DC  0100               	movlb	0	; () banked
 10261  0006DE  6F8F               	movwf	(printf@f+1)& (0+255),b
 10262  0006E0  C0F4  F090         	movff	_log_count_pop_no_tab,?_printf+2
 10263  0006E4  C0F5  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
 10264  0006E8  C143  F092         	movff	_log_count_pop_w_tab,?_printf+4
 10265  0006EC  C144  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
 10266  0006F0  ECE9  F00E         	call	_printf	;wreg free
 10267                           
 10268                           ;UI.c: 190: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10269  0006F4  0E00               	movlw	0
 10270  0006F6  0100               	movlb	0	; () banked
 10271  0006F8  6FD0               	movwf	UI@i_443& (0+255),b
 10272  0006FA                     l9937:
 10273                           
 10274                           ; BSR set to: 0
 10275  0006FA  0E63               	movlw	99
 10276  0006FC  0100               	movlb	0	; () banked
 10277  0006FE  65D0               	cpfsgt	UI@i_443& (0+255),b
 10278  000700  D001               	goto	l9941
 10279  000702  D00C               	goto	l9945
 10280  000704                     l9941:
 10281                           
 10282                           ; BSR set to: 0
 10283  000704  0E68               	movlw	104
 10284  000706  0100               	movlb	0	; () banked
 10285  000708  6FC4               	movwf	??_UI& (0+255),b
 10286  00070A  0EE4               	movlw	228
 10287  00070C                     u11457:
 10288  00070C  2EE8               	decfsz	wreg,f,c
 10289  00070E  D7FE               	bra	u11457
 10290  000710  2FC4               	decfsz	??_UI& (0+255),f,b
 10291  000712  D7FC               	bra	u11457
 10292  000714  F000               	nop	
 10293  000716  0100               	movlb	0	; () banked
 10294  000718  2BD0               	incf	UI@i_443& (0+255),f,b
 10295  00071A  D7EF               	goto	l9937
 10296  00071C                     l9945:
 10297                           
 10298                           ; BSR set to: 0
 10299  00071C  0100               	movlb	0	; () banked
 10300  00071E  51F8               	movf	_logstate& (0+255),w,b
 10301  000720  0100               	movlb	0	; () banked
 10302  000722  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10303  000724  B4D8               	btfsc	status,2,c
 10304  000726  0012               	return	
 10305                           
 10306                           ; BSR set to: 0
 10307                           ;UI.c: 191: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10308                           
 10309                           ; BSR set to: 0
 10310                           
 10311                           ; BSR set to: 0
 10312  000728  0E00               	movlw	0
 10313  00072A  0100               	movlb	0	; () banked
 10314  00072C  6FD1               	movwf	UI@i_444& (0+255),b
 10315  00072E                     l9951:
 10316                           
 10317                           ; BSR set to: 0
 10318  00072E  0E63               	movlw	99
 10319  000730  0100               	movlb	0	; () banked
 10320  000732  65D1               	cpfsgt	UI@i_444& (0+255),b
 10321  000734  D001               	goto	l9955
 10322  000736  D00C               	goto	l9959
 10323  000738                     l9955:
 10324                           
 10325                           ; BSR set to: 0
 10326  000738  0E68               	movlw	104
 10327  00073A  0100               	movlb	0	; () banked
 10328  00073C  6FC4               	movwf	??_UI& (0+255),b
 10329  00073E  0EE4               	movlw	228
 10330  000740                     u11467:
 10331  000740  2EE8               	decfsz	wreg,f,c
 10332  000742  D7FE               	bra	u11467
 10333  000744  2FC4               	decfsz	??_UI& (0+255),f,b
 10334  000746  D7FC               	bra	u11467
 10335  000748  F000               	nop	
 10336  00074A  0100               	movlb	0	; () banked
 10337  00074C  2BD1               	incf	UI@i_444& (0+255),f,b
 10338  00074E  D7EF               	goto	l9951
 10339  000750                     l9959:
 10340                           
 10341                           ; BSR set to: 0
 10342  000750  0100               	movlb	0	; () banked
 10343  000752  51F8               	movf	_logstate& (0+255),w,b
 10344  000754  0100               	movlb	0	; () banked
 10345  000756  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10346  000758  B4D8               	btfsc	status,2,c
 10347  00075A  0012               	return	
 10348                           
 10349                           ; BSR set to: 0
 10350                           ;UI.c: 193: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
 10351                           
 10352                           ; BSR set to: 0
 10353                           
 10354                           ; BSR set to: 0
 10355  00075C  0E01               	movlw	1
 10356  00075E  EC6D  F030         	call	_lcdInst
 10357  000762  0E68               	movlw	104
 10358  000764  0100               	movlb	0	; () banked
 10359  000766  6FC4               	movwf	??_UI& (0+255),b
 10360  000768  0EE4               	movlw	228
 10361  00076A                     u11477:
 10362  00076A  2EE8               	decfsz	wreg,f,c
 10363  00076C  D7FE               	bra	u11477
 10364  00076E  2FC4               	decfsz	??_UI& (0+255),f,b
 10365  000770  D7FC               	bra	u11477
 10366  000772  F000               	nop	
 10367                           
 10368                           ;UI.c: 194: lcdInst(0b10000000);;
 10369  000774  0E80               	movlw	128
 10370  000776  EC6D  F030         	call	_lcdInst
 10371                           
 10372                           ;UI.c: 195: printf(" -- SOUP CAN -- ");
 10373  00077A  0E5C               	movlw	low STR_26
 10374  00077C  0100               	movlb	0	; () banked
 10375  00077E  6F8E               	movwf	printf@f& (0+255),b
 10376  000780  0EFD               	movlw	high STR_26
 10377  000782  0100               	movlb	0	; () banked
 10378  000784  6F8F               	movwf	(printf@f+1)& (0+255),b
 10379  000786  ECE9  F00E         	call	_printf	;wreg free
 10380                           
 10381                           ;UI.c: 196: lcdInst(0b11000000);;
 10382  00078A  0EC0               	movlw	192
 10383  00078C  EC6D  F030         	call	_lcdInst
 10384                           
 10385                           ;UI.c: 197: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
 10386  000790  0E17               	movlw	low STR_27
 10387  000792  0100               	movlb	0	; () banked
 10388  000794  6F8E               	movwf	printf@f& (0+255),b
 10389  000796  0EFE               	movlw	high STR_27
 10390  000798  0100               	movlb	0	; () banked
 10391  00079A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10392  00079C  C13F  F090         	movff	_log_count_can_no_lab,?_printf+2
 10393  0007A0  C140  F091         	movff	_log_count_can_no_lab+1,?_printf+3
 10394  0007A4  C141  F092         	movff	_log_count_can_w_lab,?_printf+4
 10395  0007A8  C142  F093         	movff	_log_count_can_w_lab+1,?_printf+5
 10396  0007AC  ECE9  F00E         	call	_printf	;wreg free
 10397                           
 10398                           ;UI.c: 199: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10399  0007B0  0E00               	movlw	0
 10400  0007B2  0100               	movlb	0	; () banked
 10401  0007B4  6FD2               	movwf	UI@i_447& (0+255),b
 10402  0007B6                     l9977:
 10403                           
 10404                           ; BSR set to: 0
 10405  0007B6  0E63               	movlw	99
 10406  0007B8  0100               	movlb	0	; () banked
 10407  0007BA  65D2               	cpfsgt	UI@i_447& (0+255),b
 10408  0007BC  D001               	goto	l9981
 10409  0007BE  D00C               	goto	l9985
 10410  0007C0                     l9981:
 10411                           
 10412                           ; BSR set to: 0
 10413  0007C0  0E68               	movlw	104
 10414  0007C2  0100               	movlb	0	; () banked
 10415  0007C4  6FC4               	movwf	??_UI& (0+255),b
 10416  0007C6  0EE4               	movlw	228
 10417  0007C8                     u11487:
 10418  0007C8  2EE8               	decfsz	wreg,f,c
 10419  0007CA  D7FE               	bra	u11487
 10420  0007CC  2FC4               	decfsz	??_UI& (0+255),f,b
 10421  0007CE  D7FC               	bra	u11487
 10422  0007D0  F000               	nop	
 10423  0007D2  0100               	movlb	0	; () banked
 10424  0007D4  2BD2               	incf	UI@i_447& (0+255),f,b
 10425  0007D6  D7EF               	goto	l9977
 10426  0007D8                     l9985:
 10427                           
 10428                           ; BSR set to: 0
 10429  0007D8  0100               	movlb	0	; () banked
 10430  0007DA  51F8               	movf	_logstate& (0+255),w,b
 10431  0007DC  0100               	movlb	0	; () banked
 10432  0007DE  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10433  0007E0  B4D8               	btfsc	status,2,c
 10434  0007E2  0012               	return	
 10435                           
 10436                           ; BSR set to: 0
 10437                           ;UI.c: 200: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10438                           
 10439                           ; BSR set to: 0
 10440                           
 10441                           ; BSR set to: 0
 10442  0007E4  0E00               	movlw	0
 10443  0007E6  0100               	movlb	0	; () banked
 10444  0007E8  6FD3               	movwf	UI@i_448& (0+255),b
 10445  0007EA                     l9991:
 10446                           
 10447                           ; BSR set to: 0
 10448  0007EA  0E63               	movlw	99
 10449  0007EC  0100               	movlb	0	; () banked
 10450  0007EE  65D3               	cpfsgt	UI@i_448& (0+255),b
 10451  0007F0  D001               	goto	l9995
 10452  0007F2  D00C               	goto	l9999
 10453  0007F4                     l9995:
 10454                           
 10455                           ; BSR set to: 0
 10456  0007F4  0E68               	movlw	104
 10457  0007F6  0100               	movlb	0	; () banked
 10458  0007F8  6FC4               	movwf	??_UI& (0+255),b
 10459  0007FA  0EE4               	movlw	228
 10460  0007FC                     u11497:
 10461  0007FC  2EE8               	decfsz	wreg,f,c
 10462  0007FE  D7FE               	bra	u11497
 10463  000800  2FC4               	decfsz	??_UI& (0+255),f,b
 10464  000802  D7FC               	bra	u11497
 10465  000804  F000               	nop	
 10466  000806  0100               	movlb	0	; () banked
 10467  000808  2BD3               	incf	UI@i_448& (0+255),f,b
 10468  00080A  D7EF               	goto	l9991
 10469  00080C                     l9999:
 10470                           
 10471                           ; BSR set to: 0
 10472  00080C  0100               	movlb	0	; () banked
 10473  00080E  51F8               	movf	_logstate& (0+255),w,b
 10474  000810  0100               	movlb	0	; () banked
 10475  000812  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10476  000814  B4D8               	btfsc	status,2,c
 10477  000816  0012               	return	
 10478                           
 10479                           ; BSR set to: 0
 10480                           ;UI.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
 10481                           
 10482                           ; BSR set to: 0
 10483                           
 10484                           ; BSR set to: 0
 10485  000818  0E01               	movlw	1
 10486  00081A  EC6D  F030         	call	_lcdInst
 10487  00081E  0E68               	movlw	104
 10488  000820  0100               	movlb	0	; () banked
 10489  000822  6FC4               	movwf	??_UI& (0+255),b
 10490  000824  0EE4               	movlw	228
 10491  000826                     u11507:
 10492  000826  2EE8               	decfsz	wreg,f,c
 10493  000828  D7FE               	bra	u11507
 10494  00082A  2FC4               	decfsz	??_UI& (0+255),f,b
 10495  00082C  D7FC               	bra	u11507
 10496  00082E  F000               	nop	
 10497                           
 10498                           ;UI.c: 203: lcdInst(0b10000000);;
 10499  000830  0E80               	movlw	128
 10500  000832  EC6D  F030         	call	_lcdInst
 10501                           
 10502                           ;UI.c: 204: printf("-- TOTAL CANS --");
 10503  000836  0E6D               	movlw	low STR_28
 10504  000838  0100               	movlb	0	; () banked
 10505  00083A  6F8E               	movwf	printf@f& (0+255),b
 10506  00083C  0EFD               	movlw	high STR_28
 10507  00083E  0100               	movlb	0	; () banked
 10508  000840  6F8F               	movwf	(printf@f+1)& (0+255),b
 10509  000842  ECE9  F00E         	call	_printf	;wreg free
 10510                           
 10511                           ;UI.c: 205: lcdInst(0b11000000);;
 10512  000846  0EC0               	movlw	192
 10513  000848  EC6D  F030         	call	_lcdInst
 10514                           
 10515                           ;UI.c: 206: printf("%d", log_count_total);
 10516  00084C  0E25               	movlw	low (STR_27+14)
 10517  00084E  0100               	movlb	0	; () banked
 10518  000850  6F8E               	movwf	printf@f& (0+255),b
 10519  000852  0EFE               	movlw	high (STR_27+14)
 10520  000854  0100               	movlb	0	; () banked
 10521  000856  6F8F               	movwf	(printf@f+1)& (0+255),b
 10522  000858  C145  F090         	movff	_log_count_total,?_printf+2
 10523  00085C  C146  F091         	movff	_log_count_total+1,?_printf+3
 10524  000860  ECE9  F00E         	call	_printf	;wreg free
 10525                           
 10526                           ;UI.c: 208: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10527  000864  0E00               	movlw	0
 10528  000866  0100               	movlb	0	; () banked
 10529  000868  6FD4               	movwf	UI@i_451& (0+255),b
 10530  00086A                     l10017:
 10531                           
 10532                           ; BSR set to: 0
 10533  00086A  0E63               	movlw	99
 10534  00086C  0100               	movlb	0	; () banked
 10535  00086E  65D4               	cpfsgt	UI@i_451& (0+255),b
 10536  000870  D001               	goto	l10021
 10537  000872  D00C               	goto	l10025
 10538  000874                     l10021:
 10539                           
 10540                           ; BSR set to: 0
 10541  000874  0E68               	movlw	104
 10542  000876  0100               	movlb	0	; () banked
 10543  000878  6FC4               	movwf	??_UI& (0+255),b
 10544  00087A  0EE4               	movlw	228
 10545  00087C                     u11517:
 10546  00087C  2EE8               	decfsz	wreg,f,c
 10547  00087E  D7FE               	bra	u11517
 10548  000880  2FC4               	decfsz	??_UI& (0+255),f,b
 10549  000882  D7FC               	bra	u11517
 10550  000884  F000               	nop	
 10551  000886  0100               	movlb	0	; () banked
 10552  000888  2BD4               	incf	UI@i_451& (0+255),f,b
 10553  00088A  D7EF               	goto	l10017
 10554  00088C                     l10025:
 10555                           
 10556                           ; BSR set to: 0
 10557  00088C  0100               	movlb	0	; () banked
 10558  00088E  51F8               	movf	_logstate& (0+255),w,b
 10559  000890  0100               	movlb	0	; () banked
 10560  000892  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10561  000894  B4D8               	btfsc	status,2,c
 10562  000896  0012               	return	
 10563                           
 10564                           ; BSR set to: 0
 10565                           ;UI.c: 209: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10566                           
 10567                           ; BSR set to: 0
 10568                           
 10569                           ; BSR set to: 0
 10570  000898  0E00               	movlw	0
 10571  00089A  0100               	movlb	0	; () banked
 10572  00089C  6FD5               	movwf	UI@i_452& (0+255),b
 10573  00089E                     l10031:
 10574                           
 10575                           ; BSR set to: 0
 10576  00089E  0E63               	movlw	99
 10577  0008A0  0100               	movlb	0	; () banked
 10578  0008A2  65D5               	cpfsgt	UI@i_452& (0+255),b
 10579  0008A4  D001               	goto	l10035
 10580  0008A6  D00C               	goto	l10039
 10581  0008A8                     l10035:
 10582                           
 10583                           ; BSR set to: 0
 10584  0008A8  0E68               	movlw	104
 10585  0008AA  0100               	movlb	0	; () banked
 10586  0008AC  6FC4               	movwf	??_UI& (0+255),b
 10587  0008AE  0EE4               	movlw	228
 10588  0008B0                     u11527:
 10589  0008B0  2EE8               	decfsz	wreg,f,c
 10590  0008B2  D7FE               	bra	u11527
 10591  0008B4  2FC4               	decfsz	??_UI& (0+255),f,b
 10592  0008B6  D7FC               	bra	u11527
 10593  0008B8  F000               	nop	
 10594  0008BA  0100               	movlb	0	; () banked
 10595  0008BC  2BD5               	incf	UI@i_452& (0+255),f,b
 10596  0008BE  D7EF               	goto	l10031
 10597  0008C0                     l10039:
 10598                           
 10599                           ; BSR set to: 0
 10600  0008C0  0100               	movlb	0	; () banked
 10601  0008C2  51F8               	movf	_logstate& (0+255),w,b
 10602  0008C4  0100               	movlb	0	; () banked
 10603  0008C6  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10604  0008C8  B4D8               	btfsc	status,2,c
 10605  0008CA  0012               	return	
 10606  0008CC                     l10043:
 10607  0008CC  0100               	movlb	0	; () banked
 10608  0008CE  51F8               	movf	_logstate& (0+255),w,b
 10609  0008D0  0100               	movlb	0	; () banked
 10610  0008D2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10611  0008D4  B4D8               	btfsc	status,2,c
 10612  0008D6  0012               	return	
 10613  0008D8  D44A               	goto	l9739
 10614  0008DA                     __end_of_UI:
 10615                           	opt stack 0
 10616                           tblptru	equ	0xFF8
 10617                           tblptrh	equ	0xFF7
 10618                           tblptrl	equ	0xFF6
 10619                           tablat	equ	0xFF5
 10620                           prodh	equ	0xFF4
 10621                           prodl	equ	0xFF3
 10622                           intcon	equ	0xFF2
 10623                           intcon2	equ	0xFF1
 10624                           intcon3	equ	0xFF0
 10625                           postinc0	equ	0xFEE
 10626                           wreg	equ	0xFE8
 10627                           postdec1	equ	0xFE5
 10628                           fsr1l	equ	0xFE1
 10629                           indf2	equ	0xFDF
 10630                           postinc2	equ	0xFDE
 10631                           postdec2	equ	0xFDD
 10632                           fsr2h	equ	0xFDA
 10633                           fsr2l	equ	0xFD9
 10634                           status	equ	0xFD8
 10635                           
 10636 ;; *************** function _printRTC *****************
 10637 ;; Defined at:
 10638 ;;		line 63 in file "RTC.c"
 10639 ;; Parameters:    Size  Location     Type
 10640 ;;		None
 10641 ;; Auto vars:     Size  Location     Type
 10642 ;;  i               2   66[BANK0 ] int 
 10643 ;;  INT_time       14   46[BANK0 ] int [7]
 10644 ;;  month           4   62[BANK0 ] unsigned char [4]
 10645 ;;  RTC_month       2   60[BANK0 ] int 
 10646 ;; Return value:  Size  Location     Type
 10647 ;;                  1    wreg      void 
 10648 ;; Registers used:
 10649 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10650 ;; Tracked objects:
 10651 ;;		On entry : 0/0
 10652 ;;		On exit  : 0/0
 10653 ;;		Unchanged: 0/0
 10654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10656 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10657 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10658 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10659 ;;Total ram usage:       25 bytes
 10660 ;; Hardware stack levels used:    1
 10661 ;; Hardware stack levels required when called:   10
 10662 ;; This function calls:
 10663 ;;		_getRTC
 10664 ;;		_lcdInst
 10665 ;;		_printf
 10666 ;;		_strcpy
 10667 ;; This function is called by:
 10668 ;;		_UI
 10669 ;;		_change_state_to_menu_start
 10670 ;; This function uses a non-reentrant model
 10671 ;;
 10672                           
 10673                           	psect	text28
 10674  0033F2                     __ptext28:
 10675                           	opt stack 0
 10676  0033F2                     _printRTC:
 10677                           	opt stack 18
 10678                           
 10679                           ;RTC.c: 64: getRTC();
 10680                           
 10681                           ; BSR set to: 0
 10682                           ;incstack = 0
 10683  0033F2  EC2E  F029         	call	_getRTC	;wreg free
 10684                           
 10685                           ;RTC.c: 65: char month[] = "MMM";
 10686  0033F6  C153  F0BE         	movff	printRTC@F3242,printRTC@month
 10687  0033FA  C154  F0BF         	movff	printRTC@F3242+1,printRTC@month+1
 10688  0033FE  C155  F0C0         	movff	printRTC@F3242+2,printRTC@month+2
 10689  003402  C156  F0C1         	movff	printRTC@F3242+3,printRTC@month+3
 10690                           
 10691                           ;RTC.c: 66: int INT_time[7];
 10692                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 10693  003406  0E00               	movlw	0
 10694  003408  0100               	movlb	0	; () banked
 10695  00340A  6FC3               	movwf	(printRTC@i+1)& (0+255),b
 10696  00340C  0E00               	movlw	0
 10697  00340E  6FC2               	movwf	printRTC@i& (0+255),b
 10698                           
 10699                           ; BSR set to: 0
 10700  003410  0100               	movlb	0	; () banked
 10701  003412  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10702  003414  D008               	goto	l7433
 10703  003416  0100               	movlb	0	; () banked
 10704  003418  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10705  00341A  E146               	bnz	l634
 10706  00341C  0E07               	movlw	7
 10707  00341E  0100               	movlb	0	; () banked
 10708  003420  5DC2               	subwf	printRTC@i& (0+255),w,b
 10709  003422  B0D8               	btfsc	status,0,c
 10710  003424  D041               	goto	l634
 10711  003426                     l7433:
 10712                           
 10713                           ; BSR set to: 0
 10714                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 10715  003426  0E1C               	movlw	low _time
 10716  003428  0100               	movlb	0	; () banked
 10717  00342A  25C2               	addwf	printRTC@i& (0+255),w,b
 10718  00342C  6ED9               	movwf	fsr2l,c
 10719  00342E  0E01               	movlw	high _time
 10720  003430  0100               	movlb	0	; () banked
 10721  003432  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10722  003434  6EDA               	movwf	fsr2h,c
 10723  003436  50DF               	movf	indf2,w,c
 10724  003438  0100               	movlb	0	; () banked
 10725  00343A  6FAB               	movwf	??_printRTC& (0+255),b
 10726  00343C  0100               	movlb	0	; () banked
 10727  00343E  3BAB               	swapf	??_printRTC& (0+255),f,b
 10728  003440  0E0F               	movlw	15
 10729  003442  17AB               	andwf	??_printRTC& (0+255),f,b
 10730  003444  0E0F               	movlw	15
 10731  003446  0100               	movlb	0	; () banked
 10732  003448  17AB               	andwf	??_printRTC& (0+255),f,b
 10733  00344A  0100               	movlb	0	; () banked
 10734  00344C  51AB               	movf	??_printRTC& (0+255),w,b
 10735  00344E  0D0A               	mullw	10
 10736  003450  0E1C               	movlw	low _time
 10737  003452  0100               	movlb	0	; () banked
 10738  003454  25C2               	addwf	printRTC@i& (0+255),w,b
 10739  003456  6ED9               	movwf	fsr2l,c
 10740  003458  0E01               	movlw	high _time
 10741  00345A  0100               	movlb	0	; () banked
 10742  00345C  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10743  00345E  6EDA               	movwf	fsr2h,c
 10744  003460  50DF               	movf	indf2,w,c
 10745  003462  0B0F               	andlw	15
 10746  003464  0100               	movlb	0	; () banked
 10747  003466  6FAC               	movwf	(??_printRTC+1)& (0+255),b
 10748  003468  6BAD               	clrf	(??_printRTC+2)& (0+255),b
 10749  00346A  50F3               	movf	prodl,w,c
 10750  00346C  0100               	movlb	0	; () banked
 10751  00346E  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
 10752  003470  50F4               	movf	prodh,w,c
 10753  003472  0100               	movlb	0	; () banked
 10754  003474  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
 10755  003476  90D8               	bcf	status,0,c
 10756  003478  0100               	movlb	0	; () banked
 10757  00347A  35C2               	rlcf	printRTC@i& (0+255),w,b
 10758  00347C  6ED9               	movwf	fsr2l,c
 10759  00347E  0100               	movlb	0	; () banked
 10760  003480  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
 10761  003482  6EDA               	movwf	fsr2h,c
 10762  003484  0EAE               	movlw	low printRTC@INT_time
 10763  003486  26D9               	addwf	fsr2l,f,c
 10764  003488  0E00               	movlw	high printRTC@INT_time
 10765  00348A  22DA               	addwfc	fsr2h,f,c
 10766  00348C  C0AC  FFDE         	movff	??_printRTC+1,postinc2
 10767  003490  C0AD  FFDD         	movff	??_printRTC+2,postdec2
 10768                           
 10769                           ; BSR set to: 0
 10770  003494  0100               	movlb	0	; () banked
 10771  003496  4BC2               	infsnz	printRTC@i& (0+255),f,b
 10772  003498  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
 10773                           
 10774                           ; BSR set to: 0
 10775  00349A  0100               	movlb	0	; () banked
 10776  00349C  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10777  00349E  D7C3               	goto	l7433
 10778  0034A0  0100               	movlb	0	; () banked
 10779  0034A2  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10780  0034A4  E101               	bnz	u6510
 10781  0034A6  D7BA               	goto	L10
 10782  0034A8                     u6510:
 10783  0034A8                     l634:
 10784                           
 10785                           ; BSR set to: 0
 10786                           ;RTC.c: 69: }
 10787                           ;RTC.c: 70: int RTC_month = INT_time[5];
 10788  0034A8  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
 10789  0034AC  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
 10790                           
 10791                           ;RTC.c: 72: switch(RTC_month){
 10792  0034B0  D0B4               	goto	l7465
 10793  0034B2                     l7439:
 10794                           
 10795                           ; BSR set to: 0
 10796                           ;RTC.c: 74: strcpy(month, "JAN");
 10797  0034B2  0EBE               	movlw	low printRTC@month
 10798  0034B4  0100               	movlb	0	; () banked
 10799  0034B6  6F80               	movwf	strcpy@to& (0+255),b
 10800  0034B8  0E00               	movlw	high printRTC@month
 10801  0034BA  0100               	movlb	0	; () banked
 10802  0034BC  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10803  0034BE  0EDA               	movlw	low STR_8
 10804  0034C0  0100               	movlb	0	; () banked
 10805  0034C2  6F82               	movwf	strcpy@from& (0+255),b
 10806  0034C4  0EFF               	movlw	high STR_8
 10807  0034C6  0100               	movlb	0	; () banked
 10808  0034C8  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10809  0034CA  ECCB  F02D         	call	_strcpy	;wreg free
 10810                           
 10811                           ;RTC.c: 75: break;
 10812  0034CE  D0D4               	goto	l7467
 10813  0034D0                     l7441:
 10814                           
 10815                           ;RTC.c: 77: strcpy(month, "FEB");
 10816  0034D0  0EBE               	movlw	low printRTC@month
 10817  0034D2  0100               	movlb	0	; () banked
 10818  0034D4  6F80               	movwf	strcpy@to& (0+255),b
 10819  0034D6  0E00               	movlw	high printRTC@month
 10820  0034D8  0100               	movlb	0	; () banked
 10821  0034DA  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10822  0034DC  0ECA               	movlw	low STR_9
 10823  0034DE  0100               	movlb	0	; () banked
 10824  0034E0  6F82               	movwf	strcpy@from& (0+255),b
 10825  0034E2  0EFF               	movlw	high STR_9
 10826  0034E4  0100               	movlb	0	; () banked
 10827  0034E6  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10828  0034E8  ECCB  F02D         	call	_strcpy	;wreg free
 10829                           
 10830                           ;RTC.c: 78: break;
 10831  0034EC  D0C5               	goto	l7467
 10832  0034EE                     l7443:
 10833                           
 10834                           ;RTC.c: 80: strcpy(month, "MAR");
 10835  0034EE  0EBE               	movlw	low printRTC@month
 10836  0034F0  0100               	movlb	0	; () banked
 10837  0034F2  6F80               	movwf	strcpy@to& (0+255),b
 10838  0034F4  0E00               	movlw	high printRTC@month
 10839  0034F6  0100               	movlb	0	; () banked
 10840  0034F8  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10841  0034FA  0EE6               	movlw	low STR_10
 10842  0034FC  0100               	movlb	0	; () banked
 10843  0034FE  6F82               	movwf	strcpy@from& (0+255),b
 10844  003500  0EFF               	movlw	high STR_10
 10845  003502  0100               	movlb	0	; () banked
 10846  003504  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10847  003506  ECCB  F02D         	call	_strcpy	;wreg free
 10848                           
 10849                           ;RTC.c: 81: break;
 10850  00350A  D0B6               	goto	l7467
 10851  00350C                     l7445:
 10852                           
 10853                           ;RTC.c: 83: strcpy(month, "APR");
 10854  00350C  0EBE               	movlw	low printRTC@month
 10855  00350E  0100               	movlb	0	; () banked
 10856  003510  6F80               	movwf	strcpy@to& (0+255),b
 10857  003512  0E00               	movlw	high printRTC@month
 10858  003514  0100               	movlb	0	; () banked
 10859  003516  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10860  003518  0EEA               	movlw	low STR_11
 10861  00351A  0100               	movlb	0	; () banked
 10862  00351C  6F82               	movwf	strcpy@from& (0+255),b
 10863  00351E  0EFF               	movlw	high STR_11
 10864  003520  0100               	movlb	0	; () banked
 10865  003522  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10866  003524  ECCB  F02D         	call	_strcpy	;wreg free
 10867                           
 10868                           ;RTC.c: 84: break;
 10869  003528  D0A7               	goto	l7467
 10870  00352A                     l7447:
 10871                           
 10872                           ;RTC.c: 86: strcpy(month, "MAY");
 10873  00352A  0EBE               	movlw	low printRTC@month
 10874  00352C  0100               	movlb	0	; () banked
 10875  00352E  6F80               	movwf	strcpy@to& (0+255),b
 10876  003530  0E00               	movlw	high printRTC@month
 10877  003532  0100               	movlb	0	; () banked
 10878  003534  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10879  003536  0EFA               	movlw	low STR_12
 10880  003538  0100               	movlb	0	; () banked
 10881  00353A  6F82               	movwf	strcpy@from& (0+255),b
 10882  00353C  0EFF               	movlw	high STR_12
 10883  00353E  0100               	movlb	0	; () banked
 10884  003540  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10885  003542  ECCB  F02D         	call	_strcpy	;wreg free
 10886                           
 10887                           ;RTC.c: 87: break;
 10888  003546  D098               	goto	l7467
 10889  003548                     l7449:
 10890                           
 10891                           ;RTC.c: 89: strcpy(month, "JUN");
 10892  003548  0EBE               	movlw	low printRTC@month
 10893  00354A  0100               	movlb	0	; () banked
 10894  00354C  6F80               	movwf	strcpy@to& (0+255),b
 10895  00354E  0E00               	movlw	high printRTC@month
 10896  003550  0100               	movlb	0	; () banked
 10897  003552  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10898  003554  0EDE               	movlw	low STR_13
 10899  003556  0100               	movlb	0	; () banked
 10900  003558  6F82               	movwf	strcpy@from& (0+255),b
 10901  00355A  0EFF               	movlw	high STR_13
 10902  00355C  0100               	movlb	0	; () banked
 10903  00355E  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10904  003560  ECCB  F02D         	call	_strcpy	;wreg free
 10905                           
 10906                           ;RTC.c: 90: break;
 10907  003564  D089               	goto	l7467
 10908  003566                     l7451:
 10909                           
 10910                           ;RTC.c: 92: strcpy(month, "JUL");
 10911  003566  0EBE               	movlw	low printRTC@month
 10912  003568  0100               	movlb	0	; () banked
 10913  00356A  6F80               	movwf	strcpy@to& (0+255),b
 10914  00356C  0E00               	movlw	high printRTC@month
 10915  00356E  0100               	movlb	0	; () banked
 10916  003570  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10917  003572  0ED6               	movlw	low STR_14
 10918  003574  0100               	movlb	0	; () banked
 10919  003576  6F82               	movwf	strcpy@from& (0+255),b
 10920  003578  0EFF               	movlw	high STR_14
 10921  00357A  0100               	movlb	0	; () banked
 10922  00357C  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10923  00357E  ECCB  F02D         	call	_strcpy	;wreg free
 10924                           
 10925                           ;RTC.c: 93: break;
 10926  003582  D07A               	goto	l7467
 10927  003584                     l7453:
 10928                           
 10929                           ;RTC.c: 95: strcpy(month, "AUG");
 10930  003584  0EBE               	movlw	low printRTC@month
 10931  003586  0100               	movlb	0	; () banked
 10932  003588  6F80               	movwf	strcpy@to& (0+255),b
 10933  00358A  0E00               	movlw	high printRTC@month
 10934  00358C  0100               	movlb	0	; () banked
 10935  00358E  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10936  003590  0ED2               	movlw	low STR_15
 10937  003592  0100               	movlb	0	; () banked
 10938  003594  6F82               	movwf	strcpy@from& (0+255),b
 10939  003596  0EFF               	movlw	high STR_15
 10940  003598  0100               	movlb	0	; () banked
 10941  00359A  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10942  00359C  ECCB  F02D         	call	_strcpy	;wreg free
 10943                           
 10944                           ;RTC.c: 96: break;
 10945  0035A0  D06B               	goto	l7467
 10946  0035A2                     l7455:
 10947                           
 10948                           ;RTC.c: 98: strcpy(month, "SEP");
 10949  0035A2  0EBE               	movlw	low printRTC@month
 10950  0035A4  0100               	movlb	0	; () banked
 10951  0035A6  6F80               	movwf	strcpy@to& (0+255),b
 10952  0035A8  0E00               	movlw	high printRTC@month
 10953  0035AA  0100               	movlb	0	; () banked
 10954  0035AC  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10955  0035AE  0EE2               	movlw	low STR_16
 10956  0035B0  0100               	movlb	0	; () banked
 10957  0035B2  6F82               	movwf	strcpy@from& (0+255),b
 10958  0035B4  0EFF               	movlw	high STR_16
 10959  0035B6  0100               	movlb	0	; () banked
 10960  0035B8  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10961  0035BA  ECCB  F02D         	call	_strcpy	;wreg free
 10962                           
 10963                           ;RTC.c: 99: break;
 10964  0035BE  D05C               	goto	l7467
 10965  0035C0                     l7457:
 10966                           
 10967                           ;RTC.c: 101: strcpy(month, "OCT");
 10968  0035C0  0EBE               	movlw	low printRTC@month
 10969  0035C2  0100               	movlb	0	; () banked
 10970  0035C4  6F80               	movwf	strcpy@to& (0+255),b
 10971  0035C6  0E00               	movlw	high printRTC@month
 10972  0035C8  0100               	movlb	0	; () banked
 10973  0035CA  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10974  0035CC  0EF2               	movlw	low STR_17
 10975  0035CE  0100               	movlb	0	; () banked
 10976  0035D0  6F82               	movwf	strcpy@from& (0+255),b
 10977  0035D2  0EFF               	movlw	high STR_17
 10978  0035D4  0100               	movlb	0	; () banked
 10979  0035D6  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10980  0035D8  ECCB  F02D         	call	_strcpy	;wreg free
 10981                           
 10982                           ;RTC.c: 102: break;
 10983  0035DC  D04D               	goto	l7467
 10984  0035DE                     l7459:
 10985                           
 10986                           ;RTC.c: 104: strcpy(month, "NOV");
 10987  0035DE  0EBE               	movlw	low printRTC@month
 10988  0035E0  0100               	movlb	0	; () banked
 10989  0035E2  6F80               	movwf	strcpy@to& (0+255),b
 10990  0035E4  0E00               	movlw	high printRTC@month
 10991  0035E6  0100               	movlb	0	; () banked
 10992  0035E8  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10993  0035EA  0EF6               	movlw	low STR_18
 10994  0035EC  0100               	movlb	0	; () banked
 10995  0035EE  6F82               	movwf	strcpy@from& (0+255),b
 10996  0035F0  0EFF               	movlw	high STR_18
 10997  0035F2  0100               	movlb	0	; () banked
 10998  0035F4  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10999  0035F6  ECCB  F02D         	call	_strcpy	;wreg free
 11000                           
 11001                           ;RTC.c: 105: break;
 11002  0035FA  D03E               	goto	l7467
 11003  0035FC                     l7461:
 11004                           
 11005                           ;RTC.c: 107: strcpy(month, "DEC");
 11006  0035FC  0EBE               	movlw	low printRTC@month
 11007  0035FE  0100               	movlb	0	; () banked
 11008  003600  6F80               	movwf	strcpy@to& (0+255),b
 11009  003602  0E00               	movlw	high printRTC@month
 11010  003604  0100               	movlb	0	; () banked
 11011  003606  6F81               	movwf	(strcpy@to+1)& (0+255),b
 11012  003608  0ECE               	movlw	low STR_19
 11013  00360A  0100               	movlb	0	; () banked
 11014  00360C  6F82               	movwf	strcpy@from& (0+255),b
 11015  00360E  0EFF               	movlw	high STR_19
 11016  003610  0100               	movlb	0	; () banked
 11017  003612  6F83               	movwf	(strcpy@from+1)& (0+255),b
 11018  003614  ECCB  F02D         	call	_strcpy	;wreg free
 11019                           
 11020                           ;RTC.c: 109: }
 11021                           
 11022                           ;RTC.c: 108: break;
 11023  003618  D02F               	goto	l7467
 11024  00361A                     l7465:
 11025  00361A  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
 11026  00361E  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
 11027                           
 11028                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11029                           ; Switch size 1, requested type "space"
 11030                           ; Number of cases is 1, Range of values is 0 to 0
 11031                           ; switch strategies available:
 11032                           ; Name         Instructions Cycles
 11033                           ; simple_byte            4     3 (average)
 11034                           ;	Chosen strategy is simple_byte
 11035  003622  0100               	movlb	0	; () banked
 11036  003624  51AC               	movf	(??_printRTC+1)& (0+255),w,b
 11037  003626  0A00               	xorlw	0	; case 0
 11038  003628  A4D8               	btfss	status,2,c
 11039  00362A  D026               	goto	l7467
 11040                           
 11041                           ; BSR set to: 0
 11042                           ; Switch size 1, requested type "space"
 11043                           ; Number of cases is 12, Range of values is 1 to 12
 11044                           ; switch strategies available:
 11045                           ; Name         Instructions Cycles
 11046                           ; simple_byte           37    19 (average)
 11047                           ;	Chosen strategy is simple_byte
 11048  00362C  0100               	movlb	0	; () banked
 11049  00362E  51AB               	movf	??_printRTC& (0+255),w,b
 11050  003630  0A01               	xorlw	1	; case 1
 11051  003632  B4D8               	btfsc	status,2,c
 11052  003634  D73E               	goto	l7439
 11053  003636  0A03               	xorlw	3	; case 2
 11054  003638  B4D8               	btfsc	status,2,c
 11055  00363A  D74A               	goto	l7441
 11056  00363C  0A01               	xorlw	1	; case 3
 11057  00363E  B4D8               	btfsc	status,2,c
 11058  003640  D756               	goto	l7443
 11059  003642  0A07               	xorlw	7	; case 4
 11060  003644  B4D8               	btfsc	status,2,c
 11061  003646  D762               	goto	l7445
 11062  003648  0A01               	xorlw	1	; case 5
 11063  00364A  B4D8               	btfsc	status,2,c
 11064  00364C  D76E               	goto	l7447
 11065  00364E  0A03               	xorlw	3	; case 6
 11066  003650  B4D8               	btfsc	status,2,c
 11067  003652  D77A               	goto	l7449
 11068  003654  0A01               	xorlw	1	; case 7
 11069  003656  B4D8               	btfsc	status,2,c
 11070  003658  D786               	goto	l7451
 11071  00365A  0A0F               	xorlw	15	; case 8
 11072  00365C  B4D8               	btfsc	status,2,c
 11073  00365E  D792               	goto	l7453
 11074  003660  0A01               	xorlw	1	; case 9
 11075  003662  B4D8               	btfsc	status,2,c
 11076  003664  D79E               	goto	l7455
 11077  003666  0A03               	xorlw	3	; case 10
 11078  003668  B4D8               	btfsc	status,2,c
 11079  00366A  D7AA               	goto	l7457
 11080  00366C  0A01               	xorlw	1	; case 11
 11081  00366E  B4D8               	btfsc	status,2,c
 11082  003670  D7B6               	goto	l7459
 11083  003672  0A07               	xorlw	7	; case 12
 11084  003674  B4D8               	btfsc	status,2,c
 11085  003676  D7C2               	goto	l7461
 11086  003678                     l7467:
 11087                           
 11088                           ;RTC.c: 110: lcdInst(0b10000000);;
 11089  003678  0E80               	movlw	128
 11090  00367A  EC6D  F030         	call	_lcdInst
 11091                           
 11092                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 11093  00367E  0EC2               	movlw	low STR_21
 11094  003680  0100               	movlb	0	; () banked
 11095  003682  6F8E               	movwf	printf@f& (0+255),b
 11096  003684  0EFA               	movlw	high STR_21
 11097  003686  0100               	movlb	0	; () banked
 11098  003688  6F8F               	movwf	(printf@f+1)& (0+255),b
 11099  00368A  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
 11100  00368E  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
 11101  003692  0EBE               	movlw	low printRTC@month
 11102  003694  0100               	movlb	0	; () banked
 11103  003696  6F92               	movwf	(?_printf+4)& (0+255),b
 11104  003698  0E00               	movlw	high printRTC@month
 11105  00369A  0100               	movlb	0	; () banked
 11106  00369C  6F93               	movwf	(?_printf+5)& (0+255),b
 11107  00369E  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
 11108  0036A2  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
 11109  0036A6  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
 11110  0036AA  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
 11111  0036AE  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
 11112  0036B2  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
 11113  0036B6  ECE9  F00E         	call	_printf	;wreg free
 11114  0036BA  0012               	return		;funcret
 11115  0036BC                     __end_of_printRTC:
 11116                           	opt stack 0
 11117                           tblptru	equ	0xFF8
 11118                           tblptrh	equ	0xFF7
 11119                           tblptrl	equ	0xFF6
 11120                           tablat	equ	0xFF5
 11121                           prodh	equ	0xFF4
 11122                           prodl	equ	0xFF3
 11123                           intcon	equ	0xFF2
 11124                           intcon2	equ	0xFF1
 11125                           intcon3	equ	0xFF0
 11126                           postinc0	equ	0xFEE
 11127                           wreg	equ	0xFE8
 11128                           postdec1	equ	0xFE5
 11129                           fsr1l	equ	0xFE1
 11130                           indf2	equ	0xFDF
 11131                           postinc2	equ	0xFDE
 11132                           postdec2	equ	0xFDD
 11133                           fsr2h	equ	0xFDA
 11134                           fsr2l	equ	0xFD9
 11135                           status	equ	0xFD8
 11136                           
 11137 ;; *************** function _strcpy *****************
 11138 ;; Defined at:
 11139 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 11140 ;; Parameters:    Size  Location     Type
 11141 ;;  to              2    0[BANK0 ] PTR unsigned char 
 11142 ;;		 -> printRTC@month(4), UI@month(4), 
 11143 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 11144 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 11145 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 11146 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 11147 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 11148 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 11149 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 11150 ;;		 -> STR_8(4), 
 11151 ;; Auto vars:     Size  Location     Type
 11152 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 11153 ;;		 -> printRTC@month(4), UI@month(4), 
 11154 ;; Return value:  Size  Location     Type
 11155 ;;                  2    0[BANK0 ] PTR unsigned char 
 11156 ;; Registers used:
 11157 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 11158 ;; Tracked objects:
 11159 ;;		On entry : 0/0
 11160 ;;		On exit  : 0/0
 11161 ;;		Unchanged: 0/0
 11162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11163 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11164 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11166 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11167 ;;Total ram usage:        6 bytes
 11168 ;; Hardware stack levels used:    1
 11169 ;; Hardware stack levels required when called:    7
 11170 ;; This function calls:
 11171 ;;		Nothing
 11172 ;; This function is called by:
 11173 ;;		_UI
 11174 ;;		_printRTC
 11175 ;; This function uses a non-reentrant model
 11176 ;;
 11177                           
 11178                           	psect	text29
 11179  005B96                     __ptext29:
 11180                           	opt stack 0
 11181  005B96                     _strcpy:
 11182                           	opt stack 20
 11183                           
 11184                           ;incstack = 0
 11185  005B96  C080  F084         	movff	strcpy@to,strcpy@cp
 11186  005B9A  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
 11187  005B9E  D006               	goto	l7131
 11188  005BA0                     l7129:
 11189  005BA0  0100               	movlb	0	; () banked
 11190  005BA2  4B84               	infsnz	strcpy@cp& (0+255),f,b
 11191  005BA4  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
 11192  005BA6  0100               	movlb	0	; () banked
 11193  005BA8  4B82               	infsnz	strcpy@from& (0+255),f,b
 11194  005BAA  2B83               	incf	(strcpy@from+1)& (0+255),f,b
 11195  005BAC                     l7131:
 11196  005BAC  C082  FFF6         	movff	strcpy@from,tblptrl
 11197  005BB0  C083  FFF7         	movff	strcpy@from+1,tblptrh
 11198  005BB4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11199  005BB4  6AF8               	clrf	tblptru,c
 11200  005BB6                     	endif
 11201  005BB6                     	if	0	;tblptru may be non-zero
 11202  005BB6                     	endif
 11203  005BB6  C084  FFD9         	movff	strcpy@cp,fsr2l
 11204  005BBA  C085  FFDA         	movff	strcpy@cp+1,fsr2h
 11205  005BBE  0008               	tblrd		*
 11206  005BC0  CFF5 FFDF          	movff	tablat,indf2
 11207  005BC4  50DF               	movf	indf2,w,c
 11208  005BC6  B4D8               	btfsc	status,2,c
 11209  005BC8  0012               	return	
 11210  005BCA  D7EA               	goto	l7129
 11211  005BCC                     __end_of_strcpy:
 11212                           	opt stack 0
 11213                           tblptru	equ	0xFF8
 11214                           tblptrh	equ	0xFF7
 11215                           tblptrl	equ	0xFF6
 11216                           tablat	equ	0xFF5
 11217                           prodh	equ	0xFF4
 11218                           prodl	equ	0xFF3
 11219                           intcon	equ	0xFF2
 11220                           intcon2	equ	0xFF1
 11221                           intcon3	equ	0xFF0
 11222                           postinc0	equ	0xFEE
 11223                           wreg	equ	0xFE8
 11224                           postdec1	equ	0xFE5
 11225                           fsr1l	equ	0xFE1
 11226                           indf2	equ	0xFDF
 11227                           postinc2	equ	0xFDE
 11228                           postdec2	equ	0xFDD
 11229                           fsr2h	equ	0xFDA
 11230                           fsr2l	equ	0xFD9
 11231                           status	equ	0xFD8
 11232                           
 11233 ;; *************** function _getRTC *****************
 11234 ;; Defined at:
 11235 ;;		line 44 in file "RTC.c"
 11236 ;; Parameters:    Size  Location     Type
 11237 ;;		None
 11238 ;; Auto vars:     Size  Location     Type
 11239 ;;  i               2    3[BANK0 ] int 
 11240 ;; Return value:  Size  Location     Type
 11241 ;;                  1    wreg      void 
 11242 ;; Registers used:
 11243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11244 ;; Tracked objects:
 11245 ;;		On entry : 0/0
 11246 ;;		On exit  : 0/0
 11247 ;;		Unchanged: 0/0
 11248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11250 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11252 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11253 ;;Total ram usage:        2 bytes
 11254 ;; Hardware stack levels used:    1
 11255 ;; Hardware stack levels required when called:    9
 11256 ;; This function calls:
 11257 ;;		_I2C_Master_Read
 11258 ;;		_I2C_Master_Start
 11259 ;;		_I2C_Master_Stop
 11260 ;;		_I2C_Master_Write
 11261 ;; This function is called by:
 11262 ;;		_printRTC
 11263 ;;		_initSortTimer
 11264 ;; This function uses a non-reentrant model
 11265 ;;
 11266                           
 11267                           	psect	text30
 11268  00525C                     __ptext30:
 11269                           	opt stack 0
 11270  00525C                     _getRTC:
 11271                           	opt stack 18
 11272                           
 11273                           ;RTC.c: 48: I2C_Master_Start();
 11274                           
 11275                           ;incstack = 0
 11276  00525C  EC93  F030         	call	_I2C_Master_Start	;wreg free
 11277                           
 11278                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 11279  005260  0E00               	movlw	0
 11280  005262  0100               	movlb	0	; () banked
 11281  005264  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11282  005266  0ED0               	movlw	208
 11283  005268  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 11284  00526A  EC81  F030         	call	_I2C_Master_Write	;wreg free
 11285                           
 11286                           ;RTC.c: 50: I2C_Master_Write(0x00);
 11287  00526E  0E00               	movlw	0
 11288  005270  0100               	movlb	0	; () banked
 11289  005272  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11290  005274  0E00               	movlw	0
 11291  005276  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 11292  005278  EC81  F030         	call	_I2C_Master_Write	;wreg free
 11293                           
 11294                           ;RTC.c: 51: I2C_Master_Stop();
 11295  00527C  EC8F  F030         	call	_I2C_Master_Stop	;wreg free
 11296                           
 11297                           ;RTC.c: 54: I2C_Master_Start();
 11298  005280  EC93  F030         	call	_I2C_Master_Start	;wreg free
 11299                           
 11300                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 11301  005284  0E00               	movlw	0
 11302  005286  0100               	movlb	0	; () banked
 11303  005288  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11304  00528A  0ED1               	movlw	209
 11305  00528C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 11306  00528E  EC81  F030         	call	_I2C_Master_Write	;wreg free
 11307                           
 11308                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 11309  005292  0E00               	movlw	0
 11310  005294  0100               	movlb	0	; () banked
 11311  005296  6F84               	movwf	(getRTC@i+1)& (0+255),b
 11312  005298  0E00               	movlw	0
 11313  00529A  6F83               	movwf	getRTC@i& (0+255),b
 11314  00529C                     l7137:
 11315                           
 11316                           ; BSR set to: 0
 11317  00529C  0100               	movlb	0	; () banked
 11318  00529E  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
 11319  0052A0  D008               	goto	l7141
 11320  0052A2  0100               	movlb	0	; () banked
 11321  0052A4  5184               	movf	(getRTC@i+1)& (0+255),w,b
 11322  0052A6  E115               	bnz	l7147
 11323  0052A8  0E06               	movlw	6
 11324  0052AA  0100               	movlb	0	; () banked
 11325  0052AC  5D83               	subwf	getRTC@i& (0+255),w,b
 11326  0052AE  B0D8               	btfsc	status,0,c
 11327  0052B0  D010               	goto	l7147
 11328  0052B2                     l7141:
 11329                           
 11330                           ; BSR set to: 0
 11331                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 11332  0052B2  0E1C               	movlw	low _time
 11333  0052B4  0100               	movlb	0	; () banked
 11334  0052B6  2583               	addwf	getRTC@i& (0+255),w,b
 11335  0052B8  6ED9               	movwf	fsr2l,c
 11336  0052BA  0E01               	movlw	high _time
 11337  0052BC  0100               	movlb	0	; () banked
 11338  0052BE  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
 11339  0052C0  6EDA               	movwf	fsr2h,c
 11340  0052C2  0E01               	movlw	1
 11341  0052C4  EC22  F02F         	call	_I2C_Master_Read
 11342  0052C8  6EDF               	movwf	indf2,c
 11343  0052CA  0100               	movlb	0	; () banked
 11344  0052CC  4B83               	infsnz	getRTC@i& (0+255),f,b
 11345  0052CE  2B84               	incf	(getRTC@i+1)& (0+255),f,b
 11346  0052D0  D7E5               	goto	l7137
 11347  0052D2                     l7147:
 11348                           
 11349                           ; BSR set to: 0
 11350                           ;RTC.c: 58: }
 11351                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 11352  0052D2  0E00               	movlw	0
 11353  0052D4  EC22  F02F         	call	_I2C_Master_Read
 11354  0052D8  0101               	movlb	1	; () banked
 11355  0052DA  6F22               	movwf	(_time+6)& (0+255),b
 11356                           
 11357                           ;RTC.c: 60: I2C_Master_Stop();
 11358  0052DC  EC8F  F030         	call	_I2C_Master_Stop	;wreg free
 11359  0052E0  0012               	return		;funcret
 11360  0052E2                     __end_of_getRTC:
 11361                           	opt stack 0
 11362                           tblptru	equ	0xFF8
 11363                           tblptrh	equ	0xFF7
 11364                           tblptrl	equ	0xFF6
 11365                           tablat	equ	0xFF5
 11366                           prodh	equ	0xFF4
 11367                           prodl	equ	0xFF3
 11368                           intcon	equ	0xFF2
 11369                           intcon2	equ	0xFF1
 11370                           intcon3	equ	0xFF0
 11371                           postinc0	equ	0xFEE
 11372                           wreg	equ	0xFE8
 11373                           postdec1	equ	0xFE5
 11374                           fsr1l	equ	0xFE1
 11375                           indf2	equ	0xFDF
 11376                           postinc2	equ	0xFDE
 11377                           postdec2	equ	0xFDD
 11378                           fsr2h	equ	0xFDA
 11379                           fsr2l	equ	0xFD9
 11380                           status	equ	0xFD8
 11381                           
 11382 ;; *************** function _I2C_Master_Write *****************
 11383 ;; Defined at:
 11384 ;;		line 49 in file "I2C.c"
 11385 ;; Parameters:    Size  Location     Type
 11386 ;;  d               2    1[BANK0 ] unsigned int 
 11387 ;; Auto vars:     Size  Location     Type
 11388 ;;		None
 11389 ;; Return value:  Size  Location     Type
 11390 ;;                  1    wreg      void 
 11391 ;; Registers used:
 11392 ;;		wreg, status,2, status,0, cstack
 11393 ;; Tracked objects:
 11394 ;;		On entry : 0/0
 11395 ;;		On exit  : 0/0
 11396 ;;		Unchanged: 0/0
 11397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11398 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11401 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11402 ;;Total ram usage:        2 bytes
 11403 ;; Hardware stack levels used:    1
 11404 ;; Hardware stack levels required when called:    8
 11405 ;; This function calls:
 11406 ;;		_I2C_Master_Wait
 11407 ;; This function is called by:
 11408 ;;		_loadRTC
 11409 ;;		_getRTC
 11410 ;; This function uses a non-reentrant model
 11411 ;;
 11412                           
 11413                           	psect	text31
 11414  006102                     __ptext31:
 11415                           	opt stack 0
 11416  006102                     _I2C_Master_Write:
 11417                           	opt stack 18
 11418                           
 11419                           ;I2C.c: 51: I2C_Master_Wait();
 11420                           
 11421                           ;incstack = 0
 11422  006102  EC52  F030         	call	_I2C_Master_Wait	;wreg free
 11423                           
 11424                           ;I2C.c: 52: SSPBUF = d;
 11425  006106  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 11426  00610A  0012               	return		;funcret
 11427  00610C                     __end_of_I2C_Master_Write:
 11428                           	opt stack 0
 11429                           tblptru	equ	0xFF8
 11430                           tblptrh	equ	0xFF7
 11431                           tblptrl	equ	0xFF6
 11432                           tablat	equ	0xFF5
 11433                           prodh	equ	0xFF4
 11434                           prodl	equ	0xFF3
 11435                           intcon	equ	0xFF2
 11436                           intcon2	equ	0xFF1
 11437                           intcon3	equ	0xFF0
 11438                           postinc0	equ	0xFEE
 11439                           wreg	equ	0xFE8
 11440                           postdec1	equ	0xFE5
 11441                           fsr1l	equ	0xFE1
 11442                           indf2	equ	0xFDF
 11443                           postinc2	equ	0xFDE
 11444                           postdec2	equ	0xFDD
 11445                           fsr2h	equ	0xFDA
 11446                           fsr2l	equ	0xFD9
 11447                           status	equ	0xFD8
 11448                           
 11449 ;; *************** function _I2C_Master_Stop *****************
 11450 ;; Defined at:
 11451 ;;		line 43 in file "I2C.c"
 11452 ;; Parameters:    Size  Location     Type
 11453 ;;		None
 11454 ;; Auto vars:     Size  Location     Type
 11455 ;;		None
 11456 ;; Return value:  Size  Location     Type
 11457 ;;                  1    wreg      void 
 11458 ;; Registers used:
 11459 ;;		wreg, status,2, status,0, cstack
 11460 ;; Tracked objects:
 11461 ;;		On entry : 0/0
 11462 ;;		On exit  : 0/0
 11463 ;;		Unchanged: 0/0
 11464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11469 ;;Total ram usage:        0 bytes
 11470 ;; Hardware stack levels used:    1
 11471 ;; Hardware stack levels required when called:    8
 11472 ;; This function calls:
 11473 ;;		_I2C_Master_Wait
 11474 ;; This function is called by:
 11475 ;;		_loadRTC
 11476 ;;		_getRTC
 11477 ;; This function uses a non-reentrant model
 11478 ;;
 11479                           
 11480                           	psect	text32
 11481  00611E                     __ptext32:
 11482                           	opt stack 0
 11483  00611E                     _I2C_Master_Stop:
 11484                           	opt stack 18
 11485                           
 11486                           ;I2C.c: 45: I2C_Master_Wait();
 11487                           
 11488                           ;incstack = 0
 11489  00611E  EC52  F030         	call	_I2C_Master_Wait	;wreg free
 11490                           
 11491                           ;I2C.c: 46: PEN = 1;
 11492  006122  84C5               	bsf	4037,2,c	;volatile
 11493  006124  0012               	return		;funcret
 11494  006126                     __end_of_I2C_Master_Stop:
 11495                           	opt stack 0
 11496                           tblptru	equ	0xFF8
 11497                           tblptrh	equ	0xFF7
 11498                           tblptrl	equ	0xFF6
 11499                           tablat	equ	0xFF5
 11500                           prodh	equ	0xFF4
 11501                           prodl	equ	0xFF3
 11502                           intcon	equ	0xFF2
 11503                           intcon2	equ	0xFF1
 11504                           intcon3	equ	0xFF0
 11505                           postinc0	equ	0xFEE
 11506                           wreg	equ	0xFE8
 11507                           postdec1	equ	0xFE5
 11508                           fsr1l	equ	0xFE1
 11509                           indf2	equ	0xFDF
 11510                           postinc2	equ	0xFDE
 11511                           postdec2	equ	0xFDD
 11512                           fsr2h	equ	0xFDA
 11513                           fsr2l	equ	0xFD9
 11514                           status	equ	0xFD8
 11515                           
 11516 ;; *************** function _I2C_Master_Start *****************
 11517 ;; Defined at:
 11518 ;;		line 31 in file "I2C.c"
 11519 ;; Parameters:    Size  Location     Type
 11520 ;;		None
 11521 ;; Auto vars:     Size  Location     Type
 11522 ;;		None
 11523 ;; Return value:  Size  Location     Type
 11524 ;;                  1    wreg      void 
 11525 ;; Registers used:
 11526 ;;		wreg, status,2, status,0, cstack
 11527 ;; Tracked objects:
 11528 ;;		On entry : 0/0
 11529 ;;		On exit  : 0/0
 11530 ;;		Unchanged: 0/0
 11531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11535 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11536 ;;Total ram usage:        0 bytes
 11537 ;; Hardware stack levels used:    1
 11538 ;; Hardware stack levels required when called:    8
 11539 ;; This function calls:
 11540 ;;		_I2C_Master_Wait
 11541 ;; This function is called by:
 11542 ;;		_loadRTC
 11543 ;;		_getRTC
 11544 ;; This function uses a non-reentrant model
 11545 ;;
 11546                           
 11547                           	psect	text33
 11548  006126                     __ptext33:
 11549                           	opt stack 0
 11550  006126                     _I2C_Master_Start:
 11551                           	opt stack 18
 11552                           
 11553                           ;I2C.c: 33: I2C_Master_Wait();
 11554                           
 11555                           ;incstack = 0
 11556  006126  EC52  F030         	call	_I2C_Master_Wait	;wreg free
 11557                           
 11558                           ;I2C.c: 34: SEN = 1;
 11559  00612A  80C5               	bsf	4037,0,c	;volatile
 11560  00612C  0012               	return		;funcret
 11561  00612E                     __end_of_I2C_Master_Start:
 11562                           	opt stack 0
 11563                           tblptru	equ	0xFF8
 11564                           tblptrh	equ	0xFF7
 11565                           tblptrl	equ	0xFF6
 11566                           tablat	equ	0xFF5
 11567                           prodh	equ	0xFF4
 11568                           prodl	equ	0xFF3
 11569                           intcon	equ	0xFF2
 11570                           intcon2	equ	0xFF1
 11571                           intcon3	equ	0xFF0
 11572                           postinc0	equ	0xFEE
 11573                           wreg	equ	0xFE8
 11574                           postdec1	equ	0xFE5
 11575                           fsr1l	equ	0xFE1
 11576                           indf2	equ	0xFDF
 11577                           postinc2	equ	0xFDE
 11578                           postdec2	equ	0xFDD
 11579                           fsr2h	equ	0xFDA
 11580                           fsr2l	equ	0xFD9
 11581                           status	equ	0xFD8
 11582                           
 11583 ;; *************** function _I2C_Master_Read *****************
 11584 ;; Defined at:
 11585 ;;		line 55 in file "I2C.c"
 11586 ;; Parameters:    Size  Location     Type
 11587 ;;  a               1    wreg     unsigned char 
 11588 ;; Auto vars:     Size  Location     Type
 11589 ;;  a               1    1[BANK0 ] unsigned char 
 11590 ;;  temp            1    2[BANK0 ] unsigned char 
 11591 ;; Return value:  Size  Location     Type
 11592 ;;                  1    wreg      unsigned char 
 11593 ;; Registers used:
 11594 ;;		wreg, status,2, status,0, cstack
 11595 ;; Tracked objects:
 11596 ;;		On entry : 0/0
 11597 ;;		On exit  : 0/0
 11598 ;;		Unchanged: 0/0
 11599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11601 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11603 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11604 ;;Total ram usage:        2 bytes
 11605 ;; Hardware stack levels used:    1
 11606 ;; Hardware stack levels required when called:    8
 11607 ;; This function calls:
 11608 ;;		_I2C_Master_Wait
 11609 ;; This function is called by:
 11610 ;;		_getRTC
 11611 ;; This function uses a non-reentrant model
 11612 ;;
 11613                           
 11614                           	psect	text34
 11615  005E44                     __ptext34:
 11616                           	opt stack 0
 11617  005E44                     _I2C_Master_Read:
 11618                           	opt stack 18
 11619                           
 11620                           ;incstack = 0
 11621                           ;I2C_Master_Read@a stored from wreg
 11622  005E44  0100               	movlb	0	; () banked
 11623  005E46  6F81               	movwf	I2C_Master_Read@a& (0+255),b
 11624                           
 11625                           ;I2C.c: 57: unsigned char temp;
 11626                           ;I2C.c: 58: I2C_Master_Wait();
 11627  005E48  EC52  F030         	call	_I2C_Master_Wait	;wreg free
 11628                           
 11629                           ;I2C.c: 59: RCEN = 1;
 11630  005E4C  86C5               	bsf	4037,3,c	;volatile
 11631                           
 11632                           ;I2C.c: 60: I2C_Master_Wait();
 11633  005E4E  EC52  F030         	call	_I2C_Master_Wait	;wreg free
 11634                           
 11635                           ;I2C.c: 61: temp = SSPBUF;
 11636  005E52  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
 11637                           
 11638                           ;I2C.c: 62: I2C_Master_Wait();
 11639  005E56  EC52  F030         	call	_I2C_Master_Wait	;wreg free
 11640                           
 11641                           ;I2C.c: 63: ACKDT = (a)?0:1;
 11642  005E5A  0100               	movlb	0	; () banked
 11643  005E5C  5181               	movf	I2C_Master_Read@a& (0+255),w,b
 11644  005E5E  0100               	movlb	0	; () banked
 11645  005E60  A4D8               	btfss	status,2,c
 11646  005E62  D002               	goto	u5480
 11647  005E64  8AC5               	bsf	4037,5,c	;volatile
 11648  005E66  D001               	goto	l6815
 11649  005E68                     u5480:
 11650  005E68  9AC5               	bcf	4037,5,c	;volatile
 11651  005E6A                     l6815:
 11652                           
 11653                           ;I2C.c: 64: ACKEN = 1;
 11654  005E6A  88C5               	bsf	4037,4,c	;volatile
 11655                           
 11656                           ;I2C.c: 65: return temp;
 11657  005E6C  0100               	movlb	0	; () banked
 11658  005E6E  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
 11659  005E70  0012               	return	
 11660  005E72                     __end_of_I2C_Master_Read:
 11661                           	opt stack 0
 11662                           tblptru	equ	0xFF8
 11663                           tblptrh	equ	0xFF7
 11664                           tblptrl	equ	0xFF6
 11665                           tablat	equ	0xFF5
 11666                           prodh	equ	0xFF4
 11667                           prodl	equ	0xFF3
 11668                           intcon	equ	0xFF2
 11669                           intcon2	equ	0xFF1
 11670                           intcon3	equ	0xFF0
 11671                           postinc0	equ	0xFEE
 11672                           wreg	equ	0xFE8
 11673                           postdec1	equ	0xFE5
 11674                           fsr1l	equ	0xFE1
 11675                           indf2	equ	0xFDF
 11676                           postinc2	equ	0xFDE
 11677                           postdec2	equ	0xFDD
 11678                           fsr2h	equ	0xFDA
 11679                           fsr2l	equ	0xFD9
 11680                           status	equ	0xFD8
 11681                           
 11682 ;; *************** function _I2C_Master_Wait *****************
 11683 ;; Defined at:
 11684 ;;		line 26 in file "I2C.c"
 11685 ;; Parameters:    Size  Location     Type
 11686 ;;		None
 11687 ;; Auto vars:     Size  Location     Type
 11688 ;;		None
 11689 ;; Return value:  Size  Location     Type
 11690 ;;                  1    wreg      void 
 11691 ;; Registers used:
 11692 ;;		wreg, status,2, status,0
 11693 ;; Tracked objects:
 11694 ;;		On entry : 0/0
 11695 ;;		On exit  : 0/0
 11696 ;;		Unchanged: 0/0
 11697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11700 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11701 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11702 ;;Total ram usage:        1 bytes
 11703 ;; Hardware stack levels used:    1
 11704 ;; Hardware stack levels required when called:    7
 11705 ;; This function calls:
 11706 ;;		Nothing
 11707 ;; This function is called by:
 11708 ;;		_I2C_Master_Start
 11709 ;;		_I2C_Master_Stop
 11710 ;;		_I2C_Master_Write
 11711 ;;		_I2C_Master_Read
 11712 ;;		_I2C_Master_RepeatedStart
 11713 ;; This function uses a non-reentrant model
 11714 ;;
 11715                           
 11716                           	psect	text35
 11717  0060A4                     __ptext35:
 11718                           	opt stack 0
 11719  0060A4                     _I2C_Master_Wait:
 11720                           	opt stack 18
 11721  0060A4                     l78:
 11722  0060A4  B4C7               	btfsc	4039,2,c	;volatile
 11723  0060A6  D7FE               	goto	l78
 11724  0060A8  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
 11725  0060AC  0E1F               	movlw	31
 11726  0060AE  0100               	movlb	0	; () banked
 11727  0060B0  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
 11728  0060B2  B4D8               	btfsc	status,2,c
 11729  0060B4  0012               	return	
 11730  0060B6  D7F6               	goto	l78
 11731  0060B8                     __end_of_I2C_Master_Wait:
 11732                           	opt stack 0
 11733                           tblptru	equ	0xFF8
 11734                           tblptrh	equ	0xFF7
 11735                           tblptrl	equ	0xFF6
 11736                           tablat	equ	0xFF5
 11737                           prodh	equ	0xFF4
 11738                           prodl	equ	0xFF3
 11739                           intcon	equ	0xFF2
 11740                           intcon2	equ	0xFF1
 11741                           intcon3	equ	0xFF0
 11742                           postinc0	equ	0xFEE
 11743                           wreg	equ	0xFE8
 11744                           postdec1	equ	0xFE5
 11745                           fsr1l	equ	0xFE1
 11746                           indf2	equ	0xFDF
 11747                           postinc2	equ	0xFDE
 11748                           postdec2	equ	0xFDD
 11749                           fsr2h	equ	0xFDA
 11750                           fsr2l	equ	0xFD9
 11751                           status	equ	0xFD8
 11752                           
 11753 ;; *************** function _change_state_to_menu_22 *****************
 11754 ;; Defined at:
 11755 ;;		line 501 in file "UI.c"
 11756 ;; Parameters:    Size  Location     Type
 11757 ;;		None
 11758 ;; Auto vars:     Size  Location     Type
 11759 ;;		None
 11760 ;; Return value:  Size  Location     Type
 11761 ;;                  1    wreg      void 
 11762 ;; Registers used:
 11763 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11764 ;; Tracked objects:
 11765 ;;		On entry : 0/0
 11766 ;;		On exit  : 0/0
 11767 ;;		Unchanged: 0/0
 11768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11773 ;;Total ram usage:        0 bytes
 11774 ;; Hardware stack levels used:    1
 11775 ;; Hardware stack levels required when called:   10
 11776 ;; This function calls:
 11777 ;;		_lcdInst
 11778 ;;		_printf
 11779 ;; This function is called by:
 11780 ;;		_UI
 11781 ;; This function uses a non-reentrant model
 11782 ;;
 11783                           
 11784                           	psect	text36
 11785  005B26                     __ptext36:
 11786                           	opt stack 0
 11787  005B26                     _change_state_to_menu_22:
 11788                           	opt stack 19
 11789                           
 11790                           ;UI.c: 502: cur_state = 22;
 11791                           
 11792                           ; BSR set to: 0
 11793                           ;incstack = 0
 11794  005B26  0E00               	movlw	0
 11795  005B28  0100               	movlb	0	; () banked
 11796  005B2A  6FE9               	movwf	(_cur_state+1)& (0+255),b
 11797  005B2C  0E16               	movlw	22
 11798  005B2E  6FE8               	movwf	_cur_state& (0+255),b
 11799                           
 11800                           ; BSR set to: 0
 11801                           ;UI.c: 504: lcdInst(0b10000000);;
 11802  005B30  0E80               	movlw	128
 11803  005B32  EC6D  F030         	call	_lcdInst
 11804                           
 11805                           ;UI.c: 505: printf("2. SORT        <");
 11806  005B36  0ED3               	movlw	low STR_34
 11807  005B38  0100               	movlb	0	; () banked
 11808  005B3A  6F8E               	movwf	printf@f& (0+255),b
 11809  005B3C  0EFD               	movlw	high STR_34
 11810  005B3E  0100               	movlb	0	; () banked
 11811  005B40  6F8F               	movwf	(printf@f+1)& (0+255),b
 11812  005B42  ECE9  F00E         	call	_printf	;wreg free
 11813                           
 11814                           ;UI.c: 506: lcdInst(0b11000000);;
 11815  005B46  0EC0               	movlw	192
 11816  005B48  EC6D  F030         	call	_lcdInst
 11817                           
 11818                           ;UI.c: 507: printf("3. LOGS         ");
 11819  005B4C  0E18               	movlw	low STR_36
 11820  005B4E  0100               	movlb	0	; () banked
 11821  005B50  6F8E               	movwf	printf@f& (0+255),b
 11822  005B52  0EFD               	movlw	high STR_36
 11823  005B54  0100               	movlb	0	; () banked
 11824  005B56  6F8F               	movwf	(printf@f+1)& (0+255),b
 11825  005B58  ECE9  F00E         	call	_printf	;wreg free
 11826  005B5C  0012               	return		;funcret
 11827  005B5E                     __end_of_change_state_to_menu_22:
 11828                           	opt stack 0
 11829                           tblptru	equ	0xFF8
 11830                           tblptrh	equ	0xFF7
 11831                           tblptrl	equ	0xFF6
 11832                           tablat	equ	0xFF5
 11833                           prodh	equ	0xFF4
 11834                           prodl	equ	0xFF3
 11835                           intcon	equ	0xFF2
 11836                           intcon2	equ	0xFF1
 11837                           intcon3	equ	0xFF0
 11838                           postinc0	equ	0xFEE
 11839                           wreg	equ	0xFE8
 11840                           postdec1	equ	0xFE5
 11841                           fsr1l	equ	0xFE1
 11842                           indf2	equ	0xFDF
 11843                           postinc2	equ	0xFDE
 11844                           postdec2	equ	0xFDD
 11845                           fsr2h	equ	0xFDA
 11846                           fsr2l	equ	0xFD9
 11847                           status	equ	0xFD8
 11848                           
 11849 ;; *************** function _change_state_to_menu_12 *****************
 11850 ;; Defined at:
 11851 ;;		line 493 in file "UI.c"
 11852 ;; Parameters:    Size  Location     Type
 11853 ;;		None
 11854 ;; Auto vars:     Size  Location     Type
 11855 ;;		None
 11856 ;; Return value:  Size  Location     Type
 11857 ;;                  1    wreg      void 
 11858 ;; Registers used:
 11859 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11860 ;; Tracked objects:
 11861 ;;		On entry : 0/0
 11862 ;;		On exit  : 0/0
 11863 ;;		Unchanged: 0/0
 11864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11869 ;;Total ram usage:        0 bytes
 11870 ;; Hardware stack levels used:    1
 11871 ;; Hardware stack levels required when called:   10
 11872 ;; This function calls:
 11873 ;;		_lcdInst
 11874 ;;		_printf
 11875 ;; This function is called by:
 11876 ;;		_UI
 11877 ;; This function uses a non-reentrant model
 11878 ;;
 11879                           
 11880                           	psect	text37
 11881  005B5E                     __ptext37:
 11882                           	opt stack 0
 11883  005B5E                     _change_state_to_menu_12:
 11884                           	opt stack 19
 11885                           
 11886                           ;UI.c: 494: cur_state = 12;
 11887                           
 11888                           ;incstack = 0
 11889  005B5E  0E00               	movlw	0
 11890  005B60  0100               	movlb	0	; () banked
 11891  005B62  6FE9               	movwf	(_cur_state+1)& (0+255),b
 11892  005B64  0E0C               	movlw	12
 11893  005B66  6FE8               	movwf	_cur_state& (0+255),b
 11894                           
 11895                           ; BSR set to: 0
 11896                           ;UI.c: 496: lcdInst(0b10000000);;
 11897  005B68  0E80               	movlw	128
 11898  005B6A  EC6D  F030         	call	_lcdInst
 11899                           
 11900                           ;UI.c: 497: printf("1. DATE/TIME    ");
 11901  005B6E  0E3A               	movlw	low STR_33
 11902  005B70  0100               	movlb	0	; () banked
 11903  005B72  6F8E               	movwf	printf@f& (0+255),b
 11904  005B74  0EFD               	movlw	high STR_33
 11905  005B76  0100               	movlb	0	; () banked
 11906  005B78  6F8F               	movwf	(printf@f+1)& (0+255),b
 11907  005B7A  ECE9  F00E         	call	_printf	;wreg free
 11908                           
 11909                           ;UI.c: 498: lcdInst(0b11000000);;
 11910  005B7E  0EC0               	movlw	192
 11911  005B80  EC6D  F030         	call	_lcdInst
 11912                           
 11913                           ;UI.c: 499: printf("2. SORT        <");
 11914  005B84  0ED3               	movlw	low STR_34
 11915  005B86  0100               	movlb	0	; () banked
 11916  005B88  6F8E               	movwf	printf@f& (0+255),b
 11917  005B8A  0EFD               	movlw	high STR_34
 11918  005B8C  0100               	movlb	0	; () banked
 11919  005B8E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11920  005B90  ECE9  F00E         	call	_printf	;wreg free
 11921  005B94  0012               	return		;funcret
 11922  005B96                     __end_of_change_state_to_menu_12:
 11923                           	opt stack 0
 11924                           tblptru	equ	0xFF8
 11925                           tblptrh	equ	0xFF7
 11926                           tblptrl	equ	0xFF6
 11927                           tablat	equ	0xFF5
 11928                           prodh	equ	0xFF4
 11929                           prodl	equ	0xFF3
 11930                           intcon	equ	0xFF2
 11931                           intcon2	equ	0xFF1
 11932                           intcon3	equ	0xFF0
 11933                           postinc0	equ	0xFEE
 11934                           wreg	equ	0xFE8
 11935                           postdec1	equ	0xFE5
 11936                           fsr1l	equ	0xFE1
 11937                           indf2	equ	0xFDF
 11938                           postinc2	equ	0xFDE
 11939                           postdec2	equ	0xFDD
 11940                           fsr2h	equ	0xFDA
 11941                           fsr2l	equ	0xFD9
 11942                           status	equ	0xFD8
 11943                           
 11944 ;; *************** function ___awmod *****************
 11945 ;; Defined at:
 11946 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 11947 ;; Parameters:    Size  Location     Type
 11948 ;;  dividend        2    0[BANK0 ] int 
 11949 ;;  divisor         2    2[BANK0 ] int 
 11950 ;; Auto vars:     Size  Location     Type
 11951 ;;  sign            1    5[BANK0 ] unsigned char 
 11952 ;;  counter         1    4[BANK0 ] unsigned char 
 11953 ;; Return value:  Size  Location     Type
 11954 ;;                  2    0[BANK0 ] int 
 11955 ;; Registers used:
 11956 ;;		wreg, status,2, status,0
 11957 ;; Tracked objects:
 11958 ;;		On entry : 0/0
 11959 ;;		On exit  : 0/0
 11960 ;;		Unchanged: 0/0
 11961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11962 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11963 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11965 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11966 ;;Total ram usage:        6 bytes
 11967 ;; Hardware stack levels used:    1
 11968 ;; Hardware stack levels required when called:    7
 11969 ;; This function calls:
 11970 ;;		Nothing
 11971 ;; This function is called by:
 11972 ;;		_UI
 11973 ;; This function uses a non-reentrant model
 11974 ;;
 11975                           
 11976                           	psect	text38
 11977  005096                     __ptext38:
 11978                           	opt stack 0
 11979  005096                     ___awmod:
 11980                           	opt stack 22
 11981                           
 11982                           ;incstack = 0
 11983  005096  0E00               	movlw	0
 11984  005098  0100               	movlb	0	; () banked
 11985  00509A  6F85               	movwf	___awmod@sign& (0+255),b
 11986                           
 11987                           ; BSR set to: 0
 11988  00509C  0100               	movlb	0	; () banked
 11989  00509E  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 11990  0050A0  D008               	goto	l9597
 11991                           
 11992                           ; BSR set to: 0
 11993  0050A2  0100               	movlb	0	; () banked
 11994  0050A4  6D80               	negf	___awmod@dividend& (0+255),b
 11995  0050A6  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11996  0050A8  B0D8               	btfsc	status,0,c
 11997  0050AA  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11998                           
 11999                           ; BSR set to: 0
 12000  0050AC  0E01               	movlw	1
 12001  0050AE  0100               	movlb	0	; () banked
 12002  0050B0  6F85               	movwf	___awmod@sign& (0+255),b
 12003  0050B2                     l9597:
 12004                           
 12005                           ; BSR set to: 0
 12006  0050B2  0100               	movlb	0	; () banked
 12007  0050B4  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 12008  0050B6  D005               	goto	l9601
 12009                           
 12010                           ; BSR set to: 0
 12011  0050B8  0100               	movlb	0	; () banked
 12012  0050BA  6D82               	negf	___awmod@divisor& (0+255),b
 12013  0050BC  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 12014  0050BE  B0D8               	btfsc	status,0,c
 12015  0050C0  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 12016  0050C2                     l9601:
 12017                           
 12018                           ; BSR set to: 0
 12019  0050C2  0100               	movlb	0	; () banked
 12020  0050C4  5182               	movf	___awmod@divisor& (0+255),w,b
 12021  0050C6  0100               	movlb	0	; () banked
 12022  0050C8  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 12023  0050CA  B4D8               	btfsc	status,2,c
 12024  0050CC  D026               	goto	l9617
 12025                           
 12026                           ; BSR set to: 0
 12027  0050CE  0E01               	movlw	1
 12028  0050D0  0100               	movlb	0	; () banked
 12029  0050D2  6F84               	movwf	___awmod@counter& (0+255),b
 12030  0050D4  D006               	goto	l9607
 12031  0050D6                     l9605:
 12032                           
 12033                           ; BSR set to: 0
 12034  0050D6  0100               	movlb	0	; () banked
 12035  0050D8  90D8               	bcf	status,0,c
 12036  0050DA  3782               	rlcf	___awmod@divisor& (0+255),f,b
 12037  0050DC  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 12038  0050DE  0100               	movlb	0	; () banked
 12039  0050E0  2B84               	incf	___awmod@counter& (0+255),f,b
 12040  0050E2                     l9607:
 12041                           
 12042                           ; BSR set to: 0
 12043  0050E2  0100               	movlb	0	; () banked
 12044  0050E4  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 12045  0050E6  D7F7               	goto	l9605
 12046  0050E8                     l9609:
 12047                           
 12048                           ; BSR set to: 0
 12049  0050E8  0100               	movlb	0	; () banked
 12050  0050EA  5182               	movf	___awmod@divisor& (0+255),w,b
 12051  0050EC  0100               	movlb	0	; () banked
 12052  0050EE  5D80               	subwf	___awmod@dividend& (0+255),w,b
 12053  0050F0  0100               	movlb	0	; () banked
 12054  0050F2  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 12055  0050F4  0100               	movlb	0	; () banked
 12056  0050F6  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 12057  0050F8  A0D8               	btfss	status,0,c
 12058  0050FA  D008               	goto	l9613
 12059                           
 12060                           ; BSR set to: 0
 12061  0050FC  0100               	movlb	0	; () banked
 12062  0050FE  5182               	movf	___awmod@divisor& (0+255),w,b
 12063  005100  0100               	movlb	0	; () banked
 12064  005102  5F80               	subwf	___awmod@dividend& (0+255),f,b
 12065  005104  0100               	movlb	0	; () banked
 12066  005106  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 12067  005108  0100               	movlb	0	; () banked
 12068  00510A  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 12069  00510C                     l9613:
 12070                           
 12071                           ; BSR set to: 0
 12072  00510C  0100               	movlb	0	; () banked
 12073  00510E  90D8               	bcf	status,0,c
 12074  005110  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 12075  005112  3382               	rrcf	___awmod@divisor& (0+255),f,b
 12076                           
 12077                           ; BSR set to: 0
 12078  005114  0100               	movlb	0	; () banked
 12079  005116  2F84               	decfsz	___awmod@counter& (0+255),f,b
 12080  005118  D7E7               	goto	l9609
 12081  00511A                     l9617:
 12082                           
 12083                           ; BSR set to: 0
 12084  00511A  0100               	movlb	0	; () banked
 12085  00511C  5185               	movf	___awmod@sign& (0+255),w,b
 12086  00511E  0100               	movlb	0	; () banked
 12087  005120  B4D8               	btfsc	status,2,c
 12088  005122  D005               	goto	l9621
 12089                           
 12090                           ; BSR set to: 0
 12091  005124  0100               	movlb	0	; () banked
 12092  005126  6D80               	negf	___awmod@dividend& (0+255),b
 12093  005128  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 12094  00512A  B0D8               	btfsc	status,0,c
 12095  00512C  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 12096  00512E                     l9621:
 12097                           
 12098                           ; BSR set to: 0
 12099  00512E  C080  F080         	movff	___awmod@dividend,?___awmod
 12100  005132  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 12101  005136  0012               	return	
 12102  005138                     __end_of___awmod:
 12103                           	opt stack 0
 12104                           tblptru	equ	0xFF8
 12105                           tblptrh	equ	0xFF7
 12106                           tblptrl	equ	0xFF6
 12107                           tablat	equ	0xFF5
 12108                           prodh	equ	0xFF4
 12109                           prodl	equ	0xFF3
 12110                           intcon	equ	0xFF2
 12111                           intcon2	equ	0xFF1
 12112                           intcon3	equ	0xFF0
 12113                           postinc0	equ	0xFEE
 12114                           wreg	equ	0xFE8
 12115                           postdec1	equ	0xFE5
 12116                           fsr1l	equ	0xFE1
 12117                           indf2	equ	0xFDF
 12118                           postinc2	equ	0xFDE
 12119                           postdec2	equ	0xFDD
 12120                           fsr2h	equ	0xFDA
 12121                           fsr2l	equ	0xFD9
 12122                           status	equ	0xFD8
 12123                           
 12124 ;; *************** function ___awdiv *****************
 12125 ;; Defined at:
 12126 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 12127 ;; Parameters:    Size  Location     Type
 12128 ;;  dividend        2    6[BANK0 ] int 
 12129 ;;  divisor         2    8[BANK0 ] int 
 12130 ;; Auto vars:     Size  Location     Type
 12131 ;;  quotient        2   12[BANK0 ] int 
 12132 ;;  sign            1   11[BANK0 ] unsigned char 
 12133 ;;  counter         1   10[BANK0 ] unsigned char 
 12134 ;; Return value:  Size  Location     Type
 12135 ;;                  2    6[BANK0 ] int 
 12136 ;; Registers used:
 12137 ;;		wreg, status,2, status,0
 12138 ;; Tracked objects:
 12139 ;;		On entry : 0/0
 12140 ;;		On exit  : 0/0
 12141 ;;		Unchanged: 0/0
 12142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12143 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12144 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12146 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12147 ;;Total ram usage:        8 bytes
 12148 ;; Hardware stack levels used:    1
 12149 ;; Hardware stack levels required when called:    7
 12150 ;; This function calls:
 12151 ;;		Nothing
 12152 ;; This function is called by:
 12153 ;;		_UI
 12154 ;;		_ID
 12155 ;; This function uses a non-reentrant model
 12156 ;;
 12157                           
 12158                           	psect	text39
 12159  004E72                     __ptext39:
 12160                           	opt stack 0
 12161  004E72                     ___awdiv:
 12162                           	opt stack 21
 12163                           
 12164                           ; BSR set to: 0
 12165                           ;incstack = 0
 12166  004E72  0E00               	movlw	0
 12167  004E74  0100               	movlb	0	; () banked
 12168  004E76  6F8B               	movwf	___awdiv@sign& (0+255),b
 12169                           
 12170                           ; BSR set to: 0
 12171  004E78  0100               	movlb	0	; () banked
 12172  004E7A  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 12173  004E7C  D008               	goto	l7753
 12174                           
 12175                           ; BSR set to: 0
 12176  004E7E  0100               	movlb	0	; () banked
 12177  004E80  6D88               	negf	___awdiv@divisor& (0+255),b
 12178  004E82  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 12179  004E84  B0D8               	btfsc	status,0,c
 12180  004E86  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 12181                           
 12182                           ; BSR set to: 0
 12183  004E88  0E01               	movlw	1
 12184  004E8A  0100               	movlb	0	; () banked
 12185  004E8C  6F8B               	movwf	___awdiv@sign& (0+255),b
 12186  004E8E                     l7753:
 12187                           
 12188                           ; BSR set to: 0
 12189  004E8E  0100               	movlb	0	; () banked
 12190  004E90  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 12191  004E92  D008               	goto	l7759
 12192                           
 12193                           ; BSR set to: 0
 12194  004E94  0100               	movlb	0	; () banked
 12195  004E96  6D86               	negf	___awdiv@dividend& (0+255),b
 12196  004E98  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 12197  004E9A  B0D8               	btfsc	status,0,c
 12198  004E9C  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 12199                           
 12200                           ; BSR set to: 0
 12201  004E9E  0E01               	movlw	1
 12202  004EA0  0100               	movlb	0	; () banked
 12203  004EA2  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 12204  004EA4                     l7759:
 12205                           
 12206                           ; BSR set to: 0
 12207  004EA4  0E00               	movlw	0
 12208  004EA6  0100               	movlb	0	; () banked
 12209  004EA8  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 12210  004EAA  0E00               	movlw	0
 12211  004EAC  6F8C               	movwf	___awdiv@quotient& (0+255),b
 12212                           
 12213                           ; BSR set to: 0
 12214  004EAE  0100               	movlb	0	; () banked
 12215  004EB0  5188               	movf	___awdiv@divisor& (0+255),w,b
 12216  004EB2  0100               	movlb	0	; () banked
 12217  004EB4  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 12218  004EB6  B4D8               	btfsc	status,2,c
 12219  004EB8  D02C               	goto	l7781
 12220                           
 12221                           ; BSR set to: 0
 12222  004EBA  0E01               	movlw	1
 12223  004EBC  0100               	movlb	0	; () banked
 12224  004EBE  6F8A               	movwf	___awdiv@counter& (0+255),b
 12225  004EC0  D006               	goto	l7767
 12226  004EC2                     l7765:
 12227                           
 12228                           ; BSR set to: 0
 12229  004EC2  0100               	movlb	0	; () banked
 12230  004EC4  90D8               	bcf	status,0,c
 12231  004EC6  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 12232  004EC8  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 12233  004ECA  0100               	movlb	0	; () banked
 12234  004ECC  2B8A               	incf	___awdiv@counter& (0+255),f,b
 12235  004ECE                     l7767:
 12236                           
 12237                           ; BSR set to: 0
 12238  004ECE  0100               	movlb	0	; () banked
 12239  004ED0  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 12240  004ED2  D7F7               	goto	l7765
 12241  004ED4                     l7769:
 12242                           
 12243                           ; BSR set to: 0
 12244  004ED4  0100               	movlb	0	; () banked
 12245  004ED6  90D8               	bcf	status,0,c
 12246  004ED8  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 12247  004EDA  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 12248                           
 12249                           ; BSR set to: 0
 12250  004EDC  0100               	movlb	0	; () banked
 12251  004EDE  5188               	movf	___awdiv@divisor& (0+255),w,b
 12252  004EE0  0100               	movlb	0	; () banked
 12253  004EE2  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 12254  004EE4  0100               	movlb	0	; () banked
 12255  004EE6  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 12256  004EE8  0100               	movlb	0	; () banked
 12257  004EEA  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 12258  004EEC  A0D8               	btfss	status,0,c
 12259  004EEE  D00A               	goto	l7777
 12260                           
 12261                           ; BSR set to: 0
 12262  004EF0  0100               	movlb	0	; () banked
 12263  004EF2  5188               	movf	___awdiv@divisor& (0+255),w,b
 12264  004EF4  0100               	movlb	0	; () banked
 12265  004EF6  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 12266  004EF8  0100               	movlb	0	; () banked
 12267  004EFA  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 12268  004EFC  0100               	movlb	0	; () banked
 12269  004EFE  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 12270                           
 12271                           ; BSR set to: 0
 12272  004F00  0100               	movlb	0	; () banked
 12273  004F02  818C               	bsf	___awdiv@quotient& (0+255),0,b
 12274  004F04                     l7777:
 12275                           
 12276                           ; BSR set to: 0
 12277  004F04  0100               	movlb	0	; () banked
 12278  004F06  90D8               	bcf	status,0,c
 12279  004F08  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 12280  004F0A  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 12281                           
 12282                           ; BSR set to: 0
 12283  004F0C  0100               	movlb	0	; () banked
 12284  004F0E  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 12285  004F10  D7E1               	goto	l7769
 12286  004F12                     l7781:
 12287                           
 12288                           ; BSR set to: 0
 12289  004F12  0100               	movlb	0	; () banked
 12290  004F14  518B               	movf	___awdiv@sign& (0+255),w,b
 12291  004F16  0100               	movlb	0	; () banked
 12292  004F18  B4D8               	btfsc	status,2,c
 12293  004F1A  D005               	goto	l7785
 12294                           
 12295                           ; BSR set to: 0
 12296  004F1C  0100               	movlb	0	; () banked
 12297  004F1E  6D8C               	negf	___awdiv@quotient& (0+255),b
 12298  004F20  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 12299  004F22  B0D8               	btfsc	status,0,c
 12300  004F24  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 12301  004F26                     l7785:
 12302                           
 12303                           ; BSR set to: 0
 12304  004F26  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 12305  004F2A  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 12306  004F2E  0012               	return	
 12307  004F30                     __end_of___awdiv:
 12308                           	opt stack 0
 12309                           tblptru	equ	0xFF8
 12310                           tblptrh	equ	0xFF7
 12311                           tblptrl	equ	0xFF6
 12312                           tablat	equ	0xFF5
 12313                           prodh	equ	0xFF4
 12314                           prodl	equ	0xFF3
 12315                           intcon	equ	0xFF2
 12316                           intcon2	equ	0xFF1
 12317                           intcon3	equ	0xFF0
 12318                           postinc0	equ	0xFEE
 12319                           wreg	equ	0xFE8
 12320                           postdec1	equ	0xFE5
 12321                           fsr1l	equ	0xFE1
 12322                           indf2	equ	0xFDF
 12323                           postinc2	equ	0xFDE
 12324                           postdec2	equ	0xFDD
 12325                           fsr2h	equ	0xFDA
 12326                           fsr2l	equ	0xFD9
 12327                           status	equ	0xFD8
 12328                           
 12329 ;; *************** function _Test *****************
 12330 ;; Defined at:
 12331 ;;		line 30 in file "Test.c"
 12332 ;; Parameters:    Size  Location     Type
 12333 ;;		None
 12334 ;; Auto vars:     Size  Location     Type
 12335 ;;		None
 12336 ;; Return value:  Size  Location     Type
 12337 ;;                  1    wreg      void 
 12338 ;; Registers used:
 12339 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12340 ;; Tracked objects:
 12341 ;;		On entry : 0/0
 12342 ;;		On exit  : 0/0
 12343 ;;		Unchanged: 0/0
 12344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12347 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12348 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12349 ;;Total ram usage:        2 bytes
 12350 ;; Hardware stack levels used:    1
 12351 ;; Hardware stack levels required when called:   11
 12352 ;; This function calls:
 12353 ;;		_BlockerTest
 12354 ;;		_BothServos
 12355 ;;		_PlatformTest
 12356 ;;		_PortTestDC
 12357 ;;		_PortTestPusher
 12358 ;;		_SpeedTest
 12359 ;;		_actuatorTest
 12360 ;;		_algorithmTest
 12361 ;;		_arm
 12362 ;;		_lcdInst
 12363 ;;		_printf
 12364 ;;		_sensorTest
 12365 ;; This function is called by:
 12366 ;;		_main
 12367 ;; This function uses a non-reentrant model
 12368 ;;
 12369                           
 12370                           	psect	text40
 12371  00468C                     __ptext40:
 12372                           	opt stack 0
 12373  00468C                     _Test:
 12374                           	opt stack 19
 12375                           
 12376                           ;Test.c: 32: while(machine_state == Testing_state){
 12377                           
 12378                           ; BSR set to: 0
 12379                           ;incstack = 0
 12380  00468C  D07C               	goto	l10375
 12381  00468E                     l10335:
 12382                           
 12383                           ;Test.c: 33: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 12384  00468E  0E01               	movlw	1
 12385  004690  EC6D  F030         	call	_lcdInst
 12386  004694  0E68               	movlw	104
 12387  004696  0100               	movlb	0	; () banked
 12388  004698  6FC6               	movwf	??_Test& (0+255),b
 12389  00469A  0EE4               	movlw	228
 12390  00469C                     u11537:
 12391  00469C  2EE8               	decfsz	wreg,f,c
 12392  00469E  D7FE               	bra	u11537
 12393  0046A0  2FC6               	decfsz	??_Test& (0+255),f,b
 12394  0046A2  D7FC               	bra	u11537
 12395  0046A4  F000               	nop	
 12396  0046A6  0E80               	movlw	128
 12397  0046A8  EC6D  F030         	call	_lcdInst
 12398                           
 12399                           ;Test.c: 34: printf("2.SNR|4.HI|5.MED");
 12400  0046AC  0E90               	movlw	low STR_68
 12401  0046AE  0100               	movlb	0	; () banked
 12402  0046B0  6F8E               	movwf	printf@f& (0+255),b
 12403  0046B2  0EFC               	movlw	high STR_68
 12404  0046B4  0100               	movlb	0	; () banked
 12405  0046B6  6F8F               	movwf	(printf@f+1)& (0+255),b
 12406  0046B8  ECE9  F00E         	call	_printf	;wreg free
 12407                           
 12408                           ;Test.c: 35: lcdInst(0b11000000);;
 12409  0046BC  0EC0               	movlw	192
 12410  0046BE  EC6D  F030         	call	_lcdInst
 12411                           
 12412                           ;Test.c: 36: printf("B.PLA|8.SV|9.BLK");
 12413  0046C2  0EA1               	movlw	low STR_69
 12414  0046C4  0100               	movlb	0	; () banked
 12415  0046C6  6F8E               	movwf	printf@f& (0+255),b
 12416  0046C8  0EFC               	movlw	high STR_69
 12417  0046CA  0100               	movlb	0	; () banked
 12418  0046CC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12419  0046CE  ECE9  F00E         	call	_printf	;wreg free
 12420  0046D2                     l1287:
 12421  0046D2  A281               	btfss	3969,1,c	;volatile
 12422  0046D4  D7FE               	goto	l1287
 12423                           
 12424                           ;Test.c: 38: var = PORTB >> 4;
 12425  0046D6  CF81 F0C6          	movff	3969,??_Test	;volatile
 12426  0046DA  0100               	movlb	0	; () banked
 12427  0046DC  3BC6               	swapf	??_Test& (0+255),f,b
 12428  0046DE  0E0F               	movlw	15
 12429  0046E0  17C6               	andwf	??_Test& (0+255),f,b
 12430  0046E2  0100               	movlb	0	; () banked
 12431  0046E4  51C6               	movf	??_Test& (0+255),w,b
 12432  0046E6  0101               	movlb	1	; () banked
 12433  0046E8  6F4D               	movwf	_var& (0+255),b
 12434  0046EA  6B4E               	clrf	(_var+1)& (0+255),b
 12435                           
 12436                           ; BSR set to: 1
 12437                           ;Test.c: 39: var++;
 12438  0046EC  0101               	movlb	1	; () banked
 12439  0046EE  4B4D               	infsnz	_var& (0+255),f,b
 12440  0046F0  2B4E               	incf	(_var+1)& (0+255),f,b
 12441  0046F2                     l1290:
 12442  0046F2  A281               	btfss	3969,1,c	;volatile
 12443  0046F4  D01F               	goto	l10373
 12444  0046F6  D7FD               	goto	l1290
 12445  0046F8                     l10351:
 12446                           
 12447                           ;Test.c: 43: algorithmTest();
 12448  0046F8  EC9B  F025         	call	_algorithmTest	;wreg free
 12449                           
 12450                           ;Test.c: 44: break;
 12451  0046FC  D044               	goto	l10375
 12452  0046FE                     l10353:
 12453                           
 12454                           ;Test.c: 46: sensorTest();
 12455  0046FE  ECFC  F012         	call	_sensorTest	;wreg free
 12456                           
 12457                           ;Test.c: 47: break;
 12458  004702  D041               	goto	l10375
 12459  004704                     l10355:
 12460                           
 12461                           ;Test.c: 49: actuatorTest();
 12462  004704  EC6D  F004         	call	_actuatorTest	;wreg free
 12463                           
 12464                           ;Test.c: 50: break;
 12465  004708  D03E               	goto	l10375
 12466  00470A                     l10357:
 12467                           
 12468                           ;Test.c: 52: arm();
 12469  00470A  ECC9  F023         	call	_arm	;wreg free
 12470                           
 12471                           ;Test.c: 53: break;
 12472  00470E  D03B               	goto	l10375
 12473  004710                     l10359:
 12474                           
 12475                           ;Test.c: 55: PortTestDC();
 12476  004710  EC06  F026         	call	_PortTestDC	;wreg free
 12477                           
 12478                           ;Test.c: 56: break;
 12479  004714  D038               	goto	l10375
 12480  004716                     l10361:
 12481                           
 12482                           ;Test.c: 58: SpeedTest();
 12483  004716  EC71  F029         	call	_SpeedTest	;wreg free
 12484                           
 12485                           ;Test.c: 59: break;
 12486  00471A  D035               	goto	l10375
 12487  00471C                     l10363:
 12488                           
 12489                           ;Test.c: 61: PortTestPusher();
 12490  00471C  EC19  F02C         	call	_PortTestPusher	;wreg free
 12491                           
 12492                           ;Test.c: 62: break;
 12493  004720  D032               	goto	l10375
 12494  004722                     l10365:
 12495                           
 12496                           ;Test.c: 64: PlatformTest();
 12497  004722  EC77  F018         	call	_PlatformTest	;wreg free
 12498                           
 12499                           ;Test.c: 65: break;
 12500  004726  D02F               	goto	l10375
 12501  004728                     l10367:
 12502                           
 12503                           ;Test.c: 67: BothServos();
 12504  004728  EC05  F011         	call	_BothServos	;wreg free
 12505                           
 12506                           ;Test.c: 68: break;
 12507  00472C  D02C               	goto	l10375
 12508  00472E                     l10369:
 12509                           
 12510                           ;Test.c: 70: BlockerTest();
 12511  00472E  ECA8  F020         	call	_BlockerTest	;wreg free
 12512                           
 12513                           ;Test.c: 74: }
 12514                           
 12515                           ;Test.c: 73: break;
 12516                           
 12517                           ;Test.c: 72: default:
 12518                           
 12519                           ;Test.c: 71: break;
 12520  004732  D029               	goto	l10375
 12521  004734                     l10373:
 12522  004734  C14D  F0C6         	movff	_var,??_Test
 12523  004738  C14E  F0C7         	movff	_var+1,??_Test+1
 12524                           
 12525                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12526                           ; Switch size 1, requested type "space"
 12527                           ; Number of cases is 1, Range of values is 0 to 0
 12528                           ; switch strategies available:
 12529                           ; Name         Instructions Cycles
 12530                           ; simple_byte            4     3 (average)
 12531                           ;	Chosen strategy is simple_byte
 12532  00473C  0100               	movlb	0	; () banked
 12533  00473E  51C7               	movf	(??_Test+1)& (0+255),w,b
 12534  004740  0A00               	xorlw	0	; case 0
 12535  004742  A4D8               	btfss	status,2,c
 12536  004744  D020               	goto	l10375
 12537                           
 12538                           ; BSR set to: 0
 12539                           ; Switch size 1, requested type "space"
 12540                           ; Number of cases is 10, Range of values is 1 to 11
 12541                           ; switch strategies available:
 12542                           ; Name         Instructions Cycles
 12543                           ; simple_byte           31    16 (average)
 12544                           ;	Chosen strategy is simple_byte
 12545  004746  0100               	movlb	0	; () banked
 12546  004748  51C6               	movf	??_Test& (0+255),w,b
 12547  00474A  0A01               	xorlw	1	; case 1
 12548  00474C  B4D8               	btfsc	status,2,c
 12549  00474E  D7D4               	goto	l10351
 12550  004750  0A03               	xorlw	3	; case 2
 12551  004752  B4D8               	btfsc	status,2,c
 12552  004754  D7D4               	goto	l10353
 12553  004756  0A01               	xorlw	1	; case 3
 12554  004758  B4D8               	btfsc	status,2,c
 12555  00475A  D7D4               	goto	l10355
 12556  00475C  0A07               	xorlw	7	; case 4
 12557  00475E  B4D8               	btfsc	status,2,c
 12558  004760  D7D4               	goto	l10357
 12559  004762  0A01               	xorlw	1	; case 5
 12560  004764  B4D8               	btfsc	status,2,c
 12561  004766  D7D4               	goto	l10359
 12562  004768  0A03               	xorlw	3	; case 6
 12563  00476A  B4D8               	btfsc	status,2,c
 12564  00476C  D7D4               	goto	l10361
 12565  00476E  0A01               	xorlw	1	; case 7
 12566  004770  B4D8               	btfsc	status,2,c
 12567  004772  D7D4               	goto	l10363
 12568  004774  0A0F               	xorlw	15	; case 8
 12569  004776  B4D8               	btfsc	status,2,c
 12570  004778  D7D4               	goto	l10365
 12571  00477A  0A02               	xorlw	2	; case 10
 12572  00477C  B4D8               	btfsc	status,2,c
 12573  00477E  D7D4               	goto	l10367
 12574  004780  0A01               	xorlw	1	; case 11
 12575  004782  B4D8               	btfsc	status,2,c
 12576  004784  D7D4               	goto	l10369
 12577  004786                     l10375:
 12578  004786  0E03               	movlw	3
 12579  004788  0100               	movlb	0	; () banked
 12580  00478A  19FC               	xorwf	_machine_state& (0+255),w,b
 12581  00478C  A4D8               	btfss	status,2,c
 12582  00478E  0012               	return	
 12583  004790  D77E               	goto	l10335
 12584  004792                     __end_of_Test:
 12585                           	opt stack 0
 12586                           tblptru	equ	0xFF8
 12587                           tblptrh	equ	0xFF7
 12588                           tblptrl	equ	0xFF6
 12589                           tablat	equ	0xFF5
 12590                           prodh	equ	0xFF4
 12591                           prodl	equ	0xFF3
 12592                           intcon	equ	0xFF2
 12593                           intcon2	equ	0xFF1
 12594                           intcon3	equ	0xFF0
 12595                           postinc0	equ	0xFEE
 12596                           wreg	equ	0xFE8
 12597                           postdec1	equ	0xFE5
 12598                           fsr1l	equ	0xFE1
 12599                           indf2	equ	0xFDF
 12600                           postinc2	equ	0xFDE
 12601                           postdec2	equ	0xFDD
 12602                           fsr2h	equ	0xFDA
 12603                           fsr2l	equ	0xFD9
 12604                           status	equ	0xFD8
 12605                           
 12606 ;; *************** function _sensorTest *****************
 12607 ;; Defined at:
 12608 ;;		line 122 in file "Test.c"
 12609 ;; Parameters:    Size  Location     Type
 12610 ;;		None
 12611 ;; Auto vars:     Size  Location     Type
 12612 ;;  res             2   47[BANK0 ] int 
 12613 ;;  res             2   45[BANK0 ] int 
 12614 ;; Return value:  Size  Location     Type
 12615 ;;                  1    wreg      void 
 12616 ;; Registers used:
 12617 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12618 ;; Tracked objects:
 12619 ;;		On entry : 0/0
 12620 ;;		On exit  : 0/0
 12621 ;;		Unchanged: 0/0
 12622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12624 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12625 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12626 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12627 ;;Total ram usage:        6 bytes
 12628 ;; Hardware stack levels used:    1
 12629 ;; Hardware stack levels required when called:   10
 12630 ;; This function calls:
 12631 ;;		_lcdInst
 12632 ;;		_printf
 12633 ;;		_readADC
 12634 ;;		_readMAG
 12635 ;; This function is called by:
 12636 ;;		_Test
 12637 ;; This function uses a non-reentrant model
 12638 ;;
 12639                           
 12640                           	psect	text41
 12641  0025F8                     __ptext41:
 12642                           	opt stack 0
 12643  0025F8                     _sensorTest:
 12644                           	opt stack 19
 12645                           
 12646                           ;Test.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12647                           
 12648                           ; BSR set to: 0
 12649                           ;incstack = 0
 12650  0025F8  0E01               	movlw	1
 12651  0025FA  EC6D  F030         	call	_lcdInst
 12652  0025FE  0E68               	movlw	104
 12653  002600  0100               	movlb	0	; () banked
 12654  002602  6FAB               	movwf	??_sensorTest& (0+255),b
 12655  002604  0EE4               	movlw	228
 12656  002606                     u11547:
 12657  002606  2EE8               	decfsz	wreg,f,c
 12658  002608  D7FE               	bra	u11547
 12659  00260A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12660  00260C  D7FC               	bra	u11547
 12661  00260E  F000               	nop	
 12662  002610  0E80               	movlw	128
 12663  002612  EC6D  F030         	call	_lcdInst
 12664                           
 12665                           ;Test.c: 125: printf("SENSORS");
 12666  002616  0EAD               	movlw	low STR_77
 12667  002618  0100               	movlb	0	; () banked
 12668  00261A  6F8E               	movwf	printf@f& (0+255),b
 12669  00261C  0EFF               	movlw	high STR_77
 12670  00261E  0100               	movlb	0	; () banked
 12671  002620  6F8F               	movwf	(printf@f+1)& (0+255),b
 12672  002622  ECE9  F00E         	call	_printf	;wreg free
 12673                           
 12674                           ;Test.c: 126: lcdInst(0b11000000);;
 12675  002626  0EC0               	movlw	192
 12676  002628  EC6D  F030         	call	_lcdInst
 12677                           
 12678                           ;Test.c: 127: printf("PUSH TO START");
 12679  00262C  0E3A               	movlw	low STR_71
 12680  00262E  0100               	movlb	0	; () banked
 12681  002630  6F8E               	movwf	printf@f& (0+255),b
 12682  002632  0EFF               	movlw	high STR_71
 12683  002634  0100               	movlb	0	; () banked
 12684  002636  6F8F               	movwf	(printf@f+1)& (0+255),b
 12685  002638  ECE9  F00E         	call	_printf	;wreg free
 12686                           
 12687                           ;Test.c: 128: _delay((unsigned long)((100)*(32000000/4000.0)));
 12688  00263C  0E05               	movlw	5
 12689  00263E  0100               	movlb	0	; () banked
 12690  002640  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12691  002642  0E0F               	movlw	15
 12692  002644  0100               	movlb	0	; () banked
 12693  002646  6FAB               	movwf	??_sensorTest& (0+255),b
 12694  002648  0EF1               	movlw	241
 12695  00264A                     u11557:
 12696  00264A  2EE8               	decfsz	wreg,f,c
 12697  00264C  D7FE               	bra	u11557
 12698  00264E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12699  002650  D7FC               	bra	u11557
 12700  002652  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12701  002654  D7FA               	bra	u11557
 12702  002656                     l1319:
 12703  002656  A281               	btfss	3969,1,c	;volatile
 12704  002658  D7FE               	goto	l1319
 12705  00265A                     l1322:
 12706  00265A  B281               	btfsc	3969,1,c	;volatile
 12707  00265C  D7FE               	goto	l1322
 12708                           
 12709                           ;Test.c: 131: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12710  00265E  0E01               	movlw	1
 12711  002660  EC6D  F030         	call	_lcdInst
 12712  002664  0E68               	movlw	104
 12713  002666  0100               	movlb	0	; () banked
 12714  002668  6FAB               	movwf	??_sensorTest& (0+255),b
 12715  00266A  0EE4               	movlw	228
 12716  00266C                     u11567:
 12717  00266C  2EE8               	decfsz	wreg,f,c
 12718  00266E  D7FE               	bra	u11567
 12719  002670  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12720  002672  D7FC               	bra	u11567
 12721  002674  F000               	nop	
 12722  002676  0E80               	movlw	128
 12723  002678  EC6D  F030         	call	_lcdInst
 12724                           
 12725                           ;Test.c: 136: LATCbits.LATC5 = 1;
 12726  00267C  8A8B               	bsf	3979,5,c	;volatile
 12727                           
 12728                           ;Test.c: 138: while(PORTBbits.RB1 == 0){
 12729  00267E  D05C               	goto	l8661
 12730  002680                     l8643:
 12731                           
 12732                           ;Test.c: 139: readADC(0);
 12733  002680  0E00               	movlw	0
 12734  002682  EC66  F02F         	call	_readADC
 12735                           
 12736                           ;Test.c: 140: int res = ADRESH<<8 | ADRESL;
 12737  002686  50C3               	movf	4035,w,c	;volatile
 12738  002688  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 12739  00268C  0100               	movlb	0	; () banked
 12740  00268E  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 12741  002690  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 12742  002694  0100               	movlb	0	; () banked
 12743  002696  6BAB               	clrf	??_sensorTest& (0+255),b
 12744  002698  0100               	movlb	0	; () banked
 12745  00269A  11AB               	iorwf	??_sensorTest& (0+255),w,b
 12746  00269C  0100               	movlb	0	; () banked
 12747  00269E  6FAD               	movwf	sensorTest@res& (0+255),b
 12748  0026A0  0100               	movlb	0	; () banked
 12749  0026A2  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 12750  0026A4  0100               	movlb	0	; () banked
 12751  0026A6  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 12752                           
 12753                           ; BSR set to: 0
 12754                           ;Test.c: 141: IR_signal = (res > 800) ? 1 : 0;
 12755  0026A8  0100               	movlb	0	; () banked
 12756  0026AA  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 12757  0026AC  D00A               	goto	u7840
 12758  0026AE  0E21               	movlw	33
 12759  0026B0  0100               	movlb	0	; () banked
 12760  0026B2  5DAD               	subwf	sensorTest@res& (0+255),w,b
 12761  0026B4  0E03               	movlw	3
 12762  0026B6  0100               	movlb	0	; () banked
 12763  0026B8  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 12764  0026BA  A0D8               	btfss	status,0,c
 12765  0026BC  D002               	goto	u7840
 12766  0026BE  0E01               	movlw	1
 12767  0026C0  D001               	goto	u7850
 12768  0026C2                     u7840:
 12769  0026C2  0E00               	movlw	0
 12770  0026C4                     u7850:
 12771  0026C4  0100               	movlb	0	; () banked
 12772  0026C6  6FE2               	movwf	_IR_signal& (0+255),b
 12773  0026C8  6BE3               	clrf	(_IR_signal+1)& (0+255),b
 12774                           
 12775                           ;Test.c: 143: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12776  0026CA  0E01               	movlw	1
 12777  0026CC  EC6D  F030         	call	_lcdInst
 12778  0026D0  0E68               	movlw	104
 12779  0026D2  0100               	movlb	0	; () banked
 12780  0026D4  6FAB               	movwf	??_sensorTest& (0+255),b
 12781  0026D6  0EE4               	movlw	228
 12782  0026D8                     u11577:
 12783  0026D8  2EE8               	decfsz	wreg,f,c
 12784  0026DA  D7FE               	bra	u11577
 12785  0026DC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12786  0026DE  D7FC               	bra	u11577
 12787  0026E0  F000               	nop	
 12788  0026E2  0E80               	movlw	128
 12789  0026E4  EC6D  F030         	call	_lcdInst
 12790                           
 12791                           ;Test.c: 144: printf("IR (PUSHER): %d  ", IR_signal);
 12792  0026E8  0E25               	movlw	low STR_79
 12793  0026EA  0100               	movlb	0	; () banked
 12794  0026EC  6F8E               	movwf	printf@f& (0+255),b
 12795  0026EE  0EFB               	movlw	high STR_79
 12796  0026F0  0100               	movlb	0	; () banked
 12797  0026F2  6F8F               	movwf	(printf@f+1)& (0+255),b
 12798  0026F4  C0E2  F090         	movff	_IR_signal,?_printf+2
 12799  0026F8  C0E3  F091         	movff	_IR_signal+1,?_printf+3
 12800  0026FC  ECE9  F00E         	call	_printf	;wreg free
 12801                           
 12802                           ;Test.c: 145: lcdInst(0b11000000);;
 12803  002700  0EC0               	movlw	192
 12804  002702  EC6D  F030         	call	_lcdInst
 12805                           
 12806                           ;Test.c: 146: printf("%d", res);
 12807  002706  0E25               	movlw	low (STR_27+14)
 12808  002708  0100               	movlb	0	; () banked
 12809  00270A  6F8E               	movwf	printf@f& (0+255),b
 12810  00270C  0EFE               	movlw	high (STR_27+14)
 12811  00270E  0100               	movlb	0	; () banked
 12812  002710  6F8F               	movwf	(printf@f+1)& (0+255),b
 12813  002712  C0AD  F090         	movff	sensorTest@res,?_printf+2
 12814  002716  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 12815  00271A  ECE9  F00E         	call	_printf	;wreg free
 12816                           
 12817                           ;Test.c: 147: _delay((unsigned long)((100)*(32000000/4000.0)));
 12818  00271E  0E05               	movlw	5
 12819  002720  0100               	movlb	0	; () banked
 12820  002722  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12821  002724  0E0F               	movlw	15
 12822  002726  0100               	movlb	0	; () banked
 12823  002728  6FAB               	movwf	??_sensorTest& (0+255),b
 12824  00272A  0EF1               	movlw	241
 12825  00272C                     u11587:
 12826  00272C  2EE8               	decfsz	wreg,f,c
 12827  00272E  D7FE               	bra	u11587
 12828  002730  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12829  002732  D7FC               	bra	u11587
 12830  002734  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12831  002736  D7FA               	bra	u11587
 12832  002738                     l8661:
 12833  002738  A281               	btfss	3969,1,c	;volatile
 12834  00273A  D7A2               	goto	l8643
 12835                           
 12836                           ;Test.c: 148: }
 12837                           ;Test.c: 149: LATCbits.LATC5 = 0;
 12838  00273C  9A8B               	bcf	3979,5,c	;volatile
 12839  00273E                     l1328:
 12840  00273E  B281               	btfsc	3969,1,c	;volatile
 12841  002740  D7FE               	goto	l1328
 12842                           
 12843                           ;Test.c: 155: LATCbits.LATC6 = 1;
 12844  002742  8C8B               	bsf	3979,6,c	;volatile
 12845                           
 12846                           ;Test.c: 158: while(PORTBbits.RB1 == 0){
 12847                           
 12848                           ;Test.c: 157: while(1){
 12849  002744  D05C               	goto	l8681
 12850  002746                     l8663:
 12851                           
 12852                           ;Test.c: 159: readADC(3);
 12853  002746  0E03               	movlw	3
 12854  002748  EC66  F02F         	call	_readADC
 12855                           
 12856                           ;Test.c: 160: int res = ADRESH<<8 | ADRESL;
 12857  00274C  50C3               	movf	4035,w,c	;volatile
 12858  00274E  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 12859  002752  0100               	movlb	0	; () banked
 12860  002754  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 12861  002756  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 12862  00275A  0100               	movlb	0	; () banked
 12863  00275C  6BAB               	clrf	??_sensorTest& (0+255),b
 12864  00275E  0100               	movlb	0	; () banked
 12865  002760  11AB               	iorwf	??_sensorTest& (0+255),w,b
 12866  002762  0100               	movlb	0	; () banked
 12867  002764  6FAF               	movwf	sensorTest@res_1733& (0+255),b
 12868  002766  0100               	movlb	0	; () banked
 12869  002768  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 12870  00276A  0100               	movlb	0	; () banked
 12871  00276C  6FB0               	movwf	(sensorTest@res_1733+1)& (0+255),b
 12872                           
 12873                           ; BSR set to: 0
 12874                           ;Test.c: 161: IR_signal = (res > 250) ? 1 : 0;
 12875  00276E  0100               	movlb	0	; () banked
 12876  002770  BFB0               	btfsc	(sensorTest@res_1733+1)& (0+255),7,b
 12877  002772  D00A               	goto	u7880
 12878  002774  0100               	movlb	0	; () banked
 12879  002776  51B0               	movf	(sensorTest@res_1733+1)& (0+255),w,b
 12880  002778  E105               	bnz	u7881
 12881  00277A  0EFB               	movlw	251
 12882  00277C  0100               	movlb	0	; () banked
 12883  00277E  5DAF               	subwf	sensorTest@res_1733& (0+255),w,b
 12884  002780  A0D8               	btfss	status,0,c
 12885  002782  D002               	goto	u7880
 12886  002784                     u7881:
 12887  002784  0E01               	movlw	1
 12888  002786  D001               	goto	u7890
 12889  002788                     u7880:
 12890  002788  0E00               	movlw	0
 12891  00278A                     u7890:
 12892  00278A  0100               	movlb	0	; () banked
 12893  00278C  6FE2               	movwf	_IR_signal& (0+255),b
 12894  00278E  6BE3               	clrf	(_IR_signal+1)& (0+255),b
 12895                           
 12896                           ;Test.c: 163: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12897  002790  0E01               	movlw	1
 12898  002792  EC6D  F030         	call	_lcdInst
 12899  002796  0E68               	movlw	104
 12900  002798  0100               	movlb	0	; () banked
 12901  00279A  6FAB               	movwf	??_sensorTest& (0+255),b
 12902  00279C  0EE4               	movlw	228
 12903  00279E                     u11597:
 12904  00279E  2EE8               	decfsz	wreg,f,c
 12905  0027A0  D7FE               	bra	u11597
 12906  0027A2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12907  0027A4  D7FC               	bra	u11597
 12908  0027A6  F000               	nop	
 12909  0027A8  0E80               	movlw	128
 12910  0027AA  EC6D  F030         	call	_lcdInst
 12911                           
 12912                           ;Test.c: 164: printf("IR (REFLEC): %d  ", IR_signal);
 12913  0027AE  0E13               	movlw	low STR_81
 12914  0027B0  0100               	movlb	0	; () banked
 12915  0027B2  6F8E               	movwf	printf@f& (0+255),b
 12916  0027B4  0EFB               	movlw	high STR_81
 12917  0027B6  0100               	movlb	0	; () banked
 12918  0027B8  6F8F               	movwf	(printf@f+1)& (0+255),b
 12919  0027BA  C0E2  F090         	movff	_IR_signal,?_printf+2
 12920  0027BE  C0E3  F091         	movff	_IR_signal+1,?_printf+3
 12921  0027C2  ECE9  F00E         	call	_printf	;wreg free
 12922                           
 12923                           ;Test.c: 165: lcdInst(0b11000000);;
 12924  0027C6  0EC0               	movlw	192
 12925  0027C8  EC6D  F030         	call	_lcdInst
 12926                           
 12927                           ;Test.c: 166: printf("%d", res);
 12928  0027CC  0E25               	movlw	low (STR_27+14)
 12929  0027CE  0100               	movlb	0	; () banked
 12930  0027D0  6F8E               	movwf	printf@f& (0+255),b
 12931  0027D2  0EFE               	movlw	high (STR_27+14)
 12932  0027D4  0100               	movlb	0	; () banked
 12933  0027D6  6F8F               	movwf	(printf@f+1)& (0+255),b
 12934  0027D8  C0AF  F090         	movff	sensorTest@res_1733,?_printf+2
 12935  0027DC  C0B0  F091         	movff	sensorTest@res_1733+1,?_printf+3
 12936  0027E0  ECE9  F00E         	call	_printf	;wreg free
 12937                           
 12938                           ;Test.c: 167: _delay((unsigned long)((100)*(32000000/4000.0)));
 12939  0027E4  0E05               	movlw	5
 12940  0027E6  0100               	movlb	0	; () banked
 12941  0027E8  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12942  0027EA  0E0F               	movlw	15
 12943  0027EC  0100               	movlb	0	; () banked
 12944  0027EE  6FAB               	movwf	??_sensorTest& (0+255),b
 12945  0027F0  0EF1               	movlw	241
 12946  0027F2                     u11607:
 12947  0027F2  2EE8               	decfsz	wreg,f,c
 12948  0027F4  D7FE               	bra	u11607
 12949  0027F6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12950  0027F8  D7FC               	bra	u11607
 12951  0027FA  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12952  0027FC  D7FA               	bra	u11607
 12953  0027FE                     l8681:
 12954  0027FE  A281               	btfss	3969,1,c	;volatile
 12955  002800  D7A2               	goto	l8663
 12956                           
 12957                           ;Test.c: 168: }
 12958                           ;Test.c: 169: if(PORTB >> 4 == 0b1111){
 12959  002802  3881               	swapf	3969,w,c	;volatile
 12960  002804  0B0F               	andlw	15
 12961  002806  0A0F               	xorlw	15
 12962  002808  B4D8               	btfsc	status,2,c
 12963  00280A  D01D               	goto	l1336
 12964                           
 12965                           ;Test.c: 172: else if(PORTB >> 4 == 0b0000){
 12966                           
 12967                           ;Test.c: 171: }
 12968                           
 12969                           ;Test.c: 170: break;
 12970  00280C  CF81 F0AB          	movff	3969,??_sensorTest	;volatile
 12971  002810  0100               	movlb	0	; () banked
 12972  002812  3BAB               	swapf	??_sensorTest& (0+255),f,b
 12973  002814  0E0F               	movlw	15
 12974  002816  17AB               	andwf	??_sensorTest& (0+255),f,b
 12975  002818  A4D8               	btfss	status,2,c
 12976  00281A  D012               	goto	l1339
 12977                           
 12978                           ; BSR set to: 0
 12979                           ;Test.c: 173: LATCbits.LATC6 = !LATCbits.LATC6;
 12980  00281C  BC8B               	btfsc	3979,6,c	;volatile
 12981  00281E  D004               	goto	u7930
 12982  002820  0100               	movlb	0	; () banked
 12983  002822  6BAB               	clrf	??_sensorTest& (0+255),b
 12984  002824  2BAB               	incf	??_sensorTest& (0+255),f,b
 12985  002826  D002               	goto	u7948
 12986  002828                     u7930:
 12987  002828  0100               	movlb	0	; () banked
 12988  00282A  6BAB               	clrf	??_sensorTest& (0+255),b
 12989  00282C                     u7948:
 12990  00282C  0100               	movlb	0	; () banked
 12991  00282E  3BAB               	swapf	??_sensorTest& (0+255),f,b
 12992  002830  47AB               	rlncf	??_sensorTest& (0+255),f,b
 12993  002832  47AB               	rlncf	??_sensorTest& (0+255),f,b
 12994  002834  508B               	movf	3979,w,c	;volatile
 12995  002836  0100               	movlb	0	; () banked
 12996  002838  19AB               	xorwf	??_sensorTest& (0+255),w,b
 12997  00283A  0BBF               	andlw	-65
 12998  00283C  19AB               	xorwf	??_sensorTest& (0+255),w,b
 12999  00283E  6E8B               	movwf	3979,c	;volatile
 13000  002840                     l1339:
 13001  002840  A281               	btfss	3969,1,c	;volatile
 13002  002842  D7DD               	goto	l8681
 13003  002844  D7FD               	goto	l1339
 13004  002846                     l1336:
 13005                           
 13006                           ;Test.c: 176: }
 13007                           ;Test.c: 177: LATCbits.LATC6 = 0;
 13008  002846  9C8B               	bcf	3979,6,c	;volatile
 13009  002848                     l1343:
 13010  002848  B281               	btfsc	3969,1,c	;volatile
 13011  00284A  D7FE               	goto	l1343
 13012                           
 13013                           ;Test.c: 187: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13014  00284C  0E01               	movlw	1
 13015  00284E  EC6D  F030         	call	_lcdInst
 13016  002852  0E68               	movlw	104
 13017  002854  0100               	movlb	0	; () banked
 13018  002856  6FAB               	movwf	??_sensorTest& (0+255),b
 13019  002858  0EE4               	movlw	228
 13020  00285A                     u11617:
 13021  00285A  2EE8               	decfsz	wreg,f,c
 13022  00285C  D7FE               	bra	u11617
 13023  00285E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 13024  002860  D7FC               	bra	u11617
 13025  002862  F000               	nop	
 13026  002864  0E80               	movlw	128
 13027  002866  EC6D  F030         	call	_lcdInst
 13028                           
 13029                           ;Test.c: 188: printf("TST: MAGNETISM");
 13030  00286A  0EB6               	movlw	low STR_83
 13031  00286C  0100               	movlb	0	; () banked
 13032  00286E  6F8E               	movwf	printf@f& (0+255),b
 13033  002870  0EFE               	movlw	high STR_83
 13034  002872  0100               	movlb	0	; () banked
 13035  002874  6F8F               	movwf	(printf@f+1)& (0+255),b
 13036  002876  ECE9  F00E         	call	_printf	;wreg free
 13037                           
 13038                           ;Test.c: 189: _delay((unsigned long)((100)*(32000000/4000.0)));
 13039  00287A  0E05               	movlw	5
 13040  00287C  0100               	movlb	0	; () banked
 13041  00287E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 13042  002880  0E0F               	movlw	15
 13043  002882  0100               	movlb	0	; () banked
 13044  002884  6FAB               	movwf	??_sensorTest& (0+255),b
 13045  002886  0EF1               	movlw	241
 13046  002888                     u11627:
 13047  002888  2EE8               	decfsz	wreg,f,c
 13048  00288A  D7FE               	bra	u11627
 13049  00288C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 13050  00288E  D7FC               	bra	u11627
 13051  002890  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 13052  002892  D7FA               	bra	u11627
 13053                           
 13054                           ;Test.c: 190: while(PORTBbits.RB1 == 0){
 13055  002894  D021               	goto	l8709
 13056  002896                     l8703:
 13057                           
 13058                           ;Test.c: 191: readMAG();
 13059  002896  ECEA  F02C         	call	_readMAG	;wreg free
 13060                           
 13061                           ;Test.c: 192: lcdInst(0b10000000);;
 13062  00289A  0E80               	movlw	128
 13063  00289C  EC6D  F030         	call	_lcdInst
 13064                           
 13065                           ;Test.c: 193: lcdInst(0b11000000);;
 13066  0028A0  0EC0               	movlw	192
 13067  0028A2  EC6D  F030         	call	_lcdInst
 13068                           
 13069                           ;Test.c: 194: printf("MAG_signal: %d ", MAG_signal);
 13070  0028A6  0E39               	movlw	low STR_84
 13071  0028A8  0100               	movlb	0	; () banked
 13072  0028AA  6F8E               	movwf	printf@f& (0+255),b
 13073  0028AC  0EFE               	movlw	high STR_84
 13074  0028AE  0100               	movlb	0	; () banked
 13075  0028B0  6F8F               	movwf	(printf@f+1)& (0+255),b
 13076  0028B2  C0E4  F090         	movff	_MAG_signal,?_printf+2
 13077  0028B6  C0E5  F091         	movff	_MAG_signal+1,?_printf+3
 13078  0028BA  ECE9  F00E         	call	_printf	;wreg free
 13079                           
 13080                           ;Test.c: 195: _delay((unsigned long)((100)*(32000000/4000.0)));
 13081  0028BE  0E05               	movlw	5
 13082  0028C0  0100               	movlb	0	; () banked
 13083  0028C2  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 13084  0028C4  0E0F               	movlw	15
 13085  0028C6  0100               	movlb	0	; () banked
 13086  0028C8  6FAB               	movwf	??_sensorTest& (0+255),b
 13087  0028CA  0EF1               	movlw	241
 13088  0028CC                     u11637:
 13089  0028CC  2EE8               	decfsz	wreg,f,c
 13090  0028CE  D7FE               	bra	u11637
 13091  0028D0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 13092  0028D2  D7FC               	bra	u11637
 13093  0028D4  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 13094  0028D6  D7FA               	bra	u11637
 13095  0028D8                     l8709:
 13096  0028D8  A281               	btfss	3969,1,c	;volatile
 13097  0028DA  D7DD               	goto	l8703
 13098  0028DC                     l1349:
 13099  0028DC  B281               	btfsc	3969,1,c	;volatile
 13100  0028DE  D7FE               	goto	l1349
 13101                           
 13102                           ;Test.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13103  0028E0  0E01               	movlw	1
 13104  0028E2  EC6D  F030         	call	_lcdInst
 13105  0028E6  0E68               	movlw	104
 13106  0028E8  0100               	movlb	0	; () banked
 13107  0028EA  6FAB               	movwf	??_sensorTest& (0+255),b
 13108  0028EC  0EE4               	movlw	228
 13109  0028EE                     u11647:
 13110  0028EE  2EE8               	decfsz	wreg,f,c
 13111  0028F0  D7FE               	bra	u11647
 13112  0028F2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 13113  0028F4  D7FC               	bra	u11647
 13114  0028F6  F000               	nop	
 13115  0028F8  0E80               	movlw	128
 13116  0028FA  EC6D  F030         	call	_lcdInst
 13117                           
 13118                           ;Test.c: 203: printf("TST: COND");
 13119  0028FE  0E86               	movlw	low STR_85
 13120  002900  0100               	movlb	0	; () banked
 13121  002902  6F8E               	movwf	printf@f& (0+255),b
 13122  002904  0EFF               	movlw	high STR_85
 13123  002906  0100               	movlb	0	; () banked
 13124  002908  6F8F               	movwf	(printf@f+1)& (0+255),b
 13125  00290A  ECE9  F00E         	call	_printf	;wreg free
 13126                           
 13127                           ;Test.c: 204: _delay((unsigned long)((100)*(32000000/4000.0)));
 13128  00290E  0E05               	movlw	5
 13129  002910  0100               	movlb	0	; () banked
 13130  002912  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 13131  002914  0E0F               	movlw	15
 13132  002916  0100               	movlb	0	; () banked
 13133  002918  6FAB               	movwf	??_sensorTest& (0+255),b
 13134  00291A  0EF1               	movlw	241
 13135  00291C                     u11657:
 13136  00291C  2EE8               	decfsz	wreg,f,c
 13137  00291E  D7FE               	bra	u11657
 13138  002920  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 13139  002922  D7FC               	bra	u11657
 13140  002924  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 13141  002926  D7FA               	bra	u11657
 13142  002928                     l8721:
 13143                           
 13144                           ;Test.c: 206: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13145  002928  0E01               	movlw	1
 13146  00292A  EC6D  F030         	call	_lcdInst
 13147  00292E  0E68               	movlw	104
 13148  002930  0100               	movlb	0	; () banked
 13149  002932  6FAB               	movwf	??_sensorTest& (0+255),b
 13150  002934  0EE4               	movlw	228
 13151  002936                     u11667:
 13152  002936  2EE8               	decfsz	wreg,f,c
 13153  002938  D7FE               	bra	u11667
 13154  00293A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 13155  00293C  D7FC               	bra	u11667
 13156  00293E  F000               	nop	
 13157  002940  0E80               	movlw	128
 13158  002942  EC6D  F030         	call	_lcdInst
 13159                           
 13160                           ;Test.c: 207: printf("TST: COND");
 13161  002946  0E86               	movlw	low STR_85
 13162  002948  0100               	movlb	0	; () banked
 13163  00294A  6F8E               	movwf	printf@f& (0+255),b
 13164  00294C  0EFF               	movlw	high STR_85
 13165  00294E  0100               	movlb	0	; () banked
 13166  002950  6F8F               	movwf	(printf@f+1)& (0+255),b
 13167  002952  ECE9  F00E         	call	_printf	;wreg free
 13168                           
 13169                           ;Test.c: 208: while(PORTBbits.RB1 == 0){
 13170  002956  D01B               	goto	l8733
 13171  002958                     l8729:
 13172                           
 13173                           ;Test.c: 212: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13174  002958  0E80               	movlw	128
 13175  00295A  EC6D  F030         	call	_lcdInst
 13176  00295E  0EC0               	movlw	192
 13177  002960  EC6D  F030         	call	_lcdInst
 13178                           
 13179                           ;Test.c: 213: printf("COND: %d", PORTAbits.RA2);
 13180  002964  0EA4               	movlw	low STR_87
 13181  002966  0100               	movlb	0	; () banked
 13182  002968  6F8E               	movwf	printf@f& (0+255),b
 13183  00296A  0EFF               	movlw	high STR_87
 13184  00296C  0100               	movlb	0	; () banked
 13185  00296E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13186  002970  A480               	btfss	3968,2,c	;volatile
 13187  002972  D004               	goto	u7990
 13188  002974  0100               	movlb	0	; () banked
 13189  002976  6BAB               	clrf	??_sensorTest& (0+255),b
 13190  002978  2BAB               	incf	??_sensorTest& (0+255),f,b
 13191  00297A  D002               	goto	u7998
 13192  00297C                     u7990:
 13193  00297C  0100               	movlb	0	; () banked
 13194  00297E  6BAB               	clrf	??_sensorTest& (0+255),b
 13195  002980                     u7998:
 13196  002980  0100               	movlb	0	; () banked
 13197  002982  51AB               	movf	??_sensorTest& (0+255),w,b
 13198  002984  0100               	movlb	0	; () banked
 13199  002986  6F90               	movwf	(?_printf+2)& (0+255),b
 13200  002988  6B91               	clrf	(?_printf+3)& (0+255),b
 13201  00298A  ECE9  F00E         	call	_printf	;wreg free
 13202  00298E                     l8733:
 13203  00298E  A281               	btfss	3969,1,c	;volatile
 13204  002990  D7E3               	goto	l8729
 13205                           
 13206                           ;Test.c: 214: }
 13207                           ;Test.c: 215: if(PORTB >> 4 == 0b1111){
 13208  002992  3881               	swapf	3969,w,c	;volatile
 13209  002994  0B0F               	andlw	15
 13210  002996  0A0F               	xorlw	15
 13211  002998  B4D8               	btfsc	status,2,c
 13212  00299A  0012               	return	
 13213                           
 13214                           ;Test.c: 218: else{
 13215                           ;Test.c: 219: LATCbits.LATC7 = 1;
 13216                           
 13217                           ;Test.c: 217: }
 13218                           
 13219                           ;Test.c: 216: break;
 13220  00299C  8E8B               	bsf	3979,7,c	;volatile
 13221                           
 13222                           ;Test.c: 220: while(PORTBbits.RB1 == 1){
 13223  00299E  D01B               	goto	l8745
 13224  0029A0                     l8741:
 13225                           
 13226                           ;Test.c: 222: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13227  0029A0  0E80               	movlw	128
 13228  0029A2  EC6D  F030         	call	_lcdInst
 13229  0029A6  0EC0               	movlw	192
 13230  0029A8  EC6D  F030         	call	_lcdInst
 13231                           
 13232                           ;Test.c: 223: printf("COND: %d", PORTAbits.RA2);
 13233  0029AC  0EA4               	movlw	low STR_87
 13234  0029AE  0100               	movlb	0	; () banked
 13235  0029B0  6F8E               	movwf	printf@f& (0+255),b
 13236  0029B2  0EFF               	movlw	high STR_87
 13237  0029B4  0100               	movlb	0	; () banked
 13238  0029B6  6F8F               	movwf	(printf@f+1)& (0+255),b
 13239  0029B8  A480               	btfss	3968,2,c	;volatile
 13240  0029BA  D004               	goto	u8020
 13241  0029BC  0100               	movlb	0	; () banked
 13242  0029BE  6BAB               	clrf	??_sensorTest& (0+255),b
 13243  0029C0  2BAB               	incf	??_sensorTest& (0+255),f,b
 13244  0029C2  D002               	goto	u8028
 13245  0029C4                     u8020:
 13246  0029C4  0100               	movlb	0	; () banked
 13247  0029C6  6BAB               	clrf	??_sensorTest& (0+255),b
 13248  0029C8                     u8028:
 13249  0029C8  0100               	movlb	0	; () banked
 13250  0029CA  51AB               	movf	??_sensorTest& (0+255),w,b
 13251  0029CC  0100               	movlb	0	; () banked
 13252  0029CE  6F90               	movwf	(?_printf+2)& (0+255),b
 13253  0029D0  6B91               	clrf	(?_printf+3)& (0+255),b
 13254  0029D2  ECE9  F00E         	call	_printf	;wreg free
 13255  0029D6                     l8745:
 13256  0029D6  B281               	btfsc	3969,1,c	;volatile
 13257  0029D8  D7E3               	goto	l8741
 13258                           
 13259                           ;Test.c: 224: }
 13260                           ;Test.c: 225: LATCbits.LATC7 = !1;
 13261  0029DA  9E8B               	bcf	3979,7,c	;volatile
 13262  0029DC  D7A5               	goto	l8721
 13263  0029DE                     __end_of_sensorTest:
 13264                           	opt stack 0
 13265                           tblptru	equ	0xFF8
 13266                           tblptrh	equ	0xFF7
 13267                           tblptrl	equ	0xFF6
 13268                           tablat	equ	0xFF5
 13269                           prodh	equ	0xFF4
 13270                           prodl	equ	0xFF3
 13271                           intcon	equ	0xFF2
 13272                           intcon2	equ	0xFF1
 13273                           intcon3	equ	0xFF0
 13274                           postinc0	equ	0xFEE
 13275                           wreg	equ	0xFE8
 13276                           postdec1	equ	0xFE5
 13277                           fsr1l	equ	0xFE1
 13278                           indf2	equ	0xFDF
 13279                           postinc2	equ	0xFDE
 13280                           postdec2	equ	0xFDD
 13281                           fsr2h	equ	0xFDA
 13282                           fsr2l	equ	0xFD9
 13283                           status	equ	0xFD8
 13284                           
 13285 ;; *************** function _readMAG *****************
 13286 ;; Defined at:
 13287 ;;		line 38 in file "ADCFunctionality.c"
 13288 ;; Parameters:    Size  Location     Type
 13289 ;;		None
 13290 ;; Auto vars:     Size  Location     Type
 13291 ;;  res             2    4[BANK0 ] int 
 13292 ;; Return value:  Size  Location     Type
 13293 ;;                  1    wreg      void 
 13294 ;; Registers used:
 13295 ;;		wreg, status,2, status,0, cstack
 13296 ;; Tracked objects:
 13297 ;;		On entry : 0/0
 13298 ;;		On exit  : 0/0
 13299 ;;		Unchanged: 0/0
 13300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13302 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13303 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13304 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13305 ;;Total ram usage:        4 bytes
 13306 ;; Hardware stack levels used:    1
 13307 ;; Hardware stack levels required when called:    8
 13308 ;; This function calls:
 13309 ;;		_readADC
 13310 ;; This function is called by:
 13311 ;;		_getMAG
 13312 ;;		_sensorTest
 13313 ;; This function uses a non-reentrant model
 13314 ;;
 13315                           
 13316                           	psect	text42
 13317  0059D4                     __ptext42:
 13318                           	opt stack 0
 13319  0059D4                     _readMAG:
 13320                           	opt stack 19
 13321                           
 13322                           ;ADCFunctionality.c: 39: readADC(1);
 13323                           
 13324                           ;incstack = 0
 13325  0059D4  0E01               	movlw	1
 13326  0059D6  EC66  F02F         	call	_readADC
 13327                           
 13328                           ;ADCFunctionality.c: 40: int res = ADRESH<<8 | ADRESL;
 13329  0059DA  50C3               	movf	4035,w,c	;volatile
 13330  0059DC  CFC4 F082          	movff	4036,??_readMAG	;volatile
 13331  0059E0  0100               	movlb	0	; () banked
 13332  0059E2  6B83               	clrf	(??_readMAG+1)& (0+255),b
 13333  0059E4  C082  F083         	movff	??_readMAG,??_readMAG+1
 13334  0059E8  0100               	movlb	0	; () banked
 13335  0059EA  6B82               	clrf	??_readMAG& (0+255),b
 13336  0059EC  0100               	movlb	0	; () banked
 13337  0059EE  1182               	iorwf	??_readMAG& (0+255),w,b
 13338  0059F0  0100               	movlb	0	; () banked
 13339  0059F2  6F84               	movwf	readMAG@res& (0+255),b
 13340  0059F4  0100               	movlb	0	; () banked
 13341  0059F6  5183               	movf	(??_readMAG+1)& (0+255),w,b
 13342  0059F8  0100               	movlb	0	; () banked
 13343  0059FA  6F85               	movwf	(readMAG@res+1)& (0+255),b
 13344                           
 13345                           ; BSR set to: 0
 13346                           ;ADCFunctionality.c: 41: MAG_signal = (res < 150) ? 1 : 0;
 13347  0059FC  0100               	movlb	0	; () banked
 13348  0059FE  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 13349  005A00  D008               	goto	u5721
 13350  005A02  0100               	movlb	0	; () banked
 13351  005A04  5185               	movf	(readMAG@res+1)& (0+255),w,b
 13352  005A06  E107               	bnz	u5720
 13353  005A08  0E96               	movlw	150
 13354  005A0A  0100               	movlb	0	; () banked
 13355  005A0C  5D84               	subwf	readMAG@res& (0+255),w,b
 13356  005A0E  B0D8               	btfsc	status,0,c
 13357  005A10  D002               	goto	u5720
 13358  005A12                     u5721:
 13359  005A12  0E01               	movlw	1
 13360  005A14  D001               	goto	u5730
 13361  005A16                     u5720:
 13362  005A16  0E00               	movlw	0
 13363  005A18                     u5730:
 13364  005A18  0100               	movlb	0	; () banked
 13365  005A1A  6FE4               	movwf	_MAG_signal& (0+255),b
 13366  005A1C  6BE5               	clrf	(_MAG_signal+1)& (0+255),b
 13367                           
 13368                           ; BSR set to: 0
 13369  005A1E  0012               	return		;funcret
 13370  005A20                     __end_of_readMAG:
 13371                           	opt stack 0
 13372                           tblptru	equ	0xFF8
 13373                           tblptrh	equ	0xFF7
 13374                           tblptrl	equ	0xFF6
 13375                           tablat	equ	0xFF5
 13376                           prodh	equ	0xFF4
 13377                           prodl	equ	0xFF3
 13378                           intcon	equ	0xFF2
 13379                           intcon2	equ	0xFF1
 13380                           intcon3	equ	0xFF0
 13381                           postinc0	equ	0xFEE
 13382                           wreg	equ	0xFE8
 13383                           postdec1	equ	0xFE5
 13384                           fsr1l	equ	0xFE1
 13385                           indf2	equ	0xFDF
 13386                           postinc2	equ	0xFDE
 13387                           postdec2	equ	0xFDD
 13388                           fsr2h	equ	0xFDA
 13389                           fsr2l	equ	0xFD9
 13390                           status	equ	0xFD8
 13391                           
 13392 ;; *************** function _arm *****************
 13393 ;; Defined at:
 13394 ;;		line 663 in file "Test.c"
 13395 ;; Parameters:    Size  Location     Type
 13396 ;;		None
 13397 ;; Auto vars:     Size  Location     Type
 13398 ;;  on              2   44[BANK0 ] int 
 13399 ;; Return value:  Size  Location     Type
 13400 ;;                  1    wreg      void 
 13401 ;; Registers used:
 13402 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13403 ;; Tracked objects:
 13404 ;;		On entry : 0/0
 13405 ;;		On exit  : 0/0
 13406 ;;		Unchanged: 0/0
 13407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13409 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13410 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13411 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13412 ;;Total ram usage:        3 bytes
 13413 ;; Hardware stack levels used:    1
 13414 ;; Hardware stack levels required when called:   10
 13415 ;; This function calls:
 13416 ;;		_lcdInst
 13417 ;;		_printf
 13418 ;;		_stopSignals
 13419 ;; This function is called by:
 13420 ;;		_Test
 13421 ;; This function uses a non-reentrant model
 13422 ;;
 13423                           
 13424                           	psect	text43
 13425  004792                     __ptext43:
 13426                           	opt stack 0
 13427  004792                     _arm:
 13428                           	opt stack 19
 13429                           
 13430                           ;Test.c: 664: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13431                           
 13432                           ; BSR set to: 0
 13433                           ;incstack = 0
 13434  004792  0E01               	movlw	1
 13435  004794  EC6D  F030         	call	_lcdInst
 13436  004798  0E68               	movlw	104
 13437  00479A  0100               	movlb	0	; () banked
 13438  00479C  6FAB               	movwf	??_arm& (0+255),b
 13439  00479E  0EE4               	movlw	228
 13440  0047A0                     u11677:
 13441  0047A0  2EE8               	decfsz	wreg,f,c
 13442  0047A2  D7FE               	bra	u11677
 13443  0047A4  2FAB               	decfsz	??_arm& (0+255),f,b
 13444  0047A6  D7FC               	bra	u11677
 13445  0047A8  F000               	nop	
 13446  0047AA  0E80               	movlw	128
 13447  0047AC  EC6D  F030         	call	_lcdInst
 13448                           
 13449                           ;Test.c: 665: printf("D WILL RETURN   ");
 13450  0047B0  0E08               	movlw	low STR_125
 13451  0047B2  0100               	movlb	0	; () banked
 13452  0047B4  6F8E               	movwf	printf@f& (0+255),b
 13453  0047B6  0EFC               	movlw	high STR_125
 13454  0047B8  0100               	movlb	0	; () banked
 13455  0047BA  6F8F               	movwf	(printf@f+1)& (0+255),b
 13456  0047BC  ECE9  F00E         	call	_printf	;wreg free
 13457                           
 13458                           ;Test.c: 666: lcdInst(0b11000000);;
 13459  0047C0  0EC0               	movlw	192
 13460  0047C2  EC6D  F030         	call	_lcdInst
 13461                           
 13462                           ;Test.c: 667: printf("ELSE TOGGLES ARM");
 13463  0047C6  0EB2               	movlw	low STR_126
 13464  0047C8  0100               	movlb	0	; () banked
 13465  0047CA  6F8E               	movwf	printf@f& (0+255),b
 13466  0047CC  0EFC               	movlw	high STR_126
 13467  0047CE  0100               	movlb	0	; () banked
 13468  0047D0  6F8F               	movwf	(printf@f+1)& (0+255),b
 13469  0047D2  ECE9  F00E         	call	_printf	;wreg free
 13470                           
 13471                           ;Test.c: 669: (INTCONbits.GIE = 1);
 13472  0047D6  8EF2               	bsf	intcon,7,c	;volatile
 13473                           
 13474                           ;Test.c: 670: machine_state = Sorting_state;
 13475  0047D8  0E01               	movlw	1
 13476  0047DA  0100               	movlb	0	; () banked
 13477  0047DC  6FFC               	movwf	_machine_state& (0+255),b
 13478                           
 13479                           ; BSR set to: 0
 13480                           ;Test.c: 671: f_arm_position = 1;
 13481  0047DE  0E00               	movlw	0
 13482  0047E0  0100               	movlb	0	; () banked
 13483  0047E2  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 13484  0047E4  0E01               	movlw	1
 13485  0047E6  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 13486                           
 13487                           ; BSR set to: 0
 13488                           ;Test.c: 672: timer2_counter = 0;
 13489  0047E8  0E00               	movlw	0
 13490  0047EA  6E74               	movwf	_timer2_counter+1,c	;volatile
 13491  0047EC  0E00               	movlw	0
 13492  0047EE  6E73               	movwf	_timer2_counter,c	;volatile
 13493                           
 13494                           ; BSR set to: 0
 13495                           ;Test.c: 673: LATBbits.LATB3 = 1;
 13496  0047F0  868A               	bsf	3978,3,c	;volatile
 13497                           
 13498                           ; BSR set to: 0
 13499                           ;Test.c: 674: TMR2ON = 1;
 13500  0047F2  84CA               	bsf	4042,2,c	;volatile
 13501                           
 13502                           ; BSR set to: 0
 13503                           ;Test.c: 675: was_low_2 = 0;
 13504  0047F4  0E00               	movlw	0
 13505  0047F6  6E7A               	movwf	_was_low_2+1,c	;volatile
 13506  0047F8  0E00               	movlw	0
 13507  0047FA  6E79               	movwf	_was_low_2,c	;volatile
 13508                           
 13509                           ; BSR set to: 0
 13510                           ;Test.c: 677: int on = 0;
 13511  0047FC  0E00               	movlw	0
 13512  0047FE  0100               	movlb	0	; () banked
 13513  004800  6FAD               	movwf	(arm@on+1)& (0+255),b
 13514  004802  0E00               	movlw	0
 13515  004804  6FAC               	movwf	arm@on& (0+255),b
 13516  004806                     l9199:
 13517                           
 13518                           ;Test.c: 679: if(on){
 13519  004806  0100               	movlb	0	; () banked
 13520  004808  51AC               	movf	arm@on& (0+255),w,b
 13521  00480A  0100               	movlb	0	; () banked
 13522  00480C  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 13523  00480E  B4D8               	btfsc	status,2,c
 13524  004810  D01C               	goto	l9211
 13525                           
 13526                           ; BSR set to: 0
 13527                           ;Test.c: 680: on = !on;
 13528  004812  0100               	movlb	0	; () banked
 13529  004814  51AC               	movf	arm@on& (0+255),w,b
 13530  004816  0100               	movlb	0	; () banked
 13531  004818  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 13532  00481A  A4D8               	btfss	status,2,c
 13533  00481C  D002               	goto	u8610
 13534  00481E  0E01               	movlw	1
 13535  004820  D001               	goto	u8620
 13536  004822                     u8610:
 13537  004822  0E00               	movlw	0
 13538  004824                     u8620:
 13539  004824  0100               	movlb	0	; () banked
 13540  004826  6FAC               	movwf	arm@on& (0+255),b
 13541  004828  6BAD               	clrf	(arm@on+1)& (0+255),b
 13542                           
 13543                           ;Test.c: 681: while(PORTBbits.RB1 == 0){
 13544  00482A  D005               	goto	l9205
 13545  00482C                     l9203:
 13546                           
 13547                           ; BSR set to: 0
 13548                           ;Test.c: 682: f_arm_position = 0;
 13549  00482C  0E00               	movlw	0
 13550  00482E  0100               	movlb	0	; () banked
 13551  004830  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 13552  004832  0E00               	movlw	0
 13553  004834  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 13554  004836                     l9205:
 13555                           
 13556                           ; BSR set to: 0
 13557  004836  A281               	btfss	3969,1,c	;volatile
 13558  004838  D7F9               	goto	l9203
 13559                           
 13560                           ; BSR set to: 0
 13561                           ;Test.c: 683: }
 13562                           ;Test.c: 684: if(PORTB >> 4 == 0b1111){
 13563                           
 13564                           ; BSR set to: 0
 13565  00483A  3881               	swapf	3969,w,c	;volatile
 13566  00483C  0B0F               	andlw	15
 13567  00483E  0A0F               	xorlw	15
 13568  004840  B4D8               	btfsc	status,2,c
 13569  004842  D01F               	goto	l1534
 13570  004844                     l1535:
 13571  004844  A281               	btfss	3969,1,c	;volatile
 13572  004846  D7DF               	goto	l9199
 13573  004848  D7FD               	goto	l1535
 13574  00484A                     l9211:
 13575                           
 13576                           ;Test.c: 689: else{
 13577                           ;Test.c: 690: on = !on;
 13578  00484A  0100               	movlb	0	; () banked
 13579  00484C  51AC               	movf	arm@on& (0+255),w,b
 13580  00484E  0100               	movlb	0	; () banked
 13581  004850  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 13582  004852  A4D8               	btfss	status,2,c
 13583  004854  D002               	goto	u8660
 13584  004856  0E01               	movlw	1
 13585  004858  D001               	goto	u8670
 13586  00485A                     u8660:
 13587  00485A  0E00               	movlw	0
 13588  00485C                     u8670:
 13589  00485C  0100               	movlb	0	; () banked
 13590  00485E  6FAC               	movwf	arm@on& (0+255),b
 13591  004860  6BAD               	clrf	(arm@on+1)& (0+255),b
 13592                           
 13593                           ;Test.c: 691: while(PORTBbits.RB1 == 0){
 13594  004862  D005               	goto	l9215
 13595  004864                     l9213:
 13596                           
 13597                           ; BSR set to: 0
 13598                           ;Test.c: 692: f_arm_position = 1;
 13599  004864  0E00               	movlw	0
 13600  004866  0100               	movlb	0	; () banked
 13601  004868  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 13602  00486A  0E01               	movlw	1
 13603  00486C  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 13604  00486E                     l9215:
 13605                           
 13606                           ; BSR set to: 0
 13607  00486E  A281               	btfss	3969,1,c	;volatile
 13608  004870  D7F9               	goto	l9213
 13609                           
 13610                           ; BSR set to: 0
 13611                           ;Test.c: 693: }
 13612                           ;Test.c: 694: if(PORTB >> 4 == 0b1111){
 13613                           
 13614                           ; BSR set to: 0
 13615  004872  3881               	swapf	3969,w,c	;volatile
 13616  004874  0B0F               	andlw	15
 13617  004876  0A0F               	xorlw	15
 13618  004878  B4D8               	btfsc	status,2,c
 13619  00487A  D003               	goto	l1534
 13620  00487C                     l1543:
 13621  00487C  A281               	btfss	3969,1,c	;volatile
 13622  00487E  D7C3               	goto	l9199
 13623  004880  D7FD               	goto	l1543
 13624  004882                     l1534:
 13625                           
 13626                           ; BSR set to: 0
 13627                           ;Test.c: 698: }
 13628                           ;Test.c: 699: }
 13629                           ;Test.c: 701: (INTCONbits.GIE = 0);
 13630  004882  9EF2               	bcf	intcon,7,c	;volatile
 13631                           
 13632                           ; BSR set to: 0
 13633                           ;Test.c: 702: stopSignals();
 13634  004884  EC22  F030         	call	_stopSignals	;wreg free
 13635                           
 13636                           ;Test.c: 703: machine_state = Testing_state;
 13637  004888  0E03               	movlw	3
 13638  00488A  0100               	movlb	0	; () banked
 13639  00488C  6FFC               	movwf	_machine_state& (0+255),b
 13640                           
 13641                           ; BSR set to: 0
 13642  00488E  0012               	return		;funcret
 13643  004890                     __end_of_arm:
 13644                           	opt stack 0
 13645                           tblptru	equ	0xFF8
 13646                           tblptrh	equ	0xFF7
 13647                           tblptrl	equ	0xFF6
 13648                           tablat	equ	0xFF5
 13649                           prodh	equ	0xFF4
 13650                           prodl	equ	0xFF3
 13651                           intcon	equ	0xFF2
 13652                           intcon2	equ	0xFF1
 13653                           intcon3	equ	0xFF0
 13654                           postinc0	equ	0xFEE
 13655                           wreg	equ	0xFE8
 13656                           postdec1	equ	0xFE5
 13657                           fsr1l	equ	0xFE1
 13658                           indf2	equ	0xFDF
 13659                           postinc2	equ	0xFDE
 13660                           postdec2	equ	0xFDD
 13661                           fsr2h	equ	0xFDA
 13662                           fsr2l	equ	0xFD9
 13663                           status	equ	0xFD8
 13664                           
 13665 ;; *************** function _algorithmTest *****************
 13666 ;; Defined at:
 13667 ;;		line 78 in file "Test.c"
 13668 ;; Parameters:    Size  Location     Type
 13669 ;;		None
 13670 ;; Auto vars:     Size  Location     Type
 13671 ;;		None
 13672 ;; Return value:  Size  Location     Type
 13673 ;;                  1    wreg      void 
 13674 ;; Registers used:
 13675 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13676 ;; Tracked objects:
 13677 ;;		On entry : 0/0
 13678 ;;		On exit  : 0/0
 13679 ;;		Unchanged: 0/0
 13680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13683 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13684 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13685 ;;Total ram usage:        2 bytes
 13686 ;; Hardware stack levels used:    1
 13687 ;; Hardware stack levels required when called:   10
 13688 ;; This function calls:
 13689 ;;		_lcdInst
 13690 ;;		_printf
 13691 ;; This function is called by:
 13692 ;;		_Test
 13693 ;; This function uses a non-reentrant model
 13694 ;;
 13695                           
 13696                           	psect	text44
 13697  004B36                     __ptext44:
 13698                           	opt stack 0
 13699  004B36                     _algorithmTest:
 13700                           	opt stack 19
 13701                           
 13702                           ;Test.c: 80: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 13703                           
 13704                           ; BSR set to: 0
 13705                           ;incstack = 0
 13706  004B36  0E01               	movlw	1
 13707  004B38  EC6D  F030         	call	_lcdInst
 13708  004B3C  0E68               	movlw	104
 13709  004B3E  0100               	movlb	0	; () banked
 13710  004B40  6FAB               	movwf	??_algorithmTest& (0+255),b
 13711  004B42  0EE4               	movlw	228
 13712  004B44                     u11687:
 13713  004B44  2EE8               	decfsz	wreg,f,c
 13714  004B46  D7FE               	bra	u11687
 13715  004B48  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13716  004B4A  D7FC               	bra	u11687
 13717  004B4C  F000               	nop	
 13718  004B4E  0E80               	movlw	128
 13719  004B50  EC6D  F030         	call	_lcdInst
 13720                           
 13721                           ;Test.c: 81: printf("ALGORITHM TEST");
 13722  004B54  0E01               	movlw	low STR_70
 13723  004B56  0100               	movlb	0	; () banked
 13724  004B58  6F8E               	movwf	printf@f& (0+255),b
 13725  004B5A  0EFF               	movlw	high STR_70
 13726  004B5C  0100               	movlb	0	; () banked
 13727  004B5E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13728  004B60  ECE9  F00E         	call	_printf	;wreg free
 13729                           
 13730                           ;Test.c: 82: lcdInst(0b11000000);;
 13731  004B64  0EC0               	movlw	192
 13732  004B66  EC6D  F030         	call	_lcdInst
 13733                           
 13734                           ;Test.c: 83: printf("PUSH TO START");
 13735  004B6A  0E3A               	movlw	low STR_71
 13736  004B6C  0100               	movlb	0	; () banked
 13737  004B6E  6F8E               	movwf	printf@f& (0+255),b
 13738  004B70  0EFF               	movlw	high STR_71
 13739  004B72  0100               	movlb	0	; () banked
 13740  004B74  6F8F               	movwf	(printf@f+1)& (0+255),b
 13741  004B76  ECE9  F00E         	call	_printf	;wreg free
 13742                           
 13743                           ;Test.c: 84: _delay((unsigned long)((100)*(32000000/4000.0)));
 13744  004B7A  0E05               	movlw	5
 13745  004B7C  0100               	movlb	0	; () banked
 13746  004B7E  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 13747  004B80  0E0F               	movlw	15
 13748  004B82  0100               	movlb	0	; () banked
 13749  004B84  6FAB               	movwf	??_algorithmTest& (0+255),b
 13750  004B86  0EF1               	movlw	241
 13751  004B88                     u11697:
 13752  004B88  2EE8               	decfsz	wreg,f,c
 13753  004B8A  D7FE               	bra	u11697
 13754  004B8C  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13755  004B8E  D7FC               	bra	u11697
 13756  004B90  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 13757  004B92  D7FA               	bra	u11697
 13758  004B94                     l1310:
 13759  004B94  A281               	btfss	3969,1,c	;volatile
 13760  004B96  D7FE               	goto	l1310
 13761  004B98                     l1313:
 13762  004B98  B281               	btfsc	3969,1,c	;volatile
 13763  004B9A  D7FE               	goto	l1313
 13764                           
 13765                           ;Test.c: 87: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 13766  004B9C  0E01               	movlw	1
 13767  004B9E  EC6D  F030         	call	_lcdInst
 13768  004BA2  0E68               	movlw	104
 13769  004BA4  0100               	movlb	0	; () banked
 13770  004BA6  6FAB               	movwf	??_algorithmTest& (0+255),b
 13771  004BA8  0EE4               	movlw	228
 13772  004BAA                     u11707:
 13773  004BAA  2EE8               	decfsz	wreg,f,c
 13774  004BAC  D7FE               	bra	u11707
 13775  004BAE  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13776  004BB0  D7FC               	bra	u11707
 13777  004BB2  F000               	nop	
 13778  004BB4  0E80               	movlw	128
 13779  004BB6  EC6D  F030         	call	_lcdInst
 13780                           
 13781                           ;Test.c: 92: printf("ALG1: 9 POPNOTAB");
 13782  004BBA  0E5D               	movlw	low STR_72
 13783  004BBC  0100               	movlb	0	; () banked
 13784  004BBE  6F8E               	movwf	printf@f& (0+255),b
 13785  004BC0  0EFC               	movlw	high STR_72
 13786  004BC2  0100               	movlb	0	; () banked
 13787  004BC4  6F8F               	movwf	(printf@f+1)& (0+255),b
 13788  004BC6  ECE9  F00E         	call	_printf	;wreg free
 13789                           
 13790                           ;Test.c: 99: printf("ALG2: 12 CANS");
 13791  004BCA  0E1E               	movlw	low STR_73
 13792  004BCC  0100               	movlb	0	; () banked
 13793  004BCE  6F8E               	movwf	printf@f& (0+255),b
 13794  004BD0  0EFF               	movlw	high STR_73
 13795  004BD2  0100               	movlb	0	; () banked
 13796  004BD4  6F8F               	movwf	(printf@f+1)& (0+255),b
 13797  004BD6  ECE9  F00E         	call	_printf	;wreg free
 13798                           
 13799                           ;Test.c: 108: printf("ALG3: 1 CAN");
 13800  004BDA  0E64               	movlw	low STR_74
 13801  004BDC  0100               	movlb	0	; () banked
 13802  004BDE  6F8E               	movwf	printf@f& (0+255),b
 13803  004BE0  0EFF               	movlw	high STR_74
 13804  004BE2  0100               	movlb	0	; () banked
 13805  004BE4  6F8F               	movwf	(printf@f+1)& (0+255),b
 13806  004BE6  ECE9  F00E         	call	_printf	;wreg free
 13807                           
 13808                           ;Test.c: 114: printf("ALG4: ALL CANS");
 13809  004BEA  0EE3               	movlw	low STR_75
 13810  004BEC  0100               	movlb	0	; () banked
 13811  004BEE  6F8E               	movwf	printf@f& (0+255),b
 13812  004BF0  0EFE               	movlw	high STR_75
 13813  004BF2  0100               	movlb	0	; () banked
 13814  004BF4  6F8F               	movwf	(printf@f+1)& (0+255),b
 13815  004BF6  ECE9  F00E         	call	_printf	;wreg free
 13816                           
 13817                           ;Test.c: 119: printf("ALG5: NO CANS");
 13818  004BFA  0E2C               	movlw	low STR_76
 13819  004BFC  0100               	movlb	0	; () banked
 13820  004BFE  6F8E               	movwf	printf@f& (0+255),b
 13821  004C00  0EFF               	movlw	high STR_76
 13822  004C02  0100               	movlb	0	; () banked
 13823  004C04  6F8F               	movwf	(printf@f+1)& (0+255),b
 13824  004C06  ECE9  F00E         	call	_printf	;wreg free
 13825  004C0A  0012               	return		;funcret
 13826  004C0C                     __end_of_algorithmTest:
 13827                           	opt stack 0
 13828                           tblptru	equ	0xFF8
 13829                           tblptrh	equ	0xFF7
 13830                           tblptrl	equ	0xFF6
 13831                           tablat	equ	0xFF5
 13832                           prodh	equ	0xFF4
 13833                           prodl	equ	0xFF3
 13834                           intcon	equ	0xFF2
 13835                           intcon2	equ	0xFF1
 13836                           intcon3	equ	0xFF0
 13837                           postinc0	equ	0xFEE
 13838                           wreg	equ	0xFE8
 13839                           postdec1	equ	0xFE5
 13840                           fsr1l	equ	0xFE1
 13841                           indf2	equ	0xFDF
 13842                           postinc2	equ	0xFDE
 13843                           postdec2	equ	0xFDD
 13844                           fsr2h	equ	0xFDA
 13845                           fsr2l	equ	0xFD9
 13846                           status	equ	0xFD8
 13847                           
 13848 ;; *************** function _actuatorTest *****************
 13849 ;; Defined at:
 13850 ;;		line 230 in file "Test.c"
 13851 ;; Parameters:    Size  Location     Type
 13852 ;;		None
 13853 ;; Auto vars:     Size  Location     Type
 13854 ;;  i               1   45[BANK0 ] unsigned char 
 13855 ;;  i               1   67[BANK0 ] unsigned char 
 13856 ;;  i               1   66[BANK0 ] unsigned char 
 13857 ;;  i               1   65[BANK0 ] unsigned char 
 13858 ;;  i               1   64[BANK0 ] unsigned char 
 13859 ;;  i               1   63[BANK0 ] unsigned char 
 13860 ;;  i               1   62[BANK0 ] unsigned char 
 13861 ;;  i               1   61[BANK0 ] unsigned char 
 13862 ;;  i               1   60[BANK0 ] unsigned char 
 13863 ;;  i               1   59[BANK0 ] unsigned char 
 13864 ;;  i               1   58[BANK0 ] unsigned char 
 13865 ;;  i               1   57[BANK0 ] unsigned char 
 13866 ;;  i               1   56[BANK0 ] unsigned char 
 13867 ;;  i               1   55[BANK0 ] unsigned char 
 13868 ;;  i               1   54[BANK0 ] unsigned char 
 13869 ;;  i               1   53[BANK0 ] unsigned char 
 13870 ;;  i               1   52[BANK0 ] unsigned char 
 13871 ;;  i               1   51[BANK0 ] unsigned char 
 13872 ;;  i               1   50[BANK0 ] unsigned char 
 13873 ;;  i               1   49[BANK0 ] unsigned char 
 13874 ;;  i               1   48[BANK0 ] unsigned char 
 13875 ;;  i               1   47[BANK0 ] unsigned char 
 13876 ;;  i               1   46[BANK0 ] unsigned char 
 13877 ;;  i               2   68[BANK0 ] int 
 13878 ;; Return value:  Size  Location     Type
 13879 ;;                  1    wreg      void 
 13880 ;; Registers used:
 13881 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13882 ;; Tracked objects:
 13883 ;;		On entry : 0/0
 13884 ;;		On exit  : 0/0
 13885 ;;		Unchanged: 0/0
 13886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13888 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13889 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13890 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13891 ;;Total ram usage:       27 bytes
 13892 ;; Hardware stack levels used:    1
 13893 ;; Hardware stack levels required when called:   10
 13894 ;; This function calls:
 13895 ;;		_lcdInst
 13896 ;;		_printf
 13897 ;;		_updateServoPosition
 13898 ;; This function is called by:
 13899 ;;		_Test
 13900 ;; This function uses a non-reentrant model
 13901 ;;
 13902                           
 13903                           	psect	text45
 13904  0008DA                     __ptext45:
 13905                           	opt stack 0
 13906  0008DA                     _actuatorTest:
 13907                           	opt stack 19
 13908                           
 13909                           ;Test.c: 232: int i = 0;
 13910                           
 13911                           ;incstack = 0
 13912  0008DA  0E00               	movlw	0
 13913  0008DC  0100               	movlb	0	; () banked
 13914  0008DE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13915  0008E0  0E00               	movlw	0
 13916  0008E2  6FC4               	movwf	actuatorTest@i& (0+255),b
 13917                           
 13918                           ; BSR set to: 0
 13919                           ;Test.c: 234: (INTCONbits.GIE = 1);
 13920  0008E4  8EF2               	bsf	intcon,7,c	;volatile
 13921                           
 13922                           ; BSR set to: 0
 13923                           ;Test.c: 235: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13924  0008E6  0E01               	movlw	1
 13925  0008E8  EC6D  F030         	call	_lcdInst
 13926  0008EC  0E68               	movlw	104
 13927  0008EE  0100               	movlb	0	; () banked
 13928  0008F0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13929  0008F2  0EE4               	movlw	228
 13930  0008F4                     u11717:
 13931  0008F4  2EE8               	decfsz	wreg,f,c
 13932  0008F6  D7FE               	bra	u11717
 13933  0008F8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13934  0008FA  D7FC               	bra	u11717
 13935  0008FC  F000               	nop	
 13936  0008FE  0E80               	movlw	128
 13937  000900  EC6D  F030         	call	_lcdInst
 13938                           
 13939                           ;Test.c: 236: printf("ACTUATORS");
 13940  000904  0E90               	movlw	low STR_89
 13941  000906  0100               	movlb	0	; () banked
 13942  000908  6F8E               	movwf	printf@f& (0+255),b
 13943  00090A  0EFF               	movlw	high STR_89
 13944  00090C  0100               	movlb	0	; () banked
 13945  00090E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13946  000910  ECE9  F00E         	call	_printf	;wreg free
 13947                           
 13948                           ;Test.c: 237: lcdInst(0b11000000);;
 13949  000914  0EC0               	movlw	192
 13950  000916  EC6D  F030         	call	_lcdInst
 13951                           
 13952                           ;Test.c: 238: printf("PUSH TO START");
 13953  00091A  0E3A               	movlw	low STR_71
 13954  00091C  0100               	movlb	0	; () banked
 13955  00091E  6F8E               	movwf	printf@f& (0+255),b
 13956  000920  0EFF               	movlw	high STR_71
 13957  000922  0100               	movlb	0	; () banked
 13958  000924  6F8F               	movwf	(printf@f+1)& (0+255),b
 13959  000926  ECE9  F00E         	call	_printf	;wreg free
 13960                           
 13961                           ;Test.c: 239: _delay((unsigned long)((100)*(32000000/4000.0)));
 13962  00092A  0E05               	movlw	5
 13963  00092C  0100               	movlb	0	; () banked
 13964  00092E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13965  000930  0E0F               	movlw	15
 13966  000932  0100               	movlb	0	; () banked
 13967  000934  6FAB               	movwf	??_actuatorTest& (0+255),b
 13968  000936  0EF1               	movlw	241
 13969  000938                     u11727:
 13970  000938  2EE8               	decfsz	wreg,f,c
 13971  00093A  D7FE               	bra	u11727
 13972  00093C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13973  00093E  D7FC               	bra	u11727
 13974  000940  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13975  000942  D7FA               	bra	u11727
 13976  000944                     l1366:
 13977  000944  A281               	btfss	3969,1,c	;volatile
 13978  000946  D7FE               	goto	l1366
 13979  000948                     l1369:
 13980  000948  B281               	btfsc	3969,1,c	;volatile
 13981  00094A  D7FE               	goto	l1369
 13982                           
 13983                           ;Test.c: 242: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13984  00094C  0E01               	movlw	1
 13985  00094E  EC6D  F030         	call	_lcdInst
 13986  000952  0E68               	movlw	104
 13987  000954  0100               	movlb	0	; () banked
 13988  000956  6FAB               	movwf	??_actuatorTest& (0+255),b
 13989  000958  0EE4               	movlw	228
 13990  00095A                     u11737:
 13991  00095A  2EE8               	decfsz	wreg,f,c
 13992  00095C  D7FE               	bra	u11737
 13993  00095E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13994  000960  D7FC               	bra	u11737
 13995  000962  F000               	nop	
 13996  000964  0E80               	movlw	128
 13997  000966  EC6D  F030         	call	_lcdInst
 13998                           
 13999                           ;Test.c: 247: printf("TST: DC MOTORS");
 14000  00096A  0EF2               	movlw	low STR_91
 14001  00096C  0100               	movlb	0	; () banked
 14002  00096E  6F8E               	movwf	printf@f& (0+255),b
 14003  000970  0EFE               	movlw	high STR_91
 14004  000972  0100               	movlb	0	; () banked
 14005  000974  6F8F               	movwf	(printf@f+1)& (0+255),b
 14006  000976  ECE9  F00E         	call	_printf	;wreg free
 14007                           
 14008                           ;Test.c: 248: lcdInst(0b11000000);;
 14009  00097A  0EC0               	movlw	192
 14010  00097C  EC6D  F030         	call	_lcdInst
 14011                           
 14012                           ;Test.c: 249: printf("PIN RA5 HIGH.");
 14013  000980  0E10               	movlw	low STR_92
 14014  000982  0100               	movlb	0	; () banked
 14015  000984  6F8E               	movwf	printf@f& (0+255),b
 14016  000986  0EFF               	movlw	high STR_92
 14017  000988  0100               	movlb	0	; () banked
 14018  00098A  6F8F               	movwf	(printf@f+1)& (0+255),b
 14019  00098C  ECE9  F00E         	call	_printf	;wreg free
 14020                           
 14021                           ;Test.c: 250: LATBbits.LATB2 = 1;
 14022  000990  848A               	bsf	3978,2,c	;volatile
 14023                           
 14024                           ;Test.c: 251: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 14025  000992  0E00               	movlw	0
 14026  000994  0100               	movlb	0	; () banked
 14027  000996  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 14028  000998  0E00               	movlw	0
 14029  00099A  6FC4               	movwf	actuatorTest@i& (0+255),b
 14030                           
 14031                           ; BSR set to: 0
 14032  00099C  0100               	movlb	0	; () banked
 14033  00099E  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14034  0009A0  D008               	goto	l8785
 14035  0009A2  0100               	movlb	0	; () banked
 14036  0009A4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 14037  0009A6  E123               	bnz	l1373
 14038  0009A8  0E05               	movlw	5
 14039  0009AA  0100               	movlb	0	; () banked
 14040  0009AC  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 14041  0009AE  B0D8               	btfsc	status,0,c
 14042  0009B0  D01E               	goto	l1373
 14043  0009B2                     l8785:
 14044                           
 14045                           ; BSR set to: 0
 14046  0009B2  0E00               	movlw	0
 14047  0009B4  0100               	movlb	0	; () banked
 14048  0009B6  6FAD               	movwf	actuatorTest@i_1756& (0+255),b
 14049  0009B8                     l8787:
 14050                           
 14051                           ; BSR set to: 0
 14052  0009B8  0E63               	movlw	99
 14053  0009BA  0100               	movlb	0	; () banked
 14054  0009BC  65AD               	cpfsgt	actuatorTest@i_1756& (0+255),b
 14055  0009BE  D001               	goto	l8791
 14056  0009C0  D00C               	goto	l8795
 14057  0009C2                     l8791:
 14058                           
 14059                           ; BSR set to: 0
 14060  0009C2  0E68               	movlw	104
 14061  0009C4  0100               	movlb	0	; () banked
 14062  0009C6  6FAB               	movwf	??_actuatorTest& (0+255),b
 14063  0009C8  0EE4               	movlw	228
 14064  0009CA                     u11747:
 14065  0009CA  2EE8               	decfsz	wreg,f,c
 14066  0009CC  D7FE               	bra	u11747
 14067  0009CE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14068  0009D0  D7FC               	bra	u11747
 14069  0009D2  F000               	nop	
 14070  0009D4  0100               	movlb	0	; () banked
 14071  0009D6  2BAD               	incf	actuatorTest@i_1756& (0+255),f,b
 14072  0009D8  D7EF               	goto	l8787
 14073  0009DA                     l8795:
 14074                           
 14075                           ; BSR set to: 0
 14076  0009DA  0100               	movlb	0	; () banked
 14077  0009DC  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 14078  0009DE  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 14079                           
 14080                           ; BSR set to: 0
 14081  0009E0  0100               	movlb	0	; () banked
 14082  0009E2  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14083  0009E4  D7E6               	goto	l8785
 14084  0009E6  0100               	movlb	0	; () banked
 14085  0009E8  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 14086  0009EA  E101               	bnz	u8090
 14087  0009EC  D7DD               	goto	L11
 14088  0009EE                     u8090:
 14089  0009EE                     l1373:
 14090                           
 14091                           ; BSR set to: 0
 14092                           ;Test.c: 252: LATBbits.LATB2 = 0;
 14093  0009EE  948A               	bcf	3978,2,c	;volatile
 14094                           
 14095                           ; BSR set to: 0
 14096                           ;Test.c: 253: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14097  0009F0  0E01               	movlw	1
 14098  0009F2  EC6D  F030         	call	_lcdInst
 14099  0009F6  0E68               	movlw	104
 14100  0009F8  0100               	movlb	0	; () banked
 14101  0009FA  6FAB               	movwf	??_actuatorTest& (0+255),b
 14102  0009FC  0EE4               	movlw	228
 14103  0009FE                     u11757:
 14104  0009FE  2EE8               	decfsz	wreg,f,c
 14105  000A00  D7FE               	bra	u11757
 14106  000A02  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14107  000A04  D7FC               	bra	u11757
 14108  000A06  F000               	nop	
 14109  000A08  0E80               	movlw	128
 14110  000A0A  EC6D  F030         	call	_lcdInst
 14111                           
 14112                           ;Test.c: 259: printf("TST: COND SOLN'D");
 14113  000A0E  0E6E               	movlw	low STR_93
 14114  000A10  0100               	movlb	0	; () banked
 14115  000A12  6F8E               	movwf	printf@f& (0+255),b
 14116  000A14  0EFC               	movlw	high STR_93
 14117  000A16  0100               	movlb	0	; () banked
 14118  000A18  6F8F               	movwf	(printf@f+1)& (0+255),b
 14119  000A1A  ECE9  F00E         	call	_printf	;wreg free
 14120                           
 14121                           ;Test.c: 260: lcdInst(0b11000000);;
 14122  000A1E  0EC0               	movlw	192
 14123  000A20  EC6D  F030         	call	_lcdInst
 14124                           
 14125                           ;Test.c: 261: printf("PIN RA3...");
 14126  000A24  0E70               	movlw	low STR_94
 14127  000A26  0100               	movlb	0	; () banked
 14128  000A28  6F8E               	movwf	printf@f& (0+255),b
 14129  000A2A  0EFF               	movlw	high STR_94
 14130  000A2C  0100               	movlb	0	; () banked
 14131  000A2E  6F8F               	movwf	(printf@f+1)& (0+255),b
 14132  000A30  ECE9  F00E         	call	_printf	;wreg free
 14133                           
 14134                           ;Test.c: 262: for(i=0;i<5;i++){
 14135  000A34  0E00               	movlw	0
 14136  000A36  0100               	movlb	0	; () banked
 14137  000A38  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 14138  000A3A  0E00               	movlw	0
 14139  000A3C  6FC4               	movwf	actuatorTest@i& (0+255),b
 14140                           
 14141                           ; BSR set to: 0
 14142  000A3E  0100               	movlb	0	; () banked
 14143  000A40  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14144  000A42  D008               	goto	l1376
 14145  000A44  0100               	movlb	0	; () banked
 14146  000A46  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 14147  000A48  E12C               	bnz	l1377
 14148  000A4A  0E05               	movlw	5
 14149  000A4C  0100               	movlb	0	; () banked
 14150  000A4E  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 14151  000A50  B0D8               	btfsc	status,0,c
 14152  000A52  D027               	goto	l1377
 14153  000A54                     l1376:
 14154                           
 14155                           ; BSR set to: 0
 14156                           ;Test.c: 263: LATCbits.LATC7 = 1;
 14157  000A54  8E8B               	bsf	3979,7,c	;volatile
 14158                           
 14159                           ; BSR set to: 0
 14160                           ;Test.c: 264: _delay((unsigned long)((300)*(32000000/4000.0)));
 14161  000A56  0E0D               	movlw	13
 14162  000A58  0100               	movlb	0	; () banked
 14163  000A5A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 14164  000A5C  0E2D               	movlw	45
 14165  000A5E  0100               	movlb	0	; () banked
 14166  000A60  6FAB               	movwf	??_actuatorTest& (0+255),b
 14167  000A62  0ED7               	movlw	215
 14168  000A64                     u11767:
 14169  000A64  2EE8               	decfsz	wreg,f,c
 14170  000A66  D7FE               	bra	u11767
 14171  000A68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14172  000A6A  D7FC               	bra	u11767
 14173  000A6C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 14174  000A6E  D7FA               	bra	u11767
 14175  000A70  D000               	nop2	
 14176                           
 14177                           ;Test.c: 265: LATCbits.LATC7 = !1;
 14178  000A72  9E8B               	bcf	3979,7,c	;volatile
 14179                           
 14180                           ;Test.c: 266: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 14181  000A74  0E1D               	movlw	29
 14182  000A76  0100               	movlb	0	; () banked
 14183  000A78  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 14184  000A7A  0E69               	movlw	105
 14185  000A7C  0100               	movlb	0	; () banked
 14186  000A7E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14187  000A80  0EA5               	movlw	165
 14188  000A82                     u11777:
 14189  000A82  2EE8               	decfsz	wreg,f,c
 14190  000A84  D7FE               	bra	u11777
 14191  000A86  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14192  000A88  D7FC               	bra	u11777
 14193  000A8A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 14194  000A8C  D7FA               	bra	u11777
 14195  000A8E  0100               	movlb	0	; () banked
 14196  000A90  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 14197  000A92  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 14198  000A94  0100               	movlb	0	; () banked
 14199  000A96  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14200  000A98  D7DD               	goto	l1376
 14201  000A9A  0100               	movlb	0	; () banked
 14202  000A9C  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 14203  000A9E  E101               	bnz	u8110
 14204  000AA0  D7D4               	goto	L12
 14205  000AA2                     u8110:
 14206  000AA2                     l1377:
 14207                           
 14208                           ; BSR set to: 0
 14209                           ;Test.c: 267: }
 14210                           ;Test.c: 268: LATCbits.LATC7 = !1;
 14211  000AA2  9E8B               	bcf	3979,7,c	;volatile
 14212                           
 14213                           ; BSR set to: 0
 14214                           ;Test.c: 269: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14215  000AA4  0E01               	movlw	1
 14216  000AA6  EC6D  F030         	call	_lcdInst
 14217  000AAA  0E68               	movlw	104
 14218  000AAC  0100               	movlb	0	; () banked
 14219  000AAE  6FAB               	movwf	??_actuatorTest& (0+255),b
 14220  000AB0  0EE4               	movlw	228
 14221  000AB2                     u11787:
 14222  000AB2  2EE8               	decfsz	wreg,f,c
 14223  000AB4  D7FE               	bra	u11787
 14224  000AB6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14225  000AB8  D7FC               	bra	u11787
 14226  000ABA  F000               	nop	
 14227  000ABC  0E80               	movlw	128
 14228  000ABE  EC6D  F030         	call	_lcdInst
 14229                           
 14230                           ;Test.c: 275: printf("TST: PUSH SOLN'D");
 14231  000AC2  0E7F               	movlw	low STR_95
 14232  000AC4  0100               	movlb	0	; () banked
 14233  000AC6  6F8E               	movwf	printf@f& (0+255),b
 14234  000AC8  0EFC               	movlw	high STR_95
 14235  000ACA  0100               	movlb	0	; () banked
 14236  000ACC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14237  000ACE  ECE9  F00E         	call	_printf	;wreg free
 14238                           
 14239                           ;Test.c: 276: lcdInst(0b11000000);;
 14240  000AD2  0EC0               	movlw	192
 14241  000AD4  EC6D  F030         	call	_lcdInst
 14242                           
 14243                           ;Test.c: 277: printf("PIN RA4...");
 14244  000AD8  0E7B               	movlw	low STR_96
 14245  000ADA  0100               	movlb	0	; () banked
 14246  000ADC  6F8E               	movwf	printf@f& (0+255),b
 14247  000ADE  0EFF               	movlw	high STR_96
 14248  000AE0  0100               	movlb	0	; () banked
 14249  000AE2  6F8F               	movwf	(printf@f+1)& (0+255),b
 14250  000AE4  ECE9  F00E         	call	_printf	;wreg free
 14251                           
 14252                           ;Test.c: 278: for(i=0;i<5;i++){
 14253  000AE8  0E00               	movlw	0
 14254  000AEA  0100               	movlb	0	; () banked
 14255  000AEC  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 14256  000AEE  0E00               	movlw	0
 14257  000AF0  6FC4               	movwf	actuatorTest@i& (0+255),b
 14258                           
 14259                           ; BSR set to: 0
 14260  000AF2  0100               	movlb	0	; () banked
 14261  000AF4  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14262  000AF6  D008               	goto	l1378
 14263  000AF8  0100               	movlb	0	; () banked
 14264  000AFA  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 14265  000AFC  E12C               	bnz	l1379
 14266  000AFE  0E05               	movlw	5
 14267  000B00  0100               	movlb	0	; () banked
 14268  000B02  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 14269  000B04  B0D8               	btfsc	status,0,c
 14270  000B06  D027               	goto	l1379
 14271  000B08                     l1378:
 14272                           
 14273                           ; BSR set to: 0
 14274                           ;Test.c: 279: LATAbits.LATA4 = 1;
 14275  000B08  8889               	bsf	3977,4,c	;volatile
 14276                           
 14277                           ; BSR set to: 0
 14278                           ;Test.c: 280: _delay((unsigned long)((300)*(32000000/4000.0)));
 14279  000B0A  0E0D               	movlw	13
 14280  000B0C  0100               	movlb	0	; () banked
 14281  000B0E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 14282  000B10  0E2D               	movlw	45
 14283  000B12  0100               	movlb	0	; () banked
 14284  000B14  6FAB               	movwf	??_actuatorTest& (0+255),b
 14285  000B16  0ED7               	movlw	215
 14286  000B18                     u11797:
 14287  000B18  2EE8               	decfsz	wreg,f,c
 14288  000B1A  D7FE               	bra	u11797
 14289  000B1C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14290  000B1E  D7FC               	bra	u11797
 14291  000B20  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 14292  000B22  D7FA               	bra	u11797
 14293  000B24  D000               	nop2	
 14294                           
 14295                           ;Test.c: 281: LATAbits.LATA4 = !1;
 14296  000B26  9889               	bcf	3977,4,c	;volatile
 14297                           
 14298                           ;Test.c: 282: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 14299  000B28  0E1D               	movlw	29
 14300  000B2A  0100               	movlb	0	; () banked
 14301  000B2C  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 14302  000B2E  0E69               	movlw	105
 14303  000B30  0100               	movlb	0	; () banked
 14304  000B32  6FAB               	movwf	??_actuatorTest& (0+255),b
 14305  000B34  0EA5               	movlw	165
 14306  000B36                     u11807:
 14307  000B36  2EE8               	decfsz	wreg,f,c
 14308  000B38  D7FE               	bra	u11807
 14309  000B3A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14310  000B3C  D7FC               	bra	u11807
 14311  000B3E  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 14312  000B40  D7FA               	bra	u11807
 14313  000B42  0100               	movlb	0	; () banked
 14314  000B44  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 14315  000B46  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 14316  000B48  0100               	movlb	0	; () banked
 14317  000B4A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14318  000B4C  D7DD               	goto	l1378
 14319  000B4E  0100               	movlb	0	; () banked
 14320  000B50  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 14321  000B52  E101               	bnz	u8130
 14322  000B54  D7D4               	goto	L13
 14323  000B56                     u8130:
 14324  000B56                     l1379:
 14325                           
 14326                           ; BSR set to: 0
 14327                           ;Test.c: 283: }
 14328                           ;Test.c: 284: LATAbits.LATA4 = !1;
 14329  000B56  9889               	bcf	3977,4,c	;volatile
 14330                           
 14331                           ; BSR set to: 0
 14332                           ;Test.c: 285: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14333  000B58  0E01               	movlw	1
 14334  000B5A  EC6D  F030         	call	_lcdInst
 14335  000B5E  0E68               	movlw	104
 14336  000B60  0100               	movlb	0	; () banked
 14337  000B62  6FAB               	movwf	??_actuatorTest& (0+255),b
 14338  000B64  0EE4               	movlw	228
 14339  000B66                     u11817:
 14340  000B66  2EE8               	decfsz	wreg,f,c
 14341  000B68  D7FE               	bra	u11817
 14342  000B6A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14343  000B6C  D7FC               	bra	u11817
 14344  000B6E  F000               	nop	
 14345  000B70  0E80               	movlw	128
 14346  000B72  EC6D  F030         	call	_lcdInst
 14347                           
 14348                           ;Test.c: 288: machine_state = Sorting_state;
 14349  000B76  0E01               	movlw	1
 14350  000B78  0100               	movlb	0	; () banked
 14351  000B7A  6FFC               	movwf	_machine_state& (0+255),b
 14352                           
 14353                           ; BSR set to: 0
 14354                           ;Test.c: 289: was_low_1 = 0;
 14355  000B7C  0E00               	movlw	0
 14356  000B7E  6E78               	movwf	_was_low_1+1,c	;volatile
 14357  000B80  0E00               	movlw	0
 14358  000B82  6E77               	movwf	_was_low_1,c	;volatile
 14359                           
 14360                           ; BSR set to: 0
 14361                           ;Test.c: 290: was_low_1 = 0;
 14362  000B84  0E00               	movlw	0
 14363  000B86  6E78               	movwf	_was_low_1+1,c	;volatile
 14364  000B88  0E00               	movlw	0
 14365  000B8A  6E77               	movwf	_was_low_1,c	;volatile
 14366                           
 14367                           ; BSR set to: 0
 14368                           ;Test.c: 297: printf("TST: PAN SERVO");
 14369  000B8C  0ED4               	movlw	low STR_97
 14370  000B8E  0100               	movlb	0	; () banked
 14371  000B90  6F8E               	movwf	printf@f& (0+255),b
 14372  000B92  0EFE               	movlw	high STR_97
 14373  000B94  0100               	movlb	0	; () banked
 14374  000B96  6F8F               	movwf	(printf@f+1)& (0+255),b
 14375  000B98  ECE9  F00E         	call	_printf	;wreg free
 14376                           
 14377                           ;Test.c: 298: lcdInst(0b11000000);;
 14378  000B9C  0EC0               	movlw	192
 14379  000B9E  EC6D  F030         	call	_lcdInst
 14380                           
 14381                           ;Test.c: 299: printf("MIDDLE -- 2s    ");
 14382  000BA2  0EE6               	movlw	low STR_98
 14383  000BA4  0100               	movlb	0	; () banked
 14384  000BA6  6F8E               	movwf	printf@f& (0+255),b
 14385  000BA8  0EFB               	movlw	high STR_98
 14386  000BAA  0100               	movlb	0	; () banked
 14387  000BAC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14388  000BAE  ECE9  F00E         	call	_printf	;wreg free
 14389                           
 14390                           ;Test.c: 300: updateServoPosition(1200, 1);
 14391  000BB2  0E04               	movlw	4
 14392  000BB4  0100               	movlb	0	; () banked
 14393  000BB6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14394  000BB8  0EB0               	movlw	176
 14395  000BBA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14396  000BBC  0E00               	movlw	0
 14397  000BBE  0100               	movlb	0	; () banked
 14398  000BC0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14399  000BC2  0E01               	movlw	1
 14400  000BC4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14401  000BC6  ECF4  F029         	call	_updateServoPosition	;wreg free
 14402                           
 14403                           ;Test.c: 301: TMR1ON = 1;
 14404  000BCA  80CD               	bsf	4045,0,c	;volatile
 14405                           
 14406                           ;Test.c: 302: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14407  000BCC  0E00               	movlw	0
 14408  000BCE  0100               	movlb	0	; () banked
 14409  000BD0  6FAE               	movwf	actuatorTest@i_1763& (0+255),b
 14410  000BD2                     l8871:
 14411                           
 14412                           ; BSR set to: 0
 14413  000BD2  0E63               	movlw	99
 14414  000BD4  0100               	movlb	0	; () banked
 14415  000BD6  65AE               	cpfsgt	actuatorTest@i_1763& (0+255),b
 14416  000BD8  D001               	goto	l8875
 14417  000BDA  D00C               	goto	l8879
 14418  000BDC                     l8875:
 14419                           
 14420                           ; BSR set to: 0
 14421  000BDC  0E68               	movlw	104
 14422  000BDE  0100               	movlb	0	; () banked
 14423  000BE0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14424  000BE2  0EE4               	movlw	228
 14425  000BE4                     u11827:
 14426  000BE4  2EE8               	decfsz	wreg,f,c
 14427  000BE6  D7FE               	bra	u11827
 14428  000BE8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14429  000BEA  D7FC               	bra	u11827
 14430  000BEC  F000               	nop	
 14431  000BEE  0100               	movlb	0	; () banked
 14432  000BF0  2BAE               	incf	actuatorTest@i_1763& (0+255),f,b
 14433  000BF2  D7EF               	goto	l8871
 14434  000BF4                     l8879:
 14435                           
 14436                           ; BSR set to: 0
 14437  000BF4  0E00               	movlw	0
 14438  000BF6  0100               	movlb	0	; () banked
 14439  000BF8  6FAF               	movwf	actuatorTest@i_1764& (0+255),b
 14440  000BFA                     l8881:
 14441                           
 14442                           ; BSR set to: 0
 14443  000BFA  0E63               	movlw	99
 14444  000BFC  0100               	movlb	0	; () banked
 14445  000BFE  65AF               	cpfsgt	actuatorTest@i_1764& (0+255),b
 14446  000C00  D001               	goto	l8885
 14447  000C02  D00C               	goto	l8889
 14448  000C04                     l8885:
 14449                           
 14450                           ; BSR set to: 0
 14451  000C04  0E68               	movlw	104
 14452  000C06  0100               	movlb	0	; () banked
 14453  000C08  6FAB               	movwf	??_actuatorTest& (0+255),b
 14454  000C0A  0EE4               	movlw	228
 14455  000C0C                     u11837:
 14456  000C0C  2EE8               	decfsz	wreg,f,c
 14457  000C0E  D7FE               	bra	u11837
 14458  000C10  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14459  000C12  D7FC               	bra	u11837
 14460  000C14  F000               	nop	
 14461  000C16  0100               	movlb	0	; () banked
 14462  000C18  2BAF               	incf	actuatorTest@i_1764& (0+255),f,b
 14463  000C1A  D7EF               	goto	l8881
 14464  000C1C                     l8889:
 14465                           
 14466                           ; BSR set to: 0
 14467                           ;Test.c: 304: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14468  000C1C  0E80               	movlw	128
 14469  000C1E  EC6D  F030         	call	_lcdInst
 14470  000C22  0EC0               	movlw	192
 14471  000C24  EC6D  F030         	call	_lcdInst
 14472                           
 14473                           ;Test.c: 305: printf("RIGHT -- 2s     ");
 14474  000C28  0ED5               	movlw	low STR_99
 14475  000C2A  0100               	movlb	0	; () banked
 14476  000C2C  6F8E               	movwf	printf@f& (0+255),b
 14477  000C2E  0EFB               	movlw	high STR_99
 14478  000C30  0100               	movlb	0	; () banked
 14479  000C32  6F8F               	movwf	(printf@f+1)& (0+255),b
 14480  000C34  ECE9  F00E         	call	_printf	;wreg free
 14481                           
 14482                           ;Test.c: 306: updateServoPosition(400, 1);
 14483  000C38  0E01               	movlw	1
 14484  000C3A  0100               	movlb	0	; () banked
 14485  000C3C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14486  000C3E  0E90               	movlw	144
 14487  000C40  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14488  000C42  0E00               	movlw	0
 14489  000C44  0100               	movlb	0	; () banked
 14490  000C46  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14491  000C48  0E01               	movlw	1
 14492  000C4A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14493  000C4C  ECF4  F029         	call	_updateServoPosition	;wreg free
 14494                           
 14495                           ;Test.c: 307: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14496  000C50  0E00               	movlw	0
 14497  000C52  0100               	movlb	0	; () banked
 14498  000C54  6FB0               	movwf	actuatorTest@i_1766& (0+255),b
 14499  000C56                     l8897:
 14500                           
 14501                           ; BSR set to: 0
 14502  000C56  0E63               	movlw	99
 14503  000C58  0100               	movlb	0	; () banked
 14504  000C5A  65B0               	cpfsgt	actuatorTest@i_1766& (0+255),b
 14505  000C5C  D001               	goto	l8901
 14506  000C5E  D00C               	goto	l8905
 14507  000C60                     l8901:
 14508                           
 14509                           ; BSR set to: 0
 14510  000C60  0E68               	movlw	104
 14511  000C62  0100               	movlb	0	; () banked
 14512  000C64  6FAB               	movwf	??_actuatorTest& (0+255),b
 14513  000C66  0EE4               	movlw	228
 14514  000C68                     u11847:
 14515  000C68  2EE8               	decfsz	wreg,f,c
 14516  000C6A  D7FE               	bra	u11847
 14517  000C6C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14518  000C6E  D7FC               	bra	u11847
 14519  000C70  F000               	nop	
 14520  000C72  0100               	movlb	0	; () banked
 14521  000C74  2BB0               	incf	actuatorTest@i_1766& (0+255),f,b
 14522  000C76  D7EF               	goto	l8897
 14523  000C78                     l8905:
 14524                           
 14525                           ; BSR set to: 0
 14526  000C78  0E00               	movlw	0
 14527  000C7A  0100               	movlb	0	; () banked
 14528  000C7C  6FB1               	movwf	actuatorTest@i_1767& (0+255),b
 14529  000C7E                     l8907:
 14530                           
 14531                           ; BSR set to: 0
 14532  000C7E  0E63               	movlw	99
 14533  000C80  0100               	movlb	0	; () banked
 14534  000C82  65B1               	cpfsgt	actuatorTest@i_1767& (0+255),b
 14535  000C84  D001               	goto	l8911
 14536  000C86  D00C               	goto	l8915
 14537  000C88                     l8911:
 14538                           
 14539                           ; BSR set to: 0
 14540  000C88  0E68               	movlw	104
 14541  000C8A  0100               	movlb	0	; () banked
 14542  000C8C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14543  000C8E  0EE4               	movlw	228
 14544  000C90                     u11857:
 14545  000C90  2EE8               	decfsz	wreg,f,c
 14546  000C92  D7FE               	bra	u11857
 14547  000C94  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14548  000C96  D7FC               	bra	u11857
 14549  000C98  F000               	nop	
 14550  000C9A  0100               	movlb	0	; () banked
 14551  000C9C  2BB1               	incf	actuatorTest@i_1767& (0+255),f,b
 14552  000C9E  D7EF               	goto	l8907
 14553  000CA0                     l8915:
 14554                           
 14555                           ; BSR set to: 0
 14556                           ;Test.c: 309: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14557  000CA0  0E80               	movlw	128
 14558  000CA2  EC6D  F030         	call	_lcdInst
 14559  000CA6  0EC0               	movlw	192
 14560  000CA8  EC6D  F030         	call	_lcdInst
 14561                           
 14562                           ;Test.c: 310: printf("LEFT -- 2s      ");
 14563  000CAC  0EB3               	movlw	low STR_100
 14564  000CAE  0100               	movlb	0	; () banked
 14565  000CB0  6F8E               	movwf	printf@f& (0+255),b
 14566  000CB2  0EFB               	movlw	high STR_100
 14567  000CB4  0100               	movlb	0	; () banked
 14568  000CB6  6F8F               	movwf	(printf@f+1)& (0+255),b
 14569  000CB8  ECE9  F00E         	call	_printf	;wreg free
 14570                           
 14571                           ;Test.c: 311: updateServoPosition(2500, 1);
 14572  000CBC  0E09               	movlw	9
 14573  000CBE  0100               	movlb	0	; () banked
 14574  000CC0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14575  000CC2  0EC4               	movlw	196
 14576  000CC4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14577  000CC6  0E00               	movlw	0
 14578  000CC8  0100               	movlb	0	; () banked
 14579  000CCA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14580  000CCC  0E01               	movlw	1
 14581  000CCE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14582  000CD0  ECF4  F029         	call	_updateServoPosition	;wreg free
 14583                           
 14584                           ;Test.c: 312: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14585  000CD4  0E00               	movlw	0
 14586  000CD6  0100               	movlb	0	; () banked
 14587  000CD8  6FB2               	movwf	actuatorTest@i_1769& (0+255),b
 14588  000CDA                     l8923:
 14589                           
 14590                           ; BSR set to: 0
 14591  000CDA  0E63               	movlw	99
 14592  000CDC  0100               	movlb	0	; () banked
 14593  000CDE  65B2               	cpfsgt	actuatorTest@i_1769& (0+255),b
 14594  000CE0  D001               	goto	l8927
 14595  000CE2  D00C               	goto	l8931
 14596  000CE4                     l8927:
 14597                           
 14598                           ; BSR set to: 0
 14599  000CE4  0E68               	movlw	104
 14600  000CE6  0100               	movlb	0	; () banked
 14601  000CE8  6FAB               	movwf	??_actuatorTest& (0+255),b
 14602  000CEA  0EE4               	movlw	228
 14603  000CEC                     u11867:
 14604  000CEC  2EE8               	decfsz	wreg,f,c
 14605  000CEE  D7FE               	bra	u11867
 14606  000CF0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14607  000CF2  D7FC               	bra	u11867
 14608  000CF4  F000               	nop	
 14609  000CF6  0100               	movlb	0	; () banked
 14610  000CF8  2BB2               	incf	actuatorTest@i_1769& (0+255),f,b
 14611  000CFA  D7EF               	goto	l8923
 14612  000CFC                     l8931:
 14613                           
 14614                           ; BSR set to: 0
 14615  000CFC  0E00               	movlw	0
 14616  000CFE  0100               	movlb	0	; () banked
 14617  000D00  6FB3               	movwf	actuatorTest@i_1770& (0+255),b
 14618  000D02                     l8933:
 14619                           
 14620                           ; BSR set to: 0
 14621  000D02  0E63               	movlw	99
 14622  000D04  0100               	movlb	0	; () banked
 14623  000D06  65B3               	cpfsgt	actuatorTest@i_1770& (0+255),b
 14624  000D08  D001               	goto	l8937
 14625  000D0A  D00C               	goto	l8941
 14626  000D0C                     l8937:
 14627                           
 14628                           ; BSR set to: 0
 14629  000D0C  0E68               	movlw	104
 14630  000D0E  0100               	movlb	0	; () banked
 14631  000D10  6FAB               	movwf	??_actuatorTest& (0+255),b
 14632  000D12  0EE4               	movlw	228
 14633  000D14                     u11877:
 14634  000D14  2EE8               	decfsz	wreg,f,c
 14635  000D16  D7FE               	bra	u11877
 14636  000D18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14637  000D1A  D7FC               	bra	u11877
 14638  000D1C  F000               	nop	
 14639  000D1E  0100               	movlb	0	; () banked
 14640  000D20  2BB3               	incf	actuatorTest@i_1770& (0+255),f,b
 14641  000D22  D7EF               	goto	l8933
 14642  000D24                     l8941:
 14643                           
 14644                           ; BSR set to: 0
 14645                           ;Test.c: 314: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14646  000D24  0E80               	movlw	128
 14647  000D26  EC6D  F030         	call	_lcdInst
 14648  000D2A  0EC0               	movlw	192
 14649  000D2C  EC6D  F030         	call	_lcdInst
 14650                           
 14651                           ;Test.c: 315: printf("MID-LEFT -- 2s  ");
 14652  000D30  0E3B               	movlw	low STR_101
 14653  000D32  0100               	movlb	0	; () banked
 14654  000D34  6F8E               	movwf	printf@f& (0+255),b
 14655  000D36  0EFC               	movlw	high STR_101
 14656  000D38  0100               	movlb	0	; () banked
 14657  000D3A  6F8F               	movwf	(printf@f+1)& (0+255),b
 14658  000D3C  ECE9  F00E         	call	_printf	;wreg free
 14659                           
 14660                           ;Test.c: 316: updateServoPosition(1550, 1);
 14661  000D40  0E06               	movlw	6
 14662  000D42  0100               	movlb	0	; () banked
 14663  000D44  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14664  000D46  0E0E               	movlw	14
 14665  000D48  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14666  000D4A  0E00               	movlw	0
 14667  000D4C  0100               	movlb	0	; () banked
 14668  000D4E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14669  000D50  0E01               	movlw	1
 14670  000D52  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14671  000D54  ECF4  F029         	call	_updateServoPosition	;wreg free
 14672                           
 14673                           ;Test.c: 317: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14674  000D58  0E00               	movlw	0
 14675  000D5A  0100               	movlb	0	; () banked
 14676  000D5C  6FB4               	movwf	actuatorTest@i_1772& (0+255),b
 14677  000D5E                     l8949:
 14678                           
 14679                           ; BSR set to: 0
 14680  000D5E  0E63               	movlw	99
 14681  000D60  0100               	movlb	0	; () banked
 14682  000D62  65B4               	cpfsgt	actuatorTest@i_1772& (0+255),b
 14683  000D64  D001               	goto	l8953
 14684  000D66  D00C               	goto	l8957
 14685  000D68                     l8953:
 14686                           
 14687                           ; BSR set to: 0
 14688  000D68  0E68               	movlw	104
 14689  000D6A  0100               	movlb	0	; () banked
 14690  000D6C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14691  000D6E  0EE4               	movlw	228
 14692  000D70                     u11887:
 14693  000D70  2EE8               	decfsz	wreg,f,c
 14694  000D72  D7FE               	bra	u11887
 14695  000D74  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14696  000D76  D7FC               	bra	u11887
 14697  000D78  F000               	nop	
 14698  000D7A  0100               	movlb	0	; () banked
 14699  000D7C  2BB4               	incf	actuatorTest@i_1772& (0+255),f,b
 14700  000D7E  D7EF               	goto	l8949
 14701  000D80                     l8957:
 14702                           
 14703                           ; BSR set to: 0
 14704  000D80  0E00               	movlw	0
 14705  000D82  0100               	movlb	0	; () banked
 14706  000D84  6FB5               	movwf	actuatorTest@i_1773& (0+255),b
 14707  000D86                     l8959:
 14708                           
 14709                           ; BSR set to: 0
 14710  000D86  0E63               	movlw	99
 14711  000D88  0100               	movlb	0	; () banked
 14712  000D8A  65B5               	cpfsgt	actuatorTest@i_1773& (0+255),b
 14713  000D8C  D001               	goto	l8963
 14714  000D8E  D00C               	goto	l8967
 14715  000D90                     l8963:
 14716                           
 14717                           ; BSR set to: 0
 14718  000D90  0E68               	movlw	104
 14719  000D92  0100               	movlb	0	; () banked
 14720  000D94  6FAB               	movwf	??_actuatorTest& (0+255),b
 14721  000D96  0EE4               	movlw	228
 14722  000D98                     u11897:
 14723  000D98  2EE8               	decfsz	wreg,f,c
 14724  000D9A  D7FE               	bra	u11897
 14725  000D9C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14726  000D9E  D7FC               	bra	u11897
 14727  000DA0  F000               	nop	
 14728  000DA2  0100               	movlb	0	; () banked
 14729  000DA4  2BB5               	incf	actuatorTest@i_1773& (0+255),f,b
 14730  000DA6  D7EF               	goto	l8959
 14731  000DA8                     l8967:
 14732                           
 14733                           ; BSR set to: 0
 14734                           ;Test.c: 319: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14735  000DA8  0E80               	movlw	128
 14736  000DAA  EC6D  F030         	call	_lcdInst
 14737  000DAE  0EC0               	movlw	192
 14738  000DB0  EC6D  F030         	call	_lcdInst
 14739                           
 14740                           ;Test.c: 320: printf("MID-RIGHT -- 2s ");
 14741  000DB4  0E4C               	movlw	low STR_102
 14742  000DB6  0100               	movlb	0	; () banked
 14743  000DB8  6F8E               	movwf	printf@f& (0+255),b
 14744  000DBA  0EFC               	movlw	high STR_102
 14745  000DBC  0100               	movlb	0	; () banked
 14746  000DBE  6F8F               	movwf	(printf@f+1)& (0+255),b
 14747  000DC0  ECE9  F00E         	call	_printf	;wreg free
 14748                           
 14749                           ;Test.c: 321: updateServoPosition(850, 1);
 14750  000DC4  0E03               	movlw	3
 14751  000DC6  0100               	movlb	0	; () banked
 14752  000DC8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14753  000DCA  0E52               	movlw	82
 14754  000DCC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14755  000DCE  0E00               	movlw	0
 14756  000DD0  0100               	movlb	0	; () banked
 14757  000DD2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14758  000DD4  0E01               	movlw	1
 14759  000DD6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14760  000DD8  ECF4  F029         	call	_updateServoPosition	;wreg free
 14761                           
 14762                           ;Test.c: 322: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14763  000DDC  0E00               	movlw	0
 14764  000DDE  0100               	movlb	0	; () banked
 14765  000DE0  6FB6               	movwf	actuatorTest@i_1775& (0+255),b
 14766  000DE2                     l8975:
 14767                           
 14768                           ; BSR set to: 0
 14769  000DE2  0E63               	movlw	99
 14770  000DE4  0100               	movlb	0	; () banked
 14771  000DE6  65B6               	cpfsgt	actuatorTest@i_1775& (0+255),b
 14772  000DE8  D001               	goto	l8979
 14773  000DEA  D00C               	goto	l8983
 14774  000DEC                     l8979:
 14775                           
 14776                           ; BSR set to: 0
 14777  000DEC  0E68               	movlw	104
 14778  000DEE  0100               	movlb	0	; () banked
 14779  000DF0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14780  000DF2  0EE4               	movlw	228
 14781  000DF4                     u11907:
 14782  000DF4  2EE8               	decfsz	wreg,f,c
 14783  000DF6  D7FE               	bra	u11907
 14784  000DF8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14785  000DFA  D7FC               	bra	u11907
 14786  000DFC  F000               	nop	
 14787  000DFE  0100               	movlb	0	; () banked
 14788  000E00  2BB6               	incf	actuatorTest@i_1775& (0+255),f,b
 14789  000E02  D7EF               	goto	l8975
 14790  000E04                     l8983:
 14791                           
 14792                           ; BSR set to: 0
 14793  000E04  0E00               	movlw	0
 14794  000E06  0100               	movlb	0	; () banked
 14795  000E08  6FB7               	movwf	actuatorTest@i_1776& (0+255),b
 14796  000E0A                     l8985:
 14797                           
 14798                           ; BSR set to: 0
 14799  000E0A  0E63               	movlw	99
 14800  000E0C  0100               	movlb	0	; () banked
 14801  000E0E  65B7               	cpfsgt	actuatorTest@i_1776& (0+255),b
 14802  000E10  D001               	goto	l8989
 14803  000E12  D00C               	goto	l8993
 14804  000E14                     l8989:
 14805                           
 14806                           ; BSR set to: 0
 14807  000E14  0E68               	movlw	104
 14808  000E16  0100               	movlb	0	; () banked
 14809  000E18  6FAB               	movwf	??_actuatorTest& (0+255),b
 14810  000E1A  0EE4               	movlw	228
 14811  000E1C                     u11917:
 14812  000E1C  2EE8               	decfsz	wreg,f,c
 14813  000E1E  D7FE               	bra	u11917
 14814  000E20  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14815  000E22  D7FC               	bra	u11917
 14816  000E24  F000               	nop	
 14817  000E26  0100               	movlb	0	; () banked
 14818  000E28  2BB7               	incf	actuatorTest@i_1776& (0+255),f,b
 14819  000E2A  D7EF               	goto	l8985
 14820  000E2C                     l8993:
 14821                           
 14822                           ; BSR set to: 0
 14823                           ;Test.c: 324: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14824  000E2C  0E80               	movlw	128
 14825  000E2E  EC6D  F030         	call	_lcdInst
 14826  000E32  0EC0               	movlw	192
 14827  000E34  EC6D  F030         	call	_lcdInst
 14828                           
 14829                           ;Test.c: 325: printf("MID -- 2s       ");
 14830  000E38  0E91               	movlw	low STR_103
 14831  000E3A  0100               	movlb	0	; () banked
 14832  000E3C  6F8E               	movwf	printf@f& (0+255),b
 14833  000E3E  0EFB               	movlw	high STR_103
 14834  000E40  0100               	movlb	0	; () banked
 14835  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
 14836  000E44  ECE9  F00E         	call	_printf	;wreg free
 14837                           
 14838                           ;Test.c: 326: updateServoPosition(1200, 1);
 14839  000E48  0E04               	movlw	4
 14840  000E4A  0100               	movlb	0	; () banked
 14841  000E4C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14842  000E4E  0EB0               	movlw	176
 14843  000E50  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14844  000E52  0E00               	movlw	0
 14845  000E54  0100               	movlb	0	; () banked
 14846  000E56  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14847  000E58  0E01               	movlw	1
 14848  000E5A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14849  000E5C  ECF4  F029         	call	_updateServoPosition	;wreg free
 14850                           
 14851                           ;Test.c: 327: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14852  000E60  0E00               	movlw	0
 14853  000E62  0100               	movlb	0	; () banked
 14854  000E64  6FB8               	movwf	actuatorTest@i_1778& (0+255),b
 14855  000E66                     l9001:
 14856                           
 14857                           ; BSR set to: 0
 14858  000E66  0E63               	movlw	99
 14859  000E68  0100               	movlb	0	; () banked
 14860  000E6A  65B8               	cpfsgt	actuatorTest@i_1778& (0+255),b
 14861  000E6C  D001               	goto	l9005
 14862  000E6E  D00C               	goto	l9009
 14863  000E70                     l9005:
 14864                           
 14865                           ; BSR set to: 0
 14866  000E70  0E68               	movlw	104
 14867  000E72  0100               	movlb	0	; () banked
 14868  000E74  6FAB               	movwf	??_actuatorTest& (0+255),b
 14869  000E76  0EE4               	movlw	228
 14870  000E78                     u11927:
 14871  000E78  2EE8               	decfsz	wreg,f,c
 14872  000E7A  D7FE               	bra	u11927
 14873  000E7C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14874  000E7E  D7FC               	bra	u11927
 14875  000E80  F000               	nop	
 14876  000E82  0100               	movlb	0	; () banked
 14877  000E84  2BB8               	incf	actuatorTest@i_1778& (0+255),f,b
 14878  000E86  D7EF               	goto	l9001
 14879  000E88                     l9009:
 14880                           
 14881                           ; BSR set to: 0
 14882  000E88  0E00               	movlw	0
 14883  000E8A  0100               	movlb	0	; () banked
 14884  000E8C  6FB9               	movwf	actuatorTest@i_1779& (0+255),b
 14885  000E8E                     l9011:
 14886                           
 14887                           ; BSR set to: 0
 14888  000E8E  0E63               	movlw	99
 14889  000E90  0100               	movlb	0	; () banked
 14890  000E92  65B9               	cpfsgt	actuatorTest@i_1779& (0+255),b
 14891  000E94  D001               	goto	l9015
 14892  000E96  D00C               	goto	l1403
 14893  000E98                     l9015:
 14894                           
 14895                           ; BSR set to: 0
 14896  000E98  0E68               	movlw	104
 14897  000E9A  0100               	movlb	0	; () banked
 14898  000E9C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14899  000E9E  0EE4               	movlw	228
 14900  000EA0                     u11937:
 14901  000EA0  2EE8               	decfsz	wreg,f,c
 14902  000EA2  D7FE               	bra	u11937
 14903  000EA4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14904  000EA6  D7FC               	bra	u11937
 14905  000EA8  F000               	nop	
 14906  000EAA  0100               	movlb	0	; () banked
 14907  000EAC  2BB9               	incf	actuatorTest@i_1779& (0+255),f,b
 14908  000EAE  D7EF               	goto	l9011
 14909  000EB0                     l1403:
 14910                           
 14911                           ; BSR set to: 0
 14912                           ;Test.c: 328: TMR1ON = 0;
 14913  000EB0  90CD               	bcf	4045,0,c	;volatile
 14914                           
 14915                           ; BSR set to: 0
 14916                           ;Test.c: 335: printf("TST: TILT SERVO");
 14917  000EB2  0E49               	movlw	low STR_104
 14918  000EB4  0100               	movlb	0	; () banked
 14919  000EB6  6F8E               	movwf	printf@f& (0+255),b
 14920  000EB8  0EFE               	movlw	high STR_104
 14921  000EBA  0100               	movlb	0	; () banked
 14922  000EBC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14923  000EBE  ECE9  F00E         	call	_printf	;wreg free
 14924                           
 14925                           ;Test.c: 336: lcdInst(0b11000000);;
 14926  000EC2  0EC0               	movlw	192
 14927  000EC4  EC6D  F030         	call	_lcdInst
 14928                           
 14929                           ;Test.c: 337: printf("LEVEL -- 2s     ");
 14930  000EC8  0EC4               	movlw	low STR_105
 14931  000ECA  0100               	movlb	0	; () banked
 14932  000ECC  6F8E               	movwf	printf@f& (0+255),b
 14933  000ECE  0EFB               	movlw	high STR_105
 14934  000ED0  0100               	movlb	0	; () banked
 14935  000ED2  6F8F               	movwf	(printf@f+1)& (0+255),b
 14936  000ED4  ECE9  F00E         	call	_printf	;wreg free
 14937                           
 14938                           ;Test.c: 338: updateServoPosition(1050, 3);
 14939  000ED8  0E04               	movlw	4
 14940  000EDA  0100               	movlb	0	; () banked
 14941  000EDC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14942  000EDE  0E1A               	movlw	26
 14943  000EE0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14944  000EE2  0E00               	movlw	0
 14945  000EE4  0100               	movlb	0	; () banked
 14946  000EE6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14947  000EE8  0E03               	movlw	3
 14948  000EEA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14949  000EEC  ECF4  F029         	call	_updateServoPosition	;wreg free
 14950                           
 14951                           ;Test.c: 339: TMR3ON = 1;
 14952  000EF0  80B1               	bsf	4017,0,c	;volatile
 14953                           
 14954                           ;Test.c: 340: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14955  000EF2  0E00               	movlw	0
 14956  000EF4  0100               	movlb	0	; () banked
 14957  000EF6  6FBA               	movwf	actuatorTest@i_1782& (0+255),b
 14958  000EF8                     l9029:
 14959                           
 14960                           ; BSR set to: 0
 14961  000EF8  0E63               	movlw	99
 14962  000EFA  0100               	movlb	0	; () banked
 14963  000EFC  65BA               	cpfsgt	actuatorTest@i_1782& (0+255),b
 14964  000EFE  D001               	goto	l9033
 14965  000F00  D00C               	goto	l9037
 14966  000F02                     l9033:
 14967                           
 14968                           ; BSR set to: 0
 14969  000F02  0E68               	movlw	104
 14970  000F04  0100               	movlb	0	; () banked
 14971  000F06  6FAB               	movwf	??_actuatorTest& (0+255),b
 14972  000F08  0EE4               	movlw	228
 14973  000F0A                     u11947:
 14974  000F0A  2EE8               	decfsz	wreg,f,c
 14975  000F0C  D7FE               	bra	u11947
 14976  000F0E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14977  000F10  D7FC               	bra	u11947
 14978  000F12  F000               	nop	
 14979  000F14  0100               	movlb	0	; () banked
 14980  000F16  2BBA               	incf	actuatorTest@i_1782& (0+255),f,b
 14981  000F18  D7EF               	goto	l9029
 14982  000F1A                     l9037:
 14983                           
 14984                           ; BSR set to: 0
 14985  000F1A  0E00               	movlw	0
 14986  000F1C  0100               	movlb	0	; () banked
 14987  000F1E  6FBB               	movwf	actuatorTest@i_1783& (0+255),b
 14988  000F20                     l9039:
 14989                           
 14990                           ; BSR set to: 0
 14991  000F20  0E63               	movlw	99
 14992  000F22  0100               	movlb	0	; () banked
 14993  000F24  65BB               	cpfsgt	actuatorTest@i_1783& (0+255),b
 14994  000F26  D001               	goto	l9043
 14995  000F28  D00C               	goto	l9047
 14996  000F2A                     l9043:
 14997                           
 14998                           ; BSR set to: 0
 14999  000F2A  0E68               	movlw	104
 15000  000F2C  0100               	movlb	0	; () banked
 15001  000F2E  6FAB               	movwf	??_actuatorTest& (0+255),b
 15002  000F30  0EE4               	movlw	228
 15003  000F32                     u11957:
 15004  000F32  2EE8               	decfsz	wreg,f,c
 15005  000F34  D7FE               	bra	u11957
 15006  000F36  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15007  000F38  D7FC               	bra	u11957
 15008  000F3A  F000               	nop	
 15009  000F3C  0100               	movlb	0	; () banked
 15010  000F3E  2BBB               	incf	actuatorTest@i_1783& (0+255),f,b
 15011  000F40  D7EF               	goto	l9039
 15012  000F42                     l9047:
 15013                           
 15014                           ; BSR set to: 0
 15015                           ;Test.c: 342: lcdInst(0b10000000);;lcdInst(0b11000000);;
 15016  000F42  0E80               	movlw	128
 15017  000F44  EC6D  F030         	call	_lcdInst
 15018  000F48  0EC0               	movlw	192
 15019  000F4A  EC6D  F030         	call	_lcdInst
 15020                           
 15021                           ;Test.c: 343: printf("DROP -- 2s      ");
 15022  000F4E  0EA2               	movlw	low STR_106
 15023  000F50  0100               	movlb	0	; () banked
 15024  000F52  6F8E               	movwf	printf@f& (0+255),b
 15025  000F54  0EFB               	movlw	high STR_106
 15026  000F56  0100               	movlb	0	; () banked
 15027  000F58  6F8F               	movwf	(printf@f+1)& (0+255),b
 15028  000F5A  ECE9  F00E         	call	_printf	;wreg free
 15029                           
 15030                           ;Test.c: 344: updateServoPosition(1260, 3);
 15031  000F5E  0E04               	movlw	4
 15032  000F60  0100               	movlb	0	; () banked
 15033  000F62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15034  000F64  0EEC               	movlw	236
 15035  000F66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15036  000F68  0E00               	movlw	0
 15037  000F6A  0100               	movlb	0	; () banked
 15038  000F6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15039  000F6E  0E03               	movlw	3
 15040  000F70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15041  000F72  ECF4  F029         	call	_updateServoPosition	;wreg free
 15042                           
 15043                           ;Test.c: 345: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 15044  000F76  0E00               	movlw	0
 15045  000F78  0100               	movlb	0	; () banked
 15046  000F7A  6FBC               	movwf	actuatorTest@i_1785& (0+255),b
 15047  000F7C                     l9055:
 15048                           
 15049                           ; BSR set to: 0
 15050  000F7C  0E63               	movlw	99
 15051  000F7E  0100               	movlb	0	; () banked
 15052  000F80  65BC               	cpfsgt	actuatorTest@i_1785& (0+255),b
 15053  000F82  D001               	goto	l9059
 15054  000F84  D00C               	goto	l9063
 15055  000F86                     l9059:
 15056                           
 15057                           ; BSR set to: 0
 15058  000F86  0E68               	movlw	104
 15059  000F88  0100               	movlb	0	; () banked
 15060  000F8A  6FAB               	movwf	??_actuatorTest& (0+255),b
 15061  000F8C  0EE4               	movlw	228
 15062  000F8E                     u11967:
 15063  000F8E  2EE8               	decfsz	wreg,f,c
 15064  000F90  D7FE               	bra	u11967
 15065  000F92  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15066  000F94  D7FC               	bra	u11967
 15067  000F96  F000               	nop	
 15068  000F98  0100               	movlb	0	; () banked
 15069  000F9A  2BBC               	incf	actuatorTest@i_1785& (0+255),f,b
 15070  000F9C  D7EF               	goto	l9055
 15071  000F9E                     l9063:
 15072                           
 15073                           ; BSR set to: 0
 15074  000F9E  0E00               	movlw	0
 15075  000FA0  0100               	movlb	0	; () banked
 15076  000FA2  6FBD               	movwf	actuatorTest@i_1786& (0+255),b
 15077  000FA4                     l9065:
 15078                           
 15079                           ; BSR set to: 0
 15080  000FA4  0E63               	movlw	99
 15081  000FA6  0100               	movlb	0	; () banked
 15082  000FA8  65BD               	cpfsgt	actuatorTest@i_1786& (0+255),b
 15083  000FAA  D001               	goto	l9069
 15084  000FAC  D00C               	goto	l9073
 15085  000FAE                     l9069:
 15086                           
 15087                           ; BSR set to: 0
 15088  000FAE  0E68               	movlw	104
 15089  000FB0  0100               	movlb	0	; () banked
 15090  000FB2  6FAB               	movwf	??_actuatorTest& (0+255),b
 15091  000FB4  0EE4               	movlw	228
 15092  000FB6                     u11977:
 15093  000FB6  2EE8               	decfsz	wreg,f,c
 15094  000FB8  D7FE               	bra	u11977
 15095  000FBA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15096  000FBC  D7FC               	bra	u11977
 15097  000FBE  F000               	nop	
 15098  000FC0  0100               	movlb	0	; () banked
 15099  000FC2  2BBD               	incf	actuatorTest@i_1786& (0+255),f,b
 15100  000FC4  D7EF               	goto	l9065
 15101  000FC6                     l9073:
 15102                           
 15103                           ; BSR set to: 0
 15104                           ;Test.c: 347: lcdInst(0b10000000);;lcdInst(0b11000000);;
 15105  000FC6  0E80               	movlw	128
 15106  000FC8  EC6D  F030         	call	_lcdInst
 15107  000FCC  0EC0               	movlw	192
 15108  000FCE  EC6D  F030         	call	_lcdInst
 15109                           
 15110                           ;Test.c: 348: printf("LEVEL -- 2s     ");
 15111  000FD2  0EC4               	movlw	low STR_105
 15112  000FD4  0100               	movlb	0	; () banked
 15113  000FD6  6F8E               	movwf	printf@f& (0+255),b
 15114  000FD8  0EFB               	movlw	high STR_105
 15115  000FDA  0100               	movlb	0	; () banked
 15116  000FDC  6F8F               	movwf	(printf@f+1)& (0+255),b
 15117  000FDE  ECE9  F00E         	call	_printf	;wreg free
 15118                           
 15119                           ;Test.c: 349: updateServoPosition(1050, 3);
 15120  000FE2  0E04               	movlw	4
 15121  000FE4  0100               	movlb	0	; () banked
 15122  000FE6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15123  000FE8  0E1A               	movlw	26
 15124  000FEA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15125  000FEC  0E00               	movlw	0
 15126  000FEE  0100               	movlb	0	; () banked
 15127  000FF0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15128  000FF2  0E03               	movlw	3
 15129  000FF4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15130  000FF6  ECF4  F029         	call	_updateServoPosition	;wreg free
 15131                           
 15132                           ;Test.c: 350: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 15133  000FFA  0E00               	movlw	0
 15134  000FFC  0100               	movlb	0	; () banked
 15135  000FFE  6FBE               	movwf	actuatorTest@i_1788& (0+255),b
 15136  001000                     l9081:
 15137                           
 15138                           ; BSR set to: 0
 15139  001000  0E63               	movlw	99
 15140  001002  0100               	movlb	0	; () banked
 15141  001004  65BE               	cpfsgt	actuatorTest@i_1788& (0+255),b
 15142  001006  D001               	goto	l9085
 15143  001008  D00C               	goto	l9089
 15144  00100A                     l9085:
 15145                           
 15146                           ; BSR set to: 0
 15147  00100A  0E68               	movlw	104
 15148  00100C  0100               	movlb	0	; () banked
 15149  00100E  6FAB               	movwf	??_actuatorTest& (0+255),b
 15150  001010  0EE4               	movlw	228
 15151  001012                     u11987:
 15152  001012  2EE8               	decfsz	wreg,f,c
 15153  001014  D7FE               	bra	u11987
 15154  001016  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15155  001018  D7FC               	bra	u11987
 15156  00101A  F000               	nop	
 15157  00101C  0100               	movlb	0	; () banked
 15158  00101E  2BBE               	incf	actuatorTest@i_1788& (0+255),f,b
 15159  001020  D7EF               	goto	l9081
 15160  001022                     l9089:
 15161                           
 15162                           ; BSR set to: 0
 15163  001022  0E00               	movlw	0
 15164  001024  0100               	movlb	0	; () banked
 15165  001026  6FBF               	movwf	actuatorTest@i_1789& (0+255),b
 15166  001028                     l9091:
 15167                           
 15168                           ; BSR set to: 0
 15169  001028  0E63               	movlw	99
 15170  00102A  0100               	movlb	0	; () banked
 15171  00102C  65BF               	cpfsgt	actuatorTest@i_1789& (0+255),b
 15172  00102E  D001               	goto	l9095
 15173  001030  D00C               	goto	l1415
 15174  001032                     l9095:
 15175                           
 15176                           ; BSR set to: 0
 15177  001032  0E68               	movlw	104
 15178  001034  0100               	movlb	0	; () banked
 15179  001036  6FAB               	movwf	??_actuatorTest& (0+255),b
 15180  001038  0EE4               	movlw	228
 15181  00103A                     u11997:
 15182  00103A  2EE8               	decfsz	wreg,f,c
 15183  00103C  D7FE               	bra	u11997
 15184  00103E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15185  001040  D7FC               	bra	u11997
 15186  001042  F000               	nop	
 15187  001044  0100               	movlb	0	; () banked
 15188  001046  2BBF               	incf	actuatorTest@i_1789& (0+255),f,b
 15189  001048  D7EF               	goto	l9091
 15190  00104A                     l1415:
 15191                           
 15192                           ; BSR set to: 0
 15193                           ;Test.c: 351: TMR3ON = 0;
 15194  00104A  90B1               	bcf	4017,0,c	;volatile
 15195                           
 15196                           ;Test.c: 352: (INTCONbits.GIE = 0);
 15197  00104C  9EF2               	bcf	intcon,7,c	;volatile
 15198                           
 15199                           ; BSR set to: 0
 15200                           ;Test.c: 357: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15201  00104E  0E01               	movlw	1
 15202  001050  EC6D  F030         	call	_lcdInst
 15203  001054  0E68               	movlw	104
 15204  001056  0100               	movlb	0	; () banked
 15205  001058  6FAB               	movwf	??_actuatorTest& (0+255),b
 15206  00105A  0EE4               	movlw	228
 15207  00105C                     u12007:
 15208  00105C  2EE8               	decfsz	wreg,f,c
 15209  00105E  D7FE               	bra	u12007
 15210  001060  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15211  001062  D7FC               	bra	u12007
 15212  001064  F000               	nop	
 15213  001066  0E80               	movlw	128
 15214  001068  EC6D  F030         	call	_lcdInst
 15215                           
 15216                           ;Test.c: 358: printf("TST: CAM SERVO");
 15217  00106C  0EC5               	movlw	low STR_108
 15218  00106E  0100               	movlb	0	; () banked
 15219  001070  6F8E               	movwf	printf@f& (0+255),b
 15220  001072  0EFE               	movlw	high STR_108
 15221  001074  0100               	movlb	0	; () banked
 15222  001076  6F8F               	movwf	(printf@f+1)& (0+255),b
 15223  001078  ECE9  F00E         	call	_printf	;wreg free
 15224                           
 15225                           ;Test.c: 359: lcdInst(0b11000000);;
 15226  00107C  0EC0               	movlw	192
 15227  00107E  EC6D  F030         	call	_lcdInst
 15228                           
 15229                           ;Test.c: 360: printf("CAM UP  |RC0=1");
 15230  001082  0EA7               	movlw	low STR_109
 15231  001084  0100               	movlb	0	; () banked
 15232  001086  6F8E               	movwf	printf@f& (0+255),b
 15233  001088  0EFE               	movlw	high STR_109
 15234  00108A  0100               	movlb	0	; () banked
 15235  00108C  6F8F               	movwf	(printf@f+1)& (0+255),b
 15236  00108E  ECE9  F00E         	call	_printf	;wreg free
 15237                           
 15238                           ;Test.c: 361: LATCbits.LATC0 = 1;
 15239  001092  808B               	bsf	3979,0,c	;volatile
 15240                           
 15241                           ;Test.c: 362: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 15242  001094  0E00               	movlw	0
 15243  001096  0100               	movlb	0	; () banked
 15244  001098  6FC0               	movwf	actuatorTest@i_1792& (0+255),b
 15245  00109A                     l9115:
 15246                           
 15247                           ; BSR set to: 0
 15248  00109A  0E63               	movlw	99
 15249  00109C  0100               	movlb	0	; () banked
 15250  00109E  65C0               	cpfsgt	actuatorTest@i_1792& (0+255),b
 15251  0010A0  D001               	goto	l9119
 15252  0010A2  D00C               	goto	l9123
 15253  0010A4                     l9119:
 15254                           
 15255                           ; BSR set to: 0
 15256  0010A4  0E68               	movlw	104
 15257  0010A6  0100               	movlb	0	; () banked
 15258  0010A8  6FAB               	movwf	??_actuatorTest& (0+255),b
 15259  0010AA  0EE4               	movlw	228
 15260  0010AC                     u12017:
 15261  0010AC  2EE8               	decfsz	wreg,f,c
 15262  0010AE  D7FE               	bra	u12017
 15263  0010B0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15264  0010B2  D7FC               	bra	u12017
 15265  0010B4  F000               	nop	
 15266  0010B6  0100               	movlb	0	; () banked
 15267  0010B8  2BC0               	incf	actuatorTest@i_1792& (0+255),f,b
 15268  0010BA  D7EF               	goto	l9115
 15269  0010BC                     l9123:
 15270                           
 15271                           ; BSR set to: 0
 15272  0010BC  0E00               	movlw	0
 15273  0010BE  0100               	movlb	0	; () banked
 15274  0010C0  6FC1               	movwf	actuatorTest@i_1793& (0+255),b
 15275  0010C2                     l9125:
 15276                           
 15277                           ; BSR set to: 0
 15278  0010C2  0E63               	movlw	99
 15279  0010C4  0100               	movlb	0	; () banked
 15280  0010C6  65C1               	cpfsgt	actuatorTest@i_1793& (0+255),b
 15281  0010C8  D001               	goto	l9129
 15282  0010CA  D00C               	goto	l9133
 15283  0010CC                     l9129:
 15284                           
 15285                           ; BSR set to: 0
 15286  0010CC  0E68               	movlw	104
 15287  0010CE  0100               	movlb	0	; () banked
 15288  0010D0  6FAB               	movwf	??_actuatorTest& (0+255),b
 15289  0010D2  0EE4               	movlw	228
 15290  0010D4                     u12027:
 15291  0010D4  2EE8               	decfsz	wreg,f,c
 15292  0010D6  D7FE               	bra	u12027
 15293  0010D8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15294  0010DA  D7FC               	bra	u12027
 15295  0010DC  F000               	nop	
 15296  0010DE  0100               	movlb	0	; () banked
 15297  0010E0  2BC1               	incf	actuatorTest@i_1793& (0+255),f,b
 15298  0010E2  D7EF               	goto	l9125
 15299  0010E4                     l9133:
 15300                           
 15301                           ; BSR set to: 0
 15302                           ;Test.c: 363: lcdInst(0b10000000);;lcdInst(0b11000000);;
 15303  0010E4  0E80               	movlw	128
 15304  0010E6  EC6D  F030         	call	_lcdInst
 15305  0010EA  0EC0               	movlw	192
 15306  0010EC  EC6D  F030         	call	_lcdInst
 15307                           
 15308                           ;Test.c: 364: printf("CAM DWN |RC0=0");
 15309  0010F0  0E98               	movlw	low STR_110
 15310  0010F2  0100               	movlb	0	; () banked
 15311  0010F4  6F8E               	movwf	printf@f& (0+255),b
 15312  0010F6  0EFE               	movlw	high STR_110
 15313  0010F8  0100               	movlb	0	; () banked
 15314  0010FA  6F8F               	movwf	(printf@f+1)& (0+255),b
 15315  0010FC  ECE9  F00E         	call	_printf	;wreg free
 15316                           
 15317                           ;Test.c: 367: for(i=0;i<10000;i++)
 15318  001100  0E00               	movlw	0
 15319  001102  0100               	movlb	0	; () banked
 15320  001104  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 15321  001106  0E00               	movlw	0
 15322  001108  6FC4               	movwf	actuatorTest@i& (0+255),b
 15323  00110A                     l9139:
 15324                           
 15325                           ; BSR set to: 0
 15326  00110A  0100               	movlb	0	; () banked
 15327  00110C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 15328  00110E  D008               	goto	l1420
 15329  001110  0E10               	movlw	16
 15330  001112  0100               	movlb	0	; () banked
 15331  001114  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 15332  001116  0E27               	movlw	39
 15333  001118  0100               	movlb	0	; () banked
 15334  00111A  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 15335  00111C  B0D8               	btfsc	status,0,c
 15336  00111E  D00D               	goto	l9149
 15337  001120                     l1420:
 15338                           
 15339                           ; BSR set to: 0
 15340                           ;Test.c: 368: {
 15341                           ;Test.c: 369: LATCbits.LATC0 = 1;
 15342  001120  808B               	bsf	3979,0,c	;volatile
 15343                           
 15344                           ; BSR set to: 0
 15345                           ;Test.c: 370: _delay((unsigned long)((10)*(32000000/4000000.0)));
 15346  001122  0E1A               	movlw	26
 15347  001124                     u12037:
 15348  001124  2EE8               	decfsz	wreg,f,c
 15349  001126  D7FE               	bra	u12037
 15350  001128  D000               	nop2	
 15351                           
 15352                           ;Test.c: 371: LATCbits.LATC0 = 0;
 15353  00112A  908B               	bcf	3979,0,c	;volatile
 15354                           
 15355                           ;Test.c: 372: _delay((unsigned long)((90)*(32000000/4000000.0)));
 15356  00112C  0EF0               	movlw	240
 15357  00112E                     u12047:
 15358  00112E  2EE8               	decfsz	wreg,f,c
 15359  001130  D7FE               	bra	u12047
 15360  001132  0100               	movlb	0	; () banked
 15361  001134  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 15362  001136  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 15363  001138  D7E8               	goto	l9139
 15364  00113A                     l9149:
 15365                           
 15366                           ; BSR set to: 0
 15367                           ;Test.c: 373: }
 15368                           ;Test.c: 375: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 15369  00113A  0E00               	movlw	0
 15370  00113C  0100               	movlb	0	; () banked
 15371  00113E  6FC2               	movwf	actuatorTest@i_1795& (0+255),b
 15372  001140                     l9151:
 15373                           
 15374                           ; BSR set to: 0
 15375  001140  0E63               	movlw	99
 15376  001142  0100               	movlb	0	; () banked
 15377  001144  65C2               	cpfsgt	actuatorTest@i_1795& (0+255),b
 15378  001146  D001               	goto	l9155
 15379  001148  D00C               	goto	l9159
 15380  00114A                     l9155:
 15381                           
 15382                           ; BSR set to: 0
 15383  00114A  0E68               	movlw	104
 15384  00114C  0100               	movlb	0	; () banked
 15385  00114E  6FAB               	movwf	??_actuatorTest& (0+255),b
 15386  001150  0EE4               	movlw	228
 15387  001152                     u12057:
 15388  001152  2EE8               	decfsz	wreg,f,c
 15389  001154  D7FE               	bra	u12057
 15390  001156  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15391  001158  D7FC               	bra	u12057
 15392  00115A  F000               	nop	
 15393  00115C  0100               	movlb	0	; () banked
 15394  00115E  2BC2               	incf	actuatorTest@i_1795& (0+255),f,b
 15395  001160  D7EF               	goto	l9151
 15396  001162                     l9159:
 15397                           
 15398                           ; BSR set to: 0
 15399  001162  0E00               	movlw	0
 15400  001164  0100               	movlb	0	; () banked
 15401  001166  6FC3               	movwf	actuatorTest@i_1796& (0+255),b
 15402  001168                     l9161:
 15403                           
 15404                           ; BSR set to: 0
 15405  001168  0E63               	movlw	99
 15406  00116A  0100               	movlb	0	; () banked
 15407  00116C  65C3               	cpfsgt	actuatorTest@i_1796& (0+255),b
 15408  00116E  D001               	goto	l9165
 15409  001170  D00C               	goto	l9169
 15410  001172                     l9165:
 15411                           
 15412                           ; BSR set to: 0
 15413  001172  0E68               	movlw	104
 15414  001174  0100               	movlb	0	; () banked
 15415  001176  6FAB               	movwf	??_actuatorTest& (0+255),b
 15416  001178  0EE4               	movlw	228
 15417  00117A                     u12067:
 15418  00117A  2EE8               	decfsz	wreg,f,c
 15419  00117C  D7FE               	bra	u12067
 15420  00117E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 15421  001180  D7FC               	bra	u12067
 15422  001182  F000               	nop	
 15423  001184  0100               	movlb	0	; () banked
 15424  001186  2BC3               	incf	actuatorTest@i_1796& (0+255),f,b
 15425  001188  D7EF               	goto	l9161
 15426  00118A                     l9169:
 15427                           
 15428                           ; BSR set to: 0
 15429                           ;Test.c: 376: machine_state = Testing_state;
 15430  00118A  0E03               	movlw	3
 15431  00118C  0100               	movlb	0	; () banked
 15432  00118E  6FFC               	movwf	_machine_state& (0+255),b
 15433                           
 15434                           ; BSR set to: 0
 15435  001190  0012               	return		;funcret
 15436  001192                     __end_of_actuatorTest:
 15437                           	opt stack 0
 15438                           tblptru	equ	0xFF8
 15439                           tblptrh	equ	0xFF7
 15440                           tblptrl	equ	0xFF6
 15441                           tablat	equ	0xFF5
 15442                           prodh	equ	0xFF4
 15443                           prodl	equ	0xFF3
 15444                           intcon	equ	0xFF2
 15445                           intcon2	equ	0xFF1
 15446                           intcon3	equ	0xFF0
 15447                           postinc0	equ	0xFEE
 15448                           wreg	equ	0xFE8
 15449                           postdec1	equ	0xFE5
 15450                           fsr1l	equ	0xFE1
 15451                           indf2	equ	0xFDF
 15452                           postinc2	equ	0xFDE
 15453                           postdec2	equ	0xFDD
 15454                           fsr2h	equ	0xFDA
 15455                           fsr2l	equ	0xFD9
 15456                           status	equ	0xFD8
 15457                           
 15458 ;; *************** function _SpeedTest *****************
 15459 ;; Defined at:
 15460 ;;		line 565 in file "Test.c"
 15461 ;; Parameters:    Size  Location     Type
 15462 ;;		None
 15463 ;; Auto vars:     Size  Location     Type
 15464 ;;		None
 15465 ;; Return value:  Size  Location     Type
 15466 ;;                  1    wreg      void 
 15467 ;; Registers used:
 15468 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15469 ;; Tracked objects:
 15470 ;;		On entry : 0/0
 15471 ;;		On exit  : 0/0
 15472 ;;		Unchanged: 0/0
 15473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15476 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15477 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15478 ;;Total ram usage:        1 bytes
 15479 ;; Hardware stack levels used:    1
 15480 ;; Hardware stack levels required when called:   10
 15481 ;; This function calls:
 15482 ;;		_lcdInst
 15483 ;;		_printf
 15484 ;; This function is called by:
 15485 ;;		_Test
 15486 ;; This function uses a non-reentrant model
 15487 ;;
 15488                           
 15489                           	psect	text46
 15490  0052E2                     __ptext46:
 15491                           	opt stack 0
 15492  0052E2                     _SpeedTest:
 15493                           	opt stack 19
 15494                           
 15495                           ;Test.c: 567: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15496                           
 15497                           ; BSR set to: 0
 15498                           ;incstack = 0
 15499  0052E2  0E01               	movlw	1
 15500  0052E4  EC6D  F030         	call	_lcdInst
 15501  0052E8  0E68               	movlw	104
 15502  0052EA  0100               	movlb	0	; () banked
 15503  0052EC  6FAB               	movwf	??_SpeedTest& (0+255),b
 15504  0052EE  0EE4               	movlw	228
 15505  0052F0                     u12077:
 15506  0052F0  2EE8               	decfsz	wreg,f,c
 15507  0052F2  D7FE               	bra	u12077
 15508  0052F4  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 15509  0052F6  D7FC               	bra	u12077
 15510  0052F8  F000               	nop	
 15511  0052FA  0E80               	movlw	128
 15512  0052FC  EC6D  F030         	call	_lcdInst
 15513                           
 15514                           ;Test.c: 568: printf("S: D WILL RETURN ");
 15515  005300  0E37               	movlw	low STR_119
 15516  005302  0100               	movlb	0	; () banked
 15517  005304  6F8E               	movwf	printf@f& (0+255),b
 15518  005306  0EFB               	movlw	high STR_119
 15519  005308  0100               	movlb	0	; () banked
 15520  00530A  6F8F               	movwf	(printf@f+1)& (0+255),b
 15521  00530C  ECE9  F00E         	call	_printf	;wreg free
 15522                           
 15523                           ;Test.c: 569: lcdInst(0b11000000);;
 15524  005310  0EC0               	movlw	192
 15525  005312  EC6D  F030         	call	_lcdInst
 15526                           
 15527                           ;Test.c: 570: printf("OTHER SETS RA5   ");
 15528  005316  0E01               	movlw	low STR_120
 15529  005318  0100               	movlb	0	; () banked
 15530  00531A  6F8E               	movwf	printf@f& (0+255),b
 15531  00531C  0EFB               	movlw	high STR_120
 15532  00531E  0100               	movlb	0	; () banked
 15533  005320  6F8F               	movwf	(printf@f+1)& (0+255),b
 15534  005322  ECE9  F00E         	call	_printf	;wreg free
 15535  005326                     l1490:
 15536  005326  A281               	btfss	3969,1,c	;volatile
 15537  005328  D7FE               	goto	l1490
 15538                           
 15539                           ;Test.c: 575: }
 15540                           ;Test.c: 576: if(PORTB >> 4 == 0b1111){
 15541  00532A  3881               	swapf	3969,w,c	;volatile
 15542  00532C  0B0F               	andlw	15
 15543  00532E  0A0F               	xorlw	15
 15544  005330  B4D8               	btfsc	status,2,c
 15545  005332  0012               	return	
 15546  005334  D014               	goto	l9281
 15547  005336                     l1497:
 15548                           
 15549                           ;Test.c: 581: LATBbits.LATB2 = 1;
 15550  005336  848A               	bsf	3978,2,c	;volatile
 15551                           
 15552                           ;Test.c: 582: _delay((unsigned long)((5)*(32000000/4000.0)));
 15553  005338  0E34               	movlw	52
 15554  00533A  0100               	movlb	0	; () banked
 15555  00533C  6FAB               	movwf	??_SpeedTest& (0+255),b
 15556  00533E  0EF1               	movlw	241
 15557  005340                     u12087:
 15558  005340  2EE8               	decfsz	wreg,f,c
 15559  005342  D7FE               	bra	u12087
 15560  005344  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 15561  005346  D7FC               	bra	u12087
 15562  005348  D000               	nop2	
 15563                           
 15564                           ;Test.c: 583: LATBbits.LATB2 = 0;
 15565  00534A  948A               	bcf	3978,2,c	;volatile
 15566                           
 15567                           ;Test.c: 584: _delay((unsigned long)((5)*(32000000/4000.0)));
 15568  00534C  0E34               	movlw	52
 15569  00534E  0100               	movlb	0	; () banked
 15570  005350  6FAB               	movwf	??_SpeedTest& (0+255),b
 15571  005352  0EF1               	movlw	241
 15572  005354                     u12097:
 15573  005354  2EE8               	decfsz	wreg,f,c
 15574  005356  D7FE               	bra	u12097
 15575  005358  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 15576  00535A  D7FC               	bra	u12097
 15577  00535C  D000               	nop2	
 15578  00535E                     l9281:
 15579  00535E  B281               	btfsc	3969,1,c	;volatile
 15580  005360  D7EA               	goto	l1497
 15581                           
 15582                           ;Test.c: 587: }
 15583                           ;Test.c: 588: LATBbits.LATB2 = 0;
 15584  005362  948A               	bcf	3978,2,c	;volatile
 15585  005364  D7E0               	goto	l1490
 15586  005366                     __end_of_SpeedTest:
 15587                           	opt stack 0
 15588                           tblptru	equ	0xFF8
 15589                           tblptrh	equ	0xFF7
 15590                           tblptrl	equ	0xFF6
 15591                           tablat	equ	0xFF5
 15592                           prodh	equ	0xFF4
 15593                           prodl	equ	0xFF3
 15594                           intcon	equ	0xFF2
 15595                           intcon2	equ	0xFF1
 15596                           intcon3	equ	0xFF0
 15597                           postinc0	equ	0xFEE
 15598                           wreg	equ	0xFE8
 15599                           postdec1	equ	0xFE5
 15600                           fsr1l	equ	0xFE1
 15601                           indf2	equ	0xFDF
 15602                           postinc2	equ	0xFDE
 15603                           postdec2	equ	0xFDD
 15604                           fsr2h	equ	0xFDA
 15605                           fsr2l	equ	0xFD9
 15606                           status	equ	0xFD8
 15607                           
 15608 ;; *************** function _PortTestPusher *****************
 15609 ;; Defined at:
 15610 ;;		line 706 in file "Test.c"
 15611 ;; Parameters:    Size  Location     Type
 15612 ;;		None
 15613 ;; Auto vars:     Size  Location     Type
 15614 ;;		None
 15615 ;; Return value:  Size  Location     Type
 15616 ;;                  1    wreg      void 
 15617 ;; Registers used:
 15618 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15619 ;; Tracked objects:
 15620 ;;		On entry : 0/0
 15621 ;;		On exit  : 0/0
 15622 ;;		Unchanged: 0/0
 15623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15626 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15627 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15628 ;;Total ram usage:        1 bytes
 15629 ;; Hardware stack levels used:    1
 15630 ;; Hardware stack levels required when called:   10
 15631 ;; This function calls:
 15632 ;;		_lcdInst
 15633 ;;		_printf
 15634 ;; This function is called by:
 15635 ;;		_Test
 15636 ;; This function uses a non-reentrant model
 15637 ;;
 15638                           
 15639                           	psect	text47
 15640  005832                     __ptext47:
 15641                           	opt stack 0
 15642  005832                     _PortTestPusher:
 15643                           	opt stack 19
 15644                           
 15645                           ;Test.c: 707: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15646                           
 15647                           ;incstack = 0
 15648  005832  0E01               	movlw	1
 15649  005834  EC6D  F030         	call	_lcdInst
 15650  005838  0E68               	movlw	104
 15651  00583A  0100               	movlb	0	; () banked
 15652  00583C  6FAB               	movwf	??_PortTestPusher& (0+255),b
 15653  00583E  0EE4               	movlw	228
 15654  005840                     u12107:
 15655  005840  2EE8               	decfsz	wreg,f,c
 15656  005842  D7FE               	bra	u12107
 15657  005844  2FAB               	decfsz	??_PortTestPusher& (0+255),f,b
 15658  005846  D7FC               	bra	u12107
 15659  005848  F000               	nop	
 15660  00584A  0E80               	movlw	128
 15661  00584C  EC6D  F030         	call	_lcdInst
 15662                           
 15663                           ;Test.c: 708: printf("D WILL RETURN    ");
 15664  005850  0EEF               	movlw	low STR_112
 15665  005852  0100               	movlb	0	; () banked
 15666  005854  6F8E               	movwf	printf@f& (0+255),b
 15667  005856  0EFA               	movlw	high STR_112
 15668  005858  0100               	movlb	0	; () banked
 15669  00585A  6F8F               	movwf	(printf@f+1)& (0+255),b
 15670  00585C  ECE9  F00E         	call	_printf	;wreg free
 15671                           
 15672                           ;Test.c: 709: lcdInst(0b11000000);;
 15673  005860  0EC0               	movlw	192
 15674  005862  EC6D  F030         	call	_lcdInst
 15675                           
 15676                           ;Test.c: 710: printf("OTHER SETS PUSHER");
 15677  005866  0E5B               	movlw	low STR_128
 15678  005868  0100               	movlb	0	; () banked
 15679  00586A  6F8E               	movwf	printf@f& (0+255),b
 15680  00586C  0EFB               	movlw	high STR_128
 15681  00586E  0100               	movlb	0	; () banked
 15682  005870  6F8F               	movwf	(printf@f+1)& (0+255),b
 15683  005872  ECE9  F00E         	call	_printf	;wreg free
 15684  005876                     l1551:
 15685  005876  A281               	btfss	3969,1,c	;volatile
 15686  005878  D7FE               	goto	l1551
 15687                           
 15688                           ;Test.c: 715: }
 15689                           ;Test.c: 716: if(PORTB >> 4 == 0b1111){
 15690  00587A  3881               	swapf	3969,w,c	;volatile
 15691  00587C  0B0F               	andlw	15
 15692  00587E  0A0F               	xorlw	15
 15693  005880  B4D8               	btfsc	status,2,c
 15694  005882  0012               	return	
 15695                           
 15696                           ;Test.c: 719: else{
 15697                           ;Test.c: 720: LATAbits.LATA4 = 1;
 15698                           
 15699                           ;Test.c: 718: }
 15700                           
 15701                           ;Test.c: 717: break;
 15702  005884  8889               	bsf	3977,4,c	;volatile
 15703  005886                     l1557:
 15704  005886  B281               	btfsc	3969,1,c	;volatile
 15705  005888  D7FE               	goto	l1557
 15706                           
 15707                           ;Test.c: 723: }
 15708                           ;Test.c: 724: LATAbits.LATA4 = 0;
 15709  00588A  9889               	bcf	3977,4,c	;volatile
 15710  00588C  D7F4               	goto	l1551
 15711  00588E                     __end_of_PortTestPusher:
 15712                           	opt stack 0
 15713                           tblptru	equ	0xFF8
 15714                           tblptrh	equ	0xFF7
 15715                           tblptrl	equ	0xFF6
 15716                           tablat	equ	0xFF5
 15717                           prodh	equ	0xFF4
 15718                           prodl	equ	0xFF3
 15719                           intcon	equ	0xFF2
 15720                           intcon2	equ	0xFF1
 15721                           intcon3	equ	0xFF0
 15722                           postinc0	equ	0xFEE
 15723                           wreg	equ	0xFE8
 15724                           postdec1	equ	0xFE5
 15725                           fsr1l	equ	0xFE1
 15726                           indf2	equ	0xFDF
 15727                           postinc2	equ	0xFDE
 15728                           postdec2	equ	0xFDD
 15729                           fsr2h	equ	0xFDA
 15730                           fsr2l	equ	0xFD9
 15731                           status	equ	0xFD8
 15732                           
 15733 ;; *************** function _PortTestDC *****************
 15734 ;; Defined at:
 15735 ;;		line 439 in file "Test.c"
 15736 ;; Parameters:    Size  Location     Type
 15737 ;;		None
 15738 ;; Auto vars:     Size  Location     Type
 15739 ;;		None
 15740 ;; Return value:  Size  Location     Type
 15741 ;;                  1    wreg      void 
 15742 ;; Registers used:
 15743 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15744 ;; Tracked objects:
 15745 ;;		On entry : 0/0
 15746 ;;		On exit  : 0/0
 15747 ;;		Unchanged: 0/0
 15748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15751 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15752 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15753 ;;Total ram usage:        1 bytes
 15754 ;; Hardware stack levels used:    1
 15755 ;; Hardware stack levels required when called:   10
 15756 ;; This function calls:
 15757 ;;		_lcdInst
 15758 ;;		_printf
 15759 ;; This function is called by:
 15760 ;;		_Test
 15761 ;; This function uses a non-reentrant model
 15762 ;;
 15763                           
 15764                           	psect	text48
 15765  004C0C                     __ptext48:
 15766                           	opt stack 0
 15767  004C0C                     _PortTestDC:
 15768                           	opt stack 19
 15769                           
 15770                           ;Test.c: 440: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15771                           
 15772                           ;incstack = 0
 15773  004C0C  0E01               	movlw	1
 15774  004C0E  EC6D  F030         	call	_lcdInst
 15775  004C12  0E68               	movlw	104
 15776  004C14  0100               	movlb	0	; () banked
 15777  004C16  6FAB               	movwf	??_PortTestDC& (0+255),b
 15778  004C18  0EE4               	movlw	228
 15779  004C1A                     u12117:
 15780  004C1A  2EE8               	decfsz	wreg,f,c
 15781  004C1C  D7FE               	bra	u12117
 15782  004C1E  2FAB               	decfsz	??_PortTestDC& (0+255),f,b
 15783  004C20  D7FC               	bra	u12117
 15784  004C22  F000               	nop	
 15785  004C24  0E80               	movlw	128
 15786  004C26  EC6D  F030         	call	_lcdInst
 15787                           
 15788                           ;Test.c: 441: printf("D WILL RETURN    ");
 15789  004C2A  0EEF               	movlw	low STR_112
 15790  004C2C  0100               	movlb	0	; () banked
 15791  004C2E  6F8E               	movwf	printf@f& (0+255),b
 15792  004C30  0EFA               	movlw	high STR_112
 15793  004C32  0100               	movlb	0	; () banked
 15794  004C34  6F8F               	movwf	(printf@f+1)& (0+255),b
 15795  004C36  ECE9  F00E         	call	_printf	;wreg free
 15796                           
 15797                           ;Test.c: 442: lcdInst(0b11000000);;
 15798  004C3A  0EC0               	movlw	192
 15799  004C3C  EC6D  F030         	call	_lcdInst
 15800                           
 15801                           ;Test.c: 443: printf("OTHER SETS DC   ");
 15802  004C40  0EF7               	movlw	low STR_113
 15803  004C42  0100               	movlb	0	; () banked
 15804  004C44  6F8E               	movwf	printf@f& (0+255),b
 15805  004C46  0EFB               	movlw	high STR_113
 15806  004C48  0100               	movlb	0	; () banked
 15807  004C4A  6F8F               	movwf	(printf@f+1)& (0+255),b
 15808  004C4C  ECE9  F00E         	call	_printf	;wreg free
 15809  004C50                     l1433:
 15810  004C50  A281               	btfss	3969,1,c	;volatile
 15811  004C52  D7FE               	goto	l1433
 15812                           
 15813                           ;Test.c: 448: }
 15814                           ;Test.c: 449: if(PORTB >> 4 == 0b1111){
 15815  004C54  3881               	swapf	3969,w,c	;volatile
 15816  004C56  0B0F               	andlw	15
 15817  004C58  0A0F               	xorlw	15
 15818  004C5A  B4D8               	btfsc	status,2,c
 15819  004C5C  0012               	return	
 15820                           
 15821                           ;Test.c: 452: else if(PORTB >> 4 == 0b0000){
 15822                           
 15823                           ;Test.c: 451: }
 15824                           
 15825                           ;Test.c: 450: break;
 15826  004C5E  CF81 F0AB          	movff	3969,??_PortTestDC	;volatile
 15827  004C62  0100               	movlb	0	; () banked
 15828  004C64  3BAB               	swapf	??_PortTestDC& (0+255),f,b
 15829  004C66  0E0F               	movlw	15
 15830  004C68  17AB               	andwf	??_PortTestDC& (0+255),f,b
 15831  004C6A  A4D8               	btfss	status,2,c
 15832  004C6C  D010               	goto	l9247
 15833                           
 15834                           ; BSR set to: 0
 15835                           ;Test.c: 454: LATBbits.LATB2 = !LATBbits.LATB2;
 15836  004C6E  B48A               	btfsc	3978,2,c	;volatile
 15837  004C70  D004               	goto	u8740
 15838  004C72  0100               	movlb	0	; () banked
 15839  004C74  6BAB               	clrf	??_PortTestDC& (0+255),b
 15840  004C76  2BAB               	incf	??_PortTestDC& (0+255),f,b
 15841  004C78  D002               	goto	u8758
 15842  004C7A                     u8740:
 15843  004C7A  0100               	movlb	0	; () banked
 15844  004C7C  6BAB               	clrf	??_PortTestDC& (0+255),b
 15845  004C7E                     u8758:
 15846  004C7E  0100               	movlb	0	; () banked
 15847  004C80  47AB               	rlncf	??_PortTestDC& (0+255),f,b
 15848  004C82  47AB               	rlncf	??_PortTestDC& (0+255),f,b
 15849  004C84  508A               	movf	3978,w,c	;volatile
 15850  004C86  0100               	movlb	0	; () banked
 15851  004C88  19AB               	xorwf	??_PortTestDC& (0+255),w,b
 15852  004C8A  0BFB               	andlw	-5
 15853  004C8C  D011               	goto	L14
 15854  004C8E                     l9247:
 15855                           
 15856                           ; BSR set to: 0
 15857                           ;Test.c: 456: else if(PORTB >> 4 == 0b0001){
 15858  004C8E  3881               	swapf	3969,w,c	;volatile
 15859  004C90  0B0F               	andlw	15
 15860  004C92  06E8               	decf	wreg,f,c
 15861  004C94  A4D8               	btfss	status,2,c
 15862  004C96  D00F               	goto	l9251
 15863                           
 15864                           ; BSR set to: 0
 15865                           ;Test.c: 458: LATBbits.LATB0 = !LATBbits.LATB0;
 15866  004C98  B08A               	btfsc	3978,0,c	;volatile
 15867  004C9A  D004               	goto	u8770
 15868  004C9C  0100               	movlb	0	; () banked
 15869  004C9E  6BAB               	clrf	??_PortTestDC& (0+255),b
 15870  004CA0  2BAB               	incf	??_PortTestDC& (0+255),f,b
 15871  004CA2  D002               	goto	u8788
 15872  004CA4                     u8770:
 15873  004CA4  0100               	movlb	0	; () banked
 15874  004CA6  6BAB               	clrf	??_PortTestDC& (0+255),b
 15875  004CA8                     u8788:
 15876  004CA8  508A               	movf	3978,w,c	;volatile
 15877  004CAA  0100               	movlb	0	; () banked
 15878  004CAC  19AB               	xorwf	??_PortTestDC& (0+255),w,b
 15879  004CAE  0BFE               	andlw	-2
 15880  004CB0                     L14:
 15881  004CB0  19AB               	xorwf	??_PortTestDC& (0+255),w,b
 15882  004CB2  6E8A               	movwf	3978,c	;volatile
 15883                           
 15884                           ;Test.c: 459: }
 15885  004CB4  D013               	goto	l1452
 15886  004CB6                     l9251:
 15887                           
 15888                           ; BSR set to: 0
 15889                           ;Test.c: 460: else if(PORTB >> 4 == 0b0100){
 15890  004CB6  3881               	swapf	3969,w,c	;volatile
 15891  004CB8  0B0F               	andlw	15
 15892  004CBA  0A04               	xorlw	4
 15893  004CBC  A4D8               	btfss	status,2,c
 15894  004CBE  D005               	goto	l9255
 15895                           
 15896                           ; BSR set to: 0
 15897                           ;Test.c: 461: LATBbits.LATB2 = 1;
 15898  004CC0  848A               	bsf	3978,2,c	;volatile
 15899  004CC2                     l1444:
 15900  004CC2  B281               	btfsc	3969,1,c	;volatile
 15901  004CC4  D7FE               	goto	l1444
 15902                           
 15903                           ;Test.c: 463: LATBbits.LATB2 = 0;
 15904  004CC6  948A               	bcf	3978,2,c	;volatile
 15905                           
 15906                           ;Test.c: 464: }
 15907  004CC8  D009               	goto	l1452
 15908  004CCA                     l9255:
 15909                           
 15910                           ;Test.c: 465: else if(PORTB >> 4 == 0b0101){
 15911  004CCA  3881               	swapf	3969,w,c	;volatile
 15912  004CCC  0B0F               	andlw	15
 15913  004CCE  0A05               	xorlw	5
 15914  004CD0  A4D8               	btfss	status,2,c
 15915  004CD2  D004               	goto	l1452
 15916                           
 15917                           ;Test.c: 466: LATBbits.LATB0 = 1;
 15918  004CD4  808A               	bsf	3978,0,c	;volatile
 15919  004CD6                     l1449:
 15920  004CD6  B281               	btfsc	3969,1,c	;volatile
 15921  004CD8  D7FE               	goto	l1449
 15922                           
 15923                           ;Test.c: 468: LATBbits.LATB0 = 0;
 15924  004CDA  908A               	bcf	3978,0,c	;volatile
 15925  004CDC                     l1452:
 15926  004CDC  A281               	btfss	3969,1,c	;volatile
 15927  004CDE  D7B8               	goto	l1433
 15928  004CE0  D7FD               	goto	l1452
 15929  004CE2                     __end_of_PortTestDC:
 15930                           	opt stack 0
 15931                           tblptru	equ	0xFF8
 15932                           tblptrh	equ	0xFF7
 15933                           tblptrl	equ	0xFF6
 15934                           tablat	equ	0xFF5
 15935                           prodh	equ	0xFF4
 15936                           prodl	equ	0xFF3
 15937                           intcon	equ	0xFF2
 15938                           intcon2	equ	0xFF1
 15939                           intcon3	equ	0xFF0
 15940                           postinc0	equ	0xFEE
 15941                           wreg	equ	0xFE8
 15942                           postdec1	equ	0xFE5
 15943                           fsr1l	equ	0xFE1
 15944                           indf2	equ	0xFDF
 15945                           postinc2	equ	0xFDE
 15946                           postdec2	equ	0xFDD
 15947                           fsr2h	equ	0xFDA
 15948                           fsr2l	equ	0xFD9
 15949                           status	equ	0xFD8
 15950                           
 15951 ;; *************** function _PlatformTest *****************
 15952 ;; Defined at:
 15953 ;;		line 474 in file "Test.c"
 15954 ;; Parameters:    Size  Location     Type
 15955 ;;		None
 15956 ;; Auto vars:     Size  Location     Type
 15957 ;;  i               2   51[BANK0 ] int 
 15958 ;;  i               2   49[BANK0 ] int 
 15959 ;;  res             2   47[BANK0 ] int 
 15960 ;;  res             2   45[BANK0 ] int 
 15961 ;;  on              2   53[BANK0 ] int 
 15962 ;; Return value:  Size  Location     Type
 15963 ;;                  1    wreg      void 
 15964 ;; Registers used:
 15965 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15966 ;; Tracked objects:
 15967 ;;		On entry : 0/0
 15968 ;;		On exit  : 0/0
 15969 ;;		Unchanged: 0/0
 15970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15972 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15973 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15974 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15975 ;;Total ram usage:       12 bytes
 15976 ;; Hardware stack levels used:    1
 15977 ;; Hardware stack levels required when called:   10
 15978 ;; This function calls:
 15979 ;;		_lcdInst
 15980 ;;		_printf
 15981 ;;		_readADC
 15982 ;;		_stopSignals
 15983 ;; This function is called by:
 15984 ;;		_Test
 15985 ;; This function uses a non-reentrant model
 15986 ;;
 15987                           
 15988                           	psect	text49
 15989  0030EE                     __ptext49:
 15990                           	opt stack 0
 15991  0030EE                     _PlatformTest:
 15992                           	opt stack 19
 15993                           
 15994                           ;Test.c: 475: LATCbits.LATC5 = 1;
 15995                           
 15996                           ;incstack = 0
 15997  0030EE  8A8B               	bsf	3979,5,c	;volatile
 15998                           
 15999                           ;Test.c: 477: (INTCONbits.GIE = 1);
 16000  0030F0  8EF2               	bsf	intcon,7,c	;volatile
 16001                           
 16002                           ;Test.c: 478: machine_state = Sorting_state;
 16003  0030F2  0E01               	movlw	1
 16004  0030F4  0100               	movlb	0	; () banked
 16005  0030F6  6FFC               	movwf	_machine_state& (0+255),b
 16006                           
 16007                           ;Test.c: 479: f_arm_position = 0;
 16008  0030F8  0E00               	movlw	0
 16009  0030FA  0100               	movlb	0	; () banked
 16010  0030FC  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 16011  0030FE  0E00               	movlw	0
 16012  003100  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 16013                           
 16014                           ;Test.c: 480: timer2_counter = 0;
 16015  003102  0E00               	movlw	0
 16016  003104  6E74               	movwf	_timer2_counter+1,c	;volatile
 16017  003106  0E00               	movlw	0
 16018  003108  6E73               	movwf	_timer2_counter,c	;volatile
 16019                           
 16020                           ; BSR set to: 0
 16021                           ;Test.c: 481: LATBbits.LATB3 = 0;
 16022  00310A  968A               	bcf	3978,3,c	;volatile
 16023                           
 16024                           ; BSR set to: 0
 16025                           ;Test.c: 482: TMR2IE = 1;
 16026  00310C  829D               	bsf	3997,1,c	;volatile
 16027                           
 16028                           ; BSR set to: 0
 16029                           ;Test.c: 483: TMR2ON = 1;
 16030  00310E  84CA               	bsf	4042,2,c	;volatile
 16031                           
 16032                           ;Test.c: 484: was_low_2 = 0;
 16033  003110  0E00               	movlw	0
 16034  003112  6E7A               	movwf	_was_low_2+1,c	;volatile
 16035  003114  0E00               	movlw	0
 16036  003116  6E79               	movwf	_was_low_2,c	;volatile
 16037                           
 16038                           ;Test.c: 486: int on = 1;
 16039  003118  0E00               	movlw	0
 16040  00311A  0100               	movlb	0	; () banked
 16041  00311C  6FB6               	movwf	(PlatformTest@on+1)& (0+255),b
 16042  00311E  0E01               	movlw	1
 16043  003120  6FB5               	movwf	PlatformTest@on& (0+255),b
 16044                           
 16045                           ; BSR set to: 0
 16046                           ;Test.c: 487: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16047  003122  0E01               	movlw	1
 16048  003124  EC6D  F030         	call	_lcdInst
 16049  003128  0E68               	movlw	104
 16050  00312A  0100               	movlb	0	; () banked
 16051  00312C  6FAB               	movwf	??_PlatformTest& (0+255),b
 16052  00312E  0EE4               	movlw	228
 16053  003130                     u12127:
 16054  003130  2EE8               	decfsz	wreg,f,c
 16055  003132  D7FE               	bra	u12127
 16056  003134  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16057  003136  D7FC               	bra	u12127
 16058  003138  F000               	nop	
 16059  00313A  0E80               	movlw	128
 16060  00313C  EC6D  F030         	call	_lcdInst
 16061                           
 16062                           ;Test.c: 488: printf("1: DC | A: ARM  ");
 16063  003140  0E2A               	movlw	low STR_114
 16064  003142  0100               	movlb	0	; () banked
 16065  003144  6F8E               	movwf	printf@f& (0+255),b
 16066  003146  0EFC               	movlw	high STR_114
 16067  003148  0100               	movlb	0	; () banked
 16068  00314A  6F8F               	movwf	(printf@f+1)& (0+255),b
 16069  00314C  ECE9  F00E         	call	_printf	;wreg free
 16070                           
 16071                           ;Test.c: 490: while(PORTBbits.RB1 == 0){
 16072  003150  D058               	goto	l9337
 16073  003152                     l9319:
 16074                           
 16075                           ;Test.c: 491: readADC(0);
 16076  003152  0E00               	movlw	0
 16077  003154  EC66  F02F         	call	_readADC
 16078                           
 16079                           ;Test.c: 492: int res = ADRESH<<8 | ADRESL;
 16080  003158  50C3               	movf	4035,w,c	;volatile
 16081  00315A  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 16082  00315E  0100               	movlb	0	; () banked
 16083  003160  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 16084  003162  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 16085  003166  0100               	movlb	0	; () banked
 16086  003168  6BAB               	clrf	??_PlatformTest& (0+255),b
 16087  00316A  0100               	movlb	0	; () banked
 16088  00316C  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 16089  00316E  0100               	movlb	0	; () banked
 16090  003170  6FAD               	movwf	PlatformTest@res& (0+255),b
 16091  003172  0100               	movlb	0	; () banked
 16092  003174  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 16093  003176  0100               	movlb	0	; () banked
 16094  003178  6FAE               	movwf	(PlatformTest@res+1)& (0+255),b
 16095                           
 16096                           ; BSR set to: 0
 16097                           ;Test.c: 493: IR_signal = (res > 800) ? 1 : 0;
 16098  00317A  0100               	movlb	0	; () banked
 16099  00317C  BFAE               	btfsc	(PlatformTest@res+1)& (0+255),7,b
 16100  00317E  D00A               	goto	u8900
 16101  003180  0E21               	movlw	33
 16102  003182  0100               	movlb	0	; () banked
 16103  003184  5DAD               	subwf	PlatformTest@res& (0+255),w,b
 16104  003186  0E03               	movlw	3
 16105  003188  0100               	movlb	0	; () banked
 16106  00318A  59AE               	subwfb	(PlatformTest@res+1)& (0+255),w,b
 16107  00318C  A0D8               	btfss	status,0,c
 16108  00318E  D002               	goto	u8900
 16109  003190  0E01               	movlw	1
 16110  003192  D001               	goto	u8910
 16111  003194                     u8900:
 16112  003194  0E00               	movlw	0
 16113  003196                     u8910:
 16114  003196  0100               	movlb	0	; () banked
 16115  003198  6FE2               	movwf	_IR_signal& (0+255),b
 16116  00319A  6BE3               	clrf	(_IR_signal+1)& (0+255),b
 16117                           
 16118                           ;Test.c: 495: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16119  00319C  0E01               	movlw	1
 16120  00319E  EC6D  F030         	call	_lcdInst
 16121  0031A2  0E68               	movlw	104
 16122  0031A4  0100               	movlb	0	; () banked
 16123  0031A6  6FAB               	movwf	??_PlatformTest& (0+255),b
 16124  0031A8  0EE4               	movlw	228
 16125  0031AA                     u12137:
 16126  0031AA  2EE8               	decfsz	wreg,f,c
 16127  0031AC  D7FE               	bra	u12137
 16128  0031AE  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16129  0031B0  D7FC               	bra	u12137
 16130  0031B2  F000               	nop	
 16131  0031B4  0E80               	movlw	128
 16132  0031B6  EC6D  F030         	call	_lcdInst
 16133                           
 16134                           ;Test.c: 496: printf("1: DC | A: ARM  ");
 16135  0031BA  0E2A               	movlw	low STR_114
 16136  0031BC  0100               	movlb	0	; () banked
 16137  0031BE  6F8E               	movwf	printf@f& (0+255),b
 16138  0031C0  0EFC               	movlw	high STR_114
 16139  0031C2  0100               	movlb	0	; () banked
 16140  0031C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 16141  0031C6  ECE9  F00E         	call	_printf	;wreg free
 16142                           
 16143                           ;Test.c: 497: lcdInst(0b11000000);;
 16144  0031CA  0EC0               	movlw	192
 16145  0031CC  EC6D  F030         	call	_lcdInst
 16146                           
 16147                           ;Test.c: 498: printf("5:H|6:L|IR:%d   ", res);
 16148  0031D0  0E19               	movlw	low STR_116
 16149  0031D2  0100               	movlb	0	; () banked
 16150  0031D4  6F8E               	movwf	printf@f& (0+255),b
 16151  0031D6  0EFC               	movlw	high STR_116
 16152  0031D8  0100               	movlb	0	; () banked
 16153  0031DA  6F8F               	movwf	(printf@f+1)& (0+255),b
 16154  0031DC  C0AD  F090         	movff	PlatformTest@res,?_printf+2
 16155  0031E0  C0AE  F091         	movff	PlatformTest@res+1,?_printf+3
 16156  0031E4  ECE9  F00E         	call	_printf	;wreg free
 16157                           
 16158                           ;Test.c: 499: _delay((unsigned long)((100)*(32000000/4000.0)));
 16159  0031E8  0E05               	movlw	5
 16160  0031EA  0100               	movlb	0	; () banked
 16161  0031EC  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 16162  0031EE  0E0F               	movlw	15
 16163  0031F0  0100               	movlb	0	; () banked
 16164  0031F2  6FAB               	movwf	??_PlatformTest& (0+255),b
 16165  0031F4  0EF1               	movlw	241
 16166  0031F6                     u12147:
 16167  0031F6  2EE8               	decfsz	wreg,f,c
 16168  0031F8  D7FE               	bra	u12147
 16169  0031FA  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16170  0031FC  D7FC               	bra	u12147
 16171  0031FE  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 16172  003200  D7FA               	bra	u12147
 16173  003202                     l9337:
 16174  003202  B281               	btfsc	3969,1,c	;volatile
 16175  003204  D059               	goto	l9357
 16176  003206  D7A5               	goto	l9319
 16177  003208                     l9339:
 16178                           
 16179                           ;Test.c: 504: readADC(0);
 16180  003208  0E00               	movlw	0
 16181  00320A  EC66  F02F         	call	_readADC
 16182                           
 16183                           ;Test.c: 505: int res = ADRESH<<8 | ADRESL;
 16184  00320E  50C3               	movf	4035,w,c	;volatile
 16185  003210  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 16186  003214  0100               	movlb	0	; () banked
 16187  003216  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 16188  003218  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 16189  00321C  0100               	movlb	0	; () banked
 16190  00321E  6BAB               	clrf	??_PlatformTest& (0+255),b
 16191  003220  0100               	movlb	0	; () banked
 16192  003222  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 16193  003224  0100               	movlb	0	; () banked
 16194  003226  6FAF               	movwf	PlatformTest@res_1808& (0+255),b
 16195  003228  0100               	movlb	0	; () banked
 16196  00322A  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 16197  00322C  0100               	movlb	0	; () banked
 16198  00322E  6FB0               	movwf	(PlatformTest@res_1808+1)& (0+255),b
 16199                           
 16200                           ; BSR set to: 0
 16201                           ;Test.c: 506: IR_signal = (res > 800) ? 1 : 0;
 16202  003230  0100               	movlb	0	; () banked
 16203  003232  BFB0               	btfsc	(PlatformTest@res_1808+1)& (0+255),7,b
 16204  003234  D00A               	goto	u8930
 16205  003236  0E21               	movlw	33
 16206  003238  0100               	movlb	0	; () banked
 16207  00323A  5DAF               	subwf	PlatformTest@res_1808& (0+255),w,b
 16208  00323C  0E03               	movlw	3
 16209  00323E  0100               	movlb	0	; () banked
 16210  003240  59B0               	subwfb	(PlatformTest@res_1808+1)& (0+255),w,b
 16211  003242  A0D8               	btfss	status,0,c
 16212  003244  D002               	goto	u8930
 16213  003246  0E01               	movlw	1
 16214  003248  D001               	goto	u8940
 16215  00324A                     u8930:
 16216  00324A  0E00               	movlw	0
 16217  00324C                     u8940:
 16218  00324C  0100               	movlb	0	; () banked
 16219  00324E  6FE2               	movwf	_IR_signal& (0+255),b
 16220  003250  6BE3               	clrf	(_IR_signal+1)& (0+255),b
 16221                           
 16222                           ;Test.c: 508: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16223  003252  0E01               	movlw	1
 16224  003254  EC6D  F030         	call	_lcdInst
 16225  003258  0E68               	movlw	104
 16226  00325A  0100               	movlb	0	; () banked
 16227  00325C  6FAB               	movwf	??_PlatformTest& (0+255),b
 16228  00325E  0EE4               	movlw	228
 16229  003260                     u12157:
 16230  003260  2EE8               	decfsz	wreg,f,c
 16231  003262  D7FE               	bra	u12157
 16232  003264  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16233  003266  D7FC               	bra	u12157
 16234  003268  F000               	nop	
 16235  00326A  0E80               	movlw	128
 16236  00326C  EC6D  F030         	call	_lcdInst
 16237                           
 16238                           ;Test.c: 509: printf("1: DC | A: ARM  ");
 16239  003270  0E2A               	movlw	low STR_114
 16240  003272  0100               	movlb	0	; () banked
 16241  003274  6F8E               	movwf	printf@f& (0+255),b
 16242  003276  0EFC               	movlw	high STR_114
 16243  003278  0100               	movlb	0	; () banked
 16244  00327A  6F8F               	movwf	(printf@f+1)& (0+255),b
 16245  00327C  ECE9  F00E         	call	_printf	;wreg free
 16246                           
 16247                           ;Test.c: 510: lcdInst(0b11000000);;
 16248  003280  0EC0               	movlw	192
 16249  003282  EC6D  F030         	call	_lcdInst
 16250                           
 16251                           ;Test.c: 511: printf("5:H|6:L|IR:%d   ", res);
 16252  003286  0E19               	movlw	low STR_116
 16253  003288  0100               	movlb	0	; () banked
 16254  00328A  6F8E               	movwf	printf@f& (0+255),b
 16255  00328C  0EFC               	movlw	high STR_116
 16256  00328E  0100               	movlb	0	; () banked
 16257  003290  6F8F               	movwf	(printf@f+1)& (0+255),b
 16258  003292  C0AF  F090         	movff	PlatformTest@res_1808,?_printf+2
 16259  003296  C0B0  F091         	movff	PlatformTest@res_1808+1,?_printf+3
 16260  00329A  ECE9  F00E         	call	_printf	;wreg free
 16261                           
 16262                           ;Test.c: 512: _delay((unsigned long)((100)*(32000000/4000.0)));
 16263  00329E  0E05               	movlw	5
 16264  0032A0  0100               	movlb	0	; () banked
 16265  0032A2  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 16266  0032A4  0E0F               	movlw	15
 16267  0032A6  0100               	movlb	0	; () banked
 16268  0032A8  6FAB               	movwf	??_PlatformTest& (0+255),b
 16269  0032AA  0EF1               	movlw	241
 16270  0032AC                     u12167:
 16271  0032AC  2EE8               	decfsz	wreg,f,c
 16272  0032AE  D7FE               	bra	u12167
 16273  0032B0  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 16274  0032B2  D7FC               	bra	u12167
 16275  0032B4  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 16276  0032B6  D7FA               	bra	u12167
 16277  0032B8                     l9357:
 16278  0032B8  A281               	btfss	3969,1,c	;volatile
 16279  0032BA  D7A6               	goto	l9339
 16280                           
 16281                           ;Test.c: 513: }
 16282                           ;Test.c: 514: if(PORTB >> 4 == 0b1111){
 16283  0032BC  3881               	swapf	3969,w,c	;volatile
 16284  0032BE  0B0F               	andlw	15
 16285  0032C0  0A0F               	xorlw	15
 16286  0032C2  B4D8               	btfsc	status,2,c
 16287  0032C4  D08F               	goto	l1467
 16288                           
 16289                           ;Test.c: 517: else if(PORTB >> 4 == 0b0000){
 16290                           
 16291                           ;Test.c: 516: }
 16292                           
 16293                           ;Test.c: 515: break;
 16294  0032C6  CF81 F0AB          	movff	3969,??_PlatformTest	;volatile
 16295  0032CA  0100               	movlb	0	; () banked
 16296  0032CC  3BAB               	swapf	??_PlatformTest& (0+255),f,b
 16297  0032CE  0E0F               	movlw	15
 16298  0032D0  17AB               	andwf	??_PlatformTest& (0+255),f,b
 16299  0032D2  A4D8               	btfss	status,2,c
 16300  0032D4  D012               	goto	l9369
 16301                           
 16302                           ; BSR set to: 0
 16303                           ;Test.c: 518: LATBbits.LATB2 = !LATBbits.LATB2;
 16304  0032D6  B48A               	btfsc	3978,2,c	;volatile
 16305  0032D8  D004               	goto	u8980
 16306  0032DA  0100               	movlb	0	; () banked
 16307  0032DC  6BAB               	clrf	??_PlatformTest& (0+255),b
 16308  0032DE  2BAB               	incf	??_PlatformTest& (0+255),f,b
 16309  0032E0  D002               	goto	u8998
 16310  0032E2                     u8980:
 16311  0032E2  0100               	movlb	0	; () banked
 16312  0032E4  6BAB               	clrf	??_PlatformTest& (0+255),b
 16313  0032E6                     u8998:
 16314  0032E6  0100               	movlb	0	; () banked
 16315  0032E8  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 16316  0032EA  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 16317  0032EC  508A               	movf	3978,w,c	;volatile
 16318  0032EE  0100               	movlb	0	; () banked
 16319  0032F0  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 16320  0032F2  0BFB               	andlw	-5
 16321  0032F4  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 16322  0032F6  6E8A               	movwf	3978,c	;volatile
 16323                           
 16324                           ;Test.c: 519: }
 16325  0032F8  D072               	goto	l1482
 16326  0032FA                     l9369:
 16327                           
 16328                           ; BSR set to: 0
 16329                           ;Test.c: 520: else if(PORTB >> 4 == 0b0011){
 16330  0032FA  3881               	swapf	3969,w,c	;volatile
 16331  0032FC  0B0F               	andlw	15
 16332  0032FE  0A03               	xorlw	3
 16333  003300  A4D8               	btfss	status,2,c
 16334  003302  D020               	goto	l9381
 16335                           
 16336                           ; BSR set to: 0
 16337                           ;Test.c: 521: if(on){
 16338  003304  0100               	movlb	0	; () banked
 16339  003306  51B5               	movf	PlatformTest@on& (0+255),w,b
 16340  003308  0100               	movlb	0	; () banked
 16341  00330A  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 16342  00330C  B4D8               	btfsc	status,2,c
 16343  00330E  D010               	goto	l9377
 16344                           
 16345                           ; BSR set to: 0
 16346                           ;Test.c: 522: f_arm_position = 1;
 16347  003310  0E00               	movlw	0
 16348  003312  0100               	movlb	0	; () banked
 16349  003314  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 16350  003316  0E01               	movlw	1
 16351  003318  D00F               	goto	L15
 16352  00331A                     l9375:
 16353                           
 16354                           ; BSR set to: 0
 16355                           ;Test.c: 523: on = !on;
 16356  00331A  0100               	movlb	0	; () banked
 16357  00331C  51B5               	movf	PlatformTest@on& (0+255),w,b
 16358  00331E  0100               	movlb	0	; () banked
 16359  003320  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 16360  003322  A4D8               	btfss	status,2,c
 16361  003324  D00D               	goto	u9040
 16362  003326  D00A               	goto	u9041
 16363  003328                     u9030:
 16364  003328  0100               	movlb	0	; () banked
 16365  00332A  6FB5               	movwf	PlatformTest@on& (0+255),b
 16366  00332C  6BB6               	clrf	(PlatformTest@on+1)& (0+255),b
 16367                           
 16368                           ;Test.c: 524: }
 16369  00332E  D057               	goto	l1482
 16370  003330                     l9377:
 16371                           
 16372                           ; BSR set to: 0
 16373                           ;Test.c: 525: else{
 16374                           ;Test.c: 526: f_arm_position = 0;
 16375  003330  0E00               	movlw	0
 16376  003332  0100               	movlb	0	; () banked
 16377  003334  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 16378  003336  0E00               	movlw	0
 16379  003338                     L15:
 16380  003338  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 16381  00333A  D7EF               	goto	l9375
 16382  00333C                     u9041:
 16383  00333C  0E01               	movlw	1
 16384  00333E  D7F4               	goto	u9030
 16385  003340                     u9040:
 16386  003340  0E00               	movlw	0
 16387  003342  D7F2               	goto	u9030
 16388  003344                     l9381:
 16389                           
 16390                           ; BSR set to: 0
 16391                           ;Test.c: 530: else if(PORTB >> 4 == 0b0101){
 16392  003344  3881               	swapf	3969,w,c	;volatile
 16393  003346  0B0F               	andlw	15
 16394  003348  0A05               	xorlw	5
 16395  00334A  A4D8               	btfss	status,2,c
 16396  00334C  D022               	goto	l9397
 16397                           
 16398                           ; BSR set to: 0
 16399                           ;Test.c: 532: (INTCONbits.GIE = 0);
 16400  00334E  9EF2               	bcf	intcon,7,c	;volatile
 16401                           
 16402                           ;Test.c: 533: TMR2IE = 0;
 16403  003350  929D               	bcf	3997,1,c	;volatile
 16404                           
 16405                           ; BSR set to: 0
 16406                           ;Test.c: 534: for(int i = 0; i<3000; i++){
 16407  003352  0E00               	movlw	0
 16408  003354  0100               	movlb	0	; () banked
 16409  003356  6FB2               	movwf	(PlatformTest@i+1)& (0+255),b
 16410  003358  0E00               	movlw	0
 16411  00335A  6FB1               	movwf	PlatformTest@i& (0+255),b
 16412  00335C                     l9387:
 16413                           
 16414                           ; BSR set to: 0
 16415  00335C  0100               	movlb	0	; () banked
 16416  00335E  BFB2               	btfsc	(PlatformTest@i+1)& (0+255),7,b
 16417  003360  D008               	goto	l1476
 16418  003362  0EB8               	movlw	184
 16419  003364  0100               	movlb	0	; () banked
 16420  003366  5DB1               	subwf	PlatformTest@i& (0+255),w,b
 16421  003368  0E0B               	movlw	11
 16422  00336A  0100               	movlb	0	; () banked
 16423  00336C  59B2               	subwfb	(PlatformTest@i+1)& (0+255),w,b
 16424  00336E  B0D8               	btfsc	status,0,c
 16425  003370  D00D               	goto	l1477
 16426  003372                     l1476:
 16427                           
 16428                           ; BSR set to: 0
 16429                           ;Test.c: 535: LATAbits.LATA4 = 1;
 16430  003372  8889               	bsf	3977,4,c	;volatile
 16431                           
 16432                           ; BSR set to: 0
 16433                           ;Test.c: 536: _delay((unsigned long)((75)*(32000000/4000000.0)));
 16434  003374  0EC8               	movlw	200
 16435  003376                     u12177:
 16436  003376  2EE8               	decfsz	wreg,f,c
 16437  003378  D7FE               	bra	u12177
 16438                           
 16439                           ;Test.c: 537: LATAbits.LATA4 = 0;
 16440  00337A  9889               	bcf	3977,4,c	;volatile
 16441                           
 16442                           ;Test.c: 538: _delay((unsigned long)((25)*(32000000/4000000.0)));
 16443  00337C  0E42               	movlw	66
 16444  00337E                     u12187:
 16445  00337E  2EE8               	decfsz	wreg,f,c
 16446  003380  D7FE               	bra	u12187
 16447  003382  D000               	nop2	
 16448  003384  0100               	movlb	0	; () banked
 16449  003386  4BB1               	infsnz	PlatformTest@i& (0+255),f,b
 16450  003388  2BB2               	incf	(PlatformTest@i+1)& (0+255),f,b
 16451  00338A  D7E8               	goto	l9387
 16452  00338C                     l1477:
 16453                           
 16454                           ; BSR set to: 0
 16455                           ;Test.c: 539: }
 16456                           ;Test.c: 540: TMR2IE = 1;
 16457  00338C  829D               	bsf	3997,1,c	;volatile
 16458                           
 16459                           ;Test.c: 541: (INTCONbits.GIE = 1);
 16460  00338E  8EF2               	bsf	intcon,7,c	;volatile
 16461                           
 16462                           ;Test.c: 542: }
 16463  003390  D026               	goto	l1482
 16464  003392                     l9397:
 16465                           
 16466                           ; BSR set to: 0
 16467                           ;Test.c: 543: else if (PORTB >> 4 == 0b0110){
 16468  003392  3881               	swapf	3969,w,c	;volatile
 16469  003394  0B0F               	andlw	15
 16470  003396  0A06               	xorlw	6
 16471  003398  A4D8               	btfss	status,2,c
 16472  00339A  D021               	goto	l1482
 16473                           
 16474                           ; BSR set to: 0
 16475                           ;Test.c: 545: (INTCONbits.GIE = 0);
 16476  00339C  9EF2               	bcf	intcon,7,c	;volatile
 16477                           
 16478                           ;Test.c: 546: TMR2IE = 0;
 16479  00339E  929D               	bcf	3997,1,c	;volatile
 16480                           
 16481                           ; BSR set to: 0
 16482                           ;Test.c: 547: for(int i = 0; i<3000; i++){
 16483  0033A0  0E00               	movlw	0
 16484  0033A2  0100               	movlb	0	; () banked
 16485  0033A4  6FB4               	movwf	(PlatformTest@i_1812+1)& (0+255),b
 16486  0033A6  0E00               	movlw	0
 16487  0033A8  6FB3               	movwf	PlatformTest@i_1812& (0+255),b
 16488  0033AA                     l9403:
 16489                           
 16490                           ; BSR set to: 0
 16491  0033AA  0100               	movlb	0	; () banked
 16492  0033AC  BFB4               	btfsc	(PlatformTest@i_1812+1)& (0+255),7,b
 16493  0033AE  D008               	goto	l1480
 16494  0033B0  0EB8               	movlw	184
 16495  0033B2  0100               	movlb	0	; () banked
 16496  0033B4  5DB3               	subwf	PlatformTest@i_1812& (0+255),w,b
 16497  0033B6  0E0B               	movlw	11
 16498  0033B8  0100               	movlb	0	; () banked
 16499  0033BA  59B4               	subwfb	(PlatformTest@i_1812+1)& (0+255),w,b
 16500  0033BC  B0D8               	btfsc	status,0,c
 16501  0033BE  D00D               	goto	l1481
 16502  0033C0                     l1480:
 16503                           
 16504                           ; BSR set to: 0
 16505                           ;Test.c: 548: LATAbits.LATA4 = 1;
 16506  0033C0  8889               	bsf	3977,4,c	;volatile
 16507                           
 16508                           ; BSR set to: 0
 16509                           ;Test.c: 549: _delay((unsigned long)((58)*(32000000/4000000.0)));
 16510  0033C2  0E9A               	movlw	154
 16511  0033C4                     u12197:
 16512  0033C4  2EE8               	decfsz	wreg,f,c
 16513  0033C6  D7FE               	bra	u12197
 16514  0033C8  D000               	nop2	
 16515                           
 16516                           ;Test.c: 550: LATAbits.LATA4 = 0;
 16517  0033CA  9889               	bcf	3977,4,c	;volatile
 16518                           
 16519                           ;Test.c: 551: _delay((unsigned long)((42)*(32000000/4000000.0)));
 16520  0033CC  0E70               	movlw	112
 16521  0033CE                     u12207:
 16522  0033CE  2EE8               	decfsz	wreg,f,c
 16523  0033D0  D7FE               	bra	u12207
 16524  0033D2  0100               	movlb	0	; () banked
 16525  0033D4  4BB3               	infsnz	PlatformTest@i_1812& (0+255),f,b
 16526  0033D6  2BB4               	incf	(PlatformTest@i_1812+1)& (0+255),f,b
 16527  0033D8  D7E8               	goto	l9403
 16528  0033DA                     l1481:
 16529                           
 16530                           ; BSR set to: 0
 16531                           ;Test.c: 552: }
 16532                           ;Test.c: 553: (INTCONbits.GIE = 1);
 16533  0033DA  8EF2               	bsf	intcon,7,c	;volatile
 16534                           
 16535                           ;Test.c: 554: TMR2IE = 1;
 16536  0033DC  829D               	bsf	3997,1,c	;volatile
 16537  0033DE                     l1482:
 16538  0033DE  A281               	btfss	3969,1,c	;volatile
 16539  0033E0  D76B               	goto	l9357
 16540  0033E2  D7FD               	goto	l1482
 16541  0033E4                     l1467:
 16542                           
 16543                           ;Test.c: 558: }
 16544                           ;Test.c: 560: LATCbits.LATC5 = 0;
 16545  0033E4  9A8B               	bcf	3979,5,c	;volatile
 16546                           
 16547                           ;Test.c: 561: stopSignals();
 16548  0033E6  EC22  F030         	call	_stopSignals	;wreg free
 16549                           
 16550                           ;Test.c: 562: machine_state = Testing_state;
 16551  0033EA  0E03               	movlw	3
 16552  0033EC  0100               	movlb	0	; () banked
 16553  0033EE  6FFC               	movwf	_machine_state& (0+255),b
 16554                           
 16555                           ; BSR set to: 0
 16556  0033F0  0012               	return		;funcret
 16557  0033F2                     __end_of_PlatformTest:
 16558                           	opt stack 0
 16559                           tblptru	equ	0xFF8
 16560                           tblptrh	equ	0xFF7
 16561                           tblptrl	equ	0xFF6
 16562                           tablat	equ	0xFF5
 16563                           prodh	equ	0xFF4
 16564                           prodl	equ	0xFF3
 16565                           intcon	equ	0xFF2
 16566                           intcon2	equ	0xFF1
 16567                           intcon3	equ	0xFF0
 16568                           postinc0	equ	0xFEE
 16569                           wreg	equ	0xFE8
 16570                           postdec1	equ	0xFE5
 16571                           fsr1l	equ	0xFE1
 16572                           indf2	equ	0xFDF
 16573                           postinc2	equ	0xFDE
 16574                           postdec2	equ	0xFDD
 16575                           fsr2h	equ	0xFDA
 16576                           fsr2l	equ	0xFD9
 16577                           status	equ	0xFD8
 16578                           
 16579 ;; *************** function _BothServos *****************
 16580 ;; Defined at:
 16581 ;;		line 379 in file "Test.c"
 16582 ;; Parameters:    Size  Location     Type
 16583 ;;		None
 16584 ;; Auto vars:     Size  Location     Type
 16585 ;;		None
 16586 ;; Return value:  Size  Location     Type
 16587 ;;                  1    wreg      void 
 16588 ;; Registers used:
 16589 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16590 ;; Tracked objects:
 16591 ;;		On entry : 0/0
 16592 ;;		On exit  : 0/0
 16593 ;;		Unchanged: 0/0
 16594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16597 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16598 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16599 ;;Total ram usage:        2 bytes
 16600 ;; Hardware stack levels used:    1
 16601 ;; Hardware stack levels required when called:   10
 16602 ;; This function calls:
 16603 ;;		_initServos
 16604 ;;		_lcdInst
 16605 ;;		_printf
 16606 ;;		_stopSignals
 16607 ;;		_updateServoPosition
 16608 ;; This function is called by:
 16609 ;;		_Test
 16610 ;; This function uses a non-reentrant model
 16611 ;;
 16612                           
 16613                           	psect	text50
 16614  00220A                     __ptext50:
 16615                           	opt stack 0
 16616  00220A                     _BothServos:
 16617                           	opt stack 19
 16618                           
 16619                           ;Test.c: 380: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16620                           
 16621                           ; BSR set to: 0
 16622                           ;incstack = 0
 16623  00220A  0E01               	movlw	1
 16624  00220C  EC6D  F030         	call	_lcdInst
 16625  002210  0E68               	movlw	104
 16626  002212  0100               	movlb	0	; () banked
 16627  002214  6FAB               	movwf	??_BothServos& (0+255),b
 16628  002216  0EE4               	movlw	228
 16629  002218                     u12217:
 16630  002218  2EE8               	decfsz	wreg,f,c
 16631  00221A  D7FE               	bra	u12217
 16632  00221C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16633  00221E  D7FC               	bra	u12217
 16634  002220  F000               	nop	
 16635  002222  0E80               	movlw	128
 16636  002224  EC6D  F030         	call	_lcdInst
 16637                           
 16638                           ;Test.c: 381: printf("TST: BOTH SERVOS");
 16639  002228  0EC3               	movlw	low STR_111
 16640  00222A  0100               	movlb	0	; () banked
 16641  00222C  6F8E               	movwf	printf@f& (0+255),b
 16642  00222E  0EFC               	movlw	high STR_111
 16643  002230  0100               	movlb	0	; () banked
 16644  002232  6F8F               	movwf	(printf@f+1)& (0+255),b
 16645  002234  ECE9  F00E         	call	_printf	;wreg free
 16646                           
 16647                           ;Test.c: 382: TMR1ON = 1;
 16648  002238  80CD               	bsf	4045,0,c	;volatile
 16649                           
 16650                           ;Test.c: 383: TMR3ON = 1;
 16651  00223A  80B1               	bsf	4017,0,c	;volatile
 16652                           
 16653                           ;Test.c: 384: machine_state = Sorting_state;
 16654  00223C  0E01               	movlw	1
 16655  00223E  0100               	movlb	0	; () banked
 16656  002240  6FFC               	movwf	_machine_state& (0+255),b
 16657                           
 16658                           ; BSR set to: 0
 16659                           ;Test.c: 385: was_low_1 = 0;
 16660  002242  0E00               	movlw	0
 16661  002244  6E78               	movwf	_was_low_1+1,c	;volatile
 16662  002246  0E00               	movlw	0
 16663  002248  6E77               	movwf	_was_low_1,c	;volatile
 16664                           
 16665                           ; BSR set to: 0
 16666                           ;Test.c: 386: was_low_3 = 0;
 16667  00224A  0E00               	movlw	0
 16668  00224C  6E7C               	movwf	_was_low_3+1,c	;volatile
 16669  00224E  0E00               	movlw	0
 16670  002250  6E7B               	movwf	_was_low_3,c	;volatile
 16671                           
 16672                           ; BSR set to: 0
 16673                           ;Test.c: 392: initServos();
 16674  002252  EC33  F02A         	call	_initServos	;wreg free
 16675                           
 16676                           ;Test.c: 393: _delay((unsigned long)((1500)*(32000000/4000.0)));
 16677  002256  0E3D               	movlw	61
 16678  002258  0100               	movlb	0	; () banked
 16679  00225A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16680  00225C  0EE1               	movlw	225
 16681  00225E  0100               	movlb	0	; () banked
 16682  002260  6FAB               	movwf	??_BothServos& (0+255),b
 16683  002262  0E3F               	movlw	63
 16684  002264                     u12227:
 16685  002264  2EE8               	decfsz	wreg,f,c
 16686  002266  D7FE               	bra	u12227
 16687  002268  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16688  00226A  D7FC               	bra	u12227
 16689  00226C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16690  00226E  D7FA               	bra	u12227
 16691  002270  D000               	nop2	
 16692                           
 16693                           ;Test.c: 395: updateServoPosition(400, 1);
 16694  002272  0E01               	movlw	1
 16695  002274  0100               	movlb	0	; () banked
 16696  002276  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16697  002278  0E90               	movlw	144
 16698  00227A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16699  00227C  0E00               	movlw	0
 16700  00227E  0100               	movlb	0	; () banked
 16701  002280  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16702  002282  0E01               	movlw	1
 16703  002284  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16704  002286  ECF4  F029         	call	_updateServoPosition	;wreg free
 16705                           
 16706                           ;Test.c: 396: updateServoPosition(1050, 3);
 16707  00228A  0E04               	movlw	4
 16708  00228C  0100               	movlb	0	; () banked
 16709  00228E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16710  002290  0E1A               	movlw	26
 16711  002292  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16712  002294  0E00               	movlw	0
 16713  002296  0100               	movlb	0	; () banked
 16714  002298  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16715  00229A  0E03               	movlw	3
 16716  00229C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16717  00229E  ECF4  F029         	call	_updateServoPosition	;wreg free
 16718                           
 16719                           ;Test.c: 397: _delay((unsigned long)((750)*(32000000/4000.0)));
 16720  0022A2  0E1F               	movlw	31
 16721  0022A4  0100               	movlb	0	; () banked
 16722  0022A6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16723  0022A8  0E71               	movlw	113
 16724  0022AA  0100               	movlb	0	; () banked
 16725  0022AC  6FAB               	movwf	??_BothServos& (0+255),b
 16726  0022AE  0E1E               	movlw	30
 16727  0022B0                     u12237:
 16728  0022B0  2EE8               	decfsz	wreg,f,c
 16729  0022B2  D7FE               	bra	u12237
 16730  0022B4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16731  0022B6  D7FC               	bra	u12237
 16732  0022B8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16733  0022BA  D7FA               	bra	u12237
 16734  0022BC  F000               	nop	
 16735                           
 16736                           ;Test.c: 398: updateServoPosition(1260, 3);
 16737  0022BE  0E04               	movlw	4
 16738  0022C0  0100               	movlb	0	; () banked
 16739  0022C2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16740  0022C4  0EEC               	movlw	236
 16741  0022C6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16742  0022C8  0E00               	movlw	0
 16743  0022CA  0100               	movlb	0	; () banked
 16744  0022CC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16745  0022CE  0E03               	movlw	3
 16746  0022D0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16747  0022D2  ECF4  F029         	call	_updateServoPosition	;wreg free
 16748                           
 16749                           ;Test.c: 399: _delay((unsigned long)((700)*(32000000/4000.0)));
 16750  0022D6  0E1D               	movlw	29
 16751  0022D8  0100               	movlb	0	; () banked
 16752  0022DA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16753  0022DC  0E69               	movlw	105
 16754  0022DE  0100               	movlb	0	; () banked
 16755  0022E0  6FAB               	movwf	??_BothServos& (0+255),b
 16756  0022E2  0EA5               	movlw	165
 16757  0022E4                     u12247:
 16758  0022E4  2EE8               	decfsz	wreg,f,c
 16759  0022E6  D7FE               	bra	u12247
 16760  0022E8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16761  0022EA  D7FC               	bra	u12247
 16762  0022EC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16763  0022EE  D7FA               	bra	u12247
 16764                           
 16765                           ;Test.c: 400: updateServoPosition(1050, 3);
 16766  0022F0  0E04               	movlw	4
 16767  0022F2  0100               	movlb	0	; () banked
 16768  0022F4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16769  0022F6  0E1A               	movlw	26
 16770  0022F8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16771  0022FA  0E00               	movlw	0
 16772  0022FC  0100               	movlb	0	; () banked
 16773  0022FE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16774  002300  0E03               	movlw	3
 16775  002302  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16776  002304  ECF4  F029         	call	_updateServoPosition	;wreg free
 16777                           
 16778                           ;Test.c: 401: _delay((unsigned long)((750)*(32000000/4000.0)));
 16779  002308  0E1F               	movlw	31
 16780  00230A  0100               	movlb	0	; () banked
 16781  00230C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16782  00230E  0E71               	movlw	113
 16783  002310  0100               	movlb	0	; () banked
 16784  002312  6FAB               	movwf	??_BothServos& (0+255),b
 16785  002314  0E1E               	movlw	30
 16786  002316                     u12257:
 16787  002316  2EE8               	decfsz	wreg,f,c
 16788  002318  D7FE               	bra	u12257
 16789  00231A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16790  00231C  D7FC               	bra	u12257
 16791  00231E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16792  002320  D7FA               	bra	u12257
 16793  002322  F000               	nop	
 16794                           
 16795                           ;Test.c: 403: updateServoPosition(850, 1);
 16796  002324  0E03               	movlw	3
 16797  002326  0100               	movlb	0	; () banked
 16798  002328  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16799  00232A  0E52               	movlw	82
 16800  00232C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16801  00232E  0E00               	movlw	0
 16802  002330  0100               	movlb	0	; () banked
 16803  002332  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16804  002334  0E01               	movlw	1
 16805  002336  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16806  002338  ECF4  F029         	call	_updateServoPosition	;wreg free
 16807                           
 16808                           ;Test.c: 404: updateServoPosition(1050, 3);
 16809  00233C  0E04               	movlw	4
 16810  00233E  0100               	movlb	0	; () banked
 16811  002340  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16812  002342  0E1A               	movlw	26
 16813  002344  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16814  002346  0E00               	movlw	0
 16815  002348  0100               	movlb	0	; () banked
 16816  00234A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16817  00234C  0E03               	movlw	3
 16818  00234E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16819  002350  ECF4  F029         	call	_updateServoPosition	;wreg free
 16820                           
 16821                           ;Test.c: 405: _delay((unsigned long)((750)*(32000000/4000.0)));
 16822  002354  0E1F               	movlw	31
 16823  002356  0100               	movlb	0	; () banked
 16824  002358  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16825  00235A  0E71               	movlw	113
 16826  00235C  0100               	movlb	0	; () banked
 16827  00235E  6FAB               	movwf	??_BothServos& (0+255),b
 16828  002360  0E1E               	movlw	30
 16829  002362                     u12267:
 16830  002362  2EE8               	decfsz	wreg,f,c
 16831  002364  D7FE               	bra	u12267
 16832  002366  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16833  002368  D7FC               	bra	u12267
 16834  00236A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16835  00236C  D7FA               	bra	u12267
 16836  00236E  F000               	nop	
 16837                           
 16838                           ;Test.c: 406: updateServoPosition(1260, 3);
 16839  002370  0E04               	movlw	4
 16840  002372  0100               	movlb	0	; () banked
 16841  002374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16842  002376  0EEC               	movlw	236
 16843  002378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16844  00237A  0E00               	movlw	0
 16845  00237C  0100               	movlb	0	; () banked
 16846  00237E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16847  002380  0E03               	movlw	3
 16848  002382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16849  002384  ECF4  F029         	call	_updateServoPosition	;wreg free
 16850                           
 16851                           ;Test.c: 407: _delay((unsigned long)((700)*(32000000/4000.0)));
 16852  002388  0E1D               	movlw	29
 16853  00238A  0100               	movlb	0	; () banked
 16854  00238C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16855  00238E  0E69               	movlw	105
 16856  002390  0100               	movlb	0	; () banked
 16857  002392  6FAB               	movwf	??_BothServos& (0+255),b
 16858  002394  0EA5               	movlw	165
 16859  002396                     u12277:
 16860  002396  2EE8               	decfsz	wreg,f,c
 16861  002398  D7FE               	bra	u12277
 16862  00239A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16863  00239C  D7FC               	bra	u12277
 16864  00239E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16865  0023A0  D7FA               	bra	u12277
 16866                           
 16867                           ;Test.c: 408: updateServoPosition(1050, 3);
 16868  0023A2  0E04               	movlw	4
 16869  0023A4  0100               	movlb	0	; () banked
 16870  0023A6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16871  0023A8  0E1A               	movlw	26
 16872  0023AA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16873  0023AC  0E00               	movlw	0
 16874  0023AE  0100               	movlb	0	; () banked
 16875  0023B0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16876  0023B2  0E03               	movlw	3
 16877  0023B4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16878  0023B6  ECF4  F029         	call	_updateServoPosition	;wreg free
 16879                           
 16880                           ;Test.c: 409: _delay((unsigned long)((750)*(32000000/4000.0)));
 16881  0023BA  0E1F               	movlw	31
 16882  0023BC  0100               	movlb	0	; () banked
 16883  0023BE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16884  0023C0  0E71               	movlw	113
 16885  0023C2  0100               	movlb	0	; () banked
 16886  0023C4  6FAB               	movwf	??_BothServos& (0+255),b
 16887  0023C6  0E1E               	movlw	30
 16888  0023C8                     u12287:
 16889  0023C8  2EE8               	decfsz	wreg,f,c
 16890  0023CA  D7FE               	bra	u12287
 16891  0023CC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16892  0023CE  D7FC               	bra	u12287
 16893  0023D0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16894  0023D2  D7FA               	bra	u12287
 16895  0023D4  F000               	nop	
 16896                           
 16897                           ;Test.c: 411: updateServoPosition(400, 1);
 16898  0023D6  0E01               	movlw	1
 16899  0023D8  0100               	movlb	0	; () banked
 16900  0023DA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16901  0023DC  0E90               	movlw	144
 16902  0023DE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16903  0023E0  0E00               	movlw	0
 16904  0023E2  0100               	movlb	0	; () banked
 16905  0023E4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16906  0023E6  0E01               	movlw	1
 16907  0023E8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16908  0023EA  ECF4  F029         	call	_updateServoPosition	;wreg free
 16909                           
 16910                           ;Test.c: 412: updateServoPosition(1050, 3);
 16911  0023EE  0E04               	movlw	4
 16912  0023F0  0100               	movlb	0	; () banked
 16913  0023F2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16914  0023F4  0E1A               	movlw	26
 16915  0023F6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16916  0023F8  0E00               	movlw	0
 16917  0023FA  0100               	movlb	0	; () banked
 16918  0023FC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16919  0023FE  0E03               	movlw	3
 16920  002400  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16921  002402  ECF4  F029         	call	_updateServoPosition	;wreg free
 16922                           
 16923                           ;Test.c: 413: _delay((unsigned long)((750)*(32000000/4000.0)));
 16924  002406  0E1F               	movlw	31
 16925  002408  0100               	movlb	0	; () banked
 16926  00240A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16927  00240C  0E71               	movlw	113
 16928  00240E  0100               	movlb	0	; () banked
 16929  002410  6FAB               	movwf	??_BothServos& (0+255),b
 16930  002412  0E1E               	movlw	30
 16931  002414                     u12297:
 16932  002414  2EE8               	decfsz	wreg,f,c
 16933  002416  D7FE               	bra	u12297
 16934  002418  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16935  00241A  D7FC               	bra	u12297
 16936  00241C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16937  00241E  D7FA               	bra	u12297
 16938  002420  F000               	nop	
 16939                           
 16940                           ;Test.c: 414: updateServoPosition(1260, 3);
 16941  002422  0E04               	movlw	4
 16942  002424  0100               	movlb	0	; () banked
 16943  002426  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16944  002428  0EEC               	movlw	236
 16945  00242A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16946  00242C  0E00               	movlw	0
 16947  00242E  0100               	movlb	0	; () banked
 16948  002430  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16949  002432  0E03               	movlw	3
 16950  002434  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16951  002436  ECF4  F029         	call	_updateServoPosition	;wreg free
 16952                           
 16953                           ;Test.c: 415: _delay((unsigned long)((700)*(32000000/4000.0)));
 16954  00243A  0E1D               	movlw	29
 16955  00243C  0100               	movlb	0	; () banked
 16956  00243E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16957  002440  0E69               	movlw	105
 16958  002442  0100               	movlb	0	; () banked
 16959  002444  6FAB               	movwf	??_BothServos& (0+255),b
 16960  002446  0EA5               	movlw	165
 16961  002448                     u12307:
 16962  002448  2EE8               	decfsz	wreg,f,c
 16963  00244A  D7FE               	bra	u12307
 16964  00244C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16965  00244E  D7FC               	bra	u12307
 16966  002450  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16967  002452  D7FA               	bra	u12307
 16968                           
 16969                           ;Test.c: 416: updateServoPosition(1050, 3);
 16970  002454  0E04               	movlw	4
 16971  002456  0100               	movlb	0	; () banked
 16972  002458  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16973  00245A  0E1A               	movlw	26
 16974  00245C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16975  00245E  0E00               	movlw	0
 16976  002460  0100               	movlb	0	; () banked
 16977  002462  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16978  002464  0E03               	movlw	3
 16979  002466  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16980  002468  ECF4  F029         	call	_updateServoPosition	;wreg free
 16981                           
 16982                           ;Test.c: 417: _delay((unsigned long)((1500)*(32000000/4000.0)));
 16983  00246C  0E3D               	movlw	61
 16984  00246E  0100               	movlb	0	; () banked
 16985  002470  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16986  002472  0EE1               	movlw	225
 16987  002474  0100               	movlb	0	; () banked
 16988  002476  6FAB               	movwf	??_BothServos& (0+255),b
 16989  002478  0E3F               	movlw	63
 16990  00247A                     u12317:
 16991  00247A  2EE8               	decfsz	wreg,f,c
 16992  00247C  D7FE               	bra	u12317
 16993  00247E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16994  002480  D7FC               	bra	u12317
 16995  002482  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16996  002484  D7FA               	bra	u12317
 16997  002486  D000               	nop2	
 16998                           
 16999                           ;Test.c: 419: updateServoPosition(1550, 1);
 17000  002488  0E06               	movlw	6
 17001  00248A  0100               	movlb	0	; () banked
 17002  00248C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17003  00248E  0E0E               	movlw	14
 17004  002490  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17005  002492  0E00               	movlw	0
 17006  002494  0100               	movlb	0	; () banked
 17007  002496  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17008  002498  0E01               	movlw	1
 17009  00249A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17010  00249C  ECF4  F029         	call	_updateServoPosition	;wreg free
 17011                           
 17012                           ;Test.c: 420: updateServoPosition(1050, 3);
 17013  0024A0  0E04               	movlw	4
 17014  0024A2  0100               	movlb	0	; () banked
 17015  0024A4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17016  0024A6  0E1A               	movlw	26
 17017  0024A8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17018  0024AA  0E00               	movlw	0
 17019  0024AC  0100               	movlb	0	; () banked
 17020  0024AE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17021  0024B0  0E03               	movlw	3
 17022  0024B2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17023  0024B4  ECF4  F029         	call	_updateServoPosition	;wreg free
 17024                           
 17025                           ;Test.c: 421: _delay((unsigned long)((750)*(32000000/4000.0)));
 17026  0024B8  0E1F               	movlw	31
 17027  0024BA  0100               	movlb	0	; () banked
 17028  0024BC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 17029  0024BE  0E71               	movlw	113
 17030  0024C0  0100               	movlb	0	; () banked
 17031  0024C2  6FAB               	movwf	??_BothServos& (0+255),b
 17032  0024C4  0E1E               	movlw	30
 17033  0024C6                     u12327:
 17034  0024C6  2EE8               	decfsz	wreg,f,c
 17035  0024C8  D7FE               	bra	u12327
 17036  0024CA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 17037  0024CC  D7FC               	bra	u12327
 17038  0024CE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 17039  0024D0  D7FA               	bra	u12327
 17040  0024D2  F000               	nop	
 17041                           
 17042                           ;Test.c: 422: updateServoPosition(1390, 3);
 17043  0024D4  0E05               	movlw	5
 17044  0024D6  0100               	movlb	0	; () banked
 17045  0024D8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17046  0024DA  0E6E               	movlw	110
 17047  0024DC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17048  0024DE  0E00               	movlw	0
 17049  0024E0  0100               	movlb	0	; () banked
 17050  0024E2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17051  0024E4  0E03               	movlw	3
 17052  0024E6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17053  0024E8  ECF4  F029         	call	_updateServoPosition	;wreg free
 17054                           
 17055                           ;Test.c: 423: _delay((unsigned long)((700)*(32000000/4000.0)));
 17056  0024EC  0E1D               	movlw	29
 17057  0024EE  0100               	movlb	0	; () banked
 17058  0024F0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 17059  0024F2  0E69               	movlw	105
 17060  0024F4  0100               	movlb	0	; () banked
 17061  0024F6  6FAB               	movwf	??_BothServos& (0+255),b
 17062  0024F8  0EA5               	movlw	165
 17063  0024FA                     u12337:
 17064  0024FA  2EE8               	decfsz	wreg,f,c
 17065  0024FC  D7FE               	bra	u12337
 17066  0024FE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 17067  002500  D7FC               	bra	u12337
 17068  002502  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 17069  002504  D7FA               	bra	u12337
 17070                           
 17071                           ;Test.c: 424: updateServoPosition(1050, 3);
 17072  002506  0E04               	movlw	4
 17073  002508  0100               	movlb	0	; () banked
 17074  00250A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17075  00250C  0E1A               	movlw	26
 17076  00250E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17077  002510  0E00               	movlw	0
 17078  002512  0100               	movlb	0	; () banked
 17079  002514  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17080  002516  0E03               	movlw	3
 17081  002518  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17082  00251A  ECF4  F029         	call	_updateServoPosition	;wreg free
 17083                           
 17084                           ;Test.c: 425: _delay((unsigned long)((750)*(32000000/4000.0)));
 17085  00251E  0E1F               	movlw	31
 17086  002520  0100               	movlb	0	; () banked
 17087  002522  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 17088  002524  0E71               	movlw	113
 17089  002526  0100               	movlb	0	; () banked
 17090  002528  6FAB               	movwf	??_BothServos& (0+255),b
 17091  00252A  0E1E               	movlw	30
 17092  00252C                     u12347:
 17093  00252C  2EE8               	decfsz	wreg,f,c
 17094  00252E  D7FE               	bra	u12347
 17095  002530  2FAB               	decfsz	??_BothServos& (0+255),f,b
 17096  002532  D7FC               	bra	u12347
 17097  002534  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 17098  002536  D7FA               	bra	u12347
 17099  002538  F000               	nop	
 17100                           
 17101                           ;Test.c: 427: updateServoPosition(2500, 1);
 17102  00253A  0E09               	movlw	9
 17103  00253C  0100               	movlb	0	; () banked
 17104  00253E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17105  002540  0EC4               	movlw	196
 17106  002542  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17107  002544  0E00               	movlw	0
 17108  002546  0100               	movlb	0	; () banked
 17109  002548  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17110  00254A  0E01               	movlw	1
 17111  00254C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17112  00254E  ECF4  F029         	call	_updateServoPosition	;wreg free
 17113                           
 17114                           ;Test.c: 428: updateServoPosition(1050, 3);
 17115  002552  0E04               	movlw	4
 17116  002554  0100               	movlb	0	; () banked
 17117  002556  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17118  002558  0E1A               	movlw	26
 17119  00255A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17120  00255C  0E00               	movlw	0
 17121  00255E  0100               	movlb	0	; () banked
 17122  002560  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17123  002562  0E03               	movlw	3
 17124  002564  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17125  002566  ECF4  F029         	call	_updateServoPosition	;wreg free
 17126                           
 17127                           ;Test.c: 429: _delay((unsigned long)((750)*(32000000/4000.0)));
 17128  00256A  0E1F               	movlw	31
 17129  00256C  0100               	movlb	0	; () banked
 17130  00256E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 17131  002570  0E71               	movlw	113
 17132  002572  0100               	movlb	0	; () banked
 17133  002574  6FAB               	movwf	??_BothServos& (0+255),b
 17134  002576  0E1E               	movlw	30
 17135  002578                     u12357:
 17136  002578  2EE8               	decfsz	wreg,f,c
 17137  00257A  D7FE               	bra	u12357
 17138  00257C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 17139  00257E  D7FC               	bra	u12357
 17140  002580  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 17141  002582  D7FA               	bra	u12357
 17142  002584  F000               	nop	
 17143                           
 17144                           ;Test.c: 430: updateServoPosition(1390, 3);
 17145  002586  0E05               	movlw	5
 17146  002588  0100               	movlb	0	; () banked
 17147  00258A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17148  00258C  0E6E               	movlw	110
 17149  00258E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17150  002590  0E00               	movlw	0
 17151  002592  0100               	movlb	0	; () banked
 17152  002594  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17153  002596  0E03               	movlw	3
 17154  002598  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17155  00259A  ECF4  F029         	call	_updateServoPosition	;wreg free
 17156                           
 17157                           ;Test.c: 431: _delay((unsigned long)((700)*(32000000/4000.0)));
 17158  00259E  0E1D               	movlw	29
 17159  0025A0  0100               	movlb	0	; () banked
 17160  0025A2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 17161  0025A4  0E69               	movlw	105
 17162  0025A6  0100               	movlb	0	; () banked
 17163  0025A8  6FAB               	movwf	??_BothServos& (0+255),b
 17164  0025AA  0EA5               	movlw	165
 17165  0025AC                     u12367:
 17166  0025AC  2EE8               	decfsz	wreg,f,c
 17167  0025AE  D7FE               	bra	u12367
 17168  0025B0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 17169  0025B2  D7FC               	bra	u12367
 17170  0025B4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 17171  0025B6  D7FA               	bra	u12367
 17172                           
 17173                           ;Test.c: 432: updateServoPosition(1050, 3);
 17174  0025B8  0E04               	movlw	4
 17175  0025BA  0100               	movlb	0	; () banked
 17176  0025BC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17177  0025BE  0E1A               	movlw	26
 17178  0025C0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17179  0025C2  0E00               	movlw	0
 17180  0025C4  0100               	movlb	0	; () banked
 17181  0025C6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17182  0025C8  0E03               	movlw	3
 17183  0025CA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17184  0025CC  ECF4  F029         	call	_updateServoPosition	;wreg free
 17185                           
 17186                           ;Test.c: 433: _delay((unsigned long)((750)*(32000000/4000.0)));
 17187  0025D0  0E1F               	movlw	31
 17188  0025D2  0100               	movlb	0	; () banked
 17189  0025D4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 17190  0025D6  0E71               	movlw	113
 17191  0025D8  0100               	movlb	0	; () banked
 17192  0025DA  6FAB               	movwf	??_BothServos& (0+255),b
 17193  0025DC  0E1E               	movlw	30
 17194  0025DE                     u12377:
 17195  0025DE  2EE8               	decfsz	wreg,f,c
 17196  0025E0  D7FE               	bra	u12377
 17197  0025E2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 17198  0025E4  D7FC               	bra	u12377
 17199  0025E6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 17200  0025E8  D7FA               	bra	u12377
 17201  0025EA  F000               	nop	
 17202                           
 17203                           ;Test.c: 435: stopSignals();
 17204  0025EC  EC22  F030         	call	_stopSignals	;wreg free
 17205                           
 17206                           ;Test.c: 436: machine_state = Testing_state;
 17207  0025F0  0E03               	movlw	3
 17208  0025F2  0100               	movlb	0	; () banked
 17209  0025F4  6FFC               	movwf	_machine_state& (0+255),b
 17210                           
 17211                           ; BSR set to: 0
 17212  0025F6  0012               	return		;funcret
 17213  0025F8                     __end_of_BothServos:
 17214                           	opt stack 0
 17215                           tblptru	equ	0xFF8
 17216                           tblptrh	equ	0xFF7
 17217                           tblptrl	equ	0xFF6
 17218                           tablat	equ	0xFF5
 17219                           prodh	equ	0xFF4
 17220                           prodl	equ	0xFF3
 17221                           intcon	equ	0xFF2
 17222                           intcon2	equ	0xFF1
 17223                           intcon3	equ	0xFF0
 17224                           postinc0	equ	0xFEE
 17225                           wreg	equ	0xFE8
 17226                           postdec1	equ	0xFE5
 17227                           fsr1l	equ	0xFE1
 17228                           indf2	equ	0xFDF
 17229                           postinc2	equ	0xFDE
 17230                           postdec2	equ	0xFDD
 17231                           fsr2h	equ	0xFDA
 17232                           fsr2l	equ	0xFD9
 17233                           status	equ	0xFD8
 17234                           
 17235 ;; *************** function _stopSignals *****************
 17236 ;; Defined at:
 17237 ;;		line 71 in file "main.c"
 17238 ;; Parameters:    Size  Location     Type
 17239 ;;		None
 17240 ;; Auto vars:     Size  Location     Type
 17241 ;;		None
 17242 ;; Return value:  Size  Location     Type
 17243 ;;                  1    wreg      void 
 17244 ;; Registers used:
 17245 ;;		wreg, status,2
 17246 ;; Tracked objects:
 17247 ;;		On entry : 0/0
 17248 ;;		On exit  : 0/0
 17249 ;;		Unchanged: 0/0
 17250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17254 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17255 ;;Total ram usage:        0 bytes
 17256 ;; Hardware stack levels used:    1
 17257 ;; Hardware stack levels required when called:    7
 17258 ;; This function calls:
 17259 ;;		Nothing
 17260 ;; This function is called by:
 17261 ;;		_main
 17262 ;;		_BothServos
 17263 ;;		_PlatformTest
 17264 ;;		_arm
 17265 ;; This function uses a non-reentrant model
 17266 ;;
 17267                           
 17268                           	psect	text51
 17269  006044                     __ptext51:
 17270                           	opt stack 0
 17271  006044                     _stopSignals:
 17272                           	opt stack 23
 17273                           
 17274                           ;main.c: 72: LATA = 0x00;
 17275                           
 17276                           ; BSR set to: 0
 17277                           ;incstack = 0
 17278  006044  0E00               	movlw	0
 17279  006046  6E89               	movwf	3977,c	;volatile
 17280                           
 17281                           ;main.c: 73: LATB = 0x00;
 17282  006048  0E00               	movlw	0
 17283  00604A  6E8A               	movwf	3978,c	;volatile
 17284                           
 17285                           ;main.c: 74: LATC = 0x00;
 17286  00604C  0E00               	movlw	0
 17287  00604E  6E8B               	movwf	3979,c	;volatile
 17288                           
 17289                           ;main.c: 75: LATD = 0x00;
 17290  006050  0E00               	movlw	0
 17291  006052  6E8C               	movwf	3980,c	;volatile
 17292                           
 17293                           ;main.c: 76: LATE = 0x00;
 17294  006054  0E00               	movlw	0
 17295  006056  6E8D               	movwf	3981,c	;volatile
 17296                           
 17297                           ;main.c: 77: TMR1IE = 0;
 17298  006058  909D               	bcf	3997,0,c	;volatile
 17299                           
 17300                           ;main.c: 78: TMR2IE = 0;
 17301  00605A  929D               	bcf	3997,1,c	;volatile
 17302                           
 17303                           ;main.c: 79: TMR3IE = 0;
 17304  00605C  92A0               	bcf	4000,1,c	;volatile
 17305  00605E  0012               	return		;funcret
 17306  006060                     __end_of_stopSignals:
 17307                           	opt stack 0
 17308                           tblptru	equ	0xFF8
 17309                           tblptrh	equ	0xFF7
 17310                           tblptrl	equ	0xFF6
 17311                           tablat	equ	0xFF5
 17312                           prodh	equ	0xFF4
 17313                           prodl	equ	0xFF3
 17314                           intcon	equ	0xFF2
 17315                           intcon2	equ	0xFF1
 17316                           intcon3	equ	0xFF0
 17317                           postinc0	equ	0xFEE
 17318                           wreg	equ	0xFE8
 17319                           postdec1	equ	0xFE5
 17320                           fsr1l	equ	0xFE1
 17321                           indf2	equ	0xFDF
 17322                           postinc2	equ	0xFDE
 17323                           postdec2	equ	0xFDD
 17324                           fsr2h	equ	0xFDA
 17325                           fsr2l	equ	0xFD9
 17326                           status	equ	0xFD8
 17327                           
 17328 ;; *************** function _initServos *****************
 17329 ;; Defined at:
 17330 ;;		line 524 in file "sort.c"
 17331 ;; Parameters:    Size  Location     Type
 17332 ;;		None
 17333 ;; Auto vars:     Size  Location     Type
 17334 ;;		None
 17335 ;; Return value:  Size  Location     Type
 17336 ;;                  1    wreg      void 
 17337 ;; Registers used:
 17338 ;;		wreg, status,2, status,0, cstack
 17339 ;; Tracked objects:
 17340 ;;		On entry : 0/0
 17341 ;;		On exit  : 0/0
 17342 ;;		Unchanged: 0/0
 17343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17346 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17347 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17348 ;;Total ram usage:        1 bytes
 17349 ;; Hardware stack levels used:    1
 17350 ;; Hardware stack levels required when called:    8
 17351 ;; This function calls:
 17352 ;;		_updateServoPosition
 17353 ;; This function is called by:
 17354 ;;		_Loading
 17355 ;;		_BothServos
 17356 ;; This function uses a non-reentrant model
 17357 ;;
 17358                           
 17359                           	psect	text52
 17360  005466                     __ptext52:
 17361                           	opt stack 0
 17362  005466                     _initServos:
 17363                           	opt stack 20
 17364                           
 17365                           ;sort.c: 526: updateServoPosition(1200, 1);
 17366                           
 17367                           ;incstack = 0
 17368  005466  0E04               	movlw	4
 17369  005468  0100               	movlb	0	; () banked
 17370  00546A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17371  00546C  0EB0               	movlw	176
 17372  00546E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17373  005470  0E00               	movlw	0
 17374  005472  0100               	movlb	0	; () banked
 17375  005474  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17376  005476  0E01               	movlw	1
 17377  005478  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17378  00547A  ECF4  F029         	call	_updateServoPosition	;wreg free
 17379                           
 17380                           ;sort.c: 527: updateServoPosition(1050, 3);
 17381  00547E  0E04               	movlw	4
 17382  005480  0100               	movlb	0	; () banked
 17383  005482  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 17384  005484  0E1A               	movlw	26
 17385  005486  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 17386  005488  0E00               	movlw	0
 17387  00548A  0100               	movlb	0	; () banked
 17388  00548C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 17389  00548E  0E03               	movlw	3
 17390  005490  6F82               	movwf	updateServoPosition@timer& (0+255),b
 17391  005492  ECF4  F029         	call	_updateServoPosition	;wreg free
 17392                           
 17393                           ;sort.c: 528: TMR1ON = 1;
 17394  005496  80CD               	bsf	4045,0,c	;volatile
 17395                           
 17396                           ;sort.c: 529: was_low_1 = 0;
 17397  005498  0E00               	movlw	0
 17398  00549A  6E78               	movwf	_was_low_1+1,c	;volatile
 17399  00549C  0E00               	movlw	0
 17400  00549E  6E77               	movwf	_was_low_1,c	;volatile
 17401                           
 17402                           ;sort.c: 531: _delay((unsigned long)((5)*(32000000/4000.0)));
 17403  0054A0  0E34               	movlw	52
 17404  0054A2  0100               	movlb	0	; () banked
 17405  0054A4  6F88               	movwf	??_initServos& (0+255),b
 17406  0054A6  0EF1               	movlw	241
 17407  0054A8                     u12387:
 17408  0054A8  2EE8               	decfsz	wreg,f,c
 17409  0054AA  D7FE               	bra	u12387
 17410  0054AC  2F88               	decfsz	??_initServos& (0+255),f,b
 17411  0054AE  D7FC               	bra	u12387
 17412  0054B0  D000               	nop2	
 17413                           
 17414                           ;sort.c: 533: TMR3ON = 1;
 17415  0054B2  80B1               	bsf	4017,0,c	;volatile
 17416                           
 17417                           ;sort.c: 534: was_low_3 = 0;
 17418  0054B4  0E00               	movlw	0
 17419  0054B6  6E7C               	movwf	_was_low_3+1,c	;volatile
 17420  0054B8  0E00               	movlw	0
 17421  0054BA  6E7B               	movwf	_was_low_3,c	;volatile
 17422                           
 17423                           ;sort.c: 537: _delay((unsigned long)((1)*(32000000/4000.0)));
 17424  0054BC  0E0B               	movlw	11
 17425  0054BE  0100               	movlb	0	; () banked
 17426  0054C0  6F88               	movwf	??_initServos& (0+255),b
 17427  0054C2  0E62               	movlw	98
 17428  0054C4                     u12397:
 17429  0054C4  2EE8               	decfsz	wreg,f,c
 17430  0054C6  D7FE               	bra	u12397
 17431  0054C8  2F88               	decfsz	??_initServos& (0+255),f,b
 17432  0054CA  D7FC               	bra	u12397
 17433  0054CC  F000               	nop	
 17434                           
 17435                           ;sort.c: 538: LATBbits.LATB3 = 0;
 17436  0054CE  968A               	bcf	3978,3,c	;volatile
 17437                           
 17438                           ;sort.c: 539: TMR2ON = 1;
 17439  0054D0  84CA               	bsf	4042,2,c	;volatile
 17440                           
 17441                           ;sort.c: 540: was_low_2 = 0;
 17442  0054D2  0E00               	movlw	0
 17443  0054D4  6E7A               	movwf	_was_low_2+1,c	;volatile
 17444  0054D6  0E00               	movlw	0
 17445  0054D8  6E79               	movwf	_was_low_2,c	;volatile
 17446                           
 17447                           ;sort.c: 542: LATCbits.LATC0 = 1;
 17448  0054DA  808B               	bsf	3979,0,c	;volatile
 17449  0054DC  0012               	return		;funcret
 17450  0054DE                     __end_of_initServos:
 17451                           	opt stack 0
 17452                           tblptru	equ	0xFF8
 17453                           tblptrh	equ	0xFF7
 17454                           tblptrl	equ	0xFF6
 17455                           tablat	equ	0xFF5
 17456                           prodh	equ	0xFF4
 17457                           prodl	equ	0xFF3
 17458                           intcon	equ	0xFF2
 17459                           intcon2	equ	0xFF1
 17460                           intcon3	equ	0xFF0
 17461                           postinc0	equ	0xFEE
 17462                           wreg	equ	0xFE8
 17463                           postdec1	equ	0xFE5
 17464                           fsr1l	equ	0xFE1
 17465                           indf2	equ	0xFDF
 17466                           postinc2	equ	0xFDE
 17467                           postdec2	equ	0xFDD
 17468                           fsr2h	equ	0xFDA
 17469                           fsr2l	equ	0xFD9
 17470                           status	equ	0xFD8
 17471                           
 17472 ;; *************** function _updateServoPosition *****************
 17473 ;; Defined at:
 17474 ;;		line 651 in file "sort.c"
 17475 ;; Parameters:    Size  Location     Type
 17476 ;;  time_us         2    0[BANK0 ] int 
 17477 ;;  timer           2    2[BANK0 ] int 
 17478 ;; Auto vars:     Size  Location     Type
 17479 ;;  my_time         2    6[BANK0 ] unsigned int 
 17480 ;; Return value:  Size  Location     Type
 17481 ;;                  1    wreg      void 
 17482 ;; Registers used:
 17483 ;;		wreg, status,2, status,0
 17484 ;; Tracked objects:
 17485 ;;		On entry : 0/0
 17486 ;;		On exit  : 0/0
 17487 ;;		Unchanged: 0/0
 17488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17489 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17490 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17491 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17492 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17493 ;;Total ram usage:        8 bytes
 17494 ;; Hardware stack levels used:    1
 17495 ;; Hardware stack levels required when called:    7
 17496 ;; This function calls:
 17497 ;;		Nothing
 17498 ;; This function is called by:
 17499 ;;		_Distribution
 17500 ;;		_initServos
 17501 ;;		_actuatorTest
 17502 ;;		_BothServos
 17503 ;; This function uses a non-reentrant model
 17504 ;;
 17505                           
 17506                           	psect	text53
 17507  0053E8                     __ptext53:
 17508                           	opt stack 0
 17509  0053E8                     _updateServoPosition:
 17510                           	opt stack 20
 17511                           
 17512                           ;sort.c: 652: unsigned int my_time = 65535 - time_us;
 17513                           
 17514                           ;incstack = 0
 17515  0053E8  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 17516  0053EC  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 17517  0053F0  0100               	movlb	0	; () banked
 17518  0053F2  1F84               	comf	??_updateServoPosition& (0+255),f,b
 17519  0053F4  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 17520  0053F6  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 17521  0053F8  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 17522  0053FA  0EFF               	movlw	255
 17523  0053FC  0100               	movlb	0	; () banked
 17524  0053FE  2584               	addwf	??_updateServoPosition& (0+255),w,b
 17525  005400  0100               	movlb	0	; () banked
 17526  005402  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 17527  005404  0EFF               	movlw	255
 17528  005406  0100               	movlb	0	; () banked
 17529  005408  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 17530  00540A  0100               	movlb	0	; () banked
 17531  00540C  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 17532                           
 17533                           ;sort.c: 653: switch(timer){
 17534  00540E  D019               	goto	l7171
 17535  005410                     l7165:
 17536                           
 17537                           ; BSR set to: 0
 17538                           ;sort.c: 655: servoTimes[0] = my_time >> 8;
 17539  005410  0100               	movlb	0	; () banked
 17540  005412  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 17541  005414  6E59               	movwf	_servoTimes,c
 17542  005416  6A5A               	clrf	_servoTimes+1,c
 17543                           
 17544                           ;sort.c: 656: servoTimes[1] = my_time & 0xFF;
 17545  005418  0100               	movlb	0	; () banked
 17546  00541A  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 17547  00541C  6E5B               	movwf	_servoTimes+2,c
 17548  00541E  6A5C               	clrf	_servoTimes+3,c
 17549                           
 17550                           ; BSR set to: 0
 17551                           ;sort.c: 658: pan_servo_state = time_us;
 17552  005420  C080  F06B         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 17553  005424  C081  F06C         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 17554  005428                     l972:
 17555                           
 17556                           ; BSR set to: 0
 17557                           ;sort.c: 660: servoTimes[2] = my_time >> 8;
 17558  005428  0100               	movlb	0	; () banked
 17559  00542A  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 17560  00542C  6E5D               	movwf	_servoTimes+4,c
 17561  00542E  6A5E               	clrf	_servoTimes+5,c
 17562                           
 17563                           ;sort.c: 661: servoTimes[3] = my_time & 0xFF;
 17564  005430  0100               	movlb	0	; () banked
 17565  005432  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 17566  005434  6E5F               	movwf	_servoTimes+6,c
 17567  005436  6A60               	clrf	_servoTimes+7,c
 17568                           
 17569                           ; BSR set to: 0
 17570                           ;sort.c: 663: tilt_servo_state = time_us;
 17571  005438  C080  F071         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 17572  00543C  C081  F072         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 17573                           
 17574                           ;sort.c: 664: }
 17575  005440  0012               	return	
 17576  005442                     l7171:
 17577                           
 17578                           ; BSR set to: 0
 17579  005442  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 17580  005446  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 17581                           
 17582                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17583                           ; Switch size 1, requested type "space"
 17584                           ; Number of cases is 1, Range of values is 0 to 0
 17585                           ; switch strategies available:
 17586                           ; Name         Instructions Cycles
 17587                           ; simple_byte            4     3 (average)
 17588                           ;	Chosen strategy is simple_byte
 17589  00544A  0100               	movlb	0	; () banked
 17590  00544C  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 17591  00544E  0A00               	xorlw	0	; case 0
 17592  005450  A4D8               	btfss	status,2,c
 17593  005452  0012               	return	
 17594                           
 17595                           ; BSR set to: 0
 17596                           ; Switch size 1, requested type "space"
 17597                           ; Number of cases is 2, Range of values is 1 to 3
 17598                           ; switch strategies available:
 17599                           ; Name         Instructions Cycles
 17600                           ; simple_byte            7     4 (average)
 17601                           ;	Chosen strategy is simple_byte
 17602  005454  0100               	movlb	0	; () banked
 17603  005456  5184               	movf	??_updateServoPosition& (0+255),w,b
 17604  005458  0A01               	xorlw	1	; case 1
 17605  00545A  B4D8               	btfsc	status,2,c
 17606  00545C  D7D9               	goto	l7165
 17607  00545E  0A02               	xorlw	2	; case 3
 17608  005460  A4D8               	btfss	status,2,c
 17609  005462  0012               	return	
 17610  005464  D7E1               	goto	l972
 17611  005466                     __end_of_updateServoPosition:
 17612                           	opt stack 0
 17613                           tblptru	equ	0xFF8
 17614                           tblptrh	equ	0xFF7
 17615                           tblptrl	equ	0xFF6
 17616                           tablat	equ	0xFF5
 17617                           prodh	equ	0xFF4
 17618                           prodl	equ	0xFF3
 17619                           intcon	equ	0xFF2
 17620                           intcon2	equ	0xFF1
 17621                           intcon3	equ	0xFF0
 17622                           postinc0	equ	0xFEE
 17623                           wreg	equ	0xFE8
 17624                           postdec1	equ	0xFE5
 17625                           fsr1l	equ	0xFE1
 17626                           indf2	equ	0xFDF
 17627                           postinc2	equ	0xFDE
 17628                           postdec2	equ	0xFDD
 17629                           fsr2h	equ	0xFDA
 17630                           fsr2l	equ	0xFD9
 17631                           status	equ	0xFD8
 17632                           
 17633 ;; *************** function _BlockerTest *****************
 17634 ;; Defined at:
 17635 ;;		line 605 in file "Test.c"
 17636 ;; Parameters:    Size  Location     Type
 17637 ;;		None
 17638 ;; Auto vars:     Size  Location     Type
 17639 ;;  i               2   45[BANK0 ] int 
 17640 ;;  cond_flag       2   51[BANK0 ] int 
 17641 ;;  cam_flag        2   49[BANK0 ] int 
 17642 ;;  res             2   47[BANK0 ] int 
 17643 ;; Return value:  Size  Location     Type
 17644 ;;                  1    wreg      void 
 17645 ;; Registers used:
 17646 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17647 ;; Tracked objects:
 17648 ;;		On entry : 0/0
 17649 ;;		On exit  : 0/0
 17650 ;;		Unchanged: 0/0
 17651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17653 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17654 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17655 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17656 ;;Total ram usage:       10 bytes
 17657 ;; Hardware stack levels used:    1
 17658 ;; Hardware stack levels required when called:   10
 17659 ;; This function calls:
 17660 ;;		_lcdInst
 17661 ;;		_printf
 17662 ;;		_readADC
 17663 ;; This function is called by:
 17664 ;;		_Test
 17665 ;; This function uses a non-reentrant model
 17666 ;;
 17667                           
 17668                           	psect	text54
 17669  004150                     __ptext54:
 17670                           	opt stack 0
 17671  004150                     _BlockerTest:
 17672                           	opt stack 19
 17673                           
 17674                           ;Test.c: 606: readADC(2);
 17675                           
 17676                           ; BSR set to: 0
 17677                           ;incstack = 0
 17678  004150  0E02               	movlw	2
 17679  004152  EC66  F02F         	call	_readADC
 17680                           
 17681                           ;Test.c: 607: int res = ADRESH<<8 | ADRESL;
 17682  004156  50C3               	movf	4035,w,c	;volatile
 17683  004158  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17684  00415C  0100               	movlb	0	; () banked
 17685  00415E  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17686  004160  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17687  004164  0100               	movlb	0	; () banked
 17688  004166  6BAB               	clrf	??_BlockerTest& (0+255),b
 17689  004168  0100               	movlb	0	; () banked
 17690  00416A  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17691  00416C  0100               	movlb	0	; () banked
 17692  00416E  6FAF               	movwf	BlockerTest@res& (0+255),b
 17693  004170  0100               	movlb	0	; () banked
 17694  004172  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17695  004174  0100               	movlb	0	; () banked
 17696  004176  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17697                           
 17698                           ; BSR set to: 0
 17699                           ;Test.c: 609: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 17700  004178  0E01               	movlw	1
 17701  00417A  EC6D  F030         	call	_lcdInst
 17702  00417E  0E68               	movlw	104
 17703  004180  0100               	movlb	0	; () banked
 17704  004182  6FAB               	movwf	??_BlockerTest& (0+255),b
 17705  004184  0EE4               	movlw	228
 17706  004186                     u12407:
 17707  004186  2EE8               	decfsz	wreg,f,c
 17708  004188  D7FE               	bra	u12407
 17709  00418A  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 17710  00418C  D7FC               	bra	u12407
 17711  00418E  F000               	nop	
 17712  004190  0E80               	movlw	128
 17713  004192  EC6D  F030         	call	_lcdInst
 17714                           
 17715                           ;Test.c: 610: printf("D:RET|2:C %d  ", res);
 17716  004196  0E89               	movlw	low STR_121
 17717  004198  0100               	movlb	0	; () banked
 17718  00419A  6F8E               	movwf	printf@f& (0+255),b
 17719  00419C  0EFE               	movlw	high STR_121
 17720  00419E  0100               	movlb	0	; () banked
 17721  0041A0  6F8F               	movwf	(printf@f+1)& (0+255),b
 17722  0041A2  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17723  0041A6  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17724  0041AA  ECE9  F00E         	call	_printf	;wreg free
 17725                           
 17726                           ;Test.c: 611: lcdInst(0b11000000);;
 17727  0041AE  0EC0               	movlw	192
 17728  0041B0  EC6D  F030         	call	_lcdInst
 17729                           
 17730                           ;Test.c: 612: printf("OTHER: CAM TOGGLE");
 17731  0041B4  0E49               	movlw	low STR_122
 17732  0041B6  0100               	movlb	0	; () banked
 17733  0041B8  6F8E               	movwf	printf@f& (0+255),b
 17734  0041BA  0EFB               	movlw	high STR_122
 17735  0041BC  0100               	movlb	0	; () banked
 17736  0041BE  6F8F               	movwf	(printf@f+1)& (0+255),b
 17737  0041C0  ECE9  F00E         	call	_printf	;wreg free
 17738                           
 17739                           ;Test.c: 613: int cam_flag = 1;
 17740  0041C4  0E00               	movlw	0
 17741  0041C6  0100               	movlb	0	; () banked
 17742  0041C8  6FB2               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 17743  0041CA  0E01               	movlw	1
 17744  0041CC  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 17745                           
 17746                           ; BSR set to: 0
 17747                           ;Test.c: 614: int cond_flag = 0;
 17748  0041CE  0E00               	movlw	0
 17749  0041D0  0100               	movlb	0	; () banked
 17750  0041D2  6FB4               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 17751  0041D4  0E00               	movlw	0
 17752  0041D6  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 17753                           
 17754                           ; BSR set to: 0
 17755                           ;Test.c: 617: while(PORTBbits.RB1 == 0){
 17756                           
 17757                           ;Test.c: 616: while(1){
 17758  0041D8  D023               	goto	l9541
 17759  0041DA                     l9533:
 17760                           
 17761                           ;Test.c: 618: readADC(2);
 17762  0041DA  0E02               	movlw	2
 17763  0041DC  EC66  F02F         	call	_readADC
 17764                           
 17765                           ;Test.c: 619: res = ADRESH<<8 | ADRESL;
 17766  0041E0  50C3               	movf	4035,w,c	;volatile
 17767  0041E2  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17768  0041E6  0100               	movlb	0	; () banked
 17769  0041E8  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17770  0041EA  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17771  0041EE  0100               	movlb	0	; () banked
 17772  0041F0  6BAB               	clrf	??_BlockerTest& (0+255),b
 17773  0041F2  0100               	movlb	0	; () banked
 17774  0041F4  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17775  0041F6  0100               	movlb	0	; () banked
 17776  0041F8  6FAF               	movwf	BlockerTest@res& (0+255),b
 17777  0041FA  0100               	movlb	0	; () banked
 17778  0041FC  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17779  0041FE  0100               	movlb	0	; () banked
 17780  004200  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17781                           
 17782                           ; BSR set to: 0
 17783                           ;Test.c: 620: lcdInst(0b10000000);;
 17784  004202  0E80               	movlw	128
 17785  004204  EC6D  F030         	call	_lcdInst
 17786                           
 17787                           ;Test.c: 621: printf("D:RET|2:C %d  ", res);
 17788  004208  0E89               	movlw	low STR_121
 17789  00420A  0100               	movlb	0	; () banked
 17790  00420C  6F8E               	movwf	printf@f& (0+255),b
 17791  00420E  0EFE               	movlw	high STR_121
 17792  004210  0100               	movlb	0	; () banked
 17793  004212  6F8F               	movwf	(printf@f+1)& (0+255),b
 17794  004214  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17795  004218  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17796  00421C  ECE9  F00E         	call	_printf	;wreg free
 17797  004220                     l9541:
 17798  004220  A281               	btfss	3969,1,c	;volatile
 17799  004222  D7DB               	goto	l9533
 17800                           
 17801                           ;Test.c: 622: }
 17802                           ;Test.c: 623: if(PORTB >> 4 == 0b1111){
 17803  004224  3881               	swapf	3969,w,c	;volatile
 17804  004226  0B0F               	andlw	15
 17805  004228  0A0F               	xorlw	15
 17806  00422A  B4D8               	btfsc	status,2,c
 17807  00422C  0012               	return	
 17808                           
 17809                           ;Test.c: 626: else if(PORTB >> 4 == 0b0001){
 17810                           
 17811                           ;Test.c: 625: }
 17812                           
 17813                           ;Test.c: 624: break;
 17814  00422E  3881               	swapf	3969,w,c	;volatile
 17815  004230  0B0F               	andlw	15
 17816  004232  06E8               	decf	wreg,f,c
 17817  004234  A4D8               	btfss	status,2,c
 17818  004236  D016               	goto	l9559
 17819                           
 17820                           ;Test.c: 627: if(cond_flag){
 17821  004238  0100               	movlb	0	; () banked
 17822  00423A  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 17823  00423C  0100               	movlb	0	; () banked
 17824  00423E  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17825  004240  B4D8               	btfsc	status,2,c
 17826  004242  D007               	goto	l1514
 17827                           
 17828                           ; BSR set to: 0
 17829                           ;Test.c: 628: LATCbits.LATC7 = 1;
 17830  004244  8E8B               	bsf	3979,7,c	;volatile
 17831  004246  D006               	goto	l9557
 17832  004248                     u9171:
 17833  004248  0E01               	movlw	1
 17834  00424A                     u9180:
 17835  00424A  0100               	movlb	0	; () banked
 17836  00424C  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 17837  00424E  6BB4               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 17838                           
 17839                           ;Test.c: 630: }
 17840  004250  D05F               	goto	l9587
 17841  004252                     l1514:
 17842                           
 17843                           ; BSR set to: 0
 17844                           ;Test.c: 631: else{
 17845                           ;Test.c: 632: LATCbits.LATC7 = 0;
 17846  004252  9E8B               	bcf	3979,7,c	;volatile
 17847  004254                     l9557:
 17848                           
 17849                           ; BSR set to: 0
 17850                           ;Test.c: 633: cond_flag = !cond_flag;
 17851  004254  0100               	movlb	0	; () banked
 17852  004256  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 17853  004258  0100               	movlb	0	; () banked
 17854  00425A  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17855  00425C  B4D8               	btfsc	status,2,c
 17856  00425E  D7F4               	goto	u9171
 17857  004260  0E00               	movlw	0
 17858  004262  D7F3               	goto	u9180
 17859  004264                     l9559:
 17860                           
 17861                           ;Test.c: 636: else{
 17862                           ;Test.c: 637: if(cam_flag){
 17863  004264  0100               	movlb	0	; () banked
 17864  004266  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17865  004268  0100               	movlb	0	; () banked
 17866  00426A  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17867  00426C  B4D8               	btfsc	status,2,c
 17868  00426E  D007               	goto	l9565
 17869                           
 17870                           ; BSR set to: 0
 17871                           ;Test.c: 638: LATCbits.LATC0 = 1;
 17872  004270  808B               	bsf	3979,0,c	;volatile
 17873  004272  D023               	goto	l9577
 17874  004274                     u9221:
 17875  004274  0E01               	movlw	1
 17876  004276                     u9230:
 17877  004276  0100               	movlb	0	; () banked
 17878  004278  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 17879  00427A  6BB2               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 17880                           
 17881                           ;Test.c: 640: }
 17882  00427C  D049               	goto	l9587
 17883  00427E                     l9565:
 17884                           
 17885                           ; BSR set to: 0
 17886                           ;Test.c: 641: else{
 17887                           ;Test.c: 642: for(int i=0;i<5000;i++)
 17888  00427E  0E00               	movlw	0
 17889  004280  0100               	movlb	0	; () banked
 17890  004282  6FAE               	movwf	(BlockerTest@i+1)& (0+255),b
 17891  004284  0E00               	movlw	0
 17892  004286  6FAD               	movwf	BlockerTest@i& (0+255),b
 17893  004288                     l9567:
 17894                           
 17895                           ; BSR set to: 0
 17896  004288  0100               	movlb	0	; () banked
 17897  00428A  BFAE               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 17898  00428C  D008               	goto	l1519
 17899  00428E  0E88               	movlw	136
 17900  004290  0100               	movlb	0	; () banked
 17901  004292  5DAD               	subwf	BlockerTest@i& (0+255),w,b
 17902  004294  0E13               	movlw	19
 17903  004296  0100               	movlb	0	; () banked
 17904  004298  59AE               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 17905  00429A  B0D8               	btfsc	status,0,c
 17906  00429C  D00D               	goto	l1520
 17907  00429E                     l1519:
 17908                           
 17909                           ; BSR set to: 0
 17910                           ;Test.c: 643: {
 17911                           ;Test.c: 644: LATCbits.LATC0 = 1;
 17912  00429E  808B               	bsf	3979,0,c	;volatile
 17913                           
 17914                           ; BSR set to: 0
 17915                           ;Test.c: 645: _delay((unsigned long)((10)*(32000000/4000000.0)));
 17916  0042A0  0E1A               	movlw	26
 17917  0042A2                     u12417:
 17918  0042A2  2EE8               	decfsz	wreg,f,c
 17919  0042A4  D7FE               	bra	u12417
 17920  0042A6  D000               	nop2	
 17921                           
 17922                           ;Test.c: 646: LATCbits.LATC0 = 0;
 17923  0042A8  908B               	bcf	3979,0,c	;volatile
 17924                           
 17925                           ;Test.c: 647: _delay((unsigned long)((90)*(32000000/4000000.0)));
 17926  0042AA  0EF0               	movlw	240
 17927  0042AC                     u12427:
 17928  0042AC  2EE8               	decfsz	wreg,f,c
 17929  0042AE  D7FE               	bra	u12427
 17930  0042B0  0100               	movlb	0	; () banked
 17931  0042B2  4BAD               	infsnz	BlockerTest@i& (0+255),f,b
 17932  0042B4  2BAE               	incf	(BlockerTest@i+1)& (0+255),f,b
 17933  0042B6  D7E8               	goto	l9567
 17934  0042B8                     l1520:
 17935                           
 17936                           ; BSR set to: 0
 17937                           ;Test.c: 648: }
 17938                           ;Test.c: 649: LATCbits.LATC0 = 0;
 17939  0042B8  908B               	bcf	3979,0,c	;volatile
 17940  0042BA                     l9577:
 17941                           
 17942                           ; BSR set to: 0
 17943                           ;Test.c: 650: cam_flag = !cam_flag;
 17944  0042BA  0100               	movlb	0	; () banked
 17945  0042BC  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17946  0042BE  0100               	movlb	0	; () banked
 17947  0042C0  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17948  0042C2  B4D8               	btfsc	status,2,c
 17949  0042C4  D7D7               	goto	u9221
 17950  0042C6  0E00               	movlw	0
 17951  0042C8  D7D6               	goto	u9230
 17952  0042CA                     l9579:
 17953                           
 17954                           ;Test.c: 655: readADC(2);
 17955  0042CA  0E02               	movlw	2
 17956  0042CC  EC66  F02F         	call	_readADC
 17957                           
 17958                           ;Test.c: 656: res = ADRESH<<8 | ADRESL;
 17959  0042D0  50C3               	movf	4035,w,c	;volatile
 17960  0042D2  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17961  0042D6  0100               	movlb	0	; () banked
 17962  0042D8  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17963  0042DA  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17964  0042DE  0100               	movlb	0	; () banked
 17965  0042E0  6BAB               	clrf	??_BlockerTest& (0+255),b
 17966  0042E2  0100               	movlb	0	; () banked
 17967  0042E4  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17968  0042E6  0100               	movlb	0	; () banked
 17969  0042E8  6FAF               	movwf	BlockerTest@res& (0+255),b
 17970  0042EA  0100               	movlb	0	; () banked
 17971  0042EC  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17972  0042EE  0100               	movlb	0	; () banked
 17973  0042F0  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17974                           
 17975                           ; BSR set to: 0
 17976                           ;Test.c: 657: lcdInst(0b10000000);;
 17977  0042F2  0E80               	movlw	128
 17978  0042F4  EC6D  F030         	call	_lcdInst
 17979                           
 17980                           ;Test.c: 658: printf("D:RET|2:C %d  ", res);
 17981  0042F8  0E89               	movlw	low STR_121
 17982  0042FA  0100               	movlb	0	; () banked
 17983  0042FC  6F8E               	movwf	printf@f& (0+255),b
 17984  0042FE  0EFE               	movlw	high STR_121
 17985  004300  0100               	movlb	0	; () banked
 17986  004302  6F8F               	movwf	(printf@f+1)& (0+255),b
 17987  004304  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17988  004308  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17989  00430C  ECE9  F00E         	call	_printf	;wreg free
 17990  004310                     l9587:
 17991  004310  A281               	btfss	3969,1,c	;volatile
 17992  004312  D786               	goto	l9541
 17993  004314  D7DA               	goto	l9579
 17994  004316                     __end_of_BlockerTest:
 17995                           	opt stack 0
 17996                           tblptru	equ	0xFF8
 17997                           tblptrh	equ	0xFF7
 17998                           tblptrl	equ	0xFF6
 17999                           tablat	equ	0xFF5
 18000                           prodh	equ	0xFF4
 18001                           prodl	equ	0xFF3
 18002                           intcon	equ	0xFF2
 18003                           intcon2	equ	0xFF1
 18004                           intcon3	equ	0xFF0
 18005                           postinc0	equ	0xFEE
 18006                           wreg	equ	0xFE8
 18007                           postdec1	equ	0xFE5
 18008                           fsr1l	equ	0xFE1
 18009                           indf2	equ	0xFDF
 18010                           postinc2	equ	0xFDE
 18011                           postdec2	equ	0xFDD
 18012                           fsr2h	equ	0xFDA
 18013                           fsr2l	equ	0xFD9
 18014                           status	equ	0xFD8
 18015                           
 18016 ;; *************** function _readADC *****************
 18017 ;; Defined at:
 18018 ;;		line 15 in file "ADCFunctionality.c"
 18019 ;; Parameters:    Size  Location     Type
 18020 ;;  channel         1    wreg     unsigned char 
 18021 ;; Auto vars:     Size  Location     Type
 18022 ;;  channel         1    1[BANK0 ] unsigned char 
 18023 ;; Return value:  Size  Location     Type
 18024 ;;                  1    wreg      void 
 18025 ;; Registers used:
 18026 ;;		wreg, status,2, status,0, cstack
 18027 ;; Tracked objects:
 18028 ;;		On entry : 0/0
 18029 ;;		On exit  : 0/0
 18030 ;;		Unchanged: 0/0
 18031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18033 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18034 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18035 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18036 ;;Total ram usage:        2 bytes
 18037 ;; Hardware stack levels used:    1
 18038 ;; Hardware stack levels required when called:    7
 18039 ;; This function calls:
 18040 ;;		Nothing
 18041 ;; This function is called by:
 18042 ;;		_readIR
 18043 ;;		_readMAG
 18044 ;;		_readCOND
 18045 ;;		_sensorTest
 18046 ;;		_PlatformTest
 18047 ;;		_BlockerTest
 18048 ;; This function uses a non-reentrant model
 18049 ;;
 18050                           
 18051                           	psect	text55
 18052  005ECC                     __ptext55:
 18053                           	opt stack 0
 18054  005ECC                     _readADC:
 18055                           	opt stack 20
 18056                           
 18057                           ;incstack = 0
 18058                           ;readADC@channel stored from wreg
 18059  005ECC  0100               	movlb	0	; () banked
 18060  005ECE  6F81               	movwf	readADC@channel& (0+255),b
 18061                           
 18062                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 18063  005ED0  0100               	movlb	0	; () banked
 18064  005ED2  4581               	rlncf	readADC@channel& (0+255),w,b
 18065  005ED4  46E8               	rlncf	wreg,f,c
 18066  005ED6  0BFC               	andlw	252
 18067  005ED8  6EC2               	movwf	4034,c	;volatile
 18068                           
 18069                           ; BSR set to: 0
 18070                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 18071  005EDA  80C2               	bsf	4034,0,c	;volatile
 18072                           
 18073                           ; BSR set to: 0
 18074                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 18075  005EDC  82C2               	bsf	4034,1,c	;volatile
 18076                           
 18077                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 18078  005EDE  D009               	goto	l6793
 18079  005EE0                     l6791:
 18080  005EE0  0E34               	movlw	52
 18081  005EE2  0100               	movlb	0	; () banked
 18082  005EE4  6F80               	movwf	??_readADC& (0+255),b
 18083  005EE6  0EF1               	movlw	241
 18084  005EE8                     u12437:
 18085  005EE8  2EE8               	decfsz	wreg,f,c
 18086  005EEA  D7FE               	bra	u12437
 18087  005EEC  2F80               	decfsz	??_readADC& (0+255),f,b
 18088  005EEE  D7FC               	bra	u12437
 18089  005EF0  D000               	nop2	
 18090  005EF2                     l6793:
 18091  005EF2  A2C2               	btfss	4034,1,c	;volatile
 18092  005EF4  0012               	return	
 18093  005EF6  D7F4               	goto	l6791
 18094  005EF8                     __end_of_readADC:
 18095                           	opt stack 0
 18096                           tblptru	equ	0xFF8
 18097                           tblptrh	equ	0xFF7
 18098                           tblptrl	equ	0xFF6
 18099                           tablat	equ	0xFF5
 18100                           prodh	equ	0xFF4
 18101                           prodl	equ	0xFF3
 18102                           intcon	equ	0xFF2
 18103                           intcon2	equ	0xFF1
 18104                           intcon3	equ	0xFF0
 18105                           postinc0	equ	0xFEE
 18106                           wreg	equ	0xFE8
 18107                           postdec1	equ	0xFE5
 18108                           fsr1l	equ	0xFE1
 18109                           indf2	equ	0xFDF
 18110                           postinc2	equ	0xFDE
 18111                           postdec2	equ	0xFDD
 18112                           fsr2h	equ	0xFDA
 18113                           fsr2l	equ	0xFD9
 18114                           status	equ	0xFD8
 18115                           
 18116 ;; *************** function _printf *****************
 18117 ;; Defined at:
 18118 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 18119 ;; Parameters:    Size  Location     Type
 18120 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 18121 ;;		 -> STR_128(18), STR_127(18), STR_126(17), STR_125(17), 
 18122 ;;		 -> STR_124(15), STR_123(15), STR_122(18), STR_121(15), 
 18123 ;;		 -> STR_120(18), STR_119(18), STR_118(17), STR_117(17), 
 18124 ;;		 -> STR_116(17), STR_115(17), STR_114(17), STR_113(17), 
 18125 ;;		 -> STR_112(18), STR_111(17), STR_110(15), STR_109(15), 
 18126 ;;		 -> STR_108(15), STR_107(17), STR_106(17), STR_105(17), 
 18127 ;;		 -> STR_104(16), STR_103(17), STR_102(17), STR_101(17), 
 18128 ;;		 -> STR_100(17), STR_99(17), STR_98(17), STR_97(15), 
 18129 ;;		 -> STR_96(11), STR_95(17), STR_94(11), STR_93(17), 
 18130 ;;		 -> STR_92(14), STR_91(15), STR_90(14), STR_89(10), 
 18131 ;;		 -> STR_88(9), STR_87(9), STR_86(10), STR_85(10), 
 18132 ;;		 -> STR_84(16), STR_83(15), STR_82(3), STR_81(18), 
 18133 ;;		 -> STR_80(3), STR_79(18), STR_78(14), STR_77(8), 
 18134 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 18135 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(17), 
 18136 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(16), 
 18137 ;;		 -> STR_64(16), STR_63(24), STR_50(17), STR_49(17), 
 18138 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 18139 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 18140 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 18141 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 18142 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 18143 ;;		 -> STR_28(17), STR_27(17), STR_26(17), STR_25(17), 
 18144 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 18145 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 18146 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 18147 ;; Auto vars:     Size  Location     Type
 18148 ;;  tmpval          4    0        struct .
 18149 ;;  width           2   41[BANK0 ] int 
 18150 ;;  val             2   37[BANK0 ] unsigned int 
 18151 ;;  len             2   35[BANK0 ] unsigned int 
 18152 ;;  ap              2   33[BANK0 ] PTR void [1]
 18153 ;;		 -> ?i2_printf(2), ?_printf(2), 
 18154 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 18155 ;;		 -> STR_129(7), count_total(2), printRTC@month(4), UI@month(4), 
 18156 ;;  c               1   40[BANK0 ] char 
 18157 ;;  flag            1   39[BANK0 ] unsigned char 
 18158 ;;  prec            1   30[BANK0 ] char 
 18159 ;; Return value:  Size  Location     Type
 18160 ;;                  2   14[BANK0 ] int 
 18161 ;; Registers used:
 18162 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18163 ;; Tracked objects:
 18164 ;;		On entry : 0/0
 18165 ;;		On exit  : 0/0
 18166 ;;		Unchanged: 0/0
 18167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18168 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18169 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18170 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18171 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18172 ;;Total ram usage:       29 bytes
 18173 ;; Hardware stack levels used:    1
 18174 ;; Hardware stack levels required when called:    9
 18175 ;; This function calls:
 18176 ;;		___lwdiv
 18177 ;;		___lwmod
 18178 ;;		___wmul
 18179 ;;		_isdigit
 18180 ;;		_putch
 18181 ;; This function is called by:
 18182 ;;		_UI
 18183 ;;		_change_state_to_menu_start
 18184 ;;		_change_state_to_menu_12
 18185 ;;		_change_state_to_menu_22
 18186 ;;		_printRTC
 18187 ;;		_EEPROM_write
 18188 ;;		_Test
 18189 ;;		_algorithmTest
 18190 ;;		_sensorTest
 18191 ;;		_actuatorTest
 18192 ;;		_BothServos
 18193 ;;		_PortTestDC
 18194 ;;		_PlatformTest
 18195 ;;		_SpeedTest
 18196 ;;		_BlockerTest
 18197 ;;		_arm
 18198 ;;		_PortTestPusher
 18199 ;; This function uses a non-reentrant model
 18200 ;;
 18201                           
 18202                           	psect	text56
 18203  001DD2                     __ptext56:
 18204                           	opt stack 0
 18205  001DD2                     _printf:
 18206                           	opt stack 18
 18207                           
 18208                           ;doprnt.c: 466: va_list ap;
 18209                           ;doprnt.c: 499: signed char c;
 18210                           ;doprnt.c: 501: int width;
 18211                           ;doprnt.c: 506: signed char prec;
 18212                           ;doprnt.c: 508: unsigned char flag;
 18213                           ;doprnt.c: 523: union {
 18214                           ;doprnt.c: 524: unsigned long vd;
 18215                           ;doprnt.c: 525: double integ;
 18216                           ;doprnt.c: 526: } tmpval;
 18217                           ;doprnt.c: 528: unsigned int val;
 18218                           ;doprnt.c: 529: unsigned len;
 18219                           ;doprnt.c: 530: const char * cp;
 18220                           ;doprnt.c: 533: *ap = __va_start();
 18221                           
 18222                           ;incstack = 0
 18223  001DD2  0E90               	movlw	low (?_printf+2)
 18224  001DD4  0100               	movlb	0	; () banked
 18225  001DD6  6FA1               	movwf	printf@ap& (0+255),b
 18226  001DD8  0E00               	movlw	high (?_printf+2)
 18227  001DDA  0100               	movlb	0	; () banked
 18228  001DDC  6FA2               	movwf	(printf@ap+1)& (0+255),b
 18229                           
 18230                           ;doprnt.c: 536: while(c = *f++) {
 18231  001DDE  D205               	goto	l7125
 18232  001DE0                     l6995:
 18233                           
 18234                           ; BSR set to: 0
 18235                           ;doprnt.c: 538: if(c != '%')
 18236  001DE0  0E25               	movlw	37
 18237  001DE2  0100               	movlb	0	; () banked
 18238  001DE4  19A8               	xorwf	printf@c& (0+255),w,b
 18239  001DE6  B4D8               	btfsc	status,2,c
 18240  001DE8  D005               	goto	l6999
 18241                           
 18242                           ; BSR set to: 0
 18243                           ;doprnt.c: 540: {
 18244                           ;doprnt.c: 541: (putch(c) );
 18245  001DEA  0100               	movlb	0	; () banked
 18246  001DEC  51A8               	movf	printf@c& (0+255),w,b
 18247  001DEE  EC65  F030         	call	_putch
 18248                           
 18249                           ;doprnt.c: 542: continue;
 18250  001DF2  D1FB               	goto	l7125
 18251  001DF4                     l6999:
 18252                           
 18253                           ;doprnt.c: 543: }
 18254                           ;doprnt.c: 546: width = 0;
 18255  001DF4  0E00               	movlw	0
 18256  001DF6  0100               	movlb	0	; () banked
 18257  001DF8  6FAA               	movwf	(printf@width+1)& (0+255),b
 18258  001DFA  0E00               	movlw	0
 18259  001DFC  6FA9               	movwf	printf@width& (0+255),b
 18260                           
 18261                           ;doprnt.c: 548: flag = 0;
 18262  001DFE  0E00               	movlw	0
 18263  001E00  0100               	movlb	0	; () banked
 18264  001E02  6FA7               	movwf	printf@flag& (0+255),b
 18265                           
 18266                           ; BSR set to: 0
 18267                           ;doprnt.c: 551: switch(*f) {
 18268                           
 18269                           ;doprnt.c: 550: for(;;) {
 18270  001E04  D005               	goto	l7005
 18271  001E06                     l7001:
 18272                           
 18273                           ;doprnt.c: 580: flag |= 0x04;
 18274  001E06  0100               	movlb	0	; () banked
 18275  001E08  85A7               	bsf	printf@flag& (0+255),2,b
 18276                           
 18277                           ;doprnt.c: 581: f++;
 18278  001E0A  0100               	movlb	0	; () banked
 18279  001E0C  4B8E               	infsnz	printf@f& (0+255),f,b
 18280  001E0E  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18281  001E10                     l7005:
 18282  001E10  C08E  FFF6         	movff	printf@f,tblptrl
 18283  001E14  C08F  FFF7         	movff	printf@f+1,tblptrh
 18284  001E18                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18285  001E18  6AF8               	clrf	tblptru,c
 18286  001E1A                     	endif
 18287  001E1A                     	if	0	;tblptru may be non-zero
 18288  001E1A                     	endif
 18289  001E1A  0008               	tblrd		*
 18290  001E1C  50F5               	movf	tablat,w,c
 18291                           
 18292                           ; Switch size 1, requested type "space"
 18293                           ; Number of cases is 1, Range of values is 48 to 48
 18294                           ; switch strategies available:
 18295                           ; Name         Instructions Cycles
 18296                           ; simple_byte            4     3 (average)
 18297                           ;	Chosen strategy is simple_byte
 18298  001E1E  0A30               	xorlw	48	; case 48
 18299  001E20  B4D8               	btfsc	status,2,c
 18300  001E22  D7F1               	goto	l7001
 18301                           
 18302                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 18303                           
 18304                           ;doprnt.c: 586: }
 18305                           
 18306                           ;doprnt.c: 585: break;
 18307  001E24  C08E  FFF6         	movff	printf@f,tblptrl
 18308  001E28  C08F  FFF7         	movff	printf@f+1,tblptrh
 18309  001E2C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18310  001E2C  6AF8               	clrf	tblptru,c
 18311  001E2E                     	endif
 18312  001E2E                     	if	0	;tblptru may be non-zero
 18313  001E2E                     	endif
 18314  001E2E  0008               	tblrd		*
 18315  001E30  50F5               	movf	tablat,w,c
 18316  001E32  EC7C  F02F         	call	_isdigit
 18317  001E36  A0D8               	btfss	status,0,c
 18318  001E38  D0D2               	goto	l7053
 18319                           
 18320                           ;doprnt.c: 598: width = 0;
 18321  001E3A  0E00               	movlw	0
 18322  001E3C  0100               	movlb	0	; () banked
 18323  001E3E  6FAA               	movwf	(printf@width+1)& (0+255),b
 18324  001E40  0E00               	movlw	0
 18325  001E42  6FA9               	movwf	printf@width& (0+255),b
 18326  001E44                     l7011:
 18327                           
 18328                           ;doprnt.c: 600: width *= 10;
 18329  001E44  C0A9  F080         	movff	printf@width,___wmul@multiplier
 18330  001E48  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 18331  001E4C  0E00               	movlw	0
 18332  001E4E  0100               	movlb	0	; () banked
 18333  001E50  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18334  001E52  0E0A               	movlw	10
 18335  001E54  6F82               	movwf	___wmul@multiplicand& (0+255),b
 18336  001E56  ECE6  F02D         	call	___wmul	;wreg free
 18337  001E5A  C080  F0A9         	movff	?___wmul,printf@width
 18338  001E5E  C081  F0AA         	movff	?___wmul+1,printf@width+1
 18339                           
 18340                           ;doprnt.c: 601: width += *f++ - '0';
 18341  001E62  0ED0               	movlw	208
 18342  001E64  0100               	movlb	0	; () banked
 18343  001E66  6F9A               	movwf	??_printf& (0+255),b
 18344  001E68  0EFF               	movlw	255
 18345  001E6A  0100               	movlb	0	; () banked
 18346  001E6C  6F9B               	movwf	(??_printf+1)& (0+255),b
 18347  001E6E  C08E  FFF6         	movff	printf@f,tblptrl
 18348  001E72  C08F  FFF7         	movff	printf@f+1,tblptrh
 18349  001E76                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18350  001E76  6AF8               	clrf	tblptru,c
 18351  001E78                     	endif
 18352  001E78                     	if	0	;tblptru may be non-zero
 18353  001E78                     	endif
 18354  001E78  0008               	tblrd		*
 18355  001E7A  50F5               	movf	tablat,w,c
 18356  001E7C  0100               	movlb	0	; () banked
 18357  001E7E  6F9C               	movwf	(??_printf+2)& (0+255),b
 18358  001E80  6B9D               	clrf	(??_printf+3)& (0+255),b
 18359  001E82  0100               	movlb	0	; () banked
 18360  001E84  519A               	movf	??_printf& (0+255),w,b
 18361  001E86  0100               	movlb	0	; () banked
 18362  001E88  279C               	addwf	(??_printf+2)& (0+255),f,b
 18363  001E8A  0100               	movlb	0	; () banked
 18364  001E8C  519B               	movf	(??_printf+1)& (0+255),w,b
 18365  001E8E  0100               	movlb	0	; () banked
 18366  001E90  239D               	addwfc	(??_printf+3)& (0+255),f,b
 18367  001E92  0100               	movlb	0	; () banked
 18368  001E94  519C               	movf	(??_printf+2)& (0+255),w,b
 18369  001E96  0100               	movlb	0	; () banked
 18370  001E98  27A9               	addwf	printf@width& (0+255),f,b
 18371  001E9A  0100               	movlb	0	; () banked
 18372  001E9C  519D               	movf	(??_printf+3)& (0+255),w,b
 18373  001E9E  0100               	movlb	0	; () banked
 18374  001EA0  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 18375                           
 18376                           ; BSR set to: 0
 18377  001EA2  0100               	movlb	0	; () banked
 18378  001EA4  4B8E               	infsnz	printf@f& (0+255),f,b
 18379  001EA6  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18380                           
 18381                           ; BSR set to: 0
 18382                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 18383  001EA8  C08E  FFF6         	movff	printf@f,tblptrl
 18384  001EAC  C08F  FFF7         	movff	printf@f+1,tblptrh
 18385  001EB0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18386  001EB0  6AF8               	clrf	tblptru,c
 18387  001EB2                     	endif
 18388  001EB2                     	if	0	;tblptru may be non-zero
 18389  001EB2                     	endif
 18390  001EB2  0008               	tblrd		*
 18391  001EB4  50F5               	movf	tablat,w,c
 18392  001EB6  EC7C  F02F         	call	_isdigit
 18393  001EBA  A0D8               	btfss	status,0,c
 18394  001EBC  D090               	goto	l7053
 18395  001EBE  D7C2               	goto	l7011
 18396  001EC0                     l7019:
 18397                           
 18398                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 18399  001EC0  C0A1  FFD9         	movff	printf@ap,fsr2l
 18400  001EC4  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 18401  001EC8  CFDE F09F          	movff	postinc2,printf@cp
 18402  001ECC  CFDD F0A0          	movff	postdec2,printf@cp+1
 18403  001ED0  0E02               	movlw	2
 18404  001ED2  0100               	movlb	0	; () banked
 18405  001ED4  27A1               	addwf	printf@ap& (0+255),f,b
 18406  001ED6  0E00               	movlw	0
 18407  001ED8  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 18408                           
 18409                           ; BSR set to: 0
 18410                           ;doprnt.c: 740: if(!cp)
 18411  001EDA  0100               	movlb	0	; () banked
 18412  001EDC  519F               	movf	printf@cp& (0+255),w,b
 18413  001EDE  0100               	movlb	0	; () banked
 18414  001EE0  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 18415  001EE2  A4D8               	btfss	status,2,c
 18416  001EE4  D006               	goto	l7027
 18417                           
 18418                           ; BSR set to: 0
 18419                           ;doprnt.c: 741: cp = "(null)";
 18420  001EE6  0EB5               	movlw	low STR_129
 18421  001EE8  0100               	movlb	0	; () banked
 18422  001EEA  6F9F               	movwf	printf@cp& (0+255),b
 18423  001EEC  0EFF               	movlw	high STR_129
 18424  001EEE  0100               	movlb	0	; () banked
 18425  001EF0  6FA0               	movwf	(printf@cp+1)& (0+255),b
 18426  001EF2                     l7027:
 18427                           
 18428                           ; BSR set to: 0
 18429                           ;doprnt.c: 745: len = 0;
 18430  001EF2  0E00               	movlw	0
 18431  001EF4  0100               	movlb	0	; () banked
 18432  001EF6  6FA4               	movwf	(printf@len+1)& (0+255),b
 18433  001EF8  0E00               	movlw	0
 18434  001EFA  6FA3               	movwf	printf@len& (0+255),b
 18435                           
 18436                           ;doprnt.c: 746: while(cp[len])
 18437  001EFC  D003               	goto	l7031
 18438  001EFE                     l7029:
 18439                           
 18440                           ;doprnt.c: 747: len++;
 18441  001EFE  0100               	movlb	0	; () banked
 18442  001F00  4BA3               	infsnz	printf@len& (0+255),f,b
 18443  001F02  2BA4               	incf	(printf@len+1)& (0+255),f,b
 18444  001F04                     l7031:
 18445                           
 18446                           ; BSR set to: 0
 18447  001F04  0100               	movlb	0	; () banked
 18448  001F06  51A3               	movf	printf@len& (0+255),w,b
 18449  001F08  0100               	movlb	0	; () banked
 18450  001F0A  259F               	addwf	printf@cp& (0+255),w,b
 18451  001F0C  0100               	movlb	0	; () banked
 18452  001F0E  6F9A               	movwf	??_printf& (0+255),b
 18453  001F10  0100               	movlb	0	; () banked
 18454  001F12  51A4               	movf	(printf@len+1)& (0+255),w,b
 18455  001F14  0100               	movlb	0	; () banked
 18456  001F16  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 18457  001F18  0100               	movlb	0	; () banked
 18458  001F1A  6F9B               	movwf	(??_printf+1)& (0+255),b
 18459  001F1C  C09A  FFF6         	movff	??_printf,tblptrl
 18460  001F20  C09B  FFF7         	movff	??_printf+1,tblptrh
 18461  001F24  0E00               	movlw	low (__mediumconst shr (0+16))
 18462  001F26  6EF8               	movwf	tblptru,c
 18463  001F28  0E0F               	movlw	(high __ramtop+-1)
 18464  001F2A  64F7               	cpfsgt	tblptrh,c
 18465  001F2C  D003               	bra	u5787
 18466  001F2E  0008               	tblrd		*
 18467  001F30  50F5               	movf	tablat,w,c
 18468  001F32  D005               	bra	u5780
 18469  001F34                     u5787:
 18470  001F34  CFF6 FFE9          	movff	tblptrl,fsr0l
 18471  001F38  CFF7 FFEA          	movff	tblptrh,fsr0h
 18472  001F3C  50EF               	movf	indf0,w,c
 18473  001F3E                     u5780:
 18474  001F3E  0900               	iorlw	0
 18475  001F40  A4D8               	btfss	status,2,c
 18476  001F42  D7DD               	goto	l7029
 18477                           
 18478                           ;doprnt.c: 757: if(width > len)
 18479  001F44  0100               	movlb	0	; () banked
 18480  001F46  51A9               	movf	printf@width& (0+255),w,b
 18481  001F48  0100               	movlb	0	; () banked
 18482  001F4A  5DA3               	subwf	printf@len& (0+255),w,b
 18483  001F4C  0100               	movlb	0	; () banked
 18484  001F4E  51AA               	movf	(printf@width+1)& (0+255),w,b
 18485  001F50  0100               	movlb	0	; () banked
 18486  001F52  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 18487  001F54  B0D8               	btfsc	status,0,c
 18488  001F56  D009               	goto	l7037
 18489                           
 18490                           ; BSR set to: 0
 18491                           ;doprnt.c: 758: width -= len;
 18492  001F58  0100               	movlb	0	; () banked
 18493  001F5A  51A3               	movf	printf@len& (0+255),w,b
 18494  001F5C  0100               	movlb	0	; () banked
 18495  001F5E  5FA9               	subwf	printf@width& (0+255),f,b
 18496  001F60  0100               	movlb	0	; () banked
 18497  001F62  51A4               	movf	(printf@len+1)& (0+255),w,b
 18498  001F64  0100               	movlb	0	; () banked
 18499  001F66  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 18500  001F68  D009               	goto	l7041
 18501  001F6A                     l7037:
 18502                           
 18503                           ; BSR set to: 0
 18504                           ;doprnt.c: 759: else
 18505                           ;doprnt.c: 760: width = 0;
 18506  001F6A  0E00               	movlw	0
 18507  001F6C  0100               	movlb	0	; () banked
 18508  001F6E  6FAA               	movwf	(printf@width+1)& (0+255),b
 18509  001F70  0E00               	movlw	0
 18510  001F72  6FA9               	movwf	printf@width& (0+255),b
 18511                           
 18512                           ; BSR set to: 0
 18513                           ;doprnt.c: 764: while(width--)
 18514  001F74  D003               	goto	l7041
 18515  001F76                     l7039:
 18516                           
 18517                           ; BSR set to: 0
 18518                           ;doprnt.c: 765: (putch(' ') );
 18519  001F76  0E20               	movlw	32
 18520  001F78  EC65  F030         	call	_putch
 18521  001F7C                     l7041:
 18522  001F7C  0100               	movlb	0	; () banked
 18523  001F7E  07A9               	decf	printf@width& (0+255),f,b
 18524  001F80  A0D8               	btfss	status,0,c
 18525  001F82  07AA               	decf	(printf@width+1)& (0+255),f,b
 18526  001F84  0100               	movlb	0	; () banked
 18527  001F86  29A9               	incf	printf@width& (0+255),w,b
 18528  001F88  E1F6               	bnz	l7039
 18529  001F8A  0100               	movlb	0	; () banked
 18530  001F8C  29AA               	incf	(printf@width+1)& (0+255),w,b
 18531  001F8E  B4D8               	btfsc	status,2,c
 18532  001F90  D017               	goto	l7047
 18533  001F92  D7F1               	goto	l7039
 18534  001F94                     l7043:
 18535                           
 18536                           ; BSR set to: 0
 18537                           ;doprnt.c: 768: (putch(*cp++) );
 18538  001F94  C09F  FFF6         	movff	printf@cp,tblptrl
 18539  001F98  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 18540  001F9C  0E00               	movlw	low (__mediumconst shr (0+16))
 18541  001F9E  6EF8               	movwf	tblptru,c
 18542  001FA0  0E0F               	movlw	(high __ramtop+-1)
 18543  001FA2  64F7               	cpfsgt	tblptrh,c
 18544  001FA4  D003               	bra	u5827
 18545  001FA6  0008               	tblrd		*
 18546  001FA8  50F5               	movf	tablat,w,c
 18547  001FAA  D005               	bra	u5820
 18548  001FAC                     u5827:
 18549  001FAC  CFF6 FFE9          	movff	tblptrl,fsr0l
 18550  001FB0  CFF7 FFEA          	movff	tblptrh,fsr0h
 18551  001FB4  50EF               	movf	indf0,w,c
 18552  001FB6                     u5820:
 18553  001FB6  EC65  F030         	call	_putch
 18554  001FBA  0100               	movlb	0	; () banked
 18555  001FBC  4B9F               	infsnz	printf@cp& (0+255),f,b
 18556  001FBE  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 18557  001FC0                     l7047:
 18558                           
 18559                           ; BSR set to: 0
 18560  001FC0  0100               	movlb	0	; () banked
 18561  001FC2  07A3               	decf	printf@len& (0+255),f,b
 18562  001FC4  A0D8               	btfss	status,0,c
 18563  001FC6  07A4               	decf	(printf@len+1)& (0+255),f,b
 18564  001FC8  0100               	movlb	0	; () banked
 18565  001FCA  29A3               	incf	printf@len& (0+255),w,b
 18566  001FCC  E1E3               	bnz	l7043
 18567  001FCE  0100               	movlb	0	; () banked
 18568  001FD0  29A4               	incf	(printf@len+1)& (0+255),w,b
 18569  001FD2  B4D8               	btfsc	status,2,c
 18570  001FD4  D10A               	goto	l7125
 18571  001FD6  D7DE               	goto	l7043
 18572  001FD8                     l7049:
 18573                           
 18574                           ; BSR set to: 0
 18575                           ;doprnt.c: 818: flag |= 0x40;
 18576  001FD8  0100               	movlb	0	; () banked
 18577  001FDA  8DA7               	bsf	printf@flag& (0+255),6,b
 18578                           
 18579                           ; BSR set to: 0
 18580                           ;doprnt.c: 822: }
 18581                           
 18582                           ;doprnt.c: 819: break;
 18583  001FDC  D01D               	goto	l1591
 18584  001FDE                     l7053:
 18585  001FDE  C08E  FFF6         	movff	printf@f,tblptrl
 18586  001FE2  C08F  FFF7         	movff	printf@f+1,tblptrh
 18587  001FE6  0100               	movlb	0	; () banked
 18588  001FE8  4B8E               	infsnz	printf@f& (0+255),f,b
 18589  001FEA  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18590  001FEC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18591  001FEC  6AF8               	clrf	tblptru,c
 18592  001FEE                     	endif
 18593  001FEE                     	if	0	;tblptru may be non-zero
 18594  001FEE                     	endif
 18595  001FEE  0008               	tblrd		*
 18596  001FF0  CFF5 F0A8          	movff	tablat,printf@c
 18597  001FF4  0100               	movlb	0	; () banked
 18598  001FF6  51A8               	movf	printf@c& (0+255),w,b
 18599                           
 18600                           ; Switch size 1, requested type "space"
 18601                           ; Number of cases is 5, Range of values is 0 to 117
 18602                           ; switch strategies available:
 18603                           ; Name         Instructions Cycles
 18604                           ; simple_byte           16     9 (average)
 18605                           ;	Chosen strategy is simple_byte
 18606  001FF8  0A00               	xorlw	0	; case 0
 18607  001FFA  B4D8               	btfsc	status,2,c
 18608  001FFC  0012               	return	
 18609  001FFE  0A64               	xorlw	100	; case 100
 18610  002000  B4D8               	btfsc	status,2,c
 18611  002002  D00A               	goto	l1591
 18612  002004  0A0D               	xorlw	13	; case 105
 18613  002006  B4D8               	btfsc	status,2,c
 18614  002008  D007               	goto	l1591
 18615  00200A  0A1A               	xorlw	26	; case 115
 18616  00200C  B4D8               	btfsc	status,2,c
 18617  00200E  D758               	goto	l7019
 18618  002010  0A06               	xorlw	6	; case 117
 18619  002012  B4D8               	btfsc	status,2,c
 18620  002014  D7E1               	goto	l7049
 18621  002016  D0E9               	goto	l7125
 18622  002018                     l1591:
 18623                           
 18624                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 18625  002018  0100               	movlb	0	; () banked
 18626  00201A  BDA7               	btfsc	printf@flag& (0+255),6,b
 18627  00201C  D019               	goto	l7065
 18628                           
 18629                           ; BSR set to: 0
 18630                           ;doprnt.c: 1253: {
 18631                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 18632  00201E  C0A1  FFD9         	movff	printf@ap,fsr2l
 18633  002022  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 18634  002026  CFDE F0A5          	movff	postinc2,printf@val
 18635  00202A  CFDD F0A6          	movff	postdec2,printf@val+1
 18636                           
 18637                           ; BSR set to: 0
 18638  00202E  0E02               	movlw	2
 18639  002030  0100               	movlb	0	; () banked
 18640  002032  27A1               	addwf	printf@ap& (0+255),f,b
 18641  002034  0E00               	movlw	0
 18642  002036  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 18643                           
 18644                           ; BSR set to: 0
 18645                           ;doprnt.c: 1261: if((int)val < 0) {
 18646  002038  0100               	movlb	0	; () banked
 18647  00203A  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 18648  00203C  D016               	goto	l7069
 18649                           
 18650                           ; BSR set to: 0
 18651                           ;doprnt.c: 1262: flag |= 0x03;
 18652  00203E  0E03               	movlw	3
 18653  002040  0100               	movlb	0	; () banked
 18654  002042  13A7               	iorwf	printf@flag& (0+255),f,b
 18655                           
 18656                           ; BSR set to: 0
 18657                           ;doprnt.c: 1263: val = -val;
 18658  002044  0100               	movlb	0	; () banked
 18659  002046  6DA5               	negf	printf@val& (0+255),b
 18660  002048  1FA6               	comf	(printf@val+1)& (0+255),f,b
 18661  00204A  B0D8               	btfsc	status,0,c
 18662  00204C  2BA6               	incf	(printf@val+1)& (0+255),f,b
 18663                           
 18664                           ; BSR set to: 0
 18665                           ;doprnt.c: 1264: }
 18666                           ;doprnt.c: 1266: }
 18667  00204E  D00D               	goto	l7069
 18668  002050                     l7065:
 18669                           
 18670                           ; BSR set to: 0
 18671                           ;doprnt.c: 1268: else
 18672                           ;doprnt.c: 1273: {
 18673                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 18674  002050  C0A1  FFD9         	movff	printf@ap,fsr2l
 18675  002054  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 18676  002058  CFDE F0A5          	movff	postinc2,printf@val
 18677  00205C  CFDD F0A6          	movff	postdec2,printf@val+1
 18678                           
 18679                           ; BSR set to: 0
 18680  002060  0E02               	movlw	2
 18681  002062  0100               	movlb	0	; () banked
 18682  002064  27A1               	addwf	printf@ap& (0+255),f,b
 18683  002066  0E00               	movlw	0
 18684  002068  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 18685  00206A                     l7069:
 18686                           
 18687                           ; BSR set to: 0
 18688                           ;doprnt.c: 1287: }
 18689                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 18690  00206A  0E01               	movlw	1
 18691  00206C  0100               	movlb	0	; () banked
 18692  00206E  6FA8               	movwf	printf@c& (0+255),b
 18693  002070                     l7071:
 18694                           
 18695                           ; BSR set to: 0
 18696  002070  0E05               	movlw	5
 18697  002072  0100               	movlb	0	; () banked
 18698  002074  19A8               	xorwf	printf@c& (0+255),w,b
 18699  002076  B4D8               	btfsc	status,2,c
 18700  002078  D019               	goto	l7083
 18701                           
 18702                           ; BSR set to: 0
 18703                           ;doprnt.c: 1306: if(val < dpowers[c])
 18704                           
 18705                           ; BSR set to: 0
 18706                           
 18707                           ; BSR set to: 0
 18708  00207A  0100               	movlb	0	; () banked
 18709  00207C  51A8               	movf	printf@c& (0+255),w,b
 18710  00207E  0D02               	mullw	2
 18711  002080  0EB8               	movlw	low _dpowers
 18712  002082  24F3               	addwf	prodl,w,c
 18713  002084  6EF6               	movwf	tblptrl,c
 18714  002086  0EFA               	movlw	high _dpowers
 18715  002088  20F4               	addwfc	prodh,w,c
 18716  00208A  6EF7               	movwf	tblptrh,c
 18717  00208C                     	if	1	;There are 3 active tblptr bytes
 18718  00208C  6AF8               	clrf	tblptru,c
 18719  00208E  0E00               	movlw	low (__mediumconst shr (0+16))
 18720  002090  22F8               	addwfc	tblptru,f,c
 18721  002092                     	endif
 18722  002092  0009               	tblrd		*+
 18723  002094  50F5               	movf	tablat,w,c
 18724  002096  0100               	movlb	0	; () banked
 18725  002098  5DA5               	subwf	printf@val& (0+255),w,b
 18726  00209A  0009               	tblrd		*+
 18727  00209C  50F5               	movf	tablat,w,c
 18728  00209E  0100               	movlb	0	; () banked
 18729  0020A0  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 18730  0020A2  A0D8               	btfss	status,0,c
 18731  0020A4  D003               	goto	l7083
 18732                           
 18733                           ; BSR set to: 0
 18734                           
 18735                           ; BSR set to: 0
 18736                           
 18737                           ; BSR set to: 0
 18738                           ;doprnt.c: 1307: break;
 18739  0020A6  0100               	movlb	0	; () banked
 18740  0020A8  2BA8               	incf	printf@c& (0+255),f,b
 18741  0020AA  D7E2               	goto	l7071
 18742  0020AC                     l7083:
 18743                           
 18744                           ; BSR set to: 0
 18745                           ;doprnt.c: 1345: if(width && flag & 0x03)
 18746  0020AC  0100               	movlb	0	; () banked
 18747  0020AE  51A9               	movf	printf@width& (0+255),w,b
 18748  0020B0  0100               	movlb	0	; () banked
 18749  0020B2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18750  0020B4  B4D8               	btfsc	status,2,c
 18751  0020B6  D00B               	goto	l7089
 18752                           
 18753                           ; BSR set to: 0
 18754  0020B8  C0A7  F09A         	movff	printf@flag,??_printf
 18755  0020BC  0E03               	movlw	3
 18756  0020BE  0100               	movlb	0	; () banked
 18757  0020C0  179A               	andwf	??_printf& (0+255),f,b
 18758  0020C2  B4D8               	btfsc	status,2,c
 18759  0020C4  D004               	goto	l7089
 18760                           
 18761                           ; BSR set to: 0
 18762                           ;doprnt.c: 1346: width--;
 18763  0020C6  0100               	movlb	0	; () banked
 18764  0020C8  07A9               	decf	printf@width& (0+255),f,b
 18765  0020CA  A0D8               	btfss	status,0,c
 18766  0020CC  07AA               	decf	(printf@width+1)& (0+255),f,b
 18767  0020CE                     l7089:
 18768                           
 18769                           ; BSR set to: 0
 18770                           ;doprnt.c: 1381: if(width > c)
 18771  0020CE  0E80               	movlw	128
 18772  0020D0  0100               	movlb	0	; () banked
 18773  0020D2  BFA8               	btfsc	printf@c& (0+255),7,b
 18774  0020D4  0E7F               	movlw	127
 18775  0020D6  0100               	movlb	0	; () banked
 18776  0020D8  6F9A               	movwf	??_printf& (0+255),b
 18777  0020DA  0100               	movlb	0	; () banked
 18778  0020DC  51A9               	movf	printf@width& (0+255),w,b
 18779  0020DE  0100               	movlb	0	; () banked
 18780  0020E0  5DA8               	subwf	printf@c& (0+255),w,b
 18781  0020E2  0100               	movlb	0	; () banked
 18782  0020E4  51AA               	movf	(printf@width+1)& (0+255),w,b
 18783  0020E6  0A80               	xorlw	128
 18784  0020E8  0100               	movlb	0	; () banked
 18785  0020EA  599A               	subwfb	??_printf& (0+255),w,b
 18786  0020EC  B0D8               	btfsc	status,0,c
 18787  0020EE  D00B               	goto	l7093
 18788                           
 18789                           ; BSR set to: 0
 18790                           ;doprnt.c: 1382: width -= c;
 18791  0020F0  0100               	movlb	0	; () banked
 18792  0020F2  51A8               	movf	printf@c& (0+255),w,b
 18793  0020F4  0100               	movlb	0	; () banked
 18794  0020F6  5FA9               	subwf	printf@width& (0+255),f,b
 18795  0020F8  0E00               	movlw	0
 18796  0020FA  0100               	movlb	0	; () banked
 18797  0020FC  BFA8               	btfsc	printf@c& (0+255),7,b
 18798  0020FE  0EFF               	movlw	255
 18799  002100  0100               	movlb	0	; () banked
 18800  002102  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 18801  002104  D005               	goto	l7095
 18802  002106                     l7093:
 18803                           
 18804                           ; BSR set to: 0
 18805                           ;doprnt.c: 1383: else
 18806                           ;doprnt.c: 1384: width = 0;
 18807  002106  0E00               	movlw	0
 18808  002108  0100               	movlb	0	; () banked
 18809  00210A  6FAA               	movwf	(printf@width+1)& (0+255),b
 18810  00210C  0E00               	movlw	0
 18811  00210E  6FA9               	movwf	printf@width& (0+255),b
 18812  002110                     l7095:
 18813                           
 18814                           ; BSR set to: 0
 18815                           ;doprnt.c: 1387: if(flag & 0x04) {
 18816  002110  0100               	movlb	0	; () banked
 18817  002112  A5A7               	btfss	printf@flag& (0+255),2,b
 18818  002114  D018               	goto	l7107
 18819                           
 18820                           ; BSR set to: 0
 18821                           ;doprnt.c: 1392: if(flag & 0x03)
 18822  002116  C0A7  F09A         	movff	printf@flag,??_printf
 18823  00211A  0E03               	movlw	3
 18824  00211C  0100               	movlb	0	; () banked
 18825  00211E  179A               	andwf	??_printf& (0+255),f,b
 18826  002120  B4D8               	btfsc	status,2,c
 18827  002122  D003               	goto	l7101
 18828                           
 18829                           ; BSR set to: 0
 18830                           ;doprnt.c: 1393: (putch('-') );
 18831  002124  0E2D               	movlw	45
 18832  002126  EC65  F030         	call	_putch
 18833  00212A                     l7101:
 18834                           
 18835                           ;doprnt.c: 1415: if(width)
 18836  00212A  0100               	movlb	0	; () banked
 18837  00212C  51A9               	movf	printf@width& (0+255),w,b
 18838  00212E  0100               	movlb	0	; () banked
 18839  002130  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18840  002132  B4D8               	btfsc	status,2,c
 18841  002134  D025               	goto	l7117
 18842                           
 18843                           ; BSR set to: 0
 18844                           ;doprnt.c: 1417: (putch('0') );
 18845                           
 18846                           ; BSR set to: 0
 18847                           
 18848                           ;doprnt.c: 1416: do
 18849  002136  0E30               	movlw	48
 18850  002138  EC65  F030         	call	_putch
 18851                           
 18852                           ;doprnt.c: 1418: while(--width);
 18853  00213C  0100               	movlb	0	; () banked
 18854  00213E  07A9               	decf	printf@width& (0+255),f,b
 18855  002140  A0D8               	btfss	status,0,c
 18856  002142  07AA               	decf	(printf@width+1)& (0+255),f,b
 18857  002144  D7F2               	goto	l7101
 18858  002146                     l7107:
 18859                           
 18860                           ; BSR set to: 0
 18861                           ;doprnt.c: 1422: {
 18862                           ;doprnt.c: 1424: if(width
 18863                           ;doprnt.c: 1428: )
 18864  002146  0100               	movlb	0	; () banked
 18865  002148  51A9               	movf	printf@width& (0+255),w,b
 18866  00214A  0100               	movlb	0	; () banked
 18867  00214C  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18868  00214E  B4D8               	btfsc	status,2,c
 18869  002150  D00D               	goto	l7113
 18870  002152                     l7109:
 18871                           
 18872                           ; BSR set to: 0
 18873                           ;doprnt.c: 1430: (putch(' ') );
 18874  002152  0E20               	movlw	32
 18875  002154  EC65  F030         	call	_putch
 18876                           
 18877                           ;doprnt.c: 1431: while(--width);
 18878  002158  0100               	movlb	0	; () banked
 18879  00215A  07A9               	decf	printf@width& (0+255),f,b
 18880  00215C  A0D8               	btfss	status,0,c
 18881  00215E  07AA               	decf	(printf@width+1)& (0+255),f,b
 18882  002160  0100               	movlb	0	; () banked
 18883  002162  51A9               	movf	printf@width& (0+255),w,b
 18884  002164  0100               	movlb	0	; () banked
 18885  002166  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18886  002168  A4D8               	btfss	status,2,c
 18887  00216A  D7F3               	goto	l7109
 18888  00216C                     l7113:
 18889                           
 18890                           ; BSR set to: 0
 18891                           ;doprnt.c: 1438: if(flag & 0x03)
 18892  00216C  C0A7  F09A         	movff	printf@flag,??_printf
 18893  002170  0E03               	movlw	3
 18894  002172  0100               	movlb	0	; () banked
 18895  002174  179A               	andwf	??_printf& (0+255),f,b
 18896  002176  B4D8               	btfsc	status,2,c
 18897  002178  D003               	goto	l7117
 18898                           
 18899                           ; BSR set to: 0
 18900                           ;doprnt.c: 1439: (putch('-') );
 18901  00217A  0E2D               	movlw	45
 18902  00217C  EC65  F030         	call	_putch
 18903  002180                     l7117:
 18904                           
 18905                           ;doprnt.c: 1469: }
 18906                           ;doprnt.c: 1472: prec = c;
 18907  002180  C0A8  F09E         	movff	printf@c,printf@prec
 18908                           
 18909                           ;doprnt.c: 1474: while(prec--) {
 18910  002184  D02C               	goto	l7123
 18911  002186                     l7119:
 18912                           
 18913                           ;doprnt.c: 1478: {
 18914                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 18915  002186  0100               	movlb	0	; () banked
 18916  002188  519E               	movf	printf@prec& (0+255),w,b
 18917  00218A  0D02               	mullw	2
 18918  00218C  0EB8               	movlw	low _dpowers
 18919  00218E  24F3               	addwf	prodl,w,c
 18920  002190  6EF6               	movwf	tblptrl,c
 18921  002192  0EFA               	movlw	high _dpowers
 18922  002194  20F4               	addwfc	prodh,w,c
 18923  002196  6EF7               	movwf	tblptrh,c
 18924  002198                     	if	1	;There are 3 active tblptr bytes
 18925  002198  6AF8               	clrf	tblptru,c
 18926  00219A  0E00               	movlw	low (__mediumconst shr (0+16))
 18927  00219C  22F8               	addwfc	tblptru,f,c
 18928  00219E                     	endif
 18929  00219E  0009               	tblrd		*+
 18930  0021A0  CFF5 F082          	movff	tablat,___lwdiv@divisor
 18931  0021A4  000A               	tblrd		*-
 18932  0021A6  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 18933  0021AA  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 18934  0021AE  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 18935  0021B2  EC6F  F02A         	call	___lwdiv	;wreg free
 18936  0021B6  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 18937  0021BA  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 18938  0021BE  0E00               	movlw	0
 18939  0021C0  0100               	movlb	0	; () banked
 18940  0021C2  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 18941  0021C4  0E0A               	movlw	10
 18942  0021C6  6F89               	movwf	___lwmod@divisor& (0+255),b
 18943  0021C8  ECB8  F02B         	call	___lwmod	;wreg free
 18944  0021CC  0100               	movlb	0	; () banked
 18945  0021CE  5187               	movf	?___lwmod& (0+255),w,b
 18946  0021D0  0F30               	addlw	48
 18947  0021D2  0100               	movlb	0	; () banked
 18948  0021D4  6FA8               	movwf	printf@c& (0+255),b
 18949                           
 18950                           ; BSR set to: 0
 18951                           ;doprnt.c: 1523: }
 18952                           ;doprnt.c: 1524: (putch(c) );
 18953  0021D6  0100               	movlb	0	; () banked
 18954  0021D8  51A8               	movf	printf@c& (0+255),w,b
 18955  0021DA  EC65  F030         	call	_putch
 18956  0021DE                     l7123:
 18957  0021DE  0100               	movlb	0	; () banked
 18958  0021E0  079E               	decf	printf@prec& (0+255),f,b
 18959  0021E2  0100               	movlb	0	; () banked
 18960  0021E4  299E               	incf	printf@prec& (0+255),w,b
 18961  0021E6  A4D8               	btfss	status,2,c
 18962  0021E8  D7CE               	goto	l7119
 18963  0021EA                     l7125:
 18964  0021EA  C08E  FFF6         	movff	printf@f,tblptrl
 18965  0021EE  C08F  FFF7         	movff	printf@f+1,tblptrh
 18966  0021F2  0100               	movlb	0	; () banked
 18967  0021F4  4B8E               	infsnz	printf@f& (0+255),f,b
 18968  0021F6  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18969  0021F8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18970  0021F8  6AF8               	clrf	tblptru,c
 18971  0021FA                     	endif
 18972  0021FA                     	if	0	;tblptru may be non-zero
 18973  0021FA                     	endif
 18974  0021FA  0008               	tblrd		*
 18975  0021FC  CFF5 F0A8          	movff	tablat,printf@c
 18976  002200  0100               	movlb	0	; () banked
 18977  002202  51A8               	movf	printf@c& (0+255),w,b
 18978  002204  B4D8               	btfsc	status,2,c
 18979  002206  0012               	return	
 18980  002208  D5EB               	goto	l6995
 18981  00220A                     __end_of_printf:
 18982                           	opt stack 0
 18983                           tblptru	equ	0xFF8
 18984                           tblptrh	equ	0xFF7
 18985                           tblptrl	equ	0xFF6
 18986                           tablat	equ	0xFF5
 18987                           prodh	equ	0xFF4
 18988                           prodl	equ	0xFF3
 18989                           intcon	equ	0xFF2
 18990                           intcon2	equ	0xFF1
 18991                           intcon3	equ	0xFF0
 18992                           indf0	equ	0xFEF
 18993                           postinc0	equ	0xFEE
 18994                           fsr0h	equ	0xFEA
 18995                           fsr0l	equ	0xFE9
 18996                           wreg	equ	0xFE8
 18997                           postdec1	equ	0xFE5
 18998                           fsr1l	equ	0xFE1
 18999                           indf2	equ	0xFDF
 19000                           postinc2	equ	0xFDE
 19001                           postdec2	equ	0xFDD
 19002                           fsr2h	equ	0xFDA
 19003                           fsr2l	equ	0xFD9
 19004                           status	equ	0xFD8
 19005                           
 19006 ;; *************** function _putch *****************
 19007 ;; Defined at:
 19008 ;;		line 20 in file "lcd.c"
 19009 ;; Parameters:    Size  Location     Type
 19010 ;;  data            1    wreg     unsigned char 
 19011 ;; Auto vars:     Size  Location     Type
 19012 ;;  data            1    2[BANK0 ] unsigned char 
 19013 ;; Return value:  Size  Location     Type
 19014 ;;                  1    wreg      void 
 19015 ;; Registers used:
 19016 ;;		wreg, status,2, status,0, cstack
 19017 ;; Tracked objects:
 19018 ;;		On entry : 0/0
 19019 ;;		On exit  : 0/0
 19020 ;;		Unchanged: 0/0
 19021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19023 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19025 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19026 ;;Total ram usage:        1 bytes
 19027 ;; Hardware stack levels used:    1
 19028 ;; Hardware stack levels required when called:    8
 19029 ;; This function calls:
 19030 ;;		_lcdNibble
 19031 ;; This function is called by:
 19032 ;;		_printf
 19033 ;; This function uses a non-reentrant model
 19034 ;;
 19035                           
 19036                           	psect	text57
 19037  0060CA                     __ptext57:
 19038                           	opt stack 0
 19039  0060CA                     _putch:
 19040                           	opt stack 18
 19041                           
 19042                           ;incstack = 0
 19043                           ;putch@data stored from wreg
 19044  0060CA  0100               	movlb	0	; () banked
 19045  0060CC  6F82               	movwf	putch@data& (0+255),b
 19046                           
 19047                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 19048  0060CE  848C               	bsf	3980,2,c	;volatile
 19049                           
 19050                           ;lcd.c: 22: lcdNibble(data);
 19051  0060D0  0100               	movlb	0	; () banked
 19052  0060D2  5182               	movf	putch@data& (0+255),w,b
 19053  0060D4  EC1C  F02B         	call	_lcdNibble
 19054  0060D8  0012               	return		;funcret
 19055  0060DA                     __end_of_putch:
 19056                           	opt stack 0
 19057                           tblptru	equ	0xFF8
 19058                           tblptrh	equ	0xFF7
 19059                           tblptrl	equ	0xFF6
 19060                           tablat	equ	0xFF5
 19061                           prodh	equ	0xFF4
 19062                           prodl	equ	0xFF3
 19063                           intcon	equ	0xFF2
 19064                           intcon2	equ	0xFF1
 19065                           intcon3	equ	0xFF0
 19066                           indf0	equ	0xFEF
 19067                           postinc0	equ	0xFEE
 19068                           fsr0h	equ	0xFEA
 19069                           fsr0l	equ	0xFE9
 19070                           wreg	equ	0xFE8
 19071                           postdec1	equ	0xFE5
 19072                           fsr1l	equ	0xFE1
 19073                           indf2	equ	0xFDF
 19074                           postinc2	equ	0xFDE
 19075                           postdec2	equ	0xFDD
 19076                           fsr2h	equ	0xFDA
 19077                           fsr2l	equ	0xFD9
 19078                           status	equ	0xFD8
 19079                           
 19080 ;; *************** function _isdigit *****************
 19081 ;; Defined at:
 19082 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 19083 ;; Parameters:    Size  Location     Type
 19084 ;;  c               1    wreg     unsigned char 
 19085 ;; Auto vars:     Size  Location     Type
 19086 ;;  c               1    2[BANK0 ] unsigned char 
 19087 ;; Return value:  Size  Location     Type
 19088 ;;		None               void
 19089 ;; Registers used:
 19090 ;;		wreg, status,2, status,0
 19091 ;; Tracked objects:
 19092 ;;		On entry : 0/0
 19093 ;;		On exit  : 0/0
 19094 ;;		Unchanged: 0/0
 19095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19097 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19098 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19099 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19100 ;;Total ram usage:        3 bytes
 19101 ;; Hardware stack levels used:    1
 19102 ;; Hardware stack levels required when called:    7
 19103 ;; This function calls:
 19104 ;;		Nothing
 19105 ;; This function is called by:
 19106 ;;		_printf
 19107 ;; This function uses a non-reentrant model
 19108 ;;
 19109                           
 19110                           	psect	text58
 19111  005EF8                     __ptext58:
 19112                           	opt stack 0
 19113  005EF8                     _isdigit:
 19114                           	opt stack 19
 19115                           
 19116                           ;incstack = 0
 19117                           ;isdigit@c stored from wreg
 19118  005EF8  0100               	movlb	0	; () banked
 19119  005EFA  6F82               	movwf	isdigit@c& (0+255),b
 19120  005EFC  0E00               	movlw	0
 19121  005EFE  0100               	movlb	0	; () banked
 19122  005F00  6F81               	movwf	_isdigit$2081& (0+255),b
 19123                           
 19124                           ; BSR set to: 0
 19125  005F02  0E3A               	movlw	58
 19126  005F04  0100               	movlb	0	; () banked
 19127  005F06  6182               	cpfslt	isdigit@c& (0+255),b
 19128  005F08  D007               	goto	l6833
 19129                           
 19130                           ; BSR set to: 0
 19131  005F0A  0E2F               	movlw	47
 19132  005F0C  0100               	movlb	0	; () banked
 19133  005F0E  6582               	cpfsgt	isdigit@c& (0+255),b
 19134  005F10  D003               	goto	l6833
 19135                           
 19136                           ; BSR set to: 0
 19137  005F12  0E01               	movlw	1
 19138  005F14  0100               	movlb	0	; () banked
 19139  005F16  6F81               	movwf	_isdigit$2081& (0+255),b
 19140  005F18                     l6833:
 19141                           
 19142                           ; BSR set to: 0
 19143  005F18  C081  F080         	movff	_isdigit$2081,??_isdigit
 19144  005F1C  0100               	movlb	0	; () banked
 19145  005F1E  3180               	rrcf	??_isdigit& (0+255),w,b
 19146  005F20  0012               	return	
 19147  005F22                     __end_of_isdigit:
 19148                           	opt stack 0
 19149                           tblptru	equ	0xFF8
 19150                           tblptrh	equ	0xFF7
 19151                           tblptrl	equ	0xFF6
 19152                           tablat	equ	0xFF5
 19153                           prodh	equ	0xFF4
 19154                           prodl	equ	0xFF3
 19155                           intcon	equ	0xFF2
 19156                           intcon2	equ	0xFF1
 19157                           intcon3	equ	0xFF0
 19158                           indf0	equ	0xFEF
 19159                           postinc0	equ	0xFEE
 19160                           fsr0h	equ	0xFEA
 19161                           fsr0l	equ	0xFE9
 19162                           wreg	equ	0xFE8
 19163                           postdec1	equ	0xFE5
 19164                           fsr1l	equ	0xFE1
 19165                           indf2	equ	0xFDF
 19166                           postinc2	equ	0xFDE
 19167                           postdec2	equ	0xFDD
 19168                           fsr2h	equ	0xFDA
 19169                           fsr2l	equ	0xFD9
 19170                           status	equ	0xFD8
 19171                           
 19172 ;; *************** function ___wmul *****************
 19173 ;; Defined at:
 19174 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 19175 ;; Parameters:    Size  Location     Type
 19176 ;;  multiplier      2    0[BANK0 ] unsigned int 
 19177 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 19178 ;; Auto vars:     Size  Location     Type
 19179 ;;  product         2    4[BANK0 ] unsigned int 
 19180 ;; Return value:  Size  Location     Type
 19181 ;;                  2    0[BANK0 ] unsigned int 
 19182 ;; Registers used:
 19183 ;;		wreg, status,2, status,0, prodl, prodh
 19184 ;; Tracked objects:
 19185 ;;		On entry : 0/0
 19186 ;;		On exit  : 0/0
 19187 ;;		Unchanged: 0/0
 19188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19189 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19190 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19192 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19193 ;;Total ram usage:        6 bytes
 19194 ;; Hardware stack levels used:    1
 19195 ;; Hardware stack levels required when called:    7
 19196 ;; This function calls:
 19197 ;;		Nothing
 19198 ;; This function is called by:
 19199 ;;		_printf
 19200 ;; This function uses a non-reentrant model
 19201 ;;
 19202                           
 19203                           	psect	text59
 19204  005BCC                     __ptext59:
 19205                           	opt stack 0
 19206  005BCC                     ___wmul:
 19207                           	opt stack 19
 19208                           
 19209                           ; BSR set to: 0
 19210                           ;incstack = 0
 19211  005BCC  0100               	movlb	0	; () banked
 19212  005BCE  5180               	movf	___wmul@multiplier& (0+255),w,b
 19213  005BD0  0100               	movlb	0	; () banked
 19214  005BD2  0382               	mulwf	___wmul@multiplicand& (0+255),b
 19215  005BD4  CFF3 F084          	movff	prodl,___wmul@product
 19216  005BD8  CFF4 F085          	movff	prodh,___wmul@product+1
 19217  005BDC  0100               	movlb	0	; () banked
 19218  005BDE  5180               	movf	___wmul@multiplier& (0+255),w,b
 19219  005BE0  0100               	movlb	0	; () banked
 19220  005BE2  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 19221  005BE4  50F3               	movf	prodl,w,c
 19222  005BE6  0100               	movlb	0	; () banked
 19223  005BE8  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 19224  005BEA  0100               	movlb	0	; () banked
 19225  005BEC  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 19226  005BEE  0100               	movlb	0	; () banked
 19227  005BF0  0382               	mulwf	___wmul@multiplicand& (0+255),b
 19228  005BF2  50F3               	movf	prodl,w,c
 19229  005BF4  0100               	movlb	0	; () banked
 19230  005BF6  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 19231                           
 19232                           ; BSR set to: 0
 19233  005BF8  C084  F080         	movff	___wmul@product,?___wmul
 19234  005BFC  C085  F081         	movff	___wmul@product+1,?___wmul+1
 19235  005C00  0012               	return	
 19236  005C02                     __end_of___wmul:
 19237                           	opt stack 0
 19238                           tblptru	equ	0xFF8
 19239                           tblptrh	equ	0xFF7
 19240                           tblptrl	equ	0xFF6
 19241                           tablat	equ	0xFF5
 19242                           prodh	equ	0xFF4
 19243                           prodl	equ	0xFF3
 19244                           intcon	equ	0xFF2
 19245                           intcon2	equ	0xFF1
 19246                           intcon3	equ	0xFF0
 19247                           indf0	equ	0xFEF
 19248                           postinc0	equ	0xFEE
 19249                           fsr0h	equ	0xFEA
 19250                           fsr0l	equ	0xFE9
 19251                           wreg	equ	0xFE8
 19252                           postdec1	equ	0xFE5
 19253                           fsr1l	equ	0xFE1
 19254                           indf2	equ	0xFDF
 19255                           postinc2	equ	0xFDE
 19256                           postdec2	equ	0xFDD
 19257                           fsr2h	equ	0xFDA
 19258                           fsr2l	equ	0xFD9
 19259                           status	equ	0xFD8
 19260                           
 19261 ;; *************** function ___lwmod *****************
 19262 ;; Defined at:
 19263 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 19264 ;; Parameters:    Size  Location     Type
 19265 ;;  dividend        2    7[BANK0 ] unsigned int 
 19266 ;;  divisor         2    9[BANK0 ] unsigned int 
 19267 ;; Auto vars:     Size  Location     Type
 19268 ;;  counter         1   11[BANK0 ] unsigned char 
 19269 ;; Return value:  Size  Location     Type
 19270 ;;                  2    7[BANK0 ] unsigned int 
 19271 ;; Registers used:
 19272 ;;		wreg, status,2, status,0
 19273 ;; Tracked objects:
 19274 ;;		On entry : 0/0
 19275 ;;		On exit  : 0/0
 19276 ;;		Unchanged: 0/0
 19277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19278 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19279 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19281 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19282 ;;Total ram usage:        5 bytes
 19283 ;; Hardware stack levels used:    1
 19284 ;; Hardware stack levels required when called:    7
 19285 ;; This function calls:
 19286 ;;		Nothing
 19287 ;; This function is called by:
 19288 ;;		_printf
 19289 ;; This function uses a non-reentrant model
 19290 ;;
 19291                           
 19292                           	psect	text60
 19293  005770                     __ptext60:
 19294                           	opt stack 0
 19295  005770                     ___lwmod:
 19296                           	opt stack 19
 19297                           
 19298                           ; BSR set to: 0
 19299                           ;incstack = 0
 19300  005770  0100               	movlb	0	; () banked
 19301  005772  5189               	movf	___lwmod@divisor& (0+255),w,b
 19302  005774  0100               	movlb	0	; () banked
 19303  005776  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 19304  005778  B4D8               	btfsc	status,2,c
 19305  00577A  D026               	goto	l2048
 19306                           
 19307                           ; BSR set to: 0
 19308  00577C  0E01               	movlw	1
 19309  00577E  0100               	movlb	0	; () banked
 19310  005780  6F8B               	movwf	___lwmod@counter& (0+255),b
 19311  005782  D006               	goto	l6871
 19312  005784                     l6869:
 19313                           
 19314                           ; BSR set to: 0
 19315  005784  0100               	movlb	0	; () banked
 19316  005786  90D8               	bcf	status,0,c
 19317  005788  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 19318  00578A  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 19319  00578C  0100               	movlb	0	; () banked
 19320  00578E  2B8B               	incf	___lwmod@counter& (0+255),f,b
 19321  005790                     l6871:
 19322                           
 19323                           ; BSR set to: 0
 19324  005790  0100               	movlb	0	; () banked
 19325  005792  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 19326  005794  D7F7               	goto	l6869
 19327  005796                     l6873:
 19328                           
 19329                           ; BSR set to: 0
 19330  005796  0100               	movlb	0	; () banked
 19331  005798  5189               	movf	___lwmod@divisor& (0+255),w,b
 19332  00579A  0100               	movlb	0	; () banked
 19333  00579C  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 19334  00579E  0100               	movlb	0	; () banked
 19335  0057A0  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 19336  0057A2  0100               	movlb	0	; () banked
 19337  0057A4  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 19338  0057A6  A0D8               	btfss	status,0,c
 19339  0057A8  D008               	goto	l6877
 19340                           
 19341                           ; BSR set to: 0
 19342  0057AA  0100               	movlb	0	; () banked
 19343  0057AC  5189               	movf	___lwmod@divisor& (0+255),w,b
 19344  0057AE  0100               	movlb	0	; () banked
 19345  0057B0  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 19346  0057B2  0100               	movlb	0	; () banked
 19347  0057B4  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 19348  0057B6  0100               	movlb	0	; () banked
 19349  0057B8  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 19350  0057BA                     l6877:
 19351                           
 19352                           ; BSR set to: 0
 19353  0057BA  0100               	movlb	0	; () banked
 19354  0057BC  90D8               	bcf	status,0,c
 19355  0057BE  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 19356  0057C0  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 19357                           
 19358                           ; BSR set to: 0
 19359  0057C2  0100               	movlb	0	; () banked
 19360  0057C4  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 19361  0057C6  D7E7               	goto	l6873
 19362  0057C8                     l2048:
 19363                           
 19364                           ; BSR set to: 0
 19365  0057C8  C087  F087         	movff	___lwmod@dividend,?___lwmod
 19366  0057CC  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 19367                           
 19368                           ; BSR set to: 0
 19369  0057D0  0012               	return		;funcret
 19370  0057D2                     __end_of___lwmod:
 19371                           	opt stack 0
 19372                           tblptru	equ	0xFF8
 19373                           tblptrh	equ	0xFF7
 19374                           tblptrl	equ	0xFF6
 19375                           tablat	equ	0xFF5
 19376                           prodh	equ	0xFF4
 19377                           prodl	equ	0xFF3
 19378                           intcon	equ	0xFF2
 19379                           intcon2	equ	0xFF1
 19380                           intcon3	equ	0xFF0
 19381                           indf0	equ	0xFEF
 19382                           postinc0	equ	0xFEE
 19383                           fsr0h	equ	0xFEA
 19384                           fsr0l	equ	0xFE9
 19385                           wreg	equ	0xFE8
 19386                           postdec1	equ	0xFE5
 19387                           fsr1l	equ	0xFE1
 19388                           indf2	equ	0xFDF
 19389                           postinc2	equ	0xFDE
 19390                           postdec2	equ	0xFDD
 19391                           fsr2h	equ	0xFDA
 19392                           fsr2l	equ	0xFD9
 19393                           status	equ	0xFD8
 19394                           
 19395 ;; *************** function ___lwdiv *****************
 19396 ;; Defined at:
 19397 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 19398 ;; Parameters:    Size  Location     Type
 19399 ;;  dividend        2    0[BANK0 ] unsigned int 
 19400 ;;  divisor         2    2[BANK0 ] unsigned int 
 19401 ;; Auto vars:     Size  Location     Type
 19402 ;;  quotient        2    4[BANK0 ] unsigned int 
 19403 ;;  counter         1    6[BANK0 ] unsigned char 
 19404 ;; Return value:  Size  Location     Type
 19405 ;;                  2    0[BANK0 ] unsigned int 
 19406 ;; Registers used:
 19407 ;;		wreg, status,2, status,0
 19408 ;; Tracked objects:
 19409 ;;		On entry : 0/0
 19410 ;;		On exit  : 0/0
 19411 ;;		Unchanged: 0/0
 19412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19413 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19414 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19416 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19417 ;;Total ram usage:        7 bytes
 19418 ;; Hardware stack levels used:    1
 19419 ;; Hardware stack levels required when called:    7
 19420 ;; This function calls:
 19421 ;;		Nothing
 19422 ;; This function is called by:
 19423 ;;		_printf
 19424 ;; This function uses a non-reentrant model
 19425 ;;
 19426                           
 19427                           	psect	text61
 19428  0054DE                     __ptext61:
 19429                           	opt stack 0
 19430  0054DE                     ___lwdiv:
 19431                           	opt stack 19
 19432                           
 19433                           ; BSR set to: 0
 19434                           ;incstack = 0
 19435  0054DE  0E00               	movlw	0
 19436  0054E0  0100               	movlb	0	; () banked
 19437  0054E2  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 19438  0054E4  0E00               	movlw	0
 19439  0054E6  6F84               	movwf	___lwdiv@quotient& (0+255),b
 19440                           
 19441                           ; BSR set to: 0
 19442  0054E8  0100               	movlb	0	; () banked
 19443  0054EA  5182               	movf	___lwdiv@divisor& (0+255),w,b
 19444  0054EC  0100               	movlb	0	; () banked
 19445  0054EE  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 19446  0054F0  B4D8               	btfsc	status,2,c
 19447  0054F2  D02C               	goto	l2038
 19448                           
 19449                           ; BSR set to: 0
 19450  0054F4  0E01               	movlw	1
 19451  0054F6  0100               	movlb	0	; () banked
 19452  0054F8  6F86               	movwf	___lwdiv@counter& (0+255),b
 19453  0054FA  D006               	goto	l6851
 19454  0054FC                     l6849:
 19455                           
 19456                           ; BSR set to: 0
 19457  0054FC  0100               	movlb	0	; () banked
 19458  0054FE  90D8               	bcf	status,0,c
 19459  005500  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 19460  005502  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 19461  005504  0100               	movlb	0	; () banked
 19462  005506  2B86               	incf	___lwdiv@counter& (0+255),f,b
 19463  005508                     l6851:
 19464                           
 19465                           ; BSR set to: 0
 19466  005508  0100               	movlb	0	; () banked
 19467  00550A  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 19468  00550C  D7F7               	goto	l6849
 19469  00550E                     l6853:
 19470                           
 19471                           ; BSR set to: 0
 19472  00550E  0100               	movlb	0	; () banked
 19473  005510  90D8               	bcf	status,0,c
 19474  005512  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 19475  005514  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 19476                           
 19477                           ; BSR set to: 0
 19478  005516  0100               	movlb	0	; () banked
 19479  005518  5182               	movf	___lwdiv@divisor& (0+255),w,b
 19480  00551A  0100               	movlb	0	; () banked
 19481  00551C  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 19482  00551E  0100               	movlb	0	; () banked
 19483  005520  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 19484  005522  0100               	movlb	0	; () banked
 19485  005524  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 19486  005526  A0D8               	btfss	status,0,c
 19487  005528  D00A               	goto	l6861
 19488                           
 19489                           ; BSR set to: 0
 19490  00552A  0100               	movlb	0	; () banked
 19491  00552C  5182               	movf	___lwdiv@divisor& (0+255),w,b
 19492  00552E  0100               	movlb	0	; () banked
 19493  005530  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 19494  005532  0100               	movlb	0	; () banked
 19495  005534  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 19496  005536  0100               	movlb	0	; () banked
 19497  005538  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 19498                           
 19499                           ; BSR set to: 0
 19500  00553A  0100               	movlb	0	; () banked
 19501  00553C  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 19502  00553E                     l6861:
 19503                           
 19504                           ; BSR set to: 0
 19505  00553E  0100               	movlb	0	; () banked
 19506  005540  90D8               	bcf	status,0,c
 19507  005542  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 19508  005544  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 19509                           
 19510                           ; BSR set to: 0
 19511  005546  0100               	movlb	0	; () banked
 19512  005548  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 19513  00554A  D7E1               	goto	l6853
 19514  00554C                     l2038:
 19515                           
 19516                           ; BSR set to: 0
 19517  00554C  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 19518  005550  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 19519                           
 19520                           ; BSR set to: 0
 19521  005554  0012               	return		;funcret
 19522  005556                     __end_of___lwdiv:
 19523                           	opt stack 0
 19524                           tblptru	equ	0xFF8
 19525                           tblptrh	equ	0xFF7
 19526                           tblptrl	equ	0xFF6
 19527                           tablat	equ	0xFF5
 19528                           prodh	equ	0xFF4
 19529                           prodl	equ	0xFF3
 19530                           intcon	equ	0xFF2
 19531                           intcon2	equ	0xFF1
 19532                           intcon3	equ	0xFF0
 19533                           indf0	equ	0xFEF
 19534                           postinc0	equ	0xFEE
 19535                           fsr0h	equ	0xFEA
 19536                           fsr0l	equ	0xFE9
 19537                           wreg	equ	0xFE8
 19538                           postdec1	equ	0xFE5
 19539                           fsr1l	equ	0xFE1
 19540                           indf2	equ	0xFDF
 19541                           postinc2	equ	0xFDE
 19542                           postdec2	equ	0xFDD
 19543                           fsr2h	equ	0xFDA
 19544                           fsr2l	equ	0xFD9
 19545                           status	equ	0xFD8
 19546                           
 19547 ;; *************** function _lcdInst *****************
 19548 ;; Defined at:
 19549 ;;		line 15 in file "lcd.c"
 19550 ;; Parameters:    Size  Location     Type
 19551 ;;  data            1    wreg     unsigned char 
 19552 ;; Auto vars:     Size  Location     Type
 19553 ;;  data            1    2[BANK0 ] unsigned char 
 19554 ;; Return value:  Size  Location     Type
 19555 ;;                  1    wreg      void 
 19556 ;; Registers used:
 19557 ;;		wreg, status,2, status,0, cstack
 19558 ;; Tracked objects:
 19559 ;;		On entry : 0/0
 19560 ;;		On exit  : 0/0
 19561 ;;		Unchanged: 0/0
 19562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19564 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19566 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19567 ;;Total ram usage:        1 bytes
 19568 ;; Hardware stack levels used:    1
 19569 ;; Hardware stack levels required when called:    8
 19570 ;; This function calls:
 19571 ;;		_lcdNibble
 19572 ;; This function is called by:
 19573 ;;		_UI
 19574 ;;		_change_state_to_menu_start
 19575 ;;		_change_state_to_menu_12
 19576 ;;		_change_state_to_menu_22
 19577 ;;		_initLCD
 19578 ;;		_printRTC
 19579 ;;		_Loading
 19580 ;;		_EEPROM_write
 19581 ;;		_Test
 19582 ;;		_algorithmTest
 19583 ;;		_sensorTest
 19584 ;;		_actuatorTest
 19585 ;;		_BothServos
 19586 ;;		_PortTestDC
 19587 ;;		_PlatformTest
 19588 ;;		_SpeedTest
 19589 ;;		_BlockerTest
 19590 ;;		_arm
 19591 ;;		_PortTestPusher
 19592 ;; This function uses a non-reentrant model
 19593 ;;
 19594                           
 19595                           	psect	text62
 19596  0060DA                     __ptext62:
 19597                           	opt stack 0
 19598  0060DA                     _lcdInst:
 19599                           	opt stack 20
 19600                           
 19601                           ; BSR set to: 0
 19602                           ;incstack = 0
 19603                           ;lcdInst@data stored from wreg
 19604  0060DA  0100               	movlb	0	; () banked
 19605  0060DC  6F82               	movwf	lcdInst@data& (0+255),b
 19606                           
 19607                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 19608  0060DE  948C               	bcf	3980,2,c	;volatile
 19609                           
 19610                           ;lcd.c: 17: lcdNibble(data);
 19611  0060E0  0100               	movlb	0	; () banked
 19612  0060E2  5182               	movf	lcdInst@data& (0+255),w,b
 19613  0060E4  EC1C  F02B         	call	_lcdNibble
 19614  0060E8  0012               	return		;funcret
 19615  0060EA                     __end_of_lcdInst:
 19616                           	opt stack 0
 19617                           tblptru	equ	0xFF8
 19618                           tblptrh	equ	0xFF7
 19619                           tblptrl	equ	0xFF6
 19620                           tablat	equ	0xFF5
 19621                           prodh	equ	0xFF4
 19622                           prodl	equ	0xFF3
 19623                           intcon	equ	0xFF2
 19624                           intcon2	equ	0xFF1
 19625                           intcon3	equ	0xFF0
 19626                           indf0	equ	0xFEF
 19627                           postinc0	equ	0xFEE
 19628                           fsr0h	equ	0xFEA
 19629                           fsr0l	equ	0xFE9
 19630                           wreg	equ	0xFE8
 19631                           postdec1	equ	0xFE5
 19632                           fsr1l	equ	0xFE1
 19633                           indf2	equ	0xFDF
 19634                           postinc2	equ	0xFDE
 19635                           postdec2	equ	0xFDD
 19636                           fsr2h	equ	0xFDA
 19637                           fsr2l	equ	0xFD9
 19638                           status	equ	0xFD8
 19639                           
 19640 ;; *************** function _lcdNibble *****************
 19641 ;; Defined at:
 19642 ;;		line 25 in file "lcd.c"
 19643 ;; Parameters:    Size  Location     Type
 19644 ;;  data            1    wreg     unsigned char 
 19645 ;; Auto vars:     Size  Location     Type
 19646 ;;  data            1    1[BANK0 ] unsigned char 
 19647 ;;  temp            1    0[BANK0 ] unsigned char 
 19648 ;; Return value:  Size  Location     Type
 19649 ;;                  1    wreg      void 
 19650 ;; Registers used:
 19651 ;;		wreg, status,2, status,0
 19652 ;; Tracked objects:
 19653 ;;		On entry : 0/0
 19654 ;;		On exit  : 0/0
 19655 ;;		Unchanged: 0/0
 19656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19658 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19660 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19661 ;;Total ram usage:        2 bytes
 19662 ;; Hardware stack levels used:    1
 19663 ;; Hardware stack levels required when called:    7
 19664 ;; This function calls:
 19665 ;;		Nothing
 19666 ;; This function is called by:
 19667 ;;		_lcdInst
 19668 ;;		_putch
 19669 ;; This function uses a non-reentrant model
 19670 ;;
 19671                           
 19672                           	psect	text63
 19673  005638                     __ptext63:
 19674                           	opt stack 0
 19675  005638                     _lcdNibble:
 19676                           	opt stack 20
 19677                           
 19678                           ;incstack = 0
 19679                           ;lcdNibble@data stored from wreg
 19680  005638  0100               	movlb	0	; () banked
 19681  00563A  6F81               	movwf	lcdNibble@data& (0+255),b
 19682                           
 19683                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 19684  00563C  9EF2               	bcf	intcon,7,c	;volatile
 19685                           
 19686                           ;lcd.c: 28: char temp = data & 0xF0;
 19687  00563E  0100               	movlb	0	; () banked
 19688  005640  5181               	movf	lcdNibble@data& (0+255),w,b
 19689  005642  0BF0               	andlw	240
 19690  005644  0100               	movlb	0	; () banked
 19691  005646  6F80               	movwf	lcdNibble@temp& (0+255),b
 19692                           
 19693                           ;lcd.c: 29: LATD = LATD & 0x0F;
 19694  005648  508C               	movf	3980,w,c	;volatile
 19695  00564A  0B0F               	andlw	15
 19696  00564C  6E8C               	movwf	3980,c	;volatile
 19697                           
 19698                           ;lcd.c: 30: LATD = temp | LATD;
 19699  00564E  0100               	movlb	0	; () banked
 19700  005650  5180               	movf	lcdNibble@temp& (0+255),w,b
 19701  005652  108C               	iorwf	3980,w,c	;volatile
 19702  005654  6E8C               	movwf	3980,c	;volatile
 19703                           
 19704                           ; BSR set to: 0
 19705                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 19706  005656  868C               	bsf	3980,3,c	;volatile
 19707                           
 19708                           ; BSR set to: 0
 19709                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19710  005658  0E42               	movlw	66
 19711  00565A                     u12447:
 19712  00565A  2EE8               	decfsz	wreg,f,c
 19713  00565C  D7FE               	bra	u12447
 19714  00565E  D000               	nop2	
 19715                           
 19716                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 19717  005660  968C               	bcf	3980,3,c	;volatile
 19718                           
 19719                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19720  005662  0E42               	movlw	66
 19721  005664                     u12457:
 19722  005664  2EE8               	decfsz	wreg,f,c
 19723  005666  D7FE               	bra	u12457
 19724  005668  D000               	nop2	
 19725                           
 19726                           ;lcd.c: 37: data = data << 4;
 19727  00566A  0100               	movlb	0	; () banked
 19728  00566C  3981               	swapf	lcdNibble@data& (0+255),w,b
 19729  00566E  0BF0               	andlw	240
 19730  005670  0100               	movlb	0	; () banked
 19731  005672  6F81               	movwf	lcdNibble@data& (0+255),b
 19732                           
 19733                           ;lcd.c: 39: temp = data & 0xF0;
 19734  005674  0100               	movlb	0	; () banked
 19735  005676  5181               	movf	lcdNibble@data& (0+255),w,b
 19736  005678  0BF0               	andlw	240
 19737  00567A  0100               	movlb	0	; () banked
 19738  00567C  6F80               	movwf	lcdNibble@temp& (0+255),b
 19739                           
 19740                           ;lcd.c: 40: LATD = LATD & 0x0F;
 19741  00567E  508C               	movf	3980,w,c	;volatile
 19742  005680  0B0F               	andlw	15
 19743  005682  6E8C               	movwf	3980,c	;volatile
 19744                           
 19745                           ;lcd.c: 41: LATD = temp | LATD;
 19746  005684  0100               	movlb	0	; () banked
 19747  005686  5180               	movf	lcdNibble@temp& (0+255),w,b
 19748  005688  108C               	iorwf	3980,w,c	;volatile
 19749  00568A  6E8C               	movwf	3980,c	;volatile
 19750                           
 19751                           ; BSR set to: 0
 19752                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 19753  00568C  868C               	bsf	3980,3,c	;volatile
 19754                           
 19755                           ; BSR set to: 0
 19756                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19757  00568E  0E42               	movlw	66
 19758  005690                     u12467:
 19759  005690  2EE8               	decfsz	wreg,f,c
 19760  005692  D7FE               	bra	u12467
 19761  005694  D000               	nop2	
 19762                           
 19763                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 19764  005696  968C               	bcf	3980,3,c	;volatile
 19765                           
 19766                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19767  005698  0E42               	movlw	66
 19768  00569A                     u12477:
 19769  00569A  2EE8               	decfsz	wreg,f,c
 19770  00569C  D7FE               	bra	u12477
 19771  00569E  D000               	nop2	
 19772                           
 19773                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 19774  0056A0  8EF2               	bsf	intcon,7,c	;volatile
 19775  0056A2  0012               	return		;funcret
 19776  0056A4                     __end_of_lcdNibble:
 19777                           	opt stack 0
 19778                           tblptru	equ	0xFF8
 19779                           tblptrh	equ	0xFF7
 19780                           tblptrl	equ	0xFF6
 19781                           tablat	equ	0xFF5
 19782                           prodh	equ	0xFF4
 19783                           prodl	equ	0xFF3
 19784                           intcon	equ	0xFF2
 19785                           intcon2	equ	0xFF1
 19786                           intcon3	equ	0xFF0
 19787                           indf0	equ	0xFEF
 19788                           postinc0	equ	0xFEE
 19789                           fsr0h	equ	0xFEA
 19790                           fsr0l	equ	0xFE9
 19791                           wreg	equ	0xFE8
 19792                           postdec1	equ	0xFE5
 19793                           fsr1l	equ	0xFE1
 19794                           indf2	equ	0xFDF
 19795                           postinc2	equ	0xFDE
 19796                           postdec2	equ	0xFDD
 19797                           fsr2h	equ	0xFDA
 19798                           fsr2l	equ	0xFD9
 19799                           status	equ	0xFD8
 19800                           
 19801 ;; *************** function _handler *****************
 19802 ;; Defined at:
 19803 ;;		line 16 in file "interruptHandler.c"
 19804 ;; Parameters:    Size  Location     Type
 19805 ;;		None
 19806 ;; Auto vars:     Size  Location     Type
 19807 ;;		None
 19808 ;; Return value:  Size  Location     Type
 19809 ;;                  1    wreg      void 
 19810 ;; Registers used:
 19811 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19812 ;; Tracked objects:
 19813 ;;		On entry : 0/0
 19814 ;;		On exit  : 0/0
 19815 ;;		Unchanged: 0/0
 19816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19819 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19820 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19821 ;;Total ram usage:       16 bytes
 19822 ;; Hardware stack levels used:    1
 19823 ;; Hardware stack levels required when called:    6
 19824 ;; This function calls:
 19825 ;;		_printSortTimer
 19826 ;;		_updateArmState
 19827 ;;		_updateMenu
 19828 ;;		_updateServoStates
 19829 ;;		i2_change_state_to_menu_start
 19830 ;; This function is called by:
 19831 ;;		Interrupt level 2
 19832 ;; This function uses a non-reentrant model
 19833 ;;
 19834                           
 19835                           	psect	intcode
 19836  000008                     __pintcode:
 19837                           	opt stack 0
 19838  000008                     _handler:
 19839                           	opt stack 18
 19840                           
 19841                           ;incstack = 0
 19842  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19843  00000A  EDCF  F01E         	call	int_func,f	;refresh shadow registers
 19844                           tblptru	equ	0xFF8
 19845                           tblptrh	equ	0xFF7
 19846                           tblptrl	equ	0xFF6
 19847                           tablat	equ	0xFF5
 19848                           prodh	equ	0xFF4
 19849                           prodl	equ	0xFF3
 19850                           intcon	equ	0xFF2
 19851                           intcon2	equ	0xFF1
 19852                           intcon3	equ	0xFF0
 19853                           indf0	equ	0xFEF
 19854                           postinc0	equ	0xFEE
 19855                           fsr0h	equ	0xFEA
 19856                           fsr0l	equ	0xFE9
 19857                           wreg	equ	0xFE8
 19858                           postdec1	equ	0xFE5
 19859                           fsr1l	equ	0xFE1
 19860                           indf2	equ	0xFDF
 19861                           postinc2	equ	0xFDE
 19862                           postdec2	equ	0xFDD
 19863                           fsr2h	equ	0xFDA
 19864                           fsr2l	equ	0xFD9
 19865                           status	equ	0xFD8
 19866                           
 19867                           	psect	intcode_body
 19868  003D9E                     __pintcode_body:
 19869                           	opt stack 18
 19870  003D9E                     int_func:
 19871                           	opt stack 18
 19872  003D9E  0006               	pop		; remove dummy address from shadow register refresh
 19873  003DA0  CFFA F04B          	movff	pclath,??_handler+2
 19874  003DA4  CFFB F04C          	movff	pclatu,??_handler+3
 19875  003DA8  CFE9 F04D          	movff	fsr0l,??_handler+4
 19876  003DAC  CFEA F04E          	movff	fsr0h,??_handler+5
 19877  003DB0  CFE1 F04F          	movff	fsr1l,??_handler+6
 19878  003DB4  CFE2 F050          	movff	fsr1h,??_handler+7
 19879  003DB8  CFD9 F051          	movff	fsr2l,??_handler+8
 19880  003DBC  CFDA F052          	movff	fsr2h,??_handler+9
 19881  003DC0  CFF3 F053          	movff	prodl,??_handler+10
 19882  003DC4  CFF4 F054          	movff	prodh,??_handler+11
 19883  003DC8  CFF6 F055          	movff	tblptrl,??_handler+12
 19884  003DCC  CFF7 F056          	movff	tblptrh,??_handler+13
 19885  003DD0  CFF8 F057          	movff	tblptru,??_handler+14
 19886  003DD4  CFF5 F058          	movff	tablat,??_handler+15
 19887                           
 19888                           ;interruptHandler.c: 18: if(INT1IF){
 19889  003DD8  A0F0               	btfss	intcon3,0,c	;volatile
 19890  003DDA  D034               	goto	i2l10661
 19891                           
 19892                           ;interruptHandler.c: 19: INT1IF = 0;
 19893  003DDC  90F0               	bcf	intcon3,0,c	;volatile
 19894                           
 19895                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
 19896  003DDE  3881               	swapf	3969,w,c	;volatile
 19897  003DE0  0B0F               	andlw	15
 19898  003DE2  0B0F               	andlw	15
 19899  003DE4  6E49               	movwf	??_handler& (0+255),c
 19900  003DE6  6A4A               	clrf	(??_handler+1)& (0+255),c
 19901  003DE8  0EA7               	movlw	low _keys
 19902  003DEA  2449               	addwf	??_handler,w,c
 19903  003DEC  6EF6               	movwf	tblptrl,c
 19904  003DEE  0EFA               	movlw	high _keys
 19905  003DF0  204A               	addwfc	??_handler+1,w,c
 19906  003DF2  6EF7               	movwf	tblptrh,c
 19907  003DF4                     	if	1	;There are 3 active tblptr bytes
 19908  003DF4  6AF8               	clrf	tblptru,c
 19909  003DF6  0E00               	movlw	low (__mediumconst shr (0+16))
 19910  003DF8  22F8               	addwfc	tblptru,f,c
 19911  003DFA                     	endif
 19912  003DFA  0008               	tblrd		*
 19913  003DFC  CFF5 F07D          	movff	tablat,_input	;volatile
 19914                           
 19915                           ;interruptHandler.c: 21: if(input == '*'){
 19916  003E00  0E2A               	movlw	42
 19917  003E02  187D               	xorwf	_input,w,c	;volatile
 19918  003E04  B4D8               	btfsc	status,2,c
 19919  003E06  D00D               	goto	i2l10655
 19920  003E08  D018               	goto	i2l10657
 19921  003E0A                     i2l10645:
 19922                           
 19923                           ;interruptHandler.c: 24: machine_state = Testing_state;
 19924  003E0A  0E03               	movlw	3
 19925  003E0C  D007               	goto	L16
 19926  003E0E                     i2l10647:
 19927                           
 19928                           ; BSR set to: 0
 19929                           ;interruptHandler.c: 27: machine_state = UI_state;
 19930  003E0E  0E00               	movlw	0
 19931  003E10  0100               	movlb	0	; () banked
 19932  003E12  6FFC               	movwf	_machine_state& (0+255),b
 19933                           
 19934                           ; BSR set to: 0
 19935                           ;interruptHandler.c: 28: change_state_to_menu_start();
 19936  003E14  ECA5  F02F         	call	i2_change_state_to_menu_start	;wreg free
 19937                           
 19938                           ;interruptHandler.c: 29: break;
 19939  003E18  D015               	goto	i2l10661
 19940  003E1A                     i2l10651:
 19941                           
 19942                           ;interruptHandler.c: 31: machine_state = DoneSorting_state;
 19943  003E1A  0E02               	movlw	2
 19944  003E1C                     L16:
 19945  003E1C  0100               	movlb	0	; () banked
 19946  003E1E  6FFC               	movwf	_machine_state& (0+255),b
 19947                           
 19948                           ; BSR set to: 0
 19949                           ;interruptHandler.c: 33: }
 19950                           
 19951                           ;interruptHandler.c: 32: break;
 19952  003E20  D011               	goto	i2l10661
 19953  003E22                     i2l10655:
 19954  003E22  0100               	movlb	0	; () banked
 19955  003E24  51FC               	movf	_machine_state& (0+255),w,b
 19956                           
 19957                           ; Switch size 1, requested type "space"
 19958                           ; Number of cases is 3, Range of values is 0 to 3
 19959                           ; switch strategies available:
 19960                           ; Name         Instructions Cycles
 19961                           ; simple_byte           10     6 (average)
 19962                           ;	Chosen strategy is simple_byte
 19963  003E26  0A00               	xorlw	0	; case 0
 19964  003E28  B4D8               	btfsc	status,2,c
 19965  003E2A  D7EF               	goto	i2l10645
 19966  003E2C  0A01               	xorlw	1	; case 1
 19967  003E2E  B4D8               	btfsc	status,2,c
 19968  003E30  D7F4               	goto	i2l10651
 19969  003E32  0A02               	xorlw	2	; case 3
 19970  003E34  B4D8               	btfsc	status,2,c
 19971  003E36  D7EB               	goto	i2l10647
 19972                           
 19973                           ; BSR set to: 0
 19974                           ;interruptHandler.c: 34: }
 19975  003E38  D005               	goto	i2l10661
 19976  003E3A                     i2l10657:
 19977                           
 19978                           ;interruptHandler.c: 35: else if(machine_state == UI_state){
 19979  003E3A  0100               	movlb	0	; () banked
 19980  003E3C  51FC               	movf	_machine_state& (0+255),w,b
 19981  003E3E  B4D8               	btfsc	status,2,c
 19982                           
 19983                           ; BSR set to: 0
 19984                           ;interruptHandler.c: 36: updateMenu();
 19985  003E40  EC5E  F01B         	call	_updateMenu	;wreg free
 19986  003E44                     i2l10661:
 19987                           
 19988                           ;interruptHandler.c: 37: }
 19989                           ;interruptHandler.c: 38: }
 19990                           ;interruptHandler.c: 41: if(TMR0IF){
 19991  003E44  A4F2               	btfss	intcon,2,c	;volatile
 19992  003E46  D00C               	goto	i2l10675
 19993                           
 19994                           ;interruptHandler.c: 42: TMR0IF = 0;
 19995  003E48  94F2               	bcf	intcon,2,c	;volatile
 19996                           
 19997                           ;interruptHandler.c: 43: if(machine_state == Sorting_state){
 19998  003E4A  0100               	movlb	0	; () banked
 19999  003E4C  05FC               	decf	_machine_state& (0+255),w,b
 20000  003E4E  A4D8               	btfss	status,2,c
 20001  003E50  D007               	goto	i2l10675
 20002                           
 20003                           ; BSR set to: 0
 20004                           ;interruptHandler.c: 44: printSortTimer();
 20005  003E52  ECEF  F014         	call	_printSortTimer	;wreg free
 20006                           
 20007                           ;interruptHandler.c: 46: TMR0H = 0b10000101;
 20008  003E56  0E85               	movlw	133
 20009  003E58  6ED7               	movwf	4055,c	;volatile
 20010                           
 20011                           ;interruptHandler.c: 47: TMR0L = 0b11101110;
 20012  003E5A  0EEE               	movlw	238
 20013  003E5C  6ED6               	movwf	4054,c	;volatile
 20014                           
 20015                           ;interruptHandler.c: 48: TMR0ON = 1;
 20016  003E5E  8ED5               	bsf	4053,7,c	;volatile
 20017  003E60                     i2l10675:
 20018                           
 20019                           ;interruptHandler.c: 49: }
 20020                           ;interruptHandler.c: 50: }
 20021                           ;interruptHandler.c: 53: if(TMR1IF){
 20022  003E60  A09E               	btfss	3998,0,c	;volatile
 20023  003E62  D028               	goto	i2l10703
 20024                           
 20025                           ;interruptHandler.c: 54: TMR1IF = 0;
 20026  003E64  909E               	bcf	3998,0,c	;volatile
 20027                           
 20028                           ;interruptHandler.c: 55: TMR1ON = 0;
 20029  003E66  90CD               	bcf	4045,0,c	;volatile
 20030                           
 20031                           ;interruptHandler.c: 56: if(machine_state == Sorting_state){
 20032  003E68  0100               	movlb	0	; () banked
 20033  003E6A  05FC               	decf	_machine_state& (0+255),w,b
 20034  003E6C  A4D8               	btfss	status,2,c
 20035  003E6E  D022               	goto	i2l10703
 20036                           
 20037                           ; BSR set to: 0
 20038                           ;interruptHandler.c: 57: if(was_low_1){
 20039  003E70  5077               	movf	_was_low_1,w,c	;volatile
 20040  003E72  1078               	iorwf	_was_low_1+1,w,c	;volatile
 20041  003E74  B4D8               	btfsc	status,2,c
 20042  003E76  D00A               	goto	i2l1091
 20043                           
 20044                           ; BSR set to: 0
 20045                           ;interruptHandler.c: 58: LATCbits.LATC1 = 1;
 20046  003E78  828B               	bsf	3979,1,c	;volatile
 20047                           
 20048                           ; BSR set to: 0
 20049                           ;interruptHandler.c: 59: was_low_1 = 0;
 20050  003E7A  0E00               	movlw	0
 20051  003E7C  6E78               	movwf	_was_low_1+1,c	;volatile
 20052  003E7E  0E00               	movlw	0
 20053  003E80  6E77               	movwf	_was_low_1,c	;volatile
 20054                           
 20055                           ; BSR set to: 0
 20056                           ;interruptHandler.c: 60: TMR1H = servoTimes[0];
 20057  003E82  C059  FFCF         	movff	_servoTimes,4047	;volatile
 20058                           
 20059                           ; BSR set to: 0
 20060                           ;interruptHandler.c: 61: TMR1L = servoTimes[1];
 20061  003E86  C05B  FFCE         	movff	_servoTimes+2,4046	;volatile
 20062                           
 20063                           ;interruptHandler.c: 62: }
 20064  003E8A  D00D               	goto	i2l10697
 20065  003E8C                     i2l1091:
 20066                           
 20067                           ; BSR set to: 0
 20068                           ;interruptHandler.c: 63: else{
 20069                           ;interruptHandler.c: 64: LATCbits.LATC1 = 0;
 20070  003E8C  928B               	bcf	3979,1,c	;volatile
 20071                           
 20072                           ; BSR set to: 0
 20073                           ;interruptHandler.c: 65: was_low_1 = 1;
 20074  003E8E  0E00               	movlw	0
 20075  003E90  6E78               	movwf	_was_low_1+1,c	;volatile
 20076  003E92  0E01               	movlw	1
 20077  003E94  6E77               	movwf	_was_low_1,c	;volatile
 20078                           
 20079                           ; BSR set to: 0
 20080                           ;interruptHandler.c: 66: TMR1H = 20000 - servoTimes[0];
 20081  003E96  5059               	movf	_servoTimes,w,c
 20082  003E98  0800               	sublw	0
 20083  003E9A  0F20               	addlw	32
 20084  003E9C  6ECF               	movwf	4047,c	;volatile
 20085                           
 20086                           ; BSR set to: 0
 20087                           ;interruptHandler.c: 67: TMR1L = 20000 - servoTimes[1];
 20088  003E9E  505B               	movf	_servoTimes+2,w,c
 20089  003EA0  0800               	sublw	0
 20090  003EA2  0F20               	addlw	32
 20091  003EA4  6ECE               	movwf	4046,c	;volatile
 20092  003EA6                     i2l10697:
 20093                           
 20094                           ; BSR set to: 0
 20095                           ;interruptHandler.c: 68: }
 20096                           ;interruptHandler.c: 69: TMR1ON = 1;
 20097  003EA6  80CD               	bsf	4045,0,c	;volatile
 20098                           
 20099                           ; BSR set to: 0
 20100                           ;interruptHandler.c: 70: servo_timer_counter += 10;
 20101  003EA8  0E0A               	movlw	10
 20102  003EAA  266D               	addwf	_servo_timer_counter,f,c	;volatile
 20103  003EAC  0E00               	movlw	0
 20104  003EAE  226E               	addwfc	_servo_timer_counter+1,f,c	;volatile
 20105                           
 20106                           ; BSR set to: 0
 20107                           ;interruptHandler.c: 72: updateServoStates();
 20108  003EB0  ECC4  F01F         	call	_updateServoStates	;wreg free
 20109  003EB4                     i2l10703:
 20110                           
 20111                           ;interruptHandler.c: 73: }
 20112                           ;interruptHandler.c: 74: }
 20113                           ;interruptHandler.c: 77: if(TMR2IF){
 20114  003EB4  A29E               	btfss	3998,1,c	;volatile
 20115  003EB6  D026               	goto	i2l10729
 20116                           
 20117                           ;interruptHandler.c: 80: TMR2IF = 0;
 20118  003EB8  929E               	bcf	3998,1,c	;volatile
 20119                           
 20120                           ;interruptHandler.c: 81: TMR2ON = 0;
 20121  003EBA  94CA               	bcf	4042,2,c	;volatile
 20122                           
 20123                           ;interruptHandler.c: 82: timer2_counter++;
 20124  003EBC  4A73               	infsnz	_timer2_counter,f,c	;volatile
 20125  003EBE  2A74               	incf	_timer2_counter+1,f,c	;volatile
 20126                           
 20127                           ;interruptHandler.c: 83: if(machine_state == Sorting_state){
 20128  003EC0  0100               	movlb	0	; () banked
 20129  003EC2  05FC               	decf	_machine_state& (0+255),w,b
 20130  003EC4  A4D8               	btfss	status,2,c
 20131  003EC6  D01E               	goto	i2l10729
 20132                           
 20133                           ; BSR set to: 0
 20134                           ;interruptHandler.c: 84: if(was_low_2 && (timer2_counter == 2)){
 20135  003EC8  5079               	movf	_was_low_2,w,c	;volatile
 20136  003ECA  107A               	iorwf	_was_low_2+1,w,c	;volatile
 20137  003ECC  B4D8               	btfsc	status,2,c
 20138  003ECE  D00A               	goto	i2l10719
 20139                           
 20140                           ; BSR set to: 0
 20141  003ED0  0E02               	movlw	2
 20142  003ED2  1873               	xorwf	_timer2_counter,w,c	;volatile
 20143  003ED4  1074               	iorwf	_timer2_counter+1,w,c	;volatile
 20144  003ED6  A4D8               	btfss	status,2,c
 20145  003ED8  D005               	goto	i2l10719
 20146                           
 20147                           ; BSR set to: 0
 20148                           ;interruptHandler.c: 86: LATBbits.LATB3 = 1;
 20149  003EDA  868A               	bsf	3978,3,c	;volatile
 20150                           
 20151                           ; BSR set to: 0
 20152                           ;interruptHandler.c: 87: was_low_2 = 0;
 20153  003EDC  0E00               	movlw	0
 20154  003EDE  6E7A               	movwf	_was_low_2+1,c	;volatile
 20155  003EE0  0E00               	movlw	0
 20156  003EE2  D008               	goto	L17
 20157  003EE4                     i2l10719:
 20158                           
 20159                           ; BSR set to: 0
 20160                           ;interruptHandler.c: 90: else if(!was_low_2){
 20161  003EE4  5079               	movf	_was_low_2,w,c	;volatile
 20162  003EE6  107A               	iorwf	_was_low_2+1,w,c	;volatile
 20163  003EE8  A4D8               	btfss	status,2,c
 20164  003EEA  D009               	goto	i2l10725
 20165                           
 20166                           ; BSR set to: 0
 20167                           ;interruptHandler.c: 91: LATBbits.LATB3 = 0;
 20168  003EEC  968A               	bcf	3978,3,c	;volatile
 20169                           
 20170                           ; BSR set to: 0
 20171                           ;interruptHandler.c: 92: was_low_2 = 1;
 20172  003EEE  0E00               	movlw	0
 20173  003EF0  6E7A               	movwf	_was_low_2+1,c	;volatile
 20174  003EF2  0E01               	movlw	1
 20175  003EF4                     L17:
 20176  003EF4  6E79               	movwf	_was_low_2,c	;volatile
 20177                           
 20178                           ;interruptHandler.c: 93: timer2_counter = 0;
 20179  003EF6  0E00               	movlw	0
 20180  003EF8  6E74               	movwf	_timer2_counter+1,c	;volatile
 20181  003EFA  0E00               	movlw	0
 20182  003EFC  6E73               	movwf	_timer2_counter,c	;volatile
 20183  003EFE                     i2l10725:
 20184                           
 20185                           ; BSR set to: 0
 20186                           ;interruptHandler.c: 94: }
 20187                           ;interruptHandler.c: 95: updateArmState();
 20188  003EFE  EC76  F02D         	call	_updateArmState	;wreg free
 20189                           
 20190                           ;interruptHandler.c: 96: TMR2ON = 1;
 20191  003F02  84CA               	bsf	4042,2,c	;volatile
 20192  003F04                     i2l10729:
 20193                           
 20194                           ;interruptHandler.c: 97: }
 20195                           ;interruptHandler.c: 98: }
 20196                           ;interruptHandler.c: 101: if(TMR3IF){
 20197  003F04  A2A1               	btfss	4001,1,c	;volatile
 20198  003F06  D022               	goto	i2l1102
 20199                           
 20200                           ;interruptHandler.c: 102: TMR3IF = 0;
 20201  003F08  92A1               	bcf	4001,1,c	;volatile
 20202                           
 20203                           ;interruptHandler.c: 103: TMR3ON = 0;
 20204  003F0A  90B1               	bcf	4017,0,c	;volatile
 20205                           
 20206                           ;interruptHandler.c: 104: if(machine_state == Sorting_state){
 20207  003F0C  0100               	movlb	0	; () banked
 20208  003F0E  05FC               	decf	_machine_state& (0+255),w,b
 20209  003F10  A4D8               	btfss	status,2,c
 20210  003F12  D01C               	goto	i2l1102
 20211                           
 20212                           ; BSR set to: 0
 20213                           ;interruptHandler.c: 105: if(was_low_3){
 20214  003F14  507B               	movf	_was_low_3,w,c	;volatile
 20215  003F16  107C               	iorwf	_was_low_3+1,w,c	;volatile
 20216  003F18  B4D8               	btfsc	status,2,c
 20217  003F1A  D00A               	goto	i2l1100
 20218                           
 20219                           ; BSR set to: 0
 20220                           ;interruptHandler.c: 106: LATCbits.LATC2 = 1;
 20221  003F1C  848B               	bsf	3979,2,c	;volatile
 20222                           
 20223                           ; BSR set to: 0
 20224                           ;interruptHandler.c: 107: was_low_3 = 0;
 20225  003F1E  0E00               	movlw	0
 20226  003F20  6E7C               	movwf	_was_low_3+1,c	;volatile
 20227  003F22  0E00               	movlw	0
 20228  003F24  6E7B               	movwf	_was_low_3,c	;volatile
 20229                           
 20230                           ; BSR set to: 0
 20231                           ;interruptHandler.c: 108: TMR3H = servoTimes[2];
 20232  003F26  C05D  FFB3         	movff	_servoTimes+4,4019	;volatile
 20233                           
 20234                           ; BSR set to: 0
 20235                           ;interruptHandler.c: 109: TMR3L = servoTimes[3];
 20236  003F2A  C05F  FFB2         	movff	_servoTimes+6,4018	;volatile
 20237                           
 20238                           ;interruptHandler.c: 110: }
 20239  003F2E  D00D               	goto	i2l10751
 20240  003F30                     i2l1100:
 20241                           
 20242                           ; BSR set to: 0
 20243                           ;interruptHandler.c: 111: else{
 20244                           ;interruptHandler.c: 112: LATCbits.LATC2 = 0;
 20245  003F30  948B               	bcf	3979,2,c	;volatile
 20246                           
 20247                           ; BSR set to: 0
 20248                           ;interruptHandler.c: 113: was_low_3 = 1;
 20249  003F32  0E00               	movlw	0
 20250  003F34  6E7C               	movwf	_was_low_3+1,c	;volatile
 20251  003F36  0E01               	movlw	1
 20252  003F38  6E7B               	movwf	_was_low_3,c	;volatile
 20253                           
 20254                           ; BSR set to: 0
 20255                           ;interruptHandler.c: 114: TMR3H = 20000 - servoTimes[2];
 20256  003F3A  505D               	movf	_servoTimes+4,w,c
 20257  003F3C  0800               	sublw	0
 20258  003F3E  0F20               	addlw	32
 20259  003F40  6EB3               	movwf	4019,c	;volatile
 20260                           
 20261                           ; BSR set to: 0
 20262                           ;interruptHandler.c: 115: TMR3L = 20000 - servoTimes[3];
 20263  003F42  505F               	movf	_servoTimes+6,w,c
 20264  003F44  0800               	sublw	0
 20265  003F46  0F20               	addlw	32
 20266  003F48  6EB2               	movwf	4018,c	;volatile
 20267  003F4A                     i2l10751:
 20268                           
 20269                           ; BSR set to: 0
 20270                           ;interruptHandler.c: 116: }
 20271                           ;interruptHandler.c: 117: TMR3ON = 1;
 20272  003F4A  80B1               	bsf	4017,0,c	;volatile
 20273  003F4C                     i2l1102:
 20274  003F4C  C058  FFF5         	movff	??_handler+15,tablat
 20275  003F50  C057  FFF8         	movff	??_handler+14,tblptru
 20276  003F54  C056  FFF7         	movff	??_handler+13,tblptrh
 20277  003F58  C055  FFF6         	movff	??_handler+12,tblptrl
 20278  003F5C  C054  FFF4         	movff	??_handler+11,prodh
 20279  003F60  C053  FFF3         	movff	??_handler+10,prodl
 20280  003F64  C052  FFDA         	movff	??_handler+9,fsr2h
 20281  003F68  C051  FFD9         	movff	??_handler+8,fsr2l
 20282  003F6C  C050  FFE2         	movff	??_handler+7,fsr1h
 20283  003F70  C04F  FFE1         	movff	??_handler+6,fsr1l
 20284  003F74  C04E  FFEA         	movff	??_handler+5,fsr0h
 20285  003F78  C04D  FFE9         	movff	??_handler+4,fsr0l
 20286  003F7C  C04C  FFFB         	movff	??_handler+3,pclatu
 20287  003F80  C04B  FFFA         	movff	??_handler+2,pclath
 20288  003F84  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 20289  003F86  0011               	retfie		f
 20290  003F88                     __end_of_handler:
 20291                           	opt stack 0
 20292                           pclatu	equ	0xFFB
 20293                           pclath	equ	0xFFA
 20294                           tblptru	equ	0xFF8
 20295                           tblptrh	equ	0xFF7
 20296                           tblptrl	equ	0xFF6
 20297                           tablat	equ	0xFF5
 20298                           prodh	equ	0xFF4
 20299                           prodl	equ	0xFF3
 20300                           intcon	equ	0xFF2
 20301                           intcon2	equ	0xFF1
 20302                           intcon3	equ	0xFF0
 20303                           indf0	equ	0xFEF
 20304                           postinc0	equ	0xFEE
 20305                           fsr0h	equ	0xFEA
 20306                           fsr0l	equ	0xFE9
 20307                           wreg	equ	0xFE8
 20308                           postdec1	equ	0xFE5
 20309                           fsr1h	equ	0xFE2
 20310                           fsr1l	equ	0xFE1
 20311                           indf2	equ	0xFDF
 20312                           postinc2	equ	0xFDE
 20313                           postdec2	equ	0xFDD
 20314                           fsr2h	equ	0xFDA
 20315                           fsr2l	equ	0xFD9
 20316                           status	equ	0xFD8
 20317                           
 20318 ;; *************** function _updateServoStates *****************
 20319 ;; Defined at:
 20320 ;;		line 666 in file "sort.c"
 20321 ;; Parameters:    Size  Location     Type
 20322 ;;		None
 20323 ;; Auto vars:     Size  Location     Type
 20324 ;;		None
 20325 ;; Return value:  Size  Location     Type
 20326 ;;                  1    wreg      void 
 20327 ;; Registers used:
 20328 ;;		wreg, status,2, status,0, cstack
 20329 ;; Tracked objects:
 20330 ;;		On entry : 0/0
 20331 ;;		On exit  : 0/0
 20332 ;;		Unchanged: 0/0
 20333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20336 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20337 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20338 ;;Total ram usage:        2 bytes
 20339 ;; Hardware stack levels used:    1
 20340 ;; Hardware stack levels required when called:    1
 20341 ;; This function calls:
 20342 ;;		i2_updateServoPosition
 20343 ;; This function is called by:
 20344 ;;		_handler
 20345 ;; This function uses a non-reentrant model
 20346 ;;
 20347                           
 20348                           	psect	text65
 20349  003F88                     __ptext65:
 20350                           	opt stack 0
 20351  003F88                     _updateServoStates:
 20352                           	opt stack 22
 20353                           
 20354                           ;sort.c: 668: if(servo_timer_counter >= servo_timer_target){
 20355                           
 20356                           ;incstack = 0
 20357  003F88  506F               	movf	_servo_timer_target,w,c	;volatile
 20358  003F8A  5C6D               	subwf	_servo_timer_counter,w,c	;volatile
 20359  003F8C  506E               	movf	_servo_timer_counter+1,w,c	;volatile
 20360  003F8E  0A80               	xorlw	128
 20361  003F90  6E09               	movwf	??_updateServoStates& (0+255),c
 20362  003F92  5070               	movf	_servo_timer_target+1,w,c	;volatile
 20363  003F94  0A80               	xorlw	128
 20364  003F96  5809               	subwfb	??_updateServoStates& (0+255),w,c
 20365  003F98  A0D8               	btfss	status,0,c
 20366  003F9A  0012               	return	
 20367                           
 20368                           ;sort.c: 670: if(f_panning_to_bin){
 20369  003F9C  5069               	movf	_f_panning_to_bin,w,c	;volatile
 20370  003F9E  106A               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 20371  003FA0  A4D8               	btfss	status,2,c
 20372  003FA2  D036               	goto	i2l10519
 20373  003FA4  D05F               	goto	i2l10523
 20374  003FA6                     i2l10493:
 20375                           
 20376                           ;sort.c: 674: updateServoPosition(1260, 3);
 20377  003FA6  0E04               	movlw	4
 20378  003FA8  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20379  003FAA  0EEC               	movlw	236
 20380  003FAC  6E01               	movwf	i2updateServoPosition@time_us,c
 20381  003FAE  0E00               	movlw	0
 20382  003FB0  6E04               	movwf	i2updateServoPosition@timer+1,c
 20383  003FB2  0E03               	movlw	3
 20384  003FB4  6E03               	movwf	i2updateServoPosition@timer,c
 20385  003FB6  EC52  F02B         	call	i2_updateServoPosition	;wreg free
 20386  003FBA  D025               	goto	i2l10513
 20387  003FBC                     i2l10497:
 20388                           
 20389                           ;sort.c: 676: servo_timer_target = 700;
 20390  003FBC  0E02               	movlw	2
 20391  003FBE  6E70               	movwf	_servo_timer_target+1,c	;volatile
 20392  003FC0  0EBC               	movlw	188
 20393  003FC2  6E6F               	movwf	_servo_timer_target,c	;volatile
 20394                           
 20395                           ;sort.c: 677: break;
 20396  003FC4  D04A               	goto	i2l10521
 20397  003FC6                     i2l10499:
 20398                           
 20399                           ;sort.c: 679: updateServoPosition(1260, 3);
 20400  003FC6  0E04               	movlw	4
 20401  003FC8  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20402  003FCA  0EEC               	movlw	236
 20403  003FCC  6E01               	movwf	i2updateServoPosition@time_us,c
 20404  003FCE  0E00               	movlw	0
 20405  003FD0  6E04               	movwf	i2updateServoPosition@timer+1,c
 20406  003FD2  0E03               	movlw	3
 20407  003FD4  6E03               	movwf	i2updateServoPosition@timer,c
 20408  003FD6  EC52  F02B         	call	i2_updateServoPosition	;wreg free
 20409  003FDA  D015               	goto	i2l10513
 20410  003FDC                     i2l10505:
 20411                           
 20412                           ;sort.c: 685: updateServoPosition(1390, 3);
 20413  003FDC  0E05               	movlw	5
 20414  003FDE  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20415  003FE0  0E6E               	movlw	110
 20416  003FE2  6E01               	movwf	i2updateServoPosition@time_us,c
 20417  003FE4  0E00               	movlw	0
 20418  003FE6  6E04               	movwf	i2updateServoPosition@timer+1,c
 20419  003FE8  0E03               	movlw	3
 20420  003FEA  6E03               	movwf	i2updateServoPosition@timer,c
 20421  003FEC  EC52  F02B         	call	i2_updateServoPosition	;wreg free
 20422  003FF0  D00A               	goto	i2l10513
 20423  003FF2                     i2l10511:
 20424                           
 20425                           ;sort.c: 690: updateServoPosition(1390, 3);
 20426  003FF2  0E05               	movlw	5
 20427  003FF4  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20428  003FF6  0E6E               	movlw	110
 20429  003FF8  6E01               	movwf	i2updateServoPosition@time_us,c
 20430  003FFA  0E00               	movlw	0
 20431  003FFC  6E04               	movwf	i2updateServoPosition@timer+1,c
 20432  003FFE  0E03               	movlw	3
 20433  004000  6E03               	movwf	i2updateServoPosition@timer,c
 20434  004002  EC52  F02B         	call	i2_updateServoPosition	;wreg free
 20435  004006                     i2l10513:
 20436                           
 20437                           ;sort.c: 691: servo_timer_counter = 0;
 20438  004006  0E00               	movlw	0
 20439  004008  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20440  00400A  0E00               	movlw	0
 20441  00400C  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20442  00400E  D7D6               	goto	i2l10497
 20443  004010                     i2l10519:
 20444  004010  C06B  F009         	movff	_pan_servo_state,??_updateServoStates	;volatile
 20445  004014  C06C  F00A         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 20446                           
 20447                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 20448                           ; Switch size 1, requested type "space"
 20449                           ; Number of cases is 4, Range of values is 1 to 9
 20450                           ; switch strategies available:
 20451                           ; Name         Instructions Cycles
 20452                           ; simple_byte           13     7 (average)
 20453                           ;	Chosen strategy is simple_byte
 20454  004018  500A               	movf	??_updateServoStates+1,w,c
 20455  00401A  0A01               	xorlw	1	; case 1
 20456  00401C  B4D8               	btfsc	status,2,c
 20457  00401E  D00A               	goto	i2l11197
 20458  004020  0A02               	xorlw	2	; case 3
 20459  004022  B4D8               	btfsc	status,2,c
 20460  004024  D00C               	goto	i2l11199
 20461  004026  0A05               	xorlw	5	; case 6
 20462  004028  B4D8               	btfsc	status,2,c
 20463  00402A  D00E               	goto	i2l11201
 20464  00402C  0A0F               	xorlw	15	; case 9
 20465  00402E  B4D8               	btfsc	status,2,c
 20466  004030  D010               	goto	i2l11203
 20467  004032  D013               	goto	i2l10521
 20468  004034                     i2l11197:
 20469                           
 20470                           ; Switch size 1, requested type "space"
 20471                           ; Number of cases is 1, Range of values is 144 to 144
 20472                           ; switch strategies available:
 20473                           ; Name         Instructions Cycles
 20474                           ; simple_byte            4     3 (average)
 20475                           ;	Chosen strategy is simple_byte
 20476  004034  5009               	movf	??_updateServoStates,w,c
 20477  004036  0A90               	xorlw	144	; case 144
 20478  004038  B4D8               	btfsc	status,2,c
 20479  00403A  D7B5               	goto	i2l10493
 20480  00403C  D00E               	goto	i2l10521
 20481  00403E                     i2l11199:
 20482                           
 20483                           ; Switch size 1, requested type "space"
 20484                           ; Number of cases is 1, Range of values is 82 to 82
 20485                           ; switch strategies available:
 20486                           ; Name         Instructions Cycles
 20487                           ; simple_byte            4     3 (average)
 20488                           ;	Chosen strategy is simple_byte
 20489  00403E  5009               	movf	??_updateServoStates,w,c
 20490  004040  0A52               	xorlw	82	; case 82
 20491  004042  B4D8               	btfsc	status,2,c
 20492  004044  D7C0               	goto	i2l10499
 20493  004046  D009               	goto	i2l10521
 20494  004048                     i2l11201:
 20495                           
 20496                           ; Switch size 1, requested type "space"
 20497                           ; Number of cases is 1, Range of values is 14 to 14
 20498                           ; switch strategies available:
 20499                           ; Name         Instructions Cycles
 20500                           ; simple_byte            4     3 (average)
 20501                           ;	Chosen strategy is simple_byte
 20502  004048  5009               	movf	??_updateServoStates,w,c
 20503  00404A  0A0E               	xorlw	14	; case 14
 20504  00404C  B4D8               	btfsc	status,2,c
 20505  00404E  D7C6               	goto	i2l10505
 20506  004050  D004               	goto	i2l10521
 20507  004052                     i2l11203:
 20508                           
 20509                           ; Switch size 1, requested type "space"
 20510                           ; Number of cases is 1, Range of values is 196 to 196
 20511                           ; switch strategies available:
 20512                           ; Name         Instructions Cycles
 20513                           ; simple_byte            4     3 (average)
 20514                           ;	Chosen strategy is simple_byte
 20515  004052  5009               	movf	??_updateServoStates,w,c
 20516  004054  0AC4               	xorlw	196	; case 196
 20517  004056  B4D8               	btfsc	status,2,c
 20518  004058  D7CC               	goto	i2l10511
 20519  00405A                     i2l10521:
 20520                           
 20521                           ;sort.c: 697: f_panning_to_bin = 0;
 20522  00405A  0E00               	movlw	0
 20523  00405C  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
 20524  00405E  0E00               	movlw	0
 20525  004060  6E69               	movwf	_f_panning_to_bin,c	;volatile
 20526                           
 20527                           ;sort.c: 698: }
 20528  004062  0012               	return	
 20529  004064                     i2l10523:
 20530                           
 20531                           ;sort.c: 699: else if(pan_servo_state == 1200){
 20532  004064  0EB0               	movlw	176
 20533  004066  186B               	xorwf	_pan_servo_state,w,c	;volatile
 20534  004068  E15A               	bnz	i2l10553
 20535  00406A  0E04               	movlw	4
 20536  00406C  186C               	xorwf	_pan_servo_state+1,w,c	;volatile
 20537  00406E  A4D8               	btfss	status,2,c
 20538  004070  D056               	goto	i2l10553
 20539                           
 20540                           ;sort.c: 701: servo_timer_counter = 0;
 20541  004072  0E00               	movlw	0
 20542  004074  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20543  004076  0E00               	movlw	0
 20544  004078  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20545                           
 20546                           ;sort.c: 702: }
 20547  00407A  0012               	return	
 20548  00407C                     i2l10527:
 20549                           
 20550                           ;sort.c: 707: updateServoPosition(1050, 3);
 20551  00407C  0E04               	movlw	4
 20552  00407E  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20553  004080  0E1A               	movlw	26
 20554  004082  6E01               	movwf	i2updateServoPosition@time_us,c
 20555  004084  0E00               	movlw	0
 20556  004086  6E04               	movwf	i2updateServoPosition@timer+1,c
 20557  004088  0E03               	movlw	3
 20558  00408A  6E03               	movwf	i2updateServoPosition@timer,c
 20559  00408C  EC52  F02B         	call	i2_updateServoPosition	;wreg free
 20560                           
 20561                           ;sort.c: 708: servo_timer_counter = 0;
 20562  004090  0E00               	movlw	0
 20563  004092  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20564  004094  0E00               	movlw	0
 20565  004096  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20566                           
 20567                           ;sort.c: 709: servo_timer_target = 750;
 20568  004098  0E02               	movlw	2
 20569  00409A  6E70               	movwf	_servo_timer_target+1,c	;volatile
 20570  00409C  0EEE               	movlw	238
 20571  00409E  6E6F               	movwf	_servo_timer_target,c	;volatile
 20572                           
 20573                           ;sort.c: 710: break;
 20574  0040A0  0012               	return	
 20575  0040A2                     i2l10533:
 20576                           
 20577                           ;sort.c: 712: updateServoPosition(1050, 3);
 20578  0040A2  0E04               	movlw	4
 20579  0040A4  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20580  0040A6  0E1A               	movlw	26
 20581  0040A8  6E01               	movwf	i2updateServoPosition@time_us,c
 20582  0040AA  0E00               	movlw	0
 20583  0040AC  6E04               	movwf	i2updateServoPosition@timer+1,c
 20584  0040AE  0E03               	movlw	3
 20585  0040B0  6E03               	movwf	i2updateServoPosition@timer,c
 20586  0040B2  EC52  F02B         	call	i2_updateServoPosition	;wreg free
 20587                           
 20588                           ;sort.c: 713: servo_timer_counter = 0;
 20589  0040B6  0E00               	movlw	0
 20590  0040B8  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20591  0040BA  0E00               	movlw	0
 20592  0040BC  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20593                           
 20594                           ;sort.c: 714: servo_timer_target = 750;
 20595  0040BE  0E02               	movlw	2
 20596  0040C0  6E70               	movwf	_servo_timer_target+1,c	;volatile
 20597  0040C2  0EEE               	movlw	238
 20598  0040C4  6E6F               	movwf	_servo_timer_target,c	;volatile
 20599                           
 20600                           ;sort.c: 715: break;
 20601  0040C6  0012               	return	
 20602  0040C8                     i2l10539:
 20603                           
 20604                           ;sort.c: 718: updateServoPosition(1200, 1);
 20605  0040C8  0E04               	movlw	4
 20606  0040CA  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20607  0040CC  0EB0               	movlw	176
 20608  0040CE  6E01               	movwf	i2updateServoPosition@time_us,c
 20609  0040D0  0E00               	movlw	0
 20610  0040D2  6E04               	movwf	i2updateServoPosition@timer+1,c
 20611  0040D4  0E01               	movlw	1
 20612  0040D6  6E03               	movwf	i2updateServoPosition@timer,c
 20613  0040D8  EC52  F02B         	call	i2_updateServoPosition	;wreg free
 20614                           
 20615                           ;sort.c: 719: updateServoPosition(1050, 3);
 20616  0040DC  0E04               	movlw	4
 20617  0040DE  6E02               	movwf	i2updateServoPosition@time_us+1,c
 20618  0040E0  0E1A               	movlw	26
 20619  0040E2  6E01               	movwf	i2updateServoPosition@time_us,c
 20620  0040E4  0E00               	movlw	0
 20621  0040E6  6E04               	movwf	i2updateServoPosition@timer+1,c
 20622  0040E8  0E03               	movlw	3
 20623  0040EA  6E03               	movwf	i2updateServoPosition@timer,c
 20624  0040EC  EC52  F02B         	call	i2_updateServoPosition	;wreg free
 20625                           
 20626                           ;sort.c: 720: servo_timer_counter = 0;
 20627  0040F0  0E00               	movlw	0
 20628  0040F2  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 20629  0040F4  0E00               	movlw	0
 20630  0040F6  6E6D               	movwf	_servo_timer_counter,c	;volatile
 20631                           
 20632                           ;sort.c: 721: servo_timer_target = 9999;
 20633  0040F8  0E27               	movlw	39
 20634  0040FA  6E70               	movwf	_servo_timer_target+1,c	;volatile
 20635  0040FC  0E0F               	movlw	15
 20636  0040FE  6E6F               	movwf	_servo_timer_target,c	;volatile
 20637                           
 20638                           ;sort.c: 723: f_can_distributed = 1;
 20639  004100  0E00               	movlw	0
 20640  004102  0101               	movlb	1	; () banked
 20641  004104  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
 20642  004106  0E01               	movlw	1
 20643  004108  6F35               	movwf	_f_can_distributed& (0+255),b
 20644                           
 20645                           ; BSR set to: 1
 20646                           ;sort.c: 724: if(f_lastCan == 1){
 20647  00410A  0100               	movlb	0	; () banked
 20648  00410C  05EC               	decf	_f_lastCan& (0+255),w,b
 20649  00410E  0100               	movlb	0	; () banked
 20650  004110  11ED               	iorwf	(_f_lastCan+1)& (0+255),w,b
 20651  004112  A4D8               	btfss	status,2,c
 20652  004114  0012               	return	
 20653                           
 20654                           ; BSR set to: 0
 20655                           ;sort.c: 725: machine_state = DoneSorting_state;
 20656  004116  0E02               	movlw	2
 20657  004118  0100               	movlb	0	; () banked
 20658  00411A  6FFC               	movwf	_machine_state& (0+255),b
 20659                           
 20660                           ; BSR set to: 0
 20661                           ;sort.c: 731: }
 20662                           
 20663                           ; BSR set to: 0
 20664                           ;sort.c: 730: break;
 20665                           
 20666                           ;sort.c: 729: default:
 20667                           
 20668                           ; BSR set to: 0
 20669                           ;sort.c: 726: }
 20670                           ;sort.c: 727: break;
 20671  00411C  0012               	return	
 20672  00411E                     i2l10553:
 20673  00411E  C071  F009         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 20674  004122  C072  F00A         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 20675                           
 20676                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 20677                           ; Switch size 1, requested type "space"
 20678                           ; Number of cases is 2, Range of values is 4 to 5
 20679                           ; switch strategies available:
 20680                           ; Name         Instructions Cycles
 20681                           ; simple_byte            7     4 (average)
 20682                           ;	Chosen strategy is simple_byte
 20683  004126  500A               	movf	??_updateServoStates+1,w,c
 20684  004128  0A04               	xorlw	4	; case 4
 20685  00412A  B4D8               	btfsc	status,2,c
 20686  00412C  D004               	goto	i2l11205
 20687  00412E  0A01               	xorlw	1	; case 5
 20688  004130  A4D8               	btfss	status,2,c
 20689  004132  0012               	return	
 20690  004134  D008               	goto	i2l11207
 20691  004136                     i2l11205:
 20692                           
 20693                           ; Switch size 1, requested type "space"
 20694                           ; Number of cases is 2, Range of values is 26 to 236
 20695                           ; switch strategies available:
 20696                           ; Name         Instructions Cycles
 20697                           ; simple_byte            7     4 (average)
 20698                           ;	Chosen strategy is simple_byte
 20699  004136  5009               	movf	??_updateServoStates,w,c
 20700  004138  0A1A               	xorlw	26	; case 26
 20701  00413A  B4D8               	btfsc	status,2,c
 20702  00413C  D7C5               	goto	i2l10539
 20703  00413E  0AF6               	xorlw	246	; case 236
 20704  004140  A4D8               	btfss	status,2,c
 20705  004142  0012               	return	
 20706  004144  D79B               	goto	i2l10527
 20707  004146                     i2l11207:
 20708                           
 20709                           ; Switch size 1, requested type "space"
 20710                           ; Number of cases is 1, Range of values is 110 to 110
 20711                           ; switch strategies available:
 20712                           ; Name         Instructions Cycles
 20713                           ; simple_byte            4     3 (average)
 20714                           ;	Chosen strategy is simple_byte
 20715  004146  5009               	movf	??_updateServoStates,w,c
 20716  004148  0A6E               	xorlw	110	; case 110
 20717  00414A  A4D8               	btfss	status,2,c
 20718  00414C  0012               	return	
 20719  00414E  D7A9               	goto	i2l10533
 20720  004150                     __end_of_updateServoStates:
 20721                           	opt stack 0
 20722                           pclatu	equ	0xFFB
 20723                           pclath	equ	0xFFA
 20724                           tblptru	equ	0xFF8
 20725                           tblptrh	equ	0xFF7
 20726                           tblptrl	equ	0xFF6
 20727                           tablat	equ	0xFF5
 20728                           prodh	equ	0xFF4
 20729                           prodl	equ	0xFF3
 20730                           intcon	equ	0xFF2
 20731                           intcon2	equ	0xFF1
 20732                           intcon3	equ	0xFF0
 20733                           indf0	equ	0xFEF
 20734                           postinc0	equ	0xFEE
 20735                           fsr0h	equ	0xFEA
 20736                           fsr0l	equ	0xFE9
 20737                           wreg	equ	0xFE8
 20738                           postdec1	equ	0xFE5
 20739                           fsr1h	equ	0xFE2
 20740                           fsr1l	equ	0xFE1
 20741                           indf2	equ	0xFDF
 20742                           postinc2	equ	0xFDE
 20743                           postdec2	equ	0xFDD
 20744                           fsr2h	equ	0xFDA
 20745                           fsr2l	equ	0xFD9
 20746                           status	equ	0xFD8
 20747                           
 20748 ;; *************** function i2_updateServoPosition *****************
 20749 ;; Defined at:
 20750 ;;		line 651 in file "sort.c"
 20751 ;; Parameters:    Size  Location     Type
 20752 ;;  time_us         2    0[COMRAM] int 
 20753 ;;  timer           2    2[COMRAM] int 
 20754 ;; Auto vars:     Size  Location     Type
 20755 ;;  updateServoP    2    6[COMRAM] unsigned int 
 20756 ;; Return value:  Size  Location     Type
 20757 ;;                  1    wreg      void 
 20758 ;; Registers used:
 20759 ;;		wreg, status,2, status,0
 20760 ;; Tracked objects:
 20761 ;;		On entry : 0/0
 20762 ;;		On exit  : 0/0
 20763 ;;		Unchanged: 0/0
 20764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20765 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20766 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20767 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20768 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20769 ;;Total ram usage:        8 bytes
 20770 ;; Hardware stack levels used:    1
 20771 ;; This function calls:
 20772 ;;		Nothing
 20773 ;; This function is called by:
 20774 ;;		_updateServoStates
 20775 ;; This function uses a non-reentrant model
 20776 ;;
 20777                           
 20778                           	psect	text66
 20779  0056A4                     __ptext66:
 20780                           	opt stack 0
 20781  0056A4                     i2_updateServoPosition:
 20782                           	opt stack 22
 20783                           
 20784                           ;sort.c: 652: unsigned int my_time = 65535 - time_us;
 20785                           
 20786                           ;incstack = 0
 20787  0056A4  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 20788  0056A8  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 20789  0056AC  1E05               	comf	??i2_updateServoPosition,f,c
 20790  0056AE  1E06               	comf	??i2_updateServoPosition+1,f,c
 20791  0056B0  4A05               	infsnz	??i2_updateServoPosition,f,c
 20792  0056B2  2A06               	incf	??i2_updateServoPosition+1,f,c
 20793  0056B4  0EFF               	movlw	255
 20794  0056B6  2405               	addwf	??i2_updateServoPosition,w,c
 20795  0056B8  6E07               	movwf	i2updateServoPosition@my_time,c
 20796  0056BA  0EFF               	movlw	255
 20797  0056BC  2006               	addwfc	??i2_updateServoPosition+1,w,c
 20798  0056BE  6E08               	movwf	i2updateServoPosition@my_time+1,c
 20799                           
 20800                           ;sort.c: 653: switch(timer){
 20801  0056C0  D015               	goto	i2l9643
 20802  0056C2                     i2l9637:
 20803                           
 20804                           ;sort.c: 655: servoTimes[0] = my_time >> 8;
 20805  0056C2  5008               	movf	i2updateServoPosition@my_time+1,w,c
 20806  0056C4  6E59               	movwf	_servoTimes,c
 20807  0056C6  6A5A               	clrf	_servoTimes+1,c
 20808                           
 20809                           ;sort.c: 656: servoTimes[1] = my_time & 0xFF;
 20810  0056C8  5007               	movf	i2updateServoPosition@my_time,w,c
 20811  0056CA  6E5B               	movwf	_servoTimes+2,c
 20812  0056CC  6A5C               	clrf	_servoTimes+3,c
 20813                           
 20814                           ;sort.c: 658: pan_servo_state = time_us;
 20815  0056CE  C001  F06B         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 20816  0056D2  C002  F06C         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 20817  0056D6                     i2l972:
 20818                           
 20819                           ;sort.c: 660: servoTimes[2] = my_time >> 8;
 20820  0056D6  5008               	movf	i2updateServoPosition@my_time+1,w,c
 20821  0056D8  6E5D               	movwf	_servoTimes+4,c
 20822  0056DA  6A5E               	clrf	_servoTimes+5,c
 20823                           
 20824                           ;sort.c: 661: servoTimes[3] = my_time & 0xFF;
 20825  0056DC  5007               	movf	i2updateServoPosition@my_time,w,c
 20826  0056DE  6E5F               	movwf	_servoTimes+6,c
 20827  0056E0  6A60               	clrf	_servoTimes+7,c
 20828                           
 20829                           ;sort.c: 663: tilt_servo_state = time_us;
 20830  0056E2  C001  F071         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 20831  0056E6  C002  F072         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 20832                           
 20833                           ;sort.c: 664: }
 20834  0056EA  0012               	return	
 20835  0056EC                     i2l9643:
 20836  0056EC  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 20837  0056F0  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 20838                           
 20839                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20840                           ; Switch size 1, requested type "space"
 20841                           ; Number of cases is 1, Range of values is 0 to 0
 20842                           ; switch strategies available:
 20843                           ; Name         Instructions Cycles
 20844                           ; simple_byte            4     3 (average)
 20845                           ;	Chosen strategy is simple_byte
 20846  0056F4  5006               	movf	??i2_updateServoPosition+1,w,c
 20847  0056F6  0A00               	xorlw	0	; case 0
 20848  0056F8  A4D8               	btfss	status,2,c
 20849  0056FA  0012               	return	
 20850                           
 20851                           ; Switch size 1, requested type "space"
 20852                           ; Number of cases is 2, Range of values is 1 to 3
 20853                           ; switch strategies available:
 20854                           ; Name         Instructions Cycles
 20855                           ; simple_byte            7     4 (average)
 20856                           ;	Chosen strategy is simple_byte
 20857  0056FC  5005               	movf	??i2_updateServoPosition,w,c
 20858  0056FE  0A01               	xorlw	1	; case 1
 20859  005700  B4D8               	btfsc	status,2,c
 20860  005702  D7DF               	goto	i2l9637
 20861  005704  0A02               	xorlw	2	; case 3
 20862  005706  A4D8               	btfss	status,2,c
 20863  005708  0012               	return	
 20864  00570A  D7E5               	goto	i2l972
 20865  00570C                     __end_ofi2_updateServoPosition:
 20866                           	opt stack 0
 20867                           pclatu	equ	0xFFB
 20868                           pclath	equ	0xFFA
 20869                           tblptru	equ	0xFF8
 20870                           tblptrh	equ	0xFF7
 20871                           tblptrl	equ	0xFF6
 20872                           tablat	equ	0xFF5
 20873                           prodh	equ	0xFF4
 20874                           prodl	equ	0xFF3
 20875                           intcon	equ	0xFF2
 20876                           intcon2	equ	0xFF1
 20877                           intcon3	equ	0xFF0
 20878                           indf0	equ	0xFEF
 20879                           postinc0	equ	0xFEE
 20880                           fsr0h	equ	0xFEA
 20881                           fsr0l	equ	0xFE9
 20882                           wreg	equ	0xFE8
 20883                           postdec1	equ	0xFE5
 20884                           fsr1h	equ	0xFE2
 20885                           fsr1l	equ	0xFE1
 20886                           indf2	equ	0xFDF
 20887                           postinc2	equ	0xFDE
 20888                           postdec2	equ	0xFDD
 20889                           fsr2h	equ	0xFDA
 20890                           fsr2l	equ	0xFD9
 20891                           status	equ	0xFD8
 20892                           
 20893 ;; *************** function _updateMenu *****************
 20894 ;; Defined at:
 20895 ;;		line 216 in file "UI.c"
 20896 ;; Parameters:    Size  Location     Type
 20897 ;;		None
 20898 ;; Auto vars:     Size  Location     Type
 20899 ;;		None
 20900 ;; Return value:  Size  Location     Type
 20901 ;;                  1    wreg      void 
 20902 ;; Registers used:
 20903 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20904 ;; Tracked objects:
 20905 ;;		On entry : 0/0
 20906 ;;		On exit  : 0/0
 20907 ;;		Unchanged: 0/0
 20908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20911 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20912 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20913 ;;Total ram usage:        2 bytes
 20914 ;; Hardware stack levels used:    1
 20915 ;; Hardware stack levels required when called:    5
 20916 ;; This function calls:
 20917 ;;		_change_state_to_logs_11
 20918 ;;		_change_state_to_logs_12
 20919 ;;		_change_state_to_logs_22
 20920 ;;		_change_state_to_logs_23
 20921 ;;		_change_state_to_logs_33
 20922 ;;		_change_state_to_logs_34
 20923 ;;		_change_state_to_menu_11
 20924 ;;		_change_state_to_menu_23
 20925 ;;		_dispLogs
 20926 ;;		_inputHandler
 20927 ;;		i2_change_state_to_menu_12
 20928 ;;		i2_change_state_to_menu_22
 20929 ;;		i2_change_state_to_menu_start
 20930 ;; This function is called by:
 20931 ;;		_handler
 20932 ;; This function uses a non-reentrant model
 20933 ;;
 20934                           
 20935                           	psect	text67
 20936  0036BC                     __ptext67:
 20937                           	opt stack 0
 20938  0036BC                     _updateMenu:
 20939                           	opt stack 18
 20940                           
 20941                           ;UI.c: 217: up = 0; down = 0; enter = 0; back = 0;
 20942                           
 20943                           ;incstack = 0
 20944  0036BC  0E00               	movlw	0
 20945  0036BE  6E76               	movwf	_up+1,c
 20946  0036C0  0E00               	movlw	0
 20947  0036C2  6E75               	movwf	_up,c
 20948  0036C4  0E00               	movlw	0
 20949  0036C6  6E66               	movwf	_down+1,c
 20950  0036C8  0E00               	movlw	0
 20951  0036CA  6E65               	movwf	_down,c
 20952  0036CC  0E00               	movlw	0
 20953  0036CE  6E68               	movwf	_enter+1,c
 20954  0036D0  0E00               	movlw	0
 20955  0036D2  6E67               	movwf	_enter,c
 20956  0036D4  0E00               	movlw	0
 20957  0036D6  6E64               	movwf	_back+1,c
 20958  0036D8  0E00               	movlw	0
 20959  0036DA  6E63               	movwf	_back,c
 20960                           
 20961                           ;UI.c: 218: (INTCONbits.GIE = 0);
 20962  0036DC  9EF2               	bcf	intcon,7,c	;volatile
 20963                           
 20964                           ;UI.c: 220: if (inputHandler()
 20965                           ;UI.c: 223: ){
 20966  0036DE  ECD9  F01D         	call	_inputHandler	;wreg free
 20967  0036E2  502A               	movf	?_inputHandler,w,c
 20968  0036E4  102B               	iorwf	?_inputHandler+1,w,c
 20969  0036E6  A4D8               	btfss	status,2,c
 20970  0036E8  D112               	goto	i2l10205
 20971  0036EA  D146               	goto	i2l275
 20972  0036EC                     i2l10057:
 20973                           
 20974                           ;UI.c: 227: change_state_to_menu_11();
 20975  0036EC  EC92  F02E         	call	_change_state_to_menu_11	;wreg free
 20976                           
 20977                           ;UI.c: 228: break;
 20978  0036F0  D143               	goto	i2l275
 20979  0036F2                     i2l10059:
 20980                           
 20981                           ;UI.c: 231: if(up){
 20982  0036F2  5075               	movf	_up,w,c
 20983  0036F4  1076               	iorwf	_up+1,w,c
 20984  0036F6  B4D8               	btfsc	status,2,c
 20985  0036F8  D003               	goto	i2l10063
 20986                           
 20987                           ;UI.c: 232: change_state_to_menu_23();
 20988  0036FA  EC7A  F02E         	call	_change_state_to_menu_23	;wreg free
 20989                           
 20990                           ;UI.c: 233: }
 20991  0036FE  D13C               	goto	i2l275
 20992  003700                     i2l10063:
 20993                           
 20994                           ;UI.c: 234: else if(down){
 20995  003700  5065               	movf	_down,w,c
 20996  003702  1066               	iorwf	_down+1,w,c
 20997  003704  B4D8               	btfsc	status,2,c
 20998  003706  D003               	goto	i2l10067
 20999                           
 21000                           ;UI.c: 235: change_state_to_menu_12();
 21001  003708  EC62  F02E         	call	i2_change_state_to_menu_12	;wreg free
 21002                           
 21003                           ;UI.c: 236: }
 21004  00370C  D135               	goto	i2l275
 21005  00370E                     i2l10067:
 21006                           
 21007                           ;UI.c: 237: else if(enter){
 21008  00370E  5067               	movf	_enter,w,c
 21009  003710  1068               	iorwf	_enter+1,w,c
 21010  003712  B4D8               	btfsc	status,2,c
 21011  003714  D131               	goto	i2l275
 21012                           
 21013                           ;UI.c: 238: change_state_to_menu_start();
 21014  003716  ECA5  F02F         	call	i2_change_state_to_menu_start	;wreg free
 21015                           
 21016                           ;UI.c: 239: }
 21017                           ;UI.c: 240: break;
 21018  00371A  D12E               	goto	i2l275
 21019  00371C                     i2l10071:
 21020                           
 21021                           ;UI.c: 243: if(up){
 21022  00371C  5075               	movf	_up,w,c
 21023  00371E  1076               	iorwf	_up+1,w,c
 21024  003720  B4D8               	btfsc	status,2,c
 21025  003722  D003               	goto	i2l10075
 21026                           
 21027                           ;UI.c: 244: change_state_to_menu_11();
 21028  003724  EC92  F02E         	call	_change_state_to_menu_11	;wreg free
 21029                           
 21030                           ;UI.c: 245: }
 21031  003728  D127               	goto	i2l275
 21032  00372A                     i2l10075:
 21033                           
 21034                           ;UI.c: 246: else if(down){
 21035  00372A  5065               	movf	_down,w,c
 21036  00372C  1066               	iorwf	_down+1,w,c
 21037  00372E  B4D8               	btfsc	status,2,c
 21038  003730  D011               	goto	i2l10091
 21039                           
 21040                           ;UI.c: 247: change_state_to_menu_23();
 21041  003732  EC7A  F02E         	call	_change_state_to_menu_23	;wreg free
 21042                           
 21043                           ;UI.c: 248: }
 21044  003736  D120               	goto	i2l275
 21045  003738                     i2l10083:
 21046                           
 21047                           ;UI.c: 255: if(up){
 21048  003738  5075               	movf	_up,w,c
 21049  00373A  1076               	iorwf	_up+1,w,c
 21050  00373C  B4D8               	btfsc	status,2,c
 21051  00373E  D003               	goto	i2l10087
 21052                           
 21053                           ;UI.c: 256: change_state_to_menu_11();
 21054  003740  EC92  F02E         	call	_change_state_to_menu_11	;wreg free
 21055                           
 21056                           ;UI.c: 257: }
 21057  003744  D119               	goto	i2l275
 21058  003746                     i2l10087:
 21059                           
 21060                           ;UI.c: 258: else if(down){
 21061  003746  5065               	movf	_down,w,c
 21062  003748  1066               	iorwf	_down+1,w,c
 21063  00374A  B4D8               	btfsc	status,2,c
 21064  00374C  D003               	goto	i2l10091
 21065                           
 21066                           ;UI.c: 259: change_state_to_menu_23();
 21067  00374E  EC7A  F02E         	call	_change_state_to_menu_23	;wreg free
 21068                           
 21069                           ;UI.c: 260: }
 21070  003752  D112               	goto	i2l275
 21071  003754                     i2l10091:
 21072                           
 21073                           ;UI.c: 261: else if(enter){
 21074  003754  5067               	movf	_enter,w,c
 21075  003756  1068               	iorwf	_enter+1,w,c
 21076  003758  B4D8               	btfsc	status,2,c
 21077  00375A  D10E               	goto	i2l275
 21078                           
 21079                           ;UI.c: 262: machine_state = Sorting_state;
 21080  00375C  0E01               	movlw	1
 21081  00375E  0100               	movlb	0	; () banked
 21082  003760  6FFC               	movwf	_machine_state& (0+255),b
 21083                           
 21084                           ; BSR set to: 0
 21085                           ;UI.c: 263: }
 21086                           ;UI.c: 264: break;
 21087                           
 21088                           ; BSR set to: 0
 21089                           
 21090                           ; BSR set to: 0
 21091  003762  D10A               	goto	i2l275
 21092  003764                     i2l10095:
 21093                           
 21094                           ;UI.c: 267: if(up){
 21095  003764  5075               	movf	_up,w,c
 21096  003766  1076               	iorwf	_up+1,w,c
 21097  003768  B4D8               	btfsc	status,2,c
 21098  00376A  D003               	goto	i2l10099
 21099                           
 21100                           ;UI.c: 268: change_state_to_menu_22();
 21101  00376C  EC4A  F02E         	call	i2_change_state_to_menu_22	;wreg free
 21102                           
 21103                           ;UI.c: 269: }
 21104  003770  D103               	goto	i2l275
 21105  003772                     i2l10099:
 21106                           
 21107                           ;UI.c: 270: else if(down){
 21108  003772  5065               	movf	_down,w,c
 21109  003774  1066               	iorwf	_down+1,w,c
 21110  003776  B4D8               	btfsc	status,2,c
 21111  003778  D003               	goto	i2l10103
 21112                           
 21113                           ;UI.c: 271: change_state_to_menu_11();
 21114  00377A  EC92  F02E         	call	_change_state_to_menu_11	;wreg free
 21115                           
 21116                           ;UI.c: 272: }
 21117  00377E  D0FC               	goto	i2l275
 21118  003780                     i2l10103:
 21119                           
 21120                           ;UI.c: 273: else if(enter){
 21121  003780  5067               	movf	_enter,w,c
 21122  003782  1068               	iorwf	_enter+1,w,c
 21123  003784  B4D8               	btfsc	status,2,c
 21124  003786  D0F8               	goto	i2l275
 21125                           
 21126                           ;UI.c: 274: change_state_to_logs_11();
 21127  003788  EC0A  F02F         	call	_change_state_to_logs_11	;wreg free
 21128                           
 21129                           ;UI.c: 275: }
 21130                           ;UI.c: 276: break;
 21131  00378C  D0F5               	goto	i2l275
 21132  00378E                     i2l10107:
 21133                           
 21134                           ;UI.c: 279: if(up){
 21135  00378E  5075               	movf	_up,w,c
 21136  003790  1076               	iorwf	_up+1,w,c
 21137  003792  B4D8               	btfsc	status,2,c
 21138  003794  D003               	goto	i2l10111
 21139                           
 21140                           ;UI.c: 280: change_state_to_logs_34();
 21141  003796  ECAA  F02E         	call	_change_state_to_logs_34	;wreg free
 21142                           
 21143                           ;UI.c: 281: }
 21144  00379A  D0EE               	goto	i2l275
 21145  00379C                     i2l10111:
 21146                           
 21147                           ;UI.c: 282: else if(down){
 21148  00379C  5065               	movf	_down,w,c
 21149  00379E  1066               	iorwf	_down+1,w,c
 21150  0037A0  B4D8               	btfsc	status,2,c
 21151  0037A2  D003               	goto	i2l10115
 21152                           
 21153                           ;UI.c: 283: change_state_to_logs_12();
 21154  0037A4  ECF2  F02E         	call	_change_state_to_logs_12	;wreg free
 21155                           
 21156                           ;UI.c: 284: }
 21157  0037A8  D0E7               	goto	i2l275
 21158  0037AA                     i2l10115:
 21159                           
 21160                           ;UI.c: 285: else if(enter){
 21161  0037AA  5067               	movf	_enter,w,c
 21162  0037AC  1068               	iorwf	_enter+1,w,c
 21163  0037AE  B4D8               	btfsc	status,2,c
 21164  0037B0  D007               	goto	i2l10119
 21165                           
 21166                           ;UI.c: 286: dispLogs(1);
 21167  0037B2  0E00               	movlw	0
 21168  0037B4  6E13               	movwf	dispLogs@myLog+1,c
 21169  0037B6  0E01               	movlw	1
 21170  0037B8  6E12               	movwf	dispLogs@myLog,c
 21171  0037BA  ECDF  F02F         	call	_dispLogs	;wreg free
 21172                           
 21173                           ;UI.c: 287: }
 21174  0037BE  D0DC               	goto	i2l275
 21175  0037C0                     i2l10119:
 21176                           
 21177                           ;UI.c: 288: else if(back){
 21178  0037C0  5063               	movf	_back,w,c
 21179  0037C2  1064               	iorwf	_back+1,w,c
 21180  0037C4  B4D8               	btfsc	status,2,c
 21181  0037C6  D0D8               	goto	i2l275
 21182                           
 21183                           ;UI.c: 289: change_state_to_menu_23();
 21184  0037C8  EC7A  F02E         	call	_change_state_to_menu_23	;wreg free
 21185                           
 21186                           ;UI.c: 290: }
 21187                           ;UI.c: 291: break;
 21188  0037CC  D0D5               	goto	i2l275
 21189  0037CE                     i2l10123:
 21190                           
 21191                           ;UI.c: 294: if(up){
 21192  0037CE  5075               	movf	_up,w,c
 21193  0037D0  1076               	iorwf	_up+1,w,c
 21194  0037D2  B4D8               	btfsc	status,2,c
 21195  0037D4  D003               	goto	i2l10127
 21196                           
 21197                           ;UI.c: 295: change_state_to_logs_11();
 21198  0037D6  EC0A  F02F         	call	_change_state_to_logs_11	;wreg free
 21199                           
 21200                           ;UI.c: 296: }
 21201  0037DA  D0CE               	goto	i2l275
 21202  0037DC                     i2l10127:
 21203                           
 21204                           ;UI.c: 297: else if(down){
 21205  0037DC  5065               	movf	_down,w,c
 21206  0037DE  1066               	iorwf	_down+1,w,c
 21207  0037E0  B4D8               	btfsc	status,2,c
 21208  0037E2  D003               	goto	i2l10131
 21209                           
 21210                           ;UI.c: 298: change_state_to_logs_23();
 21211  0037E4  EC39  F02F         	call	_change_state_to_logs_23	;wreg free
 21212                           
 21213                           ;UI.c: 299: }
 21214  0037E8  D0C7               	goto	i2l275
 21215  0037EA                     i2l10131:
 21216                           
 21217                           ;UI.c: 300: else if(enter){
 21218  0037EA  5067               	movf	_enter,w,c
 21219  0037EC  1068               	iorwf	_enter+1,w,c
 21220  0037EE  B4D8               	btfsc	status,2,c
 21221  0037F0  D007               	goto	i2l10135
 21222                           
 21223                           ;UI.c: 301: dispLogs(2);
 21224  0037F2  0E00               	movlw	0
 21225  0037F4  6E13               	movwf	dispLogs@myLog+1,c
 21226  0037F6  0E02               	movlw	2
 21227  0037F8  6E12               	movwf	dispLogs@myLog,c
 21228  0037FA  ECDF  F02F         	call	_dispLogs	;wreg free
 21229                           
 21230                           ;UI.c: 302: }
 21231  0037FE  D0BC               	goto	i2l275
 21232  003800                     i2l10135:
 21233                           
 21234                           ;UI.c: 303: else if(back){
 21235  003800  5063               	movf	_back,w,c
 21236  003802  1064               	iorwf	_back+1,w,c
 21237  003804  B4D8               	btfsc	status,2,c
 21238  003806  D0B8               	goto	i2l275
 21239                           
 21240                           ;UI.c: 304: change_state_to_menu_23();
 21241  003808  EC7A  F02E         	call	_change_state_to_menu_23	;wreg free
 21242                           
 21243                           ;UI.c: 305: }
 21244                           ;UI.c: 306: break;
 21245  00380C  D0B5               	goto	i2l275
 21246  00380E                     i2l10139:
 21247                           
 21248                           ;UI.c: 309: if(up){
 21249  00380E  5075               	movf	_up,w,c
 21250  003810  1076               	iorwf	_up+1,w,c
 21251  003812  B4D8               	btfsc	status,2,c
 21252  003814  D003               	goto	i2l10143
 21253                           
 21254                           ;UI.c: 310: change_state_to_logs_11();
 21255  003816  EC0A  F02F         	call	_change_state_to_logs_11	;wreg free
 21256                           
 21257                           ;UI.c: 311: }
 21258  00381A  D0AE               	goto	i2l275
 21259  00381C                     i2l10143:
 21260                           
 21261                           ;UI.c: 312: else if(down){
 21262  00381C  5065               	movf	_down,w,c
 21263  00381E  1066               	iorwf	_down+1,w,c
 21264  003820  B4D8               	btfsc	status,2,c
 21265  003822  D003               	goto	i2l10147
 21266                           
 21267                           ;UI.c: 313: change_state_to_logs_23();
 21268  003824  EC39  F02F         	call	_change_state_to_logs_23	;wreg free
 21269                           
 21270                           ;UI.c: 314: }
 21271  003828  D0A7               	goto	i2l275
 21272  00382A                     i2l10147:
 21273                           
 21274                           ;UI.c: 315: else if(enter){
 21275  00382A  5067               	movf	_enter,w,c
 21276  00382C  1068               	iorwf	_enter+1,w,c
 21277  00382E  B4D8               	btfsc	status,2,c
 21278  003830  D007               	goto	i2l10151
 21279                           
 21280                           ;UI.c: 316: dispLogs(2);
 21281  003832  0E00               	movlw	0
 21282  003834  6E13               	movwf	dispLogs@myLog+1,c
 21283  003836  0E02               	movlw	2
 21284  003838  6E12               	movwf	dispLogs@myLog,c
 21285  00383A  ECDF  F02F         	call	_dispLogs	;wreg free
 21286                           
 21287                           ;UI.c: 317: }
 21288  00383E  D09C               	goto	i2l275
 21289  003840                     i2l10151:
 21290                           
 21291                           ;UI.c: 318: else if(back){
 21292  003840  5063               	movf	_back,w,c
 21293  003842  1064               	iorwf	_back+1,w,c
 21294  003844  B4D8               	btfsc	status,2,c
 21295  003846  D098               	goto	i2l275
 21296                           
 21297                           ;UI.c: 319: change_state_to_menu_23();
 21298  003848  EC7A  F02E         	call	_change_state_to_menu_23	;wreg free
 21299                           
 21300                           ;UI.c: 320: }
 21301                           ;UI.c: 321: break;
 21302  00384C  D095               	goto	i2l275
 21303  00384E                     i2l10155:
 21304                           
 21305                           ;UI.c: 324: if(up){
 21306  00384E  5075               	movf	_up,w,c
 21307  003850  1076               	iorwf	_up+1,w,c
 21308  003852  B4D8               	btfsc	status,2,c
 21309  003854  D003               	goto	i2l10159
 21310                           
 21311                           ;UI.c: 325: change_state_to_logs_22();
 21312  003856  ECDA  F02E         	call	_change_state_to_logs_22	;wreg free
 21313                           
 21314                           ;UI.c: 326: }
 21315  00385A  D08E               	goto	i2l275
 21316  00385C                     i2l10159:
 21317                           
 21318                           ;UI.c: 327: else if(down){
 21319  00385C  5065               	movf	_down,w,c
 21320  00385E  1066               	iorwf	_down+1,w,c
 21321  003860  B4D8               	btfsc	status,2,c
 21322  003862  D003               	goto	i2l10163
 21323                           
 21324                           ;UI.c: 328: change_state_to_logs_34();
 21325  003864  ECAA  F02E         	call	_change_state_to_logs_34	;wreg free
 21326                           
 21327                           ;UI.c: 329: }
 21328  003868  D087               	goto	i2l275
 21329  00386A                     i2l10163:
 21330                           
 21331                           ;UI.c: 330: else if(enter){
 21332  00386A  5067               	movf	_enter,w,c
 21333  00386C  1068               	iorwf	_enter+1,w,c
 21334  00386E  B4D8               	btfsc	status,2,c
 21335  003870  D007               	goto	i2l10167
 21336                           
 21337                           ;UI.c: 331: dispLogs(3);
 21338  003872  0E00               	movlw	0
 21339  003874  6E13               	movwf	dispLogs@myLog+1,c
 21340  003876  0E03               	movlw	3
 21341  003878  6E12               	movwf	dispLogs@myLog,c
 21342  00387A  ECDF  F02F         	call	_dispLogs	;wreg free
 21343                           
 21344                           ;UI.c: 332: }
 21345  00387E  D07C               	goto	i2l275
 21346  003880                     i2l10167:
 21347                           
 21348                           ;UI.c: 333: else if(back){
 21349  003880  5063               	movf	_back,w,c
 21350  003882  1064               	iorwf	_back+1,w,c
 21351  003884  B4D8               	btfsc	status,2,c
 21352  003886  D078               	goto	i2l275
 21353                           
 21354                           ;UI.c: 334: change_state_to_menu_23();
 21355  003888  EC7A  F02E         	call	_change_state_to_menu_23	;wreg free
 21356                           
 21357                           ;UI.c: 335: }
 21358                           ;UI.c: 336: break;
 21359  00388C  D075               	goto	i2l275
 21360  00388E                     i2l10171:
 21361                           
 21362                           ;UI.c: 339: if(up){
 21363  00388E  5075               	movf	_up,w,c
 21364  003890  1076               	iorwf	_up+1,w,c
 21365  003892  B4D8               	btfsc	status,2,c
 21366  003894  D003               	goto	i2l10175
 21367                           
 21368                           ;UI.c: 340: change_state_to_logs_22();
 21369  003896  ECDA  F02E         	call	_change_state_to_logs_22	;wreg free
 21370                           
 21371                           ;UI.c: 341: }
 21372  00389A  D06E               	goto	i2l275
 21373  00389C                     i2l10175:
 21374                           
 21375                           ;UI.c: 342: else if(down){
 21376  00389C  5065               	movf	_down,w,c
 21377  00389E  1066               	iorwf	_down+1,w,c
 21378  0038A0  B4D8               	btfsc	status,2,c
 21379  0038A2  D003               	goto	i2l10179
 21380                           
 21381                           ;UI.c: 343: change_state_to_logs_34();
 21382  0038A4  ECAA  F02E         	call	_change_state_to_logs_34	;wreg free
 21383                           
 21384                           ;UI.c: 344: }
 21385  0038A8  D067               	goto	i2l275
 21386  0038AA                     i2l10179:
 21387                           
 21388                           ;UI.c: 345: else if(enter){
 21389  0038AA  5067               	movf	_enter,w,c
 21390  0038AC  1068               	iorwf	_enter+1,w,c
 21391  0038AE  B4D8               	btfsc	status,2,c
 21392  0038B0  D007               	goto	i2l10183
 21393                           
 21394                           ;UI.c: 346: dispLogs(3);
 21395  0038B2  0E00               	movlw	0
 21396  0038B4  6E13               	movwf	dispLogs@myLog+1,c
 21397  0038B6  0E03               	movlw	3
 21398  0038B8  6E12               	movwf	dispLogs@myLog,c
 21399  0038BA  ECDF  F02F         	call	_dispLogs	;wreg free
 21400                           
 21401                           ;UI.c: 347: }
 21402  0038BE  D05C               	goto	i2l275
 21403  0038C0                     i2l10183:
 21404                           
 21405                           ;UI.c: 348: else if(back){
 21406  0038C0  5063               	movf	_back,w,c
 21407  0038C2  1064               	iorwf	_back+1,w,c
 21408  0038C4  B4D8               	btfsc	status,2,c
 21409  0038C6  D058               	goto	i2l275
 21410                           
 21411                           ;UI.c: 349: change_state_to_menu_23();
 21412  0038C8  EC7A  F02E         	call	_change_state_to_menu_23	;wreg free
 21413                           
 21414                           ;UI.c: 350: }
 21415                           ;UI.c: 351: break;
 21416  0038CC  D055               	goto	i2l275
 21417  0038CE                     i2l10187:
 21418                           
 21419                           ;UI.c: 354: if(up){
 21420  0038CE  5075               	movf	_up,w,c
 21421  0038D0  1076               	iorwf	_up+1,w,c
 21422  0038D2  B4D8               	btfsc	status,2,c
 21423  0038D4  D003               	goto	i2l10191
 21424                           
 21425                           ;UI.c: 355: change_state_to_logs_33();
 21426  0038D6  ECC2  F02E         	call	_change_state_to_logs_33	;wreg free
 21427                           
 21428                           ;UI.c: 356: }
 21429  0038DA  D04E               	goto	i2l275
 21430  0038DC                     i2l10191:
 21431                           
 21432                           ;UI.c: 357: else if(down){
 21433  0038DC  5065               	movf	_down,w,c
 21434  0038DE  1066               	iorwf	_down+1,w,c
 21435  0038E0  B4D8               	btfsc	status,2,c
 21436  0038E2  D003               	goto	i2l10195
 21437                           
 21438                           ;UI.c: 358: change_state_to_logs_11();
 21439  0038E4  EC0A  F02F         	call	_change_state_to_logs_11	;wreg free
 21440                           
 21441                           ;UI.c: 359: }
 21442  0038E8  D047               	goto	i2l275
 21443  0038EA                     i2l10195:
 21444                           
 21445                           ;UI.c: 360: else if(enter){
 21446  0038EA  5067               	movf	_enter,w,c
 21447  0038EC  1068               	iorwf	_enter+1,w,c
 21448  0038EE  B4D8               	btfsc	status,2,c
 21449  0038F0  D007               	goto	i2l10199
 21450                           
 21451                           ;UI.c: 361: dispLogs(4);
 21452  0038F2  0E00               	movlw	0
 21453  0038F4  6E13               	movwf	dispLogs@myLog+1,c
 21454  0038F6  0E04               	movlw	4
 21455  0038F8  6E12               	movwf	dispLogs@myLog,c
 21456  0038FA  ECDF  F02F         	call	_dispLogs	;wreg free
 21457                           
 21458                           ;UI.c: 362: }
 21459  0038FE  D03C               	goto	i2l275
 21460  003900                     i2l10199:
 21461                           
 21462                           ;UI.c: 363: else if(back){
 21463  003900  5063               	movf	_back,w,c
 21464  003902  1064               	iorwf	_back+1,w,c
 21465  003904  B4D8               	btfsc	status,2,c
 21466  003906  D038               	goto	i2l275
 21467                           
 21468                           ;UI.c: 364: change_state_to_menu_23();
 21469  003908  EC7A  F02E         	call	_change_state_to_menu_23	;wreg free
 21470                           
 21471                           ;UI.c: 370: }
 21472                           
 21473                           ;UI.c: 369: break;
 21474                           
 21475                           ;UI.c: 368: default:
 21476                           
 21477                           ;UI.c: 365: }
 21478                           ;UI.c: 366: break;
 21479  00390C  D035               	goto	i2l275
 21480  00390E                     i2l10205:
 21481  00390E  C0E8  F043         	movff	_cur_state,??_updateMenu
 21482  003912  C0E9  F044         	movff	_cur_state+1,??_updateMenu+1
 21483                           
 21484                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 21485                           ; Switch size 1, requested type "space"
 21486                           ; Number of cases is 3, Range of values is 0 to 4
 21487                           ; switch strategies available:
 21488                           ; Name         Instructions Cycles
 21489                           ; simple_byte           10     6 (average)
 21490                           ;	Chosen strategy is simple_byte
 21491  003916  5044               	movf	??_updateMenu+1,w,c
 21492  003918  0A00               	xorlw	0	; case 0
 21493  00391A  B4D8               	btfsc	status,2,c
 21494  00391C  D007               	goto	i2l11211
 21495  00391E  0A03               	xorlw	3	; case 3
 21496  003920  B4D8               	btfsc	status,2,c
 21497  003922  D015               	goto	i2l11213
 21498  003924  0A07               	xorlw	7	; case 4
 21499  003926  B4D8               	btfsc	status,2,c
 21500  003928  D020               	goto	i2l11215
 21501  00392A  D026               	goto	i2l275
 21502  00392C                     i2l11211:
 21503                           
 21504                           ; Switch size 1, requested type "space"
 21505                           ; Number of cases is 5, Range of values is 0 to 23
 21506                           ; switch strategies available:
 21507                           ; Name         Instructions Cycles
 21508                           ; simple_byte           16     9 (average)
 21509                           ;	Chosen strategy is simple_byte
 21510  00392C  5043               	movf	??_updateMenu,w,c
 21511  00392E  0A00               	xorlw	0	; case 0
 21512  003930  B4D8               	btfsc	status,2,c
 21513  003932  D6DC               	goto	i2l10057
 21514  003934  0A0B               	xorlw	11	; case 11
 21515  003936  B4D8               	btfsc	status,2,c
 21516  003938  D6DC               	goto	i2l10059
 21517  00393A  0A07               	xorlw	7	; case 12
 21518  00393C  B4D8               	btfsc	status,2,c
 21519  00393E  D6EE               	goto	i2l10071
 21520  003940  0A1A               	xorlw	26	; case 22
 21521  003942  B4D8               	btfsc	status,2,c
 21522  003944  D6F9               	goto	i2l10083
 21523  003946  0A01               	xorlw	1	; case 23
 21524  003948  B4D8               	btfsc	status,2,c
 21525  00394A  D70C               	goto	i2l10095
 21526  00394C  D015               	goto	i2l275
 21527  00394E                     i2l11213:
 21528                           
 21529                           ; Switch size 1, requested type "space"
 21530                           ; Number of cases is 4, Range of values is 243 to 255
 21531                           ; switch strategies available:
 21532                           ; Name         Instructions Cycles
 21533                           ; simple_byte           13     7 (average)
 21534                           ;	Chosen strategy is simple_byte
 21535  00394E  5043               	movf	??_updateMenu,w,c
 21536  003950  0AF3               	xorlw	243	; case 243
 21537  003952  B4D8               	btfsc	status,2,c
 21538  003954  D71C               	goto	i2l10107
 21539  003956  0A07               	xorlw	7	; case 244
 21540  003958  B4D8               	btfsc	status,2,c
 21541  00395A  D739               	goto	i2l10123
 21542  00395C  0A0A               	xorlw	10	; case 254
 21543  00395E  B4D8               	btfsc	status,2,c
 21544  003960  D756               	goto	i2l10139
 21545  003962  0A01               	xorlw	1	; case 255
 21546  003964  B4D8               	btfsc	status,2,c
 21547  003966  D773               	goto	i2l10155
 21548  003968  D007               	goto	i2l275
 21549  00396A                     i2l11215:
 21550                           
 21551                           ; Switch size 1, requested type "space"
 21552                           ; Number of cases is 2, Range of values is 9 to 10
 21553                           ; switch strategies available:
 21554                           ; Name         Instructions Cycles
 21555                           ; simple_byte            7     4 (average)
 21556                           ;	Chosen strategy is simple_byte
 21557  00396A  5043               	movf	??_updateMenu,w,c
 21558  00396C  0A09               	xorlw	9	; case 9
 21559  00396E  B4D8               	btfsc	status,2,c
 21560  003970  D78E               	goto	i2l10171
 21561  003972  0A03               	xorlw	3	; case 10
 21562  003974  B4D8               	btfsc	status,2,c
 21563  003976  D7AB               	goto	i2l10187
 21564  003978                     i2l275:
 21565                           
 21566                           ;UI.c: 371: }
 21567                           ;UI.c: 372: (INTCONbits.GIE = 1);
 21568  003978  8EF2               	bsf	intcon,7,c	;volatile
 21569  00397A  0012               	return		;funcret
 21570  00397C                     __end_of_updateMenu:
 21571                           	opt stack 0
 21572                           pclatu	equ	0xFFB
 21573                           pclath	equ	0xFFA
 21574                           tblptru	equ	0xFF8
 21575                           tblptrh	equ	0xFF7
 21576                           tblptrl	equ	0xFF6
 21577                           tablat	equ	0xFF5
 21578                           prodh	equ	0xFF4
 21579                           prodl	equ	0xFF3
 21580                           intcon	equ	0xFF2
 21581                           intcon2	equ	0xFF1
 21582                           intcon3	equ	0xFF0
 21583                           indf0	equ	0xFEF
 21584                           postinc0	equ	0xFEE
 21585                           fsr0h	equ	0xFEA
 21586                           fsr0l	equ	0xFE9
 21587                           wreg	equ	0xFE8
 21588                           postdec1	equ	0xFE5
 21589                           fsr1h	equ	0xFE2
 21590                           fsr1l	equ	0xFE1
 21591                           indf2	equ	0xFDF
 21592                           postinc2	equ	0xFDE
 21593                           postdec2	equ	0xFDD
 21594                           fsr2h	equ	0xFDA
 21595                           fsr2l	equ	0xFD9
 21596                           status	equ	0xFD8
 21597                           
 21598 ;; *************** function i2_change_state_to_menu_start *****************
 21599 ;; Defined at:
 21600 ;;		line 477 in file "UI.c"
 21601 ;; Parameters:    Size  Location     Type
 21602 ;;		None
 21603 ;; Auto vars:     Size  Location     Type
 21604 ;;		None
 21605 ;; Return value:  Size  Location     Type
 21606 ;;                  1    wreg      void 
 21607 ;; Registers used:
 21608 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21609 ;; Tracked objects:
 21610 ;;		On entry : 0/0
 21611 ;;		On exit  : 0/0
 21612 ;;		Unchanged: 0/0
 21613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21618 ;;Total ram usage:        0 bytes
 21619 ;; Hardware stack levels used:    1
 21620 ;; Hardware stack levels required when called:    4
 21621 ;; This function calls:
 21622 ;;		i2_lcdInst
 21623 ;;		i2_printRTC
 21624 ;;		i2_printf
 21625 ;; This function is called by:
 21626 ;;		_updateMenu
 21627 ;;		_handler
 21628 ;; This function uses a non-reentrant model
 21629 ;;
 21630                           
 21631                           	psect	text68
 21632  005F4A                     __ptext68:
 21633                           	opt stack 0
 21634  005F4A                     i2_change_state_to_menu_start:
 21635                           	opt stack 19
 21636                           
 21637                           ;UI.c: 478: cur_state = 0;
 21638                           
 21639                           ;incstack = 0
 21640  005F4A  0E00               	movlw	0
 21641  005F4C  0100               	movlb	0	; () banked
 21642  005F4E  6FE9               	movwf	(_cur_state+1)& (0+255),b
 21643  005F50  0E00               	movlw	0
 21644  005F52  6FE8               	movwf	_cur_state& (0+255),b
 21645                           
 21646                           ; BSR set to: 0
 21647                           ;UI.c: 480: lcdInst(0b10000000);;
 21648  005F54  0E80               	movlw	128
 21649  005F56  EC7B  F030         	call	i2_lcdInst
 21650                           
 21651                           ;UI.c: 481: printRTC();
 21652  005F5A  ECBE  F01C         	call	i2_printRTC	;wreg free
 21653                           
 21654                           ;UI.c: 482: lcdInst(0b11000000);;
 21655  005F5E  0EC0               	movlw	192
 21656  005F60  EC7B  F030         	call	i2_lcdInst
 21657                           
 21658                           ;UI.c: 483: printf("PUSH TO CONTINUE");
 21659  005F64  0E06               	movlw	low STR_30
 21660  005F66  6E0D               	movwf	i2printf@f,c
 21661  005F68  0EFE               	movlw	high STR_30
 21662  005F6A  6E0E               	movwf	i2printf@f+1,c
 21663  005F6C  ECC0  F016         	call	i2_printf	;wreg free
 21664  005F70  0012               	return		;funcret
 21665  005F72                     __end_ofi2_change_state_to_menu_start:
 21666                           	opt stack 0
 21667                           pclatu	equ	0xFFB
 21668                           pclath	equ	0xFFA
 21669                           tblptru	equ	0xFF8
 21670                           tblptrh	equ	0xFF7
 21671                           tblptrl	equ	0xFF6
 21672                           tablat	equ	0xFF5
 21673                           prodh	equ	0xFF4
 21674                           prodl	equ	0xFF3
 21675                           intcon	equ	0xFF2
 21676                           intcon2	equ	0xFF1
 21677                           intcon3	equ	0xFF0
 21678                           indf0	equ	0xFEF
 21679                           postinc0	equ	0xFEE
 21680                           fsr0h	equ	0xFEA
 21681                           fsr0l	equ	0xFE9
 21682                           wreg	equ	0xFE8
 21683                           postdec1	equ	0xFE5
 21684                           fsr1h	equ	0xFE2
 21685                           fsr1l	equ	0xFE1
 21686                           indf2	equ	0xFDF
 21687                           postinc2	equ	0xFDE
 21688                           postdec2	equ	0xFDD
 21689                           fsr2h	equ	0xFDA
 21690                           fsr2l	equ	0xFD9
 21691                           status	equ	0xFD8
 21692                           
 21693 ;; *************** function i2_printRTC *****************
 21694 ;; Defined at:
 21695 ;;		line 63 in file "RTC.c"
 21696 ;; Parameters:    Size  Location     Type
 21697 ;;		None
 21698 ;; Auto vars:     Size  Location     Type
 21699 ;;  printRTC       14   44[COMRAM] int [7]
 21700 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 21701 ;;  printRTC        2   64[COMRAM] int 
 21702 ;;  printRTC        2   58[COMRAM] int 
 21703 ;; Return value:  Size  Location     Type
 21704 ;;                  1    wreg      void 
 21705 ;; Registers used:
 21706 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21707 ;; Tracked objects:
 21708 ;;		On entry : 0/0
 21709 ;;		On exit  : 0/0
 21710 ;;		Unchanged: 0/0
 21711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21713 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21714 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21715 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21716 ;;Total ram usage:       25 bytes
 21717 ;; Hardware stack levels used:    1
 21718 ;; Hardware stack levels required when called:    3
 21719 ;; This function calls:
 21720 ;;		i2_getRTC
 21721 ;;		i2_lcdInst
 21722 ;;		i2_printf
 21723 ;;		i2_strcpy
 21724 ;; This function is called by:
 21725 ;;		i2_change_state_to_menu_start
 21726 ;; This function uses a non-reentrant model
 21727 ;;
 21728                           
 21729                           	psect	text69
 21730  00397C                     __ptext69:
 21731                           	opt stack 0
 21732  00397C                     i2_printRTC:
 21733                           	opt stack 19
 21734                           
 21735                           ;RTC.c: 64: getRTC();
 21736                           
 21737                           ;incstack = 0
 21738  00397C  ECAB  F02A         	call	i2_getRTC	;wreg free
 21739                           
 21740                           ;RTC.c: 65: char month[] = "MMM";
 21741  003980  C153  F03D         	movff	printRTC@F3242,i2printRTC@month
 21742  003984  C154  F03E         	movff	printRTC@F3242+1,i2printRTC@month+1
 21743  003988  C155  F03F         	movff	printRTC@F3242+2,i2printRTC@month+2
 21744  00398C  C156  F040         	movff	printRTC@F3242+3,i2printRTC@month+3
 21745                           
 21746                           ;RTC.c: 66: int INT_time[7];
 21747                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 21748  003990  0E00               	movlw	0
 21749  003992  6E42               	movwf	i2printRTC@i+1,c
 21750  003994  0E00               	movlw	0
 21751  003996  6E41               	movwf	i2printRTC@i,c
 21752  003998  BE42               	btfsc	i2printRTC@i+1,7,c
 21753  00399A  D006               	goto	i2l7849
 21754  00399C  5042               	movf	i2printRTC@i+1,w,c
 21755  00399E  E135               	bnz	i2l634
 21756  0039A0  0E07               	movlw	7
 21757  0039A2  5C41               	subwf	i2printRTC@i,w,c
 21758  0039A4  B0D8               	btfsc	status,0,c
 21759  0039A6  D031               	goto	i2l634
 21760  0039A8                     i2l7849:
 21761                           
 21762                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 21763  0039A8  0E1C               	movlw	low _time
 21764  0039AA  2441               	addwf	i2printRTC@i,w,c
 21765  0039AC  6ED9               	movwf	fsr2l,c
 21766  0039AE  0E01               	movlw	high _time
 21767  0039B0  2042               	addwfc	i2printRTC@i+1,w,c
 21768  0039B2  6EDA               	movwf	fsr2h,c
 21769  0039B4  50DF               	movf	indf2,w,c
 21770  0039B6  6E2A               	movwf	??i2_printRTC& (0+255),c
 21771  0039B8  3A2A               	swapf	??i2_printRTC,f,c
 21772  0039BA  0E0F               	movlw	15
 21773  0039BC  162A               	andwf	??i2_printRTC,f,c
 21774  0039BE  0E0F               	movlw	15
 21775  0039C0  162A               	andwf	??i2_printRTC,f,c
 21776  0039C2  502A               	movf	??i2_printRTC,w,c
 21777  0039C4  0D0A               	mullw	10
 21778  0039C6  0E1C               	movlw	low _time
 21779  0039C8  2441               	addwf	i2printRTC@i,w,c
 21780  0039CA  6ED9               	movwf	fsr2l,c
 21781  0039CC  0E01               	movlw	high _time
 21782  0039CE  2042               	addwfc	i2printRTC@i+1,w,c
 21783  0039D0  6EDA               	movwf	fsr2h,c
 21784  0039D2  50DF               	movf	indf2,w,c
 21785  0039D4  0B0F               	andlw	15
 21786  0039D6  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 21787  0039D8  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 21788  0039DA  50F3               	movf	prodl,w,c
 21789  0039DC  262B               	addwf	??i2_printRTC+1,f,c
 21790  0039DE  50F4               	movf	prodh,w,c
 21791  0039E0  222C               	addwfc	??i2_printRTC+2,f,c
 21792  0039E2  90D8               	bcf	status,0,c
 21793  0039E4  3441               	rlcf	i2printRTC@i,w,c
 21794  0039E6  6ED9               	movwf	fsr2l,c
 21795  0039E8  3442               	rlcf	i2printRTC@i+1,w,c
 21796  0039EA  6EDA               	movwf	fsr2h,c
 21797  0039EC  0E2D               	movlw	low i2printRTC@INT_time
 21798  0039EE  26D9               	addwf	fsr2l,f,c
 21799  0039F0  0E00               	movlw	high i2printRTC@INT_time
 21800  0039F2  22DA               	addwfc	fsr2h,f,c
 21801  0039F4  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 21802  0039F8  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 21803  0039FC  4A41               	infsnz	i2printRTC@i,f,c
 21804  0039FE  2A42               	incf	i2printRTC@i+1,f,c
 21805  003A00  BE42               	btfsc	i2printRTC@i+1,7,c
 21806  003A02  D7D2               	goto	i2l7849
 21807  003A04  5042               	movf	i2printRTC@i+1,w,c
 21808  003A06  E101               	bnz	i2u680_40
 21809  003A08  D7CB               	goto	L18
 21810  003A0A                     i2u680_40:
 21811  003A0A                     i2l634:
 21812                           
 21813                           ;RTC.c: 69: }
 21814                           ;RTC.c: 70: int RTC_month = INT_time[5];
 21815  003A0A  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 21816  003A0E  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 21817                           
 21818                           ;RTC.c: 72: switch(RTC_month){
 21819  003A12  D084               	goto	i2l7881
 21820  003A14                     i2l7855:
 21821                           
 21822                           ;RTC.c: 74: strcpy(month, "JAN");
 21823  003A14  0E3D               	movlw	low i2printRTC@month
 21824  003A16  6E01               	movwf	i2strcpy@to,c
 21825  003A18  0E00               	movlw	high i2printRTC@month
 21826  003A1A  6E02               	movwf	i2strcpy@to+1,c
 21827  003A1C  0EDA               	movlw	low STR_8
 21828  003A1E  6E03               	movwf	i2strcpy@from,c
 21829  003A20  0EFF               	movlw	high STR_8
 21830  003A22  6E04               	movwf	i2strcpy@from+1,c
 21831  003A24  EC01  F02E         	call	i2_strcpy	;wreg free
 21832                           
 21833                           ;RTC.c: 75: break;
 21834  003A28  D0A6               	goto	i2l7883
 21835  003A2A                     i2l7857:
 21836                           
 21837                           ;RTC.c: 77: strcpy(month, "FEB");
 21838  003A2A  0E3D               	movlw	low i2printRTC@month
 21839  003A2C  6E01               	movwf	i2strcpy@to,c
 21840  003A2E  0E00               	movlw	high i2printRTC@month
 21841  003A30  6E02               	movwf	i2strcpy@to+1,c
 21842  003A32  0ECA               	movlw	low STR_9
 21843  003A34  6E03               	movwf	i2strcpy@from,c
 21844  003A36  0EFF               	movlw	high STR_9
 21845  003A38  6E04               	movwf	i2strcpy@from+1,c
 21846  003A3A  EC01  F02E         	call	i2_strcpy	;wreg free
 21847                           
 21848                           ;RTC.c: 78: break;
 21849  003A3E  D09B               	goto	i2l7883
 21850  003A40                     i2l7859:
 21851                           
 21852                           ;RTC.c: 80: strcpy(month, "MAR");
 21853  003A40  0E3D               	movlw	low i2printRTC@month
 21854  003A42  6E01               	movwf	i2strcpy@to,c
 21855  003A44  0E00               	movlw	high i2printRTC@month
 21856  003A46  6E02               	movwf	i2strcpy@to+1,c
 21857  003A48  0EE6               	movlw	low STR_10
 21858  003A4A  6E03               	movwf	i2strcpy@from,c
 21859  003A4C  0EFF               	movlw	high STR_10
 21860  003A4E  6E04               	movwf	i2strcpy@from+1,c
 21861  003A50  EC01  F02E         	call	i2_strcpy	;wreg free
 21862                           
 21863                           ;RTC.c: 81: break;
 21864  003A54  D090               	goto	i2l7883
 21865  003A56                     i2l7861:
 21866                           
 21867                           ;RTC.c: 83: strcpy(month, "APR");
 21868  003A56  0E3D               	movlw	low i2printRTC@month
 21869  003A58  6E01               	movwf	i2strcpy@to,c
 21870  003A5A  0E00               	movlw	high i2printRTC@month
 21871  003A5C  6E02               	movwf	i2strcpy@to+1,c
 21872  003A5E  0EEA               	movlw	low STR_11
 21873  003A60  6E03               	movwf	i2strcpy@from,c
 21874  003A62  0EFF               	movlw	high STR_11
 21875  003A64  6E04               	movwf	i2strcpy@from+1,c
 21876  003A66  EC01  F02E         	call	i2_strcpy	;wreg free
 21877                           
 21878                           ;RTC.c: 84: break;
 21879  003A6A  D085               	goto	i2l7883
 21880  003A6C                     i2l7863:
 21881                           
 21882                           ;RTC.c: 86: strcpy(month, "MAY");
 21883  003A6C  0E3D               	movlw	low i2printRTC@month
 21884  003A6E  6E01               	movwf	i2strcpy@to,c
 21885  003A70  0E00               	movlw	high i2printRTC@month
 21886  003A72  6E02               	movwf	i2strcpy@to+1,c
 21887  003A74  0EFA               	movlw	low STR_12
 21888  003A76  6E03               	movwf	i2strcpy@from,c
 21889  003A78  0EFF               	movlw	high STR_12
 21890  003A7A  6E04               	movwf	i2strcpy@from+1,c
 21891  003A7C  EC01  F02E         	call	i2_strcpy	;wreg free
 21892                           
 21893                           ;RTC.c: 87: break;
 21894  003A80  D07A               	goto	i2l7883
 21895  003A82                     i2l7865:
 21896                           
 21897                           ;RTC.c: 89: strcpy(month, "JUN");
 21898  003A82  0E3D               	movlw	low i2printRTC@month
 21899  003A84  6E01               	movwf	i2strcpy@to,c
 21900  003A86  0E00               	movlw	high i2printRTC@month
 21901  003A88  6E02               	movwf	i2strcpy@to+1,c
 21902  003A8A  0EDE               	movlw	low STR_13
 21903  003A8C  6E03               	movwf	i2strcpy@from,c
 21904  003A8E  0EFF               	movlw	high STR_13
 21905  003A90  6E04               	movwf	i2strcpy@from+1,c
 21906  003A92  EC01  F02E         	call	i2_strcpy	;wreg free
 21907                           
 21908                           ;RTC.c: 90: break;
 21909  003A96  D06F               	goto	i2l7883
 21910  003A98                     i2l7867:
 21911                           
 21912                           ;RTC.c: 92: strcpy(month, "JUL");
 21913  003A98  0E3D               	movlw	low i2printRTC@month
 21914  003A9A  6E01               	movwf	i2strcpy@to,c
 21915  003A9C  0E00               	movlw	high i2printRTC@month
 21916  003A9E  6E02               	movwf	i2strcpy@to+1,c
 21917  003AA0  0ED6               	movlw	low STR_14
 21918  003AA2  6E03               	movwf	i2strcpy@from,c
 21919  003AA4  0EFF               	movlw	high STR_14
 21920  003AA6  6E04               	movwf	i2strcpy@from+1,c
 21921  003AA8  EC01  F02E         	call	i2_strcpy	;wreg free
 21922                           
 21923                           ;RTC.c: 93: break;
 21924  003AAC  D064               	goto	i2l7883
 21925  003AAE                     i2l7869:
 21926                           
 21927                           ;RTC.c: 95: strcpy(month, "AUG");
 21928  003AAE  0E3D               	movlw	low i2printRTC@month
 21929  003AB0  6E01               	movwf	i2strcpy@to,c
 21930  003AB2  0E00               	movlw	high i2printRTC@month
 21931  003AB4  6E02               	movwf	i2strcpy@to+1,c
 21932  003AB6  0ED2               	movlw	low STR_15
 21933  003AB8  6E03               	movwf	i2strcpy@from,c
 21934  003ABA  0EFF               	movlw	high STR_15
 21935  003ABC  6E04               	movwf	i2strcpy@from+1,c
 21936  003ABE  EC01  F02E         	call	i2_strcpy	;wreg free
 21937                           
 21938                           ;RTC.c: 96: break;
 21939  003AC2  D059               	goto	i2l7883
 21940  003AC4                     i2l7871:
 21941                           
 21942                           ;RTC.c: 98: strcpy(month, "SEP");
 21943  003AC4  0E3D               	movlw	low i2printRTC@month
 21944  003AC6  6E01               	movwf	i2strcpy@to,c
 21945  003AC8  0E00               	movlw	high i2printRTC@month
 21946  003ACA  6E02               	movwf	i2strcpy@to+1,c
 21947  003ACC  0EE2               	movlw	low STR_16
 21948  003ACE  6E03               	movwf	i2strcpy@from,c
 21949  003AD0  0EFF               	movlw	high STR_16
 21950  003AD2  6E04               	movwf	i2strcpy@from+1,c
 21951  003AD4  EC01  F02E         	call	i2_strcpy	;wreg free
 21952                           
 21953                           ;RTC.c: 99: break;
 21954  003AD8  D04E               	goto	i2l7883
 21955  003ADA                     i2l7873:
 21956                           
 21957                           ;RTC.c: 101: strcpy(month, "OCT");
 21958  003ADA  0E3D               	movlw	low i2printRTC@month
 21959  003ADC  6E01               	movwf	i2strcpy@to,c
 21960  003ADE  0E00               	movlw	high i2printRTC@month
 21961  003AE0  6E02               	movwf	i2strcpy@to+1,c
 21962  003AE2  0EF2               	movlw	low STR_17
 21963  003AE4  6E03               	movwf	i2strcpy@from,c
 21964  003AE6  0EFF               	movlw	high STR_17
 21965  003AE8  6E04               	movwf	i2strcpy@from+1,c
 21966  003AEA  EC01  F02E         	call	i2_strcpy	;wreg free
 21967                           
 21968                           ;RTC.c: 102: break;
 21969  003AEE  D043               	goto	i2l7883
 21970  003AF0                     i2l7875:
 21971                           
 21972                           ;RTC.c: 104: strcpy(month, "NOV");
 21973  003AF0  0E3D               	movlw	low i2printRTC@month
 21974  003AF2  6E01               	movwf	i2strcpy@to,c
 21975  003AF4  0E00               	movlw	high i2printRTC@month
 21976  003AF6  6E02               	movwf	i2strcpy@to+1,c
 21977  003AF8  0EF6               	movlw	low STR_18
 21978  003AFA  6E03               	movwf	i2strcpy@from,c
 21979  003AFC  0EFF               	movlw	high STR_18
 21980  003AFE  6E04               	movwf	i2strcpy@from+1,c
 21981  003B00  EC01  F02E         	call	i2_strcpy	;wreg free
 21982                           
 21983                           ;RTC.c: 105: break;
 21984  003B04  D038               	goto	i2l7883
 21985  003B06                     i2l7877:
 21986                           
 21987                           ;RTC.c: 107: strcpy(month, "DEC");
 21988  003B06  0E3D               	movlw	low i2printRTC@month
 21989  003B08  6E01               	movwf	i2strcpy@to,c
 21990  003B0A  0E00               	movlw	high i2printRTC@month
 21991  003B0C  6E02               	movwf	i2strcpy@to+1,c
 21992  003B0E  0ECE               	movlw	low STR_19
 21993  003B10  6E03               	movwf	i2strcpy@from,c
 21994  003B12  0EFF               	movlw	high STR_19
 21995  003B14  6E04               	movwf	i2strcpy@from+1,c
 21996  003B16  EC01  F02E         	call	i2_strcpy	;wreg free
 21997                           
 21998                           ;RTC.c: 109: }
 21999                           
 22000                           ;RTC.c: 108: break;
 22001  003B1A  D02D               	goto	i2l7883
 22002  003B1C                     i2l7881:
 22003  003B1C  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 22004  003B20  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 22005                           
 22006                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 22007                           ; Switch size 1, requested type "space"
 22008                           ; Number of cases is 1, Range of values is 0 to 0
 22009                           ; switch strategies available:
 22010                           ; Name         Instructions Cycles
 22011                           ; simple_byte            4     3 (average)
 22012                           ;	Chosen strategy is simple_byte
 22013  003B24  502B               	movf	??i2_printRTC+1,w,c
 22014  003B26  0A00               	xorlw	0	; case 0
 22015  003B28  A4D8               	btfss	status,2,c
 22016  003B2A  D025               	goto	i2l7883
 22017                           
 22018                           ; Switch size 1, requested type "space"
 22019                           ; Number of cases is 12, Range of values is 1 to 12
 22020                           ; switch strategies available:
 22021                           ; Name         Instructions Cycles
 22022                           ; simple_byte           37    19 (average)
 22023                           ;	Chosen strategy is simple_byte
 22024  003B2C  502A               	movf	??i2_printRTC,w,c
 22025  003B2E  0A01               	xorlw	1	; case 1
 22026  003B30  B4D8               	btfsc	status,2,c
 22027  003B32  D770               	goto	i2l7855
 22028  003B34  0A03               	xorlw	3	; case 2
 22029  003B36  B4D8               	btfsc	status,2,c
 22030  003B38  D778               	goto	i2l7857
 22031  003B3A  0A01               	xorlw	1	; case 3
 22032  003B3C  B4D8               	btfsc	status,2,c
 22033  003B3E  D780               	goto	i2l7859
 22034  003B40  0A07               	xorlw	7	; case 4
 22035  003B42  B4D8               	btfsc	status,2,c
 22036  003B44  D788               	goto	i2l7861
 22037  003B46  0A01               	xorlw	1	; case 5
 22038  003B48  B4D8               	btfsc	status,2,c
 22039  003B4A  D790               	goto	i2l7863
 22040  003B4C  0A03               	xorlw	3	; case 6
 22041  003B4E  B4D8               	btfsc	status,2,c
 22042  003B50  D798               	goto	i2l7865
 22043  003B52  0A01               	xorlw	1	; case 7
 22044  003B54  B4D8               	btfsc	status,2,c
 22045  003B56  D7A0               	goto	i2l7867
 22046  003B58  0A0F               	xorlw	15	; case 8
 22047  003B5A  B4D8               	btfsc	status,2,c
 22048  003B5C  D7A8               	goto	i2l7869
 22049  003B5E  0A01               	xorlw	1	; case 9
 22050  003B60  B4D8               	btfsc	status,2,c
 22051  003B62  D7B0               	goto	i2l7871
 22052  003B64  0A03               	xorlw	3	; case 10
 22053  003B66  B4D8               	btfsc	status,2,c
 22054  003B68  D7B8               	goto	i2l7873
 22055  003B6A  0A01               	xorlw	1	; case 11
 22056  003B6C  B4D8               	btfsc	status,2,c
 22057  003B6E  D7C0               	goto	i2l7875
 22058  003B70  0A07               	xorlw	7	; case 12
 22059  003B72  B4D8               	btfsc	status,2,c
 22060  003B74  D7C8               	goto	i2l7877
 22061  003B76                     i2l7883:
 22062                           
 22063                           ;RTC.c: 110: lcdInst(0b10000000);;
 22064  003B76  0E80               	movlw	128
 22065  003B78  EC7B  F030         	call	i2_lcdInst
 22066                           
 22067                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 22068  003B7C  0EC2               	movlw	low STR_21
 22069  003B7E  6E0D               	movwf	i2printf@f,c
 22070  003B80  0EFA               	movlw	high STR_21
 22071  003B82  6E0E               	movwf	i2printf@f+1,c
 22072  003B84  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 22073  003B88  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 22074  003B8C  0E3D               	movlw	low i2printRTC@month
 22075  003B8E  6E11               	movwf	?i2_printf+4,c
 22076  003B90  0E00               	movlw	high i2printRTC@month
 22077  003B92  6E12               	movwf	?i2_printf+5,c
 22078  003B94  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 22079  003B98  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 22080  003B9C  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 22081  003BA0  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 22082  003BA4  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 22083  003BA8  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 22084  003BAC  ECC0  F016         	call	i2_printf	;wreg free
 22085  003BB0  0012               	return		;funcret
 22086  003BB2                     __end_ofi2_printRTC:
 22087                           	opt stack 0
 22088                           pclatu	equ	0xFFB
 22089                           pclath	equ	0xFFA
 22090                           tblptru	equ	0xFF8
 22091                           tblptrh	equ	0xFF7
 22092                           tblptrl	equ	0xFF6
 22093                           tablat	equ	0xFF5
 22094                           prodh	equ	0xFF4
 22095                           prodl	equ	0xFF3
 22096                           intcon	equ	0xFF2
 22097                           intcon2	equ	0xFF1
 22098                           intcon3	equ	0xFF0
 22099                           indf0	equ	0xFEF
 22100                           postinc0	equ	0xFEE
 22101                           fsr0h	equ	0xFEA
 22102                           fsr0l	equ	0xFE9
 22103                           wreg	equ	0xFE8
 22104                           postdec1	equ	0xFE5
 22105                           fsr1h	equ	0xFE2
 22106                           fsr1l	equ	0xFE1
 22107                           indf2	equ	0xFDF
 22108                           postinc2	equ	0xFDE
 22109                           postdec2	equ	0xFDD
 22110                           fsr2h	equ	0xFDA
 22111                           fsr2l	equ	0xFD9
 22112                           status	equ	0xFD8
 22113                           
 22114 ;; *************** function i2_strcpy *****************
 22115 ;; Defined at:
 22116 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 22117 ;; Parameters:    Size  Location     Type
 22118 ;;  to              2    0[COMRAM] PTR unsigned char 
 22119 ;;		 -> printRTC@month(4), UI@month(4), 
 22120 ;;  from            2    2[COMRAM] PTR const unsigned char 
 22121 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 22122 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 22123 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 22124 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 22125 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 22126 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 22127 ;;		 -> STR_8(4), 
 22128 ;; Auto vars:     Size  Location     Type
 22129 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 22130 ;;		 -> printRTC@month(4), UI@month(4), 
 22131 ;; Return value:  Size  Location     Type
 22132 ;;                  2    0[COMRAM] PTR unsigned char 
 22133 ;; Registers used:
 22134 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 22135 ;; Tracked objects:
 22136 ;;		On entry : 0/0
 22137 ;;		On exit  : 0/0
 22138 ;;		Unchanged: 0/0
 22139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22140 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22141 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22143 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22144 ;;Total ram usage:        6 bytes
 22145 ;; Hardware stack levels used:    1
 22146 ;; This function calls:
 22147 ;;		Nothing
 22148 ;; This function is called by:
 22149 ;;		i2_printRTC
 22150 ;; This function uses a non-reentrant model
 22151 ;;
 22152                           
 22153                           	psect	text70
 22154  005C02                     __ptext70:
 22155                           	opt stack 0
 22156  005C02                     i2_strcpy:
 22157                           	opt stack 21
 22158                           
 22159                           ;incstack = 0
 22160  005C02  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 22161  005C06  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 22162  005C0A  D004               	goto	i2l7407
 22163  005C0C                     i2l7405:
 22164  005C0C  4A05               	infsnz	i2strcpy@cp,f,c
 22165  005C0E  2A06               	incf	i2strcpy@cp+1,f,c
 22166  005C10  4A03               	infsnz	i2strcpy@from,f,c
 22167  005C12  2A04               	incf	i2strcpy@from+1,f,c
 22168  005C14                     i2l7407:
 22169  005C14  C003  FFF6         	movff	i2strcpy@from,tblptrl
 22170  005C18  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 22171  005C1C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22172  005C1C  6AF8               	clrf	tblptru,c
 22173  005C1E                     	endif
 22174  005C1E                     	if	0	;tblptru may be non-zero
 22175  005C1E                     	endif
 22176  005C1E  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 22177  005C22  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 22178  005C26  0008               	tblrd		*
 22179  005C28  CFF5 FFDF          	movff	tablat,indf2
 22180  005C2C  50DF               	movf	indf2,w,c
 22181  005C2E  B4D8               	btfsc	status,2,c
 22182  005C30  0012               	return	
 22183  005C32  D7EC               	goto	i2l7405
 22184  005C34                     __end_ofi2_strcpy:
 22185                           	opt stack 0
 22186                           pclatu	equ	0xFFB
 22187                           pclath	equ	0xFFA
 22188                           tblptru	equ	0xFF8
 22189                           tblptrh	equ	0xFF7
 22190                           tblptrl	equ	0xFF6
 22191                           tablat	equ	0xFF5
 22192                           prodh	equ	0xFF4
 22193                           prodl	equ	0xFF3
 22194                           intcon	equ	0xFF2
 22195                           intcon2	equ	0xFF1
 22196                           intcon3	equ	0xFF0
 22197                           indf0	equ	0xFEF
 22198                           postinc0	equ	0xFEE
 22199                           fsr0h	equ	0xFEA
 22200                           fsr0l	equ	0xFE9
 22201                           wreg	equ	0xFE8
 22202                           postdec1	equ	0xFE5
 22203                           fsr1h	equ	0xFE2
 22204                           fsr1l	equ	0xFE1
 22205                           indf2	equ	0xFDF
 22206                           postinc2	equ	0xFDE
 22207                           postdec2	equ	0xFDD
 22208                           fsr2h	equ	0xFDA
 22209                           fsr2l	equ	0xFD9
 22210                           status	equ	0xFD8
 22211                           
 22212 ;; *************** function _inputHandler *****************
 22213 ;; Defined at:
 22214 ;;		line 375 in file "UI.c"
 22215 ;; Parameters:    Size  Location     Type
 22216 ;;		None
 22217 ;; Auto vars:     Size  Location     Type
 22218 ;;		None
 22219 ;; Return value:  Size  Location     Type
 22220 ;;                  2   41[COMRAM] int 
 22221 ;; Registers used:
 22222 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22223 ;; Tracked objects:
 22224 ;;		On entry : 0/0
 22225 ;;		On exit  : 0/0
 22226 ;;		Unchanged: 0/0
 22227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22228 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22230 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22231 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22232 ;;Total ram usage:        4 bytes
 22233 ;; Hardware stack levels used:    1
 22234 ;; Hardware stack levels required when called:    4
 22235 ;; This function calls:
 22236 ;;		_change_state_to_logs_11
 22237 ;;		_change_state_to_logs_12
 22238 ;;		_change_state_to_logs_22
 22239 ;;		_change_state_to_logs_23
 22240 ;;		_change_state_to_logs_33
 22241 ;;		_change_state_to_logs_34
 22242 ;;		_change_state_to_menu_11
 22243 ;;		_change_state_to_menu_23
 22244 ;;		i2_change_state_to_menu_12
 22245 ;;		i2_change_state_to_menu_22
 22246 ;; This function is called by:
 22247 ;;		_updateMenu
 22248 ;; This function uses a non-reentrant model
 22249 ;;
 22250                           
 22251                           	psect	text71
 22252  003BB2                     __ptext71:
 22253                           	opt stack 0
 22254  003BB2                     _inputHandler:
 22255                           	opt stack 18
 22256                           
 22257                           ;UI.c: 380: if(firstboot){
 22258                           
 22259                           ;incstack = 0
 22260  003BB2  0101               	movlb	1	; () banked
 22261  003BB4  513B               	movf	_firstboot& (0+255),w,b
 22262  003BB6  0101               	movlb	1	; () banked
 22263  003BB8  113C               	iorwf	(_firstboot+1)& (0+255),w,b
 22264  003BBA  B4D8               	btfsc	status,2,c
 22265  003BBC  D00C               	goto	i2l7951
 22266                           
 22267                           ; BSR set to: 1
 22268                           ;UI.c: 381: change_state_to_menu_11();
 22269  003BBE  EC92  F02E         	call	_change_state_to_menu_11	;wreg free
 22270                           
 22271                           ;UI.c: 382: firstboot = 0;
 22272  003BC2  0E00               	movlw	0
 22273  003BC4  0101               	movlb	1	; () banked
 22274  003BC6  6F3C               	movwf	(_firstboot+1)& (0+255),b
 22275  003BC8  0E00               	movlw	0
 22276  003BCA  6F3B               	movwf	_firstboot& (0+255),b
 22277                           
 22278                           ; BSR set to: 1
 22279                           ;UI.c: 383: return 0;
 22280  003BCC  0E00               	movlw	0
 22281  003BCE  6E2B               	movwf	?_inputHandler+1,c
 22282  003BD0  0E00               	movlw	0
 22283  003BD2  6E2A               	movwf	?_inputHandler,c
 22284                           
 22285                           ; BSR set to: 1
 22286  003BD4  0012               	return	
 22287  003BD6                     i2l7951:
 22288                           
 22289                           ; BSR set to: 1
 22290                           ;UI.c: 384: }
 22291                           ;UI.c: 385: if (logstate){
 22292  003BD6  0100               	movlb	0	; () banked
 22293  003BD8  51F8               	movf	_logstate& (0+255),w,b
 22294  003BDA  0100               	movlb	0	; () banked
 22295  003BDC  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 22296  003BDE  B4D8               	btfsc	status,2,c
 22297  003BE0  D0C7               	goto	i2l8069
 22298                           
 22299                           ; BSR set to: 0
 22300                           ;UI.c: 386: if(input == 'C' && PORTBbits.RB1 == 1){
 22301  003BE2  0E43               	movlw	67
 22302  003BE4  187D               	xorwf	_input,w,c	;volatile
 22303  003BE6  A4D8               	btfss	status,2,c
 22304  003BE8  D012               	goto	i2l7969
 22305                           
 22306                           ; BSR set to: 0
 22307  003BEA  B281               	btfsc	3969,1,c	;volatile
 22308  003BEC  D009               	goto	i2l7961
 22309  003BEE  D00F               	goto	i2l7969
 22310  003BF0                     i2l7959:
 22311                           
 22312                           ;UI.c: 389: _delay((unsigned long)((10)*(32000000/4000.0)));
 22313  003BF0  0E68               	movlw	104
 22314  003BF2  6E2C               	movwf	??_inputHandler& (0+255),c
 22315  003BF4  0EE4               	movlw	228
 22316  003BF6                     i2u1248_47:
 22317  003BF6  2EE8               	decfsz	wreg,f,c
 22318  003BF8  D7FE               	bra	i2u1248_47
 22319  003BFA  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 22320  003BFC  D7FC               	bra	i2u1248_47
 22321  003BFE  D000               	nop2	
 22322  003C00                     i2l7961:
 22323  003C00  B281               	btfsc	3969,1,c	;volatile
 22324  003C02  D7F6               	goto	i2l7959
 22325  003C04                     i2l7963:
 22326                           
 22327                           ;UI.c: 390: }
 22328                           ;UI.c: 391: return 0;
 22329  003C04  0E00               	movlw	0
 22330  003C06  6E2B               	movwf	?_inputHandler+1,c
 22331  003C08  0E00               	movlw	0
 22332  003C0A  6E2A               	movwf	?_inputHandler,c
 22333  003C0C  0012               	return	
 22334  003C0E                     i2l7969:
 22335                           
 22336                           ;UI.c: 393: else if (input == 'D'){
 22337  003C0E  0E44               	movlw	68
 22338  003C10  187D               	xorwf	_input,w,c	;volatile
 22339  003C12  A4D8               	btfss	status,2,c
 22340  003C14  D7F7               	goto	i2l7963
 22341                           
 22342                           ;UI.c: 395: logstate = 0;
 22343  003C16  0E00               	movlw	0
 22344  003C18  0100               	movlb	0	; () banked
 22345  003C1A  6FF9               	movwf	(_logstate+1)& (0+255),b
 22346  003C1C  0E00               	movlw	0
 22347  003C1E  6FF8               	movwf	_logstate& (0+255),b
 22348                           
 22349                           ;UI.c: 396: switch(cur_state){
 22350  003C20  D012               	goto	i2l7987
 22351  003C22                     i2l7973:
 22352                           
 22353                           ;UI.c: 398: change_state_to_logs_11();
 22354  003C22  EC0A  F02F         	call	_change_state_to_logs_11	;wreg free
 22355                           
 22356                           ;UI.c: 399: break;
 22357  003C26  D7EE               	goto	i2l7963
 22358  003C28                     i2l7975:
 22359                           
 22360                           ;UI.c: 401: change_state_to_logs_12();
 22361  003C28  ECF2  F02E         	call	_change_state_to_logs_12	;wreg free
 22362                           
 22363                           ;UI.c: 402: break;
 22364  003C2C  D7EB               	goto	i2l7963
 22365  003C2E                     i2l7977:
 22366                           
 22367                           ;UI.c: 404: change_state_to_logs_22();
 22368  003C2E  ECDA  F02E         	call	_change_state_to_logs_22	;wreg free
 22369                           
 22370                           ;UI.c: 405: break;
 22371  003C32  D7E8               	goto	i2l7963
 22372  003C34                     i2l7979:
 22373                           
 22374                           ;UI.c: 407: change_state_to_logs_23();
 22375  003C34  EC39  F02F         	call	_change_state_to_logs_23	;wreg free
 22376                           
 22377                           ;UI.c: 408: break;
 22378  003C38  D7E5               	goto	i2l7963
 22379  003C3A                     i2l7981:
 22380                           
 22381                           ;UI.c: 410: change_state_to_logs_33();
 22382  003C3A  ECC2  F02E         	call	_change_state_to_logs_33	;wreg free
 22383                           
 22384                           ;UI.c: 411: break;
 22385  003C3E  D7E2               	goto	i2l7963
 22386  003C40                     i2l7983:
 22387                           
 22388                           ;UI.c: 413: change_state_to_logs_34();
 22389  003C40  ECAA  F02E         	call	_change_state_to_logs_34	;wreg free
 22390                           
 22391                           ;UI.c: 415: }
 22392                           
 22393                           ;UI.c: 414: break;
 22394  003C44  D7DF               	goto	i2l7963
 22395  003C46                     i2l7987:
 22396  003C46  C0E8  F02C         	movff	_cur_state,??_inputHandler
 22397  003C4A  C0E9  F02D         	movff	_cur_state+1,??_inputHandler+1
 22398                           
 22399                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 22400                           ; Switch size 1, requested type "space"
 22401                           ; Number of cases is 2, Range of values is 3 to 4
 22402                           ; switch strategies available:
 22403                           ; Name         Instructions Cycles
 22404                           ; simple_byte            7     4 (average)
 22405                           ;	Chosen strategy is simple_byte
 22406  003C4E  502D               	movf	??_inputHandler+1,w,c
 22407  003C50  0A03               	xorlw	3	; case 3
 22408  003C52  B4D8               	btfsc	status,2,c
 22409  003C54  D004               	goto	i2l11219
 22410  003C56  0A07               	xorlw	7	; case 4
 22411  003C58  B4D8               	btfsc	status,2,c
 22412  003C5A  D00F               	goto	i2l11221
 22413  003C5C  D7D3               	goto	i2l7963
 22414  003C5E                     i2l11219:
 22415                           
 22416                           ; Switch size 1, requested type "space"
 22417                           ; Number of cases is 4, Range of values is 243 to 255
 22418                           ; switch strategies available:
 22419                           ; Name         Instructions Cycles
 22420                           ; simple_byte           13     7 (average)
 22421                           ;	Chosen strategy is simple_byte
 22422  003C5E  502C               	movf	??_inputHandler,w,c
 22423  003C60  0AF3               	xorlw	243	; case 243
 22424  003C62  B4D8               	btfsc	status,2,c
 22425  003C64  D7DE               	goto	i2l7973
 22426  003C66  0A07               	xorlw	7	; case 244
 22427  003C68  B4D8               	btfsc	status,2,c
 22428  003C6A  D7DE               	goto	i2l7975
 22429  003C6C  0A0A               	xorlw	10	; case 254
 22430  003C6E  B4D8               	btfsc	status,2,c
 22431  003C70  D7DE               	goto	i2l7977
 22432  003C72  0A01               	xorlw	1	; case 255
 22433  003C74  B4D8               	btfsc	status,2,c
 22434  003C76  D7DE               	goto	i2l7979
 22435  003C78  D7C5               	goto	i2l7963
 22436  003C7A                     i2l11221:
 22437                           
 22438                           ; Switch size 1, requested type "space"
 22439                           ; Number of cases is 2, Range of values is 9 to 10
 22440                           ; switch strategies available:
 22441                           ; Name         Instructions Cycles
 22442                           ; simple_byte            7     4 (average)
 22443                           ;	Chosen strategy is simple_byte
 22444  003C7A  502C               	movf	??_inputHandler,w,c
 22445  003C7C  0A09               	xorlw	9	; case 9
 22446  003C7E  B4D8               	btfsc	status,2,c
 22447  003C80  D7DC               	goto	i2l7981
 22448  003C82  0A03               	xorlw	3	; case 10
 22449  003C84  B4D8               	btfsc	status,2,c
 22450  003C86  D7DC               	goto	i2l7983
 22451  003C88  D7BD               	goto	i2l7963
 22452  003C8A                     i2l7999:
 22453                           
 22454                           ;UI.c: 425: if(cur_state == 11){
 22455  003C8A  0E0B               	movlw	11
 22456  003C8C  0100               	movlb	0	; () banked
 22457  003C8E  19E8               	xorwf	_cur_state& (0+255),w,b
 22458  003C90  0100               	movlb	0	; () banked
 22459  003C92  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
 22460  003C94  A4D8               	btfss	status,2,c
 22461  003C96  D005               	goto	i2l8007
 22462                           
 22463                           ; BSR set to: 0
 22464                           ;UI.c: 426: return 0;
 22465  003C98  0E00               	movlw	0
 22466  003C9A  6E2B               	movwf	?_inputHandler+1,c
 22467  003C9C  0E00               	movlw	0
 22468  003C9E  6E2A               	movwf	?_inputHandler,c
 22469                           
 22470                           ; BSR set to: 0
 22471  003CA0  0012               	return	
 22472  003CA2                     i2l8007:
 22473                           
 22474                           ; BSR set to: 0
 22475                           ;UI.c: 428: else{
 22476                           ;UI.c: 429: change_state_to_menu_11();
 22477  003CA2  EC92  F02E         	call	_change_state_to_menu_11	;wreg free
 22478                           
 22479                           ;UI.c: 430: }
 22480                           ;UI.c: 431: return 0;
 22481  003CA6  0E00               	movlw	0
 22482  003CA8  6E2B               	movwf	?_inputHandler+1,c
 22483  003CAA  0E00               	movlw	0
 22484  003CAC  6E2A               	movwf	?_inputHandler,c
 22485  003CAE  0012               	return	
 22486  003CB0                     i2l8013:
 22487                           
 22488                           ;UI.c: 433: if(cur_state == 22 || cur_state == 12){
 22489  003CB0  0E16               	movlw	22
 22490  003CB2  0100               	movlb	0	; () banked
 22491  003CB4  19E8               	xorwf	_cur_state& (0+255),w,b
 22492  003CB6  0100               	movlb	0	; () banked
 22493  003CB8  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
 22494  003CBA  B4D8               	btfsc	status,2,c
 22495  003CBC  D007               	goto	i2l8017
 22496                           
 22497                           ; BSR set to: 0
 22498  003CBE  0E0C               	movlw	12
 22499  003CC0  0100               	movlb	0	; () banked
 22500  003CC2  19E8               	xorwf	_cur_state& (0+255),w,b
 22501  003CC4  0100               	movlb	0	; () banked
 22502  003CC6  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
 22503  003CC8  A4D8               	btfss	status,2,c
 22504  003CCA  D005               	goto	i2l8023
 22505  003CCC                     i2l8017:
 22506                           
 22507                           ; BSR set to: 0
 22508                           ;UI.c: 434: return 0;
 22509  003CCC  0E00               	movlw	0
 22510  003CCE  6E2B               	movwf	?_inputHandler+1,c
 22511  003CD0  0E00               	movlw	0
 22512  003CD2  6E2A               	movwf	?_inputHandler,c
 22513                           
 22514                           ; BSR set to: 0
 22515  003CD4  0012               	return	
 22516  003CD6                     i2l8023:
 22517                           
 22518                           ; BSR set to: 0
 22519                           ;UI.c: 436: else if(cur_state == 23){
 22520  003CD6  0E17               	movlw	23
 22521  003CD8  0100               	movlb	0	; () banked
 22522  003CDA  19E8               	xorwf	_cur_state& (0+255),w,b
 22523  003CDC  0100               	movlb	0	; () banked
 22524  003CDE  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
 22525  003CE0  A4D8               	btfss	status,2,c
 22526  003CE2  D003               	goto	i2l8027
 22527                           
 22528                           ; BSR set to: 0
 22529                           ;UI.c: 437: change_state_to_menu_22();
 22530  003CE4  EC4A  F02E         	call	i2_change_state_to_menu_22	;wreg free
 22531                           
 22532                           ;UI.c: 438: }
 22533  003CE8  D002               	goto	i2l8029
 22534  003CEA                     i2l8027:
 22535                           
 22536                           ;UI.c: 439: else{
 22537                           ;UI.c: 440: change_state_to_menu_12();
 22538  003CEA  EC62  F02E         	call	i2_change_state_to_menu_12	;wreg free
 22539  003CEE                     i2l8029:
 22540                           
 22541                           ;UI.c: 441: }
 22542                           ;UI.c: 442: return 0;
 22543  003CEE  0E00               	movlw	0
 22544  003CF0  6E2B               	movwf	?_inputHandler+1,c
 22545  003CF2  0E00               	movlw	0
 22546  003CF4  6E2A               	movwf	?_inputHandler,c
 22547  003CF6  0012               	return	
 22548  003CF8                     i2l8033:
 22549                           
 22550                           ;UI.c: 444: if(cur_state == 23){
 22551  003CF8  0E17               	movlw	23
 22552  003CFA  0100               	movlb	0	; () banked
 22553  003CFC  19E8               	xorwf	_cur_state& (0+255),w,b
 22554  003CFE  0100               	movlb	0	; () banked
 22555  003D00  11E9               	iorwf	(_cur_state+1)& (0+255),w,b
 22556  003D02  A4D8               	btfss	status,2,c
 22557  003D04  D005               	goto	i2l8041
 22558                           
 22559                           ; BSR set to: 0
 22560                           ;UI.c: 445: return 0;
 22561  003D06  0E00               	movlw	0
 22562  003D08  6E2B               	movwf	?_inputHandler+1,c
 22563  003D0A  0E00               	movlw	0
 22564  003D0C  6E2A               	movwf	?_inputHandler,c
 22565                           
 22566                           ; BSR set to: 0
 22567  003D0E  0012               	return	
 22568  003D10                     i2l8041:
 22569                           
 22570                           ; BSR set to: 0
 22571                           ;UI.c: 447: else{
 22572                           ;UI.c: 448: change_state_to_menu_23();
 22573  003D10  EC7A  F02E         	call	_change_state_to_menu_23	;wreg free
 22574                           
 22575                           ;UI.c: 449: }
 22576                           ;UI.c: 450: return 0;
 22577  003D14  0E00               	movlw	0
 22578  003D16  6E2B               	movwf	?_inputHandler+1,c
 22579  003D18  0E00               	movlw	0
 22580  003D1A  6E2A               	movwf	?_inputHandler,c
 22581  003D1C  0012               	return	
 22582  003D1E                     i2l8047:
 22583                           
 22584                           ;UI.c: 453: up = 1;
 22585  003D1E  0E00               	movlw	0
 22586  003D20  6E76               	movwf	_up+1,c
 22587  003D22  0E01               	movlw	1
 22588  003D24  6E75               	movwf	_up,c
 22589                           
 22590                           ;UI.c: 454: return 1;
 22591  003D26  0E00               	movlw	0
 22592  003D28  6E2B               	movwf	?_inputHandler+1,c
 22593  003D2A  0E01               	movlw	1
 22594  003D2C  6E2A               	movwf	?_inputHandler,c
 22595  003D2E  0012               	return	
 22596  003D30                     i2l8051:
 22597                           
 22598                           ;UI.c: 456: down = 1;
 22599  003D30  0E00               	movlw	0
 22600  003D32  6E66               	movwf	_down+1,c
 22601  003D34  0E01               	movlw	1
 22602  003D36  6E65               	movwf	_down,c
 22603                           
 22604                           ;UI.c: 457: return 1;
 22605  003D38  0E00               	movlw	0
 22606  003D3A  6E2B               	movwf	?_inputHandler+1,c
 22607  003D3C  0E01               	movlw	1
 22608  003D3E  6E2A               	movwf	?_inputHandler,c
 22609  003D40  0012               	return	
 22610  003D42                     i2l8055:
 22611                           
 22612                           ;UI.c: 459: enter = 1;
 22613  003D42  0E00               	movlw	0
 22614  003D44  6E68               	movwf	_enter+1,c
 22615  003D46  0E01               	movlw	1
 22616  003D48  6E67               	movwf	_enter,c
 22617                           
 22618                           ;UI.c: 460: return 1;
 22619  003D4A  0E00               	movlw	0
 22620  003D4C  6E2B               	movwf	?_inputHandler+1,c
 22621  003D4E  0E01               	movlw	1
 22622  003D50  6E2A               	movwf	?_inputHandler,c
 22623  003D52  0012               	return	
 22624  003D54                     i2l8059:
 22625                           
 22626                           ;UI.c: 462: back = 1;
 22627  003D54  0E00               	movlw	0
 22628  003D56  6E64               	movwf	_back+1,c
 22629  003D58  0E01               	movlw	1
 22630  003D5A  6E63               	movwf	_back,c
 22631                           
 22632                           ;UI.c: 463: return 1;
 22633  003D5C  0E00               	movlw	0
 22634  003D5E  6E2B               	movwf	?_inputHandler+1,c
 22635  003D60  0E01               	movlw	1
 22636  003D62  6E2A               	movwf	?_inputHandler,c
 22637  003D64  0012               	return	
 22638  003D66                     i2l8063:
 22639                           
 22640                           ;UI.c: 466: return 1;
 22641  003D66  0E00               	movlw	0
 22642  003D68  6E2B               	movwf	?_inputHandler+1,c
 22643  003D6A  0E01               	movlw	1
 22644  003D6C  6E2A               	movwf	?_inputHandler,c
 22645                           
 22646                           ;UI.c: 467: }
 22647  003D6E  0012               	return	
 22648  003D70                     i2l8069:
 22649  003D70  507D               	movf	_input,w,c	;volatile
 22650                           
 22651                           ; Switch size 1, requested type "space"
 22652                           ; Number of cases is 7, Range of values is 49 to 68
 22653                           ; switch strategies available:
 22654                           ; Name         Instructions Cycles
 22655                           ; simple_byte           22    12 (average)
 22656                           ;	Chosen strategy is simple_byte
 22657  003D72  0A31               	xorlw	49	; case 49
 22658  003D74  B4D8               	btfsc	status,2,c
 22659  003D76  D789               	goto	i2l7999
 22660  003D78  0A03               	xorlw	3	; case 50
 22661  003D7A  B4D8               	btfsc	status,2,c
 22662  003D7C  D799               	goto	i2l8013
 22663  003D7E  0A01               	xorlw	1	; case 51
 22664  003D80  B4D8               	btfsc	status,2,c
 22665  003D82  D7BA               	goto	i2l8033
 22666  003D84  0A72               	xorlw	114	; case 65
 22667  003D86  B4D8               	btfsc	status,2,c
 22668  003D88  D7CA               	goto	i2l8047
 22669  003D8A  0A03               	xorlw	3	; case 66
 22670  003D8C  B4D8               	btfsc	status,2,c
 22671  003D8E  D7D0               	goto	i2l8051
 22672  003D90  0A01               	xorlw	1	; case 67
 22673  003D92  B4D8               	btfsc	status,2,c
 22674  003D94  D7D6               	goto	i2l8055
 22675  003D96  0A07               	xorlw	7	; case 68
 22676  003D98  B4D8               	btfsc	status,2,c
 22677  003D9A  D7DC               	goto	i2l8059
 22678  003D9C  D7E4               	goto	i2l8063
 22679  003D9E                     __end_of_inputHandler:
 22680                           	opt stack 0
 22681                           pclatu	equ	0xFFB
 22682                           pclath	equ	0xFFA
 22683                           tblptru	equ	0xFF8
 22684                           tblptrh	equ	0xFF7
 22685                           tblptrl	equ	0xFF6
 22686                           tablat	equ	0xFF5
 22687                           prodh	equ	0xFF4
 22688                           prodl	equ	0xFF3
 22689                           intcon	equ	0xFF2
 22690                           intcon2	equ	0xFF1
 22691                           intcon3	equ	0xFF0
 22692                           indf0	equ	0xFEF
 22693                           postinc0	equ	0xFEE
 22694                           fsr0h	equ	0xFEA
 22695                           fsr0l	equ	0xFE9
 22696                           wreg	equ	0xFE8
 22697                           postdec1	equ	0xFE5
 22698                           fsr1h	equ	0xFE2
 22699                           fsr1l	equ	0xFE1
 22700                           indf2	equ	0xFDF
 22701                           postinc2	equ	0xFDE
 22702                           postdec2	equ	0xFDD
 22703                           fsr2h	equ	0xFDA
 22704                           fsr2l	equ	0xFD9
 22705                           status	equ	0xFD8
 22706                           
 22707 ;; *************** function i2_change_state_to_menu_22 *****************
 22708 ;; Defined at:
 22709 ;;		line 501 in file "UI.c"
 22710 ;; Parameters:    Size  Location     Type
 22711 ;;		None
 22712 ;; Auto vars:     Size  Location     Type
 22713 ;;		None
 22714 ;; Return value:  Size  Location     Type
 22715 ;;                  1    wreg      void 
 22716 ;; Registers used:
 22717 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22718 ;; Tracked objects:
 22719 ;;		On entry : 0/0
 22720 ;;		On exit  : 0/0
 22721 ;;		Unchanged: 0/0
 22722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22727 ;;Total ram usage:        0 bytes
 22728 ;; Hardware stack levels used:    1
 22729 ;; Hardware stack levels required when called:    3
 22730 ;; This function calls:
 22731 ;;		i2_lcdInst
 22732 ;;		i2_printf
 22733 ;; This function is called by:
 22734 ;;		_updateMenu
 22735 ;;		_inputHandler
 22736 ;; This function uses a non-reentrant model
 22737 ;;
 22738                           
 22739                           	psect	text72
 22740  005C94                     __ptext72:
 22741                           	opt stack 0
 22742  005C94                     i2_change_state_to_menu_22:
 22743                           	opt stack 19
 22744                           
 22745                           ;UI.c: 502: cur_state = 22;
 22746                           
 22747                           ;incstack = 0
 22748  005C94  0E00               	movlw	0
 22749  005C96  0100               	movlb	0	; () banked
 22750  005C98  6FE9               	movwf	(_cur_state+1)& (0+255),b
 22751  005C9A  0E16               	movlw	22
 22752  005C9C  6FE8               	movwf	_cur_state& (0+255),b
 22753                           
 22754                           ; BSR set to: 0
 22755                           ;UI.c: 504: lcdInst(0b10000000);;
 22756  005C9E  0E80               	movlw	128
 22757  005CA0  EC7B  F030         	call	i2_lcdInst
 22758                           
 22759                           ;UI.c: 505: printf("2. SORT        <");
 22760  005CA4  0ED3               	movlw	low STR_34
 22761  005CA6  6E0D               	movwf	i2printf@f,c
 22762  005CA8  0EFD               	movlw	high STR_34
 22763  005CAA  6E0E               	movwf	i2printf@f+1,c
 22764  005CAC  ECC0  F016         	call	i2_printf	;wreg free
 22765                           
 22766                           ;UI.c: 506: lcdInst(0b11000000);;
 22767  005CB0  0EC0               	movlw	192
 22768  005CB2  EC7B  F030         	call	i2_lcdInst
 22769                           
 22770                           ;UI.c: 507: printf("3. LOGS         ");
 22771  005CB6  0E18               	movlw	low STR_36
 22772  005CB8  6E0D               	movwf	i2printf@f,c
 22773  005CBA  0EFD               	movlw	high STR_36
 22774  005CBC  6E0E               	movwf	i2printf@f+1,c
 22775  005CBE  ECC0  F016         	call	i2_printf	;wreg free
 22776  005CC2  0012               	return		;funcret
 22777  005CC4                     __end_ofi2_change_state_to_menu_22:
 22778                           	opt stack 0
 22779                           pclatu	equ	0xFFB
 22780                           pclath	equ	0xFFA
 22781                           tblptru	equ	0xFF8
 22782                           tblptrh	equ	0xFF7
 22783                           tblptrl	equ	0xFF6
 22784                           tablat	equ	0xFF5
 22785                           prodh	equ	0xFF4
 22786                           prodl	equ	0xFF3
 22787                           intcon	equ	0xFF2
 22788                           intcon2	equ	0xFF1
 22789                           intcon3	equ	0xFF0
 22790                           indf0	equ	0xFEF
 22791                           postinc0	equ	0xFEE
 22792                           fsr0h	equ	0xFEA
 22793                           fsr0l	equ	0xFE9
 22794                           wreg	equ	0xFE8
 22795                           postdec1	equ	0xFE5
 22796                           fsr1h	equ	0xFE2
 22797                           fsr1l	equ	0xFE1
 22798                           indf2	equ	0xFDF
 22799                           postinc2	equ	0xFDE
 22800                           postdec2	equ	0xFDD
 22801                           fsr2h	equ	0xFDA
 22802                           fsr2l	equ	0xFD9
 22803                           status	equ	0xFD8
 22804                           
 22805 ;; *************** function i2_change_state_to_menu_12 *****************
 22806 ;; Defined at:
 22807 ;;		line 493 in file "UI.c"
 22808 ;; Parameters:    Size  Location     Type
 22809 ;;		None
 22810 ;; Auto vars:     Size  Location     Type
 22811 ;;		None
 22812 ;; Return value:  Size  Location     Type
 22813 ;;                  1    wreg      void 
 22814 ;; Registers used:
 22815 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22816 ;; Tracked objects:
 22817 ;;		On entry : 0/0
 22818 ;;		On exit  : 0/0
 22819 ;;		Unchanged: 0/0
 22820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22824 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22825 ;;Total ram usage:        0 bytes
 22826 ;; Hardware stack levels used:    1
 22827 ;; Hardware stack levels required when called:    3
 22828 ;; This function calls:
 22829 ;;		i2_lcdInst
 22830 ;;		i2_printf
 22831 ;; This function is called by:
 22832 ;;		_updateMenu
 22833 ;;		_inputHandler
 22834 ;; This function uses a non-reentrant model
 22835 ;;
 22836                           
 22837                           	psect	text73
 22838  005CC4                     __ptext73:
 22839                           	opt stack 0
 22840  005CC4                     i2_change_state_to_menu_12:
 22841                           	opt stack 19
 22842                           
 22843                           ;UI.c: 494: cur_state = 12;
 22844                           
 22845                           ;incstack = 0
 22846  005CC4  0E00               	movlw	0
 22847  005CC6  0100               	movlb	0	; () banked
 22848  005CC8  6FE9               	movwf	(_cur_state+1)& (0+255),b
 22849  005CCA  0E0C               	movlw	12
 22850  005CCC  6FE8               	movwf	_cur_state& (0+255),b
 22851                           
 22852                           ; BSR set to: 0
 22853                           ;UI.c: 496: lcdInst(0b10000000);;
 22854  005CCE  0E80               	movlw	128
 22855  005CD0  EC7B  F030         	call	i2_lcdInst
 22856                           
 22857                           ;UI.c: 497: printf("1. DATE/TIME    ");
 22858  005CD4  0E3A               	movlw	low STR_33
 22859  005CD6  6E0D               	movwf	i2printf@f,c
 22860  005CD8  0EFD               	movlw	high STR_33
 22861  005CDA  6E0E               	movwf	i2printf@f+1,c
 22862  005CDC  ECC0  F016         	call	i2_printf	;wreg free
 22863                           
 22864                           ;UI.c: 498: lcdInst(0b11000000);;
 22865  005CE0  0EC0               	movlw	192
 22866  005CE2  EC7B  F030         	call	i2_lcdInst
 22867                           
 22868                           ;UI.c: 499: printf("2. SORT        <");
 22869  005CE6  0ED3               	movlw	low STR_34
 22870  005CE8  6E0D               	movwf	i2printf@f,c
 22871  005CEA  0EFD               	movlw	high STR_34
 22872  005CEC  6E0E               	movwf	i2printf@f+1,c
 22873  005CEE  ECC0  F016         	call	i2_printf	;wreg free
 22874  005CF2  0012               	return		;funcret
 22875  005CF4                     __end_ofi2_change_state_to_menu_12:
 22876                           	opt stack 0
 22877                           pclatu	equ	0xFFB
 22878                           pclath	equ	0xFFA
 22879                           tblptru	equ	0xFF8
 22880                           tblptrh	equ	0xFF7
 22881                           tblptrl	equ	0xFF6
 22882                           tablat	equ	0xFF5
 22883                           prodh	equ	0xFF4
 22884                           prodl	equ	0xFF3
 22885                           intcon	equ	0xFF2
 22886                           intcon2	equ	0xFF1
 22887                           intcon3	equ	0xFF0
 22888                           indf0	equ	0xFEF
 22889                           postinc0	equ	0xFEE
 22890                           fsr0h	equ	0xFEA
 22891                           fsr0l	equ	0xFE9
 22892                           wreg	equ	0xFE8
 22893                           postdec1	equ	0xFE5
 22894                           fsr1h	equ	0xFE2
 22895                           fsr1l	equ	0xFE1
 22896                           indf2	equ	0xFDF
 22897                           postinc2	equ	0xFDE
 22898                           postdec2	equ	0xFDD
 22899                           fsr2h	equ	0xFDA
 22900                           fsr2l	equ	0xFD9
 22901                           status	equ	0xFD8
 22902                           
 22903 ;; *************** function _change_state_to_menu_23 *****************
 22904 ;; Defined at:
 22905 ;;		line 509 in file "UI.c"
 22906 ;; Parameters:    Size  Location     Type
 22907 ;;		None
 22908 ;; Auto vars:     Size  Location     Type
 22909 ;;		None
 22910 ;; Return value:  Size  Location     Type
 22911 ;;                  1    wreg      void 
 22912 ;; Registers used:
 22913 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22914 ;; Tracked objects:
 22915 ;;		On entry : 0/0
 22916 ;;		On exit  : 0/0
 22917 ;;		Unchanged: 0/0
 22918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22922 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22923 ;;Total ram usage:        0 bytes
 22924 ;; Hardware stack levels used:    1
 22925 ;; Hardware stack levels required when called:    3
 22926 ;; This function calls:
 22927 ;;		i2_lcdInst
 22928 ;;		i2_printf
 22929 ;; This function is called by:
 22930 ;;		_updateMenu
 22931 ;;		_inputHandler
 22932 ;; This function uses a non-reentrant model
 22933 ;;
 22934                           
 22935                           	psect	text74
 22936  005CF4                     __ptext74:
 22937                           	opt stack 0
 22938  005CF4                     _change_state_to_menu_23:
 22939                           	opt stack 18
 22940                           
 22941                           ;UI.c: 510: cur_state = 23;
 22942                           
 22943                           ;incstack = 0
 22944  005CF4  0E00               	movlw	0
 22945  005CF6  0100               	movlb	0	; () banked
 22946  005CF8  6FE9               	movwf	(_cur_state+1)& (0+255),b
 22947  005CFA  0E17               	movlw	23
 22948  005CFC  6FE8               	movwf	_cur_state& (0+255),b
 22949                           
 22950                           ; BSR set to: 0
 22951                           ;UI.c: 512: lcdInst(0b10000000);;
 22952  005CFE  0E80               	movlw	128
 22953  005D00  EC7B  F030         	call	i2_lcdInst
 22954                           
 22955                           ;UI.c: 513: printf("2. SORT         ");
 22956  005D04  0E29               	movlw	low STR_32
 22957  005D06  6E0D               	movwf	i2printf@f,c
 22958  005D08  0EFD               	movlw	high STR_32
 22959  005D0A  6E0E               	movwf	i2printf@f+1,c
 22960  005D0C  ECC0  F016         	call	i2_printf	;wreg free
 22961                           
 22962                           ;UI.c: 514: lcdInst(0b11000000);;
 22963  005D10  0EC0               	movlw	192
 22964  005D12  EC7B  F030         	call	i2_lcdInst
 22965                           
 22966                           ;UI.c: 515: printf("3. LOGS        <");
 22967  005D16  0EC2               	movlw	low STR_38
 22968  005D18  6E0D               	movwf	i2printf@f,c
 22969  005D1A  0EFD               	movlw	high STR_38
 22970  005D1C  6E0E               	movwf	i2printf@f+1,c
 22971  005D1E  ECC0  F016         	call	i2_printf	;wreg free
 22972  005D22  0012               	return		;funcret
 22973  005D24                     __end_of_change_state_to_menu_23:
 22974                           	opt stack 0
 22975                           pclatu	equ	0xFFB
 22976                           pclath	equ	0xFFA
 22977                           tblptru	equ	0xFF8
 22978                           tblptrh	equ	0xFF7
 22979                           tblptrl	equ	0xFF6
 22980                           tablat	equ	0xFF5
 22981                           prodh	equ	0xFF4
 22982                           prodl	equ	0xFF3
 22983                           intcon	equ	0xFF2
 22984                           intcon2	equ	0xFF1
 22985                           intcon3	equ	0xFF0
 22986                           indf0	equ	0xFEF
 22987                           postinc0	equ	0xFEE
 22988                           fsr0h	equ	0xFEA
 22989                           fsr0l	equ	0xFE9
 22990                           wreg	equ	0xFE8
 22991                           postdec1	equ	0xFE5
 22992                           fsr1h	equ	0xFE2
 22993                           fsr1l	equ	0xFE1
 22994                           indf2	equ	0xFDF
 22995                           postinc2	equ	0xFDE
 22996                           postdec2	equ	0xFDD
 22997                           fsr2h	equ	0xFDA
 22998                           fsr2l	equ	0xFD9
 22999                           status	equ	0xFD8
 23000                           
 23001 ;; *************** function _change_state_to_menu_11 *****************
 23002 ;; Defined at:
 23003 ;;		line 485 in file "UI.c"
 23004 ;; Parameters:    Size  Location     Type
 23005 ;;		None
 23006 ;; Auto vars:     Size  Location     Type
 23007 ;;		None
 23008 ;; Return value:  Size  Location     Type
 23009 ;;                  1    wreg      void 
 23010 ;; Registers used:
 23011 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23012 ;; Tracked objects:
 23013 ;;		On entry : 0/0
 23014 ;;		On exit  : 0/0
 23015 ;;		Unchanged: 0/0
 23016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23020 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23021 ;;Total ram usage:        0 bytes
 23022 ;; Hardware stack levels used:    1
 23023 ;; Hardware stack levels required when called:    3
 23024 ;; This function calls:
 23025 ;;		i2_lcdInst
 23026 ;;		i2_printf
 23027 ;; This function is called by:
 23028 ;;		_updateMenu
 23029 ;;		_inputHandler
 23030 ;; This function uses a non-reentrant model
 23031 ;;
 23032                           
 23033                           	psect	text75
 23034  005D24                     __ptext75:
 23035                           	opt stack 0
 23036  005D24                     _change_state_to_menu_11:
 23037                           	opt stack 18
 23038                           
 23039                           ;UI.c: 486: cur_state = 11;
 23040                           
 23041                           ;incstack = 0
 23042  005D24  0E00               	movlw	0
 23043  005D26  0100               	movlb	0	; () banked
 23044  005D28  6FE9               	movwf	(_cur_state+1)& (0+255),b
 23045  005D2A  0E0B               	movlw	11
 23046  005D2C  6FE8               	movwf	_cur_state& (0+255),b
 23047                           
 23048                           ; BSR set to: 0
 23049                           ;UI.c: 488: lcdInst(0b10000000);;
 23050  005D2E  0E80               	movlw	128
 23051  005D30  EC7B  F030         	call	i2_lcdInst
 23052                           
 23053                           ;UI.c: 489: printf("1. DATE/TIME   <");
 23054  005D34  0EE4               	movlw	low STR_31
 23055  005D36  6E0D               	movwf	i2printf@f,c
 23056  005D38  0EFD               	movlw	high STR_31
 23057  005D3A  6E0E               	movwf	i2printf@f+1,c
 23058  005D3C  ECC0  F016         	call	i2_printf	;wreg free
 23059                           
 23060                           ;UI.c: 490: lcdInst(0b11000000);;
 23061  005D40  0EC0               	movlw	192
 23062  005D42  EC7B  F030         	call	i2_lcdInst
 23063                           
 23064                           ;UI.c: 491: printf("2. SORT         ");
 23065  005D46  0E29               	movlw	low STR_32
 23066  005D48  6E0D               	movwf	i2printf@f,c
 23067  005D4A  0EFD               	movlw	high STR_32
 23068  005D4C  6E0E               	movwf	i2printf@f+1,c
 23069  005D4E  ECC0  F016         	call	i2_printf	;wreg free
 23070  005D52  0012               	return		;funcret
 23071  005D54                     __end_of_change_state_to_menu_11:
 23072                           	opt stack 0
 23073                           pclatu	equ	0xFFB
 23074                           pclath	equ	0xFFA
 23075                           tblptru	equ	0xFF8
 23076                           tblptrh	equ	0xFF7
 23077                           tblptrl	equ	0xFF6
 23078                           tablat	equ	0xFF5
 23079                           prodh	equ	0xFF4
 23080                           prodl	equ	0xFF3
 23081                           intcon	equ	0xFF2
 23082                           intcon2	equ	0xFF1
 23083                           intcon3	equ	0xFF0
 23084                           indf0	equ	0xFEF
 23085                           postinc0	equ	0xFEE
 23086                           fsr0h	equ	0xFEA
 23087                           fsr0l	equ	0xFE9
 23088                           wreg	equ	0xFE8
 23089                           postdec1	equ	0xFE5
 23090                           fsr1h	equ	0xFE2
 23091                           fsr1l	equ	0xFE1
 23092                           indf2	equ	0xFDF
 23093                           postinc2	equ	0xFDE
 23094                           postdec2	equ	0xFDD
 23095                           fsr2h	equ	0xFDA
 23096                           fsr2l	equ	0xFD9
 23097                           status	equ	0xFD8
 23098                           
 23099 ;; *************** function _change_state_to_logs_34 *****************
 23100 ;; Defined at:
 23101 ;;		line 552 in file "UI.c"
 23102 ;; Parameters:    Size  Location     Type
 23103 ;;		None
 23104 ;; Auto vars:     Size  Location     Type
 23105 ;;		None
 23106 ;; Return value:  Size  Location     Type
 23107 ;;                  1    wreg      void 
 23108 ;; Registers used:
 23109 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23110 ;; Tracked objects:
 23111 ;;		On entry : 0/0
 23112 ;;		On exit  : 0/0
 23113 ;;		Unchanged: 0/0
 23114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23118 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23119 ;;Total ram usage:        0 bytes
 23120 ;; Hardware stack levels used:    1
 23121 ;; Hardware stack levels required when called:    3
 23122 ;; This function calls:
 23123 ;;		i2_lcdInst
 23124 ;;		i2_printf
 23125 ;; This function is called by:
 23126 ;;		_updateMenu
 23127 ;;		_inputHandler
 23128 ;; This function uses a non-reentrant model
 23129 ;;
 23130                           
 23131                           	psect	text76
 23132  005D54                     __ptext76:
 23133                           	opt stack 0
 23134  005D54                     _change_state_to_logs_34:
 23135                           	opt stack 18
 23136                           
 23137                           ;UI.c: 553: cur_state = 1034;
 23138                           
 23139                           ;incstack = 0
 23140  005D54  0E04               	movlw	4
 23141  005D56  0100               	movlb	0	; () banked
 23142  005D58  6FE9               	movwf	(_cur_state+1)& (0+255),b
 23143  005D5A  0E0A               	movlw	10
 23144  005D5C  6FE8               	movwf	_cur_state& (0+255),b
 23145                           
 23146                           ; BSR set to: 0
 23147                           ;UI.c: 554: lcdInst(0b10000000);;
 23148  005D5E  0E80               	movlw	128
 23149  005D60  EC7B  F030         	call	i2_lcdInst
 23150                           
 23151                           ;UI.c: 555: printf("LOG 3           ");
 23152  005D64  0EF6               	movlw	low STR_44
 23153  005D66  6E0D               	movwf	i2printf@f,c
 23154  005D68  0EFC               	movlw	high STR_44
 23155  005D6A  6E0E               	movwf	i2printf@f+1,c
 23156  005D6C  ECC0  F016         	call	i2_printf	;wreg free
 23157                           
 23158                           ;UI.c: 556: lcdInst(0b11000000);;
 23159  005D70  0EC0               	movlw	192
 23160  005D72  EC7B  F030         	call	i2_lcdInst
 23161                           
 23162                           ;UI.c: 557: printf("LOG 4          <");
 23163  005D76  0EB1               	movlw	low STR_50
 23164  005D78  6E0D               	movwf	i2printf@f,c
 23165  005D7A  0EFD               	movlw	high STR_50
 23166  005D7C  6E0E               	movwf	i2printf@f+1,c
 23167  005D7E  ECC0  F016         	call	i2_printf	;wreg free
 23168  005D82  0012               	return		;funcret
 23169  005D84                     __end_of_change_state_to_logs_34:
 23170                           	opt stack 0
 23171                           pclatu	equ	0xFFB
 23172                           pclath	equ	0xFFA
 23173                           tblptru	equ	0xFF8
 23174                           tblptrh	equ	0xFF7
 23175                           tblptrl	equ	0xFF6
 23176                           tablat	equ	0xFF5
 23177                           prodh	equ	0xFF4
 23178                           prodl	equ	0xFF3
 23179                           intcon	equ	0xFF2
 23180                           intcon2	equ	0xFF1
 23181                           intcon3	equ	0xFF0
 23182                           indf0	equ	0xFEF
 23183                           postinc0	equ	0xFEE
 23184                           fsr0h	equ	0xFEA
 23185                           fsr0l	equ	0xFE9
 23186                           wreg	equ	0xFE8
 23187                           postdec1	equ	0xFE5
 23188                           fsr1h	equ	0xFE2
 23189                           fsr1l	equ	0xFE1
 23190                           indf2	equ	0xFDF
 23191                           postinc2	equ	0xFDE
 23192                           postdec2	equ	0xFDD
 23193                           fsr2h	equ	0xFDA
 23194                           fsr2l	equ	0xFD9
 23195                           status	equ	0xFD8
 23196                           
 23197 ;; *************** function _change_state_to_logs_33 *****************
 23198 ;; Defined at:
 23199 ;;		line 545 in file "UI.c"
 23200 ;; Parameters:    Size  Location     Type
 23201 ;;		None
 23202 ;; Auto vars:     Size  Location     Type
 23203 ;;		None
 23204 ;; Return value:  Size  Location     Type
 23205 ;;                  1    wreg      void 
 23206 ;; Registers used:
 23207 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23208 ;; Tracked objects:
 23209 ;;		On entry : 0/0
 23210 ;;		On exit  : 0/0
 23211 ;;		Unchanged: 0/0
 23212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23217 ;;Total ram usage:        0 bytes
 23218 ;; Hardware stack levels used:    1
 23219 ;; Hardware stack levels required when called:    3
 23220 ;; This function calls:
 23221 ;;		i2_lcdInst
 23222 ;;		i2_printf
 23223 ;; This function is called by:
 23224 ;;		_updateMenu
 23225 ;;		_inputHandler
 23226 ;; This function uses a non-reentrant model
 23227 ;;
 23228                           
 23229                           	psect	text77
 23230  005D84                     __ptext77:
 23231                           	opt stack 0
 23232  005D84                     _change_state_to_logs_33:
 23233                           	opt stack 18
 23234                           
 23235                           ;UI.c: 546: cur_state = 1033;
 23236                           
 23237                           ;incstack = 0
 23238  005D84  0E04               	movlw	4
 23239  005D86  0100               	movlb	0	; () banked
 23240  005D88  6FE9               	movwf	(_cur_state+1)& (0+255),b
 23241  005D8A  0E09               	movlw	9
 23242  005D8C  6FE8               	movwf	_cur_state& (0+255),b
 23243                           
 23244                           ; BSR set to: 0
 23245                           ;UI.c: 547: lcdInst(0b10000000);;
 23246  005D8E  0E80               	movlw	128
 23247  005D90  EC7B  F030         	call	i2_lcdInst
 23248                           
 23249                           ;UI.c: 548: printf("LOG 3          <");
 23250  005D94  0EA0               	movlw	low STR_46
 23251  005D96  6E0D               	movwf	i2printf@f,c
 23252  005D98  0EFD               	movlw	high STR_46
 23253  005D9A  6E0E               	movwf	i2printf@f+1,c
 23254  005D9C  ECC0  F016         	call	i2_printf	;wreg free
 23255                           
 23256                           ;UI.c: 549: lcdInst(0b11000000);;
 23257  005DA0  0EC0               	movlw	192
 23258  005DA2  EC7B  F030         	call	i2_lcdInst
 23259                           
 23260                           ;UI.c: 550: printf("LOG 4           ");
 23261  005DA6  0E07               	movlw	low STR_48
 23262  005DA8  6E0D               	movwf	i2printf@f,c
 23263  005DAA  0EFD               	movlw	high STR_48
 23264  005DAC  6E0E               	movwf	i2printf@f+1,c
 23265  005DAE  ECC0  F016         	call	i2_printf	;wreg free
 23266  005DB2  0012               	return		;funcret
 23267  005DB4                     __end_of_change_state_to_logs_33:
 23268                           	opt stack 0
 23269                           pclatu	equ	0xFFB
 23270                           pclath	equ	0xFFA
 23271                           tblptru	equ	0xFF8
 23272                           tblptrh	equ	0xFF7
 23273                           tblptrl	equ	0xFF6
 23274                           tablat	equ	0xFF5
 23275                           prodh	equ	0xFF4
 23276                           prodl	equ	0xFF3
 23277                           intcon	equ	0xFF2
 23278                           intcon2	equ	0xFF1
 23279                           intcon3	equ	0xFF0
 23280                           indf0	equ	0xFEF
 23281                           postinc0	equ	0xFEE
 23282                           fsr0h	equ	0xFEA
 23283                           fsr0l	equ	0xFE9
 23284                           wreg	equ	0xFE8
 23285                           postdec1	equ	0xFE5
 23286                           fsr1h	equ	0xFE2
 23287                           fsr1l	equ	0xFE1
 23288                           indf2	equ	0xFDF
 23289                           postinc2	equ	0xFDE
 23290                           postdec2	equ	0xFDD
 23291                           fsr2h	equ	0xFDA
 23292                           fsr2l	equ	0xFD9
 23293                           status	equ	0xFD8
 23294                           
 23295 ;; *************** function _change_state_to_logs_23 *****************
 23296 ;; Defined at:
 23297 ;;		line 538 in file "UI.c"
 23298 ;; Parameters:    Size  Location     Type
 23299 ;;		None
 23300 ;; Auto vars:     Size  Location     Type
 23301 ;;		None
 23302 ;; Return value:  Size  Location     Type
 23303 ;;                  1    wreg      void 
 23304 ;; Registers used:
 23305 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23306 ;; Tracked objects:
 23307 ;;		On entry : 0/0
 23308 ;;		On exit  : 0/0
 23309 ;;		Unchanged: 0/0
 23310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23315 ;;Total ram usage:        0 bytes
 23316 ;; Hardware stack levels used:    1
 23317 ;; Hardware stack levels required when called:    3
 23318 ;; This function calls:
 23319 ;;		i2_lcdInst
 23320 ;;		i2_printf
 23321 ;; This function is called by:
 23322 ;;		_updateMenu
 23323 ;;		_inputHandler
 23324 ;; This function uses a non-reentrant model
 23325 ;;
 23326                           
 23327                           	psect	text78
 23328  005E72                     __ptext78:
 23329                           	opt stack 0
 23330  005E72                     _change_state_to_logs_23:
 23331                           	opt stack 18
 23332                           
 23333                           ;UI.c: 539: cur_state = 1023;
 23334                           
 23335                           ;incstack = 0
 23336  005E72  0E03               	movlw	3
 23337  005E74  0100               	movlb	0	; () banked
 23338  005E76  6FE9               	movwf	(_cur_state+1)& (0+255),b
 23339  005E78  69E8               	setf	_cur_state& (0+255),b
 23340                           
 23341                           ; BSR set to: 0
 23342                           ;UI.c: 540: lcdInst(0b10000000);;
 23343  005E7A  0E80               	movlw	128
 23344  005E7C  EC7B  F030         	call	i2_lcdInst
 23345                           
 23346                           ;UI.c: 541: printf("LOG 2           ");
 23347  005E80  0EE5               	movlw	low STR_40
 23348  005E82  6E0D               	movwf	i2printf@f,c
 23349  005E84  0EFC               	movlw	high STR_40
 23350  005E86  6E0E               	movwf	i2printf@f+1,c
 23351  005E88  ECC0  F016         	call	i2_printf	;wreg free
 23352                           
 23353                           ;UI.c: 542: lcdInst(0b11000000);;
 23354  005E8C  0EC0               	movlw	192
 23355  005E8E  EC7B  F030         	call	i2_lcdInst
 23356                           
 23357                           ;UI.c: 543: printf("LOG 3          <");
 23358  005E92  0EA0               	movlw	low STR_46
 23359  005E94  6E0D               	movwf	i2printf@f,c
 23360  005E96  0EFD               	movlw	high STR_46
 23361  005E98  6E0E               	movwf	i2printf@f+1,c
 23362  005E9A  ECC0  F016         	call	i2_printf	;wreg free
 23363  005E9E  0012               	return		;funcret
 23364  005EA0                     __end_of_change_state_to_logs_23:
 23365                           	opt stack 0
 23366                           pclatu	equ	0xFFB
 23367                           pclath	equ	0xFFA
 23368                           tblptru	equ	0xFF8
 23369                           tblptrh	equ	0xFF7
 23370                           tblptrl	equ	0xFF6
 23371                           tablat	equ	0xFF5
 23372                           prodh	equ	0xFF4
 23373                           prodl	equ	0xFF3
 23374                           intcon	equ	0xFF2
 23375                           intcon2	equ	0xFF1
 23376                           intcon3	equ	0xFF0
 23377                           indf0	equ	0xFEF
 23378                           postinc0	equ	0xFEE
 23379                           fsr0h	equ	0xFEA
 23380                           fsr0l	equ	0xFE9
 23381                           wreg	equ	0xFE8
 23382                           postdec1	equ	0xFE5
 23383                           fsr1h	equ	0xFE2
 23384                           fsr1l	equ	0xFE1
 23385                           indf2	equ	0xFDF
 23386                           postinc2	equ	0xFDE
 23387                           postdec2	equ	0xFDD
 23388                           fsr2h	equ	0xFDA
 23389                           fsr2l	equ	0xFD9
 23390                           status	equ	0xFD8
 23391                           
 23392 ;; *************** function _change_state_to_logs_22 *****************
 23393 ;; Defined at:
 23394 ;;		line 531 in file "UI.c"
 23395 ;; Parameters:    Size  Location     Type
 23396 ;;		None
 23397 ;; Auto vars:     Size  Location     Type
 23398 ;;		None
 23399 ;; Return value:  Size  Location     Type
 23400 ;;                  1    wreg      void 
 23401 ;; Registers used:
 23402 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23403 ;; Tracked objects:
 23404 ;;		On entry : 0/0
 23405 ;;		On exit  : 0/0
 23406 ;;		Unchanged: 0/0
 23407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23411 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23412 ;;Total ram usage:        0 bytes
 23413 ;; Hardware stack levels used:    1
 23414 ;; Hardware stack levels required when called:    3
 23415 ;; This function calls:
 23416 ;;		i2_lcdInst
 23417 ;;		i2_printf
 23418 ;; This function is called by:
 23419 ;;		_updateMenu
 23420 ;;		_inputHandler
 23421 ;; This function uses a non-reentrant model
 23422 ;;
 23423                           
 23424                           	psect	text79
 23425  005DB4                     __ptext79:
 23426                           	opt stack 0
 23427  005DB4                     _change_state_to_logs_22:
 23428                           	opt stack 18
 23429                           
 23430                           ;UI.c: 532: cur_state = 1022;
 23431                           
 23432                           ;incstack = 0
 23433  005DB4  0E03               	movlw	3
 23434  005DB6  0100               	movlb	0	; () banked
 23435  005DB8  6FE9               	movwf	(_cur_state+1)& (0+255),b
 23436  005DBA  0EFE               	movlw	254
 23437  005DBC  6FE8               	movwf	_cur_state& (0+255),b
 23438                           
 23439                           ; BSR set to: 0
 23440                           ;UI.c: 533: lcdInst(0b10000000);;
 23441  005DBE  0E80               	movlw	128
 23442  005DC0  EC7B  F030         	call	i2_lcdInst
 23443                           
 23444                           ;UI.c: 534: printf("LOG 2          <");
 23445  005DC4  0E8F               	movlw	low STR_42
 23446  005DC6  6E0D               	movwf	i2printf@f,c
 23447  005DC8  0EFD               	movlw	high STR_42
 23448  005DCA  6E0E               	movwf	i2printf@f+1,c
 23449  005DCC  ECC0  F016         	call	i2_printf	;wreg free
 23450                           
 23451                           ;UI.c: 535: lcdInst(0b11000000);;
 23452  005DD0  0EC0               	movlw	192
 23453  005DD2  EC7B  F030         	call	i2_lcdInst
 23454                           
 23455                           ;UI.c: 536: printf("LOG 3           ");
 23456  005DD6  0EF6               	movlw	low STR_44
 23457  005DD8  6E0D               	movwf	i2printf@f,c
 23458  005DDA  0EFC               	movlw	high STR_44
 23459  005DDC  6E0E               	movwf	i2printf@f+1,c
 23460  005DDE  ECC0  F016         	call	i2_printf	;wreg free
 23461  005DE2  0012               	return		;funcret
 23462  005DE4                     __end_of_change_state_to_logs_22:
 23463                           	opt stack 0
 23464                           pclatu	equ	0xFFB
 23465                           pclath	equ	0xFFA
 23466                           tblptru	equ	0xFF8
 23467                           tblptrh	equ	0xFF7
 23468                           tblptrl	equ	0xFF6
 23469                           tablat	equ	0xFF5
 23470                           prodh	equ	0xFF4
 23471                           prodl	equ	0xFF3
 23472                           intcon	equ	0xFF2
 23473                           intcon2	equ	0xFF1
 23474                           intcon3	equ	0xFF0
 23475                           indf0	equ	0xFEF
 23476                           postinc0	equ	0xFEE
 23477                           fsr0h	equ	0xFEA
 23478                           fsr0l	equ	0xFE9
 23479                           wreg	equ	0xFE8
 23480                           postdec1	equ	0xFE5
 23481                           fsr1h	equ	0xFE2
 23482                           fsr1l	equ	0xFE1
 23483                           indf2	equ	0xFDF
 23484                           postinc2	equ	0xFDE
 23485                           postdec2	equ	0xFDD
 23486                           fsr2h	equ	0xFDA
 23487                           fsr2l	equ	0xFD9
 23488                           status	equ	0xFD8
 23489                           
 23490 ;; *************** function _change_state_to_logs_12 *****************
 23491 ;; Defined at:
 23492 ;;		line 524 in file "UI.c"
 23493 ;; Parameters:    Size  Location     Type
 23494 ;;		None
 23495 ;; Auto vars:     Size  Location     Type
 23496 ;;		None
 23497 ;; Return value:  Size  Location     Type
 23498 ;;                  1    wreg      void 
 23499 ;; Registers used:
 23500 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23501 ;; Tracked objects:
 23502 ;;		On entry : 0/0
 23503 ;;		On exit  : 0/0
 23504 ;;		Unchanged: 0/0
 23505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23509 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23510 ;;Total ram usage:        0 bytes
 23511 ;; Hardware stack levels used:    1
 23512 ;; Hardware stack levels required when called:    3
 23513 ;; This function calls:
 23514 ;;		i2_lcdInst
 23515 ;;		i2_printf
 23516 ;; This function is called by:
 23517 ;;		_updateMenu
 23518 ;;		_inputHandler
 23519 ;; This function uses a non-reentrant model
 23520 ;;
 23521                           
 23522                           	psect	text80
 23523  005DE4                     __ptext80:
 23524                           	opt stack 0
 23525  005DE4                     _change_state_to_logs_12:
 23526                           	opt stack 18
 23527                           
 23528                           ;UI.c: 525: cur_state = 1012;
 23529                           
 23530                           ;incstack = 0
 23531  005DE4  0E03               	movlw	3
 23532  005DE6  0100               	movlb	0	; () banked
 23533  005DE8  6FE9               	movwf	(_cur_state+1)& (0+255),b
 23534  005DEA  0EF4               	movlw	244
 23535  005DEC  6FE8               	movwf	_cur_state& (0+255),b
 23536                           
 23537                           ; BSR set to: 0
 23538                           ;UI.c: 526: lcdInst(0b10000000);;
 23539  005DEE  0E80               	movlw	128
 23540  005DF0  EC7B  F030         	call	i2_lcdInst
 23541                           
 23542                           ;UI.c: 527: printf("LOG 1           ");
 23543  005DF4  0ED4               	movlw	low STR_41
 23544  005DF6  6E0D               	movwf	i2printf@f,c
 23545  005DF8  0EFC               	movlw	high STR_41
 23546  005DFA  6E0E               	movwf	i2printf@f+1,c
 23547  005DFC  ECC0  F016         	call	i2_printf	;wreg free
 23548                           
 23549                           ;UI.c: 528: lcdInst(0b11000000);;
 23550  005E00  0EC0               	movlw	192
 23551  005E02  EC7B  F030         	call	i2_lcdInst
 23552                           
 23553                           ;UI.c: 529: printf("LOG 2          <");
 23554  005E06  0E8F               	movlw	low STR_42
 23555  005E08  6E0D               	movwf	i2printf@f,c
 23556  005E0A  0EFD               	movlw	high STR_42
 23557  005E0C  6E0E               	movwf	i2printf@f+1,c
 23558  005E0E  ECC0  F016         	call	i2_printf	;wreg free
 23559  005E12  0012               	return		;funcret
 23560  005E14                     __end_of_change_state_to_logs_12:
 23561                           	opt stack 0
 23562                           pclatu	equ	0xFFB
 23563                           pclath	equ	0xFFA
 23564                           tblptru	equ	0xFF8
 23565                           tblptrh	equ	0xFF7
 23566                           tblptrl	equ	0xFF6
 23567                           tablat	equ	0xFF5
 23568                           prodh	equ	0xFF4
 23569                           prodl	equ	0xFF3
 23570                           intcon	equ	0xFF2
 23571                           intcon2	equ	0xFF1
 23572                           intcon3	equ	0xFF0
 23573                           indf0	equ	0xFEF
 23574                           postinc0	equ	0xFEE
 23575                           fsr0h	equ	0xFEA
 23576                           fsr0l	equ	0xFE9
 23577                           wreg	equ	0xFE8
 23578                           postdec1	equ	0xFE5
 23579                           fsr1h	equ	0xFE2
 23580                           fsr1l	equ	0xFE1
 23581                           indf2	equ	0xFDF
 23582                           postinc2	equ	0xFDE
 23583                           postdec2	equ	0xFDD
 23584                           fsr2h	equ	0xFDA
 23585                           fsr2l	equ	0xFD9
 23586                           status	equ	0xFD8
 23587                           
 23588 ;; *************** function _change_state_to_logs_11 *****************
 23589 ;; Defined at:
 23590 ;;		line 517 in file "UI.c"
 23591 ;; Parameters:    Size  Location     Type
 23592 ;;		None
 23593 ;; Auto vars:     Size  Location     Type
 23594 ;;		None
 23595 ;; Return value:  Size  Location     Type
 23596 ;;                  1    wreg      void 
 23597 ;; Registers used:
 23598 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23599 ;; Tracked objects:
 23600 ;;		On entry : 0/0
 23601 ;;		On exit  : 0/0
 23602 ;;		Unchanged: 0/0
 23603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23608 ;;Total ram usage:        0 bytes
 23609 ;; Hardware stack levels used:    1
 23610 ;; Hardware stack levels required when called:    3
 23611 ;; This function calls:
 23612 ;;		i2_lcdInst
 23613 ;;		i2_printf
 23614 ;; This function is called by:
 23615 ;;		_updateMenu
 23616 ;;		_inputHandler
 23617 ;; This function uses a non-reentrant model
 23618 ;;
 23619                           
 23620                           	psect	text81
 23621  005E14                     __ptext81:
 23622                           	opt stack 0
 23623  005E14                     _change_state_to_logs_11:
 23624                           	opt stack 18
 23625                           
 23626                           ;UI.c: 518: cur_state = 1011;
 23627                           
 23628                           ;incstack = 0
 23629  005E14  0E03               	movlw	3
 23630  005E16  0100               	movlb	0	; () banked
 23631  005E18  6FE9               	movwf	(_cur_state+1)& (0+255),b
 23632  005E1A  0EF3               	movlw	243
 23633  005E1C  6FE8               	movwf	_cur_state& (0+255),b
 23634                           
 23635                           ; BSR set to: 0
 23636                           ;UI.c: 519: lcdInst(0b10000000);;
 23637  005E1E  0E80               	movlw	128
 23638  005E20  EC7B  F030         	call	i2_lcdInst
 23639                           
 23640                           ;UI.c: 520: printf("LOG 1          <");
 23641  005E24  0E7E               	movlw	low STR_39
 23642  005E26  6E0D               	movwf	i2printf@f,c
 23643  005E28  0EFD               	movlw	high STR_39
 23644  005E2A  6E0E               	movwf	i2printf@f+1,c
 23645  005E2C  ECC0  F016         	call	i2_printf	;wreg free
 23646                           
 23647                           ;UI.c: 521: lcdInst(0b11000000);;
 23648  005E30  0EC0               	movlw	192
 23649  005E32  EC7B  F030         	call	i2_lcdInst
 23650                           
 23651                           ;UI.c: 522: printf("LOG 2           ");
 23652  005E36  0EE5               	movlw	low STR_40
 23653  005E38  6E0D               	movwf	i2printf@f,c
 23654  005E3A  0EFC               	movlw	high STR_40
 23655  005E3C  6E0E               	movwf	i2printf@f+1,c
 23656  005E3E  ECC0  F016         	call	i2_printf	;wreg free
 23657  005E42  0012               	return		;funcret
 23658  005E44                     __end_of_change_state_to_logs_11:
 23659                           	opt stack 0
 23660                           pclatu	equ	0xFFB
 23661                           pclath	equ	0xFFA
 23662                           tblptru	equ	0xFF8
 23663                           tblptrh	equ	0xFF7
 23664                           tblptrl	equ	0xFF6
 23665                           tablat	equ	0xFF5
 23666                           prodh	equ	0xFF4
 23667                           prodl	equ	0xFF3
 23668                           intcon	equ	0xFF2
 23669                           intcon2	equ	0xFF1
 23670                           intcon3	equ	0xFF0
 23671                           indf0	equ	0xFEF
 23672                           postinc0	equ	0xFEE
 23673                           fsr0h	equ	0xFEA
 23674                           fsr0l	equ	0xFE9
 23675                           wreg	equ	0xFE8
 23676                           postdec1	equ	0xFE5
 23677                           fsr1h	equ	0xFE2
 23678                           fsr1l	equ	0xFE1
 23679                           indf2	equ	0xFDF
 23680                           postinc2	equ	0xFDE
 23681                           postdec2	equ	0xFDD
 23682                           fsr2h	equ	0xFDA
 23683                           fsr2l	equ	0xFD9
 23684                           status	equ	0xFD8
 23685                           
 23686 ;; *************** function _dispLogs *****************
 23687 ;; Defined at:
 23688 ;;		line 470 in file "UI.c"
 23689 ;; Parameters:    Size  Location     Type
 23690 ;;  myLog           2   17[COMRAM] int 
 23691 ;; Auto vars:     Size  Location     Type
 23692 ;;		None
 23693 ;; Return value:  Size  Location     Type
 23694 ;;                  1    wreg      void 
 23695 ;; Registers used:
 23696 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23697 ;; Tracked objects:
 23698 ;;		On entry : 0/0
 23699 ;;		On exit  : 0/0
 23700 ;;		Unchanged: 0/0
 23701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23702 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23705 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23706 ;;Total ram usage:        2 bytes
 23707 ;; Hardware stack levels used:    1
 23708 ;; Hardware stack levels required when called:    2
 23709 ;; This function calls:
 23710 ;;		_retrieveLog
 23711 ;; This function is called by:
 23712 ;;		_updateMenu
 23713 ;; This function uses a non-reentrant model
 23714 ;;
 23715                           
 23716                           	psect	text82
 23717  005FBE                     __ptext82:
 23718                           	opt stack 0
 23719  005FBE                     _dispLogs:
 23720                           	opt stack 20
 23721                           
 23722                           ;UI.c: 471: logstate = 1;
 23723                           
 23724                           ;incstack = 0
 23725  005FBE  0E00               	movlw	0
 23726  005FC0  0100               	movlb	0	; () banked
 23727  005FC2  6FF9               	movwf	(_logstate+1)& (0+255),b
 23728  005FC4  0E01               	movlw	1
 23729  005FC6  6FF8               	movwf	_logstate& (0+255),b
 23730                           
 23731                           ; BSR set to: 0
 23732                           ;UI.c: 472: log = myLog;
 23733  005FC8  C012  F0F0         	movff	dispLogs@myLog,_log
 23734  005FCC  C013  F0F1         	movff	dispLogs@myLog+1,_log+1
 23735                           
 23736                           ; BSR set to: 0
 23737                           ;UI.c: 473: retrieveLog(myLog - 1);
 23738  005FD0  0EFF               	movlw	255
 23739  005FD2  2412               	addwf	dispLogs@myLog,w,c
 23740  005FD4  6E07               	movwf	retrieveLog@logNum,c
 23741  005FD6  0EFF               	movlw	255
 23742  005FD8  2013               	addwfc	dispLogs@myLog+1,w,c
 23743  005FDA  6E08               	movwf	retrieveLog@logNum+1,c
 23744  005FDC  EC2D  F022         	call	_retrieveLog	;wreg free
 23745  005FE0  0012               	return		;funcret
 23746  005FE2                     __end_of_dispLogs:
 23747                           	opt stack 0
 23748                           pclatu	equ	0xFFB
 23749                           pclath	equ	0xFFA
 23750                           tblptru	equ	0xFF8
 23751                           tblptrh	equ	0xFF7
 23752                           tblptrl	equ	0xFF6
 23753                           tablat	equ	0xFF5
 23754                           prodh	equ	0xFF4
 23755                           prodl	equ	0xFF3
 23756                           intcon	equ	0xFF2
 23757                           intcon2	equ	0xFF1
 23758                           intcon3	equ	0xFF0
 23759                           indf0	equ	0xFEF
 23760                           postinc0	equ	0xFEE
 23761                           fsr0h	equ	0xFEA
 23762                           fsr0l	equ	0xFE9
 23763                           wreg	equ	0xFE8
 23764                           postdec1	equ	0xFE5
 23765                           fsr1h	equ	0xFE2
 23766                           fsr1l	equ	0xFE1
 23767                           indf2	equ	0xFDF
 23768                           postinc2	equ	0xFDE
 23769                           postdec2	equ	0xFDD
 23770                           fsr2h	equ	0xFDA
 23771                           fsr2l	equ	0xFD9
 23772                           status	equ	0xFD8
 23773                           
 23774 ;; *************** function _retrieveLog *****************
 23775 ;; Defined at:
 23776 ;;		line 138 in file "EEPROM.c"
 23777 ;; Parameters:    Size  Location     Type
 23778 ;;  logNum          2    6[COMRAM] int 
 23779 ;; Auto vars:     Size  Location     Type
 23780 ;;  i               2   13[COMRAM] int 
 23781 ;;  addr            2   15[COMRAM] unsigned short 
 23782 ;;  byte3           1   12[COMRAM] unsigned char 
 23783 ;;  byte2           1   11[COMRAM] unsigned char 
 23784 ;;  byte1           1   10[COMRAM] unsigned char 
 23785 ;; Return value:  Size  Location     Type
 23786 ;;                  1    wreg      void 
 23787 ;; Registers used:
 23788 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23789 ;; Tracked objects:
 23790 ;;		On entry : 0/0
 23791 ;;		On exit  : 0/0
 23792 ;;		Unchanged: 0/0
 23793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23794 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23795 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23796 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23797 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23798 ;;Total ram usage:       11 bytes
 23799 ;; Hardware stack levels used:    1
 23800 ;; Hardware stack levels required when called:    1
 23801 ;; This function calls:
 23802 ;;		i2_EEPROM_read
 23803 ;;		i2___wmul
 23804 ;; This function is called by:
 23805 ;;		_dispLogs
 23806 ;; This function uses a non-reentrant model
 23807 ;;
 23808                           
 23809                           	psect	text83
 23810  00445A                     __ptext83:
 23811                           	opt stack 0
 23812  00445A                     _retrieveLog:
 23813                           	opt stack 20
 23814                           
 23815                           ;EEPROM.c: 144: unsigned short addr = 1 + logNum * 11;
 23816                           
 23817                           ;incstack = 0
 23818  00445A  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 23819  00445E  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 23820  004462  0E00               	movlw	0
 23821  004464  6E04               	movwf	i2___wmul@multiplicand+1,c
 23822  004466  0E0B               	movlw	11
 23823  004468  6E03               	movwf	i2___wmul@multiplicand,c
 23824  00446A  ECB9  F02F         	call	i2___wmul	;wreg free
 23825  00446E  0E01               	movlw	1
 23826  004470  2401               	addwf	?i2___wmul,w,c
 23827  004472  6E10               	movwf	retrieveLog@addr,c
 23828  004474  0E00               	movlw	0
 23829  004476  2002               	addwfc	?i2___wmul+1,w,c
 23830  004478  6E11               	movwf	retrieveLog@addr+1,c
 23831                           
 23832                           ;EEPROM.c: 147: unsigned char byte1 = EEPROM_read(addr);
 23833  00447A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23834  00447E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23835  004482  EC47  F030         	call	i2_EEPROM_read	;wreg free
 23836  004486  6E0B               	movwf	retrieveLog@byte1,c
 23837                           
 23838                           ;EEPROM.c: 148: log_completion = (int)(byte1 & 0b10000000);
 23839  004488  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 23840  00448C  0E80               	movlw	128
 23841  00448E  1609               	andwf	??_retrieveLog,f,c
 23842  004490  5009               	movf	??_retrieveLog,w,c
 23843  004492  0100               	movlb	0	; () banked
 23844  004494  6FF2               	movwf	_log_completion& (0+255),b
 23845  004496  6BF3               	clrf	(_log_completion+1)& (0+255),b
 23846                           
 23847                           ; BSR set to: 0
 23848                           ;EEPROM.c: 149: log_count_total = (int)(byte1 & 0b00001111);
 23849  004498  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 23850  00449C  0E0F               	movlw	15
 23851  00449E  1609               	andwf	??_retrieveLog,f,c
 23852  0044A0  5009               	movf	??_retrieveLog,w,c
 23853  0044A2  0101               	movlb	1	; () banked
 23854  0044A4  6F45               	movwf	_log_count_total& (0+255),b
 23855  0044A6  6B46               	clrf	(_log_count_total+1)& (0+255),b
 23856                           
 23857                           ; BSR set to: 1
 23858                           ;EEPROM.c: 150: addr++;
 23859  0044A8  4A10               	infsnz	retrieveLog@addr,f,c
 23860  0044AA  2A11               	incf	retrieveLog@addr+1,f,c
 23861                           
 23862                           ; BSR set to: 1
 23863                           ;EEPROM.c: 153: unsigned char byte2 = EEPROM_read(addr);
 23864  0044AC  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23865  0044B0  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23866  0044B4  EC47  F030         	call	i2_EEPROM_read	;wreg free
 23867  0044B8  6E0C               	movwf	retrieveLog@byte2,c
 23868                           
 23869                           ;EEPROM.c: 154: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 23870  0044BA  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23871  0044BE  3A09               	swapf	??_retrieveLog,f,c
 23872  0044C0  0E0F               	movlw	15
 23873  0044C2  1609               	andwf	??_retrieveLog,f,c
 23874  0044C4  0E0F               	movlw	15
 23875  0044C6  1609               	andwf	??_retrieveLog,f,c
 23876  0044C8  5009               	movf	??_retrieveLog,w,c
 23877  0044CA  0100               	movlb	0	; () banked
 23878  0044CC  6FF4               	movwf	_log_count_pop_no_tab& (0+255),b
 23879  0044CE  6BF5               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 23880                           
 23881                           ; BSR set to: 0
 23882                           ;EEPROM.c: 155: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 23883  0044D0  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23884  0044D4  0E0F               	movlw	15
 23885  0044D6  1609               	andwf	??_retrieveLog,f,c
 23886  0044D8  5009               	movf	??_retrieveLog,w,c
 23887  0044DA  0101               	movlb	1	; () banked
 23888  0044DC  6F43               	movwf	_log_count_pop_w_tab& (0+255),b
 23889  0044DE  6B44               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 23890                           
 23891                           ; BSR set to: 1
 23892                           ;EEPROM.c: 156: addr++;
 23893  0044E0  4A10               	infsnz	retrieveLog@addr,f,c
 23894  0044E2  2A11               	incf	retrieveLog@addr+1,f,c
 23895                           
 23896                           ; BSR set to: 1
 23897                           ;EEPROM.c: 157: unsigned char byte3 = EEPROM_read(addr);
 23898  0044E4  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23899  0044E8  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23900  0044EC  EC47  F030         	call	i2_EEPROM_read	;wreg free
 23901  0044F0  6E0D               	movwf	retrieveLog@byte3,c
 23902                           
 23903                           ;EEPROM.c: 158: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 23904  0044F2  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23905  0044F6  3A09               	swapf	??_retrieveLog,f,c
 23906  0044F8  0E0F               	movlw	15
 23907  0044FA  1609               	andwf	??_retrieveLog,f,c
 23908  0044FC  0E0F               	movlw	15
 23909  0044FE  1609               	andwf	??_retrieveLog,f,c
 23910  004500  5009               	movf	??_retrieveLog,w,c
 23911  004502  0101               	movlb	1	; () banked
 23912  004504  6F41               	movwf	_log_count_can_w_lab& (0+255),b
 23913  004506  6B42               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 23914                           
 23915                           ; BSR set to: 1
 23916                           ;EEPROM.c: 159: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 23917  004508  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23918  00450C  0E0F               	movlw	15
 23919  00450E  1609               	andwf	??_retrieveLog,f,c
 23920  004510  5009               	movf	??_retrieveLog,w,c
 23921  004512  0101               	movlb	1	; () banked
 23922  004514  6F3F               	movwf	_log_count_can_no_lab& (0+255),b
 23923  004516  6B40               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 23924                           
 23925                           ; BSR set to: 1
 23926                           ;EEPROM.c: 160: addr++;
 23927  004518  4A10               	infsnz	retrieveLog@addr,f,c
 23928  00451A  2A11               	incf	retrieveLog@addr+1,f,c
 23929                           
 23930                           ; BSR set to: 1
 23931                           ;EEPROM.c: 163: for(int i = 0; i < 7; i++){
 23932  00451C  0E00               	movlw	0
 23933  00451E  6E0F               	movwf	retrieveLog@i+1,c
 23934  004520  0E00               	movlw	0
 23935  004522  6E0E               	movwf	retrieveLog@i,c
 23936  004524                     i2l7583:
 23937                           
 23938                           ; BSR set to: 1
 23939  004524  BE0F               	btfsc	retrieveLog@i+1,7,c
 23940  004526  D006               	goto	i2l7587
 23941  004528  500F               	movf	retrieveLog@i+1,w,c
 23942  00452A  E11E               	bnz	i2l7595
 23943  00452C  0E07               	movlw	7
 23944  00452E  5C0E               	subwf	retrieveLog@i,w,c
 23945  004530  B0D8               	btfsc	status,0,c
 23946  004532  D01A               	goto	i2l7595
 23947  004534                     i2l7587:
 23948                           
 23949                           ;EEPROM.c: 164: log_startTime[i] = (int)EEPROM_read(addr);
 23950  004534  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23951  004538  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23952  00453C  EC47  F030         	call	i2_EEPROM_read	;wreg free
 23953  004540  6E09               	movwf	??_retrieveLog& (0+255),c
 23954  004542  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 23955  004544  90D8               	bcf	status,0,c
 23956  004546  340E               	rlcf	retrieveLog@i,w,c
 23957  004548  6ED9               	movwf	fsr2l,c
 23958  00454A  340F               	rlcf	retrieveLog@i+1,w,c
 23959  00454C  6EDA               	movwf	fsr2h,c
 23960  00454E  0E00               	movlw	low _log_startTime
 23961  004550  26D9               	addwf	fsr2l,f,c
 23962  004552  0E01               	movlw	high _log_startTime
 23963  004554  22DA               	addwfc	fsr2h,f,c
 23964  004556  C009  FFDE         	movff	??_retrieveLog,postinc2
 23965  00455A  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 23966                           
 23967                           ;EEPROM.c: 165: addr++;
 23968  00455E  4A10               	infsnz	retrieveLog@addr,f,c
 23969  004560  2A11               	incf	retrieveLog@addr+1,f,c
 23970  004562  4A0E               	infsnz	retrieveLog@i,f,c
 23971  004564  2A0F               	incf	retrieveLog@i+1,f,c
 23972  004566  D7DE               	goto	i2l7583
 23973  004568                     i2l7595:
 23974                           
 23975                           ;EEPROM.c: 166: }
 23976                           ;EEPROM.c: 169: log_total_time = (int)EEPROM_read(addr);
 23977  004568  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23978  00456C  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23979  004570  EC47  F030         	call	i2_EEPROM_read	;wreg free
 23980  004574  6E09               	movwf	??_retrieveLog& (0+255),c
 23981  004576  5009               	movf	??_retrieveLog,w,c
 23982  004578  0100               	movlb	0	; () banked
 23983  00457A  6FF6               	movwf	_log_total_time& (0+255),b
 23984  00457C  6BF7               	clrf	(_log_total_time+1)& (0+255),b
 23985                           
 23986                           ; BSR set to: 0
 23987  00457E  0012               	return		;funcret
 23988  004580                     __end_of_retrieveLog:
 23989                           	opt stack 0
 23990                           pclatu	equ	0xFFB
 23991                           pclath	equ	0xFFA
 23992                           tblptru	equ	0xFF8
 23993                           tblptrh	equ	0xFF7
 23994                           tblptrl	equ	0xFF6
 23995                           tablat	equ	0xFF5
 23996                           prodh	equ	0xFF4
 23997                           prodl	equ	0xFF3
 23998                           intcon	equ	0xFF2
 23999                           intcon2	equ	0xFF1
 24000                           intcon3	equ	0xFF0
 24001                           indf0	equ	0xFEF
 24002                           postinc0	equ	0xFEE
 24003                           fsr0h	equ	0xFEA
 24004                           fsr0l	equ	0xFE9
 24005                           wreg	equ	0xFE8
 24006                           postdec1	equ	0xFE5
 24007                           fsr1h	equ	0xFE2
 24008                           fsr1l	equ	0xFE1
 24009                           indf2	equ	0xFDF
 24010                           postinc2	equ	0xFDE
 24011                           postdec2	equ	0xFDD
 24012                           fsr2h	equ	0xFDA
 24013                           fsr2l	equ	0xFD9
 24014                           status	equ	0xFD8
 24015                           
 24016 ;; *************** function i2_EEPROM_read *****************
 24017 ;; Defined at:
 24018 ;;		line 72 in file "EEPROM.c"
 24019 ;; Parameters:    Size  Location     Type
 24020 ;;  address         2    0[COMRAM] unsigned short 
 24021 ;; Auto vars:     Size  Location     Type
 24022 ;;		None
 24023 ;; Return value:  Size  Location     Type
 24024 ;;                  1    wreg      unsigned char 
 24025 ;; Registers used:
 24026 ;;		wreg, status,2
 24027 ;; Tracked objects:
 24028 ;;		On entry : 0/0
 24029 ;;		On exit  : 0/0
 24030 ;;		Unchanged: 0/0
 24031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24032 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24035 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24036 ;;Total ram usage:        2 bytes
 24037 ;; Hardware stack levels used:    1
 24038 ;; This function calls:
 24039 ;;		Nothing
 24040 ;; This function is called by:
 24041 ;;		_retrieveLog
 24042 ;; This function uses a non-reentrant model
 24043 ;;
 24044                           
 24045                           	psect	text84
 24046  00608E                     __ptext84:
 24047                           	opt stack 0
 24048  00608E                     i2_EEPROM_read:
 24049                           	opt stack 20
 24050                           
 24051                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
 24052                           
 24053                           ; BSR set to: 0
 24054                           ;incstack = 0
 24055  00608E  5002               	movf	i2EEPROM_read@address+1,w,c
 24056  006090  6EAA               	movwf	4010,c	;volatile
 24057                           
 24058                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
 24059  006092  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 24060                           
 24061                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
 24062  006096  9EA6               	bcf	4006,7,c	;volatile
 24063                           
 24064                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
 24065  006098  9CA6               	bcf	4006,6,c	;volatile
 24066                           
 24067                           ;EEPROM.c: 79: EECON1bits.RD = 1;
 24068  00609A  80A6               	bsf	4006,0,c	;volatile
 24069  00609C                     i2l1183:
 24070  00609C  B0A6               	btfsc	4006,0,c	;volatile
 24071  00609E  D7FE               	goto	i2l1183
 24072                           
 24073                           ;EEPROM.c: 85: return EEDATA;
 24074  0060A0  50A8               	movf	4008,w,c	;volatile
 24075  0060A2  0012               	return	
 24076  0060A4                     __end_ofi2_EEPROM_read:
 24077                           	opt stack 0
 24078                           pclatu	equ	0xFFB
 24079                           pclath	equ	0xFFA
 24080                           tblptru	equ	0xFF8
 24081                           tblptrh	equ	0xFF7
 24082                           tblptrl	equ	0xFF6
 24083                           tablat	equ	0xFF5
 24084                           prodh	equ	0xFF4
 24085                           prodl	equ	0xFF3
 24086                           intcon	equ	0xFF2
 24087                           intcon2	equ	0xFF1
 24088                           intcon3	equ	0xFF0
 24089                           indf0	equ	0xFEF
 24090                           postinc0	equ	0xFEE
 24091                           fsr0h	equ	0xFEA
 24092                           fsr0l	equ	0xFE9
 24093                           wreg	equ	0xFE8
 24094                           postdec1	equ	0xFE5
 24095                           fsr1h	equ	0xFE2
 24096                           fsr1l	equ	0xFE1
 24097                           indf2	equ	0xFDF
 24098                           postinc2	equ	0xFDE
 24099                           postdec2	equ	0xFDD
 24100                           fsr2h	equ	0xFDA
 24101                           fsr2l	equ	0xFD9
 24102                           status	equ	0xFD8
 24103                           
 24104 ;; *************** function _updateArmState *****************
 24105 ;; Defined at:
 24106 ;;		line 735 in file "sort.c"
 24107 ;; Parameters:    Size  Location     Type
 24108 ;;		None
 24109 ;; Auto vars:     Size  Location     Type
 24110 ;;		None
 24111 ;; Return value:  Size  Location     Type
 24112 ;;                  1    wreg      void 
 24113 ;; Registers used:
 24114 ;;		wreg, status,2, status,0
 24115 ;; Tracked objects:
 24116 ;;		On entry : 0/0
 24117 ;;		On exit  : 0/0
 24118 ;;		Unchanged: 0/0
 24119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24122 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24123 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24124 ;;Total ram usage:        2 bytes
 24125 ;; Hardware stack levels used:    1
 24126 ;; This function calls:
 24127 ;;		Nothing
 24128 ;; This function is called by:
 24129 ;;		_handler
 24130 ;; This function uses a non-reentrant model
 24131 ;;
 24132                           
 24133                           	psect	text85
 24134  005AEC                     __ptext85:
 24135                           	opt stack 0
 24136  005AEC                     _updateArmState:
 24137                           	opt stack 23
 24138                           
 24139                           ;sort.c: 742: if(!was_low_2){
 24140                           
 24141                           ;incstack = 0
 24142  005AEC  5079               	movf	_was_low_2,w,c	;volatile
 24143  005AEE  107A               	iorwf	_was_low_2+1,w,c	;volatile
 24144  005AF0  B4D8               	btfsc	status,2,c
 24145  005AF2  D007               	goto	i2l10589
 24146  005AF4  D016               	goto	i2l999
 24147  005AF6                     i2l10583:
 24148                           
 24149                           ;sort.c: 747: PR2 = 0x20;
 24150  005AF6  0E20               	movlw	32
 24151  005AF8  6ECB               	movwf	4043,c	;volatile
 24152                           
 24153                           ;sort.c: 748: break;
 24154  005AFA  0012               	return	
 24155  005AFC                     i2l10585:
 24156                           
 24157                           ;sort.c: 751: PR2 = 0x40;
 24158  005AFC  0E40               	movlw	64
 24159  005AFE  6ECB               	movwf	4043,c	;volatile
 24160                           
 24161                           ;sort.c: 753: }
 24162                           
 24163                           ;sort.c: 752: break;
 24164  005B00  0012               	return	
 24165  005B02                     i2l10589:
 24166  005B02  C0EA  F001         	movff	_f_arm_position,??_updateArmState	;volatile
 24167  005B06  C0EB  F002         	movff	_f_arm_position+1,??_updateArmState+1	;volatile
 24168                           
 24169                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 24170                           ; Switch size 1, requested type "space"
 24171                           ; Number of cases is 1, Range of values is 0 to 0
 24172                           ; switch strategies available:
 24173                           ; Name         Instructions Cycles
 24174                           ; simple_byte            4     3 (average)
 24175                           ;	Chosen strategy is simple_byte
 24176  005B0A  5002               	movf	??_updateArmState+1,w,c
 24177  005B0C  0A00               	xorlw	0	; case 0
 24178  005B0E  A4D8               	btfss	status,2,c
 24179  005B10  0012               	return	
 24180                           
 24181                           ; Switch size 1, requested type "space"
 24182                           ; Number of cases is 2, Range of values is 0 to 1
 24183                           ; switch strategies available:
 24184                           ; Name         Instructions Cycles
 24185                           ; simple_byte            7     4 (average)
 24186                           ;	Chosen strategy is simple_byte
 24187  005B12  5001               	movf	??_updateArmState,w,c
 24188  005B14  0A00               	xorlw	0	; case 0
 24189  005B16  B4D8               	btfsc	status,2,c
 24190  005B18  D7EE               	goto	i2l10583
 24191  005B1A  0A01               	xorlw	1	; case 1
 24192  005B1C  A4D8               	btfss	status,2,c
 24193                           
 24194                           ;sort.c: 754: }
 24195  005B1E  0012               	return	
 24196  005B20  D7ED               	goto	i2l10585
 24197  005B22                     i2l999:
 24198                           
 24199                           ;sort.c: 755: else{
 24200                           ;sort.c: 757: PR2 = 0xFF;
 24201  005B22  68CB               	setf	4043,c	;volatile
 24202  005B24  0012               	return	
 24203  005B26                     __end_of_updateArmState:
 24204                           	opt stack 0
 24205                           pclatu	equ	0xFFB
 24206                           pclath	equ	0xFFA
 24207                           tblptru	equ	0xFF8
 24208                           tblptrh	equ	0xFF7
 24209                           tblptrl	equ	0xFF6
 24210                           tablat	equ	0xFF5
 24211                           prodh	equ	0xFF4
 24212                           prodl	equ	0xFF3
 24213                           intcon	equ	0xFF2
 24214                           intcon2	equ	0xFF1
 24215                           intcon3	equ	0xFF0
 24216                           indf0	equ	0xFEF
 24217                           postinc0	equ	0xFEE
 24218                           fsr0h	equ	0xFEA
 24219                           fsr0l	equ	0xFE9
 24220                           wreg	equ	0xFE8
 24221                           postdec1	equ	0xFE5
 24222                           fsr1h	equ	0xFE2
 24223                           fsr1l	equ	0xFE1
 24224                           indf2	equ	0xFDF
 24225                           postinc2	equ	0xFDE
 24226                           postdec2	equ	0xFDD
 24227                           fsr2h	equ	0xFDA
 24228                           fsr2l	equ	0xFD9
 24229                           status	equ	0xFD8
 24230                           
 24231 ;; *************** function _printSortTimer *****************
 24232 ;; Defined at:
 24233 ;;		line 544 in file "sort.c"
 24234 ;; Parameters:    Size  Location     Type
 24235 ;;		None
 24236 ;; Auto vars:     Size  Location     Type
 24237 ;;  i               2   70[COMRAM] int 
 24238 ;;  curTime        14   44[COMRAM] int [7]
 24239 ;;  timeDiff        2   68[COMRAM] unsigned int 
 24240 ;;  sec             2   64[COMRAM] int 
 24241 ;;  min             2   62[COMRAM] int 
 24242 ;;  cur_sec         2   60[COMRAM] unsigned int 
 24243 ;;  start_sec       2   58[COMRAM] unsigned int 
 24244 ;; Return value:  Size  Location     Type
 24245 ;;                  1    wreg      void 
 24246 ;; Registers used:
 24247 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24248 ;; Tracked objects:
 24249 ;;		On entry : 0/0
 24250 ;;		On exit  : 0/0
 24251 ;;		Unchanged: 0/0
 24252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24254 ;;      Locals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24255 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24256 ;;      Totals:        31       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24257 ;;Total ram usage:       31 bytes
 24258 ;; Hardware stack levels used:    1
 24259 ;; Hardware stack levels required when called:    3
 24260 ;; This function calls:
 24261 ;;		i2___awmod
 24262 ;;		i2___lwdiv
 24263 ;;		i2___lwmod
 24264 ;;		i2___wmul
 24265 ;;		i2_getRTC
 24266 ;;		i2_lcdInst
 24267 ;;		i2_printf
 24268 ;; This function is called by:
 24269 ;;		_handler
 24270 ;; This function uses a non-reentrant model
 24271 ;;
 24272                           
 24273                           	psect	text86
 24274  0029DE                     __ptext86:
 24275                           	opt stack 0
 24276  0029DE                     _printSortTimer:
 24277                           	opt stack 20
 24278                           
 24279                           ;sort.c: 545: getRTC();
 24280                           
 24281                           ;incstack = 0
 24282  0029DE  ECAB  F02A         	call	i2_getRTC	;wreg free
 24283                           
 24284                           ;sort.c: 546: int curTime[7];
 24285                           ;sort.c: 547: for(int i = 0; i < 7; i++){
 24286  0029E2  0E00               	movlw	0
 24287  0029E4  6E48               	movwf	printSortTimer@i+1,c
 24288  0029E6  0E00               	movlw	0
 24289  0029E8  6E47               	movwf	printSortTimer@i,c
 24290  0029EA                     i2l10385:
 24291  0029EA  BE48               	btfsc	printSortTimer@i+1,7,c
 24292  0029EC  D006               	goto	i2l10389
 24293  0029EE  5048               	movf	printSortTimer@i+1,w,c
 24294  0029F0  E131               	bnz	i2l10395
 24295  0029F2  0E07               	movlw	7
 24296  0029F4  5C47               	subwf	printSortTimer@i,w,c
 24297  0029F6  B0D8               	btfsc	status,0,c
 24298  0029F8  D02D               	goto	i2l10395
 24299  0029FA                     i2l10389:
 24300                           
 24301                           ;sort.c: 548: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 24302  0029FA  0E1C               	movlw	low _time
 24303  0029FC  2447               	addwf	printSortTimer@i,w,c
 24304  0029FE  6ED9               	movwf	fsr2l,c
 24305  002A00  0E01               	movlw	high _time
 24306  002A02  2048               	addwfc	printSortTimer@i+1,w,c
 24307  002A04  6EDA               	movwf	fsr2h,c
 24308  002A06  50DF               	movf	indf2,w,c
 24309  002A08  6E2A               	movwf	??_printSortTimer& (0+255),c
 24310  002A0A  3A2A               	swapf	??_printSortTimer,f,c
 24311  002A0C  0E0F               	movlw	15
 24312  002A0E  162A               	andwf	??_printSortTimer,f,c
 24313  002A10  0E0F               	movlw	15
 24314  002A12  162A               	andwf	??_printSortTimer,f,c
 24315  002A14  502A               	movf	??_printSortTimer,w,c
 24316  002A16  0D0A               	mullw	10
 24317  002A18  0E1C               	movlw	low _time
 24318  002A1A  2447               	addwf	printSortTimer@i,w,c
 24319  002A1C  6ED9               	movwf	fsr2l,c
 24320  002A1E  0E01               	movlw	high _time
 24321  002A20  2048               	addwfc	printSortTimer@i+1,w,c
 24322  002A22  6EDA               	movwf	fsr2h,c
 24323  002A24  50DF               	movf	indf2,w,c
 24324  002A26  0B0F               	andlw	15
 24325  002A28  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 24326  002A2A  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 24327  002A2C  50F3               	movf	prodl,w,c
 24328  002A2E  262B               	addwf	??_printSortTimer+1,f,c
 24329  002A30  50F4               	movf	prodh,w,c
 24330  002A32  222C               	addwfc	??_printSortTimer+2,f,c
 24331  002A34  90D8               	bcf	status,0,c
 24332  002A36  3447               	rlcf	printSortTimer@i,w,c
 24333  002A38  6ED9               	movwf	fsr2l,c
 24334  002A3A  3448               	rlcf	printSortTimer@i+1,w,c
 24335  002A3C  6EDA               	movwf	fsr2h,c
 24336  002A3E  0E2D               	movlw	low printSortTimer@curTime
 24337  002A40  26D9               	addwf	fsr2l,f,c
 24338  002A42  0E00               	movlw	high printSortTimer@curTime
 24339  002A44  22DA               	addwfc	fsr2h,f,c
 24340  002A46  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 24341  002A4A  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 24342  002A4E  4A47               	infsnz	printSortTimer@i,f,c
 24343  002A50  2A48               	incf	printSortTimer@i+1,f,c
 24344  002A52  D7CB               	goto	i2l10385
 24345  002A54                     i2l10395:
 24346                           
 24347                           ;sort.c: 549: }
 24348                           ;sort.c: 550: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 24349  002A54  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 24350  002A58  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 24351  002A5C  0E00               	movlw	0
 24352  002A5E  6E04               	movwf	i2___wmul@multiplicand+1,c
 24353  002A60  0E3C               	movlw	60
 24354  002A62  6E03               	movwf	i2___wmul@multiplicand,c
 24355  002A64  ECB9  F02F         	call	i2___wmul	;wreg free
 24356  002A68  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 24357  002A6C  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 24358  002A70  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 24359  002A74  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 24360  002A78  0E0E               	movlw	14
 24361  002A7A  6E04               	movwf	i2___wmul@multiplicand+1,c
 24362  002A7C  0E10               	movlw	16
 24363  002A7E  6E03               	movwf	i2___wmul@multiplicand,c
 24364  002A80  ECB9  F02F         	call	i2___wmul	;wreg free
 24365  002A84  5001               	movf	?i2___wmul,w,c
 24366  002A86  262A               	addwf	??_printSortTimer,f,c
 24367  002A88  5002               	movf	?i2___wmul+1,w,c
 24368  002A8A  222B               	addwfc	??_printSortTimer+1,f,c
 24369  002A8C  0101               	movlb	1	; () banked
 24370  002A8E  510E               	movf	_startTime& (0+255),w,b
 24371  002A90  242A               	addwf	??_printSortTimer,w,c
 24372  002A92  6E3B               	movwf	printSortTimer@start_sec,c
 24373  002A94  0101               	movlb	1	; () banked
 24374  002A96  510F               	movf	(_startTime+1)& (0+255),w,b
 24375  002A98  202B               	addwfc	??_printSortTimer+1,w,c
 24376  002A9A  6E3C               	movwf	printSortTimer@start_sec+1,c
 24377                           
 24378                           ;sort.c: 551: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 24379  002A9C  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 24380  002AA0  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 24381  002AA4  0E00               	movlw	0
 24382  002AA6  6E04               	movwf	i2___wmul@multiplicand+1,c
 24383  002AA8  0E3C               	movlw	60
 24384  002AAA  6E03               	movwf	i2___wmul@multiplicand,c
 24385  002AAC  ECB9  F02F         	call	i2___wmul	;wreg free
 24386  002AB0  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 24387  002AB4  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 24388  002AB8  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 24389  002ABC  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 24390  002AC0  0E0E               	movlw	14
 24391  002AC2  6E04               	movwf	i2___wmul@multiplicand+1,c
 24392  002AC4  0E10               	movlw	16
 24393  002AC6  6E03               	movwf	i2___wmul@multiplicand,c
 24394  002AC8  ECB9  F02F         	call	i2___wmul	;wreg free
 24395  002ACC  5001               	movf	?i2___wmul,w,c
 24396  002ACE  262A               	addwf	??_printSortTimer,f,c
 24397  002AD0  5002               	movf	?i2___wmul+1,w,c
 24398  002AD2  222B               	addwfc	??_printSortTimer+1,f,c
 24399  002AD4  502D               	movf	printSortTimer@curTime,w,c
 24400  002AD6  242A               	addwf	??_printSortTimer,w,c
 24401  002AD8  6E3D               	movwf	printSortTimer@cur_sec,c
 24402  002ADA  502E               	movf	printSortTimer@curTime+1,w,c
 24403  002ADC  202B               	addwfc	??_printSortTimer+1,w,c
 24404  002ADE  6E3E               	movwf	printSortTimer@cur_sec+1,c
 24405                           
 24406                           ;sort.c: 552: unsigned int timeDiff = cur_sec - start_sec;
 24407  002AE0  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 24408  002AE4  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 24409  002AE8  1E2A               	comf	??_printSortTimer,f,c
 24410  002AEA  1E2B               	comf	??_printSortTimer+1,f,c
 24411  002AEC  4A2A               	infsnz	??_printSortTimer,f,c
 24412  002AEE  2A2B               	incf	??_printSortTimer+1,f,c
 24413  002AF0  503D               	movf	printSortTimer@cur_sec,w,c
 24414  002AF2  242A               	addwf	??_printSortTimer,w,c
 24415  002AF4  6E45               	movwf	printSortTimer@timeDiff,c
 24416  002AF6  503E               	movf	printSortTimer@cur_sec+1,w,c
 24417  002AF8  202B               	addwfc	??_printSortTimer+1,w,c
 24418  002AFA  6E46               	movwf	printSortTimer@timeDiff+1,c
 24419                           
 24420                           ;sort.c: 554: total_time = timeDiff;
 24421  002AFC  C045  F0FA         	movff	printSortTimer@timeDiff,_total_time
 24422  002B00  C046  F0FB         	movff	printSortTimer@timeDiff+1,_total_time+1
 24423                           
 24424                           ;sort.c: 556: if(f_most_recent_sort_time){
 24425  002B04  0101               	movlb	1	; () banked
 24426  002B06  5137               	movf	_f_most_recent_sort_time& (0+255),w,b
 24427  002B08  0101               	movlb	1	; () banked
 24428  002B0A  1138               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 24429  002B0C  B4D8               	btfsc	status,2,c
 24430  002B0E  D009               	goto	i2l10407
 24431                           
 24432                           ; BSR set to: 1
 24433                           ;sort.c: 557: most_recent_sort_time = total_time;
 24434  002B10  C0FA  F147         	movff	_total_time,_most_recent_sort_time
 24435  002B14  C0FB  F148         	movff	_total_time+1,_most_recent_sort_time+1
 24436                           
 24437                           ; BSR set to: 1
 24438                           ;sort.c: 558: f_most_recent_sort_time = 0;
 24439  002B18  0E00               	movlw	0
 24440  002B1A  0101               	movlb	1	; () banked
 24441  002B1C  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 24442  002B1E  0E00               	movlw	0
 24443  002B20  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
 24444  002B22                     i2l10407:
 24445                           
 24446                           ; BSR set to: 1
 24447                           ;sort.c: 559: }
 24448                           ;sort.c: 562: if(total_time >= 20){
 24449  002B22  0100               	movlb	0	; () banked
 24450  002B24  BFFB               	btfsc	(_total_time+1)& (0+255),7,b
 24451  002B26  D036               	goto	i2l933
 24452  002B28  0100               	movlb	0	; () banked
 24453  002B2A  51FB               	movf	(_total_time+1)& (0+255),w,b
 24454  002B2C  E105               	bnz	i2u1041_40
 24455  002B2E  0E14               	movlw	20
 24456  002B30  0100               	movlb	0	; () banked
 24457  002B32  5DFA               	subwf	_total_time& (0+255),w,b
 24458  002B34  A0D8               	btfss	status,0,c
 24459  002B36  D02E               	goto	i2l933
 24460  002B38                     i2u1041_40:
 24461                           
 24462                           ; BSR set to: 0
 24463                           ;sort.c: 563: if(LATBbits.LATB2 == 0){
 24464  002B38  B48A               	btfsc	3978,2,c	;volatile
 24465  002B3A  D011               	goto	i2l10419
 24466                           
 24467                           ; BSR set to: 0
 24468                           ;sort.c: 564: motor_toggle_count++;
 24469  002B3C  0101               	movlb	1	; () banked
 24470  002B3E  4B49               	infsnz	_motor_toggle_count& (0+255),f,b
 24471  002B40  2B4A               	incf	(_motor_toggle_count+1)& (0+255),f,b
 24472                           
 24473                           ; BSR set to: 1
 24474                           ;sort.c: 565: if(motor_toggle_count == 2){
 24475  002B42  0E02               	movlw	2
 24476  002B44  0101               	movlb	1	; () banked
 24477  002B46  1949               	xorwf	_motor_toggle_count& (0+255),w,b
 24478  002B48  0101               	movlb	1	; () banked
 24479  002B4A  114A               	iorwf	(_motor_toggle_count+1)& (0+255),w,b
 24480  002B4C  A4D8               	btfss	status,2,c
 24481  002B4E  D022               	goto	i2l933
 24482                           
 24483                           ; BSR set to: 1
 24484                           ;sort.c: 566: motor_toggle_count = 0;
 24485  002B50  0E00               	movlw	0
 24486  002B52  0101               	movlb	1	; () banked
 24487  002B54  6F4A               	movwf	(_motor_toggle_count+1)& (0+255),b
 24488  002B56  0E00               	movlw	0
 24489  002B58  6F49               	movwf	_motor_toggle_count& (0+255),b
 24490                           
 24491                           ; BSR set to: 1
 24492                           ;sort.c: 571: LATBbits.LATB2 = 1;
 24493  002B5A  848A               	bsf	3978,2,c	;volatile
 24494                           
 24495                           ; BSR set to: 1
 24496                           ;sort.c: 572: }
 24497                           ;sort.c: 573: }
 24498  002B5C  D01B               	goto	i2l933
 24499  002B5E                     i2l10419:
 24500                           
 24501                           ;sort.c: 574: else if(total_time % 20 == 0){
 24502  002B5E  C0FA  F001         	movff	_total_time,i2___awmod@dividend
 24503  002B62  C0FB  F002         	movff	_total_time+1,i2___awmod@dividend+1
 24504  002B66  0E00               	movlw	0
 24505  002B68  6E04               	movwf	i2___awmod@divisor+1,c
 24506  002B6A  0E14               	movlw	20
 24507  002B6C  6E03               	movwf	i2___awmod@divisor,c
 24508  002B6E  ECE4  F02A         	call	i2___awmod	;wreg free
 24509  002B72  5001               	movf	?i2___awmod,w,c
 24510  002B74  1002               	iorwf	?i2___awmod+1,w,c
 24511  002B76  A4D8               	btfss	status,2,c
 24512  002B78  D00D               	goto	i2l933
 24513                           
 24514                           ;sort.c: 575: LATBbits.LATB2 = !LATBbits.LATB2;
 24515  002B7A  B48A               	btfsc	3978,2,c	;volatile
 24516  002B7C  D003               	goto	i2u1045_40
 24517  002B7E  6A2A               	clrf	??_printSortTimer& (0+255),c
 24518  002B80  2A2A               	incf	??_printSortTimer& (0+255),f,c
 24519  002B82  D001               	goto	i2u1046_48
 24520  002B84                     i2u1045_40:
 24521  002B84  6A2A               	clrf	??_printSortTimer& (0+255),c
 24522  002B86                     i2u1046_48:
 24523  002B86  462A               	rlncf	??_printSortTimer,f,c
 24524  002B88  462A               	rlncf	??_printSortTimer,f,c
 24525  002B8A  508A               	movf	3978,w,c	;volatile
 24526  002B8C  182A               	xorwf	??_printSortTimer,w,c
 24527  002B8E  0BFB               	andlw	-5
 24528  002B90  182A               	xorwf	??_printSortTimer,w,c
 24529  002B92  6E8A               	movwf	3978,c	;volatile
 24530  002B94                     i2l933:
 24531                           
 24532                           ;sort.c: 576: }
 24533                           ;sort.c: 577: }
 24534                           ;sort.c: 581: if((total_time >= 15 && total_time <= 19) && count_total == 0){
 24535  002B94  0100               	movlb	0	; () banked
 24536  002B96  BFFB               	btfsc	(_total_time+1)& (0+255),7,b
 24537  002B98  D026               	goto	i2l10437
 24538  002B9A  0100               	movlb	0	; () banked
 24539  002B9C  51FB               	movf	(_total_time+1)& (0+255),w,b
 24540  002B9E  E105               	bnz	i2u1047_40
 24541  002BA0  0E0F               	movlw	15
 24542  002BA2  0100               	movlb	0	; () banked
 24543  002BA4  5DFA               	subwf	_total_time& (0+255),w,b
 24544  002BA6  A0D8               	btfss	status,0,c
 24545  002BA8  D01E               	goto	i2l10437
 24546  002BAA                     i2u1047_40:
 24547                           
 24548                           ; BSR set to: 0
 24549  002BAA  0100               	movlb	0	; () banked
 24550  002BAC  BFFB               	btfsc	(_total_time+1)& (0+255),7,b
 24551  002BAE  D008               	goto	i2l10425
 24552  002BB0  0100               	movlb	0	; () banked
 24553  002BB2  51FB               	movf	(_total_time+1)& (0+255),w,b
 24554  002BB4  E118               	bnz	i2l10437
 24555  002BB6  0E14               	movlw	20
 24556  002BB8  0100               	movlb	0	; () banked
 24557  002BBA  5DFA               	subwf	_total_time& (0+255),w,b
 24558  002BBC  B0D8               	btfsc	status,0,c
 24559  002BBE  D013               	goto	i2l10437
 24560  002BC0                     i2l10425:
 24561                           
 24562                           ; BSR set to: 0
 24563  002BC0  0100               	movlb	0	; () banked
 24564  002BC2  51FE               	movf	_count_total& (0+255),w,b
 24565  002BC4  0100               	movlb	0	; () banked
 24566  002BC6  11FF               	iorwf	(_count_total+1)& (0+255),w,b
 24567  002BC8  A4D8               	btfss	status,2,c
 24568  002BCA  D00D               	goto	i2l10437
 24569                           
 24570                           ; BSR set to: 0
 24571                           ;sort.c: 582: LATBbits.LATB0 = 1;
 24572  002BCC  808A               	bsf	3978,0,c	;volatile
 24573                           
 24574                           ; BSR set to: 0
 24575                           ;sort.c: 583: agitator_toggle_count++;
 24576  002BCE  4A61               	infsnz	_agitator_toggle_count,f,c
 24577  002BD0  2A62               	incf	_agitator_toggle_count+1,f,c
 24578                           
 24579                           ; BSR set to: 0
 24580                           ;sort.c: 584: if(agitator_toggle_count == 5){
 24581  002BD2  0E05               	movlw	5
 24582  002BD4  1861               	xorwf	_agitator_toggle_count,w,c
 24583  002BD6  1062               	iorwf	_agitator_toggle_count+1,w,c
 24584  002BD8  A4D8               	btfss	status,2,c
 24585  002BDA  D066               	goto	i2l10467
 24586                           
 24587                           ; BSR set to: 0
 24588                           ;sort.c: 585: agitator_toggle_count = 0;
 24589  002BDC  0E00               	movlw	0
 24590  002BDE  6E62               	movwf	_agitator_toggle_count+1,c
 24591  002BE0  0E00               	movlw	0
 24592  002BE2  6E61               	movwf	_agitator_toggle_count,c
 24593  002BE4  D060               	goto	i2l10465
 24594  002BE6                     i2l10437:
 24595                           
 24596                           ; BSR set to: 0
 24597                           ;sort.c: 589: else if(total_time >= 30){
 24598  002BE6  0100               	movlb	0	; () banked
 24599  002BE8  BFFB               	btfsc	(_total_time+1)& (0+255),7,b
 24600  002BEA  D05E               	goto	i2l10467
 24601  002BEC  0100               	movlb	0	; () banked
 24602  002BEE  51FB               	movf	(_total_time+1)& (0+255),w,b
 24603  002BF0  E105               	bnz	i2u1051_40
 24604  002BF2  0E1E               	movlw	30
 24605  002BF4  0100               	movlb	0	; () banked
 24606  002BF6  5DFA               	subwf	_total_time& (0+255),w,b
 24607  002BF8  A0D8               	btfss	status,0,c
 24608  002BFA  D056               	goto	i2l10467
 24609  002BFC                     i2u1051_40:
 24610                           
 24611                           ; BSR set to: 0
 24612                           ;sort.c: 590: if(total_time % 30 == 0){
 24613  002BFC  C0FA  F001         	movff	_total_time,i2___awmod@dividend
 24614  002C00  C0FB  F002         	movff	_total_time+1,i2___awmod@dividend+1
 24615  002C04  0E00               	movlw	0
 24616  002C06  6E04               	movwf	i2___awmod@divisor+1,c
 24617  002C08  0E1E               	movlw	30
 24618  002C0A  6E03               	movwf	i2___awmod@divisor,c
 24619  002C0C  ECE4  F02A         	call	i2___awmod	;wreg free
 24620  002C10  5001               	movf	?i2___awmod,w,c
 24621  002C12  1002               	iorwf	?i2___awmod+1,w,c
 24622  002C14  A4D8               	btfss	status,2,c
 24623  002C16  D00C               	goto	i2l942
 24624                           
 24625                           ;sort.c: 591: LATBbits.LATB0 = !LATBbits.LATB0;
 24626  002C18  B08A               	btfsc	3978,0,c	;volatile
 24627  002C1A  D003               	goto	i2u1053_40
 24628  002C1C  6A2A               	clrf	??_printSortTimer& (0+255),c
 24629  002C1E  2A2A               	incf	??_printSortTimer& (0+255),f,c
 24630  002C20  D001               	goto	i2u1054_48
 24631  002C22                     i2u1053_40:
 24632  002C22  6A2A               	clrf	??_printSortTimer& (0+255),c
 24633  002C24                     i2u1054_48:
 24634  002C24  508A               	movf	3978,w,c	;volatile
 24635  002C26  182A               	xorwf	??_printSortTimer,w,c
 24636  002C28  0BFE               	andlw	-2
 24637  002C2A  182A               	xorwf	??_printSortTimer,w,c
 24638  002C2C  6E8A               	movwf	3978,c	;volatile
 24639  002C2E  D016               	goto	i2l10455
 24640  002C30                     i2l942:
 24641                           
 24642                           ;sort.c: 594: else if(LATBbits.LATB0 == 1){
 24643  002C30  A08A               	btfss	3978,0,c	;volatile
 24644  002C32  D019               	goto	i2l10457
 24645                           
 24646                           ;sort.c: 595: agitator_toggle_count++;
 24647  002C34  4A61               	infsnz	_agitator_toggle_count,f,c
 24648  002C36  2A62               	incf	_agitator_toggle_count+1,f,c
 24649                           
 24650                           ;sort.c: 596: if(agitator_toggle_count == 4){
 24651  002C38  0E04               	movlw	4
 24652  002C3A  1861               	xorwf	_agitator_toggle_count,w,c
 24653  002C3C  1062               	iorwf	_agitator_toggle_count+1,w,c
 24654  002C3E  A4D8               	btfss	status,2,c
 24655  002C40  D006               	goto	i2l10451
 24656                           
 24657                           ;sort.c: 597: LATBbits.LATB0 = 0;
 24658  002C42  908A               	bcf	3978,0,c	;volatile
 24659                           
 24660                           ;sort.c: 598: time_recent_agitator = total_time;
 24661  002C44  C0FA  F14B         	movff	_total_time,_time_recent_agitator
 24662  002C48  C0FB  F14C         	movff	_total_time+1,_time_recent_agitator+1
 24663                           
 24664                           ;sort.c: 599: }
 24665  002C4C  D02D               	goto	i2l10467
 24666  002C4E                     i2l10451:
 24667                           
 24668                           ;sort.c: 600: else if(f_loadingNewCan){
 24669  002C4E  0100               	movlb	0	; () banked
 24670  002C50  51EE               	movf	_f_loadingNewCan& (0+255),w,b
 24671  002C52  0100               	movlb	0	; () banked
 24672  002C54  11EF               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
 24673  002C56  B4D8               	btfsc	status,2,c
 24674  002C58  D027               	goto	i2l10467
 24675                           
 24676                           ; BSR set to: 0
 24677                           ;sort.c: 601: LATBbits.LATB0 = 0;
 24678  002C5A  908A               	bcf	3978,0,c	;volatile
 24679  002C5C                     i2l10455:
 24680                           
 24681                           ; BSR set to: 0
 24682                           ;sort.c: 602: agitator_toggle_count = 0;
 24683  002C5C  0E00               	movlw	0
 24684  002C5E  6E62               	movwf	_agitator_toggle_count+1,c
 24685  002C60  0E00               	movlw	0
 24686  002C62  6E61               	movwf	_agitator_toggle_count,c
 24687                           
 24688                           ; BSR set to: 0
 24689                           ;sort.c: 603: }
 24690                           ;sort.c: 604: }
 24691                           
 24692                           ; BSR set to: 0
 24693  002C64  D021               	goto	i2l10467
 24694  002C66                     i2l10457:
 24695                           
 24696                           ;sort.c: 605: else if((total_time - time_recent_agitator == 10) && !f_loadingNewCan){
 24697  002C66  C14B  F02A         	movff	_time_recent_agitator,??_printSortTimer
 24698  002C6A  C14C  F02B         	movff	_time_recent_agitator+1,??_printSortTimer+1
 24699  002C6E  1E2A               	comf	??_printSortTimer,f,c
 24700  002C70  1E2B               	comf	??_printSortTimer+1,f,c
 24701  002C72  4A2A               	infsnz	??_printSortTimer,f,c
 24702  002C74  2A2B               	incf	??_printSortTimer+1,f,c
 24703  002C76  0100               	movlb	0	; () banked
 24704  002C78  51FA               	movf	_total_time& (0+255),w,b
 24705  002C7A  262A               	addwf	??_printSortTimer,f,c
 24706  002C7C  0100               	movlb	0	; () banked
 24707  002C7E  51FB               	movf	(_total_time+1)& (0+255),w,b
 24708  002C80  222B               	addwfc	??_printSortTimer+1,f,c
 24709  002C82  0E0A               	movlw	10
 24710  002C84  182A               	xorwf	??_printSortTimer,w,c
 24711  002C86  102B               	iorwf	??_printSortTimer+1,w,c
 24712  002C88  A4D8               	btfss	status,2,c
 24713  002C8A  D008               	goto	i2l10463
 24714                           
 24715                           ; BSR set to: 0
 24716  002C8C  0100               	movlb	0	; () banked
 24717  002C8E  51EE               	movf	_f_loadingNewCan& (0+255),w,b
 24718  002C90  0100               	movlb	0	; () banked
 24719  002C92  11EF               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
 24720  002C94  A4D8               	btfss	status,2,c
 24721  002C96  D002               	goto	i2l10463
 24722                           
 24723                           ; BSR set to: 0
 24724                           ;sort.c: 606: LATBbits.LATB0 = 1;
 24725  002C98  808A               	bsf	3978,0,c	;volatile
 24726                           
 24727                           ;sort.c: 607: }
 24728  002C9A  D006               	goto	i2l10467
 24729  002C9C                     i2l10463:
 24730                           
 24731                           ; BSR set to: 0
 24732                           ;sort.c: 608: else if(f_loadingNewCan){
 24733  002C9C  0100               	movlb	0	; () banked
 24734  002C9E  51EE               	movf	_f_loadingNewCan& (0+255),w,b
 24735  002CA0  0100               	movlb	0	; () banked
 24736  002CA2  11EF               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
 24737  002CA4  A4D8               	btfss	status,2,c
 24738  002CA6                     i2l10465:
 24739                           
 24740                           ; BSR set to: 0
 24741                           ;sort.c: 609: LATBbits.LATB0 = 0;
 24742  002CA6  908A               	bcf	3978,0,c	;volatile
 24743  002CA8                     i2l10467:
 24744                           
 24745                           ;sort.c: 610: }
 24746                           ;sort.c: 611: }
 24747                           ;sort.c: 613: if((total_time - most_recent_sort_time == 42) || (total_time == 179)){
 24748  002CA8  C147  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 24749  002CAC  C148  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 24750  002CB0  1E2A               	comf	??_printSortTimer,f,c
 24751  002CB2  1E2B               	comf	??_printSortTimer+1,f,c
 24752  002CB4  4A2A               	infsnz	??_printSortTimer,f,c
 24753  002CB6  2A2B               	incf	??_printSortTimer+1,f,c
 24754  002CB8  0100               	movlb	0	; () banked
 24755  002CBA  51FA               	movf	_total_time& (0+255),w,b
 24756  002CBC  262A               	addwf	??_printSortTimer,f,c
 24757  002CBE  0100               	movlb	0	; () banked
 24758  002CC0  51FB               	movf	(_total_time+1)& (0+255),w,b
 24759  002CC2  222B               	addwfc	??_printSortTimer+1,f,c
 24760  002CC4  0E2A               	movlw	42
 24761  002CC6  182A               	xorwf	??_printSortTimer,w,c
 24762  002CC8  102B               	iorwf	??_printSortTimer+1,w,c
 24763  002CCA  B4D8               	btfsc	status,2,c
 24764  002CCC  D007               	goto	i2l10471
 24765                           
 24766                           ; BSR set to: 0
 24767  002CCE  0EB3               	movlw	179
 24768  002CD0  0100               	movlb	0	; () banked
 24769  002CD2  19FA               	xorwf	_total_time& (0+255),w,b
 24770  002CD4  0100               	movlb	0	; () banked
 24771  002CD6  11FB               	iorwf	(_total_time+1)& (0+255),w,b
 24772  002CD8  A4D8               	btfss	status,2,c
 24773  002CDA  D003               	goto	i2l10473
 24774  002CDC                     i2l10471:
 24775                           
 24776                           ; BSR set to: 0
 24777                           ;sort.c: 614: machine_state = DoneSorting_state;
 24778  002CDC  0E02               	movlw	2
 24779  002CDE  0100               	movlb	0	; () banked
 24780  002CE0  6FFC               	movwf	_machine_state& (0+255),b
 24781  002CE2                     i2l10473:
 24782                           
 24783                           ; BSR set to: 0
 24784                           ;sort.c: 616: }
 24785                           ;sort.c: 618: int min = (timeDiff % 3600) / 60;
 24786  002CE2  0E0E               	movlw	14
 24787  002CE4  6E04               	movwf	i2___lwmod@divisor+1,c
 24788  002CE6  0E10               	movlw	16
 24789  002CE8  6E03               	movwf	i2___lwmod@divisor,c
 24790  002CEA  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 24791  002CEE  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 24792  002CF2  EC55  F02D         	call	i2___lwmod	;wreg free
 24793  002CF6  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 24794  002CFA  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 24795  002CFE  0E00               	movlw	0
 24796  002D00  6E09               	movwf	i2___lwdiv@divisor+1,c
 24797  002D02  0E3C               	movlw	60
 24798  002D04  6E08               	movwf	i2___lwdiv@divisor,c
 24799  002D06  EC74  F02C         	call	i2___lwdiv	;wreg free
 24800  002D0A  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 24801  002D0E  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 24802                           
 24803                           ;sort.c: 619: int sec = (timeDiff % 3600) % 60;
 24804  002D12  0E0E               	movlw	14
 24805  002D14  6E04               	movwf	i2___lwmod@divisor+1,c
 24806  002D16  0E10               	movlw	16
 24807  002D18  6E03               	movwf	i2___lwmod@divisor,c
 24808  002D1A  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 24809  002D1E  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 24810  002D22  EC55  F02D         	call	i2___lwmod	;wreg free
 24811  002D26  C001  F043         	movff	?i2___lwmod,_printSortTimer$2578
 24812  002D2A  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2578+1
 24813                           
 24814                           ;sort.c: 619: int sec = (timeDiff % 3600) % 60;
 24815  002D2E  C043  F001         	movff	_printSortTimer$2578,i2___lwmod@dividend
 24816  002D32  C044  F002         	movff	_printSortTimer$2578+1,i2___lwmod@dividend+1
 24817  002D36  0E00               	movlw	0
 24818  002D38  6E04               	movwf	i2___lwmod@divisor+1,c
 24819  002D3A  0E3C               	movlw	60
 24820  002D3C  6E03               	movwf	i2___lwmod@divisor,c
 24821  002D3E  EC55  F02D         	call	i2___lwmod	;wreg free
 24822  002D42  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 24823  002D46  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 24824                           
 24825                           ;sort.c: 621: lcdInst(0b10000000);;
 24826  002D4A  0E80               	movlw	128
 24827  002D4C  EC7B  F030         	call	i2_lcdInst
 24828                           
 24829                           ;sort.c: 622: printf("SORTING...     ");
 24830  002D50  0E59               	movlw	low STR_64
 24831  002D52  6E0D               	movwf	i2printf@f,c
 24832  002D54  0EFE               	movlw	high STR_64
 24833  002D56  6E0E               	movwf	i2printf@f+1,c
 24834  002D58  ECC0  F016         	call	i2_printf	;wreg free
 24835                           
 24836                           ;sort.c: 623: lcdInst(0b11000000);;
 24837  002D5C  0EC0               	movlw	192
 24838  002D5E  EC7B  F030         	call	i2_lcdInst
 24839                           
 24840                           ;sort.c: 624: printf("TIME %d:%02d   ", min, sec);
 24841  002D62  0E69               	movlw	low STR_65
 24842  002D64  6E0D               	movwf	i2printf@f,c
 24843  002D66  0EFE               	movlw	high STR_65
 24844  002D68  6E0E               	movwf	i2printf@f+1,c
 24845  002D6A  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 24846  002D6E  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 24847  002D72  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 24848  002D76  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 24849  002D7A  ECC0  F016         	call	i2_printf	;wreg free
 24850  002D7E  0012               	return		;funcret
 24851  002D80                     __end_of_printSortTimer:
 24852                           	opt stack 0
 24853                           pclatu	equ	0xFFB
 24854                           pclath	equ	0xFFA
 24855                           tblptru	equ	0xFF8
 24856                           tblptrh	equ	0xFF7
 24857                           tblptrl	equ	0xFF6
 24858                           tablat	equ	0xFF5
 24859                           prodh	equ	0xFF4
 24860                           prodl	equ	0xFF3
 24861                           intcon	equ	0xFF2
 24862                           intcon2	equ	0xFF1
 24863                           intcon3	equ	0xFF0
 24864                           indf0	equ	0xFEF
 24865                           postinc0	equ	0xFEE
 24866                           fsr0h	equ	0xFEA
 24867                           fsr0l	equ	0xFE9
 24868                           wreg	equ	0xFE8
 24869                           postdec1	equ	0xFE5
 24870                           fsr1h	equ	0xFE2
 24871                           fsr1l	equ	0xFE1
 24872                           indf2	equ	0xFDF
 24873                           postinc2	equ	0xFDE
 24874                           postdec2	equ	0xFDD
 24875                           fsr2h	equ	0xFDA
 24876                           fsr2l	equ	0xFD9
 24877                           status	equ	0xFD8
 24878                           
 24879 ;; *************** function i2_printf *****************
 24880 ;; Defined at:
 24881 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 24882 ;; Parameters:    Size  Location     Type
 24883 ;;  f               2   12[COMRAM] PTR const unsigned char 
 24884 ;;		 -> STR_128(18), STR_127(18), STR_126(17), STR_125(17), 
 24885 ;;		 -> STR_124(15), STR_123(15), STR_122(18), STR_121(15), 
 24886 ;;		 -> STR_120(18), STR_119(18), STR_118(17), STR_117(17), 
 24887 ;;		 -> STR_116(17), STR_115(17), STR_114(17), STR_113(17), 
 24888 ;;		 -> STR_112(18), STR_111(17), STR_110(15), STR_109(15), 
 24889 ;;		 -> STR_108(15), STR_107(17), STR_106(17), STR_105(17), 
 24890 ;;		 -> STR_104(16), STR_103(17), STR_102(17), STR_101(17), 
 24891 ;;		 -> STR_100(17), STR_99(17), STR_98(17), STR_97(15), 
 24892 ;;		 -> STR_96(11), STR_95(17), STR_94(11), STR_93(17), 
 24893 ;;		 -> STR_92(14), STR_91(15), STR_90(14), STR_89(10), 
 24894 ;;		 -> STR_88(9), STR_87(9), STR_86(10), STR_85(10), 
 24895 ;;		 -> STR_84(16), STR_83(15), STR_82(3), STR_81(18), 
 24896 ;;		 -> STR_80(3), STR_79(18), STR_78(14), STR_77(8), 
 24897 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 24898 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(17), 
 24899 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(16), 
 24900 ;;		 -> STR_64(16), STR_63(24), STR_50(17), STR_49(17), 
 24901 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 24902 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 24903 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 24904 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 24905 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 24906 ;;		 -> STR_28(17), STR_27(17), STR_26(17), STR_25(17), 
 24907 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 24908 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 24909 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 24910 ;; Auto vars:     Size  Location     Type
 24911 ;;  printf          4    0        struct .
 24912 ;;  printf          2   39[COMRAM] int 
 24913 ;;  printf          2   35[COMRAM] unsigned int 
 24914 ;;  printf          2   33[COMRAM] unsigned int 
 24915 ;;  printf          2   31[COMRAM] PTR void [1]
 24916 ;;		 -> ?i2_printf(2), ?_printf(2), 
 24917 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 24918 ;;		 -> STR_129(7), count_total(2), printRTC@month(4), UI@month(4), 
 24919 ;;  printf          1   38[COMRAM] char 
 24920 ;;  printf          1   37[COMRAM] unsigned char 
 24921 ;;  printf          1   28[COMRAM] char 
 24922 ;; Return value:  Size  Location     Type
 24923 ;;                  2   12[COMRAM] int 
 24924 ;; Registers used:
 24925 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24926 ;; Tracked objects:
 24927 ;;		On entry : 0/0
 24928 ;;		On exit  : 0/0
 24929 ;;		Unchanged: 0/0
 24930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24931 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24932 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24933 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24934 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24935 ;;Total ram usage:       29 bytes
 24936 ;; Hardware stack levels used:    1
 24937 ;; Hardware stack levels required when called:    2
 24938 ;; This function calls:
 24939 ;;		i2___lwdiv
 24940 ;;		i2___lwmod
 24941 ;;		i2___wmul
 24942 ;;		i2_isdigit
 24943 ;;		i2_putch
 24944 ;; This function is called by:
 24945 ;;		_change_state_to_menu_11
 24946 ;;		_change_state_to_menu_23
 24947 ;;		_change_state_to_logs_11
 24948 ;;		_change_state_to_logs_12
 24949 ;;		_change_state_to_logs_22
 24950 ;;		_change_state_to_logs_23
 24951 ;;		_change_state_to_logs_33
 24952 ;;		_change_state_to_logs_34
 24953 ;;		_printSortTimer
 24954 ;;		i2_change_state_to_menu_start
 24955 ;;		i2_change_state_to_menu_12
 24956 ;;		i2_change_state_to_menu_22
 24957 ;;		i2_printRTC
 24958 ;; This function uses a non-reentrant model
 24959 ;;
 24960                           
 24961                           	psect	text87
 24962  002D80                     __ptext87:
 24963                           	opt stack 0
 24964  002D80                     i2_printf:
 24965                           	opt stack 20
 24966                           
 24967                           ;doprnt.c: 466: va_list ap;
 24968                           ;doprnt.c: 499: signed char c;
 24969                           ;doprnt.c: 501: int width;
 24970                           ;doprnt.c: 506: signed char prec;
 24971                           ;doprnt.c: 508: unsigned char flag;
 24972                           ;doprnt.c: 523: union {
 24973                           ;doprnt.c: 524: unsigned long vd;
 24974                           ;doprnt.c: 525: double integ;
 24975                           ;doprnt.c: 526: } tmpval;
 24976                           ;doprnt.c: 528: unsigned int val;
 24977                           ;doprnt.c: 529: unsigned len;
 24978                           ;doprnt.c: 530: const char * cp;
 24979                           ;doprnt.c: 533: *ap = __va_start();
 24980                           
 24981                           ;incstack = 0
 24982  002D80  0E0F               	movlw	low (?i2_printf+2)
 24983  002D82  6E20               	movwf	i2printf@ap,c
 24984  002D84  0E00               	movlw	high (?i2_printf+2)
 24985  002D86  6E21               	movwf	i2printf@ap+1,c
 24986                           
 24987                           ;doprnt.c: 536: while(c = *f++) {
 24988  002D88  D1A4               	goto	i2l7401
 24989  002D8A                     i2l7271:
 24990                           
 24991                           ;doprnt.c: 538: if(c != '%')
 24992  002D8A  0E25               	movlw	37
 24993  002D8C  1827               	xorwf	i2printf@c,w,c
 24994  002D8E  B4D8               	btfsc	status,2,c
 24995  002D90  D004               	goto	i2l7275
 24996                           
 24997                           ;doprnt.c: 540: {
 24998                           ;doprnt.c: 541: (putch(c) );
 24999  002D92  5027               	movf	i2printf@c,w,c
 25000  002D94  EC75  F030         	call	i2_putch
 25001                           
 25002                           ;doprnt.c: 542: continue;
 25003  002D98  D19C               	goto	i2l7401
 25004  002D9A                     i2l7275:
 25005                           
 25006                           ;doprnt.c: 543: }
 25007                           ;doprnt.c: 546: width = 0;
 25008  002D9A  0E00               	movlw	0
 25009  002D9C  6E29               	movwf	i2printf@width+1,c
 25010  002D9E  0E00               	movlw	0
 25011  002DA0  6E28               	movwf	i2printf@width,c
 25012                           
 25013                           ;doprnt.c: 548: flag = 0;
 25014  002DA2  0E00               	movlw	0
 25015  002DA4  6E26               	movwf	i2printf@flag,c
 25016                           
 25017                           ;doprnt.c: 551: switch(*f) {
 25018                           
 25019                           ;doprnt.c: 550: for(;;) {
 25020  002DA6  D003               	goto	i2l7281
 25021  002DA8                     i2l7277:
 25022                           
 25023                           ;doprnt.c: 580: flag |= 0x04;
 25024  002DA8  8426               	bsf	i2printf@flag,2,c
 25025                           
 25026                           ;doprnt.c: 581: f++;
 25027  002DAA  4A0D               	infsnz	i2printf@f,f,c
 25028  002DAC  2A0E               	incf	i2printf@f+1,f,c
 25029  002DAE                     i2l7281:
 25030  002DAE  C00D  FFF6         	movff	i2printf@f,tblptrl
 25031  002DB2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 25032  002DB6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 25033  002DB6  6AF8               	clrf	tblptru,c
 25034  002DB8                     	endif
 25035  002DB8                     	if	0	;tblptru may be non-zero
 25036  002DB8                     	endif
 25037  002DB8  0008               	tblrd		*
 25038  002DBA  50F5               	movf	tablat,w,c
 25039                           
 25040                           ; Switch size 1, requested type "space"
 25041                           ; Number of cases is 1, Range of values is 48 to 48
 25042                           ; switch strategies available:
 25043                           ; Name         Instructions Cycles
 25044                           ; simple_byte            4     3 (average)
 25045                           ;	Chosen strategy is simple_byte
 25046  002DBC  0A30               	xorlw	48	; case 48
 25047  002DBE  B4D8               	btfsc	status,2,c
 25048  002DC0  D7F3               	goto	i2l7277
 25049                           
 25050                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 25051                           
 25052                           ;doprnt.c: 586: }
 25053                           
 25054                           ;doprnt.c: 585: break;
 25055  002DC2  C00D  FFF6         	movff	i2printf@f,tblptrl
 25056  002DC6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 25057  002DCA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 25058  002DCA  6AF8               	clrf	tblptru,c
 25059  002DCC                     	endif
 25060  002DCC                     	if	0	;tblptru may be non-zero
 25061  002DCC                     	endif
 25062  002DCC  0008               	tblrd		*
 25063  002DCE  50F5               	movf	tablat,w,c
 25064  002DD0  EC13  F030         	call	i2_isdigit
 25065  002DD4  A0D8               	btfss	status,0,c
 25066  002DD6  D0A6               	goto	i2l7329
 25067                           
 25068                           ;doprnt.c: 598: width = 0;
 25069  002DD8  0E00               	movlw	0
 25070  002DDA  6E29               	movwf	i2printf@width+1,c
 25071  002DDC  0E00               	movlw	0
 25072  002DDE  6E28               	movwf	i2printf@width,c
 25073  002DE0                     i2l7287:
 25074                           
 25075                           ;doprnt.c: 600: width *= 10;
 25076  002DE0  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 25077  002DE4  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 25078  002DE8  0E00               	movlw	0
 25079  002DEA  6E04               	movwf	i2___wmul@multiplicand+1,c
 25080  002DEC  0E0A               	movlw	10
 25081  002DEE  6E03               	movwf	i2___wmul@multiplicand,c
 25082  002DF0  ECB9  F02F         	call	i2___wmul	;wreg free
 25083  002DF4  C001  F028         	movff	?i2___wmul,i2printf@width
 25084  002DF8  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 25085                           
 25086                           ;doprnt.c: 601: width += *f++ - '0';
 25087  002DFC  0ED0               	movlw	208
 25088  002DFE  6E19               	movwf	??i2_printf& (0+255),c
 25089  002E00  0EFF               	movlw	255
 25090  002E02  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 25091  002E04  C00D  FFF6         	movff	i2printf@f,tblptrl
 25092  002E08  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 25093  002E0C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 25094  002E0C  6AF8               	clrf	tblptru,c
 25095  002E0E                     	endif
 25096  002E0E                     	if	0	;tblptru may be non-zero
 25097  002E0E                     	endif
 25098  002E0E  0008               	tblrd		*
 25099  002E10  50F5               	movf	tablat,w,c
 25100  002E12  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 25101  002E14  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 25102  002E16  5019               	movf	??i2_printf,w,c
 25103  002E18  261B               	addwf	??i2_printf+2,f,c
 25104  002E1A  501A               	movf	??i2_printf+1,w,c
 25105  002E1C  221C               	addwfc	??i2_printf+3,f,c
 25106  002E1E  501B               	movf	??i2_printf+2,w,c
 25107  002E20  2628               	addwf	i2printf@width,f,c
 25108  002E22  501C               	movf	??i2_printf+3,w,c
 25109  002E24  2229               	addwfc	i2printf@width+1,f,c
 25110  002E26  4A0D               	infsnz	i2printf@f,f,c
 25111  002E28  2A0E               	incf	i2printf@f+1,f,c
 25112                           
 25113                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 25114  002E2A  C00D  FFF6         	movff	i2printf@f,tblptrl
 25115  002E2E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 25116  002E32                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 25117  002E32  6AF8               	clrf	tblptru,c
 25118  002E34                     	endif
 25119  002E34                     	if	0	;tblptru may be non-zero
 25120  002E34                     	endif
 25121  002E34  0008               	tblrd		*
 25122  002E36  50F5               	movf	tablat,w,c
 25123  002E38  EC13  F030         	call	i2_isdigit
 25124  002E3C  A0D8               	btfss	status,0,c
 25125  002E3E  D072               	goto	i2l7329
 25126  002E40  D7CF               	goto	i2l7287
 25127  002E42                     i2l7295:
 25128                           
 25129                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 25130  002E42  C020  FFD9         	movff	i2printf@ap,fsr2l
 25131  002E46  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 25132  002E4A  CFDE F01E          	movff	postinc2,i2printf@cp
 25133  002E4E  CFDD F01F          	movff	postdec2,i2printf@cp+1
 25134  002E52  0E02               	movlw	2
 25135  002E54  2620               	addwf	i2printf@ap,f,c
 25136  002E56  0E00               	movlw	0
 25137  002E58  2221               	addwfc	i2printf@ap+1,f,c
 25138                           
 25139                           ;doprnt.c: 740: if(!cp)
 25140  002E5A  501E               	movf	i2printf@cp,w,c
 25141  002E5C  101F               	iorwf	i2printf@cp+1,w,c
 25142  002E5E  A4D8               	btfss	status,2,c
 25143  002E60  D004               	goto	i2l7303
 25144                           
 25145                           ;doprnt.c: 741: cp = "(null)";
 25146  002E62  0EB5               	movlw	low STR_129
 25147  002E64  6E1E               	movwf	i2printf@cp,c
 25148  002E66  0EFF               	movlw	high STR_129
 25149  002E68  6E1F               	movwf	i2printf@cp+1,c
 25150  002E6A                     i2l7303:
 25151                           
 25152                           ;doprnt.c: 745: len = 0;
 25153  002E6A  0E00               	movlw	0
 25154  002E6C  6E23               	movwf	i2printf@len+1,c
 25155  002E6E  0E00               	movlw	0
 25156  002E70  6E22               	movwf	i2printf@len,c
 25157                           
 25158                           ;doprnt.c: 746: while(cp[len])
 25159  002E72  D002               	goto	i2l7307
 25160  002E74                     i2l7305:
 25161                           
 25162                           ;doprnt.c: 747: len++;
 25163  002E74  4A22               	infsnz	i2printf@len,f,c
 25164  002E76  2A23               	incf	i2printf@len+1,f,c
 25165  002E78                     i2l7307:
 25166  002E78  5022               	movf	i2printf@len,w,c
 25167  002E7A  241E               	addwf	i2printf@cp,w,c
 25168  002E7C  6E19               	movwf	??i2_printf& (0+255),c
 25169  002E7E  5023               	movf	i2printf@len+1,w,c
 25170  002E80  201F               	addwfc	i2printf@cp+1,w,c
 25171  002E82  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 25172  002E84  C019  FFF6         	movff	??i2_printf,tblptrl
 25173  002E88  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 25174  002E8C  0E00               	movlw	low (__mediumconst shr (0+16))
 25175  002E8E  6EF8               	movwf	tblptru,c
 25176  002E90  0E0F               	movlw	(high __ramtop+-1)
 25177  002E92  64F7               	cpfsgt	tblptrh,c
 25178  002E94  D003               	bra	i2u623_47
 25179  002E96  0008               	tblrd		*
 25180  002E98  50F5               	movf	tablat,w,c
 25181  002E9A  D005               	bra	i2u623_40
 25182  002E9C                     i2u623_47:
 25183  002E9C  CFF6 FFE9          	movff	tblptrl,fsr0l
 25184  002EA0  CFF7 FFEA          	movff	tblptrh,fsr0h
 25185  002EA4  50EF               	movf	indf0,w,c
 25186  002EA6                     i2u623_40:
 25187  002EA6  0900               	iorlw	0
 25188  002EA8  A4D8               	btfss	status,2,c
 25189  002EAA  D7E4               	goto	i2l7305
 25190                           
 25191                           ;doprnt.c: 757: if(width > len)
 25192  002EAC  5028               	movf	i2printf@width,w,c
 25193  002EAE  5C22               	subwf	i2printf@len,w,c
 25194  002EB0  5029               	movf	i2printf@width+1,w,c
 25195  002EB2  5823               	subwfb	i2printf@len+1,w,c
 25196  002EB4  B0D8               	btfsc	status,0,c
 25197  002EB6  D005               	goto	i2l7313
 25198                           
 25199                           ;doprnt.c: 758: width -= len;
 25200  002EB8  5022               	movf	i2printf@len,w,c
 25201  002EBA  5E28               	subwf	i2printf@width,f,c
 25202  002EBC  5023               	movf	i2printf@len+1,w,c
 25203  002EBE  5A29               	subwfb	i2printf@width+1,f,c
 25204  002EC0  D008               	goto	i2l7317
 25205  002EC2                     i2l7313:
 25206                           
 25207                           ;doprnt.c: 759: else
 25208                           ;doprnt.c: 760: width = 0;
 25209  002EC2  0E00               	movlw	0
 25210  002EC4  6E29               	movwf	i2printf@width+1,c
 25211  002EC6  0E00               	movlw	0
 25212  002EC8  6E28               	movwf	i2printf@width,c
 25213                           
 25214                           ;doprnt.c: 764: while(width--)
 25215  002ECA  D003               	goto	i2l7317
 25216  002ECC                     i2l7315:
 25217                           
 25218                           ;doprnt.c: 765: (putch(' ') );
 25219  002ECC  0E20               	movlw	32
 25220  002ECE  EC75  F030         	call	i2_putch
 25221  002ED2                     i2l7317:
 25222  002ED2  0628               	decf	i2printf@width,f,c
 25223  002ED4  A0D8               	btfss	status,0,c
 25224  002ED6  0629               	decf	i2printf@width+1,f,c
 25225  002ED8  2828               	incf	i2printf@width,w,c
 25226  002EDA  E1F8               	bnz	i2l7315
 25227  002EDC  2829               	incf	i2printf@width+1,w,c
 25228  002EDE  B4D8               	btfsc	status,2,c
 25229  002EE0  D016               	goto	i2l7323
 25230  002EE2  D7F4               	goto	i2l7315
 25231  002EE4                     i2l7319:
 25232                           
 25233                           ;doprnt.c: 768: (putch(*cp++) );
 25234  002EE4  C01E  FFF6         	movff	i2printf@cp,tblptrl
 25235  002EE8  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 25236  002EEC  0E00               	movlw	low (__mediumconst shr (0+16))
 25237  002EEE  6EF8               	movwf	tblptru,c
 25238  002EF0  0E0F               	movlw	(high __ramtop+-1)
 25239  002EF2  64F7               	cpfsgt	tblptrh,c
 25240  002EF4  D003               	bra	i2u627_47
 25241  002EF6  0008               	tblrd		*
 25242  002EF8  50F5               	movf	tablat,w,c
 25243  002EFA  D005               	bra	i2u627_40
 25244  002EFC                     i2u627_47:
 25245  002EFC  CFF6 FFE9          	movff	tblptrl,fsr0l
 25246  002F00  CFF7 FFEA          	movff	tblptrh,fsr0h
 25247  002F04  50EF               	movf	indf0,w,c
 25248  002F06                     i2u627_40:
 25249  002F06  EC75  F030         	call	i2_putch
 25250  002F0A  4A1E               	infsnz	i2printf@cp,f,c
 25251  002F0C  2A1F               	incf	i2printf@cp+1,f,c
 25252  002F0E                     i2l7323:
 25253  002F0E  0622               	decf	i2printf@len,f,c
 25254  002F10  A0D8               	btfss	status,0,c
 25255  002F12  0623               	decf	i2printf@len+1,f,c
 25256  002F14  2822               	incf	i2printf@len,w,c
 25257  002F16  E1E6               	bnz	i2l7319
 25258  002F18  2823               	incf	i2printf@len+1,w,c
 25259  002F1A  B4D8               	btfsc	status,2,c
 25260  002F1C  D0DA               	goto	i2l7401
 25261  002F1E  D7E2               	goto	i2l7319
 25262  002F20                     i2l7325:
 25263                           
 25264                           ;doprnt.c: 818: flag |= 0x40;
 25265  002F20  8C26               	bsf	i2printf@flag,6,c
 25266                           
 25267                           ;doprnt.c: 822: }
 25268                           
 25269                           ;doprnt.c: 819: break;
 25270  002F22  D01B               	goto	i2l1591
 25271  002F24                     i2l7329:
 25272  002F24  C00D  FFF6         	movff	i2printf@f,tblptrl
 25273  002F28  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 25274  002F2C  4A0D               	infsnz	i2printf@f,f,c
 25275  002F2E  2A0E               	incf	i2printf@f+1,f,c
 25276  002F30                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 25277  002F30  6AF8               	clrf	tblptru,c
 25278  002F32                     	endif
 25279  002F32                     	if	0	;tblptru may be non-zero
 25280  002F32                     	endif
 25281  002F32  0008               	tblrd		*
 25282  002F34  CFF5 F027          	movff	tablat,i2printf@c
 25283  002F38  5027               	movf	i2printf@c,w,c
 25284                           
 25285                           ; Switch size 1, requested type "space"
 25286                           ; Number of cases is 5, Range of values is 0 to 117
 25287                           ; switch strategies available:
 25288                           ; Name         Instructions Cycles
 25289                           ; simple_byte           16     9 (average)
 25290                           ;	Chosen strategy is simple_byte
 25291  002F3A  0A00               	xorlw	0	; case 0
 25292  002F3C  B4D8               	btfsc	status,2,c
 25293  002F3E  0012               	return	
 25294  002F40  0A64               	xorlw	100	; case 100
 25295  002F42  B4D8               	btfsc	status,2,c
 25296  002F44  D00A               	goto	i2l1591
 25297  002F46  0A0D               	xorlw	13	; case 105
 25298  002F48  B4D8               	btfsc	status,2,c
 25299  002F4A  D007               	goto	i2l1591
 25300  002F4C  0A1A               	xorlw	26	; case 115
 25301  002F4E  B4D8               	btfsc	status,2,c
 25302  002F50  D778               	goto	i2l7295
 25303  002F52  0A06               	xorlw	6	; case 117
 25304  002F54  B4D8               	btfsc	status,2,c
 25305  002F56  D7E4               	goto	i2l7325
 25306  002F58  D0BC               	goto	i2l7401
 25307  002F5A                     i2l1591:
 25308                           
 25309                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 25310  002F5A  BC26               	btfsc	i2printf@flag,6,c
 25311  002F5C  D015               	goto	i2l7341
 25312                           
 25313                           ;doprnt.c: 1253: {
 25314                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 25315  002F5E  C020  FFD9         	movff	i2printf@ap,fsr2l
 25316  002F62  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 25317  002F66  CFDE F024          	movff	postinc2,i2printf@val
 25318  002F6A  CFDD F025          	movff	postdec2,i2printf@val+1
 25319  002F6E  0E02               	movlw	2
 25320  002F70  2620               	addwf	i2printf@ap,f,c
 25321  002F72  0E00               	movlw	0
 25322  002F74  2221               	addwfc	i2printf@ap+1,f,c
 25323                           
 25324                           ;doprnt.c: 1261: if((int)val < 0) {
 25325  002F76  AE25               	btfss	i2printf@val+1,7,c
 25326  002F78  D013               	goto	i2l7345
 25327                           
 25328                           ;doprnt.c: 1262: flag |= 0x03;
 25329  002F7A  0E03               	movlw	3
 25330  002F7C  1226               	iorwf	i2printf@flag,f,c
 25331                           
 25332                           ;doprnt.c: 1263: val = -val;
 25333  002F7E  6C24               	negf	i2printf@val,c
 25334  002F80  1E25               	comf	i2printf@val+1,f,c
 25335  002F82  B0D8               	btfsc	status,0,c
 25336  002F84  2A25               	incf	i2printf@val+1,f,c
 25337                           
 25338                           ;doprnt.c: 1264: }
 25339                           ;doprnt.c: 1266: }
 25340  002F86  D00C               	goto	i2l7345
 25341  002F88                     i2l7341:
 25342                           
 25343                           ;doprnt.c: 1268: else
 25344                           ;doprnt.c: 1273: {
 25345                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 25346  002F88  C020  FFD9         	movff	i2printf@ap,fsr2l
 25347  002F8C  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 25348  002F90  CFDE F024          	movff	postinc2,i2printf@val
 25349  002F94  CFDD F025          	movff	postdec2,i2printf@val+1
 25350  002F98  0E02               	movlw	2
 25351  002F9A  2620               	addwf	i2printf@ap,f,c
 25352  002F9C  0E00               	movlw	0
 25353  002F9E  2221               	addwfc	i2printf@ap+1,f,c
 25354  002FA0                     i2l7345:
 25355                           
 25356                           ;doprnt.c: 1287: }
 25357                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 25358  002FA0  0E01               	movlw	1
 25359  002FA2  6E27               	movwf	i2printf@c,c
 25360  002FA4                     i2l7347:
 25361  002FA4  0E05               	movlw	5
 25362  002FA6  1827               	xorwf	i2printf@c,w,c
 25363  002FA8  B4D8               	btfsc	status,2,c
 25364  002FAA  D015               	goto	i2l7359
 25365                           
 25366                           ;doprnt.c: 1306: if(val < dpowers[c])
 25367  002FAC  5027               	movf	i2printf@c,w,c
 25368  002FAE  0D02               	mullw	2
 25369  002FB0  0EB8               	movlw	low _dpowers
 25370  002FB2  24F3               	addwf	prodl,w,c
 25371  002FB4  6EF6               	movwf	tblptrl,c
 25372  002FB6  0EFA               	movlw	high _dpowers
 25373  002FB8  20F4               	addwfc	prodh,w,c
 25374  002FBA  6EF7               	movwf	tblptrh,c
 25375  002FBC                     	if	1	;There are 3 active tblptr bytes
 25376  002FBC  6AF8               	clrf	tblptru,c
 25377  002FBE  0E00               	movlw	low (__mediumconst shr (0+16))
 25378  002FC0  22F8               	addwfc	tblptru,f,c
 25379  002FC2                     	endif
 25380  002FC2  0009               	tblrd		*+
 25381  002FC4  50F5               	movf	tablat,w,c
 25382  002FC6  5C24               	subwf	i2printf@val,w,c
 25383  002FC8  0009               	tblrd		*+
 25384  002FCA  50F5               	movf	tablat,w,c
 25385  002FCC  5825               	subwfb	i2printf@val+1,w,c
 25386  002FCE  A0D8               	btfss	status,0,c
 25387  002FD0  D002               	goto	i2l7359
 25388                           
 25389                           ;doprnt.c: 1307: break;
 25390  002FD2  2A27               	incf	i2printf@c,f,c
 25391  002FD4  D7E7               	goto	i2l7347
 25392  002FD6                     i2l7359:
 25393                           
 25394                           ;doprnt.c: 1345: if(width && flag & 0x03)
 25395  002FD6  5028               	movf	i2printf@width,w,c
 25396  002FD8  1029               	iorwf	i2printf@width+1,w,c
 25397  002FDA  B4D8               	btfsc	status,2,c
 25398  002FDC  D009               	goto	i2l7365
 25399  002FDE  C026  F019         	movff	i2printf@flag,??i2_printf
 25400  002FE2  0E03               	movlw	3
 25401  002FE4  1619               	andwf	??i2_printf,f,c
 25402  002FE6  B4D8               	btfsc	status,2,c
 25403  002FE8  D003               	goto	i2l7365
 25404                           
 25405                           ;doprnt.c: 1346: width--;
 25406  002FEA  0628               	decf	i2printf@width,f,c
 25407  002FEC  A0D8               	btfss	status,0,c
 25408  002FEE  0629               	decf	i2printf@width+1,f,c
 25409  002FF0                     i2l7365:
 25410                           
 25411                           ;doprnt.c: 1381: if(width > c)
 25412  002FF0  0E80               	movlw	128
 25413  002FF2  BE27               	btfsc	i2printf@c,7,c
 25414  002FF4  0E7F               	movlw	127
 25415  002FF6  6E19               	movwf	??i2_printf& (0+255),c
 25416  002FF8  5028               	movf	i2printf@width,w,c
 25417  002FFA  5C27               	subwf	i2printf@c,w,c
 25418  002FFC  5029               	movf	i2printf@width+1,w,c
 25419  002FFE  0A80               	xorlw	128
 25420  003000  5819               	subwfb	??i2_printf& (0+255),w,c
 25421  003002  B0D8               	btfsc	status,0,c
 25422  003004  D007               	goto	i2l7369
 25423                           
 25424                           ;doprnt.c: 1382: width -= c;
 25425  003006  5027               	movf	i2printf@c,w,c
 25426  003008  5E28               	subwf	i2printf@width,f,c
 25427  00300A  0E00               	movlw	0
 25428  00300C  BE27               	btfsc	i2printf@c,7,c
 25429  00300E  0EFF               	movlw	255
 25430  003010  5A29               	subwfb	i2printf@width+1,f,c
 25431  003012  D004               	goto	i2l7371
 25432  003014                     i2l7369:
 25433                           
 25434                           ;doprnt.c: 1383: else
 25435                           ;doprnt.c: 1384: width = 0;
 25436  003014  0E00               	movlw	0
 25437  003016  6E29               	movwf	i2printf@width+1,c
 25438  003018  0E00               	movlw	0
 25439  00301A  6E28               	movwf	i2printf@width,c
 25440  00301C                     i2l7371:
 25441                           
 25442                           ;doprnt.c: 1387: if(flag & 0x04) {
 25443  00301C  A426               	btfss	i2printf@flag,2,c
 25444  00301E  D014               	goto	i2l7383
 25445                           
 25446                           ;doprnt.c: 1392: if(flag & 0x03)
 25447  003020  C026  F019         	movff	i2printf@flag,??i2_printf
 25448  003024  0E03               	movlw	3
 25449  003026  1619               	andwf	??i2_printf,f,c
 25450  003028  B4D8               	btfsc	status,2,c
 25451  00302A  D003               	goto	i2l7377
 25452                           
 25453                           ;doprnt.c: 1393: (putch('-') );
 25454  00302C  0E2D               	movlw	45
 25455  00302E  EC75  F030         	call	i2_putch
 25456  003032                     i2l7377:
 25457                           
 25458                           ;doprnt.c: 1415: if(width)
 25459  003032  5028               	movf	i2printf@width,w,c
 25460  003034  1029               	iorwf	i2printf@width+1,w,c
 25461  003036  B4D8               	btfsc	status,2,c
 25462  003038  D01E               	goto	i2l7393
 25463                           
 25464                           ;doprnt.c: 1417: (putch('0') );
 25465                           
 25466                           ;doprnt.c: 1416: do
 25467  00303A  0E30               	movlw	48
 25468  00303C  EC75  F030         	call	i2_putch
 25469                           
 25470                           ;doprnt.c: 1418: while(--width);
 25471  003040  0628               	decf	i2printf@width,f,c
 25472  003042  A0D8               	btfss	status,0,c
 25473  003044  0629               	decf	i2printf@width+1,f,c
 25474  003046  D7F5               	goto	i2l7377
 25475  003048                     i2l7383:
 25476                           
 25477                           ;doprnt.c: 1422: {
 25478                           ;doprnt.c: 1424: if(width
 25479                           ;doprnt.c: 1428: )
 25480  003048  5028               	movf	i2printf@width,w,c
 25481  00304A  1029               	iorwf	i2printf@width+1,w,c
 25482  00304C  B4D8               	btfsc	status,2,c
 25483  00304E  D00A               	goto	i2l7389
 25484  003050                     i2l7385:
 25485                           
 25486                           ;doprnt.c: 1430: (putch(' ') );
 25487  003050  0E20               	movlw	32
 25488  003052  EC75  F030         	call	i2_putch
 25489                           
 25490                           ;doprnt.c: 1431: while(--width);
 25491  003056  0628               	decf	i2printf@width,f,c
 25492  003058  A0D8               	btfss	status,0,c
 25493  00305A  0629               	decf	i2printf@width+1,f,c
 25494  00305C  5028               	movf	i2printf@width,w,c
 25495  00305E  1029               	iorwf	i2printf@width+1,w,c
 25496  003060  A4D8               	btfss	status,2,c
 25497  003062  D7F6               	goto	i2l7385
 25498  003064                     i2l7389:
 25499                           
 25500                           ;doprnt.c: 1438: if(flag & 0x03)
 25501  003064  C026  F019         	movff	i2printf@flag,??i2_printf
 25502  003068  0E03               	movlw	3
 25503  00306A  1619               	andwf	??i2_printf,f,c
 25504  00306C  B4D8               	btfsc	status,2,c
 25505  00306E  D003               	goto	i2l7393
 25506                           
 25507                           ;doprnt.c: 1439: (putch('-') );
 25508  003070  0E2D               	movlw	45
 25509  003072  EC75  F030         	call	i2_putch
 25510  003076                     i2l7393:
 25511                           
 25512                           ;doprnt.c: 1469: }
 25513                           ;doprnt.c: 1472: prec = c;
 25514  003076  C027  F01D         	movff	i2printf@c,i2printf@prec
 25515                           
 25516                           ;doprnt.c: 1474: while(prec--) {
 25517  00307A  D027               	goto	i2l7399
 25518  00307C                     i2l7395:
 25519                           
 25520                           ;doprnt.c: 1478: {
 25521                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 25522  00307C  501D               	movf	i2printf@prec,w,c
 25523  00307E  0D02               	mullw	2
 25524  003080  0EB8               	movlw	low _dpowers
 25525  003082  24F3               	addwf	prodl,w,c
 25526  003084  6EF6               	movwf	tblptrl,c
 25527  003086  0EFA               	movlw	high _dpowers
 25528  003088  20F4               	addwfc	prodh,w,c
 25529  00308A  6EF7               	movwf	tblptrh,c
 25530  00308C                     	if	1	;There are 3 active tblptr bytes
 25531  00308C  6AF8               	clrf	tblptru,c
 25532  00308E  0E00               	movlw	low (__mediumconst shr (0+16))
 25533  003090  22F8               	addwfc	tblptru,f,c
 25534  003092                     	endif
 25535  003092  0009               	tblrd		*+
 25536  003094  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 25537  003098  000A               	tblrd		*-
 25538  00309A  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 25539  00309E  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 25540  0030A2  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 25541  0030A6  EC74  F02C         	call	i2___lwdiv	;wreg free
 25542  0030AA  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 25543  0030AE  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 25544  0030B2  0E00               	movlw	0
 25545  0030B4  6E04               	movwf	i2___lwmod@divisor+1,c
 25546  0030B6  0E0A               	movlw	10
 25547  0030B8  6E03               	movwf	i2___lwmod@divisor,c
 25548  0030BA  EC55  F02D         	call	i2___lwmod	;wreg free
 25549  0030BE  5001               	movf	?i2___lwmod,w,c
 25550  0030C0  0F30               	addlw	48
 25551  0030C2  6E27               	movwf	i2printf@c,c
 25552                           
 25553                           ;doprnt.c: 1523: }
 25554                           ;doprnt.c: 1524: (putch(c) );
 25555  0030C4  5027               	movf	i2printf@c,w,c
 25556  0030C6  EC75  F030         	call	i2_putch
 25557  0030CA                     i2l7399:
 25558  0030CA  061D               	decf	i2printf@prec,f,c
 25559  0030CC  281D               	incf	i2printf@prec,w,c
 25560  0030CE  A4D8               	btfss	status,2,c
 25561  0030D0  D7D5               	goto	i2l7395
 25562  0030D2                     i2l7401:
 25563  0030D2  C00D  FFF6         	movff	i2printf@f,tblptrl
 25564  0030D6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 25565  0030DA  4A0D               	infsnz	i2printf@f,f,c
 25566  0030DC  2A0E               	incf	i2printf@f+1,f,c
 25567  0030DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 25568  0030DE  6AF8               	clrf	tblptru,c
 25569  0030E0                     	endif
 25570  0030E0                     	if	0	;tblptru may be non-zero
 25571  0030E0                     	endif
 25572  0030E0  0008               	tblrd		*
 25573  0030E2  CFF5 F027          	movff	tablat,i2printf@c
 25574  0030E6  5027               	movf	i2printf@c,w,c
 25575  0030E8  B4D8               	btfsc	status,2,c
 25576  0030EA  0012               	return	
 25577  0030EC  D64E               	goto	i2l7271
 25578  0030EE                     __end_ofi2_printf:
 25579                           	opt stack 0
 25580                           pclatu	equ	0xFFB
 25581                           pclath	equ	0xFFA
 25582                           tblptru	equ	0xFF8
 25583                           tblptrh	equ	0xFF7
 25584                           tblptrl	equ	0xFF6
 25585                           tablat	equ	0xFF5
 25586                           prodh	equ	0xFF4
 25587                           prodl	equ	0xFF3
 25588                           intcon	equ	0xFF2
 25589                           intcon2	equ	0xFF1
 25590                           intcon3	equ	0xFF0
 25591                           indf0	equ	0xFEF
 25592                           postinc0	equ	0xFEE
 25593                           fsr0h	equ	0xFEA
 25594                           fsr0l	equ	0xFE9
 25595                           wreg	equ	0xFE8
 25596                           postdec1	equ	0xFE5
 25597                           fsr1h	equ	0xFE2
 25598                           fsr1l	equ	0xFE1
 25599                           indf2	equ	0xFDF
 25600                           postinc2	equ	0xFDE
 25601                           postdec2	equ	0xFDD
 25602                           fsr2h	equ	0xFDA
 25603                           fsr2l	equ	0xFD9
 25604                           status	equ	0xFD8
 25605                           
 25606 ;; *************** function i2_putch *****************
 25607 ;; Defined at:
 25608 ;;		line 20 in file "lcd.c"
 25609 ;; Parameters:    Size  Location     Type
 25610 ;;  data            1    wreg     unsigned char 
 25611 ;; Auto vars:     Size  Location     Type
 25612 ;;  data            1    2[COMRAM] unsigned char 
 25613 ;; Return value:  Size  Location     Type
 25614 ;;                  1    wreg      void 
 25615 ;; Registers used:
 25616 ;;		wreg, status,2, status,0, cstack
 25617 ;; Tracked objects:
 25618 ;;		On entry : 0/0
 25619 ;;		On exit  : 0/0
 25620 ;;		Unchanged: 0/0
 25621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25623 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25625 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25626 ;;Total ram usage:        1 bytes
 25627 ;; Hardware stack levels used:    1
 25628 ;; Hardware stack levels required when called:    1
 25629 ;; This function calls:
 25630 ;;		i2_lcdNibble
 25631 ;; This function is called by:
 25632 ;;		i2_printf
 25633 ;; This function uses a non-reentrant model
 25634 ;;
 25635                           
 25636                           	psect	text88
 25637  0060EA                     __ptext88:
 25638                           	opt stack 0
 25639  0060EA                     i2_putch:
 25640                           	opt stack 20
 25641                           
 25642                           ;incstack = 0
 25643                           ;i2putch@data stored from wreg
 25644  0060EA  6E03               	movwf	i2putch@data,c
 25645                           
 25646                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 25647  0060EC  848C               	bsf	3980,2,c	;volatile
 25648                           
 25649                           ;lcd.c: 22: lcdNibble(data);
 25650  0060EE  5003               	movf	i2putch@data,w,c
 25651  0060F0  EC47  F02C         	call	i2_lcdNibble
 25652  0060F4  0012               	return		;funcret
 25653  0060F6                     __end_ofi2_putch:
 25654                           	opt stack 0
 25655                           pclatu	equ	0xFFB
 25656                           pclath	equ	0xFFA
 25657                           tblptru	equ	0xFF8
 25658                           tblptrh	equ	0xFF7
 25659                           tblptrl	equ	0xFF6
 25660                           tablat	equ	0xFF5
 25661                           prodh	equ	0xFF4
 25662                           prodl	equ	0xFF3
 25663                           intcon	equ	0xFF2
 25664                           intcon2	equ	0xFF1
 25665                           intcon3	equ	0xFF0
 25666                           indf0	equ	0xFEF
 25667                           postinc0	equ	0xFEE
 25668                           fsr0h	equ	0xFEA
 25669                           fsr0l	equ	0xFE9
 25670                           wreg	equ	0xFE8
 25671                           postdec1	equ	0xFE5
 25672                           fsr1h	equ	0xFE2
 25673                           fsr1l	equ	0xFE1
 25674                           indf2	equ	0xFDF
 25675                           postinc2	equ	0xFDE
 25676                           postdec2	equ	0xFDD
 25677                           fsr2h	equ	0xFDA
 25678                           fsr2l	equ	0xFD9
 25679                           status	equ	0xFD8
 25680                           
 25681 ;; *************** function i2_isdigit *****************
 25682 ;; Defined at:
 25683 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 25684 ;; Parameters:    Size  Location     Type
 25685 ;;  c               1    wreg     unsigned char 
 25686 ;; Auto vars:     Size  Location     Type
 25687 ;;  c               1    2[COMRAM] unsigned char 
 25688 ;; Return value:  Size  Location     Type
 25689 ;;		None               void
 25690 ;; Registers used:
 25691 ;;		wreg, status,2, status,0
 25692 ;; Tracked objects:
 25693 ;;		On entry : 0/0
 25694 ;;		On exit  : 0/0
 25695 ;;		Unchanged: 0/0
 25696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25698 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25699 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25700 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25701 ;;Total ram usage:        3 bytes
 25702 ;; Hardware stack levels used:    1
 25703 ;; This function calls:
 25704 ;;		Nothing
 25705 ;; This function is called by:
 25706 ;;		i2_printf
 25707 ;; This function uses a non-reentrant model
 25708 ;;
 25709                           
 25710                           	psect	text89
 25711  006026                     __ptext89:
 25712                           	opt stack 0
 25713  006026                     i2_isdigit:
 25714                           	opt stack 21
 25715                           
 25716                           ;incstack = 0
 25717                           ;i2isdigit@c stored from wreg
 25718  006026  6E03               	movwf	i2isdigit@c,c
 25719  006028  0E00               	movlw	0
 25720  00602A  6E02               	movwf	i2_isdigit$2081,c
 25721  00602C  0E3A               	movlw	58
 25722  00602E  6003               	cpfslt	i2isdigit@c,c
 25723  006030  D005               	goto	i2l6925
 25724  006032  0E2F               	movlw	47
 25725  006034  6403               	cpfsgt	i2isdigit@c,c
 25726  006036  D002               	goto	i2l6925
 25727  006038  0E01               	movlw	1
 25728  00603A  6E02               	movwf	i2_isdigit$2081,c
 25729  00603C                     i2l6925:
 25730  00603C  C002  F001         	movff	i2_isdigit$2081,??i2_isdigit
 25731  006040  3001               	rrcf	??i2_isdigit,w,c
 25732  006042  0012               	return	
 25733  006044                     __end_ofi2_isdigit:
 25734                           	opt stack 0
 25735                           pclatu	equ	0xFFB
 25736                           pclath	equ	0xFFA
 25737                           tblptru	equ	0xFF8
 25738                           tblptrh	equ	0xFF7
 25739                           tblptrl	equ	0xFF6
 25740                           tablat	equ	0xFF5
 25741                           prodh	equ	0xFF4
 25742                           prodl	equ	0xFF3
 25743                           intcon	equ	0xFF2
 25744                           intcon2	equ	0xFF1
 25745                           intcon3	equ	0xFF0
 25746                           indf0	equ	0xFEF
 25747                           postinc0	equ	0xFEE
 25748                           fsr0h	equ	0xFEA
 25749                           fsr0l	equ	0xFE9
 25750                           wreg	equ	0xFE8
 25751                           postdec1	equ	0xFE5
 25752                           fsr1h	equ	0xFE2
 25753                           fsr1l	equ	0xFE1
 25754                           indf2	equ	0xFDF
 25755                           postinc2	equ	0xFDE
 25756                           postdec2	equ	0xFDD
 25757                           fsr2h	equ	0xFDA
 25758                           fsr2l	equ	0xFD9
 25759                           status	equ	0xFD8
 25760                           
 25761 ;; *************** function i2___wmul *****************
 25762 ;; Defined at:
 25763 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 25764 ;; Parameters:    Size  Location     Type
 25765 ;;  multiplier      2    0[COMRAM] unsigned int 
 25766 ;;  multiplicand    2    2[COMRAM] unsigned int 
 25767 ;; Auto vars:     Size  Location     Type
 25768 ;;  __wmul          2    4[COMRAM] unsigned int 
 25769 ;; Return value:  Size  Location     Type
 25770 ;;                  2    0[COMRAM] unsigned int 
 25771 ;; Registers used:
 25772 ;;		wreg, status,2, status,0, prodl, prodh
 25773 ;; Tracked objects:
 25774 ;;		On entry : 0/0
 25775 ;;		On exit  : 0/0
 25776 ;;		Unchanged: 0/0
 25777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25778 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25779 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25781 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25782 ;;Total ram usage:        6 bytes
 25783 ;; Hardware stack levels used:    1
 25784 ;; This function calls:
 25785 ;;		Nothing
 25786 ;; This function is called by:
 25787 ;;		_printSortTimer
 25788 ;;		_retrieveLog
 25789 ;;		i2_printf
 25790 ;; This function uses a non-reentrant model
 25791 ;;
 25792                           
 25793                           	psect	text90
 25794  005F72                     __ptext90:
 25795                           	opt stack 0
 25796  005F72                     i2___wmul:
 25797                           	opt stack 21
 25798                           
 25799                           ;incstack = 0
 25800  005F72  5001               	movf	i2___wmul@multiplier,w,c
 25801  005F74  0203               	mulwf	i2___wmul@multiplicand,c
 25802  005F76  CFF3 F005          	movff	prodl,i2___wmul@product
 25803  005F7A  CFF4 F006          	movff	prodh,i2___wmul@product+1
 25804  005F7E  5001               	movf	i2___wmul@multiplier,w,c
 25805  005F80  0204               	mulwf	i2___wmul@multiplicand+1,c
 25806  005F82  50F3               	movf	prodl,w,c
 25807  005F84  2606               	addwf	i2___wmul@product+1,f,c
 25808  005F86  5002               	movf	i2___wmul@multiplier+1,w,c
 25809  005F88  0203               	mulwf	i2___wmul@multiplicand,c
 25810  005F8A  50F3               	movf	prodl,w,c
 25811  005F8C  2606               	addwf	i2___wmul@product+1,f,c
 25812  005F8E  C005  F001         	movff	i2___wmul@product,?i2___wmul
 25813  005F92  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 25814  005F96  0012               	return	
 25815  005F98                     __end_ofi2___wmul:
 25816                           	opt stack 0
 25817                           pclatu	equ	0xFFB
 25818                           pclath	equ	0xFFA
 25819                           tblptru	equ	0xFF8
 25820                           tblptrh	equ	0xFF7
 25821                           tblptrl	equ	0xFF6
 25822                           tablat	equ	0xFF5
 25823                           prodh	equ	0xFF4
 25824                           prodl	equ	0xFF3
 25825                           intcon	equ	0xFF2
 25826                           intcon2	equ	0xFF1
 25827                           intcon3	equ	0xFF0
 25828                           indf0	equ	0xFEF
 25829                           postinc0	equ	0xFEE
 25830                           fsr0h	equ	0xFEA
 25831                           fsr0l	equ	0xFE9
 25832                           wreg	equ	0xFE8
 25833                           postdec1	equ	0xFE5
 25834                           fsr1h	equ	0xFE2
 25835                           fsr1l	equ	0xFE1
 25836                           indf2	equ	0xFDF
 25837                           postinc2	equ	0xFDE
 25838                           postdec2	equ	0xFDD
 25839                           fsr2h	equ	0xFDA
 25840                           fsr2l	equ	0xFD9
 25841                           status	equ	0xFD8
 25842                           
 25843 ;; *************** function i2___lwmod *****************
 25844 ;; Defined at:
 25845 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 25846 ;; Parameters:    Size  Location     Type
 25847 ;;  dividend        2    0[COMRAM] unsigned int 
 25848 ;;  divisor         2    2[COMRAM] unsigned int 
 25849 ;; Auto vars:     Size  Location     Type
 25850 ;;  __lwmod         1    4[COMRAM] unsigned char 
 25851 ;; Return value:  Size  Location     Type
 25852 ;;                  2    0[COMRAM] unsigned int 
 25853 ;; Registers used:
 25854 ;;		wreg, status,2, status,0
 25855 ;; Tracked objects:
 25856 ;;		On entry : 0/0
 25857 ;;		On exit  : 0/0
 25858 ;;		Unchanged: 0/0
 25859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25860 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25861 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25863 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25864 ;;Total ram usage:        5 bytes
 25865 ;; Hardware stack levels used:    1
 25866 ;; This function calls:
 25867 ;;		Nothing
 25868 ;; This function is called by:
 25869 ;;		_printSortTimer
 25870 ;;		i2_printf
 25871 ;; This function uses a non-reentrant model
 25872 ;;
 25873                           
 25874                           	psect	text91
 25875  005AAA                     __ptext91:
 25876                           	opt stack 0
 25877  005AAA                     i2___lwmod:
 25878                           	opt stack 21
 25879                           
 25880                           ;incstack = 0
 25881  005AAA  5003               	movf	i2___lwmod@divisor,w,c
 25882  005AAC  1004               	iorwf	i2___lwmod@divisor+1,w,c
 25883  005AAE  B4D8               	btfsc	status,2,c
 25884  005AB0  D018               	goto	i2l2048
 25885  005AB2  0E01               	movlw	1
 25886  005AB4  6E05               	movwf	i2___lwmod@counter,c
 25887  005AB6  D004               	goto	i2l6957
 25888  005AB8                     i2l6955:
 25889  005AB8  90D8               	bcf	status,0,c
 25890  005ABA  3603               	rlcf	i2___lwmod@divisor,f,c
 25891  005ABC  3604               	rlcf	i2___lwmod@divisor+1,f,c
 25892  005ABE  2A05               	incf	i2___lwmod@counter,f,c
 25893  005AC0                     i2l6957:
 25894  005AC0  AE04               	btfss	i2___lwmod@divisor+1,7,c
 25895  005AC2  D7FA               	goto	i2l6955
 25896  005AC4                     i2l6959:
 25897  005AC4  5003               	movf	i2___lwmod@divisor,w,c
 25898  005AC6  5C01               	subwf	i2___lwmod@dividend,w,c
 25899  005AC8  5004               	movf	i2___lwmod@divisor+1,w,c
 25900  005ACA  5802               	subwfb	i2___lwmod@dividend+1,w,c
 25901  005ACC  A0D8               	btfss	status,0,c
 25902  005ACE  D004               	goto	i2l6963
 25903  005AD0  5003               	movf	i2___lwmod@divisor,w,c
 25904  005AD2  5E01               	subwf	i2___lwmod@dividend,f,c
 25905  005AD4  5004               	movf	i2___lwmod@divisor+1,w,c
 25906  005AD6  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 25907  005AD8                     i2l6963:
 25908  005AD8  90D8               	bcf	status,0,c
 25909  005ADA  3204               	rrcf	i2___lwmod@divisor+1,f,c
 25910  005ADC  3203               	rrcf	i2___lwmod@divisor,f,c
 25911  005ADE  2E05               	decfsz	i2___lwmod@counter,f,c
 25912  005AE0  D7F1               	goto	i2l6959
 25913  005AE2                     i2l2048:
 25914  005AE2  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 25915  005AE6  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 25916  005AEA  0012               	return		;funcret
 25917  005AEC                     __end_ofi2___lwmod:
 25918                           	opt stack 0
 25919                           pclatu	equ	0xFFB
 25920                           pclath	equ	0xFFA
 25921                           tblptru	equ	0xFF8
 25922                           tblptrh	equ	0xFF7
 25923                           tblptrl	equ	0xFF6
 25924                           tablat	equ	0xFF5
 25925                           prodh	equ	0xFF4
 25926                           prodl	equ	0xFF3
 25927                           intcon	equ	0xFF2
 25928                           intcon2	equ	0xFF1
 25929                           intcon3	equ	0xFF0
 25930                           indf0	equ	0xFEF
 25931                           postinc0	equ	0xFEE
 25932                           fsr0h	equ	0xFEA
 25933                           fsr0l	equ	0xFE9
 25934                           wreg	equ	0xFE8
 25935                           postdec1	equ	0xFE5
 25936                           fsr1h	equ	0xFE2
 25937                           fsr1l	equ	0xFE1
 25938                           indf2	equ	0xFDF
 25939                           postinc2	equ	0xFDE
 25940                           postdec2	equ	0xFDD
 25941                           fsr2h	equ	0xFDA
 25942                           fsr2l	equ	0xFD9
 25943                           status	equ	0xFD8
 25944                           
 25945 ;; *************** function i2___lwdiv *****************
 25946 ;; Defined at:
 25947 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 25948 ;; Parameters:    Size  Location     Type
 25949 ;;  dividend        2    5[COMRAM] unsigned int 
 25950 ;;  divisor         2    7[COMRAM] unsigned int 
 25951 ;; Auto vars:     Size  Location     Type
 25952 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 25953 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 25954 ;; Return value:  Size  Location     Type
 25955 ;;                  2    5[COMRAM] unsigned int 
 25956 ;; Registers used:
 25957 ;;		wreg, status,2, status,0
 25958 ;; Tracked objects:
 25959 ;;		On entry : 0/0
 25960 ;;		On exit  : 0/0
 25961 ;;		Unchanged: 0/0
 25962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25963 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25964 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25966 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25967 ;;Total ram usage:        7 bytes
 25968 ;; Hardware stack levels used:    1
 25969 ;; This function calls:
 25970 ;;		Nothing
 25971 ;; This function is called by:
 25972 ;;		_printSortTimer
 25973 ;;		i2_printf
 25974 ;; This function uses a non-reentrant model
 25975 ;;
 25976                           
 25977                           	psect	text92
 25978  0058E8                     __ptext92:
 25979                           	opt stack 0
 25980  0058E8                     i2___lwdiv:
 25981                           	opt stack 21
 25982                           
 25983                           ;incstack = 0
 25984  0058E8  0E00               	movlw	0
 25985  0058EA  6E0B               	movwf	i2___lwdiv@quotient+1,c
 25986  0058EC  0E00               	movlw	0
 25987  0058EE  6E0A               	movwf	i2___lwdiv@quotient,c
 25988  0058F0  5008               	movf	i2___lwdiv@divisor,w,c
 25989  0058F2  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 25990  0058F4  B4D8               	btfsc	status,2,c
 25991  0058F6  D01C               	goto	i2l2038
 25992  0058F8  0E01               	movlw	1
 25993  0058FA  6E0C               	movwf	i2___lwdiv@counter,c
 25994  0058FC  D004               	goto	i2l6937
 25995  0058FE                     i2l6935:
 25996  0058FE  90D8               	bcf	status,0,c
 25997  005900  3608               	rlcf	i2___lwdiv@divisor,f,c
 25998  005902  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 25999  005904  2A0C               	incf	i2___lwdiv@counter,f,c
 26000  005906                     i2l6937:
 26001  005906  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 26002  005908  D7FA               	goto	i2l6935
 26003  00590A                     i2l6939:
 26004  00590A  90D8               	bcf	status,0,c
 26005  00590C  360A               	rlcf	i2___lwdiv@quotient,f,c
 26006  00590E  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 26007  005910  5008               	movf	i2___lwdiv@divisor,w,c
 26008  005912  5C06               	subwf	i2___lwdiv@dividend,w,c
 26009  005914  5009               	movf	i2___lwdiv@divisor+1,w,c
 26010  005916  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 26011  005918  A0D8               	btfss	status,0,c
 26012  00591A  D005               	goto	i2l6947
 26013  00591C  5008               	movf	i2___lwdiv@divisor,w,c
 26014  00591E  5E06               	subwf	i2___lwdiv@dividend,f,c
 26015  005920  5009               	movf	i2___lwdiv@divisor+1,w,c
 26016  005922  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 26017  005924  800A               	bsf	i2___lwdiv@quotient,0,c
 26018  005926                     i2l6947:
 26019  005926  90D8               	bcf	status,0,c
 26020  005928  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 26021  00592A  3208               	rrcf	i2___lwdiv@divisor,f,c
 26022  00592C  2E0C               	decfsz	i2___lwdiv@counter,f,c
 26023  00592E  D7ED               	goto	i2l6939
 26024  005930                     i2l2038:
 26025  005930  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 26026  005934  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 26027  005938  0012               	return		;funcret
 26028  00593A                     __end_ofi2___lwdiv:
 26029                           	opt stack 0
 26030                           pclatu	equ	0xFFB
 26031                           pclath	equ	0xFFA
 26032                           tblptru	equ	0xFF8
 26033                           tblptrh	equ	0xFF7
 26034                           tblptrl	equ	0xFF6
 26035                           tablat	equ	0xFF5
 26036                           prodh	equ	0xFF4
 26037                           prodl	equ	0xFF3
 26038                           intcon	equ	0xFF2
 26039                           intcon2	equ	0xFF1
 26040                           intcon3	equ	0xFF0
 26041                           indf0	equ	0xFEF
 26042                           postinc0	equ	0xFEE
 26043                           fsr0h	equ	0xFEA
 26044                           fsr0l	equ	0xFE9
 26045                           wreg	equ	0xFE8
 26046                           postdec1	equ	0xFE5
 26047                           fsr1h	equ	0xFE2
 26048                           fsr1l	equ	0xFE1
 26049                           indf2	equ	0xFDF
 26050                           postinc2	equ	0xFDE
 26051                           postdec2	equ	0xFDD
 26052                           fsr2h	equ	0xFDA
 26053                           fsr2l	equ	0xFD9
 26054                           status	equ	0xFD8
 26055                           
 26056 ;; *************** function i2_lcdInst *****************
 26057 ;; Defined at:
 26058 ;;		line 15 in file "lcd.c"
 26059 ;; Parameters:    Size  Location     Type
 26060 ;;  data            1    wreg     unsigned char 
 26061 ;; Auto vars:     Size  Location     Type
 26062 ;;  data            1    2[COMRAM] unsigned char 
 26063 ;; Return value:  Size  Location     Type
 26064 ;;                  1    wreg      void 
 26065 ;; Registers used:
 26066 ;;		wreg, status,2, status,0, cstack
 26067 ;; Tracked objects:
 26068 ;;		On entry : 0/0
 26069 ;;		On exit  : 0/0
 26070 ;;		Unchanged: 0/0
 26071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26073 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26075 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26076 ;;Total ram usage:        1 bytes
 26077 ;; Hardware stack levels used:    1
 26078 ;; Hardware stack levels required when called:    1
 26079 ;; This function calls:
 26080 ;;		i2_lcdNibble
 26081 ;; This function is called by:
 26082 ;;		_change_state_to_menu_11
 26083 ;;		_change_state_to_menu_23
 26084 ;;		_change_state_to_logs_11
 26085 ;;		_change_state_to_logs_12
 26086 ;;		_change_state_to_logs_22
 26087 ;;		_change_state_to_logs_23
 26088 ;;		_change_state_to_logs_33
 26089 ;;		_change_state_to_logs_34
 26090 ;;		_printSortTimer
 26091 ;;		i2_change_state_to_menu_start
 26092 ;;		i2_change_state_to_menu_12
 26093 ;;		i2_change_state_to_menu_22
 26094 ;;		i2_printRTC
 26095 ;; This function uses a non-reentrant model
 26096 ;;
 26097                           
 26098                           	psect	text93
 26099  0060F6                     __ptext93:
 26100                           	opt stack 0
 26101  0060F6                     i2_lcdInst:
 26102                           	opt stack 20
 26103                           
 26104                           ;incstack = 0
 26105                           ;i2lcdInst@data stored from wreg
 26106  0060F6  6E03               	movwf	i2lcdInst@data,c
 26107                           
 26108                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 26109  0060F8  948C               	bcf	3980,2,c	;volatile
 26110                           
 26111                           ;lcd.c: 17: lcdNibble(data);
 26112  0060FA  5003               	movf	i2lcdInst@data,w,c
 26113  0060FC  EC47  F02C         	call	i2_lcdNibble
 26114  006100  0012               	return		;funcret
 26115  006102                     __end_ofi2_lcdInst:
 26116                           	opt stack 0
 26117                           pclatu	equ	0xFFB
 26118                           pclath	equ	0xFFA
 26119                           tblptru	equ	0xFF8
 26120                           tblptrh	equ	0xFF7
 26121                           tblptrl	equ	0xFF6
 26122                           tablat	equ	0xFF5
 26123                           prodh	equ	0xFF4
 26124                           prodl	equ	0xFF3
 26125                           intcon	equ	0xFF2
 26126                           intcon2	equ	0xFF1
 26127                           intcon3	equ	0xFF0
 26128                           indf0	equ	0xFEF
 26129                           postinc0	equ	0xFEE
 26130                           fsr0h	equ	0xFEA
 26131                           fsr0l	equ	0xFE9
 26132                           wreg	equ	0xFE8
 26133                           postdec1	equ	0xFE5
 26134                           fsr1h	equ	0xFE2
 26135                           fsr1l	equ	0xFE1
 26136                           indf2	equ	0xFDF
 26137                           postinc2	equ	0xFDE
 26138                           postdec2	equ	0xFDD
 26139                           fsr2h	equ	0xFDA
 26140                           fsr2l	equ	0xFD9
 26141                           status	equ	0xFD8
 26142                           
 26143 ;; *************** function i2_lcdNibble *****************
 26144 ;; Defined at:
 26145 ;;		line 25 in file "lcd.c"
 26146 ;; Parameters:    Size  Location     Type
 26147 ;;  data            1    wreg     unsigned char 
 26148 ;; Auto vars:     Size  Location     Type
 26149 ;;  data            1    1[COMRAM] unsigned char 
 26150 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 26151 ;; Return value:  Size  Location     Type
 26152 ;;                  1    wreg      void 
 26153 ;; Registers used:
 26154 ;;		wreg, status,2, status,0
 26155 ;; Tracked objects:
 26156 ;;		On entry : 0/0
 26157 ;;		On exit  : 0/0
 26158 ;;		Unchanged: 0/0
 26159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26161 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26163 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26164 ;;Total ram usage:        2 bytes
 26165 ;; Hardware stack levels used:    1
 26166 ;; This function calls:
 26167 ;;		Nothing
 26168 ;; This function is called by:
 26169 ;;		i2_lcdInst
 26170 ;;		i2_putch
 26171 ;; This function uses a non-reentrant model
 26172 ;;
 26173                           
 26174                           	psect	text94
 26175  00588E                     __ptext94:
 26176                           	opt stack 0
 26177  00588E                     i2_lcdNibble:
 26178                           	opt stack 20
 26179                           
 26180                           ;incstack = 0
 26181                           ;i2lcdNibble@data stored from wreg
 26182  00588E  6E02               	movwf	i2lcdNibble@data,c
 26183                           
 26184                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 26185  005890  9EF2               	bcf	intcon,7,c	;volatile
 26186                           
 26187                           ;lcd.c: 28: char temp = data & 0xF0;
 26188  005892  5002               	movf	i2lcdNibble@data,w,c
 26189  005894  0BF0               	andlw	240
 26190  005896  6E01               	movwf	i2lcdNibble@temp,c
 26191                           
 26192                           ;lcd.c: 29: LATD = LATD & 0x0F;
 26193  005898  508C               	movf	3980,w,c	;volatile
 26194  00589A  0B0F               	andlw	15
 26195  00589C  6E8C               	movwf	3980,c	;volatile
 26196                           
 26197                           ;lcd.c: 30: LATD = temp | LATD;
 26198  00589E  5001               	movf	i2lcdNibble@temp,w,c
 26199  0058A0  108C               	iorwf	3980,w,c	;volatile
 26200  0058A2  6E8C               	movwf	3980,c	;volatile
 26201                           
 26202                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 26203  0058A4  868C               	bsf	3980,3,c	;volatile
 26204                           
 26205                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 26206  0058A6  0E42               	movlw	66
 26207  0058A8                     i2u1249_47:
 26208  0058A8  2EE8               	decfsz	wreg,f,c
 26209  0058AA  D7FE               	bra	i2u1249_47
 26210  0058AC  D000               	nop2	
 26211                           
 26212                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 26213  0058AE  968C               	bcf	3980,3,c	;volatile
 26214                           
 26215                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 26216  0058B0  0E42               	movlw	66
 26217  0058B2                     i2u1250_47:
 26218  0058B2  2EE8               	decfsz	wreg,f,c
 26219  0058B4  D7FE               	bra	i2u1250_47
 26220  0058B6  D000               	nop2	
 26221                           
 26222                           ;lcd.c: 37: data = data << 4;
 26223  0058B8  3802               	swapf	i2lcdNibble@data,w,c
 26224  0058BA  0BF0               	andlw	240
 26225  0058BC  6E02               	movwf	i2lcdNibble@data,c
 26226                           
 26227                           ;lcd.c: 39: temp = data & 0xF0;
 26228  0058BE  5002               	movf	i2lcdNibble@data,w,c
 26229  0058C0  0BF0               	andlw	240
 26230  0058C2  6E01               	movwf	i2lcdNibble@temp,c
 26231                           
 26232                           ;lcd.c: 40: LATD = LATD & 0x0F;
 26233  0058C4  508C               	movf	3980,w,c	;volatile
 26234  0058C6  0B0F               	andlw	15
 26235  0058C8  6E8C               	movwf	3980,c	;volatile
 26236                           
 26237                           ;lcd.c: 41: LATD = temp | LATD;
 26238  0058CA  5001               	movf	i2lcdNibble@temp,w,c
 26239  0058CC  108C               	iorwf	3980,w,c	;volatile
 26240  0058CE  6E8C               	movwf	3980,c	;volatile
 26241                           
 26242                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 26243  0058D0  868C               	bsf	3980,3,c	;volatile
 26244                           
 26245                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 26246  0058D2  0E42               	movlw	66
 26247  0058D4                     i2u1251_47:
 26248  0058D4  2EE8               	decfsz	wreg,f,c
 26249  0058D6  D7FE               	bra	i2u1251_47
 26250  0058D8  D000               	nop2	
 26251                           
 26252                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 26253  0058DA  968C               	bcf	3980,3,c	;volatile
 26254                           
 26255                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 26256  0058DC  0E42               	movlw	66
 26257  0058DE                     i2u1252_47:
 26258  0058DE  2EE8               	decfsz	wreg,f,c
 26259  0058E0  D7FE               	bra	i2u1252_47
 26260  0058E2  D000               	nop2	
 26261                           
 26262                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 26263  0058E4  8EF2               	bsf	intcon,7,c	;volatile
 26264  0058E6  0012               	return		;funcret
 26265  0058E8                     __end_ofi2_lcdNibble:
 26266                           	opt stack 0
 26267                           pclatu	equ	0xFFB
 26268                           pclath	equ	0xFFA
 26269                           tblptru	equ	0xFF8
 26270                           tblptrh	equ	0xFF7
 26271                           tblptrl	equ	0xFF6
 26272                           tablat	equ	0xFF5
 26273                           prodh	equ	0xFF4
 26274                           prodl	equ	0xFF3
 26275                           intcon	equ	0xFF2
 26276                           intcon2	equ	0xFF1
 26277                           intcon3	equ	0xFF0
 26278                           indf0	equ	0xFEF
 26279                           postinc0	equ	0xFEE
 26280                           fsr0h	equ	0xFEA
 26281                           fsr0l	equ	0xFE9
 26282                           wreg	equ	0xFE8
 26283                           postdec1	equ	0xFE5
 26284                           fsr1h	equ	0xFE2
 26285                           fsr1l	equ	0xFE1
 26286                           indf2	equ	0xFDF
 26287                           postinc2	equ	0xFDE
 26288                           postdec2	equ	0xFDD
 26289                           fsr2h	equ	0xFDA
 26290                           fsr2l	equ	0xFD9
 26291                           status	equ	0xFD8
 26292                           
 26293 ;; *************** function i2_getRTC *****************
 26294 ;; Defined at:
 26295 ;;		line 44 in file "RTC.c"
 26296 ;; Parameters:    Size  Location     Type
 26297 ;;		None
 26298 ;; Auto vars:     Size  Location     Type
 26299 ;;  getRTC          2    3[COMRAM] int 
 26300 ;; Return value:  Size  Location     Type
 26301 ;;                  1    wreg      void 
 26302 ;; Registers used:
 26303 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26304 ;; Tracked objects:
 26305 ;;		On entry : 0/0
 26306 ;;		On exit  : 0/0
 26307 ;;		Unchanged: 0/0
 26308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26310 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26312 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26313 ;;Total ram usage:        2 bytes
 26314 ;; Hardware stack levels used:    1
 26315 ;; Hardware stack levels required when called:    2
 26316 ;; This function calls:
 26317 ;;		i2_I2C_Master_Read
 26318 ;;		i2_I2C_Master_Start
 26319 ;;		i2_I2C_Master_Stop
 26320 ;;		i2_I2C_Master_Write
 26321 ;; This function is called by:
 26322 ;;		_printSortTimer
 26323 ;;		i2_printRTC
 26324 ;; This function uses a non-reentrant model
 26325 ;;
 26326                           
 26327                           	psect	text95
 26328  005556                     __ptext95:
 26329                           	opt stack 0
 26330  005556                     i2_getRTC:
 26331                           	opt stack 19
 26332                           
 26333                           ;RTC.c: 48: I2C_Master_Start();
 26334                           
 26335                           ;incstack = 0
 26336  005556  EC9B  F030         	call	i2_I2C_Master_Start	;wreg free
 26337                           
 26338                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 26339  00555A  0E00               	movlw	0
 26340  00555C  6E03               	movwf	i2I2C_Master_Write@d+1,c
 26341  00555E  0ED0               	movlw	208
 26342  005560  6E02               	movwf	i2I2C_Master_Write@d,c
 26343  005562  EC86  F030         	call	i2_I2C_Master_Write	;wreg free
 26344                           
 26345                           ;RTC.c: 50: I2C_Master_Write(0x00);
 26346  005566  0E00               	movlw	0
 26347  005568  6E03               	movwf	i2I2C_Master_Write@d+1,c
 26348  00556A  0E00               	movlw	0
 26349  00556C  6E02               	movwf	i2I2C_Master_Write@d,c
 26350  00556E  EC86  F030         	call	i2_I2C_Master_Write	;wreg free
 26351                           
 26352                           ;RTC.c: 51: I2C_Master_Stop();
 26353  005572  EC97  F030         	call	i2_I2C_Master_Stop	;wreg free
 26354                           
 26355                           ;RTC.c: 54: I2C_Master_Start();
 26356  005576  EC9B  F030         	call	i2_I2C_Master_Start	;wreg free
 26357                           
 26358                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 26359  00557A  0E00               	movlw	0
 26360  00557C  6E03               	movwf	i2I2C_Master_Write@d+1,c
 26361  00557E  0ED1               	movlw	209
 26362  005580  6E02               	movwf	i2I2C_Master_Write@d,c
 26363  005582  EC86  F030         	call	i2_I2C_Master_Write	;wreg free
 26364                           
 26365                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 26366  005586  0E00               	movlw	0
 26367  005588  6E05               	movwf	i2getRTC@i+1,c
 26368  00558A  0E00               	movlw	0
 26369  00558C  6E04               	movwf	i2getRTC@i,c
 26370  00558E                     i2l7243:
 26371  00558E  BE05               	btfsc	i2getRTC@i+1,7,c
 26372  005590  D006               	goto	i2l7247
 26373  005592  5005               	movf	i2getRTC@i+1,w,c
 26374  005594  E111               	bnz	i2l7253
 26375  005596  0E06               	movlw	6
 26376  005598  5C04               	subwf	i2getRTC@i,w,c
 26377  00559A  B0D8               	btfsc	status,0,c
 26378  00559C  D00D               	goto	i2l7253
 26379  00559E                     i2l7247:
 26380                           
 26381                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 26382  00559E  0E1C               	movlw	low _time
 26383  0055A0  2404               	addwf	i2getRTC@i,w,c
 26384  0055A2  6ED9               	movwf	fsr2l,c
 26385  0055A4  0E01               	movlw	high _time
 26386  0055A6  2005               	addwfc	i2getRTC@i+1,w,c
 26387  0055A8  6EDA               	movwf	fsr2h,c
 26388  0055AA  0E01               	movlw	1
 26389  0055AC  ECCC  F02F         	call	i2_I2C_Master_Read
 26390  0055B0  6EDF               	movwf	indf2,c
 26391  0055B2  4A04               	infsnz	i2getRTC@i,f,c
 26392  0055B4  2A05               	incf	i2getRTC@i+1,f,c
 26393  0055B6  D7EB               	goto	i2l7243
 26394  0055B8                     i2l7253:
 26395                           
 26396                           ;RTC.c: 58: }
 26397                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 26398  0055B8  0E00               	movlw	0
 26399  0055BA  ECCC  F02F         	call	i2_I2C_Master_Read
 26400  0055BE  0101               	movlb	1	; () banked
 26401  0055C0  6F22               	movwf	(_time+6)& (0+255),b
 26402                           
 26403                           ;RTC.c: 60: I2C_Master_Stop();
 26404  0055C2  EC97  F030         	call	i2_I2C_Master_Stop	;wreg free
 26405  0055C6  0012               	return		;funcret
 26406  0055C8                     __end_ofi2_getRTC:
 26407                           	opt stack 0
 26408                           pclatu	equ	0xFFB
 26409                           pclath	equ	0xFFA
 26410                           tblptru	equ	0xFF8
 26411                           tblptrh	equ	0xFF7
 26412                           tblptrl	equ	0xFF6
 26413                           tablat	equ	0xFF5
 26414                           prodh	equ	0xFF4
 26415                           prodl	equ	0xFF3
 26416                           intcon	equ	0xFF2
 26417                           intcon2	equ	0xFF1
 26418                           intcon3	equ	0xFF0
 26419                           indf0	equ	0xFEF
 26420                           postinc0	equ	0xFEE
 26421                           fsr0h	equ	0xFEA
 26422                           fsr0l	equ	0xFE9
 26423                           wreg	equ	0xFE8
 26424                           postdec1	equ	0xFE5
 26425                           fsr1h	equ	0xFE2
 26426                           fsr1l	equ	0xFE1
 26427                           indf2	equ	0xFDF
 26428                           postinc2	equ	0xFDE
 26429                           postdec2	equ	0xFDD
 26430                           fsr2h	equ	0xFDA
 26431                           fsr2l	equ	0xFD9
 26432                           status	equ	0xFD8
 26433                           
 26434 ;; *************** function i2_I2C_Master_Write *****************
 26435 ;; Defined at:
 26436 ;;		line 49 in file "I2C.c"
 26437 ;; Parameters:    Size  Location     Type
 26438 ;;  d               2    1[COMRAM] unsigned int 
 26439 ;; Auto vars:     Size  Location     Type
 26440 ;;		None
 26441 ;; Return value:  Size  Location     Type
 26442 ;;                  1    wreg      void 
 26443 ;; Registers used:
 26444 ;;		wreg, status,2, status,0, cstack
 26445 ;; Tracked objects:
 26446 ;;		On entry : 0/0
 26447 ;;		On exit  : 0/0
 26448 ;;		Unchanged: 0/0
 26449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26450 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26453 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26454 ;;Total ram usage:        2 bytes
 26455 ;; Hardware stack levels used:    1
 26456 ;; Hardware stack levels required when called:    1
 26457 ;; This function calls:
 26458 ;;		i2_I2C_Master_Wait
 26459 ;; This function is called by:
 26460 ;;		i2_getRTC
 26461 ;; This function uses a non-reentrant model
 26462 ;;
 26463                           
 26464                           	psect	text96
 26465  00610C                     __ptext96:
 26466                           	opt stack 0
 26467  00610C                     i2_I2C_Master_Write:
 26468                           	opt stack 19
 26469                           
 26470                           ;I2C.c: 51: I2C_Master_Wait();
 26471                           
 26472                           ;incstack = 0
 26473  00610C  EC5C  F030         	call	i2_I2C_Master_Wait	;wreg free
 26474                           
 26475                           ;I2C.c: 52: SSPBUF = d;
 26476  006110  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 26477  006114  0012               	return		;funcret
 26478  006116                     __end_ofi2_I2C_Master_Write:
 26479                           	opt stack 0
 26480                           pclatu	equ	0xFFB
 26481                           pclath	equ	0xFFA
 26482                           tblptru	equ	0xFF8
 26483                           tblptrh	equ	0xFF7
 26484                           tblptrl	equ	0xFF6
 26485                           tablat	equ	0xFF5
 26486                           prodh	equ	0xFF4
 26487                           prodl	equ	0xFF3
 26488                           intcon	equ	0xFF2
 26489                           intcon2	equ	0xFF1
 26490                           intcon3	equ	0xFF0
 26491                           indf0	equ	0xFEF
 26492                           postinc0	equ	0xFEE
 26493                           fsr0h	equ	0xFEA
 26494                           fsr0l	equ	0xFE9
 26495                           wreg	equ	0xFE8
 26496                           postdec1	equ	0xFE5
 26497                           fsr1h	equ	0xFE2
 26498                           fsr1l	equ	0xFE1
 26499                           indf2	equ	0xFDF
 26500                           postinc2	equ	0xFDE
 26501                           postdec2	equ	0xFDD
 26502                           fsr2h	equ	0xFDA
 26503                           fsr2l	equ	0xFD9
 26504                           status	equ	0xFD8
 26505                           
 26506 ;; *************** function i2_I2C_Master_Stop *****************
 26507 ;; Defined at:
 26508 ;;		line 43 in file "I2C.c"
 26509 ;; Parameters:    Size  Location     Type
 26510 ;;		None
 26511 ;; Auto vars:     Size  Location     Type
 26512 ;;		None
 26513 ;; Return value:  Size  Location     Type
 26514 ;;                  1    wreg      void 
 26515 ;; Registers used:
 26516 ;;		wreg, status,2, status,0, cstack
 26517 ;; Tracked objects:
 26518 ;;		On entry : 0/0
 26519 ;;		On exit  : 0/0
 26520 ;;		Unchanged: 0/0
 26521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26526 ;;Total ram usage:        0 bytes
 26527 ;; Hardware stack levels used:    1
 26528 ;; Hardware stack levels required when called:    1
 26529 ;; This function calls:
 26530 ;;		i2_I2C_Master_Wait
 26531 ;; This function is called by:
 26532 ;;		i2_getRTC
 26533 ;; This function uses a non-reentrant model
 26534 ;;
 26535                           
 26536                           	psect	text97
 26537  00612E                     __ptext97:
 26538                           	opt stack 0
 26539  00612E                     i2_I2C_Master_Stop:
 26540                           	opt stack 19
 26541                           
 26542                           ;I2C.c: 45: I2C_Master_Wait();
 26543                           
 26544                           ;incstack = 0
 26545  00612E  EC5C  F030         	call	i2_I2C_Master_Wait	;wreg free
 26546                           
 26547                           ;I2C.c: 46: PEN = 1;
 26548  006132  84C5               	bsf	4037,2,c	;volatile
 26549  006134  0012               	return		;funcret
 26550  006136                     __end_ofi2_I2C_Master_Stop:
 26551                           	opt stack 0
 26552                           pclatu	equ	0xFFB
 26553                           pclath	equ	0xFFA
 26554                           tblptru	equ	0xFF8
 26555                           tblptrh	equ	0xFF7
 26556                           tblptrl	equ	0xFF6
 26557                           tablat	equ	0xFF5
 26558                           prodh	equ	0xFF4
 26559                           prodl	equ	0xFF3
 26560                           intcon	equ	0xFF2
 26561                           intcon2	equ	0xFF1
 26562                           intcon3	equ	0xFF0
 26563                           indf0	equ	0xFEF
 26564                           postinc0	equ	0xFEE
 26565                           fsr0h	equ	0xFEA
 26566                           fsr0l	equ	0xFE9
 26567                           wreg	equ	0xFE8
 26568                           postdec1	equ	0xFE5
 26569                           fsr1h	equ	0xFE2
 26570                           fsr1l	equ	0xFE1
 26571                           indf2	equ	0xFDF
 26572                           postinc2	equ	0xFDE
 26573                           postdec2	equ	0xFDD
 26574                           fsr2h	equ	0xFDA
 26575                           fsr2l	equ	0xFD9
 26576                           status	equ	0xFD8
 26577                           
 26578 ;; *************** function i2_I2C_Master_Start *****************
 26579 ;; Defined at:
 26580 ;;		line 31 in file "I2C.c"
 26581 ;; Parameters:    Size  Location     Type
 26582 ;;		None
 26583 ;; Auto vars:     Size  Location     Type
 26584 ;;		None
 26585 ;; Return value:  Size  Location     Type
 26586 ;;                  1    wreg      void 
 26587 ;; Registers used:
 26588 ;;		wreg, status,2, status,0, cstack
 26589 ;; Tracked objects:
 26590 ;;		On entry : 0/0
 26591 ;;		On exit  : 0/0
 26592 ;;		Unchanged: 0/0
 26593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26597 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26598 ;;Total ram usage:        0 bytes
 26599 ;; Hardware stack levels used:    1
 26600 ;; Hardware stack levels required when called:    1
 26601 ;; This function calls:
 26602 ;;		i2_I2C_Master_Wait
 26603 ;; This function is called by:
 26604 ;;		i2_getRTC
 26605 ;; This function uses a non-reentrant model
 26606 ;;
 26607                           
 26608                           	psect	text98
 26609  006136                     __ptext98:
 26610                           	opt stack 0
 26611  006136                     i2_I2C_Master_Start:
 26612                           	opt stack 19
 26613                           
 26614                           ;I2C.c: 33: I2C_Master_Wait();
 26615                           
 26616                           ;incstack = 0
 26617  006136  EC5C  F030         	call	i2_I2C_Master_Wait	;wreg free
 26618                           
 26619                           ;I2C.c: 34: SEN = 1;
 26620  00613A  80C5               	bsf	4037,0,c	;volatile
 26621  00613C  0012               	return		;funcret
 26622  00613E                     __end_ofi2_I2C_Master_Start:
 26623                           	opt stack 0
 26624                           pclatu	equ	0xFFB
 26625                           pclath	equ	0xFFA
 26626                           tblptru	equ	0xFF8
 26627                           tblptrh	equ	0xFF7
 26628                           tblptrl	equ	0xFF6
 26629                           tablat	equ	0xFF5
 26630                           prodh	equ	0xFF4
 26631                           prodl	equ	0xFF3
 26632                           intcon	equ	0xFF2
 26633                           intcon2	equ	0xFF1
 26634                           intcon3	equ	0xFF0
 26635                           indf0	equ	0xFEF
 26636                           postinc0	equ	0xFEE
 26637                           fsr0h	equ	0xFEA
 26638                           fsr0l	equ	0xFE9
 26639                           wreg	equ	0xFE8
 26640                           postdec1	equ	0xFE5
 26641                           fsr1h	equ	0xFE2
 26642                           fsr1l	equ	0xFE1
 26643                           indf2	equ	0xFDF
 26644                           postinc2	equ	0xFDE
 26645                           postdec2	equ	0xFDD
 26646                           fsr2h	equ	0xFDA
 26647                           fsr2l	equ	0xFD9
 26648                           status	equ	0xFD8
 26649                           
 26650 ;; *************** function i2_I2C_Master_Read *****************
 26651 ;; Defined at:
 26652 ;;		line 55 in file "I2C.c"
 26653 ;; Parameters:    Size  Location     Type
 26654 ;;  a               1    wreg     unsigned char 
 26655 ;; Auto vars:     Size  Location     Type
 26656 ;;  a               1    1[COMRAM] unsigned char 
 26657 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 26658 ;; Return value:  Size  Location     Type
 26659 ;;                  1    wreg      unsigned char 
 26660 ;; Registers used:
 26661 ;;		wreg, status,2, status,0, cstack
 26662 ;; Tracked objects:
 26663 ;;		On entry : 0/0
 26664 ;;		On exit  : 0/0
 26665 ;;		Unchanged: 0/0
 26666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26668 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26670 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26671 ;;Total ram usage:        2 bytes
 26672 ;; Hardware stack levels used:    1
 26673 ;; Hardware stack levels required when called:    1
 26674 ;; This function calls:
 26675 ;;		i2_I2C_Master_Wait
 26676 ;; This function is called by:
 26677 ;;		i2_getRTC
 26678 ;; This function uses a non-reentrant model
 26679 ;;
 26680                           
 26681                           	psect	text99
 26682  005F98                     __ptext99:
 26683                           	opt stack 0
 26684  005F98                     i2_I2C_Master_Read:
 26685                           	opt stack 19
 26686                           
 26687                           ;incstack = 0
 26688                           ;i2I2C_Master_Read@a stored from wreg
 26689  005F98  6E02               	movwf	i2I2C_Master_Read@a,c
 26690                           
 26691                           ;I2C.c: 57: unsigned char temp;
 26692                           ;I2C.c: 58: I2C_Master_Wait();
 26693  005F9A  EC5C  F030         	call	i2_I2C_Master_Wait	;wreg free
 26694                           
 26695                           ;I2C.c: 59: RCEN = 1;
 26696  005F9E  86C5               	bsf	4037,3,c	;volatile
 26697                           
 26698                           ;I2C.c: 60: I2C_Master_Wait();
 26699  005FA0  EC5C  F030         	call	i2_I2C_Master_Wait	;wreg free
 26700                           
 26701                           ;I2C.c: 61: temp = SSPBUF;
 26702  005FA4  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 26703                           
 26704                           ;I2C.c: 62: I2C_Master_Wait();
 26705  005FA8  EC5C  F030         	call	i2_I2C_Master_Wait	;wreg free
 26706                           
 26707                           ;I2C.c: 63: ACKDT = (a)?0:1;
 26708  005FAC  5002               	movf	i2I2C_Master_Read@a,w,c
 26709  005FAE  A4D8               	btfss	status,2,c
 26710  005FB0  D002               	goto	i2u558_40
 26711  005FB2  8AC5               	bsf	4037,5,c	;volatile
 26712  005FB4  D001               	goto	i2l6901
 26713  005FB6                     i2u558_40:
 26714  005FB6  9AC5               	bcf	4037,5,c	;volatile
 26715  005FB8                     i2l6901:
 26716                           
 26717                           ;I2C.c: 64: ACKEN = 1;
 26718  005FB8  88C5               	bsf	4037,4,c	;volatile
 26719                           
 26720                           ;I2C.c: 65: return temp;
 26721  005FBA  5003               	movf	i2I2C_Master_Read@temp,w,c
 26722  005FBC  0012               	return	
 26723  005FBE                     __end_ofi2_I2C_Master_Read:
 26724                           	opt stack 0
 26725                           pclatu	equ	0xFFB
 26726                           pclath	equ	0xFFA
 26727                           tblptru	equ	0xFF8
 26728                           tblptrh	equ	0xFF7
 26729                           tblptrl	equ	0xFF6
 26730                           tablat	equ	0xFF5
 26731                           prodh	equ	0xFF4
 26732                           prodl	equ	0xFF3
 26733                           intcon	equ	0xFF2
 26734                           intcon2	equ	0xFF1
 26735                           intcon3	equ	0xFF0
 26736                           indf0	equ	0xFEF
 26737                           postinc0	equ	0xFEE
 26738                           fsr0h	equ	0xFEA
 26739                           fsr0l	equ	0xFE9
 26740                           wreg	equ	0xFE8
 26741                           postdec1	equ	0xFE5
 26742                           fsr1h	equ	0xFE2
 26743                           fsr1l	equ	0xFE1
 26744                           indf2	equ	0xFDF
 26745                           postinc2	equ	0xFDE
 26746                           postdec2	equ	0xFDD
 26747                           fsr2h	equ	0xFDA
 26748                           fsr2l	equ	0xFD9
 26749                           status	equ	0xFD8
 26750                           
 26751 ;; *************** function i2_I2C_Master_Wait *****************
 26752 ;; Defined at:
 26753 ;;		line 26 in file "I2C.c"
 26754 ;; Parameters:    Size  Location     Type
 26755 ;;		None
 26756 ;; Auto vars:     Size  Location     Type
 26757 ;;		None
 26758 ;; Return value:  Size  Location     Type
 26759 ;;                  1    wreg      void 
 26760 ;; Registers used:
 26761 ;;		wreg, status,2, status,0
 26762 ;; Tracked objects:
 26763 ;;		On entry : 0/0
 26764 ;;		On exit  : 0/0
 26765 ;;		Unchanged: 0/0
 26766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26769 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26770 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26771 ;;Total ram usage:        1 bytes
 26772 ;; Hardware stack levels used:    1
 26773 ;; This function calls:
 26774 ;;		Nothing
 26775 ;; This function is called by:
 26776 ;;		i2_I2C_Master_Start
 26777 ;;		i2_I2C_Master_Stop
 26778 ;;		i2_I2C_Master_Write
 26779 ;;		i2_I2C_Master_Read
 26780 ;; This function uses a non-reentrant model
 26781 ;;
 26782                           
 26783                           	psect	text100
 26784  0060B8                     __ptext100:
 26785                           	opt stack 0
 26786  0060B8                     i2_I2C_Master_Wait:
 26787                           	opt stack 19
 26788  0060B8                     i2l78:
 26789  0060B8  B4C7               	btfsc	4039,2,c	;volatile
 26790  0060BA  D7FE               	goto	i2l78
 26791  0060BC  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 26792  0060C0  0E1F               	movlw	31
 26793  0060C2  1601               	andwf	??i2_I2C_Master_Wait,f,c
 26794  0060C4  B4D8               	btfsc	status,2,c
 26795  0060C6  0012               	return	
 26796  0060C8  D7F7               	goto	i2l78
 26797  0060CA                     __end_ofi2_I2C_Master_Wait:
 26798                           	opt stack 0
 26799                           pclatu	equ	0xFFB
 26800                           pclath	equ	0xFFA
 26801                           tblptru	equ	0xFF8
 26802                           tblptrh	equ	0xFF7
 26803                           tblptrl	equ	0xFF6
 26804                           tablat	equ	0xFF5
 26805                           prodh	equ	0xFF4
 26806                           prodl	equ	0xFF3
 26807                           intcon	equ	0xFF2
 26808                           intcon2	equ	0xFF1
 26809                           intcon3	equ	0xFF0
 26810                           indf0	equ	0xFEF
 26811                           postinc0	equ	0xFEE
 26812                           fsr0h	equ	0xFEA
 26813                           fsr0l	equ	0xFE9
 26814                           wreg	equ	0xFE8
 26815                           postdec1	equ	0xFE5
 26816                           fsr1h	equ	0xFE2
 26817                           fsr1l	equ	0xFE1
 26818                           indf2	equ	0xFDF
 26819                           postinc2	equ	0xFDE
 26820                           postdec2	equ	0xFDD
 26821                           fsr2h	equ	0xFDA
 26822                           fsr2l	equ	0xFD9
 26823                           status	equ	0xFD8
 26824                           
 26825 ;; *************** function i2___awmod *****************
 26826 ;; Defined at:
 26827 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 26828 ;; Parameters:    Size  Location     Type
 26829 ;;  dividend        2    0[COMRAM] int 
 26830 ;;  divisor         2    2[COMRAM] int 
 26831 ;; Auto vars:     Size  Location     Type
 26832 ;;  __awmod         1    5[COMRAM] unsigned char 
 26833 ;;  __awmod         1    4[COMRAM] unsigned char 
 26834 ;; Return value:  Size  Location     Type
 26835 ;;                  2    0[COMRAM] int 
 26836 ;; Registers used:
 26837 ;;		wreg, status,2, status,0
 26838 ;; Tracked objects:
 26839 ;;		On entry : 0/0
 26840 ;;		On exit  : 0/0
 26841 ;;		Unchanged: 0/0
 26842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26843 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26844 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26846 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26847 ;;Total ram usage:        6 bytes
 26848 ;; Hardware stack levels used:    1
 26849 ;; This function calls:
 26850 ;;		Nothing
 26851 ;; This function is called by:
 26852 ;;		_printSortTimer
 26853 ;; This function uses a non-reentrant model
 26854 ;;
 26855                           
 26856                           	psect	text101
 26857  0055C8                     __ptext101:
 26858                           	opt stack 0
 26859  0055C8                     i2___awmod:
 26860                           	opt stack 22
 26861                           
 26862                           ;incstack = 0
 26863  0055C8  0E00               	movlw	0
 26864  0055CA  6E06               	movwf	i2___awmod@sign,c
 26865  0055CC  AE02               	btfss	i2___awmod@dividend+1,7,c
 26866  0055CE  D006               	goto	i2l9657
 26867  0055D0  6C01               	negf	i2___awmod@dividend,c
 26868  0055D2  1E02               	comf	i2___awmod@dividend+1,f,c
 26869  0055D4  B0D8               	btfsc	status,0,c
 26870  0055D6  2A02               	incf	i2___awmod@dividend+1,f,c
 26871  0055D8  0E01               	movlw	1
 26872  0055DA  6E06               	movwf	i2___awmod@sign,c
 26873  0055DC                     i2l9657:
 26874  0055DC  AE04               	btfss	i2___awmod@divisor+1,7,c
 26875  0055DE  D004               	goto	i2l9661
 26876  0055E0  6C03               	negf	i2___awmod@divisor,c
 26877  0055E2  1E04               	comf	i2___awmod@divisor+1,f,c
 26878  0055E4  B0D8               	btfsc	status,0,c
 26879  0055E6  2A04               	incf	i2___awmod@divisor+1,f,c
 26880  0055E8                     i2l9661:
 26881  0055E8  5003               	movf	i2___awmod@divisor,w,c
 26882  0055EA  1004               	iorwf	i2___awmod@divisor+1,w,c
 26883  0055EC  B4D8               	btfsc	status,2,c
 26884  0055EE  D018               	goto	i2l9677
 26885  0055F0  0E01               	movlw	1
 26886  0055F2  6E05               	movwf	i2___awmod@counter,c
 26887  0055F4  D004               	goto	i2l9667
 26888  0055F6                     i2l9665:
 26889  0055F6  90D8               	bcf	status,0,c
 26890  0055F8  3603               	rlcf	i2___awmod@divisor,f,c
 26891  0055FA  3604               	rlcf	i2___awmod@divisor+1,f,c
 26892  0055FC  2A05               	incf	i2___awmod@counter,f,c
 26893  0055FE                     i2l9667:
 26894  0055FE  AE04               	btfss	i2___awmod@divisor+1,7,c
 26895  005600  D7FA               	goto	i2l9665
 26896  005602                     i2l9669:
 26897  005602  5003               	movf	i2___awmod@divisor,w,c
 26898  005604  5C01               	subwf	i2___awmod@dividend,w,c
 26899  005606  5004               	movf	i2___awmod@divisor+1,w,c
 26900  005608  5802               	subwfb	i2___awmod@dividend+1,w,c
 26901  00560A  A0D8               	btfss	status,0,c
 26902  00560C  D004               	goto	i2l9673
 26903  00560E  5003               	movf	i2___awmod@divisor,w,c
 26904  005610  5E01               	subwf	i2___awmod@dividend,f,c
 26905  005612  5004               	movf	i2___awmod@divisor+1,w,c
 26906  005614  5A02               	subwfb	i2___awmod@dividend+1,f,c
 26907  005616                     i2l9673:
 26908  005616  90D8               	bcf	status,0,c
 26909  005618  3204               	rrcf	i2___awmod@divisor+1,f,c
 26910  00561A  3203               	rrcf	i2___awmod@divisor,f,c
 26911  00561C  2E05               	decfsz	i2___awmod@counter,f,c
 26912  00561E  D7F1               	goto	i2l9669
 26913  005620                     i2l9677:
 26914  005620  5006               	movf	i2___awmod@sign,w,c
 26915  005622  B4D8               	btfsc	status,2,c
 26916  005624  D004               	goto	i2l9681
 26917  005626  6C01               	negf	i2___awmod@dividend,c
 26918  005628  1E02               	comf	i2___awmod@dividend+1,f,c
 26919  00562A  B0D8               	btfsc	status,0,c
 26920  00562C  2A02               	incf	i2___awmod@dividend+1,f,c
 26921  00562E                     i2l9681:
 26922  00562E  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 26923  005632  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 26924  005636  0012               	return	
 26925  005638                     __end_ofi2___awmod:
 26926                           	opt stack 0
 26927                           pclatu	equ	0xFFB
 26928                           pclath	equ	0xFFA
 26929                           tblptru	equ	0xFF8
 26930                           tblptrh	equ	0xFF7
 26931                           tblptrl	equ	0xFF6
 26932                           tablat	equ	0xFF5
 26933                           prodh	equ	0xFF4
 26934                           prodl	equ	0xFF3
 26935                           intcon	equ	0xFF2
 26936                           intcon2	equ	0xFF1
 26937                           intcon3	equ	0xFF0
 26938                           indf0	equ	0xFEF
 26939                           postinc0	equ	0xFEE
 26940                           fsr0h	equ	0xFEA
 26941                           fsr0l	equ	0xFE9
 26942                           wreg	equ	0xFE8
 26943                           postdec1	equ	0xFE5
 26944                           fsr1h	equ	0xFE2
 26945                           fsr1l	equ	0xFE1
 26946                           indf2	equ	0xFDF
 26947                           postinc2	equ	0xFDE
 26948                           postdec2	equ	0xFDD
 26949                           fsr2h	equ	0xFDA
 26950                           fsr2l	equ	0xFD9
 26951                           status	equ	0xFD8
 26952                           pclatu	equ	0xFFB
 26953                           pclath	equ	0xFFA
 26954                           tblptru	equ	0xFF8
 26955                           tblptrh	equ	0xFF7
 26956                           tblptrl	equ	0xFF6
 26957                           tablat	equ	0xFF5
 26958                           prodh	equ	0xFF4
 26959                           prodl	equ	0xFF3
 26960                           intcon	equ	0xFF2
 26961                           intcon2	equ	0xFF1
 26962                           intcon3	equ	0xFF0
 26963                           indf0	equ	0xFEF
 26964                           postinc0	equ	0xFEE
 26965                           fsr0h	equ	0xFEA
 26966                           fsr0l	equ	0xFE9
 26967                           wreg	equ	0xFE8
 26968                           postdec1	equ	0xFE5
 26969                           fsr1h	equ	0xFE2
 26970                           fsr1l	equ	0xFE1
 26971                           indf2	equ	0xFDF
 26972                           postinc2	equ	0xFDE
 26973                           postdec2	equ	0xFDD
 26974                           fsr2h	equ	0xFDA
 26975                           fsr2l	equ	0xFD9
 26976                           status	equ	0xFD8
 26977                           
 26978                           	psect	rparam
 26979  0000                     pclatu	equ	0xFFB
 26980                           pclath	equ	0xFFA
 26981                           tblptru	equ	0xFF8
 26982                           tblptrh	equ	0xFF7
 26983                           tblptrl	equ	0xFF6
 26984                           tablat	equ	0xFF5
 26985                           prodh	equ	0xFF4
 26986                           prodl	equ	0xFF3
 26987                           intcon	equ	0xFF2
 26988                           intcon2	equ	0xFF1
 26989                           intcon3	equ	0xFF0
 26990                           indf0	equ	0xFEF
 26991                           postinc0	equ	0xFEE
 26992                           fsr0h	equ	0xFEA
 26993                           fsr0l	equ	0xFE9
 26994                           wreg	equ	0xFE8
 26995                           postdec1	equ	0xFE5
 26996                           fsr1h	equ	0xFE2
 26997                           fsr1l	equ	0xFE1
 26998                           indf2	equ	0xFDF
 26999                           postinc2	equ	0xFDE
 27000                           postdec2	equ	0xFDD
 27001                           fsr2h	equ	0xFDA
 27002                           fsr2l	equ	0xFD9
 27003                           status	equ	0xFD8
 27004                           
 27005                           	psect	temp
 27006  00007E                     btemp:
 27007                           	opt stack 0
 27008  00007E                     	ds	1
 27009  0000                     int$flags	set	btemp
 27010                           pclatu	equ	0xFFB
 27011                           pclath	equ	0xFFA
 27012                           tblptru	equ	0xFF8
 27013                           tblptrh	equ	0xFF7
 27014                           tblptrl	equ	0xFF6
 27015                           tablat	equ	0xFF5
 27016                           prodh	equ	0xFF4
 27017                           prodl	equ	0xFF3
 27018                           intcon	equ	0xFF2
 27019                           intcon2	equ	0xFF1
 27020                           intcon3	equ	0xFF0
 27021                           indf0	equ	0xFEF
 27022                           postinc0	equ	0xFEE
 27023                           fsr0h	equ	0xFEA
 27024                           fsr0l	equ	0xFE9
 27025                           wreg	equ	0xFE8
 27026                           postdec1	equ	0xFE5
 27027                           fsr1h	equ	0xFE2
 27028                           fsr1l	equ	0xFE1
 27029                           indf2	equ	0xFDF
 27030                           postinc2	equ	0xFDE
 27031                           postdec2	equ	0xFDD
 27032                           fsr2h	equ	0xFDA
 27033                           fsr2l	equ	0xFD9
 27034                           status	equ	0xFD8


Data Sizes:
    Strings     1340
    Constant    27
    Data        8
    BSS         154
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     88     125
    BANK0           128     90     128
    BANK1           256      0      87
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_129(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_128(CODE[18]), STR_127(CODE[18]), STR_126(CODE[17]), STR_125(CODE[17]), 
		 -> STR_124(CODE[15]), STR_123(CODE[15]), STR_122(CODE[18]), STR_121(CODE[15]), 
		 -> STR_120(CODE[18]), STR_119(CODE[18]), STR_118(CODE[17]), STR_117(CODE[17]), 
		 -> STR_116(CODE[17]), STR_115(CODE[17]), STR_114(CODE[17]), STR_113(CODE[17]), 
		 -> STR_112(CODE[18]), STR_111(CODE[17]), STR_110(CODE[15]), STR_109(CODE[15]), 
		 -> STR_108(CODE[15]), STR_107(CODE[17]), STR_106(CODE[17]), STR_105(CODE[17]), 
		 -> STR_104(CODE[16]), STR_103(CODE[17]), STR_102(CODE[17]), STR_101(CODE[17]), 
		 -> STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[17]), STR_97(CODE[15]), 
		 -> STR_96(CODE[11]), STR_95(CODE[17]), STR_94(CODE[11]), STR_93(CODE[17]), 
		 -> STR_92(CODE[14]), STR_91(CODE[15]), STR_90(CODE[14]), STR_89(CODE[10]), 
		 -> STR_88(CODE[9]), STR_87(CODE[9]), STR_86(CODE[10]), STR_85(CODE[10]), 
		 -> STR_84(CODE[16]), STR_83(CODE[15]), STR_82(CODE[3]), STR_81(CODE[18]), 
		 -> STR_80(CODE[3]), STR_79(CODE[18]), STR_78(CODE[14]), STR_77(CODE[8]), 
		 -> STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), 
		 -> STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), 
		 -> STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[16]), 
		 -> STR_64(CODE[16]), STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), 
		 -> STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), 
		 -> STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), 
		 -> STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), 
		 -> STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), 
		 -> STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), 
		 -> STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), 
		 -> STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), 
		 -> STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), 
		 -> STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _ID->___ftge
    _readIR->_readADC
    _readCOND->_readADC
    ___ftge->___awtoft
    ___awtoft->___awdiv
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _initEEPROM->_EEPROM_write
    _EEPROM_write->_printf
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _arm->_printf
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PortTestPusher->_printf
    _PortTestDC->_printf
    _PlatformTest->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  242814
                    _I2C_Master_Init
                               _Test
                                 _UI
                         _initEEPROM
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   31055
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             20    20      0   19797
                                             49 BANK0     20    20      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       2     2      0       1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                5     3      2     924
                                              6 BANK0      5     3      2
                             _readIR
 ---------------------------------------------------------------------------------
 (2) _ID                                                  37    37      0    5865
                                             27 BANK0     37    37      0
                            ___awdiv
                           ___awtoft
                             ___ftge
                           _delay_ms
                           _readCOND
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     2      2     770
                                              2 BANK0      4     2      2
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _readCOND                                             4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     520
                                             18 BANK0      9     3      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2236
                                             14 BANK0      4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1953
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5393
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11606
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   23352
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22438
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initEEPROM                                           0     0      0   10859
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10859
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   47248
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13403
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    9035
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    9035
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1216
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1196
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0  117581
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                       _PlatformTest
                         _PortTestDC
                     _PortTestPusher
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                                _arm
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           6     6      0    9192
                                             43 BANK0      6     6      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _arm                                                  3     3      0    9104
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    9035
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15671
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    9035
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestPusher                                       1     1      0    9035
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestDC                                           1     1      0    9035
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PlatformTest                                        12    12      0    9308
                                             43 BANK0     12    12      0
                            _lcdInst
                             _printf
                            _readADC
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19821
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                        _stopSignals
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5393
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5393
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                         10    10      0    9310
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8900
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   84276
                                             72 COMRAM    16    16      0
                     _printSortTimer
                     _updateArmState
                         _updateMenu
                  _updateServoStates
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     593
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printRTC                                          25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (10) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _updateArmState                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      31    31      0    5188
                                             41 COMRAM    31    31      0
                          i2___awmod
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2___awmod                                            6     2      4     400
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
       _updateServoPosition
     _PlatformTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _stopSignals
     _PortTestDC
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTestPusher
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _arm
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initEEPROM
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       ___awdiv
         ___awmod (ARG)
       ___awtoft
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftge
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
       _delay_ms
       _readCOND
         _readADC
       _readIR
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___awmod
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateArmState
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition
   i2_change_state_to_menu_start
     i2_lcdInst
       i2_lcdNibble
     i2_printRTC
       i2_getRTC
         i2_I2C_Master_Read
           i2_I2C_Master_Wait
         i2_I2C_Master_Start
           i2_I2C_Master_Wait
         i2_I2C_Master_Stop
           i2_I2C_Master_Wait
         i2_I2C_Master_Write
           i2_I2C_Master_Wait
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
       i2_strcpy
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      57       7       34.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     58      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     154      34        0.0%
DATA                 0      0     154       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Apr 12 15:16:55 2017

                                    _i 013D                     i2_I2C_Master_Start 6136  
                   i2_I2C_Master_Write 610C                                     _ID 1192  
                                   l78 60A4                       _f_panning_to_bin 0069  
                          __CFG_CPD$ON 000000                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0075  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
               __end_of_updateArmState 5B26                                    ID@i 00A9  
                                  ID@j 00BC                                    ID@n 00BE  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l200 0102  
                                  l192 00E2                                    l195 00E6  
                                  l515 4D84                                    l634 34A8  
                                  l900 171C                                    l901 1736  
                                  l806 18B4                                    l904 17CE  
                                  l816 1988                                    l841 1BD0  
                                  l826 1AA2                                    l818 19DC  
                                  l851 1D6C                                    l819 19C2  
                                  l853 1CBE                                    l829 1ADC  
                                  l863 1DC4                                    l855 1CD0  
                                  l847 1D6E                                    l839 1B6E  
                                  l872 12D2                                    l856 1CE4  
                                  l848 1C9A                                    l881 14BA  
                                  l857 1CF8                                    l874 1340  
                                  l858 1D0C                                    l859 1D22  
                                  l972 5428                                    l877 15DE  
                                  l878 145A                           __CFG_CPB$OFF 000000  
                                  _PR2 000FCB                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
            __end_of_updateServoStates 4150                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _arm 4792  
                                  _log 00F0                                    _sel 00FD  
                                  _var 014D                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  __end_of_BlockerTest 4316                    _log_count_can_w_lab 0141  
      __end_of_change_state_to_menu_11 5D54        __end_of_change_state_to_menu_12 5B96  
      __end_of_change_state_to_menu_22 5B5E        __end_of_change_state_to_menu_23 5D24  
         _f_can_coming_to_distribution 0133                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 5E44        __end_of_change_state_to_logs_12 5E14  
      __end_of_change_state_to_logs_22 5DE4        __end_of_change_state_to_logs_23 5EA0  
      __end_of_change_state_to_logs_33 5DB4        __end_of_change_state_to_logs_34 5D84  
                                 ??_ID 009B                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1310 4B94                                   l1313 4B98  
                                 l1322 265A                                   l1170 48B2  
                                 l1403 0EB0                                   l1420 1120  
                                 l2038 554C                                   l1415 104A  
                                 l1343 2848                                   l1319 2656  
                                 l1183 6070                                   l2048 57C8  
                                 l1520 42B8                                   l1336 2846  
                                 l1328 273E                                   l1192 4444  
                                 l1433 4C50                                   l1514 4252  
                                 l1290 46F2                                   l1339 2840  
                                 l1444 4CC2                                   l1452 4CDC  
                                 l1373 09EE                                   l1349 28DC  
                                 l1366 0944                                   l1534 4882  
                                 l1519 429E                                   l1551 5876  
                                 l1543 487C                                   l1535 4844  
                                 l1287 46D2                                   l1480 33C0  
                                 l1376 0A54                                   l1481 33DA  
                                 l1449 4CD6                                   l1377 0AA2  
                                 l1369 0948                                   l1482 33DE  
                                 l1490 5326                                   l1378 0B08  
                                 l1467 33E4                                   l1379 0B56  
                                 l1476 3372                                   l1477 338C  
                                 l1557 5886                                   ?_arm 0001  
                                 l1591 2018                                   l1497 5336  
                                 l1855 4658                                   l7001 1E06  
                                 l7011 1E44                                   l7101 212A  
                                 l7005 1E10                                   l7031 1F04  
                                 l7113 216C                                   l7041 1F7C  
                                 l1985 4FDA                                   l7123 21DE  
                                 l7107 2146                                   l7043 1F94  
                                 l7027 1EF2                                   l7019 1EC0  
                                 l7131 5BAC                                   l7203 4662  
                                 l7109 2152                                   l7117 2180  
                                 l7037 1F6A                                   l7029 1EFE  
                                 l7053 1FDE                                   l7125 21EA  
                                 l7141 52B2                                   l7221 4F6E  
                                 l7119 2186                                   l7071 2070  
                                 l7047 1FC0                                   l7039 1F76  
                                 l7231 4FC8                                   l7223 4F74  
                                 l7065 2050                                   l7049 1FD8  
                                 l9001 0E66                                   l7137 529C  
                                 l7129 5BA0                                   l7209 467E  
                                 l7083 20AC                                   l7171 5442  
                                 l9011 0E8E                                   l7147 52D2  
                                 l7219 4F5E                                   l7093 2106  
                                 l7069 206A                                   l7165 5410  
                                 l9005 0E70                                   l7181 459A  
                                 l8117 1872                                   l7095 2110  
                                 l9015 0E98                                   l8215 1A8C  
                                 l8143 1902                                   l8127 18BC  
                                 _ADIE 007CEE                                   l7089 20CE  
                                 l9033 0F02                                   l9009 0E88  
                                 l7441 34D0                                   l7433 3426  
                                 l7193 460C                                   l7185 45AE  
                                 l8241 1B1C                                   l8225 1ABC  
                                 l8209 1A6E                                   l9123 10BC  
                                 l9115 109A                                   l9043 0F2A  
                                 l9203 482C                                   l9211 484A  
                                 l7451 3566                                   l7443 34EE  
                                 l7195 463C                                   l7187 45BC  
                                 l8403 12FC                                   l8315 1D2E  
                                 l8323 1D76                                   l8227 1AC6  
                                 l9133 10E4                                   l9125 10C2  
                                 l9037 0F1A                                   l9029 0EF8  
                                 l9213 4864                                   l9205 4836  
                                 l7461 35FC                                   l7453 3584  
                                 l7445 350C                                   l7197 464A  
                                 l7189 45EC                                   l8317 1D64  
                                 l8261 1BAA                                   l8253 1B72  
                                 l8237 1AF6                                   l8165 1972  
                                 l9151 1140                                   l9119 10A4  
                                 l9063 0F9E                                   l9055 0F7C  
                                 l9047 0F42                                   l9039 0F20  
                                 l9215 486E                                   l6815 5E6A  
                                 l7455 35A2                                   l7447 352A  
                                 l7439 34B2                                   l7615 4FFA  
                                 l8247 1B46                                   l8335 1DB8  
                                 l8175 19A2                                   l6833 5F18  
                                 l9161 1168                                   l9129 10CC  
                                 l9081 1000                                   l9073 0FC6  
                                 l9065 0FA4                                   l7457 35C0  
                                 l7449 3548                                   l7465 361A  
                                 l8521 16E0                                   l8513 16B8  
                                 l8425 140E                                   l7625 5086  
                                 l8249 1B52                                   l8337 1DC6  
                                 l8177 19AC                                   l6851 5508  
                                 l9403 33AA                                   l9251 4CB6  
                                 l9155 114A                                   l9139 110A  
                                 l9091 1028                                   l9059 0F86  
                                 l7459 35DE                                   l7467 3678  
                                 l8427 1418                                   l8371 1232  
                                 l7731 53C4                                   l7715 537C  
                                 l7619 5010                                   l6861 553E  
                                 l6853 550E                                   l9165 1172  
                                 l9149 113A                                   l9085 100A  
                                 l9069 0FAE                                   l7661 491E  
                                 l7901 5228                                   l7805 4DEA  
                                 l8525 16F0                                   l8509 16A8  
                                 l8437 1466                                   l8269 1C2C  
                                 l6871 5790                                   l6791 5EE0  
                                 l9319 3152                                   l9255 4CCA  
                                 l9247 4C8E                                   l9159 1162  
                                 l9095 1032                                   l8703 2896  
                                 l7815 4E6E                                   l7735 53DC  
                                 l7719 5392                                   l8287 1CA6  
                                 l6849 54FC                                   l6873 5796  
                                 l6793 5EF2                                   l9337 3202  
                                 l9281 535E                                   l9169 118A  
                                 l9089 1022                                   l8721 2928  
                                 l7753 4E8E                                   l9601 50C2  
                                 l7673 4956                                   l7665 4928  
                                 l7809 4E2A                                   l8553 178C  
                                 l8561 17D0                                   l8529 1706  
                                 l8465 15C2                                   l8457 158C  
                                 l8385 128E                                   l8369 122A  
                                 l9339 3208                                   l8643 2680  
                                 l7907 5254                                   l8571 49C4  
                                 l7683 5F28                                   l6971 5164  
                                 l8483 1624                                   l8467 15CA  
                                 l6877 57BA                                   l6869 5784  
                                 l9533 41DA                                   l9541 4220  
                                 l9381 3344                                   l9357 32B8  
                                 l8901 0C60                                   l8741 29A0  
                                 l8733 298E                                   l8709 28D8  
                                 l8661 2738                                   l7765 4EC2  
                                 l7781 4F12                                   l9621 512E  
                                 l9613 510C                                   l9605 50D6  
                                 l7677 4960                                   l7669 4940  
                                 l8573 49DE                                   l6973 5188  
                                 l9375 331A                                   l8911 0C88  
                                 l9199 4806                                   l8663 2746  
                                 l7767 4ECE                                   l7759 4EA4  
                                 l9607 50E2                                   l8567 4990  
                                 l7687 5F3E                                   l9377 3330  
                                 l9369 32FA                                   l8905 0C78  
                                 l8745 29D6                                   l8729 2958  
                                 l8681 27FE                                   l7785 4F26  
                                 l7777 4F04                                   l7769 4ED4  
                                 l9609 50E8                                   l9617 511A  
                                 l9801 028C                                   l8569 49AA  
                                 l8577 49F8                                   l6977 51AC  
                                 l8497 1670                                   l6995 1DE0  
                                 l9387 335C                                   l8931 0CFC  
                                 l8923 0CDA                                   l8915 0CA0  
                                 l8907 0C7E                                   l9731 0144  
                                 l9723 0128                                   l8579 4A26  
                                 l8499 1678                                   l9565 427E  
                                 l9557 4254                                   l9397 3392  
                                 l8941 0D24                                   l8933 0D02  
                                 l9901 0648                                   l9821 02F6  
                                 l9805 02A4                                   l9717 00FE  
                                 l7797 5A82                                   l6999 1DF4  
                                 l9567 4288                                   l9559 4264  
                                 l8927 0CE4                                   l8871 0BD2  
                                 l8791 09C2                                   l9911 0672  
                                 l9831 038C                                   l9823 0314  
                                 l9735 015C                                   l9727 013A  
                                 l9577 42BA                                   l8953 0D68  
                                 l8937 0D0C                                   l8881 0BFA  
                                 l8785 09B2                                   l9905 0660  
                                 l9841 0422                                   l9833 03AA  
                                 l9825 0332                                   l9753 01C6  
                                 l7897 5212                                   l9579 42CA  
                                 l9587 4310                                   l8963 0D90  
                                 l8875 0BDC                                   l8795 09DA  
                                 l8787 09B8                                   l9915 067C  
                                 l9843 0440                                   l9835 03C8  
                                 l9827 0350                                   l9851 04E0  
                                 l9763 01EE                                   l9755 01CC  
                                 l9739 016E                                   l8957 0D80  
                                 l8949 0D5E                                   l8885 0C04  
                                 l9597 50B2                                   l9941 0704  
                                 l9845 045E                                   l9837 03E6  
                                 l9829 036E                                   l8983 0E04  
                                 l8975 0DE2                                   l8967 0DA8  
                                 l8959 0D86                                   l8879 0BF4  
                                 l9951 072E                                   l9919 0694  
                                 l9863 0544                                   l9855 0522  
                                 l9839 0404                                   l9791 0270  
                                 l9783 024E                                   l9759 01D6  
                                 STR_1 FB7F                                   STR_2 FF56  
                                 l8993 0E2C                                   l8985 0E0A  
                                 l8897 0C56                                   l8889 0C1C  
                                 l9945 071C                                   l9937 06FA  
                                 l9873 0560                                   l9849 047C  
                                 l9769 01FC                                   STR_3 FB6D  
                                 STR_4 FE79                                   l8979 0DEC  
                                 l9955 0738                                   l9859 052C  
                                 l9787 0258                                   STR_5 FB6D  
                                 STR_6 FDF5                                   l8989 0E14  
                                 l9981 07C0                                   l9877 0578  
                                 l9869 0556                                   l9797 0282  
                                 STR_7 FFC3                                   STR_8 FFDA  
                                 l9991 07EA                                   l9959 0750  
                                 STR_9 FFCA                                   l9985 07D8  
                                 l9977 07B6                                   l9897 063E  
                                 l9995 07F4                                   l9999 080C  
              ??i2_updateServoPosition 0005                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 _PEIE 007F96                                   u8020 29C4  
                                 u5700 51A2                                   _RCEN 007E2B  
                                 u5701 519E                                   u8110 0AA2  
                                 u6510 34A8                                   u5710 51A4  
                                 u5720 5A16                                   u5480 5E68  
                                 u5721 5A12                                   u8130 0B56  
                                 u5730 5A18                                   u5820 1FB6  
                                 u8028 29C8                                   u7500 13E4  
                                 u7260 1BE2                                   u9030 3328  
                                 u6470 59CA                                   u9040 3340  
                                 u6480 59CC                                   u5680 517E  
                                 u7280 1C08                                   u9041 333C  
                                 u8090 09EE                                   u5690 5180  
                                 u7530 1458                                   u7290 1C0A  
                                 u5827 1FAC                                   u5780 1F3E  
                                 u9221 4274                                   i2l78 60B8  
                                 u9230 4276                                   u7470 138E  
                                 u7278 1BE6                                   u6495 5802  
                                 u7560 153A                                   u7480 1390  
                                 u8610 4822                                   u7570 153C  
                                 u7490 13E2                                   u5787 1F34  
                                 u9171 4248                                   u9180 424A  
                                 u8620 4824                                   u7840 26C2  
                                 u7760 1798                                   u6960 187E  
                                 u7930 2828                                   u7850 26C4  
                                 u8900 3194                                   u8740 4C7A  
                                 u8660 485A                                   u7780 17CE  
                                 u6980 18B4                                   u8910 3196  
                                 u8670 485C                                   u7880 2788  
                                 u7881 2784                                   u8930 324A  
                                 u8770 4CA4                                   u7890 278A  
                                 u7778 179C                                   u6978 1882  
                                 u8940 324C                                   u7948 282C  
                                 u8758 4C7E                                   u7990 297C  
                                 u8980 32E2                                   u8788 4CA8  
                                 u7998 2980                                   u8998 32E6  
                                 _RSEN 007E29                            _stopSignals 6044  
                                 _Test 468C                                   _back 0063  
                                 _main 4CE2                                   _down 0065  
                         ___ftpack@arg 0080                                   _keys FAA7  
                         ___ftpack@exp 0083                                   _time 011C  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 5FE2  
                                 btemp 007E                   ??i2_I2C_Master_Start 0002  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                   _log_count_can_no_lab 013F  
                      __end_ofi2_putch 60F6                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 397C  
                          i2_lcdNibble 588E                        __end_of_Loading 1DD2  
                 __end_of_actuatorTest 1192                                  ??_arm 00AB  
                                ID@res 00B6             i2updateServoPosition@timer 0003  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                                  l10021 0874  
                                l10031 089E                                  l10025 088C  
                                l10017 086A                                  l10035 08A8  
                                l10043 08CC                                  l10039 08C0  
                                l10321 43FE                                  l10351 46F8  
                                l10335 468E                                  l10361 4716  
                                l10353 46FE                                  l10363 471C  
                                l10355 4704                                  l10365 4722  
                                l10357 470A                                  l10373 4734  
                                l10367 4728                                  l10359 4710  
                                l10375 4786                                  l10295 4362  
                                l10615 4D56                                  l10607 4D2C  
                                l10369 472E                                  l10297 4376  
                                l10617 4D5C                                  l10633 4D86  
                                l10609 4D42                                  l10627 4D7A  
                                l10619 4D62                                  l10629 4D80  
                 __end_of_EEPROM_write 4978                            ID@time_1154 00A3  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 4F30  
                      ?_updateArmState 0001                                  _EEADR 000FA9  
                                STR_10 FFE6                                  STR_11 FFEA  
                                STR_12 FFFA                                  STR_20 FFEE  
                                STR_13 FFDE                                  STR_21 FAC2  
                                STR_14 FFD6                                  STR_22 FF9A  
                                STR_30 FE06                                  STR_15 FFD2  
                                STR_23 FF48                                  STR_31 FDE4  
                                STR_16 FFE2                                  STR_24 FD4B  
                                STR_32 FD29                                  STR_40 FCE5  
                                STR_17 FFF2                                  STR_25 FE28  
                                STR_33 FD3A                                  STR_41 FCD4  
                                STR_18 FFF6                                  STR_34 FDD3  
                                STR_50 FDB1                                  STR_42 FD8F  
                                STR_26 FD5C                                  STR_43 FD8F  
                                STR_35 FDD3                                  STR_51 FFDA  
                                STR_19 FFCE                                  STR_27 FE17  
                                STR_52 FFCA                                  STR_60 FFF2  
                                STR_28 FD6D                                  STR_36 FD18  
                                STR_44 FCF6                        __end_of___awmod 5138  
                                STR_45 FCE5                                  STR_37 FD29  
                                STR_53 FFE6                                  STR_61 FFF6  
                                STR_29 FE25                                  STR_62 FFCE  
                                STR_54 FFEA                                  STR_70 FF01  
                                STR_38 FDC2                                  STR_46 FDA0  
                                STR_47 FDA0                                  STR_55 FFFA  
                                STR_63 FAC2                                  STR_71 FF3A  
                                STR_39 FD7E                                  STR_56 FFDE  
                                STR_80 FE25                                  STR_64 FE59  
                                STR_48 FD07                                  STR_72 FC5D  
                                STR_49 FCF6                                  STR_57 FFD6  
                                STR_73 FF1E                                  STR_65 FE69  
                                STR_81 FB13                                  STR_58 FFD2  
                                STR_90 FF3A                                  STR_82 FE25  
                                STR_74 FF64                                  STR_66 FADA  
                                STR_59 FFE2                                  STR_67 FFBC  
                                STR_91 FEF2                                  STR_75 FEE3  
                                STR_83 FEB6                                  STR_76 FF2C  
                                STR_92 FF10                                  STR_84 FE39  
                                STR_68 FC90                                  STR_77 FFAD  
                                STR_85 FF86                                  STR_69 FCA1  
                                STR_93 FC6E                                  STR_86 FF86  
                                STR_78 FF3A                                  STR_94 FF70  
                                STR_87 FFA4                                  STR_95 FC7F  
                                STR_79 FB25                                  STR_88 FFA4  
                                STR_96 FF7B                                  STR_89 FF90  
                                STR_97 FED4                                  STR_98 FBE6  
                                STR_99 FBD5           i2updateServoPosition@my_time 0007  
                                ?_sort 0001                        __end_of___lldiv 4FEC  
         i2updateServoPosition@time_us 0001                                  u11007 1C46  
                                u11017 1C88                                  u11107 1D10  
                                u11027 1CC2                                  u10340 4444  
                                u11117 1D1A                                  u11037 1CCA  
                                u12007 105C                                  u11207 1634  
                                u11127 1D26                                  u11047 1CD4  
                                _T0CON 000FD5                                  u12017 10AC  
                                u11217 1720                                  u11137 1D90  
                                u11057 1CDE                                  u12107 5840  
                                u12027 10D4                                  u11307 002A  
                                u11227 172A                                  u11147 5C52  
                                u11067 1CE8                        ___awdiv@divisor 0088  
                                u12117 4C1A                                  u12037 1124  
                                u11317 0114                                  u11237 1750  
                                u11157 539A                                  u11077 1CF2  
                                u12207 33CE                                  u12127 3130  
                                u12047 112E                                  u11407 0568  
                                u11327 014C                                  u11247 5F34  
                                u11167 11AC                                  u11087 1CFC  
                                _T1CON 000FCD                                  u12217 2218  
                                u12137 31AA                                  u12057 1152  
                                u11417 0592                                  u11337 0188  
                                u11257 5A28                                  u11177 11EE  
                                u11097 1D04                                  u12307 2448  
                                u12227 2264                                  u12147 31F6  
                                u12067 117A                                  u11507 0826  
                                u11427 0650                                  u11347 01DE  
                                u11267 5A5C                                  u11187 12E2  
                                u12317 247A                                  u12237 22B0  
                                u12157 3260                                  u12077 52F0  
                                u11517 087C                                  u11437 0684  
                                u11357 020A                                  u11277 48D4  
                                u11197 14CA                                  u12407 4186  
                                u12327 24C6                                  u12247 22E4  
                                u12167 32AC                                  u12087 5340  
                                u11607 27F2                                  u11527 08B0  
                                u11447 06AE                                  u11367 0260  
                                u11287 4930                                  _T2CON 000FCA  
                                u12417 42A2                                  u12337 24FA  
                                u12257 2316                                  u12177 3376  
                                u12097 5354                                  u11617 285A  
                                u11537 469C                                  u11457 070C  
                                u11377 0294                                  u11297 4968  
                                u12427 42AC                                  u12347 252C  
                                u12267 2362                                  u12187 337E  
                                u11707 4BAA                                  u11627 2888  
                                u11547 2606                                  u11467 0740  
                                u11387 02BE                                  u10907 19D0  
                                u12437 5EE8                                  u12357 2578  
                                u12277 2396                                  u12197 33C4  
                                u11717 08F4                                  u11637 28CC  
                                u11557 264A                                  u11477 076A  
                                u11397 0534                                  u10917 19EC  
                                u12447 565A                                  u12367 25AC  
                                u12287 23C8                                  u11807 0B36  
                                u11727 0938                                  u11647 28EE  
                                u11567 266C                                  u11487 07C8  
                                u10927 1A20                                  _T3CON 000FB1  
                                u12457 5664                                  u12377 25DE  
                                u12297 2414                                  u11817 0B66  
                                u11737 095A                                  u11657 291C  
                                u11577 26D8                                  u11497 07FC  
                                u10937 1AA6                                  u10857 1800  
                                u12467 5690                                  u12387 54A8  
                                u11907 0DF4                                  u11827 0BE4  
                                u11747 09CA                                  u11667 2936  
                                u11587 272C                                  u10947 1AAE  
                                u10867 1930                                  u12477 569A  
                                u12397 54C4                                  u11917 0E1C  
                                u11837 0C0C                                  u11757 09FE  
                                u11677 47A0                                  u11597 279E  
                                u10957 1AE0                                  u10877 198C  
                                u11927 0E78                                  u11847 0C68  
                                u11767 0A64                                  u11687 4B44  
                                u10967 1AEA                                  u10887 1994  
                                u11937 0EA0                                  u11857 0C90  
                                u11777 0A82                                  u11697 4B88  
                                u10977 1B04                                  u10897 19C6  
                                u11947 0F0A                                  u11867 0CEC  
                                u11787 0AB2                                  u10987 1BC2  
                                u11957 0F32                                  u11877 0D14  
                                u11797 0B18                                  u10997 1C1E  
                                u11967 0F8E                                  u11887 0D70  
                                u11977 0FB6                                  u11897 0D98  
                                u11987 1012                                  u11997 103A  
                      __end_of___lwdiv 5556                        __end_of___lwmod 57D2  
                                i2l275 3978                                  i2l634 3A0A  
                                i2l933 2B94                                  i2l942 2C30  
                                i2l972 56D6                        ___awdiv@counter 008A  
                                i2l999 5B22                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                             _BothServos 220A  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 60EA  
                      __end_of_handler 3F88                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 5EF8                        __end_of_initLCD 5A66  
                       __CFG_EBTRB$OFF 000000                                  _debug 012D  
                           i2isdigit@c 0003                          ___awtoft@sign 0091  
                                _getIR 5366                        __end_of_loadRTC 525C  
                      __end_of_readMAG 5A20                        __end_of_dpowers FAC2  
                                _first 0139                                  _enter 0067  
                                arm@on 00AC                        __end_of_isdigit 5F22  
                                _input 007D                          ___ftpack@sign 0084  
                                _putch 60CA                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 5F98  
                     __end_ofi2_getRTC 55C8                    _log_count_pop_w_tab 0143  
                                status 000FD8                            readCOND@res 0084  
                   __size_ofi2___awmod 0070                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 30EE  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 5C34                            Loading@addr 00B3  
                     _count_can_no_lab 0123                   __size_of_EEPROM_read 0018  
                      __initialization 593A                         readIR@ana_port 0082  
                         __end_of_Test 4792                     __size_ofi2_lcdInst 000C  
                         __end_of_main 4DAA                           __end_of_keys FAB8  
                         __end_of_sort 6004                             i2printf@ap 0020  
                           i2printf@cp 001E                     __size_ofi2_isdigit 001E  
                          _BlockerTest 4150                                 ??_Test 00C6  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00C5  
                        __activetblptr 000003                                 ID@res1 00B2  
                               ID@res2 00B4             __size_of_updateServoStates 01C8  
                               ID@time 00B1             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                                 ?_getIR 0086  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FBB3  
                               STR_101 FC3B                                 STR_110 FE98  
                               STR_102 FC4C                                 STR_111 FCC3  
                               STR_103 FB91                                 STR_104 FE49  
                               STR_120 FB01                                 STR_112 FAEF  
                               STR_121 FE89                                 STR_113 FBF7  
                               STR_105 FBC4                                 STR_114 FC2A  
                               STR_106 FBA2                                 STR_122 FB49  
                               _ADRESH 000FC4                                 STR_107 FBC4  
                               STR_115 FC2A                                 STR_123 FE89  
                               STR_124 FE89                                 STR_108 FEC5  
                               STR_116 FC19                                 _EEADRH 000FAA  
                               STR_117 FC2A                                 STR_109 FEA7  
                               STR_125 FC08                                 STR_118 FC19  
                               STR_126 FCB2                                 _ADRESL 000FC3  
                               STR_127 FAEF                                 STR_119 FB37  
                               STR_128 FB5B                                 STR_129 FFB5  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                     __end_of___awtoft 5AAA                                 ?_putch 0001  
                     __end_of___ftpack 468C                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 5CC4  
            i2_change_state_to_menu_22 5C94                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1100 3F30                                 i2l1102 3F4C  
                               i2l1091 3E8C                                 i2l2038 5930  
                               i2l1183 609C                                 i2l2048 5AE2  
                               i2l1591 2F5A                                 i2l8013 3CB0  
                               i2l7303 2E6A                                 i2l8023 3CD6  
                               i2l8007 3CA2                                 i2l7313 2EC2  
                               i2l7305 2E74                                 i2l7401 30D2  
                               i2l8041 3D10                                 i2l8033 3CF8  
                               i2l8017 3CCC                                 i2l7243 558E  
                               i2l7323 2F0E                                 i2l7315 2ECC  
                               i2l7307 2E78                                 i2l8051 3D30  
                               i2l8027 3CEA                                 i2l7253 55B8  
                               i2l7341 2F88                                 i2l7325 2F20  
                               i2l7317 2ED2                                 i2l8029 3CEE  
                               i2l7405 5C0C                                 i2l7247 559E  
                               i2l7319 2EE4                                 i2l7271 2D8A  
                               i2l8063 3D66                                 i2l8055 3D42  
                               i2l8047 3D1E                                 i2l7407 5C14  
                               i2l7345 2FA0                                 i2l7329 2F24  
                               i2l7281 2DAE                                 i2l7371 301C  
                               i2l7347 2FA4                                 i2l7275 2D9A  
                               i2l8059 3D54                                 i2l6901 5FB8  
                               i2l7365 2FF0                                 i2l7277 2DA8  
                               i2l8069 3D70                                 i2l7383 3048  
                               i2l7359 2FD6                                 i2l7295 2E42  
                               i2l7287 2DE0                                 i2l7385 3050  
                               i2l7393 3076                                 i2l7377 3032  
                               i2l7369 3014                                 i2l7395 307C  
                               i2l6925 603C                                 i2l7389 3064  
                               i2l6935 58FE                                 i2l7399 30CA  
                               i2l7583 4524                                 i2l6937 5906  
                               i2l6947 5926                                 i2l6939 590A  
                               i2l6963 5AD8                                 i2l6955 5AB8  
                               i2l7595 4568                                 i2l7587 4534  
                               i2l6957 5AC0                                 i2l7861 3A56  
                               i2l6959 5AC4                                 i2l7951 3BD6  
                               i2l7871 3AC4                                 i2l7863 3A6C  
                               i2l7855 3A14                                 i2l7961 3C00  
                               i2l7873 3ADA                                 i2l7865 3A82  
                               i2l7857 3A2A                                 i2l7881 3B1C  
                               i2l7849 39A8                                 i2l7963 3C04  
                               i2l7875 3AF0                                 i2l7867 3A98  
                               i2l7859 3A40                                 i2l7883 3B76  
                               i2l9643 56EC                                 i2l9661 55E8  
                               i2l7981 3C3A                                 i2l7973 3C22  
                               i2l7877 3B06                                 i2l7869 3AAE  
                               i2l9637 56C2                                 i2l7983 3C40  
                               i2l7975 3C28                                 i2l7959 3BF0  
                               i2l9681 562E                                 i2l9673 5616  
                               i2l9665 55F6                                 i2l9657 55DC  
                               i2l7977 3C2E                                 i2l7969 3C0E  
                               i2l9667 55FE                                 i2l7979 3C34  
                               i2l7987 3C46                                 i2l9669 5602  
                               i2l9677 5620                                 i2l7999 3C8A  
              _f_most_recent_sort_time 0137                          PlatformTest@i 00B1  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR2IF 007CF1  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR2ON 007E52                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                               _IR_res 00E0                              ??_Loading 00B1  
                     __end_of_delay_ms 5F4A                   delay_ms@milliseconds 0081  
                       __CFG_XINST$OFF 000000                       __end_of_dispLogs 5FE2  
                               ___ftge 4DAA                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 4A5A  
                               ___wmul 5BCC                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 5C34  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                     __end_of_readCOND 59D4                                 _getRTC 525C  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 6026                                 _initUI 5C64  
                               _readIR 5138                                 _logRun 4316  
                               getIR@i 0089                                 clear_0 5960  
                               clear_1 596C                                 clear_2 5978  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestDC 4C0C                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1DD2  
                            ??_handler 0049                __size_of_initGlobalVars 00DC  
                         ?_retrieveLog 0007                                 _strcpy 5B96  
                   __size_of_SpeedTest 0084                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 5F72  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 5F4A  
                          ?_BothServos 0001                              ??_isdigit 0080  
                    __end_ofi2___awmod 5638                      __end_ofi2___lwdiv 593A  
                     __end_of_printRTC 36BC                           __mediumconst FAA6  
                    __end_ofi2___lwmod 5AEC                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 00F4                         i2___awmod@sign 0006  
                __end_of_algorithmTest 4C0C                      __end_ofi2_lcdInst 6102  
                    __end_ofi2_isdigit 6044                             __accesstop 0080  
              __end_of__initialization 597E                          ?_inputHandler 002A  
                           ___ftge@ff1 0092                             ___ftge@ff2 0095  
                _most_recent_sort_time 0147                          ___rparam_used 000001  
                        ?_PlatformTest 0001                printSortTimer@start_sec 003B  
                __size_of_actuatorTest 08B8                             ___awtoft@c 008E  
                        i2_EEPROM_read 608E                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                         __pcstackCOMRAM 0001  
                _agitator_toggle_count 0061                  __size_of_EEPROM_write 00E8  
                         __pidataBANK1 6116                    BlockerTest@cam_flag 00B1  
                        __end_of_getIR 53E8                            i2printRTC@i 0041  
                        _initSortTimer 4FEC            __end_of_updateServoPosition 5466  
                        __end_of_putch 60DA                        ID@reflectivity1 009D  
                      ID@reflectivity2 00A1                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 17DC  
                           __end_of_UI 08DA                              ?i2___wmul 0001  
                   __size_of_lcdNibble 006C                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002D  
   __end_of_change_state_to_menu_start 5ECC          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 5EA0                  printSortTimer@cur_sec 003D  
                            ?i2_printf 000D                                ??_getIR 0088  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0127  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 08DA                __size_of_PortTestPusher 005C  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                              ID@cond1 009F                           ?_stopSignals 0001  
                       ??_inputHandler 002C         __size_ofi2_updateServoPosition 0068  
        __end_ofi2_updateServoPosition 570C                           _EEPROM_write 4890  
                       ??_PlatformTest 00AB               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                                UI@F3252 014F  
                    __end_of_SpeedTest 5366                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 03EE                      printRTC@RTC_month 00BC  
                              ?___ftge 0092                                _ID$1160 00A7  
                              _ID$1144 00A4                                _ID$1161 00A8  
                              _ID$1153 00A5                                _ID$1158 00A6  
                         ?i2_lcdNibble 0001                                UI@i_413 00C9  
                              UI@i_440 00CF                                UI@i_416 00CA  
                              UI@i_417 00CB                                UI@i_451 00D4  
                              UI@i_443 00D0                                UI@i_435 00CC  
                              UI@i_452 00D5                                UI@i_444 00D1  
                              UI@i_436 00CD                                UI@i_447 00D2  
                              UI@i_439 00CE                                UI@i_448 00D3  
                     ??_updateArmState 0001                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getMAG 0001  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0082                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                            ?___awtoft 008E                              ?___ftpack 0080  
                          ?_PortTestDC 0001                                ?_printf 008E  
                              _UI$2443 00C6                                ?_strcpy 0080  
                      _pan_servo_state 006B                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                                i2l10111 379C  
                              i2l10103 3780                                i2l10131 37EA  
                              i2l10123 37CE                                i2l10115 37AA  
                              i2l10107 378E                                i2l10205 390E  
                              i2l10151 3840                                i2l10143 381C  
                              i2l10135 3800                                i2l10127 37DC  
                              i2l10119 37C0                                i2l10071 371C  
                              i2l10063 3700                                i2l10057 36EC  
                              i2l11201 4048                                i2l11211 392C  
                              i2l10171 388E                                i2l10163 386A  
                              i2l10155 384E                                i2l10147 382A  
                              i2l10139 380E                                i2l10091 3754  
                              i2l10083 3738                                i2l10075 372A  
                              i2l10067 370E                                i2l10059 36F2  
                              i2l11203 4052                                i2l11221 3C7A  
                              i2l11213 394E                                i2l11205 4136  
                              i2l10407 2B22                                i2l11215 396A  
                              i2l10191 38DC                                i2l10183 38C0  
                              i2l10175 389C                                i2l10167 3880  
                              i2l10159 385C                                i2l10095 3764  
                              i2l10087 3746                                i2l11207 4146  
                              i2l10511 3FF2                                i2l10425 2BC0  
                              i2l10513 4006                                i2l10505 3FDC  
                              i2l10521 405A                                i2l10451 2C4E  
                              i2l10419 2B5E                                i2l11219 3C5E  
                              i2l10195 38EA                                i2l10187 38CE  
                              i2l10179 38AA                                i2l10099 3772  
                              i2l10523 4064                                i2l10437 2BE6  
                              i2l10533 40A2                                i2l10471 2CDC  
                              i2l10463 2C9C                                i2l10455 2C5C  
                              i2l10199 3900                                i2l10527 407C  
                              i2l10519 4010                                i2l10703 3EB4  
                              i2l10473 2CE2                                i2l10465 2CA6  
                              i2l10457 2C66                                i2l10385 29EA  
                              i2l10553 411E                                i2l10467 2CA8  
                              i2l10395 2A54                                i2l10539 40C8  
                              i2l10651 3E1A                                i2l10389 29FA  
                              i2l11197 4034                                i2l10493 3FA6  
                              i2l10725 3EFE                                i2l10645 3E0A  
                              i2l10661 3E44                                i2l10583 5AF6  
                              i2l11199 403E                                i2l10751 3F4A  
                              i2l10719 3EE4                                i2l10647 3E0E  
                              i2l10655 3E22                                i2l10585 5AFC  
                              i2l10497 3FBC                                i2l10729 3F04  
                              i2l10657 3E3A                                i2l10499 3FC6  
                              i2l10675 3E60                                i2l10589 5B02  
                              i2l10697 3EA6                              ?_delay_ms 0001  
                       PlatformTest@on 00B5                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                _RTCflag 00E6  
                            ?_readCOND 0001                             _initEEPROM 6078  
                              i2_putch 60EA                              ?_initTime 0080  
                      _f_loadingNewCan 00EE                        i2printRTC@month 003D  
                __size_of_Distribution 00E2            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 56A4                                _Loading 17DC  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                        __size_of___ftge 00C8  
                              ___awdiv 4E72                                ___awmod 5096  
                           _initServos 5466                                ___lldiv 4F30  
                      __size_of___wmul 0036                        __size_of_getMAG 0030  
                              ___lwdiv 54DE                                ___lwmod 5770  
                      __size_of_getRTC 0086                        printSortTimer@i 0047  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                           ?_BlockerTest 0001  
                      __size_of_initUI 0030                        __size_of_readIR 0098  
                              __pcinit 593A                             ??___awtoft 0091  
                 i2EEPROM_read@address 0001                        __size_of_logRun 0144  
                           ??___ftpack 0085                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 4A5A  
                              _lcdInst 60DA                                _handler 0008  
                              __ptext0 4CE2                                __ptext1 5FE2  
                              __ptext2 17DC                                __ptext3 4FEC  
                              __ptext4 4A5A                                __ptext5 5C34  
                              __ptext6 5366                                __ptext7 1192  
                              __ptext8 5138                                __ptext9 5988  
                      __size_of_printf 0438                                _readADC 5ECC  
                      __size_of_strcpy 0036                                _initLCD 5A20  
                              _cur_can 012B                                _loadRTC 51D0  
                              _readMAG 59D4                                _dpowers FAB8  
                   actuatorTest@i_1770 00B3                     actuatorTest@i_1763 00AE  
                         __size_of_arm 00FE                     actuatorTest@i_1772 00B4  
                   actuatorTest@i_1764 00AF                     actuatorTest@i_1756 00AD  
                   actuatorTest@i_1773 00B5                     actuatorTest@i_1782 00BA  
                   actuatorTest@i_1766 00B0                     actuatorTest@i_1783 00BB  
                   actuatorTest@i_1775 00B6                     actuatorTest@i_1767 00B1  
                   actuatorTest@i_1792 00C0                     actuatorTest@i_1776 00B7  
                   actuatorTest@i_1793 00C1                     actuatorTest@i_1785 00BC  
                   actuatorTest@i_1769 00B2                     actuatorTest@i_1786 00BD  
                   actuatorTest@i_1778 00B8                     actuatorTest@i_1795 00C2  
                   actuatorTest@i_1779 00B9                     actuatorTest@i_1796 00C3  
                   actuatorTest@i_1788 00BE                     actuatorTest@i_1789 00BF  
                              _isdigit 5EF8                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 0126  
                   _motor_toggle_count 0149                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
   initGlobalVars@time_recent_agitator 0080                           _Distribution 4978  
                 PlatformTest@res_1808 00AF                         __pintcode_body 3D9E  
                 end_of_initialization 597E                             ??_readCOND 0082  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                                int_func 3D9E  
                  i2___wmul@multiplier 0001                          ??_EEPROM_read 0082  
                  __size_of_PortTestDC 00D6                              i2u1041_40 2B38  
                            i2u1051_40 2BFC                              i2u1053_40 2C22  
                            i2u1045_40 2B84                              i2u1054_48 2C24  
                            i2u1047_40 2BAA                              i2u1046_48 2B86  
                            i2u1250_47 58B2                              i2u1251_47 58D4  
                            i2u1252_47 58DE                              i2u1248_47 3BF6  
                            i2u1249_47 58A8              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
               __end_of_initGlobalVars 4B36                             _sensorTest 25F8  
                           _servoTimes 0059                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 3D9E  
                         ??_BothServos 00AB                  __end_of_machineConfig 5770  
                 __end_of_PlatformTest 33F2                   _time_recent_agitator 014B  
                           _updateMenu 36BC                      i2_I2C_Master_Read 5F98  
                            _IR_signal 00E2                      i2_I2C_Master_Wait 60B8  
                    i2_I2C_Master_Stop 612E                              i2___awmod 55C8  
                    i2___lwdiv@divisor 0008                        _log_count_total 0145  
                       _PortTestPusher 5832                              i2___lwdiv 58E8  
                            i2___lwmod 5AAA                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 3BB2                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                          ?_initEEPROM 0001                              i2_lcdInst 60F6  
                        Loading@i_1140 00BD                          Loading@i_1142 00BF  
                        Loading@i_1127 00B7                          Loading@i_1136 00B9  
                        Loading@i_1139 00BB                             _total_time 00FA  
                          printf@width 00A9                   __size_of_stopSignals 001C  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 6026  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                     __end_of_BothServos 25F8  
                  __end_of_EEPROM_read 6078                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___ftge 4E72  
                         _Loading$1138 00B6                         __end_of___wmul 5C02  
                       __end_of_getMAG 5C64                         __end_of_getRTC 52E2  
                 __size_ofi2_lcdNibble 005A                         _timer2_counter 0073  
                        EEPROM_write@i 00AF                          i2lcdInst@data 0003  
                       __end_of_initUI 5C94                         __end_of_readIR 51D0  
                       __end_of_logRun 445A                       i2___wmul@product 0005  
                       __end_of_printf 220A                           i2printf@flag 0026  
                       __end_of_strcpy 5BCC              __end_ofi2_I2C_Master_Read 5FBE  
            __end_ofi2_I2C_Master_Wait 60CA                           i2printf@prec 001D  
                  start_initialization 593A              __end_ofi2_I2C_Master_Stop 6136  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 0125            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                 __end_of_PortTestPusher 588E  
                          __end_of_arm 4890                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1421 00B0  
                i2I2C_Master_Read@temp 0003                             ?i2___awmod 0001  
                 BlockerTest@cond_flag 00B3                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                               ??___ftge 0098  
                            _SpeedTest 52E2                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                            ?_sensorTest 0001  
                          __pdataBANK1 014F                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0084  
                             ??_logRun 00B1                               ID@i_1152 00AB  
                             ID@i_1163 00AF                               ID@i_1164 00BA  
                             ID@i_1157 00AD                           ??_PortTestDC 00AB  
               printSortTimer@timeDiff 0045       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    __size_of_initEEPROM 0016  
                 __size_of_BlockerTest 01C6                    _printSortTimer$2578 0043  
                    __size_of___awtoft 0044                      __size_of___ftpack 010C  
                          __pbssCOMRAM 0059           __size_of_updateServoPosition 007E  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
                      ?_PortTestPusher 0001                __size_of_printSortTimer 03A2  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$2081 0081                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 003F  
                    printSortTimer@sec 0041                    __size_of_initServos 0078  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                     _tilt_servo_state 0071                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 0129  
                    __size_of_readCOND 004C                            _EEPROM_read 6060  
                     _I2C_Master_Start 6126                     __end_of_PortTestDC 4CE2  
                            _f_lastCan 00EC                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 6102  
                    __size_of_initTime 0022                  i2_updateServoPosition 56A4  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                             ?_SpeedTest 0001  
                        __pmediumconst FAA6                              _lcdNibble 5638  
                __size_of_inputHandler 01EC                               ?___awdiv 0086  
                            __ptext100 60B8                              __ptext101 55C8  
                             ?___awmod 0080                               ?___lldiv 0080  
                       _sensor_outputs 00DA                               ?___lwdiv 0080  
                             ?___lwmod 0087                  __size_of_PlatformTest 0304  
                    __size_of_printRTC 02CA                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 013B  
                            _cur_state 00E8                       ___lwdiv@quotient 0084  
                       __size_of_getIR 0082                            ??i2___awmod 0005  
                        _algorithmTest 4B36                            ??i2___lwdiv 000A  
                          _COND_signal 00DE                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 064A  
                            getIR@port 0086                            __size_of_UI 08C8  
                  __size_of_sensorTest 03E6             __end_ofi2_I2C_Master_Start 613E  
           __end_ofi2_I2C_Master_Write 6116                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATBbits 000F8A                               _LATCbits 000F8B  
                             _LATDbits 000F8C                           _inputHandler 3BB2  
                          ??i2_isdigit 0001                           _PlatformTest 30EE  
                         BlockerTest@i 00AD                               _PIR2bits 000FA1  
                             i2u623_40 2EA6                        PlatformTest@res 00AD  
                             i2u623_47 2E9C                               i2u627_40 2F06  
                             i2u627_47 2EFC                               i2u558_40 5FB6  
                             i2u680_40 3A0A                    __size_of_updateMenu 02C0  
                       _log_completion 00F2                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 0077  
                            _was_low_2 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 5F72                          lcdNibble@data 0081  
                             i2_getRTC 5556                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
              __size_of_updateArmState 003A                               Loading@i 00C1  
                             Loading@j 00C3                               i2_printf 2D80  
                             i2_strcpy 5C02                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 594E  
                   i2___awmod@dividend 0001                           ??_initEEPROM 00B1  
               ?i2_updateServoPosition 0001                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                  __end_ofi2_EEPROM_read 60A4  
                          _count_total 00FE                       ??_initGlobalVars 0080  
                             __Hrparam 0000                       __size_of_Loading 05F6  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                            ??_SpeedTest 00AB  
                __end_of_initSortTimer 5096                           ??_initServos 0088  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 5D24             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 5B5E             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 5B26                _change_state_to_menu_23 5CF4  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 5E14  
              _change_state_to_logs_12 5DE4                _change_state_to_logs_22 5DB4  
              _change_state_to_logs_23 5E72                _change_state_to_logs_33 5D84  
              _change_state_to_logs_34 5D54                       __size_of___lwmod 0062  
                       readADC@channel 0081                               ___awtoft 5A66  
                             ___ftpack 4580                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 3F80  
                   __end_of_initEEPROM 608E                        _I2C_Master_Init 57D2  
                     __size_of_readADC 002C                        _I2C_Master_Read 5E44  
                     __size_of_initLCD 0046                           _f_ID_receive 012F  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004C  
                      _I2C_Master_Wait 60A4                        _I2C_Master_Stop 611E  
                     __size_of_isdigit 002A                               _delay_ms 5F22  
                       _printSortTimer 29DE                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 4580  
                             __ptext10 5F22                               __ptext11 4DAA  
                             __ptext20 4F30                               __ptext12 5A66  
                             __ptext21 5EA0                               __ptext13 4580  
                             __ptext30 525C                               __ptext22 6004  
                             __ptext14 4978                               __ptext31 6102  
                             __ptext23 5A20                               __ptext15 570C  
                             __ptext40 468C                               __ptext32 611E  
                             __ptext24 6078                               __ptext16 4316  
                             __ptext41 25F8                               __ptext33 6126  
                             __ptext25 4890                               __ptext17 5C64  
                             __ptext50 220A                               __ptext42 59D4  
                             __ptext34 5E44                               __ptext26 6060  
                             __ptext18 51D0                               __ptext51 6044  
                             __ptext43 4792                               __ptext35 60A4  
                             __ptext27 0012                               __ptext19 57D2  
                             __ptext60 5770                               __ptext52 5466  
                             __ptext44 4B36                               __ptext36 5B26  
                             __ptext28 33F2                               __ptext61 54DE  
                             __ptext53 53E8                               __ptext45 08DA  
                             __ptext37 5B5E                               __ptext29 5B96  
                             __ptext70 5C02                               __ptext62 60DA  
                             __ptext54 4150                               __ptext46 52E2  
                             __ptext38 5096                               __ptext71 3BB2  
                             __ptext63 5638                               __ptext55 5ECC  
                             __ptext47 5832                               __ptext39 4E72  
                             __ptext80 5DE4                               __ptext72 5C94  
                             __ptext56 1DD2                               __ptext48 4C0C  
                             __ptext81 5E14                               __ptext73 5CC4  
                             __ptext65 3F88                               __ptext57 60CA  
                             __ptext49 30EE                               __ptext90 5F72  
                             __ptext82 5FBE                               __ptext74 5CF4  
                             __ptext66 56A4                               __ptext58 5EF8  
                             __ptext91 5AAA                               __ptext83 445A  
                             __ptext75 5D24                               __ptext67 36BC  
                             __ptext59 5BCC                               __ptext92 58E8  
                             __ptext84 608E                               __ptext76 5D54  
                             __ptext68 5F4A                               __ptext93 60F6  
                             __ptext85 5AEC                               __ptext77 5D84  
                             __ptext69 397C                               __ptext94 588E  
                             __ptext86 29DE                               __ptext78 5E72  
                             __ptext95 5556                               __ptext87 2D80  
                             __ptext79 5DB4                               __ptext96 610C  
                             __ptext88 60EA                               __ptext97 612E  
                             __ptext89 6026                               __ptext98 6136  
                             __ptext99 5F98                               _dispLogs 5FBE  
                        ?_actuatorTest 0001                     PlatformTest@i_1812 00B3  
                             _readCOND 5988                          ??_stopSignals 0080  
                           strcpy@from 0082                         i2_isdigit$2081 0002  
                   __end_of_initServos 54DE                          __size_of_Test 0106  
                        ?_EEPROM_write 00AB                               _initTime 6004  
                        __size_of_main 00C8                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F8  
                  _updateServoPosition 53E8                 __size_of_machineConfig 0064  
                        ??i2_lcdNibble 0001                               _printRTC 33F2  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F6                     _f_can_coming_to_ID 0131  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 5CF4      __end_ofi2_change_state_to_menu_22 5CC4  
                     ??_PortTestPusher 00AB                               loadRTC@i 0096  
                    i2___awmod@divisor 0003                 __end_of_printSortTimer 2D80  
                            putch@data 0082                      i2___awmod@counter 0005  
             __end_of_I2C_Master_Start 612E                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 610C                             _INTCONbits 000FF2  
                 ?_updateServoPosition 0080                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00E4  
                             isdigit@c 0082                          sensorTest@res 00AD  
                       ??_actuatorTest 00AB                     sensorTest@res_1733 00AF  
                  _servo_timer_counter 006D                               intlevel2 0000  
                       ??_EEPROM_write 00AE                         BlockerTest@res 00AF  
                   __end_of_sensorTest 29DE                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 6060              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 397C  
              __end_of_I2C_Master_Init 5832                __end_of_I2C_Master_Read 5E72  
              __end_of_I2C_Master_Wait 60B8                          ??_BlockerTest 00AB  
              __end_of_I2C_Master_Stop 6126                            lcdInst@data 0082  
                        printRTC@F3242 0153                           retrieveLog@i 000E  
                          _retrieveLog 445A                    __end_ofi2_lcdNibble 58E8  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                   _servo_timer_target 006F                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                        ___lwmod@divisor 0089  
                       _updateArmState 5AEC                      _f_can_distributed 0135  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 570C                        ___lwmod@counter 008B  
                    _updateServoStates 3F88                          printRTC@month 00BE  
                        ?_Distribution 0001                     ?_updateServoStates 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                       _f_arm_position 00EA                    ??_updateServoStates 0009  
                   i2printRTC@INT_time 002D  
