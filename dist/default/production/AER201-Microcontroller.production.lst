

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Apr 10 12:04:34 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	text97,global,reloc=2,class=CODE,delta=1
   113                           	psect	text98,global,reloc=2,class=CODE,delta=1
   114                           	psect	text99,global,reloc=2,class=CODE,delta=1
   115                           	psect	text100,global,reloc=2,class=CODE,delta=1
   116                           	psect	text101,global,reloc=2,class=CODE,delta=1
   117                           	psect	text102,global,reloc=2,class=CODE,delta=1
   118                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   119                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   120                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   121  0000                     
   122                           ; Version 1.40
   123                           ; Generated 01/12/2016 GMT
   124                           ; 
   125                           ; Copyright © 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   126                           ; All rights reserved.
   127                           ; 
   128                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   129                           ; 
   130                           ; Redistribution and use in source and binary forms, with or without modification, are
   131                           ; permitted provided that the following conditions are met:
   132                           ; 
   133                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   134                           ;        conditions and the following disclaimer.
   135                           ; 
   136                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   137                           ;        of conditions and the following disclaimer in the documentation and/or other
   138                           ;        materials provided with the distribution.
   139                           ; 
   140                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   141                           ;        software without specific prior written permission.
   142                           ; 
   143                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   144                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   145                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   146                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   147                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   148                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   149                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   150                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   151                           ; 
   152                           ; 
   153                           ; Code-generator required, PIC18F4620 Definitions
   154                           ; 
   155                           ; SFR Addresses
   156  0000                     
   157                           	psect	idataBANK1
   158  005BCE                     __pidataBANK1:
   159                           	opt stack 0
   160                           
   161                           ;initializer for UI@F3246
   162  005BCE  4D                 	db	77
   163  005BCF  4D                 	db	77
   164  005BD0  4D                 	db	77
   165  005BD1  00                 	db	0
   166                           
   167                           ;initializer for printRTC@F3236
   168  005BD2  4D                 	db	77
   169  005BD3  4D                 	db	77
   170  005BD4  4D                 	db	77
   171  005BD5  00                 	db	0
   172                           
   173                           	psect	mediumconst
   174  00FA8A                     __pmediumconst:
   175                           	opt stack 0
   176  00FA8A  00                 	db	0
   177  00FA8B                     _keys:
   178                           	opt stack 0
   179  00FA8B  31                 	db	49
   180  00FA8C  32                 	db	50
   181  00FA8D  33                 	db	51
   182  00FA8E  41                 	db	65
   183  00FA8F  34                 	db	52
   184  00FA90  35                 	db	53
   185  00FA91  36                 	db	54
   186  00FA92  42                 	db	66
   187  00FA93  37                 	db	55
   188  00FA94  38                 	db	56
   189  00FA95  39                 	db	57
   190  00FA96  43                 	db	67
   191  00FA97  2A                 	db	42
   192  00FA98  30                 	db	48
   193  00FA99  23                 	db	35
   194  00FA9A  44                 	db	68
   195  00FA9B  00                 	db	0
   196  00FA9C                     __end_of_keys:
   197                           	opt stack 0
   198  00FA9C                     _dpowers:
   199                           	opt stack 0
   200  00FA9C  0001               	dw	1
   201  00FA9E  000A               	dw	10
   202  00FAA0  0064               	dw	100
   203  00FAA2  03E8               	dw	1000
   204  00FAA4  2710               	dw	10000
   205  00FAA6                     __end_of_dpowers:
   206                           	opt stack 0
   207  0000                     _ADCON0	set	4034
   208  0000                     _ADCON0bits	set	4034
   209  0000                     _ADCON1	set	4033
   210  0000                     _ADCON2	set	4032
   211  0000                     _ADRESH	set	4036
   212  0000                     _ADRESL	set	4035
   213  0000                     _CMCONbits	set	4020
   214  0000                     _CVRCON	set	4021
   215  0000                     _EEADR	set	4009
   216  0000                     _EEADRH	set	4010
   217  0000                     _EECON1bits	set	4006
   218  0000                     _EECON2	set	4007
   219  0000                     _EEDATA	set	4008
   220  0000                     _INTCONbits	set	4082
   221  0000                     _LATA	set	3977
   222  0000                     _LATAbits	set	3977
   223  0000                     _LATB	set	3978
   224  0000                     _LATBbits	set	3978
   225  0000                     _LATC	set	3979
   226  0000                     _LATCbits	set	3979
   227  0000                     _LATD	set	3980
   228  0000                     _LATDbits	set	3980
   229  0000                     _LATE	set	3981
   230  0000                     _OSCCON	set	4051
   231  0000                     _OSCTUNEbits	set	3995
   232  0000                     _PIR2bits	set	4001
   233  0000                     _PORTAbits	set	3968
   234  0000                     _PORTB	set	3969
   235  0000                     _PORTBbits	set	3969
   236  0000                     _PR2	set	4043
   237  0000                     _SSPADD	set	4040
   238  0000                     _SSPBUF	set	4041
   239  0000                     _SSPCON1	set	4038
   240  0000                     _SSPCON2	set	4037
   241  0000                     _SSPSTAT	set	4039
   242  0000                     _T0CON	set	4053
   243  0000                     _T1CON	set	4045
   244  0000                     _T2CON	set	4042
   245  0000                     _T3CON	set	4017
   246  0000                     _TMR0H	set	4055
   247  0000                     _TMR0L	set	4054
   248  0000                     _TMR1H	set	4047
   249  0000                     _TMR1L	set	4046
   250  0000                     _TMR3H	set	4019
   251  0000                     _TMR3L	set	4018
   252  0000                     _TRISA	set	3986
   253  0000                     _TRISB	set	3987
   254  0000                     _TRISC	set	3988
   255  0000                     _TRISD	set	3989
   256  0000                     _TRISE	set	3990
   257  0000                     _ACKDT	set	32301
   258  0000                     _ACKEN	set	32300
   259  0000                     _ADIE	set	31982
   260  0000                     _INT1IE	set	32643
   261  0000                     _INT1IF	set	32640
   262  0000                     _PEIE	set	32662
   263  0000                     _PEN	set	32298
   264  0000                     _RCEN	set	32299
   265  0000                     _RSEN	set	32297
   266  0000                     _SEN	set	32296
   267  0000                     _TMR0IE	set	32661
   268  0000                     _TMR0IF	set	32658
   269  0000                     _TMR0ON	set	32431
   270  0000                     _TMR1IE	set	31976
   271  0000                     _TMR1IF	set	31984
   272  0000                     _TMR1ON	set	32360
   273  0000                     _TMR2IE	set	31977
   274  0000                     _TMR2IF	set	31985
   275  0000                     _TMR2ON	set	32338
   276  0000                     _TMR3IE	set	32001
   277  0000                     _TMR3IF	set	32009
   278  0000                     _TMR3ON	set	32136
   279  0000                     _TRISC3	set	31907
   280  0000                     _TRISC4	set	31908
   281  0000                     _nRBPU	set	32655
   282  00FAA6                     STR_21:
   283  00FAA6  25                 	db	37
   284  00FAA7  30                 	db	48	;'0'
   285  00FAA8  32                 	db	50	;'2'
   286  00FAA9  64                 	db	100	;'d'
   287  00FAAA  25                 	db	37
   288  00FAAB  73                 	db	115	;'s'
   289  00FAAC  20                 	db	32
   290  00FAAD  7C                 	db	124
   291  00FAAE  20                 	db	32
   292  00FAAF  25                 	db	37
   293  00FAB0  30                 	db	48	;'0'
   294  00FAB1  32                 	db	50	;'2'
   295  00FAB2  64                 	db	100	;'d'
   296  00FAB3  3A                 	db	58	;':'
   297  00FAB4  25                 	db	37
   298  00FAB5  30                 	db	48	;'0'
   299  00FAB6  32                 	db	50	;'2'
   300  00FAB7  64                 	db	100	;'d'
   301  00FAB8  3A                 	db	58	;':'
   302  00FAB9  25                 	db	37
   303  00FABA  30                 	db	48	;'0'
   304  00FABB  32                 	db	50	;'2'
   305  00FABC  64                 	db	100	;'d'
   306  00FABD  00                 	db	0
   307  00FABE                     STR_67:
   308  00FABE  28                 	db	40
   309  00FABF  64                 	db	100	;'d'
   310  00FAC0  61                 	db	97	;'a'
   311  00FAC1  74                 	db	116	;'t'
   312  00FAC2  61                 	db	97	;'a'
   313  00FAC3  3A                 	db	58	;':'
   314  00FAC4  20                 	db	32
   315  00FAC5  25                 	db	37
   316  00FAC6  75                 	db	117	;'u'
   317  00FAC7  2C                 	db	44
   318  00FAC8  20                 	db	32
   319  00FAC9  61                 	db	97	;'a'
   320  00FACA  64                 	db	100	;'d'
   321  00FACB  64                 	db	100	;'d'
   322  00FACC  72                 	db	114	;'r'
   323  00FACD  3A                 	db	58	;':'
   324  00FACE  20                 	db	32
   325  00FACF  25                 	db	37
   326  00FAD0  75                 	db	117	;'u'
   327  00FAD1  29                 	db	41
   328  00FAD2  00                 	db	0
   329  00FAD3                     STR_64:
   330  00FAD3  20                 	db	32
   331  00FAD4  20                 	db	32
   332  00FAD5  20                 	db	32
   333  00FAD6  20                 	db	32
   334  00FAD7  20                 	db	32
   335  00FAD8  20                 	db	32
   336  00FAD9  20                 	db	32
   337  00FADA  20                 	db	32
   338  00FADB  20                 	db	32
   339  00FADC  20                 	db	32
   340  00FADD  20                 	db	32
   341  00FADE  20                 	db	32
   342  00FADF  46                 	db	70	;'F'
   343  00FAE0  25                 	db	37
   344  00FAE1  64                 	db	100	;'d'
   345  00FAE2  4C                 	db	76	;'L'
   346  00FAE3  25                 	db	37
   347  00FAE4  64                 	db	100	;'d'
   348  00FAE5  00                 	db	0
   349  00FAE6                     STR_112:
   350  00FAE6  44                 	db	68	;'D'
   351  00FAE7  20                 	db	32
   352  00FAE8  57                 	db	87	;'W'
   353  00FAE9  49                 	db	73	;'I'
   354  00FAEA  4C                 	db	76	;'L'
   355  00FAEB  4C                 	db	76	;'L'
   356  00FAEC  20                 	db	32
   357  00FAED  52                 	db	82	;'R'
   358  00FAEE  45                 	db	69	;'E'
   359  00FAEF  54                 	db	84	;'T'
   360  00FAF0  55                 	db	85	;'U'
   361  00FAF1  52                 	db	82	;'R'
   362  00FAF2  4E                 	db	78	;'N'
   363  00FAF3  20                 	db	32
   364  00FAF4  20                 	db	32
   365  00FAF5  20                 	db	32
   366  00FAF6  20                 	db	32
   367  00FAF7  00                 	db	0
   368  00FAF8                     STR_122:
   369  00FAF8  4F                 	db	79	;'O'
   370  00FAF9  54                 	db	84	;'T'
   371  00FAFA  48                 	db	72	;'H'
   372  00FAFB  45                 	db	69	;'E'
   373  00FAFC  52                 	db	82	;'R'
   374  00FAFD  20                 	db	32
   375  00FAFE  53                 	db	83	;'S'
   376  00FAFF  45                 	db	69	;'E'
   377  00FB00  54                 	db	84	;'T'
   378  00FB01  53                 	db	83	;'S'
   379  00FB02  20                 	db	32
   380  00FB03  52                 	db	82	;'R'
   381  00FB04  41                 	db	65	;'A'
   382  00FB05  35                 	db	53	;'5'
   383  00FB06  20                 	db	32
   384  00FB07  20                 	db	32
   385  00FB08  20                 	db	32
   386  00FB09  00                 	db	0
   387  00FB0A                     STR_121:
   388  00FB0A  53                 	db	83	;'S'
   389  00FB0B  3A                 	db	58	;':'
   390  00FB0C  20                 	db	32
   391  00FB0D  44                 	db	68	;'D'
   392  00FB0E  20                 	db	32
   393  00FB0F  57                 	db	87	;'W'
   394  00FB10  49                 	db	73	;'I'
   395  00FB11  4C                 	db	76	;'L'
   396  00FB12  4C                 	db	76	;'L'
   397  00FB13  20                 	db	32
   398  00FB14  52                 	db	82	;'R'
   399  00FB15  45                 	db	69	;'E'
   400  00FB16  54                 	db	84	;'T'
   401  00FB17  55                 	db	85	;'U'
   402  00FB18  52                 	db	82	;'R'
   403  00FB19  4E                 	db	78	;'N'
   404  00FB1A  20                 	db	32
   405  00FB1B  00                 	db	0
   406  00FB1C                     STR_124:
   407  00FB1C  4F                 	db	79	;'O'
   408  00FB1D  54                 	db	84	;'T'
   409  00FB1E  48                 	db	72	;'H'
   410  00FB1F  45                 	db	69	;'E'
   411  00FB20  52                 	db	82	;'R'
   412  00FB21  3A                 	db	58	;':'
   413  00FB22  20                 	db	32
   414  00FB23  43                 	db	67	;'C'
   415  00FB24  41                 	db	65	;'A'
   416  00FB25  4D                 	db	77	;'M'
   417  00FB26  20                 	db	32
   418  00FB27  54                 	db	84	;'T'
   419  00FB28  4F                 	db	79	;'O'
   420  00FB29  47                 	db	71	;'G'
   421  00FB2A  47                 	db	71	;'G'
   422  00FB2B  4C                 	db	76	;'L'
   423  00FB2C  45                 	db	69	;'E'
   424  00FB2D  00                 	db	0
   425  00FB2E                     STR_130:
   426  00FB2E  4F                 	db	79	;'O'
   427  00FB2F  54                 	db	84	;'T'
   428  00FB30  48                 	db	72	;'H'
   429  00FB31  45                 	db	69	;'E'
   430  00FB32  52                 	db	82	;'R'
   431  00FB33  20                 	db	32
   432  00FB34  53                 	db	83	;'S'
   433  00FB35  45                 	db	69	;'E'
   434  00FB36  54                 	db	84	;'T'
   435  00FB37  53                 	db	83	;'S'
   436  00FB38  20                 	db	32
   437  00FB39  50                 	db	80	;'P'
   438  00FB3A  55                 	db	85	;'U'
   439  00FB3B  53                 	db	83	;'S'
   440  00FB3C  48                 	db	72	;'H'
   441  00FB3D  45                 	db	69	;'E'
   442  00FB3E  52                 	db	82	;'R'
   443  00FB3F  00                 	db	0
   444  00FB40                     STR_3:
   445  00FB40  2D                 	db	45
   446  00FB41  2D                 	db	45
   447  00FB42  20                 	db	32
   448  00FB43  4C                 	db	76	;'L'
   449  00FB44  4F                 	db	79	;'O'
   450  00FB45  47                 	db	71	;'G'
   451  00FB46  20                 	db	32
   452  00FB47  25                 	db	37
   453  00FB48  32                 	db	50	;'2'
   454  00FB49  64                 	db	100	;'d'
   455  00FB4A  20                 	db	32
   456  00FB4B  48                 	db	72	;'H'
   457  00FB4C  45                 	db	69	;'E'
   458  00FB4D  52                 	db	82	;'R'
   459  00FB4E  45                 	db	69	;'E'
   460  00FB4F  2D                 	db	45
   461  00FB50  2D                 	db	45
   462  00FB51  00                 	db	0
   463  00FB52                     STR_1:
   464  00FB52  52                 	db	82	;'R'
   465  00FB53  45                 	db	69	;'E'
   466  00FB54  53                 	db	83	;'S'
   467  00FB55  55                 	db	85	;'U'
   468  00FB56  4C                 	db	76	;'L'
   469  00FB57  54                 	db	84	;'T'
   470  00FB58  53                 	db	83	;'S'
   471  00FB59  20                 	db	32
   472  00FB5A  49                 	db	73	;'I'
   473  00FB5B  4E                 	db	78	;'N'
   474  00FB5C  20                 	db	32
   475  00FB5D  4C                 	db	76	;'L'
   476  00FB5E  4F                 	db	79	;'O'
   477  00FB5F  47                 	db	71	;'G'
   478  00FB60  20                 	db	32
   479  00FB61  25                 	db	37
   480  00FB62  64                 	db	100	;'d'
   481  00FB63  00                 	db	0
   482  00FB64                     STR_103:
   483  00FB64  4D                 	db	77	;'M'
   484  00FB65  49                 	db	73	;'I'
   485  00FB66  44                 	db	68	;'D'
   486  00FB67  20                 	db	32
   487  00FB68  2D                 	db	45
   488  00FB69  2D                 	db	45
   489  00FB6A  20                 	db	32
   490  00FB6B  32                 	db	50	;'2'
   491  00FB6C  73                 	db	115	;'s'
   492  00FB6D  20                 	db	32
   493  00FB6E  20                 	db	32
   494  00FB6F  20                 	db	32
   495  00FB70  20                 	db	32
   496  00FB71  20                 	db	32
   497  00FB72  20                 	db	32
   498  00FB73  20                 	db	32
   499  00FB74  00                 	db	0
   500  00FB75                     STR_106:
   501  00FB75  44                 	db	68	;'D'
   502  00FB76  52                 	db	82	;'R'
   503  00FB77  4F                 	db	79	;'O'
   504  00FB78  50                 	db	80	;'P'
   505  00FB79  20                 	db	32
   506  00FB7A  2D                 	db	45
   507  00FB7B  2D                 	db	45
   508  00FB7C  20                 	db	32
   509  00FB7D  32                 	db	50	;'2'
   510  00FB7E  73                 	db	115	;'s'
   511  00FB7F  20                 	db	32
   512  00FB80  20                 	db	32
   513  00FB81  20                 	db	32
   514  00FB82  20                 	db	32
   515  00FB83  20                 	db	32
   516  00FB84  20                 	db	32
   517  00FB85  00                 	db	0
   518  00FB86                     STR_100:
   519  00FB86  4C                 	db	76	;'L'
   520  00FB87  45                 	db	69	;'E'
   521  00FB88  46                 	db	70	;'F'
   522  00FB89  54                 	db	84	;'T'
   523  00FB8A  20                 	db	32
   524  00FB8B  2D                 	db	45
   525  00FB8C  2D                 	db	45
   526  00FB8D  20                 	db	32
   527  00FB8E  32                 	db	50	;'2'
   528  00FB8F  73                 	db	115	;'s'
   529  00FB90  20                 	db	32
   530  00FB91  20                 	db	32
   531  00FB92  20                 	db	32
   532  00FB93  20                 	db	32
   533  00FB94  20                 	db	32
   534  00FB95  20                 	db	32
   535  00FB96  00                 	db	0
   536  00FB97                     STR_105:
   537  00FB97  4C                 	db	76	;'L'
   538  00FB98  45                 	db	69	;'E'
   539  00FB99  56                 	db	86	;'V'
   540  00FB9A  45                 	db	69	;'E'
   541  00FB9B  4C                 	db	76	;'L'
   542  00FB9C  20                 	db	32
   543  00FB9D  2D                 	db	45
   544  00FB9E  2D                 	db	45
   545  00FB9F  20                 	db	32
   546  00FBA0  32                 	db	50	;'2'
   547  00FBA1  73                 	db	115	;'s'
   548  00FBA2  20                 	db	32
   549  00FBA3  20                 	db	32
   550  00FBA4  20                 	db	32
   551  00FBA5  20                 	db	32
   552  00FBA6  20                 	db	32
   553  00FBA7  00                 	db	0
   554  00FBA8                     STR_99:
   555  00FBA8  52                 	db	82	;'R'
   556  00FBA9  49                 	db	73	;'I'
   557  00FBAA  47                 	db	71	;'G'
   558  00FBAB  48                 	db	72	;'H'
   559  00FBAC  54                 	db	84	;'T'
   560  00FBAD  20                 	db	32
   561  00FBAE  2D                 	db	45
   562  00FBAF  2D                 	db	45
   563  00FBB0  20                 	db	32
   564  00FBB1  32                 	db	50	;'2'
   565  00FBB2  73                 	db	115	;'s'
   566  00FBB3  20                 	db	32
   567  00FBB4  20                 	db	32
   568  00FBB5  20                 	db	32
   569  00FBB6  20                 	db	32
   570  00FBB7  20                 	db	32
   571  00FBB8  00                 	db	0
   572  00FBB9                     STR_98:
   573  00FBB9  4D                 	db	77	;'M'
   574  00FBBA  49                 	db	73	;'I'
   575  00FBBB  44                 	db	68	;'D'
   576  00FBBC  44                 	db	68	;'D'
   577  00FBBD  4C                 	db	76	;'L'
   578  00FBBE  45                 	db	69	;'E'
   579  00FBBF  20                 	db	32
   580  00FBC0  2D                 	db	45
   581  00FBC1  2D                 	db	45
   582  00FBC2  20                 	db	32
   583  00FBC3  32                 	db	50	;'2'
   584  00FBC4  73                 	db	115	;'s'
   585  00FBC5  20                 	db	32
   586  00FBC6  20                 	db	32
   587  00FBC7  20                 	db	32
   588  00FBC8  20                 	db	32
   589  00FBC9  00                 	db	0
   590  00FBCA                     STR_113:
   591  00FBCA  4F                 	db	79	;'O'
   592  00FBCB  54                 	db	84	;'T'
   593  00FBCC  48                 	db	72	;'H'
   594  00FBCD  45                 	db	69	;'E'
   595  00FBCE  52                 	db	82	;'R'
   596  00FBCF  20                 	db	32
   597  00FBD0  53                 	db	83	;'S'
   598  00FBD1  45                 	db	69	;'E'
   599  00FBD2  54                 	db	84	;'T'
   600  00FBD3  53                 	db	83	;'S'
   601  00FBD4  20                 	db	32
   602  00FBD5  44                 	db	68	;'D'
   603  00FBD6  43                 	db	67	;'C'
   604  00FBD7  20                 	db	32
   605  00FBD8  20                 	db	32
   606  00FBD9  20                 	db	32
   607  00FBDA  00                 	db	0
   608  00FBDB                     STR_119:
   609  00FBDB  44                 	db	68	;'D'
   610  00FBDC  20                 	db	32
   611  00FBDD  57                 	db	87	;'W'
   612  00FBDE  49                 	db	73	;'I'
   613  00FBDF  4C                 	db	76	;'L'
   614  00FBE0  4C                 	db	76	;'L'
   615  00FBE1  20                 	db	32
   616  00FBE2  52                 	db	82	;'R'
   617  00FBE3  45                 	db	69	;'E'
   618  00FBE4  54                 	db	84	;'T'
   619  00FBE5  55                 	db	85	;'U'
   620  00FBE6  52                 	db	82	;'R'
   621  00FBE7  4E                 	db	78	;'N'
   622  00FBE8  20                 	db	32
   623  00FBE9  20                 	db	32
   624  00FBEA  20                 	db	32
   625  00FBEB  00                 	db	0
   626  00FBEC                     STR_116:
   627  00FBEC  35                 	db	53	;'5'
   628  00FBED  3A                 	db	58	;':'
   629  00FBEE  48                 	db	72	;'H'
   630  00FBEF  7C                 	db	124
   631  00FBF0  36                 	db	54	;'6'
   632  00FBF1  3A                 	db	58	;':'
   633  00FBF2  4C                 	db	76	;'L'
   634  00FBF3  7C                 	db	124
   635  00FBF4  49                 	db	73	;'I'
   636  00FBF5  52                 	db	82	;'R'
   637  00FBF6  3A                 	db	58	;':'
   638  00FBF7  25                 	db	37
   639  00FBF8  64                 	db	100	;'d'
   640  00FBF9  20                 	db	32
   641  00FBFA  20                 	db	32
   642  00FBFB  20                 	db	32
   643  00FBFC  00                 	db	0
   644  00FBFD                     STR_114:
   645  00FBFD  31                 	db	49	;'1'
   646  00FBFE  3A                 	db	58	;':'
   647  00FBFF  20                 	db	32
   648  00FC00  44                 	db	68	;'D'
   649  00FC01  43                 	db	67	;'C'
   650  00FC02  20                 	db	32
   651  00FC03  7C                 	db	124
   652  00FC04  20                 	db	32
   653  00FC05  41                 	db	65	;'A'
   654  00FC06  3A                 	db	58	;':'
   655  00FC07  20                 	db	32
   656  00FC08  41                 	db	65	;'A'
   657  00FC09  52                 	db	82	;'R'
   658  00FC0A  4D                 	db	77	;'M'
   659  00FC0B  20                 	db	32
   660  00FC0C  20                 	db	32
   661  00FC0D  00                 	db	0
   662  00FC0E                     STR_101:
   663  00FC0E  4D                 	db	77	;'M'
   664  00FC0F  49                 	db	73	;'I'
   665  00FC10  44                 	db	68	;'D'
   666  00FC11  2D                 	db	45
   667  00FC12  4C                 	db	76	;'L'
   668  00FC13  45                 	db	69	;'E'
   669  00FC14  46                 	db	70	;'F'
   670  00FC15  54                 	db	84	;'T'
   671  00FC16  20                 	db	32
   672  00FC17  2D                 	db	45
   673  00FC18  2D                 	db	45
   674  00FC19  20                 	db	32
   675  00FC1A  32                 	db	50	;'2'
   676  00FC1B  73                 	db	115	;'s'
   677  00FC1C  20                 	db	32
   678  00FC1D  20                 	db	32
   679  00FC1E  00                 	db	0
   680  00FC1F                     STR_102:
   681  00FC1F  4D                 	db	77	;'M'
   682  00FC20  49                 	db	73	;'I'
   683  00FC21  44                 	db	68	;'D'
   684  00FC22  2D                 	db	45
   685  00FC23  52                 	db	82	;'R'
   686  00FC24  49                 	db	73	;'I'
   687  00FC25  47                 	db	71	;'G'
   688  00FC26  48                 	db	72	;'H'
   689  00FC27  54                 	db	84	;'T'
   690  00FC28  20                 	db	32
   691  00FC29  2D                 	db	45
   692  00FC2A  2D                 	db	45
   693  00FC2B  20                 	db	32
   694  00FC2C  32                 	db	50	;'2'
   695  00FC2D  73                 	db	115	;'s'
   696  00FC2E  20                 	db	32
   697  00FC2F  00                 	db	0
   698  00FC30  45                 	db	69	;'E'
   699  00FC31  4C                 	db	76	;'L'
   700  00FC32  53                 	db	83	;'S'
   701  00FC33  45                 	db	69	;'E'
   702  00FC34  20                 	db	32
   703  00FC35  54                 	db	84	;'T'
   704  00FC36  4F                 	db	79	;'O'
   705  00FC37  47                 	db	71	;'G'
   706  00FC38  47                 	db	71	;'G'
   707  00FC39  4C                 	db	76	;'L'
   708  00FC3A  45                 	db	69	;'E'
   709  00FC3B  53                 	db	83	;'S'
   710  00FC3C  20                 	db	32
   711  00FC3D  52                 	db	82	;'R'
   712  00FC3E  41                 	db	65	;'A'
   713  00FC3F  35                 	db	53	;'5'
   714  00FC40  00                 	db	0
   715  00FC41                     STR_73:
   716  00FC41  41                 	db	65	;'A'
   717  00FC42  4C                 	db	76	;'L'
   718  00FC43  47                 	db	71	;'G'
   719  00FC44  31                 	db	49	;'1'
   720  00FC45  3A                 	db	58	;':'
   721  00FC46  20                 	db	32
   722  00FC47  39                 	db	57	;'9'
   723  00FC48  20                 	db	32
   724  00FC49  50                 	db	80	;'P'
   725  00FC4A  4F                 	db	79	;'O'
   726  00FC4B  50                 	db	80	;'P'
   727  00FC4C  4E                 	db	78	;'N'
   728  00FC4D  4F                 	db	79	;'O'
   729  00FC4E  54                 	db	84	;'T'
   730  00FC4F  41                 	db	65	;'A'
   731  00FC50  42                 	db	66	;'B'
   732  00FC51  00                 	db	0
   733  00FC52                     STR_93:
   734  00FC52  54                 	db	84	;'T'
   735  00FC53  53                 	db	83	;'S'
   736  00FC54  54                 	db	84	;'T'
   737  00FC55  3A                 	db	58	;':'
   738  00FC56  20                 	db	32
   739  00FC57  43                 	db	67	;'C'
   740  00FC58  4F                 	db	79	;'O'
   741  00FC59  4E                 	db	78	;'N'
   742  00FC5A  44                 	db	68	;'D'
   743  00FC5B  20                 	db	32
   744  00FC5C  53                 	db	83	;'S'
   745  00FC5D  4F                 	db	79	;'O'
   746  00FC5E  4C                 	db	76	;'L'
   747  00FC5F  4E                 	db	78	;'N'
   748  00FC60  27                 	db	39
   749  00FC61  44                 	db	68	;'D'
   750  00FC62  00                 	db	0
   751  00FC63                     STR_95:
   752  00FC63  54                 	db	84	;'T'
   753  00FC64  53                 	db	83	;'S'
   754  00FC65  54                 	db	84	;'T'
   755  00FC66  3A                 	db	58	;':'
   756  00FC67  20                 	db	32
   757  00FC68  50                 	db	80	;'P'
   758  00FC69  55                 	db	85	;'U'
   759  00FC6A  53                 	db	83	;'S'
   760  00FC6B  48                 	db	72	;'H'
   761  00FC6C  20                 	db	32
   762  00FC6D  53                 	db	83	;'S'
   763  00FC6E  4F                 	db	79	;'O'
   764  00FC6F  4C                 	db	76	;'L'
   765  00FC70  4E                 	db	78	;'N'
   766  00FC71  27                 	db	39
   767  00FC72  44                 	db	68	;'D'
   768  00FC73  00                 	db	0
   769  00FC74                     STR_69:
   770  00FC74  32                 	db	50	;'2'
   771  00FC75  2E                 	db	46
   772  00FC76  53                 	db	83	;'S'
   773  00FC77  4E                 	db	78	;'N'
   774  00FC78  52                 	db	82	;'R'
   775  00FC79  7C                 	db	124
   776  00FC7A  34                 	db	52	;'4'
   777  00FC7B  2E                 	db	46
   778  00FC7C  48                 	db	72	;'H'
   779  00FC7D  49                 	db	73	;'I'
   780  00FC7E  7C                 	db	124
   781  00FC7F  35                 	db	53	;'5'
   782  00FC80  2E                 	db	46
   783  00FC81  4D                 	db	77	;'M'
   784  00FC82  45                 	db	69	;'E'
   785  00FC83  44                 	db	68	;'D'
   786  00FC84  00                 	db	0
   787  00FC85                     STR_70:
   788  00FC85  42                 	db	66	;'B'
   789  00FC86  2E                 	db	46
   790  00FC87  50                 	db	80	;'P'
   791  00FC88  4C                 	db	76	;'L'
   792  00FC89  41                 	db	65	;'A'
   793  00FC8A  7C                 	db	124
   794  00FC8B  38                 	db	56	;'8'
   795  00FC8C  2E                 	db	46
   796  00FC8D  53                 	db	83	;'S'
   797  00FC8E  56                 	db	86	;'V'
   798  00FC8F  7C                 	db	124
   799  00FC90  39                 	db	57	;'9'
   800  00FC91  2E                 	db	46
   801  00FC92  42                 	db	66	;'B'
   802  00FC93  4C                 	db	76	;'L'
   803  00FC94  4B                 	db	75	;'K'
   804  00FC95  00                 	db	0
   805  00FC96                     STR_128:
   806  00FC96  45                 	db	69	;'E'
   807  00FC97  4C                 	db	76	;'L'
   808  00FC98  53                 	db	83	;'S'
   809  00FC99  45                 	db	69	;'E'
   810  00FC9A  20                 	db	32
   811  00FC9B  54                 	db	84	;'T'
   812  00FC9C  4F                 	db	79	;'O'
   813  00FC9D  47                 	db	71	;'G'
   814  00FC9E  47                 	db	71	;'G'
   815  00FC9F  4C                 	db	76	;'L'
   816  00FCA0  45                 	db	69	;'E'
   817  00FCA1  53                 	db	83	;'S'
   818  00FCA2  20                 	db	32
   819  00FCA3  41                 	db	65	;'A'
   820  00FCA4  52                 	db	82	;'R'
   821  00FCA5  4D                 	db	77	;'M'
   822  00FCA6  00                 	db	0
   823  00FCA7                     STR_111:
   824  00FCA7  54                 	db	84	;'T'
   825  00FCA8  53                 	db	83	;'S'
   826  00FCA9  54                 	db	84	;'T'
   827  00FCAA  3A                 	db	58	;':'
   828  00FCAB  20                 	db	32
   829  00FCAC  42                 	db	66	;'B'
   830  00FCAD  4F                 	db	79	;'O'
   831  00FCAE  54                 	db	84	;'T'
   832  00FCAF  48                 	db	72	;'H'
   833  00FCB0  20                 	db	32
   834  00FCB1  53                 	db	83	;'S'
   835  00FCB2  45                 	db	69	;'E'
   836  00FCB3  52                 	db	82	;'R'
   837  00FCB4  56                 	db	86	;'V'
   838  00FCB5  4F                 	db	79	;'O'
   839  00FCB6  53                 	db	83	;'S'
   840  00FCB7  00                 	db	0
   841  00FCB8                     STR_41:
   842  00FCB8  4C                 	db	76	;'L'
   843  00FCB9  4F                 	db	79	;'O'
   844  00FCBA  47                 	db	71	;'G'
   845  00FCBB  20                 	db	32
   846  00FCBC  31                 	db	49	;'1'
   847  00FCBD  20                 	db	32
   848  00FCBE  20                 	db	32
   849  00FCBF  20                 	db	32
   850  00FCC0  20                 	db	32
   851  00FCC1  20                 	db	32
   852  00FCC2  20                 	db	32
   853  00FCC3  20                 	db	32
   854  00FCC4  20                 	db	32
   855  00FCC5  20                 	db	32
   856  00FCC6  20                 	db	32
   857  00FCC7  20                 	db	32
   858  00FCC8  00                 	db	0
   859  00FCC9                     STR_40:
   860  00FCC9  4C                 	db	76	;'L'
   861  00FCCA  4F                 	db	79	;'O'
   862  00FCCB  47                 	db	71	;'G'
   863  00FCCC  20                 	db	32
   864  00FCCD  32                 	db	50	;'2'
   865  00FCCE  20                 	db	32
   866  00FCCF  20                 	db	32
   867  00FCD0  20                 	db	32
   868  00FCD1  20                 	db	32
   869  00FCD2  20                 	db	32
   870  00FCD3  20                 	db	32
   871  00FCD4  20                 	db	32
   872  00FCD5  20                 	db	32
   873  00FCD6  20                 	db	32
   874  00FCD7  20                 	db	32
   875  00FCD8  20                 	db	32
   876  00FCD9  00                 	db	0
   877  00FCDA                     STR_44:
   878  00FCDA  4C                 	db	76	;'L'
   879  00FCDB  4F                 	db	79	;'O'
   880  00FCDC  47                 	db	71	;'G'
   881  00FCDD  20                 	db	32
   882  00FCDE  33                 	db	51	;'3'
   883  00FCDF  20                 	db	32
   884  00FCE0  20                 	db	32
   885  00FCE1  20                 	db	32
   886  00FCE2  20                 	db	32
   887  00FCE3  20                 	db	32
   888  00FCE4  20                 	db	32
   889  00FCE5  20                 	db	32
   890  00FCE6  20                 	db	32
   891  00FCE7  20                 	db	32
   892  00FCE8  20                 	db	32
   893  00FCE9  20                 	db	32
   894  00FCEA  00                 	db	0
   895  00FCEB                     STR_48:
   896  00FCEB  4C                 	db	76	;'L'
   897  00FCEC  4F                 	db	79	;'O'
   898  00FCED  47                 	db	71	;'G'
   899  00FCEE  20                 	db	32
   900  00FCEF  34                 	db	52	;'4'
   901  00FCF0  20                 	db	32
   902  00FCF1  20                 	db	32
   903  00FCF2  20                 	db	32
   904  00FCF3  20                 	db	32
   905  00FCF4  20                 	db	32
   906  00FCF5  20                 	db	32
   907  00FCF6  20                 	db	32
   908  00FCF7  20                 	db	32
   909  00FCF8  20                 	db	32
   910  00FCF9  20                 	db	32
   911  00FCFA  20                 	db	32
   912  00FCFB  00                 	db	0
   913  00FCFC                     STR_36:
   914  00FCFC  33                 	db	51	;'3'
   915  00FCFD  2E                 	db	46
   916  00FCFE  20                 	db	32
   917  00FCFF  4C                 	db	76	;'L'
   918  00FD00  4F                 	db	79	;'O'
   919  00FD01  47                 	db	71	;'G'
   920  00FD02  53                 	db	83	;'S'
   921  00FD03  20                 	db	32
   922  00FD04  20                 	db	32
   923  00FD05  20                 	db	32
   924  00FD06  20                 	db	32
   925  00FD07  20                 	db	32
   926  00FD08  20                 	db	32
   927  00FD09  20                 	db	32
   928  00FD0A  20                 	db	32
   929  00FD0B  20                 	db	32
   930  00FD0C  00                 	db	0
   931  00FD0D                     STR_32:
   932  00FD0D  32                 	db	50	;'2'
   933  00FD0E  2E                 	db	46
   934  00FD0F  20                 	db	32
   935  00FD10  53                 	db	83	;'S'
   936  00FD11  4F                 	db	79	;'O'
   937  00FD12  52                 	db	82	;'R'
   938  00FD13  54                 	db	84	;'T'
   939  00FD14  20                 	db	32
   940  00FD15  20                 	db	32
   941  00FD16  20                 	db	32
   942  00FD17  20                 	db	32
   943  00FD18  20                 	db	32
   944  00FD19  20                 	db	32
   945  00FD1A  20                 	db	32
   946  00FD1B  20                 	db	32
   947  00FD1C  20                 	db	32
   948  00FD1D  00                 	db	0
   949  00FD1E                     STR_33:
   950  00FD1E  31                 	db	49	;'1'
   951  00FD1F  2E                 	db	46
   952  00FD20  20                 	db	32
   953  00FD21  44                 	db	68	;'D'
   954  00FD22  41                 	db	65	;'A'
   955  00FD23  54                 	db	84	;'T'
   956  00FD24  45                 	db	69	;'E'
   957  00FD25  2F                 	db	47
   958  00FD26  54                 	db	84	;'T'
   959  00FD27  49                 	db	73	;'I'
   960  00FD28  4D                 	db	77	;'M'
   961  00FD29  45                 	db	69	;'E'
   962  00FD2A  20                 	db	32
   963  00FD2B  20                 	db	32
   964  00FD2C  20                 	db	32
   965  00FD2D  20                 	db	32
   966  00FD2E  00                 	db	0
   967  00FD2F                     STR_24:
   968  00FD2F  20                 	db	32
   969  00FD30  2D                 	db	45
   970  00FD31  2D                 	db	45
   971  00FD32  20                 	db	32
   972  00FD33  50                 	db	80	;'P'
   973  00FD34  4F                 	db	79	;'O'
   974  00FD35  50                 	db	80	;'P'
   975  00FD36  20                 	db	32
   976  00FD37  20                 	db	32
   977  00FD38  43                 	db	67	;'C'
   978  00FD39  41                 	db	65	;'A'
   979  00FD3A  4E                 	db	78	;'N'
   980  00FD3B  20                 	db	32
   981  00FD3C  2D                 	db	45
   982  00FD3D  2D                 	db	45
   983  00FD3E  20                 	db	32
   984  00FD3F  00                 	db	0
   985  00FD40                     STR_26:
   986  00FD40  20                 	db	32
   987  00FD41  2D                 	db	45
   988  00FD42  2D                 	db	45
   989  00FD43  20                 	db	32
   990  00FD44  53                 	db	83	;'S'
   991  00FD45  4F                 	db	79	;'O'
   992  00FD46  55                 	db	85	;'U'
   993  00FD47  50                 	db	80	;'P'
   994  00FD48  20                 	db	32
   995  00FD49  43                 	db	67	;'C'
   996  00FD4A  41                 	db	65	;'A'
   997  00FD4B  4E                 	db	78	;'N'
   998  00FD4C  20                 	db	32
   999  00FD4D  2D                 	db	45
  1000  00FD4E  2D                 	db	45
  1001  00FD4F  20                 	db	32
  1002  00FD50  00                 	db	0
  1003  00FD51                     STR_28:
  1004  00FD51  2D                 	db	45
  1005  00FD52  2D                 	db	45
  1006  00FD53  20                 	db	32
  1007  00FD54  54                 	db	84	;'T'
  1008  00FD55  4F                 	db	79	;'O'
  1009  00FD56  54                 	db	84	;'T'
  1010  00FD57  41                 	db	65	;'A'
  1011  00FD58  4C                 	db	76	;'L'
  1012  00FD59  20                 	db	32
  1013  00FD5A  43                 	db	67	;'C'
  1014  00FD5B  41                 	db	65	;'A'
  1015  00FD5C  4E                 	db	78	;'N'
  1016  00FD5D  53                 	db	83	;'S'
  1017  00FD5E  20                 	db	32
  1018  00FD5F  2D                 	db	45
  1019  00FD60  2D                 	db	45
  1020  00FD61  00                 	db	0
  1021  00FD62                     STR_39:
  1022  00FD62  4C                 	db	76	;'L'
  1023  00FD63  4F                 	db	79	;'O'
  1024  00FD64  47                 	db	71	;'G'
  1025  00FD65  20                 	db	32
  1026  00FD66  31                 	db	49	;'1'
  1027  00FD67  20                 	db	32
  1028  00FD68  20                 	db	32
  1029  00FD69  20                 	db	32
  1030  00FD6A  20                 	db	32
  1031  00FD6B  20                 	db	32
  1032  00FD6C  20                 	db	32
  1033  00FD6D  20                 	db	32
  1034  00FD6E  20                 	db	32
  1035  00FD6F  20                 	db	32
  1036  00FD70  20                 	db	32
  1037  00FD71  3C                 	db	60	;'<'
  1038  00FD72  00                 	db	0
  1039  00FD73                     STR_42:
  1040  00FD73  4C                 	db	76	;'L'
  1041  00FD74  4F                 	db	79	;'O'
  1042  00FD75  47                 	db	71	;'G'
  1043  00FD76  20                 	db	32
  1044  00FD77  32                 	db	50	;'2'
  1045  00FD78  20                 	db	32
  1046  00FD79  20                 	db	32
  1047  00FD7A  20                 	db	32
  1048  00FD7B  20                 	db	32
  1049  00FD7C  20                 	db	32
  1050  00FD7D  20                 	db	32
  1051  00FD7E  20                 	db	32
  1052  00FD7F  20                 	db	32
  1053  00FD80  20                 	db	32
  1054  00FD81  20                 	db	32
  1055  00FD82  3C                 	db	60	;'<'
  1056  00FD83  00                 	db	0
  1057  00FD84                     STR_46:
  1058  00FD84  4C                 	db	76	;'L'
  1059  00FD85  4F                 	db	79	;'O'
  1060  00FD86  47                 	db	71	;'G'
  1061  00FD87  20                 	db	32
  1062  00FD88  33                 	db	51	;'3'
  1063  00FD89  20                 	db	32
  1064  00FD8A  20                 	db	32
  1065  00FD8B  20                 	db	32
  1066  00FD8C  20                 	db	32
  1067  00FD8D  20                 	db	32
  1068  00FD8E  20                 	db	32
  1069  00FD8F  20                 	db	32
  1070  00FD90  20                 	db	32
  1071  00FD91  20                 	db	32
  1072  00FD92  20                 	db	32
  1073  00FD93  3C                 	db	60	;'<'
  1074  00FD94  00                 	db	0
  1075  00FD95                     STR_50:
  1076  00FD95  4C                 	db	76	;'L'
  1077  00FD96  4F                 	db	79	;'O'
  1078  00FD97  47                 	db	71	;'G'
  1079  00FD98  20                 	db	32
  1080  00FD99  34                 	db	52	;'4'
  1081  00FD9A  20                 	db	32
  1082  00FD9B  20                 	db	32
  1083  00FD9C  20                 	db	32
  1084  00FD9D  20                 	db	32
  1085  00FD9E  20                 	db	32
  1086  00FD9F  20                 	db	32
  1087  00FDA0  20                 	db	32
  1088  00FDA1  20                 	db	32
  1089  00FDA2  20                 	db	32
  1090  00FDA3  20                 	db	32
  1091  00FDA4  3C                 	db	60	;'<'
  1092  00FDA5  00                 	db	0
  1093  00FDA6                     STR_38:
  1094  00FDA6  33                 	db	51	;'3'
  1095  00FDA7  2E                 	db	46
  1096  00FDA8  20                 	db	32
  1097  00FDA9  4C                 	db	76	;'L'
  1098  00FDAA  4F                 	db	79	;'O'
  1099  00FDAB  47                 	db	71	;'G'
  1100  00FDAC  53                 	db	83	;'S'
  1101  00FDAD  20                 	db	32
  1102  00FDAE  20                 	db	32
  1103  00FDAF  20                 	db	32
  1104  00FDB0  20                 	db	32
  1105  00FDB1  20                 	db	32
  1106  00FDB2  20                 	db	32
  1107  00FDB3  20                 	db	32
  1108  00FDB4  20                 	db	32
  1109  00FDB5  3C                 	db	60	;'<'
  1110  00FDB6  00                 	db	0
  1111  00FDB7                     STR_34:
  1112  00FDB7  32                 	db	50	;'2'
  1113  00FDB8  2E                 	db	46
  1114  00FDB9  20                 	db	32
  1115  00FDBA  53                 	db	83	;'S'
  1116  00FDBB  4F                 	db	79	;'O'
  1117  00FDBC  52                 	db	82	;'R'
  1118  00FDBD  54                 	db	84	;'T'
  1119  00FDBE  20                 	db	32
  1120  00FDBF  20                 	db	32
  1121  00FDC0  20                 	db	32
  1122  00FDC1  20                 	db	32
  1123  00FDC2  20                 	db	32
  1124  00FDC3  20                 	db	32
  1125  00FDC4  20                 	db	32
  1126  00FDC5  20                 	db	32
  1127  00FDC6  3C                 	db	60	;'<'
  1128  00FDC7  00                 	db	0
  1129  00FDC8                     STR_31:
  1130  00FDC8  31                 	db	49	;'1'
  1131  00FDC9  2E                 	db	46
  1132  00FDCA  20                 	db	32
  1133  00FDCB  44                 	db	68	;'D'
  1134  00FDCC  41                 	db	65	;'A'
  1135  00FDCD  54                 	db	84	;'T'
  1136  00FDCE  45                 	db	69	;'E'
  1137  00FDCF  2F                 	db	47
  1138  00FDD0  54                 	db	84	;'T'
  1139  00FDD1  49                 	db	73	;'I'
  1140  00FDD2  4D                 	db	77	;'M'
  1141  00FDD3  45                 	db	69	;'E'
  1142  00FDD4  20                 	db	32
  1143  00FDD5  20                 	db	32
  1144  00FDD6  20                 	db	32
  1145  00FDD7  3C                 	db	60	;'<'
  1146  00FDD8  00                 	db	0
  1147  00FDD9                     STR_6:
  1148  00FDD9  50                 	db	80	;'P'
  1149  00FDDA  41                 	db	65	;'A'
  1150  00FDDB  55                 	db	85	;'U'
  1151  00FDDC  53                 	db	83	;'S'
  1152  00FDDD  45                 	db	69	;'E'
  1153  00FDDE  20                 	db	32
  1154  00FDDF  3C                 	db	60	;'<'
  1155  00FDE0  20                 	db	32
  1156  00FDE1  7C                 	db	124
  1157  00FDE2  20                 	db	32
  1158  00FDE3  42                 	db	66	;'B'
  1159  00FDE4  41                 	db	65	;'A'
  1160  00FDE5  43                 	db	67	;'C'
  1161  00FDE6  4B                 	db	75	;'K'
  1162  00FDE7  20                 	db	32
  1163  00FDE8  3E                 	db	62	;'>'
  1164  00FDE9  00                 	db	0
  1165  00FDEA                     STR_30:
  1166  00FDEA  50                 	db	80	;'P'
  1167  00FDEB  55                 	db	85	;'U'
  1168  00FDEC  53                 	db	83	;'S'
  1169  00FDED  48                 	db	72	;'H'
  1170  00FDEE  20                 	db	32
  1171  00FDEF  54                 	db	84	;'T'
  1172  00FDF0  4F                 	db	79	;'O'
  1173  00FDF1  20                 	db	32
  1174  00FDF2  43                 	db	67	;'C'
  1175  00FDF3  4F                 	db	79	;'O'
  1176  00FDF4  4E                 	db	78	;'N'
  1177  00FDF5  54                 	db	84	;'T'
  1178  00FDF6  49                 	db	73	;'I'
  1179  00FDF7  4E                 	db	78	;'N'
  1180  00FDF8  55                 	db	85	;'U'
  1181  00FDF9  45                 	db	69	;'E'
  1182  00FDFA  00                 	db	0
  1183  00FDFB                     STR_27:
  1184  00FDFB  4E                 	db	78	;'N'
  1185  00FDFC  4C                 	db	76	;'L'
  1186  00FDFD  41                 	db	65	;'A'
  1187  00FDFE  42                 	db	66	;'B'
  1188  00FDFF  3A                 	db	58	;':'
  1189  00FE00  20                 	db	32
  1190  00FE01  25                 	db	37
  1191  00FE02  64                 	db	100	;'d'
  1192  00FE03  7C                 	db	124
  1193  00FE04  4C                 	db	76	;'L'
  1194  00FE05  41                 	db	65	;'A'
  1195  00FE06  42                 	db	66	;'B'
  1196  00FE07  3A                 	db	58	;':'
  1197  00FE08  20                 	db	32
  1198  00FE09  25                 	db	37
  1199  00FE0A  64                 	db	100	;'d'
  1200  00FE0B  00                 	db	0
  1201  00FE0C                     STR_25:
  1202  00FE0C  4E                 	db	78	;'N'
  1203  00FE0D  54                 	db	84	;'T'
  1204  00FE0E  41                 	db	65	;'A'
  1205  00FE0F  42                 	db	66	;'B'
  1206  00FE10  3A                 	db	58	;':'
  1207  00FE11  20                 	db	32
  1208  00FE12  25                 	db	37
  1209  00FE13  64                 	db	100	;'d'
  1210  00FE14  7C                 	db	124
  1211  00FE15  54                 	db	84	;'T'
  1212  00FE16  41                 	db	65	;'A'
  1213  00FE17  42                 	db	66	;'B'
  1214  00FE18  3A                 	db	58	;':'
  1215  00FE19  20                 	db	32
  1216  00FE1A  25                 	db	37
  1217  00FE1B  64                 	db	100	;'d'
  1218  00FE1C  00                 	db	0
  1219  00FE1D                     STR_84:
  1220  00FE1D  4D                 	db	77	;'M'
  1221  00FE1E  41                 	db	65	;'A'
  1222  00FE1F  47                 	db	71	;'G'
  1223  00FE20  5F                 	db	95	;'_'
  1224  00FE21  73                 	db	115	;'s'
  1225  00FE22  69                 	db	105	;'i'
  1226  00FE23  67                 	db	103	;'g'
  1227  00FE24  6E                 	db	110	;'n'
  1228  00FE25  61                 	db	97	;'a'
  1229  00FE26  6C                 	db	108	;'l'
  1230  00FE27  3A                 	db	58	;':'
  1231  00FE28  20                 	db	32
  1232  00FE29  25                 	db	37
  1233  00FE2A  64                 	db	100	;'d'
  1234  00FE2B  20                 	db	32
  1235  00FE2C  00                 	db	0
  1236  00FE2D                     STR_104:
  1237  00FE2D  54                 	db	84	;'T'
  1238  00FE2E  53                 	db	83	;'S'
  1239  00FE2F  54                 	db	84	;'T'
  1240  00FE30  3A                 	db	58	;':'
  1241  00FE31  20                 	db	32
  1242  00FE32  54                 	db	84	;'T'
  1243  00FE33  49                 	db	73	;'I'
  1244  00FE34  4C                 	db	76	;'L'
  1245  00FE35  54                 	db	84	;'T'
  1246  00FE36  20                 	db	32
  1247  00FE37  53                 	db	83	;'S'
  1248  00FE38  45                 	db	69	;'E'
  1249  00FE39  52                 	db	82	;'R'
  1250  00FE3A  56                 	db	86	;'V'
  1251  00FE3B  4F                 	db	79	;'O'
  1252  00FE3C  00                 	db	0
  1253  00FE3D                     STR_65:
  1254  00FE3D  53                 	db	83	;'S'
  1255  00FE3E  4F                 	db	79	;'O'
  1256  00FE3F  52                 	db	82	;'R'
  1257  00FE40  54                 	db	84	;'T'
  1258  00FE41  49                 	db	73	;'I'
  1259  00FE42  4E                 	db	78	;'N'
  1260  00FE43  47                 	db	71	;'G'
  1261  00FE44  2E                 	db	46
  1262  00FE45  2E                 	db	46
  1263  00FE46  2E                 	db	46
  1264  00FE47  20                 	db	32
  1265  00FE48  20                 	db	32
  1266  00FE49  20                 	db	32
  1267  00FE4A  20                 	db	32
  1268  00FE4B  20                 	db	32
  1269  00FE4C  00                 	db	0
  1270  00FE4D                     STR_66:
  1271  00FE4D  54                 	db	84	;'T'
  1272  00FE4E  49                 	db	73	;'I'
  1273  00FE4F  4D                 	db	77	;'M'
  1274  00FE50  45                 	db	69	;'E'
  1275  00FE51  20                 	db	32
  1276  00FE52  25                 	db	37
  1277  00FE53  64                 	db	100	;'d'
  1278  00FE54  3A                 	db	58	;':'
  1279  00FE55  25                 	db	37
  1280  00FE56  30                 	db	48	;'0'
  1281  00FE57  32                 	db	50	;'2'
  1282  00FE58  64                 	db	100	;'d'
  1283  00FE59  20                 	db	32
  1284  00FE5A  20                 	db	32
  1285  00FE5B  20                 	db	32
  1286  00FE5C  00                 	db	0
  1287  00FE5D                     STR_4:
  1288  00FE5D  44                 	db	68	;'D'
  1289  00FE5E  49                 	db	73	;'I'
  1290  00FE5F  44                 	db	68	;'D'
  1291  00FE60  4E                 	db	78	;'N'
  1292  00FE61  27                 	db	39
  1293  00FE62  54                 	db	84	;'T'
  1294  00FE63  20                 	db	32
  1295  00FE64  43                 	db	67	;'C'
  1296  00FE65  4F                 	db	79	;'O'
  1297  00FE66  4D                 	db	77	;'M'
  1298  00FE67  50                 	db	80	;'P'
  1299  00FE68  4C                 	db	76	;'L'
  1300  00FE69  45                 	db	69	;'E'
  1301  00FE6A  54                 	db	84	;'T'
  1302  00FE6B  45                 	db	69	;'E'
  1303  00FE6C  00                 	db	0
  1304  00FE6D                     STR_123:
  1305  00FE6D  44                 	db	68	;'D'
  1306  00FE6E  3A                 	db	58	;':'
  1307  00FE6F  52                 	db	82	;'R'
  1308  00FE70  45                 	db	69	;'E'
  1309  00FE71  54                 	db	84	;'T'
  1310  00FE72  7C                 	db	124
  1311  00FE73  32                 	db	50	;'2'
  1312  00FE74  3A                 	db	58	;':'
  1313  00FE75  43                 	db	67	;'C'
  1314  00FE76  20                 	db	32
  1315  00FE77  25                 	db	37
  1316  00FE78  64                 	db	100	;'d'
  1317  00FE79  20                 	db	32
  1318  00FE7A  20                 	db	32
  1319  00FE7B  00                 	db	0
  1320  00FE7C                     STR_81:
  1321  00FE7C  49                 	db	73	;'I'
  1322  00FE7D  52                 	db	82	;'R'
  1323  00FE7E  5F                 	db	95	;'_'
  1324  00FE7F  73                 	db	115	;'s'
  1325  00FE80  69                 	db	105	;'i'
  1326  00FE81  67                 	db	103	;'g'
  1327  00FE82  6E                 	db	110	;'n'
  1328  00FE83  61                 	db	97	;'a'
  1329  00FE84  6C                 	db	108	;'l'
  1330  00FE85  3A                 	db	58	;':'
  1331  00FE86  20                 	db	32
  1332  00FE87  25                 	db	37
  1333  00FE88  64                 	db	100	;'d'
  1334  00FE89  20                 	db	32
  1335  00FE8A  00                 	db	0
  1336  00FE8B                     STR_110:
  1337  00FE8B  43                 	db	67	;'C'
  1338  00FE8C  41                 	db	65	;'A'
  1339  00FE8D  4D                 	db	77	;'M'
  1340  00FE8E  20                 	db	32
  1341  00FE8F  44                 	db	68	;'D'
  1342  00FE90  57                 	db	87	;'W'
  1343  00FE91  4E                 	db	78	;'N'
  1344  00FE92  20                 	db	32
  1345  00FE93  7C                 	db	124
  1346  00FE94  52                 	db	82	;'R'
  1347  00FE95  43                 	db	67	;'C'
  1348  00FE96  30                 	db	48	;'0'
  1349  00FE97  3D                 	db	61	;'='
  1350  00FE98  30                 	db	48	;'0'
  1351  00FE99  00                 	db	0
  1352  00FE9A                     STR_109:
  1353  00FE9A  43                 	db	67	;'C'
  1354  00FE9B  41                 	db	65	;'A'
  1355  00FE9C  4D                 	db	77	;'M'
  1356  00FE9D  20                 	db	32
  1357  00FE9E  55                 	db	85	;'U'
  1358  00FE9F  50                 	db	80	;'P'
  1359  00FEA0  20                 	db	32
  1360  00FEA1  20                 	db	32
  1361  00FEA2  7C                 	db	124
  1362  00FEA3  52                 	db	82	;'R'
  1363  00FEA4  43                 	db	67	;'C'
  1364  00FEA5  30                 	db	48	;'0'
  1365  00FEA6  3D                 	db	61	;'='
  1366  00FEA7  31                 	db	49	;'1'
  1367  00FEA8  00                 	db	0
  1368  00FEA9                     STR_83:
  1369  00FEA9  54                 	db	84	;'T'
  1370  00FEAA  53                 	db	83	;'S'
  1371  00FEAB  54                 	db	84	;'T'
  1372  00FEAC  3A                 	db	58	;':'
  1373  00FEAD  20                 	db	32
  1374  00FEAE  4D                 	db	77	;'M'
  1375  00FEAF  41                 	db	65	;'A'
  1376  00FEB0  47                 	db	71	;'G'
  1377  00FEB1  4E                 	db	78	;'N'
  1378  00FEB2  45                 	db	69	;'E'
  1379  00FEB3  54                 	db	84	;'T'
  1380  00FEB4  49                 	db	73	;'I'
  1381  00FEB5  53                 	db	83	;'S'
  1382  00FEB6  4D                 	db	77	;'M'
  1383  00FEB7  00                 	db	0
  1384  00FEB8                     STR_108:
  1385  00FEB8  54                 	db	84	;'T'
  1386  00FEB9  53                 	db	83	;'S'
  1387  00FEBA  54                 	db	84	;'T'
  1388  00FEBB  3A                 	db	58	;':'
  1389  00FEBC  20                 	db	32
  1390  00FEBD  43                 	db	67	;'C'
  1391  00FEBE  41                 	db	65	;'A'
  1392  00FEBF  4D                 	db	77	;'M'
  1393  00FEC0  20                 	db	32
  1394  00FEC1  53                 	db	83	;'S'
  1395  00FEC2  45                 	db	69	;'E'
  1396  00FEC3  52                 	db	82	;'R'
  1397  00FEC4  56                 	db	86	;'V'
  1398  00FEC5  4F                 	db	79	;'O'
  1399  00FEC6  00                 	db	0
  1400  00FEC7                     STR_97:
  1401  00FEC7  54                 	db	84	;'T'
  1402  00FEC8  53                 	db	83	;'S'
  1403  00FEC9  54                 	db	84	;'T'
  1404  00FECA  3A                 	db	58	;':'
  1405  00FECB  20                 	db	32
  1406  00FECC  50                 	db	80	;'P'
  1407  00FECD  41                 	db	65	;'A'
  1408  00FECE  4E                 	db	78	;'N'
  1409  00FECF  20                 	db	32
  1410  00FED0  53                 	db	83	;'S'
  1411  00FED1  45                 	db	69	;'E'
  1412  00FED2  52                 	db	82	;'R'
  1413  00FED3  56                 	db	86	;'V'
  1414  00FED4  4F                 	db	79	;'O'
  1415  00FED5  00                 	db	0
  1416  00FED6                     STR_76:
  1417  00FED6  41                 	db	65	;'A'
  1418  00FED7  4C                 	db	76	;'L'
  1419  00FED8  47                 	db	71	;'G'
  1420  00FED9  34                 	db	52	;'4'
  1421  00FEDA  3A                 	db	58	;':'
  1422  00FEDB  20                 	db	32
  1423  00FEDC  41                 	db	65	;'A'
  1424  00FEDD  4C                 	db	76	;'L'
  1425  00FEDE  4C                 	db	76	;'L'
  1426  00FEDF  20                 	db	32
  1427  00FEE0  43                 	db	67	;'C'
  1428  00FEE1  41                 	db	65	;'A'
  1429  00FEE2  4E                 	db	78	;'N'
  1430  00FEE3  53                 	db	83	;'S'
  1431  00FEE4  00                 	db	0
  1432  00FEE5                     STR_91:
  1433  00FEE5  54                 	db	84	;'T'
  1434  00FEE6  53                 	db	83	;'S'
  1435  00FEE7  54                 	db	84	;'T'
  1436  00FEE8  3A                 	db	58	;':'
  1437  00FEE9  20                 	db	32
  1438  00FEEA  44                 	db	68	;'D'
  1439  00FEEB  43                 	db	67	;'C'
  1440  00FEEC  20                 	db	32
  1441  00FEED  4D                 	db	77	;'M'
  1442  00FEEE  4F                 	db	79	;'O'
  1443  00FEEF  54                 	db	84	;'T'
  1444  00FEF0  4F                 	db	79	;'O'
  1445  00FEF1  52                 	db	82	;'R'
  1446  00FEF2  53                 	db	83	;'S'
  1447  00FEF3  00                 	db	0
  1448  00FEF4                     STR_71:
  1449  00FEF4  41                 	db	65	;'A'
  1450  00FEF5  4C                 	db	76	;'L'
  1451  00FEF6  47                 	db	71	;'G'
  1452  00FEF7  4F                 	db	79	;'O'
  1453  00FEF8  52                 	db	82	;'R'
  1454  00FEF9  49                 	db	73	;'I'
  1455  00FEFA  54                 	db	84	;'T'
  1456  00FEFB  48                 	db	72	;'H'
  1457  00FEFC  4D                 	db	77	;'M'
  1458  00FEFD  20                 	db	32
  1459  00FEFE  54                 	db	84	;'T'
  1460  00FEFF  45                 	db	69	;'E'
  1461  00FF00  53                 	db	83	;'S'
  1462  00FF01  54                 	db	84	;'T'
  1463  00FF02  00                 	db	0
  1464  00FF03                     STR_92:
  1465  00FF03  50                 	db	80	;'P'
  1466  00FF04  49                 	db	73	;'I'
  1467  00FF05  4E                 	db	78	;'N'
  1468  00FF06  20                 	db	32
  1469  00FF07  52                 	db	82	;'R'
  1470  00FF08  41                 	db	65	;'A'
  1471  00FF09  35                 	db	53	;'5'
  1472  00FF0A  20                 	db	32
  1473  00FF0B  48                 	db	72	;'H'
  1474  00FF0C  49                 	db	73	;'I'
  1475  00FF0D  47                 	db	71	;'G'
  1476  00FF0E  48                 	db	72	;'H'
  1477  00FF0F  2E                 	db	46
  1478  00FF10  00                 	db	0
  1479  00FF11                     STR_74:
  1480  00FF11  41                 	db	65	;'A'
  1481  00FF12  4C                 	db	76	;'L'
  1482  00FF13  47                 	db	71	;'G'
  1483  00FF14  32                 	db	50	;'2'
  1484  00FF15  3A                 	db	58	;':'
  1485  00FF16  20                 	db	32
  1486  00FF17  31                 	db	49	;'1'
  1487  00FF18  32                 	db	50	;'2'
  1488  00FF19  20                 	db	32
  1489  00FF1A  43                 	db	67	;'C'
  1490  00FF1B  41                 	db	65	;'A'
  1491  00FF1C  4E                 	db	78	;'N'
  1492  00FF1D  53                 	db	83	;'S'
  1493  00FF1E  00                 	db	0
  1494  00FF1F                     STR_77:
  1495  00FF1F  41                 	db	65	;'A'
  1496  00FF20  4C                 	db	76	;'L'
  1497  00FF21  47                 	db	71	;'G'
  1498  00FF22  35                 	db	53	;'5'
  1499  00FF23  3A                 	db	58	;':'
  1500  00FF24  20                 	db	32
  1501  00FF25  4E                 	db	78	;'N'
  1502  00FF26  4F                 	db	79	;'O'
  1503  00FF27  20                 	db	32
  1504  00FF28  43                 	db	67	;'C'
  1505  00FF29  41                 	db	65	;'A'
  1506  00FF2A  4E                 	db	78	;'N'
  1507  00FF2B  53                 	db	83	;'S'
  1508  00FF2C  00                 	db	0
  1509  00FF2D                     STR_72:
  1510  00FF2D  50                 	db	80	;'P'
  1511  00FF2E  55                 	db	85	;'U'
  1512  00FF2F  53                 	db	83	;'S'
  1513  00FF30  48                 	db	72	;'H'
  1514  00FF31  20                 	db	32
  1515  00FF32  54                 	db	84	;'T'
  1516  00FF33  4F                 	db	79	;'O'
  1517  00FF34  20                 	db	32
  1518  00FF35  53                 	db	83	;'S'
  1519  00FF36  54                 	db	84	;'T'
  1520  00FF37  41                 	db	65	;'A'
  1521  00FF38  52                 	db	82	;'R'
  1522  00FF39  54                 	db	84	;'T'
  1523  00FF3A  00                 	db	0
  1524  00FF3B                     STR_23:
  1525  00FF3B  25                 	db	37
  1526  00FF3C  64                 	db	100	;'d'
  1527  00FF3D  20                 	db	32
  1528  00FF3E  4D                 	db	77	;'M'
  1529  00FF3F  49                 	db	73	;'I'
  1530  00FF40  4E                 	db	78	;'N'
  1531  00FF41  20                 	db	32
  1532  00FF42  25                 	db	37
  1533  00FF43  64                 	db	100	;'d'
  1534  00FF44  20                 	db	32
  1535  00FF45  53                 	db	83	;'S'
  1536  00FF46  45                 	db	69	;'E'
  1537  00FF47  43                 	db	67	;'C'
  1538  00FF48  00                 	db	0
  1539  00FF49                     STR_2:
  1540  00FF49  54                 	db	84	;'T'
  1541  00FF4A  49                 	db	73	;'I'
  1542  00FF4B  4D                 	db	77	;'M'
  1543  00FF4C  45                 	db	69	;'E'
  1544  00FF4D  3A                 	db	58	;':'
  1545  00FF4E  20                 	db	32
  1546  00FF4F  25                 	db	37
  1547  00FF50  64                 	db	100	;'d'
  1548  00FF51  3A                 	db	58	;':'
  1549  00FF52  25                 	db	37
  1550  00FF53  30                 	db	48	;'0'
  1551  00FF54  32                 	db	50	;'2'
  1552  00FF55  64                 	db	100	;'d'
  1553  00FF56  00                 	db	0
  1554  00FF57                     STR_80:
  1555  00FF57  54                 	db	84	;'T'
  1556  00FF58  53                 	db	83	;'S'
  1557  00FF59  54                 	db	84	;'T'
  1558  00FF5A  3A                 	db	58	;':'
  1559  00FF5B  20                 	db	32
  1560  00FF5C  49                 	db	73	;'I'
  1561  00FF5D  52                 	db	82	;'R'
  1562  00FF5E  20                 	db	32
  1563  00FF5F  53                 	db	83	;'S'
  1564  00FF60  4E                 	db	78	;'N'
  1565  00FF61  53                 	db	83	;'S'
  1566  00FF62  52                 	db	82	;'R'
  1567  00FF63  00                 	db	0
  1568  00FF64                     STR_75:
  1569  00FF64  41                 	db	65	;'A'
  1570  00FF65  4C                 	db	76	;'L'
  1571  00FF66  47                 	db	71	;'G'
  1572  00FF67  33                 	db	51	;'3'
  1573  00FF68  3A                 	db	58	;':'
  1574  00FF69  20                 	db	32
  1575  00FF6A  31                 	db	49	;'1'
  1576  00FF6B  20                 	db	32
  1577  00FF6C  43                 	db	67	;'C'
  1578  00FF6D  41                 	db	65	;'A'
  1579  00FF6E  4E                 	db	78	;'N'
  1580  00FF6F  00                 	db	0
  1581  00FF70                     STR_94:
  1582  00FF70  50                 	db	80	;'P'
  1583  00FF71  49                 	db	73	;'I'
  1584  00FF72  4E                 	db	78	;'N'
  1585  00FF73  20                 	db	32
  1586  00FF74  52                 	db	82	;'R'
  1587  00FF75  41                 	db	65	;'A'
  1588  00FF76  33                 	db	51	;'3'
  1589  00FF77  2E                 	db	46
  1590  00FF78  2E                 	db	46
  1591  00FF79  2E                 	db	46
  1592  00FF7A  00                 	db	0
  1593  00FF7B                     STR_96:
  1594  00FF7B  50                 	db	80	;'P'
  1595  00FF7C  49                 	db	73	;'I'
  1596  00FF7D  4E                 	db	78	;'N'
  1597  00FF7E  20                 	db	32
  1598  00FF7F  52                 	db	82	;'R'
  1599  00FF80  41                 	db	65	;'A'
  1600  00FF81  34                 	db	52	;'4'
  1601  00FF82  2E                 	db	46
  1602  00FF83  2E                 	db	46
  1603  00FF84  2E                 	db	46
  1604  00FF85  00                 	db	0
  1605  00FF86                     STR_85:
  1606  00FF86  54                 	db	84	;'T'
  1607  00FF87  53                 	db	83	;'S'
  1608  00FF88  54                 	db	84	;'T'
  1609  00FF89  3A                 	db	58	;':'
  1610  00FF8A  20                 	db	32
  1611  00FF8B  43                 	db	67	;'C'
  1612  00FF8C  4F                 	db	79	;'O'
  1613  00FF8D  4E                 	db	78	;'N'
  1614  00FF8E  44                 	db	68	;'D'
  1615  00FF8F  00                 	db	0
  1616  00FF90                     STR_89:
  1617  00FF90  41                 	db	65	;'A'
  1618  00FF91  43                 	db	67	;'C'
  1619  00FF92  54                 	db	84	;'T'
  1620  00FF93  55                 	db	85	;'U'
  1621  00FF94  41                 	db	65	;'A'
  1622  00FF95  54                 	db	84	;'T'
  1623  00FF96  4F                 	db	79	;'O'
  1624  00FF97  52                 	db	82	;'R'
  1625  00FF98  53                 	db	83	;'S'
  1626  00FF99  00                 	db	0
  1627  00FF9A                     STR_22:
  1628  00FF9A  44                 	db	68	;'D'
  1629  00FF9B  55                 	db	85	;'U'
  1630  00FF9C  52                 	db	82	;'R'
  1631  00FF9D  41                 	db	65	;'A'
  1632  00FF9E  54                 	db	84	;'T'
  1633  00FF9F  49                 	db	73	;'I'
  1634  00FFA0  4F                 	db	79	;'O'
  1635  00FFA1  4E                 	db	78	;'N'
  1636  00FFA2  3A                 	db	58	;':'
  1637  00FFA3  00                 	db	0
  1638  00FFA4                     STR_87:
  1639  00FFA4  43                 	db	67	;'C'
  1640  00FFA5  4F                 	db	79	;'O'
  1641  00FFA6  4E                 	db	78	;'N'
  1642  00FFA7  44                 	db	68	;'D'
  1643  00FFA8  3A                 	db	58	;':'
  1644  00FFA9  20                 	db	32
  1645  00FFAA  25                 	db	37
  1646  00FFAB  64                 	db	100	;'d'
  1647  00FFAC  00                 	db	0
  1648  00FFAD                     STR_78:
  1649  00FFAD  53                 	db	83	;'S'
  1650  00FFAE  45                 	db	69	;'E'
  1651  00FFAF  4E                 	db	78	;'N'
  1652  00FFB0  53                 	db	83	;'S'
  1653  00FFB1  4F                 	db	79	;'O'
  1654  00FFB2  52                 	db	82	;'R'
  1655  00FFB3  53                 	db	83	;'S'
  1656  00FFB4  00                 	db	0
  1657  00FFB5                     STR_131:
  1658  00FFB5  28                 	db	40
  1659  00FFB6  6E                 	db	110	;'n'
  1660  00FFB7  75                 	db	117	;'u'
  1661  00FFB8  6C                 	db	108	;'l'
  1662  00FFB9  6C                 	db	108	;'l'
  1663  00FFBA  29                 	db	41
  1664  00FFBB  00                 	db	0
  1665  00FFBC                     STR_68:
  1666  00FFBC  46                 	db	70	;'F'
  1667  00FFBD  41                 	db	65	;'A'
  1668  00FFBE  49                 	db	73	;'I'
  1669  00FFBF  4C                 	db	76	;'L'
  1670  00FFC0  45                 	db	69	;'E'
  1671  00FFC1  44                 	db	68	;'D'
  1672  00FFC2  00                 	db	0
  1673  00FFC3                     STR_7:
  1674  00FFC3  53                 	db	83	;'S'
  1675  00FFC4  54                 	db	84	;'T'
  1676  00FFC5  41                 	db	65	;'A'
  1677  00FFC6  52                 	db	82	;'R'
  1678  00FFC7  54                 	db	84	;'T'
  1679  00FFC8  3A                 	db	58	;':'
  1680  00FFC9  00                 	db	0
  1681  00FFCA                     STR_9:
  1682  00FFCA  46                 	db	70	;'F'
  1683  00FFCB  45                 	db	69	;'E'
  1684  00FFCC  42                 	db	66	;'B'
  1685  00FFCD  00                 	db	0
  1686  00FFCE                     STR_19:
  1687  00FFCE  44                 	db	68	;'D'
  1688  00FFCF  45                 	db	69	;'E'
  1689  00FFD0  43                 	db	67	;'C'
  1690  00FFD1  00                 	db	0
  1691  00FFD2                     STR_15:
  1692  00FFD2  41                 	db	65	;'A'
  1693  00FFD3  55                 	db	85	;'U'
  1694  00FFD4  47                 	db	71	;'G'
  1695  00FFD5  00                 	db	0
  1696  00FFD6                     STR_14:
  1697  00FFD6  4A                 	db	74	;'J'
  1698  00FFD7  55                 	db	85	;'U'
  1699  00FFD8  4C                 	db	76	;'L'
  1700  00FFD9  00                 	db	0
  1701  00FFDA                     STR_8:
  1702  00FFDA  4A                 	db	74	;'J'
  1703  00FFDB  41                 	db	65	;'A'
  1704  00FFDC  4E                 	db	78	;'N'
  1705  00FFDD  00                 	db	0
  1706  00FFDE                     STR_13:
  1707  00FFDE  4A                 	db	74	;'J'
  1708  00FFDF  55                 	db	85	;'U'
  1709  00FFE0  4E                 	db	78	;'N'
  1710  00FFE1  00                 	db	0
  1711  00FFE2                     STR_16:
  1712  00FFE2  53                 	db	83	;'S'
  1713  00FFE3  45                 	db	69	;'E'
  1714  00FFE4  50                 	db	80	;'P'
  1715  00FFE5  00                 	db	0
  1716  00FFE6                     STR_10:
  1717  00FFE6  4D                 	db	77	;'M'
  1718  00FFE7  41                 	db	65	;'A'
  1719  00FFE8  52                 	db	82	;'R'
  1720  00FFE9  00                 	db	0
  1721  00FFEA                     STR_11:
  1722  00FFEA  41                 	db	65	;'A'
  1723  00FFEB  50                 	db	80	;'P'
  1724  00FFEC  52                 	db	82	;'R'
  1725  00FFED  00                 	db	0
  1726  00FFEE                     STR_20:
  1727  00FFEE  45                 	db	69	;'E'
  1728  00FFEF  52                 	db	82	;'R'
  1729  00FFF0  52                 	db	82	;'R'
  1730  00FFF1  00                 	db	0
  1731  00FFF2                     STR_17:
  1732  00FFF2  4F                 	db	79	;'O'
  1733  00FFF3  43                 	db	67	;'C'
  1734  00FFF4  54                 	db	84	;'T'
  1735  00FFF5  00                 	db	0
  1736  00FFF6                     STR_18:
  1737  00FFF6  4E                 	db	78	;'N'
  1738  00FFF7  4F                 	db	79	;'O'
  1739  00FFF8  56                 	db	86	;'V'
  1740  00FFF9  00                 	db	0
  1741  00FFFA                     STR_12:
  1742  00FFFA  4D                 	db	77	;'M'
  1743  00FFFB  41                 	db	65	;'A'
  1744  00FFFC  59                 	db	89	;'Y'
  1745  00FFFD  00                 	db	0
  1746  0000                     
  1747                           ; #config settings
  1748  00FFFE  00                 	db	0	; dummy byte at the end
  1749  0000                     
  1750                           	psect	cinit
  1751  005388                     __pcinit:
  1752                           	opt stack 0
  1753  005388                     start_initialization:
  1754                           	opt stack 0
  1755  005388                     __initialization:
  1756                           	opt stack 0
  1757                           
  1758                           ; Initialize objects allocated to BANK1 (8 bytes)
  1759                           ; load TBLPTR registers with __pidataBANK1
  1760  005388  0ECE               	movlw	low __pidataBANK1
  1761  00538A  6EF6               	movwf	tblptrl,c
  1762  00538C  0E5B               	movlw	high __pidataBANK1
  1763  00538E  6EF7               	movwf	tblptrh,c
  1764  005390  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1765  005392  6EF8               	movwf	tblptru,c
  1766  005394  EE01  F049         	lfsr	0,__pdataBANK1
  1767  005398  EE10 F008          	lfsr	1,8
  1768  00539C                     copy_data0:
  1769  00539C  0009               	tblrd		*+
  1770  00539E  CFF5 FFEE          	movff	tablat,postinc0
  1771  0053A2  50E5               	movf	postdec1,w,c
  1772  0053A4  50E1               	movf	fsr1l,w,c
  1773  0053A6  E1FA               	bnz	copy_data0
  1774                           
  1775                           ; Clear objects allocated to BANK1 (73 bytes)
  1776  0053A8  EE01  F000         	lfsr	0,__pbssBANK1
  1777  0053AC  0E49               	movlw	73
  1778  0053AE                     clear_0:
  1779  0053AE  6AEE               	clrf	postinc0,c
  1780  0053B0  06E8               	decf	wreg,f,c
  1781  0053B2  E1FD               	bnz	clear_0
  1782                           
  1783                           ; Clear objects allocated to BANK0 (38 bytes)
  1784  0053B4  EE00  F0DA         	lfsr	0,__pbssBANK0
  1785  0053B8  0E26               	movlw	38
  1786  0053BA                     clear_1:
  1787  0053BA  6AEE               	clrf	postinc0,c
  1788  0053BC  06E8               	decf	wreg,f,c
  1789  0053BE  E1FD               	bnz	clear_1
  1790                           
  1791                           ; Clear objects allocated to COMRAM (35 bytes)
  1792  0053C0  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1793  0053C4  0E23               	movlw	35
  1794  0053C6                     clear_2:
  1795  0053C6  6AEE               	clrf	postinc0,c
  1796  0053C8  06E8               	decf	wreg,f,c
  1797  0053CA  E1FD               	bnz	clear_2
  1798  0053CC                     end_of_initialization:
  1799                           	opt stack 0
  1800  0053CC                     __end_of__initialization:
  1801                           	opt stack 0
  1802  0053CC  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1803  0053CE  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1804  0053D0  0100               	movlb	0
  1805  0053D2  EF5E  F023         	goto	_main	;jump to C main() function
  1806                           tblptru	equ	0xFF8
  1807                           tblptrh	equ	0xFF7
  1808                           tblptrl	equ	0xFF6
  1809                           tablat	equ	0xFF5
  1810                           postinc0	equ	0xFEE
  1811                           wreg	equ	0xFE8
  1812                           postdec1	equ	0xFE5
  1813                           fsr1l	equ	0xFE1
  1814                           
  1815                           	psect	bssCOMRAM
  1816  00005B                     __pbssCOMRAM:
  1817                           	opt stack 0
  1818  00005B                     _servoTimes:
  1819                           	opt stack 0
  1820  00005B                     	ds	8
  1821  000063                     _back:
  1822                           	opt stack 0
  1823  000063                     	ds	2
  1824  000065                     _down:
  1825                           	opt stack 0
  1826  000065                     	ds	2
  1827  000067                     _enter:
  1828                           	opt stack 0
  1829  000067                     	ds	2
  1830  000069                     _f_panning_to_bin:
  1831                           	opt stack 0
  1832  000069                     	ds	2
  1833  00006B                     _pan_servo_state:
  1834                           	opt stack 0
  1835  00006B                     	ds	2
  1836  00006D                     _servo_timer_counter:
  1837                           	opt stack 0
  1838  00006D                     	ds	2
  1839  00006F                     _servo_timer_target:
  1840                           	opt stack 0
  1841  00006F                     	ds	2
  1842  000071                     _tilt_servo_state:
  1843                           	opt stack 0
  1844  000071                     	ds	2
  1845  000073                     _timer2_counter:
  1846                           	opt stack 0
  1847  000073                     	ds	2
  1848  000075                     _up:
  1849                           	opt stack 0
  1850  000075                     	ds	2
  1851  000077                     _was_low_1:
  1852                           	opt stack 0
  1853  000077                     	ds	2
  1854  000079                     _was_low_2:
  1855                           	opt stack 0
  1856  000079                     	ds	2
  1857  00007B                     _was_low_3:
  1858                           	opt stack 0
  1859  00007B                     	ds	2
  1860  00007D                     _input:
  1861                           	opt stack 0
  1862  00007D                     	ds	1
  1863                           tblptru	equ	0xFF8
  1864                           tblptrh	equ	0xFF7
  1865                           tblptrl	equ	0xFF6
  1866                           tablat	equ	0xFF5
  1867                           postinc0	equ	0xFEE
  1868                           wreg	equ	0xFE8
  1869                           postdec1	equ	0xFE5
  1870                           fsr1l	equ	0xFE1
  1871                           
  1872                           	psect	bssBANK0
  1873  0000DA                     __pbssBANK0:
  1874                           	opt stack 0
  1875  0000DA                     _sensor_outputs:
  1876                           	opt stack 0
  1877  0000DA                     	ds	4
  1878  0000DE                     _COND_signal:
  1879                           	opt stack 0
  1880  0000DE                     	ds	2
  1881  0000E0                     _IR_signal:
  1882                           	opt stack 0
  1883  0000E0                     	ds	2
  1884  0000E2                     _MAG_signal:
  1885                           	opt stack 0
  1886  0000E2                     	ds	2
  1887  0000E4                     _RTCflag:
  1888                           	opt stack 0
  1889  0000E4                     	ds	2
  1890  0000E6                     _cur_state:
  1891                           	opt stack 0
  1892  0000E6                     	ds	2
  1893  0000E8                     _debug:
  1894                           	opt stack 0
  1895  0000E8                     	ds	2
  1896  0000EA                     _f_arm_position:
  1897                           	opt stack 0
  1898  0000EA                     	ds	2
  1899  0000EC                     _f_lastCan:
  1900                           	opt stack 0
  1901  0000EC                     	ds	2
  1902  0000EE                     _f_loadingNewCan:
  1903                           	opt stack 0
  1904  0000EE                     	ds	2
  1905  0000F0                     _log:
  1906                           	opt stack 0
  1907  0000F0                     	ds	2
  1908  0000F2                     _log_completion:
  1909                           	opt stack 0
  1910  0000F2                     	ds	2
  1911  0000F4                     _log_count_pop_no_tab:
  1912                           	opt stack 0
  1913  0000F4                     	ds	2
  1914  0000F6                     _log_total_time:
  1915                           	opt stack 0
  1916  0000F6                     	ds	2
  1917  0000F8                     _logstate:
  1918                           	opt stack 0
  1919  0000F8                     	ds	2
  1920  0000FA                     _total_time:
  1921                           	opt stack 0
  1922  0000FA                     	ds	2
  1923  0000FC                     _machine_state:
  1924                           	opt stack 0
  1925  0000FC                     	ds	1
  1926  0000FD                     _sel:
  1927                           	opt stack 0
  1928  0000FD                     	ds	1
  1929  0000FE                     _count_total:
  1930                           	opt stack 0
  1931  0000FE                     	ds	2
  1932                           tblptru	equ	0xFF8
  1933                           tblptrh	equ	0xFF7
  1934                           tblptrl	equ	0xFF6
  1935                           tablat	equ	0xFF5
  1936                           postinc0	equ	0xFEE
  1937                           wreg	equ	0xFE8
  1938                           postdec1	equ	0xFE5
  1939                           fsr1l	equ	0xFE1
  1940                           
  1941                           	psect	bssBANK1
  1942  000100                     __pbssBANK1:
  1943                           	opt stack 0
  1944  000100                     _log_startTime:
  1945                           	opt stack 0
  1946  000100                     	ds	14
  1947  00010E                     _startTime:
  1948                           	opt stack 0
  1949  00010E                     	ds	14
  1950  00011C                     _time:
  1951                           	opt stack 0
  1952  00011C                     	ds	7
  1953  000123                     _count_can_no_lab:
  1954                           	opt stack 0
  1955  000123                     	ds	2
  1956  000125                     _count_can_w_lab:
  1957                           	opt stack 0
  1958  000125                     	ds	2
  1959  000127                     _count_pop_no_tab:
  1960                           	opt stack 0
  1961  000127                     	ds	2
  1962  000129                     _count_pop_w_tab:
  1963                           	opt stack 0
  1964  000129                     	ds	2
  1965  00012B                     _cur_can:
  1966                           	opt stack 0
  1967  00012B                     	ds	2
  1968  00012D                     _f_ID_receive:
  1969                           	opt stack 0
  1970  00012D                     	ds	2
  1971  00012F                     _f_can_coming_to_ID:
  1972                           	opt stack 0
  1973  00012F                     	ds	2
  1974  000131                     _f_can_coming_to_distribution:
  1975                           	opt stack 0
  1976  000131                     	ds	2
  1977  000133                     _f_can_distributed:
  1978                           	opt stack 0
  1979  000133                     	ds	2
  1980  000135                     _f_most_recent_sort_time:
  1981                           	opt stack 0
  1982  000135                     	ds	2
  1983  000137                     _first:
  1984                           	opt stack 0
  1985  000137                     	ds	2
  1986  000139                     _firstboot:
  1987                           	opt stack 0
  1988  000139                     	ds	2
  1989  00013B                     _i:
  1990                           	opt stack 0
  1991  00013B                     	ds	2
  1992  00013D                     _log_count_can_no_lab:
  1993                           	opt stack 0
  1994  00013D                     	ds	2
  1995  00013F                     _log_count_can_w_lab:
  1996                           	opt stack 0
  1997  00013F                     	ds	2
  1998  000141                     _log_count_pop_w_tab:
  1999                           	opt stack 0
  2000  000141                     	ds	2
  2001  000143                     _log_count_total:
  2002                           	opt stack 0
  2003  000143                     	ds	2
  2004  000145                     _most_recent_sort_time:
  2005                           	opt stack 0
  2006  000145                     	ds	2
  2007  000147                     _var:
  2008                           	opt stack 0
  2009  000147                     	ds	2
  2010                           tblptru	equ	0xFF8
  2011                           tblptrh	equ	0xFF7
  2012                           tblptrl	equ	0xFF6
  2013                           tablat	equ	0xFF5
  2014                           postinc0	equ	0xFEE
  2015                           wreg	equ	0xFE8
  2016                           postdec1	equ	0xFE5
  2017                           fsr1l	equ	0xFE1
  2018                           
  2019                           	psect	dataBANK1
  2020  000149                     __pdataBANK1:
  2021                           	opt stack 0
  2022  000149                     UI@F3246:
  2023                           	opt stack 0
  2024  000149                     	ds	4
  2025  00014D                     printRTC@F3236:
  2026                           	opt stack 0
  2027  00014D                     	ds	4
  2028                           tblptru	equ	0xFF8
  2029                           tblptrh	equ	0xFF7
  2030                           tblptrl	equ	0xFF6
  2031                           tablat	equ	0xFF5
  2032                           postinc0	equ	0xFEE
  2033                           wreg	equ	0xFE8
  2034                           postdec1	equ	0xFE5
  2035                           fsr1l	equ	0xFE1
  2036                           
  2037                           	psect	cstackBANK0
  2038  000080                     __pcstackBANK0:
  2039                           	opt stack 0
  2040  000080                     ??_delay_ms:
  2041  000080                     ??_isdigit:
  2042  000080                     ??_readADC:
  2043  000080                     ??_I2C_Master_Wait:
  2044  000080                     ?___wmul:
  2045                           	opt stack 0
  2046  000080                     ?___awmod:
  2047                           	opt stack 0
  2048  000080                     ?___lwdiv:
  2049                           	opt stack 0
  2050  000080                     ?___ftpack:
  2051                           	opt stack 0
  2052  000080                     ?___lldiv:
  2053                           	opt stack 0
  2054  000080                     lcdNibble@temp:
  2055                           	opt stack 0
  2056  000080                     initTime@m:
  2057                           	opt stack 0
  2058  000080                     updateServoPosition@time_us:
  2059                           	opt stack 0
  2060  000080                     EEPROM_read@address:
  2061                           	opt stack 0
  2062  000080                     ___wmul@multiplier:
  2063                           	opt stack 0
  2064  000080                     ___awmod@dividend:
  2065                           	opt stack 0
  2066  000080                     ___lwdiv@dividend:
  2067                           	opt stack 0
  2068  000080                     strcpy@to:
  2069                           	opt stack 0
  2070  000080                     ___ftpack@arg:
  2071                           	opt stack 0
  2072  000080                     ___lldiv@dividend:
  2073                           	opt stack 0
  2074                           
  2075                           ; 4 bytes @ 0x0
  2076  000080                     	ds	1
  2077  000081                     readADC@channel:
  2078                           	opt stack 0
  2079  000081                     I2C_Master_Read@a:
  2080                           	opt stack 0
  2081  000081                     lcdNibble@data:
  2082                           	opt stack 0
  2083  000081                     initTime@h:
  2084                           	opt stack 0
  2085  000081                     delay_ms@milliseconds:
  2086                           	opt stack 0
  2087  000081                     _isdigit$2068:
  2088                           	opt stack 0
  2089  000081                     I2C_Master_Write@d:
  2090                           	opt stack 0
  2091                           
  2092                           ; 2 bytes @ 0x1
  2093  000081                     	ds	1
  2094  000082                     ??_readIR:
  2095  000082                     ??_readMAG:
  2096  000082                     ??_readCOND:
  2097  000082                     I2C_Master_Read@temp:
  2098                           	opt stack 0
  2099  000082                     lcdInst@data:
  2100                           	opt stack 0
  2101  000082                     putch@data:
  2102                           	opt stack 0
  2103  000082                     initTime@w:
  2104                           	opt stack 0
  2105  000082                     isdigit@c:
  2106                           	opt stack 0
  2107  000082                     updateServoPosition@timer:
  2108                           	opt stack 0
  2109  000082                     ___wmul@multiplicand:
  2110                           	opt stack 0
  2111  000082                     ___awmod@divisor:
  2112                           	opt stack 0
  2113  000082                     ___lwdiv@divisor:
  2114                           	opt stack 0
  2115  000082                     strcpy@from:
  2116                           	opt stack 0
  2117                           
  2118                           ; 2 bytes @ 0x2
  2119  000082                     	ds	1
  2120  000083                     ??_initLCD:
  2121  000083                     initTime@DD:
  2122                           	opt stack 0
  2123  000083                     ___ftpack@exp:
  2124                           	opt stack 0
  2125  000083                     getRTC@i:
  2126                           	opt stack 0
  2127                           
  2128                           ; 2 bytes @ 0x3
  2129  000083                     	ds	1
  2130  000084                     ??_updateServoPosition:
  2131  000084                     initTime@MM:
  2132                           	opt stack 0
  2133  000084                     ___awmod@counter:
  2134                           	opt stack 0
  2135  000084                     ___ftpack@sign:
  2136                           	opt stack 0
  2137  000084                     readIR@res:
  2138                           	opt stack 0
  2139  000084                     readMAG@res:
  2140                           	opt stack 0
  2141  000084                     readCOND@res:
  2142                           	opt stack 0
  2143  000084                     ___wmul@product:
  2144                           	opt stack 0
  2145  000084                     ___lwdiv@quotient:
  2146                           	opt stack 0
  2147  000084                     strcpy@cp:
  2148                           	opt stack 0
  2149  000084                     ___lldiv@divisor:
  2150                           	opt stack 0
  2151                           
  2152                           ; 4 bytes @ 0x4
  2153  000084                     	ds	1
  2154  000085                     ??_initSortTimer:
  2155  000085                     ??___ftpack:
  2156  000085                     initTime@YY:
  2157                           	opt stack 0
  2158  000085                     ___awmod@sign:
  2159                           	opt stack 0
  2160                           
  2161                           ; 1 bytes @ 0x5
  2162  000085                     	ds	1
  2163  000086                     ??_getIR:
  2164  000086                     ??_getMAG:
  2165  000086                     ?___awdiv:
  2166                           	opt stack 0
  2167  000086                     initTime@s:
  2168                           	opt stack 0
  2169  000086                     ___lwdiv@counter:
  2170                           	opt stack 0
  2171  000086                     updateServoPosition@my_time:
  2172                           	opt stack 0
  2173  000086                     ___awdiv@dividend:
  2174                           	opt stack 0
  2175                           
  2176                           ; 2 bytes @ 0x6
  2177  000086                     	ds	1
  2178  000087                     ?___lwmod:
  2179                           	opt stack 0
  2180  000087                     getIR@i:
  2181                           	opt stack 0
  2182  000087                     ___lwmod@dividend:
  2183                           	opt stack 0
  2184                           
  2185                           ; 2 bytes @ 0x7
  2186  000087                     	ds	1
  2187  000088                     ??_Distribution:
  2188  000088                     ??_initServos:
  2189  000088                     initSortTimer@i:
  2190                           	opt stack 0
  2191  000088                     ___awdiv@divisor:
  2192                           	opt stack 0
  2193  000088                     ___lldiv@quotient:
  2194                           	opt stack 0
  2195                           
  2196                           ; 4 bytes @ 0x8
  2197  000088                     	ds	1
  2198  000089                     ___lwmod@divisor:
  2199                           	opt stack 0
  2200                           
  2201                           ; 2 bytes @ 0x9
  2202  000089                     	ds	1
  2203  00008A                     ___awdiv@counter:
  2204                           	opt stack 0
  2205                           
  2206                           ; 1 bytes @ 0xA
  2207  00008A                     	ds	1
  2208  00008B                     ___awdiv@sign:
  2209                           	opt stack 0
  2210  00008B                     ___lwmod@counter:
  2211                           	opt stack 0
  2212                           
  2213                           ; 1 bytes @ 0xB
  2214  00008B                     	ds	1
  2215  00008C                     ___lldiv@counter:
  2216                           	opt stack 0
  2217  00008C                     ___awdiv@quotient:
  2218                           	opt stack 0
  2219                           
  2220                           ; 2 bytes @ 0xC
  2221  00008C                     	ds	1
  2222  00008D                     I2C_Master_Init@c:
  2223                           	opt stack 0
  2224                           
  2225                           ; 4 bytes @ 0xD
  2226  00008D                     	ds	1
  2227  00008E                     ?_printf:
  2228                           	opt stack 0
  2229  00008E                     ?___awtoft:
  2230                           	opt stack 0
  2231  00008E                     printf@f:
  2232                           	opt stack 0
  2233  00008E                     ___awtoft@c:
  2234                           	opt stack 0
  2235                           
  2236                           ; 2 bytes @ 0xE
  2237  00008E                     	ds	3
  2238  000091                     ??_I2C_Master_Init:
  2239  000091                     ___awtoft@sign:
  2240                           	opt stack 0
  2241                           
  2242                           ; 1 bytes @ 0x11
  2243  000091                     	ds	1
  2244  000092                     ___ftge@ff1:
  2245                           	opt stack 0
  2246                           
  2247                           ; 3 bytes @ 0x12
  2248  000092                     	ds	3
  2249  000095                     ??_loadRTC:
  2250  000095                     ___ftge@ff2:
  2251                           	opt stack 0
  2252                           
  2253                           ; 3 bytes @ 0x15
  2254  000095                     	ds	1
  2255  000096                     loadRTC@i:
  2256                           	opt stack 0
  2257                           
  2258                           ; 2 bytes @ 0x16
  2259  000096                     	ds	2
  2260  000098                     ??___ftge:
  2261                           
  2262                           ; 1 bytes @ 0x18
  2263  000098                     	ds	2
  2264  00009A                     ??_printf:
  2265                           
  2266                           ; 1 bytes @ 0x1A
  2267  00009A                     	ds	4
  2268  00009E                     printf@prec:
  2269                           	opt stack 0
  2270                           
  2271                           ; 1 bytes @ 0x1E
  2272  00009E                     	ds	1
  2273  00009F                     printf@cp:
  2274                           	opt stack 0
  2275                           
  2276                           ; 2 bytes @ 0x1F
  2277  00009F                     	ds	2
  2278  0000A1                     printf@ap:
  2279                           	opt stack 0
  2280                           
  2281                           ; 2 bytes @ 0x21
  2282  0000A1                     	ds	2
  2283  0000A3                     printf@len:
  2284                           	opt stack 0
  2285                           
  2286                           ; 2 bytes @ 0x23
  2287  0000A3                     	ds	2
  2288  0000A5                     printf@val:
  2289                           	opt stack 0
  2290                           
  2291                           ; 2 bytes @ 0x25
  2292  0000A5                     	ds	2
  2293  0000A7                     printf@flag:
  2294                           	opt stack 0
  2295                           
  2296                           ; 1 bytes @ 0x27
  2297  0000A7                     	ds	1
  2298  0000A8                     printf@c:
  2299                           	opt stack 0
  2300                           
  2301                           ; 1 bytes @ 0x28
  2302  0000A8                     	ds	1
  2303  0000A9                     printf@width:
  2304                           	opt stack 0
  2305                           
  2306                           ; 2 bytes @ 0x29
  2307  0000A9                     	ds	2
  2308  0000AB                     ??_printRTC:
  2309  0000AB                     ??_ID:
  2310  0000AB                     ??_algorithmTest:
  2311  0000AB                     ??_sensorTest:
  2312  0000AB                     ??_actuatorTest:
  2313  0000AB                     ??_arm:
  2314  0000AB                     ??_PortTestDC:
  2315  0000AB                     ??_SpeedTest:
  2316  0000AB                     ??_PortTestPusher:
  2317  0000AB                     ??_PlatformTest:
  2318  0000AB                     ??_BothServos:
  2319  0000AB                     ??_BlockerTest:
  2320  0000AB                     EEPROM_write@address:
  2321                           	opt stack 0
  2322                           
  2323                           ; 2 bytes @ 0x2B
  2324  0000AB                     	ds	1
  2325  0000AC                     arm@on:
  2326                           	opt stack 0
  2327                           
  2328                           ; 2 bytes @ 0x2C
  2329  0000AC                     	ds	1
  2330  0000AD                     EEPROM_write@data:
  2331                           	opt stack 0
  2332  0000AD                     actuatorTest@i_1739:
  2333                           	opt stack 0
  2334  0000AD                     ID@res3:
  2335                           	opt stack 0
  2336  0000AD                     sensorTest@res:
  2337                           	opt stack 0
  2338  0000AD                     PlatformTest@res:
  2339                           	opt stack 0
  2340  0000AD                     BlockerTest@i:
  2341                           	opt stack 0
  2342                           
  2343                           ; 2 bytes @ 0x2D
  2344  0000AD                     	ds	1
  2345  0000AE                     ??_EEPROM_write:
  2346  0000AE                     actuatorTest@i_1746:
  2347                           	opt stack 0
  2348  0000AE                     printRTC@INT_time:
  2349                           	opt stack 0
  2350                           
  2351                           ; 14 bytes @ 0x2E
  2352  0000AE                     	ds	1
  2353  0000AF                     _ID$1145:
  2354                           	opt stack 0
  2355  0000AF                     EEPROM_write@i:
  2356                           	opt stack 0
  2357  0000AF                     actuatorTest@i_1747:
  2358                           	opt stack 0
  2359  0000AF                     PlatformTest@res_1791:
  2360                           	opt stack 0
  2361  0000AF                     BlockerTest@res:
  2362                           	opt stack 0
  2363                           
  2364                           ; 2 bytes @ 0x2F
  2365  0000AF                     	ds	1
  2366  0000B0                     _ID$1148:
  2367                           	opt stack 0
  2368  0000B0                     EEPROM_write@i_1407:
  2369                           	opt stack 0
  2370  0000B0                     actuatorTest@i_1749:
  2371                           	opt stack 0
  2372                           
  2373                           ; 1 bytes @ 0x30
  2374  0000B0                     	ds	1
  2375  0000B1                     ??_Loading:
  2376  0000B1                     logRun@num:
  2377                           	opt stack 0
  2378  0000B1                     actuatorTest@i_1750:
  2379                           	opt stack 0
  2380  0000B1                     ID@i:
  2381                           	opt stack 0
  2382  0000B1                     PlatformTest@i:
  2383                           	opt stack 0
  2384  0000B1                     BlockerTest@cam_flag:
  2385                           	opt stack 0
  2386                           
  2387                           ; 2 bytes @ 0x31
  2388  0000B1                     	ds	1
  2389  0000B2                     logRun@byte1:
  2390                           	opt stack 0
  2391  0000B2                     actuatorTest@i_1752:
  2392                           	opt stack 0
  2393                           
  2394                           ; 1 bytes @ 0x32
  2395  0000B2                     	ds	1
  2396  0000B3                     logRun@byte2:
  2397                           	opt stack 0
  2398  0000B3                     actuatorTest@i_1753:
  2399                           	opt stack 0
  2400  0000B3                     Loading@addr:
  2401                           	opt stack 0
  2402  0000B3                     ID@i_1144:
  2403                           	opt stack 0
  2404  0000B3                     PlatformTest@i_1795:
  2405                           	opt stack 0
  2406  0000B3                     BlockerTest@cond_flag:
  2407                           	opt stack 0
  2408                           
  2409                           ; 2 bytes @ 0x33
  2410  0000B3                     	ds	1
  2411  0000B4                     logRun@byte3:
  2412                           	opt stack 0
  2413  0000B4                     actuatorTest@i_1755:
  2414                           	opt stack 0
  2415                           
  2416                           ; 1 bytes @ 0x34
  2417  0000B4                     	ds	1
  2418  0000B5                     Loading@byte1:
  2419                           	opt stack 0
  2420  0000B5                     logRun@byte_i:
  2421                           	opt stack 0
  2422  0000B5                     actuatorTest@i_1756:
  2423                           	opt stack 0
  2424  0000B5                     ID@i_1147:
  2425                           	opt stack 0
  2426  0000B5                     PlatformTest@on:
  2427                           	opt stack 0
  2428                           
  2429                           ; 2 bytes @ 0x35
  2430  0000B5                     	ds	1
  2431  0000B6                     logRun@byte11:
  2432                           	opt stack 0
  2433  0000B6                     actuatorTest@i_1758:
  2434                           	opt stack 0
  2435  0000B6                     Loading@i_1122:
  2436                           	opt stack 0
  2437                           
  2438                           ; 2 bytes @ 0x36
  2439  0000B6                     	ds	1
  2440  0000B7                     actuatorTest@i_1759:
  2441                           	opt stack 0
  2442  0000B7                     ID@i_1150:
  2443                           	opt stack 0
  2444  0000B7                     logRun@i:
  2445                           	opt stack 0
  2446                           
  2447                           ; 2 bytes @ 0x37
  2448  0000B7                     	ds	1
  2449  0000B8                     actuatorTest@i_1761:
  2450                           	opt stack 0
  2451  0000B8                     Loading@i_1131:
  2452                           	opt stack 0
  2453                           
  2454                           ; 2 bytes @ 0x38
  2455  0000B8                     	ds	1
  2456  0000B9                     actuatorTest@i_1762:
  2457                           	opt stack 0
  2458  0000B9                     ID@i_1151:
  2459                           	opt stack 0
  2460  0000B9                     logRun@addr:
  2461                           	opt stack 0
  2462                           
  2463                           ; 2 bytes @ 0x39
  2464  0000B9                     	ds	1
  2465  0000BA                     actuatorTest@i_1765:
  2466                           	opt stack 0
  2467  0000BA                     Loading@i_1133:
  2468                           	opt stack 0
  2469                           
  2470                           ; 2 bytes @ 0x3A
  2471  0000BA                     	ds	1
  2472  0000BB                     ID@time:
  2473                           	opt stack 0
  2474  0000BB                     actuatorTest@i_1766:
  2475                           	opt stack 0
  2476                           
  2477                           ; 1 bytes @ 0x3B
  2478  0000BB                     	ds	1
  2479  0000BC                     actuatorTest@i_1768:
  2480                           	opt stack 0
  2481  0000BC                     printRTC@RTC_month:
  2482                           	opt stack 0
  2483  0000BC                     Loading@i_1134:
  2484                           	opt stack 0
  2485  0000BC                     ID@res1:
  2486                           	opt stack 0
  2487                           
  2488                           ; 2 bytes @ 0x3C
  2489  0000BC                     	ds	1
  2490  0000BD                     actuatorTest@i_1769:
  2491                           	opt stack 0
  2492                           
  2493                           ; 1 bytes @ 0x3D
  2494  0000BD                     	ds	1
  2495  0000BE                     actuatorTest@i_1771:
  2496                           	opt stack 0
  2497  0000BE                     Loading@i_1136:
  2498                           	opt stack 0
  2499  0000BE                     ID@res2:
  2500                           	opt stack 0
  2501  0000BE                     printRTC@month:
  2502                           	opt stack 0
  2503                           
  2504                           ; 4 bytes @ 0x3E
  2505  0000BE                     	ds	1
  2506  0000BF                     actuatorTest@i_1772:
  2507                           	opt stack 0
  2508                           
  2509                           ; 1 bytes @ 0x3F
  2510  0000BF                     	ds	1
  2511  0000C0                     actuatorTest@i_1775:
  2512                           	opt stack 0
  2513  0000C0                     Loading@i:
  2514                           	opt stack 0
  2515  0000C0                     ID@n:
  2516                           	opt stack 0
  2517                           
  2518                           ; 2 bytes @ 0x40
  2519  0000C0                     	ds	1
  2520  0000C1                     actuatorTest@i_1776:
  2521                           	opt stack 0
  2522                           
  2523                           ; 1 bytes @ 0x41
  2524  0000C1                     	ds	1
  2525  0000C2                     actuatorTest@i_1778:
  2526                           	opt stack 0
  2527  0000C2                     printRTC@i:
  2528                           	opt stack 0
  2529  0000C2                     Loading@j:
  2530                           	opt stack 0
  2531                           
  2532                           ; 2 bytes @ 0x42
  2533  0000C2                     	ds	1
  2534  0000C3                     actuatorTest@i_1779:
  2535                           	opt stack 0
  2536                           
  2537                           ; 1 bytes @ 0x43
  2538  0000C3                     	ds	1
  2539  0000C4                     ??_UI:
  2540  0000C4                     actuatorTest@i:
  2541                           	opt stack 0
  2542                           
  2543                           ; 2 bytes @ 0x44
  2544  0000C4                     	ds	2
  2545  0000C6                     ??_Test:
  2546  0000C6                     _UI$2433:
  2547                           	opt stack 0
  2548                           
  2549                           ; 2 bytes @ 0x46
  2550  0000C6                     	ds	2
  2551  0000C8                     UI@i:
  2552                           	opt stack 0
  2553                           
  2554                           ; 1 bytes @ 0x48
  2555  0000C8                     	ds	1
  2556  0000C9                     UI@i_412:
  2557                           	opt stack 0
  2558                           
  2559                           ; 1 bytes @ 0x49
  2560  0000C9                     	ds	1
  2561  0000CA                     UI@i_415:
  2562                           	opt stack 0
  2563                           
  2564                           ; 1 bytes @ 0x4A
  2565  0000CA                     	ds	1
  2566  0000CB                     UI@i_416:
  2567                           	opt stack 0
  2568                           
  2569                           ; 1 bytes @ 0x4B
  2570  0000CB                     	ds	1
  2571  0000CC                     UI@i_434:
  2572                           	opt stack 0
  2573                           
  2574                           ; 1 bytes @ 0x4C
  2575  0000CC                     	ds	1
  2576  0000CD                     UI@i_435:
  2577                           	opt stack 0
  2578                           
  2579                           ; 1 bytes @ 0x4D
  2580  0000CD                     	ds	1
  2581  0000CE                     UI@i_438:
  2582                           	opt stack 0
  2583                           
  2584                           ; 1 bytes @ 0x4E
  2585  0000CE                     	ds	1
  2586  0000CF                     UI@i_439:
  2587                           	opt stack 0
  2588                           
  2589                           ; 1 bytes @ 0x4F
  2590  0000CF                     	ds	1
  2591  0000D0                     UI@i_442:
  2592                           	opt stack 0
  2593                           
  2594                           ; 1 bytes @ 0x50
  2595  0000D0                     	ds	1
  2596  0000D1                     UI@i_443:
  2597                           	opt stack 0
  2598                           
  2599                           ; 1 bytes @ 0x51
  2600  0000D1                     	ds	1
  2601  0000D2                     UI@i_446:
  2602                           	opt stack 0
  2603                           
  2604                           ; 1 bytes @ 0x52
  2605  0000D2                     	ds	1
  2606  0000D3                     UI@i_447:
  2607                           	opt stack 0
  2608                           
  2609                           ; 1 bytes @ 0x53
  2610  0000D3                     	ds	1
  2611  0000D4                     UI@i_450:
  2612                           	opt stack 0
  2613                           
  2614                           ; 1 bytes @ 0x54
  2615  0000D4                     	ds	1
  2616  0000D5                     UI@i_451:
  2617                           	opt stack 0
  2618                           
  2619                           ; 1 bytes @ 0x55
  2620  0000D5                     	ds	1
  2621  0000D6                     UI@month:
  2622                           	opt stack 0
  2623                           
  2624                           ; 4 bytes @ 0x56
  2625  0000D6                     	ds	4
  2626  0000DA                     tblptru	equ	0xFF8
  2627                           tblptrh	equ	0xFF7
  2628                           tblptrl	equ	0xFF6
  2629                           tablat	equ	0xFF5
  2630                           postinc0	equ	0xFEE
  2631                           wreg	equ	0xFE8
  2632                           postdec1	equ	0xFE5
  2633                           fsr1l	equ	0xFE1
  2634                           
  2635                           ; 1 bytes @ 0x5A
  2636                           
  2637                           	psect	cstackCOMRAM
  2638  000001                     __pcstackCOMRAM:
  2639                           	opt stack 0
  2640  000001                     ??_updateArmState:
  2641  000001                     ??i2_I2C_Master_Wait:
  2642  000001                     ??i2_delay_ms:
  2643  000001                     ??i2_isdigit:
  2644  000001                     ?i2___wmul:
  2645                           	opt stack 0
  2646  000001                     ?i2___awmod:
  2647                           	opt stack 0
  2648  000001                     ?i2___lwmod:
  2649                           	opt stack 0
  2650  000001                     i2lcdNibble@temp:
  2651                           	opt stack 0
  2652  000001                     i2updateServoPosition@time_us:
  2653                           	opt stack 0
  2654  000001                     i2EEPROM_read@address:
  2655                           	opt stack 0
  2656  000001                     i2___wmul@multiplier:
  2657                           	opt stack 0
  2658  000001                     i2___awmod@dividend:
  2659                           	opt stack 0
  2660  000001                     i2___lwmod@dividend:
  2661                           	opt stack 0
  2662  000001                     i2strcpy@to:
  2663                           	opt stack 0
  2664                           
  2665                           ; 2 bytes @ 0x0
  2666  000001                     	ds	1
  2667  000002                     i2I2C_Master_Read@a:
  2668                           	opt stack 0
  2669  000002                     i2lcdNibble@data:
  2670                           	opt stack 0
  2671  000002                     i2delay_ms@milliseconds:
  2672                           	opt stack 0
  2673  000002                     i2_isdigit$2068:
  2674                           	opt stack 0
  2675  000002                     i2I2C_Master_Write@d:
  2676                           	opt stack 0
  2677                           
  2678                           ; 2 bytes @ 0x1
  2679  000002                     	ds	1
  2680  000003                     i2I2C_Master_Read@temp:
  2681                           	opt stack 0
  2682  000003                     i2lcdInst@data:
  2683                           	opt stack 0
  2684  000003                     i2putch@data:
  2685                           	opt stack 0
  2686  000003                     i2isdigit@c:
  2687                           	opt stack 0
  2688  000003                     i2updateServoPosition@timer:
  2689                           	opt stack 0
  2690  000003                     i2___wmul@multiplicand:
  2691                           	opt stack 0
  2692  000003                     i2___awmod@divisor:
  2693                           	opt stack 0
  2694  000003                     i2___lwmod@divisor:
  2695                           	opt stack 0
  2696  000003                     i2strcpy@from:
  2697                           	opt stack 0
  2698                           
  2699                           ; 2 bytes @ 0x2
  2700  000003                     	ds	1
  2701  000004                     i2getRTC@i:
  2702                           	opt stack 0
  2703                           
  2704                           ; 2 bytes @ 0x3
  2705  000004                     	ds	1
  2706  000005                     ??i2_updateServoPosition:
  2707  000005                     i2___awmod@counter:
  2708                           	opt stack 0
  2709  000005                     i2___lwmod@counter:
  2710                           	opt stack 0
  2711  000005                     i2___wmul@product:
  2712                           	opt stack 0
  2713  000005                     i2strcpy@cp:
  2714                           	opt stack 0
  2715                           
  2716                           ; 2 bytes @ 0x4
  2717  000005                     	ds	1
  2718  000006                     ?i2___lwdiv:
  2719                           	opt stack 0
  2720  000006                     i2___awmod@sign:
  2721                           	opt stack 0
  2722  000006                     i2___lwdiv@dividend:
  2723                           	opt stack 0
  2724                           
  2725                           ; 2 bytes @ 0x5
  2726  000006                     	ds	1
  2727  000007                     retrieveLog@logNum:
  2728                           	opt stack 0
  2729  000007                     i2updateServoPosition@my_time:
  2730                           	opt stack 0
  2731                           
  2732                           ; 2 bytes @ 0x6
  2733  000007                     	ds	1
  2734  000008                     i2___lwdiv@divisor:
  2735                           	opt stack 0
  2736                           
  2737                           ; 2 bytes @ 0x7
  2738  000008                     	ds	1
  2739  000009                     ??_retrieveLog:
  2740  000009                     ??_updateServoStates:
  2741                           
  2742                           ; 1 bytes @ 0x8
  2743  000009                     	ds	1
  2744  00000A                     i2___lwdiv@quotient:
  2745                           	opt stack 0
  2746                           
  2747                           ; 2 bytes @ 0x9
  2748  00000A                     	ds	1
  2749  00000B                     retrieveLog@byte1:
  2750                           	opt stack 0
  2751                           
  2752                           ; 1 bytes @ 0xA
  2753  00000B                     	ds	1
  2754  00000C                     retrieveLog@byte2:
  2755                           	opt stack 0
  2756  00000C                     i2___lwdiv@counter:
  2757                           	opt stack 0
  2758                           
  2759                           ; 1 bytes @ 0xB
  2760  00000C                     	ds	1
  2761  00000D                     ?i2_printf:
  2762                           	opt stack 0
  2763  00000D                     retrieveLog@byte3:
  2764                           	opt stack 0
  2765  00000D                     i2printf@f:
  2766                           	opt stack 0
  2767                           
  2768                           ; 2 bytes @ 0xC
  2769  00000D                     	ds	1
  2770  00000E                     retrieveLog@i:
  2771                           	opt stack 0
  2772                           
  2773                           ; 2 bytes @ 0xD
  2774  00000E                     	ds	2
  2775  000010                     retrieveLog@addr:
  2776                           	opt stack 0
  2777                           
  2778                           ; 2 bytes @ 0xF
  2779  000010                     	ds	2
  2780  000012                     dispLogs@myLog:
  2781                           	opt stack 0
  2782                           
  2783                           ; 2 bytes @ 0x11
  2784  000012                     	ds	2
  2785  000014                     
  2786                           ; 1 bytes @ 0x13
  2787  000014                     	ds	5
  2788  000019                     ??i2_printf:
  2789                           
  2790                           ; 1 bytes @ 0x18
  2791  000019                     	ds	4
  2792  00001D                     i2printf@prec:
  2793                           	opt stack 0
  2794                           
  2795                           ; 1 bytes @ 0x1C
  2796  00001D                     	ds	1
  2797  00001E                     i2printf@cp:
  2798                           	opt stack 0
  2799                           
  2800                           ; 2 bytes @ 0x1D
  2801  00001E                     	ds	2
  2802  000020                     i2printf@ap:
  2803                           	opt stack 0
  2804                           
  2805                           ; 2 bytes @ 0x1F
  2806  000020                     	ds	2
  2807  000022                     i2printf@len:
  2808                           	opt stack 0
  2809                           
  2810                           ; 2 bytes @ 0x21
  2811  000022                     	ds	2
  2812  000024                     i2printf@val:
  2813                           	opt stack 0
  2814                           
  2815                           ; 2 bytes @ 0x23
  2816  000024                     	ds	2
  2817  000026                     i2printf@flag:
  2818                           	opt stack 0
  2819                           
  2820                           ; 1 bytes @ 0x25
  2821  000026                     	ds	1
  2822  000027                     i2printf@c:
  2823                           	opt stack 0
  2824                           
  2825                           ; 1 bytes @ 0x26
  2826  000027                     	ds	1
  2827  000028                     i2printf@width:
  2828                           	opt stack 0
  2829                           
  2830                           ; 2 bytes @ 0x27
  2831  000028                     	ds	2
  2832  00002A                     ??_printSortTimer:
  2833  00002A                     ??i2_printRTC:
  2834  00002A                     ?_inputHandler:
  2835                           	opt stack 0
  2836                           
  2837                           ; 2 bytes @ 0x29
  2838  00002A                     	ds	2
  2839  00002C                     ??_inputHandler:
  2840                           
  2841                           ; 1 bytes @ 0x2B
  2842  00002C                     	ds	1
  2843  00002D                     printSortTimer@curTime:
  2844                           	opt stack 0
  2845  00002D                     i2printRTC@INT_time:
  2846                           	opt stack 0
  2847                           
  2848                           ; 14 bytes @ 0x2C
  2849  00002D                     	ds	14
  2850  00003B                     printSortTimer@start_sec:
  2851                           	opt stack 0
  2852  00003B                     i2printRTC@RTC_month:
  2853                           	opt stack 0
  2854                           
  2855                           ; 2 bytes @ 0x3A
  2856  00003B                     	ds	2
  2857  00003D                     printSortTimer@cur_sec:
  2858                           	opt stack 0
  2859  00003D                     i2printRTC@month:
  2860                           	opt stack 0
  2861                           
  2862                           ; 4 bytes @ 0x3C
  2863  00003D                     	ds	2
  2864  00003F                     printSortTimer@min:
  2865                           	opt stack 0
  2866                           
  2867                           ; 2 bytes @ 0x3E
  2868  00003F                     	ds	2
  2869  000041                     printSortTimer@sec:
  2870                           	opt stack 0
  2871  000041                     i2printRTC@i:
  2872                           	opt stack 0
  2873                           
  2874                           ; 2 bytes @ 0x40
  2875  000041                     	ds	2
  2876  000043                     ??_updateMenu:
  2877  000043                     _printSortTimer$2573:
  2878                           	opt stack 0
  2879                           
  2880                           ; 2 bytes @ 0x42
  2881  000043                     	ds	2
  2882  000045                     printSortTimer@timeDiff:
  2883                           	opt stack 0
  2884                           
  2885                           ; 2 bytes @ 0x44
  2886  000045                     	ds	2
  2887  000047                     printSortTimer@i_1163:
  2888                           	opt stack 0
  2889                           
  2890                           ; 2 bytes @ 0x46
  2891  000047                     	ds	2
  2892  000049                     printSortTimer@i:
  2893                           	opt stack 0
  2894                           
  2895                           ; 2 bytes @ 0x48
  2896  000049                     	ds	2
  2897  00004B                     ??_handler:
  2898                           
  2899                           ; 1 bytes @ 0x4A
  2900  00004B                     	ds	16
  2901                           tblptru	equ	0xFF8
  2902                           tblptrh	equ	0xFF7
  2903                           tblptrl	equ	0xFF6
  2904                           tablat	equ	0xFF5
  2905                           postinc0	equ	0xFEE
  2906                           wreg	equ	0xFE8
  2907                           postdec1	equ	0xFE5
  2908                           fsr1l	equ	0xFE1
  2909                           
  2910 ;;
  2911 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2912 ;;
  2913 ;; *************** function _main *****************
  2914 ;; Defined at:
  2915 ;;		line 19 in file "main.c"
  2916 ;; Parameters:    Size  Location     Type
  2917 ;;		None
  2918 ;; Auto vars:     Size  Location     Type
  2919 ;;		None
  2920 ;; Return value:  Size  Location     Type
  2921 ;;                  1    wreg      void 
  2922 ;; Registers used:
  2923 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2924 ;; Tracked objects:
  2925 ;;		On entry : 0/0
  2926 ;;		On exit  : 0/0
  2927 ;;		Unchanged: 0/0
  2928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2933 ;;Total ram usage:        0 bytes
  2934 ;; Hardware stack levels required when called:   13
  2935 ;; This function calls:
  2936 ;;		_I2C_Master_Init
  2937 ;;		_Test
  2938 ;;		_UI
  2939 ;;		_initEEPROM
  2940 ;;		_initLCD
  2941 ;;		_initTime
  2942 ;;		_initUI
  2943 ;;		_logRun
  2944 ;;		_machineConfig
  2945 ;;		_sort
  2946 ;;		_stopSignals
  2947 ;; This function is called by:
  2948 ;;		Startup code after reset
  2949 ;; This function uses a non-reentrant model
  2950 ;;
  2951                           
  2952                           	psect	text0
  2953  0046BC                     __ptext0:
  2954                           	opt stack 0
  2955  0046BC                     _main:
  2956                           	opt stack 18
  2957                           
  2958                           ;main.c: 20: machineConfig();
  2959                           
  2960                           ;incstack = 0
  2961  0046BC  EC7F  F028         	call	_machineConfig	;wreg free
  2962                           
  2963                           ;main.c: 21: initLCD();
  2964  0046C0  EC5D  F02A         	call	_initLCD	;wreg free
  2965                           
  2966                           ;main.c: 24: RTCflag = 0;
  2967  0046C4  0E00               	movlw	0
  2968  0046C6  0100               	movlb	0	; () banked
  2969  0046C8  6FE5               	movwf	(_RTCflag+1)& (0+255),b
  2970  0046CA  0E00               	movlw	0
  2971  0046CC  6FE4               	movwf	_RTCflag& (0+255),b
  2972                           
  2973                           ;main.c: 25: if(RTCflag){
  2974  0046CE  0100               	movlb	0	; () banked
  2975  0046D0  51E4               	movf	_RTCflag& (0+255),w,b
  2976  0046D2  0100               	movlb	0	; () banked
  2977  0046D4  11E5               	iorwf	(_RTCflag+1)& (0+255),w,b
  2978  0046D6  B4D8               	btfsc	status,2,c
  2979  0046D8  D016               	goto	l10212
  2980                           
  2981                           ; BSR set to: 0
  2982                           ;main.c: 26: initTime(0x42, 0x47, 0x17, 0x07, 0x08, 0x04, 0x17);
  2983  0046DA  0E47               	movlw	71
  2984  0046DC  0100               	movlb	0	; () banked
  2985  0046DE  6F80               	movwf	initTime@m& (0+255),b
  2986  0046E0  0E17               	movlw	23
  2987  0046E2  0100               	movlb	0	; () banked
  2988  0046E4  6F81               	movwf	initTime@h& (0+255),b
  2989  0046E6  0E07               	movlw	7
  2990  0046E8  0100               	movlb	0	; () banked
  2991  0046EA  6F82               	movwf	initTime@w& (0+255),b
  2992  0046EC  0E08               	movlw	8
  2993  0046EE  0100               	movlb	0	; () banked
  2994  0046F0  6F83               	movwf	initTime@DD& (0+255),b
  2995  0046F2  0E04               	movlw	4
  2996  0046F4  0100               	movlb	0	; () banked
  2997  0046F6  6F84               	movwf	initTime@MM& (0+255),b
  2998  0046F8  0E17               	movlw	23
  2999  0046FA  0100               	movlb	0	; () banked
  3000  0046FC  6F85               	movwf	initTime@YY& (0+255),b
  3001  0046FE  0E42               	movlw	66
  3002  004700  EC50  F02D         	call	_initTime
  3003                           
  3004                           ;main.c: 27: }
  3005  004704  D00B               	goto	l10214
  3006  004706                     l10212:
  3007                           
  3008                           ;main.c: 28: else{
  3009                           ;main.c: 29: I2C_Master_Init(10000);
  3010  004706  0E10               	movlw	16
  3011  004708  0100               	movlb	0	; () banked
  3012  00470A  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3013  00470C  0E27               	movlw	39
  3014  00470E  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3015  004710  0E00               	movlw	0
  3016  004712  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3017  004714  0E00               	movlw	0
  3018  004716  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3019  004718  ECE2  F028         	call	_I2C_Master_Init	;wreg free
  3020  00471C                     l10214:
  3021                           
  3022                           ;main.c: 30: }
  3023                           ;main.c: 32: initUI();
  3024  00471C  EC80  F02B         	call	_initUI	;wreg free
  3025                           
  3026                           ;main.c: 33: first = 1;
  3027  004720  0E00               	movlw	0
  3028  004722  0101               	movlb	1	; () banked
  3029  004724  6F38               	movwf	(_first+1)& (0+255),b
  3030  004726  0E01               	movlw	1
  3031  004728  6F37               	movwf	_first& (0+255),b
  3032                           
  3033                           ; BSR set to: 1
  3034                           ;main.c: 34: initEEPROM();
  3035  00472A  EC98  F02D         	call	_initEEPROM	;wreg free
  3036                           
  3037                           ;main.c: 45: switch(machine_state){
  3038                           
  3039                           ;main.c: 44: while(1){
  3040  00472E  D018               	goto	l10238
  3041  004730                     l10220:
  3042                           
  3043                           ;main.c: 47: UI();
  3044  004730  EC09  F000         	call	_UI	;wreg free
  3045                           
  3046                           ;main.c: 48: break;
  3047  004734  D015               	goto	l10238
  3048  004736                     l10222:
  3049                           
  3050                           ;main.c: 50: sort();
  3051  004736  EC3F  F02D         	call	_sort	;wreg free
  3052                           
  3053                           ;main.c: 51: break;
  3054  00473A  D012               	goto	l10238
  3055  00473C                     l10224:
  3056                           
  3057                           ;main.c: 53: stopSignals();
  3058  00473C  EC70  F02D         	call	_stopSignals	;wreg free
  3059                           
  3060                           ;main.c: 54: logRun();
  3061  004740  EC51  F01F         	call	_logRun	;wreg free
  3062                           
  3063                           ;main.c: 55: first = 1;
  3064  004744  0E00               	movlw	0
  3065  004746  0101               	movlb	1	; () banked
  3066  004748  6F38               	movwf	(_first+1)& (0+255),b
  3067  00474A  0E01               	movlw	1
  3068  00474C  6F37               	movwf	_first& (0+255),b
  3069                           
  3070                           ; BSR set to: 1
  3071                           ;main.c: 56: UI();
  3072  00474E  EC09  F000         	call	_UI	;wreg free
  3073                           
  3074                           ;main.c: 57: break;
  3075  004752  D006               	goto	l10238
  3076  004754                     l10232:
  3077                           
  3078                           ;main.c: 59: Test();
  3079  004754  EC0C  F021         	call	_Test	;wreg free
  3080                           
  3081                           ;main.c: 60: break;
  3082  004758  D003               	goto	l10238
  3083  00475A                     l10234:
  3084                           
  3085                           ;main.c: 62: stopSignals();
  3086  00475A  EC70  F02D         	call	_stopSignals	;wreg free
  3087  00475E                     l508:
  3088  00475E  D7FF               	goto	l508
  3089  004760                     l10238:
  3090  004760  0100               	movlb	0	; () banked
  3091  004762  51FC               	movf	_machine_state& (0+255),w,b
  3092                           
  3093                           ; Switch size 1, requested type "space"
  3094                           ; Number of cases is 5, Range of values is 0 to 4
  3095                           ; switch strategies available:
  3096                           ; Name         Instructions Cycles
  3097                           ; simple_byte           16     9 (average)
  3098                           ;	Chosen strategy is simple_byte
  3099  004764  0A00               	xorlw	0	; case 0
  3100  004766  B4D8               	btfsc	status,2,c
  3101  004768  D7E3               	goto	l10220
  3102  00476A  0A01               	xorlw	1	; case 1
  3103  00476C  B4D8               	btfsc	status,2,c
  3104  00476E  D7E3               	goto	l10222
  3105  004770  0A03               	xorlw	3	; case 2
  3106  004772  B4D8               	btfsc	status,2,c
  3107  004774  D7E3               	goto	l10224
  3108  004776  0A01               	xorlw	1	; case 3
  3109  004778  B4D8               	btfsc	status,2,c
  3110  00477A  D7EC               	goto	l10232
  3111  00477C  0A07               	xorlw	7	; case 4
  3112  00477E  B4D8               	btfsc	status,2,c
  3113  004780  D7EC               	goto	l10234
  3114                           
  3115                           ; BSR set to: 0
  3116                           
  3117                           ; BSR set to: 0
  3118  004782  D7EE               	goto	l10238
  3119  004784                     __end_of_main:
  3120                           	opt stack 0
  3121                           tblptru	equ	0xFF8
  3122                           tblptrh	equ	0xFF7
  3123                           tblptrl	equ	0xFF6
  3124                           tablat	equ	0xFF5
  3125                           postinc0	equ	0xFEE
  3126                           wreg	equ	0xFE8
  3127                           postdec1	equ	0xFE5
  3128                           fsr1l	equ	0xFE1
  3129                           status	equ	0xFD8
  3130                           
  3131 ;; *************** function _sort *****************
  3132 ;; Defined at:
  3133 ;;		line 67 in file "sort.c"
  3134 ;; Parameters:    Size  Location     Type
  3135 ;;		None
  3136 ;; Auto vars:     Size  Location     Type
  3137 ;;		None
  3138 ;; Return value:  Size  Location     Type
  3139 ;;                  1    wreg      void 
  3140 ;; Registers used:
  3141 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3142 ;; Tracked objects:
  3143 ;;		On entry : 0/0
  3144 ;;		On exit  : 0/0
  3145 ;;		Unchanged: 0/0
  3146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3150 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3151 ;;Total ram usage:        0 bytes
  3152 ;; Hardware stack levels used:    1
  3153 ;; Hardware stack levels required when called:   12
  3154 ;; This function calls:
  3155 ;;		_Distribution
  3156 ;;		_ID
  3157 ;;		_Loading
  3158 ;; This function is called by:
  3159 ;;		_main
  3160 ;; This function uses a non-reentrant model
  3161 ;;
  3162                           
  3163                           	psect	text1
  3164  005A7E                     __ptext1:
  3165                           	opt stack 0
  3166  005A7E                     _sort:
  3167                           	opt stack 18
  3168                           
  3169                           ;sort.c: 68: if(machine_state == Sorting_state){
  3170                           
  3171                           ; BSR set to: 0
  3172                           ;incstack = 0
  3173  005A7E  0100               	movlb	0	; () banked
  3174  005A80  05FC               	decf	_machine_state& (0+255),w,b
  3175  005A82  B4D8               	btfsc	status,2,c
  3176                           
  3177                           ; BSR set to: 0
  3178                           ;sort.c: 69: Loading();
  3179  005A84  ECC9  F008         	call	_Loading	;wreg free
  3180                           
  3181                           ;sort.c: 70: }
  3182                           ;sort.c: 71: if(machine_state == Sorting_state){
  3183  005A88  0100               	movlb	0	; () banked
  3184  005A8A  05FC               	decf	_machine_state& (0+255),w,b
  3185  005A8C  B4D8               	btfsc	status,2,c
  3186                           
  3187                           ; BSR set to: 0
  3188                           ;sort.c: 72: ID();
  3189  005A8E  EC62  F00B         	call	_ID	;wreg free
  3190                           
  3191                           ;sort.c: 73: }
  3192                           ;sort.c: 74: if(machine_state == Sorting_state){
  3193  005A92  0100               	movlb	0	; () banked
  3194  005A94  05FC               	decf	_machine_state& (0+255),w,b
  3195  005A96  A4D8               	btfss	status,2,c
  3196  005A98  0012               	return	
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;sort.c: 75: Distribution();
  3200  005A9A  EC82  F022         	call	_Distribution	;wreg free
  3201  005A9E  0012               	return	
  3202  005AA0                     __end_of_sort:
  3203                           	opt stack 0
  3204                           tblptru	equ	0xFF8
  3205                           tblptrh	equ	0xFF7
  3206                           tblptrl	equ	0xFF6
  3207                           tablat	equ	0xFF5
  3208                           postinc0	equ	0xFEE
  3209                           wreg	equ	0xFE8
  3210                           postdec1	equ	0xFE5
  3211                           fsr1l	equ	0xFE1
  3212                           status	equ	0xFD8
  3213                           
  3214 ;; *************** function _Loading *****************
  3215 ;; Defined at:
  3216 ;;		line 79 in file "sort.c"
  3217 ;; Parameters:    Size  Location     Type
  3218 ;;		None
  3219 ;; Auto vars:     Size  Location     Type
  3220 ;;  i               2   62[BANK0 ] int 
  3221 ;;  i               2   60[BANK0 ] int 
  3222 ;;  i               2   58[BANK0 ] int 
  3223 ;;  i               2   56[BANK0 ] int 
  3224 ;;  i               2   54[BANK0 ] int 
  3225 ;;  j               2   66[BANK0 ] int 
  3226 ;;  i               2   64[BANK0 ] int 
  3227 ;;  addr            2   51[BANK0 ] unsigned short 
  3228 ;;  byte1           1   53[BANK0 ] unsigned char 
  3229 ;; Return value:  Size  Location     Type
  3230 ;;                  1    wreg      void 
  3231 ;; Registers used:
  3232 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3233 ;; Tracked objects:
  3234 ;;		On entry : 0/0
  3235 ;;		On exit  : 0/0
  3236 ;;		Unchanged: 0/0
  3237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3239 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3240 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3241 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3242 ;;Total ram usage:       19 bytes
  3243 ;; Hardware stack levels used:    1
  3244 ;; Hardware stack levels required when called:   11
  3245 ;; This function calls:
  3246 ;;		_EEPROM_read
  3247 ;;		_EEPROM_write
  3248 ;;		_delay_ms
  3249 ;;		_getIR
  3250 ;;		_getMAG
  3251 ;;		_initGlobalVars
  3252 ;;		_initServos
  3253 ;;		_initSortTimer
  3254 ;;		_lcdInst
  3255 ;;		_readIR
  3256 ;; This function is called by:
  3257 ;;		_sort
  3258 ;; This function uses a non-reentrant model
  3259 ;;
  3260                           
  3261                           	psect	text2
  3262  001192                     __ptext2:
  3263                           	opt stack 0
  3264  001192                     _Loading:
  3265                           	opt stack 18
  3266                           
  3267                           ;sort.c: 80: if(first){
  3268                           
  3269                           ;incstack = 0
  3270  001192  0101               	movlb	1	; () banked
  3271  001194  5137               	movf	_first& (0+255),w,b
  3272  001196  0101               	movlb	1	; () banked
  3273  001198  1138               	iorwf	(_first+1)& (0+255),w,b
  3274  00119A  B4D8               	btfsc	status,2,c
  3275  00119C  D069               	goto	l7882
  3276                           
  3277                           ; BSR set to: 1
  3278                           ;sort.c: 81: TMR1IF = 1;
  3279  00119E  809E               	bsf	3998,0,c	;volatile
  3280                           
  3281                           ;sort.c: 82: TMR2IF = 1;
  3282  0011A0  829E               	bsf	3998,1,c	;volatile
  3283                           
  3284                           ;sort.c: 83: TMR3IF = 1;
  3285  0011A2  82A1               	bsf	4001,1,c	;volatile
  3286                           
  3287                           ; BSR set to: 1
  3288                           ;sort.c: 84: initGlobalVars();
  3289  0011A4  EC26  F024         	call	_initGlobalVars	;wreg free
  3290                           
  3291                           ;sort.c: 85: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3292  0011A8  0E01               	movlw	1
  3293  0011AA  ECC9  F02D         	call	_lcdInst
  3294  0011AE  0E68               	movlw	104
  3295  0011B0  0100               	movlb	0	; () banked
  3296  0011B2  6FB1               	movwf	??_Loading& (0+255),b
  3297  0011B4  0EE4               	movlw	228
  3298  0011B6                     u9897:
  3299  0011B6  2EE8               	decfsz	wreg,f,c
  3300  0011B8  D7FE               	bra	u9897
  3301  0011BA  2FB1               	decfsz	??_Loading& (0+255),f,b
  3302  0011BC  D7FC               	bra	u9897
  3303  0011BE  F000               	nop	
  3304                           
  3305                           ;sort.c: 86: initSortTimer();
  3306  0011C0  EC43  F025         	call	_initSortTimer	;wreg free
  3307                           
  3308                           ;sort.c: 87: LATCbits.LATC5 = 1;
  3309  0011C4  8A8B               	bsf	3979,5,c	;volatile
  3310                           
  3311                           ;sort.c: 92: sel = EEPROM_read(0);
  3312  0011C6  0E00               	movlw	0
  3313  0011C8  0100               	movlb	0	; () banked
  3314  0011CA  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3315  0011CC  0E00               	movlw	0
  3316  0011CE  6F80               	movwf	EEPROM_read@address& (0+255),b
  3317  0011D0  EC8C  F02D         	call	_EEPROM_read	;wreg free
  3318  0011D4  0100               	movlb	0	; () banked
  3319  0011D6  6FFD               	movwf	_sel& (0+255),b
  3320                           
  3321                           ; BSR set to: 0
  3322                           ;sort.c: 93: unsigned short addr = 1 + 11 * sel;
  3323  0011D8  0100               	movlb	0	; () banked
  3324  0011DA  51FD               	movf	_sel& (0+255),w,b
  3325  0011DC  0D0B               	mullw	11
  3326  0011DE  0E01               	movlw	1
  3327  0011E0  24F3               	addwf	prodl,w,c
  3328  0011E2  0100               	movlb	0	; () banked
  3329  0011E4  6FB3               	movwf	Loading@addr& (0+255),b
  3330  0011E6  0E00               	movlw	0
  3331  0011E8  20F4               	addwfc	prodh,w,c
  3332  0011EA  0100               	movlb	0	; () banked
  3333  0011EC  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;sort.c: 94: unsigned char byte1 = 0b01111111;
  3337  0011EE  0E7F               	movlw	127
  3338  0011F0  0100               	movlb	0	; () banked
  3339  0011F2  6FB5               	movwf	Loading@byte1& (0+255),b
  3340                           
  3341                           ; BSR set to: 0
  3342                           ;sort.c: 95: EEPROM_write(addr, byte1);
  3343  0011F4  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3344  0011F8  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3345  0011FC  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3346  001200  EC0E  F022         	call	_EEPROM_write	;wreg free
  3347                           
  3348                           ;sort.c: 98: LATBbits.LATB2 = 0;
  3349  001204  948A               	bcf	3978,2,c	;volatile
  3350                           
  3351                           ;sort.c: 100: for(int i=0; i<46; i++){
  3352  001206  0E00               	movlw	0
  3353  001208  0100               	movlb	0	; () banked
  3354  00120A  6FC1               	movwf	(Loading@i+1)& (0+255),b
  3355  00120C  0E00               	movlw	0
  3356  00120E  6FC0               	movwf	Loading@i& (0+255),b
  3357                           
  3358                           ; BSR set to: 0
  3359  001210  0100               	movlb	0	; () banked
  3360  001212  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3361  001214  D008               	goto	l7872
  3362  001216  0100               	movlb	0	; () banked
  3363  001218  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3364  00121A  E126               	bnz	l793
  3365  00121C  0E2E               	movlw	46
  3366  00121E  0100               	movlb	0	; () banked
  3367  001220  5DC0               	subwf	Loading@i& (0+255),w,b
  3368  001222  B0D8               	btfsc	status,0,c
  3369  001224  D021               	goto	l793
  3370  001226                     l7872:
  3371                           
  3372                           ; BSR set to: 0
  3373                           ;sort.c: 101: LATBbits.LATB2 = !LATBbits.LATB2;
  3374  001226  B48A               	btfsc	3978,2,c	;volatile
  3375  001228  D004               	goto	u6460
  3376  00122A  0100               	movlb	0	; () banked
  3377  00122C  6BB1               	clrf	??_Loading& (0+255),b
  3378  00122E  2BB1               	incf	??_Loading& (0+255),f,b
  3379  001230  D002               	goto	u6478
  3380  001232                     u6460:
  3381  001232  0100               	movlb	0	; () banked
  3382  001234  6BB1               	clrf	??_Loading& (0+255),b
  3383  001236                     u6478:
  3384  001236  0100               	movlb	0	; () banked
  3385  001238  47B1               	rlncf	??_Loading& (0+255),f,b
  3386  00123A  47B1               	rlncf	??_Loading& (0+255),f,b
  3387  00123C  508A               	movf	3978,w,c	;volatile
  3388  00123E  0100               	movlb	0	; () banked
  3389  001240  19B1               	xorwf	??_Loading& (0+255),w,b
  3390  001242  0BFB               	andlw	-5
  3391  001244  19B1               	xorwf	??_Loading& (0+255),w,b
  3392  001246  6E8A               	movwf	3978,c	;volatile
  3393                           
  3394                           ; BSR set to: 0
  3395                           ;sort.c: 102: delay_ms(45-i);
  3396  001248  0100               	movlb	0	; () banked
  3397  00124A  51C0               	movf	Loading@i& (0+255),w,b
  3398  00124C  0800               	sublw	0
  3399  00124E  0F2D               	addlw	45
  3400  001250  ECDF  F02C         	call	_delay_ms
  3401  001254  0100               	movlb	0	; () banked
  3402  001256  4BC0               	infsnz	Loading@i& (0+255),f,b
  3403  001258  2BC1               	incf	(Loading@i+1)& (0+255),f,b
  3404                           
  3405                           ; BSR set to: 0
  3406  00125A  0100               	movlb	0	; () banked
  3407  00125C  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3408  00125E  D7E3               	goto	l7872
  3409  001260  0100               	movlb	0	; () banked
  3410  001262  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3411  001264  E101               	bnz	u6480
  3412  001266  D7DA               	goto	L1
  3413  001268                     u6480:
  3414  001268                     l793:
  3415                           
  3416                           ; BSR set to: 0
  3417                           ;sort.c: 103: }
  3418                           ;sort.c: 104: LATBbits.LATB2 = 1;
  3419  001268  848A               	bsf	3978,2,c	;volatile
  3420                           
  3421                           ; BSR set to: 0
  3422                           ;sort.c: 107: initServos();
  3423  00126A  ECF3  F026         	call	_initServos	;wreg free
  3424                           
  3425                           ;sort.c: 108: }
  3426  00126E  0012               	return	
  3427  001270                     l7882:
  3428                           
  3429                           ;sort.c: 109: else{
  3430                           ;sort.c: 112: if(!f_loadingNewCan){
  3431  001270  0100               	movlb	0	; () banked
  3432  001272  51EE               	movf	_f_loadingNewCan& (0+255),w,b
  3433  001274  0100               	movlb	0	; () banked
  3434  001276  11EF               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3435  001278  A4D8               	btfss	status,2,c
  3436  00127A  D018               	goto	l7898
  3437                           
  3438                           ; BSR set to: 0
  3439                           ;sort.c: 114: getIR();
  3440  00127C  EC6B  F027         	call	_getIR	;wreg free
  3441                           
  3442                           ;sort.c: 116: if(!f_loadingNewCan){
  3443  001280  0100               	movlb	0	; () banked
  3444  001282  51EE               	movf	_f_loadingNewCan& (0+255),w,b
  3445  001284  0100               	movlb	0	; () banked
  3446  001286  11EF               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3447  001288  B4D8               	btfsc	status,2,c
  3448  00128A  0012               	return	
  3449                           
  3450                           ; BSR set to: 0
  3451                           ;sort.c: 120: else{
  3452                           ;sort.c: 121: count_total++;
  3453                           
  3454                           ; BSR set to: 0
  3455                           
  3456                           ; BSR set to: 0
  3457                           ;sort.c: 118: }
  3458                           
  3459                           ; BSR set to: 0
  3460                           ;sort.c: 117: return;
  3461  00128C  0100               	movlb	0	; () banked
  3462  00128E  4BFE               	infsnz	_count_total& (0+255),f,b
  3463  001290  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3464                           
  3465                           ; BSR set to: 0
  3466                           ;sort.c: 122: if(count_total == 12){
  3467  001292  0E0C               	movlw	12
  3468  001294  0100               	movlb	0	; () banked
  3469  001296  19FE               	xorwf	_count_total& (0+255),w,b
  3470  001298  0100               	movlb	0	; () banked
  3471  00129A  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3472  00129C  A4D8               	btfss	status,2,c
  3473  00129E  0012               	return	
  3474                           
  3475                           ; BSR set to: 0
  3476                           ;sort.c: 123: f_lastCan = 1;
  3477  0012A0  0E00               	movlw	0
  3478  0012A2  0100               	movlb	0	; () banked
  3479  0012A4  6FED               	movwf	(_f_lastCan+1)& (0+255),b
  3480  0012A6  0E01               	movlw	1
  3481  0012A8  6FEC               	movwf	_f_lastCan& (0+255),b
  3482                           
  3483                           ; BSR set to: 0
  3484                           ;sort.c: 124: }
  3485                           ;sort.c: 125: }
  3486                           ;sort.c: 126: }
  3487                           
  3488                           ; BSR set to: 0
  3489  0012AA  0012               	return	
  3490  0012AC                     l7898:
  3491                           
  3492                           ; BSR set to: 0
  3493                           ;sort.c: 129: else if(f_ID_receive){
  3494  0012AC  0101               	movlb	1	; () banked
  3495  0012AE  512D               	movf	_f_ID_receive& (0+255),w,b
  3496  0012B0  0101               	movlb	1	; () banked
  3497  0012B2  112E               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3498  0012B4  B4D8               	btfsc	status,2,c
  3499  0012B6  0012               	return	
  3500                           
  3501                           ; BSR set to: 1
  3502                           ;sort.c: 130: f_most_recent_sort_time = 1;
  3503  0012B8  0E00               	movlw	0
  3504  0012BA  0101               	movlb	1	; () banked
  3505  0012BC  6F36               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  3506  0012BE  0E01               	movlw	1
  3507  0012C0  6F35               	movwf	_f_most_recent_sort_time& (0+255),b
  3508                           
  3509                           ;sort.c: 131: f_loadingNewCan = 0;
  3510  0012C2  0E00               	movlw	0
  3511  0012C4  0100               	movlb	0	; () banked
  3512  0012C6  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3513  0012C8  0E00               	movlw	0
  3514  0012CA  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  3515                           
  3516                           ; BSR set to: 0
  3517                           ;sort.c: 132: _delay((unsigned long)((400)*(32000000/4000.0)));
  3518  0012CC  0E11               	movlw	17
  3519  0012CE  0100               	movlb	0	; () banked
  3520  0012D0  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3521  0012D2  0E3C               	movlw	60
  3522  0012D4  0100               	movlb	0	; () banked
  3523  0012D6  6FB1               	movwf	??_Loading& (0+255),b
  3524  0012D8  0ECB               	movlw	203
  3525  0012DA                     u9907:
  3526  0012DA  2EE8               	decfsz	wreg,f,c
  3527  0012DC  D7FE               	bra	u9907
  3528  0012DE  2FB1               	decfsz	??_Loading& (0+255),f,b
  3529  0012E0  D7FC               	bra	u9907
  3530  0012E2  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3531  0012E4  D7FA               	bra	u9907
  3532                           
  3533                           ;sort.c: 133: LATBbits.LATB2 = 0;
  3534  0012E6  948A               	bcf	3978,2,c	;volatile
  3535                           
  3536                           ;sort.c: 137: f_arm_position = 1;
  3537  0012E8  0E00               	movlw	0
  3538  0012EA  0100               	movlb	0	; () banked
  3539  0012EC  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3540  0012EE  0E01               	movlw	1
  3541  0012F0  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  3542                           
  3543                           ; BSR set to: 0
  3544                           ;sort.c: 139: delay_ms(750);
  3545  0012F2  0EEE               	movlw	238
  3546  0012F4  ECDF  F02C         	call	_delay_ms
  3547                           
  3548                           ;sort.c: 140: getMAG();
  3549  0012F8  EC4E  F02B         	call	_getMAG	;wreg free
  3550                           
  3551                           ;sort.c: 141: sensor_outputs[0] = MAG_signal;
  3552  0012FC  C0E2  F0DA         	movff	_MAG_signal,_sensor_outputs
  3553  001300  C0E3  F0DB         	movff	_MAG_signal+1,_sensor_outputs+1
  3554                           
  3555                           ;sort.c: 143: TMR2IF = 0;
  3556  001304  929E               	bcf	3998,1,c	;volatile
  3557                           
  3558                           ;sort.c: 144: if(sensor_outputs[0]){
  3559  001306  0100               	movlb	0	; () banked
  3560  001308  51DA               	movf	_sensor_outputs& (0+255),w,b
  3561  00130A  0100               	movlb	0	; () banked
  3562  00130C  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3563  00130E  B4D8               	btfsc	status,2,c
  3564  001310  D01D               	goto	l7930
  3565                           
  3566                           ; BSR set to: 0
  3567                           ;sort.c: 145: for(int i = 0; i<2500; i++){
  3568  001312  0E00               	movlw	0
  3569  001314  0100               	movlb	0	; () banked
  3570  001316  6FB7               	movwf	(Loading@i_1122+1)& (0+255),b
  3571  001318  0E00               	movlw	0
  3572  00131A  6FB6               	movwf	Loading@i_1122& (0+255),b
  3573  00131C                     l7920:
  3574                           
  3575                           ; BSR set to: 0
  3576  00131C  0100               	movlb	0	; () banked
  3577  00131E  BFB7               	btfsc	(Loading@i_1122+1)& (0+255),7,b
  3578  001320  D008               	goto	l803
  3579  001322  0EC4               	movlw	196
  3580  001324  0100               	movlb	0	; () banked
  3581  001326  5DB6               	subwf	Loading@i_1122& (0+255),w,b
  3582  001328  0E09               	movlw	9
  3583  00132A  0100               	movlb	0	; () banked
  3584  00132C  59B7               	subwfb	(Loading@i_1122+1)& (0+255),w,b
  3585  00132E  B0D8               	btfsc	status,0,c
  3586  001330  D02A               	goto	l7942
  3587  001332                     l803:
  3588                           
  3589                           ; BSR set to: 0
  3590                           ;sort.c: 146: LATAbits.LATA4 = 1;
  3591  001332  8889               	bsf	3977,4,c	;volatile
  3592                           
  3593                           ; BSR set to: 0
  3594                           ;sort.c: 147: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3595  001334  0EC8               	movlw	200
  3596  001336                     u9917:
  3597  001336  2EE8               	decfsz	wreg,f,c
  3598  001338  D7FE               	bra	u9917
  3599                           
  3600                           ;sort.c: 148: LATAbits.LATA4 = 0;
  3601  00133A  9889               	bcf	3977,4,c	;volatile
  3602                           
  3603                           ;sort.c: 149: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3604  00133C  0E42               	movlw	66
  3605  00133E                     u9927:
  3606  00133E  2EE8               	decfsz	wreg,f,c
  3607  001340  D7FE               	bra	u9927
  3608  001342  D000               	nop2	
  3609  001344  0100               	movlb	0	; () banked
  3610  001346  4BB6               	infsnz	Loading@i_1122& (0+255),f,b
  3611  001348  2BB7               	incf	(Loading@i_1122+1)& (0+255),f,b
  3612  00134A  D7E8               	goto	l7920
  3613  00134C                     l7930:
  3614                           
  3615                           ; BSR set to: 0
  3616                           ;sort.c: 152: else{
  3617                           ;sort.c: 153: for(int i = 0; i<2500; i++){
  3618  00134C  0E00               	movlw	0
  3619  00134E  0100               	movlb	0	; () banked
  3620  001350  6FB9               	movwf	(Loading@i_1131+1)& (0+255),b
  3621  001352  0E00               	movlw	0
  3622  001354  6FB8               	movwf	Loading@i_1131& (0+255),b
  3623  001356                     l7932:
  3624                           
  3625                           ; BSR set to: 0
  3626  001356  0100               	movlb	0	; () banked
  3627  001358  BFB9               	btfsc	(Loading@i_1131+1)& (0+255),7,b
  3628  00135A  D008               	goto	l806
  3629  00135C  0EC4               	movlw	196
  3630  00135E  0100               	movlb	0	; () banked
  3631  001360  5DB8               	subwf	Loading@i_1131& (0+255),w,b
  3632  001362  0E09               	movlw	9
  3633  001364  0100               	movlb	0	; () banked
  3634  001366  59B9               	subwfb	(Loading@i_1131+1)& (0+255),w,b
  3635  001368  B0D8               	btfsc	status,0,c
  3636  00136A  D00D               	goto	l7942
  3637  00136C                     l806:
  3638                           
  3639                           ; BSR set to: 0
  3640                           ;sort.c: 154: LATAbits.LATA4 = 1;
  3641  00136C  8889               	bsf	3977,4,c	;volatile
  3642                           
  3643                           ; BSR set to: 0
  3644                           ;sort.c: 155: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3645  00136E  0E9A               	movlw	154
  3646  001370                     u9937:
  3647  001370  2EE8               	decfsz	wreg,f,c
  3648  001372  D7FE               	bra	u9937
  3649  001374  D000               	nop2	
  3650                           
  3651                           ;sort.c: 156: LATAbits.LATA4 = 0;
  3652  001376  9889               	bcf	3977,4,c	;volatile
  3653                           
  3654                           ;sort.c: 157: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3655  001378  0E70               	movlw	112
  3656  00137A                     u9947:
  3657  00137A  2EE8               	decfsz	wreg,f,c
  3658  00137C  D7FE               	bra	u9947
  3659  00137E  0100               	movlb	0	; () banked
  3660  001380  4BB8               	infsnz	Loading@i_1131& (0+255),f,b
  3661  001382  2BB9               	incf	(Loading@i_1131+1)& (0+255),f,b
  3662  001384  D7E8               	goto	l7932
  3663  001386                     l7942:
  3664                           
  3665                           ; BSR set to: 0
  3666                           ;sort.c: 158: }
  3667                           ;sort.c: 159: }
  3668                           ;sort.c: 161: _delay((unsigned long)((350)*(32000000/4000.0)));
  3669  001386  0E0F               	movlw	15
  3670  001388  0100               	movlb	0	; () banked
  3671  00138A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3672  00138C  0E35               	movlw	53
  3673  00138E  0100               	movlb	0	; () banked
  3674  001390  6FB1               	movwf	??_Loading& (0+255),b
  3675  001392  0E51               	movlw	81
  3676  001394                     u9957:
  3677  001394  2EE8               	decfsz	wreg,f,c
  3678  001396  D7FE               	bra	u9957
  3679  001398  2FB1               	decfsz	??_Loading& (0+255),f,b
  3680  00139A  D7FC               	bra	u9957
  3681  00139C  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3682  00139E  D7FA               	bra	u9957
  3683                           
  3684                           ;sort.c: 163: readIR();
  3685  0013A0  ECEB  F029         	call	_readIR	;wreg free
  3686                           
  3687                           ;sort.c: 164: if(IR_signal==1){
  3688  0013A4  0100               	movlb	0	; () banked
  3689  0013A6  05E0               	decf	_IR_signal& (0+255),w,b
  3690  0013A8  0100               	movlb	0	; () banked
  3691  0013AA  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  3692  0013AC  A4D8               	btfss	status,2,c
  3693  0013AE  D183               	goto	l8070
  3694                           
  3695                           ; BSR set to: 0
  3696                           ;sort.c: 165: _delay((unsigned long)((70)*(32000000/4000.0)));
  3697  0013B0  0E03               	movlw	3
  3698  0013B2  0100               	movlb	0	; () banked
  3699  0013B4  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3700  0013B6  0ED8               	movlw	216
  3701  0013B8  0100               	movlb	0	; () banked
  3702  0013BA  6FB1               	movwf	??_Loading& (0+255),b
  3703  0013BC  0E41               	movlw	65
  3704  0013BE                     u9967:
  3705  0013BE  2EE8               	decfsz	wreg,f,c
  3706  0013C0  D7FE               	bra	u9967
  3707  0013C2  2FB1               	decfsz	??_Loading& (0+255),f,b
  3708  0013C4  D7FC               	bra	u9967
  3709  0013C6  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3710  0013C8  D7FA               	bra	u9967
  3711  0013CA  D000               	nop2	
  3712                           
  3713                           ;sort.c: 166: readIR();
  3714  0013CC  ECEB  F029         	call	_readIR	;wreg free
  3715                           
  3716                           ;sort.c: 167: if(IR_signal==1){
  3717  0013D0  0100               	movlb	0	; () banked
  3718  0013D2  05E0               	decf	_IR_signal& (0+255),w,b
  3719  0013D4  0100               	movlb	0	; () banked
  3720  0013D6  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  3721  0013D8  A4D8               	btfss	status,2,c
  3722  0013DA  D040               	goto	l7980
  3723                           
  3724                           ; BSR set to: 0
  3725                           ;sort.c: 168: if(sensor_outputs[0]){
  3726  0013DC  0100               	movlb	0	; () banked
  3727  0013DE  51DA               	movf	_sensor_outputs& (0+255),w,b
  3728  0013E0  0100               	movlb	0	; () banked
  3729  0013E2  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3730  0013E4  B4D8               	btfsc	status,2,c
  3731  0013E6  D01D               	goto	l7968
  3732                           
  3733                           ; BSR set to: 0
  3734                           ;sort.c: 169: for(int i = 0; i<2500; i++){
  3735  0013E8  0E00               	movlw	0
  3736  0013EA  0100               	movlb	0	; () banked
  3737  0013EC  6FBB               	movwf	(Loading@i_1133+1)& (0+255),b
  3738  0013EE  0E00               	movlw	0
  3739  0013F0  6FBA               	movwf	Loading@i_1133& (0+255),b
  3740  0013F2                     l7958:
  3741                           
  3742                           ; BSR set to: 0
  3743  0013F2  0100               	movlb	0	; () banked
  3744  0013F4  BFBB               	btfsc	(Loading@i_1133+1)& (0+255),7,b
  3745  0013F6  D008               	goto	l811
  3746  0013F8  0EC4               	movlw	196
  3747  0013FA  0100               	movlb	0	; () banked
  3748  0013FC  5DBA               	subwf	Loading@i_1133& (0+255),w,b
  3749  0013FE  0E09               	movlw	9
  3750  001400  0100               	movlb	0	; () banked
  3751  001402  59BB               	subwfb	(Loading@i_1133+1)& (0+255),w,b
  3752  001404  B0D8               	btfsc	status,0,c
  3753  001406  D02A               	goto	l7980
  3754  001408                     l811:
  3755                           
  3756                           ; BSR set to: 0
  3757                           ;sort.c: 170: LATAbits.LATA4 = 1;
  3758  001408  8889               	bsf	3977,4,c	;volatile
  3759                           
  3760                           ; BSR set to: 0
  3761                           ;sort.c: 171: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3762  00140A  0EC8               	movlw	200
  3763  00140C                     u9977:
  3764  00140C  2EE8               	decfsz	wreg,f,c
  3765  00140E  D7FE               	bra	u9977
  3766                           
  3767                           ;sort.c: 172: LATAbits.LATA4 = 0;
  3768  001410  9889               	bcf	3977,4,c	;volatile
  3769                           
  3770                           ;sort.c: 173: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3771  001412  0E42               	movlw	66
  3772  001414                     u9987:
  3773  001414  2EE8               	decfsz	wreg,f,c
  3774  001416  D7FE               	bra	u9987
  3775  001418  D000               	nop2	
  3776  00141A  0100               	movlb	0	; () banked
  3777  00141C  4BBA               	infsnz	Loading@i_1133& (0+255),f,b
  3778  00141E  2BBB               	incf	(Loading@i_1133+1)& (0+255),f,b
  3779  001420  D7E8               	goto	l7958
  3780  001422                     l7968:
  3781                           
  3782                           ; BSR set to: 0
  3783                           ;sort.c: 176: else{
  3784                           ;sort.c: 177: for(int i = 0; i<2500; i++){
  3785  001422  0E00               	movlw	0
  3786  001424  0100               	movlb	0	; () banked
  3787  001426  6FBD               	movwf	(Loading@i_1134+1)& (0+255),b
  3788  001428  0E00               	movlw	0
  3789  00142A  6FBC               	movwf	Loading@i_1134& (0+255),b
  3790  00142C                     l7970:
  3791                           
  3792                           ; BSR set to: 0
  3793  00142C  0100               	movlb	0	; () banked
  3794  00142E  BFBD               	btfsc	(Loading@i_1134+1)& (0+255),7,b
  3795  001430  D008               	goto	l814
  3796  001432  0EC4               	movlw	196
  3797  001434  0100               	movlb	0	; () banked
  3798  001436  5DBC               	subwf	Loading@i_1134& (0+255),w,b
  3799  001438  0E09               	movlw	9
  3800  00143A  0100               	movlb	0	; () banked
  3801  00143C  59BD               	subwfb	(Loading@i_1134+1)& (0+255),w,b
  3802  00143E  B0D8               	btfsc	status,0,c
  3803  001440  D00D               	goto	l7980
  3804  001442                     l814:
  3805                           
  3806                           ; BSR set to: 0
  3807                           ;sort.c: 178: LATAbits.LATA4 = 1;
  3808  001442  8889               	bsf	3977,4,c	;volatile
  3809                           
  3810                           ; BSR set to: 0
  3811                           ;sort.c: 179: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3812  001444  0E9A               	movlw	154
  3813  001446                     u9997:
  3814  001446  2EE8               	decfsz	wreg,f,c
  3815  001448  D7FE               	bra	u9997
  3816  00144A  D000               	nop2	
  3817                           
  3818                           ;sort.c: 180: LATAbits.LATA4 = 0;
  3819  00144C  9889               	bcf	3977,4,c	;volatile
  3820                           
  3821                           ;sort.c: 181: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3822  00144E  0E70               	movlw	112
  3823  001450                     u10007:
  3824  001450  2EE8               	decfsz	wreg,f,c
  3825  001452  D7FE               	bra	u10007
  3826  001454  0100               	movlb	0	; () banked
  3827  001456  4BBC               	infsnz	Loading@i_1134& (0+255),f,b
  3828  001458  2BBD               	incf	(Loading@i_1134+1)& (0+255),f,b
  3829  00145A  D7E8               	goto	l7970
  3830  00145C                     l7980:
  3831                           
  3832                           ; BSR set to: 0
  3833                           ;sort.c: 182: }
  3834                           ;sort.c: 183: }
  3835                           ;sort.c: 184: }
  3836                           ;sort.c: 186: _delay((unsigned long)((350)*(32000000/4000.0)));
  3837  00145C  0E0F               	movlw	15
  3838  00145E  0100               	movlb	0	; () banked
  3839  001460  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3840  001462  0E35               	movlw	53
  3841  001464  0100               	movlb	0	; () banked
  3842  001466  6FB1               	movwf	??_Loading& (0+255),b
  3843  001468  0E51               	movlw	81
  3844  00146A                     u10017:
  3845  00146A  2EE8               	decfsz	wreg,f,c
  3846  00146C  D7FE               	bra	u10017
  3847  00146E  2FB1               	decfsz	??_Loading& (0+255),f,b
  3848  001470  D7FC               	bra	u10017
  3849  001472  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3850  001474  D7FA               	bra	u10017
  3851                           
  3852                           ;sort.c: 188: int j = 0;
  3853  001476  0E00               	movlw	0
  3854  001478  0100               	movlb	0	; () banked
  3855  00147A  6FC3               	movwf	(Loading@j+1)& (0+255),b
  3856  00147C  0E00               	movlw	0
  3857  00147E  6FC2               	movwf	Loading@j& (0+255),b
  3858                           
  3859                           ;sort.c: 189: while(IR_signal == 1){
  3860  001480  D113               	goto	l8068
  3861  001482                     l7984:
  3862                           
  3863                           ; BSR set to: 0
  3864                           ;sort.c: 190: readIR();
  3865  001482  ECEB  F029         	call	_readIR	;wreg free
  3866                           
  3867                           ;sort.c: 191: if(j == 3 || j == 4){
  3868  001486  0E03               	movlw	3
  3869  001488  0100               	movlb	0	; () banked
  3870  00148A  19C2               	xorwf	Loading@j& (0+255),w,b
  3871  00148C  0100               	movlb	0	; () banked
  3872  00148E  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3873  001490  B4D8               	btfsc	status,2,c
  3874  001492  D007               	goto	l7990
  3875                           
  3876                           ; BSR set to: 0
  3877  001494  0E04               	movlw	4
  3878  001496  0100               	movlb	0	; () banked
  3879  001498  19C2               	xorwf	Loading@j& (0+255),w,b
  3880  00149A  0100               	movlb	0	; () banked
  3881  00149C  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3882  00149E  A4D8               	btfss	status,2,c
  3883  0014A0  D005               	goto	l7992
  3884  0014A2                     l7990:
  3885                           
  3886                           ; BSR set to: 0
  3887                           ;sort.c: 192: f_arm_position = 0;
  3888  0014A2  0E00               	movlw	0
  3889  0014A4  0100               	movlb	0	; () banked
  3890  0014A6  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3891  0014A8  0E00               	movlw	0
  3892  0014AA  D022               	goto	L2
  3893  0014AC                     l7992:
  3894                           
  3895                           ; BSR set to: 0
  3896                           ;sort.c: 194: else if(j == 5 || j == 6){
  3897  0014AC  0E05               	movlw	5
  3898  0014AE  0100               	movlb	0	; () banked
  3899  0014B0  19C2               	xorwf	Loading@j& (0+255),w,b
  3900  0014B2  0100               	movlb	0	; () banked
  3901  0014B4  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3902  0014B6  B4D8               	btfsc	status,2,c
  3903  0014B8  D007               	goto	l824
  3904                           
  3905                           ; BSR set to: 0
  3906  0014BA  0E06               	movlw	6
  3907  0014BC  0100               	movlb	0	; () banked
  3908  0014BE  19C2               	xorwf	Loading@j& (0+255),w,b
  3909  0014C0  0100               	movlb	0	; () banked
  3910  0014C2  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3911  0014C4  A4D8               	btfss	status,2,c
  3912  0014C6  D002               	goto	l7996
  3913  0014C8                     l824:
  3914                           
  3915                           ; BSR set to: 0
  3916                           ;sort.c: 195: LATBbits.LATB2 = 1;
  3917  0014C8  848A               	bsf	3978,2,c	;volatile
  3918                           
  3919                           ;sort.c: 196: }
  3920  0014CA  D034               	goto	l821
  3921  0014CC                     l7996:
  3922                           
  3923                           ; BSR set to: 0
  3924                           ;sort.c: 197: else if(j == 7 || j == 8){
  3925  0014CC  0E07               	movlw	7
  3926  0014CE  0100               	movlb	0	; () banked
  3927  0014D0  19C2               	xorwf	Loading@j& (0+255),w,b
  3928  0014D2  0100               	movlb	0	; () banked
  3929  0014D4  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3930  0014D6  B4D8               	btfsc	status,2,c
  3931  0014D8  D007               	goto	l8000
  3932                           
  3933                           ; BSR set to: 0
  3934  0014DA  0E08               	movlw	8
  3935  0014DC  0100               	movlb	0	; () banked
  3936  0014DE  19C2               	xorwf	Loading@j& (0+255),w,b
  3937  0014E0  0100               	movlb	0	; () banked
  3938  0014E2  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3939  0014E4  A4D8               	btfss	status,2,c
  3940  0014E6  D006               	goto	l826
  3941  0014E8                     l8000:
  3942                           
  3943                           ; BSR set to: 0
  3944                           ;sort.c: 198: f_arm_position = 1;
  3945  0014E8  0E00               	movlw	0
  3946  0014EA  0100               	movlb	0	; () banked
  3947  0014EC  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3948  0014EE  0E01               	movlw	1
  3949  0014F0                     L2:
  3950  0014F0  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  3951                           
  3952                           ;sort.c: 199: }
  3953  0014F2  D020               	goto	l821
  3954  0014F4                     l826:
  3955                           
  3956                           ; BSR set to: 0
  3957                           ;sort.c: 200: else if(j % 2 == 0){
  3958  0014F4  0100               	movlb	0	; () banked
  3959  0014F6  B1C2               	btfsc	Loading@j& (0+255),0,b
  3960  0014F8  D01D               	goto	l821
  3961                           
  3962                           ; BSR set to: 0
  3963                           ;sort.c: 201: LATBbits.LATB2 = !LATBbits.LATB2;
  3964  0014FA  B48A               	btfsc	3978,2,c	;volatile
  3965  0014FC  D004               	goto	u6720
  3966  0014FE  0100               	movlb	0	; () banked
  3967  001500  6BB1               	clrf	??_Loading& (0+255),b
  3968  001502  2BB1               	incf	??_Loading& (0+255),f,b
  3969  001504  D002               	goto	u6738
  3970  001506                     u6720:
  3971  001506  0100               	movlb	0	; () banked
  3972  001508  6BB1               	clrf	??_Loading& (0+255),b
  3973  00150A                     u6738:
  3974  00150A  0100               	movlb	0	; () banked
  3975  00150C  47B1               	rlncf	??_Loading& (0+255),f,b
  3976  00150E  47B1               	rlncf	??_Loading& (0+255),f,b
  3977  001510  508A               	movf	3978,w,c	;volatile
  3978  001512  0100               	movlb	0	; () banked
  3979  001514  19B1               	xorwf	??_Loading& (0+255),w,b
  3980  001516  0BFB               	andlw	-5
  3981  001518  19B1               	xorwf	??_Loading& (0+255),w,b
  3982  00151A  6E8A               	movwf	3978,c	;volatile
  3983                           
  3984                           ;sort.c: 202: f_arm_position = !f_arm_position;
  3985  00151C  0100               	movlb	0	; () banked
  3986  00151E  51EA               	movf	_f_arm_position& (0+255),w,b	;volatile
  3987  001520  0100               	movlb	0	; () banked
  3988  001522  11EB               	iorwf	(_f_arm_position+1)& (0+255),w,b	;volatile
  3989  001524  A4D8               	btfss	status,2,c
  3990  001526  D002               	goto	u6740
  3991  001528  0E01               	movlw	1
  3992  00152A  D001               	goto	u6750
  3993  00152C                     u6740:
  3994  00152C  0E00               	movlw	0
  3995  00152E                     u6750:
  3996  00152E  0100               	movlb	0	; () banked
  3997  001530  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  3998  001532  6BEB               	clrf	(_f_arm_position+1)& (0+255),b	;volatile
  3999  001534                     l821:
  4000                           
  4001                           ; BSR set to: 0
  4002                           ;sort.c: 203: }
  4003                           ;sort.c: 206: if(IR_signal==1){
  4004  001534  0100               	movlb	0	; () banked
  4005  001536  05E0               	decf	_IR_signal& (0+255),w,b
  4006  001538  0100               	movlb	0	; () banked
  4007  00153A  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4008  00153C  A4D8               	btfss	status,2,c
  4009  00153E  D098               	goto	l8056
  4010                           
  4011                           ; BSR set to: 0
  4012                           ;sort.c: 207: _delay((unsigned long)((350)*(32000000/4000.0)));
  4013  001540  0E0F               	movlw	15
  4014  001542  0100               	movlb	0	; () banked
  4015  001544  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4016  001546  0E35               	movlw	53
  4017  001548  0100               	movlb	0	; () banked
  4018  00154A  6FB1               	movwf	??_Loading& (0+255),b
  4019  00154C  0E51               	movlw	81
  4020  00154E                     u10027:
  4021  00154E  2EE8               	decfsz	wreg,f,c
  4022  001550  D7FE               	bra	u10027
  4023  001552  2FB1               	decfsz	??_Loading& (0+255),f,b
  4024  001554  D7FC               	bra	u10027
  4025  001556  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4026  001558  D7FA               	bra	u10027
  4027                           
  4028                           ;sort.c: 208: readIR();
  4029  00155A  ECEB  F029         	call	_readIR	;wreg free
  4030                           
  4031                           ;sort.c: 209: if(IR_signal==1){
  4032  00155E  0100               	movlb	0	; () banked
  4033  001560  05E0               	decf	_IR_signal& (0+255),w,b
  4034  001562  0100               	movlb	0	; () banked
  4035  001564  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4036  001566  A4D8               	btfss	status,2,c
  4037  001568  D07F               	goto	l832
  4038                           
  4039                           ; BSR set to: 0
  4040                           ;sort.c: 210: if(sensor_outputs[0]){
  4041  00156A  0100               	movlb	0	; () banked
  4042  00156C  51DA               	movf	_sensor_outputs& (0+255),w,b
  4043  00156E  0100               	movlb	0	; () banked
  4044  001570  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4045  001572  B4D8               	btfsc	status,2,c
  4046  001574  D011               	goto	l8018
  4047                           
  4048                           ; BSR set to: 0
  4049                           ;sort.c: 211: LATAbits.LATA4 = 1;
  4050  001576  8889               	bsf	3977,4,c	;volatile
  4051                           
  4052                           ; BSR set to: 0
  4053                           ;sort.c: 212: _delay((unsigned long)((250)*(32000000/4000.0)));
  4054  001578  0E0B               	movlw	11
  4055  00157A  0100               	movlb	0	; () banked
  4056  00157C  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4057  00157E  0E26               	movlw	38
  4058  001580  0100               	movlb	0	; () banked
  4059  001582  6FB1               	movwf	??_Loading& (0+255),b
  4060  001584  0E5D               	movlw	93
  4061  001586                     u10037:
  4062  001586  2EE8               	decfsz	wreg,f,c
  4063  001588  D7FE               	bra	u10037
  4064  00158A  2FB1               	decfsz	??_Loading& (0+255),f,b
  4065  00158C  D7FC               	bra	u10037
  4066  00158E  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4067  001590  D7FA               	bra	u10037
  4068  001592  D000               	nop2	
  4069                           
  4070                           ;sort.c: 213: LATAbits.LATA4 = 0;
  4071  001594  9889               	bcf	3977,4,c	;volatile
  4072                           
  4073                           ;sort.c: 214: }
  4074  001596  D068               	goto	l832
  4075  001598                     l8018:
  4076                           
  4077                           ;sort.c: 215: else{
  4078                           ;sort.c: 216: for(int i = 0; i<2500; i++){
  4079  001598  0E00               	movlw	0
  4080  00159A  0100               	movlb	0	; () banked
  4081  00159C  6FBF               	movwf	(Loading@i_1136+1)& (0+255),b
  4082  00159E  0E00               	movlw	0
  4083  0015A0  6FBE               	movwf	Loading@i_1136& (0+255),b
  4084  0015A2                     l8020:
  4085                           
  4086                           ; BSR set to: 0
  4087  0015A2  0100               	movlb	0	; () banked
  4088  0015A4  BFBF               	btfsc	(Loading@i_1136+1)& (0+255),7,b
  4089  0015A6  D041               	goto	l8048
  4090  0015A8  0EC4               	movlw	196
  4091  0015AA  0100               	movlb	0	; () banked
  4092  0015AC  5DBE               	subwf	Loading@i_1136& (0+255),w,b
  4093  0015AE  0E09               	movlw	9
  4094  0015B0  0100               	movlb	0	; () banked
  4095  0015B2  59BF               	subwfb	(Loading@i_1136+1)& (0+255),w,b
  4096  0015B4  B0D8               	btfsc	status,0,c
  4097  0015B6  D058               	goto	l832
  4098  0015B8  D038               	goto	l8048
  4099  0015BA                     l838:
  4100                           
  4101                           ; BSR set to: 0
  4102                           ;sort.c: 219: LATAbits.LATA4 = 1;
  4103  0015BA  8889               	bsf	3977,4,c	;volatile
  4104                           
  4105                           ; BSR set to: 0
  4106                           ;sort.c: 220: _delay((unsigned long)((75)*(32000000/4000000.0)));
  4107  0015BC  0EC8               	movlw	200
  4108  0015BE                     u10047:
  4109  0015BE  2EE8               	decfsz	wreg,f,c
  4110  0015C0  D7FE               	bra	u10047
  4111                           
  4112                           ;sort.c: 221: LATAbits.LATA4 = 0;
  4113  0015C2  9889               	bcf	3977,4,c	;volatile
  4114                           
  4115                           ;sort.c: 222: _delay((unsigned long)((25)*(32000000/4000000.0)));
  4116  0015C4  0E42               	movlw	66
  4117  0015C6                     u10057:
  4118  0015C6  2EE8               	decfsz	wreg,f,c
  4119  0015C8  D7FE               	bra	u10057
  4120  0015CA  D01C               	goto	L3
  4121  0015CC                     l840:
  4122                           
  4123                           ; BSR set to: 0
  4124                           ;sort.c: 225: LATAbits.LATA4 = 1;
  4125  0015CC  8889               	bsf	3977,4,c	;volatile
  4126                           
  4127                           ; BSR set to: 0
  4128                           ;sort.c: 226: _delay((unsigned long)((80)*(32000000/4000000.0)));
  4129  0015CE  0ED5               	movlw	213
  4130  0015D0                     u10067:
  4131  0015D0  2EE8               	decfsz	wreg,f,c
  4132  0015D2  D7FE               	bra	u10067
  4133  0015D4  F000               	nop	
  4134                           
  4135                           ;sort.c: 227: LATAbits.LATA4 = 0;
  4136  0015D6  9889               	bcf	3977,4,c	;volatile
  4137                           
  4138                           ;sort.c: 228: _delay((unsigned long)((20)*(32000000/4000000.0)));
  4139  0015D8  0E35               	movlw	53
  4140  0015DA                     u10077:
  4141  0015DA  2EE8               	decfsz	wreg,f,c
  4142  0015DC  D7FE               	bra	u10077
  4143  0015DE  D01D               	goto	L4
  4144  0015E0                     l841:
  4145                           
  4146                           ; BSR set to: 0
  4147                           ;sort.c: 231: LATAbits.LATA4 = 1;
  4148  0015E0  8889               	bsf	3977,4,c	;volatile
  4149                           
  4150                           ; BSR set to: 0
  4151                           ;sort.c: 232: _delay((unsigned long)((85)*(32000000/4000000.0)));
  4152  0015E2  0EE2               	movlw	226
  4153  0015E4                     u10087:
  4154  0015E4  2EE8               	decfsz	wreg,f,c
  4155  0015E6  D7FE               	bra	u10087
  4156  0015E8  D000               	nop2	
  4157                           
  4158                           ;sort.c: 233: LATAbits.LATA4 = 0;
  4159  0015EA  9889               	bcf	3977,4,c	;volatile
  4160                           
  4161                           ;sort.c: 234: _delay((unsigned long)((15)*(32000000/4000000.0)));
  4162  0015EC  0E28               	movlw	40
  4163  0015EE                     u10097:
  4164  0015EE  2EE8               	decfsz	wreg,f,c
  4165  0015F0  D7FE               	bra	u10097
  4166                           
  4167                           ;sort.c: 235: break;
  4168  0015F2  D036               	goto	l8050
  4169  0015F4                     l842:
  4170                           
  4171                           ; BSR set to: 0
  4172                           ;sort.c: 237: LATAbits.LATA4 = 1;
  4173  0015F4  8889               	bsf	3977,4,c	;volatile
  4174                           
  4175                           ; BSR set to: 0
  4176                           ;sort.c: 238: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4177  0015F6  0EF0               	movlw	240
  4178  0015F8                     u10107:
  4179  0015F8  2EE8               	decfsz	wreg,f,c
  4180  0015FA  D7FE               	bra	u10107
  4181                           
  4182                           ;sort.c: 239: LATAbits.LATA4 = 0;
  4183  0015FC  9889               	bcf	3977,4,c	;volatile
  4184                           
  4185                           ;sort.c: 240: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4186  0015FE  0E1A               	movlw	26
  4187  001600                     u10117:
  4188  001600  2EE8               	decfsz	wreg,f,c
  4189  001602  D7FE               	bra	u10117
  4190  001604                     L3:
  4191  001604  D000               	nop2	
  4192                           
  4193                           ;sort.c: 241: break;
  4194  001606  D02C               	goto	l8050
  4195  001608                     l843:
  4196                           
  4197                           ; BSR set to: 0
  4198                           ;sort.c: 243: LATAbits.LATA4 = 1;
  4199  001608  8889               	bsf	3977,4,c	;volatile
  4200                           
  4201                           ; BSR set to: 0
  4202                           ;sort.c: 244: _delay((unsigned long)((95)*(32000000/4000000.0)));
  4203  00160A  0EFD               	movlw	253
  4204  00160C                     u10127:
  4205  00160C  2EE8               	decfsz	wreg,f,c
  4206  00160E  D7FE               	bra	u10127
  4207  001610  F000               	nop	
  4208                           
  4209                           ;sort.c: 245: LATAbits.LATA4 = 0;
  4210  001612  9889               	bcf	3977,4,c	;volatile
  4211                           
  4212                           ;sort.c: 246: _delay((unsigned long)((50)*(32000000/4000000.0)));
  4213  001614  0E85               	movlw	133
  4214  001616                     u10137:
  4215  001616  2EE8               	decfsz	wreg,f,c
  4216  001618  D7FE               	bra	u10137
  4217  00161A                     L4:
  4218  00161A  F000               	nop	
  4219                           
  4220                           ;sort.c: 247: break;
  4221  00161C  D021               	goto	l8050
  4222  00161E                     l844:
  4223                           
  4224                           ; BSR set to: 0
  4225                           ;sort.c: 249: LATAbits.LATA4 = 1;
  4226  00161E  8889               	bsf	3977,4,c	;volatile
  4227                           
  4228                           ; BSR set to: 0
  4229                           ;sort.c: 250: _delay((unsigned long)((100)*(32000000/4000000.0)));
  4230  001620  0EA0               	movlw	160
  4231  001622                     u10147:
  4232  001622  D000               	nop2	
  4233  001624  2EE8               	decfsz	wreg,f,c
  4234  001626  D7FD               	bra	u10147
  4235                           
  4236                           ;sort.c: 252: }
  4237                           
  4238                           ;sort.c: 251: break;
  4239  001628  D01B               	goto	l8050
  4240  00162A                     l8048:
  4241  00162A  C0C2  F0B1         	movff	Loading@j,??_Loading
  4242  00162E  C0C3  F0B2         	movff	Loading@j+1,??_Loading+1
  4243                           
  4244                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4245                           ; Switch size 1, requested type "space"
  4246                           ; Number of cases is 1, Range of values is 0 to 0
  4247                           ; switch strategies available:
  4248                           ; Name         Instructions Cycles
  4249                           ; simple_byte            4     3 (average)
  4250                           ;	Chosen strategy is simple_byte
  4251  001632  0100               	movlb	0	; () banked
  4252  001634  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4253  001636  0A00               	xorlw	0	; case 0
  4254  001638  A4D8               	btfss	status,2,c
  4255  00163A  D7F1               	goto	l844
  4256                           
  4257                           ; BSR set to: 0
  4258                           ; Switch size 1, requested type "space"
  4259                           ; Number of cases is 5, Range of values is 0 to 4
  4260                           ; switch strategies available:
  4261                           ; Name         Instructions Cycles
  4262                           ; simple_byte           16     9 (average)
  4263                           ;	Chosen strategy is simple_byte
  4264  00163C  0100               	movlb	0	; () banked
  4265  00163E  51B1               	movf	??_Loading& (0+255),w,b
  4266  001640  0A00               	xorlw	0	; case 0
  4267  001642  B4D8               	btfsc	status,2,c
  4268  001644  D7BA               	goto	l838
  4269  001646  0A01               	xorlw	1	; case 1
  4270  001648  B4D8               	btfsc	status,2,c
  4271  00164A  D7C0               	goto	l840
  4272  00164C  0A03               	xorlw	3	; case 2
  4273  00164E  B4D8               	btfsc	status,2,c
  4274  001650  D7C7               	goto	l841
  4275  001652  0A01               	xorlw	1	; case 3
  4276  001654  B4D8               	btfsc	status,2,c
  4277  001656  D7CE               	goto	l842
  4278  001658  0A07               	xorlw	7	; case 4
  4279  00165A  B4D8               	btfsc	status,2,c
  4280  00165C  D7D5               	goto	l843
  4281  00165E  D7DF               	goto	l844
  4282  001660                     l8050:
  4283  001660  0100               	movlb	0	; () banked
  4284  001662  4BBE               	infsnz	Loading@i_1136& (0+255),f,b
  4285  001664  2BBF               	incf	(Loading@i_1136+1)& (0+255),f,b
  4286  001666  D79D               	goto	l8020
  4287  001668                     l832:
  4288                           
  4289                           ;sort.c: 253: }
  4290                           ;sort.c: 254: }
  4291                           ;sort.c: 255: }
  4292                           ;sort.c: 256: LATAbits.LATA4 = 0;
  4293  001668  9889               	bcf	3977,4,c	;volatile
  4294                           
  4295                           ;sort.c: 257: j++;
  4296  00166A  0100               	movlb	0	; () banked
  4297  00166C  4BC2               	infsnz	Loading@j& (0+255),f,b
  4298  00166E  2BC3               	incf	(Loading@j+1)& (0+255),f,b
  4299  001670                     l8056:
  4300                           
  4301                           ; BSR set to: 0
  4302                           ;sort.c: 258: }
  4303                           ;sort.c: 260: if(!IR_signal){
  4304  001670  0100               	movlb	0	; () banked
  4305  001672  51E0               	movf	_IR_signal& (0+255),w,b
  4306  001674  0100               	movlb	0	; () banked
  4307  001676  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4308  001678  A4D8               	btfss	status,2,c
  4309  00167A  D016               	goto	l8068
  4310                           
  4311                           ; BSR set to: 0
  4312                           ;sort.c: 261: _delay((unsigned long)((500)*(32000000/4000.0)));
  4313  00167C  0E15               	movlw	21
  4314  00167E  0100               	movlb	0	; () banked
  4315  001680  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4316  001682  0E4B               	movlw	75
  4317  001684  0100               	movlb	0	; () banked
  4318  001686  6FB1               	movwf	??_Loading& (0+255),b
  4319  001688  0EBE               	movlw	190
  4320  00168A                     u10157:
  4321  00168A  2EE8               	decfsz	wreg,f,c
  4322  00168C  D7FE               	bra	u10157
  4323  00168E  2FB1               	decfsz	??_Loading& (0+255),f,b
  4324  001690  D7FC               	bra	u10157
  4325  001692  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4326  001694  D7FA               	bra	u10157
  4327  001696  F000               	nop	
  4328                           
  4329                           ;sort.c: 262: readIR();
  4330  001698  ECEB  F029         	call	_readIR	;wreg free
  4331                           
  4332                           ;sort.c: 263: if(IR_signal==1){
  4333  00169C  0100               	movlb	0	; () banked
  4334  00169E  05E0               	decf	_IR_signal& (0+255),w,b
  4335  0016A0  0100               	movlb	0	; () banked
  4336  0016A2  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4337  0016A4  A4D8               	btfss	status,2,c
  4338  0016A6  D006               	goto	l848
  4339  0016A8                     l8068:
  4340                           
  4341                           ; BSR set to: 0
  4342  0016A8  0100               	movlb	0	; () banked
  4343  0016AA  05E0               	decf	_IR_signal& (0+255),w,b
  4344  0016AC  0100               	movlb	0	; () banked
  4345  0016AE  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4346  0016B0  B4D8               	btfsc	status,2,c
  4347  0016B2  D6E7               	goto	l7984
  4348  0016B4                     l848:
  4349                           
  4350                           ; BSR set to: 0
  4351                           ;sort.c: 268: }
  4352                           ;sort.c: 269: }
  4353                           ;sort.c: 270: }
  4354                           ;sort.c: 271: LATBbits.LATB2 = 0;
  4355  0016B4  948A               	bcf	3978,2,c	;volatile
  4356  0016B6                     l8070:
  4357                           
  4358                           ; BSR set to: 0
  4359                           ;sort.c: 272: }
  4360                           ;sort.c: 273: f_can_coming_to_ID = 1;
  4361  0016B6  0E00               	movlw	0
  4362  0016B8  0101               	movlb	1	; () banked
  4363  0016BA  6F30               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4364  0016BC  0E01               	movlw	1
  4365  0016BE  6F2F               	movwf	_f_can_coming_to_ID& (0+255),b
  4366                           
  4367                           ; BSR set to: 1
  4368                           ;sort.c: 274: TMR2IF = 1;
  4369  0016C0  829E               	bsf	3998,1,c	;volatile
  4370                           
  4371                           ; BSR set to: 1
  4372                           
  4373                           ; BSR set to: 1
  4374  0016C2  0012               	return	
  4375  0016C4                     __end_of_Loading:
  4376                           	opt stack 0
  4377                           tblptru	equ	0xFF8
  4378                           tblptrh	equ	0xFF7
  4379                           tblptrl	equ	0xFF6
  4380                           tablat	equ	0xFF5
  4381                           prodh	equ	0xFF4
  4382                           prodl	equ	0xFF3
  4383                           postinc0	equ	0xFEE
  4384                           wreg	equ	0xFE8
  4385                           postdec1	equ	0xFE5
  4386                           fsr1l	equ	0xFE1
  4387                           status	equ	0xFD8
  4388                           
  4389 ;; *************** function _initSortTimer *****************
  4390 ;; Defined at:
  4391 ;;		line 449 in file "sort.c"
  4392 ;; Parameters:    Size  Location     Type
  4393 ;;		None
  4394 ;; Auto vars:     Size  Location     Type
  4395 ;;  i               2    8[BANK0 ] int 
  4396 ;; Return value:  Size  Location     Type
  4397 ;;                  1    wreg      void 
  4398 ;; Registers used:
  4399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4400 ;; Tracked objects:
  4401 ;;		On entry : 0/0
  4402 ;;		On exit  : 0/0
  4403 ;;		Unchanged: 0/0
  4404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4406 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4407 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4408 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4409 ;;Total ram usage:        5 bytes
  4410 ;; Hardware stack levels used:    1
  4411 ;; Hardware stack levels required when called:   10
  4412 ;; This function calls:
  4413 ;;		_getRTC
  4414 ;; This function is called by:
  4415 ;;		_Loading
  4416 ;; This function uses a non-reentrant model
  4417 ;;
  4418                           
  4419                           	psect	text3
  4420  004A86                     __ptext3:
  4421                           	opt stack 0
  4422  004A86                     _initSortTimer:
  4423                           	opt stack 18
  4424                           
  4425                           ;sort.c: 451: getRTC();
  4426                           
  4427                           ;incstack = 0
  4428  004A86  EC2F  F026         	call	_getRTC	;wreg free
  4429                           
  4430                           ;sort.c: 452: for(int i = 0; i < 7; i++){
  4431  004A8A  0E00               	movlw	0
  4432  004A8C  0100               	movlb	0	; () banked
  4433  004A8E  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4434  004A90  0E00               	movlw	0
  4435  004A92  6F88               	movwf	initSortTimer@i& (0+255),b
  4436  004A94                     l7372:
  4437                           
  4438                           ; BSR set to: 0
  4439  004A94  0100               	movlb	0	; () banked
  4440  004A96  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4441  004A98  D008               	goto	l7376
  4442  004A9A  0100               	movlb	0	; () banked
  4443  004A9C  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4444  004A9E  E140               	bnz	l7382
  4445  004AA0  0E07               	movlw	7
  4446  004AA2  0100               	movlb	0	; () banked
  4447  004AA4  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4448  004AA6  B0D8               	btfsc	status,0,c
  4449  004AA8  D03B               	goto	l7382
  4450  004AAA                     l7376:
  4451                           
  4452                           ; BSR set to: 0
  4453                           ;sort.c: 453: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4454  004AAA  0E1C               	movlw	low _time
  4455  004AAC  0100               	movlb	0	; () banked
  4456  004AAE  2588               	addwf	initSortTimer@i& (0+255),w,b
  4457  004AB0  6ED9               	movwf	fsr2l,c
  4458  004AB2  0E01               	movlw	high _time
  4459  004AB4  0100               	movlb	0	; () banked
  4460  004AB6  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4461  004AB8  6EDA               	movwf	fsr2h,c
  4462  004ABA  50DF               	movf	indf2,w,c
  4463  004ABC  0100               	movlb	0	; () banked
  4464  004ABE  6F85               	movwf	??_initSortTimer& (0+255),b
  4465  004AC0  0100               	movlb	0	; () banked
  4466  004AC2  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4467  004AC4  0E0F               	movlw	15
  4468  004AC6  1785               	andwf	??_initSortTimer& (0+255),f,b
  4469  004AC8  0E0F               	movlw	15
  4470  004ACA  0100               	movlb	0	; () banked
  4471  004ACC  1785               	andwf	??_initSortTimer& (0+255),f,b
  4472  004ACE  0100               	movlb	0	; () banked
  4473  004AD0  5185               	movf	??_initSortTimer& (0+255),w,b
  4474  004AD2  0D0A               	mullw	10
  4475  004AD4  0E1C               	movlw	low _time
  4476  004AD6  0100               	movlb	0	; () banked
  4477  004AD8  2588               	addwf	initSortTimer@i& (0+255),w,b
  4478  004ADA  6ED9               	movwf	fsr2l,c
  4479  004ADC  0E01               	movlw	high _time
  4480  004ADE  0100               	movlb	0	; () banked
  4481  004AE0  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4482  004AE2  6EDA               	movwf	fsr2h,c
  4483  004AE4  50DF               	movf	indf2,w,c
  4484  004AE6  0B0F               	andlw	15
  4485  004AE8  0100               	movlb	0	; () banked
  4486  004AEA  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4487  004AEC  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4488  004AEE  50F3               	movf	prodl,w,c
  4489  004AF0  0100               	movlb	0	; () banked
  4490  004AF2  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4491  004AF4  50F4               	movf	prodh,w,c
  4492  004AF6  0100               	movlb	0	; () banked
  4493  004AF8  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4494  004AFA  90D8               	bcf	status,0,c
  4495  004AFC  0100               	movlb	0	; () banked
  4496  004AFE  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4497  004B00  6ED9               	movwf	fsr2l,c
  4498  004B02  0100               	movlb	0	; () banked
  4499  004B04  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4500  004B06  6EDA               	movwf	fsr2h,c
  4501  004B08  0E0E               	movlw	low _startTime
  4502  004B0A  26D9               	addwf	fsr2l,f,c
  4503  004B0C  0E01               	movlw	high _startTime
  4504  004B0E  22DA               	addwfc	fsr2h,f,c
  4505  004B10  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4506  004B14  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4507                           
  4508                           ; BSR set to: 0
  4509  004B18  0100               	movlb	0	; () banked
  4510  004B1A  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4511  004B1C  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4512  004B1E  D7BA               	goto	l7372
  4513  004B20                     l7382:
  4514                           
  4515                           ; BSR set to: 0
  4516                           ;sort.c: 454: }
  4517                           ;sort.c: 456: T0CON = 0b00010111;
  4518  004B20  0E17               	movlw	23
  4519  004B22  6ED5               	movwf	4053,c	;volatile
  4520                           
  4521                           ;sort.c: 465: TMR0H = 0b10000101;
  4522  004B24  0E85               	movlw	133
  4523  004B26  6ED7               	movwf	4055,c	;volatile
  4524                           
  4525                           ;sort.c: 466: TMR0L = 0b11101110;
  4526  004B28  0EEE               	movlw	238
  4527  004B2A  6ED6               	movwf	4054,c	;volatile
  4528                           
  4529                           ; BSR set to: 0
  4530                           ;sort.c: 467: TMR0ON = 1;
  4531  004B2C  8ED5               	bsf	4053,7,c	;volatile
  4532                           
  4533                           ; BSR set to: 0
  4534  004B2E  0012               	return		;funcret
  4535  004B30                     __end_of_initSortTimer:
  4536                           	opt stack 0
  4537                           tblptru	equ	0xFF8
  4538                           tblptrh	equ	0xFF7
  4539                           tblptrl	equ	0xFF6
  4540                           tablat	equ	0xFF5
  4541                           prodh	equ	0xFF4
  4542                           prodl	equ	0xFF3
  4543                           postinc0	equ	0xFEE
  4544                           wreg	equ	0xFE8
  4545                           postdec1	equ	0xFE5
  4546                           fsr1l	equ	0xFE1
  4547                           indf2	equ	0xFDF
  4548                           postinc2	equ	0xFDE
  4549                           postdec2	equ	0xFDD
  4550                           fsr2h	equ	0xFDA
  4551                           fsr2l	equ	0xFD9
  4552                           status	equ	0xFD8
  4553                           
  4554 ;; *************** function _initGlobalVars *****************
  4555 ;; Defined at:
  4556 ;;		line 417 in file "sort.c"
  4557 ;; Parameters:    Size  Location     Type
  4558 ;;		None
  4559 ;; Auto vars:     Size  Location     Type
  4560 ;;		None
  4561 ;; Return value:  Size  Location     Type
  4562 ;;                  1    wreg      void 
  4563 ;; Registers used:
  4564 ;;		wreg, status,2
  4565 ;; Tracked objects:
  4566 ;;		On entry : 0/0
  4567 ;;		On exit  : 0/0
  4568 ;;		Unchanged: 0/0
  4569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4574 ;;Total ram usage:        0 bytes
  4575 ;; Hardware stack levels used:    1
  4576 ;; Hardware stack levels required when called:    7
  4577 ;; This function calls:
  4578 ;;		Nothing
  4579 ;; This function is called by:
  4580 ;;		_Loading
  4581 ;; This function uses a non-reentrant model
  4582 ;;
  4583                           
  4584                           	psect	text4
  4585  00484C                     __ptext4:
  4586                           	opt stack 0
  4587  00484C                     _initGlobalVars:
  4588                           	opt stack 21
  4589                           
  4590                           ;sort.c: 419: first = 0;
  4591                           
  4592                           ; BSR set to: 0
  4593                           ;incstack = 0
  4594  00484C  0E00               	movlw	0
  4595  00484E  0101               	movlb	1	; () banked
  4596  004850  6F38               	movwf	(_first+1)& (0+255),b
  4597  004852  0E00               	movlw	0
  4598  004854  6F37               	movwf	_first& (0+255),b
  4599                           
  4600                           ;sort.c: 422: f_loadingNewCan = 0;
  4601  004856  0E00               	movlw	0
  4602  004858  0100               	movlb	0	; () banked
  4603  00485A  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4604  00485C  0E00               	movlw	0
  4605  00485E  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  4606                           
  4607                           ;sort.c: 423: f_lastCan = 0;
  4608  004860  0E00               	movlw	0
  4609  004862  0100               	movlb	0	; () banked
  4610  004864  6FED               	movwf	(_f_lastCan+1)& (0+255),b
  4611  004866  0E00               	movlw	0
  4612  004868  6FEC               	movwf	_f_lastCan& (0+255),b
  4613                           
  4614                           ;sort.c: 424: f_ID_receive = 1;
  4615  00486A  0E00               	movlw	0
  4616  00486C  0101               	movlb	1	; () banked
  4617  00486E  6F2E               	movwf	(_f_ID_receive+1)& (0+255),b
  4618  004870  0E01               	movlw	1
  4619  004872  6F2D               	movwf	_f_ID_receive& (0+255),b
  4620                           
  4621                           ;sort.c: 425: f_can_coming_to_ID = 0;
  4622  004874  0E00               	movlw	0
  4623  004876  0101               	movlb	1	; () banked
  4624  004878  6F30               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4625  00487A  0E00               	movlw	0
  4626  00487C  6F2F               	movwf	_f_can_coming_to_ID& (0+255),b
  4627                           
  4628                           ;sort.c: 426: f_can_coming_to_distribution = 0;
  4629  00487E  0E00               	movlw	0
  4630  004880  0101               	movlb	1	; () banked
  4631  004882  6F32               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4632  004884  0E00               	movlw	0
  4633  004886  6F31               	movwf	_f_can_coming_to_distribution& (0+255),b
  4634                           
  4635                           ;sort.c: 427: f_can_distributed = 1;
  4636  004888  0E00               	movlw	0
  4637  00488A  0101               	movlb	1	; () banked
  4638  00488C  6F34               	movwf	(_f_can_distributed+1)& (0+255),b
  4639  00488E  0E01               	movlw	1
  4640  004890  6F33               	movwf	_f_can_distributed& (0+255),b
  4641                           
  4642                           ;sort.c: 428: f_most_recent_sort_time = 0;
  4643  004892  0E00               	movlw	0
  4644  004894  0101               	movlb	1	; () banked
  4645  004896  6F36               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4646  004898  0E00               	movlw	0
  4647  00489A  6F35               	movwf	_f_most_recent_sort_time& (0+255),b
  4648                           
  4649                           ;sort.c: 431: count_total = 0;
  4650  00489C  0E00               	movlw	0
  4651  00489E  0100               	movlb	0	; () banked
  4652  0048A0  6FFF               	movwf	(_count_total+1)& (0+255),b
  4653  0048A2  0E00               	movlw	0
  4654  0048A4  6FFE               	movwf	_count_total& (0+255),b
  4655                           
  4656                           ;sort.c: 432: count_pop_no_tab = 0;
  4657  0048A6  0E00               	movlw	0
  4658  0048A8  0101               	movlb	1	; () banked
  4659  0048AA  6F28               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4660  0048AC  0E00               	movlw	0
  4661  0048AE  6F27               	movwf	_count_pop_no_tab& (0+255),b
  4662                           
  4663                           ;sort.c: 433: count_pop_w_tab = 0;
  4664  0048B0  0E00               	movlw	0
  4665  0048B2  0101               	movlb	1	; () banked
  4666  0048B4  6F2A               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4667  0048B6  0E00               	movlw	0
  4668  0048B8  6F29               	movwf	_count_pop_w_tab& (0+255),b
  4669                           
  4670                           ;sort.c: 434: count_can_w_lab = 0;
  4671  0048BA  0E00               	movlw	0
  4672  0048BC  0101               	movlb	1	; () banked
  4673  0048BE  6F26               	movwf	(_count_can_w_lab+1)& (0+255),b
  4674  0048C0  0E00               	movlw	0
  4675  0048C2  6F25               	movwf	_count_can_w_lab& (0+255),b
  4676                           
  4677                           ;sort.c: 435: count_can_no_lab = 0;
  4678  0048C4  0E00               	movlw	0
  4679  0048C6  0101               	movlb	1	; () banked
  4680  0048C8  6F24               	movwf	(_count_can_no_lab+1)& (0+255),b
  4681  0048CA  0E00               	movlw	0
  4682  0048CC  6F23               	movwf	_count_can_no_lab& (0+255),b
  4683                           
  4684                           ;sort.c: 438: most_recent_sort_time = 999;
  4685  0048CE  0E03               	movlw	3
  4686  0048D0  0101               	movlb	1	; () banked
  4687  0048D2  6F46               	movwf	(_most_recent_sort_time+1)& (0+255),b
  4688  0048D4  0EE7               	movlw	231
  4689  0048D6  6F45               	movwf	_most_recent_sort_time& (0+255),b
  4690                           
  4691                           ;sort.c: 441: servo_timer_counter = 0;
  4692  0048D8  0E00               	movlw	0
  4693  0048DA  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
  4694  0048DC  0E00               	movlw	0
  4695  0048DE  6E6D               	movwf	_servo_timer_counter,c	;volatile
  4696                           
  4697                           ;sort.c: 442: servo_timer_target = 9999;
  4698  0048E0  0E27               	movlw	39
  4699  0048E2  6E70               	movwf	_servo_timer_target+1,c	;volatile
  4700  0048E4  0E0F               	movlw	15
  4701  0048E6  6E6F               	movwf	_servo_timer_target,c	;volatile
  4702                           
  4703                           ;sort.c: 443: timer2_counter = 0;
  4704  0048E8  0E00               	movlw	0
  4705  0048EA  6E74               	movwf	_timer2_counter+1,c	;volatile
  4706  0048EC  0E00               	movlw	0
  4707  0048EE  6E73               	movwf	_timer2_counter,c	;volatile
  4708                           
  4709                           ;sort.c: 444: f_arm_position = 0;
  4710  0048F0  0E00               	movlw	0
  4711  0048F2  0100               	movlb	0	; () banked
  4712  0048F4  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  4713  0048F6  0E00               	movlw	0
  4714  0048F8  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  4715                           
  4716                           ; BSR set to: 0
  4717                           ;sort.c: 445: pan_servo_state = -1;
  4718  0048FA  686B               	setf	_pan_servo_state,c	;volatile
  4719  0048FC  686C               	setf	_pan_servo_state+1,c	;volatile
  4720                           
  4721                           ; BSR set to: 0
  4722                           ;sort.c: 446: tilt_servo_state = -1;
  4723  0048FE  6871               	setf	_tilt_servo_state,c	;volatile
  4724  004900  6872               	setf	_tilt_servo_state+1,c	;volatile
  4725                           
  4726                           ;sort.c: 447: f_panning_to_bin = 0;
  4727  004902  0E00               	movlw	0
  4728  004904  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
  4729  004906  0E00               	movlw	0
  4730  004908  6E69               	movwf	_f_panning_to_bin,c	;volatile
  4731                           
  4732                           ; BSR set to: 0
  4733  00490A  0012               	return		;funcret
  4734  00490C                     __end_of_initGlobalVars:
  4735                           	opt stack 0
  4736                           tblptru	equ	0xFF8
  4737                           tblptrh	equ	0xFF7
  4738                           tblptrl	equ	0xFF6
  4739                           tablat	equ	0xFF5
  4740                           prodh	equ	0xFF4
  4741                           prodl	equ	0xFF3
  4742                           postinc0	equ	0xFEE
  4743                           wreg	equ	0xFE8
  4744                           postdec1	equ	0xFE5
  4745                           fsr1l	equ	0xFE1
  4746                           indf2	equ	0xFDF
  4747                           postinc2	equ	0xFDE
  4748                           postdec2	equ	0xFDD
  4749                           fsr2h	equ	0xFDA
  4750                           fsr2l	equ	0xFD9
  4751                           status	equ	0xFD8
  4752                           
  4753 ;; *************** function _getMAG *****************
  4754 ;; Defined at:
  4755 ;;		line 551 in file "sort.c"
  4756 ;; Parameters:    Size  Location     Type
  4757 ;;		None
  4758 ;; Auto vars:     Size  Location     Type
  4759 ;;		None
  4760 ;; Return value:  Size  Location     Type
  4761 ;;                  1    wreg      void 
  4762 ;; Registers used:
  4763 ;;		wreg, status,2, status,0, cstack
  4764 ;; Tracked objects:
  4765 ;;		On entry : 0/0
  4766 ;;		On exit  : 0/0
  4767 ;;		Unchanged: 0/0
  4768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4771 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4772 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4773 ;;Total ram usage:        2 bytes
  4774 ;; Hardware stack levels used:    1
  4775 ;; Hardware stack levels required when called:    9
  4776 ;; This function calls:
  4777 ;;		_readMAG
  4778 ;; This function is called by:
  4779 ;;		_Loading
  4780 ;; This function uses a non-reentrant model
  4781 ;;
  4782                           
  4783                           	psect	text5
  4784  00569C                     __ptext5:
  4785                           	opt stack 0
  4786  00569C                     _getMAG:
  4787                           	opt stack 19
  4788                           
  4789                           ;sort.c: 552: readMAG();
  4790                           
  4791                           ; BSR set to: 0
  4792                           ;incstack = 0
  4793  00569C  EC37  F02A         	call	_readMAG	;wreg free
  4794                           
  4795                           ;sort.c: 554: if(MAG_signal==1){
  4796  0056A0  0100               	movlb	0	; () banked
  4797  0056A2  05E2               	decf	_MAG_signal& (0+255),w,b
  4798  0056A4  0100               	movlb	0	; () banked
  4799  0056A6  11E3               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4800  0056A8  A4D8               	btfss	status,2,c
  4801  0056AA  0012               	return	
  4802                           
  4803                           ; BSR set to: 0
  4804                           ;sort.c: 555: _delay((unsigned long)((500)*(32000000/4000.0)));
  4805  0056AC  0E15               	movlw	21
  4806  0056AE  0100               	movlb	0	; () banked
  4807  0056B0  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4808  0056B2  0E4B               	movlw	75
  4809  0056B4  0100               	movlb	0	; () banked
  4810  0056B6  6F86               	movwf	??_getMAG& (0+255),b
  4811  0056B8  0EBE               	movlw	190
  4812  0056BA                     u10167:
  4813  0056BA  2EE8               	decfsz	wreg,f,c
  4814  0056BC  D7FE               	bra	u10167
  4815  0056BE  2F86               	decfsz	??_getMAG& (0+255),f,b
  4816  0056C0  D7FC               	bra	u10167
  4817  0056C2  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4818  0056C4  D7FA               	bra	u10167
  4819  0056C6  F000               	nop	
  4820                           
  4821                           ;sort.c: 556: readMAG();
  4822  0056C8  EC37  F02A         	call	_readMAG	;wreg free
  4823  0056CC  0012               	return	
  4824  0056CE                     __end_of_getMAG:
  4825                           	opt stack 0
  4826                           tblptru	equ	0xFF8
  4827                           tblptrh	equ	0xFF7
  4828                           tblptrl	equ	0xFF6
  4829                           tablat	equ	0xFF5
  4830                           prodh	equ	0xFF4
  4831                           prodl	equ	0xFF3
  4832                           postinc0	equ	0xFEE
  4833                           wreg	equ	0xFE8
  4834                           postdec1	equ	0xFE5
  4835                           fsr1l	equ	0xFE1
  4836                           indf2	equ	0xFDF
  4837                           postinc2	equ	0xFDE
  4838                           postdec2	equ	0xFDD
  4839                           fsr2h	equ	0xFDA
  4840                           fsr2l	equ	0xFD9
  4841                           status	equ	0xFD8
  4842                           
  4843 ;; *************** function _getIR *****************
  4844 ;; Defined at:
  4845 ;;		line 535 in file "sort.c"
  4846 ;; Parameters:    Size  Location     Type
  4847 ;;		None
  4848 ;; Auto vars:     Size  Location     Type
  4849 ;;  i               2    7[BANK0 ] int 
  4850 ;; Return value:  Size  Location     Type
  4851 ;;                  1    wreg      void 
  4852 ;; Registers used:
  4853 ;;		wreg, status,2, status,0, cstack
  4854 ;; Tracked objects:
  4855 ;;		On entry : 0/0
  4856 ;;		On exit  : 0/0
  4857 ;;		Unchanged: 0/0
  4858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4860 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4861 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4862 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4863 ;;Total ram usage:        3 bytes
  4864 ;; Hardware stack levels used:    1
  4865 ;; Hardware stack levels required when called:    9
  4866 ;; This function calls:
  4867 ;;		_readIR
  4868 ;; This function is called by:
  4869 ;;		_Loading
  4870 ;; This function uses a non-reentrant model
  4871 ;;
  4872                           
  4873                           	psect	text6
  4874  004ED6                     __ptext6:
  4875                           	opt stack 0
  4876  004ED6                     _getIR:
  4877                           	opt stack 19
  4878                           
  4879                           ;sort.c: 536: readIR();
  4880                           
  4881                           ;incstack = 0
  4882  004ED6  ECEB  F029         	call	_readIR	;wreg free
  4883                           
  4884                           ;sort.c: 537: for(int i = 0; i < 150; i++){
  4885  004EDA  0E00               	movlw	0
  4886  004EDC  0100               	movlb	0	; () banked
  4887  004EDE  6F88               	movwf	(getIR@i+1)& (0+255),b
  4888  004EE0  0E00               	movlw	0
  4889  004EE2  6F87               	movwf	getIR@i& (0+255),b
  4890  004EE4                     l7472:
  4891                           
  4892                           ; BSR set to: 0
  4893  004EE4  0100               	movlb	0	; () banked
  4894  004EE6  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4895  004EE8  D008               	goto	l7476
  4896  004EEA  0100               	movlb	0	; () banked
  4897  004EEC  5188               	movf	(getIR@i+1)& (0+255),w,b
  4898  004EEE  E11A               	bnz	l7488
  4899  004EF0  0E96               	movlw	150
  4900  004EF2  0100               	movlb	0	; () banked
  4901  004EF4  5D87               	subwf	getIR@i& (0+255),w,b
  4902  004EF6  B0D8               	btfsc	status,0,c
  4903  004EF8  D015               	goto	l7488
  4904  004EFA                     l7476:
  4905                           
  4906                           ; BSR set to: 0
  4907                           ;sort.c: 538: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4908  004EFA  0E06               	movlw	6
  4909  004EFC  0100               	movlb	0	; () banked
  4910  004EFE  6F86               	movwf	??_getIR& (0+255),b
  4911  004F00  0E30               	movlw	48
  4912  004F02                     u10177:
  4913  004F02  2EE8               	decfsz	wreg,f,c
  4914  004F04  D7FE               	bra	u10177
  4915  004F06  2F86               	decfsz	??_getIR& (0+255),f,b
  4916  004F08  D7FC               	bra	u10177
  4917  004F0A  F000               	nop	
  4918                           
  4919                           ;sort.c: 539: readIR();
  4920  004F0C  ECEB  F029         	call	_readIR	;wreg free
  4921                           
  4922                           ;sort.c: 540: if(!IR_signal){
  4923  004F10  0100               	movlb	0	; () banked
  4924  004F12  51E0               	movf	_IR_signal& (0+255),w,b
  4925  004F14  0100               	movlb	0	; () banked
  4926  004F16  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4927  004F18  B4D8               	btfsc	status,2,c
  4928  004F1A  D004               	goto	l7488
  4929                           
  4930                           ; BSR set to: 0
  4931                           
  4932                           ; BSR set to: 0
  4933                           
  4934                           ; BSR set to: 0
  4935                           ;sort.c: 541: break;
  4936  004F1C  0100               	movlb	0	; () banked
  4937  004F1E  4B87               	infsnz	getIR@i& (0+255),f,b
  4938  004F20  2B88               	incf	(getIR@i+1)& (0+255),f,b
  4939  004F22  D7E0               	goto	l7472
  4940  004F24                     l7488:
  4941                           
  4942                           ; BSR set to: 0
  4943                           ;sort.c: 542: }
  4944                           ;sort.c: 543: }
  4945                           ;sort.c: 544: if(IR_signal==1){
  4946  004F24  0100               	movlb	0	; () banked
  4947  004F26  05E0               	decf	_IR_signal& (0+255),w,b
  4948  004F28  0100               	movlb	0	; () banked
  4949  004F2A  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4950  004F2C  A4D8               	btfss	status,2,c
  4951  004F2E  D006               	goto	l7492
  4952                           
  4953                           ; BSR set to: 0
  4954                           ;sort.c: 545: f_loadingNewCan = 1;
  4955  004F30  0E00               	movlw	0
  4956  004F32  0100               	movlb	0	; () banked
  4957  004F34  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4958  004F36  0E01               	movlw	1
  4959  004F38  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  4960                           
  4961                           ;sort.c: 546: }
  4962  004F3A  0012               	return	
  4963  004F3C                     l7492:
  4964                           
  4965                           ; BSR set to: 0
  4966                           ;sort.c: 547: else{
  4967                           ;sort.c: 548: f_loadingNewCan = 0;
  4968  004F3C  0E00               	movlw	0
  4969  004F3E  0100               	movlb	0	; () banked
  4970  004F40  6FEF               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4971  004F42  0E00               	movlw	0
  4972  004F44  6FEE               	movwf	_f_loadingNewCan& (0+255),b
  4973  004F46  0012               	return	
  4974  004F48                     __end_of_getIR:
  4975                           	opt stack 0
  4976                           tblptru	equ	0xFF8
  4977                           tblptrh	equ	0xFF7
  4978                           tblptrl	equ	0xFF6
  4979                           tablat	equ	0xFF5
  4980                           prodh	equ	0xFF4
  4981                           prodl	equ	0xFF3
  4982                           postinc0	equ	0xFEE
  4983                           wreg	equ	0xFE8
  4984                           postdec1	equ	0xFE5
  4985                           fsr1l	equ	0xFE1
  4986                           indf2	equ	0xFDF
  4987                           postinc2	equ	0xFDE
  4988                           postdec2	equ	0xFDD
  4989                           fsr2h	equ	0xFDA
  4990                           fsr2l	equ	0xFD9
  4991                           status	equ	0xFD8
  4992                           
  4993 ;; *************** function _readIR *****************
  4994 ;; Defined at:
  4995 ;;		line 23 in file "ADCFunctionality.c"
  4996 ;; Parameters:    Size  Location     Type
  4997 ;;		None
  4998 ;; Auto vars:     Size  Location     Type
  4999 ;;  res             2    4[BANK0 ] int 
  5000 ;; Return value:  Size  Location     Type
  5001 ;;                  1    wreg      void 
  5002 ;; Registers used:
  5003 ;;		wreg, status,2, status,0, cstack
  5004 ;; Tracked objects:
  5005 ;;		On entry : 0/0
  5006 ;;		On exit  : 0/0
  5007 ;;		Unchanged: 0/0
  5008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5010 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5011 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5012 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5013 ;;Total ram usage:        4 bytes
  5014 ;; Hardware stack levels used:    1
  5015 ;; Hardware stack levels required when called:    8
  5016 ;; This function calls:
  5017 ;;		_readADC
  5018 ;; This function is called by:
  5019 ;;		_Loading
  5020 ;;		_getIR
  5021 ;; This function uses a non-reentrant model
  5022 ;;
  5023                           
  5024                           	psect	text7
  5025  0053D6                     __ptext7:
  5026                           	opt stack 0
  5027  0053D6                     _readIR:
  5028                           	opt stack 20
  5029                           
  5030                           ;ADCFunctionality.c: 24: readADC(0);
  5031                           
  5032                           ; BSR set to: 0
  5033                           ;incstack = 0
  5034  0053D6  0E00               	movlw	0
  5035  0053D8  ECB4  F02C         	call	_readADC
  5036                           
  5037                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  5038  0053DC  50C3               	movf	4035,w,c	;volatile
  5039  0053DE  CFC4 F082          	movff	4036,??_readIR	;volatile
  5040  0053E2  0100               	movlb	0	; () banked
  5041  0053E4  6B83               	clrf	(??_readIR+1)& (0+255),b
  5042  0053E6  C082  F083         	movff	??_readIR,??_readIR+1
  5043  0053EA  0100               	movlb	0	; () banked
  5044  0053EC  6B82               	clrf	??_readIR& (0+255),b
  5045  0053EE  0100               	movlb	0	; () banked
  5046  0053F0  1182               	iorwf	??_readIR& (0+255),w,b
  5047  0053F2  0100               	movlb	0	; () banked
  5048  0053F4  6F84               	movwf	readIR@res& (0+255),b
  5049  0053F6  0100               	movlb	0	; () banked
  5050  0053F8  5183               	movf	(??_readIR+1)& (0+255),w,b
  5051  0053FA  0100               	movlb	0	; () banked
  5052  0053FC  6F85               	movwf	(readIR@res+1)& (0+255),b
  5053                           
  5054                           ; BSR set to: 0
  5055                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  5056  0053FE  0100               	movlb	0	; () banked
  5057  005400  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  5058  005402  D00A               	goto	u5200
  5059  005404  0E21               	movlw	33
  5060  005406  0100               	movlb	0	; () banked
  5061  005408  5D84               	subwf	readIR@res& (0+255),w,b
  5062  00540A  0E03               	movlw	3
  5063  00540C  0100               	movlb	0	; () banked
  5064  00540E  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  5065  005410  A0D8               	btfss	status,0,c
  5066  005412  D002               	goto	u5200
  5067  005414  0E01               	movlw	1
  5068  005416  D001               	goto	u5210
  5069  005418                     u5200:
  5070  005418  0E00               	movlw	0
  5071  00541A                     u5210:
  5072  00541A  0100               	movlb	0	; () banked
  5073  00541C  6FE0               	movwf	_IR_signal& (0+255),b
  5074  00541E  6BE1               	clrf	(_IR_signal+1)& (0+255),b
  5075                           
  5076                           ; BSR set to: 0
  5077  005420  0012               	return		;funcret
  5078  005422                     __end_of_readIR:
  5079                           	opt stack 0
  5080                           tblptru	equ	0xFF8
  5081                           tblptrh	equ	0xFF7
  5082                           tblptrl	equ	0xFF6
  5083                           tablat	equ	0xFF5
  5084                           prodh	equ	0xFF4
  5085                           prodl	equ	0xFF3
  5086                           postinc0	equ	0xFEE
  5087                           wreg	equ	0xFE8
  5088                           postdec1	equ	0xFE5
  5089                           fsr1l	equ	0xFE1
  5090                           indf2	equ	0xFDF
  5091                           postinc2	equ	0xFDE
  5092                           postdec2	equ	0xFDD
  5093                           fsr2h	equ	0xFDA
  5094                           fsr2l	equ	0xFD9
  5095                           status	equ	0xFD8
  5096                           
  5097 ;; *************** function _ID *****************
  5098 ;; Defined at:
  5099 ;;		line 278 in file "sort.c"
  5100 ;; Parameters:    Size  Location     Type
  5101 ;;		None
  5102 ;; Auto vars:     Size  Location     Type
  5103 ;;  i               2   57[BANK0 ] int 
  5104 ;;  i               2   53[BANK0 ] int 
  5105 ;;  i               2   55[BANK0 ] int 
  5106 ;;  res3            2   45[BANK0 ] int 
  5107 ;;  i               2   51[BANK0 ] int 
  5108 ;;  i               2   49[BANK0 ] int 
  5109 ;;  n               2   64[BANK0 ] const int 
  5110 ;;  res2            2   62[BANK0 ] int 
  5111 ;;  res1            2   60[BANK0 ] int 
  5112 ;;  time            1   59[BANK0 ] const unsigned char 
  5113 ;; Return value:  Size  Location     Type
  5114 ;;                  1    wreg      void 
  5115 ;; Registers used:
  5116 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5117 ;; Tracked objects:
  5118 ;;		On entry : 0/0
  5119 ;;		On exit  : 0/0
  5120 ;;		Unchanged: 0/0
  5121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5123 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5124 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5125 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5126 ;;Total ram usage:       23 bytes
  5127 ;; Hardware stack levels used:    1
  5128 ;; Hardware stack levels required when called:   10
  5129 ;; This function calls:
  5130 ;;		___awdiv
  5131 ;;		___awtoft
  5132 ;;		___ftge
  5133 ;;		_delay_ms
  5134 ;;		_lcdInst
  5135 ;;		_printf
  5136 ;;		_readCOND
  5137 ;; This function is called by:
  5138 ;;		_sort
  5139 ;; This function uses a non-reentrant model
  5140 ;;
  5141                           
  5142                           	psect	text8
  5143  0016C4                     __ptext8:
  5144                           	opt stack 0
  5145  0016C4                     _ID:
  5146                           	opt stack 19
  5147                           
  5148                           ;sort.c: 279: if(f_can_coming_to_ID){
  5149                           
  5150                           ; BSR set to: 0
  5151                           ;incstack = 0
  5152  0016C4  0101               	movlb	1	; () banked
  5153  0016C6  512F               	movf	_f_can_coming_to_ID& (0+255),w,b
  5154  0016C8  0101               	movlb	1	; () banked
  5155  0016CA  1130               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  5156  0016CC  B4D8               	btfsc	status,2,c
  5157  0016CE  0012               	return	
  5158                           
  5159                           ; BSR set to: 1
  5160                           ;sort.c: 281: _delay((unsigned long)((1000)*(32000000/4000.0)));
  5161  0016D0  0E29               	movlw	41
  5162  0016D2  0100               	movlb	0	; () banked
  5163  0016D4  6FAC               	movwf	(??_ID+1)& (0+255),b
  5164  0016D6  0E96               	movlw	150
  5165  0016D8  0100               	movlb	0	; () banked
  5166  0016DA  6FAB               	movwf	??_ID& (0+255),b
  5167  0016DC  0E7F               	movlw	127
  5168  0016DE                     u10187:
  5169  0016DE  2EE8               	decfsz	wreg,f,c
  5170  0016E0  D7FE               	bra	u10187
  5171  0016E2  2FAB               	decfsz	??_ID& (0+255),f,b
  5172  0016E4  D7FC               	bra	u10187
  5173  0016E6  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5174  0016E8  D7FA               	bra	u10187
  5175                           
  5176                           ;sort.c: 283: f_arm_position = 0;
  5177  0016EA  0E00               	movlw	0
  5178  0016EC  0100               	movlb	0	; () banked
  5179  0016EE  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  5180  0016F0  0E00               	movlw	0
  5181  0016F2  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
  5182                           
  5183                           ; BSR set to: 0
  5184                           ;sort.c: 285: LATAbits.LATA3 = 1;
  5185  0016F4  8689               	bsf	3977,3,c	;volatile
  5186                           
  5187                           ; BSR set to: 0
  5188                           ;sort.c: 288: const int n = 10;
  5189  0016F6  0E00               	movlw	0
  5190  0016F8  0100               	movlb	0	; () banked
  5191  0016FA  6FC1               	movwf	(ID@n+1)& (0+255),b
  5192  0016FC  0E0A               	movlw	10
  5193  0016FE  6FC0               	movwf	ID@n& (0+255),b
  5194                           
  5195                           ; BSR set to: 0
  5196                           ;sort.c: 289: const unsigned char time = (600 / n);
  5197  001700  0E02               	movlw	2
  5198  001702  0100               	movlb	0	; () banked
  5199  001704  6F87               	movwf	(___awdiv@dividend+1)& (0+255),b
  5200  001706  0E58               	movlw	88
  5201  001708  6F86               	movwf	___awdiv@dividend& (0+255),b
  5202  00170A  C0C0  F088         	movff	ID@n,___awdiv@divisor
  5203  00170E  C0C1  F089         	movff	ID@n+1,___awdiv@divisor+1
  5204  001712  EC86  F024         	call	___awdiv	;wreg free
  5205  001716  0100               	movlb	0	; () banked
  5206  001718  5186               	movf	?___awdiv& (0+255),w,b
  5207  00171A  0100               	movlb	0	; () banked
  5208  00171C  6FBB               	movwf	ID@time& (0+255),b
  5209                           
  5210                           ; BSR set to: 0
  5211                           ;sort.c: 290: int res1 = 0;
  5212  00171E  0E00               	movlw	0
  5213  001720  0100               	movlb	0	; () banked
  5214  001722  6FBD               	movwf	(ID@res1+1)& (0+255),b
  5215  001724  0E00               	movlw	0
  5216  001726  6FBC               	movwf	ID@res1& (0+255),b
  5217                           
  5218                           ; BSR set to: 0
  5219                           ;sort.c: 291: int res2 = 0;
  5220  001728  0E00               	movlw	0
  5221  00172A  0100               	movlb	0	; () banked
  5222  00172C  6FBF               	movwf	(ID@res2+1)& (0+255),b
  5223  00172E  0E00               	movlw	0
  5224  001730  6FBE               	movwf	ID@res2& (0+255),b
  5225                           
  5226                           ; BSR set to: 0
  5227                           ;sort.c: 292: for(int i = 0; i<n; i++){
  5228  001732  0E00               	movlw	0
  5229  001734  0100               	movlb	0	; () banked
  5230  001736  6FB2               	movwf	(ID@i+1)& (0+255),b
  5231  001738  0E00               	movlw	0
  5232  00173A  6FB1               	movwf	ID@i& (0+255),b
  5233  00173C                     l8098:
  5234                           
  5235                           ; BSR set to: 0
  5236  00173C  0100               	movlb	0	; () banked
  5237  00173E  51C0               	movf	ID@n& (0+255),w,b
  5238  001740  0100               	movlb	0	; () banked
  5239  001742  5DB1               	subwf	ID@i& (0+255),w,b
  5240  001744  0100               	movlb	0	; () banked
  5241  001746  51B2               	movf	(ID@i+1)& (0+255),w,b
  5242  001748  0A80               	xorlw	128
  5243  00174A  0100               	movlb	0	; () banked
  5244  00174C  6FAB               	movwf	??_ID& (0+255),b
  5245  00174E  0100               	movlb	0	; () banked
  5246  001750  51C1               	movf	(ID@n+1)& (0+255),w,b
  5247  001752  0A80               	xorlw	128
  5248  001754  0100               	movlb	0	; () banked
  5249  001756  59AB               	subwfb	??_ID& (0+255),w,b
  5250  001758  B0D8               	btfsc	status,0,c
  5251  00175A  D012               	goto	l853
  5252                           
  5253                           ; BSR set to: 0
  5254                           ;sort.c: 293: delay_ms(time);
  5255                           
  5256                           ; BSR set to: 0
  5257                           
  5258                           ; BSR set to: 0
  5259  00175C  0100               	movlb	0	; () banked
  5260  00175E  51BB               	movf	ID@time& (0+255),w,b
  5261  001760  ECDF  F02C         	call	_delay_ms
  5262                           
  5263                           ;sort.c: 294: readCOND();
  5264  001764  EC11  F02A         	call	_readCOND	;wreg free
  5265                           
  5266                           ;sort.c: 295: res1 += COND_signal;
  5267  001768  0100               	movlb	0	; () banked
  5268  00176A  51DE               	movf	_COND_signal& (0+255),w,b
  5269  00176C  0100               	movlb	0	; () banked
  5270  00176E  27BC               	addwf	ID@res1& (0+255),f,b
  5271  001770  0100               	movlb	0	; () banked
  5272  001772  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5273  001774  0100               	movlb	0	; () banked
  5274  001776  23BD               	addwfc	(ID@res1+1)& (0+255),f,b
  5275                           
  5276                           ; BSR set to: 0
  5277  001778  0100               	movlb	0	; () banked
  5278  00177A  4BB1               	infsnz	ID@i& (0+255),f,b
  5279  00177C  2BB2               	incf	(ID@i+1)& (0+255),f,b
  5280  00177E  D7DE               	goto	l8098
  5281  001780                     l853:
  5282                           
  5283                           ; BSR set to: 0
  5284                           ;sort.c: 296: }
  5285                           ;sort.c: 297: LATAbits.LATA3 = 0;
  5286  001780  9689               	bcf	3977,3,c	;volatile
  5287                           
  5288                           ; BSR set to: 0
  5289                           ;sort.c: 298: _delay((unsigned long)((200)*(32000000/4000.0)));
  5290  001782  0E09               	movlw	9
  5291  001784  0100               	movlb	0	; () banked
  5292  001786  6FAC               	movwf	(??_ID+1)& (0+255),b
  5293  001788  0E1E               	movlw	30
  5294  00178A  0100               	movlb	0	; () banked
  5295  00178C  6FAB               	movwf	??_ID& (0+255),b
  5296  00178E  0EE4               	movlw	228
  5297  001790                     u10197:
  5298  001790  2EE8               	decfsz	wreg,f,c
  5299  001792  D7FE               	bra	u10197
  5300  001794  2FAB               	decfsz	??_ID& (0+255),f,b
  5301  001796  D7FC               	bra	u10197
  5302  001798  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5303  00179A  D7FA               	bra	u10197
  5304  00179C  F000               	nop	
  5305                           
  5306                           ;sort.c: 299: LATAbits.LATA3 = 1;
  5307  00179E  8689               	bsf	3977,3,c	;volatile
  5308                           
  5309                           ;sort.c: 300: for(int i = 0; i<n; i++){
  5310  0017A0  0E00               	movlw	0
  5311  0017A2  0100               	movlb	0	; () banked
  5312  0017A4  6FB4               	movwf	(ID@i_1144+1)& (0+255),b
  5313  0017A6  0E00               	movlw	0
  5314  0017A8  6FB3               	movwf	ID@i_1144& (0+255),b
  5315  0017AA                     l8116:
  5316                           
  5317                           ; BSR set to: 0
  5318  0017AA  0100               	movlb	0	; () banked
  5319  0017AC  51C0               	movf	ID@n& (0+255),w,b
  5320  0017AE  0100               	movlb	0	; () banked
  5321  0017B0  5DB3               	subwf	ID@i_1144& (0+255),w,b
  5322  0017B2  0100               	movlb	0	; () banked
  5323  0017B4  51B4               	movf	(ID@i_1144+1)& (0+255),w,b
  5324  0017B6  0A80               	xorlw	128
  5325  0017B8  0100               	movlb	0	; () banked
  5326  0017BA  6FAB               	movwf	??_ID& (0+255),b
  5327  0017BC  0100               	movlb	0	; () banked
  5328  0017BE  51C1               	movf	(ID@n+1)& (0+255),w,b
  5329  0017C0  0A80               	xorlw	128
  5330  0017C2  0100               	movlb	0	; () banked
  5331  0017C4  59AB               	subwfb	??_ID& (0+255),w,b
  5332  0017C6  B0D8               	btfsc	status,0,c
  5333  0017C8  D012               	goto	l8128
  5334                           
  5335                           ; BSR set to: 0
  5336                           ;sort.c: 301: delay_ms(time);
  5337                           
  5338                           ; BSR set to: 0
  5339                           
  5340                           ; BSR set to: 0
  5341  0017CA  0100               	movlb	0	; () banked
  5342  0017CC  51BB               	movf	ID@time& (0+255),w,b
  5343  0017CE  ECDF  F02C         	call	_delay_ms
  5344                           
  5345                           ;sort.c: 302: readCOND();
  5346  0017D2  EC11  F02A         	call	_readCOND	;wreg free
  5347                           
  5348                           ;sort.c: 303: res2 += COND_signal;
  5349  0017D6  0100               	movlb	0	; () banked
  5350  0017D8  51DE               	movf	_COND_signal& (0+255),w,b
  5351  0017DA  0100               	movlb	0	; () banked
  5352  0017DC  27BE               	addwf	ID@res2& (0+255),f,b
  5353  0017DE  0100               	movlb	0	; () banked
  5354  0017E0  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5355  0017E2  0100               	movlb	0	; () banked
  5356  0017E4  23BF               	addwfc	(ID@res2+1)& (0+255),f,b
  5357                           
  5358                           ; BSR set to: 0
  5359  0017E6  0100               	movlb	0	; () banked
  5360  0017E8  4BB3               	infsnz	ID@i_1144& (0+255),f,b
  5361  0017EA  2BB4               	incf	(ID@i_1144+1)& (0+255),f,b
  5362  0017EC  D7DE               	goto	l8116
  5363  0017EE                     l8128:
  5364                           
  5365                           ; BSR set to: 0
  5366                           ;sort.c: 304: }
  5367                           ;sort.c: 305: res1 = ((res1 / n) > 0.3) ? 1 : 0;
  5368  0017EE  0E9A               	movlw	154
  5369  0017F0  0100               	movlb	0	; () banked
  5370  0017F2  6F92               	movwf	___ftge@ff1& (0+255),b
  5371  0017F4  0E99               	movlw	153
  5372  0017F6  0100               	movlb	0	; () banked
  5373  0017F8  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5374  0017FA  0E3E               	movlw	62
  5375  0017FC  0100               	movlb	0	; () banked
  5376  0017FE  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5377  001800  C0C0  F088         	movff	ID@n,___awdiv@divisor
  5378  001804  C0C1  F089         	movff	ID@n+1,___awdiv@divisor+1
  5379  001808  C0BC  F086         	movff	ID@res1,___awdiv@dividend
  5380  00180C  C0BD  F087         	movff	ID@res1+1,___awdiv@dividend+1
  5381  001810  EC86  F024         	call	___awdiv	;wreg free
  5382  001814  C086  F08E         	movff	?___awdiv,___awtoft@c
  5383  001818  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5384  00181C  EC80  F02A         	call	___awtoft	;wreg free
  5385  001820  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5386  001824  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5387  001828  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5388  00182C  ECC2  F023         	call	___ftge	;wreg free
  5389  001830  0100               	movlb	0	; () banked
  5390  001832  B0D8               	btfsc	status,0,c
  5391  001834  D002               	goto	u6890
  5392  001836  0E01               	movlw	1
  5393  001838  D001               	goto	u6900
  5394  00183A                     u6890:
  5395  00183A  0E00               	movlw	0
  5396  00183C                     u6900:
  5397  00183C  0100               	movlb	0	; () banked
  5398  00183E  6FBC               	movwf	ID@res1& (0+255),b
  5399  001840  6BBD               	clrf	(ID@res1+1)& (0+255),b
  5400                           
  5401                           ;sort.c: 306: res2 = ((res2 / n) > 0.3) ? 1 : 0;
  5402  001842  0E9A               	movlw	154
  5403  001844  0100               	movlb	0	; () banked
  5404  001846  6F92               	movwf	___ftge@ff1& (0+255),b
  5405  001848  0E99               	movlw	153
  5406  00184A  0100               	movlb	0	; () banked
  5407  00184C  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5408  00184E  0E3E               	movlw	62
  5409  001850  0100               	movlb	0	; () banked
  5410  001852  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5411  001854  C0C0  F088         	movff	ID@n,___awdiv@divisor
  5412  001858  C0C1  F089         	movff	ID@n+1,___awdiv@divisor+1
  5413  00185C  C0BE  F086         	movff	ID@res2,___awdiv@dividend
  5414  001860  C0BF  F087         	movff	ID@res2+1,___awdiv@dividend+1
  5415  001864  EC86  F024         	call	___awdiv	;wreg free
  5416  001868  C086  F08E         	movff	?___awdiv,___awtoft@c
  5417  00186C  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5418  001870  EC80  F02A         	call	___awtoft	;wreg free
  5419  001874  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5420  001878  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5421  00187C  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5422  001880  ECC2  F023         	call	___ftge	;wreg free
  5423  001884  0100               	movlb	0	; () banked
  5424  001886  B0D8               	btfsc	status,0,c
  5425  001888  D002               	goto	u6910
  5426  00188A  0E01               	movlw	1
  5427  00188C  D001               	goto	u6920
  5428  00188E                     u6910:
  5429  00188E  0E00               	movlw	0
  5430  001890                     u6920:
  5431  001890  0100               	movlb	0	; () banked
  5432  001892  6FBE               	movwf	ID@res2& (0+255),b
  5433  001894  6BBF               	clrf	(ID@res2+1)& (0+255),b
  5434                           
  5435                           ; BSR set to: 0
  5436                           ;sort.c: 309: sensor_outputs[1] = (res1 || res2);
  5437  001896  0E01               	movlw	1
  5438  001898  0100               	movlb	0	; () banked
  5439  00189A  6FAF               	movwf	_ID$1145& (0+255),b
  5440                           
  5441                           ; BSR set to: 0
  5442  00189C  0100               	movlb	0	; () banked
  5443  00189E  51BC               	movf	ID@res1& (0+255),w,b
  5444  0018A0  0100               	movlb	0	; () banked
  5445  0018A2  11BD               	iorwf	(ID@res1+1)& (0+255),w,b
  5446  0018A4  A4D8               	btfss	status,2,c
  5447  0018A6  D009               	goto	l8138
  5448                           
  5449                           ; BSR set to: 0
  5450  0018A8  0100               	movlb	0	; () banked
  5451  0018AA  51BE               	movf	ID@res2& (0+255),w,b
  5452  0018AC  0100               	movlb	0	; () banked
  5453  0018AE  11BF               	iorwf	(ID@res2+1)& (0+255),w,b
  5454  0018B0  A4D8               	btfss	status,2,c
  5455  0018B2  D003               	goto	l8138
  5456                           
  5457                           ; BSR set to: 0
  5458  0018B4  0E00               	movlw	0
  5459  0018B6  0100               	movlb	0	; () banked
  5460  0018B8  6FAF               	movwf	_ID$1145& (0+255),b
  5461  0018BA                     l8138:
  5462                           
  5463                           ; BSR set to: 0
  5464  0018BA  C0AF  F0DC         	movff	_ID$1145,_sensor_outputs+2
  5465  0018BE  0100               	movlb	0	; () banked
  5466  0018C0  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5467                           
  5468                           ; BSR set to: 0
  5469                           ;sort.c: 310: LATAbits.LATA3 = 0;
  5470  0018C2  9689               	bcf	3977,3,c	;volatile
  5471                           
  5472                           ; BSR set to: 0
  5473                           ;sort.c: 312: if(sensor_outputs[0]){
  5474  0018C4  0100               	movlb	0	; () banked
  5475  0018C6  51DA               	movf	_sensor_outputs& (0+255),w,b
  5476  0018C8  0100               	movlb	0	; () banked
  5477  0018CA  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5478  0018CC  B4D8               	btfsc	status,2,c
  5479  0018CE  D052               	goto	l8174
  5480                           
  5481                           ; BSR set to: 0
  5482                           ;sort.c: 313: _delay((unsigned long)((200)*(32000000/4000.0)));
  5483  0018D0  0E09               	movlw	9
  5484  0018D2  0100               	movlb	0	; () banked
  5485  0018D4  6FAC               	movwf	(??_ID+1)& (0+255),b
  5486  0018D6  0E1E               	movlw	30
  5487  0018D8  0100               	movlb	0	; () banked
  5488  0018DA  6FAB               	movwf	??_ID& (0+255),b
  5489  0018DC  0EE4               	movlw	228
  5490  0018DE                     u10207:
  5491  0018DE  2EE8               	decfsz	wreg,f,c
  5492  0018E0  D7FE               	bra	u10207
  5493  0018E2  2FAB               	decfsz	??_ID& (0+255),f,b
  5494  0018E4  D7FC               	bra	u10207
  5495  0018E6  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5496  0018E8  D7FA               	bra	u10207
  5497  0018EA  F000               	nop	
  5498                           
  5499                           ;sort.c: 314: LATAbits.LATA3 = 1;
  5500  0018EC  8689               	bsf	3977,3,c	;volatile
  5501                           
  5502                           ;sort.c: 315: int res3 = 0;
  5503  0018EE  0E00               	movlw	0
  5504  0018F0  0100               	movlb	0	; () banked
  5505  0018F2  6FAE               	movwf	(ID@res3+1)& (0+255),b
  5506  0018F4  0E00               	movlw	0
  5507  0018F6  6FAD               	movwf	ID@res3& (0+255),b
  5508                           
  5509                           ; BSR set to: 0
  5510                           ;sort.c: 316: for(int i = 0; i<n; i++){
  5511  0018F8  0E00               	movlw	0
  5512  0018FA  0100               	movlb	0	; () banked
  5513  0018FC  6FB6               	movwf	(ID@i_1147+1)& (0+255),b
  5514  0018FE  0E00               	movlw	0
  5515  001900  6FB5               	movwf	ID@i_1147& (0+255),b
  5516  001902                     l8152:
  5517                           
  5518                           ; BSR set to: 0
  5519  001902  0100               	movlb	0	; () banked
  5520  001904  51C0               	movf	ID@n& (0+255),w,b
  5521  001906  0100               	movlb	0	; () banked
  5522  001908  5DB5               	subwf	ID@i_1147& (0+255),w,b
  5523  00190A  0100               	movlb	0	; () banked
  5524  00190C  51B6               	movf	(ID@i_1147+1)& (0+255),w,b
  5525  00190E  0A80               	xorlw	128
  5526  001910  0100               	movlb	0	; () banked
  5527  001912  6FAB               	movwf	??_ID& (0+255),b
  5528  001914  0100               	movlb	0	; () banked
  5529  001916  51C1               	movf	(ID@n+1)& (0+255),w,b
  5530  001918  0A80               	xorlw	128
  5531  00191A  0100               	movlb	0	; () banked
  5532  00191C  59AB               	subwfb	??_ID& (0+255),w,b
  5533  00191E  B0D8               	btfsc	status,0,c
  5534  001920  D012               	goto	l860
  5535                           
  5536                           ; BSR set to: 0
  5537                           ;sort.c: 317: delay_ms(time);
  5538                           
  5539                           ; BSR set to: 0
  5540                           
  5541                           ; BSR set to: 0
  5542  001922  0100               	movlb	0	; () banked
  5543  001924  51BB               	movf	ID@time& (0+255),w,b
  5544  001926  ECDF  F02C         	call	_delay_ms
  5545                           
  5546                           ;sort.c: 318: readCOND();
  5547  00192A  EC11  F02A         	call	_readCOND	;wreg free
  5548                           
  5549                           ;sort.c: 319: res3 += COND_signal;
  5550  00192E  0100               	movlb	0	; () banked
  5551  001930  51DE               	movf	_COND_signal& (0+255),w,b
  5552  001932  0100               	movlb	0	; () banked
  5553  001934  27AD               	addwf	ID@res3& (0+255),f,b
  5554  001936  0100               	movlb	0	; () banked
  5555  001938  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5556  00193A  0100               	movlb	0	; () banked
  5557  00193C  23AE               	addwfc	(ID@res3+1)& (0+255),f,b
  5558                           
  5559                           ; BSR set to: 0
  5560  00193E  0100               	movlb	0	; () banked
  5561  001940  4BB5               	infsnz	ID@i_1147& (0+255),f,b
  5562  001942  2BB6               	incf	(ID@i_1147+1)& (0+255),f,b
  5563  001944  D7DE               	goto	l8152
  5564  001946                     l860:
  5565                           
  5566                           ; BSR set to: 0
  5567                           ;sort.c: 320: }
  5568                           ;sort.c: 321: LATAbits.LATA3 = 0;
  5569  001946  9689               	bcf	3977,3,c	;volatile
  5570                           
  5571                           ; BSR set to: 0
  5572                           ;sort.c: 322: sensor_outputs[1] = (sensor_outputs[1] || res3);
  5573  001948  0E01               	movlw	1
  5574  00194A  0100               	movlb	0	; () banked
  5575  00194C  6FB0               	movwf	_ID$1148& (0+255),b
  5576                           
  5577                           ; BSR set to: 0
  5578  00194E  0100               	movlb	0	; () banked
  5579  001950  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5580  001952  0100               	movlb	0	; () banked
  5581  001954  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5582  001956  A4D8               	btfss	status,2,c
  5583  001958  D009               	goto	l8172
  5584                           
  5585                           ; BSR set to: 0
  5586  00195A  0100               	movlb	0	; () banked
  5587  00195C  51AD               	movf	ID@res3& (0+255),w,b
  5588  00195E  0100               	movlb	0	; () banked
  5589  001960  11AE               	iorwf	(ID@res3+1)& (0+255),w,b
  5590  001962  A4D8               	btfss	status,2,c
  5591  001964  D003               	goto	l8172
  5592                           
  5593                           ; BSR set to: 0
  5594  001966  0E00               	movlw	0
  5595  001968  0100               	movlb	0	; () banked
  5596  00196A  6FB0               	movwf	_ID$1148& (0+255),b
  5597  00196C                     l8172:
  5598                           
  5599                           ; BSR set to: 0
  5600  00196C  C0B0  F0DC         	movff	_ID$1148,_sensor_outputs+2
  5601  001970  0100               	movlb	0	; () banked
  5602  001972  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5603  001974                     l8174:
  5604                           
  5605                           ; BSR set to: 0
  5606                           ;sort.c: 323: }
  5607                           ;sort.c: 331: if(!sensor_outputs[0]){
  5608  001974  0100               	movlb	0	; () banked
  5609  001976  51DA               	movf	_sensor_outputs& (0+255),w,b
  5610  001978  0100               	movlb	0	; () banked
  5611  00197A  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5612  00197C  A4D8               	btfss	status,2,c
  5613  00197E  D016               	goto	l8186
  5614                           
  5615                           ; BSR set to: 0
  5616                           ;sort.c: 332: if(!sensor_outputs[1]){
  5617  001980  0100               	movlb	0	; () banked
  5618  001982  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5619  001984  0100               	movlb	0	; () banked
  5620  001986  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5621  001988  A4D8               	btfss	status,2,c
  5622  00198A  D008               	goto	l8182
  5623                           
  5624                           ; BSR set to: 0
  5625                           ;sort.c: 333: count_pop_no_tab++;
  5626  00198C  0101               	movlb	1	; () banked
  5627  00198E  4B27               	infsnz	_count_pop_no_tab& (0+255),f,b
  5628  001990  2B28               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  5629                           
  5630                           ; BSR set to: 1
  5631                           ;sort.c: 334: cur_can = 0;
  5632  001992  0E00               	movlw	0
  5633  001994  0101               	movlb	1	; () banked
  5634  001996  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5635  001998  0E00               	movlw	0
  5636  00199A  D007               	goto	L5
  5637  00199C                     l8182:
  5638                           
  5639                           ;sort.c: 336: else{
  5640                           ;sort.c: 337: count_pop_w_tab++;
  5641  00199C  0101               	movlb	1	; () banked
  5642  00199E  4B29               	infsnz	_count_pop_w_tab& (0+255),f,b
  5643  0019A0  2B2A               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  5644                           
  5645                           ; BSR set to: 1
  5646                           ;sort.c: 338: cur_can = 1;
  5647  0019A2  0E00               	movlw	0
  5648  0019A4  0101               	movlb	1	; () banked
  5649  0019A6  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5650  0019A8  0E01               	movlw	1
  5651  0019AA                     L5:
  5652  0019AA  6F2B               	movwf	_cur_can& (0+255),b
  5653  0019AC                     l8186:
  5654                           
  5655                           ;sort.c: 339: }
  5656                           ;sort.c: 340: }
  5657                           ;sort.c: 341: if(sensor_outputs[0]){
  5658  0019AC  0100               	movlb	0	; () banked
  5659  0019AE  51DA               	movf	_sensor_outputs& (0+255),w,b
  5660  0019B0  0100               	movlb	0	; () banked
  5661  0019B2  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5662  0019B4  B4D8               	btfsc	status,2,c
  5663  0019B6  D016               	goto	l8198
  5664                           
  5665                           ; BSR set to: 0
  5666                           ;sort.c: 342: if(!sensor_outputs[1]){
  5667  0019B8  0100               	movlb	0	; () banked
  5668  0019BA  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5669  0019BC  0100               	movlb	0	; () banked
  5670  0019BE  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5671  0019C0  A4D8               	btfss	status,2,c
  5672  0019C2  D008               	goto	l8194
  5673                           
  5674                           ; BSR set to: 0
  5675                           ;sort.c: 343: count_can_w_lab++;
  5676  0019C4  0101               	movlb	1	; () banked
  5677  0019C6  4B25               	infsnz	_count_can_w_lab& (0+255),f,b
  5678  0019C8  2B26               	incf	(_count_can_w_lab+1)& (0+255),f,b
  5679                           
  5680                           ; BSR set to: 1
  5681                           ;sort.c: 344: cur_can = 2;
  5682  0019CA  0E00               	movlw	0
  5683  0019CC  0101               	movlb	1	; () banked
  5684  0019CE  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5685  0019D0  0E02               	movlw	2
  5686  0019D2  D007               	goto	L6
  5687  0019D4                     l8194:
  5688                           
  5689                           ;sort.c: 346: else{
  5690                           ;sort.c: 347: count_can_no_lab++;
  5691  0019D4  0101               	movlb	1	; () banked
  5692  0019D6  4B23               	infsnz	_count_can_no_lab& (0+255),f,b
  5693  0019D8  2B24               	incf	(_count_can_no_lab+1)& (0+255),f,b
  5694                           
  5695                           ; BSR set to: 1
  5696                           ;sort.c: 348: cur_can = 3;
  5697  0019DA  0E00               	movlw	0
  5698  0019DC  0101               	movlb	1	; () banked
  5699  0019DE  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5700  0019E0  0E03               	movlw	3
  5701  0019E2                     L6:
  5702  0019E2  6F2B               	movwf	_cur_can& (0+255),b
  5703  0019E4                     l8198:
  5704                           
  5705                           ;sort.c: 349: }
  5706                           ;sort.c: 350: }
  5707                           ;sort.c: 352: if(debug){
  5708  0019E4  0100               	movlb	0	; () banked
  5709  0019E6  51E8               	movf	_debug& (0+255),w,b
  5710  0019E8  0100               	movlb	0	; () banked
  5711  0019EA  11E9               	iorwf	(_debug+1)& (0+255),w,b
  5712  0019EC  B4D8               	btfsc	status,2,c
  5713  0019EE  D01F               	goto	l8208
  5714                           
  5715                           ; BSR set to: 0
  5716                           ;sort.c: 353: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  5717  0019F0  0E01               	movlw	1
  5718  0019F2  ECC9  F02D         	call	_lcdInst
  5719  0019F6  0E68               	movlw	104
  5720  0019F8  0100               	movlb	0	; () banked
  5721  0019FA  6FAB               	movwf	??_ID& (0+255),b
  5722  0019FC  0EE4               	movlw	228
  5723  0019FE                     u10217:
  5724  0019FE  2EE8               	decfsz	wreg,f,c
  5725  001A00  D7FE               	bra	u10217
  5726  001A02  2FAB               	decfsz	??_ID& (0+255),f,b
  5727  001A04  D7FC               	bra	u10217
  5728  001A06  F000               	nop	
  5729  001A08  0E80               	movlw	128
  5730  001A0A  ECC9  F02D         	call	_lcdInst
  5731                           
  5732                           ;sort.c: 354: printf("            F%dL%d", res1, res2);
  5733  001A0E  0ED3               	movlw	low STR_64
  5734  001A10  0100               	movlb	0	; () banked
  5735  001A12  6F8E               	movwf	printf@f& (0+255),b
  5736  001A14  0EFA               	movlw	high STR_64
  5737  001A16  0100               	movlb	0	; () banked
  5738  001A18  6F8F               	movwf	(printf@f+1)& (0+255),b
  5739  001A1A  C0BC  F090         	movff	ID@res1,?_printf+2
  5740  001A1E  C0BD  F091         	movff	ID@res1+1,?_printf+3
  5741  001A22  C0BE  F092         	movff	ID@res2,?_printf+4
  5742  001A26  C0BF  F093         	movff	ID@res2+1,?_printf+5
  5743  001A2A  EC8D  F00D         	call	_printf	;wreg free
  5744  001A2E                     l8208:
  5745  001A2E  0101               	movlb	1	; () banked
  5746  001A30  5133               	movf	_f_can_distributed& (0+255),w,b
  5747  001A32  0101               	movlb	1	; () banked
  5748  001A34  1134               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  5749  001A36  B4D8               	btfsc	status,2,c
  5750  001A38  D7FA               	goto	l8208
  5751                           
  5752                           ; BSR set to: 1
  5753                           ;sort.c: 359: for(int i=0;i<10000;i++)
  5754                           
  5755                           ; BSR set to: 1
  5756  001A3A  0E00               	movlw	0
  5757  001A3C  0100               	movlb	0	; () banked
  5758  001A3E  6FB8               	movwf	(ID@i_1150+1)& (0+255),b
  5759  001A40  0E00               	movlw	0
  5760  001A42  6FB7               	movwf	ID@i_1150& (0+255),b
  5761  001A44                     l8212:
  5762                           
  5763                           ; BSR set to: 0
  5764  001A44  0100               	movlb	0	; () banked
  5765  001A46  BFB8               	btfsc	(ID@i_1150+1)& (0+255),7,b
  5766  001A48  D008               	goto	l873
  5767  001A4A  0E10               	movlw	16
  5768  001A4C  0100               	movlb	0	; () banked
  5769  001A4E  5DB7               	subwf	ID@i_1150& (0+255),w,b
  5770  001A50  0E27               	movlw	39
  5771  001A52  0100               	movlb	0	; () banked
  5772  001A54  59B8               	subwfb	(ID@i_1150+1)& (0+255),w,b
  5773  001A56  B0D8               	btfsc	status,0,c
  5774  001A58  D00D               	goto	l874
  5775  001A5A                     l873:
  5776                           
  5777                           ; BSR set to: 0
  5778                           ;sort.c: 360: {
  5779                           ;sort.c: 361: LATCbits.LATC0 = 1;
  5780  001A5A  808B               	bsf	3979,0,c	;volatile
  5781                           
  5782                           ; BSR set to: 0
  5783                           ;sort.c: 362: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5784  001A5C  0E1A               	movlw	26
  5785  001A5E                     u10227:
  5786  001A5E  2EE8               	decfsz	wreg,f,c
  5787  001A60  D7FE               	bra	u10227
  5788  001A62  D000               	nop2	
  5789                           
  5790                           ;sort.c: 363: LATCbits.LATC0 = 0;
  5791  001A64  908B               	bcf	3979,0,c	;volatile
  5792                           
  5793                           ;sort.c: 364: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5794  001A66  0EF0               	movlw	240
  5795  001A68                     u10237:
  5796  001A68  2EE8               	decfsz	wreg,f,c
  5797  001A6A  D7FE               	bra	u10237
  5798  001A6C  0100               	movlb	0	; () banked
  5799  001A6E  4BB7               	infsnz	ID@i_1150& (0+255),f,b
  5800  001A70  2BB8               	incf	(ID@i_1150+1)& (0+255),f,b
  5801  001A72  D7E8               	goto	l8212
  5802  001A74                     l874:
  5803                           
  5804                           ; BSR set to: 0
  5805                           ;sort.c: 365: }
  5806                           ;sort.c: 367: LATCbits.LATC0 = 0;
  5807  001A74  908B               	bcf	3979,0,c	;volatile
  5808                           
  5809                           ; BSR set to: 0
  5810                           ;sort.c: 369: f_can_coming_to_distribution = 1;
  5811  001A76  0E00               	movlw	0
  5812  001A78  0101               	movlb	1	; () banked
  5813  001A7A  6F32               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5814  001A7C  0E01               	movlw	1
  5815  001A7E  6F31               	movwf	_f_can_coming_to_distribution& (0+255),b
  5816                           
  5817                           ; BSR set to: 1
  5818                           ;sort.c: 370: _delay((unsigned long)((750)*(32000000/4000.0)));
  5819  001A80  0E1F               	movlw	31
  5820  001A82  0100               	movlb	0	; () banked
  5821  001A84  6FAC               	movwf	(??_ID+1)& (0+255),b
  5822  001A86  0E71               	movlw	113
  5823  001A88  0100               	movlb	0	; () banked
  5824  001A8A  6FAB               	movwf	??_ID& (0+255),b
  5825  001A8C  0E1E               	movlw	30
  5826  001A8E                     u10247:
  5827  001A8E  2EE8               	decfsz	wreg,f,c
  5828  001A90  D7FE               	bra	u10247
  5829  001A92  2FAB               	decfsz	??_ID& (0+255),f,b
  5830  001A94  D7FC               	bra	u10247
  5831  001A96  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5832  001A98  D7FA               	bra	u10247
  5833  001A9A  F000               	nop	
  5834                           
  5835                           ;sort.c: 371: LATCbits.LATC0 = 1;
  5836  001A9C  808B               	bsf	3979,0,c	;volatile
  5837                           
  5838                           ;sort.c: 374: if(!f_lastCan){
  5839  001A9E  0100               	movlb	0	; () banked
  5840  001AA0  51EC               	movf	_f_lastCan& (0+255),w,b
  5841  001AA2  0100               	movlb	0	; () banked
  5842  001AA4  11ED               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5843  001AA6  A4D8               	btfss	status,2,c
  5844  001AA8  D032               	goto	l8244
  5845                           
  5846                           ; BSR set to: 0
  5847                           ;sort.c: 375: for(int i=0; i<46; i++){
  5848  001AAA  0E00               	movlw	0
  5849  001AAC  0100               	movlb	0	; () banked
  5850  001AAE  6FBA               	movwf	(ID@i_1151+1)& (0+255),b
  5851  001AB0  0E00               	movlw	0
  5852  001AB2  6FB9               	movwf	ID@i_1151& (0+255),b
  5853                           
  5854                           ; BSR set to: 0
  5855  001AB4  0100               	movlb	0	; () banked
  5856  001AB6  BFBA               	btfsc	(ID@i_1151+1)& (0+255),7,b
  5857  001AB8  D008               	goto	l8236
  5858  001ABA  0100               	movlb	0	; () banked
  5859  001ABC  51BA               	movf	(ID@i_1151+1)& (0+255),w,b
  5860  001ABE  E126               	bnz	l877
  5861  001AC0  0E2E               	movlw	46
  5862  001AC2  0100               	movlb	0	; () banked
  5863  001AC4  5DB9               	subwf	ID@i_1151& (0+255),w,b
  5864  001AC6  B0D8               	btfsc	status,0,c
  5865  001AC8  D021               	goto	l877
  5866  001ACA                     l8236:
  5867                           
  5868                           ; BSR set to: 0
  5869                           ;sort.c: 376: LATBbits.LATB2 = !LATBbits.LATB2;
  5870  001ACA  B48A               	btfsc	3978,2,c	;volatile
  5871  001ACC  D004               	goto	u7100
  5872  001ACE  0100               	movlb	0	; () banked
  5873  001AD0  6BAB               	clrf	??_ID& (0+255),b
  5874  001AD2  2BAB               	incf	??_ID& (0+255),f,b
  5875  001AD4  D002               	goto	u7118
  5876  001AD6                     u7100:
  5877  001AD6  0100               	movlb	0	; () banked
  5878  001AD8  6BAB               	clrf	??_ID& (0+255),b
  5879  001ADA                     u7118:
  5880  001ADA  0100               	movlb	0	; () banked
  5881  001ADC  47AB               	rlncf	??_ID& (0+255),f,b
  5882  001ADE  47AB               	rlncf	??_ID& (0+255),f,b
  5883  001AE0  508A               	movf	3978,w,c	;volatile
  5884  001AE2  0100               	movlb	0	; () banked
  5885  001AE4  19AB               	xorwf	??_ID& (0+255),w,b
  5886  001AE6  0BFB               	andlw	-5
  5887  001AE8  19AB               	xorwf	??_ID& (0+255),w,b
  5888  001AEA  6E8A               	movwf	3978,c	;volatile
  5889                           
  5890                           ; BSR set to: 0
  5891                           ;sort.c: 377: delay_ms(45-i);
  5892  001AEC  0100               	movlb	0	; () banked
  5893  001AEE  51B9               	movf	ID@i_1151& (0+255),w,b
  5894  001AF0  0800               	sublw	0
  5895  001AF2  0F2D               	addlw	45
  5896  001AF4  ECDF  F02C         	call	_delay_ms
  5897  001AF8  0100               	movlb	0	; () banked
  5898  001AFA  4BB9               	infsnz	ID@i_1151& (0+255),f,b
  5899  001AFC  2BBA               	incf	(ID@i_1151+1)& (0+255),f,b
  5900                           
  5901                           ; BSR set to: 0
  5902  001AFE  0100               	movlb	0	; () banked
  5903  001B00  BFBA               	btfsc	(ID@i_1151+1)& (0+255),7,b
  5904  001B02  D7E3               	goto	l8236
  5905  001B04  0100               	movlb	0	; () banked
  5906  001B06  51BA               	movf	(ID@i_1151+1)& (0+255),w,b
  5907  001B08  E101               	bnz	u7120
  5908  001B0A  D7DA               	goto	L7
  5909  001B0C                     u7120:
  5910  001B0C                     l877:
  5911                           
  5912                           ; BSR set to: 0
  5913                           ;sort.c: 378: }
  5914                           ;sort.c: 379: LATBbits.LATB2 = 1;
  5915  001B0C  848A               	bsf	3978,2,c	;volatile
  5916  001B0E                     l8244:
  5917                           
  5918                           ; BSR set to: 0
  5919                           ;sort.c: 380: }
  5920                           ;sort.c: 382: f_can_coming_to_ID = 0;
  5921  001B0E  0E00               	movlw	0
  5922  001B10  0101               	movlb	1	; () banked
  5923  001B12  6F30               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  5924  001B14  0E00               	movlw	0
  5925  001B16  6F2F               	movwf	_f_can_coming_to_ID& (0+255),b
  5926  001B18  0012               	return	
  5927  001B1A                     __end_of_ID:
  5928                           	opt stack 0
  5929                           tblptru	equ	0xFF8
  5930                           tblptrh	equ	0xFF7
  5931                           tblptrl	equ	0xFF6
  5932                           tablat	equ	0xFF5
  5933                           prodh	equ	0xFF4
  5934                           prodl	equ	0xFF3
  5935                           postinc0	equ	0xFEE
  5936                           wreg	equ	0xFE8
  5937                           postdec1	equ	0xFE5
  5938                           fsr1l	equ	0xFE1
  5939                           indf2	equ	0xFDF
  5940                           postinc2	equ	0xFDE
  5941                           postdec2	equ	0xFDD
  5942                           fsr2h	equ	0xFDA
  5943                           fsr2l	equ	0xFD9
  5944                           status	equ	0xFD8
  5945                           
  5946 ;; *************** function _readCOND *****************
  5947 ;; Defined at:
  5948 ;;		line 35 in file "ADCFunctionality.c"
  5949 ;; Parameters:    Size  Location     Type
  5950 ;;		None
  5951 ;; Auto vars:     Size  Location     Type
  5952 ;;  res             2    4[BANK0 ] int 
  5953 ;; Return value:  Size  Location     Type
  5954 ;;                  1    wreg      void 
  5955 ;; Registers used:
  5956 ;;		wreg, status,2, status,0, cstack
  5957 ;; Tracked objects:
  5958 ;;		On entry : 0/0
  5959 ;;		On exit  : 0/0
  5960 ;;		Unchanged: 0/0
  5961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5963 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5964 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5965 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5966 ;;Total ram usage:        4 bytes
  5967 ;; Hardware stack levels used:    1
  5968 ;; Hardware stack levels required when called:    8
  5969 ;; This function calls:
  5970 ;;		_readADC
  5971 ;; This function is called by:
  5972 ;;		_ID
  5973 ;; This function uses a non-reentrant model
  5974 ;;
  5975                           
  5976                           	psect	text9
  5977  005422                     __ptext9:
  5978                           	opt stack 0
  5979  005422                     _readCOND:
  5980                           	opt stack 20
  5981                           
  5982                           ;ADCFunctionality.c: 36: readADC(2);
  5983                           
  5984                           ; BSR set to: 1
  5985                           ;incstack = 0
  5986  005422  0E02               	movlw	2
  5987  005424  ECB4  F02C         	call	_readADC
  5988                           
  5989                           ;ADCFunctionality.c: 37: int res = ADRESH<<8 | ADRESL;
  5990  005428  50C3               	movf	4035,w,c	;volatile
  5991  00542A  CFC4 F082          	movff	4036,??_readCOND	;volatile
  5992  00542E  0100               	movlb	0	; () banked
  5993  005430  6B83               	clrf	(??_readCOND+1)& (0+255),b
  5994  005432  C082  F083         	movff	??_readCOND,??_readCOND+1
  5995  005436  0100               	movlb	0	; () banked
  5996  005438  6B82               	clrf	??_readCOND& (0+255),b
  5997  00543A  0100               	movlb	0	; () banked
  5998  00543C  1182               	iorwf	??_readCOND& (0+255),w,b
  5999  00543E  0100               	movlb	0	; () banked
  6000  005440  6F84               	movwf	readCOND@res& (0+255),b
  6001  005442  0100               	movlb	0	; () banked
  6002  005444  5183               	movf	(??_readCOND+1)& (0+255),w,b
  6003  005446  0100               	movlb	0	; () banked
  6004  005448  6F85               	movwf	(readCOND@res+1)& (0+255),b
  6005                           
  6006                           ; BSR set to: 0
  6007                           ;ADCFunctionality.c: 38: COND_signal = (res > 300) ? 1 : 0;
  6008  00544A  0100               	movlb	0	; () banked
  6009  00544C  BF85               	btfsc	(readCOND@res+1)& (0+255),7,b
  6010  00544E  D00A               	goto	u5970
  6011  005450  0E2D               	movlw	45
  6012  005452  0100               	movlb	0	; () banked
  6013  005454  5D84               	subwf	readCOND@res& (0+255),w,b
  6014  005456  0E01               	movlw	1
  6015  005458  0100               	movlb	0	; () banked
  6016  00545A  5985               	subwfb	(readCOND@res+1)& (0+255),w,b
  6017  00545C  A0D8               	btfss	status,0,c
  6018  00545E  D002               	goto	u5970
  6019  005460  0E01               	movlw	1
  6020  005462  D001               	goto	u5980
  6021  005464                     u5970:
  6022  005464  0E00               	movlw	0
  6023  005466                     u5980:
  6024  005466  0100               	movlb	0	; () banked
  6025  005468  6FDE               	movwf	_COND_signal& (0+255),b
  6026  00546A  6BDF               	clrf	(_COND_signal+1)& (0+255),b
  6027                           
  6028                           ; BSR set to: 0
  6029  00546C  0012               	return		;funcret
  6030  00546E                     __end_of_readCOND:
  6031                           	opt stack 0
  6032                           tblptru	equ	0xFF8
  6033                           tblptrh	equ	0xFF7
  6034                           tblptrl	equ	0xFF6
  6035                           tablat	equ	0xFF5
  6036                           prodh	equ	0xFF4
  6037                           prodl	equ	0xFF3
  6038                           postinc0	equ	0xFEE
  6039                           wreg	equ	0xFE8
  6040                           postdec1	equ	0xFE5
  6041                           fsr1l	equ	0xFE1
  6042                           indf2	equ	0xFDF
  6043                           postinc2	equ	0xFDE
  6044                           postdec2	equ	0xFDD
  6045                           fsr2h	equ	0xFDA
  6046                           fsr2l	equ	0xFD9
  6047                           status	equ	0xFD8
  6048                           
  6049 ;; *************** function _delay_ms *****************
  6050 ;; Defined at:
  6051 ;;		line 670 in file "sort.c"
  6052 ;; Parameters:    Size  Location     Type
  6053 ;;  milliseconds    1    wreg     unsigned char 
  6054 ;; Auto vars:     Size  Location     Type
  6055 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  6056 ;; Return value:  Size  Location     Type
  6057 ;;                  1    wreg      void 
  6058 ;; Registers used:
  6059 ;;		wreg, status,2, status,0, cstack
  6060 ;; Tracked objects:
  6061 ;;		On entry : 0/0
  6062 ;;		On exit  : 0/0
  6063 ;;		Unchanged: 0/0
  6064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6066 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6067 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6068 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6069 ;;Total ram usage:        2 bytes
  6070 ;; Hardware stack levels used:    1
  6071 ;; Hardware stack levels required when called:    7
  6072 ;; This function calls:
  6073 ;;		Nothing
  6074 ;; This function is called by:
  6075 ;;		_Loading
  6076 ;;		_ID
  6077 ;; This function uses a non-reentrant model
  6078 ;;
  6079                           
  6080                           	psect	text10
  6081  0059BE                     __ptext10:
  6082                           	opt stack 0
  6083  0059BE                     _delay_ms:
  6084                           	opt stack 21
  6085                           
  6086                           ; BSR set to: 0
  6087                           ;incstack = 0
  6088                           ;delay_ms@milliseconds stored from wreg
  6089  0059BE  0100               	movlb	0	; () banked
  6090  0059C0  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  6091                           
  6092                           ;sort.c: 671: while(milliseconds > 0)
  6093  0059C2  D00B               	goto	l7444
  6094  0059C4                     l7440:
  6095                           
  6096                           ;sort.c: 672: {
  6097                           ;sort.c: 673: milliseconds--;
  6098  0059C4  0100               	movlb	0	; () banked
  6099  0059C6  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  6100                           
  6101                           ; BSR set to: 0
  6102                           ;sort.c: 674: _delay((unsigned long)((990)*(32000000/4000000.0)));
  6103  0059C8  0E0B               	movlw	11
  6104  0059CA  0100               	movlb	0	; () banked
  6105  0059CC  6F80               	movwf	??_delay_ms& (0+255),b
  6106  0059CE  0E47               	movlw	71
  6107  0059D0                     u10257:
  6108  0059D0  2EE8               	decfsz	wreg,f,c
  6109  0059D2  D7FE               	bra	u10257
  6110  0059D4  2F80               	decfsz	??_delay_ms& (0+255),f,b
  6111  0059D6  D7FC               	bra	u10257
  6112  0059D8  D000               	nop2	
  6113  0059DA                     l7444:
  6114  0059DA  0100               	movlb	0	; () banked
  6115  0059DC  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  6116  0059DE  0100               	movlb	0	; () banked
  6117  0059E0  B4D8               	btfsc	status,2,c
  6118  0059E2  0012               	return	
  6119  0059E4  D7EF               	goto	l7440
  6120  0059E6                     __end_of_delay_ms:
  6121                           	opt stack 0
  6122                           tblptru	equ	0xFF8
  6123                           tblptrh	equ	0xFF7
  6124                           tblptrl	equ	0xFF6
  6125                           tablat	equ	0xFF5
  6126                           prodh	equ	0xFF4
  6127                           prodl	equ	0xFF3
  6128                           postinc0	equ	0xFEE
  6129                           wreg	equ	0xFE8
  6130                           postdec1	equ	0xFE5
  6131                           fsr1l	equ	0xFE1
  6132                           indf2	equ	0xFDF
  6133                           postinc2	equ	0xFDE
  6134                           postdec2	equ	0xFDD
  6135                           fsr2h	equ	0xFDA
  6136                           fsr2l	equ	0xFD9
  6137                           status	equ	0xFD8
  6138                           
  6139 ;; *************** function ___ftge *****************
  6140 ;; Defined at:
  6141 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  6142 ;; Parameters:    Size  Location     Type
  6143 ;;  ff1             3   18[BANK0 ] float 
  6144 ;;  ff2             3   21[BANK0 ] float 
  6145 ;; Auto vars:     Size  Location     Type
  6146 ;;		None
  6147 ;; Return value:  Size  Location     Type
  6148 ;;		None               void
  6149 ;; Registers used:
  6150 ;;		wreg, status,2, status,0
  6151 ;; Tracked objects:
  6152 ;;		On entry : 0/0
  6153 ;;		On exit  : 0/0
  6154 ;;		Unchanged: 0/0
  6155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6156 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6158 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6159 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6160 ;;Total ram usage:        9 bytes
  6161 ;; Hardware stack levels used:    1
  6162 ;; Hardware stack levels required when called:    7
  6163 ;; This function calls:
  6164 ;;		Nothing
  6165 ;; This function is called by:
  6166 ;;		_ID
  6167 ;; This function uses a non-reentrant model
  6168 ;;
  6169                           
  6170                           	psect	text11
  6171  004784                     __ptext11:
  6172                           	opt stack 0
  6173  004784                     ___ftge:
  6174                           	opt stack 21
  6175                           
  6176                           ; BSR set to: 0
  6177                           ;incstack = 0
  6178  004784  0100               	movlb	0	; () banked
  6179  004786  AF94               	btfss	(___ftge@ff1+2)& (0+255),7,b
  6180  004788  D01D               	goto	l7562
  6181                           
  6182                           ; BSR set to: 0
  6183  00478A  C092  F098         	movff	___ftge@ff1,??___ftge
  6184  00478E  C093  F099         	movff	___ftge@ff1+1,??___ftge+1
  6185  004792  C094  F09A         	movff	___ftge@ff1+2,??___ftge+2
  6186  004796  0100               	movlb	0	; () banked
  6187  004798  1F98               	comf	??___ftge& (0+255),f,b
  6188  00479A  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6189  00479C  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6190  00479E  2B98               	incf	??___ftge& (0+255),f,b
  6191  0047A0  0E00               	movlw	0
  6192  0047A2  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6193  0047A4  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6194  0047A6  0E00               	movlw	0
  6195  0047A8  0100               	movlb	0	; () banked
  6196  0047AA  2598               	addwf	??___ftge& (0+255),w,b
  6197  0047AC  0100               	movlb	0	; () banked
  6198  0047AE  6F92               	movwf	___ftge@ff1& (0+255),b
  6199  0047B0  0E00               	movlw	0
  6200  0047B2  0100               	movlb	0	; () banked
  6201  0047B4  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6202  0047B6  0100               	movlb	0	; () banked
  6203  0047B8  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  6204  0047BA  0E80               	movlw	128
  6205  0047BC  0100               	movlb	0	; () banked
  6206  0047BE  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6207  0047C0  0100               	movlb	0	; () banked
  6208  0047C2  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  6209  0047C4                     l7562:
  6210                           
  6211                           ; BSR set to: 0
  6212  0047C4  0100               	movlb	0	; () banked
  6213  0047C6  AF97               	btfss	(___ftge@ff2+2)& (0+255),7,b
  6214  0047C8  D01D               	goto	l7566
  6215                           
  6216                           ; BSR set to: 0
  6217  0047CA  C095  F098         	movff	___ftge@ff2,??___ftge
  6218  0047CE  C096  F099         	movff	___ftge@ff2+1,??___ftge+1
  6219  0047D2  C097  F09A         	movff	___ftge@ff2+2,??___ftge+2
  6220  0047D6  0100               	movlb	0	; () banked
  6221  0047D8  1F98               	comf	??___ftge& (0+255),f,b
  6222  0047DA  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6223  0047DC  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6224  0047DE  2B98               	incf	??___ftge& (0+255),f,b
  6225  0047E0  0E00               	movlw	0
  6226  0047E2  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6227  0047E4  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6228  0047E6  0E00               	movlw	0
  6229  0047E8  0100               	movlb	0	; () banked
  6230  0047EA  2598               	addwf	??___ftge& (0+255),w,b
  6231  0047EC  0100               	movlb	0	; () banked
  6232  0047EE  6F95               	movwf	___ftge@ff2& (0+255),b
  6233  0047F0  0E00               	movlw	0
  6234  0047F2  0100               	movlb	0	; () banked
  6235  0047F4  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6236  0047F6  0100               	movlb	0	; () banked
  6237  0047F8  6F96               	movwf	(___ftge@ff2+1)& (0+255),b
  6238  0047FA  0E80               	movlw	128
  6239  0047FC  0100               	movlb	0	; () banked
  6240  0047FE  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6241  004800  0100               	movlb	0	; () banked
  6242  004802  6F97               	movwf	(___ftge@ff2+2)& (0+255),b
  6243  004804                     l7566:
  6244                           
  6245                           ; BSR set to: 0
  6246  004804  0E00               	movlw	0
  6247  004806  0100               	movlb	0	; () banked
  6248  004808  1B92               	xorwf	___ftge@ff1& (0+255),f,b
  6249  00480A  0E00               	movlw	0
  6250  00480C  0100               	movlb	0	; () banked
  6251  00480E  1B93               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  6252  004810  0E80               	movlw	128
  6253  004812  0100               	movlb	0	; () banked
  6254  004814  1B94               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  6255                           
  6256                           ; BSR set to: 0
  6257  004816  0E00               	movlw	0
  6258  004818  0100               	movlb	0	; () banked
  6259  00481A  1B95               	xorwf	___ftge@ff2& (0+255),f,b
  6260  00481C  0E00               	movlw	0
  6261  00481E  0100               	movlb	0	; () banked
  6262  004820  1B96               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  6263  004822  0E80               	movlw	128
  6264  004824  0100               	movlb	0	; () banked
  6265  004826  1B97               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  6266  004828  0100               	movlb	0	; () banked
  6267  00482A  5195               	movf	___ftge@ff2& (0+255),w,b
  6268  00482C  0100               	movlb	0	; () banked
  6269  00482E  5D92               	subwf	___ftge@ff1& (0+255),w,b
  6270  004830  0100               	movlb	0	; () banked
  6271  004832  5196               	movf	(___ftge@ff2+1)& (0+255),w,b
  6272  004834  0100               	movlb	0	; () banked
  6273  004836  5993               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  6274  004838  0100               	movlb	0	; () banked
  6275  00483A  5197               	movf	(___ftge@ff2+2)& (0+255),w,b
  6276  00483C  0100               	movlb	0	; () banked
  6277  00483E  5994               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  6278  004840  B0D8               	btfsc	status,0,c
  6279  004842  D002               	goto	l7572
  6280                           
  6281                           ; BSR set to: 0
  6282  004844  90D8               	bcf	status,0,c
  6283  004846  0012               	return	
  6284  004848                     l7572:
  6285                           
  6286                           ; BSR set to: 0
  6287  004848  80D8               	bsf	status,0,c
  6288                           
  6289                           ; BSR set to: 0
  6290  00484A  0012               	return	
  6291  00484C                     __end_of___ftge:
  6292                           	opt stack 0
  6293                           tblptru	equ	0xFF8
  6294                           tblptrh	equ	0xFF7
  6295                           tblptrl	equ	0xFF6
  6296                           tablat	equ	0xFF5
  6297                           prodh	equ	0xFF4
  6298                           prodl	equ	0xFF3
  6299                           postinc0	equ	0xFEE
  6300                           wreg	equ	0xFE8
  6301                           postdec1	equ	0xFE5
  6302                           fsr1l	equ	0xFE1
  6303                           indf2	equ	0xFDF
  6304                           postinc2	equ	0xFDE
  6305                           postdec2	equ	0xFDD
  6306                           fsr2h	equ	0xFDA
  6307                           fsr2l	equ	0xFD9
  6308                           status	equ	0xFD8
  6309                           
  6310 ;; *************** function ___awtoft *****************
  6311 ;; Defined at:
  6312 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  6313 ;; Parameters:    Size  Location     Type
  6314 ;;  c               2   14[BANK0 ] int 
  6315 ;; Auto vars:     Size  Location     Type
  6316 ;;  sign            1   17[BANK0 ] unsigned char 
  6317 ;; Return value:  Size  Location     Type
  6318 ;;                  3   14[BANK0 ] float 
  6319 ;; Registers used:
  6320 ;;		wreg, status,2, status,0, cstack
  6321 ;; Tracked objects:
  6322 ;;		On entry : 0/0
  6323 ;;		On exit  : 0/0
  6324 ;;		Unchanged: 0/0
  6325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6326 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6327 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6329 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6330 ;;Total ram usage:        4 bytes
  6331 ;; Hardware stack levels used:    1
  6332 ;; Hardware stack levels required when called:    8
  6333 ;; This function calls:
  6334 ;;		___ftpack
  6335 ;; This function is called by:
  6336 ;;		_ID
  6337 ;; This function uses a non-reentrant model
  6338 ;;
  6339                           
  6340                           	psect	text12
  6341  005500                     __ptext12:
  6342                           	opt stack 0
  6343  005500                     ___awtoft:
  6344                           	opt stack 20
  6345                           
  6346                           ; BSR set to: 0
  6347                           ;incstack = 0
  6348  005500  0E00               	movlw	0
  6349  005502  0100               	movlb	0	; () banked
  6350  005504  6F91               	movwf	___awtoft@sign& (0+255),b
  6351                           
  6352                           ; BSR set to: 0
  6353  005506  0100               	movlb	0	; () banked
  6354  005508  AF8F               	btfss	(___awtoft@c+1)& (0+255),7,b
  6355  00550A  D008               	goto	l7554
  6356                           
  6357                           ; BSR set to: 0
  6358  00550C  0100               	movlb	0	; () banked
  6359  00550E  6D8E               	negf	___awtoft@c& (0+255),b
  6360  005510  1F8F               	comf	(___awtoft@c+1)& (0+255),f,b
  6361  005512  B0D8               	btfsc	status,0,c
  6362  005514  2B8F               	incf	(___awtoft@c+1)& (0+255),f,b
  6363                           
  6364                           ; BSR set to: 0
  6365  005516  0E01               	movlw	1
  6366  005518  0100               	movlb	0	; () banked
  6367  00551A  6F91               	movwf	___awtoft@sign& (0+255),b
  6368  00551C                     l7554:
  6369                           
  6370                           ; BSR set to: 0
  6371  00551C  C08E  F080         	movff	___awtoft@c,___ftpack@arg
  6372  005520  C08F  F081         	movff	___awtoft@c+1,___ftpack@arg+1
  6373  005524  0100               	movlb	0	; () banked
  6374  005526  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
  6375  005528  0E8E               	movlw	142
  6376  00552A  0100               	movlb	0	; () banked
  6377  00552C  6F83               	movwf	___ftpack@exp& (0+255),b
  6378  00552E  C091  F084         	movff	___awtoft@sign,___ftpack@sign
  6379  005532  EC86  F020         	call	___ftpack	;wreg free
  6380  005536  C080  F08E         	movff	?___ftpack,?___awtoft
  6381  00553A  C081  F08F         	movff	?___ftpack+1,?___awtoft+1
  6382  00553E  C082  F090         	movff	?___ftpack+2,?___awtoft+2
  6383  005542  0012               	return	
  6384  005544                     __end_of___awtoft:
  6385                           	opt stack 0
  6386                           tblptru	equ	0xFF8
  6387                           tblptrh	equ	0xFF7
  6388                           tblptrl	equ	0xFF6
  6389                           tablat	equ	0xFF5
  6390                           prodh	equ	0xFF4
  6391                           prodl	equ	0xFF3
  6392                           postinc0	equ	0xFEE
  6393                           wreg	equ	0xFE8
  6394                           postdec1	equ	0xFE5
  6395                           fsr1l	equ	0xFE1
  6396                           indf2	equ	0xFDF
  6397                           postinc2	equ	0xFDE
  6398                           postdec2	equ	0xFDD
  6399                           fsr2h	equ	0xFDA
  6400                           fsr2l	equ	0xFD9
  6401                           status	equ	0xFD8
  6402                           
  6403 ;; *************** function ___ftpack *****************
  6404 ;; Defined at:
  6405 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  6406 ;; Parameters:    Size  Location     Type
  6407 ;;  arg             3    0[BANK0 ] unsigned um
  6408 ;;  exp             1    3[BANK0 ] unsigned char 
  6409 ;;  sign            1    4[BANK0 ] unsigned char 
  6410 ;; Auto vars:     Size  Location     Type
  6411 ;;		None
  6412 ;; Return value:  Size  Location     Type
  6413 ;;                  3    0[BANK0 ] float 
  6414 ;; Registers used:
  6415 ;;		wreg, status,2, status,0
  6416 ;; Tracked objects:
  6417 ;;		On entry : 0/0
  6418 ;;		On exit  : 0/0
  6419 ;;		Unchanged: 0/0
  6420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6421 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6423 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6424 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6425 ;;Total ram usage:        8 bytes
  6426 ;; Hardware stack levels used:    1
  6427 ;; Hardware stack levels required when called:    7
  6428 ;; This function calls:
  6429 ;;		Nothing
  6430 ;; This function is called by:
  6431 ;;		___awtoft
  6432 ;; This function uses a non-reentrant model
  6433 ;;
  6434                           
  6435                           	psect	text13
  6436  00410C                     __ptext13:
  6437                           	opt stack 0
  6438  00410C                     ___ftpack:
  6439                           	opt stack 20
  6440                           
  6441                           ;incstack = 0
  6442  00410C  0100               	movlb	0	; () banked
  6443  00410E  5183               	movf	___ftpack@exp& (0+255),w,b
  6444  004110  0100               	movlb	0	; () banked
  6445  004112  B4D8               	btfsc	status,2,c
  6446  004114  D008               	goto	l6938
  6447                           
  6448                           ; BSR set to: 0
  6449  004116  0100               	movlb	0	; () banked
  6450  004118  5180               	movf	___ftpack@arg& (0+255),w,b
  6451  00411A  0100               	movlb	0	; () banked
  6452  00411C  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  6453  00411E  0100               	movlb	0	; () banked
  6454  004120  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  6455  004122  A4D8               	btfss	status,2,c
  6456  004124  D011               	goto	l6944
  6457  004126                     l6938:
  6458                           
  6459                           ; BSR set to: 0
  6460  004126  0E00               	movlw	0
  6461  004128  0100               	movlb	0	; () banked
  6462  00412A  6F80               	movwf	?___ftpack& (0+255),b
  6463  00412C  0E00               	movlw	0
  6464  00412E  0100               	movlb	0	; () banked
  6465  004130  6F81               	movwf	(?___ftpack+1)& (0+255),b
  6466  004132  0E00               	movlw	0
  6467  004134  0100               	movlb	0	; () banked
  6468  004136  6F82               	movwf	(?___ftpack+2)& (0+255),b
  6469                           
  6470                           ; BSR set to: 0
  6471  004138  0012               	return	
  6472  00413A                     l6942:
  6473                           
  6474                           ; BSR set to: 0
  6475  00413A  0100               	movlb	0	; () banked
  6476  00413C  2B83               	incf	___ftpack@exp& (0+255),f,b
  6477  00413E  0100               	movlb	0	; () banked
  6478  004140  90D8               	bcf	status,0,c
  6479  004142  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6480  004144  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6481  004146  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6482  004148                     l6944:
  6483                           
  6484                           ; BSR set to: 0
  6485  004148  0E00               	movlw	0
  6486  00414A  0100               	movlb	0	; () banked
  6487  00414C  1580               	andwf	___ftpack@arg& (0+255),w,b
  6488  00414E  0100               	movlb	0	; () banked
  6489  004150  6F85               	movwf	??___ftpack& (0+255),b
  6490  004152  0E00               	movlw	0
  6491  004154  0100               	movlb	0	; () banked
  6492  004156  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6493  004158  0100               	movlb	0	; () banked
  6494  00415A  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6495  00415C  0EFE               	movlw	254
  6496  00415E  0100               	movlb	0	; () banked
  6497  004160  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6498  004162  0100               	movlb	0	; () banked
  6499  004164  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6500  004166  0100               	movlb	0	; () banked
  6501  004168  5185               	movf	??___ftpack& (0+255),w,b
  6502  00416A  0100               	movlb	0	; () banked
  6503  00416C  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6504  00416E  0100               	movlb	0	; () banked
  6505  004170  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6506  004172  B4D8               	btfsc	status,2,c
  6507  004174  D011               	goto	l6950
  6508  004176  D7E1               	goto	l6942
  6509  004178                     l6946:
  6510                           
  6511                           ; BSR set to: 0
  6512  004178  0100               	movlb	0	; () banked
  6513  00417A  2B83               	incf	___ftpack@exp& (0+255),f,b
  6514                           
  6515                           ; BSR set to: 0
  6516  00417C  0E01               	movlw	1
  6517  00417E  0100               	movlb	0	; () banked
  6518  004180  2780               	addwf	___ftpack@arg& (0+255),f,b
  6519  004182  0E00               	movlw	0
  6520  004184  0100               	movlb	0	; () banked
  6521  004186  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  6522  004188  0E00               	movlw	0
  6523  00418A  0100               	movlb	0	; () banked
  6524  00418C  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  6525  00418E  0100               	movlb	0	; () banked
  6526  004190  90D8               	bcf	status,0,c
  6527  004192  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6528  004194  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6529  004196  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6530  004198                     l6950:
  6531                           
  6532                           ; BSR set to: 0
  6533  004198  0E00               	movlw	0
  6534  00419A  0100               	movlb	0	; () banked
  6535  00419C  1580               	andwf	___ftpack@arg& (0+255),w,b
  6536  00419E  0100               	movlb	0	; () banked
  6537  0041A0  6F85               	movwf	??___ftpack& (0+255),b
  6538  0041A2  0E00               	movlw	0
  6539  0041A4  0100               	movlb	0	; () banked
  6540  0041A6  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6541  0041A8  0100               	movlb	0	; () banked
  6542  0041AA  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6543  0041AC  0EFF               	movlw	255
  6544  0041AE  0100               	movlb	0	; () banked
  6545  0041B0  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6546  0041B2  0100               	movlb	0	; () banked
  6547  0041B4  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6548  0041B6  0100               	movlb	0	; () banked
  6549  0041B8  5185               	movf	??___ftpack& (0+255),w,b
  6550  0041BA  0100               	movlb	0	; () banked
  6551  0041BC  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6552  0041BE  0100               	movlb	0	; () banked
  6553  0041C0  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6554  0041C2  B4D8               	btfsc	status,2,c
  6555  0041C4  D008               	goto	l6954
  6556  0041C6  D7D8               	goto	l6946
  6557  0041C8                     l6952:
  6558                           
  6559                           ; BSR set to: 0
  6560  0041C8  0100               	movlb	0	; () banked
  6561  0041CA  0783               	decf	___ftpack@exp& (0+255),f,b
  6562  0041CC  0100               	movlb	0	; () banked
  6563  0041CE  90D8               	bcf	status,0,c
  6564  0041D0  3780               	rlcf	___ftpack@arg& (0+255),f,b
  6565  0041D2  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  6566  0041D4  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  6567  0041D6                     l6954:
  6568                           
  6569                           ; BSR set to: 0
  6570  0041D6  0100               	movlb	0	; () banked
  6571  0041D8  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  6572  0041DA  D004               	goto	l1792
  6573                           
  6574                           ; BSR set to: 0
  6575  0041DC  0E02               	movlw	2
  6576  0041DE  0100               	movlb	0	; () banked
  6577  0041E0  6183               	cpfslt	___ftpack@exp& (0+255),b
  6578  0041E2  D7F2               	goto	l6952
  6579  0041E4                     l1792:
  6580                           
  6581                           ; BSR set to: 0
  6582  0041E4  0100               	movlb	0	; () banked
  6583  0041E6  B183               	btfsc	___ftpack@exp& (0+255),0,b
  6584  0041E8  D002               	goto	l6960
  6585                           
  6586                           ; BSR set to: 0
  6587  0041EA  0100               	movlb	0	; () banked
  6588  0041EC  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  6589  0041EE                     l6960:
  6590                           
  6591                           ; BSR set to: 0
  6592  0041EE  0100               	movlb	0	; () banked
  6593  0041F0  90D8               	bcf	status,0,c
  6594  0041F2  3383               	rrcf	___ftpack@exp& (0+255),f,b
  6595  0041F4  0100               	movlb	0	; () banked
  6596  0041F6  5183               	movf	___ftpack@exp& (0+255),w,b
  6597  0041F8  0100               	movlb	0	; () banked
  6598  0041FA  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  6599                           
  6600                           ; BSR set to: 0
  6601  0041FC  0100               	movlb	0	; () banked
  6602  0041FE  5184               	movf	___ftpack@sign& (0+255),w,b
  6603  004200  0100               	movlb	0	; () banked
  6604  004202  B4D8               	btfsc	status,2,c
  6605  004204  D002               	goto	l6966
  6606                           
  6607                           ; BSR set to: 0
  6608  004206  0100               	movlb	0	; () banked
  6609  004208  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  6610  00420A                     l6966:
  6611                           
  6612                           ; BSR set to: 0
  6613  00420A  C080  F080         	movff	___ftpack@arg,?___ftpack
  6614  00420E  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
  6615  004212  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
  6616  004216  0012               	return	
  6617  004218                     __end_of___ftpack:
  6618                           	opt stack 0
  6619                           tblptru	equ	0xFF8
  6620                           tblptrh	equ	0xFF7
  6621                           tblptrl	equ	0xFF6
  6622                           tablat	equ	0xFF5
  6623                           prodh	equ	0xFF4
  6624                           prodl	equ	0xFF3
  6625                           postinc0	equ	0xFEE
  6626                           wreg	equ	0xFE8
  6627                           postdec1	equ	0xFE5
  6628                           fsr1l	equ	0xFE1
  6629                           indf2	equ	0xFDF
  6630                           postinc2	equ	0xFDE
  6631                           postdec2	equ	0xFDD
  6632                           fsr2h	equ	0xFDA
  6633                           fsr2l	equ	0xFD9
  6634                           status	equ	0xFD8
  6635                           
  6636 ;; *************** function _Distribution *****************
  6637 ;; Defined at:
  6638 ;;		line 385 in file "sort.c"
  6639 ;; Parameters:    Size  Location     Type
  6640 ;;		None
  6641 ;; Auto vars:     Size  Location     Type
  6642 ;;		None
  6643 ;; Return value:  Size  Location     Type
  6644 ;;                  1    wreg      void 
  6645 ;; Registers used:
  6646 ;;		wreg, status,2, status,0, cstack
  6647 ;; Tracked objects:
  6648 ;;		On entry : 0/0
  6649 ;;		On exit  : 0/0
  6650 ;;		Unchanged: 0/0
  6651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6654 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6655 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6656 ;;Total ram usage:        2 bytes
  6657 ;; Hardware stack levels used:    1
  6658 ;; Hardware stack levels required when called:    8
  6659 ;; This function calls:
  6660 ;;		_updateServoPosition
  6661 ;; This function is called by:
  6662 ;;		_sort
  6663 ;; This function uses a non-reentrant model
  6664 ;;
  6665                           
  6666                           	psect	text14
  6667  004504                     __ptext14:
  6668                           	opt stack 0
  6669  004504                     _Distribution:
  6670                           	opt stack 21
  6671                           
  6672                           ;sort.c: 386: if(f_can_coming_to_distribution){
  6673                           
  6674                           ; BSR set to: 0
  6675                           ;incstack = 0
  6676  004504  0101               	movlb	1	; () banked
  6677  004506  5131               	movf	_f_can_coming_to_distribution& (0+255),w,b
  6678  004508  0101               	movlb	1	; () banked
  6679  00450A  1132               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  6680  00450C  B4D8               	btfsc	status,2,c
  6681  00450E  0012               	return	
  6682                           
  6683                           ; BSR set to: 1
  6684                           ;sort.c: 387: f_can_distributed = 0;
  6685  004510  0E00               	movlw	0
  6686  004512  0101               	movlb	1	; () banked
  6687  004514  6F34               	movwf	(_f_can_distributed+1)& (0+255),b
  6688  004516  0E00               	movlw	0
  6689  004518  6F33               	movwf	_f_can_distributed& (0+255),b
  6690                           
  6691                           ;sort.c: 394: switch(cur_can){
  6692  00451A  D034               	goto	l8260
  6693  00451C                     l8250:
  6694                           
  6695                           ;sort.c: 396: updateServoPosition(500, 1);
  6696  00451C  0E01               	movlw	1
  6697  00451E  0100               	movlb	0	; () banked
  6698  004520  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6699  004522  0EF4               	movlw	244
  6700  004524  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6701  004526  0E00               	movlw	0
  6702  004528  0100               	movlb	0	; () banked
  6703  00452A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6704  00452C  0E01               	movlw	1
  6705  00452E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6706  004530  ECB4  F026         	call	_updateServoPosition	;wreg free
  6707                           
  6708                           ;sort.c: 397: break;
  6709  004534  D03E               	goto	l8262
  6710  004536                     l8252:
  6711                           
  6712                           ;sort.c: 399: updateServoPosition(850, 1);
  6713  004536  0E03               	movlw	3
  6714  004538  0100               	movlb	0	; () banked
  6715  00453A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6716  00453C  0E52               	movlw	82
  6717  00453E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6718  004540  0E00               	movlw	0
  6719  004542  0100               	movlb	0	; () banked
  6720  004544  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6721  004546  0E01               	movlw	1
  6722  004548  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6723  00454A  ECB4  F026         	call	_updateServoPosition	;wreg free
  6724                           
  6725                           ;sort.c: 400: break;
  6726  00454E  D031               	goto	l8262
  6727  004550                     l8254:
  6728                           
  6729                           ;sort.c: 402: updateServoPosition(1670, 1);
  6730  004550  0E06               	movlw	6
  6731  004552  0100               	movlb	0	; () banked
  6732  004554  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6733  004556  0E86               	movlw	134
  6734  004558  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6735  00455A  0E00               	movlw	0
  6736  00455C  0100               	movlb	0	; () banked
  6737  00455E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6738  004560  0E01               	movlw	1
  6739  004562  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6740  004564  ECB4  F026         	call	_updateServoPosition	;wreg free
  6741                           
  6742                           ;sort.c: 403: break;
  6743  004568  D024               	goto	l8262
  6744  00456A                     l8256:
  6745                           
  6746                           ;sort.c: 405: updateServoPosition(2400, 1);
  6747  00456A  0E09               	movlw	9
  6748  00456C  0100               	movlb	0	; () banked
  6749  00456E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6750  004570  0E60               	movlw	96
  6751  004572  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6752  004574  0E00               	movlw	0
  6753  004576  0100               	movlb	0	; () banked
  6754  004578  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6755  00457A  0E01               	movlw	1
  6756  00457C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6757  00457E  ECB4  F026         	call	_updateServoPosition	;wreg free
  6758                           
  6759                           ;sort.c: 409: }
  6760                           
  6761                           ;sort.c: 408: break;
  6762                           
  6763                           ;sort.c: 407: default:
  6764                           
  6765                           ;sort.c: 406: break;
  6766  004582  D017               	goto	l8262
  6767  004584                     l8260:
  6768  004584  C12B  F088         	movff	_cur_can,??_Distribution
  6769  004588  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  6770                           
  6771                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6772                           ; Switch size 1, requested type "space"
  6773                           ; Number of cases is 1, Range of values is 0 to 0
  6774                           ; switch strategies available:
  6775                           ; Name         Instructions Cycles
  6776                           ; simple_byte            4     3 (average)
  6777                           ;	Chosen strategy is simple_byte
  6778  00458C  0100               	movlb	0	; () banked
  6779  00458E  5189               	movf	(??_Distribution+1)& (0+255),w,b
  6780  004590  0A00               	xorlw	0	; case 0
  6781  004592  A4D8               	btfss	status,2,c
  6782  004594  D00E               	goto	l8262
  6783                           
  6784                           ; BSR set to: 0
  6785                           ; Switch size 1, requested type "space"
  6786                           ; Number of cases is 4, Range of values is 0 to 3
  6787                           ; switch strategies available:
  6788                           ; Name         Instructions Cycles
  6789                           ; simple_byte           13     7 (average)
  6790                           ;	Chosen strategy is simple_byte
  6791  004596  0100               	movlb	0	; () banked
  6792  004598  5188               	movf	??_Distribution& (0+255),w,b
  6793  00459A  0A00               	xorlw	0	; case 0
  6794  00459C  B4D8               	btfsc	status,2,c
  6795  00459E  D7BE               	goto	l8250
  6796  0045A0  0A01               	xorlw	1	; case 1
  6797  0045A2  B4D8               	btfsc	status,2,c
  6798  0045A4  D7C8               	goto	l8252
  6799  0045A6  0A03               	xorlw	3	; case 2
  6800  0045A8  B4D8               	btfsc	status,2,c
  6801  0045AA  D7D2               	goto	l8254
  6802  0045AC  0A01               	xorlw	1	; case 3
  6803  0045AE  B4D8               	btfsc	status,2,c
  6804  0045B0  D7DC               	goto	l8256
  6805  0045B2                     l8262:
  6806                           
  6807                           ;sort.c: 410: updateServoPosition(1050, 3);
  6808  0045B2  0E04               	movlw	4
  6809  0045B4  0100               	movlb	0	; () banked
  6810  0045B6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6811  0045B8  0E1A               	movlw	26
  6812  0045BA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6813  0045BC  0E00               	movlw	0
  6814  0045BE  0100               	movlb	0	; () banked
  6815  0045C0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6816  0045C2  0E03               	movlw	3
  6817  0045C4  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6818  0045C6  ECB4  F026         	call	_updateServoPosition	;wreg free
  6819                           
  6820                           ;sort.c: 411: servo_timer_target = 750;
  6821  0045CA  0E02               	movlw	2
  6822  0045CC  6E70               	movwf	_servo_timer_target+1,c	;volatile
  6823  0045CE  0EEE               	movlw	238
  6824  0045D0  6E6F               	movwf	_servo_timer_target,c	;volatile
  6825                           
  6826                           ;sort.c: 412: f_panning_to_bin = 1;
  6827  0045D2  0E00               	movlw	0
  6828  0045D4  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
  6829  0045D6  0E01               	movlw	1
  6830  0045D8  6E69               	movwf	_f_panning_to_bin,c	;volatile
  6831                           
  6832                           ;sort.c: 413: f_can_coming_to_distribution = 0;
  6833  0045DA  0E00               	movlw	0
  6834  0045DC  0101               	movlb	1	; () banked
  6835  0045DE  6F32               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  6836  0045E0  0E00               	movlw	0
  6837  0045E2  6F31               	movwf	_f_can_coming_to_distribution& (0+255),b
  6838  0045E4  0012               	return	
  6839  0045E6                     __end_of_Distribution:
  6840                           	opt stack 0
  6841                           tblptru	equ	0xFF8
  6842                           tblptrh	equ	0xFF7
  6843                           tblptrl	equ	0xFF6
  6844                           tablat	equ	0xFF5
  6845                           prodh	equ	0xFF4
  6846                           prodl	equ	0xFF3
  6847                           postinc0	equ	0xFEE
  6848                           wreg	equ	0xFE8
  6849                           postdec1	equ	0xFE5
  6850                           fsr1l	equ	0xFE1
  6851                           indf2	equ	0xFDF
  6852                           postinc2	equ	0xFDE
  6853                           postdec2	equ	0xFDD
  6854                           fsr2h	equ	0xFDA
  6855                           fsr2l	equ	0xFD9
  6856                           status	equ	0xFD8
  6857                           
  6858 ;; *************** function _machineConfig *****************
  6859 ;; Defined at:
  6860 ;;		line 15 in file "MachineConfig.c"
  6861 ;; Parameters:    Size  Location     Type
  6862 ;;		None
  6863 ;; Auto vars:     Size  Location     Type
  6864 ;;		None
  6865 ;; Return value:  Size  Location     Type
  6866 ;;                  1    wreg      void 
  6867 ;; Registers used:
  6868 ;;		wreg, status,2
  6869 ;; Tracked objects:
  6870 ;;		On entry : 0/0
  6871 ;;		On exit  : 0/0
  6872 ;;		Unchanged: 0/0
  6873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6877 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6878 ;;Total ram usage:        0 bytes
  6879 ;; Hardware stack levels used:    1
  6880 ;; Hardware stack levels required when called:    7
  6881 ;; This function calls:
  6882 ;;		Nothing
  6883 ;; This function is called by:
  6884 ;;		_main
  6885 ;; This function uses a non-reentrant model
  6886 ;;
  6887                           
  6888                           	psect	text15
  6889  0050FE                     __ptext15:
  6890                           	opt stack 0
  6891  0050FE                     _machineConfig:
  6892                           	opt stack 23
  6893                           
  6894                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  6895                           
  6896                           ; BSR set to: 1
  6897                           ;incstack = 0
  6898  0050FE  0EF0               	movlw	240
  6899  005100  6ED3               	movwf	4051,c	;volatile
  6900                           
  6901                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  6902  005102  8C9B               	bsf	3995,6,c	;volatile
  6903                           
  6904                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  6905  005104  0E07               	movlw	7
  6906  005106  6E92               	movwf	3986,c	;volatile
  6907                           
  6908                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  6909  005108  0EF2               	movlw	242
  6910  00510A  6E93               	movwf	3987,c	;volatile
  6911                           
  6912                           ;MachineConfig.c: 27: TRISC = 0x00;
  6913  00510C  0E00               	movlw	0
  6914  00510E  6E94               	movwf	3988,c	;volatile
  6915                           
  6916                           ;MachineConfig.c: 31: TRISD = 0x00;
  6917  005110  0E00               	movlw	0
  6918  005112  6E95               	movwf	3989,c	;volatile
  6919                           
  6920                           ;MachineConfig.c: 34: TRISE = 0x00;
  6921  005114  0E00               	movlw	0
  6922  005116  6E96               	movwf	3990,c	;volatile
  6923                           
  6924                           ;MachineConfig.c: 37: LATA = 0x00;
  6925  005118  0E00               	movlw	0
  6926  00511A  6E89               	movwf	3977,c	;volatile
  6927                           
  6928                           ;MachineConfig.c: 38: LATB = 0x00;
  6929  00511C  0E00               	movlw	0
  6930  00511E  6E8A               	movwf	3978,c	;volatile
  6931                           
  6932                           ;MachineConfig.c: 39: LATC = 0x00;
  6933  005120  0E00               	movlw	0
  6934  005122  6E8B               	movwf	3979,c	;volatile
  6935                           
  6936                           ;MachineConfig.c: 40: LATD = 0x00;
  6937  005124  0E00               	movlw	0
  6938  005126  6E8C               	movwf	3980,c	;volatile
  6939                           
  6940                           ;MachineConfig.c: 41: LATE = 0x00;
  6941  005128  0E00               	movlw	0
  6942  00512A  6E8D               	movwf	3981,c	;volatile
  6943                           
  6944                           ;MachineConfig.c: 43: nRBPU = 0;
  6945  00512C  9EF1               	bcf	intcon2,7,c	;volatile
  6946                           
  6947                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  6948  00512E  0E00               	movlw	0
  6949  005130  6EC2               	movwf	4034,c	;volatile
  6950                           
  6951                           ;MachineConfig.c: 47: ADCON1 = 0b00001100;
  6952  005132  0E0C               	movlw	12
  6953  005134  6EC1               	movwf	4033,c	;volatile
  6954                           
  6955                           ;MachineConfig.c: 51: CVRCON = 0x00;
  6956  005136  0E00               	movlw	0
  6957  005138  6EB5               	movwf	4021,c	;volatile
  6958                           
  6959                           ;MachineConfig.c: 52: CMCONbits.CIS = 0;
  6960  00513A  96B4               	bcf	4020,3,c	;volatile
  6961                           
  6962                           ;MachineConfig.c: 53: ADCON2 = 0b10110001;
  6963  00513C  0EB1               	movlw	177
  6964  00513E  6EC0               	movwf	4032,c	;volatile
  6965                           
  6966                           ;MachineConfig.c: 56: INT1IE = 1;
  6967  005140  86F0               	bsf	intcon3,3,c	;volatile
  6968                           
  6969                           ;MachineConfig.c: 58: TMR0IE = 1;
  6970  005142  8AF2               	bsf	intcon,5,c	;volatile
  6971                           
  6972                           ;MachineConfig.c: 59: TMR1IE = 1;
  6973  005144  809D               	bsf	3997,0,c	;volatile
  6974                           
  6975                           ;MachineConfig.c: 60: TMR2IE = 1;
  6976  005146  829D               	bsf	3997,1,c	;volatile
  6977                           
  6978                           ;MachineConfig.c: 61: TMR3IE = 1;
  6979  005148  82A0               	bsf	4000,1,c	;volatile
  6980                           
  6981                           ;MachineConfig.c: 63: T1CON = 0b10110000;
  6982  00514A  0EB0               	movlw	176
  6983  00514C  6ECD               	movwf	4045,c	;volatile
  6984                           
  6985                           ;MachineConfig.c: 64: T2CON = 0b01111011;
  6986  00514E  0E7B               	movlw	123
  6987  005150  6ECA               	movwf	4042,c	;volatile
  6988                           
  6989                           ;MachineConfig.c: 65: PR2 = 0x22;
  6990  005152  0E22               	movlw	34
  6991  005154  6ECB               	movwf	4043,c	;volatile
  6992                           
  6993                           ;MachineConfig.c: 66: T3CON = 0b10110000;
  6994  005156  0EB0               	movlw	176
  6995  005158  6EB1               	movwf	4017,c	;volatile
  6996                           
  6997                           ;MachineConfig.c: 67: PEIE = 1;
  6998  00515A  8CF2               	bsf	intcon,6,c	;volatile
  6999                           
  7000                           ;MachineConfig.c: 68: ADIE = 0;
  7001  00515C  9C9D               	bcf	3997,6,c	;volatile
  7002                           
  7003                           ;MachineConfig.c: 69: (INTCONbits.GIE = 0);
  7004  00515E  9EF2               	bcf	intcon,7,c	;volatile
  7005  005160  0012               	return		;funcret
  7006  005162                     __end_of_machineConfig:
  7007                           	opt stack 0
  7008                           tblptru	equ	0xFF8
  7009                           tblptrh	equ	0xFF7
  7010                           tblptrl	equ	0xFF6
  7011                           tablat	equ	0xFF5
  7012                           prodh	equ	0xFF4
  7013                           prodl	equ	0xFF3
  7014                           intcon	equ	0xFF2
  7015                           intcon2	equ	0xFF1
  7016                           intcon3	equ	0xFF0
  7017                           postinc0	equ	0xFEE
  7018                           wreg	equ	0xFE8
  7019                           postdec1	equ	0xFE5
  7020                           fsr1l	equ	0xFE1
  7021                           indf2	equ	0xFDF
  7022                           postinc2	equ	0xFDE
  7023                           postdec2	equ	0xFDD
  7024                           fsr2h	equ	0xFDA
  7025                           fsr2l	equ	0xFD9
  7026                           status	equ	0xFD8
  7027                           
  7028 ;; *************** function _logRun *****************
  7029 ;; Defined at:
  7030 ;;		line 88 in file "EEPROM.c"
  7031 ;; Parameters:    Size  Location     Type
  7032 ;;		None
  7033 ;; Auto vars:     Size  Location     Type
  7034 ;;  byte_i          1   53[BANK0 ] unsigned char 
  7035 ;;  i               2   55[BANK0 ] int 
  7036 ;;  num             1   49[BANK0 ] unsigned char 
  7037 ;;  addr            2   57[BANK0 ] unsigned short 
  7038 ;;  byte11          1   54[BANK0 ] unsigned char 
  7039 ;;  byte3           1   52[BANK0 ] unsigned char 
  7040 ;;  byte2           1   51[BANK0 ] unsigned char 
  7041 ;;  byte1           1   50[BANK0 ] unsigned char 
  7042 ;; Return value:  Size  Location     Type
  7043 ;;                  1    wreg      void 
  7044 ;; Registers used:
  7045 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7046 ;; Tracked objects:
  7047 ;;		On entry : 0/0
  7048 ;;		On exit  : 0/0
  7049 ;;		Unchanged: 0/0
  7050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7052 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7054 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7055 ;;Total ram usage:       10 bytes
  7056 ;; Hardware stack levels used:    1
  7057 ;; Hardware stack levels required when called:   11
  7058 ;; This function calls:
  7059 ;;		_EEPROM_read
  7060 ;;		_EEPROM_write
  7061 ;; This function is called by:
  7062 ;;		_main
  7063 ;; This function uses a non-reentrant model
  7064 ;;
  7065                           
  7066                           	psect	text16
  7067  003EA2                     __ptext16:
  7068                           	opt stack 0
  7069  003EA2                     _logRun:
  7070                           	opt stack 19
  7071                           
  7072                           ;EEPROM.c: 101: sel = EEPROM_read(0);
  7073                           
  7074                           ;incstack = 0
  7075  003EA2  0E00               	movlw	0
  7076  003EA4  0100               	movlb	0	; () banked
  7077  003EA6  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  7078  003EA8  0E00               	movlw	0
  7079  003EAA  6F80               	movwf	EEPROM_read@address& (0+255),b
  7080  003EAC  EC8C  F02D         	call	_EEPROM_read	;wreg free
  7081  003EB0  0100               	movlb	0	; () banked
  7082  003EB2  6FFD               	movwf	_sel& (0+255),b
  7083                           
  7084                           ; BSR set to: 0
  7085                           ;EEPROM.c: 102: unsigned short addr = 1 + 11 * sel;
  7086  003EB4  0100               	movlb	0	; () banked
  7087  003EB6  51FD               	movf	_sel& (0+255),w,b
  7088  003EB8  0D0B               	mullw	11
  7089  003EBA  0E01               	movlw	1
  7090  003EBC  24F3               	addwf	prodl,w,c
  7091  003EBE  0100               	movlb	0	; () banked
  7092  003EC0  6FB9               	movwf	logRun@addr& (0+255),b
  7093  003EC2  0E00               	movlw	0
  7094  003EC4  20F4               	addwfc	prodh,w,c
  7095  003EC6  0100               	movlb	0	; () banked
  7096  003EC8  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  7097                           
  7098                           ; BSR set to: 0
  7099                           ;EEPROM.c: 105: if (sel < 3){
  7100  003ECA  0E03               	movlw	3
  7101  003ECC  0100               	movlb	0	; () banked
  7102  003ECE  61FD               	cpfslt	_sel& (0+255),b
  7103  003ED0  D00E               	goto	l9938
  7104                           
  7105                           ; BSR set to: 0
  7106                           ;EEPROM.c: 106: unsigned char num = sel+1;
  7107  003ED2  0100               	movlb	0	; () banked
  7108  003ED4  29FD               	incf	_sel& (0+255),w,b
  7109  003ED6  0100               	movlb	0	; () banked
  7110  003ED8  6FB1               	movwf	logRun@num& (0+255),b
  7111                           
  7112                           ; BSR set to: 0
  7113                           ;EEPROM.c: 107: EEPROM_write(0, num);
  7114  003EDA  0E00               	movlw	0
  7115  003EDC  0100               	movlb	0	; () banked
  7116  003EDE  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7117  003EE0  0E00               	movlw	0
  7118  003EE2  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7119  003EE4  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  7120  003EE8  EC0E  F022         	call	_EEPROM_write	;wreg free
  7121                           
  7122                           ;EEPROM.c: 108: }
  7123  003EEC  D00A               	goto	l9940
  7124  003EEE                     l9938:
  7125                           
  7126                           ;EEPROM.c: 109: else{
  7127                           ;EEPROM.c: 110: EEPROM_write(0, 0);
  7128  003EEE  0E00               	movlw	0
  7129  003EF0  0100               	movlb	0	; () banked
  7130  003EF2  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7131  003EF4  0E00               	movlw	0
  7132  003EF6  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7133  003EF8  0E00               	movlw	0
  7134  003EFA  0100               	movlb	0	; () banked
  7135  003EFC  6FAD               	movwf	EEPROM_write@data& (0+255),b
  7136  003EFE  EC0E  F022         	call	_EEPROM_write	;wreg free
  7137  003F02                     l9940:
  7138                           
  7139                           ;EEPROM.c: 111: }
  7140                           ;EEPROM.c: 114: unsigned char byte1 = 0b10000000 | count_total;
  7141  003F02  0100               	movlb	0	; () banked
  7142  003F04  51FE               	movf	_count_total& (0+255),w,b
  7143  003F06  0980               	iorlw	128
  7144  003F08  0100               	movlb	0	; () banked
  7145  003F0A  6FB2               	movwf	logRun@byte1& (0+255),b
  7146                           
  7147                           ; BSR set to: 0
  7148                           ;EEPROM.c: 115: EEPROM_write(addr, byte1);
  7149  003F0C  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7150  003F10  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7151  003F14  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  7152  003F18  EC0E  F022         	call	_EEPROM_write	;wreg free
  7153                           
  7154                           ;EEPROM.c: 116: addr++;
  7155  003F1C  0100               	movlb	0	; () banked
  7156  003F1E  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7157  003F20  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7158                           
  7159                           ; BSR set to: 0
  7160                           ;EEPROM.c: 119: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  7161  003F22  0101               	movlb	1	; () banked
  7162  003F24  3927               	swapf	_count_pop_no_tab& (0+255),w,b
  7163  003F26  0BF0               	andlw	240
  7164  003F28  0101               	movlb	1	; () banked
  7165  003F2A  1129               	iorwf	_count_pop_w_tab& (0+255),w,b
  7166  003F2C  0100               	movlb	0	; () banked
  7167  003F2E  6FB3               	movwf	logRun@byte2& (0+255),b
  7168                           
  7169                           ; BSR set to: 0
  7170                           ;EEPROM.c: 120: EEPROM_write(addr, byte2);
  7171  003F30  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7172  003F34  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7173  003F38  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  7174  003F3C  EC0E  F022         	call	_EEPROM_write	;wreg free
  7175                           
  7176                           ;EEPROM.c: 121: addr++;
  7177  003F40  0100               	movlb	0	; () banked
  7178  003F42  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7179  003F44  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7180                           
  7181                           ; BSR set to: 0
  7182                           ;EEPROM.c: 122: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  7183  003F46  0101               	movlb	1	; () banked
  7184  003F48  3925               	swapf	_count_can_w_lab& (0+255),w,b
  7185  003F4A  0BF0               	andlw	240
  7186  003F4C  0101               	movlb	1	; () banked
  7187  003F4E  1123               	iorwf	_count_can_no_lab& (0+255),w,b
  7188  003F50  0100               	movlb	0	; () banked
  7189  003F52  6FB4               	movwf	logRun@byte3& (0+255),b
  7190                           
  7191                           ; BSR set to: 0
  7192                           ;EEPROM.c: 123: EEPROM_write(addr, byte3);
  7193  003F54  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7194  003F58  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7195  003F5C  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  7196  003F60  EC0E  F022         	call	_EEPROM_write	;wreg free
  7197                           
  7198                           ;EEPROM.c: 124: addr++;
  7199  003F64  0100               	movlb	0	; () banked
  7200  003F66  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7201  003F68  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7202                           
  7203                           ; BSR set to: 0
  7204                           ;EEPROM.c: 127: for(int i = 0; i < 7; i++){
  7205  003F6A  0E00               	movlw	0
  7206  003F6C  0100               	movlb	0	; () banked
  7207  003F6E  6FB8               	movwf	(logRun@i+1)& (0+255),b
  7208  003F70  0E00               	movlw	0
  7209  003F72  6FB7               	movwf	logRun@i& (0+255),b
  7210                           
  7211                           ; BSR set to: 0
  7212  003F74  0100               	movlb	0	; () banked
  7213  003F76  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7214  003F78  D008               	goto	l9964
  7215  003F7A  0100               	movlb	0	; () banked
  7216  003F7C  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7217  003F7E  E128               	bnz	l1151
  7218  003F80  0E07               	movlw	7
  7219  003F82  0100               	movlb	0	; () banked
  7220  003F84  5DB7               	subwf	logRun@i& (0+255),w,b
  7221  003F86  B0D8               	btfsc	status,0,c
  7222  003F88  D023               	goto	l1151
  7223  003F8A                     l9964:
  7224                           
  7225                           ; BSR set to: 0
  7226                           ;EEPROM.c: 128: unsigned char byte_i = startTime[i];
  7227  003F8A  90D8               	bcf	status,0,c
  7228  003F8C  0100               	movlb	0	; () banked
  7229  003F8E  35B7               	rlcf	logRun@i& (0+255),w,b
  7230  003F90  6ED9               	movwf	fsr2l,c
  7231  003F92  0100               	movlb	0	; () banked
  7232  003F94  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  7233  003F96  6EDA               	movwf	fsr2h,c
  7234  003F98  0E0E               	movlw	low _startTime
  7235  003F9A  26D9               	addwf	fsr2l,f,c
  7236  003F9C  0E01               	movlw	high _startTime
  7237  003F9E  22DA               	addwfc	fsr2h,f,c
  7238  003FA0  50DF               	movf	indf2,w,c
  7239  003FA2  0100               	movlb	0	; () banked
  7240  003FA4  6FB5               	movwf	logRun@byte_i& (0+255),b
  7241                           
  7242                           ; BSR set to: 0
  7243                           ;EEPROM.c: 129: EEPROM_write(addr, byte_i);
  7244  003FA6  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7245  003FAA  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7246  003FAE  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  7247  003FB2  EC0E  F022         	call	_EEPROM_write	;wreg free
  7248                           
  7249                           ;EEPROM.c: 130: addr++;
  7250  003FB6  0100               	movlb	0	; () banked
  7251  003FB8  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7252  003FBA  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7253                           
  7254                           ; BSR set to: 0
  7255  003FBC  0100               	movlb	0	; () banked
  7256  003FBE  4BB7               	infsnz	logRun@i& (0+255),f,b
  7257  003FC0  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  7258                           
  7259                           ; BSR set to: 0
  7260  003FC2  0100               	movlb	0	; () banked
  7261  003FC4  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7262  003FC6  D7E1               	goto	l9964
  7263  003FC8  0100               	movlb	0	; () banked
  7264  003FCA  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7265  003FCC  E101               	bnz	u9480
  7266  003FCE  D7D8               	goto	L8
  7267  003FD0                     u9480:
  7268  003FD0                     l1151:
  7269                           
  7270                           ; BSR set to: 0
  7271                           ;EEPROM.c: 131: }
  7272                           ;EEPROM.c: 134: unsigned char byte11 = total_time;
  7273  003FD0  C0FA  F0B6         	movff	_total_time,logRun@byte11
  7274                           
  7275                           ; BSR set to: 0
  7276                           ;EEPROM.c: 135: EEPROM_write(addr, byte11);
  7277  003FD4  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7278  003FD8  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7279  003FDC  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  7280  003FE0  EC0E  F022         	call	_EEPROM_write	;wreg free
  7281  003FE4  0012               	return		;funcret
  7282  003FE6                     __end_of_logRun:
  7283                           	opt stack 0
  7284                           tblptru	equ	0xFF8
  7285                           tblptrh	equ	0xFF7
  7286                           tblptrl	equ	0xFF6
  7287                           tablat	equ	0xFF5
  7288                           prodh	equ	0xFF4
  7289                           prodl	equ	0xFF3
  7290                           intcon	equ	0xFF2
  7291                           intcon2	equ	0xFF1
  7292                           intcon3	equ	0xFF0
  7293                           postinc0	equ	0xFEE
  7294                           wreg	equ	0xFE8
  7295                           postdec1	equ	0xFE5
  7296                           fsr1l	equ	0xFE1
  7297                           indf2	equ	0xFDF
  7298                           postinc2	equ	0xFDE
  7299                           postdec2	equ	0xFDD
  7300                           fsr2h	equ	0xFDA
  7301                           fsr2l	equ	0xFD9
  7302                           status	equ	0xFD8
  7303                           
  7304 ;; *************** function _initUI *****************
  7305 ;; Defined at:
  7306 ;;		line 62 in file "UI.c"
  7307 ;; Parameters:    Size  Location     Type
  7308 ;;		None
  7309 ;; Auto vars:     Size  Location     Type
  7310 ;;		None
  7311 ;; Return value:  Size  Location     Type
  7312 ;;                  1    wreg      void 
  7313 ;; Registers used:
  7314 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7315 ;; Tracked objects:
  7316 ;;		On entry : 0/0
  7317 ;;		On exit  : 0/0
  7318 ;;		Unchanged: 0/0
  7319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7324 ;;Total ram usage:        0 bytes
  7325 ;; Hardware stack levels used:    1
  7326 ;; Hardware stack levels required when called:   12
  7327 ;; This function calls:
  7328 ;;		_change_state_to_menu_start
  7329 ;;		_loadRTC
  7330 ;; This function is called by:
  7331 ;;		_main
  7332 ;; This function uses a non-reentrant model
  7333 ;;
  7334                           
  7335                           	psect	text17
  7336  005700                     __ptext17:
  7337                           	opt stack 0
  7338  005700                     _initUI:
  7339                           	opt stack 18
  7340                           
  7341                           ;UI.c: 63: (INTCONbits.GIE = 1);
  7342                           
  7343                           ;incstack = 0
  7344  005700  8EF2               	bsf	intcon,7,c	;volatile
  7345                           
  7346                           ;UI.c: 64: machine_state = UI_state;
  7347  005702  0E00               	movlw	0
  7348  005704  0100               	movlb	0	; () banked
  7349  005706  6FFC               	movwf	_machine_state& (0+255),b
  7350                           
  7351                           ;UI.c: 65: logstate = 0;
  7352  005708  0E00               	movlw	0
  7353  00570A  0100               	movlb	0	; () banked
  7354  00570C  6FF9               	movwf	(_logstate+1)& (0+255),b
  7355  00570E  0E00               	movlw	0
  7356  005710  6FF8               	movwf	_logstate& (0+255),b
  7357                           
  7358                           ; BSR set to: 0
  7359                           ;UI.c: 67: if(RTCflag){
  7360  005712  0100               	movlb	0	; () banked
  7361  005714  51E4               	movf	_RTCflag& (0+255),w,b
  7362  005716  0100               	movlb	0	; () banked
  7363  005718  11E5               	iorwf	(_RTCflag+1)& (0+255),w,b
  7364  00571A  A4D8               	btfss	status,2,c
  7365                           
  7366                           ; BSR set to: 0
  7367                           ;UI.c: 68: loadRTC();
  7368  00571C  ECE9  F025         	call	_loadRTC	;wreg free
  7369                           
  7370                           ;UI.c: 69: }
  7371                           ;UI.c: 71: change_state_to_menu_start();
  7372  005720  EC9E  F02C         	call	_change_state_to_menu_start	;wreg free
  7373                           
  7374                           ;UI.c: 72: firstboot = 1;
  7375  005724  0E00               	movlw	0
  7376  005726  0101               	movlb	1	; () banked
  7377  005728  6F3A               	movwf	(_firstboot+1)& (0+255),b
  7378  00572A  0E01               	movlw	1
  7379  00572C  6F39               	movwf	_firstboot& (0+255),b
  7380                           
  7381                           ; BSR set to: 1
  7382  00572E  0012               	return		;funcret
  7383  005730                     __end_of_initUI:
  7384                           	opt stack 0
  7385                           tblptru	equ	0xFF8
  7386                           tblptrh	equ	0xFF7
  7387                           tblptrl	equ	0xFF6
  7388                           tablat	equ	0xFF5
  7389                           prodh	equ	0xFF4
  7390                           prodl	equ	0xFF3
  7391                           intcon	equ	0xFF2
  7392                           intcon2	equ	0xFF1
  7393                           intcon3	equ	0xFF0
  7394                           postinc0	equ	0xFEE
  7395                           wreg	equ	0xFE8
  7396                           postdec1	equ	0xFE5
  7397                           fsr1l	equ	0xFE1
  7398                           indf2	equ	0xFDF
  7399                           postinc2	equ	0xFDE
  7400                           postdec2	equ	0xFDD
  7401                           fsr2h	equ	0xFDA
  7402                           fsr2l	equ	0xFD9
  7403                           status	equ	0xFD8
  7404                           
  7405 ;; *************** function _loadRTC *****************
  7406 ;; Defined at:
  7407 ;;		line 28 in file "RTC.c"
  7408 ;; Parameters:    Size  Location     Type
  7409 ;;		None
  7410 ;; Auto vars:     Size  Location     Type
  7411 ;;  i               2   22[BANK0 ] int 
  7412 ;; Return value:  Size  Location     Type
  7413 ;;                  1    wreg      void 
  7414 ;; Registers used:
  7415 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7416 ;; Tracked objects:
  7417 ;;		On entry : 0/0
  7418 ;;		On exit  : 0/0
  7419 ;;		Unchanged: 0/0
  7420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7422 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7423 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7424 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7425 ;;Total ram usage:        3 bytes
  7426 ;; Hardware stack levels used:    1
  7427 ;; Hardware stack levels required when called:    9
  7428 ;; This function calls:
  7429 ;;		_I2C_Master_Init
  7430 ;;		_I2C_Master_Start
  7431 ;;		_I2C_Master_Stop
  7432 ;;		_I2C_Master_Write
  7433 ;; This function is called by:
  7434 ;;		_initUI
  7435 ;; This function uses a non-reentrant model
  7436 ;;
  7437                           
  7438                           	psect	text18
  7439  004BD2                     __ptext18:
  7440                           	opt stack 0
  7441  004BD2                     _loadRTC:
  7442                           	opt stack 20
  7443                           
  7444                           ;RTC.c: 30: I2C_Master_Init(10000);
  7445                           
  7446                           ; BSR set to: 1
  7447                           ;incstack = 0
  7448  004BD2  0E10               	movlw	16
  7449  004BD4  0100               	movlb	0	; () banked
  7450  004BD6  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  7451  004BD8  0E27               	movlw	39
  7452  004BDA  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  7453  004BDC  0E00               	movlw	0
  7454  004BDE  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  7455  004BE0  0E00               	movlw	0
  7456  004BE2  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  7457  004BE4  ECE2  F028         	call	_I2C_Master_Init	;wreg free
  7458                           
  7459                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  7460  004BE8  9EF2               	bcf	intcon,7,c	;volatile
  7461                           
  7462                           ;RTC.c: 34: I2C_Master_Start();
  7463  004BEA  ECEF  F02D         	call	_I2C_Master_Start	;wreg free
  7464                           
  7465                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  7466  004BEE  0E00               	movlw	0
  7467  004BF0  0100               	movlb	0	; () banked
  7468  004BF2  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7469  004BF4  0ED0               	movlw	208
  7470  004BF6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7471  004BF8  ECDD  F02D         	call	_I2C_Master_Write	;wreg free
  7472                           
  7473                           ;RTC.c: 36: I2C_Master_Write(0x00);
  7474  004BFC  0E00               	movlw	0
  7475  004BFE  0100               	movlb	0	; () banked
  7476  004C00  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7477  004C02  0E00               	movlw	0
  7478  004C04  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7479  004C06  ECDD  F02D         	call	_I2C_Master_Write	;wreg free
  7480                           
  7481                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  7482  004C0A  0E00               	movlw	0
  7483  004C0C  0100               	movlb	0	; () banked
  7484  004C0E  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  7485  004C10  0E00               	movlw	0
  7486  004C12  6F96               	movwf	loadRTC@i& (0+255),b
  7487  004C14                     l7654:
  7488                           
  7489                           ; BSR set to: 0
  7490  004C14  0100               	movlb	0	; () banked
  7491  004C16  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  7492  004C18  D008               	goto	l7658
  7493  004C1A  0100               	movlb	0	; () banked
  7494  004C1C  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  7495  004C1E  E11B               	bnz	l7664
  7496  004C20  0E07               	movlw	7
  7497  004C22  0100               	movlb	0	; () banked
  7498  004C24  5D96               	subwf	loadRTC@i& (0+255),w,b
  7499  004C26  B0D8               	btfsc	status,0,c
  7500  004C28  D016               	goto	l7664
  7501  004C2A                     l7658:
  7502                           
  7503                           ; BSR set to: 0
  7504                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  7505  004C2A  0E1C               	movlw	low _time
  7506  004C2C  0100               	movlb	0	; () banked
  7507  004C2E  2596               	addwf	loadRTC@i& (0+255),w,b
  7508  004C30  6ED9               	movwf	fsr2l,c
  7509  004C32  0E01               	movlw	high _time
  7510  004C34  0100               	movlb	0	; () banked
  7511  004C36  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  7512  004C38  6EDA               	movwf	fsr2h,c
  7513  004C3A  50DF               	movf	indf2,w,c
  7514  004C3C  0100               	movlb	0	; () banked
  7515  004C3E  6F95               	movwf	??_loadRTC& (0+255),b
  7516  004C40  0100               	movlb	0	; () banked
  7517  004C42  5195               	movf	??_loadRTC& (0+255),w,b
  7518  004C44  0100               	movlb	0	; () banked
  7519  004C46  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7520  004C48  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  7521  004C4A  ECDD  F02D         	call	_I2C_Master_Write	;wreg free
  7522  004C4E  0100               	movlb	0	; () banked
  7523  004C50  4B96               	infsnz	loadRTC@i& (0+255),f,b
  7524  004C52  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  7525  004C54  D7DF               	goto	l7654
  7526  004C56                     l7664:
  7527                           
  7528                           ; BSR set to: 0
  7529                           ;RTC.c: 39: }
  7530                           ;RTC.c: 40: I2C_Master_Stop();
  7531  004C56  ECEB  F02D         	call	_I2C_Master_Stop	;wreg free
  7532                           
  7533                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  7534  004C5A  8EF2               	bsf	intcon,7,c	;volatile
  7535  004C5C  0012               	return		;funcret
  7536  004C5E                     __end_of_loadRTC:
  7537                           	opt stack 0
  7538                           tblptru	equ	0xFF8
  7539                           tblptrh	equ	0xFF7
  7540                           tblptrl	equ	0xFF6
  7541                           tablat	equ	0xFF5
  7542                           prodh	equ	0xFF4
  7543                           prodl	equ	0xFF3
  7544                           intcon	equ	0xFF2
  7545                           intcon2	equ	0xFF1
  7546                           intcon3	equ	0xFF0
  7547                           postinc0	equ	0xFEE
  7548                           wreg	equ	0xFE8
  7549                           postdec1	equ	0xFE5
  7550                           fsr1l	equ	0xFE1
  7551                           indf2	equ	0xFDF
  7552                           postinc2	equ	0xFDE
  7553                           postdec2	equ	0xFDD
  7554                           fsr2h	equ	0xFDA
  7555                           fsr2l	equ	0xFD9
  7556                           status	equ	0xFD8
  7557                           
  7558 ;; *************** function _I2C_Master_Init *****************
  7559 ;; Defined at:
  7560 ;;		line 15 in file "I2C.c"
  7561 ;; Parameters:    Size  Location     Type
  7562 ;;  c               4   13[BANK0 ] const unsigned long 
  7563 ;; Auto vars:     Size  Location     Type
  7564 ;;		None
  7565 ;; Return value:  Size  Location     Type
  7566 ;;                  1    wreg      void 
  7567 ;; Registers used:
  7568 ;;		wreg, status,2, status,0, cstack
  7569 ;; Tracked objects:
  7570 ;;		On entry : 0/0
  7571 ;;		On exit  : 0/0
  7572 ;;		Unchanged: 0/0
  7573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7574 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7576 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7577 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7578 ;;Total ram usage:        8 bytes
  7579 ;; Hardware stack levels used:    1
  7580 ;; Hardware stack levels required when called:    8
  7581 ;; This function calls:
  7582 ;;		___lldiv
  7583 ;; This function is called by:
  7584 ;;		_main
  7585 ;;		_loadRTC
  7586 ;; This function uses a non-reentrant model
  7587 ;;
  7588                           
  7589                           	psect	text19
  7590  0051C4                     __ptext19:
  7591                           	opt stack 0
  7592  0051C4                     _I2C_Master_Init:
  7593                           	opt stack 20
  7594                           
  7595                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  7596                           
  7597                           ;incstack = 0
  7598  0051C4  0E00               	movlw	0
  7599  0051C6  6EC7               	movwf	4039,c	;volatile
  7600                           
  7601                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  7602  0051C8  0E28               	movlw	40
  7603  0051CA  6EC6               	movwf	4038,c	;volatile
  7604                           
  7605                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  7606  0051CC  0E00               	movlw	0
  7607  0051CE  6EC5               	movwf	4037,c	;volatile
  7608                           
  7609                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  7610  0051D0  0E00               	movlw	0
  7611  0051D2  0100               	movlb	0	; () banked
  7612  0051D4  6F80               	movwf	___lldiv@dividend& (0+255),b
  7613  0051D6  0E48               	movlw	72
  7614  0051D8  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  7615  0051DA  0EE8               	movlw	232
  7616  0051DC  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  7617  0051DE  0E01               	movlw	1
  7618  0051E0  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  7619  0051E2  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  7620  0051E6  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  7621  0051EA  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  7622  0051EE  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  7623  0051F2  0E02               	movlw	2
  7624  0051F4                     u5995:
  7625  0051F4  90D8               	bcf	status,0,c
  7626  0051F6  0100               	movlb	0	; () banked
  7627  0051F8  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  7628  0051FA  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  7629  0051FC  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  7630  0051FE  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  7631  005200  2EE8               	decfsz	wreg,f,c
  7632  005202  D7F8               	goto	u5995
  7633  005204  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  7634  005208  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  7635  00520C  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  7636  005210  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  7637  005214  ECE5  F024         	call	___lldiv	;wreg free
  7638  005218  0100               	movlb	0	; () banked
  7639  00521A  0580               	decf	?___lldiv& (0+255),w,b
  7640  00521C  6EC8               	movwf	4040,c	;volatile
  7641                           
  7642                           ; BSR set to: 0
  7643                           ;I2C.c: 22: TRISC3 = 1;
  7644  00521E  8694               	bsf	3988,3,c	;volatile
  7645                           
  7646                           ; BSR set to: 0
  7647                           ;I2C.c: 23: TRISC4 = 1;
  7648  005220  8894               	bsf	3988,4,c	;volatile
  7649                           
  7650                           ; BSR set to: 0
  7651  005222  0012               	return		;funcret
  7652  005224                     __end_of_I2C_Master_Init:
  7653                           	opt stack 0
  7654                           tblptru	equ	0xFF8
  7655                           tblptrh	equ	0xFF7
  7656                           tblptrl	equ	0xFF6
  7657                           tablat	equ	0xFF5
  7658                           prodh	equ	0xFF4
  7659                           prodl	equ	0xFF3
  7660                           intcon	equ	0xFF2
  7661                           intcon2	equ	0xFF1
  7662                           intcon3	equ	0xFF0
  7663                           postinc0	equ	0xFEE
  7664                           wreg	equ	0xFE8
  7665                           postdec1	equ	0xFE5
  7666                           fsr1l	equ	0xFE1
  7667                           indf2	equ	0xFDF
  7668                           postinc2	equ	0xFDE
  7669                           postdec2	equ	0xFDD
  7670                           fsr2h	equ	0xFDA
  7671                           fsr2l	equ	0xFD9
  7672                           status	equ	0xFD8
  7673                           
  7674 ;; *************** function ___lldiv *****************
  7675 ;; Defined at:
  7676 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  7677 ;; Parameters:    Size  Location     Type
  7678 ;;  dividend        4    0[BANK0 ] unsigned long 
  7679 ;;  divisor         4    4[BANK0 ] unsigned long 
  7680 ;; Auto vars:     Size  Location     Type
  7681 ;;  quotient        4    8[BANK0 ] unsigned long 
  7682 ;;  counter         1   12[BANK0 ] unsigned char 
  7683 ;; Return value:  Size  Location     Type
  7684 ;;                  4    0[BANK0 ] unsigned long 
  7685 ;; Registers used:
  7686 ;;		wreg, status,2, status,0
  7687 ;; Tracked objects:
  7688 ;;		On entry : 0/0
  7689 ;;		On exit  : 0/0
  7690 ;;		Unchanged: 0/0
  7691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7692 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7693 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7695 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7696 ;;Total ram usage:       13 bytes
  7697 ;; Hardware stack levels used:    1
  7698 ;; Hardware stack levels required when called:    7
  7699 ;; This function calls:
  7700 ;;		Nothing
  7701 ;; This function is called by:
  7702 ;;		_I2C_Master_Init
  7703 ;; This function uses a non-reentrant model
  7704 ;;
  7705                           
  7706                           	psect	text20
  7707  0049CA                     __ptext20:
  7708                           	opt stack 0
  7709  0049CA                     ___lldiv:
  7710                           	opt stack 20
  7711                           
  7712                           ; BSR set to: 0
  7713                           ;incstack = 0
  7714  0049CA  0E00               	movlw	0
  7715  0049CC  0100               	movlb	0	; () banked
  7716  0049CE  6F88               	movwf	___lldiv@quotient& (0+255),b
  7717  0049D0  0E00               	movlw	0
  7718  0049D2  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  7719  0049D4  0E00               	movlw	0
  7720  0049D6  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  7721  0049D8  0E00               	movlw	0
  7722  0049DA  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  7723                           
  7724                           ; BSR set to: 0
  7725  0049DC  0100               	movlb	0	; () banked
  7726  0049DE  5184               	movf	___lldiv@divisor& (0+255),w,b
  7727  0049E0  0100               	movlb	0	; () banked
  7728  0049E2  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  7729  0049E4  0100               	movlb	0	; () banked
  7730  0049E6  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  7731  0049E8  0100               	movlb	0	; () banked
  7732  0049EA  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  7733  0049EC  B4D8               	btfsc	status,2,c
  7734  0049EE  D042               	goto	l1922
  7735                           
  7736                           ; BSR set to: 0
  7737  0049F0  0E01               	movlw	1
  7738  0049F2  0100               	movlb	0	; () banked
  7739  0049F4  6F8C               	movwf	___lldiv@counter& (0+255),b
  7740  0049F6  D008               	goto	l6978
  7741  0049F8                     l6976:
  7742                           
  7743                           ; BSR set to: 0
  7744  0049F8  0100               	movlb	0	; () banked
  7745  0049FA  90D8               	bcf	status,0,c
  7746  0049FC  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  7747  0049FE  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  7748  004A00  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  7749  004A02  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  7750  004A04  0100               	movlb	0	; () banked
  7751  004A06  2B8C               	incf	___lldiv@counter& (0+255),f,b
  7752  004A08                     l6978:
  7753                           
  7754                           ; BSR set to: 0
  7755  004A08  0100               	movlb	0	; () banked
  7756  004A0A  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  7757  004A0C  D7F5               	goto	l6976
  7758  004A0E                     l6980:
  7759                           
  7760                           ; BSR set to: 0
  7761  004A0E  0100               	movlb	0	; () banked
  7762  004A10  90D8               	bcf	status,0,c
  7763  004A12  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  7764  004A14  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  7765  004A16  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  7766  004A18  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  7767                           
  7768                           ; BSR set to: 0
  7769  004A1A  0100               	movlb	0	; () banked
  7770  004A1C  5184               	movf	___lldiv@divisor& (0+255),w,b
  7771  004A1E  0100               	movlb	0	; () banked
  7772  004A20  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  7773  004A22  0100               	movlb	0	; () banked
  7774  004A24  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7775  004A26  0100               	movlb	0	; () banked
  7776  004A28  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  7777  004A2A  0100               	movlb	0	; () banked
  7778  004A2C  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7779  004A2E  0100               	movlb	0	; () banked
  7780  004A30  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  7781  004A32  0100               	movlb	0	; () banked
  7782  004A34  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7783  004A36  0100               	movlb	0	; () banked
  7784  004A38  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  7785  004A3A  A0D8               	btfss	status,0,c
  7786  004A3C  D012               	goto	l6988
  7787                           
  7788                           ; BSR set to: 0
  7789  004A3E  0100               	movlb	0	; () banked
  7790  004A40  5184               	movf	___lldiv@divisor& (0+255),w,b
  7791  004A42  0100               	movlb	0	; () banked
  7792  004A44  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  7793  004A46  0100               	movlb	0	; () banked
  7794  004A48  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7795  004A4A  0100               	movlb	0	; () banked
  7796  004A4C  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  7797  004A4E  0100               	movlb	0	; () banked
  7798  004A50  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7799  004A52  0100               	movlb	0	; () banked
  7800  004A54  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  7801  004A56  0100               	movlb	0	; () banked
  7802  004A58  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7803  004A5A  0100               	movlb	0	; () banked
  7804  004A5C  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  7805                           
  7806                           ; BSR set to: 0
  7807  004A5E  0100               	movlb	0	; () banked
  7808  004A60  8188               	bsf	___lldiv@quotient& (0+255),0,b
  7809  004A62                     l6988:
  7810                           
  7811                           ; BSR set to: 0
  7812  004A62  0100               	movlb	0	; () banked
  7813  004A64  90D8               	bcf	status,0,c
  7814  004A66  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7815  004A68  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7816  004A6A  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7817  004A6C  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  7818                           
  7819                           ; BSR set to: 0
  7820  004A6E  0100               	movlb	0	; () banked
  7821  004A70  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  7822  004A72  D7CD               	goto	l6980
  7823  004A74                     l1922:
  7824                           
  7825                           ; BSR set to: 0
  7826  004A74  C088  F080         	movff	___lldiv@quotient,?___lldiv
  7827  004A78  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  7828  004A7C  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  7829  004A80  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  7830                           
  7831                           ; BSR set to: 0
  7832  004A84  0012               	return		;funcret
  7833  004A86                     __end_of___lldiv:
  7834                           	opt stack 0
  7835                           tblptru	equ	0xFF8
  7836                           tblptrh	equ	0xFF7
  7837                           tblptrl	equ	0xFF6
  7838                           tablat	equ	0xFF5
  7839                           prodh	equ	0xFF4
  7840                           prodl	equ	0xFF3
  7841                           intcon	equ	0xFF2
  7842                           intcon2	equ	0xFF1
  7843                           intcon3	equ	0xFF0
  7844                           postinc0	equ	0xFEE
  7845                           wreg	equ	0xFE8
  7846                           postdec1	equ	0xFE5
  7847                           fsr1l	equ	0xFE1
  7848                           indf2	equ	0xFDF
  7849                           postinc2	equ	0xFDE
  7850                           postdec2	equ	0xFDD
  7851                           fsr2h	equ	0xFDA
  7852                           fsr2l	equ	0xFD9
  7853                           status	equ	0xFD8
  7854                           
  7855 ;; *************** function _change_state_to_menu_start *****************
  7856 ;; Defined at:
  7857 ;;		line 477 in file "UI.c"
  7858 ;; Parameters:    Size  Location     Type
  7859 ;;		None
  7860 ;; Auto vars:     Size  Location     Type
  7861 ;;		None
  7862 ;; Return value:  Size  Location     Type
  7863 ;;                  1    wreg      void 
  7864 ;; Registers used:
  7865 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7866 ;; Tracked objects:
  7867 ;;		On entry : 0/0
  7868 ;;		On exit  : 0/0
  7869 ;;		Unchanged: 0/0
  7870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7874 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7875 ;;Total ram usage:        0 bytes
  7876 ;; Hardware stack levels used:    1
  7877 ;; Hardware stack levels required when called:   11
  7878 ;; This function calls:
  7879 ;;		_lcdInst
  7880 ;;		_printRTC
  7881 ;;		_printf
  7882 ;; This function is called by:
  7883 ;;		_initUI
  7884 ;; This function uses a non-reentrant model
  7885 ;;
  7886                           
  7887                           	psect	text21
  7888  00593C                     __ptext21:
  7889                           	opt stack 0
  7890  00593C                     _change_state_to_menu_start:
  7891                           	opt stack 18
  7892                           
  7893                           ;UI.c: 478: cur_state = 0;
  7894                           
  7895                           ; BSR set to: 0
  7896                           ;incstack = 0
  7897  00593C  0E00               	movlw	0
  7898  00593E  0100               	movlb	0	; () banked
  7899  005940  6FE7               	movwf	(_cur_state+1)& (0+255),b
  7900  005942  0E00               	movlw	0
  7901  005944  6FE6               	movwf	_cur_state& (0+255),b
  7902                           
  7903                           ; BSR set to: 0
  7904                           ;UI.c: 480: lcdInst(0b10000000);;
  7905  005946  0E80               	movlw	128
  7906  005948  ECC9  F02D         	call	_lcdInst
  7907                           
  7908                           ;UI.c: 481: printRTC();
  7909  00594C  EC61  F016         	call	_printRTC	;wreg free
  7910                           
  7911                           ;UI.c: 482: lcdInst(0b11000000);;
  7912  005950  0EC0               	movlw	192
  7913  005952  ECC9  F02D         	call	_lcdInst
  7914                           
  7915                           ;UI.c: 483: printf("PUSH TO CONTINUE");
  7916  005956  0EEA               	movlw	low STR_30
  7917  005958  0100               	movlb	0	; () banked
  7918  00595A  6F8E               	movwf	printf@f& (0+255),b
  7919  00595C  0EFD               	movlw	high STR_30
  7920  00595E  0100               	movlb	0	; () banked
  7921  005960  6F8F               	movwf	(printf@f+1)& (0+255),b
  7922  005962  EC8D  F00D         	call	_printf	;wreg free
  7923  005966  0012               	return		;funcret
  7924  005968                     __end_of_change_state_to_menu_start:
  7925                           	opt stack 0
  7926                           tblptru	equ	0xFF8
  7927                           tblptrh	equ	0xFF7
  7928                           tblptrl	equ	0xFF6
  7929                           tablat	equ	0xFF5
  7930                           prodh	equ	0xFF4
  7931                           prodl	equ	0xFF3
  7932                           intcon	equ	0xFF2
  7933                           intcon2	equ	0xFF1
  7934                           intcon3	equ	0xFF0
  7935                           postinc0	equ	0xFEE
  7936                           wreg	equ	0xFE8
  7937                           postdec1	equ	0xFE5
  7938                           fsr1l	equ	0xFE1
  7939                           indf2	equ	0xFDF
  7940                           postinc2	equ	0xFDE
  7941                           postdec2	equ	0xFDD
  7942                           fsr2h	equ	0xFDA
  7943                           fsr2l	equ	0xFD9
  7944                           status	equ	0xFD8
  7945                           
  7946 ;; *************** function _initTime *****************
  7947 ;; Defined at:
  7948 ;;		line 17 in file "RTC.c"
  7949 ;; Parameters:    Size  Location     Type
  7950 ;;  s               1    wreg     unsigned char 
  7951 ;;  m               1    0[BANK0 ] unsigned char 
  7952 ;;  h               1    1[BANK0 ] unsigned char 
  7953 ;;  w               1    2[BANK0 ] unsigned char 
  7954 ;;  DD              1    3[BANK0 ] unsigned char 
  7955 ;;  MM              1    4[BANK0 ] unsigned char 
  7956 ;;  YY              1    5[BANK0 ] unsigned char 
  7957 ;; Auto vars:     Size  Location     Type
  7958 ;;  s               1    6[BANK0 ] unsigned char 
  7959 ;; Return value:  Size  Location     Type
  7960 ;;                  1    wreg      void 
  7961 ;; Registers used:
  7962 ;;		wreg
  7963 ;; Tracked objects:
  7964 ;;		On entry : 0/0
  7965 ;;		On exit  : 0/0
  7966 ;;		Unchanged: 0/0
  7967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7968 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7969 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7971 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7972 ;;Total ram usage:        7 bytes
  7973 ;; Hardware stack levels used:    1
  7974 ;; Hardware stack levels required when called:    7
  7975 ;; This function calls:
  7976 ;;		Nothing
  7977 ;; This function is called by:
  7978 ;;		_main
  7979 ;; This function uses a non-reentrant model
  7980 ;;
  7981                           
  7982                           	psect	text22
  7983  005AA0                     __ptext22:
  7984                           	opt stack 0
  7985  005AA0                     _initTime:
  7986                           	opt stack 23
  7987                           
  7988                           ;incstack = 0
  7989                           ;initTime@s stored from wreg
  7990  005AA0  0100               	movlb	0	; () banked
  7991  005AA2  6F86               	movwf	initTime@s& (0+255),b
  7992                           
  7993                           ;RTC.c: 19: time[0] = s;
  7994  005AA4  C086  F11C         	movff	initTime@s,_time
  7995                           
  7996                           ;RTC.c: 20: time[1] = m;
  7997  005AA8  C080  F11D         	movff	initTime@m,_time+1
  7998                           
  7999                           ;RTC.c: 21: time[2] = h;
  8000  005AAC  C081  F11E         	movff	initTime@h,_time+2
  8001                           
  8002                           ;RTC.c: 22: time[3] = w;
  8003  005AB0  C082  F11F         	movff	initTime@w,_time+3
  8004                           
  8005                           ;RTC.c: 23: time[4] = DD;
  8006  005AB4  C083  F120         	movff	initTime@DD,_time+4
  8007                           
  8008                           ;RTC.c: 24: time[5] = MM;
  8009  005AB8  C084  F121         	movff	initTime@MM,_time+5
  8010                           
  8011                           ;RTC.c: 25: time[6] = YY;
  8012  005ABC  C085  F122         	movff	initTime@YY,_time+6
  8013  005AC0  0012               	return		;funcret
  8014  005AC2                     __end_of_initTime:
  8015                           	opt stack 0
  8016                           tblptru	equ	0xFF8
  8017                           tblptrh	equ	0xFF7
  8018                           tblptrl	equ	0xFF6
  8019                           tablat	equ	0xFF5
  8020                           prodh	equ	0xFF4
  8021                           prodl	equ	0xFF3
  8022                           intcon	equ	0xFF2
  8023                           intcon2	equ	0xFF1
  8024                           intcon3	equ	0xFF0
  8025                           postinc0	equ	0xFEE
  8026                           wreg	equ	0xFE8
  8027                           postdec1	equ	0xFE5
  8028                           fsr1l	equ	0xFE1
  8029                           indf2	equ	0xFDF
  8030                           postinc2	equ	0xFDE
  8031                           postdec2	equ	0xFDD
  8032                           fsr2h	equ	0xFDA
  8033                           fsr2l	equ	0xFD9
  8034                           status	equ	0xFD8
  8035                           
  8036 ;; *************** function _initLCD *****************
  8037 ;; Defined at:
  8038 ;;		line 50 in file "lcd.c"
  8039 ;; Parameters:    Size  Location     Type
  8040 ;;		None
  8041 ;; Auto vars:     Size  Location     Type
  8042 ;;		None
  8043 ;; Return value:  Size  Location     Type
  8044 ;;                  1    wreg      void 
  8045 ;; Registers used:
  8046 ;;		wreg, status,2, status,0, cstack
  8047 ;; Tracked objects:
  8048 ;;		On entry : 0/0
  8049 ;;		On exit  : 0/0
  8050 ;;		Unchanged: 0/0
  8051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8054 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8055 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8056 ;;Total ram usage:        1 bytes
  8057 ;; Hardware stack levels used:    1
  8058 ;; Hardware stack levels required when called:    9
  8059 ;; This function calls:
  8060 ;;		_lcdInst
  8061 ;; This function is called by:
  8062 ;;		_main
  8063 ;; This function uses a non-reentrant model
  8064 ;;
  8065                           
  8066                           	psect	text23
  8067  0054BA                     __ptext23:
  8068                           	opt stack 0
  8069  0054BA                     _initLCD:
  8070                           	opt stack 21
  8071                           
  8072                           ;lcd.c: 51: _delay((unsigned long)((15)*(32000000/4000.0)));
  8073                           
  8074                           ;incstack = 0
  8075  0054BA  0E9C               	movlw	156
  8076  0054BC  0100               	movlb	0	; () banked
  8077  0054BE  6F83               	movwf	??_initLCD& (0+255),b
  8078  0054C0  0ED7               	movlw	215
  8079  0054C2                     u10267:
  8080  0054C2  2EE8               	decfsz	wreg,f,c
  8081  0054C4  D7FE               	bra	u10267
  8082  0054C6  2F83               	decfsz	??_initLCD& (0+255),f,b
  8083  0054C8  D7FC               	bra	u10267
  8084                           
  8085                           ;lcd.c: 52: lcdInst(0b00110011);
  8086  0054CA  0E33               	movlw	51
  8087  0054CC  ECC9  F02D         	call	_lcdInst
  8088                           
  8089                           ;lcd.c: 53: lcdInst(0b00110010);
  8090  0054D0  0E32               	movlw	50
  8091  0054D2  ECC9  F02D         	call	_lcdInst
  8092                           
  8093                           ;lcd.c: 55: lcdInst(0b00101000);
  8094  0054D6  0E28               	movlw	40
  8095  0054D8  ECC9  F02D         	call	_lcdInst
  8096                           
  8097                           ;lcd.c: 56: lcdInst(0b00001100);
  8098  0054DC  0E0C               	movlw	12
  8099  0054DE  ECC9  F02D         	call	_lcdInst
  8100                           
  8101                           ;lcd.c: 57: lcdInst(0b00000110);
  8102  0054E2  0E06               	movlw	6
  8103  0054E4  ECC9  F02D         	call	_lcdInst
  8104                           
  8105                           ;lcd.c: 58: lcdInst(0b00000001);
  8106  0054E8  0E01               	movlw	1
  8107  0054EA  ECC9  F02D         	call	_lcdInst
  8108                           
  8109                           ;lcd.c: 59: _delay((unsigned long)((15)*(32000000/4000.0)));
  8110  0054EE  0E9C               	movlw	156
  8111  0054F0  0100               	movlb	0	; () banked
  8112  0054F2  6F83               	movwf	??_initLCD& (0+255),b
  8113  0054F4  0ED7               	movlw	215
  8114  0054F6                     u10277:
  8115  0054F6  2EE8               	decfsz	wreg,f,c
  8116  0054F8  D7FE               	bra	u10277
  8117  0054FA  2F83               	decfsz	??_initLCD& (0+255),f,b
  8118  0054FC  D7FC               	bra	u10277
  8119  0054FE  0012               	return		;funcret
  8120  005500                     __end_of_initLCD:
  8121                           	opt stack 0
  8122                           tblptru	equ	0xFF8
  8123                           tblptrh	equ	0xFF7
  8124                           tblptrl	equ	0xFF6
  8125                           tablat	equ	0xFF5
  8126                           prodh	equ	0xFF4
  8127                           prodl	equ	0xFF3
  8128                           intcon	equ	0xFF2
  8129                           intcon2	equ	0xFF1
  8130                           intcon3	equ	0xFF0
  8131                           postinc0	equ	0xFEE
  8132                           wreg	equ	0xFE8
  8133                           postdec1	equ	0xFE5
  8134                           fsr1l	equ	0xFE1
  8135                           indf2	equ	0xFDF
  8136                           postinc2	equ	0xFDE
  8137                           postdec2	equ	0xFDD
  8138                           fsr2h	equ	0xFDA
  8139                           fsr2l	equ	0xFD9
  8140                           status	equ	0xFD8
  8141                           
  8142 ;; *************** function _initEEPROM *****************
  8143 ;; Defined at:
  8144 ;;		line 32 in file "EEPROM.c"
  8145 ;; Parameters:    Size  Location     Type
  8146 ;;		None
  8147 ;; Auto vars:     Size  Location     Type
  8148 ;;		None
  8149 ;; Return value:  Size  Location     Type
  8150 ;;                  1    wreg      void 
  8151 ;; Registers used:
  8152 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8153 ;; Tracked objects:
  8154 ;;		On entry : 0/0
  8155 ;;		On exit  : 0/0
  8156 ;;		Unchanged: 0/0
  8157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8161 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8162 ;;Total ram usage:        0 bytes
  8163 ;; Hardware stack levels used:    1
  8164 ;; Hardware stack levels required when called:   11
  8165 ;; This function calls:
  8166 ;;		_EEPROM_write
  8167 ;; This function is called by:
  8168 ;;		_main
  8169 ;; This function uses a non-reentrant model
  8170 ;;
  8171                           
  8172                           	psect	text24
  8173  005B30                     __ptext24:
  8174                           	opt stack 0
  8175  005B30                     _initEEPROM:
  8176                           	opt stack 19
  8177                           
  8178                           ;EEPROM.c: 33: EEPROM_write(0, 0x01);
  8179                           
  8180                           ;incstack = 0
  8181  005B30  0E00               	movlw	0
  8182  005B32  0100               	movlb	0	; () banked
  8183  005B34  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  8184  005B36  0E00               	movlw	0
  8185  005B38  6FAB               	movwf	EEPROM_write@address& (0+255),b
  8186  005B3A  0E01               	movlw	1
  8187  005B3C  0100               	movlb	0	; () banked
  8188  005B3E  6FAD               	movwf	EEPROM_write@data& (0+255),b
  8189  005B40  EC0E  F022         	call	_EEPROM_write	;wreg free
  8190  005B44  0012               	return		;funcret
  8191  005B46                     __end_of_initEEPROM:
  8192                           	opt stack 0
  8193                           tblptru	equ	0xFF8
  8194                           tblptrh	equ	0xFF7
  8195                           tblptrl	equ	0xFF6
  8196                           tablat	equ	0xFF5
  8197                           prodh	equ	0xFF4
  8198                           prodl	equ	0xFF3
  8199                           intcon	equ	0xFF2
  8200                           intcon2	equ	0xFF1
  8201                           intcon3	equ	0xFF0
  8202                           postinc0	equ	0xFEE
  8203                           wreg	equ	0xFE8
  8204                           postdec1	equ	0xFE5
  8205                           fsr1l	equ	0xFE1
  8206                           indf2	equ	0xFDF
  8207                           postinc2	equ	0xFDE
  8208                           postdec2	equ	0xFDD
  8209                           fsr2h	equ	0xFDA
  8210                           fsr2l	equ	0xFD9
  8211                           status	equ	0xFD8
  8212                           
  8213 ;; *************** function _EEPROM_write *****************
  8214 ;; Defined at:
  8215 ;;		line 36 in file "EEPROM.c"
  8216 ;; Parameters:    Size  Location     Type
  8217 ;;  address         2   43[BANK0 ] unsigned short 
  8218 ;;  data            1   45[BANK0 ] unsigned char 
  8219 ;; Auto vars:     Size  Location     Type
  8220 ;;  i               1   48[BANK0 ] unsigned char 
  8221 ;;  i               1   47[BANK0 ] unsigned char 
  8222 ;; Return value:  Size  Location     Type
  8223 ;;                  1    wreg      void 
  8224 ;; Registers used:
  8225 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8226 ;; Tracked objects:
  8227 ;;		On entry : 0/0
  8228 ;;		On exit  : 0/0
  8229 ;;		Unchanged: 0/0
  8230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8231 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8232 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8233 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8234 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8235 ;;Total ram usage:        6 bytes
  8236 ;; Hardware stack levels used:    1
  8237 ;; Hardware stack levels required when called:   10
  8238 ;; This function calls:
  8239 ;;		_EEPROM_read
  8240 ;;		_lcdInst
  8241 ;;		_printf
  8242 ;; This function is called by:
  8243 ;;		_Loading
  8244 ;;		_initEEPROM
  8245 ;;		_logRun
  8246 ;; This function uses a non-reentrant model
  8247 ;;
  8248                           
  8249                           	psect	text25
  8250  00441C                     __ptext25:
  8251                           	opt stack 0
  8252  00441C                     _EEPROM_write:
  8253                           	opt stack 18
  8254                           
  8255                           ;EEPROM.c: 37: EECON1bits.WREN = 1;
  8256                           
  8257                           ;incstack = 0
  8258  00441C  84A6               	bsf	4006,2,c	;volatile
  8259                           
  8260                           ;EEPROM.c: 40: EEADRH = (unsigned char)(address >> 8);
  8261  00441E  0100               	movlb	0	; () banked
  8262  004420  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  8263  004422  6EAA               	movwf	4010,c	;volatile
  8264                           
  8265                           ; BSR set to: 0
  8266                           ;EEPROM.c: 41: EEADR = (unsigned char)address;
  8267  004424  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  8268                           
  8269                           ; BSR set to: 0
  8270                           ;EEPROM.c: 43: EEDATA = data;
  8271  004428  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  8272                           
  8273                           ; BSR set to: 0
  8274                           ;EEPROM.c: 44: EECON1bits.EEPGD = 0;
  8275  00442C  9EA6               	bcf	4006,7,c	;volatile
  8276                           
  8277                           ; BSR set to: 0
  8278                           ;EEPROM.c: 45: EECON1bits.CFGS = 0;
  8279  00442E  9CA6               	bcf	4006,6,c	;volatile
  8280                           
  8281                           ; BSR set to: 0
  8282                           ;EEPROM.c: 47: (INTCONbits.GIE = 0);
  8283  004430  9EF2               	bcf	intcon,7,c	;volatile
  8284                           
  8285                           ;EEPROM.c: 49: EECON2 = 0x55;
  8286  004432  0E55               	movlw	85
  8287  004434  6EA7               	movwf	4007,c	;volatile
  8288                           
  8289                           ;EEPROM.c: 50: EECON2 = 0x0AA;
  8290  004436  0EAA               	movlw	170
  8291  004438  6EA7               	movwf	4007,c	;volatile
  8292                           
  8293                           ; BSR set to: 0
  8294                           ;EEPROM.c: 51: EECON1bits.WR = 1;
  8295  00443A  82A6               	bsf	4006,1,c	;volatile
  8296                           
  8297                           ; BSR set to: 0
  8298                           ;EEPROM.c: 52: (INTCONbits.GIE = 1);
  8299  00443C  8EF2               	bsf	intcon,7,c	;volatile
  8300  00443E                     l1129:
  8301  00443E  A8A1               	btfss	4001,4,c	;volatile
  8302  004440  D7FE               	goto	l1129
  8303                           
  8304                           ;EEPROM.c: 57: PIR2bits.EEIF = 0;
  8305  004442  98A1               	bcf	4001,4,c	;volatile
  8306                           
  8307                           ;EEPROM.c: 58: EECON1bits.WREN = 0;
  8308  004444  94A6               	bcf	4006,2,c	;volatile
  8309                           
  8310                           ;EEPROM.c: 61: if(debug){
  8311  004446  0100               	movlb	0	; () banked
  8312  004448  51E8               	movf	_debug& (0+255),w,b
  8313  00444A  0100               	movlb	0	; () banked
  8314  00444C  11E9               	iorwf	(_debug+1)& (0+255),w,b
  8315  00444E  B4D8               	btfsc	status,2,c
  8316  004450  0012               	return	
  8317                           
  8318                           ; BSR set to: 0
  8319                           ;EEPROM.c: 62: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8320  004452  0E01               	movlw	1
  8321  004454  ECC9  F02D         	call	_lcdInst
  8322  004458  0E68               	movlw	104
  8323  00445A  0100               	movlb	0	; () banked
  8324  00445C  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8325  00445E  0EE4               	movlw	228
  8326  004460                     u10287:
  8327  004460  2EE8               	decfsz	wreg,f,c
  8328  004462  D7FE               	bra	u10287
  8329  004464  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8330  004466  D7FC               	bra	u10287
  8331  004468  F000               	nop	
  8332                           
  8333                           ;EEPROM.c: 63: lcdInst(0b10000000);;
  8334  00446A  0E80               	movlw	128
  8335  00446C  ECC9  F02D         	call	_lcdInst
  8336                           
  8337                           ;EEPROM.c: 64: if(EEPROM_read(address)==data){
  8338  004470  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  8339  004474  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  8340  004478  EC8C  F02D         	call	_EEPROM_read	;wreg free
  8341  00447C  0100               	movlb	0	; () banked
  8342  00447E  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  8343  004480  A4D8               	btfss	status,2,c
  8344  004482  D024               	goto	l7426
  8345                           
  8346                           ; BSR set to: 0
  8347                           ;EEPROM.c: 65: printf("(data: %u, addr: %u)", data, address);
  8348  004484  0EBE               	movlw	low STR_67
  8349  004486  0100               	movlb	0	; () banked
  8350  004488  6F8E               	movwf	printf@f& (0+255),b
  8351  00448A  0EFA               	movlw	high STR_67
  8352  00448C  0100               	movlb	0	; () banked
  8353  00448E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8354  004490  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  8355  004494  0100               	movlb	0	; () banked
  8356  004496  6B91               	clrf	(?_printf+3)& (0+255),b
  8357  004498  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  8358  00449C  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  8359  0044A0  EC8D  F00D         	call	_printf	;wreg free
  8360                           
  8361                           ;EEPROM.c: 66: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  8362  0044A4  0E00               	movlw	0
  8363  0044A6  0100               	movlb	0	; () banked
  8364  0044A8  6FAF               	movwf	EEPROM_write@i& (0+255),b
  8365  0044AA                     l7418:
  8366                           
  8367                           ; BSR set to: 0
  8368  0044AA  0E63               	movlw	99
  8369  0044AC  0100               	movlb	0	; () banked
  8370  0044AE  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  8371  0044B0  D001               	goto	l7422
  8372  0044B2  0012               	return	
  8373  0044B4                     l7422:
  8374                           
  8375                           ; BSR set to: 0
  8376  0044B4  0E68               	movlw	104
  8377  0044B6  0100               	movlb	0	; () banked
  8378  0044B8  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8379  0044BA  0EE4               	movlw	228
  8380  0044BC                     u10297:
  8381  0044BC  2EE8               	decfsz	wreg,f,c
  8382  0044BE  D7FE               	bra	u10297
  8383  0044C0  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8384  0044C2  D7FC               	bra	u10297
  8385  0044C4  F000               	nop	
  8386  0044C6  0100               	movlb	0	; () banked
  8387  0044C8  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  8388  0044CA  D7EF               	goto	l7418
  8389  0044CC                     l7426:
  8390                           
  8391                           ; BSR set to: 0
  8392                           ;EEPROM.c: 68: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  8393  0044CC  0EBC               	movlw	low STR_68
  8394  0044CE  0100               	movlb	0	; () banked
  8395  0044D0  6F8E               	movwf	printf@f& (0+255),b
  8396  0044D2  0EFF               	movlw	high STR_68
  8397  0044D4  0100               	movlb	0	; () banked
  8398  0044D6  6F8F               	movwf	(printf@f+1)& (0+255),b
  8399  0044D8  EC8D  F00D         	call	_printf	;wreg free
  8400  0044DC  0E00               	movlw	0
  8401  0044DE  0100               	movlb	0	; () banked
  8402  0044E0  6FB0               	movwf	EEPROM_write@i_1407& (0+255),b
  8403  0044E2                     l7430:
  8404                           
  8405                           ; BSR set to: 0
  8406  0044E2  0E63               	movlw	99
  8407  0044E4  0100               	movlb	0	; () banked
  8408  0044E6  65B0               	cpfsgt	EEPROM_write@i_1407& (0+255),b
  8409  0044E8  D001               	goto	l7434
  8410  0044EA  0012               	return	
  8411  0044EC                     l7434:
  8412                           
  8413                           ; BSR set to: 0
  8414  0044EC  0E68               	movlw	104
  8415  0044EE  0100               	movlb	0	; () banked
  8416  0044F0  6FAE               	movwf	??_EEPROM_write& (0+255),b
  8417  0044F2  0EE4               	movlw	228
  8418  0044F4                     u10307:
  8419  0044F4  2EE8               	decfsz	wreg,f,c
  8420  0044F6  D7FE               	bra	u10307
  8421  0044F8  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  8422  0044FA  D7FC               	bra	u10307
  8423  0044FC  F000               	nop	
  8424  0044FE  0100               	movlb	0	; () banked
  8425  004500  2BB0               	incf	EEPROM_write@i_1407& (0+255),f,b
  8426  004502  D7EF               	goto	l7430
  8427  004504                     __end_of_EEPROM_write:
  8428                           	opt stack 0
  8429                           tblptru	equ	0xFF8
  8430                           tblptrh	equ	0xFF7
  8431                           tblptrl	equ	0xFF6
  8432                           tablat	equ	0xFF5
  8433                           prodh	equ	0xFF4
  8434                           prodl	equ	0xFF3
  8435                           intcon	equ	0xFF2
  8436                           intcon2	equ	0xFF1
  8437                           intcon3	equ	0xFF0
  8438                           postinc0	equ	0xFEE
  8439                           wreg	equ	0xFE8
  8440                           postdec1	equ	0xFE5
  8441                           fsr1l	equ	0xFE1
  8442                           indf2	equ	0xFDF
  8443                           postinc2	equ	0xFDE
  8444                           postdec2	equ	0xFDD
  8445                           fsr2h	equ	0xFDA
  8446                           fsr2l	equ	0xFD9
  8447                           status	equ	0xFD8
  8448                           
  8449 ;; *************** function _EEPROM_read *****************
  8450 ;; Defined at:
  8451 ;;		line 72 in file "EEPROM.c"
  8452 ;; Parameters:    Size  Location     Type
  8453 ;;  address         2    0[BANK0 ] unsigned short 
  8454 ;; Auto vars:     Size  Location     Type
  8455 ;;		None
  8456 ;; Return value:  Size  Location     Type
  8457 ;;                  1    wreg      unsigned char 
  8458 ;; Registers used:
  8459 ;;		wreg, status,2
  8460 ;; Tracked objects:
  8461 ;;		On entry : 0/0
  8462 ;;		On exit  : 0/0
  8463 ;;		Unchanged: 0/0
  8464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8465 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8468 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8469 ;;Total ram usage:        2 bytes
  8470 ;; Hardware stack levels used:    1
  8471 ;; Hardware stack levels required when called:    7
  8472 ;; This function calls:
  8473 ;;		Nothing
  8474 ;; This function is called by:
  8475 ;;		_Loading
  8476 ;;		_EEPROM_write
  8477 ;;		_logRun
  8478 ;; This function uses a non-reentrant model
  8479 ;;
  8480                           
  8481                           	psect	text26
  8482  005B18                     __ptext26:
  8483                           	opt stack 0
  8484  005B18                     _EEPROM_read:
  8485                           	opt stack 20
  8486                           
  8487                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
  8488                           
  8489                           ; BSR set to: 0
  8490                           ;incstack = 0
  8491  005B18  0100               	movlb	0	; () banked
  8492  005B1A  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  8493  005B1C  6EAA               	movwf	4010,c	;volatile
  8494                           
  8495                           ; BSR set to: 0
  8496                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
  8497  005B1E  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  8498                           
  8499                           ; BSR set to: 0
  8500                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
  8501  005B22  9EA6               	bcf	4006,7,c	;volatile
  8502                           
  8503                           ; BSR set to: 0
  8504                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
  8505  005B24  9CA6               	bcf	4006,6,c	;volatile
  8506                           
  8507                           ; BSR set to: 0
  8508                           ;EEPROM.c: 79: EECON1bits.RD = 1;
  8509  005B26  80A6               	bsf	4006,0,c	;volatile
  8510  005B28                     l1142:
  8511  005B28  B0A6               	btfsc	4006,0,c	;volatile
  8512  005B2A  D7FE               	goto	l1142
  8513                           
  8514                           ;EEPROM.c: 85: return EEDATA;
  8515  005B2C  50A8               	movf	4008,w,c	;volatile
  8516  005B2E  0012               	return	
  8517  005B30                     __end_of_EEPROM_read:
  8518                           	opt stack 0
  8519                           tblptru	equ	0xFF8
  8520                           tblptrh	equ	0xFF7
  8521                           tblptrl	equ	0xFF6
  8522                           tablat	equ	0xFF5
  8523                           prodh	equ	0xFF4
  8524                           prodl	equ	0xFF3
  8525                           intcon	equ	0xFF2
  8526                           intcon2	equ	0xFF1
  8527                           intcon3	equ	0xFF0
  8528                           postinc0	equ	0xFEE
  8529                           wreg	equ	0xFE8
  8530                           postdec1	equ	0xFE5
  8531                           fsr1l	equ	0xFE1
  8532                           indf2	equ	0xFDF
  8533                           postinc2	equ	0xFDE
  8534                           postdec2	equ	0xFDD
  8535                           fsr2h	equ	0xFDA
  8536                           fsr2l	equ	0xFD9
  8537                           status	equ	0xFD8
  8538                           
  8539 ;; *************** function _UI *****************
  8540 ;; Defined at:
  8541 ;;		line 76 in file "UI.c"
  8542 ;; Parameters:    Size  Location     Type
  8543 ;;		None
  8544 ;; Auto vars:     Size  Location     Type
  8545 ;;  i               1   73[BANK0 ] unsigned char 
  8546 ;;  i               1   85[BANK0 ] unsigned char 
  8547 ;;  i               1   84[BANK0 ] unsigned char 
  8548 ;;  i               1   83[BANK0 ] unsigned char 
  8549 ;;  i               1   82[BANK0 ] unsigned char 
  8550 ;;  i               1   81[BANK0 ] unsigned char 
  8551 ;;  i               1   80[BANK0 ] unsigned char 
  8552 ;;  i               1   79[BANK0 ] unsigned char 
  8553 ;;  i               1   78[BANK0 ] unsigned char 
  8554 ;;  i               1   77[BANK0 ] unsigned char 
  8555 ;;  i               1   76[BANK0 ] unsigned char 
  8556 ;;  i               1   75[BANK0 ] unsigned char 
  8557 ;;  i               1   74[BANK0 ] unsigned char 
  8558 ;;  month           4   86[BANK0 ] unsigned char [4]
  8559 ;;  i               1   72[BANK0 ] unsigned char 
  8560 ;; Return value:  Size  Location     Type
  8561 ;;                  1    wreg      void 
  8562 ;; Registers used:
  8563 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8564 ;; Tracked objects:
  8565 ;;		On entry : 0/0
  8566 ;;		On exit  : 0/0
  8567 ;;		Unchanged: 0/0
  8568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8570 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8571 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8572 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8573 ;;Total ram usage:       22 bytes
  8574 ;; Hardware stack levels used:    1
  8575 ;; Hardware stack levels required when called:   11
  8576 ;; This function calls:
  8577 ;;		___awdiv
  8578 ;;		___awmod
  8579 ;;		_change_state_to_menu_12
  8580 ;;		_change_state_to_menu_22
  8581 ;;		_lcdInst
  8582 ;;		_printRTC
  8583 ;;		_printf
  8584 ;;		_strcpy
  8585 ;; This function is called by:
  8586 ;;		_main
  8587 ;; This function uses a non-reentrant model
  8588 ;;
  8589                           
  8590                           	psect	text27
  8591  000012                     __ptext27:
  8592                           	opt stack 0
  8593  000012                     _UI:
  8594                           	opt stack 19
  8595                           
  8596                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  8597                           
  8598                           ;incstack = 0
  8599  000012  0E02               	movlw	2
  8600  000014  0100               	movlb	0	; () banked
  8601  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  8602  000018  A4D8               	btfss	status,2,c
  8603  00001A  D086               	goto	l9366
  8604                           
  8605                           ; BSR set to: 0
  8606                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8607  00001C  0E01               	movlw	1
  8608  00001E  ECC9  F02D         	call	_lcdInst
  8609  000022  0E68               	movlw	104
  8610  000024  0100               	movlb	0	; () banked
  8611  000026  6FC4               	movwf	??_UI& (0+255),b
  8612  000028  0EE4               	movlw	228
  8613  00002A                     u10317:
  8614  00002A  2EE8               	decfsz	wreg,f,c
  8615  00002C  D7FE               	bra	u10317
  8616  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  8617  000030  D7FC               	bra	u10317
  8618  000032  F000               	nop	
  8619                           
  8620                           ;UI.c: 79: lcdInst(0b10000000);;
  8621  000034  0E80               	movlw	128
  8622  000036  ECC9  F02D         	call	_lcdInst
  8623                           
  8624                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  8625  00003A  0E52               	movlw	low STR_1
  8626  00003C  0100               	movlb	0	; () banked
  8627  00003E  6F8E               	movwf	printf@f& (0+255),b
  8628  000040  0EFB               	movlw	high STR_1
  8629  000042  0100               	movlb	0	; () banked
  8630  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  8631  000046  0E01               	movlw	1
  8632  000048  0100               	movlb	0	; () banked
  8633  00004A  25FD               	addwf	_sel& (0+255),w,b
  8634  00004C  0100               	movlb	0	; () banked
  8635  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  8636  000050  0100               	movlb	0	; () banked
  8637  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  8638  000054  0E00               	movlw	0
  8639  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  8640  000058  EC8D  F00D         	call	_printf	;wreg free
  8641                           
  8642                           ;UI.c: 81: lcdInst(0b11000000);;
  8643  00005C  0EC0               	movlw	192
  8644  00005E  ECC9  F02D         	call	_lcdInst
  8645                           
  8646                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  8647  000062  0E0E               	movlw	14
  8648  000064  0100               	movlb	0	; () banked
  8649  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8650  000068  0E10               	movlw	16
  8651  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  8652  00006C  C0FA  F080         	movff	_total_time,___awmod@dividend
  8653  000070  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  8654  000074  EC98  F025         	call	___awmod	;wreg free
  8655  000078  C080  F0C6         	movff	?___awmod,_UI$2433
  8656  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2433+1
  8657                           
  8658                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  8659  000080  0E49               	movlw	low STR_2
  8660  000082  0100               	movlb	0	; () banked
  8661  000084  6F8E               	movwf	printf@f& (0+255),b
  8662  000086  0EFF               	movlw	high STR_2
  8663  000088  0100               	movlb	0	; () banked
  8664  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8665  00008C  0E0E               	movlw	14
  8666  00008E  0100               	movlb	0	; () banked
  8667  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8668  000092  0E10               	movlw	16
  8669  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  8670  000096  C0FA  F080         	movff	_total_time,___awmod@dividend
  8671  00009A  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  8672  00009E  EC98  F025         	call	___awmod	;wreg free
  8673  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  8674  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8675  0000AA  0E00               	movlw	0
  8676  0000AC  0100               	movlb	0	; () banked
  8677  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8678  0000B0  0E3C               	movlw	60
  8679  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  8680  0000B4  EC86  F024         	call	___awdiv	;wreg free
  8681  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  8682  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  8683  0000C0  C0C6  F080         	movff	_UI$2433,___awmod@dividend
  8684  0000C4  C0C7  F081         	movff	_UI$2433+1,___awmod@dividend+1
  8685  0000C8  0E00               	movlw	0
  8686  0000CA  0100               	movlb	0	; () banked
  8687  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8688  0000CE  0E3C               	movlw	60
  8689  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  8690  0000D2  EC98  F025         	call	___awmod	;wreg free
  8691  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  8692  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  8693  0000DE  EC8D  F00D         	call	_printf	;wreg free
  8694  0000E2                     l185:
  8695  0000E2  B281               	btfsc	3969,1,c	;volatile
  8696  0000E4  D7FE               	goto	l185
  8697  0000E6                     l188:
  8698  0000E6  A281               	btfss	3969,1,c	;volatile
  8699  0000E8  D7FE               	goto	l188
  8700                           
  8701                           ;UI.c: 86: }
  8702                           ;UI.c: 87: if(cur_state == 12){
  8703  0000EA  0E0C               	movlw	12
  8704  0000EC  0100               	movlb	0	; () banked
  8705  0000EE  19E6               	xorwf	_cur_state& (0+255),w,b
  8706  0000F0  0100               	movlb	0	; () banked
  8707  0000F2  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  8708  0000F4  A4D8               	btfss	status,2,c
  8709  0000F6  D003               	goto	l9360
  8710                           
  8711                           ; BSR set to: 0
  8712                           ;UI.c: 88: change_state_to_menu_12();
  8713  0000F8  ECFC  F02A         	call	_change_state_to_menu_12	;wreg free
  8714                           
  8715                           ;UI.c: 89: }
  8716  0000FC  D002               	goto	l193
  8717  0000FE                     l9360:
  8718                           
  8719                           ;UI.c: 90: else{
  8720                           ;UI.c: 91: change_state_to_menu_22();
  8721  0000FE  ECE0  F02A         	call	_change_state_to_menu_22	;wreg free
  8722  000102                     l193:
  8723  000102  B281               	btfsc	3969,1,c	;volatile
  8724  000104  D7FE               	goto	l193
  8725                           
  8726                           ;UI.c: 94: _delay((unsigned long)((100)*(32000000/4000.0)));
  8727  000106  0E05               	movlw	5
  8728  000108  0100               	movlb	0	; () banked
  8729  00010A  6FC5               	movwf	(??_UI+1)& (0+255),b
  8730  00010C  0E0F               	movlw	15
  8731  00010E  0100               	movlb	0	; () banked
  8732  000110  6FC4               	movwf	??_UI& (0+255),b
  8733  000112  0EF1               	movlw	241
  8734  000114                     u10327:
  8735  000114  2EE8               	decfsz	wreg,f,c
  8736  000116  D7FE               	bra	u10327
  8737  000118  2FC4               	decfsz	??_UI& (0+255),f,b
  8738  00011A  D7FC               	bra	u10327
  8739  00011C  2FC5               	decfsz	(??_UI+1)& (0+255),f,b
  8740  00011E  D7FA               	bra	u10327
  8741                           
  8742                           ;UI.c: 95: machine_state = UI_state;
  8743  000120  0E00               	movlw	0
  8744  000122  0100               	movlb	0	; () banked
  8745  000124  6FFC               	movwf	_machine_state& (0+255),b
  8746                           
  8747                           ;UI.c: 96: }
  8748  000126  D3D2               	goto	l9686
  8749  000128                     l9366:
  8750                           
  8751                           ; BSR set to: 0
  8752                           ;UI.c: 97: else if(cur_state == 0){
  8753  000128  0100               	movlb	0	; () banked
  8754  00012A  51E6               	movf	_cur_state& (0+255),w,b
  8755  00012C  0100               	movlb	0	; () banked
  8756  00012E  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  8757  000130  A4D8               	btfss	status,2,c
  8758  000132  D3CC               	goto	l9686
  8759                           
  8760                           ; BSR set to: 0
  8761                           ;UI.c: 98: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  8762  000134  0E00               	movlw	0
  8763  000136  0100               	movlb	0	; () banked
  8764  000138  6FC8               	movwf	UI@i& (0+255),b
  8765  00013A                     l9370:
  8766                           
  8767                           ; BSR set to: 0
  8768  00013A  0E63               	movlw	99
  8769  00013C  0100               	movlb	0	; () banked
  8770  00013E  65C8               	cpfsgt	UI@i& (0+255),b
  8771  000140  D001               	goto	l9374
  8772  000142  D00C               	goto	l9378
  8773  000144                     l9374:
  8774                           
  8775                           ; BSR set to: 0
  8776  000144  0E68               	movlw	104
  8777  000146  0100               	movlb	0	; () banked
  8778  000148  6FC4               	movwf	??_UI& (0+255),b
  8779  00014A  0EE4               	movlw	228
  8780  00014C                     u10337:
  8781  00014C  2EE8               	decfsz	wreg,f,c
  8782  00014E  D7FE               	bra	u10337
  8783  000150  2FC4               	decfsz	??_UI& (0+255),f,b
  8784  000152  D7FC               	bra	u10337
  8785  000154  F000               	nop	
  8786  000156  0100               	movlb	0	; () banked
  8787  000158  2BC8               	incf	UI@i& (0+255),f,b
  8788  00015A  D7EF               	goto	l9370
  8789  00015C                     l9378:
  8790                           
  8791                           ; BSR set to: 0
  8792                           ;UI.c: 99: if(cur_state == 0){
  8793  00015C  0100               	movlb	0	; () banked
  8794  00015E  51E6               	movf	_cur_state& (0+255),w,b
  8795  000160  0100               	movlb	0	; () banked
  8796  000162  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  8797  000164  A4D8               	btfss	status,2,c
  8798  000166  D3B2               	goto	l9686
  8799                           
  8800                           ; BSR set to: 0
  8801                           ;UI.c: 100: printRTC();
  8802  000168  EC61  F016         	call	_printRTC	;wreg free
  8803                           
  8804                           ;UI.c: 101: }
  8805                           ;UI.c: 102: }
  8806                           ;UI.c: 103: while(logstate){
  8807  00016C  D3AF               	goto	l9686
  8808  00016E                     l9382:
  8809                           
  8810                           ;UI.c: 105: if(!log_completion){
  8811  00016E  0100               	movlb	0	; () banked
  8812  000170  51F2               	movf	_log_completion& (0+255),w,b
  8813  000172  0100               	movlb	0	; () banked
  8814  000174  11F3               	iorwf	(_log_completion+1)& (0+255),w,b
  8815  000176  A4D8               	btfss	status,2,c
  8816  000178  D041               	goto	l9412
  8817                           
  8818                           ; BSR set to: 0
  8819                           ;UI.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8820  00017A  0E01               	movlw	1
  8821  00017C  ECC9  F02D         	call	_lcdInst
  8822  000180  0E68               	movlw	104
  8823  000182  0100               	movlb	0	; () banked
  8824  000184  6FC4               	movwf	??_UI& (0+255),b
  8825  000186  0EE4               	movlw	228
  8826  000188                     u10347:
  8827  000188  2EE8               	decfsz	wreg,f,c
  8828  00018A  D7FE               	bra	u10347
  8829  00018C  2FC4               	decfsz	??_UI& (0+255),f,b
  8830  00018E  D7FC               	bra	u10347
  8831  000190  F000               	nop	
  8832                           
  8833                           ;UI.c: 107: lcdInst(0b10000000);;
  8834  000192  0E80               	movlw	128
  8835  000194  ECC9  F02D         	call	_lcdInst
  8836                           
  8837                           ;UI.c: 108: printf("-- LOG %2d HERE--", log);
  8838  000198  0E40               	movlw	low STR_3
  8839  00019A  0100               	movlb	0	; () banked
  8840  00019C  6F8E               	movwf	printf@f& (0+255),b
  8841  00019E  0EFB               	movlw	high STR_3
  8842  0001A0  0100               	movlb	0	; () banked
  8843  0001A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  8844  0001A4  C0F0  F090         	movff	_log,?_printf+2
  8845  0001A8  C0F1  F091         	movff	_log+1,?_printf+3
  8846  0001AC  EC8D  F00D         	call	_printf	;wreg free
  8847                           
  8848                           ;UI.c: 109: lcdInst(0b11000000);;
  8849  0001B0  0EC0               	movlw	192
  8850  0001B2  ECC9  F02D         	call	_lcdInst
  8851                           
  8852                           ;UI.c: 110: printf("DIDN'T COMPLETE");
  8853  0001B6  0E5D               	movlw	low STR_4
  8854  0001B8  0100               	movlb	0	; () banked
  8855  0001BA  6F8E               	movwf	printf@f& (0+255),b
  8856  0001BC  0EFE               	movlw	high STR_4
  8857  0001BE  0100               	movlb	0	; () banked
  8858  0001C0  6F8F               	movwf	(printf@f+1)& (0+255),b
  8859  0001C2  EC8D  F00D         	call	_printf	;wreg free
  8860  0001C6                     l9396:
  8861  0001C6  0E00               	movlw	0
  8862  0001C8  0100               	movlb	0	; () banked
  8863  0001CA  6FC9               	movwf	UI@i_412& (0+255),b
  8864  0001CC                     l9398:
  8865                           
  8866                           ; BSR set to: 0
  8867  0001CC  0E63               	movlw	99
  8868  0001CE  0100               	movlb	0	; () banked
  8869  0001D0  65C9               	cpfsgt	UI@i_412& (0+255),b
  8870  0001D2  D001               	goto	l9402
  8871  0001D4  D00C               	goto	l9406
  8872  0001D6                     l9402:
  8873                           
  8874                           ; BSR set to: 0
  8875  0001D6  0E68               	movlw	104
  8876  0001D8  0100               	movlb	0	; () banked
  8877  0001DA  6FC4               	movwf	??_UI& (0+255),b
  8878  0001DC  0EE4               	movlw	228
  8879  0001DE                     u10357:
  8880  0001DE  2EE8               	decfsz	wreg,f,c
  8881  0001E0  D7FE               	bra	u10357
  8882  0001E2  2FC4               	decfsz	??_UI& (0+255),f,b
  8883  0001E4  D7FC               	bra	u10357
  8884  0001E6  F000               	nop	
  8885  0001E8  0100               	movlb	0	; () banked
  8886  0001EA  2BC9               	incf	UI@i_412& (0+255),f,b
  8887  0001EC  D7EF               	goto	l9398
  8888  0001EE                     l9406:
  8889                           
  8890                           ; BSR set to: 0
  8891  0001EE  0100               	movlb	0	; () banked
  8892  0001F0  51F8               	movf	_logstate& (0+255),w,b
  8893  0001F2  0100               	movlb	0	; () banked
  8894  0001F4  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8895  0001F6  B4D8               	btfsc	status,2,c
  8896  0001F8  0012               	return	
  8897  0001FA  D7E5               	goto	l9396
  8898  0001FC                     l9412:
  8899                           
  8900                           ; BSR set to: 0
  8901                           ;UI.c: 114: else{
  8902                           ;UI.c: 115: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8903  0001FC  0E01               	movlw	1
  8904  0001FE  ECC9  F02D         	call	_lcdInst
  8905  000202  0E68               	movlw	104
  8906  000204  0100               	movlb	0	; () banked
  8907  000206  6FC4               	movwf	??_UI& (0+255),b
  8908  000208  0EE4               	movlw	228
  8909  00020A                     u10367:
  8910  00020A  2EE8               	decfsz	wreg,f,c
  8911  00020C  D7FE               	bra	u10367
  8912  00020E  2FC4               	decfsz	??_UI& (0+255),f,b
  8913  000210  D7FC               	bra	u10367
  8914  000212  F000               	nop	
  8915                           
  8916                           ;UI.c: 116: lcdInst(0b10000000);;
  8917  000214  0E80               	movlw	128
  8918  000216  ECC9  F02D         	call	_lcdInst
  8919                           
  8920                           ;UI.c: 117: printf("-- LOG %2d HERE--", log);
  8921  00021A  0E40               	movlw	low STR_3
  8922  00021C  0100               	movlb	0	; () banked
  8923  00021E  6F8E               	movwf	printf@f& (0+255),b
  8924  000220  0EFB               	movlw	high STR_3
  8925  000222  0100               	movlb	0	; () banked
  8926  000224  6F8F               	movwf	(printf@f+1)& (0+255),b
  8927  000226  C0F0  F090         	movff	_log,?_printf+2
  8928  00022A  C0F1  F091         	movff	_log+1,?_printf+3
  8929  00022E  EC8D  F00D         	call	_printf	;wreg free
  8930                           
  8931                           ;UI.c: 118: lcdInst(0b11000000);;
  8932  000232  0EC0               	movlw	192
  8933  000234  ECC9  F02D         	call	_lcdInst
  8934                           
  8935                           ;UI.c: 119: printf("PAUSE < | BACK >");
  8936  000238  0ED9               	movlw	low STR_6
  8937  00023A  0100               	movlb	0	; () banked
  8938  00023C  6F8E               	movwf	printf@f& (0+255),b
  8939  00023E  0EFD               	movlw	high STR_6
  8940  000240  0100               	movlb	0	; () banked
  8941  000242  6F8F               	movwf	(printf@f+1)& (0+255),b
  8942  000244  EC8D  F00D         	call	_printf	;wreg free
  8943                           
  8944                           ;UI.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8945  000248  0E00               	movlw	0
  8946  00024A  0100               	movlb	0	; () banked
  8947  00024C  6FCA               	movwf	UI@i_415& (0+255),b
  8948  00024E                     l9426:
  8949                           
  8950                           ; BSR set to: 0
  8951  00024E  0E63               	movlw	99
  8952  000250  0100               	movlb	0	; () banked
  8953  000252  65CA               	cpfsgt	UI@i_415& (0+255),b
  8954  000254  D001               	goto	l9430
  8955  000256  D00C               	goto	l9434
  8956  000258                     l9430:
  8957                           
  8958                           ; BSR set to: 0
  8959  000258  0E68               	movlw	104
  8960  00025A  0100               	movlb	0	; () banked
  8961  00025C  6FC4               	movwf	??_UI& (0+255),b
  8962  00025E  0EE4               	movlw	228
  8963  000260                     u10377:
  8964  000260  2EE8               	decfsz	wreg,f,c
  8965  000262  D7FE               	bra	u10377
  8966  000264  2FC4               	decfsz	??_UI& (0+255),f,b
  8967  000266  D7FC               	bra	u10377
  8968  000268  F000               	nop	
  8969  00026A  0100               	movlb	0	; () banked
  8970  00026C  2BCA               	incf	UI@i_415& (0+255),f,b
  8971  00026E  D7EF               	goto	l9426
  8972  000270                     l9434:
  8973                           
  8974                           ; BSR set to: 0
  8975  000270  0100               	movlb	0	; () banked
  8976  000272  51F8               	movf	_logstate& (0+255),w,b
  8977  000274  0100               	movlb	0	; () banked
  8978  000276  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8979  000278  B4D8               	btfsc	status,2,c
  8980  00027A  0012               	return	
  8981                           
  8982                           ; BSR set to: 0
  8983                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8984                           
  8985                           ; BSR set to: 0
  8986                           
  8987                           ; BSR set to: 0
  8988  00027C  0E00               	movlw	0
  8989  00027E  0100               	movlb	0	; () banked
  8990  000280  6FCB               	movwf	UI@i_416& (0+255),b
  8991  000282                     l9440:
  8992                           
  8993                           ; BSR set to: 0
  8994  000282  0E63               	movlw	99
  8995  000284  0100               	movlb	0	; () banked
  8996  000286  65CB               	cpfsgt	UI@i_416& (0+255),b
  8997  000288  D001               	goto	l9444
  8998  00028A  D00C               	goto	l9448
  8999  00028C                     l9444:
  9000                           
  9001                           ; BSR set to: 0
  9002  00028C  0E68               	movlw	104
  9003  00028E  0100               	movlb	0	; () banked
  9004  000290  6FC4               	movwf	??_UI& (0+255),b
  9005  000292  0EE4               	movlw	228
  9006  000294                     u10387:
  9007  000294  2EE8               	decfsz	wreg,f,c
  9008  000296  D7FE               	bra	u10387
  9009  000298  2FC4               	decfsz	??_UI& (0+255),f,b
  9010  00029A  D7FC               	bra	u10387
  9011  00029C  F000               	nop	
  9012  00029E  0100               	movlb	0	; () banked
  9013  0002A0  2BCB               	incf	UI@i_416& (0+255),f,b
  9014  0002A2  D7EF               	goto	l9440
  9015  0002A4                     l9448:
  9016                           
  9017                           ; BSR set to: 0
  9018  0002A4  0100               	movlb	0	; () banked
  9019  0002A6  51F8               	movf	_logstate& (0+255),w,b
  9020  0002A8  0100               	movlb	0	; () banked
  9021  0002AA  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9022  0002AC  B4D8               	btfsc	status,2,c
  9023  0002AE  0012               	return	
  9024                           
  9025                           ; BSR set to: 0
  9026                           ;UI.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9027                           
  9028                           ; BSR set to: 0
  9029                           
  9030                           ; BSR set to: 0
  9031  0002B0  0E01               	movlw	1
  9032  0002B2  ECC9  F02D         	call	_lcdInst
  9033  0002B6  0E68               	movlw	104
  9034  0002B8  0100               	movlb	0	; () banked
  9035  0002BA  6FC4               	movwf	??_UI& (0+255),b
  9036  0002BC  0EE4               	movlw	228
  9037  0002BE                     u10397:
  9038  0002BE  2EE8               	decfsz	wreg,f,c
  9039  0002C0  D7FE               	bra	u10397
  9040  0002C2  2FC4               	decfsz	??_UI& (0+255),f,b
  9041  0002C4  D7FC               	bra	u10397
  9042  0002C6  F000               	nop	
  9043                           
  9044                           ;UI.c: 125: lcdInst(0b10000000);;
  9045  0002C8  0E80               	movlw	128
  9046  0002CA  ECC9  F02D         	call	_lcdInst
  9047                           
  9048                           ;UI.c: 126: printf("START:");
  9049  0002CE  0EC3               	movlw	low STR_7
  9050  0002D0  0100               	movlb	0	; () banked
  9051  0002D2  6F8E               	movwf	printf@f& (0+255),b
  9052  0002D4  0EFF               	movlw	high STR_7
  9053  0002D6  0100               	movlb	0	; () banked
  9054  0002D8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9055  0002DA  EC8D  F00D         	call	_printf	;wreg free
  9056                           
  9057                           ;UI.c: 127: lcdInst(0b11000000);;
  9058  0002DE  0EC0               	movlw	192
  9059  0002E0  ECC9  F02D         	call	_lcdInst
  9060                           
  9061                           ;UI.c: 128: char month[] = "MMM";
  9062  0002E4  C149  F0D6         	movff	UI@F3246,UI@month
  9063  0002E8  C14A  F0D7         	movff	UI@F3246+1,UI@month+1
  9064  0002EC  C14B  F0D8         	movff	UI@F3246+2,UI@month+2
  9065  0002F0  C14C  F0D9         	movff	UI@F3246+3,UI@month+3
  9066                           
  9067                           ;UI.c: 129: switch(log_startTime[5]){
  9068  0002F4  D0C3               	goto	l9492
  9069  0002F6                     l9464:
  9070                           
  9071                           ;UI.c: 131: strcpy(month, "JAN");
  9072  0002F6  0ED6               	movlw	low UI@month
  9073  0002F8  0100               	movlb	0	; () banked
  9074  0002FA  6F80               	movwf	strcpy@to& (0+255),b
  9075  0002FC  0E00               	movlw	high UI@month
  9076  0002FE  0100               	movlb	0	; () banked
  9077  000300  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9078  000302  0EDA               	movlw	low STR_8
  9079  000304  0100               	movlb	0	; () banked
  9080  000306  6F82               	movwf	strcpy@from& (0+255),b
  9081  000308  0EFF               	movlw	high STR_8
  9082  00030A  0100               	movlb	0	; () banked
  9083  00030C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9084  00030E  EC18  F02B         	call	_strcpy	;wreg free
  9085                           
  9086                           ;UI.c: 132: break;
  9087  000312  D0E6               	goto	l9494
  9088  000314                     l9466:
  9089                           
  9090                           ;UI.c: 134: strcpy(month, "FEB");
  9091  000314  0ED6               	movlw	low UI@month
  9092  000316  0100               	movlb	0	; () banked
  9093  000318  6F80               	movwf	strcpy@to& (0+255),b
  9094  00031A  0E00               	movlw	high UI@month
  9095  00031C  0100               	movlb	0	; () banked
  9096  00031E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9097  000320  0ECA               	movlw	low STR_9
  9098  000322  0100               	movlb	0	; () banked
  9099  000324  6F82               	movwf	strcpy@from& (0+255),b
  9100  000326  0EFF               	movlw	high STR_9
  9101  000328  0100               	movlb	0	; () banked
  9102  00032A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9103  00032C  EC18  F02B         	call	_strcpy	;wreg free
  9104                           
  9105                           ;UI.c: 135: break;
  9106  000330  D0D7               	goto	l9494
  9107  000332                     l9468:
  9108                           
  9109                           ;UI.c: 137: strcpy(month, "MAR");
  9110  000332  0ED6               	movlw	low UI@month
  9111  000334  0100               	movlb	0	; () banked
  9112  000336  6F80               	movwf	strcpy@to& (0+255),b
  9113  000338  0E00               	movlw	high UI@month
  9114  00033A  0100               	movlb	0	; () banked
  9115  00033C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9116  00033E  0EE6               	movlw	low STR_10
  9117  000340  0100               	movlb	0	; () banked
  9118  000342  6F82               	movwf	strcpy@from& (0+255),b
  9119  000344  0EFF               	movlw	high STR_10
  9120  000346  0100               	movlb	0	; () banked
  9121  000348  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9122  00034A  EC18  F02B         	call	_strcpy	;wreg free
  9123                           
  9124                           ;UI.c: 138: break;
  9125  00034E  D0C8               	goto	l9494
  9126  000350                     l9470:
  9127                           
  9128                           ;UI.c: 140: strcpy(month, "APR");
  9129  000350  0ED6               	movlw	low UI@month
  9130  000352  0100               	movlb	0	; () banked
  9131  000354  6F80               	movwf	strcpy@to& (0+255),b
  9132  000356  0E00               	movlw	high UI@month
  9133  000358  0100               	movlb	0	; () banked
  9134  00035A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9135  00035C  0EEA               	movlw	low STR_11
  9136  00035E  0100               	movlb	0	; () banked
  9137  000360  6F82               	movwf	strcpy@from& (0+255),b
  9138  000362  0EFF               	movlw	high STR_11
  9139  000364  0100               	movlb	0	; () banked
  9140  000366  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9141  000368  EC18  F02B         	call	_strcpy	;wreg free
  9142                           
  9143                           ;UI.c: 141: break;
  9144  00036C  D0B9               	goto	l9494
  9145  00036E                     l9472:
  9146                           
  9147                           ;UI.c: 143: strcpy(month, "MAY");
  9148  00036E  0ED6               	movlw	low UI@month
  9149  000370  0100               	movlb	0	; () banked
  9150  000372  6F80               	movwf	strcpy@to& (0+255),b
  9151  000374  0E00               	movlw	high UI@month
  9152  000376  0100               	movlb	0	; () banked
  9153  000378  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9154  00037A  0EFA               	movlw	low STR_12
  9155  00037C  0100               	movlb	0	; () banked
  9156  00037E  6F82               	movwf	strcpy@from& (0+255),b
  9157  000380  0EFF               	movlw	high STR_12
  9158  000382  0100               	movlb	0	; () banked
  9159  000384  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9160  000386  EC18  F02B         	call	_strcpy	;wreg free
  9161                           
  9162                           ;UI.c: 144: break;
  9163  00038A  D0AA               	goto	l9494
  9164  00038C                     l9474:
  9165                           
  9166                           ;UI.c: 146: strcpy(month, "JUN");
  9167  00038C  0ED6               	movlw	low UI@month
  9168  00038E  0100               	movlb	0	; () banked
  9169  000390  6F80               	movwf	strcpy@to& (0+255),b
  9170  000392  0E00               	movlw	high UI@month
  9171  000394  0100               	movlb	0	; () banked
  9172  000396  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9173  000398  0EDE               	movlw	low STR_13
  9174  00039A  0100               	movlb	0	; () banked
  9175  00039C  6F82               	movwf	strcpy@from& (0+255),b
  9176  00039E  0EFF               	movlw	high STR_13
  9177  0003A0  0100               	movlb	0	; () banked
  9178  0003A2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9179  0003A4  EC18  F02B         	call	_strcpy	;wreg free
  9180                           
  9181                           ;UI.c: 147: break;
  9182  0003A8  D09B               	goto	l9494
  9183  0003AA                     l9476:
  9184                           
  9185                           ;UI.c: 149: strcpy(month, "JUL");
  9186  0003AA  0ED6               	movlw	low UI@month
  9187  0003AC  0100               	movlb	0	; () banked
  9188  0003AE  6F80               	movwf	strcpy@to& (0+255),b
  9189  0003B0  0E00               	movlw	high UI@month
  9190  0003B2  0100               	movlb	0	; () banked
  9191  0003B4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9192  0003B6  0ED6               	movlw	low STR_14
  9193  0003B8  0100               	movlb	0	; () banked
  9194  0003BA  6F82               	movwf	strcpy@from& (0+255),b
  9195  0003BC  0EFF               	movlw	high STR_14
  9196  0003BE  0100               	movlb	0	; () banked
  9197  0003C0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9198  0003C2  EC18  F02B         	call	_strcpy	;wreg free
  9199                           
  9200                           ;UI.c: 150: break;
  9201  0003C6  D08C               	goto	l9494
  9202  0003C8                     l9478:
  9203                           
  9204                           ;UI.c: 152: strcpy(month, "AUG");
  9205  0003C8  0ED6               	movlw	low UI@month
  9206  0003CA  0100               	movlb	0	; () banked
  9207  0003CC  6F80               	movwf	strcpy@to& (0+255),b
  9208  0003CE  0E00               	movlw	high UI@month
  9209  0003D0  0100               	movlb	0	; () banked
  9210  0003D2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9211  0003D4  0ED2               	movlw	low STR_15
  9212  0003D6  0100               	movlb	0	; () banked
  9213  0003D8  6F82               	movwf	strcpy@from& (0+255),b
  9214  0003DA  0EFF               	movlw	high STR_15
  9215  0003DC  0100               	movlb	0	; () banked
  9216  0003DE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9217  0003E0  EC18  F02B         	call	_strcpy	;wreg free
  9218                           
  9219                           ;UI.c: 153: break;
  9220  0003E4  D07D               	goto	l9494
  9221  0003E6                     l9480:
  9222                           
  9223                           ;UI.c: 155: strcpy(month, "SEP");
  9224  0003E6  0ED6               	movlw	low UI@month
  9225  0003E8  0100               	movlb	0	; () banked
  9226  0003EA  6F80               	movwf	strcpy@to& (0+255),b
  9227  0003EC  0E00               	movlw	high UI@month
  9228  0003EE  0100               	movlb	0	; () banked
  9229  0003F0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9230  0003F2  0EE2               	movlw	low STR_16
  9231  0003F4  0100               	movlb	0	; () banked
  9232  0003F6  6F82               	movwf	strcpy@from& (0+255),b
  9233  0003F8  0EFF               	movlw	high STR_16
  9234  0003FA  0100               	movlb	0	; () banked
  9235  0003FC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9236  0003FE  EC18  F02B         	call	_strcpy	;wreg free
  9237                           
  9238                           ;UI.c: 156: break;
  9239  000402  D06E               	goto	l9494
  9240  000404                     l9482:
  9241                           
  9242                           ;UI.c: 158: strcpy(month, "OCT");
  9243  000404  0ED6               	movlw	low UI@month
  9244  000406  0100               	movlb	0	; () banked
  9245  000408  6F80               	movwf	strcpy@to& (0+255),b
  9246  00040A  0E00               	movlw	high UI@month
  9247  00040C  0100               	movlb	0	; () banked
  9248  00040E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9249  000410  0EF2               	movlw	low STR_17
  9250  000412  0100               	movlb	0	; () banked
  9251  000414  6F82               	movwf	strcpy@from& (0+255),b
  9252  000416  0EFF               	movlw	high STR_17
  9253  000418  0100               	movlb	0	; () banked
  9254  00041A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9255  00041C  EC18  F02B         	call	_strcpy	;wreg free
  9256                           
  9257                           ;UI.c: 159: break;
  9258  000420  D05F               	goto	l9494
  9259  000422                     l9484:
  9260                           
  9261                           ;UI.c: 161: strcpy(month, "NOV");
  9262  000422  0ED6               	movlw	low UI@month
  9263  000424  0100               	movlb	0	; () banked
  9264  000426  6F80               	movwf	strcpy@to& (0+255),b
  9265  000428  0E00               	movlw	high UI@month
  9266  00042A  0100               	movlb	0	; () banked
  9267  00042C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9268  00042E  0EF6               	movlw	low STR_18
  9269  000430  0100               	movlb	0	; () banked
  9270  000432  6F82               	movwf	strcpy@from& (0+255),b
  9271  000434  0EFF               	movlw	high STR_18
  9272  000436  0100               	movlb	0	; () banked
  9273  000438  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9274  00043A  EC18  F02B         	call	_strcpy	;wreg free
  9275                           
  9276                           ;UI.c: 162: break;
  9277  00043E  D050               	goto	l9494
  9278  000440                     l9486:
  9279                           
  9280                           ;UI.c: 164: strcpy(month, "DEC");
  9281  000440  0ED6               	movlw	low UI@month
  9282  000442  0100               	movlb	0	; () banked
  9283  000444  6F80               	movwf	strcpy@to& (0+255),b
  9284  000446  0E00               	movlw	high UI@month
  9285  000448  0100               	movlb	0	; () banked
  9286  00044A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9287  00044C  0ECE               	movlw	low STR_19
  9288  00044E  0100               	movlb	0	; () banked
  9289  000450  6F82               	movwf	strcpy@from& (0+255),b
  9290  000452  0EFF               	movlw	high STR_19
  9291  000454  0100               	movlb	0	; () banked
  9292  000456  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9293  000458  EC18  F02B         	call	_strcpy	;wreg free
  9294                           
  9295                           ;UI.c: 165: break;
  9296  00045C  D041               	goto	l9494
  9297  00045E                     l9488:
  9298                           
  9299                           ;UI.c: 167: strcpy(month, "ERR");
  9300  00045E  0ED6               	movlw	low UI@month
  9301  000460  0100               	movlb	0	; () banked
  9302  000462  6F80               	movwf	strcpy@to& (0+255),b
  9303  000464  0E00               	movlw	high UI@month
  9304  000466  0100               	movlb	0	; () banked
  9305  000468  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9306  00046A  0EEE               	movlw	low STR_20
  9307  00046C  0100               	movlb	0	; () banked
  9308  00046E  6F82               	movwf	strcpy@from& (0+255),b
  9309  000470  0EFF               	movlw	high STR_20
  9310  000472  0100               	movlb	0	; () banked
  9311  000474  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9312  000476  EC18  F02B         	call	_strcpy	;wreg free
  9313                           
  9314                           ;UI.c: 169: }
  9315                           
  9316                           ;UI.c: 168: break;
  9317  00047A  D032               	goto	l9494
  9318  00047C                     l9492:
  9319  00047C  EE21  F00A         	lfsr	2,_log_startTime+10
  9320  000480  CFDE F0C4          	movff	postinc2,??_UI
  9321  000484  CFDD F0C5          	movff	postdec2,??_UI+1
  9322                           
  9323                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9324                           ; Switch size 1, requested type "space"
  9325                           ; Number of cases is 1, Range of values is 0 to 0
  9326                           ; switch strategies available:
  9327                           ; Name         Instructions Cycles
  9328                           ; simple_byte            4     3 (average)
  9329                           ;	Chosen strategy is simple_byte
  9330  000488  0100               	movlb	0	; () banked
  9331  00048A  51C5               	movf	(??_UI+1)& (0+255),w,b
  9332  00048C  0A00               	xorlw	0	; case 0
  9333  00048E  A4D8               	btfss	status,2,c
  9334  000490  D7E6               	goto	l9488
  9335                           
  9336                           ; BSR set to: 0
  9337                           ; Switch size 1, requested type "space"
  9338                           ; Number of cases is 12, Range of values is 1 to 12
  9339                           ; switch strategies available:
  9340                           ; Name         Instructions Cycles
  9341                           ; simple_byte           37    19 (average)
  9342                           ;	Chosen strategy is simple_byte
  9343  000492  0100               	movlb	0	; () banked
  9344  000494  51C4               	movf	??_UI& (0+255),w,b
  9345  000496  0A01               	xorlw	1	; case 1
  9346  000498  B4D8               	btfsc	status,2,c
  9347  00049A  D72D               	goto	l9464
  9348  00049C  0A03               	xorlw	3	; case 2
  9349  00049E  B4D8               	btfsc	status,2,c
  9350  0004A0  D739               	goto	l9466
  9351  0004A2  0A01               	xorlw	1	; case 3
  9352  0004A4  B4D8               	btfsc	status,2,c
  9353  0004A6  D745               	goto	l9468
  9354  0004A8  0A07               	xorlw	7	; case 4
  9355  0004AA  B4D8               	btfsc	status,2,c
  9356  0004AC  D751               	goto	l9470
  9357  0004AE  0A01               	xorlw	1	; case 5
  9358  0004B0  B4D8               	btfsc	status,2,c
  9359  0004B2  D75D               	goto	l9472
  9360  0004B4  0A03               	xorlw	3	; case 6
  9361  0004B6  B4D8               	btfsc	status,2,c
  9362  0004B8  D769               	goto	l9474
  9363  0004BA  0A01               	xorlw	1	; case 7
  9364  0004BC  B4D8               	btfsc	status,2,c
  9365  0004BE  D775               	goto	l9476
  9366  0004C0  0A0F               	xorlw	15	; case 8
  9367  0004C2  B4D8               	btfsc	status,2,c
  9368  0004C4  D781               	goto	l9478
  9369  0004C6  0A01               	xorlw	1	; case 9
  9370  0004C8  B4D8               	btfsc	status,2,c
  9371  0004CA  D78D               	goto	l9480
  9372  0004CC  0A03               	xorlw	3	; case 10
  9373  0004CE  B4D8               	btfsc	status,2,c
  9374  0004D0  D799               	goto	l9482
  9375  0004D2  0A01               	xorlw	1	; case 11
  9376  0004D4  B4D8               	btfsc	status,2,c
  9377  0004D6  D7A5               	goto	l9484
  9378  0004D8  0A07               	xorlw	7	; case 12
  9379  0004DA  B4D8               	btfsc	status,2,c
  9380  0004DC  D7B1               	goto	l9486
  9381  0004DE  D7BF               	goto	l9488
  9382  0004E0                     l9494:
  9383                           
  9384                           ;UI.c: 170: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  9385  0004E0  0EA6               	movlw	low STR_21
  9386  0004E2  0100               	movlb	0	; () banked
  9387  0004E4  6F8E               	movwf	printf@f& (0+255),b
  9388  0004E6  0EFA               	movlw	high STR_21
  9389  0004E8  0100               	movlb	0	; () banked
  9390  0004EA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9391  0004EC  C108  F090         	movff	_log_startTime+8,?_printf+2
  9392  0004F0  C109  F091         	movff	_log_startTime+9,?_printf+3
  9393  0004F4  0ED6               	movlw	low UI@month
  9394  0004F6  0100               	movlb	0	; () banked
  9395  0004F8  6F92               	movwf	(?_printf+4)& (0+255),b
  9396  0004FA  0E00               	movlw	high UI@month
  9397  0004FC  0100               	movlb	0	; () banked
  9398  0004FE  6F93               	movwf	(?_printf+5)& (0+255),b
  9399  000500  C104  F094         	movff	_log_startTime+4,?_printf+6
  9400  000504  C105  F095         	movff	_log_startTime+5,?_printf+7
  9401  000508  C102  F096         	movff	_log_startTime+2,?_printf+8
  9402  00050C  C103  F097         	movff	_log_startTime+3,?_printf+9
  9403  000510  C100  F098         	movff	_log_startTime,?_printf+10
  9404  000514  C101  F099         	movff	_log_startTime+1,?_printf+11
  9405  000518  EC8D  F00D         	call	_printf	;wreg free
  9406                           
  9407                           ;UI.c: 172: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9408  00051C  0E00               	movlw	0
  9409  00051E  0100               	movlb	0	; () banked
  9410  000520  6FCC               	movwf	UI@i_434& (0+255),b
  9411  000522                     l9498:
  9412                           
  9413                           ; BSR set to: 0
  9414  000522  0E63               	movlw	99
  9415  000524  0100               	movlb	0	; () banked
  9416  000526  65CC               	cpfsgt	UI@i_434& (0+255),b
  9417  000528  D001               	goto	l9502
  9418  00052A  D00C               	goto	l9506
  9419  00052C                     l9502:
  9420                           
  9421                           ; BSR set to: 0
  9422  00052C  0E68               	movlw	104
  9423  00052E  0100               	movlb	0	; () banked
  9424  000530  6FC4               	movwf	??_UI& (0+255),b
  9425  000532  0EE4               	movlw	228
  9426  000534                     u10407:
  9427  000534  2EE8               	decfsz	wreg,f,c
  9428  000536  D7FE               	bra	u10407
  9429  000538  2FC4               	decfsz	??_UI& (0+255),f,b
  9430  00053A  D7FC               	bra	u10407
  9431  00053C  F000               	nop	
  9432  00053E  0100               	movlb	0	; () banked
  9433  000540  2BCC               	incf	UI@i_434& (0+255),f,b
  9434  000542  D7EF               	goto	l9498
  9435  000544                     l9506:
  9436                           
  9437                           ; BSR set to: 0
  9438  000544  0100               	movlb	0	; () banked
  9439  000546  51F8               	movf	_logstate& (0+255),w,b
  9440  000548  0100               	movlb	0	; () banked
  9441  00054A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9442  00054C  B4D8               	btfsc	status,2,c
  9443  00054E  0012               	return	
  9444                           
  9445                           ; BSR set to: 0
  9446                           ;UI.c: 173: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9447                           
  9448                           ; BSR set to: 0
  9449                           
  9450                           ; BSR set to: 0
  9451  000550  0E00               	movlw	0
  9452  000552  0100               	movlb	0	; () banked
  9453  000554  6FCD               	movwf	UI@i_435& (0+255),b
  9454  000556                     l9512:
  9455                           
  9456                           ; BSR set to: 0
  9457  000556  0E63               	movlw	99
  9458  000558  0100               	movlb	0	; () banked
  9459  00055A  65CD               	cpfsgt	UI@i_435& (0+255),b
  9460  00055C  D001               	goto	l9516
  9461  00055E  D00C               	goto	l9520
  9462  000560                     l9516:
  9463                           
  9464                           ; BSR set to: 0
  9465  000560  0E68               	movlw	104
  9466  000562  0100               	movlb	0	; () banked
  9467  000564  6FC4               	movwf	??_UI& (0+255),b
  9468  000566  0EE4               	movlw	228
  9469  000568                     u10417:
  9470  000568  2EE8               	decfsz	wreg,f,c
  9471  00056A  D7FE               	bra	u10417
  9472  00056C  2FC4               	decfsz	??_UI& (0+255),f,b
  9473  00056E  D7FC               	bra	u10417
  9474  000570  F000               	nop	
  9475  000572  0100               	movlb	0	; () banked
  9476  000574  2BCD               	incf	UI@i_435& (0+255),f,b
  9477  000576  D7EF               	goto	l9512
  9478  000578                     l9520:
  9479                           
  9480                           ; BSR set to: 0
  9481  000578  0100               	movlb	0	; () banked
  9482  00057A  51F8               	movf	_logstate& (0+255),w,b
  9483  00057C  0100               	movlb	0	; () banked
  9484  00057E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9485  000580  B4D8               	btfsc	status,2,c
  9486  000582  0012               	return	
  9487                           
  9488                           ; BSR set to: 0
  9489                           ;UI.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9490                           
  9491                           ; BSR set to: 0
  9492                           
  9493                           ; BSR set to: 0
  9494  000584  0E01               	movlw	1
  9495  000586  ECC9  F02D         	call	_lcdInst
  9496  00058A  0E68               	movlw	104
  9497  00058C  0100               	movlb	0	; () banked
  9498  00058E  6FC4               	movwf	??_UI& (0+255),b
  9499  000590  0EE4               	movlw	228
  9500  000592                     u10427:
  9501  000592  2EE8               	decfsz	wreg,f,c
  9502  000594  D7FE               	bra	u10427
  9503  000596  2FC4               	decfsz	??_UI& (0+255),f,b
  9504  000598  D7FC               	bra	u10427
  9505  00059A  F000               	nop	
  9506                           
  9507                           ;UI.c: 176: lcdInst(0b10000000);;
  9508  00059C  0E80               	movlw	128
  9509  00059E  ECC9  F02D         	call	_lcdInst
  9510                           
  9511                           ;UI.c: 177: printf("DURATION:");
  9512  0005A2  0E9A               	movlw	low STR_22
  9513  0005A4  0100               	movlb	0	; () banked
  9514  0005A6  6F8E               	movwf	printf@f& (0+255),b
  9515  0005A8  0EFF               	movlw	high STR_22
  9516  0005AA  0100               	movlb	0	; () banked
  9517  0005AC  6F8F               	movwf	(printf@f+1)& (0+255),b
  9518  0005AE  EC8D  F00D         	call	_printf	;wreg free
  9519                           
  9520                           ;UI.c: 178: lcdInst(0b11000000);;
  9521  0005B2  0EC0               	movlw	192
  9522  0005B4  ECC9  F02D         	call	_lcdInst
  9523                           
  9524                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  9525  0005B8  0E0E               	movlw	14
  9526  0005BA  0100               	movlb	0	; () banked
  9527  0005BC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9528  0005BE  0E10               	movlw	16
  9529  0005C0  6F82               	movwf	___awmod@divisor& (0+255),b
  9530  0005C2  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  9531  0005C6  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  9532  0005CA  EC98  F025         	call	___awmod	;wreg free
  9533  0005CE  C080  F0C6         	movff	?___awmod,_UI$2433
  9534  0005D2  C081  F0C7         	movff	?___awmod+1,_UI$2433+1
  9535                           
  9536                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  9537  0005D6  0E3B               	movlw	low STR_23
  9538  0005D8  0100               	movlb	0	; () banked
  9539  0005DA  6F8E               	movwf	printf@f& (0+255),b
  9540  0005DC  0EFF               	movlw	high STR_23
  9541  0005DE  0100               	movlb	0	; () banked
  9542  0005E0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9543  0005E2  0E0E               	movlw	14
  9544  0005E4  0100               	movlb	0	; () banked
  9545  0005E6  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9546  0005E8  0E10               	movlw	16
  9547  0005EA  6F82               	movwf	___awmod@divisor& (0+255),b
  9548  0005EC  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  9549  0005F0  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  9550  0005F4  EC98  F025         	call	___awmod	;wreg free
  9551  0005F8  C080  F086         	movff	?___awmod,___awdiv@dividend
  9552  0005FC  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  9553  000600  0E00               	movlw	0
  9554  000602  0100               	movlb	0	; () banked
  9555  000604  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  9556  000606  0E3C               	movlw	60
  9557  000608  6F88               	movwf	___awdiv@divisor& (0+255),b
  9558  00060A  EC86  F024         	call	___awdiv	;wreg free
  9559  00060E  C086  F090         	movff	?___awdiv,?_printf+2
  9560  000612  C087  F091         	movff	?___awdiv+1,?_printf+3
  9561  000616  C0C6  F080         	movff	_UI$2433,___awmod@dividend
  9562  00061A  C0C7  F081         	movff	_UI$2433+1,___awmod@dividend+1
  9563  00061E  0E00               	movlw	0
  9564  000620  0100               	movlb	0	; () banked
  9565  000622  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9566  000624  0E3C               	movlw	60
  9567  000626  6F82               	movwf	___awmod@divisor& (0+255),b
  9568  000628  EC98  F025         	call	___awmod	;wreg free
  9569  00062C  C080  F092         	movff	?___awmod,?_printf+4
  9570  000630  C081  F093         	movff	?___awmod+1,?_printf+5
  9571  000634  EC8D  F00D         	call	_printf	;wreg free
  9572                           
  9573                           ;UI.c: 181: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9574  000638  0E00               	movlw	0
  9575  00063A  0100               	movlb	0	; () banked
  9576  00063C  6FCE               	movwf	UI@i_438& (0+255),b
  9577  00063E                     l9540:
  9578                           
  9579                           ; BSR set to: 0
  9580  00063E  0E63               	movlw	99
  9581  000640  0100               	movlb	0	; () banked
  9582  000642  65CE               	cpfsgt	UI@i_438& (0+255),b
  9583  000644  D001               	goto	l9544
  9584  000646  D00C               	goto	l9548
  9585  000648                     l9544:
  9586                           
  9587                           ; BSR set to: 0
  9588  000648  0E68               	movlw	104
  9589  00064A  0100               	movlb	0	; () banked
  9590  00064C  6FC4               	movwf	??_UI& (0+255),b
  9591  00064E  0EE4               	movlw	228
  9592  000650                     u10437:
  9593  000650  2EE8               	decfsz	wreg,f,c
  9594  000652  D7FE               	bra	u10437
  9595  000654  2FC4               	decfsz	??_UI& (0+255),f,b
  9596  000656  D7FC               	bra	u10437
  9597  000658  F000               	nop	
  9598  00065A  0100               	movlb	0	; () banked
  9599  00065C  2BCE               	incf	UI@i_438& (0+255),f,b
  9600  00065E  D7EF               	goto	l9540
  9601  000660                     l9548:
  9602                           
  9603                           ; BSR set to: 0
  9604  000660  0100               	movlb	0	; () banked
  9605  000662  51F8               	movf	_logstate& (0+255),w,b
  9606  000664  0100               	movlb	0	; () banked
  9607  000666  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9608  000668  B4D8               	btfsc	status,2,c
  9609  00066A  0012               	return	
  9610                           
  9611                           ; BSR set to: 0
  9612                           ;UI.c: 182: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9613                           
  9614                           ; BSR set to: 0
  9615                           
  9616                           ; BSR set to: 0
  9617  00066C  0E00               	movlw	0
  9618  00066E  0100               	movlb	0	; () banked
  9619  000670  6FCF               	movwf	UI@i_439& (0+255),b
  9620  000672                     l9554:
  9621                           
  9622                           ; BSR set to: 0
  9623  000672  0E63               	movlw	99
  9624  000674  0100               	movlb	0	; () banked
  9625  000676  65CF               	cpfsgt	UI@i_439& (0+255),b
  9626  000678  D001               	goto	l9558
  9627  00067A  D00C               	goto	l9562
  9628  00067C                     l9558:
  9629                           
  9630                           ; BSR set to: 0
  9631  00067C  0E68               	movlw	104
  9632  00067E  0100               	movlb	0	; () banked
  9633  000680  6FC4               	movwf	??_UI& (0+255),b
  9634  000682  0EE4               	movlw	228
  9635  000684                     u10447:
  9636  000684  2EE8               	decfsz	wreg,f,c
  9637  000686  D7FE               	bra	u10447
  9638  000688  2FC4               	decfsz	??_UI& (0+255),f,b
  9639  00068A  D7FC               	bra	u10447
  9640  00068C  F000               	nop	
  9641  00068E  0100               	movlb	0	; () banked
  9642  000690  2BCF               	incf	UI@i_439& (0+255),f,b
  9643  000692  D7EF               	goto	l9554
  9644  000694                     l9562:
  9645                           
  9646                           ; BSR set to: 0
  9647  000694  0100               	movlb	0	; () banked
  9648  000696  51F8               	movf	_logstate& (0+255),w,b
  9649  000698  0100               	movlb	0	; () banked
  9650  00069A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9651  00069C  B4D8               	btfsc	status,2,c
  9652  00069E  0012               	return	
  9653                           
  9654                           ; BSR set to: 0
  9655                           ;UI.c: 184: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9656                           
  9657                           ; BSR set to: 0
  9658                           
  9659                           ; BSR set to: 0
  9660  0006A0  0E01               	movlw	1
  9661  0006A2  ECC9  F02D         	call	_lcdInst
  9662  0006A6  0E68               	movlw	104
  9663  0006A8  0100               	movlb	0	; () banked
  9664  0006AA  6FC4               	movwf	??_UI& (0+255),b
  9665  0006AC  0EE4               	movlw	228
  9666  0006AE                     u10457:
  9667  0006AE  2EE8               	decfsz	wreg,f,c
  9668  0006B0  D7FE               	bra	u10457
  9669  0006B2  2FC4               	decfsz	??_UI& (0+255),f,b
  9670  0006B4  D7FC               	bra	u10457
  9671  0006B6  F000               	nop	
  9672                           
  9673                           ;UI.c: 185: lcdInst(0b10000000);;
  9674  0006B8  0E80               	movlw	128
  9675  0006BA  ECC9  F02D         	call	_lcdInst
  9676                           
  9677                           ;UI.c: 186: printf(" -- POP  CAN -- ");
  9678  0006BE  0E2F               	movlw	low STR_24
  9679  0006C0  0100               	movlb	0	; () banked
  9680  0006C2  6F8E               	movwf	printf@f& (0+255),b
  9681  0006C4  0EFD               	movlw	high STR_24
  9682  0006C6  0100               	movlb	0	; () banked
  9683  0006C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9684  0006CA  EC8D  F00D         	call	_printf	;wreg free
  9685                           
  9686                           ;UI.c: 187: lcdInst(0b11000000);;
  9687  0006CE  0EC0               	movlw	192
  9688  0006D0  ECC9  F02D         	call	_lcdInst
  9689                           
  9690                           ;UI.c: 188: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  9691  0006D4  0E0C               	movlw	low STR_25
  9692  0006D6  0100               	movlb	0	; () banked
  9693  0006D8  6F8E               	movwf	printf@f& (0+255),b
  9694  0006DA  0EFE               	movlw	high STR_25
  9695  0006DC  0100               	movlb	0	; () banked
  9696  0006DE  6F8F               	movwf	(printf@f+1)& (0+255),b
  9697  0006E0  C0F4  F090         	movff	_log_count_pop_no_tab,?_printf+2
  9698  0006E4  C0F5  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  9699  0006E8  C141  F092         	movff	_log_count_pop_w_tab,?_printf+4
  9700  0006EC  C142  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  9701  0006F0  EC8D  F00D         	call	_printf	;wreg free
  9702                           
  9703                           ;UI.c: 190: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9704  0006F4  0E00               	movlw	0
  9705  0006F6  0100               	movlb	0	; () banked
  9706  0006F8  6FD0               	movwf	UI@i_442& (0+255),b
  9707  0006FA                     l9580:
  9708                           
  9709                           ; BSR set to: 0
  9710  0006FA  0E63               	movlw	99
  9711  0006FC  0100               	movlb	0	; () banked
  9712  0006FE  65D0               	cpfsgt	UI@i_442& (0+255),b
  9713  000700  D001               	goto	l9584
  9714  000702  D00C               	goto	l9588
  9715  000704                     l9584:
  9716                           
  9717                           ; BSR set to: 0
  9718  000704  0E68               	movlw	104
  9719  000706  0100               	movlb	0	; () banked
  9720  000708  6FC4               	movwf	??_UI& (0+255),b
  9721  00070A  0EE4               	movlw	228
  9722  00070C                     u10467:
  9723  00070C  2EE8               	decfsz	wreg,f,c
  9724  00070E  D7FE               	bra	u10467
  9725  000710  2FC4               	decfsz	??_UI& (0+255),f,b
  9726  000712  D7FC               	bra	u10467
  9727  000714  F000               	nop	
  9728  000716  0100               	movlb	0	; () banked
  9729  000718  2BD0               	incf	UI@i_442& (0+255),f,b
  9730  00071A  D7EF               	goto	l9580
  9731  00071C                     l9588:
  9732                           
  9733                           ; BSR set to: 0
  9734  00071C  0100               	movlb	0	; () banked
  9735  00071E  51F8               	movf	_logstate& (0+255),w,b
  9736  000720  0100               	movlb	0	; () banked
  9737  000722  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9738  000724  B4D8               	btfsc	status,2,c
  9739  000726  0012               	return	
  9740                           
  9741                           ; BSR set to: 0
  9742                           ;UI.c: 191: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9743                           
  9744                           ; BSR set to: 0
  9745                           
  9746                           ; BSR set to: 0
  9747  000728  0E00               	movlw	0
  9748  00072A  0100               	movlb	0	; () banked
  9749  00072C  6FD1               	movwf	UI@i_443& (0+255),b
  9750  00072E                     l9594:
  9751                           
  9752                           ; BSR set to: 0
  9753  00072E  0E63               	movlw	99
  9754  000730  0100               	movlb	0	; () banked
  9755  000732  65D1               	cpfsgt	UI@i_443& (0+255),b
  9756  000734  D001               	goto	l9598
  9757  000736  D00C               	goto	l9602
  9758  000738                     l9598:
  9759                           
  9760                           ; BSR set to: 0
  9761  000738  0E68               	movlw	104
  9762  00073A  0100               	movlb	0	; () banked
  9763  00073C  6FC4               	movwf	??_UI& (0+255),b
  9764  00073E  0EE4               	movlw	228
  9765  000740                     u10477:
  9766  000740  2EE8               	decfsz	wreg,f,c
  9767  000742  D7FE               	bra	u10477
  9768  000744  2FC4               	decfsz	??_UI& (0+255),f,b
  9769  000746  D7FC               	bra	u10477
  9770  000748  F000               	nop	
  9771  00074A  0100               	movlb	0	; () banked
  9772  00074C  2BD1               	incf	UI@i_443& (0+255),f,b
  9773  00074E  D7EF               	goto	l9594
  9774  000750                     l9602:
  9775                           
  9776                           ; BSR set to: 0
  9777  000750  0100               	movlb	0	; () banked
  9778  000752  51F8               	movf	_logstate& (0+255),w,b
  9779  000754  0100               	movlb	0	; () banked
  9780  000756  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9781  000758  B4D8               	btfsc	status,2,c
  9782  00075A  0012               	return	
  9783                           
  9784                           ; BSR set to: 0
  9785                           ;UI.c: 193: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9786                           
  9787                           ; BSR set to: 0
  9788                           
  9789                           ; BSR set to: 0
  9790  00075C  0E01               	movlw	1
  9791  00075E  ECC9  F02D         	call	_lcdInst
  9792  000762  0E68               	movlw	104
  9793  000764  0100               	movlb	0	; () banked
  9794  000766  6FC4               	movwf	??_UI& (0+255),b
  9795  000768  0EE4               	movlw	228
  9796  00076A                     u10487:
  9797  00076A  2EE8               	decfsz	wreg,f,c
  9798  00076C  D7FE               	bra	u10487
  9799  00076E  2FC4               	decfsz	??_UI& (0+255),f,b
  9800  000770  D7FC               	bra	u10487
  9801  000772  F000               	nop	
  9802                           
  9803                           ;UI.c: 194: lcdInst(0b10000000);;
  9804  000774  0E80               	movlw	128
  9805  000776  ECC9  F02D         	call	_lcdInst
  9806                           
  9807                           ;UI.c: 195: printf(" -- SOUP CAN -- ");
  9808  00077A  0E40               	movlw	low STR_26
  9809  00077C  0100               	movlb	0	; () banked
  9810  00077E  6F8E               	movwf	printf@f& (0+255),b
  9811  000780  0EFD               	movlw	high STR_26
  9812  000782  0100               	movlb	0	; () banked
  9813  000784  6F8F               	movwf	(printf@f+1)& (0+255),b
  9814  000786  EC8D  F00D         	call	_printf	;wreg free
  9815                           
  9816                           ;UI.c: 196: lcdInst(0b11000000);;
  9817  00078A  0EC0               	movlw	192
  9818  00078C  ECC9  F02D         	call	_lcdInst
  9819                           
  9820                           ;UI.c: 197: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  9821  000790  0EFB               	movlw	low STR_27
  9822  000792  0100               	movlb	0	; () banked
  9823  000794  6F8E               	movwf	printf@f& (0+255),b
  9824  000796  0EFD               	movlw	high STR_27
  9825  000798  0100               	movlb	0	; () banked
  9826  00079A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9827  00079C  C13D  F090         	movff	_log_count_can_no_lab,?_printf+2
  9828  0007A0  C13E  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  9829  0007A4  C13F  F092         	movff	_log_count_can_w_lab,?_printf+4
  9830  0007A8  C140  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  9831  0007AC  EC8D  F00D         	call	_printf	;wreg free
  9832                           
  9833                           ;UI.c: 199: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9834  0007B0  0E00               	movlw	0
  9835  0007B2  0100               	movlb	0	; () banked
  9836  0007B4  6FD2               	movwf	UI@i_446& (0+255),b
  9837  0007B6                     l9620:
  9838                           
  9839                           ; BSR set to: 0
  9840  0007B6  0E63               	movlw	99
  9841  0007B8  0100               	movlb	0	; () banked
  9842  0007BA  65D2               	cpfsgt	UI@i_446& (0+255),b
  9843  0007BC  D001               	goto	l9624
  9844  0007BE  D00C               	goto	l9628
  9845  0007C0                     l9624:
  9846                           
  9847                           ; BSR set to: 0
  9848  0007C0  0E68               	movlw	104
  9849  0007C2  0100               	movlb	0	; () banked
  9850  0007C4  6FC4               	movwf	??_UI& (0+255),b
  9851  0007C6  0EE4               	movlw	228
  9852  0007C8                     u10497:
  9853  0007C8  2EE8               	decfsz	wreg,f,c
  9854  0007CA  D7FE               	bra	u10497
  9855  0007CC  2FC4               	decfsz	??_UI& (0+255),f,b
  9856  0007CE  D7FC               	bra	u10497
  9857  0007D0  F000               	nop	
  9858  0007D2  0100               	movlb	0	; () banked
  9859  0007D4  2BD2               	incf	UI@i_446& (0+255),f,b
  9860  0007D6  D7EF               	goto	l9620
  9861  0007D8                     l9628:
  9862                           
  9863                           ; BSR set to: 0
  9864  0007D8  0100               	movlb	0	; () banked
  9865  0007DA  51F8               	movf	_logstate& (0+255),w,b
  9866  0007DC  0100               	movlb	0	; () banked
  9867  0007DE  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9868  0007E0  B4D8               	btfsc	status,2,c
  9869  0007E2  0012               	return	
  9870                           
  9871                           ; BSR set to: 0
  9872                           ;UI.c: 200: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9873                           
  9874                           ; BSR set to: 0
  9875                           
  9876                           ; BSR set to: 0
  9877  0007E4  0E00               	movlw	0
  9878  0007E6  0100               	movlb	0	; () banked
  9879  0007E8  6FD3               	movwf	UI@i_447& (0+255),b
  9880  0007EA                     l9634:
  9881                           
  9882                           ; BSR set to: 0
  9883  0007EA  0E63               	movlw	99
  9884  0007EC  0100               	movlb	0	; () banked
  9885  0007EE  65D3               	cpfsgt	UI@i_447& (0+255),b
  9886  0007F0  D001               	goto	l9638
  9887  0007F2  D00C               	goto	l9642
  9888  0007F4                     l9638:
  9889                           
  9890                           ; BSR set to: 0
  9891  0007F4  0E68               	movlw	104
  9892  0007F6  0100               	movlb	0	; () banked
  9893  0007F8  6FC4               	movwf	??_UI& (0+255),b
  9894  0007FA  0EE4               	movlw	228
  9895  0007FC                     u10507:
  9896  0007FC  2EE8               	decfsz	wreg,f,c
  9897  0007FE  D7FE               	bra	u10507
  9898  000800  2FC4               	decfsz	??_UI& (0+255),f,b
  9899  000802  D7FC               	bra	u10507
  9900  000804  F000               	nop	
  9901  000806  0100               	movlb	0	; () banked
  9902  000808  2BD3               	incf	UI@i_447& (0+255),f,b
  9903  00080A  D7EF               	goto	l9634
  9904  00080C                     l9642:
  9905                           
  9906                           ; BSR set to: 0
  9907  00080C  0100               	movlb	0	; () banked
  9908  00080E  51F8               	movf	_logstate& (0+255),w,b
  9909  000810  0100               	movlb	0	; () banked
  9910  000812  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9911  000814  B4D8               	btfsc	status,2,c
  9912  000816  0012               	return	
  9913                           
  9914                           ; BSR set to: 0
  9915                           ;UI.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9916                           
  9917                           ; BSR set to: 0
  9918                           
  9919                           ; BSR set to: 0
  9920  000818  0E01               	movlw	1
  9921  00081A  ECC9  F02D         	call	_lcdInst
  9922  00081E  0E68               	movlw	104
  9923  000820  0100               	movlb	0	; () banked
  9924  000822  6FC4               	movwf	??_UI& (0+255),b
  9925  000824  0EE4               	movlw	228
  9926  000826                     u10517:
  9927  000826  2EE8               	decfsz	wreg,f,c
  9928  000828  D7FE               	bra	u10517
  9929  00082A  2FC4               	decfsz	??_UI& (0+255),f,b
  9930  00082C  D7FC               	bra	u10517
  9931  00082E  F000               	nop	
  9932                           
  9933                           ;UI.c: 203: lcdInst(0b10000000);;
  9934  000830  0E80               	movlw	128
  9935  000832  ECC9  F02D         	call	_lcdInst
  9936                           
  9937                           ;UI.c: 204: printf("-- TOTAL CANS --");
  9938  000836  0E51               	movlw	low STR_28
  9939  000838  0100               	movlb	0	; () banked
  9940  00083A  6F8E               	movwf	printf@f& (0+255),b
  9941  00083C  0EFD               	movlw	high STR_28
  9942  00083E  0100               	movlb	0	; () banked
  9943  000840  6F8F               	movwf	(printf@f+1)& (0+255),b
  9944  000842  EC8D  F00D         	call	_printf	;wreg free
  9945                           
  9946                           ;UI.c: 205: lcdInst(0b11000000);;
  9947  000846  0EC0               	movlw	192
  9948  000848  ECC9  F02D         	call	_lcdInst
  9949                           
  9950                           ;UI.c: 206: printf("%d", log_count_total);
  9951  00084C  0E09               	movlw	low (STR_27+14)
  9952  00084E  0100               	movlb	0	; () banked
  9953  000850  6F8E               	movwf	printf@f& (0+255),b
  9954  000852  0EFE               	movlw	high (STR_27+14)
  9955  000854  0100               	movlb	0	; () banked
  9956  000856  6F8F               	movwf	(printf@f+1)& (0+255),b
  9957  000858  C143  F090         	movff	_log_count_total,?_printf+2
  9958  00085C  C144  F091         	movff	_log_count_total+1,?_printf+3
  9959  000860  EC8D  F00D         	call	_printf	;wreg free
  9960                           
  9961                           ;UI.c: 208: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9962  000864  0E00               	movlw	0
  9963  000866  0100               	movlb	0	; () banked
  9964  000868  6FD4               	movwf	UI@i_450& (0+255),b
  9965  00086A                     l9660:
  9966                           
  9967                           ; BSR set to: 0
  9968  00086A  0E63               	movlw	99
  9969  00086C  0100               	movlb	0	; () banked
  9970  00086E  65D4               	cpfsgt	UI@i_450& (0+255),b
  9971  000870  D001               	goto	l9664
  9972  000872  D00C               	goto	l9668
  9973  000874                     l9664:
  9974                           
  9975                           ; BSR set to: 0
  9976  000874  0E68               	movlw	104
  9977  000876  0100               	movlb	0	; () banked
  9978  000878  6FC4               	movwf	??_UI& (0+255),b
  9979  00087A  0EE4               	movlw	228
  9980  00087C                     u10527:
  9981  00087C  2EE8               	decfsz	wreg,f,c
  9982  00087E  D7FE               	bra	u10527
  9983  000880  2FC4               	decfsz	??_UI& (0+255),f,b
  9984  000882  D7FC               	bra	u10527
  9985  000884  F000               	nop	
  9986  000886  0100               	movlb	0	; () banked
  9987  000888  2BD4               	incf	UI@i_450& (0+255),f,b
  9988  00088A  D7EF               	goto	l9660
  9989  00088C                     l9668:
  9990                           
  9991                           ; BSR set to: 0
  9992  00088C  0100               	movlb	0	; () banked
  9993  00088E  51F8               	movf	_logstate& (0+255),w,b
  9994  000890  0100               	movlb	0	; () banked
  9995  000892  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9996  000894  B4D8               	btfsc	status,2,c
  9997  000896  0012               	return	
  9998                           
  9999                           ; BSR set to: 0
 10000                           ;UI.c: 209: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
 10001                           
 10002                           ; BSR set to: 0
 10003                           
 10004                           ; BSR set to: 0
 10005  000898  0E00               	movlw	0
 10006  00089A  0100               	movlb	0	; () banked
 10007  00089C  6FD5               	movwf	UI@i_451& (0+255),b
 10008  00089E                     l9674:
 10009                           
 10010                           ; BSR set to: 0
 10011  00089E  0E63               	movlw	99
 10012  0008A0  0100               	movlb	0	; () banked
 10013  0008A2  65D5               	cpfsgt	UI@i_451& (0+255),b
 10014  0008A4  D001               	goto	l9678
 10015  0008A6  D00C               	goto	l9682
 10016  0008A8                     l9678:
 10017                           
 10018                           ; BSR set to: 0
 10019  0008A8  0E68               	movlw	104
 10020  0008AA  0100               	movlb	0	; () banked
 10021  0008AC  6FC4               	movwf	??_UI& (0+255),b
 10022  0008AE  0EE4               	movlw	228
 10023  0008B0                     u10537:
 10024  0008B0  2EE8               	decfsz	wreg,f,c
 10025  0008B2  D7FE               	bra	u10537
 10026  0008B4  2FC4               	decfsz	??_UI& (0+255),f,b
 10027  0008B6  D7FC               	bra	u10537
 10028  0008B8  F000               	nop	
 10029  0008BA  0100               	movlb	0	; () banked
 10030  0008BC  2BD5               	incf	UI@i_451& (0+255),f,b
 10031  0008BE  D7EF               	goto	l9674
 10032  0008C0                     l9682:
 10033                           
 10034                           ; BSR set to: 0
 10035  0008C0  0100               	movlb	0	; () banked
 10036  0008C2  51F8               	movf	_logstate& (0+255),w,b
 10037  0008C4  0100               	movlb	0	; () banked
 10038  0008C6  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10039  0008C8  B4D8               	btfsc	status,2,c
 10040  0008CA  0012               	return	
 10041  0008CC                     l9686:
 10042  0008CC  0100               	movlb	0	; () banked
 10043  0008CE  51F8               	movf	_logstate& (0+255),w,b
 10044  0008D0  0100               	movlb	0	; () banked
 10045  0008D2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 10046  0008D4  B4D8               	btfsc	status,2,c
 10047  0008D6  0012               	return	
 10048  0008D8  D44A               	goto	l9382
 10049  0008DA                     __end_of_UI:
 10050                           	opt stack 0
 10051                           tblptru	equ	0xFF8
 10052                           tblptrh	equ	0xFF7
 10053                           tblptrl	equ	0xFF6
 10054                           tablat	equ	0xFF5
 10055                           prodh	equ	0xFF4
 10056                           prodl	equ	0xFF3
 10057                           intcon	equ	0xFF2
 10058                           intcon2	equ	0xFF1
 10059                           intcon3	equ	0xFF0
 10060                           postinc0	equ	0xFEE
 10061                           wreg	equ	0xFE8
 10062                           postdec1	equ	0xFE5
 10063                           fsr1l	equ	0xFE1
 10064                           indf2	equ	0xFDF
 10065                           postinc2	equ	0xFDE
 10066                           postdec2	equ	0xFDD
 10067                           fsr2h	equ	0xFDA
 10068                           fsr2l	equ	0xFD9
 10069                           status	equ	0xFD8
 10070                           
 10071 ;; *************** function _printRTC *****************
 10072 ;; Defined at:
 10073 ;;		line 63 in file "RTC.c"
 10074 ;; Parameters:    Size  Location     Type
 10075 ;;		None
 10076 ;; Auto vars:     Size  Location     Type
 10077 ;;  i               2   66[BANK0 ] int 
 10078 ;;  INT_time       14   46[BANK0 ] int [7]
 10079 ;;  month           4   62[BANK0 ] unsigned char [4]
 10080 ;;  RTC_month       2   60[BANK0 ] int 
 10081 ;; Return value:  Size  Location     Type
 10082 ;;                  1    wreg      void 
 10083 ;; Registers used:
 10084 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10085 ;; Tracked objects:
 10086 ;;		On entry : 0/0
 10087 ;;		On exit  : 0/0
 10088 ;;		Unchanged: 0/0
 10089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10091 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10092 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10093 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10094 ;;Total ram usage:       25 bytes
 10095 ;; Hardware stack levels used:    1
 10096 ;; Hardware stack levels required when called:   10
 10097 ;; This function calls:
 10098 ;;		_getRTC
 10099 ;;		_lcdInst
 10100 ;;		_printf
 10101 ;;		_strcpy
 10102 ;; This function is called by:
 10103 ;;		_UI
 10104 ;;		_change_state_to_menu_start
 10105 ;; This function uses a non-reentrant model
 10106 ;;
 10107                           
 10108                           	psect	text28
 10109  002CC2                     __ptext28:
 10110                           	opt stack 0
 10111  002CC2                     _printRTC:
 10112                           	opt stack 18
 10113                           
 10114                           ;RTC.c: 64: getRTC();
 10115                           
 10116                           ; BSR set to: 0
 10117                           ;incstack = 0
 10118  002CC2  EC2F  F026         	call	_getRTC	;wreg free
 10119                           
 10120                           ;RTC.c: 65: char month[] = "MMM";
 10121  002CC6  C14D  F0BE         	movff	printRTC@F3236,printRTC@month
 10122  002CCA  C14E  F0BF         	movff	printRTC@F3236+1,printRTC@month+1
 10123  002CCE  C14F  F0C0         	movff	printRTC@F3236+2,printRTC@month+2
 10124  002CD2  C150  F0C1         	movff	printRTC@F3236+3,printRTC@month+3
 10125                           
 10126                           ;RTC.c: 66: int INT_time[7];
 10127                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 10128  002CD6  0E00               	movlw	0
 10129  002CD8  0100               	movlb	0	; () banked
 10130  002CDA  6FC3               	movwf	(printRTC@i+1)& (0+255),b
 10131  002CDC  0E00               	movlw	0
 10132  002CDE  6FC2               	movwf	printRTC@i& (0+255),b
 10133                           
 10134                           ; BSR set to: 0
 10135  002CE0  0100               	movlb	0	; () banked
 10136  002CE2  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10137  002CE4  D008               	goto	l7190
 10138  002CE6  0100               	movlb	0	; () banked
 10139  002CE8  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10140  002CEA  E146               	bnz	l627
 10141  002CEC  0E07               	movlw	7
 10142  002CEE  0100               	movlb	0	; () banked
 10143  002CF0  5DC2               	subwf	printRTC@i& (0+255),w,b
 10144  002CF2  B0D8               	btfsc	status,0,c
 10145  002CF4  D041               	goto	l627
 10146  002CF6                     l7190:
 10147                           
 10148                           ; BSR set to: 0
 10149                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 10150  002CF6  0E1C               	movlw	low _time
 10151  002CF8  0100               	movlb	0	; () banked
 10152  002CFA  25C2               	addwf	printRTC@i& (0+255),w,b
 10153  002CFC  6ED9               	movwf	fsr2l,c
 10154  002CFE  0E01               	movlw	high _time
 10155  002D00  0100               	movlb	0	; () banked
 10156  002D02  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10157  002D04  6EDA               	movwf	fsr2h,c
 10158  002D06  50DF               	movf	indf2,w,c
 10159  002D08  0100               	movlb	0	; () banked
 10160  002D0A  6FAB               	movwf	??_printRTC& (0+255),b
 10161  002D0C  0100               	movlb	0	; () banked
 10162  002D0E  3BAB               	swapf	??_printRTC& (0+255),f,b
 10163  002D10  0E0F               	movlw	15
 10164  002D12  17AB               	andwf	??_printRTC& (0+255),f,b
 10165  002D14  0E0F               	movlw	15
 10166  002D16  0100               	movlb	0	; () banked
 10167  002D18  17AB               	andwf	??_printRTC& (0+255),f,b
 10168  002D1A  0100               	movlb	0	; () banked
 10169  002D1C  51AB               	movf	??_printRTC& (0+255),w,b
 10170  002D1E  0D0A               	mullw	10
 10171  002D20  0E1C               	movlw	low _time
 10172  002D22  0100               	movlb	0	; () banked
 10173  002D24  25C2               	addwf	printRTC@i& (0+255),w,b
 10174  002D26  6ED9               	movwf	fsr2l,c
 10175  002D28  0E01               	movlw	high _time
 10176  002D2A  0100               	movlb	0	; () banked
 10177  002D2C  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10178  002D2E  6EDA               	movwf	fsr2h,c
 10179  002D30  50DF               	movf	indf2,w,c
 10180  002D32  0B0F               	andlw	15
 10181  002D34  0100               	movlb	0	; () banked
 10182  002D36  6FAC               	movwf	(??_printRTC+1)& (0+255),b
 10183  002D38  6BAD               	clrf	(??_printRTC+2)& (0+255),b
 10184  002D3A  50F3               	movf	prodl,w,c
 10185  002D3C  0100               	movlb	0	; () banked
 10186  002D3E  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
 10187  002D40  50F4               	movf	prodh,w,c
 10188  002D42  0100               	movlb	0	; () banked
 10189  002D44  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
 10190  002D46  90D8               	bcf	status,0,c
 10191  002D48  0100               	movlb	0	; () banked
 10192  002D4A  35C2               	rlcf	printRTC@i& (0+255),w,b
 10193  002D4C  6ED9               	movwf	fsr2l,c
 10194  002D4E  0100               	movlb	0	; () banked
 10195  002D50  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
 10196  002D52  6EDA               	movwf	fsr2h,c
 10197  002D54  0EAE               	movlw	low printRTC@INT_time
 10198  002D56  26D9               	addwf	fsr2l,f,c
 10199  002D58  0E00               	movlw	high printRTC@INT_time
 10200  002D5A  22DA               	addwfc	fsr2h,f,c
 10201  002D5C  C0AC  FFDE         	movff	??_printRTC+1,postinc2
 10202  002D60  C0AD  FFDD         	movff	??_printRTC+2,postdec2
 10203                           
 10204                           ; BSR set to: 0
 10205  002D64  0100               	movlb	0	; () banked
 10206  002D66  4BC2               	infsnz	printRTC@i& (0+255),f,b
 10207  002D68  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
 10208                           
 10209                           ; BSR set to: 0
 10210  002D6A  0100               	movlb	0	; () banked
 10211  002D6C  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10212  002D6E  D7C3               	goto	l7190
 10213  002D70  0100               	movlb	0	; () banked
 10214  002D72  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10215  002D74  E101               	bnz	u6010
 10216  002D76  D7BA               	goto	L9
 10217  002D78                     u6010:
 10218  002D78                     l627:
 10219                           
 10220                           ; BSR set to: 0
 10221                           ;RTC.c: 69: }
 10222                           ;RTC.c: 70: int RTC_month = INT_time[5];
 10223  002D78  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
 10224  002D7C  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
 10225                           
 10226                           ;RTC.c: 72: switch(RTC_month){
 10227  002D80  D0B4               	goto	l7222
 10228  002D82                     l7196:
 10229                           
 10230                           ; BSR set to: 0
 10231                           ;RTC.c: 74: strcpy(month, "JAN");
 10232  002D82  0EBE               	movlw	low printRTC@month
 10233  002D84  0100               	movlb	0	; () banked
 10234  002D86  6F80               	movwf	strcpy@to& (0+255),b
 10235  002D88  0E00               	movlw	high printRTC@month
 10236  002D8A  0100               	movlb	0	; () banked
 10237  002D8C  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10238  002D8E  0EDA               	movlw	low STR_8
 10239  002D90  0100               	movlb	0	; () banked
 10240  002D92  6F82               	movwf	strcpy@from& (0+255),b
 10241  002D94  0EFF               	movlw	high STR_8
 10242  002D96  0100               	movlb	0	; () banked
 10243  002D98  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10244  002D9A  EC18  F02B         	call	_strcpy	;wreg free
 10245                           
 10246                           ;RTC.c: 75: break;
 10247  002D9E  D0D4               	goto	l7224
 10248  002DA0                     l7198:
 10249                           
 10250                           ;RTC.c: 77: strcpy(month, "FEB");
 10251  002DA0  0EBE               	movlw	low printRTC@month
 10252  002DA2  0100               	movlb	0	; () banked
 10253  002DA4  6F80               	movwf	strcpy@to& (0+255),b
 10254  002DA6  0E00               	movlw	high printRTC@month
 10255  002DA8  0100               	movlb	0	; () banked
 10256  002DAA  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10257  002DAC  0ECA               	movlw	low STR_9
 10258  002DAE  0100               	movlb	0	; () banked
 10259  002DB0  6F82               	movwf	strcpy@from& (0+255),b
 10260  002DB2  0EFF               	movlw	high STR_9
 10261  002DB4  0100               	movlb	0	; () banked
 10262  002DB6  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10263  002DB8  EC18  F02B         	call	_strcpy	;wreg free
 10264                           
 10265                           ;RTC.c: 78: break;
 10266  002DBC  D0C5               	goto	l7224
 10267  002DBE                     l7200:
 10268                           
 10269                           ;RTC.c: 80: strcpy(month, "MAR");
 10270  002DBE  0EBE               	movlw	low printRTC@month
 10271  002DC0  0100               	movlb	0	; () banked
 10272  002DC2  6F80               	movwf	strcpy@to& (0+255),b
 10273  002DC4  0E00               	movlw	high printRTC@month
 10274  002DC6  0100               	movlb	0	; () banked
 10275  002DC8  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10276  002DCA  0EE6               	movlw	low STR_10
 10277  002DCC  0100               	movlb	0	; () banked
 10278  002DCE  6F82               	movwf	strcpy@from& (0+255),b
 10279  002DD0  0EFF               	movlw	high STR_10
 10280  002DD2  0100               	movlb	0	; () banked
 10281  002DD4  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10282  002DD6  EC18  F02B         	call	_strcpy	;wreg free
 10283                           
 10284                           ;RTC.c: 81: break;
 10285  002DDA  D0B6               	goto	l7224
 10286  002DDC                     l7202:
 10287                           
 10288                           ;RTC.c: 83: strcpy(month, "APR");
 10289  002DDC  0EBE               	movlw	low printRTC@month
 10290  002DDE  0100               	movlb	0	; () banked
 10291  002DE0  6F80               	movwf	strcpy@to& (0+255),b
 10292  002DE2  0E00               	movlw	high printRTC@month
 10293  002DE4  0100               	movlb	0	; () banked
 10294  002DE6  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10295  002DE8  0EEA               	movlw	low STR_11
 10296  002DEA  0100               	movlb	0	; () banked
 10297  002DEC  6F82               	movwf	strcpy@from& (0+255),b
 10298  002DEE  0EFF               	movlw	high STR_11
 10299  002DF0  0100               	movlb	0	; () banked
 10300  002DF2  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10301  002DF4  EC18  F02B         	call	_strcpy	;wreg free
 10302                           
 10303                           ;RTC.c: 84: break;
 10304  002DF8  D0A7               	goto	l7224
 10305  002DFA                     l7204:
 10306                           
 10307                           ;RTC.c: 86: strcpy(month, "MAY");
 10308  002DFA  0EBE               	movlw	low printRTC@month
 10309  002DFC  0100               	movlb	0	; () banked
 10310  002DFE  6F80               	movwf	strcpy@to& (0+255),b
 10311  002E00  0E00               	movlw	high printRTC@month
 10312  002E02  0100               	movlb	0	; () banked
 10313  002E04  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10314  002E06  0EFA               	movlw	low STR_12
 10315  002E08  0100               	movlb	0	; () banked
 10316  002E0A  6F82               	movwf	strcpy@from& (0+255),b
 10317  002E0C  0EFF               	movlw	high STR_12
 10318  002E0E  0100               	movlb	0	; () banked
 10319  002E10  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10320  002E12  EC18  F02B         	call	_strcpy	;wreg free
 10321                           
 10322                           ;RTC.c: 87: break;
 10323  002E16  D098               	goto	l7224
 10324  002E18                     l7206:
 10325                           
 10326                           ;RTC.c: 89: strcpy(month, "JUN");
 10327  002E18  0EBE               	movlw	low printRTC@month
 10328  002E1A  0100               	movlb	0	; () banked
 10329  002E1C  6F80               	movwf	strcpy@to& (0+255),b
 10330  002E1E  0E00               	movlw	high printRTC@month
 10331  002E20  0100               	movlb	0	; () banked
 10332  002E22  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10333  002E24  0EDE               	movlw	low STR_13
 10334  002E26  0100               	movlb	0	; () banked
 10335  002E28  6F82               	movwf	strcpy@from& (0+255),b
 10336  002E2A  0EFF               	movlw	high STR_13
 10337  002E2C  0100               	movlb	0	; () banked
 10338  002E2E  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10339  002E30  EC18  F02B         	call	_strcpy	;wreg free
 10340                           
 10341                           ;RTC.c: 90: break;
 10342  002E34  D089               	goto	l7224
 10343  002E36                     l7208:
 10344                           
 10345                           ;RTC.c: 92: strcpy(month, "JUL");
 10346  002E36  0EBE               	movlw	low printRTC@month
 10347  002E38  0100               	movlb	0	; () banked
 10348  002E3A  6F80               	movwf	strcpy@to& (0+255),b
 10349  002E3C  0E00               	movlw	high printRTC@month
 10350  002E3E  0100               	movlb	0	; () banked
 10351  002E40  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10352  002E42  0ED6               	movlw	low STR_14
 10353  002E44  0100               	movlb	0	; () banked
 10354  002E46  6F82               	movwf	strcpy@from& (0+255),b
 10355  002E48  0EFF               	movlw	high STR_14
 10356  002E4A  0100               	movlb	0	; () banked
 10357  002E4C  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10358  002E4E  EC18  F02B         	call	_strcpy	;wreg free
 10359                           
 10360                           ;RTC.c: 93: break;
 10361  002E52  D07A               	goto	l7224
 10362  002E54                     l7210:
 10363                           
 10364                           ;RTC.c: 95: strcpy(month, "AUG");
 10365  002E54  0EBE               	movlw	low printRTC@month
 10366  002E56  0100               	movlb	0	; () banked
 10367  002E58  6F80               	movwf	strcpy@to& (0+255),b
 10368  002E5A  0E00               	movlw	high printRTC@month
 10369  002E5C  0100               	movlb	0	; () banked
 10370  002E5E  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10371  002E60  0ED2               	movlw	low STR_15
 10372  002E62  0100               	movlb	0	; () banked
 10373  002E64  6F82               	movwf	strcpy@from& (0+255),b
 10374  002E66  0EFF               	movlw	high STR_15
 10375  002E68  0100               	movlb	0	; () banked
 10376  002E6A  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10377  002E6C  EC18  F02B         	call	_strcpy	;wreg free
 10378                           
 10379                           ;RTC.c: 96: break;
 10380  002E70  D06B               	goto	l7224
 10381  002E72                     l7212:
 10382                           
 10383                           ;RTC.c: 98: strcpy(month, "SEP");
 10384  002E72  0EBE               	movlw	low printRTC@month
 10385  002E74  0100               	movlb	0	; () banked
 10386  002E76  6F80               	movwf	strcpy@to& (0+255),b
 10387  002E78  0E00               	movlw	high printRTC@month
 10388  002E7A  0100               	movlb	0	; () banked
 10389  002E7C  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10390  002E7E  0EE2               	movlw	low STR_16
 10391  002E80  0100               	movlb	0	; () banked
 10392  002E82  6F82               	movwf	strcpy@from& (0+255),b
 10393  002E84  0EFF               	movlw	high STR_16
 10394  002E86  0100               	movlb	0	; () banked
 10395  002E88  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10396  002E8A  EC18  F02B         	call	_strcpy	;wreg free
 10397                           
 10398                           ;RTC.c: 99: break;
 10399  002E8E  D05C               	goto	l7224
 10400  002E90                     l7214:
 10401                           
 10402                           ;RTC.c: 101: strcpy(month, "OCT");
 10403  002E90  0EBE               	movlw	low printRTC@month
 10404  002E92  0100               	movlb	0	; () banked
 10405  002E94  6F80               	movwf	strcpy@to& (0+255),b
 10406  002E96  0E00               	movlw	high printRTC@month
 10407  002E98  0100               	movlb	0	; () banked
 10408  002E9A  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10409  002E9C  0EF2               	movlw	low STR_17
 10410  002E9E  0100               	movlb	0	; () banked
 10411  002EA0  6F82               	movwf	strcpy@from& (0+255),b
 10412  002EA2  0EFF               	movlw	high STR_17
 10413  002EA4  0100               	movlb	0	; () banked
 10414  002EA6  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10415  002EA8  EC18  F02B         	call	_strcpy	;wreg free
 10416                           
 10417                           ;RTC.c: 102: break;
 10418  002EAC  D04D               	goto	l7224
 10419  002EAE                     l7216:
 10420                           
 10421                           ;RTC.c: 104: strcpy(month, "NOV");
 10422  002EAE  0EBE               	movlw	low printRTC@month
 10423  002EB0  0100               	movlb	0	; () banked
 10424  002EB2  6F80               	movwf	strcpy@to& (0+255),b
 10425  002EB4  0E00               	movlw	high printRTC@month
 10426  002EB6  0100               	movlb	0	; () banked
 10427  002EB8  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10428  002EBA  0EF6               	movlw	low STR_18
 10429  002EBC  0100               	movlb	0	; () banked
 10430  002EBE  6F82               	movwf	strcpy@from& (0+255),b
 10431  002EC0  0EFF               	movlw	high STR_18
 10432  002EC2  0100               	movlb	0	; () banked
 10433  002EC4  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10434  002EC6  EC18  F02B         	call	_strcpy	;wreg free
 10435                           
 10436                           ;RTC.c: 105: break;
 10437  002ECA  D03E               	goto	l7224
 10438  002ECC                     l7218:
 10439                           
 10440                           ;RTC.c: 107: strcpy(month, "DEC");
 10441  002ECC  0EBE               	movlw	low printRTC@month
 10442  002ECE  0100               	movlb	0	; () banked
 10443  002ED0  6F80               	movwf	strcpy@to& (0+255),b
 10444  002ED2  0E00               	movlw	high printRTC@month
 10445  002ED4  0100               	movlb	0	; () banked
 10446  002ED6  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10447  002ED8  0ECE               	movlw	low STR_19
 10448  002EDA  0100               	movlb	0	; () banked
 10449  002EDC  6F82               	movwf	strcpy@from& (0+255),b
 10450  002EDE  0EFF               	movlw	high STR_19
 10451  002EE0  0100               	movlb	0	; () banked
 10452  002EE2  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10453  002EE4  EC18  F02B         	call	_strcpy	;wreg free
 10454                           
 10455                           ;RTC.c: 109: }
 10456                           
 10457                           ;RTC.c: 108: break;
 10458  002EE8  D02F               	goto	l7224
 10459  002EEA                     l7222:
 10460  002EEA  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
 10461  002EEE  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
 10462                           
 10463                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10464                           ; Switch size 1, requested type "space"
 10465                           ; Number of cases is 1, Range of values is 0 to 0
 10466                           ; switch strategies available:
 10467                           ; Name         Instructions Cycles
 10468                           ; simple_byte            4     3 (average)
 10469                           ;	Chosen strategy is simple_byte
 10470  002EF2  0100               	movlb	0	; () banked
 10471  002EF4  51AC               	movf	(??_printRTC+1)& (0+255),w,b
 10472  002EF6  0A00               	xorlw	0	; case 0
 10473  002EF8  A4D8               	btfss	status,2,c
 10474  002EFA  D026               	goto	l7224
 10475                           
 10476                           ; BSR set to: 0
 10477                           ; Switch size 1, requested type "space"
 10478                           ; Number of cases is 12, Range of values is 1 to 12
 10479                           ; switch strategies available:
 10480                           ; Name         Instructions Cycles
 10481                           ; simple_byte           37    19 (average)
 10482                           ;	Chosen strategy is simple_byte
 10483  002EFC  0100               	movlb	0	; () banked
 10484  002EFE  51AB               	movf	??_printRTC& (0+255),w,b
 10485  002F00  0A01               	xorlw	1	; case 1
 10486  002F02  B4D8               	btfsc	status,2,c
 10487  002F04  D73E               	goto	l7196
 10488  002F06  0A03               	xorlw	3	; case 2
 10489  002F08  B4D8               	btfsc	status,2,c
 10490  002F0A  D74A               	goto	l7198
 10491  002F0C  0A01               	xorlw	1	; case 3
 10492  002F0E  B4D8               	btfsc	status,2,c
 10493  002F10  D756               	goto	l7200
 10494  002F12  0A07               	xorlw	7	; case 4
 10495  002F14  B4D8               	btfsc	status,2,c
 10496  002F16  D762               	goto	l7202
 10497  002F18  0A01               	xorlw	1	; case 5
 10498  002F1A  B4D8               	btfsc	status,2,c
 10499  002F1C  D76E               	goto	l7204
 10500  002F1E  0A03               	xorlw	3	; case 6
 10501  002F20  B4D8               	btfsc	status,2,c
 10502  002F22  D77A               	goto	l7206
 10503  002F24  0A01               	xorlw	1	; case 7
 10504  002F26  B4D8               	btfsc	status,2,c
 10505  002F28  D786               	goto	l7208
 10506  002F2A  0A0F               	xorlw	15	; case 8
 10507  002F2C  B4D8               	btfsc	status,2,c
 10508  002F2E  D792               	goto	l7210
 10509  002F30  0A01               	xorlw	1	; case 9
 10510  002F32  B4D8               	btfsc	status,2,c
 10511  002F34  D79E               	goto	l7212
 10512  002F36  0A03               	xorlw	3	; case 10
 10513  002F38  B4D8               	btfsc	status,2,c
 10514  002F3A  D7AA               	goto	l7214
 10515  002F3C  0A01               	xorlw	1	; case 11
 10516  002F3E  B4D8               	btfsc	status,2,c
 10517  002F40  D7B6               	goto	l7216
 10518  002F42  0A07               	xorlw	7	; case 12
 10519  002F44  B4D8               	btfsc	status,2,c
 10520  002F46  D7C2               	goto	l7218
 10521  002F48                     l7224:
 10522                           
 10523                           ;RTC.c: 110: lcdInst(0b10000000);;
 10524  002F48  0E80               	movlw	128
 10525  002F4A  ECC9  F02D         	call	_lcdInst
 10526                           
 10527                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 10528  002F4E  0EA6               	movlw	low STR_21
 10529  002F50  0100               	movlb	0	; () banked
 10530  002F52  6F8E               	movwf	printf@f& (0+255),b
 10531  002F54  0EFA               	movlw	high STR_21
 10532  002F56  0100               	movlb	0	; () banked
 10533  002F58  6F8F               	movwf	(printf@f+1)& (0+255),b
 10534  002F5A  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
 10535  002F5E  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
 10536  002F62  0EBE               	movlw	low printRTC@month
 10537  002F64  0100               	movlb	0	; () banked
 10538  002F66  6F92               	movwf	(?_printf+4)& (0+255),b
 10539  002F68  0E00               	movlw	high printRTC@month
 10540  002F6A  0100               	movlb	0	; () banked
 10541  002F6C  6F93               	movwf	(?_printf+5)& (0+255),b
 10542  002F6E  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
 10543  002F72  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
 10544  002F76  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
 10545  002F7A  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
 10546  002F7E  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
 10547  002F82  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
 10548  002F86  EC8D  F00D         	call	_printf	;wreg free
 10549  002F8A  0012               	return		;funcret
 10550  002F8C                     __end_of_printRTC:
 10551                           	opt stack 0
 10552                           tblptru	equ	0xFF8
 10553                           tblptrh	equ	0xFF7
 10554                           tblptrl	equ	0xFF6
 10555                           tablat	equ	0xFF5
 10556                           prodh	equ	0xFF4
 10557                           prodl	equ	0xFF3
 10558                           intcon	equ	0xFF2
 10559                           intcon2	equ	0xFF1
 10560                           intcon3	equ	0xFF0
 10561                           postinc0	equ	0xFEE
 10562                           wreg	equ	0xFE8
 10563                           postdec1	equ	0xFE5
 10564                           fsr1l	equ	0xFE1
 10565                           indf2	equ	0xFDF
 10566                           postinc2	equ	0xFDE
 10567                           postdec2	equ	0xFDD
 10568                           fsr2h	equ	0xFDA
 10569                           fsr2l	equ	0xFD9
 10570                           status	equ	0xFD8
 10571                           
 10572 ;; *************** function _strcpy *****************
 10573 ;; Defined at:
 10574 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 10575 ;; Parameters:    Size  Location     Type
 10576 ;;  to              2    0[BANK0 ] PTR unsigned char 
 10577 ;;		 -> printRTC@month(4), UI@month(4), 
 10578 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 10579 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 10580 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 10581 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 10582 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 10583 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 10584 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 10585 ;;		 -> STR_8(4), 
 10586 ;; Auto vars:     Size  Location     Type
 10587 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 10588 ;;		 -> printRTC@month(4), UI@month(4), 
 10589 ;; Return value:  Size  Location     Type
 10590 ;;                  2    0[BANK0 ] PTR unsigned char 
 10591 ;; Registers used:
 10592 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10593 ;; Tracked objects:
 10594 ;;		On entry : 0/0
 10595 ;;		On exit  : 0/0
 10596 ;;		Unchanged: 0/0
 10597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10598 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10599 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10601 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10602 ;;Total ram usage:        6 bytes
 10603 ;; Hardware stack levels used:    1
 10604 ;; Hardware stack levels required when called:    7
 10605 ;; This function calls:
 10606 ;;		Nothing
 10607 ;; This function is called by:
 10608 ;;		_UI
 10609 ;;		_printRTC
 10610 ;; This function uses a non-reentrant model
 10611 ;;
 10612                           
 10613                           	psect	text29
 10614  005630                     __ptext29:
 10615                           	opt stack 0
 10616  005630                     _strcpy:
 10617                           	opt stack 20
 10618                           
 10619                           ;incstack = 0
 10620  005630  C080  F084         	movff	strcpy@to,strcpy@cp
 10621  005634  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
 10622  005638  D006               	goto	l6888
 10623  00563A                     l6886:
 10624  00563A  0100               	movlb	0	; () banked
 10625  00563C  4B84               	infsnz	strcpy@cp& (0+255),f,b
 10626  00563E  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
 10627  005640  0100               	movlb	0	; () banked
 10628  005642  4B82               	infsnz	strcpy@from& (0+255),f,b
 10629  005644  2B83               	incf	(strcpy@from+1)& (0+255),f,b
 10630  005646                     l6888:
 10631  005646  C082  FFF6         	movff	strcpy@from,tblptrl
 10632  00564A  C083  FFF7         	movff	strcpy@from+1,tblptrh
 10633  00564E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10634  00564E  6AF8               	clrf	tblptru,c
 10635  005650                     	endif
 10636  005650                     	if	0	;tblptru may be non-zero
 10637  005650                     	endif
 10638  005650  C084  FFD9         	movff	strcpy@cp,fsr2l
 10639  005654  C085  FFDA         	movff	strcpy@cp+1,fsr2h
 10640  005658  0008               	tblrd		*
 10641  00565A  CFF5 FFDF          	movff	tablat,indf2
 10642  00565E  50DF               	movf	indf2,w,c
 10643  005660  B4D8               	btfsc	status,2,c
 10644  005662  0012               	return	
 10645  005664  D7EA               	goto	l6886
 10646  005666                     __end_of_strcpy:
 10647                           	opt stack 0
 10648                           tblptru	equ	0xFF8
 10649                           tblptrh	equ	0xFF7
 10650                           tblptrl	equ	0xFF6
 10651                           tablat	equ	0xFF5
 10652                           prodh	equ	0xFF4
 10653                           prodl	equ	0xFF3
 10654                           intcon	equ	0xFF2
 10655                           intcon2	equ	0xFF1
 10656                           intcon3	equ	0xFF0
 10657                           postinc0	equ	0xFEE
 10658                           wreg	equ	0xFE8
 10659                           postdec1	equ	0xFE5
 10660                           fsr1l	equ	0xFE1
 10661                           indf2	equ	0xFDF
 10662                           postinc2	equ	0xFDE
 10663                           postdec2	equ	0xFDD
 10664                           fsr2h	equ	0xFDA
 10665                           fsr2l	equ	0xFD9
 10666                           status	equ	0xFD8
 10667                           
 10668 ;; *************** function _getRTC *****************
 10669 ;; Defined at:
 10670 ;;		line 44 in file "RTC.c"
 10671 ;; Parameters:    Size  Location     Type
 10672 ;;		None
 10673 ;; Auto vars:     Size  Location     Type
 10674 ;;  i               2    3[BANK0 ] int 
 10675 ;; Return value:  Size  Location     Type
 10676 ;;                  1    wreg      void 
 10677 ;; Registers used:
 10678 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10679 ;; Tracked objects:
 10680 ;;		On entry : 0/0
 10681 ;;		On exit  : 0/0
 10682 ;;		Unchanged: 0/0
 10683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10685 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10687 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10688 ;;Total ram usage:        2 bytes
 10689 ;; Hardware stack levels used:    1
 10690 ;; Hardware stack levels required when called:    9
 10691 ;; This function calls:
 10692 ;;		_I2C_Master_Read
 10693 ;;		_I2C_Master_Start
 10694 ;;		_I2C_Master_Stop
 10695 ;;		_I2C_Master_Write
 10696 ;; This function is called by:
 10697 ;;		_printRTC
 10698 ;;		_initSortTimer
 10699 ;; This function uses a non-reentrant model
 10700 ;;
 10701                           
 10702                           	psect	text30
 10703  004C5E                     __ptext30:
 10704                           	opt stack 0
 10705  004C5E                     _getRTC:
 10706                           	opt stack 18
 10707                           
 10708                           ;RTC.c: 48: I2C_Master_Start();
 10709                           
 10710                           ;incstack = 0
 10711  004C5E  ECEF  F02D         	call	_I2C_Master_Start	;wreg free
 10712                           
 10713                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 10714  004C62  0E00               	movlw	0
 10715  004C64  0100               	movlb	0	; () banked
 10716  004C66  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10717  004C68  0ED0               	movlw	208
 10718  004C6A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10719  004C6C  ECDD  F02D         	call	_I2C_Master_Write	;wreg free
 10720                           
 10721                           ;RTC.c: 50: I2C_Master_Write(0x00);
 10722  004C70  0E00               	movlw	0
 10723  004C72  0100               	movlb	0	; () banked
 10724  004C74  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10725  004C76  0E00               	movlw	0
 10726  004C78  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10727  004C7A  ECDD  F02D         	call	_I2C_Master_Write	;wreg free
 10728                           
 10729                           ;RTC.c: 51: I2C_Master_Stop();
 10730  004C7E  ECEB  F02D         	call	_I2C_Master_Stop	;wreg free
 10731                           
 10732                           ;RTC.c: 54: I2C_Master_Start();
 10733  004C82  ECEF  F02D         	call	_I2C_Master_Start	;wreg free
 10734                           
 10735                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 10736  004C86  0E00               	movlw	0
 10737  004C88  0100               	movlb	0	; () banked
 10738  004C8A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10739  004C8C  0ED1               	movlw	209
 10740  004C8E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10741  004C90  ECDD  F02D         	call	_I2C_Master_Write	;wreg free
 10742                           
 10743                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 10744  004C94  0E00               	movlw	0
 10745  004C96  0100               	movlb	0	; () banked
 10746  004C98  6F84               	movwf	(getRTC@i+1)& (0+255),b
 10747  004C9A  0E00               	movlw	0
 10748  004C9C  6F83               	movwf	getRTC@i& (0+255),b
 10749  004C9E                     l6894:
 10750                           
 10751                           ; BSR set to: 0
 10752  004C9E  0100               	movlb	0	; () banked
 10753  004CA0  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
 10754  004CA2  D008               	goto	l6898
 10755  004CA4  0100               	movlb	0	; () banked
 10756  004CA6  5184               	movf	(getRTC@i+1)& (0+255),w,b
 10757  004CA8  E115               	bnz	l6904
 10758  004CAA  0E06               	movlw	6
 10759  004CAC  0100               	movlb	0	; () banked
 10760  004CAE  5D83               	subwf	getRTC@i& (0+255),w,b
 10761  004CB0  B0D8               	btfsc	status,0,c
 10762  004CB2  D010               	goto	l6904
 10763  004CB4                     l6898:
 10764                           
 10765                           ; BSR set to: 0
 10766                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 10767  004CB4  0E1C               	movlw	low _time
 10768  004CB6  0100               	movlb	0	; () banked
 10769  004CB8  2583               	addwf	getRTC@i& (0+255),w,b
 10770  004CBA  6ED9               	movwf	fsr2l,c
 10771  004CBC  0E01               	movlw	high _time
 10772  004CBE  0100               	movlb	0	; () banked
 10773  004CC0  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
 10774  004CC2  6EDA               	movwf	fsr2h,c
 10775  004CC4  0E01               	movlw	1
 10776  004CC6  EC70  F02C         	call	_I2C_Master_Read
 10777  004CCA  6EDF               	movwf	indf2,c
 10778  004CCC  0100               	movlb	0	; () banked
 10779  004CCE  4B83               	infsnz	getRTC@i& (0+255),f,b
 10780  004CD0  2B84               	incf	(getRTC@i+1)& (0+255),f,b
 10781  004CD2  D7E5               	goto	l6894
 10782  004CD4                     l6904:
 10783                           
 10784                           ; BSR set to: 0
 10785                           ;RTC.c: 58: }
 10786                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 10787  004CD4  0E00               	movlw	0
 10788  004CD6  EC70  F02C         	call	_I2C_Master_Read
 10789  004CDA  0101               	movlb	1	; () banked
 10790  004CDC  6F22               	movwf	(_time+6)& (0+255),b
 10791                           
 10792                           ;RTC.c: 60: I2C_Master_Stop();
 10793  004CDE  ECEB  F02D         	call	_I2C_Master_Stop	;wreg free
 10794  004CE2  0012               	return		;funcret
 10795  004CE4                     __end_of_getRTC:
 10796                           	opt stack 0
 10797                           tblptru	equ	0xFF8
 10798                           tblptrh	equ	0xFF7
 10799                           tblptrl	equ	0xFF6
 10800                           tablat	equ	0xFF5
 10801                           prodh	equ	0xFF4
 10802                           prodl	equ	0xFF3
 10803                           intcon	equ	0xFF2
 10804                           intcon2	equ	0xFF1
 10805                           intcon3	equ	0xFF0
 10806                           postinc0	equ	0xFEE
 10807                           wreg	equ	0xFE8
 10808                           postdec1	equ	0xFE5
 10809                           fsr1l	equ	0xFE1
 10810                           indf2	equ	0xFDF
 10811                           postinc2	equ	0xFDE
 10812                           postdec2	equ	0xFDD
 10813                           fsr2h	equ	0xFDA
 10814                           fsr2l	equ	0xFD9
 10815                           status	equ	0xFD8
 10816                           
 10817 ;; *************** function _I2C_Master_Write *****************
 10818 ;; Defined at:
 10819 ;;		line 49 in file "I2C.c"
 10820 ;; Parameters:    Size  Location     Type
 10821 ;;  d               2    1[BANK0 ] unsigned int 
 10822 ;; Auto vars:     Size  Location     Type
 10823 ;;		None
 10824 ;; Return value:  Size  Location     Type
 10825 ;;                  1    wreg      void 
 10826 ;; Registers used:
 10827 ;;		wreg, status,2, status,0, cstack
 10828 ;; Tracked objects:
 10829 ;;		On entry : 0/0
 10830 ;;		On exit  : 0/0
 10831 ;;		Unchanged: 0/0
 10832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10833 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10836 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10837 ;;Total ram usage:        2 bytes
 10838 ;; Hardware stack levels used:    1
 10839 ;; Hardware stack levels required when called:    8
 10840 ;; This function calls:
 10841 ;;		_I2C_Master_Wait
 10842 ;; This function is called by:
 10843 ;;		_loadRTC
 10844 ;;		_getRTC
 10845 ;; This function uses a non-reentrant model
 10846 ;;
 10847                           
 10848                           	psect	text31
 10849  005BBA                     __ptext31:
 10850                           	opt stack 0
 10851  005BBA                     _I2C_Master_Write:
 10852                           	opt stack 18
 10853                           
 10854                           ;I2C.c: 51: I2C_Master_Wait();
 10855                           
 10856                           ;incstack = 0
 10857  005BBA  ECAE  F02D         	call	_I2C_Master_Wait	;wreg free
 10858                           
 10859                           ;I2C.c: 52: SSPBUF = d;
 10860  005BBE  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 10861  005BC2  0012               	return		;funcret
 10862  005BC4                     __end_of_I2C_Master_Write:
 10863                           	opt stack 0
 10864                           tblptru	equ	0xFF8
 10865                           tblptrh	equ	0xFF7
 10866                           tblptrl	equ	0xFF6
 10867                           tablat	equ	0xFF5
 10868                           prodh	equ	0xFF4
 10869                           prodl	equ	0xFF3
 10870                           intcon	equ	0xFF2
 10871                           intcon2	equ	0xFF1
 10872                           intcon3	equ	0xFF0
 10873                           postinc0	equ	0xFEE
 10874                           wreg	equ	0xFE8
 10875                           postdec1	equ	0xFE5
 10876                           fsr1l	equ	0xFE1
 10877                           indf2	equ	0xFDF
 10878                           postinc2	equ	0xFDE
 10879                           postdec2	equ	0xFDD
 10880                           fsr2h	equ	0xFDA
 10881                           fsr2l	equ	0xFD9
 10882                           status	equ	0xFD8
 10883                           
 10884 ;; *************** function _I2C_Master_Stop *****************
 10885 ;; Defined at:
 10886 ;;		line 43 in file "I2C.c"
 10887 ;; Parameters:    Size  Location     Type
 10888 ;;		None
 10889 ;; Auto vars:     Size  Location     Type
 10890 ;;		None
 10891 ;; Return value:  Size  Location     Type
 10892 ;;                  1    wreg      void 
 10893 ;; Registers used:
 10894 ;;		wreg, status,2, status,0, cstack
 10895 ;; Tracked objects:
 10896 ;;		On entry : 0/0
 10897 ;;		On exit  : 0/0
 10898 ;;		Unchanged: 0/0
 10899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10904 ;;Total ram usage:        0 bytes
 10905 ;; Hardware stack levels used:    1
 10906 ;; Hardware stack levels required when called:    8
 10907 ;; This function calls:
 10908 ;;		_I2C_Master_Wait
 10909 ;; This function is called by:
 10910 ;;		_loadRTC
 10911 ;;		_getRTC
 10912 ;; This function uses a non-reentrant model
 10913 ;;
 10914                           
 10915                           	psect	text32
 10916  005BD6                     __ptext32:
 10917                           	opt stack 0
 10918  005BD6                     _I2C_Master_Stop:
 10919                           	opt stack 18
 10920                           
 10921                           ;I2C.c: 45: I2C_Master_Wait();
 10922                           
 10923                           ;incstack = 0
 10924  005BD6  ECAE  F02D         	call	_I2C_Master_Wait	;wreg free
 10925                           
 10926                           ;I2C.c: 46: PEN = 1;
 10927  005BDA  84C5               	bsf	4037,2,c	;volatile
 10928  005BDC  0012               	return		;funcret
 10929  005BDE                     __end_of_I2C_Master_Stop:
 10930                           	opt stack 0
 10931                           tblptru	equ	0xFF8
 10932                           tblptrh	equ	0xFF7
 10933                           tblptrl	equ	0xFF6
 10934                           tablat	equ	0xFF5
 10935                           prodh	equ	0xFF4
 10936                           prodl	equ	0xFF3
 10937                           intcon	equ	0xFF2
 10938                           intcon2	equ	0xFF1
 10939                           intcon3	equ	0xFF0
 10940                           postinc0	equ	0xFEE
 10941                           wreg	equ	0xFE8
 10942                           postdec1	equ	0xFE5
 10943                           fsr1l	equ	0xFE1
 10944                           indf2	equ	0xFDF
 10945                           postinc2	equ	0xFDE
 10946                           postdec2	equ	0xFDD
 10947                           fsr2h	equ	0xFDA
 10948                           fsr2l	equ	0xFD9
 10949                           status	equ	0xFD8
 10950                           
 10951 ;; *************** function _I2C_Master_Start *****************
 10952 ;; Defined at:
 10953 ;;		line 31 in file "I2C.c"
 10954 ;; Parameters:    Size  Location     Type
 10955 ;;		None
 10956 ;; Auto vars:     Size  Location     Type
 10957 ;;		None
 10958 ;; Return value:  Size  Location     Type
 10959 ;;                  1    wreg      void 
 10960 ;; Registers used:
 10961 ;;		wreg, status,2, status,0, cstack
 10962 ;; Tracked objects:
 10963 ;;		On entry : 0/0
 10964 ;;		On exit  : 0/0
 10965 ;;		Unchanged: 0/0
 10966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10970 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10971 ;;Total ram usage:        0 bytes
 10972 ;; Hardware stack levels used:    1
 10973 ;; Hardware stack levels required when called:    8
 10974 ;; This function calls:
 10975 ;;		_I2C_Master_Wait
 10976 ;; This function is called by:
 10977 ;;		_loadRTC
 10978 ;;		_getRTC
 10979 ;; This function uses a non-reentrant model
 10980 ;;
 10981                           
 10982                           	psect	text33
 10983  005BDE                     __ptext33:
 10984                           	opt stack 0
 10985  005BDE                     _I2C_Master_Start:
 10986                           	opt stack 18
 10987                           
 10988                           ;I2C.c: 33: I2C_Master_Wait();
 10989                           
 10990                           ;incstack = 0
 10991  005BDE  ECAE  F02D         	call	_I2C_Master_Wait	;wreg free
 10992                           
 10993                           ;I2C.c: 34: SEN = 1;
 10994  005BE2  80C5               	bsf	4037,0,c	;volatile
 10995  005BE4  0012               	return		;funcret
 10996  005BE6                     __end_of_I2C_Master_Start:
 10997                           	opt stack 0
 10998                           tblptru	equ	0xFF8
 10999                           tblptrh	equ	0xFF7
 11000                           tblptrl	equ	0xFF6
 11001                           tablat	equ	0xFF5
 11002                           prodh	equ	0xFF4
 11003                           prodl	equ	0xFF3
 11004                           intcon	equ	0xFF2
 11005                           intcon2	equ	0xFF1
 11006                           intcon3	equ	0xFF0
 11007                           postinc0	equ	0xFEE
 11008                           wreg	equ	0xFE8
 11009                           postdec1	equ	0xFE5
 11010                           fsr1l	equ	0xFE1
 11011                           indf2	equ	0xFDF
 11012                           postinc2	equ	0xFDE
 11013                           postdec2	equ	0xFDD
 11014                           fsr2h	equ	0xFDA
 11015                           fsr2l	equ	0xFD9
 11016                           status	equ	0xFD8
 11017                           
 11018 ;; *************** function _I2C_Master_Read *****************
 11019 ;; Defined at:
 11020 ;;		line 55 in file "I2C.c"
 11021 ;; Parameters:    Size  Location     Type
 11022 ;;  a               1    wreg     unsigned char 
 11023 ;; Auto vars:     Size  Location     Type
 11024 ;;  a               1    1[BANK0 ] unsigned char 
 11025 ;;  temp            1    2[BANK0 ] unsigned char 
 11026 ;; Return value:  Size  Location     Type
 11027 ;;                  1    wreg      unsigned char 
 11028 ;; Registers used:
 11029 ;;		wreg, status,2, status,0, cstack
 11030 ;; Tracked objects:
 11031 ;;		On entry : 0/0
 11032 ;;		On exit  : 0/0
 11033 ;;		Unchanged: 0/0
 11034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11036 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11038 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11039 ;;Total ram usage:        2 bytes
 11040 ;; Hardware stack levels used:    1
 11041 ;; Hardware stack levels required when called:    8
 11042 ;; This function calls:
 11043 ;;		_I2C_Master_Wait
 11044 ;; This function is called by:
 11045 ;;		_getRTC
 11046 ;; This function uses a non-reentrant model
 11047 ;;
 11048                           
 11049                           	psect	text34
 11050  0058E0                     __ptext34:
 11051                           	opt stack 0
 11052  0058E0                     _I2C_Master_Read:
 11053                           	opt stack 18
 11054                           
 11055                           ;incstack = 0
 11056                           ;I2C_Master_Read@a stored from wreg
 11057  0058E0  0100               	movlb	0	; () banked
 11058  0058E2  6F81               	movwf	I2C_Master_Read@a& (0+255),b
 11059                           
 11060                           ;I2C.c: 57: unsigned char temp;
 11061                           ;I2C.c: 58: I2C_Master_Wait();
 11062  0058E4  ECAE  F02D         	call	_I2C_Master_Wait	;wreg free
 11063                           
 11064                           ;I2C.c: 59: RCEN = 1;
 11065  0058E8  86C5               	bsf	4037,3,c	;volatile
 11066                           
 11067                           ;I2C.c: 60: I2C_Master_Wait();
 11068  0058EA  ECAE  F02D         	call	_I2C_Master_Wait	;wreg free
 11069                           
 11070                           ;I2C.c: 61: temp = SSPBUF;
 11071  0058EE  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
 11072                           
 11073                           ;I2C.c: 62: I2C_Master_Wait();
 11074  0058F2  ECAE  F02D         	call	_I2C_Master_Wait	;wreg free
 11075                           
 11076                           ;I2C.c: 63: ACKDT = (a)?0:1;
 11077  0058F6  0100               	movlb	0	; () banked
 11078  0058F8  5181               	movf	I2C_Master_Read@a& (0+255),w,b
 11079  0058FA  0100               	movlb	0	; () banked
 11080  0058FC  A4D8               	btfss	status,2,c
 11081  0058FE  D002               	goto	u5000
 11082  005900  8AC5               	bsf	4037,5,c	;volatile
 11083  005902  D001               	goto	l6582
 11084  005904                     u5000:
 11085  005904  9AC5               	bcf	4037,5,c	;volatile
 11086  005906                     l6582:
 11087                           
 11088                           ;I2C.c: 64: ACKEN = 1;
 11089  005906  88C5               	bsf	4037,4,c	;volatile
 11090                           
 11091                           ;I2C.c: 65: return temp;
 11092  005908  0100               	movlb	0	; () banked
 11093  00590A  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
 11094  00590C  0012               	return	
 11095  00590E                     __end_of_I2C_Master_Read:
 11096                           	opt stack 0
 11097                           tblptru	equ	0xFF8
 11098                           tblptrh	equ	0xFF7
 11099                           tblptrl	equ	0xFF6
 11100                           tablat	equ	0xFF5
 11101                           prodh	equ	0xFF4
 11102                           prodl	equ	0xFF3
 11103                           intcon	equ	0xFF2
 11104                           intcon2	equ	0xFF1
 11105                           intcon3	equ	0xFF0
 11106                           postinc0	equ	0xFEE
 11107                           wreg	equ	0xFE8
 11108                           postdec1	equ	0xFE5
 11109                           fsr1l	equ	0xFE1
 11110                           indf2	equ	0xFDF
 11111                           postinc2	equ	0xFDE
 11112                           postdec2	equ	0xFDD
 11113                           fsr2h	equ	0xFDA
 11114                           fsr2l	equ	0xFD9
 11115                           status	equ	0xFD8
 11116                           
 11117 ;; *************** function _I2C_Master_Wait *****************
 11118 ;; Defined at:
 11119 ;;		line 26 in file "I2C.c"
 11120 ;; Parameters:    Size  Location     Type
 11121 ;;		None
 11122 ;; Auto vars:     Size  Location     Type
 11123 ;;		None
 11124 ;; Return value:  Size  Location     Type
 11125 ;;                  1    wreg      void 
 11126 ;; Registers used:
 11127 ;;		wreg, status,2, status,0
 11128 ;; Tracked objects:
 11129 ;;		On entry : 0/0
 11130 ;;		On exit  : 0/0
 11131 ;;		Unchanged: 0/0
 11132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11135 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11136 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11137 ;;Total ram usage:        1 bytes
 11138 ;; Hardware stack levels used:    1
 11139 ;; Hardware stack levels required when called:    7
 11140 ;; This function calls:
 11141 ;;		Nothing
 11142 ;; This function is called by:
 11143 ;;		_I2C_Master_Start
 11144 ;;		_I2C_Master_Stop
 11145 ;;		_I2C_Master_Write
 11146 ;;		_I2C_Master_Read
 11147 ;;		_I2C_Master_RepeatedStart
 11148 ;; This function uses a non-reentrant model
 11149 ;;
 11150                           
 11151                           	psect	text35
 11152  005B5C                     __ptext35:
 11153                           	opt stack 0
 11154  005B5C                     _I2C_Master_Wait:
 11155                           	opt stack 18
 11156  005B5C                     l71:
 11157  005B5C  B4C7               	btfsc	4039,2,c	;volatile
 11158  005B5E  D7FE               	goto	l71
 11159  005B60  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
 11160  005B64  0E1F               	movlw	31
 11161  005B66  0100               	movlb	0	; () banked
 11162  005B68  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
 11163  005B6A  B4D8               	btfsc	status,2,c
 11164  005B6C  0012               	return	
 11165  005B6E  D7F6               	goto	l71
 11166  005B70                     __end_of_I2C_Master_Wait:
 11167                           	opt stack 0
 11168                           tblptru	equ	0xFF8
 11169                           tblptrh	equ	0xFF7
 11170                           tblptrl	equ	0xFF6
 11171                           tablat	equ	0xFF5
 11172                           prodh	equ	0xFF4
 11173                           prodl	equ	0xFF3
 11174                           intcon	equ	0xFF2
 11175                           intcon2	equ	0xFF1
 11176                           intcon3	equ	0xFF0
 11177                           postinc0	equ	0xFEE
 11178                           wreg	equ	0xFE8
 11179                           postdec1	equ	0xFE5
 11180                           fsr1l	equ	0xFE1
 11181                           indf2	equ	0xFDF
 11182                           postinc2	equ	0xFDE
 11183                           postdec2	equ	0xFDD
 11184                           fsr2h	equ	0xFDA
 11185                           fsr2l	equ	0xFD9
 11186                           status	equ	0xFD8
 11187                           
 11188 ;; *************** function _change_state_to_menu_22 *****************
 11189 ;; Defined at:
 11190 ;;		line 501 in file "UI.c"
 11191 ;; Parameters:    Size  Location     Type
 11192 ;;		None
 11193 ;; Auto vars:     Size  Location     Type
 11194 ;;		None
 11195 ;; Return value:  Size  Location     Type
 11196 ;;                  1    wreg      void 
 11197 ;; Registers used:
 11198 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11199 ;; Tracked objects:
 11200 ;;		On entry : 0/0
 11201 ;;		On exit  : 0/0
 11202 ;;		Unchanged: 0/0
 11203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11208 ;;Total ram usage:        0 bytes
 11209 ;; Hardware stack levels used:    1
 11210 ;; Hardware stack levels required when called:   10
 11211 ;; This function calls:
 11212 ;;		_lcdInst
 11213 ;;		_printf
 11214 ;; This function is called by:
 11215 ;;		_UI
 11216 ;; This function uses a non-reentrant model
 11217 ;;
 11218                           
 11219                           	psect	text36
 11220  0055C0                     __ptext36:
 11221                           	opt stack 0
 11222  0055C0                     _change_state_to_menu_22:
 11223                           	opt stack 19
 11224                           
 11225                           ;UI.c: 502: cur_state = 22;
 11226                           
 11227                           ; BSR set to: 0
 11228                           ;incstack = 0
 11229  0055C0  0E00               	movlw	0
 11230  0055C2  0100               	movlb	0	; () banked
 11231  0055C4  6FE7               	movwf	(_cur_state+1)& (0+255),b
 11232  0055C6  0E16               	movlw	22
 11233  0055C8  6FE6               	movwf	_cur_state& (0+255),b
 11234                           
 11235                           ; BSR set to: 0
 11236                           ;UI.c: 504: lcdInst(0b10000000);;
 11237  0055CA  0E80               	movlw	128
 11238  0055CC  ECC9  F02D         	call	_lcdInst
 11239                           
 11240                           ;UI.c: 505: printf("2. SORT        <");
 11241  0055D0  0EB7               	movlw	low STR_34
 11242  0055D2  0100               	movlb	0	; () banked
 11243  0055D4  6F8E               	movwf	printf@f& (0+255),b
 11244  0055D6  0EFD               	movlw	high STR_34
 11245  0055D8  0100               	movlb	0	; () banked
 11246  0055DA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11247  0055DC  EC8D  F00D         	call	_printf	;wreg free
 11248                           
 11249                           ;UI.c: 506: lcdInst(0b11000000);;
 11250  0055E0  0EC0               	movlw	192
 11251  0055E2  ECC9  F02D         	call	_lcdInst
 11252                           
 11253                           ;UI.c: 507: printf("3. LOGS         ");
 11254  0055E6  0EFC               	movlw	low STR_36
 11255  0055E8  0100               	movlb	0	; () banked
 11256  0055EA  6F8E               	movwf	printf@f& (0+255),b
 11257  0055EC  0EFC               	movlw	high STR_36
 11258  0055EE  0100               	movlb	0	; () banked
 11259  0055F0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11260  0055F2  EC8D  F00D         	call	_printf	;wreg free
 11261  0055F6  0012               	return		;funcret
 11262  0055F8                     __end_of_change_state_to_menu_22:
 11263                           	opt stack 0
 11264                           tblptru	equ	0xFF8
 11265                           tblptrh	equ	0xFF7
 11266                           tblptrl	equ	0xFF6
 11267                           tablat	equ	0xFF5
 11268                           prodh	equ	0xFF4
 11269                           prodl	equ	0xFF3
 11270                           intcon	equ	0xFF2
 11271                           intcon2	equ	0xFF1
 11272                           intcon3	equ	0xFF0
 11273                           postinc0	equ	0xFEE
 11274                           wreg	equ	0xFE8
 11275                           postdec1	equ	0xFE5
 11276                           fsr1l	equ	0xFE1
 11277                           indf2	equ	0xFDF
 11278                           postinc2	equ	0xFDE
 11279                           postdec2	equ	0xFDD
 11280                           fsr2h	equ	0xFDA
 11281                           fsr2l	equ	0xFD9
 11282                           status	equ	0xFD8
 11283                           
 11284 ;; *************** function _change_state_to_menu_12 *****************
 11285 ;; Defined at:
 11286 ;;		line 493 in file "UI.c"
 11287 ;; Parameters:    Size  Location     Type
 11288 ;;		None
 11289 ;; Auto vars:     Size  Location     Type
 11290 ;;		None
 11291 ;; Return value:  Size  Location     Type
 11292 ;;                  1    wreg      void 
 11293 ;; Registers used:
 11294 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11295 ;; Tracked objects:
 11296 ;;		On entry : 0/0
 11297 ;;		On exit  : 0/0
 11298 ;;		Unchanged: 0/0
 11299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11304 ;;Total ram usage:        0 bytes
 11305 ;; Hardware stack levels used:    1
 11306 ;; Hardware stack levels required when called:   10
 11307 ;; This function calls:
 11308 ;;		_lcdInst
 11309 ;;		_printf
 11310 ;; This function is called by:
 11311 ;;		_UI
 11312 ;; This function uses a non-reentrant model
 11313 ;;
 11314                           
 11315                           	psect	text37
 11316  0055F8                     __ptext37:
 11317                           	opt stack 0
 11318  0055F8                     _change_state_to_menu_12:
 11319                           	opt stack 19
 11320                           
 11321                           ;UI.c: 494: cur_state = 12;
 11322                           
 11323                           ;incstack = 0
 11324  0055F8  0E00               	movlw	0
 11325  0055FA  0100               	movlb	0	; () banked
 11326  0055FC  6FE7               	movwf	(_cur_state+1)& (0+255),b
 11327  0055FE  0E0C               	movlw	12
 11328  005600  6FE6               	movwf	_cur_state& (0+255),b
 11329                           
 11330                           ; BSR set to: 0
 11331                           ;UI.c: 496: lcdInst(0b10000000);;
 11332  005602  0E80               	movlw	128
 11333  005604  ECC9  F02D         	call	_lcdInst
 11334                           
 11335                           ;UI.c: 497: printf("1. DATE/TIME    ");
 11336  005608  0E1E               	movlw	low STR_33
 11337  00560A  0100               	movlb	0	; () banked
 11338  00560C  6F8E               	movwf	printf@f& (0+255),b
 11339  00560E  0EFD               	movlw	high STR_33
 11340  005610  0100               	movlb	0	; () banked
 11341  005612  6F8F               	movwf	(printf@f+1)& (0+255),b
 11342  005614  EC8D  F00D         	call	_printf	;wreg free
 11343                           
 11344                           ;UI.c: 498: lcdInst(0b11000000);;
 11345  005618  0EC0               	movlw	192
 11346  00561A  ECC9  F02D         	call	_lcdInst
 11347                           
 11348                           ;UI.c: 499: printf("2. SORT        <");
 11349  00561E  0EB7               	movlw	low STR_34
 11350  005620  0100               	movlb	0	; () banked
 11351  005622  6F8E               	movwf	printf@f& (0+255),b
 11352  005624  0EFD               	movlw	high STR_34
 11353  005626  0100               	movlb	0	; () banked
 11354  005628  6F8F               	movwf	(printf@f+1)& (0+255),b
 11355  00562A  EC8D  F00D         	call	_printf	;wreg free
 11356  00562E  0012               	return		;funcret
 11357  005630                     __end_of_change_state_to_menu_12:
 11358                           	opt stack 0
 11359                           tblptru	equ	0xFF8
 11360                           tblptrh	equ	0xFF7
 11361                           tblptrl	equ	0xFF6
 11362                           tablat	equ	0xFF5
 11363                           prodh	equ	0xFF4
 11364                           prodl	equ	0xFF3
 11365                           intcon	equ	0xFF2
 11366                           intcon2	equ	0xFF1
 11367                           intcon3	equ	0xFF0
 11368                           postinc0	equ	0xFEE
 11369                           wreg	equ	0xFE8
 11370                           postdec1	equ	0xFE5
 11371                           fsr1l	equ	0xFE1
 11372                           indf2	equ	0xFDF
 11373                           postinc2	equ	0xFDE
 11374                           postdec2	equ	0xFDD
 11375                           fsr2h	equ	0xFDA
 11376                           fsr2l	equ	0xFD9
 11377                           status	equ	0xFD8
 11378                           
 11379 ;; *************** function ___awmod *****************
 11380 ;; Defined at:
 11381 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 11382 ;; Parameters:    Size  Location     Type
 11383 ;;  dividend        2    0[BANK0 ] int 
 11384 ;;  divisor         2    2[BANK0 ] int 
 11385 ;; Auto vars:     Size  Location     Type
 11386 ;;  sign            1    5[BANK0 ] unsigned char 
 11387 ;;  counter         1    4[BANK0 ] unsigned char 
 11388 ;; Return value:  Size  Location     Type
 11389 ;;                  2    0[BANK0 ] int 
 11390 ;; Registers used:
 11391 ;;		wreg, status,2, status,0
 11392 ;; Tracked objects:
 11393 ;;		On entry : 0/0
 11394 ;;		On exit  : 0/0
 11395 ;;		Unchanged: 0/0
 11396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11397 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11398 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11400 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11401 ;;Total ram usage:        6 bytes
 11402 ;; Hardware stack levels used:    1
 11403 ;; Hardware stack levels required when called:    7
 11404 ;; This function calls:
 11405 ;;		Nothing
 11406 ;; This function is called by:
 11407 ;;		_UI
 11408 ;; This function uses a non-reentrant model
 11409 ;;
 11410                           
 11411                           	psect	text38
 11412  004B30                     __ptext38:
 11413                           	opt stack 0
 11414  004B30                     ___awmod:
 11415                           	opt stack 22
 11416                           
 11417                           ;incstack = 0
 11418  004B30  0E00               	movlw	0
 11419  004B32  0100               	movlb	0	; () banked
 11420  004B34  6F85               	movwf	___awmod@sign& (0+255),b
 11421                           
 11422                           ; BSR set to: 0
 11423  004B36  0100               	movlb	0	; () banked
 11424  004B38  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 11425  004B3A  D008               	goto	l9232
 11426                           
 11427                           ; BSR set to: 0
 11428  004B3C  0100               	movlb	0	; () banked
 11429  004B3E  6D80               	negf	___awmod@dividend& (0+255),b
 11430  004B40  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11431  004B42  B0D8               	btfsc	status,0,c
 11432  004B44  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11433                           
 11434                           ; BSR set to: 0
 11435  004B46  0E01               	movlw	1
 11436  004B48  0100               	movlb	0	; () banked
 11437  004B4A  6F85               	movwf	___awmod@sign& (0+255),b
 11438  004B4C                     l9232:
 11439                           
 11440                           ; BSR set to: 0
 11441  004B4C  0100               	movlb	0	; () banked
 11442  004B4E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11443  004B50  D005               	goto	l9236
 11444                           
 11445                           ; BSR set to: 0
 11446  004B52  0100               	movlb	0	; () banked
 11447  004B54  6D82               	negf	___awmod@divisor& (0+255),b
 11448  004B56  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 11449  004B58  B0D8               	btfsc	status,0,c
 11450  004B5A  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 11451  004B5C                     l9236:
 11452                           
 11453                           ; BSR set to: 0
 11454  004B5C  0100               	movlb	0	; () banked
 11455  004B5E  5182               	movf	___awmod@divisor& (0+255),w,b
 11456  004B60  0100               	movlb	0	; () banked
 11457  004B62  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 11458  004B64  B4D8               	btfsc	status,2,c
 11459  004B66  D026               	goto	l9252
 11460                           
 11461                           ; BSR set to: 0
 11462  004B68  0E01               	movlw	1
 11463  004B6A  0100               	movlb	0	; () banked
 11464  004B6C  6F84               	movwf	___awmod@counter& (0+255),b
 11465  004B6E  D006               	goto	l9242
 11466  004B70                     l9240:
 11467                           
 11468                           ; BSR set to: 0
 11469  004B70  0100               	movlb	0	; () banked
 11470  004B72  90D8               	bcf	status,0,c
 11471  004B74  3782               	rlcf	___awmod@divisor& (0+255),f,b
 11472  004B76  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 11473  004B78  0100               	movlb	0	; () banked
 11474  004B7A  2B84               	incf	___awmod@counter& (0+255),f,b
 11475  004B7C                     l9242:
 11476                           
 11477                           ; BSR set to: 0
 11478  004B7C  0100               	movlb	0	; () banked
 11479  004B7E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11480  004B80  D7F7               	goto	l9240
 11481  004B82                     l9244:
 11482                           
 11483                           ; BSR set to: 0
 11484  004B82  0100               	movlb	0	; () banked
 11485  004B84  5182               	movf	___awmod@divisor& (0+255),w,b
 11486  004B86  0100               	movlb	0	; () banked
 11487  004B88  5D80               	subwf	___awmod@dividend& (0+255),w,b
 11488  004B8A  0100               	movlb	0	; () banked
 11489  004B8C  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 11490  004B8E  0100               	movlb	0	; () banked
 11491  004B90  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 11492  004B92  A0D8               	btfss	status,0,c
 11493  004B94  D008               	goto	l9248
 11494                           
 11495                           ; BSR set to: 0
 11496  004B96  0100               	movlb	0	; () banked
 11497  004B98  5182               	movf	___awmod@divisor& (0+255),w,b
 11498  004B9A  0100               	movlb	0	; () banked
 11499  004B9C  5F80               	subwf	___awmod@dividend& (0+255),f,b
 11500  004B9E  0100               	movlb	0	; () banked
 11501  004BA0  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 11502  004BA2  0100               	movlb	0	; () banked
 11503  004BA4  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 11504  004BA6                     l9248:
 11505                           
 11506                           ; BSR set to: 0
 11507  004BA6  0100               	movlb	0	; () banked
 11508  004BA8  90D8               	bcf	status,0,c
 11509  004BAA  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 11510  004BAC  3382               	rrcf	___awmod@divisor& (0+255),f,b
 11511                           
 11512                           ; BSR set to: 0
 11513  004BAE  0100               	movlb	0	; () banked
 11514  004BB0  2F84               	decfsz	___awmod@counter& (0+255),f,b
 11515  004BB2  D7E7               	goto	l9244
 11516  004BB4                     l9252:
 11517                           
 11518                           ; BSR set to: 0
 11519  004BB4  0100               	movlb	0	; () banked
 11520  004BB6  5185               	movf	___awmod@sign& (0+255),w,b
 11521  004BB8  0100               	movlb	0	; () banked
 11522  004BBA  B4D8               	btfsc	status,2,c
 11523  004BBC  D005               	goto	l9256
 11524                           
 11525                           ; BSR set to: 0
 11526  004BBE  0100               	movlb	0	; () banked
 11527  004BC0  6D80               	negf	___awmod@dividend& (0+255),b
 11528  004BC2  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11529  004BC4  B0D8               	btfsc	status,0,c
 11530  004BC6  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11531  004BC8                     l9256:
 11532                           
 11533                           ; BSR set to: 0
 11534  004BC8  C080  F080         	movff	___awmod@dividend,?___awmod
 11535  004BCC  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 11536  004BD0  0012               	return	
 11537  004BD2                     __end_of___awmod:
 11538                           	opt stack 0
 11539                           tblptru	equ	0xFF8
 11540                           tblptrh	equ	0xFF7
 11541                           tblptrl	equ	0xFF6
 11542                           tablat	equ	0xFF5
 11543                           prodh	equ	0xFF4
 11544                           prodl	equ	0xFF3
 11545                           intcon	equ	0xFF2
 11546                           intcon2	equ	0xFF1
 11547                           intcon3	equ	0xFF0
 11548                           postinc0	equ	0xFEE
 11549                           wreg	equ	0xFE8
 11550                           postdec1	equ	0xFE5
 11551                           fsr1l	equ	0xFE1
 11552                           indf2	equ	0xFDF
 11553                           postinc2	equ	0xFDE
 11554                           postdec2	equ	0xFDD
 11555                           fsr2h	equ	0xFDA
 11556                           fsr2l	equ	0xFD9
 11557                           status	equ	0xFD8
 11558                           
 11559 ;; *************** function ___awdiv *****************
 11560 ;; Defined at:
 11561 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 11562 ;; Parameters:    Size  Location     Type
 11563 ;;  dividend        2    6[BANK0 ] int 
 11564 ;;  divisor         2    8[BANK0 ] int 
 11565 ;; Auto vars:     Size  Location     Type
 11566 ;;  quotient        2   12[BANK0 ] int 
 11567 ;;  sign            1   11[BANK0 ] unsigned char 
 11568 ;;  counter         1   10[BANK0 ] unsigned char 
 11569 ;; Return value:  Size  Location     Type
 11570 ;;                  2    6[BANK0 ] int 
 11571 ;; Registers used:
 11572 ;;		wreg, status,2, status,0
 11573 ;; Tracked objects:
 11574 ;;		On entry : 0/0
 11575 ;;		On exit  : 0/0
 11576 ;;		Unchanged: 0/0
 11577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11578 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11579 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11581 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11582 ;;Total ram usage:        8 bytes
 11583 ;; Hardware stack levels used:    1
 11584 ;; Hardware stack levels required when called:    7
 11585 ;; This function calls:
 11586 ;;		Nothing
 11587 ;; This function is called by:
 11588 ;;		_UI
 11589 ;;		_ID
 11590 ;; This function uses a non-reentrant model
 11591 ;;
 11592                           
 11593                           	psect	text39
 11594  00490C                     __ptext39:
 11595                           	opt stack 0
 11596  00490C                     ___awdiv:
 11597                           	opt stack 21
 11598                           
 11599                           ; BSR set to: 0
 11600                           ;incstack = 0
 11601  00490C  0E00               	movlw	0
 11602  00490E  0100               	movlb	0	; () banked
 11603  004910  6F8B               	movwf	___awdiv@sign& (0+255),b
 11604                           
 11605                           ; BSR set to: 0
 11606  004912  0100               	movlb	0	; () banked
 11607  004914  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 11608  004916  D008               	goto	l7510
 11609                           
 11610                           ; BSR set to: 0
 11611  004918  0100               	movlb	0	; () banked
 11612  00491A  6D88               	negf	___awdiv@divisor& (0+255),b
 11613  00491C  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 11614  00491E  B0D8               	btfsc	status,0,c
 11615  004920  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 11616                           
 11617                           ; BSR set to: 0
 11618  004922  0E01               	movlw	1
 11619  004924  0100               	movlb	0	; () banked
 11620  004926  6F8B               	movwf	___awdiv@sign& (0+255),b
 11621  004928                     l7510:
 11622                           
 11623                           ; BSR set to: 0
 11624  004928  0100               	movlb	0	; () banked
 11625  00492A  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 11626  00492C  D008               	goto	l7516
 11627                           
 11628                           ; BSR set to: 0
 11629  00492E  0100               	movlb	0	; () banked
 11630  004930  6D86               	negf	___awdiv@dividend& (0+255),b
 11631  004932  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 11632  004934  B0D8               	btfsc	status,0,c
 11633  004936  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 11634                           
 11635                           ; BSR set to: 0
 11636  004938  0E01               	movlw	1
 11637  00493A  0100               	movlb	0	; () banked
 11638  00493C  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 11639  00493E                     l7516:
 11640                           
 11641                           ; BSR set to: 0
 11642  00493E  0E00               	movlw	0
 11643  004940  0100               	movlb	0	; () banked
 11644  004942  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 11645  004944  0E00               	movlw	0
 11646  004946  6F8C               	movwf	___awdiv@quotient& (0+255),b
 11647                           
 11648                           ; BSR set to: 0
 11649  004948  0100               	movlb	0	; () banked
 11650  00494A  5188               	movf	___awdiv@divisor& (0+255),w,b
 11651  00494C  0100               	movlb	0	; () banked
 11652  00494E  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 11653  004950  B4D8               	btfsc	status,2,c
 11654  004952  D02C               	goto	l7538
 11655                           
 11656                           ; BSR set to: 0
 11657  004954  0E01               	movlw	1
 11658  004956  0100               	movlb	0	; () banked
 11659  004958  6F8A               	movwf	___awdiv@counter& (0+255),b
 11660  00495A  D006               	goto	l7524
 11661  00495C                     l7522:
 11662                           
 11663                           ; BSR set to: 0
 11664  00495C  0100               	movlb	0	; () banked
 11665  00495E  90D8               	bcf	status,0,c
 11666  004960  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 11667  004962  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 11668  004964  0100               	movlb	0	; () banked
 11669  004966  2B8A               	incf	___awdiv@counter& (0+255),f,b
 11670  004968                     l7524:
 11671                           
 11672                           ; BSR set to: 0
 11673  004968  0100               	movlb	0	; () banked
 11674  00496A  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 11675  00496C  D7F7               	goto	l7522
 11676  00496E                     l7526:
 11677                           
 11678                           ; BSR set to: 0
 11679  00496E  0100               	movlb	0	; () banked
 11680  004970  90D8               	bcf	status,0,c
 11681  004972  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 11682  004974  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 11683                           
 11684                           ; BSR set to: 0
 11685  004976  0100               	movlb	0	; () banked
 11686  004978  5188               	movf	___awdiv@divisor& (0+255),w,b
 11687  00497A  0100               	movlb	0	; () banked
 11688  00497C  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 11689  00497E  0100               	movlb	0	; () banked
 11690  004980  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 11691  004982  0100               	movlb	0	; () banked
 11692  004984  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 11693  004986  A0D8               	btfss	status,0,c
 11694  004988  D00A               	goto	l7534
 11695                           
 11696                           ; BSR set to: 0
 11697  00498A  0100               	movlb	0	; () banked
 11698  00498C  5188               	movf	___awdiv@divisor& (0+255),w,b
 11699  00498E  0100               	movlb	0	; () banked
 11700  004990  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 11701  004992  0100               	movlb	0	; () banked
 11702  004994  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 11703  004996  0100               	movlb	0	; () banked
 11704  004998  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 11705                           
 11706                           ; BSR set to: 0
 11707  00499A  0100               	movlb	0	; () banked
 11708  00499C  818C               	bsf	___awdiv@quotient& (0+255),0,b
 11709  00499E                     l7534:
 11710                           
 11711                           ; BSR set to: 0
 11712  00499E  0100               	movlb	0	; () banked
 11713  0049A0  90D8               	bcf	status,0,c
 11714  0049A2  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 11715  0049A4  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 11716                           
 11717                           ; BSR set to: 0
 11718  0049A6  0100               	movlb	0	; () banked
 11719  0049A8  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 11720  0049AA  D7E1               	goto	l7526
 11721  0049AC                     l7538:
 11722                           
 11723                           ; BSR set to: 0
 11724  0049AC  0100               	movlb	0	; () banked
 11725  0049AE  518B               	movf	___awdiv@sign& (0+255),w,b
 11726  0049B0  0100               	movlb	0	; () banked
 11727  0049B2  B4D8               	btfsc	status,2,c
 11728  0049B4  D005               	goto	l7542
 11729                           
 11730                           ; BSR set to: 0
 11731  0049B6  0100               	movlb	0	; () banked
 11732  0049B8  6D8C               	negf	___awdiv@quotient& (0+255),b
 11733  0049BA  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 11734  0049BC  B0D8               	btfsc	status,0,c
 11735  0049BE  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 11736  0049C0                     l7542:
 11737                           
 11738                           ; BSR set to: 0
 11739  0049C0  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 11740  0049C4  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 11741  0049C8  0012               	return	
 11742  0049CA                     __end_of___awdiv:
 11743                           	opt stack 0
 11744                           tblptru	equ	0xFF8
 11745                           tblptrh	equ	0xFF7
 11746                           tblptrl	equ	0xFF6
 11747                           tablat	equ	0xFF5
 11748                           prodh	equ	0xFF4
 11749                           prodl	equ	0xFF3
 11750                           intcon	equ	0xFF2
 11751                           intcon2	equ	0xFF1
 11752                           intcon3	equ	0xFF0
 11753                           postinc0	equ	0xFEE
 11754                           wreg	equ	0xFE8
 11755                           postdec1	equ	0xFE5
 11756                           fsr1l	equ	0xFE1
 11757                           indf2	equ	0xFDF
 11758                           postinc2	equ	0xFDE
 11759                           postdec2	equ	0xFDD
 11760                           fsr2h	equ	0xFDA
 11761                           fsr2l	equ	0xFD9
 11762                           status	equ	0xFD8
 11763                           
 11764 ;; *************** function _Test *****************
 11765 ;; Defined at:
 11766 ;;		line 31 in file "Test.c"
 11767 ;; Parameters:    Size  Location     Type
 11768 ;;		None
 11769 ;; Auto vars:     Size  Location     Type
 11770 ;;		None
 11771 ;; Return value:  Size  Location     Type
 11772 ;;                  1    wreg      void 
 11773 ;; Registers used:
 11774 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11775 ;; Tracked objects:
 11776 ;;		On entry : 0/0
 11777 ;;		On exit  : 0/0
 11778 ;;		Unchanged: 0/0
 11779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11782 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11783 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11784 ;;Total ram usage:        2 bytes
 11785 ;; Hardware stack levels used:    1
 11786 ;; Hardware stack levels required when called:   11
 11787 ;; This function calls:
 11788 ;;		_BlockerTest
 11789 ;;		_BothServos
 11790 ;;		_PlatformTest
 11791 ;;		_PortTestDC
 11792 ;;		_PortTestPusher
 11793 ;;		_SpeedTest
 11794 ;;		_actuatorTest
 11795 ;;		_algorithmTest
 11796 ;;		_arm
 11797 ;;		_lcdInst
 11798 ;;		_printf
 11799 ;;		_sensorTest
 11800 ;; This function is called by:
 11801 ;;		_main
 11802 ;; This function uses a non-reentrant model
 11803 ;;
 11804                           
 11805                           	psect	text40
 11806  004218                     __ptext40:
 11807                           	opt stack 0
 11808  004218                     _Test:
 11809                           	opt stack 19
 11810                           
 11811                           ;Test.c: 33: while(machine_state == Testing_state){
 11812                           
 11813                           ; BSR set to: 0
 11814                           ;incstack = 0
 11815  004218  D07C               	goto	l10018
 11816  00421A                     l9978:
 11817                           
 11818                           ;Test.c: 34: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11819  00421A  0E01               	movlw	1
 11820  00421C  ECC9  F02D         	call	_lcdInst
 11821  004220  0E68               	movlw	104
 11822  004222  0100               	movlb	0	; () banked
 11823  004224  6FC6               	movwf	??_Test& (0+255),b
 11824  004226  0EE4               	movlw	228
 11825  004228                     u10547:
 11826  004228  2EE8               	decfsz	wreg,f,c
 11827  00422A  D7FE               	bra	u10547
 11828  00422C  2FC6               	decfsz	??_Test& (0+255),f,b
 11829  00422E  D7FC               	bra	u10547
 11830  004230  F000               	nop	
 11831  004232  0E80               	movlw	128
 11832  004234  ECC9  F02D         	call	_lcdInst
 11833                           
 11834                           ;Test.c: 35: printf("2.SNR|4.HI|5.MED");
 11835  004238  0E74               	movlw	low STR_69
 11836  00423A  0100               	movlb	0	; () banked
 11837  00423C  6F8E               	movwf	printf@f& (0+255),b
 11838  00423E  0EFC               	movlw	high STR_69
 11839  004240  0100               	movlb	0	; () banked
 11840  004242  6F8F               	movwf	(printf@f+1)& (0+255),b
 11841  004244  EC8D  F00D         	call	_printf	;wreg free
 11842                           
 11843                           ;Test.c: 36: lcdInst(0b11000000);;
 11844  004248  0EC0               	movlw	192
 11845  00424A  ECC9  F02D         	call	_lcdInst
 11846                           
 11847                           ;Test.c: 37: printf("B.PLA|8.SV|9.BLK");
 11848  00424E  0E85               	movlw	low STR_70
 11849  004250  0100               	movlb	0	; () banked
 11850  004252  6F8E               	movwf	printf@f& (0+255),b
 11851  004254  0EFC               	movlw	high STR_70
 11852  004256  0100               	movlb	0	; () banked
 11853  004258  6F8F               	movwf	(printf@f+1)& (0+255),b
 11854  00425A  EC8D  F00D         	call	_printf	;wreg free
 11855  00425E                     l1244:
 11856  00425E  A281               	btfss	3969,1,c	;volatile
 11857  004260  D7FE               	goto	l1244
 11858                           
 11859                           ;Test.c: 39: var = PORTB >> 4;
 11860  004262  CF81 F0C6          	movff	3969,??_Test	;volatile
 11861  004266  0100               	movlb	0	; () banked
 11862  004268  3BC6               	swapf	??_Test& (0+255),f,b
 11863  00426A  0E0F               	movlw	15
 11864  00426C  17C6               	andwf	??_Test& (0+255),f,b
 11865  00426E  0100               	movlb	0	; () banked
 11866  004270  51C6               	movf	??_Test& (0+255),w,b
 11867  004272  0101               	movlb	1	; () banked
 11868  004274  6F47               	movwf	_var& (0+255),b
 11869  004276  6B48               	clrf	(_var+1)& (0+255),b
 11870                           
 11871                           ; BSR set to: 1
 11872                           ;Test.c: 40: var++;
 11873  004278  0101               	movlb	1	; () banked
 11874  00427A  4B47               	infsnz	_var& (0+255),f,b
 11875  00427C  2B48               	incf	(_var+1)& (0+255),f,b
 11876  00427E                     l1247:
 11877  00427E  A281               	btfss	3969,1,c	;volatile
 11878  004280  D01F               	goto	l10016
 11879  004282  D7FD               	goto	l1247
 11880  004284                     l9994:
 11881                           
 11882                           ;Test.c: 44: algorithmTest();
 11883  004284  ECF3  F022         	call	_algorithmTest	;wreg free
 11884                           
 11885                           ;Test.c: 45: break;
 11886  004288  D044               	goto	l10018
 11887  00428A                     l9996:
 11888                           
 11889                           ;Test.c: 47: sensorTest();
 11890  00428A  ECE2  F014         	call	_sensorTest	;wreg free
 11891                           
 11892                           ;Test.c: 48: break;
 11893  00428E  D041               	goto	l10018
 11894  004290                     l9998:
 11895                           
 11896                           ;Test.c: 50: actuatorTest();
 11897  004290  EC6D  F004         	call	_actuatorTest	;wreg free
 11898                           
 11899                           ;Test.c: 51: break;
 11900  004294  D03E               	goto	l10018
 11901  004296                     l10000:
 11902                           
 11903                           ;Test.c: 53: arm();
 11904  004296  EC8F  F021         	call	_arm	;wreg free
 11905                           
 11906                           ;Test.c: 54: break;
 11907  00429A  D03B               	goto	l10018
 11908  00429C                     l10002:
 11909                           
 11910                           ;Test.c: 56: PortTestDC();
 11911  00429C  EC40  F029         	call	_PortTestDC	;wreg free
 11912                           
 11913                           ;Test.c: 57: break;
 11914  0042A0  D038               	goto	l10018
 11915  0042A2                     l10004:
 11916                           
 11917                           ;Test.c: 59: SpeedTest();
 11918  0042A2  EC72  F026         	call	_SpeedTest	;wreg free
 11919                           
 11920                           ;Test.c: 60: break;
 11921  0042A6  D035               	goto	l10018
 11922  0042A8                     l10006:
 11923                           
 11924                           ;Test.c: 62: PortTestPusher();
 11925  0042A8  EC12  F029         	call	_PortTestPusher	;wreg free
 11926                           
 11927                           ;Test.c: 63: break;
 11928  0042AC  D032               	goto	l10018
 11929  0042AE                     l10008:
 11930                           
 11931                           ;Test.c: 65: PlatformTest();
 11932  0042AE  EC57  F013         	call	_PlatformTest	;wreg free
 11933                           
 11934                           ;Test.c: 66: break;
 11935  0042B2  D02F               	goto	l10018
 11936  0042B4                     l10010:
 11937                           
 11938                           ;Test.c: 68: BothServos();
 11939  0042B4  ECA9  F00F         	call	_BothServos	;wreg free
 11940                           
 11941                           ;Test.c: 69: break;
 11942  0042B8  D02C               	goto	l10018
 11943  0042BA                     l10012:
 11944                           
 11945                           ;Test.c: 71: BlockerTest();
 11946  0042BA  EC6E  F01E         	call	_BlockerTest	;wreg free
 11947                           
 11948                           ;Test.c: 75: }
 11949                           
 11950                           ;Test.c: 74: break;
 11951                           
 11952                           ;Test.c: 73: default:
 11953                           
 11954                           ;Test.c: 72: break;
 11955  0042BE  D029               	goto	l10018
 11956  0042C0                     l10016:
 11957  0042C0  C147  F0C6         	movff	_var,??_Test
 11958  0042C4  C148  F0C7         	movff	_var+1,??_Test+1
 11959                           
 11960                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11961                           ; Switch size 1, requested type "space"
 11962                           ; Number of cases is 1, Range of values is 0 to 0
 11963                           ; switch strategies available:
 11964                           ; Name         Instructions Cycles
 11965                           ; simple_byte            4     3 (average)
 11966                           ;	Chosen strategy is simple_byte
 11967  0042C8  0100               	movlb	0	; () banked
 11968  0042CA  51C7               	movf	(??_Test+1)& (0+255),w,b
 11969  0042CC  0A00               	xorlw	0	; case 0
 11970  0042CE  A4D8               	btfss	status,2,c
 11971  0042D0  D020               	goto	l10018
 11972                           
 11973                           ; BSR set to: 0
 11974                           ; Switch size 1, requested type "space"
 11975                           ; Number of cases is 10, Range of values is 1 to 11
 11976                           ; switch strategies available:
 11977                           ; Name         Instructions Cycles
 11978                           ; simple_byte           31    16 (average)
 11979                           ;	Chosen strategy is simple_byte
 11980  0042D2  0100               	movlb	0	; () banked
 11981  0042D4  51C6               	movf	??_Test& (0+255),w,b
 11982  0042D6  0A01               	xorlw	1	; case 1
 11983  0042D8  B4D8               	btfsc	status,2,c
 11984  0042DA  D7D4               	goto	l9994
 11985  0042DC  0A03               	xorlw	3	; case 2
 11986  0042DE  B4D8               	btfsc	status,2,c
 11987  0042E0  D7D4               	goto	l9996
 11988  0042E2  0A01               	xorlw	1	; case 3
 11989  0042E4  B4D8               	btfsc	status,2,c
 11990  0042E6  D7D4               	goto	l9998
 11991  0042E8  0A07               	xorlw	7	; case 4
 11992  0042EA  B4D8               	btfsc	status,2,c
 11993  0042EC  D7D4               	goto	l10000
 11994  0042EE  0A01               	xorlw	1	; case 5
 11995  0042F0  B4D8               	btfsc	status,2,c
 11996  0042F2  D7D4               	goto	l10002
 11997  0042F4  0A03               	xorlw	3	; case 6
 11998  0042F6  B4D8               	btfsc	status,2,c
 11999  0042F8  D7D4               	goto	l10004
 12000  0042FA  0A01               	xorlw	1	; case 7
 12001  0042FC  B4D8               	btfsc	status,2,c
 12002  0042FE  D7D4               	goto	l10006
 12003  004300  0A0F               	xorlw	15	; case 8
 12004  004302  B4D8               	btfsc	status,2,c
 12005  004304  D7D4               	goto	l10008
 12006  004306  0A02               	xorlw	2	; case 10
 12007  004308  B4D8               	btfsc	status,2,c
 12008  00430A  D7D4               	goto	l10010
 12009  00430C  0A01               	xorlw	1	; case 11
 12010  00430E  B4D8               	btfsc	status,2,c
 12011  004310  D7D4               	goto	l10012
 12012  004312                     l10018:
 12013  004312  0E03               	movlw	3
 12014  004314  0100               	movlb	0	; () banked
 12015  004316  19FC               	xorwf	_machine_state& (0+255),w,b
 12016  004318  A4D8               	btfss	status,2,c
 12017  00431A  0012               	return	
 12018  00431C  D77E               	goto	l9978
 12019  00431E                     __end_of_Test:
 12020                           	opt stack 0
 12021                           tblptru	equ	0xFF8
 12022                           tblptrh	equ	0xFF7
 12023                           tblptrl	equ	0xFF6
 12024                           tablat	equ	0xFF5
 12025                           prodh	equ	0xFF4
 12026                           prodl	equ	0xFF3
 12027                           intcon	equ	0xFF2
 12028                           intcon2	equ	0xFF1
 12029                           intcon3	equ	0xFF0
 12030                           postinc0	equ	0xFEE
 12031                           wreg	equ	0xFE8
 12032                           postdec1	equ	0xFE5
 12033                           fsr1l	equ	0xFE1
 12034                           indf2	equ	0xFDF
 12035                           postinc2	equ	0xFDE
 12036                           postdec2	equ	0xFDD
 12037                           fsr2h	equ	0xFDA
 12038                           fsr2l	equ	0xFD9
 12039                           status	equ	0xFD8
 12040                           
 12041 ;; *************** function _sensorTest *****************
 12042 ;; Defined at:
 12043 ;;		line 123 in file "Test.c"
 12044 ;; Parameters:    Size  Location     Type
 12045 ;;		None
 12046 ;; Auto vars:     Size  Location     Type
 12047 ;;  res             2   45[BANK0 ] int 
 12048 ;; Return value:  Size  Location     Type
 12049 ;;                  1    wreg      void 
 12050 ;; Registers used:
 12051 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12052 ;; Tracked objects:
 12053 ;;		On entry : 0/0
 12054 ;;		On exit  : 0/0
 12055 ;;		Unchanged: 0/0
 12056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12058 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12059 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12060 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12061 ;;Total ram usage:        4 bytes
 12062 ;; Hardware stack levels used:    1
 12063 ;; Hardware stack levels required when called:   10
 12064 ;; This function calls:
 12065 ;;		_lcdInst
 12066 ;;		_printf
 12067 ;;		_readADC
 12068 ;;		_readMAG
 12069 ;; This function is called by:
 12070 ;;		_Test
 12071 ;; This function uses a non-reentrant model
 12072 ;;
 12073                           
 12074                           	psect	text41
 12075  0029C4                     __ptext41:
 12076                           	opt stack 0
 12077  0029C4                     _sensorTest:
 12078                           	opt stack 19
 12079                           
 12080                           ;Test.c: 125: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12081                           
 12082                           ; BSR set to: 0
 12083                           ;incstack = 0
 12084  0029C4  0E01               	movlw	1
 12085  0029C6  ECC9  F02D         	call	_lcdInst
 12086  0029CA  0E68               	movlw	104
 12087  0029CC  0100               	movlb	0	; () banked
 12088  0029CE  6FAB               	movwf	??_sensorTest& (0+255),b
 12089  0029D0  0EE4               	movlw	228
 12090  0029D2                     u10557:
 12091  0029D2  2EE8               	decfsz	wreg,f,c
 12092  0029D4  D7FE               	bra	u10557
 12093  0029D6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12094  0029D8  D7FC               	bra	u10557
 12095  0029DA  F000               	nop	
 12096  0029DC  0E80               	movlw	128
 12097  0029DE  ECC9  F02D         	call	_lcdInst
 12098                           
 12099                           ;Test.c: 126: printf("SENSORS");
 12100  0029E2  0EAD               	movlw	low STR_78
 12101  0029E4  0100               	movlb	0	; () banked
 12102  0029E6  6F8E               	movwf	printf@f& (0+255),b
 12103  0029E8  0EFF               	movlw	high STR_78
 12104  0029EA  0100               	movlb	0	; () banked
 12105  0029EC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12106  0029EE  EC8D  F00D         	call	_printf	;wreg free
 12107                           
 12108                           ;Test.c: 127: lcdInst(0b11000000);;
 12109  0029F2  0EC0               	movlw	192
 12110  0029F4  ECC9  F02D         	call	_lcdInst
 12111                           
 12112                           ;Test.c: 128: printf("PUSH TO START");
 12113  0029F8  0E2D               	movlw	low STR_72
 12114  0029FA  0100               	movlb	0	; () banked
 12115  0029FC  6F8E               	movwf	printf@f& (0+255),b
 12116  0029FE  0EFF               	movlw	high STR_72
 12117  002A00  0100               	movlb	0	; () banked
 12118  002A02  6F8F               	movwf	(printf@f+1)& (0+255),b
 12119  002A04  EC8D  F00D         	call	_printf	;wreg free
 12120                           
 12121                           ;Test.c: 129: _delay((unsigned long)((100)*(32000000/4000.0)));
 12122  002A08  0E05               	movlw	5
 12123  002A0A  0100               	movlb	0	; () banked
 12124  002A0C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12125  002A0E  0E0F               	movlw	15
 12126  002A10  0100               	movlb	0	; () banked
 12127  002A12  6FAB               	movwf	??_sensorTest& (0+255),b
 12128  002A14  0EF1               	movlw	241
 12129  002A16                     u10567:
 12130  002A16  2EE8               	decfsz	wreg,f,c
 12131  002A18  D7FE               	bra	u10567
 12132  002A1A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12133  002A1C  D7FC               	bra	u10567
 12134  002A1E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12135  002A20  D7FA               	bra	u10567
 12136  002A22                     l1276:
 12137  002A22  A281               	btfss	3969,1,c	;volatile
 12138  002A24  D7FE               	goto	l1276
 12139  002A26                     l1279:
 12140  002A26  B281               	btfsc	3969,1,c	;volatile
 12141  002A28  D7FE               	goto	l1279
 12142                           
 12143                           ;Test.c: 132: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12144  002A2A  0E01               	movlw	1
 12145  002A2C  ECC9  F02D         	call	_lcdInst
 12146  002A30  0E68               	movlw	104
 12147  002A32  0100               	movlb	0	; () banked
 12148  002A34  6FAB               	movwf	??_sensorTest& (0+255),b
 12149  002A36  0EE4               	movlw	228
 12150  002A38                     u10577:
 12151  002A38  2EE8               	decfsz	wreg,f,c
 12152  002A3A  D7FE               	bra	u10577
 12153  002A3C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12154  002A3E  D7FC               	bra	u10577
 12155  002A40  F000               	nop	
 12156  002A42  0E80               	movlw	128
 12157  002A44  ECC9  F02D         	call	_lcdInst
 12158                           
 12159                           ;Test.c: 137: printf("TST: IR SNSR");
 12160  002A48  0E57               	movlw	low STR_80
 12161  002A4A  0100               	movlb	0	; () banked
 12162  002A4C  6F8E               	movwf	printf@f& (0+255),b
 12163  002A4E  0EFF               	movlw	high STR_80
 12164  002A50  0100               	movlb	0	; () banked
 12165  002A52  6F8F               	movwf	(printf@f+1)& (0+255),b
 12166  002A54  EC8D  F00D         	call	_printf	;wreg free
 12167                           
 12168                           ;Test.c: 138: _delay((unsigned long)((100)*(32000000/4000.0)));
 12169  002A58  0E05               	movlw	5
 12170  002A5A  0100               	movlb	0	; () banked
 12171  002A5C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12172  002A5E  0E0F               	movlw	15
 12173  002A60  0100               	movlb	0	; () banked
 12174  002A62  6FAB               	movwf	??_sensorTest& (0+255),b
 12175  002A64  0EF1               	movlw	241
 12176  002A66                     u10587:
 12177  002A66  2EE8               	decfsz	wreg,f,c
 12178  002A68  D7FE               	bra	u10587
 12179  002A6A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12180  002A6C  D7FC               	bra	u10587
 12181  002A6E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12182  002A70  D7FA               	bra	u10587
 12183                           
 12184                           ;Test.c: 139: LATCbits.LATC5 = 1;
 12185  002A72  8A8B               	bsf	3979,5,c	;volatile
 12186                           
 12187                           ;Test.c: 141: while(PORTBbits.RB1 == 0){
 12188  002A74  D05C               	goto	l8348
 12189  002A76                     l8330:
 12190                           
 12191                           ;Test.c: 142: readADC(0);
 12192  002A76  0E00               	movlw	0
 12193  002A78  ECB4  F02C         	call	_readADC
 12194                           
 12195                           ;Test.c: 143: int res = ADRESH<<8 | ADRESL;
 12196  002A7C  50C3               	movf	4035,w,c	;volatile
 12197  002A7E  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 12198  002A82  0100               	movlb	0	; () banked
 12199  002A84  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 12200  002A86  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 12201  002A8A  0100               	movlb	0	; () banked
 12202  002A8C  6BAB               	clrf	??_sensorTest& (0+255),b
 12203  002A8E  0100               	movlb	0	; () banked
 12204  002A90  11AB               	iorwf	??_sensorTest& (0+255),w,b
 12205  002A92  0100               	movlb	0	; () banked
 12206  002A94  6FAD               	movwf	sensorTest@res& (0+255),b
 12207  002A96  0100               	movlb	0	; () banked
 12208  002A98  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 12209  002A9A  0100               	movlb	0	; () banked
 12210  002A9C  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 12211                           
 12212                           ; BSR set to: 0
 12213                           ;Test.c: 144: IR_signal = (res > 800) ? 1 : 0;
 12214  002A9E  0100               	movlb	0	; () banked
 12215  002AA0  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 12216  002AA2  D00A               	goto	u7180
 12217  002AA4  0E21               	movlw	33
 12218  002AA6  0100               	movlb	0	; () banked
 12219  002AA8  5DAD               	subwf	sensorTest@res& (0+255),w,b
 12220  002AAA  0E03               	movlw	3
 12221  002AAC  0100               	movlb	0	; () banked
 12222  002AAE  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 12223  002AB0  A0D8               	btfss	status,0,c
 12224  002AB2  D002               	goto	u7180
 12225  002AB4  0E01               	movlw	1
 12226  002AB6  D001               	goto	u7190
 12227  002AB8                     u7180:
 12228  002AB8  0E00               	movlw	0
 12229  002ABA                     u7190:
 12230  002ABA  0100               	movlb	0	; () banked
 12231  002ABC  6FE0               	movwf	_IR_signal& (0+255),b
 12232  002ABE  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 12233                           
 12234                           ;Test.c: 146: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12235  002AC0  0E01               	movlw	1
 12236  002AC2  ECC9  F02D         	call	_lcdInst
 12237  002AC6  0E68               	movlw	104
 12238  002AC8  0100               	movlb	0	; () banked
 12239  002ACA  6FAB               	movwf	??_sensorTest& (0+255),b
 12240  002ACC  0EE4               	movlw	228
 12241  002ACE                     u10597:
 12242  002ACE  2EE8               	decfsz	wreg,f,c
 12243  002AD0  D7FE               	bra	u10597
 12244  002AD2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12245  002AD4  D7FC               	bra	u10597
 12246  002AD6  F000               	nop	
 12247  002AD8  0E80               	movlw	128
 12248  002ADA  ECC9  F02D         	call	_lcdInst
 12249                           
 12250                           ;Test.c: 147: printf("IR_signal: %d ", IR_signal);
 12251  002ADE  0E7C               	movlw	low STR_81
 12252  002AE0  0100               	movlb	0	; () banked
 12253  002AE2  6F8E               	movwf	printf@f& (0+255),b
 12254  002AE4  0EFE               	movlw	high STR_81
 12255  002AE6  0100               	movlb	0	; () banked
 12256  002AE8  6F8F               	movwf	(printf@f+1)& (0+255),b
 12257  002AEA  C0E0  F090         	movff	_IR_signal,?_printf+2
 12258  002AEE  C0E1  F091         	movff	_IR_signal+1,?_printf+3
 12259  002AF2  EC8D  F00D         	call	_printf	;wreg free
 12260                           
 12261                           ;Test.c: 148: lcdInst(0b11000000);;
 12262  002AF6  0EC0               	movlw	192
 12263  002AF8  ECC9  F02D         	call	_lcdInst
 12264                           
 12265                           ;Test.c: 149: printf("%d", res);
 12266  002AFC  0E09               	movlw	low (STR_27+14)
 12267  002AFE  0100               	movlb	0	; () banked
 12268  002B00  6F8E               	movwf	printf@f& (0+255),b
 12269  002B02  0EFE               	movlw	high (STR_27+14)
 12270  002B04  0100               	movlb	0	; () banked
 12271  002B06  6F8F               	movwf	(printf@f+1)& (0+255),b
 12272  002B08  C0AD  F090         	movff	sensorTest@res,?_printf+2
 12273  002B0C  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 12274  002B10  EC8D  F00D         	call	_printf	;wreg free
 12275                           
 12276                           ;Test.c: 150: _delay((unsigned long)((100)*(32000000/4000.0)));
 12277  002B14  0E05               	movlw	5
 12278  002B16  0100               	movlb	0	; () banked
 12279  002B18  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12280  002B1A  0E0F               	movlw	15
 12281  002B1C  0100               	movlb	0	; () banked
 12282  002B1E  6FAB               	movwf	??_sensorTest& (0+255),b
 12283  002B20  0EF1               	movlw	241
 12284  002B22                     u10607:
 12285  002B22  2EE8               	decfsz	wreg,f,c
 12286  002B24  D7FE               	bra	u10607
 12287  002B26  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12288  002B28  D7FC               	bra	u10607
 12289  002B2A  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12290  002B2C  D7FA               	bra	u10607
 12291  002B2E                     l8348:
 12292  002B2E  A281               	btfss	3969,1,c	;volatile
 12293  002B30  D7A2               	goto	l8330
 12294                           
 12295                           ;Test.c: 151: }
 12296                           ;Test.c: 152: LATCbits.LATC5 = 0;
 12297  002B32  9A8B               	bcf	3979,5,c	;volatile
 12298                           
 12299                           ;Test.c: 160: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12300  002B34  0E01               	movlw	1
 12301  002B36  ECC9  F02D         	call	_lcdInst
 12302  002B3A  0E68               	movlw	104
 12303  002B3C  0100               	movlb	0	; () banked
 12304  002B3E  6FAB               	movwf	??_sensorTest& (0+255),b
 12305  002B40  0EE4               	movlw	228
 12306  002B42                     u10617:
 12307  002B42  2EE8               	decfsz	wreg,f,c
 12308  002B44  D7FE               	bra	u10617
 12309  002B46  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12310  002B48  D7FC               	bra	u10617
 12311  002B4A  F000               	nop	
 12312  002B4C  0E80               	movlw	128
 12313  002B4E  ECC9  F02D         	call	_lcdInst
 12314                           
 12315                           ;Test.c: 161: printf("TST: MAGNETISM");
 12316  002B52  0EA9               	movlw	low STR_83
 12317  002B54  0100               	movlb	0	; () banked
 12318  002B56  6F8E               	movwf	printf@f& (0+255),b
 12319  002B58  0EFE               	movlw	high STR_83
 12320  002B5A  0100               	movlb	0	; () banked
 12321  002B5C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12322  002B5E  EC8D  F00D         	call	_printf	;wreg free
 12323                           
 12324                           ;Test.c: 162: _delay((unsigned long)((100)*(32000000/4000.0)));
 12325  002B62  0E05               	movlw	5
 12326  002B64  0100               	movlb	0	; () banked
 12327  002B66  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12328  002B68  0E0F               	movlw	15
 12329  002B6A  0100               	movlb	0	; () banked
 12330  002B6C  6FAB               	movwf	??_sensorTest& (0+255),b
 12331  002B6E  0EF1               	movlw	241
 12332  002B70                     u10627:
 12333  002B70  2EE8               	decfsz	wreg,f,c
 12334  002B72  D7FE               	bra	u10627
 12335  002B74  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12336  002B76  D7FC               	bra	u10627
 12337  002B78  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12338  002B7A  D7FA               	bra	u10627
 12339                           
 12340                           ;Test.c: 163: while(PORTBbits.RB1 == 0){
 12341  002B7C  D021               	goto	l8366
 12342  002B7E                     l8360:
 12343                           
 12344                           ;Test.c: 164: readMAG();
 12345  002B7E  EC37  F02A         	call	_readMAG	;wreg free
 12346                           
 12347                           ;Test.c: 165: lcdInst(0b10000000);;
 12348  002B82  0E80               	movlw	128
 12349  002B84  ECC9  F02D         	call	_lcdInst
 12350                           
 12351                           ;Test.c: 166: lcdInst(0b11000000);;
 12352  002B88  0EC0               	movlw	192
 12353  002B8A  ECC9  F02D         	call	_lcdInst
 12354                           
 12355                           ;Test.c: 167: printf("MAG_signal: %d ", MAG_signal);
 12356  002B8E  0E1D               	movlw	low STR_84
 12357  002B90  0100               	movlb	0	; () banked
 12358  002B92  6F8E               	movwf	printf@f& (0+255),b
 12359  002B94  0EFE               	movlw	high STR_84
 12360  002B96  0100               	movlb	0	; () banked
 12361  002B98  6F8F               	movwf	(printf@f+1)& (0+255),b
 12362  002B9A  C0E2  F090         	movff	_MAG_signal,?_printf+2
 12363  002B9E  C0E3  F091         	movff	_MAG_signal+1,?_printf+3
 12364  002BA2  EC8D  F00D         	call	_printf	;wreg free
 12365                           
 12366                           ;Test.c: 168: _delay((unsigned long)((100)*(32000000/4000.0)));
 12367  002BA6  0E05               	movlw	5
 12368  002BA8  0100               	movlb	0	; () banked
 12369  002BAA  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12370  002BAC  0E0F               	movlw	15
 12371  002BAE  0100               	movlb	0	; () banked
 12372  002BB0  6FAB               	movwf	??_sensorTest& (0+255),b
 12373  002BB2  0EF1               	movlw	241
 12374  002BB4                     u10637:
 12375  002BB4  2EE8               	decfsz	wreg,f,c
 12376  002BB6  D7FE               	bra	u10637
 12377  002BB8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12378  002BBA  D7FC               	bra	u10637
 12379  002BBC  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12380  002BBE  D7FA               	bra	u10637
 12381  002BC0                     l8366:
 12382  002BC0  A281               	btfss	3969,1,c	;volatile
 12383  002BC2  D7DD               	goto	l8360
 12384                           
 12385                           ;Test.c: 169: }
 12386                           ;Test.c: 174: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12387  002BC4  0E01               	movlw	1
 12388  002BC6  ECC9  F02D         	call	_lcdInst
 12389  002BCA  0E68               	movlw	104
 12390  002BCC  0100               	movlb	0	; () banked
 12391  002BCE  6FAB               	movwf	??_sensorTest& (0+255),b
 12392  002BD0  0EE4               	movlw	228
 12393  002BD2                     u10647:
 12394  002BD2  2EE8               	decfsz	wreg,f,c
 12395  002BD4  D7FE               	bra	u10647
 12396  002BD6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12397  002BD8  D7FC               	bra	u10647
 12398  002BDA  F000               	nop	
 12399  002BDC  0E80               	movlw	128
 12400  002BDE  ECC9  F02D         	call	_lcdInst
 12401                           
 12402                           ;Test.c: 175: printf("TST: COND");
 12403  002BE2  0E86               	movlw	low STR_85
 12404  002BE4  0100               	movlb	0	; () banked
 12405  002BE6  6F8E               	movwf	printf@f& (0+255),b
 12406  002BE8  0EFF               	movlw	high STR_85
 12407  002BEA  0100               	movlb	0	; () banked
 12408  002BEC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12409  002BEE  EC8D  F00D         	call	_printf	;wreg free
 12410                           
 12411                           ;Test.c: 176: _delay((unsigned long)((100)*(32000000/4000.0)));
 12412  002BF2  0E05               	movlw	5
 12413  002BF4  0100               	movlb	0	; () banked
 12414  002BF6  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12415  002BF8  0E0F               	movlw	15
 12416  002BFA  0100               	movlb	0	; () banked
 12417  002BFC  6FAB               	movwf	??_sensorTest& (0+255),b
 12418  002BFE  0EF1               	movlw	241
 12419  002C00                     u10657:
 12420  002C00  2EE8               	decfsz	wreg,f,c
 12421  002C02  D7FE               	bra	u10657
 12422  002C04  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12423  002C06  D7FC               	bra	u10657
 12424  002C08  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12425  002C0A  D7FA               	bra	u10657
 12426  002C0C                     l8378:
 12427                           
 12428                           ;Test.c: 178: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12429  002C0C  0E01               	movlw	1
 12430  002C0E  ECC9  F02D         	call	_lcdInst
 12431  002C12  0E68               	movlw	104
 12432  002C14  0100               	movlb	0	; () banked
 12433  002C16  6FAB               	movwf	??_sensorTest& (0+255),b
 12434  002C18  0EE4               	movlw	228
 12435  002C1A                     u10667:
 12436  002C1A  2EE8               	decfsz	wreg,f,c
 12437  002C1C  D7FE               	bra	u10667
 12438  002C1E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12439  002C20  D7FC               	bra	u10667
 12440  002C22  F000               	nop	
 12441  002C24  0E80               	movlw	128
 12442  002C26  ECC9  F02D         	call	_lcdInst
 12443                           
 12444                           ;Test.c: 179: printf("TST: COND");
 12445  002C2A  0E86               	movlw	low STR_85
 12446  002C2C  0100               	movlb	0	; () banked
 12447  002C2E  6F8E               	movwf	printf@f& (0+255),b
 12448  002C30  0EFF               	movlw	high STR_85
 12449  002C32  0100               	movlb	0	; () banked
 12450  002C34  6F8F               	movwf	(printf@f+1)& (0+255),b
 12451  002C36  EC8D  F00D         	call	_printf	;wreg free
 12452                           
 12453                           ;Test.c: 180: while(PORTBbits.RB1 == 0){
 12454  002C3A  D01B               	goto	l8390
 12455  002C3C                     l8386:
 12456                           
 12457                           ;Test.c: 184: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12458  002C3C  0E80               	movlw	128
 12459  002C3E  ECC9  F02D         	call	_lcdInst
 12460  002C42  0EC0               	movlw	192
 12461  002C44  ECC9  F02D         	call	_lcdInst
 12462                           
 12463                           ;Test.c: 185: printf("COND: %d", PORTAbits.RA2);
 12464  002C48  0EA4               	movlw	low STR_87
 12465  002C4A  0100               	movlb	0	; () banked
 12466  002C4C  6F8E               	movwf	printf@f& (0+255),b
 12467  002C4E  0EFF               	movlw	high STR_87
 12468  002C50  0100               	movlb	0	; () banked
 12469  002C52  6F8F               	movwf	(printf@f+1)& (0+255),b
 12470  002C54  A480               	btfss	3968,2,c	;volatile
 12471  002C56  D004               	goto	u7220
 12472  002C58  0100               	movlb	0	; () banked
 12473  002C5A  6BAB               	clrf	??_sensorTest& (0+255),b
 12474  002C5C  2BAB               	incf	??_sensorTest& (0+255),f,b
 12475  002C5E  D002               	goto	u7228
 12476  002C60                     u7220:
 12477  002C60  0100               	movlb	0	; () banked
 12478  002C62  6BAB               	clrf	??_sensorTest& (0+255),b
 12479  002C64                     u7228:
 12480  002C64  0100               	movlb	0	; () banked
 12481  002C66  51AB               	movf	??_sensorTest& (0+255),w,b
 12482  002C68  0100               	movlb	0	; () banked
 12483  002C6A  6F90               	movwf	(?_printf+2)& (0+255),b
 12484  002C6C  6B91               	clrf	(?_printf+3)& (0+255),b
 12485  002C6E  EC8D  F00D         	call	_printf	;wreg free
 12486  002C72                     l8390:
 12487  002C72  A281               	btfss	3969,1,c	;volatile
 12488  002C74  D7E3               	goto	l8386
 12489                           
 12490                           ;Test.c: 186: }
 12491                           ;Test.c: 187: if(PORTB >> 4 == 0b1111){
 12492  002C76  3881               	swapf	3969,w,c	;volatile
 12493  002C78  0B0F               	andlw	15
 12494  002C7A  0A0F               	xorlw	15
 12495  002C7C  B4D8               	btfsc	status,2,c
 12496  002C7E  0012               	return	
 12497                           
 12498                           ;Test.c: 190: else{
 12499                           ;Test.c: 191: LATAbits.LATA3 = 1;
 12500                           
 12501                           ;Test.c: 189: }
 12502                           
 12503                           ;Test.c: 188: break;
 12504  002C80  8689               	bsf	3977,3,c	;volatile
 12505                           
 12506                           ;Test.c: 192: while(PORTBbits.RB1 == 1){
 12507  002C82  D01B               	goto	l8402
 12508  002C84                     l8398:
 12509                           
 12510                           ;Test.c: 194: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12511  002C84  0E80               	movlw	128
 12512  002C86  ECC9  F02D         	call	_lcdInst
 12513  002C8A  0EC0               	movlw	192
 12514  002C8C  ECC9  F02D         	call	_lcdInst
 12515                           
 12516                           ;Test.c: 195: printf("COND: %d", PORTAbits.RA2);
 12517  002C90  0EA4               	movlw	low STR_87
 12518  002C92  0100               	movlb	0	; () banked
 12519  002C94  6F8E               	movwf	printf@f& (0+255),b
 12520  002C96  0EFF               	movlw	high STR_87
 12521  002C98  0100               	movlb	0	; () banked
 12522  002C9A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12523  002C9C  A480               	btfss	3968,2,c	;volatile
 12524  002C9E  D004               	goto	u7250
 12525  002CA0  0100               	movlb	0	; () banked
 12526  002CA2  6BAB               	clrf	??_sensorTest& (0+255),b
 12527  002CA4  2BAB               	incf	??_sensorTest& (0+255),f,b
 12528  002CA6  D002               	goto	u7258
 12529  002CA8                     u7250:
 12530  002CA8  0100               	movlb	0	; () banked
 12531  002CAA  6BAB               	clrf	??_sensorTest& (0+255),b
 12532  002CAC                     u7258:
 12533  002CAC  0100               	movlb	0	; () banked
 12534  002CAE  51AB               	movf	??_sensorTest& (0+255),w,b
 12535  002CB0  0100               	movlb	0	; () banked
 12536  002CB2  6F90               	movwf	(?_printf+2)& (0+255),b
 12537  002CB4  6B91               	clrf	(?_printf+3)& (0+255),b
 12538  002CB6  EC8D  F00D         	call	_printf	;wreg free
 12539  002CBA                     l8402:
 12540  002CBA  B281               	btfsc	3969,1,c	;volatile
 12541  002CBC  D7E3               	goto	l8398
 12542                           
 12543                           ;Test.c: 196: }
 12544                           ;Test.c: 197: LATAbits.LATA3 = !1;
 12545  002CBE  9689               	bcf	3977,3,c	;volatile
 12546  002CC0  D7A5               	goto	l8378
 12547  002CC2                     __end_of_sensorTest:
 12548                           	opt stack 0
 12549                           tblptru	equ	0xFF8
 12550                           tblptrh	equ	0xFF7
 12551                           tblptrl	equ	0xFF6
 12552                           tablat	equ	0xFF5
 12553                           prodh	equ	0xFF4
 12554                           prodl	equ	0xFF3
 12555                           intcon	equ	0xFF2
 12556                           intcon2	equ	0xFF1
 12557                           intcon3	equ	0xFF0
 12558                           postinc0	equ	0xFEE
 12559                           wreg	equ	0xFE8
 12560                           postdec1	equ	0xFE5
 12561                           fsr1l	equ	0xFE1
 12562                           indf2	equ	0xFDF
 12563                           postinc2	equ	0xFDE
 12564                           postdec2	equ	0xFDD
 12565                           fsr2h	equ	0xFDA
 12566                           fsr2l	equ	0xFD9
 12567                           status	equ	0xFD8
 12568                           
 12569 ;; *************** function _readMAG *****************
 12570 ;; Defined at:
 12571 ;;		line 29 in file "ADCFunctionality.c"
 12572 ;; Parameters:    Size  Location     Type
 12573 ;;		None
 12574 ;; Auto vars:     Size  Location     Type
 12575 ;;  res             2    4[BANK0 ] int 
 12576 ;; Return value:  Size  Location     Type
 12577 ;;                  1    wreg      void 
 12578 ;; Registers used:
 12579 ;;		wreg, status,2, status,0, cstack
 12580 ;; Tracked objects:
 12581 ;;		On entry : 0/0
 12582 ;;		On exit  : 0/0
 12583 ;;		Unchanged: 0/0
 12584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12586 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12587 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12588 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12589 ;;Total ram usage:        4 bytes
 12590 ;; Hardware stack levels used:    1
 12591 ;; Hardware stack levels required when called:    8
 12592 ;; This function calls:
 12593 ;;		_readADC
 12594 ;; This function is called by:
 12595 ;;		_getMAG
 12596 ;;		_sensorTest
 12597 ;; This function uses a non-reentrant model
 12598 ;;
 12599                           
 12600                           	psect	text42
 12601  00546E                     __ptext42:
 12602                           	opt stack 0
 12603  00546E                     _readMAG:
 12604                           	opt stack 19
 12605                           
 12606                           ;ADCFunctionality.c: 30: readADC(1);
 12607                           
 12608                           ;incstack = 0
 12609  00546E  0E01               	movlw	1
 12610  005470  ECB4  F02C         	call	_readADC
 12611                           
 12612                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 12613  005474  50C3               	movf	4035,w,c	;volatile
 12614  005476  CFC4 F082          	movff	4036,??_readMAG	;volatile
 12615  00547A  0100               	movlb	0	; () banked
 12616  00547C  6B83               	clrf	(??_readMAG+1)& (0+255),b
 12617  00547E  C082  F083         	movff	??_readMAG,??_readMAG+1
 12618  005482  0100               	movlb	0	; () banked
 12619  005484  6B82               	clrf	??_readMAG& (0+255),b
 12620  005486  0100               	movlb	0	; () banked
 12621  005488  1182               	iorwf	??_readMAG& (0+255),w,b
 12622  00548A  0100               	movlb	0	; () banked
 12623  00548C  6F84               	movwf	readMAG@res& (0+255),b
 12624  00548E  0100               	movlb	0	; () banked
 12625  005490  5183               	movf	(??_readMAG+1)& (0+255),w,b
 12626  005492  0100               	movlb	0	; () banked
 12627  005494  6F85               	movwf	(readMAG@res+1)& (0+255),b
 12628                           
 12629                           ; BSR set to: 0
 12630                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 12631  005496  0100               	movlb	0	; () banked
 12632  005498  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 12633  00549A  D008               	goto	u5221
 12634  00549C  0100               	movlb	0	; () banked
 12635  00549E  5185               	movf	(readMAG@res+1)& (0+255),w,b
 12636  0054A0  E107               	bnz	u5220
 12637  0054A2  0E96               	movlw	150
 12638  0054A4  0100               	movlb	0	; () banked
 12639  0054A6  5D84               	subwf	readMAG@res& (0+255),w,b
 12640  0054A8  B0D8               	btfsc	status,0,c
 12641  0054AA  D002               	goto	u5220
 12642  0054AC                     u5221:
 12643  0054AC  0E01               	movlw	1
 12644  0054AE  D001               	goto	u5230
 12645  0054B0                     u5220:
 12646  0054B0  0E00               	movlw	0
 12647  0054B2                     u5230:
 12648  0054B2  0100               	movlb	0	; () banked
 12649  0054B4  6FE2               	movwf	_MAG_signal& (0+255),b
 12650  0054B6  6BE3               	clrf	(_MAG_signal+1)& (0+255),b
 12651                           
 12652                           ; BSR set to: 0
 12653  0054B8  0012               	return		;funcret
 12654  0054BA                     __end_of_readMAG:
 12655                           	opt stack 0
 12656                           tblptru	equ	0xFF8
 12657                           tblptrh	equ	0xFF7
 12658                           tblptrl	equ	0xFF6
 12659                           tablat	equ	0xFF5
 12660                           prodh	equ	0xFF4
 12661                           prodl	equ	0xFF3
 12662                           intcon	equ	0xFF2
 12663                           intcon2	equ	0xFF1
 12664                           intcon3	equ	0xFF0
 12665                           postinc0	equ	0xFEE
 12666                           wreg	equ	0xFE8
 12667                           postdec1	equ	0xFE5
 12668                           fsr1l	equ	0xFE1
 12669                           indf2	equ	0xFDF
 12670                           postinc2	equ	0xFDE
 12671                           postdec2	equ	0xFDD
 12672                           fsr2h	equ	0xFDA
 12673                           fsr2l	equ	0xFD9
 12674                           status	equ	0xFD8
 12675                           
 12676 ;; *************** function _arm *****************
 12677 ;; Defined at:
 12678 ;;		line 639 in file "Test.c"
 12679 ;; Parameters:    Size  Location     Type
 12680 ;;		None
 12681 ;; Auto vars:     Size  Location     Type
 12682 ;;  on              2   44[BANK0 ] int 
 12683 ;; Return value:  Size  Location     Type
 12684 ;;                  1    wreg      void 
 12685 ;; Registers used:
 12686 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12687 ;; Tracked objects:
 12688 ;;		On entry : 0/0
 12689 ;;		On exit  : 0/0
 12690 ;;		Unchanged: 0/0
 12691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12693 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12694 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12695 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12696 ;;Total ram usage:        3 bytes
 12697 ;; Hardware stack levels used:    1
 12698 ;; Hardware stack levels required when called:   10
 12699 ;; This function calls:
 12700 ;;		_lcdInst
 12701 ;;		_printf
 12702 ;;		_stopSignals
 12703 ;; This function is called by:
 12704 ;;		_Test
 12705 ;; This function uses a non-reentrant model
 12706 ;;
 12707                           
 12708                           	psect	text43
 12709  00431E                     __ptext43:
 12710                           	opt stack 0
 12711  00431E                     _arm:
 12712                           	opt stack 19
 12713                           
 12714                           ;Test.c: 640: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12715                           
 12716                           ; BSR set to: 0
 12717                           ;incstack = 0
 12718  00431E  0E01               	movlw	1
 12719  004320  ECC9  F02D         	call	_lcdInst
 12720  004324  0E68               	movlw	104
 12721  004326  0100               	movlb	0	; () banked
 12722  004328  6FAB               	movwf	??_arm& (0+255),b
 12723  00432A  0EE4               	movlw	228
 12724  00432C                     u10677:
 12725  00432C  2EE8               	decfsz	wreg,f,c
 12726  00432E  D7FE               	bra	u10677
 12727  004330  2FAB               	decfsz	??_arm& (0+255),f,b
 12728  004332  D7FC               	bra	u10677
 12729  004334  F000               	nop	
 12730  004336  0E80               	movlw	128
 12731  004338  ECC9  F02D         	call	_lcdInst
 12732                           
 12733                           ;Test.c: 641: printf("D WILL RETURN   ");
 12734  00433C  0EDB               	movlw	low STR_119
 12735  00433E  0100               	movlb	0	; () banked
 12736  004340  6F8E               	movwf	printf@f& (0+255),b
 12737  004342  0EFB               	movlw	high STR_119
 12738  004344  0100               	movlb	0	; () banked
 12739  004346  6F8F               	movwf	(printf@f+1)& (0+255),b
 12740  004348  EC8D  F00D         	call	_printf	;wreg free
 12741                           
 12742                           ;Test.c: 642: lcdInst(0b11000000);;
 12743  00434C  0EC0               	movlw	192
 12744  00434E  ECC9  F02D         	call	_lcdInst
 12745                           
 12746                           ;Test.c: 643: printf("ELSE TOGGLES ARM");
 12747  004352  0E96               	movlw	low STR_128
 12748  004354  0100               	movlb	0	; () banked
 12749  004356  6F8E               	movwf	printf@f& (0+255),b
 12750  004358  0EFC               	movlw	high STR_128
 12751  00435A  0100               	movlb	0	; () banked
 12752  00435C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12753  00435E  EC8D  F00D         	call	_printf	;wreg free
 12754                           
 12755                           ;Test.c: 645: (INTCONbits.GIE = 1);
 12756  004362  8EF2               	bsf	intcon,7,c	;volatile
 12757                           
 12758                           ;Test.c: 646: machine_state = Sorting_state;
 12759  004364  0E01               	movlw	1
 12760  004366  0100               	movlb	0	; () banked
 12761  004368  6FFC               	movwf	_machine_state& (0+255),b
 12762                           
 12763                           ; BSR set to: 0
 12764                           ;Test.c: 647: f_arm_position = 2;
 12765  00436A  0E00               	movlw	0
 12766  00436C  0100               	movlb	0	; () banked
 12767  00436E  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12768  004370  0E02               	movlw	2
 12769  004372  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 12770                           
 12771                           ; BSR set to: 0
 12772                           ;Test.c: 648: timer2_counter = 0;
 12773  004374  0E00               	movlw	0
 12774  004376  6E74               	movwf	_timer2_counter+1,c	;volatile
 12775  004378  0E00               	movlw	0
 12776  00437A  6E73               	movwf	_timer2_counter,c	;volatile
 12777                           
 12778                           ; BSR set to: 0
 12779                           ;Test.c: 649: LATBbits.LATB3 = 1;
 12780  00437C  868A               	bsf	3978,3,c	;volatile
 12781                           
 12782                           ; BSR set to: 0
 12783                           ;Test.c: 650: TMR2ON = 1;
 12784  00437E  84CA               	bsf	4042,2,c	;volatile
 12785                           
 12786                           ; BSR set to: 0
 12787                           ;Test.c: 651: was_low_2 = 0;
 12788  004380  0E00               	movlw	0
 12789  004382  6E7A               	movwf	_was_low_2+1,c	;volatile
 12790  004384  0E00               	movlw	0
 12791  004386  6E79               	movwf	_was_low_2,c	;volatile
 12792                           
 12793                           ; BSR set to: 0
 12794                           ;Test.c: 653: int on = 0;
 12795  004388  0E00               	movlw	0
 12796  00438A  0100               	movlb	0	; () banked
 12797  00438C  6FAD               	movwf	(arm@on+1)& (0+255),b
 12798  00438E  0E00               	movlw	0
 12799  004390  6FAC               	movwf	arm@on& (0+255),b
 12800  004392                     l8856:
 12801                           
 12802                           ;Test.c: 655: if(on){
 12803  004392  0100               	movlb	0	; () banked
 12804  004394  51AC               	movf	arm@on& (0+255),w,b
 12805  004396  0100               	movlb	0	; () banked
 12806  004398  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12807  00439A  B4D8               	btfsc	status,2,c
 12808  00439C  D01C               	goto	l8868
 12809                           
 12810                           ; BSR set to: 0
 12811                           ;Test.c: 656: on = !on;
 12812  00439E  0100               	movlb	0	; () banked
 12813  0043A0  51AC               	movf	arm@on& (0+255),w,b
 12814  0043A2  0100               	movlb	0	; () banked
 12815  0043A4  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12816  0043A6  A4D8               	btfss	status,2,c
 12817  0043A8  D002               	goto	u7840
 12818  0043AA  0E01               	movlw	1
 12819  0043AC  D001               	goto	u7850
 12820  0043AE                     u7840:
 12821  0043AE  0E00               	movlw	0
 12822  0043B0                     u7850:
 12823  0043B0  0100               	movlb	0	; () banked
 12824  0043B2  6FAC               	movwf	arm@on& (0+255),b
 12825  0043B4  6BAD               	clrf	(arm@on+1)& (0+255),b
 12826                           
 12827                           ;Test.c: 657: while(PORTBbits.RB1 == 0){
 12828  0043B6  D005               	goto	l8862
 12829  0043B8                     l8860:
 12830                           
 12831                           ; BSR set to: 0
 12832                           ;Test.c: 658: f_arm_position = 0;
 12833  0043B8  0E00               	movlw	0
 12834  0043BA  0100               	movlb	0	; () banked
 12835  0043BC  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12836  0043BE  0E00               	movlw	0
 12837  0043C0  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 12838  0043C2                     l8862:
 12839                           
 12840                           ; BSR set to: 0
 12841  0043C2  A281               	btfss	3969,1,c	;volatile
 12842  0043C4  D7F9               	goto	l8860
 12843                           
 12844                           ; BSR set to: 0
 12845                           ;Test.c: 659: }
 12846                           ;Test.c: 660: if(PORTB >> 4 == 0b1111){
 12847                           
 12848                           ; BSR set to: 0
 12849  0043C6  3881               	swapf	3969,w,c	;volatile
 12850  0043C8  0B0F               	andlw	15
 12851  0043CA  0A0F               	xorlw	15
 12852  0043CC  B4D8               	btfsc	status,2,c
 12853  0043CE  D01F               	goto	l1471
 12854  0043D0                     l1472:
 12855  0043D0  A281               	btfss	3969,1,c	;volatile
 12856  0043D2  D7DF               	goto	l8856
 12857  0043D4  D7FD               	goto	l1472
 12858  0043D6                     l8868:
 12859                           
 12860                           ;Test.c: 665: else{
 12861                           ;Test.c: 666: on = !on;
 12862  0043D6  0100               	movlb	0	; () banked
 12863  0043D8  51AC               	movf	arm@on& (0+255),w,b
 12864  0043DA  0100               	movlb	0	; () banked
 12865  0043DC  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12866  0043DE  A4D8               	btfss	status,2,c
 12867  0043E0  D002               	goto	u7890
 12868  0043E2  0E01               	movlw	1
 12869  0043E4  D001               	goto	u7900
 12870  0043E6                     u7890:
 12871  0043E6  0E00               	movlw	0
 12872  0043E8                     u7900:
 12873  0043E8  0100               	movlb	0	; () banked
 12874  0043EA  6FAC               	movwf	arm@on& (0+255),b
 12875  0043EC  6BAD               	clrf	(arm@on+1)& (0+255),b
 12876                           
 12877                           ;Test.c: 667: while(PORTBbits.RB1 == 0){
 12878  0043EE  D005               	goto	l8872
 12879  0043F0                     l8870:
 12880                           
 12881                           ; BSR set to: 0
 12882                           ;Test.c: 668: f_arm_position = 1;
 12883  0043F0  0E00               	movlw	0
 12884  0043F2  0100               	movlb	0	; () banked
 12885  0043F4  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12886  0043F6  0E01               	movlw	1
 12887  0043F8  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 12888  0043FA                     l8872:
 12889                           
 12890                           ; BSR set to: 0
 12891  0043FA  A281               	btfss	3969,1,c	;volatile
 12892  0043FC  D7F9               	goto	l8870
 12893                           
 12894                           ; BSR set to: 0
 12895                           ;Test.c: 669: }
 12896                           ;Test.c: 670: if(PORTB >> 4 == 0b1111){
 12897                           
 12898                           ; BSR set to: 0
 12899  0043FE  3881               	swapf	3969,w,c	;volatile
 12900  004400  0B0F               	andlw	15
 12901  004402  0A0F               	xorlw	15
 12902  004404  B4D8               	btfsc	status,2,c
 12903  004406  D003               	goto	l1471
 12904  004408                     l1480:
 12905  004408  A281               	btfss	3969,1,c	;volatile
 12906  00440A  D7C3               	goto	l8856
 12907  00440C  D7FD               	goto	l1480
 12908  00440E                     l1471:
 12909                           
 12910                           ; BSR set to: 0
 12911                           ;Test.c: 674: }
 12912                           ;Test.c: 675: }
 12913                           ;Test.c: 677: (INTCONbits.GIE = 0);
 12914  00440E  9EF2               	bcf	intcon,7,c	;volatile
 12915                           
 12916                           ; BSR set to: 0
 12917                           ;Test.c: 678: stopSignals();
 12918  004410  EC70  F02D         	call	_stopSignals	;wreg free
 12919                           
 12920                           ;Test.c: 679: machine_state = Testing_state;
 12921  004414  0E03               	movlw	3
 12922  004416  0100               	movlb	0	; () banked
 12923  004418  6FFC               	movwf	_machine_state& (0+255),b
 12924                           
 12925                           ; BSR set to: 0
 12926  00441A  0012               	return		;funcret
 12927  00441C                     __end_of_arm:
 12928                           	opt stack 0
 12929                           tblptru	equ	0xFF8
 12930                           tblptrh	equ	0xFF7
 12931                           tblptrl	equ	0xFF6
 12932                           tablat	equ	0xFF5
 12933                           prodh	equ	0xFF4
 12934                           prodl	equ	0xFF3
 12935                           intcon	equ	0xFF2
 12936                           intcon2	equ	0xFF1
 12937                           intcon3	equ	0xFF0
 12938                           postinc0	equ	0xFEE
 12939                           wreg	equ	0xFE8
 12940                           postdec1	equ	0xFE5
 12941                           fsr1l	equ	0xFE1
 12942                           indf2	equ	0xFDF
 12943                           postinc2	equ	0xFDE
 12944                           postdec2	equ	0xFDD
 12945                           fsr2h	equ	0xFDA
 12946                           fsr2l	equ	0xFD9
 12947                           status	equ	0xFD8
 12948                           
 12949 ;; *************** function _algorithmTest *****************
 12950 ;; Defined at:
 12951 ;;		line 79 in file "Test.c"
 12952 ;; Parameters:    Size  Location     Type
 12953 ;;		None
 12954 ;; Auto vars:     Size  Location     Type
 12955 ;;		None
 12956 ;; Return value:  Size  Location     Type
 12957 ;;                  1    wreg      void 
 12958 ;; Registers used:
 12959 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12960 ;; Tracked objects:
 12961 ;;		On entry : 0/0
 12962 ;;		On exit  : 0/0
 12963 ;;		Unchanged: 0/0
 12964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12967 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12968 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12969 ;;Total ram usage:        2 bytes
 12970 ;; Hardware stack levels used:    1
 12971 ;; Hardware stack levels required when called:   10
 12972 ;; This function calls:
 12973 ;;		_lcdInst
 12974 ;;		_printf
 12975 ;; This function is called by:
 12976 ;;		_Test
 12977 ;; This function uses a non-reentrant model
 12978 ;;
 12979                           
 12980                           	psect	text44
 12981  0045E6                     __ptext44:
 12982                           	opt stack 0
 12983  0045E6                     _algorithmTest:
 12984                           	opt stack 19
 12985                           
 12986                           ;Test.c: 81: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 12987                           
 12988                           ; BSR set to: 0
 12989                           ;incstack = 0
 12990  0045E6  0E01               	movlw	1
 12991  0045E8  ECC9  F02D         	call	_lcdInst
 12992  0045EC  0E68               	movlw	104
 12993  0045EE  0100               	movlb	0	; () banked
 12994  0045F0  6FAB               	movwf	??_algorithmTest& (0+255),b
 12995  0045F2  0EE4               	movlw	228
 12996  0045F4                     u10687:
 12997  0045F4  2EE8               	decfsz	wreg,f,c
 12998  0045F6  D7FE               	bra	u10687
 12999  0045F8  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13000  0045FA  D7FC               	bra	u10687
 13001  0045FC  F000               	nop	
 13002  0045FE  0E80               	movlw	128
 13003  004600  ECC9  F02D         	call	_lcdInst
 13004                           
 13005                           ;Test.c: 82: printf("ALGORITHM TEST");
 13006  004604  0EF4               	movlw	low STR_71
 13007  004606  0100               	movlb	0	; () banked
 13008  004608  6F8E               	movwf	printf@f& (0+255),b
 13009  00460A  0EFE               	movlw	high STR_71
 13010  00460C  0100               	movlb	0	; () banked
 13011  00460E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13012  004610  EC8D  F00D         	call	_printf	;wreg free
 13013                           
 13014                           ;Test.c: 83: lcdInst(0b11000000);;
 13015  004614  0EC0               	movlw	192
 13016  004616  ECC9  F02D         	call	_lcdInst
 13017                           
 13018                           ;Test.c: 84: printf("PUSH TO START");
 13019  00461A  0E2D               	movlw	low STR_72
 13020  00461C  0100               	movlb	0	; () banked
 13021  00461E  6F8E               	movwf	printf@f& (0+255),b
 13022  004620  0EFF               	movlw	high STR_72
 13023  004622  0100               	movlb	0	; () banked
 13024  004624  6F8F               	movwf	(printf@f+1)& (0+255),b
 13025  004626  EC8D  F00D         	call	_printf	;wreg free
 13026                           
 13027                           ;Test.c: 85: _delay((unsigned long)((100)*(32000000/4000.0)));
 13028  00462A  0E05               	movlw	5
 13029  00462C  0100               	movlb	0	; () banked
 13030  00462E  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 13031  004630  0E0F               	movlw	15
 13032  004632  0100               	movlb	0	; () banked
 13033  004634  6FAB               	movwf	??_algorithmTest& (0+255),b
 13034  004636  0EF1               	movlw	241
 13035  004638                     u10697:
 13036  004638  2EE8               	decfsz	wreg,f,c
 13037  00463A  D7FE               	bra	u10697
 13038  00463C  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13039  00463E  D7FC               	bra	u10697
 13040  004640  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 13041  004642  D7FA               	bra	u10697
 13042  004644                     l1267:
 13043  004644  A281               	btfss	3969,1,c	;volatile
 13044  004646  D7FE               	goto	l1267
 13045  004648                     l1270:
 13046  004648  B281               	btfsc	3969,1,c	;volatile
 13047  00464A  D7FE               	goto	l1270
 13048                           
 13049                           ;Test.c: 88: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 13050  00464C  0E01               	movlw	1
 13051  00464E  ECC9  F02D         	call	_lcdInst
 13052  004652  0E68               	movlw	104
 13053  004654  0100               	movlb	0	; () banked
 13054  004656  6FAB               	movwf	??_algorithmTest& (0+255),b
 13055  004658  0EE4               	movlw	228
 13056  00465A                     u10707:
 13057  00465A  2EE8               	decfsz	wreg,f,c
 13058  00465C  D7FE               	bra	u10707
 13059  00465E  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 13060  004660  D7FC               	bra	u10707
 13061  004662  F000               	nop	
 13062  004664  0E80               	movlw	128
 13063  004666  ECC9  F02D         	call	_lcdInst
 13064                           
 13065                           ;Test.c: 93: printf("ALG1: 9 POPNOTAB");
 13066  00466A  0E41               	movlw	low STR_73
 13067  00466C  0100               	movlb	0	; () banked
 13068  00466E  6F8E               	movwf	printf@f& (0+255),b
 13069  004670  0EFC               	movlw	high STR_73
 13070  004672  0100               	movlb	0	; () banked
 13071  004674  6F8F               	movwf	(printf@f+1)& (0+255),b
 13072  004676  EC8D  F00D         	call	_printf	;wreg free
 13073                           
 13074                           ;Test.c: 100: printf("ALG2: 12 CANS");
 13075  00467A  0E11               	movlw	low STR_74
 13076  00467C  0100               	movlb	0	; () banked
 13077  00467E  6F8E               	movwf	printf@f& (0+255),b
 13078  004680  0EFF               	movlw	high STR_74
 13079  004682  0100               	movlb	0	; () banked
 13080  004684  6F8F               	movwf	(printf@f+1)& (0+255),b
 13081  004686  EC8D  F00D         	call	_printf	;wreg free
 13082                           
 13083                           ;Test.c: 109: printf("ALG3: 1 CAN");
 13084  00468A  0E64               	movlw	low STR_75
 13085  00468C  0100               	movlb	0	; () banked
 13086  00468E  6F8E               	movwf	printf@f& (0+255),b
 13087  004690  0EFF               	movlw	high STR_75
 13088  004692  0100               	movlb	0	; () banked
 13089  004694  6F8F               	movwf	(printf@f+1)& (0+255),b
 13090  004696  EC8D  F00D         	call	_printf	;wreg free
 13091                           
 13092                           ;Test.c: 115: printf("ALG4: ALL CANS");
 13093  00469A  0ED6               	movlw	low STR_76
 13094  00469C  0100               	movlb	0	; () banked
 13095  00469E  6F8E               	movwf	printf@f& (0+255),b
 13096  0046A0  0EFE               	movlw	high STR_76
 13097  0046A2  0100               	movlb	0	; () banked
 13098  0046A4  6F8F               	movwf	(printf@f+1)& (0+255),b
 13099  0046A6  EC8D  F00D         	call	_printf	;wreg free
 13100                           
 13101                           ;Test.c: 120: printf("ALG5: NO CANS");
 13102  0046AA  0E1F               	movlw	low STR_77
 13103  0046AC  0100               	movlb	0	; () banked
 13104  0046AE  6F8E               	movwf	printf@f& (0+255),b
 13105  0046B0  0EFF               	movlw	high STR_77
 13106  0046B2  0100               	movlb	0	; () banked
 13107  0046B4  6F8F               	movwf	(printf@f+1)& (0+255),b
 13108  0046B6  EC8D  F00D         	call	_printf	;wreg free
 13109  0046BA  0012               	return		;funcret
 13110  0046BC                     __end_of_algorithmTest:
 13111                           	opt stack 0
 13112                           tblptru	equ	0xFF8
 13113                           tblptrh	equ	0xFF7
 13114                           tblptrl	equ	0xFF6
 13115                           tablat	equ	0xFF5
 13116                           prodh	equ	0xFF4
 13117                           prodl	equ	0xFF3
 13118                           intcon	equ	0xFF2
 13119                           intcon2	equ	0xFF1
 13120                           intcon3	equ	0xFF0
 13121                           postinc0	equ	0xFEE
 13122                           wreg	equ	0xFE8
 13123                           postdec1	equ	0xFE5
 13124                           fsr1l	equ	0xFE1
 13125                           indf2	equ	0xFDF
 13126                           postinc2	equ	0xFDE
 13127                           postdec2	equ	0xFDD
 13128                           fsr2h	equ	0xFDA
 13129                           fsr2l	equ	0xFD9
 13130                           status	equ	0xFD8
 13131                           
 13132 ;; *************** function _actuatorTest *****************
 13133 ;; Defined at:
 13134 ;;		line 202 in file "Test.c"
 13135 ;; Parameters:    Size  Location     Type
 13136 ;;		None
 13137 ;; Auto vars:     Size  Location     Type
 13138 ;;  i               1   45[BANK0 ] unsigned char 
 13139 ;;  i               1   67[BANK0 ] unsigned char 
 13140 ;;  i               1   66[BANK0 ] unsigned char 
 13141 ;;  i               1   65[BANK0 ] unsigned char 
 13142 ;;  i               1   64[BANK0 ] unsigned char 
 13143 ;;  i               1   63[BANK0 ] unsigned char 
 13144 ;;  i               1   62[BANK0 ] unsigned char 
 13145 ;;  i               1   61[BANK0 ] unsigned char 
 13146 ;;  i               1   60[BANK0 ] unsigned char 
 13147 ;;  i               1   59[BANK0 ] unsigned char 
 13148 ;;  i               1   58[BANK0 ] unsigned char 
 13149 ;;  i               1   57[BANK0 ] unsigned char 
 13150 ;;  i               1   56[BANK0 ] unsigned char 
 13151 ;;  i               1   55[BANK0 ] unsigned char 
 13152 ;;  i               1   54[BANK0 ] unsigned char 
 13153 ;;  i               1   53[BANK0 ] unsigned char 
 13154 ;;  i               1   52[BANK0 ] unsigned char 
 13155 ;;  i               1   51[BANK0 ] unsigned char 
 13156 ;;  i               1   50[BANK0 ] unsigned char 
 13157 ;;  i               1   49[BANK0 ] unsigned char 
 13158 ;;  i               1   48[BANK0 ] unsigned char 
 13159 ;;  i               1   47[BANK0 ] unsigned char 
 13160 ;;  i               1   46[BANK0 ] unsigned char 
 13161 ;;  i               2   68[BANK0 ] int 
 13162 ;; Return value:  Size  Location     Type
 13163 ;;                  1    wreg      void 
 13164 ;; Registers used:
 13165 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13166 ;; Tracked objects:
 13167 ;;		On entry : 0/0
 13168 ;;		On exit  : 0/0
 13169 ;;		Unchanged: 0/0
 13170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13172 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13173 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13174 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13175 ;;Total ram usage:       27 bytes
 13176 ;; Hardware stack levels used:    1
 13177 ;; Hardware stack levels required when called:   10
 13178 ;; This function calls:
 13179 ;;		_lcdInst
 13180 ;;		_printf
 13181 ;;		_updateServoPosition
 13182 ;; This function is called by:
 13183 ;;		_Test
 13184 ;; This function uses a non-reentrant model
 13185 ;;
 13186                           
 13187                           	psect	text45
 13188  0008DA                     __ptext45:
 13189                           	opt stack 0
 13190  0008DA                     _actuatorTest:
 13191                           	opt stack 19
 13192                           
 13193                           ;Test.c: 204: int i = 0;
 13194                           
 13195                           ;incstack = 0
 13196  0008DA  0E00               	movlw	0
 13197  0008DC  0100               	movlb	0	; () banked
 13198  0008DE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13199  0008E0  0E00               	movlw	0
 13200  0008E2  6FC4               	movwf	actuatorTest@i& (0+255),b
 13201                           
 13202                           ; BSR set to: 0
 13203                           ;Test.c: 206: (INTCONbits.GIE = 1);
 13204  0008E4  8EF2               	bsf	intcon,7,c	;volatile
 13205                           
 13206                           ; BSR set to: 0
 13207                           ;Test.c: 207: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13208  0008E6  0E01               	movlw	1
 13209  0008E8  ECC9  F02D         	call	_lcdInst
 13210  0008EC  0E68               	movlw	104
 13211  0008EE  0100               	movlb	0	; () banked
 13212  0008F0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13213  0008F2  0EE4               	movlw	228
 13214  0008F4                     u10717:
 13215  0008F4  2EE8               	decfsz	wreg,f,c
 13216  0008F6  D7FE               	bra	u10717
 13217  0008F8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13218  0008FA  D7FC               	bra	u10717
 13219  0008FC  F000               	nop	
 13220  0008FE  0E80               	movlw	128
 13221  000900  ECC9  F02D         	call	_lcdInst
 13222                           
 13223                           ;Test.c: 208: printf("ACTUATORS");
 13224  000904  0E90               	movlw	low STR_89
 13225  000906  0100               	movlb	0	; () banked
 13226  000908  6F8E               	movwf	printf@f& (0+255),b
 13227  00090A  0EFF               	movlw	high STR_89
 13228  00090C  0100               	movlb	0	; () banked
 13229  00090E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13230  000910  EC8D  F00D         	call	_printf	;wreg free
 13231                           
 13232                           ;Test.c: 209: lcdInst(0b11000000);;
 13233  000914  0EC0               	movlw	192
 13234  000916  ECC9  F02D         	call	_lcdInst
 13235                           
 13236                           ;Test.c: 210: printf("PUSH TO START");
 13237  00091A  0E2D               	movlw	low STR_72
 13238  00091C  0100               	movlb	0	; () banked
 13239  00091E  6F8E               	movwf	printf@f& (0+255),b
 13240  000920  0EFF               	movlw	high STR_72
 13241  000922  0100               	movlb	0	; () banked
 13242  000924  6F8F               	movwf	(printf@f+1)& (0+255),b
 13243  000926  EC8D  F00D         	call	_printf	;wreg free
 13244                           
 13245                           ;Test.c: 211: _delay((unsigned long)((100)*(32000000/4000.0)));
 13246  00092A  0E05               	movlw	5
 13247  00092C  0100               	movlb	0	; () banked
 13248  00092E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13249  000930  0E0F               	movlw	15
 13250  000932  0100               	movlb	0	; () banked
 13251  000934  6FAB               	movwf	??_actuatorTest& (0+255),b
 13252  000936  0EF1               	movlw	241
 13253  000938                     u10727:
 13254  000938  2EE8               	decfsz	wreg,f,c
 13255  00093A  D7FE               	bra	u10727
 13256  00093C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13257  00093E  D7FC               	bra	u10727
 13258  000940  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13259  000942  D7FA               	bra	u10727
 13260  000944                     l1302:
 13261  000944  A281               	btfss	3969,1,c	;volatile
 13262  000946  D7FE               	goto	l1302
 13263  000948                     l1305:
 13264  000948  B281               	btfsc	3969,1,c	;volatile
 13265  00094A  D7FE               	goto	l1305
 13266                           
 13267                           ;Test.c: 214: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13268  00094C  0E01               	movlw	1
 13269  00094E  ECC9  F02D         	call	_lcdInst
 13270  000952  0E68               	movlw	104
 13271  000954  0100               	movlb	0	; () banked
 13272  000956  6FAB               	movwf	??_actuatorTest& (0+255),b
 13273  000958  0EE4               	movlw	228
 13274  00095A                     u10737:
 13275  00095A  2EE8               	decfsz	wreg,f,c
 13276  00095C  D7FE               	bra	u10737
 13277  00095E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13278  000960  D7FC               	bra	u10737
 13279  000962  F000               	nop	
 13280  000964  0E80               	movlw	128
 13281  000966  ECC9  F02D         	call	_lcdInst
 13282                           
 13283                           ;Test.c: 219: printf("TST: DC MOTORS");
 13284  00096A  0EE5               	movlw	low STR_91
 13285  00096C  0100               	movlb	0	; () banked
 13286  00096E  6F8E               	movwf	printf@f& (0+255),b
 13287  000970  0EFE               	movlw	high STR_91
 13288  000972  0100               	movlb	0	; () banked
 13289  000974  6F8F               	movwf	(printf@f+1)& (0+255),b
 13290  000976  EC8D  F00D         	call	_printf	;wreg free
 13291                           
 13292                           ;Test.c: 220: lcdInst(0b11000000);;
 13293  00097A  0EC0               	movlw	192
 13294  00097C  ECC9  F02D         	call	_lcdInst
 13295                           
 13296                           ;Test.c: 221: printf("PIN RA5 HIGH.");
 13297  000980  0E03               	movlw	low STR_92
 13298  000982  0100               	movlb	0	; () banked
 13299  000984  6F8E               	movwf	printf@f& (0+255),b
 13300  000986  0EFF               	movlw	high STR_92
 13301  000988  0100               	movlb	0	; () banked
 13302  00098A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13303  00098C  EC8D  F00D         	call	_printf	;wreg free
 13304                           
 13305                           ;Test.c: 222: LATBbits.LATB2 = 1;
 13306  000990  848A               	bsf	3978,2,c	;volatile
 13307                           
 13308                           ;Test.c: 223: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 13309  000992  0E00               	movlw	0
 13310  000994  0100               	movlb	0	; () banked
 13311  000996  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13312  000998  0E00               	movlw	0
 13313  00099A  6FC4               	movwf	actuatorTest@i& (0+255),b
 13314                           
 13315                           ; BSR set to: 0
 13316  00099C  0100               	movlb	0	; () banked
 13317  00099E  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13318  0009A0  D008               	goto	l8442
 13319  0009A2  0100               	movlb	0	; () banked
 13320  0009A4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13321  0009A6  E123               	bnz	l1309
 13322  0009A8  0E05               	movlw	5
 13323  0009AA  0100               	movlb	0	; () banked
 13324  0009AC  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13325  0009AE  B0D8               	btfsc	status,0,c
 13326  0009B0  D01E               	goto	l1309
 13327  0009B2                     l8442:
 13328                           
 13329                           ; BSR set to: 0
 13330  0009B2  0E00               	movlw	0
 13331  0009B4  0100               	movlb	0	; () banked
 13332  0009B6  6FAD               	movwf	actuatorTest@i_1739& (0+255),b
 13333  0009B8                     l8444:
 13334                           
 13335                           ; BSR set to: 0
 13336  0009B8  0E63               	movlw	99
 13337  0009BA  0100               	movlb	0	; () banked
 13338  0009BC  65AD               	cpfsgt	actuatorTest@i_1739& (0+255),b
 13339  0009BE  D001               	goto	l8448
 13340  0009C0  D00C               	goto	l8452
 13341  0009C2                     l8448:
 13342                           
 13343                           ; BSR set to: 0
 13344  0009C2  0E68               	movlw	104
 13345  0009C4  0100               	movlb	0	; () banked
 13346  0009C6  6FAB               	movwf	??_actuatorTest& (0+255),b
 13347  0009C8  0EE4               	movlw	228
 13348  0009CA                     u10747:
 13349  0009CA  2EE8               	decfsz	wreg,f,c
 13350  0009CC  D7FE               	bra	u10747
 13351  0009CE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13352  0009D0  D7FC               	bra	u10747
 13353  0009D2  F000               	nop	
 13354  0009D4  0100               	movlb	0	; () banked
 13355  0009D6  2BAD               	incf	actuatorTest@i_1739& (0+255),f,b
 13356  0009D8  D7EF               	goto	l8444
 13357  0009DA                     l8452:
 13358                           
 13359                           ; BSR set to: 0
 13360  0009DA  0100               	movlb	0	; () banked
 13361  0009DC  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13362  0009DE  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13363                           
 13364                           ; BSR set to: 0
 13365  0009E0  0100               	movlb	0	; () banked
 13366  0009E2  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13367  0009E4  D7E6               	goto	l8442
 13368  0009E6  0100               	movlb	0	; () banked
 13369  0009E8  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13370  0009EA  E101               	bnz	u7320
 13371  0009EC  D7DD               	goto	L10
 13372  0009EE                     u7320:
 13373  0009EE                     l1309:
 13374                           
 13375                           ; BSR set to: 0
 13376                           ;Test.c: 224: LATBbits.LATB2 = 0;
 13377  0009EE  948A               	bcf	3978,2,c	;volatile
 13378                           
 13379                           ; BSR set to: 0
 13380                           ;Test.c: 225: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13381  0009F0  0E01               	movlw	1
 13382  0009F2  ECC9  F02D         	call	_lcdInst
 13383  0009F6  0E68               	movlw	104
 13384  0009F8  0100               	movlb	0	; () banked
 13385  0009FA  6FAB               	movwf	??_actuatorTest& (0+255),b
 13386  0009FC  0EE4               	movlw	228
 13387  0009FE                     u10757:
 13388  0009FE  2EE8               	decfsz	wreg,f,c
 13389  000A00  D7FE               	bra	u10757
 13390  000A02  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13391  000A04  D7FC               	bra	u10757
 13392  000A06  F000               	nop	
 13393  000A08  0E80               	movlw	128
 13394  000A0A  ECC9  F02D         	call	_lcdInst
 13395                           
 13396                           ;Test.c: 231: printf("TST: COND SOLN'D");
 13397  000A0E  0E52               	movlw	low STR_93
 13398  000A10  0100               	movlb	0	; () banked
 13399  000A12  6F8E               	movwf	printf@f& (0+255),b
 13400  000A14  0EFC               	movlw	high STR_93
 13401  000A16  0100               	movlb	0	; () banked
 13402  000A18  6F8F               	movwf	(printf@f+1)& (0+255),b
 13403  000A1A  EC8D  F00D         	call	_printf	;wreg free
 13404                           
 13405                           ;Test.c: 232: lcdInst(0b11000000);;
 13406  000A1E  0EC0               	movlw	192
 13407  000A20  ECC9  F02D         	call	_lcdInst
 13408                           
 13409                           ;Test.c: 233: printf("PIN RA3...");
 13410  000A24  0E70               	movlw	low STR_94
 13411  000A26  0100               	movlb	0	; () banked
 13412  000A28  6F8E               	movwf	printf@f& (0+255),b
 13413  000A2A  0EFF               	movlw	high STR_94
 13414  000A2C  0100               	movlb	0	; () banked
 13415  000A2E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13416  000A30  EC8D  F00D         	call	_printf	;wreg free
 13417                           
 13418                           ;Test.c: 234: for(i=0;i<5;i++){
 13419  000A34  0E00               	movlw	0
 13420  000A36  0100               	movlb	0	; () banked
 13421  000A38  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13422  000A3A  0E00               	movlw	0
 13423  000A3C  6FC4               	movwf	actuatorTest@i& (0+255),b
 13424                           
 13425                           ; BSR set to: 0
 13426  000A3E  0100               	movlb	0	; () banked
 13427  000A40  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13428  000A42  D008               	goto	l1312
 13429  000A44  0100               	movlb	0	; () banked
 13430  000A46  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13431  000A48  E12C               	bnz	l1313
 13432  000A4A  0E05               	movlw	5
 13433  000A4C  0100               	movlb	0	; () banked
 13434  000A4E  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13435  000A50  B0D8               	btfsc	status,0,c
 13436  000A52  D027               	goto	l1313
 13437  000A54                     l1312:
 13438                           
 13439                           ; BSR set to: 0
 13440                           ;Test.c: 235: LATAbits.LATA3 = 1;
 13441  000A54  8689               	bsf	3977,3,c	;volatile
 13442                           
 13443                           ; BSR set to: 0
 13444                           ;Test.c: 236: _delay((unsigned long)((300)*(32000000/4000.0)));
 13445  000A56  0E0D               	movlw	13
 13446  000A58  0100               	movlb	0	; () banked
 13447  000A5A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13448  000A5C  0E2D               	movlw	45
 13449  000A5E  0100               	movlb	0	; () banked
 13450  000A60  6FAB               	movwf	??_actuatorTest& (0+255),b
 13451  000A62  0ED7               	movlw	215
 13452  000A64                     u10767:
 13453  000A64  2EE8               	decfsz	wreg,f,c
 13454  000A66  D7FE               	bra	u10767
 13455  000A68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13456  000A6A  D7FC               	bra	u10767
 13457  000A6C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13458  000A6E  D7FA               	bra	u10767
 13459  000A70  D000               	nop2	
 13460                           
 13461                           ;Test.c: 237: LATAbits.LATA3 = !1;
 13462  000A72  9689               	bcf	3977,3,c	;volatile
 13463                           
 13464                           ;Test.c: 238: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 13465  000A74  0E1D               	movlw	29
 13466  000A76  0100               	movlb	0	; () banked
 13467  000A78  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13468  000A7A  0E69               	movlw	105
 13469  000A7C  0100               	movlb	0	; () banked
 13470  000A7E  6FAB               	movwf	??_actuatorTest& (0+255),b
 13471  000A80  0EA5               	movlw	165
 13472  000A82                     u10777:
 13473  000A82  2EE8               	decfsz	wreg,f,c
 13474  000A84  D7FE               	bra	u10777
 13475  000A86  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13476  000A88  D7FC               	bra	u10777
 13477  000A8A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13478  000A8C  D7FA               	bra	u10777
 13479  000A8E  0100               	movlb	0	; () banked
 13480  000A90  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13481  000A92  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13482  000A94  0100               	movlb	0	; () banked
 13483  000A96  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13484  000A98  D7DD               	goto	l1312
 13485  000A9A  0100               	movlb	0	; () banked
 13486  000A9C  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13487  000A9E  E101               	bnz	u7340
 13488  000AA0  D7D4               	goto	L11
 13489  000AA2                     u7340:
 13490  000AA2                     l1313:
 13491                           
 13492                           ; BSR set to: 0
 13493                           ;Test.c: 239: }
 13494                           ;Test.c: 240: LATAbits.LATA3 = !1;
 13495  000AA2  9689               	bcf	3977,3,c	;volatile
 13496                           
 13497                           ; BSR set to: 0
 13498                           ;Test.c: 241: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13499  000AA4  0E01               	movlw	1
 13500  000AA6  ECC9  F02D         	call	_lcdInst
 13501  000AAA  0E68               	movlw	104
 13502  000AAC  0100               	movlb	0	; () banked
 13503  000AAE  6FAB               	movwf	??_actuatorTest& (0+255),b
 13504  000AB0  0EE4               	movlw	228
 13505  000AB2                     u10787:
 13506  000AB2  2EE8               	decfsz	wreg,f,c
 13507  000AB4  D7FE               	bra	u10787
 13508  000AB6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13509  000AB8  D7FC               	bra	u10787
 13510  000ABA  F000               	nop	
 13511  000ABC  0E80               	movlw	128
 13512  000ABE  ECC9  F02D         	call	_lcdInst
 13513                           
 13514                           ;Test.c: 247: printf("TST: PUSH SOLN'D");
 13515  000AC2  0E63               	movlw	low STR_95
 13516  000AC4  0100               	movlb	0	; () banked
 13517  000AC6  6F8E               	movwf	printf@f& (0+255),b
 13518  000AC8  0EFC               	movlw	high STR_95
 13519  000ACA  0100               	movlb	0	; () banked
 13520  000ACC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13521  000ACE  EC8D  F00D         	call	_printf	;wreg free
 13522                           
 13523                           ;Test.c: 248: lcdInst(0b11000000);;
 13524  000AD2  0EC0               	movlw	192
 13525  000AD4  ECC9  F02D         	call	_lcdInst
 13526                           
 13527                           ;Test.c: 249: printf("PIN RA4...");
 13528  000AD8  0E7B               	movlw	low STR_96
 13529  000ADA  0100               	movlb	0	; () banked
 13530  000ADC  6F8E               	movwf	printf@f& (0+255),b
 13531  000ADE  0EFF               	movlw	high STR_96
 13532  000AE0  0100               	movlb	0	; () banked
 13533  000AE2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13534  000AE4  EC8D  F00D         	call	_printf	;wreg free
 13535                           
 13536                           ;Test.c: 250: for(i=0;i<5;i++){
 13537  000AE8  0E00               	movlw	0
 13538  000AEA  0100               	movlb	0	; () banked
 13539  000AEC  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13540  000AEE  0E00               	movlw	0
 13541  000AF0  6FC4               	movwf	actuatorTest@i& (0+255),b
 13542                           
 13543                           ; BSR set to: 0
 13544  000AF2  0100               	movlb	0	; () banked
 13545  000AF4  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13546  000AF6  D008               	goto	l1314
 13547  000AF8  0100               	movlb	0	; () banked
 13548  000AFA  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13549  000AFC  E12C               	bnz	l1315
 13550  000AFE  0E05               	movlw	5
 13551  000B00  0100               	movlb	0	; () banked
 13552  000B02  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13553  000B04  B0D8               	btfsc	status,0,c
 13554  000B06  D027               	goto	l1315
 13555  000B08                     l1314:
 13556                           
 13557                           ; BSR set to: 0
 13558                           ;Test.c: 251: LATAbits.LATA4 = 1;
 13559  000B08  8889               	bsf	3977,4,c	;volatile
 13560                           
 13561                           ; BSR set to: 0
 13562                           ;Test.c: 252: _delay((unsigned long)((300)*(32000000/4000.0)));
 13563  000B0A  0E0D               	movlw	13
 13564  000B0C  0100               	movlb	0	; () banked
 13565  000B0E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13566  000B10  0E2D               	movlw	45
 13567  000B12  0100               	movlb	0	; () banked
 13568  000B14  6FAB               	movwf	??_actuatorTest& (0+255),b
 13569  000B16  0ED7               	movlw	215
 13570  000B18                     u10797:
 13571  000B18  2EE8               	decfsz	wreg,f,c
 13572  000B1A  D7FE               	bra	u10797
 13573  000B1C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13574  000B1E  D7FC               	bra	u10797
 13575  000B20  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13576  000B22  D7FA               	bra	u10797
 13577  000B24  D000               	nop2	
 13578                           
 13579                           ;Test.c: 253: LATAbits.LATA4 = !1;
 13580  000B26  9889               	bcf	3977,4,c	;volatile
 13581                           
 13582                           ;Test.c: 254: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 13583  000B28  0E1D               	movlw	29
 13584  000B2A  0100               	movlb	0	; () banked
 13585  000B2C  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13586  000B2E  0E69               	movlw	105
 13587  000B30  0100               	movlb	0	; () banked
 13588  000B32  6FAB               	movwf	??_actuatorTest& (0+255),b
 13589  000B34  0EA5               	movlw	165
 13590  000B36                     u10807:
 13591  000B36  2EE8               	decfsz	wreg,f,c
 13592  000B38  D7FE               	bra	u10807
 13593  000B3A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13594  000B3C  D7FC               	bra	u10807
 13595  000B3E  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13596  000B40  D7FA               	bra	u10807
 13597  000B42  0100               	movlb	0	; () banked
 13598  000B44  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13599  000B46  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13600  000B48  0100               	movlb	0	; () banked
 13601  000B4A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13602  000B4C  D7DD               	goto	l1314
 13603  000B4E  0100               	movlb	0	; () banked
 13604  000B50  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13605  000B52  E101               	bnz	u7360
 13606  000B54  D7D4               	goto	L12
 13607  000B56                     u7360:
 13608  000B56                     l1315:
 13609                           
 13610                           ; BSR set to: 0
 13611                           ;Test.c: 255: }
 13612                           ;Test.c: 256: LATAbits.LATA4 = !1;
 13613  000B56  9889               	bcf	3977,4,c	;volatile
 13614                           
 13615                           ; BSR set to: 0
 13616                           ;Test.c: 257: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13617  000B58  0E01               	movlw	1
 13618  000B5A  ECC9  F02D         	call	_lcdInst
 13619  000B5E  0E68               	movlw	104
 13620  000B60  0100               	movlb	0	; () banked
 13621  000B62  6FAB               	movwf	??_actuatorTest& (0+255),b
 13622  000B64  0EE4               	movlw	228
 13623  000B66                     u10817:
 13624  000B66  2EE8               	decfsz	wreg,f,c
 13625  000B68  D7FE               	bra	u10817
 13626  000B6A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13627  000B6C  D7FC               	bra	u10817
 13628  000B6E  F000               	nop	
 13629  000B70  0E80               	movlw	128
 13630  000B72  ECC9  F02D         	call	_lcdInst
 13631                           
 13632                           ;Test.c: 260: machine_state = Sorting_state;
 13633  000B76  0E01               	movlw	1
 13634  000B78  0100               	movlb	0	; () banked
 13635  000B7A  6FFC               	movwf	_machine_state& (0+255),b
 13636                           
 13637                           ; BSR set to: 0
 13638                           ;Test.c: 261: was_low_1 = 0;
 13639  000B7C  0E00               	movlw	0
 13640  000B7E  6E78               	movwf	_was_low_1+1,c	;volatile
 13641  000B80  0E00               	movlw	0
 13642  000B82  6E77               	movwf	_was_low_1,c	;volatile
 13643                           
 13644                           ; BSR set to: 0
 13645                           ;Test.c: 262: was_low_1 = 0;
 13646  000B84  0E00               	movlw	0
 13647  000B86  6E78               	movwf	_was_low_1+1,c	;volatile
 13648  000B88  0E00               	movlw	0
 13649  000B8A  6E77               	movwf	_was_low_1,c	;volatile
 13650                           
 13651                           ; BSR set to: 0
 13652                           ;Test.c: 269: printf("TST: PAN SERVO");
 13653  000B8C  0EC7               	movlw	low STR_97
 13654  000B8E  0100               	movlb	0	; () banked
 13655  000B90  6F8E               	movwf	printf@f& (0+255),b
 13656  000B92  0EFE               	movlw	high STR_97
 13657  000B94  0100               	movlb	0	; () banked
 13658  000B96  6F8F               	movwf	(printf@f+1)& (0+255),b
 13659  000B98  EC8D  F00D         	call	_printf	;wreg free
 13660                           
 13661                           ;Test.c: 270: lcdInst(0b11000000);;
 13662  000B9C  0EC0               	movlw	192
 13663  000B9E  ECC9  F02D         	call	_lcdInst
 13664                           
 13665                           ;Test.c: 271: printf("MIDDLE -- 2s    ");
 13666  000BA2  0EB9               	movlw	low STR_98
 13667  000BA4  0100               	movlb	0	; () banked
 13668  000BA6  6F8E               	movwf	printf@f& (0+255),b
 13669  000BA8  0EFB               	movlw	high STR_98
 13670  000BAA  0100               	movlb	0	; () banked
 13671  000BAC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13672  000BAE  EC8D  F00D         	call	_printf	;wreg free
 13673                           
 13674                           ;Test.c: 272: updateServoPosition(1200, 1);
 13675  000BB2  0E04               	movlw	4
 13676  000BB4  0100               	movlb	0	; () banked
 13677  000BB6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13678  000BB8  0EB0               	movlw	176
 13679  000BBA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13680  000BBC  0E00               	movlw	0
 13681  000BBE  0100               	movlb	0	; () banked
 13682  000BC0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13683  000BC2  0E01               	movlw	1
 13684  000BC4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13685  000BC6  ECB4  F026         	call	_updateServoPosition	;wreg free
 13686                           
 13687                           ;Test.c: 273: TMR1ON = 1;
 13688  000BCA  80CD               	bsf	4045,0,c	;volatile
 13689                           
 13690                           ;Test.c: 274: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13691  000BCC  0E00               	movlw	0
 13692  000BCE  0100               	movlb	0	; () banked
 13693  000BD0  6FAE               	movwf	actuatorTest@i_1746& (0+255),b
 13694  000BD2                     l8528:
 13695                           
 13696                           ; BSR set to: 0
 13697  000BD2  0E63               	movlw	99
 13698  000BD4  0100               	movlb	0	; () banked
 13699  000BD6  65AE               	cpfsgt	actuatorTest@i_1746& (0+255),b
 13700  000BD8  D001               	goto	l8532
 13701  000BDA  D00C               	goto	l8536
 13702  000BDC                     l8532:
 13703                           
 13704                           ; BSR set to: 0
 13705  000BDC  0E68               	movlw	104
 13706  000BDE  0100               	movlb	0	; () banked
 13707  000BE0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13708  000BE2  0EE4               	movlw	228
 13709  000BE4                     u10827:
 13710  000BE4  2EE8               	decfsz	wreg,f,c
 13711  000BE6  D7FE               	bra	u10827
 13712  000BE8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13713  000BEA  D7FC               	bra	u10827
 13714  000BEC  F000               	nop	
 13715  000BEE  0100               	movlb	0	; () banked
 13716  000BF0  2BAE               	incf	actuatorTest@i_1746& (0+255),f,b
 13717  000BF2  D7EF               	goto	l8528
 13718  000BF4                     l8536:
 13719                           
 13720                           ; BSR set to: 0
 13721  000BF4  0E00               	movlw	0
 13722  000BF6  0100               	movlb	0	; () banked
 13723  000BF8  6FAF               	movwf	actuatorTest@i_1747& (0+255),b
 13724  000BFA                     l8538:
 13725                           
 13726                           ; BSR set to: 0
 13727  000BFA  0E63               	movlw	99
 13728  000BFC  0100               	movlb	0	; () banked
 13729  000BFE  65AF               	cpfsgt	actuatorTest@i_1747& (0+255),b
 13730  000C00  D001               	goto	l8542
 13731  000C02  D00C               	goto	l8546
 13732  000C04                     l8542:
 13733                           
 13734                           ; BSR set to: 0
 13735  000C04  0E68               	movlw	104
 13736  000C06  0100               	movlb	0	; () banked
 13737  000C08  6FAB               	movwf	??_actuatorTest& (0+255),b
 13738  000C0A  0EE4               	movlw	228
 13739  000C0C                     u10837:
 13740  000C0C  2EE8               	decfsz	wreg,f,c
 13741  000C0E  D7FE               	bra	u10837
 13742  000C10  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13743  000C12  D7FC               	bra	u10837
 13744  000C14  F000               	nop	
 13745  000C16  0100               	movlb	0	; () banked
 13746  000C18  2BAF               	incf	actuatorTest@i_1747& (0+255),f,b
 13747  000C1A  D7EF               	goto	l8538
 13748  000C1C                     l8546:
 13749                           
 13750                           ; BSR set to: 0
 13751                           ;Test.c: 276: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13752  000C1C  0E80               	movlw	128
 13753  000C1E  ECC9  F02D         	call	_lcdInst
 13754  000C22  0EC0               	movlw	192
 13755  000C24  ECC9  F02D         	call	_lcdInst
 13756                           
 13757                           ;Test.c: 277: printf("RIGHT -- 2s     ");
 13758  000C28  0EA8               	movlw	low STR_99
 13759  000C2A  0100               	movlb	0	; () banked
 13760  000C2C  6F8E               	movwf	printf@f& (0+255),b
 13761  000C2E  0EFB               	movlw	high STR_99
 13762  000C30  0100               	movlb	0	; () banked
 13763  000C32  6F8F               	movwf	(printf@f+1)& (0+255),b
 13764  000C34  EC8D  F00D         	call	_printf	;wreg free
 13765                           
 13766                           ;Test.c: 278: updateServoPosition(500, 1);
 13767  000C38  0E01               	movlw	1
 13768  000C3A  0100               	movlb	0	; () banked
 13769  000C3C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13770  000C3E  0EF4               	movlw	244
 13771  000C40  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13772  000C42  0E00               	movlw	0
 13773  000C44  0100               	movlb	0	; () banked
 13774  000C46  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13775  000C48  0E01               	movlw	1
 13776  000C4A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13777  000C4C  ECB4  F026         	call	_updateServoPosition	;wreg free
 13778                           
 13779                           ;Test.c: 279: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13780  000C50  0E00               	movlw	0
 13781  000C52  0100               	movlb	0	; () banked
 13782  000C54  6FB0               	movwf	actuatorTest@i_1749& (0+255),b
 13783  000C56                     l8554:
 13784                           
 13785                           ; BSR set to: 0
 13786  000C56  0E63               	movlw	99
 13787  000C58  0100               	movlb	0	; () banked
 13788  000C5A  65B0               	cpfsgt	actuatorTest@i_1749& (0+255),b
 13789  000C5C  D001               	goto	l8558
 13790  000C5E  D00C               	goto	l8562
 13791  000C60                     l8558:
 13792                           
 13793                           ; BSR set to: 0
 13794  000C60  0E68               	movlw	104
 13795  000C62  0100               	movlb	0	; () banked
 13796  000C64  6FAB               	movwf	??_actuatorTest& (0+255),b
 13797  000C66  0EE4               	movlw	228
 13798  000C68                     u10847:
 13799  000C68  2EE8               	decfsz	wreg,f,c
 13800  000C6A  D7FE               	bra	u10847
 13801  000C6C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13802  000C6E  D7FC               	bra	u10847
 13803  000C70  F000               	nop	
 13804  000C72  0100               	movlb	0	; () banked
 13805  000C74  2BB0               	incf	actuatorTest@i_1749& (0+255),f,b
 13806  000C76  D7EF               	goto	l8554
 13807  000C78                     l8562:
 13808                           
 13809                           ; BSR set to: 0
 13810  000C78  0E00               	movlw	0
 13811  000C7A  0100               	movlb	0	; () banked
 13812  000C7C  6FB1               	movwf	actuatorTest@i_1750& (0+255),b
 13813  000C7E                     l8564:
 13814                           
 13815                           ; BSR set to: 0
 13816  000C7E  0E63               	movlw	99
 13817  000C80  0100               	movlb	0	; () banked
 13818  000C82  65B1               	cpfsgt	actuatorTest@i_1750& (0+255),b
 13819  000C84  D001               	goto	l8568
 13820  000C86  D00C               	goto	l8572
 13821  000C88                     l8568:
 13822                           
 13823                           ; BSR set to: 0
 13824  000C88  0E68               	movlw	104
 13825  000C8A  0100               	movlb	0	; () banked
 13826  000C8C  6FAB               	movwf	??_actuatorTest& (0+255),b
 13827  000C8E  0EE4               	movlw	228
 13828  000C90                     u10857:
 13829  000C90  2EE8               	decfsz	wreg,f,c
 13830  000C92  D7FE               	bra	u10857
 13831  000C94  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13832  000C96  D7FC               	bra	u10857
 13833  000C98  F000               	nop	
 13834  000C9A  0100               	movlb	0	; () banked
 13835  000C9C  2BB1               	incf	actuatorTest@i_1750& (0+255),f,b
 13836  000C9E  D7EF               	goto	l8564
 13837  000CA0                     l8572:
 13838                           
 13839                           ; BSR set to: 0
 13840                           ;Test.c: 281: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13841  000CA0  0E80               	movlw	128
 13842  000CA2  ECC9  F02D         	call	_lcdInst
 13843  000CA6  0EC0               	movlw	192
 13844  000CA8  ECC9  F02D         	call	_lcdInst
 13845                           
 13846                           ;Test.c: 282: printf("LEFT -- 2s      ");
 13847  000CAC  0E86               	movlw	low STR_100
 13848  000CAE  0100               	movlb	0	; () banked
 13849  000CB0  6F8E               	movwf	printf@f& (0+255),b
 13850  000CB2  0EFB               	movlw	high STR_100
 13851  000CB4  0100               	movlb	0	; () banked
 13852  000CB6  6F8F               	movwf	(printf@f+1)& (0+255),b
 13853  000CB8  EC8D  F00D         	call	_printf	;wreg free
 13854                           
 13855                           ;Test.c: 283: updateServoPosition(2400, 1);
 13856  000CBC  0E09               	movlw	9
 13857  000CBE  0100               	movlb	0	; () banked
 13858  000CC0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13859  000CC2  0E60               	movlw	96
 13860  000CC4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13861  000CC6  0E00               	movlw	0
 13862  000CC8  0100               	movlb	0	; () banked
 13863  000CCA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13864  000CCC  0E01               	movlw	1
 13865  000CCE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13866  000CD0  ECB4  F026         	call	_updateServoPosition	;wreg free
 13867                           
 13868                           ;Test.c: 284: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13869  000CD4  0E00               	movlw	0
 13870  000CD6  0100               	movlb	0	; () banked
 13871  000CD8  6FB2               	movwf	actuatorTest@i_1752& (0+255),b
 13872  000CDA                     l8580:
 13873                           
 13874                           ; BSR set to: 0
 13875  000CDA  0E63               	movlw	99
 13876  000CDC  0100               	movlb	0	; () banked
 13877  000CDE  65B2               	cpfsgt	actuatorTest@i_1752& (0+255),b
 13878  000CE0  D001               	goto	l8584
 13879  000CE2  D00C               	goto	l8588
 13880  000CE4                     l8584:
 13881                           
 13882                           ; BSR set to: 0
 13883  000CE4  0E68               	movlw	104
 13884  000CE6  0100               	movlb	0	; () banked
 13885  000CE8  6FAB               	movwf	??_actuatorTest& (0+255),b
 13886  000CEA  0EE4               	movlw	228
 13887  000CEC                     u10867:
 13888  000CEC  2EE8               	decfsz	wreg,f,c
 13889  000CEE  D7FE               	bra	u10867
 13890  000CF0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13891  000CF2  D7FC               	bra	u10867
 13892  000CF4  F000               	nop	
 13893  000CF6  0100               	movlb	0	; () banked
 13894  000CF8  2BB2               	incf	actuatorTest@i_1752& (0+255),f,b
 13895  000CFA  D7EF               	goto	l8580
 13896  000CFC                     l8588:
 13897                           
 13898                           ; BSR set to: 0
 13899  000CFC  0E00               	movlw	0
 13900  000CFE  0100               	movlb	0	; () banked
 13901  000D00  6FB3               	movwf	actuatorTest@i_1753& (0+255),b
 13902  000D02                     l8590:
 13903                           
 13904                           ; BSR set to: 0
 13905  000D02  0E63               	movlw	99
 13906  000D04  0100               	movlb	0	; () banked
 13907  000D06  65B3               	cpfsgt	actuatorTest@i_1753& (0+255),b
 13908  000D08  D001               	goto	l8594
 13909  000D0A  D00C               	goto	l8598
 13910  000D0C                     l8594:
 13911                           
 13912                           ; BSR set to: 0
 13913  000D0C  0E68               	movlw	104
 13914  000D0E  0100               	movlb	0	; () banked
 13915  000D10  6FAB               	movwf	??_actuatorTest& (0+255),b
 13916  000D12  0EE4               	movlw	228
 13917  000D14                     u10877:
 13918  000D14  2EE8               	decfsz	wreg,f,c
 13919  000D16  D7FE               	bra	u10877
 13920  000D18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13921  000D1A  D7FC               	bra	u10877
 13922  000D1C  F000               	nop	
 13923  000D1E  0100               	movlb	0	; () banked
 13924  000D20  2BB3               	incf	actuatorTest@i_1753& (0+255),f,b
 13925  000D22  D7EF               	goto	l8590
 13926  000D24                     l8598:
 13927                           
 13928                           ; BSR set to: 0
 13929                           ;Test.c: 286: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13930  000D24  0E80               	movlw	128
 13931  000D26  ECC9  F02D         	call	_lcdInst
 13932  000D2A  0EC0               	movlw	192
 13933  000D2C  ECC9  F02D         	call	_lcdInst
 13934                           
 13935                           ;Test.c: 287: printf("MID-LEFT -- 2s  ");
 13936  000D30  0E0E               	movlw	low STR_101
 13937  000D32  0100               	movlb	0	; () banked
 13938  000D34  6F8E               	movwf	printf@f& (0+255),b
 13939  000D36  0EFC               	movlw	high STR_101
 13940  000D38  0100               	movlb	0	; () banked
 13941  000D3A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13942  000D3C  EC8D  F00D         	call	_printf	;wreg free
 13943                           
 13944                           ;Test.c: 288: updateServoPosition(1670, 1);
 13945  000D40  0E06               	movlw	6
 13946  000D42  0100               	movlb	0	; () banked
 13947  000D44  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13948  000D46  0E86               	movlw	134
 13949  000D48  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13950  000D4A  0E00               	movlw	0
 13951  000D4C  0100               	movlb	0	; () banked
 13952  000D4E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13953  000D50  0E01               	movlw	1
 13954  000D52  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13955  000D54  ECB4  F026         	call	_updateServoPosition	;wreg free
 13956                           
 13957                           ;Test.c: 289: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13958  000D58  0E00               	movlw	0
 13959  000D5A  0100               	movlb	0	; () banked
 13960  000D5C  6FB4               	movwf	actuatorTest@i_1755& (0+255),b
 13961  000D5E                     l8606:
 13962                           
 13963                           ; BSR set to: 0
 13964  000D5E  0E63               	movlw	99
 13965  000D60  0100               	movlb	0	; () banked
 13966  000D62  65B4               	cpfsgt	actuatorTest@i_1755& (0+255),b
 13967  000D64  D001               	goto	l8610
 13968  000D66  D00C               	goto	l8614
 13969  000D68                     l8610:
 13970                           
 13971                           ; BSR set to: 0
 13972  000D68  0E68               	movlw	104
 13973  000D6A  0100               	movlb	0	; () banked
 13974  000D6C  6FAB               	movwf	??_actuatorTest& (0+255),b
 13975  000D6E  0EE4               	movlw	228
 13976  000D70                     u10887:
 13977  000D70  2EE8               	decfsz	wreg,f,c
 13978  000D72  D7FE               	bra	u10887
 13979  000D74  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13980  000D76  D7FC               	bra	u10887
 13981  000D78  F000               	nop	
 13982  000D7A  0100               	movlb	0	; () banked
 13983  000D7C  2BB4               	incf	actuatorTest@i_1755& (0+255),f,b
 13984  000D7E  D7EF               	goto	l8606
 13985  000D80                     l8614:
 13986                           
 13987                           ; BSR set to: 0
 13988  000D80  0E00               	movlw	0
 13989  000D82  0100               	movlb	0	; () banked
 13990  000D84  6FB5               	movwf	actuatorTest@i_1756& (0+255),b
 13991  000D86                     l8616:
 13992                           
 13993                           ; BSR set to: 0
 13994  000D86  0E63               	movlw	99
 13995  000D88  0100               	movlb	0	; () banked
 13996  000D8A  65B5               	cpfsgt	actuatorTest@i_1756& (0+255),b
 13997  000D8C  D001               	goto	l8620
 13998  000D8E  D00C               	goto	l8624
 13999  000D90                     l8620:
 14000                           
 14001                           ; BSR set to: 0
 14002  000D90  0E68               	movlw	104
 14003  000D92  0100               	movlb	0	; () banked
 14004  000D94  6FAB               	movwf	??_actuatorTest& (0+255),b
 14005  000D96  0EE4               	movlw	228
 14006  000D98                     u10897:
 14007  000D98  2EE8               	decfsz	wreg,f,c
 14008  000D9A  D7FE               	bra	u10897
 14009  000D9C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14010  000D9E  D7FC               	bra	u10897
 14011  000DA0  F000               	nop	
 14012  000DA2  0100               	movlb	0	; () banked
 14013  000DA4  2BB5               	incf	actuatorTest@i_1756& (0+255),f,b
 14014  000DA6  D7EF               	goto	l8616
 14015  000DA8                     l8624:
 14016                           
 14017                           ; BSR set to: 0
 14018                           ;Test.c: 291: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14019  000DA8  0E80               	movlw	128
 14020  000DAA  ECC9  F02D         	call	_lcdInst
 14021  000DAE  0EC0               	movlw	192
 14022  000DB0  ECC9  F02D         	call	_lcdInst
 14023                           
 14024                           ;Test.c: 292: printf("MID-RIGHT -- 2s ");
 14025  000DB4  0E1F               	movlw	low STR_102
 14026  000DB6  0100               	movlb	0	; () banked
 14027  000DB8  6F8E               	movwf	printf@f& (0+255),b
 14028  000DBA  0EFC               	movlw	high STR_102
 14029  000DBC  0100               	movlb	0	; () banked
 14030  000DBE  6F8F               	movwf	(printf@f+1)& (0+255),b
 14031  000DC0  EC8D  F00D         	call	_printf	;wreg free
 14032                           
 14033                           ;Test.c: 293: updateServoPosition(850, 1);
 14034  000DC4  0E03               	movlw	3
 14035  000DC6  0100               	movlb	0	; () banked
 14036  000DC8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14037  000DCA  0E52               	movlw	82
 14038  000DCC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14039  000DCE  0E00               	movlw	0
 14040  000DD0  0100               	movlb	0	; () banked
 14041  000DD2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14042  000DD4  0E01               	movlw	1
 14043  000DD6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14044  000DD8  ECB4  F026         	call	_updateServoPosition	;wreg free
 14045                           
 14046                           ;Test.c: 294: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14047  000DDC  0E00               	movlw	0
 14048  000DDE  0100               	movlb	0	; () banked
 14049  000DE0  6FB6               	movwf	actuatorTest@i_1758& (0+255),b
 14050  000DE2                     l8632:
 14051                           
 14052                           ; BSR set to: 0
 14053  000DE2  0E63               	movlw	99
 14054  000DE4  0100               	movlb	0	; () banked
 14055  000DE6  65B6               	cpfsgt	actuatorTest@i_1758& (0+255),b
 14056  000DE8  D001               	goto	l8636
 14057  000DEA  D00C               	goto	l8640
 14058  000DEC                     l8636:
 14059                           
 14060                           ; BSR set to: 0
 14061  000DEC  0E68               	movlw	104
 14062  000DEE  0100               	movlb	0	; () banked
 14063  000DF0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14064  000DF2  0EE4               	movlw	228
 14065  000DF4                     u10907:
 14066  000DF4  2EE8               	decfsz	wreg,f,c
 14067  000DF6  D7FE               	bra	u10907
 14068  000DF8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14069  000DFA  D7FC               	bra	u10907
 14070  000DFC  F000               	nop	
 14071  000DFE  0100               	movlb	0	; () banked
 14072  000E00  2BB6               	incf	actuatorTest@i_1758& (0+255),f,b
 14073  000E02  D7EF               	goto	l8632
 14074  000E04                     l8640:
 14075                           
 14076                           ; BSR set to: 0
 14077  000E04  0E00               	movlw	0
 14078  000E06  0100               	movlb	0	; () banked
 14079  000E08  6FB7               	movwf	actuatorTest@i_1759& (0+255),b
 14080  000E0A                     l8642:
 14081                           
 14082                           ; BSR set to: 0
 14083  000E0A  0E63               	movlw	99
 14084  000E0C  0100               	movlb	0	; () banked
 14085  000E0E  65B7               	cpfsgt	actuatorTest@i_1759& (0+255),b
 14086  000E10  D001               	goto	l8646
 14087  000E12  D00C               	goto	l8650
 14088  000E14                     l8646:
 14089                           
 14090                           ; BSR set to: 0
 14091  000E14  0E68               	movlw	104
 14092  000E16  0100               	movlb	0	; () banked
 14093  000E18  6FAB               	movwf	??_actuatorTest& (0+255),b
 14094  000E1A  0EE4               	movlw	228
 14095  000E1C                     u10917:
 14096  000E1C  2EE8               	decfsz	wreg,f,c
 14097  000E1E  D7FE               	bra	u10917
 14098  000E20  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14099  000E22  D7FC               	bra	u10917
 14100  000E24  F000               	nop	
 14101  000E26  0100               	movlb	0	; () banked
 14102  000E28  2BB7               	incf	actuatorTest@i_1759& (0+255),f,b
 14103  000E2A  D7EF               	goto	l8642
 14104  000E2C                     l8650:
 14105                           
 14106                           ; BSR set to: 0
 14107                           ;Test.c: 296: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14108  000E2C  0E80               	movlw	128
 14109  000E2E  ECC9  F02D         	call	_lcdInst
 14110  000E32  0EC0               	movlw	192
 14111  000E34  ECC9  F02D         	call	_lcdInst
 14112                           
 14113                           ;Test.c: 297: printf("MID -- 2s       ");
 14114  000E38  0E64               	movlw	low STR_103
 14115  000E3A  0100               	movlb	0	; () banked
 14116  000E3C  6F8E               	movwf	printf@f& (0+255),b
 14117  000E3E  0EFB               	movlw	high STR_103
 14118  000E40  0100               	movlb	0	; () banked
 14119  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
 14120  000E44  EC8D  F00D         	call	_printf	;wreg free
 14121                           
 14122                           ;Test.c: 298: updateServoPosition(1200, 1);
 14123  000E48  0E04               	movlw	4
 14124  000E4A  0100               	movlb	0	; () banked
 14125  000E4C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14126  000E4E  0EB0               	movlw	176
 14127  000E50  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14128  000E52  0E00               	movlw	0
 14129  000E54  0100               	movlb	0	; () banked
 14130  000E56  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14131  000E58  0E01               	movlw	1
 14132  000E5A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14133  000E5C  ECB4  F026         	call	_updateServoPosition	;wreg free
 14134                           
 14135                           ;Test.c: 299: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14136  000E60  0E00               	movlw	0
 14137  000E62  0100               	movlb	0	; () banked
 14138  000E64  6FB8               	movwf	actuatorTest@i_1761& (0+255),b
 14139  000E66                     l8658:
 14140                           
 14141                           ; BSR set to: 0
 14142  000E66  0E63               	movlw	99
 14143  000E68  0100               	movlb	0	; () banked
 14144  000E6A  65B8               	cpfsgt	actuatorTest@i_1761& (0+255),b
 14145  000E6C  D001               	goto	l8662
 14146  000E6E  D00C               	goto	l8666
 14147  000E70                     l8662:
 14148                           
 14149                           ; BSR set to: 0
 14150  000E70  0E68               	movlw	104
 14151  000E72  0100               	movlb	0	; () banked
 14152  000E74  6FAB               	movwf	??_actuatorTest& (0+255),b
 14153  000E76  0EE4               	movlw	228
 14154  000E78                     u10927:
 14155  000E78  2EE8               	decfsz	wreg,f,c
 14156  000E7A  D7FE               	bra	u10927
 14157  000E7C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14158  000E7E  D7FC               	bra	u10927
 14159  000E80  F000               	nop	
 14160  000E82  0100               	movlb	0	; () banked
 14161  000E84  2BB8               	incf	actuatorTest@i_1761& (0+255),f,b
 14162  000E86  D7EF               	goto	l8658
 14163  000E88                     l8666:
 14164                           
 14165                           ; BSR set to: 0
 14166  000E88  0E00               	movlw	0
 14167  000E8A  0100               	movlb	0	; () banked
 14168  000E8C  6FB9               	movwf	actuatorTest@i_1762& (0+255),b
 14169  000E8E                     l8668:
 14170                           
 14171                           ; BSR set to: 0
 14172  000E8E  0E63               	movlw	99
 14173  000E90  0100               	movlb	0	; () banked
 14174  000E92  65B9               	cpfsgt	actuatorTest@i_1762& (0+255),b
 14175  000E94  D001               	goto	l8672
 14176  000E96  D00C               	goto	l1339
 14177  000E98                     l8672:
 14178                           
 14179                           ; BSR set to: 0
 14180  000E98  0E68               	movlw	104
 14181  000E9A  0100               	movlb	0	; () banked
 14182  000E9C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14183  000E9E  0EE4               	movlw	228
 14184  000EA0                     u10937:
 14185  000EA0  2EE8               	decfsz	wreg,f,c
 14186  000EA2  D7FE               	bra	u10937
 14187  000EA4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14188  000EA6  D7FC               	bra	u10937
 14189  000EA8  F000               	nop	
 14190  000EAA  0100               	movlb	0	; () banked
 14191  000EAC  2BB9               	incf	actuatorTest@i_1762& (0+255),f,b
 14192  000EAE  D7EF               	goto	l8668
 14193  000EB0                     l1339:
 14194                           
 14195                           ; BSR set to: 0
 14196                           ;Test.c: 300: TMR1ON = 0;
 14197  000EB0  90CD               	bcf	4045,0,c	;volatile
 14198                           
 14199                           ; BSR set to: 0
 14200                           ;Test.c: 307: printf("TST: TILT SERVO");
 14201  000EB2  0E2D               	movlw	low STR_104
 14202  000EB4  0100               	movlb	0	; () banked
 14203  000EB6  6F8E               	movwf	printf@f& (0+255),b
 14204  000EB8  0EFE               	movlw	high STR_104
 14205  000EBA  0100               	movlb	0	; () banked
 14206  000EBC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14207  000EBE  EC8D  F00D         	call	_printf	;wreg free
 14208                           
 14209                           ;Test.c: 308: lcdInst(0b11000000);;
 14210  000EC2  0EC0               	movlw	192
 14211  000EC4  ECC9  F02D         	call	_lcdInst
 14212                           
 14213                           ;Test.c: 309: printf("LEVEL -- 2s     ");
 14214  000EC8  0E97               	movlw	low STR_105
 14215  000ECA  0100               	movlb	0	; () banked
 14216  000ECC  6F8E               	movwf	printf@f& (0+255),b
 14217  000ECE  0EFB               	movlw	high STR_105
 14218  000ED0  0100               	movlb	0	; () banked
 14219  000ED2  6F8F               	movwf	(printf@f+1)& (0+255),b
 14220  000ED4  EC8D  F00D         	call	_printf	;wreg free
 14221                           
 14222                           ;Test.c: 310: updateServoPosition(1050, 3);
 14223  000ED8  0E04               	movlw	4
 14224  000EDA  0100               	movlb	0	; () banked
 14225  000EDC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14226  000EDE  0E1A               	movlw	26
 14227  000EE0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14228  000EE2  0E00               	movlw	0
 14229  000EE4  0100               	movlb	0	; () banked
 14230  000EE6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14231  000EE8  0E03               	movlw	3
 14232  000EEA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14233  000EEC  ECB4  F026         	call	_updateServoPosition	;wreg free
 14234                           
 14235                           ;Test.c: 311: TMR3ON = 1;
 14236  000EF0  80B1               	bsf	4017,0,c	;volatile
 14237                           
 14238                           ;Test.c: 312: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14239  000EF2  0E00               	movlw	0
 14240  000EF4  0100               	movlb	0	; () banked
 14241  000EF6  6FBA               	movwf	actuatorTest@i_1765& (0+255),b
 14242  000EF8                     l8686:
 14243                           
 14244                           ; BSR set to: 0
 14245  000EF8  0E63               	movlw	99
 14246  000EFA  0100               	movlb	0	; () banked
 14247  000EFC  65BA               	cpfsgt	actuatorTest@i_1765& (0+255),b
 14248  000EFE  D001               	goto	l8690
 14249  000F00  D00C               	goto	l8694
 14250  000F02                     l8690:
 14251                           
 14252                           ; BSR set to: 0
 14253  000F02  0E68               	movlw	104
 14254  000F04  0100               	movlb	0	; () banked
 14255  000F06  6FAB               	movwf	??_actuatorTest& (0+255),b
 14256  000F08  0EE4               	movlw	228
 14257  000F0A                     u10947:
 14258  000F0A  2EE8               	decfsz	wreg,f,c
 14259  000F0C  D7FE               	bra	u10947
 14260  000F0E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14261  000F10  D7FC               	bra	u10947
 14262  000F12  F000               	nop	
 14263  000F14  0100               	movlb	0	; () banked
 14264  000F16  2BBA               	incf	actuatorTest@i_1765& (0+255),f,b
 14265  000F18  D7EF               	goto	l8686
 14266  000F1A                     l8694:
 14267                           
 14268                           ; BSR set to: 0
 14269  000F1A  0E00               	movlw	0
 14270  000F1C  0100               	movlb	0	; () banked
 14271  000F1E  6FBB               	movwf	actuatorTest@i_1766& (0+255),b
 14272  000F20                     l8696:
 14273                           
 14274                           ; BSR set to: 0
 14275  000F20  0E63               	movlw	99
 14276  000F22  0100               	movlb	0	; () banked
 14277  000F24  65BB               	cpfsgt	actuatorTest@i_1766& (0+255),b
 14278  000F26  D001               	goto	l8700
 14279  000F28  D00C               	goto	l8704
 14280  000F2A                     l8700:
 14281                           
 14282                           ; BSR set to: 0
 14283  000F2A  0E68               	movlw	104
 14284  000F2C  0100               	movlb	0	; () banked
 14285  000F2E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14286  000F30  0EE4               	movlw	228
 14287  000F32                     u10957:
 14288  000F32  2EE8               	decfsz	wreg,f,c
 14289  000F34  D7FE               	bra	u10957
 14290  000F36  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14291  000F38  D7FC               	bra	u10957
 14292  000F3A  F000               	nop	
 14293  000F3C  0100               	movlb	0	; () banked
 14294  000F3E  2BBB               	incf	actuatorTest@i_1766& (0+255),f,b
 14295  000F40  D7EF               	goto	l8696
 14296  000F42                     l8704:
 14297                           
 14298                           ; BSR set to: 0
 14299                           ;Test.c: 314: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14300  000F42  0E80               	movlw	128
 14301  000F44  ECC9  F02D         	call	_lcdInst
 14302  000F48  0EC0               	movlw	192
 14303  000F4A  ECC9  F02D         	call	_lcdInst
 14304                           
 14305                           ;Test.c: 315: printf("DROP -- 2s      ");
 14306  000F4E  0E75               	movlw	low STR_106
 14307  000F50  0100               	movlb	0	; () banked
 14308  000F52  6F8E               	movwf	printf@f& (0+255),b
 14309  000F54  0EFB               	movlw	high STR_106
 14310  000F56  0100               	movlb	0	; () banked
 14311  000F58  6F8F               	movwf	(printf@f+1)& (0+255),b
 14312  000F5A  EC8D  F00D         	call	_printf	;wreg free
 14313                           
 14314                           ;Test.c: 316: updateServoPosition(1260, 3);
 14315  000F5E  0E04               	movlw	4
 14316  000F60  0100               	movlb	0	; () banked
 14317  000F62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14318  000F64  0EEC               	movlw	236
 14319  000F66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14320  000F68  0E00               	movlw	0
 14321  000F6A  0100               	movlb	0	; () banked
 14322  000F6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14323  000F6E  0E03               	movlw	3
 14324  000F70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14325  000F72  ECB4  F026         	call	_updateServoPosition	;wreg free
 14326                           
 14327                           ;Test.c: 317: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14328  000F76  0E00               	movlw	0
 14329  000F78  0100               	movlb	0	; () banked
 14330  000F7A  6FBC               	movwf	actuatorTest@i_1768& (0+255),b
 14331  000F7C                     l8712:
 14332                           
 14333                           ; BSR set to: 0
 14334  000F7C  0E63               	movlw	99
 14335  000F7E  0100               	movlb	0	; () banked
 14336  000F80  65BC               	cpfsgt	actuatorTest@i_1768& (0+255),b
 14337  000F82  D001               	goto	l8716
 14338  000F84  D00C               	goto	l8720
 14339  000F86                     l8716:
 14340                           
 14341                           ; BSR set to: 0
 14342  000F86  0E68               	movlw	104
 14343  000F88  0100               	movlb	0	; () banked
 14344  000F8A  6FAB               	movwf	??_actuatorTest& (0+255),b
 14345  000F8C  0EE4               	movlw	228
 14346  000F8E                     u10967:
 14347  000F8E  2EE8               	decfsz	wreg,f,c
 14348  000F90  D7FE               	bra	u10967
 14349  000F92  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14350  000F94  D7FC               	bra	u10967
 14351  000F96  F000               	nop	
 14352  000F98  0100               	movlb	0	; () banked
 14353  000F9A  2BBC               	incf	actuatorTest@i_1768& (0+255),f,b
 14354  000F9C  D7EF               	goto	l8712
 14355  000F9E                     l8720:
 14356                           
 14357                           ; BSR set to: 0
 14358  000F9E  0E00               	movlw	0
 14359  000FA0  0100               	movlb	0	; () banked
 14360  000FA2  6FBD               	movwf	actuatorTest@i_1769& (0+255),b
 14361  000FA4                     l8722:
 14362                           
 14363                           ; BSR set to: 0
 14364  000FA4  0E63               	movlw	99
 14365  000FA6  0100               	movlb	0	; () banked
 14366  000FA8  65BD               	cpfsgt	actuatorTest@i_1769& (0+255),b
 14367  000FAA  D001               	goto	l8726
 14368  000FAC  D00C               	goto	l8730
 14369  000FAE                     l8726:
 14370                           
 14371                           ; BSR set to: 0
 14372  000FAE  0E68               	movlw	104
 14373  000FB0  0100               	movlb	0	; () banked
 14374  000FB2  6FAB               	movwf	??_actuatorTest& (0+255),b
 14375  000FB4  0EE4               	movlw	228
 14376  000FB6                     u10977:
 14377  000FB6  2EE8               	decfsz	wreg,f,c
 14378  000FB8  D7FE               	bra	u10977
 14379  000FBA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14380  000FBC  D7FC               	bra	u10977
 14381  000FBE  F000               	nop	
 14382  000FC0  0100               	movlb	0	; () banked
 14383  000FC2  2BBD               	incf	actuatorTest@i_1769& (0+255),f,b
 14384  000FC4  D7EF               	goto	l8722
 14385  000FC6                     l8730:
 14386                           
 14387                           ; BSR set to: 0
 14388                           ;Test.c: 319: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14389  000FC6  0E80               	movlw	128
 14390  000FC8  ECC9  F02D         	call	_lcdInst
 14391  000FCC  0EC0               	movlw	192
 14392  000FCE  ECC9  F02D         	call	_lcdInst
 14393                           
 14394                           ;Test.c: 320: printf("LEVEL -- 2s     ");
 14395  000FD2  0E97               	movlw	low STR_105
 14396  000FD4  0100               	movlb	0	; () banked
 14397  000FD6  6F8E               	movwf	printf@f& (0+255),b
 14398  000FD8  0EFB               	movlw	high STR_105
 14399  000FDA  0100               	movlb	0	; () banked
 14400  000FDC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14401  000FDE  EC8D  F00D         	call	_printf	;wreg free
 14402                           
 14403                           ;Test.c: 321: updateServoPosition(1050, 3);
 14404  000FE2  0E04               	movlw	4
 14405  000FE4  0100               	movlb	0	; () banked
 14406  000FE6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14407  000FE8  0E1A               	movlw	26
 14408  000FEA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14409  000FEC  0E00               	movlw	0
 14410  000FEE  0100               	movlb	0	; () banked
 14411  000FF0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14412  000FF2  0E03               	movlw	3
 14413  000FF4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14414  000FF6  ECB4  F026         	call	_updateServoPosition	;wreg free
 14415                           
 14416                           ;Test.c: 322: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14417  000FFA  0E00               	movlw	0
 14418  000FFC  0100               	movlb	0	; () banked
 14419  000FFE  6FBE               	movwf	actuatorTest@i_1771& (0+255),b
 14420  001000                     l8738:
 14421                           
 14422                           ; BSR set to: 0
 14423  001000  0E63               	movlw	99
 14424  001002  0100               	movlb	0	; () banked
 14425  001004  65BE               	cpfsgt	actuatorTest@i_1771& (0+255),b
 14426  001006  D001               	goto	l8742
 14427  001008  D00C               	goto	l8746
 14428  00100A                     l8742:
 14429                           
 14430                           ; BSR set to: 0
 14431  00100A  0E68               	movlw	104
 14432  00100C  0100               	movlb	0	; () banked
 14433  00100E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14434  001010  0EE4               	movlw	228
 14435  001012                     u10987:
 14436  001012  2EE8               	decfsz	wreg,f,c
 14437  001014  D7FE               	bra	u10987
 14438  001016  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14439  001018  D7FC               	bra	u10987
 14440  00101A  F000               	nop	
 14441  00101C  0100               	movlb	0	; () banked
 14442  00101E  2BBE               	incf	actuatorTest@i_1771& (0+255),f,b
 14443  001020  D7EF               	goto	l8738
 14444  001022                     l8746:
 14445                           
 14446                           ; BSR set to: 0
 14447  001022  0E00               	movlw	0
 14448  001024  0100               	movlb	0	; () banked
 14449  001026  6FBF               	movwf	actuatorTest@i_1772& (0+255),b
 14450  001028                     l8748:
 14451                           
 14452                           ; BSR set to: 0
 14453  001028  0E63               	movlw	99
 14454  00102A  0100               	movlb	0	; () banked
 14455  00102C  65BF               	cpfsgt	actuatorTest@i_1772& (0+255),b
 14456  00102E  D001               	goto	l8752
 14457  001030  D00C               	goto	l1351
 14458  001032                     l8752:
 14459                           
 14460                           ; BSR set to: 0
 14461  001032  0E68               	movlw	104
 14462  001034  0100               	movlb	0	; () banked
 14463  001036  6FAB               	movwf	??_actuatorTest& (0+255),b
 14464  001038  0EE4               	movlw	228
 14465  00103A                     u10997:
 14466  00103A  2EE8               	decfsz	wreg,f,c
 14467  00103C  D7FE               	bra	u10997
 14468  00103E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14469  001040  D7FC               	bra	u10997
 14470  001042  F000               	nop	
 14471  001044  0100               	movlb	0	; () banked
 14472  001046  2BBF               	incf	actuatorTest@i_1772& (0+255),f,b
 14473  001048  D7EF               	goto	l8748
 14474  00104A                     l1351:
 14475                           
 14476                           ; BSR set to: 0
 14477                           ;Test.c: 323: TMR3ON = 0;
 14478  00104A  90B1               	bcf	4017,0,c	;volatile
 14479                           
 14480                           ;Test.c: 324: (INTCONbits.GIE = 0);
 14481  00104C  9EF2               	bcf	intcon,7,c	;volatile
 14482                           
 14483                           ; BSR set to: 0
 14484                           ;Test.c: 329: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14485  00104E  0E01               	movlw	1
 14486  001050  ECC9  F02D         	call	_lcdInst
 14487  001054  0E68               	movlw	104
 14488  001056  0100               	movlb	0	; () banked
 14489  001058  6FAB               	movwf	??_actuatorTest& (0+255),b
 14490  00105A  0EE4               	movlw	228
 14491  00105C                     u11007:
 14492  00105C  2EE8               	decfsz	wreg,f,c
 14493  00105E  D7FE               	bra	u11007
 14494  001060  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14495  001062  D7FC               	bra	u11007
 14496  001064  F000               	nop	
 14497  001066  0E80               	movlw	128
 14498  001068  ECC9  F02D         	call	_lcdInst
 14499                           
 14500                           ;Test.c: 330: printf("TST: CAM SERVO");
 14501  00106C  0EB8               	movlw	low STR_108
 14502  00106E  0100               	movlb	0	; () banked
 14503  001070  6F8E               	movwf	printf@f& (0+255),b
 14504  001072  0EFE               	movlw	high STR_108
 14505  001074  0100               	movlb	0	; () banked
 14506  001076  6F8F               	movwf	(printf@f+1)& (0+255),b
 14507  001078  EC8D  F00D         	call	_printf	;wreg free
 14508                           
 14509                           ;Test.c: 331: lcdInst(0b11000000);;
 14510  00107C  0EC0               	movlw	192
 14511  00107E  ECC9  F02D         	call	_lcdInst
 14512                           
 14513                           ;Test.c: 332: printf("CAM UP  |RC0=1");
 14514  001082  0E9A               	movlw	low STR_109
 14515  001084  0100               	movlb	0	; () banked
 14516  001086  6F8E               	movwf	printf@f& (0+255),b
 14517  001088  0EFE               	movlw	high STR_109
 14518  00108A  0100               	movlb	0	; () banked
 14519  00108C  6F8F               	movwf	(printf@f+1)& (0+255),b
 14520  00108E  EC8D  F00D         	call	_printf	;wreg free
 14521                           
 14522                           ;Test.c: 333: LATCbits.LATC0 = 1;
 14523  001092  808B               	bsf	3979,0,c	;volatile
 14524                           
 14525                           ;Test.c: 334: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14526  001094  0E00               	movlw	0
 14527  001096  0100               	movlb	0	; () banked
 14528  001098  6FC0               	movwf	actuatorTest@i_1775& (0+255),b
 14529  00109A                     l8772:
 14530                           
 14531                           ; BSR set to: 0
 14532  00109A  0E63               	movlw	99
 14533  00109C  0100               	movlb	0	; () banked
 14534  00109E  65C0               	cpfsgt	actuatorTest@i_1775& (0+255),b
 14535  0010A0  D001               	goto	l8776
 14536  0010A2  D00C               	goto	l8780
 14537  0010A4                     l8776:
 14538                           
 14539                           ; BSR set to: 0
 14540  0010A4  0E68               	movlw	104
 14541  0010A6  0100               	movlb	0	; () banked
 14542  0010A8  6FAB               	movwf	??_actuatorTest& (0+255),b
 14543  0010AA  0EE4               	movlw	228
 14544  0010AC                     u11017:
 14545  0010AC  2EE8               	decfsz	wreg,f,c
 14546  0010AE  D7FE               	bra	u11017
 14547  0010B0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14548  0010B2  D7FC               	bra	u11017
 14549  0010B4  F000               	nop	
 14550  0010B6  0100               	movlb	0	; () banked
 14551  0010B8  2BC0               	incf	actuatorTest@i_1775& (0+255),f,b
 14552  0010BA  D7EF               	goto	l8772
 14553  0010BC                     l8780:
 14554                           
 14555                           ; BSR set to: 0
 14556  0010BC  0E00               	movlw	0
 14557  0010BE  0100               	movlb	0	; () banked
 14558  0010C0  6FC1               	movwf	actuatorTest@i_1776& (0+255),b
 14559  0010C2                     l8782:
 14560                           
 14561                           ; BSR set to: 0
 14562  0010C2  0E63               	movlw	99
 14563  0010C4  0100               	movlb	0	; () banked
 14564  0010C6  65C1               	cpfsgt	actuatorTest@i_1776& (0+255),b
 14565  0010C8  D001               	goto	l8786
 14566  0010CA  D00C               	goto	l8790
 14567  0010CC                     l8786:
 14568                           
 14569                           ; BSR set to: 0
 14570  0010CC  0E68               	movlw	104
 14571  0010CE  0100               	movlb	0	; () banked
 14572  0010D0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14573  0010D2  0EE4               	movlw	228
 14574  0010D4                     u11027:
 14575  0010D4  2EE8               	decfsz	wreg,f,c
 14576  0010D6  D7FE               	bra	u11027
 14577  0010D8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14578  0010DA  D7FC               	bra	u11027
 14579  0010DC  F000               	nop	
 14580  0010DE  0100               	movlb	0	; () banked
 14581  0010E0  2BC1               	incf	actuatorTest@i_1776& (0+255),f,b
 14582  0010E2  D7EF               	goto	l8782
 14583  0010E4                     l8790:
 14584                           
 14585                           ; BSR set to: 0
 14586                           ;Test.c: 335: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14587  0010E4  0E80               	movlw	128
 14588  0010E6  ECC9  F02D         	call	_lcdInst
 14589  0010EA  0EC0               	movlw	192
 14590  0010EC  ECC9  F02D         	call	_lcdInst
 14591                           
 14592                           ;Test.c: 336: printf("CAM DWN |RC0=0");
 14593  0010F0  0E8B               	movlw	low STR_110
 14594  0010F2  0100               	movlb	0	; () banked
 14595  0010F4  6F8E               	movwf	printf@f& (0+255),b
 14596  0010F6  0EFE               	movlw	high STR_110
 14597  0010F8  0100               	movlb	0	; () banked
 14598  0010FA  6F8F               	movwf	(printf@f+1)& (0+255),b
 14599  0010FC  EC8D  F00D         	call	_printf	;wreg free
 14600                           
 14601                           ;Test.c: 339: for(i=0;i<10000;i++)
 14602  001100  0E00               	movlw	0
 14603  001102  0100               	movlb	0	; () banked
 14604  001104  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 14605  001106  0E00               	movlw	0
 14606  001108  6FC4               	movwf	actuatorTest@i& (0+255),b
 14607  00110A                     l8796:
 14608                           
 14609                           ; BSR set to: 0
 14610  00110A  0100               	movlb	0	; () banked
 14611  00110C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14612  00110E  D008               	goto	l1356
 14613  001110  0E10               	movlw	16
 14614  001112  0100               	movlb	0	; () banked
 14615  001114  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 14616  001116  0E27               	movlw	39
 14617  001118  0100               	movlb	0	; () banked
 14618  00111A  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 14619  00111C  B0D8               	btfsc	status,0,c
 14620  00111E  D00D               	goto	l8806
 14621  001120                     l1356:
 14622                           
 14623                           ; BSR set to: 0
 14624                           ;Test.c: 340: {
 14625                           ;Test.c: 341: LATCbits.LATC0 = 1;
 14626  001120  808B               	bsf	3979,0,c	;volatile
 14627                           
 14628                           ; BSR set to: 0
 14629                           ;Test.c: 342: _delay((unsigned long)((10)*(32000000/4000000.0)));
 14630  001122  0E1A               	movlw	26
 14631  001124                     u11037:
 14632  001124  2EE8               	decfsz	wreg,f,c
 14633  001126  D7FE               	bra	u11037
 14634  001128  D000               	nop2	
 14635                           
 14636                           ;Test.c: 343: LATCbits.LATC0 = 0;
 14637  00112A  908B               	bcf	3979,0,c	;volatile
 14638                           
 14639                           ;Test.c: 344: _delay((unsigned long)((90)*(32000000/4000000.0)));
 14640  00112C  0EF0               	movlw	240
 14641  00112E                     u11047:
 14642  00112E  2EE8               	decfsz	wreg,f,c
 14643  001130  D7FE               	bra	u11047
 14644  001132  0100               	movlb	0	; () banked
 14645  001134  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 14646  001136  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 14647  001138  D7E8               	goto	l8796
 14648  00113A                     l8806:
 14649                           
 14650                           ; BSR set to: 0
 14651                           ;Test.c: 345: }
 14652                           ;Test.c: 347: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14653  00113A  0E00               	movlw	0
 14654  00113C  0100               	movlb	0	; () banked
 14655  00113E  6FC2               	movwf	actuatorTest@i_1778& (0+255),b
 14656  001140                     l8808:
 14657                           
 14658                           ; BSR set to: 0
 14659  001140  0E63               	movlw	99
 14660  001142  0100               	movlb	0	; () banked
 14661  001144  65C2               	cpfsgt	actuatorTest@i_1778& (0+255),b
 14662  001146  D001               	goto	l8812
 14663  001148  D00C               	goto	l8816
 14664  00114A                     l8812:
 14665                           
 14666                           ; BSR set to: 0
 14667  00114A  0E68               	movlw	104
 14668  00114C  0100               	movlb	0	; () banked
 14669  00114E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14670  001150  0EE4               	movlw	228
 14671  001152                     u11057:
 14672  001152  2EE8               	decfsz	wreg,f,c
 14673  001154  D7FE               	bra	u11057
 14674  001156  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14675  001158  D7FC               	bra	u11057
 14676  00115A  F000               	nop	
 14677  00115C  0100               	movlb	0	; () banked
 14678  00115E  2BC2               	incf	actuatorTest@i_1778& (0+255),f,b
 14679  001160  D7EF               	goto	l8808
 14680  001162                     l8816:
 14681                           
 14682                           ; BSR set to: 0
 14683  001162  0E00               	movlw	0
 14684  001164  0100               	movlb	0	; () banked
 14685  001166  6FC3               	movwf	actuatorTest@i_1779& (0+255),b
 14686  001168                     l8818:
 14687                           
 14688                           ; BSR set to: 0
 14689  001168  0E63               	movlw	99
 14690  00116A  0100               	movlb	0	; () banked
 14691  00116C  65C3               	cpfsgt	actuatorTest@i_1779& (0+255),b
 14692  00116E  D001               	goto	l8822
 14693  001170  D00C               	goto	l8826
 14694  001172                     l8822:
 14695                           
 14696                           ; BSR set to: 0
 14697  001172  0E68               	movlw	104
 14698  001174  0100               	movlb	0	; () banked
 14699  001176  6FAB               	movwf	??_actuatorTest& (0+255),b
 14700  001178  0EE4               	movlw	228
 14701  00117A                     u11067:
 14702  00117A  2EE8               	decfsz	wreg,f,c
 14703  00117C  D7FE               	bra	u11067
 14704  00117E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14705  001180  D7FC               	bra	u11067
 14706  001182  F000               	nop	
 14707  001184  0100               	movlb	0	; () banked
 14708  001186  2BC3               	incf	actuatorTest@i_1779& (0+255),f,b
 14709  001188  D7EF               	goto	l8818
 14710  00118A                     l8826:
 14711                           
 14712                           ; BSR set to: 0
 14713                           ;Test.c: 348: machine_state = Testing_state;
 14714  00118A  0E03               	movlw	3
 14715  00118C  0100               	movlb	0	; () banked
 14716  00118E  6FFC               	movwf	_machine_state& (0+255),b
 14717                           
 14718                           ; BSR set to: 0
 14719  001190  0012               	return		;funcret
 14720  001192                     __end_of_actuatorTest:
 14721                           	opt stack 0
 14722                           tblptru	equ	0xFF8
 14723                           tblptrh	equ	0xFF7
 14724                           tblptrl	equ	0xFF6
 14725                           tablat	equ	0xFF5
 14726                           prodh	equ	0xFF4
 14727                           prodl	equ	0xFF3
 14728                           intcon	equ	0xFF2
 14729                           intcon2	equ	0xFF1
 14730                           intcon3	equ	0xFF0
 14731                           postinc0	equ	0xFEE
 14732                           wreg	equ	0xFE8
 14733                           postdec1	equ	0xFE5
 14734                           fsr1l	equ	0xFE1
 14735                           indf2	equ	0xFDF
 14736                           postinc2	equ	0xFDE
 14737                           postdec2	equ	0xFDD
 14738                           fsr2h	equ	0xFDA
 14739                           fsr2l	equ	0xFD9
 14740                           status	equ	0xFD8
 14741                           
 14742 ;; *************** function _SpeedTest *****************
 14743 ;; Defined at:
 14744 ;;		line 541 in file "Test.c"
 14745 ;; Parameters:    Size  Location     Type
 14746 ;;		None
 14747 ;; Auto vars:     Size  Location     Type
 14748 ;;		None
 14749 ;; Return value:  Size  Location     Type
 14750 ;;                  1    wreg      void 
 14751 ;; Registers used:
 14752 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14753 ;; Tracked objects:
 14754 ;;		On entry : 0/0
 14755 ;;		On exit  : 0/0
 14756 ;;		Unchanged: 0/0
 14757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14760 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14761 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14762 ;;Total ram usage:        1 bytes
 14763 ;; Hardware stack levels used:    1
 14764 ;; Hardware stack levels required when called:   10
 14765 ;; This function calls:
 14766 ;;		_lcdInst
 14767 ;;		_printf
 14768 ;; This function is called by:
 14769 ;;		_Test
 14770 ;; This function uses a non-reentrant model
 14771 ;;
 14772                           
 14773                           	psect	text46
 14774  004CE4                     __ptext46:
 14775                           	opt stack 0
 14776  004CE4                     _SpeedTest:
 14777                           	opt stack 19
 14778                           
 14779                           ;Test.c: 543: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14780                           
 14781                           ; BSR set to: 0
 14782                           ;incstack = 0
 14783  004CE4  0E01               	movlw	1
 14784  004CE6  ECC9  F02D         	call	_lcdInst
 14785  004CEA  0E68               	movlw	104
 14786  004CEC  0100               	movlb	0	; () banked
 14787  004CEE  6FAB               	movwf	??_SpeedTest& (0+255),b
 14788  004CF0  0EE4               	movlw	228
 14789  004CF2                     u11077:
 14790  004CF2  2EE8               	decfsz	wreg,f,c
 14791  004CF4  D7FE               	bra	u11077
 14792  004CF6  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14793  004CF8  D7FC               	bra	u11077
 14794  004CFA  F000               	nop	
 14795  004CFC  0E80               	movlw	128
 14796  004CFE  ECC9  F02D         	call	_lcdInst
 14797                           
 14798                           ;Test.c: 544: printf("S: D WILL RETURN ");
 14799  004D02  0E0A               	movlw	low STR_121
 14800  004D04  0100               	movlb	0	; () banked
 14801  004D06  6F8E               	movwf	printf@f& (0+255),b
 14802  004D08  0EFB               	movlw	high STR_121
 14803  004D0A  0100               	movlb	0	; () banked
 14804  004D0C  6F8F               	movwf	(printf@f+1)& (0+255),b
 14805  004D0E  EC8D  F00D         	call	_printf	;wreg free
 14806                           
 14807                           ;Test.c: 545: lcdInst(0b11000000);;
 14808  004D12  0EC0               	movlw	192
 14809  004D14  ECC9  F02D         	call	_lcdInst
 14810                           
 14811                           ;Test.c: 546: printf("OTHER SETS RA5   ");
 14812  004D18  0EF8               	movlw	low STR_122
 14813  004D1A  0100               	movlb	0	; () banked
 14814  004D1C  6F8E               	movwf	printf@f& (0+255),b
 14815  004D1E  0EFA               	movlw	high STR_122
 14816  004D20  0100               	movlb	0	; () banked
 14817  004D22  6F8F               	movwf	(printf@f+1)& (0+255),b
 14818  004D24  EC8D  F00D         	call	_printf	;wreg free
 14819  004D28                     l1427:
 14820  004D28  A281               	btfss	3969,1,c	;volatile
 14821  004D2A  D7FE               	goto	l1427
 14822                           
 14823                           ;Test.c: 551: }
 14824                           ;Test.c: 552: if(PORTB >> 4 == 0b1111){
 14825  004D2C  3881               	swapf	3969,w,c	;volatile
 14826  004D2E  0B0F               	andlw	15
 14827  004D30  0A0F               	xorlw	15
 14828  004D32  B4D8               	btfsc	status,2,c
 14829  004D34  0012               	return	
 14830  004D36  D014               	goto	l8922
 14831  004D38                     l1434:
 14832                           
 14833                           ;Test.c: 557: LATBbits.LATB2 = 1;
 14834  004D38  848A               	bsf	3978,2,c	;volatile
 14835                           
 14836                           ;Test.c: 558: _delay((unsigned long)((5)*(32000000/4000.0)));
 14837  004D3A  0E34               	movlw	52
 14838  004D3C  0100               	movlb	0	; () banked
 14839  004D3E  6FAB               	movwf	??_SpeedTest& (0+255),b
 14840  004D40  0EF1               	movlw	241
 14841  004D42                     u11087:
 14842  004D42  2EE8               	decfsz	wreg,f,c
 14843  004D44  D7FE               	bra	u11087
 14844  004D46  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14845  004D48  D7FC               	bra	u11087
 14846  004D4A  D000               	nop2	
 14847                           
 14848                           ;Test.c: 559: LATBbits.LATB2 = 0;
 14849  004D4C  948A               	bcf	3978,2,c	;volatile
 14850                           
 14851                           ;Test.c: 560: _delay((unsigned long)((5)*(32000000/4000.0)));
 14852  004D4E  0E34               	movlw	52
 14853  004D50  0100               	movlb	0	; () banked
 14854  004D52  6FAB               	movwf	??_SpeedTest& (0+255),b
 14855  004D54  0EF1               	movlw	241
 14856  004D56                     u11097:
 14857  004D56  2EE8               	decfsz	wreg,f,c
 14858  004D58  D7FE               	bra	u11097
 14859  004D5A  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14860  004D5C  D7FC               	bra	u11097
 14861  004D5E  D000               	nop2	
 14862  004D60                     l8922:
 14863  004D60  B281               	btfsc	3969,1,c	;volatile
 14864  004D62  D7EA               	goto	l1434
 14865                           
 14866                           ;Test.c: 563: }
 14867                           ;Test.c: 564: LATBbits.LATB2 = 0;
 14868  004D64  948A               	bcf	3978,2,c	;volatile
 14869  004D66  D7E0               	goto	l1427
 14870  004D68                     __end_of_SpeedTest:
 14871                           	opt stack 0
 14872                           tblptru	equ	0xFF8
 14873                           tblptrh	equ	0xFF7
 14874                           tblptrl	equ	0xFF6
 14875                           tablat	equ	0xFF5
 14876                           prodh	equ	0xFF4
 14877                           prodl	equ	0xFF3
 14878                           intcon	equ	0xFF2
 14879                           intcon2	equ	0xFF1
 14880                           intcon3	equ	0xFF0
 14881                           postinc0	equ	0xFEE
 14882                           wreg	equ	0xFE8
 14883                           postdec1	equ	0xFE5
 14884                           fsr1l	equ	0xFE1
 14885                           indf2	equ	0xFDF
 14886                           postinc2	equ	0xFDE
 14887                           postdec2	equ	0xFDD
 14888                           fsr2h	equ	0xFDA
 14889                           fsr2l	equ	0xFD9
 14890                           status	equ	0xFD8
 14891                           
 14892 ;; *************** function _PortTestPusher *****************
 14893 ;; Defined at:
 14894 ;;		line 682 in file "Test.c"
 14895 ;; Parameters:    Size  Location     Type
 14896 ;;		None
 14897 ;; Auto vars:     Size  Location     Type
 14898 ;;		None
 14899 ;; Return value:  Size  Location     Type
 14900 ;;                  1    wreg      void 
 14901 ;; Registers used:
 14902 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14903 ;; Tracked objects:
 14904 ;;		On entry : 0/0
 14905 ;;		On exit  : 0/0
 14906 ;;		Unchanged: 0/0
 14907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14910 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14911 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14912 ;;Total ram usage:        1 bytes
 14913 ;; Hardware stack levels used:    1
 14914 ;; Hardware stack levels required when called:   10
 14915 ;; This function calls:
 14916 ;;		_lcdInst
 14917 ;;		_printf
 14918 ;; This function is called by:
 14919 ;;		_Test
 14920 ;; This function uses a non-reentrant model
 14921 ;;
 14922                           
 14923                           	psect	text47
 14924  005224                     __ptext47:
 14925                           	opt stack 0
 14926  005224                     _PortTestPusher:
 14927                           	opt stack 19
 14928                           
 14929                           ;Test.c: 683: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14930                           
 14931                           ;incstack = 0
 14932  005224  0E01               	movlw	1
 14933  005226  ECC9  F02D         	call	_lcdInst
 14934  00522A  0E68               	movlw	104
 14935  00522C  0100               	movlb	0	; () banked
 14936  00522E  6FAB               	movwf	??_PortTestPusher& (0+255),b
 14937  005230  0EE4               	movlw	228
 14938  005232                     u11107:
 14939  005232  2EE8               	decfsz	wreg,f,c
 14940  005234  D7FE               	bra	u11107
 14941  005236  2FAB               	decfsz	??_PortTestPusher& (0+255),f,b
 14942  005238  D7FC               	bra	u11107
 14943  00523A  F000               	nop	
 14944  00523C  0E80               	movlw	128
 14945  00523E  ECC9  F02D         	call	_lcdInst
 14946                           
 14947                           ;Test.c: 684: printf("D WILL RETURN    ");
 14948  005242  0EE6               	movlw	low STR_112
 14949  005244  0100               	movlb	0	; () banked
 14950  005246  6F8E               	movwf	printf@f& (0+255),b
 14951  005248  0EFA               	movlw	high STR_112
 14952  00524A  0100               	movlb	0	; () banked
 14953  00524C  6F8F               	movwf	(printf@f+1)& (0+255),b
 14954  00524E  EC8D  F00D         	call	_printf	;wreg free
 14955                           
 14956                           ;Test.c: 685: lcdInst(0b11000000);;
 14957  005252  0EC0               	movlw	192
 14958  005254  ECC9  F02D         	call	_lcdInst
 14959                           
 14960                           ;Test.c: 686: printf("OTHER SETS PUSHER");
 14961  005258  0E2E               	movlw	low STR_130
 14962  00525A  0100               	movlb	0	; () banked
 14963  00525C  6F8E               	movwf	printf@f& (0+255),b
 14964  00525E  0EFB               	movlw	high STR_130
 14965  005260  0100               	movlb	0	; () banked
 14966  005262  6F8F               	movwf	(printf@f+1)& (0+255),b
 14967  005264  EC8D  F00D         	call	_printf	;wreg free
 14968  005268                     l1488:
 14969  005268  A281               	btfss	3969,1,c	;volatile
 14970  00526A  D7FE               	goto	l1488
 14971                           
 14972                           ;Test.c: 691: }
 14973                           ;Test.c: 692: if(PORTB >> 4 == 0b1111){
 14974  00526C  3881               	swapf	3969,w,c	;volatile
 14975  00526E  0B0F               	andlw	15
 14976  005270  0A0F               	xorlw	15
 14977  005272  B4D8               	btfsc	status,2,c
 14978  005274  0012               	return	
 14979                           
 14980                           ;Test.c: 695: else{
 14981                           ;Test.c: 696: LATAbits.LATA4 = 1;
 14982                           
 14983                           ;Test.c: 694: }
 14984                           
 14985                           ;Test.c: 693: break;
 14986  005276  8889               	bsf	3977,4,c	;volatile
 14987  005278                     l1494:
 14988  005278  B281               	btfsc	3969,1,c	;volatile
 14989  00527A  D7FE               	goto	l1494
 14990                           
 14991                           ;Test.c: 699: }
 14992                           ;Test.c: 700: LATAbits.LATA4 = 0;
 14993  00527C  9889               	bcf	3977,4,c	;volatile
 14994  00527E  D7F4               	goto	l1488
 14995  005280                     __end_of_PortTestPusher:
 14996                           	opt stack 0
 14997                           tblptru	equ	0xFF8
 14998                           tblptrh	equ	0xFF7
 14999                           tblptrl	equ	0xFF6
 15000                           tablat	equ	0xFF5
 15001                           prodh	equ	0xFF4
 15002                           prodl	equ	0xFF3
 15003                           intcon	equ	0xFF2
 15004                           intcon2	equ	0xFF1
 15005                           intcon3	equ	0xFF0
 15006                           postinc0	equ	0xFEE
 15007                           wreg	equ	0xFE8
 15008                           postdec1	equ	0xFE5
 15009                           fsr1l	equ	0xFE1
 15010                           indf2	equ	0xFDF
 15011                           postinc2	equ	0xFDE
 15012                           postdec2	equ	0xFDD
 15013                           fsr2h	equ	0xFDA
 15014                           fsr2l	equ	0xFD9
 15015                           status	equ	0xFD8
 15016                           
 15017 ;; *************** function _PortTestDC *****************
 15018 ;; Defined at:
 15019 ;;		line 411 in file "Test.c"
 15020 ;; Parameters:    Size  Location     Type
 15021 ;;		None
 15022 ;; Auto vars:     Size  Location     Type
 15023 ;;		None
 15024 ;; Return value:  Size  Location     Type
 15025 ;;                  1    wreg      void 
 15026 ;; Registers used:
 15027 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15028 ;; Tracked objects:
 15029 ;;		On entry : 0/0
 15030 ;;		On exit  : 0/0
 15031 ;;		Unchanged: 0/0
 15032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15035 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15036 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15037 ;;Total ram usage:        1 bytes
 15038 ;; Hardware stack levels used:    1
 15039 ;; Hardware stack levels required when called:   10
 15040 ;; This function calls:
 15041 ;;		_lcdInst
 15042 ;;		_printf
 15043 ;; This function is called by:
 15044 ;;		_Test
 15045 ;; This function uses a non-reentrant model
 15046 ;;
 15047                           
 15048                           	psect	text48
 15049  005280                     __ptext48:
 15050                           	opt stack 0
 15051  005280                     _PortTestDC:
 15052                           	opt stack 19
 15053                           
 15054                           ;Test.c: 412: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15055                           
 15056                           ;incstack = 0
 15057  005280  0E01               	movlw	1
 15058  005282  ECC9  F02D         	call	_lcdInst
 15059  005286  0E68               	movlw	104
 15060  005288  0100               	movlb	0	; () banked
 15061  00528A  6FAB               	movwf	??_PortTestDC& (0+255),b
 15062  00528C  0EE4               	movlw	228
 15063  00528E                     u11117:
 15064  00528E  2EE8               	decfsz	wreg,f,c
 15065  005290  D7FE               	bra	u11117
 15066  005292  2FAB               	decfsz	??_PortTestDC& (0+255),f,b
 15067  005294  D7FC               	bra	u11117
 15068  005296  F000               	nop	
 15069  005298  0E80               	movlw	128
 15070  00529A  ECC9  F02D         	call	_lcdInst
 15071                           
 15072                           ;Test.c: 413: printf("D WILL RETURN    ");
 15073  00529E  0EE6               	movlw	low STR_112
 15074  0052A0  0100               	movlb	0	; () banked
 15075  0052A2  6F8E               	movwf	printf@f& (0+255),b
 15076  0052A4  0EFA               	movlw	high STR_112
 15077  0052A6  0100               	movlb	0	; () banked
 15078  0052A8  6F8F               	movwf	(printf@f+1)& (0+255),b
 15079  0052AA  EC8D  F00D         	call	_printf	;wreg free
 15080                           
 15081                           ;Test.c: 414: lcdInst(0b11000000);;
 15082  0052AE  0EC0               	movlw	192
 15083  0052B0  ECC9  F02D         	call	_lcdInst
 15084                           
 15085                           ;Test.c: 415: printf("OTHER SETS DC   ");
 15086  0052B4  0ECA               	movlw	low STR_113
 15087  0052B6  0100               	movlb	0	; () banked
 15088  0052B8  6F8E               	movwf	printf@f& (0+255),b
 15089  0052BA  0EFB               	movlw	high STR_113
 15090  0052BC  0100               	movlb	0	; () banked
 15091  0052BE  6F8F               	movwf	(printf@f+1)& (0+255),b
 15092  0052C0  EC8D  F00D         	call	_printf	;wreg free
 15093  0052C4                     l1369:
 15094  0052C4  A281               	btfss	3969,1,c	;volatile
 15095  0052C6  D7FE               	goto	l1369
 15096                           
 15097                           ;Test.c: 420: }
 15098                           ;Test.c: 421: if(PORTB >> 4 == 0b1111){
 15099  0052C8  3881               	swapf	3969,w,c	;volatile
 15100  0052CA  0B0F               	andlw	15
 15101  0052CC  0A0F               	xorlw	15
 15102  0052CE  B4D8               	btfsc	status,2,c
 15103  0052D0  0012               	return	
 15104                           
 15105                           ;Test.c: 424: else{
 15106                           ;Test.c: 425: LATBbits.LATB2 = 1;
 15107                           
 15108                           ;Test.c: 423: }
 15109                           
 15110                           ;Test.c: 422: break;
 15111  0052D2  848A               	bsf	3978,2,c	;volatile
 15112  0052D4                     l1375:
 15113  0052D4  B281               	btfsc	3969,1,c	;volatile
 15114  0052D6  D7FE               	goto	l1375
 15115                           
 15116                           ;Test.c: 428: }
 15117                           ;Test.c: 429: LATBbits.LATB2 = 0;
 15118  0052D8  948A               	bcf	3978,2,c	;volatile
 15119  0052DA  D7F4               	goto	l1369
 15120  0052DC                     __end_of_PortTestDC:
 15121                           	opt stack 0
 15122                           tblptru	equ	0xFF8
 15123                           tblptrh	equ	0xFF7
 15124                           tblptrl	equ	0xFF6
 15125                           tablat	equ	0xFF5
 15126                           prodh	equ	0xFF4
 15127                           prodl	equ	0xFF3
 15128                           intcon	equ	0xFF2
 15129                           intcon2	equ	0xFF1
 15130                           intcon3	equ	0xFF0
 15131                           postinc0	equ	0xFEE
 15132                           wreg	equ	0xFE8
 15133                           postdec1	equ	0xFE5
 15134                           fsr1l	equ	0xFE1
 15135                           indf2	equ	0xFDF
 15136                           postinc2	equ	0xFDE
 15137                           postdec2	equ	0xFDD
 15138                           fsr2h	equ	0xFDA
 15139                           fsr2l	equ	0xFD9
 15140                           status	equ	0xFD8
 15141                           
 15142 ;; *************** function _PlatformTest *****************
 15143 ;; Defined at:
 15144 ;;		line 434 in file "Test.c"
 15145 ;; Parameters:    Size  Location     Type
 15146 ;;		None
 15147 ;; Auto vars:     Size  Location     Type
 15148 ;;  i               2   51[BANK0 ] int 
 15149 ;;  i               2   49[BANK0 ] int 
 15150 ;;  res             2   47[BANK0 ] int 
 15151 ;;  res             2   45[BANK0 ] int 
 15152 ;;  on              2   53[BANK0 ] int 
 15153 ;; Return value:  Size  Location     Type
 15154 ;;                  1    wreg      void 
 15155 ;; Registers used:
 15156 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15157 ;; Tracked objects:
 15158 ;;		On entry : 0/0
 15159 ;;		On exit  : 0/0
 15160 ;;		Unchanged: 0/0
 15161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15163 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15164 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15165 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15166 ;;Total ram usage:       12 bytes
 15167 ;; Hardware stack levels used:    1
 15168 ;; Hardware stack levels required when called:   10
 15169 ;; This function calls:
 15170 ;;		_lcdInst
 15171 ;;		_printf
 15172 ;;		_readADC
 15173 ;;		_stopSignals
 15174 ;; This function is called by:
 15175 ;;		_Test
 15176 ;; This function uses a non-reentrant model
 15177 ;;
 15178                           
 15179                           	psect	text49
 15180  0026AE                     __ptext49:
 15181                           	opt stack 0
 15182  0026AE                     _PlatformTest:
 15183                           	opt stack 19
 15184                           
 15185                           ;Test.c: 435: LATCbits.LATC5 = 1;
 15186                           
 15187                           ;incstack = 0
 15188  0026AE  8A8B               	bsf	3979,5,c	;volatile
 15189                           
 15190                           ;Test.c: 437: machine_state = Sorting_state;
 15191  0026B0  0E01               	movlw	1
 15192  0026B2  0100               	movlb	0	; () banked
 15193  0026B4  6FFC               	movwf	_machine_state& (0+255),b
 15194                           
 15195                           ;Test.c: 438: f_arm_position = 0;
 15196  0026B6  0E00               	movlw	0
 15197  0026B8  0100               	movlb	0	; () banked
 15198  0026BA  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15199  0026BC  0E00               	movlw	0
 15200  0026BE  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 15201                           
 15202                           ;Test.c: 439: timer2_counter = 0;
 15203  0026C0  0E00               	movlw	0
 15204  0026C2  6E74               	movwf	_timer2_counter+1,c	;volatile
 15205  0026C4  0E00               	movlw	0
 15206  0026C6  6E73               	movwf	_timer2_counter,c	;volatile
 15207                           
 15208                           ; BSR set to: 0
 15209                           ;Test.c: 440: LATBbits.LATB3 = 0;
 15210  0026C8  968A               	bcf	3978,3,c	;volatile
 15211                           
 15212                           ; BSR set to: 0
 15213                           ;Test.c: 441: TMR2ON = 1;
 15214  0026CA  84CA               	bsf	4042,2,c	;volatile
 15215                           
 15216                           ;Test.c: 442: was_low_2 = 0;
 15217  0026CC  0E00               	movlw	0
 15218  0026CE  6E7A               	movwf	_was_low_2+1,c	;volatile
 15219  0026D0  0E00               	movlw	0
 15220  0026D2  6E79               	movwf	_was_low_2,c	;volatile
 15221                           
 15222                           ;Test.c: 444: int on = 1;
 15223  0026D4  0E00               	movlw	0
 15224  0026D6  0100               	movlb	0	; () banked
 15225  0026D8  6FB6               	movwf	(PlatformTest@on+1)& (0+255),b
 15226  0026DA  0E01               	movlw	1
 15227  0026DC  6FB5               	movwf	PlatformTest@on& (0+255),b
 15228                           
 15229                           ; BSR set to: 0
 15230                           ;Test.c: 445: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15231  0026DE  0E01               	movlw	1
 15232  0026E0  ECC9  F02D         	call	_lcdInst
 15233  0026E4  0E68               	movlw	104
 15234  0026E6  0100               	movlb	0	; () banked
 15235  0026E8  6FAB               	movwf	??_PlatformTest& (0+255),b
 15236  0026EA  0EE4               	movlw	228
 15237  0026EC                     u11127:
 15238  0026EC  2EE8               	decfsz	wreg,f,c
 15239  0026EE  D7FE               	bra	u11127
 15240  0026F0  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15241  0026F2  D7FC               	bra	u11127
 15242  0026F4  F000               	nop	
 15243  0026F6  0E80               	movlw	128
 15244  0026F8  ECC9  F02D         	call	_lcdInst
 15245                           
 15246                           ;Test.c: 446: printf("1: DC | A: ARM  ");
 15247  0026FC  0EFD               	movlw	low STR_114
 15248  0026FE  0100               	movlb	0	; () banked
 15249  002700  6F8E               	movwf	printf@f& (0+255),b
 15250  002702  0EFB               	movlw	high STR_114
 15251  002704  0100               	movlb	0	; () banked
 15252  002706  6F8F               	movwf	(printf@f+1)& (0+255),b
 15253  002708  EC8D  F00D         	call	_printf	;wreg free
 15254                           
 15255                           ;Test.c: 448: while(PORTBbits.RB1 == 0){
 15256  00270C  D058               	goto	l8976
 15257  00270E                     l8958:
 15258                           
 15259                           ;Test.c: 449: readADC(0);
 15260  00270E  0E00               	movlw	0
 15261  002710  ECB4  F02C         	call	_readADC
 15262                           
 15263                           ;Test.c: 450: int res = ADRESH<<8 | ADRESL;
 15264  002714  50C3               	movf	4035,w,c	;volatile
 15265  002716  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 15266  00271A  0100               	movlb	0	; () banked
 15267  00271C  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 15268  00271E  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 15269  002722  0100               	movlb	0	; () banked
 15270  002724  6BAB               	clrf	??_PlatformTest& (0+255),b
 15271  002726  0100               	movlb	0	; () banked
 15272  002728  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 15273  00272A  0100               	movlb	0	; () banked
 15274  00272C  6FAD               	movwf	PlatformTest@res& (0+255),b
 15275  00272E  0100               	movlb	0	; () banked
 15276  002730  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 15277  002732  0100               	movlb	0	; () banked
 15278  002734  6FAE               	movwf	(PlatformTest@res+1)& (0+255),b
 15279                           
 15280                           ; BSR set to: 0
 15281                           ;Test.c: 451: IR_signal = (res > 800) ? 1 : 0;
 15282  002736  0100               	movlb	0	; () banked
 15283  002738  BFAE               	btfsc	(PlatformTest@res+1)& (0+255),7,b
 15284  00273A  D00A               	goto	u8030
 15285  00273C  0E21               	movlw	33
 15286  00273E  0100               	movlb	0	; () banked
 15287  002740  5DAD               	subwf	PlatformTest@res& (0+255),w,b
 15288  002742  0E03               	movlw	3
 15289  002744  0100               	movlb	0	; () banked
 15290  002746  59AE               	subwfb	(PlatformTest@res+1)& (0+255),w,b
 15291  002748  A0D8               	btfss	status,0,c
 15292  00274A  D002               	goto	u8030
 15293  00274C  0E01               	movlw	1
 15294  00274E  D001               	goto	u8040
 15295  002750                     u8030:
 15296  002750  0E00               	movlw	0
 15297  002752                     u8040:
 15298  002752  0100               	movlb	0	; () banked
 15299  002754  6FE0               	movwf	_IR_signal& (0+255),b
 15300  002756  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 15301                           
 15302                           ;Test.c: 453: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15303  002758  0E01               	movlw	1
 15304  00275A  ECC9  F02D         	call	_lcdInst
 15305  00275E  0E68               	movlw	104
 15306  002760  0100               	movlb	0	; () banked
 15307  002762  6FAB               	movwf	??_PlatformTest& (0+255),b
 15308  002764  0EE4               	movlw	228
 15309  002766                     u11137:
 15310  002766  2EE8               	decfsz	wreg,f,c
 15311  002768  D7FE               	bra	u11137
 15312  00276A  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15313  00276C  D7FC               	bra	u11137
 15314  00276E  F000               	nop	
 15315  002770  0E80               	movlw	128
 15316  002772  ECC9  F02D         	call	_lcdInst
 15317                           
 15318                           ;Test.c: 454: printf("1: DC | A: ARM  ");
 15319  002776  0EFD               	movlw	low STR_114
 15320  002778  0100               	movlb	0	; () banked
 15321  00277A  6F8E               	movwf	printf@f& (0+255),b
 15322  00277C  0EFB               	movlw	high STR_114
 15323  00277E  0100               	movlb	0	; () banked
 15324  002780  6F8F               	movwf	(printf@f+1)& (0+255),b
 15325  002782  EC8D  F00D         	call	_printf	;wreg free
 15326                           
 15327                           ;Test.c: 455: lcdInst(0b11000000);;
 15328  002786  0EC0               	movlw	192
 15329  002788  ECC9  F02D         	call	_lcdInst
 15330                           
 15331                           ;Test.c: 456: printf("5:H|6:L|IR:%d   ", res);
 15332  00278C  0EEC               	movlw	low STR_116
 15333  00278E  0100               	movlb	0	; () banked
 15334  002790  6F8E               	movwf	printf@f& (0+255),b
 15335  002792  0EFB               	movlw	high STR_116
 15336  002794  0100               	movlb	0	; () banked
 15337  002796  6F8F               	movwf	(printf@f+1)& (0+255),b
 15338  002798  C0AD  F090         	movff	PlatformTest@res,?_printf+2
 15339  00279C  C0AE  F091         	movff	PlatformTest@res+1,?_printf+3
 15340  0027A0  EC8D  F00D         	call	_printf	;wreg free
 15341                           
 15342                           ;Test.c: 457: _delay((unsigned long)((100)*(32000000/4000.0)));
 15343  0027A4  0E05               	movlw	5
 15344  0027A6  0100               	movlb	0	; () banked
 15345  0027A8  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 15346  0027AA  0E0F               	movlw	15
 15347  0027AC  0100               	movlb	0	; () banked
 15348  0027AE  6FAB               	movwf	??_PlatformTest& (0+255),b
 15349  0027B0  0EF1               	movlw	241
 15350  0027B2                     u11147:
 15351  0027B2  2EE8               	decfsz	wreg,f,c
 15352  0027B4  D7FE               	bra	u11147
 15353  0027B6  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15354  0027B8  D7FC               	bra	u11147
 15355  0027BA  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 15356  0027BC  D7FA               	bra	u11147
 15357  0027BE                     l8976:
 15358  0027BE  B281               	btfsc	3969,1,c	;volatile
 15359  0027C0  D059               	goto	l8996
 15360  0027C2  D7A5               	goto	l8958
 15361  0027C4                     l8978:
 15362                           
 15363                           ;Test.c: 462: readADC(0);
 15364  0027C4  0E00               	movlw	0
 15365  0027C6  ECB4  F02C         	call	_readADC
 15366                           
 15367                           ;Test.c: 463: int res = ADRESH<<8 | ADRESL;
 15368  0027CA  50C3               	movf	4035,w,c	;volatile
 15369  0027CC  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 15370  0027D0  0100               	movlb	0	; () banked
 15371  0027D2  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 15372  0027D4  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 15373  0027D8  0100               	movlb	0	; () banked
 15374  0027DA  6BAB               	clrf	??_PlatformTest& (0+255),b
 15375  0027DC  0100               	movlb	0	; () banked
 15376  0027DE  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 15377  0027E0  0100               	movlb	0	; () banked
 15378  0027E2  6FAF               	movwf	PlatformTest@res_1791& (0+255),b
 15379  0027E4  0100               	movlb	0	; () banked
 15380  0027E6  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 15381  0027E8  0100               	movlb	0	; () banked
 15382  0027EA  6FB0               	movwf	(PlatformTest@res_1791+1)& (0+255),b
 15383                           
 15384                           ; BSR set to: 0
 15385                           ;Test.c: 464: IR_signal = (res > 800) ? 1 : 0;
 15386  0027EC  0100               	movlb	0	; () banked
 15387  0027EE  BFB0               	btfsc	(PlatformTest@res_1791+1)& (0+255),7,b
 15388  0027F0  D00A               	goto	u8060
 15389  0027F2  0E21               	movlw	33
 15390  0027F4  0100               	movlb	0	; () banked
 15391  0027F6  5DAF               	subwf	PlatformTest@res_1791& (0+255),w,b
 15392  0027F8  0E03               	movlw	3
 15393  0027FA  0100               	movlb	0	; () banked
 15394  0027FC  59B0               	subwfb	(PlatformTest@res_1791+1)& (0+255),w,b
 15395  0027FE  A0D8               	btfss	status,0,c
 15396  002800  D002               	goto	u8060
 15397  002802  0E01               	movlw	1
 15398  002804  D001               	goto	u8070
 15399  002806                     u8060:
 15400  002806  0E00               	movlw	0
 15401  002808                     u8070:
 15402  002808  0100               	movlb	0	; () banked
 15403  00280A  6FE0               	movwf	_IR_signal& (0+255),b
 15404  00280C  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 15405                           
 15406                           ;Test.c: 466: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15407  00280E  0E01               	movlw	1
 15408  002810  ECC9  F02D         	call	_lcdInst
 15409  002814  0E68               	movlw	104
 15410  002816  0100               	movlb	0	; () banked
 15411  002818  6FAB               	movwf	??_PlatformTest& (0+255),b
 15412  00281A  0EE4               	movlw	228
 15413  00281C                     u11157:
 15414  00281C  2EE8               	decfsz	wreg,f,c
 15415  00281E  D7FE               	bra	u11157
 15416  002820  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15417  002822  D7FC               	bra	u11157
 15418  002824  F000               	nop	
 15419  002826  0E80               	movlw	128
 15420  002828  ECC9  F02D         	call	_lcdInst
 15421                           
 15422                           ;Test.c: 467: printf("1: DC | A: ARM  ");
 15423  00282C  0EFD               	movlw	low STR_114
 15424  00282E  0100               	movlb	0	; () banked
 15425  002830  6F8E               	movwf	printf@f& (0+255),b
 15426  002832  0EFB               	movlw	high STR_114
 15427  002834  0100               	movlb	0	; () banked
 15428  002836  6F8F               	movwf	(printf@f+1)& (0+255),b
 15429  002838  EC8D  F00D         	call	_printf	;wreg free
 15430                           
 15431                           ;Test.c: 468: lcdInst(0b11000000);;
 15432  00283C  0EC0               	movlw	192
 15433  00283E  ECC9  F02D         	call	_lcdInst
 15434                           
 15435                           ;Test.c: 469: printf("5:H|6:L|IR:%d   ", res);
 15436  002842  0EEC               	movlw	low STR_116
 15437  002844  0100               	movlb	0	; () banked
 15438  002846  6F8E               	movwf	printf@f& (0+255),b
 15439  002848  0EFB               	movlw	high STR_116
 15440  00284A  0100               	movlb	0	; () banked
 15441  00284C  6F8F               	movwf	(printf@f+1)& (0+255),b
 15442  00284E  C0AF  F090         	movff	PlatformTest@res_1791,?_printf+2
 15443  002852  C0B0  F091         	movff	PlatformTest@res_1791+1,?_printf+3
 15444  002856  EC8D  F00D         	call	_printf	;wreg free
 15445                           
 15446                           ;Test.c: 470: _delay((unsigned long)((100)*(32000000/4000.0)));
 15447  00285A  0E05               	movlw	5
 15448  00285C  0100               	movlb	0	; () banked
 15449  00285E  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 15450  002860  0E0F               	movlw	15
 15451  002862  0100               	movlb	0	; () banked
 15452  002864  6FAB               	movwf	??_PlatformTest& (0+255),b
 15453  002866  0EF1               	movlw	241
 15454  002868                     u11167:
 15455  002868  2EE8               	decfsz	wreg,f,c
 15456  00286A  D7FE               	bra	u11167
 15457  00286C  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15458  00286E  D7FC               	bra	u11167
 15459  002870  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 15460  002872  D7FA               	bra	u11167
 15461  002874                     l8996:
 15462  002874  A281               	btfss	3969,1,c	;volatile
 15463  002876  D7A6               	goto	l8978
 15464                           
 15465                           ;Test.c: 471: }
 15466                           ;Test.c: 472: if(PORTB >> 4 == 0b1111){
 15467  002878  3881               	swapf	3969,w,c	;volatile
 15468  00287A  0B0F               	andlw	15
 15469  00287C  0A0F               	xorlw	15
 15470  00287E  B4D8               	btfsc	status,2,c
 15471  002880  D09A               	goto	l1390
 15472                           
 15473                           ;Test.c: 475: else if(PORTB >> 4 == 0b0000){
 15474                           
 15475                           ;Test.c: 474: }
 15476                           
 15477                           ;Test.c: 473: break;
 15478  002882  CF81 F0AB          	movff	3969,??_PlatformTest	;volatile
 15479  002886  0100               	movlb	0	; () banked
 15480  002888  3BAB               	swapf	??_PlatformTest& (0+255),f,b
 15481  00288A  0E0F               	movlw	15
 15482  00288C  17AB               	andwf	??_PlatformTest& (0+255),f,b
 15483  00288E  A4D8               	btfss	status,2,c
 15484  002890  D012               	goto	l9008
 15485                           
 15486                           ; BSR set to: 0
 15487                           ;Test.c: 476: LATBbits.LATB2 = !LATBbits.LATB2;
 15488  002892  B48A               	btfsc	3978,2,c	;volatile
 15489  002894  D004               	goto	u8110
 15490  002896  0100               	movlb	0	; () banked
 15491  002898  6BAB               	clrf	??_PlatformTest& (0+255),b
 15492  00289A  2BAB               	incf	??_PlatformTest& (0+255),f,b
 15493  00289C  D002               	goto	u8128
 15494  00289E                     u8110:
 15495  00289E  0100               	movlb	0	; () banked
 15496  0028A0  6BAB               	clrf	??_PlatformTest& (0+255),b
 15497  0028A2                     u8128:
 15498  0028A2  0100               	movlb	0	; () banked
 15499  0028A4  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 15500  0028A6  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 15501  0028A8  508A               	movf	3978,w,c	;volatile
 15502  0028AA  0100               	movlb	0	; () banked
 15503  0028AC  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 15504  0028AE  0BFB               	andlw	-5
 15505  0028B0  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 15506  0028B2  6E8A               	movwf	3978,c	;volatile
 15507                           
 15508                           ;Test.c: 477: }
 15509  0028B4  D07D               	goto	l1405
 15510  0028B6                     l9008:
 15511                           
 15512                           ; BSR set to: 0
 15513                           ;Test.c: 478: else if(PORTB >> 4 == 0b0011){
 15514  0028B6  3881               	swapf	3969,w,c	;volatile
 15515  0028B8  0B0F               	andlw	15
 15516  0028BA  0A03               	xorlw	3
 15517  0028BC  A4D8               	btfss	status,2,c
 15518  0028BE  D020               	goto	l9020
 15519                           
 15520                           ; BSR set to: 0
 15521                           ;Test.c: 479: if(on){
 15522  0028C0  0100               	movlb	0	; () banked
 15523  0028C2  51B5               	movf	PlatformTest@on& (0+255),w,b
 15524  0028C4  0100               	movlb	0	; () banked
 15525  0028C6  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 15526  0028C8  B4D8               	btfsc	status,2,c
 15527  0028CA  D010               	goto	l9016
 15528                           
 15529                           ; BSR set to: 0
 15530                           ;Test.c: 480: f_arm_position = 1;
 15531  0028CC  0E00               	movlw	0
 15532  0028CE  0100               	movlb	0	; () banked
 15533  0028D0  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15534  0028D2  0E01               	movlw	1
 15535  0028D4  D00F               	goto	L13
 15536  0028D6                     l9014:
 15537                           
 15538                           ; BSR set to: 0
 15539                           ;Test.c: 481: on = !on;
 15540  0028D6  0100               	movlb	0	; () banked
 15541  0028D8  51B5               	movf	PlatformTest@on& (0+255),w,b
 15542  0028DA  0100               	movlb	0	; () banked
 15543  0028DC  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 15544  0028DE  A4D8               	btfss	status,2,c
 15545  0028E0  D00D               	goto	u8170
 15546  0028E2  D00A               	goto	u8171
 15547  0028E4                     u8160:
 15548  0028E4  0100               	movlb	0	; () banked
 15549  0028E6  6FB5               	movwf	PlatformTest@on& (0+255),b
 15550  0028E8  6BB6               	clrf	(PlatformTest@on+1)& (0+255),b
 15551                           
 15552                           ;Test.c: 482: }
 15553  0028EA  D062               	goto	l1405
 15554  0028EC                     l9016:
 15555                           
 15556                           ; BSR set to: 0
 15557                           ;Test.c: 483: else{
 15558                           ;Test.c: 484: f_arm_position = 0;
 15559  0028EC  0E00               	movlw	0
 15560  0028EE  0100               	movlb	0	; () banked
 15561  0028F0  6FEB               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15562  0028F2  0E00               	movlw	0
 15563  0028F4                     L13:
 15564  0028F4  6FEA               	movwf	_f_arm_position& (0+255),b	;volatile
 15565  0028F6  D7EF               	goto	l9014
 15566  0028F8                     u8171:
 15567  0028F8  0E01               	movlw	1
 15568  0028FA  D7F4               	goto	u8160
 15569  0028FC                     u8170:
 15570  0028FC  0E00               	movlw	0
 15571  0028FE  D7F2               	goto	u8160
 15572  002900                     l9020:
 15573                           
 15574                           ; BSR set to: 0
 15575                           ;Test.c: 488: else if(PORTB >> 4 == 0b0101){
 15576  002900  3881               	swapf	3969,w,c	;volatile
 15577  002902  0B0F               	andlw	15
 15578  002904  0A05               	xorlw	5
 15579  002906  A4D8               	btfss	status,2,c
 15580  002908  D027               	goto	l9034
 15581                           
 15582                           ; BSR set to: 0
 15583                           ;Test.c: 490: for(int i = 0; i<30; i++){
 15584  00290A  0E00               	movlw	0
 15585  00290C  0100               	movlb	0	; () banked
 15586  00290E  6FB2               	movwf	(PlatformTest@i+1)& (0+255),b
 15587  002910  0E00               	movlw	0
 15588  002912  6FB1               	movwf	PlatformTest@i& (0+255),b
 15589  002914                     l9024:
 15590                           
 15591                           ; BSR set to: 0
 15592  002914  0100               	movlb	0	; () banked
 15593  002916  BFB2               	btfsc	(PlatformTest@i+1)& (0+255),7,b
 15594  002918  D008               	goto	l1399
 15595  00291A  0100               	movlb	0	; () banked
 15596  00291C  51B2               	movf	(PlatformTest@i+1)& (0+255),w,b
 15597  00291E  E148               	bnz	l1405
 15598  002920  0E1E               	movlw	30
 15599  002922  0100               	movlb	0	; () banked
 15600  002924  5DB1               	subwf	PlatformTest@i& (0+255),w,b
 15601  002926  B0D8               	btfsc	status,0,c
 15602  002928  D043               	goto	l1405
 15603  00292A                     l1399:
 15604                           
 15605                           ; BSR set to: 0
 15606                           ;Test.c: 491: LATAbits.LATA4 = 1;
 15607  00292A  8889               	bsf	3977,4,c	;volatile
 15608                           
 15609                           ; BSR set to: 0
 15610                           ;Test.c: 492: _delay((unsigned long)((7500)*(32000000/4000000.0)));
 15611  00292C  0E4E               	movlw	78
 15612  00292E  0100               	movlb	0	; () banked
 15613  002930  6FAB               	movwf	??_PlatformTest& (0+255),b
 15614  002932  0EEB               	movlw	235
 15615  002934                     u11177:
 15616  002934  2EE8               	decfsz	wreg,f,c
 15617  002936  D7FE               	bra	u11177
 15618  002938  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15619  00293A  D7FC               	bra	u11177
 15620                           
 15621                           ;Test.c: 493: LATAbits.LATA4 = 0;
 15622  00293C  9889               	bcf	3977,4,c	;volatile
 15623                           
 15624                           ;Test.c: 494: _delay((unsigned long)((2500)*(32000000/4000000.0)));
 15625  00293E  0E1A               	movlw	26
 15626  002940  0100               	movlb	0	; () banked
 15627  002942  6FAB               	movwf	??_PlatformTest& (0+255),b
 15628  002944  0EF8               	movlw	248
 15629  002946                     u11187:
 15630  002946  2EE8               	decfsz	wreg,f,c
 15631  002948  D7FE               	bra	u11187
 15632  00294A  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15633  00294C  D7FC               	bra	u11187
 15634  00294E  F000               	nop	
 15635  002950  0100               	movlb	0	; () banked
 15636  002952  4BB1               	infsnz	PlatformTest@i& (0+255),f,b
 15637  002954  2BB2               	incf	(PlatformTest@i+1)& (0+255),f,b
 15638  002956  D7DE               	goto	l9024
 15639  002958                     l9034:
 15640                           
 15641                           ; BSR set to: 0
 15642                           ;Test.c: 497: else if (PORTB >> 4 == 0b0110){
 15643  002958  3881               	swapf	3969,w,c	;volatile
 15644  00295A  0B0F               	andlw	15
 15645  00295C  0A06               	xorlw	6
 15646  00295E  A4D8               	btfss	status,2,c
 15647  002960  D027               	goto	l1405
 15648                           
 15649                           ; BSR set to: 0
 15650                           ;Test.c: 499: for(int i = 0; i<30; i++){
 15651  002962  0E00               	movlw	0
 15652  002964  0100               	movlb	0	; () banked
 15653  002966  6FB4               	movwf	(PlatformTest@i_1795+1)& (0+255),b
 15654  002968  0E00               	movlw	0
 15655  00296A  6FB3               	movwf	PlatformTest@i_1795& (0+255),b
 15656  00296C                     l9038:
 15657                           
 15658                           ; BSR set to: 0
 15659  00296C  0100               	movlb	0	; () banked
 15660  00296E  BFB4               	btfsc	(PlatformTest@i_1795+1)& (0+255),7,b
 15661  002970  D008               	goto	l1403
 15662  002972  0100               	movlb	0	; () banked
 15663  002974  51B4               	movf	(PlatformTest@i_1795+1)& (0+255),w,b
 15664  002976  E11C               	bnz	l1405
 15665  002978  0E1E               	movlw	30
 15666  00297A  0100               	movlb	0	; () banked
 15667  00297C  5DB3               	subwf	PlatformTest@i_1795& (0+255),w,b
 15668  00297E  B0D8               	btfsc	status,0,c
 15669  002980  D017               	goto	l1405
 15670  002982                     l1403:
 15671                           
 15672                           ; BSR set to: 0
 15673                           ;Test.c: 500: LATAbits.LATA4 = 1;
 15674  002982  8889               	bsf	3977,4,c	;volatile
 15675                           
 15676                           ; BSR set to: 0
 15677                           ;Test.c: 501: _delay((unsigned long)((5800)*(32000000/4000000.0)));
 15678  002984  0E3D               	movlw	61
 15679  002986  0100               	movlb	0	; () banked
 15680  002988  6FAB               	movwf	??_PlatformTest& (0+255),b
 15681  00298A  0E41               	movlw	65
 15682  00298C                     u11197:
 15683  00298C  2EE8               	decfsz	wreg,f,c
 15684  00298E  D7FE               	bra	u11197
 15685  002990  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15686  002992  D7FC               	bra	u11197
 15687                           
 15688                           ;Test.c: 502: LATAbits.LATA4 = 0;
 15689  002994  9889               	bcf	3977,4,c	;volatile
 15690                           
 15691                           ;Test.c: 503: _delay((unsigned long)((4200)*(32000000/4000000.0)));
 15692  002996  0E2C               	movlw	44
 15693  002998  0100               	movlb	0	; () banked
 15694  00299A  6FAB               	movwf	??_PlatformTest& (0+255),b
 15695  00299C  0EA1               	movlw	161
 15696  00299E                     u11207:
 15697  00299E  2EE8               	decfsz	wreg,f,c
 15698  0029A0  D7FE               	bra	u11207
 15699  0029A2  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15700  0029A4  D7FC               	bra	u11207
 15701  0029A6  D000               	nop2	
 15702  0029A8  0100               	movlb	0	; () banked
 15703  0029AA  4BB3               	infsnz	PlatformTest@i_1795& (0+255),f,b
 15704  0029AC  2BB4               	incf	(PlatformTest@i_1795+1)& (0+255),f,b
 15705  0029AE  D7DE               	goto	l9038
 15706  0029B0                     l1405:
 15707  0029B0  A281               	btfss	3969,1,c	;volatile
 15708  0029B2  D760               	goto	l8996
 15709  0029B4  D7FD               	goto	l1405
 15710  0029B6                     l1390:
 15711                           
 15712                           ;Test.c: 508: }
 15713                           ;Test.c: 510: LATCbits.LATC5 = 0;
 15714  0029B6  9A8B               	bcf	3979,5,c	;volatile
 15715                           
 15716                           ;Test.c: 511: stopSignals();
 15717  0029B8  EC70  F02D         	call	_stopSignals	;wreg free
 15718                           
 15719                           ;Test.c: 512: machine_state = Testing_state;
 15720  0029BC  0E03               	movlw	3
 15721  0029BE  0100               	movlb	0	; () banked
 15722  0029C0  6FFC               	movwf	_machine_state& (0+255),b
 15723                           
 15724                           ; BSR set to: 0
 15725  0029C2  0012               	return		;funcret
 15726  0029C4                     __end_of_PlatformTest:
 15727                           	opt stack 0
 15728                           tblptru	equ	0xFF8
 15729                           tblptrh	equ	0xFF7
 15730                           tblptrl	equ	0xFF6
 15731                           tablat	equ	0xFF5
 15732                           prodh	equ	0xFF4
 15733                           prodl	equ	0xFF3
 15734                           intcon	equ	0xFF2
 15735                           intcon2	equ	0xFF1
 15736                           intcon3	equ	0xFF0
 15737                           postinc0	equ	0xFEE
 15738                           wreg	equ	0xFE8
 15739                           postdec1	equ	0xFE5
 15740                           fsr1l	equ	0xFE1
 15741                           indf2	equ	0xFDF
 15742                           postinc2	equ	0xFDE
 15743                           postdec2	equ	0xFDD
 15744                           fsr2h	equ	0xFDA
 15745                           fsr2l	equ	0xFD9
 15746                           status	equ	0xFD8
 15747                           
 15748 ;; *************** function _BothServos *****************
 15749 ;; Defined at:
 15750 ;;		line 351 in file "Test.c"
 15751 ;; Parameters:    Size  Location     Type
 15752 ;;		None
 15753 ;; Auto vars:     Size  Location     Type
 15754 ;;		None
 15755 ;; Return value:  Size  Location     Type
 15756 ;;                  1    wreg      void 
 15757 ;; Registers used:
 15758 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15759 ;; Tracked objects:
 15760 ;;		On entry : 0/0
 15761 ;;		On exit  : 0/0
 15762 ;;		Unchanged: 0/0
 15763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15766 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15767 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15768 ;;Total ram usage:        2 bytes
 15769 ;; Hardware stack levels used:    1
 15770 ;; Hardware stack levels required when called:   10
 15771 ;; This function calls:
 15772 ;;		_initServos
 15773 ;;		_lcdInst
 15774 ;;		_printf
 15775 ;;		_stopSignals
 15776 ;;		_updateServoPosition
 15777 ;; This function is called by:
 15778 ;;		_Test
 15779 ;; This function uses a non-reentrant model
 15780 ;;
 15781                           
 15782                           	psect	text50
 15783  001F52                     __ptext50:
 15784                           	opt stack 0
 15785  001F52                     _BothServos:
 15786                           	opt stack 19
 15787                           
 15788                           ;Test.c: 352: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15789                           
 15790                           ; BSR set to: 0
 15791                           ;incstack = 0
 15792  001F52  0E01               	movlw	1
 15793  001F54  ECC9  F02D         	call	_lcdInst
 15794  001F58  0E68               	movlw	104
 15795  001F5A  0100               	movlb	0	; () banked
 15796  001F5C  6FAB               	movwf	??_BothServos& (0+255),b
 15797  001F5E  0EE4               	movlw	228
 15798  001F60                     u11217:
 15799  001F60  2EE8               	decfsz	wreg,f,c
 15800  001F62  D7FE               	bra	u11217
 15801  001F64  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15802  001F66  D7FC               	bra	u11217
 15803  001F68  F000               	nop	
 15804  001F6A  0E80               	movlw	128
 15805  001F6C  ECC9  F02D         	call	_lcdInst
 15806                           
 15807                           ;Test.c: 353: printf("TST: BOTH SERVOS");
 15808  001F70  0EA7               	movlw	low STR_111
 15809  001F72  0100               	movlb	0	; () banked
 15810  001F74  6F8E               	movwf	printf@f& (0+255),b
 15811  001F76  0EFC               	movlw	high STR_111
 15812  001F78  0100               	movlb	0	; () banked
 15813  001F7A  6F8F               	movwf	(printf@f+1)& (0+255),b
 15814  001F7C  EC8D  F00D         	call	_printf	;wreg free
 15815                           
 15816                           ;Test.c: 354: TMR1ON = 1;
 15817  001F80  80CD               	bsf	4045,0,c	;volatile
 15818                           
 15819                           ;Test.c: 355: TMR3ON = 1;
 15820  001F82  80B1               	bsf	4017,0,c	;volatile
 15821                           
 15822                           ;Test.c: 356: machine_state = Sorting_state;
 15823  001F84  0E01               	movlw	1
 15824  001F86  0100               	movlb	0	; () banked
 15825  001F88  6FFC               	movwf	_machine_state& (0+255),b
 15826                           
 15827                           ; BSR set to: 0
 15828                           ;Test.c: 357: was_low_1 = 0;
 15829  001F8A  0E00               	movlw	0
 15830  001F8C  6E78               	movwf	_was_low_1+1,c	;volatile
 15831  001F8E  0E00               	movlw	0
 15832  001F90  6E77               	movwf	_was_low_1,c	;volatile
 15833                           
 15834                           ; BSR set to: 0
 15835                           ;Test.c: 358: was_low_3 = 0;
 15836  001F92  0E00               	movlw	0
 15837  001F94  6E7C               	movwf	_was_low_3+1,c	;volatile
 15838  001F96  0E00               	movlw	0
 15839  001F98  6E7B               	movwf	_was_low_3,c	;volatile
 15840                           
 15841                           ; BSR set to: 0
 15842                           ;Test.c: 364: initServos();
 15843  001F9A  ECF3  F026         	call	_initServos	;wreg free
 15844                           
 15845                           ;Test.c: 365: _delay((unsigned long)((1500)*(32000000/4000.0)));
 15846  001F9E  0E3D               	movlw	61
 15847  001FA0  0100               	movlb	0	; () banked
 15848  001FA2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15849  001FA4  0EE1               	movlw	225
 15850  001FA6  0100               	movlb	0	; () banked
 15851  001FA8  6FAB               	movwf	??_BothServos& (0+255),b
 15852  001FAA  0E3F               	movlw	63
 15853  001FAC                     u11227:
 15854  001FAC  2EE8               	decfsz	wreg,f,c
 15855  001FAE  D7FE               	bra	u11227
 15856  001FB0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15857  001FB2  D7FC               	bra	u11227
 15858  001FB4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15859  001FB6  D7FA               	bra	u11227
 15860  001FB8  D000               	nop2	
 15861                           
 15862                           ;Test.c: 367: updateServoPosition(500, 1);
 15863  001FBA  0E01               	movlw	1
 15864  001FBC  0100               	movlb	0	; () banked
 15865  001FBE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15866  001FC0  0EF4               	movlw	244
 15867  001FC2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15868  001FC4  0E00               	movlw	0
 15869  001FC6  0100               	movlb	0	; () banked
 15870  001FC8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15871  001FCA  0E01               	movlw	1
 15872  001FCC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15873  001FCE  ECB4  F026         	call	_updateServoPosition	;wreg free
 15874                           
 15875                           ;Test.c: 368: updateServoPosition(1050, 3);
 15876  001FD2  0E04               	movlw	4
 15877  001FD4  0100               	movlb	0	; () banked
 15878  001FD6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15879  001FD8  0E1A               	movlw	26
 15880  001FDA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15881  001FDC  0E00               	movlw	0
 15882  001FDE  0100               	movlb	0	; () banked
 15883  001FE0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15884  001FE2  0E03               	movlw	3
 15885  001FE4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15886  001FE6  ECB4  F026         	call	_updateServoPosition	;wreg free
 15887                           
 15888                           ;Test.c: 369: _delay((unsigned long)((750)*(32000000/4000.0)));
 15889  001FEA  0E1F               	movlw	31
 15890  001FEC  0100               	movlb	0	; () banked
 15891  001FEE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15892  001FF0  0E71               	movlw	113
 15893  001FF2  0100               	movlb	0	; () banked
 15894  001FF4  6FAB               	movwf	??_BothServos& (0+255),b
 15895  001FF6  0E1E               	movlw	30
 15896  001FF8                     u11237:
 15897  001FF8  2EE8               	decfsz	wreg,f,c
 15898  001FFA  D7FE               	bra	u11237
 15899  001FFC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15900  001FFE  D7FC               	bra	u11237
 15901  002000  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15902  002002  D7FA               	bra	u11237
 15903  002004  F000               	nop	
 15904                           
 15905                           ;Test.c: 370: updateServoPosition(1260, 3);
 15906  002006  0E04               	movlw	4
 15907  002008  0100               	movlb	0	; () banked
 15908  00200A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15909  00200C  0EEC               	movlw	236
 15910  00200E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15911  002010  0E00               	movlw	0
 15912  002012  0100               	movlb	0	; () banked
 15913  002014  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15914  002016  0E03               	movlw	3
 15915  002018  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15916  00201A  ECB4  F026         	call	_updateServoPosition	;wreg free
 15917                           
 15918                           ;Test.c: 371: _delay((unsigned long)((700)*(32000000/4000.0)));
 15919  00201E  0E1D               	movlw	29
 15920  002020  0100               	movlb	0	; () banked
 15921  002022  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15922  002024  0E69               	movlw	105
 15923  002026  0100               	movlb	0	; () banked
 15924  002028  6FAB               	movwf	??_BothServos& (0+255),b
 15925  00202A  0EA5               	movlw	165
 15926  00202C                     u11247:
 15927  00202C  2EE8               	decfsz	wreg,f,c
 15928  00202E  D7FE               	bra	u11247
 15929  002030  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15930  002032  D7FC               	bra	u11247
 15931  002034  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15932  002036  D7FA               	bra	u11247
 15933                           
 15934                           ;Test.c: 372: updateServoPosition(1050, 3);
 15935  002038  0E04               	movlw	4
 15936  00203A  0100               	movlb	0	; () banked
 15937  00203C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15938  00203E  0E1A               	movlw	26
 15939  002040  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15940  002042  0E00               	movlw	0
 15941  002044  0100               	movlb	0	; () banked
 15942  002046  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15943  002048  0E03               	movlw	3
 15944  00204A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15945  00204C  ECB4  F026         	call	_updateServoPosition	;wreg free
 15946                           
 15947                           ;Test.c: 373: _delay((unsigned long)((750)*(32000000/4000.0)));
 15948  002050  0E1F               	movlw	31
 15949  002052  0100               	movlb	0	; () banked
 15950  002054  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15951  002056  0E71               	movlw	113
 15952  002058  0100               	movlb	0	; () banked
 15953  00205A  6FAB               	movwf	??_BothServos& (0+255),b
 15954  00205C  0E1E               	movlw	30
 15955  00205E                     u11257:
 15956  00205E  2EE8               	decfsz	wreg,f,c
 15957  002060  D7FE               	bra	u11257
 15958  002062  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15959  002064  D7FC               	bra	u11257
 15960  002066  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15961  002068  D7FA               	bra	u11257
 15962  00206A  F000               	nop	
 15963                           
 15964                           ;Test.c: 375: updateServoPosition(850, 1);
 15965  00206C  0E03               	movlw	3
 15966  00206E  0100               	movlb	0	; () banked
 15967  002070  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15968  002072  0E52               	movlw	82
 15969  002074  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15970  002076  0E00               	movlw	0
 15971  002078  0100               	movlb	0	; () banked
 15972  00207A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15973  00207C  0E01               	movlw	1
 15974  00207E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15975  002080  ECB4  F026         	call	_updateServoPosition	;wreg free
 15976                           
 15977                           ;Test.c: 376: updateServoPosition(1050, 3);
 15978  002084  0E04               	movlw	4
 15979  002086  0100               	movlb	0	; () banked
 15980  002088  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15981  00208A  0E1A               	movlw	26
 15982  00208C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15983  00208E  0E00               	movlw	0
 15984  002090  0100               	movlb	0	; () banked
 15985  002092  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15986  002094  0E03               	movlw	3
 15987  002096  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15988  002098  ECB4  F026         	call	_updateServoPosition	;wreg free
 15989                           
 15990                           ;Test.c: 377: _delay((unsigned long)((750)*(32000000/4000.0)));
 15991  00209C  0E1F               	movlw	31
 15992  00209E  0100               	movlb	0	; () banked
 15993  0020A0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15994  0020A2  0E71               	movlw	113
 15995  0020A4  0100               	movlb	0	; () banked
 15996  0020A6  6FAB               	movwf	??_BothServos& (0+255),b
 15997  0020A8  0E1E               	movlw	30
 15998  0020AA                     u11267:
 15999  0020AA  2EE8               	decfsz	wreg,f,c
 16000  0020AC  D7FE               	bra	u11267
 16001  0020AE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16002  0020B0  D7FC               	bra	u11267
 16003  0020B2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16004  0020B4  D7FA               	bra	u11267
 16005  0020B6  F000               	nop	
 16006                           
 16007                           ;Test.c: 378: updateServoPosition(1260, 3);
 16008  0020B8  0E04               	movlw	4
 16009  0020BA  0100               	movlb	0	; () banked
 16010  0020BC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16011  0020BE  0EEC               	movlw	236
 16012  0020C0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16013  0020C2  0E00               	movlw	0
 16014  0020C4  0100               	movlb	0	; () banked
 16015  0020C6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16016  0020C8  0E03               	movlw	3
 16017  0020CA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16018  0020CC  ECB4  F026         	call	_updateServoPosition	;wreg free
 16019                           
 16020                           ;Test.c: 379: _delay((unsigned long)((700)*(32000000/4000.0)));
 16021  0020D0  0E1D               	movlw	29
 16022  0020D2  0100               	movlb	0	; () banked
 16023  0020D4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16024  0020D6  0E69               	movlw	105
 16025  0020D8  0100               	movlb	0	; () banked
 16026  0020DA  6FAB               	movwf	??_BothServos& (0+255),b
 16027  0020DC  0EA5               	movlw	165
 16028  0020DE                     u11277:
 16029  0020DE  2EE8               	decfsz	wreg,f,c
 16030  0020E0  D7FE               	bra	u11277
 16031  0020E2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16032  0020E4  D7FC               	bra	u11277
 16033  0020E6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16034  0020E8  D7FA               	bra	u11277
 16035                           
 16036                           ;Test.c: 380: updateServoPosition(1050, 3);
 16037  0020EA  0E04               	movlw	4
 16038  0020EC  0100               	movlb	0	; () banked
 16039  0020EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16040  0020F0  0E1A               	movlw	26
 16041  0020F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16042  0020F4  0E00               	movlw	0
 16043  0020F6  0100               	movlb	0	; () banked
 16044  0020F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16045  0020FA  0E03               	movlw	3
 16046  0020FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16047  0020FE  ECB4  F026         	call	_updateServoPosition	;wreg free
 16048                           
 16049                           ;Test.c: 381: _delay((unsigned long)((750)*(32000000/4000.0)));
 16050  002102  0E1F               	movlw	31
 16051  002104  0100               	movlb	0	; () banked
 16052  002106  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16053  002108  0E71               	movlw	113
 16054  00210A  0100               	movlb	0	; () banked
 16055  00210C  6FAB               	movwf	??_BothServos& (0+255),b
 16056  00210E  0E1E               	movlw	30
 16057  002110                     u11287:
 16058  002110  2EE8               	decfsz	wreg,f,c
 16059  002112  D7FE               	bra	u11287
 16060  002114  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16061  002116  D7FC               	bra	u11287
 16062  002118  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16063  00211A  D7FA               	bra	u11287
 16064  00211C  F000               	nop	
 16065                           
 16066                           ;Test.c: 383: updateServoPosition(500, 1);
 16067  00211E  0E01               	movlw	1
 16068  002120  0100               	movlb	0	; () banked
 16069  002122  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16070  002124  0EF4               	movlw	244
 16071  002126  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16072  002128  0E00               	movlw	0
 16073  00212A  0100               	movlb	0	; () banked
 16074  00212C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16075  00212E  0E01               	movlw	1
 16076  002130  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16077  002132  ECB4  F026         	call	_updateServoPosition	;wreg free
 16078                           
 16079                           ;Test.c: 384: updateServoPosition(1050, 3);
 16080  002136  0E04               	movlw	4
 16081  002138  0100               	movlb	0	; () banked
 16082  00213A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16083  00213C  0E1A               	movlw	26
 16084  00213E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16085  002140  0E00               	movlw	0
 16086  002142  0100               	movlb	0	; () banked
 16087  002144  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16088  002146  0E03               	movlw	3
 16089  002148  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16090  00214A  ECB4  F026         	call	_updateServoPosition	;wreg free
 16091                           
 16092                           ;Test.c: 385: _delay((unsigned long)((750)*(32000000/4000.0)));
 16093  00214E  0E1F               	movlw	31
 16094  002150  0100               	movlb	0	; () banked
 16095  002152  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16096  002154  0E71               	movlw	113
 16097  002156  0100               	movlb	0	; () banked
 16098  002158  6FAB               	movwf	??_BothServos& (0+255),b
 16099  00215A  0E1E               	movlw	30
 16100  00215C                     u11297:
 16101  00215C  2EE8               	decfsz	wreg,f,c
 16102  00215E  D7FE               	bra	u11297
 16103  002160  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16104  002162  D7FC               	bra	u11297
 16105  002164  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16106  002166  D7FA               	bra	u11297
 16107  002168  F000               	nop	
 16108                           
 16109                           ;Test.c: 386: updateServoPosition(1260, 3);
 16110  00216A  0E04               	movlw	4
 16111  00216C  0100               	movlb	0	; () banked
 16112  00216E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16113  002170  0EEC               	movlw	236
 16114  002172  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16115  002174  0E00               	movlw	0
 16116  002176  0100               	movlb	0	; () banked
 16117  002178  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16118  00217A  0E03               	movlw	3
 16119  00217C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16120  00217E  ECB4  F026         	call	_updateServoPosition	;wreg free
 16121                           
 16122                           ;Test.c: 387: _delay((unsigned long)((700)*(32000000/4000.0)));
 16123  002182  0E1D               	movlw	29
 16124  002184  0100               	movlb	0	; () banked
 16125  002186  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16126  002188  0E69               	movlw	105
 16127  00218A  0100               	movlb	0	; () banked
 16128  00218C  6FAB               	movwf	??_BothServos& (0+255),b
 16129  00218E  0EA5               	movlw	165
 16130  002190                     u11307:
 16131  002190  2EE8               	decfsz	wreg,f,c
 16132  002192  D7FE               	bra	u11307
 16133  002194  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16134  002196  D7FC               	bra	u11307
 16135  002198  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16136  00219A  D7FA               	bra	u11307
 16137                           
 16138                           ;Test.c: 388: updateServoPosition(1050, 3);
 16139  00219C  0E04               	movlw	4
 16140  00219E  0100               	movlb	0	; () banked
 16141  0021A0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16142  0021A2  0E1A               	movlw	26
 16143  0021A4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16144  0021A6  0E00               	movlw	0
 16145  0021A8  0100               	movlb	0	; () banked
 16146  0021AA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16147  0021AC  0E03               	movlw	3
 16148  0021AE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16149  0021B0  ECB4  F026         	call	_updateServoPosition	;wreg free
 16150                           
 16151                           ;Test.c: 389: _delay((unsigned long)((1500)*(32000000/4000.0)));
 16152  0021B4  0E3D               	movlw	61
 16153  0021B6  0100               	movlb	0	; () banked
 16154  0021B8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16155  0021BA  0EE1               	movlw	225
 16156  0021BC  0100               	movlb	0	; () banked
 16157  0021BE  6FAB               	movwf	??_BothServos& (0+255),b
 16158  0021C0  0E3F               	movlw	63
 16159  0021C2                     u11317:
 16160  0021C2  2EE8               	decfsz	wreg,f,c
 16161  0021C4  D7FE               	bra	u11317
 16162  0021C6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16163  0021C8  D7FC               	bra	u11317
 16164  0021CA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16165  0021CC  D7FA               	bra	u11317
 16166  0021CE  D000               	nop2	
 16167                           
 16168                           ;Test.c: 391: updateServoPosition(1670, 1);
 16169  0021D0  0E06               	movlw	6
 16170  0021D2  0100               	movlb	0	; () banked
 16171  0021D4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16172  0021D6  0E86               	movlw	134
 16173  0021D8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16174  0021DA  0E00               	movlw	0
 16175  0021DC  0100               	movlb	0	; () banked
 16176  0021DE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16177  0021E0  0E01               	movlw	1
 16178  0021E2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16179  0021E4  ECB4  F026         	call	_updateServoPosition	;wreg free
 16180                           
 16181                           ;Test.c: 392: updateServoPosition(1050, 3);
 16182  0021E8  0E04               	movlw	4
 16183  0021EA  0100               	movlb	0	; () banked
 16184  0021EC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16185  0021EE  0E1A               	movlw	26
 16186  0021F0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16187  0021F2  0E00               	movlw	0
 16188  0021F4  0100               	movlb	0	; () banked
 16189  0021F6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16190  0021F8  0E03               	movlw	3
 16191  0021FA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16192  0021FC  ECB4  F026         	call	_updateServoPosition	;wreg free
 16193                           
 16194                           ;Test.c: 393: _delay((unsigned long)((750)*(32000000/4000.0)));
 16195  002200  0E1F               	movlw	31
 16196  002202  0100               	movlb	0	; () banked
 16197  002204  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16198  002206  0E71               	movlw	113
 16199  002208  0100               	movlb	0	; () banked
 16200  00220A  6FAB               	movwf	??_BothServos& (0+255),b
 16201  00220C  0E1E               	movlw	30
 16202  00220E                     u11327:
 16203  00220E  2EE8               	decfsz	wreg,f,c
 16204  002210  D7FE               	bra	u11327
 16205  002212  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16206  002214  D7FC               	bra	u11327
 16207  002216  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16208  002218  D7FA               	bra	u11327
 16209  00221A  F000               	nop	
 16210                           
 16211                           ;Test.c: 394: updateServoPosition(1390, 3);
 16212  00221C  0E05               	movlw	5
 16213  00221E  0100               	movlb	0	; () banked
 16214  002220  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16215  002222  0E6E               	movlw	110
 16216  002224  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16217  002226  0E00               	movlw	0
 16218  002228  0100               	movlb	0	; () banked
 16219  00222A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16220  00222C  0E03               	movlw	3
 16221  00222E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16222  002230  ECB4  F026         	call	_updateServoPosition	;wreg free
 16223                           
 16224                           ;Test.c: 395: _delay((unsigned long)((700)*(32000000/4000.0)));
 16225  002234  0E1D               	movlw	29
 16226  002236  0100               	movlb	0	; () banked
 16227  002238  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16228  00223A  0E69               	movlw	105
 16229  00223C  0100               	movlb	0	; () banked
 16230  00223E  6FAB               	movwf	??_BothServos& (0+255),b
 16231  002240  0EA5               	movlw	165
 16232  002242                     u11337:
 16233  002242  2EE8               	decfsz	wreg,f,c
 16234  002244  D7FE               	bra	u11337
 16235  002246  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16236  002248  D7FC               	bra	u11337
 16237  00224A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16238  00224C  D7FA               	bra	u11337
 16239                           
 16240                           ;Test.c: 396: updateServoPosition(1050, 3);
 16241  00224E  0E04               	movlw	4
 16242  002250  0100               	movlb	0	; () banked
 16243  002252  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16244  002254  0E1A               	movlw	26
 16245  002256  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16246  002258  0E00               	movlw	0
 16247  00225A  0100               	movlb	0	; () banked
 16248  00225C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16249  00225E  0E03               	movlw	3
 16250  002260  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16251  002262  ECB4  F026         	call	_updateServoPosition	;wreg free
 16252                           
 16253                           ;Test.c: 397: _delay((unsigned long)((750)*(32000000/4000.0)));
 16254  002266  0E1F               	movlw	31
 16255  002268  0100               	movlb	0	; () banked
 16256  00226A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16257  00226C  0E71               	movlw	113
 16258  00226E  0100               	movlb	0	; () banked
 16259  002270  6FAB               	movwf	??_BothServos& (0+255),b
 16260  002272  0E1E               	movlw	30
 16261  002274                     u11347:
 16262  002274  2EE8               	decfsz	wreg,f,c
 16263  002276  D7FE               	bra	u11347
 16264  002278  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16265  00227A  D7FC               	bra	u11347
 16266  00227C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16267  00227E  D7FA               	bra	u11347
 16268  002280  F000               	nop	
 16269                           
 16270                           ;Test.c: 399: updateServoPosition(2400, 1);
 16271  002282  0E09               	movlw	9
 16272  002284  0100               	movlb	0	; () banked
 16273  002286  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16274  002288  0E60               	movlw	96
 16275  00228A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16276  00228C  0E00               	movlw	0
 16277  00228E  0100               	movlb	0	; () banked
 16278  002290  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16279  002292  0E01               	movlw	1
 16280  002294  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16281  002296  ECB4  F026         	call	_updateServoPosition	;wreg free
 16282                           
 16283                           ;Test.c: 400: updateServoPosition(1050, 3);
 16284  00229A  0E04               	movlw	4
 16285  00229C  0100               	movlb	0	; () banked
 16286  00229E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16287  0022A0  0E1A               	movlw	26
 16288  0022A2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16289  0022A4  0E00               	movlw	0
 16290  0022A6  0100               	movlb	0	; () banked
 16291  0022A8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16292  0022AA  0E03               	movlw	3
 16293  0022AC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16294  0022AE  ECB4  F026         	call	_updateServoPosition	;wreg free
 16295                           
 16296                           ;Test.c: 401: _delay((unsigned long)((750)*(32000000/4000.0)));
 16297  0022B2  0E1F               	movlw	31
 16298  0022B4  0100               	movlb	0	; () banked
 16299  0022B6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16300  0022B8  0E71               	movlw	113
 16301  0022BA  0100               	movlb	0	; () banked
 16302  0022BC  6FAB               	movwf	??_BothServos& (0+255),b
 16303  0022BE  0E1E               	movlw	30
 16304  0022C0                     u11357:
 16305  0022C0  2EE8               	decfsz	wreg,f,c
 16306  0022C2  D7FE               	bra	u11357
 16307  0022C4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16308  0022C6  D7FC               	bra	u11357
 16309  0022C8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16310  0022CA  D7FA               	bra	u11357
 16311  0022CC  F000               	nop	
 16312                           
 16313                           ;Test.c: 402: updateServoPosition(1390, 3);
 16314  0022CE  0E05               	movlw	5
 16315  0022D0  0100               	movlb	0	; () banked
 16316  0022D2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16317  0022D4  0E6E               	movlw	110
 16318  0022D6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16319  0022D8  0E00               	movlw	0
 16320  0022DA  0100               	movlb	0	; () banked
 16321  0022DC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16322  0022DE  0E03               	movlw	3
 16323  0022E0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16324  0022E2  ECB4  F026         	call	_updateServoPosition	;wreg free
 16325                           
 16326                           ;Test.c: 403: _delay((unsigned long)((700)*(32000000/4000.0)));
 16327  0022E6  0E1D               	movlw	29
 16328  0022E8  0100               	movlb	0	; () banked
 16329  0022EA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16330  0022EC  0E69               	movlw	105
 16331  0022EE  0100               	movlb	0	; () banked
 16332  0022F0  6FAB               	movwf	??_BothServos& (0+255),b
 16333  0022F2  0EA5               	movlw	165
 16334  0022F4                     u11367:
 16335  0022F4  2EE8               	decfsz	wreg,f,c
 16336  0022F6  D7FE               	bra	u11367
 16337  0022F8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16338  0022FA  D7FC               	bra	u11367
 16339  0022FC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16340  0022FE  D7FA               	bra	u11367
 16341                           
 16342                           ;Test.c: 404: updateServoPosition(1050, 3);
 16343  002300  0E04               	movlw	4
 16344  002302  0100               	movlb	0	; () banked
 16345  002304  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16346  002306  0E1A               	movlw	26
 16347  002308  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16348  00230A  0E00               	movlw	0
 16349  00230C  0100               	movlb	0	; () banked
 16350  00230E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16351  002310  0E03               	movlw	3
 16352  002312  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16353  002314  ECB4  F026         	call	_updateServoPosition	;wreg free
 16354                           
 16355                           ;Test.c: 405: _delay((unsigned long)((750)*(32000000/4000.0)));
 16356  002318  0E1F               	movlw	31
 16357  00231A  0100               	movlb	0	; () banked
 16358  00231C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16359  00231E  0E71               	movlw	113
 16360  002320  0100               	movlb	0	; () banked
 16361  002322  6FAB               	movwf	??_BothServos& (0+255),b
 16362  002324  0E1E               	movlw	30
 16363  002326                     u11377:
 16364  002326  2EE8               	decfsz	wreg,f,c
 16365  002328  D7FE               	bra	u11377
 16366  00232A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16367  00232C  D7FC               	bra	u11377
 16368  00232E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16369  002330  D7FA               	bra	u11377
 16370  002332  F000               	nop	
 16371                           
 16372                           ;Test.c: 407: stopSignals();
 16373  002334  EC70  F02D         	call	_stopSignals	;wreg free
 16374                           
 16375                           ;Test.c: 408: machine_state = Testing_state;
 16376  002338  0E03               	movlw	3
 16377  00233A  0100               	movlb	0	; () banked
 16378  00233C  6FFC               	movwf	_machine_state& (0+255),b
 16379                           
 16380                           ; BSR set to: 0
 16381  00233E  0012               	return		;funcret
 16382  002340                     __end_of_BothServos:
 16383                           	opt stack 0
 16384                           tblptru	equ	0xFF8
 16385                           tblptrh	equ	0xFF7
 16386                           tblptrl	equ	0xFF6
 16387                           tablat	equ	0xFF5
 16388                           prodh	equ	0xFF4
 16389                           prodl	equ	0xFF3
 16390                           intcon	equ	0xFF2
 16391                           intcon2	equ	0xFF1
 16392                           intcon3	equ	0xFF0
 16393                           postinc0	equ	0xFEE
 16394                           wreg	equ	0xFE8
 16395                           postdec1	equ	0xFE5
 16396                           fsr1l	equ	0xFE1
 16397                           indf2	equ	0xFDF
 16398                           postinc2	equ	0xFDE
 16399                           postdec2	equ	0xFDD
 16400                           fsr2h	equ	0xFDA
 16401                           fsr2l	equ	0xFD9
 16402                           status	equ	0xFD8
 16403                           
 16404 ;; *************** function _stopSignals *****************
 16405 ;; Defined at:
 16406 ;;		line 71 in file "main.c"
 16407 ;; Parameters:    Size  Location     Type
 16408 ;;		None
 16409 ;; Auto vars:     Size  Location     Type
 16410 ;;		None
 16411 ;; Return value:  Size  Location     Type
 16412 ;;                  1    wreg      void 
 16413 ;; Registers used:
 16414 ;;		wreg, status,2
 16415 ;; Tracked objects:
 16416 ;;		On entry : 0/0
 16417 ;;		On exit  : 0/0
 16418 ;;		Unchanged: 0/0
 16419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16424 ;;Total ram usage:        0 bytes
 16425 ;; Hardware stack levels used:    1
 16426 ;; Hardware stack levels required when called:    7
 16427 ;; This function calls:
 16428 ;;		Nothing
 16429 ;; This function is called by:
 16430 ;;		_main
 16431 ;;		_BothServos
 16432 ;;		_PlatformTest
 16433 ;;		_arm
 16434 ;; This function uses a non-reentrant model
 16435 ;;
 16436                           
 16437                           	psect	text51
 16438  005AE0                     __ptext51:
 16439                           	opt stack 0
 16440  005AE0                     _stopSignals:
 16441                           	opt stack 23
 16442                           
 16443                           ;main.c: 72: LATA = 0x00;
 16444                           
 16445                           ; BSR set to: 0
 16446                           ;incstack = 0
 16447  005AE0  0E00               	movlw	0
 16448  005AE2  6E89               	movwf	3977,c	;volatile
 16449                           
 16450                           ;main.c: 73: LATB = 0x00;
 16451  005AE4  0E00               	movlw	0
 16452  005AE6  6E8A               	movwf	3978,c	;volatile
 16453                           
 16454                           ;main.c: 74: LATC = 0x00;
 16455  005AE8  0E00               	movlw	0
 16456  005AEA  6E8B               	movwf	3979,c	;volatile
 16457                           
 16458                           ;main.c: 75: LATD = 0x00;
 16459  005AEC  0E00               	movlw	0
 16460  005AEE  6E8C               	movwf	3980,c	;volatile
 16461                           
 16462                           ;main.c: 76: LATE = 0x00;
 16463  005AF0  0E00               	movlw	0
 16464  005AF2  6E8D               	movwf	3981,c	;volatile
 16465                           
 16466                           ;main.c: 77: TMR1IF = 0;
 16467  005AF4  909E               	bcf	3998,0,c	;volatile
 16468                           
 16469                           ;main.c: 78: TMR2IF = 0;
 16470  005AF6  929E               	bcf	3998,1,c	;volatile
 16471                           
 16472                           ;main.c: 79: TMR3IF = 0;
 16473  005AF8  92A1               	bcf	4001,1,c	;volatile
 16474  005AFA  0012               	return		;funcret
 16475  005AFC                     __end_of_stopSignals:
 16476                           	opt stack 0
 16477                           tblptru	equ	0xFF8
 16478                           tblptrh	equ	0xFF7
 16479                           tblptrl	equ	0xFF6
 16480                           tablat	equ	0xFF5
 16481                           prodh	equ	0xFF4
 16482                           prodl	equ	0xFF3
 16483                           intcon	equ	0xFF2
 16484                           intcon2	equ	0xFF1
 16485                           intcon3	equ	0xFF0
 16486                           postinc0	equ	0xFEE
 16487                           wreg	equ	0xFE8
 16488                           postdec1	equ	0xFE5
 16489                           fsr1l	equ	0xFE1
 16490                           indf2	equ	0xFDF
 16491                           postinc2	equ	0xFDE
 16492                           postdec2	equ	0xFDD
 16493                           fsr2h	equ	0xFDA
 16494                           fsr2l	equ	0xFD9
 16495                           status	equ	0xFD8
 16496                           
 16497 ;; *************** function _initServos *****************
 16498 ;; Defined at:
 16499 ;;		line 469 in file "sort.c"
 16500 ;; Parameters:    Size  Location     Type
 16501 ;;		None
 16502 ;; Auto vars:     Size  Location     Type
 16503 ;;		None
 16504 ;; Return value:  Size  Location     Type
 16505 ;;                  1    wreg      void 
 16506 ;; Registers used:
 16507 ;;		wreg, status,2, status,0, cstack
 16508 ;; Tracked objects:
 16509 ;;		On entry : 0/0
 16510 ;;		On exit  : 0/0
 16511 ;;		Unchanged: 0/0
 16512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16515 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16516 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16517 ;;Total ram usage:        1 bytes
 16518 ;; Hardware stack levels used:    1
 16519 ;; Hardware stack levels required when called:    8
 16520 ;; This function calls:
 16521 ;;		_updateServoPosition
 16522 ;; This function is called by:
 16523 ;;		_Loading
 16524 ;;		_BothServos
 16525 ;; This function uses a non-reentrant model
 16526 ;;
 16527                           
 16528                           	psect	text52
 16529  004DE6                     __ptext52:
 16530                           	opt stack 0
 16531  004DE6                     _initServos:
 16532                           	opt stack 20
 16533                           
 16534                           ;sort.c: 471: updateServoPosition(1200, 1);
 16535                           
 16536                           ;incstack = 0
 16537  004DE6  0E04               	movlw	4
 16538  004DE8  0100               	movlb	0	; () banked
 16539  004DEA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16540  004DEC  0EB0               	movlw	176
 16541  004DEE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16542  004DF0  0E00               	movlw	0
 16543  004DF2  0100               	movlb	0	; () banked
 16544  004DF4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16545  004DF6  0E01               	movlw	1
 16546  004DF8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16547  004DFA  ECB4  F026         	call	_updateServoPosition	;wreg free
 16548                           
 16549                           ;sort.c: 472: updateServoPosition(1050, 3);
 16550  004DFE  0E04               	movlw	4
 16551  004E00  0100               	movlb	0	; () banked
 16552  004E02  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16553  004E04  0E1A               	movlw	26
 16554  004E06  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16555  004E08  0E00               	movlw	0
 16556  004E0A  0100               	movlb	0	; () banked
 16557  004E0C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16558  004E0E  0E03               	movlw	3
 16559  004E10  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16560  004E12  ECB4  F026         	call	_updateServoPosition	;wreg free
 16561                           
 16562                           ;sort.c: 473: TMR1ON = 1;
 16563  004E16  80CD               	bsf	4045,0,c	;volatile
 16564                           
 16565                           ;sort.c: 474: was_low_1 = 0;
 16566  004E18  0E00               	movlw	0
 16567  004E1A  6E78               	movwf	_was_low_1+1,c	;volatile
 16568  004E1C  0E00               	movlw	0
 16569  004E1E  6E77               	movwf	_was_low_1,c	;volatile
 16570                           
 16571                           ;sort.c: 476: _delay((unsigned long)((5)*(32000000/4000.0)));
 16572  004E20  0E34               	movlw	52
 16573  004E22  0100               	movlb	0	; () banked
 16574  004E24  6F88               	movwf	??_initServos& (0+255),b
 16575  004E26  0EF1               	movlw	241
 16576  004E28                     u11387:
 16577  004E28  2EE8               	decfsz	wreg,f,c
 16578  004E2A  D7FE               	bra	u11387
 16579  004E2C  2F88               	decfsz	??_initServos& (0+255),f,b
 16580  004E2E  D7FC               	bra	u11387
 16581  004E30  D000               	nop2	
 16582                           
 16583                           ;sort.c: 478: TMR3ON = 1;
 16584  004E32  80B1               	bsf	4017,0,c	;volatile
 16585                           
 16586                           ;sort.c: 479: was_low_3 = 0;
 16587  004E34  0E00               	movlw	0
 16588  004E36  6E7C               	movwf	_was_low_3+1,c	;volatile
 16589  004E38  0E00               	movlw	0
 16590  004E3A  6E7B               	movwf	_was_low_3,c	;volatile
 16591                           
 16592                           ;sort.c: 482: _delay((unsigned long)((1)*(32000000/4000.0)));
 16593  004E3C  0E0B               	movlw	11
 16594  004E3E  0100               	movlb	0	; () banked
 16595  004E40  6F88               	movwf	??_initServos& (0+255),b
 16596  004E42  0E62               	movlw	98
 16597  004E44                     u11397:
 16598  004E44  2EE8               	decfsz	wreg,f,c
 16599  004E46  D7FE               	bra	u11397
 16600  004E48  2F88               	decfsz	??_initServos& (0+255),f,b
 16601  004E4A  D7FC               	bra	u11397
 16602  004E4C  F000               	nop	
 16603                           
 16604                           ;sort.c: 483: LATBbits.LATB3 = 0;
 16605  004E4E  968A               	bcf	3978,3,c	;volatile
 16606                           
 16607                           ;sort.c: 484: TMR2ON = 1;
 16608  004E50  84CA               	bsf	4042,2,c	;volatile
 16609                           
 16610                           ;sort.c: 485: was_low_2 = 0;
 16611  004E52  0E00               	movlw	0
 16612  004E54  6E7A               	movwf	_was_low_2+1,c	;volatile
 16613  004E56  0E00               	movlw	0
 16614  004E58  6E79               	movwf	_was_low_2,c	;volatile
 16615                           
 16616                           ;sort.c: 487: LATCbits.LATC0 = 1;
 16617  004E5A  808B               	bsf	3979,0,c	;volatile
 16618  004E5C  0012               	return		;funcret
 16619  004E5E                     __end_of_initServos:
 16620                           	opt stack 0
 16621                           tblptru	equ	0xFF8
 16622                           tblptrh	equ	0xFF7
 16623                           tblptrl	equ	0xFF6
 16624                           tablat	equ	0xFF5
 16625                           prodh	equ	0xFF4
 16626                           prodl	equ	0xFF3
 16627                           intcon	equ	0xFF2
 16628                           intcon2	equ	0xFF1
 16629                           intcon3	equ	0xFF0
 16630                           postinc0	equ	0xFEE
 16631                           wreg	equ	0xFE8
 16632                           postdec1	equ	0xFE5
 16633                           fsr1l	equ	0xFE1
 16634                           indf2	equ	0xFDF
 16635                           postinc2	equ	0xFDE
 16636                           postdec2	equ	0xFDD
 16637                           fsr2h	equ	0xFDA
 16638                           fsr2l	equ	0xFD9
 16639                           status	equ	0xFD8
 16640                           
 16641 ;; *************** function _updateServoPosition *****************
 16642 ;; Defined at:
 16643 ;;		line 560 in file "sort.c"
 16644 ;; Parameters:    Size  Location     Type
 16645 ;;  time_us         2    0[BANK0 ] int 
 16646 ;;  timer           2    2[BANK0 ] int 
 16647 ;; Auto vars:     Size  Location     Type
 16648 ;;  my_time         2    6[BANK0 ] unsigned int 
 16649 ;; Return value:  Size  Location     Type
 16650 ;;                  1    wreg      void 
 16651 ;; Registers used:
 16652 ;;		wreg, status,2, status,0
 16653 ;; Tracked objects:
 16654 ;;		On entry : 0/0
 16655 ;;		On exit  : 0/0
 16656 ;;		Unchanged: 0/0
 16657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16658 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16659 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16660 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16661 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16662 ;;Total ram usage:        8 bytes
 16663 ;; Hardware stack levels used:    1
 16664 ;; Hardware stack levels required when called:    7
 16665 ;; This function calls:
 16666 ;;		Nothing
 16667 ;; This function is called by:
 16668 ;;		_Distribution
 16669 ;;		_initServos
 16670 ;;		_actuatorTest
 16671 ;;		_BothServos
 16672 ;; This function uses a non-reentrant model
 16673 ;;
 16674                           
 16675                           	psect	text53
 16676  004D68                     __ptext53:
 16677                           	opt stack 0
 16678  004D68                     _updateServoPosition:
 16679                           	opt stack 20
 16680                           
 16681                           ;sort.c: 561: unsigned int my_time = 65535 - time_us;
 16682                           
 16683                           ;incstack = 0
 16684  004D68  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 16685  004D6C  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 16686  004D70  0100               	movlb	0	; () banked
 16687  004D72  1F84               	comf	??_updateServoPosition& (0+255),f,b
 16688  004D74  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 16689  004D76  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 16690  004D78  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 16691  004D7A  0EFF               	movlw	255
 16692  004D7C  0100               	movlb	0	; () banked
 16693  004D7E  2584               	addwf	??_updateServoPosition& (0+255),w,b
 16694  004D80  0100               	movlb	0	; () banked
 16695  004D82  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 16696  004D84  0EFF               	movlw	255
 16697  004D86  0100               	movlb	0	; () banked
 16698  004D88  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 16699  004D8A  0100               	movlb	0	; () banked
 16700  004D8C  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 16701                           
 16702                           ;sort.c: 562: switch(timer){
 16703  004D8E  D019               	goto	l6928
 16704  004D90                     l6922:
 16705                           
 16706                           ; BSR set to: 0
 16707                           ;sort.c: 564: servoTimes[0] = my_time >> 8;
 16708  004D90  0100               	movlb	0	; () banked
 16709  004D92  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 16710  004D94  6E5B               	movwf	_servoTimes,c
 16711  004D96  6A5C               	clrf	_servoTimes+1,c
 16712                           
 16713                           ;sort.c: 565: servoTimes[1] = my_time & 0xFF;
 16714  004D98  0100               	movlb	0	; () banked
 16715  004D9A  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 16716  004D9C  6E5D               	movwf	_servoTimes+2,c
 16717  004D9E  6A5E               	clrf	_servoTimes+3,c
 16718                           
 16719                           ; BSR set to: 0
 16720                           ;sort.c: 567: pan_servo_state = time_us;
 16721  004DA0  C080  F06B         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 16722  004DA4  C081  F06C         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 16723  004DA8                     l931:
 16724                           
 16725                           ; BSR set to: 0
 16726                           ;sort.c: 569: servoTimes[2] = my_time >> 8;
 16727  004DA8  0100               	movlb	0	; () banked
 16728  004DAA  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 16729  004DAC  6E5F               	movwf	_servoTimes+4,c
 16730  004DAE  6A60               	clrf	_servoTimes+5,c
 16731                           
 16732                           ;sort.c: 570: servoTimes[3] = my_time & 0xFF;
 16733  004DB0  0100               	movlb	0	; () banked
 16734  004DB2  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 16735  004DB4  6E61               	movwf	_servoTimes+6,c
 16736  004DB6  6A62               	clrf	_servoTimes+7,c
 16737                           
 16738                           ; BSR set to: 0
 16739                           ;sort.c: 572: tilt_servo_state = time_us;
 16740  004DB8  C080  F071         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 16741  004DBC  C081  F072         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 16742                           
 16743                           ;sort.c: 573: }
 16744  004DC0  0012               	return	
 16745  004DC2                     l6928:
 16746                           
 16747                           ; BSR set to: 0
 16748  004DC2  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 16749  004DC6  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 16750                           
 16751                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16752                           ; Switch size 1, requested type "space"
 16753                           ; Number of cases is 1, Range of values is 0 to 0
 16754                           ; switch strategies available:
 16755                           ; Name         Instructions Cycles
 16756                           ; simple_byte            4     3 (average)
 16757                           ;	Chosen strategy is simple_byte
 16758  004DCA  0100               	movlb	0	; () banked
 16759  004DCC  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 16760  004DCE  0A00               	xorlw	0	; case 0
 16761  004DD0  A4D8               	btfss	status,2,c
 16762  004DD2  0012               	return	
 16763                           
 16764                           ; BSR set to: 0
 16765                           ; Switch size 1, requested type "space"
 16766                           ; Number of cases is 2, Range of values is 1 to 3
 16767                           ; switch strategies available:
 16768                           ; Name         Instructions Cycles
 16769                           ; simple_byte            7     4 (average)
 16770                           ;	Chosen strategy is simple_byte
 16771  004DD4  0100               	movlb	0	; () banked
 16772  004DD6  5184               	movf	??_updateServoPosition& (0+255),w,b
 16773  004DD8  0A01               	xorlw	1	; case 1
 16774  004DDA  B4D8               	btfsc	status,2,c
 16775  004DDC  D7D9               	goto	l6922
 16776  004DDE  0A02               	xorlw	2	; case 3
 16777  004DE0  A4D8               	btfss	status,2,c
 16778  004DE2  0012               	return	
 16779  004DE4  D7E1               	goto	l931
 16780  004DE6                     __end_of_updateServoPosition:
 16781                           	opt stack 0
 16782                           tblptru	equ	0xFF8
 16783                           tblptrh	equ	0xFF7
 16784                           tblptrl	equ	0xFF6
 16785                           tablat	equ	0xFF5
 16786                           prodh	equ	0xFF4
 16787                           prodl	equ	0xFF3
 16788                           intcon	equ	0xFF2
 16789                           intcon2	equ	0xFF1
 16790                           intcon3	equ	0xFF0
 16791                           postinc0	equ	0xFEE
 16792                           wreg	equ	0xFE8
 16793                           postdec1	equ	0xFE5
 16794                           fsr1l	equ	0xFE1
 16795                           indf2	equ	0xFDF
 16796                           postinc2	equ	0xFDE
 16797                           postdec2	equ	0xFDD
 16798                           fsr2h	equ	0xFDA
 16799                           fsr2l	equ	0xFD9
 16800                           status	equ	0xFD8
 16801                           
 16802 ;; *************** function _BlockerTest *****************
 16803 ;; Defined at:
 16804 ;;		line 581 in file "Test.c"
 16805 ;; Parameters:    Size  Location     Type
 16806 ;;		None
 16807 ;; Auto vars:     Size  Location     Type
 16808 ;;  i               2   45[BANK0 ] int 
 16809 ;;  cond_flag       2   51[BANK0 ] int 
 16810 ;;  cam_flag        2   49[BANK0 ] int 
 16811 ;;  res             2   47[BANK0 ] int 
 16812 ;; Return value:  Size  Location     Type
 16813 ;;                  1    wreg      void 
 16814 ;; Registers used:
 16815 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16816 ;; Tracked objects:
 16817 ;;		On entry : 0/0
 16818 ;;		On exit  : 0/0
 16819 ;;		Unchanged: 0/0
 16820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16822 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16823 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16824 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16825 ;;Total ram usage:       10 bytes
 16826 ;; Hardware stack levels used:    1
 16827 ;; Hardware stack levels required when called:   10
 16828 ;; This function calls:
 16829 ;;		_lcdInst
 16830 ;;		_printf
 16831 ;;		_readADC
 16832 ;; This function is called by:
 16833 ;;		_Test
 16834 ;; This function uses a non-reentrant model
 16835 ;;
 16836                           
 16837                           	psect	text54
 16838  003CDC                     __ptext54:
 16839                           	opt stack 0
 16840  003CDC                     _BlockerTest:
 16841                           	opt stack 19
 16842                           
 16843                           ;Test.c: 582: readADC(2);
 16844                           
 16845                           ; BSR set to: 0
 16846                           ;incstack = 0
 16847  003CDC  0E02               	movlw	2
 16848  003CDE  ECB4  F02C         	call	_readADC
 16849                           
 16850                           ;Test.c: 583: int res = ADRESH<<8 | ADRESL;
 16851  003CE2  50C3               	movf	4035,w,c	;volatile
 16852  003CE4  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 16853  003CE8  0100               	movlb	0	; () banked
 16854  003CEA  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 16855  003CEC  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 16856  003CF0  0100               	movlb	0	; () banked
 16857  003CF2  6BAB               	clrf	??_BlockerTest& (0+255),b
 16858  003CF4  0100               	movlb	0	; () banked
 16859  003CF6  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 16860  003CF8  0100               	movlb	0	; () banked
 16861  003CFA  6FAF               	movwf	BlockerTest@res& (0+255),b
 16862  003CFC  0100               	movlb	0	; () banked
 16863  003CFE  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 16864  003D00  0100               	movlb	0	; () banked
 16865  003D02  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 16866                           
 16867                           ; BSR set to: 0
 16868                           ;Test.c: 585: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16869  003D04  0E01               	movlw	1
 16870  003D06  ECC9  F02D         	call	_lcdInst
 16871  003D0A  0E68               	movlw	104
 16872  003D0C  0100               	movlb	0	; () banked
 16873  003D0E  6FAB               	movwf	??_BlockerTest& (0+255),b
 16874  003D10  0EE4               	movlw	228
 16875  003D12                     u11407:
 16876  003D12  2EE8               	decfsz	wreg,f,c
 16877  003D14  D7FE               	bra	u11407
 16878  003D16  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 16879  003D18  D7FC               	bra	u11407
 16880  003D1A  F000               	nop	
 16881  003D1C  0E80               	movlw	128
 16882  003D1E  ECC9  F02D         	call	_lcdInst
 16883                           
 16884                           ;Test.c: 586: printf("D:RET|2:C %d  ", res);
 16885  003D22  0E6D               	movlw	low STR_123
 16886  003D24  0100               	movlb	0	; () banked
 16887  003D26  6F8E               	movwf	printf@f& (0+255),b
 16888  003D28  0EFE               	movlw	high STR_123
 16889  003D2A  0100               	movlb	0	; () banked
 16890  003D2C  6F8F               	movwf	(printf@f+1)& (0+255),b
 16891  003D2E  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 16892  003D32  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 16893  003D36  EC8D  F00D         	call	_printf	;wreg free
 16894                           
 16895                           ;Test.c: 587: lcdInst(0b11000000);;
 16896  003D3A  0EC0               	movlw	192
 16897  003D3C  ECC9  F02D         	call	_lcdInst
 16898                           
 16899                           ;Test.c: 588: printf("OTHER: CAM TOGGLE");
 16900  003D40  0E1C               	movlw	low STR_124
 16901  003D42  0100               	movlb	0	; () banked
 16902  003D44  6F8E               	movwf	printf@f& (0+255),b
 16903  003D46  0EFB               	movlw	high STR_124
 16904  003D48  0100               	movlb	0	; () banked
 16905  003D4A  6F8F               	movwf	(printf@f+1)& (0+255),b
 16906  003D4C  EC8D  F00D         	call	_printf	;wreg free
 16907                           
 16908                           ;Test.c: 589: int cam_flag = 1;
 16909  003D50  0E00               	movlw	0
 16910  003D52  0100               	movlb	0	; () banked
 16911  003D54  6FB2               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 16912  003D56  0E01               	movlw	1
 16913  003D58  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 16914                           
 16915                           ; BSR set to: 0
 16916                           ;Test.c: 590: int cond_flag = 0;
 16917  003D5A  0E00               	movlw	0
 16918  003D5C  0100               	movlb	0	; () banked
 16919  003D5E  6FB4               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 16920  003D60  0E00               	movlw	0
 16921  003D62  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 16922                           
 16923                           ; BSR set to: 0
 16924                           ;Test.c: 593: while(PORTBbits.RB1 == 0){
 16925                           
 16926                           ;Test.c: 592: while(1){
 16927  003D64  D023               	goto	l9176
 16928  003D66                     l9168:
 16929                           
 16930                           ;Test.c: 594: readADC(2);
 16931  003D66  0E02               	movlw	2
 16932  003D68  ECB4  F02C         	call	_readADC
 16933                           
 16934                           ;Test.c: 595: res = ADRESH<<8 | ADRESL;
 16935  003D6C  50C3               	movf	4035,w,c	;volatile
 16936  003D6E  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 16937  003D72  0100               	movlb	0	; () banked
 16938  003D74  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 16939  003D76  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 16940  003D7A  0100               	movlb	0	; () banked
 16941  003D7C  6BAB               	clrf	??_BlockerTest& (0+255),b
 16942  003D7E  0100               	movlb	0	; () banked
 16943  003D80  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 16944  003D82  0100               	movlb	0	; () banked
 16945  003D84  6FAF               	movwf	BlockerTest@res& (0+255),b
 16946  003D86  0100               	movlb	0	; () banked
 16947  003D88  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 16948  003D8A  0100               	movlb	0	; () banked
 16949  003D8C  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 16950                           
 16951                           ; BSR set to: 0
 16952                           ;Test.c: 596: lcdInst(0b10000000);;
 16953  003D8E  0E80               	movlw	128
 16954  003D90  ECC9  F02D         	call	_lcdInst
 16955                           
 16956                           ;Test.c: 597: printf("D:RET|2:C %d  ", res);
 16957  003D94  0E6D               	movlw	low STR_123
 16958  003D96  0100               	movlb	0	; () banked
 16959  003D98  6F8E               	movwf	printf@f& (0+255),b
 16960  003D9A  0EFE               	movlw	high STR_123
 16961  003D9C  0100               	movlb	0	; () banked
 16962  003D9E  6F8F               	movwf	(printf@f+1)& (0+255),b
 16963  003DA0  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 16964  003DA4  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 16965  003DA8  EC8D  F00D         	call	_printf	;wreg free
 16966  003DAC                     l9176:
 16967  003DAC  A281               	btfss	3969,1,c	;volatile
 16968  003DAE  D7DB               	goto	l9168
 16969                           
 16970                           ;Test.c: 598: }
 16971                           ;Test.c: 599: if(PORTB >> 4 == 0b1111){
 16972  003DB0  3881               	swapf	3969,w,c	;volatile
 16973  003DB2  0B0F               	andlw	15
 16974  003DB4  0A0F               	xorlw	15
 16975  003DB6  B4D8               	btfsc	status,2,c
 16976  003DB8  0012               	return	
 16977                           
 16978                           ;Test.c: 602: else if(PORTB >> 4 == 0b0001){
 16979                           
 16980                           ;Test.c: 601: }
 16981                           
 16982                           ;Test.c: 600: break;
 16983  003DBA  3881               	swapf	3969,w,c	;volatile
 16984  003DBC  0B0F               	andlw	15
 16985  003DBE  06E8               	decf	wreg,f,c
 16986  003DC0  A4D8               	btfss	status,2,c
 16987  003DC2  D016               	goto	l9194
 16988                           
 16989                           ;Test.c: 603: if(cond_flag){
 16990  003DC4  0100               	movlb	0	; () banked
 16991  003DC6  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 16992  003DC8  0100               	movlb	0	; () banked
 16993  003DCA  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 16994  003DCC  B4D8               	btfsc	status,2,c
 16995  003DCE  D007               	goto	l1451
 16996                           
 16997                           ; BSR set to: 0
 16998                           ;Test.c: 604: LATAbits.LATA3 = 1;
 16999  003DD0  8689               	bsf	3977,3,c	;volatile
 17000  003DD2  D006               	goto	l9192
 17001  003DD4                     u8301:
 17002  003DD4  0E01               	movlw	1
 17003  003DD6                     u8310:
 17004  003DD6  0100               	movlb	0	; () banked
 17005  003DD8  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 17006  003DDA  6BB4               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 17007                           
 17008                           ;Test.c: 606: }
 17009  003DDC  D05F               	goto	l9222
 17010  003DDE                     l1451:
 17011                           
 17012                           ; BSR set to: 0
 17013                           ;Test.c: 607: else{
 17014                           ;Test.c: 608: LATAbits.LATA3 = 0;
 17015  003DDE  9689               	bcf	3977,3,c	;volatile
 17016  003DE0                     l9192:
 17017                           
 17018                           ; BSR set to: 0
 17019                           ;Test.c: 609: cond_flag = !cond_flag;
 17020  003DE0  0100               	movlb	0	; () banked
 17021  003DE2  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 17022  003DE4  0100               	movlb	0	; () banked
 17023  003DE6  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17024  003DE8  B4D8               	btfsc	status,2,c
 17025  003DEA  D7F4               	goto	u8301
 17026  003DEC  0E00               	movlw	0
 17027  003DEE  D7F3               	goto	u8310
 17028  003DF0                     l9194:
 17029                           
 17030                           ;Test.c: 612: else{
 17031                           ;Test.c: 613: if(cam_flag){
 17032  003DF0  0100               	movlb	0	; () banked
 17033  003DF2  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17034  003DF4  0100               	movlb	0	; () banked
 17035  003DF6  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17036  003DF8  B4D8               	btfsc	status,2,c
 17037  003DFA  D007               	goto	l9200
 17038                           
 17039                           ; BSR set to: 0
 17040                           ;Test.c: 614: LATCbits.LATC0 = 1;
 17041  003DFC  808B               	bsf	3979,0,c	;volatile
 17042  003DFE  D023               	goto	l9212
 17043  003E00                     u8351:
 17044  003E00  0E01               	movlw	1
 17045  003E02                     u8360:
 17046  003E02  0100               	movlb	0	; () banked
 17047  003E04  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 17048  003E06  6BB2               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 17049                           
 17050                           ;Test.c: 616: }
 17051  003E08  D049               	goto	l9222
 17052  003E0A                     l9200:
 17053                           
 17054                           ; BSR set to: 0
 17055                           ;Test.c: 617: else{
 17056                           ;Test.c: 618: for(int i=0;i<5000;i++)
 17057  003E0A  0E00               	movlw	0
 17058  003E0C  0100               	movlb	0	; () banked
 17059  003E0E  6FAE               	movwf	(BlockerTest@i+1)& (0+255),b
 17060  003E10  0E00               	movlw	0
 17061  003E12  6FAD               	movwf	BlockerTest@i& (0+255),b
 17062  003E14                     l9202:
 17063                           
 17064                           ; BSR set to: 0
 17065  003E14  0100               	movlb	0	; () banked
 17066  003E16  BFAE               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 17067  003E18  D008               	goto	l1456
 17068  003E1A  0E88               	movlw	136
 17069  003E1C  0100               	movlb	0	; () banked
 17070  003E1E  5DAD               	subwf	BlockerTest@i& (0+255),w,b
 17071  003E20  0E13               	movlw	19
 17072  003E22  0100               	movlb	0	; () banked
 17073  003E24  59AE               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 17074  003E26  B0D8               	btfsc	status,0,c
 17075  003E28  D00D               	goto	l1457
 17076  003E2A                     l1456:
 17077                           
 17078                           ; BSR set to: 0
 17079                           ;Test.c: 619: {
 17080                           ;Test.c: 620: LATCbits.LATC0 = 1;
 17081  003E2A  808B               	bsf	3979,0,c	;volatile
 17082                           
 17083                           ; BSR set to: 0
 17084                           ;Test.c: 621: _delay((unsigned long)((10)*(32000000/4000000.0)));
 17085  003E2C  0E1A               	movlw	26
 17086  003E2E                     u11417:
 17087  003E2E  2EE8               	decfsz	wreg,f,c
 17088  003E30  D7FE               	bra	u11417
 17089  003E32  D000               	nop2	
 17090                           
 17091                           ;Test.c: 622: LATCbits.LATC0 = 0;
 17092  003E34  908B               	bcf	3979,0,c	;volatile
 17093                           
 17094                           ;Test.c: 623: _delay((unsigned long)((90)*(32000000/4000000.0)));
 17095  003E36  0EF0               	movlw	240
 17096  003E38                     u11427:
 17097  003E38  2EE8               	decfsz	wreg,f,c
 17098  003E3A  D7FE               	bra	u11427
 17099  003E3C  0100               	movlb	0	; () banked
 17100  003E3E  4BAD               	infsnz	BlockerTest@i& (0+255),f,b
 17101  003E40  2BAE               	incf	(BlockerTest@i+1)& (0+255),f,b
 17102  003E42  D7E8               	goto	l9202
 17103  003E44                     l1457:
 17104                           
 17105                           ; BSR set to: 0
 17106                           ;Test.c: 624: }
 17107                           ;Test.c: 625: LATCbits.LATC0 = 0;
 17108  003E44  908B               	bcf	3979,0,c	;volatile
 17109  003E46                     l9212:
 17110                           
 17111                           ; BSR set to: 0
 17112                           ;Test.c: 626: cam_flag = !cam_flag;
 17113  003E46  0100               	movlb	0	; () banked
 17114  003E48  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17115  003E4A  0100               	movlb	0	; () banked
 17116  003E4C  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17117  003E4E  B4D8               	btfsc	status,2,c
 17118  003E50  D7D7               	goto	u8351
 17119  003E52  0E00               	movlw	0
 17120  003E54  D7D6               	goto	u8360
 17121  003E56                     l9214:
 17122                           
 17123                           ;Test.c: 631: readADC(2);
 17124  003E56  0E02               	movlw	2
 17125  003E58  ECB4  F02C         	call	_readADC
 17126                           
 17127                           ;Test.c: 632: res = ADRESH<<8 | ADRESL;
 17128  003E5C  50C3               	movf	4035,w,c	;volatile
 17129  003E5E  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17130  003E62  0100               	movlb	0	; () banked
 17131  003E64  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17132  003E66  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17133  003E6A  0100               	movlb	0	; () banked
 17134  003E6C  6BAB               	clrf	??_BlockerTest& (0+255),b
 17135  003E6E  0100               	movlb	0	; () banked
 17136  003E70  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17137  003E72  0100               	movlb	0	; () banked
 17138  003E74  6FAF               	movwf	BlockerTest@res& (0+255),b
 17139  003E76  0100               	movlb	0	; () banked
 17140  003E78  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17141  003E7A  0100               	movlb	0	; () banked
 17142  003E7C  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17143                           
 17144                           ; BSR set to: 0
 17145                           ;Test.c: 633: lcdInst(0b10000000);;
 17146  003E7E  0E80               	movlw	128
 17147  003E80  ECC9  F02D         	call	_lcdInst
 17148                           
 17149                           ;Test.c: 634: printf("D:RET|2:C %d  ", res);
 17150  003E84  0E6D               	movlw	low STR_123
 17151  003E86  0100               	movlb	0	; () banked
 17152  003E88  6F8E               	movwf	printf@f& (0+255),b
 17153  003E8A  0EFE               	movlw	high STR_123
 17154  003E8C  0100               	movlb	0	; () banked
 17155  003E8E  6F8F               	movwf	(printf@f+1)& (0+255),b
 17156  003E90  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17157  003E94  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17158  003E98  EC8D  F00D         	call	_printf	;wreg free
 17159  003E9C                     l9222:
 17160  003E9C  A281               	btfss	3969,1,c	;volatile
 17161  003E9E  D786               	goto	l9176
 17162  003EA0  D7DA               	goto	l9214
 17163  003EA2                     __end_of_BlockerTest:
 17164                           	opt stack 0
 17165                           tblptru	equ	0xFF8
 17166                           tblptrh	equ	0xFF7
 17167                           tblptrl	equ	0xFF6
 17168                           tablat	equ	0xFF5
 17169                           prodh	equ	0xFF4
 17170                           prodl	equ	0xFF3
 17171                           intcon	equ	0xFF2
 17172                           intcon2	equ	0xFF1
 17173                           intcon3	equ	0xFF0
 17174                           postinc0	equ	0xFEE
 17175                           wreg	equ	0xFE8
 17176                           postdec1	equ	0xFE5
 17177                           fsr1l	equ	0xFE1
 17178                           indf2	equ	0xFDF
 17179                           postinc2	equ	0xFDE
 17180                           postdec2	equ	0xFDD
 17181                           fsr2h	equ	0xFDA
 17182                           fsr2l	equ	0xFD9
 17183                           status	equ	0xFD8
 17184                           
 17185 ;; *************** function _readADC *****************
 17186 ;; Defined at:
 17187 ;;		line 15 in file "ADCFunctionality.c"
 17188 ;; Parameters:    Size  Location     Type
 17189 ;;  channel         1    wreg     unsigned char 
 17190 ;; Auto vars:     Size  Location     Type
 17191 ;;  channel         1    1[BANK0 ] unsigned char 
 17192 ;; Return value:  Size  Location     Type
 17193 ;;                  1    wreg      void 
 17194 ;; Registers used:
 17195 ;;		wreg, status,2, status,0, cstack
 17196 ;; Tracked objects:
 17197 ;;		On entry : 0/0
 17198 ;;		On exit  : 0/0
 17199 ;;		Unchanged: 0/0
 17200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17202 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17203 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17204 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17205 ;;Total ram usage:        2 bytes
 17206 ;; Hardware stack levels used:    1
 17207 ;; Hardware stack levels required when called:    7
 17208 ;; This function calls:
 17209 ;;		Nothing
 17210 ;; This function is called by:
 17211 ;;		_readIR
 17212 ;;		_readMAG
 17213 ;;		_readCOND
 17214 ;;		_sensorTest
 17215 ;;		_PlatformTest
 17216 ;;		_BlockerTest
 17217 ;; This function uses a non-reentrant model
 17218 ;;
 17219                           
 17220                           	psect	text55
 17221  005968                     __ptext55:
 17222                           	opt stack 0
 17223  005968                     _readADC:
 17224                           	opt stack 20
 17225                           
 17226                           ;incstack = 0
 17227                           ;readADC@channel stored from wreg
 17228  005968  0100               	movlb	0	; () banked
 17229  00596A  6F81               	movwf	readADC@channel& (0+255),b
 17230                           
 17231                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 17232  00596C  0100               	movlb	0	; () banked
 17233  00596E  4581               	rlncf	readADC@channel& (0+255),w,b
 17234  005970  46E8               	rlncf	wreg,f,c
 17235  005972  0BFC               	andlw	252
 17236  005974  6EC2               	movwf	4034,c	;volatile
 17237                           
 17238                           ; BSR set to: 0
 17239                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 17240  005976  80C2               	bsf	4034,0,c	;volatile
 17241                           
 17242                           ; BSR set to: 0
 17243                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 17244  005978  82C2               	bsf	4034,1,c	;volatile
 17245                           
 17246                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 17247  00597A  D009               	goto	l6560
 17248  00597C                     l6558:
 17249  00597C  0E34               	movlw	52
 17250  00597E  0100               	movlb	0	; () banked
 17251  005980  6F80               	movwf	??_readADC& (0+255),b
 17252  005982  0EF1               	movlw	241
 17253  005984                     u11437:
 17254  005984  2EE8               	decfsz	wreg,f,c
 17255  005986  D7FE               	bra	u11437
 17256  005988  2F80               	decfsz	??_readADC& (0+255),f,b
 17257  00598A  D7FC               	bra	u11437
 17258  00598C  D000               	nop2	
 17259  00598E                     l6560:
 17260  00598E  A2C2               	btfss	4034,1,c	;volatile
 17261  005990  0012               	return	
 17262  005992  D7F4               	goto	l6558
 17263  005994                     __end_of_readADC:
 17264                           	opt stack 0
 17265                           tblptru	equ	0xFF8
 17266                           tblptrh	equ	0xFF7
 17267                           tblptrl	equ	0xFF6
 17268                           tablat	equ	0xFF5
 17269                           prodh	equ	0xFF4
 17270                           prodl	equ	0xFF3
 17271                           intcon	equ	0xFF2
 17272                           intcon2	equ	0xFF1
 17273                           intcon3	equ	0xFF0
 17274                           postinc0	equ	0xFEE
 17275                           wreg	equ	0xFE8
 17276                           postdec1	equ	0xFE5
 17277                           fsr1l	equ	0xFE1
 17278                           indf2	equ	0xFDF
 17279                           postinc2	equ	0xFDE
 17280                           postdec2	equ	0xFDD
 17281                           fsr2h	equ	0xFDA
 17282                           fsr2l	equ	0xFD9
 17283                           status	equ	0xFD8
 17284                           
 17285 ;; *************** function _printf *****************
 17286 ;; Defined at:
 17287 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 17288 ;; Parameters:    Size  Location     Type
 17289 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 17290 ;;		 -> STR_130(18), STR_129(18), STR_128(17), STR_127(17), 
 17291 ;;		 -> STR_126(15), STR_125(15), STR_124(18), STR_123(15), 
 17292 ;;		 -> STR_122(18), STR_121(18), STR_120(17), STR_119(17), 
 17293 ;;		 -> STR_118(17), STR_117(17), STR_116(17), STR_115(17), 
 17294 ;;		 -> STR_114(17), STR_113(17), STR_112(18), STR_111(17), 
 17295 ;;		 -> STR_110(15), STR_109(15), STR_108(15), STR_107(17), 
 17296 ;;		 -> STR_106(17), STR_105(17), STR_104(16), STR_103(17), 
 17297 ;;		 -> STR_102(17), STR_101(17), STR_100(17), STR_99(17), 
 17298 ;;		 -> STR_98(17), STR_97(15), STR_96(11), STR_95(17), 
 17299 ;;		 -> STR_94(11), STR_93(17), STR_92(14), STR_91(15), 
 17300 ;;		 -> STR_90(14), STR_89(10), STR_88(9), STR_87(9), 
 17301 ;;		 -> STR_86(10), STR_85(10), STR_84(16), STR_83(15), 
 17302 ;;		 -> STR_82(3), STR_81(15), STR_80(13), STR_79(14), 
 17303 ;;		 -> STR_78(8), STR_77(14), STR_76(15), STR_75(12), 
 17304 ;;		 -> STR_74(14), STR_73(17), STR_72(14), STR_71(15), 
 17305 ;;		 -> STR_70(17), STR_69(17), STR_68(7), STR_67(21), 
 17306 ;;		 -> STR_66(16), STR_65(16), STR_64(19), STR_63(24), 
 17307 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 17308 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 17309 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 17310 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 17311 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 17312 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(17), 
 17313 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(14), 
 17314 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 17315 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 17316 ;;		 -> STR_1(18), 
 17317 ;; Auto vars:     Size  Location     Type
 17318 ;;  tmpval          4    0        struct .
 17319 ;;  width           2   41[BANK0 ] int 
 17320 ;;  val             2   37[BANK0 ] unsigned int 
 17321 ;;  len             2   35[BANK0 ] unsigned int 
 17322 ;;  ap              2   33[BANK0 ] PTR void [1]
 17323 ;;		 -> ?i2_printf(2), ?_printf(2), 
 17324 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 17325 ;;		 -> STR_131(7), ID@res2(2), ID@res1(2), count_total(2), 
 17326 ;;		 -> printRTC@month(4), UI@month(4), 
 17327 ;;  c               1   40[BANK0 ] char 
 17328 ;;  flag            1   39[BANK0 ] unsigned char 
 17329 ;;  prec            1   30[BANK0 ] char 
 17330 ;; Return value:  Size  Location     Type
 17331 ;;                  2   14[BANK0 ] int 
 17332 ;; Registers used:
 17333 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17334 ;; Tracked objects:
 17335 ;;		On entry : 0/0
 17336 ;;		On exit  : 0/0
 17337 ;;		Unchanged: 0/0
 17338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17339 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17340 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17341 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17342 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17343 ;;Total ram usage:       29 bytes
 17344 ;; Hardware stack levels used:    1
 17345 ;; Hardware stack levels required when called:    9
 17346 ;; This function calls:
 17347 ;;		___lwdiv
 17348 ;;		___lwmod
 17349 ;;		___wmul
 17350 ;;		_isdigit
 17351 ;;		_putch
 17352 ;; This function is called by:
 17353 ;;		_UI
 17354 ;;		_change_state_to_menu_start
 17355 ;;		_change_state_to_menu_12
 17356 ;;		_change_state_to_menu_22
 17357 ;;		_printRTC
 17358 ;;		_ID
 17359 ;;		_EEPROM_write
 17360 ;;		_Test
 17361 ;;		_algorithmTest
 17362 ;;		_sensorTest
 17363 ;;		_actuatorTest
 17364 ;;		_BothServos
 17365 ;;		_PortTestDC
 17366 ;;		_PlatformTest
 17367 ;;		_SpeedTest
 17368 ;;		_BlockerTest
 17369 ;;		_arm
 17370 ;;		_PortTestPusher
 17371 ;;		_ToggleTestA5
 17372 ;; This function uses a non-reentrant model
 17373 ;;
 17374                           
 17375                           	psect	text56
 17376  001B1A                     __ptext56:
 17377                           	opt stack 0
 17378  001B1A                     _printf:
 17379                           	opt stack 18
 17380                           
 17381                           ;doprnt.c: 466: va_list ap;
 17382                           ;doprnt.c: 499: signed char c;
 17383                           ;doprnt.c: 501: int width;
 17384                           ;doprnt.c: 506: signed char prec;
 17385                           ;doprnt.c: 508: unsigned char flag;
 17386                           ;doprnt.c: 523: union {
 17387                           ;doprnt.c: 524: unsigned long vd;
 17388                           ;doprnt.c: 525: double integ;
 17389                           ;doprnt.c: 526: } tmpval;
 17390                           ;doprnt.c: 528: unsigned int val;
 17391                           ;doprnt.c: 529: unsigned len;
 17392                           ;doprnt.c: 530: const char * cp;
 17393                           ;doprnt.c: 533: *ap = __va_start();
 17394                           
 17395                           ;incstack = 0
 17396  001B1A  0E90               	movlw	low (?_printf+2)
 17397  001B1C  0100               	movlb	0	; () banked
 17398  001B1E  6FA1               	movwf	printf@ap& (0+255),b
 17399  001B20  0E00               	movlw	high (?_printf+2)
 17400  001B22  0100               	movlb	0	; () banked
 17401  001B24  6FA2               	movwf	(printf@ap+1)& (0+255),b
 17402                           
 17403                           ;doprnt.c: 536: while(c = *f++) {
 17404  001B26  D205               	goto	l6882
 17405  001B28                     l6752:
 17406                           
 17407                           ; BSR set to: 0
 17408                           ;doprnt.c: 538: if(c != '%')
 17409  001B28  0E25               	movlw	37
 17410  001B2A  0100               	movlb	0	; () banked
 17411  001B2C  19A8               	xorwf	printf@c& (0+255),w,b
 17412  001B2E  B4D8               	btfsc	status,2,c
 17413  001B30  D005               	goto	l6756
 17414                           
 17415                           ; BSR set to: 0
 17416                           ;doprnt.c: 540: {
 17417                           ;doprnt.c: 541: (putch(c) );
 17418  001B32  0100               	movlb	0	; () banked
 17419  001B34  51A8               	movf	printf@c& (0+255),w,b
 17420  001B36  ECC1  F02D         	call	_putch
 17421                           
 17422                           ;doprnt.c: 542: continue;
 17423  001B3A  D1FB               	goto	l6882
 17424  001B3C                     l6756:
 17425                           
 17426                           ;doprnt.c: 543: }
 17427                           ;doprnt.c: 546: width = 0;
 17428  001B3C  0E00               	movlw	0
 17429  001B3E  0100               	movlb	0	; () banked
 17430  001B40  6FAA               	movwf	(printf@width+1)& (0+255),b
 17431  001B42  0E00               	movlw	0
 17432  001B44  6FA9               	movwf	printf@width& (0+255),b
 17433                           
 17434                           ;doprnt.c: 548: flag = 0;
 17435  001B46  0E00               	movlw	0
 17436  001B48  0100               	movlb	0	; () banked
 17437  001B4A  6FA7               	movwf	printf@flag& (0+255),b
 17438                           
 17439                           ; BSR set to: 0
 17440                           ;doprnt.c: 551: switch(*f) {
 17441                           
 17442                           ;doprnt.c: 550: for(;;) {
 17443  001B4C  D005               	goto	l6762
 17444  001B4E                     l6758:
 17445                           
 17446                           ;doprnt.c: 580: flag |= 0x04;
 17447  001B4E  0100               	movlb	0	; () banked
 17448  001B50  85A7               	bsf	printf@flag& (0+255),2,b
 17449                           
 17450                           ;doprnt.c: 581: f++;
 17451  001B52  0100               	movlb	0	; () banked
 17452  001B54  4B8E               	infsnz	printf@f& (0+255),f,b
 17453  001B56  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17454  001B58                     l6762:
 17455  001B58  C08E  FFF6         	movff	printf@f,tblptrl
 17456  001B5C  C08F  FFF7         	movff	printf@f+1,tblptrh
 17457  001B60                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17458  001B60  6AF8               	clrf	tblptru,c
 17459  001B62                     	endif
 17460  001B62                     	if	0	;tblptru may be non-zero
 17461  001B62                     	endif
 17462  001B62  0008               	tblrd		*
 17463  001B64  50F5               	movf	tablat,w,c
 17464                           
 17465                           ; Switch size 1, requested type "space"
 17466                           ; Number of cases is 1, Range of values is 48 to 48
 17467                           ; switch strategies available:
 17468                           ; Name         Instructions Cycles
 17469                           ; simple_byte            4     3 (average)
 17470                           ;	Chosen strategy is simple_byte
 17471  001B66  0A30               	xorlw	48	; case 48
 17472  001B68  B4D8               	btfsc	status,2,c
 17473  001B6A  D7F1               	goto	l6758
 17474                           
 17475                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 17476                           
 17477                           ;doprnt.c: 586: }
 17478                           
 17479                           ;doprnt.c: 585: break;
 17480  001B6C  C08E  FFF6         	movff	printf@f,tblptrl
 17481  001B70  C08F  FFF7         	movff	printf@f+1,tblptrh
 17482  001B74                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17483  001B74  6AF8               	clrf	tblptru,c
 17484  001B76                     	endif
 17485  001B76                     	if	0	;tblptru may be non-zero
 17486  001B76                     	endif
 17487  001B76  0008               	tblrd		*
 17488  001B78  50F5               	movf	tablat,w,c
 17489  001B7A  ECCA  F02C         	call	_isdigit
 17490  001B7E  A0D8               	btfss	status,0,c
 17491  001B80  D0D2               	goto	l6810
 17492                           
 17493                           ;doprnt.c: 598: width = 0;
 17494  001B82  0E00               	movlw	0
 17495  001B84  0100               	movlb	0	; () banked
 17496  001B86  6FAA               	movwf	(printf@width+1)& (0+255),b
 17497  001B88  0E00               	movlw	0
 17498  001B8A  6FA9               	movwf	printf@width& (0+255),b
 17499  001B8C                     l6768:
 17500                           
 17501                           ;doprnt.c: 600: width *= 10;
 17502  001B8C  C0A9  F080         	movff	printf@width,___wmul@multiplier
 17503  001B90  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 17504  001B94  0E00               	movlw	0
 17505  001B96  0100               	movlb	0	; () banked
 17506  001B98  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17507  001B9A  0E0A               	movlw	10
 17508  001B9C  6F82               	movwf	___wmul@multiplicand& (0+255),b
 17509  001B9E  EC33  F02B         	call	___wmul	;wreg free
 17510  001BA2  C080  F0A9         	movff	?___wmul,printf@width
 17511  001BA6  C081  F0AA         	movff	?___wmul+1,printf@width+1
 17512                           
 17513                           ;doprnt.c: 601: width += *f++ - '0';
 17514  001BAA  0ED0               	movlw	208
 17515  001BAC  0100               	movlb	0	; () banked
 17516  001BAE  6F9A               	movwf	??_printf& (0+255),b
 17517  001BB0  0EFF               	movlw	255
 17518  001BB2  0100               	movlb	0	; () banked
 17519  001BB4  6F9B               	movwf	(??_printf+1)& (0+255),b
 17520  001BB6  C08E  FFF6         	movff	printf@f,tblptrl
 17521  001BBA  C08F  FFF7         	movff	printf@f+1,tblptrh
 17522  001BBE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17523  001BBE  6AF8               	clrf	tblptru,c
 17524  001BC0                     	endif
 17525  001BC0                     	if	0	;tblptru may be non-zero
 17526  001BC0                     	endif
 17527  001BC0  0008               	tblrd		*
 17528  001BC2  50F5               	movf	tablat,w,c
 17529  001BC4  0100               	movlb	0	; () banked
 17530  001BC6  6F9C               	movwf	(??_printf+2)& (0+255),b
 17531  001BC8  6B9D               	clrf	(??_printf+3)& (0+255),b
 17532  001BCA  0100               	movlb	0	; () banked
 17533  001BCC  519A               	movf	??_printf& (0+255),w,b
 17534  001BCE  0100               	movlb	0	; () banked
 17535  001BD0  279C               	addwf	(??_printf+2)& (0+255),f,b
 17536  001BD2  0100               	movlb	0	; () banked
 17537  001BD4  519B               	movf	(??_printf+1)& (0+255),w,b
 17538  001BD6  0100               	movlb	0	; () banked
 17539  001BD8  239D               	addwfc	(??_printf+3)& (0+255),f,b
 17540  001BDA  0100               	movlb	0	; () banked
 17541  001BDC  519C               	movf	(??_printf+2)& (0+255),w,b
 17542  001BDE  0100               	movlb	0	; () banked
 17543  001BE0  27A9               	addwf	printf@width& (0+255),f,b
 17544  001BE2  0100               	movlb	0	; () banked
 17545  001BE4  519D               	movf	(??_printf+3)& (0+255),w,b
 17546  001BE6  0100               	movlb	0	; () banked
 17547  001BE8  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 17548                           
 17549                           ; BSR set to: 0
 17550  001BEA  0100               	movlb	0	; () banked
 17551  001BEC  4B8E               	infsnz	printf@f& (0+255),f,b
 17552  001BEE  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17553                           
 17554                           ; BSR set to: 0
 17555                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 17556  001BF0  C08E  FFF6         	movff	printf@f,tblptrl
 17557  001BF4  C08F  FFF7         	movff	printf@f+1,tblptrh
 17558  001BF8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17559  001BF8  6AF8               	clrf	tblptru,c
 17560  001BFA                     	endif
 17561  001BFA                     	if	0	;tblptru may be non-zero
 17562  001BFA                     	endif
 17563  001BFA  0008               	tblrd		*
 17564  001BFC  50F5               	movf	tablat,w,c
 17565  001BFE  ECCA  F02C         	call	_isdigit
 17566  001C02  A0D8               	btfss	status,0,c
 17567  001C04  D090               	goto	l6810
 17568  001C06  D7C2               	goto	l6768
 17569  001C08                     l6776:
 17570                           
 17571                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 17572  001C08  C0A1  FFD9         	movff	printf@ap,fsr2l
 17573  001C0C  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17574  001C10  CFDE F09F          	movff	postinc2,printf@cp
 17575  001C14  CFDD F0A0          	movff	postdec2,printf@cp+1
 17576  001C18  0E02               	movlw	2
 17577  001C1A  0100               	movlb	0	; () banked
 17578  001C1C  27A1               	addwf	printf@ap& (0+255),f,b
 17579  001C1E  0E00               	movlw	0
 17580  001C20  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17581                           
 17582                           ; BSR set to: 0
 17583                           ;doprnt.c: 740: if(!cp)
 17584  001C22  0100               	movlb	0	; () banked
 17585  001C24  519F               	movf	printf@cp& (0+255),w,b
 17586  001C26  0100               	movlb	0	; () banked
 17587  001C28  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 17588  001C2A  A4D8               	btfss	status,2,c
 17589  001C2C  D006               	goto	l6784
 17590                           
 17591                           ; BSR set to: 0
 17592                           ;doprnt.c: 741: cp = "(null)";
 17593  001C2E  0EB5               	movlw	low STR_131
 17594  001C30  0100               	movlb	0	; () banked
 17595  001C32  6F9F               	movwf	printf@cp& (0+255),b
 17596  001C34  0EFF               	movlw	high STR_131
 17597  001C36  0100               	movlb	0	; () banked
 17598  001C38  6FA0               	movwf	(printf@cp+1)& (0+255),b
 17599  001C3A                     l6784:
 17600                           
 17601                           ; BSR set to: 0
 17602                           ;doprnt.c: 745: len = 0;
 17603  001C3A  0E00               	movlw	0
 17604  001C3C  0100               	movlb	0	; () banked
 17605  001C3E  6FA4               	movwf	(printf@len+1)& (0+255),b
 17606  001C40  0E00               	movlw	0
 17607  001C42  6FA3               	movwf	printf@len& (0+255),b
 17608                           
 17609                           ;doprnt.c: 746: while(cp[len])
 17610  001C44  D003               	goto	l6788
 17611  001C46                     l6786:
 17612                           
 17613                           ;doprnt.c: 747: len++;
 17614  001C46  0100               	movlb	0	; () banked
 17615  001C48  4BA3               	infsnz	printf@len& (0+255),f,b
 17616  001C4A  2BA4               	incf	(printf@len+1)& (0+255),f,b
 17617  001C4C                     l6788:
 17618                           
 17619                           ; BSR set to: 0
 17620  001C4C  0100               	movlb	0	; () banked
 17621  001C4E  51A3               	movf	printf@len& (0+255),w,b
 17622  001C50  0100               	movlb	0	; () banked
 17623  001C52  259F               	addwf	printf@cp& (0+255),w,b
 17624  001C54  0100               	movlb	0	; () banked
 17625  001C56  6F9A               	movwf	??_printf& (0+255),b
 17626  001C58  0100               	movlb	0	; () banked
 17627  001C5A  51A4               	movf	(printf@len+1)& (0+255),w,b
 17628  001C5C  0100               	movlb	0	; () banked
 17629  001C5E  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 17630  001C60  0100               	movlb	0	; () banked
 17631  001C62  6F9B               	movwf	(??_printf+1)& (0+255),b
 17632  001C64  C09A  FFF6         	movff	??_printf,tblptrl
 17633  001C68  C09B  FFF7         	movff	??_printf+1,tblptrh
 17634  001C6C  0E00               	movlw	low (__mediumconst shr (0+16))
 17635  001C6E  6EF8               	movwf	tblptru,c
 17636  001C70  0E0F               	movlw	(high __ramtop+-1)
 17637  001C72  64F7               	cpfsgt	tblptrh,c
 17638  001C74  D003               	bra	u5287
 17639  001C76  0008               	tblrd		*
 17640  001C78  50F5               	movf	tablat,w,c
 17641  001C7A  D005               	bra	u5280
 17642  001C7C                     u5287:
 17643  001C7C  CFF6 FFE9          	movff	tblptrl,fsr0l
 17644  001C80  CFF7 FFEA          	movff	tblptrh,fsr0h
 17645  001C84  50EF               	movf	indf0,w,c
 17646  001C86                     u5280:
 17647  001C86  0900               	iorlw	0
 17648  001C88  A4D8               	btfss	status,2,c
 17649  001C8A  D7DD               	goto	l6786
 17650                           
 17651                           ;doprnt.c: 757: if(width > len)
 17652  001C8C  0100               	movlb	0	; () banked
 17653  001C8E  51A9               	movf	printf@width& (0+255),w,b
 17654  001C90  0100               	movlb	0	; () banked
 17655  001C92  5DA3               	subwf	printf@len& (0+255),w,b
 17656  001C94  0100               	movlb	0	; () banked
 17657  001C96  51AA               	movf	(printf@width+1)& (0+255),w,b
 17658  001C98  0100               	movlb	0	; () banked
 17659  001C9A  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 17660  001C9C  B0D8               	btfsc	status,0,c
 17661  001C9E  D009               	goto	l6794
 17662                           
 17663                           ; BSR set to: 0
 17664                           ;doprnt.c: 758: width -= len;
 17665  001CA0  0100               	movlb	0	; () banked
 17666  001CA2  51A3               	movf	printf@len& (0+255),w,b
 17667  001CA4  0100               	movlb	0	; () banked
 17668  001CA6  5FA9               	subwf	printf@width& (0+255),f,b
 17669  001CA8  0100               	movlb	0	; () banked
 17670  001CAA  51A4               	movf	(printf@len+1)& (0+255),w,b
 17671  001CAC  0100               	movlb	0	; () banked
 17672  001CAE  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 17673  001CB0  D009               	goto	l6798
 17674  001CB2                     l6794:
 17675                           
 17676                           ; BSR set to: 0
 17677                           ;doprnt.c: 759: else
 17678                           ;doprnt.c: 760: width = 0;
 17679  001CB2  0E00               	movlw	0
 17680  001CB4  0100               	movlb	0	; () banked
 17681  001CB6  6FAA               	movwf	(printf@width+1)& (0+255),b
 17682  001CB8  0E00               	movlw	0
 17683  001CBA  6FA9               	movwf	printf@width& (0+255),b
 17684                           
 17685                           ; BSR set to: 0
 17686                           ;doprnt.c: 764: while(width--)
 17687  001CBC  D003               	goto	l6798
 17688  001CBE                     l6796:
 17689                           
 17690                           ; BSR set to: 0
 17691                           ;doprnt.c: 765: (putch(' ') );
 17692  001CBE  0E20               	movlw	32
 17693  001CC0  ECC1  F02D         	call	_putch
 17694  001CC4                     l6798:
 17695  001CC4  0100               	movlb	0	; () banked
 17696  001CC6  07A9               	decf	printf@width& (0+255),f,b
 17697  001CC8  A0D8               	btfss	status,0,c
 17698  001CCA  07AA               	decf	(printf@width+1)& (0+255),f,b
 17699  001CCC  0100               	movlb	0	; () banked
 17700  001CCE  29A9               	incf	printf@width& (0+255),w,b
 17701  001CD0  E1F6               	bnz	l6796
 17702  001CD2  0100               	movlb	0	; () banked
 17703  001CD4  29AA               	incf	(printf@width+1)& (0+255),w,b
 17704  001CD6  B4D8               	btfsc	status,2,c
 17705  001CD8  D017               	goto	l6804
 17706  001CDA  D7F1               	goto	l6796
 17707  001CDC                     l6800:
 17708                           
 17709                           ; BSR set to: 0
 17710                           ;doprnt.c: 768: (putch(*cp++) );
 17711  001CDC  C09F  FFF6         	movff	printf@cp,tblptrl
 17712  001CE0  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 17713  001CE4  0E00               	movlw	low (__mediumconst shr (0+16))
 17714  001CE6  6EF8               	movwf	tblptru,c
 17715  001CE8  0E0F               	movlw	(high __ramtop+-1)
 17716  001CEA  64F7               	cpfsgt	tblptrh,c
 17717  001CEC  D003               	bra	u5327
 17718  001CEE  0008               	tblrd		*
 17719  001CF0  50F5               	movf	tablat,w,c
 17720  001CF2  D005               	bra	u5320
 17721  001CF4                     u5327:
 17722  001CF4  CFF6 FFE9          	movff	tblptrl,fsr0l
 17723  001CF8  CFF7 FFEA          	movff	tblptrh,fsr0h
 17724  001CFC  50EF               	movf	indf0,w,c
 17725  001CFE                     u5320:
 17726  001CFE  ECC1  F02D         	call	_putch
 17727  001D02  0100               	movlb	0	; () banked
 17728  001D04  4B9F               	infsnz	printf@cp& (0+255),f,b
 17729  001D06  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 17730  001D08                     l6804:
 17731                           
 17732                           ; BSR set to: 0
 17733  001D08  0100               	movlb	0	; () banked
 17734  001D0A  07A3               	decf	printf@len& (0+255),f,b
 17735  001D0C  A0D8               	btfss	status,0,c
 17736  001D0E  07A4               	decf	(printf@len+1)& (0+255),f,b
 17737  001D10  0100               	movlb	0	; () banked
 17738  001D12  29A3               	incf	printf@len& (0+255),w,b
 17739  001D14  E1E3               	bnz	l6800
 17740  001D16  0100               	movlb	0	; () banked
 17741  001D18  29A4               	incf	(printf@len+1)& (0+255),w,b
 17742  001D1A  B4D8               	btfsc	status,2,c
 17743  001D1C  D10A               	goto	l6882
 17744  001D1E  D7DE               	goto	l6800
 17745  001D20                     l6806:
 17746                           
 17747                           ; BSR set to: 0
 17748                           ;doprnt.c: 818: flag |= 0x40;
 17749  001D20  0100               	movlb	0	; () banked
 17750  001D22  8DA7               	bsf	printf@flag& (0+255),6,b
 17751                           
 17752                           ; BSR set to: 0
 17753                           ;doprnt.c: 822: }
 17754                           
 17755                           ;doprnt.c: 819: break;
 17756  001D24  D01D               	goto	l1528
 17757  001D26                     l6810:
 17758  001D26  C08E  FFF6         	movff	printf@f,tblptrl
 17759  001D2A  C08F  FFF7         	movff	printf@f+1,tblptrh
 17760  001D2E  0100               	movlb	0	; () banked
 17761  001D30  4B8E               	infsnz	printf@f& (0+255),f,b
 17762  001D32  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17763  001D34                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17764  001D34  6AF8               	clrf	tblptru,c
 17765  001D36                     	endif
 17766  001D36                     	if	0	;tblptru may be non-zero
 17767  001D36                     	endif
 17768  001D36  0008               	tblrd		*
 17769  001D38  CFF5 F0A8          	movff	tablat,printf@c
 17770  001D3C  0100               	movlb	0	; () banked
 17771  001D3E  51A8               	movf	printf@c& (0+255),w,b
 17772                           
 17773                           ; Switch size 1, requested type "space"
 17774                           ; Number of cases is 5, Range of values is 0 to 117
 17775                           ; switch strategies available:
 17776                           ; Name         Instructions Cycles
 17777                           ; simple_byte           16     9 (average)
 17778                           ;	Chosen strategy is simple_byte
 17779  001D40  0A00               	xorlw	0	; case 0
 17780  001D42  B4D8               	btfsc	status,2,c
 17781  001D44  0012               	return	
 17782  001D46  0A64               	xorlw	100	; case 100
 17783  001D48  B4D8               	btfsc	status,2,c
 17784  001D4A  D00A               	goto	l1528
 17785  001D4C  0A0D               	xorlw	13	; case 105
 17786  001D4E  B4D8               	btfsc	status,2,c
 17787  001D50  D007               	goto	l1528
 17788  001D52  0A1A               	xorlw	26	; case 115
 17789  001D54  B4D8               	btfsc	status,2,c
 17790  001D56  D758               	goto	l6776
 17791  001D58  0A06               	xorlw	6	; case 117
 17792  001D5A  B4D8               	btfsc	status,2,c
 17793  001D5C  D7E1               	goto	l6806
 17794  001D5E  D0E9               	goto	l6882
 17795  001D60                     l1528:
 17796                           
 17797                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 17798  001D60  0100               	movlb	0	; () banked
 17799  001D62  BDA7               	btfsc	printf@flag& (0+255),6,b
 17800  001D64  D019               	goto	l6822
 17801                           
 17802                           ; BSR set to: 0
 17803                           ;doprnt.c: 1253: {
 17804                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 17805  001D66  C0A1  FFD9         	movff	printf@ap,fsr2l
 17806  001D6A  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17807  001D6E  CFDE F0A5          	movff	postinc2,printf@val
 17808  001D72  CFDD F0A6          	movff	postdec2,printf@val+1
 17809                           
 17810                           ; BSR set to: 0
 17811  001D76  0E02               	movlw	2
 17812  001D78  0100               	movlb	0	; () banked
 17813  001D7A  27A1               	addwf	printf@ap& (0+255),f,b
 17814  001D7C  0E00               	movlw	0
 17815  001D7E  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17816                           
 17817                           ; BSR set to: 0
 17818                           ;doprnt.c: 1261: if((int)val < 0) {
 17819  001D80  0100               	movlb	0	; () banked
 17820  001D82  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 17821  001D84  D016               	goto	l6826
 17822                           
 17823                           ; BSR set to: 0
 17824                           ;doprnt.c: 1262: flag |= 0x03;
 17825  001D86  0E03               	movlw	3
 17826  001D88  0100               	movlb	0	; () banked
 17827  001D8A  13A7               	iorwf	printf@flag& (0+255),f,b
 17828                           
 17829                           ; BSR set to: 0
 17830                           ;doprnt.c: 1263: val = -val;
 17831  001D8C  0100               	movlb	0	; () banked
 17832  001D8E  6DA5               	negf	printf@val& (0+255),b
 17833  001D90  1FA6               	comf	(printf@val+1)& (0+255),f,b
 17834  001D92  B0D8               	btfsc	status,0,c
 17835  001D94  2BA6               	incf	(printf@val+1)& (0+255),f,b
 17836                           
 17837                           ; BSR set to: 0
 17838                           ;doprnt.c: 1264: }
 17839                           ;doprnt.c: 1266: }
 17840  001D96  D00D               	goto	l6826
 17841  001D98                     l6822:
 17842                           
 17843                           ; BSR set to: 0
 17844                           ;doprnt.c: 1268: else
 17845                           ;doprnt.c: 1273: {
 17846                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 17847  001D98  C0A1  FFD9         	movff	printf@ap,fsr2l
 17848  001D9C  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17849  001DA0  CFDE F0A5          	movff	postinc2,printf@val
 17850  001DA4  CFDD F0A6          	movff	postdec2,printf@val+1
 17851                           
 17852                           ; BSR set to: 0
 17853  001DA8  0E02               	movlw	2
 17854  001DAA  0100               	movlb	0	; () banked
 17855  001DAC  27A1               	addwf	printf@ap& (0+255),f,b
 17856  001DAE  0E00               	movlw	0
 17857  001DB0  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17858  001DB2                     l6826:
 17859                           
 17860                           ; BSR set to: 0
 17861                           ;doprnt.c: 1287: }
 17862                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 17863  001DB2  0E01               	movlw	1
 17864  001DB4  0100               	movlb	0	; () banked
 17865  001DB6  6FA8               	movwf	printf@c& (0+255),b
 17866  001DB8                     l6828:
 17867                           
 17868                           ; BSR set to: 0
 17869  001DB8  0E05               	movlw	5
 17870  001DBA  0100               	movlb	0	; () banked
 17871  001DBC  19A8               	xorwf	printf@c& (0+255),w,b
 17872  001DBE  B4D8               	btfsc	status,2,c
 17873  001DC0  D019               	goto	l6840
 17874                           
 17875                           ; BSR set to: 0
 17876                           ;doprnt.c: 1306: if(val < dpowers[c])
 17877                           
 17878                           ; BSR set to: 0
 17879                           
 17880                           ; BSR set to: 0
 17881  001DC2  0100               	movlb	0	; () banked
 17882  001DC4  51A8               	movf	printf@c& (0+255),w,b
 17883  001DC6  0D02               	mullw	2
 17884  001DC8  0E9C               	movlw	low _dpowers
 17885  001DCA  24F3               	addwf	prodl,w,c
 17886  001DCC  6EF6               	movwf	tblptrl,c
 17887  001DCE  0EFA               	movlw	high _dpowers
 17888  001DD0  20F4               	addwfc	prodh,w,c
 17889  001DD2  6EF7               	movwf	tblptrh,c
 17890  001DD4                     	if	1	;There are 3 active tblptr bytes
 17891  001DD4  6AF8               	clrf	tblptru,c
 17892  001DD6  0E00               	movlw	low (__mediumconst shr (0+16))
 17893  001DD8  22F8               	addwfc	tblptru,f,c
 17894  001DDA                     	endif
 17895  001DDA  0009               	tblrd		*+
 17896  001DDC  50F5               	movf	tablat,w,c
 17897  001DDE  0100               	movlb	0	; () banked
 17898  001DE0  5DA5               	subwf	printf@val& (0+255),w,b
 17899  001DE2  0009               	tblrd		*+
 17900  001DE4  50F5               	movf	tablat,w,c
 17901  001DE6  0100               	movlb	0	; () banked
 17902  001DE8  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 17903  001DEA  A0D8               	btfss	status,0,c
 17904  001DEC  D003               	goto	l6840
 17905                           
 17906                           ; BSR set to: 0
 17907                           
 17908                           ; BSR set to: 0
 17909                           
 17910                           ; BSR set to: 0
 17911                           ;doprnt.c: 1307: break;
 17912  001DEE  0100               	movlb	0	; () banked
 17913  001DF0  2BA8               	incf	printf@c& (0+255),f,b
 17914  001DF2  D7E2               	goto	l6828
 17915  001DF4                     l6840:
 17916                           
 17917                           ; BSR set to: 0
 17918                           ;doprnt.c: 1345: if(width && flag & 0x03)
 17919  001DF4  0100               	movlb	0	; () banked
 17920  001DF6  51A9               	movf	printf@width& (0+255),w,b
 17921  001DF8  0100               	movlb	0	; () banked
 17922  001DFA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 17923  001DFC  B4D8               	btfsc	status,2,c
 17924  001DFE  D00B               	goto	l6846
 17925                           
 17926                           ; BSR set to: 0
 17927  001E00  C0A7  F09A         	movff	printf@flag,??_printf
 17928  001E04  0E03               	movlw	3
 17929  001E06  0100               	movlb	0	; () banked
 17930  001E08  179A               	andwf	??_printf& (0+255),f,b
 17931  001E0A  B4D8               	btfsc	status,2,c
 17932  001E0C  D004               	goto	l6846
 17933                           
 17934                           ; BSR set to: 0
 17935                           ;doprnt.c: 1346: width--;
 17936  001E0E  0100               	movlb	0	; () banked
 17937  001E10  07A9               	decf	printf@width& (0+255),f,b
 17938  001E12  A0D8               	btfss	status,0,c
 17939  001E14  07AA               	decf	(printf@width+1)& (0+255),f,b
 17940  001E16                     l6846:
 17941                           
 17942                           ; BSR set to: 0
 17943                           ;doprnt.c: 1381: if(width > c)
 17944  001E16  0E80               	movlw	128
 17945  001E18  0100               	movlb	0	; () banked
 17946  001E1A  BFA8               	btfsc	printf@c& (0+255),7,b
 17947  001E1C  0E7F               	movlw	127
 17948  001E1E  0100               	movlb	0	; () banked
 17949  001E20  6F9A               	movwf	??_printf& (0+255),b
 17950  001E22  0100               	movlb	0	; () banked
 17951  001E24  51A9               	movf	printf@width& (0+255),w,b
 17952  001E26  0100               	movlb	0	; () banked
 17953  001E28  5DA8               	subwf	printf@c& (0+255),w,b
 17954  001E2A  0100               	movlb	0	; () banked
 17955  001E2C  51AA               	movf	(printf@width+1)& (0+255),w,b
 17956  001E2E  0A80               	xorlw	128
 17957  001E30  0100               	movlb	0	; () banked
 17958  001E32  599A               	subwfb	??_printf& (0+255),w,b
 17959  001E34  B0D8               	btfsc	status,0,c
 17960  001E36  D00B               	goto	l6850
 17961                           
 17962                           ; BSR set to: 0
 17963                           ;doprnt.c: 1382: width -= c;
 17964  001E38  0100               	movlb	0	; () banked
 17965  001E3A  51A8               	movf	printf@c& (0+255),w,b
 17966  001E3C  0100               	movlb	0	; () banked
 17967  001E3E  5FA9               	subwf	printf@width& (0+255),f,b
 17968  001E40  0E00               	movlw	0
 17969  001E42  0100               	movlb	0	; () banked
 17970  001E44  BFA8               	btfsc	printf@c& (0+255),7,b
 17971  001E46  0EFF               	movlw	255
 17972  001E48  0100               	movlb	0	; () banked
 17973  001E4A  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 17974  001E4C  D005               	goto	l6852
 17975  001E4E                     l6850:
 17976                           
 17977                           ; BSR set to: 0
 17978                           ;doprnt.c: 1383: else
 17979                           ;doprnt.c: 1384: width = 0;
 17980  001E4E  0E00               	movlw	0
 17981  001E50  0100               	movlb	0	; () banked
 17982  001E52  6FAA               	movwf	(printf@width+1)& (0+255),b
 17983  001E54  0E00               	movlw	0
 17984  001E56  6FA9               	movwf	printf@width& (0+255),b
 17985  001E58                     l6852:
 17986                           
 17987                           ; BSR set to: 0
 17988                           ;doprnt.c: 1387: if(flag & 0x04) {
 17989  001E58  0100               	movlb	0	; () banked
 17990  001E5A  A5A7               	btfss	printf@flag& (0+255),2,b
 17991  001E5C  D018               	goto	l6864
 17992                           
 17993                           ; BSR set to: 0
 17994                           ;doprnt.c: 1392: if(flag & 0x03)
 17995  001E5E  C0A7  F09A         	movff	printf@flag,??_printf
 17996  001E62  0E03               	movlw	3
 17997  001E64  0100               	movlb	0	; () banked
 17998  001E66  179A               	andwf	??_printf& (0+255),f,b
 17999  001E68  B4D8               	btfsc	status,2,c
 18000  001E6A  D003               	goto	l6858
 18001                           
 18002                           ; BSR set to: 0
 18003                           ;doprnt.c: 1393: (putch('-') );
 18004  001E6C  0E2D               	movlw	45
 18005  001E6E  ECC1  F02D         	call	_putch
 18006  001E72                     l6858:
 18007                           
 18008                           ;doprnt.c: 1415: if(width)
 18009  001E72  0100               	movlb	0	; () banked
 18010  001E74  51A9               	movf	printf@width& (0+255),w,b
 18011  001E76  0100               	movlb	0	; () banked
 18012  001E78  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18013  001E7A  B4D8               	btfsc	status,2,c
 18014  001E7C  D025               	goto	l6874
 18015                           
 18016                           ; BSR set to: 0
 18017                           ;doprnt.c: 1417: (putch('0') );
 18018                           
 18019                           ; BSR set to: 0
 18020                           
 18021                           ;doprnt.c: 1416: do
 18022  001E7E  0E30               	movlw	48
 18023  001E80  ECC1  F02D         	call	_putch
 18024                           
 18025                           ;doprnt.c: 1418: while(--width);
 18026  001E84  0100               	movlb	0	; () banked
 18027  001E86  07A9               	decf	printf@width& (0+255),f,b
 18028  001E88  A0D8               	btfss	status,0,c
 18029  001E8A  07AA               	decf	(printf@width+1)& (0+255),f,b
 18030  001E8C  D7F2               	goto	l6858
 18031  001E8E                     l6864:
 18032                           
 18033                           ; BSR set to: 0
 18034                           ;doprnt.c: 1422: {
 18035                           ;doprnt.c: 1424: if(width
 18036                           ;doprnt.c: 1428: )
 18037  001E8E  0100               	movlb	0	; () banked
 18038  001E90  51A9               	movf	printf@width& (0+255),w,b
 18039  001E92  0100               	movlb	0	; () banked
 18040  001E94  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18041  001E96  B4D8               	btfsc	status,2,c
 18042  001E98  D00D               	goto	l6870
 18043  001E9A                     l6866:
 18044                           
 18045                           ; BSR set to: 0
 18046                           ;doprnt.c: 1430: (putch(' ') );
 18047  001E9A  0E20               	movlw	32
 18048  001E9C  ECC1  F02D         	call	_putch
 18049                           
 18050                           ;doprnt.c: 1431: while(--width);
 18051  001EA0  0100               	movlb	0	; () banked
 18052  001EA2  07A9               	decf	printf@width& (0+255),f,b
 18053  001EA4  A0D8               	btfss	status,0,c
 18054  001EA6  07AA               	decf	(printf@width+1)& (0+255),f,b
 18055  001EA8  0100               	movlb	0	; () banked
 18056  001EAA  51A9               	movf	printf@width& (0+255),w,b
 18057  001EAC  0100               	movlb	0	; () banked
 18058  001EAE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 18059  001EB0  A4D8               	btfss	status,2,c
 18060  001EB2  D7F3               	goto	l6866
 18061  001EB4                     l6870:
 18062                           
 18063                           ; BSR set to: 0
 18064                           ;doprnt.c: 1438: if(flag & 0x03)
 18065  001EB4  C0A7  F09A         	movff	printf@flag,??_printf
 18066  001EB8  0E03               	movlw	3
 18067  001EBA  0100               	movlb	0	; () banked
 18068  001EBC  179A               	andwf	??_printf& (0+255),f,b
 18069  001EBE  B4D8               	btfsc	status,2,c
 18070  001EC0  D003               	goto	l6874
 18071                           
 18072                           ; BSR set to: 0
 18073                           ;doprnt.c: 1439: (putch('-') );
 18074  001EC2  0E2D               	movlw	45
 18075  001EC4  ECC1  F02D         	call	_putch
 18076  001EC8                     l6874:
 18077                           
 18078                           ;doprnt.c: 1469: }
 18079                           ;doprnt.c: 1472: prec = c;
 18080  001EC8  C0A8  F09E         	movff	printf@c,printf@prec
 18081                           
 18082                           ;doprnt.c: 1474: while(prec--) {
 18083  001ECC  D02C               	goto	l6880
 18084  001ECE                     l6876:
 18085                           
 18086                           ;doprnt.c: 1478: {
 18087                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 18088  001ECE  0100               	movlb	0	; () banked
 18089  001ED0  519E               	movf	printf@prec& (0+255),w,b
 18090  001ED2  0D02               	mullw	2
 18091  001ED4  0E9C               	movlw	low _dpowers
 18092  001ED6  24F3               	addwf	prodl,w,c
 18093  001ED8  6EF6               	movwf	tblptrl,c
 18094  001EDA  0EFA               	movlw	high _dpowers
 18095  001EDC  20F4               	addwfc	prodh,w,c
 18096  001EDE  6EF7               	movwf	tblptrh,c
 18097  001EE0                     	if	1	;There are 3 active tblptr bytes
 18098  001EE0  6AF8               	clrf	tblptru,c
 18099  001EE2  0E00               	movlw	low (__mediumconst shr (0+16))
 18100  001EE4  22F8               	addwfc	tblptru,f,c
 18101  001EE6                     	endif
 18102  001EE6  0009               	tblrd		*+
 18103  001EE8  CFF5 F082          	movff	tablat,___lwdiv@divisor
 18104  001EEC  000A               	tblrd		*-
 18105  001EEE  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 18106  001EF2  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 18107  001EF6  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 18108  001EFA  EC2F  F027         	call	___lwdiv	;wreg free
 18109  001EFE  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 18110  001F02  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 18111  001F06  0E00               	movlw	0
 18112  001F08  0100               	movlb	0	; () banked
 18113  001F0A  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 18114  001F0C  0E0A               	movlw	10
 18115  001F0E  6F89               	movwf	___lwmod@divisor& (0+255),b
 18116  001F10  ECB1  F028         	call	___lwmod	;wreg free
 18117  001F14  0100               	movlb	0	; () banked
 18118  001F16  5187               	movf	?___lwmod& (0+255),w,b
 18119  001F18  0F30               	addlw	48
 18120  001F1A  0100               	movlb	0	; () banked
 18121  001F1C  6FA8               	movwf	printf@c& (0+255),b
 18122                           
 18123                           ; BSR set to: 0
 18124                           ;doprnt.c: 1523: }
 18125                           ;doprnt.c: 1524: (putch(c) );
 18126  001F1E  0100               	movlb	0	; () banked
 18127  001F20  51A8               	movf	printf@c& (0+255),w,b
 18128  001F22  ECC1  F02D         	call	_putch
 18129  001F26                     l6880:
 18130  001F26  0100               	movlb	0	; () banked
 18131  001F28  079E               	decf	printf@prec& (0+255),f,b
 18132  001F2A  0100               	movlb	0	; () banked
 18133  001F2C  299E               	incf	printf@prec& (0+255),w,b
 18134  001F2E  A4D8               	btfss	status,2,c
 18135  001F30  D7CE               	goto	l6876
 18136  001F32                     l6882:
 18137  001F32  C08E  FFF6         	movff	printf@f,tblptrl
 18138  001F36  C08F  FFF7         	movff	printf@f+1,tblptrh
 18139  001F3A  0100               	movlb	0	; () banked
 18140  001F3C  4B8E               	infsnz	printf@f& (0+255),f,b
 18141  001F3E  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18142  001F40                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18143  001F40  6AF8               	clrf	tblptru,c
 18144  001F42                     	endif
 18145  001F42                     	if	0	;tblptru may be non-zero
 18146  001F42                     	endif
 18147  001F42  0008               	tblrd		*
 18148  001F44  CFF5 F0A8          	movff	tablat,printf@c
 18149  001F48  0100               	movlb	0	; () banked
 18150  001F4A  51A8               	movf	printf@c& (0+255),w,b
 18151  001F4C  B4D8               	btfsc	status,2,c
 18152  001F4E  0012               	return	
 18153  001F50  D5EB               	goto	l6752
 18154  001F52                     __end_of_printf:
 18155                           	opt stack 0
 18156                           tblptru	equ	0xFF8
 18157                           tblptrh	equ	0xFF7
 18158                           tblptrl	equ	0xFF6
 18159                           tablat	equ	0xFF5
 18160                           prodh	equ	0xFF4
 18161                           prodl	equ	0xFF3
 18162                           intcon	equ	0xFF2
 18163                           intcon2	equ	0xFF1
 18164                           intcon3	equ	0xFF0
 18165                           indf0	equ	0xFEF
 18166                           postinc0	equ	0xFEE
 18167                           fsr0h	equ	0xFEA
 18168                           fsr0l	equ	0xFE9
 18169                           wreg	equ	0xFE8
 18170                           postdec1	equ	0xFE5
 18171                           fsr1l	equ	0xFE1
 18172                           indf2	equ	0xFDF
 18173                           postinc2	equ	0xFDE
 18174                           postdec2	equ	0xFDD
 18175                           fsr2h	equ	0xFDA
 18176                           fsr2l	equ	0xFD9
 18177                           status	equ	0xFD8
 18178                           
 18179 ;; *************** function _putch *****************
 18180 ;; Defined at:
 18181 ;;		line 20 in file "lcd.c"
 18182 ;; Parameters:    Size  Location     Type
 18183 ;;  data            1    wreg     unsigned char 
 18184 ;; Auto vars:     Size  Location     Type
 18185 ;;  data            1    2[BANK0 ] unsigned char 
 18186 ;; Return value:  Size  Location     Type
 18187 ;;                  1    wreg      void 
 18188 ;; Registers used:
 18189 ;;		wreg, status,2, status,0, cstack
 18190 ;; Tracked objects:
 18191 ;;		On entry : 0/0
 18192 ;;		On exit  : 0/0
 18193 ;;		Unchanged: 0/0
 18194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18196 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18198 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18199 ;;Total ram usage:        1 bytes
 18200 ;; Hardware stack levels used:    1
 18201 ;; Hardware stack levels required when called:    8
 18202 ;; This function calls:
 18203 ;;		_lcdNibble
 18204 ;; This function is called by:
 18205 ;;		_printf
 18206 ;; This function uses a non-reentrant model
 18207 ;;
 18208                           
 18209                           	psect	text57
 18210  005B82                     __ptext57:
 18211                           	opt stack 0
 18212  005B82                     _putch:
 18213                           	opt stack 18
 18214                           
 18215                           ;incstack = 0
 18216                           ;putch@data stored from wreg
 18217  005B82  0100               	movlb	0	; () banked
 18218  005B84  6F82               	movwf	putch@data& (0+255),b
 18219                           
 18220                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 18221  005B86  848C               	bsf	3980,2,c	;volatile
 18222                           
 18223                           ;lcd.c: 22: lcdNibble(data);
 18224  005B88  0100               	movlb	0	; () banked
 18225  005B8A  5182               	movf	putch@data& (0+255),w,b
 18226  005B8C  EC15  F028         	call	_lcdNibble
 18227  005B90  0012               	return		;funcret
 18228  005B92                     __end_of_putch:
 18229                           	opt stack 0
 18230                           tblptru	equ	0xFF8
 18231                           tblptrh	equ	0xFF7
 18232                           tblptrl	equ	0xFF6
 18233                           tablat	equ	0xFF5
 18234                           prodh	equ	0xFF4
 18235                           prodl	equ	0xFF3
 18236                           intcon	equ	0xFF2
 18237                           intcon2	equ	0xFF1
 18238                           intcon3	equ	0xFF0
 18239                           indf0	equ	0xFEF
 18240                           postinc0	equ	0xFEE
 18241                           fsr0h	equ	0xFEA
 18242                           fsr0l	equ	0xFE9
 18243                           wreg	equ	0xFE8
 18244                           postdec1	equ	0xFE5
 18245                           fsr1l	equ	0xFE1
 18246                           indf2	equ	0xFDF
 18247                           postinc2	equ	0xFDE
 18248                           postdec2	equ	0xFDD
 18249                           fsr2h	equ	0xFDA
 18250                           fsr2l	equ	0xFD9
 18251                           status	equ	0xFD8
 18252                           
 18253 ;; *************** function _isdigit *****************
 18254 ;; Defined at:
 18255 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 18256 ;; Parameters:    Size  Location     Type
 18257 ;;  c               1    wreg     unsigned char 
 18258 ;; Auto vars:     Size  Location     Type
 18259 ;;  c               1    2[BANK0 ] unsigned char 
 18260 ;; Return value:  Size  Location     Type
 18261 ;;		None               void
 18262 ;; Registers used:
 18263 ;;		wreg, status,2, status,0
 18264 ;; Tracked objects:
 18265 ;;		On entry : 0/0
 18266 ;;		On exit  : 0/0
 18267 ;;		Unchanged: 0/0
 18268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18270 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18271 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18272 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18273 ;;Total ram usage:        3 bytes
 18274 ;; Hardware stack levels used:    1
 18275 ;; Hardware stack levels required when called:    7
 18276 ;; This function calls:
 18277 ;;		Nothing
 18278 ;; This function is called by:
 18279 ;;		_printf
 18280 ;; This function uses a non-reentrant model
 18281 ;;
 18282                           
 18283                           	psect	text58
 18284  005994                     __ptext58:
 18285                           	opt stack 0
 18286  005994                     _isdigit:
 18287                           	opt stack 19
 18288                           
 18289                           ;incstack = 0
 18290                           ;isdigit@c stored from wreg
 18291  005994  0100               	movlb	0	; () banked
 18292  005996  6F82               	movwf	isdigit@c& (0+255),b
 18293  005998  0E00               	movlw	0
 18294  00599A  0100               	movlb	0	; () banked
 18295  00599C  6F81               	movwf	_isdigit$2068& (0+255),b
 18296                           
 18297                           ; BSR set to: 0
 18298  00599E  0E3A               	movlw	58
 18299  0059A0  0100               	movlb	0	; () banked
 18300  0059A2  6182               	cpfslt	isdigit@c& (0+255),b
 18301  0059A4  D007               	goto	l6600
 18302                           
 18303                           ; BSR set to: 0
 18304  0059A6  0E2F               	movlw	47
 18305  0059A8  0100               	movlb	0	; () banked
 18306  0059AA  6582               	cpfsgt	isdigit@c& (0+255),b
 18307  0059AC  D003               	goto	l6600
 18308                           
 18309                           ; BSR set to: 0
 18310  0059AE  0E01               	movlw	1
 18311  0059B0  0100               	movlb	0	; () banked
 18312  0059B2  6F81               	movwf	_isdigit$2068& (0+255),b
 18313  0059B4                     l6600:
 18314                           
 18315                           ; BSR set to: 0
 18316  0059B4  C081  F080         	movff	_isdigit$2068,??_isdigit
 18317  0059B8  0100               	movlb	0	; () banked
 18318  0059BA  3180               	rrcf	??_isdigit& (0+255),w,b
 18319  0059BC  0012               	return	
 18320  0059BE                     __end_of_isdigit:
 18321                           	opt stack 0
 18322                           tblptru	equ	0xFF8
 18323                           tblptrh	equ	0xFF7
 18324                           tblptrl	equ	0xFF6
 18325                           tablat	equ	0xFF5
 18326                           prodh	equ	0xFF4
 18327                           prodl	equ	0xFF3
 18328                           intcon	equ	0xFF2
 18329                           intcon2	equ	0xFF1
 18330                           intcon3	equ	0xFF0
 18331                           indf0	equ	0xFEF
 18332                           postinc0	equ	0xFEE
 18333                           fsr0h	equ	0xFEA
 18334                           fsr0l	equ	0xFE9
 18335                           wreg	equ	0xFE8
 18336                           postdec1	equ	0xFE5
 18337                           fsr1l	equ	0xFE1
 18338                           indf2	equ	0xFDF
 18339                           postinc2	equ	0xFDE
 18340                           postdec2	equ	0xFDD
 18341                           fsr2h	equ	0xFDA
 18342                           fsr2l	equ	0xFD9
 18343                           status	equ	0xFD8
 18344                           
 18345 ;; *************** function ___wmul *****************
 18346 ;; Defined at:
 18347 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 18348 ;; Parameters:    Size  Location     Type
 18349 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18350 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18351 ;; Auto vars:     Size  Location     Type
 18352 ;;  product         2    4[BANK0 ] unsigned int 
 18353 ;; Return value:  Size  Location     Type
 18354 ;;                  2    0[BANK0 ] unsigned int 
 18355 ;; Registers used:
 18356 ;;		wreg, status,2, status,0, prodl, prodh
 18357 ;; Tracked objects:
 18358 ;;		On entry : 0/0
 18359 ;;		On exit  : 0/0
 18360 ;;		Unchanged: 0/0
 18361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18362 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18363 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18365 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18366 ;;Total ram usage:        6 bytes
 18367 ;; Hardware stack levels used:    1
 18368 ;; Hardware stack levels required when called:    7
 18369 ;; This function calls:
 18370 ;;		Nothing
 18371 ;; This function is called by:
 18372 ;;		_printf
 18373 ;; This function uses a non-reentrant model
 18374 ;;
 18375                           
 18376                           	psect	text59
 18377  005666                     __ptext59:
 18378                           	opt stack 0
 18379  005666                     ___wmul:
 18380                           	opt stack 19
 18381                           
 18382                           ; BSR set to: 0
 18383                           ;incstack = 0
 18384  005666  0100               	movlb	0	; () banked
 18385  005668  5180               	movf	___wmul@multiplier& (0+255),w,b
 18386  00566A  0100               	movlb	0	; () banked
 18387  00566C  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18388  00566E  CFF3 F084          	movff	prodl,___wmul@product
 18389  005672  CFF4 F085          	movff	prodh,___wmul@product+1
 18390  005676  0100               	movlb	0	; () banked
 18391  005678  5180               	movf	___wmul@multiplier& (0+255),w,b
 18392  00567A  0100               	movlb	0	; () banked
 18393  00567C  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 18394  00567E  50F3               	movf	prodl,w,c
 18395  005680  0100               	movlb	0	; () banked
 18396  005682  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18397  005684  0100               	movlb	0	; () banked
 18398  005686  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 18399  005688  0100               	movlb	0	; () banked
 18400  00568A  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18401  00568C  50F3               	movf	prodl,w,c
 18402  00568E  0100               	movlb	0	; () banked
 18403  005690  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18404                           
 18405                           ; BSR set to: 0
 18406  005692  C084  F080         	movff	___wmul@product,?___wmul
 18407  005696  C085  F081         	movff	___wmul@product+1,?___wmul+1
 18408  00569A  0012               	return	
 18409  00569C                     __end_of___wmul:
 18410                           	opt stack 0
 18411                           tblptru	equ	0xFF8
 18412                           tblptrh	equ	0xFF7
 18413                           tblptrl	equ	0xFF6
 18414                           tablat	equ	0xFF5
 18415                           prodh	equ	0xFF4
 18416                           prodl	equ	0xFF3
 18417                           intcon	equ	0xFF2
 18418                           intcon2	equ	0xFF1
 18419                           intcon3	equ	0xFF0
 18420                           indf0	equ	0xFEF
 18421                           postinc0	equ	0xFEE
 18422                           fsr0h	equ	0xFEA
 18423                           fsr0l	equ	0xFE9
 18424                           wreg	equ	0xFE8
 18425                           postdec1	equ	0xFE5
 18426                           fsr1l	equ	0xFE1
 18427                           indf2	equ	0xFDF
 18428                           postinc2	equ	0xFDE
 18429                           postdec2	equ	0xFDD
 18430                           fsr2h	equ	0xFDA
 18431                           fsr2l	equ	0xFD9
 18432                           status	equ	0xFD8
 18433                           
 18434 ;; *************** function ___lwmod *****************
 18435 ;; Defined at:
 18436 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 18437 ;; Parameters:    Size  Location     Type
 18438 ;;  dividend        2    7[BANK0 ] unsigned int 
 18439 ;;  divisor         2    9[BANK0 ] unsigned int 
 18440 ;; Auto vars:     Size  Location     Type
 18441 ;;  counter         1   11[BANK0 ] unsigned char 
 18442 ;; Return value:  Size  Location     Type
 18443 ;;                  2    7[BANK0 ] unsigned int 
 18444 ;; Registers used:
 18445 ;;		wreg, status,2, status,0
 18446 ;; Tracked objects:
 18447 ;;		On entry : 0/0
 18448 ;;		On exit  : 0/0
 18449 ;;		Unchanged: 0/0
 18450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18451 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18452 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18454 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18455 ;;Total ram usage:        5 bytes
 18456 ;; Hardware stack levels used:    1
 18457 ;; Hardware stack levels required when called:    7
 18458 ;; This function calls:
 18459 ;;		Nothing
 18460 ;; This function is called by:
 18461 ;;		_printf
 18462 ;; This function uses a non-reentrant model
 18463 ;;
 18464                           
 18465                           	psect	text60
 18466  005162                     __ptext60:
 18467                           	opt stack 0
 18468  005162                     ___lwmod:
 18469                           	opt stack 19
 18470                           
 18471                           ; BSR set to: 0
 18472                           ;incstack = 0
 18473  005162  0100               	movlb	0	; () banked
 18474  005164  5189               	movf	___lwmod@divisor& (0+255),w,b
 18475  005166  0100               	movlb	0	; () banked
 18476  005168  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 18477  00516A  B4D8               	btfsc	status,2,c
 18478  00516C  D026               	goto	l1985
 18479                           
 18480                           ; BSR set to: 0
 18481  00516E  0E01               	movlw	1
 18482  005170  0100               	movlb	0	; () banked
 18483  005172  6F8B               	movwf	___lwmod@counter& (0+255),b
 18484  005174  D006               	goto	l6638
 18485  005176                     l6636:
 18486                           
 18487                           ; BSR set to: 0
 18488  005176  0100               	movlb	0	; () banked
 18489  005178  90D8               	bcf	status,0,c
 18490  00517A  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 18491  00517C  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 18492  00517E  0100               	movlb	0	; () banked
 18493  005180  2B8B               	incf	___lwmod@counter& (0+255),f,b
 18494  005182                     l6638:
 18495                           
 18496                           ; BSR set to: 0
 18497  005182  0100               	movlb	0	; () banked
 18498  005184  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 18499  005186  D7F7               	goto	l6636
 18500  005188                     l6640:
 18501                           
 18502                           ; BSR set to: 0
 18503  005188  0100               	movlb	0	; () banked
 18504  00518A  5189               	movf	___lwmod@divisor& (0+255),w,b
 18505  00518C  0100               	movlb	0	; () banked
 18506  00518E  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 18507  005190  0100               	movlb	0	; () banked
 18508  005192  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18509  005194  0100               	movlb	0	; () banked
 18510  005196  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 18511  005198  A0D8               	btfss	status,0,c
 18512  00519A  D008               	goto	l6644
 18513                           
 18514                           ; BSR set to: 0
 18515  00519C  0100               	movlb	0	; () banked
 18516  00519E  5189               	movf	___lwmod@divisor& (0+255),w,b
 18517  0051A0  0100               	movlb	0	; () banked
 18518  0051A2  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 18519  0051A4  0100               	movlb	0	; () banked
 18520  0051A6  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18521  0051A8  0100               	movlb	0	; () banked
 18522  0051AA  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 18523  0051AC                     l6644:
 18524                           
 18525                           ; BSR set to: 0
 18526  0051AC  0100               	movlb	0	; () banked
 18527  0051AE  90D8               	bcf	status,0,c
 18528  0051B0  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 18529  0051B2  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 18530                           
 18531                           ; BSR set to: 0
 18532  0051B4  0100               	movlb	0	; () banked
 18533  0051B6  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 18534  0051B8  D7E7               	goto	l6640
 18535  0051BA                     l1985:
 18536                           
 18537                           ; BSR set to: 0
 18538  0051BA  C087  F087         	movff	___lwmod@dividend,?___lwmod
 18539  0051BE  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 18540                           
 18541                           ; BSR set to: 0
 18542  0051C2  0012               	return		;funcret
 18543  0051C4                     __end_of___lwmod:
 18544                           	opt stack 0
 18545                           tblptru	equ	0xFF8
 18546                           tblptrh	equ	0xFF7
 18547                           tblptrl	equ	0xFF6
 18548                           tablat	equ	0xFF5
 18549                           prodh	equ	0xFF4
 18550                           prodl	equ	0xFF3
 18551                           intcon	equ	0xFF2
 18552                           intcon2	equ	0xFF1
 18553                           intcon3	equ	0xFF0
 18554                           indf0	equ	0xFEF
 18555                           postinc0	equ	0xFEE
 18556                           fsr0h	equ	0xFEA
 18557                           fsr0l	equ	0xFE9
 18558                           wreg	equ	0xFE8
 18559                           postdec1	equ	0xFE5
 18560                           fsr1l	equ	0xFE1
 18561                           indf2	equ	0xFDF
 18562                           postinc2	equ	0xFDE
 18563                           postdec2	equ	0xFDD
 18564                           fsr2h	equ	0xFDA
 18565                           fsr2l	equ	0xFD9
 18566                           status	equ	0xFD8
 18567                           
 18568 ;; *************** function ___lwdiv *****************
 18569 ;; Defined at:
 18570 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 18571 ;; Parameters:    Size  Location     Type
 18572 ;;  dividend        2    0[BANK0 ] unsigned int 
 18573 ;;  divisor         2    2[BANK0 ] unsigned int 
 18574 ;; Auto vars:     Size  Location     Type
 18575 ;;  quotient        2    4[BANK0 ] unsigned int 
 18576 ;;  counter         1    6[BANK0 ] unsigned char 
 18577 ;; Return value:  Size  Location     Type
 18578 ;;                  2    0[BANK0 ] unsigned int 
 18579 ;; Registers used:
 18580 ;;		wreg, status,2, status,0
 18581 ;; Tracked objects:
 18582 ;;		On entry : 0/0
 18583 ;;		On exit  : 0/0
 18584 ;;		Unchanged: 0/0
 18585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18586 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18587 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18589 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18590 ;;Total ram usage:        7 bytes
 18591 ;; Hardware stack levels used:    1
 18592 ;; Hardware stack levels required when called:    7
 18593 ;; This function calls:
 18594 ;;		Nothing
 18595 ;; This function is called by:
 18596 ;;		_printf
 18597 ;; This function uses a non-reentrant model
 18598 ;;
 18599                           
 18600                           	psect	text61
 18601  004E5E                     __ptext61:
 18602                           	opt stack 0
 18603  004E5E                     ___lwdiv:
 18604                           	opt stack 19
 18605                           
 18606                           ; BSR set to: 0
 18607                           ;incstack = 0
 18608  004E5E  0E00               	movlw	0
 18609  004E60  0100               	movlb	0	; () banked
 18610  004E62  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 18611  004E64  0E00               	movlw	0
 18612  004E66  6F84               	movwf	___lwdiv@quotient& (0+255),b
 18613                           
 18614                           ; BSR set to: 0
 18615  004E68  0100               	movlb	0	; () banked
 18616  004E6A  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18617  004E6C  0100               	movlb	0	; () banked
 18618  004E6E  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 18619  004E70  B4D8               	btfsc	status,2,c
 18620  004E72  D02C               	goto	l1975
 18621                           
 18622                           ; BSR set to: 0
 18623  004E74  0E01               	movlw	1
 18624  004E76  0100               	movlb	0	; () banked
 18625  004E78  6F86               	movwf	___lwdiv@counter& (0+255),b
 18626  004E7A  D006               	goto	l6618
 18627  004E7C                     l6616:
 18628                           
 18629                           ; BSR set to: 0
 18630  004E7C  0100               	movlb	0	; () banked
 18631  004E7E  90D8               	bcf	status,0,c
 18632  004E80  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 18633  004E82  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 18634  004E84  0100               	movlb	0	; () banked
 18635  004E86  2B86               	incf	___lwdiv@counter& (0+255),f,b
 18636  004E88                     l6618:
 18637                           
 18638                           ; BSR set to: 0
 18639  004E88  0100               	movlb	0	; () banked
 18640  004E8A  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 18641  004E8C  D7F7               	goto	l6616
 18642  004E8E                     l6620:
 18643                           
 18644                           ; BSR set to: 0
 18645  004E8E  0100               	movlb	0	; () banked
 18646  004E90  90D8               	bcf	status,0,c
 18647  004E92  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 18648  004E94  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 18649                           
 18650                           ; BSR set to: 0
 18651  004E96  0100               	movlb	0	; () banked
 18652  004E98  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18653  004E9A  0100               	movlb	0	; () banked
 18654  004E9C  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 18655  004E9E  0100               	movlb	0	; () banked
 18656  004EA0  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 18657  004EA2  0100               	movlb	0	; () banked
 18658  004EA4  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 18659  004EA6  A0D8               	btfss	status,0,c
 18660  004EA8  D00A               	goto	l6628
 18661                           
 18662                           ; BSR set to: 0
 18663  004EAA  0100               	movlb	0	; () banked
 18664  004EAC  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18665  004EAE  0100               	movlb	0	; () banked
 18666  004EB0  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 18667  004EB2  0100               	movlb	0	; () banked
 18668  004EB4  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 18669  004EB6  0100               	movlb	0	; () banked
 18670  004EB8  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 18671                           
 18672                           ; BSR set to: 0
 18673  004EBA  0100               	movlb	0	; () banked
 18674  004EBC  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 18675  004EBE                     l6628:
 18676                           
 18677                           ; BSR set to: 0
 18678  004EBE  0100               	movlb	0	; () banked
 18679  004EC0  90D8               	bcf	status,0,c
 18680  004EC2  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 18681  004EC4  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 18682                           
 18683                           ; BSR set to: 0
 18684  004EC6  0100               	movlb	0	; () banked
 18685  004EC8  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 18686  004ECA  D7E1               	goto	l6620
 18687  004ECC                     l1975:
 18688                           
 18689                           ; BSR set to: 0
 18690  004ECC  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 18691  004ED0  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 18692                           
 18693                           ; BSR set to: 0
 18694  004ED4  0012               	return		;funcret
 18695  004ED6                     __end_of___lwdiv:
 18696                           	opt stack 0
 18697                           tblptru	equ	0xFF8
 18698                           tblptrh	equ	0xFF7
 18699                           tblptrl	equ	0xFF6
 18700                           tablat	equ	0xFF5
 18701                           prodh	equ	0xFF4
 18702                           prodl	equ	0xFF3
 18703                           intcon	equ	0xFF2
 18704                           intcon2	equ	0xFF1
 18705                           intcon3	equ	0xFF0
 18706                           indf0	equ	0xFEF
 18707                           postinc0	equ	0xFEE
 18708                           fsr0h	equ	0xFEA
 18709                           fsr0l	equ	0xFE9
 18710                           wreg	equ	0xFE8
 18711                           postdec1	equ	0xFE5
 18712                           fsr1l	equ	0xFE1
 18713                           indf2	equ	0xFDF
 18714                           postinc2	equ	0xFDE
 18715                           postdec2	equ	0xFDD
 18716                           fsr2h	equ	0xFDA
 18717                           fsr2l	equ	0xFD9
 18718                           status	equ	0xFD8
 18719                           
 18720 ;; *************** function _lcdInst *****************
 18721 ;; Defined at:
 18722 ;;		line 15 in file "lcd.c"
 18723 ;; Parameters:    Size  Location     Type
 18724 ;;  data            1    wreg     unsigned char 
 18725 ;; Auto vars:     Size  Location     Type
 18726 ;;  data            1    2[BANK0 ] unsigned char 
 18727 ;; Return value:  Size  Location     Type
 18728 ;;                  1    wreg      void 
 18729 ;; Registers used:
 18730 ;;		wreg, status,2, status,0, cstack
 18731 ;; Tracked objects:
 18732 ;;		On entry : 0/0
 18733 ;;		On exit  : 0/0
 18734 ;;		Unchanged: 0/0
 18735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18737 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18739 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18740 ;;Total ram usage:        1 bytes
 18741 ;; Hardware stack levels used:    1
 18742 ;; Hardware stack levels required when called:    8
 18743 ;; This function calls:
 18744 ;;		_lcdNibble
 18745 ;; This function is called by:
 18746 ;;		_UI
 18747 ;;		_change_state_to_menu_start
 18748 ;;		_change_state_to_menu_12
 18749 ;;		_change_state_to_menu_22
 18750 ;;		_initLCD
 18751 ;;		_printRTC
 18752 ;;		_Loading
 18753 ;;		_ID
 18754 ;;		_EEPROM_write
 18755 ;;		_Test
 18756 ;;		_algorithmTest
 18757 ;;		_sensorTest
 18758 ;;		_actuatorTest
 18759 ;;		_BothServos
 18760 ;;		_PortTestDC
 18761 ;;		_PlatformTest
 18762 ;;		_SpeedTest
 18763 ;;		_BlockerTest
 18764 ;;		_arm
 18765 ;;		_PortTestPusher
 18766 ;;		_ToggleTestA5
 18767 ;; This function uses a non-reentrant model
 18768 ;;
 18769                           
 18770                           	psect	text62
 18771  005B92                     __ptext62:
 18772                           	opt stack 0
 18773  005B92                     _lcdInst:
 18774                           	opt stack 20
 18775                           
 18776                           ; BSR set to: 0
 18777                           ;incstack = 0
 18778                           ;lcdInst@data stored from wreg
 18779  005B92  0100               	movlb	0	; () banked
 18780  005B94  6F82               	movwf	lcdInst@data& (0+255),b
 18781                           
 18782                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 18783  005B96  948C               	bcf	3980,2,c	;volatile
 18784                           
 18785                           ;lcd.c: 17: lcdNibble(data);
 18786  005B98  0100               	movlb	0	; () banked
 18787  005B9A  5182               	movf	lcdInst@data& (0+255),w,b
 18788  005B9C  EC15  F028         	call	_lcdNibble
 18789  005BA0  0012               	return		;funcret
 18790  005BA2                     __end_of_lcdInst:
 18791                           	opt stack 0
 18792                           tblptru	equ	0xFF8
 18793                           tblptrh	equ	0xFF7
 18794                           tblptrl	equ	0xFF6
 18795                           tablat	equ	0xFF5
 18796                           prodh	equ	0xFF4
 18797                           prodl	equ	0xFF3
 18798                           intcon	equ	0xFF2
 18799                           intcon2	equ	0xFF1
 18800                           intcon3	equ	0xFF0
 18801                           indf0	equ	0xFEF
 18802                           postinc0	equ	0xFEE
 18803                           fsr0h	equ	0xFEA
 18804                           fsr0l	equ	0xFE9
 18805                           wreg	equ	0xFE8
 18806                           postdec1	equ	0xFE5
 18807                           fsr1l	equ	0xFE1
 18808                           indf2	equ	0xFDF
 18809                           postinc2	equ	0xFDE
 18810                           postdec2	equ	0xFDD
 18811                           fsr2h	equ	0xFDA
 18812                           fsr2l	equ	0xFD9
 18813                           status	equ	0xFD8
 18814                           
 18815 ;; *************** function _lcdNibble *****************
 18816 ;; Defined at:
 18817 ;;		line 25 in file "lcd.c"
 18818 ;; Parameters:    Size  Location     Type
 18819 ;;  data            1    wreg     unsigned char 
 18820 ;; Auto vars:     Size  Location     Type
 18821 ;;  data            1    1[BANK0 ] unsigned char 
 18822 ;;  temp            1    0[BANK0 ] unsigned char 
 18823 ;; Return value:  Size  Location     Type
 18824 ;;                  1    wreg      void 
 18825 ;; Registers used:
 18826 ;;		wreg, status,2, status,0
 18827 ;; Tracked objects:
 18828 ;;		On entry : 0/0
 18829 ;;		On exit  : 0/0
 18830 ;;		Unchanged: 0/0
 18831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18833 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18835 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18836 ;;Total ram usage:        2 bytes
 18837 ;; Hardware stack levels used:    1
 18838 ;; Hardware stack levels required when called:    7
 18839 ;; This function calls:
 18840 ;;		Nothing
 18841 ;; This function is called by:
 18842 ;;		_lcdInst
 18843 ;;		_putch
 18844 ;; This function uses a non-reentrant model
 18845 ;;
 18846                           
 18847                           	psect	text63
 18848  00502A                     __ptext63:
 18849                           	opt stack 0
 18850  00502A                     _lcdNibble:
 18851                           	opt stack 20
 18852                           
 18853                           ;incstack = 0
 18854                           ;lcdNibble@data stored from wreg
 18855  00502A  0100               	movlb	0	; () banked
 18856  00502C  6F81               	movwf	lcdNibble@data& (0+255),b
 18857                           
 18858                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 18859  00502E  9EF2               	bcf	intcon,7,c	;volatile
 18860                           
 18861                           ;lcd.c: 28: char temp = data & 0xF0;
 18862  005030  0100               	movlb	0	; () banked
 18863  005032  5181               	movf	lcdNibble@data& (0+255),w,b
 18864  005034  0BF0               	andlw	240
 18865  005036  0100               	movlb	0	; () banked
 18866  005038  6F80               	movwf	lcdNibble@temp& (0+255),b
 18867                           
 18868                           ;lcd.c: 29: LATD = LATD & 0x0F;
 18869  00503A  508C               	movf	3980,w,c	;volatile
 18870  00503C  0B0F               	andlw	15
 18871  00503E  6E8C               	movwf	3980,c	;volatile
 18872                           
 18873                           ;lcd.c: 30: LATD = temp | LATD;
 18874  005040  0100               	movlb	0	; () banked
 18875  005042  5180               	movf	lcdNibble@temp& (0+255),w,b
 18876  005044  108C               	iorwf	3980,w,c	;volatile
 18877  005046  6E8C               	movwf	3980,c	;volatile
 18878                           
 18879                           ; BSR set to: 0
 18880                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 18881  005048  868C               	bsf	3980,3,c	;volatile
 18882                           
 18883                           ; BSR set to: 0
 18884                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18885  00504A  0E42               	movlw	66
 18886  00504C                     u11447:
 18887  00504C  2EE8               	decfsz	wreg,f,c
 18888  00504E  D7FE               	bra	u11447
 18889  005050  D000               	nop2	
 18890                           
 18891                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 18892  005052  968C               	bcf	3980,3,c	;volatile
 18893                           
 18894                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18895  005054  0E42               	movlw	66
 18896  005056                     u11457:
 18897  005056  2EE8               	decfsz	wreg,f,c
 18898  005058  D7FE               	bra	u11457
 18899  00505A  D000               	nop2	
 18900                           
 18901                           ;lcd.c: 37: data = data << 4;
 18902  00505C  0100               	movlb	0	; () banked
 18903  00505E  3981               	swapf	lcdNibble@data& (0+255),w,b
 18904  005060  0BF0               	andlw	240
 18905  005062  0100               	movlb	0	; () banked
 18906  005064  6F81               	movwf	lcdNibble@data& (0+255),b
 18907                           
 18908                           ;lcd.c: 39: temp = data & 0xF0;
 18909  005066  0100               	movlb	0	; () banked
 18910  005068  5181               	movf	lcdNibble@data& (0+255),w,b
 18911  00506A  0BF0               	andlw	240
 18912  00506C  0100               	movlb	0	; () banked
 18913  00506E  6F80               	movwf	lcdNibble@temp& (0+255),b
 18914                           
 18915                           ;lcd.c: 40: LATD = LATD & 0x0F;
 18916  005070  508C               	movf	3980,w,c	;volatile
 18917  005072  0B0F               	andlw	15
 18918  005074  6E8C               	movwf	3980,c	;volatile
 18919                           
 18920                           ;lcd.c: 41: LATD = temp | LATD;
 18921  005076  0100               	movlb	0	; () banked
 18922  005078  5180               	movf	lcdNibble@temp& (0+255),w,b
 18923  00507A  108C               	iorwf	3980,w,c	;volatile
 18924  00507C  6E8C               	movwf	3980,c	;volatile
 18925                           
 18926                           ; BSR set to: 0
 18927                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 18928  00507E  868C               	bsf	3980,3,c	;volatile
 18929                           
 18930                           ; BSR set to: 0
 18931                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18932  005080  0E42               	movlw	66
 18933  005082                     u11467:
 18934  005082  2EE8               	decfsz	wreg,f,c
 18935  005084  D7FE               	bra	u11467
 18936  005086  D000               	nop2	
 18937                           
 18938                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 18939  005088  968C               	bcf	3980,3,c	;volatile
 18940                           
 18941                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18942  00508A  0E42               	movlw	66
 18943  00508C                     u11477:
 18944  00508C  2EE8               	decfsz	wreg,f,c
 18945  00508E  D7FE               	bra	u11477
 18946  005090  D000               	nop2	
 18947                           
 18948                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 18949  005092  8EF2               	bsf	intcon,7,c	;volatile
 18950  005094  0012               	return		;funcret
 18951  005096                     __end_of_lcdNibble:
 18952                           	opt stack 0
 18953                           tblptru	equ	0xFF8
 18954                           tblptrh	equ	0xFF7
 18955                           tblptrl	equ	0xFF6
 18956                           tablat	equ	0xFF5
 18957                           prodh	equ	0xFF4
 18958                           prodl	equ	0xFF3
 18959                           intcon	equ	0xFF2
 18960                           intcon2	equ	0xFF1
 18961                           intcon3	equ	0xFF0
 18962                           indf0	equ	0xFEF
 18963                           postinc0	equ	0xFEE
 18964                           fsr0h	equ	0xFEA
 18965                           fsr0l	equ	0xFE9
 18966                           wreg	equ	0xFE8
 18967                           postdec1	equ	0xFE5
 18968                           fsr1l	equ	0xFE1
 18969                           indf2	equ	0xFDF
 18970                           postinc2	equ	0xFDE
 18971                           postdec2	equ	0xFDD
 18972                           fsr2h	equ	0xFDA
 18973                           fsr2l	equ	0xFD9
 18974                           status	equ	0xFD8
 18975                           
 18976 ;; *************** function _handler *****************
 18977 ;; Defined at:
 18978 ;;		line 16 in file "interruptHandler.c"
 18979 ;; Parameters:    Size  Location     Type
 18980 ;;		None
 18981 ;; Auto vars:     Size  Location     Type
 18982 ;;		None
 18983 ;; Return value:  Size  Location     Type
 18984 ;;                  1    wreg      void 
 18985 ;; Registers used:
 18986 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18987 ;; Tracked objects:
 18988 ;;		On entry : 0/0
 18989 ;;		On exit  : 0/0
 18990 ;;		Unchanged: 0/0
 18991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18994 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18995 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18996 ;;Total ram usage:       16 bytes
 18997 ;; Hardware stack levels used:    1
 18998 ;; Hardware stack levels required when called:    6
 18999 ;; This function calls:
 19000 ;;		_printSortTimer
 19001 ;;		_updateArmState
 19002 ;;		_updateMenu
 19003 ;;		_updateServoStates
 19004 ;;		i2_change_state_to_menu_start
 19005 ;; This function is called by:
 19006 ;;		Interrupt level 2
 19007 ;; This function uses a non-reentrant model
 19008 ;;
 19009                           
 19010                           	psect	intcode
 19011  000008                     __pintcode:
 19012                           	opt stack 0
 19013  000008                     _handler:
 19014                           	opt stack 18
 19015                           
 19016                           ;incstack = 0
 19017  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19018  00000A  ED95  F01C         	call	int_func,f	;refresh shadow registers
 19019                           tblptru	equ	0xFF8
 19020                           tblptrh	equ	0xFF7
 19021                           tblptrl	equ	0xFF6
 19022                           tablat	equ	0xFF5
 19023                           prodh	equ	0xFF4
 19024                           prodl	equ	0xFF3
 19025                           intcon	equ	0xFF2
 19026                           intcon2	equ	0xFF1
 19027                           intcon3	equ	0xFF0
 19028                           indf0	equ	0xFEF
 19029                           postinc0	equ	0xFEE
 19030                           fsr0h	equ	0xFEA
 19031                           fsr0l	equ	0xFE9
 19032                           wreg	equ	0xFE8
 19033                           postdec1	equ	0xFE5
 19034                           fsr1l	equ	0xFE1
 19035                           indf2	equ	0xFDF
 19036                           postinc2	equ	0xFDE
 19037                           postdec2	equ	0xFDD
 19038                           fsr2h	equ	0xFDA
 19039                           fsr2l	equ	0xFD9
 19040                           status	equ	0xFD8
 19041                           
 19042                           	psect	intcode_body
 19043  00392A                     __pintcode_body:
 19044                           	opt stack 18
 19045  00392A                     int_func:
 19046                           	opt stack 18
 19047  00392A  0006               	pop		; remove dummy address from shadow register refresh
 19048  00392C  CFFA F04D          	movff	pclath,??_handler+2
 19049  003930  CFFB F04E          	movff	pclatu,??_handler+3
 19050  003934  CFE9 F04F          	movff	fsr0l,??_handler+4
 19051  003938  CFEA F050          	movff	fsr0h,??_handler+5
 19052  00393C  CFE1 F051          	movff	fsr1l,??_handler+6
 19053  003940  CFE2 F052          	movff	fsr1h,??_handler+7
 19054  003944  CFD9 F053          	movff	fsr2l,??_handler+8
 19055  003948  CFDA F054          	movff	fsr2h,??_handler+9
 19056  00394C  CFF3 F055          	movff	prodl,??_handler+10
 19057  003950  CFF4 F056          	movff	prodh,??_handler+11
 19058  003954  CFF6 F057          	movff	tblptrl,??_handler+12
 19059  003958  CFF7 F058          	movff	tblptrh,??_handler+13
 19060  00395C  CFF8 F059          	movff	tblptru,??_handler+14
 19061  003960  CFF5 F05A          	movff	tablat,??_handler+15
 19062                           
 19063                           ;interruptHandler.c: 18: if(INT1IF){
 19064  003964  A0F0               	btfss	intcon3,0,c	;volatile
 19065  003966  D034               	goto	i2l10266
 19066                           
 19067                           ;interruptHandler.c: 19: INT1IF = 0;
 19068  003968  90F0               	bcf	intcon3,0,c	;volatile
 19069                           
 19070                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
 19071  00396A  3881               	swapf	3969,w,c	;volatile
 19072  00396C  0B0F               	andlw	15
 19073  00396E  0B0F               	andlw	15
 19074  003970  6E4B               	movwf	??_handler& (0+255),c
 19075  003972  6A4C               	clrf	(??_handler+1)& (0+255),c
 19076  003974  0E8B               	movlw	low _keys
 19077  003976  244B               	addwf	??_handler,w,c
 19078  003978  6EF6               	movwf	tblptrl,c
 19079  00397A  0EFA               	movlw	high _keys
 19080  00397C  204C               	addwfc	??_handler+1,w,c
 19081  00397E  6EF7               	movwf	tblptrh,c
 19082  003980                     	if	1	;There are 3 active tblptr bytes
 19083  003980  6AF8               	clrf	tblptru,c
 19084  003982  0E00               	movlw	low (__mediumconst shr (0+16))
 19085  003984  22F8               	addwfc	tblptru,f,c
 19086  003986                     	endif
 19087  003986  0008               	tblrd		*
 19088  003988  CFF5 F07D          	movff	tablat,_input	;volatile
 19089                           
 19090                           ;interruptHandler.c: 21: if(input == '*'){
 19091  00398C  0E2A               	movlw	42
 19092  00398E  187D               	xorwf	_input,w,c	;volatile
 19093  003990  B4D8               	btfsc	status,2,c
 19094  003992  D00D               	goto	i2l10260
 19095  003994  D018               	goto	i2l10262
 19096  003996                     i2l10250:
 19097                           
 19098                           ;interruptHandler.c: 24: machine_state = Testing_state;
 19099  003996  0E03               	movlw	3
 19100  003998  D007               	goto	L14
 19101  00399A                     i2l10252:
 19102                           
 19103                           ; BSR set to: 0
 19104                           ;interruptHandler.c: 27: machine_state = UI_state;
 19105  00399A  0E00               	movlw	0
 19106  00399C  0100               	movlb	0	; () banked
 19107  00399E  6FFC               	movwf	_machine_state& (0+255),b
 19108                           
 19109                           ; BSR set to: 0
 19110                           ;interruptHandler.c: 28: change_state_to_menu_start();
 19111  0039A0  ECF3  F02C         	call	i2_change_state_to_menu_start	;wreg free
 19112                           
 19113                           ;interruptHandler.c: 29: break;
 19114  0039A4  D015               	goto	i2l10266
 19115  0039A6                     i2l10256:
 19116                           
 19117                           ;interruptHandler.c: 31: machine_state = DoneSorting_state;
 19118  0039A6  0E02               	movlw	2
 19119  0039A8                     L14:
 19120  0039A8  0100               	movlb	0	; () banked
 19121  0039AA  6FFC               	movwf	_machine_state& (0+255),b
 19122                           
 19123                           ; BSR set to: 0
 19124                           ;interruptHandler.c: 33: }
 19125                           
 19126                           ;interruptHandler.c: 32: break;
 19127  0039AC  D011               	goto	i2l10266
 19128  0039AE                     i2l10260:
 19129  0039AE  0100               	movlb	0	; () banked
 19130  0039B0  51FC               	movf	_machine_state& (0+255),w,b
 19131                           
 19132                           ; Switch size 1, requested type "space"
 19133                           ; Number of cases is 3, Range of values is 0 to 3
 19134                           ; switch strategies available:
 19135                           ; Name         Instructions Cycles
 19136                           ; simple_byte           10     6 (average)
 19137                           ;	Chosen strategy is simple_byte
 19138  0039B2  0A00               	xorlw	0	; case 0
 19139  0039B4  B4D8               	btfsc	status,2,c
 19140  0039B6  D7EF               	goto	i2l10250
 19141  0039B8  0A01               	xorlw	1	; case 1
 19142  0039BA  B4D8               	btfsc	status,2,c
 19143  0039BC  D7F4               	goto	i2l10256
 19144  0039BE  0A02               	xorlw	2	; case 3
 19145  0039C0  B4D8               	btfsc	status,2,c
 19146  0039C2  D7EB               	goto	i2l10252
 19147                           
 19148                           ; BSR set to: 0
 19149                           ;interruptHandler.c: 34: }
 19150  0039C4  D005               	goto	i2l10266
 19151  0039C6                     i2l10262:
 19152                           
 19153                           ;interruptHandler.c: 35: else if(machine_state == UI_state){
 19154  0039C6  0100               	movlb	0	; () banked
 19155  0039C8  51FC               	movf	_machine_state& (0+255),w,b
 19156  0039CA  B4D8               	btfsc	status,2,c
 19157                           
 19158                           ; BSR set to: 0
 19159                           ;interruptHandler.c: 36: updateMenu();
 19160  0039CC  ECC6  F017         	call	_updateMenu	;wreg free
 19161  0039D0                     i2l10266:
 19162                           
 19163                           ;interruptHandler.c: 37: }
 19164                           ;interruptHandler.c: 38: }
 19165                           ;interruptHandler.c: 41: if(TMR0IF){
 19166  0039D0  A4F2               	btfss	intcon,2,c	;volatile
 19167  0039D2  D00C               	goto	i2l10280
 19168                           
 19169                           ;interruptHandler.c: 42: TMR0IF = 0;
 19170  0039D4  94F2               	bcf	intcon,2,c	;volatile
 19171                           
 19172                           ;interruptHandler.c: 43: if(machine_state == Sorting_state){
 19173  0039D6  0100               	movlb	0	; () banked
 19174  0039D8  05FC               	decf	_machine_state& (0+255),w,b
 19175  0039DA  A4D8               	btfss	status,2,c
 19176  0039DC  D007               	goto	i2l10280
 19177                           
 19178                           ; BSR set to: 0
 19179                           ;interruptHandler.c: 44: printSortTimer();
 19180  0039DE  EC26  F019         	call	_printSortTimer	;wreg free
 19181                           
 19182                           ;interruptHandler.c: 46: TMR0H = 0b10000101;
 19183  0039E2  0E85               	movlw	133
 19184  0039E4  6ED7               	movwf	4055,c	;volatile
 19185                           
 19186                           ;interruptHandler.c: 47: TMR0L = 0b11101110;
 19187  0039E6  0EEE               	movlw	238
 19188  0039E8  6ED6               	movwf	4054,c	;volatile
 19189                           
 19190                           ;interruptHandler.c: 48: TMR0ON = 1;
 19191  0039EA  8ED5               	bsf	4053,7,c	;volatile
 19192  0039EC                     i2l10280:
 19193                           
 19194                           ;interruptHandler.c: 49: }
 19195                           ;interruptHandler.c: 50: }
 19196                           ;interruptHandler.c: 53: if(TMR1IF){
 19197  0039EC  A09E               	btfss	3998,0,c	;volatile
 19198  0039EE  D028               	goto	i2l10308
 19199                           
 19200                           ;interruptHandler.c: 54: TMR1IF = 0;
 19201  0039F0  909E               	bcf	3998,0,c	;volatile
 19202                           
 19203                           ;interruptHandler.c: 55: TMR1ON = 0;
 19204  0039F2  90CD               	bcf	4045,0,c	;volatile
 19205                           
 19206                           ;interruptHandler.c: 56: if(machine_state == Sorting_state){
 19207  0039F4  0100               	movlb	0	; () banked
 19208  0039F6  05FC               	decf	_machine_state& (0+255),w,b
 19209  0039F8  A4D8               	btfss	status,2,c
 19210  0039FA  D022               	goto	i2l10308
 19211                           
 19212                           ; BSR set to: 0
 19213                           ;interruptHandler.c: 57: if(was_low_1){
 19214  0039FC  5077               	movf	_was_low_1,w,c	;volatile
 19215  0039FE  1078               	iorwf	_was_low_1+1,w,c	;volatile
 19216  003A00  B4D8               	btfsc	status,2,c
 19217  003A02  D00A               	goto	i2l1050
 19218                           
 19219                           ; BSR set to: 0
 19220                           ;interruptHandler.c: 58: LATCbits.LATC1 = 1;
 19221  003A04  828B               	bsf	3979,1,c	;volatile
 19222                           
 19223                           ; BSR set to: 0
 19224                           ;interruptHandler.c: 59: was_low_1 = 0;
 19225  003A06  0E00               	movlw	0
 19226  003A08  6E78               	movwf	_was_low_1+1,c	;volatile
 19227  003A0A  0E00               	movlw	0
 19228  003A0C  6E77               	movwf	_was_low_1,c	;volatile
 19229                           
 19230                           ; BSR set to: 0
 19231                           ;interruptHandler.c: 60: TMR1H = servoTimes[0];
 19232  003A0E  C05B  FFCF         	movff	_servoTimes,4047	;volatile
 19233                           
 19234                           ; BSR set to: 0
 19235                           ;interruptHandler.c: 61: TMR1L = servoTimes[1];
 19236  003A12  C05D  FFCE         	movff	_servoTimes+2,4046	;volatile
 19237                           
 19238                           ;interruptHandler.c: 62: }
 19239  003A16  D00D               	goto	i2l10302
 19240  003A18                     i2l1050:
 19241                           
 19242                           ; BSR set to: 0
 19243                           ;interruptHandler.c: 63: else{
 19244                           ;interruptHandler.c: 64: LATCbits.LATC1 = 0;
 19245  003A18  928B               	bcf	3979,1,c	;volatile
 19246                           
 19247                           ; BSR set to: 0
 19248                           ;interruptHandler.c: 65: was_low_1 = 1;
 19249  003A1A  0E00               	movlw	0
 19250  003A1C  6E78               	movwf	_was_low_1+1,c	;volatile
 19251  003A1E  0E01               	movlw	1
 19252  003A20  6E77               	movwf	_was_low_1,c	;volatile
 19253                           
 19254                           ; BSR set to: 0
 19255                           ;interruptHandler.c: 66: TMR1H = 20000 - servoTimes[0];
 19256  003A22  505B               	movf	_servoTimes,w,c
 19257  003A24  0800               	sublw	0
 19258  003A26  0F20               	addlw	32
 19259  003A28  6ECF               	movwf	4047,c	;volatile
 19260                           
 19261                           ; BSR set to: 0
 19262                           ;interruptHandler.c: 67: TMR1L = 20000 - servoTimes[1];
 19263  003A2A  505D               	movf	_servoTimes+2,w,c
 19264  003A2C  0800               	sublw	0
 19265  003A2E  0F20               	addlw	32
 19266  003A30  6ECE               	movwf	4046,c	;volatile
 19267  003A32                     i2l10302:
 19268                           
 19269                           ; BSR set to: 0
 19270                           ;interruptHandler.c: 68: }
 19271                           ;interruptHandler.c: 69: TMR1ON = 1;
 19272  003A32  80CD               	bsf	4045,0,c	;volatile
 19273                           
 19274                           ; BSR set to: 0
 19275                           ;interruptHandler.c: 70: servo_timer_counter += 10;
 19276  003A34  0E0A               	movlw	10
 19277  003A36  266D               	addwf	_servo_timer_counter,f,c	;volatile
 19278  003A38  0E00               	movlw	0
 19279  003A3A  226E               	addwfc	_servo_timer_counter+1,f,c	;volatile
 19280                           
 19281                           ; BSR set to: 0
 19282                           ;interruptHandler.c: 72: updateServoStates();
 19283  003A3C  EC8A  F01D         	call	_updateServoStates	;wreg free
 19284  003A40                     i2l10308:
 19285                           
 19286                           ;interruptHandler.c: 73: }
 19287                           ;interruptHandler.c: 74: }
 19288                           ;interruptHandler.c: 77: if(TMR2IF){
 19289  003A40  A29E               	btfss	3998,1,c	;volatile
 19290  003A42  D026               	goto	i2l10334
 19291                           
 19292                           ;interruptHandler.c: 80: TMR2IF = 0;
 19293  003A44  929E               	bcf	3998,1,c	;volatile
 19294                           
 19295                           ;interruptHandler.c: 81: TMR2ON = 0;
 19296  003A46  94CA               	bcf	4042,2,c	;volatile
 19297                           
 19298                           ;interruptHandler.c: 82: timer2_counter++;
 19299  003A48  4A73               	infsnz	_timer2_counter,f,c	;volatile
 19300  003A4A  2A74               	incf	_timer2_counter+1,f,c	;volatile
 19301                           
 19302                           ;interruptHandler.c: 83: if(machine_state == Sorting_state){
 19303  003A4C  0100               	movlb	0	; () banked
 19304  003A4E  05FC               	decf	_machine_state& (0+255),w,b
 19305  003A50  A4D8               	btfss	status,2,c
 19306  003A52  D01E               	goto	i2l10334
 19307                           
 19308                           ; BSR set to: 0
 19309                           ;interruptHandler.c: 84: if(was_low_2 && (timer2_counter == 2)){
 19310  003A54  5079               	movf	_was_low_2,w,c	;volatile
 19311  003A56  107A               	iorwf	_was_low_2+1,w,c	;volatile
 19312  003A58  B4D8               	btfsc	status,2,c
 19313  003A5A  D00A               	goto	i2l10324
 19314                           
 19315                           ; BSR set to: 0
 19316  003A5C  0E02               	movlw	2
 19317  003A5E  1873               	xorwf	_timer2_counter,w,c	;volatile
 19318  003A60  1074               	iorwf	_timer2_counter+1,w,c	;volatile
 19319  003A62  A4D8               	btfss	status,2,c
 19320  003A64  D005               	goto	i2l10324
 19321                           
 19322                           ; BSR set to: 0
 19323                           ;interruptHandler.c: 86: LATBbits.LATB3 = 1;
 19324  003A66  868A               	bsf	3978,3,c	;volatile
 19325                           
 19326                           ; BSR set to: 0
 19327                           ;interruptHandler.c: 87: was_low_2 = 0;
 19328  003A68  0E00               	movlw	0
 19329  003A6A  6E7A               	movwf	_was_low_2+1,c	;volatile
 19330  003A6C  0E00               	movlw	0
 19331  003A6E  D008               	goto	L15
 19332  003A70                     i2l10324:
 19333                           
 19334                           ; BSR set to: 0
 19335                           ;interruptHandler.c: 90: else if(!was_low_2){
 19336  003A70  5079               	movf	_was_low_2,w,c	;volatile
 19337  003A72  107A               	iorwf	_was_low_2+1,w,c	;volatile
 19338  003A74  A4D8               	btfss	status,2,c
 19339  003A76  D009               	goto	i2l10330
 19340                           
 19341                           ; BSR set to: 0
 19342                           ;interruptHandler.c: 91: LATBbits.LATB3 = 0;
 19343  003A78  968A               	bcf	3978,3,c	;volatile
 19344                           
 19345                           ; BSR set to: 0
 19346                           ;interruptHandler.c: 92: was_low_2 = 1;
 19347  003A7A  0E00               	movlw	0
 19348  003A7C  6E7A               	movwf	_was_low_2+1,c	;volatile
 19349  003A7E  0E01               	movlw	1
 19350  003A80                     L15:
 19351  003A80  6E79               	movwf	_was_low_2,c	;volatile
 19352                           
 19353                           ;interruptHandler.c: 93: timer2_counter = 0;
 19354  003A82  0E00               	movlw	0
 19355  003A84  6E74               	movwf	_timer2_counter+1,c	;volatile
 19356  003A86  0E00               	movlw	0
 19357  003A88  6E73               	movwf	_timer2_counter,c	;volatile
 19358  003A8A                     i2l10330:
 19359                           
 19360                           ; BSR set to: 0
 19361                           ;interruptHandler.c: 94: }
 19362                           ;interruptHandler.c: 95: updateArmState();
 19363  003A8A  ECC3  F02A         	call	_updateArmState	;wreg free
 19364                           
 19365                           ;interruptHandler.c: 96: TMR2ON = 1;
 19366  003A8E  84CA               	bsf	4042,2,c	;volatile
 19367  003A90                     i2l10334:
 19368                           
 19369                           ;interruptHandler.c: 97: }
 19370                           ;interruptHandler.c: 98: }
 19371                           ;interruptHandler.c: 101: if(TMR3IF){
 19372  003A90  A2A1               	btfss	4001,1,c	;volatile
 19373  003A92  D022               	goto	i2l1061
 19374                           
 19375                           ;interruptHandler.c: 102: TMR3IF = 0;
 19376  003A94  92A1               	bcf	4001,1,c	;volatile
 19377                           
 19378                           ;interruptHandler.c: 103: TMR3ON = 0;
 19379  003A96  90B1               	bcf	4017,0,c	;volatile
 19380                           
 19381                           ;interruptHandler.c: 104: if(machine_state == Sorting_state){
 19382  003A98  0100               	movlb	0	; () banked
 19383  003A9A  05FC               	decf	_machine_state& (0+255),w,b
 19384  003A9C  A4D8               	btfss	status,2,c
 19385  003A9E  D01C               	goto	i2l1061
 19386                           
 19387                           ; BSR set to: 0
 19388                           ;interruptHandler.c: 105: if(was_low_3){
 19389  003AA0  507B               	movf	_was_low_3,w,c	;volatile
 19390  003AA2  107C               	iorwf	_was_low_3+1,w,c	;volatile
 19391  003AA4  B4D8               	btfsc	status,2,c
 19392  003AA6  D00A               	goto	i2l1059
 19393                           
 19394                           ; BSR set to: 0
 19395                           ;interruptHandler.c: 106: LATCbits.LATC2 = 1;
 19396  003AA8  848B               	bsf	3979,2,c	;volatile
 19397                           
 19398                           ; BSR set to: 0
 19399                           ;interruptHandler.c: 107: was_low_3 = 0;
 19400  003AAA  0E00               	movlw	0
 19401  003AAC  6E7C               	movwf	_was_low_3+1,c	;volatile
 19402  003AAE  0E00               	movlw	0
 19403  003AB0  6E7B               	movwf	_was_low_3,c	;volatile
 19404                           
 19405                           ; BSR set to: 0
 19406                           ;interruptHandler.c: 108: TMR3H = servoTimes[2];
 19407  003AB2  C05F  FFB3         	movff	_servoTimes+4,4019	;volatile
 19408                           
 19409                           ; BSR set to: 0
 19410                           ;interruptHandler.c: 109: TMR3L = servoTimes[3];
 19411  003AB6  C061  FFB2         	movff	_servoTimes+6,4018	;volatile
 19412                           
 19413                           ;interruptHandler.c: 110: }
 19414  003ABA  D00D               	goto	i2l10356
 19415  003ABC                     i2l1059:
 19416                           
 19417                           ; BSR set to: 0
 19418                           ;interruptHandler.c: 111: else{
 19419                           ;interruptHandler.c: 112: LATCbits.LATC2 = 0;
 19420  003ABC  948B               	bcf	3979,2,c	;volatile
 19421                           
 19422                           ; BSR set to: 0
 19423                           ;interruptHandler.c: 113: was_low_3 = 1;
 19424  003ABE  0E00               	movlw	0
 19425  003AC0  6E7C               	movwf	_was_low_3+1,c	;volatile
 19426  003AC2  0E01               	movlw	1
 19427  003AC4  6E7B               	movwf	_was_low_3,c	;volatile
 19428                           
 19429                           ; BSR set to: 0
 19430                           ;interruptHandler.c: 114: TMR3H = 20000 - servoTimes[2];
 19431  003AC6  505F               	movf	_servoTimes+4,w,c
 19432  003AC8  0800               	sublw	0
 19433  003ACA  0F20               	addlw	32
 19434  003ACC  6EB3               	movwf	4019,c	;volatile
 19435                           
 19436                           ; BSR set to: 0
 19437                           ;interruptHandler.c: 115: TMR3L = 20000 - servoTimes[3];
 19438  003ACE  5061               	movf	_servoTimes+6,w,c
 19439  003AD0  0800               	sublw	0
 19440  003AD2  0F20               	addlw	32
 19441  003AD4  6EB2               	movwf	4018,c	;volatile
 19442  003AD6                     i2l10356:
 19443                           
 19444                           ; BSR set to: 0
 19445                           ;interruptHandler.c: 116: }
 19446                           ;interruptHandler.c: 117: TMR3ON = 1;
 19447  003AD6  80B1               	bsf	4017,0,c	;volatile
 19448  003AD8                     i2l1061:
 19449  003AD8  C05A  FFF5         	movff	??_handler+15,tablat
 19450  003ADC  C059  FFF8         	movff	??_handler+14,tblptru
 19451  003AE0  C058  FFF7         	movff	??_handler+13,tblptrh
 19452  003AE4  C057  FFF6         	movff	??_handler+12,tblptrl
 19453  003AE8  C056  FFF4         	movff	??_handler+11,prodh
 19454  003AEC  C055  FFF3         	movff	??_handler+10,prodl
 19455  003AF0  C054  FFDA         	movff	??_handler+9,fsr2h
 19456  003AF4  C053  FFD9         	movff	??_handler+8,fsr2l
 19457  003AF8  C052  FFE2         	movff	??_handler+7,fsr1h
 19458  003AFC  C051  FFE1         	movff	??_handler+6,fsr1l
 19459  003B00  C050  FFEA         	movff	??_handler+5,fsr0h
 19460  003B04  C04F  FFE9         	movff	??_handler+4,fsr0l
 19461  003B08  C04E  FFFB         	movff	??_handler+3,pclatu
 19462  003B0C  C04D  FFFA         	movff	??_handler+2,pclath
 19463  003B10  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19464  003B12  0011               	retfie		f
 19465  003B14                     __end_of_handler:
 19466                           	opt stack 0
 19467                           pclatu	equ	0xFFB
 19468                           pclath	equ	0xFFA
 19469                           tblptru	equ	0xFF8
 19470                           tblptrh	equ	0xFF7
 19471                           tblptrl	equ	0xFF6
 19472                           tablat	equ	0xFF5
 19473                           prodh	equ	0xFF4
 19474                           prodl	equ	0xFF3
 19475                           intcon	equ	0xFF2
 19476                           intcon2	equ	0xFF1
 19477                           intcon3	equ	0xFF0
 19478                           indf0	equ	0xFEF
 19479                           postinc0	equ	0xFEE
 19480                           fsr0h	equ	0xFEA
 19481                           fsr0l	equ	0xFE9
 19482                           wreg	equ	0xFE8
 19483                           postdec1	equ	0xFE5
 19484                           fsr1h	equ	0xFE2
 19485                           fsr1l	equ	0xFE1
 19486                           indf2	equ	0xFDF
 19487                           postinc2	equ	0xFDE
 19488                           postdec2	equ	0xFDD
 19489                           fsr2h	equ	0xFDA
 19490                           fsr2l	equ	0xFD9
 19491                           status	equ	0xFD8
 19492                           
 19493 ;; *************** function _updateServoStates *****************
 19494 ;; Defined at:
 19495 ;;		line 575 in file "sort.c"
 19496 ;; Parameters:    Size  Location     Type
 19497 ;;		None
 19498 ;; Auto vars:     Size  Location     Type
 19499 ;;		None
 19500 ;; Return value:  Size  Location     Type
 19501 ;;                  1    wreg      void 
 19502 ;; Registers used:
 19503 ;;		wreg, status,2, status,0, cstack
 19504 ;; Tracked objects:
 19505 ;;		On entry : 0/0
 19506 ;;		On exit  : 0/0
 19507 ;;		Unchanged: 0/0
 19508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19511 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19512 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19513 ;;Total ram usage:        2 bytes
 19514 ;; Hardware stack levels used:    1
 19515 ;; Hardware stack levels required when called:    1
 19516 ;; This function calls:
 19517 ;;		i2_updateServoPosition
 19518 ;; This function is called by:
 19519 ;;		_handler
 19520 ;; This function uses a non-reentrant model
 19521 ;;
 19522                           
 19523                           	psect	text65
 19524  003B14                     __ptext65:
 19525                           	opt stack 0
 19526  003B14                     _updateServoStates:
 19527                           	opt stack 22
 19528                           
 19529                           ;sort.c: 577: if(servo_timer_counter >= servo_timer_target){
 19530                           
 19531                           ;incstack = 0
 19532  003B14  506F               	movf	_servo_timer_target,w,c	;volatile
 19533  003B16  5C6D               	subwf	_servo_timer_counter,w,c	;volatile
 19534  003B18  506E               	movf	_servo_timer_counter+1,w,c	;volatile
 19535  003B1A  0A80               	xorlw	128
 19536  003B1C  6E09               	movwf	??_updateServoStates& (0+255),c
 19537  003B1E  5070               	movf	_servo_timer_target+1,w,c	;volatile
 19538  003B20  0A80               	xorlw	128
 19539  003B22  5809               	subwfb	??_updateServoStates& (0+255),w,c
 19540  003B24  A0D8               	btfss	status,0,c
 19541  003B26  0012               	return	
 19542                           
 19543                           ;sort.c: 579: if(f_panning_to_bin){
 19544  003B28  5069               	movf	_f_panning_to_bin,w,c	;volatile
 19545  003B2A  106A               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 19546  003B2C  A4D8               	btfss	status,2,c
 19547  003B2E  D036               	goto	i2l10124
 19548  003B30  D05F               	goto	i2l10128
 19549  003B32                     i2l10098:
 19550                           
 19551                           ;sort.c: 583: updateServoPosition(1260, 3);
 19552  003B32  0E04               	movlw	4
 19553  003B34  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19554  003B36  0EEC               	movlw	236
 19555  003B38  6E01               	movwf	i2updateServoPosition@time_us,c
 19556  003B3A  0E00               	movlw	0
 19557  003B3C  6E04               	movwf	i2updateServoPosition@timer+1,c
 19558  003B3E  0E03               	movlw	3
 19559  003B40  6E03               	movwf	i2updateServoPosition@timer,c
 19560  003B42  EC4B  F028         	call	i2_updateServoPosition	;wreg free
 19561  003B46  D025               	goto	i2l10118
 19562  003B48                     i2l10102:
 19563                           
 19564                           ;sort.c: 585: servo_timer_target = 700;
 19565  003B48  0E02               	movlw	2
 19566  003B4A  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19567  003B4C  0EBC               	movlw	188
 19568  003B4E  6E6F               	movwf	_servo_timer_target,c	;volatile
 19569                           
 19570                           ;sort.c: 586: break;
 19571  003B50  D04A               	goto	i2l10126
 19572  003B52                     i2l10104:
 19573                           
 19574                           ;sort.c: 588: updateServoPosition(1260, 3);
 19575  003B52  0E04               	movlw	4
 19576  003B54  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19577  003B56  0EEC               	movlw	236
 19578  003B58  6E01               	movwf	i2updateServoPosition@time_us,c
 19579  003B5A  0E00               	movlw	0
 19580  003B5C  6E04               	movwf	i2updateServoPosition@timer+1,c
 19581  003B5E  0E03               	movlw	3
 19582  003B60  6E03               	movwf	i2updateServoPosition@timer,c
 19583  003B62  EC4B  F028         	call	i2_updateServoPosition	;wreg free
 19584  003B66  D015               	goto	i2l10118
 19585  003B68                     i2l10110:
 19586                           
 19587                           ;sort.c: 594: updateServoPosition(1390, 3);
 19588  003B68  0E05               	movlw	5
 19589  003B6A  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19590  003B6C  0E6E               	movlw	110
 19591  003B6E  6E01               	movwf	i2updateServoPosition@time_us,c
 19592  003B70  0E00               	movlw	0
 19593  003B72  6E04               	movwf	i2updateServoPosition@timer+1,c
 19594  003B74  0E03               	movlw	3
 19595  003B76  6E03               	movwf	i2updateServoPosition@timer,c
 19596  003B78  EC4B  F028         	call	i2_updateServoPosition	;wreg free
 19597  003B7C  D00A               	goto	i2l10118
 19598  003B7E                     i2l10116:
 19599                           
 19600                           ;sort.c: 599: updateServoPosition(1390, 3);
 19601  003B7E  0E05               	movlw	5
 19602  003B80  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19603  003B82  0E6E               	movlw	110
 19604  003B84  6E01               	movwf	i2updateServoPosition@time_us,c
 19605  003B86  0E00               	movlw	0
 19606  003B88  6E04               	movwf	i2updateServoPosition@timer+1,c
 19607  003B8A  0E03               	movlw	3
 19608  003B8C  6E03               	movwf	i2updateServoPosition@timer,c
 19609  003B8E  EC4B  F028         	call	i2_updateServoPosition	;wreg free
 19610  003B92                     i2l10118:
 19611                           
 19612                           ;sort.c: 600: servo_timer_counter = 0;
 19613  003B92  0E00               	movlw	0
 19614  003B94  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19615  003B96  0E00               	movlw	0
 19616  003B98  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19617  003B9A  D7D6               	goto	i2l10102
 19618  003B9C                     i2l10124:
 19619  003B9C  C06B  F009         	movff	_pan_servo_state,??_updateServoStates	;volatile
 19620  003BA0  C06C  F00A         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 19621                           
 19622                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 19623                           ; Switch size 1, requested type "space"
 19624                           ; Number of cases is 4, Range of values is 1 to 9
 19625                           ; switch strategies available:
 19626                           ; Name         Instructions Cycles
 19627                           ; simple_byte           13     7 (average)
 19628                           ;	Chosen strategy is simple_byte
 19629  003BA4  500A               	movf	??_updateServoStates+1,w,c
 19630  003BA6  0A01               	xorlw	1	; case 1
 19631  003BA8  B4D8               	btfsc	status,2,c
 19632  003BAA  D00A               	goto	i2l10804
 19633  003BAC  0A02               	xorlw	2	; case 3
 19634  003BAE  B4D8               	btfsc	status,2,c
 19635  003BB0  D00C               	goto	i2l10806
 19636  003BB2  0A05               	xorlw	5	; case 6
 19637  003BB4  B4D8               	btfsc	status,2,c
 19638  003BB6  D00E               	goto	i2l10808
 19639  003BB8  0A0F               	xorlw	15	; case 9
 19640  003BBA  B4D8               	btfsc	status,2,c
 19641  003BBC  D010               	goto	i2l10810
 19642  003BBE  D013               	goto	i2l10126
 19643  003BC0                     i2l10804:
 19644                           
 19645                           ; Switch size 1, requested type "space"
 19646                           ; Number of cases is 1, Range of values is 244 to 244
 19647                           ; switch strategies available:
 19648                           ; Name         Instructions Cycles
 19649                           ; simple_byte            4     3 (average)
 19650                           ;	Chosen strategy is simple_byte
 19651  003BC0  5009               	movf	??_updateServoStates,w,c
 19652  003BC2  0AF4               	xorlw	244	; case 244
 19653  003BC4  B4D8               	btfsc	status,2,c
 19654  003BC6  D7B5               	goto	i2l10098
 19655  003BC8  D00E               	goto	i2l10126
 19656  003BCA                     i2l10806:
 19657                           
 19658                           ; Switch size 1, requested type "space"
 19659                           ; Number of cases is 1, Range of values is 82 to 82
 19660                           ; switch strategies available:
 19661                           ; Name         Instructions Cycles
 19662                           ; simple_byte            4     3 (average)
 19663                           ;	Chosen strategy is simple_byte
 19664  003BCA  5009               	movf	??_updateServoStates,w,c
 19665  003BCC  0A52               	xorlw	82	; case 82
 19666  003BCE  B4D8               	btfsc	status,2,c
 19667  003BD0  D7C0               	goto	i2l10104
 19668  003BD2  D009               	goto	i2l10126
 19669  003BD4                     i2l10808:
 19670                           
 19671                           ; Switch size 1, requested type "space"
 19672                           ; Number of cases is 1, Range of values is 134 to 134
 19673                           ; switch strategies available:
 19674                           ; Name         Instructions Cycles
 19675                           ; simple_byte            4     3 (average)
 19676                           ;	Chosen strategy is simple_byte
 19677  003BD4  5009               	movf	??_updateServoStates,w,c
 19678  003BD6  0A86               	xorlw	134	; case 134
 19679  003BD8  B4D8               	btfsc	status,2,c
 19680  003BDA  D7C6               	goto	i2l10110
 19681  003BDC  D004               	goto	i2l10126
 19682  003BDE                     i2l10810:
 19683                           
 19684                           ; Switch size 1, requested type "space"
 19685                           ; Number of cases is 1, Range of values is 96 to 96
 19686                           ; switch strategies available:
 19687                           ; Name         Instructions Cycles
 19688                           ; simple_byte            4     3 (average)
 19689                           ;	Chosen strategy is simple_byte
 19690  003BDE  5009               	movf	??_updateServoStates,w,c
 19691  003BE0  0A60               	xorlw	96	; case 96
 19692  003BE2  B4D8               	btfsc	status,2,c
 19693  003BE4  D7CC               	goto	i2l10116
 19694  003BE6                     i2l10126:
 19695                           
 19696                           ;sort.c: 606: f_panning_to_bin = 0;
 19697  003BE6  0E00               	movlw	0
 19698  003BE8  6E6A               	movwf	_f_panning_to_bin+1,c	;volatile
 19699  003BEA  0E00               	movlw	0
 19700  003BEC  6E69               	movwf	_f_panning_to_bin,c	;volatile
 19701                           
 19702                           ;sort.c: 607: }
 19703  003BEE  0012               	return	
 19704  003BF0                     i2l10128:
 19705                           
 19706                           ;sort.c: 608: else if(pan_servo_state == 1200){
 19707  003BF0  0EB0               	movlw	176
 19708  003BF2  186B               	xorwf	_pan_servo_state,w,c	;volatile
 19709  003BF4  E15A               	bnz	i2l10158
 19710  003BF6  0E04               	movlw	4
 19711  003BF8  186C               	xorwf	_pan_servo_state+1,w,c	;volatile
 19712  003BFA  A4D8               	btfss	status,2,c
 19713  003BFC  D056               	goto	i2l10158
 19714                           
 19715                           ;sort.c: 610: servo_timer_counter = 0;
 19716  003BFE  0E00               	movlw	0
 19717  003C00  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19718  003C02  0E00               	movlw	0
 19719  003C04  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19720                           
 19721                           ;sort.c: 611: }
 19722  003C06  0012               	return	
 19723  003C08                     i2l10132:
 19724                           
 19725                           ;sort.c: 616: updateServoPosition(1050, 3);
 19726  003C08  0E04               	movlw	4
 19727  003C0A  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19728  003C0C  0E1A               	movlw	26
 19729  003C0E  6E01               	movwf	i2updateServoPosition@time_us,c
 19730  003C10  0E00               	movlw	0
 19731  003C12  6E04               	movwf	i2updateServoPosition@timer+1,c
 19732  003C14  0E03               	movlw	3
 19733  003C16  6E03               	movwf	i2updateServoPosition@timer,c
 19734  003C18  EC4B  F028         	call	i2_updateServoPosition	;wreg free
 19735                           
 19736                           ;sort.c: 617: servo_timer_counter = 0;
 19737  003C1C  0E00               	movlw	0
 19738  003C1E  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19739  003C20  0E00               	movlw	0
 19740  003C22  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19741                           
 19742                           ;sort.c: 618: servo_timer_target = 750;
 19743  003C24  0E02               	movlw	2
 19744  003C26  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19745  003C28  0EEE               	movlw	238
 19746  003C2A  6E6F               	movwf	_servo_timer_target,c	;volatile
 19747                           
 19748                           ;sort.c: 619: break;
 19749  003C2C  0012               	return	
 19750  003C2E                     i2l10138:
 19751                           
 19752                           ;sort.c: 621: updateServoPosition(1050, 3);
 19753  003C2E  0E04               	movlw	4
 19754  003C30  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19755  003C32  0E1A               	movlw	26
 19756  003C34  6E01               	movwf	i2updateServoPosition@time_us,c
 19757  003C36  0E00               	movlw	0
 19758  003C38  6E04               	movwf	i2updateServoPosition@timer+1,c
 19759  003C3A  0E03               	movlw	3
 19760  003C3C  6E03               	movwf	i2updateServoPosition@timer,c
 19761  003C3E  EC4B  F028         	call	i2_updateServoPosition	;wreg free
 19762                           
 19763                           ;sort.c: 622: servo_timer_counter = 0;
 19764  003C42  0E00               	movlw	0
 19765  003C44  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19766  003C46  0E00               	movlw	0
 19767  003C48  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19768                           
 19769                           ;sort.c: 623: servo_timer_target = 750;
 19770  003C4A  0E02               	movlw	2
 19771  003C4C  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19772  003C4E  0EEE               	movlw	238
 19773  003C50  6E6F               	movwf	_servo_timer_target,c	;volatile
 19774                           
 19775                           ;sort.c: 624: break;
 19776  003C52  0012               	return	
 19777  003C54                     i2l10144:
 19778                           
 19779                           ;sort.c: 627: updateServoPosition(1200, 1);
 19780  003C54  0E04               	movlw	4
 19781  003C56  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19782  003C58  0EB0               	movlw	176
 19783  003C5A  6E01               	movwf	i2updateServoPosition@time_us,c
 19784  003C5C  0E00               	movlw	0
 19785  003C5E  6E04               	movwf	i2updateServoPosition@timer+1,c
 19786  003C60  0E01               	movlw	1
 19787  003C62  6E03               	movwf	i2updateServoPosition@timer,c
 19788  003C64  EC4B  F028         	call	i2_updateServoPosition	;wreg free
 19789                           
 19790                           ;sort.c: 628: updateServoPosition(1050, 3);
 19791  003C68  0E04               	movlw	4
 19792  003C6A  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19793  003C6C  0E1A               	movlw	26
 19794  003C6E  6E01               	movwf	i2updateServoPosition@time_us,c
 19795  003C70  0E00               	movlw	0
 19796  003C72  6E04               	movwf	i2updateServoPosition@timer+1,c
 19797  003C74  0E03               	movlw	3
 19798  003C76  6E03               	movwf	i2updateServoPosition@timer,c
 19799  003C78  EC4B  F028         	call	i2_updateServoPosition	;wreg free
 19800                           
 19801                           ;sort.c: 629: servo_timer_counter = 0;
 19802  003C7C  0E00               	movlw	0
 19803  003C7E  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19804  003C80  0E00               	movlw	0
 19805  003C82  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19806                           
 19807                           ;sort.c: 630: servo_timer_target = 9999;
 19808  003C84  0E27               	movlw	39
 19809  003C86  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19810  003C88  0E0F               	movlw	15
 19811  003C8A  6E6F               	movwf	_servo_timer_target,c	;volatile
 19812                           
 19813                           ;sort.c: 632: f_can_distributed = 1;
 19814  003C8C  0E00               	movlw	0
 19815  003C8E  0101               	movlb	1	; () banked
 19816  003C90  6F34               	movwf	(_f_can_distributed+1)& (0+255),b
 19817  003C92  0E01               	movlw	1
 19818  003C94  6F33               	movwf	_f_can_distributed& (0+255),b
 19819                           
 19820                           ; BSR set to: 1
 19821                           ;sort.c: 633: if(f_lastCan == 1){
 19822  003C96  0100               	movlb	0	; () banked
 19823  003C98  05EC               	decf	_f_lastCan& (0+255),w,b
 19824  003C9A  0100               	movlb	0	; () banked
 19825  003C9C  11ED               	iorwf	(_f_lastCan+1)& (0+255),w,b
 19826  003C9E  A4D8               	btfss	status,2,c
 19827  003CA0  0012               	return	
 19828                           
 19829                           ; BSR set to: 0
 19830                           ;sort.c: 634: machine_state = DoneSorting_state;
 19831  003CA2  0E02               	movlw	2
 19832  003CA4  0100               	movlb	0	; () banked
 19833  003CA6  6FFC               	movwf	_machine_state& (0+255),b
 19834                           
 19835                           ; BSR set to: 0
 19836                           ;sort.c: 640: }
 19837                           
 19838                           ; BSR set to: 0
 19839                           ;sort.c: 639: break;
 19840                           
 19841                           ;sort.c: 638: default:
 19842                           
 19843                           ; BSR set to: 0
 19844                           ;sort.c: 635: }
 19845                           ;sort.c: 636: break;
 19846  003CA8  0012               	return	
 19847  003CAA                     i2l10158:
 19848  003CAA  C071  F009         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 19849  003CAE  C072  F00A         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 19850                           
 19851                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 19852                           ; Switch size 1, requested type "space"
 19853                           ; Number of cases is 2, Range of values is 4 to 5
 19854                           ; switch strategies available:
 19855                           ; Name         Instructions Cycles
 19856                           ; simple_byte            7     4 (average)
 19857                           ;	Chosen strategy is simple_byte
 19858  003CB2  500A               	movf	??_updateServoStates+1,w,c
 19859  003CB4  0A04               	xorlw	4	; case 4
 19860  003CB6  B4D8               	btfsc	status,2,c
 19861  003CB8  D004               	goto	i2l10812
 19862  003CBA  0A01               	xorlw	1	; case 5
 19863  003CBC  A4D8               	btfss	status,2,c
 19864  003CBE  0012               	return	
 19865  003CC0  D008               	goto	i2l10814
 19866  003CC2                     i2l10812:
 19867                           
 19868                           ; Switch size 1, requested type "space"
 19869                           ; Number of cases is 2, Range of values is 26 to 236
 19870                           ; switch strategies available:
 19871                           ; Name         Instructions Cycles
 19872                           ; simple_byte            7     4 (average)
 19873                           ;	Chosen strategy is simple_byte
 19874  003CC2  5009               	movf	??_updateServoStates,w,c
 19875  003CC4  0A1A               	xorlw	26	; case 26
 19876  003CC6  B4D8               	btfsc	status,2,c
 19877  003CC8  D7C5               	goto	i2l10144
 19878  003CCA  0AF6               	xorlw	246	; case 236
 19879  003CCC  A4D8               	btfss	status,2,c
 19880  003CCE  0012               	return	
 19881  003CD0  D79B               	goto	i2l10132
 19882  003CD2                     i2l10814:
 19883                           
 19884                           ; Switch size 1, requested type "space"
 19885                           ; Number of cases is 1, Range of values is 110 to 110
 19886                           ; switch strategies available:
 19887                           ; Name         Instructions Cycles
 19888                           ; simple_byte            4     3 (average)
 19889                           ;	Chosen strategy is simple_byte
 19890  003CD2  5009               	movf	??_updateServoStates,w,c
 19891  003CD4  0A6E               	xorlw	110	; case 110
 19892  003CD6  A4D8               	btfss	status,2,c
 19893  003CD8  0012               	return	
 19894  003CDA  D7A9               	goto	i2l10138
 19895  003CDC                     __end_of_updateServoStates:
 19896                           	opt stack 0
 19897                           pclatu	equ	0xFFB
 19898                           pclath	equ	0xFFA
 19899                           tblptru	equ	0xFF8
 19900                           tblptrh	equ	0xFF7
 19901                           tblptrl	equ	0xFF6
 19902                           tablat	equ	0xFF5
 19903                           prodh	equ	0xFF4
 19904                           prodl	equ	0xFF3
 19905                           intcon	equ	0xFF2
 19906                           intcon2	equ	0xFF1
 19907                           intcon3	equ	0xFF0
 19908                           indf0	equ	0xFEF
 19909                           postinc0	equ	0xFEE
 19910                           fsr0h	equ	0xFEA
 19911                           fsr0l	equ	0xFE9
 19912                           wreg	equ	0xFE8
 19913                           postdec1	equ	0xFE5
 19914                           fsr1h	equ	0xFE2
 19915                           fsr1l	equ	0xFE1
 19916                           indf2	equ	0xFDF
 19917                           postinc2	equ	0xFDE
 19918                           postdec2	equ	0xFDD
 19919                           fsr2h	equ	0xFDA
 19920                           fsr2l	equ	0xFD9
 19921                           status	equ	0xFD8
 19922                           
 19923 ;; *************** function i2_updateServoPosition *****************
 19924 ;; Defined at:
 19925 ;;		line 560 in file "sort.c"
 19926 ;; Parameters:    Size  Location     Type
 19927 ;;  time_us         2    0[COMRAM] int 
 19928 ;;  timer           2    2[COMRAM] int 
 19929 ;; Auto vars:     Size  Location     Type
 19930 ;;  updateServoP    2    6[COMRAM] unsigned int 
 19931 ;; Return value:  Size  Location     Type
 19932 ;;                  1    wreg      void 
 19933 ;; Registers used:
 19934 ;;		wreg, status,2, status,0
 19935 ;; Tracked objects:
 19936 ;;		On entry : 0/0
 19937 ;;		On exit  : 0/0
 19938 ;;		Unchanged: 0/0
 19939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19940 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19941 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19942 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19943 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19944 ;;Total ram usage:        8 bytes
 19945 ;; Hardware stack levels used:    1
 19946 ;; This function calls:
 19947 ;;		Nothing
 19948 ;; This function is called by:
 19949 ;;		_updateServoStates
 19950 ;; This function uses a non-reentrant model
 19951 ;;
 19952                           
 19953                           	psect	text66
 19954  005096                     __ptext66:
 19955                           	opt stack 0
 19956  005096                     i2_updateServoPosition:
 19957                           	opt stack 22
 19958                           
 19959                           ;sort.c: 561: unsigned int my_time = 65535 - time_us;
 19960                           
 19961                           ;incstack = 0
 19962  005096  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 19963  00509A  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 19964  00509E  1E05               	comf	??i2_updateServoPosition,f,c
 19965  0050A0  1E06               	comf	??i2_updateServoPosition+1,f,c
 19966  0050A2  4A05               	infsnz	??i2_updateServoPosition,f,c
 19967  0050A4  2A06               	incf	??i2_updateServoPosition+1,f,c
 19968  0050A6  0EFF               	movlw	255
 19969  0050A8  2405               	addwf	??i2_updateServoPosition,w,c
 19970  0050AA  6E07               	movwf	i2updateServoPosition@my_time,c
 19971  0050AC  0EFF               	movlw	255
 19972  0050AE  2006               	addwfc	??i2_updateServoPosition+1,w,c
 19973  0050B0  6E08               	movwf	i2updateServoPosition@my_time+1,c
 19974                           
 19975                           ;sort.c: 562: switch(timer){
 19976  0050B2  D015               	goto	i2l9278
 19977  0050B4                     i2l9272:
 19978                           
 19979                           ;sort.c: 564: servoTimes[0] = my_time >> 8;
 19980  0050B4  5008               	movf	i2updateServoPosition@my_time+1,w,c
 19981  0050B6  6E5B               	movwf	_servoTimes,c
 19982  0050B8  6A5C               	clrf	_servoTimes+1,c
 19983                           
 19984                           ;sort.c: 565: servoTimes[1] = my_time & 0xFF;
 19985  0050BA  5007               	movf	i2updateServoPosition@my_time,w,c
 19986  0050BC  6E5D               	movwf	_servoTimes+2,c
 19987  0050BE  6A5E               	clrf	_servoTimes+3,c
 19988                           
 19989                           ;sort.c: 567: pan_servo_state = time_us;
 19990  0050C0  C001  F06B         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 19991  0050C4  C002  F06C         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 19992  0050C8                     i2l931:
 19993                           
 19994                           ;sort.c: 569: servoTimes[2] = my_time >> 8;
 19995  0050C8  5008               	movf	i2updateServoPosition@my_time+1,w,c
 19996  0050CA  6E5F               	movwf	_servoTimes+4,c
 19997  0050CC  6A60               	clrf	_servoTimes+5,c
 19998                           
 19999                           ;sort.c: 570: servoTimes[3] = my_time & 0xFF;
 20000  0050CE  5007               	movf	i2updateServoPosition@my_time,w,c
 20001  0050D0  6E61               	movwf	_servoTimes+6,c
 20002  0050D2  6A62               	clrf	_servoTimes+7,c
 20003                           
 20004                           ;sort.c: 572: tilt_servo_state = time_us;
 20005  0050D4  C001  F071         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 20006  0050D8  C002  F072         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 20007                           
 20008                           ;sort.c: 573: }
 20009  0050DC  0012               	return	
 20010  0050DE                     i2l9278:
 20011  0050DE  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 20012  0050E2  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 20013                           
 20014                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20015                           ; Switch size 1, requested type "space"
 20016                           ; Number of cases is 1, Range of values is 0 to 0
 20017                           ; switch strategies available:
 20018                           ; Name         Instructions Cycles
 20019                           ; simple_byte            4     3 (average)
 20020                           ;	Chosen strategy is simple_byte
 20021  0050E6  5006               	movf	??i2_updateServoPosition+1,w,c
 20022  0050E8  0A00               	xorlw	0	; case 0
 20023  0050EA  A4D8               	btfss	status,2,c
 20024  0050EC  0012               	return	
 20025                           
 20026                           ; Switch size 1, requested type "space"
 20027                           ; Number of cases is 2, Range of values is 1 to 3
 20028                           ; switch strategies available:
 20029                           ; Name         Instructions Cycles
 20030                           ; simple_byte            7     4 (average)
 20031                           ;	Chosen strategy is simple_byte
 20032  0050EE  5005               	movf	??i2_updateServoPosition,w,c
 20033  0050F0  0A01               	xorlw	1	; case 1
 20034  0050F2  B4D8               	btfsc	status,2,c
 20035  0050F4  D7DF               	goto	i2l9272
 20036  0050F6  0A02               	xorlw	2	; case 3
 20037  0050F8  A4D8               	btfss	status,2,c
 20038  0050FA  0012               	return	
 20039  0050FC  D7E5               	goto	i2l931
 20040  0050FE                     __end_ofi2_updateServoPosition:
 20041                           	opt stack 0
 20042                           pclatu	equ	0xFFB
 20043                           pclath	equ	0xFFA
 20044                           tblptru	equ	0xFF8
 20045                           tblptrh	equ	0xFF7
 20046                           tblptrl	equ	0xFF6
 20047                           tablat	equ	0xFF5
 20048                           prodh	equ	0xFF4
 20049                           prodl	equ	0xFF3
 20050                           intcon	equ	0xFF2
 20051                           intcon2	equ	0xFF1
 20052                           intcon3	equ	0xFF0
 20053                           indf0	equ	0xFEF
 20054                           postinc0	equ	0xFEE
 20055                           fsr0h	equ	0xFEA
 20056                           fsr0l	equ	0xFE9
 20057                           wreg	equ	0xFE8
 20058                           postdec1	equ	0xFE5
 20059                           fsr1h	equ	0xFE2
 20060                           fsr1l	equ	0xFE1
 20061                           indf2	equ	0xFDF
 20062                           postinc2	equ	0xFDE
 20063                           postdec2	equ	0xFDD
 20064                           fsr2h	equ	0xFDA
 20065                           fsr2l	equ	0xFD9
 20066                           status	equ	0xFD8
 20067                           
 20068 ;; *************** function _updateMenu *****************
 20069 ;; Defined at:
 20070 ;;		line 216 in file "UI.c"
 20071 ;; Parameters:    Size  Location     Type
 20072 ;;		None
 20073 ;; Auto vars:     Size  Location     Type
 20074 ;;		None
 20075 ;; Return value:  Size  Location     Type
 20076 ;;                  1    wreg      void 
 20077 ;; Registers used:
 20078 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20079 ;; Tracked objects:
 20080 ;;		On entry : 0/0
 20081 ;;		On exit  : 0/0
 20082 ;;		Unchanged: 0/0
 20083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20086 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20087 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20088 ;;Total ram usage:        2 bytes
 20089 ;; Hardware stack levels used:    1
 20090 ;; Hardware stack levels required when called:    5
 20091 ;; This function calls:
 20092 ;;		_change_state_to_logs_11
 20093 ;;		_change_state_to_logs_12
 20094 ;;		_change_state_to_logs_22
 20095 ;;		_change_state_to_logs_23
 20096 ;;		_change_state_to_logs_33
 20097 ;;		_change_state_to_logs_34
 20098 ;;		_change_state_to_menu_11
 20099 ;;		_change_state_to_menu_23
 20100 ;;		_dispLogs
 20101 ;;		_inputHandler
 20102 ;;		i2_change_state_to_menu_12
 20103 ;;		i2_change_state_to_menu_22
 20104 ;;		i2_change_state_to_menu_start
 20105 ;; This function is called by:
 20106 ;;		_handler
 20107 ;; This function uses a non-reentrant model
 20108 ;;
 20109                           
 20110                           	psect	text67
 20111  002F8C                     __ptext67:
 20112                           	opt stack 0
 20113  002F8C                     _updateMenu:
 20114                           	opt stack 18
 20115                           
 20116                           ;UI.c: 217: up = 0; down = 0; enter = 0; back = 0;
 20117                           
 20118                           ;incstack = 0
 20119  002F8C  0E00               	movlw	0
 20120  002F8E  6E76               	movwf	_up+1,c
 20121  002F90  0E00               	movlw	0
 20122  002F92  6E75               	movwf	_up,c
 20123  002F94  0E00               	movlw	0
 20124  002F96  6E66               	movwf	_down+1,c
 20125  002F98  0E00               	movlw	0
 20126  002F9A  6E65               	movwf	_down,c
 20127  002F9C  0E00               	movlw	0
 20128  002F9E  6E68               	movwf	_enter+1,c
 20129  002FA0  0E00               	movlw	0
 20130  002FA2  6E67               	movwf	_enter,c
 20131  002FA4  0E00               	movlw	0
 20132  002FA6  6E64               	movwf	_back+1,c
 20133  002FA8  0E00               	movlw	0
 20134  002FAA  6E63               	movwf	_back,c
 20135                           
 20136                           ;UI.c: 218: (INTCONbits.GIE = 0);
 20137  002FAC  9EF2               	bcf	intcon,7,c	;volatile
 20138                           
 20139                           ;UI.c: 220: if (inputHandler()
 20140                           ;UI.c: 223: ){
 20141  002FAE  EC9F  F01B         	call	_inputHandler	;wreg free
 20142  002FB2  502A               	movf	?_inputHandler,w,c
 20143  002FB4  102B               	iorwf	?_inputHandler+1,w,c
 20144  002FB6  A4D8               	btfss	status,2,c
 20145  002FB8  D112               	goto	i2l9848
 20146  002FBA  D146               	goto	i2l268
 20147  002FBC                     i2l9700:
 20148                           
 20149                           ;UI.c: 227: change_state_to_menu_11();
 20150  002FBC  ECE0  F02B         	call	_change_state_to_menu_11	;wreg free
 20151                           
 20152                           ;UI.c: 228: break;
 20153  002FC0  D143               	goto	i2l268
 20154  002FC2                     i2l9702:
 20155                           
 20156                           ;UI.c: 231: if(up){
 20157  002FC2  5075               	movf	_up,w,c
 20158  002FC4  1076               	iorwf	_up+1,w,c
 20159  002FC6  B4D8               	btfsc	status,2,c
 20160  002FC8  D003               	goto	i2l9706
 20161                           
 20162                           ;UI.c: 232: change_state_to_menu_23();
 20163  002FCA  ECC8  F02B         	call	_change_state_to_menu_23	;wreg free
 20164                           
 20165                           ;UI.c: 233: }
 20166  002FCE  D13C               	goto	i2l268
 20167  002FD0                     i2l9706:
 20168                           
 20169                           ;UI.c: 234: else if(down){
 20170  002FD0  5065               	movf	_down,w,c
 20171  002FD2  1066               	iorwf	_down+1,w,c
 20172  002FD4  B4D8               	btfsc	status,2,c
 20173  002FD6  D003               	goto	i2l9710
 20174                           
 20175                           ;UI.c: 235: change_state_to_menu_12();
 20176  002FD8  ECB0  F02B         	call	i2_change_state_to_menu_12	;wreg free
 20177                           
 20178                           ;UI.c: 236: }
 20179  002FDC  D135               	goto	i2l268
 20180  002FDE                     i2l9710:
 20181                           
 20182                           ;UI.c: 237: else if(enter){
 20183  002FDE  5067               	movf	_enter,w,c
 20184  002FE0  1068               	iorwf	_enter+1,w,c
 20185  002FE2  B4D8               	btfsc	status,2,c
 20186  002FE4  D131               	goto	i2l268
 20187                           
 20188                           ;UI.c: 238: change_state_to_menu_start();
 20189  002FE6  ECF3  F02C         	call	i2_change_state_to_menu_start	;wreg free
 20190                           
 20191                           ;UI.c: 239: }
 20192                           ;UI.c: 240: break;
 20193  002FEA  D12E               	goto	i2l268
 20194  002FEC                     i2l9714:
 20195                           
 20196                           ;UI.c: 243: if(up){
 20197  002FEC  5075               	movf	_up,w,c
 20198  002FEE  1076               	iorwf	_up+1,w,c
 20199  002FF0  B4D8               	btfsc	status,2,c
 20200  002FF2  D003               	goto	i2l9718
 20201                           
 20202                           ;UI.c: 244: change_state_to_menu_11();
 20203  002FF4  ECE0  F02B         	call	_change_state_to_menu_11	;wreg free
 20204                           
 20205                           ;UI.c: 245: }
 20206  002FF8  D127               	goto	i2l268
 20207  002FFA                     i2l9718:
 20208                           
 20209                           ;UI.c: 246: else if(down){
 20210  002FFA  5065               	movf	_down,w,c
 20211  002FFC  1066               	iorwf	_down+1,w,c
 20212  002FFE  B4D8               	btfsc	status,2,c
 20213  003000  D011               	goto	i2l9734
 20214                           
 20215                           ;UI.c: 247: change_state_to_menu_23();
 20216  003002  ECC8  F02B         	call	_change_state_to_menu_23	;wreg free
 20217                           
 20218                           ;UI.c: 248: }
 20219  003006  D120               	goto	i2l268
 20220  003008                     i2l9726:
 20221                           
 20222                           ;UI.c: 255: if(up){
 20223  003008  5075               	movf	_up,w,c
 20224  00300A  1076               	iorwf	_up+1,w,c
 20225  00300C  B4D8               	btfsc	status,2,c
 20226  00300E  D003               	goto	i2l9730
 20227                           
 20228                           ;UI.c: 256: change_state_to_menu_11();
 20229  003010  ECE0  F02B         	call	_change_state_to_menu_11	;wreg free
 20230                           
 20231                           ;UI.c: 257: }
 20232  003014  D119               	goto	i2l268
 20233  003016                     i2l9730:
 20234                           
 20235                           ;UI.c: 258: else if(down){
 20236  003016  5065               	movf	_down,w,c
 20237  003018  1066               	iorwf	_down+1,w,c
 20238  00301A  B4D8               	btfsc	status,2,c
 20239  00301C  D003               	goto	i2l9734
 20240                           
 20241                           ;UI.c: 259: change_state_to_menu_23();
 20242  00301E  ECC8  F02B         	call	_change_state_to_menu_23	;wreg free
 20243                           
 20244                           ;UI.c: 260: }
 20245  003022  D112               	goto	i2l268
 20246  003024                     i2l9734:
 20247                           
 20248                           ;UI.c: 261: else if(enter){
 20249  003024  5067               	movf	_enter,w,c
 20250  003026  1068               	iorwf	_enter+1,w,c
 20251  003028  B4D8               	btfsc	status,2,c
 20252  00302A  D10E               	goto	i2l268
 20253                           
 20254                           ;UI.c: 262: machine_state = Sorting_state;
 20255  00302C  0E01               	movlw	1
 20256  00302E  0100               	movlb	0	; () banked
 20257  003030  6FFC               	movwf	_machine_state& (0+255),b
 20258                           
 20259                           ; BSR set to: 0
 20260                           ;UI.c: 263: }
 20261                           ;UI.c: 264: break;
 20262                           
 20263                           ; BSR set to: 0
 20264                           
 20265                           ; BSR set to: 0
 20266  003032  D10A               	goto	i2l268
 20267  003034                     i2l9738:
 20268                           
 20269                           ;UI.c: 267: if(up){
 20270  003034  5075               	movf	_up,w,c
 20271  003036  1076               	iorwf	_up+1,w,c
 20272  003038  B4D8               	btfsc	status,2,c
 20273  00303A  D003               	goto	i2l9742
 20274                           
 20275                           ;UI.c: 268: change_state_to_menu_22();
 20276  00303C  EC98  F02B         	call	i2_change_state_to_menu_22	;wreg free
 20277                           
 20278                           ;UI.c: 269: }
 20279  003040  D103               	goto	i2l268
 20280  003042                     i2l9742:
 20281                           
 20282                           ;UI.c: 270: else if(down){
 20283  003042  5065               	movf	_down,w,c
 20284  003044  1066               	iorwf	_down+1,w,c
 20285  003046  B4D8               	btfsc	status,2,c
 20286  003048  D003               	goto	i2l9746
 20287                           
 20288                           ;UI.c: 271: change_state_to_menu_11();
 20289  00304A  ECE0  F02B         	call	_change_state_to_menu_11	;wreg free
 20290                           
 20291                           ;UI.c: 272: }
 20292  00304E  D0FC               	goto	i2l268
 20293  003050                     i2l9746:
 20294                           
 20295                           ;UI.c: 273: else if(enter){
 20296  003050  5067               	movf	_enter,w,c
 20297  003052  1068               	iorwf	_enter+1,w,c
 20298  003054  B4D8               	btfsc	status,2,c
 20299  003056  D0F8               	goto	i2l268
 20300                           
 20301                           ;UI.c: 274: change_state_to_logs_11();
 20302  003058  EC58  F02C         	call	_change_state_to_logs_11	;wreg free
 20303                           
 20304                           ;UI.c: 275: }
 20305                           ;UI.c: 276: break;
 20306  00305C  D0F5               	goto	i2l268
 20307  00305E                     i2l9750:
 20308                           
 20309                           ;UI.c: 279: if(up){
 20310  00305E  5075               	movf	_up,w,c
 20311  003060  1076               	iorwf	_up+1,w,c
 20312  003062  B4D8               	btfsc	status,2,c
 20313  003064  D003               	goto	i2l9754
 20314                           
 20315                           ;UI.c: 280: change_state_to_logs_34();
 20316  003066  ECF8  F02B         	call	_change_state_to_logs_34	;wreg free
 20317                           
 20318                           ;UI.c: 281: }
 20319  00306A  D0EE               	goto	i2l268
 20320  00306C                     i2l9754:
 20321                           
 20322                           ;UI.c: 282: else if(down){
 20323  00306C  5065               	movf	_down,w,c
 20324  00306E  1066               	iorwf	_down+1,w,c
 20325  003070  B4D8               	btfsc	status,2,c
 20326  003072  D003               	goto	i2l9758
 20327                           
 20328                           ;UI.c: 283: change_state_to_logs_12();
 20329  003074  EC40  F02C         	call	_change_state_to_logs_12	;wreg free
 20330                           
 20331                           ;UI.c: 284: }
 20332  003078  D0E7               	goto	i2l268
 20333  00307A                     i2l9758:
 20334                           
 20335                           ;UI.c: 285: else if(enter){
 20336  00307A  5067               	movf	_enter,w,c
 20337  00307C  1068               	iorwf	_enter+1,w,c
 20338  00307E  B4D8               	btfsc	status,2,c
 20339  003080  D007               	goto	i2l9762
 20340                           
 20341                           ;UI.c: 286: dispLogs(1);
 20342  003082  0E00               	movlw	0
 20343  003084  6E13               	movwf	dispLogs@myLog+1,c
 20344  003086  0E01               	movlw	1
 20345  003088  6E12               	movwf	dispLogs@myLog,c
 20346  00308A  EC2D  F02D         	call	_dispLogs	;wreg free
 20347                           
 20348                           ;UI.c: 287: }
 20349  00308E  D0DC               	goto	i2l268
 20350  003090                     i2l9762:
 20351                           
 20352                           ;UI.c: 288: else if(back){
 20353  003090  5063               	movf	_back,w,c
 20354  003092  1064               	iorwf	_back+1,w,c
 20355  003094  B4D8               	btfsc	status,2,c
 20356  003096  D0D8               	goto	i2l268
 20357                           
 20358                           ;UI.c: 289: change_state_to_menu_23();
 20359  003098  ECC8  F02B         	call	_change_state_to_menu_23	;wreg free
 20360                           
 20361                           ;UI.c: 290: }
 20362                           ;UI.c: 291: break;
 20363  00309C  D0D5               	goto	i2l268
 20364  00309E                     i2l9766:
 20365                           
 20366                           ;UI.c: 294: if(up){
 20367  00309E  5075               	movf	_up,w,c
 20368  0030A0  1076               	iorwf	_up+1,w,c
 20369  0030A2  B4D8               	btfsc	status,2,c
 20370  0030A4  D003               	goto	i2l9770
 20371                           
 20372                           ;UI.c: 295: change_state_to_logs_11();
 20373  0030A6  EC58  F02C         	call	_change_state_to_logs_11	;wreg free
 20374                           
 20375                           ;UI.c: 296: }
 20376  0030AA  D0CE               	goto	i2l268
 20377  0030AC                     i2l9770:
 20378                           
 20379                           ;UI.c: 297: else if(down){
 20380  0030AC  5065               	movf	_down,w,c
 20381  0030AE  1066               	iorwf	_down+1,w,c
 20382  0030B0  B4D8               	btfsc	status,2,c
 20383  0030B2  D003               	goto	i2l9774
 20384                           
 20385                           ;UI.c: 298: change_state_to_logs_23();
 20386  0030B4  EC87  F02C         	call	_change_state_to_logs_23	;wreg free
 20387                           
 20388                           ;UI.c: 299: }
 20389  0030B8  D0C7               	goto	i2l268
 20390  0030BA                     i2l9774:
 20391                           
 20392                           ;UI.c: 300: else if(enter){
 20393  0030BA  5067               	movf	_enter,w,c
 20394  0030BC  1068               	iorwf	_enter+1,w,c
 20395  0030BE  B4D8               	btfsc	status,2,c
 20396  0030C0  D007               	goto	i2l9778
 20397                           
 20398                           ;UI.c: 301: dispLogs(2);
 20399  0030C2  0E00               	movlw	0
 20400  0030C4  6E13               	movwf	dispLogs@myLog+1,c
 20401  0030C6  0E02               	movlw	2
 20402  0030C8  6E12               	movwf	dispLogs@myLog,c
 20403  0030CA  EC2D  F02D         	call	_dispLogs	;wreg free
 20404                           
 20405                           ;UI.c: 302: }
 20406  0030CE  D0BC               	goto	i2l268
 20407  0030D0                     i2l9778:
 20408                           
 20409                           ;UI.c: 303: else if(back){
 20410  0030D0  5063               	movf	_back,w,c
 20411  0030D2  1064               	iorwf	_back+1,w,c
 20412  0030D4  B4D8               	btfsc	status,2,c
 20413  0030D6  D0B8               	goto	i2l268
 20414                           
 20415                           ;UI.c: 304: change_state_to_menu_23();
 20416  0030D8  ECC8  F02B         	call	_change_state_to_menu_23	;wreg free
 20417                           
 20418                           ;UI.c: 305: }
 20419                           ;UI.c: 306: break;
 20420  0030DC  D0B5               	goto	i2l268
 20421  0030DE                     i2l9782:
 20422                           
 20423                           ;UI.c: 309: if(up){
 20424  0030DE  5075               	movf	_up,w,c
 20425  0030E0  1076               	iorwf	_up+1,w,c
 20426  0030E2  B4D8               	btfsc	status,2,c
 20427  0030E4  D003               	goto	i2l9786
 20428                           
 20429                           ;UI.c: 310: change_state_to_logs_11();
 20430  0030E6  EC58  F02C         	call	_change_state_to_logs_11	;wreg free
 20431                           
 20432                           ;UI.c: 311: }
 20433  0030EA  D0AE               	goto	i2l268
 20434  0030EC                     i2l9786:
 20435                           
 20436                           ;UI.c: 312: else if(down){
 20437  0030EC  5065               	movf	_down,w,c
 20438  0030EE  1066               	iorwf	_down+1,w,c
 20439  0030F0  B4D8               	btfsc	status,2,c
 20440  0030F2  D003               	goto	i2l9790
 20441                           
 20442                           ;UI.c: 313: change_state_to_logs_23();
 20443  0030F4  EC87  F02C         	call	_change_state_to_logs_23	;wreg free
 20444                           
 20445                           ;UI.c: 314: }
 20446  0030F8  D0A7               	goto	i2l268
 20447  0030FA                     i2l9790:
 20448                           
 20449                           ;UI.c: 315: else if(enter){
 20450  0030FA  5067               	movf	_enter,w,c
 20451  0030FC  1068               	iorwf	_enter+1,w,c
 20452  0030FE  B4D8               	btfsc	status,2,c
 20453  003100  D007               	goto	i2l9794
 20454                           
 20455                           ;UI.c: 316: dispLogs(2);
 20456  003102  0E00               	movlw	0
 20457  003104  6E13               	movwf	dispLogs@myLog+1,c
 20458  003106  0E02               	movlw	2
 20459  003108  6E12               	movwf	dispLogs@myLog,c
 20460  00310A  EC2D  F02D         	call	_dispLogs	;wreg free
 20461                           
 20462                           ;UI.c: 317: }
 20463  00310E  D09C               	goto	i2l268
 20464  003110                     i2l9794:
 20465                           
 20466                           ;UI.c: 318: else if(back){
 20467  003110  5063               	movf	_back,w,c
 20468  003112  1064               	iorwf	_back+1,w,c
 20469  003114  B4D8               	btfsc	status,2,c
 20470  003116  D098               	goto	i2l268
 20471                           
 20472                           ;UI.c: 319: change_state_to_menu_23();
 20473  003118  ECC8  F02B         	call	_change_state_to_menu_23	;wreg free
 20474                           
 20475                           ;UI.c: 320: }
 20476                           ;UI.c: 321: break;
 20477  00311C  D095               	goto	i2l268
 20478  00311E                     i2l9798:
 20479                           
 20480                           ;UI.c: 324: if(up){
 20481  00311E  5075               	movf	_up,w,c
 20482  003120  1076               	iorwf	_up+1,w,c
 20483  003122  B4D8               	btfsc	status,2,c
 20484  003124  D003               	goto	i2l9802
 20485                           
 20486                           ;UI.c: 325: change_state_to_logs_22();
 20487  003126  EC28  F02C         	call	_change_state_to_logs_22	;wreg free
 20488                           
 20489                           ;UI.c: 326: }
 20490  00312A  D08E               	goto	i2l268
 20491  00312C                     i2l9802:
 20492                           
 20493                           ;UI.c: 327: else if(down){
 20494  00312C  5065               	movf	_down,w,c
 20495  00312E  1066               	iorwf	_down+1,w,c
 20496  003130  B4D8               	btfsc	status,2,c
 20497  003132  D003               	goto	i2l9806
 20498                           
 20499                           ;UI.c: 328: change_state_to_logs_34();
 20500  003134  ECF8  F02B         	call	_change_state_to_logs_34	;wreg free
 20501                           
 20502                           ;UI.c: 329: }
 20503  003138  D087               	goto	i2l268
 20504  00313A                     i2l9806:
 20505                           
 20506                           ;UI.c: 330: else if(enter){
 20507  00313A  5067               	movf	_enter,w,c
 20508  00313C  1068               	iorwf	_enter+1,w,c
 20509  00313E  B4D8               	btfsc	status,2,c
 20510  003140  D007               	goto	i2l9810
 20511                           
 20512                           ;UI.c: 331: dispLogs(3);
 20513  003142  0E00               	movlw	0
 20514  003144  6E13               	movwf	dispLogs@myLog+1,c
 20515  003146  0E03               	movlw	3
 20516  003148  6E12               	movwf	dispLogs@myLog,c
 20517  00314A  EC2D  F02D         	call	_dispLogs	;wreg free
 20518                           
 20519                           ;UI.c: 332: }
 20520  00314E  D07C               	goto	i2l268
 20521  003150                     i2l9810:
 20522                           
 20523                           ;UI.c: 333: else if(back){
 20524  003150  5063               	movf	_back,w,c
 20525  003152  1064               	iorwf	_back+1,w,c
 20526  003154  B4D8               	btfsc	status,2,c
 20527  003156  D078               	goto	i2l268
 20528                           
 20529                           ;UI.c: 334: change_state_to_menu_23();
 20530  003158  ECC8  F02B         	call	_change_state_to_menu_23	;wreg free
 20531                           
 20532                           ;UI.c: 335: }
 20533                           ;UI.c: 336: break;
 20534  00315C  D075               	goto	i2l268
 20535  00315E                     i2l9814:
 20536                           
 20537                           ;UI.c: 339: if(up){
 20538  00315E  5075               	movf	_up,w,c
 20539  003160  1076               	iorwf	_up+1,w,c
 20540  003162  B4D8               	btfsc	status,2,c
 20541  003164  D003               	goto	i2l9818
 20542                           
 20543                           ;UI.c: 340: change_state_to_logs_22();
 20544  003166  EC28  F02C         	call	_change_state_to_logs_22	;wreg free
 20545                           
 20546                           ;UI.c: 341: }
 20547  00316A  D06E               	goto	i2l268
 20548  00316C                     i2l9818:
 20549                           
 20550                           ;UI.c: 342: else if(down){
 20551  00316C  5065               	movf	_down,w,c
 20552  00316E  1066               	iorwf	_down+1,w,c
 20553  003170  B4D8               	btfsc	status,2,c
 20554  003172  D003               	goto	i2l9822
 20555                           
 20556                           ;UI.c: 343: change_state_to_logs_34();
 20557  003174  ECF8  F02B         	call	_change_state_to_logs_34	;wreg free
 20558                           
 20559                           ;UI.c: 344: }
 20560  003178  D067               	goto	i2l268
 20561  00317A                     i2l9822:
 20562                           
 20563                           ;UI.c: 345: else if(enter){
 20564  00317A  5067               	movf	_enter,w,c
 20565  00317C  1068               	iorwf	_enter+1,w,c
 20566  00317E  B4D8               	btfsc	status,2,c
 20567  003180  D007               	goto	i2l9826
 20568                           
 20569                           ;UI.c: 346: dispLogs(3);
 20570  003182  0E00               	movlw	0
 20571  003184  6E13               	movwf	dispLogs@myLog+1,c
 20572  003186  0E03               	movlw	3
 20573  003188  6E12               	movwf	dispLogs@myLog,c
 20574  00318A  EC2D  F02D         	call	_dispLogs	;wreg free
 20575                           
 20576                           ;UI.c: 347: }
 20577  00318E  D05C               	goto	i2l268
 20578  003190                     i2l9826:
 20579                           
 20580                           ;UI.c: 348: else if(back){
 20581  003190  5063               	movf	_back,w,c
 20582  003192  1064               	iorwf	_back+1,w,c
 20583  003194  B4D8               	btfsc	status,2,c
 20584  003196  D058               	goto	i2l268
 20585                           
 20586                           ;UI.c: 349: change_state_to_menu_23();
 20587  003198  ECC8  F02B         	call	_change_state_to_menu_23	;wreg free
 20588                           
 20589                           ;UI.c: 350: }
 20590                           ;UI.c: 351: break;
 20591  00319C  D055               	goto	i2l268
 20592  00319E                     i2l9830:
 20593                           
 20594                           ;UI.c: 354: if(up){
 20595  00319E  5075               	movf	_up,w,c
 20596  0031A0  1076               	iorwf	_up+1,w,c
 20597  0031A2  B4D8               	btfsc	status,2,c
 20598  0031A4  D003               	goto	i2l9834
 20599                           
 20600                           ;UI.c: 355: change_state_to_logs_33();
 20601  0031A6  EC10  F02C         	call	_change_state_to_logs_33	;wreg free
 20602                           
 20603                           ;UI.c: 356: }
 20604  0031AA  D04E               	goto	i2l268
 20605  0031AC                     i2l9834:
 20606                           
 20607                           ;UI.c: 357: else if(down){
 20608  0031AC  5065               	movf	_down,w,c
 20609  0031AE  1066               	iorwf	_down+1,w,c
 20610  0031B0  B4D8               	btfsc	status,2,c
 20611  0031B2  D003               	goto	i2l9838
 20612                           
 20613                           ;UI.c: 358: change_state_to_logs_11();
 20614  0031B4  EC58  F02C         	call	_change_state_to_logs_11	;wreg free
 20615                           
 20616                           ;UI.c: 359: }
 20617  0031B8  D047               	goto	i2l268
 20618  0031BA                     i2l9838:
 20619                           
 20620                           ;UI.c: 360: else if(enter){
 20621  0031BA  5067               	movf	_enter,w,c
 20622  0031BC  1068               	iorwf	_enter+1,w,c
 20623  0031BE  B4D8               	btfsc	status,2,c
 20624  0031C0  D007               	goto	i2l9842
 20625                           
 20626                           ;UI.c: 361: dispLogs(4);
 20627  0031C2  0E00               	movlw	0
 20628  0031C4  6E13               	movwf	dispLogs@myLog+1,c
 20629  0031C6  0E04               	movlw	4
 20630  0031C8  6E12               	movwf	dispLogs@myLog,c
 20631  0031CA  EC2D  F02D         	call	_dispLogs	;wreg free
 20632                           
 20633                           ;UI.c: 362: }
 20634  0031CE  D03C               	goto	i2l268
 20635  0031D0                     i2l9842:
 20636                           
 20637                           ;UI.c: 363: else if(back){
 20638  0031D0  5063               	movf	_back,w,c
 20639  0031D2  1064               	iorwf	_back+1,w,c
 20640  0031D4  B4D8               	btfsc	status,2,c
 20641  0031D6  D038               	goto	i2l268
 20642                           
 20643                           ;UI.c: 364: change_state_to_menu_23();
 20644  0031D8  ECC8  F02B         	call	_change_state_to_menu_23	;wreg free
 20645                           
 20646                           ;UI.c: 370: }
 20647                           
 20648                           ;UI.c: 369: break;
 20649                           
 20650                           ;UI.c: 368: default:
 20651                           
 20652                           ;UI.c: 365: }
 20653                           ;UI.c: 366: break;
 20654  0031DC  D035               	goto	i2l268
 20655  0031DE                     i2l9848:
 20656  0031DE  C0E6  F043         	movff	_cur_state,??_updateMenu
 20657  0031E2  C0E7  F044         	movff	_cur_state+1,??_updateMenu+1
 20658                           
 20659                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 20660                           ; Switch size 1, requested type "space"
 20661                           ; Number of cases is 3, Range of values is 0 to 4
 20662                           ; switch strategies available:
 20663                           ; Name         Instructions Cycles
 20664                           ; simple_byte           10     6 (average)
 20665                           ;	Chosen strategy is simple_byte
 20666  0031E6  5044               	movf	??_updateMenu+1,w,c
 20667  0031E8  0A00               	xorlw	0	; case 0
 20668  0031EA  B4D8               	btfsc	status,2,c
 20669  0031EC  D007               	goto	i2l10818
 20670  0031EE  0A03               	xorlw	3	; case 3
 20671  0031F0  B4D8               	btfsc	status,2,c
 20672  0031F2  D015               	goto	i2l10820
 20673  0031F4  0A07               	xorlw	7	; case 4
 20674  0031F6  B4D8               	btfsc	status,2,c
 20675  0031F8  D020               	goto	i2l10822
 20676  0031FA  D026               	goto	i2l268
 20677  0031FC                     i2l10818:
 20678                           
 20679                           ; Switch size 1, requested type "space"
 20680                           ; Number of cases is 5, Range of values is 0 to 23
 20681                           ; switch strategies available:
 20682                           ; Name         Instructions Cycles
 20683                           ; simple_byte           16     9 (average)
 20684                           ;	Chosen strategy is simple_byte
 20685  0031FC  5043               	movf	??_updateMenu,w,c
 20686  0031FE  0A00               	xorlw	0	; case 0
 20687  003200  B4D8               	btfsc	status,2,c
 20688  003202  D6DC               	goto	i2l9700
 20689  003204  0A0B               	xorlw	11	; case 11
 20690  003206  B4D8               	btfsc	status,2,c
 20691  003208  D6DC               	goto	i2l9702
 20692  00320A  0A07               	xorlw	7	; case 12
 20693  00320C  B4D8               	btfsc	status,2,c
 20694  00320E  D6EE               	goto	i2l9714
 20695  003210  0A1A               	xorlw	26	; case 22
 20696  003212  B4D8               	btfsc	status,2,c
 20697  003214  D6F9               	goto	i2l9726
 20698  003216  0A01               	xorlw	1	; case 23
 20699  003218  B4D8               	btfsc	status,2,c
 20700  00321A  D70C               	goto	i2l9738
 20701  00321C  D015               	goto	i2l268
 20702  00321E                     i2l10820:
 20703                           
 20704                           ; Switch size 1, requested type "space"
 20705                           ; Number of cases is 4, Range of values is 243 to 255
 20706                           ; switch strategies available:
 20707                           ; Name         Instructions Cycles
 20708                           ; simple_byte           13     7 (average)
 20709                           ;	Chosen strategy is simple_byte
 20710  00321E  5043               	movf	??_updateMenu,w,c
 20711  003220  0AF3               	xorlw	243	; case 243
 20712  003222  B4D8               	btfsc	status,2,c
 20713  003224  D71C               	goto	i2l9750
 20714  003226  0A07               	xorlw	7	; case 244
 20715  003228  B4D8               	btfsc	status,2,c
 20716  00322A  D739               	goto	i2l9766
 20717  00322C  0A0A               	xorlw	10	; case 254
 20718  00322E  B4D8               	btfsc	status,2,c
 20719  003230  D756               	goto	i2l9782
 20720  003232  0A01               	xorlw	1	; case 255
 20721  003234  B4D8               	btfsc	status,2,c
 20722  003236  D773               	goto	i2l9798
 20723  003238  D007               	goto	i2l268
 20724  00323A                     i2l10822:
 20725                           
 20726                           ; Switch size 1, requested type "space"
 20727                           ; Number of cases is 2, Range of values is 9 to 10
 20728                           ; switch strategies available:
 20729                           ; Name         Instructions Cycles
 20730                           ; simple_byte            7     4 (average)
 20731                           ;	Chosen strategy is simple_byte
 20732  00323A  5043               	movf	??_updateMenu,w,c
 20733  00323C  0A09               	xorlw	9	; case 9
 20734  00323E  B4D8               	btfsc	status,2,c
 20735  003240  D78E               	goto	i2l9814
 20736  003242  0A03               	xorlw	3	; case 10
 20737  003244  B4D8               	btfsc	status,2,c
 20738  003246  D7AB               	goto	i2l9830
 20739  003248                     i2l268:
 20740                           
 20741                           ;UI.c: 371: }
 20742                           ;UI.c: 372: (INTCONbits.GIE = 1);
 20743  003248  8EF2               	bsf	intcon,7,c	;volatile
 20744  00324A  0012               	return		;funcret
 20745  00324C                     __end_of_updateMenu:
 20746                           	opt stack 0
 20747                           pclatu	equ	0xFFB
 20748                           pclath	equ	0xFFA
 20749                           tblptru	equ	0xFF8
 20750                           tblptrh	equ	0xFF7
 20751                           tblptrl	equ	0xFF6
 20752                           tablat	equ	0xFF5
 20753                           prodh	equ	0xFF4
 20754                           prodl	equ	0xFF3
 20755                           intcon	equ	0xFF2
 20756                           intcon2	equ	0xFF1
 20757                           intcon3	equ	0xFF0
 20758                           indf0	equ	0xFEF
 20759                           postinc0	equ	0xFEE
 20760                           fsr0h	equ	0xFEA
 20761                           fsr0l	equ	0xFE9
 20762                           wreg	equ	0xFE8
 20763                           postdec1	equ	0xFE5
 20764                           fsr1h	equ	0xFE2
 20765                           fsr1l	equ	0xFE1
 20766                           indf2	equ	0xFDF
 20767                           postinc2	equ	0xFDE
 20768                           postdec2	equ	0xFDD
 20769                           fsr2h	equ	0xFDA
 20770                           fsr2l	equ	0xFD9
 20771                           status	equ	0xFD8
 20772                           
 20773 ;; *************** function i2_change_state_to_menu_start *****************
 20774 ;; Defined at:
 20775 ;;		line 477 in file "UI.c"
 20776 ;; Parameters:    Size  Location     Type
 20777 ;;		None
 20778 ;; Auto vars:     Size  Location     Type
 20779 ;;		None
 20780 ;; Return value:  Size  Location     Type
 20781 ;;                  1    wreg      void 
 20782 ;; Registers used:
 20783 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20784 ;; Tracked objects:
 20785 ;;		On entry : 0/0
 20786 ;;		On exit  : 0/0
 20787 ;;		Unchanged: 0/0
 20788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20793 ;;Total ram usage:        0 bytes
 20794 ;; Hardware stack levels used:    1
 20795 ;; Hardware stack levels required when called:    4
 20796 ;; This function calls:
 20797 ;;		i2_lcdInst
 20798 ;;		i2_printRTC
 20799 ;;		i2_printf
 20800 ;; This function is called by:
 20801 ;;		_updateMenu
 20802 ;;		_handler
 20803 ;; This function uses a non-reentrant model
 20804 ;;
 20805                           
 20806                           	psect	text68
 20807  0059E6                     __ptext68:
 20808                           	opt stack 0
 20809  0059E6                     i2_change_state_to_menu_start:
 20810                           	opt stack 19
 20811                           
 20812                           ;UI.c: 478: cur_state = 0;
 20813                           
 20814                           ;incstack = 0
 20815  0059E6  0E00               	movlw	0
 20816  0059E8  0100               	movlb	0	; () banked
 20817  0059EA  6FE7               	movwf	(_cur_state+1)& (0+255),b
 20818  0059EC  0E00               	movlw	0
 20819  0059EE  6FE6               	movwf	_cur_state& (0+255),b
 20820                           
 20821                           ; BSR set to: 0
 20822                           ;UI.c: 480: lcdInst(0b10000000);;
 20823  0059F0  0E80               	movlw	128
 20824  0059F2  ECD7  F02D         	call	i2_lcdInst
 20825                           
 20826                           ;UI.c: 481: printRTC();
 20827  0059F6  EC84  F01A         	call	i2_printRTC	;wreg free
 20828                           
 20829                           ;UI.c: 482: lcdInst(0b11000000);;
 20830  0059FA  0EC0               	movlw	192
 20831  0059FC  ECD7  F02D         	call	i2_lcdInst
 20832                           
 20833                           ;UI.c: 483: printf("PUSH TO CONTINUE");
 20834  005A00  0EEA               	movlw	low STR_30
 20835  005A02  6E0D               	movwf	i2printf@f,c
 20836  005A04  0EFD               	movlw	high STR_30
 20837  005A06  6E0E               	movwf	i2printf@f+1,c
 20838  005A08  ECA0  F011         	call	i2_printf	;wreg free
 20839  005A0C  0012               	return		;funcret
 20840  005A0E                     __end_ofi2_change_state_to_menu_start:
 20841                           	opt stack 0
 20842                           pclatu	equ	0xFFB
 20843                           pclath	equ	0xFFA
 20844                           tblptru	equ	0xFF8
 20845                           tblptrh	equ	0xFF7
 20846                           tblptrl	equ	0xFF6
 20847                           tablat	equ	0xFF5
 20848                           prodh	equ	0xFF4
 20849                           prodl	equ	0xFF3
 20850                           intcon	equ	0xFF2
 20851                           intcon2	equ	0xFF1
 20852                           intcon3	equ	0xFF0
 20853                           indf0	equ	0xFEF
 20854                           postinc0	equ	0xFEE
 20855                           fsr0h	equ	0xFEA
 20856                           fsr0l	equ	0xFE9
 20857                           wreg	equ	0xFE8
 20858                           postdec1	equ	0xFE5
 20859                           fsr1h	equ	0xFE2
 20860                           fsr1l	equ	0xFE1
 20861                           indf2	equ	0xFDF
 20862                           postinc2	equ	0xFDE
 20863                           postdec2	equ	0xFDD
 20864                           fsr2h	equ	0xFDA
 20865                           fsr2l	equ	0xFD9
 20866                           status	equ	0xFD8
 20867                           
 20868 ;; *************** function i2_printRTC *****************
 20869 ;; Defined at:
 20870 ;;		line 63 in file "RTC.c"
 20871 ;; Parameters:    Size  Location     Type
 20872 ;;		None
 20873 ;; Auto vars:     Size  Location     Type
 20874 ;;  printRTC       14   44[COMRAM] int [7]
 20875 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 20876 ;;  printRTC        2   64[COMRAM] int 
 20877 ;;  printRTC        2   58[COMRAM] int 
 20878 ;; Return value:  Size  Location     Type
 20879 ;;                  1    wreg      void 
 20880 ;; Registers used:
 20881 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20882 ;; Tracked objects:
 20883 ;;		On entry : 0/0
 20884 ;;		On exit  : 0/0
 20885 ;;		Unchanged: 0/0
 20886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20888 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20889 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20890 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20891 ;;Total ram usage:       25 bytes
 20892 ;; Hardware stack levels used:    1
 20893 ;; Hardware stack levels required when called:    3
 20894 ;; This function calls:
 20895 ;;		i2_getRTC
 20896 ;;		i2_lcdInst
 20897 ;;		i2_printf
 20898 ;;		i2_strcpy
 20899 ;; This function is called by:
 20900 ;;		i2_change_state_to_menu_start
 20901 ;; This function uses a non-reentrant model
 20902 ;;
 20903                           
 20904                           	psect	text69
 20905  003508                     __ptext69:
 20906                           	opt stack 0
 20907  003508                     i2_printRTC:
 20908                           	opt stack 19
 20909                           
 20910                           ;RTC.c: 64: getRTC();
 20911                           
 20912                           ;incstack = 0
 20913  003508  ECA4  F027         	call	i2_getRTC	;wreg free
 20914                           
 20915                           ;RTC.c: 65: char month[] = "MMM";
 20916  00350C  C14D  F03D         	movff	printRTC@F3236,i2printRTC@month
 20917  003510  C14E  F03E         	movff	printRTC@F3236+1,i2printRTC@month+1
 20918  003514  C14F  F03F         	movff	printRTC@F3236+2,i2printRTC@month+2
 20919  003518  C150  F040         	movff	printRTC@F3236+3,i2printRTC@month+3
 20920                           
 20921                           ;RTC.c: 66: int INT_time[7];
 20922                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 20923  00351C  0E00               	movlw	0
 20924  00351E  6E42               	movwf	i2printRTC@i+1,c
 20925  003520  0E00               	movlw	0
 20926  003522  6E41               	movwf	i2printRTC@i,c
 20927  003524  BE42               	btfsc	i2printRTC@i+1,7,c
 20928  003526  D006               	goto	i2l7606
 20929  003528  5042               	movf	i2printRTC@i+1,w,c
 20930  00352A  E135               	bnz	i2l627
 20931  00352C  0E07               	movlw	7
 20932  00352E  5C41               	subwf	i2printRTC@i,w,c
 20933  003530  B0D8               	btfsc	status,0,c
 20934  003532  D031               	goto	i2l627
 20935  003534                     i2l7606:
 20936                           
 20937                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 20938  003534  0E1C               	movlw	low _time
 20939  003536  2441               	addwf	i2printRTC@i,w,c
 20940  003538  6ED9               	movwf	fsr2l,c
 20941  00353A  0E01               	movlw	high _time
 20942  00353C  2042               	addwfc	i2printRTC@i+1,w,c
 20943  00353E  6EDA               	movwf	fsr2h,c
 20944  003540  50DF               	movf	indf2,w,c
 20945  003542  6E2A               	movwf	??i2_printRTC& (0+255),c
 20946  003544  3A2A               	swapf	??i2_printRTC,f,c
 20947  003546  0E0F               	movlw	15
 20948  003548  162A               	andwf	??i2_printRTC,f,c
 20949  00354A  0E0F               	movlw	15
 20950  00354C  162A               	andwf	??i2_printRTC,f,c
 20951  00354E  502A               	movf	??i2_printRTC,w,c
 20952  003550  0D0A               	mullw	10
 20953  003552  0E1C               	movlw	low _time
 20954  003554  2441               	addwf	i2printRTC@i,w,c
 20955  003556  6ED9               	movwf	fsr2l,c
 20956  003558  0E01               	movlw	high _time
 20957  00355A  2042               	addwfc	i2printRTC@i+1,w,c
 20958  00355C  6EDA               	movwf	fsr2h,c
 20959  00355E  50DF               	movf	indf2,w,c
 20960  003560  0B0F               	andlw	15
 20961  003562  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 20962  003564  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 20963  003566  50F3               	movf	prodl,w,c
 20964  003568  262B               	addwf	??i2_printRTC+1,f,c
 20965  00356A  50F4               	movf	prodh,w,c
 20966  00356C  222C               	addwfc	??i2_printRTC+2,f,c
 20967  00356E  90D8               	bcf	status,0,c
 20968  003570  3441               	rlcf	i2printRTC@i,w,c
 20969  003572  6ED9               	movwf	fsr2l,c
 20970  003574  3442               	rlcf	i2printRTC@i+1,w,c
 20971  003576  6EDA               	movwf	fsr2h,c
 20972  003578  0E2D               	movlw	low i2printRTC@INT_time
 20973  00357A  26D9               	addwf	fsr2l,f,c
 20974  00357C  0E00               	movlw	high i2printRTC@INT_time
 20975  00357E  22DA               	addwfc	fsr2h,f,c
 20976  003580  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 20977  003584  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 20978  003588  4A41               	infsnz	i2printRTC@i,f,c
 20979  00358A  2A42               	incf	i2printRTC@i+1,f,c
 20980  00358C  BE42               	btfsc	i2printRTC@i+1,7,c
 20981  00358E  D7D2               	goto	i2l7606
 20982  003590  5042               	movf	i2printRTC@i+1,w,c
 20983  003592  E101               	bnz	i2u630_40
 20984  003594  D7CB               	goto	L16
 20985  003596                     i2u630_40:
 20986  003596                     i2l627:
 20987                           
 20988                           ;RTC.c: 69: }
 20989                           ;RTC.c: 70: int RTC_month = INT_time[5];
 20990  003596  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 20991  00359A  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 20992                           
 20993                           ;RTC.c: 72: switch(RTC_month){
 20994  00359E  D084               	goto	i2l7638
 20995  0035A0                     i2l7612:
 20996                           
 20997                           ;RTC.c: 74: strcpy(month, "JAN");
 20998  0035A0  0E3D               	movlw	low i2printRTC@month
 20999  0035A2  6E01               	movwf	i2strcpy@to,c
 21000  0035A4  0E00               	movlw	high i2printRTC@month
 21001  0035A6  6E02               	movwf	i2strcpy@to+1,c
 21002  0035A8  0EDA               	movlw	low STR_8
 21003  0035AA  6E03               	movwf	i2strcpy@from,c
 21004  0035AC  0EFF               	movlw	high STR_8
 21005  0035AE  6E04               	movwf	i2strcpy@from+1,c
 21006  0035B0  EC67  F02B         	call	i2_strcpy	;wreg free
 21007                           
 21008                           ;RTC.c: 75: break;
 21009  0035B4  D0A6               	goto	i2l7640
 21010  0035B6                     i2l7614:
 21011                           
 21012                           ;RTC.c: 77: strcpy(month, "FEB");
 21013  0035B6  0E3D               	movlw	low i2printRTC@month
 21014  0035B8  6E01               	movwf	i2strcpy@to,c
 21015  0035BA  0E00               	movlw	high i2printRTC@month
 21016  0035BC  6E02               	movwf	i2strcpy@to+1,c
 21017  0035BE  0ECA               	movlw	low STR_9
 21018  0035C0  6E03               	movwf	i2strcpy@from,c
 21019  0035C2  0EFF               	movlw	high STR_9
 21020  0035C4  6E04               	movwf	i2strcpy@from+1,c
 21021  0035C6  EC67  F02B         	call	i2_strcpy	;wreg free
 21022                           
 21023                           ;RTC.c: 78: break;
 21024  0035CA  D09B               	goto	i2l7640
 21025  0035CC                     i2l7616:
 21026                           
 21027                           ;RTC.c: 80: strcpy(month, "MAR");
 21028  0035CC  0E3D               	movlw	low i2printRTC@month
 21029  0035CE  6E01               	movwf	i2strcpy@to,c
 21030  0035D0  0E00               	movlw	high i2printRTC@month
 21031  0035D2  6E02               	movwf	i2strcpy@to+1,c
 21032  0035D4  0EE6               	movlw	low STR_10
 21033  0035D6  6E03               	movwf	i2strcpy@from,c
 21034  0035D8  0EFF               	movlw	high STR_10
 21035  0035DA  6E04               	movwf	i2strcpy@from+1,c
 21036  0035DC  EC67  F02B         	call	i2_strcpy	;wreg free
 21037                           
 21038                           ;RTC.c: 81: break;
 21039  0035E0  D090               	goto	i2l7640
 21040  0035E2                     i2l7618:
 21041                           
 21042                           ;RTC.c: 83: strcpy(month, "APR");
 21043  0035E2  0E3D               	movlw	low i2printRTC@month
 21044  0035E4  6E01               	movwf	i2strcpy@to,c
 21045  0035E6  0E00               	movlw	high i2printRTC@month
 21046  0035E8  6E02               	movwf	i2strcpy@to+1,c
 21047  0035EA  0EEA               	movlw	low STR_11
 21048  0035EC  6E03               	movwf	i2strcpy@from,c
 21049  0035EE  0EFF               	movlw	high STR_11
 21050  0035F0  6E04               	movwf	i2strcpy@from+1,c
 21051  0035F2  EC67  F02B         	call	i2_strcpy	;wreg free
 21052                           
 21053                           ;RTC.c: 84: break;
 21054  0035F6  D085               	goto	i2l7640
 21055  0035F8                     i2l7620:
 21056                           
 21057                           ;RTC.c: 86: strcpy(month, "MAY");
 21058  0035F8  0E3D               	movlw	low i2printRTC@month
 21059  0035FA  6E01               	movwf	i2strcpy@to,c
 21060  0035FC  0E00               	movlw	high i2printRTC@month
 21061  0035FE  6E02               	movwf	i2strcpy@to+1,c
 21062  003600  0EFA               	movlw	low STR_12
 21063  003602  6E03               	movwf	i2strcpy@from,c
 21064  003604  0EFF               	movlw	high STR_12
 21065  003606  6E04               	movwf	i2strcpy@from+1,c
 21066  003608  EC67  F02B         	call	i2_strcpy	;wreg free
 21067                           
 21068                           ;RTC.c: 87: break;
 21069  00360C  D07A               	goto	i2l7640
 21070  00360E                     i2l7622:
 21071                           
 21072                           ;RTC.c: 89: strcpy(month, "JUN");
 21073  00360E  0E3D               	movlw	low i2printRTC@month
 21074  003610  6E01               	movwf	i2strcpy@to,c
 21075  003612  0E00               	movlw	high i2printRTC@month
 21076  003614  6E02               	movwf	i2strcpy@to+1,c
 21077  003616  0EDE               	movlw	low STR_13
 21078  003618  6E03               	movwf	i2strcpy@from,c
 21079  00361A  0EFF               	movlw	high STR_13
 21080  00361C  6E04               	movwf	i2strcpy@from+1,c
 21081  00361E  EC67  F02B         	call	i2_strcpy	;wreg free
 21082                           
 21083                           ;RTC.c: 90: break;
 21084  003622  D06F               	goto	i2l7640
 21085  003624                     i2l7624:
 21086                           
 21087                           ;RTC.c: 92: strcpy(month, "JUL");
 21088  003624  0E3D               	movlw	low i2printRTC@month
 21089  003626  6E01               	movwf	i2strcpy@to,c
 21090  003628  0E00               	movlw	high i2printRTC@month
 21091  00362A  6E02               	movwf	i2strcpy@to+1,c
 21092  00362C  0ED6               	movlw	low STR_14
 21093  00362E  6E03               	movwf	i2strcpy@from,c
 21094  003630  0EFF               	movlw	high STR_14
 21095  003632  6E04               	movwf	i2strcpy@from+1,c
 21096  003634  EC67  F02B         	call	i2_strcpy	;wreg free
 21097                           
 21098                           ;RTC.c: 93: break;
 21099  003638  D064               	goto	i2l7640
 21100  00363A                     i2l7626:
 21101                           
 21102                           ;RTC.c: 95: strcpy(month, "AUG");
 21103  00363A  0E3D               	movlw	low i2printRTC@month
 21104  00363C  6E01               	movwf	i2strcpy@to,c
 21105  00363E  0E00               	movlw	high i2printRTC@month
 21106  003640  6E02               	movwf	i2strcpy@to+1,c
 21107  003642  0ED2               	movlw	low STR_15
 21108  003644  6E03               	movwf	i2strcpy@from,c
 21109  003646  0EFF               	movlw	high STR_15
 21110  003648  6E04               	movwf	i2strcpy@from+1,c
 21111  00364A  EC67  F02B         	call	i2_strcpy	;wreg free
 21112                           
 21113                           ;RTC.c: 96: break;
 21114  00364E  D059               	goto	i2l7640
 21115  003650                     i2l7628:
 21116                           
 21117                           ;RTC.c: 98: strcpy(month, "SEP");
 21118  003650  0E3D               	movlw	low i2printRTC@month
 21119  003652  6E01               	movwf	i2strcpy@to,c
 21120  003654  0E00               	movlw	high i2printRTC@month
 21121  003656  6E02               	movwf	i2strcpy@to+1,c
 21122  003658  0EE2               	movlw	low STR_16
 21123  00365A  6E03               	movwf	i2strcpy@from,c
 21124  00365C  0EFF               	movlw	high STR_16
 21125  00365E  6E04               	movwf	i2strcpy@from+1,c
 21126  003660  EC67  F02B         	call	i2_strcpy	;wreg free
 21127                           
 21128                           ;RTC.c: 99: break;
 21129  003664  D04E               	goto	i2l7640
 21130  003666                     i2l7630:
 21131                           
 21132                           ;RTC.c: 101: strcpy(month, "OCT");
 21133  003666  0E3D               	movlw	low i2printRTC@month
 21134  003668  6E01               	movwf	i2strcpy@to,c
 21135  00366A  0E00               	movlw	high i2printRTC@month
 21136  00366C  6E02               	movwf	i2strcpy@to+1,c
 21137  00366E  0EF2               	movlw	low STR_17
 21138  003670  6E03               	movwf	i2strcpy@from,c
 21139  003672  0EFF               	movlw	high STR_17
 21140  003674  6E04               	movwf	i2strcpy@from+1,c
 21141  003676  EC67  F02B         	call	i2_strcpy	;wreg free
 21142                           
 21143                           ;RTC.c: 102: break;
 21144  00367A  D043               	goto	i2l7640
 21145  00367C                     i2l7632:
 21146                           
 21147                           ;RTC.c: 104: strcpy(month, "NOV");
 21148  00367C  0E3D               	movlw	low i2printRTC@month
 21149  00367E  6E01               	movwf	i2strcpy@to,c
 21150  003680  0E00               	movlw	high i2printRTC@month
 21151  003682  6E02               	movwf	i2strcpy@to+1,c
 21152  003684  0EF6               	movlw	low STR_18
 21153  003686  6E03               	movwf	i2strcpy@from,c
 21154  003688  0EFF               	movlw	high STR_18
 21155  00368A  6E04               	movwf	i2strcpy@from+1,c
 21156  00368C  EC67  F02B         	call	i2_strcpy	;wreg free
 21157                           
 21158                           ;RTC.c: 105: break;
 21159  003690  D038               	goto	i2l7640
 21160  003692                     i2l7634:
 21161                           
 21162                           ;RTC.c: 107: strcpy(month, "DEC");
 21163  003692  0E3D               	movlw	low i2printRTC@month
 21164  003694  6E01               	movwf	i2strcpy@to,c
 21165  003696  0E00               	movlw	high i2printRTC@month
 21166  003698  6E02               	movwf	i2strcpy@to+1,c
 21167  00369A  0ECE               	movlw	low STR_19
 21168  00369C  6E03               	movwf	i2strcpy@from,c
 21169  00369E  0EFF               	movlw	high STR_19
 21170  0036A0  6E04               	movwf	i2strcpy@from+1,c
 21171  0036A2  EC67  F02B         	call	i2_strcpy	;wreg free
 21172                           
 21173                           ;RTC.c: 109: }
 21174                           
 21175                           ;RTC.c: 108: break;
 21176  0036A6  D02D               	goto	i2l7640
 21177  0036A8                     i2l7638:
 21178  0036A8  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 21179  0036AC  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 21180                           
 21181                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21182                           ; Switch size 1, requested type "space"
 21183                           ; Number of cases is 1, Range of values is 0 to 0
 21184                           ; switch strategies available:
 21185                           ; Name         Instructions Cycles
 21186                           ; simple_byte            4     3 (average)
 21187                           ;	Chosen strategy is simple_byte
 21188  0036B0  502B               	movf	??i2_printRTC+1,w,c
 21189  0036B2  0A00               	xorlw	0	; case 0
 21190  0036B4  A4D8               	btfss	status,2,c
 21191  0036B6  D025               	goto	i2l7640
 21192                           
 21193                           ; Switch size 1, requested type "space"
 21194                           ; Number of cases is 12, Range of values is 1 to 12
 21195                           ; switch strategies available:
 21196                           ; Name         Instructions Cycles
 21197                           ; simple_byte           37    19 (average)
 21198                           ;	Chosen strategy is simple_byte
 21199  0036B8  502A               	movf	??i2_printRTC,w,c
 21200  0036BA  0A01               	xorlw	1	; case 1
 21201  0036BC  B4D8               	btfsc	status,2,c
 21202  0036BE  D770               	goto	i2l7612
 21203  0036C0  0A03               	xorlw	3	; case 2
 21204  0036C2  B4D8               	btfsc	status,2,c
 21205  0036C4  D778               	goto	i2l7614
 21206  0036C6  0A01               	xorlw	1	; case 3
 21207  0036C8  B4D8               	btfsc	status,2,c
 21208  0036CA  D780               	goto	i2l7616
 21209  0036CC  0A07               	xorlw	7	; case 4
 21210  0036CE  B4D8               	btfsc	status,2,c
 21211  0036D0  D788               	goto	i2l7618
 21212  0036D2  0A01               	xorlw	1	; case 5
 21213  0036D4  B4D8               	btfsc	status,2,c
 21214  0036D6  D790               	goto	i2l7620
 21215  0036D8  0A03               	xorlw	3	; case 6
 21216  0036DA  B4D8               	btfsc	status,2,c
 21217  0036DC  D798               	goto	i2l7622
 21218  0036DE  0A01               	xorlw	1	; case 7
 21219  0036E0  B4D8               	btfsc	status,2,c
 21220  0036E2  D7A0               	goto	i2l7624
 21221  0036E4  0A0F               	xorlw	15	; case 8
 21222  0036E6  B4D8               	btfsc	status,2,c
 21223  0036E8  D7A8               	goto	i2l7626
 21224  0036EA  0A01               	xorlw	1	; case 9
 21225  0036EC  B4D8               	btfsc	status,2,c
 21226  0036EE  D7B0               	goto	i2l7628
 21227  0036F0  0A03               	xorlw	3	; case 10
 21228  0036F2  B4D8               	btfsc	status,2,c
 21229  0036F4  D7B8               	goto	i2l7630
 21230  0036F6  0A01               	xorlw	1	; case 11
 21231  0036F8  B4D8               	btfsc	status,2,c
 21232  0036FA  D7C0               	goto	i2l7632
 21233  0036FC  0A07               	xorlw	7	; case 12
 21234  0036FE  B4D8               	btfsc	status,2,c
 21235  003700  D7C8               	goto	i2l7634
 21236  003702                     i2l7640:
 21237                           
 21238                           ;RTC.c: 110: lcdInst(0b10000000);;
 21239  003702  0E80               	movlw	128
 21240  003704  ECD7  F02D         	call	i2_lcdInst
 21241                           
 21242                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 21243  003708  0EA6               	movlw	low STR_21
 21244  00370A  6E0D               	movwf	i2printf@f,c
 21245  00370C  0EFA               	movlw	high STR_21
 21246  00370E  6E0E               	movwf	i2printf@f+1,c
 21247  003710  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 21248  003714  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 21249  003718  0E3D               	movlw	low i2printRTC@month
 21250  00371A  6E11               	movwf	?i2_printf+4,c
 21251  00371C  0E00               	movlw	high i2printRTC@month
 21252  00371E  6E12               	movwf	?i2_printf+5,c
 21253  003720  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 21254  003724  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 21255  003728  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 21256  00372C  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 21257  003730  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 21258  003734  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 21259  003738  ECA0  F011         	call	i2_printf	;wreg free
 21260  00373C  0012               	return		;funcret
 21261  00373E                     __end_ofi2_printRTC:
 21262                           	opt stack 0
 21263                           pclatu	equ	0xFFB
 21264                           pclath	equ	0xFFA
 21265                           tblptru	equ	0xFF8
 21266                           tblptrh	equ	0xFF7
 21267                           tblptrl	equ	0xFF6
 21268                           tablat	equ	0xFF5
 21269                           prodh	equ	0xFF4
 21270                           prodl	equ	0xFF3
 21271                           intcon	equ	0xFF2
 21272                           intcon2	equ	0xFF1
 21273                           intcon3	equ	0xFF0
 21274                           indf0	equ	0xFEF
 21275                           postinc0	equ	0xFEE
 21276                           fsr0h	equ	0xFEA
 21277                           fsr0l	equ	0xFE9
 21278                           wreg	equ	0xFE8
 21279                           postdec1	equ	0xFE5
 21280                           fsr1h	equ	0xFE2
 21281                           fsr1l	equ	0xFE1
 21282                           indf2	equ	0xFDF
 21283                           postinc2	equ	0xFDE
 21284                           postdec2	equ	0xFDD
 21285                           fsr2h	equ	0xFDA
 21286                           fsr2l	equ	0xFD9
 21287                           status	equ	0xFD8
 21288                           
 21289 ;; *************** function i2_strcpy *****************
 21290 ;; Defined at:
 21291 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 21292 ;; Parameters:    Size  Location     Type
 21293 ;;  to              2    0[COMRAM] PTR unsigned char 
 21294 ;;		 -> printRTC@month(4), UI@month(4), 
 21295 ;;  from            2    2[COMRAM] PTR const unsigned char 
 21296 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 21297 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 21298 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 21299 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 21300 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 21301 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 21302 ;;		 -> STR_8(4), 
 21303 ;; Auto vars:     Size  Location     Type
 21304 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 21305 ;;		 -> printRTC@month(4), UI@month(4), 
 21306 ;; Return value:  Size  Location     Type
 21307 ;;                  2    0[COMRAM] PTR unsigned char 
 21308 ;; Registers used:
 21309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 21310 ;; Tracked objects:
 21311 ;;		On entry : 0/0
 21312 ;;		On exit  : 0/0
 21313 ;;		Unchanged: 0/0
 21314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21315 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21316 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21318 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21319 ;;Total ram usage:        6 bytes
 21320 ;; Hardware stack levels used:    1
 21321 ;; This function calls:
 21322 ;;		Nothing
 21323 ;; This function is called by:
 21324 ;;		i2_printRTC
 21325 ;; This function uses a non-reentrant model
 21326 ;;
 21327                           
 21328                           	psect	text70
 21329  0056CE                     __ptext70:
 21330                           	opt stack 0
 21331  0056CE                     i2_strcpy:
 21332                           	opt stack 21
 21333                           
 21334                           ;incstack = 0
 21335  0056CE  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 21336  0056D2  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 21337  0056D6  D004               	goto	i2l7164
 21338  0056D8                     i2l7162:
 21339  0056D8  4A05               	infsnz	i2strcpy@cp,f,c
 21340  0056DA  2A06               	incf	i2strcpy@cp+1,f,c
 21341  0056DC  4A03               	infsnz	i2strcpy@from,f,c
 21342  0056DE  2A04               	incf	i2strcpy@from+1,f,c
 21343  0056E0                     i2l7164:
 21344  0056E0  C003  FFF6         	movff	i2strcpy@from,tblptrl
 21345  0056E4  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 21346  0056E8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21347  0056E8  6AF8               	clrf	tblptru,c
 21348  0056EA                     	endif
 21349  0056EA                     	if	0	;tblptru may be non-zero
 21350  0056EA                     	endif
 21351  0056EA  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 21352  0056EE  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 21353  0056F2  0008               	tblrd		*
 21354  0056F4  CFF5 FFDF          	movff	tablat,indf2
 21355  0056F8  50DF               	movf	indf2,w,c
 21356  0056FA  B4D8               	btfsc	status,2,c
 21357  0056FC  0012               	return	
 21358  0056FE  D7EC               	goto	i2l7162
 21359  005700                     __end_ofi2_strcpy:
 21360                           	opt stack 0
 21361                           pclatu	equ	0xFFB
 21362                           pclath	equ	0xFFA
 21363                           tblptru	equ	0xFF8
 21364                           tblptrh	equ	0xFF7
 21365                           tblptrl	equ	0xFF6
 21366                           tablat	equ	0xFF5
 21367                           prodh	equ	0xFF4
 21368                           prodl	equ	0xFF3
 21369                           intcon	equ	0xFF2
 21370                           intcon2	equ	0xFF1
 21371                           intcon3	equ	0xFF0
 21372                           indf0	equ	0xFEF
 21373                           postinc0	equ	0xFEE
 21374                           fsr0h	equ	0xFEA
 21375                           fsr0l	equ	0xFE9
 21376                           wreg	equ	0xFE8
 21377                           postdec1	equ	0xFE5
 21378                           fsr1h	equ	0xFE2
 21379                           fsr1l	equ	0xFE1
 21380                           indf2	equ	0xFDF
 21381                           postinc2	equ	0xFDE
 21382                           postdec2	equ	0xFDD
 21383                           fsr2h	equ	0xFDA
 21384                           fsr2l	equ	0xFD9
 21385                           status	equ	0xFD8
 21386                           
 21387 ;; *************** function _inputHandler *****************
 21388 ;; Defined at:
 21389 ;;		line 375 in file "UI.c"
 21390 ;; Parameters:    Size  Location     Type
 21391 ;;		None
 21392 ;; Auto vars:     Size  Location     Type
 21393 ;;		None
 21394 ;; Return value:  Size  Location     Type
 21395 ;;                  2   41[COMRAM] int 
 21396 ;; Registers used:
 21397 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21398 ;; Tracked objects:
 21399 ;;		On entry : 0/0
 21400 ;;		On exit  : 0/0
 21401 ;;		Unchanged: 0/0
 21402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21403 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21405 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21406 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21407 ;;Total ram usage:        4 bytes
 21408 ;; Hardware stack levels used:    1
 21409 ;; Hardware stack levels required when called:    4
 21410 ;; This function calls:
 21411 ;;		_change_state_to_logs_11
 21412 ;;		_change_state_to_logs_12
 21413 ;;		_change_state_to_logs_22
 21414 ;;		_change_state_to_logs_23
 21415 ;;		_change_state_to_logs_33
 21416 ;;		_change_state_to_logs_34
 21417 ;;		_change_state_to_menu_11
 21418 ;;		_change_state_to_menu_23
 21419 ;;		i2_change_state_to_menu_12
 21420 ;;		i2_change_state_to_menu_22
 21421 ;; This function is called by:
 21422 ;;		_updateMenu
 21423 ;; This function uses a non-reentrant model
 21424 ;;
 21425                           
 21426                           	psect	text71
 21427  00373E                     __ptext71:
 21428                           	opt stack 0
 21429  00373E                     _inputHandler:
 21430                           	opt stack 18
 21431                           
 21432                           ;UI.c: 380: if(firstboot){
 21433                           
 21434                           ;incstack = 0
 21435  00373E  0101               	movlb	1	; () banked
 21436  003740  5139               	movf	_firstboot& (0+255),w,b
 21437  003742  0101               	movlb	1	; () banked
 21438  003744  113A               	iorwf	(_firstboot+1)& (0+255),w,b
 21439  003746  B4D8               	btfsc	status,2,c
 21440  003748  D00C               	goto	i2l7708
 21441                           
 21442                           ; BSR set to: 1
 21443                           ;UI.c: 381: change_state_to_menu_11();
 21444  00374A  ECE0  F02B         	call	_change_state_to_menu_11	;wreg free
 21445                           
 21446                           ;UI.c: 382: firstboot = 0;
 21447  00374E  0E00               	movlw	0
 21448  003750  0101               	movlb	1	; () banked
 21449  003752  6F3A               	movwf	(_firstboot+1)& (0+255),b
 21450  003754  0E00               	movlw	0
 21451  003756  6F39               	movwf	_firstboot& (0+255),b
 21452                           
 21453                           ; BSR set to: 1
 21454                           ;UI.c: 383: return 0;
 21455  003758  0E00               	movlw	0
 21456  00375A  6E2B               	movwf	?_inputHandler+1,c
 21457  00375C  0E00               	movlw	0
 21458  00375E  6E2A               	movwf	?_inputHandler,c
 21459                           
 21460                           ; BSR set to: 1
 21461  003760  0012               	return	
 21462  003762                     i2l7708:
 21463                           
 21464                           ; BSR set to: 1
 21465                           ;UI.c: 384: }
 21466                           ;UI.c: 385: if (logstate){
 21467  003762  0100               	movlb	0	; () banked
 21468  003764  51F8               	movf	_logstate& (0+255),w,b
 21469  003766  0100               	movlb	0	; () banked
 21470  003768  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 21471  00376A  B4D8               	btfsc	status,2,c
 21472  00376C  D0C7               	goto	i2l7826
 21473                           
 21474                           ; BSR set to: 0
 21475                           ;UI.c: 386: if(input == 'C' && PORTBbits.RB1 == 1){
 21476  00376E  0E43               	movlw	67
 21477  003770  187D               	xorwf	_input,w,c	;volatile
 21478  003772  A4D8               	btfss	status,2,c
 21479  003774  D012               	goto	i2l7726
 21480                           
 21481                           ; BSR set to: 0
 21482  003776  B281               	btfsc	3969,1,c	;volatile
 21483  003778  D009               	goto	i2l7718
 21484  00377A  D00F               	goto	i2l7726
 21485  00377C                     i2l7716:
 21486                           
 21487                           ;UI.c: 389: _delay((unsigned long)((10)*(32000000/4000.0)));
 21488  00377C  0E68               	movlw	104
 21489  00377E  6E2C               	movwf	??_inputHandler& (0+255),c
 21490  003780  0EE4               	movlw	228
 21491  003782                     i2u1148_47:
 21492  003782  2EE8               	decfsz	wreg,f,c
 21493  003784  D7FE               	bra	i2u1148_47
 21494  003786  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 21495  003788  D7FC               	bra	i2u1148_47
 21496  00378A  D000               	nop2	
 21497  00378C                     i2l7718:
 21498  00378C  B281               	btfsc	3969,1,c	;volatile
 21499  00378E  D7F6               	goto	i2l7716
 21500  003790                     i2l7720:
 21501                           
 21502                           ;UI.c: 390: }
 21503                           ;UI.c: 391: return 0;
 21504  003790  0E00               	movlw	0
 21505  003792  6E2B               	movwf	?_inputHandler+1,c
 21506  003794  0E00               	movlw	0
 21507  003796  6E2A               	movwf	?_inputHandler,c
 21508  003798  0012               	return	
 21509  00379A                     i2l7726:
 21510                           
 21511                           ;UI.c: 393: else if (input == 'D'){
 21512  00379A  0E44               	movlw	68
 21513  00379C  187D               	xorwf	_input,w,c	;volatile
 21514  00379E  A4D8               	btfss	status,2,c
 21515  0037A0  D7F7               	goto	i2l7720
 21516                           
 21517                           ;UI.c: 395: logstate = 0;
 21518  0037A2  0E00               	movlw	0
 21519  0037A4  0100               	movlb	0	; () banked
 21520  0037A6  6FF9               	movwf	(_logstate+1)& (0+255),b
 21521  0037A8  0E00               	movlw	0
 21522  0037AA  6FF8               	movwf	_logstate& (0+255),b
 21523                           
 21524                           ;UI.c: 396: switch(cur_state){
 21525  0037AC  D012               	goto	i2l7744
 21526  0037AE                     i2l7730:
 21527                           
 21528                           ;UI.c: 398: change_state_to_logs_11();
 21529  0037AE  EC58  F02C         	call	_change_state_to_logs_11	;wreg free
 21530                           
 21531                           ;UI.c: 399: break;
 21532  0037B2  D7EE               	goto	i2l7720
 21533  0037B4                     i2l7732:
 21534                           
 21535                           ;UI.c: 401: change_state_to_logs_12();
 21536  0037B4  EC40  F02C         	call	_change_state_to_logs_12	;wreg free
 21537                           
 21538                           ;UI.c: 402: break;
 21539  0037B8  D7EB               	goto	i2l7720
 21540  0037BA                     i2l7734:
 21541                           
 21542                           ;UI.c: 404: change_state_to_logs_22();
 21543  0037BA  EC28  F02C         	call	_change_state_to_logs_22	;wreg free
 21544                           
 21545                           ;UI.c: 405: break;
 21546  0037BE  D7E8               	goto	i2l7720
 21547  0037C0                     i2l7736:
 21548                           
 21549                           ;UI.c: 407: change_state_to_logs_23();
 21550  0037C0  EC87  F02C         	call	_change_state_to_logs_23	;wreg free
 21551                           
 21552                           ;UI.c: 408: break;
 21553  0037C4  D7E5               	goto	i2l7720
 21554  0037C6                     i2l7738:
 21555                           
 21556                           ;UI.c: 410: change_state_to_logs_33();
 21557  0037C6  EC10  F02C         	call	_change_state_to_logs_33	;wreg free
 21558                           
 21559                           ;UI.c: 411: break;
 21560  0037CA  D7E2               	goto	i2l7720
 21561  0037CC                     i2l7740:
 21562                           
 21563                           ;UI.c: 413: change_state_to_logs_34();
 21564  0037CC  ECF8  F02B         	call	_change_state_to_logs_34	;wreg free
 21565                           
 21566                           ;UI.c: 415: }
 21567                           
 21568                           ;UI.c: 414: break;
 21569  0037D0  D7DF               	goto	i2l7720
 21570  0037D2                     i2l7744:
 21571  0037D2  C0E6  F02C         	movff	_cur_state,??_inputHandler
 21572  0037D6  C0E7  F02D         	movff	_cur_state+1,??_inputHandler+1
 21573                           
 21574                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 21575                           ; Switch size 1, requested type "space"
 21576                           ; Number of cases is 2, Range of values is 3 to 4
 21577                           ; switch strategies available:
 21578                           ; Name         Instructions Cycles
 21579                           ; simple_byte            7     4 (average)
 21580                           ;	Chosen strategy is simple_byte
 21581  0037DA  502D               	movf	??_inputHandler+1,w,c
 21582  0037DC  0A03               	xorlw	3	; case 3
 21583  0037DE  B4D8               	btfsc	status,2,c
 21584  0037E0  D004               	goto	i2l10826
 21585  0037E2  0A07               	xorlw	7	; case 4
 21586  0037E4  B4D8               	btfsc	status,2,c
 21587  0037E6  D00F               	goto	i2l10828
 21588  0037E8  D7D3               	goto	i2l7720
 21589  0037EA                     i2l10826:
 21590                           
 21591                           ; Switch size 1, requested type "space"
 21592                           ; Number of cases is 4, Range of values is 243 to 255
 21593                           ; switch strategies available:
 21594                           ; Name         Instructions Cycles
 21595                           ; simple_byte           13     7 (average)
 21596                           ;	Chosen strategy is simple_byte
 21597  0037EA  502C               	movf	??_inputHandler,w,c
 21598  0037EC  0AF3               	xorlw	243	; case 243
 21599  0037EE  B4D8               	btfsc	status,2,c
 21600  0037F0  D7DE               	goto	i2l7730
 21601  0037F2  0A07               	xorlw	7	; case 244
 21602  0037F4  B4D8               	btfsc	status,2,c
 21603  0037F6  D7DE               	goto	i2l7732
 21604  0037F8  0A0A               	xorlw	10	; case 254
 21605  0037FA  B4D8               	btfsc	status,2,c
 21606  0037FC  D7DE               	goto	i2l7734
 21607  0037FE  0A01               	xorlw	1	; case 255
 21608  003800  B4D8               	btfsc	status,2,c
 21609  003802  D7DE               	goto	i2l7736
 21610  003804  D7C5               	goto	i2l7720
 21611  003806                     i2l10828:
 21612                           
 21613                           ; Switch size 1, requested type "space"
 21614                           ; Number of cases is 2, Range of values is 9 to 10
 21615                           ; switch strategies available:
 21616                           ; Name         Instructions Cycles
 21617                           ; simple_byte            7     4 (average)
 21618                           ;	Chosen strategy is simple_byte
 21619  003806  502C               	movf	??_inputHandler,w,c
 21620  003808  0A09               	xorlw	9	; case 9
 21621  00380A  B4D8               	btfsc	status,2,c
 21622  00380C  D7DC               	goto	i2l7738
 21623  00380E  0A03               	xorlw	3	; case 10
 21624  003810  B4D8               	btfsc	status,2,c
 21625  003812  D7DC               	goto	i2l7740
 21626  003814  D7BD               	goto	i2l7720
 21627  003816                     i2l7756:
 21628                           
 21629                           ;UI.c: 425: if(cur_state == 11){
 21630  003816  0E0B               	movlw	11
 21631  003818  0100               	movlb	0	; () banked
 21632  00381A  19E6               	xorwf	_cur_state& (0+255),w,b
 21633  00381C  0100               	movlb	0	; () banked
 21634  00381E  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21635  003820  A4D8               	btfss	status,2,c
 21636  003822  D005               	goto	i2l7764
 21637                           
 21638                           ; BSR set to: 0
 21639                           ;UI.c: 426: return 0;
 21640  003824  0E00               	movlw	0
 21641  003826  6E2B               	movwf	?_inputHandler+1,c
 21642  003828  0E00               	movlw	0
 21643  00382A  6E2A               	movwf	?_inputHandler,c
 21644                           
 21645                           ; BSR set to: 0
 21646  00382C  0012               	return	
 21647  00382E                     i2l7764:
 21648                           
 21649                           ; BSR set to: 0
 21650                           ;UI.c: 428: else{
 21651                           ;UI.c: 429: change_state_to_menu_11();
 21652  00382E  ECE0  F02B         	call	_change_state_to_menu_11	;wreg free
 21653                           
 21654                           ;UI.c: 430: }
 21655                           ;UI.c: 431: return 0;
 21656  003832  0E00               	movlw	0
 21657  003834  6E2B               	movwf	?_inputHandler+1,c
 21658  003836  0E00               	movlw	0
 21659  003838  6E2A               	movwf	?_inputHandler,c
 21660  00383A  0012               	return	
 21661  00383C                     i2l7770:
 21662                           
 21663                           ;UI.c: 433: if(cur_state == 22 || cur_state == 12){
 21664  00383C  0E16               	movlw	22
 21665  00383E  0100               	movlb	0	; () banked
 21666  003840  19E6               	xorwf	_cur_state& (0+255),w,b
 21667  003842  0100               	movlb	0	; () banked
 21668  003844  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21669  003846  B4D8               	btfsc	status,2,c
 21670  003848  D007               	goto	i2l7774
 21671                           
 21672                           ; BSR set to: 0
 21673  00384A  0E0C               	movlw	12
 21674  00384C  0100               	movlb	0	; () banked
 21675  00384E  19E6               	xorwf	_cur_state& (0+255),w,b
 21676  003850  0100               	movlb	0	; () banked
 21677  003852  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21678  003854  A4D8               	btfss	status,2,c
 21679  003856  D005               	goto	i2l7780
 21680  003858                     i2l7774:
 21681                           
 21682                           ; BSR set to: 0
 21683                           ;UI.c: 434: return 0;
 21684  003858  0E00               	movlw	0
 21685  00385A  6E2B               	movwf	?_inputHandler+1,c
 21686  00385C  0E00               	movlw	0
 21687  00385E  6E2A               	movwf	?_inputHandler,c
 21688                           
 21689                           ; BSR set to: 0
 21690  003860  0012               	return	
 21691  003862                     i2l7780:
 21692                           
 21693                           ; BSR set to: 0
 21694                           ;UI.c: 436: else if(cur_state == 23){
 21695  003862  0E17               	movlw	23
 21696  003864  0100               	movlb	0	; () banked
 21697  003866  19E6               	xorwf	_cur_state& (0+255),w,b
 21698  003868  0100               	movlb	0	; () banked
 21699  00386A  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21700  00386C  A4D8               	btfss	status,2,c
 21701  00386E  D003               	goto	i2l7784
 21702                           
 21703                           ; BSR set to: 0
 21704                           ;UI.c: 437: change_state_to_menu_22();
 21705  003870  EC98  F02B         	call	i2_change_state_to_menu_22	;wreg free
 21706                           
 21707                           ;UI.c: 438: }
 21708  003874  D002               	goto	i2l7786
 21709  003876                     i2l7784:
 21710                           
 21711                           ;UI.c: 439: else{
 21712                           ;UI.c: 440: change_state_to_menu_12();
 21713  003876  ECB0  F02B         	call	i2_change_state_to_menu_12	;wreg free
 21714  00387A                     i2l7786:
 21715                           
 21716                           ;UI.c: 441: }
 21717                           ;UI.c: 442: return 0;
 21718  00387A  0E00               	movlw	0
 21719  00387C  6E2B               	movwf	?_inputHandler+1,c
 21720  00387E  0E00               	movlw	0
 21721  003880  6E2A               	movwf	?_inputHandler,c
 21722  003882  0012               	return	
 21723  003884                     i2l7790:
 21724                           
 21725                           ;UI.c: 444: if(cur_state == 23){
 21726  003884  0E17               	movlw	23
 21727  003886  0100               	movlb	0	; () banked
 21728  003888  19E6               	xorwf	_cur_state& (0+255),w,b
 21729  00388A  0100               	movlb	0	; () banked
 21730  00388C  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21731  00388E  A4D8               	btfss	status,2,c
 21732  003890  D005               	goto	i2l7798
 21733                           
 21734                           ; BSR set to: 0
 21735                           ;UI.c: 445: return 0;
 21736  003892  0E00               	movlw	0
 21737  003894  6E2B               	movwf	?_inputHandler+1,c
 21738  003896  0E00               	movlw	0
 21739  003898  6E2A               	movwf	?_inputHandler,c
 21740                           
 21741                           ; BSR set to: 0
 21742  00389A  0012               	return	
 21743  00389C                     i2l7798:
 21744                           
 21745                           ; BSR set to: 0
 21746                           ;UI.c: 447: else{
 21747                           ;UI.c: 448: change_state_to_menu_23();
 21748  00389C  ECC8  F02B         	call	_change_state_to_menu_23	;wreg free
 21749                           
 21750                           ;UI.c: 449: }
 21751                           ;UI.c: 450: return 0;
 21752  0038A0  0E00               	movlw	0
 21753  0038A2  6E2B               	movwf	?_inputHandler+1,c
 21754  0038A4  0E00               	movlw	0
 21755  0038A6  6E2A               	movwf	?_inputHandler,c
 21756  0038A8  0012               	return	
 21757  0038AA                     i2l7804:
 21758                           
 21759                           ;UI.c: 453: up = 1;
 21760  0038AA  0E00               	movlw	0
 21761  0038AC  6E76               	movwf	_up+1,c
 21762  0038AE  0E01               	movlw	1
 21763  0038B0  6E75               	movwf	_up,c
 21764                           
 21765                           ;UI.c: 454: return 1;
 21766  0038B2  0E00               	movlw	0
 21767  0038B4  6E2B               	movwf	?_inputHandler+1,c
 21768  0038B6  0E01               	movlw	1
 21769  0038B8  6E2A               	movwf	?_inputHandler,c
 21770  0038BA  0012               	return	
 21771  0038BC                     i2l7808:
 21772                           
 21773                           ;UI.c: 456: down = 1;
 21774  0038BC  0E00               	movlw	0
 21775  0038BE  6E66               	movwf	_down+1,c
 21776  0038C0  0E01               	movlw	1
 21777  0038C2  6E65               	movwf	_down,c
 21778                           
 21779                           ;UI.c: 457: return 1;
 21780  0038C4  0E00               	movlw	0
 21781  0038C6  6E2B               	movwf	?_inputHandler+1,c
 21782  0038C8  0E01               	movlw	1
 21783  0038CA  6E2A               	movwf	?_inputHandler,c
 21784  0038CC  0012               	return	
 21785  0038CE                     i2l7812:
 21786                           
 21787                           ;UI.c: 459: enter = 1;
 21788  0038CE  0E00               	movlw	0
 21789  0038D0  6E68               	movwf	_enter+1,c
 21790  0038D2  0E01               	movlw	1
 21791  0038D4  6E67               	movwf	_enter,c
 21792                           
 21793                           ;UI.c: 460: return 1;
 21794  0038D6  0E00               	movlw	0
 21795  0038D8  6E2B               	movwf	?_inputHandler+1,c
 21796  0038DA  0E01               	movlw	1
 21797  0038DC  6E2A               	movwf	?_inputHandler,c
 21798  0038DE  0012               	return	
 21799  0038E0                     i2l7816:
 21800                           
 21801                           ;UI.c: 462: back = 1;
 21802  0038E0  0E00               	movlw	0
 21803  0038E2  6E64               	movwf	_back+1,c
 21804  0038E4  0E01               	movlw	1
 21805  0038E6  6E63               	movwf	_back,c
 21806                           
 21807                           ;UI.c: 463: return 1;
 21808  0038E8  0E00               	movlw	0
 21809  0038EA  6E2B               	movwf	?_inputHandler+1,c
 21810  0038EC  0E01               	movlw	1
 21811  0038EE  6E2A               	movwf	?_inputHandler,c
 21812  0038F0  0012               	return	
 21813  0038F2                     i2l7820:
 21814                           
 21815                           ;UI.c: 466: return 1;
 21816  0038F2  0E00               	movlw	0
 21817  0038F4  6E2B               	movwf	?_inputHandler+1,c
 21818  0038F6  0E01               	movlw	1
 21819  0038F8  6E2A               	movwf	?_inputHandler,c
 21820                           
 21821                           ;UI.c: 467: }
 21822  0038FA  0012               	return	
 21823  0038FC                     i2l7826:
 21824  0038FC  507D               	movf	_input,w,c	;volatile
 21825                           
 21826                           ; Switch size 1, requested type "space"
 21827                           ; Number of cases is 7, Range of values is 49 to 68
 21828                           ; switch strategies available:
 21829                           ; Name         Instructions Cycles
 21830                           ; simple_byte           22    12 (average)
 21831                           ;	Chosen strategy is simple_byte
 21832  0038FE  0A31               	xorlw	49	; case 49
 21833  003900  B4D8               	btfsc	status,2,c
 21834  003902  D789               	goto	i2l7756
 21835  003904  0A03               	xorlw	3	; case 50
 21836  003906  B4D8               	btfsc	status,2,c
 21837  003908  D799               	goto	i2l7770
 21838  00390A  0A01               	xorlw	1	; case 51
 21839  00390C  B4D8               	btfsc	status,2,c
 21840  00390E  D7BA               	goto	i2l7790
 21841  003910  0A72               	xorlw	114	; case 65
 21842  003912  B4D8               	btfsc	status,2,c
 21843  003914  D7CA               	goto	i2l7804
 21844  003916  0A03               	xorlw	3	; case 66
 21845  003918  B4D8               	btfsc	status,2,c
 21846  00391A  D7D0               	goto	i2l7808
 21847  00391C  0A01               	xorlw	1	; case 67
 21848  00391E  B4D8               	btfsc	status,2,c
 21849  003920  D7D6               	goto	i2l7812
 21850  003922  0A07               	xorlw	7	; case 68
 21851  003924  B4D8               	btfsc	status,2,c
 21852  003926  D7DC               	goto	i2l7816
 21853  003928  D7E4               	goto	i2l7820
 21854  00392A                     __end_of_inputHandler:
 21855                           	opt stack 0
 21856                           pclatu	equ	0xFFB
 21857                           pclath	equ	0xFFA
 21858                           tblptru	equ	0xFF8
 21859                           tblptrh	equ	0xFF7
 21860                           tblptrl	equ	0xFF6
 21861                           tablat	equ	0xFF5
 21862                           prodh	equ	0xFF4
 21863                           prodl	equ	0xFF3
 21864                           intcon	equ	0xFF2
 21865                           intcon2	equ	0xFF1
 21866                           intcon3	equ	0xFF0
 21867                           indf0	equ	0xFEF
 21868                           postinc0	equ	0xFEE
 21869                           fsr0h	equ	0xFEA
 21870                           fsr0l	equ	0xFE9
 21871                           wreg	equ	0xFE8
 21872                           postdec1	equ	0xFE5
 21873                           fsr1h	equ	0xFE2
 21874                           fsr1l	equ	0xFE1
 21875                           indf2	equ	0xFDF
 21876                           postinc2	equ	0xFDE
 21877                           postdec2	equ	0xFDD
 21878                           fsr2h	equ	0xFDA
 21879                           fsr2l	equ	0xFD9
 21880                           status	equ	0xFD8
 21881                           
 21882 ;; *************** function i2_change_state_to_menu_22 *****************
 21883 ;; Defined at:
 21884 ;;		line 501 in file "UI.c"
 21885 ;; Parameters:    Size  Location     Type
 21886 ;;		None
 21887 ;; Auto vars:     Size  Location     Type
 21888 ;;		None
 21889 ;; Return value:  Size  Location     Type
 21890 ;;                  1    wreg      void 
 21891 ;; Registers used:
 21892 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21893 ;; Tracked objects:
 21894 ;;		On entry : 0/0
 21895 ;;		On exit  : 0/0
 21896 ;;		Unchanged: 0/0
 21897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21902 ;;Total ram usage:        0 bytes
 21903 ;; Hardware stack levels used:    1
 21904 ;; Hardware stack levels required when called:    3
 21905 ;; This function calls:
 21906 ;;		i2_lcdInst
 21907 ;;		i2_printf
 21908 ;; This function is called by:
 21909 ;;		_updateMenu
 21910 ;;		_inputHandler
 21911 ;; This function uses a non-reentrant model
 21912 ;;
 21913                           
 21914                           	psect	text72
 21915  005730                     __ptext72:
 21916                           	opt stack 0
 21917  005730                     i2_change_state_to_menu_22:
 21918                           	opt stack 19
 21919                           
 21920                           ;UI.c: 502: cur_state = 22;
 21921                           
 21922                           ;incstack = 0
 21923  005730  0E00               	movlw	0
 21924  005732  0100               	movlb	0	; () banked
 21925  005734  6FE7               	movwf	(_cur_state+1)& (0+255),b
 21926  005736  0E16               	movlw	22
 21927  005738  6FE6               	movwf	_cur_state& (0+255),b
 21928                           
 21929                           ; BSR set to: 0
 21930                           ;UI.c: 504: lcdInst(0b10000000);;
 21931  00573A  0E80               	movlw	128
 21932  00573C  ECD7  F02D         	call	i2_lcdInst
 21933                           
 21934                           ;UI.c: 505: printf("2. SORT        <");
 21935  005740  0EB7               	movlw	low STR_34
 21936  005742  6E0D               	movwf	i2printf@f,c
 21937  005744  0EFD               	movlw	high STR_34
 21938  005746  6E0E               	movwf	i2printf@f+1,c
 21939  005748  ECA0  F011         	call	i2_printf	;wreg free
 21940                           
 21941                           ;UI.c: 506: lcdInst(0b11000000);;
 21942  00574C  0EC0               	movlw	192
 21943  00574E  ECD7  F02D         	call	i2_lcdInst
 21944                           
 21945                           ;UI.c: 507: printf("3. LOGS         ");
 21946  005752  0EFC               	movlw	low STR_36
 21947  005754  6E0D               	movwf	i2printf@f,c
 21948  005756  0EFC               	movlw	high STR_36
 21949  005758  6E0E               	movwf	i2printf@f+1,c
 21950  00575A  ECA0  F011         	call	i2_printf	;wreg free
 21951  00575E  0012               	return		;funcret
 21952  005760                     __end_ofi2_change_state_to_menu_22:
 21953                           	opt stack 0
 21954                           pclatu	equ	0xFFB
 21955                           pclath	equ	0xFFA
 21956                           tblptru	equ	0xFF8
 21957                           tblptrh	equ	0xFF7
 21958                           tblptrl	equ	0xFF6
 21959                           tablat	equ	0xFF5
 21960                           prodh	equ	0xFF4
 21961                           prodl	equ	0xFF3
 21962                           intcon	equ	0xFF2
 21963                           intcon2	equ	0xFF1
 21964                           intcon3	equ	0xFF0
 21965                           indf0	equ	0xFEF
 21966                           postinc0	equ	0xFEE
 21967                           fsr0h	equ	0xFEA
 21968                           fsr0l	equ	0xFE9
 21969                           wreg	equ	0xFE8
 21970                           postdec1	equ	0xFE5
 21971                           fsr1h	equ	0xFE2
 21972                           fsr1l	equ	0xFE1
 21973                           indf2	equ	0xFDF
 21974                           postinc2	equ	0xFDE
 21975                           postdec2	equ	0xFDD
 21976                           fsr2h	equ	0xFDA
 21977                           fsr2l	equ	0xFD9
 21978                           status	equ	0xFD8
 21979                           
 21980 ;; *************** function i2_change_state_to_menu_12 *****************
 21981 ;; Defined at:
 21982 ;;		line 493 in file "UI.c"
 21983 ;; Parameters:    Size  Location     Type
 21984 ;;		None
 21985 ;; Auto vars:     Size  Location     Type
 21986 ;;		None
 21987 ;; Return value:  Size  Location     Type
 21988 ;;                  1    wreg      void 
 21989 ;; Registers used:
 21990 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21991 ;; Tracked objects:
 21992 ;;		On entry : 0/0
 21993 ;;		On exit  : 0/0
 21994 ;;		Unchanged: 0/0
 21995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22000 ;;Total ram usage:        0 bytes
 22001 ;; Hardware stack levels used:    1
 22002 ;; Hardware stack levels required when called:    3
 22003 ;; This function calls:
 22004 ;;		i2_lcdInst
 22005 ;;		i2_printf
 22006 ;; This function is called by:
 22007 ;;		_updateMenu
 22008 ;;		_inputHandler
 22009 ;; This function uses a non-reentrant model
 22010 ;;
 22011                           
 22012                           	psect	text73
 22013  005760                     __ptext73:
 22014                           	opt stack 0
 22015  005760                     i2_change_state_to_menu_12:
 22016                           	opt stack 19
 22017                           
 22018                           ;UI.c: 494: cur_state = 12;
 22019                           
 22020                           ;incstack = 0
 22021  005760  0E00               	movlw	0
 22022  005762  0100               	movlb	0	; () banked
 22023  005764  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22024  005766  0E0C               	movlw	12
 22025  005768  6FE6               	movwf	_cur_state& (0+255),b
 22026                           
 22027                           ; BSR set to: 0
 22028                           ;UI.c: 496: lcdInst(0b10000000);;
 22029  00576A  0E80               	movlw	128
 22030  00576C  ECD7  F02D         	call	i2_lcdInst
 22031                           
 22032                           ;UI.c: 497: printf("1. DATE/TIME    ");
 22033  005770  0E1E               	movlw	low STR_33
 22034  005772  6E0D               	movwf	i2printf@f,c
 22035  005774  0EFD               	movlw	high STR_33
 22036  005776  6E0E               	movwf	i2printf@f+1,c
 22037  005778  ECA0  F011         	call	i2_printf	;wreg free
 22038                           
 22039                           ;UI.c: 498: lcdInst(0b11000000);;
 22040  00577C  0EC0               	movlw	192
 22041  00577E  ECD7  F02D         	call	i2_lcdInst
 22042                           
 22043                           ;UI.c: 499: printf("2. SORT        <");
 22044  005782  0EB7               	movlw	low STR_34
 22045  005784  6E0D               	movwf	i2printf@f,c
 22046  005786  0EFD               	movlw	high STR_34
 22047  005788  6E0E               	movwf	i2printf@f+1,c
 22048  00578A  ECA0  F011         	call	i2_printf	;wreg free
 22049  00578E  0012               	return		;funcret
 22050  005790                     __end_ofi2_change_state_to_menu_12:
 22051                           	opt stack 0
 22052                           pclatu	equ	0xFFB
 22053                           pclath	equ	0xFFA
 22054                           tblptru	equ	0xFF8
 22055                           tblptrh	equ	0xFF7
 22056                           tblptrl	equ	0xFF6
 22057                           tablat	equ	0xFF5
 22058                           prodh	equ	0xFF4
 22059                           prodl	equ	0xFF3
 22060                           intcon	equ	0xFF2
 22061                           intcon2	equ	0xFF1
 22062                           intcon3	equ	0xFF0
 22063                           indf0	equ	0xFEF
 22064                           postinc0	equ	0xFEE
 22065                           fsr0h	equ	0xFEA
 22066                           fsr0l	equ	0xFE9
 22067                           wreg	equ	0xFE8
 22068                           postdec1	equ	0xFE5
 22069                           fsr1h	equ	0xFE2
 22070                           fsr1l	equ	0xFE1
 22071                           indf2	equ	0xFDF
 22072                           postinc2	equ	0xFDE
 22073                           postdec2	equ	0xFDD
 22074                           fsr2h	equ	0xFDA
 22075                           fsr2l	equ	0xFD9
 22076                           status	equ	0xFD8
 22077                           
 22078 ;; *************** function _change_state_to_menu_23 *****************
 22079 ;; Defined at:
 22080 ;;		line 509 in file "UI.c"
 22081 ;; Parameters:    Size  Location     Type
 22082 ;;		None
 22083 ;; Auto vars:     Size  Location     Type
 22084 ;;		None
 22085 ;; Return value:  Size  Location     Type
 22086 ;;                  1    wreg      void 
 22087 ;; Registers used:
 22088 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22089 ;; Tracked objects:
 22090 ;;		On entry : 0/0
 22091 ;;		On exit  : 0/0
 22092 ;;		Unchanged: 0/0
 22093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22098 ;;Total ram usage:        0 bytes
 22099 ;; Hardware stack levels used:    1
 22100 ;; Hardware stack levels required when called:    3
 22101 ;; This function calls:
 22102 ;;		i2_lcdInst
 22103 ;;		i2_printf
 22104 ;; This function is called by:
 22105 ;;		_updateMenu
 22106 ;;		_inputHandler
 22107 ;; This function uses a non-reentrant model
 22108 ;;
 22109                           
 22110                           	psect	text74
 22111  005790                     __ptext74:
 22112                           	opt stack 0
 22113  005790                     _change_state_to_menu_23:
 22114                           	opt stack 18
 22115                           
 22116                           ;UI.c: 510: cur_state = 23;
 22117                           
 22118                           ;incstack = 0
 22119  005790  0E00               	movlw	0
 22120  005792  0100               	movlb	0	; () banked
 22121  005794  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22122  005796  0E17               	movlw	23
 22123  005798  6FE6               	movwf	_cur_state& (0+255),b
 22124                           
 22125                           ; BSR set to: 0
 22126                           ;UI.c: 512: lcdInst(0b10000000);;
 22127  00579A  0E80               	movlw	128
 22128  00579C  ECD7  F02D         	call	i2_lcdInst
 22129                           
 22130                           ;UI.c: 513: printf("2. SORT         ");
 22131  0057A0  0E0D               	movlw	low STR_32
 22132  0057A2  6E0D               	movwf	i2printf@f,c
 22133  0057A4  0EFD               	movlw	high STR_32
 22134  0057A6  6E0E               	movwf	i2printf@f+1,c
 22135  0057A8  ECA0  F011         	call	i2_printf	;wreg free
 22136                           
 22137                           ;UI.c: 514: lcdInst(0b11000000);;
 22138  0057AC  0EC0               	movlw	192
 22139  0057AE  ECD7  F02D         	call	i2_lcdInst
 22140                           
 22141                           ;UI.c: 515: printf("3. LOGS        <");
 22142  0057B2  0EA6               	movlw	low STR_38
 22143  0057B4  6E0D               	movwf	i2printf@f,c
 22144  0057B6  0EFD               	movlw	high STR_38
 22145  0057B8  6E0E               	movwf	i2printf@f+1,c
 22146  0057BA  ECA0  F011         	call	i2_printf	;wreg free
 22147  0057BE  0012               	return		;funcret
 22148  0057C0                     __end_of_change_state_to_menu_23:
 22149                           	opt stack 0
 22150                           pclatu	equ	0xFFB
 22151                           pclath	equ	0xFFA
 22152                           tblptru	equ	0xFF8
 22153                           tblptrh	equ	0xFF7
 22154                           tblptrl	equ	0xFF6
 22155                           tablat	equ	0xFF5
 22156                           prodh	equ	0xFF4
 22157                           prodl	equ	0xFF3
 22158                           intcon	equ	0xFF2
 22159                           intcon2	equ	0xFF1
 22160                           intcon3	equ	0xFF0
 22161                           indf0	equ	0xFEF
 22162                           postinc0	equ	0xFEE
 22163                           fsr0h	equ	0xFEA
 22164                           fsr0l	equ	0xFE9
 22165                           wreg	equ	0xFE8
 22166                           postdec1	equ	0xFE5
 22167                           fsr1h	equ	0xFE2
 22168                           fsr1l	equ	0xFE1
 22169                           indf2	equ	0xFDF
 22170                           postinc2	equ	0xFDE
 22171                           postdec2	equ	0xFDD
 22172                           fsr2h	equ	0xFDA
 22173                           fsr2l	equ	0xFD9
 22174                           status	equ	0xFD8
 22175                           
 22176 ;; *************** function _change_state_to_menu_11 *****************
 22177 ;; Defined at:
 22178 ;;		line 485 in file "UI.c"
 22179 ;; Parameters:    Size  Location     Type
 22180 ;;		None
 22181 ;; Auto vars:     Size  Location     Type
 22182 ;;		None
 22183 ;; Return value:  Size  Location     Type
 22184 ;;                  1    wreg      void 
 22185 ;; Registers used:
 22186 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22187 ;; Tracked objects:
 22188 ;;		On entry : 0/0
 22189 ;;		On exit  : 0/0
 22190 ;;		Unchanged: 0/0
 22191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22196 ;;Total ram usage:        0 bytes
 22197 ;; Hardware stack levels used:    1
 22198 ;; Hardware stack levels required when called:    3
 22199 ;; This function calls:
 22200 ;;		i2_lcdInst
 22201 ;;		i2_printf
 22202 ;; This function is called by:
 22203 ;;		_updateMenu
 22204 ;;		_inputHandler
 22205 ;; This function uses a non-reentrant model
 22206 ;;
 22207                           
 22208                           	psect	text75
 22209  0057C0                     __ptext75:
 22210                           	opt stack 0
 22211  0057C0                     _change_state_to_menu_11:
 22212                           	opt stack 18
 22213                           
 22214                           ;UI.c: 486: cur_state = 11;
 22215                           
 22216                           ;incstack = 0
 22217  0057C0  0E00               	movlw	0
 22218  0057C2  0100               	movlb	0	; () banked
 22219  0057C4  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22220  0057C6  0E0B               	movlw	11
 22221  0057C8  6FE6               	movwf	_cur_state& (0+255),b
 22222                           
 22223                           ; BSR set to: 0
 22224                           ;UI.c: 488: lcdInst(0b10000000);;
 22225  0057CA  0E80               	movlw	128
 22226  0057CC  ECD7  F02D         	call	i2_lcdInst
 22227                           
 22228                           ;UI.c: 489: printf("1. DATE/TIME   <");
 22229  0057D0  0EC8               	movlw	low STR_31
 22230  0057D2  6E0D               	movwf	i2printf@f,c
 22231  0057D4  0EFD               	movlw	high STR_31
 22232  0057D6  6E0E               	movwf	i2printf@f+1,c
 22233  0057D8  ECA0  F011         	call	i2_printf	;wreg free
 22234                           
 22235                           ;UI.c: 490: lcdInst(0b11000000);;
 22236  0057DC  0EC0               	movlw	192
 22237  0057DE  ECD7  F02D         	call	i2_lcdInst
 22238                           
 22239                           ;UI.c: 491: printf("2. SORT         ");
 22240  0057E2  0E0D               	movlw	low STR_32
 22241  0057E4  6E0D               	movwf	i2printf@f,c
 22242  0057E6  0EFD               	movlw	high STR_32
 22243  0057E8  6E0E               	movwf	i2printf@f+1,c
 22244  0057EA  ECA0  F011         	call	i2_printf	;wreg free
 22245  0057EE  0012               	return		;funcret
 22246  0057F0                     __end_of_change_state_to_menu_11:
 22247                           	opt stack 0
 22248                           pclatu	equ	0xFFB
 22249                           pclath	equ	0xFFA
 22250                           tblptru	equ	0xFF8
 22251                           tblptrh	equ	0xFF7
 22252                           tblptrl	equ	0xFF6
 22253                           tablat	equ	0xFF5
 22254                           prodh	equ	0xFF4
 22255                           prodl	equ	0xFF3
 22256                           intcon	equ	0xFF2
 22257                           intcon2	equ	0xFF1
 22258                           intcon3	equ	0xFF0
 22259                           indf0	equ	0xFEF
 22260                           postinc0	equ	0xFEE
 22261                           fsr0h	equ	0xFEA
 22262                           fsr0l	equ	0xFE9
 22263                           wreg	equ	0xFE8
 22264                           postdec1	equ	0xFE5
 22265                           fsr1h	equ	0xFE2
 22266                           fsr1l	equ	0xFE1
 22267                           indf2	equ	0xFDF
 22268                           postinc2	equ	0xFDE
 22269                           postdec2	equ	0xFDD
 22270                           fsr2h	equ	0xFDA
 22271                           fsr2l	equ	0xFD9
 22272                           status	equ	0xFD8
 22273                           
 22274 ;; *************** function _change_state_to_logs_34 *****************
 22275 ;; Defined at:
 22276 ;;		line 552 in file "UI.c"
 22277 ;; Parameters:    Size  Location     Type
 22278 ;;		None
 22279 ;; Auto vars:     Size  Location     Type
 22280 ;;		None
 22281 ;; Return value:  Size  Location     Type
 22282 ;;                  1    wreg      void 
 22283 ;; Registers used:
 22284 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22285 ;; Tracked objects:
 22286 ;;		On entry : 0/0
 22287 ;;		On exit  : 0/0
 22288 ;;		Unchanged: 0/0
 22289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22293 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22294 ;;Total ram usage:        0 bytes
 22295 ;; Hardware stack levels used:    1
 22296 ;; Hardware stack levels required when called:    3
 22297 ;; This function calls:
 22298 ;;		i2_lcdInst
 22299 ;;		i2_printf
 22300 ;; This function is called by:
 22301 ;;		_updateMenu
 22302 ;;		_inputHandler
 22303 ;; This function uses a non-reentrant model
 22304 ;;
 22305                           
 22306                           	psect	text76
 22307  0057F0                     __ptext76:
 22308                           	opt stack 0
 22309  0057F0                     _change_state_to_logs_34:
 22310                           	opt stack 18
 22311                           
 22312                           ;UI.c: 553: cur_state = 1034;
 22313                           
 22314                           ;incstack = 0
 22315  0057F0  0E04               	movlw	4
 22316  0057F2  0100               	movlb	0	; () banked
 22317  0057F4  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22318  0057F6  0E0A               	movlw	10
 22319  0057F8  6FE6               	movwf	_cur_state& (0+255),b
 22320                           
 22321                           ; BSR set to: 0
 22322                           ;UI.c: 554: lcdInst(0b10000000);;
 22323  0057FA  0E80               	movlw	128
 22324  0057FC  ECD7  F02D         	call	i2_lcdInst
 22325                           
 22326                           ;UI.c: 555: printf("LOG 3           ");
 22327  005800  0EDA               	movlw	low STR_44
 22328  005802  6E0D               	movwf	i2printf@f,c
 22329  005804  0EFC               	movlw	high STR_44
 22330  005806  6E0E               	movwf	i2printf@f+1,c
 22331  005808  ECA0  F011         	call	i2_printf	;wreg free
 22332                           
 22333                           ;UI.c: 556: lcdInst(0b11000000);;
 22334  00580C  0EC0               	movlw	192
 22335  00580E  ECD7  F02D         	call	i2_lcdInst
 22336                           
 22337                           ;UI.c: 557: printf("LOG 4          <");
 22338  005812  0E95               	movlw	low STR_50
 22339  005814  6E0D               	movwf	i2printf@f,c
 22340  005816  0EFD               	movlw	high STR_50
 22341  005818  6E0E               	movwf	i2printf@f+1,c
 22342  00581A  ECA0  F011         	call	i2_printf	;wreg free
 22343  00581E  0012               	return		;funcret
 22344  005820                     __end_of_change_state_to_logs_34:
 22345                           	opt stack 0
 22346                           pclatu	equ	0xFFB
 22347                           pclath	equ	0xFFA
 22348                           tblptru	equ	0xFF8
 22349                           tblptrh	equ	0xFF7
 22350                           tblptrl	equ	0xFF6
 22351                           tablat	equ	0xFF5
 22352                           prodh	equ	0xFF4
 22353                           prodl	equ	0xFF3
 22354                           intcon	equ	0xFF2
 22355                           intcon2	equ	0xFF1
 22356                           intcon3	equ	0xFF0
 22357                           indf0	equ	0xFEF
 22358                           postinc0	equ	0xFEE
 22359                           fsr0h	equ	0xFEA
 22360                           fsr0l	equ	0xFE9
 22361                           wreg	equ	0xFE8
 22362                           postdec1	equ	0xFE5
 22363                           fsr1h	equ	0xFE2
 22364                           fsr1l	equ	0xFE1
 22365                           indf2	equ	0xFDF
 22366                           postinc2	equ	0xFDE
 22367                           postdec2	equ	0xFDD
 22368                           fsr2h	equ	0xFDA
 22369                           fsr2l	equ	0xFD9
 22370                           status	equ	0xFD8
 22371                           
 22372 ;; *************** function _change_state_to_logs_33 *****************
 22373 ;; Defined at:
 22374 ;;		line 545 in file "UI.c"
 22375 ;; Parameters:    Size  Location     Type
 22376 ;;		None
 22377 ;; Auto vars:     Size  Location     Type
 22378 ;;		None
 22379 ;; Return value:  Size  Location     Type
 22380 ;;                  1    wreg      void 
 22381 ;; Registers used:
 22382 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22383 ;; Tracked objects:
 22384 ;;		On entry : 0/0
 22385 ;;		On exit  : 0/0
 22386 ;;		Unchanged: 0/0
 22387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22391 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22392 ;;Total ram usage:        0 bytes
 22393 ;; Hardware stack levels used:    1
 22394 ;; Hardware stack levels required when called:    3
 22395 ;; This function calls:
 22396 ;;		i2_lcdInst
 22397 ;;		i2_printf
 22398 ;; This function is called by:
 22399 ;;		_updateMenu
 22400 ;;		_inputHandler
 22401 ;; This function uses a non-reentrant model
 22402 ;;
 22403                           
 22404                           	psect	text77
 22405  005820                     __ptext77:
 22406                           	opt stack 0
 22407  005820                     _change_state_to_logs_33:
 22408                           	opt stack 18
 22409                           
 22410                           ;UI.c: 546: cur_state = 1033;
 22411                           
 22412                           ;incstack = 0
 22413  005820  0E04               	movlw	4
 22414  005822  0100               	movlb	0	; () banked
 22415  005824  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22416  005826  0E09               	movlw	9
 22417  005828  6FE6               	movwf	_cur_state& (0+255),b
 22418                           
 22419                           ; BSR set to: 0
 22420                           ;UI.c: 547: lcdInst(0b10000000);;
 22421  00582A  0E80               	movlw	128
 22422  00582C  ECD7  F02D         	call	i2_lcdInst
 22423                           
 22424                           ;UI.c: 548: printf("LOG 3          <");
 22425  005830  0E84               	movlw	low STR_46
 22426  005832  6E0D               	movwf	i2printf@f,c
 22427  005834  0EFD               	movlw	high STR_46
 22428  005836  6E0E               	movwf	i2printf@f+1,c
 22429  005838  ECA0  F011         	call	i2_printf	;wreg free
 22430                           
 22431                           ;UI.c: 549: lcdInst(0b11000000);;
 22432  00583C  0EC0               	movlw	192
 22433  00583E  ECD7  F02D         	call	i2_lcdInst
 22434                           
 22435                           ;UI.c: 550: printf("LOG 4           ");
 22436  005842  0EEB               	movlw	low STR_48
 22437  005844  6E0D               	movwf	i2printf@f,c
 22438  005846  0EFC               	movlw	high STR_48
 22439  005848  6E0E               	movwf	i2printf@f+1,c
 22440  00584A  ECA0  F011         	call	i2_printf	;wreg free
 22441  00584E  0012               	return		;funcret
 22442  005850                     __end_of_change_state_to_logs_33:
 22443                           	opt stack 0
 22444                           pclatu	equ	0xFFB
 22445                           pclath	equ	0xFFA
 22446                           tblptru	equ	0xFF8
 22447                           tblptrh	equ	0xFF7
 22448                           tblptrl	equ	0xFF6
 22449                           tablat	equ	0xFF5
 22450                           prodh	equ	0xFF4
 22451                           prodl	equ	0xFF3
 22452                           intcon	equ	0xFF2
 22453                           intcon2	equ	0xFF1
 22454                           intcon3	equ	0xFF0
 22455                           indf0	equ	0xFEF
 22456                           postinc0	equ	0xFEE
 22457                           fsr0h	equ	0xFEA
 22458                           fsr0l	equ	0xFE9
 22459                           wreg	equ	0xFE8
 22460                           postdec1	equ	0xFE5
 22461                           fsr1h	equ	0xFE2
 22462                           fsr1l	equ	0xFE1
 22463                           indf2	equ	0xFDF
 22464                           postinc2	equ	0xFDE
 22465                           postdec2	equ	0xFDD
 22466                           fsr2h	equ	0xFDA
 22467                           fsr2l	equ	0xFD9
 22468                           status	equ	0xFD8
 22469                           
 22470 ;; *************** function _change_state_to_logs_23 *****************
 22471 ;; Defined at:
 22472 ;;		line 538 in file "UI.c"
 22473 ;; Parameters:    Size  Location     Type
 22474 ;;		None
 22475 ;; Auto vars:     Size  Location     Type
 22476 ;;		None
 22477 ;; Return value:  Size  Location     Type
 22478 ;;                  1    wreg      void 
 22479 ;; Registers used:
 22480 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22481 ;; Tracked objects:
 22482 ;;		On entry : 0/0
 22483 ;;		On exit  : 0/0
 22484 ;;		Unchanged: 0/0
 22485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22490 ;;Total ram usage:        0 bytes
 22491 ;; Hardware stack levels used:    1
 22492 ;; Hardware stack levels required when called:    3
 22493 ;; This function calls:
 22494 ;;		i2_lcdInst
 22495 ;;		i2_printf
 22496 ;; This function is called by:
 22497 ;;		_updateMenu
 22498 ;;		_inputHandler
 22499 ;; This function uses a non-reentrant model
 22500 ;;
 22501                           
 22502                           	psect	text78
 22503  00590E                     __ptext78:
 22504                           	opt stack 0
 22505  00590E                     _change_state_to_logs_23:
 22506                           	opt stack 18
 22507                           
 22508                           ;UI.c: 539: cur_state = 1023;
 22509                           
 22510                           ;incstack = 0
 22511  00590E  0E03               	movlw	3
 22512  005910  0100               	movlb	0	; () banked
 22513  005912  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22514  005914  69E6               	setf	_cur_state& (0+255),b
 22515                           
 22516                           ; BSR set to: 0
 22517                           ;UI.c: 540: lcdInst(0b10000000);;
 22518  005916  0E80               	movlw	128
 22519  005918  ECD7  F02D         	call	i2_lcdInst
 22520                           
 22521                           ;UI.c: 541: printf("LOG 2           ");
 22522  00591C  0EC9               	movlw	low STR_40
 22523  00591E  6E0D               	movwf	i2printf@f,c
 22524  005920  0EFC               	movlw	high STR_40
 22525  005922  6E0E               	movwf	i2printf@f+1,c
 22526  005924  ECA0  F011         	call	i2_printf	;wreg free
 22527                           
 22528                           ;UI.c: 542: lcdInst(0b11000000);;
 22529  005928  0EC0               	movlw	192
 22530  00592A  ECD7  F02D         	call	i2_lcdInst
 22531                           
 22532                           ;UI.c: 543: printf("LOG 3          <");
 22533  00592E  0E84               	movlw	low STR_46
 22534  005930  6E0D               	movwf	i2printf@f,c
 22535  005932  0EFD               	movlw	high STR_46
 22536  005934  6E0E               	movwf	i2printf@f+1,c
 22537  005936  ECA0  F011         	call	i2_printf	;wreg free
 22538  00593A  0012               	return		;funcret
 22539  00593C                     __end_of_change_state_to_logs_23:
 22540                           	opt stack 0
 22541                           pclatu	equ	0xFFB
 22542                           pclath	equ	0xFFA
 22543                           tblptru	equ	0xFF8
 22544                           tblptrh	equ	0xFF7
 22545                           tblptrl	equ	0xFF6
 22546                           tablat	equ	0xFF5
 22547                           prodh	equ	0xFF4
 22548                           prodl	equ	0xFF3
 22549                           intcon	equ	0xFF2
 22550                           intcon2	equ	0xFF1
 22551                           intcon3	equ	0xFF0
 22552                           indf0	equ	0xFEF
 22553                           postinc0	equ	0xFEE
 22554                           fsr0h	equ	0xFEA
 22555                           fsr0l	equ	0xFE9
 22556                           wreg	equ	0xFE8
 22557                           postdec1	equ	0xFE5
 22558                           fsr1h	equ	0xFE2
 22559                           fsr1l	equ	0xFE1
 22560                           indf2	equ	0xFDF
 22561                           postinc2	equ	0xFDE
 22562                           postdec2	equ	0xFDD
 22563                           fsr2h	equ	0xFDA
 22564                           fsr2l	equ	0xFD9
 22565                           status	equ	0xFD8
 22566                           
 22567 ;; *************** function _change_state_to_logs_22 *****************
 22568 ;; Defined at:
 22569 ;;		line 531 in file "UI.c"
 22570 ;; Parameters:    Size  Location     Type
 22571 ;;		None
 22572 ;; Auto vars:     Size  Location     Type
 22573 ;;		None
 22574 ;; Return value:  Size  Location     Type
 22575 ;;                  1    wreg      void 
 22576 ;; Registers used:
 22577 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22578 ;; Tracked objects:
 22579 ;;		On entry : 0/0
 22580 ;;		On exit  : 0/0
 22581 ;;		Unchanged: 0/0
 22582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22586 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22587 ;;Total ram usage:        0 bytes
 22588 ;; Hardware stack levels used:    1
 22589 ;; Hardware stack levels required when called:    3
 22590 ;; This function calls:
 22591 ;;		i2_lcdInst
 22592 ;;		i2_printf
 22593 ;; This function is called by:
 22594 ;;		_updateMenu
 22595 ;;		_inputHandler
 22596 ;; This function uses a non-reentrant model
 22597 ;;
 22598                           
 22599                           	psect	text79
 22600  005850                     __ptext79:
 22601                           	opt stack 0
 22602  005850                     _change_state_to_logs_22:
 22603                           	opt stack 18
 22604                           
 22605                           ;UI.c: 532: cur_state = 1022;
 22606                           
 22607                           ;incstack = 0
 22608  005850  0E03               	movlw	3
 22609  005852  0100               	movlb	0	; () banked
 22610  005854  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22611  005856  0EFE               	movlw	254
 22612  005858  6FE6               	movwf	_cur_state& (0+255),b
 22613                           
 22614                           ; BSR set to: 0
 22615                           ;UI.c: 533: lcdInst(0b10000000);;
 22616  00585A  0E80               	movlw	128
 22617  00585C  ECD7  F02D         	call	i2_lcdInst
 22618                           
 22619                           ;UI.c: 534: printf("LOG 2          <");
 22620  005860  0E73               	movlw	low STR_42
 22621  005862  6E0D               	movwf	i2printf@f,c
 22622  005864  0EFD               	movlw	high STR_42
 22623  005866  6E0E               	movwf	i2printf@f+1,c
 22624  005868  ECA0  F011         	call	i2_printf	;wreg free
 22625                           
 22626                           ;UI.c: 535: lcdInst(0b11000000);;
 22627  00586C  0EC0               	movlw	192
 22628  00586E  ECD7  F02D         	call	i2_lcdInst
 22629                           
 22630                           ;UI.c: 536: printf("LOG 3           ");
 22631  005872  0EDA               	movlw	low STR_44
 22632  005874  6E0D               	movwf	i2printf@f,c
 22633  005876  0EFC               	movlw	high STR_44
 22634  005878  6E0E               	movwf	i2printf@f+1,c
 22635  00587A  ECA0  F011         	call	i2_printf	;wreg free
 22636  00587E  0012               	return		;funcret
 22637  005880                     __end_of_change_state_to_logs_22:
 22638                           	opt stack 0
 22639                           pclatu	equ	0xFFB
 22640                           pclath	equ	0xFFA
 22641                           tblptru	equ	0xFF8
 22642                           tblptrh	equ	0xFF7
 22643                           tblptrl	equ	0xFF6
 22644                           tablat	equ	0xFF5
 22645                           prodh	equ	0xFF4
 22646                           prodl	equ	0xFF3
 22647                           intcon	equ	0xFF2
 22648                           intcon2	equ	0xFF1
 22649                           intcon3	equ	0xFF0
 22650                           indf0	equ	0xFEF
 22651                           postinc0	equ	0xFEE
 22652                           fsr0h	equ	0xFEA
 22653                           fsr0l	equ	0xFE9
 22654                           wreg	equ	0xFE8
 22655                           postdec1	equ	0xFE5
 22656                           fsr1h	equ	0xFE2
 22657                           fsr1l	equ	0xFE1
 22658                           indf2	equ	0xFDF
 22659                           postinc2	equ	0xFDE
 22660                           postdec2	equ	0xFDD
 22661                           fsr2h	equ	0xFDA
 22662                           fsr2l	equ	0xFD9
 22663                           status	equ	0xFD8
 22664                           
 22665 ;; *************** function _change_state_to_logs_12 *****************
 22666 ;; Defined at:
 22667 ;;		line 524 in file "UI.c"
 22668 ;; Parameters:    Size  Location     Type
 22669 ;;		None
 22670 ;; Auto vars:     Size  Location     Type
 22671 ;;		None
 22672 ;; Return value:  Size  Location     Type
 22673 ;;                  1    wreg      void 
 22674 ;; Registers used:
 22675 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22676 ;; Tracked objects:
 22677 ;;		On entry : 0/0
 22678 ;;		On exit  : 0/0
 22679 ;;		Unchanged: 0/0
 22680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22684 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22685 ;;Total ram usage:        0 bytes
 22686 ;; Hardware stack levels used:    1
 22687 ;; Hardware stack levels required when called:    3
 22688 ;; This function calls:
 22689 ;;		i2_lcdInst
 22690 ;;		i2_printf
 22691 ;; This function is called by:
 22692 ;;		_updateMenu
 22693 ;;		_inputHandler
 22694 ;; This function uses a non-reentrant model
 22695 ;;
 22696                           
 22697                           	psect	text80
 22698  005880                     __ptext80:
 22699                           	opt stack 0
 22700  005880                     _change_state_to_logs_12:
 22701                           	opt stack 18
 22702                           
 22703                           ;UI.c: 525: cur_state = 1012;
 22704                           
 22705                           ;incstack = 0
 22706  005880  0E03               	movlw	3
 22707  005882  0100               	movlb	0	; () banked
 22708  005884  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22709  005886  0EF4               	movlw	244
 22710  005888  6FE6               	movwf	_cur_state& (0+255),b
 22711                           
 22712                           ; BSR set to: 0
 22713                           ;UI.c: 526: lcdInst(0b10000000);;
 22714  00588A  0E80               	movlw	128
 22715  00588C  ECD7  F02D         	call	i2_lcdInst
 22716                           
 22717                           ;UI.c: 527: printf("LOG 1           ");
 22718  005890  0EB8               	movlw	low STR_41
 22719  005892  6E0D               	movwf	i2printf@f,c
 22720  005894  0EFC               	movlw	high STR_41
 22721  005896  6E0E               	movwf	i2printf@f+1,c
 22722  005898  ECA0  F011         	call	i2_printf	;wreg free
 22723                           
 22724                           ;UI.c: 528: lcdInst(0b11000000);;
 22725  00589C  0EC0               	movlw	192
 22726  00589E  ECD7  F02D         	call	i2_lcdInst
 22727                           
 22728                           ;UI.c: 529: printf("LOG 2          <");
 22729  0058A2  0E73               	movlw	low STR_42
 22730  0058A4  6E0D               	movwf	i2printf@f,c
 22731  0058A6  0EFD               	movlw	high STR_42
 22732  0058A8  6E0E               	movwf	i2printf@f+1,c
 22733  0058AA  ECA0  F011         	call	i2_printf	;wreg free
 22734  0058AE  0012               	return		;funcret
 22735  0058B0                     __end_of_change_state_to_logs_12:
 22736                           	opt stack 0
 22737                           pclatu	equ	0xFFB
 22738                           pclath	equ	0xFFA
 22739                           tblptru	equ	0xFF8
 22740                           tblptrh	equ	0xFF7
 22741                           tblptrl	equ	0xFF6
 22742                           tablat	equ	0xFF5
 22743                           prodh	equ	0xFF4
 22744                           prodl	equ	0xFF3
 22745                           intcon	equ	0xFF2
 22746                           intcon2	equ	0xFF1
 22747                           intcon3	equ	0xFF0
 22748                           indf0	equ	0xFEF
 22749                           postinc0	equ	0xFEE
 22750                           fsr0h	equ	0xFEA
 22751                           fsr0l	equ	0xFE9
 22752                           wreg	equ	0xFE8
 22753                           postdec1	equ	0xFE5
 22754                           fsr1h	equ	0xFE2
 22755                           fsr1l	equ	0xFE1
 22756                           indf2	equ	0xFDF
 22757                           postinc2	equ	0xFDE
 22758                           postdec2	equ	0xFDD
 22759                           fsr2h	equ	0xFDA
 22760                           fsr2l	equ	0xFD9
 22761                           status	equ	0xFD8
 22762                           
 22763 ;; *************** function _change_state_to_logs_11 *****************
 22764 ;; Defined at:
 22765 ;;		line 517 in file "UI.c"
 22766 ;; Parameters:    Size  Location     Type
 22767 ;;		None
 22768 ;; Auto vars:     Size  Location     Type
 22769 ;;		None
 22770 ;; Return value:  Size  Location     Type
 22771 ;;                  1    wreg      void 
 22772 ;; Registers used:
 22773 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22774 ;; Tracked objects:
 22775 ;;		On entry : 0/0
 22776 ;;		On exit  : 0/0
 22777 ;;		Unchanged: 0/0
 22778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22782 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22783 ;;Total ram usage:        0 bytes
 22784 ;; Hardware stack levels used:    1
 22785 ;; Hardware stack levels required when called:    3
 22786 ;; This function calls:
 22787 ;;		i2_lcdInst
 22788 ;;		i2_printf
 22789 ;; This function is called by:
 22790 ;;		_updateMenu
 22791 ;;		_inputHandler
 22792 ;; This function uses a non-reentrant model
 22793 ;;
 22794                           
 22795                           	psect	text81
 22796  0058B0                     __ptext81:
 22797                           	opt stack 0
 22798  0058B0                     _change_state_to_logs_11:
 22799                           	opt stack 18
 22800                           
 22801                           ;UI.c: 518: cur_state = 1011;
 22802                           
 22803                           ;incstack = 0
 22804  0058B0  0E03               	movlw	3
 22805  0058B2  0100               	movlb	0	; () banked
 22806  0058B4  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22807  0058B6  0EF3               	movlw	243
 22808  0058B8  6FE6               	movwf	_cur_state& (0+255),b
 22809                           
 22810                           ; BSR set to: 0
 22811                           ;UI.c: 519: lcdInst(0b10000000);;
 22812  0058BA  0E80               	movlw	128
 22813  0058BC  ECD7  F02D         	call	i2_lcdInst
 22814                           
 22815                           ;UI.c: 520: printf("LOG 1          <");
 22816  0058C0  0E62               	movlw	low STR_39
 22817  0058C2  6E0D               	movwf	i2printf@f,c
 22818  0058C4  0EFD               	movlw	high STR_39
 22819  0058C6  6E0E               	movwf	i2printf@f+1,c
 22820  0058C8  ECA0  F011         	call	i2_printf	;wreg free
 22821                           
 22822                           ;UI.c: 521: lcdInst(0b11000000);;
 22823  0058CC  0EC0               	movlw	192
 22824  0058CE  ECD7  F02D         	call	i2_lcdInst
 22825                           
 22826                           ;UI.c: 522: printf("LOG 2           ");
 22827  0058D2  0EC9               	movlw	low STR_40
 22828  0058D4  6E0D               	movwf	i2printf@f,c
 22829  0058D6  0EFC               	movlw	high STR_40
 22830  0058D8  6E0E               	movwf	i2printf@f+1,c
 22831  0058DA  ECA0  F011         	call	i2_printf	;wreg free
 22832  0058DE  0012               	return		;funcret
 22833  0058E0                     __end_of_change_state_to_logs_11:
 22834                           	opt stack 0
 22835                           pclatu	equ	0xFFB
 22836                           pclath	equ	0xFFA
 22837                           tblptru	equ	0xFF8
 22838                           tblptrh	equ	0xFF7
 22839                           tblptrl	equ	0xFF6
 22840                           tablat	equ	0xFF5
 22841                           prodh	equ	0xFF4
 22842                           prodl	equ	0xFF3
 22843                           intcon	equ	0xFF2
 22844                           intcon2	equ	0xFF1
 22845                           intcon3	equ	0xFF0
 22846                           indf0	equ	0xFEF
 22847                           postinc0	equ	0xFEE
 22848                           fsr0h	equ	0xFEA
 22849                           fsr0l	equ	0xFE9
 22850                           wreg	equ	0xFE8
 22851                           postdec1	equ	0xFE5
 22852                           fsr1h	equ	0xFE2
 22853                           fsr1l	equ	0xFE1
 22854                           indf2	equ	0xFDF
 22855                           postinc2	equ	0xFDE
 22856                           postdec2	equ	0xFDD
 22857                           fsr2h	equ	0xFDA
 22858                           fsr2l	equ	0xFD9
 22859                           status	equ	0xFD8
 22860                           
 22861 ;; *************** function _dispLogs *****************
 22862 ;; Defined at:
 22863 ;;		line 470 in file "UI.c"
 22864 ;; Parameters:    Size  Location     Type
 22865 ;;  myLog           2   17[COMRAM] int 
 22866 ;; Auto vars:     Size  Location     Type
 22867 ;;		None
 22868 ;; Return value:  Size  Location     Type
 22869 ;;                  1    wreg      void 
 22870 ;; Registers used:
 22871 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22872 ;; Tracked objects:
 22873 ;;		On entry : 0/0
 22874 ;;		On exit  : 0/0
 22875 ;;		Unchanged: 0/0
 22876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22877 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22880 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22881 ;;Total ram usage:        2 bytes
 22882 ;; Hardware stack levels used:    1
 22883 ;; Hardware stack levels required when called:    2
 22884 ;; This function calls:
 22885 ;;		_retrieveLog
 22886 ;; This function is called by:
 22887 ;;		_updateMenu
 22888 ;; This function uses a non-reentrant model
 22889 ;;
 22890                           
 22891                           	psect	text82
 22892  005A5A                     __ptext82:
 22893                           	opt stack 0
 22894  005A5A                     _dispLogs:
 22895                           	opt stack 20
 22896                           
 22897                           ;UI.c: 471: logstate = 1;
 22898                           
 22899                           ;incstack = 0
 22900  005A5A  0E00               	movlw	0
 22901  005A5C  0100               	movlb	0	; () banked
 22902  005A5E  6FF9               	movwf	(_logstate+1)& (0+255),b
 22903  005A60  0E01               	movlw	1
 22904  005A62  6FF8               	movwf	_logstate& (0+255),b
 22905                           
 22906                           ; BSR set to: 0
 22907                           ;UI.c: 472: log = myLog;
 22908  005A64  C012  F0F0         	movff	dispLogs@myLog,_log
 22909  005A68  C013  F0F1         	movff	dispLogs@myLog+1,_log+1
 22910                           
 22911                           ; BSR set to: 0
 22912                           ;UI.c: 473: retrieveLog(myLog - 1);
 22913  005A6C  0EFF               	movlw	255
 22914  005A6E  2412               	addwf	dispLogs@myLog,w,c
 22915  005A70  6E07               	movwf	retrieveLog@logNum,c
 22916  005A72  0EFF               	movlw	255
 22917  005A74  2013               	addwfc	dispLogs@myLog+1,w,c
 22918  005A76  6E08               	movwf	retrieveLog@logNum+1,c
 22919  005A78  ECF3  F01F         	call	_retrieveLog	;wreg free
 22920  005A7C  0012               	return		;funcret
 22921  005A7E                     __end_of_dispLogs:
 22922                           	opt stack 0
 22923                           pclatu	equ	0xFFB
 22924                           pclath	equ	0xFFA
 22925                           tblptru	equ	0xFF8
 22926                           tblptrh	equ	0xFF7
 22927                           tblptrl	equ	0xFF6
 22928                           tablat	equ	0xFF5
 22929                           prodh	equ	0xFF4
 22930                           prodl	equ	0xFF3
 22931                           intcon	equ	0xFF2
 22932                           intcon2	equ	0xFF1
 22933                           intcon3	equ	0xFF0
 22934                           indf0	equ	0xFEF
 22935                           postinc0	equ	0xFEE
 22936                           fsr0h	equ	0xFEA
 22937                           fsr0l	equ	0xFE9
 22938                           wreg	equ	0xFE8
 22939                           postdec1	equ	0xFE5
 22940                           fsr1h	equ	0xFE2
 22941                           fsr1l	equ	0xFE1
 22942                           indf2	equ	0xFDF
 22943                           postinc2	equ	0xFDE
 22944                           postdec2	equ	0xFDD
 22945                           fsr2h	equ	0xFDA
 22946                           fsr2l	equ	0xFD9
 22947                           status	equ	0xFD8
 22948                           
 22949 ;; *************** function _retrieveLog *****************
 22950 ;; Defined at:
 22951 ;;		line 138 in file "EEPROM.c"
 22952 ;; Parameters:    Size  Location     Type
 22953 ;;  logNum          2    6[COMRAM] int 
 22954 ;; Auto vars:     Size  Location     Type
 22955 ;;  i               2   13[COMRAM] int 
 22956 ;;  addr            2   15[COMRAM] unsigned short 
 22957 ;;  byte3           1   12[COMRAM] unsigned char 
 22958 ;;  byte2           1   11[COMRAM] unsigned char 
 22959 ;;  byte1           1   10[COMRAM] unsigned char 
 22960 ;; Return value:  Size  Location     Type
 22961 ;;                  1    wreg      void 
 22962 ;; Registers used:
 22963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22964 ;; Tracked objects:
 22965 ;;		On entry : 0/0
 22966 ;;		On exit  : 0/0
 22967 ;;		Unchanged: 0/0
 22968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22969 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22970 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22971 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22972 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22973 ;;Total ram usage:       11 bytes
 22974 ;; Hardware stack levels used:    1
 22975 ;; Hardware stack levels required when called:    1
 22976 ;; This function calls:
 22977 ;;		i2_EEPROM_read
 22978 ;;		i2___wmul
 22979 ;; This function is called by:
 22980 ;;		_dispLogs
 22981 ;; This function uses a non-reentrant model
 22982 ;;
 22983                           
 22984                           	psect	text83
 22985  003FE6                     __ptext83:
 22986                           	opt stack 0
 22987  003FE6                     _retrieveLog:
 22988                           	opt stack 20
 22989                           
 22990                           ;EEPROM.c: 144: unsigned short addr = 1 + logNum * 11;
 22991                           
 22992                           ;incstack = 0
 22993  003FE6  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 22994  003FEA  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 22995  003FEE  0E00               	movlw	0
 22996  003FF0  6E04               	movwf	i2___wmul@multiplicand+1,c
 22997  003FF2  0E0B               	movlw	11
 22998  003FF4  6E03               	movwf	i2___wmul@multiplicand,c
 22999  003FF6  EC07  F02D         	call	i2___wmul	;wreg free
 23000  003FFA  0E01               	movlw	1
 23001  003FFC  2401               	addwf	?i2___wmul,w,c
 23002  003FFE  6E10               	movwf	retrieveLog@addr,c
 23003  004000  0E00               	movlw	0
 23004  004002  2002               	addwfc	?i2___wmul+1,w,c
 23005  004004  6E11               	movwf	retrieveLog@addr+1,c
 23006                           
 23007                           ;EEPROM.c: 147: unsigned char byte1 = EEPROM_read(addr);
 23008  004006  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23009  00400A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23010  00400E  ECA3  F02D         	call	i2_EEPROM_read	;wreg free
 23011  004012  6E0B               	movwf	retrieveLog@byte1,c
 23012                           
 23013                           ;EEPROM.c: 148: log_completion = (int)(byte1 & 0b10000000);
 23014  004014  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 23015  004018  0E80               	movlw	128
 23016  00401A  1609               	andwf	??_retrieveLog,f,c
 23017  00401C  5009               	movf	??_retrieveLog,w,c
 23018  00401E  0100               	movlb	0	; () banked
 23019  004020  6FF2               	movwf	_log_completion& (0+255),b
 23020  004022  6BF3               	clrf	(_log_completion+1)& (0+255),b
 23021                           
 23022                           ; BSR set to: 0
 23023                           ;EEPROM.c: 149: log_count_total = (int)(byte1 & 0b00001111);
 23024  004024  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 23025  004028  0E0F               	movlw	15
 23026  00402A  1609               	andwf	??_retrieveLog,f,c
 23027  00402C  5009               	movf	??_retrieveLog,w,c
 23028  00402E  0101               	movlb	1	; () banked
 23029  004030  6F43               	movwf	_log_count_total& (0+255),b
 23030  004032  6B44               	clrf	(_log_count_total+1)& (0+255),b
 23031                           
 23032                           ; BSR set to: 1
 23033                           ;EEPROM.c: 150: addr++;
 23034  004034  4A10               	infsnz	retrieveLog@addr,f,c
 23035  004036  2A11               	incf	retrieveLog@addr+1,f,c
 23036                           
 23037                           ; BSR set to: 1
 23038                           ;EEPROM.c: 153: unsigned char byte2 = EEPROM_read(addr);
 23039  004038  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23040  00403C  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23041  004040  ECA3  F02D         	call	i2_EEPROM_read	;wreg free
 23042  004044  6E0C               	movwf	retrieveLog@byte2,c
 23043                           
 23044                           ;EEPROM.c: 154: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 23045  004046  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23046  00404A  3A09               	swapf	??_retrieveLog,f,c
 23047  00404C  0E0F               	movlw	15
 23048  00404E  1609               	andwf	??_retrieveLog,f,c
 23049  004050  0E0F               	movlw	15
 23050  004052  1609               	andwf	??_retrieveLog,f,c
 23051  004054  5009               	movf	??_retrieveLog,w,c
 23052  004056  0100               	movlb	0	; () banked
 23053  004058  6FF4               	movwf	_log_count_pop_no_tab& (0+255),b
 23054  00405A  6BF5               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 23055                           
 23056                           ; BSR set to: 0
 23057                           ;EEPROM.c: 155: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 23058  00405C  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23059  004060  0E0F               	movlw	15
 23060  004062  1609               	andwf	??_retrieveLog,f,c
 23061  004064  5009               	movf	??_retrieveLog,w,c
 23062  004066  0101               	movlb	1	; () banked
 23063  004068  6F41               	movwf	_log_count_pop_w_tab& (0+255),b
 23064  00406A  6B42               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 23065                           
 23066                           ; BSR set to: 1
 23067                           ;EEPROM.c: 156: addr++;
 23068  00406C  4A10               	infsnz	retrieveLog@addr,f,c
 23069  00406E  2A11               	incf	retrieveLog@addr+1,f,c
 23070                           
 23071                           ; BSR set to: 1
 23072                           ;EEPROM.c: 157: unsigned char byte3 = EEPROM_read(addr);
 23073  004070  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23074  004074  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23075  004078  ECA3  F02D         	call	i2_EEPROM_read	;wreg free
 23076  00407C  6E0D               	movwf	retrieveLog@byte3,c
 23077                           
 23078                           ;EEPROM.c: 158: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 23079  00407E  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23080  004082  3A09               	swapf	??_retrieveLog,f,c
 23081  004084  0E0F               	movlw	15
 23082  004086  1609               	andwf	??_retrieveLog,f,c
 23083  004088  0E0F               	movlw	15
 23084  00408A  1609               	andwf	??_retrieveLog,f,c
 23085  00408C  5009               	movf	??_retrieveLog,w,c
 23086  00408E  0101               	movlb	1	; () banked
 23087  004090  6F3F               	movwf	_log_count_can_w_lab& (0+255),b
 23088  004092  6B40               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 23089                           
 23090                           ; BSR set to: 1
 23091                           ;EEPROM.c: 159: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 23092  004094  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23093  004098  0E0F               	movlw	15
 23094  00409A  1609               	andwf	??_retrieveLog,f,c
 23095  00409C  5009               	movf	??_retrieveLog,w,c
 23096  00409E  0101               	movlb	1	; () banked
 23097  0040A0  6F3D               	movwf	_log_count_can_no_lab& (0+255),b
 23098  0040A2  6B3E               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 23099                           
 23100                           ; BSR set to: 1
 23101                           ;EEPROM.c: 160: addr++;
 23102  0040A4  4A10               	infsnz	retrieveLog@addr,f,c
 23103  0040A6  2A11               	incf	retrieveLog@addr+1,f,c
 23104                           
 23105                           ; BSR set to: 1
 23106                           ;EEPROM.c: 163: for(int i = 0; i < 7; i++){
 23107  0040A8  0E00               	movlw	0
 23108  0040AA  6E0F               	movwf	retrieveLog@i+1,c
 23109  0040AC  0E00               	movlw	0
 23110  0040AE  6E0E               	movwf	retrieveLog@i,c
 23111  0040B0                     i2l7340:
 23112                           
 23113                           ; BSR set to: 1
 23114  0040B0  BE0F               	btfsc	retrieveLog@i+1,7,c
 23115  0040B2  D006               	goto	i2l7344
 23116  0040B4  500F               	movf	retrieveLog@i+1,w,c
 23117  0040B6  E11E               	bnz	i2l7352
 23118  0040B8  0E07               	movlw	7
 23119  0040BA  5C0E               	subwf	retrieveLog@i,w,c
 23120  0040BC  B0D8               	btfsc	status,0,c
 23121  0040BE  D01A               	goto	i2l7352
 23122  0040C0                     i2l7344:
 23123                           
 23124                           ;EEPROM.c: 164: log_startTime[i] = (int)EEPROM_read(addr);
 23125  0040C0  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23126  0040C4  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23127  0040C8  ECA3  F02D         	call	i2_EEPROM_read	;wreg free
 23128  0040CC  6E09               	movwf	??_retrieveLog& (0+255),c
 23129  0040CE  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 23130  0040D0  90D8               	bcf	status,0,c
 23131  0040D2  340E               	rlcf	retrieveLog@i,w,c
 23132  0040D4  6ED9               	movwf	fsr2l,c
 23133  0040D6  340F               	rlcf	retrieveLog@i+1,w,c
 23134  0040D8  6EDA               	movwf	fsr2h,c
 23135  0040DA  0E00               	movlw	low _log_startTime
 23136  0040DC  26D9               	addwf	fsr2l,f,c
 23137  0040DE  0E01               	movlw	high _log_startTime
 23138  0040E0  22DA               	addwfc	fsr2h,f,c
 23139  0040E2  C009  FFDE         	movff	??_retrieveLog,postinc2
 23140  0040E6  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 23141                           
 23142                           ;EEPROM.c: 165: addr++;
 23143  0040EA  4A10               	infsnz	retrieveLog@addr,f,c
 23144  0040EC  2A11               	incf	retrieveLog@addr+1,f,c
 23145  0040EE  4A0E               	infsnz	retrieveLog@i,f,c
 23146  0040F0  2A0F               	incf	retrieveLog@i+1,f,c
 23147  0040F2  D7DE               	goto	i2l7340
 23148  0040F4                     i2l7352:
 23149                           
 23150                           ;EEPROM.c: 166: }
 23151                           ;EEPROM.c: 169: log_total_time = (int)EEPROM_read(addr);
 23152  0040F4  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23153  0040F8  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23154  0040FC  ECA3  F02D         	call	i2_EEPROM_read	;wreg free
 23155  004100  6E09               	movwf	??_retrieveLog& (0+255),c
 23156  004102  5009               	movf	??_retrieveLog,w,c
 23157  004104  0100               	movlb	0	; () banked
 23158  004106  6FF6               	movwf	_log_total_time& (0+255),b
 23159  004108  6BF7               	clrf	(_log_total_time+1)& (0+255),b
 23160                           
 23161                           ; BSR set to: 0
 23162  00410A  0012               	return		;funcret
 23163  00410C                     __end_of_retrieveLog:
 23164                           	opt stack 0
 23165                           pclatu	equ	0xFFB
 23166                           pclath	equ	0xFFA
 23167                           tblptru	equ	0xFF8
 23168                           tblptrh	equ	0xFF7
 23169                           tblptrl	equ	0xFF6
 23170                           tablat	equ	0xFF5
 23171                           prodh	equ	0xFF4
 23172                           prodl	equ	0xFF3
 23173                           intcon	equ	0xFF2
 23174                           intcon2	equ	0xFF1
 23175                           intcon3	equ	0xFF0
 23176                           indf0	equ	0xFEF
 23177                           postinc0	equ	0xFEE
 23178                           fsr0h	equ	0xFEA
 23179                           fsr0l	equ	0xFE9
 23180                           wreg	equ	0xFE8
 23181                           postdec1	equ	0xFE5
 23182                           fsr1h	equ	0xFE2
 23183                           fsr1l	equ	0xFE1
 23184                           indf2	equ	0xFDF
 23185                           postinc2	equ	0xFDE
 23186                           postdec2	equ	0xFDD
 23187                           fsr2h	equ	0xFDA
 23188                           fsr2l	equ	0xFD9
 23189                           status	equ	0xFD8
 23190                           
 23191 ;; *************** function i2_EEPROM_read *****************
 23192 ;; Defined at:
 23193 ;;		line 72 in file "EEPROM.c"
 23194 ;; Parameters:    Size  Location     Type
 23195 ;;  address         2    0[COMRAM] unsigned short 
 23196 ;; Auto vars:     Size  Location     Type
 23197 ;;		None
 23198 ;; Return value:  Size  Location     Type
 23199 ;;                  1    wreg      unsigned char 
 23200 ;; Registers used:
 23201 ;;		wreg, status,2
 23202 ;; Tracked objects:
 23203 ;;		On entry : 0/0
 23204 ;;		On exit  : 0/0
 23205 ;;		Unchanged: 0/0
 23206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23207 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23210 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23211 ;;Total ram usage:        2 bytes
 23212 ;; Hardware stack levels used:    1
 23213 ;; This function calls:
 23214 ;;		Nothing
 23215 ;; This function is called by:
 23216 ;;		_retrieveLog
 23217 ;; This function uses a non-reentrant model
 23218 ;;
 23219                           
 23220                           	psect	text84
 23221  005B46                     __ptext84:
 23222                           	opt stack 0
 23223  005B46                     i2_EEPROM_read:
 23224                           	opt stack 20
 23225                           
 23226                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
 23227                           
 23228                           ; BSR set to: 0
 23229                           ;incstack = 0
 23230  005B46  5002               	movf	i2EEPROM_read@address+1,w,c
 23231  005B48  6EAA               	movwf	4010,c	;volatile
 23232                           
 23233                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
 23234  005B4A  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 23235                           
 23236                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
 23237  005B4E  9EA6               	bcf	4006,7,c	;volatile
 23238                           
 23239                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
 23240  005B50  9CA6               	bcf	4006,6,c	;volatile
 23241                           
 23242                           ;EEPROM.c: 79: EECON1bits.RD = 1;
 23243  005B52  80A6               	bsf	4006,0,c	;volatile
 23244  005B54                     i2l1142:
 23245  005B54  B0A6               	btfsc	4006,0,c	;volatile
 23246  005B56  D7FE               	goto	i2l1142
 23247                           
 23248                           ;EEPROM.c: 85: return EEDATA;
 23249  005B58  50A8               	movf	4008,w,c	;volatile
 23250  005B5A  0012               	return	
 23251  005B5C                     __end_ofi2_EEPROM_read:
 23252                           	opt stack 0
 23253                           pclatu	equ	0xFFB
 23254                           pclath	equ	0xFFA
 23255                           tblptru	equ	0xFF8
 23256                           tblptrh	equ	0xFF7
 23257                           tblptrl	equ	0xFF6
 23258                           tablat	equ	0xFF5
 23259                           prodh	equ	0xFF4
 23260                           prodl	equ	0xFF3
 23261                           intcon	equ	0xFF2
 23262                           intcon2	equ	0xFF1
 23263                           intcon3	equ	0xFF0
 23264                           indf0	equ	0xFEF
 23265                           postinc0	equ	0xFEE
 23266                           fsr0h	equ	0xFEA
 23267                           fsr0l	equ	0xFE9
 23268                           wreg	equ	0xFE8
 23269                           postdec1	equ	0xFE5
 23270                           fsr1h	equ	0xFE2
 23271                           fsr1l	equ	0xFE1
 23272                           indf2	equ	0xFDF
 23273                           postinc2	equ	0xFDE
 23274                           postdec2	equ	0xFDD
 23275                           fsr2h	equ	0xFDA
 23276                           fsr2l	equ	0xFD9
 23277                           status	equ	0xFD8
 23278                           
 23279 ;; *************** function _updateArmState *****************
 23280 ;; Defined at:
 23281 ;;		line 644 in file "sort.c"
 23282 ;; Parameters:    Size  Location     Type
 23283 ;;		None
 23284 ;; Auto vars:     Size  Location     Type
 23285 ;;		None
 23286 ;; Return value:  Size  Location     Type
 23287 ;;                  1    wreg      void 
 23288 ;; Registers used:
 23289 ;;		wreg, status,2, status,0
 23290 ;; Tracked objects:
 23291 ;;		On entry : 0/0
 23292 ;;		On exit  : 0/0
 23293 ;;		Unchanged: 0/0
 23294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23297 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23298 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23299 ;;Total ram usage:        2 bytes
 23300 ;; Hardware stack levels used:    1
 23301 ;; This function calls:
 23302 ;;		Nothing
 23303 ;; This function is called by:
 23304 ;;		_handler
 23305 ;; This function uses a non-reentrant model
 23306 ;;
 23307                           
 23308                           	psect	text85
 23309  005586                     __ptext85:
 23310                           	opt stack 0
 23311  005586                     _updateArmState:
 23312                           	opt stack 23
 23313                           
 23314                           ;sort.c: 651: if(!was_low_2){
 23315                           
 23316                           ;incstack = 0
 23317  005586  5079               	movf	_was_low_2,w,c	;volatile
 23318  005588  107A               	iorwf	_was_low_2+1,w,c	;volatile
 23319  00558A  B4D8               	btfsc	status,2,c
 23320  00558C  D007               	goto	i2l10194
 23321  00558E  D016               	goto	i2l958
 23322  005590                     i2l10188:
 23323                           
 23324                           ;sort.c: 656: PR2 = 0x20;
 23325  005590  0E20               	movlw	32
 23326  005592  6ECB               	movwf	4043,c	;volatile
 23327                           
 23328                           ;sort.c: 657: break;
 23329  005594  0012               	return	
 23330  005596                     i2l10190:
 23331                           
 23332                           ;sort.c: 660: PR2 = 0x40;
 23333  005596  0E40               	movlw	64
 23334  005598  6ECB               	movwf	4043,c	;volatile
 23335                           
 23336                           ;sort.c: 662: }
 23337                           
 23338                           ;sort.c: 661: break;
 23339  00559A  0012               	return	
 23340  00559C                     i2l10194:
 23341  00559C  C0EA  F001         	movff	_f_arm_position,??_updateArmState	;volatile
 23342  0055A0  C0EB  F002         	movff	_f_arm_position+1,??_updateArmState+1	;volatile
 23343                           
 23344                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 23345                           ; Switch size 1, requested type "space"
 23346                           ; Number of cases is 1, Range of values is 0 to 0
 23347                           ; switch strategies available:
 23348                           ; Name         Instructions Cycles
 23349                           ; simple_byte            4     3 (average)
 23350                           ;	Chosen strategy is simple_byte
 23351  0055A4  5002               	movf	??_updateArmState+1,w,c
 23352  0055A6  0A00               	xorlw	0	; case 0
 23353  0055A8  A4D8               	btfss	status,2,c
 23354  0055AA  0012               	return	
 23355                           
 23356                           ; Switch size 1, requested type "space"
 23357                           ; Number of cases is 2, Range of values is 0 to 1
 23358                           ; switch strategies available:
 23359                           ; Name         Instructions Cycles
 23360                           ; simple_byte            7     4 (average)
 23361                           ;	Chosen strategy is simple_byte
 23362  0055AC  5001               	movf	??_updateArmState,w,c
 23363  0055AE  0A00               	xorlw	0	; case 0
 23364  0055B0  B4D8               	btfsc	status,2,c
 23365  0055B2  D7EE               	goto	i2l10188
 23366  0055B4  0A01               	xorlw	1	; case 1
 23367  0055B6  A4D8               	btfss	status,2,c
 23368                           
 23369                           ;sort.c: 663: }
 23370  0055B8  0012               	return	
 23371  0055BA  D7ED               	goto	i2l10190
 23372  0055BC                     i2l958:
 23373                           
 23374                           ;sort.c: 664: else{
 23375                           ;sort.c: 666: PR2 = 0xFF;
 23376  0055BC  68CB               	setf	4043,c	;volatile
 23377  0055BE  0012               	return	
 23378  0055C0                     __end_of_updateArmState:
 23379                           	opt stack 0
 23380                           pclatu	equ	0xFFB
 23381                           pclath	equ	0xFFA
 23382                           tblptru	equ	0xFF8
 23383                           tblptrh	equ	0xFF7
 23384                           tblptrl	equ	0xFF6
 23385                           tablat	equ	0xFF5
 23386                           prodh	equ	0xFF4
 23387                           prodl	equ	0xFF3
 23388                           intcon	equ	0xFF2
 23389                           intcon2	equ	0xFF1
 23390                           intcon3	equ	0xFF0
 23391                           indf0	equ	0xFEF
 23392                           postinc0	equ	0xFEE
 23393                           fsr0h	equ	0xFEA
 23394                           fsr0l	equ	0xFE9
 23395                           wreg	equ	0xFE8
 23396                           postdec1	equ	0xFE5
 23397                           fsr1h	equ	0xFE2
 23398                           fsr1l	equ	0xFE1
 23399                           indf2	equ	0xFDF
 23400                           postinc2	equ	0xFDE
 23401                           postdec2	equ	0xFDD
 23402                           fsr2h	equ	0xFDA
 23403                           fsr2l	equ	0xFD9
 23404                           status	equ	0xFD8
 23405                           
 23406 ;; *************** function _printSortTimer *****************
 23407 ;; Defined at:
 23408 ;;		line 489 in file "sort.c"
 23409 ;; Parameters:    Size  Location     Type
 23410 ;;		None
 23411 ;; Auto vars:     Size  Location     Type
 23412 ;;  i               2   70[COMRAM] int 
 23413 ;;  i               2   72[COMRAM] int 
 23414 ;;  curTime        14   44[COMRAM] int [7]
 23415 ;;  timeDiff        2   68[COMRAM] unsigned int 
 23416 ;;  sec             2   64[COMRAM] int 
 23417 ;;  min             2   62[COMRAM] int 
 23418 ;;  cur_sec         2   60[COMRAM] unsigned int 
 23419 ;;  start_sec       2   58[COMRAM] unsigned int 
 23420 ;; Return value:  Size  Location     Type
 23421 ;;                  1    wreg      void 
 23422 ;; Registers used:
 23423 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23424 ;; Tracked objects:
 23425 ;;		On entry : 0/0
 23426 ;;		On exit  : 0/0
 23427 ;;		Unchanged: 0/0
 23428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23430 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23431 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23432 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23433 ;;Total ram usage:       33 bytes
 23434 ;; Hardware stack levels used:    1
 23435 ;; Hardware stack levels required when called:    3
 23436 ;; This function calls:
 23437 ;;		i2___awmod
 23438 ;;		i2___lwdiv
 23439 ;;		i2___lwmod
 23440 ;;		i2___wmul
 23441 ;;		i2_delay_ms
 23442 ;;		i2_getRTC
 23443 ;;		i2_lcdInst
 23444 ;;		i2_printf
 23445 ;; This function is called by:
 23446 ;;		_handler
 23447 ;; This function uses a non-reentrant model
 23448 ;;
 23449                           
 23450                           	psect	text86
 23451  00324C                     __ptext86:
 23452                           	opt stack 0
 23453  00324C                     _printSortTimer:
 23454                           	opt stack 20
 23455                           
 23456                           ;sort.c: 490: getRTC();
 23457                           
 23458                           ;incstack = 0
 23459  00324C  ECA4  F027         	call	i2_getRTC	;wreg free
 23460                           
 23461                           ;sort.c: 491: int curTime[7];
 23462                           ;sort.c: 492: for(int i = 0; i < 7; i++){
 23463  003250  0E00               	movlw	0
 23464  003252  6E4A               	movwf	printSortTimer@i+1,c
 23465  003254  0E00               	movlw	0
 23466  003256  6E49               	movwf	printSortTimer@i,c
 23467  003258                     i2l10028:
 23468  003258  BE4A               	btfsc	printSortTimer@i+1,7,c
 23469  00325A  D006               	goto	i2l10032
 23470  00325C  504A               	movf	printSortTimer@i+1,w,c
 23471  00325E  E131               	bnz	i2l10038
 23472  003260  0E07               	movlw	7
 23473  003262  5C49               	subwf	printSortTimer@i,w,c
 23474  003264  B0D8               	btfsc	status,0,c
 23475  003266  D02D               	goto	i2l10038
 23476  003268                     i2l10032:
 23477                           
 23478                           ;sort.c: 493: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 23479  003268  0E1C               	movlw	low _time
 23480  00326A  2449               	addwf	printSortTimer@i,w,c
 23481  00326C  6ED9               	movwf	fsr2l,c
 23482  00326E  0E01               	movlw	high _time
 23483  003270  204A               	addwfc	printSortTimer@i+1,w,c
 23484  003272  6EDA               	movwf	fsr2h,c
 23485  003274  50DF               	movf	indf2,w,c
 23486  003276  6E2A               	movwf	??_printSortTimer& (0+255),c
 23487  003278  3A2A               	swapf	??_printSortTimer,f,c
 23488  00327A  0E0F               	movlw	15
 23489  00327C  162A               	andwf	??_printSortTimer,f,c
 23490  00327E  0E0F               	movlw	15
 23491  003280  162A               	andwf	??_printSortTimer,f,c
 23492  003282  502A               	movf	??_printSortTimer,w,c
 23493  003284  0D0A               	mullw	10
 23494  003286  0E1C               	movlw	low _time
 23495  003288  2449               	addwf	printSortTimer@i,w,c
 23496  00328A  6ED9               	movwf	fsr2l,c
 23497  00328C  0E01               	movlw	high _time
 23498  00328E  204A               	addwfc	printSortTimer@i+1,w,c
 23499  003290  6EDA               	movwf	fsr2h,c
 23500  003292  50DF               	movf	indf2,w,c
 23501  003294  0B0F               	andlw	15
 23502  003296  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 23503  003298  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 23504  00329A  50F3               	movf	prodl,w,c
 23505  00329C  262B               	addwf	??_printSortTimer+1,f,c
 23506  00329E  50F4               	movf	prodh,w,c
 23507  0032A0  222C               	addwfc	??_printSortTimer+2,f,c
 23508  0032A2  90D8               	bcf	status,0,c
 23509  0032A4  3449               	rlcf	printSortTimer@i,w,c
 23510  0032A6  6ED9               	movwf	fsr2l,c
 23511  0032A8  344A               	rlcf	printSortTimer@i+1,w,c
 23512  0032AA  6EDA               	movwf	fsr2h,c
 23513  0032AC  0E2D               	movlw	low printSortTimer@curTime
 23514  0032AE  26D9               	addwf	fsr2l,f,c
 23515  0032B0  0E00               	movlw	high printSortTimer@curTime
 23516  0032B2  22DA               	addwfc	fsr2h,f,c
 23517  0032B4  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 23518  0032B8  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 23519  0032BC  4A49               	infsnz	printSortTimer@i,f,c
 23520  0032BE  2A4A               	incf	printSortTimer@i+1,f,c
 23521  0032C0  D7CB               	goto	i2l10028
 23522  0032C2                     i2l10038:
 23523                           
 23524                           ;sort.c: 494: }
 23525                           ;sort.c: 495: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 23526  0032C2  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 23527  0032C6  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 23528  0032CA  0E00               	movlw	0
 23529  0032CC  6E04               	movwf	i2___wmul@multiplicand+1,c
 23530  0032CE  0E3C               	movlw	60
 23531  0032D0  6E03               	movwf	i2___wmul@multiplicand,c
 23532  0032D2  EC07  F02D         	call	i2___wmul	;wreg free
 23533  0032D6  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 23534  0032DA  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 23535  0032DE  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 23536  0032E2  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 23537  0032E6  0E0E               	movlw	14
 23538  0032E8  6E04               	movwf	i2___wmul@multiplicand+1,c
 23539  0032EA  0E10               	movlw	16
 23540  0032EC  6E03               	movwf	i2___wmul@multiplicand,c
 23541  0032EE  EC07  F02D         	call	i2___wmul	;wreg free
 23542  0032F2  5001               	movf	?i2___wmul,w,c
 23543  0032F4  262A               	addwf	??_printSortTimer,f,c
 23544  0032F6  5002               	movf	?i2___wmul+1,w,c
 23545  0032F8  222B               	addwfc	??_printSortTimer+1,f,c
 23546  0032FA  0101               	movlb	1	; () banked
 23547  0032FC  510E               	movf	_startTime& (0+255),w,b
 23548  0032FE  242A               	addwf	??_printSortTimer,w,c
 23549  003300  6E3B               	movwf	printSortTimer@start_sec,c
 23550  003302  0101               	movlb	1	; () banked
 23551  003304  510F               	movf	(_startTime+1)& (0+255),w,b
 23552  003306  202B               	addwfc	??_printSortTimer+1,w,c
 23553  003308  6E3C               	movwf	printSortTimer@start_sec+1,c
 23554                           
 23555                           ;sort.c: 496: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 23556  00330A  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 23557  00330E  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 23558  003312  0E00               	movlw	0
 23559  003314  6E04               	movwf	i2___wmul@multiplicand+1,c
 23560  003316  0E3C               	movlw	60
 23561  003318  6E03               	movwf	i2___wmul@multiplicand,c
 23562  00331A  EC07  F02D         	call	i2___wmul	;wreg free
 23563  00331E  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 23564  003322  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 23565  003326  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 23566  00332A  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 23567  00332E  0E0E               	movlw	14
 23568  003330  6E04               	movwf	i2___wmul@multiplicand+1,c
 23569  003332  0E10               	movlw	16
 23570  003334  6E03               	movwf	i2___wmul@multiplicand,c
 23571  003336  EC07  F02D         	call	i2___wmul	;wreg free
 23572  00333A  5001               	movf	?i2___wmul,w,c
 23573  00333C  262A               	addwf	??_printSortTimer,f,c
 23574  00333E  5002               	movf	?i2___wmul+1,w,c
 23575  003340  222B               	addwfc	??_printSortTimer+1,f,c
 23576  003342  502D               	movf	printSortTimer@curTime,w,c
 23577  003344  242A               	addwf	??_printSortTimer,w,c
 23578  003346  6E3D               	movwf	printSortTimer@cur_sec,c
 23579  003348  502E               	movf	printSortTimer@curTime+1,w,c
 23580  00334A  202B               	addwfc	??_printSortTimer+1,w,c
 23581  00334C  6E3E               	movwf	printSortTimer@cur_sec+1,c
 23582                           
 23583                           ;sort.c: 497: unsigned int timeDiff = cur_sec - start_sec;
 23584  00334E  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 23585  003352  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 23586  003356  1E2A               	comf	??_printSortTimer,f,c
 23587  003358  1E2B               	comf	??_printSortTimer+1,f,c
 23588  00335A  4A2A               	infsnz	??_printSortTimer,f,c
 23589  00335C  2A2B               	incf	??_printSortTimer+1,f,c
 23590  00335E  503D               	movf	printSortTimer@cur_sec,w,c
 23591  003360  242A               	addwf	??_printSortTimer,w,c
 23592  003362  6E45               	movwf	printSortTimer@timeDiff,c
 23593  003364  503E               	movf	printSortTimer@cur_sec+1,w,c
 23594  003366  202B               	addwfc	??_printSortTimer+1,w,c
 23595  003368  6E46               	movwf	printSortTimer@timeDiff+1,c
 23596                           
 23597                           ;sort.c: 499: total_time = timeDiff;
 23598  00336A  C045  F0FA         	movff	printSortTimer@timeDiff,_total_time
 23599  00336E  C046  F0FB         	movff	printSortTimer@timeDiff+1,_total_time+1
 23600                           
 23601                           ;sort.c: 501: if(f_most_recent_sort_time){
 23602  003372  0101               	movlb	1	; () banked
 23603  003374  5135               	movf	_f_most_recent_sort_time& (0+255),w,b
 23604  003376  0101               	movlb	1	; () banked
 23605  003378  1136               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 23606  00337A  B4D8               	btfsc	status,2,c
 23607  00337C  D009               	goto	i2l10050
 23608                           
 23609                           ; BSR set to: 1
 23610                           ;sort.c: 502: most_recent_sort_time = total_time;
 23611  00337E  C0FA  F145         	movff	_total_time,_most_recent_sort_time
 23612  003382  C0FB  F146         	movff	_total_time+1,_most_recent_sort_time+1
 23613                           
 23614                           ; BSR set to: 1
 23615                           ;sort.c: 503: f_most_recent_sort_time = 0;
 23616  003386  0E00               	movlw	0
 23617  003388  0101               	movlb	1	; () banked
 23618  00338A  6F36               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 23619  00338C  0E00               	movlw	0
 23620  00338E  6F35               	movwf	_f_most_recent_sort_time& (0+255),b
 23621  003390                     i2l10050:
 23622                           
 23623                           ; BSR set to: 1
 23624                           ;sort.c: 504: }
 23625                           ;sort.c: 506: if((total_time >= 20) && (total_time % 20 == 0)){
 23626  003390  0100               	movlb	0	; () banked
 23627  003392  BFFB               	btfsc	(_total_time+1)& (0+255),7,b
 23628  003394  D04D               	goto	i2l10072
 23629  003396  0100               	movlb	0	; () banked
 23630  003398  51FB               	movf	(_total_time+1)& (0+255),w,b
 23631  00339A  E105               	bnz	i2u955_40
 23632  00339C  0E14               	movlw	20
 23633  00339E  0100               	movlb	0	; () banked
 23634  0033A0  5DFA               	subwf	_total_time& (0+255),w,b
 23635  0033A2  A0D8               	btfss	status,0,c
 23636  0033A4  D045               	goto	i2l10072
 23637  0033A6                     i2u955_40:
 23638                           
 23639                           ; BSR set to: 0
 23640  0033A6  C0FA  F001         	movff	_total_time,i2___awmod@dividend
 23641  0033AA  C0FB  F002         	movff	_total_time+1,i2___awmod@dividend+1
 23642  0033AE  0E00               	movlw	0
 23643  0033B0  6E04               	movwf	i2___awmod@divisor+1,c
 23644  0033B2  0E14               	movlw	20
 23645  0033B4  6E03               	movwf	i2___awmod@divisor,c
 23646  0033B6  ECDD  F027         	call	i2___awmod	;wreg free
 23647  0033BA  5001               	movf	?i2___awmod,w,c
 23648  0033BC  1002               	iorwf	?i2___awmod+1,w,c
 23649  0033BE  A4D8               	btfss	status,2,c
 23650  0033C0  D037               	goto	i2l10072
 23651                           
 23652                           ;sort.c: 507: if(LATBbits.LATB2){
 23653  0033C2  A48A               	btfss	3978,2,c	;volatile
 23654  0033C4  D00F               	goto	i2l10058
 23655                           
 23656                           ;sort.c: 509: LATBbits.LATB2 = ~LATBbits.LATB2;
 23657  0033C6  A48A               	btfss	3978,2,c	;volatile
 23658  0033C8  D002               	goto	i2u958_40
 23659  0033CA  0E01               	movlw	1
 23660  0033CC  D001               	goto	i2u958_46
 23661  0033CE                     i2u958_40:
 23662  0033CE  0E00               	movlw	0
 23663  0033D0                     i2u958_46:
 23664  0033D0  0AFF               	xorlw	255
 23665  0033D2  6E2A               	movwf	??_printSortTimer& (0+255),c
 23666  0033D4  462A               	rlncf	??_printSortTimer,f,c
 23667  0033D6  462A               	rlncf	??_printSortTimer,f,c
 23668  0033D8  508A               	movf	3978,w,c	;volatile
 23669  0033DA  182A               	xorwf	??_printSortTimer,w,c
 23670  0033DC  0BFB               	andlw	-5
 23671  0033DE  182A               	xorwf	??_printSortTimer,w,c
 23672  0033E0  6E8A               	movwf	3978,c	;volatile
 23673                           
 23674                           ;sort.c: 510: }
 23675  0033E2  D026               	goto	i2l10072
 23676  0033E4                     i2l10058:
 23677                           
 23678                           ;sort.c: 511: else{
 23679                           ;sort.c: 513: for(int i=0; i<46; i++){
 23680  0033E4  0E00               	movlw	0
 23681  0033E6  6E48               	movwf	printSortTimer@i_1163+1,c
 23682  0033E8  0E00               	movlw	0
 23683  0033EA  6E47               	movwf	printSortTimer@i_1163,c
 23684  0033EC  BE48               	btfsc	printSortTimer@i_1163+1,7,c
 23685  0033EE  D006               	goto	i2l10064
 23686  0033F0  5048               	movf	printSortTimer@i_1163+1,w,c
 23687  0033F2  E11D               	bnz	i2l910
 23688  0033F4  0E2E               	movlw	46
 23689  0033F6  5C47               	subwf	printSortTimer@i_1163,w,c
 23690  0033F8  B0D8               	btfsc	status,0,c
 23691  0033FA  D019               	goto	i2l910
 23692  0033FC                     i2l10064:
 23693                           
 23694                           ;sort.c: 514: LATBbits.LATB2 = !LATBbits.LATB2;
 23695  0033FC  B48A               	btfsc	3978,2,c	;volatile
 23696  0033FE  D003               	goto	i2u960_40
 23697  003400  6A2A               	clrf	??_printSortTimer& (0+255),c
 23698  003402  2A2A               	incf	??_printSortTimer& (0+255),f,c
 23699  003404  D001               	goto	i2u961_48
 23700  003406                     i2u960_40:
 23701  003406  6A2A               	clrf	??_printSortTimer& (0+255),c
 23702  003408                     i2u961_48:
 23703  003408  462A               	rlncf	??_printSortTimer,f,c
 23704  00340A  462A               	rlncf	??_printSortTimer,f,c
 23705  00340C  508A               	movf	3978,w,c	;volatile
 23706  00340E  182A               	xorwf	??_printSortTimer,w,c
 23707  003410  0BFB               	andlw	-5
 23708  003412  182A               	xorwf	??_printSortTimer,w,c
 23709  003414  6E8A               	movwf	3978,c	;volatile
 23710                           
 23711                           ;sort.c: 515: delay_ms(45-i);
 23712  003416  5047               	movf	printSortTimer@i_1163,w,c
 23713  003418  0800               	sublw	0
 23714  00341A  0F2D               	addlw	45
 23715  00341C  EC7E  F02D         	call	i2_delay_ms
 23716  003420  4A47               	infsnz	printSortTimer@i_1163,f,c
 23717  003422  2A48               	incf	printSortTimer@i_1163+1,f,c
 23718  003424  BE48               	btfsc	printSortTimer@i_1163+1,7,c
 23719  003426  D7EA               	goto	i2l10064
 23720  003428  5048               	movf	printSortTimer@i_1163+1,w,c
 23721  00342A  E101               	bnz	i2u962_40
 23722  00342C  D7E3               	goto	L17
 23723  00342E                     i2u962_40:
 23724  00342E                     i2l910:
 23725                           
 23726                           ;sort.c: 516: }
 23727                           ;sort.c: 517: LATBbits.LATB2 = 1;
 23728  00342E  848A               	bsf	3978,2,c	;volatile
 23729  003430                     i2l10072:
 23730                           
 23731                           ;sort.c: 518: }
 23732                           ;sort.c: 519: }
 23733                           ;sort.c: 521: if((total_time - most_recent_sort_time == 42) || (total_time == 179)){
 23734  003430  C145  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 23735  003434  C146  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 23736  003438  1E2A               	comf	??_printSortTimer,f,c
 23737  00343A  1E2B               	comf	??_printSortTimer+1,f,c
 23738  00343C  4A2A               	infsnz	??_printSortTimer,f,c
 23739  00343E  2A2B               	incf	??_printSortTimer+1,f,c
 23740  003440  0100               	movlb	0	; () banked
 23741  003442  51FA               	movf	_total_time& (0+255),w,b
 23742  003444  262A               	addwf	??_printSortTimer,f,c
 23743  003446  0100               	movlb	0	; () banked
 23744  003448  51FB               	movf	(_total_time+1)& (0+255),w,b
 23745  00344A  222B               	addwfc	??_printSortTimer+1,f,c
 23746  00344C  0E2A               	movlw	42
 23747  00344E  182A               	xorwf	??_printSortTimer,w,c
 23748  003450  102B               	iorwf	??_printSortTimer+1,w,c
 23749  003452  B4D8               	btfsc	status,2,c
 23750  003454  D007               	goto	i2l10076
 23751                           
 23752                           ; BSR set to: 0
 23753  003456  0EB3               	movlw	179
 23754  003458  0100               	movlb	0	; () banked
 23755  00345A  19FA               	xorwf	_total_time& (0+255),w,b
 23756  00345C  0100               	movlb	0	; () banked
 23757  00345E  11FB               	iorwf	(_total_time+1)& (0+255),w,b
 23758  003460  A4D8               	btfss	status,2,c
 23759  003462  D003               	goto	i2l10078
 23760  003464                     i2l10076:
 23761                           
 23762                           ; BSR set to: 0
 23763                           ;sort.c: 522: machine_state = DoneSorting_state;
 23764  003464  0E02               	movlw	2
 23765  003466  0100               	movlb	0	; () banked
 23766  003468  6FFC               	movwf	_machine_state& (0+255),b
 23767  00346A                     i2l10078:
 23768                           
 23769                           ; BSR set to: 0
 23770                           ;sort.c: 524: }
 23771                           ;sort.c: 526: int min = (timeDiff % 3600) / 60;
 23772  00346A  0E0E               	movlw	14
 23773  00346C  6E04               	movwf	i2___lwmod@divisor+1,c
 23774  00346E  0E10               	movlw	16
 23775  003470  6E03               	movwf	i2___lwmod@divisor,c
 23776  003472  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 23777  003476  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 23778  00347A  ECA2  F02A         	call	i2___lwmod	;wreg free
 23779  00347E  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 23780  003482  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 23781  003486  0E00               	movlw	0
 23782  003488  6E09               	movwf	i2___lwdiv@divisor+1,c
 23783  00348A  0E3C               	movlw	60
 23784  00348C  6E08               	movwf	i2___lwdiv@divisor,c
 23785  00348E  EC9B  F029         	call	i2___lwdiv	;wreg free
 23786  003492  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 23787  003496  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 23788                           
 23789                           ;sort.c: 527: int sec = (timeDiff % 3600) % 60;
 23790  00349A  0E0E               	movlw	14
 23791  00349C  6E04               	movwf	i2___lwmod@divisor+1,c
 23792  00349E  0E10               	movlw	16
 23793  0034A0  6E03               	movwf	i2___lwmod@divisor,c
 23794  0034A2  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 23795  0034A6  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 23796  0034AA  ECA2  F02A         	call	i2___lwmod	;wreg free
 23797  0034AE  C001  F043         	movff	?i2___lwmod,_printSortTimer$2573
 23798  0034B2  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2573+1
 23799                           
 23800                           ;sort.c: 527: int sec = (timeDiff % 3600) % 60;
 23801  0034B6  C043  F001         	movff	_printSortTimer$2573,i2___lwmod@dividend
 23802  0034BA  C044  F002         	movff	_printSortTimer$2573+1,i2___lwmod@dividend+1
 23803  0034BE  0E00               	movlw	0
 23804  0034C0  6E04               	movwf	i2___lwmod@divisor+1,c
 23805  0034C2  0E3C               	movlw	60
 23806  0034C4  6E03               	movwf	i2___lwmod@divisor,c
 23807  0034C6  ECA2  F02A         	call	i2___lwmod	;wreg free
 23808  0034CA  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 23809  0034CE  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 23810                           
 23811                           ;sort.c: 529: lcdInst(0b10000000);;
 23812  0034D2  0E80               	movlw	128
 23813  0034D4  ECD7  F02D         	call	i2_lcdInst
 23814                           
 23815                           ;sort.c: 530: printf("SORTING...     ");
 23816  0034D8  0E3D               	movlw	low STR_65
 23817  0034DA  6E0D               	movwf	i2printf@f,c
 23818  0034DC  0EFE               	movlw	high STR_65
 23819  0034DE  6E0E               	movwf	i2printf@f+1,c
 23820  0034E0  ECA0  F011         	call	i2_printf	;wreg free
 23821                           
 23822                           ;sort.c: 531: lcdInst(0b11000000);;
 23823  0034E4  0EC0               	movlw	192
 23824  0034E6  ECD7  F02D         	call	i2_lcdInst
 23825                           
 23826                           ;sort.c: 532: printf("TIME %d:%02d   ", min, sec);
 23827  0034EA  0E4D               	movlw	low STR_66
 23828  0034EC  6E0D               	movwf	i2printf@f,c
 23829  0034EE  0EFE               	movlw	high STR_66
 23830  0034F0  6E0E               	movwf	i2printf@f+1,c
 23831  0034F2  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 23832  0034F6  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 23833  0034FA  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 23834  0034FE  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 23835  003502  ECA0  F011         	call	i2_printf	;wreg free
 23836  003506  0012               	return		;funcret
 23837  003508                     __end_of_printSortTimer:
 23838                           	opt stack 0
 23839                           pclatu	equ	0xFFB
 23840                           pclath	equ	0xFFA
 23841                           tblptru	equ	0xFF8
 23842                           tblptrh	equ	0xFF7
 23843                           tblptrl	equ	0xFF6
 23844                           tablat	equ	0xFF5
 23845                           prodh	equ	0xFF4
 23846                           prodl	equ	0xFF3
 23847                           intcon	equ	0xFF2
 23848                           intcon2	equ	0xFF1
 23849                           intcon3	equ	0xFF0
 23850                           indf0	equ	0xFEF
 23851                           postinc0	equ	0xFEE
 23852                           fsr0h	equ	0xFEA
 23853                           fsr0l	equ	0xFE9
 23854                           wreg	equ	0xFE8
 23855                           postdec1	equ	0xFE5
 23856                           fsr1h	equ	0xFE2
 23857                           fsr1l	equ	0xFE1
 23858                           indf2	equ	0xFDF
 23859                           postinc2	equ	0xFDE
 23860                           postdec2	equ	0xFDD
 23861                           fsr2h	equ	0xFDA
 23862                           fsr2l	equ	0xFD9
 23863                           status	equ	0xFD8
 23864                           
 23865 ;; *************** function i2_printf *****************
 23866 ;; Defined at:
 23867 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 23868 ;; Parameters:    Size  Location     Type
 23869 ;;  f               2   12[COMRAM] PTR const unsigned char 
 23870 ;;		 -> STR_130(18), STR_129(18), STR_128(17), STR_127(17), 
 23871 ;;		 -> STR_126(15), STR_125(15), STR_124(18), STR_123(15), 
 23872 ;;		 -> STR_122(18), STR_121(18), STR_120(17), STR_119(17), 
 23873 ;;		 -> STR_118(17), STR_117(17), STR_116(17), STR_115(17), 
 23874 ;;		 -> STR_114(17), STR_113(17), STR_112(18), STR_111(17), 
 23875 ;;		 -> STR_110(15), STR_109(15), STR_108(15), STR_107(17), 
 23876 ;;		 -> STR_106(17), STR_105(17), STR_104(16), STR_103(17), 
 23877 ;;		 -> STR_102(17), STR_101(17), STR_100(17), STR_99(17), 
 23878 ;;		 -> STR_98(17), STR_97(15), STR_96(11), STR_95(17), 
 23879 ;;		 -> STR_94(11), STR_93(17), STR_92(14), STR_91(15), 
 23880 ;;		 -> STR_90(14), STR_89(10), STR_88(9), STR_87(9), 
 23881 ;;		 -> STR_86(10), STR_85(10), STR_84(16), STR_83(15), 
 23882 ;;		 -> STR_82(3), STR_81(15), STR_80(13), STR_79(14), 
 23883 ;;		 -> STR_78(8), STR_77(14), STR_76(15), STR_75(12), 
 23884 ;;		 -> STR_74(14), STR_73(17), STR_72(14), STR_71(15), 
 23885 ;;		 -> STR_70(17), STR_69(17), STR_68(7), STR_67(21), 
 23886 ;;		 -> STR_66(16), STR_65(16), STR_64(19), STR_63(24), 
 23887 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 23888 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 23889 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 23890 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 23891 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 23892 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(17), 
 23893 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(14), 
 23894 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 23895 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 23896 ;;		 -> STR_1(18), 
 23897 ;; Auto vars:     Size  Location     Type
 23898 ;;  printf          4    0        struct .
 23899 ;;  printf          2   39[COMRAM] int 
 23900 ;;  printf          2   35[COMRAM] unsigned int 
 23901 ;;  printf          2   33[COMRAM] unsigned int 
 23902 ;;  printf          2   31[COMRAM] PTR void [1]
 23903 ;;		 -> ?i2_printf(2), ?_printf(2), 
 23904 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 23905 ;;		 -> STR_131(7), ID@res2(2), ID@res1(2), count_total(2), 
 23906 ;;		 -> printRTC@month(4), UI@month(4), 
 23907 ;;  printf          1   38[COMRAM] char 
 23908 ;;  printf          1   37[COMRAM] unsigned char 
 23909 ;;  printf          1   28[COMRAM] char 
 23910 ;; Return value:  Size  Location     Type
 23911 ;;                  2   12[COMRAM] int 
 23912 ;; Registers used:
 23913 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23914 ;; Tracked objects:
 23915 ;;		On entry : 0/0
 23916 ;;		On exit  : 0/0
 23917 ;;		Unchanged: 0/0
 23918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23919 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23920 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23921 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23922 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23923 ;;Total ram usage:       29 bytes
 23924 ;; Hardware stack levels used:    1
 23925 ;; Hardware stack levels required when called:    2
 23926 ;; This function calls:
 23927 ;;		i2___lwdiv
 23928 ;;		i2___lwmod
 23929 ;;		i2___wmul
 23930 ;;		i2_isdigit
 23931 ;;		i2_putch
 23932 ;; This function is called by:
 23933 ;;		_change_state_to_menu_11
 23934 ;;		_change_state_to_menu_23
 23935 ;;		_change_state_to_logs_11
 23936 ;;		_change_state_to_logs_12
 23937 ;;		_change_state_to_logs_22
 23938 ;;		_change_state_to_logs_23
 23939 ;;		_change_state_to_logs_33
 23940 ;;		_change_state_to_logs_34
 23941 ;;		_printSortTimer
 23942 ;;		i2_change_state_to_menu_start
 23943 ;;		i2_change_state_to_menu_12
 23944 ;;		i2_change_state_to_menu_22
 23945 ;;		i2_printRTC
 23946 ;; This function uses a non-reentrant model
 23947 ;;
 23948                           
 23949                           	psect	text87
 23950  002340                     __ptext87:
 23951                           	opt stack 0
 23952  002340                     i2_printf:
 23953                           	opt stack 20
 23954                           
 23955                           ;doprnt.c: 466: va_list ap;
 23956                           ;doprnt.c: 499: signed char c;
 23957                           ;doprnt.c: 501: int width;
 23958                           ;doprnt.c: 506: signed char prec;
 23959                           ;doprnt.c: 508: unsigned char flag;
 23960                           ;doprnt.c: 523: union {
 23961                           ;doprnt.c: 524: unsigned long vd;
 23962                           ;doprnt.c: 525: double integ;
 23963                           ;doprnt.c: 526: } tmpval;
 23964                           ;doprnt.c: 528: unsigned int val;
 23965                           ;doprnt.c: 529: unsigned len;
 23966                           ;doprnt.c: 530: const char * cp;
 23967                           ;doprnt.c: 533: *ap = __va_start();
 23968                           
 23969                           ;incstack = 0
 23970  002340  0E0F               	movlw	low (?i2_printf+2)
 23971  002342  6E20               	movwf	i2printf@ap,c
 23972  002344  0E00               	movlw	high (?i2_printf+2)
 23973  002346  6E21               	movwf	i2printf@ap+1,c
 23974                           
 23975                           ;doprnt.c: 536: while(c = *f++) {
 23976  002348  D1A4               	goto	i2l7158
 23977  00234A                     i2l7028:
 23978                           
 23979                           ;doprnt.c: 538: if(c != '%')
 23980  00234A  0E25               	movlw	37
 23981  00234C  1827               	xorwf	i2printf@c,w,c
 23982  00234E  B4D8               	btfsc	status,2,c
 23983  002350  D004               	goto	i2l7032
 23984                           
 23985                           ;doprnt.c: 540: {
 23986                           ;doprnt.c: 541: (putch(c) );
 23987  002352  5027               	movf	i2printf@c,w,c
 23988  002354  ECD1  F02D         	call	i2_putch
 23989                           
 23990                           ;doprnt.c: 542: continue;
 23991  002358  D19C               	goto	i2l7158
 23992  00235A                     i2l7032:
 23993                           
 23994                           ;doprnt.c: 543: }
 23995                           ;doprnt.c: 546: width = 0;
 23996  00235A  0E00               	movlw	0
 23997  00235C  6E29               	movwf	i2printf@width+1,c
 23998  00235E  0E00               	movlw	0
 23999  002360  6E28               	movwf	i2printf@width,c
 24000                           
 24001                           ;doprnt.c: 548: flag = 0;
 24002  002362  0E00               	movlw	0
 24003  002364  6E26               	movwf	i2printf@flag,c
 24004                           
 24005                           ;doprnt.c: 551: switch(*f) {
 24006                           
 24007                           ;doprnt.c: 550: for(;;) {
 24008  002366  D003               	goto	i2l7038
 24009  002368                     i2l7034:
 24010                           
 24011                           ;doprnt.c: 580: flag |= 0x04;
 24012  002368  8426               	bsf	i2printf@flag,2,c
 24013                           
 24014                           ;doprnt.c: 581: f++;
 24015  00236A  4A0D               	infsnz	i2printf@f,f,c
 24016  00236C  2A0E               	incf	i2printf@f+1,f,c
 24017  00236E                     i2l7038:
 24018  00236E  C00D  FFF6         	movff	i2printf@f,tblptrl
 24019  002372  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24020  002376                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24021  002376  6AF8               	clrf	tblptru,c
 24022  002378                     	endif
 24023  002378                     	if	0	;tblptru may be non-zero
 24024  002378                     	endif
 24025  002378  0008               	tblrd		*
 24026  00237A  50F5               	movf	tablat,w,c
 24027                           
 24028                           ; Switch size 1, requested type "space"
 24029                           ; Number of cases is 1, Range of values is 48 to 48
 24030                           ; switch strategies available:
 24031                           ; Name         Instructions Cycles
 24032                           ; simple_byte            4     3 (average)
 24033                           ;	Chosen strategy is simple_byte
 24034  00237C  0A30               	xorlw	48	; case 48
 24035  00237E  B4D8               	btfsc	status,2,c
 24036  002380  D7F3               	goto	i2l7034
 24037                           
 24038                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 24039                           
 24040                           ;doprnt.c: 586: }
 24041                           
 24042                           ;doprnt.c: 585: break;
 24043  002382  C00D  FFF6         	movff	i2printf@f,tblptrl
 24044  002386  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24045  00238A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24046  00238A  6AF8               	clrf	tblptru,c
 24047  00238C                     	endif
 24048  00238C                     	if	0	;tblptru may be non-zero
 24049  00238C                     	endif
 24050  00238C  0008               	tblrd		*
 24051  00238E  50F5               	movf	tablat,w,c
 24052  002390  EC61  F02D         	call	i2_isdigit
 24053  002394  A0D8               	btfss	status,0,c
 24054  002396  D0A6               	goto	i2l7086
 24055                           
 24056                           ;doprnt.c: 598: width = 0;
 24057  002398  0E00               	movlw	0
 24058  00239A  6E29               	movwf	i2printf@width+1,c
 24059  00239C  0E00               	movlw	0
 24060  00239E  6E28               	movwf	i2printf@width,c
 24061  0023A0                     i2l7044:
 24062                           
 24063                           ;doprnt.c: 600: width *= 10;
 24064  0023A0  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 24065  0023A4  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 24066  0023A8  0E00               	movlw	0
 24067  0023AA  6E04               	movwf	i2___wmul@multiplicand+1,c
 24068  0023AC  0E0A               	movlw	10
 24069  0023AE  6E03               	movwf	i2___wmul@multiplicand,c
 24070  0023B0  EC07  F02D         	call	i2___wmul	;wreg free
 24071  0023B4  C001  F028         	movff	?i2___wmul,i2printf@width
 24072  0023B8  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 24073                           
 24074                           ;doprnt.c: 601: width += *f++ - '0';
 24075  0023BC  0ED0               	movlw	208
 24076  0023BE  6E19               	movwf	??i2_printf& (0+255),c
 24077  0023C0  0EFF               	movlw	255
 24078  0023C2  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 24079  0023C4  C00D  FFF6         	movff	i2printf@f,tblptrl
 24080  0023C8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24081  0023CC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24082  0023CC  6AF8               	clrf	tblptru,c
 24083  0023CE                     	endif
 24084  0023CE                     	if	0	;tblptru may be non-zero
 24085  0023CE                     	endif
 24086  0023CE  0008               	tblrd		*
 24087  0023D0  50F5               	movf	tablat,w,c
 24088  0023D2  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 24089  0023D4  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 24090  0023D6  5019               	movf	??i2_printf,w,c
 24091  0023D8  261B               	addwf	??i2_printf+2,f,c
 24092  0023DA  501A               	movf	??i2_printf+1,w,c
 24093  0023DC  221C               	addwfc	??i2_printf+3,f,c
 24094  0023DE  501B               	movf	??i2_printf+2,w,c
 24095  0023E0  2628               	addwf	i2printf@width,f,c
 24096  0023E2  501C               	movf	??i2_printf+3,w,c
 24097  0023E4  2229               	addwfc	i2printf@width+1,f,c
 24098  0023E6  4A0D               	infsnz	i2printf@f,f,c
 24099  0023E8  2A0E               	incf	i2printf@f+1,f,c
 24100                           
 24101                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 24102  0023EA  C00D  FFF6         	movff	i2printf@f,tblptrl
 24103  0023EE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24104  0023F2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24105  0023F2  6AF8               	clrf	tblptru,c
 24106  0023F4                     	endif
 24107  0023F4                     	if	0	;tblptru may be non-zero
 24108  0023F4                     	endif
 24109  0023F4  0008               	tblrd		*
 24110  0023F6  50F5               	movf	tablat,w,c
 24111  0023F8  EC61  F02D         	call	i2_isdigit
 24112  0023FC  A0D8               	btfss	status,0,c
 24113  0023FE  D072               	goto	i2l7086
 24114  002400  D7CF               	goto	i2l7044
 24115  002402                     i2l7052:
 24116                           
 24117                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 24118  002402  C020  FFD9         	movff	i2printf@ap,fsr2l
 24119  002406  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24120  00240A  CFDE F01E          	movff	postinc2,i2printf@cp
 24121  00240E  CFDD F01F          	movff	postdec2,i2printf@cp+1
 24122  002412  0E02               	movlw	2
 24123  002414  2620               	addwf	i2printf@ap,f,c
 24124  002416  0E00               	movlw	0
 24125  002418  2221               	addwfc	i2printf@ap+1,f,c
 24126                           
 24127                           ;doprnt.c: 740: if(!cp)
 24128  00241A  501E               	movf	i2printf@cp,w,c
 24129  00241C  101F               	iorwf	i2printf@cp+1,w,c
 24130  00241E  A4D8               	btfss	status,2,c
 24131  002420  D004               	goto	i2l7060
 24132                           
 24133                           ;doprnt.c: 741: cp = "(null)";
 24134  002422  0EB5               	movlw	low STR_131
 24135  002424  6E1E               	movwf	i2printf@cp,c
 24136  002426  0EFF               	movlw	high STR_131
 24137  002428  6E1F               	movwf	i2printf@cp+1,c
 24138  00242A                     i2l7060:
 24139                           
 24140                           ;doprnt.c: 745: len = 0;
 24141  00242A  0E00               	movlw	0
 24142  00242C  6E23               	movwf	i2printf@len+1,c
 24143  00242E  0E00               	movlw	0
 24144  002430  6E22               	movwf	i2printf@len,c
 24145                           
 24146                           ;doprnt.c: 746: while(cp[len])
 24147  002432  D002               	goto	i2l7064
 24148  002434                     i2l7062:
 24149                           
 24150                           ;doprnt.c: 747: len++;
 24151  002434  4A22               	infsnz	i2printf@len,f,c
 24152  002436  2A23               	incf	i2printf@len+1,f,c
 24153  002438                     i2l7064:
 24154  002438  5022               	movf	i2printf@len,w,c
 24155  00243A  241E               	addwf	i2printf@cp,w,c
 24156  00243C  6E19               	movwf	??i2_printf& (0+255),c
 24157  00243E  5023               	movf	i2printf@len+1,w,c
 24158  002440  201F               	addwfc	i2printf@cp+1,w,c
 24159  002442  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 24160  002444  C019  FFF6         	movff	??i2_printf,tblptrl
 24161  002448  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 24162  00244C  0E00               	movlw	low (__mediumconst shr (0+16))
 24163  00244E  6EF8               	movwf	tblptru,c
 24164  002450  0E0F               	movlw	(high __ramtop+-1)
 24165  002452  64F7               	cpfsgt	tblptrh,c
 24166  002454  D003               	bra	i2u573_47
 24167  002456  0008               	tblrd		*
 24168  002458  50F5               	movf	tablat,w,c
 24169  00245A  D005               	bra	i2u573_40
 24170  00245C                     i2u573_47:
 24171  00245C  CFF6 FFE9          	movff	tblptrl,fsr0l
 24172  002460  CFF7 FFEA          	movff	tblptrh,fsr0h
 24173  002464  50EF               	movf	indf0,w,c
 24174  002466                     i2u573_40:
 24175  002466  0900               	iorlw	0
 24176  002468  A4D8               	btfss	status,2,c
 24177  00246A  D7E4               	goto	i2l7062
 24178                           
 24179                           ;doprnt.c: 757: if(width > len)
 24180  00246C  5028               	movf	i2printf@width,w,c
 24181  00246E  5C22               	subwf	i2printf@len,w,c
 24182  002470  5029               	movf	i2printf@width+1,w,c
 24183  002472  5823               	subwfb	i2printf@len+1,w,c
 24184  002474  B0D8               	btfsc	status,0,c
 24185  002476  D005               	goto	i2l7070
 24186                           
 24187                           ;doprnt.c: 758: width -= len;
 24188  002478  5022               	movf	i2printf@len,w,c
 24189  00247A  5E28               	subwf	i2printf@width,f,c
 24190  00247C  5023               	movf	i2printf@len+1,w,c
 24191  00247E  5A29               	subwfb	i2printf@width+1,f,c
 24192  002480  D008               	goto	i2l7074
 24193  002482                     i2l7070:
 24194                           
 24195                           ;doprnt.c: 759: else
 24196                           ;doprnt.c: 760: width = 0;
 24197  002482  0E00               	movlw	0
 24198  002484  6E29               	movwf	i2printf@width+1,c
 24199  002486  0E00               	movlw	0
 24200  002488  6E28               	movwf	i2printf@width,c
 24201                           
 24202                           ;doprnt.c: 764: while(width--)
 24203  00248A  D003               	goto	i2l7074
 24204  00248C                     i2l7072:
 24205                           
 24206                           ;doprnt.c: 765: (putch(' ') );
 24207  00248C  0E20               	movlw	32
 24208  00248E  ECD1  F02D         	call	i2_putch
 24209  002492                     i2l7074:
 24210  002492  0628               	decf	i2printf@width,f,c
 24211  002494  A0D8               	btfss	status,0,c
 24212  002496  0629               	decf	i2printf@width+1,f,c
 24213  002498  2828               	incf	i2printf@width,w,c
 24214  00249A  E1F8               	bnz	i2l7072
 24215  00249C  2829               	incf	i2printf@width+1,w,c
 24216  00249E  B4D8               	btfsc	status,2,c
 24217  0024A0  D016               	goto	i2l7080
 24218  0024A2  D7F4               	goto	i2l7072
 24219  0024A4                     i2l7076:
 24220                           
 24221                           ;doprnt.c: 768: (putch(*cp++) );
 24222  0024A4  C01E  FFF6         	movff	i2printf@cp,tblptrl
 24223  0024A8  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 24224  0024AC  0E00               	movlw	low (__mediumconst shr (0+16))
 24225  0024AE  6EF8               	movwf	tblptru,c
 24226  0024B0  0E0F               	movlw	(high __ramtop+-1)
 24227  0024B2  64F7               	cpfsgt	tblptrh,c
 24228  0024B4  D003               	bra	i2u577_47
 24229  0024B6  0008               	tblrd		*
 24230  0024B8  50F5               	movf	tablat,w,c
 24231  0024BA  D005               	bra	i2u577_40
 24232  0024BC                     i2u577_47:
 24233  0024BC  CFF6 FFE9          	movff	tblptrl,fsr0l
 24234  0024C0  CFF7 FFEA          	movff	tblptrh,fsr0h
 24235  0024C4  50EF               	movf	indf0,w,c
 24236  0024C6                     i2u577_40:
 24237  0024C6  ECD1  F02D         	call	i2_putch
 24238  0024CA  4A1E               	infsnz	i2printf@cp,f,c
 24239  0024CC  2A1F               	incf	i2printf@cp+1,f,c
 24240  0024CE                     i2l7080:
 24241  0024CE  0622               	decf	i2printf@len,f,c
 24242  0024D0  A0D8               	btfss	status,0,c
 24243  0024D2  0623               	decf	i2printf@len+1,f,c
 24244  0024D4  2822               	incf	i2printf@len,w,c
 24245  0024D6  E1E6               	bnz	i2l7076
 24246  0024D8  2823               	incf	i2printf@len+1,w,c
 24247  0024DA  B4D8               	btfsc	status,2,c
 24248  0024DC  D0DA               	goto	i2l7158
 24249  0024DE  D7E2               	goto	i2l7076
 24250  0024E0                     i2l7082:
 24251                           
 24252                           ;doprnt.c: 818: flag |= 0x40;
 24253  0024E0  8C26               	bsf	i2printf@flag,6,c
 24254                           
 24255                           ;doprnt.c: 822: }
 24256                           
 24257                           ;doprnt.c: 819: break;
 24258  0024E2  D01B               	goto	i2l1528
 24259  0024E4                     i2l7086:
 24260  0024E4  C00D  FFF6         	movff	i2printf@f,tblptrl
 24261  0024E8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24262  0024EC  4A0D               	infsnz	i2printf@f,f,c
 24263  0024EE  2A0E               	incf	i2printf@f+1,f,c
 24264  0024F0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24265  0024F0  6AF8               	clrf	tblptru,c
 24266  0024F2                     	endif
 24267  0024F2                     	if	0	;tblptru may be non-zero
 24268  0024F2                     	endif
 24269  0024F2  0008               	tblrd		*
 24270  0024F4  CFF5 F027          	movff	tablat,i2printf@c
 24271  0024F8  5027               	movf	i2printf@c,w,c
 24272                           
 24273                           ; Switch size 1, requested type "space"
 24274                           ; Number of cases is 5, Range of values is 0 to 117
 24275                           ; switch strategies available:
 24276                           ; Name         Instructions Cycles
 24277                           ; simple_byte           16     9 (average)
 24278                           ;	Chosen strategy is simple_byte
 24279  0024FA  0A00               	xorlw	0	; case 0
 24280  0024FC  B4D8               	btfsc	status,2,c
 24281  0024FE  0012               	return	
 24282  002500  0A64               	xorlw	100	; case 100
 24283  002502  B4D8               	btfsc	status,2,c
 24284  002504  D00A               	goto	i2l1528
 24285  002506  0A0D               	xorlw	13	; case 105
 24286  002508  B4D8               	btfsc	status,2,c
 24287  00250A  D007               	goto	i2l1528
 24288  00250C  0A1A               	xorlw	26	; case 115
 24289  00250E  B4D8               	btfsc	status,2,c
 24290  002510  D778               	goto	i2l7052
 24291  002512  0A06               	xorlw	6	; case 117
 24292  002514  B4D8               	btfsc	status,2,c
 24293  002516  D7E4               	goto	i2l7082
 24294  002518  D0BC               	goto	i2l7158
 24295  00251A                     i2l1528:
 24296                           
 24297                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 24298  00251A  BC26               	btfsc	i2printf@flag,6,c
 24299  00251C  D015               	goto	i2l7098
 24300                           
 24301                           ;doprnt.c: 1253: {
 24302                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 24303  00251E  C020  FFD9         	movff	i2printf@ap,fsr2l
 24304  002522  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24305  002526  CFDE F024          	movff	postinc2,i2printf@val
 24306  00252A  CFDD F025          	movff	postdec2,i2printf@val+1
 24307  00252E  0E02               	movlw	2
 24308  002530  2620               	addwf	i2printf@ap,f,c
 24309  002532  0E00               	movlw	0
 24310  002534  2221               	addwfc	i2printf@ap+1,f,c
 24311                           
 24312                           ;doprnt.c: 1261: if((int)val < 0) {
 24313  002536  AE25               	btfss	i2printf@val+1,7,c
 24314  002538  D013               	goto	i2l7102
 24315                           
 24316                           ;doprnt.c: 1262: flag |= 0x03;
 24317  00253A  0E03               	movlw	3
 24318  00253C  1226               	iorwf	i2printf@flag,f,c
 24319                           
 24320                           ;doprnt.c: 1263: val = -val;
 24321  00253E  6C24               	negf	i2printf@val,c
 24322  002540  1E25               	comf	i2printf@val+1,f,c
 24323  002542  B0D8               	btfsc	status,0,c
 24324  002544  2A25               	incf	i2printf@val+1,f,c
 24325                           
 24326                           ;doprnt.c: 1264: }
 24327                           ;doprnt.c: 1266: }
 24328  002546  D00C               	goto	i2l7102
 24329  002548                     i2l7098:
 24330                           
 24331                           ;doprnt.c: 1268: else
 24332                           ;doprnt.c: 1273: {
 24333                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 24334  002548  C020  FFD9         	movff	i2printf@ap,fsr2l
 24335  00254C  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24336  002550  CFDE F024          	movff	postinc2,i2printf@val
 24337  002554  CFDD F025          	movff	postdec2,i2printf@val+1
 24338  002558  0E02               	movlw	2
 24339  00255A  2620               	addwf	i2printf@ap,f,c
 24340  00255C  0E00               	movlw	0
 24341  00255E  2221               	addwfc	i2printf@ap+1,f,c
 24342  002560                     i2l7102:
 24343                           
 24344                           ;doprnt.c: 1287: }
 24345                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 24346  002560  0E01               	movlw	1
 24347  002562  6E27               	movwf	i2printf@c,c
 24348  002564                     i2l7104:
 24349  002564  0E05               	movlw	5
 24350  002566  1827               	xorwf	i2printf@c,w,c
 24351  002568  B4D8               	btfsc	status,2,c
 24352  00256A  D015               	goto	i2l7116
 24353                           
 24354                           ;doprnt.c: 1306: if(val < dpowers[c])
 24355  00256C  5027               	movf	i2printf@c,w,c
 24356  00256E  0D02               	mullw	2
 24357  002570  0E9C               	movlw	low _dpowers
 24358  002572  24F3               	addwf	prodl,w,c
 24359  002574  6EF6               	movwf	tblptrl,c
 24360  002576  0EFA               	movlw	high _dpowers
 24361  002578  20F4               	addwfc	prodh,w,c
 24362  00257A  6EF7               	movwf	tblptrh,c
 24363  00257C                     	if	1	;There are 3 active tblptr bytes
 24364  00257C  6AF8               	clrf	tblptru,c
 24365  00257E  0E00               	movlw	low (__mediumconst shr (0+16))
 24366  002580  22F8               	addwfc	tblptru,f,c
 24367  002582                     	endif
 24368  002582  0009               	tblrd		*+
 24369  002584  50F5               	movf	tablat,w,c
 24370  002586  5C24               	subwf	i2printf@val,w,c
 24371  002588  0009               	tblrd		*+
 24372  00258A  50F5               	movf	tablat,w,c
 24373  00258C  5825               	subwfb	i2printf@val+1,w,c
 24374  00258E  A0D8               	btfss	status,0,c
 24375  002590  D002               	goto	i2l7116
 24376                           
 24377                           ;doprnt.c: 1307: break;
 24378  002592  2A27               	incf	i2printf@c,f,c
 24379  002594  D7E7               	goto	i2l7104
 24380  002596                     i2l7116:
 24381                           
 24382                           ;doprnt.c: 1345: if(width && flag & 0x03)
 24383  002596  5028               	movf	i2printf@width,w,c
 24384  002598  1029               	iorwf	i2printf@width+1,w,c
 24385  00259A  B4D8               	btfsc	status,2,c
 24386  00259C  D009               	goto	i2l7122
 24387  00259E  C026  F019         	movff	i2printf@flag,??i2_printf
 24388  0025A2  0E03               	movlw	3
 24389  0025A4  1619               	andwf	??i2_printf,f,c
 24390  0025A6  B4D8               	btfsc	status,2,c
 24391  0025A8  D003               	goto	i2l7122
 24392                           
 24393                           ;doprnt.c: 1346: width--;
 24394  0025AA  0628               	decf	i2printf@width,f,c
 24395  0025AC  A0D8               	btfss	status,0,c
 24396  0025AE  0629               	decf	i2printf@width+1,f,c
 24397  0025B0                     i2l7122:
 24398                           
 24399                           ;doprnt.c: 1381: if(width > c)
 24400  0025B0  0E80               	movlw	128
 24401  0025B2  BE27               	btfsc	i2printf@c,7,c
 24402  0025B4  0E7F               	movlw	127
 24403  0025B6  6E19               	movwf	??i2_printf& (0+255),c
 24404  0025B8  5028               	movf	i2printf@width,w,c
 24405  0025BA  5C27               	subwf	i2printf@c,w,c
 24406  0025BC  5029               	movf	i2printf@width+1,w,c
 24407  0025BE  0A80               	xorlw	128
 24408  0025C0  5819               	subwfb	??i2_printf& (0+255),w,c
 24409  0025C2  B0D8               	btfsc	status,0,c
 24410  0025C4  D007               	goto	i2l7126
 24411                           
 24412                           ;doprnt.c: 1382: width -= c;
 24413  0025C6  5027               	movf	i2printf@c,w,c
 24414  0025C8  5E28               	subwf	i2printf@width,f,c
 24415  0025CA  0E00               	movlw	0
 24416  0025CC  BE27               	btfsc	i2printf@c,7,c
 24417  0025CE  0EFF               	movlw	255
 24418  0025D0  5A29               	subwfb	i2printf@width+1,f,c
 24419  0025D2  D004               	goto	i2l7128
 24420  0025D4                     i2l7126:
 24421                           
 24422                           ;doprnt.c: 1383: else
 24423                           ;doprnt.c: 1384: width = 0;
 24424  0025D4  0E00               	movlw	0
 24425  0025D6  6E29               	movwf	i2printf@width+1,c
 24426  0025D8  0E00               	movlw	0
 24427  0025DA  6E28               	movwf	i2printf@width,c
 24428  0025DC                     i2l7128:
 24429                           
 24430                           ;doprnt.c: 1387: if(flag & 0x04) {
 24431  0025DC  A426               	btfss	i2printf@flag,2,c
 24432  0025DE  D014               	goto	i2l7140
 24433                           
 24434                           ;doprnt.c: 1392: if(flag & 0x03)
 24435  0025E0  C026  F019         	movff	i2printf@flag,??i2_printf
 24436  0025E4  0E03               	movlw	3
 24437  0025E6  1619               	andwf	??i2_printf,f,c
 24438  0025E8  B4D8               	btfsc	status,2,c
 24439  0025EA  D003               	goto	i2l7134
 24440                           
 24441                           ;doprnt.c: 1393: (putch('-') );
 24442  0025EC  0E2D               	movlw	45
 24443  0025EE  ECD1  F02D         	call	i2_putch
 24444  0025F2                     i2l7134:
 24445                           
 24446                           ;doprnt.c: 1415: if(width)
 24447  0025F2  5028               	movf	i2printf@width,w,c
 24448  0025F4  1029               	iorwf	i2printf@width+1,w,c
 24449  0025F6  B4D8               	btfsc	status,2,c
 24450  0025F8  D01E               	goto	i2l7150
 24451                           
 24452                           ;doprnt.c: 1417: (putch('0') );
 24453                           
 24454                           ;doprnt.c: 1416: do
 24455  0025FA  0E30               	movlw	48
 24456  0025FC  ECD1  F02D         	call	i2_putch
 24457                           
 24458                           ;doprnt.c: 1418: while(--width);
 24459  002600  0628               	decf	i2printf@width,f,c
 24460  002602  A0D8               	btfss	status,0,c
 24461  002604  0629               	decf	i2printf@width+1,f,c
 24462  002606  D7F5               	goto	i2l7134
 24463  002608                     i2l7140:
 24464                           
 24465                           ;doprnt.c: 1422: {
 24466                           ;doprnt.c: 1424: if(width
 24467                           ;doprnt.c: 1428: )
 24468  002608  5028               	movf	i2printf@width,w,c
 24469  00260A  1029               	iorwf	i2printf@width+1,w,c
 24470  00260C  B4D8               	btfsc	status,2,c
 24471  00260E  D00A               	goto	i2l7146
 24472  002610                     i2l7142:
 24473                           
 24474                           ;doprnt.c: 1430: (putch(' ') );
 24475  002610  0E20               	movlw	32
 24476  002612  ECD1  F02D         	call	i2_putch
 24477                           
 24478                           ;doprnt.c: 1431: while(--width);
 24479  002616  0628               	decf	i2printf@width,f,c
 24480  002618  A0D8               	btfss	status,0,c
 24481  00261A  0629               	decf	i2printf@width+1,f,c
 24482  00261C  5028               	movf	i2printf@width,w,c
 24483  00261E  1029               	iorwf	i2printf@width+1,w,c
 24484  002620  A4D8               	btfss	status,2,c
 24485  002622  D7F6               	goto	i2l7142
 24486  002624                     i2l7146:
 24487                           
 24488                           ;doprnt.c: 1438: if(flag & 0x03)
 24489  002624  C026  F019         	movff	i2printf@flag,??i2_printf
 24490  002628  0E03               	movlw	3
 24491  00262A  1619               	andwf	??i2_printf,f,c
 24492  00262C  B4D8               	btfsc	status,2,c
 24493  00262E  D003               	goto	i2l7150
 24494                           
 24495                           ;doprnt.c: 1439: (putch('-') );
 24496  002630  0E2D               	movlw	45
 24497  002632  ECD1  F02D         	call	i2_putch
 24498  002636                     i2l7150:
 24499                           
 24500                           ;doprnt.c: 1469: }
 24501                           ;doprnt.c: 1472: prec = c;
 24502  002636  C027  F01D         	movff	i2printf@c,i2printf@prec
 24503                           
 24504                           ;doprnt.c: 1474: while(prec--) {
 24505  00263A  D027               	goto	i2l7156
 24506  00263C                     i2l7152:
 24507                           
 24508                           ;doprnt.c: 1478: {
 24509                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 24510  00263C  501D               	movf	i2printf@prec,w,c
 24511  00263E  0D02               	mullw	2
 24512  002640  0E9C               	movlw	low _dpowers
 24513  002642  24F3               	addwf	prodl,w,c
 24514  002644  6EF6               	movwf	tblptrl,c
 24515  002646  0EFA               	movlw	high _dpowers
 24516  002648  20F4               	addwfc	prodh,w,c
 24517  00264A  6EF7               	movwf	tblptrh,c
 24518  00264C                     	if	1	;There are 3 active tblptr bytes
 24519  00264C  6AF8               	clrf	tblptru,c
 24520  00264E  0E00               	movlw	low (__mediumconst shr (0+16))
 24521  002650  22F8               	addwfc	tblptru,f,c
 24522  002652                     	endif
 24523  002652  0009               	tblrd		*+
 24524  002654  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 24525  002658  000A               	tblrd		*-
 24526  00265A  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 24527  00265E  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 24528  002662  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 24529  002666  EC9B  F029         	call	i2___lwdiv	;wreg free
 24530  00266A  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 24531  00266E  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 24532  002672  0E00               	movlw	0
 24533  002674  6E04               	movwf	i2___lwmod@divisor+1,c
 24534  002676  0E0A               	movlw	10
 24535  002678  6E03               	movwf	i2___lwmod@divisor,c
 24536  00267A  ECA2  F02A         	call	i2___lwmod	;wreg free
 24537  00267E  5001               	movf	?i2___lwmod,w,c
 24538  002680  0F30               	addlw	48
 24539  002682  6E27               	movwf	i2printf@c,c
 24540                           
 24541                           ;doprnt.c: 1523: }
 24542                           ;doprnt.c: 1524: (putch(c) );
 24543  002684  5027               	movf	i2printf@c,w,c
 24544  002686  ECD1  F02D         	call	i2_putch
 24545  00268A                     i2l7156:
 24546  00268A  061D               	decf	i2printf@prec,f,c
 24547  00268C  281D               	incf	i2printf@prec,w,c
 24548  00268E  A4D8               	btfss	status,2,c
 24549  002690  D7D5               	goto	i2l7152
 24550  002692                     i2l7158:
 24551  002692  C00D  FFF6         	movff	i2printf@f,tblptrl
 24552  002696  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24553  00269A  4A0D               	infsnz	i2printf@f,f,c
 24554  00269C  2A0E               	incf	i2printf@f+1,f,c
 24555  00269E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24556  00269E  6AF8               	clrf	tblptru,c
 24557  0026A0                     	endif
 24558  0026A0                     	if	0	;tblptru may be non-zero
 24559  0026A0                     	endif
 24560  0026A0  0008               	tblrd		*
 24561  0026A2  CFF5 F027          	movff	tablat,i2printf@c
 24562  0026A6  5027               	movf	i2printf@c,w,c
 24563  0026A8  B4D8               	btfsc	status,2,c
 24564  0026AA  0012               	return	
 24565  0026AC  D64E               	goto	i2l7028
 24566  0026AE                     __end_ofi2_printf:
 24567                           	opt stack 0
 24568                           pclatu	equ	0xFFB
 24569                           pclath	equ	0xFFA
 24570                           tblptru	equ	0xFF8
 24571                           tblptrh	equ	0xFF7
 24572                           tblptrl	equ	0xFF6
 24573                           tablat	equ	0xFF5
 24574                           prodh	equ	0xFF4
 24575                           prodl	equ	0xFF3
 24576                           intcon	equ	0xFF2
 24577                           intcon2	equ	0xFF1
 24578                           intcon3	equ	0xFF0
 24579                           indf0	equ	0xFEF
 24580                           postinc0	equ	0xFEE
 24581                           fsr0h	equ	0xFEA
 24582                           fsr0l	equ	0xFE9
 24583                           wreg	equ	0xFE8
 24584                           postdec1	equ	0xFE5
 24585                           fsr1h	equ	0xFE2
 24586                           fsr1l	equ	0xFE1
 24587                           indf2	equ	0xFDF
 24588                           postinc2	equ	0xFDE
 24589                           postdec2	equ	0xFDD
 24590                           fsr2h	equ	0xFDA
 24591                           fsr2l	equ	0xFD9
 24592                           status	equ	0xFD8
 24593                           
 24594 ;; *************** function i2_putch *****************
 24595 ;; Defined at:
 24596 ;;		line 20 in file "lcd.c"
 24597 ;; Parameters:    Size  Location     Type
 24598 ;;  data            1    wreg     unsigned char 
 24599 ;; Auto vars:     Size  Location     Type
 24600 ;;  data            1    2[COMRAM] unsigned char 
 24601 ;; Return value:  Size  Location     Type
 24602 ;;                  1    wreg      void 
 24603 ;; Registers used:
 24604 ;;		wreg, status,2, status,0, cstack
 24605 ;; Tracked objects:
 24606 ;;		On entry : 0/0
 24607 ;;		On exit  : 0/0
 24608 ;;		Unchanged: 0/0
 24609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24611 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24613 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24614 ;;Total ram usage:        1 bytes
 24615 ;; Hardware stack levels used:    1
 24616 ;; Hardware stack levels required when called:    1
 24617 ;; This function calls:
 24618 ;;		i2_lcdNibble
 24619 ;; This function is called by:
 24620 ;;		i2_printf
 24621 ;; This function uses a non-reentrant model
 24622 ;;
 24623                           
 24624                           	psect	text88
 24625  005BA2                     __ptext88:
 24626                           	opt stack 0
 24627  005BA2                     i2_putch:
 24628                           	opt stack 20
 24629                           
 24630                           ;incstack = 0
 24631                           ;i2putch@data stored from wreg
 24632  005BA2  6E03               	movwf	i2putch@data,c
 24633                           
 24634                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 24635  005BA4  848C               	bsf	3980,2,c	;volatile
 24636                           
 24637                           ;lcd.c: 22: lcdNibble(data);
 24638  005BA6  5003               	movf	i2putch@data,w,c
 24639  005BA8  EC6E  F029         	call	i2_lcdNibble
 24640  005BAC  0012               	return		;funcret
 24641  005BAE                     __end_ofi2_putch:
 24642                           	opt stack 0
 24643                           pclatu	equ	0xFFB
 24644                           pclath	equ	0xFFA
 24645                           tblptru	equ	0xFF8
 24646                           tblptrh	equ	0xFF7
 24647                           tblptrl	equ	0xFF6
 24648                           tablat	equ	0xFF5
 24649                           prodh	equ	0xFF4
 24650                           prodl	equ	0xFF3
 24651                           intcon	equ	0xFF2
 24652                           intcon2	equ	0xFF1
 24653                           intcon3	equ	0xFF0
 24654                           indf0	equ	0xFEF
 24655                           postinc0	equ	0xFEE
 24656                           fsr0h	equ	0xFEA
 24657                           fsr0l	equ	0xFE9
 24658                           wreg	equ	0xFE8
 24659                           postdec1	equ	0xFE5
 24660                           fsr1h	equ	0xFE2
 24661                           fsr1l	equ	0xFE1
 24662                           indf2	equ	0xFDF
 24663                           postinc2	equ	0xFDE
 24664                           postdec2	equ	0xFDD
 24665                           fsr2h	equ	0xFDA
 24666                           fsr2l	equ	0xFD9
 24667                           status	equ	0xFD8
 24668                           
 24669 ;; *************** function i2_isdigit *****************
 24670 ;; Defined at:
 24671 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 24672 ;; Parameters:    Size  Location     Type
 24673 ;;  c               1    wreg     unsigned char 
 24674 ;; Auto vars:     Size  Location     Type
 24675 ;;  c               1    2[COMRAM] unsigned char 
 24676 ;; Return value:  Size  Location     Type
 24677 ;;		None               void
 24678 ;; Registers used:
 24679 ;;		wreg, status,2, status,0
 24680 ;; Tracked objects:
 24681 ;;		On entry : 0/0
 24682 ;;		On exit  : 0/0
 24683 ;;		Unchanged: 0/0
 24684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24686 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24687 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24688 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24689 ;;Total ram usage:        3 bytes
 24690 ;; Hardware stack levels used:    1
 24691 ;; This function calls:
 24692 ;;		Nothing
 24693 ;; This function is called by:
 24694 ;;		i2_printf
 24695 ;; This function uses a non-reentrant model
 24696 ;;
 24697                           
 24698                           	psect	text89
 24699  005AC2                     __ptext89:
 24700                           	opt stack 0
 24701  005AC2                     i2_isdigit:
 24702                           	opt stack 21
 24703                           
 24704                           ;incstack = 0
 24705                           ;i2isdigit@c stored from wreg
 24706  005AC2  6E03               	movwf	i2isdigit@c,c
 24707  005AC4  0E00               	movlw	0
 24708  005AC6  6E02               	movwf	i2_isdigit$2068,c
 24709  005AC8  0E3A               	movlw	58
 24710  005ACA  6003               	cpfslt	i2isdigit@c,c
 24711  005ACC  D005               	goto	i2l6692
 24712  005ACE  0E2F               	movlw	47
 24713  005AD0  6403               	cpfsgt	i2isdigit@c,c
 24714  005AD2  D002               	goto	i2l6692
 24715  005AD4  0E01               	movlw	1
 24716  005AD6  6E02               	movwf	i2_isdigit$2068,c
 24717  005AD8                     i2l6692:
 24718  005AD8  C002  F001         	movff	i2_isdigit$2068,??i2_isdigit
 24719  005ADC  3001               	rrcf	??i2_isdigit,w,c
 24720  005ADE  0012               	return	
 24721  005AE0                     __end_ofi2_isdigit:
 24722                           	opt stack 0
 24723                           pclatu	equ	0xFFB
 24724                           pclath	equ	0xFFA
 24725                           tblptru	equ	0xFF8
 24726                           tblptrh	equ	0xFF7
 24727                           tblptrl	equ	0xFF6
 24728                           tablat	equ	0xFF5
 24729                           prodh	equ	0xFF4
 24730                           prodl	equ	0xFF3
 24731                           intcon	equ	0xFF2
 24732                           intcon2	equ	0xFF1
 24733                           intcon3	equ	0xFF0
 24734                           indf0	equ	0xFEF
 24735                           postinc0	equ	0xFEE
 24736                           fsr0h	equ	0xFEA
 24737                           fsr0l	equ	0xFE9
 24738                           wreg	equ	0xFE8
 24739                           postdec1	equ	0xFE5
 24740                           fsr1h	equ	0xFE2
 24741                           fsr1l	equ	0xFE1
 24742                           indf2	equ	0xFDF
 24743                           postinc2	equ	0xFDE
 24744                           postdec2	equ	0xFDD
 24745                           fsr2h	equ	0xFDA
 24746                           fsr2l	equ	0xFD9
 24747                           status	equ	0xFD8
 24748                           
 24749 ;; *************** function i2___wmul *****************
 24750 ;; Defined at:
 24751 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 24752 ;; Parameters:    Size  Location     Type
 24753 ;;  multiplier      2    0[COMRAM] unsigned int 
 24754 ;;  multiplicand    2    2[COMRAM] unsigned int 
 24755 ;; Auto vars:     Size  Location     Type
 24756 ;;  __wmul          2    4[COMRAM] unsigned int 
 24757 ;; Return value:  Size  Location     Type
 24758 ;;                  2    0[COMRAM] unsigned int 
 24759 ;; Registers used:
 24760 ;;		wreg, status,2, status,0, prodl, prodh
 24761 ;; Tracked objects:
 24762 ;;		On entry : 0/0
 24763 ;;		On exit  : 0/0
 24764 ;;		Unchanged: 0/0
 24765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24766 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24767 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24769 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24770 ;;Total ram usage:        6 bytes
 24771 ;; Hardware stack levels used:    1
 24772 ;; This function calls:
 24773 ;;		Nothing
 24774 ;; This function is called by:
 24775 ;;		_printSortTimer
 24776 ;;		_retrieveLog
 24777 ;;		i2_printf
 24778 ;; This function uses a non-reentrant model
 24779 ;;
 24780                           
 24781                           	psect	text90
 24782  005A0E                     __ptext90:
 24783                           	opt stack 0
 24784  005A0E                     i2___wmul:
 24785                           	opt stack 21
 24786                           
 24787                           ;incstack = 0
 24788  005A0E  5001               	movf	i2___wmul@multiplier,w,c
 24789  005A10  0203               	mulwf	i2___wmul@multiplicand,c
 24790  005A12  CFF3 F005          	movff	prodl,i2___wmul@product
 24791  005A16  CFF4 F006          	movff	prodh,i2___wmul@product+1
 24792  005A1A  5001               	movf	i2___wmul@multiplier,w,c
 24793  005A1C  0204               	mulwf	i2___wmul@multiplicand+1,c
 24794  005A1E  50F3               	movf	prodl,w,c
 24795  005A20  2606               	addwf	i2___wmul@product+1,f,c
 24796  005A22  5002               	movf	i2___wmul@multiplier+1,w,c
 24797  005A24  0203               	mulwf	i2___wmul@multiplicand,c
 24798  005A26  50F3               	movf	prodl,w,c
 24799  005A28  2606               	addwf	i2___wmul@product+1,f,c
 24800  005A2A  C005  F001         	movff	i2___wmul@product,?i2___wmul
 24801  005A2E  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 24802  005A32  0012               	return	
 24803  005A34                     __end_ofi2___wmul:
 24804                           	opt stack 0
 24805                           pclatu	equ	0xFFB
 24806                           pclath	equ	0xFFA
 24807                           tblptru	equ	0xFF8
 24808                           tblptrh	equ	0xFF7
 24809                           tblptrl	equ	0xFF6
 24810                           tablat	equ	0xFF5
 24811                           prodh	equ	0xFF4
 24812                           prodl	equ	0xFF3
 24813                           intcon	equ	0xFF2
 24814                           intcon2	equ	0xFF1
 24815                           intcon3	equ	0xFF0
 24816                           indf0	equ	0xFEF
 24817                           postinc0	equ	0xFEE
 24818                           fsr0h	equ	0xFEA
 24819                           fsr0l	equ	0xFE9
 24820                           wreg	equ	0xFE8
 24821                           postdec1	equ	0xFE5
 24822                           fsr1h	equ	0xFE2
 24823                           fsr1l	equ	0xFE1
 24824                           indf2	equ	0xFDF
 24825                           postinc2	equ	0xFDE
 24826                           postdec2	equ	0xFDD
 24827                           fsr2h	equ	0xFDA
 24828                           fsr2l	equ	0xFD9
 24829                           status	equ	0xFD8
 24830                           
 24831 ;; *************** function i2___lwmod *****************
 24832 ;; Defined at:
 24833 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 24834 ;; Parameters:    Size  Location     Type
 24835 ;;  dividend        2    0[COMRAM] unsigned int 
 24836 ;;  divisor         2    2[COMRAM] unsigned int 
 24837 ;; Auto vars:     Size  Location     Type
 24838 ;;  __lwmod         1    4[COMRAM] unsigned char 
 24839 ;; Return value:  Size  Location     Type
 24840 ;;                  2    0[COMRAM] unsigned int 
 24841 ;; Registers used:
 24842 ;;		wreg, status,2, status,0
 24843 ;; Tracked objects:
 24844 ;;		On entry : 0/0
 24845 ;;		On exit  : 0/0
 24846 ;;		Unchanged: 0/0
 24847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24848 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24849 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24851 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24852 ;;Total ram usage:        5 bytes
 24853 ;; Hardware stack levels used:    1
 24854 ;; This function calls:
 24855 ;;		Nothing
 24856 ;; This function is called by:
 24857 ;;		_printSortTimer
 24858 ;;		i2_printf
 24859 ;; This function uses a non-reentrant model
 24860 ;;
 24861                           
 24862                           	psect	text91
 24863  005544                     __ptext91:
 24864                           	opt stack 0
 24865  005544                     i2___lwmod:
 24866                           	opt stack 21
 24867                           
 24868                           ;incstack = 0
 24869  005544  5003               	movf	i2___lwmod@divisor,w,c
 24870  005546  1004               	iorwf	i2___lwmod@divisor+1,w,c
 24871  005548  B4D8               	btfsc	status,2,c
 24872  00554A  D018               	goto	i2l1985
 24873  00554C  0E01               	movlw	1
 24874  00554E  6E05               	movwf	i2___lwmod@counter,c
 24875  005550  D004               	goto	i2l6724
 24876  005552                     i2l6722:
 24877  005552  90D8               	bcf	status,0,c
 24878  005554  3603               	rlcf	i2___lwmod@divisor,f,c
 24879  005556  3604               	rlcf	i2___lwmod@divisor+1,f,c
 24880  005558  2A05               	incf	i2___lwmod@counter,f,c
 24881  00555A                     i2l6724:
 24882  00555A  AE04               	btfss	i2___lwmod@divisor+1,7,c
 24883  00555C  D7FA               	goto	i2l6722
 24884  00555E                     i2l6726:
 24885  00555E  5003               	movf	i2___lwmod@divisor,w,c
 24886  005560  5C01               	subwf	i2___lwmod@dividend,w,c
 24887  005562  5004               	movf	i2___lwmod@divisor+1,w,c
 24888  005564  5802               	subwfb	i2___lwmod@dividend+1,w,c
 24889  005566  A0D8               	btfss	status,0,c
 24890  005568  D004               	goto	i2l6730
 24891  00556A  5003               	movf	i2___lwmod@divisor,w,c
 24892  00556C  5E01               	subwf	i2___lwmod@dividend,f,c
 24893  00556E  5004               	movf	i2___lwmod@divisor+1,w,c
 24894  005570  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 24895  005572                     i2l6730:
 24896  005572  90D8               	bcf	status,0,c
 24897  005574  3204               	rrcf	i2___lwmod@divisor+1,f,c
 24898  005576  3203               	rrcf	i2___lwmod@divisor,f,c
 24899  005578  2E05               	decfsz	i2___lwmod@counter,f,c
 24900  00557A  D7F1               	goto	i2l6726
 24901  00557C                     i2l1985:
 24902  00557C  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 24903  005580  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 24904  005584  0012               	return		;funcret
 24905  005586                     __end_ofi2___lwmod:
 24906                           	opt stack 0
 24907                           pclatu	equ	0xFFB
 24908                           pclath	equ	0xFFA
 24909                           tblptru	equ	0xFF8
 24910                           tblptrh	equ	0xFF7
 24911                           tblptrl	equ	0xFF6
 24912                           tablat	equ	0xFF5
 24913                           prodh	equ	0xFF4
 24914                           prodl	equ	0xFF3
 24915                           intcon	equ	0xFF2
 24916                           intcon2	equ	0xFF1
 24917                           intcon3	equ	0xFF0
 24918                           indf0	equ	0xFEF
 24919                           postinc0	equ	0xFEE
 24920                           fsr0h	equ	0xFEA
 24921                           fsr0l	equ	0xFE9
 24922                           wreg	equ	0xFE8
 24923                           postdec1	equ	0xFE5
 24924                           fsr1h	equ	0xFE2
 24925                           fsr1l	equ	0xFE1
 24926                           indf2	equ	0xFDF
 24927                           postinc2	equ	0xFDE
 24928                           postdec2	equ	0xFDD
 24929                           fsr2h	equ	0xFDA
 24930                           fsr2l	equ	0xFD9
 24931                           status	equ	0xFD8
 24932                           
 24933 ;; *************** function i2___lwdiv *****************
 24934 ;; Defined at:
 24935 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 24936 ;; Parameters:    Size  Location     Type
 24937 ;;  dividend        2    5[COMRAM] unsigned int 
 24938 ;;  divisor         2    7[COMRAM] unsigned int 
 24939 ;; Auto vars:     Size  Location     Type
 24940 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 24941 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 24942 ;; Return value:  Size  Location     Type
 24943 ;;                  2    5[COMRAM] unsigned int 
 24944 ;; Registers used:
 24945 ;;		wreg, status,2, status,0
 24946 ;; Tracked objects:
 24947 ;;		On entry : 0/0
 24948 ;;		On exit  : 0/0
 24949 ;;		Unchanged: 0/0
 24950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24951 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24952 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24954 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24955 ;;Total ram usage:        7 bytes
 24956 ;; Hardware stack levels used:    1
 24957 ;; This function calls:
 24958 ;;		Nothing
 24959 ;; This function is called by:
 24960 ;;		_printSortTimer
 24961 ;;		i2_printf
 24962 ;; This function uses a non-reentrant model
 24963 ;;
 24964                           
 24965                           	psect	text92
 24966  005336                     __ptext92:
 24967                           	opt stack 0
 24968  005336                     i2___lwdiv:
 24969                           	opt stack 21
 24970                           
 24971                           ;incstack = 0
 24972  005336  0E00               	movlw	0
 24973  005338  6E0B               	movwf	i2___lwdiv@quotient+1,c
 24974  00533A  0E00               	movlw	0
 24975  00533C  6E0A               	movwf	i2___lwdiv@quotient,c
 24976  00533E  5008               	movf	i2___lwdiv@divisor,w,c
 24977  005340  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 24978  005342  B4D8               	btfsc	status,2,c
 24979  005344  D01C               	goto	i2l1975
 24980  005346  0E01               	movlw	1
 24981  005348  6E0C               	movwf	i2___lwdiv@counter,c
 24982  00534A  D004               	goto	i2l6704
 24983  00534C                     i2l6702:
 24984  00534C  90D8               	bcf	status,0,c
 24985  00534E  3608               	rlcf	i2___lwdiv@divisor,f,c
 24986  005350  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 24987  005352  2A0C               	incf	i2___lwdiv@counter,f,c
 24988  005354                     i2l6704:
 24989  005354  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 24990  005356  D7FA               	goto	i2l6702
 24991  005358                     i2l6706:
 24992  005358  90D8               	bcf	status,0,c
 24993  00535A  360A               	rlcf	i2___lwdiv@quotient,f,c
 24994  00535C  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 24995  00535E  5008               	movf	i2___lwdiv@divisor,w,c
 24996  005360  5C06               	subwf	i2___lwdiv@dividend,w,c
 24997  005362  5009               	movf	i2___lwdiv@divisor+1,w,c
 24998  005364  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 24999  005366  A0D8               	btfss	status,0,c
 25000  005368  D005               	goto	i2l6714
 25001  00536A  5008               	movf	i2___lwdiv@divisor,w,c
 25002  00536C  5E06               	subwf	i2___lwdiv@dividend,f,c
 25003  00536E  5009               	movf	i2___lwdiv@divisor+1,w,c
 25004  005370  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 25005  005372  800A               	bsf	i2___lwdiv@quotient,0,c
 25006  005374                     i2l6714:
 25007  005374  90D8               	bcf	status,0,c
 25008  005376  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 25009  005378  3208               	rrcf	i2___lwdiv@divisor,f,c
 25010  00537A  2E0C               	decfsz	i2___lwdiv@counter,f,c
 25011  00537C  D7ED               	goto	i2l6706
 25012  00537E                     i2l1975:
 25013  00537E  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 25014  005382  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 25015  005386  0012               	return		;funcret
 25016  005388                     __end_ofi2___lwdiv:
 25017                           	opt stack 0
 25018                           pclatu	equ	0xFFB
 25019                           pclath	equ	0xFFA
 25020                           tblptru	equ	0xFF8
 25021                           tblptrh	equ	0xFF7
 25022                           tblptrl	equ	0xFF6
 25023                           tablat	equ	0xFF5
 25024                           prodh	equ	0xFF4
 25025                           prodl	equ	0xFF3
 25026                           intcon	equ	0xFF2
 25027                           intcon2	equ	0xFF1
 25028                           intcon3	equ	0xFF0
 25029                           indf0	equ	0xFEF
 25030                           postinc0	equ	0xFEE
 25031                           fsr0h	equ	0xFEA
 25032                           fsr0l	equ	0xFE9
 25033                           wreg	equ	0xFE8
 25034                           postdec1	equ	0xFE5
 25035                           fsr1h	equ	0xFE2
 25036                           fsr1l	equ	0xFE1
 25037                           indf2	equ	0xFDF
 25038                           postinc2	equ	0xFDE
 25039                           postdec2	equ	0xFDD
 25040                           fsr2h	equ	0xFDA
 25041                           fsr2l	equ	0xFD9
 25042                           status	equ	0xFD8
 25043                           
 25044 ;; *************** function i2_lcdInst *****************
 25045 ;; Defined at:
 25046 ;;		line 15 in file "lcd.c"
 25047 ;; Parameters:    Size  Location     Type
 25048 ;;  data            1    wreg     unsigned char 
 25049 ;; Auto vars:     Size  Location     Type
 25050 ;;  data            1    2[COMRAM] unsigned char 
 25051 ;; Return value:  Size  Location     Type
 25052 ;;                  1    wreg      void 
 25053 ;; Registers used:
 25054 ;;		wreg, status,2, status,0, cstack
 25055 ;; Tracked objects:
 25056 ;;		On entry : 0/0
 25057 ;;		On exit  : 0/0
 25058 ;;		Unchanged: 0/0
 25059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25061 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25063 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25064 ;;Total ram usage:        1 bytes
 25065 ;; Hardware stack levels used:    1
 25066 ;; Hardware stack levels required when called:    1
 25067 ;; This function calls:
 25068 ;;		i2_lcdNibble
 25069 ;; This function is called by:
 25070 ;;		_change_state_to_menu_11
 25071 ;;		_change_state_to_menu_23
 25072 ;;		_change_state_to_logs_11
 25073 ;;		_change_state_to_logs_12
 25074 ;;		_change_state_to_logs_22
 25075 ;;		_change_state_to_logs_23
 25076 ;;		_change_state_to_logs_33
 25077 ;;		_change_state_to_logs_34
 25078 ;;		_printSortTimer
 25079 ;;		i2_change_state_to_menu_start
 25080 ;;		i2_change_state_to_menu_12
 25081 ;;		i2_change_state_to_menu_22
 25082 ;;		i2_printRTC
 25083 ;; This function uses a non-reentrant model
 25084 ;;
 25085                           
 25086                           	psect	text93
 25087  005BAE                     __ptext93:
 25088                           	opt stack 0
 25089  005BAE                     i2_lcdInst:
 25090                           	opt stack 20
 25091                           
 25092                           ;incstack = 0
 25093                           ;i2lcdInst@data stored from wreg
 25094  005BAE  6E03               	movwf	i2lcdInst@data,c
 25095                           
 25096                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 25097  005BB0  948C               	bcf	3980,2,c	;volatile
 25098                           
 25099                           ;lcd.c: 17: lcdNibble(data);
 25100  005BB2  5003               	movf	i2lcdInst@data,w,c
 25101  005BB4  EC6E  F029         	call	i2_lcdNibble
 25102  005BB8  0012               	return		;funcret
 25103  005BBA                     __end_ofi2_lcdInst:
 25104                           	opt stack 0
 25105                           pclatu	equ	0xFFB
 25106                           pclath	equ	0xFFA
 25107                           tblptru	equ	0xFF8
 25108                           tblptrh	equ	0xFF7
 25109                           tblptrl	equ	0xFF6
 25110                           tablat	equ	0xFF5
 25111                           prodh	equ	0xFF4
 25112                           prodl	equ	0xFF3
 25113                           intcon	equ	0xFF2
 25114                           intcon2	equ	0xFF1
 25115                           intcon3	equ	0xFF0
 25116                           indf0	equ	0xFEF
 25117                           postinc0	equ	0xFEE
 25118                           fsr0h	equ	0xFEA
 25119                           fsr0l	equ	0xFE9
 25120                           wreg	equ	0xFE8
 25121                           postdec1	equ	0xFE5
 25122                           fsr1h	equ	0xFE2
 25123                           fsr1l	equ	0xFE1
 25124                           indf2	equ	0xFDF
 25125                           postinc2	equ	0xFDE
 25126                           postdec2	equ	0xFDD
 25127                           fsr2h	equ	0xFDA
 25128                           fsr2l	equ	0xFD9
 25129                           status	equ	0xFD8
 25130                           
 25131 ;; *************** function i2_lcdNibble *****************
 25132 ;; Defined at:
 25133 ;;		line 25 in file "lcd.c"
 25134 ;; Parameters:    Size  Location     Type
 25135 ;;  data            1    wreg     unsigned char 
 25136 ;; Auto vars:     Size  Location     Type
 25137 ;;  data            1    1[COMRAM] unsigned char 
 25138 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 25139 ;; Return value:  Size  Location     Type
 25140 ;;                  1    wreg      void 
 25141 ;; Registers used:
 25142 ;;		wreg, status,2, status,0
 25143 ;; Tracked objects:
 25144 ;;		On entry : 0/0
 25145 ;;		On exit  : 0/0
 25146 ;;		Unchanged: 0/0
 25147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25149 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25151 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25152 ;;Total ram usage:        2 bytes
 25153 ;; Hardware stack levels used:    1
 25154 ;; This function calls:
 25155 ;;		Nothing
 25156 ;; This function is called by:
 25157 ;;		i2_lcdInst
 25158 ;;		i2_putch
 25159 ;; This function uses a non-reentrant model
 25160 ;;
 25161                           
 25162                           	psect	text94
 25163  0052DC                     __ptext94:
 25164                           	opt stack 0
 25165  0052DC                     i2_lcdNibble:
 25166                           	opt stack 20
 25167                           
 25168                           ;incstack = 0
 25169                           ;i2lcdNibble@data stored from wreg
 25170  0052DC  6E02               	movwf	i2lcdNibble@data,c
 25171                           
 25172                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 25173  0052DE  9EF2               	bcf	intcon,7,c	;volatile
 25174                           
 25175                           ;lcd.c: 28: char temp = data & 0xF0;
 25176  0052E0  5002               	movf	i2lcdNibble@data,w,c
 25177  0052E2  0BF0               	andlw	240
 25178  0052E4  6E01               	movwf	i2lcdNibble@temp,c
 25179                           
 25180                           ;lcd.c: 29: LATD = LATD & 0x0F;
 25181  0052E6  508C               	movf	3980,w,c	;volatile
 25182  0052E8  0B0F               	andlw	15
 25183  0052EA  6E8C               	movwf	3980,c	;volatile
 25184                           
 25185                           ;lcd.c: 30: LATD = temp | LATD;
 25186  0052EC  5001               	movf	i2lcdNibble@temp,w,c
 25187  0052EE  108C               	iorwf	3980,w,c	;volatile
 25188  0052F0  6E8C               	movwf	3980,c	;volatile
 25189                           
 25190                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 25191  0052F2  868C               	bsf	3980,3,c	;volatile
 25192                           
 25193                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25194  0052F4  0E42               	movlw	66
 25195  0052F6                     i2u1149_47:
 25196  0052F6  2EE8               	decfsz	wreg,f,c
 25197  0052F8  D7FE               	bra	i2u1149_47
 25198  0052FA  D000               	nop2	
 25199                           
 25200                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 25201  0052FC  968C               	bcf	3980,3,c	;volatile
 25202                           
 25203                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25204  0052FE  0E42               	movlw	66
 25205  005300                     i2u1150_47:
 25206  005300  2EE8               	decfsz	wreg,f,c
 25207  005302  D7FE               	bra	i2u1150_47
 25208  005304  D000               	nop2	
 25209                           
 25210                           ;lcd.c: 37: data = data << 4;
 25211  005306  3802               	swapf	i2lcdNibble@data,w,c
 25212  005308  0BF0               	andlw	240
 25213  00530A  6E02               	movwf	i2lcdNibble@data,c
 25214                           
 25215                           ;lcd.c: 39: temp = data & 0xF0;
 25216  00530C  5002               	movf	i2lcdNibble@data,w,c
 25217  00530E  0BF0               	andlw	240
 25218  005310  6E01               	movwf	i2lcdNibble@temp,c
 25219                           
 25220                           ;lcd.c: 40: LATD = LATD & 0x0F;
 25221  005312  508C               	movf	3980,w,c	;volatile
 25222  005314  0B0F               	andlw	15
 25223  005316  6E8C               	movwf	3980,c	;volatile
 25224                           
 25225                           ;lcd.c: 41: LATD = temp | LATD;
 25226  005318  5001               	movf	i2lcdNibble@temp,w,c
 25227  00531A  108C               	iorwf	3980,w,c	;volatile
 25228  00531C  6E8C               	movwf	3980,c	;volatile
 25229                           
 25230                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 25231  00531E  868C               	bsf	3980,3,c	;volatile
 25232                           
 25233                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25234  005320  0E42               	movlw	66
 25235  005322                     i2u1151_47:
 25236  005322  2EE8               	decfsz	wreg,f,c
 25237  005324  D7FE               	bra	i2u1151_47
 25238  005326  D000               	nop2	
 25239                           
 25240                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 25241  005328  968C               	bcf	3980,3,c	;volatile
 25242                           
 25243                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25244  00532A  0E42               	movlw	66
 25245  00532C                     i2u1152_47:
 25246  00532C  2EE8               	decfsz	wreg,f,c
 25247  00532E  D7FE               	bra	i2u1152_47
 25248  005330  D000               	nop2	
 25249                           
 25250                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 25251  005332  8EF2               	bsf	intcon,7,c	;volatile
 25252  005334  0012               	return		;funcret
 25253  005336                     __end_ofi2_lcdNibble:
 25254                           	opt stack 0
 25255                           pclatu	equ	0xFFB
 25256                           pclath	equ	0xFFA
 25257                           tblptru	equ	0xFF8
 25258                           tblptrh	equ	0xFF7
 25259                           tblptrl	equ	0xFF6
 25260                           tablat	equ	0xFF5
 25261                           prodh	equ	0xFF4
 25262                           prodl	equ	0xFF3
 25263                           intcon	equ	0xFF2
 25264                           intcon2	equ	0xFF1
 25265                           intcon3	equ	0xFF0
 25266                           indf0	equ	0xFEF
 25267                           postinc0	equ	0xFEE
 25268                           fsr0h	equ	0xFEA
 25269                           fsr0l	equ	0xFE9
 25270                           wreg	equ	0xFE8
 25271                           postdec1	equ	0xFE5
 25272                           fsr1h	equ	0xFE2
 25273                           fsr1l	equ	0xFE1
 25274                           indf2	equ	0xFDF
 25275                           postinc2	equ	0xFDE
 25276                           postdec2	equ	0xFDD
 25277                           fsr2h	equ	0xFDA
 25278                           fsr2l	equ	0xFD9
 25279                           status	equ	0xFD8
 25280                           
 25281 ;; *************** function i2_getRTC *****************
 25282 ;; Defined at:
 25283 ;;		line 44 in file "RTC.c"
 25284 ;; Parameters:    Size  Location     Type
 25285 ;;		None
 25286 ;; Auto vars:     Size  Location     Type
 25287 ;;  getRTC          2    3[COMRAM] int 
 25288 ;; Return value:  Size  Location     Type
 25289 ;;                  1    wreg      void 
 25290 ;; Registers used:
 25291 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25292 ;; Tracked objects:
 25293 ;;		On entry : 0/0
 25294 ;;		On exit  : 0/0
 25295 ;;		Unchanged: 0/0
 25296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25298 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25300 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25301 ;;Total ram usage:        2 bytes
 25302 ;; Hardware stack levels used:    1
 25303 ;; Hardware stack levels required when called:    2
 25304 ;; This function calls:
 25305 ;;		i2_I2C_Master_Read
 25306 ;;		i2_I2C_Master_Start
 25307 ;;		i2_I2C_Master_Stop
 25308 ;;		i2_I2C_Master_Write
 25309 ;; This function is called by:
 25310 ;;		_printSortTimer
 25311 ;;		i2_printRTC
 25312 ;; This function uses a non-reentrant model
 25313 ;;
 25314                           
 25315                           	psect	text95
 25316  004F48                     __ptext95:
 25317                           	opt stack 0
 25318  004F48                     i2_getRTC:
 25319                           	opt stack 19
 25320                           
 25321                           ;RTC.c: 48: I2C_Master_Start();
 25322                           
 25323                           ;incstack = 0
 25324  004F48  ECF7  F02D         	call	i2_I2C_Master_Start	;wreg free
 25325                           
 25326                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 25327  004F4C  0E00               	movlw	0
 25328  004F4E  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25329  004F50  0ED0               	movlw	208
 25330  004F52  6E02               	movwf	i2I2C_Master_Write@d,c
 25331  004F54  ECE2  F02D         	call	i2_I2C_Master_Write	;wreg free
 25332                           
 25333                           ;RTC.c: 50: I2C_Master_Write(0x00);
 25334  004F58  0E00               	movlw	0
 25335  004F5A  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25336  004F5C  0E00               	movlw	0
 25337  004F5E  6E02               	movwf	i2I2C_Master_Write@d,c
 25338  004F60  ECE2  F02D         	call	i2_I2C_Master_Write	;wreg free
 25339                           
 25340                           ;RTC.c: 51: I2C_Master_Stop();
 25341  004F64  ECF3  F02D         	call	i2_I2C_Master_Stop	;wreg free
 25342                           
 25343                           ;RTC.c: 54: I2C_Master_Start();
 25344  004F68  ECF7  F02D         	call	i2_I2C_Master_Start	;wreg free
 25345                           
 25346                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 25347  004F6C  0E00               	movlw	0
 25348  004F6E  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25349  004F70  0ED1               	movlw	209
 25350  004F72  6E02               	movwf	i2I2C_Master_Write@d,c
 25351  004F74  ECE2  F02D         	call	i2_I2C_Master_Write	;wreg free
 25352                           
 25353                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 25354  004F78  0E00               	movlw	0
 25355  004F7A  6E05               	movwf	i2getRTC@i+1,c
 25356  004F7C  0E00               	movlw	0
 25357  004F7E  6E04               	movwf	i2getRTC@i,c
 25358  004F80                     i2l7000:
 25359  004F80  BE05               	btfsc	i2getRTC@i+1,7,c
 25360  004F82  D006               	goto	i2l7004
 25361  004F84  5005               	movf	i2getRTC@i+1,w,c
 25362  004F86  E111               	bnz	i2l7010
 25363  004F88  0E06               	movlw	6
 25364  004F8A  5C04               	subwf	i2getRTC@i,w,c
 25365  004F8C  B0D8               	btfsc	status,0,c
 25366  004F8E  D00D               	goto	i2l7010
 25367  004F90                     i2l7004:
 25368                           
 25369                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 25370  004F90  0E1C               	movlw	low _time
 25371  004F92  2404               	addwf	i2getRTC@i,w,c
 25372  004F94  6ED9               	movwf	fsr2l,c
 25373  004F96  0E01               	movlw	high _time
 25374  004F98  2005               	addwfc	i2getRTC@i+1,w,c
 25375  004F9A  6EDA               	movwf	fsr2h,c
 25376  004F9C  0E01               	movlw	1
 25377  004F9E  EC1A  F02D         	call	i2_I2C_Master_Read
 25378  004FA2  6EDF               	movwf	indf2,c
 25379  004FA4  4A04               	infsnz	i2getRTC@i,f,c
 25380  004FA6  2A05               	incf	i2getRTC@i+1,f,c
 25381  004FA8  D7EB               	goto	i2l7000
 25382  004FAA                     i2l7010:
 25383                           
 25384                           ;RTC.c: 58: }
 25385                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 25386  004FAA  0E00               	movlw	0
 25387  004FAC  EC1A  F02D         	call	i2_I2C_Master_Read
 25388  004FB0  0101               	movlb	1	; () banked
 25389  004FB2  6F22               	movwf	(_time+6)& (0+255),b
 25390                           
 25391                           ;RTC.c: 60: I2C_Master_Stop();
 25392  004FB4  ECF3  F02D         	call	i2_I2C_Master_Stop	;wreg free
 25393  004FB8  0012               	return		;funcret
 25394  004FBA                     __end_ofi2_getRTC:
 25395                           	opt stack 0
 25396                           pclatu	equ	0xFFB
 25397                           pclath	equ	0xFFA
 25398                           tblptru	equ	0xFF8
 25399                           tblptrh	equ	0xFF7
 25400                           tblptrl	equ	0xFF6
 25401                           tablat	equ	0xFF5
 25402                           prodh	equ	0xFF4
 25403                           prodl	equ	0xFF3
 25404                           intcon	equ	0xFF2
 25405                           intcon2	equ	0xFF1
 25406                           intcon3	equ	0xFF0
 25407                           indf0	equ	0xFEF
 25408                           postinc0	equ	0xFEE
 25409                           fsr0h	equ	0xFEA
 25410                           fsr0l	equ	0xFE9
 25411                           wreg	equ	0xFE8
 25412                           postdec1	equ	0xFE5
 25413                           fsr1h	equ	0xFE2
 25414                           fsr1l	equ	0xFE1
 25415                           indf2	equ	0xFDF
 25416                           postinc2	equ	0xFDE
 25417                           postdec2	equ	0xFDD
 25418                           fsr2h	equ	0xFDA
 25419                           fsr2l	equ	0xFD9
 25420                           status	equ	0xFD8
 25421                           
 25422 ;; *************** function i2_I2C_Master_Write *****************
 25423 ;; Defined at:
 25424 ;;		line 49 in file "I2C.c"
 25425 ;; Parameters:    Size  Location     Type
 25426 ;;  d               2    1[COMRAM] unsigned int 
 25427 ;; Auto vars:     Size  Location     Type
 25428 ;;		None
 25429 ;; Return value:  Size  Location     Type
 25430 ;;                  1    wreg      void 
 25431 ;; Registers used:
 25432 ;;		wreg, status,2, status,0, cstack
 25433 ;; Tracked objects:
 25434 ;;		On entry : 0/0
 25435 ;;		On exit  : 0/0
 25436 ;;		Unchanged: 0/0
 25437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25438 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25441 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25442 ;;Total ram usage:        2 bytes
 25443 ;; Hardware stack levels used:    1
 25444 ;; Hardware stack levels required when called:    1
 25445 ;; This function calls:
 25446 ;;		i2_I2C_Master_Wait
 25447 ;; This function is called by:
 25448 ;;		i2_getRTC
 25449 ;; This function uses a non-reentrant model
 25450 ;;
 25451                           
 25452                           	psect	text96
 25453  005BC4                     __ptext96:
 25454                           	opt stack 0
 25455  005BC4                     i2_I2C_Master_Write:
 25456                           	opt stack 19
 25457                           
 25458                           ;I2C.c: 51: I2C_Master_Wait();
 25459                           
 25460                           ;incstack = 0
 25461  005BC4  ECB8  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25462                           
 25463                           ;I2C.c: 52: SSPBUF = d;
 25464  005BC8  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 25465  005BCC  0012               	return		;funcret
 25466  005BCE                     __end_ofi2_I2C_Master_Write:
 25467                           	opt stack 0
 25468                           pclatu	equ	0xFFB
 25469                           pclath	equ	0xFFA
 25470                           tblptru	equ	0xFF8
 25471                           tblptrh	equ	0xFF7
 25472                           tblptrl	equ	0xFF6
 25473                           tablat	equ	0xFF5
 25474                           prodh	equ	0xFF4
 25475                           prodl	equ	0xFF3
 25476                           intcon	equ	0xFF2
 25477                           intcon2	equ	0xFF1
 25478                           intcon3	equ	0xFF0
 25479                           indf0	equ	0xFEF
 25480                           postinc0	equ	0xFEE
 25481                           fsr0h	equ	0xFEA
 25482                           fsr0l	equ	0xFE9
 25483                           wreg	equ	0xFE8
 25484                           postdec1	equ	0xFE5
 25485                           fsr1h	equ	0xFE2
 25486                           fsr1l	equ	0xFE1
 25487                           indf2	equ	0xFDF
 25488                           postinc2	equ	0xFDE
 25489                           postdec2	equ	0xFDD
 25490                           fsr2h	equ	0xFDA
 25491                           fsr2l	equ	0xFD9
 25492                           status	equ	0xFD8
 25493                           
 25494 ;; *************** function i2_I2C_Master_Stop *****************
 25495 ;; Defined at:
 25496 ;;		line 43 in file "I2C.c"
 25497 ;; Parameters:    Size  Location     Type
 25498 ;;		None
 25499 ;; Auto vars:     Size  Location     Type
 25500 ;;		None
 25501 ;; Return value:  Size  Location     Type
 25502 ;;                  1    wreg      void 
 25503 ;; Registers used:
 25504 ;;		wreg, status,2, status,0, cstack
 25505 ;; Tracked objects:
 25506 ;;		On entry : 0/0
 25507 ;;		On exit  : 0/0
 25508 ;;		Unchanged: 0/0
 25509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25514 ;;Total ram usage:        0 bytes
 25515 ;; Hardware stack levels used:    1
 25516 ;; Hardware stack levels required when called:    1
 25517 ;; This function calls:
 25518 ;;		i2_I2C_Master_Wait
 25519 ;; This function is called by:
 25520 ;;		i2_getRTC
 25521 ;; This function uses a non-reentrant model
 25522 ;;
 25523                           
 25524                           	psect	text97
 25525  005BE6                     __ptext97:
 25526                           	opt stack 0
 25527  005BE6                     i2_I2C_Master_Stop:
 25528                           	opt stack 19
 25529                           
 25530                           ;I2C.c: 45: I2C_Master_Wait();
 25531                           
 25532                           ;incstack = 0
 25533  005BE6  ECB8  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25534                           
 25535                           ;I2C.c: 46: PEN = 1;
 25536  005BEA  84C5               	bsf	4037,2,c	;volatile
 25537  005BEC  0012               	return		;funcret
 25538  005BEE                     __end_ofi2_I2C_Master_Stop:
 25539                           	opt stack 0
 25540                           pclatu	equ	0xFFB
 25541                           pclath	equ	0xFFA
 25542                           tblptru	equ	0xFF8
 25543                           tblptrh	equ	0xFF7
 25544                           tblptrl	equ	0xFF6
 25545                           tablat	equ	0xFF5
 25546                           prodh	equ	0xFF4
 25547                           prodl	equ	0xFF3
 25548                           intcon	equ	0xFF2
 25549                           intcon2	equ	0xFF1
 25550                           intcon3	equ	0xFF0
 25551                           indf0	equ	0xFEF
 25552                           postinc0	equ	0xFEE
 25553                           fsr0h	equ	0xFEA
 25554                           fsr0l	equ	0xFE9
 25555                           wreg	equ	0xFE8
 25556                           postdec1	equ	0xFE5
 25557                           fsr1h	equ	0xFE2
 25558                           fsr1l	equ	0xFE1
 25559                           indf2	equ	0xFDF
 25560                           postinc2	equ	0xFDE
 25561                           postdec2	equ	0xFDD
 25562                           fsr2h	equ	0xFDA
 25563                           fsr2l	equ	0xFD9
 25564                           status	equ	0xFD8
 25565                           
 25566 ;; *************** function i2_I2C_Master_Start *****************
 25567 ;; Defined at:
 25568 ;;		line 31 in file "I2C.c"
 25569 ;; Parameters:    Size  Location     Type
 25570 ;;		None
 25571 ;; Auto vars:     Size  Location     Type
 25572 ;;		None
 25573 ;; Return value:  Size  Location     Type
 25574 ;;                  1    wreg      void 
 25575 ;; Registers used:
 25576 ;;		wreg, status,2, status,0, cstack
 25577 ;; Tracked objects:
 25578 ;;		On entry : 0/0
 25579 ;;		On exit  : 0/0
 25580 ;;		Unchanged: 0/0
 25581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25585 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25586 ;;Total ram usage:        0 bytes
 25587 ;; Hardware stack levels used:    1
 25588 ;; Hardware stack levels required when called:    1
 25589 ;; This function calls:
 25590 ;;		i2_I2C_Master_Wait
 25591 ;; This function is called by:
 25592 ;;		i2_getRTC
 25593 ;; This function uses a non-reentrant model
 25594 ;;
 25595                           
 25596                           	psect	text98
 25597  005BEE                     __ptext98:
 25598                           	opt stack 0
 25599  005BEE                     i2_I2C_Master_Start:
 25600                           	opt stack 19
 25601                           
 25602                           ;I2C.c: 33: I2C_Master_Wait();
 25603                           
 25604                           ;incstack = 0
 25605  005BEE  ECB8  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25606                           
 25607                           ;I2C.c: 34: SEN = 1;
 25608  005BF2  80C5               	bsf	4037,0,c	;volatile
 25609  005BF4  0012               	return		;funcret
 25610  005BF6                     __end_ofi2_I2C_Master_Start:
 25611                           	opt stack 0
 25612                           pclatu	equ	0xFFB
 25613                           pclath	equ	0xFFA
 25614                           tblptru	equ	0xFF8
 25615                           tblptrh	equ	0xFF7
 25616                           tblptrl	equ	0xFF6
 25617                           tablat	equ	0xFF5
 25618                           prodh	equ	0xFF4
 25619                           prodl	equ	0xFF3
 25620                           intcon	equ	0xFF2
 25621                           intcon2	equ	0xFF1
 25622                           intcon3	equ	0xFF0
 25623                           indf0	equ	0xFEF
 25624                           postinc0	equ	0xFEE
 25625                           fsr0h	equ	0xFEA
 25626                           fsr0l	equ	0xFE9
 25627                           wreg	equ	0xFE8
 25628                           postdec1	equ	0xFE5
 25629                           fsr1h	equ	0xFE2
 25630                           fsr1l	equ	0xFE1
 25631                           indf2	equ	0xFDF
 25632                           postinc2	equ	0xFDE
 25633                           postdec2	equ	0xFDD
 25634                           fsr2h	equ	0xFDA
 25635                           fsr2l	equ	0xFD9
 25636                           status	equ	0xFD8
 25637                           
 25638 ;; *************** function i2_I2C_Master_Read *****************
 25639 ;; Defined at:
 25640 ;;		line 55 in file "I2C.c"
 25641 ;; Parameters:    Size  Location     Type
 25642 ;;  a               1    wreg     unsigned char 
 25643 ;; Auto vars:     Size  Location     Type
 25644 ;;  a               1    1[COMRAM] unsigned char 
 25645 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 25646 ;; Return value:  Size  Location     Type
 25647 ;;                  1    wreg      unsigned char 
 25648 ;; Registers used:
 25649 ;;		wreg, status,2, status,0, cstack
 25650 ;; Tracked objects:
 25651 ;;		On entry : 0/0
 25652 ;;		On exit  : 0/0
 25653 ;;		Unchanged: 0/0
 25654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25656 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25658 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25659 ;;Total ram usage:        2 bytes
 25660 ;; Hardware stack levels used:    1
 25661 ;; Hardware stack levels required when called:    1
 25662 ;; This function calls:
 25663 ;;		i2_I2C_Master_Wait
 25664 ;; This function is called by:
 25665 ;;		i2_getRTC
 25666 ;; This function uses a non-reentrant model
 25667 ;;
 25668                           
 25669                           	psect	text99
 25670  005A34                     __ptext99:
 25671                           	opt stack 0
 25672  005A34                     i2_I2C_Master_Read:
 25673                           	opt stack 19
 25674                           
 25675                           ;incstack = 0
 25676                           ;i2I2C_Master_Read@a stored from wreg
 25677  005A34  6E02               	movwf	i2I2C_Master_Read@a,c
 25678                           
 25679                           ;I2C.c: 57: unsigned char temp;
 25680                           ;I2C.c: 58: I2C_Master_Wait();
 25681  005A36  ECB8  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25682                           
 25683                           ;I2C.c: 59: RCEN = 1;
 25684  005A3A  86C5               	bsf	4037,3,c	;volatile
 25685                           
 25686                           ;I2C.c: 60: I2C_Master_Wait();
 25687  005A3C  ECB8  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25688                           
 25689                           ;I2C.c: 61: temp = SSPBUF;
 25690  005A40  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 25691                           
 25692                           ;I2C.c: 62: I2C_Master_Wait();
 25693  005A44  ECB8  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25694                           
 25695                           ;I2C.c: 63: ACKDT = (a)?0:1;
 25696  005A48  5002               	movf	i2I2C_Master_Read@a,w,c
 25697  005A4A  A4D8               	btfss	status,2,c
 25698  005A4C  D002               	goto	i2u510_40
 25699  005A4E  8AC5               	bsf	4037,5,c	;volatile
 25700  005A50  D001               	goto	i2l6668
 25701  005A52                     i2u510_40:
 25702  005A52  9AC5               	bcf	4037,5,c	;volatile
 25703  005A54                     i2l6668:
 25704                           
 25705                           ;I2C.c: 64: ACKEN = 1;
 25706  005A54  88C5               	bsf	4037,4,c	;volatile
 25707                           
 25708                           ;I2C.c: 65: return temp;
 25709  005A56  5003               	movf	i2I2C_Master_Read@temp,w,c
 25710  005A58  0012               	return	
 25711  005A5A                     __end_ofi2_I2C_Master_Read:
 25712                           	opt stack 0
 25713                           pclatu	equ	0xFFB
 25714                           pclath	equ	0xFFA
 25715                           tblptru	equ	0xFF8
 25716                           tblptrh	equ	0xFF7
 25717                           tblptrl	equ	0xFF6
 25718                           tablat	equ	0xFF5
 25719                           prodh	equ	0xFF4
 25720                           prodl	equ	0xFF3
 25721                           intcon	equ	0xFF2
 25722                           intcon2	equ	0xFF1
 25723                           intcon3	equ	0xFF0
 25724                           indf0	equ	0xFEF
 25725                           postinc0	equ	0xFEE
 25726                           fsr0h	equ	0xFEA
 25727                           fsr0l	equ	0xFE9
 25728                           wreg	equ	0xFE8
 25729                           postdec1	equ	0xFE5
 25730                           fsr1h	equ	0xFE2
 25731                           fsr1l	equ	0xFE1
 25732                           indf2	equ	0xFDF
 25733                           postinc2	equ	0xFDE
 25734                           postdec2	equ	0xFDD
 25735                           fsr2h	equ	0xFDA
 25736                           fsr2l	equ	0xFD9
 25737                           status	equ	0xFD8
 25738                           
 25739 ;; *************** function i2_I2C_Master_Wait *****************
 25740 ;; Defined at:
 25741 ;;		line 26 in file "I2C.c"
 25742 ;; Parameters:    Size  Location     Type
 25743 ;;		None
 25744 ;; Auto vars:     Size  Location     Type
 25745 ;;		None
 25746 ;; Return value:  Size  Location     Type
 25747 ;;                  1    wreg      void 
 25748 ;; Registers used:
 25749 ;;		wreg, status,2, status,0
 25750 ;; Tracked objects:
 25751 ;;		On entry : 0/0
 25752 ;;		On exit  : 0/0
 25753 ;;		Unchanged: 0/0
 25754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25757 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25758 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25759 ;;Total ram usage:        1 bytes
 25760 ;; Hardware stack levels used:    1
 25761 ;; This function calls:
 25762 ;;		Nothing
 25763 ;; This function is called by:
 25764 ;;		i2_I2C_Master_Start
 25765 ;;		i2_I2C_Master_Stop
 25766 ;;		i2_I2C_Master_Write
 25767 ;;		i2_I2C_Master_Read
 25768 ;; This function uses a non-reentrant model
 25769 ;;
 25770                           
 25771                           	psect	text100
 25772  005B70                     __ptext100:
 25773                           	opt stack 0
 25774  005B70                     i2_I2C_Master_Wait:
 25775                           	opt stack 19
 25776  005B70                     i2l71:
 25777  005B70  B4C7               	btfsc	4039,2,c	;volatile
 25778  005B72  D7FE               	goto	i2l71
 25779  005B74  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 25780  005B78  0E1F               	movlw	31
 25781  005B7A  1601               	andwf	??i2_I2C_Master_Wait,f,c
 25782  005B7C  B4D8               	btfsc	status,2,c
 25783  005B7E  0012               	return	
 25784  005B80  D7F7               	goto	i2l71
 25785  005B82                     __end_ofi2_I2C_Master_Wait:
 25786                           	opt stack 0
 25787                           pclatu	equ	0xFFB
 25788                           pclath	equ	0xFFA
 25789                           tblptru	equ	0xFF8
 25790                           tblptrh	equ	0xFF7
 25791                           tblptrl	equ	0xFF6
 25792                           tablat	equ	0xFF5
 25793                           prodh	equ	0xFF4
 25794                           prodl	equ	0xFF3
 25795                           intcon	equ	0xFF2
 25796                           intcon2	equ	0xFF1
 25797                           intcon3	equ	0xFF0
 25798                           indf0	equ	0xFEF
 25799                           postinc0	equ	0xFEE
 25800                           fsr0h	equ	0xFEA
 25801                           fsr0l	equ	0xFE9
 25802                           wreg	equ	0xFE8
 25803                           postdec1	equ	0xFE5
 25804                           fsr1h	equ	0xFE2
 25805                           fsr1l	equ	0xFE1
 25806                           indf2	equ	0xFDF
 25807                           postinc2	equ	0xFDE
 25808                           postdec2	equ	0xFDD
 25809                           fsr2h	equ	0xFDA
 25810                           fsr2l	equ	0xFD9
 25811                           status	equ	0xFD8
 25812                           
 25813 ;; *************** function i2_delay_ms *****************
 25814 ;; Defined at:
 25815 ;;		line 670 in file "sort.c"
 25816 ;; Parameters:    Size  Location     Type
 25817 ;;  milliseconds    1    wreg     unsigned char 
 25818 ;; Auto vars:     Size  Location     Type
 25819 ;;  milliseconds    1    1[COMRAM] unsigned char 
 25820 ;; Return value:  Size  Location     Type
 25821 ;;                  1    wreg      void 
 25822 ;; Registers used:
 25823 ;;		wreg, status,2, status,0, cstack
 25824 ;; Tracked objects:
 25825 ;;		On entry : 0/0
 25826 ;;		On exit  : 0/0
 25827 ;;		Unchanged: 0/0
 25828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25830 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25831 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25832 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25833 ;;Total ram usage:        2 bytes
 25834 ;; Hardware stack levels used:    1
 25835 ;; This function calls:
 25836 ;;		Nothing
 25837 ;; This function is called by:
 25838 ;;		_printSortTimer
 25839 ;; This function uses a non-reentrant model
 25840 ;;
 25841                           
 25842                           	psect	text101
 25843  005AFC                     __ptext101:
 25844                           	opt stack 0
 25845  005AFC                     i2_delay_ms:
 25846                           	opt stack 22
 25847                           
 25848                           ;incstack = 0
 25849                           ;i2delay_ms@milliseconds stored from wreg
 25850  005AFC  6E02               	movwf	i2delay_ms@milliseconds,c
 25851                           
 25852                           ;sort.c: 671: while(milliseconds > 0)
 25853  005AFE  D008               	goto	i2l9290
 25854  005B00                     i2l9286:
 25855                           
 25856                           ;sort.c: 672: {
 25857                           ;sort.c: 673: milliseconds--;
 25858  005B00  0602               	decf	i2delay_ms@milliseconds,f,c
 25859                           
 25860                           ;sort.c: 674: _delay((unsigned long)((990)*(32000000/4000000.0)));
 25861  005B02  0E0B               	movlw	11
 25862  005B04  6E01               	movwf	??i2_delay_ms& (0+255),c
 25863  005B06  0E48               	movlw	72
 25864  005B08                     i2u1153_47:
 25865  005B08  2EE8               	decfsz	wreg,f,c
 25866  005B0A  D7FE               	bra	i2u1153_47
 25867  005B0C  2E01               	decfsz	??i2_delay_ms& (0+255),f,c
 25868  005B0E  D7FC               	bra	i2u1153_47
 25869  005B10                     i2l9290:
 25870  005B10  5002               	movf	i2delay_ms@milliseconds,w,c
 25871  005B12  B4D8               	btfsc	status,2,c
 25872  005B14  0012               	return	
 25873  005B16  D7F4               	goto	i2l9286
 25874  005B18                     __end_ofi2_delay_ms:
 25875                           	opt stack 0
 25876                           pclatu	equ	0xFFB
 25877                           pclath	equ	0xFFA
 25878                           tblptru	equ	0xFF8
 25879                           tblptrh	equ	0xFF7
 25880                           tblptrl	equ	0xFF6
 25881                           tablat	equ	0xFF5
 25882                           prodh	equ	0xFF4
 25883                           prodl	equ	0xFF3
 25884                           intcon	equ	0xFF2
 25885                           intcon2	equ	0xFF1
 25886                           intcon3	equ	0xFF0
 25887                           indf0	equ	0xFEF
 25888                           postinc0	equ	0xFEE
 25889                           fsr0h	equ	0xFEA
 25890                           fsr0l	equ	0xFE9
 25891                           wreg	equ	0xFE8
 25892                           postdec1	equ	0xFE5
 25893                           fsr1h	equ	0xFE2
 25894                           fsr1l	equ	0xFE1
 25895                           indf2	equ	0xFDF
 25896                           postinc2	equ	0xFDE
 25897                           postdec2	equ	0xFDD
 25898                           fsr2h	equ	0xFDA
 25899                           fsr2l	equ	0xFD9
 25900                           status	equ	0xFD8
 25901                           
 25902 ;; *************** function i2___awmod *****************
 25903 ;; Defined at:
 25904 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 25905 ;; Parameters:    Size  Location     Type
 25906 ;;  dividend        2    0[COMRAM] int 
 25907 ;;  divisor         2    2[COMRAM] int 
 25908 ;; Auto vars:     Size  Location     Type
 25909 ;;  __awmod         1    5[COMRAM] unsigned char 
 25910 ;;  __awmod         1    4[COMRAM] unsigned char 
 25911 ;; Return value:  Size  Location     Type
 25912 ;;                  2    0[COMRAM] int 
 25913 ;; Registers used:
 25914 ;;		wreg, status,2, status,0
 25915 ;; Tracked objects:
 25916 ;;		On entry : 0/0
 25917 ;;		On exit  : 0/0
 25918 ;;		Unchanged: 0/0
 25919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25920 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25921 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25923 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25924 ;;Total ram usage:        6 bytes
 25925 ;; Hardware stack levels used:    1
 25926 ;; This function calls:
 25927 ;;		Nothing
 25928 ;; This function is called by:
 25929 ;;		_printSortTimer
 25930 ;; This function uses a non-reentrant model
 25931 ;;
 25932                           
 25933                           	psect	text102
 25934  004FBA                     __ptext102:
 25935                           	opt stack 0
 25936  004FBA                     i2___awmod:
 25937                           	opt stack 22
 25938                           
 25939                           ;incstack = 0
 25940  004FBA  0E00               	movlw	0
 25941  004FBC  6E06               	movwf	i2___awmod@sign,c
 25942  004FBE  AE02               	btfss	i2___awmod@dividend+1,7,c
 25943  004FC0  D006               	goto	i2l9300
 25944  004FC2  6C01               	negf	i2___awmod@dividend,c
 25945  004FC4  1E02               	comf	i2___awmod@dividend+1,f,c
 25946  004FC6  B0D8               	btfsc	status,0,c
 25947  004FC8  2A02               	incf	i2___awmod@dividend+1,f,c
 25948  004FCA  0E01               	movlw	1
 25949  004FCC  6E06               	movwf	i2___awmod@sign,c
 25950  004FCE                     i2l9300:
 25951  004FCE  AE04               	btfss	i2___awmod@divisor+1,7,c
 25952  004FD0  D004               	goto	i2l9304
 25953  004FD2  6C03               	negf	i2___awmod@divisor,c
 25954  004FD4  1E04               	comf	i2___awmod@divisor+1,f,c
 25955  004FD6  B0D8               	btfsc	status,0,c
 25956  004FD8  2A04               	incf	i2___awmod@divisor+1,f,c
 25957  004FDA                     i2l9304:
 25958  004FDA  5003               	movf	i2___awmod@divisor,w,c
 25959  004FDC  1004               	iorwf	i2___awmod@divisor+1,w,c
 25960  004FDE  B4D8               	btfsc	status,2,c
 25961  004FE0  D018               	goto	i2l9320
 25962  004FE2  0E01               	movlw	1
 25963  004FE4  6E05               	movwf	i2___awmod@counter,c
 25964  004FE6  D004               	goto	i2l9310
 25965  004FE8                     i2l9308:
 25966  004FE8  90D8               	bcf	status,0,c
 25967  004FEA  3603               	rlcf	i2___awmod@divisor,f,c
 25968  004FEC  3604               	rlcf	i2___awmod@divisor+1,f,c
 25969  004FEE  2A05               	incf	i2___awmod@counter,f,c
 25970  004FF0                     i2l9310:
 25971  004FF0  AE04               	btfss	i2___awmod@divisor+1,7,c
 25972  004FF2  D7FA               	goto	i2l9308
 25973  004FF4                     i2l9312:
 25974  004FF4  5003               	movf	i2___awmod@divisor,w,c
 25975  004FF6  5C01               	subwf	i2___awmod@dividend,w,c
 25976  004FF8  5004               	movf	i2___awmod@divisor+1,w,c
 25977  004FFA  5802               	subwfb	i2___awmod@dividend+1,w,c
 25978  004FFC  A0D8               	btfss	status,0,c
 25979  004FFE  D004               	goto	i2l9316
 25980  005000  5003               	movf	i2___awmod@divisor,w,c
 25981  005002  5E01               	subwf	i2___awmod@dividend,f,c
 25982  005004  5004               	movf	i2___awmod@divisor+1,w,c
 25983  005006  5A02               	subwfb	i2___awmod@dividend+1,f,c
 25984  005008                     i2l9316:
 25985  005008  90D8               	bcf	status,0,c
 25986  00500A  3204               	rrcf	i2___awmod@divisor+1,f,c
 25987  00500C  3203               	rrcf	i2___awmod@divisor,f,c
 25988  00500E  2E05               	decfsz	i2___awmod@counter,f,c
 25989  005010  D7F1               	goto	i2l9312
 25990  005012                     i2l9320:
 25991  005012  5006               	movf	i2___awmod@sign,w,c
 25992  005014  B4D8               	btfsc	status,2,c
 25993  005016  D004               	goto	i2l9324
 25994  005018  6C01               	negf	i2___awmod@dividend,c
 25995  00501A  1E02               	comf	i2___awmod@dividend+1,f,c
 25996  00501C  B0D8               	btfsc	status,0,c
 25997  00501E  2A02               	incf	i2___awmod@dividend+1,f,c
 25998  005020                     i2l9324:
 25999  005020  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 26000  005024  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 26001  005028  0012               	return	
 26002  00502A                     __end_ofi2___awmod:
 26003                           	opt stack 0
 26004                           pclatu	equ	0xFFB
 26005                           pclath	equ	0xFFA
 26006                           tblptru	equ	0xFF8
 26007                           tblptrh	equ	0xFF7
 26008                           tblptrl	equ	0xFF6
 26009                           tablat	equ	0xFF5
 26010                           prodh	equ	0xFF4
 26011                           prodl	equ	0xFF3
 26012                           intcon	equ	0xFF2
 26013                           intcon2	equ	0xFF1
 26014                           intcon3	equ	0xFF0
 26015                           indf0	equ	0xFEF
 26016                           postinc0	equ	0xFEE
 26017                           fsr0h	equ	0xFEA
 26018                           fsr0l	equ	0xFE9
 26019                           wreg	equ	0xFE8
 26020                           postdec1	equ	0xFE5
 26021                           fsr1h	equ	0xFE2
 26022                           fsr1l	equ	0xFE1
 26023                           indf2	equ	0xFDF
 26024                           postinc2	equ	0xFDE
 26025                           postdec2	equ	0xFDD
 26026                           fsr2h	equ	0xFDA
 26027                           fsr2l	equ	0xFD9
 26028                           status	equ	0xFD8
 26029                           pclatu	equ	0xFFB
 26030                           pclath	equ	0xFFA
 26031                           tblptru	equ	0xFF8
 26032                           tblptrh	equ	0xFF7
 26033                           tblptrl	equ	0xFF6
 26034                           tablat	equ	0xFF5
 26035                           prodh	equ	0xFF4
 26036                           prodl	equ	0xFF3
 26037                           intcon	equ	0xFF2
 26038                           intcon2	equ	0xFF1
 26039                           intcon3	equ	0xFF0
 26040                           indf0	equ	0xFEF
 26041                           postinc0	equ	0xFEE
 26042                           fsr0h	equ	0xFEA
 26043                           fsr0l	equ	0xFE9
 26044                           wreg	equ	0xFE8
 26045                           postdec1	equ	0xFE5
 26046                           fsr1h	equ	0xFE2
 26047                           fsr1l	equ	0xFE1
 26048                           indf2	equ	0xFDF
 26049                           postinc2	equ	0xFDE
 26050                           postdec2	equ	0xFDD
 26051                           fsr2h	equ	0xFDA
 26052                           fsr2l	equ	0xFD9
 26053                           status	equ	0xFD8
 26054                           
 26055                           	psect	rparam
 26056  0000                     pclatu	equ	0xFFB
 26057                           pclath	equ	0xFFA
 26058                           tblptru	equ	0xFF8
 26059                           tblptrh	equ	0xFF7
 26060                           tblptrl	equ	0xFF6
 26061                           tablat	equ	0xFF5
 26062                           prodh	equ	0xFF4
 26063                           prodl	equ	0xFF3
 26064                           intcon	equ	0xFF2
 26065                           intcon2	equ	0xFF1
 26066                           intcon3	equ	0xFF0
 26067                           indf0	equ	0xFEF
 26068                           postinc0	equ	0xFEE
 26069                           fsr0h	equ	0xFEA
 26070                           fsr0l	equ	0xFE9
 26071                           wreg	equ	0xFE8
 26072                           postdec1	equ	0xFE5
 26073                           fsr1h	equ	0xFE2
 26074                           fsr1l	equ	0xFE1
 26075                           indf2	equ	0xFDF
 26076                           postinc2	equ	0xFDE
 26077                           postdec2	equ	0xFDD
 26078                           fsr2h	equ	0xFDA
 26079                           fsr2l	equ	0xFD9
 26080                           status	equ	0xFD8
 26081                           
 26082                           	psect	temp
 26083  00007E                     btemp:
 26084                           	opt stack 0
 26085  00007E                     	ds	1
 26086  0000                     int$flags	set	btemp
 26087                           pclatu	equ	0xFFB
 26088                           pclath	equ	0xFFA
 26089                           tblptru	equ	0xFF8
 26090                           tblptrh	equ	0xFF7
 26091                           tblptrl	equ	0xFF6
 26092                           tablat	equ	0xFF5
 26093                           prodh	equ	0xFF4
 26094                           prodl	equ	0xFF3
 26095                           intcon	equ	0xFF2
 26096                           intcon2	equ	0xFF1
 26097                           intcon3	equ	0xFF0
 26098                           indf0	equ	0xFEF
 26099                           postinc0	equ	0xFEE
 26100                           fsr0h	equ	0xFEA
 26101                           fsr0l	equ	0xFE9
 26102                           wreg	equ	0xFE8
 26103                           postdec1	equ	0xFE5
 26104                           fsr1h	equ	0xFE2
 26105                           fsr1l	equ	0xFE1
 26106                           indf2	equ	0xFDF
 26107                           postinc2	equ	0xFDE
 26108                           postdec2	equ	0xFDD
 26109                           fsr2h	equ	0xFDA
 26110                           fsr2l	equ	0xFD9
 26111                           status	equ	0xFD8


Data Sizes:
    Strings     1368
    Constant    27
    Data        8
    BSS         146
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      81
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_131(CODE[7]), ID@res2(BANK0[2]), ID@res1(BANK0[2]), count_total(BANK0[2]), 
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_130(CODE[18]), STR_129(CODE[18]), STR_128(CODE[17]), STR_127(CODE[17]), 
		 -> STR_126(CODE[15]), STR_125(CODE[15]), STR_124(CODE[18]), STR_123(CODE[15]), 
		 -> STR_122(CODE[18]), STR_121(CODE[18]), STR_120(CODE[17]), STR_119(CODE[17]), 
		 -> STR_118(CODE[17]), STR_117(CODE[17]), STR_116(CODE[17]), STR_115(CODE[17]), 
		 -> STR_114(CODE[17]), STR_113(CODE[17]), STR_112(CODE[18]), STR_111(CODE[17]), 
		 -> STR_110(CODE[15]), STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[17]), 
		 -> STR_106(CODE[17]), STR_105(CODE[17]), STR_104(CODE[16]), STR_103(CODE[17]), 
		 -> STR_102(CODE[17]), STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), 
		 -> STR_98(CODE[17]), STR_97(CODE[15]), STR_96(CODE[11]), STR_95(CODE[17]), 
		 -> STR_94(CODE[11]), STR_93(CODE[17]), STR_92(CODE[14]), STR_91(CODE[15]), 
		 -> STR_90(CODE[14]), STR_89(CODE[10]), STR_88(CODE[9]), STR_87(CODE[9]), 
		 -> STR_86(CODE[10]), STR_85(CODE[10]), STR_84(CODE[16]), STR_83(CODE[15]), 
		 -> STR_82(CODE[3]), STR_81(CODE[15]), STR_80(CODE[13]), STR_79(CODE[14]), 
		 -> STR_78(CODE[8]), STR_77(CODE[14]), STR_76(CODE[15]), STR_75(CODE[12]), 
		 -> STR_74(CODE[14]), STR_73(CODE[17]), STR_72(CODE[14]), STR_71(CODE[15]), 
		 -> STR_70(CODE[17]), STR_69(CODE[17]), STR_68(CODE[7]), STR_67(CODE[21]), 
		 -> STR_66(CODE[16]), STR_65(CODE[16]), STR_64(CODE[19]), STR_63(CODE[24]), 
		 -> STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), 
		 -> STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), 
		 -> STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), 
		 -> STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[17]), 
		 -> STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[14]), 
		 -> STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), 
		 -> STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), 
		 -> STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_printf
    _readCOND->_readADC
    ___ftge->___awtoft
    ___awtoft->___awdiv
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _initEEPROM->_EEPROM_write
    _EEPROM_write->_printf
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _arm->_printf
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PortTestPusher->_printf
    _PortTestDC->_printf
    _PlatformTest->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  250976
                    _I2C_Master_Init
                               _Test
                                 _UI
                         _initEEPROM
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   37162
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   18298
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                  23    23      0   13471
                                             43 BANK0     23    23      0
                            ___awdiv
                           ___awtoft
                             ___ftge
                           _delay_ms
                            _lcdInst
                             _printf
                           _readCOND
 ---------------------------------------------------------------------------------
 (3) _readCOND                                             4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     392
                                             18 BANK0      9     3      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2172
                                             14 BANK0      4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1953
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5393
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11734
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   23608
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22694
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initEEPROM                                           0     0      0   10987
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10987
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   47428
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13531
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    9163
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    9163
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1140
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     940
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0  118944
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                       _PlatformTest
                         _PortTestDC
                     _PortTestPusher
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                                _arm
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    9275
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _arm                                                  3     3      0    9232
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    9163
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15799
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    9163
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestPusher                                       1     1      0    9163
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestDC                                           1     1      0    9163
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PlatformTest                                        12    12      0    9436
                                             43 BANK0     12    12      0
                            _lcdInst
                             _printf
                            _readADC
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19949
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                        _stopSignals
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5393
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5393
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                         10    10      0    9438
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    9028
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   84315
                                             74 COMRAM    16    16      0
                     _printSortTimer
                     _updateArmState
                         _updateMenu
                  _updateServoStates
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     593
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printRTC                                          25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (10) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _updateArmState                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    5227
                                             41 COMRAM    33    33      0
                          i2___awmod
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                         i2_delay_ms
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_delay_ms                                           2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) i2___awmod                                            6     2      4     348
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
       _updateServoPosition
     _PlatformTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _stopSignals
     _PortTestDC
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTestPusher
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _arm
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initEEPROM
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       ___awdiv
         ___awmod (ARG)
       ___awtoft
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftge
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
       _delay_ms
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readCOND
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___awmod
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_delay_ms
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateArmState
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition
   i2_change_state_to_menu_start
     i2_lcdInst
       i2_lcdNibble
     i2_printRTC
       i2_getRTC
         i2_I2C_Master_Read
           i2_I2C_Master_Wait
         i2_I2C_Master_Start
           i2_I2C_Master_Wait
         i2_I2C_Master_Stop
           i2_I2C_Master_Wait
         i2_I2C_Master_Write
           i2_I2C_Master_Wait
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
       i2_strcpy
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      51       7       31.6%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14E      34        0.0%
DATA                 0      0     14E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Apr 10 12:04:34 2017

                                    _i 013B                     i2_I2C_Master_Start 5BEE  
                   i2_I2C_Master_Write 5BC4                                     l71 5B5C  
                                   _ID 16C4                       _f_panning_to_bin 0069  
                          __CFG_CPD$ON 000000                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0075  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
               __end_of_updateArmState 55C0                                    ID@i 00B1  
                                  ID@n 00C0                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C8  
                                  l193 0102                                    l185 00E2  
                                  l188 00E6                                    l508 475E  
                                  l627 2D78                                    l811 1408  
                                  l803 1332                                    l821 1534  
                                  l814 1442                                    l806 136C  
                                  l840 15CC                                    l832 1668  
                                  l824 14C8                                    l841 15E0  
                                  l842 15F4                                    l826 14F4  
                                  l931 4DA8                                    l843 1608  
                                  l860 1946                                    l844 161E  
                                  l853 1780                                    l838 15BA  
                                  l848 16B4                                    l873 1A5A  
                                  l793 1268                                    l874 1A74  
                                  l877 1B0C                           __CFG_CPB$OFF 000000  
                                  _PR2 000FCB                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
            __end_of_updateServoStates 3CDC                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _arm 431E  
                                  _log 00F0                                    _sel 00FD  
                                  _var 0147                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  __end_of_BlockerTest 3EA2                    _log_count_can_w_lab 013F  
                           i2_delay_ms 5AFC        __end_of_change_state_to_menu_11 57F0  
      __end_of_change_state_to_menu_12 5630        __end_of_change_state_to_menu_22 55F8  
      __end_of_change_state_to_menu_23 57C0           _f_can_coming_to_distribution 0131  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 58E0  
      __end_of_change_state_to_logs_12 58B0        __end_of_change_state_to_logs_22 5880  
      __end_of_change_state_to_logs_23 593C        __end_of_change_state_to_logs_33 5850  
      __end_of_change_state_to_logs_34 5820                                   ??_ID 00AB  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1302 0944  
                                 l1142 5B28                                   l1151 3FD0  
                                 l1312 0A54                                   l1313 0AA2  
                                 l1305 0948                                   l1129 443E  
                                 l1314 0B08                                   l1403 2982  
                                 l1315 0B56                                   l1244 425E  
                                 l1405 29B0                                   l1309 09EE  
                                 l1270 4648                                   l1351 104A  
                                 l1247 427E                                   l1434 4D38  
                                 l1451 3DDE                                   l1427 4D28  
                                 l1339 0EB0                                   l1267 4644  
                                 l1356 1120                                   l1276 2A22  
                                 l1390 29B6                                   l1375 52D4  
                                 l1471 440E                                   l1279 2A26  
                                 l1528 1D60                                   l1456 3E2A  
                                 l1480 4408                                   l1472 43D0  
                                 l1457 3E44                                   l1369 52C4  
                                 ?_arm 0001                                   l1494 5278  
                                 l1399 292A                                   l1488 5268  
                                 l1922 4A74                                   l1792 41E4  
                                 l1975 4ECC                                   l7200 2DBE  
                                 l8000 14E8                                   l1985 51BA  
                                 l7210 2E54                                   l7202 2DDC  
                                 l7212 2E72                                   l7204 2DFA  
                                 l8020 15A2                                   l7214 2E90  
                                 l7206 2E18                                   l7222 2EEA  
                                 l6600 59B4                                   l7216 2EAE  
                                 l7208 2E36                                   l7224 2F48  
                                 l7218 2ECC                                   l8050 1660  
                                 l8018 1598                                   l6620 4E8E  
                                 l9020 2900                                   l8212 1A44  
                                 l8116 17AA                                   l9014 28D6  
                                 l7510 4928                                   l7190 2CF6  
                                 l7430 44E2                                   l7422 44B4  
                                 l8070 16B6                                   _ADIE 007CEE  
                                 l6616 4E7C                                   l6640 5188  
                                 l6800 1CDC                                   l6560 598E  
                                 l9200 3E0A                                   l9024 2914  
                                 l9016 28EC                                   l9008 28B6  
                                 l7440 59C4                                   l8208 1A2E  
                                 l8152 1902                                   l8128 17EE  
                                 l8048 162A                                   l8056 1670  
                                 l6618 4E88                                   l6810 1D26  
                                 l9202 3E14                                   l9034 2958  
                                 l8402 2CBA                                   l8330 2A76  
                                 l7522 495C                                   l7434 44EC  
                                 l7418 44AA                                   l7426 44CC  
                                 l8250 451C                                   l8138 18BA  
                                 l6628 4EBE                                   l6644 51AC  
                                 l6636 5176                                   l6804 1D08  
                                 l9212 3E46                                   l7524 4968  
                                 l7516 493E                                   l7196 2D82  
                                 l8252 4536                                   l8260 4584  
                                 l7444 59DA                                   l8236 1ACA  
                                 l8244 1B0E                                   l8172 196C  
                                 l7372 4A94                                   l8068 16A8  
                                 l6638 5182                                   l6822 1D98  
                                 l6806 1D20                                   l6558 597C  
                                 l9214 3E56                                   l9222 3E9C  
                                 l9038 296C                                   l7542 49C0  
                                 l7534 499E                                   l7526 496E  
                                 l6582 5906                                   l7198 2DA0  
                                 l8254 4550                                   l8262 45B2  
                                 l8182 199C                                   l8174 1974  
                                 l7382 4B20                                   l6840 1DF4  
                                 l6752 1B28                                   l8360 2B7E  
                                 l9240 4B70                                   l9232 4B4C  
                                 l6904 4CD4                                   l8256 456A  
                                 l7472 4EE4                                   l7376 4AAA  
                                 l6850 1E4E                                   l6826 1DB2  
                                 l6762 1B58                                   l6922 4D90  
                                 l8610 0D68                                   l8442 09B2  
                                 l7538 49AC                                   l9242 4B7C  
                                 l9402 01D6                                   l7554 551C  
                                 l7562 47C4                                   l8194 19D4  
                                 l8186 19AC                                   l8098 173C  
                                 l6852 1E58                                   l6828 1DB8  
                                 l6756 1B3C                                   l8700 0F2A  
                                 l8620 0D90                                   l8532 0BDC  
                                 l8452 09DA                                   l8444 09B8  
                                 l8348 2B2E                                   l9244 4B82  
                                 l9252 4BB4                                   l9236 4B5C  
                                 l9412 01FC                                   l7572 4848  
                                 l7492 4F3C                                   l7476 4EFA  
                                 l6870 1EB4                                   l6846 1E16  
                                 l6758 1B4E                                   l8614 0D80  
                                 l8606 0D5E                                   l8542 0C04  
                                 l8390 2C72                                   l8366 2BC0  
                                 l9502 052C                                   l9430 0258  
                                 l9406 01EE                                   l7654 4C14  
                                 l6950 4198                                   l6942 413A  
                                 l7566 4804                                   l8198 19E4  
                                 l6880 1F26                                   l6864 1E8E  
                                 l6784 1C3A                                   l6776 1C08  
                                 l6768 1B8C                                   l9192 3DE0  
                                 l9168 3D66                                   l9176 3DAC  
                                 l6928 4DC2                                   l8720 0F9E  
                                 l8712 0F7C                                   l8704 0F42  
                                 l8640 0E04                                   l8632 0DE2  
                                 l8624 0DA8                                   l8616 0D86  
                                 l8536 0BF4                                   l8528 0BD2  
                                 l8448 09C2                                   l9256 4BC8  
                                 l9248 4BA6                                   l9520 0578  
                                 l9512 0556                                   l9440 0282  
                                 l9360 00FE                                   l7664 4C56  
                                 l6960 41EE                                   l6952 41C8  
                                 l6944 4148                                   l7488 4F24  
                                 l7920 131C                                   l6866 1E9A  
                                 l6874 1EC8                                   l6858 1E72  
                                 l6794 1CB2                                   l6786 1C46  
                                 l6882 1F32                                   l9194 3DF0  
                                 l8730 0FC6                                   l8722 0FA4  
                                 l8650 0E2C                                   l8642 0E0A  
                                 l8562 0C78                                   l8554 0C56  
                                 l8546 0C1C                                   l8538 0BFA  
                                 l8386 2C3C                                   l8378 2C0C  
                                 l9602 0750                                   l9506 0544  
                                 l9434 0270                                   l9426 024E  
                                 l9370 013A                                   l7658 4C2A  
                                 l6954 41D6                                   l6946 4178  
                                 l6938 4126                                   l7930 134C  
                                 l6876 1ECE                                   l6796 1CBE  
                                 l6788 1C4C                                   l8812 114A  
                                 l8716 0F86                                   l8636 0DEC  
                                 l8580 0CDA                                   l8572 0CA0  
                                 l8564 0C7E                                   l9620 07B6  
                                 l9540 063E                                   l9516 0560  
                                 l9444 028C                                   l6980 4A0E  
                                 l7932 1356                                   l6798 1CC4  
                                 l8822 1172                                   l8806 113A  
                                 l8742 100A                                   l8726 0FAE  
                                 l8662 0E70                                   l8646 0E14  
                                 l8590 0D02                                   l8558 0C60  
                                 l8398 2C84                                   l6894 4C9E  
                                 l6886 563A                                   l9470 0350  
                                 l9382 016E                                   l9374 0144  
                                 l9366 0128                                   l6966 420A  
                                 l7942 1386                                   l8816 1162  
                                 l8808 1140                                   l8752 1032  
                                 l8672 0E98                                   l8584 0CE4  
                                 l8568 0C88                                   l6888 5646  
                                 l9624 07C0                                   l9544 0648  
                                 l9480 03E6                                   l9472 036E  
                                 l9464 02F6                                   l9448 02A4  
                                 l6976 49F8                                   l7872 1226  
                                 l8922 4D60                                   l8826 118A  
                                 l8818 1168                                   l8746 1022  
                                 l8738 1000                                   l8690 0F02  
                                 l8666 0E88                                   l8658 0E66  
                                 l8594 0D0C                                   l6898 4CB4  
                                 l9642 080C                                   l9634 07EA  
                                 l9562 0694                                   l9554 0672  
                                 l9482 0404                                   l9474 038C  
                                 l9466 0314                                   l9378 015C  
                                 l6978 4A08                                   l7970 142C  
                                 l7882 1270                                   l8780 10BC  
                                 l8772 109A                                   l8748 1028  
                                 l8668 0E8E                                   l8588 0CFC  
                                 l8860 43B8                                   l9660 086A  
                                 l9628 07D8                                   l9580 06FA  
                                 l9548 0660                                   l9484 0422  
                                 l9476 03AA                                   l9468 0332  
                                 l9492 047C                                   l9396 01C6  
                                 l6988 4A62                                   l7980 145C  
                                 l8790 10E4                                   l8782 10C2  
                                 l8694 0F1A                                   l8686 0EF8  
                                 l8598 0D24                                   l8870 43F0  
                                 l8862 43C2                                   l9638 07F4  
                                 l9558 067C                                   l9486 0440  
                                 l9478 03C8                                   l9494 04E0  
                                 l9398 01CC                                   l7990 14A2  
                                 l7958 13F2                                   l8776 10A4  
                                 l8696 0F20                                   l8872 43FA  
                                 l8856 4392                                   l9664 0874  
                                 l9584 0704                                   l9488 045E  
                                 l7992 14AC                                   l7984 1482  
                                 l7968 1422                                   l8786 10CC  
                                 l9682 08C0                                   l9674 089E  
                                 l9594 072E                                   l9498 0522  
                                 l7898 12AC                                   l8796 110A  
                                 l8868 43D6                                   l9668 088C  
                                 l9588 071C                                   l9940 3F02  
                                 l7996 14CC                                   l8958 270E  
                                 l9678 08A8                                   l9598 0738  
                                 l9686 08CC                                   STR_1 FB52  
                                 l8976 27BE                                   STR_2 FF49  
                                 STR_3 FB40                                   l8978 27C4  
                                 l9938 3EEE                                   STR_4 FE5D  
                                 STR_5 FB40                                   l8996 2874  
                                 l9964 3F8A                                   STR_6 FDD9  
                                 STR_7 FFC3                                   STR_8 FFDA  
                                 STR_9 FFCA                                   l9994 4284  
                                 l9978 421A                                   l9996 428A  
                                 l9998 4290                ??i2_updateServoPosition 0005  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u5000 5904  
                                 u5200 5418                                   u6010 2D78  
                                 u5210 541A                                   u5220 54B0  
                                 u5221 54AC                                   u5230 54B2  
                                 u5320 1CFE                                   _PEIE 007F96  
                                 u7100 1AD6                                   u5327 1CF4  
                                 u5280 1C86                                   u7120 1B0C  
                                 u7220 2C60                                   _RCEN 007E2B  
                                 u8110 289E                                   u8030 2750  
                                 u7118 1ADA                                   u5287 1C7C  
                                 u8040 2752                                   u7320 09EE  
                                 u7250 2CA8                                   u8060 2806  
                                 u7340 0AA2                                   u7228 2C64  
                                 u7180 2AB8                                   u6460 1232  
                                 u8301 3DD4                                   u8310 3DD6  
                                 u8070 2808                                   u7190 2ABA  
                                 i2l71 5B70                                   u8160 28E4  
                                 u8128 28A2                                   u7360 0B56  
                                 u6720 1506                                   u6480 1268  
                                 u8170 28FC                                   u7258 2CAC  
                                 u8171 28F8                                   u6900 183C  
                                 u6740 152C                                   u6910 188E  
                                 u6750 152E                                   u6478 1236  
                                 u8351 3E00                                   u8360 3E02  
                                 u6920 1890                                   u5970 5464  
                                 u6738 150A                                   u7900 43E8  
                                 u5980 5466                                   u7840 43AE  
                                 u7850 43B0                                   u6890 183A  
                                 u5995 51F4                                   u9480 3FD0  
                                 u7890 43E6                                   u9907 12DA  
                                 u9917 1336                                   u9927 133E  
                                 u9937 1370                                   u9947 137A  
                                 u9957 1394                                   u9967 13BE  
                                 u9977 140C                                   u9897 11B6  
                                 u9987 1414                                   _RSEN 007E29  
                                 u9997 1446                            _stopSignals 5AE0  
                                 _Test 4218                                   _back 0063  
                                 _main 46BC                                   _down 0065  
                         ___ftpack@arg 0080                                   _keys FA8B  
                         ___ftpack@exp 0083                                   _time 011C  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 5A7E  
                                 btemp 007E                   ??i2_I2C_Master_Start 0002  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                   _log_count_can_no_lab 013D  
                      __end_ofi2_putch 5BAE                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 3508  
                          i2_lcdNibble 52DC                        __end_of_Loading 16C4  
                 __end_of_actuatorTest 1192                                  ??_arm 00AB  
           i2updateServoPosition@timer 0003                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                                l10000 4296                                  l10010 42B4  
                                l10002 429C                                  l10012 42BA  
                                l10004 42A2                                  l10006 42A8  
                                l10008 42AE                                  l10016 42C0  
                                l10018 4312                                  l10220 4730  
                                l10212 4706                                  l10222 4736  
                                l10214 471C                                  l10232 4754  
                                l10224 473C                                  l10234 475A  
                                l10238 4760                   __end_of_EEPROM_write 4504  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 49CA  
                      ?_updateArmState 0001                                  _EEADR 000FA9  
                                STR_10 FFE6                                  STR_11 FFEA  
                                STR_12 FFFA                                  STR_20 FFEE  
                                STR_13 FFDE                                  STR_21 FAA6  
                                STR_14 FFD6                                  STR_22 FF9A  
                                STR_30 FDEA                                  STR_15 FFD2  
                                STR_23 FF3B                                  STR_31 FDC8  
                                STR_16 FFE2                                  STR_24 FD2F  
                                STR_32 FD0D                                  STR_40 FCC9  
                                STR_17 FFF2                                  STR_25 FE0C  
                                STR_33 FD1E                                  STR_41 FCB8  
                                STR_18 FFF6                                  STR_34 FDB7  
                                STR_50 FD95                                  STR_42 FD73  
                                STR_26 FD40                                  STR_43 FD73  
                                STR_35 FDB7                                  STR_51 FFDA  
                                STR_19 FFCE                                  STR_27 FDFB  
                                STR_52 FFCA                                  STR_60 FFF2  
                                STR_28 FD51                                  STR_36 FCFC  
                                STR_44 FCDA                        __end_of___awmod 4BD2  
                                STR_45 FCC9                                  STR_37 FD0D  
                                STR_53 FFE6                                  STR_61 FFF6  
                                STR_29 FE09                                  STR_62 FFCE  
                                STR_54 FFEA                                  STR_38 FDA6  
                                STR_46 FD84                                  STR_70 FC85  
                                STR_47 FD84                                  STR_55 FFFA  
                                STR_63 FAA6                                  STR_71 FEF4  
                                STR_39 FD62                                  STR_56 FFDE  
                                STR_80 FF57                                  STR_72 FF2D  
                                STR_48 FCEB                                  STR_64 FAD3  
                                STR_49 FCDA                                  STR_57 FFD6  
                                STR_81 FE7C                                  STR_65 FE3D  
                                STR_73 FC41                                  STR_58 FFD2  
                                STR_90 FF2D                                  STR_82 FE09  
                                STR_74 FF11                                  STR_66 FE4D  
                                STR_59 FFE2                                  STR_75 FF64  
                                STR_91 FEE5                                  STR_83 FEA9  
                                STR_67 FABE                                  STR_68 FFBC  
                                STR_92 FF03                                  STR_76 FED6  
                                STR_84 FE1D                                  STR_85 FF86  
                                STR_77 FF1F                                  STR_69 FC74  
                                STR_93 FC52                                  STR_86 FF86  
                                STR_78 FFAD                                  STR_94 FF70  
                                STR_79 FF2D                                  STR_87 FFA4  
                                STR_95 FC63                                  STR_88 FFA4  
                                STR_96 FF7B                                  STR_89 FF90  
                                STR_97 FEC7                                  STR_98 FBB9  
                                STR_99 FBA8           i2updateServoPosition@my_time 0007  
                                ?_sort 0001                        __end_of___lldiv 4A86  
         i2updateServoPosition@time_us 0001                                  u10007 1450  
                                u10017 146A                                  u10107 15F8  
                                u10027 154E                                  u10117 1600  
                                u10037 1586                                  u11007 105C  
                                u10207 18DE                                  u10127 160C  
                                u10047 15BE                                  u11017 10AC  
                                u10217 19FE                                  u10137 1616  
                                u10057 15C6                                  u11107 5232  
                                u11027 10D4                                  u10307 44F4  
                                u10227 1A5E                                  u10147 1622  
                                u10067 15D0                                  u11117 528E  
                                u11037 1124                                  u10317 002A  
                                u10237 1A68                                  u10157 168A  
                                u10077 15DA                                  u11207 299E  
                                u11127 26EC                                  u11047 112E  
                                u10407 0534                                  u10327 0114  
                                u10247 1A8E                                  u10167 56BA  
                                u10087 15E4                                  _T0CON 000FD5  
                                u11217 1F60                                  u11137 2766  
                                u11057 1152                                  u10417 0568  
                                u10337 014C                                  u10257 59D0  
                                u10177 4F02                                  u10097 15EE  
                                u11307 2190                                  u11227 1FAC  
                                u11147 27B2                                  u11067 117A  
                                u10507 07FC                                  u10427 0592  
                                u10347 0188                                  u10267 54C2  
                                u10187 16DE                        ___awdiv@divisor 0088  
                                u11317 21C2                                  u11237 1FF8  
                                u11157 281C                                  u11077 4CF2  
                                u10517 0826                                  u10437 0650  
                                u10357 01DE                                  u10277 54F6  
                                u10197 1790                                  u11407 3D12  
                                u11327 220E                                  u11247 202C  
                                u11167 2868                                  u11087 4D42  
                                u10607 2B22                                  u10527 087C  
                                u10447 0684                                  u10367 020A  
                                u10287 4460                                  _T1CON 000FCD  
                                u11417 3E2E                                  u11337 2242  
                                u11257 205E                                  u11177 2934  
                                u11097 4D56                                  u10617 2B42  
                                u10537 08B0                                  u10457 06AE  
                                u10377 0260                                  u10297 44BC  
                                u11427 3E38                                  u11347 2274  
                                u11267 20AA                                  u11187 2946  
                                u10707 465A                                  u10627 2B70  
                                u10547 4228                                  u10467 070C  
                                u10387 0294                                  u11437 5984  
                                u11357 22C0                                  u11277 20DE  
                                u11197 298C                                  u10717 08F4  
                                u10637 2BB4                                  u10557 29D2  
                                u10477 0740                                  u10397 02BE  
                                u11447 504C                                  u11367 22F4  
                                u11287 2110                                  u10807 0B36  
                                u10727 0938                                  u10647 2BD2  
                                u10567 2A16                                  u10487 076A  
                                _T2CON 000FCA                                  u11457 5056  
                                u11377 2326                                  u11297 215C  
                                u10817 0B66                                  u10737 095A  
                                u10657 2C00                                  u10577 2A38  
                                u10497 07C8                                  u11467 5082  
                                u11387 4E28                                  u10907 0DF4  
                                u10827 0BE4                                  u10747 09CA  
                                u10667 2C1A                                  u10587 2A66  
                                u11477 508C                                  u11397 4E44  
                                u10917 0E1C                                  u10837 0C0C  
                                u10757 09FE                                  u10677 432C  
                                u10597 2ACE                                  u10927 0E78  
                                u10847 0C68                                  u10767 0A64  
                                u10687 45F4                                  _T3CON 000FB1  
                                u10937 0EA0                                  u10857 0C90  
                                u10777 0A82                                  u10697 4638  
                                u10947 0F0A                                  u10867 0CEC  
                                u10787 0AB2                                  u10957 0F32  
                                u10877 0D14                                  u10797 0B18  
                                u10967 0F8E                                  u10887 0D70  
                                u10977 0FB6                                  u10897 0D98  
                                u10987 1012                                  u10997 103A  
                      __end_of___lwdiv 4ED6                        __end_of___lwmod 51C4  
                                i2l268 3248                                  i2l627 3596  
                                i2l910 342E                                  i2l931 50C8  
                      ___awdiv@counter 008A                                  i2l958 55BC  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 1F52                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 5BA2                        __end_of_handler 3B14  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 5994  
                      __end_of_initLCD 5500                         __CFG_EBTRB$OFF 000000  
                                _debug 00E8                             i2isdigit@c 0003  
                        ___awtoft@sign 0091                                  _getIR 4ED6  
                      __end_of_loadRTC 4C5E                        __end_of_readMAG 54BA  
                      __end_of_dpowers FAA6                                  _first 0137  
                                _enter 0067                                  arm@on 00AC  
                      __end_of_isdigit 59BE                                  _input 007D  
                        ___ftpack@sign 0084                                  _putch 5B82  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 5A34                       __end_ofi2_getRTC 4FBA  
                  _log_count_pop_w_tab 0141                                  status 000FD8  
                          readCOND@res 0084                     __size_ofi2___awmod 0070  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 26AE                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 5700  
                          Loading@addr 00B3                       _count_can_no_lab 0123  
                 printSortTimer@i_1163 0047                   __size_of_EEPROM_read 0018  
                      __initialization 5388                           __end_of_Test 431E  
                   __size_ofi2_lcdInst 000C                           __end_of_main 4784  
                         __end_of_keys FA9C                           __end_of_sort 5AA0  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                            _BlockerTest 3CDC  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00C4                          __activetblptr 000003  
                               ID@res1 00BC                                 ID@res2 00BE  
           __size_of_updateServoStates 01C8                                 ID@res3 00AD  
                               ID@time 00BB             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                            ?i2_delay_ms 0001  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FB86                                 STR_101 FC0E  
                               STR_110 FE8B                                 STR_102 FC1F  
                               STR_111 FCA7                                 STR_103 FB64  
                               STR_104 FE2D                                 STR_120 FC30  
                               STR_112 FAE6                                 STR_113 FBCA  
                               STR_105 FB97                                 STR_121 FB0A  
                               STR_114 FBFD                                 STR_106 FB75  
                               STR_130 FB2E                                 STR_122 FAF8  
                               _ADRESH 000FC4                                 STR_107 FB97  
                               STR_115 FBFD                                 STR_131 FFB5  
                               STR_123 FE6D                                 STR_108 FEB8  
                               STR_116 FBEC                                 STR_124 FB1C  
                               _EEADRH 000FAA                                 STR_117 FBFD  
                               STR_125 FE6D                                 STR_109 FE9A  
                               STR_118 FBEC                                 STR_126 FE6D  
                               _ADRESL 000FC3                                 STR_127 FBDB  
                               STR_119 FBDB                                 STR_128 FC96  
                               STR_129 FAE6                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                       __end_of___awtoft 5544  
                               ?_putch 0001                       __end_of___ftpack 4218  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 5760              i2_change_state_to_menu_22 5730  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1050 3A18  
                               i2l1061 3AD8                                 i2l1142 5B54  
                               i2l1059 3ABC                                 i2l1528 251A  
                               i2l7000 4F80                                 i2l7010 4FAA  
                               i2l7004 4F90                                 i2l7102 2560  
                               i2l1975 537E                                 i2l7104 2564  
                               i2l7032 235A                                 i2l1985 557C  
                               i2l7122 25B0                                 i2l7034 2368  
                               i2l7140 2608                                 i2l7116 2596  
                               i2l7060 242A                                 i2l7052 2402  
                               i2l7044 23A0                                 i2l7028 234A  
                               i2l7142 2610                                 i2l7150 2636  
                               i2l7134 25F2                                 i2l7126 25D4  
                               i2l7070 2482                                 i2l7062 2434  
                               i2l7038 236E                                 i2l7152 263C  
                               i2l7128 25DC                                 i2l7080 24CE  
                               i2l7072 248C                                 i2l7064 2438  
                               i2l7146 2624                                 i2l7082 24E0  
                               i2l7074 2492                                 i2l7162 56D8  
                               i2l7156 268A                                 i2l7076 24A4  
                               i2l7340 40B0                                 i2l7164 56E0  
                               i2l6702 534C                                 i2l7086 24E4  
                               i2l7158 2692                                 i2l6704 5354  
                               i2l7352 40F4                                 i2l7344 40C0  
                               i2l6714 5374                                 i2l6706 5358  
                               i2l6730 5572                                 i2l6722 5552  
                               i2l7098 2548                                 i2l9300 4FCE  
                               i2l6724 555A                                 i2l7620 35F8  
                               i2l7612 35A0                                 i2l9310 4FF0  
                               i2l6726 555E                                 i2l7630 3666  
                               i2l7622 360E                                 i2l7614 35B6  
                               i2l7606 3534                                 i2l9312 4FF4  
                               i2l9320 5012                                 i2l9304 4FDA  
                               i2l7720 3790                                 i2l7632 367C  
                               i2l7624 3624                                 i2l7616 35CC  
                               i2l7640 3702                                 i2l7730 37AE  
                               i2l7634 3692                                 i2l7626 363A  
                               i2l7618 35E2                                 i2l9324 5020  
                               i2l9316 5008                                 i2l9308 4FE8  
                               i2l6668 5A54                                 i2l6692 5AD8  
                               i2l7820 38F2                                 i2l7812 38CE  
                               i2l7804 38AA                                 i2l7740 37CC  
                               i2l7732 37B4                                 i2l7716 377C  
                               i2l7708 3762                                 i2l7628 3650  
                               i2l7734 37BA                                 i2l7718 378C  
                               i2l7726 379A                                 i2l7638 36A8  
                               i2l7816 38E0                                 i2l7808 38BC  
                               i2l7736 37C0                                 i2l7744 37D2  
                               i2l9272 50B4                                 i2l9290 5B10  
                               i2l7770 383C                                 i2l7738 37C6  
                               i2l7826 38FC                                 i2l7780 3862  
                               i2l7764 382E                                 i2l7756 3816  
                               i2l9700 2FBC                                 i2l9286 5B00  
                               i2l7790 3884                                 i2l7774 3858  
                               i2l9710 2FDE                                 i2l9702 2FC2  
                               i2l9278 50DE                                 i2l7784 3876  
                               i2l7786 387A                                 i2l9810 3150  
                               i2l9802 312C                                 i2l9730 3016  
                               i2l9714 2FEC                                 i2l9706 2FD0  
                               i2l7798 389C                                 i2l9830 319E  
                               i2l9822 317A                                 i2l9814 315E  
                               i2l9806 313A                                 i2l9750 305E  
                               i2l9742 3042                                 i2l9734 3024  
                               i2l9726 3008                                 i2l9718 2FFA  
                               i2l9842 31D0                                 i2l9834 31AC  
                               i2l9826 3190                                 i2l9818 316C  
                               i2l9770 30AC                                 i2l9762 3090  
                               i2l9754 306C                                 i2l9746 3050  
                               i2l9738 3034                                 i2l9838 31BA  
                               i2l9790 30FA                                 i2l9782 30DE  
                               i2l9774 30BA                                 i2l9766 309E  
                               i2l9758 307A                                 i2l9848 31DE  
                               i2l9794 3110                                 i2l9786 30EC  
                               i2l9778 30D0                                 i2l9798 311E  
              _f_most_recent_sort_time 0135                          PlatformTest@i 00B1  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR2IF 007CF1  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR2ON 007E52                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 59E6  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     __end_of_dispLogs 5A7E                                 ___ftge 4784  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 45E6                                 ___wmul 5666  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                               _getMAG 569C                              ??___awmod 0084  
                          logRun@byte1 00B2                            logRun@byte2 00B3  
                          logRun@byte3 00B4                       __end_of_readCOND 546E  
                               _getRTC 4C5E                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 5AC2  
                               _initUI 5700                                 _readIR 53D6  
                               _logRun 3EA2                                 getIR@i 0087  
                               clear_0 53AE                                 clear_1 53BA  
                               clear_2 53C6                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestDC 5280  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 1B1A                              ??_handler 004B  
              __size_of_initGlobalVars 00C0                           ?_retrieveLog 0007  
                               _strcpy 5630                     __size_of_SpeedTest 0084  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 5A0E  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 59E6                            ?_BothServos 0001  
                            ??_isdigit 0080                      __end_ofi2___awmod 502A  
                    __end_ofi2___lwdiv 5388                       __end_of_printRTC 2F8C  
                         __mediumconst FA8A                      __end_ofi2___lwmod 5586  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 00F4  
                       i2___awmod@sign 0006                  __end_of_algorithmTest 46BC  
                    __end_ofi2_lcdInst 5BBA                      __end_ofi2_isdigit 5AE0  
                           __accesstop 0080                __end_of__initialization 53CC  
                        ?_inputHandler 002A                             ___ftge@ff1 0092  
                           ___ftge@ff2 0095                  _most_recent_sort_time 0145  
                        ___rparam_used 000001                          ?_PlatformTest 0001  
              printSortTimer@start_sec 003B                  __size_of_actuatorTest 08B8  
                           ___awtoft@c 008E                          i2_EEPROM_read 5B46  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E8  
                  __size_ofi2_delay_ms 001C                           __pidataBANK1 5BCE  
                  BlockerTest@cam_flag 00B1                          __end_of_getIR 4F48  
                          i2printRTC@i 0041                          _initSortTimer 4A86  
          __end_of_updateServoPosition 4DE6                          __end_of_putch 5B92  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 1B1A                             __end_of_UI 08DA  
                            ?i2___wmul 0001                     __size_of_lcdNibble 006C  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002D     __end_of_change_state_to_menu_start 5968  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 593C  
                printSortTimer@cur_sec 003D                              ?i2_printf 000D  
                              ??_getIR 0086                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0127                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 08DA  
              __size_of_PortTestPusher 005C                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C         __size_ofi2_updateServoPosition 0068  
        __end_ofi2_updateServoPosition 50FE                           _EEPROM_write 441C  
                       ??_PlatformTest 00AB               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                                UI@F3246 0149  
                    __end_of_SpeedTest 4D68                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 03EE                      printRTC@RTC_month 00BC  
                              ?___ftge 0092                                _ID$1145 00AF  
                              _ID$1148 00B0                           ?i2_lcdNibble 0001  
                              UI@i_412 00C9                                UI@i_415 00CA  
                              UI@i_416 00CB                                UI@i_450 00D4  
                              UI@i_442 00D0                                UI@i_434 00CC  
                              UI@i_451 00D5                                UI@i_443 00D1  
                              UI@i_435 00CD                                UI@i_446 00D2  
                              UI@i_438 00CE                                UI@i_447 00D3  
                              UI@i_439 00CF                       ??_updateArmState 0001  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getMAG 0001                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                              ?___awtoft 008E  
                            ?___ftpack 0080                            ?_PortTestDC 0001  
                              ?_printf 008E                                _UI$2433 00C6  
                              ?_strcpy 0080                        _pan_servo_state 006B  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                              i2l10110 3B68                                i2l10102 3B48  
                              i2l10032 3268                                i2l10104 3B52  
                              i2l10050 3390                                i2l10028 3258  
                              i2l10132 3C08                                i2l10116 3B7E  
                              i2l10124 3B9C                                i2l10038 32C2  
                              i2l10118 3B92                                i2l10126 3BE6  
                              i2l10302 3A32                                i2l10064 33FC  
                              i2l10072 3430                                i2l10144 3C54  
                              i2l10128 3BF0                                i2l10058 33E4  
                              i2l10138 3C2E                                i2l10330 3A8A  
                              i2l10250 3996                                i2l10076 3464  
                              i2l10324 3A70                                i2l10308 3A40  
                              i2l10252 399A                                i2l10260 39AE  
                              i2l10078 346A                                i2l10190 5596  
                              i2l10158 3CAA                                i2l10334 3A90  
                              i2l10262 39C6                                i2l10280 39EC  
                              i2l10256 39A6                                i2l10194 559C  
                              i2l10098 3B32                                i2l10266 39D0  
                              i2l10188 5590                                i2l10356 3AD6  
                              i2l10810 3BDE                                i2l10820 321E  
                              i2l10812 3CC2                                i2l10804 3BC0  
                              i2l10822 323A                                i2l10814 3CD2  
                              i2l10806 3BCA                                i2l10808 3BD4  
                              i2l10826 37EA                                i2l10818 31FC  
                              i2l10828 3806                              ?_delay_ms 0001  
                       PlatformTest@on 00B5                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                _RTCflag 00E4  
                            ?_readCOND 0001                             _initEEPROM 5B30  
                              i2_putch 5BA2                              ?_initTime 0080  
                      _f_loadingNewCan 00EE                        i2printRTC@month 003D  
                __size_of_Distribution 00E2            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 5096                                _Loading 1192  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                        __size_of___ftge 00C8  
                              ___awdiv 490C                                ___awmod 4B30  
                           _initServos 4DE6                                ___lldiv 49CA  
                      __size_of___wmul 0036                        __size_of_getMAG 0032  
                              ___lwdiv 4E5E                                ___lwmod 5162  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                           ?_BlockerTest 0001  
                      __size_of_initUI 0030                        __size_of_readIR 004C  
                              __pcinit 5388                             ??___awtoft 0091  
                 i2EEPROM_read@address 0001                        __size_of_logRun 0144  
                           ??___ftpack 0085                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 484C  
                              _lcdInst 5B92                                _handler 0008  
                              __ptext0 46BC                                __ptext1 5A7E  
                              __ptext2 1192                                __ptext3 4A86  
                              __ptext4 484C                                __ptext5 569C  
                              __ptext6 4ED6                                __ptext7 53D6  
                              __ptext8 16C4                                __ptext9 5422  
                      __size_of_printf 0438                                _readADC 5968  
                      __size_of_strcpy 0036                                _initLCD 54BA  
                              _cur_can 012B                                _loadRTC 4BD2  
                              _readMAG 546E                                _dpowers FA9C  
                   actuatorTest@i_1750 00B1                     actuatorTest@i_1752 00B2  
                   actuatorTest@i_1761 00B8                     actuatorTest@i_1753 00B3  
                   actuatorTest@i_1762 00B9                     actuatorTest@i_1746 00AE  
                   actuatorTest@i_1771 00BE                     actuatorTest@i_1755 00B4  
                   actuatorTest@i_1747 00AF                     actuatorTest@i_1739 00AD  
                         __size_of_arm 00FE                     actuatorTest@i_1772 00BF  
                   actuatorTest@i_1756 00B5                     actuatorTest@i_1765 00BA  
                   actuatorTest@i_1749 00B0                     actuatorTest@i_1766 00BB  
                   actuatorTest@i_1758 00B6                     actuatorTest@i_1775 00C0  
                   actuatorTest@i_1759 00B7                     actuatorTest@i_1776 00C1  
                   actuatorTest@i_1768 00BC                     actuatorTest@i_1769 00BD  
                   actuatorTest@i_1778 00C2                     actuatorTest@i_1779 00C3  
                              _isdigit 5994                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 0126  
                         ??i2_delay_ms 0001                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 4504                         __pintcode_body 392A  
                 PlatformTest@res_1791 00AF                   end_of_initialization 53CC  
                           ??_readCOND 0082                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 392A                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestDC 005C  
                            i2u1150_47 5300                              i2u1151_47 5322  
                            i2u1152_47 532C                              i2u1153_47 5B08  
                            i2u1148_47 3782                              i2u1149_47 52F6  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                     __end_ofi2_delay_ms 5B18  
               __end_of_initGlobalVars 490C                             _sensorTest 29C4  
                           _servoTimes 005B                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 392A  
                         ??_BothServos 00AB                  __end_of_machineConfig 5162  
                 __end_of_PlatformTest 29C4                             _updateMenu 2F8C  
                    i2_I2C_Master_Read 5A34                              _IR_signal 00E0  
                    i2_I2C_Master_Wait 5B70                      i2_I2C_Master_Stop 5BE6  
                            i2___awmod 4FBA                      i2___lwdiv@divisor 0008  
                      _log_count_total 0143                         _PortTestPusher 5224  
                            i2___lwdiv 5336                              i2___lwmod 5544  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 373E  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                            ?_initEEPROM 0001  
                            i2_lcdInst 5BAE                          Loading@i_1122 00B6  
                        Loading@i_1131 00B8                          Loading@i_1133 00BA  
                        Loading@i_1134 00BC                          Loading@i_1136 00BE  
                           _total_time 00FA                            printf@width 00A9  
                 __size_of_stopSignals 001C                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 5AC2                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 2340                    __end_of_EEPROM_read 5B30  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___ftge 484C                         __end_of___wmul 569C  
                       __end_of_getMAG 56CE                         __end_of_getRTC 4CE4  
                 __size_ofi2_lcdNibble 005A                         _timer2_counter 0073  
                        EEPROM_write@i 00AF                          i2lcdInst@data 0003  
                       __end_of_initUI 5730                         __end_of_readIR 5422  
                       __end_of_logRun 3FE6                       i2___wmul@product 0005  
                       __end_of_printf 1F52                           i2printf@flag 0026  
                       __end_of_strcpy 5666              __end_ofi2_I2C_Master_Read 5A5A  
            __end_ofi2_I2C_Master_Wait 5B82                           i2printf@prec 001D  
                  start_initialization 5388              __end_ofi2_I2C_Master_Stop 5BEE  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 0125            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                 __end_of_PortTestPusher 5280  
                          __end_of_arm 441C                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1407 00B0  
                i2I2C_Master_Read@temp 0003                             ?i2___awmod 0001  
                 BlockerTest@cond_flag 00B3                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                               ??___ftge 0098  
                            _SpeedTest 4CE4                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                            ?_sensorTest 0001  
                          __pdataBANK1 0149                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                               ID@i_1150 00B7  
                             ID@i_1151 00B9                               ID@i_1144 00B3  
                             ID@i_1147 00B5                           ??_PortTestDC 00AB  
               printSortTimer@timeDiff 0045       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    __size_of_initEEPROM 0016  
                 __size_of_BlockerTest 01C6                    _printSortTimer$2573 0043  
                    __size_of___awtoft 0044                      __size_of___ftpack 010C  
                          __pbssCOMRAM 005B           __size_of_updateServoPosition 007E  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
                      ?_PortTestPusher 0001                __size_of_printSortTimer 02BC  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$2068 0081                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 003F  
                    printSortTimer@sec 0041                    __size_of_initServos 0078  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                     _tilt_servo_state 0071                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 0129  
                    __size_of_readCOND 004C                            _EEPROM_read 5B18  
                     _I2C_Master_Start 5BDE                     __end_of_PortTestDC 52DC  
                            _f_lastCan 00EC                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 5BBA  
                    __size_of_initTime 0022                  i2_updateServoPosition 5096  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                             ?_SpeedTest 0001  
                        __pmediumconst FA8A                              _lcdNibble 502A  
                __size_of_inputHandler 01EC                               ?___awdiv 0086  
                            __ptext100 5B70                              __ptext101 5AFC  
                            __ptext102 4FBA                               ?___awmod 0080  
                             ?___lldiv 0080                         _sensor_outputs 00DA  
                             ?___lwdiv 0080                               ?___lwmod 0087  
                __size_of_PlatformTest 0316                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 0139                              _cur_state 00E6  
                     ___lwdiv@quotient 0084                         __size_of_getIR 0072  
                          ??i2___awmod 0005                          _algorithmTest 45E6  
                          ??i2___lwdiv 000A                            _COND_signal 00DE  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 0456                            __size_of_UI 08C8  
                  __size_of_sensorTest 02FE             __end_ofi2_I2C_Master_Start 5BF6  
           __end_ofi2_I2C_Master_Write 5BCE                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATBbits 000F8A                               _LATCbits 000F8B  
                             _LATDbits 000F8C                           _inputHandler 373E  
                          ??i2_isdigit 0001                           _PlatformTest 26AE  
                         BlockerTest@i 00AD                               i2u510_40 5A52  
                             _PIR2bits 000FA1                               i2u630_40 3596  
                      PlatformTest@res 00AD                               i2u573_40 2466  
                             i2u573_47 245C                               i2u577_40 24C6  
                             i2u577_47 24BC                               i2u960_40 3406  
                             i2u962_40 342E                               i2u961_48 3408  
                             i2u955_40 33A6                               i2u958_40 33CE  
                             i2u958_46 33D0                    __size_of_updateMenu 02C0  
                       _log_completion 00F2                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 0077  
                            _was_low_2 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 5A0E                          lcdNibble@data 0081  
                             i2_getRTC 4F48                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
              __size_of_updateArmState 003A                               Loading@i 00C0  
                             Loading@j 00C2                               i2_printf 2340  
                             i2_strcpy 56CE                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 539C  
                   i2___awmod@dividend 0001                           ??_initEEPROM 00B1  
                            readIR@res 0084                 ?i2_updateServoPosition 0001  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 5B5C                            _count_total 00FE  
               i2delay_ms@milliseconds 0002                       ??_initGlobalVars 0080  
                             __Hrparam 0000                       __size_of_Loading 0532  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                            ??_SpeedTest 00AB  
                __end_of_initSortTimer 4B30                           ??_initServos 0088  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 57C0             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 55F8             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 55C0                _change_state_to_menu_23 5790  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 58B0  
              _change_state_to_logs_12 5880                _change_state_to_logs_22 5850  
              _change_state_to_logs_23 590E                _change_state_to_logs_33 5820  
              _change_state_to_logs_34 57F0                       __size_of___lwmod 0062  
                       readADC@channel 0081                               ___awtoft 5500  
                             ___ftpack 410C                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 3B0C  
                   __end_of_initEEPROM 5B46                        _I2C_Master_Init 51C4  
                     __size_of_readADC 002C                        _I2C_Master_Read 58E0  
                     __size_of_initLCD 0046                           _f_ID_receive 012D  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004C  
                      _I2C_Master_Wait 5B5C                        _I2C_Master_Stop 5BD6  
                     __size_of_isdigit 002A                               _delay_ms 59BE  
                       _printSortTimer 324C                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 410C  
                             __ptext10 59BE                               __ptext11 4784  
                             __ptext20 49CA                               __ptext12 5500  
                             __ptext21 593C                               __ptext13 410C  
                             __ptext30 4C5E                               __ptext22 5AA0  
                             __ptext14 4504                               __ptext31 5BBA  
                             __ptext23 54BA                               __ptext15 50FE  
                             __ptext40 4218                               __ptext32 5BD6  
                             __ptext24 5B30                               __ptext16 3EA2  
                             __ptext41 29C4                               __ptext33 5BDE  
                             __ptext25 441C                               __ptext17 5700  
                             __ptext50 1F52                               __ptext42 546E  
                             __ptext34 58E0                               __ptext26 5B18  
                             __ptext18 4BD2                               __ptext51 5AE0  
                             __ptext43 431E                               __ptext35 5B5C  
                             __ptext27 0012                               __ptext19 51C4  
                             __ptext60 5162                               __ptext52 4DE6  
                             __ptext44 45E6                               __ptext36 55C0  
                             __ptext28 2CC2                               __ptext61 4E5E  
                             __ptext53 4D68                               __ptext45 08DA  
                             __ptext37 55F8                               __ptext29 5630  
                             __ptext70 56CE                               __ptext62 5B92  
                             __ptext54 3CDC                               __ptext46 4CE4  
                             __ptext38 4B30                               __ptext71 373E  
                             __ptext63 502A                               __ptext55 5968  
                             __ptext47 5224                               __ptext39 490C  
                             __ptext80 5880                               __ptext72 5730  
                             __ptext56 1B1A                               __ptext48 5280  
                             __ptext81 58B0                               __ptext73 5760  
                             __ptext65 3B14                               __ptext57 5B82  
                             __ptext49 26AE                               __ptext90 5A0E  
                             __ptext82 5A5A                               __ptext74 5790  
                             __ptext66 5096                               __ptext58 5994  
                             __ptext91 5544                               __ptext83 3FE6  
                             __ptext75 57C0                               __ptext67 2F8C  
                             __ptext59 5666                               __ptext92 5336  
                             __ptext84 5B46                               __ptext76 57F0  
                             __ptext68 59E6                               __ptext93 5BAE  
                             __ptext85 5586                               __ptext77 5820  
                             __ptext69 3508                               __ptext94 52DC  
                             __ptext86 324C                               __ptext78 590E  
                             __ptext95 4F48                               __ptext87 2340  
                             __ptext79 5850                               __ptext96 5BC4  
                             __ptext88 5BA2                               __ptext97 5BE6  
                             __ptext89 5AC2                               __ptext98 5BEE  
                             __ptext99 5A34                               _dispLogs 5A5A  
                        ?_actuatorTest 0001                     PlatformTest@i_1795 00B3  
                             _readCOND 5422                          ??_stopSignals 0080  
                           strcpy@from 0082                         i2_isdigit$2068 0002  
                   __end_of_initServos 4E5E                          __size_of_Test 0106  
                        ?_EEPROM_write 00AB                               _initTime 5AA0  
                        __size_of_main 00C8                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F8  
                  _updateServoPosition 4D68                 __size_of_machineConfig 0064  
                        ??i2_lcdNibble 0001                               _printRTC 2CC2  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F6                     _f_can_coming_to_ID 012F  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 5790      __end_ofi2_change_state_to_menu_22 5760  
                     ??_PortTestPusher 00AB                               loadRTC@i 0096  
                    i2___awmod@divisor 0003                 __end_of_printSortTimer 3508  
                            putch@data 0082                      i2___awmod@counter 0005  
             __end_of_I2C_Master_Start 5BE6                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 5BC4                             _INTCONbits 000FF2  
                 ?_updateServoPosition 0080                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00E2  
                             isdigit@c 0082                          sensorTest@res 00AD  
                       ??_actuatorTest 00AB                    _servo_timer_counter 006D  
                             intlevel2 0000                         ??_EEPROM_write 00AE  
                       BlockerTest@res 00AF                     __end_of_sensorTest 2CC2  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 5AFC  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 324C                __end_of_I2C_Master_Init 5224  
              __end_of_I2C_Master_Read 590E                __end_of_I2C_Master_Wait 5B70  
                        ??_BlockerTest 00AB                __end_of_I2C_Master_Stop 5BDE  
                          lcdInst@data 0082                          printRTC@F3236 014D  
                         retrieveLog@i 000E                            _retrieveLog 3FE6  
                  __end_ofi2_lcdNibble 5336                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                     _servo_timer_target 006F  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                      ___lwmod@divisor 0089                         _updateArmState 5586  
                    _f_can_distributed 0133                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 50FE  
                      ___lwmod@counter 008B                      _updateServoStates 3B14  
                        printRTC@month 00BE                          ?_Distribution 0001  
                   ?_updateServoStates 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                         _f_arm_position 00EA  
                  ??_updateServoStates 0009                     i2printRTC@INT_time 002D  
